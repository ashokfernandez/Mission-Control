
MouseHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00001a48  00001adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080013a  0080013a  00001b16  2**0
                  ALLOC
  3 .stab         00001014  00000000  00000000  00001b18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000315  00000000  00000000  00002b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000006d0  00000000  00000000  00002e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000e7f  00000000  00000000  00003511  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ae72  00000000  00000000  00004390  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b01  00000000  00000000  0000f202  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000754f  00000000  00000000  00011d03  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000aa0  00000000  00000000  00019254  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000425c  00000000  00000000  00019cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004f3b  00000000  00000000  0001df50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000780  00000000  00000000  00022e8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return USB_Host_SendControlRequest(Buffer);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointNum)
{
       0:	1a c1       	rjmp	.+564    	; 0x236 <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       4:	36 c1       	rjmp	.+620    	; 0x272 <__bad_interrupt>
		  ReportData[CurrentBit / 8] |= BitMask;

		CurrentBit++;
		BitMask <<= 1;
	}
}
       6:	00 00       	nop
	return HOST_SENDCONTROL_Successful;
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
       8:	34 c1       	rjmp	.+616    	; 0x272 <__bad_interrupt>
       a:	00 00       	nop
       c:	32 c1       	rjmp	.+612    	; 0x272 <__bad_interrupt>
       e:	00 00       	nop
      10:	30 c1       	rjmp	.+608    	; 0x272 <__bad_interrupt>
      12:	00 00       	nop
      14:	2e c1       	rjmp	.+604    	; 0x272 <__bad_interrupt>
      16:	00 00       	nop
      18:	2c c1       	rjmp	.+600    	; 0x272 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2a c1       	rjmp	.+596    	; 0x272 <__bad_interrupt>
      1e:	00 00       	nop
      20:	28 c1       	rjmp	.+592    	; 0x272 <__bad_interrupt>
      22:	00 00       	nop
      24:	26 c1       	rjmp	.+588    	; 0x272 <__bad_interrupt>
      26:	00 00       	nop
      28:	7b c5       	rjmp	.+2806   	; 0xb20 <__vector_10>
      2a:	00 00       	nop
      2c:	22 c1       	rjmp	.+580    	; 0x272 <__bad_interrupt>
      2e:	00 00       	nop
      30:	20 c1       	rjmp	.+576    	; 0x272 <__bad_interrupt>
      32:	00 00       	nop
      34:	1e c1       	rjmp	.+572    	; 0x272 <__bad_interrupt>
      36:	00 00       	nop
      38:	1c c1       	rjmp	.+568    	; 0x272 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1a c1       	rjmp	.+564    	; 0x272 <__bad_interrupt>
      3e:	00 00       	nop
      40:	18 c1       	rjmp	.+560    	; 0x272 <__bad_interrupt>
      42:	00 00       	nop
      44:	16 c1       	rjmp	.+556    	; 0x272 <__bad_interrupt>
      46:	00 00       	nop
      48:	14 c1       	rjmp	.+552    	; 0x272 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	12 c1       	rjmp	.+548    	; 0x272 <__bad_interrupt>
      4e:	00 00       	nop
      50:	10 c1       	rjmp	.+544    	; 0x272 <__bad_interrupt>
      52:	00 00       	nop
      54:	0e c1       	rjmp	.+540    	; 0x272 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c c1       	rjmp	.+536    	; 0x272 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0a c1       	rjmp	.+532    	; 0x272 <__bad_interrupt>
      5e:	00 00       	nop
      60:	08 c1       	rjmp	.+528    	; 0x272 <__bad_interrupt>
      62:	00 00       	nop
      64:	06 c1       	rjmp	.+524    	; 0x272 <__bad_interrupt>
      66:	00 00       	nop
      68:	04 c1       	rjmp	.+520    	; 0x272 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	02 c1       	rjmp	.+516    	; 0x272 <__bad_interrupt>
      6e:	00 00       	nop
      70:	00 c1       	rjmp	.+512    	; 0x272 <__bad_interrupt>
      72:	00 00       	nop
      74:	fe c0       	rjmp	.+508    	; 0x272 <__bad_interrupt>
      76:	00 00       	nop
      78:	fc c0       	rjmp	.+504    	; 0x272 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fa c0       	rjmp	.+500    	; 0x272 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f8 c0       	rjmp	.+496    	; 0x272 <__bad_interrupt>
      82:	00 00       	nop
      84:	f6 c0       	rjmp	.+492    	; 0x272 <__bad_interrupt>
      86:	00 00       	nop
      88:	f4 c0       	rjmp	.+488    	; 0x272 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f2 c0       	rjmp	.+484    	; 0x272 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f0 c0       	rjmp	.+480    	; 0x272 <__bad_interrupt>
      92:	00 00       	nop
      94:	ee c0       	rjmp	.+476    	; 0x272 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4162>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4154>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4146>:
     11d:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     12d:	68 65 64 2e 0d 0a 00                                hed....

00000134 <__c.4141>:
     134:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     144:	0d 0a 00                                            ...

00000147 <__c.4112>:
     147:	64 58 3a 25 32 64 20 64 59 3a 25 32 64 20 42 75     dX:%2d dY:%2d Bu
     157:	74 74 6f 6e 3a 25 64 0d 0a 00                       tton:%d...

00000161 <__c.4107>:
     161:	4d 6f 75 73 65 20 45 6e 75 6d 65 72 61 74 65 64     Mouse Enumerated
     171:	2e 0d 0a 00                                         ....

00000175 <__c.4105>:
     175:	43 6f 75 6c 64 20 6e 6f 74 20 53 65 74 20 42 6f     Could not Set Bo
     185:	6f 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f 64 65     ot Protocol Mode
     195:	2e 0d 0a 00                                         ....

00000199 <__c.4103>:
     199:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     1a9:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     1b9:	6f 6e 2e 0d 0a 00                                   on....

000001bf <__c.4101>:
     1bf:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1cf:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4d 6f 75 73     Not a Valid Mous
     1df:	65 2e 0d 0a 00                                      e....

000001e4 <__c.4098>:
     1e4:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1f4:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     204:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

00000211 <__c.4093>:
     211:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 6f 73 74 20     .[36mMouse Host 
     221:	44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b     Demo running....
     231:	5b 33 37 6d 00                                      [37m.

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d0 e2       	ldi	r29, 0x20	; 32
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61

00000242 <__do_copy_data>:
     242:	11 e0       	ldi	r17, 0x01	; 1
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b1 e0       	ldi	r27, 0x01	; 1
     248:	e8 e4       	ldi	r30, 0x48	; 72
     24a:	fa e1       	ldi	r31, 0x1A	; 26
     24c:	00 e0       	ldi	r16, 0x00	; 0
     24e:	0b bf       	out	0x3b, r16	; 59
     250:	02 c0       	rjmp	.+4      	; 0x256 <__do_copy_data+0x14>
     252:	07 90       	elpm	r0, Z+
     254:	0d 92       	st	X+, r0
     256:	aa 33       	cpi	r26, 0x3A	; 58
     258:	b1 07       	cpc	r27, r17
     25a:	d9 f7       	brne	.-10     	; 0x252 <__do_copy_data+0x10>

0000025c <__do_clear_bss>:
     25c:	11 e0       	ldi	r17, 0x01	; 1
     25e:	aa e3       	ldi	r26, 0x3A	; 58
     260:	b1 e0       	ldi	r27, 0x01	; 1
     262:	01 c0       	rjmp	.+2      	; 0x266 <.do_clear_bss_start>

00000264 <.do_clear_bss_loop>:
     264:	1d 92       	st	X+, r1

00000266 <.do_clear_bss_start>:
     266:	ad 34       	cpi	r26, 0x4D	; 77
     268:	b1 07       	cpc	r27, r17
     26a:	e1 f7       	brne	.-8      	; 0x264 <.do_clear_bss_loop>
     26c:	98 d0       	rcall	.+304    	; 0x39e <main>
     26e:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <_exit>

00000272 <__bad_interrupt>:
     272:	c6 ce       	rjmp	.-628    	; 0x0 <__vectors>

00000274 <EVENT_USB_Host_DeviceEnumerationComplete>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     274:	8b b1       	in	r24, 0x0b	; 11
     276:	8f 70       	andi	r24, 0x0F	; 15
     278:	80 66       	ori	r24, 0x60	; 96
     27a:	8b b9       	out	0x0b, r24	; 11
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     27c:	08 95       	ret

0000027e <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     27e:	90 91 46 01 	lds	r25, 0x0146
     282:	2d b7       	in	r18, 0x3d	; 61
     284:	3e b7       	in	r19, 0x3e	; 62
     286:	28 50       	subi	r18, 0x08	; 8
     288:	30 40       	sbci	r19, 0x00	; 0
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	f8 94       	cli
     28e:	3e bf       	out	0x3e, r19	; 62
     290:	0f be       	out	0x3f, r0	; 63
     292:	2d bf       	out	0x3d, r18	; 61
     294:	ed b7       	in	r30, 0x3d	; 61
     296:	fe b7       	in	r31, 0x3e	; 62
     298:	31 96       	adiw	r30, 0x01	; 1
     29a:	28 e9       	ldi	r18, 0x98	; 152
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	ad b7       	in	r26, 0x3d	; 61
     2a0:	be b7       	in	r27, 0x3e	; 62
     2a2:	12 96       	adiw	r26, 0x02	; 2
     2a4:	3c 93       	st	X, r19
     2a6:	2e 93       	st	-X, r18
     2a8:	11 97       	sbiw	r26, 0x01	; 1
     2aa:	82 83       	std	Z+2, r24	; 0x02
     2ac:	13 82       	std	Z+3, r1	; 0x03
     2ae:	64 83       	std	Z+4, r22	; 0x04
     2b0:	15 82       	std	Z+5, r1	; 0x05
     2b2:	96 83       	std	Z+6, r25	; 0x06
     2b4:	17 82       	std	Z+7, r1	; 0x07
     2b6:	0e 94 32 0a 	call	0x1464	; 0x1464 <printf_P>
     2ba:	8b b1       	in	r24, 0x0b	; 11
     2bc:	8f 70       	andi	r24, 0x0F	; 15
     2be:	80 69       	ori	r24, 0x90	; 144
     2c0:	8b b9       	out	0x0b, r24	; 11
     2c2:	2d b7       	in	r18, 0x3d	; 61
     2c4:	3e b7       	in	r19, 0x3e	; 62
     2c6:	28 5f       	subi	r18, 0xF8	; 248
     2c8:	3f 4f       	sbci	r19, 0xFF	; 255
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	3e bf       	out	0x3e, r19	; 62
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     2d4:	08 95       	ret

000002d6 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     2d6:	1f 93       	push	r17
     2d8:	18 2f       	mov	r17, r24
	USB_ShutDown();
     2da:	fd d3       	rcall	.+2042   	; 0xad6 <USB_ShutDown>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     2dc:	00 d0       	rcall	.+0      	; 0x2de <EVENT_USB_Host_HostError+0x8>
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <EVENT_USB_Host_HostError+0xa>
     2e0:	ed b7       	in	r30, 0x3d	; 61
     2e2:	fe b7       	in	r31, 0x3e	; 62
     2e4:	31 96       	adiw	r30, 0x01	; 1
     2e6:	8e ee       	ldi	r24, 0xEE	; 238
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	ad b7       	in	r26, 0x3d	; 61
     2ec:	be b7       	in	r27, 0x3e	; 62
     2ee:	12 96       	adiw	r26, 0x02	; 2
     2f0:	9c 93       	st	X, r25
     2f2:	8e 93       	st	-X, r24
     2f4:	11 97       	sbiw	r26, 0x01	; 1
     2f6:	12 83       	std	Z+2, r17	; 0x02
     2f8:	13 82       	std	Z+3, r1	; 0x03
     2fa:	0e 94 32 0a 	call	0x1464	; 0x1464 <printf_P>
     2fe:	8b b1       	in	r24, 0x0b	; 11
     300:	8f 70       	andi	r24, 0x0F	; 15
     302:	80 69       	ori	r24, 0x90	; 144
     304:	8b b9       	out	0x0b, r24	; 11
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	ff cf       	rjmp	.-2      	; 0x30e <EVENT_USB_Host_HostError+0x38>

00000310 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     310:	8d e1       	ldi	r24, 0x1D	; 29
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <puts_P>
     318:	8b b1       	in	r24, 0x0b	; 11
     31a:	8f 70       	andi	r24, 0x0F	; 15
     31c:	80 61       	ori	r24, 0x10	; 16
     31e:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     320:	08 95       	ret

00000322 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     322:	84 e3       	ldi	r24, 0x34	; 52
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <puts_P>
     32a:	8b b1       	in	r24, 0x0b	; 11
     32c:	8f 70       	andi	r24, 0x0F	; 15
     32e:	80 6a       	ori	r24, 0xA0	; 160
     330:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     332:	08 95       	ret

00000334 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     334:	84 b7       	in	r24, 0x34	; 52
     336:	87 7f       	andi	r24, 0xF7	; 247
     338:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     33a:	38 e1       	ldi	r19, 0x18	; 24
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	f8 94       	cli
     340:	30 93 60 00 	sts	0x0060, r19
     344:	10 92 60 00 	sts	0x0060, r1
     348:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	20 e8       	ldi	r18, 0x80	; 128
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	f8 94       	cli
     354:	20 93 61 00 	sts	0x0061, r18
     358:	80 93 61 00 	sts	0x0061, r24
     35c:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     35e:	83 e3       	ldi	r24, 0x33	; 51
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	90 93 cd 00 	sts	0x00CD, r25
     366:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     36a:	86 e0       	ldi	r24, 0x06	; 6
     36c:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     370:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     374:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     378:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     37a:	5a 9a       	sbi	0x0b, 2	; 11
			static inline void SerialStream_Init(const uint32_t BaudRate,
			                                     const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);

				stdout = &USARTStream;
     37c:	8c e2       	ldi	r24, 0x2C	; 44
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	90 93 4a 01 	sts	0x014A, r25
     384:	80 93 49 01 	sts	0x0149, r24
				stdin  = &USARTStream;
     388:	90 93 48 01 	sts	0x0148, r25
     38c:	80 93 47 01 	sts	0x0147, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     390:	8a b1       	in	r24, 0x0a	; 10
     392:	80 6f       	ori	r24, 0xF0	; 240
     394:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     396:	8b b1       	in	r24, 0x0b	; 11
     398:	8f 70       	andi	r24, 0x0F	; 15
     39a:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	SerialStream_Init(9600, false);
	LEDs_Init();
	USB_Init();
}
     39c:	93 c3       	rjmp	.+1830   	; 0xac4 <USB_Init>

0000039e <main>:

/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
     39e:	9f 92       	push	r9
     3a0:	af 92       	push	r10
     3a2:	bf 92       	push	r11
     3a4:	cf 92       	push	r12
     3a6:	df 92       	push	r13
     3a8:	ef 92       	push	r14
     3aa:	ff 92       	push	r15
     3ac:	0f 93       	push	r16
     3ae:	1f 93       	push	r17
     3b0:	df 93       	push	r29
     3b2:	cf 93       	push	r28
     3b4:	cd b7       	in	r28, 0x3d	; 61
     3b6:	de b7       	in	r29, 0x3e	; 62
     3b8:	c5 50       	subi	r28, 0x05	; 5
     3ba:	d2 40       	sbci	r29, 0x02	; 2
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	f8 94       	cli
     3c0:	de bf       	out	0x3e, r29	; 62
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	cd bf       	out	0x3d, r28	; 61
	SetupHardware();
     3c6:	b6 df       	rcall	.-148    	; 0x334 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mouse Host Demo running.\r\n" ESC_FG_WHITE));
     3c8:	81 e1       	ldi	r24, 0x11	; 17
     3ca:	92 e0       	ldi	r25, 0x02	; 2
     3cc:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     3d0:	8b b1       	in	r24, 0x0b	; 11
     3d2:	8f 70       	andi	r24, 0x0F	; 15
     3d4:	80 61       	ori	r24, 0x10	; 16
     3d6:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     3d8:	78 94       	sei
				LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

				uint16_t ConfigDescriptorSize;
				uint8_t  ConfigDescriptorData[512];

				if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     3da:	8e 01       	movw	r16, r28
     3dc:	0a 5f       	subi	r16, 0xFA	; 250
     3de:	1f 4f       	sbci	r17, 0xFF	; 255
     3e0:	5e 01       	movw	r10, r28
     3e2:	08 94       	sec
     3e4:	a1 1c       	adc	r10, r1
     3e6:	b1 1c       	adc	r11, r1
					break;
				}

				puts_P(PSTR("Mouse Enumerated.\r\n"));
				LEDs_SetAllLEDs(LEDMASK_USB_READY);
				USB_HostState = HOST_STATE_Configured;
     3e8:	2c e0       	ldi	r18, 0x0C	; 12
     3ea:	92 2e       	mov	r9, r18
				if (HID_Host_IsReportReceived(&Mouse_HID_Interface))
				{
					uint8_t LEDMask  = LEDS_NO_LEDS;

					USB_MouseReport_Data_t MouseReport;
					HID_Host_ReceiveReport(&Mouse_HID_Interface, &MouseReport);
     3ec:	93 e0       	ldi	r25, 0x03	; 3
     3ee:	c9 2e       	mov	r12, r25
     3f0:	d1 2c       	mov	r13, r1
     3f2:	cc 0e       	add	r12, r28
     3f4:	dd 1e       	adc	r13, r29

					printf_P(PSTR("dX:%2d dY:%2d Button:%d\r\n"), MouseReport.X,
     3f6:	87 e4       	ldi	r24, 0x47	; 71
     3f8:	e8 2e       	mov	r14, r24
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	f8 2e       	mov	r15, r24
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();

	for (;;)
	{
		switch (USB_HostState)
     3fe:	80 91 46 01 	lds	r24, 0x0146
     402:	8b 30       	cpi	r24, 0x0B	; 11
     404:	21 f0       	breq	.+8      	; 0x40e <main+0x70>
     406:	8c 30       	cpi	r24, 0x0C	; 12
     408:	09 f0       	breq	.+2      	; 0x40c <main+0x6e>
     40a:	8a c0       	rjmp	.+276    	; 0x520 <main+0x182>
     40c:	3c c0       	rjmp	.+120    	; 0x486 <main+0xe8>
     40e:	8b b1       	in	r24, 0x0b	; 11
     410:	8f 70       	andi	r24, 0x0F	; 15
     412:	80 6a       	ori	r24, 0xA0	; 160
     414:	8b b9       	out	0x0b, r24	; 11
				LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

				uint16_t ConfigDescriptorSize;
				uint8_t  ConfigDescriptorData[512];

				if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	b5 01       	movw	r22, r10
     41a:	a8 01       	movw	r20, r16
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	32 e0       	ldi	r19, 0x02	; 2
     420:	53 d4       	rcall	.+2214   	; 0xcc8 <USB_Host_GetDeviceConfigDescriptor>
     422:	88 23       	and	r24, r24
     424:	19 f0       	breq	.+6      	; 0x42c <main+0x8e>
				                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
				{
					puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     426:	84 ee       	ldi	r24, 0xE4	; 228
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	0a c0       	rjmp	.+20     	; 0x440 <main+0xa2>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				if (HID_Host_ConfigurePipes(&Mouse_HID_Interface,
     42c:	69 81       	ldd	r22, Y+1	; 0x01
     42e:	7a 81       	ldd	r23, Y+2	; 0x02
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	a8 01       	movw	r20, r16
     436:	f6 d6       	rcall	.+3564   	; 0x1224 <HID_Host_ConfigurePipes>
     438:	88 23       	and	r24, r24
     43a:	59 f0       	breq	.+22     	; 0x452 <main+0xb4>
				                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
				{
					puts_P(PSTR("Attached Device Not a Valid Mouse.\r\n"));
     43c:	8f eb       	ldi	r24, 0xBF	; 191
     43e:	91 e0       	ldi	r25, 0x01	; 1
     440:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <puts_P>
     444:	8b b1       	in	r24, 0x0b	; 11
     446:	8f 70       	andi	r24, 0x0F	; 15
     448:	80 69       	ori	r24, 0x90	; 144
     44a:	8b b9       	out	0x0b, r24	; 11
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     44c:	10 92 46 01 	sts	0x0146, r1
     450:	67 c0       	rjmp	.+206    	; 0x520 <main+0x182>
					break;
				}

				if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	00 d1       	rcall	.+512    	; 0x656 <USB_Host_SetDeviceConfiguration>
     456:	88 23       	and	r24, r24
     458:	19 f0       	breq	.+6      	; 0x460 <main+0xc2>
				{
					puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     45a:	89 e9       	ldi	r24, 0x99	; 153
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	f0 cf       	rjmp	.-32     	; 0x440 <main+0xa2>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				if (HID_Host_SetBootProtocol(&Mouse_HID_Interface) != 0)
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	68 d6       	rcall	.+3280   	; 0x1136 <HID_Host_SetBootProtocol>
     466:	88 23       	and	r24, r24
     468:	19 f0       	breq	.+6      	; 0x470 <main+0xd2>
				{
					puts_P(PSTR("Could not Set Boot Protocol Mode.\r\n"));
     46a:	85 e7       	ldi	r24, 0x75	; 117
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	e8 cf       	rjmp	.-48     	; 0x440 <main+0xa2>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				puts_P(PSTR("Mouse Enumerated.\r\n"));
     470:	81 e6       	ldi	r24, 0x61	; 97
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <puts_P>
     478:	8b b1       	in	r24, 0x0b	; 11
     47a:	8f 70       	andi	r24, 0x0F	; 15
     47c:	80 66       	ori	r24, 0x60	; 96
     47e:	8b b9       	out	0x0b, r24	; 11
				LEDs_SetAllLEDs(LEDMASK_USB_READY);
				USB_HostState = HOST_STATE_Configured;
     480:	90 92 46 01 	sts	0x0146, r9
     484:	4d c0       	rjmp	.+154    	; 0x520 <main+0x182>
				break;
			case HOST_STATE_Configured:
				if (HID_Host_IsReportReceived(&Mouse_HID_Interface))
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	39 d6       	rcall	.+3186   	; 0x10fe <HID_Host_IsReportReceived>
     48c:	88 23       	and	r24, r24
     48e:	09 f4       	brne	.+2      	; 0x492 <main+0xf4>
     490:	47 c0       	rjmp	.+142    	; 0x520 <main+0x182>
				{
					uint8_t LEDMask  = LEDS_NO_LEDS;

					USB_MouseReport_Data_t MouseReport;
					HID_Host_ReceiveReport(&Mouse_HID_Interface, &MouseReport);
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	b6 01       	movw	r22, r12
     498:	79 d6       	rcall	.+3314   	; 0x118c <HID_Host_ReceiveReport>

					printf_P(PSTR("dX:%2d dY:%2d Button:%d\r\n"), MouseReport.X,
     49a:	2d b7       	in	r18, 0x3d	; 61
     49c:	3e b7       	in	r19, 0x3e	; 62
     49e:	28 50       	subi	r18, 0x08	; 8
     4a0:	30 40       	sbci	r19, 0x00	; 0
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	3e bf       	out	0x3e, r19	; 62
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	2d bf       	out	0x3d, r18	; 61
     4ac:	ed b7       	in	r30, 0x3d	; 61
     4ae:	fe b7       	in	r31, 0x3e	; 62
     4b0:	31 96       	adiw	r30, 0x01	; 1
     4b2:	ad b7       	in	r26, 0x3d	; 61
     4b4:	be b7       	in	r27, 0x3e	; 62
     4b6:	12 96       	adiw	r26, 0x02	; 2
     4b8:	fc 92       	st	X, r15
     4ba:	ee 92       	st	-X, r14
     4bc:	11 97       	sbiw	r26, 0x01	; 1
     4be:	8c 81       	ldd	r24, Y+4	; 0x04
     4c0:	99 27       	eor	r25, r25
     4c2:	87 fd       	sbrc	r24, 7
     4c4:	90 95       	com	r25
     4c6:	93 83       	std	Z+3, r25	; 0x03
     4c8:	82 83       	std	Z+2, r24	; 0x02
     4ca:	8d 81       	ldd	r24, Y+5	; 0x05
     4cc:	99 27       	eor	r25, r25
     4ce:	87 fd       	sbrc	r24, 7
     4d0:	90 95       	com	r25
     4d2:	95 83       	std	Z+5, r25	; 0x05
     4d4:	84 83       	std	Z+4, r24	; 0x04
     4d6:	8b 81       	ldd	r24, Y+3	; 0x03
     4d8:	86 83       	std	Z+6, r24	; 0x06
     4da:	17 82       	std	Z+7, r1	; 0x07
     4dc:	c3 d7       	rcall	.+3974   	; 0x1464 <printf_P>
																  MouseReport.Y,
																  MouseReport.Button);
					if (MouseReport.X > 0)
     4de:	8c 81       	ldd	r24, Y+4	; 0x04
     4e0:	2d b7       	in	r18, 0x3d	; 61
     4e2:	3e b7       	in	r19, 0x3e	; 62
     4e4:	28 5f       	subi	r18, 0xF8	; 248
     4e6:	3f 4f       	sbci	r19, 0xFF	; 255
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	3e bf       	out	0x3e, r19	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	2d bf       	out	0x3d, r18	; 61
     4f2:	18 16       	cp	r1, r24
     4f4:	14 f4       	brge	.+4      	; 0x4fa <main+0x15c>
     4f6:	90 e1       	ldi	r25, 0x10	; 16
     4f8:	05 c0       	rjmp	.+10     	; 0x504 <main+0x166>
					  LEDMask |= LEDS_LED1;
					else if (MouseReport.X < 0)
     4fa:	88 23       	and	r24, r24
     4fc:	11 f0       	breq	.+4      	; 0x502 <main+0x164>
     4fe:	90 e2       	ldi	r25, 0x20	; 32
     500:	01 c0       	rjmp	.+2      	; 0x504 <main+0x166>
     502:	90 e0       	ldi	r25, 0x00	; 0
					  LEDMask |= LEDS_LED2;

					if (MouseReport.Y > 0)
     504:	8d 81       	ldd	r24, Y+5	; 0x05
     506:	18 16       	cp	r1, r24
     508:	14 f4       	brge	.+4      	; 0x50e <main+0x170>
					  LEDMask |= LEDS_LED3;
     50a:	90 68       	ori	r25, 0x80	; 128
     50c:	02 c0       	rjmp	.+4      	; 0x512 <main+0x174>
					else if (MouseReport.Y < 0)
     50e:	81 11       	cpse	r24, r1
					  LEDMask |= LEDS_LED4;
     510:	90 64       	ori	r25, 0x40	; 64

					if (MouseReport.Button)
     512:	8b 81       	ldd	r24, Y+3	; 0x03
     514:	81 11       	cpse	r24, r1
     516:	90 ef       	ldi	r25, 0xF0	; 240
     518:	8b b1       	in	r24, 0x0b	; 11
     51a:	8f 70       	andi	r24, 0x0F	; 15
     51c:	98 2b       	or	r25, r24
     51e:	9b b9       	out	0x0b, r25	; 11

				break;
		}

		HID_Host_USBTask(&Mouse_HID_Interface);
		USB_USBTask();
     520:	9a d5       	rcall	.+2868   	; 0x1056 <USB_USBTask>
     522:	6d cf       	rjmp	.-294    	; 0x3fe <main+0x60>

00000524 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     524:	98 2f       	mov	r25, r24
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     526:	20 91 9e 00 	lds	r18, 0x009E
	bool    BusSuspended = USB_Host_IsBusSuspended();
	uint8_t ErrorCode    = HOST_WAITERROR_Successful;
	bool    HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     52a:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     52e:	80 91 a0 00 	lds	r24, 0x00A0
     532:	8f 7d       	andi	r24, 0xDF	; 223
     534:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     538:	80 91 9f 00 	lds	r24, 0x009F
     53c:	8f 7d       	andi	r24, 0xDF	; 223
     53e:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     542:	80 91 9e 00 	lds	r24, 0x009E
     546:	81 60       	ori	r24, 0x01	; 1
     548:	80 93 9e 00 	sts	0x009E, r24
     54c:	26 c0       	rjmp	.+76     	; 0x59a <USB_Host_WaitMS+0x76>

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     54e:	80 91 9f 00 	lds	r24, 0x009F
     552:	85 ff       	sbrs	r24, 5
     554:	06 c0       	rjmp	.+12     	; 0x562 <USB_Host_WaitMS+0x3e>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     556:	80 91 9f 00 	lds	r24, 0x009F
     55a:	8f 7d       	andi	r24, 0xDF	; 223
     55c:	80 93 9f 00 	sts	0x009F, r24
			MS--;
     560:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     562:	80 91 46 01 	lds	r24, 0x0146
     566:	82 30       	cpi	r24, 0x02	; 2
     568:	11 f4       	brne	.+4      	; 0x56e <USB_Host_WaitMS+0x4a>
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	18 c0       	rjmp	.+48     	; 0x59e <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if an error has occurred on the selected pipe, false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     56e:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     572:	84 ff       	sbrs	r24, 4
     574:	07 c0       	rjmp	.+14     	; 0x584 <USB_Host_WaitMS+0x60>

			/** Clears the master pipe error flag. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPINTX &= ~(1 << PERRI);
     576:	80 91 a6 00 	lds	r24, 0x00A6
     57a:	8f 7e       	andi	r24, 0xEF	; 239
     57c:	80 93 a6 00 	sts	0x00A6, r24
     580:	92 e0       	ldi	r25, 0x02	; 2
     582:	0d c0       	rjmp	.+26     	; 0x59e <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     584:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     588:	81 ff       	sbrs	r24, 1
     58a:	07 c0       	rjmp	.+14     	; 0x59a <USB_Host_WaitMS+0x76>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     58c:	80 91 a6 00 	lds	r24, 0x00A6
     590:	8d 7f       	andi	r24, 0xFD	; 253
     592:	80 93 a6 00 	sts	0x00A6, r24
     596:	93 e0       	ldi	r25, 0x03	; 3
     598:	02 c0       	rjmp	.+4      	; 0x59e <USB_Host_WaitMS+0x7a>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     59a:	99 23       	and	r25, r25
     59c:	c1 f6       	brne	.-80     	; 0x54e <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     59e:	20 fd       	sbrc	r18, 0
     5a0:	05 c0       	rjmp	.+10     	; 0x5ac <USB_Host_WaitMS+0x88>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     5a2:	80 91 9e 00 	lds	r24, 0x009E
     5a6:	8e 7f       	andi	r24, 0xFE	; 254
     5a8:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     5ac:	35 ff       	sbrs	r19, 5
     5ae:	05 c0       	rjmp	.+10     	; 0x5ba <USB_Host_WaitMS+0x96>
	  USB_INT_Enable(USB_INT_HSOFI);
     5b0:	80 91 a0 00 	lds	r24, 0x00A0
     5b4:	80 62       	ori	r24, 0x20	; 32
     5b6:	80 93 a0 00 	sts	0x00A0, r24

	return ErrorCode;
}
     5ba:	89 2f       	mov	r24, r25
     5bc:	08 95       	ret

000005be <USB_Host_ResetDevice>:
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5be:	60 91 9e 00 	lds	r22, 0x009E

static void USB_Host_ResetDevice(void)
{
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);
     5c2:	80 91 a0 00 	lds	r24, 0x00A0
     5c6:	8d 7f       	andi	r24, 0xFD	; 253
     5c8:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     5cc:	80 91 9e 00 	lds	r24, 0x009E
     5d0:	82 60       	ori	r24, 0x02	; 2
     5d2:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean true if no bus reset is currently being sent, false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     5d6:	80 91 9e 00 	lds	r24, 0x009E

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     5da:	81 fd       	sbrc	r24, 1
     5dc:	fc cf       	rjmp	.-8      	; 0x5d6 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     5de:	80 91 9e 00 	lds	r24, 0x009E
     5e2:	81 60       	ori	r24, 0x01	; 1
     5e4:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();

	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     5e8:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     5ec:	80 91 a0 00 	lds	r24, 0x00A0
     5f0:	8f 7d       	andi	r24, 0xDF	; 223
     5f2:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     5f6:	80 91 9f 00 	lds	r24, 0x009F
     5fa:	8f 7d       	andi	r24, 0xDF	; 223
     5fc:	80 93 9f 00 	sts	0x009F, r24
     600:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     602:	40 ed       	ldi	r20, 0xD0	; 208
     604:	57 e0       	ldi	r21, 0x07	; 7
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     606:	80 91 9f 00 	lds	r24, 0x009F
     60a:	85 ff       	sbrs	r24, 5
     60c:	0b c0       	rjmp	.+22     	; 0x624 <USB_Host_ResetDevice+0x66>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     60e:	80 91 9f 00 	lds	r24, 0x009F
     612:	8f 7d       	andi	r24, 0xDF	; 223
     614:	80 93 9f 00 	sts	0x009F, r24
			USB_INT_Clear(USB_INT_DDISCI);
     618:	80 91 9f 00 	lds	r24, 0x009F
     61c:	8d 7f       	andi	r24, 0xFD	; 253
     61e:	80 93 9f 00 	sts	0x009F, r24
     622:	05 c0       	rjmp	.+10     	; 0x62e <USB_Host_ResetDevice+0x70>
     624:	ca 01       	movw	r24, r20
     626:	01 97       	sbiw	r24, 0x01	; 1
     628:	f1 f7       	brne	.-4      	; 0x626 <USB_Host_ResetDevice+0x68>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     62a:	21 50       	subi	r18, 0x01	; 1
     62c:	61 f7       	brne	.-40     	; 0x606 <USB_Host_ResetDevice+0x48>
		}

		_delay_ms(1);
	}

	if (HSOFIEnabled)
     62e:	35 ff       	sbrs	r19, 5
     630:	05 c0       	rjmp	.+10     	; 0x63c <USB_Host_ResetDevice+0x7e>
	  USB_INT_Enable(USB_INT_HSOFI);
     632:	80 91 a0 00 	lds	r24, 0x00A0
     636:	80 62       	ori	r24, 0x20	; 32
     638:	80 93 a0 00 	sts	0x00A0, r24

	if (BusSuspended)
     63c:	60 fd       	sbrc	r22, 0
     63e:	05 c0       	rjmp	.+10     	; 0x64a <USB_Host_ResetDevice+0x8c>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     640:	80 91 9e 00 	lds	r24, 0x009E
     644:	8e 7f       	andi	r24, 0xFE	; 254
     646:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
     64a:	80 91 a0 00 	lds	r24, 0x00A0
     64e:	82 60       	ori	r24, 0x02	; 2
     650:	80 93 a0 00 	sts	0x00A0, r24
}
     654:	08 95       	ret

00000656 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	USB_ControlRequest = (USB_Request_Header_t)
     656:	10 92 3e 01 	sts	0x013E, r1
     65a:	99 e0       	ldi	r25, 0x09	; 9
     65c:	90 93 3f 01 	sts	0x013F, r25
     660:	80 93 40 01 	sts	0x0140, r24
     664:	10 92 41 01 	sts	0x0141, r1
     668:	10 92 43 01 	sts	0x0143, r1
     66c:	10 92 42 01 	sts	0x0142, r1
     670:	10 92 45 01 	sts	0x0145, r1
     674:	10 92 44 01 	sts	0x0144, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     678:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
}
     680:	a7 c3       	rjmp	.+1870   	; 0xdd0 <USB_Host_SendControlRequest>

00000682 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "Host.h"

void USB_Host_ProcessNextHostState(void)
{
     682:	ef 92       	push	r14
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	df 93       	push	r29
     68a:	cf 93       	push	r28
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
     690:	28 97       	sbiw	r28, 0x08	; 8
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	f8 94       	cli
     696:	de bf       	out	0x3e, r29	; 62
     698:	0f be       	out	0x3f, r0	; 63
     69a:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     69c:	80 91 46 01 	lds	r24, 0x0146
     6a0:	86 30       	cpi	r24, 0x06	; 6
     6a2:	09 f4       	brne	.+2      	; 0x6a6 <USB_Host_ProcessNextHostState+0x24>
     6a4:	94 c0       	rjmp	.+296    	; 0x7ce <USB_Host_ProcessNextHostState+0x14c>
     6a6:	87 30       	cpi	r24, 0x07	; 7
     6a8:	70 f4       	brcc	.+28     	; 0x6c6 <USB_Host_ProcessNextHostState+0x44>
     6aa:	83 30       	cpi	r24, 0x03	; 3
     6ac:	c1 f1       	breq	.+112    	; 0x71e <USB_Host_ProcessNextHostState+0x9c>
     6ae:	84 30       	cpi	r24, 0x04	; 4
     6b0:	20 f4       	brcc	.+8      	; 0x6ba <USB_Host_ProcessNextHostState+0x38>
     6b2:	81 30       	cpi	r24, 0x01	; 1
     6b4:	09 f0       	breq	.+2      	; 0x6b8 <USB_Host_ProcessNextHostState+0x36>
     6b6:	07 c1       	rjmp	.+526    	; 0x8c6 <USB_Host_ProcessNextHostState+0x244>
     6b8:	13 c0       	rjmp	.+38     	; 0x6e0 <USB_Host_ProcessNextHostState+0x5e>
     6ba:	84 30       	cpi	r24, 0x04	; 4
     6bc:	c1 f1       	breq	.+112    	; 0x72e <USB_Host_ProcessNextHostState+0xac>
     6be:	85 30       	cpi	r24, 0x05	; 5
     6c0:	09 f0       	breq	.+2      	; 0x6c4 <USB_Host_ProcessNextHostState+0x42>
     6c2:	01 c1       	rjmp	.+514    	; 0x8c6 <USB_Host_ProcessNextHostState+0x244>
     6c4:	5b c0       	rjmp	.+182    	; 0x77c <USB_Host_ProcessNextHostState+0xfa>
     6c6:	88 30       	cpi	r24, 0x08	; 8
     6c8:	09 f4       	brne	.+2      	; 0x6cc <USB_Host_ProcessNextHostState+0x4a>
     6ca:	9b c0       	rjmp	.+310    	; 0x802 <USB_Host_ProcessNextHostState+0x180>
     6cc:	88 30       	cpi	r24, 0x08	; 8
     6ce:	08 f4       	brcc	.+2      	; 0x6d2 <USB_Host_ProcessNextHostState+0x50>
     6d0:	8a c0       	rjmp	.+276    	; 0x7e6 <USB_Host_ProcessNextHostState+0x164>
     6d2:	89 30       	cpi	r24, 0x09	; 9
     6d4:	09 f4       	brne	.+2      	; 0x6d8 <USB_Host_ProcessNextHostState+0x56>
     6d6:	b4 c0       	rjmp	.+360    	; 0x840 <USB_Host_ProcessNextHostState+0x1be>
     6d8:	8a 30       	cpi	r24, 0x0A	; 10
     6da:	09 f0       	breq	.+2      	; 0x6de <USB_Host_ProcessNextHostState+0x5c>
     6dc:	f4 c0       	rjmp	.+488    	; 0x8c6 <USB_Host_ProcessNextHostState+0x244>
     6de:	d9 c0       	rjmp	.+434    	; 0x892 <USB_Host_ProcessNextHostState+0x210>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     6e0:	00 91 3b 01 	lds	r16, 0x013B
     6e4:	10 91 3c 01 	lds	r17, 0x013C
     6e8:	01 15       	cp	r16, r1
     6ea:	11 05       	cpc	r17, r1
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <USB_Host_ProcessNextHostState+0x6e>
     6ee:	eb c0       	rjmp	.+470    	; 0x8c6 <USB_Host_ProcessNextHostState+0x244>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	18 df       	rcall	.-464    	; 0x524 <USB_Host_WaitMS>
     6f4:	68 2f       	mov	r22, r24
     6f6:	88 23       	and	r24, r24
     6f8:	31 f0       	breq	.+12     	; 0x706 <USB_Host_ProcessNextHostState+0x84>
				{
					USB_HostState = PostWaitState;
     6fa:	80 91 3a 01 	lds	r24, 0x013A
     6fe:	80 93 46 01 	sts	0x0146, r24
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	dc c0       	rjmp	.+440    	; 0x8be <USB_Host_ProcessNextHostState+0x23c>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     706:	c8 01       	movw	r24, r16
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	90 93 3c 01 	sts	0x013C, r25
     70e:	80 93 3b 01 	sts	0x013B, r24
     712:	89 2b       	or	r24, r25
     714:	09 f0       	breq	.+2      	; 0x718 <USB_Host_ProcessNextHostState+0x96>
     716:	d7 c0       	rjmp	.+430    	; 0x8c6 <USB_Host_ProcessNextHostState+0x244>
				  USB_HostState = PostWaitState;
     718:	80 91 3a 01 	lds	r24, 0x013A
     71c:	bf c0       	rjmp	.+382    	; 0x89c <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     71e:	88 ee       	ldi	r24, 0xE8	; 232
     720:	93 e0       	ldi	r25, 0x03	; 3
     722:	90 93 3c 01 	sts	0x013C, r25
     726:	80 93 3b 01 	sts	0x013B, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     72a:	84 e0       	ldi	r24, 0x04	; 4
     72c:	b7 c0       	rjmp	.+366    	; 0x89c <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     72e:	80 91 3b 01 	lds	r24, 0x013B
     732:	90 91 3c 01 	lds	r25, 0x013C
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	90 93 3c 01 	sts	0x013C, r25
     73c:	80 93 3b 01 	sts	0x013B, r24
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	29 f0       	breq	.+10     	; 0x74e <USB_Host_ProcessNextHostState+0xcc>
     744:	80 ed       	ldi	r24, 0xD0	; 208
     746:	97 e0       	ldi	r25, 0x07	; 7
     748:	01 97       	sbiw	r24, 0x01	; 1
     74a:	f1 f7       	brne	.-4      	; 0x748 <USB_Host_ProcessNextHostState+0xc6>
     74c:	bc c0       	rjmp	.+376    	; 0x8c6 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     74e:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     750:	80 91 d8 00 	lds	r24, 0x00D8
     754:	80 61       	ori	r24, 0x10	; 16
     756:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     75a:	80 91 dd 00 	lds	r24, 0x00DD
     75e:	8b 7f       	andi	r24, 0xFB	; 251
     760:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     764:	80 91 d7 00 	lds	r24, 0x00D7
     768:	80 61       	ori	r24, 0x10	; 16
     76a:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     76e:	80 91 dd 00 	lds	r24, 0x00DD
     772:	82 60       	ori	r24, 0x02	; 2
     774:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     778:	85 e0       	ldi	r24, 0x05	; 5
     77a:	90 c0       	rjmp	.+288    	; 0x89c <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     77c:	80 91 9f 00 	lds	r24, 0x009F
     780:	80 ff       	sbrs	r24, 0
     782:	a1 c0       	rjmp	.+322    	; 0x8c6 <USB_Host_ProcessNextHostState+0x244>
			{
				USB_INT_Clear(USB_INT_DCONNI);
     784:	80 91 9f 00 	lds	r24, 0x009F
     788:	8e 7f       	andi	r24, 0xFE	; 254
     78a:	80 93 9f 00 	sts	0x009F, r24
				USB_INT_Clear(USB_INT_DDISCI);
     78e:	80 91 9f 00 	lds	r24, 0x009F
     792:	8d 7f       	andi	r24, 0xFD	; 253
     794:	80 93 9f 00 	sts	0x009F, r24

				USB_INT_Clear(USB_INT_VBERRI);
     798:	80 91 df 00 	lds	r24, 0x00DF
     79c:	8d 7f       	andi	r24, 0xFD	; 253
     79e:	80 93 df 00 	sts	0x00DF, r24
				USB_INT_Enable(USB_INT_VBERRI);
     7a2:	80 91 de 00 	lds	r24, 0x00DE
     7a6:	82 60       	ori	r24, 0x02	; 2
     7a8:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7ac:	80 91 9e 00 	lds	r24, 0x009E
     7b0:	81 60       	ori	r24, 0x01	; 1
     7b2:	80 93 9e 00 	sts	0x009E, r24

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     7b6:	c9 d0       	rcall	.+402    	; 0x94a <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	80 93 46 01 	sts	0x0146, r24
     7be:	84 e6       	ldi	r24, 0x64	; 100
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	90 93 3c 01 	sts	0x013C, r25
     7c6:	80 93 3b 01 	sts	0x013B, r24
     7ca:	86 e0       	ldi	r24, 0x06	; 6
     7cc:	5f c0       	rjmp	.+190    	; 0x88c <USB_Host_ProcessNextHostState+0x20a>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     7ce:	f7 de       	rcall	.-530    	; 0x5be <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	80 93 46 01 	sts	0x0146, r24
     7d6:	88 ec       	ldi	r24, 0xC8	; 200
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	90 93 3c 01 	sts	0x013C, r25
     7de:	80 93 3b 01 	sts	0x013B, r24
     7e2:	87 e0       	ldi	r24, 0x07	; 7
     7e4:	53 c0       	rjmp	.+166    	; 0x88c <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	00 e4       	ldi	r16, 0x40	; 64
     7f0:	10 e0       	ldi	r17, 0x00	; 0
     7f2:	ee 24       	eor	r14, r14
     7f4:	74 d0       	rcall	.+232    	; 0x8de <Pipe_ConfigurePipe>
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     7f6:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     7fa:	87 ff       	sbrs	r24, 7
     7fc:	5e c0       	rjmp	.+188    	; 0x8ba <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     7fe:	88 e0       	ldi	r24, 0x08	; 8
     800:	4d c0       	rjmp	.+154    	; 0x89c <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     802:	ae e3       	ldi	r26, 0x3E	; 62
     804:	b1 e0       	ldi	r27, 0x01	; 1
     806:	e3 e2       	ldi	r30, 0x23	; 35
     808:	f1 e0       	ldi	r31, 0x01	; 1
     80a:	88 e0       	ldi	r24, 0x08	; 8
     80c:	01 90       	ld	r0, Z+
     80e:	0d 92       	st	X+, r0
     810:	81 50       	subi	r24, 0x01	; 1
     812:	e1 f7       	brne	.-8      	; 0x80c <USB_Host_ProcessNextHostState+0x18a>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     814:	ce 01       	movw	r24, r28
     816:	01 96       	adiw	r24, 0x01	; 1
     818:	db d2       	rcall	.+1462   	; 0xdd0 <USB_Host_SendControlRequest>
     81a:	68 2f       	mov	r22, r24
     81c:	88 23       	and	r24, r24
     81e:	09 f0       	breq	.+2      	; 0x822 <USB_Host_ProcessNextHostState+0x1a0>
     820:	4a c0       	rjmp	.+148    	; 0x8b6 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     822:	88 85       	ldd	r24, Y+8	; 0x08
     824:	80 93 2b 01 	sts	0x012B, r24

			USB_Host_ResetDevice();
     828:	ca de       	rcall	.-620    	; 0x5be <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	80 93 46 01 	sts	0x0146, r24
     830:	88 ec       	ldi	r24, 0xC8	; 200
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	90 93 3c 01 	sts	0x013C, r25
     838:	80 93 3b 01 	sts	0x013B, r24
     83c:	89 e0       	ldi	r24, 0x09	; 9
     83e:	26 c0       	rjmp	.+76     	; 0x88c <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     840:	00 91 2b 01 	lds	r16, 0x012B
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	20 e0       	ldi	r18, 0x00	; 0
     84c:	10 e0       	ldi	r17, 0x00	; 0
     84e:	ee 24       	eor	r14, r14
     850:	46 d0       	rcall	.+140    	; 0x8de <Pipe_ConfigurePipe>
     852:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     856:	87 ff       	sbrs	r24, 7
     858:	30 c0       	rjmp	.+96     	; 0x8ba <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     85a:	ae e3       	ldi	r26, 0x3E	; 62
     85c:	b1 e0       	ldi	r27, 0x01	; 1
     85e:	eb e1       	ldi	r30, 0x1B	; 27
     860:	f1 e0       	ldi	r31, 0x01	; 1
     862:	88 e0       	ldi	r24, 0x08	; 8
     864:	01 90       	ld	r0, Z+
     866:	0d 92       	st	X+, r0
     868:	81 50       	subi	r24, 0x01	; 1
     86a:	e1 f7       	brne	.-8      	; 0x864 <USB_Host_ProcessNextHostState+0x1e2>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	af d2       	rcall	.+1374   	; 0xdd0 <USB_Host_SendControlRequest>
     872:	68 2f       	mov	r22, r24
     874:	88 23       	and	r24, r24
     876:	f9 f4       	brne	.+62     	; 0x8b6 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	80 93 46 01 	sts	0x0146, r24
     87e:	84 e6       	ldi	r24, 0x64	; 100
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	90 93 3c 01 	sts	0x013C, r25
     886:	80 93 3b 01 	sts	0x013B, r24
     88a:	8a e0       	ldi	r24, 0x0A	; 10
     88c:	80 93 3a 01 	sts	0x013A, r24
     890:	1a c0       	rjmp	.+52     	; 0x8c6 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			EVENT_USB_Host_DeviceEnumerationComplete();
     898:	ed dc       	rcall	.-1574   	; 0x274 <EVENT_USB_Host_DeviceEnumerationComplete>
			USB_HostState = HOST_STATE_Addressed;
     89a:	8b e0       	ldi	r24, 0x0B	; 11
     89c:	80 93 46 01 	sts	0x0146, r24
     8a0:	12 c0       	rjmp	.+36     	; 0x8c6 <USB_Host_ProcessNextHostState+0x244>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     8a2:	89 2f       	mov	r24, r25
     8a4:	ec dc       	rcall	.-1576   	; 0x27e <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     8a6:	80 91 dd 00 	lds	r24, 0x00DD
     8aa:	81 60       	ori	r24, 0x01	; 1
     8ac:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     8b0:	2f dd       	rcall	.-1442   	; 0x310 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     8b2:	ba d0       	rcall	.+372    	; 0xa28 <USB_ResetInterface>
     8b4:	08 c0       	rjmp	.+16     	; 0x8c6 <USB_Host_ProcessNextHostState+0x244>
	}
}
     8b6:	93 e0       	ldi	r25, 0x03	; 3
     8b8:	02 c0       	rjmp	.+4      	; 0x8be <USB_Host_ProcessNextHostState+0x23c>
     8ba:	94 e0       	ldi	r25, 0x04	; 4
     8bc:	60 e0       	ldi	r22, 0x00	; 0
			EVENT_USB_Host_DeviceEnumerationComplete();
			USB_HostState = HOST_STATE_Addressed;
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     8be:	80 91 46 01 	lds	r24, 0x0146
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	71 f7       	brne	.-36     	; 0x8a2 <USB_Host_ProcessNextHostState+0x220>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     8c6:	28 96       	adiw	r28, 0x08	; 8
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	f8 94       	cli
     8cc:	de bf       	out	0x3e, r29	; 62
     8ce:	0f be       	out	0x3f, r0	; 63
     8d0:	cd bf       	out	0x3d, r28	; 61
     8d2:	cf 91       	pop	r28
     8d4:	df 91       	pop	r29
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	ef 90       	pop	r14
     8dc:	08 95       	ret

000008de <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     8de:	ef 92       	push	r14
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	9e 2d       	mov	r25, r14
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     8e6:	80 93 a7 00 	sts	0x00A7, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     8ea:	80 91 a9 00 	lds	r24, 0x00A9
     8ee:	81 60       	ori	r24, 0x01	; 1
     8f0:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SelectPipe(Number);
	Pipe_EnablePipe();

	UPCFG1X = 0;
     8f4:	10 92 ab 00 	sts	0x00AB, r1

	UPCFG0X = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     8f8:	62 95       	swap	r22
     8fa:	66 0f       	add	r22, r22
     8fc:	66 0f       	add	r22, r22
     8fe:	60 7c       	andi	r22, 0xC0	; 192
     900:	64 2b       	or	r22, r20
     902:	2f 70       	andi	r18, 0x0F	; 15
     904:	62 2b       	or	r22, r18
     906:	60 93 aa 00 	sts	0x00AA, r22
     90a:	28 e0       	ldi	r18, 0x08	; 8
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	03 c0       	rjmp	.+6      	; 0x918 <Pipe_ConfigurePipe+0x3a>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     912:	8f 5f       	subi	r24, 0xFF	; 255
					CheckBytes <<= 1;
     914:	22 0f       	add	r18, r18
     916:	33 1f       	adc	r19, r19
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     918:	20 17       	cp	r18, r16
     91a:	31 07       	cpc	r19, r17
     91c:	10 f4       	brcc	.+4      	; 0x922 <Pipe_ConfigurePipe+0x44>
     91e:	85 30       	cpi	r24, 0x05	; 5
     920:	c1 f7       	brne	.-16     	; 0x912 <Pipe_ConfigurePipe+0x34>
	UPCFG1X = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     922:	92 60       	ori	r25, 0x02	; 2
     924:	82 95       	swap	r24
     926:	80 7f       	andi	r24, 0xF0	; 240
     928:	89 2b       	or	r24, r25
     92a:	80 93 ab 00 	sts	0x00AB, r24

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     92e:	80 91 a9 00 	lds	r24, 0x00A9
     932:	80 62       	ori	r24, 0x20	; 32
     934:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     938:	80 91 ac 00 	lds	r24, 0x00AC

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
}
     93c:	88 1f       	adc	r24, r24
     93e:	88 27       	eor	r24, r24
     940:	88 1f       	adc	r24, r24
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	ef 90       	pop	r14
     948:	08 95       	ret

0000094a <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     94a:	10 92 f8 00 	sts	0x00F8, r1
     94e:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     950:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     954:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     958:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     95c:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     960:	80 91 a9 00 	lds	r24, 0x00A9
     964:	8e 7f       	andi	r24, 0xFE	; 254
     966:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     96a:	9f 5f       	subi	r25, 0xFF	; 255
     96c:	97 30       	cpi	r25, 0x07	; 7
     96e:	81 f7       	brne	.-32     	; 0x950 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     970:	08 95       	ret

00000972 <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     972:	e8 2f       	mov	r30, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     974:	70 91 a7 00 	lds	r23, 0x00A7
     978:	60 e0       	ldi	r22, 0x00	; 0
		bool    PipeTokenCorrect = true;

		if (PipeToken != PIPE_TOKEN_SETUP)
		  PipeTokenCorrect = (PipeToken == ((EndpointAddress & PIPE_EPDIR_MASK) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT));

		if (PipeTokenCorrect && (Pipe_BoundEndpointNumber() == (EndpointAddress & PIPE_EPNUM_MASK)))
     97a:	48 2f       	mov	r20, r24
     97c:	50 e0       	ldi	r21, 0x00	; 0
     97e:	4f 70       	andi	r20, 0x0F	; 15
     980:	50 70       	andi	r21, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     982:	60 93 a7 00 	sts	0x00A7, r22
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     986:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     98a:	87 ff       	sbrs	r24, 7
     98c:	18 c0       	rjmp	.+48     	; 0x9be <Pipe_IsEndpointBound+0x4c>
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     98e:	80 91 aa 00 	lds	r24, 0x00AA
     992:	80 73       	andi	r24, 0x30	; 48
		  continue;

		uint8_t PipeToken        = Pipe_GetPipeToken();
		bool    PipeTokenCorrect = true;

		if (PipeToken != PIPE_TOKEN_SETUP)
     994:	59 f0       	breq	.+22     	; 0x9ac <Pipe_IsEndpointBound+0x3a>
		  PipeTokenCorrect = (PipeToken == ((EndpointAddress & PIPE_EPDIR_MASK) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT));
     996:	e7 fd       	sbrc	r30, 7
     998:	03 c0       	rjmp	.+6      	; 0x9a0 <Pipe_IsEndpointBound+0x2e>
     99a:	20 e2       	ldi	r18, 0x20	; 32
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	02 c0       	rjmp	.+4      	; 0x9a4 <Pipe_IsEndpointBound+0x32>
     9a0:	20 e1       	ldi	r18, 0x10	; 16
     9a2:	30 e0       	ldi	r19, 0x00	; 0

		if (PipeTokenCorrect && (Pipe_BoundEndpointNumber() == (EndpointAddress & PIPE_EPNUM_MASK)))
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	82 17       	cp	r24, r18
     9a8:	93 07       	cpc	r25, r19
     9aa:	49 f4       	brne	.+18     	; 0x9be <Pipe_IsEndpointBound+0x4c>
			 *  \return Endpoint number the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_BoundEndpointNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BoundEndpointNumber(void)
			{
				return ((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK);
     9ac:	80 91 aa 00 	lds	r24, 0x00AA
     9b0:	8f 70       	andi	r24, 0x0F	; 15
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	84 17       	cp	r24, r20
     9b6:	95 07       	cpc	r25, r21
     9b8:	11 f4       	brne	.+4      	; 0x9be <Pipe_IsEndpointBound+0x4c>
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9be:	6f 5f       	subi	r22, 0xFF	; 255
     9c0:	67 30       	cpi	r22, 0x07	; 7
     9c2:	f9 f6       	brne	.-66     	; 0x982 <Pipe_IsEndpointBound+0x10>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     9c4:	77 70       	andi	r23, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9c6:	70 93 a7 00 	sts	0x00A7, r23
     9ca:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     9cc:	08 95       	ret

000009ce <Pipe_WaitUntilReady>:
			/** Returns the current USB frame number, when in host mode. Every millisecond the USB bus is active (i.e. not suspended)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     9ce:	40 91 a2 00 	lds	r20, 0x00A2
     9d2:	50 91 a3 00 	lds	r21, 0x00A3
     9d6:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     9d8:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     9dc:	80 73       	andi	r24, 0x30	; 48
     9de:	80 31       	cpi	r24, 0x10	; 16
     9e0:	29 f4       	brne	.+10     	; 0x9ec <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     9e2:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     9e6:	80 ff       	sbrs	r24, 0
     9e8:	05 c0       	rjmp	.+10     	; 0x9f4 <Pipe_WaitUntilReady+0x26>
     9ea:	1c c0       	rjmp	.+56     	; 0xa24 <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     9ec:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     9f0:	82 fd       	sbrc	r24, 2
     9f2:	18 c0       	rjmp	.+48     	; 0xa24 <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     9f4:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     9f8:	81 ff       	sbrs	r24, 1
     9fa:	02 c0       	rjmp	.+4      	; 0xa00 <Pipe_WaitUntilReady+0x32>
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     a00:	80 91 46 01 	lds	r24, 0x0146
     a04:	82 30       	cpi	r24, 0x02	; 2
     a06:	79 f0       	breq	.+30     	; 0xa26 <Pipe_WaitUntilReady+0x58>
     a08:	80 91 a2 00 	lds	r24, 0x00A2
     a0c:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     a10:	84 17       	cp	r24, r20
     a12:	95 07       	cpc	r25, r21
     a14:	09 f3       	breq	.-62     	; 0x9d8 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     a16:	22 23       	and	r18, r18
     a18:	11 f4       	brne	.+4      	; 0xa1e <Pipe_WaitUntilReady+0x50>
     a1a:	83 e0       	ldi	r24, 0x03	; 3
     a1c:	08 95       	ret
     a1e:	21 50       	subi	r18, 0x01	; 1
     a20:	ac 01       	movw	r20, r24
     a22:	da cf       	rjmp	.-76     	; 0x9d8 <Pipe_WaitUntilReady+0xa>
     a24:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     a26:	08 95       	ret

00000a28 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     a28:	6e d0       	rcall	.+220    	; 0xb06 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a2a:	75 d0       	rcall	.+234    	; 0xb16 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     a2c:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
     a30:	98 2f       	mov	r25, r24
     a32:	9f 77       	andi	r25, 0x7F	; 127
     a34:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
     a38:	80 68       	ori	r24, 0x80	; 128
     a3a:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     a3e:	8c e0       	ldi	r24, 0x0C	; 12
     a40:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     a42:	89 b5       	in	r24, 0x29	; 41
     a44:	82 60       	ori	r24, 0x02	; 2
     a46:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     a48:	09 b4       	in	r0, 0x29	; 41
     a4a:	00 fe       	sbrs	r0, 0
     a4c:	fd cf       	rjmp	.-6      	; 0xa48 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     a4e:	80 91 d8 00 	lds	r24, 0x00D8
     a52:	8f 7d       	andi	r24, 0xDF	; 223
     a54:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     a58:	80 91 d7 00 	lds	r24, 0x00D7
     a5c:	8f 77       	andi	r24, 0x7F	; 127
     a5e:	80 93 d7 00 	sts	0x00D7, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState       = HOST_STATE_Unattached;
     a62:	82 e0       	ldi	r24, 0x02	; 2
     a64:	80 93 46 01 	sts	0x0146, r24
	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     a68:	80 e4       	ldi	r24, 0x40	; 64
     a6a:	80 93 2b 01 	sts	0x012B, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     a6e:	80 91 d8 00 	lds	r24, 0x00D8
     a72:	80 64       	ori	r24, 0x40	; 64
     a74:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a78:	80 91 dd 00 	lds	r24, 0x00DD
     a7c:	81 60       	ori	r24, 0x01	; 1
     a7e:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     a82:	80 91 dd 00 	lds	r24, 0x00DD
     a86:	84 60       	ori	r24, 0x04	; 4
     a88:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     a8c:	80 91 d7 00 	lds	r24, 0x00D7
     a90:	8f 7e       	andi	r24, 0xEF	; 239
     a92:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     a96:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     a98:	77 9a       	sbi	0x0e, 7	; 14

	USB_Host_VBUS_Auto_Off();
	USB_Host_VBUS_Manual_Enable();
	USB_Host_VBUS_Manual_On();

	USB_INT_Enable(USB_INT_SRPI);
     a9a:	80 91 de 00 	lds	r24, 0x00DE
     a9e:	81 60       	ori	r24, 0x01	; 1
     aa0:	80 93 de 00 	sts	0x00DE, r24
	USB_INT_Enable(USB_INT_BCERRI);
     aa4:	80 91 de 00 	lds	r24, 0x00DE
     aa8:	84 60       	ori	r24, 0x04	; 4
     aaa:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     aae:	80 91 e0 00 	lds	r24, 0x00E0
     ab2:	8e 7f       	andi	r24, 0xFE	; 254
     ab4:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     ab8:	80 91 d8 00 	lds	r24, 0x00D8
     abc:	80 61       	ori	r24, 0x10	; 16
     abe:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     ac2:	08 95       	ret

00000ac4 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     ac4:	e7 ed       	ldi	r30, 0xD7	; 215
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	80 81       	ld	r24, Z
     aca:	81 60       	ori	r24, 0x01	; 1
     acc:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	80 93 3d 01 	sts	0x013D, r24

	USB_ResetInterface();
}
     ad4:	a9 cf       	rjmp	.-174    	; 0xa28 <USB_ResetInterface>

00000ad6 <USB_ShutDown>:

void USB_ShutDown(void)
{
	USB_INT_DisableAllInterrupts();
     ad6:	17 d0       	rcall	.+46     	; 0xb06 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     ad8:	1e d0       	rcall	.+60     	; 0xb16 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     ada:	e0 ee       	ldi	r30, 0xE0	; 224
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 81       	ld	r24, Z
     ae0:	81 60       	ori	r24, 0x01	; 1
     ae2:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     ae4:	a8 ed       	ldi	r26, 0xD8	; 216
     ae6:	b0 e0       	ldi	r27, 0x00	; 0
     ae8:	8c 91       	ld	r24, X
     aea:	8f 77       	andi	r24, 0x7F	; 127
     aec:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     aee:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     af0:	e7 ed       	ldi	r30, 0xD7	; 215
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	80 81       	ld	r24, Z
     af6:	8e 7f       	andi	r24, 0xFE	; 254
     af8:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     afa:	8c 91       	ld	r24, X
     afc:	8f 7e       	andi	r24, 0xEF	; 239
     afe:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     b00:	10 92 3d 01 	sts	0x013D, r1
}
     b04:	08 95       	ret

00000b06 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     b06:	e8 ed       	ldi	r30, 0xD8	; 216
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	8c 7f       	andi	r24, 0xFC	; 252
     b0e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     b10:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     b14:	08 95       	ret

00000b16 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
     b16:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
     b1a:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
	#endif
}
     b1e:	08 95       	ret

00000b20 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     b20:	1f 92       	push	r1
     b22:	0f 92       	push	r0
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	0f 92       	push	r0
     b28:	0b b6       	in	r0, 0x3b	; 59
     b2a:	0f 92       	push	r0
     b2c:	11 24       	eor	r1, r1
     b2e:	2f 93       	push	r18
     b30:	3f 93       	push	r19
     b32:	4f 93       	push	r20
     b34:	5f 93       	push	r21
     b36:	6f 93       	push	r22
     b38:	7f 93       	push	r23
     b3a:	8f 93       	push	r24
     b3c:	9f 93       	push	r25
     b3e:	af 93       	push	r26
     b40:	bf 93       	push	r27
     b42:	ef 93       	push	r30
     b44:	ff 93       	push	r31
	}
	#endif
	#endif

	#if defined(USB_CAN_BE_HOST)
	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     b46:	80 91 9f 00 	lds	r24, 0x009F
     b4a:	81 ff       	sbrs	r24, 1
     b4c:	15 c0       	rjmp	.+42     	; 0xb78 <__vector_10+0x58>
     b4e:	80 91 a0 00 	lds	r24, 0x00A0
     b52:	81 ff       	sbrs	r24, 1
     b54:	11 c0       	rjmp	.+34     	; 0xb78 <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_DDISCI);
     b56:	80 91 9f 00 	lds	r24, 0x009F
     b5a:	8d 7f       	andi	r24, 0xFD	; 253
     b5c:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Clear(USB_INT_DCONNI);
     b60:	80 91 9f 00 	lds	r24, 0x009F
     b64:	8e 7f       	andi	r24, 0xFE	; 254
     b66:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Disable(USB_INT_DDISCI);
     b6a:	80 91 a0 00 	lds	r24, 0x00A0
     b6e:	8d 7f       	andi	r24, 0xFD	; 253
     b70:	80 93 a0 00 	sts	0x00A0, r24

		EVENT_USB_Host_DeviceUnattached();
     b74:	cd db       	rcall	.-2150   	; 0x310 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     b76:	58 df       	rcall	.-336    	; 0xa28 <USB_ResetInterface>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     b78:	80 91 df 00 	lds	r24, 0x00DF
     b7c:	81 ff       	sbrs	r24, 1
     b7e:	15 c0       	rjmp	.+42     	; 0xbaa <__vector_10+0x8a>
     b80:	80 91 de 00 	lds	r24, 0x00DE
     b84:	81 ff       	sbrs	r24, 1
     b86:	11 c0       	rjmp	.+34     	; 0xbaa <__vector_10+0x8a>
	{
		USB_INT_Clear(USB_INT_VBERRI);
     b88:	80 91 df 00 	lds	r24, 0x00DF
     b8c:	8d 7f       	andi	r24, 0xFD	; 253
     b8e:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     b92:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b94:	80 91 dd 00 	lds	r24, 0x00DD
     b98:	81 60       	ori	r24, 0x01	; 1
     b9a:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	9a db       	rcall	.-2252   	; 0x2d6 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     ba2:	b6 db       	rcall	.-2196   	; 0x310 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	80 93 46 01 	sts	0x0146, r24
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     baa:	80 91 df 00 	lds	r24, 0x00DF
     bae:	80 ff       	sbrs	r24, 0
     bb0:	17 c0       	rjmp	.+46     	; 0xbe0 <__vector_10+0xc0>
     bb2:	80 91 de 00 	lds	r24, 0x00DE
     bb6:	80 ff       	sbrs	r24, 0
     bb8:	13 c0       	rjmp	.+38     	; 0xbe0 <__vector_10+0xc0>
	{
		USB_INT_Clear(USB_INT_SRPI);
     bba:	80 91 df 00 	lds	r24, 0x00DF
     bbe:	8e 7f       	andi	r24, 0xFE	; 254
     bc0:	80 93 df 00 	sts	0x00DF, r24
		USB_INT_Disable(USB_INT_SRPI);
     bc4:	80 91 de 00 	lds	r24, 0x00DE
     bc8:	8e 7f       	andi	r24, 0xFE	; 254
     bca:	80 93 de 00 	sts	0x00DE, r24

		EVENT_USB_Host_DeviceAttached();
     bce:	a9 db       	rcall	.-2222   	; 0x322 <EVENT_USB_Host_DeviceAttached>

		USB_INT_Enable(USB_INT_DDISCI);
     bd0:	80 91 a0 00 	lds	r24, 0x00A0
     bd4:	82 60       	ori	r24, 0x02	; 2
     bd6:	80 93 a0 00 	sts	0x00A0, r24

		USB_HostState = HOST_STATE_Powered;
     bda:	83 e0       	ldi	r24, 0x03	; 3
     bdc:	80 93 46 01 	sts	0x0146, r24
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     be0:	80 91 df 00 	lds	r24, 0x00DF
     be4:	82 ff       	sbrs	r24, 2
     be6:	0e c0       	rjmp	.+28     	; 0xc04 <__vector_10+0xe4>
     be8:	80 91 de 00 	lds	r24, 0x00DE
     bec:	82 ff       	sbrs	r24, 2
     bee:	0a c0       	rjmp	.+20     	; 0xc04 <__vector_10+0xe4>
	{
		USB_INT_Clear(USB_INT_BCERRI);
     bf0:	80 91 df 00 	lds	r24, 0x00DF
     bf4:	8b 7f       	andi	r24, 0xFB	; 251
     bf6:	80 93 df 00 	sts	0x00DF, r24

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     bfa:	82 e0       	ldi	r24, 0x02	; 2
     bfc:	60 e0       	ldi	r22, 0x00	; 0
     bfe:	3f db       	rcall	.-2434   	; 0x27e <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     c00:	87 db       	rcall	.-2290   	; 0x310 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c02:	12 df       	rcall	.-476    	; 0xa28 <USB_ResetInterface>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     c04:	80 91 9f 00 	lds	r24, 0x009F
     c08:	85 ff       	sbrs	r24, 5
     c0a:	0a c0       	rjmp	.+20     	; 0xc20 <__vector_10+0x100>
     c0c:	80 91 a0 00 	lds	r24, 0x00A0
     c10:	85 ff       	sbrs	r24, 5
     c12:	06 c0       	rjmp	.+12     	; 0xc20 <__vector_10+0x100>
	{
		USB_INT_Clear(USB_INT_HSOFI);
     c14:	80 91 9f 00 	lds	r24, 0x009F
     c18:	8f 7d       	andi	r24, 0xDF	; 223
     c1a:	80 93 9f 00 	sts	0x009F, r24

		EVENT_USB_Host_StartOfFrame();
     c1e:	ae d0       	rcall	.+348    	; 0xd7c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c20:	ff 91       	pop	r31
     c22:	ef 91       	pop	r30
     c24:	bf 91       	pop	r27
     c26:	af 91       	pop	r26
     c28:	9f 91       	pop	r25
     c2a:	8f 91       	pop	r24
     c2c:	7f 91       	pop	r23
     c2e:	6f 91       	pop	r22
     c30:	5f 91       	pop	r21
     c32:	4f 91       	pop	r20
     c34:	3f 91       	pop	r19
     c36:	2f 91       	pop	r18
     c38:	0f 90       	pop	r0
     c3a:	0b be       	out	0x3b, r0	; 59
     c3c:	0f 90       	pop	r0
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	0f 90       	pop	r0
     c42:	1f 90       	pop	r1
     c44:	18 95       	reti

00000c46 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
     c46:	af 92       	push	r10
     c48:	bf 92       	push	r11
     c4a:	cf 92       	push	r12
     c4c:	df 92       	push	r13
     c4e:	ef 92       	push	r14
     c50:	ff 92       	push	r15
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	7c 01       	movw	r14, r24
     c5c:	8b 01       	movw	r16, r22
     c5e:	5a 01       	movw	r10, r20
     c60:	21 c0       	rjmp	.+66     	; 0xca4 <USB_GetNextDescriptorComp+0x5e>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     c62:	f8 01       	movw	r30, r16
     c64:	c0 81       	ld	r28, Z
     c66:	d1 81       	ldd	r29, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     c68:	88 81       	ld	r24, Y
     c6a:	90 e0       	ldi	r25, 0x00	; 0

				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
     c6c:	9e 01       	movw	r18, r28
     c6e:	28 0f       	add	r18, r24
     c70:	39 1f       	adc	r19, r25
     c72:	31 83       	std	Z+1, r19	; 0x01
     c74:	20 83       	st	Z, r18
				*BytesRem      -= CurrDescriptorSize;
     c76:	f7 01       	movw	r30, r14
     c78:	20 81       	ld	r18, Z
     c7a:	31 81       	ldd	r19, Z+1	; 0x01
     c7c:	28 1b       	sub	r18, r24
     c7e:	39 0b       	sbc	r19, r25
     c80:	31 83       	std	Z+1, r19	; 0x01
     c82:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     c84:	f8 01       	movw	r30, r16
     c86:	80 81       	ld	r24, Z
     c88:	91 81       	ldd	r25, Z+1	; 0x01
     c8a:	f5 01       	movw	r30, r10
     c8c:	09 95       	icall
     c8e:	82 30       	cpi	r24, 0x02	; 2
     c90:	49 f0       	breq	.+18     	; 0xca4 <USB_GetNextDescriptorComp+0x5e>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     c92:	81 30       	cpi	r24, 0x01	; 1
     c94:	71 f4       	brne	.+28     	; 0xcb2 <USB_GetNextDescriptorComp+0x6c>
			{
				*CurrConfigLoc = PrevDescLoc;
     c96:	f8 01       	movw	r30, r16
     c98:	c0 83       	st	Z, r28
     c9a:	d1 83       	std	Z+1, r29	; 0x01
				*BytesRem      = PrevBytesRem;
     c9c:	f7 01       	movw	r30, r14
     c9e:	d1 82       	std	Z+1, r13	; 0x01
     ca0:	c0 82       	st	Z, r12
     ca2:	07 c0       	rjmp	.+14     	; 0xcb2 <USB_GetNextDescriptorComp+0x6c>

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     ca4:	f7 01       	movw	r30, r14
     ca6:	c0 80       	ld	r12, Z
     ca8:	d1 80       	ldd	r13, Z+1	; 0x01
     caa:	c1 14       	cp	r12, r1
     cac:	d1 04       	cpc	r13, r1
     cae:	c9 f6       	brne	.-78     	; 0xc62 <USB_GetNextDescriptorComp+0x1c>
     cb0:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	1f 91       	pop	r17
     cb8:	0f 91       	pop	r16
     cba:	ff 90       	pop	r15
     cbc:	ef 90       	pop	r14
     cbe:	df 90       	pop	r13
     cc0:	cf 90       	pop	r12
     cc2:	bf 90       	pop	r11
     cc4:	af 90       	pop	r10
     cc6:	08 95       	ret

00000cc8 <USB_Host_GetDeviceConfigDescriptor>:
#include "ConfigDescriptor.h"

#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(uint8_t ConfigNumber, uint16_t* const ConfigSizePtr,
                                           void* BufferPtr, uint16_t BufferSize)
{
     cc8:	cf 92       	push	r12
     cca:	df 92       	push	r13
     ccc:	ef 92       	push	r14
     cce:	ff 92       	push	r15
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	29 97       	sbiw	r28, 0x09	; 9
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	6b 01       	movw	r12, r22
     cea:	8a 01       	movw	r16, r20
     cec:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     cee:	90 e8       	ldi	r25, 0x80	; 128
     cf0:	90 93 3e 01 	sts	0x013E, r25
     cf4:	96 e0       	ldi	r25, 0x06	; 6
     cf6:	90 93 3f 01 	sts	0x013F, r25
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	01 97       	sbiw	r24, 0x01	; 1
     cfe:	92 60       	ori	r25, 0x02	; 2
     d00:	90 93 41 01 	sts	0x0141, r25
     d04:	80 93 40 01 	sts	0x0140, r24
     d08:	10 92 43 01 	sts	0x0143, r1
     d0c:	10 92 42 01 	sts	0x0142, r1
     d10:	89 e0       	ldi	r24, 0x09	; 9
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	90 93 45 01 	sts	0x0145, r25
     d18:	80 93 44 01 	sts	0x0144, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     d1c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     d20:	ce 01       	movw	r24, r28
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	55 d0       	rcall	.+170    	; 0xdd0 <USB_Host_SendControlRequest>
     d26:	28 2f       	mov	r18, r24
     d28:	88 23       	and	r24, r24
     d2a:	c1 f4       	brne	.+48     	; 0xd5c <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize;
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	9c 81       	ldd	r25, Y+4	; 0x04
     d30:	f6 01       	movw	r30, r12
     d32:	91 83       	std	Z+1, r25	; 0x01
     d34:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     d36:	e8 16       	cp	r14, r24
     d38:	f9 06       	cpc	r15, r25
     d3a:	10 f4       	brcc	.+4      	; 0xd40 <USB_Host_GetDeviceConfigDescriptor+0x78>
     d3c:	25 e0       	ldi	r18, 0x05	; 5
     d3e:	0e c0       	rjmp	.+28     	; 0xd5c <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     d40:	90 93 45 01 	sts	0x0145, r25
     d44:	80 93 44 01 	sts	0x0144, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     d48:	c8 01       	movw	r24, r16
     d4a:	42 d0       	rcall	.+132    	; 0xdd0 <USB_Host_SendControlRequest>
     d4c:	28 2f       	mov	r18, r24
     d4e:	88 23       	and	r24, r24
     d50:	29 f4       	brne	.+10     	; 0xd5c <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     d52:	f8 01       	movw	r30, r16
     d54:	81 81       	ldd	r24, Z+1	; 0x01
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	09 f0       	breq	.+2      	; 0xd5c <USB_Host_GetDeviceConfigDescriptor+0x94>
     d5a:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     d5c:	82 2f       	mov	r24, r18
     d5e:	29 96       	adiw	r28, 0x09	; 9
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	ff 90       	pop	r15
     d74:	ef 90       	pop	r14
     d76:	df 90       	pop	r13
     d78:	cf 90       	pop	r12
     d7a:	08 95       	ret

00000d7c <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     d7c:	08 95       	ret

00000d7e <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     d7e:	1f 93       	push	r17
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	18 2f       	mov	r17, r24
     d86:	c8 ee       	ldi	r28, 0xE8	; 232
     d88:	d3 e0       	ldi	r29, 0x03	; 3
     d8a:	09 c0       	rjmp	.+18     	; 0xd9e <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	ca db       	rcall	.-2156   	; 0x524 <USB_Host_WaitMS>
     d90:	88 23       	and	r24, r24
     d92:	d1 f4       	brne	.+52     	; 0xdc8 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     d94:	20 97       	sbiw	r28, 0x00	; 0
     d96:	11 f4       	brne	.+4      	; 0xd9c <USB_Host_WaitForIOS+0x1e>
     d98:	84 e0       	ldi	r24, 0x04	; 4
     d9a:	16 c0       	rjmp	.+44     	; 0xdc8 <USB_Host_WaitForIOS+0x4a>
     d9c:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     d9e:	11 23       	and	r17, r17
     da0:	29 f4       	brne	.+10     	; 0xdac <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean true if the current pipe is ready for a SETUP packet, false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     da2:	80 91 a6 00 	lds	r24, 0x00A6
     da6:	83 ff       	sbrs	r24, 3
     da8:	f1 cf       	rjmp	.-30     	; 0xd8c <USB_Host_WaitForIOS+0xe>
     daa:	0d c0       	rjmp	.+26     	; 0xdc6 <USB_Host_WaitForIOS+0x48>
     dac:	11 30       	cpi	r17, 0x01	; 1
     dae:	29 f4       	brne	.+10     	; 0xdba <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     db0:	80 91 a6 00 	lds	r24, 0x00A6
     db4:	80 ff       	sbrs	r24, 0
     db6:	ea cf       	rjmp	.-44     	; 0xd8c <USB_Host_WaitForIOS+0xe>
     db8:	06 c0       	rjmp	.+12     	; 0xdc6 <USB_Host_WaitForIOS+0x48>
     dba:	12 30       	cpi	r17, 0x02	; 2
     dbc:	39 f7       	brne	.-50     	; 0xd8c <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     dbe:	80 91 a6 00 	lds	r24, 0x00A6
     dc2:	82 ff       	sbrs	r24, 2
     dc4:	e3 cf       	rjmp	.-58     	; 0xd8c <USB_Host_WaitForIOS+0xe>
     dc6:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	1f 91       	pop	r17
     dce:	08 95       	ret

00000dd0 <USB_Host_SendControlRequest>:

#define  __INCLUDE_FROM_HOSTSTDREQ_C
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     dd0:	ff 92       	push	r15
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	18 2f       	mov	r17, r24
     ddc:	09 2f       	mov	r16, r25
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     dde:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
	bool     BusSuspended   = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus   = HOST_SENDCONTROL_Successful;
	uint16_t DataLen        = USB_ControlRequest.wLength;
     de2:	c0 91 44 01 	lds	r28, 0x0144
     de6:	d0 91 45 01 	lds	r29, 0x0145
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     dea:	80 91 9e 00 	lds	r24, 0x009E
     dee:	81 60       	ori	r24, 0x01	; 1
     df0:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	96 db       	rcall	.-2260   	; 0x524 <USB_Host_WaitMS>
     df8:	98 2f       	mov	r25, r24
     dfa:	88 23       	and	r24, r24
     dfc:	09 f0       	breq	.+2      	; 0xe00 <USB_Host_SendControlRequest+0x30>
     dfe:	d2 c0       	rjmp	.+420    	; 0xfa4 <USB_Host_SendControlRequest+0x1d4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e00:	80 91 aa 00 	lds	r24, 0x00AA
     e04:	8f 7c       	andi	r24, 0xCF	; 207
     e06:	80 93 aa 00 	sts	0x00AA, r24
			 *  flag for the pipe.
			 */
			static inline void Pipe_ClearErrorFlags(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearErrorFlags(void)
			{
				UPERRX = 0;
     e0a:	10 92 f5 00 	sts	0x00F5, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e0e:	80 91 a9 00 	lds	r24, 0x00A9
     e12:	8f 7b       	andi	r24, 0xBF	; 191
     e14:	80 93 a9 00 	sts	0x00A9, r24
     e18:	ee e3       	ldi	r30, 0x3E	; 62
     e1a:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_Byte(*(HeaderStream++));
     e1c:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
     e1e:	80 93 af 00 	sts	0x00AF, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	e6 34       	cpi	r30, 0x46	; 70
     e26:	f8 07       	cpc	r31, r24
     e28:	c9 f7       	brne	.-14     	; 0xe1c <USB_Host_SendControlRequest+0x4c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     e2a:	80 91 a6 00 	lds	r24, 0x00A6
     e2e:	87 77       	andi	r24, 0x77	; 119
     e30:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_Byte(*(HeaderStream++));

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	a3 df       	rcall	.-186    	; 0xd7e <USB_Host_WaitForIOS>
     e38:	98 2f       	mov	r25, r24
     e3a:	88 23       	and	r24, r24
     e3c:	09 f0       	breq	.+2      	; 0xe40 <USB_Host_SendControlRequest+0x70>
     e3e:	b2 c0       	rjmp	.+356    	; 0xfa4 <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     e40:	80 91 a9 00 	lds	r24, 0x00A9
     e44:	80 64       	ori	r24, 0x40	; 64
     e46:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	6b db       	rcall	.-2346   	; 0x524 <USB_Host_WaitMS>
     e4e:	98 2f       	mov	r25, r24
     e50:	88 23       	and	r24, r24
     e52:	09 f0       	breq	.+2      	; 0xe56 <USB_Host_SendControlRequest+0x86>
     e54:	a7 c0       	rjmp	.+334    	; 0xfa4 <USB_Host_SendControlRequest+0x1d4>
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
     e56:	21 2f       	mov	r18, r17
     e58:	30 2f       	mov	r19, r16
     e5a:	c9 01       	movw	r24, r18
     e5c:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     e5e:	80 91 3e 01 	lds	r24, 0x013E
     e62:	87 ff       	sbrs	r24, 7
     e64:	52 c0       	rjmp	.+164    	; 0xf0a <USB_Host_SendControlRequest+0x13a>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e66:	80 91 aa 00 	lds	r24, 0x00AA
     e6a:	8f 7c       	andi	r24, 0xCF	; 207
     e6c:	80 61       	ori	r24, 0x10	; 16
     e6e:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     e72:	01 15       	cp	r16, r1
     e74:	11 05       	cpc	r17, r1
     e76:	69 f5       	brne	.+90     	; 0xed2 <USB_Host_SendControlRequest+0x102>
     e78:	2e c0       	rjmp	.+92     	; 0xed6 <USB_Host_SendControlRequest+0x106>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e7a:	80 91 a9 00 	lds	r24, 0x00A9
     e7e:	8f 7b       	andi	r24, 0xBF	; 191
     e80:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	7b df       	rcall	.-266    	; 0xd7e <USB_Host_WaitForIOS>
     e88:	98 2f       	mov	r25, r24
     e8a:	88 23       	and	r24, r24
     e8c:	09 f0       	breq	.+2      	; 0xe90 <USB_Host_SendControlRequest+0xc0>
     e8e:	8a c0       	rjmp	.+276    	; 0xfa4 <USB_Host_SendControlRequest+0x1d4>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     e90:	80 91 f6 00 	lds	r24, 0x00F6
     e94:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
     e98:	89 2b       	or	r24, r25
     e9a:	49 f4       	brne	.+18     	; 0xeae <USB_Host_SendControlRequest+0xde>
     e9c:	c0 e0       	ldi	r28, 0x00	; 0
     e9e:	d0 e0       	ldi	r29, 0x00	; 0
     ea0:	06 c0       	rjmp	.+12     	; 0xeae <USB_Host_SendControlRequest+0xde>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
     ea2:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_Byte();
     ea6:	f8 01       	movw	r30, r16
     ea8:	81 93       	st	Z+, r24
     eaa:	8f 01       	movw	r16, r30
					DataLen--;
     eac:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     eae:	80 91 f6 00 	lds	r24, 0x00F6
     eb2:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     eb6:	89 2b       	or	r24, r25
     eb8:	11 f0       	breq	.+4      	; 0xebe <USB_Host_SendControlRequest+0xee>
     eba:	20 97       	sbiw	r28, 0x00	; 0
     ebc:	91 f7       	brne	.-28     	; 0xea2 <USB_Host_SendControlRequest+0xd2>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ebe:	80 91 a9 00 	lds	r24, 0x00A9
     ec2:	80 64       	ori	r24, 0x40	; 64
     ec4:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     ec8:	80 91 a6 00 	lds	r24, 0x00A6
     ecc:	8e 77       	andi	r24, 0x7E	; 126
     ece:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     ed2:	20 97       	sbiw	r28, 0x00	; 0
     ed4:	91 f6       	brne	.-92     	; 0xe7a <USB_Host_SendControlRequest+0xaa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     ed6:	80 91 aa 00 	lds	r24, 0x00AA
     eda:	8f 7c       	andi	r24, 0xCF	; 207
     edc:	80 62       	ori	r24, 0x20	; 32
     ede:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ee2:	80 91 a9 00 	lds	r24, 0x00A9
     ee6:	8f 7b       	andi	r24, 0xBF	; 191
     ee8:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     eec:	82 e0       	ldi	r24, 0x02	; 2
     eee:	47 df       	rcall	.-370    	; 0xd7e <USB_Host_WaitForIOS>
     ef0:	98 2f       	mov	r25, r24
     ef2:	88 23       	and	r24, r24
     ef4:	09 f0       	breq	.+2      	; 0xef8 <USB_Host_SendControlRequest+0x128>
     ef6:	56 c0       	rjmp	.+172    	; 0xfa4 <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     ef8:	80 91 a6 00 	lds	r24, 0x00A6
     efc:	8b 77       	andi	r24, 0x7B	; 123
     efe:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f02:	82 e0       	ldi	r24, 0x02	; 2
     f04:	3c df       	rcall	.-392    	; 0xd7e <USB_Host_WaitForIOS>
     f06:	98 2f       	mov	r25, r24
     f08:	4d c0       	rjmp	.+154    	; 0xfa4 <USB_Host_SendControlRequest+0x1d4>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
     f0a:	01 15       	cp	r16, r1
     f0c:	11 05       	cpc	r17, r1
     f0e:	a9 f1       	breq	.+106    	; 0xf7a <USB_Host_SendControlRequest+0x1aa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f10:	80 91 aa 00 	lds	r24, 0x00AA
     f14:	8f 7c       	andi	r24, 0xCF	; 207
     f16:	80 62       	ori	r24, 0x20	; 32
     f18:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f1c:	80 91 a9 00 	lds	r24, 0x00A9
     f20:	8f 7b       	andi	r24, 0xBF	; 191
     f22:	80 93 a9 00 	sts	0x00A9, r24
     f26:	1d c0       	rjmp	.+58     	; 0xf62 <USB_Host_SendControlRequest+0x192>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f28:	82 e0       	ldi	r24, 0x02	; 2
     f2a:	29 df       	rcall	.-430    	; 0xd7e <USB_Host_WaitForIOS>
     f2c:	98 2f       	mov	r25, r24
     f2e:	88 23       	and	r24, r24
     f30:	c9 f5       	brne	.+114    	; 0xfa4 <USB_Host_SendControlRequest+0x1d4>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
     f32:	80 91 2b 01 	lds	r24, 0x012B
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	07 c0       	rjmp	.+14     	; 0xf4a <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_Byte(*(DataStream++));
     f3c:	f8 01       	movw	r30, r16
     f3e:	81 91       	ld	r24, Z+
     f40:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
     f42:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
     f46:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
     f48:	39 f0       	breq	.+14     	; 0xf58 <USB_Host_SendControlRequest+0x188>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f4a:	80 91 f6 00 	lds	r24, 0x00F6
     f4e:	90 91 f7 00 	lds	r25, 0x00F7
     f52:	82 17       	cp	r24, r18
     f54:	93 07       	cpc	r25, r19
     f56:	90 f3       	brcs	.-28     	; 0xf3c <USB_Host_SendControlRequest+0x16c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     f58:	80 91 a6 00 	lds	r24, 0x00A6
     f5c:	8b 77       	andi	r24, 0x7B	; 123
     f5e:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
     f62:	20 97       	sbiw	r28, 0x00	; 0
     f64:	09 f7       	brne	.-62     	; 0xf28 <USB_Host_SendControlRequest+0x158>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f66:	82 e0       	ldi	r24, 0x02	; 2
     f68:	0a df       	rcall	.-492    	; 0xd7e <USB_Host_WaitForIOS>
     f6a:	98 2f       	mov	r25, r24
     f6c:	88 23       	and	r24, r24
     f6e:	d1 f4       	brne	.+52     	; 0xfa4 <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f70:	80 91 a9 00 	lds	r24, 0x00A9
     f74:	80 64       	ori	r24, 0x40	; 64
     f76:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f7a:	80 91 aa 00 	lds	r24, 0x00AA
     f7e:	8f 7c       	andi	r24, 0xCF	; 207
     f80:	80 61       	ori	r24, 0x10	; 16
     f82:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f86:	80 91 a9 00 	lds	r24, 0x00A9
     f8a:	8f 7b       	andi	r24, 0xBF	; 191
     f8c:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	f5 de       	rcall	.-534    	; 0xd7e <USB_Host_WaitForIOS>
     f94:	98 2f       	mov	r25, r24
     f96:	88 23       	and	r24, r24
     f98:	29 f4       	brne	.+10     	; 0xfa4 <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     f9a:	80 91 a6 00 	lds	r24, 0x00A6
     f9e:	8e 77       	andi	r24, 0x7E	; 126
     fa0:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fa4:	80 91 a9 00 	lds	r24, 0x00A9
     fa8:	80 64       	ori	r24, 0x40	; 64
     faa:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
     fae:	f0 fc       	sbrc	r15, 0
     fb0:	05 c0       	rjmp	.+10     	; 0xfbc <USB_Host_SendControlRequest+0x1ec>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     fb2:	80 91 9e 00 	lds	r24, 0x009E
     fb6:	8e 7f       	andi	r24, 0xFE	; 254
     fb8:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
     fc2:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
     fc6:	89 2f       	mov	r24, r25
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	ff 90       	pop	r15
     fd2:	08 95       	ret

00000fd4 <Pipe_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
     fd4:	df 92       	push	r13
     fd6:	ef 92       	push	r14
     fd8:	ff 92       	push	r15
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	18 2f       	mov	r17, r24
     fe4:	09 2f       	mov	r16, r25
     fe6:	eb 01       	movw	r28, r22
     fe8:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fea:	80 91 aa 00 	lds	r24, 0x00AA
     fee:	8f 7c       	andi	r24, 0xCF	; 207
     ff0:	80 61       	ori	r24, 0x10	; 16
     ff2:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     ff6:	eb dc       	rcall	.-1578   	; 0x9ce <Pipe_WaitUntilReady>
     ff8:	d8 2e       	mov	r13, r24
     ffa:	88 23       	and	r24, r24
     ffc:	19 f5       	brne	.+70     	; 0x1044 <Pipe_Read_Stream_LE+0x70>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     ffe:	81 2f       	mov	r24, r17
    1000:	90 2f       	mov	r25, r16
    1002:	9c 01       	movw	r18, r24
    1004:	89 01       	movw	r16, r18
    1006:	1c c0       	rjmp	.+56     	; 0x1040 <Pipe_Read_Stream_LE+0x6c>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1008:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    100c:	85 fd       	sbrc	r24, 5
    100e:	12 c0       	rjmp	.+36     	; 0x1034 <Pipe_Read_Stream_LE+0x60>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1010:	80 91 a6 00 	lds	r24, 0x00A6
    1014:	8e 77       	andi	r24, 0x7E	; 126
    1016:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    101a:	e1 14       	cp	r14, r1
    101c:	f1 04       	cpc	r15, r1
    101e:	31 f0       	breq	.+12     	; 0x102c <Pipe_Read_Stream_LE+0x58>
    1020:	f7 01       	movw	r30, r14
    1022:	09 95       	icall
    1024:	81 30       	cpi	r24, 0x01	; 1
    1026:	11 f4       	brne	.+4      	; 0x102c <Pipe_Read_Stream_LE+0x58>
    1028:	84 e0       	ldi	r24, 0x04	; 4
    102a:	0d c0       	rjmp	.+26     	; 0x1046 <Pipe_Read_Stream_LE+0x72>
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    102c:	d0 dc       	rcall	.-1632   	; 0x9ce <Pipe_WaitUntilReady>
    102e:	88 23       	and	r24, r24
    1030:	39 f0       	breq	.+14     	; 0x1040 <Pipe_Read_Stream_LE+0x6c>
    1032:	09 c0       	rjmp	.+18     	; 0x1046 <Pipe_Read_Stream_LE+0x72>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    1034:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1038:	f8 01       	movw	r30, r16
    103a:	81 93       	st	Z+, r24
    103c:	8f 01       	movw	r16, r30
			Length--;
    103e:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    1040:	20 97       	sbiw	r28, 0x00	; 0
    1042:	11 f7       	brne	.-60     	; 0x1008 <Pipe_Read_Stream_LE+0x34>
    1044:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	1f 91       	pop	r17
    104c:	0f 91       	pop	r16
    104e:	ff 90       	pop	r15
    1050:	ef 90       	pop	r14
    1052:	df 90       	pop	r13
    1054:	08 95       	ret

00001056 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1056:	ff 92       	push	r15
    1058:	0f 93       	push	r16
    105a:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    105c:	07 ea       	ldi	r16, 0xA7	; 167
    105e:	10 e0       	ldi	r17, 0x00	; 0
    1060:	f8 01       	movw	r30, r16
    1062:	f0 80       	ld	r15, Z
    1064:	f7 e0       	ldi	r31, 0x07	; 7
    1066:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1068:	f8 01       	movw	r30, r16
    106a:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    106c:	0a db       	rcall	.-2540   	; 0x682 <USB_Host_ProcessNextHostState>
    106e:	f8 01       	movw	r30, r16
    1070:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	08 95       	ret

0000107a <USB_GetHIDReportSize>:

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
    107a:	e4 2f       	mov	r30, r20
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	ee 0f       	add	r30, r30
    1080:	ff 1f       	adc	r31, r31
    1082:	ef 56       	subi	r30, 0x6F	; 111
    1084:	fc 4f       	sbci	r31, 0xFC	; 252
    1086:	e8 0f       	add	r30, r24
    1088:	f9 1f       	adc	r31, r25
    108a:	dc 01       	movw	r26, r24
    108c:	a0 57       	subi	r26, 0x70	; 112
    108e:	bc 4f       	sbci	r27, 0xFC	; 252
    1090:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
    1092:	20 81       	ld	r18, Z
    1094:	31 81       	ldd	r19, Z+1	; 0x01

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
    1096:	8c 91       	ld	r24, X
    1098:	86 17       	cp	r24, r22
    109a:	89 f4       	brne	.+34     	; 0x10be <USB_GetHIDReportSize+0x44>
		  return ((ReportSizeBits >> 3) + ((ReportSizeBits & 0x07) ? 1 : 0));
    109c:	40 e0       	ldi	r20, 0x00	; 0
    109e:	50 e0       	ldi	r21, 0x00	; 0
    10a0:	c9 01       	movw	r24, r18
    10a2:	87 70       	andi	r24, 0x07	; 7
    10a4:	90 70       	andi	r25, 0x00	; 0
    10a6:	89 2b       	or	r24, r25
    10a8:	11 f0       	breq	.+4      	; 0x10ae <USB_GetHIDReportSize+0x34>
    10aa:	41 e0       	ldi	r20, 0x01	; 1
    10ac:	50 e0       	ldi	r21, 0x00	; 0
    10ae:	63 e0       	ldi	r22, 0x03	; 3
    10b0:	36 95       	lsr	r19
    10b2:	27 95       	ror	r18
    10b4:	6a 95       	dec	r22
    10b6:	e1 f7       	brne	.-8      	; 0x10b0 <USB_GetHIDReportSize+0x36>
    10b8:	24 0f       	add	r18, r20
    10ba:	35 1f       	adc	r19, r21
    10bc:	07 c0       	rjmp	.+14     	; 0x10cc <USB_GetHIDReportSize+0x52>

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
    10be:	9f 5f       	subi	r25, 0xFF	; 255
    10c0:	37 96       	adiw	r30, 0x07	; 7
    10c2:	17 96       	adiw	r26, 0x07	; 7
    10c4:	9a 30       	cpi	r25, 0x0A	; 10
    10c6:	29 f7       	brne	.-54     	; 0x1092 <USB_GetHIDReportSize+0x18>
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return ((ReportSizeBits >> 3) + ((ReportSizeBits & 0x07) ? 1 : 0));
	}

	return 0;
}
    10cc:	c9 01       	movw	r24, r18
    10ce:	08 95       	ret

000010d0 <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    10d0:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    10d2:	81 81       	ldd	r24, Z+1	; 0x01
    10d4:	84 30       	cpi	r24, 0x04	; 4
    10d6:	29 f4       	brne	.+10     	; 0x10e2 <DCOMP_HID_Host_NextHIDInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    10d8:	85 81       	ldd	r24, Z+5	; 0x05
    10da:	83 30       	cpi	r24, 0x03	; 3
    10dc:	11 f4       	brne	.+4      	; 0x10e2 <DCOMP_HID_Host_NextHIDInterface+0x12>
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	08 95       	ret
    10e2:	82 e0       	ldi	r24, 0x02	; 2
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    10e4:	08 95       	ret

000010e6 <DCOMP_HID_Host_NextHID>:

static uint8_t DCOMP_HID_Host_NextHID(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    10e6:	fc 01       	movw	r30, r24
    10e8:	81 81       	ldd	r24, Z+1	; 0x01
    10ea:	81 32       	cpi	r24, 0x21	; 33
    10ec:	11 f4       	brne	.+4      	; 0x10f2 <DCOMP_HID_Host_NextHID+0xc>
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	08 95       	ret
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    10f2:	84 30       	cpi	r24, 0x04	; 4
    10f4:	11 f0       	breq	.+4      	; 0x10fa <DCOMP_HID_Host_NextHID+0x14>
    10f6:	82 e0       	ldi	r24, 0x02	; 2
    10f8:	08 95       	ret
    10fa:	81 e0       	ldi	r24, 0x01	; 1
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
    10fc:	08 95       	ret

000010fe <HID_Host_IsReportReceived>:
		return USB_Host_SendControlRequest(Buffer);
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    10fe:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1100:	80 91 46 01 	lds	r24, 0x0146
    1104:	8c 30       	cpi	r24, 0x0C	; 12
    1106:	a1 f4       	brne	.+40     	; 0x1130 <HID_Host_IsReportReceived+0x32>
    1108:	87 81       	ldd	r24, Z+7	; 0x07
    110a:	88 23       	and	r24, r24
    110c:	89 f0       	breq	.+34     	; 0x1130 <HID_Host_IsReportReceived+0x32>
	  return false;

	bool ReportReceived;

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipeNumber);
    110e:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1110:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1114:	80 91 a9 00 	lds	r24, 0x00A9
    1118:	8f 7b       	andi	r24, 0xBF	; 191
    111a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    111e:	90 91 a6 00 	lds	r25, 0x00A6
    1122:	91 70       	andi	r25, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1124:	80 91 a9 00 	lds	r24, 0x00A9
    1128:	80 64       	ori	r24, 0x40	; 64
    112a:	80 93 a9 00 	sts	0x00A9, r24
    112e:	01 c0       	rjmp	.+2      	; 0x1132 <HID_Host_IsReportReceived+0x34>

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    1130:	90 e0       	ldi	r25, 0x00	; 0
}
    1132:	89 2f       	mov	r24, r25
    1134:	08 95       	ret

00001136 <HID_Host_SetBootProtocol>:

uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	ec 01       	movw	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    113c:	98 85       	ldd	r25, Y+8	; 0x08
    113e:	81 e2       	ldi	r24, 0x21	; 33
    1140:	80 93 3e 01 	sts	0x013E, r24
    1144:	8b e0       	ldi	r24, 0x0B	; 11
    1146:	80 93 3f 01 	sts	0x013F, r24
    114a:	10 92 41 01 	sts	0x0141, r1
    114e:	10 92 40 01 	sts	0x0140, r1
    1152:	90 93 42 01 	sts	0x0142, r25
    1156:	10 92 43 01 	sts	0x0143, r1
    115a:	10 92 45 01 	sts	0x0145, r1
    115e:	10 92 44 01 	sts	0x0144, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1162:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
    1166:	8d 85       	ldd	r24, Y+13	; 0x0d
    1168:	88 23       	and	r24, r24
    116a:	11 f4       	brne	.+4      	; 0x1170 <HID_Host_SetBootProtocol+0x3a>
    116c:	90 e8       	ldi	r25, 0x80	; 128
    116e:	0a c0       	rjmp	.+20     	; 0x1184 <HID_Host_SetBootProtocol+0x4e>
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	2d de       	rcall	.-934    	; 0xdd0 <USB_Host_SendControlRequest>
    1176:	98 2f       	mov	r25, r24
    1178:	88 23       	and	r24, r24
    117a:	21 f4       	brne	.+8      	; 0x1184 <HID_Host_SetBootProtocol+0x4e>
	  return ErrorCode;

	HIDInterfaceInfo->State.LargestReportSize = 8;
    117c:	88 e0       	ldi	r24, 0x08	; 8
    117e:	8a 8b       	std	Y+18, r24	; 0x12
	HIDInterfaceInfo->State.UsingBootProtocol = true;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	8f 87       	std	Y+15, r24	; 0x0f

	return HOST_SENDCONTROL_Successful;
}
    1184:	89 2f       	mov	r24, r25
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	08 95       	ret

0000118c <HID_Host_ReceiveReport>:
}
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	dc 01       	movw	r26, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1192:	80 91 46 01 	lds	r24, 0x0146
    1196:	8c 30       	cpi	r24, 0x0C	; 12
    1198:	09 f0       	breq	.+2      	; 0x119c <HID_Host_ReceiveReport+0x10>
    119a:	3f c0       	rjmp	.+126    	; 0x121a <HID_Host_ReceiveReport+0x8e>
    119c:	17 96       	adiw	r26, 0x07	; 7
    119e:	8c 91       	ld	r24, X
    11a0:	17 97       	sbiw	r26, 0x07	; 7
    11a2:	88 23       	and	r24, r24
    11a4:	d1 f1       	breq	.+116    	; 0x121a <HID_Host_ReceiveReport+0x8e>
	  return PIPE_READYWAIT_DeviceDisconnected;

	uint8_t ErrorCode;

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipeNumber);
    11a6:	8c 91       	ld	r24, X
    11a8:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11ac:	80 91 a9 00 	lds	r24, 0x00A9
    11b0:	8f 7b       	andi	r24, 0xBF	; 191
    11b2:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    11b6:	eb 01       	movw	r28, r22

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    11b8:	1f 96       	adiw	r26, 0x0f	; 15
    11ba:	8c 91       	ld	r24, X
    11bc:	1f 97       	sbiw	r26, 0x0f	; 15
    11be:	88 23       	and	r24, r24
    11c0:	b1 f4       	brne	.+44     	; 0x11ee <HID_Host_ReceiveReport+0x62>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    11c2:	15 96       	adiw	r26, 0x05	; 5
    11c4:	ed 91       	ld	r30, X+
    11c6:	fc 91       	ld	r31, X
    11c8:	16 97       	sbiw	r26, 0x06	; 6
    11ca:	e8 52       	subi	r30, 0x28	; 40
    11cc:	fc 4f       	sbci	r31, 0xFC	; 252
    11ce:	80 81       	ld	r24, Z
    11d0:	88 23       	and	r24, r24
    11d2:	11 f4       	brne	.+4      	; 0x11d8 <HID_Host_ReceiveReport+0x4c>
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	03 c0       	rjmp	.+6      	; 0x11de <HID_Host_ReceiveReport+0x52>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    11d8:	60 91 af 00 	lds	r22, 0x00AF
		{
			ReportID = Pipe_Read_Byte();
			*(BufferPos++) = ReportID;
    11dc:	69 93       	st	Y+, r22
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    11de:	15 96       	adiw	r26, 0x05	; 5
    11e0:	8d 91       	ld	r24, X+
    11e2:	9c 91       	ld	r25, X
    11e4:	16 97       	sbiw	r26, 0x06	; 6
    11e6:	40 e0       	ldi	r20, 0x00	; 0
    11e8:	48 df       	rcall	.-368    	; 0x107a <USB_GetHIDReportSize>
    11ea:	bc 01       	movw	r22, r24
    11ec:	04 c0       	rjmp	.+8      	; 0x11f6 <HID_Host_ReceiveReport+0x6a>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11ee:	60 91 f6 00 	lds	r22, 0x00F6
    11f2:	70 91 f7 00 	lds	r23, 0x00F7
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NO_STREAM_CALLBACK)) != PIPE_RWSTREAM_NoError)
    11f6:	ce 01       	movw	r24, r28
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	eb de       	rcall	.-554    	; 0xfd4 <Pipe_Read_Stream_LE>
    11fe:	98 2f       	mov	r25, r24
    1200:	88 23       	and	r24, r24
    1202:	61 f4       	brne	.+24     	; 0x121c <HID_Host_ReceiveReport+0x90>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1204:	80 91 a6 00 	lds	r24, 0x00A6
    1208:	8e 77       	andi	r24, 0x7E	; 126
    120a:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    120e:	80 91 a9 00 	lds	r24, 0x00A9
    1212:	80 64       	ori	r24, 0x40	; 64
    1214:	80 93 a9 00 	sts	0x00A9, r24
    1218:	01 c0       	rjmp	.+2      	; 0x121c <HID_Host_ReceiveReport+0x90>
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    121a:	92 e0       	ldi	r25, 0x02	; 2
}
    121c:	89 2f       	mov	r24, r25
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <HID_Host_ConfigurePipes>:
#include "HID.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    1224:	3f 92       	push	r3
    1226:	4f 92       	push	r4
    1228:	5f 92       	push	r5
    122a:	6f 92       	push	r6
    122c:	7f 92       	push	r7
    122e:	8f 92       	push	r8
    1230:	9f 92       	push	r9
    1232:	af 92       	push	r10
    1234:	bf 92       	push	r11
    1236:	cf 92       	push	r12
    1238:	df 92       	push	r13
    123a:	ef 92       	push	r14
    123c:	ff 92       	push	r15
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	00 d0       	rcall	.+0      	; 0x1248 <HID_Host_ConfigurePipes+0x24>
    1248:	00 d0       	rcall	.+0      	; 0x124a <HID_Host_ConfigurePipes+0x26>
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	6c 01       	movw	r12, r24
    1250:	7a 83       	std	Y+2, r23	; 0x02
    1252:	69 83       	std	Y+1, r22	; 0x01
    1254:	5c 83       	std	Y+4, r21	; 0x04
    1256:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1258:	07 96       	adiw	r24, 0x07	; 7
    125a:	fc 01       	movw	r30, r24
    125c:	8c e0       	ldi	r24, 0x0C	; 12
    125e:	df 01       	movw	r26, r30
    1260:	1d 92       	st	X+, r1
    1262:	8a 95       	dec	r24
    1264:	e9 f7       	brne	.-6      	; 0x1260 <HID_Host_ConfigurePipes+0x3c>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1266:	eb 81       	ldd	r30, Y+3	; 0x03
    1268:	fc 81       	ldd	r31, Y+4	; 0x04
    126a:	81 81       	ldd	r24, Z+1	; 0x01
    126c:	82 30       	cpi	r24, 0x02	; 2
    126e:	11 f0       	breq	.+4      	; 0x1274 <HID_Host_ConfigurePipes+0x50>
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	b8 c0       	rjmp	.+368    	; 0x13e4 <HID_Host_ConfigurePipes+0x1c0>
    1274:	88 24       	eor	r8, r8
    1276:	99 24       	eor	r9, r9
    1278:	aa 24       	eor	r10, r10
    127a:	bb 24       	eor	r11, r11
    127c:	66 24       	eor	r6, r6
    127e:	77 24       	eor	r7, r7
    1280:	44 24       	eor	r4, r4
    1282:	55 24       	eor	r5, r5
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1284:	93 e0       	ldi	r25, 0x03	; 3
    1286:	e9 2e       	mov	r14, r25
    1288:	f1 2c       	mov	r15, r1
    128a:	ec 0e       	add	r14, r28
    128c:	fd 1e       	adc	r15, r29
    128e:	8e 01       	movw	r16, r28
    1290:	0f 5f       	subi	r16, 0xFF	; 255
    1292:	1f 4f       	sbci	r17, 0xFF	; 255
    1294:	61 14       	cp	r6, r1
    1296:	71 04       	cpc	r7, r1
    1298:	39 f0       	breq	.+14     	; 0x12a8 <HID_Host_ConfigurePipes+0x84>
    129a:	c8 01       	movw	r24, r16
    129c:	b7 01       	movw	r22, r14
    129e:	48 e0       	ldi	r20, 0x08	; 8
    12a0:	5a e0       	ldi	r21, 0x0A	; 10
    12a2:	d1 dc       	rcall	.-1630   	; 0xc46 <USB_GetNextDescriptorComp>
    12a4:	88 23       	and	r24, r24
    12a6:	21 f1       	breq	.+72     	; 0x12f0 <HID_Host_ConfigurePipes+0xcc>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint || DataOUTEndpoint)
    12a8:	81 14       	cp	r8, r1
    12aa:	91 04       	cpc	r9, r1
    12ac:	79 f5       	brne	.+94     	; 0x130c <HID_Host_ConfigurePipes+0xe8>
    12ae:	a1 14       	cp	r10, r1
    12b0:	b1 04       	cpc	r11, r1
    12b2:	61 f5       	brne	.+88     	; 0x130c <HID_Host_ConfigurePipes+0xe8>
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    12b4:	c8 01       	movw	r24, r16
    12b6:	b7 01       	movw	r22, r14
    12b8:	48 e6       	ldi	r20, 0x68	; 104
    12ba:	58 e0       	ldi	r21, 0x08	; 8
    12bc:	c4 dc       	rcall	.-1656   	; 0xc46 <USB_GetNextDescriptorComp>
    12be:	88 23       	and	r24, r24
    12c0:	09 f0       	breq	.+2      	; 0x12c4 <HID_Host_ConfigurePipes+0xa0>
    12c2:	8f c0       	rjmp	.+286    	; 0x13e2 <HID_Host_ConfigurePipes+0x1be>
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    12c4:	6b 80       	ldd	r6, Y+3	; 0x03
    12c6:	7c 80       	ldd	r7, Y+4	; 0x04
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    12c8:	f6 01       	movw	r30, r12
    12ca:	94 81       	ldd	r25, Z+4	; 0x04
    12cc:	99 23       	and	r25, r25
    12ce:	29 f0       	breq	.+10     	; 0x12da <HID_Host_ConfigurePipes+0xb6>
    12d0:	d3 01       	movw	r26, r6
    12d2:	17 96       	adiw	r26, 0x07	; 7
    12d4:	8c 91       	ld	r24, X
    12d6:	89 17       	cp	r24, r25
    12d8:	69 f7       	brne	.-38     	; 0x12b4 <HID_Host_ConfigurePipes+0x90>

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    12da:	c8 01       	movw	r24, r16
    12dc:	b7 01       	movw	r22, r14
    12de:	43 e7       	ldi	r20, 0x73	; 115
    12e0:	58 e0       	ldi	r21, 0x08	; 8
    12e2:	b1 dc       	rcall	.-1694   	; 0xc46 <USB_GetNextDescriptorComp>
    12e4:	88 23       	and	r24, r24
    12e6:	09 f0       	breq	.+2      	; 0x12ea <HID_Host_ConfigurePipes+0xc6>
    12e8:	7c c0       	rjmp	.+248    	; 0x13e2 <HID_Host_ConfigurePipes+0x1be>
			                              DCOMP_HID_Host_NextHID) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    12ea:	4b 80       	ldd	r4, Y+3	; 0x03
    12ec:	5c 80       	ldd	r5, Y+4	; 0x04
    12ee:	d2 cf       	rjmp	.-92     	; 0x1294 <HID_Host_ConfigurePipes+0x70>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    12f0:	eb 81       	ldd	r30, Y+3	; 0x03
    12f2:	fc 81       	ldd	r31, Y+4	; 0x04

		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
    12f4:	82 81       	ldd	r24, Z+2	; 0x02
    12f6:	87 fd       	sbrc	r24, 7
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <HID_Host_ConfigurePipes+0xda>
    12fa:	5f 01       	movw	r10, r30
    12fc:	01 c0       	rjmp	.+2      	; 0x1300 <HID_Host_ConfigurePipes+0xdc>
    12fe:	4f 01       	movw	r8, r30
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1300:	81 14       	cp	r8, r1
    1302:	91 04       	cpc	r9, r1
    1304:	39 f2       	breq	.-114    	; 0x1294 <HID_Host_ConfigurePipes+0x70>
    1306:	a1 14       	cp	r10, r1
    1308:	b1 04       	cpc	r11, r1
    130a:	21 f2       	breq	.-120    	; 0x1294 <HID_Host_ConfigurePipes+0x70>
    130c:	ff 24       	eor	r15, r15
    130e:	f3 94       	inc	r15
			                   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize,
			                   HIDInterfaceInfo->Config.DataOUTPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);
			Pipe_SetInterruptPeriod(DataOUTEndpoint->PollingIntervalMS);

			HIDInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
    1310:	33 24       	eor	r3, r3
    1312:	33 94       	inc	r3
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
	{
		if (PipeNum == HIDInterfaceInfo->Config.DataINPipeNumber)
    1314:	f6 01       	movw	r30, r12
    1316:	80 81       	ld	r24, Z
    1318:	f8 16       	cp	r15, r24
    131a:	f9 f4       	brne	.+62     	; 0x135a <HID_Host_ConfigurePipes+0x136>
		{
			Pipe_ConfigurePipe(PipeNum, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
    131c:	d4 01       	movw	r26, r8
    131e:	12 96       	adiw	r26, 0x02	; 2
    1320:	2c 91       	ld	r18, X
    1322:	12 97       	sbiw	r26, 0x02	; 2
    1324:	14 96       	adiw	r26, 0x04	; 4
    1326:	0d 91       	ld	r16, X+
    1328:	1c 91       	ld	r17, X
    132a:	15 97       	sbiw	r26, 0x05	; 5
    132c:	81 81       	ldd	r24, Z+1	; 0x01
    132e:	88 23       	and	r24, r24
    1330:	11 f4       	brne	.+4      	; 0x1336 <HID_Host_ConfigurePipes+0x112>
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	01 c0       	rjmp	.+2      	; 0x1338 <HID_Host_ConfigurePipes+0x114>
    1336:	94 e0       	ldi	r25, 0x04	; 4
    1338:	8f 2d       	mov	r24, r15
    133a:	63 e0       	ldi	r22, 0x03	; 3
    133c:	40 e1       	ldi	r20, 0x10	; 16
    133e:	e9 2e       	mov	r14, r25
    1340:	ce da       	rcall	.-2660   	; 0x8de <Pipe_ConfigurePipe>
			                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize,
			                   HIDInterfaceInfo->Config.DataINPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);
			Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
    1342:	f4 01       	movw	r30, r8
    1344:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
    1346:	80 93 ad 00 	sts	0x00AD, r24

			HIDInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    134a:	84 81       	ldd	r24, Z+4	; 0x04
    134c:	95 81       	ldd	r25, Z+5	; 0x05
    134e:	d6 01       	movw	r26, r12
    1350:	1a 96       	adiw	r26, 0x0a	; 10
    1352:	9c 93       	st	X, r25
    1354:	8e 93       	st	-X, r24
    1356:	19 97       	sbiw	r26, 0x09	; 9
    1358:	24 c0       	rjmp	.+72     	; 0x13a2 <HID_Host_ConfigurePipes+0x17e>
		}
		else if (PipeNum == HIDInterfaceInfo->Config.DataOUTPipeNumber)
    135a:	f6 01       	movw	r30, r12
    135c:	82 81       	ldd	r24, Z+2	; 0x02
    135e:	f8 16       	cp	r15, r24
    1360:	01 f5       	brne	.+64     	; 0x13a2 <HID_Host_ConfigurePipes+0x17e>
		{
			Pipe_ConfigurePipe(PipeNum, EP_TYPE_INTERRUPT, PIPE_TOKEN_OUT,
    1362:	d5 01       	movw	r26, r10
    1364:	12 96       	adiw	r26, 0x02	; 2
    1366:	2c 91       	ld	r18, X
    1368:	12 97       	sbiw	r26, 0x02	; 2
    136a:	14 96       	adiw	r26, 0x04	; 4
    136c:	0d 91       	ld	r16, X+
    136e:	1c 91       	ld	r17, X
    1370:	15 97       	sbiw	r26, 0x05	; 5
    1372:	83 81       	ldd	r24, Z+3	; 0x03
    1374:	88 23       	and	r24, r24
    1376:	11 f4       	brne	.+4      	; 0x137c <HID_Host_ConfigurePipes+0x158>
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	01 c0       	rjmp	.+2      	; 0x137e <HID_Host_ConfigurePipes+0x15a>
    137c:	94 e0       	ldi	r25, 0x04	; 4
    137e:	8f 2d       	mov	r24, r15
    1380:	63 e0       	ldi	r22, 0x03	; 3
    1382:	40 e2       	ldi	r20, 0x20	; 32
    1384:	e9 2e       	mov	r14, r25
    1386:	ab da       	rcall	.-2730   	; 0x8de <Pipe_ConfigurePipe>
			                   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize,
			                   HIDInterfaceInfo->Config.DataOUTPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);
			Pipe_SetInterruptPeriod(DataOUTEndpoint->PollingIntervalMS);
    1388:	f5 01       	movw	r30, r10
    138a:	86 81       	ldd	r24, Z+6	; 0x06
    138c:	80 93 ad 00 	sts	0x00AD, r24

			HIDInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    1390:	84 81       	ldd	r24, Z+4	; 0x04
    1392:	95 81       	ldd	r25, Z+5	; 0x05
    1394:	d6 01       	movw	r26, r12
    1396:	1c 96       	adiw	r26, 0x0c	; 12
    1398:	9c 93       	st	X, r25
    139a:	8e 93       	st	-X, r24
    139c:	1b 97       	sbiw	r26, 0x0b	; 11
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
    139e:	1e 96       	adiw	r26, 0x0e	; 14
    13a0:	3c 92       	st	X, r3
		  DataINEndpoint = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    13a2:	f3 94       	inc	r15
    13a4:	b7 e0       	ldi	r27, 0x07	; 7
    13a6:	fb 16       	cp	r15, r27
    13a8:	09 f0       	breq	.+2      	; 0x13ac <HID_Host_ConfigurePipes+0x188>
    13aa:	b4 cf       	rjmp	.-152    	; 0x1314 <HID_Host_ConfigurePipes+0xf0>
			HIDInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
		}
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    13ac:	f3 01       	movw	r30, r6
    13ae:	82 81       	ldd	r24, Z+2	; 0x02
    13b0:	d6 01       	movw	r26, r12
    13b2:	18 96       	adiw	r26, 0x08	; 8
    13b4:	8c 93       	st	X, r24
    13b6:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.HIDReportSize        = HIDDescriptor->HIDReportLength;
    13b8:	f2 01       	movw	r30, r4
    13ba:	87 81       	ldd	r24, Z+7	; 0x07
    13bc:	90 85       	ldd	r25, Z+8	; 0x08
    13be:	51 96       	adiw	r26, 0x11	; 17
    13c0:	9c 93       	st	X, r25
    13c2:	8e 93       	st	-X, r24
    13c4:	50 97       	sbiw	r26, 0x10	; 16
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	d3 01       	movw	r26, r6
    13ca:	16 96       	adiw	r26, 0x06	; 6
    13cc:	8c 91       	ld	r24, X
    13ce:	81 11       	cpse	r24, r1
    13d0:	91 e0       	ldi	r25, 0x01	; 1
    13d2:	f6 01       	movw	r30, r12
    13d4:	95 87       	std	Z+13, r25	; 0x0d
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    13d6:	88 e0       	ldi	r24, 0x08	; 8
    13d8:	82 8b       	std	Z+18, r24	; 0x12
	HIDInterfaceInfo->State.IsActive = true;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	87 83       	std	Z+7, r24	; 0x07
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	01 c0       	rjmp	.+2      	; 0x13e4 <HID_Host_ConfigurePipes+0x1c0>

	return HID_ENUMERROR_NoError;
    13e2:	82 e0       	ldi	r24, 0x02	; 2
}
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	1f 91       	pop	r17
    13f2:	0f 91       	pop	r16
    13f4:	ff 90       	pop	r15
    13f6:	ef 90       	pop	r14
    13f8:	df 90       	pop	r13
    13fa:	cf 90       	pop	r12
    13fc:	bf 90       	pop	r11
    13fe:	af 90       	pop	r10
    1400:	9f 90       	pop	r9
    1402:	8f 90       	pop	r8
    1404:	7f 90       	pop	r7
    1406:	6f 90       	pop	r6
    1408:	5f 90       	pop	r5
    140a:	4f 90       	pop	r4
    140c:	3f 90       	pop	r3
    140e:	08 95       	ret

00001410 <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    1410:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1412:	81 81       	ldd	r24, Z+1	; 0x01
    1414:	85 30       	cpi	r24, 0x05	; 5
    1416:	29 f4       	brne	.+10     	; 0x1422 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1418:	82 81       	ldd	r24, Z+2	; 0x02
    141a:	ab da       	rcall	.-2730   	; 0x972 <Pipe_IsEndpointBound>
    141c:	88 23       	and	r24, r24
    141e:	29 f4       	brne	.+10     	; 0x142a <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1a>
    1420:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1422:	84 30       	cpi	r24, 0x04	; 4
    1424:	11 f4       	brne	.+4      	; 0x142a <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1a>
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	08 95       	ret
    142a:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    142c:	08 95       	ret

0000142e <SerialStream_TxByte>:

FILE USARTStream = FDEV_SETUP_STREAM(SerialStream_TxByte, SerialStream_RxByte, _FDEV_SETUP_RW);

static int SerialStream_TxByte(char DataByte,
                               FILE *Stream)
{
    142e:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1430:	80 91 c8 00 	lds	r24, 0x00C8
    1434:	85 ff       	sbrs	r24, 5
    1436:	fc cf       	rjmp	.-8      	; 0x1430 <SerialStream_TxByte+0x2>
				UDR1 = DataByte;
    1438:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_TxByte(DataByte);
	return 0;
}
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	08 95       	ret

00001442 <SerialStream_RxByte>:
			 *  \return Boolean true if a character has been received, false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1442:	80 91 c8 00 	lds	r24, 0x00C8

static int SerialStream_RxByte(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1446:	87 fd       	sbrc	r24, 7
    1448:	03 c0       	rjmp	.+6      	; 0x1450 <SerialStream_RxByte+0xe>
    144a:	2e ef       	ldi	r18, 0xFE	; 254
    144c:	3f ef       	ldi	r19, 0xFF	; 255
    144e:	08 c0       	rjmp	.+16     	; 0x1460 <SerialStream_RxByte+0x1e>
			 *  \return Byte received from the USART.
			 */
			static inline char Serial_RxByte(void) ATTR_ALWAYS_INLINE;
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
    1450:	80 91 c8 00 	lds	r24, 0x00C8
    1454:	87 ff       	sbrs	r24, 7
    1456:	fc cf       	rjmp	.-8      	; 0x1450 <SerialStream_RxByte+0xe>
				return UDR1;
    1458:	80 91 ce 00 	lds	r24, 0x00CE
	  return _FDEV_EOF;

	return Serial_RxByte();
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
}
    1460:	c9 01       	movw	r24, r18
    1462:	08 95       	ret

00001464 <printf_P>:
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	fe 01       	movw	r30, r28
    146e:	35 96       	adiw	r30, 0x05	; 5
    1470:	61 91       	ld	r22, Z+
    1472:	71 91       	ld	r23, Z+
    1474:	a0 91 49 01 	lds	r26, 0x0149
    1478:	b0 91 4a 01 	lds	r27, 0x014A
    147c:	13 96       	adiw	r26, 0x03	; 3
    147e:	8c 91       	ld	r24, X
    1480:	13 97       	sbiw	r26, 0x03	; 3
    1482:	88 60       	ori	r24, 0x08	; 8
    1484:	13 96       	adiw	r26, 0x03	; 3
    1486:	8c 93       	st	X, r24
    1488:	80 91 49 01 	lds	r24, 0x0149
    148c:	90 91 4a 01 	lds	r25, 0x014A
    1490:	af 01       	movw	r20, r30
    1492:	3f d0       	rcall	.+126    	; 0x1512 <vfprintf>
    1494:	e0 91 49 01 	lds	r30, 0x0149
    1498:	f0 91 4a 01 	lds	r31, 0x014A
    149c:	23 81       	ldd	r18, Z+3	; 0x03
    149e:	27 7f       	andi	r18, 0xF7	; 247
    14a0:	23 83       	std	Z+3, r18	; 0x03
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	08 95       	ret

000014a8 <puts_P>:
    14a8:	0f 93       	push	r16
    14aa:	1f 93       	push	r17
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	ec 01       	movw	r28, r24
    14b2:	e0 91 49 01 	lds	r30, 0x0149
    14b6:	f0 91 4a 01 	lds	r31, 0x014A
    14ba:	83 81       	ldd	r24, Z+3	; 0x03
    14bc:	81 ff       	sbrs	r24, 1
    14be:	21 c0       	rjmp	.+66     	; 0x1502 <puts_P+0x5a>
    14c0:	00 e0       	ldi	r16, 0x00	; 0
    14c2:	10 e0       	ldi	r17, 0x00	; 0
    14c4:	0e c0       	rjmp	.+28     	; 0x14e2 <puts_P+0x3a>
    14c6:	e0 91 49 01 	lds	r30, 0x0149
    14ca:	f0 91 4a 01 	lds	r31, 0x014A
    14ce:	20 85       	ldd	r18, Z+8	; 0x08
    14d0:	31 85       	ldd	r19, Z+9	; 0x09
    14d2:	bf 01       	movw	r22, r30
    14d4:	f9 01       	movw	r30, r18
    14d6:	09 95       	icall
    14d8:	89 2b       	or	r24, r25
    14da:	11 f0       	breq	.+4      	; 0x14e0 <puts_P+0x38>
    14dc:	0f ef       	ldi	r16, 0xFF	; 255
    14de:	1f ef       	ldi	r17, 0xFF	; 255
    14e0:	21 96       	adiw	r28, 0x01	; 1
    14e2:	fe 01       	movw	r30, r28
    14e4:	84 91       	lpm	r24, Z+
    14e6:	88 23       	and	r24, r24
    14e8:	71 f7       	brne	.-36     	; 0x14c6 <puts_P+0x1e>
    14ea:	e0 91 49 01 	lds	r30, 0x0149
    14ee:	f0 91 4a 01 	lds	r31, 0x014A
    14f2:	20 85       	ldd	r18, Z+8	; 0x08
    14f4:	31 85       	ldd	r19, Z+9	; 0x09
    14f6:	8a e0       	ldi	r24, 0x0A	; 10
    14f8:	bf 01       	movw	r22, r30
    14fa:	f9 01       	movw	r30, r18
    14fc:	09 95       	icall
    14fe:	89 2b       	or	r24, r25
    1500:	11 f0       	breq	.+4      	; 0x1506 <puts_P+0x5e>
    1502:	0f ef       	ldi	r16, 0xFF	; 255
    1504:	1f ef       	ldi	r17, 0xFF	; 255
    1506:	c8 01       	movw	r24, r16
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	1f 91       	pop	r17
    150e:	0f 91       	pop	r16
    1510:	08 95       	ret

00001512 <vfprintf>:
    1512:	2f 92       	push	r2
    1514:	3f 92       	push	r3
    1516:	4f 92       	push	r4
    1518:	5f 92       	push	r5
    151a:	6f 92       	push	r6
    151c:	7f 92       	push	r7
    151e:	8f 92       	push	r8
    1520:	9f 92       	push	r9
    1522:	af 92       	push	r10
    1524:	bf 92       	push	r11
    1526:	cf 92       	push	r12
    1528:	df 92       	push	r13
    152a:	ef 92       	push	r14
    152c:	ff 92       	push	r15
    152e:	0f 93       	push	r16
    1530:	1f 93       	push	r17
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	2b 97       	sbiw	r28, 0x0b	; 11
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	f8 94       	cli
    1540:	de bf       	out	0x3e, r29	; 62
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	cd bf       	out	0x3d, r28	; 61
    1546:	3c 01       	movw	r6, r24
    1548:	2b 01       	movw	r4, r22
    154a:	5a 01       	movw	r10, r20
    154c:	fc 01       	movw	r30, r24
    154e:	17 82       	std	Z+7, r1	; 0x07
    1550:	16 82       	std	Z+6, r1	; 0x06
    1552:	83 81       	ldd	r24, Z+3	; 0x03
    1554:	81 fd       	sbrc	r24, 1
    1556:	03 c0       	rjmp	.+6      	; 0x155e <vfprintf+0x4c>
    1558:	6f ef       	ldi	r22, 0xFF	; 255
    155a:	7f ef       	ldi	r23, 0xFF	; 255
    155c:	b9 c1       	rjmp	.+882    	; 0x18d0 <vfprintf+0x3be>
    155e:	9a e0       	ldi	r25, 0x0A	; 10
    1560:	89 2e       	mov	r8, r25
    1562:	1e 01       	movw	r2, r28
    1564:	08 94       	sec
    1566:	21 1c       	adc	r2, r1
    1568:	31 1c       	adc	r3, r1
    156a:	f3 01       	movw	r30, r6
    156c:	23 81       	ldd	r18, Z+3	; 0x03
    156e:	f2 01       	movw	r30, r4
    1570:	23 fd       	sbrc	r18, 3
    1572:	85 91       	lpm	r24, Z+
    1574:	23 ff       	sbrs	r18, 3
    1576:	81 91       	ld	r24, Z+
    1578:	2f 01       	movw	r4, r30
    157a:	88 23       	and	r24, r24
    157c:	09 f4       	brne	.+2      	; 0x1580 <vfprintf+0x6e>
    157e:	a5 c1       	rjmp	.+842    	; 0x18ca <vfprintf+0x3b8>
    1580:	85 32       	cpi	r24, 0x25	; 37
    1582:	39 f4       	brne	.+14     	; 0x1592 <vfprintf+0x80>
    1584:	23 fd       	sbrc	r18, 3
    1586:	85 91       	lpm	r24, Z+
    1588:	23 ff       	sbrs	r18, 3
    158a:	81 91       	ld	r24, Z+
    158c:	2f 01       	movw	r4, r30
    158e:	85 32       	cpi	r24, 0x25	; 37
    1590:	21 f4       	brne	.+8      	; 0x159a <vfprintf+0x88>
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	b3 01       	movw	r22, r6
    1596:	cc d1       	rcall	.+920    	; 0x1930 <fputc>
    1598:	e8 cf       	rjmp	.-48     	; 0x156a <vfprintf+0x58>
    159a:	98 2f       	mov	r25, r24
    159c:	ff 24       	eor	r15, r15
    159e:	ee 24       	eor	r14, r14
    15a0:	99 24       	eor	r9, r9
    15a2:	ff e1       	ldi	r31, 0x1F	; 31
    15a4:	ff 15       	cp	r31, r15
    15a6:	d0 f0       	brcs	.+52     	; 0x15dc <vfprintf+0xca>
    15a8:	9b 32       	cpi	r25, 0x2B	; 43
    15aa:	69 f0       	breq	.+26     	; 0x15c6 <vfprintf+0xb4>
    15ac:	9c 32       	cpi	r25, 0x2C	; 44
    15ae:	28 f4       	brcc	.+10     	; 0x15ba <vfprintf+0xa8>
    15b0:	90 32       	cpi	r25, 0x20	; 32
    15b2:	59 f0       	breq	.+22     	; 0x15ca <vfprintf+0xb8>
    15b4:	93 32       	cpi	r25, 0x23	; 35
    15b6:	91 f4       	brne	.+36     	; 0x15dc <vfprintf+0xca>
    15b8:	0e c0       	rjmp	.+28     	; 0x15d6 <vfprintf+0xc4>
    15ba:	9d 32       	cpi	r25, 0x2D	; 45
    15bc:	49 f0       	breq	.+18     	; 0x15d0 <vfprintf+0xbe>
    15be:	90 33       	cpi	r25, 0x30	; 48
    15c0:	69 f4       	brne	.+26     	; 0x15dc <vfprintf+0xca>
    15c2:	41 e0       	ldi	r20, 0x01	; 1
    15c4:	24 c0       	rjmp	.+72     	; 0x160e <vfprintf+0xfc>
    15c6:	52 e0       	ldi	r21, 0x02	; 2
    15c8:	f5 2a       	or	r15, r21
    15ca:	84 e0       	ldi	r24, 0x04	; 4
    15cc:	f8 2a       	or	r15, r24
    15ce:	28 c0       	rjmp	.+80     	; 0x1620 <vfprintf+0x10e>
    15d0:	98 e0       	ldi	r25, 0x08	; 8
    15d2:	f9 2a       	or	r15, r25
    15d4:	25 c0       	rjmp	.+74     	; 0x1620 <vfprintf+0x10e>
    15d6:	e0 e1       	ldi	r30, 0x10	; 16
    15d8:	fe 2a       	or	r15, r30
    15da:	22 c0       	rjmp	.+68     	; 0x1620 <vfprintf+0x10e>
    15dc:	f7 fc       	sbrc	r15, 7
    15de:	29 c0       	rjmp	.+82     	; 0x1632 <vfprintf+0x120>
    15e0:	89 2f       	mov	r24, r25
    15e2:	80 53       	subi	r24, 0x30	; 48
    15e4:	8a 30       	cpi	r24, 0x0A	; 10
    15e6:	70 f4       	brcc	.+28     	; 0x1604 <vfprintf+0xf2>
    15e8:	f6 fe       	sbrs	r15, 6
    15ea:	05 c0       	rjmp	.+10     	; 0x15f6 <vfprintf+0xe4>
    15ec:	98 9c       	mul	r9, r8
    15ee:	90 2c       	mov	r9, r0
    15f0:	11 24       	eor	r1, r1
    15f2:	98 0e       	add	r9, r24
    15f4:	15 c0       	rjmp	.+42     	; 0x1620 <vfprintf+0x10e>
    15f6:	e8 9c       	mul	r14, r8
    15f8:	e0 2c       	mov	r14, r0
    15fa:	11 24       	eor	r1, r1
    15fc:	e8 0e       	add	r14, r24
    15fe:	f0 e2       	ldi	r31, 0x20	; 32
    1600:	ff 2a       	or	r15, r31
    1602:	0e c0       	rjmp	.+28     	; 0x1620 <vfprintf+0x10e>
    1604:	9e 32       	cpi	r25, 0x2E	; 46
    1606:	29 f4       	brne	.+10     	; 0x1612 <vfprintf+0x100>
    1608:	f6 fc       	sbrc	r15, 6
    160a:	5f c1       	rjmp	.+702    	; 0x18ca <vfprintf+0x3b8>
    160c:	40 e4       	ldi	r20, 0x40	; 64
    160e:	f4 2a       	or	r15, r20
    1610:	07 c0       	rjmp	.+14     	; 0x1620 <vfprintf+0x10e>
    1612:	9c 36       	cpi	r25, 0x6C	; 108
    1614:	19 f4       	brne	.+6      	; 0x161c <vfprintf+0x10a>
    1616:	50 e8       	ldi	r21, 0x80	; 128
    1618:	f5 2a       	or	r15, r21
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <vfprintf+0x10e>
    161c:	98 36       	cpi	r25, 0x68	; 104
    161e:	49 f4       	brne	.+18     	; 0x1632 <vfprintf+0x120>
    1620:	f2 01       	movw	r30, r4
    1622:	23 fd       	sbrc	r18, 3
    1624:	95 91       	lpm	r25, Z+
    1626:	23 ff       	sbrs	r18, 3
    1628:	91 91       	ld	r25, Z+
    162a:	2f 01       	movw	r4, r30
    162c:	99 23       	and	r25, r25
    162e:	09 f0       	breq	.+2      	; 0x1632 <vfprintf+0x120>
    1630:	b8 cf       	rjmp	.-144    	; 0x15a2 <vfprintf+0x90>
    1632:	89 2f       	mov	r24, r25
    1634:	85 54       	subi	r24, 0x45	; 69
    1636:	83 30       	cpi	r24, 0x03	; 3
    1638:	18 f0       	brcs	.+6      	; 0x1640 <vfprintf+0x12e>
    163a:	80 52       	subi	r24, 0x20	; 32
    163c:	83 30       	cpi	r24, 0x03	; 3
    163e:	38 f4       	brcc	.+14     	; 0x164e <vfprintf+0x13c>
    1640:	44 e0       	ldi	r20, 0x04	; 4
    1642:	50 e0       	ldi	r21, 0x00	; 0
    1644:	a4 0e       	add	r10, r20
    1646:	b5 1e       	adc	r11, r21
    1648:	5f e3       	ldi	r21, 0x3F	; 63
    164a:	59 83       	std	Y+1, r21	; 0x01
    164c:	0f c0       	rjmp	.+30     	; 0x166c <vfprintf+0x15a>
    164e:	93 36       	cpi	r25, 0x63	; 99
    1650:	31 f0       	breq	.+12     	; 0x165e <vfprintf+0x14c>
    1652:	93 37       	cpi	r25, 0x73	; 115
    1654:	79 f0       	breq	.+30     	; 0x1674 <vfprintf+0x162>
    1656:	93 35       	cpi	r25, 0x53	; 83
    1658:	09 f0       	breq	.+2      	; 0x165c <vfprintf+0x14a>
    165a:	52 c0       	rjmp	.+164    	; 0x1700 <vfprintf+0x1ee>
    165c:	1f c0       	rjmp	.+62     	; 0x169c <vfprintf+0x18a>
    165e:	f5 01       	movw	r30, r10
    1660:	80 81       	ld	r24, Z
    1662:	89 83       	std	Y+1, r24	; 0x01
    1664:	42 e0       	ldi	r20, 0x02	; 2
    1666:	50 e0       	ldi	r21, 0x00	; 0
    1668:	a4 0e       	add	r10, r20
    166a:	b5 1e       	adc	r11, r21
    166c:	61 01       	movw	r12, r2
    166e:	01 e0       	ldi	r16, 0x01	; 1
    1670:	10 e0       	ldi	r17, 0x00	; 0
    1672:	11 c0       	rjmp	.+34     	; 0x1696 <vfprintf+0x184>
    1674:	f5 01       	movw	r30, r10
    1676:	c0 80       	ld	r12, Z
    1678:	d1 80       	ldd	r13, Z+1	; 0x01
    167a:	f6 fc       	sbrc	r15, 6
    167c:	03 c0       	rjmp	.+6      	; 0x1684 <vfprintf+0x172>
    167e:	6f ef       	ldi	r22, 0xFF	; 255
    1680:	7f ef       	ldi	r23, 0xFF	; 255
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <vfprintf+0x176>
    1684:	69 2d       	mov	r22, r9
    1686:	70 e0       	ldi	r23, 0x00	; 0
    1688:	42 e0       	ldi	r20, 0x02	; 2
    168a:	50 e0       	ldi	r21, 0x00	; 0
    168c:	a4 0e       	add	r10, r20
    168e:	b5 1e       	adc	r11, r21
    1690:	c6 01       	movw	r24, r12
    1692:	43 d1       	rcall	.+646    	; 0x191a <strnlen>
    1694:	8c 01       	movw	r16, r24
    1696:	5f e7       	ldi	r21, 0x7F	; 127
    1698:	f5 22       	and	r15, r21
    169a:	13 c0       	rjmp	.+38     	; 0x16c2 <vfprintf+0x1b0>
    169c:	f5 01       	movw	r30, r10
    169e:	c0 80       	ld	r12, Z
    16a0:	d1 80       	ldd	r13, Z+1	; 0x01
    16a2:	f6 fc       	sbrc	r15, 6
    16a4:	03 c0       	rjmp	.+6      	; 0x16ac <vfprintf+0x19a>
    16a6:	6f ef       	ldi	r22, 0xFF	; 255
    16a8:	7f ef       	ldi	r23, 0xFF	; 255
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <vfprintf+0x19e>
    16ac:	69 2d       	mov	r22, r9
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	42 e0       	ldi	r20, 0x02	; 2
    16b2:	50 e0       	ldi	r21, 0x00	; 0
    16b4:	a4 0e       	add	r10, r20
    16b6:	b5 1e       	adc	r11, r21
    16b8:	c6 01       	movw	r24, r12
    16ba:	24 d1       	rcall	.+584    	; 0x1904 <strnlen_P>
    16bc:	8c 01       	movw	r16, r24
    16be:	50 e8       	ldi	r21, 0x80	; 128
    16c0:	f5 2a       	or	r15, r21
    16c2:	f3 fe       	sbrs	r15, 3
    16c4:	06 c0       	rjmp	.+12     	; 0x16d2 <vfprintf+0x1c0>
    16c6:	18 c0       	rjmp	.+48     	; 0x16f8 <vfprintf+0x1e6>
    16c8:	80 e2       	ldi	r24, 0x20	; 32
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	b3 01       	movw	r22, r6
    16ce:	30 d1       	rcall	.+608    	; 0x1930 <fputc>
    16d0:	ea 94       	dec	r14
    16d2:	8e 2d       	mov	r24, r14
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	08 17       	cp	r16, r24
    16d8:	19 07       	cpc	r17, r25
    16da:	b0 f3       	brcs	.-20     	; 0x16c8 <vfprintf+0x1b6>
    16dc:	0d c0       	rjmp	.+26     	; 0x16f8 <vfprintf+0x1e6>
    16de:	f6 01       	movw	r30, r12
    16e0:	f7 fc       	sbrc	r15, 7
    16e2:	85 91       	lpm	r24, Z+
    16e4:	f7 fe       	sbrs	r15, 7
    16e6:	81 91       	ld	r24, Z+
    16e8:	6f 01       	movw	r12, r30
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	b3 01       	movw	r22, r6
    16ee:	20 d1       	rcall	.+576    	; 0x1930 <fputc>
    16f0:	e1 10       	cpse	r14, r1
    16f2:	ea 94       	dec	r14
    16f4:	01 50       	subi	r16, 0x01	; 1
    16f6:	10 40       	sbci	r17, 0x00	; 0
    16f8:	01 15       	cp	r16, r1
    16fa:	11 05       	cpc	r17, r1
    16fc:	81 f7       	brne	.-32     	; 0x16de <vfprintf+0x1cc>
    16fe:	e2 c0       	rjmp	.+452    	; 0x18c4 <vfprintf+0x3b2>
    1700:	94 36       	cpi	r25, 0x64	; 100
    1702:	11 f0       	breq	.+4      	; 0x1708 <vfprintf+0x1f6>
    1704:	99 36       	cpi	r25, 0x69	; 105
    1706:	61 f5       	brne	.+88     	; 0x1760 <vfprintf+0x24e>
    1708:	f7 fe       	sbrs	r15, 7
    170a:	08 c0       	rjmp	.+16     	; 0x171c <vfprintf+0x20a>
    170c:	f5 01       	movw	r30, r10
    170e:	20 81       	ld	r18, Z
    1710:	31 81       	ldd	r19, Z+1	; 0x01
    1712:	42 81       	ldd	r20, Z+2	; 0x02
    1714:	53 81       	ldd	r21, Z+3	; 0x03
    1716:	84 e0       	ldi	r24, 0x04	; 4
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	0a c0       	rjmp	.+20     	; 0x1730 <vfprintf+0x21e>
    171c:	f5 01       	movw	r30, r10
    171e:	80 81       	ld	r24, Z
    1720:	91 81       	ldd	r25, Z+1	; 0x01
    1722:	9c 01       	movw	r18, r24
    1724:	44 27       	eor	r20, r20
    1726:	37 fd       	sbrc	r19, 7
    1728:	40 95       	com	r20
    172a:	54 2f       	mov	r21, r20
    172c:	82 e0       	ldi	r24, 0x02	; 2
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	a8 0e       	add	r10, r24
    1732:	b9 1e       	adc	r11, r25
    1734:	9f e6       	ldi	r25, 0x6F	; 111
    1736:	f9 22       	and	r15, r25
    1738:	57 ff       	sbrs	r21, 7
    173a:	09 c0       	rjmp	.+18     	; 0x174e <vfprintf+0x23c>
    173c:	50 95       	com	r21
    173e:	40 95       	com	r20
    1740:	30 95       	com	r19
    1742:	21 95       	neg	r18
    1744:	3f 4f       	sbci	r19, 0xFF	; 255
    1746:	4f 4f       	sbci	r20, 0xFF	; 255
    1748:	5f 4f       	sbci	r21, 0xFF	; 255
    174a:	e0 e8       	ldi	r30, 0x80	; 128
    174c:	fe 2a       	or	r15, r30
    174e:	ca 01       	movw	r24, r20
    1750:	b9 01       	movw	r22, r18
    1752:	a1 01       	movw	r20, r2
    1754:	2a e0       	ldi	r18, 0x0A	; 10
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	17 d1       	rcall	.+558    	; 0x1988 <__ultoa_invert>
    175a:	d8 2e       	mov	r13, r24
    175c:	d2 18       	sub	r13, r2
    175e:	3f c0       	rjmp	.+126    	; 0x17de <vfprintf+0x2cc>
    1760:	95 37       	cpi	r25, 0x75	; 117
    1762:	29 f4       	brne	.+10     	; 0x176e <vfprintf+0x25c>
    1764:	1f 2d       	mov	r17, r15
    1766:	1f 7e       	andi	r17, 0xEF	; 239
    1768:	2a e0       	ldi	r18, 0x0A	; 10
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	1d c0       	rjmp	.+58     	; 0x17a8 <vfprintf+0x296>
    176e:	1f 2d       	mov	r17, r15
    1770:	19 7f       	andi	r17, 0xF9	; 249
    1772:	9f 36       	cpi	r25, 0x6F	; 111
    1774:	61 f0       	breq	.+24     	; 0x178e <vfprintf+0x27c>
    1776:	90 37       	cpi	r25, 0x70	; 112
    1778:	20 f4       	brcc	.+8      	; 0x1782 <vfprintf+0x270>
    177a:	98 35       	cpi	r25, 0x58	; 88
    177c:	09 f0       	breq	.+2      	; 0x1780 <vfprintf+0x26e>
    177e:	a5 c0       	rjmp	.+330    	; 0x18ca <vfprintf+0x3b8>
    1780:	0f c0       	rjmp	.+30     	; 0x17a0 <vfprintf+0x28e>
    1782:	90 37       	cpi	r25, 0x70	; 112
    1784:	39 f0       	breq	.+14     	; 0x1794 <vfprintf+0x282>
    1786:	98 37       	cpi	r25, 0x78	; 120
    1788:	09 f0       	breq	.+2      	; 0x178c <vfprintf+0x27a>
    178a:	9f c0       	rjmp	.+318    	; 0x18ca <vfprintf+0x3b8>
    178c:	04 c0       	rjmp	.+8      	; 0x1796 <vfprintf+0x284>
    178e:	28 e0       	ldi	r18, 0x08	; 8
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	0a c0       	rjmp	.+20     	; 0x17a8 <vfprintf+0x296>
    1794:	10 61       	ori	r17, 0x10	; 16
    1796:	14 fd       	sbrc	r17, 4
    1798:	14 60       	ori	r17, 0x04	; 4
    179a:	20 e1       	ldi	r18, 0x10	; 16
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	04 c0       	rjmp	.+8      	; 0x17a8 <vfprintf+0x296>
    17a0:	14 fd       	sbrc	r17, 4
    17a2:	16 60       	ori	r17, 0x06	; 6
    17a4:	20 e1       	ldi	r18, 0x10	; 16
    17a6:	32 e0       	ldi	r19, 0x02	; 2
    17a8:	17 ff       	sbrs	r17, 7
    17aa:	08 c0       	rjmp	.+16     	; 0x17bc <vfprintf+0x2aa>
    17ac:	f5 01       	movw	r30, r10
    17ae:	60 81       	ld	r22, Z
    17b0:	71 81       	ldd	r23, Z+1	; 0x01
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	44 e0       	ldi	r20, 0x04	; 4
    17b8:	50 e0       	ldi	r21, 0x00	; 0
    17ba:	08 c0       	rjmp	.+16     	; 0x17cc <vfprintf+0x2ba>
    17bc:	f5 01       	movw	r30, r10
    17be:	80 81       	ld	r24, Z
    17c0:	91 81       	ldd	r25, Z+1	; 0x01
    17c2:	bc 01       	movw	r22, r24
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	42 e0       	ldi	r20, 0x02	; 2
    17ca:	50 e0       	ldi	r21, 0x00	; 0
    17cc:	a4 0e       	add	r10, r20
    17ce:	b5 1e       	adc	r11, r21
    17d0:	a1 01       	movw	r20, r2
    17d2:	da d0       	rcall	.+436    	; 0x1988 <__ultoa_invert>
    17d4:	d8 2e       	mov	r13, r24
    17d6:	d2 18       	sub	r13, r2
    17d8:	8f e7       	ldi	r24, 0x7F	; 127
    17da:	f8 2e       	mov	r15, r24
    17dc:	f1 22       	and	r15, r17
    17de:	f6 fe       	sbrs	r15, 6
    17e0:	0b c0       	rjmp	.+22     	; 0x17f8 <vfprintf+0x2e6>
    17e2:	5e ef       	ldi	r21, 0xFE	; 254
    17e4:	f5 22       	and	r15, r21
    17e6:	d9 14       	cp	r13, r9
    17e8:	38 f4       	brcc	.+14     	; 0x17f8 <vfprintf+0x2e6>
    17ea:	f4 fe       	sbrs	r15, 4
    17ec:	07 c0       	rjmp	.+14     	; 0x17fc <vfprintf+0x2ea>
    17ee:	f2 fc       	sbrc	r15, 2
    17f0:	05 c0       	rjmp	.+10     	; 0x17fc <vfprintf+0x2ea>
    17f2:	8f ee       	ldi	r24, 0xEF	; 239
    17f4:	f8 22       	and	r15, r24
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <vfprintf+0x2ea>
    17f8:	1d 2d       	mov	r17, r13
    17fa:	01 c0       	rjmp	.+2      	; 0x17fe <vfprintf+0x2ec>
    17fc:	19 2d       	mov	r17, r9
    17fe:	f4 fe       	sbrs	r15, 4
    1800:	0d c0       	rjmp	.+26     	; 0x181c <vfprintf+0x30a>
    1802:	fe 01       	movw	r30, r28
    1804:	ed 0d       	add	r30, r13
    1806:	f1 1d       	adc	r31, r1
    1808:	80 81       	ld	r24, Z
    180a:	80 33       	cpi	r24, 0x30	; 48
    180c:	19 f4       	brne	.+6      	; 0x1814 <vfprintf+0x302>
    180e:	99 ee       	ldi	r25, 0xE9	; 233
    1810:	f9 22       	and	r15, r25
    1812:	08 c0       	rjmp	.+16     	; 0x1824 <vfprintf+0x312>
    1814:	1f 5f       	subi	r17, 0xFF	; 255
    1816:	f2 fe       	sbrs	r15, 2
    1818:	05 c0       	rjmp	.+10     	; 0x1824 <vfprintf+0x312>
    181a:	03 c0       	rjmp	.+6      	; 0x1822 <vfprintf+0x310>
    181c:	8f 2d       	mov	r24, r15
    181e:	86 78       	andi	r24, 0x86	; 134
    1820:	09 f0       	breq	.+2      	; 0x1824 <vfprintf+0x312>
    1822:	1f 5f       	subi	r17, 0xFF	; 255
    1824:	0f 2d       	mov	r16, r15
    1826:	f3 fc       	sbrc	r15, 3
    1828:	13 c0       	rjmp	.+38     	; 0x1850 <vfprintf+0x33e>
    182a:	f0 fe       	sbrs	r15, 0
    182c:	0e c0       	rjmp	.+28     	; 0x184a <vfprintf+0x338>
    182e:	1e 15       	cp	r17, r14
    1830:	10 f0       	brcs	.+4      	; 0x1836 <vfprintf+0x324>
    1832:	9d 2c       	mov	r9, r13
    1834:	0a c0       	rjmp	.+20     	; 0x184a <vfprintf+0x338>
    1836:	9d 2c       	mov	r9, r13
    1838:	9e 0c       	add	r9, r14
    183a:	91 1a       	sub	r9, r17
    183c:	1e 2d       	mov	r17, r14
    183e:	05 c0       	rjmp	.+10     	; 0x184a <vfprintf+0x338>
    1840:	80 e2       	ldi	r24, 0x20	; 32
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	b3 01       	movw	r22, r6
    1846:	74 d0       	rcall	.+232    	; 0x1930 <fputc>
    1848:	1f 5f       	subi	r17, 0xFF	; 255
    184a:	1e 15       	cp	r17, r14
    184c:	c8 f3       	brcs	.-14     	; 0x1840 <vfprintf+0x32e>
    184e:	04 c0       	rjmp	.+8      	; 0x1858 <vfprintf+0x346>
    1850:	1e 15       	cp	r17, r14
    1852:	10 f4       	brcc	.+4      	; 0x1858 <vfprintf+0x346>
    1854:	e1 1a       	sub	r14, r17
    1856:	01 c0       	rjmp	.+2      	; 0x185a <vfprintf+0x348>
    1858:	ee 24       	eor	r14, r14
    185a:	04 ff       	sbrs	r16, 4
    185c:	0e c0       	rjmp	.+28     	; 0x187a <vfprintf+0x368>
    185e:	80 e3       	ldi	r24, 0x30	; 48
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	b3 01       	movw	r22, r6
    1864:	65 d0       	rcall	.+202    	; 0x1930 <fputc>
    1866:	02 ff       	sbrs	r16, 2
    1868:	1b c0       	rjmp	.+54     	; 0x18a0 <vfprintf+0x38e>
    186a:	01 fd       	sbrc	r16, 1
    186c:	03 c0       	rjmp	.+6      	; 0x1874 <vfprintf+0x362>
    186e:	88 e7       	ldi	r24, 0x78	; 120
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	0e c0       	rjmp	.+28     	; 0x1890 <vfprintf+0x37e>
    1874:	88 e5       	ldi	r24, 0x58	; 88
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0b c0       	rjmp	.+22     	; 0x1890 <vfprintf+0x37e>
    187a:	80 2f       	mov	r24, r16
    187c:	86 78       	andi	r24, 0x86	; 134
    187e:	81 f0       	breq	.+32     	; 0x18a0 <vfprintf+0x38e>
    1880:	01 ff       	sbrs	r16, 1
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <vfprintf+0x376>
    1884:	8b e2       	ldi	r24, 0x2B	; 43
    1886:	01 c0       	rjmp	.+2      	; 0x188a <vfprintf+0x378>
    1888:	80 e2       	ldi	r24, 0x20	; 32
    188a:	f7 fc       	sbrc	r15, 7
    188c:	8d e2       	ldi	r24, 0x2D	; 45
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	b3 01       	movw	r22, r6
    1892:	4e d0       	rcall	.+156    	; 0x1930 <fputc>
    1894:	05 c0       	rjmp	.+10     	; 0x18a0 <vfprintf+0x38e>
    1896:	80 e3       	ldi	r24, 0x30	; 48
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	b3 01       	movw	r22, r6
    189c:	49 d0       	rcall	.+146    	; 0x1930 <fputc>
    189e:	9a 94       	dec	r9
    18a0:	d9 14       	cp	r13, r9
    18a2:	c8 f3       	brcs	.-14     	; 0x1896 <vfprintf+0x384>
    18a4:	da 94       	dec	r13
    18a6:	f1 01       	movw	r30, r2
    18a8:	ed 0d       	add	r30, r13
    18aa:	f1 1d       	adc	r31, r1
    18ac:	80 81       	ld	r24, Z
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	b3 01       	movw	r22, r6
    18b2:	3e d0       	rcall	.+124    	; 0x1930 <fputc>
    18b4:	dd 20       	and	r13, r13
    18b6:	b1 f7       	brne	.-20     	; 0x18a4 <vfprintf+0x392>
    18b8:	05 c0       	rjmp	.+10     	; 0x18c4 <vfprintf+0x3b2>
    18ba:	80 e2       	ldi	r24, 0x20	; 32
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	b3 01       	movw	r22, r6
    18c0:	37 d0       	rcall	.+110    	; 0x1930 <fputc>
    18c2:	ea 94       	dec	r14
    18c4:	ee 20       	and	r14, r14
    18c6:	c9 f7       	brne	.-14     	; 0x18ba <vfprintf+0x3a8>
    18c8:	50 ce       	rjmp	.-864    	; 0x156a <vfprintf+0x58>
    18ca:	f3 01       	movw	r30, r6
    18cc:	66 81       	ldd	r22, Z+6	; 0x06
    18ce:	77 81       	ldd	r23, Z+7	; 0x07
    18d0:	cb 01       	movw	r24, r22
    18d2:	2b 96       	adiw	r28, 0x0b	; 11
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
    18de:	cf 91       	pop	r28
    18e0:	df 91       	pop	r29
    18e2:	1f 91       	pop	r17
    18e4:	0f 91       	pop	r16
    18e6:	ff 90       	pop	r15
    18e8:	ef 90       	pop	r14
    18ea:	df 90       	pop	r13
    18ec:	cf 90       	pop	r12
    18ee:	bf 90       	pop	r11
    18f0:	af 90       	pop	r10
    18f2:	9f 90       	pop	r9
    18f4:	8f 90       	pop	r8
    18f6:	7f 90       	pop	r7
    18f8:	6f 90       	pop	r6
    18fa:	5f 90       	pop	r5
    18fc:	4f 90       	pop	r4
    18fe:	3f 90       	pop	r3
    1900:	2f 90       	pop	r2
    1902:	08 95       	ret

00001904 <strnlen_P>:
    1904:	fc 01       	movw	r30, r24
    1906:	05 90       	lpm	r0, Z+
    1908:	61 50       	subi	r22, 0x01	; 1
    190a:	70 40       	sbci	r23, 0x00	; 0
    190c:	01 10       	cpse	r0, r1
    190e:	d8 f7       	brcc	.-10     	; 0x1906 <strnlen_P+0x2>
    1910:	80 95       	com	r24
    1912:	90 95       	com	r25
    1914:	8e 0f       	add	r24, r30
    1916:	9f 1f       	adc	r25, r31
    1918:	08 95       	ret

0000191a <strnlen>:
    191a:	fc 01       	movw	r30, r24
    191c:	61 50       	subi	r22, 0x01	; 1
    191e:	70 40       	sbci	r23, 0x00	; 0
    1920:	01 90       	ld	r0, Z+
    1922:	01 10       	cpse	r0, r1
    1924:	d8 f7       	brcc	.-10     	; 0x191c <strnlen+0x2>
    1926:	80 95       	com	r24
    1928:	90 95       	com	r25
    192a:	8e 0f       	add	r24, r30
    192c:	9f 1f       	adc	r25, r31
    192e:	08 95       	ret

00001930 <fputc>:
    1930:	0f 93       	push	r16
    1932:	1f 93       	push	r17
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	8c 01       	movw	r16, r24
    193a:	eb 01       	movw	r28, r22
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	81 ff       	sbrs	r24, 1
    1940:	1b c0       	rjmp	.+54     	; 0x1978 <fputc+0x48>
    1942:	82 ff       	sbrs	r24, 2
    1944:	0d c0       	rjmp	.+26     	; 0x1960 <fputc+0x30>
    1946:	2e 81       	ldd	r18, Y+6	; 0x06
    1948:	3f 81       	ldd	r19, Y+7	; 0x07
    194a:	8c 81       	ldd	r24, Y+4	; 0x04
    194c:	9d 81       	ldd	r25, Y+5	; 0x05
    194e:	28 17       	cp	r18, r24
    1950:	39 07       	cpc	r19, r25
    1952:	64 f4       	brge	.+24     	; 0x196c <fputc+0x3c>
    1954:	e8 81       	ld	r30, Y
    1956:	f9 81       	ldd	r31, Y+1	; 0x01
    1958:	01 93       	st	Z+, r16
    195a:	f9 83       	std	Y+1, r31	; 0x01
    195c:	e8 83       	st	Y, r30
    195e:	06 c0       	rjmp	.+12     	; 0x196c <fputc+0x3c>
    1960:	e8 85       	ldd	r30, Y+8	; 0x08
    1962:	f9 85       	ldd	r31, Y+9	; 0x09
    1964:	80 2f       	mov	r24, r16
    1966:	09 95       	icall
    1968:	89 2b       	or	r24, r25
    196a:	31 f4       	brne	.+12     	; 0x1978 <fputc+0x48>
    196c:	8e 81       	ldd	r24, Y+6	; 0x06
    196e:	9f 81       	ldd	r25, Y+7	; 0x07
    1970:	01 96       	adiw	r24, 0x01	; 1
    1972:	9f 83       	std	Y+7, r25	; 0x07
    1974:	8e 83       	std	Y+6, r24	; 0x06
    1976:	02 c0       	rjmp	.+4      	; 0x197c <fputc+0x4c>
    1978:	0f ef       	ldi	r16, 0xFF	; 255
    197a:	1f ef       	ldi	r17, 0xFF	; 255
    197c:	c8 01       	movw	r24, r16
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	1f 91       	pop	r17
    1984:	0f 91       	pop	r16
    1986:	08 95       	ret

00001988 <__ultoa_invert>:
    1988:	fa 01       	movw	r30, r20
    198a:	aa 27       	eor	r26, r26
    198c:	28 30       	cpi	r18, 0x08	; 8
    198e:	51 f1       	breq	.+84     	; 0x19e4 <__ultoa_invert+0x5c>
    1990:	20 31       	cpi	r18, 0x10	; 16
    1992:	81 f1       	breq	.+96     	; 0x19f4 <__ultoa_invert+0x6c>
    1994:	e8 94       	clt
    1996:	6f 93       	push	r22
    1998:	6e 7f       	andi	r22, 0xFE	; 254
    199a:	6e 5f       	subi	r22, 0xFE	; 254
    199c:	7f 4f       	sbci	r23, 0xFF	; 255
    199e:	8f 4f       	sbci	r24, 0xFF	; 255
    19a0:	9f 4f       	sbci	r25, 0xFF	; 255
    19a2:	af 4f       	sbci	r26, 0xFF	; 255
    19a4:	b1 e0       	ldi	r27, 0x01	; 1
    19a6:	3e d0       	rcall	.+124    	; 0x1a24 <__ultoa_invert+0x9c>
    19a8:	b4 e0       	ldi	r27, 0x04	; 4
    19aa:	3c d0       	rcall	.+120    	; 0x1a24 <__ultoa_invert+0x9c>
    19ac:	67 0f       	add	r22, r23
    19ae:	78 1f       	adc	r23, r24
    19b0:	89 1f       	adc	r24, r25
    19b2:	9a 1f       	adc	r25, r26
    19b4:	a1 1d       	adc	r26, r1
    19b6:	68 0f       	add	r22, r24
    19b8:	79 1f       	adc	r23, r25
    19ba:	8a 1f       	adc	r24, r26
    19bc:	91 1d       	adc	r25, r1
    19be:	a1 1d       	adc	r26, r1
    19c0:	6a 0f       	add	r22, r26
    19c2:	71 1d       	adc	r23, r1
    19c4:	81 1d       	adc	r24, r1
    19c6:	91 1d       	adc	r25, r1
    19c8:	a1 1d       	adc	r26, r1
    19ca:	20 d0       	rcall	.+64     	; 0x1a0c <__ultoa_invert+0x84>
    19cc:	09 f4       	brne	.+2      	; 0x19d0 <__ultoa_invert+0x48>
    19ce:	68 94       	set
    19d0:	3f 91       	pop	r19
    19d2:	2a e0       	ldi	r18, 0x0A	; 10
    19d4:	26 9f       	mul	r18, r22
    19d6:	11 24       	eor	r1, r1
    19d8:	30 19       	sub	r19, r0
    19da:	30 5d       	subi	r19, 0xD0	; 208
    19dc:	31 93       	st	Z+, r19
    19de:	de f6       	brtc	.-74     	; 0x1996 <__ultoa_invert+0xe>
    19e0:	cf 01       	movw	r24, r30
    19e2:	08 95       	ret
    19e4:	46 2f       	mov	r20, r22
    19e6:	47 70       	andi	r20, 0x07	; 7
    19e8:	40 5d       	subi	r20, 0xD0	; 208
    19ea:	41 93       	st	Z+, r20
    19ec:	b3 e0       	ldi	r27, 0x03	; 3
    19ee:	0f d0       	rcall	.+30     	; 0x1a0e <__ultoa_invert+0x86>
    19f0:	c9 f7       	brne	.-14     	; 0x19e4 <__ultoa_invert+0x5c>
    19f2:	f6 cf       	rjmp	.-20     	; 0x19e0 <__ultoa_invert+0x58>
    19f4:	46 2f       	mov	r20, r22
    19f6:	4f 70       	andi	r20, 0x0F	; 15
    19f8:	40 5d       	subi	r20, 0xD0	; 208
    19fa:	4a 33       	cpi	r20, 0x3A	; 58
    19fc:	18 f0       	brcs	.+6      	; 0x1a04 <__ultoa_invert+0x7c>
    19fe:	49 5d       	subi	r20, 0xD9	; 217
    1a00:	31 fd       	sbrc	r19, 1
    1a02:	40 52       	subi	r20, 0x20	; 32
    1a04:	41 93       	st	Z+, r20
    1a06:	02 d0       	rcall	.+4      	; 0x1a0c <__ultoa_invert+0x84>
    1a08:	a9 f7       	brne	.-22     	; 0x19f4 <__ultoa_invert+0x6c>
    1a0a:	ea cf       	rjmp	.-44     	; 0x19e0 <__ultoa_invert+0x58>
    1a0c:	b4 e0       	ldi	r27, 0x04	; 4
    1a0e:	a6 95       	lsr	r26
    1a10:	97 95       	ror	r25
    1a12:	87 95       	ror	r24
    1a14:	77 95       	ror	r23
    1a16:	67 95       	ror	r22
    1a18:	ba 95       	dec	r27
    1a1a:	c9 f7       	brne	.-14     	; 0x1a0e <__ultoa_invert+0x86>
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	61 05       	cpc	r22, r1
    1a20:	71 05       	cpc	r23, r1
    1a22:	08 95       	ret
    1a24:	9b 01       	movw	r18, r22
    1a26:	ac 01       	movw	r20, r24
    1a28:	0a 2e       	mov	r0, r26
    1a2a:	06 94       	lsr	r0
    1a2c:	57 95       	ror	r21
    1a2e:	47 95       	ror	r20
    1a30:	37 95       	ror	r19
    1a32:	27 95       	ror	r18
    1a34:	ba 95       	dec	r27
    1a36:	c9 f7       	brne	.-14     	; 0x1a2a <__ultoa_invert+0xa2>
    1a38:	62 0f       	add	r22, r18
    1a3a:	73 1f       	adc	r23, r19
    1a3c:	84 1f       	adc	r24, r20
    1a3e:	95 1f       	adc	r25, r21
    1a40:	a0 1d       	adc	r26, r0
    1a42:	08 95       	ret

00001a44 <_exit>:
    1a44:	f8 94       	cli

00001a46 <__stop_program>:
    1a46:	ff cf       	rjmp	.-2      	; 0x1a46 <__stop_program>
