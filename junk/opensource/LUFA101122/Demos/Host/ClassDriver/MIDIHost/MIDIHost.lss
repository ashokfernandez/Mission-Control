
MIDIHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00001a6e  00001b02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800138  00800138  00001b3a  2**0
                  ALLOC
  3 .stab         00001014  00000000  00000000  00001b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000315  00000000  00000000  00002b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000006d8  00000000  00000000  00002e65  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000e9d  00000000  00000000  0000353d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ac19  00000000  00000000  000043da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b4f  00000000  00000000  0000eff3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000760d  00000000  00000000  00011b42  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ab0  00000000  00000000  00019150  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000042d7  00000000  00000000  00019c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004fb6  00000000  00000000  0001ded7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000788  00000000  00000000  00022e8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return USB_Host_SendControlRequest(Buffer);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointNum)
{
       0:	1d c1       	rjmp	.+570    	; 0x23c <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       4:	39 c1       	rjmp	.+626    	; 0x278 <__bad_interrupt>
       6:	00 00       	nop
       8:	37 c1       	rjmp	.+622    	; 0x278 <__bad_interrupt>
       a:	00 00       	nop
       c:	35 c1       	rjmp	.+618    	; 0x278 <__bad_interrupt>
       e:	00 00       	nop
      10:	33 c1       	rjmp	.+614    	; 0x278 <__bad_interrupt>
      12:	00 00       	nop
      14:	31 c1       	rjmp	.+610    	; 0x278 <__bad_interrupt>
      16:	00 00       	nop
      18:	2f c1       	rjmp	.+606    	; 0x278 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2d c1       	rjmp	.+602    	; 0x278 <__bad_interrupt>
      1e:	00 00       	nop
      20:	2b c1       	rjmp	.+598    	; 0x278 <__bad_interrupt>
      22:	00 00       	nop
      24:	29 c1       	rjmp	.+594    	; 0x278 <__bad_interrupt>
      26:	00 00       	nop
      28:	dd c5       	rjmp	.+3002   	; 0xbe4 <__vector_10>
      2a:	00 00       	nop
      2c:	25 c1       	rjmp	.+586    	; 0x278 <__bad_interrupt>
      2e:	00 00       	nop
      30:	23 c1       	rjmp	.+582    	; 0x278 <__bad_interrupt>
      32:	00 00       	nop
      34:	21 c1       	rjmp	.+578    	; 0x278 <__bad_interrupt>
      36:	00 00       	nop
      38:	1f c1       	rjmp	.+574    	; 0x278 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1d c1       	rjmp	.+570    	; 0x278 <__bad_interrupt>
      3e:	00 00       	nop
      40:	1b c1       	rjmp	.+566    	; 0x278 <__bad_interrupt>
      42:	00 00       	nop
      44:	19 c1       	rjmp	.+562    	; 0x278 <__bad_interrupt>
      46:	00 00       	nop
      48:	17 c1       	rjmp	.+558    	; 0x278 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	15 c1       	rjmp	.+554    	; 0x278 <__bad_interrupt>
      4e:	00 00       	nop
      50:	13 c1       	rjmp	.+550    	; 0x278 <__bad_interrupt>
      52:	00 00       	nop
      54:	11 c1       	rjmp	.+546    	; 0x278 <__bad_interrupt>
      56:	00 00       	nop
      58:	0f c1       	rjmp	.+542    	; 0x278 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0d c1       	rjmp	.+538    	; 0x278 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0b c1       	rjmp	.+534    	; 0x278 <__bad_interrupt>
      62:	00 00       	nop
      64:	09 c1       	rjmp	.+530    	; 0x278 <__bad_interrupt>
      66:	00 00       	nop
      68:	07 c1       	rjmp	.+526    	; 0x278 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	05 c1       	rjmp	.+522    	; 0x278 <__bad_interrupt>
      6e:	00 00       	nop
      70:	03 c1       	rjmp	.+518    	; 0x278 <__bad_interrupt>
      72:	00 00       	nop
      74:	01 c1       	rjmp	.+514    	; 0x278 <__bad_interrupt>
      76:	00 00       	nop
      78:	ff c0       	rjmp	.+510    	; 0x278 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fd c0       	rjmp	.+506    	; 0x278 <__bad_interrupt>
      7e:	00 00       	nop
      80:	fb c0       	rjmp	.+502    	; 0x278 <__bad_interrupt>
      82:	00 00       	nop
      84:	f9 c0       	rjmp	.+498    	; 0x278 <__bad_interrupt>
      86:	00 00       	nop
      88:	f7 c0       	rjmp	.+494    	; 0x278 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f5 c0       	rjmp	.+490    	; 0x278 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f3 c0       	rjmp	.+486    	; 0x278 <__bad_interrupt>
      92:	00 00       	nop
      94:	f1 c0       	rjmp	.+482    	; 0x278 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4262>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4254>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4246>:
     11d:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     12d:	68 65 64 2e 0d 0a 00                                hed....

00000134 <__c.4241>:
     134:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     144:	0d 0a 00                                            ...

00000147 <__c.4165>:
     147:	4d 49 44 49 20 4e 6f 74 65 20 25 73 20 2d 20 43     MIDI Note %s - C
     157:	68 61 6e 6e 65 6c 20 25 64 2c 20 50 69 74 63 68     hannel %d, Pitch
     167:	20 25 64 2c 20 56 65 6c 6f 63 69 74 79 20 25 64      %d, Velocity %d
     177:	0d 0a 00                                            ...

0000017a <__c.4159>:
     17a:	4d 49 44 49 20 44 65 76 69 63 65 20 45 6e 75 6d     MIDI Device Enum
     18a:	65 72 61 74 65 64 2e 0d 0a 00                       erated....

00000194 <__c.4157>:
     194:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     1a4:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     1b4:	6f 6e 2e 0d 0a 00                                   on....

000001ba <__c.4155>:
     1ba:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1ca:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4d 49 44 49     Not a Valid MIDI
     1da:	20 43 6c 61 73 73 20 44 65 76 69 63 65 2e 0d 0a      Class Device...
     1ea:	00                                                  .

000001eb <__c.4152>:
     1eb:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1fb:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     20b:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

00000218 <__c.4147>:
     218:	1b 5b 33 36 6d 4d 49 44 49 20 48 6f 73 74 20 44     .[36mMIDI Host D
     228:	65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b     emo running....[
     238:	33 37 6d 00                                         37m.

0000023c <__ctors_end>:
     23c:	11 24       	eor	r1, r1
     23e:	1f be       	out	0x3f, r1	; 63
     240:	cf ef       	ldi	r28, 0xFF	; 255
     242:	d0 e2       	ldi	r29, 0x20	; 32
     244:	de bf       	out	0x3e, r29	; 62
     246:	cd bf       	out	0x3d, r28	; 61

00000248 <__do_copy_data>:
     248:	11 e0       	ldi	r17, 0x01	; 1
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b1 e0       	ldi	r27, 0x01	; 1
     24e:	ee e6       	ldi	r30, 0x6E	; 110
     250:	fa e1       	ldi	r31, 0x1A	; 26
     252:	00 e0       	ldi	r16, 0x00	; 0
     254:	0b bf       	out	0x3b, r16	; 59
     256:	02 c0       	rjmp	.+4      	; 0x25c <__do_copy_data+0x14>
     258:	07 90       	elpm	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	a8 33       	cpi	r26, 0x38	; 56
     25e:	b1 07       	cpc	r27, r17
     260:	d9 f7       	brne	.-10     	; 0x258 <__do_copy_data+0x10>

00000262 <__do_clear_bss>:
     262:	11 e0       	ldi	r17, 0x01	; 1
     264:	a8 e3       	ldi	r26, 0x38	; 56
     266:	b1 e0       	ldi	r27, 0x01	; 1
     268:	01 c0       	rjmp	.+2      	; 0x26c <.do_clear_bss_start>

0000026a <.do_clear_bss_loop>:
     26a:	1d 92       	st	X+, r1

0000026c <.do_clear_bss_start>:
     26c:	ac 34       	cpi	r26, 0x4C	; 76
     26e:	b1 07       	cpc	r27, r17
     270:	e1 f7       	brne	.-8      	; 0x26a <.do_clear_bss_loop>
     272:	0a d1       	rcall	.+532    	; 0x488 <main>
     274:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <_exit>

00000278 <__bad_interrupt>:
     278:	c3 ce       	rjmp	.-634    	; 0x0 <__vectors>

0000027a <EVENT_USB_Host_DeviceEnumerationComplete>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     27a:	8b b1       	in	r24, 0x0b	; 11
     27c:	8f 70       	andi	r24, 0x0F	; 15
     27e:	80 66       	ori	r24, 0x60	; 96
     280:	8b b9       	out	0x0b, r24	; 11
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     282:	08 95       	ret

00000284 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     284:	90 91 45 01 	lds	r25, 0x0145
     288:	2d b7       	in	r18, 0x3d	; 61
     28a:	3e b7       	in	r19, 0x3e	; 62
     28c:	28 50       	subi	r18, 0x08	; 8
     28e:	30 40       	sbci	r19, 0x00	; 0
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	f8 94       	cli
     294:	3e bf       	out	0x3e, r19	; 62
     296:	0f be       	out	0x3f, r0	; 63
     298:	2d bf       	out	0x3d, r18	; 61
     29a:	ed b7       	in	r30, 0x3d	; 61
     29c:	fe b7       	in	r31, 0x3e	; 62
     29e:	31 96       	adiw	r30, 0x01	; 1
     2a0:	28 e9       	ldi	r18, 0x98	; 152
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	ad b7       	in	r26, 0x3d	; 61
     2a6:	be b7       	in	r27, 0x3e	; 62
     2a8:	12 96       	adiw	r26, 0x02	; 2
     2aa:	3c 93       	st	X, r19
     2ac:	2e 93       	st	-X, r18
     2ae:	11 97       	sbiw	r26, 0x01	; 1
     2b0:	82 83       	std	Z+2, r24	; 0x02
     2b2:	13 82       	std	Z+3, r1	; 0x03
     2b4:	64 83       	std	Z+4, r22	; 0x04
     2b6:	15 82       	std	Z+5, r1	; 0x05
     2b8:	96 83       	std	Z+6, r25	; 0x06
     2ba:	17 82       	std	Z+7, r1	; 0x07
     2bc:	0e 94 45 0a 	call	0x148a	; 0x148a <printf_P>
     2c0:	8b b1       	in	r24, 0x0b	; 11
     2c2:	8f 70       	andi	r24, 0x0F	; 15
     2c4:	80 69       	ori	r24, 0x90	; 144
     2c6:	8b b9       	out	0x0b, r24	; 11
     2c8:	2d b7       	in	r18, 0x3d	; 61
     2ca:	3e b7       	in	r19, 0x3e	; 62
     2cc:	28 5f       	subi	r18, 0xF8	; 248
     2ce:	3f 4f       	sbci	r19, 0xFF	; 255
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	f8 94       	cli
     2d4:	3e bf       	out	0x3e, r19	; 62
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     2da:	08 95       	ret

000002dc <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     2dc:	1f 93       	push	r17
     2de:	18 2f       	mov	r17, r24
	USB_ShutDown();
     2e0:	5c d4       	rcall	.+2232   	; 0xb9a <USB_ShutDown>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     2e2:	00 d0       	rcall	.+0      	; 0x2e4 <EVENT_USB_Host_HostError+0x8>
     2e4:	00 d0       	rcall	.+0      	; 0x2e6 <EVENT_USB_Host_HostError+0xa>
     2e6:	ed b7       	in	r30, 0x3d	; 61
     2e8:	fe b7       	in	r31, 0x3e	; 62
     2ea:	31 96       	adiw	r30, 0x01	; 1
     2ec:	8e ee       	ldi	r24, 0xEE	; 238
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	ad b7       	in	r26, 0x3d	; 61
     2f2:	be b7       	in	r27, 0x3e	; 62
     2f4:	12 96       	adiw	r26, 0x02	; 2
     2f6:	9c 93       	st	X, r25
     2f8:	8e 93       	st	-X, r24
     2fa:	11 97       	sbiw	r26, 0x01	; 1
     2fc:	12 83       	std	Z+2, r17	; 0x02
     2fe:	13 82       	std	Z+3, r1	; 0x03
     300:	0e 94 45 0a 	call	0x148a	; 0x148a <printf_P>
     304:	8b b1       	in	r24, 0x0b	; 11
     306:	8f 70       	andi	r24, 0x0F	; 15
     308:	80 69       	ori	r24, 0x90	; 144
     30a:	8b b9       	out	0x0b, r24	; 11
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	0f 90       	pop	r0
     314:	ff cf       	rjmp	.-2      	; 0x314 <EVENT_USB_Host_HostError+0x38>

00000316 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     316:	8d e1       	ldi	r24, 0x1D	; 29
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <puts_P>
     31e:	8b b1       	in	r24, 0x0b	; 11
     320:	8f 70       	andi	r24, 0x0F	; 15
     322:	80 61       	ori	r24, 0x10	; 16
     324:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     326:	08 95       	ret

00000328 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     328:	84 e3       	ldi	r24, 0x34	; 52
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <puts_P>
     330:	8b b1       	in	r24, 0x0b	; 11
     332:	8f 70       	andi	r24, 0x0F	; 15
     334:	80 6a       	ori	r24, 0xA0	; 160
     336:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     338:	08 95       	ret

0000033a <CheckJoystickMovement>:
	Joystick_Init();
	USB_Init();
}

void CheckJoystickMovement(void)
{
     33a:	1f 93       	push	r17
     33c:	df 93       	push	r29
     33e:	cf 93       	push	r28
     340:	00 d0       	rcall	.+0      	; 0x342 <CheckJoystickMovement+0x8>
     342:	00 d0       	rcall	.+0      	; 0x344 <CheckJoystickMovement+0xa>
     344:	cd b7       	in	r28, 0x3d	; 61
     346:	de b7       	in	r29, 0x3e	; 62
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> 1));
     348:	13 b1       	in	r17, 0x03	; 3
     34a:	8c b1       	in	r24, 0x0c	; 12
     34c:	80 95       	com	r24
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	80 73       	andi	r24, 0x30	; 48
     352:	90 70       	andi	r25, 0x00	; 0
     354:	95 95       	asr	r25
     356:	87 95       	ror	r24
     358:	10 95       	com	r17
     35a:	10 7e       	andi	r17, 0xE0	; 224
     35c:	18 2b       	or	r17, r24
	uint8_t MIDICommand = 0;
	uint8_t MIDIPitch;

	/* Get current joystick mask, XOR with previous to detect joystick changes */
	uint8_t JoystickStatus  = Joystick_GetStatus();
	uint8_t JoystickChanges = (JoystickStatus ^ PrevJoystickStatus);
     35e:	80 91 38 01 	lds	r24, 0x0138
     362:	81 27       	eor	r24, r17

	/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
	uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));
     364:	62 9b       	sbis	0x0c, 2	; 12
     366:	02 c0       	rjmp	.+4      	; 0x36c <CheckJoystickMovement+0x32>
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	01 c0       	rjmp	.+2      	; 0x36e <CheckJoystickMovement+0x34>
     36c:	49 e0       	ldi	r20, 0x09	; 9

	if (JoystickChanges & JOY_LEFT)
     36e:	38 2f       	mov	r19, r24
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	86 ff       	sbrs	r24, 6
     374:	05 c0       	rjmp	.+10     	; 0x380 <CheckJoystickMovement+0x46>
	{
		MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     376:	16 fd       	sbrc	r17, 6
     378:	02 c0       	rjmp	.+4      	; 0x37e <CheckJoystickMovement+0x44>
     37a:	90 e8       	ldi	r25, 0x80	; 128
     37c:	01 c0       	rjmp	.+2      	; 0x380 <CheckJoystickMovement+0x46>
     37e:	90 e9       	ldi	r25, 0x90	; 144
		MIDIPitch   = 0x3C;
	}

	if (JoystickChanges & JOY_UP)
     380:	87 fd       	sbrc	r24, 7
     382:	02 c0       	rjmp	.+4      	; 0x388 <CheckJoystickMovement+0x4e>
     384:	2c e3       	ldi	r18, 0x3C	; 60
     386:	06 c0       	rjmp	.+12     	; 0x394 <CheckJoystickMovement+0x5a>
	{
		MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     388:	17 fd       	sbrc	r17, 7
     38a:	02 c0       	rjmp	.+4      	; 0x390 <CheckJoystickMovement+0x56>
     38c:	90 e8       	ldi	r25, 0x80	; 128
     38e:	01 c0       	rjmp	.+2      	; 0x392 <CheckJoystickMovement+0x58>
     390:	90 e9       	ldi	r25, 0x90	; 144
     392:	2d e3       	ldi	r18, 0x3D	; 61
		MIDIPitch   = 0x3D;
	}

	if (JoystickChanges & JOY_RIGHT)
     394:	33 ff       	sbrs	r19, 3
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <CheckJoystickMovement+0x6a>
	{
		MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     398:	13 fd       	sbrc	r17, 3
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <CheckJoystickMovement+0x66>
     39c:	90 e8       	ldi	r25, 0x80	; 128
     39e:	01 c0       	rjmp	.+2      	; 0x3a2 <CheckJoystickMovement+0x68>
     3a0:	90 e9       	ldi	r25, 0x90	; 144
     3a2:	2e e3       	ldi	r18, 0x3E	; 62
		MIDIPitch   = 0x3E;
	}

	if (JoystickChanges & JOY_DOWN)
     3a4:	34 ff       	sbrs	r19, 4
     3a6:	06 c0       	rjmp	.+12     	; 0x3b4 <CheckJoystickMovement+0x7a>
	{
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     3a8:	14 fd       	sbrc	r17, 4
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <CheckJoystickMovement+0x76>
     3ac:	90 e8       	ldi	r25, 0x80	; 128
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <CheckJoystickMovement+0x78>
     3b0:	90 e9       	ldi	r25, 0x90	; 144
     3b2:	2f e3       	ldi	r18, 0x3F	; 63
		MIDIPitch   = 0x3F;
	}

	if (JoystickChanges & JOY_PRESS)
     3b4:	35 ff       	sbrs	r19, 5
     3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <CheckJoystickMovement+0x86>
	{
		MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     3b8:	15 ff       	sbrs	r17, 5
     3ba:	20 c0       	rjmp	.+64     	; 0x3fc <CheckJoystickMovement+0xc2>
     3bc:	90 e9       	ldi	r25, 0x90	; 144
     3be:	1f c0       	rjmp	.+62     	; 0x3fe <CheckJoystickMovement+0xc4>
		MIDIPitch   = 0x3B;
	}

	if (MIDICommand)
     3c0:	99 23       	and	r25, r25
     3c2:	91 f0       	breq	.+36     	; 0x3e8 <CheckJoystickMovement+0xae>
				.Command     = (MIDICommand >> 4),

				.Data1       = MIDICommand | Channel,
				.Data2       = MIDIPitch,
				.Data3       = MIDI_STANDARD_VELOCITY,
			};
     3c4:	89 2f       	mov	r24, r25
     3c6:	82 95       	swap	r24
     3c8:	8f 70       	andi	r24, 0x0F	; 15
     3ca:	89 83       	std	Y+1, r24	; 0x01
     3cc:	94 2b       	or	r25, r20
     3ce:	9a 83       	std	Y+2, r25	; 0x02
     3d0:	2b 83       	std	Y+3, r18	; 0x03
     3d2:	80 e4       	ldi	r24, 0x40	; 64
     3d4:	8c 83       	std	Y+4, r24	; 0x04

		MIDI_Host_SendEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent);
     3d6:	87 e0       	ldi	r24, 0x07	; 7
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	be 01       	movw	r22, r28
     3dc:	6f 5f       	subi	r22, 0xFF	; 255
     3de:	7f 4f       	sbci	r23, 0xFF	; 255
     3e0:	21 d7       	rcall	.+3650   	; 0x1224 <MIDI_Host_SendEventPacket>
		MIDI_Host_Flush(&Keyboard_MIDI_Interface);
     3e2:	87 e0       	ldi	r24, 0x07	; 7
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	3f d7       	rcall	.+3710   	; 0x1266 <MIDI_Host_Flush>
	}

	PrevJoystickStatus = JoystickStatus;
     3e8:	10 93 38 01 	sts	0x0138, r17
}
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	0f 90       	pop	r0
     3f2:	0f 90       	pop	r0
     3f4:	cf 91       	pop	r28
     3f6:	df 91       	pop	r29
     3f8:	1f 91       	pop	r17
     3fa:	08 95       	ret
     3fc:	90 e8       	ldi	r25, 0x80	; 128
     3fe:	2b e3       	ldi	r18, 0x3B	; 59
     400:	e1 cf       	rjmp	.-62     	; 0x3c4 <CheckJoystickMovement+0x8a>

00000402 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     402:	84 b7       	in	r24, 0x34	; 52
     404:	87 7f       	andi	r24, 0xF7	; 247
     406:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     408:	38 e1       	ldi	r19, 0x18	; 24
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	f8 94       	cli
     40e:	30 93 60 00 	sts	0x0060, r19
     412:	10 92 60 00 	sts	0x0060, r1
     416:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	20 e8       	ldi	r18, 0x80	; 128
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	f8 94       	cli
     422:	20 93 61 00 	sts	0x0061, r18
     426:	80 93 61 00 	sts	0x0061, r24
     42a:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     42c:	83 e3       	ldi	r24, 0x33	; 51
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	90 93 cd 00 	sts	0x00CD, r25
     434:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     438:	86 e0       	ldi	r24, 0x06	; 6
     43a:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     43e:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     442:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     446:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     448:	5a 9a       	sbi	0x0b, 2	; 11
			static inline void SerialStream_Init(const uint32_t BaudRate,
			                                     const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);

				stdout = &USARTStream;
     44a:	8a e2       	ldi	r24, 0x2A	; 42
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	90 93 49 01 	sts	0x0149, r25
     452:	80 93 48 01 	sts	0x0148, r24
				stdin  = &USARTStream;
     456:	90 93 47 01 	sts	0x0147, r25
     45a:	80 93 46 01 	sts	0x0146, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     45e:	8a b1       	in	r24, 0x0a	; 10
     460:	80 6f       	ori	r24, 0xF0	; 240
     462:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     464:	8b b1       	in	r24, 0x0b	; 11
     466:	8f 70       	andi	r24, 0x0F	; 15
     468:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     46a:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     46c:	72 9a       	sbi	0x0e, 2	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     46e:	84 b1       	in	r24, 0x04	; 4
     470:	8f 71       	andi	r24, 0x1F	; 31
     472:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     474:	8d b1       	in	r24, 0x0d	; 13
     476:	8f 7c       	andi	r24, 0xCF	; 207
     478:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     47a:	85 b1       	in	r24, 0x05	; 5
     47c:	80 6e       	ori	r24, 0xE0	; 224
     47e:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     480:	8e b1       	in	r24, 0x0e	; 14
     482:	80 63       	ori	r24, 0x30	; 48
     484:	8e b9       	out	0x0e, r24	; 14
	SerialStream_Init(9600, false);
	LEDs_Init();
	Buttons_Init();
	Joystick_Init();
	USB_Init();
}
     486:	80 c3       	rjmp	.+1792   	; 0xb88 <USB_Init>

00000488 <main>:

/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
     488:	9f 92       	push	r9
     48a:	af 92       	push	r10
     48c:	bf 92       	push	r11
     48e:	cf 92       	push	r12
     490:	df 92       	push	r13
     492:	ef 92       	push	r14
     494:	ff 92       	push	r15
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	df 93       	push	r29
     49c:	cf 93       	push	r28
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	c6 50       	subi	r28, 0x06	; 6
     4a4:	d2 40       	sbci	r29, 0x02	; 2
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	f8 94       	cli
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	0f be       	out	0x3f, r0	; 63
     4ae:	cd bf       	out	0x3d, r28	; 61
	SetupHardware();
     4b0:	a8 df       	rcall	.-176    	; 0x402 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "MIDI Host Demo running.\r\n" ESC_FG_WHITE));
     4b2:	88 e1       	ldi	r24, 0x18	; 24
     4b4:	92 e0       	ldi	r25, 0x02	; 2
     4b6:	0e 94 67 0a 	call	0x14ce	; 0x14ce <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     4ba:	8b b1       	in	r24, 0x0b	; 11
     4bc:	8f 70       	andi	r24, 0x0F	; 15
     4be:	80 61       	ori	r24, 0x10	; 16
     4c0:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     4c2:	78 94       	sei
				LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

				uint16_t ConfigDescriptorSize;
				uint8_t  ConfigDescriptorData[512];

				if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     4c4:	8e 01       	movw	r16, r28
     4c6:	09 5f       	subi	r16, 0xF9	; 249
     4c8:	1f 4f       	sbci	r17, 0xFF	; 255
     4ca:	5e 01       	movw	r10, r28
     4cc:	08 94       	sec
     4ce:	a1 1c       	adc	r10, r1
     4d0:	b1 1c       	adc	r11, r1
					break;
				}

				puts_P(PSTR("MIDI Device Enumerated.\r\n"));
				LEDs_SetAllLEDs(LEDMASK_USB_READY);
				USB_HostState = HOST_STATE_Configured;
     4d2:	5c e0       	ldi	r21, 0x0C	; 12
     4d4:	95 2e       	mov	r9, r21
				break;
			case HOST_STATE_Configured:
				CheckJoystickMovement();

				MIDI_EventPacket_t MIDIEvent;
				while (MIDI_Host_ReceiveEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent))
     4d6:	43 e0       	ldi	r20, 0x03	; 3
     4d8:	c4 2e       	mov	r12, r20
     4da:	d1 2c       	mov	r13, r1
     4dc:	cc 0e       	add	r12, r28
     4de:	dd 1e       	adc	r13, r29
					bool NoteOnEvent  = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_ON  >> 4));
					bool NoteOffEvent = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_OFF >> 4));

					if (NoteOnEvent || NoteOffEvent)
					{
						printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
     4e0:	37 e4       	ldi	r19, 0x47	; 71
     4e2:	e3 2e       	mov	r14, r19
     4e4:	31 e0       	ldi	r19, 0x01	; 1
     4e6:	f3 2e       	mov	r15, r19
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();

	for (;;)
	{
		switch (USB_HostState)
     4e8:	80 91 45 01 	lds	r24, 0x0145
     4ec:	8b 30       	cpi	r24, 0x0B	; 11
     4ee:	21 f0       	breq	.+8      	; 0x4f8 <main+0x70>
     4f0:	8c 30       	cpi	r24, 0x0C	; 12
     4f2:	09 f0       	breq	.+2      	; 0x4f6 <main+0x6e>
     4f4:	74 c0       	rjmp	.+232    	; 0x5de <main+0x156>
     4f6:	32 c0       	rjmp	.+100    	; 0x55c <main+0xd4>
     4f8:	8b b1       	in	r24, 0x0b	; 11
     4fa:	8f 70       	andi	r24, 0x0F	; 15
     4fc:	80 6a       	ori	r24, 0xA0	; 160
     4fe:	8b b9       	out	0x0b, r24	; 11
				LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

				uint16_t ConfigDescriptorSize;
				uint8_t  ConfigDescriptorData[512];

				if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	b5 01       	movw	r22, r10
     504:	a8 01       	movw	r20, r16
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	32 e0       	ldi	r19, 0x02	; 2
     50a:	40 d4       	rcall	.+2176   	; 0xd8c <USB_Host_GetDeviceConfigDescriptor>
     50c:	88 23       	and	r24, r24
     50e:	19 f0       	breq	.+6      	; 0x516 <main+0x8e>
				                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
				{
					puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     510:	8b ee       	ldi	r24, 0xEB	; 235
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	0a c0       	rjmp	.+20     	; 0x52a <main+0xa2>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				if (MIDI_Host_ConfigurePipes(&Keyboard_MIDI_Interface,
     516:	69 81       	ldd	r22, Y+1	; 0x01
     518:	7a 81       	ldd	r23, Y+2	; 0x02
     51a:	87 e0       	ldi	r24, 0x07	; 7
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	a8 01       	movw	r20, r16
     520:	c8 d6       	rcall	.+3472   	; 0x12b2 <MIDI_Host_ConfigurePipes>
     522:	88 23       	and	r24, r24
     524:	51 f0       	breq	.+20     	; 0x53a <main+0xb2>
				                             ConfigDescriptorSize, ConfigDescriptorData) != MIDI_ENUMERROR_NoError)
				{
					puts_P(PSTR("Attached Device Not a Valid MIDI Class Device.\r\n"));
     526:	8a eb       	ldi	r24, 0xBA	; 186
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	d1 d7       	rcall	.+4002   	; 0x14ce <puts_P>
     52c:	8b b1       	in	r24, 0x0b	; 11
     52e:	8f 70       	andi	r24, 0x0F	; 15
     530:	80 69       	ori	r24, 0x90	; 144
     532:	8b b9       	out	0x0b, r24	; 11
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     534:	10 92 45 01 	sts	0x0145, r1
     538:	52 c0       	rjmp	.+164    	; 0x5de <main+0x156>
					break;
				}

				if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	ee d0       	rcall	.+476    	; 0x71a <USB_Host_SetDeviceConfiguration>
     53e:	88 23       	and	r24, r24
     540:	19 f0       	breq	.+6      	; 0x548 <main+0xc0>
				{
					puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     542:	84 e9       	ldi	r24, 0x94	; 148
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	f1 cf       	rjmp	.-30     	; 0x52a <main+0xa2>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				puts_P(PSTR("MIDI Device Enumerated.\r\n"));
     548:	8a e7       	ldi	r24, 0x7A	; 122
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	c0 d7       	rcall	.+3968   	; 0x14ce <puts_P>
     54e:	8b b1       	in	r24, 0x0b	; 11
     550:	8f 70       	andi	r24, 0x0F	; 15
     552:	80 66       	ori	r24, 0x60	; 96
     554:	8b b9       	out	0x0b, r24	; 11
				LEDs_SetAllLEDs(LEDMASK_USB_READY);
				USB_HostState = HOST_STATE_Configured;
     556:	90 92 45 01 	sts	0x0145, r9
     55a:	41 c0       	rjmp	.+130    	; 0x5de <main+0x156>
				break;
			case HOST_STATE_Configured:
				CheckJoystickMovement();
     55c:	ee de       	rcall	.-548    	; 0x33a <CheckJoystickMovement>
     55e:	38 c0       	rjmp	.+112    	; 0x5d0 <main+0x148>

				MIDI_EventPacket_t MIDIEvent;
				while (MIDI_Host_ReceiveEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent))
				{
					bool NoteOnEvent  = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_ON  >> 4));
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	8f 70       	andi	r24, 0x0F	; 15
     564:	90 e0       	ldi	r25, 0x00	; 0
					bool NoteOffEvent = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_OFF >> 4));

					if (NoteOnEvent || NoteOffEvent)
     566:	89 30       	cpi	r24, 0x09	; 9
     568:	91 05       	cpc	r25, r1
     56a:	19 f4       	brne	.+6      	; 0x572 <main+0xea>
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	04 c0       	rjmp	.+8      	; 0x57a <main+0xf2>
     572:	08 97       	sbiw	r24, 0x08	; 8
     574:	69 f5       	brne	.+90     	; 0x5d0 <main+0x148>
     576:	83 e0       	ldi	r24, 0x03	; 3
     578:	91 e0       	ldi	r25, 0x01	; 1
					{
						printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
     57a:	2d b7       	in	r18, 0x3d	; 61
     57c:	3e b7       	in	r19, 0x3e	; 62
     57e:	2a 50       	subi	r18, 0x0A	; 10
     580:	30 40       	sbci	r19, 0x00	; 0
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	f8 94       	cli
     586:	3e bf       	out	0x3e, r19	; 62
     588:	0f be       	out	0x3f, r0	; 63
     58a:	2d bf       	out	0x3d, r18	; 61
     58c:	ed b7       	in	r30, 0x3d	; 61
     58e:	fe b7       	in	r31, 0x3e	; 62
     590:	31 96       	adiw	r30, 0x01	; 1
     592:	ad b7       	in	r26, 0x3d	; 61
     594:	be b7       	in	r27, 0x3e	; 62
     596:	12 96       	adiw	r26, 0x02	; 2
     598:	fc 92       	st	X, r15
     59a:	ee 92       	st	-X, r14
     59c:	11 97       	sbiw	r26, 0x01	; 1
     59e:	93 83       	std	Z+3, r25	; 0x03
     5a0:	82 83       	std	Z+2, r24	; 0x02
     5a2:	8c 81       	ldd	r24, Y+4	; 0x04
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	8f 70       	andi	r24, 0x0F	; 15
     5a8:	90 70       	andi	r25, 0x00	; 0
     5aa:	01 96       	adiw	r24, 0x01	; 1
     5ac:	95 83       	std	Z+5, r25	; 0x05
     5ae:	84 83       	std	Z+4, r24	; 0x04
     5b0:	8d 81       	ldd	r24, Y+5	; 0x05
     5b2:	86 83       	std	Z+6, r24	; 0x06
     5b4:	17 82       	std	Z+7, r1	; 0x07
     5b6:	8e 81       	ldd	r24, Y+6	; 0x06
     5b8:	80 87       	std	Z+8, r24	; 0x08
     5ba:	11 86       	std	Z+9, r1	; 0x09
     5bc:	66 d7       	rcall	.+3788   	; 0x148a <printf_P>
     5be:	2d b7       	in	r18, 0x3d	; 61
     5c0:	3e b7       	in	r19, 0x3e	; 62
     5c2:	26 5f       	subi	r18, 0xF6	; 246
     5c4:	3f 4f       	sbci	r19, 0xFF	; 255
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	3e bf       	out	0x3e, r19	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	2d bf       	out	0x3d, r18	; 61
				break;
			case HOST_STATE_Configured:
				CheckJoystickMovement();

				MIDI_EventPacket_t MIDIEvent;
				while (MIDI_Host_ReceiveEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent))
     5d0:	87 e0       	ldi	r24, 0x07	; 7
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	b6 01       	movw	r22, r12
     5d6:	02 d6       	rcall	.+3076   	; 0x11dc <MIDI_Host_ReceiveEventPacket>
     5d8:	88 23       	and	r24, r24
     5da:	09 f0       	breq	.+2      	; 0x5de <main+0x156>
     5dc:	c1 cf       	rjmp	.-126    	; 0x560 <main+0xd8>
				}

				break;
		}

		MIDI_Host_USBTask(&Keyboard_MIDI_Interface);
     5de:	87 e0       	ldi	r24, 0x07	; 7
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	5c d6       	rcall	.+3256   	; 0x129c <MIDI_Host_USBTask>
		USB_USBTask();
     5e4:	db d5       	rcall	.+2998   	; 0x119c <USB_USBTask>
     5e6:	80 cf       	rjmp	.-256    	; 0x4e8 <main+0x60>

000005e8 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     5e8:	98 2f       	mov	r25, r24
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5ea:	20 91 9e 00 	lds	r18, 0x009E
	bool    BusSuspended = USB_Host_IsBusSuspended();
	uint8_t ErrorCode    = HOST_WAITERROR_Successful;
	bool    HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     5ee:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     5f2:	80 91 a0 00 	lds	r24, 0x00A0
     5f6:	8f 7d       	andi	r24, 0xDF	; 223
     5f8:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     5fc:	80 91 9f 00 	lds	r24, 0x009F
     600:	8f 7d       	andi	r24, 0xDF	; 223
     602:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     606:	80 91 9e 00 	lds	r24, 0x009E
     60a:	81 60       	ori	r24, 0x01	; 1
     60c:	80 93 9e 00 	sts	0x009E, r24
     610:	26 c0       	rjmp	.+76     	; 0x65e <USB_Host_WaitMS+0x76>

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     612:	80 91 9f 00 	lds	r24, 0x009F
     616:	85 ff       	sbrs	r24, 5
     618:	06 c0       	rjmp	.+12     	; 0x626 <USB_Host_WaitMS+0x3e>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     61a:	80 91 9f 00 	lds	r24, 0x009F
     61e:	8f 7d       	andi	r24, 0xDF	; 223
     620:	80 93 9f 00 	sts	0x009F, r24
			MS--;
     624:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     626:	80 91 45 01 	lds	r24, 0x0145
     62a:	82 30       	cpi	r24, 0x02	; 2
     62c:	11 f4       	brne	.+4      	; 0x632 <USB_Host_WaitMS+0x4a>
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	18 c0       	rjmp	.+48     	; 0x662 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if an error has occurred on the selected pipe, false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     632:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     636:	84 ff       	sbrs	r24, 4
     638:	07 c0       	rjmp	.+14     	; 0x648 <USB_Host_WaitMS+0x60>

			/** Clears the master pipe error flag. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPINTX &= ~(1 << PERRI);
     63a:	80 91 a6 00 	lds	r24, 0x00A6
     63e:	8f 7e       	andi	r24, 0xEF	; 239
     640:	80 93 a6 00 	sts	0x00A6, r24
     644:	92 e0       	ldi	r25, 0x02	; 2
     646:	0d c0       	rjmp	.+26     	; 0x662 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     648:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     64c:	81 ff       	sbrs	r24, 1
     64e:	07 c0       	rjmp	.+14     	; 0x65e <USB_Host_WaitMS+0x76>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     650:	80 91 a6 00 	lds	r24, 0x00A6
     654:	8d 7f       	andi	r24, 0xFD	; 253
     656:	80 93 a6 00 	sts	0x00A6, r24
     65a:	93 e0       	ldi	r25, 0x03	; 3
     65c:	02 c0       	rjmp	.+4      	; 0x662 <USB_Host_WaitMS+0x7a>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     65e:	99 23       	and	r25, r25
     660:	c1 f6       	brne	.-80     	; 0x612 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     662:	20 fd       	sbrc	r18, 0
     664:	05 c0       	rjmp	.+10     	; 0x670 <USB_Host_WaitMS+0x88>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     666:	80 91 9e 00 	lds	r24, 0x009E
     66a:	8e 7f       	andi	r24, 0xFE	; 254
     66c:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     670:	35 ff       	sbrs	r19, 5
     672:	05 c0       	rjmp	.+10     	; 0x67e <USB_Host_WaitMS+0x96>
	  USB_INT_Enable(USB_INT_HSOFI);
     674:	80 91 a0 00 	lds	r24, 0x00A0
     678:	80 62       	ori	r24, 0x20	; 32
     67a:	80 93 a0 00 	sts	0x00A0, r24

	return ErrorCode;
}
     67e:	89 2f       	mov	r24, r25
     680:	08 95       	ret

00000682 <USB_Host_ResetDevice>:
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     682:	60 91 9e 00 	lds	r22, 0x009E

static void USB_Host_ResetDevice(void)
{
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);
     686:	80 91 a0 00 	lds	r24, 0x00A0
     68a:	8d 7f       	andi	r24, 0xFD	; 253
     68c:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     690:	80 91 9e 00 	lds	r24, 0x009E
     694:	82 60       	ori	r24, 0x02	; 2
     696:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean true if no bus reset is currently being sent, false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     69a:	80 91 9e 00 	lds	r24, 0x009E

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     69e:	81 fd       	sbrc	r24, 1
     6a0:	fc cf       	rjmp	.-8      	; 0x69a <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6a2:	80 91 9e 00 	lds	r24, 0x009E
     6a6:	81 60       	ori	r24, 0x01	; 1
     6a8:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();

	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     6ac:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     6b0:	80 91 a0 00 	lds	r24, 0x00A0
     6b4:	8f 7d       	andi	r24, 0xDF	; 223
     6b6:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     6ba:	80 91 9f 00 	lds	r24, 0x009F
     6be:	8f 7d       	andi	r24, 0xDF	; 223
     6c0:	80 93 9f 00 	sts	0x009F, r24
     6c4:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6c6:	40 ed       	ldi	r20, 0xD0	; 208
     6c8:	57 e0       	ldi	r21, 0x07	; 7
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     6ca:	80 91 9f 00 	lds	r24, 0x009F
     6ce:	85 ff       	sbrs	r24, 5
     6d0:	0b c0       	rjmp	.+22     	; 0x6e8 <USB_Host_ResetDevice+0x66>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     6d2:	80 91 9f 00 	lds	r24, 0x009F
     6d6:	8f 7d       	andi	r24, 0xDF	; 223
     6d8:	80 93 9f 00 	sts	0x009F, r24
			USB_INT_Clear(USB_INT_DDISCI);
     6dc:	80 91 9f 00 	lds	r24, 0x009F
     6e0:	8d 7f       	andi	r24, 0xFD	; 253
     6e2:	80 93 9f 00 	sts	0x009F, r24
     6e6:	05 c0       	rjmp	.+10     	; 0x6f2 <USB_Host_ResetDevice+0x70>
     6e8:	ca 01       	movw	r24, r20
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <USB_Host_ResetDevice+0x68>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     6ee:	21 50       	subi	r18, 0x01	; 1
     6f0:	61 f7       	brne	.-40     	; 0x6ca <USB_Host_ResetDevice+0x48>
		}

		_delay_ms(1);
	}

	if (HSOFIEnabled)
     6f2:	35 ff       	sbrs	r19, 5
     6f4:	05 c0       	rjmp	.+10     	; 0x700 <USB_Host_ResetDevice+0x7e>
	  USB_INT_Enable(USB_INT_HSOFI);
     6f6:	80 91 a0 00 	lds	r24, 0x00A0
     6fa:	80 62       	ori	r24, 0x20	; 32
     6fc:	80 93 a0 00 	sts	0x00A0, r24

	if (BusSuspended)
     700:	60 fd       	sbrc	r22, 0
     702:	05 c0       	rjmp	.+10     	; 0x70e <USB_Host_ResetDevice+0x8c>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     704:	80 91 9e 00 	lds	r24, 0x009E
     708:	8e 7f       	andi	r24, 0xFE	; 254
     70a:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
     70e:	80 91 a0 00 	lds	r24, 0x00A0
     712:	82 60       	ori	r24, 0x02	; 2
     714:	80 93 a0 00 	sts	0x00A0, r24
}
     718:	08 95       	ret

0000071a <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	USB_ControlRequest = (USB_Request_Header_t)
     71a:	10 92 3d 01 	sts	0x013D, r1
     71e:	99 e0       	ldi	r25, 0x09	; 9
     720:	90 93 3e 01 	sts	0x013E, r25
     724:	80 93 3f 01 	sts	0x013F, r24
     728:	10 92 40 01 	sts	0x0140, r1
     72c:	10 92 42 01 	sts	0x0142, r1
     730:	10 92 41 01 	sts	0x0141, r1
     734:	10 92 44 01 	sts	0x0144, r1
     738:	10 92 43 01 	sts	0x0143, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     73c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	90 e0       	ldi	r25, 0x00	; 0
}
     744:	a7 c3       	rjmp	.+1870   	; 0xe94 <USB_Host_SendControlRequest>

00000746 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "Host.h"

void USB_Host_ProcessNextHostState(void)
{
     746:	ef 92       	push	r14
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	df 93       	push	r29
     74e:	cf 93       	push	r28
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	28 97       	sbiw	r28, 0x08	; 8
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	de bf       	out	0x3e, r29	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     760:	80 91 45 01 	lds	r24, 0x0145
     764:	86 30       	cpi	r24, 0x06	; 6
     766:	09 f4       	brne	.+2      	; 0x76a <USB_Host_ProcessNextHostState+0x24>
     768:	94 c0       	rjmp	.+296    	; 0x892 <USB_Host_ProcessNextHostState+0x14c>
     76a:	87 30       	cpi	r24, 0x07	; 7
     76c:	70 f4       	brcc	.+28     	; 0x78a <USB_Host_ProcessNextHostState+0x44>
     76e:	83 30       	cpi	r24, 0x03	; 3
     770:	c1 f1       	breq	.+112    	; 0x7e2 <USB_Host_ProcessNextHostState+0x9c>
     772:	84 30       	cpi	r24, 0x04	; 4
     774:	20 f4       	brcc	.+8      	; 0x77e <USB_Host_ProcessNextHostState+0x38>
     776:	81 30       	cpi	r24, 0x01	; 1
     778:	09 f0       	breq	.+2      	; 0x77c <USB_Host_ProcessNextHostState+0x36>
     77a:	07 c1       	rjmp	.+526    	; 0x98a <USB_Host_ProcessNextHostState+0x244>
     77c:	13 c0       	rjmp	.+38     	; 0x7a4 <USB_Host_ProcessNextHostState+0x5e>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	c1 f1       	breq	.+112    	; 0x7f2 <USB_Host_ProcessNextHostState+0xac>
     782:	85 30       	cpi	r24, 0x05	; 5
     784:	09 f0       	breq	.+2      	; 0x788 <USB_Host_ProcessNextHostState+0x42>
     786:	01 c1       	rjmp	.+514    	; 0x98a <USB_Host_ProcessNextHostState+0x244>
     788:	5b c0       	rjmp	.+182    	; 0x840 <USB_Host_ProcessNextHostState+0xfa>
     78a:	88 30       	cpi	r24, 0x08	; 8
     78c:	09 f4       	brne	.+2      	; 0x790 <USB_Host_ProcessNextHostState+0x4a>
     78e:	9b c0       	rjmp	.+310    	; 0x8c6 <USB_Host_ProcessNextHostState+0x180>
     790:	88 30       	cpi	r24, 0x08	; 8
     792:	08 f4       	brcc	.+2      	; 0x796 <USB_Host_ProcessNextHostState+0x50>
     794:	8a c0       	rjmp	.+276    	; 0x8aa <USB_Host_ProcessNextHostState+0x164>
     796:	89 30       	cpi	r24, 0x09	; 9
     798:	09 f4       	brne	.+2      	; 0x79c <USB_Host_ProcessNextHostState+0x56>
     79a:	b4 c0       	rjmp	.+360    	; 0x904 <USB_Host_ProcessNextHostState+0x1be>
     79c:	8a 30       	cpi	r24, 0x0A	; 10
     79e:	09 f0       	breq	.+2      	; 0x7a2 <USB_Host_ProcessNextHostState+0x5c>
     7a0:	f4 c0       	rjmp	.+488    	; 0x98a <USB_Host_ProcessNextHostState+0x244>
     7a2:	d9 c0       	rjmp	.+434    	; 0x956 <USB_Host_ProcessNextHostState+0x210>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     7a4:	00 91 3a 01 	lds	r16, 0x013A
     7a8:	10 91 3b 01 	lds	r17, 0x013B
     7ac:	01 15       	cp	r16, r1
     7ae:	11 05       	cpc	r17, r1
     7b0:	09 f4       	brne	.+2      	; 0x7b4 <USB_Host_ProcessNextHostState+0x6e>
     7b2:	eb c0       	rjmp	.+470    	; 0x98a <USB_Host_ProcessNextHostState+0x244>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	18 df       	rcall	.-464    	; 0x5e8 <USB_Host_WaitMS>
     7b8:	68 2f       	mov	r22, r24
     7ba:	88 23       	and	r24, r24
     7bc:	31 f0       	breq	.+12     	; 0x7ca <USB_Host_ProcessNextHostState+0x84>
				{
					USB_HostState = PostWaitState;
     7be:	80 91 39 01 	lds	r24, 0x0139
     7c2:	80 93 45 01 	sts	0x0145, r24
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	dc c0       	rjmp	.+440    	; 0x982 <USB_Host_ProcessNextHostState+0x23c>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     7ca:	c8 01       	movw	r24, r16
     7cc:	01 97       	sbiw	r24, 0x01	; 1
     7ce:	90 93 3b 01 	sts	0x013B, r25
     7d2:	80 93 3a 01 	sts	0x013A, r24
     7d6:	89 2b       	or	r24, r25
     7d8:	09 f0       	breq	.+2      	; 0x7dc <USB_Host_ProcessNextHostState+0x96>
     7da:	d7 c0       	rjmp	.+430    	; 0x98a <USB_Host_ProcessNextHostState+0x244>
				  USB_HostState = PostWaitState;
     7dc:	80 91 39 01 	lds	r24, 0x0139
     7e0:	bf c0       	rjmp	.+382    	; 0x960 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     7e2:	88 ee       	ldi	r24, 0xE8	; 232
     7e4:	93 e0       	ldi	r25, 0x03	; 3
     7e6:	90 93 3b 01 	sts	0x013B, r25
     7ea:	80 93 3a 01 	sts	0x013A, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     7ee:	84 e0       	ldi	r24, 0x04	; 4
     7f0:	b7 c0       	rjmp	.+366    	; 0x960 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     7f2:	80 91 3a 01 	lds	r24, 0x013A
     7f6:	90 91 3b 01 	lds	r25, 0x013B
     7fa:	01 97       	sbiw	r24, 0x01	; 1
     7fc:	90 93 3b 01 	sts	0x013B, r25
     800:	80 93 3a 01 	sts	0x013A, r24
     804:	01 96       	adiw	r24, 0x01	; 1
     806:	29 f0       	breq	.+10     	; 0x812 <USB_Host_ProcessNextHostState+0xcc>
     808:	80 ed       	ldi	r24, 0xD0	; 208
     80a:	97 e0       	ldi	r25, 0x07	; 7
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	f1 f7       	brne	.-4      	; 0x80c <USB_Host_ProcessNextHostState+0xc6>
     810:	bc c0       	rjmp	.+376    	; 0x98a <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     812:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     814:	80 91 d8 00 	lds	r24, 0x00D8
     818:	80 61       	ori	r24, 0x10	; 16
     81a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     81e:	80 91 dd 00 	lds	r24, 0x00DD
     822:	8b 7f       	andi	r24, 0xFB	; 251
     824:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     828:	80 91 d7 00 	lds	r24, 0x00D7
     82c:	80 61       	ori	r24, 0x10	; 16
     82e:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     832:	80 91 dd 00 	lds	r24, 0x00DD
     836:	82 60       	ori	r24, 0x02	; 2
     838:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     83c:	85 e0       	ldi	r24, 0x05	; 5
     83e:	90 c0       	rjmp	.+288    	; 0x960 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     840:	80 91 9f 00 	lds	r24, 0x009F
     844:	80 ff       	sbrs	r24, 0
     846:	a1 c0       	rjmp	.+322    	; 0x98a <USB_Host_ProcessNextHostState+0x244>
			{
				USB_INT_Clear(USB_INT_DCONNI);
     848:	80 91 9f 00 	lds	r24, 0x009F
     84c:	8e 7f       	andi	r24, 0xFE	; 254
     84e:	80 93 9f 00 	sts	0x009F, r24
				USB_INT_Clear(USB_INT_DDISCI);
     852:	80 91 9f 00 	lds	r24, 0x009F
     856:	8d 7f       	andi	r24, 0xFD	; 253
     858:	80 93 9f 00 	sts	0x009F, r24

				USB_INT_Clear(USB_INT_VBERRI);
     85c:	80 91 df 00 	lds	r24, 0x00DF
     860:	8d 7f       	andi	r24, 0xFD	; 253
     862:	80 93 df 00 	sts	0x00DF, r24
				USB_INT_Enable(USB_INT_VBERRI);
     866:	80 91 de 00 	lds	r24, 0x00DE
     86a:	82 60       	ori	r24, 0x02	; 2
     86c:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     870:	80 91 9e 00 	lds	r24, 0x009E
     874:	81 60       	ori	r24, 0x01	; 1
     876:	80 93 9e 00 	sts	0x009E, r24

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     87a:	c9 d0       	rcall	.+402    	; 0xa0e <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	80 93 45 01 	sts	0x0145, r24
     882:	84 e6       	ldi	r24, 0x64	; 100
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	90 93 3b 01 	sts	0x013B, r25
     88a:	80 93 3a 01 	sts	0x013A, r24
     88e:	86 e0       	ldi	r24, 0x06	; 6
     890:	5f c0       	rjmp	.+190    	; 0x950 <USB_Host_ProcessNextHostState+0x20a>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     892:	f7 de       	rcall	.-530    	; 0x682 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	80 93 45 01 	sts	0x0145, r24
     89a:	88 ec       	ldi	r24, 0xC8	; 200
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	90 93 3b 01 	sts	0x013B, r25
     8a2:	80 93 3a 01 	sts	0x013A, r24
     8a6:	87 e0       	ldi	r24, 0x07	; 7
     8a8:	53 c0       	rjmp	.+166    	; 0x950 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	60 e0       	ldi	r22, 0x00	; 0
     8ae:	40 e0       	ldi	r20, 0x00	; 0
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	00 e4       	ldi	r16, 0x40	; 64
     8b4:	10 e0       	ldi	r17, 0x00	; 0
     8b6:	ee 24       	eor	r14, r14
     8b8:	74 d0       	rcall	.+232    	; 0x9a2 <Pipe_ConfigurePipe>
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     8ba:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     8be:	87 ff       	sbrs	r24, 7
     8c0:	5e c0       	rjmp	.+188    	; 0x97e <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     8c2:	88 e0       	ldi	r24, 0x08	; 8
     8c4:	4d c0       	rjmp	.+154    	; 0x960 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     8c6:	ad e3       	ldi	r26, 0x3D	; 61
     8c8:	b1 e0       	ldi	r27, 0x01	; 1
     8ca:	e1 e2       	ldi	r30, 0x21	; 33
     8cc:	f1 e0       	ldi	r31, 0x01	; 1
     8ce:	88 e0       	ldi	r24, 0x08	; 8
     8d0:	01 90       	ld	r0, Z+
     8d2:	0d 92       	st	X+, r0
     8d4:	81 50       	subi	r24, 0x01	; 1
     8d6:	e1 f7       	brne	.-8      	; 0x8d0 <USB_Host_ProcessNextHostState+0x18a>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     8d8:	ce 01       	movw	r24, r28
     8da:	01 96       	adiw	r24, 0x01	; 1
     8dc:	db d2       	rcall	.+1462   	; 0xe94 <USB_Host_SendControlRequest>
     8de:	68 2f       	mov	r22, r24
     8e0:	88 23       	and	r24, r24
     8e2:	09 f0       	breq	.+2      	; 0x8e6 <USB_Host_ProcessNextHostState+0x1a0>
     8e4:	4a c0       	rjmp	.+148    	; 0x97a <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     8e6:	88 85       	ldd	r24, Y+8	; 0x08
     8e8:	80 93 29 01 	sts	0x0129, r24

			USB_Host_ResetDevice();
     8ec:	ca de       	rcall	.-620    	; 0x682 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	80 93 45 01 	sts	0x0145, r24
     8f4:	88 ec       	ldi	r24, 0xC8	; 200
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	90 93 3b 01 	sts	0x013B, r25
     8fc:	80 93 3a 01 	sts	0x013A, r24
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	26 c0       	rjmp	.+76     	; 0x950 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     904:	00 91 29 01 	lds	r16, 0x0129
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	40 e0       	ldi	r20, 0x00	; 0
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	10 e0       	ldi	r17, 0x00	; 0
     912:	ee 24       	eor	r14, r14
     914:	46 d0       	rcall	.+140    	; 0x9a2 <Pipe_ConfigurePipe>
     916:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     91a:	87 ff       	sbrs	r24, 7
     91c:	30 c0       	rjmp	.+96     	; 0x97e <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     91e:	ad e3       	ldi	r26, 0x3D	; 61
     920:	b1 e0       	ldi	r27, 0x01	; 1
     922:	e9 e1       	ldi	r30, 0x19	; 25
     924:	f1 e0       	ldi	r31, 0x01	; 1
     926:	88 e0       	ldi	r24, 0x08	; 8
     928:	01 90       	ld	r0, Z+
     92a:	0d 92       	st	X+, r0
     92c:	81 50       	subi	r24, 0x01	; 1
     92e:	e1 f7       	brne	.-8      	; 0x928 <USB_Host_ProcessNextHostState+0x1e2>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	af d2       	rcall	.+1374   	; 0xe94 <USB_Host_SendControlRequest>
     936:	68 2f       	mov	r22, r24
     938:	88 23       	and	r24, r24
     93a:	f9 f4       	brne	.+62     	; 0x97a <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	80 93 45 01 	sts	0x0145, r24
     942:	84 e6       	ldi	r24, 0x64	; 100
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	90 93 3b 01 	sts	0x013B, r25
     94a:	80 93 3a 01 	sts	0x013A, r24
     94e:	8a e0       	ldi	r24, 0x0A	; 10
     950:	80 93 39 01 	sts	0x0139, r24
     954:	1a c0       	rjmp	.+52     	; 0x98a <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			EVENT_USB_Host_DeviceEnumerationComplete();
     95c:	8e dc       	rcall	.-1764   	; 0x27a <EVENT_USB_Host_DeviceEnumerationComplete>
			USB_HostState = HOST_STATE_Addressed;
     95e:	8b e0       	ldi	r24, 0x0B	; 11
     960:	80 93 45 01 	sts	0x0145, r24
     964:	12 c0       	rjmp	.+36     	; 0x98a <USB_Host_ProcessNextHostState+0x244>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     966:	89 2f       	mov	r24, r25
     968:	8d dc       	rcall	.-1766   	; 0x284 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     96a:	80 91 dd 00 	lds	r24, 0x00DD
     96e:	81 60       	ori	r24, 0x01	; 1
     970:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     974:	d0 dc       	rcall	.-1632   	; 0x316 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     976:	ba d0       	rcall	.+372    	; 0xaec <USB_ResetInterface>
     978:	08 c0       	rjmp	.+16     	; 0x98a <USB_Host_ProcessNextHostState+0x244>
	}
}
     97a:	93 e0       	ldi	r25, 0x03	; 3
     97c:	02 c0       	rjmp	.+4      	; 0x982 <USB_Host_ProcessNextHostState+0x23c>
     97e:	94 e0       	ldi	r25, 0x04	; 4
     980:	60 e0       	ldi	r22, 0x00	; 0
			EVENT_USB_Host_DeviceEnumerationComplete();
			USB_HostState = HOST_STATE_Addressed;
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     982:	80 91 45 01 	lds	r24, 0x0145
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	71 f7       	brne	.-36     	; 0x966 <USB_Host_ProcessNextHostState+0x220>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     98a:	28 96       	adiw	r28, 0x08	; 8
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	f8 94       	cli
     990:	de bf       	out	0x3e, r29	; 62
     992:	0f be       	out	0x3f, r0	; 63
     994:	cd bf       	out	0x3d, r28	; 61
     996:	cf 91       	pop	r28
     998:	df 91       	pop	r29
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	ef 90       	pop	r14
     9a0:	08 95       	ret

000009a2 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     9a2:	ef 92       	push	r14
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	9e 2d       	mov	r25, r14
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9aa:	80 93 a7 00 	sts	0x00A7, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     9ae:	80 91 a9 00 	lds	r24, 0x00A9
     9b2:	81 60       	ori	r24, 0x01	; 1
     9b4:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SelectPipe(Number);
	Pipe_EnablePipe();

	UPCFG1X = 0;
     9b8:	10 92 ab 00 	sts	0x00AB, r1

	UPCFG0X = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     9bc:	62 95       	swap	r22
     9be:	66 0f       	add	r22, r22
     9c0:	66 0f       	add	r22, r22
     9c2:	60 7c       	andi	r22, 0xC0	; 192
     9c4:	64 2b       	or	r22, r20
     9c6:	2f 70       	andi	r18, 0x0F	; 15
     9c8:	62 2b       	or	r22, r18
     9ca:	60 93 aa 00 	sts	0x00AA, r22
     9ce:	28 e0       	ldi	r18, 0x08	; 8
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	03 c0       	rjmp	.+6      	; 0x9dc <Pipe_ConfigurePipe+0x3a>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     9d6:	8f 5f       	subi	r24, 0xFF	; 255
					CheckBytes <<= 1;
     9d8:	22 0f       	add	r18, r18
     9da:	33 1f       	adc	r19, r19
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     9dc:	20 17       	cp	r18, r16
     9de:	31 07       	cpc	r19, r17
     9e0:	10 f4       	brcc	.+4      	; 0x9e6 <Pipe_ConfigurePipe+0x44>
     9e2:	85 30       	cpi	r24, 0x05	; 5
     9e4:	c1 f7       	brne	.-16     	; 0x9d6 <Pipe_ConfigurePipe+0x34>
	UPCFG1X = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9e6:	92 60       	ori	r25, 0x02	; 2
     9e8:	82 95       	swap	r24
     9ea:	80 7f       	andi	r24, 0xF0	; 240
     9ec:	89 2b       	or	r24, r25
     9ee:	80 93 ab 00 	sts	0x00AB, r24

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     9f2:	80 91 a9 00 	lds	r24, 0x00A9
     9f6:	80 62       	ori	r24, 0x20	; 32
     9f8:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9fc:	80 91 ac 00 	lds	r24, 0x00AC

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
}
     a00:	88 1f       	adc	r24, r24
     a02:	88 27       	eor	r24, r24
     a04:	88 1f       	adc	r24, r24
     a06:	1f 91       	pop	r17
     a08:	0f 91       	pop	r16
     a0a:	ef 90       	pop	r14
     a0c:	08 95       	ret

00000a0e <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     a0e:	10 92 f8 00 	sts	0x00F8, r1
     a12:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a14:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     a18:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     a1c:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     a20:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a24:	80 91 a9 00 	lds	r24, 0x00A9
     a28:	8e 7f       	andi	r24, 0xFE	; 254
     a2a:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a2e:	9f 5f       	subi	r25, 0xFF	; 255
     a30:	97 30       	cpi	r25, 0x07	; 7
     a32:	81 f7       	brne	.-32     	; 0xa14 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     a34:	08 95       	ret

00000a36 <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     a36:	e8 2f       	mov	r30, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     a38:	70 91 a7 00 	lds	r23, 0x00A7
     a3c:	60 e0       	ldi	r22, 0x00	; 0
		bool    PipeTokenCorrect = true;

		if (PipeToken != PIPE_TOKEN_SETUP)
		  PipeTokenCorrect = (PipeToken == ((EndpointAddress & PIPE_EPDIR_MASK) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT));

		if (PipeTokenCorrect && (Pipe_BoundEndpointNumber() == (EndpointAddress & PIPE_EPNUM_MASK)))
     a3e:	48 2f       	mov	r20, r24
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	4f 70       	andi	r20, 0x0F	; 15
     a44:	50 70       	andi	r21, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a46:	60 93 a7 00 	sts	0x00A7, r22
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a4a:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     a4e:	87 ff       	sbrs	r24, 7
     a50:	18 c0       	rjmp	.+48     	; 0xa82 <Pipe_IsEndpointBound+0x4c>
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a52:	80 91 aa 00 	lds	r24, 0x00AA
     a56:	80 73       	andi	r24, 0x30	; 48
		  continue;

		uint8_t PipeToken        = Pipe_GetPipeToken();
		bool    PipeTokenCorrect = true;

		if (PipeToken != PIPE_TOKEN_SETUP)
     a58:	59 f0       	breq	.+22     	; 0xa70 <Pipe_IsEndpointBound+0x3a>
		  PipeTokenCorrect = (PipeToken == ((EndpointAddress & PIPE_EPDIR_MASK) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT));
     a5a:	e7 fd       	sbrc	r30, 7
     a5c:	03 c0       	rjmp	.+6      	; 0xa64 <Pipe_IsEndpointBound+0x2e>
     a5e:	20 e2       	ldi	r18, 0x20	; 32
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <Pipe_IsEndpointBound+0x32>
     a64:	20 e1       	ldi	r18, 0x10	; 16
     a66:	30 e0       	ldi	r19, 0x00	; 0

		if (PipeTokenCorrect && (Pipe_BoundEndpointNumber() == (EndpointAddress & PIPE_EPNUM_MASK)))
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	82 17       	cp	r24, r18
     a6c:	93 07       	cpc	r25, r19
     a6e:	49 f4       	brne	.+18     	; 0xa82 <Pipe_IsEndpointBound+0x4c>
			 *  \return Endpoint number the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_BoundEndpointNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BoundEndpointNumber(void)
			{
				return ((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK);
     a70:	80 91 aa 00 	lds	r24, 0x00AA
     a74:	8f 70       	andi	r24, 0x0F	; 15
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	84 17       	cp	r24, r20
     a7a:	95 07       	cpc	r25, r21
     a7c:	11 f4       	brne	.+4      	; 0xa82 <Pipe_IsEndpointBound+0x4c>
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a82:	6f 5f       	subi	r22, 0xFF	; 255
     a84:	67 30       	cpi	r22, 0x07	; 7
     a86:	f9 f6       	brne	.-66     	; 0xa46 <Pipe_IsEndpointBound+0x10>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     a88:	77 70       	andi	r23, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a8a:	70 93 a7 00 	sts	0x00A7, r23
     a8e:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     a90:	08 95       	ret

00000a92 <Pipe_WaitUntilReady>:
			/** Returns the current USB frame number, when in host mode. Every millisecond the USB bus is active (i.e. not suspended)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     a92:	40 91 a2 00 	lds	r20, 0x00A2
     a96:	50 91 a3 00 	lds	r21, 0x00A3
     a9a:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a9c:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     aa0:	80 73       	andi	r24, 0x30	; 48
     aa2:	80 31       	cpi	r24, 0x10	; 16
     aa4:	29 f4       	brne	.+10     	; 0xab0 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     aa6:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     aaa:	80 ff       	sbrs	r24, 0
     aac:	05 c0       	rjmp	.+10     	; 0xab8 <Pipe_WaitUntilReady+0x26>
     aae:	1c c0       	rjmp	.+56     	; 0xae8 <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     ab0:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     ab4:	82 fd       	sbrc	r24, 2
     ab6:	18 c0       	rjmp	.+48     	; 0xae8 <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     ab8:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     abc:	81 ff       	sbrs	r24, 1
     abe:	02 c0       	rjmp	.+4      	; 0xac4 <Pipe_WaitUntilReady+0x32>
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     ac4:	80 91 45 01 	lds	r24, 0x0145
     ac8:	82 30       	cpi	r24, 0x02	; 2
     aca:	79 f0       	breq	.+30     	; 0xaea <Pipe_WaitUntilReady+0x58>
     acc:	80 91 a2 00 	lds	r24, 0x00A2
     ad0:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     ad4:	84 17       	cp	r24, r20
     ad6:	95 07       	cpc	r25, r21
     ad8:	09 f3       	breq	.-62     	; 0xa9c <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     ada:	22 23       	and	r18, r18
     adc:	11 f4       	brne	.+4      	; 0xae2 <Pipe_WaitUntilReady+0x50>
     ade:	83 e0       	ldi	r24, 0x03	; 3
     ae0:	08 95       	ret
     ae2:	21 50       	subi	r18, 0x01	; 1
     ae4:	ac 01       	movw	r20, r24
     ae6:	da cf       	rjmp	.-76     	; 0xa9c <Pipe_WaitUntilReady+0xa>
     ae8:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     aea:	08 95       	ret

00000aec <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     aec:	6e d0       	rcall	.+220    	; 0xbca <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     aee:	75 d0       	rcall	.+234    	; 0xbda <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     af0:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
     af4:	98 2f       	mov	r25, r24
     af6:	9f 77       	andi	r25, 0x7F	; 127
     af8:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
     afc:	80 68       	ori	r24, 0x80	; 128
     afe:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     b02:	8c e0       	ldi	r24, 0x0C	; 12
     b04:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     b06:	89 b5       	in	r24, 0x29	; 41
     b08:	82 60       	ori	r24, 0x02	; 2
     b0a:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     b0c:	09 b4       	in	r0, 0x29	; 41
     b0e:	00 fe       	sbrs	r0, 0
     b10:	fd cf       	rjmp	.-6      	; 0xb0c <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     b12:	80 91 d8 00 	lds	r24, 0x00D8
     b16:	8f 7d       	andi	r24, 0xDF	; 223
     b18:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     b1c:	80 91 d7 00 	lds	r24, 0x00D7
     b20:	8f 77       	andi	r24, 0x7F	; 127
     b22:	80 93 d7 00 	sts	0x00D7, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState       = HOST_STATE_Unattached;
     b26:	82 e0       	ldi	r24, 0x02	; 2
     b28:	80 93 45 01 	sts	0x0145, r24
	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     b2c:	80 e4       	ldi	r24, 0x40	; 64
     b2e:	80 93 29 01 	sts	0x0129, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     b32:	80 91 d8 00 	lds	r24, 0x00D8
     b36:	80 64       	ori	r24, 0x40	; 64
     b38:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b3c:	80 91 dd 00 	lds	r24, 0x00DD
     b40:	81 60       	ori	r24, 0x01	; 1
     b42:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     b46:	80 91 dd 00 	lds	r24, 0x00DD
     b4a:	84 60       	ori	r24, 0x04	; 4
     b4c:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     b50:	80 91 d7 00 	lds	r24, 0x00D7
     b54:	8f 7e       	andi	r24, 0xEF	; 239
     b56:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     b5a:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     b5c:	77 9a       	sbi	0x0e, 7	; 14

	USB_Host_VBUS_Auto_Off();
	USB_Host_VBUS_Manual_Enable();
	USB_Host_VBUS_Manual_On();

	USB_INT_Enable(USB_INT_SRPI);
     b5e:	80 91 de 00 	lds	r24, 0x00DE
     b62:	81 60       	ori	r24, 0x01	; 1
     b64:	80 93 de 00 	sts	0x00DE, r24
	USB_INT_Enable(USB_INT_BCERRI);
     b68:	80 91 de 00 	lds	r24, 0x00DE
     b6c:	84 60       	ori	r24, 0x04	; 4
     b6e:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b72:	80 91 e0 00 	lds	r24, 0x00E0
     b76:	8e 7f       	andi	r24, 0xFE	; 254
     b78:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     b7c:	80 91 d8 00 	lds	r24, 0x00D8
     b80:	80 61       	ori	r24, 0x10	; 16
     b82:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     b86:	08 95       	ret

00000b88 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     b88:	e7 ed       	ldi	r30, 0xD7	; 215
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	81 60       	ori	r24, 0x01	; 1
     b90:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	80 93 3c 01 	sts	0x013C, r24

	USB_ResetInterface();
}
     b98:	a9 cf       	rjmp	.-174    	; 0xaec <USB_ResetInterface>

00000b9a <USB_ShutDown>:

void USB_ShutDown(void)
{
	USB_INT_DisableAllInterrupts();
     b9a:	17 d0       	rcall	.+46     	; 0xbca <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b9c:	1e d0       	rcall	.+60     	; 0xbda <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     b9e:	e0 ee       	ldi	r30, 0xE0	; 224
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	81 60       	ori	r24, 0x01	; 1
     ba6:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     ba8:	a8 ed       	ldi	r26, 0xD8	; 216
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	8c 91       	ld	r24, X
     bae:	8f 77       	andi	r24, 0x7F	; 127
     bb0:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     bb2:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     bb4:	e7 ed       	ldi	r30, 0xD7	; 215
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8e 7f       	andi	r24, 0xFE	; 254
     bbc:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     bbe:	8c 91       	ld	r24, X
     bc0:	8f 7e       	andi	r24, 0xEF	; 239
     bc2:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     bc4:	10 92 3c 01 	sts	0x013C, r1
}
     bc8:	08 95       	ret

00000bca <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     bca:	e8 ed       	ldi	r30, 0xD8	; 216
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	8c 7f       	andi	r24, 0xFC	; 252
     bd2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     bd4:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     bd8:	08 95       	ret

00000bda <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
     bda:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
     bde:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
	#endif
}
     be2:	08 95       	ret

00000be4 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     be4:	1f 92       	push	r1
     be6:	0f 92       	push	r0
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	0f 92       	push	r0
     bec:	0b b6       	in	r0, 0x3b	; 59
     bee:	0f 92       	push	r0
     bf0:	11 24       	eor	r1, r1
     bf2:	2f 93       	push	r18
     bf4:	3f 93       	push	r19
     bf6:	4f 93       	push	r20
     bf8:	5f 93       	push	r21
     bfa:	6f 93       	push	r22
     bfc:	7f 93       	push	r23
     bfe:	8f 93       	push	r24
     c00:	9f 93       	push	r25
     c02:	af 93       	push	r26
     c04:	bf 93       	push	r27
     c06:	ef 93       	push	r30
     c08:	ff 93       	push	r31
	}
	#endif
	#endif

	#if defined(USB_CAN_BE_HOST)
	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     c0a:	80 91 9f 00 	lds	r24, 0x009F
     c0e:	81 ff       	sbrs	r24, 1
     c10:	15 c0       	rjmp	.+42     	; 0xc3c <__vector_10+0x58>
     c12:	80 91 a0 00 	lds	r24, 0x00A0
     c16:	81 ff       	sbrs	r24, 1
     c18:	11 c0       	rjmp	.+34     	; 0xc3c <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_DDISCI);
     c1a:	80 91 9f 00 	lds	r24, 0x009F
     c1e:	8d 7f       	andi	r24, 0xFD	; 253
     c20:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Clear(USB_INT_DCONNI);
     c24:	80 91 9f 00 	lds	r24, 0x009F
     c28:	8e 7f       	andi	r24, 0xFE	; 254
     c2a:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Disable(USB_INT_DDISCI);
     c2e:	80 91 a0 00 	lds	r24, 0x00A0
     c32:	8d 7f       	andi	r24, 0xFD	; 253
     c34:	80 93 a0 00 	sts	0x00A0, r24

		EVENT_USB_Host_DeviceUnattached();
     c38:	6e db       	rcall	.-2340   	; 0x316 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c3a:	58 df       	rcall	.-336    	; 0xaec <USB_ResetInterface>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     c3c:	80 91 df 00 	lds	r24, 0x00DF
     c40:	81 ff       	sbrs	r24, 1
     c42:	15 c0       	rjmp	.+42     	; 0xc6e <__vector_10+0x8a>
     c44:	80 91 de 00 	lds	r24, 0x00DE
     c48:	81 ff       	sbrs	r24, 1
     c4a:	11 c0       	rjmp	.+34     	; 0xc6e <__vector_10+0x8a>
	{
		USB_INT_Clear(USB_INT_VBERRI);
     c4c:	80 91 df 00 	lds	r24, 0x00DF
     c50:	8d 7f       	andi	r24, 0xFD	; 253
     c52:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     c56:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c58:	80 91 dd 00 	lds	r24, 0x00DD
     c5c:	81 60       	ori	r24, 0x01	; 1
     c5e:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	3b db       	rcall	.-2442   	; 0x2dc <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     c66:	57 db       	rcall	.-2386   	; 0x316 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     c68:	82 e0       	ldi	r24, 0x02	; 2
     c6a:	80 93 45 01 	sts	0x0145, r24
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     c6e:	80 91 df 00 	lds	r24, 0x00DF
     c72:	80 ff       	sbrs	r24, 0
     c74:	17 c0       	rjmp	.+46     	; 0xca4 <__vector_10+0xc0>
     c76:	80 91 de 00 	lds	r24, 0x00DE
     c7a:	80 ff       	sbrs	r24, 0
     c7c:	13 c0       	rjmp	.+38     	; 0xca4 <__vector_10+0xc0>
	{
		USB_INT_Clear(USB_INT_SRPI);
     c7e:	80 91 df 00 	lds	r24, 0x00DF
     c82:	8e 7f       	andi	r24, 0xFE	; 254
     c84:	80 93 df 00 	sts	0x00DF, r24
		USB_INT_Disable(USB_INT_SRPI);
     c88:	80 91 de 00 	lds	r24, 0x00DE
     c8c:	8e 7f       	andi	r24, 0xFE	; 254
     c8e:	80 93 de 00 	sts	0x00DE, r24

		EVENT_USB_Host_DeviceAttached();
     c92:	4a db       	rcall	.-2412   	; 0x328 <EVENT_USB_Host_DeviceAttached>

		USB_INT_Enable(USB_INT_DDISCI);
     c94:	80 91 a0 00 	lds	r24, 0x00A0
     c98:	82 60       	ori	r24, 0x02	; 2
     c9a:	80 93 a0 00 	sts	0x00A0, r24

		USB_HostState = HOST_STATE_Powered;
     c9e:	83 e0       	ldi	r24, 0x03	; 3
     ca0:	80 93 45 01 	sts	0x0145, r24
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     ca4:	80 91 df 00 	lds	r24, 0x00DF
     ca8:	82 ff       	sbrs	r24, 2
     caa:	0e c0       	rjmp	.+28     	; 0xcc8 <__vector_10+0xe4>
     cac:	80 91 de 00 	lds	r24, 0x00DE
     cb0:	82 ff       	sbrs	r24, 2
     cb2:	0a c0       	rjmp	.+20     	; 0xcc8 <__vector_10+0xe4>
	{
		USB_INT_Clear(USB_INT_BCERRI);
     cb4:	80 91 df 00 	lds	r24, 0x00DF
     cb8:	8b 7f       	andi	r24, 0xFB	; 251
     cba:	80 93 df 00 	sts	0x00DF, r24

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     cbe:	82 e0       	ldi	r24, 0x02	; 2
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	e0 da       	rcall	.-2624   	; 0x284 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     cc4:	28 db       	rcall	.-2480   	; 0x316 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     cc6:	12 df       	rcall	.-476    	; 0xaec <USB_ResetInterface>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     cc8:	80 91 9f 00 	lds	r24, 0x009F
     ccc:	85 ff       	sbrs	r24, 5
     cce:	0a c0       	rjmp	.+20     	; 0xce4 <__vector_10+0x100>
     cd0:	80 91 a0 00 	lds	r24, 0x00A0
     cd4:	85 ff       	sbrs	r24, 5
     cd6:	06 c0       	rjmp	.+12     	; 0xce4 <__vector_10+0x100>
	{
		USB_INT_Clear(USB_INT_HSOFI);
     cd8:	80 91 9f 00 	lds	r24, 0x009F
     cdc:	8f 7d       	andi	r24, 0xDF	; 223
     cde:	80 93 9f 00 	sts	0x009F, r24

		EVENT_USB_Host_StartOfFrame();
     ce2:	ae d0       	rcall	.+348    	; 0xe40 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     ce4:	ff 91       	pop	r31
     ce6:	ef 91       	pop	r30
     ce8:	bf 91       	pop	r27
     cea:	af 91       	pop	r26
     cec:	9f 91       	pop	r25
     cee:	8f 91       	pop	r24
     cf0:	7f 91       	pop	r23
     cf2:	6f 91       	pop	r22
     cf4:	5f 91       	pop	r21
     cf6:	4f 91       	pop	r20
     cf8:	3f 91       	pop	r19
     cfa:	2f 91       	pop	r18
     cfc:	0f 90       	pop	r0
     cfe:	0b be       	out	0x3b, r0	; 59
     d00:	0f 90       	pop	r0
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	0f 90       	pop	r0
     d06:	1f 90       	pop	r1
     d08:	18 95       	reti

00000d0a <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
     d0a:	af 92       	push	r10
     d0c:	bf 92       	push	r11
     d0e:	cf 92       	push	r12
     d10:	df 92       	push	r13
     d12:	ef 92       	push	r14
     d14:	ff 92       	push	r15
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	7c 01       	movw	r14, r24
     d20:	8b 01       	movw	r16, r22
     d22:	5a 01       	movw	r10, r20
     d24:	21 c0       	rjmp	.+66     	; 0xd68 <USB_GetNextDescriptorComp+0x5e>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     d26:	f8 01       	movw	r30, r16
     d28:	c0 81       	ld	r28, Z
     d2a:	d1 81       	ldd	r29, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     d2c:	88 81       	ld	r24, Y
     d2e:	90 e0       	ldi	r25, 0x00	; 0

				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
     d30:	9e 01       	movw	r18, r28
     d32:	28 0f       	add	r18, r24
     d34:	39 1f       	adc	r19, r25
     d36:	31 83       	std	Z+1, r19	; 0x01
     d38:	20 83       	st	Z, r18
				*BytesRem      -= CurrDescriptorSize;
     d3a:	f7 01       	movw	r30, r14
     d3c:	20 81       	ld	r18, Z
     d3e:	31 81       	ldd	r19, Z+1	; 0x01
     d40:	28 1b       	sub	r18, r24
     d42:	39 0b       	sbc	r19, r25
     d44:	31 83       	std	Z+1, r19	; 0x01
     d46:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     d48:	f8 01       	movw	r30, r16
     d4a:	80 81       	ld	r24, Z
     d4c:	91 81       	ldd	r25, Z+1	; 0x01
     d4e:	f5 01       	movw	r30, r10
     d50:	09 95       	icall
     d52:	82 30       	cpi	r24, 0x02	; 2
     d54:	49 f0       	breq	.+18     	; 0xd68 <USB_GetNextDescriptorComp+0x5e>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     d56:	81 30       	cpi	r24, 0x01	; 1
     d58:	71 f4       	brne	.+28     	; 0xd76 <USB_GetNextDescriptorComp+0x6c>
			{
				*CurrConfigLoc = PrevDescLoc;
     d5a:	f8 01       	movw	r30, r16
     d5c:	c0 83       	st	Z, r28
     d5e:	d1 83       	std	Z+1, r29	; 0x01
				*BytesRem      = PrevBytesRem;
     d60:	f7 01       	movw	r30, r14
     d62:	d1 82       	std	Z+1, r13	; 0x01
     d64:	c0 82       	st	Z, r12
     d66:	07 c0       	rjmp	.+14     	; 0xd76 <USB_GetNextDescriptorComp+0x6c>

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     d68:	f7 01       	movw	r30, r14
     d6a:	c0 80       	ld	r12, Z
     d6c:	d1 80       	ldd	r13, Z+1	; 0x01
     d6e:	c1 14       	cp	r12, r1
     d70:	d1 04       	cpc	r13, r1
     d72:	c9 f6       	brne	.-78     	; 0xd26 <USB_GetNextDescriptorComp+0x1c>
     d74:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	cf 90       	pop	r12
     d86:	bf 90       	pop	r11
     d88:	af 90       	pop	r10
     d8a:	08 95       	ret

00000d8c <USB_Host_GetDeviceConfigDescriptor>:
#include "ConfigDescriptor.h"

#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(uint8_t ConfigNumber, uint16_t* const ConfigSizePtr,
                                           void* BufferPtr, uint16_t BufferSize)
{
     d8c:	cf 92       	push	r12
     d8e:	df 92       	push	r13
     d90:	ef 92       	push	r14
     d92:	ff 92       	push	r15
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	29 97       	sbiw	r28, 0x09	; 9
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	6b 01       	movw	r12, r22
     dae:	8a 01       	movw	r16, r20
     db0:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     db2:	90 e8       	ldi	r25, 0x80	; 128
     db4:	90 93 3d 01 	sts	0x013D, r25
     db8:	96 e0       	ldi	r25, 0x06	; 6
     dba:	90 93 3e 01 	sts	0x013E, r25
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	92 60       	ori	r25, 0x02	; 2
     dc4:	90 93 40 01 	sts	0x0140, r25
     dc8:	80 93 3f 01 	sts	0x013F, r24
     dcc:	10 92 42 01 	sts	0x0142, r1
     dd0:	10 92 41 01 	sts	0x0141, r1
     dd4:	89 e0       	ldi	r24, 0x09	; 9
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	90 93 44 01 	sts	0x0144, r25
     ddc:	80 93 43 01 	sts	0x0143, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     de0:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     de4:	ce 01       	movw	r24, r28
     de6:	01 96       	adiw	r24, 0x01	; 1
     de8:	55 d0       	rcall	.+170    	; 0xe94 <USB_Host_SendControlRequest>
     dea:	28 2f       	mov	r18, r24
     dec:	88 23       	and	r24, r24
     dee:	c1 f4       	brne	.+48     	; 0xe20 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize;
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	9c 81       	ldd	r25, Y+4	; 0x04
     df4:	f6 01       	movw	r30, r12
     df6:	91 83       	std	Z+1, r25	; 0x01
     df8:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     dfa:	e8 16       	cp	r14, r24
     dfc:	f9 06       	cpc	r15, r25
     dfe:	10 f4       	brcc	.+4      	; 0xe04 <USB_Host_GetDeviceConfigDescriptor+0x78>
     e00:	25 e0       	ldi	r18, 0x05	; 5
     e02:	0e c0       	rjmp	.+28     	; 0xe20 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     e04:	90 93 44 01 	sts	0x0144, r25
     e08:	80 93 43 01 	sts	0x0143, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     e0c:	c8 01       	movw	r24, r16
     e0e:	42 d0       	rcall	.+132    	; 0xe94 <USB_Host_SendControlRequest>
     e10:	28 2f       	mov	r18, r24
     e12:	88 23       	and	r24, r24
     e14:	29 f4       	brne	.+10     	; 0xe20 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     e16:	f8 01       	movw	r30, r16
     e18:	81 81       	ldd	r24, Z+1	; 0x01
     e1a:	82 30       	cpi	r24, 0x02	; 2
     e1c:	09 f0       	breq	.+2      	; 0xe20 <USB_Host_GetDeviceConfigDescriptor+0x94>
     e1e:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     e20:	82 2f       	mov	r24, r18
     e22:	29 96       	adiw	r28, 0x09	; 9
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	cd bf       	out	0x3d, r28	; 61
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	ff 90       	pop	r15
     e38:	ef 90       	pop	r14
     e3a:	df 90       	pop	r13
     e3c:	cf 90       	pop	r12
     e3e:	08 95       	ret

00000e40 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     e40:	08 95       	ret

00000e42 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     e42:	1f 93       	push	r17
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	18 2f       	mov	r17, r24
     e4a:	c8 ee       	ldi	r28, 0xE8	; 232
     e4c:	d3 e0       	ldi	r29, 0x03	; 3
     e4e:	09 c0       	rjmp	.+18     	; 0xe62 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	ca db       	rcall	.-2156   	; 0x5e8 <USB_Host_WaitMS>
     e54:	88 23       	and	r24, r24
     e56:	d1 f4       	brne	.+52     	; 0xe8c <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     e58:	20 97       	sbiw	r28, 0x00	; 0
     e5a:	11 f4       	brne	.+4      	; 0xe60 <USB_Host_WaitForIOS+0x1e>
     e5c:	84 e0       	ldi	r24, 0x04	; 4
     e5e:	16 c0       	rjmp	.+44     	; 0xe8c <USB_Host_WaitForIOS+0x4a>
     e60:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e62:	11 23       	and	r17, r17
     e64:	29 f4       	brne	.+10     	; 0xe70 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean true if the current pipe is ready for a SETUP packet, false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     e66:	80 91 a6 00 	lds	r24, 0x00A6
     e6a:	83 ff       	sbrs	r24, 3
     e6c:	f1 cf       	rjmp	.-30     	; 0xe50 <USB_Host_WaitForIOS+0xe>
     e6e:	0d c0       	rjmp	.+26     	; 0xe8a <USB_Host_WaitForIOS+0x48>
     e70:	11 30       	cpi	r17, 0x01	; 1
     e72:	29 f4       	brne	.+10     	; 0xe7e <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     e74:	80 91 a6 00 	lds	r24, 0x00A6
     e78:	80 ff       	sbrs	r24, 0
     e7a:	ea cf       	rjmp	.-44     	; 0xe50 <USB_Host_WaitForIOS+0xe>
     e7c:	06 c0       	rjmp	.+12     	; 0xe8a <USB_Host_WaitForIOS+0x48>
     e7e:	12 30       	cpi	r17, 0x02	; 2
     e80:	39 f7       	brne	.-50     	; 0xe50 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e82:	80 91 a6 00 	lds	r24, 0x00A6
     e86:	82 ff       	sbrs	r24, 2
     e88:	e3 cf       	rjmp	.-58     	; 0xe50 <USB_Host_WaitForIOS+0xe>
     e8a:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	08 95       	ret

00000e94 <USB_Host_SendControlRequest>:

#define  __INCLUDE_FROM_HOSTSTDREQ_C
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     e94:	ff 92       	push	r15
     e96:	0f 93       	push	r16
     e98:	1f 93       	push	r17
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	18 2f       	mov	r17, r24
     ea0:	09 2f       	mov	r16, r25
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     ea2:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
	bool     BusSuspended   = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus   = HOST_SENDCONTROL_Successful;
	uint16_t DataLen        = USB_ControlRequest.wLength;
     ea6:	c0 91 43 01 	lds	r28, 0x0143
     eaa:	d0 91 44 01 	lds	r29, 0x0144
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     eae:	80 91 9e 00 	lds	r24, 0x009E
     eb2:	81 60       	ori	r24, 0x01	; 1
     eb4:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	96 db       	rcall	.-2260   	; 0x5e8 <USB_Host_WaitMS>
     ebc:	98 2f       	mov	r25, r24
     ebe:	88 23       	and	r24, r24
     ec0:	09 f0       	breq	.+2      	; 0xec4 <USB_Host_SendControlRequest+0x30>
     ec2:	d2 c0       	rjmp	.+420    	; 0x1068 <USB_Host_SendControlRequest+0x1d4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     ec4:	80 91 aa 00 	lds	r24, 0x00AA
     ec8:	8f 7c       	andi	r24, 0xCF	; 207
     eca:	80 93 aa 00 	sts	0x00AA, r24
			 *  flag for the pipe.
			 */
			static inline void Pipe_ClearErrorFlags(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearErrorFlags(void)
			{
				UPERRX = 0;
     ece:	10 92 f5 00 	sts	0x00F5, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ed2:	80 91 a9 00 	lds	r24, 0x00A9
     ed6:	8f 7b       	andi	r24, 0xBF	; 191
     ed8:	80 93 a9 00 	sts	0x00A9, r24
     edc:	ed e3       	ldi	r30, 0x3D	; 61
     ede:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_Byte(*(HeaderStream++));
     ee0:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
     ee2:	80 93 af 00 	sts	0x00AF, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	e5 34       	cpi	r30, 0x45	; 69
     eea:	f8 07       	cpc	r31, r24
     eec:	c9 f7       	brne	.-14     	; 0xee0 <USB_Host_SendControlRequest+0x4c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     eee:	80 91 a6 00 	lds	r24, 0x00A6
     ef2:	87 77       	andi	r24, 0x77	; 119
     ef4:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_Byte(*(HeaderStream++));

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	a3 df       	rcall	.-186    	; 0xe42 <USB_Host_WaitForIOS>
     efc:	98 2f       	mov	r25, r24
     efe:	88 23       	and	r24, r24
     f00:	09 f0       	breq	.+2      	; 0xf04 <USB_Host_SendControlRequest+0x70>
     f02:	b2 c0       	rjmp	.+356    	; 0x1068 <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f04:	80 91 a9 00 	lds	r24, 0x00A9
     f08:	80 64       	ori	r24, 0x40	; 64
     f0a:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	6b db       	rcall	.-2346   	; 0x5e8 <USB_Host_WaitMS>
     f12:	98 2f       	mov	r25, r24
     f14:	88 23       	and	r24, r24
     f16:	09 f0       	breq	.+2      	; 0xf1a <USB_Host_SendControlRequest+0x86>
     f18:	a7 c0       	rjmp	.+334    	; 0x1068 <USB_Host_SendControlRequest+0x1d4>
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
     f1a:	21 2f       	mov	r18, r17
     f1c:	30 2f       	mov	r19, r16
     f1e:	c9 01       	movw	r24, r18
     f20:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     f22:	80 91 3d 01 	lds	r24, 0x013D
     f26:	87 ff       	sbrs	r24, 7
     f28:	52 c0       	rjmp	.+164    	; 0xfce <USB_Host_SendControlRequest+0x13a>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f2a:	80 91 aa 00 	lds	r24, 0x00AA
     f2e:	8f 7c       	andi	r24, 0xCF	; 207
     f30:	80 61       	ori	r24, 0x10	; 16
     f32:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     f36:	01 15       	cp	r16, r1
     f38:	11 05       	cpc	r17, r1
     f3a:	69 f5       	brne	.+90     	; 0xf96 <USB_Host_SendControlRequest+0x102>
     f3c:	2e c0       	rjmp	.+92     	; 0xf9a <USB_Host_SendControlRequest+0x106>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f3e:	80 91 a9 00 	lds	r24, 0x00A9
     f42:	8f 7b       	andi	r24, 0xBF	; 191
     f44:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	7b df       	rcall	.-266    	; 0xe42 <USB_Host_WaitForIOS>
     f4c:	98 2f       	mov	r25, r24
     f4e:	88 23       	and	r24, r24
     f50:	09 f0       	breq	.+2      	; 0xf54 <USB_Host_SendControlRequest+0xc0>
     f52:	8a c0       	rjmp	.+276    	; 0x1068 <USB_Host_SendControlRequest+0x1d4>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f54:	80 91 f6 00 	lds	r24, 0x00F6
     f58:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
     f5c:	89 2b       	or	r24, r25
     f5e:	49 f4       	brne	.+18     	; 0xf72 <USB_Host_SendControlRequest+0xde>
     f60:	c0 e0       	ldi	r28, 0x00	; 0
     f62:	d0 e0       	ldi	r29, 0x00	; 0
     f64:	06 c0       	rjmp	.+12     	; 0xf72 <USB_Host_SendControlRequest+0xde>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
     f66:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_Byte();
     f6a:	f8 01       	movw	r30, r16
     f6c:	81 93       	st	Z+, r24
     f6e:	8f 01       	movw	r16, r30
					DataLen--;
     f70:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f72:	80 91 f6 00 	lds	r24, 0x00F6
     f76:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     f7a:	89 2b       	or	r24, r25
     f7c:	11 f0       	breq	.+4      	; 0xf82 <USB_Host_SendControlRequest+0xee>
     f7e:	20 97       	sbiw	r28, 0x00	; 0
     f80:	91 f7       	brne	.-28     	; 0xf66 <USB_Host_SendControlRequest+0xd2>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f82:	80 91 a9 00 	lds	r24, 0x00A9
     f86:	80 64       	ori	r24, 0x40	; 64
     f88:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     f8c:	80 91 a6 00 	lds	r24, 0x00A6
     f90:	8e 77       	andi	r24, 0x7E	; 126
     f92:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     f96:	20 97       	sbiw	r28, 0x00	; 0
     f98:	91 f6       	brne	.-92     	; 0xf3e <USB_Host_SendControlRequest+0xaa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f9a:	80 91 aa 00 	lds	r24, 0x00AA
     f9e:	8f 7c       	andi	r24, 0xCF	; 207
     fa0:	80 62       	ori	r24, 0x20	; 32
     fa2:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fa6:	80 91 a9 00 	lds	r24, 0x00A9
     faa:	8f 7b       	andi	r24, 0xBF	; 191
     fac:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fb0:	82 e0       	ldi	r24, 0x02	; 2
     fb2:	47 df       	rcall	.-370    	; 0xe42 <USB_Host_WaitForIOS>
     fb4:	98 2f       	mov	r25, r24
     fb6:	88 23       	and	r24, r24
     fb8:	09 f0       	breq	.+2      	; 0xfbc <USB_Host_SendControlRequest+0x128>
     fba:	56 c0       	rjmp	.+172    	; 0x1068 <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     fbc:	80 91 a6 00 	lds	r24, 0x00A6
     fc0:	8b 77       	andi	r24, 0x7B	; 123
     fc2:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fc6:	82 e0       	ldi	r24, 0x02	; 2
     fc8:	3c df       	rcall	.-392    	; 0xe42 <USB_Host_WaitForIOS>
     fca:	98 2f       	mov	r25, r24
     fcc:	4d c0       	rjmp	.+154    	; 0x1068 <USB_Host_SendControlRequest+0x1d4>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
     fce:	01 15       	cp	r16, r1
     fd0:	11 05       	cpc	r17, r1
     fd2:	a9 f1       	breq	.+106    	; 0x103e <USB_Host_SendControlRequest+0x1aa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fd4:	80 91 aa 00 	lds	r24, 0x00AA
     fd8:	8f 7c       	andi	r24, 0xCF	; 207
     fda:	80 62       	ori	r24, 0x20	; 32
     fdc:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fe0:	80 91 a9 00 	lds	r24, 0x00A9
     fe4:	8f 7b       	andi	r24, 0xBF	; 191
     fe6:	80 93 a9 00 	sts	0x00A9, r24
     fea:	1d c0       	rjmp	.+58     	; 0x1026 <USB_Host_SendControlRequest+0x192>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fec:	82 e0       	ldi	r24, 0x02	; 2
     fee:	29 df       	rcall	.-430    	; 0xe42 <USB_Host_WaitForIOS>
     ff0:	98 2f       	mov	r25, r24
     ff2:	88 23       	and	r24, r24
     ff4:	c9 f5       	brne	.+114    	; 0x1068 <USB_Host_SendControlRequest+0x1d4>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
     ff6:	80 91 29 01 	lds	r24, 0x0129
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	07 c0       	rjmp	.+14     	; 0x100e <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_Byte(*(DataStream++));
    1000:	f8 01       	movw	r30, r16
    1002:	81 91       	ld	r24, Z+
    1004:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    1006:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    100a:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    100c:	39 f0       	breq	.+14     	; 0x101c <USB_Host_SendControlRequest+0x188>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    100e:	80 91 f6 00 	lds	r24, 0x00F6
    1012:	90 91 f7 00 	lds	r25, 0x00F7
    1016:	82 17       	cp	r24, r18
    1018:	93 07       	cpc	r25, r19
    101a:	90 f3       	brcs	.-28     	; 0x1000 <USB_Host_SendControlRequest+0x16c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    101c:	80 91 a6 00 	lds	r24, 0x00A6
    1020:	8b 77       	andi	r24, 0x7B	; 123
    1022:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1026:	20 97       	sbiw	r28, 0x00	; 0
    1028:	09 f7       	brne	.-62     	; 0xfec <USB_Host_SendControlRequest+0x158>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	0a df       	rcall	.-492    	; 0xe42 <USB_Host_WaitForIOS>
    102e:	98 2f       	mov	r25, r24
    1030:	88 23       	and	r24, r24
    1032:	d1 f4       	brne	.+52     	; 0x1068 <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1034:	80 91 a9 00 	lds	r24, 0x00A9
    1038:	80 64       	ori	r24, 0x40	; 64
    103a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    103e:	80 91 aa 00 	lds	r24, 0x00AA
    1042:	8f 7c       	andi	r24, 0xCF	; 207
    1044:	80 61       	ori	r24, 0x10	; 16
    1046:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    104a:	80 91 a9 00 	lds	r24, 0x00A9
    104e:	8f 7b       	andi	r24, 0xBF	; 191
    1050:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	f5 de       	rcall	.-534    	; 0xe42 <USB_Host_WaitForIOS>
    1058:	98 2f       	mov	r25, r24
    105a:	88 23       	and	r24, r24
    105c:	29 f4       	brne	.+10     	; 0x1068 <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    105e:	80 91 a6 00 	lds	r24, 0x00A6
    1062:	8e 77       	andi	r24, 0x7E	; 126
    1064:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1068:	80 91 a9 00 	lds	r24, 0x00A9
    106c:	80 64       	ori	r24, 0x40	; 64
    106e:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1072:	f0 fc       	sbrc	r15, 0
    1074:	05 c0       	rjmp	.+10     	; 0x1080 <USB_Host_SendControlRequest+0x1ec>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1076:	80 91 9e 00 	lds	r24, 0x009E
    107a:	8e 7f       	andi	r24, 0xFE	; 254
    107c:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    1086:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    108a:	89 2f       	mov	r24, r25
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	ff 90       	pop	r15
    1096:	08 95       	ret

00001098 <Pipe_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    1098:	df 92       	push	r13
    109a:	ef 92       	push	r14
    109c:	ff 92       	push	r15
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	18 2f       	mov	r17, r24
    10a8:	09 2f       	mov	r16, r25
    10aa:	eb 01       	movw	r28, r22
    10ac:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10ae:	80 91 aa 00 	lds	r24, 0x00AA
    10b2:	8f 7c       	andi	r24, 0xCF	; 207
    10b4:	80 61       	ori	r24, 0x10	; 16
    10b6:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    10ba:	eb dc       	rcall	.-1578   	; 0xa92 <Pipe_WaitUntilReady>
    10bc:	d8 2e       	mov	r13, r24
    10be:	88 23       	and	r24, r24
    10c0:	19 f5       	brne	.+70     	; 0x1108 <Pipe_Read_Stream_LE+0x70>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    10c2:	81 2f       	mov	r24, r17
    10c4:	90 2f       	mov	r25, r16
    10c6:	9c 01       	movw	r18, r24
    10c8:	89 01       	movw	r16, r18
    10ca:	1c c0       	rjmp	.+56     	; 0x1104 <Pipe_Read_Stream_LE+0x6c>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    10cc:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    10d0:	85 fd       	sbrc	r24, 5
    10d2:	12 c0       	rjmp	.+36     	; 0x10f8 <Pipe_Read_Stream_LE+0x60>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10d4:	80 91 a6 00 	lds	r24, 0x00A6
    10d8:	8e 77       	andi	r24, 0x7E	; 126
    10da:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    10de:	e1 14       	cp	r14, r1
    10e0:	f1 04       	cpc	r15, r1
    10e2:	31 f0       	breq	.+12     	; 0x10f0 <Pipe_Read_Stream_LE+0x58>
    10e4:	f7 01       	movw	r30, r14
    10e6:	09 95       	icall
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	11 f4       	brne	.+4      	; 0x10f0 <Pipe_Read_Stream_LE+0x58>
    10ec:	84 e0       	ldi	r24, 0x04	; 4
    10ee:	0d c0       	rjmp	.+26     	; 0x110a <Pipe_Read_Stream_LE+0x72>
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    10f0:	d0 dc       	rcall	.-1632   	; 0xa92 <Pipe_WaitUntilReady>
    10f2:	88 23       	and	r24, r24
    10f4:	39 f0       	breq	.+14     	; 0x1104 <Pipe_Read_Stream_LE+0x6c>
    10f6:	09 c0       	rjmp	.+18     	; 0x110a <Pipe_Read_Stream_LE+0x72>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    10f8:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    10fc:	f8 01       	movw	r30, r16
    10fe:	81 93       	st	Z+, r24
    1100:	8f 01       	movw	r16, r30
			Length--;
    1102:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    1104:	20 97       	sbiw	r28, 0x00	; 0
    1106:	11 f7       	brne	.-60     	; 0x10cc <Pipe_Read_Stream_LE+0x34>
    1108:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	df 90       	pop	r13
    1118:	08 95       	ret

0000111a <Pipe_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    111a:	df 92       	push	r13
    111c:	ef 92       	push	r14
    111e:	ff 92       	push	r15
    1120:	0f 93       	push	r16
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	18 2f       	mov	r17, r24
    112a:	09 2f       	mov	r16, r25
    112c:	eb 01       	movw	r28, r22
    112e:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1130:	80 91 aa 00 	lds	r24, 0x00AA
    1134:	8f 7c       	andi	r24, 0xCF	; 207
    1136:	80 62       	ori	r24, 0x20	; 32
    1138:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    113c:	aa dc       	rcall	.-1708   	; 0xa92 <Pipe_WaitUntilReady>
    113e:	d8 2e       	mov	r13, r24
    1140:	88 23       	and	r24, r24
    1142:	19 f5       	brne	.+70     	; 0x118a <Pipe_Write_Stream_LE+0x70>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1144:	81 2f       	mov	r24, r17
    1146:	90 2f       	mov	r25, r16
    1148:	9c 01       	movw	r18, r24
    114a:	89 01       	movw	r16, r18
    114c:	1c c0       	rjmp	.+56     	; 0x1186 <Pipe_Write_Stream_LE+0x6c>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    114e:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1152:	85 fd       	sbrc	r24, 5
    1154:	12 c0       	rjmp	.+36     	; 0x117a <Pipe_Write_Stream_LE+0x60>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1156:	80 91 a6 00 	lds	r24, 0x00A6
    115a:	8b 77       	andi	r24, 0x7B	; 123
    115c:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    1160:	e1 14       	cp	r14, r1
    1162:	f1 04       	cpc	r15, r1
    1164:	31 f0       	breq	.+12     	; 0x1172 <Pipe_Write_Stream_LE+0x58>
    1166:	f7 01       	movw	r30, r14
    1168:	09 95       	icall
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	11 f4       	brne	.+4      	; 0x1172 <Pipe_Write_Stream_LE+0x58>
    116e:	84 e0       	ldi	r24, 0x04	; 4
    1170:	0d c0       	rjmp	.+26     	; 0x118c <Pipe_Write_Stream_LE+0x72>
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1172:	8f dc       	rcall	.-1762   	; 0xa92 <Pipe_WaitUntilReady>
    1174:	88 23       	and	r24, r24
    1176:	39 f0       	breq	.+14     	; 0x1186 <Pipe_Write_Stream_LE+0x6c>
    1178:	09 c0       	rjmp	.+18     	; 0x118c <Pipe_Write_Stream_LE+0x72>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    117a:	f8 01       	movw	r30, r16
    117c:	81 91       	ld	r24, Z+
    117e:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    1180:	80 93 af 00 	sts	0x00AF, r24
			Length--;
    1184:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    1186:	20 97       	sbiw	r28, 0x00	; 0
    1188:	11 f7       	brne	.-60     	; 0x114e <Pipe_Write_Stream_LE+0x34>
    118a:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	1f 91       	pop	r17
    1192:	0f 91       	pop	r16
    1194:	ff 90       	pop	r15
    1196:	ef 90       	pop	r14
    1198:	df 90       	pop	r13
    119a:	08 95       	ret

0000119c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    119c:	ff 92       	push	r15
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    11a2:	07 ea       	ldi	r16, 0xA7	; 167
    11a4:	10 e0       	ldi	r17, 0x00	; 0
    11a6:	f8 01       	movw	r30, r16
    11a8:	f0 80       	ld	r15, Z
    11aa:	f7 e0       	ldi	r31, 0x07	; 7
    11ac:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    11ae:	f8 01       	movw	r30, r16
    11b0:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    11b2:	c9 da       	rcall	.-2670   	; 0x746 <USB_Host_ProcessNextHostState>
    11b4:	f8 01       	movw	r30, r16
    11b6:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	ff 90       	pop	r15
    11be:	08 95       	ret

000011c0 <DCOMP_MIDI_Host_NextMIDIStreamingInterface>:

	return MIDI_ENUMERROR_NoError;
}

static uint8_t DCOMP_MIDI_Host_NextMIDIStreamingInterface(void* const CurrentDescriptor)
{
    11c0:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    11c2:	81 81       	ldd	r24, Z+1	; 0x01
    11c4:	84 30       	cpi	r24, 0x04	; 4
    11c6:	41 f4       	brne	.+16     	; 0x11d8 <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass)            &&
    11c8:	85 81       	ldd	r24, Z+5	; 0x05
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	29 f4       	brne	.+10     	; 0x11d8 <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x18>
    11ce:	86 81       	ldd	r24, Z+6	; 0x06
    11d0:	83 30       	cpi	r24, 0x03	; 3
    11d2:	11 f4       	brne	.+4      	; 0x11d8 <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x18>
    11d4:	87 81       	ldd	r24, Z+7	; 0x07
    11d6:	81 11       	cpse	r24, r1
    11d8:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    11da:	08 95       	ret

000011dc <MIDI_Host_ReceiveEventPacket>:
	return PIPE_RWSTREAM_NoError;
}

bool MIDI_Host_ReceiveEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                  MIDI_EventPacket_t* const Event)
{
    11dc:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    11de:	80 91 45 01 	lds	r24, 0x0145
    11e2:	8c 30       	cpi	r24, 0x0C	; 12
    11e4:	e9 f4       	brne	.+58     	; 0x1220 <MIDI_Host_ReceiveEventPacket+0x44>
    11e6:	84 81       	ldd	r24, Z+4	; 0x04
    11e8:	88 23       	and	r24, r24
    11ea:	d1 f0       	breq	.+52     	; 0x1220 <MIDI_Host_ReceiveEventPacket+0x44>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataINPipeNumber);
    11ec:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    11ee:	80 93 a7 00 	sts	0x00A7, r24
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    11f2:	80 91 a6 00 	lds	r24, 0x00A6

	if (!(Pipe_IsReadWriteAllowed()))
    11f6:	85 fd       	sbrc	r24, 5
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <MIDI_Host_ReceiveEventPacket+0x22>
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	08 95       	ret
	  return false;

	Pipe_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NO_STREAM_CALLBACK);
    11fe:	cb 01       	movw	r24, r22
    1200:	64 e0       	ldi	r22, 0x04	; 4
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	40 e0       	ldi	r20, 0x00	; 0
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	47 df       	rcall	.-370    	; 0x1098 <Pipe_Read_Stream_LE>
    120a:	80 91 a6 00 	lds	r24, 0x00A6

	if (!(Pipe_IsReadWriteAllowed()))
    120e:	85 fd       	sbrc	r24, 5
    1210:	07 c0       	rjmp	.+14     	; 0x1220 <MIDI_Host_ReceiveEventPacket+0x44>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1212:	80 91 a6 00 	lds	r24, 0x00A6
    1216:	8e 77       	andi	r24, 0x7E	; 126
    1218:	80 93 a6 00 	sts	0x00A6, r24
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	08 95       	ret
    1220:	81 e0       	ldi	r24, 0x01	; 1
	  Pipe_ClearIN();

	return true;
}
    1222:	08 95       	ret

00001224 <MIDI_Host_SendEventPacket>:
	return PIPE_READYWAIT_NoError;
}

uint8_t MIDI_Host_SendEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                  MIDI_EventPacket_t* const Event)
{
    1224:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    1226:	80 91 45 01 	lds	r24, 0x0145
    122a:	8c 30       	cpi	r24, 0x0C	; 12
    122c:	c9 f4       	brne	.+50     	; 0x1260 <MIDI_Host_SendEventPacket+0x3c>
    122e:	84 81       	ldd	r24, Z+4	; 0x04
    1230:	88 23       	and	r24, r24
    1232:	b1 f0       	breq	.+44     	; 0x1260 <MIDI_Host_SendEventPacket+0x3c>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t ErrorCode;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataOUTPipeNumber);
    1234:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1236:	80 93 a7 00 	sts	0x00A7, r24

	if ((ErrorCode = Pipe_Write_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NO_STREAM_CALLBACK)) != PIPE_RWSTREAM_NoError)
    123a:	cb 01       	movw	r24, r22
    123c:	64 e0       	ldi	r22, 0x04	; 4
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	40 e0       	ldi	r20, 0x00	; 0
    1242:	50 e0       	ldi	r21, 0x00	; 0
    1244:	6a df       	rcall	.-300    	; 0x111a <Pipe_Write_Stream_LE>
    1246:	98 2f       	mov	r25, r24
    1248:	88 23       	and	r24, r24
    124a:	59 f4       	brne	.+22     	; 0x1262 <MIDI_Host_SendEventPacket+0x3e>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    124c:	80 91 a6 00 	lds	r24, 0x00A6
	  return ErrorCode;

	if (!(Pipe_IsReadWriteAllowed()))
    1250:	85 fd       	sbrc	r24, 5
    1252:	07 c0       	rjmp	.+14     	; 0x1262 <MIDI_Host_SendEventPacket+0x3e>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1254:	80 91 a6 00 	lds	r24, 0x00A6
    1258:	8b 77       	andi	r24, 0x7B	; 123
    125a:	80 93 a6 00 	sts	0x00A6, r24
    125e:	01 c0       	rjmp	.+2      	; 0x1262 <MIDI_Host_SendEventPacket+0x3e>
    1260:	91 e0       	ldi	r25, 0x01	; 1
	  Pipe_ClearOUT();

	return PIPE_RWSTREAM_NoError;
}
    1262:	89 2f       	mov	r24, r25
    1264:	08 95       	ret

00001266 <MIDI_Host_Flush>:
	MIDI_Host_Flush(MIDIInterfaceInfo);
	#endif	
}

uint8_t MIDI_Host_Flush(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo)
{
    1266:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    1268:	80 91 45 01 	lds	r24, 0x0145
    126c:	8c 30       	cpi	r24, 0x0C	; 12
    126e:	a1 f4       	brne	.+40     	; 0x1298 <MIDI_Host_Flush+0x32>
    1270:	84 81       	ldd	r24, Z+4	; 0x04
    1272:	88 23       	and	r24, r24
    1274:	89 f0       	breq	.+34     	; 0x1298 <MIDI_Host_Flush+0x32>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataOUTPipeNumber);
    1276:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1278:	80 93 a7 00 	sts	0x00A7, r24
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    127c:	80 91 f6 00 	lds	r24, 0x00F6
    1280:	90 91 f7 00 	lds	r25, 0x00F7

	if (Pipe_BytesInPipe())
    1284:	89 2b       	or	r24, r25
    1286:	11 f4       	brne	.+4      	; 0x128c <MIDI_Host_Flush+0x26>
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	08 95       	ret
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    128c:	80 91 a6 00 	lds	r24, 0x00A6
    1290:	8b 77       	andi	r24, 0x7B	; 123
    1292:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_ClearOUT();

		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
    1296:	fd cb       	rjmp	.-2054   	; 0xa92 <Pipe_WaitUntilReady>
    1298:	82 e0       	ldi	r24, 0x02	; 2
		  return ErrorCode;
	}

	return PIPE_READYWAIT_NoError;
}
    129a:	08 95       	ret

0000129c <MIDI_Host_USBTask>:

	return DESCRIPTOR_SEARCH_NotFound;
}

void MIDI_Host_USBTask(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo)
{
    129c:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    129e:	80 91 45 01 	lds	r24, 0x0145
    12a2:	8c 30       	cpi	r24, 0x0C	; 12
    12a4:	29 f4       	brne	.+10     	; 0x12b0 <MIDI_Host_USBTask+0x14>
    12a6:	84 81       	ldd	r24, Z+4	; 0x04
    12a8:	88 23       	and	r24, r24
    12aa:	11 f0       	breq	.+4      	; 0x12b0 <MIDI_Host_USBTask+0x14>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	MIDI_Host_Flush(MIDIInterfaceInfo);
    12ac:	cf 01       	movw	r24, r30
    12ae:	db cf       	rjmp	.-74     	; 0x1266 <MIDI_Host_Flush>
    12b0:	08 95       	ret

000012b2 <MIDI_Host_ConfigurePipes>:
#include "MIDI.h"

uint8_t MIDI_Host_ConfigurePipes(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                 uint16_t ConfigDescriptorSize,
                                 void* ConfigDescriptorData)
{
    12b2:	6f 92       	push	r6
    12b4:	7f 92       	push	r7
    12b6:	8f 92       	push	r8
    12b8:	9f 92       	push	r9
    12ba:	af 92       	push	r10
    12bc:	bf 92       	push	r11
    12be:	cf 92       	push	r12
    12c0:	df 92       	push	r13
    12c2:	ef 92       	push	r14
    12c4:	ff 92       	push	r15
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <MIDI_Host_ConfigurePipes+0x1e>
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <MIDI_Host_ConfigurePipes+0x20>
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	6c 01       	movw	r12, r24
    12d8:	7a 83       	std	Y+2, r23	; 0x02
    12da:	69 83       	std	Y+1, r22	; 0x01
    12dc:	5c 83       	std	Y+4, r21	; 0x04
    12de:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* MIDIInterface   = NULL;

	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));
    12e0:	04 96       	adiw	r24, 0x04	; 4
    12e2:	fc 01       	movw	r30, r24
    12e4:	86 e0       	ldi	r24, 0x06	; 6
    12e6:	df 01       	movw	r26, r30
    12e8:	1d 92       	st	X+, r1
    12ea:	8a 95       	dec	r24
    12ec:	e9 f7       	brne	.-6      	; 0x12e8 <MIDI_Host_ConfigurePipes+0x36>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    12ee:	eb 81       	ldd	r30, Y+3	; 0x03
    12f0:	fc 81       	ldd	r31, Y+4	; 0x04
    12f2:	81 81       	ldd	r24, Z+1	; 0x01
    12f4:	82 30       	cpi	r24, 0x02	; 2
    12f6:	11 f0       	breq	.+4      	; 0x12fc <MIDI_Host_ConfigurePipes+0x4a>
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	86 c0       	rjmp	.+268    	; 0x1408 <MIDI_Host_ConfigurePipes+0x156>
    12fc:	88 24       	eor	r8, r8
    12fe:	99 24       	eor	r9, r9
    1300:	aa 24       	eor	r10, r10
    1302:	bb 24       	eor	r11, r11
    1304:	66 24       	eor	r6, r6
    1306:	77 24       	eor	r7, r7
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MIDIInterface) ||
    1308:	83 e0       	ldi	r24, 0x03	; 3
    130a:	e8 2e       	mov	r14, r24
    130c:	f1 2c       	mov	r15, r1
    130e:	ec 0e       	add	r14, r28
    1310:	fd 1e       	adc	r15, r29
    1312:	8e 01       	movw	r16, r28
    1314:	0f 5f       	subi	r16, 0xFF	; 255
    1316:	1f 4f       	sbci	r17, 0xFF	; 255
    1318:	61 14       	cp	r6, r1
    131a:	71 04       	cpc	r7, r1
    131c:	39 f0       	breq	.+14     	; 0x132c <MIDI_Host_ConfigurePipes+0x7a>
    131e:	c8 01       	movw	r24, r16
    1320:	b7 01       	movw	r22, r14
    1322:	47 e1       	ldi	r20, 0x17	; 23
    1324:	5a e0       	ldi	r21, 0x0A	; 10
    1326:	f1 dc       	rcall	.-1566   	; 0xd0a <USB_GetNextDescriptorComp>
    1328:	88 23       	and	r24, r24
    132a:	81 f0       	breq	.+32     	; 0x134c <MIDI_Host_ConfigurePipes+0x9a>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    132c:	c8 01       	movw	r24, r16
    132e:	b7 01       	movw	r22, r14
    1330:	40 ee       	ldi	r20, 0xE0	; 224
    1332:	58 e0       	ldi	r21, 0x08	; 8
    1334:	ea dc       	rcall	.-1580   	; 0xd0a <USB_GetNextDescriptorComp>
    1336:	88 23       	and	r24, r24
    1338:	11 f0       	breq	.+4      	; 0x133e <MIDI_Host_ConfigurePipes+0x8c>
    133a:	82 e0       	ldi	r24, 0x02	; 2
    133c:	65 c0       	rjmp	.+202    	; 0x1408 <MIDI_Host_ConfigurePipes+0x156>
			                              DCOMP_MIDI_Host_NextMIDIStreamingInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return MIDI_ENUMERROR_NoCompatibleInterfaceFound;
			}

			MIDIInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    133e:	6b 80       	ldd	r6, Y+3	; 0x03
    1340:	7c 80       	ldd	r7, Y+4	; 0x04
    1342:	aa 24       	eor	r10, r10
    1344:	bb 24       	eor	r11, r11
    1346:	88 24       	eor	r8, r8
    1348:	99 24       	eor	r9, r9
    134a:	e6 cf       	rjmp	.-52     	; 0x1318 <MIDI_Host_ConfigurePipes+0x66>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    134c:	eb 81       	ldd	r30, Y+3	; 0x03
    134e:	fc 81       	ldd	r31, Y+4	; 0x04

		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
    1350:	82 81       	ldd	r24, Z+2	; 0x02
    1352:	87 fd       	sbrc	r24, 7
    1354:	02 c0       	rjmp	.+4      	; 0x135a <MIDI_Host_ConfigurePipes+0xa8>
    1356:	5f 01       	movw	r10, r30
    1358:	01 c0       	rjmp	.+2      	; 0x135c <MIDI_Host_ConfigurePipes+0xaa>
    135a:	4f 01       	movw	r8, r30
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    135c:	81 14       	cp	r8, r1
    135e:	91 04       	cpc	r9, r1
    1360:	d9 f2       	breq	.-74     	; 0x1318 <MIDI_Host_ConfigurePipes+0x66>
    1362:	a1 14       	cp	r10, r1
    1364:	b1 04       	cpc	r11, r1
    1366:	c1 f2       	breq	.-80     	; 0x1318 <MIDI_Host_ConfigurePipes+0x66>
    1368:	ff 24       	eor	r15, r15
    136a:	f3 94       	inc	r15
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
	{
		if (PipeNum == MIDIInterfaceInfo->Config.DataINPipeNumber)
    136c:	f6 01       	movw	r30, r12
    136e:	80 81       	ld	r24, Z
    1370:	f8 16       	cp	r15, r24
    1372:	e1 f4       	brne	.+56     	; 0x13ac <MIDI_Host_ConfigurePipes+0xfa>
		{
			Pipe_ConfigurePipe(PipeNum, EP_TYPE_BULK, PIPE_TOKEN_IN,
    1374:	d4 01       	movw	r26, r8
    1376:	12 96       	adiw	r26, 0x02	; 2
    1378:	2c 91       	ld	r18, X
    137a:	12 97       	sbiw	r26, 0x02	; 2
    137c:	14 96       	adiw	r26, 0x04	; 4
    137e:	0d 91       	ld	r16, X+
    1380:	1c 91       	ld	r17, X
    1382:	15 97       	sbiw	r26, 0x05	; 5
    1384:	81 81       	ldd	r24, Z+1	; 0x01
    1386:	88 23       	and	r24, r24
    1388:	11 f4       	brne	.+4      	; 0x138e <MIDI_Host_ConfigurePipes+0xdc>
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	01 c0       	rjmp	.+2      	; 0x1390 <MIDI_Host_ConfigurePipes+0xde>
    138e:	94 e0       	ldi	r25, 0x04	; 4
    1390:	8f 2d       	mov	r24, r15
    1392:	62 e0       	ldi	r22, 0x02	; 2
    1394:	40 e1       	ldi	r20, 0x10	; 16
    1396:	e9 2e       	mov	r14, r25
    1398:	04 db       	rcall	.-2552   	; 0x9a2 <Pipe_ConfigurePipe>
			                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize,
			                   MIDIInterfaceInfo->Config.DataINPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);

			MIDIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    139a:	f4 01       	movw	r30, r8
    139c:	84 81       	ldd	r24, Z+4	; 0x04
    139e:	95 81       	ldd	r25, Z+5	; 0x05
    13a0:	d6 01       	movw	r26, r12
    13a2:	17 96       	adiw	r26, 0x07	; 7
    13a4:	9c 93       	st	X, r25
    13a6:	8e 93       	st	-X, r24
    13a8:	16 97       	sbiw	r26, 0x06	; 6
    13aa:	1f c0       	rjmp	.+62     	; 0x13ea <MIDI_Host_ConfigurePipes+0x138>
		}
		else if (PipeNum == MIDIInterfaceInfo->Config.DataOUTPipeNumber)
    13ac:	f6 01       	movw	r30, r12
    13ae:	82 81       	ldd	r24, Z+2	; 0x02
    13b0:	f8 16       	cp	r15, r24
    13b2:	d9 f4       	brne	.+54     	; 0x13ea <MIDI_Host_ConfigurePipes+0x138>
		{
			Pipe_ConfigurePipe(PipeNum, EP_TYPE_BULK, PIPE_TOKEN_OUT,
    13b4:	d5 01       	movw	r26, r10
    13b6:	12 96       	adiw	r26, 0x02	; 2
    13b8:	2c 91       	ld	r18, X
    13ba:	12 97       	sbiw	r26, 0x02	; 2
    13bc:	14 96       	adiw	r26, 0x04	; 4
    13be:	0d 91       	ld	r16, X+
    13c0:	1c 91       	ld	r17, X
    13c2:	15 97       	sbiw	r26, 0x05	; 5
    13c4:	83 81       	ldd	r24, Z+3	; 0x03
    13c6:	88 23       	and	r24, r24
    13c8:	11 f4       	brne	.+4      	; 0x13ce <MIDI_Host_ConfigurePipes+0x11c>
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	01 c0       	rjmp	.+2      	; 0x13d0 <MIDI_Host_ConfigurePipes+0x11e>
    13ce:	94 e0       	ldi	r25, 0x04	; 4
    13d0:	8f 2d       	mov	r24, r15
    13d2:	62 e0       	ldi	r22, 0x02	; 2
    13d4:	40 e2       	ldi	r20, 0x20	; 32
    13d6:	e9 2e       	mov	r14, r25
    13d8:	e4 da       	rcall	.-2616   	; 0x9a2 <Pipe_ConfigurePipe>
			                   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize,
			                   MIDIInterfaceInfo->Config.DataOUTPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);

			MIDIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    13da:	f5 01       	movw	r30, r10
    13dc:	84 81       	ldd	r24, Z+4	; 0x04
    13de:	95 81       	ldd	r25, Z+5	; 0x05
    13e0:	d6 01       	movw	r26, r12
    13e2:	19 96       	adiw	r26, 0x09	; 9
    13e4:	9c 93       	st	X, r25
    13e6:	8e 93       	st	-X, r24
    13e8:	18 97       	sbiw	r26, 0x08	; 8
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    13ea:	f3 94       	inc	r15
    13ec:	b7 e0       	ldi	r27, 0x07	; 7
    13ee:	fb 16       	cp	r15, r27
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <MIDI_Host_ConfigurePipes+0x142>
    13f2:	bc cf       	rjmp	.-136    	; 0x136c <MIDI_Host_ConfigurePipes+0xba>

			MIDIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
		}
	}

	MIDIInterfaceInfo->State.InterfaceNumber = MIDIInterface->InterfaceNumber;
    13f4:	f3 01       	movw	r30, r6
    13f6:	82 81       	ldd	r24, Z+2	; 0x02
    13f8:	d6 01       	movw	r26, r12
    13fa:	15 96       	adiw	r26, 0x05	; 5
    13fc:	8c 93       	st	X, r24
    13fe:	15 97       	sbiw	r26, 0x05	; 5
	MIDIInterfaceInfo->State.IsActive = true;
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	14 96       	adiw	r26, 0x04	; 4
    1404:	8c 93       	st	X, r24
    1406:	80 e0       	ldi	r24, 0x00	; 0

	return MIDI_ENUMERROR_NoError;
}
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	ff 90       	pop	r15
    141a:	ef 90       	pop	r14
    141c:	df 90       	pop	r13
    141e:	cf 90       	pop	r12
    1420:	bf 90       	pop	r11
    1422:	af 90       	pop	r10
    1424:	9f 90       	pop	r9
    1426:	8f 90       	pop	r8
    1428:	7f 90       	pop	r7
    142a:	6f 90       	pop	r6
    142c:	08 95       	ret

0000142e <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint>:

	return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint(void* const CurrentDescriptor)
{
    142e:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1430:	81 81       	ldd	r24, Z+1	; 0x01
    1432:	85 30       	cpi	r24, 0x05	; 5
    1434:	49 f4       	brne	.+18     	; 0x1448 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if ((EndpointType == EP_TYPE_BULK) && !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1436:	83 81       	ldd	r24, Z+3	; 0x03
    1438:	83 70       	andi	r24, 0x03	; 3
    143a:	82 30       	cpi	r24, 0x02	; 2
    143c:	49 f4       	brne	.+18     	; 0x1450 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x22>
    143e:	82 81       	ldd	r24, Z+2	; 0x02
    1440:	fa da       	rcall	.-2572   	; 0xa36 <Pipe_IsEndpointBound>
    1442:	88 23       	and	r24, r24
    1444:	29 f4       	brne	.+10     	; 0x1450 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x22>
    1446:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1448:	84 30       	cpi	r24, 0x04	; 4
    144a:	11 f4       	brne	.+4      	; 0x1450 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x22>
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	08 95       	ret
    1450:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1452:	08 95       	ret

00001454 <SerialStream_TxByte>:

FILE USARTStream = FDEV_SETUP_STREAM(SerialStream_TxByte, SerialStream_RxByte, _FDEV_SETUP_RW);

static int SerialStream_TxByte(char DataByte,
                               FILE *Stream)
{
    1454:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1456:	80 91 c8 00 	lds	r24, 0x00C8
    145a:	85 ff       	sbrs	r24, 5
    145c:	fc cf       	rjmp	.-8      	; 0x1456 <SerialStream_TxByte+0x2>
				UDR1 = DataByte;
    145e:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_TxByte(DataByte);
	return 0;
}
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	08 95       	ret

00001468 <SerialStream_RxByte>:
			 *  \return Boolean true if a character has been received, false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1468:	80 91 c8 00 	lds	r24, 0x00C8

static int SerialStream_RxByte(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    146c:	87 fd       	sbrc	r24, 7
    146e:	03 c0       	rjmp	.+6      	; 0x1476 <SerialStream_RxByte+0xe>
    1470:	2e ef       	ldi	r18, 0xFE	; 254
    1472:	3f ef       	ldi	r19, 0xFF	; 255
    1474:	08 c0       	rjmp	.+16     	; 0x1486 <SerialStream_RxByte+0x1e>
			 *  \return Byte received from the USART.
			 */
			static inline char Serial_RxByte(void) ATTR_ALWAYS_INLINE;
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
    1476:	80 91 c8 00 	lds	r24, 0x00C8
    147a:	87 ff       	sbrs	r24, 7
    147c:	fc cf       	rjmp	.-8      	; 0x1476 <SerialStream_RxByte+0xe>
				return UDR1;
    147e:	80 91 ce 00 	lds	r24, 0x00CE
	  return _FDEV_EOF;

	return Serial_RxByte();
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
}
    1486:	c9 01       	movw	r24, r18
    1488:	08 95       	ret

0000148a <printf_P>:
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	fe 01       	movw	r30, r28
    1494:	35 96       	adiw	r30, 0x05	; 5
    1496:	61 91       	ld	r22, Z+
    1498:	71 91       	ld	r23, Z+
    149a:	a0 91 48 01 	lds	r26, 0x0148
    149e:	b0 91 49 01 	lds	r27, 0x0149
    14a2:	13 96       	adiw	r26, 0x03	; 3
    14a4:	8c 91       	ld	r24, X
    14a6:	13 97       	sbiw	r26, 0x03	; 3
    14a8:	88 60       	ori	r24, 0x08	; 8
    14aa:	13 96       	adiw	r26, 0x03	; 3
    14ac:	8c 93       	st	X, r24
    14ae:	80 91 48 01 	lds	r24, 0x0148
    14b2:	90 91 49 01 	lds	r25, 0x0149
    14b6:	af 01       	movw	r20, r30
    14b8:	3f d0       	rcall	.+126    	; 0x1538 <vfprintf>
    14ba:	e0 91 48 01 	lds	r30, 0x0148
    14be:	f0 91 49 01 	lds	r31, 0x0149
    14c2:	23 81       	ldd	r18, Z+3	; 0x03
    14c4:	27 7f       	andi	r18, 0xF7	; 247
    14c6:	23 83       	std	Z+3, r18	; 0x03
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <puts_P>:
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	ec 01       	movw	r28, r24
    14d8:	e0 91 48 01 	lds	r30, 0x0148
    14dc:	f0 91 49 01 	lds	r31, 0x0149
    14e0:	83 81       	ldd	r24, Z+3	; 0x03
    14e2:	81 ff       	sbrs	r24, 1
    14e4:	21 c0       	rjmp	.+66     	; 0x1528 <puts_P+0x5a>
    14e6:	00 e0       	ldi	r16, 0x00	; 0
    14e8:	10 e0       	ldi	r17, 0x00	; 0
    14ea:	0e c0       	rjmp	.+28     	; 0x1508 <puts_P+0x3a>
    14ec:	e0 91 48 01 	lds	r30, 0x0148
    14f0:	f0 91 49 01 	lds	r31, 0x0149
    14f4:	20 85       	ldd	r18, Z+8	; 0x08
    14f6:	31 85       	ldd	r19, Z+9	; 0x09
    14f8:	bf 01       	movw	r22, r30
    14fa:	f9 01       	movw	r30, r18
    14fc:	09 95       	icall
    14fe:	89 2b       	or	r24, r25
    1500:	11 f0       	breq	.+4      	; 0x1506 <puts_P+0x38>
    1502:	0f ef       	ldi	r16, 0xFF	; 255
    1504:	1f ef       	ldi	r17, 0xFF	; 255
    1506:	21 96       	adiw	r28, 0x01	; 1
    1508:	fe 01       	movw	r30, r28
    150a:	84 91       	lpm	r24, Z+
    150c:	88 23       	and	r24, r24
    150e:	71 f7       	brne	.-36     	; 0x14ec <puts_P+0x1e>
    1510:	e0 91 48 01 	lds	r30, 0x0148
    1514:	f0 91 49 01 	lds	r31, 0x0149
    1518:	20 85       	ldd	r18, Z+8	; 0x08
    151a:	31 85       	ldd	r19, Z+9	; 0x09
    151c:	8a e0       	ldi	r24, 0x0A	; 10
    151e:	bf 01       	movw	r22, r30
    1520:	f9 01       	movw	r30, r18
    1522:	09 95       	icall
    1524:	89 2b       	or	r24, r25
    1526:	11 f0       	breq	.+4      	; 0x152c <puts_P+0x5e>
    1528:	0f ef       	ldi	r16, 0xFF	; 255
    152a:	1f ef       	ldi	r17, 0xFF	; 255
    152c:	c8 01       	movw	r24, r16
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	1f 91       	pop	r17
    1534:	0f 91       	pop	r16
    1536:	08 95       	ret

00001538 <vfprintf>:
    1538:	2f 92       	push	r2
    153a:	3f 92       	push	r3
    153c:	4f 92       	push	r4
    153e:	5f 92       	push	r5
    1540:	6f 92       	push	r6
    1542:	7f 92       	push	r7
    1544:	8f 92       	push	r8
    1546:	9f 92       	push	r9
    1548:	af 92       	push	r10
    154a:	bf 92       	push	r11
    154c:	cf 92       	push	r12
    154e:	df 92       	push	r13
    1550:	ef 92       	push	r14
    1552:	ff 92       	push	r15
    1554:	0f 93       	push	r16
    1556:	1f 93       	push	r17
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	2b 97       	sbiw	r28, 0x0b	; 11
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	3c 01       	movw	r6, r24
    156e:	2b 01       	movw	r4, r22
    1570:	5a 01       	movw	r10, r20
    1572:	fc 01       	movw	r30, r24
    1574:	17 82       	std	Z+7, r1	; 0x07
    1576:	16 82       	std	Z+6, r1	; 0x06
    1578:	83 81       	ldd	r24, Z+3	; 0x03
    157a:	81 fd       	sbrc	r24, 1
    157c:	03 c0       	rjmp	.+6      	; 0x1584 <vfprintf+0x4c>
    157e:	6f ef       	ldi	r22, 0xFF	; 255
    1580:	7f ef       	ldi	r23, 0xFF	; 255
    1582:	b9 c1       	rjmp	.+882    	; 0x18f6 <vfprintf+0x3be>
    1584:	9a e0       	ldi	r25, 0x0A	; 10
    1586:	89 2e       	mov	r8, r25
    1588:	1e 01       	movw	r2, r28
    158a:	08 94       	sec
    158c:	21 1c       	adc	r2, r1
    158e:	31 1c       	adc	r3, r1
    1590:	f3 01       	movw	r30, r6
    1592:	23 81       	ldd	r18, Z+3	; 0x03
    1594:	f2 01       	movw	r30, r4
    1596:	23 fd       	sbrc	r18, 3
    1598:	85 91       	lpm	r24, Z+
    159a:	23 ff       	sbrs	r18, 3
    159c:	81 91       	ld	r24, Z+
    159e:	2f 01       	movw	r4, r30
    15a0:	88 23       	and	r24, r24
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <vfprintf+0x6e>
    15a4:	a5 c1       	rjmp	.+842    	; 0x18f0 <vfprintf+0x3b8>
    15a6:	85 32       	cpi	r24, 0x25	; 37
    15a8:	39 f4       	brne	.+14     	; 0x15b8 <vfprintf+0x80>
    15aa:	23 fd       	sbrc	r18, 3
    15ac:	85 91       	lpm	r24, Z+
    15ae:	23 ff       	sbrs	r18, 3
    15b0:	81 91       	ld	r24, Z+
    15b2:	2f 01       	movw	r4, r30
    15b4:	85 32       	cpi	r24, 0x25	; 37
    15b6:	21 f4       	brne	.+8      	; 0x15c0 <vfprintf+0x88>
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	b3 01       	movw	r22, r6
    15bc:	cc d1       	rcall	.+920    	; 0x1956 <fputc>
    15be:	e8 cf       	rjmp	.-48     	; 0x1590 <vfprintf+0x58>
    15c0:	98 2f       	mov	r25, r24
    15c2:	ff 24       	eor	r15, r15
    15c4:	ee 24       	eor	r14, r14
    15c6:	99 24       	eor	r9, r9
    15c8:	ff e1       	ldi	r31, 0x1F	; 31
    15ca:	ff 15       	cp	r31, r15
    15cc:	d0 f0       	brcs	.+52     	; 0x1602 <vfprintf+0xca>
    15ce:	9b 32       	cpi	r25, 0x2B	; 43
    15d0:	69 f0       	breq	.+26     	; 0x15ec <vfprintf+0xb4>
    15d2:	9c 32       	cpi	r25, 0x2C	; 44
    15d4:	28 f4       	brcc	.+10     	; 0x15e0 <vfprintf+0xa8>
    15d6:	90 32       	cpi	r25, 0x20	; 32
    15d8:	59 f0       	breq	.+22     	; 0x15f0 <vfprintf+0xb8>
    15da:	93 32       	cpi	r25, 0x23	; 35
    15dc:	91 f4       	brne	.+36     	; 0x1602 <vfprintf+0xca>
    15de:	0e c0       	rjmp	.+28     	; 0x15fc <vfprintf+0xc4>
    15e0:	9d 32       	cpi	r25, 0x2D	; 45
    15e2:	49 f0       	breq	.+18     	; 0x15f6 <vfprintf+0xbe>
    15e4:	90 33       	cpi	r25, 0x30	; 48
    15e6:	69 f4       	brne	.+26     	; 0x1602 <vfprintf+0xca>
    15e8:	41 e0       	ldi	r20, 0x01	; 1
    15ea:	24 c0       	rjmp	.+72     	; 0x1634 <vfprintf+0xfc>
    15ec:	52 e0       	ldi	r21, 0x02	; 2
    15ee:	f5 2a       	or	r15, r21
    15f0:	84 e0       	ldi	r24, 0x04	; 4
    15f2:	f8 2a       	or	r15, r24
    15f4:	28 c0       	rjmp	.+80     	; 0x1646 <vfprintf+0x10e>
    15f6:	98 e0       	ldi	r25, 0x08	; 8
    15f8:	f9 2a       	or	r15, r25
    15fa:	25 c0       	rjmp	.+74     	; 0x1646 <vfprintf+0x10e>
    15fc:	e0 e1       	ldi	r30, 0x10	; 16
    15fe:	fe 2a       	or	r15, r30
    1600:	22 c0       	rjmp	.+68     	; 0x1646 <vfprintf+0x10e>
    1602:	f7 fc       	sbrc	r15, 7
    1604:	29 c0       	rjmp	.+82     	; 0x1658 <vfprintf+0x120>
    1606:	89 2f       	mov	r24, r25
    1608:	80 53       	subi	r24, 0x30	; 48
    160a:	8a 30       	cpi	r24, 0x0A	; 10
    160c:	70 f4       	brcc	.+28     	; 0x162a <vfprintf+0xf2>
    160e:	f6 fe       	sbrs	r15, 6
    1610:	05 c0       	rjmp	.+10     	; 0x161c <vfprintf+0xe4>
    1612:	98 9c       	mul	r9, r8
    1614:	90 2c       	mov	r9, r0
    1616:	11 24       	eor	r1, r1
    1618:	98 0e       	add	r9, r24
    161a:	15 c0       	rjmp	.+42     	; 0x1646 <vfprintf+0x10e>
    161c:	e8 9c       	mul	r14, r8
    161e:	e0 2c       	mov	r14, r0
    1620:	11 24       	eor	r1, r1
    1622:	e8 0e       	add	r14, r24
    1624:	f0 e2       	ldi	r31, 0x20	; 32
    1626:	ff 2a       	or	r15, r31
    1628:	0e c0       	rjmp	.+28     	; 0x1646 <vfprintf+0x10e>
    162a:	9e 32       	cpi	r25, 0x2E	; 46
    162c:	29 f4       	brne	.+10     	; 0x1638 <vfprintf+0x100>
    162e:	f6 fc       	sbrc	r15, 6
    1630:	5f c1       	rjmp	.+702    	; 0x18f0 <vfprintf+0x3b8>
    1632:	40 e4       	ldi	r20, 0x40	; 64
    1634:	f4 2a       	or	r15, r20
    1636:	07 c0       	rjmp	.+14     	; 0x1646 <vfprintf+0x10e>
    1638:	9c 36       	cpi	r25, 0x6C	; 108
    163a:	19 f4       	brne	.+6      	; 0x1642 <vfprintf+0x10a>
    163c:	50 e8       	ldi	r21, 0x80	; 128
    163e:	f5 2a       	or	r15, r21
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <vfprintf+0x10e>
    1642:	98 36       	cpi	r25, 0x68	; 104
    1644:	49 f4       	brne	.+18     	; 0x1658 <vfprintf+0x120>
    1646:	f2 01       	movw	r30, r4
    1648:	23 fd       	sbrc	r18, 3
    164a:	95 91       	lpm	r25, Z+
    164c:	23 ff       	sbrs	r18, 3
    164e:	91 91       	ld	r25, Z+
    1650:	2f 01       	movw	r4, r30
    1652:	99 23       	and	r25, r25
    1654:	09 f0       	breq	.+2      	; 0x1658 <vfprintf+0x120>
    1656:	b8 cf       	rjmp	.-144    	; 0x15c8 <vfprintf+0x90>
    1658:	89 2f       	mov	r24, r25
    165a:	85 54       	subi	r24, 0x45	; 69
    165c:	83 30       	cpi	r24, 0x03	; 3
    165e:	18 f0       	brcs	.+6      	; 0x1666 <vfprintf+0x12e>
    1660:	80 52       	subi	r24, 0x20	; 32
    1662:	83 30       	cpi	r24, 0x03	; 3
    1664:	38 f4       	brcc	.+14     	; 0x1674 <vfprintf+0x13c>
    1666:	44 e0       	ldi	r20, 0x04	; 4
    1668:	50 e0       	ldi	r21, 0x00	; 0
    166a:	a4 0e       	add	r10, r20
    166c:	b5 1e       	adc	r11, r21
    166e:	5f e3       	ldi	r21, 0x3F	; 63
    1670:	59 83       	std	Y+1, r21	; 0x01
    1672:	0f c0       	rjmp	.+30     	; 0x1692 <vfprintf+0x15a>
    1674:	93 36       	cpi	r25, 0x63	; 99
    1676:	31 f0       	breq	.+12     	; 0x1684 <vfprintf+0x14c>
    1678:	93 37       	cpi	r25, 0x73	; 115
    167a:	79 f0       	breq	.+30     	; 0x169a <vfprintf+0x162>
    167c:	93 35       	cpi	r25, 0x53	; 83
    167e:	09 f0       	breq	.+2      	; 0x1682 <vfprintf+0x14a>
    1680:	52 c0       	rjmp	.+164    	; 0x1726 <vfprintf+0x1ee>
    1682:	1f c0       	rjmp	.+62     	; 0x16c2 <vfprintf+0x18a>
    1684:	f5 01       	movw	r30, r10
    1686:	80 81       	ld	r24, Z
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	42 e0       	ldi	r20, 0x02	; 2
    168c:	50 e0       	ldi	r21, 0x00	; 0
    168e:	a4 0e       	add	r10, r20
    1690:	b5 1e       	adc	r11, r21
    1692:	61 01       	movw	r12, r2
    1694:	01 e0       	ldi	r16, 0x01	; 1
    1696:	10 e0       	ldi	r17, 0x00	; 0
    1698:	11 c0       	rjmp	.+34     	; 0x16bc <vfprintf+0x184>
    169a:	f5 01       	movw	r30, r10
    169c:	c0 80       	ld	r12, Z
    169e:	d1 80       	ldd	r13, Z+1	; 0x01
    16a0:	f6 fc       	sbrc	r15, 6
    16a2:	03 c0       	rjmp	.+6      	; 0x16aa <vfprintf+0x172>
    16a4:	6f ef       	ldi	r22, 0xFF	; 255
    16a6:	7f ef       	ldi	r23, 0xFF	; 255
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <vfprintf+0x176>
    16aa:	69 2d       	mov	r22, r9
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	42 e0       	ldi	r20, 0x02	; 2
    16b0:	50 e0       	ldi	r21, 0x00	; 0
    16b2:	a4 0e       	add	r10, r20
    16b4:	b5 1e       	adc	r11, r21
    16b6:	c6 01       	movw	r24, r12
    16b8:	43 d1       	rcall	.+646    	; 0x1940 <strnlen>
    16ba:	8c 01       	movw	r16, r24
    16bc:	5f e7       	ldi	r21, 0x7F	; 127
    16be:	f5 22       	and	r15, r21
    16c0:	13 c0       	rjmp	.+38     	; 0x16e8 <vfprintf+0x1b0>
    16c2:	f5 01       	movw	r30, r10
    16c4:	c0 80       	ld	r12, Z
    16c6:	d1 80       	ldd	r13, Z+1	; 0x01
    16c8:	f6 fc       	sbrc	r15, 6
    16ca:	03 c0       	rjmp	.+6      	; 0x16d2 <vfprintf+0x19a>
    16cc:	6f ef       	ldi	r22, 0xFF	; 255
    16ce:	7f ef       	ldi	r23, 0xFF	; 255
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <vfprintf+0x19e>
    16d2:	69 2d       	mov	r22, r9
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	42 e0       	ldi	r20, 0x02	; 2
    16d8:	50 e0       	ldi	r21, 0x00	; 0
    16da:	a4 0e       	add	r10, r20
    16dc:	b5 1e       	adc	r11, r21
    16de:	c6 01       	movw	r24, r12
    16e0:	24 d1       	rcall	.+584    	; 0x192a <strnlen_P>
    16e2:	8c 01       	movw	r16, r24
    16e4:	50 e8       	ldi	r21, 0x80	; 128
    16e6:	f5 2a       	or	r15, r21
    16e8:	f3 fe       	sbrs	r15, 3
    16ea:	06 c0       	rjmp	.+12     	; 0x16f8 <vfprintf+0x1c0>
    16ec:	18 c0       	rjmp	.+48     	; 0x171e <vfprintf+0x1e6>
    16ee:	80 e2       	ldi	r24, 0x20	; 32
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	b3 01       	movw	r22, r6
    16f4:	30 d1       	rcall	.+608    	; 0x1956 <fputc>
    16f6:	ea 94       	dec	r14
    16f8:	8e 2d       	mov	r24, r14
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	08 17       	cp	r16, r24
    16fe:	19 07       	cpc	r17, r25
    1700:	b0 f3       	brcs	.-20     	; 0x16ee <vfprintf+0x1b6>
    1702:	0d c0       	rjmp	.+26     	; 0x171e <vfprintf+0x1e6>
    1704:	f6 01       	movw	r30, r12
    1706:	f7 fc       	sbrc	r15, 7
    1708:	85 91       	lpm	r24, Z+
    170a:	f7 fe       	sbrs	r15, 7
    170c:	81 91       	ld	r24, Z+
    170e:	6f 01       	movw	r12, r30
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	b3 01       	movw	r22, r6
    1714:	20 d1       	rcall	.+576    	; 0x1956 <fputc>
    1716:	e1 10       	cpse	r14, r1
    1718:	ea 94       	dec	r14
    171a:	01 50       	subi	r16, 0x01	; 1
    171c:	10 40       	sbci	r17, 0x00	; 0
    171e:	01 15       	cp	r16, r1
    1720:	11 05       	cpc	r17, r1
    1722:	81 f7       	brne	.-32     	; 0x1704 <vfprintf+0x1cc>
    1724:	e2 c0       	rjmp	.+452    	; 0x18ea <vfprintf+0x3b2>
    1726:	94 36       	cpi	r25, 0x64	; 100
    1728:	11 f0       	breq	.+4      	; 0x172e <vfprintf+0x1f6>
    172a:	99 36       	cpi	r25, 0x69	; 105
    172c:	61 f5       	brne	.+88     	; 0x1786 <vfprintf+0x24e>
    172e:	f7 fe       	sbrs	r15, 7
    1730:	08 c0       	rjmp	.+16     	; 0x1742 <vfprintf+0x20a>
    1732:	f5 01       	movw	r30, r10
    1734:	20 81       	ld	r18, Z
    1736:	31 81       	ldd	r19, Z+1	; 0x01
    1738:	42 81       	ldd	r20, Z+2	; 0x02
    173a:	53 81       	ldd	r21, Z+3	; 0x03
    173c:	84 e0       	ldi	r24, 0x04	; 4
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0a c0       	rjmp	.+20     	; 0x1756 <vfprintf+0x21e>
    1742:	f5 01       	movw	r30, r10
    1744:	80 81       	ld	r24, Z
    1746:	91 81       	ldd	r25, Z+1	; 0x01
    1748:	9c 01       	movw	r18, r24
    174a:	44 27       	eor	r20, r20
    174c:	37 fd       	sbrc	r19, 7
    174e:	40 95       	com	r20
    1750:	54 2f       	mov	r21, r20
    1752:	82 e0       	ldi	r24, 0x02	; 2
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	a8 0e       	add	r10, r24
    1758:	b9 1e       	adc	r11, r25
    175a:	9f e6       	ldi	r25, 0x6F	; 111
    175c:	f9 22       	and	r15, r25
    175e:	57 ff       	sbrs	r21, 7
    1760:	09 c0       	rjmp	.+18     	; 0x1774 <vfprintf+0x23c>
    1762:	50 95       	com	r21
    1764:	40 95       	com	r20
    1766:	30 95       	com	r19
    1768:	21 95       	neg	r18
    176a:	3f 4f       	sbci	r19, 0xFF	; 255
    176c:	4f 4f       	sbci	r20, 0xFF	; 255
    176e:	5f 4f       	sbci	r21, 0xFF	; 255
    1770:	e0 e8       	ldi	r30, 0x80	; 128
    1772:	fe 2a       	or	r15, r30
    1774:	ca 01       	movw	r24, r20
    1776:	b9 01       	movw	r22, r18
    1778:	a1 01       	movw	r20, r2
    177a:	2a e0       	ldi	r18, 0x0A	; 10
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	17 d1       	rcall	.+558    	; 0x19ae <__ultoa_invert>
    1780:	d8 2e       	mov	r13, r24
    1782:	d2 18       	sub	r13, r2
    1784:	3f c0       	rjmp	.+126    	; 0x1804 <vfprintf+0x2cc>
    1786:	95 37       	cpi	r25, 0x75	; 117
    1788:	29 f4       	brne	.+10     	; 0x1794 <vfprintf+0x25c>
    178a:	1f 2d       	mov	r17, r15
    178c:	1f 7e       	andi	r17, 0xEF	; 239
    178e:	2a e0       	ldi	r18, 0x0A	; 10
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	1d c0       	rjmp	.+58     	; 0x17ce <vfprintf+0x296>
    1794:	1f 2d       	mov	r17, r15
    1796:	19 7f       	andi	r17, 0xF9	; 249
    1798:	9f 36       	cpi	r25, 0x6F	; 111
    179a:	61 f0       	breq	.+24     	; 0x17b4 <vfprintf+0x27c>
    179c:	90 37       	cpi	r25, 0x70	; 112
    179e:	20 f4       	brcc	.+8      	; 0x17a8 <vfprintf+0x270>
    17a0:	98 35       	cpi	r25, 0x58	; 88
    17a2:	09 f0       	breq	.+2      	; 0x17a6 <vfprintf+0x26e>
    17a4:	a5 c0       	rjmp	.+330    	; 0x18f0 <vfprintf+0x3b8>
    17a6:	0f c0       	rjmp	.+30     	; 0x17c6 <vfprintf+0x28e>
    17a8:	90 37       	cpi	r25, 0x70	; 112
    17aa:	39 f0       	breq	.+14     	; 0x17ba <vfprintf+0x282>
    17ac:	98 37       	cpi	r25, 0x78	; 120
    17ae:	09 f0       	breq	.+2      	; 0x17b2 <vfprintf+0x27a>
    17b0:	9f c0       	rjmp	.+318    	; 0x18f0 <vfprintf+0x3b8>
    17b2:	04 c0       	rjmp	.+8      	; 0x17bc <vfprintf+0x284>
    17b4:	28 e0       	ldi	r18, 0x08	; 8
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	0a c0       	rjmp	.+20     	; 0x17ce <vfprintf+0x296>
    17ba:	10 61       	ori	r17, 0x10	; 16
    17bc:	14 fd       	sbrc	r17, 4
    17be:	14 60       	ori	r17, 0x04	; 4
    17c0:	20 e1       	ldi	r18, 0x10	; 16
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	04 c0       	rjmp	.+8      	; 0x17ce <vfprintf+0x296>
    17c6:	14 fd       	sbrc	r17, 4
    17c8:	16 60       	ori	r17, 0x06	; 6
    17ca:	20 e1       	ldi	r18, 0x10	; 16
    17cc:	32 e0       	ldi	r19, 0x02	; 2
    17ce:	17 ff       	sbrs	r17, 7
    17d0:	08 c0       	rjmp	.+16     	; 0x17e2 <vfprintf+0x2aa>
    17d2:	f5 01       	movw	r30, r10
    17d4:	60 81       	ld	r22, Z
    17d6:	71 81       	ldd	r23, Z+1	; 0x01
    17d8:	82 81       	ldd	r24, Z+2	; 0x02
    17da:	93 81       	ldd	r25, Z+3	; 0x03
    17dc:	44 e0       	ldi	r20, 0x04	; 4
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	08 c0       	rjmp	.+16     	; 0x17f2 <vfprintf+0x2ba>
    17e2:	f5 01       	movw	r30, r10
    17e4:	80 81       	ld	r24, Z
    17e6:	91 81       	ldd	r25, Z+1	; 0x01
    17e8:	bc 01       	movw	r22, r24
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	42 e0       	ldi	r20, 0x02	; 2
    17f0:	50 e0       	ldi	r21, 0x00	; 0
    17f2:	a4 0e       	add	r10, r20
    17f4:	b5 1e       	adc	r11, r21
    17f6:	a1 01       	movw	r20, r2
    17f8:	da d0       	rcall	.+436    	; 0x19ae <__ultoa_invert>
    17fa:	d8 2e       	mov	r13, r24
    17fc:	d2 18       	sub	r13, r2
    17fe:	8f e7       	ldi	r24, 0x7F	; 127
    1800:	f8 2e       	mov	r15, r24
    1802:	f1 22       	and	r15, r17
    1804:	f6 fe       	sbrs	r15, 6
    1806:	0b c0       	rjmp	.+22     	; 0x181e <vfprintf+0x2e6>
    1808:	5e ef       	ldi	r21, 0xFE	; 254
    180a:	f5 22       	and	r15, r21
    180c:	d9 14       	cp	r13, r9
    180e:	38 f4       	brcc	.+14     	; 0x181e <vfprintf+0x2e6>
    1810:	f4 fe       	sbrs	r15, 4
    1812:	07 c0       	rjmp	.+14     	; 0x1822 <vfprintf+0x2ea>
    1814:	f2 fc       	sbrc	r15, 2
    1816:	05 c0       	rjmp	.+10     	; 0x1822 <vfprintf+0x2ea>
    1818:	8f ee       	ldi	r24, 0xEF	; 239
    181a:	f8 22       	and	r15, r24
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <vfprintf+0x2ea>
    181e:	1d 2d       	mov	r17, r13
    1820:	01 c0       	rjmp	.+2      	; 0x1824 <vfprintf+0x2ec>
    1822:	19 2d       	mov	r17, r9
    1824:	f4 fe       	sbrs	r15, 4
    1826:	0d c0       	rjmp	.+26     	; 0x1842 <vfprintf+0x30a>
    1828:	fe 01       	movw	r30, r28
    182a:	ed 0d       	add	r30, r13
    182c:	f1 1d       	adc	r31, r1
    182e:	80 81       	ld	r24, Z
    1830:	80 33       	cpi	r24, 0x30	; 48
    1832:	19 f4       	brne	.+6      	; 0x183a <vfprintf+0x302>
    1834:	99 ee       	ldi	r25, 0xE9	; 233
    1836:	f9 22       	and	r15, r25
    1838:	08 c0       	rjmp	.+16     	; 0x184a <vfprintf+0x312>
    183a:	1f 5f       	subi	r17, 0xFF	; 255
    183c:	f2 fe       	sbrs	r15, 2
    183e:	05 c0       	rjmp	.+10     	; 0x184a <vfprintf+0x312>
    1840:	03 c0       	rjmp	.+6      	; 0x1848 <vfprintf+0x310>
    1842:	8f 2d       	mov	r24, r15
    1844:	86 78       	andi	r24, 0x86	; 134
    1846:	09 f0       	breq	.+2      	; 0x184a <vfprintf+0x312>
    1848:	1f 5f       	subi	r17, 0xFF	; 255
    184a:	0f 2d       	mov	r16, r15
    184c:	f3 fc       	sbrc	r15, 3
    184e:	13 c0       	rjmp	.+38     	; 0x1876 <vfprintf+0x33e>
    1850:	f0 fe       	sbrs	r15, 0
    1852:	0e c0       	rjmp	.+28     	; 0x1870 <vfprintf+0x338>
    1854:	1e 15       	cp	r17, r14
    1856:	10 f0       	brcs	.+4      	; 0x185c <vfprintf+0x324>
    1858:	9d 2c       	mov	r9, r13
    185a:	0a c0       	rjmp	.+20     	; 0x1870 <vfprintf+0x338>
    185c:	9d 2c       	mov	r9, r13
    185e:	9e 0c       	add	r9, r14
    1860:	91 1a       	sub	r9, r17
    1862:	1e 2d       	mov	r17, r14
    1864:	05 c0       	rjmp	.+10     	; 0x1870 <vfprintf+0x338>
    1866:	80 e2       	ldi	r24, 0x20	; 32
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	b3 01       	movw	r22, r6
    186c:	74 d0       	rcall	.+232    	; 0x1956 <fputc>
    186e:	1f 5f       	subi	r17, 0xFF	; 255
    1870:	1e 15       	cp	r17, r14
    1872:	c8 f3       	brcs	.-14     	; 0x1866 <vfprintf+0x32e>
    1874:	04 c0       	rjmp	.+8      	; 0x187e <vfprintf+0x346>
    1876:	1e 15       	cp	r17, r14
    1878:	10 f4       	brcc	.+4      	; 0x187e <vfprintf+0x346>
    187a:	e1 1a       	sub	r14, r17
    187c:	01 c0       	rjmp	.+2      	; 0x1880 <vfprintf+0x348>
    187e:	ee 24       	eor	r14, r14
    1880:	04 ff       	sbrs	r16, 4
    1882:	0e c0       	rjmp	.+28     	; 0x18a0 <vfprintf+0x368>
    1884:	80 e3       	ldi	r24, 0x30	; 48
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	b3 01       	movw	r22, r6
    188a:	65 d0       	rcall	.+202    	; 0x1956 <fputc>
    188c:	02 ff       	sbrs	r16, 2
    188e:	1b c0       	rjmp	.+54     	; 0x18c6 <vfprintf+0x38e>
    1890:	01 fd       	sbrc	r16, 1
    1892:	03 c0       	rjmp	.+6      	; 0x189a <vfprintf+0x362>
    1894:	88 e7       	ldi	r24, 0x78	; 120
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	0e c0       	rjmp	.+28     	; 0x18b6 <vfprintf+0x37e>
    189a:	88 e5       	ldi	r24, 0x58	; 88
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0b c0       	rjmp	.+22     	; 0x18b6 <vfprintf+0x37e>
    18a0:	80 2f       	mov	r24, r16
    18a2:	86 78       	andi	r24, 0x86	; 134
    18a4:	81 f0       	breq	.+32     	; 0x18c6 <vfprintf+0x38e>
    18a6:	01 ff       	sbrs	r16, 1
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <vfprintf+0x376>
    18aa:	8b e2       	ldi	r24, 0x2B	; 43
    18ac:	01 c0       	rjmp	.+2      	; 0x18b0 <vfprintf+0x378>
    18ae:	80 e2       	ldi	r24, 0x20	; 32
    18b0:	f7 fc       	sbrc	r15, 7
    18b2:	8d e2       	ldi	r24, 0x2D	; 45
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	b3 01       	movw	r22, r6
    18b8:	4e d0       	rcall	.+156    	; 0x1956 <fputc>
    18ba:	05 c0       	rjmp	.+10     	; 0x18c6 <vfprintf+0x38e>
    18bc:	80 e3       	ldi	r24, 0x30	; 48
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	b3 01       	movw	r22, r6
    18c2:	49 d0       	rcall	.+146    	; 0x1956 <fputc>
    18c4:	9a 94       	dec	r9
    18c6:	d9 14       	cp	r13, r9
    18c8:	c8 f3       	brcs	.-14     	; 0x18bc <vfprintf+0x384>
    18ca:	da 94       	dec	r13
    18cc:	f1 01       	movw	r30, r2
    18ce:	ed 0d       	add	r30, r13
    18d0:	f1 1d       	adc	r31, r1
    18d2:	80 81       	ld	r24, Z
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	b3 01       	movw	r22, r6
    18d8:	3e d0       	rcall	.+124    	; 0x1956 <fputc>
    18da:	dd 20       	and	r13, r13
    18dc:	b1 f7       	brne	.-20     	; 0x18ca <vfprintf+0x392>
    18de:	05 c0       	rjmp	.+10     	; 0x18ea <vfprintf+0x3b2>
    18e0:	80 e2       	ldi	r24, 0x20	; 32
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	b3 01       	movw	r22, r6
    18e6:	37 d0       	rcall	.+110    	; 0x1956 <fputc>
    18e8:	ea 94       	dec	r14
    18ea:	ee 20       	and	r14, r14
    18ec:	c9 f7       	brne	.-14     	; 0x18e0 <vfprintf+0x3a8>
    18ee:	50 ce       	rjmp	.-864    	; 0x1590 <vfprintf+0x58>
    18f0:	f3 01       	movw	r30, r6
    18f2:	66 81       	ldd	r22, Z+6	; 0x06
    18f4:	77 81       	ldd	r23, Z+7	; 0x07
    18f6:	cb 01       	movw	r24, r22
    18f8:	2b 96       	adiw	r28, 0x0b	; 11
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	cd bf       	out	0x3d, r28	; 61
    1904:	cf 91       	pop	r28
    1906:	df 91       	pop	r29
    1908:	1f 91       	pop	r17
    190a:	0f 91       	pop	r16
    190c:	ff 90       	pop	r15
    190e:	ef 90       	pop	r14
    1910:	df 90       	pop	r13
    1912:	cf 90       	pop	r12
    1914:	bf 90       	pop	r11
    1916:	af 90       	pop	r10
    1918:	9f 90       	pop	r9
    191a:	8f 90       	pop	r8
    191c:	7f 90       	pop	r7
    191e:	6f 90       	pop	r6
    1920:	5f 90       	pop	r5
    1922:	4f 90       	pop	r4
    1924:	3f 90       	pop	r3
    1926:	2f 90       	pop	r2
    1928:	08 95       	ret

0000192a <strnlen_P>:
    192a:	fc 01       	movw	r30, r24
    192c:	05 90       	lpm	r0, Z+
    192e:	61 50       	subi	r22, 0x01	; 1
    1930:	70 40       	sbci	r23, 0x00	; 0
    1932:	01 10       	cpse	r0, r1
    1934:	d8 f7       	brcc	.-10     	; 0x192c <strnlen_P+0x2>
    1936:	80 95       	com	r24
    1938:	90 95       	com	r25
    193a:	8e 0f       	add	r24, r30
    193c:	9f 1f       	adc	r25, r31
    193e:	08 95       	ret

00001940 <strnlen>:
    1940:	fc 01       	movw	r30, r24
    1942:	61 50       	subi	r22, 0x01	; 1
    1944:	70 40       	sbci	r23, 0x00	; 0
    1946:	01 90       	ld	r0, Z+
    1948:	01 10       	cpse	r0, r1
    194a:	d8 f7       	brcc	.-10     	; 0x1942 <strnlen+0x2>
    194c:	80 95       	com	r24
    194e:	90 95       	com	r25
    1950:	8e 0f       	add	r24, r30
    1952:	9f 1f       	adc	r25, r31
    1954:	08 95       	ret

00001956 <fputc>:
    1956:	0f 93       	push	r16
    1958:	1f 93       	push	r17
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
    195e:	8c 01       	movw	r16, r24
    1960:	eb 01       	movw	r28, r22
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	81 ff       	sbrs	r24, 1
    1966:	1b c0       	rjmp	.+54     	; 0x199e <fputc+0x48>
    1968:	82 ff       	sbrs	r24, 2
    196a:	0d c0       	rjmp	.+26     	; 0x1986 <fputc+0x30>
    196c:	2e 81       	ldd	r18, Y+6	; 0x06
    196e:	3f 81       	ldd	r19, Y+7	; 0x07
    1970:	8c 81       	ldd	r24, Y+4	; 0x04
    1972:	9d 81       	ldd	r25, Y+5	; 0x05
    1974:	28 17       	cp	r18, r24
    1976:	39 07       	cpc	r19, r25
    1978:	64 f4       	brge	.+24     	; 0x1992 <fputc+0x3c>
    197a:	e8 81       	ld	r30, Y
    197c:	f9 81       	ldd	r31, Y+1	; 0x01
    197e:	01 93       	st	Z+, r16
    1980:	f9 83       	std	Y+1, r31	; 0x01
    1982:	e8 83       	st	Y, r30
    1984:	06 c0       	rjmp	.+12     	; 0x1992 <fputc+0x3c>
    1986:	e8 85       	ldd	r30, Y+8	; 0x08
    1988:	f9 85       	ldd	r31, Y+9	; 0x09
    198a:	80 2f       	mov	r24, r16
    198c:	09 95       	icall
    198e:	89 2b       	or	r24, r25
    1990:	31 f4       	brne	.+12     	; 0x199e <fputc+0x48>
    1992:	8e 81       	ldd	r24, Y+6	; 0x06
    1994:	9f 81       	ldd	r25, Y+7	; 0x07
    1996:	01 96       	adiw	r24, 0x01	; 1
    1998:	9f 83       	std	Y+7, r25	; 0x07
    199a:	8e 83       	std	Y+6, r24	; 0x06
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <fputc+0x4c>
    199e:	0f ef       	ldi	r16, 0xFF	; 255
    19a0:	1f ef       	ldi	r17, 0xFF	; 255
    19a2:	c8 01       	movw	r24, r16
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	1f 91       	pop	r17
    19aa:	0f 91       	pop	r16
    19ac:	08 95       	ret

000019ae <__ultoa_invert>:
    19ae:	fa 01       	movw	r30, r20
    19b0:	aa 27       	eor	r26, r26
    19b2:	28 30       	cpi	r18, 0x08	; 8
    19b4:	51 f1       	breq	.+84     	; 0x1a0a <__ultoa_invert+0x5c>
    19b6:	20 31       	cpi	r18, 0x10	; 16
    19b8:	81 f1       	breq	.+96     	; 0x1a1a <__ultoa_invert+0x6c>
    19ba:	e8 94       	clt
    19bc:	6f 93       	push	r22
    19be:	6e 7f       	andi	r22, 0xFE	; 254
    19c0:	6e 5f       	subi	r22, 0xFE	; 254
    19c2:	7f 4f       	sbci	r23, 0xFF	; 255
    19c4:	8f 4f       	sbci	r24, 0xFF	; 255
    19c6:	9f 4f       	sbci	r25, 0xFF	; 255
    19c8:	af 4f       	sbci	r26, 0xFF	; 255
    19ca:	b1 e0       	ldi	r27, 0x01	; 1
    19cc:	3e d0       	rcall	.+124    	; 0x1a4a <__ultoa_invert+0x9c>
    19ce:	b4 e0       	ldi	r27, 0x04	; 4
    19d0:	3c d0       	rcall	.+120    	; 0x1a4a <__ultoa_invert+0x9c>
    19d2:	67 0f       	add	r22, r23
    19d4:	78 1f       	adc	r23, r24
    19d6:	89 1f       	adc	r24, r25
    19d8:	9a 1f       	adc	r25, r26
    19da:	a1 1d       	adc	r26, r1
    19dc:	68 0f       	add	r22, r24
    19de:	79 1f       	adc	r23, r25
    19e0:	8a 1f       	adc	r24, r26
    19e2:	91 1d       	adc	r25, r1
    19e4:	a1 1d       	adc	r26, r1
    19e6:	6a 0f       	add	r22, r26
    19e8:	71 1d       	adc	r23, r1
    19ea:	81 1d       	adc	r24, r1
    19ec:	91 1d       	adc	r25, r1
    19ee:	a1 1d       	adc	r26, r1
    19f0:	20 d0       	rcall	.+64     	; 0x1a32 <__ultoa_invert+0x84>
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <__ultoa_invert+0x48>
    19f4:	68 94       	set
    19f6:	3f 91       	pop	r19
    19f8:	2a e0       	ldi	r18, 0x0A	; 10
    19fa:	26 9f       	mul	r18, r22
    19fc:	11 24       	eor	r1, r1
    19fe:	30 19       	sub	r19, r0
    1a00:	30 5d       	subi	r19, 0xD0	; 208
    1a02:	31 93       	st	Z+, r19
    1a04:	de f6       	brtc	.-74     	; 0x19bc <__ultoa_invert+0xe>
    1a06:	cf 01       	movw	r24, r30
    1a08:	08 95       	ret
    1a0a:	46 2f       	mov	r20, r22
    1a0c:	47 70       	andi	r20, 0x07	; 7
    1a0e:	40 5d       	subi	r20, 0xD0	; 208
    1a10:	41 93       	st	Z+, r20
    1a12:	b3 e0       	ldi	r27, 0x03	; 3
    1a14:	0f d0       	rcall	.+30     	; 0x1a34 <__ultoa_invert+0x86>
    1a16:	c9 f7       	brne	.-14     	; 0x1a0a <__ultoa_invert+0x5c>
    1a18:	f6 cf       	rjmp	.-20     	; 0x1a06 <__ultoa_invert+0x58>
    1a1a:	46 2f       	mov	r20, r22
    1a1c:	4f 70       	andi	r20, 0x0F	; 15
    1a1e:	40 5d       	subi	r20, 0xD0	; 208
    1a20:	4a 33       	cpi	r20, 0x3A	; 58
    1a22:	18 f0       	brcs	.+6      	; 0x1a2a <__ultoa_invert+0x7c>
    1a24:	49 5d       	subi	r20, 0xD9	; 217
    1a26:	31 fd       	sbrc	r19, 1
    1a28:	40 52       	subi	r20, 0x20	; 32
    1a2a:	41 93       	st	Z+, r20
    1a2c:	02 d0       	rcall	.+4      	; 0x1a32 <__ultoa_invert+0x84>
    1a2e:	a9 f7       	brne	.-22     	; 0x1a1a <__ultoa_invert+0x6c>
    1a30:	ea cf       	rjmp	.-44     	; 0x1a06 <__ultoa_invert+0x58>
    1a32:	b4 e0       	ldi	r27, 0x04	; 4
    1a34:	a6 95       	lsr	r26
    1a36:	97 95       	ror	r25
    1a38:	87 95       	ror	r24
    1a3a:	77 95       	ror	r23
    1a3c:	67 95       	ror	r22
    1a3e:	ba 95       	dec	r27
    1a40:	c9 f7       	brne	.-14     	; 0x1a34 <__ultoa_invert+0x86>
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	61 05       	cpc	r22, r1
    1a46:	71 05       	cpc	r23, r1
    1a48:	08 95       	ret
    1a4a:	9b 01       	movw	r18, r22
    1a4c:	ac 01       	movw	r20, r24
    1a4e:	0a 2e       	mov	r0, r26
    1a50:	06 94       	lsr	r0
    1a52:	57 95       	ror	r21
    1a54:	47 95       	ror	r20
    1a56:	37 95       	ror	r19
    1a58:	27 95       	ror	r18
    1a5a:	ba 95       	dec	r27
    1a5c:	c9 f7       	brne	.-14     	; 0x1a50 <__ultoa_invert+0xa2>
    1a5e:	62 0f       	add	r22, r18
    1a60:	73 1f       	adc	r23, r19
    1a62:	84 1f       	adc	r24, r20
    1a64:	95 1f       	adc	r25, r21
    1a66:	a0 1d       	adc	r26, r0
    1a68:	08 95       	ret

00001a6a <_exit>:
    1a6a:	f8 94       	cli

00001a6c <__stop_program>:
    1a6c:	ff cf       	rjmp	.-2      	; 0x1a6c <__stop_program>
