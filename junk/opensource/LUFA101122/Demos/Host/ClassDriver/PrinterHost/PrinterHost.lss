
PrinterHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00001aa4  00001b38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001aa4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080015c  0080015c  00001b94  2**0
                  ALLOC
  3 .stab         00001014  00000000  00000000  00001b94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000315  00000000  00000000  00002ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000006d0  00000000  00000000  00002ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000e82  00000000  00000000  0000358d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ac29  00000000  00000000  0000440f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002aad  00000000  00000000  0000f038  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000754f  00000000  00000000  00011ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000aa0  00000000  00000000  00019034  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004244  00000000  00000000  00019ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004f12  00000000  00000000  0001dd18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000768  00000000  00000000  00022c2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return USB_Host_SendControlRequest(Buffer);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointNum)
{
       0:	65 c1       	rjmp	.+714    	; 0x2cc <__ctors_end>
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       2:	00 00       	nop
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       4:	81 c1       	rjmp	.+770    	; 0x308 <__bad_interrupt>
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       6:	00 00       	nop

	return ErrorCode;
}

uint16_t PRNT_Host_BytesReceived(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo)
{
       8:	7f c1       	rjmp	.+766    	; 0x308 <__bad_interrupt>
       a:	00 00       	nop
       c:	7d c1       	rjmp	.+762    	; 0x308 <__bad_interrupt>
       e:	00 00       	nop
      10:	7b c1       	rjmp	.+758    	; 0x308 <__bad_interrupt>
      12:	00 00       	nop
      14:	79 c1       	rjmp	.+754    	; 0x308 <__bad_interrupt>
      16:	00 00       	nop
      18:	77 c1       	rjmp	.+750    	; 0x308 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	75 c1       	rjmp	.+746    	; 0x308 <__bad_interrupt>
      1e:	00 00       	nop
      20:	73 c1       	rjmp	.+742    	; 0x308 <__bad_interrupt>
      22:	00 00       	nop
      24:	71 c1       	rjmp	.+738    	; 0x308 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c5       	rjmp	.+2890   	; 0xb74 <__vector_10>
      2a:	00 00       	nop
      2c:	6d c1       	rjmp	.+730    	; 0x308 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6b c1       	rjmp	.+726    	; 0x308 <__bad_interrupt>
      32:	00 00       	nop
      34:	69 c1       	rjmp	.+722    	; 0x308 <__bad_interrupt>
      36:	00 00       	nop
      38:	67 c1       	rjmp	.+718    	; 0x308 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	65 c1       	rjmp	.+714    	; 0x308 <__bad_interrupt>
      3e:	00 00       	nop
      40:	63 c1       	rjmp	.+710    	; 0x308 <__bad_interrupt>
      42:	00 00       	nop
      44:	61 c1       	rjmp	.+706    	; 0x308 <__bad_interrupt>
      46:	00 00       	nop
      48:	5f c1       	rjmp	.+702    	; 0x308 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5d c1       	rjmp	.+698    	; 0x308 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5b c1       	rjmp	.+694    	; 0x308 <__bad_interrupt>
      52:	00 00       	nop
      54:	59 c1       	rjmp	.+690    	; 0x308 <__bad_interrupt>
      56:	00 00       	nop
      58:	57 c1       	rjmp	.+686    	; 0x308 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	55 c1       	rjmp	.+682    	; 0x308 <__bad_interrupt>
      5e:	00 00       	nop
      60:	53 c1       	rjmp	.+678    	; 0x308 <__bad_interrupt>
      62:	00 00       	nop
      64:	51 c1       	rjmp	.+674    	; 0x308 <__bad_interrupt>
      66:	00 00       	nop
      68:	4f c1       	rjmp	.+670    	; 0x308 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4d c1       	rjmp	.+666    	; 0x308 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4b c1       	rjmp	.+662    	; 0x308 <__bad_interrupt>
      72:	00 00       	nop
      74:	49 c1       	rjmp	.+658    	; 0x308 <__bad_interrupt>
      76:	00 00       	nop
      78:	47 c1       	rjmp	.+654    	; 0x308 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	45 c1       	rjmp	.+650    	; 0x308 <__bad_interrupt>
      7e:	00 00       	nop
      80:	43 c1       	rjmp	.+646    	; 0x308 <__bad_interrupt>
      82:	00 00       	nop
      84:	41 c1       	rjmp	.+642    	; 0x308 <__bad_interrupt>
      86:	00 00       	nop
      88:	3f c1       	rjmp	.+638    	; 0x308 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3d c1       	rjmp	.+634    	; 0x308 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3b c1       	rjmp	.+630    	; 0x308 <__bad_interrupt>
      92:	00 00       	nop
      94:	39 c1       	rjmp	.+626    	; 0x308 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4168>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4160>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4152>:
     11d:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     12d:	68 65 64 2e 0d 0a 00                                hed....

00000134 <__c.4147>:
     134:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     144:	0d 0a 00                                            ...

00000147 <__c.4123>:
     147:	54 65 73 74 20 50 61 67 65 20 53 65 6e 74 2e 0d     Test Page Sent..
     157:	0a 00                                               ..

00000159 <__c.4121>:
     159:	45 72 72 6f 72 20 53 65 6e 64 69 6e 67 20 50 61     Error Sending Pa
     169:	67 65 20 44 61 74 61 2e 0d 0a 00                    ge Data....

00000174 <__c.4119>:
     174:	53 65 6e 64 69 6e 67 20 54 65 73 74 20 50 61 67     Sending Test Pag
     184:	65 20 28 25 64 20 62 79 74 65 73 29 2e 2e 2e 0d     e (%d bytes)....
     194:	0a 00                                               ..

00000196 <__c.4115>:
     196:	44 65 76 69 63 65 20 49 44 3a 20 25 73 2e 0d 0a     Device ID: %s...
     1a6:	00                                                  .

000001a7 <__c.4113>:
     1a7:	45 72 72 6f 72 20 47 65 74 74 69 6e 67 20 44 65     Error Getting De
     1b7:	76 69 63 65 20 49 44 2e 0d 0a 00                    vice ID....

000001c2 <__c.4110>:
     1c2:	52 65 74 72 69 65 76 69 6e 67 20 44 65 76 69 63     Retrieving Devic
     1d2:	65 20 49 44 2e 2e 2e 0d 0a 00                       e ID......

000001dc <__c.4107>:
     1dc:	50 72 69 6e 74 65 72 20 44 65 76 69 63 65 20 45     Printer Device E
     1ec:	6e 75 6d 65 72 61 74 65 64 2e 0d 0a 00              numerated....

000001f9 <__c.4105>:
     1f9:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 42 69     Error Setting Bi
     209:	64 69 72 65 63 74 69 6f 6e 61 6c 20 4d 6f 64 65     directional Mode
     219:	2e 0d 0a 00                                         ....

0000021d <__c.4103>:
     21d:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     22d:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     23d:	6f 6e 2e 0d 0a 00                                   on....

00000243 <__c.4101>:
     243:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     253:	4e 6f 74 20 61 20 56 61 6c 69 64 20 50 72 69 6e     Not a Valid Prin
     263:	74 65 72 20 43 6c 61 73 73 20 44 65 76 69 63 65     ter Class Device
     273:	2e 0d 0a 00                                         ....

00000277 <__c.4098>:
     277:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     287:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     297:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000002a4 <__c.4093>:
     2a4:	1b 5b 33 36 6d 50 72 69 6e 74 65 72 20 48 6f 73     .[36mPrinter Hos
     2b4:	74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d     t Demo running..
     2c4:	0a 1b 5b 33 37 6d 00 00                             ..[37m..

000002cc <__ctors_end>:
     2cc:	11 24       	eor	r1, r1
     2ce:	1f be       	out	0x3f, r1	; 63
     2d0:	cf ef       	ldi	r28, 0xFF	; 255
     2d2:	d0 e2       	ldi	r29, 0x20	; 32
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	cd bf       	out	0x3d, r28	; 61

000002d8 <__do_copy_data>:
     2d8:	11 e0       	ldi	r17, 0x01	; 1
     2da:	a0 e0       	ldi	r26, 0x00	; 0
     2dc:	b1 e0       	ldi	r27, 0x01	; 1
     2de:	e4 ea       	ldi	r30, 0xA4	; 164
     2e0:	fa e1       	ldi	r31, 0x1A	; 26
     2e2:	00 e0       	ldi	r16, 0x00	; 0
     2e4:	0b bf       	out	0x3b, r16	; 59
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <__do_copy_data+0x14>
     2e8:	07 90       	elpm	r0, Z+
     2ea:	0d 92       	st	X+, r0
     2ec:	ac 35       	cpi	r26, 0x5C	; 92
     2ee:	b1 07       	cpc	r27, r17
     2f0:	d9 f7       	brne	.-10     	; 0x2e8 <__do_copy_data+0x10>

000002f2 <__do_clear_bss>:
     2f2:	11 e0       	ldi	r17, 0x01	; 1
     2f4:	ac e5       	ldi	r26, 0x5C	; 92
     2f6:	b1 e0       	ldi	r27, 0x01	; 1
     2f8:	01 c0       	rjmp	.+2      	; 0x2fc <.do_clear_bss_start>

000002fa <.do_clear_bss_loop>:
     2fa:	1d 92       	st	X+, r1

000002fc <.do_clear_bss_start>:
     2fc:	af 36       	cpi	r26, 0x6F	; 111
     2fe:	b1 07       	cpc	r27, r17
     300:	e1 f7       	brne	.-8      	; 0x2fa <.do_clear_bss_loop>
     302:	98 d0       	rcall	.+304    	; 0x434 <main>
     304:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <_exit>

00000308 <__bad_interrupt>:
     308:	7b ce       	rjmp	.-778    	; 0x0 <__vectors>

0000030a <EVENT_USB_Host_DeviceEnumerationComplete>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     30a:	8b b1       	in	r24, 0x0b	; 11
     30c:	8f 70       	andi	r24, 0x0F	; 15
     30e:	80 66       	ori	r24, 0x60	; 96
     310:	8b b9       	out	0x0b, r24	; 11
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     312:	08 95       	ret

00000314 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     314:	90 91 68 01 	lds	r25, 0x0168
     318:	2d b7       	in	r18, 0x3d	; 61
     31a:	3e b7       	in	r19, 0x3e	; 62
     31c:	28 50       	subi	r18, 0x08	; 8
     31e:	30 40       	sbci	r19, 0x00	; 0
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	f8 94       	cli
     324:	3e bf       	out	0x3e, r19	; 62
     326:	0f be       	out	0x3f, r0	; 63
     328:	2d bf       	out	0x3d, r18	; 61
     32a:	ed b7       	in	r30, 0x3d	; 61
     32c:	fe b7       	in	r31, 0x3e	; 62
     32e:	31 96       	adiw	r30, 0x01	; 1
     330:	28 e9       	ldi	r18, 0x98	; 152
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	ad b7       	in	r26, 0x3d	; 61
     336:	be b7       	in	r27, 0x3e	; 62
     338:	12 96       	adiw	r26, 0x02	; 2
     33a:	3c 93       	st	X, r19
     33c:	2e 93       	st	-X, r18
     33e:	11 97       	sbiw	r26, 0x01	; 1
     340:	82 83       	std	Z+2, r24	; 0x02
     342:	13 82       	std	Z+3, r1	; 0x03
     344:	64 83       	std	Z+4, r22	; 0x04
     346:	15 82       	std	Z+5, r1	; 0x05
     348:	96 83       	std	Z+6, r25	; 0x06
     34a:	17 82       	std	Z+7, r1	; 0x07
     34c:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <printf_P>
     350:	8b b1       	in	r24, 0x0b	; 11
     352:	8f 70       	andi	r24, 0x0F	; 15
     354:	80 69       	ori	r24, 0x90	; 144
     356:	8b b9       	out	0x0b, r24	; 11
     358:	2d b7       	in	r18, 0x3d	; 61
     35a:	3e b7       	in	r19, 0x3e	; 62
     35c:	28 5f       	subi	r18, 0xF8	; 248
     35e:	3f 4f       	sbci	r19, 0xFF	; 255
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	f8 94       	cli
     364:	3e bf       	out	0x3e, r19	; 62
     366:	0f be       	out	0x3f, r0	; 63
     368:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     36a:	08 95       	ret

0000036c <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     36c:	1f 93       	push	r17
     36e:	18 2f       	mov	r17, r24
	USB_ShutDown();
     370:	dc d3       	rcall	.+1976   	; 0xb2a <USB_ShutDown>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     372:	00 d0       	rcall	.+0      	; 0x374 <EVENT_USB_Host_HostError+0x8>
     374:	00 d0       	rcall	.+0      	; 0x376 <EVENT_USB_Host_HostError+0xa>
     376:	ed b7       	in	r30, 0x3d	; 61
     378:	fe b7       	in	r31, 0x3e	; 62
     37a:	31 96       	adiw	r30, 0x01	; 1
     37c:	8e ee       	ldi	r24, 0xEE	; 238
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	ad b7       	in	r26, 0x3d	; 61
     382:	be b7       	in	r27, 0x3e	; 62
     384:	12 96       	adiw	r26, 0x02	; 2
     386:	9c 93       	st	X, r25
     388:	8e 93       	st	-X, r24
     38a:	11 97       	sbiw	r26, 0x01	; 1
     38c:	12 83       	std	Z+2, r17	; 0x02
     38e:	13 82       	std	Z+3, r1	; 0x03
     390:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <printf_P>
     394:	8b b1       	in	r24, 0x0b	; 11
     396:	8f 70       	andi	r24, 0x0F	; 15
     398:	80 69       	ori	r24, 0x90	; 144
     39a:	8b b9       	out	0x0b, r24	; 11
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <EVENT_USB_Host_HostError+0x38>

000003a6 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     3a6:	8d e1       	ldi	r24, 0x1D	; 29
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	0e 94 82 0a 	call	0x1504	; 0x1504 <puts_P>
     3ae:	8b b1       	in	r24, 0x0b	; 11
     3b0:	8f 70       	andi	r24, 0x0F	; 15
     3b2:	80 61       	ori	r24, 0x10	; 16
     3b4:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     3b6:	08 95       	ret

000003b8 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     3b8:	84 e3       	ldi	r24, 0x34	; 52
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	0e 94 82 0a 	call	0x1504	; 0x1504 <puts_P>
     3c0:	8b b1       	in	r24, 0x0b	; 11
     3c2:	8f 70       	andi	r24, 0x0F	; 15
     3c4:	80 6a       	ori	r24, 0xA0	; 160
     3c6:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     3c8:	08 95       	ret

000003ca <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     3ca:	84 b7       	in	r24, 0x34	; 52
     3cc:	87 7f       	andi	r24, 0xF7	; 247
     3ce:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     3d0:	38 e1       	ldi	r19, 0x18	; 24
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	30 93 60 00 	sts	0x0060, r19
     3da:	10 92 60 00 	sts	0x0060, r1
     3de:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	20 e8       	ldi	r18, 0x80	; 128
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	20 93 61 00 	sts	0x0061, r18
     3ee:	80 93 61 00 	sts	0x0061, r24
     3f2:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     3f4:	83 e3       	ldi	r24, 0x33	; 51
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	90 93 cd 00 	sts	0x00CD, r25
     3fc:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     400:	86 e0       	ldi	r24, 0x06	; 6
     402:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     406:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     40a:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     40e:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     410:	5a 9a       	sbi	0x0b, 2	; 11
			static inline void SerialStream_Init(const uint32_t BaudRate,
			                                     const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);

				stdout = &USARTStream;
     412:	8d e4       	ldi	r24, 0x4D	; 77
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	90 93 6c 01 	sts	0x016C, r25
     41a:	80 93 6b 01 	sts	0x016B, r24
				stdin  = &USARTStream;
     41e:	90 93 6a 01 	sts	0x016A, r25
     422:	80 93 69 01 	sts	0x0169, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     426:	8a b1       	in	r24, 0x0a	; 10
     428:	80 6f       	ori	r24, 0xF0	; 240
     42a:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     42c:	8b b1       	in	r24, 0x0b	; 11
     42e:	8f 70       	andi	r24, 0x0F	; 15
     430:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	SerialStream_Init(9600, false);
	LEDs_Init();
	USB_Init();
}
     432:	72 c3       	rjmp	.+1764   	; 0xb18 <USB_Init>

00000434 <main>:

/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
     434:	3f 92       	push	r3
     436:	4f 92       	push	r4
     438:	5f 92       	push	r5
     43a:	6f 92       	push	r6
     43c:	7f 92       	push	r7
     43e:	8f 92       	push	r8
     440:	9f 92       	push	r9
     442:	af 92       	push	r10
     444:	bf 92       	push	r11
     446:	cf 92       	push	r12
     448:	df 92       	push	r13
     44a:	ef 92       	push	r14
     44c:	ff 92       	push	r15
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	df 93       	push	r29
     454:	cf 93       	push	r28
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62
     45a:	c7 55       	subi	r28, 0x57	; 87
     45c:	d3 40       	sbci	r29, 0x03	; 3
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	de bf       	out	0x3e, r29	; 62
     464:	0f be       	out	0x3f, r0	; 63
     466:	cd bf       	out	0x3d, r28	; 61
	SetupHardware();
     468:	b0 df       	rcall	.-160    	; 0x3ca <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Printer Host Demo running.\r\n" ESC_FG_WHITE));
     46a:	84 ea       	ldi	r24, 0xA4	; 164
     46c:	92 e0       	ldi	r25, 0x02	; 2
     46e:	0e 94 82 0a 	call	0x1504	; 0x1504 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     472:	8b b1       	in	r24, 0x0b	; 11
     474:	8f 70       	andi	r24, 0x0F	; 15
     476:	80 61       	ori	r24, 0x10	; 16
     478:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     47a:	78 94       	sei
				LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

				uint16_t ConfigDescriptorSize;
				uint8_t  ConfigDescriptorData[512];

				if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     47c:	58 e5       	ldi	r21, 0x58	; 88
     47e:	a5 2e       	mov	r10, r21
     480:	51 e0       	ldi	r21, 0x01	; 1
     482:	b5 2e       	mov	r11, r21
     484:	ac 0e       	add	r10, r28
     486:	bd 1e       	adc	r11, r29
     488:	2e 01       	movw	r4, r28
     48a:	08 94       	sec
     48c:	41 1c       	adc	r4, r1
     48e:	51 1c       	adc	r5, r1
					break;
				}

				puts_P(PSTR("Printer Device Enumerated.\r\n"));
				LEDs_SetAllLEDs(LEDMASK_USB_READY);
				USB_HostState = HOST_STATE_Configured;
     490:	4c e0       	ldi	r20, 0x0C	; 12
     492:	34 2e       	mov	r3, r20
				LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

				puts_P(PSTR("Retrieving Device ID...\r\n"));

				char DeviceIDString[300];
				if (PRNT_Host_GetDeviceID(&Printer_PRNT_Interface, DeviceIDString,
     494:	3c e2       	ldi	r19, 0x2C	; 44
     496:	c3 2e       	mov	r12, r19
     498:	d1 2c       	mov	r13, r1
     49a:	cc 0e       	add	r12, r28
     49c:	dd 1e       	adc	r13, r29
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				printf_P(PSTR("Device ID: %s.\r\n"), DeviceIDString);
     49e:	26 e9       	ldi	r18, 0x96	; 150
     4a0:	62 2e       	mov	r6, r18
     4a2:	21 e0       	ldi	r18, 0x01	; 1
     4a4:	72 2e       	mov	r7, r18

				char     TestPageData[] = "\033%-12345X\033E" "LUFA PCL Test Page" "\033E\033%-12345X";
     4a6:	93 e0       	ldi	r25, 0x03	; 3
     4a8:	e9 2e       	mov	r14, r25
     4aa:	f1 2c       	mov	r15, r1
     4ac:	ec 0e       	add	r14, r28
     4ae:	fd 1e       	adc	r15, r29
				uint16_t TestPageLength = strlen(TestPageData);

				printf_P(PSTR("Sending Test Page (%d bytes)...\r\n"), TestPageLength);
     4b0:	84 e7       	ldi	r24, 0x74	; 116
     4b2:	88 2e       	mov	r8, r24
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	98 2e       	mov	r9, r24
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();

	for (;;)
	{
		switch (USB_HostState)
     4b8:	80 91 68 01 	lds	r24, 0x0168
     4bc:	8b 30       	cpi	r24, 0x0B	; 11
     4be:	21 f0       	breq	.+8      	; 0x4c8 <main+0x94>
     4c0:	8c 30       	cpi	r24, 0x0C	; 12
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <main+0x92>
     4c4:	82 c0       	rjmp	.+260    	; 0x5ca <main+0x196>
     4c6:	33 c0       	rjmp	.+102    	; 0x52e <main+0xfa>
     4c8:	8b b1       	in	r24, 0x0b	; 11
     4ca:	8f 70       	andi	r24, 0x0F	; 15
     4cc:	80 6a       	ori	r24, 0xA0	; 160
     4ce:	8b b9       	out	0x0b, r24	; 11
				LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

				uint16_t ConfigDescriptorSize;
				uint8_t  ConfigDescriptorData[512];

				if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	b2 01       	movw	r22, r4
     4d4:	a5 01       	movw	r20, r10
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	32 e0       	ldi	r19, 0x02	; 2
     4da:	20 d4       	rcall	.+2112   	; 0xd1c <USB_Host_GetDeviceConfigDescriptor>
     4dc:	88 23       	and	r24, r24
     4de:	19 f0       	breq	.+6      	; 0x4e6 <main+0xb2>
				                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
				{
					puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     4e0:	87 e7       	ldi	r24, 0x77	; 119
     4e2:	92 e0       	ldi	r25, 0x02	; 2
     4e4:	64 c0       	rjmp	.+200    	; 0x5ae <main+0x17a>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				if (PRNT_Host_ConfigurePipes(&Printer_PRNT_Interface,
     4e6:	69 81       	ldd	r22, Y+1	; 0x01
     4e8:	7a 81       	ldd	r23, Y+2	; 0x02
     4ea:	89 e2       	ldi	r24, 0x29	; 41
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	a5 01       	movw	r20, r10
     4f0:	f0 d6       	rcall	.+3552   	; 0x12d2 <PRNT_Host_ConfigurePipes>
     4f2:	88 23       	and	r24, r24
     4f4:	19 f0       	breq	.+6      	; 0x4fc <main+0xc8>
				                             ConfigDescriptorSize, ConfigDescriptorData) != PRNT_ENUMERROR_NoError)
				{
					puts_P(PSTR("Attached Device Not a Valid Printer Class Device.\r\n"));
     4f6:	83 e4       	ldi	r24, 0x43	; 67
     4f8:	92 e0       	ldi	r25, 0x02	; 2
     4fa:	59 c0       	rjmp	.+178    	; 0x5ae <main+0x17a>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	03 d1       	rcall	.+518    	; 0x706 <USB_Host_SetDeviceConfiguration>
     500:	88 23       	and	r24, r24
     502:	19 f0       	breq	.+6      	; 0x50a <main+0xd6>
				{
					puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     504:	8d e1       	ldi	r24, 0x1D	; 29
     506:	92 e0       	ldi	r25, 0x02	; 2
     508:	52 c0       	rjmp	.+164    	; 0x5ae <main+0x17a>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				if (PRNT_Host_SetBidirectionalMode(&Printer_PRNT_Interface) != HOST_SENDCONTROL_Successful)
     50a:	89 e2       	ldi	r24, 0x29	; 41
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	00 d6       	rcall	.+3072   	; 0x1110 <PRNT_Host_SetBidirectionalMode>
     510:	88 23       	and	r24, r24
     512:	19 f0       	breq	.+6      	; 0x51a <main+0xe6>
				{
					puts_P(PSTR("Error Setting Bidirectional Mode.\r\n"));
     514:	89 ef       	ldi	r24, 0xF9	; 249
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	4a c0       	rjmp	.+148    	; 0x5ae <main+0x17a>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				puts_P(PSTR("Printer Device Enumerated.\r\n"));
     51a:	8c ed       	ldi	r24, 0xDC	; 220
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	f2 d7       	rcall	.+4068   	; 0x1504 <puts_P>
     520:	8b b1       	in	r24, 0x0b	; 11
     522:	8f 70       	andi	r24, 0x0F	; 15
     524:	80 66       	ori	r24, 0x60	; 96
     526:	8b b9       	out	0x0b, r24	; 11
				LEDs_SetAllLEDs(LEDMASK_USB_READY);
				USB_HostState = HOST_STATE_Configured;
     528:	30 92 68 01 	sts	0x0168, r3
     52c:	4e c0       	rjmp	.+156    	; 0x5ca <main+0x196>
     52e:	8b b1       	in	r24, 0x0b	; 11
     530:	8f 70       	andi	r24, 0x0F	; 15
     532:	80 62       	ori	r24, 0x20	; 32
     534:	8b b9       	out	0x0b, r24	; 11
				break;
			case HOST_STATE_Configured:
				LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

				puts_P(PSTR("Retrieving Device ID...\r\n"));
     536:	82 ec       	ldi	r24, 0xC2	; 194
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	e4 d7       	rcall	.+4040   	; 0x1504 <puts_P>

				char DeviceIDString[300];
				if (PRNT_Host_GetDeviceID(&Printer_PRNT_Interface, DeviceIDString,
     53c:	89 e2       	ldi	r24, 0x29	; 41
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	b6 01       	movw	r22, r12
     542:	4c e2       	ldi	r20, 0x2C	; 44
     544:	51 e0       	ldi	r21, 0x01	; 1
     546:	02 d6       	rcall	.+3076   	; 0x114c <PRNT_Host_GetDeviceID>
     548:	88 23       	and	r24, r24
     54a:	19 f0       	breq	.+6      	; 0x552 <main+0x11e>
				                          sizeof(DeviceIDString)) != HOST_SENDCONTROL_Successful)
				{
					puts_P(PSTR("Error Getting Device ID.\r\n"));
     54c:	87 ea       	ldi	r24, 0xA7	; 167
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	2e c0       	rjmp	.+92     	; 0x5ae <main+0x17a>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				printf_P(PSTR("Device ID: %s.\r\n"), DeviceIDString);
     552:	00 d0       	rcall	.+0      	; 0x554 <main+0x120>
     554:	00 d0       	rcall	.+0      	; 0x556 <main+0x122>
     556:	ed b7       	in	r30, 0x3d	; 61
     558:	fe b7       	in	r31, 0x3e	; 62
     55a:	72 82       	std	Z+2, r7	; 0x02
     55c:	61 82       	std	Z+1, r6	; 0x01
     55e:	d4 82       	std	Z+4, r13	; 0x04
     560:	c3 82       	std	Z+3, r12	; 0x03
     562:	ae d7       	rcall	.+3932   	; 0x14c0 <printf_P>

				char     TestPageData[] = "\033%-12345X\033E" "LUFA PCL Test Page" "\033E\033%-12345X";
     564:	d7 01       	movw	r26, r14
     566:	e0 e0       	ldi	r30, 0x00	; 0
     568:	f1 e0       	ldi	r31, 0x01	; 1
     56a:	89 e2       	ldi	r24, 0x29	; 41
     56c:	01 90       	ld	r0, Z+
     56e:	0d 92       	st	X+, r0
     570:	81 50       	subi	r24, 0x01	; 1
     572:	e1 f7       	brne	.-8      	; 0x56c <main+0x138>
				uint16_t TestPageLength = strlen(TestPageData);
     574:	f7 01       	movw	r30, r14
     576:	01 90       	ld	r0, Z+
     578:	00 20       	and	r0, r0
     57a:	e9 f7       	brne	.-6      	; 0x576 <main+0x142>
     57c:	8f 01       	movw	r16, r30
     57e:	01 50       	subi	r16, 0x01	; 1
     580:	10 40       	sbci	r17, 0x00	; 0
     582:	0e 19       	sub	r16, r14
     584:	1f 09       	sbc	r17, r15

				printf_P(PSTR("Sending Test Page (%d bytes)...\r\n"), TestPageLength);
     586:	ed b7       	in	r30, 0x3d	; 61
     588:	fe b7       	in	r31, 0x3e	; 62
     58a:	92 82       	std	Z+2, r9	; 0x02
     58c:	81 82       	std	Z+1, r8	; 0x01
     58e:	14 83       	std	Z+4, r17	; 0x04
     590:	03 83       	std	Z+3, r16	; 0x03
     592:	96 d7       	rcall	.+3884   	; 0x14c0 <printf_P>

				if (PRNT_Host_SendString(&Printer_PRNT_Interface, &TestPageData, TestPageLength) != PIPE_RWSTREAM_NoError)
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	89 e2       	ldi	r24, 0x29	; 41
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	b7 01       	movw	r22, r14
     5a2:	a8 01       	movw	r20, r16
     5a4:	33 d6       	rcall	.+3174   	; 0x120c <PRNT_Host_SendString>
     5a6:	88 23       	and	r24, r24
     5a8:	39 f0       	breq	.+14     	; 0x5b8 <main+0x184>
				{
					puts_P(PSTR("Error Sending Page Data.\r\n"));
     5aa:	89 e5       	ldi	r24, 0x59	; 89
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	aa d7       	rcall	.+3924   	; 0x1504 <puts_P>
     5b0:	8b b1       	in	r24, 0x0b	; 11
     5b2:	8f 70       	andi	r24, 0x0F	; 15
     5b4:	80 69       	ori	r24, 0x90	; 144
     5b6:	06 c0       	rjmp	.+12     	; 0x5c4 <main+0x190>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				puts_P(PSTR("Test Page Sent.\r\n"));
     5b8:	87 e4       	ldi	r24, 0x47	; 71
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	a3 d7       	rcall	.+3910   	; 0x1504 <puts_P>
     5be:	8b b1       	in	r24, 0x0b	; 11
     5c0:	8f 70       	andi	r24, 0x0F	; 15
     5c2:	80 66       	ori	r24, 0x60	; 96
     5c4:	8b b9       	out	0x0b, r24	; 11

				LEDs_SetAllLEDs(LEDMASK_USB_READY);
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     5c6:	10 92 68 01 	sts	0x0168, r1
				break;
		}

		PRNT_Host_USBTask(&Printer_PRNT_Interface);
     5ca:	89 e2       	ldi	r24, 0x29	; 41
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	76 d6       	rcall	.+3308   	; 0x12bc <PRNT_Host_USBTask>
		USB_USBTask();
     5d0:	6c d5       	rcall	.+2776   	; 0x10aa <USB_USBTask>
     5d2:	72 cf       	rjmp	.-284    	; 0x4b8 <main+0x84>

000005d4 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     5d4:	98 2f       	mov	r25, r24
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5d6:	20 91 9e 00 	lds	r18, 0x009E
	bool    BusSuspended = USB_Host_IsBusSuspended();
	uint8_t ErrorCode    = HOST_WAITERROR_Successful;
	bool    HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     5da:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     5de:	80 91 a0 00 	lds	r24, 0x00A0
     5e2:	8f 7d       	andi	r24, 0xDF	; 223
     5e4:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     5e8:	80 91 9f 00 	lds	r24, 0x009F
     5ec:	8f 7d       	andi	r24, 0xDF	; 223
     5ee:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     5f2:	80 91 9e 00 	lds	r24, 0x009E
     5f6:	81 60       	ori	r24, 0x01	; 1
     5f8:	80 93 9e 00 	sts	0x009E, r24
     5fc:	26 c0       	rjmp	.+76     	; 0x64a <USB_Host_WaitMS+0x76>

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     5fe:	80 91 9f 00 	lds	r24, 0x009F
     602:	85 ff       	sbrs	r24, 5
     604:	06 c0       	rjmp	.+12     	; 0x612 <USB_Host_WaitMS+0x3e>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     606:	80 91 9f 00 	lds	r24, 0x009F
     60a:	8f 7d       	andi	r24, 0xDF	; 223
     60c:	80 93 9f 00 	sts	0x009F, r24
			MS--;
     610:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     612:	80 91 68 01 	lds	r24, 0x0168
     616:	82 30       	cpi	r24, 0x02	; 2
     618:	11 f4       	brne	.+4      	; 0x61e <USB_Host_WaitMS+0x4a>
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	18 c0       	rjmp	.+48     	; 0x64e <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if an error has occurred on the selected pipe, false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     61e:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     622:	84 ff       	sbrs	r24, 4
     624:	07 c0       	rjmp	.+14     	; 0x634 <USB_Host_WaitMS+0x60>

			/** Clears the master pipe error flag. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPINTX &= ~(1 << PERRI);
     626:	80 91 a6 00 	lds	r24, 0x00A6
     62a:	8f 7e       	andi	r24, 0xEF	; 239
     62c:	80 93 a6 00 	sts	0x00A6, r24
     630:	92 e0       	ldi	r25, 0x02	; 2
     632:	0d c0       	rjmp	.+26     	; 0x64e <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     634:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     638:	81 ff       	sbrs	r24, 1
     63a:	07 c0       	rjmp	.+14     	; 0x64a <USB_Host_WaitMS+0x76>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     63c:	80 91 a6 00 	lds	r24, 0x00A6
     640:	8d 7f       	andi	r24, 0xFD	; 253
     642:	80 93 a6 00 	sts	0x00A6, r24
     646:	93 e0       	ldi	r25, 0x03	; 3
     648:	02 c0       	rjmp	.+4      	; 0x64e <USB_Host_WaitMS+0x7a>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     64a:	99 23       	and	r25, r25
     64c:	c1 f6       	brne	.-80     	; 0x5fe <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     64e:	20 fd       	sbrc	r18, 0
     650:	05 c0       	rjmp	.+10     	; 0x65c <USB_Host_WaitMS+0x88>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     652:	80 91 9e 00 	lds	r24, 0x009E
     656:	8e 7f       	andi	r24, 0xFE	; 254
     658:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     65c:	35 ff       	sbrs	r19, 5
     65e:	05 c0       	rjmp	.+10     	; 0x66a <USB_Host_WaitMS+0x96>
	  USB_INT_Enable(USB_INT_HSOFI);
     660:	80 91 a0 00 	lds	r24, 0x00A0
     664:	80 62       	ori	r24, 0x20	; 32
     666:	80 93 a0 00 	sts	0x00A0, r24

	return ErrorCode;
}
     66a:	89 2f       	mov	r24, r25
     66c:	08 95       	ret

0000066e <USB_Host_ResetDevice>:
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     66e:	60 91 9e 00 	lds	r22, 0x009E

static void USB_Host_ResetDevice(void)
{
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);
     672:	80 91 a0 00 	lds	r24, 0x00A0
     676:	8d 7f       	andi	r24, 0xFD	; 253
     678:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     67c:	80 91 9e 00 	lds	r24, 0x009E
     680:	82 60       	ori	r24, 0x02	; 2
     682:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean true if no bus reset is currently being sent, false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     686:	80 91 9e 00 	lds	r24, 0x009E

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     68a:	81 fd       	sbrc	r24, 1
     68c:	fc cf       	rjmp	.-8      	; 0x686 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     68e:	80 91 9e 00 	lds	r24, 0x009E
     692:	81 60       	ori	r24, 0x01	; 1
     694:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();

	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     698:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     69c:	80 91 a0 00 	lds	r24, 0x00A0
     6a0:	8f 7d       	andi	r24, 0xDF	; 223
     6a2:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     6a6:	80 91 9f 00 	lds	r24, 0x009F
     6aa:	8f 7d       	andi	r24, 0xDF	; 223
     6ac:	80 93 9f 00 	sts	0x009F, r24
     6b0:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6b2:	40 ed       	ldi	r20, 0xD0	; 208
     6b4:	57 e0       	ldi	r21, 0x07	; 7
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     6b6:	80 91 9f 00 	lds	r24, 0x009F
     6ba:	85 ff       	sbrs	r24, 5
     6bc:	0b c0       	rjmp	.+22     	; 0x6d4 <USB_Host_ResetDevice+0x66>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     6be:	80 91 9f 00 	lds	r24, 0x009F
     6c2:	8f 7d       	andi	r24, 0xDF	; 223
     6c4:	80 93 9f 00 	sts	0x009F, r24
			USB_INT_Clear(USB_INT_DDISCI);
     6c8:	80 91 9f 00 	lds	r24, 0x009F
     6cc:	8d 7f       	andi	r24, 0xFD	; 253
     6ce:	80 93 9f 00 	sts	0x009F, r24
     6d2:	05 c0       	rjmp	.+10     	; 0x6de <USB_Host_ResetDevice+0x70>
     6d4:	ca 01       	movw	r24, r20
     6d6:	01 97       	sbiw	r24, 0x01	; 1
     6d8:	f1 f7       	brne	.-4      	; 0x6d6 <USB_Host_ResetDevice+0x68>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     6da:	21 50       	subi	r18, 0x01	; 1
     6dc:	61 f7       	brne	.-40     	; 0x6b6 <USB_Host_ResetDevice+0x48>
		}

		_delay_ms(1);
	}

	if (HSOFIEnabled)
     6de:	35 ff       	sbrs	r19, 5
     6e0:	05 c0       	rjmp	.+10     	; 0x6ec <USB_Host_ResetDevice+0x7e>
	  USB_INT_Enable(USB_INT_HSOFI);
     6e2:	80 91 a0 00 	lds	r24, 0x00A0
     6e6:	80 62       	ori	r24, 0x20	; 32
     6e8:	80 93 a0 00 	sts	0x00A0, r24

	if (BusSuspended)
     6ec:	60 fd       	sbrc	r22, 0
     6ee:	05 c0       	rjmp	.+10     	; 0x6fa <USB_Host_ResetDevice+0x8c>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     6f0:	80 91 9e 00 	lds	r24, 0x009E
     6f4:	8e 7f       	andi	r24, 0xFE	; 254
     6f6:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
     6fa:	80 91 a0 00 	lds	r24, 0x00A0
     6fe:	82 60       	ori	r24, 0x02	; 2
     700:	80 93 a0 00 	sts	0x00A0, r24
}
     704:	08 95       	ret

00000706 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	USB_ControlRequest = (USB_Request_Header_t)
     706:	10 92 60 01 	sts	0x0160, r1
     70a:	99 e0       	ldi	r25, 0x09	; 9
     70c:	90 93 61 01 	sts	0x0161, r25
     710:	80 93 62 01 	sts	0x0162, r24
     714:	10 92 63 01 	sts	0x0163, r1
     718:	10 92 65 01 	sts	0x0165, r1
     71c:	10 92 64 01 	sts	0x0164, r1
     720:	10 92 67 01 	sts	0x0167, r1
     724:	10 92 66 01 	sts	0x0166, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     728:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
}
     730:	79 c3       	rjmp	.+1778   	; 0xe24 <USB_Host_SendControlRequest>

00000732 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "Host.h"

void USB_Host_ProcessNextHostState(void)
{
     732:	ef 92       	push	r14
     734:	0f 93       	push	r16
     736:	1f 93       	push	r17
     738:	df 93       	push	r29
     73a:	cf 93       	push	r28
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	28 97       	sbiw	r28, 0x08	; 8
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	f8 94       	cli
     746:	de bf       	out	0x3e, r29	; 62
     748:	0f be       	out	0x3f, r0	; 63
     74a:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     74c:	80 91 68 01 	lds	r24, 0x0168
     750:	86 30       	cpi	r24, 0x06	; 6
     752:	09 f4       	brne	.+2      	; 0x756 <USB_Host_ProcessNextHostState+0x24>
     754:	94 c0       	rjmp	.+296    	; 0x87e <USB_Host_ProcessNextHostState+0x14c>
     756:	87 30       	cpi	r24, 0x07	; 7
     758:	70 f4       	brcc	.+28     	; 0x776 <USB_Host_ProcessNextHostState+0x44>
     75a:	83 30       	cpi	r24, 0x03	; 3
     75c:	c1 f1       	breq	.+112    	; 0x7ce <USB_Host_ProcessNextHostState+0x9c>
     75e:	84 30       	cpi	r24, 0x04	; 4
     760:	20 f4       	brcc	.+8      	; 0x76a <USB_Host_ProcessNextHostState+0x38>
     762:	81 30       	cpi	r24, 0x01	; 1
     764:	09 f0       	breq	.+2      	; 0x768 <USB_Host_ProcessNextHostState+0x36>
     766:	07 c1       	rjmp	.+526    	; 0x976 <USB_Host_ProcessNextHostState+0x244>
     768:	13 c0       	rjmp	.+38     	; 0x790 <USB_Host_ProcessNextHostState+0x5e>
     76a:	84 30       	cpi	r24, 0x04	; 4
     76c:	c1 f1       	breq	.+112    	; 0x7de <USB_Host_ProcessNextHostState+0xac>
     76e:	85 30       	cpi	r24, 0x05	; 5
     770:	09 f0       	breq	.+2      	; 0x774 <USB_Host_ProcessNextHostState+0x42>
     772:	01 c1       	rjmp	.+514    	; 0x976 <USB_Host_ProcessNextHostState+0x244>
     774:	5b c0       	rjmp	.+182    	; 0x82c <USB_Host_ProcessNextHostState+0xfa>
     776:	88 30       	cpi	r24, 0x08	; 8
     778:	09 f4       	brne	.+2      	; 0x77c <USB_Host_ProcessNextHostState+0x4a>
     77a:	9b c0       	rjmp	.+310    	; 0x8b2 <USB_Host_ProcessNextHostState+0x180>
     77c:	88 30       	cpi	r24, 0x08	; 8
     77e:	08 f4       	brcc	.+2      	; 0x782 <USB_Host_ProcessNextHostState+0x50>
     780:	8a c0       	rjmp	.+276    	; 0x896 <USB_Host_ProcessNextHostState+0x164>
     782:	89 30       	cpi	r24, 0x09	; 9
     784:	09 f4       	brne	.+2      	; 0x788 <USB_Host_ProcessNextHostState+0x56>
     786:	b4 c0       	rjmp	.+360    	; 0x8f0 <USB_Host_ProcessNextHostState+0x1be>
     788:	8a 30       	cpi	r24, 0x0A	; 10
     78a:	09 f0       	breq	.+2      	; 0x78e <USB_Host_ProcessNextHostState+0x5c>
     78c:	f4 c0       	rjmp	.+488    	; 0x976 <USB_Host_ProcessNextHostState+0x244>
     78e:	d9 c0       	rjmp	.+434    	; 0x942 <USB_Host_ProcessNextHostState+0x210>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     790:	00 91 5d 01 	lds	r16, 0x015D
     794:	10 91 5e 01 	lds	r17, 0x015E
     798:	01 15       	cp	r16, r1
     79a:	11 05       	cpc	r17, r1
     79c:	09 f4       	brne	.+2      	; 0x7a0 <USB_Host_ProcessNextHostState+0x6e>
     79e:	eb c0       	rjmp	.+470    	; 0x976 <USB_Host_ProcessNextHostState+0x244>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	18 df       	rcall	.-464    	; 0x5d4 <USB_Host_WaitMS>
     7a4:	68 2f       	mov	r22, r24
     7a6:	88 23       	and	r24, r24
     7a8:	31 f0       	breq	.+12     	; 0x7b6 <USB_Host_ProcessNextHostState+0x84>
				{
					USB_HostState = PostWaitState;
     7aa:	80 91 5c 01 	lds	r24, 0x015C
     7ae:	80 93 68 01 	sts	0x0168, r24
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	dc c0       	rjmp	.+440    	; 0x96e <USB_Host_ProcessNextHostState+0x23c>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     7b6:	c8 01       	movw	r24, r16
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	90 93 5e 01 	sts	0x015E, r25
     7be:	80 93 5d 01 	sts	0x015D, r24
     7c2:	89 2b       	or	r24, r25
     7c4:	09 f0       	breq	.+2      	; 0x7c8 <USB_Host_ProcessNextHostState+0x96>
     7c6:	d7 c0       	rjmp	.+430    	; 0x976 <USB_Host_ProcessNextHostState+0x244>
				  USB_HostState = PostWaitState;
     7c8:	80 91 5c 01 	lds	r24, 0x015C
     7cc:	bf c0       	rjmp	.+382    	; 0x94c <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     7ce:	88 ee       	ldi	r24, 0xE8	; 232
     7d0:	93 e0       	ldi	r25, 0x03	; 3
     7d2:	90 93 5e 01 	sts	0x015E, r25
     7d6:	80 93 5d 01 	sts	0x015D, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     7da:	84 e0       	ldi	r24, 0x04	; 4
     7dc:	b7 c0       	rjmp	.+366    	; 0x94c <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     7de:	80 91 5d 01 	lds	r24, 0x015D
     7e2:	90 91 5e 01 	lds	r25, 0x015E
     7e6:	01 97       	sbiw	r24, 0x01	; 1
     7e8:	90 93 5e 01 	sts	0x015E, r25
     7ec:	80 93 5d 01 	sts	0x015D, r24
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	29 f0       	breq	.+10     	; 0x7fe <USB_Host_ProcessNextHostState+0xcc>
     7f4:	80 ed       	ldi	r24, 0xD0	; 208
     7f6:	97 e0       	ldi	r25, 0x07	; 7
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	f1 f7       	brne	.-4      	; 0x7f8 <USB_Host_ProcessNextHostState+0xc6>
     7fc:	bc c0       	rjmp	.+376    	; 0x976 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     7fe:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     800:	80 91 d8 00 	lds	r24, 0x00D8
     804:	80 61       	ori	r24, 0x10	; 16
     806:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     80a:	80 91 dd 00 	lds	r24, 0x00DD
     80e:	8b 7f       	andi	r24, 0xFB	; 251
     810:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     814:	80 91 d7 00 	lds	r24, 0x00D7
     818:	80 61       	ori	r24, 0x10	; 16
     81a:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     81e:	80 91 dd 00 	lds	r24, 0x00DD
     822:	82 60       	ori	r24, 0x02	; 2
     824:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     828:	85 e0       	ldi	r24, 0x05	; 5
     82a:	90 c0       	rjmp	.+288    	; 0x94c <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     82c:	80 91 9f 00 	lds	r24, 0x009F
     830:	80 ff       	sbrs	r24, 0
     832:	a1 c0       	rjmp	.+322    	; 0x976 <USB_Host_ProcessNextHostState+0x244>
			{
				USB_INT_Clear(USB_INT_DCONNI);
     834:	80 91 9f 00 	lds	r24, 0x009F
     838:	8e 7f       	andi	r24, 0xFE	; 254
     83a:	80 93 9f 00 	sts	0x009F, r24
				USB_INT_Clear(USB_INT_DDISCI);
     83e:	80 91 9f 00 	lds	r24, 0x009F
     842:	8d 7f       	andi	r24, 0xFD	; 253
     844:	80 93 9f 00 	sts	0x009F, r24

				USB_INT_Clear(USB_INT_VBERRI);
     848:	80 91 df 00 	lds	r24, 0x00DF
     84c:	8d 7f       	andi	r24, 0xFD	; 253
     84e:	80 93 df 00 	sts	0x00DF, r24
				USB_INT_Enable(USB_INT_VBERRI);
     852:	80 91 de 00 	lds	r24, 0x00DE
     856:	82 60       	ori	r24, 0x02	; 2
     858:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     85c:	80 91 9e 00 	lds	r24, 0x009E
     860:	81 60       	ori	r24, 0x01	; 1
     862:	80 93 9e 00 	sts	0x009E, r24

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     866:	c9 d0       	rcall	.+402    	; 0x9fa <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	80 93 68 01 	sts	0x0168, r24
     86e:	84 e6       	ldi	r24, 0x64	; 100
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	90 93 5e 01 	sts	0x015E, r25
     876:	80 93 5d 01 	sts	0x015D, r24
     87a:	86 e0       	ldi	r24, 0x06	; 6
     87c:	5f c0       	rjmp	.+190    	; 0x93c <USB_Host_ProcessNextHostState+0x20a>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     87e:	f7 de       	rcall	.-530    	; 0x66e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	80 93 68 01 	sts	0x0168, r24
     886:	88 ec       	ldi	r24, 0xC8	; 200
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	90 93 5e 01 	sts	0x015E, r25
     88e:	80 93 5d 01 	sts	0x015D, r24
     892:	87 e0       	ldi	r24, 0x07	; 7
     894:	53 c0       	rjmp	.+166    	; 0x93c <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	60 e0       	ldi	r22, 0x00	; 0
     89a:	40 e0       	ldi	r20, 0x00	; 0
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	00 e4       	ldi	r16, 0x40	; 64
     8a0:	10 e0       	ldi	r17, 0x00	; 0
     8a2:	ee 24       	eor	r14, r14
     8a4:	74 d0       	rcall	.+232    	; 0x98e <Pipe_ConfigurePipe>
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     8a6:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     8aa:	87 ff       	sbrs	r24, 7
     8ac:	5e c0       	rjmp	.+188    	; 0x96a <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     8ae:	88 e0       	ldi	r24, 0x08	; 8
     8b0:	4d c0       	rjmp	.+154    	; 0x94c <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     8b2:	a0 e6       	ldi	r26, 0x60	; 96
     8b4:	b1 e0       	ldi	r27, 0x01	; 1
     8b6:	e4 e4       	ldi	r30, 0x44	; 68
     8b8:	f1 e0       	ldi	r31, 0x01	; 1
     8ba:	88 e0       	ldi	r24, 0x08	; 8
     8bc:	01 90       	ld	r0, Z+
     8be:	0d 92       	st	X+, r0
     8c0:	81 50       	subi	r24, 0x01	; 1
     8c2:	e1 f7       	brne	.-8      	; 0x8bc <USB_Host_ProcessNextHostState+0x18a>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     8c4:	ce 01       	movw	r24, r28
     8c6:	01 96       	adiw	r24, 0x01	; 1
     8c8:	ad d2       	rcall	.+1370   	; 0xe24 <USB_Host_SendControlRequest>
     8ca:	68 2f       	mov	r22, r24
     8cc:	88 23       	and	r24, r24
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <USB_Host_ProcessNextHostState+0x1a0>
     8d0:	4a c0       	rjmp	.+148    	; 0x966 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     8d2:	88 85       	ldd	r24, Y+8	; 0x08
     8d4:	80 93 4c 01 	sts	0x014C, r24

			USB_Host_ResetDevice();
     8d8:	ca de       	rcall	.-620    	; 0x66e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	80 93 68 01 	sts	0x0168, r24
     8e0:	88 ec       	ldi	r24, 0xC8	; 200
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	90 93 5e 01 	sts	0x015E, r25
     8e8:	80 93 5d 01 	sts	0x015D, r24
     8ec:	89 e0       	ldi	r24, 0x09	; 9
     8ee:	26 c0       	rjmp	.+76     	; 0x93c <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     8f0:	00 91 4c 01 	lds	r16, 0x014C
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	40 e0       	ldi	r20, 0x00	; 0
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	10 e0       	ldi	r17, 0x00	; 0
     8fe:	ee 24       	eor	r14, r14
     900:	46 d0       	rcall	.+140    	; 0x98e <Pipe_ConfigurePipe>
     902:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     906:	87 ff       	sbrs	r24, 7
     908:	30 c0       	rjmp	.+96     	; 0x96a <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     90a:	a0 e6       	ldi	r26, 0x60	; 96
     90c:	b1 e0       	ldi	r27, 0x01	; 1
     90e:	ec e3       	ldi	r30, 0x3C	; 60
     910:	f1 e0       	ldi	r31, 0x01	; 1
     912:	88 e0       	ldi	r24, 0x08	; 8
     914:	01 90       	ld	r0, Z+
     916:	0d 92       	st	X+, r0
     918:	81 50       	subi	r24, 0x01	; 1
     91a:	e1 f7       	brne	.-8      	; 0x914 <USB_Host_ProcessNextHostState+0x1e2>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	81 d2       	rcall	.+1282   	; 0xe24 <USB_Host_SendControlRequest>
     922:	68 2f       	mov	r22, r24
     924:	88 23       	and	r24, r24
     926:	f9 f4       	brne	.+62     	; 0x966 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	80 93 68 01 	sts	0x0168, r24
     92e:	84 e6       	ldi	r24, 0x64	; 100
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	90 93 5e 01 	sts	0x015E, r25
     936:	80 93 5d 01 	sts	0x015D, r24
     93a:	8a e0       	ldi	r24, 0x0A	; 10
     93c:	80 93 5c 01 	sts	0x015C, r24
     940:	1a c0       	rjmp	.+52     	; 0x976 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			EVENT_USB_Host_DeviceEnumerationComplete();
     948:	e0 dc       	rcall	.-1600   	; 0x30a <EVENT_USB_Host_DeviceEnumerationComplete>
			USB_HostState = HOST_STATE_Addressed;
     94a:	8b e0       	ldi	r24, 0x0B	; 11
     94c:	80 93 68 01 	sts	0x0168, r24
     950:	12 c0       	rjmp	.+36     	; 0x976 <USB_Host_ProcessNextHostState+0x244>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     952:	89 2f       	mov	r24, r25
     954:	df dc       	rcall	.-1602   	; 0x314 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     956:	80 91 dd 00 	lds	r24, 0x00DD
     95a:	81 60       	ori	r24, 0x01	; 1
     95c:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     960:	22 dd       	rcall	.-1468   	; 0x3a6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     962:	8c d0       	rcall	.+280    	; 0xa7c <USB_ResetInterface>
     964:	08 c0       	rjmp	.+16     	; 0x976 <USB_Host_ProcessNextHostState+0x244>
	}
}
     966:	93 e0       	ldi	r25, 0x03	; 3
     968:	02 c0       	rjmp	.+4      	; 0x96e <USB_Host_ProcessNextHostState+0x23c>
     96a:	94 e0       	ldi	r25, 0x04	; 4
     96c:	60 e0       	ldi	r22, 0x00	; 0
			EVENT_USB_Host_DeviceEnumerationComplete();
			USB_HostState = HOST_STATE_Addressed;
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     96e:	80 91 68 01 	lds	r24, 0x0168
     972:	82 30       	cpi	r24, 0x02	; 2
     974:	71 f7       	brne	.-36     	; 0x952 <USB_Host_ProcessNextHostState+0x220>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     976:	28 96       	adiw	r28, 0x08	; 8
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	f8 94       	cli
     97c:	de bf       	out	0x3e, r29	; 62
     97e:	0f be       	out	0x3f, r0	; 63
     980:	cd bf       	out	0x3d, r28	; 61
     982:	cf 91       	pop	r28
     984:	df 91       	pop	r29
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	ef 90       	pop	r14
     98c:	08 95       	ret

0000098e <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     98e:	ef 92       	push	r14
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	9e 2d       	mov	r25, r14
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     996:	80 93 a7 00 	sts	0x00A7, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     99a:	80 91 a9 00 	lds	r24, 0x00A9
     99e:	81 60       	ori	r24, 0x01	; 1
     9a0:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SelectPipe(Number);
	Pipe_EnablePipe();

	UPCFG1X = 0;
     9a4:	10 92 ab 00 	sts	0x00AB, r1

	UPCFG0X = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     9a8:	62 95       	swap	r22
     9aa:	66 0f       	add	r22, r22
     9ac:	66 0f       	add	r22, r22
     9ae:	60 7c       	andi	r22, 0xC0	; 192
     9b0:	64 2b       	or	r22, r20
     9b2:	2f 70       	andi	r18, 0x0F	; 15
     9b4:	62 2b       	or	r22, r18
     9b6:	60 93 aa 00 	sts	0x00AA, r22
     9ba:	28 e0       	ldi	r18, 0x08	; 8
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	03 c0       	rjmp	.+6      	; 0x9c8 <Pipe_ConfigurePipe+0x3a>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     9c2:	8f 5f       	subi	r24, 0xFF	; 255
					CheckBytes <<= 1;
     9c4:	22 0f       	add	r18, r18
     9c6:	33 1f       	adc	r19, r19
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     9c8:	20 17       	cp	r18, r16
     9ca:	31 07       	cpc	r19, r17
     9cc:	10 f4       	brcc	.+4      	; 0x9d2 <Pipe_ConfigurePipe+0x44>
     9ce:	85 30       	cpi	r24, 0x05	; 5
     9d0:	c1 f7       	brne	.-16     	; 0x9c2 <Pipe_ConfigurePipe+0x34>
	UPCFG1X = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9d2:	92 60       	ori	r25, 0x02	; 2
     9d4:	82 95       	swap	r24
     9d6:	80 7f       	andi	r24, 0xF0	; 240
     9d8:	89 2b       	or	r24, r25
     9da:	80 93 ab 00 	sts	0x00AB, r24

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     9de:	80 91 a9 00 	lds	r24, 0x00A9
     9e2:	80 62       	ori	r24, 0x20	; 32
     9e4:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9e8:	80 91 ac 00 	lds	r24, 0x00AC

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
}
     9ec:	88 1f       	adc	r24, r24
     9ee:	88 27       	eor	r24, r24
     9f0:	88 1f       	adc	r24, r24
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	ef 90       	pop	r14
     9f8:	08 95       	ret

000009fa <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     9fa:	10 92 f8 00 	sts	0x00F8, r1
     9fe:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a00:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     a04:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     a08:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     a0c:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a10:	80 91 a9 00 	lds	r24, 0x00A9
     a14:	8e 7f       	andi	r24, 0xFE	; 254
     a16:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a1a:	9f 5f       	subi	r25, 0xFF	; 255
     a1c:	97 30       	cpi	r25, 0x07	; 7
     a1e:	81 f7       	brne	.-32     	; 0xa00 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     a20:	08 95       	ret

00000a22 <Pipe_WaitUntilReady>:
			/** Returns the current USB frame number, when in host mode. Every millisecond the USB bus is active (i.e. not suspended)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     a22:	40 91 a2 00 	lds	r20, 0x00A2
     a26:	50 91 a3 00 	lds	r21, 0x00A3
     a2a:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a2c:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     a30:	80 73       	andi	r24, 0x30	; 48
     a32:	80 31       	cpi	r24, 0x10	; 16
     a34:	29 f4       	brne	.+10     	; 0xa40 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     a36:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     a3a:	80 ff       	sbrs	r24, 0
     a3c:	05 c0       	rjmp	.+10     	; 0xa48 <Pipe_WaitUntilReady+0x26>
     a3e:	1c c0       	rjmp	.+56     	; 0xa78 <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     a40:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     a44:	82 fd       	sbrc	r24, 2
     a46:	18 c0       	rjmp	.+48     	; 0xa78 <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     a48:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     a4c:	81 ff       	sbrs	r24, 1
     a4e:	02 c0       	rjmp	.+4      	; 0xa54 <Pipe_WaitUntilReady+0x32>
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     a54:	80 91 68 01 	lds	r24, 0x0168
     a58:	82 30       	cpi	r24, 0x02	; 2
     a5a:	79 f0       	breq	.+30     	; 0xa7a <Pipe_WaitUntilReady+0x58>
     a5c:	80 91 a2 00 	lds	r24, 0x00A2
     a60:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     a64:	84 17       	cp	r24, r20
     a66:	95 07       	cpc	r25, r21
     a68:	09 f3       	breq	.-62     	; 0xa2c <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     a6a:	22 23       	and	r18, r18
     a6c:	11 f4       	brne	.+4      	; 0xa72 <Pipe_WaitUntilReady+0x50>
     a6e:	83 e0       	ldi	r24, 0x03	; 3
     a70:	08 95       	ret
     a72:	21 50       	subi	r18, 0x01	; 1
     a74:	ac 01       	movw	r20, r24
     a76:	da cf       	rjmp	.-76     	; 0xa2c <Pipe_WaitUntilReady+0xa>
     a78:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     a7a:	08 95       	ret

00000a7c <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     a7c:	6e d0       	rcall	.+220    	; 0xb5a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a7e:	75 d0       	rcall	.+234    	; 0xb6a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     a80:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
     a84:	98 2f       	mov	r25, r24
     a86:	9f 77       	andi	r25, 0x7F	; 127
     a88:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
     a8c:	80 68       	ori	r24, 0x80	; 128
     a8e:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     a92:	8c e0       	ldi	r24, 0x0C	; 12
     a94:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     a96:	89 b5       	in	r24, 0x29	; 41
     a98:	82 60       	ori	r24, 0x02	; 2
     a9a:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     a9c:	09 b4       	in	r0, 0x29	; 41
     a9e:	00 fe       	sbrs	r0, 0
     aa0:	fd cf       	rjmp	.-6      	; 0xa9c <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     aa2:	80 91 d8 00 	lds	r24, 0x00D8
     aa6:	8f 7d       	andi	r24, 0xDF	; 223
     aa8:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     aac:	80 91 d7 00 	lds	r24, 0x00D7
     ab0:	8f 77       	andi	r24, 0x7F	; 127
     ab2:	80 93 d7 00 	sts	0x00D7, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState       = HOST_STATE_Unattached;
     ab6:	82 e0       	ldi	r24, 0x02	; 2
     ab8:	80 93 68 01 	sts	0x0168, r24
	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     abc:	80 e4       	ldi	r24, 0x40	; 64
     abe:	80 93 4c 01 	sts	0x014C, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     ac2:	80 91 d8 00 	lds	r24, 0x00D8
     ac6:	80 64       	ori	r24, 0x40	; 64
     ac8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     acc:	80 91 dd 00 	lds	r24, 0x00DD
     ad0:	81 60       	ori	r24, 0x01	; 1
     ad2:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     ad6:	80 91 dd 00 	lds	r24, 0x00DD
     ada:	84 60       	ori	r24, 0x04	; 4
     adc:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     ae0:	80 91 d7 00 	lds	r24, 0x00D7
     ae4:	8f 7e       	andi	r24, 0xEF	; 239
     ae6:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     aea:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     aec:	77 9a       	sbi	0x0e, 7	; 14

	USB_Host_VBUS_Auto_Off();
	USB_Host_VBUS_Manual_Enable();
	USB_Host_VBUS_Manual_On();

	USB_INT_Enable(USB_INT_SRPI);
     aee:	80 91 de 00 	lds	r24, 0x00DE
     af2:	81 60       	ori	r24, 0x01	; 1
     af4:	80 93 de 00 	sts	0x00DE, r24
	USB_INT_Enable(USB_INT_BCERRI);
     af8:	80 91 de 00 	lds	r24, 0x00DE
     afc:	84 60       	ori	r24, 0x04	; 4
     afe:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b02:	80 91 e0 00 	lds	r24, 0x00E0
     b06:	8e 7f       	andi	r24, 0xFE	; 254
     b08:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     b0c:	80 91 d8 00 	lds	r24, 0x00D8
     b10:	80 61       	ori	r24, 0x10	; 16
     b12:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     b16:	08 95       	ret

00000b18 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     b18:	e7 ed       	ldi	r30, 0xD7	; 215
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	80 81       	ld	r24, Z
     b1e:	81 60       	ori	r24, 0x01	; 1
     b20:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	80 93 5f 01 	sts	0x015F, r24

	USB_ResetInterface();
}
     b28:	a9 cf       	rjmp	.-174    	; 0xa7c <USB_ResetInterface>

00000b2a <USB_ShutDown>:

void USB_ShutDown(void)
{
	USB_INT_DisableAllInterrupts();
     b2a:	17 d0       	rcall	.+46     	; 0xb5a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b2c:	1e d0       	rcall	.+60     	; 0xb6a <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     b2e:	e0 ee       	ldi	r30, 0xE0	; 224
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	80 81       	ld	r24, Z
     b34:	81 60       	ori	r24, 0x01	; 1
     b36:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     b38:	a8 ed       	ldi	r26, 0xD8	; 216
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	8c 91       	ld	r24, X
     b3e:	8f 77       	andi	r24, 0x7F	; 127
     b40:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     b42:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     b44:	e7 ed       	ldi	r30, 0xD7	; 215
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	80 81       	ld	r24, Z
     b4a:	8e 7f       	andi	r24, 0xFE	; 254
     b4c:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     b4e:	8c 91       	ld	r24, X
     b50:	8f 7e       	andi	r24, 0xEF	; 239
     b52:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     b54:	10 92 5f 01 	sts	0x015F, r1
}
     b58:	08 95       	ret

00000b5a <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     b5a:	e8 ed       	ldi	r30, 0xD8	; 216
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	8c 7f       	andi	r24, 0xFC	; 252
     b62:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     b64:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     b68:	08 95       	ret

00000b6a <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
     b6a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
     b6e:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
	#endif
}
     b72:	08 95       	ret

00000b74 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     b74:	1f 92       	push	r1
     b76:	0f 92       	push	r0
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	0f 92       	push	r0
     b7c:	0b b6       	in	r0, 0x3b	; 59
     b7e:	0f 92       	push	r0
     b80:	11 24       	eor	r1, r1
     b82:	2f 93       	push	r18
     b84:	3f 93       	push	r19
     b86:	4f 93       	push	r20
     b88:	5f 93       	push	r21
     b8a:	6f 93       	push	r22
     b8c:	7f 93       	push	r23
     b8e:	8f 93       	push	r24
     b90:	9f 93       	push	r25
     b92:	af 93       	push	r26
     b94:	bf 93       	push	r27
     b96:	ef 93       	push	r30
     b98:	ff 93       	push	r31
	}
	#endif
	#endif

	#if defined(USB_CAN_BE_HOST)
	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     b9a:	80 91 9f 00 	lds	r24, 0x009F
     b9e:	81 ff       	sbrs	r24, 1
     ba0:	15 c0       	rjmp	.+42     	; 0xbcc <__vector_10+0x58>
     ba2:	80 91 a0 00 	lds	r24, 0x00A0
     ba6:	81 ff       	sbrs	r24, 1
     ba8:	11 c0       	rjmp	.+34     	; 0xbcc <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_DDISCI);
     baa:	80 91 9f 00 	lds	r24, 0x009F
     bae:	8d 7f       	andi	r24, 0xFD	; 253
     bb0:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Clear(USB_INT_DCONNI);
     bb4:	80 91 9f 00 	lds	r24, 0x009F
     bb8:	8e 7f       	andi	r24, 0xFE	; 254
     bba:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Disable(USB_INT_DDISCI);
     bbe:	80 91 a0 00 	lds	r24, 0x00A0
     bc2:	8d 7f       	andi	r24, 0xFD	; 253
     bc4:	80 93 a0 00 	sts	0x00A0, r24

		EVENT_USB_Host_DeviceUnattached();
     bc8:	ee db       	rcall	.-2084   	; 0x3a6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     bca:	58 df       	rcall	.-336    	; 0xa7c <USB_ResetInterface>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     bcc:	80 91 df 00 	lds	r24, 0x00DF
     bd0:	81 ff       	sbrs	r24, 1
     bd2:	15 c0       	rjmp	.+42     	; 0xbfe <__vector_10+0x8a>
     bd4:	80 91 de 00 	lds	r24, 0x00DE
     bd8:	81 ff       	sbrs	r24, 1
     bda:	11 c0       	rjmp	.+34     	; 0xbfe <__vector_10+0x8a>
	{
		USB_INT_Clear(USB_INT_VBERRI);
     bdc:	80 91 df 00 	lds	r24, 0x00DF
     be0:	8d 7f       	andi	r24, 0xFD	; 253
     be2:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     be6:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     be8:	80 91 dd 00 	lds	r24, 0x00DD
     bec:	81 60       	ori	r24, 0x01	; 1
     bee:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	bb db       	rcall	.-2186   	; 0x36c <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     bf6:	d7 db       	rcall	.-2130   	; 0x3a6 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     bf8:	82 e0       	ldi	r24, 0x02	; 2
     bfa:	80 93 68 01 	sts	0x0168, r24
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     bfe:	80 91 df 00 	lds	r24, 0x00DF
     c02:	80 ff       	sbrs	r24, 0
     c04:	17 c0       	rjmp	.+46     	; 0xc34 <__vector_10+0xc0>
     c06:	80 91 de 00 	lds	r24, 0x00DE
     c0a:	80 ff       	sbrs	r24, 0
     c0c:	13 c0       	rjmp	.+38     	; 0xc34 <__vector_10+0xc0>
	{
		USB_INT_Clear(USB_INT_SRPI);
     c0e:	80 91 df 00 	lds	r24, 0x00DF
     c12:	8e 7f       	andi	r24, 0xFE	; 254
     c14:	80 93 df 00 	sts	0x00DF, r24
		USB_INT_Disable(USB_INT_SRPI);
     c18:	80 91 de 00 	lds	r24, 0x00DE
     c1c:	8e 7f       	andi	r24, 0xFE	; 254
     c1e:	80 93 de 00 	sts	0x00DE, r24

		EVENT_USB_Host_DeviceAttached();
     c22:	ca db       	rcall	.-2156   	; 0x3b8 <EVENT_USB_Host_DeviceAttached>

		USB_INT_Enable(USB_INT_DDISCI);
     c24:	80 91 a0 00 	lds	r24, 0x00A0
     c28:	82 60       	ori	r24, 0x02	; 2
     c2a:	80 93 a0 00 	sts	0x00A0, r24

		USB_HostState = HOST_STATE_Powered;
     c2e:	83 e0       	ldi	r24, 0x03	; 3
     c30:	80 93 68 01 	sts	0x0168, r24
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     c34:	80 91 df 00 	lds	r24, 0x00DF
     c38:	82 ff       	sbrs	r24, 2
     c3a:	0e c0       	rjmp	.+28     	; 0xc58 <__vector_10+0xe4>
     c3c:	80 91 de 00 	lds	r24, 0x00DE
     c40:	82 ff       	sbrs	r24, 2
     c42:	0a c0       	rjmp	.+20     	; 0xc58 <__vector_10+0xe4>
	{
		USB_INT_Clear(USB_INT_BCERRI);
     c44:	80 91 df 00 	lds	r24, 0x00DF
     c48:	8b 7f       	andi	r24, 0xFB	; 251
     c4a:	80 93 df 00 	sts	0x00DF, r24

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     c4e:	82 e0       	ldi	r24, 0x02	; 2
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	60 db       	rcall	.-2368   	; 0x314 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     c54:	a8 db       	rcall	.-2224   	; 0x3a6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c56:	12 df       	rcall	.-476    	; 0xa7c <USB_ResetInterface>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     c58:	80 91 9f 00 	lds	r24, 0x009F
     c5c:	85 ff       	sbrs	r24, 5
     c5e:	0a c0       	rjmp	.+20     	; 0xc74 <__vector_10+0x100>
     c60:	80 91 a0 00 	lds	r24, 0x00A0
     c64:	85 ff       	sbrs	r24, 5
     c66:	06 c0       	rjmp	.+12     	; 0xc74 <__vector_10+0x100>
	{
		USB_INT_Clear(USB_INT_HSOFI);
     c68:	80 91 9f 00 	lds	r24, 0x009F
     c6c:	8f 7d       	andi	r24, 0xDF	; 223
     c6e:	80 93 9f 00 	sts	0x009F, r24

		EVENT_USB_Host_StartOfFrame();
     c72:	ae d0       	rcall	.+348    	; 0xdd0 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c74:	ff 91       	pop	r31
     c76:	ef 91       	pop	r30
     c78:	bf 91       	pop	r27
     c7a:	af 91       	pop	r26
     c7c:	9f 91       	pop	r25
     c7e:	8f 91       	pop	r24
     c80:	7f 91       	pop	r23
     c82:	6f 91       	pop	r22
     c84:	5f 91       	pop	r21
     c86:	4f 91       	pop	r20
     c88:	3f 91       	pop	r19
     c8a:	2f 91       	pop	r18
     c8c:	0f 90       	pop	r0
     c8e:	0b be       	out	0x3b, r0	; 59
     c90:	0f 90       	pop	r0
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	0f 90       	pop	r0
     c96:	1f 90       	pop	r1
     c98:	18 95       	reti

00000c9a <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
     c9a:	af 92       	push	r10
     c9c:	bf 92       	push	r11
     c9e:	cf 92       	push	r12
     ca0:	df 92       	push	r13
     ca2:	ef 92       	push	r14
     ca4:	ff 92       	push	r15
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	7c 01       	movw	r14, r24
     cb0:	8b 01       	movw	r16, r22
     cb2:	5a 01       	movw	r10, r20
     cb4:	21 c0       	rjmp	.+66     	; 0xcf8 <USB_GetNextDescriptorComp+0x5e>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     cb6:	f8 01       	movw	r30, r16
     cb8:	c0 81       	ld	r28, Z
     cba:	d1 81       	ldd	r29, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     cbc:	88 81       	ld	r24, Y
     cbe:	90 e0       	ldi	r25, 0x00	; 0

				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
     cc0:	9e 01       	movw	r18, r28
     cc2:	28 0f       	add	r18, r24
     cc4:	39 1f       	adc	r19, r25
     cc6:	31 83       	std	Z+1, r19	; 0x01
     cc8:	20 83       	st	Z, r18
				*BytesRem      -= CurrDescriptorSize;
     cca:	f7 01       	movw	r30, r14
     ccc:	20 81       	ld	r18, Z
     cce:	31 81       	ldd	r19, Z+1	; 0x01
     cd0:	28 1b       	sub	r18, r24
     cd2:	39 0b       	sbc	r19, r25
     cd4:	31 83       	std	Z+1, r19	; 0x01
     cd6:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     cd8:	f8 01       	movw	r30, r16
     cda:	80 81       	ld	r24, Z
     cdc:	91 81       	ldd	r25, Z+1	; 0x01
     cde:	f5 01       	movw	r30, r10
     ce0:	09 95       	icall
     ce2:	82 30       	cpi	r24, 0x02	; 2
     ce4:	49 f0       	breq	.+18     	; 0xcf8 <USB_GetNextDescriptorComp+0x5e>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     ce6:	81 30       	cpi	r24, 0x01	; 1
     ce8:	71 f4       	brne	.+28     	; 0xd06 <USB_GetNextDescriptorComp+0x6c>
			{
				*CurrConfigLoc = PrevDescLoc;
     cea:	f8 01       	movw	r30, r16
     cec:	c0 83       	st	Z, r28
     cee:	d1 83       	std	Z+1, r29	; 0x01
				*BytesRem      = PrevBytesRem;
     cf0:	f7 01       	movw	r30, r14
     cf2:	d1 82       	std	Z+1, r13	; 0x01
     cf4:	c0 82       	st	Z, r12
     cf6:	07 c0       	rjmp	.+14     	; 0xd06 <USB_GetNextDescriptorComp+0x6c>

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     cf8:	f7 01       	movw	r30, r14
     cfa:	c0 80       	ld	r12, Z
     cfc:	d1 80       	ldd	r13, Z+1	; 0x01
     cfe:	c1 14       	cp	r12, r1
     d00:	d1 04       	cpc	r13, r1
     d02:	c9 f6       	brne	.-78     	; 0xcb6 <USB_GetNextDescriptorComp+0x1c>
     d04:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	ff 90       	pop	r15
     d10:	ef 90       	pop	r14
     d12:	df 90       	pop	r13
     d14:	cf 90       	pop	r12
     d16:	bf 90       	pop	r11
     d18:	af 90       	pop	r10
     d1a:	08 95       	ret

00000d1c <USB_Host_GetDeviceConfigDescriptor>:
#include "ConfigDescriptor.h"

#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(uint8_t ConfigNumber, uint16_t* const ConfigSizePtr,
                                           void* BufferPtr, uint16_t BufferSize)
{
     d1c:	cf 92       	push	r12
     d1e:	df 92       	push	r13
     d20:	ef 92       	push	r14
     d22:	ff 92       	push	r15
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	29 97       	sbiw	r28, 0x09	; 9
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
     d3c:	6b 01       	movw	r12, r22
     d3e:	8a 01       	movw	r16, r20
     d40:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     d42:	90 e8       	ldi	r25, 0x80	; 128
     d44:	90 93 60 01 	sts	0x0160, r25
     d48:	96 e0       	ldi	r25, 0x06	; 6
     d4a:	90 93 61 01 	sts	0x0161, r25
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	92 60       	ori	r25, 0x02	; 2
     d54:	90 93 63 01 	sts	0x0163, r25
     d58:	80 93 62 01 	sts	0x0162, r24
     d5c:	10 92 65 01 	sts	0x0165, r1
     d60:	10 92 64 01 	sts	0x0164, r1
     d64:	89 e0       	ldi	r24, 0x09	; 9
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	90 93 67 01 	sts	0x0167, r25
     d6c:	80 93 66 01 	sts	0x0166, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     d70:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     d74:	ce 01       	movw	r24, r28
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	55 d0       	rcall	.+170    	; 0xe24 <USB_Host_SendControlRequest>
     d7a:	28 2f       	mov	r18, r24
     d7c:	88 23       	and	r24, r24
     d7e:	c1 f4       	brne	.+48     	; 0xdb0 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize;
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	9c 81       	ldd	r25, Y+4	; 0x04
     d84:	f6 01       	movw	r30, r12
     d86:	91 83       	std	Z+1, r25	; 0x01
     d88:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     d8a:	e8 16       	cp	r14, r24
     d8c:	f9 06       	cpc	r15, r25
     d8e:	10 f4       	brcc	.+4      	; 0xd94 <USB_Host_GetDeviceConfigDescriptor+0x78>
     d90:	25 e0       	ldi	r18, 0x05	; 5
     d92:	0e c0       	rjmp	.+28     	; 0xdb0 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     d94:	90 93 67 01 	sts	0x0167, r25
     d98:	80 93 66 01 	sts	0x0166, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     d9c:	c8 01       	movw	r24, r16
     d9e:	42 d0       	rcall	.+132    	; 0xe24 <USB_Host_SendControlRequest>
     da0:	28 2f       	mov	r18, r24
     da2:	88 23       	and	r24, r24
     da4:	29 f4       	brne	.+10     	; 0xdb0 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     da6:	f8 01       	movw	r30, r16
     da8:	81 81       	ldd	r24, Z+1	; 0x01
     daa:	82 30       	cpi	r24, 0x02	; 2
     dac:	09 f0       	breq	.+2      	; 0xdb0 <USB_Host_GetDeviceConfigDescriptor+0x94>
     dae:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     db0:	82 2f       	mov	r24, r18
     db2:	29 96       	adiw	r28, 0x09	; 9
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	de bf       	out	0x3e, r29	; 62
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	cd bf       	out	0x3d, r28	; 61
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	df 90       	pop	r13
     dcc:	cf 90       	pop	r12
     dce:	08 95       	ret

00000dd0 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     dd0:	08 95       	ret

00000dd2 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	18 2f       	mov	r17, r24
     dda:	c8 ee       	ldi	r28, 0xE8	; 232
     ddc:	d3 e0       	ldi	r29, 0x03	; 3
     dde:	09 c0       	rjmp	.+18     	; 0xdf2 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	f8 db       	rcall	.-2064   	; 0x5d4 <USB_Host_WaitMS>
     de4:	88 23       	and	r24, r24
     de6:	d1 f4       	brne	.+52     	; 0xe1c <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     de8:	20 97       	sbiw	r28, 0x00	; 0
     dea:	11 f4       	brne	.+4      	; 0xdf0 <USB_Host_WaitForIOS+0x1e>
     dec:	84 e0       	ldi	r24, 0x04	; 4
     dee:	16 c0       	rjmp	.+44     	; 0xe1c <USB_Host_WaitForIOS+0x4a>
     df0:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     df2:	11 23       	and	r17, r17
     df4:	29 f4       	brne	.+10     	; 0xe00 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean true if the current pipe is ready for a SETUP packet, false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     df6:	80 91 a6 00 	lds	r24, 0x00A6
     dfa:	83 ff       	sbrs	r24, 3
     dfc:	f1 cf       	rjmp	.-30     	; 0xde0 <USB_Host_WaitForIOS+0xe>
     dfe:	0d c0       	rjmp	.+26     	; 0xe1a <USB_Host_WaitForIOS+0x48>
     e00:	11 30       	cpi	r17, 0x01	; 1
     e02:	29 f4       	brne	.+10     	; 0xe0e <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     e04:	80 91 a6 00 	lds	r24, 0x00A6
     e08:	80 ff       	sbrs	r24, 0
     e0a:	ea cf       	rjmp	.-44     	; 0xde0 <USB_Host_WaitForIOS+0xe>
     e0c:	06 c0       	rjmp	.+12     	; 0xe1a <USB_Host_WaitForIOS+0x48>
     e0e:	12 30       	cpi	r17, 0x02	; 2
     e10:	39 f7       	brne	.-50     	; 0xde0 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e12:	80 91 a6 00 	lds	r24, 0x00A6
     e16:	82 ff       	sbrs	r24, 2
     e18:	e3 cf       	rjmp	.-58     	; 0xde0 <USB_Host_WaitForIOS+0xe>
     e1a:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	1f 91       	pop	r17
     e22:	08 95       	ret

00000e24 <USB_Host_SendControlRequest>:

#define  __INCLUDE_FROM_HOSTSTDREQ_C
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     e24:	ff 92       	push	r15
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	18 2f       	mov	r17, r24
     e30:	09 2f       	mov	r16, r25
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     e32:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
	bool     BusSuspended   = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus   = HOST_SENDCONTROL_Successful;
	uint16_t DataLen        = USB_ControlRequest.wLength;
     e36:	c0 91 66 01 	lds	r28, 0x0166
     e3a:	d0 91 67 01 	lds	r29, 0x0167
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e3e:	80 91 9e 00 	lds	r24, 0x009E
     e42:	81 60       	ori	r24, 0x01	; 1
     e44:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	c4 db       	rcall	.-2168   	; 0x5d4 <USB_Host_WaitMS>
     e4c:	98 2f       	mov	r25, r24
     e4e:	88 23       	and	r24, r24
     e50:	09 f0       	breq	.+2      	; 0xe54 <USB_Host_SendControlRequest+0x30>
     e52:	d2 c0       	rjmp	.+420    	; 0xff8 <USB_Host_SendControlRequest+0x1d4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e54:	80 91 aa 00 	lds	r24, 0x00AA
     e58:	8f 7c       	andi	r24, 0xCF	; 207
     e5a:	80 93 aa 00 	sts	0x00AA, r24
			 *  flag for the pipe.
			 */
			static inline void Pipe_ClearErrorFlags(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearErrorFlags(void)
			{
				UPERRX = 0;
     e5e:	10 92 f5 00 	sts	0x00F5, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e62:	80 91 a9 00 	lds	r24, 0x00A9
     e66:	8f 7b       	andi	r24, 0xBF	; 191
     e68:	80 93 a9 00 	sts	0x00A9, r24
     e6c:	e0 e6       	ldi	r30, 0x60	; 96
     e6e:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_Byte(*(HeaderStream++));
     e70:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
     e72:	80 93 af 00 	sts	0x00AF, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	e8 36       	cpi	r30, 0x68	; 104
     e7a:	f8 07       	cpc	r31, r24
     e7c:	c9 f7       	brne	.-14     	; 0xe70 <USB_Host_SendControlRequest+0x4c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     e7e:	80 91 a6 00 	lds	r24, 0x00A6
     e82:	87 77       	andi	r24, 0x77	; 119
     e84:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_Byte(*(HeaderStream++));

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	a3 df       	rcall	.-186    	; 0xdd2 <USB_Host_WaitForIOS>
     e8c:	98 2f       	mov	r25, r24
     e8e:	88 23       	and	r24, r24
     e90:	09 f0       	breq	.+2      	; 0xe94 <USB_Host_SendControlRequest+0x70>
     e92:	b2 c0       	rjmp	.+356    	; 0xff8 <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     e94:	80 91 a9 00 	lds	r24, 0x00A9
     e98:	80 64       	ori	r24, 0x40	; 64
     e9a:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	99 db       	rcall	.-2254   	; 0x5d4 <USB_Host_WaitMS>
     ea2:	98 2f       	mov	r25, r24
     ea4:	88 23       	and	r24, r24
     ea6:	09 f0       	breq	.+2      	; 0xeaa <USB_Host_SendControlRequest+0x86>
     ea8:	a7 c0       	rjmp	.+334    	; 0xff8 <USB_Host_SendControlRequest+0x1d4>
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
     eaa:	21 2f       	mov	r18, r17
     eac:	30 2f       	mov	r19, r16
     eae:	c9 01       	movw	r24, r18
     eb0:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     eb2:	80 91 60 01 	lds	r24, 0x0160
     eb6:	87 ff       	sbrs	r24, 7
     eb8:	52 c0       	rjmp	.+164    	; 0xf5e <USB_Host_SendControlRequest+0x13a>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     eba:	80 91 aa 00 	lds	r24, 0x00AA
     ebe:	8f 7c       	andi	r24, 0xCF	; 207
     ec0:	80 61       	ori	r24, 0x10	; 16
     ec2:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     ec6:	01 15       	cp	r16, r1
     ec8:	11 05       	cpc	r17, r1
     eca:	69 f5       	brne	.+90     	; 0xf26 <USB_Host_SendControlRequest+0x102>
     ecc:	2e c0       	rjmp	.+92     	; 0xf2a <USB_Host_SendControlRequest+0x106>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ece:	80 91 a9 00 	lds	r24, 0x00A9
     ed2:	8f 7b       	andi	r24, 0xBF	; 191
     ed4:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	7b df       	rcall	.-266    	; 0xdd2 <USB_Host_WaitForIOS>
     edc:	98 2f       	mov	r25, r24
     ede:	88 23       	and	r24, r24
     ee0:	09 f0       	breq	.+2      	; 0xee4 <USB_Host_SendControlRequest+0xc0>
     ee2:	8a c0       	rjmp	.+276    	; 0xff8 <USB_Host_SendControlRequest+0x1d4>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     ee4:	80 91 f6 00 	lds	r24, 0x00F6
     ee8:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
     eec:	89 2b       	or	r24, r25
     eee:	49 f4       	brne	.+18     	; 0xf02 <USB_Host_SendControlRequest+0xde>
     ef0:	c0 e0       	ldi	r28, 0x00	; 0
     ef2:	d0 e0       	ldi	r29, 0x00	; 0
     ef4:	06 c0       	rjmp	.+12     	; 0xf02 <USB_Host_SendControlRequest+0xde>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
     ef6:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_Byte();
     efa:	f8 01       	movw	r30, r16
     efc:	81 93       	st	Z+, r24
     efe:	8f 01       	movw	r16, r30
					DataLen--;
     f00:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f02:	80 91 f6 00 	lds	r24, 0x00F6
     f06:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     f0a:	89 2b       	or	r24, r25
     f0c:	11 f0       	breq	.+4      	; 0xf12 <USB_Host_SendControlRequest+0xee>
     f0e:	20 97       	sbiw	r28, 0x00	; 0
     f10:	91 f7       	brne	.-28     	; 0xef6 <USB_Host_SendControlRequest+0xd2>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f12:	80 91 a9 00 	lds	r24, 0x00A9
     f16:	80 64       	ori	r24, 0x40	; 64
     f18:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     f1c:	80 91 a6 00 	lds	r24, 0x00A6
     f20:	8e 77       	andi	r24, 0x7E	; 126
     f22:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     f26:	20 97       	sbiw	r28, 0x00	; 0
     f28:	91 f6       	brne	.-92     	; 0xece <USB_Host_SendControlRequest+0xaa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f2a:	80 91 aa 00 	lds	r24, 0x00AA
     f2e:	8f 7c       	andi	r24, 0xCF	; 207
     f30:	80 62       	ori	r24, 0x20	; 32
     f32:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f36:	80 91 a9 00 	lds	r24, 0x00A9
     f3a:	8f 7b       	andi	r24, 0xBF	; 191
     f3c:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f40:	82 e0       	ldi	r24, 0x02	; 2
     f42:	47 df       	rcall	.-370    	; 0xdd2 <USB_Host_WaitForIOS>
     f44:	98 2f       	mov	r25, r24
     f46:	88 23       	and	r24, r24
     f48:	09 f0       	breq	.+2      	; 0xf4c <USB_Host_SendControlRequest+0x128>
     f4a:	56 c0       	rjmp	.+172    	; 0xff8 <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     f4c:	80 91 a6 00 	lds	r24, 0x00A6
     f50:	8b 77       	andi	r24, 0x7B	; 123
     f52:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f56:	82 e0       	ldi	r24, 0x02	; 2
     f58:	3c df       	rcall	.-392    	; 0xdd2 <USB_Host_WaitForIOS>
     f5a:	98 2f       	mov	r25, r24
     f5c:	4d c0       	rjmp	.+154    	; 0xff8 <USB_Host_SendControlRequest+0x1d4>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
     f5e:	01 15       	cp	r16, r1
     f60:	11 05       	cpc	r17, r1
     f62:	a9 f1       	breq	.+106    	; 0xfce <USB_Host_SendControlRequest+0x1aa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f64:	80 91 aa 00 	lds	r24, 0x00AA
     f68:	8f 7c       	andi	r24, 0xCF	; 207
     f6a:	80 62       	ori	r24, 0x20	; 32
     f6c:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f70:	80 91 a9 00 	lds	r24, 0x00A9
     f74:	8f 7b       	andi	r24, 0xBF	; 191
     f76:	80 93 a9 00 	sts	0x00A9, r24
     f7a:	1d c0       	rjmp	.+58     	; 0xfb6 <USB_Host_SendControlRequest+0x192>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f7c:	82 e0       	ldi	r24, 0x02	; 2
     f7e:	29 df       	rcall	.-430    	; 0xdd2 <USB_Host_WaitForIOS>
     f80:	98 2f       	mov	r25, r24
     f82:	88 23       	and	r24, r24
     f84:	c9 f5       	brne	.+114    	; 0xff8 <USB_Host_SendControlRequest+0x1d4>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
     f86:	80 91 4c 01 	lds	r24, 0x014C
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	07 c0       	rjmp	.+14     	; 0xf9e <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_Byte(*(DataStream++));
     f90:	f8 01       	movw	r30, r16
     f92:	81 91       	ld	r24, Z+
     f94:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
     f96:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
     f9a:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
     f9c:	39 f0       	breq	.+14     	; 0xfac <USB_Host_SendControlRequest+0x188>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f9e:	80 91 f6 00 	lds	r24, 0x00F6
     fa2:	90 91 f7 00 	lds	r25, 0x00F7
     fa6:	82 17       	cp	r24, r18
     fa8:	93 07       	cpc	r25, r19
     faa:	90 f3       	brcs	.-28     	; 0xf90 <USB_Host_SendControlRequest+0x16c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     fac:	80 91 a6 00 	lds	r24, 0x00A6
     fb0:	8b 77       	andi	r24, 0x7B	; 123
     fb2:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
     fb6:	20 97       	sbiw	r28, 0x00	; 0
     fb8:	09 f7       	brne	.-62     	; 0xf7c <USB_Host_SendControlRequest+0x158>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fba:	82 e0       	ldi	r24, 0x02	; 2
     fbc:	0a df       	rcall	.-492    	; 0xdd2 <USB_Host_WaitForIOS>
     fbe:	98 2f       	mov	r25, r24
     fc0:	88 23       	and	r24, r24
     fc2:	d1 f4       	brne	.+52     	; 0xff8 <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fc4:	80 91 a9 00 	lds	r24, 0x00A9
     fc8:	80 64       	ori	r24, 0x40	; 64
     fca:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fce:	80 91 aa 00 	lds	r24, 0x00AA
     fd2:	8f 7c       	andi	r24, 0xCF	; 207
     fd4:	80 61       	ori	r24, 0x10	; 16
     fd6:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fda:	80 91 a9 00 	lds	r24, 0x00A9
     fde:	8f 7b       	andi	r24, 0xBF	; 191
     fe0:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	f5 de       	rcall	.-534    	; 0xdd2 <USB_Host_WaitForIOS>
     fe8:	98 2f       	mov	r25, r24
     fea:	88 23       	and	r24, r24
     fec:	29 f4       	brne	.+10     	; 0xff8 <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     fee:	80 91 a6 00 	lds	r24, 0x00A6
     ff2:	8e 77       	andi	r24, 0x7E	; 126
     ff4:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ff8:	80 91 a9 00 	lds	r24, 0x00A9
     ffc:	80 64       	ori	r24, 0x40	; 64
     ffe:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1002:	f0 fc       	sbrc	r15, 0
    1004:	05 c0       	rjmp	.+10     	; 0x1010 <USB_Host_SendControlRequest+0x1ec>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1006:	80 91 9e 00 	lds	r24, 0x009E
    100a:	8e 7f       	andi	r24, 0xFE	; 254
    100c:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    1016:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    101a:	89 2f       	mov	r24, r25
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	08 95       	ret

00001028 <Pipe_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    1028:	df 92       	push	r13
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	18 2f       	mov	r17, r24
    1038:	09 2f       	mov	r16, r25
    103a:	eb 01       	movw	r28, r22
    103c:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    103e:	80 91 aa 00 	lds	r24, 0x00AA
    1042:	8f 7c       	andi	r24, 0xCF	; 207
    1044:	80 62       	ori	r24, 0x20	; 32
    1046:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    104a:	eb dc       	rcall	.-1578   	; 0xa22 <Pipe_WaitUntilReady>
    104c:	d8 2e       	mov	r13, r24
    104e:	88 23       	and	r24, r24
    1050:	19 f5       	brne	.+70     	; 0x1098 <Pipe_Write_Stream_LE+0x70>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1052:	81 2f       	mov	r24, r17
    1054:	90 2f       	mov	r25, r16
    1056:	9c 01       	movw	r18, r24
    1058:	89 01       	movw	r16, r18
    105a:	1c c0       	rjmp	.+56     	; 0x1094 <Pipe_Write_Stream_LE+0x6c>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    105c:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1060:	85 fd       	sbrc	r24, 5
    1062:	12 c0       	rjmp	.+36     	; 0x1088 <Pipe_Write_Stream_LE+0x60>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1064:	80 91 a6 00 	lds	r24, 0x00A6
    1068:	8b 77       	andi	r24, 0x7B	; 123
    106a:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    106e:	e1 14       	cp	r14, r1
    1070:	f1 04       	cpc	r15, r1
    1072:	31 f0       	breq	.+12     	; 0x1080 <Pipe_Write_Stream_LE+0x58>
    1074:	f7 01       	movw	r30, r14
    1076:	09 95       	icall
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	11 f4       	brne	.+4      	; 0x1080 <Pipe_Write_Stream_LE+0x58>
    107c:	84 e0       	ldi	r24, 0x04	; 4
    107e:	0d c0       	rjmp	.+26     	; 0x109a <Pipe_Write_Stream_LE+0x72>
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1080:	d0 dc       	rcall	.-1632   	; 0xa22 <Pipe_WaitUntilReady>
    1082:	88 23       	and	r24, r24
    1084:	39 f0       	breq	.+14     	; 0x1094 <Pipe_Write_Stream_LE+0x6c>
    1086:	09 c0       	rjmp	.+18     	; 0x109a <Pipe_Write_Stream_LE+0x72>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1088:	f8 01       	movw	r30, r16
    108a:	81 91       	ld	r24, Z+
    108c:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    108e:	80 93 af 00 	sts	0x00AF, r24
			Length--;
    1092:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    1094:	20 97       	sbiw	r28, 0x00	; 0
    1096:	11 f7       	brne	.-60     	; 0x105c <Pipe_Write_Stream_LE+0x34>
    1098:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	1f 91       	pop	r17
    10a0:	0f 91       	pop	r16
    10a2:	ff 90       	pop	r15
    10a4:	ef 90       	pop	r14
    10a6:	df 90       	pop	r13
    10a8:	08 95       	ret

000010aa <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    10aa:	ff 92       	push	r15
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    10b0:	07 ea       	ldi	r16, 0xA7	; 167
    10b2:	10 e0       	ldi	r17, 0x00	; 0
    10b4:	f8 01       	movw	r30, r16
    10b6:	f0 80       	ld	r15, Z
    10b8:	f7 e0       	ldi	r31, 0x07	; 7
    10ba:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    10bc:	f8 01       	movw	r30, r16
    10be:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    10c0:	38 db       	rcall	.-2448   	; 0x732 <USB_Host_ProcessNextHostState>
    10c2:	f8 01       	movw	r30, r16
    10c4:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    10c6:	1f 91       	pop	r17
    10c8:	0f 91       	pop	r16
    10ca:	ff 90       	pop	r15
    10cc:	08 95       	ret

000010ce <DCOMP_PRNT_Host_NextPRNTInterface>:

	return PRNT_ENUMERROR_NoError;
}

static uint8_t DCOMP_PRNT_Host_NextPRNTInterface(void* CurrentDescriptor)
{
    10ce:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    10d0:	81 81       	ldd	r24, Z+1	; 0x01
    10d2:	84 30       	cpi	r24, 0x04	; 4
    10d4:	59 f4       	brne	.+22     	; 0x10ec <DCOMP_PRNT_Host_NextPRNTInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == PRNT_CSCP_PrinterClass)    &&
    10d6:	85 81       	ldd	r24, Z+5	; 0x05
    10d8:	87 30       	cpi	r24, 0x07	; 7
    10da:	41 f4       	brne	.+16     	; 0x10ec <DCOMP_PRNT_Host_NextPRNTInterface+0x1e>
    10dc:	86 81       	ldd	r24, Z+6	; 0x06
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	29 f4       	brne	.+10     	; 0x10ec <DCOMP_PRNT_Host_NextPRNTInterface+0x1e>
    10e2:	87 81       	ldd	r24, Z+7	; 0x07
    10e4:	82 30       	cpi	r24, 0x02	; 2
    10e6:	11 f4       	brne	.+4      	; 0x10ec <DCOMP_PRNT_Host_NextPRNTInterface+0x1e>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	08 95       	ret
    10ec:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    10ee:	08 95       	ret

000010f0 <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint>:

static uint8_t DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint(void* CurrentDescriptor)
{
    10f0:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    10f2:	81 81       	ldd	r24, Z+1	; 0x01
    10f4:	85 30       	cpi	r24, 0x05	; 5
    10f6:	31 f4       	brne	.+12     	; 0x1104 <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (EndpointType == EP_TYPE_BULK)
    10f8:	83 81       	ldd	r24, Z+3	; 0x03
    10fa:	83 70       	andi	r24, 0x03	; 3
    10fc:	82 30       	cpi	r24, 0x02	; 2
    10fe:	31 f4       	brne	.+12     	; 0x110c <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint+0x1c>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1104:	84 30       	cpi	r24, 0x04	; 4
    1106:	11 f4       	brne	.+4      	; 0x110c <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint+0x1c>
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	08 95       	ret
    110c:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    110e:	08 95       	ret

00001110 <PRNT_Host_SetBidirectionalMode>:
	PRNT_Host_Flush(PRNTInterfaceInfo);
	#endif
}

uint8_t PRNT_Host_SetBidirectionalMode(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo)
{
    1110:	fc 01       	movw	r30, r24
	if (PRNTInterfaceInfo->State.AlternateSetting)
    1112:	26 81       	ldd	r18, Z+6	; 0x06
    1114:	22 23       	and	r18, r18
    1116:	11 f4       	brne	.+4      	; 0x111c <PRNT_Host_SetBidirectionalMode+0xc>
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	08 95       	ret
	{
		uint8_t ErrorCode;

		USB_ControlRequest = (USB_Request_Header_t)
    111c:	85 81       	ldd	r24, Z+5	; 0x05
    111e:	91 e0       	ldi	r25, 0x01	; 1
    1120:	90 93 60 01 	sts	0x0160, r25
    1124:	9b e0       	ldi	r25, 0x0B	; 11
    1126:	90 93 61 01 	sts	0x0161, r25
    112a:	20 93 62 01 	sts	0x0162, r18
    112e:	10 92 63 01 	sts	0x0163, r1
    1132:	80 93 64 01 	sts	0x0164, r24
    1136:	10 92 65 01 	sts	0x0165, r1
    113a:	10 92 67 01 	sts	0x0167, r1
    113e:	10 92 66 01 	sts	0x0166, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1142:	10 92 a7 00 	sts	0x00A7, r1
				.wLength       = 0,
			};

		Pipe_SelectPipe(PIPE_CONTROLPIPE);

		if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
		  return ErrorCode;
	}

	return HOST_SENDCONTROL_Successful;
}
    114a:	6c ce       	rjmp	.-808    	; 0xe24 <USB_Host_SendControlRequest>

0000114c <PRNT_Host_GetDeviceID>:
}

uint8_t PRNT_Host_GetDeviceID(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo,
                              char* const DeviceIDString,
                              const uint16_t BufferSize)
{
    114c:	cf 92       	push	r12
    114e:	df 92       	push	r13
    1150:	ff 92       	push	r15
    1152:	0f 93       	push	r16
    1154:	1f 93       	push	r17
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	00 d0       	rcall	.+0      	; 0x115c <PRNT_Host_GetDeviceID+0x10>
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    1160:	8b 01       	movw	r16, r22
    1162:	6a 01       	movw	r12, r20
	uint8_t  ErrorCode = HOST_SENDCONTROL_Successful;
	uint16_t DeviceIDStringLength = 0;
    1164:	1a 82       	std	Y+2, r1	; 0x02
    1166:	19 82       	std	Y+1, r1	; 0x01

	USB_ControlRequest = (USB_Request_Header_t)
    1168:	fc 01       	movw	r30, r24
    116a:	95 81       	ldd	r25, Z+5	; 0x05
    116c:	81 ea       	ldi	r24, 0xA1	; 161
    116e:	80 93 60 01 	sts	0x0160, r24
    1172:	10 92 61 01 	sts	0x0161, r1
    1176:	10 92 63 01 	sts	0x0163, r1
    117a:	10 92 62 01 	sts	0x0162, r1
    117e:	90 93 64 01 	sts	0x0164, r25
    1182:	10 92 65 01 	sts	0x0165, r1
    1186:	82 e0       	ldi	r24, 0x02	; 2
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	90 93 67 01 	sts	0x0167, r25
    118e:	80 93 66 01 	sts	0x0166, r24
    1192:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(DeviceIDStringLength),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(&DeviceIDStringLength)) != HOST_SENDCONTROL_Successful)
    1196:	ce 01       	movw	r24, r28
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	44 de       	rcall	.-888    	; 0xe24 <USB_Host_SendControlRequest>
    119c:	f8 2e       	mov	r15, r24
    119e:	88 23       	and	r24, r24
    11a0:	51 f5       	brne	.+84     	; 0x11f6 <PRNT_Host_GetDeviceID+0xaa>
	  return ErrorCode;

	if (!(DeviceIDStringLength))
    11a2:	29 81       	ldd	r18, Y+1	; 0x01
    11a4:	3a 81       	ldd	r19, Y+2	; 0x02
    11a6:	21 15       	cp	r18, r1
    11a8:	31 05       	cpc	r19, r1
    11aa:	19 f1       	breq	.+70     	; 0x11f2 <PRNT_Host_GetDeviceID+0xa6>

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
    11ac:	83 2f       	mov	r24, r19
    11ae:	92 2f       	mov	r25, r18
	{
		DeviceIDString[0] = 0x00;
		return HOST_SENDCONTROL_Successful;
	}

	DeviceIDStringLength = SwapEndian_16(DeviceIDStringLength);
    11b0:	9a 83       	std	Y+2, r25	; 0x02
    11b2:	89 83       	std	Y+1, r24	; 0x01

	if (DeviceIDStringLength > BufferSize)
    11b4:	c8 16       	cp	r12, r24
    11b6:	d9 06       	cpc	r13, r25
    11b8:	10 f4       	brcc	.+4      	; 0x11be <PRNT_Host_GetDeviceID+0x72>
	  DeviceIDStringLength = BufferSize;
    11ba:	da 82       	std	Y+2, r13	; 0x02
    11bc:	c9 82       	std	Y+1, r12	; 0x01

	USB_ControlRequest.wLength = DeviceIDStringLength;
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	9a 81       	ldd	r25, Y+2	; 0x02
    11c2:	90 93 67 01 	sts	0x0167, r25
    11c6:	80 93 66 01 	sts	0x0166, r24

	if ((ErrorCode = USB_Host_SendControlRequest(DeviceIDString)) != HOST_SENDCONTROL_Successful)
    11ca:	c8 01       	movw	r24, r16
    11cc:	2b de       	rcall	.-938    	; 0xe24 <USB_Host_SendControlRequest>
    11ce:	f8 2e       	mov	r15, r24
    11d0:	88 23       	and	r24, r24
    11d2:	89 f4       	brne	.+34     	; 0x11f6 <PRNT_Host_GetDeviceID+0xaa>
	  return ErrorCode;

	memmove(&DeviceIDString[0], &DeviceIDString[2], DeviceIDStringLength - 2);
    11d4:	b8 01       	movw	r22, r16
    11d6:	6e 5f       	subi	r22, 0xFE	; 254
    11d8:	7f 4f       	sbci	r23, 0xFF	; 255
    11da:	49 81       	ldd	r20, Y+1	; 0x01
    11dc:	5a 81       	ldd	r21, Y+2	; 0x02
    11de:	42 50       	subi	r20, 0x02	; 2
    11e0:	50 40       	sbci	r21, 0x00	; 0
    11e2:	c8 01       	movw	r24, r16
    11e4:	5c d1       	rcall	.+696    	; 0x149e <memmove>

	DeviceIDString[DeviceIDStringLength - 2] = 0x00;
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ea:	08 0f       	add	r16, r24
    11ec:	19 1f       	adc	r17, r25
    11ee:	02 50       	subi	r16, 0x02	; 2
    11f0:	10 40       	sbci	r17, 0x00	; 0
    11f2:	f8 01       	movw	r30, r16
    11f4:	10 82       	st	Z, r1

	return HOST_SENDCONTROL_Successful;
}
    11f6:	8f 2d       	mov	r24, r15
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	ff 90       	pop	r15
    1206:	df 90       	pop	r13
    1208:	cf 90       	pop	r12
    120a:	08 95       	ret

0000120c <PRNT_Host_SendString>:
}

uint8_t PRNT_Host_SendString(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo,
                             void* Buffer,
                             const uint16_t Length)
{
    120c:	fc 01       	movw	r30, r24
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
    120e:	80 91 68 01 	lds	r24, 0x0168
    1212:	8c 30       	cpi	r24, 0x0C	; 12
    1214:	01 f5       	brne	.+64     	; 0x1256 <PRNT_Host_SendString+0x4a>
    1216:	84 81       	ldd	r24, Z+4	; 0x04
    1218:	88 23       	and	r24, r24
    121a:	e9 f0       	breq	.+58     	; 0x1256 <PRNT_Host_SendString+0x4a>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(PRNTInterfaceInfo->Config.DataOUTPipeNumber);
    121c:	82 81       	ldd	r24, Z+2	; 0x02
    121e:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1222:	80 91 a9 00 	lds	r24, 0x00A9
    1226:	8f 7b       	andi	r24, 0xBF	; 191
    1228:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(Buffer, Length, NO_STREAM_CALLBACK)) != PIPE_RWSTREAM_NoError)
    122c:	cb 01       	movw	r24, r22
    122e:	ba 01       	movw	r22, r20
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	f9 de       	rcall	.-526    	; 0x1028 <Pipe_Write_Stream_LE>
    1236:	98 2f       	mov	r25, r24
    1238:	88 23       	and	r24, r24
    123a:	71 f4       	brne	.+28     	; 0x1258 <PRNT_Host_SendString+0x4c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    123c:	80 91 a6 00 	lds	r24, 0x00A6
    1240:	8b 77       	andi	r24, 0x7B	; 123
    1242:	80 93 a6 00 	sts	0x00A6, r24
	  return ErrorCode;

	Pipe_ClearOUT();

	ErrorCode = Pipe_WaitUntilReady();
    1246:	ed db       	rcall	.-2086   	; 0xa22 <Pipe_WaitUntilReady>
    1248:	98 2f       	mov	r25, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    124a:	80 91 a9 00 	lds	r24, 0x00A9
    124e:	80 64       	ori	r24, 0x40	; 64
    1250:	80 93 a9 00 	sts	0x00A9, r24
    1254:	01 c0       	rjmp	.+2      	; 0x1258 <PRNT_Host_SendString+0x4c>

	Pipe_Freeze();

	return ErrorCode;
    1256:	92 e0       	ldi	r25, 0x02	; 2
}
    1258:	89 2f       	mov	r24, r25
    125a:	08 95       	ret

0000125c <PRNT_Host_Flush>:

	return USB_Host_SendControlRequest(NULL);
}

uint8_t PRNT_Host_Flush(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo)
{
    125c:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
    125e:	80 91 68 01 	lds	r24, 0x0168
    1262:	8c 30       	cpi	r24, 0x0C	; 12
    1264:	49 f5       	brne	.+82     	; 0x12b8 <PRNT_Host_Flush+0x5c>
    1266:	84 81       	ldd	r24, Z+4	; 0x04
    1268:	88 23       	and	r24, r24
    126a:	31 f1       	breq	.+76     	; 0x12b8 <PRNT_Host_Flush+0x5c>
	  return PIPE_READYWAIT_DeviceDisconnected;

	uint8_t ErrorCode;

	Pipe_SelectPipe(PRNTInterfaceInfo->Config.DataOUTPipeNumber);
    126c:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    126e:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1272:	80 91 a9 00 	lds	r24, 0x00A9
    1276:	8f 7b       	andi	r24, 0xBF	; 191
    1278:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    127c:	80 91 f6 00 	lds	r24, 0x00F6
    1280:	90 91 f7 00 	lds	r25, 0x00F7
	Pipe_Unfreeze();

	if (!(Pipe_BytesInPipe()))
    1284:	89 2b       	or	r24, r25
    1286:	b1 f0       	breq	.+44     	; 0x12b4 <PRNT_Host_Flush+0x58>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1288:	90 91 a6 00 	lds	r25, 0x00A6
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    128c:	80 91 a6 00 	lds	r24, 0x00A6
    1290:	8b 77       	andi	r24, 0x7B	; 123
    1292:	80 93 a6 00 	sts	0x00A6, r24

	bool BankFull = !(Pipe_IsReadWriteAllowed());

	Pipe_ClearOUT();

	if (BankFull)
    1296:	95 fd       	sbrc	r25, 5
    1298:	08 c0       	rjmp	.+16     	; 0x12aa <PRNT_Host_Flush+0x4e>
	{
		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
    129a:	c3 db       	rcall	.-2170   	; 0xa22 <Pipe_WaitUntilReady>
    129c:	88 23       	and	r24, r24
    129e:	69 f4       	brne	.+26     	; 0x12ba <PRNT_Host_Flush+0x5e>
    12a0:	80 91 a6 00 	lds	r24, 0x00A6
    12a4:	8b 77       	andi	r24, 0x7B	; 123
    12a6:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    12aa:	80 91 a9 00 	lds	r24, 0x00A9
    12ae:	80 64       	ori	r24, 0x40	; 64
    12b0:	80 93 a9 00 	sts	0x00A9, r24
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	08 95       	ret
		Pipe_ClearOUT();
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
    12b8:	82 e0       	ldi	r24, 0x02	; 2
}
    12ba:	08 95       	ret

000012bc <PRNT_Host_USBTask>:

	return DESCRIPTOR_SEARCH_NotFound;
}

void PRNT_Host_USBTask(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo)
{
    12bc:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
    12be:	80 91 68 01 	lds	r24, 0x0168
    12c2:	8c 30       	cpi	r24, 0x0C	; 12
    12c4:	29 f4       	brne	.+10     	; 0x12d0 <PRNT_Host_USBTask+0x14>
    12c6:	84 81       	ldd	r24, Z+4	; 0x04
    12c8:	88 23       	and	r24, r24
    12ca:	11 f0       	breq	.+4      	; 0x12d0 <PRNT_Host_USBTask+0x14>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	PRNT_Host_Flush(PRNTInterfaceInfo);
    12cc:	cf 01       	movw	r24, r30
    12ce:	c6 cf       	rjmp	.-116    	; 0x125c <PRNT_Host_Flush>
    12d0:	08 95       	ret

000012d2 <PRNT_Host_ConfigurePipes>:
#include "Printer.h"

uint8_t PRNT_Host_ConfigurePipes(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo,
                                 uint16_t ConfigDescriptorSize,
							     void* ConfigDescriptorData)
{
    12d2:	6f 92       	push	r6
    12d4:	7f 92       	push	r7
    12d6:	8f 92       	push	r8
    12d8:	9f 92       	push	r9
    12da:	af 92       	push	r10
    12dc:	bf 92       	push	r11
    12de:	cf 92       	push	r12
    12e0:	df 92       	push	r13
    12e2:	ef 92       	push	r14
    12e4:	ff 92       	push	r15
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <PRNT_Host_ConfigurePipes+0x1e>
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <PRNT_Host_ConfigurePipes+0x20>
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	6c 01       	movw	r12, r24
    12f8:	7a 83       	std	Y+2, r23	; 0x02
    12fa:	69 83       	std	Y+1, r22	; 0x01
    12fc:	5c 83       	std	Y+4, r21	; 0x04
    12fe:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint   = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint  = NULL;
	USB_Descriptor_Interface_t* PrinterInterface = NULL;

	memset(&PRNTInterfaceInfo->State, 0x00, sizeof(PRNTInterfaceInfo->State));
    1300:	04 96       	adiw	r24, 0x04	; 4
    1302:	fc 01       	movw	r30, r24
    1304:	87 e0       	ldi	r24, 0x07	; 7
    1306:	df 01       	movw	r26, r30
    1308:	1d 92       	st	X+, r1
    130a:	8a 95       	dec	r24
    130c:	e9 f7       	brne	.-6      	; 0x1308 <PRNT_Host_ConfigurePipes+0x36>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    130e:	eb 81       	ldd	r30, Y+3	; 0x03
    1310:	fc 81       	ldd	r31, Y+4	; 0x04
    1312:	81 81       	ldd	r24, Z+1	; 0x01
    1314:	82 30       	cpi	r24, 0x02	; 2
    1316:	11 f0       	breq	.+4      	; 0x131c <PRNT_Host_ConfigurePipes+0x4a>
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	8a c0       	rjmp	.+276    	; 0x1430 <PRNT_Host_ConfigurePipes+0x15e>
    131c:	88 24       	eor	r8, r8
    131e:	99 24       	eor	r9, r9
    1320:	aa 24       	eor	r10, r10
    1322:	bb 24       	eor	r11, r11
    1324:	66 24       	eor	r6, r6
    1326:	77 24       	eor	r7, r7
	  return PRNT_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(PrinterInterface) ||
    1328:	83 e0       	ldi	r24, 0x03	; 3
    132a:	e8 2e       	mov	r14, r24
    132c:	f1 2c       	mov	r15, r1
    132e:	ec 0e       	add	r14, r28
    1330:	fd 1e       	adc	r15, r29
    1332:	8e 01       	movw	r16, r28
    1334:	0f 5f       	subi	r16, 0xFF	; 255
    1336:	1f 4f       	sbci	r17, 0xFF	; 255
    1338:	61 14       	cp	r6, r1
    133a:	71 04       	cpc	r7, r1
    133c:	39 f0       	breq	.+14     	; 0x134c <PRNT_Host_ConfigurePipes+0x7a>
    133e:	c8 01       	movw	r24, r16
    1340:	b7 01       	movw	r22, r14
    1342:	48 e7       	ldi	r20, 0x78	; 120
    1344:	58 e0       	ldi	r21, 0x08	; 8
    1346:	a9 dc       	rcall	.-1710   	; 0xc9a <USB_GetNextDescriptorComp>
    1348:	88 23       	and	r24, r24
    134a:	81 f0       	breq	.+32     	; 0x136c <PRNT_Host_ConfigurePipes+0x9a>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    134c:	c8 01       	movw	r24, r16
    134e:	b7 01       	movw	r22, r14
    1350:	47 e6       	ldi	r20, 0x67	; 103
    1352:	58 e0       	ldi	r21, 0x08	; 8
    1354:	a2 dc       	rcall	.-1724   	; 0xc9a <USB_GetNextDescriptorComp>
    1356:	88 23       	and	r24, r24
    1358:	11 f0       	breq	.+4      	; 0x135e <PRNT_Host_ConfigurePipes+0x8c>
    135a:	82 e0       	ldi	r24, 0x02	; 2
    135c:	69 c0       	rjmp	.+210    	; 0x1430 <PRNT_Host_ConfigurePipes+0x15e>
			                              DCOMP_PRNT_Host_NextPRNTInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return PRNT_ENUMERROR_NoCompatibleInterfaceFound;
			}

			PrinterInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    135e:	6b 80       	ldd	r6, Y+3	; 0x03
    1360:	7c 80       	ldd	r7, Y+4	; 0x04
    1362:	aa 24       	eor	r10, r10
    1364:	bb 24       	eor	r11, r11
    1366:	88 24       	eor	r8, r8
    1368:	99 24       	eor	r9, r9
    136a:	e6 cf       	rjmp	.-52     	; 0x1338 <PRNT_Host_ConfigurePipes+0x66>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    136c:	eb 81       	ldd	r30, Y+3	; 0x03
    136e:	fc 81       	ldd	r31, Y+4	; 0x04

		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
    1370:	82 81       	ldd	r24, Z+2	; 0x02
    1372:	87 fd       	sbrc	r24, 7
    1374:	02 c0       	rjmp	.+4      	; 0x137a <PRNT_Host_ConfigurePipes+0xa8>
    1376:	5f 01       	movw	r10, r30
    1378:	01 c0       	rjmp	.+2      	; 0x137c <PRNT_Host_ConfigurePipes+0xaa>
    137a:	4f 01       	movw	r8, r30
	memset(&PRNTInterfaceInfo->State, 0x00, sizeof(PRNTInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return PRNT_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    137c:	81 14       	cp	r8, r1
    137e:	91 04       	cpc	r9, r1
    1380:	d9 f2       	breq	.-74     	; 0x1338 <PRNT_Host_ConfigurePipes+0x66>
    1382:	a1 14       	cp	r10, r1
    1384:	b1 04       	cpc	r11, r1
    1386:	c1 f2       	breq	.-80     	; 0x1338 <PRNT_Host_ConfigurePipes+0x66>
    1388:	ff 24       	eor	r15, r15
    138a:	f3 94       	inc	r15
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
	{
		if (PipeNum == PRNTInterfaceInfo->Config.DataINPipeNumber)
    138c:	f6 01       	movw	r30, r12
    138e:	80 81       	ld	r24, Z
    1390:	f8 16       	cp	r15, r24
    1392:	e1 f4       	brne	.+56     	; 0x13cc <PRNT_Host_ConfigurePipes+0xfa>
		{
			Pipe_ConfigurePipe(PipeNum, EP_TYPE_BULK, PIPE_TOKEN_IN,
    1394:	d4 01       	movw	r26, r8
    1396:	12 96       	adiw	r26, 0x02	; 2
    1398:	2c 91       	ld	r18, X
    139a:	12 97       	sbiw	r26, 0x02	; 2
    139c:	14 96       	adiw	r26, 0x04	; 4
    139e:	0d 91       	ld	r16, X+
    13a0:	1c 91       	ld	r17, X
    13a2:	15 97       	sbiw	r26, 0x05	; 5
    13a4:	81 81       	ldd	r24, Z+1	; 0x01
    13a6:	88 23       	and	r24, r24
    13a8:	11 f4       	brne	.+4      	; 0x13ae <PRNT_Host_ConfigurePipes+0xdc>
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	01 c0       	rjmp	.+2      	; 0x13b0 <PRNT_Host_ConfigurePipes+0xde>
    13ae:	94 e0       	ldi	r25, 0x04	; 4
    13b0:	8f 2d       	mov	r24, r15
    13b2:	62 e0       	ldi	r22, 0x02	; 2
    13b4:	40 e1       	ldi	r20, 0x10	; 16
    13b6:	e9 2e       	mov	r14, r25
    13b8:	ea da       	rcall	.-2604   	; 0x98e <Pipe_ConfigurePipe>
			                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize,
			                   PRNTInterfaceInfo->Config.DataINPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);

			PRNTInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    13ba:	f4 01       	movw	r30, r8
    13bc:	84 81       	ldd	r24, Z+4	; 0x04
    13be:	95 81       	ldd	r25, Z+5	; 0x05
    13c0:	d6 01       	movw	r26, r12
    13c2:	18 96       	adiw	r26, 0x08	; 8
    13c4:	9c 93       	st	X, r25
    13c6:	8e 93       	st	-X, r24
    13c8:	17 97       	sbiw	r26, 0x07	; 7
    13ca:	1f c0       	rjmp	.+62     	; 0x140a <PRNT_Host_ConfigurePipes+0x138>
		}
		else if (PipeNum == PRNTInterfaceInfo->Config.DataOUTPipeNumber)
    13cc:	f6 01       	movw	r30, r12
    13ce:	82 81       	ldd	r24, Z+2	; 0x02
    13d0:	f8 16       	cp	r15, r24
    13d2:	d9 f4       	brne	.+54     	; 0x140a <PRNT_Host_ConfigurePipes+0x138>
		{
			Pipe_ConfigurePipe(PipeNum, EP_TYPE_BULK, PIPE_TOKEN_OUT,
    13d4:	d5 01       	movw	r26, r10
    13d6:	12 96       	adiw	r26, 0x02	; 2
    13d8:	2c 91       	ld	r18, X
    13da:	12 97       	sbiw	r26, 0x02	; 2
    13dc:	14 96       	adiw	r26, 0x04	; 4
    13de:	0d 91       	ld	r16, X+
    13e0:	1c 91       	ld	r17, X
    13e2:	15 97       	sbiw	r26, 0x05	; 5
    13e4:	83 81       	ldd	r24, Z+3	; 0x03
    13e6:	88 23       	and	r24, r24
    13e8:	11 f4       	brne	.+4      	; 0x13ee <PRNT_Host_ConfigurePipes+0x11c>
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	01 c0       	rjmp	.+2      	; 0x13f0 <PRNT_Host_ConfigurePipes+0x11e>
    13ee:	94 e0       	ldi	r25, 0x04	; 4
    13f0:	8f 2d       	mov	r24, r15
    13f2:	62 e0       	ldi	r22, 0x02	; 2
    13f4:	40 e2       	ldi	r20, 0x20	; 32
    13f6:	e9 2e       	mov	r14, r25
    13f8:	ca da       	rcall	.-2668   	; 0x98e <Pipe_ConfigurePipe>
			                   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize,
			                   PRNTInterfaceInfo->Config.DataOUTPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);

			PRNTInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    13fa:	f5 01       	movw	r30, r10
    13fc:	84 81       	ldd	r24, Z+4	; 0x04
    13fe:	95 81       	ldd	r25, Z+5	; 0x05
    1400:	d6 01       	movw	r26, r12
    1402:	1a 96       	adiw	r26, 0x0a	; 10
    1404:	9c 93       	st	X, r25
    1406:	8e 93       	st	-X, r24
    1408:	19 97       	sbiw	r26, 0x09	; 9
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    140a:	f3 94       	inc	r15
    140c:	b7 e0       	ldi	r27, 0x07	; 7
    140e:	fb 16       	cp	r15, r27
    1410:	09 f0       	breq	.+2      	; 0x1414 <PRNT_Host_ConfigurePipes+0x142>
    1412:	bc cf       	rjmp	.-136    	; 0x138c <PRNT_Host_ConfigurePipes+0xba>

			PRNTInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
		}
	}

	PRNTInterfaceInfo->State.InterfaceNumber  = PrinterInterface->InterfaceNumber;
    1414:	f3 01       	movw	r30, r6
    1416:	82 81       	ldd	r24, Z+2	; 0x02
    1418:	d6 01       	movw	r26, r12
    141a:	15 96       	adiw	r26, 0x05	; 5
    141c:	8c 93       	st	X, r24
    141e:	15 97       	sbiw	r26, 0x05	; 5
	PRNTInterfaceInfo->State.AlternateSetting = PrinterInterface->AlternateSetting;
    1420:	83 81       	ldd	r24, Z+3	; 0x03
    1422:	16 96       	adiw	r26, 0x06	; 6
    1424:	8c 93       	st	X, r24
    1426:	16 97       	sbiw	r26, 0x06	; 6
	PRNTInterfaceInfo->State.IsActive = true;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	14 96       	adiw	r26, 0x04	; 4
    142c:	8c 93       	st	X, r24
    142e:	80 e0       	ldi	r24, 0x00	; 0

	return PRNT_ENUMERROR_NoError;
}
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	1f 91       	pop	r17
    143e:	0f 91       	pop	r16
    1440:	ff 90       	pop	r15
    1442:	ef 90       	pop	r14
    1444:	df 90       	pop	r13
    1446:	cf 90       	pop	r12
    1448:	bf 90       	pop	r11
    144a:	af 90       	pop	r10
    144c:	9f 90       	pop	r9
    144e:	8f 90       	pop	r8
    1450:	7f 90       	pop	r7
    1452:	6f 90       	pop	r6
    1454:	08 95       	ret

00001456 <SerialStream_TxByte>:

FILE USARTStream = FDEV_SETUP_STREAM(SerialStream_TxByte, SerialStream_RxByte, _FDEV_SETUP_RW);

static int SerialStream_TxByte(char DataByte,
                               FILE *Stream)
{
    1456:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1458:	80 91 c8 00 	lds	r24, 0x00C8
    145c:	85 ff       	sbrs	r24, 5
    145e:	fc cf       	rjmp	.-8      	; 0x1458 <SerialStream_TxByte+0x2>
				UDR1 = DataByte;
    1460:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_TxByte(DataByte);
	return 0;
}
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	08 95       	ret

0000146a <SerialStream_RxByte>:
			 *  \return Boolean true if a character has been received, false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    146a:	80 91 c8 00 	lds	r24, 0x00C8

static int SerialStream_RxByte(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    146e:	87 fd       	sbrc	r24, 7
    1470:	03 c0       	rjmp	.+6      	; 0x1478 <SerialStream_RxByte+0xe>
    1472:	2e ef       	ldi	r18, 0xFE	; 254
    1474:	3f ef       	ldi	r19, 0xFF	; 255
    1476:	08 c0       	rjmp	.+16     	; 0x1488 <SerialStream_RxByte+0x1e>
			 *  \return Byte received from the USART.
			 */
			static inline char Serial_RxByte(void) ATTR_ALWAYS_INLINE;
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
    1478:	80 91 c8 00 	lds	r24, 0x00C8
    147c:	87 ff       	sbrs	r24, 7
    147e:	fc cf       	rjmp	.-8      	; 0x1478 <SerialStream_RxByte+0xe>
				return UDR1;
    1480:	80 91 ce 00 	lds	r24, 0x00CE
	  return _FDEV_EOF;

	return Serial_RxByte();
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
}
    1488:	c9 01       	movw	r24, r18
    148a:	08 95       	ret

0000148c <memcpy>:
    148c:	fb 01       	movw	r30, r22
    148e:	dc 01       	movw	r26, r24
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <memcpy+0xa>
    1492:	01 90       	ld	r0, Z+
    1494:	0d 92       	st	X+, r0
    1496:	41 50       	subi	r20, 0x01	; 1
    1498:	50 40       	sbci	r21, 0x00	; 0
    149a:	d8 f7       	brcc	.-10     	; 0x1492 <memcpy+0x6>
    149c:	08 95       	ret

0000149e <memmove>:
    149e:	68 17       	cp	r22, r24
    14a0:	79 07       	cpc	r23, r25
    14a2:	68 f4       	brcc	.+26     	; 0x14be <memmove+0x20>
    14a4:	fb 01       	movw	r30, r22
    14a6:	dc 01       	movw	r26, r24
    14a8:	e4 0f       	add	r30, r20
    14aa:	f5 1f       	adc	r31, r21
    14ac:	a4 0f       	add	r26, r20
    14ae:	b5 1f       	adc	r27, r21
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <memmove+0x18>
    14b2:	02 90       	ld	r0, -Z
    14b4:	0e 92       	st	-X, r0
    14b6:	41 50       	subi	r20, 0x01	; 1
    14b8:	50 40       	sbci	r21, 0x00	; 0
    14ba:	d8 f7       	brcc	.-10     	; 0x14b2 <memmove+0x14>
    14bc:	08 95       	ret
    14be:	e6 cf       	rjmp	.-52     	; 0x148c <memcpy>

000014c0 <printf_P>:
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	fe 01       	movw	r30, r28
    14ca:	35 96       	adiw	r30, 0x05	; 5
    14cc:	61 91       	ld	r22, Z+
    14ce:	71 91       	ld	r23, Z+
    14d0:	a0 91 6b 01 	lds	r26, 0x016B
    14d4:	b0 91 6c 01 	lds	r27, 0x016C
    14d8:	13 96       	adiw	r26, 0x03	; 3
    14da:	8c 91       	ld	r24, X
    14dc:	13 97       	sbiw	r26, 0x03	; 3
    14de:	88 60       	ori	r24, 0x08	; 8
    14e0:	13 96       	adiw	r26, 0x03	; 3
    14e2:	8c 93       	st	X, r24
    14e4:	80 91 6b 01 	lds	r24, 0x016B
    14e8:	90 91 6c 01 	lds	r25, 0x016C
    14ec:	af 01       	movw	r20, r30
    14ee:	3f d0       	rcall	.+126    	; 0x156e <vfprintf>
    14f0:	e0 91 6b 01 	lds	r30, 0x016B
    14f4:	f0 91 6c 01 	lds	r31, 0x016C
    14f8:	23 81       	ldd	r18, Z+3	; 0x03
    14fa:	27 7f       	andi	r18, 0xF7	; 247
    14fc:	23 83       	std	Z+3, r18	; 0x03
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <puts_P>:
    1504:	0f 93       	push	r16
    1506:	1f 93       	push	r17
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	ec 01       	movw	r28, r24
    150e:	e0 91 6b 01 	lds	r30, 0x016B
    1512:	f0 91 6c 01 	lds	r31, 0x016C
    1516:	83 81       	ldd	r24, Z+3	; 0x03
    1518:	81 ff       	sbrs	r24, 1
    151a:	21 c0       	rjmp	.+66     	; 0x155e <puts_P+0x5a>
    151c:	00 e0       	ldi	r16, 0x00	; 0
    151e:	10 e0       	ldi	r17, 0x00	; 0
    1520:	0e c0       	rjmp	.+28     	; 0x153e <puts_P+0x3a>
    1522:	e0 91 6b 01 	lds	r30, 0x016B
    1526:	f0 91 6c 01 	lds	r31, 0x016C
    152a:	20 85       	ldd	r18, Z+8	; 0x08
    152c:	31 85       	ldd	r19, Z+9	; 0x09
    152e:	bf 01       	movw	r22, r30
    1530:	f9 01       	movw	r30, r18
    1532:	09 95       	icall
    1534:	89 2b       	or	r24, r25
    1536:	11 f0       	breq	.+4      	; 0x153c <puts_P+0x38>
    1538:	0f ef       	ldi	r16, 0xFF	; 255
    153a:	1f ef       	ldi	r17, 0xFF	; 255
    153c:	21 96       	adiw	r28, 0x01	; 1
    153e:	fe 01       	movw	r30, r28
    1540:	84 91       	lpm	r24, Z+
    1542:	88 23       	and	r24, r24
    1544:	71 f7       	brne	.-36     	; 0x1522 <puts_P+0x1e>
    1546:	e0 91 6b 01 	lds	r30, 0x016B
    154a:	f0 91 6c 01 	lds	r31, 0x016C
    154e:	20 85       	ldd	r18, Z+8	; 0x08
    1550:	31 85       	ldd	r19, Z+9	; 0x09
    1552:	8a e0       	ldi	r24, 0x0A	; 10
    1554:	bf 01       	movw	r22, r30
    1556:	f9 01       	movw	r30, r18
    1558:	09 95       	icall
    155a:	89 2b       	or	r24, r25
    155c:	11 f0       	breq	.+4      	; 0x1562 <puts_P+0x5e>
    155e:	0f ef       	ldi	r16, 0xFF	; 255
    1560:	1f ef       	ldi	r17, 0xFF	; 255
    1562:	c8 01       	movw	r24, r16
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	08 95       	ret

0000156e <vfprintf>:
    156e:	2f 92       	push	r2
    1570:	3f 92       	push	r3
    1572:	4f 92       	push	r4
    1574:	5f 92       	push	r5
    1576:	6f 92       	push	r6
    1578:	7f 92       	push	r7
    157a:	8f 92       	push	r8
    157c:	9f 92       	push	r9
    157e:	af 92       	push	r10
    1580:	bf 92       	push	r11
    1582:	cf 92       	push	r12
    1584:	df 92       	push	r13
    1586:	ef 92       	push	r14
    1588:	ff 92       	push	r15
    158a:	0f 93       	push	r16
    158c:	1f 93       	push	r17
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	2b 97       	sbiw	r28, 0x0b	; 11
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
    15a2:	3c 01       	movw	r6, r24
    15a4:	2b 01       	movw	r4, r22
    15a6:	5a 01       	movw	r10, r20
    15a8:	fc 01       	movw	r30, r24
    15aa:	17 82       	std	Z+7, r1	; 0x07
    15ac:	16 82       	std	Z+6, r1	; 0x06
    15ae:	83 81       	ldd	r24, Z+3	; 0x03
    15b0:	81 fd       	sbrc	r24, 1
    15b2:	03 c0       	rjmp	.+6      	; 0x15ba <vfprintf+0x4c>
    15b4:	6f ef       	ldi	r22, 0xFF	; 255
    15b6:	7f ef       	ldi	r23, 0xFF	; 255
    15b8:	b9 c1       	rjmp	.+882    	; 0x192c <vfprintf+0x3be>
    15ba:	9a e0       	ldi	r25, 0x0A	; 10
    15bc:	89 2e       	mov	r8, r25
    15be:	1e 01       	movw	r2, r28
    15c0:	08 94       	sec
    15c2:	21 1c       	adc	r2, r1
    15c4:	31 1c       	adc	r3, r1
    15c6:	f3 01       	movw	r30, r6
    15c8:	23 81       	ldd	r18, Z+3	; 0x03
    15ca:	f2 01       	movw	r30, r4
    15cc:	23 fd       	sbrc	r18, 3
    15ce:	85 91       	lpm	r24, Z+
    15d0:	23 ff       	sbrs	r18, 3
    15d2:	81 91       	ld	r24, Z+
    15d4:	2f 01       	movw	r4, r30
    15d6:	88 23       	and	r24, r24
    15d8:	09 f4       	brne	.+2      	; 0x15dc <vfprintf+0x6e>
    15da:	a5 c1       	rjmp	.+842    	; 0x1926 <vfprintf+0x3b8>
    15dc:	85 32       	cpi	r24, 0x25	; 37
    15de:	39 f4       	brne	.+14     	; 0x15ee <vfprintf+0x80>
    15e0:	23 fd       	sbrc	r18, 3
    15e2:	85 91       	lpm	r24, Z+
    15e4:	23 ff       	sbrs	r18, 3
    15e6:	81 91       	ld	r24, Z+
    15e8:	2f 01       	movw	r4, r30
    15ea:	85 32       	cpi	r24, 0x25	; 37
    15ec:	21 f4       	brne	.+8      	; 0x15f6 <vfprintf+0x88>
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	b3 01       	movw	r22, r6
    15f2:	cc d1       	rcall	.+920    	; 0x198c <fputc>
    15f4:	e8 cf       	rjmp	.-48     	; 0x15c6 <vfprintf+0x58>
    15f6:	98 2f       	mov	r25, r24
    15f8:	ff 24       	eor	r15, r15
    15fa:	ee 24       	eor	r14, r14
    15fc:	99 24       	eor	r9, r9
    15fe:	ff e1       	ldi	r31, 0x1F	; 31
    1600:	ff 15       	cp	r31, r15
    1602:	d0 f0       	brcs	.+52     	; 0x1638 <vfprintf+0xca>
    1604:	9b 32       	cpi	r25, 0x2B	; 43
    1606:	69 f0       	breq	.+26     	; 0x1622 <vfprintf+0xb4>
    1608:	9c 32       	cpi	r25, 0x2C	; 44
    160a:	28 f4       	brcc	.+10     	; 0x1616 <vfprintf+0xa8>
    160c:	90 32       	cpi	r25, 0x20	; 32
    160e:	59 f0       	breq	.+22     	; 0x1626 <vfprintf+0xb8>
    1610:	93 32       	cpi	r25, 0x23	; 35
    1612:	91 f4       	brne	.+36     	; 0x1638 <vfprintf+0xca>
    1614:	0e c0       	rjmp	.+28     	; 0x1632 <vfprintf+0xc4>
    1616:	9d 32       	cpi	r25, 0x2D	; 45
    1618:	49 f0       	breq	.+18     	; 0x162c <vfprintf+0xbe>
    161a:	90 33       	cpi	r25, 0x30	; 48
    161c:	69 f4       	brne	.+26     	; 0x1638 <vfprintf+0xca>
    161e:	41 e0       	ldi	r20, 0x01	; 1
    1620:	24 c0       	rjmp	.+72     	; 0x166a <vfprintf+0xfc>
    1622:	52 e0       	ldi	r21, 0x02	; 2
    1624:	f5 2a       	or	r15, r21
    1626:	84 e0       	ldi	r24, 0x04	; 4
    1628:	f8 2a       	or	r15, r24
    162a:	28 c0       	rjmp	.+80     	; 0x167c <vfprintf+0x10e>
    162c:	98 e0       	ldi	r25, 0x08	; 8
    162e:	f9 2a       	or	r15, r25
    1630:	25 c0       	rjmp	.+74     	; 0x167c <vfprintf+0x10e>
    1632:	e0 e1       	ldi	r30, 0x10	; 16
    1634:	fe 2a       	or	r15, r30
    1636:	22 c0       	rjmp	.+68     	; 0x167c <vfprintf+0x10e>
    1638:	f7 fc       	sbrc	r15, 7
    163a:	29 c0       	rjmp	.+82     	; 0x168e <vfprintf+0x120>
    163c:	89 2f       	mov	r24, r25
    163e:	80 53       	subi	r24, 0x30	; 48
    1640:	8a 30       	cpi	r24, 0x0A	; 10
    1642:	70 f4       	brcc	.+28     	; 0x1660 <vfprintf+0xf2>
    1644:	f6 fe       	sbrs	r15, 6
    1646:	05 c0       	rjmp	.+10     	; 0x1652 <vfprintf+0xe4>
    1648:	98 9c       	mul	r9, r8
    164a:	90 2c       	mov	r9, r0
    164c:	11 24       	eor	r1, r1
    164e:	98 0e       	add	r9, r24
    1650:	15 c0       	rjmp	.+42     	; 0x167c <vfprintf+0x10e>
    1652:	e8 9c       	mul	r14, r8
    1654:	e0 2c       	mov	r14, r0
    1656:	11 24       	eor	r1, r1
    1658:	e8 0e       	add	r14, r24
    165a:	f0 e2       	ldi	r31, 0x20	; 32
    165c:	ff 2a       	or	r15, r31
    165e:	0e c0       	rjmp	.+28     	; 0x167c <vfprintf+0x10e>
    1660:	9e 32       	cpi	r25, 0x2E	; 46
    1662:	29 f4       	brne	.+10     	; 0x166e <vfprintf+0x100>
    1664:	f6 fc       	sbrc	r15, 6
    1666:	5f c1       	rjmp	.+702    	; 0x1926 <vfprintf+0x3b8>
    1668:	40 e4       	ldi	r20, 0x40	; 64
    166a:	f4 2a       	or	r15, r20
    166c:	07 c0       	rjmp	.+14     	; 0x167c <vfprintf+0x10e>
    166e:	9c 36       	cpi	r25, 0x6C	; 108
    1670:	19 f4       	brne	.+6      	; 0x1678 <vfprintf+0x10a>
    1672:	50 e8       	ldi	r21, 0x80	; 128
    1674:	f5 2a       	or	r15, r21
    1676:	02 c0       	rjmp	.+4      	; 0x167c <vfprintf+0x10e>
    1678:	98 36       	cpi	r25, 0x68	; 104
    167a:	49 f4       	brne	.+18     	; 0x168e <vfprintf+0x120>
    167c:	f2 01       	movw	r30, r4
    167e:	23 fd       	sbrc	r18, 3
    1680:	95 91       	lpm	r25, Z+
    1682:	23 ff       	sbrs	r18, 3
    1684:	91 91       	ld	r25, Z+
    1686:	2f 01       	movw	r4, r30
    1688:	99 23       	and	r25, r25
    168a:	09 f0       	breq	.+2      	; 0x168e <vfprintf+0x120>
    168c:	b8 cf       	rjmp	.-144    	; 0x15fe <vfprintf+0x90>
    168e:	89 2f       	mov	r24, r25
    1690:	85 54       	subi	r24, 0x45	; 69
    1692:	83 30       	cpi	r24, 0x03	; 3
    1694:	18 f0       	brcs	.+6      	; 0x169c <vfprintf+0x12e>
    1696:	80 52       	subi	r24, 0x20	; 32
    1698:	83 30       	cpi	r24, 0x03	; 3
    169a:	38 f4       	brcc	.+14     	; 0x16aa <vfprintf+0x13c>
    169c:	44 e0       	ldi	r20, 0x04	; 4
    169e:	50 e0       	ldi	r21, 0x00	; 0
    16a0:	a4 0e       	add	r10, r20
    16a2:	b5 1e       	adc	r11, r21
    16a4:	5f e3       	ldi	r21, 0x3F	; 63
    16a6:	59 83       	std	Y+1, r21	; 0x01
    16a8:	0f c0       	rjmp	.+30     	; 0x16c8 <vfprintf+0x15a>
    16aa:	93 36       	cpi	r25, 0x63	; 99
    16ac:	31 f0       	breq	.+12     	; 0x16ba <vfprintf+0x14c>
    16ae:	93 37       	cpi	r25, 0x73	; 115
    16b0:	79 f0       	breq	.+30     	; 0x16d0 <vfprintf+0x162>
    16b2:	93 35       	cpi	r25, 0x53	; 83
    16b4:	09 f0       	breq	.+2      	; 0x16b8 <vfprintf+0x14a>
    16b6:	52 c0       	rjmp	.+164    	; 0x175c <vfprintf+0x1ee>
    16b8:	1f c0       	rjmp	.+62     	; 0x16f8 <vfprintf+0x18a>
    16ba:	f5 01       	movw	r30, r10
    16bc:	80 81       	ld	r24, Z
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	42 e0       	ldi	r20, 0x02	; 2
    16c2:	50 e0       	ldi	r21, 0x00	; 0
    16c4:	a4 0e       	add	r10, r20
    16c6:	b5 1e       	adc	r11, r21
    16c8:	61 01       	movw	r12, r2
    16ca:	01 e0       	ldi	r16, 0x01	; 1
    16cc:	10 e0       	ldi	r17, 0x00	; 0
    16ce:	11 c0       	rjmp	.+34     	; 0x16f2 <vfprintf+0x184>
    16d0:	f5 01       	movw	r30, r10
    16d2:	c0 80       	ld	r12, Z
    16d4:	d1 80       	ldd	r13, Z+1	; 0x01
    16d6:	f6 fc       	sbrc	r15, 6
    16d8:	03 c0       	rjmp	.+6      	; 0x16e0 <vfprintf+0x172>
    16da:	6f ef       	ldi	r22, 0xFF	; 255
    16dc:	7f ef       	ldi	r23, 0xFF	; 255
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <vfprintf+0x176>
    16e0:	69 2d       	mov	r22, r9
    16e2:	70 e0       	ldi	r23, 0x00	; 0
    16e4:	42 e0       	ldi	r20, 0x02	; 2
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	a4 0e       	add	r10, r20
    16ea:	b5 1e       	adc	r11, r21
    16ec:	c6 01       	movw	r24, r12
    16ee:	43 d1       	rcall	.+646    	; 0x1976 <strnlen>
    16f0:	8c 01       	movw	r16, r24
    16f2:	5f e7       	ldi	r21, 0x7F	; 127
    16f4:	f5 22       	and	r15, r21
    16f6:	13 c0       	rjmp	.+38     	; 0x171e <vfprintf+0x1b0>
    16f8:	f5 01       	movw	r30, r10
    16fa:	c0 80       	ld	r12, Z
    16fc:	d1 80       	ldd	r13, Z+1	; 0x01
    16fe:	f6 fc       	sbrc	r15, 6
    1700:	03 c0       	rjmp	.+6      	; 0x1708 <vfprintf+0x19a>
    1702:	6f ef       	ldi	r22, 0xFF	; 255
    1704:	7f ef       	ldi	r23, 0xFF	; 255
    1706:	02 c0       	rjmp	.+4      	; 0x170c <vfprintf+0x19e>
    1708:	69 2d       	mov	r22, r9
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	42 e0       	ldi	r20, 0x02	; 2
    170e:	50 e0       	ldi	r21, 0x00	; 0
    1710:	a4 0e       	add	r10, r20
    1712:	b5 1e       	adc	r11, r21
    1714:	c6 01       	movw	r24, r12
    1716:	24 d1       	rcall	.+584    	; 0x1960 <strnlen_P>
    1718:	8c 01       	movw	r16, r24
    171a:	50 e8       	ldi	r21, 0x80	; 128
    171c:	f5 2a       	or	r15, r21
    171e:	f3 fe       	sbrs	r15, 3
    1720:	06 c0       	rjmp	.+12     	; 0x172e <vfprintf+0x1c0>
    1722:	18 c0       	rjmp	.+48     	; 0x1754 <vfprintf+0x1e6>
    1724:	80 e2       	ldi	r24, 0x20	; 32
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	b3 01       	movw	r22, r6
    172a:	30 d1       	rcall	.+608    	; 0x198c <fputc>
    172c:	ea 94       	dec	r14
    172e:	8e 2d       	mov	r24, r14
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	08 17       	cp	r16, r24
    1734:	19 07       	cpc	r17, r25
    1736:	b0 f3       	brcs	.-20     	; 0x1724 <vfprintf+0x1b6>
    1738:	0d c0       	rjmp	.+26     	; 0x1754 <vfprintf+0x1e6>
    173a:	f6 01       	movw	r30, r12
    173c:	f7 fc       	sbrc	r15, 7
    173e:	85 91       	lpm	r24, Z+
    1740:	f7 fe       	sbrs	r15, 7
    1742:	81 91       	ld	r24, Z+
    1744:	6f 01       	movw	r12, r30
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	b3 01       	movw	r22, r6
    174a:	20 d1       	rcall	.+576    	; 0x198c <fputc>
    174c:	e1 10       	cpse	r14, r1
    174e:	ea 94       	dec	r14
    1750:	01 50       	subi	r16, 0x01	; 1
    1752:	10 40       	sbci	r17, 0x00	; 0
    1754:	01 15       	cp	r16, r1
    1756:	11 05       	cpc	r17, r1
    1758:	81 f7       	brne	.-32     	; 0x173a <vfprintf+0x1cc>
    175a:	e2 c0       	rjmp	.+452    	; 0x1920 <vfprintf+0x3b2>
    175c:	94 36       	cpi	r25, 0x64	; 100
    175e:	11 f0       	breq	.+4      	; 0x1764 <vfprintf+0x1f6>
    1760:	99 36       	cpi	r25, 0x69	; 105
    1762:	61 f5       	brne	.+88     	; 0x17bc <vfprintf+0x24e>
    1764:	f7 fe       	sbrs	r15, 7
    1766:	08 c0       	rjmp	.+16     	; 0x1778 <vfprintf+0x20a>
    1768:	f5 01       	movw	r30, r10
    176a:	20 81       	ld	r18, Z
    176c:	31 81       	ldd	r19, Z+1	; 0x01
    176e:	42 81       	ldd	r20, Z+2	; 0x02
    1770:	53 81       	ldd	r21, Z+3	; 0x03
    1772:	84 e0       	ldi	r24, 0x04	; 4
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	0a c0       	rjmp	.+20     	; 0x178c <vfprintf+0x21e>
    1778:	f5 01       	movw	r30, r10
    177a:	80 81       	ld	r24, Z
    177c:	91 81       	ldd	r25, Z+1	; 0x01
    177e:	9c 01       	movw	r18, r24
    1780:	44 27       	eor	r20, r20
    1782:	37 fd       	sbrc	r19, 7
    1784:	40 95       	com	r20
    1786:	54 2f       	mov	r21, r20
    1788:	82 e0       	ldi	r24, 0x02	; 2
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	a8 0e       	add	r10, r24
    178e:	b9 1e       	adc	r11, r25
    1790:	9f e6       	ldi	r25, 0x6F	; 111
    1792:	f9 22       	and	r15, r25
    1794:	57 ff       	sbrs	r21, 7
    1796:	09 c0       	rjmp	.+18     	; 0x17aa <vfprintf+0x23c>
    1798:	50 95       	com	r21
    179a:	40 95       	com	r20
    179c:	30 95       	com	r19
    179e:	21 95       	neg	r18
    17a0:	3f 4f       	sbci	r19, 0xFF	; 255
    17a2:	4f 4f       	sbci	r20, 0xFF	; 255
    17a4:	5f 4f       	sbci	r21, 0xFF	; 255
    17a6:	e0 e8       	ldi	r30, 0x80	; 128
    17a8:	fe 2a       	or	r15, r30
    17aa:	ca 01       	movw	r24, r20
    17ac:	b9 01       	movw	r22, r18
    17ae:	a1 01       	movw	r20, r2
    17b0:	2a e0       	ldi	r18, 0x0A	; 10
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	17 d1       	rcall	.+558    	; 0x19e4 <__ultoa_invert>
    17b6:	d8 2e       	mov	r13, r24
    17b8:	d2 18       	sub	r13, r2
    17ba:	3f c0       	rjmp	.+126    	; 0x183a <vfprintf+0x2cc>
    17bc:	95 37       	cpi	r25, 0x75	; 117
    17be:	29 f4       	brne	.+10     	; 0x17ca <vfprintf+0x25c>
    17c0:	1f 2d       	mov	r17, r15
    17c2:	1f 7e       	andi	r17, 0xEF	; 239
    17c4:	2a e0       	ldi	r18, 0x0A	; 10
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	1d c0       	rjmp	.+58     	; 0x1804 <vfprintf+0x296>
    17ca:	1f 2d       	mov	r17, r15
    17cc:	19 7f       	andi	r17, 0xF9	; 249
    17ce:	9f 36       	cpi	r25, 0x6F	; 111
    17d0:	61 f0       	breq	.+24     	; 0x17ea <vfprintf+0x27c>
    17d2:	90 37       	cpi	r25, 0x70	; 112
    17d4:	20 f4       	brcc	.+8      	; 0x17de <vfprintf+0x270>
    17d6:	98 35       	cpi	r25, 0x58	; 88
    17d8:	09 f0       	breq	.+2      	; 0x17dc <vfprintf+0x26e>
    17da:	a5 c0       	rjmp	.+330    	; 0x1926 <vfprintf+0x3b8>
    17dc:	0f c0       	rjmp	.+30     	; 0x17fc <vfprintf+0x28e>
    17de:	90 37       	cpi	r25, 0x70	; 112
    17e0:	39 f0       	breq	.+14     	; 0x17f0 <vfprintf+0x282>
    17e2:	98 37       	cpi	r25, 0x78	; 120
    17e4:	09 f0       	breq	.+2      	; 0x17e8 <vfprintf+0x27a>
    17e6:	9f c0       	rjmp	.+318    	; 0x1926 <vfprintf+0x3b8>
    17e8:	04 c0       	rjmp	.+8      	; 0x17f2 <vfprintf+0x284>
    17ea:	28 e0       	ldi	r18, 0x08	; 8
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	0a c0       	rjmp	.+20     	; 0x1804 <vfprintf+0x296>
    17f0:	10 61       	ori	r17, 0x10	; 16
    17f2:	14 fd       	sbrc	r17, 4
    17f4:	14 60       	ori	r17, 0x04	; 4
    17f6:	20 e1       	ldi	r18, 0x10	; 16
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	04 c0       	rjmp	.+8      	; 0x1804 <vfprintf+0x296>
    17fc:	14 fd       	sbrc	r17, 4
    17fe:	16 60       	ori	r17, 0x06	; 6
    1800:	20 e1       	ldi	r18, 0x10	; 16
    1802:	32 e0       	ldi	r19, 0x02	; 2
    1804:	17 ff       	sbrs	r17, 7
    1806:	08 c0       	rjmp	.+16     	; 0x1818 <vfprintf+0x2aa>
    1808:	f5 01       	movw	r30, r10
    180a:	60 81       	ld	r22, Z
    180c:	71 81       	ldd	r23, Z+1	; 0x01
    180e:	82 81       	ldd	r24, Z+2	; 0x02
    1810:	93 81       	ldd	r25, Z+3	; 0x03
    1812:	44 e0       	ldi	r20, 0x04	; 4
    1814:	50 e0       	ldi	r21, 0x00	; 0
    1816:	08 c0       	rjmp	.+16     	; 0x1828 <vfprintf+0x2ba>
    1818:	f5 01       	movw	r30, r10
    181a:	80 81       	ld	r24, Z
    181c:	91 81       	ldd	r25, Z+1	; 0x01
    181e:	bc 01       	movw	r22, r24
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	42 e0       	ldi	r20, 0x02	; 2
    1826:	50 e0       	ldi	r21, 0x00	; 0
    1828:	a4 0e       	add	r10, r20
    182a:	b5 1e       	adc	r11, r21
    182c:	a1 01       	movw	r20, r2
    182e:	da d0       	rcall	.+436    	; 0x19e4 <__ultoa_invert>
    1830:	d8 2e       	mov	r13, r24
    1832:	d2 18       	sub	r13, r2
    1834:	8f e7       	ldi	r24, 0x7F	; 127
    1836:	f8 2e       	mov	r15, r24
    1838:	f1 22       	and	r15, r17
    183a:	f6 fe       	sbrs	r15, 6
    183c:	0b c0       	rjmp	.+22     	; 0x1854 <vfprintf+0x2e6>
    183e:	5e ef       	ldi	r21, 0xFE	; 254
    1840:	f5 22       	and	r15, r21
    1842:	d9 14       	cp	r13, r9
    1844:	38 f4       	brcc	.+14     	; 0x1854 <vfprintf+0x2e6>
    1846:	f4 fe       	sbrs	r15, 4
    1848:	07 c0       	rjmp	.+14     	; 0x1858 <vfprintf+0x2ea>
    184a:	f2 fc       	sbrc	r15, 2
    184c:	05 c0       	rjmp	.+10     	; 0x1858 <vfprintf+0x2ea>
    184e:	8f ee       	ldi	r24, 0xEF	; 239
    1850:	f8 22       	and	r15, r24
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <vfprintf+0x2ea>
    1854:	1d 2d       	mov	r17, r13
    1856:	01 c0       	rjmp	.+2      	; 0x185a <vfprintf+0x2ec>
    1858:	19 2d       	mov	r17, r9
    185a:	f4 fe       	sbrs	r15, 4
    185c:	0d c0       	rjmp	.+26     	; 0x1878 <vfprintf+0x30a>
    185e:	fe 01       	movw	r30, r28
    1860:	ed 0d       	add	r30, r13
    1862:	f1 1d       	adc	r31, r1
    1864:	80 81       	ld	r24, Z
    1866:	80 33       	cpi	r24, 0x30	; 48
    1868:	19 f4       	brne	.+6      	; 0x1870 <vfprintf+0x302>
    186a:	99 ee       	ldi	r25, 0xE9	; 233
    186c:	f9 22       	and	r15, r25
    186e:	08 c0       	rjmp	.+16     	; 0x1880 <vfprintf+0x312>
    1870:	1f 5f       	subi	r17, 0xFF	; 255
    1872:	f2 fe       	sbrs	r15, 2
    1874:	05 c0       	rjmp	.+10     	; 0x1880 <vfprintf+0x312>
    1876:	03 c0       	rjmp	.+6      	; 0x187e <vfprintf+0x310>
    1878:	8f 2d       	mov	r24, r15
    187a:	86 78       	andi	r24, 0x86	; 134
    187c:	09 f0       	breq	.+2      	; 0x1880 <vfprintf+0x312>
    187e:	1f 5f       	subi	r17, 0xFF	; 255
    1880:	0f 2d       	mov	r16, r15
    1882:	f3 fc       	sbrc	r15, 3
    1884:	13 c0       	rjmp	.+38     	; 0x18ac <vfprintf+0x33e>
    1886:	f0 fe       	sbrs	r15, 0
    1888:	0e c0       	rjmp	.+28     	; 0x18a6 <vfprintf+0x338>
    188a:	1e 15       	cp	r17, r14
    188c:	10 f0       	brcs	.+4      	; 0x1892 <vfprintf+0x324>
    188e:	9d 2c       	mov	r9, r13
    1890:	0a c0       	rjmp	.+20     	; 0x18a6 <vfprintf+0x338>
    1892:	9d 2c       	mov	r9, r13
    1894:	9e 0c       	add	r9, r14
    1896:	91 1a       	sub	r9, r17
    1898:	1e 2d       	mov	r17, r14
    189a:	05 c0       	rjmp	.+10     	; 0x18a6 <vfprintf+0x338>
    189c:	80 e2       	ldi	r24, 0x20	; 32
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	b3 01       	movw	r22, r6
    18a2:	74 d0       	rcall	.+232    	; 0x198c <fputc>
    18a4:	1f 5f       	subi	r17, 0xFF	; 255
    18a6:	1e 15       	cp	r17, r14
    18a8:	c8 f3       	brcs	.-14     	; 0x189c <vfprintf+0x32e>
    18aa:	04 c0       	rjmp	.+8      	; 0x18b4 <vfprintf+0x346>
    18ac:	1e 15       	cp	r17, r14
    18ae:	10 f4       	brcc	.+4      	; 0x18b4 <vfprintf+0x346>
    18b0:	e1 1a       	sub	r14, r17
    18b2:	01 c0       	rjmp	.+2      	; 0x18b6 <vfprintf+0x348>
    18b4:	ee 24       	eor	r14, r14
    18b6:	04 ff       	sbrs	r16, 4
    18b8:	0e c0       	rjmp	.+28     	; 0x18d6 <vfprintf+0x368>
    18ba:	80 e3       	ldi	r24, 0x30	; 48
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	b3 01       	movw	r22, r6
    18c0:	65 d0       	rcall	.+202    	; 0x198c <fputc>
    18c2:	02 ff       	sbrs	r16, 2
    18c4:	1b c0       	rjmp	.+54     	; 0x18fc <vfprintf+0x38e>
    18c6:	01 fd       	sbrc	r16, 1
    18c8:	03 c0       	rjmp	.+6      	; 0x18d0 <vfprintf+0x362>
    18ca:	88 e7       	ldi	r24, 0x78	; 120
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	0e c0       	rjmp	.+28     	; 0x18ec <vfprintf+0x37e>
    18d0:	88 e5       	ldi	r24, 0x58	; 88
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	0b c0       	rjmp	.+22     	; 0x18ec <vfprintf+0x37e>
    18d6:	80 2f       	mov	r24, r16
    18d8:	86 78       	andi	r24, 0x86	; 134
    18da:	81 f0       	breq	.+32     	; 0x18fc <vfprintf+0x38e>
    18dc:	01 ff       	sbrs	r16, 1
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <vfprintf+0x376>
    18e0:	8b e2       	ldi	r24, 0x2B	; 43
    18e2:	01 c0       	rjmp	.+2      	; 0x18e6 <vfprintf+0x378>
    18e4:	80 e2       	ldi	r24, 0x20	; 32
    18e6:	f7 fc       	sbrc	r15, 7
    18e8:	8d e2       	ldi	r24, 0x2D	; 45
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	b3 01       	movw	r22, r6
    18ee:	4e d0       	rcall	.+156    	; 0x198c <fputc>
    18f0:	05 c0       	rjmp	.+10     	; 0x18fc <vfprintf+0x38e>
    18f2:	80 e3       	ldi	r24, 0x30	; 48
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	b3 01       	movw	r22, r6
    18f8:	49 d0       	rcall	.+146    	; 0x198c <fputc>
    18fa:	9a 94       	dec	r9
    18fc:	d9 14       	cp	r13, r9
    18fe:	c8 f3       	brcs	.-14     	; 0x18f2 <vfprintf+0x384>
    1900:	da 94       	dec	r13
    1902:	f1 01       	movw	r30, r2
    1904:	ed 0d       	add	r30, r13
    1906:	f1 1d       	adc	r31, r1
    1908:	80 81       	ld	r24, Z
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	b3 01       	movw	r22, r6
    190e:	3e d0       	rcall	.+124    	; 0x198c <fputc>
    1910:	dd 20       	and	r13, r13
    1912:	b1 f7       	brne	.-20     	; 0x1900 <vfprintf+0x392>
    1914:	05 c0       	rjmp	.+10     	; 0x1920 <vfprintf+0x3b2>
    1916:	80 e2       	ldi	r24, 0x20	; 32
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	b3 01       	movw	r22, r6
    191c:	37 d0       	rcall	.+110    	; 0x198c <fputc>
    191e:	ea 94       	dec	r14
    1920:	ee 20       	and	r14, r14
    1922:	c9 f7       	brne	.-14     	; 0x1916 <vfprintf+0x3a8>
    1924:	50 ce       	rjmp	.-864    	; 0x15c6 <vfprintf+0x58>
    1926:	f3 01       	movw	r30, r6
    1928:	66 81       	ldd	r22, Z+6	; 0x06
    192a:	77 81       	ldd	r23, Z+7	; 0x07
    192c:	cb 01       	movw	r24, r22
    192e:	2b 96       	adiw	r28, 0x0b	; 11
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	1f 91       	pop	r17
    1940:	0f 91       	pop	r16
    1942:	ff 90       	pop	r15
    1944:	ef 90       	pop	r14
    1946:	df 90       	pop	r13
    1948:	cf 90       	pop	r12
    194a:	bf 90       	pop	r11
    194c:	af 90       	pop	r10
    194e:	9f 90       	pop	r9
    1950:	8f 90       	pop	r8
    1952:	7f 90       	pop	r7
    1954:	6f 90       	pop	r6
    1956:	5f 90       	pop	r5
    1958:	4f 90       	pop	r4
    195a:	3f 90       	pop	r3
    195c:	2f 90       	pop	r2
    195e:	08 95       	ret

00001960 <strnlen_P>:
    1960:	fc 01       	movw	r30, r24
    1962:	05 90       	lpm	r0, Z+
    1964:	61 50       	subi	r22, 0x01	; 1
    1966:	70 40       	sbci	r23, 0x00	; 0
    1968:	01 10       	cpse	r0, r1
    196a:	d8 f7       	brcc	.-10     	; 0x1962 <strnlen_P+0x2>
    196c:	80 95       	com	r24
    196e:	90 95       	com	r25
    1970:	8e 0f       	add	r24, r30
    1972:	9f 1f       	adc	r25, r31
    1974:	08 95       	ret

00001976 <strnlen>:
    1976:	fc 01       	movw	r30, r24
    1978:	61 50       	subi	r22, 0x01	; 1
    197a:	70 40       	sbci	r23, 0x00	; 0
    197c:	01 90       	ld	r0, Z+
    197e:	01 10       	cpse	r0, r1
    1980:	d8 f7       	brcc	.-10     	; 0x1978 <strnlen+0x2>
    1982:	80 95       	com	r24
    1984:	90 95       	com	r25
    1986:	8e 0f       	add	r24, r30
    1988:	9f 1f       	adc	r25, r31
    198a:	08 95       	ret

0000198c <fputc>:
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	8c 01       	movw	r16, r24
    1996:	eb 01       	movw	r28, r22
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	81 ff       	sbrs	r24, 1
    199c:	1b c0       	rjmp	.+54     	; 0x19d4 <fputc+0x48>
    199e:	82 ff       	sbrs	r24, 2
    19a0:	0d c0       	rjmp	.+26     	; 0x19bc <fputc+0x30>
    19a2:	2e 81       	ldd	r18, Y+6	; 0x06
    19a4:	3f 81       	ldd	r19, Y+7	; 0x07
    19a6:	8c 81       	ldd	r24, Y+4	; 0x04
    19a8:	9d 81       	ldd	r25, Y+5	; 0x05
    19aa:	28 17       	cp	r18, r24
    19ac:	39 07       	cpc	r19, r25
    19ae:	64 f4       	brge	.+24     	; 0x19c8 <fputc+0x3c>
    19b0:	e8 81       	ld	r30, Y
    19b2:	f9 81       	ldd	r31, Y+1	; 0x01
    19b4:	01 93       	st	Z+, r16
    19b6:	f9 83       	std	Y+1, r31	; 0x01
    19b8:	e8 83       	st	Y, r30
    19ba:	06 c0       	rjmp	.+12     	; 0x19c8 <fputc+0x3c>
    19bc:	e8 85       	ldd	r30, Y+8	; 0x08
    19be:	f9 85       	ldd	r31, Y+9	; 0x09
    19c0:	80 2f       	mov	r24, r16
    19c2:	09 95       	icall
    19c4:	89 2b       	or	r24, r25
    19c6:	31 f4       	brne	.+12     	; 0x19d4 <fputc+0x48>
    19c8:	8e 81       	ldd	r24, Y+6	; 0x06
    19ca:	9f 81       	ldd	r25, Y+7	; 0x07
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	9f 83       	std	Y+7, r25	; 0x07
    19d0:	8e 83       	std	Y+6, r24	; 0x06
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <fputc+0x4c>
    19d4:	0f ef       	ldi	r16, 0xFF	; 255
    19d6:	1f ef       	ldi	r17, 0xFF	; 255
    19d8:	c8 01       	movw	r24, r16
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	1f 91       	pop	r17
    19e0:	0f 91       	pop	r16
    19e2:	08 95       	ret

000019e4 <__ultoa_invert>:
    19e4:	fa 01       	movw	r30, r20
    19e6:	aa 27       	eor	r26, r26
    19e8:	28 30       	cpi	r18, 0x08	; 8
    19ea:	51 f1       	breq	.+84     	; 0x1a40 <__ultoa_invert+0x5c>
    19ec:	20 31       	cpi	r18, 0x10	; 16
    19ee:	81 f1       	breq	.+96     	; 0x1a50 <__ultoa_invert+0x6c>
    19f0:	e8 94       	clt
    19f2:	6f 93       	push	r22
    19f4:	6e 7f       	andi	r22, 0xFE	; 254
    19f6:	6e 5f       	subi	r22, 0xFE	; 254
    19f8:	7f 4f       	sbci	r23, 0xFF	; 255
    19fa:	8f 4f       	sbci	r24, 0xFF	; 255
    19fc:	9f 4f       	sbci	r25, 0xFF	; 255
    19fe:	af 4f       	sbci	r26, 0xFF	; 255
    1a00:	b1 e0       	ldi	r27, 0x01	; 1
    1a02:	3e d0       	rcall	.+124    	; 0x1a80 <__ultoa_invert+0x9c>
    1a04:	b4 e0       	ldi	r27, 0x04	; 4
    1a06:	3c d0       	rcall	.+120    	; 0x1a80 <__ultoa_invert+0x9c>
    1a08:	67 0f       	add	r22, r23
    1a0a:	78 1f       	adc	r23, r24
    1a0c:	89 1f       	adc	r24, r25
    1a0e:	9a 1f       	adc	r25, r26
    1a10:	a1 1d       	adc	r26, r1
    1a12:	68 0f       	add	r22, r24
    1a14:	79 1f       	adc	r23, r25
    1a16:	8a 1f       	adc	r24, r26
    1a18:	91 1d       	adc	r25, r1
    1a1a:	a1 1d       	adc	r26, r1
    1a1c:	6a 0f       	add	r22, r26
    1a1e:	71 1d       	adc	r23, r1
    1a20:	81 1d       	adc	r24, r1
    1a22:	91 1d       	adc	r25, r1
    1a24:	a1 1d       	adc	r26, r1
    1a26:	20 d0       	rcall	.+64     	; 0x1a68 <__ultoa_invert+0x84>
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <__ultoa_invert+0x48>
    1a2a:	68 94       	set
    1a2c:	3f 91       	pop	r19
    1a2e:	2a e0       	ldi	r18, 0x0A	; 10
    1a30:	26 9f       	mul	r18, r22
    1a32:	11 24       	eor	r1, r1
    1a34:	30 19       	sub	r19, r0
    1a36:	30 5d       	subi	r19, 0xD0	; 208
    1a38:	31 93       	st	Z+, r19
    1a3a:	de f6       	brtc	.-74     	; 0x19f2 <__ultoa_invert+0xe>
    1a3c:	cf 01       	movw	r24, r30
    1a3e:	08 95       	ret
    1a40:	46 2f       	mov	r20, r22
    1a42:	47 70       	andi	r20, 0x07	; 7
    1a44:	40 5d       	subi	r20, 0xD0	; 208
    1a46:	41 93       	st	Z+, r20
    1a48:	b3 e0       	ldi	r27, 0x03	; 3
    1a4a:	0f d0       	rcall	.+30     	; 0x1a6a <__ultoa_invert+0x86>
    1a4c:	c9 f7       	brne	.-14     	; 0x1a40 <__ultoa_invert+0x5c>
    1a4e:	f6 cf       	rjmp	.-20     	; 0x1a3c <__ultoa_invert+0x58>
    1a50:	46 2f       	mov	r20, r22
    1a52:	4f 70       	andi	r20, 0x0F	; 15
    1a54:	40 5d       	subi	r20, 0xD0	; 208
    1a56:	4a 33       	cpi	r20, 0x3A	; 58
    1a58:	18 f0       	brcs	.+6      	; 0x1a60 <__ultoa_invert+0x7c>
    1a5a:	49 5d       	subi	r20, 0xD9	; 217
    1a5c:	31 fd       	sbrc	r19, 1
    1a5e:	40 52       	subi	r20, 0x20	; 32
    1a60:	41 93       	st	Z+, r20
    1a62:	02 d0       	rcall	.+4      	; 0x1a68 <__ultoa_invert+0x84>
    1a64:	a9 f7       	brne	.-22     	; 0x1a50 <__ultoa_invert+0x6c>
    1a66:	ea cf       	rjmp	.-44     	; 0x1a3c <__ultoa_invert+0x58>
    1a68:	b4 e0       	ldi	r27, 0x04	; 4
    1a6a:	a6 95       	lsr	r26
    1a6c:	97 95       	ror	r25
    1a6e:	87 95       	ror	r24
    1a70:	77 95       	ror	r23
    1a72:	67 95       	ror	r22
    1a74:	ba 95       	dec	r27
    1a76:	c9 f7       	brne	.-14     	; 0x1a6a <__ultoa_invert+0x86>
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	61 05       	cpc	r22, r1
    1a7c:	71 05       	cpc	r23, r1
    1a7e:	08 95       	ret
    1a80:	9b 01       	movw	r18, r22
    1a82:	ac 01       	movw	r20, r24
    1a84:	0a 2e       	mov	r0, r26
    1a86:	06 94       	lsr	r0
    1a88:	57 95       	ror	r21
    1a8a:	47 95       	ror	r20
    1a8c:	37 95       	ror	r19
    1a8e:	27 95       	ror	r18
    1a90:	ba 95       	dec	r27
    1a92:	c9 f7       	brne	.-14     	; 0x1a86 <__ultoa_invert+0xa2>
    1a94:	62 0f       	add	r22, r18
    1a96:	73 1f       	adc	r23, r19
    1a98:	84 1f       	adc	r24, r20
    1a9a:	95 1f       	adc	r25, r21
    1a9c:	a0 1d       	adc	r26, r0
    1a9e:	08 95       	ret

00001aa0 <_exit>:
    1aa0:	f8 94       	cli

00001aa2 <__stop_program>:
    1aa2:	ff cf       	rjmp	.-2      	; 0x1aa2 <__stop_program>
