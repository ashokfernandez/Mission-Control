
MouseHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000024e0  00002574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ec  0080013a  0080013a  000025ae  2**0
                  ALLOC
  3 .stab         00001014  00000000  00000000  000025b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000315  00000000  00000000  000035c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000006d8  00000000  00000000  000038d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000ebc  00000000  00000000  00003fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000af01  00000000  00000000  00004e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b6b  00000000  00000000  0000fd6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000075e3  00000000  00000000  000128d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ab0  00000000  00000000  00019ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000042bc  00000000  00000000  0001a96c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004f62  00000000  00000000  0001ec28  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007d0  00000000  00000000  00023b8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return USB_Host_SendControlRequest(Buffer);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointNum)
{
       0:	19 c1       	rjmp	.+562    	; 0x234 <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       4:	35 c1       	rjmp	.+618    	; 0x270 <__bad_interrupt>
	return true;
}

void USB_SetHIDReportItemInfo(uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
       6:	00 00       	nop

	return ReportReceived;
}

uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
       8:	33 c1       	rjmp	.+614    	; 0x270 <__bad_interrupt>
       a:	00 00       	nop
       c:	31 c1       	rjmp	.+610    	; 0x270 <__bad_interrupt>
       e:	00 00       	nop
      10:	2f c1       	rjmp	.+606    	; 0x270 <__bad_interrupt>
      12:	00 00       	nop
      14:	2d c1       	rjmp	.+602    	; 0x270 <__bad_interrupt>
      16:	00 00       	nop
      18:	2b c1       	rjmp	.+598    	; 0x270 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	29 c1       	rjmp	.+594    	; 0x270 <__bad_interrupt>
      1e:	00 00       	nop
      20:	27 c1       	rjmp	.+590    	; 0x270 <__bad_interrupt>
      22:	00 00       	nop
      24:	25 c1       	rjmp	.+586    	; 0x270 <__bad_interrupt>
      26:	00 00       	nop
      28:	00 c6       	rjmp	.+3072   	; 0xc2a <__vector_10>
      2a:	00 00       	nop
      2c:	21 c1       	rjmp	.+578    	; 0x270 <__bad_interrupt>
      2e:	00 00       	nop
      30:	1f c1       	rjmp	.+574    	; 0x270 <__bad_interrupt>
      32:	00 00       	nop
      34:	1d c1       	rjmp	.+570    	; 0x270 <__bad_interrupt>
      36:	00 00       	nop
      38:	1b c1       	rjmp	.+566    	; 0x270 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	19 c1       	rjmp	.+562    	; 0x270 <__bad_interrupt>
      3e:	00 00       	nop
      40:	17 c1       	rjmp	.+558    	; 0x270 <__bad_interrupt>
      42:	00 00       	nop
      44:	15 c1       	rjmp	.+554    	; 0x270 <__bad_interrupt>
      46:	00 00       	nop
      48:	13 c1       	rjmp	.+550    	; 0x270 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	11 c1       	rjmp	.+546    	; 0x270 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0f c1       	rjmp	.+542    	; 0x270 <__bad_interrupt>
      52:	00 00       	nop
      54:	0d c1       	rjmp	.+538    	; 0x270 <__bad_interrupt>
      56:	00 00       	nop
      58:	0b c1       	rjmp	.+534    	; 0x270 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	09 c1       	rjmp	.+530    	; 0x270 <__bad_interrupt>
      5e:	00 00       	nop
      60:	07 c1       	rjmp	.+526    	; 0x270 <__bad_interrupt>
      62:	00 00       	nop
      64:	05 c1       	rjmp	.+522    	; 0x270 <__bad_interrupt>
      66:	00 00       	nop
      68:	03 c1       	rjmp	.+518    	; 0x270 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	01 c1       	rjmp	.+514    	; 0x270 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ff c0       	rjmp	.+510    	; 0x270 <__bad_interrupt>
      72:	00 00       	nop
      74:	fd c0       	rjmp	.+506    	; 0x270 <__bad_interrupt>
      76:	00 00       	nop
      78:	fb c0       	rjmp	.+502    	; 0x270 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f9 c0       	rjmp	.+498    	; 0x270 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f7 c0       	rjmp	.+494    	; 0x270 <__bad_interrupt>
      82:	00 00       	nop
      84:	f5 c0       	rjmp	.+490    	; 0x270 <__bad_interrupt>
      86:	00 00       	nop
      88:	f3 c0       	rjmp	.+486    	; 0x270 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f1 c0       	rjmp	.+482    	; 0x270 <__bad_interrupt>
      8e:	00 00       	nop
      90:	ef c0       	rjmp	.+478    	; 0x270 <__bad_interrupt>
      92:	00 00       	nop
      94:	ed c0       	rjmp	.+474    	; 0x270 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4201>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4193>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4185>:
     11d:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     12d:	68 65 64 2e 0d 0a 00                                hed....

00000134 <__c.4180>:
     134:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     144:	0d 0a 00                                            ...

00000147 <__c.4110>:
     147:	4d 6f 75 73 65 20 45 6e 75 6d 65 72 61 74 65 64     Mouse Enumerated
     157:	2e 0d 0a 00                                         ....

0000015b <__c.4108>:
     15b:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 52 65     Error Setting Re
     16b:	70 6f 72 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f     port Protocol Mo
     17b:	64 65 20 6f 72 20 4e 6f 74 20 61 20 56 61 6c 69     de or Not a Vali
     18b:	64 20 4d 6f 75 73 65 2e 0d 0a 00                    d Mouse....

00000196 <__c.4106>:
     196:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     1a6:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     1b6:	6f 6e 2e 0d 0a 00                                   on....

000001bc <__c.4104>:
     1bc:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1cc:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4d 6f 75 73     Not a Valid Mous
     1dc:	65 2e 0d 0a 00                                      e....

000001e1 <__c.4101>:
     1e1:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1f1:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     201:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

0000020e <__c.4096>:
     20e:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 6f 73 74 20     .[36mMouse Host 
     21e:	44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b     Demo running....
     22e:	5b 33 37 6d 00 00                                   [37m..

00000234 <__ctors_end>:
     234:	11 24       	eor	r1, r1
     236:	1f be       	out	0x3f, r1	; 63
     238:	cf ef       	ldi	r28, 0xFF	; 255
     23a:	d0 e2       	ldi	r29, 0x20	; 32
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	cd bf       	out	0x3d, r28	; 61

00000240 <__do_copy_data>:
     240:	11 e0       	ldi	r17, 0x01	; 1
     242:	a0 e0       	ldi	r26, 0x00	; 0
     244:	b1 e0       	ldi	r27, 0x01	; 1
     246:	e0 ee       	ldi	r30, 0xE0	; 224
     248:	f4 e2       	ldi	r31, 0x24	; 36
     24a:	00 e0       	ldi	r16, 0x00	; 0
     24c:	0b bf       	out	0x3b, r16	; 59
     24e:	02 c0       	rjmp	.+4      	; 0x254 <__do_copy_data+0x14>
     250:	07 90       	elpm	r0, Z+
     252:	0d 92       	st	X+, r0
     254:	aa 33       	cpi	r26, 0x3A	; 58
     256:	b1 07       	cpc	r27, r17
     258:	d9 f7       	brne	.-10     	; 0x250 <__do_copy_data+0x10>

0000025a <__do_clear_bss>:
     25a:	15 e0       	ldi	r17, 0x05	; 5
     25c:	aa e3       	ldi	r26, 0x3A	; 58
     25e:	b1 e0       	ldi	r27, 0x01	; 1
     260:	01 c0       	rjmp	.+2      	; 0x264 <.do_clear_bss_start>

00000262 <.do_clear_bss_loop>:
     262:	1d 92       	st	X+, r1

00000264 <.do_clear_bss_start>:
     264:	a6 32       	cpi	r26, 0x26	; 38
     266:	b1 07       	cpc	r27, r17
     268:	e1 f7       	brne	.-8      	; 0x262 <.do_clear_bss_loop>
     26a:	bc d0       	rcall	.+376    	; 0x3e4 <main>
     26c:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <_exit>

00000270 <__bad_interrupt>:
     270:	c7 ce       	rjmp	.-626    	; 0x0 <__vectors>

00000272 <EVENT_USB_Host_DeviceEnumerationComplete>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     272:	8b b1       	in	r24, 0x0b	; 11
     274:	8f 70       	andi	r24, 0x0F	; 15
     276:	80 66       	ori	r24, 0x60	; 96
     278:	8b b9       	out	0x0b, r24	; 11
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     27a:	08 95       	ret

0000027c <CALLBACK_HIDParser_FilterHIDReportItem>:
 *  \param[in] CurrentItem  Pointer to the item the HID report parser is currently working with
 *
 *  \return Boolean true if the item should be stored into the HID report structure, false if it should be discarded
 */
bool CALLBACK_HIDParser_FilterHIDReportItem(HID_ReportItem_t* const CurrentItem)
{
     27c:	dc 01       	movw	r26, r24

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Mouse Usage is found - this prevents Joysticks, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a mouse by the demo
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     27e:	16 96       	adiw	r26, 0x06	; 6
     280:	ed 91       	ld	r30, X+
     282:	fc 91       	ld	r31, X
     284:	17 97       	sbiw	r26, 0x07	; 7
     286:	0b c0       	rjmp	.+22     	; 0x29e <CALLBACK_HIDParser_FilterHIDReportItem+0x22>
	{
		if ((CurrPath->Usage.Page  == USAGE_PAGE_GENERIC_DCTRL) &&
     288:	81 81       	ldd	r24, Z+1	; 0x01
     28a:	92 81       	ldd	r25, Z+2	; 0x02
     28c:	01 97       	sbiw	r24, 0x01	; 1
     28e:	21 f4       	brne	.+8      	; 0x298 <CALLBACK_HIDParser_FilterHIDReportItem+0x1c>
     290:	83 81       	ldd	r24, Z+3	; 0x03
     292:	94 81       	ldd	r25, Z+4	; 0x04
     294:	02 97       	sbiw	r24, 0x02	; 2
     296:	39 f0       	breq	.+14     	; 0x2a6 <CALLBACK_HIDParser_FilterHIDReportItem+0x2a>

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Mouse Usage is found - this prevents Joysticks, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a mouse by the demo
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     298:	05 80       	ldd	r0, Z+5	; 0x05
     29a:	f6 81       	ldd	r31, Z+6	; 0x06
     29c:	e0 2d       	mov	r30, r0
     29e:	30 97       	sbiw	r30, 0x00	; 0
     2a0:	99 f7       	brne	.-26     	; 0x288 <CALLBACK_HIDParser_FilterHIDReportItem+0xc>
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	08 95       	ret

	/* Check the attributes of the current item - see if we are interested in it or not;
	 * only store BUTTON and GENERIC_DESKTOP_CONTROL items into the Processed HID Report
	 * structure to save RAM and ignore the rest
	 */
	return ((CurrentItem->Attributes.Usage.Page == USAGE_PAGE_BUTTON) ||
     2a6:	19 96       	adiw	r26, 0x09	; 9
     2a8:	8d 91       	ld	r24, X+
     2aa:	9c 91       	ld	r25, X
     2ac:	1a 97       	sbiw	r26, 0x0a	; 10
     2ae:	89 30       	cpi	r24, 0x09	; 9
     2b0:	91 05       	cpc	r25, r1
     2b2:	21 f0       	breq	.+8      	; 0x2bc <CALLBACK_HIDParser_FilterHIDReportItem+0x40>
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	01 97       	sbiw	r24, 0x01	; 1
     2ba:	11 f4       	brne	.+4      	; 0x2c0 <CALLBACK_HIDParser_FilterHIDReportItem+0x44>
     2bc:	21 e0       	ldi	r18, 0x01	; 1
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	82 2f       	mov	r24, r18
	        (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_GENERIC_DCTRL));
}
     2c2:	08 95       	ret

000002c4 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     2c4:	90 91 1f 05 	lds	r25, 0x051F
     2c8:	2d b7       	in	r18, 0x3d	; 61
     2ca:	3e b7       	in	r19, 0x3e	; 62
     2cc:	28 50       	subi	r18, 0x08	; 8
     2ce:	30 40       	sbci	r19, 0x00	; 0
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	f8 94       	cli
     2d4:	3e bf       	out	0x3e, r19	; 62
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	2d bf       	out	0x3d, r18	; 61
     2da:	ed b7       	in	r30, 0x3d	; 61
     2dc:	fe b7       	in	r31, 0x3e	; 62
     2de:	31 96       	adiw	r30, 0x01	; 1
     2e0:	28 e9       	ldi	r18, 0x98	; 152
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	ad b7       	in	r26, 0x3d	; 61
     2e6:	be b7       	in	r27, 0x3e	; 62
     2e8:	12 96       	adiw	r26, 0x02	; 2
     2ea:	3c 93       	st	X, r19
     2ec:	2e 93       	st	-X, r18
     2ee:	11 97       	sbiw	r26, 0x01	; 1
     2f0:	82 83       	std	Z+2, r24	; 0x02
     2f2:	13 82       	std	Z+3, r1	; 0x03
     2f4:	64 83       	std	Z+4, r22	; 0x04
     2f6:	15 82       	std	Z+5, r1	; 0x05
     2f8:	96 83       	std	Z+6, r25	; 0x06
     2fa:	17 82       	std	Z+7, r1	; 0x07
     2fc:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <printf_P>
     300:	8b b1       	in	r24, 0x0b	; 11
     302:	8f 70       	andi	r24, 0x0F	; 15
     304:	80 69       	ori	r24, 0x90	; 144
     306:	8b b9       	out	0x0b, r24	; 11
     308:	2d b7       	in	r18, 0x3d	; 61
     30a:	3e b7       	in	r19, 0x3e	; 62
     30c:	28 5f       	subi	r18, 0xF8	; 248
     30e:	3f 4f       	sbci	r19, 0xFF	; 255
     310:	0f b6       	in	r0, 0x3f	; 63
     312:	f8 94       	cli
     314:	3e bf       	out	0x3e, r19	; 62
     316:	0f be       	out	0x3f, r0	; 63
     318:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     31a:	08 95       	ret

0000031c <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     31c:	1f 93       	push	r17
     31e:	18 2f       	mov	r17, r24
	USB_ShutDown();
     320:	5f d4       	rcall	.+2238   	; 0xbe0 <USB_ShutDown>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     322:	00 d0       	rcall	.+0      	; 0x324 <EVENT_USB_Host_HostError+0x8>
     324:	00 d0       	rcall	.+0      	; 0x326 <EVENT_USB_Host_HostError+0xa>
     326:	ed b7       	in	r30, 0x3d	; 61
     328:	fe b7       	in	r31, 0x3e	; 62
     32a:	31 96       	adiw	r30, 0x01	; 1
     32c:	8e ee       	ldi	r24, 0xEE	; 238
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	ad b7       	in	r26, 0x3d	; 61
     332:	be b7       	in	r27, 0x3e	; 62
     334:	12 96       	adiw	r26, 0x02	; 2
     336:	9c 93       	st	X, r25
     338:	8e 93       	st	-X, r24
     33a:	11 97       	sbiw	r26, 0x01	; 1
     33c:	12 83       	std	Z+2, r17	; 0x02
     33e:	13 82       	std	Z+3, r1	; 0x03
     340:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <printf_P>
     344:	8b b1       	in	r24, 0x0b	; 11
     346:	8f 70       	andi	r24, 0x0F	; 15
     348:	80 69       	ori	r24, 0x90	; 144
     34a:	8b b9       	out	0x0b, r24	; 11
     34c:	0f 90       	pop	r0
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	ff cf       	rjmp	.-2      	; 0x354 <EVENT_USB_Host_HostError+0x38>

00000356 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     356:	8d e1       	ldi	r24, 0x1D	; 29
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <puts_P>
     35e:	8b b1       	in	r24, 0x0b	; 11
     360:	8f 70       	andi	r24, 0x0F	; 15
     362:	80 61       	ori	r24, 0x10	; 16
     364:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     366:	08 95       	ret

00000368 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     368:	84 e3       	ldi	r24, 0x34	; 52
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <puts_P>
     370:	8b b1       	in	r24, 0x0b	; 11
     372:	8f 70       	andi	r24, 0x0F	; 15
     374:	80 6a       	ori	r24, 0xA0	; 160
     376:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     378:	08 95       	ret

0000037a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     37a:	84 b7       	in	r24, 0x34	; 52
     37c:	87 7f       	andi	r24, 0xF7	; 247
     37e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     380:	38 e1       	ldi	r19, 0x18	; 24
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	30 93 60 00 	sts	0x0060, r19
     38a:	10 92 60 00 	sts	0x0060, r1
     38e:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	20 e8       	ldi	r18, 0x80	; 128
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	f8 94       	cli
     39a:	20 93 61 00 	sts	0x0061, r18
     39e:	80 93 61 00 	sts	0x0061, r24
     3a2:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     3a4:	83 e3       	ldi	r24, 0x33	; 51
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	90 93 cd 00 	sts	0x00CD, r25
     3ac:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     3b0:	86 e0       	ldi	r24, 0x06	; 6
     3b2:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     3b6:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     3ba:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     3be:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     3c0:	5a 9a       	sbi	0x0b, 2	; 11
			static inline void SerialStream_Init(const uint32_t BaudRate,
			                                     const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);

				stdout = &USARTStream;
     3c2:	8c e2       	ldi	r24, 0x2C	; 44
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	90 93 23 05 	sts	0x0523, r25
     3ca:	80 93 22 05 	sts	0x0522, r24
				stdin  = &USARTStream;
     3ce:	90 93 21 05 	sts	0x0521, r25
     3d2:	80 93 20 05 	sts	0x0520, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     3d6:	8a b1       	in	r24, 0x0a	; 10
     3d8:	80 6f       	ori	r24, 0xF0	; 240
     3da:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     3dc:	8b b1       	in	r24, 0x0b	; 11
     3de:	8f 70       	andi	r24, 0x0F	; 15
     3e0:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	SerialStream_Init(9600, false);
	LEDs_Init();
	USB_Init();
}
     3e2:	f5 c3       	rjmp	.+2026   	; 0xbce <USB_Init>

000003e4 <main>:

/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
     3e4:	2f 92       	push	r2
     3e6:	3f 92       	push	r3
     3e8:	4f 92       	push	r4
     3ea:	5f 92       	push	r5
     3ec:	6f 92       	push	r6
     3ee:	7f 92       	push	r7
     3f0:	8f 92       	push	r8
     3f2:	9f 92       	push	r9
     3f4:	af 92       	push	r10
     3f6:	bf 92       	push	r11
     3f8:	cf 92       	push	r12
     3fa:	df 92       	push	r13
     3fc:	ef 92       	push	r14
     3fe:	ff 92       	push	r15
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	df 93       	push	r29
     406:	cf 93       	push	r28
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
     40c:	c2 50       	subi	r28, 0x02	; 2
     40e:	d2 40       	sbci	r29, 0x02	; 2
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61
	SetupHardware();
     41a:	af df       	rcall	.-162    	; 0x37a <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mouse Host Demo running.\r\n" ESC_FG_WHITE));
     41c:	8e e0       	ldi	r24, 0x0E	; 14
     41e:	92 e0       	ldi	r25, 0x02	; 2
     420:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <puts_P>
	sei();
     424:	78 94       	sei
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     426:	8b b1       	in	r24, 0x0b	; 11
     428:	8f 70       	andi	r24, 0x0F	; 15
     42a:	80 61       	ori	r24, 0x10	; 16
     42c:	8b b9       	out	0x0b, r24	; 11
				LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

				uint16_t ConfigDescriptorSize;
				uint8_t  ConfigDescriptorData[512];

				if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     42e:	63 e0       	ldi	r22, 0x03	; 3
     430:	66 2e       	mov	r6, r22
     432:	71 2c       	mov	r7, r1
     434:	6c 0e       	add	r6, r28
     436:	7d 1e       	adc	r7, r29
     438:	2e 01       	movw	r4, r28
     43a:	08 94       	sec
     43c:	41 1c       	adc	r4, r1
     43e:	51 1c       	adc	r5, r1
					break;
				}

				puts_P(PSTR("Mouse Enumerated.\r\n"));
				LEDs_SetAllLEDs(LEDMASK_USB_READY);
				USB_HostState = HOST_STATE_Configured;
     440:	5c e0       	ldi	r21, 0x0C	; 12
     442:	25 2e       	mov	r2, r21

					uint8_t LEDMask = LEDS_NO_LEDS;

					for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
					{
						HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     444:	4a e2       	ldi	r20, 0x2A	; 42
     446:	34 2e       	mov	r3, r20
						else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
								 ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
								  (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
								 (ReportItem->ItemType                == HID_REPORT_ITEM_In))
						{
							int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     448:	30 e1       	ldi	r19, 0x10	; 16
     44a:	83 2e       	mov	r8, r19
     44c:	91 2c       	mov	r9, r1

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);

	for (;;)
	{
		switch (USB_HostState)
     44e:	80 91 1f 05 	lds	r24, 0x051F
     452:	8b 30       	cpi	r24, 0x0B	; 11
     454:	21 f0       	breq	.+8      	; 0x45e <main+0x7a>
     456:	8c 30       	cpi	r24, 0x0C	; 12
     458:	09 f0       	breq	.+2      	; 0x45c <main+0x78>
     45a:	e7 c0       	rjmp	.+462    	; 0x62a <main+0x246>
     45c:	3e c0       	rjmp	.+124    	; 0x4da <main+0xf6>
     45e:	8b b1       	in	r24, 0x0b	; 11
     460:	8f 70       	andi	r24, 0x0F	; 15
     462:	80 6a       	ori	r24, 0xA0	; 160
     464:	8b b9       	out	0x0b, r24	; 11
				LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

				uint16_t ConfigDescriptorSize;
				uint8_t  ConfigDescriptorData[512];

				if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	b2 01       	movw	r22, r4
     46a:	a3 01       	movw	r20, r6
     46c:	20 e0       	ldi	r18, 0x00	; 0
     46e:	32 e0       	ldi	r19, 0x02	; 2
     470:	b0 d4       	rcall	.+2400   	; 0xdd2 <USB_Host_GetDeviceConfigDescriptor>
     472:	88 23       	and	r24, r24
     474:	19 f0       	breq	.+6      	; 0x47c <main+0x98>
				                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
				{
					puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     476:	81 ee       	ldi	r24, 0xE1	; 225
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	0b c0       	rjmp	.+22     	; 0x492 <main+0xae>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				if (HID_Host_ConfigurePipes(&Mouse_HID_Interface,
     47c:	69 81       	ldd	r22, Y+1	; 0x01
     47e:	7a 81       	ldd	r23, Y+2	; 0x02
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	a3 01       	movw	r20, r6
     486:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <HID_Host_ConfigurePipes>
     48a:	88 23       	and	r24, r24
     48c:	59 f0       	breq	.+22     	; 0x4a4 <main+0xc0>
				                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
				{
					puts_P(PSTR("Attached Device Not a Valid Mouse.\r\n"));
     48e:	8c eb       	ldi	r24, 0xBC	; 188
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <puts_P>
     496:	8b b1       	in	r24, 0x0b	; 11
     498:	8f 70       	andi	r24, 0x0F	; 15
     49a:	80 69       	ori	r24, 0x90	; 144
     49c:	8b b9       	out	0x0b, r24	; 11
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     49e:	10 92 1f 05 	sts	0x051F, r1
     4a2:	c3 c0       	rjmp	.+390    	; 0x62a <main+0x246>
					break;
				}

				if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	5c d1       	rcall	.+696    	; 0x760 <USB_Host_SetDeviceConfiguration>
     4a8:	88 23       	and	r24, r24
     4aa:	19 f0       	breq	.+6      	; 0x4b2 <main+0xce>
				{
					puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     4ac:	86 e9       	ldi	r24, 0x96	; 150
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	f0 cf       	rjmp	.-32     	; 0x492 <main+0xae>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				if (HID_Host_SetReportProtocol(&Mouse_HID_Interface) != 0)
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <HID_Host_SetReportProtocol>
     4ba:	88 23       	and	r24, r24
     4bc:	19 f0       	breq	.+6      	; 0x4c4 <main+0xe0>
				{
					puts_P(PSTR("Error Setting Report Protocol Mode or Not a Valid Mouse.\r\n"));
     4be:	8b e5       	ldi	r24, 0x5B	; 91
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	e7 cf       	rjmp	.-50     	; 0x492 <main+0xae>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				puts_P(PSTR("Mouse Enumerated.\r\n"));
     4c4:	87 e4       	ldi	r24, 0x47	; 71
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <puts_P>
     4cc:	8b b1       	in	r24, 0x0b	; 11
     4ce:	8f 70       	andi	r24, 0x0F	; 15
     4d0:	80 66       	ori	r24, 0x60	; 96
     4d2:	8b b9       	out	0x0b, r24	; 11
				LEDs_SetAllLEDs(LEDMASK_USB_READY);
				USB_HostState = HOST_STATE_Configured;
     4d4:	20 92 1f 05 	sts	0x051F, r2
     4d8:	a8 c0       	rjmp	.+336    	; 0x62a <main+0x246>
				break;
			case HOST_STATE_Configured:
				if (HID_Host_IsReportReceived(&Mouse_HID_Interface))
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <HID_Host_IsReportReceived>
     4e2:	88 23       	and	r24, r24
     4e4:	09 f4       	brne	.+2      	; 0x4e8 <main+0x104>
     4e6:	a1 c0       	rjmp	.+322    	; 0x62a <main+0x246>
     4e8:	bd b6       	in	r11, 0x3d	; 61
     4ea:	ae b6       	in	r10, 0x3e	; 62
				{
					uint8_t MouseReport[Mouse_HID_Interface.State.LargestReportSize];
     4ec:	80 91 12 01 	lds	r24, 0x0112
     4f0:	2d b7       	in	r18, 0x3d	; 61
     4f2:	3e b7       	in	r19, 0x3e	; 62
     4f4:	28 1b       	sub	r18, r24
     4f6:	31 09       	sbc	r19, r1
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	f8 94       	cli
     4fc:	3e bf       	out	0x3e, r19	; 62
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	2d bf       	out	0x3d, r18	; 61
     502:	0d b7       	in	r16, 0x3d	; 61
     504:	1e b7       	in	r17, 0x3e	; 62
     506:	0f 5f       	subi	r16, 0xFF	; 255
     508:	1f 4f       	sbci	r17, 0xFF	; 255
					HID_Host_ReceiveReport(&Mouse_HID_Interface, &MouseReport);
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	b8 01       	movw	r22, r16
     510:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <HID_Host_ReceiveReport>
					for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
					{
						HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];

						/* Update the report item value if it is contained within the current report */
						if (!(USB_GetHIDReportItemInfo(MouseReport, ReportItem)))
     514:	68 01       	movw	r12, r16
     516:	ff 24       	eor	r15, r15
     518:	ee 24       	eor	r14, r14
     51a:	76 c0       	rjmp	.+236    	; 0x608 <main+0x224>

					uint8_t LEDMask = LEDS_NO_LEDS;

					for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
					{
						HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     51c:	e3 9c       	mul	r14, r3
     51e:	80 01       	movw	r16, r0
     520:	11 24       	eor	r1, r1
     522:	02 5c       	subi	r16, 0xC2	; 194
     524:	1e 4f       	sbci	r17, 0xFE	; 254

						/* Update the report item value if it is contained within the current report */
						if (!(USB_GetHIDReportItemInfo(MouseReport, ReportItem)))
     526:	c6 01       	movw	r24, r12
     528:	b8 01       	movw	r22, r16
     52a:	2c d6       	rcall	.+3160   	; 0x1184 <USB_GetHIDReportItemInfo>
     52c:	88 23       	and	r24, r24
     52e:	09 f4       	brne	.+2      	; 0x532 <main+0x14e>
     530:	6a c0       	rjmp	.+212    	; 0x606 <main+0x222>
						  continue;

						/* Determine what report item is being tested, process updated value as needed */
						if ((ReportItem->Attributes.Usage.Page        == USAGE_PAGE_BUTTON) &&
     532:	f8 01       	movw	r30, r16
     534:	81 85       	ldd	r24, Z+9	; 0x09
     536:	92 85       	ldd	r25, Z+10	; 0x0a
     538:	89 30       	cpi	r24, 0x09	; 9
     53a:	91 05       	cpc	r25, r1
     53c:	81 f4       	brne	.+32     	; 0x55e <main+0x17a>
     53e:	82 81       	ldd	r24, Z+2	; 0x02
     540:	88 23       	and	r24, r24
     542:	09 f0       	breq	.+2      	; 0x546 <main+0x162>
     544:	60 c0       	rjmp	.+192    	; 0x606 <main+0x222>
							(ReportItem->ItemType                     == HID_REPORT_ITEM_In))
						{
							if (ReportItem->Value)
     546:	82 a1       	ldd	r24, Z+34	; 0x22
     548:	93 a1       	ldd	r25, Z+35	; 0x23
     54a:	a4 a1       	ldd	r26, Z+36	; 0x24
     54c:	b5 a1       	ldd	r27, Z+37	; 0x25
     54e:	00 97       	sbiw	r24, 0x00	; 0
     550:	a1 05       	cpc	r26, r1
     552:	b1 05       	cpc	r27, r1
     554:	09 f4       	brne	.+2      	; 0x558 <main+0x174>
     556:	57 c0       	rjmp	.+174    	; 0x606 <main+0x222>
     558:	20 ef       	ldi	r18, 0xF0	; 240
     55a:	f2 2e       	mov	r15, r18
     55c:	54 c0       	rjmp	.+168    	; 0x606 <main+0x222>
							  LEDMask = LEDS_ALL_LEDS;
						}
						else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	09 f0       	breq	.+2      	; 0x564 <main+0x180>
     562:	51 c0       	rjmp	.+162    	; 0x606 <main+0x222>
     564:	f8 01       	movw	r30, r16
     566:	63 85       	ldd	r22, Z+11	; 0x0b
     568:	74 85       	ldd	r23, Z+12	; 0x0c
     56a:	68 33       	cpi	r22, 0x38	; 56
     56c:	71 05       	cpc	r23, r1
     56e:	f9 f4       	brne	.+62     	; 0x5ae <main+0x1ca>
     570:	82 81       	ldd	r24, Z+2	; 0x02
     572:	88 23       	and	r24, r24
     574:	e1 f4       	brne	.+56     	; 0x5ae <main+0x1ca>
								 (ReportItem->Attributes.Usage.Usage  == USAGE_SCROLL_WHEEL)       &&
								 (ReportItem->ItemType                == HID_REPORT_ITEM_In))
						{
							int16_t WheelDelta = HID_ALIGN_DATA(ReportItem, int16_t);
     576:	80 85       	ldd	r24, Z+8	; 0x08
     578:	94 01       	movw	r18, r8
     57a:	28 1b       	sub	r18, r24
     57c:	31 09       	sbc	r19, r1
     57e:	c9 01       	movw	r24, r18
     580:	22 a1       	ldd	r18, Z+34	; 0x22
     582:	33 a1       	ldd	r19, Z+35	; 0x23
     584:	44 a1       	ldd	r20, Z+36	; 0x24
     586:	55 a1       	ldd	r21, Z+37	; 0x25
     588:	04 c0       	rjmp	.+8      	; 0x592 <main+0x1ae>
     58a:	22 0f       	add	r18, r18
     58c:	33 1f       	adc	r19, r19
     58e:	44 1f       	adc	r20, r20
     590:	55 1f       	adc	r21, r21
     592:	8a 95       	dec	r24
     594:	d2 f7       	brpl	.-12     	; 0x58a <main+0x1a6>

							if (WheelDelta)
     596:	21 15       	cp	r18, r1
     598:	31 05       	cpc	r19, r1
     59a:	a9 f1       	breq	.+106    	; 0x606 <main+0x222>
							  LEDMask = (LEDS_LED1 | LEDS_LED2 | ((WheelDelta > 0) ? LEDS_LED3 : LEDS_LED4));
     59c:	12 16       	cp	r1, r18
     59e:	13 06       	cpc	r1, r19
     5a0:	1c f0       	brlt	.+6      	; 0x5a8 <main+0x1c4>
     5a2:	90 e7       	ldi	r25, 0x70	; 112
     5a4:	f9 2e       	mov	r15, r25
     5a6:	2f c0       	rjmp	.+94     	; 0x606 <main+0x222>
     5a8:	80 eb       	ldi	r24, 0xB0	; 176
     5aa:	f8 2e       	mov	r15, r24
     5ac:	2c c0       	rjmp	.+88     	; 0x606 <main+0x222>
						}
						else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     5ae:	cb 01       	movw	r24, r22
     5b0:	c0 97       	sbiw	r24, 0x30	; 48
     5b2:	02 97       	sbiw	r24, 0x02	; 2
     5b4:	40 f5       	brcc	.+80     	; 0x606 <main+0x222>
     5b6:	f8 01       	movw	r30, r16
     5b8:	82 81       	ldd	r24, Z+2	; 0x02
     5ba:	88 23       	and	r24, r24
     5bc:	21 f5       	brne	.+72     	; 0x606 <main+0x222>
								 ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
								  (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
								 (ReportItem->ItemType                == HID_REPORT_ITEM_In))
						{
							int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     5be:	80 85       	ldd	r24, Z+8	; 0x08
     5c0:	94 01       	movw	r18, r8
     5c2:	28 1b       	sub	r18, r24
     5c4:	31 09       	sbc	r19, r1
     5c6:	c9 01       	movw	r24, r18
     5c8:	22 a1       	ldd	r18, Z+34	; 0x22
     5ca:	33 a1       	ldd	r19, Z+35	; 0x23
     5cc:	44 a1       	ldd	r20, Z+36	; 0x24
     5ce:	55 a1       	ldd	r21, Z+37	; 0x25
     5d0:	04 c0       	rjmp	.+8      	; 0x5da <main+0x1f6>
     5d2:	22 0f       	add	r18, r18
     5d4:	33 1f       	adc	r19, r19
     5d6:	44 1f       	adc	r20, r20
     5d8:	55 1f       	adc	r21, r21
     5da:	8a 95       	dec	r24
     5dc:	d2 f7       	brpl	.-12     	; 0x5d2 <main+0x1ee>

							if (DeltaMovement)
     5de:	21 15       	cp	r18, r1
     5e0:	31 05       	cpc	r19, r1
     5e2:	89 f0       	breq	.+34     	; 0x606 <main+0x222>
							{
								if (ReportItem->Attributes.Usage.Usage == USAGE_X)
     5e4:	60 33       	cpi	r22, 0x30	; 48
     5e6:	71 05       	cpc	r23, r1
     5e8:	39 f4       	brne	.+14     	; 0x5f8 <main+0x214>
								  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED1 : LEDS_LED2);
     5ea:	12 16       	cp	r1, r18
     5ec:	13 06       	cpc	r1, r19
     5ee:	14 f0       	brlt	.+4      	; 0x5f4 <main+0x210>
     5f0:	80 e2       	ldi	r24, 0x20	; 32
     5f2:	08 c0       	rjmp	.+16     	; 0x604 <main+0x220>
     5f4:	80 e1       	ldi	r24, 0x10	; 16
     5f6:	06 c0       	rjmp	.+12     	; 0x604 <main+0x220>
								else
								  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
     5f8:	12 16       	cp	r1, r18
     5fa:	13 06       	cpc	r1, r19
     5fc:	14 f0       	brlt	.+4      	; 0x602 <main+0x21e>
     5fe:	80 e4       	ldi	r24, 0x40	; 64
     600:	01 c0       	rjmp	.+2      	; 0x604 <main+0x220>
     602:	80 e8       	ldi	r24, 0x80	; 128
     604:	f8 2a       	or	r15, r24
					uint8_t MouseReport[Mouse_HID_Interface.State.LargestReportSize];
					HID_Host_ReceiveReport(&Mouse_HID_Interface, &MouseReport);

					uint8_t LEDMask = LEDS_NO_LEDS;

					for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     606:	e3 94       	inc	r14
     608:	80 91 3d 01 	lds	r24, 0x013D
     60c:	e8 16       	cp	r14, r24
     60e:	08 f4       	brcc	.+2      	; 0x612 <main+0x22e>
     610:	85 cf       	rjmp	.-246    	; 0x51c <main+0x138>
     612:	8b b1       	in	r24, 0x0b	; 11
     614:	8f 70       	andi	r24, 0x0F	; 15
     616:	f8 2a       	or	r15, r24
     618:	fb b8       	out	0x0b, r15	; 11
     61a:	2b 2d       	mov	r18, r11
     61c:	3a 2d       	mov	r19, r10
     61e:	c9 01       	movw	r24, r18
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	9e bf       	out	0x3e, r25	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	8d bf       	out	0x3d, r24	; 61

				break;
		}

		HID_Host_USBTask(&Mouse_HID_Interface);
		USB_USBTask();
     62a:	9a d5       	rcall	.+2868   	; 0x1160 <USB_USBTask>
     62c:	10 cf       	rjmp	.-480    	; 0x44e <main+0x6a>

0000062e <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     62e:	98 2f       	mov	r25, r24
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     630:	20 91 9e 00 	lds	r18, 0x009E
	bool    BusSuspended = USB_Host_IsBusSuspended();
	uint8_t ErrorCode    = HOST_WAITERROR_Successful;
	bool    HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     634:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     638:	80 91 a0 00 	lds	r24, 0x00A0
     63c:	8f 7d       	andi	r24, 0xDF	; 223
     63e:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     642:	80 91 9f 00 	lds	r24, 0x009F
     646:	8f 7d       	andi	r24, 0xDF	; 223
     648:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     64c:	80 91 9e 00 	lds	r24, 0x009E
     650:	81 60       	ori	r24, 0x01	; 1
     652:	80 93 9e 00 	sts	0x009E, r24
     656:	26 c0       	rjmp	.+76     	; 0x6a4 <USB_Host_WaitMS+0x76>

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     658:	80 91 9f 00 	lds	r24, 0x009F
     65c:	85 ff       	sbrs	r24, 5
     65e:	06 c0       	rjmp	.+12     	; 0x66c <USB_Host_WaitMS+0x3e>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     660:	80 91 9f 00 	lds	r24, 0x009F
     664:	8f 7d       	andi	r24, 0xDF	; 223
     666:	80 93 9f 00 	sts	0x009F, r24
			MS--;
     66a:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     66c:	80 91 1f 05 	lds	r24, 0x051F
     670:	82 30       	cpi	r24, 0x02	; 2
     672:	11 f4       	brne	.+4      	; 0x678 <USB_Host_WaitMS+0x4a>
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	18 c0       	rjmp	.+48     	; 0x6a8 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if an error has occurred on the selected pipe, false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     678:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     67c:	84 ff       	sbrs	r24, 4
     67e:	07 c0       	rjmp	.+14     	; 0x68e <USB_Host_WaitMS+0x60>

			/** Clears the master pipe error flag. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPINTX &= ~(1 << PERRI);
     680:	80 91 a6 00 	lds	r24, 0x00A6
     684:	8f 7e       	andi	r24, 0xEF	; 239
     686:	80 93 a6 00 	sts	0x00A6, r24
     68a:	92 e0       	ldi	r25, 0x02	; 2
     68c:	0d c0       	rjmp	.+26     	; 0x6a8 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     68e:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     692:	81 ff       	sbrs	r24, 1
     694:	07 c0       	rjmp	.+14     	; 0x6a4 <USB_Host_WaitMS+0x76>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     696:	80 91 a6 00 	lds	r24, 0x00A6
     69a:	8d 7f       	andi	r24, 0xFD	; 253
     69c:	80 93 a6 00 	sts	0x00A6, r24
     6a0:	93 e0       	ldi	r25, 0x03	; 3
     6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <USB_Host_WaitMS+0x7a>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     6a4:	99 23       	and	r25, r25
     6a6:	c1 f6       	brne	.-80     	; 0x658 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     6a8:	20 fd       	sbrc	r18, 0
     6aa:	05 c0       	rjmp	.+10     	; 0x6b6 <USB_Host_WaitMS+0x88>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     6ac:	80 91 9e 00 	lds	r24, 0x009E
     6b0:	8e 7f       	andi	r24, 0xFE	; 254
     6b2:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     6b6:	35 ff       	sbrs	r19, 5
     6b8:	05 c0       	rjmp	.+10     	; 0x6c4 <USB_Host_WaitMS+0x96>
	  USB_INT_Enable(USB_INT_HSOFI);
     6ba:	80 91 a0 00 	lds	r24, 0x00A0
     6be:	80 62       	ori	r24, 0x20	; 32
     6c0:	80 93 a0 00 	sts	0x00A0, r24

	return ErrorCode;
}
     6c4:	89 2f       	mov	r24, r25
     6c6:	08 95       	ret

000006c8 <USB_Host_ResetDevice>:
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     6c8:	60 91 9e 00 	lds	r22, 0x009E

static void USB_Host_ResetDevice(void)
{
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);
     6cc:	80 91 a0 00 	lds	r24, 0x00A0
     6d0:	8d 7f       	andi	r24, 0xFD	; 253
     6d2:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     6d6:	80 91 9e 00 	lds	r24, 0x009E
     6da:	82 60       	ori	r24, 0x02	; 2
     6dc:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean true if no bus reset is currently being sent, false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     6e0:	80 91 9e 00 	lds	r24, 0x009E

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     6e4:	81 fd       	sbrc	r24, 1
     6e6:	fc cf       	rjmp	.-8      	; 0x6e0 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6e8:	80 91 9e 00 	lds	r24, 0x009E
     6ec:	81 60       	ori	r24, 0x01	; 1
     6ee:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();

	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     6f2:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     6f6:	80 91 a0 00 	lds	r24, 0x00A0
     6fa:	8f 7d       	andi	r24, 0xDF	; 223
     6fc:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     700:	80 91 9f 00 	lds	r24, 0x009F
     704:	8f 7d       	andi	r24, 0xDF	; 223
     706:	80 93 9f 00 	sts	0x009F, r24
     70a:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     70c:	40 ed       	ldi	r20, 0xD0	; 208
     70e:	57 e0       	ldi	r21, 0x07	; 7
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     710:	80 91 9f 00 	lds	r24, 0x009F
     714:	85 ff       	sbrs	r24, 5
     716:	0b c0       	rjmp	.+22     	; 0x72e <USB_Host_ResetDevice+0x66>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     718:	80 91 9f 00 	lds	r24, 0x009F
     71c:	8f 7d       	andi	r24, 0xDF	; 223
     71e:	80 93 9f 00 	sts	0x009F, r24
			USB_INT_Clear(USB_INT_DDISCI);
     722:	80 91 9f 00 	lds	r24, 0x009F
     726:	8d 7f       	andi	r24, 0xFD	; 253
     728:	80 93 9f 00 	sts	0x009F, r24
     72c:	05 c0       	rjmp	.+10     	; 0x738 <USB_Host_ResetDevice+0x70>
     72e:	ca 01       	movw	r24, r20
     730:	01 97       	sbiw	r24, 0x01	; 1
     732:	f1 f7       	brne	.-4      	; 0x730 <USB_Host_ResetDevice+0x68>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     734:	21 50       	subi	r18, 0x01	; 1
     736:	61 f7       	brne	.-40     	; 0x710 <USB_Host_ResetDevice+0x48>
		}

		_delay_ms(1);
	}

	if (HSOFIEnabled)
     738:	35 ff       	sbrs	r19, 5
     73a:	05 c0       	rjmp	.+10     	; 0x746 <USB_Host_ResetDevice+0x7e>
	  USB_INT_Enable(USB_INT_HSOFI);
     73c:	80 91 a0 00 	lds	r24, 0x00A0
     740:	80 62       	ori	r24, 0x20	; 32
     742:	80 93 a0 00 	sts	0x00A0, r24

	if (BusSuspended)
     746:	60 fd       	sbrc	r22, 0
     748:	05 c0       	rjmp	.+10     	; 0x754 <USB_Host_ResetDevice+0x8c>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     74a:	80 91 9e 00 	lds	r24, 0x009E
     74e:	8e 7f       	andi	r24, 0xFE	; 254
     750:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
     754:	80 91 a0 00 	lds	r24, 0x00A0
     758:	82 60       	ori	r24, 0x02	; 2
     75a:	80 93 a0 00 	sts	0x00A0, r24
}
     75e:	08 95       	ret

00000760 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	USB_ControlRequest = (USB_Request_Header_t)
     760:	10 92 17 05 	sts	0x0517, r1
     764:	99 e0       	ldi	r25, 0x09	; 9
     766:	90 93 18 05 	sts	0x0518, r25
     76a:	80 93 19 05 	sts	0x0519, r24
     76e:	10 92 1a 05 	sts	0x051A, r1
     772:	10 92 1c 05 	sts	0x051C, r1
     776:	10 92 1b 05 	sts	0x051B, r1
     77a:	10 92 1e 05 	sts	0x051E, r1
     77e:	10 92 1d 05 	sts	0x051D, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     782:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	90 e0       	ldi	r25, 0x00	; 0
}
     78a:	a7 c3       	rjmp	.+1870   	; 0xeda <USB_Host_SendControlRequest>

0000078c <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "Host.h"

void USB_Host_ProcessNextHostState(void)
{
     78c:	ef 92       	push	r14
     78e:	0f 93       	push	r16
     790:	1f 93       	push	r17
     792:	df 93       	push	r29
     794:	cf 93       	push	r28
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
     79a:	28 97       	sbiw	r28, 0x08	; 8
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	de bf       	out	0x3e, r29	; 62
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     7a6:	80 91 1f 05 	lds	r24, 0x051F
     7aa:	86 30       	cpi	r24, 0x06	; 6
     7ac:	09 f4       	brne	.+2      	; 0x7b0 <USB_Host_ProcessNextHostState+0x24>
     7ae:	94 c0       	rjmp	.+296    	; 0x8d8 <USB_Host_ProcessNextHostState+0x14c>
     7b0:	87 30       	cpi	r24, 0x07	; 7
     7b2:	70 f4       	brcc	.+28     	; 0x7d0 <USB_Host_ProcessNextHostState+0x44>
     7b4:	83 30       	cpi	r24, 0x03	; 3
     7b6:	c1 f1       	breq	.+112    	; 0x828 <USB_Host_ProcessNextHostState+0x9c>
     7b8:	84 30       	cpi	r24, 0x04	; 4
     7ba:	20 f4       	brcc	.+8      	; 0x7c4 <USB_Host_ProcessNextHostState+0x38>
     7bc:	81 30       	cpi	r24, 0x01	; 1
     7be:	09 f0       	breq	.+2      	; 0x7c2 <USB_Host_ProcessNextHostState+0x36>
     7c0:	07 c1       	rjmp	.+526    	; 0x9d0 <USB_Host_ProcessNextHostState+0x244>
     7c2:	13 c0       	rjmp	.+38     	; 0x7ea <USB_Host_ProcessNextHostState+0x5e>
     7c4:	84 30       	cpi	r24, 0x04	; 4
     7c6:	c1 f1       	breq	.+112    	; 0x838 <USB_Host_ProcessNextHostState+0xac>
     7c8:	85 30       	cpi	r24, 0x05	; 5
     7ca:	09 f0       	breq	.+2      	; 0x7ce <USB_Host_ProcessNextHostState+0x42>
     7cc:	01 c1       	rjmp	.+514    	; 0x9d0 <USB_Host_ProcessNextHostState+0x244>
     7ce:	5b c0       	rjmp	.+182    	; 0x886 <USB_Host_ProcessNextHostState+0xfa>
     7d0:	88 30       	cpi	r24, 0x08	; 8
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <USB_Host_ProcessNextHostState+0x4a>
     7d4:	9b c0       	rjmp	.+310    	; 0x90c <USB_Host_ProcessNextHostState+0x180>
     7d6:	88 30       	cpi	r24, 0x08	; 8
     7d8:	08 f4       	brcc	.+2      	; 0x7dc <USB_Host_ProcessNextHostState+0x50>
     7da:	8a c0       	rjmp	.+276    	; 0x8f0 <USB_Host_ProcessNextHostState+0x164>
     7dc:	89 30       	cpi	r24, 0x09	; 9
     7de:	09 f4       	brne	.+2      	; 0x7e2 <USB_Host_ProcessNextHostState+0x56>
     7e0:	b4 c0       	rjmp	.+360    	; 0x94a <USB_Host_ProcessNextHostState+0x1be>
     7e2:	8a 30       	cpi	r24, 0x0A	; 10
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <USB_Host_ProcessNextHostState+0x5c>
     7e6:	f4 c0       	rjmp	.+488    	; 0x9d0 <USB_Host_ProcessNextHostState+0x244>
     7e8:	d9 c0       	rjmp	.+434    	; 0x99c <USB_Host_ProcessNextHostState+0x210>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     7ea:	00 91 3b 01 	lds	r16, 0x013B
     7ee:	10 91 3c 01 	lds	r17, 0x013C
     7f2:	01 15       	cp	r16, r1
     7f4:	11 05       	cpc	r17, r1
     7f6:	09 f4       	brne	.+2      	; 0x7fa <USB_Host_ProcessNextHostState+0x6e>
     7f8:	eb c0       	rjmp	.+470    	; 0x9d0 <USB_Host_ProcessNextHostState+0x244>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	18 df       	rcall	.-464    	; 0x62e <USB_Host_WaitMS>
     7fe:	68 2f       	mov	r22, r24
     800:	88 23       	and	r24, r24
     802:	31 f0       	breq	.+12     	; 0x810 <USB_Host_ProcessNextHostState+0x84>
				{
					USB_HostState = PostWaitState;
     804:	80 91 3a 01 	lds	r24, 0x013A
     808:	80 93 1f 05 	sts	0x051F, r24
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	dc c0       	rjmp	.+440    	; 0x9c8 <USB_Host_ProcessNextHostState+0x23c>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     810:	c8 01       	movw	r24, r16
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	90 93 3c 01 	sts	0x013C, r25
     818:	80 93 3b 01 	sts	0x013B, r24
     81c:	89 2b       	or	r24, r25
     81e:	09 f0       	breq	.+2      	; 0x822 <USB_Host_ProcessNextHostState+0x96>
     820:	d7 c0       	rjmp	.+430    	; 0x9d0 <USB_Host_ProcessNextHostState+0x244>
				  USB_HostState = PostWaitState;
     822:	80 91 3a 01 	lds	r24, 0x013A
     826:	bf c0       	rjmp	.+382    	; 0x9a6 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     828:	88 ee       	ldi	r24, 0xE8	; 232
     82a:	93 e0       	ldi	r25, 0x03	; 3
     82c:	90 93 3c 01 	sts	0x013C, r25
     830:	80 93 3b 01 	sts	0x013B, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     834:	84 e0       	ldi	r24, 0x04	; 4
     836:	b7 c0       	rjmp	.+366    	; 0x9a6 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     838:	80 91 3b 01 	lds	r24, 0x013B
     83c:	90 91 3c 01 	lds	r25, 0x013C
     840:	01 97       	sbiw	r24, 0x01	; 1
     842:	90 93 3c 01 	sts	0x013C, r25
     846:	80 93 3b 01 	sts	0x013B, r24
     84a:	01 96       	adiw	r24, 0x01	; 1
     84c:	29 f0       	breq	.+10     	; 0x858 <USB_Host_ProcessNextHostState+0xcc>
     84e:	80 ed       	ldi	r24, 0xD0	; 208
     850:	97 e0       	ldi	r25, 0x07	; 7
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	f1 f7       	brne	.-4      	; 0x852 <USB_Host_ProcessNextHostState+0xc6>
     856:	bc c0       	rjmp	.+376    	; 0x9d0 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     858:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     85a:	80 91 d8 00 	lds	r24, 0x00D8
     85e:	80 61       	ori	r24, 0x10	; 16
     860:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     864:	80 91 dd 00 	lds	r24, 0x00DD
     868:	8b 7f       	andi	r24, 0xFB	; 251
     86a:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     86e:	80 91 d7 00 	lds	r24, 0x00D7
     872:	80 61       	ori	r24, 0x10	; 16
     874:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     878:	80 91 dd 00 	lds	r24, 0x00DD
     87c:	82 60       	ori	r24, 0x02	; 2
     87e:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     882:	85 e0       	ldi	r24, 0x05	; 5
     884:	90 c0       	rjmp	.+288    	; 0x9a6 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     886:	80 91 9f 00 	lds	r24, 0x009F
     88a:	80 ff       	sbrs	r24, 0
     88c:	a1 c0       	rjmp	.+322    	; 0x9d0 <USB_Host_ProcessNextHostState+0x244>
			{
				USB_INT_Clear(USB_INT_DCONNI);
     88e:	80 91 9f 00 	lds	r24, 0x009F
     892:	8e 7f       	andi	r24, 0xFE	; 254
     894:	80 93 9f 00 	sts	0x009F, r24
				USB_INT_Clear(USB_INT_DDISCI);
     898:	80 91 9f 00 	lds	r24, 0x009F
     89c:	8d 7f       	andi	r24, 0xFD	; 253
     89e:	80 93 9f 00 	sts	0x009F, r24

				USB_INT_Clear(USB_INT_VBERRI);
     8a2:	80 91 df 00 	lds	r24, 0x00DF
     8a6:	8d 7f       	andi	r24, 0xFD	; 253
     8a8:	80 93 df 00 	sts	0x00DF, r24
				USB_INT_Enable(USB_INT_VBERRI);
     8ac:	80 91 de 00 	lds	r24, 0x00DE
     8b0:	82 60       	ori	r24, 0x02	; 2
     8b2:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     8b6:	80 91 9e 00 	lds	r24, 0x009E
     8ba:	81 60       	ori	r24, 0x01	; 1
     8bc:	80 93 9e 00 	sts	0x009E, r24

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     8c0:	c9 d0       	rcall	.+402    	; 0xa54 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	80 93 1f 05 	sts	0x051F, r24
     8c8:	84 e6       	ldi	r24, 0x64	; 100
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	90 93 3c 01 	sts	0x013C, r25
     8d0:	80 93 3b 01 	sts	0x013B, r24
     8d4:	86 e0       	ldi	r24, 0x06	; 6
     8d6:	5f c0       	rjmp	.+190    	; 0x996 <USB_Host_ProcessNextHostState+0x20a>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     8d8:	f7 de       	rcall	.-530    	; 0x6c8 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	80 93 1f 05 	sts	0x051F, r24
     8e0:	88 ec       	ldi	r24, 0xC8	; 200
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	90 93 3c 01 	sts	0x013C, r25
     8e8:	80 93 3b 01 	sts	0x013B, r24
     8ec:	87 e0       	ldi	r24, 0x07	; 7
     8ee:	53 c0       	rjmp	.+166    	; 0x996 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	00 e4       	ldi	r16, 0x40	; 64
     8fa:	10 e0       	ldi	r17, 0x00	; 0
     8fc:	ee 24       	eor	r14, r14
     8fe:	74 d0       	rcall	.+232    	; 0x9e8 <Pipe_ConfigurePipe>
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     900:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     904:	87 ff       	sbrs	r24, 7
     906:	5e c0       	rjmp	.+188    	; 0x9c4 <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	4d c0       	rjmp	.+154    	; 0x9a6 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     90c:	a7 e1       	ldi	r26, 0x17	; 23
     90e:	b5 e0       	ldi	r27, 0x05	; 5
     910:	e3 e2       	ldi	r30, 0x23	; 35
     912:	f1 e0       	ldi	r31, 0x01	; 1
     914:	88 e0       	ldi	r24, 0x08	; 8
     916:	01 90       	ld	r0, Z+
     918:	0d 92       	st	X+, r0
     91a:	81 50       	subi	r24, 0x01	; 1
     91c:	e1 f7       	brne	.-8      	; 0x916 <USB_Host_ProcessNextHostState+0x18a>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	db d2       	rcall	.+1462   	; 0xeda <USB_Host_SendControlRequest>
     924:	68 2f       	mov	r22, r24
     926:	88 23       	and	r24, r24
     928:	09 f0       	breq	.+2      	; 0x92c <USB_Host_ProcessNextHostState+0x1a0>
     92a:	4a c0       	rjmp	.+148    	; 0x9c0 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     92c:	88 85       	ldd	r24, Y+8	; 0x08
     92e:	80 93 2b 01 	sts	0x012B, r24

			USB_Host_ResetDevice();
     932:	ca de       	rcall	.-620    	; 0x6c8 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	80 93 1f 05 	sts	0x051F, r24
     93a:	88 ec       	ldi	r24, 0xC8	; 200
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	90 93 3c 01 	sts	0x013C, r25
     942:	80 93 3b 01 	sts	0x013B, r24
     946:	89 e0       	ldi	r24, 0x09	; 9
     948:	26 c0       	rjmp	.+76     	; 0x996 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     94a:	00 91 2b 01 	lds	r16, 0x012B
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	40 e0       	ldi	r20, 0x00	; 0
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	10 e0       	ldi	r17, 0x00	; 0
     958:	ee 24       	eor	r14, r14
     95a:	46 d0       	rcall	.+140    	; 0x9e8 <Pipe_ConfigurePipe>
     95c:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     960:	87 ff       	sbrs	r24, 7
     962:	30 c0       	rjmp	.+96     	; 0x9c4 <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     964:	a7 e1       	ldi	r26, 0x17	; 23
     966:	b5 e0       	ldi	r27, 0x05	; 5
     968:	eb e1       	ldi	r30, 0x1B	; 27
     96a:	f1 e0       	ldi	r31, 0x01	; 1
     96c:	88 e0       	ldi	r24, 0x08	; 8
     96e:	01 90       	ld	r0, Z+
     970:	0d 92       	st	X+, r0
     972:	81 50       	subi	r24, 0x01	; 1
     974:	e1 f7       	brne	.-8      	; 0x96e <USB_Host_ProcessNextHostState+0x1e2>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	af d2       	rcall	.+1374   	; 0xeda <USB_Host_SendControlRequest>
     97c:	68 2f       	mov	r22, r24
     97e:	88 23       	and	r24, r24
     980:	f9 f4       	brne	.+62     	; 0x9c0 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	80 93 1f 05 	sts	0x051F, r24
     988:	84 e6       	ldi	r24, 0x64	; 100
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	90 93 3c 01 	sts	0x013C, r25
     990:	80 93 3b 01 	sts	0x013B, r24
     994:	8a e0       	ldi	r24, 0x0A	; 10
     996:	80 93 3a 01 	sts	0x013A, r24
     99a:	1a c0       	rjmp	.+52     	; 0x9d0 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			EVENT_USB_Host_DeviceEnumerationComplete();
     9a2:	67 dc       	rcall	.-1842   	; 0x272 <EVENT_USB_Host_DeviceEnumerationComplete>
			USB_HostState = HOST_STATE_Addressed;
     9a4:	8b e0       	ldi	r24, 0x0B	; 11
     9a6:	80 93 1f 05 	sts	0x051F, r24
     9aa:	12 c0       	rjmp	.+36     	; 0x9d0 <USB_Host_ProcessNextHostState+0x244>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     9ac:	89 2f       	mov	r24, r25
     9ae:	8a dc       	rcall	.-1772   	; 0x2c4 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     9b0:	80 91 dd 00 	lds	r24, 0x00DD
     9b4:	81 60       	ori	r24, 0x01	; 1
     9b6:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     9ba:	cd dc       	rcall	.-1638   	; 0x356 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     9bc:	ba d0       	rcall	.+372    	; 0xb32 <USB_ResetInterface>
     9be:	08 c0       	rjmp	.+16     	; 0x9d0 <USB_Host_ProcessNextHostState+0x244>
	}
}
     9c0:	93 e0       	ldi	r25, 0x03	; 3
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <USB_Host_ProcessNextHostState+0x23c>
     9c4:	94 e0       	ldi	r25, 0x04	; 4
     9c6:	60 e0       	ldi	r22, 0x00	; 0
			EVENT_USB_Host_DeviceEnumerationComplete();
			USB_HostState = HOST_STATE_Addressed;
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     9c8:	80 91 1f 05 	lds	r24, 0x051F
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	71 f7       	brne	.-36     	; 0x9ac <USB_Host_ProcessNextHostState+0x220>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     9d0:	28 96       	adiw	r28, 0x08	; 8
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	cf 91       	pop	r28
     9de:	df 91       	pop	r29
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ef 90       	pop	r14
     9e6:	08 95       	ret

000009e8 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     9e8:	ef 92       	push	r14
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	9e 2d       	mov	r25, r14
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9f0:	80 93 a7 00 	sts	0x00A7, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     9f4:	80 91 a9 00 	lds	r24, 0x00A9
     9f8:	81 60       	ori	r24, 0x01	; 1
     9fa:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SelectPipe(Number);
	Pipe_EnablePipe();

	UPCFG1X = 0;
     9fe:	10 92 ab 00 	sts	0x00AB, r1

	UPCFG0X = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     a02:	62 95       	swap	r22
     a04:	66 0f       	add	r22, r22
     a06:	66 0f       	add	r22, r22
     a08:	60 7c       	andi	r22, 0xC0	; 192
     a0a:	64 2b       	or	r22, r20
     a0c:	2f 70       	andi	r18, 0x0F	; 15
     a0e:	62 2b       	or	r22, r18
     a10:	60 93 aa 00 	sts	0x00AA, r22
     a14:	28 e0       	ldi	r18, 0x08	; 8
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	03 c0       	rjmp	.+6      	; 0xa22 <Pipe_ConfigurePipe+0x3a>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     a1c:	8f 5f       	subi	r24, 0xFF	; 255
					CheckBytes <<= 1;
     a1e:	22 0f       	add	r18, r18
     a20:	33 1f       	adc	r19, r19
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     a22:	20 17       	cp	r18, r16
     a24:	31 07       	cpc	r19, r17
     a26:	10 f4       	brcc	.+4      	; 0xa2c <Pipe_ConfigurePipe+0x44>
     a28:	85 30       	cpi	r24, 0x05	; 5
     a2a:	c1 f7       	brne	.-16     	; 0xa1c <Pipe_ConfigurePipe+0x34>
	UPCFG1X = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     a2c:	92 60       	ori	r25, 0x02	; 2
     a2e:	82 95       	swap	r24
     a30:	80 7f       	andi	r24, 0xF0	; 240
     a32:	89 2b       	or	r24, r25
     a34:	80 93 ab 00 	sts	0x00AB, r24

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     a38:	80 91 a9 00 	lds	r24, 0x00A9
     a3c:	80 62       	ori	r24, 0x20	; 32
     a3e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a42:	80 91 ac 00 	lds	r24, 0x00AC

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
}
     a46:	88 1f       	adc	r24, r24
     a48:	88 27       	eor	r24, r24
     a4a:	88 1f       	adc	r24, r24
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	ef 90       	pop	r14
     a52:	08 95       	ret

00000a54 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     a54:	10 92 f8 00 	sts	0x00F8, r1
     a58:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a5a:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     a5e:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     a62:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     a66:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a6a:	80 91 a9 00 	lds	r24, 0x00A9
     a6e:	8e 7f       	andi	r24, 0xFE	; 254
     a70:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a74:	9f 5f       	subi	r25, 0xFF	; 255
     a76:	97 30       	cpi	r25, 0x07	; 7
     a78:	81 f7       	brne	.-32     	; 0xa5a <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     a7a:	08 95       	ret

00000a7c <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     a7c:	e8 2f       	mov	r30, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     a7e:	70 91 a7 00 	lds	r23, 0x00A7
     a82:	60 e0       	ldi	r22, 0x00	; 0
		bool    PipeTokenCorrect = true;

		if (PipeToken != PIPE_TOKEN_SETUP)
		  PipeTokenCorrect = (PipeToken == ((EndpointAddress & PIPE_EPDIR_MASK) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT));

		if (PipeTokenCorrect && (Pipe_BoundEndpointNumber() == (EndpointAddress & PIPE_EPNUM_MASK)))
     a84:	48 2f       	mov	r20, r24
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	4f 70       	andi	r20, 0x0F	; 15
     a8a:	50 70       	andi	r21, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a8c:	60 93 a7 00 	sts	0x00A7, r22
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a90:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     a94:	87 ff       	sbrs	r24, 7
     a96:	18 c0       	rjmp	.+48     	; 0xac8 <Pipe_IsEndpointBound+0x4c>
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a98:	80 91 aa 00 	lds	r24, 0x00AA
     a9c:	80 73       	andi	r24, 0x30	; 48
		  continue;

		uint8_t PipeToken        = Pipe_GetPipeToken();
		bool    PipeTokenCorrect = true;

		if (PipeToken != PIPE_TOKEN_SETUP)
     a9e:	59 f0       	breq	.+22     	; 0xab6 <Pipe_IsEndpointBound+0x3a>
		  PipeTokenCorrect = (PipeToken == ((EndpointAddress & PIPE_EPDIR_MASK) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT));
     aa0:	e7 fd       	sbrc	r30, 7
     aa2:	03 c0       	rjmp	.+6      	; 0xaaa <Pipe_IsEndpointBound+0x2e>
     aa4:	20 e2       	ldi	r18, 0x20	; 32
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	02 c0       	rjmp	.+4      	; 0xaae <Pipe_IsEndpointBound+0x32>
     aaa:	20 e1       	ldi	r18, 0x10	; 16
     aac:	30 e0       	ldi	r19, 0x00	; 0

		if (PipeTokenCorrect && (Pipe_BoundEndpointNumber() == (EndpointAddress & PIPE_EPNUM_MASK)))
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	82 17       	cp	r24, r18
     ab2:	93 07       	cpc	r25, r19
     ab4:	49 f4       	brne	.+18     	; 0xac8 <Pipe_IsEndpointBound+0x4c>
			 *  \return Endpoint number the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_BoundEndpointNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BoundEndpointNumber(void)
			{
				return ((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK);
     ab6:	80 91 aa 00 	lds	r24, 0x00AA
     aba:	8f 70       	andi	r24, 0x0F	; 15
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	84 17       	cp	r24, r20
     ac0:	95 07       	cpc	r25, r21
     ac2:	11 f4       	brne	.+4      	; 0xac8 <Pipe_IsEndpointBound+0x4c>
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     ac8:	6f 5f       	subi	r22, 0xFF	; 255
     aca:	67 30       	cpi	r22, 0x07	; 7
     acc:	f9 f6       	brne	.-66     	; 0xa8c <Pipe_IsEndpointBound+0x10>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     ace:	77 70       	andi	r23, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     ad0:	70 93 a7 00 	sts	0x00A7, r23
     ad4:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     ad6:	08 95       	ret

00000ad8 <Pipe_WaitUntilReady>:
			/** Returns the current USB frame number, when in host mode. Every millisecond the USB bus is active (i.e. not suspended)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     ad8:	40 91 a2 00 	lds	r20, 0x00A2
     adc:	50 91 a3 00 	lds	r21, 0x00A3
     ae0:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     ae2:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     ae6:	80 73       	andi	r24, 0x30	; 48
     ae8:	80 31       	cpi	r24, 0x10	; 16
     aea:	29 f4       	brne	.+10     	; 0xaf6 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     aec:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     af0:	80 ff       	sbrs	r24, 0
     af2:	05 c0       	rjmp	.+10     	; 0xafe <Pipe_WaitUntilReady+0x26>
     af4:	1c c0       	rjmp	.+56     	; 0xb2e <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     af6:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     afa:	82 fd       	sbrc	r24, 2
     afc:	18 c0       	rjmp	.+48     	; 0xb2e <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     afe:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b02:	81 ff       	sbrs	r24, 1
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <Pipe_WaitUntilReady+0x32>
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b0a:	80 91 1f 05 	lds	r24, 0x051F
     b0e:	82 30       	cpi	r24, 0x02	; 2
     b10:	79 f0       	breq	.+30     	; 0xb30 <Pipe_WaitUntilReady+0x58>
     b12:	80 91 a2 00 	lds	r24, 0x00A2
     b16:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b1a:	84 17       	cp	r24, r20
     b1c:	95 07       	cpc	r25, r21
     b1e:	09 f3       	breq	.-62     	; 0xae2 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b20:	22 23       	and	r18, r18
     b22:	11 f4       	brne	.+4      	; 0xb28 <Pipe_WaitUntilReady+0x50>
     b24:	83 e0       	ldi	r24, 0x03	; 3
     b26:	08 95       	ret
     b28:	21 50       	subi	r18, 0x01	; 1
     b2a:	ac 01       	movw	r20, r24
     b2c:	da cf       	rjmp	.-76     	; 0xae2 <Pipe_WaitUntilReady+0xa>
     b2e:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     b30:	08 95       	ret

00000b32 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     b32:	6e d0       	rcall	.+220    	; 0xc10 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b34:	75 d0       	rcall	.+234    	; 0xc20 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     b36:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
     b3a:	98 2f       	mov	r25, r24
     b3c:	9f 77       	andi	r25, 0x7F	; 127
     b3e:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
     b42:	80 68       	ori	r24, 0x80	; 128
     b44:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     b48:	8c e0       	ldi	r24, 0x0C	; 12
     b4a:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     b4c:	89 b5       	in	r24, 0x29	; 41
     b4e:	82 60       	ori	r24, 0x02	; 2
     b50:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     b52:	09 b4       	in	r0, 0x29	; 41
     b54:	00 fe       	sbrs	r0, 0
     b56:	fd cf       	rjmp	.-6      	; 0xb52 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     b58:	80 91 d8 00 	lds	r24, 0x00D8
     b5c:	8f 7d       	andi	r24, 0xDF	; 223
     b5e:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     b62:	80 91 d7 00 	lds	r24, 0x00D7
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	80 93 d7 00 	sts	0x00D7, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState       = HOST_STATE_Unattached;
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	80 93 1f 05 	sts	0x051F, r24
	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     b72:	80 e4       	ldi	r24, 0x40	; 64
     b74:	80 93 2b 01 	sts	0x012B, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     b78:	80 91 d8 00 	lds	r24, 0x00D8
     b7c:	80 64       	ori	r24, 0x40	; 64
     b7e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b82:	80 91 dd 00 	lds	r24, 0x00DD
     b86:	81 60       	ori	r24, 0x01	; 1
     b88:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     b8c:	80 91 dd 00 	lds	r24, 0x00DD
     b90:	84 60       	ori	r24, 0x04	; 4
     b92:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     b96:	80 91 d7 00 	lds	r24, 0x00D7
     b9a:	8f 7e       	andi	r24, 0xEF	; 239
     b9c:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     ba0:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     ba2:	77 9a       	sbi	0x0e, 7	; 14

	USB_Host_VBUS_Auto_Off();
	USB_Host_VBUS_Manual_Enable();
	USB_Host_VBUS_Manual_On();

	USB_INT_Enable(USB_INT_SRPI);
     ba4:	80 91 de 00 	lds	r24, 0x00DE
     ba8:	81 60       	ori	r24, 0x01	; 1
     baa:	80 93 de 00 	sts	0x00DE, r24
	USB_INT_Enable(USB_INT_BCERRI);
     bae:	80 91 de 00 	lds	r24, 0x00DE
     bb2:	84 60       	ori	r24, 0x04	; 4
     bb4:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     bb8:	80 91 e0 00 	lds	r24, 0x00E0
     bbc:	8e 7f       	andi	r24, 0xFE	; 254
     bbe:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     bc2:	80 91 d8 00 	lds	r24, 0x00D8
     bc6:	80 61       	ori	r24, 0x10	; 16
     bc8:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     bcc:	08 95       	ret

00000bce <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     bce:	e7 ed       	ldi	r30, 0xD7	; 215
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	81 60       	ori	r24, 0x01	; 1
     bd6:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	80 93 16 05 	sts	0x0516, r24

	USB_ResetInterface();
}
     bde:	a9 cf       	rjmp	.-174    	; 0xb32 <USB_ResetInterface>

00000be0 <USB_ShutDown>:

void USB_ShutDown(void)
{
	USB_INT_DisableAllInterrupts();
     be0:	17 d0       	rcall	.+46     	; 0xc10 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     be2:	1e d0       	rcall	.+60     	; 0xc20 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     be4:	e0 ee       	ldi	r30, 0xE0	; 224
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	81 60       	ori	r24, 0x01	; 1
     bec:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     bee:	a8 ed       	ldi	r26, 0xD8	; 216
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	8c 91       	ld	r24, X
     bf4:	8f 77       	andi	r24, 0x7F	; 127
     bf6:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     bf8:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     bfa:	e7 ed       	ldi	r30, 0xD7	; 215
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	8e 7f       	andi	r24, 0xFE	; 254
     c02:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     c04:	8c 91       	ld	r24, X
     c06:	8f 7e       	andi	r24, 0xEF	; 239
     c08:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     c0a:	10 92 16 05 	sts	0x0516, r1
}
     c0e:	08 95       	ret

00000c10 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     c10:	e8 ed       	ldi	r30, 0xD8	; 216
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	8c 7f       	andi	r24, 0xFC	; 252
     c18:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     c1a:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     c1e:	08 95       	ret

00000c20 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
     c20:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
     c24:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
	#endif
}
     c28:	08 95       	ret

00000c2a <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c2a:	1f 92       	push	r1
     c2c:	0f 92       	push	r0
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	0f 92       	push	r0
     c32:	0b b6       	in	r0, 0x3b	; 59
     c34:	0f 92       	push	r0
     c36:	11 24       	eor	r1, r1
     c38:	2f 93       	push	r18
     c3a:	3f 93       	push	r19
     c3c:	4f 93       	push	r20
     c3e:	5f 93       	push	r21
     c40:	6f 93       	push	r22
     c42:	7f 93       	push	r23
     c44:	8f 93       	push	r24
     c46:	9f 93       	push	r25
     c48:	af 93       	push	r26
     c4a:	bf 93       	push	r27
     c4c:	ef 93       	push	r30
     c4e:	ff 93       	push	r31
	}
	#endif
	#endif

	#if defined(USB_CAN_BE_HOST)
	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     c50:	80 91 9f 00 	lds	r24, 0x009F
     c54:	81 ff       	sbrs	r24, 1
     c56:	15 c0       	rjmp	.+42     	; 0xc82 <__vector_10+0x58>
     c58:	80 91 a0 00 	lds	r24, 0x00A0
     c5c:	81 ff       	sbrs	r24, 1
     c5e:	11 c0       	rjmp	.+34     	; 0xc82 <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_DDISCI);
     c60:	80 91 9f 00 	lds	r24, 0x009F
     c64:	8d 7f       	andi	r24, 0xFD	; 253
     c66:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Clear(USB_INT_DCONNI);
     c6a:	80 91 9f 00 	lds	r24, 0x009F
     c6e:	8e 7f       	andi	r24, 0xFE	; 254
     c70:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Disable(USB_INT_DDISCI);
     c74:	80 91 a0 00 	lds	r24, 0x00A0
     c78:	8d 7f       	andi	r24, 0xFD	; 253
     c7a:	80 93 a0 00 	sts	0x00A0, r24

		EVENT_USB_Host_DeviceUnattached();
     c7e:	6b db       	rcall	.-2346   	; 0x356 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c80:	58 df       	rcall	.-336    	; 0xb32 <USB_ResetInterface>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     c82:	80 91 df 00 	lds	r24, 0x00DF
     c86:	81 ff       	sbrs	r24, 1
     c88:	15 c0       	rjmp	.+42     	; 0xcb4 <__vector_10+0x8a>
     c8a:	80 91 de 00 	lds	r24, 0x00DE
     c8e:	81 ff       	sbrs	r24, 1
     c90:	11 c0       	rjmp	.+34     	; 0xcb4 <__vector_10+0x8a>
	{
		USB_INT_Clear(USB_INT_VBERRI);
     c92:	80 91 df 00 	lds	r24, 0x00DF
     c96:	8d 7f       	andi	r24, 0xFD	; 253
     c98:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     c9c:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c9e:	80 91 dd 00 	lds	r24, 0x00DD
     ca2:	81 60       	ori	r24, 0x01	; 1
     ca4:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	38 db       	rcall	.-2448   	; 0x31c <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     cac:	54 db       	rcall	.-2392   	; 0x356 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     cae:	82 e0       	ldi	r24, 0x02	; 2
     cb0:	80 93 1f 05 	sts	0x051F, r24
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     cb4:	80 91 df 00 	lds	r24, 0x00DF
     cb8:	80 ff       	sbrs	r24, 0
     cba:	17 c0       	rjmp	.+46     	; 0xcea <__vector_10+0xc0>
     cbc:	80 91 de 00 	lds	r24, 0x00DE
     cc0:	80 ff       	sbrs	r24, 0
     cc2:	13 c0       	rjmp	.+38     	; 0xcea <__vector_10+0xc0>
	{
		USB_INT_Clear(USB_INT_SRPI);
     cc4:	80 91 df 00 	lds	r24, 0x00DF
     cc8:	8e 7f       	andi	r24, 0xFE	; 254
     cca:	80 93 df 00 	sts	0x00DF, r24
		USB_INT_Disable(USB_INT_SRPI);
     cce:	80 91 de 00 	lds	r24, 0x00DE
     cd2:	8e 7f       	andi	r24, 0xFE	; 254
     cd4:	80 93 de 00 	sts	0x00DE, r24

		EVENT_USB_Host_DeviceAttached();
     cd8:	47 db       	rcall	.-2418   	; 0x368 <EVENT_USB_Host_DeviceAttached>

		USB_INT_Enable(USB_INT_DDISCI);
     cda:	80 91 a0 00 	lds	r24, 0x00A0
     cde:	82 60       	ori	r24, 0x02	; 2
     ce0:	80 93 a0 00 	sts	0x00A0, r24

		USB_HostState = HOST_STATE_Powered;
     ce4:	83 e0       	ldi	r24, 0x03	; 3
     ce6:	80 93 1f 05 	sts	0x051F, r24
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     cea:	80 91 df 00 	lds	r24, 0x00DF
     cee:	82 ff       	sbrs	r24, 2
     cf0:	0e c0       	rjmp	.+28     	; 0xd0e <__vector_10+0xe4>
     cf2:	80 91 de 00 	lds	r24, 0x00DE
     cf6:	82 ff       	sbrs	r24, 2
     cf8:	0a c0       	rjmp	.+20     	; 0xd0e <__vector_10+0xe4>
	{
		USB_INT_Clear(USB_INT_BCERRI);
     cfa:	80 91 df 00 	lds	r24, 0x00DF
     cfe:	8b 7f       	andi	r24, 0xFB	; 251
     d00:	80 93 df 00 	sts	0x00DF, r24

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     d04:	82 e0       	ldi	r24, 0x02	; 2
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	dd da       	rcall	.-2630   	; 0x2c4 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     d0a:	25 db       	rcall	.-2486   	; 0x356 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d0c:	12 df       	rcall	.-476    	; 0xb32 <USB_ResetInterface>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     d0e:	80 91 9f 00 	lds	r24, 0x009F
     d12:	85 ff       	sbrs	r24, 5
     d14:	0a c0       	rjmp	.+20     	; 0xd2a <__vector_10+0x100>
     d16:	80 91 a0 00 	lds	r24, 0x00A0
     d1a:	85 ff       	sbrs	r24, 5
     d1c:	06 c0       	rjmp	.+12     	; 0xd2a <__vector_10+0x100>
	{
		USB_INT_Clear(USB_INT_HSOFI);
     d1e:	80 91 9f 00 	lds	r24, 0x009F
     d22:	8f 7d       	andi	r24, 0xDF	; 223
     d24:	80 93 9f 00 	sts	0x009F, r24

		EVENT_USB_Host_StartOfFrame();
     d28:	ae d0       	rcall	.+348    	; 0xe86 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d2a:	ff 91       	pop	r31
     d2c:	ef 91       	pop	r30
     d2e:	bf 91       	pop	r27
     d30:	af 91       	pop	r26
     d32:	9f 91       	pop	r25
     d34:	8f 91       	pop	r24
     d36:	7f 91       	pop	r23
     d38:	6f 91       	pop	r22
     d3a:	5f 91       	pop	r21
     d3c:	4f 91       	pop	r20
     d3e:	3f 91       	pop	r19
     d40:	2f 91       	pop	r18
     d42:	0f 90       	pop	r0
     d44:	0b be       	out	0x3b, r0	; 59
     d46:	0f 90       	pop	r0
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	0f 90       	pop	r0
     d4c:	1f 90       	pop	r1
     d4e:	18 95       	reti

00000d50 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
     d50:	af 92       	push	r10
     d52:	bf 92       	push	r11
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	7c 01       	movw	r14, r24
     d66:	8b 01       	movw	r16, r22
     d68:	5a 01       	movw	r10, r20
     d6a:	21 c0       	rjmp	.+66     	; 0xdae <USB_GetNextDescriptorComp+0x5e>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     d6c:	f8 01       	movw	r30, r16
     d6e:	c0 81       	ld	r28, Z
     d70:	d1 81       	ldd	r29, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     d72:	88 81       	ld	r24, Y
     d74:	90 e0       	ldi	r25, 0x00	; 0

				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
     d76:	9e 01       	movw	r18, r28
     d78:	28 0f       	add	r18, r24
     d7a:	39 1f       	adc	r19, r25
     d7c:	31 83       	std	Z+1, r19	; 0x01
     d7e:	20 83       	st	Z, r18
				*BytesRem      -= CurrDescriptorSize;
     d80:	f7 01       	movw	r30, r14
     d82:	20 81       	ld	r18, Z
     d84:	31 81       	ldd	r19, Z+1	; 0x01
     d86:	28 1b       	sub	r18, r24
     d88:	39 0b       	sbc	r19, r25
     d8a:	31 83       	std	Z+1, r19	; 0x01
     d8c:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     d8e:	f8 01       	movw	r30, r16
     d90:	80 81       	ld	r24, Z
     d92:	91 81       	ldd	r25, Z+1	; 0x01
     d94:	f5 01       	movw	r30, r10
     d96:	09 95       	icall
     d98:	82 30       	cpi	r24, 0x02	; 2
     d9a:	49 f0       	breq	.+18     	; 0xdae <USB_GetNextDescriptorComp+0x5e>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     d9c:	81 30       	cpi	r24, 0x01	; 1
     d9e:	71 f4       	brne	.+28     	; 0xdbc <USB_GetNextDescriptorComp+0x6c>
			{
				*CurrConfigLoc = PrevDescLoc;
     da0:	f8 01       	movw	r30, r16
     da2:	c0 83       	st	Z, r28
     da4:	d1 83       	std	Z+1, r29	; 0x01
				*BytesRem      = PrevBytesRem;
     da6:	f7 01       	movw	r30, r14
     da8:	d1 82       	std	Z+1, r13	; 0x01
     daa:	c0 82       	st	Z, r12
     dac:	07 c0       	rjmp	.+14     	; 0xdbc <USB_GetNextDescriptorComp+0x6c>

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     dae:	f7 01       	movw	r30, r14
     db0:	c0 80       	ld	r12, Z
     db2:	d1 80       	ldd	r13, Z+1	; 0x01
     db4:	c1 14       	cp	r12, r1
     db6:	d1 04       	cpc	r13, r1
     db8:	c9 f6       	brne	.-78     	; 0xd6c <USB_GetNextDescriptorComp+0x1c>
     dba:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	ff 90       	pop	r15
     dc6:	ef 90       	pop	r14
     dc8:	df 90       	pop	r13
     dca:	cf 90       	pop	r12
     dcc:	bf 90       	pop	r11
     dce:	af 90       	pop	r10
     dd0:	08 95       	ret

00000dd2 <USB_Host_GetDeviceConfigDescriptor>:
#include "ConfigDescriptor.h"

#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(uint8_t ConfigNumber, uint16_t* const ConfigSizePtr,
                                           void* BufferPtr, uint16_t BufferSize)
{
     dd2:	cf 92       	push	r12
     dd4:	df 92       	push	r13
     dd6:	ef 92       	push	r14
     dd8:	ff 92       	push	r15
     dda:	0f 93       	push	r16
     ddc:	1f 93       	push	r17
     dde:	df 93       	push	r29
     de0:	cf 93       	push	r28
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	29 97       	sbiw	r28, 0x09	; 9
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	6b 01       	movw	r12, r22
     df4:	8a 01       	movw	r16, r20
     df6:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     df8:	90 e8       	ldi	r25, 0x80	; 128
     dfa:	90 93 17 05 	sts	0x0517, r25
     dfe:	96 e0       	ldi	r25, 0x06	; 6
     e00:	90 93 18 05 	sts	0x0518, r25
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	01 97       	sbiw	r24, 0x01	; 1
     e08:	92 60       	ori	r25, 0x02	; 2
     e0a:	90 93 1a 05 	sts	0x051A, r25
     e0e:	80 93 19 05 	sts	0x0519, r24
     e12:	10 92 1c 05 	sts	0x051C, r1
     e16:	10 92 1b 05 	sts	0x051B, r1
     e1a:	89 e0       	ldi	r24, 0x09	; 9
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	90 93 1e 05 	sts	0x051E, r25
     e22:	80 93 1d 05 	sts	0x051D, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     e26:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     e2a:	ce 01       	movw	r24, r28
     e2c:	01 96       	adiw	r24, 0x01	; 1
     e2e:	55 d0       	rcall	.+170    	; 0xeda <USB_Host_SendControlRequest>
     e30:	28 2f       	mov	r18, r24
     e32:	88 23       	and	r24, r24
     e34:	c1 f4       	brne	.+48     	; 0xe66 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize;
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	9c 81       	ldd	r25, Y+4	; 0x04
     e3a:	f6 01       	movw	r30, r12
     e3c:	91 83       	std	Z+1, r25	; 0x01
     e3e:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     e40:	e8 16       	cp	r14, r24
     e42:	f9 06       	cpc	r15, r25
     e44:	10 f4       	brcc	.+4      	; 0xe4a <USB_Host_GetDeviceConfigDescriptor+0x78>
     e46:	25 e0       	ldi	r18, 0x05	; 5
     e48:	0e c0       	rjmp	.+28     	; 0xe66 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     e4a:	90 93 1e 05 	sts	0x051E, r25
     e4e:	80 93 1d 05 	sts	0x051D, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     e52:	c8 01       	movw	r24, r16
     e54:	42 d0       	rcall	.+132    	; 0xeda <USB_Host_SendControlRequest>
     e56:	28 2f       	mov	r18, r24
     e58:	88 23       	and	r24, r24
     e5a:	29 f4       	brne	.+10     	; 0xe66 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     e5c:	f8 01       	movw	r30, r16
     e5e:	81 81       	ldd	r24, Z+1	; 0x01
     e60:	82 30       	cpi	r24, 0x02	; 2
     e62:	09 f0       	breq	.+2      	; 0xe66 <USB_Host_GetDeviceConfigDescriptor+0x94>
     e64:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     e66:	82 2f       	mov	r24, r18
     e68:	29 96       	adiw	r28, 0x09	; 9
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	de bf       	out	0x3e, r29	; 62
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	cd bf       	out	0x3d, r28	; 61
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	ff 90       	pop	r15
     e7e:	ef 90       	pop	r14
     e80:	df 90       	pop	r13
     e82:	cf 90       	pop	r12
     e84:	08 95       	ret

00000e86 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     e86:	08 95       	ret

00000e88 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     e88:	1f 93       	push	r17
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	18 2f       	mov	r17, r24
     e90:	c8 ee       	ldi	r28, 0xE8	; 232
     e92:	d3 e0       	ldi	r29, 0x03	; 3
     e94:	09 c0       	rjmp	.+18     	; 0xea8 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	ca db       	rcall	.-2156   	; 0x62e <USB_Host_WaitMS>
     e9a:	88 23       	and	r24, r24
     e9c:	d1 f4       	brne	.+52     	; 0xed2 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     e9e:	20 97       	sbiw	r28, 0x00	; 0
     ea0:	11 f4       	brne	.+4      	; 0xea6 <USB_Host_WaitForIOS+0x1e>
     ea2:	84 e0       	ldi	r24, 0x04	; 4
     ea4:	16 c0       	rjmp	.+44     	; 0xed2 <USB_Host_WaitForIOS+0x4a>
     ea6:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     ea8:	11 23       	and	r17, r17
     eaa:	29 f4       	brne	.+10     	; 0xeb6 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean true if the current pipe is ready for a SETUP packet, false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     eac:	80 91 a6 00 	lds	r24, 0x00A6
     eb0:	83 ff       	sbrs	r24, 3
     eb2:	f1 cf       	rjmp	.-30     	; 0xe96 <USB_Host_WaitForIOS+0xe>
     eb4:	0d c0       	rjmp	.+26     	; 0xed0 <USB_Host_WaitForIOS+0x48>
     eb6:	11 30       	cpi	r17, 0x01	; 1
     eb8:	29 f4       	brne	.+10     	; 0xec4 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     eba:	80 91 a6 00 	lds	r24, 0x00A6
     ebe:	80 ff       	sbrs	r24, 0
     ec0:	ea cf       	rjmp	.-44     	; 0xe96 <USB_Host_WaitForIOS+0xe>
     ec2:	06 c0       	rjmp	.+12     	; 0xed0 <USB_Host_WaitForIOS+0x48>
     ec4:	12 30       	cpi	r17, 0x02	; 2
     ec6:	39 f7       	brne	.-50     	; 0xe96 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     ec8:	80 91 a6 00 	lds	r24, 0x00A6
     ecc:	82 ff       	sbrs	r24, 2
     ece:	e3 cf       	rjmp	.-58     	; 0xe96 <USB_Host_WaitForIOS+0xe>
     ed0:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	1f 91       	pop	r17
     ed8:	08 95       	ret

00000eda <USB_Host_SendControlRequest>:

#define  __INCLUDE_FROM_HOSTSTDREQ_C
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     eda:	ff 92       	push	r15
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	18 2f       	mov	r17, r24
     ee6:	09 2f       	mov	r16, r25
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     ee8:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
	bool     BusSuspended   = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus   = HOST_SENDCONTROL_Successful;
	uint16_t DataLen        = USB_ControlRequest.wLength;
     eec:	c0 91 1d 05 	lds	r28, 0x051D
     ef0:	d0 91 1e 05 	lds	r29, 0x051E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     ef4:	80 91 9e 00 	lds	r24, 0x009E
     ef8:	81 60       	ori	r24, 0x01	; 1
     efa:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	96 db       	rcall	.-2260   	; 0x62e <USB_Host_WaitMS>
     f02:	98 2f       	mov	r25, r24
     f04:	88 23       	and	r24, r24
     f06:	09 f0       	breq	.+2      	; 0xf0a <USB_Host_SendControlRequest+0x30>
     f08:	d2 c0       	rjmp	.+420    	; 0x10ae <USB_Host_SendControlRequest+0x1d4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f0a:	80 91 aa 00 	lds	r24, 0x00AA
     f0e:	8f 7c       	andi	r24, 0xCF	; 207
     f10:	80 93 aa 00 	sts	0x00AA, r24
			 *  flag for the pipe.
			 */
			static inline void Pipe_ClearErrorFlags(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearErrorFlags(void)
			{
				UPERRX = 0;
     f14:	10 92 f5 00 	sts	0x00F5, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f18:	80 91 a9 00 	lds	r24, 0x00A9
     f1c:	8f 7b       	andi	r24, 0xBF	; 191
     f1e:	80 93 a9 00 	sts	0x00A9, r24
     f22:	e7 e1       	ldi	r30, 0x17	; 23
     f24:	f5 e0       	ldi	r31, 0x05	; 5
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_Byte(*(HeaderStream++));
     f26:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
     f28:	80 93 af 00 	sts	0x00AF, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     f2c:	85 e0       	ldi	r24, 0x05	; 5
     f2e:	ef 31       	cpi	r30, 0x1F	; 31
     f30:	f8 07       	cpc	r31, r24
     f32:	c9 f7       	brne	.-14     	; 0xf26 <USB_Host_SendControlRequest+0x4c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     f34:	80 91 a6 00 	lds	r24, 0x00A6
     f38:	87 77       	andi	r24, 0x77	; 119
     f3a:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_Byte(*(HeaderStream++));

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	a3 df       	rcall	.-186    	; 0xe88 <USB_Host_WaitForIOS>
     f42:	98 2f       	mov	r25, r24
     f44:	88 23       	and	r24, r24
     f46:	09 f0       	breq	.+2      	; 0xf4a <USB_Host_SendControlRequest+0x70>
     f48:	b2 c0       	rjmp	.+356    	; 0x10ae <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f4a:	80 91 a9 00 	lds	r24, 0x00A9
     f4e:	80 64       	ori	r24, 0x40	; 64
     f50:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	6b db       	rcall	.-2346   	; 0x62e <USB_Host_WaitMS>
     f58:	98 2f       	mov	r25, r24
     f5a:	88 23       	and	r24, r24
     f5c:	09 f0       	breq	.+2      	; 0xf60 <USB_Host_SendControlRequest+0x86>
     f5e:	a7 c0       	rjmp	.+334    	; 0x10ae <USB_Host_SendControlRequest+0x1d4>
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
     f60:	21 2f       	mov	r18, r17
     f62:	30 2f       	mov	r19, r16
     f64:	c9 01       	movw	r24, r18
     f66:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     f68:	80 91 17 05 	lds	r24, 0x0517
     f6c:	87 ff       	sbrs	r24, 7
     f6e:	52 c0       	rjmp	.+164    	; 0x1014 <USB_Host_SendControlRequest+0x13a>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f70:	80 91 aa 00 	lds	r24, 0x00AA
     f74:	8f 7c       	andi	r24, 0xCF	; 207
     f76:	80 61       	ori	r24, 0x10	; 16
     f78:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     f7c:	01 15       	cp	r16, r1
     f7e:	11 05       	cpc	r17, r1
     f80:	69 f5       	brne	.+90     	; 0xfdc <USB_Host_SendControlRequest+0x102>
     f82:	2e c0       	rjmp	.+92     	; 0xfe0 <USB_Host_SendControlRequest+0x106>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f84:	80 91 a9 00 	lds	r24, 0x00A9
     f88:	8f 7b       	andi	r24, 0xBF	; 191
     f8a:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	7b df       	rcall	.-266    	; 0xe88 <USB_Host_WaitForIOS>
     f92:	98 2f       	mov	r25, r24
     f94:	88 23       	and	r24, r24
     f96:	09 f0       	breq	.+2      	; 0xf9a <USB_Host_SendControlRequest+0xc0>
     f98:	8a c0       	rjmp	.+276    	; 0x10ae <USB_Host_SendControlRequest+0x1d4>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f9a:	80 91 f6 00 	lds	r24, 0x00F6
     f9e:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
     fa2:	89 2b       	or	r24, r25
     fa4:	49 f4       	brne	.+18     	; 0xfb8 <USB_Host_SendControlRequest+0xde>
     fa6:	c0 e0       	ldi	r28, 0x00	; 0
     fa8:	d0 e0       	ldi	r29, 0x00	; 0
     faa:	06 c0       	rjmp	.+12     	; 0xfb8 <USB_Host_SendControlRequest+0xde>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
     fac:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_Byte();
     fb0:	f8 01       	movw	r30, r16
     fb2:	81 93       	st	Z+, r24
     fb4:	8f 01       	movw	r16, r30
					DataLen--;
     fb6:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     fb8:	80 91 f6 00 	lds	r24, 0x00F6
     fbc:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     fc0:	89 2b       	or	r24, r25
     fc2:	11 f0       	breq	.+4      	; 0xfc8 <USB_Host_SendControlRequest+0xee>
     fc4:	20 97       	sbiw	r28, 0x00	; 0
     fc6:	91 f7       	brne	.-28     	; 0xfac <USB_Host_SendControlRequest+0xd2>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fc8:	80 91 a9 00 	lds	r24, 0x00A9
     fcc:	80 64       	ori	r24, 0x40	; 64
     fce:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     fd2:	80 91 a6 00 	lds	r24, 0x00A6
     fd6:	8e 77       	andi	r24, 0x7E	; 126
     fd8:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     fdc:	20 97       	sbiw	r28, 0x00	; 0
     fde:	91 f6       	brne	.-92     	; 0xf84 <USB_Host_SendControlRequest+0xaa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fe0:	80 91 aa 00 	lds	r24, 0x00AA
     fe4:	8f 7c       	andi	r24, 0xCF	; 207
     fe6:	80 62       	ori	r24, 0x20	; 32
     fe8:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fec:	80 91 a9 00 	lds	r24, 0x00A9
     ff0:	8f 7b       	andi	r24, 0xBF	; 191
     ff2:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     ff6:	82 e0       	ldi	r24, 0x02	; 2
     ff8:	47 df       	rcall	.-370    	; 0xe88 <USB_Host_WaitForIOS>
     ffa:	98 2f       	mov	r25, r24
     ffc:	88 23       	and	r24, r24
     ffe:	09 f0       	breq	.+2      	; 0x1002 <USB_Host_SendControlRequest+0x128>
    1000:	56 c0       	rjmp	.+172    	; 0x10ae <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1002:	80 91 a6 00 	lds	r24, 0x00A6
    1006:	8b 77       	andi	r24, 0x7B	; 123
    1008:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    100c:	82 e0       	ldi	r24, 0x02	; 2
    100e:	3c df       	rcall	.-392    	; 0xe88 <USB_Host_WaitForIOS>
    1010:	98 2f       	mov	r25, r24
    1012:	4d c0       	rjmp	.+154    	; 0x10ae <USB_Host_SendControlRequest+0x1d4>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1014:	01 15       	cp	r16, r1
    1016:	11 05       	cpc	r17, r1
    1018:	a9 f1       	breq	.+106    	; 0x1084 <USB_Host_SendControlRequest+0x1aa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    101a:	80 91 aa 00 	lds	r24, 0x00AA
    101e:	8f 7c       	andi	r24, 0xCF	; 207
    1020:	80 62       	ori	r24, 0x20	; 32
    1022:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1026:	80 91 a9 00 	lds	r24, 0x00A9
    102a:	8f 7b       	andi	r24, 0xBF	; 191
    102c:	80 93 a9 00 	sts	0x00A9, r24
    1030:	1d c0       	rjmp	.+58     	; 0x106c <USB_Host_SendControlRequest+0x192>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1032:	82 e0       	ldi	r24, 0x02	; 2
    1034:	29 df       	rcall	.-430    	; 0xe88 <USB_Host_WaitForIOS>
    1036:	98 2f       	mov	r25, r24
    1038:	88 23       	and	r24, r24
    103a:	c9 f5       	brne	.+114    	; 0x10ae <USB_Host_SendControlRequest+0x1d4>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    103c:	80 91 2b 01 	lds	r24, 0x012B
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	07 c0       	rjmp	.+14     	; 0x1054 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_Byte(*(DataStream++));
    1046:	f8 01       	movw	r30, r16
    1048:	81 91       	ld	r24, Z+
    104a:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    104c:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1050:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    1052:	39 f0       	breq	.+14     	; 0x1062 <USB_Host_SendControlRequest+0x188>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1054:	80 91 f6 00 	lds	r24, 0x00F6
    1058:	90 91 f7 00 	lds	r25, 0x00F7
    105c:	82 17       	cp	r24, r18
    105e:	93 07       	cpc	r25, r19
    1060:	90 f3       	brcs	.-28     	; 0x1046 <USB_Host_SendControlRequest+0x16c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1062:	80 91 a6 00 	lds	r24, 0x00A6
    1066:	8b 77       	andi	r24, 0x7B	; 123
    1068:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    106c:	20 97       	sbiw	r28, 0x00	; 0
    106e:	09 f7       	brne	.-62     	; 0x1032 <USB_Host_SendControlRequest+0x158>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1070:	82 e0       	ldi	r24, 0x02	; 2
    1072:	0a df       	rcall	.-492    	; 0xe88 <USB_Host_WaitForIOS>
    1074:	98 2f       	mov	r25, r24
    1076:	88 23       	and	r24, r24
    1078:	d1 f4       	brne	.+52     	; 0x10ae <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    107a:	80 91 a9 00 	lds	r24, 0x00A9
    107e:	80 64       	ori	r24, 0x40	; 64
    1080:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1084:	80 91 aa 00 	lds	r24, 0x00AA
    1088:	8f 7c       	andi	r24, 0xCF	; 207
    108a:	80 61       	ori	r24, 0x10	; 16
    108c:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1090:	80 91 a9 00 	lds	r24, 0x00A9
    1094:	8f 7b       	andi	r24, 0xBF	; 191
    1096:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	f5 de       	rcall	.-534    	; 0xe88 <USB_Host_WaitForIOS>
    109e:	98 2f       	mov	r25, r24
    10a0:	88 23       	and	r24, r24
    10a2:	29 f4       	brne	.+10     	; 0x10ae <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10a4:	80 91 a6 00 	lds	r24, 0x00A6
    10a8:	8e 77       	andi	r24, 0x7E	; 126
    10aa:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10ae:	80 91 a9 00 	lds	r24, 0x00A9
    10b2:	80 64       	ori	r24, 0x40	; 64
    10b4:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    10b8:	f0 fc       	sbrc	r15, 0
    10ba:	05 c0       	rjmp	.+10     	; 0x10c6 <USB_Host_SendControlRequest+0x1ec>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    10bc:	80 91 9e 00 	lds	r24, 0x009E
    10c0:	8e 7f       	andi	r24, 0xFE	; 254
    10c2:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    10cc:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    10d0:	89 2f       	mov	r24, r25
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	0f 91       	pop	r16
    10da:	ff 90       	pop	r15
    10dc:	08 95       	ret

000010de <Pipe_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    10de:	df 92       	push	r13
    10e0:	ef 92       	push	r14
    10e2:	ff 92       	push	r15
    10e4:	0f 93       	push	r16
    10e6:	1f 93       	push	r17
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	18 2f       	mov	r17, r24
    10ee:	09 2f       	mov	r16, r25
    10f0:	eb 01       	movw	r28, r22
    10f2:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10f4:	80 91 aa 00 	lds	r24, 0x00AA
    10f8:	8f 7c       	andi	r24, 0xCF	; 207
    10fa:	80 61       	ori	r24, 0x10	; 16
    10fc:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1100:	eb dc       	rcall	.-1578   	; 0xad8 <Pipe_WaitUntilReady>
    1102:	d8 2e       	mov	r13, r24
    1104:	88 23       	and	r24, r24
    1106:	19 f5       	brne	.+70     	; 0x114e <Pipe_Read_Stream_LE+0x70>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1108:	81 2f       	mov	r24, r17
    110a:	90 2f       	mov	r25, r16
    110c:	9c 01       	movw	r18, r24
    110e:	89 01       	movw	r16, r18
    1110:	1c c0       	rjmp	.+56     	; 0x114a <Pipe_Read_Stream_LE+0x6c>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1112:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1116:	85 fd       	sbrc	r24, 5
    1118:	12 c0       	rjmp	.+36     	; 0x113e <Pipe_Read_Stream_LE+0x60>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    111a:	80 91 a6 00 	lds	r24, 0x00A6
    111e:	8e 77       	andi	r24, 0x7E	; 126
    1120:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    1124:	e1 14       	cp	r14, r1
    1126:	f1 04       	cpc	r15, r1
    1128:	31 f0       	breq	.+12     	; 0x1136 <Pipe_Read_Stream_LE+0x58>
    112a:	f7 01       	movw	r30, r14
    112c:	09 95       	icall
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	11 f4       	brne	.+4      	; 0x1136 <Pipe_Read_Stream_LE+0x58>
    1132:	84 e0       	ldi	r24, 0x04	; 4
    1134:	0d c0       	rjmp	.+26     	; 0x1150 <Pipe_Read_Stream_LE+0x72>
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1136:	d0 dc       	rcall	.-1632   	; 0xad8 <Pipe_WaitUntilReady>
    1138:	88 23       	and	r24, r24
    113a:	39 f0       	breq	.+14     	; 0x114a <Pipe_Read_Stream_LE+0x6c>
    113c:	09 c0       	rjmp	.+18     	; 0x1150 <Pipe_Read_Stream_LE+0x72>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    113e:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1142:	f8 01       	movw	r30, r16
    1144:	81 93       	st	Z+, r24
    1146:	8f 01       	movw	r16, r30
			Length--;
    1148:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    114a:	20 97       	sbiw	r28, 0x00	; 0
    114c:	11 f7       	brne	.-60     	; 0x1112 <Pipe_Read_Stream_LE+0x34>
    114e:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	ff 90       	pop	r15
    115a:	ef 90       	pop	r14
    115c:	df 90       	pop	r13
    115e:	08 95       	ret

00001160 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1160:	ff 92       	push	r15
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1166:	07 ea       	ldi	r16, 0xA7	; 167
    1168:	10 e0       	ldi	r17, 0x00	; 0
    116a:	f8 01       	movw	r30, r16
    116c:	f0 80       	ld	r15, Z
    116e:	f7 e0       	ldi	r31, 0x07	; 7
    1170:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1172:	f8 01       	movw	r30, r16
    1174:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1176:	0a db       	rcall	.-2540   	; 0x78c <USB_Host_ProcessNextHostState>
    1178:	f8 01       	movw	r30, r16
    117a:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    117c:	1f 91       	pop	r17
    117e:	0f 91       	pop	r16
    1180:	ff 90       	pop	r15
    1182:	08 95       	ret

00001184 <USB_GetHIDReportItemInfo>:
	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
    1184:	cf 92       	push	r12
    1186:	df 92       	push	r13
    1188:	ef 92       	push	r14
    118a:	ff 92       	push	r15
    118c:	0f 93       	push	r16
    118e:	1f 93       	push	r17
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	6c 01       	movw	r12, r24
    1196:	eb 01       	movw	r28, r22
	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    1198:	28 85       	ldd	r18, Y+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
    119a:	e8 80       	ld	r14, Y
    119c:	f9 80       	ldd	r15, Y+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
    119e:	9d 81       	ldd	r25, Y+5	; 0x05
    11a0:	99 23       	and	r25, r25
    11a2:	49 f0       	breq	.+18     	; 0x11b6 <USB_GetHIDReportItemInfo+0x32>
	{
		if (ReportItem->ReportID != ReportData[0])
    11a4:	f6 01       	movw	r30, r12
    11a6:	80 81       	ld	r24, Z
    11a8:	98 17       	cp	r25, r24
    11aa:	11 f0       	breq	.+4      	; 0x11b0 <USB_GetHIDReportItemInfo+0x2c>
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	43 c0       	rjmp	.+134    	; 0x1236 <USB_GetHIDReportItemInfo+0xb2>
		  return false;

		ReportData++;
    11b0:	08 94       	sec
    11b2:	c1 1c       	adc	r12, r1
    11b4:	d1 1c       	adc	r13, r1
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    11b6:	02 2f       	mov	r16, r18
    11b8:	10 e0       	ldi	r17, 0x00	; 0
		  return false;

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
    11ba:	8a a1       	ldd	r24, Y+34	; 0x22
    11bc:	9b a1       	ldd	r25, Y+35	; 0x23
    11be:	ac a1       	ldd	r26, Y+36	; 0x24
    11c0:	bd a1       	ldd	r27, Y+37	; 0x25
    11c2:	8e a3       	std	Y+38, r24	; 0x26
    11c4:	9f a3       	std	Y+39, r25	; 0x27
    11c6:	a8 a7       	std	Y+40, r26	; 0x28
    11c8:	b9 a7       	std	Y+41, r27	; 0x29
	ReportItem->Value = 0;
    11ca:	1a a2       	std	Y+34, r1	; 0x22
    11cc:	1b a2       	std	Y+35, r1	; 0x23
    11ce:	1c a2       	std	Y+36, r1	; 0x24
    11d0:	1d a2       	std	Y+37, r1	; 0x25
    11d2:	41 e0       	ldi	r20, 0x01	; 1
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	29 c0       	rjmp	.+82     	; 0x122e <USB_GetHIDReportItemInfo+0xaa>

	while (DataBitsRem--)
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
    11dc:	f7 01       	movw	r30, r14
    11de:	93 e0       	ldi	r25, 0x03	; 3
    11e0:	f6 95       	lsr	r31
    11e2:	e7 95       	ror	r30
    11e4:	9a 95       	dec	r25
    11e6:	e1 f7       	brne	.-8      	; 0x11e0 <USB_GetHIDReportItemInfo+0x5c>
    11e8:	ec 0d       	add	r30, r12
    11ea:	fd 1d       	adc	r31, r13
    11ec:	80 81       	ld	r24, Z
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	97 01       	movw	r18, r14
    11f2:	27 70       	andi	r18, 0x07	; 7
    11f4:	30 70       	andi	r19, 0x00	; 0
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <USB_GetHIDReportItemInfo+0x78>
    11f8:	95 95       	asr	r25
    11fa:	87 95       	ror	r24
    11fc:	2a 95       	dec	r18
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <USB_GetHIDReportItemInfo+0x74>
    1200:	80 ff       	sbrs	r24, 0
    1202:	0c c0       	rjmp	.+24     	; 0x121c <USB_GetHIDReportItemInfo+0x98>
		  ReportItem->Value |= BitMask;
    1204:	8a a1       	ldd	r24, Y+34	; 0x22
    1206:	9b a1       	ldd	r25, Y+35	; 0x23
    1208:	ac a1       	ldd	r26, Y+36	; 0x24
    120a:	bd a1       	ldd	r27, Y+37	; 0x25
    120c:	84 2b       	or	r24, r20
    120e:	95 2b       	or	r25, r21
    1210:	a6 2b       	or	r26, r22
    1212:	b7 2b       	or	r27, r23
    1214:	8a a3       	std	Y+34, r24	; 0x22
    1216:	9b a3       	std	Y+35, r25	; 0x23
    1218:	ac a3       	std	Y+36, r26	; 0x24
    121a:	bd a3       	std	Y+37, r27	; 0x25

		CurrentBit++;
    121c:	08 94       	sec
    121e:	e1 1c       	adc	r14, r1
    1220:	f1 1c       	adc	r15, r1
		BitMask <<= 1;
    1222:	44 0f       	add	r20, r20
    1224:	55 1f       	adc	r21, r21
    1226:	66 1f       	adc	r22, r22
    1228:	77 1f       	adc	r23, r23
    122a:	01 50       	subi	r16, 0x01	; 1
    122c:	10 40       	sbci	r17, 0x00	; 0
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
    122e:	01 15       	cp	r16, r1
    1230:	11 05       	cpc	r17, r1
    1232:	a1 f6       	brne	.-88     	; 0x11dc <USB_GetHIDReportItemInfo+0x58>
    1234:	81 e0       	ldi	r24, 0x01	; 1
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	1f 91       	pop	r17
    123c:	0f 91       	pop	r16
    123e:	ff 90       	pop	r15
    1240:	ef 90       	pop	r14
    1242:	df 90       	pop	r13
    1244:	cf 90       	pop	r12
    1246:	08 95       	ret

00001248 <USB_GetHIDReportSize>:
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
    1248:	e4 2f       	mov	r30, r20
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	ee 0f       	add	r30, r30
    124e:	ff 1f       	adc	r31, r31
    1250:	ef 56       	subi	r30, 0x6F	; 111
    1252:	fc 4f       	sbci	r31, 0xFC	; 252
    1254:	e8 0f       	add	r30, r24
    1256:	f9 1f       	adc	r31, r25
    1258:	dc 01       	movw	r26, r24
    125a:	a0 57       	subi	r26, 0x70	; 112
    125c:	bc 4f       	sbci	r27, 0xFC	; 252
    125e:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
    1260:	20 81       	ld	r18, Z
    1262:	31 81       	ldd	r19, Z+1	; 0x01

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
    1264:	8c 91       	ld	r24, X
    1266:	86 17       	cp	r24, r22
    1268:	89 f4       	brne	.+34     	; 0x128c <USB_GetHIDReportSize+0x44>
		  return ((ReportSizeBits >> 3) + ((ReportSizeBits & 0x07) ? 1 : 0));
    126a:	40 e0       	ldi	r20, 0x00	; 0
    126c:	50 e0       	ldi	r21, 0x00	; 0
    126e:	c9 01       	movw	r24, r18
    1270:	87 70       	andi	r24, 0x07	; 7
    1272:	90 70       	andi	r25, 0x00	; 0
    1274:	89 2b       	or	r24, r25
    1276:	11 f0       	breq	.+4      	; 0x127c <USB_GetHIDReportSize+0x34>
    1278:	41 e0       	ldi	r20, 0x01	; 1
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	63 e0       	ldi	r22, 0x03	; 3
    127e:	36 95       	lsr	r19
    1280:	27 95       	ror	r18
    1282:	6a 95       	dec	r22
    1284:	e1 f7       	brne	.-8      	; 0x127e <USB_GetHIDReportSize+0x36>
    1286:	24 0f       	add	r18, r20
    1288:	35 1f       	adc	r19, r21
    128a:	07 c0       	rjmp	.+14     	; 0x129a <USB_GetHIDReportSize+0x52>

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
    128c:	9f 5f       	subi	r25, 0xFF	; 255
    128e:	37 96       	adiw	r30, 0x07	; 7
    1290:	17 96       	adiw	r26, 0x07	; 7
    1292:	9a 30       	cpi	r25, 0x0A	; 10
    1294:	29 f7       	brne	.-54     	; 0x1260 <USB_GetHIDReportSize+0x18>
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return ((ReportSizeBits >> 3) + ((ReportSizeBits & 0x07) ? 1 : 0));
	}

	return 0;
}
    129a:	c9 01       	movw	r24, r18
    129c:	08 95       	ret

0000129e <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
    129e:	2f 92       	push	r2
    12a0:	3f 92       	push	r3
    12a2:	4f 92       	push	r4
    12a4:	5f 92       	push	r5
    12a6:	6f 92       	push	r6
    12a8:	7f 92       	push	r7
    12aa:	8f 92       	push	r8
    12ac:	9f 92       	push	r9
    12ae:	af 92       	push	r10
    12b0:	bf 92       	push	r11
    12b2:	cf 92       	push	r12
    12b4:	df 92       	push	r13
    12b6:	ef 92       	push	r14
    12b8:	ff 92       	push	r15
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	c5 59       	subi	r28, 0x95	; 149
    12c8:	d0 40       	sbci	r29, 0x00	; 0
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	cf 57       	subi	r28, 0x7F	; 127
    12d6:	df 4f       	sbci	r29, 0xFF	; 255
    12d8:	99 83       	std	Y+1, r25	; 0x01
    12da:	88 83       	st	Y, r24
    12dc:	c1 58       	subi	r28, 0x81	; 129
    12de:	d0 40       	sbci	r29, 0x00	; 0
    12e0:	cd 57       	subi	r28, 0x7D	; 125
    12e2:	df 4f       	sbci	r29, 0xFF	; 255
    12e4:	79 83       	std	Y+1, r23	; 0x01
    12e6:	68 83       	st	Y, r22
    12e8:	c3 58       	subi	r28, 0x83	; 131
    12ea:	d0 40       	sbci	r29, 0x00	; 0
    12ec:	1a 01       	movw	r2, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
    12ee:	80 e9       	ldi	r24, 0x90	; 144
    12f0:	48 2e       	mov	r4, r24
    12f2:	83 e0       	ldi	r24, 0x03	; 3
    12f4:	58 2e       	mov	r5, r24
    12f6:	44 0e       	add	r4, r20
    12f8:	55 1e       	adc	r5, r21
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
    12fa:	89 ed       	ldi	r24, 0xD9	; 217
    12fc:	93 e0       	ldi	r25, 0x03	; 3
    12fe:	da 01       	movw	r26, r20
    1300:	fc 01       	movw	r30, r24
    1302:	1d 92       	st	X+, r1
    1304:	31 97       	sbiw	r30, 0x01	; 1
    1306:	e9 f7       	brne	.-6      	; 0x1302 <USB_ProcessHIDReport+0x64>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
    1308:	fe 01       	movw	r30, r28
    130a:	fb 96       	adiw	r30, 0x3b	; 59
    130c:	8c e1       	ldi	r24, 0x1C	; 28
    130e:	df 01       	movw	r26, r30
    1310:	1d 92       	st	X+, r1
    1312:	8a 95       	dec	r24
    1314:	e9 f7       	brne	.-6      	; 0x1310 <USB_ProcessHIDReport+0x72>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    1316:	87 e0       	ldi	r24, 0x07	; 7
    1318:	d2 01       	movw	r26, r4
    131a:	1d 92       	st	X+, r1
    131c:	8a 95       	dec	r24
    131e:	e9 f7       	brne	.-6      	; 0x131a <USB_ProcessHIDReport+0x7c>

	ParserData->TotalDeviceReports = 1;
    1320:	da 01       	movw	r26, r20
    1322:	a1 57       	subi	r26, 0x71	; 113
    1324:	bc 4f       	sbci	r27, 0xFC	; 252
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	8c 93       	st	X, r24
				UsageMinMax.Maximum = ReportItemData;
				break;
			case (TYPE_MAIN | TAG_MAIN_COLLECTION):
				if (CurrCollectionPath == NULL)
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
    132a:	9a 01       	movw	r18, r20
    132c:	27 5b       	subi	r18, 0xB7	; 183
    132e:	3c 4f       	sbci	r19, 0xFC	; 252
    1330:	e7 96       	adiw	r28, 0x37	; 55
    1332:	3f af       	std	Y+63, r19	; 0x3f
    1334:	2e af       	std	Y+62, r18	; 0x3e
    1336:	e7 97       	sbiw	r28, 0x37	; 55
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
    1338:	40 5b       	subi	r20, 0xB0	; 176
    133a:	5c 4f       	sbci	r21, 0xFC	; 252
    133c:	e5 96       	adiw	r28, 0x35	; 53
    133e:	5f af       	std	Y+63, r21	; 0x3f
    1340:	4e af       	std	Y+62, r20	; 0x3e
    1342:	e5 97       	sbiw	r28, 0x35	; 53

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    1344:	c1 01       	movw	r24, r2
    1346:	88 57       	subi	r24, 0x78	; 120
    1348:	9c 4f       	sbci	r25, 0xFC	; 252
    134a:	ef 96       	adiw	r28, 0x3f	; 63
    134c:	9f af       	std	Y+63, r25	; 0x3f
    134e:	8e af       	std	Y+62, r24	; 0x3e
    1350:	ef 97       	sbiw	r28, 0x3f	; 63
    1352:	6f 01       	movw	r12, r30
    1354:	aa 24       	eor	r10, r10
    1356:	bb 24       	eor	r11, r11
    1358:	ed 96       	adiw	r28, 0x3d	; 61
    135a:	1f ae       	std	Y+63, r1	; 0x3f
    135c:	ed 97       	sbiw	r28, 0x3d	; 61
    135e:	eb 96       	adiw	r28, 0x3b	; 59
    1360:	1c ae       	std	Y+60, r1	; 0x3c
    1362:	1d ae       	std	Y+61, r1	; 0x3d
    1364:	1e ae       	std	Y+62, r1	; 0x3e
    1366:	1f ae       	std	Y+63, r1	; 0x3f
    1368:	eb 97       	sbiw	r28, 0x3b	; 59
    136a:	66 24       	eor	r6, r6
    136c:	77 24       	eor	r7, r7
    136e:	43 01       	movw	r8, r6

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					if (ParserData->LargestReportSizeBits < NewReportItem.BitOffset)
    1370:	f1 01       	movw	r30, r2
    1372:	ea 52       	subi	r30, 0x2A	; 42
    1374:	fc 4f       	sbci	r31, 0xFC	; 252
    1376:	c6 57       	subi	r28, 0x76	; 118
    1378:	df 4f       	sbci	r29, 0xFF	; 255
    137a:	f9 83       	std	Y+1, r31	; 0x01
    137c:	e8 83       	st	Y, r30
    137e:	ca 58       	subi	r28, 0x8A	; 138
    1380:	d0 40       	sbci	r29, 0x00	; 0
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_POP):
				if (CurrStateTable == &StateTable[0])
    1382:	cc 56       	subi	r28, 0x6C	; 108
    1384:	df 4f       	sbci	r29, 0xFF	; 255
    1386:	d9 82       	std	Y+1, r13	; 0x01
    1388:	c8 82       	st	Y, r12
    138a:	c4 59       	subi	r28, 0x94	; 148
    138c:	d0 40       	sbci	r29, 0x00	; 0
		}

		switch (HIDReportItem & (TYPE_MASK | TAG_MASK))
		{
			case (TYPE_GLOBAL | TAG_GLOBAL_PUSH):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
    138e:	96 01       	movw	r18, r12
    1390:	24 5e       	subi	r18, 0xE4	; 228
    1392:	3f 4f       	sbci	r19, 0xFF	; 255
    1394:	c4 57       	subi	r28, 0x74	; 116
    1396:	df 4f       	sbci	r29, 0xFF	; 255
    1398:	39 83       	std	Y+1, r19	; 0x01
    139a:	28 83       	st	Y, r18
    139c:	cc 58       	subi	r28, 0x8C	; 140
    139e:	d0 40       	sbci	r29, 0x00	; 0
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_REPORTID):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
    13a0:	a1 01       	movw	r20, r2
    13a2:	48 52       	subi	r20, 0x28	; 40
    13a4:	5c 4f       	sbci	r21, 0xFC	; 252
    13a6:	c2 57       	subi	r28, 0x72	; 114
    13a8:	df 4f       	sbci	r29, 0xFF	; 255
    13aa:	59 83       	std	Y+1, r21	; 0x01
    13ac:	48 83       	st	Y, r20
    13ae:	ce 58       	subi	r28, 0x8E	; 142
    13b0:	d0 40       	sbci	r29, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    13b2:	c0 57       	subi	r28, 0x70	; 112
    13b4:	df 4f       	sbci	r29, 0xFF	; 255
    13b6:	b9 83       	std	Y+1, r27	; 0x01
    13b8:	a8 83       	st	Y, r26
    13ba:	c0 59       	subi	r28, 0x90	; 144
    13bc:	d0 40       	sbci	r29, 0x00	; 0
    13be:	c2 01       	movw	r24, r4
    13c0:	ce 56       	subi	r28, 0x6E	; 110
    13c2:	df 4f       	sbci	r29, 0xFF	; 255
    13c4:	48 82       	st	Y, r4
    13c6:	c2 59       	subi	r28, 0x92	; 146
    13c8:	d0 40       	sbci	r29, 0x00	; 0
    13ca:	cd 56       	subi	r28, 0x6D	; 109
    13cc:	df 4f       	sbci	r29, 0xFF	; 255
    13ce:	98 83       	st	Y, r25
    13d0:	c3 59       	subi	r28, 0x93	; 147
    13d2:	d0 40       	sbci	r29, 0x00	; 0
    13d4:	29 c3       	rjmp	.+1618   	; 0x1a28 <USB_ProcessHIDReport+0x78a>

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
    13d6:	cf 57       	subi	r28, 0x7F	; 127
    13d8:	df 4f       	sbci	r29, 0xFF	; 255
    13da:	a8 81       	ld	r26, Y
    13dc:	b9 81       	ldd	r27, Y+1	; 0x01
    13de:	c1 58       	subi	r28, 0x81	; 129
    13e0:	d0 40       	sbci	r29, 0x00	; 0
    13e2:	2d 91       	ld	r18, X+
    13e4:	cf 57       	subi	r28, 0x7F	; 127
    13e6:	df 4f       	sbci	r29, 0xFF	; 255
    13e8:	b9 83       	std	Y+1, r27	; 0x01
    13ea:	a8 83       	st	Y, r26
    13ec:	c1 58       	subi	r28, 0x81	; 129
    13ee:	d0 40       	sbci	r29, 0x00	; 0
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;
    13f0:	cd 57       	subi	r28, 0x7D	; 125
    13f2:	df 4f       	sbci	r29, 0xFF	; 255
    13f4:	e8 81       	ld	r30, Y
    13f6:	f9 81       	ldd	r31, Y+1	; 0x01
    13f8:	c3 58       	subi	r28, 0x83	; 131
    13fa:	d0 40       	sbci	r29, 0x00	; 0
    13fc:	31 97       	sbiw	r30, 0x01	; 1
    13fe:	cd 57       	subi	r28, 0x7D	; 125
    1400:	df 4f       	sbci	r29, 0xFF	; 255
    1402:	f9 83       	std	Y+1, r31	; 0x01
    1404:	e8 83       	st	Y, r30
    1406:	c3 58       	subi	r28, 0x83	; 131
    1408:	d0 40       	sbci	r29, 0x00	; 0

		switch (HIDReportItem & DATA_SIZE_MASK)
    140a:	42 2f       	mov	r20, r18
    140c:	50 e0       	ldi	r21, 0x00	; 0
    140e:	c1 58       	subi	r28, 0x81	; 129
    1410:	df 4f       	sbci	r29, 0xFF	; 255
    1412:	59 83       	std	Y+1, r21	; 0x01
    1414:	48 83       	st	Y, r20
    1416:	cf 57       	subi	r28, 0x7F	; 127
    1418:	d0 40       	sbci	r29, 0x00	; 0
    141a:	ca 01       	movw	r24, r20
    141c:	83 70       	andi	r24, 0x03	; 3
    141e:	90 70       	andi	r25, 0x00	; 0
    1420:	82 30       	cpi	r24, 0x02	; 2
    1422:	91 05       	cpc	r25, r1
    1424:	09 f1       	breq	.+66     	; 0x1468 <USB_ProcessHIDReport+0x1ca>
    1426:	83 30       	cpi	r24, 0x03	; 3
    1428:	91 05       	cpc	r25, r1
    142a:	31 f0       	breq	.+12     	; 0x1438 <USB_ProcessHIDReport+0x19a>
    142c:	01 97       	sbiw	r24, 0x01	; 1
    142e:	a9 f1       	breq	.+106    	; 0x149a <USB_ProcessHIDReport+0x1fc>
    1430:	ee 24       	eor	r14, r14
    1432:	ff 24       	eor	r15, r15
    1434:	87 01       	movw	r16, r14
    1436:	4f c0       	rjmp	.+158    	; 0x14d6 <USB_ProcessHIDReport+0x238>
		{
			case DATA_SIZE_4:
				ReportItemData  = *((uint32_t*)ReportData);
    1438:	cf 57       	subi	r28, 0x7F	; 127
    143a:	df 4f       	sbci	r29, 0xFF	; 255
    143c:	a8 81       	ld	r26, Y
    143e:	b9 81       	ldd	r27, Y+1	; 0x01
    1440:	c1 58       	subi	r28, 0x81	; 129
    1442:	d0 40       	sbci	r29, 0x00	; 0
    1444:	ed 90       	ld	r14, X+
    1446:	fd 90       	ld	r15, X+
    1448:	0d 91       	ld	r16, X+
    144a:	1d 91       	ld	r17, X+
    144c:	cf 57       	subi	r28, 0x7F	; 127
    144e:	df 4f       	sbci	r29, 0xFF	; 255
    1450:	b9 83       	std	Y+1, r27	; 0x01
    1452:	a8 83       	st	Y, r26
    1454:	c1 58       	subi	r28, 0x81	; 129
    1456:	d0 40       	sbci	r29, 0x00	; 0
				ReportSize     -= 4;
    1458:	cd 57       	subi	r28, 0x7D	; 125
    145a:	df 4f       	sbci	r29, 0xFF	; 255
    145c:	e8 81       	ld	r30, Y
    145e:	f9 81       	ldd	r31, Y+1	; 0x01
    1460:	c3 58       	subi	r28, 0x83	; 131
    1462:	d0 40       	sbci	r29, 0x00	; 0
    1464:	34 97       	sbiw	r30, 0x04	; 4
    1466:	31 c0       	rjmp	.+98     	; 0x14ca <USB_ProcessHIDReport+0x22c>
				ReportData     += 4;
				break;
			case DATA_SIZE_2:
				ReportItemData  = *((uint16_t*)ReportData);
    1468:	cf 57       	subi	r28, 0x7F	; 127
    146a:	df 4f       	sbci	r29, 0xFF	; 255
    146c:	a8 81       	ld	r26, Y
    146e:	b9 81       	ldd	r27, Y+1	; 0x01
    1470:	c1 58       	subi	r28, 0x81	; 129
    1472:	d0 40       	sbci	r29, 0x00	; 0
    1474:	8d 91       	ld	r24, X+
    1476:	9d 91       	ld	r25, X+
    1478:	cf 57       	subi	r28, 0x7F	; 127
    147a:	df 4f       	sbci	r29, 0xFF	; 255
    147c:	b9 83       	std	Y+1, r27	; 0x01
    147e:	a8 83       	st	Y, r26
    1480:	c1 58       	subi	r28, 0x81	; 129
    1482:	d0 40       	sbci	r29, 0x00	; 0
    1484:	7c 01       	movw	r14, r24
    1486:	00 e0       	ldi	r16, 0x00	; 0
    1488:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 2;
    148a:	cd 57       	subi	r28, 0x7D	; 125
    148c:	df 4f       	sbci	r29, 0xFF	; 255
    148e:	e8 81       	ld	r30, Y
    1490:	f9 81       	ldd	r31, Y+1	; 0x01
    1492:	c3 58       	subi	r28, 0x83	; 131
    1494:	d0 40       	sbci	r29, 0x00	; 0
    1496:	32 97       	sbiw	r30, 0x02	; 2
    1498:	18 c0       	rjmp	.+48     	; 0x14ca <USB_ProcessHIDReport+0x22c>
				ReportData     += 2;
				break;
			case DATA_SIZE_1:
				ReportItemData  = *((uint8_t*)ReportData);
    149a:	cf 57       	subi	r28, 0x7F	; 127
    149c:	df 4f       	sbci	r29, 0xFF	; 255
    149e:	a8 81       	ld	r26, Y
    14a0:	b9 81       	ldd	r27, Y+1	; 0x01
    14a2:	c1 58       	subi	r28, 0x81	; 129
    14a4:	d0 40       	sbci	r29, 0x00	; 0
    14a6:	8d 91       	ld	r24, X+
    14a8:	cf 57       	subi	r28, 0x7F	; 127
    14aa:	df 4f       	sbci	r29, 0xFF	; 255
    14ac:	b9 83       	std	Y+1, r27	; 0x01
    14ae:	a8 83       	st	Y, r26
    14b0:	c1 58       	subi	r28, 0x81	; 129
    14b2:	d0 40       	sbci	r29, 0x00	; 0
    14b4:	e8 2e       	mov	r14, r24
    14b6:	ff 24       	eor	r15, r15
    14b8:	00 e0       	ldi	r16, 0x00	; 0
    14ba:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 1;
    14bc:	cd 57       	subi	r28, 0x7D	; 125
    14be:	df 4f       	sbci	r29, 0xFF	; 255
    14c0:	e8 81       	ld	r30, Y
    14c2:	f9 81       	ldd	r31, Y+1	; 0x01
    14c4:	c3 58       	subi	r28, 0x83	; 131
    14c6:	d0 40       	sbci	r29, 0x00	; 0
    14c8:	31 97       	sbiw	r30, 0x01	; 1
    14ca:	cd 57       	subi	r28, 0x7D	; 125
    14cc:	df 4f       	sbci	r29, 0xFF	; 255
    14ce:	f9 83       	std	Y+1, r31	; 0x01
    14d0:	e8 83       	st	Y, r30
    14d2:	c3 58       	subi	r28, 0x83	; 131
    14d4:	d0 40       	sbci	r29, 0x00	; 0
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (TYPE_MASK | TAG_MASK))
    14d6:	c1 58       	subi	r28, 0x81	; 129
    14d8:	df 4f       	sbci	r29, 0xFF	; 255
    14da:	88 81       	ld	r24, Y
    14dc:	99 81       	ldd	r25, Y+1	; 0x01
    14de:	cf 57       	subi	r28, 0x7F	; 127
    14e0:	d0 40       	sbci	r29, 0x00	; 0
    14e2:	8c 7f       	andi	r24, 0xFC	; 252
    14e4:	90 70       	andi	r25, 0x00	; 0
    14e6:	84 36       	cpi	r24, 0x64	; 100
    14e8:	91 05       	cpc	r25, r1
    14ea:	09 f4       	brne	.+2      	; 0x14ee <USB_ProcessHIDReport+0x250>
    14ec:	d2 c0       	rjmp	.+420    	; 0x1692 <USB_ProcessHIDReport+0x3f4>
    14ee:	85 36       	cpi	r24, 0x65	; 101
    14f0:	91 05       	cpc	r25, r1
    14f2:	74 f5       	brge	.+92     	; 0x1550 <USB_ProcessHIDReport+0x2b2>
    14f4:	84 32       	cpi	r24, 0x24	; 36
    14f6:	91 05       	cpc	r25, r1
    14f8:	09 f4       	brne	.+2      	; 0x14fc <USB_ProcessHIDReport+0x25e>
    14fa:	b2 c0       	rjmp	.+356    	; 0x1660 <USB_ProcessHIDReport+0x3c2>
    14fc:	85 32       	cpi	r24, 0x25	; 37
    14fe:	91 05       	cpc	r25, r1
    1500:	9c f4       	brge	.+38     	; 0x1528 <USB_ProcessHIDReport+0x28a>
    1502:	88 30       	cpi	r24, 0x08	; 8
    1504:	91 05       	cpc	r25, r1
    1506:	09 f4       	brne	.+2      	; 0x150a <USB_ProcessHIDReport+0x26c>
    1508:	2e c1       	rjmp	.+604    	; 0x1766 <USB_ProcessHIDReport+0x4c8>
    150a:	89 30       	cpi	r24, 0x09	; 9
    150c:	91 05       	cpc	r25, r1
    150e:	24 f4       	brge	.+8      	; 0x1518 <USB_ProcessHIDReport+0x27a>
    1510:	04 97       	sbiw	r24, 0x04	; 4
    1512:	09 f0       	breq	.+2      	; 0x1516 <USB_ProcessHIDReport+0x278>
    1514:	71 c2       	rjmp	.+1250   	; 0x19f8 <USB_ProcessHIDReport+0x75a>
    1516:	98 c0       	rjmp	.+304    	; 0x1648 <USB_ProcessHIDReport+0x3aa>
    1518:	84 31       	cpi	r24, 0x14	; 20
    151a:	91 05       	cpc	r25, r1
    151c:	09 f4       	brne	.+2      	; 0x1520 <USB_ProcessHIDReport+0x282>
    151e:	9a c0       	rjmp	.+308    	; 0x1654 <USB_ProcessHIDReport+0x3b6>
    1520:	48 97       	sbiw	r24, 0x18	; 24
    1522:	09 f0       	breq	.+2      	; 0x1526 <USB_ProcessHIDReport+0x288>
    1524:	69 c2       	rjmp	.+1234   	; 0x19f8 <USB_ProcessHIDReport+0x75a>
    1526:	47 c0       	rjmp	.+142    	; 0x15b6 <USB_ProcessHIDReport+0x318>
    1528:	84 33       	cpi	r24, 0x34	; 52
    152a:	91 05       	cpc	r25, r1
    152c:	09 f4       	brne	.+2      	; 0x1530 <USB_ProcessHIDReport+0x292>
    152e:	a0 c0       	rjmp	.+320    	; 0x1670 <USB_ProcessHIDReport+0x3d2>
    1530:	85 33       	cpi	r24, 0x35	; 53
    1532:	91 05       	cpc	r25, r1
    1534:	24 f4       	brge	.+8      	; 0x153e <USB_ProcessHIDReport+0x2a0>
    1536:	88 97       	sbiw	r24, 0x28	; 40
    1538:	09 f0       	breq	.+2      	; 0x153c <USB_ProcessHIDReport+0x29e>
    153a:	5e c2       	rjmp	.+1212   	; 0x19f8 <USB_ProcessHIDReport+0x75a>
    153c:	2f c1       	rjmp	.+606    	; 0x179c <USB_ProcessHIDReport+0x4fe>
    153e:	84 34       	cpi	r24, 0x44	; 68
    1540:	91 05       	cpc	r25, r1
    1542:	09 f4       	brne	.+2      	; 0x1546 <USB_ProcessHIDReport+0x2a8>
    1544:	9b c0       	rjmp	.+310    	; 0x167c <USB_ProcessHIDReport+0x3de>
    1546:	84 35       	cpi	r24, 0x54	; 84
    1548:	91 05       	cpc	r25, r1
    154a:	09 f0       	breq	.+2      	; 0x154e <USB_ProcessHIDReport+0x2b0>
    154c:	55 c2       	rjmp	.+1194   	; 0x19f8 <USB_ProcessHIDReport+0x75a>
    154e:	9e c0       	rjmp	.+316    	; 0x168c <USB_ProcessHIDReport+0x3ee>
    1550:	84 39       	cpi	r24, 0x94	; 148
    1552:	91 05       	cpc	r25, r1
    1554:	09 f4       	brne	.+2      	; 0x1558 <USB_ProcessHIDReport+0x2ba>
    1556:	a8 c0       	rjmp	.+336    	; 0x16a8 <USB_ProcessHIDReport+0x40a>
    1558:	85 39       	cpi	r24, 0x95	; 149
    155a:	91 05       	cpc	r25, r1
    155c:	a4 f4       	brge	.+40     	; 0x1586 <USB_ProcessHIDReport+0x2e8>
    155e:	80 38       	cpi	r24, 0x80	; 128
    1560:	91 05       	cpc	r25, r1
    1562:	69 f1       	breq	.+90     	; 0x15be <USB_ProcessHIDReport+0x320>
    1564:	81 38       	cpi	r24, 0x81	; 129
    1566:	91 05       	cpc	r25, r1
    1568:	2c f4       	brge	.+10     	; 0x1574 <USB_ProcessHIDReport+0x2d6>
    156a:	84 37       	cpi	r24, 0x74	; 116
    156c:	91 05       	cpc	r25, r1
    156e:	09 f0       	breq	.+2      	; 0x1572 <USB_ProcessHIDReport+0x2d4>
    1570:	43 c2       	rjmp	.+1158   	; 0x19f8 <USB_ProcessHIDReport+0x75a>
    1572:	97 c0       	rjmp	.+302    	; 0x16a2 <USB_ProcessHIDReport+0x404>
    1574:	84 38       	cpi	r24, 0x84	; 132
    1576:	91 05       	cpc	r25, r1
    1578:	09 f4       	brne	.+2      	; 0x157c <USB_ProcessHIDReport+0x2de>
    157a:	9a c0       	rjmp	.+308    	; 0x16b0 <USB_ProcessHIDReport+0x412>
    157c:	80 39       	cpi	r24, 0x90	; 144
    157e:	91 05       	cpc	r25, r1
    1580:	09 f0       	breq	.+2      	; 0x1584 <USB_ProcessHIDReport+0x2e6>
    1582:	3a c2       	rjmp	.+1140   	; 0x19f8 <USB_ProcessHIDReport+0x75a>
    1584:	1c c0       	rjmp	.+56     	; 0x15be <USB_ProcessHIDReport+0x320>
    1586:	80 3b       	cpi	r24, 0xB0	; 176
    1588:	91 05       	cpc	r25, r1
    158a:	c9 f0       	breq	.+50     	; 0x15be <USB_ProcessHIDReport+0x320>
    158c:	81 3b       	cpi	r24, 0xB1	; 177
    158e:	91 05       	cpc	r25, r1
    1590:	4c f4       	brge	.+18     	; 0x15a4 <USB_ProcessHIDReport+0x306>
    1592:	80 3a       	cpi	r24, 0xA0	; 160
    1594:	91 05       	cpc	r25, r1
    1596:	09 f4       	brne	.+2      	; 0x159a <USB_ProcessHIDReport+0x2fc>
    1598:	09 c1       	rjmp	.+530    	; 0x17ac <USB_ProcessHIDReport+0x50e>
    159a:	84 3a       	cpi	r24, 0xA4	; 164
    159c:	91 05       	cpc	r25, r1
    159e:	09 f0       	breq	.+2      	; 0x15a2 <USB_ProcessHIDReport+0x304>
    15a0:	2b c2       	rjmp	.+1110   	; 0x19f8 <USB_ProcessHIDReport+0x75a>
    15a2:	2a c0       	rjmp	.+84     	; 0x15f8 <USB_ProcessHIDReport+0x35a>
    15a4:	84 3b       	cpi	r24, 0xB4	; 180
    15a6:	91 05       	cpc	r25, r1
    15a8:	09 f4       	brne	.+2      	; 0x15ac <USB_ProcessHIDReport+0x30e>
    15aa:	3e c0       	rjmp	.+124    	; 0x1628 <USB_ProcessHIDReport+0x38a>
    15ac:	80 3c       	cpi	r24, 0xC0	; 192
    15ae:	91 05       	cpc	r25, r1
    15b0:	09 f0       	breq	.+2      	; 0x15b4 <USB_ProcessHIDReport+0x316>
    15b2:	22 c2       	rjmp	.+1092   	; 0x19f8 <USB_ProcessHIDReport+0x75a>
    15b4:	5a c1       	rjmp	.+692    	; 0x186a <USB_ProcessHIDReport+0x5cc>
    15b6:	f5 01       	movw	r30, r10
    15b8:	37 01       	movw	r6, r14
    15ba:	48 01       	movw	r8, r16
    15bc:	1e c2       	rjmp	.+1084   	; 0x19fa <USB_ProcessHIDReport+0x75c>
			case (TYPE_MAIN | TAG_MAIN_FEATURE):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    15be:	cb 57       	subi	r28, 0x7B	; 123
    15c0:	df 4f       	sbci	r29, 0xFF	; 255
    15c2:	c8 82       	st	Y, r12
    15c4:	c5 58       	subi	r28, 0x85	; 133
    15c6:	d0 40       	sbci	r29, 0x00	; 0
    15c8:	ca 57       	subi	r28, 0x7A	; 122
    15ca:	df 4f       	sbci	r29, 0xFF	; 255
    15cc:	d8 82       	st	Y, r13
    15ce:	c6 58       	subi	r28, 0x86	; 134
    15d0:	d0 40       	sbci	r29, 0x00	; 0
    15d2:	ec 96       	adiw	r28, 0x3c	; 60
    15d4:	1f ae       	std	Y+63, r1	; 0x3f
    15d6:	ec 97       	sbiw	r28, 0x3c	; 60
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
					}

					uint8_t ItemTag = (HIDReportItem & TAG_MASK);
    15d8:	20 7f       	andi	r18, 0xF0	; 240
    15da:	c9 57       	subi	r28, 0x79	; 121
    15dc:	df 4f       	sbci	r29, 0xFF	; 255
    15de:	28 83       	st	Y, r18
    15e0:	c7 58       	subi	r28, 0x87	; 135
    15e2:	d0 40       	sbci	r29, 0x00	; 0
					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					if (ParserData->LargestReportSizeBits < NewReportItem.BitOffset)
					  ParserData->LargestReportSizeBits = NewReportItem.BitOffset;

					if (!(ReportItemData & IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    15e4:	97 01       	movw	r18, r14
    15e6:	21 70       	andi	r18, 0x01	; 1
    15e8:	30 70       	andi	r19, 0x00	; 0
    15ea:	c8 57       	subi	r28, 0x78	; 120
    15ec:	df 4f       	sbci	r29, 0xFF	; 255
    15ee:	39 83       	std	Y+1, r19	; 0x01
    15f0:	28 83       	st	Y, r18
    15f2:	c8 58       	subi	r28, 0x88	; 136
    15f4:	d0 40       	sbci	r29, 0x00	; 0
    15f6:	f7 c1       	rjmp	.+1006   	; 0x19e6 <USB_ProcessHIDReport+0x748>
		}

		switch (HIDReportItem & (TYPE_MASK | TAG_MASK))
		{
			case (TYPE_GLOBAL | TAG_GLOBAL_PUSH):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
    15f8:	c4 57       	subi	r28, 0x74	; 116
    15fa:	df 4f       	sbci	r29, 0xFF	; 255
    15fc:	48 81       	ld	r20, Y
    15fe:	59 81       	ldd	r21, Y+1	; 0x01
    1600:	cc 58       	subi	r28, 0x8C	; 140
    1602:	d0 40       	sbci	r29, 0x00	; 0
    1604:	c4 16       	cp	r12, r20
    1606:	d5 06       	cpc	r13, r21
    1608:	11 f4       	brne	.+4      	; 0x160e <USB_ProcessHIDReport+0x370>
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	1d c2       	rjmp	.+1082   	; 0x1a48 <USB_ProcessHIDReport+0x7aa>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
    160e:	d6 01       	movw	r26, r12
    1610:	5c 96       	adiw	r26, 0x1c	; 28
    1612:	f6 01       	movw	r30, r12
    1614:	8a e2       	ldi	r24, 0x2A	; 42
    1616:	01 90       	ld	r0, Z+
    1618:	0d 92       	st	X+, r0
    161a:	81 50       	subi	r24, 0x01	; 1
    161c:	e1 f7       	brne	.-8      	; 0x1616 <USB_ProcessHIDReport+0x378>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
    161e:	8c e1       	ldi	r24, 0x1C	; 28
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	c8 0e       	add	r12, r24
    1624:	d9 1e       	adc	r13, r25
    1626:	e8 c1       	rjmp	.+976    	; 0x19f8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_POP):
				if (CurrStateTable == &StateTable[0])
    1628:	cc 56       	subi	r28, 0x6C	; 108
    162a:	df 4f       	sbci	r29, 0xFF	; 255
    162c:	a8 81       	ld	r26, Y
    162e:	b9 81       	ldd	r27, Y+1	; 0x01
    1630:	c4 59       	subi	r28, 0x94	; 148
    1632:	d0 40       	sbci	r29, 0x00	; 0
    1634:	ca 16       	cp	r12, r26
    1636:	db 06       	cpc	r13, r27
    1638:	11 f4       	brne	.+4      	; 0x163e <USB_ProcessHIDReport+0x3a0>
    163a:	82 e0       	ldi	r24, 0x02	; 2
    163c:	05 c2       	rjmp	.+1034   	; 0x1a48 <USB_ProcessHIDReport+0x7aa>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
    163e:	e4 ee       	ldi	r30, 0xE4	; 228
    1640:	ff ef       	ldi	r31, 0xFF	; 255
    1642:	ce 0e       	add	r12, r30
    1644:	df 1e       	adc	r13, r31
    1646:	d8 c1       	rjmp	.+944    	; 0x19f8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_USAGEPAGE):
				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
    1648:	d6 01       	movw	r26, r12
    164a:	12 96       	adiw	r26, 0x02	; 2
    164c:	fc 92       	st	X, r15
    164e:	ee 92       	st	-X, r14
    1650:	11 97       	sbiw	r26, 0x01	; 1
    1652:	d2 c1       	rjmp	.+932    	; 0x19f8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_LOGICALMIN):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
    1654:	f6 01       	movw	r30, r12
    1656:	e2 86       	std	Z+10, r14	; 0x0a
    1658:	f3 86       	std	Z+11, r15	; 0x0b
    165a:	04 87       	std	Z+12, r16	; 0x0c
    165c:	15 87       	std	Z+13, r17	; 0x0d
    165e:	cc c1       	rjmp	.+920    	; 0x19f8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_LOGICALMAX):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
    1660:	d6 01       	movw	r26, r12
    1662:	1e 96       	adiw	r26, 0x0e	; 14
    1664:	ed 92       	st	X+, r14
    1666:	fd 92       	st	X+, r15
    1668:	0d 93       	st	X+, r16
    166a:	1c 93       	st	X, r17
    166c:	51 97       	sbiw	r26, 0x11	; 17
    166e:	c4 c1       	rjmp	.+904    	; 0x19f8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_PHYSMIN):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
    1670:	f6 01       	movw	r30, r12
    1672:	e2 8a       	std	Z+18, r14	; 0x12
    1674:	f3 8a       	std	Z+19, r15	; 0x13
    1676:	04 8b       	std	Z+20, r16	; 0x14
    1678:	15 8b       	std	Z+21, r17	; 0x15
    167a:	be c1       	rjmp	.+892    	; 0x19f8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_PHYSMAX):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
    167c:	d6 01       	movw	r26, r12
    167e:	56 96       	adiw	r26, 0x16	; 22
    1680:	ed 92       	st	X+, r14
    1682:	fd 92       	st	X+, r15
    1684:	0d 93       	st	X+, r16
    1686:	1c 93       	st	X, r17
    1688:	59 97       	sbiw	r26, 0x19	; 25
    168a:	b6 c1       	rjmp	.+876    	; 0x19f8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_UNITEXP):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
    168c:	f6 01       	movw	r30, r12
    168e:	e1 86       	std	Z+9, r14	; 0x09
    1690:	b3 c1       	rjmp	.+870    	; 0x19f8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_UNIT):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
    1692:	d6 01       	movw	r26, r12
    1694:	15 96       	adiw	r26, 0x05	; 5
    1696:	ed 92       	st	X+, r14
    1698:	fd 92       	st	X+, r15
    169a:	0d 93       	st	X+, r16
    169c:	1c 93       	st	X, r17
    169e:	18 97       	sbiw	r26, 0x08	; 8
    16a0:	ab c1       	rjmp	.+854    	; 0x19f8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_REPORTSIZE):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
    16a2:	f6 01       	movw	r30, r12
    16a4:	e0 82       	st	Z, r14
    16a6:	a8 c1       	rjmp	.+848    	; 0x19f8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_REPORTCOUNT):
				CurrStateTable->ReportCount                 = ReportItemData;
    16a8:	d6 01       	movw	r26, r12
    16aa:	5a 96       	adiw	r26, 0x1a	; 26
    16ac:	ec 92       	st	X, r14
    16ae:	a4 c1       	rjmp	.+840    	; 0x19f8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_GLOBAL | TAG_GLOBAL_REPORTID):
				CurrStateTable->ReportID                    = ReportItemData;
    16b0:	3e 2d       	mov	r19, r14
    16b2:	f6 01       	movw	r30, r12
    16b4:	e3 8e       	std	Z+27, r14	; 0x1b

				if (ParserData->UsingReportIDs)
    16b6:	c2 57       	subi	r28, 0x72	; 114
    16b8:	df 4f       	sbci	r29, 0xFF	; 255
    16ba:	a8 81       	ld	r26, Y
    16bc:	b9 81       	ldd	r27, Y+1	; 0x01
    16be:	ce 58       	subi	r28, 0x8E	; 142
    16c0:	d0 40       	sbci	r29, 0x00	; 0
    16c2:	8c 91       	ld	r24, X
    16c4:	88 23       	and	r24, r24
    16c6:	09 f4       	brne	.+2      	; 0x16ca <USB_ProcessHIDReport+0x42c>
    16c8:	40 c0       	rjmp	.+128    	; 0x174a <USB_ProcessHIDReport+0x4ac>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    16ca:	c0 57       	subi	r28, 0x70	; 112
    16cc:	df 4f       	sbci	r29, 0xFF	; 255
    16ce:	e8 81       	ld	r30, Y
    16d0:	f9 81       	ldd	r31, Y+1	; 0x01
    16d2:	c0 59       	subi	r28, 0x90	; 144
    16d4:	d0 40       	sbci	r29, 0x00	; 0
    16d6:	20 81       	ld	r18, Z
    16d8:	ce 56       	subi	r28, 0x6E	; 110
    16da:	df 4f       	sbci	r29, 0xFF	; 255
    16dc:	88 81       	ld	r24, Y
    16de:	c2 59       	subi	r28, 0x92	; 146
    16e0:	d0 40       	sbci	r29, 0x00	; 0
    16e2:	cd 56       	subi	r28, 0x6D	; 109
    16e4:	df 4f       	sbci	r29, 0xFF	; 255
    16e6:	98 81       	ld	r25, Y
    16e8:	c3 59       	subi	r28, 0x93	; 147
    16ea:	d0 40       	sbci	r29, 0x00	; 0
    16ec:	dc 01       	movw	r26, r24
    16ee:	e0 e0       	ldi	r30, 0x00	; 0
    16f0:	10 c0       	rjmp	.+32     	; 0x1712 <USB_ProcessHIDReport+0x474>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
    16f2:	8c 91       	ld	r24, X
    16f4:	17 96       	adiw	r26, 0x07	; 7
    16f6:	83 17       	cp	r24, r19
    16f8:	59 f4       	brne	.+22     	; 0x1710 <USB_ProcessHIDReport+0x472>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
    16fa:	87 e0       	ldi	r24, 0x07	; 7
    16fc:	e8 9f       	mul	r30, r24
    16fe:	20 01       	movw	r4, r0
    1700:	11 24       	eor	r1, r1
    1702:	20 e9       	ldi	r18, 0x90	; 144
    1704:	33 e0       	ldi	r19, 0x03	; 3
    1706:	42 0e       	add	r4, r18
    1708:	53 1e       	adc	r5, r19
    170a:	42 0c       	add	r4, r2
    170c:	53 1c       	adc	r5, r3
    170e:	1d c0       	rjmp	.+58     	; 0x174a <USB_ProcessHIDReport+0x4ac>

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    1710:	ef 5f       	subi	r30, 0xFF	; 255
    1712:	e2 17       	cp	r30, r18
    1714:	70 f3       	brcs	.-36     	; 0x16f2 <USB_ProcessHIDReport+0x454>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
    1716:	2a 30       	cpi	r18, 0x0A	; 10
    1718:	11 f4       	brne	.+4      	; 0x171e <USB_ProcessHIDReport+0x480>
    171a:	87 e0       	ldi	r24, 0x07	; 7
    171c:	95 c1       	rjmp	.+810    	; 0x1a48 <USB_ProcessHIDReport+0x7aa>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
    171e:	87 e0       	ldi	r24, 0x07	; 7
    1720:	28 9f       	mul	r18, r24
    1722:	20 01       	movw	r4, r0
    1724:	11 24       	eor	r1, r1
    1726:	40 e9       	ldi	r20, 0x90	; 144
    1728:	53 e0       	ldi	r21, 0x03	; 3
    172a:	44 0e       	add	r4, r20
    172c:	55 1e       	adc	r5, r21
    172e:	42 0c       	add	r4, r2
    1730:	53 1c       	adc	r5, r3
    1732:	2f 5f       	subi	r18, 0xFF	; 255
    1734:	c0 57       	subi	r28, 0x70	; 112
    1736:	df 4f       	sbci	r29, 0xFF	; 255
    1738:	a8 81       	ld	r26, Y
    173a:	b9 81       	ldd	r27, Y+1	; 0x01
    173c:	c0 59       	subi	r28, 0x90	; 144
    173e:	d0 40       	sbci	r29, 0x00	; 0
    1740:	2c 93       	st	X, r18
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    1742:	f2 01       	movw	r30, r4
    1744:	11 92       	st	Z+, r1
    1746:	8a 95       	dec	r24
    1748:	e9 f7       	brne	.-6      	; 0x1744 <USB_ProcessHIDReport+0x4a6>
					}
				}

				ParserData->UsingReportIDs = true;
    174a:	e1 e0       	ldi	r30, 0x01	; 1
    174c:	c2 57       	subi	r28, 0x72	; 114
    174e:	df 4f       	sbci	r29, 0xFF	; 255
    1750:	a8 81       	ld	r26, Y
    1752:	b9 81       	ldd	r27, Y+1	; 0x01
    1754:	ce 58       	subi	r28, 0x8E	; 142
    1756:	d0 40       	sbci	r29, 0x00	; 0
    1758:	ec 93       	st	X, r30

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
    175a:	d6 01       	movw	r26, r12
    175c:	5b 96       	adiw	r26, 0x1b	; 27
    175e:	8c 91       	ld	r24, X
    1760:	f2 01       	movw	r30, r4
    1762:	80 83       	st	Z, r24
    1764:	49 c1       	rjmp	.+658    	; 0x19f8 <USB_ProcessHIDReport+0x75a>
				break;
			case (TYPE_LOCAL | TAG_LOCAL_USAGE):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
    1766:	ed 96       	adiw	r28, 0x3d	; 61
    1768:	ff ad       	ldd	r31, Y+63	; 0x3f
    176a:	ed 97       	sbiw	r28, 0x3d	; 61
    176c:	f8 30       	cpi	r31, 0x08	; 8
    176e:	11 f4       	brne	.+4      	; 0x1774 <USB_ProcessHIDReport+0x4d6>
    1770:	86 e0       	ldi	r24, 0x06	; 6
    1772:	6a c1       	rjmp	.+724    	; 0x1a48 <USB_ProcessHIDReport+0x7aa>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
    1774:	ed 96       	adiw	r28, 0x3d	; 61
    1776:	2f ad       	ldd	r18, Y+63	; 0x3f
    1778:	ed 97       	sbiw	r28, 0x3d	; 61
    177a:	e2 2f       	mov	r30, r18
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	ee 0f       	add	r30, r30
    1780:	ff 1f       	adc	r31, r31
    1782:	41 e0       	ldi	r20, 0x01	; 1
    1784:	50 e0       	ldi	r21, 0x00	; 0
    1786:	4c 0f       	add	r20, r28
    1788:	5d 1f       	adc	r21, r29
    178a:	e4 0f       	add	r30, r20
    178c:	f5 1f       	adc	r31, r21
    178e:	f1 82       	std	Z+1, r15	; 0x01
    1790:	e0 82       	st	Z, r14
    1792:	2f 5f       	subi	r18, 0xFF	; 255
    1794:	ed 96       	adiw	r28, 0x3d	; 61
    1796:	2f af       	std	Y+63, r18	; 0x3f
    1798:	ed 97       	sbiw	r28, 0x3d	; 61
    179a:	2e c1       	rjmp	.+604    	; 0x19f8 <USB_ProcessHIDReport+0x75a>
				break;
    179c:	f5 01       	movw	r30, r10
    179e:	eb 96       	adiw	r28, 0x3b	; 59
    17a0:	ec ae       	std	Y+60, r14	; 0x3c
    17a2:	fd ae       	std	Y+61, r15	; 0x3d
    17a4:	0e af       	std	Y+62, r16	; 0x3e
    17a6:	1f af       	std	Y+63, r17	; 0x3f
    17a8:	eb 97       	sbiw	r28, 0x3b	; 59
    17aa:	27 c1       	rjmp	.+590    	; 0x19fa <USB_ProcessHIDReport+0x75c>
				break;
			case (TYPE_LOCAL | TAG_LOCAL_USAGEMAX):
				UsageMinMax.Maximum = ReportItemData;
				break;
			case (TYPE_MAIN | TAG_MAIN_COLLECTION):
				if (CurrCollectionPath == NULL)
    17ac:	a1 14       	cp	r10, r1
    17ae:	b1 04       	cpc	r11, r1
    17b0:	29 f4       	brne	.+10     	; 0x17bc <USB_ProcessHIDReport+0x51e>
    17b2:	e7 96       	adiw	r28, 0x37	; 55
    17b4:	ee ad       	ldd	r30, Y+62	; 0x3e
    17b6:	ff ad       	ldd	r31, Y+63	; 0x3f
    17b8:	e7 97       	sbiw	r28, 0x37	; 55
    17ba:	15 c0       	rjmp	.+42     	; 0x17e6 <USB_ProcessHIDReport+0x548>
    17bc:	e5 96       	adiw	r28, 0x35	; 53
    17be:	ee ad       	ldd	r30, Y+62	; 0x3e
    17c0:	ff ad       	ldd	r31, Y+63	; 0x3f
    17c2:	e5 97       	sbiw	r28, 0x35	; 53
    17c4:	0a c0       	rjmp	.+20     	; 0x17da <USB_ProcessHIDReport+0x53c>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    17c6:	ef 96       	adiw	r28, 0x3f	; 63
    17c8:	8e ad       	ldd	r24, Y+62	; 0x3e
    17ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    17cc:	ef 97       	sbiw	r28, 0x3f	; 63
    17ce:	e8 17       	cp	r30, r24
    17d0:	f9 07       	cpc	r31, r25
    17d2:	11 f4       	brne	.+4      	; 0x17d8 <USB_ProcessHIDReport+0x53a>
    17d4:	85 e0       	ldi	r24, 0x05	; 5
    17d6:	38 c1       	rjmp	.+624    	; 0x1a48 <USB_ProcessHIDReport+0x7aa>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
    17d8:	37 96       	adiw	r30, 0x07	; 7
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
    17da:	85 81       	ldd	r24, Z+5	; 0x05
    17dc:	96 81       	ldd	r25, Z+6	; 0x06
    17de:	89 2b       	or	r24, r25
    17e0:	91 f7       	brne	.-28     	; 0x17c6 <USB_ProcessHIDReport+0x528>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
    17e2:	b6 82       	std	Z+6, r11	; 0x06
    17e4:	a5 82       	std	Z+5, r10	; 0x05
				}

				CurrCollectionPath->Type = ReportItemData;
    17e6:	e0 82       	st	Z, r14
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
    17e8:	d6 01       	movw	r26, r12
    17ea:	11 96       	adiw	r26, 0x01	; 1
    17ec:	8d 91       	ld	r24, X+
    17ee:	9c 91       	ld	r25, X
    17f0:	12 97       	sbiw	r26, 0x02	; 2
    17f2:	92 83       	std	Z+2, r25	; 0x02
    17f4:	81 83       	std	Z+1, r24	; 0x01

				if (UsageListSize)
    17f6:	ed 96       	adiw	r28, 0x3d	; 61
    17f8:	bf ad       	ldd	r27, Y+63	; 0x3f
    17fa:	ed 97       	sbiw	r28, 0x3d	; 61
    17fc:	bb 23       	and	r27, r27
    17fe:	09 f1       	breq	.+66     	; 0x1842 <USB_ProcessHIDReport+0x5a4>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	9a 81       	ldd	r25, Y+2	; 0x02
    1804:	94 83       	std	Z+4, r25	; 0x04
    1806:	83 83       	std	Z+3, r24	; 0x03
    1808:	de 01       	movw	r26, r28
    180a:	11 96       	adiw	r26, 0x01	; 1

					for (uint8_t i = 0; i < UsageListSize; i++)
    180c:	ed 96       	adiw	r28, 0x3d	; 61
    180e:	4f ad       	ldd	r20, Y+63	; 0x3f
    1810:	ed 97       	sbiw	r28, 0x3d	; 61
    1812:	24 2f       	mov	r18, r20
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	22 0f       	add	r18, r18
    1818:	33 1f       	adc	r19, r19
    181a:	2a 0f       	add	r18, r26
    181c:	3b 1f       	adc	r19, r27
    181e:	06 c0       	rjmp	.+12     	; 0x182c <USB_ProcessHIDReport+0x58e>
					  UsageList[i] = UsageList[i + 1];
    1820:	12 96       	adiw	r26, 0x02	; 2
    1822:	8d 91       	ld	r24, X+
    1824:	9c 91       	ld	r25, X
    1826:	13 97       	sbiw	r26, 0x03	; 3
    1828:	8d 93       	st	X+, r24
    182a:	9d 93       	st	X+, r25

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
    182c:	a2 17       	cp	r26, r18
    182e:	b3 07       	cpc	r27, r19
    1830:	b9 f7       	brne	.-18     	; 0x1820 <USB_ProcessHIDReport+0x582>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
    1832:	ed 96       	adiw	r28, 0x3d	; 61
    1834:	9f ad       	ldd	r25, Y+63	; 0x3f
    1836:	ed 97       	sbiw	r28, 0x3d	; 61
    1838:	91 50       	subi	r25, 0x01	; 1
    183a:	ed 96       	adiw	r28, 0x3d	; 61
    183c:	9f af       	std	Y+63, r25	; 0x3f
    183e:	ed 97       	sbiw	r28, 0x3d	; 61
    1840:	dc c0       	rjmp	.+440    	; 0x19fa <USB_ProcessHIDReport+0x75c>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    1842:	eb 96       	adiw	r28, 0x3b	; 59
    1844:	2c ad       	ldd	r18, Y+60	; 0x3c
    1846:	3d ad       	ldd	r19, Y+61	; 0x3d
    1848:	4e ad       	ldd	r20, Y+62	; 0x3e
    184a:	5f ad       	ldd	r21, Y+63	; 0x3f
    184c:	eb 97       	sbiw	r28, 0x3b	; 59
    184e:	26 15       	cp	r18, r6
    1850:	37 05       	cpc	r19, r7
    1852:	48 05       	cpc	r20, r8
    1854:	59 05       	cpc	r21, r9
    1856:	08 f4       	brcc	.+2      	; 0x185a <USB_ProcessHIDReport+0x5bc>
    1858:	d0 c0       	rjmp	.+416    	; 0x19fa <USB_ProcessHIDReport+0x75c>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
    185a:	74 82       	std	Z+4, r7	; 0x04
    185c:	63 82       	std	Z+3, r6	; 0x03
    185e:	08 94       	sec
    1860:	61 1c       	adc	r6, r1
    1862:	71 1c       	adc	r7, r1
    1864:	81 1c       	adc	r8, r1
    1866:	91 1c       	adc	r9, r1
    1868:	c8 c0       	rjmp	.+400    	; 0x19fa <USB_ProcessHIDReport+0x75c>
				}

				break;
			case (TYPE_MAIN | TAG_MAIN_ENDCOLLECTION):
				if (CurrCollectionPath == NULL)
    186a:	a1 14       	cp	r10, r1
    186c:	b1 04       	cpc	r11, r1
    186e:	11 f4       	brne	.+4      	; 0x1874 <USB_ProcessHIDReport+0x5d6>
    1870:	84 e0       	ldi	r24, 0x04	; 4
    1872:	ea c0       	rjmp	.+468    	; 0x1a48 <USB_ProcessHIDReport+0x7aa>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
    1874:	d5 01       	movw	r26, r10
    1876:	15 96       	adiw	r26, 0x05	; 5
    1878:	ed 91       	ld	r30, X+
    187a:	fc 91       	ld	r31, X
    187c:	16 97       	sbiw	r26, 0x06	; 6
    187e:	bd c0       	rjmp	.+378    	; 0x19fa <USB_ProcessHIDReport+0x75c>
			case (TYPE_MAIN | TAG_MAIN_FEATURE):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    1880:	de 01       	movw	r26, r28
    1882:	59 96       	adiw	r26, 0x19	; 25
    1884:	cb 57       	subi	r28, 0x7B	; 123
    1886:	df 4f       	sbci	r29, 0xFF	; 255
    1888:	88 81       	ld	r24, Y
    188a:	c5 58       	subi	r28, 0x85	; 133
    188c:	d0 40       	sbci	r29, 0x00	; 0
    188e:	ca 57       	subi	r28, 0x7A	; 122
    1890:	df 4f       	sbci	r29, 0xFF	; 255
    1892:	98 81       	ld	r25, Y
    1894:	c6 58       	subi	r28, 0x86	; 134
    1896:	d0 40       	sbci	r29, 0x00	; 0
    1898:	9c 01       	movw	r18, r24
    189a:	f9 01       	movw	r30, r18
    189c:	8a e1       	ldi	r24, 0x1A	; 26
    189e:	01 90       	ld	r0, Z+
    18a0:	0d 92       	st	X+, r0
    18a2:	81 50       	subi	r24, 0x01	; 1
    18a4:	e1 f7       	brne	.-8      	; 0x189e <USB_ProcessHIDReport+0x600>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
    18a6:	fd 8a       	std	Y+21, r15	; 0x15
    18a8:	ec 8a       	std	Y+20, r14	; 0x14
					NewReportItem.CollectionPath = CurrCollectionPath;
    18aa:	b8 8e       	std	Y+24, r11	; 0x18
    18ac:	af 8a       	std	Y+23, r10	; 0x17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
    18ae:	f6 01       	movw	r30, r12
    18b0:	83 8d       	ldd	r24, Z+27	; 0x1b
    18b2:	8e 8b       	std	Y+22, r24	; 0x16

					if (UsageListSize)
    18b4:	ed 96       	adiw	r28, 0x3d	; 61
    18b6:	ff ad       	ldd	r31, Y+63	; 0x3f
    18b8:	ed 97       	sbiw	r28, 0x3d	; 61
    18ba:	ff 23       	and	r31, r31
    18bc:	f9 f0       	breq	.+62     	; 0x18fc <USB_ProcessHIDReport+0x65e>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    18be:	49 81       	ldd	r20, Y+1	; 0x01
    18c0:	5a 81       	ldd	r21, Y+2	; 0x02
    18c2:	fe 01       	movw	r30, r28
    18c4:	31 96       	adiw	r30, 0x01	; 1

						for (uint8_t i = 0; i < UsageListSize; i++)
    18c6:	ed 96       	adiw	r28, 0x3d	; 61
    18c8:	8f ad       	ldd	r24, Y+63	; 0x3f
    18ca:	ed 97       	sbiw	r28, 0x3d	; 61
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	22 0f       	add	r18, r18
    18d2:	33 1f       	adc	r19, r19
    18d4:	2e 0f       	add	r18, r30
    18d6:	3f 1f       	adc	r19, r31
    18d8:	04 c0       	rjmp	.+8      	; 0x18e2 <USB_ProcessHIDReport+0x644>
						  UsageList[i] = UsageList[i + 1];
    18da:	82 81       	ldd	r24, Z+2	; 0x02
    18dc:	93 81       	ldd	r25, Z+3	; 0x03
    18de:	81 93       	st	Z+, r24
    18e0:	91 93       	st	Z+, r25

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
    18e2:	e2 17       	cp	r30, r18
    18e4:	f3 07       	cpc	r31, r19
    18e6:	c9 f7       	brne	.-14     	; 0x18da <USB_ProcessHIDReport+0x63c>
					NewReportItem.CollectionPath = CurrCollectionPath;
					NewReportItem.ReportID       = CurrStateTable->ReportID;

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    18e8:	5d 8f       	std	Y+29, r21	; 0x1d
    18ea:	4c 8f       	std	Y+28, r20	; 0x1c

						for (uint8_t i = 0; i < UsageListSize; i++)
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
    18ec:	ed 96       	adiw	r28, 0x3d	; 61
    18ee:	bf ad       	ldd	r27, Y+63	; 0x3f
    18f0:	ed 97       	sbiw	r28, 0x3d	; 61
    18f2:	b1 50       	subi	r27, 0x01	; 1
    18f4:	ed 96       	adiw	r28, 0x3d	; 61
    18f6:	bf af       	std	Y+63, r27	; 0x3f
    18f8:	ed 97       	sbiw	r28, 0x3d	; 61
    18fa:	12 c0       	rjmp	.+36     	; 0x1920 <USB_ProcessHIDReport+0x682>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    18fc:	eb 96       	adiw	r28, 0x3b	; 59
    18fe:	2c ad       	ldd	r18, Y+60	; 0x3c
    1900:	3d ad       	ldd	r19, Y+61	; 0x3d
    1902:	4e ad       	ldd	r20, Y+62	; 0x3e
    1904:	5f ad       	ldd	r21, Y+63	; 0x3f
    1906:	eb 97       	sbiw	r28, 0x3b	; 59
    1908:	26 15       	cp	r18, r6
    190a:	37 05       	cpc	r19, r7
    190c:	48 05       	cpc	r20, r8
    190e:	59 05       	cpc	r21, r9
    1910:	38 f0       	brcs	.+14     	; 0x1920 <USB_ProcessHIDReport+0x682>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
    1912:	7d 8e       	std	Y+29, r7	; 0x1d
    1914:	6c 8e       	std	Y+28, r6	; 0x1c
    1916:	08 94       	sec
    1918:	61 1c       	adc	r6, r1
    191a:	71 1c       	adc	r7, r1
    191c:	81 1c       	adc	r8, r1
    191e:	91 1c       	adc	r9, r1
					}

					uint8_t ItemTag = (HIDReportItem & TAG_MASK);

					if (ItemTag == TAG_MAIN_INPUT)
    1920:	c9 57       	subi	r28, 0x79	; 121
    1922:	df 4f       	sbci	r29, 0xFF	; 255
    1924:	38 81       	ld	r19, Y
    1926:	c7 58       	subi	r28, 0x87	; 135
    1928:	d0 40       	sbci	r29, 0x00	; 0
    192a:	30 38       	cpi	r19, 0x80	; 128
    192c:	11 f4       	brne	.+4      	; 0x1932 <USB_ProcessHIDReport+0x694>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
    192e:	1b 8a       	std	Y+19, r1	; 0x13
    1930:	0c c0       	rjmp	.+24     	; 0x194a <USB_ProcessHIDReport+0x6ac>
					else if (ItemTag == TAG_MAIN_OUTPUT)
    1932:	c9 57       	subi	r28, 0x79	; 121
    1934:	df 4f       	sbci	r29, 0xFF	; 255
    1936:	48 81       	ld	r20, Y
    1938:	c7 58       	subi	r28, 0x87	; 135
    193a:	d0 40       	sbci	r29, 0x00	; 0
    193c:	40 39       	cpi	r20, 0x90	; 144
    193e:	19 f4       	brne	.+6      	; 0x1946 <USB_ProcessHIDReport+0x6a8>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
    1940:	51 e0       	ldi	r21, 0x01	; 1
    1942:	5b 8b       	std	Y+19, r21	; 0x13
    1944:	02 c0       	rjmp	.+4      	; 0x194a <USB_ProcessHIDReport+0x6ac>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
    1946:	82 e0       	ldi	r24, 0x02	; 2
    1948:	8b 8b       	std	Y+19, r24	; 0x13

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
    194a:	eb 89       	ldd	r30, Y+19	; 0x13
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	ee 0f       	add	r30, r30
    1950:	ff 1f       	adc	r31, r31
    1952:	e4 0d       	add	r30, r4
    1954:	f5 1d       	adc	r31, r5
    1956:	81 81       	ldd	r24, Z+1	; 0x01
    1958:	92 81       	ldd	r25, Z+2	; 0x02
    195a:	9a 8b       	std	Y+18, r25	; 0x12
    195c:	89 8b       	std	Y+17, r24	; 0x11

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
    195e:	d6 01       	movw	r26, r12
    1960:	2c 91       	ld	r18, X
    1962:	81 81       	ldd	r24, Z+1	; 0x01
    1964:	92 81       	ldd	r25, Z+2	; 0x02
    1966:	82 0f       	add	r24, r18
    1968:	91 1d       	adc	r25, r1
    196a:	92 83       	std	Z+2, r25	; 0x02
    196c:	81 83       	std	Z+1, r24	; 0x01

					if (ParserData->LargestReportSizeBits < NewReportItem.BitOffset)
    196e:	29 89       	ldd	r18, Y+17	; 0x11
    1970:	3a 89       	ldd	r19, Y+18	; 0x12
    1972:	c6 57       	subi	r28, 0x76	; 118
    1974:	df 4f       	sbci	r29, 0xFF	; 255
    1976:	e8 81       	ld	r30, Y
    1978:	f9 81       	ldd	r31, Y+1	; 0x01
    197a:	ca 58       	subi	r28, 0x8A	; 138
    197c:	d0 40       	sbci	r29, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	91 81       	ldd	r25, Z+1	; 0x01
    1982:	82 17       	cp	r24, r18
    1984:	93 07       	cpc	r25, r19
    1986:	10 f4       	brcc	.+4      	; 0x198c <USB_ProcessHIDReport+0x6ee>
					  ParserData->LargestReportSizeBits = NewReportItem.BitOffset;
    1988:	31 83       	std	Z+1, r19	; 0x01
    198a:	20 83       	st	Z, r18

					if (!(ReportItemData & IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    198c:	c8 57       	subi	r28, 0x78	; 120
    198e:	df 4f       	sbci	r29, 0xFF	; 255
    1990:	28 81       	ld	r18, Y
    1992:	39 81       	ldd	r19, Y+1	; 0x01
    1994:	c8 58       	subi	r28, 0x88	; 136
    1996:	d0 40       	sbci	r29, 0x00	; 0
    1998:	23 2b       	or	r18, r19
    199a:	f1 f4       	brne	.+60     	; 0x19d8 <USB_ProcessHIDReport+0x73a>
    199c:	ce 01       	movw	r24, r28
    199e:	41 96       	adiw	r24, 0x11	; 17
    19a0:	0e 94 3e 01 	call	0x27c	; 0x27c <CALLBACK_HIDParser_FilterHIDReportItem>
    19a4:	88 23       	and	r24, r24
    19a6:	c1 f0       	breq	.+48     	; 0x19d8 <USB_ProcessHIDReport+0x73a>
					{
						if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
    19a8:	d1 01       	movw	r26, r2
    19aa:	8c 91       	ld	r24, X
    19ac:	84 31       	cpi	r24, 0x14	; 20
    19ae:	11 f4       	brne	.+4      	; 0x19b4 <USB_ProcessHIDReport+0x716>
    19b0:	83 e0       	ldi	r24, 0x03	; 3
    19b2:	4a c0       	rjmp	.+148    	; 0x1a48 <USB_ProcessHIDReport+0x7aa>
						  return HID_PARSE_InsufficientReportItems;

						memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
    19b4:	ba e2       	ldi	r27, 0x2A	; 42
    19b6:	8b 9f       	mul	r24, r27
    19b8:	f0 01       	movw	r30, r0
    19ba:	11 24       	eor	r1, r1
    19bc:	31 96       	adiw	r30, 0x01	; 1
    19be:	e2 0d       	add	r30, r2
    19c0:	f3 1d       	adc	r31, r3
    19c2:	de 01       	movw	r26, r28
    19c4:	51 96       	adiw	r26, 0x11	; 17
    19c6:	8a e2       	ldi	r24, 0x2A	; 42
    19c8:	0d 90       	ld	r0, X+
    19ca:	01 92       	st	Z+, r0
    19cc:	81 50       	subi	r24, 0x01	; 1
    19ce:	e1 f7       	brne	.-8      	; 0x19c8 <USB_ProcessHIDReport+0x72a>
						       &NewReportItem, sizeof(HID_ReportItem_t));

						ParserData->TotalReportItems++;
    19d0:	f1 01       	movw	r30, r2
    19d2:	80 81       	ld	r24, Z
    19d4:	8f 5f       	subi	r24, 0xFF	; 255
    19d6:	80 83       	st	Z, r24
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case (TYPE_MAIN | TAG_MAIN_INPUT):
			case (TYPE_MAIN | TAG_MAIN_OUTPUT):
			case (TYPE_MAIN | TAG_MAIN_FEATURE):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
    19d8:	ec 96       	adiw	r28, 0x3c	; 60
    19da:	ff ad       	ldd	r31, Y+63	; 0x3f
    19dc:	ec 97       	sbiw	r28, 0x3c	; 60
    19de:	ff 5f       	subi	r31, 0xFF	; 255
    19e0:	ec 96       	adiw	r28, 0x3c	; 60
    19e2:	ff af       	std	Y+63, r31	; 0x3f
    19e4:	ec 97       	sbiw	r28, 0x3c	; 60
    19e6:	d6 01       	movw	r26, r12
    19e8:	5a 96       	adiw	r26, 0x1a	; 26
    19ea:	8c 91       	ld	r24, X
    19ec:	ec 96       	adiw	r28, 0x3c	; 60
    19ee:	bf ad       	ldd	r27, Y+63	; 0x3f
    19f0:	ec 97       	sbiw	r28, 0x3c	; 60
    19f2:	b8 17       	cp	r27, r24
    19f4:	08 f4       	brcc	.+2      	; 0x19f8 <USB_ProcessHIDReport+0x75a>
    19f6:	44 cf       	rjmp	.-376    	; 0x1880 <USB_ProcessHIDReport+0x5e2>
    19f8:	f5 01       	movw	r30, r10
				}

				break;
		}

		if ((HIDReportItem & TYPE_MASK) == TYPE_MAIN)
    19fa:	c1 58       	subi	r28, 0x81	; 129
    19fc:	df 4f       	sbci	r29, 0xFF	; 255
    19fe:	28 81       	ld	r18, Y
    1a00:	39 81       	ldd	r19, Y+1	; 0x01
    1a02:	cf 57       	subi	r28, 0x7F	; 127
    1a04:	d0 40       	sbci	r29, 0x00	; 0
    1a06:	2c 70       	andi	r18, 0x0C	; 12
    1a08:	30 70       	andi	r19, 0x00	; 0
    1a0a:	23 2b       	or	r18, r19
    1a0c:	61 f4       	brne	.+24     	; 0x1a26 <USB_ProcessHIDReport+0x788>
    1a0e:	ed 96       	adiw	r28, 0x3d	; 61
    1a10:	1f ae       	std	Y+63, r1	; 0x3f
    1a12:	ed 97       	sbiw	r28, 0x3d	; 61
    1a14:	eb 96       	adiw	r28, 0x3b	; 59
    1a16:	1c ae       	std	Y+60, r1	; 0x3c
    1a18:	1d ae       	std	Y+61, r1	; 0x3d
    1a1a:	1e ae       	std	Y+62, r1	; 0x3e
    1a1c:	1f ae       	std	Y+63, r1	; 0x3f
    1a1e:	eb 97       	sbiw	r28, 0x3b	; 59
    1a20:	66 24       	eor	r6, r6
    1a22:	77 24       	eor	r7, r7
    1a24:	43 01       	movw	r8, r6
    1a26:	5f 01       	movw	r10, r30
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
    1a28:	cd 57       	subi	r28, 0x7D	; 125
    1a2a:	df 4f       	sbci	r29, 0xFF	; 255
    1a2c:	48 81       	ld	r20, Y
    1a2e:	59 81       	ldd	r21, Y+1	; 0x01
    1a30:	c3 58       	subi	r28, 0x83	; 131
    1a32:	d0 40       	sbci	r29, 0x00	; 0
    1a34:	45 2b       	or	r20, r21
    1a36:	09 f0       	breq	.+2      	; 0x1a3a <USB_ProcessHIDReport+0x79c>
    1a38:	ce cc       	rjmp	.-1636   	; 0x13d6 <USB_ProcessHIDReport+0x138>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
    1a3a:	d1 01       	movw	r26, r2
    1a3c:	8c 91       	ld	r24, X
    1a3e:	88 23       	and	r24, r24
    1a40:	11 f0       	breq	.+4      	; 0x1a46 <USB_ProcessHIDReport+0x7a8>
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	01 c0       	rjmp	.+2      	; 0x1a48 <USB_ProcessHIDReport+0x7aa>
    1a46:	88 e0       	ldi	r24, 0x08	; 8
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
    1a48:	cb 56       	subi	r28, 0x6B	; 107
    1a4a:	df 4f       	sbci	r29, 0xFF	; 255
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	de bf       	out	0x3e, r29	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	cd bf       	out	0x3d, r28	; 61
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	1f 91       	pop	r17
    1a5c:	0f 91       	pop	r16
    1a5e:	ff 90       	pop	r15
    1a60:	ef 90       	pop	r14
    1a62:	df 90       	pop	r13
    1a64:	cf 90       	pop	r12
    1a66:	bf 90       	pop	r11
    1a68:	af 90       	pop	r10
    1a6a:	9f 90       	pop	r9
    1a6c:	8f 90       	pop	r8
    1a6e:	7f 90       	pop	r7
    1a70:	6f 90       	pop	r6
    1a72:	5f 90       	pop	r5
    1a74:	4f 90       	pop	r4
    1a76:	3f 90       	pop	r3
    1a78:	2f 90       	pop	r2
    1a7a:	08 95       	ret

00001a7c <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    1a7c:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1a7e:	81 81       	ldd	r24, Z+1	; 0x01
    1a80:	84 30       	cpi	r24, 0x04	; 4
    1a82:	29 f4       	brne	.+10     	; 0x1a8e <DCOMP_HID_Host_NextHIDInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    1a84:	85 81       	ldd	r24, Z+5	; 0x05
    1a86:	83 30       	cpi	r24, 0x03	; 3
    1a88:	11 f4       	brne	.+4      	; 0x1a8e <DCOMP_HID_Host_NextHIDInterface+0x12>
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	08 95       	ret
    1a8e:	82 e0       	ldi	r24, 0x02	; 2
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1a90:	08 95       	ret

00001a92 <DCOMP_HID_Host_NextHID>:

static uint8_t DCOMP_HID_Host_NextHID(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    1a92:	fc 01       	movw	r30, r24
    1a94:	81 81       	ldd	r24, Z+1	; 0x01
    1a96:	81 32       	cpi	r24, 0x21	; 33
    1a98:	11 f4       	brne	.+4      	; 0x1a9e <DCOMP_HID_Host_NextHID+0xc>
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	08 95       	ret
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    1a9e:	84 30       	cpi	r24, 0x04	; 4
    1aa0:	11 f0       	breq	.+4      	; 0x1aa6 <DCOMP_HID_Host_NextHID+0x14>
    1aa2:	82 e0       	ldi	r24, 0x02	; 2
    1aa4:	08 95       	ret
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
    1aa8:	08 95       	ret

00001aaa <HID_Host_IsReportReceived>:
		return USB_Host_SendControlRequest(Buffer);
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1aaa:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1aac:	80 91 1f 05 	lds	r24, 0x051F
    1ab0:	8c 30       	cpi	r24, 0x0C	; 12
    1ab2:	a1 f4       	brne	.+40     	; 0x1adc <HID_Host_IsReportReceived+0x32>
    1ab4:	87 81       	ldd	r24, Z+7	; 0x07
    1ab6:	88 23       	and	r24, r24
    1ab8:	89 f0       	breq	.+34     	; 0x1adc <HID_Host_IsReportReceived+0x32>
	  return false;

	bool ReportReceived;

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipeNumber);
    1aba:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1abc:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1ac0:	80 91 a9 00 	lds	r24, 0x00A9
    1ac4:	8f 7b       	andi	r24, 0xBF	; 191
    1ac6:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1aca:	90 91 a6 00 	lds	r25, 0x00A6
    1ace:	91 70       	andi	r25, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1ad0:	80 91 a9 00 	lds	r24, 0x00A9
    1ad4:	80 64       	ori	r24, 0x40	; 64
    1ad6:	80 93 a9 00 	sts	0x00A9, r24
    1ada:	01 c0       	rjmp	.+2      	; 0x1ade <HID_Host_IsReportReceived+0x34>

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    1adc:	90 e0       	ldi	r25, 0x00	; 0
}
    1ade:	89 2f       	mov	r24, r25
    1ae0:	08 95       	ret

00001ae2 <HID_Host_SetReportProtocol>:
	return HOST_SENDCONTROL_Successful;
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1ae2:	cf 92       	push	r12
    1ae4:	df 92       	push	r13
    1ae6:	ef 92       	push	r14
    1ae8:	ff 92       	push	r15
    1aea:	0f 93       	push	r16
    1aec:	1f 93       	push	r17
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	8c 01       	movw	r16, r24

	uint8_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1af8:	cd b6       	in	r12, 0x3d	; 61
    1afa:	de b6       	in	r13, 0x3e	; 62
#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	uint8_t HIDReportData[HIDInterfaceInfo->State.HIDReportSize];
    1afc:	dc 01       	movw	r26, r24
    1afe:	50 96       	adiw	r26, 0x10	; 16
    1b00:	4d 91       	ld	r20, X+
    1b02:	5c 91       	ld	r21, X
    1b04:	51 97       	sbiw	r26, 0x11	; 17
    1b06:	ed b7       	in	r30, 0x3d	; 61
    1b08:	fe b7       	in	r31, 0x3e	; 62
    1b0a:	e4 1b       	sub	r30, r20
    1b0c:	f5 0b       	sbc	r31, r21
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	fe bf       	out	0x3e, r31	; 62
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	ed bf       	out	0x3d, r30	; 61
    1b18:	2d b7       	in	r18, 0x3d	; 61
    1b1a:	3e b7       	in	r19, 0x3e	; 62
    1b1c:	2f 5f       	subi	r18, 0xFF	; 255
    1b1e:	3f 4f       	sbci	r19, 0xFF	; 255

	USB_ControlRequest = (USB_Request_Header_t)
    1b20:	18 96       	adiw	r26, 0x08	; 8
    1b22:	6c 91       	ld	r22, X
    1b24:	81 e8       	ldi	r24, 0x81	; 129
    1b26:	80 93 17 05 	sts	0x0517, r24
    1b2a:	86 e0       	ldi	r24, 0x06	; 6
    1b2c:	80 93 18 05 	sts	0x0518, r24
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	92 e2       	ldi	r25, 0x22	; 34
    1b34:	90 93 1a 05 	sts	0x051A, r25
    1b38:	80 93 19 05 	sts	0x0519, r24
    1b3c:	60 93 1b 05 	sts	0x051B, r22
    1b40:	10 92 1c 05 	sts	0x051C, r1
    1b44:	50 93 1e 05 	sts	0x051E, r21
    1b48:	40 93 1d 05 	sts	0x051D, r20
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1b4c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = HIDInterfaceInfo->State.HIDReportSize,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(HIDReportData)) != HOST_SENDCONTROL_Successful)
    1b50:	f2 2e       	mov	r15, r18
    1b52:	e3 2e       	mov	r14, r19
    1b54:	c9 01       	movw	r24, r18
    1b56:	c1 d9       	rcall	.-3198   	; 0xeda <USB_Host_SendControlRequest>
    1b58:	28 2f       	mov	r18, r24
    1b5a:	88 23       	and	r24, r24
    1b5c:	09 f0       	breq	.+2      	; 0x1b60 <HID_Host_SetReportProtocol+0x7e>
    1b5e:	4f c0       	rjmp	.+158    	; 0x1bfe <HID_Host_SetReportProtocol+0x11c>
	  return ErrorCode;

	if (HIDInterfaceInfo->State.UsingBootProtocol)
    1b60:	d8 01       	movw	r26, r16
    1b62:	1f 96       	adiw	r26, 0x0f	; 15
    1b64:	8c 91       	ld	r24, X
    1b66:	1f 97       	sbiw	r26, 0x0f	; 15
    1b68:	88 23       	and	r24, r24
    1b6a:	f1 f0       	breq	.+60     	; 0x1ba8 <HID_Host_SetReportProtocol+0xc6>
	{
		USB_ControlRequest = (USB_Request_Header_t)
    1b6c:	18 96       	adiw	r26, 0x08	; 8
    1b6e:	2c 91       	ld	r18, X
    1b70:	81 e2       	ldi	r24, 0x21	; 33
    1b72:	80 93 17 05 	sts	0x0517, r24
    1b76:	8b e0       	ldi	r24, 0x0B	; 11
    1b78:	80 93 18 05 	sts	0x0518, r24
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	90 93 1a 05 	sts	0x051A, r25
    1b84:	80 93 19 05 	sts	0x0519, r24
    1b88:	20 93 1b 05 	sts	0x051B, r18
    1b8c:	10 92 1c 05 	sts	0x051C, r1
    1b90:	10 92 1e 05 	sts	0x051E, r1
    1b94:	10 92 1d 05 	sts	0x051D, r1
				.wValue        = 1,
				.wIndex        = HIDInterfaceInfo->State.InterfaceNumber,
				.wLength       = 0,
			};

		if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	9e d9       	rcall	.-3268   	; 0xeda <USB_Host_SendControlRequest>
    1b9e:	28 2f       	mov	r18, r24
    1ba0:	88 23       	and	r24, r24
    1ba2:	69 f5       	brne	.+90     	; 0x1bfe <HID_Host_SetReportProtocol+0x11c>
		  return ErrorCode;

		HIDInterfaceInfo->State.UsingBootProtocol = false;
    1ba4:	f8 01       	movw	r30, r16
    1ba6:	17 86       	std	Z+15, r1	; 0x0f
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
    1ba8:	d8 01       	movw	r26, r16
    1baa:	15 96       	adiw	r26, 0x05	; 5
    1bac:	4d 91       	ld	r20, X+
    1bae:	5c 91       	ld	r21, X
    1bb0:	16 97       	sbiw	r26, 0x06	; 6
    1bb2:	41 15       	cp	r20, r1
    1bb4:	51 05       	cpc	r21, r1
    1bb6:	11 f4       	brne	.+4      	; 0x1bbc <HID_Host_SetReportProtocol+0xda>
    1bb8:	20 e8       	ldi	r18, 0x80	; 128
    1bba:	21 c0       	rjmp	.+66     	; 0x1bfe <HID_Host_SetReportProtocol+0x11c>
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_ProcessHIDReport(HIDReportData, HIDInterfaceInfo->State.HIDReportSize,
    1bbc:	f8 01       	movw	r30, r16
    1bbe:	60 89       	ldd	r22, Z+16	; 0x10
    1bc0:	71 89       	ldd	r23, Z+17	; 0x11
    1bc2:	8f 2d       	mov	r24, r15
    1bc4:	9e 2d       	mov	r25, r14
    1bc6:	6b db       	rcall	.-2346   	; 0x129e <USB_ProcessHIDReport>
    1bc8:	28 2f       	mov	r18, r24
    1bca:	88 23       	and	r24, r24
    1bcc:	11 f0       	breq	.+4      	; 0x1bd2 <HID_Host_SetReportProtocol+0xf0>
	                                      HIDInterfaceInfo->Config.HIDParserData)) != HID_PARSE_Successful)
	{
		return HID_ERROR_LOGICAL | ErrorCode;
    1bce:	20 68       	ori	r18, 0x80	; 128
    1bd0:	16 c0       	rjmp	.+44     	; 0x1bfe <HID_Host_SetReportProtocol+0x11c>
	}

	uint8_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
    1bd2:	d8 01       	movw	r26, r16
    1bd4:	15 96       	adiw	r26, 0x05	; 5
    1bd6:	ed 91       	ld	r30, X+
    1bd8:	fc 91       	ld	r31, X
    1bda:	16 97       	sbiw	r26, 0x06	; 6
    1bdc:	ea 52       	subi	r30, 0x2A	; 42
    1bde:	fc 4f       	sbci	r31, 0xFC	; 252
    1be0:	e0 81       	ld	r30, Z
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	8e 2f       	mov	r24, r30
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	87 70       	andi	r24, 0x07	; 7
    1bea:	90 70       	andi	r25, 0x00	; 0
    1bec:	89 2b       	or	r24, r25
    1bee:	09 f0       	breq	.+2      	; 0x1bf2 <HID_Host_SetReportProtocol+0x110>
    1bf0:	31 e0       	ldi	r19, 0x01	; 1
    1bf2:	e6 95       	lsr	r30
    1bf4:	e6 95       	lsr	r30
    1bf6:	e6 95       	lsr	r30
    1bf8:	3e 0f       	add	r19, r30
    1bfa:	f8 01       	movw	r30, r16
    1bfc:	32 8b       	std	Z+18, r19	; 0x12

	return 0;
}
    1bfe:	82 2f       	mov	r24, r18
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	de be       	out	0x3e, r13	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	cd be       	out	0x3d, r12	; 61
    1c0a:	cf 91       	pop	r28
    1c0c:	df 91       	pop	r29
    1c0e:	1f 91       	pop	r17
    1c10:	0f 91       	pop	r16
    1c12:	ff 90       	pop	r15
    1c14:	ef 90       	pop	r14
    1c16:	df 90       	pop	r13
    1c18:	cf 90       	pop	r12
    1c1a:	08 95       	ret

00001c1c <HID_Host_ReceiveReport>:
}
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	dc 01       	movw	r26, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1c22:	80 91 1f 05 	lds	r24, 0x051F
    1c26:	8c 30       	cpi	r24, 0x0C	; 12
    1c28:	09 f0       	breq	.+2      	; 0x1c2c <HID_Host_ReceiveReport+0x10>
    1c2a:	3f c0       	rjmp	.+126    	; 0x1caa <HID_Host_ReceiveReport+0x8e>
    1c2c:	17 96       	adiw	r26, 0x07	; 7
    1c2e:	8c 91       	ld	r24, X
    1c30:	17 97       	sbiw	r26, 0x07	; 7
    1c32:	88 23       	and	r24, r24
    1c34:	d1 f1       	breq	.+116    	; 0x1caa <HID_Host_ReceiveReport+0x8e>
	  return PIPE_READYWAIT_DeviceDisconnected;

	uint8_t ErrorCode;

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipeNumber);
    1c36:	8c 91       	ld	r24, X
    1c38:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c3c:	80 91 a9 00 	lds	r24, 0x00A9
    1c40:	8f 7b       	andi	r24, 0xBF	; 191
    1c42:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    1c46:	eb 01       	movw	r28, r22

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    1c48:	1f 96       	adiw	r26, 0x0f	; 15
    1c4a:	8c 91       	ld	r24, X
    1c4c:	1f 97       	sbiw	r26, 0x0f	; 15
    1c4e:	88 23       	and	r24, r24
    1c50:	b1 f4       	brne	.+44     	; 0x1c7e <HID_Host_ReceiveReport+0x62>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    1c52:	15 96       	adiw	r26, 0x05	; 5
    1c54:	ed 91       	ld	r30, X+
    1c56:	fc 91       	ld	r31, X
    1c58:	16 97       	sbiw	r26, 0x06	; 6
    1c5a:	e8 52       	subi	r30, 0x28	; 40
    1c5c:	fc 4f       	sbci	r31, 0xFC	; 252
    1c5e:	80 81       	ld	r24, Z
    1c60:	88 23       	and	r24, r24
    1c62:	11 f4       	brne	.+4      	; 0x1c68 <HID_Host_ReceiveReport+0x4c>
    1c64:	60 e0       	ldi	r22, 0x00	; 0
    1c66:	03 c0       	rjmp	.+6      	; 0x1c6e <HID_Host_ReceiveReport+0x52>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    1c68:	60 91 af 00 	lds	r22, 0x00AF
		{
			ReportID = Pipe_Read_Byte();
			*(BufferPos++) = ReportID;
    1c6c:	69 93       	st	Y+, r22
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    1c6e:	15 96       	adiw	r26, 0x05	; 5
    1c70:	8d 91       	ld	r24, X+
    1c72:	9c 91       	ld	r25, X
    1c74:	16 97       	sbiw	r26, 0x06	; 6
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	e7 da       	rcall	.-2610   	; 0x1248 <USB_GetHIDReportSize>
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	04 c0       	rjmp	.+8      	; 0x1c86 <HID_Host_ReceiveReport+0x6a>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1c7e:	60 91 f6 00 	lds	r22, 0x00F6
    1c82:	70 91 f7 00 	lds	r23, 0x00F7
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NO_STREAM_CALLBACK)) != PIPE_RWSTREAM_NoError)
    1c86:	ce 01       	movw	r24, r28
    1c88:	40 e0       	ldi	r20, 0x00	; 0
    1c8a:	50 e0       	ldi	r21, 0x00	; 0
    1c8c:	28 da       	rcall	.-2992   	; 0x10de <Pipe_Read_Stream_LE>
    1c8e:	98 2f       	mov	r25, r24
    1c90:	88 23       	and	r24, r24
    1c92:	61 f4       	brne	.+24     	; 0x1cac <HID_Host_ReceiveReport+0x90>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1c94:	80 91 a6 00 	lds	r24, 0x00A6
    1c98:	8e 77       	andi	r24, 0x7E	; 126
    1c9a:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1c9e:	80 91 a9 00 	lds	r24, 0x00A9
    1ca2:	80 64       	ori	r24, 0x40	; 64
    1ca4:	80 93 a9 00 	sts	0x00A9, r24
    1ca8:	01 c0       	rjmp	.+2      	; 0x1cac <HID_Host_ReceiveReport+0x90>
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    1caa:	92 e0       	ldi	r25, 0x02	; 2
}
    1cac:	89 2f       	mov	r24, r25
    1cae:	df 91       	pop	r29
    1cb0:	cf 91       	pop	r28
    1cb2:	08 95       	ret

00001cb4 <HID_Host_ConfigurePipes>:
#include "HID.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    1cb4:	3f 92       	push	r3
    1cb6:	4f 92       	push	r4
    1cb8:	5f 92       	push	r5
    1cba:	6f 92       	push	r6
    1cbc:	7f 92       	push	r7
    1cbe:	8f 92       	push	r8
    1cc0:	9f 92       	push	r9
    1cc2:	af 92       	push	r10
    1cc4:	bf 92       	push	r11
    1cc6:	cf 92       	push	r12
    1cc8:	df 92       	push	r13
    1cca:	ef 92       	push	r14
    1ccc:	ff 92       	push	r15
    1cce:	0f 93       	push	r16
    1cd0:	1f 93       	push	r17
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <HID_Host_ConfigurePipes+0x24>
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <HID_Host_ConfigurePipes+0x26>
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	6c 01       	movw	r12, r24
    1ce0:	7a 83       	std	Y+2, r23	; 0x02
    1ce2:	69 83       	std	Y+1, r22	; 0x01
    1ce4:	5c 83       	std	Y+4, r21	; 0x04
    1ce6:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1ce8:	07 96       	adiw	r24, 0x07	; 7
    1cea:	fc 01       	movw	r30, r24
    1cec:	8c e0       	ldi	r24, 0x0C	; 12
    1cee:	df 01       	movw	r26, r30
    1cf0:	1d 92       	st	X+, r1
    1cf2:	8a 95       	dec	r24
    1cf4:	e9 f7       	brne	.-6      	; 0x1cf0 <HID_Host_ConfigurePipes+0x3c>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1cf6:	eb 81       	ldd	r30, Y+3	; 0x03
    1cf8:	fc 81       	ldd	r31, Y+4	; 0x04
    1cfa:	81 81       	ldd	r24, Z+1	; 0x01
    1cfc:	82 30       	cpi	r24, 0x02	; 2
    1cfe:	11 f0       	breq	.+4      	; 0x1d04 <HID_Host_ConfigurePipes+0x50>
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	bb c0       	rjmp	.+374    	; 0x1e7a <HID_Host_ConfigurePipes+0x1c6>
    1d04:	88 24       	eor	r8, r8
    1d06:	99 24       	eor	r9, r9
    1d08:	aa 24       	eor	r10, r10
    1d0a:	bb 24       	eor	r11, r11
    1d0c:	66 24       	eor	r6, r6
    1d0e:	77 24       	eor	r7, r7
    1d10:	44 24       	eor	r4, r4
    1d12:	55 24       	eor	r5, r5
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1d14:	93 e0       	ldi	r25, 0x03	; 3
    1d16:	e9 2e       	mov	r14, r25
    1d18:	f1 2c       	mov	r15, r1
    1d1a:	ec 0e       	add	r14, r28
    1d1c:	fd 1e       	adc	r15, r29
    1d1e:	8e 01       	movw	r16, r28
    1d20:	0f 5f       	subi	r16, 0xFF	; 255
    1d22:	1f 4f       	sbci	r17, 0xFF	; 255
    1d24:	61 14       	cp	r6, r1
    1d26:	71 04       	cpc	r7, r1
    1d28:	39 f0       	breq	.+14     	; 0x1d38 <HID_Host_ConfigurePipes+0x84>
    1d2a:	c8 01       	movw	r24, r16
    1d2c:	b7 01       	movw	r22, r14
    1d2e:	43 e5       	ldi	r20, 0x53	; 83
    1d30:	5f e0       	ldi	r21, 0x0F	; 15
    1d32:	0e d8       	rcall	.-4068   	; 0xd50 <USB_GetNextDescriptorComp>
    1d34:	88 23       	and	r24, r24
    1d36:	29 f1       	breq	.+74     	; 0x1d82 <HID_Host_ConfigurePipes+0xce>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint || DataOUTEndpoint)
    1d38:	81 14       	cp	r8, r1
    1d3a:	91 04       	cpc	r9, r1
    1d3c:	81 f5       	brne	.+96     	; 0x1d9e <HID_Host_ConfigurePipes+0xea>
    1d3e:	a1 14       	cp	r10, r1
    1d40:	b1 04       	cpc	r11, r1
    1d42:	69 f5       	brne	.+90     	; 0x1d9e <HID_Host_ConfigurePipes+0xea>
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1d44:	c8 01       	movw	r24, r16
    1d46:	b7 01       	movw	r22, r14
    1d48:	4e e3       	ldi	r20, 0x3E	; 62
    1d4a:	5d e0       	ldi	r21, 0x0D	; 13
    1d4c:	01 d8       	rcall	.-4094   	; 0xd50 <USB_GetNextDescriptorComp>
    1d4e:	88 23       	and	r24, r24
    1d50:	09 f0       	breq	.+2      	; 0x1d54 <HID_Host_ConfigurePipes+0xa0>
    1d52:	92 c0       	rjmp	.+292    	; 0x1e78 <HID_Host_ConfigurePipes+0x1c4>
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1d54:	6b 80       	ldd	r6, Y+3	; 0x03
    1d56:	7c 80       	ldd	r7, Y+4	; 0x04
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    1d58:	f6 01       	movw	r30, r12
    1d5a:	94 81       	ldd	r25, Z+4	; 0x04
    1d5c:	99 23       	and	r25, r25
    1d5e:	29 f0       	breq	.+10     	; 0x1d6a <HID_Host_ConfigurePipes+0xb6>
    1d60:	d3 01       	movw	r26, r6
    1d62:	17 96       	adiw	r26, 0x07	; 7
    1d64:	8c 91       	ld	r24, X
    1d66:	89 17       	cp	r24, r25
    1d68:	69 f7       	brne	.-38     	; 0x1d44 <HID_Host_ConfigurePipes+0x90>

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1d6a:	c8 01       	movw	r24, r16
    1d6c:	b7 01       	movw	r22, r14
    1d6e:	49 e4       	ldi	r20, 0x49	; 73
    1d70:	5d e0       	ldi	r21, 0x0D	; 13
    1d72:	0e 94 a8 06 	call	0xd50	; 0xd50 <USB_GetNextDescriptorComp>
    1d76:	88 23       	and	r24, r24
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <HID_Host_ConfigurePipes+0xc8>
    1d7a:	7e c0       	rjmp	.+252    	; 0x1e78 <HID_Host_ConfigurePipes+0x1c4>
			                              DCOMP_HID_Host_NextHID) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    1d7c:	4b 80       	ldd	r4, Y+3	; 0x03
    1d7e:	5c 80       	ldd	r5, Y+4	; 0x04
    1d80:	d1 cf       	rjmp	.-94     	; 0x1d24 <HID_Host_ConfigurePipes+0x70>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1d82:	eb 81       	ldd	r30, Y+3	; 0x03
    1d84:	fc 81       	ldd	r31, Y+4	; 0x04

		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
    1d86:	82 81       	ldd	r24, Z+2	; 0x02
    1d88:	87 fd       	sbrc	r24, 7
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <HID_Host_ConfigurePipes+0xdc>
    1d8c:	5f 01       	movw	r10, r30
    1d8e:	01 c0       	rjmp	.+2      	; 0x1d92 <HID_Host_ConfigurePipes+0xde>
    1d90:	4f 01       	movw	r8, r30
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1d92:	81 14       	cp	r8, r1
    1d94:	91 04       	cpc	r9, r1
    1d96:	31 f2       	breq	.-116    	; 0x1d24 <HID_Host_ConfigurePipes+0x70>
    1d98:	a1 14       	cp	r10, r1
    1d9a:	b1 04       	cpc	r11, r1
    1d9c:	19 f2       	breq	.-122    	; 0x1d24 <HID_Host_ConfigurePipes+0x70>
    1d9e:	ff 24       	eor	r15, r15
    1da0:	f3 94       	inc	r15
			                   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize,
			                   HIDInterfaceInfo->Config.DataOUTPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);
			Pipe_SetInterruptPeriod(DataOUTEndpoint->PollingIntervalMS);

			HIDInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
    1da2:	33 24       	eor	r3, r3
    1da4:	33 94       	inc	r3
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
	{
		if (PipeNum == HIDInterfaceInfo->Config.DataINPipeNumber)
    1da6:	f6 01       	movw	r30, r12
    1da8:	80 81       	ld	r24, Z
    1daa:	f8 16       	cp	r15, r24
    1dac:	01 f5       	brne	.+64     	; 0x1dee <HID_Host_ConfigurePipes+0x13a>
		{
			Pipe_ConfigurePipe(PipeNum, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
    1dae:	d4 01       	movw	r26, r8
    1db0:	12 96       	adiw	r26, 0x02	; 2
    1db2:	2c 91       	ld	r18, X
    1db4:	12 97       	sbiw	r26, 0x02	; 2
    1db6:	14 96       	adiw	r26, 0x04	; 4
    1db8:	0d 91       	ld	r16, X+
    1dba:	1c 91       	ld	r17, X
    1dbc:	15 97       	sbiw	r26, 0x05	; 5
    1dbe:	81 81       	ldd	r24, Z+1	; 0x01
    1dc0:	88 23       	and	r24, r24
    1dc2:	11 f4       	brne	.+4      	; 0x1dc8 <HID_Host_ConfigurePipes+0x114>
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	01 c0       	rjmp	.+2      	; 0x1dca <HID_Host_ConfigurePipes+0x116>
    1dc8:	94 e0       	ldi	r25, 0x04	; 4
    1dca:	8f 2d       	mov	r24, r15
    1dcc:	63 e0       	ldi	r22, 0x03	; 3
    1dce:	40 e1       	ldi	r20, 0x10	; 16
    1dd0:	e9 2e       	mov	r14, r25
    1dd2:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Pipe_ConfigurePipe>
			                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize,
			                   HIDInterfaceInfo->Config.DataINPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);
			Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
    1dd6:	f4 01       	movw	r30, r8
    1dd8:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
    1dda:	80 93 ad 00 	sts	0x00AD, r24

			HIDInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    1dde:	84 81       	ldd	r24, Z+4	; 0x04
    1de0:	95 81       	ldd	r25, Z+5	; 0x05
    1de2:	d6 01       	movw	r26, r12
    1de4:	1a 96       	adiw	r26, 0x0a	; 10
    1de6:	9c 93       	st	X, r25
    1de8:	8e 93       	st	-X, r24
    1dea:	19 97       	sbiw	r26, 0x09	; 9
    1dec:	25 c0       	rjmp	.+74     	; 0x1e38 <HID_Host_ConfigurePipes+0x184>
		}
		else if (PipeNum == HIDInterfaceInfo->Config.DataOUTPipeNumber)
    1dee:	f6 01       	movw	r30, r12
    1df0:	82 81       	ldd	r24, Z+2	; 0x02
    1df2:	f8 16       	cp	r15, r24
    1df4:	09 f5       	brne	.+66     	; 0x1e38 <HID_Host_ConfigurePipes+0x184>
		{
			Pipe_ConfigurePipe(PipeNum, EP_TYPE_INTERRUPT, PIPE_TOKEN_OUT,
    1df6:	d5 01       	movw	r26, r10
    1df8:	12 96       	adiw	r26, 0x02	; 2
    1dfa:	2c 91       	ld	r18, X
    1dfc:	12 97       	sbiw	r26, 0x02	; 2
    1dfe:	14 96       	adiw	r26, 0x04	; 4
    1e00:	0d 91       	ld	r16, X+
    1e02:	1c 91       	ld	r17, X
    1e04:	15 97       	sbiw	r26, 0x05	; 5
    1e06:	83 81       	ldd	r24, Z+3	; 0x03
    1e08:	88 23       	and	r24, r24
    1e0a:	11 f4       	brne	.+4      	; 0x1e10 <HID_Host_ConfigurePipes+0x15c>
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	01 c0       	rjmp	.+2      	; 0x1e12 <HID_Host_ConfigurePipes+0x15e>
    1e10:	94 e0       	ldi	r25, 0x04	; 4
    1e12:	8f 2d       	mov	r24, r15
    1e14:	63 e0       	ldi	r22, 0x03	; 3
    1e16:	40 e2       	ldi	r20, 0x20	; 32
    1e18:	e9 2e       	mov	r14, r25
    1e1a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Pipe_ConfigurePipe>
			                   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize,
			                   HIDInterfaceInfo->Config.DataOUTPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);
			Pipe_SetInterruptPeriod(DataOUTEndpoint->PollingIntervalMS);
    1e1e:	f5 01       	movw	r30, r10
    1e20:	86 81       	ldd	r24, Z+6	; 0x06
    1e22:	80 93 ad 00 	sts	0x00AD, r24

			HIDInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    1e26:	84 81       	ldd	r24, Z+4	; 0x04
    1e28:	95 81       	ldd	r25, Z+5	; 0x05
    1e2a:	d6 01       	movw	r26, r12
    1e2c:	1c 96       	adiw	r26, 0x0c	; 12
    1e2e:	9c 93       	st	X, r25
    1e30:	8e 93       	st	-X, r24
    1e32:	1b 97       	sbiw	r26, 0x0b	; 11
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
    1e34:	1e 96       	adiw	r26, 0x0e	; 14
    1e36:	3c 92       	st	X, r3
		  DataINEndpoint = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    1e38:	f3 94       	inc	r15
    1e3a:	b7 e0       	ldi	r27, 0x07	; 7
    1e3c:	fb 16       	cp	r15, r27
    1e3e:	09 f0       	breq	.+2      	; 0x1e42 <HID_Host_ConfigurePipes+0x18e>
    1e40:	b2 cf       	rjmp	.-156    	; 0x1da6 <HID_Host_ConfigurePipes+0xf2>
			HIDInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
		}
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    1e42:	f3 01       	movw	r30, r6
    1e44:	82 81       	ldd	r24, Z+2	; 0x02
    1e46:	d6 01       	movw	r26, r12
    1e48:	18 96       	adiw	r26, 0x08	; 8
    1e4a:	8c 93       	st	X, r24
    1e4c:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.HIDReportSize        = HIDDescriptor->HIDReportLength;
    1e4e:	f2 01       	movw	r30, r4
    1e50:	87 81       	ldd	r24, Z+7	; 0x07
    1e52:	90 85       	ldd	r25, Z+8	; 0x08
    1e54:	51 96       	adiw	r26, 0x11	; 17
    1e56:	9c 93       	st	X, r25
    1e58:	8e 93       	st	-X, r24
    1e5a:	50 97       	sbiw	r26, 0x10	; 16
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	d3 01       	movw	r26, r6
    1e60:	16 96       	adiw	r26, 0x06	; 6
    1e62:	8c 91       	ld	r24, X
    1e64:	81 11       	cpse	r24, r1
    1e66:	91 e0       	ldi	r25, 0x01	; 1
    1e68:	f6 01       	movw	r30, r12
    1e6a:	95 87       	std	Z+13, r25	; 0x0d
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    1e6c:	88 e0       	ldi	r24, 0x08	; 8
    1e6e:	82 8b       	std	Z+18, r24	; 0x12
	HIDInterfaceInfo->State.IsActive = true;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	87 83       	std	Z+7, r24	; 0x07
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	01 c0       	rjmp	.+2      	; 0x1e7a <HID_Host_ConfigurePipes+0x1c6>

	return HID_ENUMERROR_NoError;
    1e78:	82 e0       	ldi	r24, 0x02	; 2
}
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	1f 91       	pop	r17
    1e88:	0f 91       	pop	r16
    1e8a:	ff 90       	pop	r15
    1e8c:	ef 90       	pop	r14
    1e8e:	df 90       	pop	r13
    1e90:	cf 90       	pop	r12
    1e92:	bf 90       	pop	r11
    1e94:	af 90       	pop	r10
    1e96:	9f 90       	pop	r9
    1e98:	8f 90       	pop	r8
    1e9a:	7f 90       	pop	r7
    1e9c:	6f 90       	pop	r6
    1e9e:	5f 90       	pop	r5
    1ea0:	4f 90       	pop	r4
    1ea2:	3f 90       	pop	r3
    1ea4:	08 95       	ret

00001ea6 <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    1ea6:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1ea8:	81 81       	ldd	r24, Z+1	; 0x01
    1eaa:	85 30       	cpi	r24, 0x05	; 5
    1eac:	31 f4       	brne	.+12     	; 0x1eba <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1eae:	82 81       	ldd	r24, Z+2	; 0x02
    1eb0:	0e 94 3e 05 	call	0xa7c	; 0xa7c <Pipe_IsEndpointBound>
    1eb4:	88 23       	and	r24, r24
    1eb6:	29 f4       	brne	.+10     	; 0x1ec2 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    1eb8:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1eba:	84 30       	cpi	r24, 0x04	; 4
    1ebc:	11 f4       	brne	.+4      	; 0x1ec2 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	08 95       	ret
    1ec2:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1ec4:	08 95       	ret

00001ec6 <SerialStream_TxByte>:

FILE USARTStream = FDEV_SETUP_STREAM(SerialStream_TxByte, SerialStream_RxByte, _FDEV_SETUP_RW);

static int SerialStream_TxByte(char DataByte,
                               FILE *Stream)
{
    1ec6:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1ec8:	80 91 c8 00 	lds	r24, 0x00C8
    1ecc:	85 ff       	sbrs	r24, 5
    1ece:	fc cf       	rjmp	.-8      	; 0x1ec8 <SerialStream_TxByte+0x2>
				UDR1 = DataByte;
    1ed0:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_TxByte(DataByte);
	return 0;
}
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	08 95       	ret

00001eda <SerialStream_RxByte>:
			 *  \return Boolean true if a character has been received, false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1eda:	80 91 c8 00 	lds	r24, 0x00C8

static int SerialStream_RxByte(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1ede:	87 fd       	sbrc	r24, 7
    1ee0:	03 c0       	rjmp	.+6      	; 0x1ee8 <SerialStream_RxByte+0xe>
    1ee2:	2e ef       	ldi	r18, 0xFE	; 254
    1ee4:	3f ef       	ldi	r19, 0xFF	; 255
    1ee6:	08 c0       	rjmp	.+16     	; 0x1ef8 <SerialStream_RxByte+0x1e>
			 *  \return Byte received from the USART.
			 */
			static inline char Serial_RxByte(void) ATTR_ALWAYS_INLINE;
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
    1ee8:	80 91 c8 00 	lds	r24, 0x00C8
    1eec:	87 ff       	sbrs	r24, 7
    1eee:	fc cf       	rjmp	.-8      	; 0x1ee8 <SerialStream_RxByte+0xe>
				return UDR1;
    1ef0:	80 91 ce 00 	lds	r24, 0x00CE
	  return _FDEV_EOF;

	return Serial_RxByte();
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
}
    1ef8:	c9 01       	movw	r24, r18
    1efa:	08 95       	ret

00001efc <printf_P>:
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	fe 01       	movw	r30, r28
    1f06:	35 96       	adiw	r30, 0x05	; 5
    1f08:	61 91       	ld	r22, Z+
    1f0a:	71 91       	ld	r23, Z+
    1f0c:	a0 91 22 05 	lds	r26, 0x0522
    1f10:	b0 91 23 05 	lds	r27, 0x0523
    1f14:	13 96       	adiw	r26, 0x03	; 3
    1f16:	8c 91       	ld	r24, X
    1f18:	13 97       	sbiw	r26, 0x03	; 3
    1f1a:	88 60       	ori	r24, 0x08	; 8
    1f1c:	13 96       	adiw	r26, 0x03	; 3
    1f1e:	8c 93       	st	X, r24
    1f20:	80 91 22 05 	lds	r24, 0x0522
    1f24:	90 91 23 05 	lds	r25, 0x0523
    1f28:	af 01       	movw	r20, r30
    1f2a:	3f d0       	rcall	.+126    	; 0x1faa <vfprintf>
    1f2c:	e0 91 22 05 	lds	r30, 0x0522
    1f30:	f0 91 23 05 	lds	r31, 0x0523
    1f34:	23 81       	ldd	r18, Z+3	; 0x03
    1f36:	27 7f       	andi	r18, 0xF7	; 247
    1f38:	23 83       	std	Z+3, r18	; 0x03
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	08 95       	ret

00001f40 <puts_P>:
    1f40:	0f 93       	push	r16
    1f42:	1f 93       	push	r17
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
    1f48:	ec 01       	movw	r28, r24
    1f4a:	e0 91 22 05 	lds	r30, 0x0522
    1f4e:	f0 91 23 05 	lds	r31, 0x0523
    1f52:	83 81       	ldd	r24, Z+3	; 0x03
    1f54:	81 ff       	sbrs	r24, 1
    1f56:	21 c0       	rjmp	.+66     	; 0x1f9a <puts_P+0x5a>
    1f58:	00 e0       	ldi	r16, 0x00	; 0
    1f5a:	10 e0       	ldi	r17, 0x00	; 0
    1f5c:	0e c0       	rjmp	.+28     	; 0x1f7a <puts_P+0x3a>
    1f5e:	e0 91 22 05 	lds	r30, 0x0522
    1f62:	f0 91 23 05 	lds	r31, 0x0523
    1f66:	20 85       	ldd	r18, Z+8	; 0x08
    1f68:	31 85       	ldd	r19, Z+9	; 0x09
    1f6a:	bf 01       	movw	r22, r30
    1f6c:	f9 01       	movw	r30, r18
    1f6e:	09 95       	icall
    1f70:	89 2b       	or	r24, r25
    1f72:	11 f0       	breq	.+4      	; 0x1f78 <puts_P+0x38>
    1f74:	0f ef       	ldi	r16, 0xFF	; 255
    1f76:	1f ef       	ldi	r17, 0xFF	; 255
    1f78:	21 96       	adiw	r28, 0x01	; 1
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	84 91       	lpm	r24, Z+
    1f7e:	88 23       	and	r24, r24
    1f80:	71 f7       	brne	.-36     	; 0x1f5e <puts_P+0x1e>
    1f82:	e0 91 22 05 	lds	r30, 0x0522
    1f86:	f0 91 23 05 	lds	r31, 0x0523
    1f8a:	20 85       	ldd	r18, Z+8	; 0x08
    1f8c:	31 85       	ldd	r19, Z+9	; 0x09
    1f8e:	8a e0       	ldi	r24, 0x0A	; 10
    1f90:	bf 01       	movw	r22, r30
    1f92:	f9 01       	movw	r30, r18
    1f94:	09 95       	icall
    1f96:	89 2b       	or	r24, r25
    1f98:	11 f0       	breq	.+4      	; 0x1f9e <puts_P+0x5e>
    1f9a:	0f ef       	ldi	r16, 0xFF	; 255
    1f9c:	1f ef       	ldi	r17, 0xFF	; 255
    1f9e:	c8 01       	movw	r24, r16
    1fa0:	df 91       	pop	r29
    1fa2:	cf 91       	pop	r28
    1fa4:	1f 91       	pop	r17
    1fa6:	0f 91       	pop	r16
    1fa8:	08 95       	ret

00001faa <vfprintf>:
    1faa:	2f 92       	push	r2
    1fac:	3f 92       	push	r3
    1fae:	4f 92       	push	r4
    1fb0:	5f 92       	push	r5
    1fb2:	6f 92       	push	r6
    1fb4:	7f 92       	push	r7
    1fb6:	8f 92       	push	r8
    1fb8:	9f 92       	push	r9
    1fba:	af 92       	push	r10
    1fbc:	bf 92       	push	r11
    1fbe:	cf 92       	push	r12
    1fc0:	df 92       	push	r13
    1fc2:	ef 92       	push	r14
    1fc4:	ff 92       	push	r15
    1fc6:	0f 93       	push	r16
    1fc8:	1f 93       	push	r17
    1fca:	df 93       	push	r29
    1fcc:	cf 93       	push	r28
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	2b 97       	sbiw	r28, 0x0b	; 11
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	3c 01       	movw	r6, r24
    1fe0:	2b 01       	movw	r4, r22
    1fe2:	5a 01       	movw	r10, r20
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	17 82       	std	Z+7, r1	; 0x07
    1fe8:	16 82       	std	Z+6, r1	; 0x06
    1fea:	83 81       	ldd	r24, Z+3	; 0x03
    1fec:	81 fd       	sbrc	r24, 1
    1fee:	03 c0       	rjmp	.+6      	; 0x1ff6 <vfprintf+0x4c>
    1ff0:	6f ef       	ldi	r22, 0xFF	; 255
    1ff2:	7f ef       	ldi	r23, 0xFF	; 255
    1ff4:	b9 c1       	rjmp	.+882    	; 0x2368 <__stack+0x269>
    1ff6:	9a e0       	ldi	r25, 0x0A	; 10
    1ff8:	89 2e       	mov	r8, r25
    1ffa:	1e 01       	movw	r2, r28
    1ffc:	08 94       	sec
    1ffe:	21 1c       	adc	r2, r1
    2000:	31 1c       	adc	r3, r1
    2002:	f3 01       	movw	r30, r6
    2004:	23 81       	ldd	r18, Z+3	; 0x03
    2006:	f2 01       	movw	r30, r4
    2008:	23 fd       	sbrc	r18, 3
    200a:	85 91       	lpm	r24, Z+
    200c:	23 ff       	sbrs	r18, 3
    200e:	81 91       	ld	r24, Z+
    2010:	2f 01       	movw	r4, r30
    2012:	88 23       	and	r24, r24
    2014:	09 f4       	brne	.+2      	; 0x2018 <vfprintf+0x6e>
    2016:	a5 c1       	rjmp	.+842    	; 0x2362 <__stack+0x263>
    2018:	85 32       	cpi	r24, 0x25	; 37
    201a:	39 f4       	brne	.+14     	; 0x202a <vfprintf+0x80>
    201c:	23 fd       	sbrc	r18, 3
    201e:	85 91       	lpm	r24, Z+
    2020:	23 ff       	sbrs	r18, 3
    2022:	81 91       	ld	r24, Z+
    2024:	2f 01       	movw	r4, r30
    2026:	85 32       	cpi	r24, 0x25	; 37
    2028:	21 f4       	brne	.+8      	; 0x2032 <vfprintf+0x88>
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	b3 01       	movw	r22, r6
    202e:	cc d1       	rcall	.+920    	; 0x23c8 <fputc>
    2030:	e8 cf       	rjmp	.-48     	; 0x2002 <vfprintf+0x58>
    2032:	98 2f       	mov	r25, r24
    2034:	ff 24       	eor	r15, r15
    2036:	ee 24       	eor	r14, r14
    2038:	99 24       	eor	r9, r9
    203a:	ff e1       	ldi	r31, 0x1F	; 31
    203c:	ff 15       	cp	r31, r15
    203e:	d0 f0       	brcs	.+52     	; 0x2074 <vfprintf+0xca>
    2040:	9b 32       	cpi	r25, 0x2B	; 43
    2042:	69 f0       	breq	.+26     	; 0x205e <vfprintf+0xb4>
    2044:	9c 32       	cpi	r25, 0x2C	; 44
    2046:	28 f4       	brcc	.+10     	; 0x2052 <vfprintf+0xa8>
    2048:	90 32       	cpi	r25, 0x20	; 32
    204a:	59 f0       	breq	.+22     	; 0x2062 <vfprintf+0xb8>
    204c:	93 32       	cpi	r25, 0x23	; 35
    204e:	91 f4       	brne	.+36     	; 0x2074 <vfprintf+0xca>
    2050:	0e c0       	rjmp	.+28     	; 0x206e <vfprintf+0xc4>
    2052:	9d 32       	cpi	r25, 0x2D	; 45
    2054:	49 f0       	breq	.+18     	; 0x2068 <vfprintf+0xbe>
    2056:	90 33       	cpi	r25, 0x30	; 48
    2058:	69 f4       	brne	.+26     	; 0x2074 <vfprintf+0xca>
    205a:	41 e0       	ldi	r20, 0x01	; 1
    205c:	24 c0       	rjmp	.+72     	; 0x20a6 <vfprintf+0xfc>
    205e:	52 e0       	ldi	r21, 0x02	; 2
    2060:	f5 2a       	or	r15, r21
    2062:	84 e0       	ldi	r24, 0x04	; 4
    2064:	f8 2a       	or	r15, r24
    2066:	28 c0       	rjmp	.+80     	; 0x20b8 <vfprintf+0x10e>
    2068:	98 e0       	ldi	r25, 0x08	; 8
    206a:	f9 2a       	or	r15, r25
    206c:	25 c0       	rjmp	.+74     	; 0x20b8 <vfprintf+0x10e>
    206e:	e0 e1       	ldi	r30, 0x10	; 16
    2070:	fe 2a       	or	r15, r30
    2072:	22 c0       	rjmp	.+68     	; 0x20b8 <vfprintf+0x10e>
    2074:	f7 fc       	sbrc	r15, 7
    2076:	29 c0       	rjmp	.+82     	; 0x20ca <vfprintf+0x120>
    2078:	89 2f       	mov	r24, r25
    207a:	80 53       	subi	r24, 0x30	; 48
    207c:	8a 30       	cpi	r24, 0x0A	; 10
    207e:	70 f4       	brcc	.+28     	; 0x209c <vfprintf+0xf2>
    2080:	f6 fe       	sbrs	r15, 6
    2082:	05 c0       	rjmp	.+10     	; 0x208e <vfprintf+0xe4>
    2084:	98 9c       	mul	r9, r8
    2086:	90 2c       	mov	r9, r0
    2088:	11 24       	eor	r1, r1
    208a:	98 0e       	add	r9, r24
    208c:	15 c0       	rjmp	.+42     	; 0x20b8 <vfprintf+0x10e>
    208e:	e8 9c       	mul	r14, r8
    2090:	e0 2c       	mov	r14, r0
    2092:	11 24       	eor	r1, r1
    2094:	e8 0e       	add	r14, r24
    2096:	f0 e2       	ldi	r31, 0x20	; 32
    2098:	ff 2a       	or	r15, r31
    209a:	0e c0       	rjmp	.+28     	; 0x20b8 <vfprintf+0x10e>
    209c:	9e 32       	cpi	r25, 0x2E	; 46
    209e:	29 f4       	brne	.+10     	; 0x20aa <vfprintf+0x100>
    20a0:	f6 fc       	sbrc	r15, 6
    20a2:	5f c1       	rjmp	.+702    	; 0x2362 <__stack+0x263>
    20a4:	40 e4       	ldi	r20, 0x40	; 64
    20a6:	f4 2a       	or	r15, r20
    20a8:	07 c0       	rjmp	.+14     	; 0x20b8 <vfprintf+0x10e>
    20aa:	9c 36       	cpi	r25, 0x6C	; 108
    20ac:	19 f4       	brne	.+6      	; 0x20b4 <vfprintf+0x10a>
    20ae:	50 e8       	ldi	r21, 0x80	; 128
    20b0:	f5 2a       	or	r15, r21
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <vfprintf+0x10e>
    20b4:	98 36       	cpi	r25, 0x68	; 104
    20b6:	49 f4       	brne	.+18     	; 0x20ca <vfprintf+0x120>
    20b8:	f2 01       	movw	r30, r4
    20ba:	23 fd       	sbrc	r18, 3
    20bc:	95 91       	lpm	r25, Z+
    20be:	23 ff       	sbrs	r18, 3
    20c0:	91 91       	ld	r25, Z+
    20c2:	2f 01       	movw	r4, r30
    20c4:	99 23       	and	r25, r25
    20c6:	09 f0       	breq	.+2      	; 0x20ca <vfprintf+0x120>
    20c8:	b8 cf       	rjmp	.-144    	; 0x203a <vfprintf+0x90>
    20ca:	89 2f       	mov	r24, r25
    20cc:	85 54       	subi	r24, 0x45	; 69
    20ce:	83 30       	cpi	r24, 0x03	; 3
    20d0:	18 f0       	brcs	.+6      	; 0x20d8 <vfprintf+0x12e>
    20d2:	80 52       	subi	r24, 0x20	; 32
    20d4:	83 30       	cpi	r24, 0x03	; 3
    20d6:	38 f4       	brcc	.+14     	; 0x20e6 <vfprintf+0x13c>
    20d8:	44 e0       	ldi	r20, 0x04	; 4
    20da:	50 e0       	ldi	r21, 0x00	; 0
    20dc:	a4 0e       	add	r10, r20
    20de:	b5 1e       	adc	r11, r21
    20e0:	5f e3       	ldi	r21, 0x3F	; 63
    20e2:	59 83       	std	Y+1, r21	; 0x01
    20e4:	0f c0       	rjmp	.+30     	; 0x2104 <__stack+0x5>
    20e6:	93 36       	cpi	r25, 0x63	; 99
    20e8:	31 f0       	breq	.+12     	; 0x20f6 <vfprintf+0x14c>
    20ea:	93 37       	cpi	r25, 0x73	; 115
    20ec:	79 f0       	breq	.+30     	; 0x210c <__stack+0xd>
    20ee:	93 35       	cpi	r25, 0x53	; 83
    20f0:	09 f0       	breq	.+2      	; 0x20f4 <vfprintf+0x14a>
    20f2:	52 c0       	rjmp	.+164    	; 0x2198 <__stack+0x99>
    20f4:	1f c0       	rjmp	.+62     	; 0x2134 <__stack+0x35>
    20f6:	f5 01       	movw	r30, r10
    20f8:	80 81       	ld	r24, Z
    20fa:	89 83       	std	Y+1, r24	; 0x01
    20fc:	42 e0       	ldi	r20, 0x02	; 2
    20fe:	50 e0       	ldi	r21, 0x00	; 0
    2100:	a4 0e       	add	r10, r20
    2102:	b5 1e       	adc	r11, r21
    2104:	61 01       	movw	r12, r2
    2106:	01 e0       	ldi	r16, 0x01	; 1
    2108:	10 e0       	ldi	r17, 0x00	; 0
    210a:	11 c0       	rjmp	.+34     	; 0x212e <__stack+0x2f>
    210c:	f5 01       	movw	r30, r10
    210e:	c0 80       	ld	r12, Z
    2110:	d1 80       	ldd	r13, Z+1	; 0x01
    2112:	f6 fc       	sbrc	r15, 6
    2114:	03 c0       	rjmp	.+6      	; 0x211c <__stack+0x1d>
    2116:	6f ef       	ldi	r22, 0xFF	; 255
    2118:	7f ef       	ldi	r23, 0xFF	; 255
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <__stack+0x21>
    211c:	69 2d       	mov	r22, r9
    211e:	70 e0       	ldi	r23, 0x00	; 0
    2120:	42 e0       	ldi	r20, 0x02	; 2
    2122:	50 e0       	ldi	r21, 0x00	; 0
    2124:	a4 0e       	add	r10, r20
    2126:	b5 1e       	adc	r11, r21
    2128:	c6 01       	movw	r24, r12
    212a:	43 d1       	rcall	.+646    	; 0x23b2 <strnlen>
    212c:	8c 01       	movw	r16, r24
    212e:	5f e7       	ldi	r21, 0x7F	; 127
    2130:	f5 22       	and	r15, r21
    2132:	13 c0       	rjmp	.+38     	; 0x215a <__stack+0x5b>
    2134:	f5 01       	movw	r30, r10
    2136:	c0 80       	ld	r12, Z
    2138:	d1 80       	ldd	r13, Z+1	; 0x01
    213a:	f6 fc       	sbrc	r15, 6
    213c:	03 c0       	rjmp	.+6      	; 0x2144 <__stack+0x45>
    213e:	6f ef       	ldi	r22, 0xFF	; 255
    2140:	7f ef       	ldi	r23, 0xFF	; 255
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <__stack+0x49>
    2144:	69 2d       	mov	r22, r9
    2146:	70 e0       	ldi	r23, 0x00	; 0
    2148:	42 e0       	ldi	r20, 0x02	; 2
    214a:	50 e0       	ldi	r21, 0x00	; 0
    214c:	a4 0e       	add	r10, r20
    214e:	b5 1e       	adc	r11, r21
    2150:	c6 01       	movw	r24, r12
    2152:	24 d1       	rcall	.+584    	; 0x239c <strnlen_P>
    2154:	8c 01       	movw	r16, r24
    2156:	50 e8       	ldi	r21, 0x80	; 128
    2158:	f5 2a       	or	r15, r21
    215a:	f3 fe       	sbrs	r15, 3
    215c:	06 c0       	rjmp	.+12     	; 0x216a <__stack+0x6b>
    215e:	18 c0       	rjmp	.+48     	; 0x2190 <__stack+0x91>
    2160:	80 e2       	ldi	r24, 0x20	; 32
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	b3 01       	movw	r22, r6
    2166:	30 d1       	rcall	.+608    	; 0x23c8 <fputc>
    2168:	ea 94       	dec	r14
    216a:	8e 2d       	mov	r24, r14
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	08 17       	cp	r16, r24
    2170:	19 07       	cpc	r17, r25
    2172:	b0 f3       	brcs	.-20     	; 0x2160 <__stack+0x61>
    2174:	0d c0       	rjmp	.+26     	; 0x2190 <__stack+0x91>
    2176:	f6 01       	movw	r30, r12
    2178:	f7 fc       	sbrc	r15, 7
    217a:	85 91       	lpm	r24, Z+
    217c:	f7 fe       	sbrs	r15, 7
    217e:	81 91       	ld	r24, Z+
    2180:	6f 01       	movw	r12, r30
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	b3 01       	movw	r22, r6
    2186:	20 d1       	rcall	.+576    	; 0x23c8 <fputc>
    2188:	e1 10       	cpse	r14, r1
    218a:	ea 94       	dec	r14
    218c:	01 50       	subi	r16, 0x01	; 1
    218e:	10 40       	sbci	r17, 0x00	; 0
    2190:	01 15       	cp	r16, r1
    2192:	11 05       	cpc	r17, r1
    2194:	81 f7       	brne	.-32     	; 0x2176 <__stack+0x77>
    2196:	e2 c0       	rjmp	.+452    	; 0x235c <__stack+0x25d>
    2198:	94 36       	cpi	r25, 0x64	; 100
    219a:	11 f0       	breq	.+4      	; 0x21a0 <__stack+0xa1>
    219c:	99 36       	cpi	r25, 0x69	; 105
    219e:	61 f5       	brne	.+88     	; 0x21f8 <__stack+0xf9>
    21a0:	f7 fe       	sbrs	r15, 7
    21a2:	08 c0       	rjmp	.+16     	; 0x21b4 <__stack+0xb5>
    21a4:	f5 01       	movw	r30, r10
    21a6:	20 81       	ld	r18, Z
    21a8:	31 81       	ldd	r19, Z+1	; 0x01
    21aa:	42 81       	ldd	r20, Z+2	; 0x02
    21ac:	53 81       	ldd	r21, Z+3	; 0x03
    21ae:	84 e0       	ldi	r24, 0x04	; 4
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	0a c0       	rjmp	.+20     	; 0x21c8 <__stack+0xc9>
    21b4:	f5 01       	movw	r30, r10
    21b6:	80 81       	ld	r24, Z
    21b8:	91 81       	ldd	r25, Z+1	; 0x01
    21ba:	9c 01       	movw	r18, r24
    21bc:	44 27       	eor	r20, r20
    21be:	37 fd       	sbrc	r19, 7
    21c0:	40 95       	com	r20
    21c2:	54 2f       	mov	r21, r20
    21c4:	82 e0       	ldi	r24, 0x02	; 2
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	a8 0e       	add	r10, r24
    21ca:	b9 1e       	adc	r11, r25
    21cc:	9f e6       	ldi	r25, 0x6F	; 111
    21ce:	f9 22       	and	r15, r25
    21d0:	57 ff       	sbrs	r21, 7
    21d2:	09 c0       	rjmp	.+18     	; 0x21e6 <__stack+0xe7>
    21d4:	50 95       	com	r21
    21d6:	40 95       	com	r20
    21d8:	30 95       	com	r19
    21da:	21 95       	neg	r18
    21dc:	3f 4f       	sbci	r19, 0xFF	; 255
    21de:	4f 4f       	sbci	r20, 0xFF	; 255
    21e0:	5f 4f       	sbci	r21, 0xFF	; 255
    21e2:	e0 e8       	ldi	r30, 0x80	; 128
    21e4:	fe 2a       	or	r15, r30
    21e6:	ca 01       	movw	r24, r20
    21e8:	b9 01       	movw	r22, r18
    21ea:	a1 01       	movw	r20, r2
    21ec:	2a e0       	ldi	r18, 0x0A	; 10
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	17 d1       	rcall	.+558    	; 0x2420 <__ultoa_invert>
    21f2:	d8 2e       	mov	r13, r24
    21f4:	d2 18       	sub	r13, r2
    21f6:	3f c0       	rjmp	.+126    	; 0x2276 <__stack+0x177>
    21f8:	95 37       	cpi	r25, 0x75	; 117
    21fa:	29 f4       	brne	.+10     	; 0x2206 <__stack+0x107>
    21fc:	1f 2d       	mov	r17, r15
    21fe:	1f 7e       	andi	r17, 0xEF	; 239
    2200:	2a e0       	ldi	r18, 0x0A	; 10
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	1d c0       	rjmp	.+58     	; 0x2240 <__stack+0x141>
    2206:	1f 2d       	mov	r17, r15
    2208:	19 7f       	andi	r17, 0xF9	; 249
    220a:	9f 36       	cpi	r25, 0x6F	; 111
    220c:	61 f0       	breq	.+24     	; 0x2226 <__stack+0x127>
    220e:	90 37       	cpi	r25, 0x70	; 112
    2210:	20 f4       	brcc	.+8      	; 0x221a <__stack+0x11b>
    2212:	98 35       	cpi	r25, 0x58	; 88
    2214:	09 f0       	breq	.+2      	; 0x2218 <__stack+0x119>
    2216:	a5 c0       	rjmp	.+330    	; 0x2362 <__stack+0x263>
    2218:	0f c0       	rjmp	.+30     	; 0x2238 <__stack+0x139>
    221a:	90 37       	cpi	r25, 0x70	; 112
    221c:	39 f0       	breq	.+14     	; 0x222c <__stack+0x12d>
    221e:	98 37       	cpi	r25, 0x78	; 120
    2220:	09 f0       	breq	.+2      	; 0x2224 <__stack+0x125>
    2222:	9f c0       	rjmp	.+318    	; 0x2362 <__stack+0x263>
    2224:	04 c0       	rjmp	.+8      	; 0x222e <__stack+0x12f>
    2226:	28 e0       	ldi	r18, 0x08	; 8
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	0a c0       	rjmp	.+20     	; 0x2240 <__stack+0x141>
    222c:	10 61       	ori	r17, 0x10	; 16
    222e:	14 fd       	sbrc	r17, 4
    2230:	14 60       	ori	r17, 0x04	; 4
    2232:	20 e1       	ldi	r18, 0x10	; 16
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	04 c0       	rjmp	.+8      	; 0x2240 <__stack+0x141>
    2238:	14 fd       	sbrc	r17, 4
    223a:	16 60       	ori	r17, 0x06	; 6
    223c:	20 e1       	ldi	r18, 0x10	; 16
    223e:	32 e0       	ldi	r19, 0x02	; 2
    2240:	17 ff       	sbrs	r17, 7
    2242:	08 c0       	rjmp	.+16     	; 0x2254 <__stack+0x155>
    2244:	f5 01       	movw	r30, r10
    2246:	60 81       	ld	r22, Z
    2248:	71 81       	ldd	r23, Z+1	; 0x01
    224a:	82 81       	ldd	r24, Z+2	; 0x02
    224c:	93 81       	ldd	r25, Z+3	; 0x03
    224e:	44 e0       	ldi	r20, 0x04	; 4
    2250:	50 e0       	ldi	r21, 0x00	; 0
    2252:	08 c0       	rjmp	.+16     	; 0x2264 <__stack+0x165>
    2254:	f5 01       	movw	r30, r10
    2256:	80 81       	ld	r24, Z
    2258:	91 81       	ldd	r25, Z+1	; 0x01
    225a:	bc 01       	movw	r22, r24
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	42 e0       	ldi	r20, 0x02	; 2
    2262:	50 e0       	ldi	r21, 0x00	; 0
    2264:	a4 0e       	add	r10, r20
    2266:	b5 1e       	adc	r11, r21
    2268:	a1 01       	movw	r20, r2
    226a:	da d0       	rcall	.+436    	; 0x2420 <__ultoa_invert>
    226c:	d8 2e       	mov	r13, r24
    226e:	d2 18       	sub	r13, r2
    2270:	8f e7       	ldi	r24, 0x7F	; 127
    2272:	f8 2e       	mov	r15, r24
    2274:	f1 22       	and	r15, r17
    2276:	f6 fe       	sbrs	r15, 6
    2278:	0b c0       	rjmp	.+22     	; 0x2290 <__stack+0x191>
    227a:	5e ef       	ldi	r21, 0xFE	; 254
    227c:	f5 22       	and	r15, r21
    227e:	d9 14       	cp	r13, r9
    2280:	38 f4       	brcc	.+14     	; 0x2290 <__stack+0x191>
    2282:	f4 fe       	sbrs	r15, 4
    2284:	07 c0       	rjmp	.+14     	; 0x2294 <__stack+0x195>
    2286:	f2 fc       	sbrc	r15, 2
    2288:	05 c0       	rjmp	.+10     	; 0x2294 <__stack+0x195>
    228a:	8f ee       	ldi	r24, 0xEF	; 239
    228c:	f8 22       	and	r15, r24
    228e:	02 c0       	rjmp	.+4      	; 0x2294 <__stack+0x195>
    2290:	1d 2d       	mov	r17, r13
    2292:	01 c0       	rjmp	.+2      	; 0x2296 <__stack+0x197>
    2294:	19 2d       	mov	r17, r9
    2296:	f4 fe       	sbrs	r15, 4
    2298:	0d c0       	rjmp	.+26     	; 0x22b4 <__stack+0x1b5>
    229a:	fe 01       	movw	r30, r28
    229c:	ed 0d       	add	r30, r13
    229e:	f1 1d       	adc	r31, r1
    22a0:	80 81       	ld	r24, Z
    22a2:	80 33       	cpi	r24, 0x30	; 48
    22a4:	19 f4       	brne	.+6      	; 0x22ac <__stack+0x1ad>
    22a6:	99 ee       	ldi	r25, 0xE9	; 233
    22a8:	f9 22       	and	r15, r25
    22aa:	08 c0       	rjmp	.+16     	; 0x22bc <__stack+0x1bd>
    22ac:	1f 5f       	subi	r17, 0xFF	; 255
    22ae:	f2 fe       	sbrs	r15, 2
    22b0:	05 c0       	rjmp	.+10     	; 0x22bc <__stack+0x1bd>
    22b2:	03 c0       	rjmp	.+6      	; 0x22ba <__stack+0x1bb>
    22b4:	8f 2d       	mov	r24, r15
    22b6:	86 78       	andi	r24, 0x86	; 134
    22b8:	09 f0       	breq	.+2      	; 0x22bc <__stack+0x1bd>
    22ba:	1f 5f       	subi	r17, 0xFF	; 255
    22bc:	0f 2d       	mov	r16, r15
    22be:	f3 fc       	sbrc	r15, 3
    22c0:	13 c0       	rjmp	.+38     	; 0x22e8 <__stack+0x1e9>
    22c2:	f0 fe       	sbrs	r15, 0
    22c4:	0e c0       	rjmp	.+28     	; 0x22e2 <__stack+0x1e3>
    22c6:	1e 15       	cp	r17, r14
    22c8:	10 f0       	brcs	.+4      	; 0x22ce <__stack+0x1cf>
    22ca:	9d 2c       	mov	r9, r13
    22cc:	0a c0       	rjmp	.+20     	; 0x22e2 <__stack+0x1e3>
    22ce:	9d 2c       	mov	r9, r13
    22d0:	9e 0c       	add	r9, r14
    22d2:	91 1a       	sub	r9, r17
    22d4:	1e 2d       	mov	r17, r14
    22d6:	05 c0       	rjmp	.+10     	; 0x22e2 <__stack+0x1e3>
    22d8:	80 e2       	ldi	r24, 0x20	; 32
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	b3 01       	movw	r22, r6
    22de:	74 d0       	rcall	.+232    	; 0x23c8 <fputc>
    22e0:	1f 5f       	subi	r17, 0xFF	; 255
    22e2:	1e 15       	cp	r17, r14
    22e4:	c8 f3       	brcs	.-14     	; 0x22d8 <__stack+0x1d9>
    22e6:	04 c0       	rjmp	.+8      	; 0x22f0 <__stack+0x1f1>
    22e8:	1e 15       	cp	r17, r14
    22ea:	10 f4       	brcc	.+4      	; 0x22f0 <__stack+0x1f1>
    22ec:	e1 1a       	sub	r14, r17
    22ee:	01 c0       	rjmp	.+2      	; 0x22f2 <__stack+0x1f3>
    22f0:	ee 24       	eor	r14, r14
    22f2:	04 ff       	sbrs	r16, 4
    22f4:	0e c0       	rjmp	.+28     	; 0x2312 <__stack+0x213>
    22f6:	80 e3       	ldi	r24, 0x30	; 48
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	b3 01       	movw	r22, r6
    22fc:	65 d0       	rcall	.+202    	; 0x23c8 <fputc>
    22fe:	02 ff       	sbrs	r16, 2
    2300:	1b c0       	rjmp	.+54     	; 0x2338 <__stack+0x239>
    2302:	01 fd       	sbrc	r16, 1
    2304:	03 c0       	rjmp	.+6      	; 0x230c <__stack+0x20d>
    2306:	88 e7       	ldi	r24, 0x78	; 120
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	0e c0       	rjmp	.+28     	; 0x2328 <__stack+0x229>
    230c:	88 e5       	ldi	r24, 0x58	; 88
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	0b c0       	rjmp	.+22     	; 0x2328 <__stack+0x229>
    2312:	80 2f       	mov	r24, r16
    2314:	86 78       	andi	r24, 0x86	; 134
    2316:	81 f0       	breq	.+32     	; 0x2338 <__stack+0x239>
    2318:	01 ff       	sbrs	r16, 1
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <__stack+0x221>
    231c:	8b e2       	ldi	r24, 0x2B	; 43
    231e:	01 c0       	rjmp	.+2      	; 0x2322 <__stack+0x223>
    2320:	80 e2       	ldi	r24, 0x20	; 32
    2322:	f7 fc       	sbrc	r15, 7
    2324:	8d e2       	ldi	r24, 0x2D	; 45
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	b3 01       	movw	r22, r6
    232a:	4e d0       	rcall	.+156    	; 0x23c8 <fputc>
    232c:	05 c0       	rjmp	.+10     	; 0x2338 <__stack+0x239>
    232e:	80 e3       	ldi	r24, 0x30	; 48
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	b3 01       	movw	r22, r6
    2334:	49 d0       	rcall	.+146    	; 0x23c8 <fputc>
    2336:	9a 94       	dec	r9
    2338:	d9 14       	cp	r13, r9
    233a:	c8 f3       	brcs	.-14     	; 0x232e <__stack+0x22f>
    233c:	da 94       	dec	r13
    233e:	f1 01       	movw	r30, r2
    2340:	ed 0d       	add	r30, r13
    2342:	f1 1d       	adc	r31, r1
    2344:	80 81       	ld	r24, Z
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	b3 01       	movw	r22, r6
    234a:	3e d0       	rcall	.+124    	; 0x23c8 <fputc>
    234c:	dd 20       	and	r13, r13
    234e:	b1 f7       	brne	.-20     	; 0x233c <__stack+0x23d>
    2350:	05 c0       	rjmp	.+10     	; 0x235c <__stack+0x25d>
    2352:	80 e2       	ldi	r24, 0x20	; 32
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	b3 01       	movw	r22, r6
    2358:	37 d0       	rcall	.+110    	; 0x23c8 <fputc>
    235a:	ea 94       	dec	r14
    235c:	ee 20       	and	r14, r14
    235e:	c9 f7       	brne	.-14     	; 0x2352 <__stack+0x253>
    2360:	50 ce       	rjmp	.-864    	; 0x2002 <vfprintf+0x58>
    2362:	f3 01       	movw	r30, r6
    2364:	66 81       	ldd	r22, Z+6	; 0x06
    2366:	77 81       	ldd	r23, Z+7	; 0x07
    2368:	cb 01       	movw	r24, r22
    236a:	2b 96       	adiw	r28, 0x0b	; 11
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	de bf       	out	0x3e, r29	; 62
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	cd bf       	out	0x3d, r28	; 61
    2376:	cf 91       	pop	r28
    2378:	df 91       	pop	r29
    237a:	1f 91       	pop	r17
    237c:	0f 91       	pop	r16
    237e:	ff 90       	pop	r15
    2380:	ef 90       	pop	r14
    2382:	df 90       	pop	r13
    2384:	cf 90       	pop	r12
    2386:	bf 90       	pop	r11
    2388:	af 90       	pop	r10
    238a:	9f 90       	pop	r9
    238c:	8f 90       	pop	r8
    238e:	7f 90       	pop	r7
    2390:	6f 90       	pop	r6
    2392:	5f 90       	pop	r5
    2394:	4f 90       	pop	r4
    2396:	3f 90       	pop	r3
    2398:	2f 90       	pop	r2
    239a:	08 95       	ret

0000239c <strnlen_P>:
    239c:	fc 01       	movw	r30, r24
    239e:	05 90       	lpm	r0, Z+
    23a0:	61 50       	subi	r22, 0x01	; 1
    23a2:	70 40       	sbci	r23, 0x00	; 0
    23a4:	01 10       	cpse	r0, r1
    23a6:	d8 f7       	brcc	.-10     	; 0x239e <strnlen_P+0x2>
    23a8:	80 95       	com	r24
    23aa:	90 95       	com	r25
    23ac:	8e 0f       	add	r24, r30
    23ae:	9f 1f       	adc	r25, r31
    23b0:	08 95       	ret

000023b2 <strnlen>:
    23b2:	fc 01       	movw	r30, r24
    23b4:	61 50       	subi	r22, 0x01	; 1
    23b6:	70 40       	sbci	r23, 0x00	; 0
    23b8:	01 90       	ld	r0, Z+
    23ba:	01 10       	cpse	r0, r1
    23bc:	d8 f7       	brcc	.-10     	; 0x23b4 <strnlen+0x2>
    23be:	80 95       	com	r24
    23c0:	90 95       	com	r25
    23c2:	8e 0f       	add	r24, r30
    23c4:	9f 1f       	adc	r25, r31
    23c6:	08 95       	ret

000023c8 <fputc>:
    23c8:	0f 93       	push	r16
    23ca:	1f 93       	push	r17
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	8c 01       	movw	r16, r24
    23d2:	eb 01       	movw	r28, r22
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	81 ff       	sbrs	r24, 1
    23d8:	1b c0       	rjmp	.+54     	; 0x2410 <fputc+0x48>
    23da:	82 ff       	sbrs	r24, 2
    23dc:	0d c0       	rjmp	.+26     	; 0x23f8 <fputc+0x30>
    23de:	2e 81       	ldd	r18, Y+6	; 0x06
    23e0:	3f 81       	ldd	r19, Y+7	; 0x07
    23e2:	8c 81       	ldd	r24, Y+4	; 0x04
    23e4:	9d 81       	ldd	r25, Y+5	; 0x05
    23e6:	28 17       	cp	r18, r24
    23e8:	39 07       	cpc	r19, r25
    23ea:	64 f4       	brge	.+24     	; 0x2404 <fputc+0x3c>
    23ec:	e8 81       	ld	r30, Y
    23ee:	f9 81       	ldd	r31, Y+1	; 0x01
    23f0:	01 93       	st	Z+, r16
    23f2:	f9 83       	std	Y+1, r31	; 0x01
    23f4:	e8 83       	st	Y, r30
    23f6:	06 c0       	rjmp	.+12     	; 0x2404 <fputc+0x3c>
    23f8:	e8 85       	ldd	r30, Y+8	; 0x08
    23fa:	f9 85       	ldd	r31, Y+9	; 0x09
    23fc:	80 2f       	mov	r24, r16
    23fe:	09 95       	icall
    2400:	89 2b       	or	r24, r25
    2402:	31 f4       	brne	.+12     	; 0x2410 <fputc+0x48>
    2404:	8e 81       	ldd	r24, Y+6	; 0x06
    2406:	9f 81       	ldd	r25, Y+7	; 0x07
    2408:	01 96       	adiw	r24, 0x01	; 1
    240a:	9f 83       	std	Y+7, r25	; 0x07
    240c:	8e 83       	std	Y+6, r24	; 0x06
    240e:	02 c0       	rjmp	.+4      	; 0x2414 <fputc+0x4c>
    2410:	0f ef       	ldi	r16, 0xFF	; 255
    2412:	1f ef       	ldi	r17, 0xFF	; 255
    2414:	c8 01       	movw	r24, r16
    2416:	df 91       	pop	r29
    2418:	cf 91       	pop	r28
    241a:	1f 91       	pop	r17
    241c:	0f 91       	pop	r16
    241e:	08 95       	ret

00002420 <__ultoa_invert>:
    2420:	fa 01       	movw	r30, r20
    2422:	aa 27       	eor	r26, r26
    2424:	28 30       	cpi	r18, 0x08	; 8
    2426:	51 f1       	breq	.+84     	; 0x247c <__ultoa_invert+0x5c>
    2428:	20 31       	cpi	r18, 0x10	; 16
    242a:	81 f1       	breq	.+96     	; 0x248c <__ultoa_invert+0x6c>
    242c:	e8 94       	clt
    242e:	6f 93       	push	r22
    2430:	6e 7f       	andi	r22, 0xFE	; 254
    2432:	6e 5f       	subi	r22, 0xFE	; 254
    2434:	7f 4f       	sbci	r23, 0xFF	; 255
    2436:	8f 4f       	sbci	r24, 0xFF	; 255
    2438:	9f 4f       	sbci	r25, 0xFF	; 255
    243a:	af 4f       	sbci	r26, 0xFF	; 255
    243c:	b1 e0       	ldi	r27, 0x01	; 1
    243e:	3e d0       	rcall	.+124    	; 0x24bc <__ultoa_invert+0x9c>
    2440:	b4 e0       	ldi	r27, 0x04	; 4
    2442:	3c d0       	rcall	.+120    	; 0x24bc <__ultoa_invert+0x9c>
    2444:	67 0f       	add	r22, r23
    2446:	78 1f       	adc	r23, r24
    2448:	89 1f       	adc	r24, r25
    244a:	9a 1f       	adc	r25, r26
    244c:	a1 1d       	adc	r26, r1
    244e:	68 0f       	add	r22, r24
    2450:	79 1f       	adc	r23, r25
    2452:	8a 1f       	adc	r24, r26
    2454:	91 1d       	adc	r25, r1
    2456:	a1 1d       	adc	r26, r1
    2458:	6a 0f       	add	r22, r26
    245a:	71 1d       	adc	r23, r1
    245c:	81 1d       	adc	r24, r1
    245e:	91 1d       	adc	r25, r1
    2460:	a1 1d       	adc	r26, r1
    2462:	20 d0       	rcall	.+64     	; 0x24a4 <__ultoa_invert+0x84>
    2464:	09 f4       	brne	.+2      	; 0x2468 <__ultoa_invert+0x48>
    2466:	68 94       	set
    2468:	3f 91       	pop	r19
    246a:	2a e0       	ldi	r18, 0x0A	; 10
    246c:	26 9f       	mul	r18, r22
    246e:	11 24       	eor	r1, r1
    2470:	30 19       	sub	r19, r0
    2472:	30 5d       	subi	r19, 0xD0	; 208
    2474:	31 93       	st	Z+, r19
    2476:	de f6       	brtc	.-74     	; 0x242e <__ultoa_invert+0xe>
    2478:	cf 01       	movw	r24, r30
    247a:	08 95       	ret
    247c:	46 2f       	mov	r20, r22
    247e:	47 70       	andi	r20, 0x07	; 7
    2480:	40 5d       	subi	r20, 0xD0	; 208
    2482:	41 93       	st	Z+, r20
    2484:	b3 e0       	ldi	r27, 0x03	; 3
    2486:	0f d0       	rcall	.+30     	; 0x24a6 <__ultoa_invert+0x86>
    2488:	c9 f7       	brne	.-14     	; 0x247c <__ultoa_invert+0x5c>
    248a:	f6 cf       	rjmp	.-20     	; 0x2478 <__ultoa_invert+0x58>
    248c:	46 2f       	mov	r20, r22
    248e:	4f 70       	andi	r20, 0x0F	; 15
    2490:	40 5d       	subi	r20, 0xD0	; 208
    2492:	4a 33       	cpi	r20, 0x3A	; 58
    2494:	18 f0       	brcs	.+6      	; 0x249c <__ultoa_invert+0x7c>
    2496:	49 5d       	subi	r20, 0xD9	; 217
    2498:	31 fd       	sbrc	r19, 1
    249a:	40 52       	subi	r20, 0x20	; 32
    249c:	41 93       	st	Z+, r20
    249e:	02 d0       	rcall	.+4      	; 0x24a4 <__ultoa_invert+0x84>
    24a0:	a9 f7       	brne	.-22     	; 0x248c <__ultoa_invert+0x6c>
    24a2:	ea cf       	rjmp	.-44     	; 0x2478 <__ultoa_invert+0x58>
    24a4:	b4 e0       	ldi	r27, 0x04	; 4
    24a6:	a6 95       	lsr	r26
    24a8:	97 95       	ror	r25
    24aa:	87 95       	ror	r24
    24ac:	77 95       	ror	r23
    24ae:	67 95       	ror	r22
    24b0:	ba 95       	dec	r27
    24b2:	c9 f7       	brne	.-14     	; 0x24a6 <__ultoa_invert+0x86>
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	61 05       	cpc	r22, r1
    24b8:	71 05       	cpc	r23, r1
    24ba:	08 95       	ret
    24bc:	9b 01       	movw	r18, r22
    24be:	ac 01       	movw	r20, r24
    24c0:	0a 2e       	mov	r0, r26
    24c2:	06 94       	lsr	r0
    24c4:	57 95       	ror	r21
    24c6:	47 95       	ror	r20
    24c8:	37 95       	ror	r19
    24ca:	27 95       	ror	r18
    24cc:	ba 95       	dec	r27
    24ce:	c9 f7       	brne	.-14     	; 0x24c2 <__ultoa_invert+0xa2>
    24d0:	62 0f       	add	r22, r18
    24d2:	73 1f       	adc	r23, r19
    24d4:	84 1f       	adc	r24, r20
    24d6:	95 1f       	adc	r25, r21
    24d8:	a0 1d       	adc	r26, r0
    24da:	08 95       	ret

000024dc <_exit>:
    24dc:	f8 94       	cli

000024de <__stop_program>:
    24de:	ff cf       	rjmp	.-2      	; 0x24de <__stop_program>
