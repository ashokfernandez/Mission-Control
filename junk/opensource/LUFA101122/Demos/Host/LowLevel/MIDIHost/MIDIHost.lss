
MIDIHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000018dc  00001970  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080012e  0080012e  0000199e  2**0
                  ALLOC
  3 .stab         00000eac  00000000  00000000  000019a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000025c  00000000  00000000  0000284c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000390  00000000  00000000  00002aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000078b  00000000  00000000  00002e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004a57  00000000  00000000  000035c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001a9a  00000000  00000000  0000801a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003d7b  00000000  00000000  00009ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004e0  00000000  00000000  0000d830  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000235e  00000000  00000000  0000dd10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002055  00000000  00000000  0001006e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000400  00000000  00000000  000120c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return USB_Host_SendControlRequest(Buffer);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointNum)
{
       0:	40 c1       	rjmp	.+640    	; 0x282 <__ctors_end>
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       2:	00 00       	nop
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       4:	5c c1       	rjmp	.+696    	; 0x2be <__bad_interrupt>
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       6:	00 00       	nop
       8:	5a c1       	rjmp	.+692    	; 0x2be <__bad_interrupt>
       a:	00 00       	nop
       c:	58 c1       	rjmp	.+688    	; 0x2be <__bad_interrupt>
       e:	00 00       	nop
      10:	56 c1       	rjmp	.+684    	; 0x2be <__bad_interrupt>
      12:	00 00       	nop
      14:	54 c1       	rjmp	.+680    	; 0x2be <__bad_interrupt>
      16:	00 00       	nop
      18:	52 c1       	rjmp	.+676    	; 0x2be <__bad_interrupt>
      1a:	00 00       	nop
      1c:	50 c1       	rjmp	.+672    	; 0x2be <__bad_interrupt>
      1e:	00 00       	nop
      20:	4e c1       	rjmp	.+668    	; 0x2be <__bad_interrupt>
      22:	00 00       	nop
      24:	4c c1       	rjmp	.+664    	; 0x2be <__bad_interrupt>
      26:	00 00       	nop
      28:	7a c6       	rjmp	.+3316   	; 0xd1e <__vector_10>
      2a:	00 00       	nop
      2c:	48 c1       	rjmp	.+656    	; 0x2be <__bad_interrupt>
      2e:	00 00       	nop
      30:	46 c1       	rjmp	.+652    	; 0x2be <__bad_interrupt>
      32:	00 00       	nop
      34:	44 c1       	rjmp	.+648    	; 0x2be <__bad_interrupt>
      36:	00 00       	nop
      38:	42 c1       	rjmp	.+644    	; 0x2be <__bad_interrupt>
      3a:	00 00       	nop
      3c:	40 c1       	rjmp	.+640    	; 0x2be <__bad_interrupt>
      3e:	00 00       	nop
      40:	3e c1       	rjmp	.+636    	; 0x2be <__bad_interrupt>
      42:	00 00       	nop
      44:	3c c1       	rjmp	.+632    	; 0x2be <__bad_interrupt>
      46:	00 00       	nop
      48:	3a c1       	rjmp	.+628    	; 0x2be <__bad_interrupt>
      4a:	00 00       	nop
      4c:	38 c1       	rjmp	.+624    	; 0x2be <__bad_interrupt>
      4e:	00 00       	nop
      50:	36 c1       	rjmp	.+620    	; 0x2be <__bad_interrupt>
      52:	00 00       	nop
      54:	34 c1       	rjmp	.+616    	; 0x2be <__bad_interrupt>
      56:	00 00       	nop
      58:	32 c1       	rjmp	.+612    	; 0x2be <__bad_interrupt>
      5a:	00 00       	nop
      5c:	30 c1       	rjmp	.+608    	; 0x2be <__bad_interrupt>
      5e:	00 00       	nop
      60:	2e c1       	rjmp	.+604    	; 0x2be <__bad_interrupt>
      62:	00 00       	nop
      64:	2c c1       	rjmp	.+600    	; 0x2be <__bad_interrupt>
      66:	00 00       	nop
      68:	2a c1       	rjmp	.+596    	; 0x2be <__bad_interrupt>
      6a:	00 00       	nop
      6c:	28 c1       	rjmp	.+592    	; 0x2be <__bad_interrupt>
      6e:	00 00       	nop
      70:	26 c1       	rjmp	.+588    	; 0x2be <__bad_interrupt>
      72:	00 00       	nop
      74:	24 c1       	rjmp	.+584    	; 0x2be <__bad_interrupt>
      76:	00 00       	nop
      78:	22 c1       	rjmp	.+580    	; 0x2be <__bad_interrupt>
      7a:	00 00       	nop
      7c:	20 c1       	rjmp	.+576    	; 0x2be <__bad_interrupt>
      7e:	00 00       	nop
      80:	1e c1       	rjmp	.+572    	; 0x2be <__bad_interrupt>
      82:	00 00       	nop
      84:	1c c1       	rjmp	.+568    	; 0x2be <__bad_interrupt>
      86:	00 00       	nop
      88:	1a c1       	rjmp	.+564    	; 0x2be <__bad_interrupt>
      8a:	00 00       	nop
      8c:	18 c1       	rjmp	.+560    	; 0x2be <__bad_interrupt>
      8e:	00 00       	nop
      90:	16 c1       	rjmp	.+556    	; 0x2be <__bad_interrupt>
      92:	00 00       	nop
      94:	14 c1       	rjmp	.+552    	; 0x2be <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4205>:
      98:	4d 49 44 49 20 4e 6f 74 65 20 25 73 20 2d 20 43     MIDI Note %s - C
      a8:	68 61 6e 6e 65 6c 20 25 64 2c 20 50 69 74 63 68     hannel %d, Pitch
      b8:	20 25 64 2c 20 56 65 6c 6f 63 69 74 79 20 25 64      %d, Velocity %d
      c8:	0d 0a 00                                            ...

000000cb <__c.4199>:
      cb:	4d 49 44 49 20 44 65 76 69 63 65 20 45 6e 75 6d     MIDI Device Enum
      db:	65 72 61 74 65 64 2e 0d 0a 00                       erated....

000000e5 <__c.4197>:
      e5:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
      f5:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     105:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     115:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     125:	37 6d 00                                            7m.

00000128 <__c.4194>:
     128:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     138:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

00000142 <__c.4192>:
     142:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     152:	69 63 65 2e 0d 0a 00                                ice....

00000159 <__c.4190>:
     159:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     169:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     179:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000183 <__c.4188>:
     183:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     193:	61 74 61 2e 0d 0a 00                                ata....

0000019a <__c.4177>:
     19a:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     1aa:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     1ba:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     1ca:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     1da:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     1ea:	1b 5b 33 37 6d 00                                   .[37m.

000001f0 <__c.4169>:
     1f0:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     200:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     210:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000021f <__c.4161>:
     21f:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     22f:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     23f:	00                                                  .

00000240 <__c.4156>:
     240:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     250:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

0000025d <__c.4142>:
     25d:	1b 5b 33 36 6d 4d 49 44 49 20 48 6f 73 74 20 44     .[36mMIDI Host D
     26d:	65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b     emo running....[
     27d:	33 37 6d 00 00                                      37m..

00000282 <__ctors_end>:
     282:	11 24       	eor	r1, r1
     284:	1f be       	out	0x3f, r1	; 63
     286:	cf ef       	ldi	r28, 0xFF	; 255
     288:	d0 e2       	ldi	r29, 0x20	; 32
     28a:	de bf       	out	0x3e, r29	; 62
     28c:	cd bf       	out	0x3d, r28	; 61

0000028e <__do_copy_data>:
     28e:	11 e0       	ldi	r17, 0x01	; 1
     290:	a0 e0       	ldi	r26, 0x00	; 0
     292:	b1 e0       	ldi	r27, 0x01	; 1
     294:	ec ed       	ldi	r30, 0xDC	; 220
     296:	f8 e1       	ldi	r31, 0x18	; 24
     298:	00 e0       	ldi	r16, 0x00	; 0
     29a:	0b bf       	out	0x3b, r16	; 59
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <__do_copy_data+0x14>
     29e:	07 90       	elpm	r0, Z+
     2a0:	0d 92       	st	X+, r0
     2a2:	ae 32       	cpi	r26, 0x2E	; 46
     2a4:	b1 07       	cpc	r27, r17
     2a6:	d9 f7       	brne	.-10     	; 0x29e <__do_copy_data+0x10>

000002a8 <__do_clear_bss>:
     2a8:	11 e0       	ldi	r17, 0x01	; 1
     2aa:	ae e2       	ldi	r26, 0x2E	; 46
     2ac:	b1 e0       	ldi	r27, 0x01	; 1
     2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <.do_clear_bss_start>

000002b0 <.do_clear_bss_loop>:
     2b0:	1d 92       	st	X+, r1

000002b2 <.do_clear_bss_start>:
     2b2:	a2 34       	cpi	r26, 0x42	; 66
     2b4:	b1 07       	cpc	r27, r17
     2b6:	e1 f7       	brne	.-8      	; 0x2b0 <.do_clear_bss_loop>
     2b8:	ad d1       	rcall	.+858    	; 0x614 <main>
     2ba:	0c 94 6c 0c 	jmp	0x18d8	; 0x18d8 <_exit>

000002be <__bad_interrupt>:
     2be:	a0 ce       	rjmp	.-704    	; 0x0 <__vectors>

000002c0 <EVENT_USB_Host_DeviceEnumerationComplete>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2c0:	8b b1       	in	r24, 0x0b	; 11
     2c2:	8f 70       	andi	r24, 0x0F	; 15
     2c4:	80 66       	ori	r24, 0x60	; 96
     2c6:	8b b9       	out	0x0b, r24	; 11
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     2c8:	08 95       	ret

000002ca <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     2ca:	8f e1       	ldi	r24, 0x1F	; 31
     2cc:	92 e0       	ldi	r25, 0x02	; 2
     2ce:	0e 94 9e 09 	call	0x133c	; 0x133c <puts_P>
     2d2:	8b b1       	in	r24, 0x0b	; 11
     2d4:	8f 70       	andi	r24, 0x0F	; 15
     2d6:	80 61       	ori	r24, 0x10	; 16
     2d8:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     2da:	08 95       	ret

000002dc <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     2dc:	80 e4       	ldi	r24, 0x40	; 64
     2de:	92 e0       	ldi	r25, 0x02	; 2
     2e0:	0e 94 9e 09 	call	0x133c	; 0x133c <puts_P>
     2e4:	8b b1       	in	r24, 0x0b	; 11
     2e6:	8f 70       	andi	r24, 0x0F	; 15
     2e8:	80 6a       	ori	r24, 0xA0	; 160
     2ea:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     2ec:	08 95       	ret

000002ee <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     2ee:	90 91 3b 01 	lds	r25, 0x013B
     2f2:	2d b7       	in	r18, 0x3d	; 61
     2f4:	3e b7       	in	r19, 0x3e	; 62
     2f6:	28 50       	subi	r18, 0x08	; 8
     2f8:	30 40       	sbci	r19, 0x00	; 0
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	f8 94       	cli
     2fe:	3e bf       	out	0x3e, r19	; 62
     300:	0f be       	out	0x3f, r0	; 63
     302:	2d bf       	out	0x3d, r18	; 61
     304:	ed b7       	in	r30, 0x3d	; 61
     306:	fe b7       	in	r31, 0x3e	; 62
     308:	31 96       	adiw	r30, 0x01	; 1
     30a:	2a e9       	ldi	r18, 0x9A	; 154
     30c:	31 e0       	ldi	r19, 0x01	; 1
     30e:	ad b7       	in	r26, 0x3d	; 61
     310:	be b7       	in	r27, 0x3e	; 62
     312:	12 96       	adiw	r26, 0x02	; 2
     314:	3c 93       	st	X, r19
     316:	2e 93       	st	-X, r18
     318:	11 97       	sbiw	r26, 0x01	; 1
     31a:	82 83       	std	Z+2, r24	; 0x02
     31c:	13 82       	std	Z+3, r1	; 0x03
     31e:	64 83       	std	Z+4, r22	; 0x04
     320:	15 82       	std	Z+5, r1	; 0x05
     322:	96 83       	std	Z+6, r25	; 0x06
     324:	17 82       	std	Z+7, r1	; 0x07
     326:	e8 d7       	rcall	.+4048   	; 0x12f8 <printf_P>
     328:	8b b1       	in	r24, 0x0b	; 11
     32a:	8f 70       	andi	r24, 0x0F	; 15
     32c:	80 69       	ori	r24, 0x90	; 144
     32e:	8b b9       	out	0x0b, r24	; 11
     330:	2d b7       	in	r18, 0x3d	; 61
     332:	3e b7       	in	r19, 0x3e	; 62
     334:	28 5f       	subi	r18, 0xF8	; 248
     336:	3f 4f       	sbci	r19, 0xFF	; 255
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	f8 94       	cli
     33c:	3e bf       	out	0x3e, r19	; 62
     33e:	0f be       	out	0x3f, r0	; 63
     340:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     342:	08 95       	ret

00000344 <MIDI_Host_Task>:
/** Task to set the configuration of the attached device after it has been enumerated, and to read in
 *  note on/off messages from the attached MIDI device and print it to the serial port. When the board
 *  joystick or buttons are pressed, note on/off messages are sent to the attached device.
 */
void MIDI_Host_Task(void)
{
     344:	1f 93       	push	r17
     346:	df 93       	push	r29
     348:	cf 93       	push	r28
     34a:	00 d0       	rcall	.+0      	; 0x34c <MIDI_Host_Task+0x8>
     34c:	00 d0       	rcall	.+0      	; 0x34e <MIDI_Host_Task+0xa>
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
	uint8_t ErrorCode;

	switch (USB_HostState)
     352:	80 91 3b 01 	lds	r24, 0x013B
     356:	8b 30       	cpi	r24, 0x0B	; 11
     358:	21 f0       	breq	.+8      	; 0x362 <MIDI_Host_Task+0x1e>
     35a:	8c 30       	cpi	r24, 0x0C	; 12
     35c:	09 f0       	breq	.+2      	; 0x360 <MIDI_Host_Task+0x1c>
     35e:	f3 c0       	rjmp	.+486    	; 0x546 <MIDI_Host_Task+0x202>
     360:	45 c0       	rjmp	.+138    	; 0x3ec <MIDI_Host_Task+0xa8>
	{
		case HOST_STATE_Addressed:
			puts_P(PSTR("Getting Config Data.\r\n"));
     362:	83 e8       	ldi	r24, 0x83	; 131
     364:	91 e0       	ldi	r25, 0x01	; 1
     366:	ea d7       	rcall	.+4052   	; 0x133c <puts_P>

			/* Get and process the configuration descriptor data */
			if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     368:	7f d1       	rcall	.+766    	; 0x668 <ProcessConfigurationDescriptor>
     36a:	18 2f       	mov	r17, r24
     36c:	88 23       	and	r24, r24
     36e:	b9 f0       	breq	.+46     	; 0x39e <MIDI_Host_Task+0x5a>
			{
				if (ErrorCode == ControlError)
     370:	81 30       	cpi	r24, 0x01	; 1
     372:	19 f4       	brne	.+6      	; 0x37a <MIDI_Host_Task+0x36>
				  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     374:	89 e5       	ldi	r24, 0x59	; 89
     376:	91 e0       	ldi	r25, 0x01	; 1
     378:	02 c0       	rjmp	.+4      	; 0x37e <MIDI_Host_Task+0x3a>
				else
				  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     37a:	82 e4       	ldi	r24, 0x42	; 66
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	de d7       	rcall	.+4028   	; 0x133c <puts_P>

				printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     380:	00 d0       	rcall	.+0      	; 0x382 <MIDI_Host_Task+0x3e>
     382:	00 d0       	rcall	.+0      	; 0x384 <MIDI_Host_Task+0x40>
     384:	ed b7       	in	r30, 0x3d	; 61
     386:	fe b7       	in	r31, 0x3e	; 62
     388:	31 96       	adiw	r30, 0x01	; 1
     38a:	88 e2       	ldi	r24, 0x28	; 40
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	ad b7       	in	r26, 0x3d	; 61
     390:	be b7       	in	r27, 0x3e	; 62
     392:	12 96       	adiw	r26, 0x02	; 2
     394:	9c 93       	st	X, r25
     396:	8e 93       	st	-X, r24
     398:	11 97       	sbiw	r26, 0x01	; 1
     39a:	12 83       	std	Z+2, r17	; 0x02
     39c:	13 c0       	rjmp	.+38     	; 0x3c4 <MIDI_Host_Task+0x80>
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
			if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	87 d2       	rcall	.+1294   	; 0x8b0 <USB_Host_SetDeviceConfiguration>
     3a2:	28 2f       	mov	r18, r24
     3a4:	88 23       	and	r24, r24
     3a6:	d9 f0       	breq	.+54     	; 0x3de <MIDI_Host_Task+0x9a>
			{
				printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     3a8:	00 d0       	rcall	.+0      	; 0x3aa <MIDI_Host_Task+0x66>
     3aa:	00 d0       	rcall	.+0      	; 0x3ac <MIDI_Host_Task+0x68>
     3ac:	ed b7       	in	r30, 0x3d	; 61
     3ae:	fe b7       	in	r31, 0x3e	; 62
     3b0:	31 96       	adiw	r30, 0x01	; 1
     3b2:	85 ee       	ldi	r24, 0xE5	; 229
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	ad b7       	in	r26, 0x3d	; 61
     3b8:	be b7       	in	r27, 0x3e	; 62
     3ba:	12 96       	adiw	r26, 0x02	; 2
     3bc:	9c 93       	st	X, r25
     3be:	8e 93       	st	-X, r24
     3c0:	11 97       	sbiw	r26, 0x01	; 1
     3c2:	22 83       	std	Z+2, r18	; 0x02
     3c4:	13 82       	std	Z+3, r1	; 0x03
     3c6:	98 d7       	rcall	.+3888   	; 0x12f8 <printf_P>
     3c8:	8b b1       	in	r24, 0x0b	; 11
     3ca:	8f 70       	andi	r24, 0x0F	; 15
     3cc:	80 69       	ori	r24, 0x90	; 144
     3ce:	8b b9       	out	0x0b, r24	; 11

				/* Indicate error via status LEDs */
				LEDs_SetAllLEDs(LEDMASK_USB_ERROR);

				/* Wait until USB device disconnected */
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     3d0:	10 92 3b 01 	sts	0x013B, r1
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	b4 c0       	rjmp	.+360    	; 0x546 <MIDI_Host_Task+0x202>
				break;
			}

			puts_P(PSTR("MIDI Device Enumerated.\r\n"));
     3de:	8b ec       	ldi	r24, 0xCB	; 203
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	ac d7       	rcall	.+3928   	; 0x133c <puts_P>

			USB_HostState = HOST_STATE_Configured;
     3e4:	8c e0       	ldi	r24, 0x0C	; 12
     3e6:	80 93 3b 01 	sts	0x013B, r24
     3ea:	ad c0       	rjmp	.+346    	; 0x546 <MIDI_Host_Task+0x202>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	80 93 a7 00 	sts	0x00A7, r24
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     3f2:	80 91 a6 00 	lds	r24, 0x00A6
			break;
		case HOST_STATE_Configured:
			Pipe_SelectPipe(MIDI_DATA_IN_PIPE);

			if (Pipe_IsINReceived())
     3f6:	80 ff       	sbrs	r24, 0
     3f8:	48 c0       	rjmp	.+144    	; 0x48a <MIDI_Host_Task+0x146>
			{
				MIDI_EventPacket_t MIDIEvent;

				Pipe_Read_Stream_LE(&MIDIEvent, sizeof(MIDIEvent));
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	64 e0       	ldi	r22, 0x04	; 4
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	e7 d6       	rcall	.+3534   	; 0x11d2 <Pipe_Read_Stream_LE>

				bool NoteOnEvent  = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_ON  >> 4));
     404:	89 81       	ldd	r24, Y+1	; 0x01
     406:	8f 70       	andi	r24, 0x0F	; 15
     408:	90 e0       	ldi	r25, 0x00	; 0
				bool NoteOffEvent = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_OFF >> 4));

				if (NoteOnEvent || NoteOffEvent)
     40a:	89 30       	cpi	r24, 0x09	; 9
     40c:	91 05       	cpc	r25, r1
     40e:	19 f4       	brne	.+6      	; 0x416 <MIDI_Host_Task+0xd2>
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	31 e0       	ldi	r19, 0x01	; 1
     414:	04 c0       	rjmp	.+8      	; 0x41e <MIDI_Host_Task+0xda>
     416:	08 97       	sbiw	r24, 0x08	; 8
     418:	69 f5       	brne	.+90     	; 0x474 <MIDI_Host_Task+0x130>
     41a:	23 e0       	ldi	r18, 0x03	; 3
     41c:	31 e0       	ldi	r19, 0x01	; 1
				{
					printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
     41e:	8d b7       	in	r24, 0x3d	; 61
     420:	9e b7       	in	r25, 0x3e	; 62
     422:	0a 97       	sbiw	r24, 0x0a	; 10
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	9e bf       	out	0x3e, r25	; 62
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	8d bf       	out	0x3d, r24	; 61
     42e:	ed b7       	in	r30, 0x3d	; 61
     430:	fe b7       	in	r31, 0x3e	; 62
     432:	31 96       	adiw	r30, 0x01	; 1
     434:	88 e9       	ldi	r24, 0x98	; 152
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	ad b7       	in	r26, 0x3d	; 61
     43a:	be b7       	in	r27, 0x3e	; 62
     43c:	12 96       	adiw	r26, 0x02	; 2
     43e:	9c 93       	st	X, r25
     440:	8e 93       	st	-X, r24
     442:	11 97       	sbiw	r26, 0x01	; 1
     444:	33 83       	std	Z+3, r19	; 0x03
     446:	22 83       	std	Z+2, r18	; 0x02
     448:	8a 81       	ldd	r24, Y+2	; 0x02
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	8f 70       	andi	r24, 0x0F	; 15
     44e:	90 70       	andi	r25, 0x00	; 0
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	95 83       	std	Z+5, r25	; 0x05
     454:	84 83       	std	Z+4, r24	; 0x04
     456:	8b 81       	ldd	r24, Y+3	; 0x03
     458:	86 83       	std	Z+6, r24	; 0x06
     45a:	17 82       	std	Z+7, r1	; 0x07
     45c:	8c 81       	ldd	r24, Y+4	; 0x04
     45e:	80 87       	std	Z+8, r24	; 0x08
     460:	11 86       	std	Z+9, r1	; 0x09
     462:	4a d7       	rcall	.+3732   	; 0x12f8 <printf_P>
     464:	8d b7       	in	r24, 0x3d	; 61
     466:	9e b7       	in	r25, 0x3e	; 62
     468:	0a 96       	adiw	r24, 0x0a	; 10
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	9e bf       	out	0x3e, r25	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	8d bf       	out	0x3d, r24	; 61
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     474:	80 91 f6 00 	lds	r24, 0x00F6
     478:	90 91 f7 00 	lds	r25, 0x00F7
				                                                                           ((MIDIEvent.Data1 & 0x0F) + 1),
				                                                                           MIDIEvent.Data2, MIDIEvent.Data3);
				}
				
				if (!(Pipe_BytesInPipe()))
     47c:	89 2b       	or	r24, r25
     47e:	29 f4       	brne	.+10     	; 0x48a <MIDI_Host_Task+0x146>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     480:	80 91 a6 00 	lds	r24, 0x00A6
     484:	8e 77       	andi	r24, 0x7E	; 126
     486:	80 93 a6 00 	sts	0x00A6, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     48a:	82 e0       	ldi	r24, 0x02	; 2
     48c:	80 93 a7 00 	sts	0x00A7, r24
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     490:	80 91 a6 00 	lds	r24, 0x00A6
				  Pipe_ClearIN();
			}

			Pipe_SelectPipe(MIDI_DATA_OUT_PIPE);

			if (Pipe_IsOUTReady())
     494:	82 ff       	sbrs	r24, 2
     496:	57 c0       	rjmp	.+174    	; 0x546 <MIDI_Host_Task+0x202>
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> 1));
     498:	13 b1       	in	r17, 0x03	; 3
     49a:	8c b1       	in	r24, 0x0c	; 12
     49c:	80 95       	com	r24
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	80 73       	andi	r24, 0x30	; 48
     4a2:	90 70       	andi	r25, 0x00	; 0
     4a4:	95 95       	asr	r25
     4a6:	87 95       	ror	r24
     4a8:	10 95       	com	r17
     4aa:	10 7e       	andi	r17, 0xE0	; 224
     4ac:	18 2b       	or	r17, r24
				uint8_t MIDICommand = 0;
				uint8_t MIDIPitch;

				static uint8_t PrevJoystickStatus;
				uint8_t JoystickStatus  = Joystick_GetStatus();
				uint8_t JoystickChanges = (JoystickStatus ^ PrevJoystickStatus);
     4ae:	80 91 2e 01 	lds	r24, 0x012E
     4b2:	81 27       	eor	r24, r17

				/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
				uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));
     4b4:	62 9b       	sbis	0x0c, 2	; 12
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <MIDI_Host_Task+0x178>
     4b8:	40 e0       	ldi	r20, 0x00	; 0
     4ba:	01 c0       	rjmp	.+2      	; 0x4be <MIDI_Host_Task+0x17a>
     4bc:	49 e0       	ldi	r20, 0x09	; 9

				if (JoystickChanges & JOY_LEFT)
     4be:	38 2f       	mov	r19, r24
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	86 ff       	sbrs	r24, 6
     4c4:	05 c0       	rjmp	.+10     	; 0x4d0 <MIDI_Host_Task+0x18c>
				{
					MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     4c6:	16 fd       	sbrc	r17, 6
     4c8:	02 c0       	rjmp	.+4      	; 0x4ce <MIDI_Host_Task+0x18a>
     4ca:	90 e8       	ldi	r25, 0x80	; 128
     4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <MIDI_Host_Task+0x18c>
     4ce:	90 e9       	ldi	r25, 0x90	; 144
					MIDIPitch   = 0x3C;
				}

				if (JoystickChanges & JOY_UP)
     4d0:	87 fd       	sbrc	r24, 7
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <MIDI_Host_Task+0x194>
     4d4:	2c e3       	ldi	r18, 0x3C	; 60
     4d6:	06 c0       	rjmp	.+12     	; 0x4e4 <MIDI_Host_Task+0x1a0>
				{
					MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     4d8:	17 fd       	sbrc	r17, 7
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <MIDI_Host_Task+0x19c>
     4dc:	90 e8       	ldi	r25, 0x80	; 128
     4de:	01 c0       	rjmp	.+2      	; 0x4e2 <MIDI_Host_Task+0x19e>
     4e0:	90 e9       	ldi	r25, 0x90	; 144
     4e2:	2d e3       	ldi	r18, 0x3D	; 61
					MIDIPitch   = 0x3D;
				}

				if (JoystickChanges & JOY_RIGHT)
     4e4:	33 ff       	sbrs	r19, 3
     4e6:	06 c0       	rjmp	.+12     	; 0x4f4 <MIDI_Host_Task+0x1b0>
				{
					MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     4e8:	13 fd       	sbrc	r17, 3
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <MIDI_Host_Task+0x1ac>
     4ec:	90 e8       	ldi	r25, 0x80	; 128
     4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <MIDI_Host_Task+0x1ae>
     4f0:	90 e9       	ldi	r25, 0x90	; 144
     4f2:	2e e3       	ldi	r18, 0x3E	; 62
					MIDIPitch   = 0x3E;
				}

				if (JoystickChanges & JOY_DOWN)
     4f4:	34 ff       	sbrs	r19, 4
     4f6:	06 c0       	rjmp	.+12     	; 0x504 <MIDI_Host_Task+0x1c0>
				{
					MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     4f8:	14 fd       	sbrc	r17, 4
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <MIDI_Host_Task+0x1bc>
     4fc:	90 e8       	ldi	r25, 0x80	; 128
     4fe:	01 c0       	rjmp	.+2      	; 0x502 <MIDI_Host_Task+0x1be>
     500:	90 e9       	ldi	r25, 0x90	; 144
     502:	2f e3       	ldi	r18, 0x3F	; 63
					MIDIPitch   = 0x3F;
				}

				if (JoystickChanges & JOY_PRESS)
     504:	35 ff       	sbrs	r19, 5
     506:	04 c0       	rjmp	.+8      	; 0x510 <MIDI_Host_Task+0x1cc>
				{
					MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     508:	15 ff       	sbrs	r17, 5
     50a:	1a c0       	rjmp	.+52     	; 0x540 <MIDI_Host_Task+0x1fc>
     50c:	90 e9       	ldi	r25, 0x90	; 144
     50e:	19 c0       	rjmp	.+50     	; 0x542 <MIDI_Host_Task+0x1fe>
					MIDIPitch   = 0x3B;
				}

				/* Check if a MIDI command is to be sent */
				if (MIDICommand)
     510:	99 23       	and	r25, r25
     512:	99 f0       	breq	.+38     	; 0x53a <MIDI_Host_Task+0x1f6>
							.Command     = (MIDICommand >> 4),

							.Data1       = MIDICommand | Channel,
							.Data2       = MIDIPitch,
							.Data3       = MIDI_STANDARD_VELOCITY,
						};
     514:	89 2f       	mov	r24, r25
     516:	82 95       	swap	r24
     518:	8f 70       	andi	r24, 0x0F	; 15
     51a:	89 83       	std	Y+1, r24	; 0x01
     51c:	94 2b       	or	r25, r20
     51e:	9a 83       	std	Y+2, r25	; 0x02
     520:	2b 83       	std	Y+3, r18	; 0x03
     522:	80 e4       	ldi	r24, 0x40	; 64
     524:	8c 83       	std	Y+4, r24	; 0x04

					/* Write the MIDI event packet to the pipe */
					Pipe_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent));
     526:	ce 01       	movw	r24, r28
     528:	01 96       	adiw	r24, 0x01	; 1
     52a:	64 e0       	ldi	r22, 0x04	; 4
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	84 d6       	rcall	.+3336   	; 0x1238 <Pipe_Write_Stream_LE>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     530:	80 91 a6 00 	lds	r24, 0x00A6
     534:	8b 77       	andi	r24, 0x7B	; 123
     536:	80 93 a6 00 	sts	0x00A6, r24
					/* Send the data in the pipe to the device */
					Pipe_ClearOUT();
				}

				/* Save previous joystick value for next joystick change detection */
				PrevJoystickStatus = JoystickStatus;
     53a:	10 93 2e 01 	sts	0x012E, r17
     53e:	03 c0       	rjmp	.+6      	; 0x546 <MIDI_Host_Task+0x202>
			}

			break;
	}
}
     540:	90 e8       	ldi	r25, 0x80	; 128
     542:	2b e3       	ldi	r18, 0x3B	; 59
     544:	e7 cf       	rjmp	.-50     	; 0x514 <MIDI_Host_Task+0x1d0>
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	cf 91       	pop	r28
     550:	df 91       	pop	r29
     552:	1f 91       	pop	r17
     554:	08 95       	ret

00000556 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     556:	1f 93       	push	r17
     558:	18 2f       	mov	r17, r24
	USB_ShutDown();
     55a:	bc d3       	rcall	.+1912   	; 0xcd4 <USB_ShutDown>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     55c:	00 d0       	rcall	.+0      	; 0x55e <EVENT_USB_Host_HostError+0x8>
     55e:	00 d0       	rcall	.+0      	; 0x560 <EVENT_USB_Host_HostError+0xa>
     560:	ed b7       	in	r30, 0x3d	; 61
     562:	fe b7       	in	r31, 0x3e	; 62
     564:	31 96       	adiw	r30, 0x01	; 1
     566:	80 ef       	ldi	r24, 0xF0	; 240
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	ad b7       	in	r26, 0x3d	; 61
     56c:	be b7       	in	r27, 0x3e	; 62
     56e:	12 96       	adiw	r26, 0x02	; 2
     570:	9c 93       	st	X, r25
     572:	8e 93       	st	-X, r24
     574:	11 97       	sbiw	r26, 0x01	; 1
     576:	12 83       	std	Z+2, r17	; 0x02
     578:	13 82       	std	Z+3, r1	; 0x03
     57a:	be d6       	rcall	.+3452   	; 0x12f8 <printf_P>
     57c:	8b b1       	in	r24, 0x0b	; 11
     57e:	8f 70       	andi	r24, 0x0F	; 15
     580:	80 69       	ori	r24, 0x90	; 144
     582:	8b b9       	out	0x0b, r24	; 11
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	ff cf       	rjmp	.-2      	; 0x58c <EVENT_USB_Host_HostError+0x36>

0000058e <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     58e:	84 b7       	in	r24, 0x34	; 52
     590:	87 7f       	andi	r24, 0xF7	; 247
     592:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     594:	38 e1       	ldi	r19, 0x18	; 24
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	30 93 60 00 	sts	0x0060, r19
     59e:	10 92 60 00 	sts	0x0060, r1
     5a2:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	20 e8       	ldi	r18, 0x80	; 128
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	20 93 61 00 	sts	0x0061, r18
     5b2:	80 93 61 00 	sts	0x0061, r24
     5b6:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     5b8:	83 e3       	ldi	r24, 0x33	; 51
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	90 93 cd 00 	sts	0x00CD, r25
     5c0:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     5c4:	86 e0       	ldi	r24, 0x06	; 6
     5c6:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     5ca:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     5ce:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     5d2:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     5d4:	5a 9a       	sbi	0x0b, 2	; 11
			static inline void SerialStream_Init(const uint32_t BaudRate,
			                                     const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);

				stdout = &USARTStream;
     5d6:	80 e2       	ldi	r24, 0x20	; 32
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	90 93 3f 01 	sts	0x013F, r25
     5de:	80 93 3e 01 	sts	0x013E, r24
				stdin  = &USARTStream;
     5e2:	90 93 3d 01 	sts	0x013D, r25
     5e6:	80 93 3c 01 	sts	0x013C, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     5ea:	8a b1       	in	r24, 0x0a	; 10
     5ec:	80 6f       	ori	r24, 0xF0	; 240
     5ee:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     5f0:	8b b1       	in	r24, 0x0b	; 11
     5f2:	8f 70       	andi	r24, 0x0F	; 15
     5f4:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     5f6:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     5f8:	72 9a       	sbi	0x0e, 2	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     5fa:	84 b1       	in	r24, 0x04	; 4
     5fc:	8f 71       	andi	r24, 0x1F	; 31
     5fe:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     600:	8d b1       	in	r24, 0x0d	; 13
     602:	8f 7c       	andi	r24, 0xCF	; 207
     604:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     606:	85 b1       	in	r24, 0x05	; 5
     608:	80 6e       	ori	r24, 0xE0	; 224
     60a:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     60c:	8e b1       	in	r24, 0x0e	; 14
     60e:	80 63       	ori	r24, 0x30	; 48
     610:	8e b9       	out	0x0e, r24	; 14
	SerialStream_Init(9600, false);
	LEDs_Init();
	Buttons_Init();
	Joystick_Init();
	USB_Init();
}
     612:	57 c3       	rjmp	.+1710   	; 0xcc2 <USB_Init>

00000614 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     614:	bc df       	rcall	.-136    	; 0x58e <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "MIDI Host Demo running.\r\n" ESC_FG_WHITE));
     616:	8d e5       	ldi	r24, 0x5D	; 93
     618:	92 e0       	ldi	r25, 0x02	; 2
     61a:	90 d6       	rcall	.+3360   	; 0x133c <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     61c:	8b b1       	in	r24, 0x0b	; 11
     61e:	8f 70       	andi	r24, 0x0F	; 15
     620:	80 61       	ori	r24, 0x10	; 16
     622:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     624:	78 94       	sei

	for (;;)
	{
		MIDI_Host_Task();
     626:	8e de       	rcall	.-740    	; 0x344 <MIDI_Host_Task>
		USB_USBTask();
     628:	3a d6       	rcall	.+3188   	; 0x129e <USB_USBTask>
     62a:	fd cf       	rjmp	.-6      	; 0x626 <main+0x12>

0000062c <DComp_NextMIDIStreamingInterface>:
 *  This comparator searches for the next Interface descriptor of the correct MIDI Streaming Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMIDIStreamingInterface(void* CurrentDescriptor)
{
     62c:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     62e:	81 81       	ldd	r24, Z+1	; 0x01
     630:	84 30       	cpi	r24, 0x04	; 4
     632:	41 f4       	brne	.+16     	; 0x644 <DComp_NextMIDIStreamingInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the MIDI descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == AUDIO_CSCP_AudioClass)            &&
     634:	85 81       	ldd	r24, Z+5	; 0x05
     636:	81 30       	cpi	r24, 0x01	; 1
     638:	29 f4       	brne	.+10     	; 0x644 <DComp_NextMIDIStreamingInterface+0x18>
     63a:	86 81       	ldd	r24, Z+6	; 0x06
     63c:	83 30       	cpi	r24, 0x03	; 3
     63e:	11 f4       	brne	.+4      	; 0x644 <DComp_NextMIDIStreamingInterface+0x18>
     640:	87 81       	ldd	r24, Z+7	; 0x07
     642:	81 11       	cpse	r24, r1
     644:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     646:	08 95       	ret

00000648 <DComp_NextMIDIStreamingDataEndpoint>:
 *  another interface descriptor is found before the required endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMIDIStreamingDataEndpoint(void* CurrentDescriptor)
{
     648:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     64a:	81 81       	ldd	r24, Z+1	; 0x01
     64c:	85 30       	cpi	r24, 0x05	; 5
     64e:	31 f4       	brne	.+12     	; 0x65c <DComp_NextMIDIStreamingDataEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
     650:	83 81       	ldd	r24, Z+3	; 0x03
     652:	83 70       	andi	r24, 0x03	; 3
     654:	82 30       	cpi	r24, 0x02	; 2
     656:	31 f4       	brne	.+12     	; 0x664 <DComp_NextMIDIStreamingDataEndpoint+0x1c>
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     65c:	84 30       	cpi	r24, 0x04	; 4
     65e:	11 f4       	brne	.+4      	; 0x664 <DComp_NextMIDIStreamingDataEndpoint+0x1c>
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	08 95       	ret
     664:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     666:	08 95       	ret

00000668 <ProcessConfigurationDescriptor>:
 *  This routine searches for a MIDI interface descriptor pair containing bulk data IN and OUT endpoints.
 *
 *  \return An error code from the \ref MIDIHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     668:	8f 92       	push	r8
     66a:	9f 92       	push	r9
     66c:	af 92       	push	r10
     66e:	bf 92       	push	r11
     670:	cf 92       	push	r12
     672:	df 92       	push	r13
     674:	ef 92       	push	r14
     676:	ff 92       	push	r15
     678:	0f 93       	push	r16
     67a:	1f 93       	push	r17
     67c:	df 93       	push	r29
     67e:	cf 93       	push	r28
     680:	cd b7       	in	r28, 0x3d	; 61
     682:	de b7       	in	r29, 0x3e	; 62
     684:	c4 50       	subi	r28, 0x04	; 4
     686:	d2 40       	sbci	r29, 0x02	; 2
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	f8 94       	cli
     68c:	de bf       	out	0x3e, r29	; 62
     68e:	0f be       	out	0x3f, r0	; 63
     690:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     692:	ae 01       	movw	r20, r28
     694:	4b 5f       	subi	r20, 0xFB	; 251
     696:	5f 4f       	sbci	r21, 0xFF	; 255
     698:	5a 83       	std	Y+2, r21	; 0x02
     69a:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Interface_t* MIDIInterface   = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     69c:	83 e0       	ldi	r24, 0x03	; 3
     69e:	a8 2e       	mov	r10, r24
     6a0:	b1 2c       	mov	r11, r1
     6a2:	ac 0e       	add	r10, r28
     6a4:	bd 1e       	adc	r11, r29
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	b5 01       	movw	r22, r10
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	32 e0       	ldi	r19, 0x02	; 2
     6ae:	0b d4       	rcall	.+2070   	; 0xec6 <USB_Host_GetDeviceConfigDescriptor>
     6b0:	85 30       	cpi	r24, 0x05	; 5
     6b2:	29 f0       	breq	.+10     	; 0x6be <ProcessConfigurationDescriptor+0x56>
     6b4:	86 30       	cpi	r24, 0x06	; 6
     6b6:	89 f0       	breq	.+34     	; 0x6da <ProcessConfigurationDescriptor+0x72>
     6b8:	88 23       	and	r24, r24
     6ba:	19 f0       	breq	.+6      	; 0x6c2 <ProcessConfigurationDescriptor+0x5a>
     6bc:	10 c0       	rjmp	.+32     	; 0x6de <ProcessConfigurationDescriptor+0x76>
     6be:	82 e0       	ldi	r24, 0x02	; 2
     6c0:	4a c0       	rjmp	.+148    	; 0x756 <ProcessConfigurationDescriptor+0xee>
     6c2:	00 e0       	ldi	r16, 0x00	; 0
     6c4:	10 e0       	ldi	r17, 0x00	; 0
     6c6:	ee 24       	eor	r14, r14
     6c8:	ff 24       	eor	r15, r15
     6ca:	cc 24       	eor	r12, r12
     6cc:	dd 24       	eor	r13, r13
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MIDIInterface) ||
     6ce:	45 01       	movw	r8, r10
     6d0:	5e 01       	movw	r10, r28
     6d2:	08 94       	sec
     6d4:	a1 1c       	adc	r10, r1
     6d6:	b1 1c       	adc	r11, r1
     6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <ProcessConfigurationDescriptor+0x7a>
	USB_Descriptor_Interface_t* MIDIInterface   = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     6da:	83 e0       	ldi	r24, 0x03	; 3
     6dc:	3c c0       	rjmp	.+120    	; 0x756 <ProcessConfigurationDescriptor+0xee>
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	3a c0       	rjmp	.+116    	; 0x756 <ProcessConfigurationDescriptor+0xee>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MIDIInterface) ||
     6e2:	01 15       	cp	r16, r1
     6e4:	11 05       	cpc	r17, r1
     6e6:	39 f0       	breq	.+14     	; 0x6f6 <ProcessConfigurationDescriptor+0x8e>
     6e8:	c4 01       	movw	r24, r8
     6ea:	b5 01       	movw	r22, r10
     6ec:	44 e2       	ldi	r20, 0x24	; 36
     6ee:	53 e0       	ldi	r21, 0x03	; 3
     6f0:	a9 d3       	rcall	.+1874   	; 0xe44 <USB_GetNextDescriptorComp>
     6f2:	88 23       	and	r24, r24
     6f4:	81 f0       	breq	.+32     	; 0x716 <ProcessConfigurationDescriptor+0xae>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextMIDIStreamingDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Mass Storage interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     6f6:	c4 01       	movw	r24, r8
     6f8:	b5 01       	movw	r22, r10
     6fa:	46 e1       	ldi	r20, 0x16	; 22
     6fc:	53 e0       	ldi	r21, 0x03	; 3
     6fe:	a2 d3       	rcall	.+1860   	; 0xe44 <USB_GetNextDescriptorComp>
     700:	88 23       	and	r24, r24
     702:	11 f0       	breq	.+4      	; 0x708 <ProcessConfigurationDescriptor+0xa0>
     704:	84 e0       	ldi	r24, 0x04	; 4
     706:	27 c0       	rjmp	.+78     	; 0x756 <ProcessConfigurationDescriptor+0xee>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			MIDIInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     708:	09 81       	ldd	r16, Y+1	; 0x01
     70a:	1a 81       	ldd	r17, Y+2	; 0x02
     70c:	cc 24       	eor	r12, r12
     70e:	dd 24       	eor	r13, r13
     710:	ee 24       	eor	r14, r14
     712:	ff 24       	eor	r15, r15
     714:	e6 cf       	rjmp	.-52     	; 0x6e2 <ProcessConfigurationDescriptor+0x7a>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     716:	e9 81       	ldd	r30, Y+1	; 0x01
     718:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
     71a:	82 81       	ldd	r24, Z+2	; 0x02
     71c:	87 fd       	sbrc	r24, 7
     71e:	02 c0       	rjmp	.+4      	; 0x724 <ProcessConfigurationDescriptor+0xbc>
     720:	6f 01       	movw	r12, r30
     722:	01 c0       	rjmp	.+2      	; 0x726 <ProcessConfigurationDescriptor+0xbe>
     724:	7f 01       	movw	r14, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     726:	e1 14       	cp	r14, r1
     728:	f1 04       	cpc	r15, r1
     72a:	d9 f2       	breq	.-74     	; 0x6e2 <ProcessConfigurationDescriptor+0x7a>
     72c:	c1 14       	cp	r12, r1
     72e:	d1 04       	cpc	r13, r1
     730:	c1 f2       	breq	.-80     	; 0x6e2 <ProcessConfigurationDescriptor+0x7a>
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Configure the MIDI data IN pipe */
	Pipe_ConfigurePipe(MIDI_DATA_IN_PIPE, EP_TYPE_BULK, PIPE_TOKEN_IN,
     732:	f7 01       	movw	r30, r14
     734:	04 81       	ldd	r16, Z+4	; 0x04
     736:	15 81       	ldd	r17, Z+5	; 0x05
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	62 e0       	ldi	r22, 0x02	; 2
     73c:	40 e1       	ldi	r20, 0x10	; 16
     73e:	22 81       	ldd	r18, Z+2	; 0x02
     740:	ee 24       	eor	r14, r14
     742:	fa d1       	rcall	.+1012   	; 0xb38 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the MIDI data OUT pipe */
	Pipe_ConfigurePipe(MIDI_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
     744:	f6 01       	movw	r30, r12
     746:	04 81       	ldd	r16, Z+4	; 0x04
     748:	15 81       	ldd	r17, Z+5	; 0x05
     74a:	82 e0       	ldi	r24, 0x02	; 2
     74c:	62 e0       	ldi	r22, 0x02	; 2
     74e:	40 e2       	ldi	r20, 0x20	; 32
     750:	22 81       	ldd	r18, Z+2	; 0x02
     752:	f2 d1       	rcall	.+996    	; 0xb38 <Pipe_ConfigurePipe>
     754:	80 e0       	ldi	r24, 0x00	; 0
					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     756:	cc 5f       	subi	r28, 0xFC	; 252
     758:	dd 4f       	sbci	r29, 0xFD	; 253
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	f8 94       	cli
     75e:	de bf       	out	0x3e, r29	; 62
     760:	0f be       	out	0x3f, r0	; 63
     762:	cd bf       	out	0x3d, r28	; 61
     764:	cf 91       	pop	r28
     766:	df 91       	pop	r29
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	ff 90       	pop	r15
     76e:	ef 90       	pop	r14
     770:	df 90       	pop	r13
     772:	cf 90       	pop	r12
     774:	bf 90       	pop	r11
     776:	af 90       	pop	r10
     778:	9f 90       	pop	r9
     77a:	8f 90       	pop	r8
     77c:	08 95       	ret

0000077e <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     77e:	98 2f       	mov	r25, r24
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     780:	20 91 9e 00 	lds	r18, 0x009E
	bool    BusSuspended = USB_Host_IsBusSuspended();
	uint8_t ErrorCode    = HOST_WAITERROR_Successful;
	bool    HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     784:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     788:	80 91 a0 00 	lds	r24, 0x00A0
     78c:	8f 7d       	andi	r24, 0xDF	; 223
     78e:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     792:	80 91 9f 00 	lds	r24, 0x009F
     796:	8f 7d       	andi	r24, 0xDF	; 223
     798:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     79c:	80 91 9e 00 	lds	r24, 0x009E
     7a0:	81 60       	ori	r24, 0x01	; 1
     7a2:	80 93 9e 00 	sts	0x009E, r24
     7a6:	26 c0       	rjmp	.+76     	; 0x7f4 <USB_Host_WaitMS+0x76>

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     7a8:	80 91 9f 00 	lds	r24, 0x009F
     7ac:	85 ff       	sbrs	r24, 5
     7ae:	06 c0       	rjmp	.+12     	; 0x7bc <USB_Host_WaitMS+0x3e>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     7b0:	80 91 9f 00 	lds	r24, 0x009F
     7b4:	8f 7d       	andi	r24, 0xDF	; 223
     7b6:	80 93 9f 00 	sts	0x009F, r24
			MS--;
     7ba:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     7bc:	80 91 3b 01 	lds	r24, 0x013B
     7c0:	82 30       	cpi	r24, 0x02	; 2
     7c2:	11 f4       	brne	.+4      	; 0x7c8 <USB_Host_WaitMS+0x4a>
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	18 c0       	rjmp	.+48     	; 0x7f8 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if an error has occurred on the selected pipe, false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     7c8:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     7cc:	84 ff       	sbrs	r24, 4
     7ce:	07 c0       	rjmp	.+14     	; 0x7de <USB_Host_WaitMS+0x60>

			/** Clears the master pipe error flag. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPINTX &= ~(1 << PERRI);
     7d0:	80 91 a6 00 	lds	r24, 0x00A6
     7d4:	8f 7e       	andi	r24, 0xEF	; 239
     7d6:	80 93 a6 00 	sts	0x00A6, r24
     7da:	92 e0       	ldi	r25, 0x02	; 2
     7dc:	0d c0       	rjmp	.+26     	; 0x7f8 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     7de:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     7e2:	81 ff       	sbrs	r24, 1
     7e4:	07 c0       	rjmp	.+14     	; 0x7f4 <USB_Host_WaitMS+0x76>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     7e6:	80 91 a6 00 	lds	r24, 0x00A6
     7ea:	8d 7f       	andi	r24, 0xFD	; 253
     7ec:	80 93 a6 00 	sts	0x00A6, r24
     7f0:	93 e0       	ldi	r25, 0x03	; 3
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <USB_Host_WaitMS+0x7a>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     7f4:	99 23       	and	r25, r25
     7f6:	c1 f6       	brne	.-80     	; 0x7a8 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     7f8:	20 fd       	sbrc	r18, 0
     7fa:	05 c0       	rjmp	.+10     	; 0x806 <USB_Host_WaitMS+0x88>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     7fc:	80 91 9e 00 	lds	r24, 0x009E
     800:	8e 7f       	andi	r24, 0xFE	; 254
     802:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     806:	35 ff       	sbrs	r19, 5
     808:	05 c0       	rjmp	.+10     	; 0x814 <USB_Host_WaitMS+0x96>
	  USB_INT_Enable(USB_INT_HSOFI);
     80a:	80 91 a0 00 	lds	r24, 0x00A0
     80e:	80 62       	ori	r24, 0x20	; 32
     810:	80 93 a0 00 	sts	0x00A0, r24

	return ErrorCode;
}
     814:	89 2f       	mov	r24, r25
     816:	08 95       	ret

00000818 <USB_Host_ResetDevice>:
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     818:	60 91 9e 00 	lds	r22, 0x009E

static void USB_Host_ResetDevice(void)
{
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);
     81c:	80 91 a0 00 	lds	r24, 0x00A0
     820:	8d 7f       	andi	r24, 0xFD	; 253
     822:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     826:	80 91 9e 00 	lds	r24, 0x009E
     82a:	82 60       	ori	r24, 0x02	; 2
     82c:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean true if no bus reset is currently being sent, false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     830:	80 91 9e 00 	lds	r24, 0x009E

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     834:	81 fd       	sbrc	r24, 1
     836:	fc cf       	rjmp	.-8      	; 0x830 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     838:	80 91 9e 00 	lds	r24, 0x009E
     83c:	81 60       	ori	r24, 0x01	; 1
     83e:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();

	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     842:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     846:	80 91 a0 00 	lds	r24, 0x00A0
     84a:	8f 7d       	andi	r24, 0xDF	; 223
     84c:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     850:	80 91 9f 00 	lds	r24, 0x009F
     854:	8f 7d       	andi	r24, 0xDF	; 223
     856:	80 93 9f 00 	sts	0x009F, r24
     85a:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     85c:	40 ed       	ldi	r20, 0xD0	; 208
     85e:	57 e0       	ldi	r21, 0x07	; 7
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     860:	80 91 9f 00 	lds	r24, 0x009F
     864:	85 ff       	sbrs	r24, 5
     866:	0b c0       	rjmp	.+22     	; 0x87e <USB_Host_ResetDevice+0x66>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     868:	80 91 9f 00 	lds	r24, 0x009F
     86c:	8f 7d       	andi	r24, 0xDF	; 223
     86e:	80 93 9f 00 	sts	0x009F, r24
			USB_INT_Clear(USB_INT_DDISCI);
     872:	80 91 9f 00 	lds	r24, 0x009F
     876:	8d 7f       	andi	r24, 0xFD	; 253
     878:	80 93 9f 00 	sts	0x009F, r24
     87c:	05 c0       	rjmp	.+10     	; 0x888 <USB_Host_ResetDevice+0x70>
     87e:	ca 01       	movw	r24, r20
     880:	01 97       	sbiw	r24, 0x01	; 1
     882:	f1 f7       	brne	.-4      	; 0x880 <USB_Host_ResetDevice+0x68>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     884:	21 50       	subi	r18, 0x01	; 1
     886:	61 f7       	brne	.-40     	; 0x860 <USB_Host_ResetDevice+0x48>
		}

		_delay_ms(1);
	}

	if (HSOFIEnabled)
     888:	35 ff       	sbrs	r19, 5
     88a:	05 c0       	rjmp	.+10     	; 0x896 <USB_Host_ResetDevice+0x7e>
	  USB_INT_Enable(USB_INT_HSOFI);
     88c:	80 91 a0 00 	lds	r24, 0x00A0
     890:	80 62       	ori	r24, 0x20	; 32
     892:	80 93 a0 00 	sts	0x00A0, r24

	if (BusSuspended)
     896:	60 fd       	sbrc	r22, 0
     898:	05 c0       	rjmp	.+10     	; 0x8a4 <USB_Host_ResetDevice+0x8c>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     89a:	80 91 9e 00 	lds	r24, 0x009E
     89e:	8e 7f       	andi	r24, 0xFE	; 254
     8a0:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
     8a4:	80 91 a0 00 	lds	r24, 0x00A0
     8a8:	82 60       	ori	r24, 0x02	; 2
     8aa:	80 93 a0 00 	sts	0x00A0, r24
}
     8ae:	08 95       	ret

000008b0 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	USB_ControlRequest = (USB_Request_Header_t)
     8b0:	10 92 33 01 	sts	0x0133, r1
     8b4:	99 e0       	ldi	r25, 0x09	; 9
     8b6:	90 93 34 01 	sts	0x0134, r25
     8ba:	80 93 35 01 	sts	0x0135, r24
     8be:	10 92 36 01 	sts	0x0136, r1
     8c2:	10 92 38 01 	sts	0x0138, r1
     8c6:	10 92 37 01 	sts	0x0137, r1
     8ca:	10 92 3a 01 	sts	0x013A, r1
     8ce:	10 92 39 01 	sts	0x0139, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     8d2:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
}
     8da:	79 c3       	rjmp	.+1778   	; 0xfce <USB_Host_SendControlRequest>

000008dc <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "Host.h"

void USB_Host_ProcessNextHostState(void)
{
     8dc:	ef 92       	push	r14
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	df 93       	push	r29
     8e4:	cf 93       	push	r28
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	28 97       	sbiw	r28, 0x08	; 8
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	f8 94       	cli
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     8f6:	80 91 3b 01 	lds	r24, 0x013B
     8fa:	86 30       	cpi	r24, 0x06	; 6
     8fc:	09 f4       	brne	.+2      	; 0x900 <USB_Host_ProcessNextHostState+0x24>
     8fe:	94 c0       	rjmp	.+296    	; 0xa28 <USB_Host_ProcessNextHostState+0x14c>
     900:	87 30       	cpi	r24, 0x07	; 7
     902:	70 f4       	brcc	.+28     	; 0x920 <USB_Host_ProcessNextHostState+0x44>
     904:	83 30       	cpi	r24, 0x03	; 3
     906:	c1 f1       	breq	.+112    	; 0x978 <USB_Host_ProcessNextHostState+0x9c>
     908:	84 30       	cpi	r24, 0x04	; 4
     90a:	20 f4       	brcc	.+8      	; 0x914 <USB_Host_ProcessNextHostState+0x38>
     90c:	81 30       	cpi	r24, 0x01	; 1
     90e:	09 f0       	breq	.+2      	; 0x912 <USB_Host_ProcessNextHostState+0x36>
     910:	07 c1       	rjmp	.+526    	; 0xb20 <USB_Host_ProcessNextHostState+0x244>
     912:	13 c0       	rjmp	.+38     	; 0x93a <USB_Host_ProcessNextHostState+0x5e>
     914:	84 30       	cpi	r24, 0x04	; 4
     916:	c1 f1       	breq	.+112    	; 0x988 <USB_Host_ProcessNextHostState+0xac>
     918:	85 30       	cpi	r24, 0x05	; 5
     91a:	09 f0       	breq	.+2      	; 0x91e <USB_Host_ProcessNextHostState+0x42>
     91c:	01 c1       	rjmp	.+514    	; 0xb20 <USB_Host_ProcessNextHostState+0x244>
     91e:	5b c0       	rjmp	.+182    	; 0x9d6 <USB_Host_ProcessNextHostState+0xfa>
     920:	88 30       	cpi	r24, 0x08	; 8
     922:	09 f4       	brne	.+2      	; 0x926 <USB_Host_ProcessNextHostState+0x4a>
     924:	9b c0       	rjmp	.+310    	; 0xa5c <USB_Host_ProcessNextHostState+0x180>
     926:	88 30       	cpi	r24, 0x08	; 8
     928:	08 f4       	brcc	.+2      	; 0x92c <USB_Host_ProcessNextHostState+0x50>
     92a:	8a c0       	rjmp	.+276    	; 0xa40 <USB_Host_ProcessNextHostState+0x164>
     92c:	89 30       	cpi	r24, 0x09	; 9
     92e:	09 f4       	brne	.+2      	; 0x932 <USB_Host_ProcessNextHostState+0x56>
     930:	b4 c0       	rjmp	.+360    	; 0xa9a <USB_Host_ProcessNextHostState+0x1be>
     932:	8a 30       	cpi	r24, 0x0A	; 10
     934:	09 f0       	breq	.+2      	; 0x938 <USB_Host_ProcessNextHostState+0x5c>
     936:	f4 c0       	rjmp	.+488    	; 0xb20 <USB_Host_ProcessNextHostState+0x244>
     938:	d9 c0       	rjmp	.+434    	; 0xaec <USB_Host_ProcessNextHostState+0x210>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     93a:	00 91 30 01 	lds	r16, 0x0130
     93e:	10 91 31 01 	lds	r17, 0x0131
     942:	01 15       	cp	r16, r1
     944:	11 05       	cpc	r17, r1
     946:	09 f4       	brne	.+2      	; 0x94a <USB_Host_ProcessNextHostState+0x6e>
     948:	eb c0       	rjmp	.+470    	; 0xb20 <USB_Host_ProcessNextHostState+0x244>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	18 df       	rcall	.-464    	; 0x77e <USB_Host_WaitMS>
     94e:	68 2f       	mov	r22, r24
     950:	88 23       	and	r24, r24
     952:	31 f0       	breq	.+12     	; 0x960 <USB_Host_ProcessNextHostState+0x84>
				{
					USB_HostState = PostWaitState;
     954:	80 91 2f 01 	lds	r24, 0x012F
     958:	80 93 3b 01 	sts	0x013B, r24
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	dc c0       	rjmp	.+440    	; 0xb18 <USB_Host_ProcessNextHostState+0x23c>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     960:	c8 01       	movw	r24, r16
     962:	01 97       	sbiw	r24, 0x01	; 1
     964:	90 93 31 01 	sts	0x0131, r25
     968:	80 93 30 01 	sts	0x0130, r24
     96c:	89 2b       	or	r24, r25
     96e:	09 f0       	breq	.+2      	; 0x972 <USB_Host_ProcessNextHostState+0x96>
     970:	d7 c0       	rjmp	.+430    	; 0xb20 <USB_Host_ProcessNextHostState+0x244>
				  USB_HostState = PostWaitState;
     972:	80 91 2f 01 	lds	r24, 0x012F
     976:	bf c0       	rjmp	.+382    	; 0xaf6 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     978:	88 ee       	ldi	r24, 0xE8	; 232
     97a:	93 e0       	ldi	r25, 0x03	; 3
     97c:	90 93 31 01 	sts	0x0131, r25
     980:	80 93 30 01 	sts	0x0130, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     984:	84 e0       	ldi	r24, 0x04	; 4
     986:	b7 c0       	rjmp	.+366    	; 0xaf6 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     988:	80 91 30 01 	lds	r24, 0x0130
     98c:	90 91 31 01 	lds	r25, 0x0131
     990:	01 97       	sbiw	r24, 0x01	; 1
     992:	90 93 31 01 	sts	0x0131, r25
     996:	80 93 30 01 	sts	0x0130, r24
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	29 f0       	breq	.+10     	; 0x9a8 <USB_Host_ProcessNextHostState+0xcc>
     99e:	80 ed       	ldi	r24, 0xD0	; 208
     9a0:	97 e0       	ldi	r25, 0x07	; 7
     9a2:	01 97       	sbiw	r24, 0x01	; 1
     9a4:	f1 f7       	brne	.-4      	; 0x9a2 <USB_Host_ProcessNextHostState+0xc6>
     9a6:	bc c0       	rjmp	.+376    	; 0xb20 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     9a8:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     9aa:	80 91 d8 00 	lds	r24, 0x00D8
     9ae:	80 61       	ori	r24, 0x10	; 16
     9b0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     9b4:	80 91 dd 00 	lds	r24, 0x00DD
     9b8:	8b 7f       	andi	r24, 0xFB	; 251
     9ba:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     9be:	80 91 d7 00 	lds	r24, 0x00D7
     9c2:	80 61       	ori	r24, 0x10	; 16
     9c4:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     9c8:	80 91 dd 00 	lds	r24, 0x00DD
     9cc:	82 60       	ori	r24, 0x02	; 2
     9ce:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     9d2:	85 e0       	ldi	r24, 0x05	; 5
     9d4:	90 c0       	rjmp	.+288    	; 0xaf6 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     9d6:	80 91 9f 00 	lds	r24, 0x009F
     9da:	80 ff       	sbrs	r24, 0
     9dc:	a1 c0       	rjmp	.+322    	; 0xb20 <USB_Host_ProcessNextHostState+0x244>
			{
				USB_INT_Clear(USB_INT_DCONNI);
     9de:	80 91 9f 00 	lds	r24, 0x009F
     9e2:	8e 7f       	andi	r24, 0xFE	; 254
     9e4:	80 93 9f 00 	sts	0x009F, r24
				USB_INT_Clear(USB_INT_DDISCI);
     9e8:	80 91 9f 00 	lds	r24, 0x009F
     9ec:	8d 7f       	andi	r24, 0xFD	; 253
     9ee:	80 93 9f 00 	sts	0x009F, r24

				USB_INT_Clear(USB_INT_VBERRI);
     9f2:	80 91 df 00 	lds	r24, 0x00DF
     9f6:	8d 7f       	andi	r24, 0xFD	; 253
     9f8:	80 93 df 00 	sts	0x00DF, r24
				USB_INT_Enable(USB_INT_VBERRI);
     9fc:	80 91 de 00 	lds	r24, 0x00DE
     a00:	82 60       	ori	r24, 0x02	; 2
     a02:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a06:	80 91 9e 00 	lds	r24, 0x009E
     a0a:	81 60       	ori	r24, 0x01	; 1
     a0c:	80 93 9e 00 	sts	0x009E, r24

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     a10:	c9 d0       	rcall	.+402    	; 0xba4 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	80 93 3b 01 	sts	0x013B, r24
     a18:	84 e6       	ldi	r24, 0x64	; 100
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	90 93 31 01 	sts	0x0131, r25
     a20:	80 93 30 01 	sts	0x0130, r24
     a24:	86 e0       	ldi	r24, 0x06	; 6
     a26:	5f c0       	rjmp	.+190    	; 0xae6 <USB_Host_ProcessNextHostState+0x20a>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     a28:	f7 de       	rcall	.-530    	; 0x818 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	80 93 3b 01 	sts	0x013B, r24
     a30:	88 ec       	ldi	r24, 0xC8	; 200
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	90 93 31 01 	sts	0x0131, r25
     a38:	80 93 30 01 	sts	0x0130, r24
     a3c:	87 e0       	ldi	r24, 0x07	; 7
     a3e:	53 c0       	rjmp	.+166    	; 0xae6 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	40 e0       	ldi	r20, 0x00	; 0
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	00 e4       	ldi	r16, 0x40	; 64
     a4a:	10 e0       	ldi	r17, 0x00	; 0
     a4c:	ee 24       	eor	r14, r14
     a4e:	74 d0       	rcall	.+232    	; 0xb38 <Pipe_ConfigurePipe>
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a50:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     a54:	87 ff       	sbrs	r24, 7
     a56:	5e c0       	rjmp	.+188    	; 0xb14 <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     a58:	88 e0       	ldi	r24, 0x08	; 8
     a5a:	4d c0       	rjmp	.+154    	; 0xaf6 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     a5c:	a3 e3       	ldi	r26, 0x33	; 51
     a5e:	b1 e0       	ldi	r27, 0x01	; 1
     a60:	e7 e1       	ldi	r30, 0x17	; 23
     a62:	f1 e0       	ldi	r31, 0x01	; 1
     a64:	88 e0       	ldi	r24, 0x08	; 8
     a66:	01 90       	ld	r0, Z+
     a68:	0d 92       	st	X+, r0
     a6a:	81 50       	subi	r24, 0x01	; 1
     a6c:	e1 f7       	brne	.-8      	; 0xa66 <USB_Host_ProcessNextHostState+0x18a>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     a6e:	ce 01       	movw	r24, r28
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	ad d2       	rcall	.+1370   	; 0xfce <USB_Host_SendControlRequest>
     a74:	68 2f       	mov	r22, r24
     a76:	88 23       	and	r24, r24
     a78:	09 f0       	breq	.+2      	; 0xa7c <USB_Host_ProcessNextHostState+0x1a0>
     a7a:	4a c0       	rjmp	.+148    	; 0xb10 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     a7c:	88 85       	ldd	r24, Y+8	; 0x08
     a7e:	80 93 1f 01 	sts	0x011F, r24

			USB_Host_ResetDevice();
     a82:	ca de       	rcall	.-620    	; 0x818 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	80 93 3b 01 	sts	0x013B, r24
     a8a:	88 ec       	ldi	r24, 0xC8	; 200
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	90 93 31 01 	sts	0x0131, r25
     a92:	80 93 30 01 	sts	0x0130, r24
     a96:	89 e0       	ldi	r24, 0x09	; 9
     a98:	26 c0       	rjmp	.+76     	; 0xae6 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     a9a:	00 91 1f 01 	lds	r16, 0x011F
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	60 e0       	ldi	r22, 0x00	; 0
     aa2:	40 e0       	ldi	r20, 0x00	; 0
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	10 e0       	ldi	r17, 0x00	; 0
     aa8:	ee 24       	eor	r14, r14
     aaa:	46 d0       	rcall	.+140    	; 0xb38 <Pipe_ConfigurePipe>
     aac:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     ab0:	87 ff       	sbrs	r24, 7
     ab2:	30 c0       	rjmp	.+96     	; 0xb14 <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     ab4:	a3 e3       	ldi	r26, 0x33	; 51
     ab6:	b1 e0       	ldi	r27, 0x01	; 1
     ab8:	ef e0       	ldi	r30, 0x0F	; 15
     aba:	f1 e0       	ldi	r31, 0x01	; 1
     abc:	88 e0       	ldi	r24, 0x08	; 8
     abe:	01 90       	ld	r0, Z+
     ac0:	0d 92       	st	X+, r0
     ac2:	81 50       	subi	r24, 0x01	; 1
     ac4:	e1 f7       	brne	.-8      	; 0xabe <USB_Host_ProcessNextHostState+0x1e2>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	81 d2       	rcall	.+1282   	; 0xfce <USB_Host_SendControlRequest>
     acc:	68 2f       	mov	r22, r24
     ace:	88 23       	and	r24, r24
     ad0:	f9 f4       	brne	.+62     	; 0xb10 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	80 93 3b 01 	sts	0x013B, r24
     ad8:	84 e6       	ldi	r24, 0x64	; 100
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	90 93 31 01 	sts	0x0131, r25
     ae0:	80 93 30 01 	sts	0x0130, r24
     ae4:	8a e0       	ldi	r24, 0x0A	; 10
     ae6:	80 93 2f 01 	sts	0x012F, r24
     aea:	1a c0       	rjmp	.+52     	; 0xb20 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			EVENT_USB_Host_DeviceEnumerationComplete();
     af2:	e6 db       	rcall	.-2100   	; 0x2c0 <EVENT_USB_Host_DeviceEnumerationComplete>
			USB_HostState = HOST_STATE_Addressed;
     af4:	8b e0       	ldi	r24, 0x0B	; 11
     af6:	80 93 3b 01 	sts	0x013B, r24
     afa:	12 c0       	rjmp	.+36     	; 0xb20 <USB_Host_ProcessNextHostState+0x244>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     afc:	89 2f       	mov	r24, r25
     afe:	f7 db       	rcall	.-2066   	; 0x2ee <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b00:	80 91 dd 00 	lds	r24, 0x00DD
     b04:	81 60       	ori	r24, 0x01	; 1
     b06:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     b0a:	df db       	rcall	.-2114   	; 0x2ca <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     b0c:	8c d0       	rcall	.+280    	; 0xc26 <USB_ResetInterface>
     b0e:	08 c0       	rjmp	.+16     	; 0xb20 <USB_Host_ProcessNextHostState+0x244>
	}
}
     b10:	93 e0       	ldi	r25, 0x03	; 3
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <USB_Host_ProcessNextHostState+0x23c>
     b14:	94 e0       	ldi	r25, 0x04	; 4
     b16:	60 e0       	ldi	r22, 0x00	; 0
			EVENT_USB_Host_DeviceEnumerationComplete();
			USB_HostState = HOST_STATE_Addressed;
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     b18:	80 91 3b 01 	lds	r24, 0x013B
     b1c:	82 30       	cpi	r24, 0x02	; 2
     b1e:	71 f7       	brne	.-36     	; 0xafc <USB_Host_ProcessNextHostState+0x220>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     b20:	28 96       	adiw	r28, 0x08	; 8
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	f8 94       	cli
     b26:	de bf       	out	0x3e, r29	; 62
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	cd bf       	out	0x3d, r28	; 61
     b2c:	cf 91       	pop	r28
     b2e:	df 91       	pop	r29
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	ef 90       	pop	r14
     b36:	08 95       	ret

00000b38 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     b38:	ef 92       	push	r14
     b3a:	0f 93       	push	r16
     b3c:	1f 93       	push	r17
     b3e:	9e 2d       	mov	r25, r14
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b40:	80 93 a7 00 	sts	0x00A7, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     b44:	80 91 a9 00 	lds	r24, 0x00A9
     b48:	81 60       	ori	r24, 0x01	; 1
     b4a:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SelectPipe(Number);
	Pipe_EnablePipe();

	UPCFG1X = 0;
     b4e:	10 92 ab 00 	sts	0x00AB, r1

	UPCFG0X = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     b52:	62 95       	swap	r22
     b54:	66 0f       	add	r22, r22
     b56:	66 0f       	add	r22, r22
     b58:	60 7c       	andi	r22, 0xC0	; 192
     b5a:	64 2b       	or	r22, r20
     b5c:	2f 70       	andi	r18, 0x0F	; 15
     b5e:	62 2b       	or	r22, r18
     b60:	60 93 aa 00 	sts	0x00AA, r22
     b64:	28 e0       	ldi	r18, 0x08	; 8
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	03 c0       	rjmp	.+6      	; 0xb72 <Pipe_ConfigurePipe+0x3a>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     b6c:	8f 5f       	subi	r24, 0xFF	; 255
					CheckBytes <<= 1;
     b6e:	22 0f       	add	r18, r18
     b70:	33 1f       	adc	r19, r19
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     b72:	20 17       	cp	r18, r16
     b74:	31 07       	cpc	r19, r17
     b76:	10 f4       	brcc	.+4      	; 0xb7c <Pipe_ConfigurePipe+0x44>
     b78:	85 30       	cpi	r24, 0x05	; 5
     b7a:	c1 f7       	brne	.-16     	; 0xb6c <Pipe_ConfigurePipe+0x34>
	UPCFG1X = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     b7c:	92 60       	ori	r25, 0x02	; 2
     b7e:	82 95       	swap	r24
     b80:	80 7f       	andi	r24, 0xF0	; 240
     b82:	89 2b       	or	r24, r25
     b84:	80 93 ab 00 	sts	0x00AB, r24

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     b88:	80 91 a9 00 	lds	r24, 0x00A9
     b8c:	80 62       	ori	r24, 0x20	; 32
     b8e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     b92:	80 91 ac 00 	lds	r24, 0x00AC

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
}
     b96:	88 1f       	adc	r24, r24
     b98:	88 27       	eor	r24, r24
     b9a:	88 1f       	adc	r24, r24
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ef 90       	pop	r14
     ba2:	08 95       	ret

00000ba4 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     ba4:	10 92 f8 00 	sts	0x00F8, r1
     ba8:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     baa:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     bae:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     bb2:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     bb6:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     bba:	80 91 a9 00 	lds	r24, 0x00A9
     bbe:	8e 7f       	andi	r24, 0xFE	; 254
     bc0:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     bc4:	9f 5f       	subi	r25, 0xFF	; 255
     bc6:	97 30       	cpi	r25, 0x07	; 7
     bc8:	81 f7       	brne	.-32     	; 0xbaa <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     bca:	08 95       	ret

00000bcc <Pipe_WaitUntilReady>:
			/** Returns the current USB frame number, when in host mode. Every millisecond the USB bus is active (i.e. not suspended)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     bcc:	40 91 a2 00 	lds	r20, 0x00A2
     bd0:	50 91 a3 00 	lds	r21, 0x00A3
     bd4:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     bd6:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     bda:	80 73       	andi	r24, 0x30	; 48
     bdc:	80 31       	cpi	r24, 0x10	; 16
     bde:	29 f4       	brne	.+10     	; 0xbea <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     be0:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     be4:	80 ff       	sbrs	r24, 0
     be6:	05 c0       	rjmp	.+10     	; 0xbf2 <Pipe_WaitUntilReady+0x26>
     be8:	1c c0       	rjmp	.+56     	; 0xc22 <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     bea:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     bee:	82 fd       	sbrc	r24, 2
     bf0:	18 c0       	rjmp	.+48     	; 0xc22 <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     bf2:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     bf6:	81 ff       	sbrs	r24, 1
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <Pipe_WaitUntilReady+0x32>
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     bfe:	80 91 3b 01 	lds	r24, 0x013B
     c02:	82 30       	cpi	r24, 0x02	; 2
     c04:	79 f0       	breq	.+30     	; 0xc24 <Pipe_WaitUntilReady+0x58>
     c06:	80 91 a2 00 	lds	r24, 0x00A2
     c0a:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     c0e:	84 17       	cp	r24, r20
     c10:	95 07       	cpc	r25, r21
     c12:	09 f3       	breq	.-62     	; 0xbd6 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     c14:	22 23       	and	r18, r18
     c16:	11 f4       	brne	.+4      	; 0xc1c <Pipe_WaitUntilReady+0x50>
     c18:	83 e0       	ldi	r24, 0x03	; 3
     c1a:	08 95       	ret
     c1c:	21 50       	subi	r18, 0x01	; 1
     c1e:	ac 01       	movw	r20, r24
     c20:	da cf       	rjmp	.-76     	; 0xbd6 <Pipe_WaitUntilReady+0xa>
     c22:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     c24:	08 95       	ret

00000c26 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     c26:	6e d0       	rcall	.+220    	; 0xd04 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c28:	75 d0       	rcall	.+234    	; 0xd14 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     c2a:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
     c2e:	98 2f       	mov	r25, r24
     c30:	9f 77       	andi	r25, 0x7F	; 127
     c32:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
     c36:	80 68       	ori	r24, 0x80	; 128
     c38:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     c3c:	8c e0       	ldi	r24, 0x0C	; 12
     c3e:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     c40:	89 b5       	in	r24, 0x29	; 41
     c42:	82 60       	ori	r24, 0x02	; 2
     c44:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     c46:	09 b4       	in	r0, 0x29	; 41
     c48:	00 fe       	sbrs	r0, 0
     c4a:	fd cf       	rjmp	.-6      	; 0xc46 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     c4c:	80 91 d8 00 	lds	r24, 0x00D8
     c50:	8f 7d       	andi	r24, 0xDF	; 223
     c52:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     c56:	80 91 d7 00 	lds	r24, 0x00D7
     c5a:	8f 77       	andi	r24, 0x7F	; 127
     c5c:	80 93 d7 00 	sts	0x00D7, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState       = HOST_STATE_Unattached;
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	80 93 3b 01 	sts	0x013B, r24
	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c66:	80 e4       	ldi	r24, 0x40	; 64
     c68:	80 93 1f 01 	sts	0x011F, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c6c:	80 91 d8 00 	lds	r24, 0x00D8
     c70:	80 64       	ori	r24, 0x40	; 64
     c72:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c76:	80 91 dd 00 	lds	r24, 0x00DD
     c7a:	81 60       	ori	r24, 0x01	; 1
     c7c:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c80:	80 91 dd 00 	lds	r24, 0x00DD
     c84:	84 60       	ori	r24, 0x04	; 4
     c86:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     c8a:	80 91 d7 00 	lds	r24, 0x00D7
     c8e:	8f 7e       	andi	r24, 0xEF	; 239
     c90:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     c94:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     c96:	77 9a       	sbi	0x0e, 7	; 14

	USB_Host_VBUS_Auto_Off();
	USB_Host_VBUS_Manual_Enable();
	USB_Host_VBUS_Manual_On();

	USB_INT_Enable(USB_INT_SRPI);
     c98:	80 91 de 00 	lds	r24, 0x00DE
     c9c:	81 60       	ori	r24, 0x01	; 1
     c9e:	80 93 de 00 	sts	0x00DE, r24
	USB_INT_Enable(USB_INT_BCERRI);
     ca2:	80 91 de 00 	lds	r24, 0x00DE
     ca6:	84 60       	ori	r24, 0x04	; 4
     ca8:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     cac:	80 91 e0 00 	lds	r24, 0x00E0
     cb0:	8e 7f       	andi	r24, 0xFE	; 254
     cb2:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     cb6:	80 91 d8 00 	lds	r24, 0x00D8
     cba:	80 61       	ori	r24, 0x10	; 16
     cbc:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     cc0:	08 95       	ret

00000cc2 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     cc2:	e7 ed       	ldi	r30, 0xD7	; 215
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	81 60       	ori	r24, 0x01	; 1
     cca:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	80 93 32 01 	sts	0x0132, r24

	USB_ResetInterface();
}
     cd2:	a9 cf       	rjmp	.-174    	; 0xc26 <USB_ResetInterface>

00000cd4 <USB_ShutDown>:

void USB_ShutDown(void)
{
	USB_INT_DisableAllInterrupts();
     cd4:	17 d0       	rcall	.+46     	; 0xd04 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     cd6:	1e d0       	rcall	.+60     	; 0xd14 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     cd8:	e0 ee       	ldi	r30, 0xE0	; 224
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	81 60       	ori	r24, 0x01	; 1
     ce0:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     ce2:	a8 ed       	ldi	r26, 0xD8	; 216
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	8c 91       	ld	r24, X
     ce8:	8f 77       	andi	r24, 0x7F	; 127
     cea:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     cec:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     cee:	e7 ed       	ldi	r30, 0xD7	; 215
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	8e 7f       	andi	r24, 0xFE	; 254
     cf6:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     cf8:	8c 91       	ld	r24, X
     cfa:	8f 7e       	andi	r24, 0xEF	; 239
     cfc:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     cfe:	10 92 32 01 	sts	0x0132, r1
}
     d02:	08 95       	ret

00000d04 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     d04:	e8 ed       	ldi	r30, 0xD8	; 216
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	8c 7f       	andi	r24, 0xFC	; 252
     d0c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     d0e:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     d12:	08 95       	ret

00000d14 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
     d14:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
     d18:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
	#endif
}
     d1c:	08 95       	ret

00000d1e <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     d1e:	1f 92       	push	r1
     d20:	0f 92       	push	r0
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	0f 92       	push	r0
     d26:	0b b6       	in	r0, 0x3b	; 59
     d28:	0f 92       	push	r0
     d2a:	11 24       	eor	r1, r1
     d2c:	2f 93       	push	r18
     d2e:	3f 93       	push	r19
     d30:	4f 93       	push	r20
     d32:	5f 93       	push	r21
     d34:	6f 93       	push	r22
     d36:	7f 93       	push	r23
     d38:	8f 93       	push	r24
     d3a:	9f 93       	push	r25
     d3c:	af 93       	push	r26
     d3e:	bf 93       	push	r27
     d40:	ef 93       	push	r30
     d42:	ff 93       	push	r31
	}
	#endif
	#endif

	#if defined(USB_CAN_BE_HOST)
	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     d44:	80 91 9f 00 	lds	r24, 0x009F
     d48:	81 ff       	sbrs	r24, 1
     d4a:	15 c0       	rjmp	.+42     	; 0xd76 <__vector_10+0x58>
     d4c:	80 91 a0 00 	lds	r24, 0x00A0
     d50:	81 ff       	sbrs	r24, 1
     d52:	11 c0       	rjmp	.+34     	; 0xd76 <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_DDISCI);
     d54:	80 91 9f 00 	lds	r24, 0x009F
     d58:	8d 7f       	andi	r24, 0xFD	; 253
     d5a:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Clear(USB_INT_DCONNI);
     d5e:	80 91 9f 00 	lds	r24, 0x009F
     d62:	8e 7f       	andi	r24, 0xFE	; 254
     d64:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Disable(USB_INT_DDISCI);
     d68:	80 91 a0 00 	lds	r24, 0x00A0
     d6c:	8d 7f       	andi	r24, 0xFD	; 253
     d6e:	80 93 a0 00 	sts	0x00A0, r24

		EVENT_USB_Host_DeviceUnattached();
     d72:	ab da       	rcall	.-2730   	; 0x2ca <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d74:	58 df       	rcall	.-336    	; 0xc26 <USB_ResetInterface>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d76:	80 91 df 00 	lds	r24, 0x00DF
     d7a:	81 ff       	sbrs	r24, 1
     d7c:	15 c0       	rjmp	.+42     	; 0xda8 <__vector_10+0x8a>
     d7e:	80 91 de 00 	lds	r24, 0x00DE
     d82:	81 ff       	sbrs	r24, 1
     d84:	11 c0       	rjmp	.+34     	; 0xda8 <__vector_10+0x8a>
	{
		USB_INT_Clear(USB_INT_VBERRI);
     d86:	80 91 df 00 	lds	r24, 0x00DF
     d8a:	8d 7f       	andi	r24, 0xFD	; 253
     d8c:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     d90:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d92:	80 91 dd 00 	lds	r24, 0x00DD
     d96:	81 60       	ori	r24, 0x01	; 1
     d98:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	db db       	rcall	.-2122   	; 0x556 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     da0:	94 da       	rcall	.-2776   	; 0x2ca <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     da2:	82 e0       	ldi	r24, 0x02	; 2
     da4:	80 93 3b 01 	sts	0x013B, r24
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     da8:	80 91 df 00 	lds	r24, 0x00DF
     dac:	80 ff       	sbrs	r24, 0
     dae:	17 c0       	rjmp	.+46     	; 0xdde <__vector_10+0xc0>
     db0:	80 91 de 00 	lds	r24, 0x00DE
     db4:	80 ff       	sbrs	r24, 0
     db6:	13 c0       	rjmp	.+38     	; 0xdde <__vector_10+0xc0>
	{
		USB_INT_Clear(USB_INT_SRPI);
     db8:	80 91 df 00 	lds	r24, 0x00DF
     dbc:	8e 7f       	andi	r24, 0xFE	; 254
     dbe:	80 93 df 00 	sts	0x00DF, r24
		USB_INT_Disable(USB_INT_SRPI);
     dc2:	80 91 de 00 	lds	r24, 0x00DE
     dc6:	8e 7f       	andi	r24, 0xFE	; 254
     dc8:	80 93 de 00 	sts	0x00DE, r24

		EVENT_USB_Host_DeviceAttached();
     dcc:	87 da       	rcall	.-2802   	; 0x2dc <EVENT_USB_Host_DeviceAttached>

		USB_INT_Enable(USB_INT_DDISCI);
     dce:	80 91 a0 00 	lds	r24, 0x00A0
     dd2:	82 60       	ori	r24, 0x02	; 2
     dd4:	80 93 a0 00 	sts	0x00A0, r24

		USB_HostState = HOST_STATE_Powered;
     dd8:	83 e0       	ldi	r24, 0x03	; 3
     dda:	80 93 3b 01 	sts	0x013B, r24
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     dde:	80 91 df 00 	lds	r24, 0x00DF
     de2:	82 ff       	sbrs	r24, 2
     de4:	0e c0       	rjmp	.+28     	; 0xe02 <__vector_10+0xe4>
     de6:	80 91 de 00 	lds	r24, 0x00DE
     dea:	82 ff       	sbrs	r24, 2
     dec:	0a c0       	rjmp	.+20     	; 0xe02 <__vector_10+0xe4>
	{
		USB_INT_Clear(USB_INT_BCERRI);
     dee:	80 91 df 00 	lds	r24, 0x00DF
     df2:	8b 7f       	andi	r24, 0xFB	; 251
     df4:	80 93 df 00 	sts	0x00DF, r24

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	78 da       	rcall	.-2832   	; 0x2ee <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     dfe:	65 da       	rcall	.-2870   	; 0x2ca <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     e00:	12 df       	rcall	.-476    	; 0xc26 <USB_ResetInterface>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     e02:	80 91 9f 00 	lds	r24, 0x009F
     e06:	85 ff       	sbrs	r24, 5
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__vector_10+0x100>
     e0a:	80 91 a0 00 	lds	r24, 0x00A0
     e0e:	85 ff       	sbrs	r24, 5
     e10:	06 c0       	rjmp	.+12     	; 0xe1e <__vector_10+0x100>
	{
		USB_INT_Clear(USB_INT_HSOFI);
     e12:	80 91 9f 00 	lds	r24, 0x009F
     e16:	8f 7d       	andi	r24, 0xDF	; 223
     e18:	80 93 9f 00 	sts	0x009F, r24

		EVENT_USB_Host_StartOfFrame();
     e1c:	ae d0       	rcall	.+348    	; 0xf7a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     e1e:	ff 91       	pop	r31
     e20:	ef 91       	pop	r30
     e22:	bf 91       	pop	r27
     e24:	af 91       	pop	r26
     e26:	9f 91       	pop	r25
     e28:	8f 91       	pop	r24
     e2a:	7f 91       	pop	r23
     e2c:	6f 91       	pop	r22
     e2e:	5f 91       	pop	r21
     e30:	4f 91       	pop	r20
     e32:	3f 91       	pop	r19
     e34:	2f 91       	pop	r18
     e36:	0f 90       	pop	r0
     e38:	0b be       	out	0x3b, r0	; 59
     e3a:	0f 90       	pop	r0
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	0f 90       	pop	r0
     e40:	1f 90       	pop	r1
     e42:	18 95       	reti

00000e44 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
     e44:	af 92       	push	r10
     e46:	bf 92       	push	r11
     e48:	cf 92       	push	r12
     e4a:	df 92       	push	r13
     e4c:	ef 92       	push	r14
     e4e:	ff 92       	push	r15
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	7c 01       	movw	r14, r24
     e5a:	8b 01       	movw	r16, r22
     e5c:	5a 01       	movw	r10, r20
     e5e:	21 c0       	rjmp	.+66     	; 0xea2 <USB_GetNextDescriptorComp+0x5e>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     e60:	f8 01       	movw	r30, r16
     e62:	c0 81       	ld	r28, Z
     e64:	d1 81       	ldd	r29, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     e66:	88 81       	ld	r24, Y
     e68:	90 e0       	ldi	r25, 0x00	; 0

				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
     e6a:	9e 01       	movw	r18, r28
     e6c:	28 0f       	add	r18, r24
     e6e:	39 1f       	adc	r19, r25
     e70:	31 83       	std	Z+1, r19	; 0x01
     e72:	20 83       	st	Z, r18
				*BytesRem      -= CurrDescriptorSize;
     e74:	f7 01       	movw	r30, r14
     e76:	20 81       	ld	r18, Z
     e78:	31 81       	ldd	r19, Z+1	; 0x01
     e7a:	28 1b       	sub	r18, r24
     e7c:	39 0b       	sbc	r19, r25
     e7e:	31 83       	std	Z+1, r19	; 0x01
     e80:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     e82:	f8 01       	movw	r30, r16
     e84:	80 81       	ld	r24, Z
     e86:	91 81       	ldd	r25, Z+1	; 0x01
     e88:	f5 01       	movw	r30, r10
     e8a:	09 95       	icall
     e8c:	82 30       	cpi	r24, 0x02	; 2
     e8e:	49 f0       	breq	.+18     	; 0xea2 <USB_GetNextDescriptorComp+0x5e>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	71 f4       	brne	.+28     	; 0xeb0 <USB_GetNextDescriptorComp+0x6c>
			{
				*CurrConfigLoc = PrevDescLoc;
     e94:	f8 01       	movw	r30, r16
     e96:	c0 83       	st	Z, r28
     e98:	d1 83       	std	Z+1, r29	; 0x01
				*BytesRem      = PrevBytesRem;
     e9a:	f7 01       	movw	r30, r14
     e9c:	d1 82       	std	Z+1, r13	; 0x01
     e9e:	c0 82       	st	Z, r12
     ea0:	07 c0       	rjmp	.+14     	; 0xeb0 <USB_GetNextDescriptorComp+0x6c>

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     ea2:	f7 01       	movw	r30, r14
     ea4:	c0 80       	ld	r12, Z
     ea6:	d1 80       	ldd	r13, Z+1	; 0x01
     ea8:	c1 14       	cp	r12, r1
     eaa:	d1 04       	cpc	r13, r1
     eac:	c9 f6       	brne	.-78     	; 0xe60 <USB_GetNextDescriptorComp+0x1c>
     eae:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	ff 90       	pop	r15
     eba:	ef 90       	pop	r14
     ebc:	df 90       	pop	r13
     ebe:	cf 90       	pop	r12
     ec0:	bf 90       	pop	r11
     ec2:	af 90       	pop	r10
     ec4:	08 95       	ret

00000ec6 <USB_Host_GetDeviceConfigDescriptor>:
#include "ConfigDescriptor.h"

#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(uint8_t ConfigNumber, uint16_t* const ConfigSizePtr,
                                           void* BufferPtr, uint16_t BufferSize)
{
     ec6:	cf 92       	push	r12
     ec8:	df 92       	push	r13
     eca:	ef 92       	push	r14
     ecc:	ff 92       	push	r15
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	29 97       	sbiw	r28, 0x09	; 9
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
     ee6:	6b 01       	movw	r12, r22
     ee8:	8a 01       	movw	r16, r20
     eea:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     eec:	90 e8       	ldi	r25, 0x80	; 128
     eee:	90 93 33 01 	sts	0x0133, r25
     ef2:	96 e0       	ldi	r25, 0x06	; 6
     ef4:	90 93 34 01 	sts	0x0134, r25
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	92 60       	ori	r25, 0x02	; 2
     efe:	90 93 36 01 	sts	0x0136, r25
     f02:	80 93 35 01 	sts	0x0135, r24
     f06:	10 92 38 01 	sts	0x0138, r1
     f0a:	10 92 37 01 	sts	0x0137, r1
     f0e:	89 e0       	ldi	r24, 0x09	; 9
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	90 93 3a 01 	sts	0x013A, r25
     f16:	80 93 39 01 	sts	0x0139, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     f1a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     f1e:	ce 01       	movw	r24, r28
     f20:	01 96       	adiw	r24, 0x01	; 1
     f22:	55 d0       	rcall	.+170    	; 0xfce <USB_Host_SendControlRequest>
     f24:	28 2f       	mov	r18, r24
     f26:	88 23       	and	r24, r24
     f28:	c1 f4       	brne	.+48     	; 0xf5a <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize;
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	9c 81       	ldd	r25, Y+4	; 0x04
     f2e:	f6 01       	movw	r30, r12
     f30:	91 83       	std	Z+1, r25	; 0x01
     f32:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     f34:	e8 16       	cp	r14, r24
     f36:	f9 06       	cpc	r15, r25
     f38:	10 f4       	brcc	.+4      	; 0xf3e <USB_Host_GetDeviceConfigDescriptor+0x78>
     f3a:	25 e0       	ldi	r18, 0x05	; 5
     f3c:	0e c0       	rjmp	.+28     	; 0xf5a <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     f3e:	90 93 3a 01 	sts	0x013A, r25
     f42:	80 93 39 01 	sts	0x0139, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     f46:	c8 01       	movw	r24, r16
     f48:	42 d0       	rcall	.+132    	; 0xfce <USB_Host_SendControlRequest>
     f4a:	28 2f       	mov	r18, r24
     f4c:	88 23       	and	r24, r24
     f4e:	29 f4       	brne	.+10     	; 0xf5a <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     f50:	f8 01       	movw	r30, r16
     f52:	81 81       	ldd	r24, Z+1	; 0x01
     f54:	82 30       	cpi	r24, 0x02	; 2
     f56:	09 f0       	breq	.+2      	; 0xf5a <USB_Host_GetDeviceConfigDescriptor+0x94>
     f58:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     f5a:	82 2f       	mov	r24, r18
     f5c:	29 96       	adiw	r28, 0x09	; 9
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	df 90       	pop	r13
     f76:	cf 90       	pop	r12
     f78:	08 95       	ret

00000f7a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     f7a:	08 95       	ret

00000f7c <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     f7c:	1f 93       	push	r17
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	18 2f       	mov	r17, r24
     f84:	c8 ee       	ldi	r28, 0xE8	; 232
     f86:	d3 e0       	ldi	r29, 0x03	; 3
     f88:	09 c0       	rjmp	.+18     	; 0xf9c <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	f8 db       	rcall	.-2064   	; 0x77e <USB_Host_WaitMS>
     f8e:	88 23       	and	r24, r24
     f90:	d1 f4       	brne	.+52     	; 0xfc6 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f92:	20 97       	sbiw	r28, 0x00	; 0
     f94:	11 f4       	brne	.+4      	; 0xf9a <USB_Host_WaitForIOS+0x1e>
     f96:	84 e0       	ldi	r24, 0x04	; 4
     f98:	16 c0       	rjmp	.+44     	; 0xfc6 <USB_Host_WaitForIOS+0x4a>
     f9a:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f9c:	11 23       	and	r17, r17
     f9e:	29 f4       	brne	.+10     	; 0xfaa <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean true if the current pipe is ready for a SETUP packet, false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     fa0:	80 91 a6 00 	lds	r24, 0x00A6
     fa4:	83 ff       	sbrs	r24, 3
     fa6:	f1 cf       	rjmp	.-30     	; 0xf8a <USB_Host_WaitForIOS+0xe>
     fa8:	0d c0       	rjmp	.+26     	; 0xfc4 <USB_Host_WaitForIOS+0x48>
     faa:	11 30       	cpi	r17, 0x01	; 1
     fac:	29 f4       	brne	.+10     	; 0xfb8 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     fae:	80 91 a6 00 	lds	r24, 0x00A6
     fb2:	80 ff       	sbrs	r24, 0
     fb4:	ea cf       	rjmp	.-44     	; 0xf8a <USB_Host_WaitForIOS+0xe>
     fb6:	06 c0       	rjmp	.+12     	; 0xfc4 <USB_Host_WaitForIOS+0x48>
     fb8:	12 30       	cpi	r17, 0x02	; 2
     fba:	39 f7       	brne	.-50     	; 0xf8a <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     fbc:	80 91 a6 00 	lds	r24, 0x00A6
     fc0:	82 ff       	sbrs	r24, 2
     fc2:	e3 cf       	rjmp	.-58     	; 0xf8a <USB_Host_WaitForIOS+0xe>
     fc4:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	08 95       	ret

00000fce <USB_Host_SendControlRequest>:

#define  __INCLUDE_FROM_HOSTSTDREQ_C
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     fce:	ff 92       	push	r15
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	18 2f       	mov	r17, r24
     fda:	09 2f       	mov	r16, r25
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     fdc:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
	bool     BusSuspended   = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus   = HOST_SENDCONTROL_Successful;
	uint16_t DataLen        = USB_ControlRequest.wLength;
     fe0:	c0 91 39 01 	lds	r28, 0x0139
     fe4:	d0 91 3a 01 	lds	r29, 0x013A
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     fe8:	80 91 9e 00 	lds	r24, 0x009E
     fec:	81 60       	ori	r24, 0x01	; 1
     fee:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	c4 db       	rcall	.-2168   	; 0x77e <USB_Host_WaitMS>
     ff6:	98 2f       	mov	r25, r24
     ff8:	88 23       	and	r24, r24
     ffa:	09 f0       	breq	.+2      	; 0xffe <USB_Host_SendControlRequest+0x30>
     ffc:	d2 c0       	rjmp	.+420    	; 0x11a2 <USB_Host_SendControlRequest+0x1d4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     ffe:	80 91 aa 00 	lds	r24, 0x00AA
    1002:	8f 7c       	andi	r24, 0xCF	; 207
    1004:	80 93 aa 00 	sts	0x00AA, r24
			 *  flag for the pipe.
			 */
			static inline void Pipe_ClearErrorFlags(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearErrorFlags(void)
			{
				UPERRX = 0;
    1008:	10 92 f5 00 	sts	0x00F5, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    100c:	80 91 a9 00 	lds	r24, 0x00A9
    1010:	8f 7b       	andi	r24, 0xBF	; 191
    1012:	80 93 a9 00 	sts	0x00A9, r24
    1016:	e3 e3       	ldi	r30, 0x33	; 51
    1018:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_Byte(*(HeaderStream++));
    101a:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    101c:	80 93 af 00 	sts	0x00AF, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	eb 33       	cpi	r30, 0x3B	; 59
    1024:	f8 07       	cpc	r31, r24
    1026:	c9 f7       	brne	.-14     	; 0x101a <USB_Host_SendControlRequest+0x4c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1028:	80 91 a6 00 	lds	r24, 0x00A6
    102c:	87 77       	andi	r24, 0x77	; 119
    102e:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_Byte(*(HeaderStream++));

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	a3 df       	rcall	.-186    	; 0xf7c <USB_Host_WaitForIOS>
    1036:	98 2f       	mov	r25, r24
    1038:	88 23       	and	r24, r24
    103a:	09 f0       	breq	.+2      	; 0x103e <USB_Host_SendControlRequest+0x70>
    103c:	b2 c0       	rjmp	.+356    	; 0x11a2 <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    103e:	80 91 a9 00 	lds	r24, 0x00A9
    1042:	80 64       	ori	r24, 0x40	; 64
    1044:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	99 db       	rcall	.-2254   	; 0x77e <USB_Host_WaitMS>
    104c:	98 2f       	mov	r25, r24
    104e:	88 23       	and	r24, r24
    1050:	09 f0       	breq	.+2      	; 0x1054 <USB_Host_SendControlRequest+0x86>
    1052:	a7 c0       	rjmp	.+334    	; 0x11a2 <USB_Host_SendControlRequest+0x1d4>
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
    1054:	21 2f       	mov	r18, r17
    1056:	30 2f       	mov	r19, r16
    1058:	c9 01       	movw	r24, r18
    105a:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    105c:	80 91 33 01 	lds	r24, 0x0133
    1060:	87 ff       	sbrs	r24, 7
    1062:	52 c0       	rjmp	.+164    	; 0x1108 <USB_Host_SendControlRequest+0x13a>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1064:	80 91 aa 00 	lds	r24, 0x00AA
    1068:	8f 7c       	andi	r24, 0xCF	; 207
    106a:	80 61       	ori	r24, 0x10	; 16
    106c:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1070:	01 15       	cp	r16, r1
    1072:	11 05       	cpc	r17, r1
    1074:	69 f5       	brne	.+90     	; 0x10d0 <USB_Host_SendControlRequest+0x102>
    1076:	2e c0       	rjmp	.+92     	; 0x10d4 <USB_Host_SendControlRequest+0x106>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1078:	80 91 a9 00 	lds	r24, 0x00A9
    107c:	8f 7b       	andi	r24, 0xBF	; 191
    107e:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	7b df       	rcall	.-266    	; 0xf7c <USB_Host_WaitForIOS>
    1086:	98 2f       	mov	r25, r24
    1088:	88 23       	and	r24, r24
    108a:	09 f0       	breq	.+2      	; 0x108e <USB_Host_SendControlRequest+0xc0>
    108c:	8a c0       	rjmp	.+276    	; 0x11a2 <USB_Host_SendControlRequest+0x1d4>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    108e:	80 91 f6 00 	lds	r24, 0x00F6
    1092:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1096:	89 2b       	or	r24, r25
    1098:	49 f4       	brne	.+18     	; 0x10ac <USB_Host_SendControlRequest+0xde>
    109a:	c0 e0       	ldi	r28, 0x00	; 0
    109c:	d0 e0       	ldi	r29, 0x00	; 0
    109e:	06 c0       	rjmp	.+12     	; 0x10ac <USB_Host_SendControlRequest+0xde>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    10a0:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_Byte();
    10a4:	f8 01       	movw	r30, r16
    10a6:	81 93       	st	Z+, r24
    10a8:	8f 01       	movw	r16, r30
					DataLen--;
    10aa:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10ac:	80 91 f6 00 	lds	r24, 0x00F6
    10b0:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    10b4:	89 2b       	or	r24, r25
    10b6:	11 f0       	breq	.+4      	; 0x10bc <USB_Host_SendControlRequest+0xee>
    10b8:	20 97       	sbiw	r28, 0x00	; 0
    10ba:	91 f7       	brne	.-28     	; 0x10a0 <USB_Host_SendControlRequest+0xd2>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10bc:	80 91 a9 00 	lds	r24, 0x00A9
    10c0:	80 64       	ori	r24, 0x40	; 64
    10c2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10c6:	80 91 a6 00 	lds	r24, 0x00A6
    10ca:	8e 77       	andi	r24, 0x7E	; 126
    10cc:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    10d0:	20 97       	sbiw	r28, 0x00	; 0
    10d2:	91 f6       	brne	.-92     	; 0x1078 <USB_Host_SendControlRequest+0xaa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10d4:	80 91 aa 00 	lds	r24, 0x00AA
    10d8:	8f 7c       	andi	r24, 0xCF	; 207
    10da:	80 62       	ori	r24, 0x20	; 32
    10dc:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10e0:	80 91 a9 00 	lds	r24, 0x00A9
    10e4:	8f 7b       	andi	r24, 0xBF	; 191
    10e6:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10ea:	82 e0       	ldi	r24, 0x02	; 2
    10ec:	47 df       	rcall	.-370    	; 0xf7c <USB_Host_WaitForIOS>
    10ee:	98 2f       	mov	r25, r24
    10f0:	88 23       	and	r24, r24
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <USB_Host_SendControlRequest+0x128>
    10f4:	56 c0       	rjmp	.+172    	; 0x11a2 <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10f6:	80 91 a6 00 	lds	r24, 0x00A6
    10fa:	8b 77       	andi	r24, 0x7B	; 123
    10fc:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1100:	82 e0       	ldi	r24, 0x02	; 2
    1102:	3c df       	rcall	.-392    	; 0xf7c <USB_Host_WaitForIOS>
    1104:	98 2f       	mov	r25, r24
    1106:	4d c0       	rjmp	.+154    	; 0x11a2 <USB_Host_SendControlRequest+0x1d4>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1108:	01 15       	cp	r16, r1
    110a:	11 05       	cpc	r17, r1
    110c:	a9 f1       	breq	.+106    	; 0x1178 <USB_Host_SendControlRequest+0x1aa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    110e:	80 91 aa 00 	lds	r24, 0x00AA
    1112:	8f 7c       	andi	r24, 0xCF	; 207
    1114:	80 62       	ori	r24, 0x20	; 32
    1116:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    111a:	80 91 a9 00 	lds	r24, 0x00A9
    111e:	8f 7b       	andi	r24, 0xBF	; 191
    1120:	80 93 a9 00 	sts	0x00A9, r24
    1124:	1d c0       	rjmp	.+58     	; 0x1160 <USB_Host_SendControlRequest+0x192>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1126:	82 e0       	ldi	r24, 0x02	; 2
    1128:	29 df       	rcall	.-430    	; 0xf7c <USB_Host_WaitForIOS>
    112a:	98 2f       	mov	r25, r24
    112c:	88 23       	and	r24, r24
    112e:	c9 f5       	brne	.+114    	; 0x11a2 <USB_Host_SendControlRequest+0x1d4>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    1130:	80 91 1f 01 	lds	r24, 0x011F
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	07 c0       	rjmp	.+14     	; 0x1148 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_Byte(*(DataStream++));
    113a:	f8 01       	movw	r30, r16
    113c:	81 91       	ld	r24, Z+
    113e:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    1140:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1144:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    1146:	39 f0       	breq	.+14     	; 0x1156 <USB_Host_SendControlRequest+0x188>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1148:	80 91 f6 00 	lds	r24, 0x00F6
    114c:	90 91 f7 00 	lds	r25, 0x00F7
    1150:	82 17       	cp	r24, r18
    1152:	93 07       	cpc	r25, r19
    1154:	90 f3       	brcs	.-28     	; 0x113a <USB_Host_SendControlRequest+0x16c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1156:	80 91 a6 00 	lds	r24, 0x00A6
    115a:	8b 77       	andi	r24, 0x7B	; 123
    115c:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1160:	20 97       	sbiw	r28, 0x00	; 0
    1162:	09 f7       	brne	.-62     	; 0x1126 <USB_Host_SendControlRequest+0x158>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1164:	82 e0       	ldi	r24, 0x02	; 2
    1166:	0a df       	rcall	.-492    	; 0xf7c <USB_Host_WaitForIOS>
    1168:	98 2f       	mov	r25, r24
    116a:	88 23       	and	r24, r24
    116c:	d1 f4       	brne	.+52     	; 0x11a2 <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    116e:	80 91 a9 00 	lds	r24, 0x00A9
    1172:	80 64       	ori	r24, 0x40	; 64
    1174:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1178:	80 91 aa 00 	lds	r24, 0x00AA
    117c:	8f 7c       	andi	r24, 0xCF	; 207
    117e:	80 61       	ori	r24, 0x10	; 16
    1180:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1184:	80 91 a9 00 	lds	r24, 0x00A9
    1188:	8f 7b       	andi	r24, 0xBF	; 191
    118a:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	f5 de       	rcall	.-534    	; 0xf7c <USB_Host_WaitForIOS>
    1192:	98 2f       	mov	r25, r24
    1194:	88 23       	and	r24, r24
    1196:	29 f4       	brne	.+10     	; 0x11a2 <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1198:	80 91 a6 00 	lds	r24, 0x00A6
    119c:	8e 77       	andi	r24, 0x7E	; 126
    119e:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11a2:	80 91 a9 00 	lds	r24, 0x00A9
    11a6:	80 64       	ori	r24, 0x40	; 64
    11a8:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    11ac:	f0 fc       	sbrc	r15, 0
    11ae:	05 c0       	rjmp	.+10     	; 0x11ba <USB_Host_SendControlRequest+0x1ec>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    11b0:	80 91 9e 00 	lds	r24, 0x009E
    11b4:	8e 7f       	andi	r24, 0xFE	; 254
    11b6:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    11c0:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    11c4:	89 2f       	mov	r24, r25
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	1f 91       	pop	r17
    11cc:	0f 91       	pop	r16
    11ce:	ff 90       	pop	r15
    11d0:	08 95       	ret

000011d2 <Pipe_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    11d2:	ff 92       	push	r15
    11d4:	0f 93       	push	r16
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	18 2f       	mov	r17, r24
    11de:	09 2f       	mov	r16, r25
    11e0:	eb 01       	movw	r28, r22
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11e2:	80 91 aa 00 	lds	r24, 0x00AA
    11e6:	8f 7c       	andi	r24, 0xCF	; 207
    11e8:	80 61       	ori	r24, 0x10	; 16
    11ea:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    11ee:	ee dc       	rcall	.-1572   	; 0xbcc <Pipe_WaitUntilReady>
    11f0:	f8 2e       	mov	r15, r24
    11f2:	88 23       	and	r24, r24
    11f4:	d1 f4       	brne	.+52     	; 0x122a <Pipe_Read_Stream_LE+0x58>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    11f6:	81 2f       	mov	r24, r17
    11f8:	90 2f       	mov	r25, r16
    11fa:	9c 01       	movw	r18, r24
    11fc:	89 01       	movw	r16, r18
    11fe:	13 c0       	rjmp	.+38     	; 0x1226 <Pipe_Read_Stream_LE+0x54>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1200:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1204:	85 fd       	sbrc	r24, 5
    1206:	09 c0       	rjmp	.+18     	; 0x121a <Pipe_Read_Stream_LE+0x48>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1208:	80 91 a6 00 	lds	r24, 0x00A6
    120c:	8e 77       	andi	r24, 0x7E	; 126
    120e:	80 93 a6 00 	sts	0x00A6, r24
			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1212:	dc dc       	rcall	.-1608   	; 0xbcc <Pipe_WaitUntilReady>
    1214:	88 23       	and	r24, r24
    1216:	39 f0       	breq	.+14     	; 0x1226 <Pipe_Read_Stream_LE+0x54>
    1218:	09 c0       	rjmp	.+18     	; 0x122c <Pipe_Read_Stream_LE+0x5a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    121a:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    121e:	f8 01       	movw	r30, r16
    1220:	81 93       	st	Z+, r24
    1222:	8f 01       	movw	r16, r30
			Length--;
    1224:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    1226:	20 97       	sbiw	r28, 0x00	; 0
    1228:	59 f7       	brne	.-42     	; 0x1200 <Pipe_Read_Stream_LE+0x2e>
    122a:	8f 2d       	mov	r24, r15
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	ff 90       	pop	r15
    1236:	08 95       	ret

00001238 <Pipe_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    1238:	ff 92       	push	r15
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	18 2f       	mov	r17, r24
    1244:	09 2f       	mov	r16, r25
    1246:	eb 01       	movw	r28, r22
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1248:	80 91 aa 00 	lds	r24, 0x00AA
    124c:	8f 7c       	andi	r24, 0xCF	; 207
    124e:	80 62       	ori	r24, 0x20	; 32
    1250:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1254:	bb dc       	rcall	.-1674   	; 0xbcc <Pipe_WaitUntilReady>
    1256:	f8 2e       	mov	r15, r24
    1258:	88 23       	and	r24, r24
    125a:	d1 f4       	brne	.+52     	; 0x1290 <Pipe_Write_Stream_LE+0x58>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    125c:	81 2f       	mov	r24, r17
    125e:	90 2f       	mov	r25, r16
    1260:	9c 01       	movw	r18, r24
    1262:	89 01       	movw	r16, r18
    1264:	13 c0       	rjmp	.+38     	; 0x128c <Pipe_Write_Stream_LE+0x54>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1266:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    126a:	85 fd       	sbrc	r24, 5
    126c:	09 c0       	rjmp	.+18     	; 0x1280 <Pipe_Write_Stream_LE+0x48>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    126e:	80 91 a6 00 	lds	r24, 0x00A6
    1272:	8b 77       	andi	r24, 0x7B	; 123
    1274:	80 93 a6 00 	sts	0x00A6, r24
			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1278:	a9 dc       	rcall	.-1710   	; 0xbcc <Pipe_WaitUntilReady>
    127a:	88 23       	and	r24, r24
    127c:	39 f0       	breq	.+14     	; 0x128c <Pipe_Write_Stream_LE+0x54>
    127e:	09 c0       	rjmp	.+18     	; 0x1292 <Pipe_Write_Stream_LE+0x5a>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1280:	f8 01       	movw	r30, r16
    1282:	81 91       	ld	r24, Z+
    1284:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    1286:	80 93 af 00 	sts	0x00AF, r24
			Length--;
    128a:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    128c:	20 97       	sbiw	r28, 0x00	; 0
    128e:	59 f7       	brne	.-42     	; 0x1266 <Pipe_Write_Stream_LE+0x2e>
    1290:	8f 2d       	mov	r24, r15
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	ff 90       	pop	r15
    129c:	08 95       	ret

0000129e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    129e:	ff 92       	push	r15
    12a0:	0f 93       	push	r16
    12a2:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    12a4:	07 ea       	ldi	r16, 0xA7	; 167
    12a6:	10 e0       	ldi	r17, 0x00	; 0
    12a8:	f8 01       	movw	r30, r16
    12aa:	f0 80       	ld	r15, Z
    12ac:	f7 e0       	ldi	r31, 0x07	; 7
    12ae:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12b0:	f8 01       	movw	r30, r16
    12b2:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    12b4:	13 db       	rcall	.-2522   	; 0x8dc <USB_Host_ProcessNextHostState>
    12b6:	f8 01       	movw	r30, r16
    12b8:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	ff 90       	pop	r15
    12c0:	08 95       	ret

000012c2 <SerialStream_TxByte>:

FILE USARTStream = FDEV_SETUP_STREAM(SerialStream_TxByte, SerialStream_RxByte, _FDEV_SETUP_RW);

static int SerialStream_TxByte(char DataByte,
                               FILE *Stream)
{
    12c2:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    12c4:	80 91 c8 00 	lds	r24, 0x00C8
    12c8:	85 ff       	sbrs	r24, 5
    12ca:	fc cf       	rjmp	.-8      	; 0x12c4 <SerialStream_TxByte+0x2>
				UDR1 = DataByte;
    12cc:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_TxByte(DataByte);
	return 0;
}
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	08 95       	ret

000012d6 <SerialStream_RxByte>:
			 *  \return Boolean true if a character has been received, false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    12d6:	80 91 c8 00 	lds	r24, 0x00C8

static int SerialStream_RxByte(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    12da:	87 fd       	sbrc	r24, 7
    12dc:	03 c0       	rjmp	.+6      	; 0x12e4 <SerialStream_RxByte+0xe>
    12de:	2e ef       	ldi	r18, 0xFE	; 254
    12e0:	3f ef       	ldi	r19, 0xFF	; 255
    12e2:	08 c0       	rjmp	.+16     	; 0x12f4 <SerialStream_RxByte+0x1e>
			 *  \return Byte received from the USART.
			 */
			static inline char Serial_RxByte(void) ATTR_ALWAYS_INLINE;
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
    12e4:	80 91 c8 00 	lds	r24, 0x00C8
    12e8:	87 ff       	sbrs	r24, 7
    12ea:	fc cf       	rjmp	.-8      	; 0x12e4 <SerialStream_RxByte+0xe>
				return UDR1;
    12ec:	80 91 ce 00 	lds	r24, 0x00CE
	  return _FDEV_EOF;

	return Serial_RxByte();
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
}
    12f4:	c9 01       	movw	r24, r18
    12f6:	08 95       	ret

000012f8 <printf_P>:
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	fe 01       	movw	r30, r28
    1302:	35 96       	adiw	r30, 0x05	; 5
    1304:	61 91       	ld	r22, Z+
    1306:	71 91       	ld	r23, Z+
    1308:	a0 91 3e 01 	lds	r26, 0x013E
    130c:	b0 91 3f 01 	lds	r27, 0x013F
    1310:	13 96       	adiw	r26, 0x03	; 3
    1312:	8c 91       	ld	r24, X
    1314:	13 97       	sbiw	r26, 0x03	; 3
    1316:	88 60       	ori	r24, 0x08	; 8
    1318:	13 96       	adiw	r26, 0x03	; 3
    131a:	8c 93       	st	X, r24
    131c:	80 91 3e 01 	lds	r24, 0x013E
    1320:	90 91 3f 01 	lds	r25, 0x013F
    1324:	af 01       	movw	r20, r30
    1326:	3f d0       	rcall	.+126    	; 0x13a6 <vfprintf>
    1328:	e0 91 3e 01 	lds	r30, 0x013E
    132c:	f0 91 3f 01 	lds	r31, 0x013F
    1330:	23 81       	ldd	r18, Z+3	; 0x03
    1332:	27 7f       	andi	r18, 0xF7	; 247
    1334:	23 83       	std	Z+3, r18	; 0x03
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <puts_P>:
    133c:	0f 93       	push	r16
    133e:	1f 93       	push	r17
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	ec 01       	movw	r28, r24
    1346:	e0 91 3e 01 	lds	r30, 0x013E
    134a:	f0 91 3f 01 	lds	r31, 0x013F
    134e:	83 81       	ldd	r24, Z+3	; 0x03
    1350:	81 ff       	sbrs	r24, 1
    1352:	21 c0       	rjmp	.+66     	; 0x1396 <puts_P+0x5a>
    1354:	00 e0       	ldi	r16, 0x00	; 0
    1356:	10 e0       	ldi	r17, 0x00	; 0
    1358:	0e c0       	rjmp	.+28     	; 0x1376 <puts_P+0x3a>
    135a:	e0 91 3e 01 	lds	r30, 0x013E
    135e:	f0 91 3f 01 	lds	r31, 0x013F
    1362:	20 85       	ldd	r18, Z+8	; 0x08
    1364:	31 85       	ldd	r19, Z+9	; 0x09
    1366:	bf 01       	movw	r22, r30
    1368:	f9 01       	movw	r30, r18
    136a:	09 95       	icall
    136c:	89 2b       	or	r24, r25
    136e:	11 f0       	breq	.+4      	; 0x1374 <puts_P+0x38>
    1370:	0f ef       	ldi	r16, 0xFF	; 255
    1372:	1f ef       	ldi	r17, 0xFF	; 255
    1374:	21 96       	adiw	r28, 0x01	; 1
    1376:	fe 01       	movw	r30, r28
    1378:	84 91       	lpm	r24, Z+
    137a:	88 23       	and	r24, r24
    137c:	71 f7       	brne	.-36     	; 0x135a <puts_P+0x1e>
    137e:	e0 91 3e 01 	lds	r30, 0x013E
    1382:	f0 91 3f 01 	lds	r31, 0x013F
    1386:	20 85       	ldd	r18, Z+8	; 0x08
    1388:	31 85       	ldd	r19, Z+9	; 0x09
    138a:	8a e0       	ldi	r24, 0x0A	; 10
    138c:	bf 01       	movw	r22, r30
    138e:	f9 01       	movw	r30, r18
    1390:	09 95       	icall
    1392:	89 2b       	or	r24, r25
    1394:	11 f0       	breq	.+4      	; 0x139a <puts_P+0x5e>
    1396:	0f ef       	ldi	r16, 0xFF	; 255
    1398:	1f ef       	ldi	r17, 0xFF	; 255
    139a:	c8 01       	movw	r24, r16
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
    13a4:	08 95       	ret

000013a6 <vfprintf>:
    13a6:	2f 92       	push	r2
    13a8:	3f 92       	push	r3
    13aa:	4f 92       	push	r4
    13ac:	5f 92       	push	r5
    13ae:	6f 92       	push	r6
    13b0:	7f 92       	push	r7
    13b2:	8f 92       	push	r8
    13b4:	9f 92       	push	r9
    13b6:	af 92       	push	r10
    13b8:	bf 92       	push	r11
    13ba:	cf 92       	push	r12
    13bc:	df 92       	push	r13
    13be:	ef 92       	push	r14
    13c0:	ff 92       	push	r15
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	2b 97       	sbiw	r28, 0x0b	; 11
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	3c 01       	movw	r6, r24
    13dc:	2b 01       	movw	r4, r22
    13de:	5a 01       	movw	r10, r20
    13e0:	fc 01       	movw	r30, r24
    13e2:	17 82       	std	Z+7, r1	; 0x07
    13e4:	16 82       	std	Z+6, r1	; 0x06
    13e6:	83 81       	ldd	r24, Z+3	; 0x03
    13e8:	81 fd       	sbrc	r24, 1
    13ea:	03 c0       	rjmp	.+6      	; 0x13f2 <vfprintf+0x4c>
    13ec:	6f ef       	ldi	r22, 0xFF	; 255
    13ee:	7f ef       	ldi	r23, 0xFF	; 255
    13f0:	b9 c1       	rjmp	.+882    	; 0x1764 <vfprintf+0x3be>
    13f2:	9a e0       	ldi	r25, 0x0A	; 10
    13f4:	89 2e       	mov	r8, r25
    13f6:	1e 01       	movw	r2, r28
    13f8:	08 94       	sec
    13fa:	21 1c       	adc	r2, r1
    13fc:	31 1c       	adc	r3, r1
    13fe:	f3 01       	movw	r30, r6
    1400:	23 81       	ldd	r18, Z+3	; 0x03
    1402:	f2 01       	movw	r30, r4
    1404:	23 fd       	sbrc	r18, 3
    1406:	85 91       	lpm	r24, Z+
    1408:	23 ff       	sbrs	r18, 3
    140a:	81 91       	ld	r24, Z+
    140c:	2f 01       	movw	r4, r30
    140e:	88 23       	and	r24, r24
    1410:	09 f4       	brne	.+2      	; 0x1414 <vfprintf+0x6e>
    1412:	a5 c1       	rjmp	.+842    	; 0x175e <vfprintf+0x3b8>
    1414:	85 32       	cpi	r24, 0x25	; 37
    1416:	39 f4       	brne	.+14     	; 0x1426 <vfprintf+0x80>
    1418:	23 fd       	sbrc	r18, 3
    141a:	85 91       	lpm	r24, Z+
    141c:	23 ff       	sbrs	r18, 3
    141e:	81 91       	ld	r24, Z+
    1420:	2f 01       	movw	r4, r30
    1422:	85 32       	cpi	r24, 0x25	; 37
    1424:	21 f4       	brne	.+8      	; 0x142e <vfprintf+0x88>
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	b3 01       	movw	r22, r6
    142a:	cc d1       	rcall	.+920    	; 0x17c4 <fputc>
    142c:	e8 cf       	rjmp	.-48     	; 0x13fe <vfprintf+0x58>
    142e:	98 2f       	mov	r25, r24
    1430:	ff 24       	eor	r15, r15
    1432:	ee 24       	eor	r14, r14
    1434:	99 24       	eor	r9, r9
    1436:	ff e1       	ldi	r31, 0x1F	; 31
    1438:	ff 15       	cp	r31, r15
    143a:	d0 f0       	brcs	.+52     	; 0x1470 <vfprintf+0xca>
    143c:	9b 32       	cpi	r25, 0x2B	; 43
    143e:	69 f0       	breq	.+26     	; 0x145a <vfprintf+0xb4>
    1440:	9c 32       	cpi	r25, 0x2C	; 44
    1442:	28 f4       	brcc	.+10     	; 0x144e <vfprintf+0xa8>
    1444:	90 32       	cpi	r25, 0x20	; 32
    1446:	59 f0       	breq	.+22     	; 0x145e <vfprintf+0xb8>
    1448:	93 32       	cpi	r25, 0x23	; 35
    144a:	91 f4       	brne	.+36     	; 0x1470 <vfprintf+0xca>
    144c:	0e c0       	rjmp	.+28     	; 0x146a <vfprintf+0xc4>
    144e:	9d 32       	cpi	r25, 0x2D	; 45
    1450:	49 f0       	breq	.+18     	; 0x1464 <vfprintf+0xbe>
    1452:	90 33       	cpi	r25, 0x30	; 48
    1454:	69 f4       	brne	.+26     	; 0x1470 <vfprintf+0xca>
    1456:	41 e0       	ldi	r20, 0x01	; 1
    1458:	24 c0       	rjmp	.+72     	; 0x14a2 <vfprintf+0xfc>
    145a:	52 e0       	ldi	r21, 0x02	; 2
    145c:	f5 2a       	or	r15, r21
    145e:	84 e0       	ldi	r24, 0x04	; 4
    1460:	f8 2a       	or	r15, r24
    1462:	28 c0       	rjmp	.+80     	; 0x14b4 <vfprintf+0x10e>
    1464:	98 e0       	ldi	r25, 0x08	; 8
    1466:	f9 2a       	or	r15, r25
    1468:	25 c0       	rjmp	.+74     	; 0x14b4 <vfprintf+0x10e>
    146a:	e0 e1       	ldi	r30, 0x10	; 16
    146c:	fe 2a       	or	r15, r30
    146e:	22 c0       	rjmp	.+68     	; 0x14b4 <vfprintf+0x10e>
    1470:	f7 fc       	sbrc	r15, 7
    1472:	29 c0       	rjmp	.+82     	; 0x14c6 <vfprintf+0x120>
    1474:	89 2f       	mov	r24, r25
    1476:	80 53       	subi	r24, 0x30	; 48
    1478:	8a 30       	cpi	r24, 0x0A	; 10
    147a:	70 f4       	brcc	.+28     	; 0x1498 <vfprintf+0xf2>
    147c:	f6 fe       	sbrs	r15, 6
    147e:	05 c0       	rjmp	.+10     	; 0x148a <vfprintf+0xe4>
    1480:	98 9c       	mul	r9, r8
    1482:	90 2c       	mov	r9, r0
    1484:	11 24       	eor	r1, r1
    1486:	98 0e       	add	r9, r24
    1488:	15 c0       	rjmp	.+42     	; 0x14b4 <vfprintf+0x10e>
    148a:	e8 9c       	mul	r14, r8
    148c:	e0 2c       	mov	r14, r0
    148e:	11 24       	eor	r1, r1
    1490:	e8 0e       	add	r14, r24
    1492:	f0 e2       	ldi	r31, 0x20	; 32
    1494:	ff 2a       	or	r15, r31
    1496:	0e c0       	rjmp	.+28     	; 0x14b4 <vfprintf+0x10e>
    1498:	9e 32       	cpi	r25, 0x2E	; 46
    149a:	29 f4       	brne	.+10     	; 0x14a6 <vfprintf+0x100>
    149c:	f6 fc       	sbrc	r15, 6
    149e:	5f c1       	rjmp	.+702    	; 0x175e <vfprintf+0x3b8>
    14a0:	40 e4       	ldi	r20, 0x40	; 64
    14a2:	f4 2a       	or	r15, r20
    14a4:	07 c0       	rjmp	.+14     	; 0x14b4 <vfprintf+0x10e>
    14a6:	9c 36       	cpi	r25, 0x6C	; 108
    14a8:	19 f4       	brne	.+6      	; 0x14b0 <vfprintf+0x10a>
    14aa:	50 e8       	ldi	r21, 0x80	; 128
    14ac:	f5 2a       	or	r15, r21
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <vfprintf+0x10e>
    14b0:	98 36       	cpi	r25, 0x68	; 104
    14b2:	49 f4       	brne	.+18     	; 0x14c6 <vfprintf+0x120>
    14b4:	f2 01       	movw	r30, r4
    14b6:	23 fd       	sbrc	r18, 3
    14b8:	95 91       	lpm	r25, Z+
    14ba:	23 ff       	sbrs	r18, 3
    14bc:	91 91       	ld	r25, Z+
    14be:	2f 01       	movw	r4, r30
    14c0:	99 23       	and	r25, r25
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <vfprintf+0x120>
    14c4:	b8 cf       	rjmp	.-144    	; 0x1436 <vfprintf+0x90>
    14c6:	89 2f       	mov	r24, r25
    14c8:	85 54       	subi	r24, 0x45	; 69
    14ca:	83 30       	cpi	r24, 0x03	; 3
    14cc:	18 f0       	brcs	.+6      	; 0x14d4 <vfprintf+0x12e>
    14ce:	80 52       	subi	r24, 0x20	; 32
    14d0:	83 30       	cpi	r24, 0x03	; 3
    14d2:	38 f4       	brcc	.+14     	; 0x14e2 <vfprintf+0x13c>
    14d4:	44 e0       	ldi	r20, 0x04	; 4
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	a4 0e       	add	r10, r20
    14da:	b5 1e       	adc	r11, r21
    14dc:	5f e3       	ldi	r21, 0x3F	; 63
    14de:	59 83       	std	Y+1, r21	; 0x01
    14e0:	0f c0       	rjmp	.+30     	; 0x1500 <vfprintf+0x15a>
    14e2:	93 36       	cpi	r25, 0x63	; 99
    14e4:	31 f0       	breq	.+12     	; 0x14f2 <vfprintf+0x14c>
    14e6:	93 37       	cpi	r25, 0x73	; 115
    14e8:	79 f0       	breq	.+30     	; 0x1508 <vfprintf+0x162>
    14ea:	93 35       	cpi	r25, 0x53	; 83
    14ec:	09 f0       	breq	.+2      	; 0x14f0 <vfprintf+0x14a>
    14ee:	52 c0       	rjmp	.+164    	; 0x1594 <vfprintf+0x1ee>
    14f0:	1f c0       	rjmp	.+62     	; 0x1530 <vfprintf+0x18a>
    14f2:	f5 01       	movw	r30, r10
    14f4:	80 81       	ld	r24, Z
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	42 e0       	ldi	r20, 0x02	; 2
    14fa:	50 e0       	ldi	r21, 0x00	; 0
    14fc:	a4 0e       	add	r10, r20
    14fe:	b5 1e       	adc	r11, r21
    1500:	61 01       	movw	r12, r2
    1502:	01 e0       	ldi	r16, 0x01	; 1
    1504:	10 e0       	ldi	r17, 0x00	; 0
    1506:	11 c0       	rjmp	.+34     	; 0x152a <vfprintf+0x184>
    1508:	f5 01       	movw	r30, r10
    150a:	c0 80       	ld	r12, Z
    150c:	d1 80       	ldd	r13, Z+1	; 0x01
    150e:	f6 fc       	sbrc	r15, 6
    1510:	03 c0       	rjmp	.+6      	; 0x1518 <vfprintf+0x172>
    1512:	6f ef       	ldi	r22, 0xFF	; 255
    1514:	7f ef       	ldi	r23, 0xFF	; 255
    1516:	02 c0       	rjmp	.+4      	; 0x151c <vfprintf+0x176>
    1518:	69 2d       	mov	r22, r9
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	42 e0       	ldi	r20, 0x02	; 2
    151e:	50 e0       	ldi	r21, 0x00	; 0
    1520:	a4 0e       	add	r10, r20
    1522:	b5 1e       	adc	r11, r21
    1524:	c6 01       	movw	r24, r12
    1526:	43 d1       	rcall	.+646    	; 0x17ae <strnlen>
    1528:	8c 01       	movw	r16, r24
    152a:	5f e7       	ldi	r21, 0x7F	; 127
    152c:	f5 22       	and	r15, r21
    152e:	13 c0       	rjmp	.+38     	; 0x1556 <vfprintf+0x1b0>
    1530:	f5 01       	movw	r30, r10
    1532:	c0 80       	ld	r12, Z
    1534:	d1 80       	ldd	r13, Z+1	; 0x01
    1536:	f6 fc       	sbrc	r15, 6
    1538:	03 c0       	rjmp	.+6      	; 0x1540 <vfprintf+0x19a>
    153a:	6f ef       	ldi	r22, 0xFF	; 255
    153c:	7f ef       	ldi	r23, 0xFF	; 255
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <vfprintf+0x19e>
    1540:	69 2d       	mov	r22, r9
    1542:	70 e0       	ldi	r23, 0x00	; 0
    1544:	42 e0       	ldi	r20, 0x02	; 2
    1546:	50 e0       	ldi	r21, 0x00	; 0
    1548:	a4 0e       	add	r10, r20
    154a:	b5 1e       	adc	r11, r21
    154c:	c6 01       	movw	r24, r12
    154e:	24 d1       	rcall	.+584    	; 0x1798 <strnlen_P>
    1550:	8c 01       	movw	r16, r24
    1552:	50 e8       	ldi	r21, 0x80	; 128
    1554:	f5 2a       	or	r15, r21
    1556:	f3 fe       	sbrs	r15, 3
    1558:	06 c0       	rjmp	.+12     	; 0x1566 <vfprintf+0x1c0>
    155a:	18 c0       	rjmp	.+48     	; 0x158c <vfprintf+0x1e6>
    155c:	80 e2       	ldi	r24, 0x20	; 32
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	b3 01       	movw	r22, r6
    1562:	30 d1       	rcall	.+608    	; 0x17c4 <fputc>
    1564:	ea 94       	dec	r14
    1566:	8e 2d       	mov	r24, r14
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	08 17       	cp	r16, r24
    156c:	19 07       	cpc	r17, r25
    156e:	b0 f3       	brcs	.-20     	; 0x155c <vfprintf+0x1b6>
    1570:	0d c0       	rjmp	.+26     	; 0x158c <vfprintf+0x1e6>
    1572:	f6 01       	movw	r30, r12
    1574:	f7 fc       	sbrc	r15, 7
    1576:	85 91       	lpm	r24, Z+
    1578:	f7 fe       	sbrs	r15, 7
    157a:	81 91       	ld	r24, Z+
    157c:	6f 01       	movw	r12, r30
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	b3 01       	movw	r22, r6
    1582:	20 d1       	rcall	.+576    	; 0x17c4 <fputc>
    1584:	e1 10       	cpse	r14, r1
    1586:	ea 94       	dec	r14
    1588:	01 50       	subi	r16, 0x01	; 1
    158a:	10 40       	sbci	r17, 0x00	; 0
    158c:	01 15       	cp	r16, r1
    158e:	11 05       	cpc	r17, r1
    1590:	81 f7       	brne	.-32     	; 0x1572 <vfprintf+0x1cc>
    1592:	e2 c0       	rjmp	.+452    	; 0x1758 <vfprintf+0x3b2>
    1594:	94 36       	cpi	r25, 0x64	; 100
    1596:	11 f0       	breq	.+4      	; 0x159c <vfprintf+0x1f6>
    1598:	99 36       	cpi	r25, 0x69	; 105
    159a:	61 f5       	brne	.+88     	; 0x15f4 <vfprintf+0x24e>
    159c:	f7 fe       	sbrs	r15, 7
    159e:	08 c0       	rjmp	.+16     	; 0x15b0 <vfprintf+0x20a>
    15a0:	f5 01       	movw	r30, r10
    15a2:	20 81       	ld	r18, Z
    15a4:	31 81       	ldd	r19, Z+1	; 0x01
    15a6:	42 81       	ldd	r20, Z+2	; 0x02
    15a8:	53 81       	ldd	r21, Z+3	; 0x03
    15aa:	84 e0       	ldi	r24, 0x04	; 4
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0a c0       	rjmp	.+20     	; 0x15c4 <vfprintf+0x21e>
    15b0:	f5 01       	movw	r30, r10
    15b2:	80 81       	ld	r24, Z
    15b4:	91 81       	ldd	r25, Z+1	; 0x01
    15b6:	9c 01       	movw	r18, r24
    15b8:	44 27       	eor	r20, r20
    15ba:	37 fd       	sbrc	r19, 7
    15bc:	40 95       	com	r20
    15be:	54 2f       	mov	r21, r20
    15c0:	82 e0       	ldi	r24, 0x02	; 2
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	a8 0e       	add	r10, r24
    15c6:	b9 1e       	adc	r11, r25
    15c8:	9f e6       	ldi	r25, 0x6F	; 111
    15ca:	f9 22       	and	r15, r25
    15cc:	57 ff       	sbrs	r21, 7
    15ce:	09 c0       	rjmp	.+18     	; 0x15e2 <vfprintf+0x23c>
    15d0:	50 95       	com	r21
    15d2:	40 95       	com	r20
    15d4:	30 95       	com	r19
    15d6:	21 95       	neg	r18
    15d8:	3f 4f       	sbci	r19, 0xFF	; 255
    15da:	4f 4f       	sbci	r20, 0xFF	; 255
    15dc:	5f 4f       	sbci	r21, 0xFF	; 255
    15de:	e0 e8       	ldi	r30, 0x80	; 128
    15e0:	fe 2a       	or	r15, r30
    15e2:	ca 01       	movw	r24, r20
    15e4:	b9 01       	movw	r22, r18
    15e6:	a1 01       	movw	r20, r2
    15e8:	2a e0       	ldi	r18, 0x0A	; 10
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	17 d1       	rcall	.+558    	; 0x181c <__ultoa_invert>
    15ee:	d8 2e       	mov	r13, r24
    15f0:	d2 18       	sub	r13, r2
    15f2:	3f c0       	rjmp	.+126    	; 0x1672 <vfprintf+0x2cc>
    15f4:	95 37       	cpi	r25, 0x75	; 117
    15f6:	29 f4       	brne	.+10     	; 0x1602 <vfprintf+0x25c>
    15f8:	1f 2d       	mov	r17, r15
    15fa:	1f 7e       	andi	r17, 0xEF	; 239
    15fc:	2a e0       	ldi	r18, 0x0A	; 10
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	1d c0       	rjmp	.+58     	; 0x163c <vfprintf+0x296>
    1602:	1f 2d       	mov	r17, r15
    1604:	19 7f       	andi	r17, 0xF9	; 249
    1606:	9f 36       	cpi	r25, 0x6F	; 111
    1608:	61 f0       	breq	.+24     	; 0x1622 <vfprintf+0x27c>
    160a:	90 37       	cpi	r25, 0x70	; 112
    160c:	20 f4       	brcc	.+8      	; 0x1616 <vfprintf+0x270>
    160e:	98 35       	cpi	r25, 0x58	; 88
    1610:	09 f0       	breq	.+2      	; 0x1614 <vfprintf+0x26e>
    1612:	a5 c0       	rjmp	.+330    	; 0x175e <vfprintf+0x3b8>
    1614:	0f c0       	rjmp	.+30     	; 0x1634 <vfprintf+0x28e>
    1616:	90 37       	cpi	r25, 0x70	; 112
    1618:	39 f0       	breq	.+14     	; 0x1628 <vfprintf+0x282>
    161a:	98 37       	cpi	r25, 0x78	; 120
    161c:	09 f0       	breq	.+2      	; 0x1620 <vfprintf+0x27a>
    161e:	9f c0       	rjmp	.+318    	; 0x175e <vfprintf+0x3b8>
    1620:	04 c0       	rjmp	.+8      	; 0x162a <vfprintf+0x284>
    1622:	28 e0       	ldi	r18, 0x08	; 8
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	0a c0       	rjmp	.+20     	; 0x163c <vfprintf+0x296>
    1628:	10 61       	ori	r17, 0x10	; 16
    162a:	14 fd       	sbrc	r17, 4
    162c:	14 60       	ori	r17, 0x04	; 4
    162e:	20 e1       	ldi	r18, 0x10	; 16
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	04 c0       	rjmp	.+8      	; 0x163c <vfprintf+0x296>
    1634:	14 fd       	sbrc	r17, 4
    1636:	16 60       	ori	r17, 0x06	; 6
    1638:	20 e1       	ldi	r18, 0x10	; 16
    163a:	32 e0       	ldi	r19, 0x02	; 2
    163c:	17 ff       	sbrs	r17, 7
    163e:	08 c0       	rjmp	.+16     	; 0x1650 <vfprintf+0x2aa>
    1640:	f5 01       	movw	r30, r10
    1642:	60 81       	ld	r22, Z
    1644:	71 81       	ldd	r23, Z+1	; 0x01
    1646:	82 81       	ldd	r24, Z+2	; 0x02
    1648:	93 81       	ldd	r25, Z+3	; 0x03
    164a:	44 e0       	ldi	r20, 0x04	; 4
    164c:	50 e0       	ldi	r21, 0x00	; 0
    164e:	08 c0       	rjmp	.+16     	; 0x1660 <vfprintf+0x2ba>
    1650:	f5 01       	movw	r30, r10
    1652:	80 81       	ld	r24, Z
    1654:	91 81       	ldd	r25, Z+1	; 0x01
    1656:	bc 01       	movw	r22, r24
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	42 e0       	ldi	r20, 0x02	; 2
    165e:	50 e0       	ldi	r21, 0x00	; 0
    1660:	a4 0e       	add	r10, r20
    1662:	b5 1e       	adc	r11, r21
    1664:	a1 01       	movw	r20, r2
    1666:	da d0       	rcall	.+436    	; 0x181c <__ultoa_invert>
    1668:	d8 2e       	mov	r13, r24
    166a:	d2 18       	sub	r13, r2
    166c:	8f e7       	ldi	r24, 0x7F	; 127
    166e:	f8 2e       	mov	r15, r24
    1670:	f1 22       	and	r15, r17
    1672:	f6 fe       	sbrs	r15, 6
    1674:	0b c0       	rjmp	.+22     	; 0x168c <vfprintf+0x2e6>
    1676:	5e ef       	ldi	r21, 0xFE	; 254
    1678:	f5 22       	and	r15, r21
    167a:	d9 14       	cp	r13, r9
    167c:	38 f4       	brcc	.+14     	; 0x168c <vfprintf+0x2e6>
    167e:	f4 fe       	sbrs	r15, 4
    1680:	07 c0       	rjmp	.+14     	; 0x1690 <vfprintf+0x2ea>
    1682:	f2 fc       	sbrc	r15, 2
    1684:	05 c0       	rjmp	.+10     	; 0x1690 <vfprintf+0x2ea>
    1686:	8f ee       	ldi	r24, 0xEF	; 239
    1688:	f8 22       	and	r15, r24
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <vfprintf+0x2ea>
    168c:	1d 2d       	mov	r17, r13
    168e:	01 c0       	rjmp	.+2      	; 0x1692 <vfprintf+0x2ec>
    1690:	19 2d       	mov	r17, r9
    1692:	f4 fe       	sbrs	r15, 4
    1694:	0d c0       	rjmp	.+26     	; 0x16b0 <vfprintf+0x30a>
    1696:	fe 01       	movw	r30, r28
    1698:	ed 0d       	add	r30, r13
    169a:	f1 1d       	adc	r31, r1
    169c:	80 81       	ld	r24, Z
    169e:	80 33       	cpi	r24, 0x30	; 48
    16a0:	19 f4       	brne	.+6      	; 0x16a8 <vfprintf+0x302>
    16a2:	99 ee       	ldi	r25, 0xE9	; 233
    16a4:	f9 22       	and	r15, r25
    16a6:	08 c0       	rjmp	.+16     	; 0x16b8 <vfprintf+0x312>
    16a8:	1f 5f       	subi	r17, 0xFF	; 255
    16aa:	f2 fe       	sbrs	r15, 2
    16ac:	05 c0       	rjmp	.+10     	; 0x16b8 <vfprintf+0x312>
    16ae:	03 c0       	rjmp	.+6      	; 0x16b6 <vfprintf+0x310>
    16b0:	8f 2d       	mov	r24, r15
    16b2:	86 78       	andi	r24, 0x86	; 134
    16b4:	09 f0       	breq	.+2      	; 0x16b8 <vfprintf+0x312>
    16b6:	1f 5f       	subi	r17, 0xFF	; 255
    16b8:	0f 2d       	mov	r16, r15
    16ba:	f3 fc       	sbrc	r15, 3
    16bc:	13 c0       	rjmp	.+38     	; 0x16e4 <vfprintf+0x33e>
    16be:	f0 fe       	sbrs	r15, 0
    16c0:	0e c0       	rjmp	.+28     	; 0x16de <vfprintf+0x338>
    16c2:	1e 15       	cp	r17, r14
    16c4:	10 f0       	brcs	.+4      	; 0x16ca <vfprintf+0x324>
    16c6:	9d 2c       	mov	r9, r13
    16c8:	0a c0       	rjmp	.+20     	; 0x16de <vfprintf+0x338>
    16ca:	9d 2c       	mov	r9, r13
    16cc:	9e 0c       	add	r9, r14
    16ce:	91 1a       	sub	r9, r17
    16d0:	1e 2d       	mov	r17, r14
    16d2:	05 c0       	rjmp	.+10     	; 0x16de <vfprintf+0x338>
    16d4:	80 e2       	ldi	r24, 0x20	; 32
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	b3 01       	movw	r22, r6
    16da:	74 d0       	rcall	.+232    	; 0x17c4 <fputc>
    16dc:	1f 5f       	subi	r17, 0xFF	; 255
    16de:	1e 15       	cp	r17, r14
    16e0:	c8 f3       	brcs	.-14     	; 0x16d4 <vfprintf+0x32e>
    16e2:	04 c0       	rjmp	.+8      	; 0x16ec <vfprintf+0x346>
    16e4:	1e 15       	cp	r17, r14
    16e6:	10 f4       	brcc	.+4      	; 0x16ec <vfprintf+0x346>
    16e8:	e1 1a       	sub	r14, r17
    16ea:	01 c0       	rjmp	.+2      	; 0x16ee <vfprintf+0x348>
    16ec:	ee 24       	eor	r14, r14
    16ee:	04 ff       	sbrs	r16, 4
    16f0:	0e c0       	rjmp	.+28     	; 0x170e <vfprintf+0x368>
    16f2:	80 e3       	ldi	r24, 0x30	; 48
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	b3 01       	movw	r22, r6
    16f8:	65 d0       	rcall	.+202    	; 0x17c4 <fputc>
    16fa:	02 ff       	sbrs	r16, 2
    16fc:	1b c0       	rjmp	.+54     	; 0x1734 <vfprintf+0x38e>
    16fe:	01 fd       	sbrc	r16, 1
    1700:	03 c0       	rjmp	.+6      	; 0x1708 <vfprintf+0x362>
    1702:	88 e7       	ldi	r24, 0x78	; 120
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e c0       	rjmp	.+28     	; 0x1724 <vfprintf+0x37e>
    1708:	88 e5       	ldi	r24, 0x58	; 88
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	0b c0       	rjmp	.+22     	; 0x1724 <vfprintf+0x37e>
    170e:	80 2f       	mov	r24, r16
    1710:	86 78       	andi	r24, 0x86	; 134
    1712:	81 f0       	breq	.+32     	; 0x1734 <vfprintf+0x38e>
    1714:	01 ff       	sbrs	r16, 1
    1716:	02 c0       	rjmp	.+4      	; 0x171c <vfprintf+0x376>
    1718:	8b e2       	ldi	r24, 0x2B	; 43
    171a:	01 c0       	rjmp	.+2      	; 0x171e <vfprintf+0x378>
    171c:	80 e2       	ldi	r24, 0x20	; 32
    171e:	f7 fc       	sbrc	r15, 7
    1720:	8d e2       	ldi	r24, 0x2D	; 45
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	b3 01       	movw	r22, r6
    1726:	4e d0       	rcall	.+156    	; 0x17c4 <fputc>
    1728:	05 c0       	rjmp	.+10     	; 0x1734 <vfprintf+0x38e>
    172a:	80 e3       	ldi	r24, 0x30	; 48
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	b3 01       	movw	r22, r6
    1730:	49 d0       	rcall	.+146    	; 0x17c4 <fputc>
    1732:	9a 94       	dec	r9
    1734:	d9 14       	cp	r13, r9
    1736:	c8 f3       	brcs	.-14     	; 0x172a <vfprintf+0x384>
    1738:	da 94       	dec	r13
    173a:	f1 01       	movw	r30, r2
    173c:	ed 0d       	add	r30, r13
    173e:	f1 1d       	adc	r31, r1
    1740:	80 81       	ld	r24, Z
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	b3 01       	movw	r22, r6
    1746:	3e d0       	rcall	.+124    	; 0x17c4 <fputc>
    1748:	dd 20       	and	r13, r13
    174a:	b1 f7       	brne	.-20     	; 0x1738 <vfprintf+0x392>
    174c:	05 c0       	rjmp	.+10     	; 0x1758 <vfprintf+0x3b2>
    174e:	80 e2       	ldi	r24, 0x20	; 32
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	b3 01       	movw	r22, r6
    1754:	37 d0       	rcall	.+110    	; 0x17c4 <fputc>
    1756:	ea 94       	dec	r14
    1758:	ee 20       	and	r14, r14
    175a:	c9 f7       	brne	.-14     	; 0x174e <vfprintf+0x3a8>
    175c:	50 ce       	rjmp	.-864    	; 0x13fe <vfprintf+0x58>
    175e:	f3 01       	movw	r30, r6
    1760:	66 81       	ldd	r22, Z+6	; 0x06
    1762:	77 81       	ldd	r23, Z+7	; 0x07
    1764:	cb 01       	movw	r24, r22
    1766:	2b 96       	adiw	r28, 0x0b	; 11
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	1f 91       	pop	r17
    1778:	0f 91       	pop	r16
    177a:	ff 90       	pop	r15
    177c:	ef 90       	pop	r14
    177e:	df 90       	pop	r13
    1780:	cf 90       	pop	r12
    1782:	bf 90       	pop	r11
    1784:	af 90       	pop	r10
    1786:	9f 90       	pop	r9
    1788:	8f 90       	pop	r8
    178a:	7f 90       	pop	r7
    178c:	6f 90       	pop	r6
    178e:	5f 90       	pop	r5
    1790:	4f 90       	pop	r4
    1792:	3f 90       	pop	r3
    1794:	2f 90       	pop	r2
    1796:	08 95       	ret

00001798 <strnlen_P>:
    1798:	fc 01       	movw	r30, r24
    179a:	05 90       	lpm	r0, Z+
    179c:	61 50       	subi	r22, 0x01	; 1
    179e:	70 40       	sbci	r23, 0x00	; 0
    17a0:	01 10       	cpse	r0, r1
    17a2:	d8 f7       	brcc	.-10     	; 0x179a <strnlen_P+0x2>
    17a4:	80 95       	com	r24
    17a6:	90 95       	com	r25
    17a8:	8e 0f       	add	r24, r30
    17aa:	9f 1f       	adc	r25, r31
    17ac:	08 95       	ret

000017ae <strnlen>:
    17ae:	fc 01       	movw	r30, r24
    17b0:	61 50       	subi	r22, 0x01	; 1
    17b2:	70 40       	sbci	r23, 0x00	; 0
    17b4:	01 90       	ld	r0, Z+
    17b6:	01 10       	cpse	r0, r1
    17b8:	d8 f7       	brcc	.-10     	; 0x17b0 <strnlen+0x2>
    17ba:	80 95       	com	r24
    17bc:	90 95       	com	r25
    17be:	8e 0f       	add	r24, r30
    17c0:	9f 1f       	adc	r25, r31
    17c2:	08 95       	ret

000017c4 <fputc>:
    17c4:	0f 93       	push	r16
    17c6:	1f 93       	push	r17
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	8c 01       	movw	r16, r24
    17ce:	eb 01       	movw	r28, r22
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	81 ff       	sbrs	r24, 1
    17d4:	1b c0       	rjmp	.+54     	; 0x180c <fputc+0x48>
    17d6:	82 ff       	sbrs	r24, 2
    17d8:	0d c0       	rjmp	.+26     	; 0x17f4 <fputc+0x30>
    17da:	2e 81       	ldd	r18, Y+6	; 0x06
    17dc:	3f 81       	ldd	r19, Y+7	; 0x07
    17de:	8c 81       	ldd	r24, Y+4	; 0x04
    17e0:	9d 81       	ldd	r25, Y+5	; 0x05
    17e2:	28 17       	cp	r18, r24
    17e4:	39 07       	cpc	r19, r25
    17e6:	64 f4       	brge	.+24     	; 0x1800 <fputc+0x3c>
    17e8:	e8 81       	ld	r30, Y
    17ea:	f9 81       	ldd	r31, Y+1	; 0x01
    17ec:	01 93       	st	Z+, r16
    17ee:	f9 83       	std	Y+1, r31	; 0x01
    17f0:	e8 83       	st	Y, r30
    17f2:	06 c0       	rjmp	.+12     	; 0x1800 <fputc+0x3c>
    17f4:	e8 85       	ldd	r30, Y+8	; 0x08
    17f6:	f9 85       	ldd	r31, Y+9	; 0x09
    17f8:	80 2f       	mov	r24, r16
    17fa:	09 95       	icall
    17fc:	89 2b       	or	r24, r25
    17fe:	31 f4       	brne	.+12     	; 0x180c <fputc+0x48>
    1800:	8e 81       	ldd	r24, Y+6	; 0x06
    1802:	9f 81       	ldd	r25, Y+7	; 0x07
    1804:	01 96       	adiw	r24, 0x01	; 1
    1806:	9f 83       	std	Y+7, r25	; 0x07
    1808:	8e 83       	std	Y+6, r24	; 0x06
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <fputc+0x4c>
    180c:	0f ef       	ldi	r16, 0xFF	; 255
    180e:	1f ef       	ldi	r17, 0xFF	; 255
    1810:	c8 01       	movw	r24, r16
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	0f 91       	pop	r16
    181a:	08 95       	ret

0000181c <__ultoa_invert>:
    181c:	fa 01       	movw	r30, r20
    181e:	aa 27       	eor	r26, r26
    1820:	28 30       	cpi	r18, 0x08	; 8
    1822:	51 f1       	breq	.+84     	; 0x1878 <__ultoa_invert+0x5c>
    1824:	20 31       	cpi	r18, 0x10	; 16
    1826:	81 f1       	breq	.+96     	; 0x1888 <__ultoa_invert+0x6c>
    1828:	e8 94       	clt
    182a:	6f 93       	push	r22
    182c:	6e 7f       	andi	r22, 0xFE	; 254
    182e:	6e 5f       	subi	r22, 0xFE	; 254
    1830:	7f 4f       	sbci	r23, 0xFF	; 255
    1832:	8f 4f       	sbci	r24, 0xFF	; 255
    1834:	9f 4f       	sbci	r25, 0xFF	; 255
    1836:	af 4f       	sbci	r26, 0xFF	; 255
    1838:	b1 e0       	ldi	r27, 0x01	; 1
    183a:	3e d0       	rcall	.+124    	; 0x18b8 <__ultoa_invert+0x9c>
    183c:	b4 e0       	ldi	r27, 0x04	; 4
    183e:	3c d0       	rcall	.+120    	; 0x18b8 <__ultoa_invert+0x9c>
    1840:	67 0f       	add	r22, r23
    1842:	78 1f       	adc	r23, r24
    1844:	89 1f       	adc	r24, r25
    1846:	9a 1f       	adc	r25, r26
    1848:	a1 1d       	adc	r26, r1
    184a:	68 0f       	add	r22, r24
    184c:	79 1f       	adc	r23, r25
    184e:	8a 1f       	adc	r24, r26
    1850:	91 1d       	adc	r25, r1
    1852:	a1 1d       	adc	r26, r1
    1854:	6a 0f       	add	r22, r26
    1856:	71 1d       	adc	r23, r1
    1858:	81 1d       	adc	r24, r1
    185a:	91 1d       	adc	r25, r1
    185c:	a1 1d       	adc	r26, r1
    185e:	20 d0       	rcall	.+64     	; 0x18a0 <__ultoa_invert+0x84>
    1860:	09 f4       	brne	.+2      	; 0x1864 <__ultoa_invert+0x48>
    1862:	68 94       	set
    1864:	3f 91       	pop	r19
    1866:	2a e0       	ldi	r18, 0x0A	; 10
    1868:	26 9f       	mul	r18, r22
    186a:	11 24       	eor	r1, r1
    186c:	30 19       	sub	r19, r0
    186e:	30 5d       	subi	r19, 0xD0	; 208
    1870:	31 93       	st	Z+, r19
    1872:	de f6       	brtc	.-74     	; 0x182a <__ultoa_invert+0xe>
    1874:	cf 01       	movw	r24, r30
    1876:	08 95       	ret
    1878:	46 2f       	mov	r20, r22
    187a:	47 70       	andi	r20, 0x07	; 7
    187c:	40 5d       	subi	r20, 0xD0	; 208
    187e:	41 93       	st	Z+, r20
    1880:	b3 e0       	ldi	r27, 0x03	; 3
    1882:	0f d0       	rcall	.+30     	; 0x18a2 <__ultoa_invert+0x86>
    1884:	c9 f7       	brne	.-14     	; 0x1878 <__ultoa_invert+0x5c>
    1886:	f6 cf       	rjmp	.-20     	; 0x1874 <__ultoa_invert+0x58>
    1888:	46 2f       	mov	r20, r22
    188a:	4f 70       	andi	r20, 0x0F	; 15
    188c:	40 5d       	subi	r20, 0xD0	; 208
    188e:	4a 33       	cpi	r20, 0x3A	; 58
    1890:	18 f0       	brcs	.+6      	; 0x1898 <__ultoa_invert+0x7c>
    1892:	49 5d       	subi	r20, 0xD9	; 217
    1894:	31 fd       	sbrc	r19, 1
    1896:	40 52       	subi	r20, 0x20	; 32
    1898:	41 93       	st	Z+, r20
    189a:	02 d0       	rcall	.+4      	; 0x18a0 <__ultoa_invert+0x84>
    189c:	a9 f7       	brne	.-22     	; 0x1888 <__ultoa_invert+0x6c>
    189e:	ea cf       	rjmp	.-44     	; 0x1874 <__ultoa_invert+0x58>
    18a0:	b4 e0       	ldi	r27, 0x04	; 4
    18a2:	a6 95       	lsr	r26
    18a4:	97 95       	ror	r25
    18a6:	87 95       	ror	r24
    18a8:	77 95       	ror	r23
    18aa:	67 95       	ror	r22
    18ac:	ba 95       	dec	r27
    18ae:	c9 f7       	brne	.-14     	; 0x18a2 <__ultoa_invert+0x86>
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	61 05       	cpc	r22, r1
    18b4:	71 05       	cpc	r23, r1
    18b6:	08 95       	ret
    18b8:	9b 01       	movw	r18, r22
    18ba:	ac 01       	movw	r20, r24
    18bc:	0a 2e       	mov	r0, r26
    18be:	06 94       	lsr	r0
    18c0:	57 95       	ror	r21
    18c2:	47 95       	ror	r20
    18c4:	37 95       	ror	r19
    18c6:	27 95       	ror	r18
    18c8:	ba 95       	dec	r27
    18ca:	c9 f7       	brne	.-14     	; 0x18be <__ultoa_invert+0xa2>
    18cc:	62 0f       	add	r22, r18
    18ce:	73 1f       	adc	r23, r19
    18d0:	84 1f       	adc	r24, r20
    18d2:	95 1f       	adc	r25, r21
    18d4:	a0 1d       	adc	r26, r0
    18d6:	08 95       	ret

000018d8 <_exit>:
    18d8:	f8 94       	cli

000018da <__stop_program>:
    18da:	ff cf       	rjmp	.-2      	; 0x18da <__stop_program>
