
PrinterHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00001a5a  00001aee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800150  00800150  00001b3e  2**0
                  ALLOC
  3 .stab         00001014  00000000  00000000  00001b40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000315  00000000  00000000  00002b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003c8  00000000  00000000  00002e69  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000083b  00000000  00000000  00003231  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004f72  00000000  00000000  00003a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001c39  00000000  00000000  000089de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000040cb  00000000  00000000  0000a617  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000530  00000000  00000000  0000e6e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002377  00000000  00000000  0000ec14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000021b9  00000000  00000000  00010f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000430  00000000  00000000  00013144  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(PortStatus);
}
       0:	b2 c1       	rjmp	.+868    	; 0x366 <__ctors_end>

	return USB_Host_SendControlRequest(Buffer);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointNum)
{
       2:	00 00       	nop
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       4:	ce c1       	rjmp	.+924    	; 0x3a2 <__bad_interrupt>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       6:	00 00       	nop
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       8:	cc c1       	rjmp	.+920    	; 0x3a2 <__bad_interrupt>
       a:	00 00       	nop
       c:	ca c1       	rjmp	.+916    	; 0x3a2 <__bad_interrupt>
       e:	00 00       	nop
      10:	c8 c1       	rjmp	.+912    	; 0x3a2 <__bad_interrupt>
      12:	00 00       	nop
      14:	c6 c1       	rjmp	.+908    	; 0x3a2 <__bad_interrupt>
      16:	00 00       	nop
      18:	c4 c1       	rjmp	.+904    	; 0x3a2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c2 c1       	rjmp	.+900    	; 0x3a2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c0 c1       	rjmp	.+896    	; 0x3a2 <__bad_interrupt>
      22:	00 00       	nop
      24:	be c1       	rjmp	.+892    	; 0x3a2 <__bad_interrupt>
      26:	00 00       	nop
      28:	52 c7       	rjmp	.+3748   	; 0xece <__vector_10>
      2a:	00 00       	nop
      2c:	ba c1       	rjmp	.+884    	; 0x3a2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b8 c1       	rjmp	.+880    	; 0x3a2 <__bad_interrupt>
      32:	00 00       	nop
      34:	b6 c1       	rjmp	.+876    	; 0x3a2 <__bad_interrupt>
      36:	00 00       	nop
      38:	b4 c1       	rjmp	.+872    	; 0x3a2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b2 c1       	rjmp	.+868    	; 0x3a2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b0 c1       	rjmp	.+864    	; 0x3a2 <__bad_interrupt>
      42:	00 00       	nop
      44:	ae c1       	rjmp	.+860    	; 0x3a2 <__bad_interrupt>
      46:	00 00       	nop
      48:	ac c1       	rjmp	.+856    	; 0x3a2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a8 c1       	rjmp	.+848    	; 0x3a2 <__bad_interrupt>
      52:	00 00       	nop
      54:	a6 c1       	rjmp	.+844    	; 0x3a2 <__bad_interrupt>
      56:	00 00       	nop
      58:	a4 c1       	rjmp	.+840    	; 0x3a2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a2 c1       	rjmp	.+836    	; 0x3a2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a0 c1       	rjmp	.+832    	; 0x3a2 <__bad_interrupt>
      62:	00 00       	nop
      64:	9e c1       	rjmp	.+828    	; 0x3a2 <__bad_interrupt>
      66:	00 00       	nop
      68:	9c c1       	rjmp	.+824    	; 0x3a2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9a c1       	rjmp	.+820    	; 0x3a2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	98 c1       	rjmp	.+816    	; 0x3a2 <__bad_interrupt>
      72:	00 00       	nop
      74:	96 c1       	rjmp	.+812    	; 0x3a2 <__bad_interrupt>
      76:	00 00       	nop
      78:	94 c1       	rjmp	.+808    	; 0x3a2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	92 c1       	rjmp	.+804    	; 0x3a2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	90 c1       	rjmp	.+800    	; 0x3a2 <__bad_interrupt>
      82:	00 00       	nop
      84:	8e c1       	rjmp	.+796    	; 0x3a2 <__bad_interrupt>
      86:	00 00       	nop
      88:	8c c1       	rjmp	.+792    	; 0x3a2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8a c1       	rjmp	.+788    	; 0x3a2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	88 c1       	rjmp	.+784    	; 0x3a2 <__bad_interrupt>
      92:	00 00       	nop
      94:	86 c1       	rjmp	.+780    	; 0x3a2 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4179>:
      98:	54 65 73 74 20 50 61 67 65 20 53 65 6e 74 2e 0d     Test Page Sent..
      a8:	0a 00                                               ..

000000aa <__c.4177>:
      aa:	1b 5b 33 31 6d 45 72 72 6f 72 20 53 65 6e 64 69     .[31mError Sendi
      ba:	6e 67 20 54 65 73 74 20 50 61 67 65 2e 0d 0a 20     ng Test Page... 
      ca:	2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25     -- Error Code: %
      da:	64 0d 0a 1b 5b 33 37 6d 00                          d...[37m.

000000e3 <__c.4175>:
      e3:	53 65 6e 64 69 6e 67 20 54 65 73 74 20 50 61 67     Sending Test Pag
      f3:	65 20 28 25 64 20 62 79 74 65 73 29 2e 2e 2e 0d     e (%d bytes)....
     103:	0a 00                                               ..

00000105 <__c.4170>:
     105:	50 72 69 6e 74 65 72 20 45 6e 75 6d 65 72 61 74     Printer Enumerat
     115:	65 64 2e 0d 0a 00                                   ed....

0000011b <__c.4168>:
     11b:	50 72 69 6e 74 65 72 20 44 65 76 69 63 65 20 49     Printer Device I
     12b:	44 3a 20 25 73 0d 0a 00                             D: %s...

00000133 <__c.4166>:
     133:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     143:	6f 72 20 28 47 65 74 20 44 65 76 69 63 65 20 49     or (Get Device I
     153:	44 29 2e 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     D)... -- Error C
     163:	6f 64 65 3a 20 25 64 0d 0a 1b 5b 33 37 6d 00        ode: %d...[37m.

00000172 <__c.4163>:
     172:	52 65 74 72 69 65 76 69 6e 67 20 44 65 76 69 63     Retrieving Devic
     182:	65 20 49 44 2e 2e 2e 0d 0a 00                       e ID......

0000018c <__c.4161>:
     18c:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     19c:	6f 72 20 28 53 65 74 20 49 6e 74 65 72 66 61 63     or (Set Interfac
     1ac:	65 29 2e 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     e)... -- Error C
     1bc:	6f 64 65 3a 20 25 64 0d 0a 1b 5b 33 37 6d 00        ode: %d...[37m.

000001cb <__c.4158>:
     1cb:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1db:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     1eb:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1fb:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     20b:	37 6d 00                                            7m.

0000020e <__c.4155>:
     20e:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     21e:	25 64 0d 0a 00                                      %d...

00000223 <__c.4153>:
     223:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     233:	69 63 65 2e 0d 0a 00                                ice....

0000023a <__c.4151>:
     23a:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     24a:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     25a:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000264 <__c.4149>:
     264:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     274:	61 74 61 2e 0d 0a 00                                ata....

0000027b <__c.4138>:
     27b:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     28b:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     29b:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     2ab:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     2bb:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     2cb:	1b 5b 33 37 6d 00                                   .[37m.

000002d1 <__c.4130>:
     2d1:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     2e1:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     2f1:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000300 <__c.4122>:
     300:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     310:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     320:	00                                                  .

00000321 <__c.4117>:
     321:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     331:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

0000033e <__c.4103>:
     33e:	1b 5b 33 36 6d 50 72 69 6e 74 65 72 20 48 6f 73     .[36mPrinter Hos
     34e:	74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d     t Demo running..
     35e:	0a 1b 5b 33 37 6d 00 00                             ..[37m..

00000366 <__ctors_end>:
     366:	11 24       	eor	r1, r1
     368:	1f be       	out	0x3f, r1	; 63
     36a:	cf ef       	ldi	r28, 0xFF	; 255
     36c:	d0 e2       	ldi	r29, 0x20	; 32
     36e:	de bf       	out	0x3e, r29	; 62
     370:	cd bf       	out	0x3d, r28	; 61

00000372 <__do_copy_data>:
     372:	11 e0       	ldi	r17, 0x01	; 1
     374:	a0 e0       	ldi	r26, 0x00	; 0
     376:	b1 e0       	ldi	r27, 0x01	; 1
     378:	ea e5       	ldi	r30, 0x5A	; 90
     37a:	fa e1       	ldi	r31, 0x1A	; 26
     37c:	00 e0       	ldi	r16, 0x00	; 0
     37e:	0b bf       	out	0x3b, r16	; 59
     380:	02 c0       	rjmp	.+4      	; 0x386 <__do_copy_data+0x14>
     382:	07 90       	elpm	r0, Z+
     384:	0d 92       	st	X+, r0
     386:	a0 35       	cpi	r26, 0x50	; 80
     388:	b1 07       	cpc	r27, r17
     38a:	d9 f7       	brne	.-10     	; 0x382 <__do_copy_data+0x10>

0000038c <__do_clear_bss>:
     38c:	11 e0       	ldi	r17, 0x01	; 1
     38e:	a0 e5       	ldi	r26, 0x50	; 80
     390:	b1 e0       	ldi	r27, 0x01	; 1
     392:	01 c0       	rjmp	.+2      	; 0x396 <.do_clear_bss_start>

00000394 <.do_clear_bss_loop>:
     394:	1d 92       	st	X+, r1

00000396 <.do_clear_bss_start>:
     396:	a5 36       	cpi	r26, 0x65	; 101
     398:	b1 07       	cpc	r27, r17
     39a:	e1 f7       	brne	.-8      	; 0x394 <.do_clear_bss_loop>
     39c:	8e d1       	rcall	.+796    	; 0x6ba <main>
     39e:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	2e ce       	rjmp	.-932    	; 0x0 <__vectors>

000003a4 <EVENT_USB_Host_DeviceEnumerationComplete>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     3a4:	8b b1       	in	r24, 0x0b	; 11
     3a6:	8f 70       	andi	r24, 0x0F	; 15
     3a8:	80 66       	ori	r24, 0x60	; 96
     3aa:	8b b9       	out	0x0b, r24	; 11
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     3ac:	08 95       	ret

000003ae <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	93 e0       	ldi	r25, 0x03	; 3
     3b2:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <puts_P>
     3b6:	8b b1       	in	r24, 0x0b	; 11
     3b8:	8f 70       	andi	r24, 0x0F	; 15
     3ba:	80 61       	ori	r24, 0x10	; 16
     3bc:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     3be:	08 95       	ret

000003c0 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     3c0:	81 e2       	ldi	r24, 0x21	; 33
     3c2:	93 e0       	ldi	r25, 0x03	; 3
     3c4:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <puts_P>
     3c8:	8b b1       	in	r24, 0x0b	; 11
     3ca:	8f 70       	andi	r24, 0x0F	; 15
     3cc:	80 6a       	ori	r24, 0xA0	; 160
     3ce:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     3d0:	08 95       	ret

000003d2 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     3d2:	90 91 5e 01 	lds	r25, 0x015E
     3d6:	2d b7       	in	r18, 0x3d	; 61
     3d8:	3e b7       	in	r19, 0x3e	; 62
     3da:	28 50       	subi	r18, 0x08	; 8
     3dc:	30 40       	sbci	r19, 0x00	; 0
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	f8 94       	cli
     3e2:	3e bf       	out	0x3e, r19	; 62
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	2d bf       	out	0x3d, r18	; 61
     3e8:	ed b7       	in	r30, 0x3d	; 61
     3ea:	fe b7       	in	r31, 0x3e	; 62
     3ec:	31 96       	adiw	r30, 0x01	; 1
     3ee:	2b e7       	ldi	r18, 0x7B	; 123
     3f0:	32 e0       	ldi	r19, 0x02	; 2
     3f2:	ad b7       	in	r26, 0x3d	; 61
     3f4:	be b7       	in	r27, 0x3e	; 62
     3f6:	12 96       	adiw	r26, 0x02	; 2
     3f8:	3c 93       	st	X, r19
     3fa:	2e 93       	st	-X, r18
     3fc:	11 97       	sbiw	r26, 0x01	; 1
     3fe:	82 83       	std	Z+2, r24	; 0x02
     400:	13 82       	std	Z+3, r1	; 0x03
     402:	64 83       	std	Z+4, r22	; 0x04
     404:	15 82       	std	Z+5, r1	; 0x05
     406:	96 83       	std	Z+6, r25	; 0x06
     408:	17 82       	std	Z+7, r1	; 0x07
     40a:	0e 94 32 0a 	call	0x1464	; 0x1464 <printf_P>
     40e:	8b b1       	in	r24, 0x0b	; 11
     410:	8f 70       	andi	r24, 0x0F	; 15
     412:	80 69       	ori	r24, 0x90	; 144
     414:	8b b9       	out	0x0b, r24	; 11
     416:	2d b7       	in	r18, 0x3d	; 61
     418:	3e b7       	in	r19, 0x3e	; 62
     41a:	28 5f       	subi	r18, 0xF8	; 248
     41c:	3f 4f       	sbci	r19, 0xFF	; 255
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	f8 94       	cli
     422:	3e bf       	out	0x3e, r19	; 62
     424:	0f be       	out	0x3f, r0	; 63
     426:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     428:	08 95       	ret

0000042a <USB_Printer_Host>:

/** Task to set the configuration of the attached device after it has been enumerated, and to send some test page
 *  data to the attached printer.
 */
void USB_Printer_Host(void)
{
     42a:	ef 92       	push	r14
     42c:	ff 92       	push	r15
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
     432:	df 93       	push	r29
     434:	cf 93       	push	r28
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
     43a:	c5 55       	subi	r28, 0x55	; 85
     43c:	d1 40       	sbci	r29, 0x01	; 1
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	f8 94       	cli
     442:	de bf       	out	0x3e, r29	; 62
     444:	0f be       	out	0x3f, r0	; 63
     446:	cd bf       	out	0x3d, r28	; 61
	uint8_t ErrorCode;

	switch (USB_HostState)
     448:	10 91 5e 01 	lds	r17, 0x015E
     44c:	1b 30       	cpi	r17, 0x0B	; 11
     44e:	21 f0       	breq	.+8      	; 0x458 <USB_Printer_Host+0x2e>
     450:	1c 30       	cpi	r17, 0x0C	; 12
     452:	09 f0       	breq	.+2      	; 0x456 <USB_Printer_Host+0x2c>
     454:	d3 c0       	rjmp	.+422    	; 0x5fc <USB_Printer_Host+0x1d2>
     456:	92 c0       	rjmp	.+292    	; 0x57c <USB_Printer_Host+0x152>
	{
		case HOST_STATE_Addressed:
			puts_P(PSTR("Getting Config Data.\r\n"));
     458:	84 e6       	ldi	r24, 0x64	; 100
     45a:	92 e0       	ldi	r25, 0x02	; 2
     45c:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <puts_P>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     460:	10 92 a7 00 	sts	0x00A7, r1

			/* Select the control pipe for the request transfer */
			Pipe_SelectPipe(PIPE_CONTROLPIPE);

			/* Get and process the configuration descriptor data */
			if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     464:	57 d1       	rcall	.+686    	; 0x714 <ProcessConfigurationDescriptor>
     466:	08 2f       	mov	r16, r24
     468:	88 23       	and	r24, r24
     46a:	c1 f0       	breq	.+48     	; 0x49c <USB_Printer_Host+0x72>
			{
				if (ErrorCode == ControlError)
     46c:	81 30       	cpi	r24, 0x01	; 1
     46e:	19 f4       	brne	.+6      	; 0x476 <USB_Printer_Host+0x4c>
				  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     470:	8a e3       	ldi	r24, 0x3A	; 58
     472:	92 e0       	ldi	r25, 0x02	; 2
     474:	02 c0       	rjmp	.+4      	; 0x47a <USB_Printer_Host+0x50>
				else
				  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     476:	83 e2       	ldi	r24, 0x23	; 35
     478:	92 e0       	ldi	r25, 0x02	; 2
     47a:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <puts_P>

				printf_P(PSTR(" -- Error Code: %d\r\n"), ErrorCode);
     47e:	00 d0       	rcall	.+0      	; 0x480 <USB_Printer_Host+0x56>
     480:	00 d0       	rcall	.+0      	; 0x482 <USB_Printer_Host+0x58>
     482:	ed b7       	in	r30, 0x3d	; 61
     484:	fe b7       	in	r31, 0x3e	; 62
     486:	31 96       	adiw	r30, 0x01	; 1
     488:	8e e0       	ldi	r24, 0x0E	; 14
     48a:	92 e0       	ldi	r25, 0x02	; 2
     48c:	ad b7       	in	r26, 0x3d	; 61
     48e:	be b7       	in	r27, 0x3e	; 62
     490:	12 96       	adiw	r26, 0x02	; 2
     492:	9c 93       	st	X, r25
     494:	8e 93       	st	-X, r24
     496:	11 97       	sbiw	r26, 0x01	; 1
     498:	02 83       	std	Z+2, r16	; 0x02
     49a:	13 c0       	rjmp	.+38     	; 0x4c2 <USB_Printer_Host+0x98>
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
			if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	e0 d2       	rcall	.+1472   	; 0xa60 <USB_Host_SetDeviceConfiguration>
     4a0:	28 2f       	mov	r18, r24
     4a2:	88 23       	and	r24, r24
     4a4:	d9 f0       	breq	.+54     	; 0x4dc <USB_Printer_Host+0xb2>
			{
				printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     4a6:	00 d0       	rcall	.+0      	; 0x4a8 <USB_Printer_Host+0x7e>
     4a8:	00 d0       	rcall	.+0      	; 0x4aa <USB_Printer_Host+0x80>
     4aa:	ed b7       	in	r30, 0x3d	; 61
     4ac:	fe b7       	in	r31, 0x3e	; 62
     4ae:	31 96       	adiw	r30, 0x01	; 1
     4b0:	8b ec       	ldi	r24, 0xCB	; 203
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	ad b7       	in	r26, 0x3d	; 61
     4b6:	be b7       	in	r27, 0x3e	; 62
     4b8:	12 96       	adiw	r26, 0x02	; 2
     4ba:	9c 93       	st	X, r25
     4bc:	8e 93       	st	-X, r24
     4be:	11 97       	sbiw	r26, 0x01	; 1
     4c0:	22 83       	std	Z+2, r18	; 0x02
     4c2:	13 82       	std	Z+3, r1	; 0x03
     4c4:	cf d7       	rcall	.+3998   	; 0x1464 <printf_P>
     4c6:	8b b1       	in	r24, 0x0b	; 11
     4c8:	8f 70       	andi	r24, 0x0F	; 15
     4ca:	80 69       	ori	r24, 0x90	; 144
     4cc:	8b b9       	out	0x0b, r24	; 11

				/* Indicate error via status LEDs */
				LEDs_SetAllLEDs(LEDMASK_USB_ERROR);

				/* Wait until USB device disconnected */
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     4ce:	10 92 5e 01 	sts	0x015E, r1
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	90 c0       	rjmp	.+288    	; 0x5fc <USB_Printer_Host+0x1d2>
				break;
			}

			/* Some printers use alternate settings to determine the communication protocol used - if so, send a SetInterface
			 * request to switch to the interface alternate setting with the Bidirectional protocol */
			if (PrinterAltSetting)
     4dc:	20 91 53 01 	lds	r18, 0x0153
     4e0:	22 23       	and	r18, r18
     4e2:	09 f1       	breq	.+66     	; 0x526 <USB_Printer_Host+0xfc>
			{
				USB_ControlRequest = (USB_Request_Header_t)
     4e4:	90 91 54 01 	lds	r25, 0x0154
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	80 93 56 01 	sts	0x0156, r24
     4ee:	10 93 57 01 	sts	0x0157, r17
     4f2:	20 93 58 01 	sts	0x0158, r18
     4f6:	10 92 59 01 	sts	0x0159, r1
     4fa:	90 93 5a 01 	sts	0x015A, r25
     4fe:	10 92 5b 01 	sts	0x015B, r1
     502:	10 92 5d 01 	sts	0x015D, r1
     506:	10 92 5c 01 	sts	0x015C, r1
						.wValue        = PrinterAltSetting,
						.wIndex        = PrinterInterfaceNumber,
						.wLength       = 0,
					};

				if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	37 d6       	rcall	.+3182   	; 0x117e <USB_Host_SendControlRequest>
     510:	28 2f       	mov	r18, r24
     512:	88 23       	and	r24, r24
     514:	41 f0       	breq	.+16     	; 0x526 <USB_Printer_Host+0xfc>
				{
					printf_P(PSTR(ESC_FG_RED "Control Error (Set Interface).\r\n"
     516:	00 d0       	rcall	.+0      	; 0x518 <USB_Printer_Host+0xee>
     518:	00 d0       	rcall	.+0      	; 0x51a <USB_Printer_Host+0xf0>
     51a:	ed b7       	in	r30, 0x3d	; 61
     51c:	fe b7       	in	r31, 0x3e	; 62
     51e:	31 96       	adiw	r30, 0x01	; 1
     520:	8c e8       	ldi	r24, 0x8C	; 140
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	c7 cf       	rjmp	.-114    	; 0x4b4 <USB_Printer_Host+0x8a>
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}
			}

			puts_P(PSTR("Retrieving Device ID...\r\n"));
     526:	82 e7       	ldi	r24, 0x72	; 114
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	be d7       	rcall	.+3964   	; 0x14a8 <puts_P>

			char DeviceIDString[300];
			if ((ErrorCode = Printer_GetDeviceID(DeviceIDString, sizeof(DeviceIDString))) != HOST_SENDCONTROL_Successful)
     52c:	8e 01       	movw	r16, r28
     52e:	06 5d       	subi	r16, 0xD6	; 214
     530:	1f 4f       	sbci	r17, 0xFF	; 255
     532:	c8 01       	movw	r24, r16
     534:	6c e2       	ldi	r22, 0x2C	; 44
     536:	71 e0       	ldi	r23, 0x01	; 1
     538:	7f d1       	rcall	.+766    	; 0x838 <Printer_GetDeviceID>
     53a:	28 2f       	mov	r18, r24
     53c:	88 23       	and	r24, r24
     53e:	41 f0       	breq	.+16     	; 0x550 <USB_Printer_Host+0x126>
			{
				printf_P(PSTR(ESC_FG_RED "Control Error (Get Device ID).\r\n"
     540:	00 d0       	rcall	.+0      	; 0x542 <USB_Printer_Host+0x118>
     542:	00 d0       	rcall	.+0      	; 0x544 <USB_Printer_Host+0x11a>
     544:	ed b7       	in	r30, 0x3d	; 61
     546:	fe b7       	in	r31, 0x3e	; 62
     548:	31 96       	adiw	r30, 0x01	; 1
     54a:	83 e3       	ldi	r24, 0x33	; 51
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	b2 cf       	rjmp	.-156    	; 0x4b4 <USB_Printer_Host+0x8a>
				/* Wait until USB device disconnected */
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			printf_P(PSTR("Printer Device ID: %s\r\n"), DeviceIDString);
     550:	00 d0       	rcall	.+0      	; 0x552 <USB_Printer_Host+0x128>
     552:	00 d0       	rcall	.+0      	; 0x554 <USB_Printer_Host+0x12a>
     554:	8b e1       	ldi	r24, 0x1B	; 27
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	ed b7       	in	r30, 0x3d	; 61
     55a:	fe b7       	in	r31, 0x3e	; 62
     55c:	92 83       	std	Z+2, r25	; 0x02
     55e:	81 83       	std	Z+1, r24	; 0x01
     560:	14 83       	std	Z+4, r17	; 0x04
     562:	03 83       	std	Z+3, r16	; 0x03
     564:	7f d7       	rcall	.+3838   	; 0x1464 <printf_P>

			puts_P(PSTR("Printer Enumerated.\r\n"));
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	85 e0       	ldi	r24, 0x05	; 5
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	9a d7       	rcall	.+3892   	; 0x14a8 <puts_P>

			USB_HostState = HOST_STATE_Configured;
     574:	8c e0       	ldi	r24, 0x0C	; 12
     576:	80 93 5e 01 	sts	0x015E, r24
     57a:	40 c0       	rjmp	.+128    	; 0x5fc <USB_Printer_Host+0x1d2>
     57c:	8b b1       	in	r24, 0x0b	; 11
     57e:	8f 70       	andi	r24, 0x0F	; 15
     580:	80 62       	ori	r24, 0x20	; 32
     582:	8b b9       	out	0x0b, r24	; 11
			break;
		case HOST_STATE_Configured:
			/* Indicate device busy via the status LEDs */
			LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

			char  TestPageData[]    = "\033%-12345X\033E" "LUFA PCL Test Page" "\033E\033%-12345X";
     584:	de 01       	movw	r26, r28
     586:	11 96       	adiw	r26, 0x01	; 1
     588:	e0 e0       	ldi	r30, 0x00	; 0
     58a:	f1 e0       	ldi	r31, 0x01	; 1
     58c:	89 e2       	ldi	r24, 0x29	; 41
     58e:	01 90       	ld	r0, Z+
     590:	0d 92       	st	X+, r0
     592:	81 50       	subi	r24, 0x01	; 1
     594:	e1 f7       	brne	.-8      	; 0x58e <USB_Printer_Host+0x164>
			uint16_t TestPageLength = strlen(TestPageData);
     596:	7e 01       	movw	r14, r28
     598:	08 94       	sec
     59a:	e1 1c       	adc	r14, r1
     59c:	f1 1c       	adc	r15, r1
     59e:	d7 01       	movw	r26, r14
     5a0:	0d 90       	ld	r0, X+
     5a2:	00 20       	and	r0, r0
     5a4:	e9 f7       	brne	.-6      	; 0x5a0 <USB_Printer_Host+0x176>
     5a6:	8d 01       	movw	r16, r26
     5a8:	01 50       	subi	r16, 0x01	; 1
     5aa:	10 40       	sbci	r17, 0x00	; 0
     5ac:	0e 19       	sub	r16, r14
     5ae:	1f 09       	sbc	r17, r15

			printf_P(PSTR("Sending Test Page (%d bytes)...\r\n"), TestPageLength);
     5b0:	00 d0       	rcall	.+0      	; 0x5b2 <USB_Printer_Host+0x188>
     5b2:	00 d0       	rcall	.+0      	; 0x5b4 <USB_Printer_Host+0x18a>
     5b4:	83 ee       	ldi	r24, 0xE3	; 227
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	ed b7       	in	r30, 0x3d	; 61
     5ba:	fe b7       	in	r31, 0x3e	; 62
     5bc:	92 83       	std	Z+2, r25	; 0x02
     5be:	81 83       	std	Z+1, r24	; 0x01
     5c0:	14 83       	std	Z+4, r17	; 0x04
     5c2:	03 83       	std	Z+3, r16	; 0x03
     5c4:	4f d7       	rcall	.+3742   	; 0x1464 <printf_P>

			if ((ErrorCode = Printer_SendData(&TestPageData, TestPageLength)) != PIPE_RWSTREAM_NoError)
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	c7 01       	movw	r24, r14
     5d0:	b8 01       	movw	r22, r16
     5d2:	92 d1       	rcall	.+804    	; 0x8f8 <Printer_SendData>
     5d4:	28 2f       	mov	r18, r24
     5d6:	88 23       	and	r24, r24
     5d8:	41 f0       	breq	.+16     	; 0x5ea <USB_Printer_Host+0x1c0>
			{
				printf_P(PSTR(ESC_FG_RED "Error Sending Test Page.\r\n"
     5da:	00 d0       	rcall	.+0      	; 0x5dc <USB_Printer_Host+0x1b2>
     5dc:	00 d0       	rcall	.+0      	; 0x5de <USB_Printer_Host+0x1b4>
     5de:	ed b7       	in	r30, 0x3d	; 61
     5e0:	fe b7       	in	r31, 0x3e	; 62
     5e2:	31 96       	adiw	r30, 0x01	; 1
     5e4:	8a ea       	ldi	r24, 0xAA	; 170
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	65 cf       	rjmp	.-310    	; 0x4b4 <USB_Printer_Host+0x8a>
				/* Wait until USB device disconnected */
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			puts_P(PSTR("Test Page Sent.\r\n"));
     5ea:	88 e9       	ldi	r24, 0x98	; 152
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	5c d7       	rcall	.+3768   	; 0x14a8 <puts_P>
     5f0:	8b b1       	in	r24, 0x0b	; 11
     5f2:	8f 70       	andi	r24, 0x0F	; 15
     5f4:	80 66       	ori	r24, 0x60	; 96
     5f6:	8b b9       	out	0x0b, r24	; 11

			/* Indicate device no longer busy */
			LEDs_SetAllLEDs(LEDMASK_USB_READY);

			USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     5f8:	10 92 5e 01 	sts	0x015E, r1
			break;
	}
}
     5fc:	cb 5a       	subi	r28, 0xAB	; 171
     5fe:	de 4f       	sbci	r29, 0xFE	; 254
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	f8 94       	cli
     604:	de bf       	out	0x3e, r29	; 62
     606:	0f be       	out	0x3f, r0	; 63
     608:	cd bf       	out	0x3d, r28	; 61
     60a:	cf 91       	pop	r28
     60c:	df 91       	pop	r29
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	ff 90       	pop	r15
     614:	ef 90       	pop	r14
     616:	08 95       	ret

00000618 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     618:	1f 93       	push	r17
     61a:	18 2f       	mov	r17, r24
	USB_ShutDown();
     61c:	33 d4       	rcall	.+2150   	; 0xe84 <USB_ShutDown>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     61e:	00 d0       	rcall	.+0      	; 0x620 <EVENT_USB_Host_HostError+0x8>
     620:	00 d0       	rcall	.+0      	; 0x622 <EVENT_USB_Host_HostError+0xa>
     622:	ed b7       	in	r30, 0x3d	; 61
     624:	fe b7       	in	r31, 0x3e	; 62
     626:	31 96       	adiw	r30, 0x01	; 1
     628:	81 ed       	ldi	r24, 0xD1	; 209
     62a:	92 e0       	ldi	r25, 0x02	; 2
     62c:	ad b7       	in	r26, 0x3d	; 61
     62e:	be b7       	in	r27, 0x3e	; 62
     630:	12 96       	adiw	r26, 0x02	; 2
     632:	9c 93       	st	X, r25
     634:	8e 93       	st	-X, r24
     636:	11 97       	sbiw	r26, 0x01	; 1
     638:	12 83       	std	Z+2, r17	; 0x02
     63a:	13 82       	std	Z+3, r1	; 0x03
     63c:	13 d7       	rcall	.+3622   	; 0x1464 <printf_P>
     63e:	8b b1       	in	r24, 0x0b	; 11
     640:	8f 70       	andi	r24, 0x0F	; 15
     642:	80 69       	ori	r24, 0x90	; 144
     644:	8b b9       	out	0x0b, r24	; 11
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	ff cf       	rjmp	.-2      	; 0x64e <EVENT_USB_Host_HostError+0x36>

00000650 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     650:	84 b7       	in	r24, 0x34	; 52
     652:	87 7f       	andi	r24, 0xF7	; 247
     654:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     656:	38 e1       	ldi	r19, 0x18	; 24
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	f8 94       	cli
     65c:	30 93 60 00 	sts	0x0060, r19
     660:	10 92 60 00 	sts	0x0060, r1
     664:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	20 e8       	ldi	r18, 0x80	; 128
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	20 93 61 00 	sts	0x0061, r18
     674:	80 93 61 00 	sts	0x0061, r24
     678:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     67a:	83 e3       	ldi	r24, 0x33	; 51
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	90 93 cd 00 	sts	0x00CD, r25
     682:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     686:	86 e0       	ldi	r24, 0x06	; 6
     688:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     68c:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     690:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     694:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     696:	5a 9a       	sbi	0x0b, 2	; 11
			static inline void SerialStream_Init(const uint32_t BaudRate,
			                                     const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);

				stdout = &USARTStream;
     698:	82 e4       	ldi	r24, 0x42	; 66
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	90 93 62 01 	sts	0x0162, r25
     6a0:	80 93 61 01 	sts	0x0161, r24
				stdin  = &USARTStream;
     6a4:	90 93 60 01 	sts	0x0160, r25
     6a8:	80 93 5f 01 	sts	0x015F, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     6ac:	8a b1       	in	r24, 0x0a	; 10
     6ae:	80 6f       	ori	r24, 0xF0	; 240
     6b0:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     6b2:	8b b1       	in	r24, 0x0b	; 11
     6b4:	8f 70       	andi	r24, 0x0F	; 15
     6b6:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	SerialStream_Init(9600, false);
	LEDs_Init();
	USB_Init();
}
     6b8:	dc c3       	rjmp	.+1976   	; 0xe72 <USB_Init>

000006ba <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     6ba:	ca df       	rcall	.-108    	; 0x650 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     6bc:	8b b1       	in	r24, 0x0b	; 11
     6be:	8f 70       	andi	r24, 0x0F	; 15
     6c0:	80 61       	ori	r24, 0x10	; 16
     6c2:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);

	puts_P(PSTR(ESC_FG_CYAN "Printer Host Demo running.\r\n" ESC_FG_WHITE));
     6c4:	8e e3       	ldi	r24, 0x3E	; 62
     6c6:	93 e0       	ldi	r25, 0x03	; 3
     6c8:	ef d6       	rcall	.+3550   	; 0x14a8 <puts_P>
	sei();
     6ca:	78 94       	sei

	for (;;)
	{
		USB_Printer_Host();
     6cc:	ae de       	rcall	.-676    	; 0x42a <USB_Printer_Host>
		USB_USBTask();
     6ce:	8c d6       	rcall	.+3352   	; 0x13e8 <USB_USBTask>
     6d0:	fd cf       	rjmp	.-6      	; 0x6cc <main+0x12>

000006d2 <DComp_NextBidirectionalPrinterInterface>:
 *  aborting the search if the end of the descriptors is found.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextBidirectionalPrinterInterface(void* CurrentDescriptor)
{
     6d2:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     6d4:	81 81       	ldd	r24, Z+1	; 0x01
     6d6:	84 30       	cpi	r24, 0x04	; 4
     6d8:	59 f4       	brne	.+22     	; 0x6f0 <DComp_NextBidirectionalPrinterInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the descriptor class, subclass and protocol, break out if correct value interface found */
		if ((Interface->Class    == PRNT_CSCP_PrinterClass)    &&
     6da:	85 81       	ldd	r24, Z+5	; 0x05
     6dc:	87 30       	cpi	r24, 0x07	; 7
     6de:	41 f4       	brne	.+16     	; 0x6f0 <DComp_NextBidirectionalPrinterInterface+0x1e>
     6e0:	86 81       	ldd	r24, Z+6	; 0x06
     6e2:	81 30       	cpi	r24, 0x01	; 1
     6e4:	29 f4       	brne	.+10     	; 0x6f0 <DComp_NextBidirectionalPrinterInterface+0x1e>
     6e6:	87 81       	ldd	r24, Z+7	; 0x07
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	11 f4       	brne	.+4      	; 0x6f0 <DComp_NextBidirectionalPrinterInterface+0x1e>
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	08 95       	ret
     6f0:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     6f2:	08 95       	ret

000006f4 <DComp_NextPrinterInterfaceBulkDataEndpoint>:
 *  search if another interface descriptor is found before the next endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextPrinterInterfaceBulkDataEndpoint(void* CurrentDescriptor)
{
     6f4:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     6f6:	81 81       	ldd	r24, Z+1	; 0x01
     6f8:	85 30       	cpi	r24, 0x05	; 5
     6fa:	31 f4       	brne	.+12     	; 0x708 <DComp_NextPrinterInterfaceBulkDataEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
     6fc:	83 81       	ldd	r24, Z+3	; 0x03
     6fe:	83 70       	andi	r24, 0x03	; 3
     700:	82 30       	cpi	r24, 0x02	; 2
     702:	31 f4       	brne	.+12     	; 0x710 <DComp_NextPrinterInterfaceBulkDataEndpoint+0x1c>
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     708:	84 30       	cpi	r24, 0x04	; 4
     70a:	11 f4       	brne	.+4      	; 0x710 <DComp_NextPrinterInterfaceBulkDataEndpoint+0x1c>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	08 95       	ret
     710:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     712:	08 95       	ret

00000714 <ProcessConfigurationDescriptor>:
 *  This routine searches for a bidirectional Printer interface descriptor containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref PrinterHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     714:	8f 92       	push	r8
     716:	9f 92       	push	r9
     718:	af 92       	push	r10
     71a:	bf 92       	push	r11
     71c:	cf 92       	push	r12
     71e:	df 92       	push	r13
     720:	ef 92       	push	r14
     722:	ff 92       	push	r15
     724:	0f 93       	push	r16
     726:	1f 93       	push	r17
     728:	df 93       	push	r29
     72a:	cf 93       	push	r28
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	c4 50       	subi	r28, 0x04	; 4
     732:	d2 40       	sbci	r29, 0x02	; 2
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	f8 94       	cli
     738:	de bf       	out	0x3e, r29	; 62
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     73e:	ae 01       	movw	r20, r28
     740:	4b 5f       	subi	r20, 0xFB	; 251
     742:	5f 4f       	sbci	r21, 0xFF	; 255
     744:	5a 83       	std	Y+2, r21	; 0x02
     746:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Interface_t* PrinterInterface = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint   = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint  = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     748:	83 e0       	ldi	r24, 0x03	; 3
     74a:	a8 2e       	mov	r10, r24
     74c:	b1 2c       	mov	r11, r1
     74e:	ac 0e       	add	r10, r28
     750:	bd 1e       	adc	r11, r29
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	b5 01       	movw	r22, r10
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	32 e0       	ldi	r19, 0x02	; 2
     75a:	8d d4       	rcall	.+2330   	; 0x1076 <USB_Host_GetDeviceConfigDescriptor>
     75c:	85 30       	cpi	r24, 0x05	; 5
     75e:	29 f0       	breq	.+10     	; 0x76a <ProcessConfigurationDescriptor+0x56>
     760:	86 30       	cpi	r24, 0x06	; 6
     762:	89 f0       	breq	.+34     	; 0x786 <ProcessConfigurationDescriptor+0x72>
     764:	88 23       	and	r24, r24
     766:	19 f0       	breq	.+6      	; 0x76e <ProcessConfigurationDescriptor+0x5a>
     768:	10 c0       	rjmp	.+32     	; 0x78a <ProcessConfigurationDescriptor+0x76>
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	51 c0       	rjmp	.+162    	; 0x810 <ProcessConfigurationDescriptor+0xfc>
     76e:	00 e0       	ldi	r16, 0x00	; 0
     770:	10 e0       	ldi	r17, 0x00	; 0
     772:	ee 24       	eor	r14, r14
     774:	ff 24       	eor	r15, r15
     776:	cc 24       	eor	r12, r12
     778:	dd 24       	eor	r13, r13
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(PrinterInterface) ||
     77a:	45 01       	movw	r8, r10
     77c:	5e 01       	movw	r10, r28
     77e:	08 94       	sec
     780:	a1 1c       	adc	r10, r1
     782:	b1 1c       	adc	r11, r1
     784:	04 c0       	rjmp	.+8      	; 0x78e <ProcessConfigurationDescriptor+0x7a>
	USB_Descriptor_Interface_t* PrinterInterface = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint   = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint  = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     786:	83 e0       	ldi	r24, 0x03	; 3
     788:	43 c0       	rjmp	.+134    	; 0x810 <ProcessConfigurationDescriptor+0xfc>
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	41 c0       	rjmp	.+130    	; 0x810 <ProcessConfigurationDescriptor+0xfc>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(PrinterInterface) ||
     78e:	01 15       	cp	r16, r1
     790:	11 05       	cpc	r17, r1
     792:	39 f0       	breq	.+14     	; 0x7a2 <ProcessConfigurationDescriptor+0x8e>
     794:	c4 01       	movw	r24, r8
     796:	b5 01       	movw	r22, r10
     798:	4a e7       	ldi	r20, 0x7A	; 122
     79a:	53 e0       	ldi	r21, 0x03	; 3
     79c:	2b d4       	rcall	.+2134   	; 0xff4 <USB_GetNextDescriptorComp>
     79e:	88 23       	and	r24, r24
     7a0:	81 f0       	breq	.+32     	; 0x7c2 <ProcessConfigurationDescriptor+0xae>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextPrinterInterfaceBulkDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Printer interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     7a2:	c4 01       	movw	r24, r8
     7a4:	b5 01       	movw	r22, r10
     7a6:	49 e6       	ldi	r20, 0x69	; 105
     7a8:	53 e0       	ldi	r21, 0x03	; 3
     7aa:	24 d4       	rcall	.+2120   	; 0xff4 <USB_GetNextDescriptorComp>
     7ac:	88 23       	and	r24, r24
     7ae:	11 f0       	breq	.+4      	; 0x7b4 <ProcessConfigurationDescriptor+0xa0>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	2e c0       	rjmp	.+92     	; 0x810 <ProcessConfigurationDescriptor+0xfc>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			PrinterInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     7b4:	09 81       	ldd	r16, Y+1	; 0x01
     7b6:	1a 81       	ldd	r17, Y+2	; 0x02
     7b8:	cc 24       	eor	r12, r12
     7ba:	dd 24       	eor	r13, r13
     7bc:	ee 24       	eor	r14, r14
     7be:	ff 24       	eor	r15, r15
     7c0:	e6 cf       	rjmp	.-52     	; 0x78e <ProcessConfigurationDescriptor+0x7a>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     7c2:	e9 81       	ldd	r30, Y+1	; 0x01
     7c4:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
     7c6:	82 81       	ldd	r24, Z+2	; 0x02
     7c8:	87 fd       	sbrc	r24, 7
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <ProcessConfigurationDescriptor+0xbc>
     7cc:	6f 01       	movw	r12, r30
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <ProcessConfigurationDescriptor+0xbe>
     7d0:	7f 01       	movw	r14, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     7d2:	e1 14       	cp	r14, r1
     7d4:	f1 04       	cpc	r15, r1
     7d6:	d9 f2       	breq	.-74     	; 0x78e <ProcessConfigurationDescriptor+0x7a>
     7d8:	c1 14       	cp	r12, r1
     7da:	d1 04       	cpc	r13, r1
     7dc:	c1 f2       	breq	.-80     	; 0x78e <ProcessConfigurationDescriptor+0x7a>
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Save Printer interface details for later use */
	PrinterInterfaceNumber = PrinterInterface->InterfaceNumber;
     7de:	f8 01       	movw	r30, r16
     7e0:	82 81       	ldd	r24, Z+2	; 0x02
     7e2:	80 93 54 01 	sts	0x0154, r24
	PrinterAltSetting      = PrinterInterface->AlternateSetting;
     7e6:	83 81       	ldd	r24, Z+3	; 0x03
     7e8:	80 93 53 01 	sts	0x0153, r24

	/* Configure the Printer data IN pipe */
	Pipe_ConfigurePipe(PRINTER_DATA_IN_PIPE, EP_TYPE_BULK, PIPE_TOKEN_IN,
     7ec:	f7 01       	movw	r30, r14
     7ee:	04 81       	ldd	r16, Z+4	; 0x04
     7f0:	15 81       	ldd	r17, Z+5	; 0x05
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	62 e0       	ldi	r22, 0x02	; 2
     7f6:	40 e1       	ldi	r20, 0x10	; 16
     7f8:	22 81       	ldd	r18, Z+2	; 0x02
     7fa:	ee 24       	eor	r14, r14
     7fc:	75 d2       	rcall	.+1258   	; 0xce8 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the Printer data OUT pipe */
	Pipe_ConfigurePipe(PRINTER_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
     7fe:	f6 01       	movw	r30, r12
     800:	04 81       	ldd	r16, Z+4	; 0x04
     802:	15 81       	ldd	r17, Z+5	; 0x05
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	62 e0       	ldi	r22, 0x02	; 2
     808:	40 e2       	ldi	r20, 0x20	; 32
     80a:	22 81       	ldd	r18, Z+2	; 0x02
     80c:	6d d2       	rcall	.+1242   	; 0xce8 <Pipe_ConfigurePipe>
     80e:	80 e0       	ldi	r24, 0x00	; 0
					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     810:	cc 5f       	subi	r28, 0xFC	; 252
     812:	dd 4f       	sbci	r29, 0xFD	; 253
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	de bf       	out	0x3e, r29	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	cd bf       	out	0x3d, r28	; 61
     81e:	cf 91       	pop	r28
     820:	df 91       	pop	r29
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	ff 90       	pop	r15
     828:	ef 90       	pop	r14
     82a:	df 90       	pop	r13
     82c:	cf 90       	pop	r12
     82e:	bf 90       	pop	r11
     830:	af 90       	pop	r10
     832:	9f 90       	pop	r9
     834:	8f 90       	pop	r8
     836:	08 95       	ret

00000838 <Printer_GetDeviceID>:
 *
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum
 */
uint8_t Printer_GetDeviceID(char* DeviceIDString,
                            const uint16_t BufferSize)
{
     838:	cf 92       	push	r12
     83a:	df 92       	push	r13
     83c:	ff 92       	push	r15
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	df 93       	push	r29
     844:	cf 93       	push	r28
     846:	00 d0       	rcall	.+0      	; 0x848 <Printer_GetDeviceID+0x10>
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
     84c:	8c 01       	movw	r16, r24
     84e:	6b 01       	movw	r12, r22
	uint8_t  ErrorCode = HOST_SENDCONTROL_Successful;
	uint16_t DeviceIDStringLength = 0;
     850:	1a 82       	std	Y+2, r1	; 0x02
     852:	19 82       	std	Y+1, r1	; 0x01

	USB_ControlRequest = (USB_Request_Header_t)
     854:	90 91 54 01 	lds	r25, 0x0154
     858:	81 ea       	ldi	r24, 0xA1	; 161
     85a:	80 93 56 01 	sts	0x0156, r24
     85e:	10 92 57 01 	sts	0x0157, r1
     862:	10 92 59 01 	sts	0x0159, r1
     866:	10 92 58 01 	sts	0x0158, r1
     86a:	90 93 5a 01 	sts	0x015A, r25
     86e:	10 92 5b 01 	sts	0x015B, r1
     872:	82 e0       	ldi	r24, 0x02	; 2
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	90 93 5d 01 	sts	0x015D, r25
     87a:	80 93 5c 01 	sts	0x015C, r24
     87e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(DeviceIDStringLength),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(&DeviceIDStringLength)) != HOST_SENDCONTROL_Successful)
     882:	ce 01       	movw	r24, r28
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	7b d4       	rcall	.+2294   	; 0x117e <USB_Host_SendControlRequest>
     888:	f8 2e       	mov	r15, r24
     88a:	88 23       	and	r24, r24
     88c:	51 f5       	brne	.+84     	; 0x8e2 <Printer_GetDeviceID+0xaa>
	  return ErrorCode;

	if (!(DeviceIDStringLength))
     88e:	29 81       	ldd	r18, Y+1	; 0x01
     890:	3a 81       	ldd	r19, Y+2	; 0x02
     892:	21 15       	cp	r18, r1
     894:	31 05       	cpc	r19, r1
     896:	19 f1       	breq	.+70     	; 0x8de <Printer_GetDeviceID+0xa6>

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     898:	83 2f       	mov	r24, r19
     89a:	92 2f       	mov	r25, r18
	{
		DeviceIDString[0] = 0x00;
		return HOST_SENDCONTROL_Successful;
	}

	DeviceIDStringLength = SwapEndian_16(DeviceIDStringLength);
     89c:	9a 83       	std	Y+2, r25	; 0x02
     89e:	89 83       	std	Y+1, r24	; 0x01

	if (DeviceIDStringLength > BufferSize)
     8a0:	c8 16       	cp	r12, r24
     8a2:	d9 06       	cpc	r13, r25
     8a4:	10 f4       	brcc	.+4      	; 0x8aa <Printer_GetDeviceID+0x72>
	  DeviceIDStringLength = BufferSize;
     8a6:	da 82       	std	Y+2, r13	; 0x02
     8a8:	c9 82       	std	Y+1, r12	; 0x01

	USB_ControlRequest.wLength = DeviceIDStringLength;
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	9a 81       	ldd	r25, Y+2	; 0x02
     8ae:	90 93 5d 01 	sts	0x015D, r25
     8b2:	80 93 5c 01 	sts	0x015C, r24

	if ((ErrorCode = USB_Host_SendControlRequest(DeviceIDString)) != HOST_SENDCONTROL_Successful)
     8b6:	c8 01       	movw	r24, r16
     8b8:	62 d4       	rcall	.+2244   	; 0x117e <USB_Host_SendControlRequest>
     8ba:	f8 2e       	mov	r15, r24
     8bc:	88 23       	and	r24, r24
     8be:	89 f4       	brne	.+34     	; 0x8e2 <Printer_GetDeviceID+0xaa>
	  return ErrorCode;

	/* Move string back two characters to remove the string length value from the start of the array */
	memmove(&DeviceIDString[0], &DeviceIDString[2], DeviceIDStringLength - 2);
     8c0:	b8 01       	movw	r22, r16
     8c2:	6e 5f       	subi	r22, 0xFE	; 254
     8c4:	7f 4f       	sbci	r23, 0xFF	; 255
     8c6:	49 81       	ldd	r20, Y+1	; 0x01
     8c8:	5a 81       	ldd	r21, Y+2	; 0x02
     8ca:	42 50       	subi	r20, 0x02	; 2
     8cc:	50 40       	sbci	r21, 0x00	; 0
     8ce:	c8 01       	movw	r24, r16
     8d0:	b8 d5       	rcall	.+2928   	; 0x1442 <memmove>

	DeviceIDString[DeviceIDStringLength - 2] = 0x00;
     8d2:	89 81       	ldd	r24, Y+1	; 0x01
     8d4:	9a 81       	ldd	r25, Y+2	; 0x02
     8d6:	08 0f       	add	r16, r24
     8d8:	19 1f       	adc	r17, r25
     8da:	02 50       	subi	r16, 0x02	; 2
     8dc:	10 40       	sbci	r17, 0x00	; 0
     8de:	f8 01       	movw	r30, r16
     8e0:	10 82       	st	Z, r1

	return HOST_SENDCONTROL_Successful;
}
     8e2:	8f 2d       	mov	r24, r15
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	cf 91       	pop	r28
     8ea:	df 91       	pop	r29
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	df 90       	pop	r13
     8f4:	cf 90       	pop	r12
     8f6:	08 95       	ret

000008f8 <Printer_SendData>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
uint8_t Printer_SendData(const void* const PrinterCommands,
                         const uint16_t CommandSize)
{
     8f8:	1f 93       	push	r17
     8fa:	22 e0       	ldi	r18, 0x02	; 2
     8fc:	20 93 a7 00 	sts	0x00A7, r18

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     900:	20 91 a9 00 	lds	r18, 0x00A9
     904:	2f 7b       	andi	r18, 0xBF	; 191
     906:	20 93 a9 00 	sts	0x00A9, r18
	uint8_t ErrorCode;

	Pipe_SelectPipe(PRINTER_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(PrinterCommands, CommandSize)) != PIPE_RWSTREAM_NoError)
     90a:	3b d5       	rcall	.+2678   	; 0x1382 <Pipe_Write_Stream_LE>
     90c:	18 2f       	mov	r17, r24
     90e:	88 23       	and	r24, r24
     910:	59 f4       	brne	.+22     	; 0x928 <Printer_SendData+0x30>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     912:	80 91 a6 00 	lds	r24, 0x00A6
     916:	8b 77       	andi	r24, 0x7B	; 123
     918:	80 93 a6 00 	sts	0x00A6, r24
	  return ErrorCode;

	Pipe_ClearOUT();

	Pipe_WaitUntilReady();
     91c:	2f d2       	rcall	.+1118   	; 0xd7c <Pipe_WaitUntilReady>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     91e:	80 91 a9 00 	lds	r24, 0x00A9
     922:	80 64       	ori	r24, 0x40	; 64
     924:	80 93 a9 00 	sts	0x00A9, r24

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
     928:	81 2f       	mov	r24, r17
     92a:	1f 91       	pop	r17
     92c:	08 95       	ret

0000092e <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     92e:	98 2f       	mov	r25, r24
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     930:	20 91 9e 00 	lds	r18, 0x009E
	bool    BusSuspended = USB_Host_IsBusSuspended();
	uint8_t ErrorCode    = HOST_WAITERROR_Successful;
	bool    HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     934:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     938:	80 91 a0 00 	lds	r24, 0x00A0
     93c:	8f 7d       	andi	r24, 0xDF	; 223
     93e:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     942:	80 91 9f 00 	lds	r24, 0x009F
     946:	8f 7d       	andi	r24, 0xDF	; 223
     948:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     94c:	80 91 9e 00 	lds	r24, 0x009E
     950:	81 60       	ori	r24, 0x01	; 1
     952:	80 93 9e 00 	sts	0x009E, r24
     956:	26 c0       	rjmp	.+76     	; 0x9a4 <USB_Host_WaitMS+0x76>

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     958:	80 91 9f 00 	lds	r24, 0x009F
     95c:	85 ff       	sbrs	r24, 5
     95e:	06 c0       	rjmp	.+12     	; 0x96c <USB_Host_WaitMS+0x3e>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     960:	80 91 9f 00 	lds	r24, 0x009F
     964:	8f 7d       	andi	r24, 0xDF	; 223
     966:	80 93 9f 00 	sts	0x009F, r24
			MS--;
     96a:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     96c:	80 91 5e 01 	lds	r24, 0x015E
     970:	82 30       	cpi	r24, 0x02	; 2
     972:	11 f4       	brne	.+4      	; 0x978 <USB_Host_WaitMS+0x4a>
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	18 c0       	rjmp	.+48     	; 0x9a8 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if an error has occurred on the selected pipe, false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     978:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     97c:	84 ff       	sbrs	r24, 4
     97e:	07 c0       	rjmp	.+14     	; 0x98e <USB_Host_WaitMS+0x60>

			/** Clears the master pipe error flag. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPINTX &= ~(1 << PERRI);
     980:	80 91 a6 00 	lds	r24, 0x00A6
     984:	8f 7e       	andi	r24, 0xEF	; 239
     986:	80 93 a6 00 	sts	0x00A6, r24
     98a:	92 e0       	ldi	r25, 0x02	; 2
     98c:	0d c0       	rjmp	.+26     	; 0x9a8 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     98e:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     992:	81 ff       	sbrs	r24, 1
     994:	07 c0       	rjmp	.+14     	; 0x9a4 <USB_Host_WaitMS+0x76>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     996:	80 91 a6 00 	lds	r24, 0x00A6
     99a:	8d 7f       	andi	r24, 0xFD	; 253
     99c:	80 93 a6 00 	sts	0x00A6, r24
     9a0:	93 e0       	ldi	r25, 0x03	; 3
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <USB_Host_WaitMS+0x7a>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     9a4:	99 23       	and	r25, r25
     9a6:	c1 f6       	brne	.-80     	; 0x958 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     9a8:	20 fd       	sbrc	r18, 0
     9aa:	05 c0       	rjmp	.+10     	; 0x9b6 <USB_Host_WaitMS+0x88>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     9ac:	80 91 9e 00 	lds	r24, 0x009E
     9b0:	8e 7f       	andi	r24, 0xFE	; 254
     9b2:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     9b6:	35 ff       	sbrs	r19, 5
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <USB_Host_WaitMS+0x96>
	  USB_INT_Enable(USB_INT_HSOFI);
     9ba:	80 91 a0 00 	lds	r24, 0x00A0
     9be:	80 62       	ori	r24, 0x20	; 32
     9c0:	80 93 a0 00 	sts	0x00A0, r24

	return ErrorCode;
}
     9c4:	89 2f       	mov	r24, r25
     9c6:	08 95       	ret

000009c8 <USB_Host_ResetDevice>:
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     9c8:	60 91 9e 00 	lds	r22, 0x009E

static void USB_Host_ResetDevice(void)
{
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);
     9cc:	80 91 a0 00 	lds	r24, 0x00A0
     9d0:	8d 7f       	andi	r24, 0xFD	; 253
     9d2:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     9d6:	80 91 9e 00 	lds	r24, 0x009E
     9da:	82 60       	ori	r24, 0x02	; 2
     9dc:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean true if no bus reset is currently being sent, false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     9e0:	80 91 9e 00 	lds	r24, 0x009E

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     9e4:	81 fd       	sbrc	r24, 1
     9e6:	fc cf       	rjmp	.-8      	; 0x9e0 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     9e8:	80 91 9e 00 	lds	r24, 0x009E
     9ec:	81 60       	ori	r24, 0x01	; 1
     9ee:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();

	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
     9f2:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
     9f6:	80 91 a0 00 	lds	r24, 0x00A0
     9fa:	8f 7d       	andi	r24, 0xDF	; 223
     9fc:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
     a00:	80 91 9f 00 	lds	r24, 0x009F
     a04:	8f 7d       	andi	r24, 0xDF	; 223
     a06:	80 93 9f 00 	sts	0x009F, r24
     a0a:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a0c:	40 ed       	ldi	r20, 0xD0	; 208
     a0e:	57 e0       	ldi	r21, 0x07	; 7
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     a10:	80 91 9f 00 	lds	r24, 0x009F
     a14:	85 ff       	sbrs	r24, 5
     a16:	0b c0       	rjmp	.+22     	; 0xa2e <USB_Host_ResetDevice+0x66>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     a18:	80 91 9f 00 	lds	r24, 0x009F
     a1c:	8f 7d       	andi	r24, 0xDF	; 223
     a1e:	80 93 9f 00 	sts	0x009F, r24
			USB_INT_Clear(USB_INT_DDISCI);
     a22:	80 91 9f 00 	lds	r24, 0x009F
     a26:	8d 7f       	andi	r24, 0xFD	; 253
     a28:	80 93 9f 00 	sts	0x009F, r24
     a2c:	05 c0       	rjmp	.+10     	; 0xa38 <USB_Host_ResetDevice+0x70>
     a2e:	ca 01       	movw	r24, r20
     a30:	01 97       	sbiw	r24, 0x01	; 1
     a32:	f1 f7       	brne	.-4      	; 0xa30 <USB_Host_ResetDevice+0x68>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     a34:	21 50       	subi	r18, 0x01	; 1
     a36:	61 f7       	brne	.-40     	; 0xa10 <USB_Host_ResetDevice+0x48>
		}

		_delay_ms(1);
	}

	if (HSOFIEnabled)
     a38:	35 ff       	sbrs	r19, 5
     a3a:	05 c0       	rjmp	.+10     	; 0xa46 <USB_Host_ResetDevice+0x7e>
	  USB_INT_Enable(USB_INT_HSOFI);
     a3c:	80 91 a0 00 	lds	r24, 0x00A0
     a40:	80 62       	ori	r24, 0x20	; 32
     a42:	80 93 a0 00 	sts	0x00A0, r24

	if (BusSuspended)
     a46:	60 fd       	sbrc	r22, 0
     a48:	05 c0       	rjmp	.+10     	; 0xa54 <USB_Host_ResetDevice+0x8c>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     a4a:	80 91 9e 00 	lds	r24, 0x009E
     a4e:	8e 7f       	andi	r24, 0xFE	; 254
     a50:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
     a54:	80 91 a0 00 	lds	r24, 0x00A0
     a58:	82 60       	ori	r24, 0x02	; 2
     a5a:	80 93 a0 00 	sts	0x00A0, r24
}
     a5e:	08 95       	ret

00000a60 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	USB_ControlRequest = (USB_Request_Header_t)
     a60:	10 92 56 01 	sts	0x0156, r1
     a64:	99 e0       	ldi	r25, 0x09	; 9
     a66:	90 93 57 01 	sts	0x0157, r25
     a6a:	80 93 58 01 	sts	0x0158, r24
     a6e:	10 92 59 01 	sts	0x0159, r1
     a72:	10 92 5b 01 	sts	0x015B, r1
     a76:	10 92 5a 01 	sts	0x015A, r1
     a7a:	10 92 5d 01 	sts	0x015D, r1
     a7e:	10 92 5c 01 	sts	0x015C, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a82:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
}
     a8a:	79 c3       	rjmp	.+1778   	; 0x117e <USB_Host_SendControlRequest>

00000a8c <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "Host.h"

void USB_Host_ProcessNextHostState(void)
{
     a8c:	ef 92       	push	r14
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	df 93       	push	r29
     a94:	cf 93       	push	r28
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
     a9a:	28 97       	sbiw	r28, 0x08	; 8
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     aa6:	80 91 5e 01 	lds	r24, 0x015E
     aaa:	86 30       	cpi	r24, 0x06	; 6
     aac:	09 f4       	brne	.+2      	; 0xab0 <USB_Host_ProcessNextHostState+0x24>
     aae:	94 c0       	rjmp	.+296    	; 0xbd8 <USB_Host_ProcessNextHostState+0x14c>
     ab0:	87 30       	cpi	r24, 0x07	; 7
     ab2:	70 f4       	brcc	.+28     	; 0xad0 <USB_Host_ProcessNextHostState+0x44>
     ab4:	83 30       	cpi	r24, 0x03	; 3
     ab6:	c1 f1       	breq	.+112    	; 0xb28 <USB_Host_ProcessNextHostState+0x9c>
     ab8:	84 30       	cpi	r24, 0x04	; 4
     aba:	20 f4       	brcc	.+8      	; 0xac4 <USB_Host_ProcessNextHostState+0x38>
     abc:	81 30       	cpi	r24, 0x01	; 1
     abe:	09 f0       	breq	.+2      	; 0xac2 <USB_Host_ProcessNextHostState+0x36>
     ac0:	07 c1       	rjmp	.+526    	; 0xcd0 <USB_Host_ProcessNextHostState+0x244>
     ac2:	13 c0       	rjmp	.+38     	; 0xaea <USB_Host_ProcessNextHostState+0x5e>
     ac4:	84 30       	cpi	r24, 0x04	; 4
     ac6:	c1 f1       	breq	.+112    	; 0xb38 <USB_Host_ProcessNextHostState+0xac>
     ac8:	85 30       	cpi	r24, 0x05	; 5
     aca:	09 f0       	breq	.+2      	; 0xace <USB_Host_ProcessNextHostState+0x42>
     acc:	01 c1       	rjmp	.+514    	; 0xcd0 <USB_Host_ProcessNextHostState+0x244>
     ace:	5b c0       	rjmp	.+182    	; 0xb86 <USB_Host_ProcessNextHostState+0xfa>
     ad0:	88 30       	cpi	r24, 0x08	; 8
     ad2:	09 f4       	brne	.+2      	; 0xad6 <USB_Host_ProcessNextHostState+0x4a>
     ad4:	9b c0       	rjmp	.+310    	; 0xc0c <USB_Host_ProcessNextHostState+0x180>
     ad6:	88 30       	cpi	r24, 0x08	; 8
     ad8:	08 f4       	brcc	.+2      	; 0xadc <USB_Host_ProcessNextHostState+0x50>
     ada:	8a c0       	rjmp	.+276    	; 0xbf0 <USB_Host_ProcessNextHostState+0x164>
     adc:	89 30       	cpi	r24, 0x09	; 9
     ade:	09 f4       	brne	.+2      	; 0xae2 <USB_Host_ProcessNextHostState+0x56>
     ae0:	b4 c0       	rjmp	.+360    	; 0xc4a <USB_Host_ProcessNextHostState+0x1be>
     ae2:	8a 30       	cpi	r24, 0x0A	; 10
     ae4:	09 f0       	breq	.+2      	; 0xae8 <USB_Host_ProcessNextHostState+0x5c>
     ae6:	f4 c0       	rjmp	.+488    	; 0xcd0 <USB_Host_ProcessNextHostState+0x244>
     ae8:	d9 c0       	rjmp	.+434    	; 0xc9c <USB_Host_ProcessNextHostState+0x210>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     aea:	00 91 51 01 	lds	r16, 0x0151
     aee:	10 91 52 01 	lds	r17, 0x0152
     af2:	01 15       	cp	r16, r1
     af4:	11 05       	cpc	r17, r1
     af6:	09 f4       	brne	.+2      	; 0xafa <USB_Host_ProcessNextHostState+0x6e>
     af8:	eb c0       	rjmp	.+470    	; 0xcd0 <USB_Host_ProcessNextHostState+0x244>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	18 df       	rcall	.-464    	; 0x92e <USB_Host_WaitMS>
     afe:	68 2f       	mov	r22, r24
     b00:	88 23       	and	r24, r24
     b02:	31 f0       	breq	.+12     	; 0xb10 <USB_Host_ProcessNextHostState+0x84>
				{
					USB_HostState = PostWaitState;
     b04:	80 91 50 01 	lds	r24, 0x0150
     b08:	80 93 5e 01 	sts	0x015E, r24
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	dc c0       	rjmp	.+440    	; 0xcc8 <USB_Host_ProcessNextHostState+0x23c>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     b10:	c8 01       	movw	r24, r16
     b12:	01 97       	sbiw	r24, 0x01	; 1
     b14:	90 93 52 01 	sts	0x0152, r25
     b18:	80 93 51 01 	sts	0x0151, r24
     b1c:	89 2b       	or	r24, r25
     b1e:	09 f0       	breq	.+2      	; 0xb22 <USB_Host_ProcessNextHostState+0x96>
     b20:	d7 c0       	rjmp	.+430    	; 0xcd0 <USB_Host_ProcessNextHostState+0x244>
				  USB_HostState = PostWaitState;
     b22:	80 91 50 01 	lds	r24, 0x0150
     b26:	bf c0       	rjmp	.+382    	; 0xca6 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     b28:	88 ee       	ldi	r24, 0xE8	; 232
     b2a:	93 e0       	ldi	r25, 0x03	; 3
     b2c:	90 93 52 01 	sts	0x0152, r25
     b30:	80 93 51 01 	sts	0x0151, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     b34:	84 e0       	ldi	r24, 0x04	; 4
     b36:	b7 c0       	rjmp	.+366    	; 0xca6 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     b38:	80 91 51 01 	lds	r24, 0x0151
     b3c:	90 91 52 01 	lds	r25, 0x0152
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	90 93 52 01 	sts	0x0152, r25
     b46:	80 93 51 01 	sts	0x0151, r24
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	29 f0       	breq	.+10     	; 0xb58 <USB_Host_ProcessNextHostState+0xcc>
     b4e:	80 ed       	ldi	r24, 0xD0	; 208
     b50:	97 e0       	ldi	r25, 0x07	; 7
     b52:	01 97       	sbiw	r24, 0x01	; 1
     b54:	f1 f7       	brne	.-4      	; 0xb52 <USB_Host_ProcessNextHostState+0xc6>
     b56:	bc c0       	rjmp	.+376    	; 0xcd0 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     b58:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     b5a:	80 91 d8 00 	lds	r24, 0x00D8
     b5e:	80 61       	ori	r24, 0x10	; 16
     b60:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     b64:	80 91 dd 00 	lds	r24, 0x00DD
     b68:	8b 7f       	andi	r24, 0xFB	; 251
     b6a:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     b6e:	80 91 d7 00 	lds	r24, 0x00D7
     b72:	80 61       	ori	r24, 0x10	; 16
     b74:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     b78:	80 91 dd 00 	lds	r24, 0x00DD
     b7c:	82 60       	ori	r24, 0x02	; 2
     b7e:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     b82:	85 e0       	ldi	r24, 0x05	; 5
     b84:	90 c0       	rjmp	.+288    	; 0xca6 <USB_Host_ProcessNextHostState+0x21a>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     b86:	80 91 9f 00 	lds	r24, 0x009F
     b8a:	80 ff       	sbrs	r24, 0
     b8c:	a1 c0       	rjmp	.+322    	; 0xcd0 <USB_Host_ProcessNextHostState+0x244>
			{
				USB_INT_Clear(USB_INT_DCONNI);
     b8e:	80 91 9f 00 	lds	r24, 0x009F
     b92:	8e 7f       	andi	r24, 0xFE	; 254
     b94:	80 93 9f 00 	sts	0x009F, r24
				USB_INT_Clear(USB_INT_DDISCI);
     b98:	80 91 9f 00 	lds	r24, 0x009F
     b9c:	8d 7f       	andi	r24, 0xFD	; 253
     b9e:	80 93 9f 00 	sts	0x009F, r24

				USB_INT_Clear(USB_INT_VBERRI);
     ba2:	80 91 df 00 	lds	r24, 0x00DF
     ba6:	8d 7f       	andi	r24, 0xFD	; 253
     ba8:	80 93 df 00 	sts	0x00DF, r24
				USB_INT_Enable(USB_INT_VBERRI);
     bac:	80 91 de 00 	lds	r24, 0x00DE
     bb0:	82 60       	ori	r24, 0x02	; 2
     bb2:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     bb6:	80 91 9e 00 	lds	r24, 0x009E
     bba:	81 60       	ori	r24, 0x01	; 1
     bbc:	80 93 9e 00 	sts	0x009E, r24

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     bc0:	c9 d0       	rcall	.+402    	; 0xd54 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	80 93 5e 01 	sts	0x015E, r24
     bc8:	84 e6       	ldi	r24, 0x64	; 100
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	90 93 52 01 	sts	0x0152, r25
     bd0:	80 93 51 01 	sts	0x0151, r24
     bd4:	86 e0       	ldi	r24, 0x06	; 6
     bd6:	5f c0       	rjmp	.+190    	; 0xc96 <USB_Host_ProcessNextHostState+0x20a>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     bd8:	f7 de       	rcall	.-530    	; 0x9c8 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	80 93 5e 01 	sts	0x015E, r24
     be0:	88 ec       	ldi	r24, 0xC8	; 200
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	90 93 52 01 	sts	0x0152, r25
     be8:	80 93 51 01 	sts	0x0151, r24
     bec:	87 e0       	ldi	r24, 0x07	; 7
     bee:	53 c0       	rjmp	.+166    	; 0xc96 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	40 e0       	ldi	r20, 0x00	; 0
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	00 e4       	ldi	r16, 0x40	; 64
     bfa:	10 e0       	ldi	r17, 0x00	; 0
     bfc:	ee 24       	eor	r14, r14
     bfe:	74 d0       	rcall	.+232    	; 0xce8 <Pipe_ConfigurePipe>
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     c00:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     c04:	87 ff       	sbrs	r24, 7
     c06:	5e c0       	rjmp	.+188    	; 0xcc4 <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     c08:	88 e0       	ldi	r24, 0x08	; 8
     c0a:	4d c0       	rjmp	.+154    	; 0xca6 <USB_Host_ProcessNextHostState+0x21a>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     c0c:	a6 e5       	ldi	r26, 0x56	; 86
     c0e:	b1 e0       	ldi	r27, 0x01	; 1
     c10:	e9 e3       	ldi	r30, 0x39	; 57
     c12:	f1 e0       	ldi	r31, 0x01	; 1
     c14:	88 e0       	ldi	r24, 0x08	; 8
     c16:	01 90       	ld	r0, Z+
     c18:	0d 92       	st	X+, r0
     c1a:	81 50       	subi	r24, 0x01	; 1
     c1c:	e1 f7       	brne	.-8      	; 0xc16 <USB_Host_ProcessNextHostState+0x18a>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     c1e:	ce 01       	movw	r24, r28
     c20:	01 96       	adiw	r24, 0x01	; 1
     c22:	ad d2       	rcall	.+1370   	; 0x117e <USB_Host_SendControlRequest>
     c24:	68 2f       	mov	r22, r24
     c26:	88 23       	and	r24, r24
     c28:	09 f0       	breq	.+2      	; 0xc2c <USB_Host_ProcessNextHostState+0x1a0>
     c2a:	4a c0       	rjmp	.+148    	; 0xcc0 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     c2c:	88 85       	ldd	r24, Y+8	; 0x08
     c2e:	80 93 41 01 	sts	0x0141, r24

			USB_Host_ResetDevice();
     c32:	ca de       	rcall	.-620    	; 0x9c8 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	80 93 5e 01 	sts	0x015E, r24
     c3a:	88 ec       	ldi	r24, 0xC8	; 200
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	90 93 52 01 	sts	0x0152, r25
     c42:	80 93 51 01 	sts	0x0151, r24
     c46:	89 e0       	ldi	r24, 0x09	; 9
     c48:	26 c0       	rjmp	.+76     	; 0xc96 <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     c4a:	00 91 41 01 	lds	r16, 0x0141
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	10 e0       	ldi	r17, 0x00	; 0
     c58:	ee 24       	eor	r14, r14
     c5a:	46 d0       	rcall	.+140    	; 0xce8 <Pipe_ConfigurePipe>
     c5c:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     c60:	87 ff       	sbrs	r24, 7
     c62:	30 c0       	rjmp	.+96     	; 0xcc4 <USB_Host_ProcessNextHostState+0x238>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     c64:	a6 e5       	ldi	r26, 0x56	; 86
     c66:	b1 e0       	ldi	r27, 0x01	; 1
     c68:	e1 e3       	ldi	r30, 0x31	; 49
     c6a:	f1 e0       	ldi	r31, 0x01	; 1
     c6c:	88 e0       	ldi	r24, 0x08	; 8
     c6e:	01 90       	ld	r0, Z+
     c70:	0d 92       	st	X+, r0
     c72:	81 50       	subi	r24, 0x01	; 1
     c74:	e1 f7       	brne	.-8      	; 0xc6e <USB_Host_ProcessNextHostState+0x1e2>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	81 d2       	rcall	.+1282   	; 0x117e <USB_Host_SendControlRequest>
     c7c:	68 2f       	mov	r22, r24
     c7e:	88 23       	and	r24, r24
     c80:	f9 f4       	brne	.+62     	; 0xcc0 <USB_Host_ProcessNextHostState+0x234>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	80 93 5e 01 	sts	0x015E, r24
     c88:	84 e6       	ldi	r24, 0x64	; 100
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	90 93 52 01 	sts	0x0152, r25
     c90:	80 93 51 01 	sts	0x0151, r24
     c94:	8a e0       	ldi	r24, 0x0A	; 10
     c96:	80 93 50 01 	sts	0x0150, r24
     c9a:	1a c0       	rjmp	.+52     	; 0xcd0 <USB_Host_ProcessNextHostState+0x244>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			EVENT_USB_Host_DeviceEnumerationComplete();
     ca2:	80 db       	rcall	.-2304   	; 0x3a4 <EVENT_USB_Host_DeviceEnumerationComplete>
			USB_HostState = HOST_STATE_Addressed;
     ca4:	8b e0       	ldi	r24, 0x0B	; 11
     ca6:	80 93 5e 01 	sts	0x015E, r24
     caa:	12 c0       	rjmp	.+36     	; 0xcd0 <USB_Host_ProcessNextHostState+0x244>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     cac:	89 2f       	mov	r24, r25
     cae:	91 db       	rcall	.-2270   	; 0x3d2 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     cb0:	80 91 dd 00 	lds	r24, 0x00DD
     cb4:	81 60       	ori	r24, 0x01	; 1
     cb6:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     cba:	79 db       	rcall	.-2318   	; 0x3ae <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     cbc:	8c d0       	rcall	.+280    	; 0xdd6 <USB_ResetInterface>
     cbe:	08 c0       	rjmp	.+16     	; 0xcd0 <USB_Host_ProcessNextHostState+0x244>
	}
}
     cc0:	93 e0       	ldi	r25, 0x03	; 3
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <USB_Host_ProcessNextHostState+0x23c>
     cc4:	94 e0       	ldi	r25, 0x04	; 4
     cc6:	60 e0       	ldi	r22, 0x00	; 0
			EVENT_USB_Host_DeviceEnumerationComplete();
			USB_HostState = HOST_STATE_Addressed;
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     cc8:	80 91 5e 01 	lds	r24, 0x015E
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	71 f7       	brne	.-36     	; 0xcac <USB_Host_ProcessNextHostState+0x220>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     cd0:	28 96       	adiw	r28, 0x08	; 8
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	cf 91       	pop	r28
     cde:	df 91       	pop	r29
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ef 90       	pop	r14
     ce6:	08 95       	ret

00000ce8 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     ce8:	ef 92       	push	r14
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	9e 2d       	mov	r25, r14
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     cf0:	80 93 a7 00 	sts	0x00A7, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     cf4:	80 91 a9 00 	lds	r24, 0x00A9
     cf8:	81 60       	ori	r24, 0x01	; 1
     cfa:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SelectPipe(Number);
	Pipe_EnablePipe();

	UPCFG1X = 0;
     cfe:	10 92 ab 00 	sts	0x00AB, r1

	UPCFG0X = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     d02:	62 95       	swap	r22
     d04:	66 0f       	add	r22, r22
     d06:	66 0f       	add	r22, r22
     d08:	60 7c       	andi	r22, 0xC0	; 192
     d0a:	64 2b       	or	r22, r20
     d0c:	2f 70       	andi	r18, 0x0F	; 15
     d0e:	62 2b       	or	r22, r18
     d10:	60 93 aa 00 	sts	0x00AA, r22
     d14:	28 e0       	ldi	r18, 0x08	; 8
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	03 c0       	rjmp	.+6      	; 0xd22 <Pipe_ConfigurePipe+0x3a>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     d1c:	8f 5f       	subi	r24, 0xFF	; 255
					CheckBytes <<= 1;
     d1e:	22 0f       	add	r18, r18
     d20:	33 1f       	adc	r19, r19
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     d22:	20 17       	cp	r18, r16
     d24:	31 07       	cpc	r19, r17
     d26:	10 f4       	brcc	.+4      	; 0xd2c <Pipe_ConfigurePipe+0x44>
     d28:	85 30       	cpi	r24, 0x05	; 5
     d2a:	c1 f7       	brne	.-16     	; 0xd1c <Pipe_ConfigurePipe+0x34>
	UPCFG1X = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     d2c:	92 60       	ori	r25, 0x02	; 2
     d2e:	82 95       	swap	r24
     d30:	80 7f       	andi	r24, 0xF0	; 240
     d32:	89 2b       	or	r24, r25
     d34:	80 93 ab 00 	sts	0x00AB, r24

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     d38:	80 91 a9 00 	lds	r24, 0x00A9
     d3c:	80 62       	ori	r24, 0x20	; 32
     d3e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     d42:	80 91 ac 00 	lds	r24, 0x00AC

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
}
     d46:	88 1f       	adc	r24, r24
     d48:	88 27       	eor	r24, r24
     d4a:	88 1f       	adc	r24, r24
     d4c:	1f 91       	pop	r17
     d4e:	0f 91       	pop	r16
     d50:	ef 90       	pop	r14
     d52:	08 95       	ret

00000d54 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     d54:	10 92 f8 00 	sts	0x00F8, r1
     d58:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     d5a:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     d5e:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     d62:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     d66:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     d6a:	80 91 a9 00 	lds	r24, 0x00A9
     d6e:	8e 7f       	andi	r24, 0xFE	; 254
     d70:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     d74:	9f 5f       	subi	r25, 0xFF	; 255
     d76:	97 30       	cpi	r25, 0x07	; 7
     d78:	81 f7       	brne	.-32     	; 0xd5a <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     d7a:	08 95       	ret

00000d7c <Pipe_WaitUntilReady>:
			/** Returns the current USB frame number, when in host mode. Every millisecond the USB bus is active (i.e. not suspended)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     d7c:	40 91 a2 00 	lds	r20, 0x00A2
     d80:	50 91 a3 00 	lds	r21, 0x00A3
     d84:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     d86:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     d8a:	80 73       	andi	r24, 0x30	; 48
     d8c:	80 31       	cpi	r24, 0x10	; 16
     d8e:	29 f4       	brne	.+10     	; 0xd9a <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     d90:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     d94:	80 ff       	sbrs	r24, 0
     d96:	05 c0       	rjmp	.+10     	; 0xda2 <Pipe_WaitUntilReady+0x26>
     d98:	1c c0       	rjmp	.+56     	; 0xdd2 <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     d9a:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     d9e:	82 fd       	sbrc	r24, 2
     da0:	18 c0       	rjmp	.+48     	; 0xdd2 <Pipe_WaitUntilReady+0x56>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     da2:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     da6:	81 ff       	sbrs	r24, 1
     da8:	02 c0       	rjmp	.+4      	; 0xdae <Pipe_WaitUntilReady+0x32>
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     dae:	80 91 5e 01 	lds	r24, 0x015E
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	79 f0       	breq	.+30     	; 0xdd4 <Pipe_WaitUntilReady+0x58>
     db6:	80 91 a2 00 	lds	r24, 0x00A2
     dba:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     dbe:	84 17       	cp	r24, r20
     dc0:	95 07       	cpc	r25, r21
     dc2:	09 f3       	breq	.-62     	; 0xd86 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     dc4:	22 23       	and	r18, r18
     dc6:	11 f4       	brne	.+4      	; 0xdcc <Pipe_WaitUntilReady+0x50>
     dc8:	83 e0       	ldi	r24, 0x03	; 3
     dca:	08 95       	ret
     dcc:	21 50       	subi	r18, 0x01	; 1
     dce:	ac 01       	movw	r20, r24
     dd0:	da cf       	rjmp	.-76     	; 0xd86 <Pipe_WaitUntilReady+0xa>
     dd2:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     dd4:	08 95       	ret

00000dd6 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     dd6:	6e d0       	rcall	.+220    	; 0xeb4 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     dd8:	75 d0       	rcall	.+234    	; 0xec4 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     dda:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
     dde:	98 2f       	mov	r25, r24
     de0:	9f 77       	andi	r25, 0x7F	; 127
     de2:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
     de6:	80 68       	ori	r24, 0x80	; 128
     de8:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     dec:	8c e0       	ldi	r24, 0x0C	; 12
     dee:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     df0:	89 b5       	in	r24, 0x29	; 41
     df2:	82 60       	ori	r24, 0x02	; 2
     df4:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     df6:	09 b4       	in	r0, 0x29	; 41
     df8:	00 fe       	sbrs	r0, 0
     dfa:	fd cf       	rjmp	.-6      	; 0xdf6 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     dfc:	80 91 d8 00 	lds	r24, 0x00D8
     e00:	8f 7d       	andi	r24, 0xDF	; 223
     e02:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     e06:	80 91 d7 00 	lds	r24, 0x00D7
     e0a:	8f 77       	andi	r24, 0x7F	; 127
     e0c:	80 93 d7 00 	sts	0x00D7, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState       = HOST_STATE_Unattached;
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	80 93 5e 01 	sts	0x015E, r24
	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     e16:	80 e4       	ldi	r24, 0x40	; 64
     e18:	80 93 41 01 	sts	0x0141, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     e1c:	80 91 d8 00 	lds	r24, 0x00D8
     e20:	80 64       	ori	r24, 0x40	; 64
     e22:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e26:	80 91 dd 00 	lds	r24, 0x00DD
     e2a:	81 60       	ori	r24, 0x01	; 1
     e2c:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     e30:	80 91 dd 00 	lds	r24, 0x00DD
     e34:	84 60       	ori	r24, 0x04	; 4
     e36:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     e3a:	80 91 d7 00 	lds	r24, 0x00D7
     e3e:	8f 7e       	andi	r24, 0xEF	; 239
     e40:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     e44:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     e46:	77 9a       	sbi	0x0e, 7	; 14

	USB_Host_VBUS_Auto_Off();
	USB_Host_VBUS_Manual_Enable();
	USB_Host_VBUS_Manual_On();

	USB_INT_Enable(USB_INT_SRPI);
     e48:	80 91 de 00 	lds	r24, 0x00DE
     e4c:	81 60       	ori	r24, 0x01	; 1
     e4e:	80 93 de 00 	sts	0x00DE, r24
	USB_INT_Enable(USB_INT_BCERRI);
     e52:	80 91 de 00 	lds	r24, 0x00DE
     e56:	84 60       	ori	r24, 0x04	; 4
     e58:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     e5c:	80 91 e0 00 	lds	r24, 0x00E0
     e60:	8e 7f       	andi	r24, 0xFE	; 254
     e62:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     e66:	80 91 d8 00 	lds	r24, 0x00D8
     e6a:	80 61       	ori	r24, 0x10	; 16
     e6c:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     e70:	08 95       	ret

00000e72 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     e72:	e7 ed       	ldi	r30, 0xD7	; 215
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	81 60       	ori	r24, 0x01	; 1
     e7a:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	80 93 55 01 	sts	0x0155, r24

	USB_ResetInterface();
}
     e82:	a9 cf       	rjmp	.-174    	; 0xdd6 <USB_ResetInterface>

00000e84 <USB_ShutDown>:

void USB_ShutDown(void)
{
	USB_INT_DisableAllInterrupts();
     e84:	17 d0       	rcall	.+46     	; 0xeb4 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     e86:	1e d0       	rcall	.+60     	; 0xec4 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     e88:	e0 ee       	ldi	r30, 0xE0	; 224
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	81 60       	ori	r24, 0x01	; 1
     e90:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     e92:	a8 ed       	ldi	r26, 0xD8	; 216
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	8c 91       	ld	r24, X
     e98:	8f 77       	andi	r24, 0x7F	; 127
     e9a:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     e9c:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     e9e:	e7 ed       	ldi	r30, 0xD7	; 215
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	8e 7f       	andi	r24, 0xFE	; 254
     ea6:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     ea8:	8c 91       	ld	r24, X
     eaa:	8f 7e       	andi	r24, 0xEF	; 239
     eac:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     eae:	10 92 55 01 	sts	0x0155, r1
}
     eb2:	08 95       	ret

00000eb4 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     eb4:	e8 ed       	ldi	r30, 0xD8	; 216
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	8c 7f       	andi	r24, 0xFC	; 252
     ebc:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     ebe:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     ec2:	08 95       	ret

00000ec4 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
     ec4:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
     ec8:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
	#endif
}
     ecc:	08 95       	ret

00000ece <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     ece:	1f 92       	push	r1
     ed0:	0f 92       	push	r0
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	0f 92       	push	r0
     ed6:	0b b6       	in	r0, 0x3b	; 59
     ed8:	0f 92       	push	r0
     eda:	11 24       	eor	r1, r1
     edc:	2f 93       	push	r18
     ede:	3f 93       	push	r19
     ee0:	4f 93       	push	r20
     ee2:	5f 93       	push	r21
     ee4:	6f 93       	push	r22
     ee6:	7f 93       	push	r23
     ee8:	8f 93       	push	r24
     eea:	9f 93       	push	r25
     eec:	af 93       	push	r26
     eee:	bf 93       	push	r27
     ef0:	ef 93       	push	r30
     ef2:	ff 93       	push	r31
	}
	#endif
	#endif

	#if defined(USB_CAN_BE_HOST)
	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     ef4:	80 91 9f 00 	lds	r24, 0x009F
     ef8:	81 ff       	sbrs	r24, 1
     efa:	15 c0       	rjmp	.+42     	; 0xf26 <__vector_10+0x58>
     efc:	80 91 a0 00 	lds	r24, 0x00A0
     f00:	81 ff       	sbrs	r24, 1
     f02:	11 c0       	rjmp	.+34     	; 0xf26 <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_DDISCI);
     f04:	80 91 9f 00 	lds	r24, 0x009F
     f08:	8d 7f       	andi	r24, 0xFD	; 253
     f0a:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Clear(USB_INT_DCONNI);
     f0e:	80 91 9f 00 	lds	r24, 0x009F
     f12:	8e 7f       	andi	r24, 0xFE	; 254
     f14:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Disable(USB_INT_DDISCI);
     f18:	80 91 a0 00 	lds	r24, 0x00A0
     f1c:	8d 7f       	andi	r24, 0xFD	; 253
     f1e:	80 93 a0 00 	sts	0x00A0, r24

		EVENT_USB_Host_DeviceUnattached();
     f22:	45 da       	rcall	.-2934   	; 0x3ae <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     f24:	58 df       	rcall	.-336    	; 0xdd6 <USB_ResetInterface>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     f26:	80 91 df 00 	lds	r24, 0x00DF
     f2a:	81 ff       	sbrs	r24, 1
     f2c:	15 c0       	rjmp	.+42     	; 0xf58 <__vector_10+0x8a>
     f2e:	80 91 de 00 	lds	r24, 0x00DE
     f32:	81 ff       	sbrs	r24, 1
     f34:	11 c0       	rjmp	.+34     	; 0xf58 <__vector_10+0x8a>
	{
		USB_INT_Clear(USB_INT_VBERRI);
     f36:	80 91 df 00 	lds	r24, 0x00DF
     f3a:	8d 7f       	andi	r24, 0xFD	; 253
     f3c:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     f40:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     f42:	80 91 dd 00 	lds	r24, 0x00DD
     f46:	81 60       	ori	r24, 0x01	; 1
     f48:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	64 db       	rcall	.-2360   	; 0x618 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     f50:	2e da       	rcall	.-2980   	; 0x3ae <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	80 93 5e 01 	sts	0x015E, r24
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     f58:	80 91 df 00 	lds	r24, 0x00DF
     f5c:	80 ff       	sbrs	r24, 0
     f5e:	17 c0       	rjmp	.+46     	; 0xf8e <__vector_10+0xc0>
     f60:	80 91 de 00 	lds	r24, 0x00DE
     f64:	80 ff       	sbrs	r24, 0
     f66:	13 c0       	rjmp	.+38     	; 0xf8e <__vector_10+0xc0>
	{
		USB_INT_Clear(USB_INT_SRPI);
     f68:	80 91 df 00 	lds	r24, 0x00DF
     f6c:	8e 7f       	andi	r24, 0xFE	; 254
     f6e:	80 93 df 00 	sts	0x00DF, r24
		USB_INT_Disable(USB_INT_SRPI);
     f72:	80 91 de 00 	lds	r24, 0x00DE
     f76:	8e 7f       	andi	r24, 0xFE	; 254
     f78:	80 93 de 00 	sts	0x00DE, r24

		EVENT_USB_Host_DeviceAttached();
     f7c:	21 da       	rcall	.-3006   	; 0x3c0 <EVENT_USB_Host_DeviceAttached>

		USB_INT_Enable(USB_INT_DDISCI);
     f7e:	80 91 a0 00 	lds	r24, 0x00A0
     f82:	82 60       	ori	r24, 0x02	; 2
     f84:	80 93 a0 00 	sts	0x00A0, r24

		USB_HostState = HOST_STATE_Powered;
     f88:	83 e0       	ldi	r24, 0x03	; 3
     f8a:	80 93 5e 01 	sts	0x015E, r24
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     f8e:	80 91 df 00 	lds	r24, 0x00DF
     f92:	82 ff       	sbrs	r24, 2
     f94:	0e c0       	rjmp	.+28     	; 0xfb2 <__vector_10+0xe4>
     f96:	80 91 de 00 	lds	r24, 0x00DE
     f9a:	82 ff       	sbrs	r24, 2
     f9c:	0a c0       	rjmp	.+20     	; 0xfb2 <__vector_10+0xe4>
	{
		USB_INT_Clear(USB_INT_BCERRI);
     f9e:	80 91 df 00 	lds	r24, 0x00DF
     fa2:	8b 7f       	andi	r24, 0xFB	; 251
     fa4:	80 93 df 00 	sts	0x00DF, r24

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	12 da       	rcall	.-3036   	; 0x3d2 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     fae:	ff d9       	rcall	.-3074   	; 0x3ae <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     fb0:	12 df       	rcall	.-476    	; 0xdd6 <USB_ResetInterface>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     fb2:	80 91 9f 00 	lds	r24, 0x009F
     fb6:	85 ff       	sbrs	r24, 5
     fb8:	0a c0       	rjmp	.+20     	; 0xfce <__vector_10+0x100>
     fba:	80 91 a0 00 	lds	r24, 0x00A0
     fbe:	85 ff       	sbrs	r24, 5
     fc0:	06 c0       	rjmp	.+12     	; 0xfce <__vector_10+0x100>
	{
		USB_INT_Clear(USB_INT_HSOFI);
     fc2:	80 91 9f 00 	lds	r24, 0x009F
     fc6:	8f 7d       	andi	r24, 0xDF	; 223
     fc8:	80 93 9f 00 	sts	0x009F, r24

		EVENT_USB_Host_StartOfFrame();
     fcc:	ae d0       	rcall	.+348    	; 0x112a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     fce:	ff 91       	pop	r31
     fd0:	ef 91       	pop	r30
     fd2:	bf 91       	pop	r27
     fd4:	af 91       	pop	r26
     fd6:	9f 91       	pop	r25
     fd8:	8f 91       	pop	r24
     fda:	7f 91       	pop	r23
     fdc:	6f 91       	pop	r22
     fde:	5f 91       	pop	r21
     fe0:	4f 91       	pop	r20
     fe2:	3f 91       	pop	r19
     fe4:	2f 91       	pop	r18
     fe6:	0f 90       	pop	r0
     fe8:	0b be       	out	0x3b, r0	; 59
     fea:	0f 90       	pop	r0
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	0f 90       	pop	r0
     ff0:	1f 90       	pop	r1
     ff2:	18 95       	reti

00000ff4 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
     ff4:	af 92       	push	r10
     ff6:	bf 92       	push	r11
     ff8:	cf 92       	push	r12
     ffa:	df 92       	push	r13
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	7c 01       	movw	r14, r24
    100a:	8b 01       	movw	r16, r22
    100c:	5a 01       	movw	r10, r20
    100e:	21 c0       	rjmp	.+66     	; 0x1052 <USB_GetNextDescriptorComp+0x5e>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1010:	f8 01       	movw	r30, r16
    1012:	c0 81       	ld	r28, Z
    1014:	d1 81       	ldd	r29, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1016:	88 81       	ld	r24, Y
    1018:	90 e0       	ldi	r25, 0x00	; 0

				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
    101a:	9e 01       	movw	r18, r28
    101c:	28 0f       	add	r18, r24
    101e:	39 1f       	adc	r19, r25
    1020:	31 83       	std	Z+1, r19	; 0x01
    1022:	20 83       	st	Z, r18
				*BytesRem      -= CurrDescriptorSize;
    1024:	f7 01       	movw	r30, r14
    1026:	20 81       	ld	r18, Z
    1028:	31 81       	ldd	r19, Z+1	; 0x01
    102a:	28 1b       	sub	r18, r24
    102c:	39 0b       	sbc	r19, r25
    102e:	31 83       	std	Z+1, r19	; 0x01
    1030:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1032:	f8 01       	movw	r30, r16
    1034:	80 81       	ld	r24, Z
    1036:	91 81       	ldd	r25, Z+1	; 0x01
    1038:	f5 01       	movw	r30, r10
    103a:	09 95       	icall
    103c:	82 30       	cpi	r24, 0x02	; 2
    103e:	49 f0       	breq	.+18     	; 0x1052 <USB_GetNextDescriptorComp+0x5e>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	71 f4       	brne	.+28     	; 0x1060 <USB_GetNextDescriptorComp+0x6c>
			{
				*CurrConfigLoc = PrevDescLoc;
    1044:	f8 01       	movw	r30, r16
    1046:	c0 83       	st	Z, r28
    1048:	d1 83       	std	Z+1, r29	; 0x01
				*BytesRem      = PrevBytesRem;
    104a:	f7 01       	movw	r30, r14
    104c:	d1 82       	std	Z+1, r13	; 0x01
    104e:	c0 82       	st	Z, r12
    1050:	07 c0       	rjmp	.+14     	; 0x1060 <USB_GetNextDescriptorComp+0x6c>

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1052:	f7 01       	movw	r30, r14
    1054:	c0 80       	ld	r12, Z
    1056:	d1 80       	ldd	r13, Z+1	; 0x01
    1058:	c1 14       	cp	r12, r1
    105a:	d1 04       	cpc	r13, r1
    105c:	c9 f6       	brne	.-78     	; 0x1010 <USB_GetNextDescriptorComp+0x1c>
    105e:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	df 90       	pop	r13
    106e:	cf 90       	pop	r12
    1070:	bf 90       	pop	r11
    1072:	af 90       	pop	r10
    1074:	08 95       	ret

00001076 <USB_Host_GetDeviceConfigDescriptor>:
#include "ConfigDescriptor.h"

#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(uint8_t ConfigNumber, uint16_t* const ConfigSizePtr,
                                           void* BufferPtr, uint16_t BufferSize)
{
    1076:	cf 92       	push	r12
    1078:	df 92       	push	r13
    107a:	ef 92       	push	r14
    107c:	ff 92       	push	r15
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	29 97       	sbiw	r28, 0x09	; 9
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	6b 01       	movw	r12, r22
    1098:	8a 01       	movw	r16, r20
    109a:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    109c:	90 e8       	ldi	r25, 0x80	; 128
    109e:	90 93 56 01 	sts	0x0156, r25
    10a2:	96 e0       	ldi	r25, 0x06	; 6
    10a4:	90 93 57 01 	sts	0x0157, r25
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	92 60       	ori	r25, 0x02	; 2
    10ae:	90 93 59 01 	sts	0x0159, r25
    10b2:	80 93 58 01 	sts	0x0158, r24
    10b6:	10 92 5b 01 	sts	0x015B, r1
    10ba:	10 92 5a 01 	sts	0x015A, r1
    10be:	89 e0       	ldi	r24, 0x09	; 9
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	90 93 5d 01 	sts	0x015D, r25
    10c6:	80 93 5c 01 	sts	0x015C, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    10ca:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    10ce:	ce 01       	movw	r24, r28
    10d0:	01 96       	adiw	r24, 0x01	; 1
    10d2:	55 d0       	rcall	.+170    	; 0x117e <USB_Host_SendControlRequest>
    10d4:	28 2f       	mov	r18, r24
    10d6:	88 23       	and	r24, r24
    10d8:	c1 f4       	brne	.+48     	; 0x110a <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize;
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	9c 81       	ldd	r25, Y+4	; 0x04
    10de:	f6 01       	movw	r30, r12
    10e0:	91 83       	std	Z+1, r25	; 0x01
    10e2:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    10e4:	e8 16       	cp	r14, r24
    10e6:	f9 06       	cpc	r15, r25
    10e8:	10 f4       	brcc	.+4      	; 0x10ee <USB_Host_GetDeviceConfigDescriptor+0x78>
    10ea:	25 e0       	ldi	r18, 0x05	; 5
    10ec:	0e c0       	rjmp	.+28     	; 0x110a <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    10ee:	90 93 5d 01 	sts	0x015D, r25
    10f2:	80 93 5c 01 	sts	0x015C, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    10f6:	c8 01       	movw	r24, r16
    10f8:	42 d0       	rcall	.+132    	; 0x117e <USB_Host_SendControlRequest>
    10fa:	28 2f       	mov	r18, r24
    10fc:	88 23       	and	r24, r24
    10fe:	29 f4       	brne	.+10     	; 0x110a <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1100:	f8 01       	movw	r30, r16
    1102:	81 81       	ldd	r24, Z+1	; 0x01
    1104:	82 30       	cpi	r24, 0x02	; 2
    1106:	09 f0       	breq	.+2      	; 0x110a <USB_Host_GetDeviceConfigDescriptor+0x94>
    1108:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    110a:	82 2f       	mov	r24, r18
    110c:	29 96       	adiw	r28, 0x09	; 9
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	ff 90       	pop	r15
    1122:	ef 90       	pop	r14
    1124:	df 90       	pop	r13
    1126:	cf 90       	pop	r12
    1128:	08 95       	ret

0000112a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    112a:	08 95       	ret

0000112c <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    112c:	1f 93       	push	r17
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	18 2f       	mov	r17, r24
    1134:	c8 ee       	ldi	r28, 0xE8	; 232
    1136:	d3 e0       	ldi	r29, 0x03	; 3
    1138:	09 c0       	rjmp	.+18     	; 0x114c <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	f8 db       	rcall	.-2064   	; 0x92e <USB_Host_WaitMS>
    113e:	88 23       	and	r24, r24
    1140:	d1 f4       	brne	.+52     	; 0x1176 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1142:	20 97       	sbiw	r28, 0x00	; 0
    1144:	11 f4       	brne	.+4      	; 0x114a <USB_Host_WaitForIOS+0x1e>
    1146:	84 e0       	ldi	r24, 0x04	; 4
    1148:	16 c0       	rjmp	.+44     	; 0x1176 <USB_Host_WaitForIOS+0x4a>
    114a:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    114c:	11 23       	and	r17, r17
    114e:	29 f4       	brne	.+10     	; 0x115a <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean true if the current pipe is ready for a SETUP packet, false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1150:	80 91 a6 00 	lds	r24, 0x00A6
    1154:	83 ff       	sbrs	r24, 3
    1156:	f1 cf       	rjmp	.-30     	; 0x113a <USB_Host_WaitForIOS+0xe>
    1158:	0d c0       	rjmp	.+26     	; 0x1174 <USB_Host_WaitForIOS+0x48>
    115a:	11 30       	cpi	r17, 0x01	; 1
    115c:	29 f4       	brne	.+10     	; 0x1168 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    115e:	80 91 a6 00 	lds	r24, 0x00A6
    1162:	80 ff       	sbrs	r24, 0
    1164:	ea cf       	rjmp	.-44     	; 0x113a <USB_Host_WaitForIOS+0xe>
    1166:	06 c0       	rjmp	.+12     	; 0x1174 <USB_Host_WaitForIOS+0x48>
    1168:	12 30       	cpi	r17, 0x02	; 2
    116a:	39 f7       	brne	.-50     	; 0x113a <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    116c:	80 91 a6 00 	lds	r24, 0x00A6
    1170:	82 ff       	sbrs	r24, 2
    1172:	e3 cf       	rjmp	.-58     	; 0x113a <USB_Host_WaitForIOS+0xe>
    1174:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	1f 91       	pop	r17
    117c:	08 95       	ret

0000117e <USB_Host_SendControlRequest>:

#define  __INCLUDE_FROM_HOSTSTDREQ_C
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    117e:	ff 92       	push	r15
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	18 2f       	mov	r17, r24
    118a:	09 2f       	mov	r16, r25
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    118c:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
	bool     BusSuspended   = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus   = HOST_SENDCONTROL_Successful;
	uint16_t DataLen        = USB_ControlRequest.wLength;
    1190:	c0 91 5c 01 	lds	r28, 0x015C
    1194:	d0 91 5d 01 	lds	r29, 0x015D
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1198:	80 91 9e 00 	lds	r24, 0x009E
    119c:	81 60       	ori	r24, 0x01	; 1
    119e:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	c4 db       	rcall	.-2168   	; 0x92e <USB_Host_WaitMS>
    11a6:	98 2f       	mov	r25, r24
    11a8:	88 23       	and	r24, r24
    11aa:	09 f0       	breq	.+2      	; 0x11ae <USB_Host_SendControlRequest+0x30>
    11ac:	d2 c0       	rjmp	.+420    	; 0x1352 <USB_Host_SendControlRequest+0x1d4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11ae:	80 91 aa 00 	lds	r24, 0x00AA
    11b2:	8f 7c       	andi	r24, 0xCF	; 207
    11b4:	80 93 aa 00 	sts	0x00AA, r24
			 *  flag for the pipe.
			 */
			static inline void Pipe_ClearErrorFlags(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearErrorFlags(void)
			{
				UPERRX = 0;
    11b8:	10 92 f5 00 	sts	0x00F5, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11bc:	80 91 a9 00 	lds	r24, 0x00A9
    11c0:	8f 7b       	andi	r24, 0xBF	; 191
    11c2:	80 93 a9 00 	sts	0x00A9, r24
    11c6:	e6 e5       	ldi	r30, 0x56	; 86
    11c8:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_Byte(*(HeaderStream++));
    11ca:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    11cc:	80 93 af 00 	sts	0x00AF, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	ee 35       	cpi	r30, 0x5E	; 94
    11d4:	f8 07       	cpc	r31, r24
    11d6:	c9 f7       	brne	.-14     	; 0x11ca <USB_Host_SendControlRequest+0x4c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    11d8:	80 91 a6 00 	lds	r24, 0x00A6
    11dc:	87 77       	andi	r24, 0x77	; 119
    11de:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_Byte(*(HeaderStream++));

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	a3 df       	rcall	.-186    	; 0x112c <USB_Host_WaitForIOS>
    11e6:	98 2f       	mov	r25, r24
    11e8:	88 23       	and	r24, r24
    11ea:	09 f0       	breq	.+2      	; 0x11ee <USB_Host_SendControlRequest+0x70>
    11ec:	b2 c0       	rjmp	.+356    	; 0x1352 <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11ee:	80 91 a9 00 	lds	r24, 0x00A9
    11f2:	80 64       	ori	r24, 0x40	; 64
    11f4:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	99 db       	rcall	.-2254   	; 0x92e <USB_Host_WaitMS>
    11fc:	98 2f       	mov	r25, r24
    11fe:	88 23       	and	r24, r24
    1200:	09 f0       	breq	.+2      	; 0x1204 <USB_Host_SendControlRequest+0x86>
    1202:	a7 c0       	rjmp	.+334    	; 0x1352 <USB_Host_SendControlRequest+0x1d4>
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
    1204:	21 2f       	mov	r18, r17
    1206:	30 2f       	mov	r19, r16
    1208:	c9 01       	movw	r24, r18
    120a:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    120c:	80 91 56 01 	lds	r24, 0x0156
    1210:	87 ff       	sbrs	r24, 7
    1212:	52 c0       	rjmp	.+164    	; 0x12b8 <USB_Host_SendControlRequest+0x13a>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1214:	80 91 aa 00 	lds	r24, 0x00AA
    1218:	8f 7c       	andi	r24, 0xCF	; 207
    121a:	80 61       	ori	r24, 0x10	; 16
    121c:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1220:	01 15       	cp	r16, r1
    1222:	11 05       	cpc	r17, r1
    1224:	69 f5       	brne	.+90     	; 0x1280 <USB_Host_SendControlRequest+0x102>
    1226:	2e c0       	rjmp	.+92     	; 0x1284 <USB_Host_SendControlRequest+0x106>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1228:	80 91 a9 00 	lds	r24, 0x00A9
    122c:	8f 7b       	andi	r24, 0xBF	; 191
    122e:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	7b df       	rcall	.-266    	; 0x112c <USB_Host_WaitForIOS>
    1236:	98 2f       	mov	r25, r24
    1238:	88 23       	and	r24, r24
    123a:	09 f0       	breq	.+2      	; 0x123e <USB_Host_SendControlRequest+0xc0>
    123c:	8a c0       	rjmp	.+276    	; 0x1352 <USB_Host_SendControlRequest+0x1d4>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    123e:	80 91 f6 00 	lds	r24, 0x00F6
    1242:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1246:	89 2b       	or	r24, r25
    1248:	49 f4       	brne	.+18     	; 0x125c <USB_Host_SendControlRequest+0xde>
    124a:	c0 e0       	ldi	r28, 0x00	; 0
    124c:	d0 e0       	ldi	r29, 0x00	; 0
    124e:	06 c0       	rjmp	.+12     	; 0x125c <USB_Host_SendControlRequest+0xde>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    1250:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_Byte();
    1254:	f8 01       	movw	r30, r16
    1256:	81 93       	st	Z+, r24
    1258:	8f 01       	movw	r16, r30
					DataLen--;
    125a:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    125c:	80 91 f6 00 	lds	r24, 0x00F6
    1260:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1264:	89 2b       	or	r24, r25
    1266:	11 f0       	breq	.+4      	; 0x126c <USB_Host_SendControlRequest+0xee>
    1268:	20 97       	sbiw	r28, 0x00	; 0
    126a:	91 f7       	brne	.-28     	; 0x1250 <USB_Host_SendControlRequest+0xd2>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    126c:	80 91 a9 00 	lds	r24, 0x00A9
    1270:	80 64       	ori	r24, 0x40	; 64
    1272:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1276:	80 91 a6 00 	lds	r24, 0x00A6
    127a:	8e 77       	andi	r24, 0x7E	; 126
    127c:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1280:	20 97       	sbiw	r28, 0x00	; 0
    1282:	91 f6       	brne	.-92     	; 0x1228 <USB_Host_SendControlRequest+0xaa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1284:	80 91 aa 00 	lds	r24, 0x00AA
    1288:	8f 7c       	andi	r24, 0xCF	; 207
    128a:	80 62       	ori	r24, 0x20	; 32
    128c:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1290:	80 91 a9 00 	lds	r24, 0x00A9
    1294:	8f 7b       	andi	r24, 0xBF	; 191
    1296:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    129a:	82 e0       	ldi	r24, 0x02	; 2
    129c:	47 df       	rcall	.-370    	; 0x112c <USB_Host_WaitForIOS>
    129e:	98 2f       	mov	r25, r24
    12a0:	88 23       	and	r24, r24
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <USB_Host_SendControlRequest+0x128>
    12a4:	56 c0       	rjmp	.+172    	; 0x1352 <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    12a6:	80 91 a6 00 	lds	r24, 0x00A6
    12aa:	8b 77       	andi	r24, 0x7B	; 123
    12ac:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    12b0:	82 e0       	ldi	r24, 0x02	; 2
    12b2:	3c df       	rcall	.-392    	; 0x112c <USB_Host_WaitForIOS>
    12b4:	98 2f       	mov	r25, r24
    12b6:	4d c0       	rjmp	.+154    	; 0x1352 <USB_Host_SendControlRequest+0x1d4>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    12b8:	01 15       	cp	r16, r1
    12ba:	11 05       	cpc	r17, r1
    12bc:	a9 f1       	breq	.+106    	; 0x1328 <USB_Host_SendControlRequest+0x1aa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    12be:	80 91 aa 00 	lds	r24, 0x00AA
    12c2:	8f 7c       	andi	r24, 0xCF	; 207
    12c4:	80 62       	ori	r24, 0x20	; 32
    12c6:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12ca:	80 91 a9 00 	lds	r24, 0x00A9
    12ce:	8f 7b       	andi	r24, 0xBF	; 191
    12d0:	80 93 a9 00 	sts	0x00A9, r24
    12d4:	1d c0       	rjmp	.+58     	; 0x1310 <USB_Host_SendControlRequest+0x192>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    12d6:	82 e0       	ldi	r24, 0x02	; 2
    12d8:	29 df       	rcall	.-430    	; 0x112c <USB_Host_WaitForIOS>
    12da:	98 2f       	mov	r25, r24
    12dc:	88 23       	and	r24, r24
    12de:	c9 f5       	brne	.+114    	; 0x1352 <USB_Host_SendControlRequest+0x1d4>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    12e0:	80 91 41 01 	lds	r24, 0x0141
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	07 c0       	rjmp	.+14     	; 0x12f8 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_Byte(*(DataStream++));
    12ea:	f8 01       	movw	r30, r16
    12ec:	81 91       	ld	r24, Z+
    12ee:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    12f0:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    12f4:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    12f6:	39 f0       	breq	.+14     	; 0x1306 <USB_Host_SendControlRequest+0x188>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    12f8:	80 91 f6 00 	lds	r24, 0x00F6
    12fc:	90 91 f7 00 	lds	r25, 0x00F7
    1300:	82 17       	cp	r24, r18
    1302:	93 07       	cpc	r25, r19
    1304:	90 f3       	brcs	.-28     	; 0x12ea <USB_Host_SendControlRequest+0x16c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1306:	80 91 a6 00 	lds	r24, 0x00A6
    130a:	8b 77       	andi	r24, 0x7B	; 123
    130c:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1310:	20 97       	sbiw	r28, 0x00	; 0
    1312:	09 f7       	brne	.-62     	; 0x12d6 <USB_Host_SendControlRequest+0x158>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1314:	82 e0       	ldi	r24, 0x02	; 2
    1316:	0a df       	rcall	.-492    	; 0x112c <USB_Host_WaitForIOS>
    1318:	98 2f       	mov	r25, r24
    131a:	88 23       	and	r24, r24
    131c:	d1 f4       	brne	.+52     	; 0x1352 <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    131e:	80 91 a9 00 	lds	r24, 0x00A9
    1322:	80 64       	ori	r24, 0x40	; 64
    1324:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1328:	80 91 aa 00 	lds	r24, 0x00AA
    132c:	8f 7c       	andi	r24, 0xCF	; 207
    132e:	80 61       	ori	r24, 0x10	; 16
    1330:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1334:	80 91 a9 00 	lds	r24, 0x00A9
    1338:	8f 7b       	andi	r24, 0xBF	; 191
    133a:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	f5 de       	rcall	.-534    	; 0x112c <USB_Host_WaitForIOS>
    1342:	98 2f       	mov	r25, r24
    1344:	88 23       	and	r24, r24
    1346:	29 f4       	brne	.+10     	; 0x1352 <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1348:	80 91 a6 00 	lds	r24, 0x00A6
    134c:	8e 77       	andi	r24, 0x7E	; 126
    134e:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1352:	80 91 a9 00 	lds	r24, 0x00A9
    1356:	80 64       	ori	r24, 0x40	; 64
    1358:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    135c:	f0 fc       	sbrc	r15, 0
    135e:	05 c0       	rjmp	.+10     	; 0x136a <USB_Host_SendControlRequest+0x1ec>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1360:	80 91 9e 00 	lds	r24, 0x009E
    1364:	8e 7f       	andi	r24, 0xFE	; 254
    1366:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    1370:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1374:	89 2f       	mov	r24, r25
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	ff 90       	pop	r15
    1380:	08 95       	ret

00001382 <Pipe_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    1382:	ff 92       	push	r15
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	18 2f       	mov	r17, r24
    138e:	09 2f       	mov	r16, r25
    1390:	eb 01       	movw	r28, r22
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1392:	80 91 aa 00 	lds	r24, 0x00AA
    1396:	8f 7c       	andi	r24, 0xCF	; 207
    1398:	80 62       	ori	r24, 0x20	; 32
    139a:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    139e:	ee dc       	rcall	.-1572   	; 0xd7c <Pipe_WaitUntilReady>
    13a0:	f8 2e       	mov	r15, r24
    13a2:	88 23       	and	r24, r24
    13a4:	d1 f4       	brne	.+52     	; 0x13da <Pipe_Write_Stream_LE+0x58>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    13a6:	81 2f       	mov	r24, r17
    13a8:	90 2f       	mov	r25, r16
    13aa:	9c 01       	movw	r18, r24
    13ac:	89 01       	movw	r16, r18
    13ae:	13 c0       	rjmp	.+38     	; 0x13d6 <Pipe_Write_Stream_LE+0x54>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    13b0:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    13b4:	85 fd       	sbrc	r24, 5
    13b6:	09 c0       	rjmp	.+18     	; 0x13ca <Pipe_Write_Stream_LE+0x48>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    13b8:	80 91 a6 00 	lds	r24, 0x00A6
    13bc:	8b 77       	andi	r24, 0x7B	; 123
    13be:	80 93 a6 00 	sts	0x00A6, r24
			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    13c2:	dc dc       	rcall	.-1608   	; 0xd7c <Pipe_WaitUntilReady>
    13c4:	88 23       	and	r24, r24
    13c6:	39 f0       	breq	.+14     	; 0x13d6 <Pipe_Write_Stream_LE+0x54>
    13c8:	09 c0       	rjmp	.+18     	; 0x13dc <Pipe_Write_Stream_LE+0x5a>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    13ca:	f8 01       	movw	r30, r16
    13cc:	81 91       	ld	r24, Z+
    13ce:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    13d0:	80 93 af 00 	sts	0x00AF, r24
			Length--;
    13d4:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    13d6:	20 97       	sbiw	r28, 0x00	; 0
    13d8:	59 f7       	brne	.-42     	; 0x13b0 <Pipe_Write_Stream_LE+0x2e>
    13da:	8f 2d       	mov	r24, r15
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	08 95       	ret

000013e8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    13e8:	ff 92       	push	r15
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    13ee:	07 ea       	ldi	r16, 0xA7	; 167
    13f0:	10 e0       	ldi	r17, 0x00	; 0
    13f2:	f8 01       	movw	r30, r16
    13f4:	f0 80       	ld	r15, Z
    13f6:	f7 e0       	ldi	r31, 0x07	; 7
    13f8:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    13fa:	f8 01       	movw	r30, r16
    13fc:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    13fe:	46 db       	rcall	.-2420   	; 0xa8c <USB_Host_ProcessNextHostState>
    1400:	f8 01       	movw	r30, r16
    1402:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	ff 90       	pop	r15
    140a:	08 95       	ret

0000140c <SerialStream_TxByte>:

FILE USARTStream = FDEV_SETUP_STREAM(SerialStream_TxByte, SerialStream_RxByte, _FDEV_SETUP_RW);

static int SerialStream_TxByte(char DataByte,
                               FILE *Stream)
{
    140c:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    140e:	80 91 c8 00 	lds	r24, 0x00C8
    1412:	85 ff       	sbrs	r24, 5
    1414:	fc cf       	rjmp	.-8      	; 0x140e <SerialStream_TxByte+0x2>
				UDR1 = DataByte;
    1416:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_TxByte(DataByte);
	return 0;
}
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	08 95       	ret

00001420 <SerialStream_RxByte>:
			 *  \return Boolean true if a character has been received, false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1420:	80 91 c8 00 	lds	r24, 0x00C8

static int SerialStream_RxByte(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1424:	87 fd       	sbrc	r24, 7
    1426:	03 c0       	rjmp	.+6      	; 0x142e <SerialStream_RxByte+0xe>
    1428:	2e ef       	ldi	r18, 0xFE	; 254
    142a:	3f ef       	ldi	r19, 0xFF	; 255
    142c:	08 c0       	rjmp	.+16     	; 0x143e <SerialStream_RxByte+0x1e>
			 *  \return Byte received from the USART.
			 */
			static inline char Serial_RxByte(void) ATTR_ALWAYS_INLINE;
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
    142e:	80 91 c8 00 	lds	r24, 0x00C8
    1432:	87 ff       	sbrs	r24, 7
    1434:	fc cf       	rjmp	.-8      	; 0x142e <SerialStream_RxByte+0xe>
				return UDR1;
    1436:	80 91 ce 00 	lds	r24, 0x00CE
	  return _FDEV_EOF;

	return Serial_RxByte();
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
}
    143e:	c9 01       	movw	r24, r18
    1440:	08 95       	ret

00001442 <memmove>:
    1442:	68 17       	cp	r22, r24
    1444:	79 07       	cpc	r23, r25
    1446:	68 f4       	brcc	.+26     	; 0x1462 <memmove+0x20>
    1448:	fb 01       	movw	r30, r22
    144a:	dc 01       	movw	r26, r24
    144c:	e4 0f       	add	r30, r20
    144e:	f5 1f       	adc	r31, r21
    1450:	a4 0f       	add	r26, r20
    1452:	b5 1f       	adc	r27, r21
    1454:	02 c0       	rjmp	.+4      	; 0x145a <memmove+0x18>
    1456:	02 90       	ld	r0, -Z
    1458:	0e 92       	st	-X, r0
    145a:	41 50       	subi	r20, 0x01	; 1
    145c:	50 40       	sbci	r21, 0x00	; 0
    145e:	d8 f7       	brcc	.-10     	; 0x1456 <memmove+0x14>
    1460:	08 95       	ret
    1462:	5b c2       	rjmp	.+1206   	; 0x191a <memcpy>

00001464 <printf_P>:
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	fe 01       	movw	r30, r28
    146e:	35 96       	adiw	r30, 0x05	; 5
    1470:	61 91       	ld	r22, Z+
    1472:	71 91       	ld	r23, Z+
    1474:	a0 91 61 01 	lds	r26, 0x0161
    1478:	b0 91 62 01 	lds	r27, 0x0162
    147c:	13 96       	adiw	r26, 0x03	; 3
    147e:	8c 91       	ld	r24, X
    1480:	13 97       	sbiw	r26, 0x03	; 3
    1482:	88 60       	ori	r24, 0x08	; 8
    1484:	13 96       	adiw	r26, 0x03	; 3
    1486:	8c 93       	st	X, r24
    1488:	80 91 61 01 	lds	r24, 0x0161
    148c:	90 91 62 01 	lds	r25, 0x0162
    1490:	af 01       	movw	r20, r30
    1492:	3f d0       	rcall	.+126    	; 0x1512 <vfprintf>
    1494:	e0 91 61 01 	lds	r30, 0x0161
    1498:	f0 91 62 01 	lds	r31, 0x0162
    149c:	23 81       	ldd	r18, Z+3	; 0x03
    149e:	27 7f       	andi	r18, 0xF7	; 247
    14a0:	23 83       	std	Z+3, r18	; 0x03
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	08 95       	ret

000014a8 <puts_P>:
    14a8:	0f 93       	push	r16
    14aa:	1f 93       	push	r17
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	ec 01       	movw	r28, r24
    14b2:	e0 91 61 01 	lds	r30, 0x0161
    14b6:	f0 91 62 01 	lds	r31, 0x0162
    14ba:	83 81       	ldd	r24, Z+3	; 0x03
    14bc:	81 ff       	sbrs	r24, 1
    14be:	21 c0       	rjmp	.+66     	; 0x1502 <puts_P+0x5a>
    14c0:	00 e0       	ldi	r16, 0x00	; 0
    14c2:	10 e0       	ldi	r17, 0x00	; 0
    14c4:	0e c0       	rjmp	.+28     	; 0x14e2 <puts_P+0x3a>
    14c6:	e0 91 61 01 	lds	r30, 0x0161
    14ca:	f0 91 62 01 	lds	r31, 0x0162
    14ce:	20 85       	ldd	r18, Z+8	; 0x08
    14d0:	31 85       	ldd	r19, Z+9	; 0x09
    14d2:	bf 01       	movw	r22, r30
    14d4:	f9 01       	movw	r30, r18
    14d6:	09 95       	icall
    14d8:	89 2b       	or	r24, r25
    14da:	11 f0       	breq	.+4      	; 0x14e0 <puts_P+0x38>
    14dc:	0f ef       	ldi	r16, 0xFF	; 255
    14de:	1f ef       	ldi	r17, 0xFF	; 255
    14e0:	21 96       	adiw	r28, 0x01	; 1
    14e2:	fe 01       	movw	r30, r28
    14e4:	84 91       	lpm	r24, Z+
    14e6:	88 23       	and	r24, r24
    14e8:	71 f7       	brne	.-36     	; 0x14c6 <puts_P+0x1e>
    14ea:	e0 91 61 01 	lds	r30, 0x0161
    14ee:	f0 91 62 01 	lds	r31, 0x0162
    14f2:	20 85       	ldd	r18, Z+8	; 0x08
    14f4:	31 85       	ldd	r19, Z+9	; 0x09
    14f6:	8a e0       	ldi	r24, 0x0A	; 10
    14f8:	bf 01       	movw	r22, r30
    14fa:	f9 01       	movw	r30, r18
    14fc:	09 95       	icall
    14fe:	89 2b       	or	r24, r25
    1500:	11 f0       	breq	.+4      	; 0x1506 <puts_P+0x5e>
    1502:	0f ef       	ldi	r16, 0xFF	; 255
    1504:	1f ef       	ldi	r17, 0xFF	; 255
    1506:	c8 01       	movw	r24, r16
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	1f 91       	pop	r17
    150e:	0f 91       	pop	r16
    1510:	08 95       	ret

00001512 <vfprintf>:
    1512:	2f 92       	push	r2
    1514:	3f 92       	push	r3
    1516:	4f 92       	push	r4
    1518:	5f 92       	push	r5
    151a:	6f 92       	push	r6
    151c:	7f 92       	push	r7
    151e:	8f 92       	push	r8
    1520:	9f 92       	push	r9
    1522:	af 92       	push	r10
    1524:	bf 92       	push	r11
    1526:	cf 92       	push	r12
    1528:	df 92       	push	r13
    152a:	ef 92       	push	r14
    152c:	ff 92       	push	r15
    152e:	0f 93       	push	r16
    1530:	1f 93       	push	r17
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	2b 97       	sbiw	r28, 0x0b	; 11
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	f8 94       	cli
    1540:	de bf       	out	0x3e, r29	; 62
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	cd bf       	out	0x3d, r28	; 61
    1546:	3c 01       	movw	r6, r24
    1548:	2b 01       	movw	r4, r22
    154a:	5a 01       	movw	r10, r20
    154c:	fc 01       	movw	r30, r24
    154e:	17 82       	std	Z+7, r1	; 0x07
    1550:	16 82       	std	Z+6, r1	; 0x06
    1552:	83 81       	ldd	r24, Z+3	; 0x03
    1554:	81 fd       	sbrc	r24, 1
    1556:	03 c0       	rjmp	.+6      	; 0x155e <vfprintf+0x4c>
    1558:	6f ef       	ldi	r22, 0xFF	; 255
    155a:	7f ef       	ldi	r23, 0xFF	; 255
    155c:	b9 c1       	rjmp	.+882    	; 0x18d0 <vfprintf+0x3be>
    155e:	9a e0       	ldi	r25, 0x0A	; 10
    1560:	89 2e       	mov	r8, r25
    1562:	1e 01       	movw	r2, r28
    1564:	08 94       	sec
    1566:	21 1c       	adc	r2, r1
    1568:	31 1c       	adc	r3, r1
    156a:	f3 01       	movw	r30, r6
    156c:	23 81       	ldd	r18, Z+3	; 0x03
    156e:	f2 01       	movw	r30, r4
    1570:	23 fd       	sbrc	r18, 3
    1572:	85 91       	lpm	r24, Z+
    1574:	23 ff       	sbrs	r18, 3
    1576:	81 91       	ld	r24, Z+
    1578:	2f 01       	movw	r4, r30
    157a:	88 23       	and	r24, r24
    157c:	09 f4       	brne	.+2      	; 0x1580 <vfprintf+0x6e>
    157e:	a5 c1       	rjmp	.+842    	; 0x18ca <vfprintf+0x3b8>
    1580:	85 32       	cpi	r24, 0x25	; 37
    1582:	39 f4       	brne	.+14     	; 0x1592 <vfprintf+0x80>
    1584:	23 fd       	sbrc	r18, 3
    1586:	85 91       	lpm	r24, Z+
    1588:	23 ff       	sbrs	r18, 3
    158a:	81 91       	ld	r24, Z+
    158c:	2f 01       	movw	r4, r30
    158e:	85 32       	cpi	r24, 0x25	; 37
    1590:	21 f4       	brne	.+8      	; 0x159a <vfprintf+0x88>
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	b3 01       	movw	r22, r6
    1596:	d5 d1       	rcall	.+938    	; 0x1942 <fputc>
    1598:	e8 cf       	rjmp	.-48     	; 0x156a <vfprintf+0x58>
    159a:	98 2f       	mov	r25, r24
    159c:	ff 24       	eor	r15, r15
    159e:	ee 24       	eor	r14, r14
    15a0:	99 24       	eor	r9, r9
    15a2:	ff e1       	ldi	r31, 0x1F	; 31
    15a4:	ff 15       	cp	r31, r15
    15a6:	d0 f0       	brcs	.+52     	; 0x15dc <vfprintf+0xca>
    15a8:	9b 32       	cpi	r25, 0x2B	; 43
    15aa:	69 f0       	breq	.+26     	; 0x15c6 <vfprintf+0xb4>
    15ac:	9c 32       	cpi	r25, 0x2C	; 44
    15ae:	28 f4       	brcc	.+10     	; 0x15ba <vfprintf+0xa8>
    15b0:	90 32       	cpi	r25, 0x20	; 32
    15b2:	59 f0       	breq	.+22     	; 0x15ca <vfprintf+0xb8>
    15b4:	93 32       	cpi	r25, 0x23	; 35
    15b6:	91 f4       	brne	.+36     	; 0x15dc <vfprintf+0xca>
    15b8:	0e c0       	rjmp	.+28     	; 0x15d6 <vfprintf+0xc4>
    15ba:	9d 32       	cpi	r25, 0x2D	; 45
    15bc:	49 f0       	breq	.+18     	; 0x15d0 <vfprintf+0xbe>
    15be:	90 33       	cpi	r25, 0x30	; 48
    15c0:	69 f4       	brne	.+26     	; 0x15dc <vfprintf+0xca>
    15c2:	41 e0       	ldi	r20, 0x01	; 1
    15c4:	24 c0       	rjmp	.+72     	; 0x160e <vfprintf+0xfc>
    15c6:	52 e0       	ldi	r21, 0x02	; 2
    15c8:	f5 2a       	or	r15, r21
    15ca:	84 e0       	ldi	r24, 0x04	; 4
    15cc:	f8 2a       	or	r15, r24
    15ce:	28 c0       	rjmp	.+80     	; 0x1620 <vfprintf+0x10e>
    15d0:	98 e0       	ldi	r25, 0x08	; 8
    15d2:	f9 2a       	or	r15, r25
    15d4:	25 c0       	rjmp	.+74     	; 0x1620 <vfprintf+0x10e>
    15d6:	e0 e1       	ldi	r30, 0x10	; 16
    15d8:	fe 2a       	or	r15, r30
    15da:	22 c0       	rjmp	.+68     	; 0x1620 <vfprintf+0x10e>
    15dc:	f7 fc       	sbrc	r15, 7
    15de:	29 c0       	rjmp	.+82     	; 0x1632 <vfprintf+0x120>
    15e0:	89 2f       	mov	r24, r25
    15e2:	80 53       	subi	r24, 0x30	; 48
    15e4:	8a 30       	cpi	r24, 0x0A	; 10
    15e6:	70 f4       	brcc	.+28     	; 0x1604 <vfprintf+0xf2>
    15e8:	f6 fe       	sbrs	r15, 6
    15ea:	05 c0       	rjmp	.+10     	; 0x15f6 <vfprintf+0xe4>
    15ec:	98 9c       	mul	r9, r8
    15ee:	90 2c       	mov	r9, r0
    15f0:	11 24       	eor	r1, r1
    15f2:	98 0e       	add	r9, r24
    15f4:	15 c0       	rjmp	.+42     	; 0x1620 <vfprintf+0x10e>
    15f6:	e8 9c       	mul	r14, r8
    15f8:	e0 2c       	mov	r14, r0
    15fa:	11 24       	eor	r1, r1
    15fc:	e8 0e       	add	r14, r24
    15fe:	f0 e2       	ldi	r31, 0x20	; 32
    1600:	ff 2a       	or	r15, r31
    1602:	0e c0       	rjmp	.+28     	; 0x1620 <vfprintf+0x10e>
    1604:	9e 32       	cpi	r25, 0x2E	; 46
    1606:	29 f4       	brne	.+10     	; 0x1612 <vfprintf+0x100>
    1608:	f6 fc       	sbrc	r15, 6
    160a:	5f c1       	rjmp	.+702    	; 0x18ca <vfprintf+0x3b8>
    160c:	40 e4       	ldi	r20, 0x40	; 64
    160e:	f4 2a       	or	r15, r20
    1610:	07 c0       	rjmp	.+14     	; 0x1620 <vfprintf+0x10e>
    1612:	9c 36       	cpi	r25, 0x6C	; 108
    1614:	19 f4       	brne	.+6      	; 0x161c <vfprintf+0x10a>
    1616:	50 e8       	ldi	r21, 0x80	; 128
    1618:	f5 2a       	or	r15, r21
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <vfprintf+0x10e>
    161c:	98 36       	cpi	r25, 0x68	; 104
    161e:	49 f4       	brne	.+18     	; 0x1632 <vfprintf+0x120>
    1620:	f2 01       	movw	r30, r4
    1622:	23 fd       	sbrc	r18, 3
    1624:	95 91       	lpm	r25, Z+
    1626:	23 ff       	sbrs	r18, 3
    1628:	91 91       	ld	r25, Z+
    162a:	2f 01       	movw	r4, r30
    162c:	99 23       	and	r25, r25
    162e:	09 f0       	breq	.+2      	; 0x1632 <vfprintf+0x120>
    1630:	b8 cf       	rjmp	.-144    	; 0x15a2 <vfprintf+0x90>
    1632:	89 2f       	mov	r24, r25
    1634:	85 54       	subi	r24, 0x45	; 69
    1636:	83 30       	cpi	r24, 0x03	; 3
    1638:	18 f0       	brcs	.+6      	; 0x1640 <vfprintf+0x12e>
    163a:	80 52       	subi	r24, 0x20	; 32
    163c:	83 30       	cpi	r24, 0x03	; 3
    163e:	38 f4       	brcc	.+14     	; 0x164e <vfprintf+0x13c>
    1640:	44 e0       	ldi	r20, 0x04	; 4
    1642:	50 e0       	ldi	r21, 0x00	; 0
    1644:	a4 0e       	add	r10, r20
    1646:	b5 1e       	adc	r11, r21
    1648:	5f e3       	ldi	r21, 0x3F	; 63
    164a:	59 83       	std	Y+1, r21	; 0x01
    164c:	0f c0       	rjmp	.+30     	; 0x166c <vfprintf+0x15a>
    164e:	93 36       	cpi	r25, 0x63	; 99
    1650:	31 f0       	breq	.+12     	; 0x165e <vfprintf+0x14c>
    1652:	93 37       	cpi	r25, 0x73	; 115
    1654:	79 f0       	breq	.+30     	; 0x1674 <vfprintf+0x162>
    1656:	93 35       	cpi	r25, 0x53	; 83
    1658:	09 f0       	breq	.+2      	; 0x165c <vfprintf+0x14a>
    165a:	52 c0       	rjmp	.+164    	; 0x1700 <vfprintf+0x1ee>
    165c:	1f c0       	rjmp	.+62     	; 0x169c <vfprintf+0x18a>
    165e:	f5 01       	movw	r30, r10
    1660:	80 81       	ld	r24, Z
    1662:	89 83       	std	Y+1, r24	; 0x01
    1664:	42 e0       	ldi	r20, 0x02	; 2
    1666:	50 e0       	ldi	r21, 0x00	; 0
    1668:	a4 0e       	add	r10, r20
    166a:	b5 1e       	adc	r11, r21
    166c:	61 01       	movw	r12, r2
    166e:	01 e0       	ldi	r16, 0x01	; 1
    1670:	10 e0       	ldi	r17, 0x00	; 0
    1672:	11 c0       	rjmp	.+34     	; 0x1696 <vfprintf+0x184>
    1674:	f5 01       	movw	r30, r10
    1676:	c0 80       	ld	r12, Z
    1678:	d1 80       	ldd	r13, Z+1	; 0x01
    167a:	f6 fc       	sbrc	r15, 6
    167c:	03 c0       	rjmp	.+6      	; 0x1684 <vfprintf+0x172>
    167e:	6f ef       	ldi	r22, 0xFF	; 255
    1680:	7f ef       	ldi	r23, 0xFF	; 255
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <vfprintf+0x176>
    1684:	69 2d       	mov	r22, r9
    1686:	70 e0       	ldi	r23, 0x00	; 0
    1688:	42 e0       	ldi	r20, 0x02	; 2
    168a:	50 e0       	ldi	r21, 0x00	; 0
    168c:	a4 0e       	add	r10, r20
    168e:	b5 1e       	adc	r11, r21
    1690:	c6 01       	movw	r24, r12
    1692:	4c d1       	rcall	.+664    	; 0x192c <strnlen>
    1694:	8c 01       	movw	r16, r24
    1696:	5f e7       	ldi	r21, 0x7F	; 127
    1698:	f5 22       	and	r15, r21
    169a:	13 c0       	rjmp	.+38     	; 0x16c2 <vfprintf+0x1b0>
    169c:	f5 01       	movw	r30, r10
    169e:	c0 80       	ld	r12, Z
    16a0:	d1 80       	ldd	r13, Z+1	; 0x01
    16a2:	f6 fc       	sbrc	r15, 6
    16a4:	03 c0       	rjmp	.+6      	; 0x16ac <vfprintf+0x19a>
    16a6:	6f ef       	ldi	r22, 0xFF	; 255
    16a8:	7f ef       	ldi	r23, 0xFF	; 255
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <vfprintf+0x19e>
    16ac:	69 2d       	mov	r22, r9
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	42 e0       	ldi	r20, 0x02	; 2
    16b2:	50 e0       	ldi	r21, 0x00	; 0
    16b4:	a4 0e       	add	r10, r20
    16b6:	b5 1e       	adc	r11, r21
    16b8:	c6 01       	movw	r24, r12
    16ba:	24 d1       	rcall	.+584    	; 0x1904 <strnlen_P>
    16bc:	8c 01       	movw	r16, r24
    16be:	50 e8       	ldi	r21, 0x80	; 128
    16c0:	f5 2a       	or	r15, r21
    16c2:	f3 fe       	sbrs	r15, 3
    16c4:	06 c0       	rjmp	.+12     	; 0x16d2 <vfprintf+0x1c0>
    16c6:	18 c0       	rjmp	.+48     	; 0x16f8 <vfprintf+0x1e6>
    16c8:	80 e2       	ldi	r24, 0x20	; 32
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	b3 01       	movw	r22, r6
    16ce:	39 d1       	rcall	.+626    	; 0x1942 <fputc>
    16d0:	ea 94       	dec	r14
    16d2:	8e 2d       	mov	r24, r14
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	08 17       	cp	r16, r24
    16d8:	19 07       	cpc	r17, r25
    16da:	b0 f3       	brcs	.-20     	; 0x16c8 <vfprintf+0x1b6>
    16dc:	0d c0       	rjmp	.+26     	; 0x16f8 <vfprintf+0x1e6>
    16de:	f6 01       	movw	r30, r12
    16e0:	f7 fc       	sbrc	r15, 7
    16e2:	85 91       	lpm	r24, Z+
    16e4:	f7 fe       	sbrs	r15, 7
    16e6:	81 91       	ld	r24, Z+
    16e8:	6f 01       	movw	r12, r30
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	b3 01       	movw	r22, r6
    16ee:	29 d1       	rcall	.+594    	; 0x1942 <fputc>
    16f0:	e1 10       	cpse	r14, r1
    16f2:	ea 94       	dec	r14
    16f4:	01 50       	subi	r16, 0x01	; 1
    16f6:	10 40       	sbci	r17, 0x00	; 0
    16f8:	01 15       	cp	r16, r1
    16fa:	11 05       	cpc	r17, r1
    16fc:	81 f7       	brne	.-32     	; 0x16de <vfprintf+0x1cc>
    16fe:	e2 c0       	rjmp	.+452    	; 0x18c4 <vfprintf+0x3b2>
    1700:	94 36       	cpi	r25, 0x64	; 100
    1702:	11 f0       	breq	.+4      	; 0x1708 <vfprintf+0x1f6>
    1704:	99 36       	cpi	r25, 0x69	; 105
    1706:	61 f5       	brne	.+88     	; 0x1760 <vfprintf+0x24e>
    1708:	f7 fe       	sbrs	r15, 7
    170a:	08 c0       	rjmp	.+16     	; 0x171c <vfprintf+0x20a>
    170c:	f5 01       	movw	r30, r10
    170e:	20 81       	ld	r18, Z
    1710:	31 81       	ldd	r19, Z+1	; 0x01
    1712:	42 81       	ldd	r20, Z+2	; 0x02
    1714:	53 81       	ldd	r21, Z+3	; 0x03
    1716:	84 e0       	ldi	r24, 0x04	; 4
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	0a c0       	rjmp	.+20     	; 0x1730 <vfprintf+0x21e>
    171c:	f5 01       	movw	r30, r10
    171e:	80 81       	ld	r24, Z
    1720:	91 81       	ldd	r25, Z+1	; 0x01
    1722:	9c 01       	movw	r18, r24
    1724:	44 27       	eor	r20, r20
    1726:	37 fd       	sbrc	r19, 7
    1728:	40 95       	com	r20
    172a:	54 2f       	mov	r21, r20
    172c:	82 e0       	ldi	r24, 0x02	; 2
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	a8 0e       	add	r10, r24
    1732:	b9 1e       	adc	r11, r25
    1734:	9f e6       	ldi	r25, 0x6F	; 111
    1736:	f9 22       	and	r15, r25
    1738:	57 ff       	sbrs	r21, 7
    173a:	09 c0       	rjmp	.+18     	; 0x174e <vfprintf+0x23c>
    173c:	50 95       	com	r21
    173e:	40 95       	com	r20
    1740:	30 95       	com	r19
    1742:	21 95       	neg	r18
    1744:	3f 4f       	sbci	r19, 0xFF	; 255
    1746:	4f 4f       	sbci	r20, 0xFF	; 255
    1748:	5f 4f       	sbci	r21, 0xFF	; 255
    174a:	e0 e8       	ldi	r30, 0x80	; 128
    174c:	fe 2a       	or	r15, r30
    174e:	ca 01       	movw	r24, r20
    1750:	b9 01       	movw	r22, r18
    1752:	a1 01       	movw	r20, r2
    1754:	2a e0       	ldi	r18, 0x0A	; 10
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	20 d1       	rcall	.+576    	; 0x199a <__ultoa_invert>
    175a:	d8 2e       	mov	r13, r24
    175c:	d2 18       	sub	r13, r2
    175e:	3f c0       	rjmp	.+126    	; 0x17de <vfprintf+0x2cc>
    1760:	95 37       	cpi	r25, 0x75	; 117
    1762:	29 f4       	brne	.+10     	; 0x176e <vfprintf+0x25c>
    1764:	1f 2d       	mov	r17, r15
    1766:	1f 7e       	andi	r17, 0xEF	; 239
    1768:	2a e0       	ldi	r18, 0x0A	; 10
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	1d c0       	rjmp	.+58     	; 0x17a8 <vfprintf+0x296>
    176e:	1f 2d       	mov	r17, r15
    1770:	19 7f       	andi	r17, 0xF9	; 249
    1772:	9f 36       	cpi	r25, 0x6F	; 111
    1774:	61 f0       	breq	.+24     	; 0x178e <vfprintf+0x27c>
    1776:	90 37       	cpi	r25, 0x70	; 112
    1778:	20 f4       	brcc	.+8      	; 0x1782 <vfprintf+0x270>
    177a:	98 35       	cpi	r25, 0x58	; 88
    177c:	09 f0       	breq	.+2      	; 0x1780 <vfprintf+0x26e>
    177e:	a5 c0       	rjmp	.+330    	; 0x18ca <vfprintf+0x3b8>
    1780:	0f c0       	rjmp	.+30     	; 0x17a0 <vfprintf+0x28e>
    1782:	90 37       	cpi	r25, 0x70	; 112
    1784:	39 f0       	breq	.+14     	; 0x1794 <vfprintf+0x282>
    1786:	98 37       	cpi	r25, 0x78	; 120
    1788:	09 f0       	breq	.+2      	; 0x178c <vfprintf+0x27a>
    178a:	9f c0       	rjmp	.+318    	; 0x18ca <vfprintf+0x3b8>
    178c:	04 c0       	rjmp	.+8      	; 0x1796 <vfprintf+0x284>
    178e:	28 e0       	ldi	r18, 0x08	; 8
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	0a c0       	rjmp	.+20     	; 0x17a8 <vfprintf+0x296>
    1794:	10 61       	ori	r17, 0x10	; 16
    1796:	14 fd       	sbrc	r17, 4
    1798:	14 60       	ori	r17, 0x04	; 4
    179a:	20 e1       	ldi	r18, 0x10	; 16
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	04 c0       	rjmp	.+8      	; 0x17a8 <vfprintf+0x296>
    17a0:	14 fd       	sbrc	r17, 4
    17a2:	16 60       	ori	r17, 0x06	; 6
    17a4:	20 e1       	ldi	r18, 0x10	; 16
    17a6:	32 e0       	ldi	r19, 0x02	; 2
    17a8:	17 ff       	sbrs	r17, 7
    17aa:	08 c0       	rjmp	.+16     	; 0x17bc <vfprintf+0x2aa>
    17ac:	f5 01       	movw	r30, r10
    17ae:	60 81       	ld	r22, Z
    17b0:	71 81       	ldd	r23, Z+1	; 0x01
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	44 e0       	ldi	r20, 0x04	; 4
    17b8:	50 e0       	ldi	r21, 0x00	; 0
    17ba:	08 c0       	rjmp	.+16     	; 0x17cc <vfprintf+0x2ba>
    17bc:	f5 01       	movw	r30, r10
    17be:	80 81       	ld	r24, Z
    17c0:	91 81       	ldd	r25, Z+1	; 0x01
    17c2:	bc 01       	movw	r22, r24
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	42 e0       	ldi	r20, 0x02	; 2
    17ca:	50 e0       	ldi	r21, 0x00	; 0
    17cc:	a4 0e       	add	r10, r20
    17ce:	b5 1e       	adc	r11, r21
    17d0:	a1 01       	movw	r20, r2
    17d2:	e3 d0       	rcall	.+454    	; 0x199a <__ultoa_invert>
    17d4:	d8 2e       	mov	r13, r24
    17d6:	d2 18       	sub	r13, r2
    17d8:	8f e7       	ldi	r24, 0x7F	; 127
    17da:	f8 2e       	mov	r15, r24
    17dc:	f1 22       	and	r15, r17
    17de:	f6 fe       	sbrs	r15, 6
    17e0:	0b c0       	rjmp	.+22     	; 0x17f8 <vfprintf+0x2e6>
    17e2:	5e ef       	ldi	r21, 0xFE	; 254
    17e4:	f5 22       	and	r15, r21
    17e6:	d9 14       	cp	r13, r9
    17e8:	38 f4       	brcc	.+14     	; 0x17f8 <vfprintf+0x2e6>
    17ea:	f4 fe       	sbrs	r15, 4
    17ec:	07 c0       	rjmp	.+14     	; 0x17fc <vfprintf+0x2ea>
    17ee:	f2 fc       	sbrc	r15, 2
    17f0:	05 c0       	rjmp	.+10     	; 0x17fc <vfprintf+0x2ea>
    17f2:	8f ee       	ldi	r24, 0xEF	; 239
    17f4:	f8 22       	and	r15, r24
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <vfprintf+0x2ea>
    17f8:	1d 2d       	mov	r17, r13
    17fa:	01 c0       	rjmp	.+2      	; 0x17fe <vfprintf+0x2ec>
    17fc:	19 2d       	mov	r17, r9
    17fe:	f4 fe       	sbrs	r15, 4
    1800:	0d c0       	rjmp	.+26     	; 0x181c <vfprintf+0x30a>
    1802:	fe 01       	movw	r30, r28
    1804:	ed 0d       	add	r30, r13
    1806:	f1 1d       	adc	r31, r1
    1808:	80 81       	ld	r24, Z
    180a:	80 33       	cpi	r24, 0x30	; 48
    180c:	19 f4       	brne	.+6      	; 0x1814 <vfprintf+0x302>
    180e:	99 ee       	ldi	r25, 0xE9	; 233
    1810:	f9 22       	and	r15, r25
    1812:	08 c0       	rjmp	.+16     	; 0x1824 <vfprintf+0x312>
    1814:	1f 5f       	subi	r17, 0xFF	; 255
    1816:	f2 fe       	sbrs	r15, 2
    1818:	05 c0       	rjmp	.+10     	; 0x1824 <vfprintf+0x312>
    181a:	03 c0       	rjmp	.+6      	; 0x1822 <vfprintf+0x310>
    181c:	8f 2d       	mov	r24, r15
    181e:	86 78       	andi	r24, 0x86	; 134
    1820:	09 f0       	breq	.+2      	; 0x1824 <vfprintf+0x312>
    1822:	1f 5f       	subi	r17, 0xFF	; 255
    1824:	0f 2d       	mov	r16, r15
    1826:	f3 fc       	sbrc	r15, 3
    1828:	13 c0       	rjmp	.+38     	; 0x1850 <vfprintf+0x33e>
    182a:	f0 fe       	sbrs	r15, 0
    182c:	0e c0       	rjmp	.+28     	; 0x184a <vfprintf+0x338>
    182e:	1e 15       	cp	r17, r14
    1830:	10 f0       	brcs	.+4      	; 0x1836 <vfprintf+0x324>
    1832:	9d 2c       	mov	r9, r13
    1834:	0a c0       	rjmp	.+20     	; 0x184a <vfprintf+0x338>
    1836:	9d 2c       	mov	r9, r13
    1838:	9e 0c       	add	r9, r14
    183a:	91 1a       	sub	r9, r17
    183c:	1e 2d       	mov	r17, r14
    183e:	05 c0       	rjmp	.+10     	; 0x184a <vfprintf+0x338>
    1840:	80 e2       	ldi	r24, 0x20	; 32
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	b3 01       	movw	r22, r6
    1846:	7d d0       	rcall	.+250    	; 0x1942 <fputc>
    1848:	1f 5f       	subi	r17, 0xFF	; 255
    184a:	1e 15       	cp	r17, r14
    184c:	c8 f3       	brcs	.-14     	; 0x1840 <vfprintf+0x32e>
    184e:	04 c0       	rjmp	.+8      	; 0x1858 <vfprintf+0x346>
    1850:	1e 15       	cp	r17, r14
    1852:	10 f4       	brcc	.+4      	; 0x1858 <vfprintf+0x346>
    1854:	e1 1a       	sub	r14, r17
    1856:	01 c0       	rjmp	.+2      	; 0x185a <vfprintf+0x348>
    1858:	ee 24       	eor	r14, r14
    185a:	04 ff       	sbrs	r16, 4
    185c:	0e c0       	rjmp	.+28     	; 0x187a <vfprintf+0x368>
    185e:	80 e3       	ldi	r24, 0x30	; 48
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	b3 01       	movw	r22, r6
    1864:	6e d0       	rcall	.+220    	; 0x1942 <fputc>
    1866:	02 ff       	sbrs	r16, 2
    1868:	1b c0       	rjmp	.+54     	; 0x18a0 <vfprintf+0x38e>
    186a:	01 fd       	sbrc	r16, 1
    186c:	03 c0       	rjmp	.+6      	; 0x1874 <vfprintf+0x362>
    186e:	88 e7       	ldi	r24, 0x78	; 120
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	0e c0       	rjmp	.+28     	; 0x1890 <vfprintf+0x37e>
    1874:	88 e5       	ldi	r24, 0x58	; 88
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0b c0       	rjmp	.+22     	; 0x1890 <vfprintf+0x37e>
    187a:	80 2f       	mov	r24, r16
    187c:	86 78       	andi	r24, 0x86	; 134
    187e:	81 f0       	breq	.+32     	; 0x18a0 <vfprintf+0x38e>
    1880:	01 ff       	sbrs	r16, 1
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <vfprintf+0x376>
    1884:	8b e2       	ldi	r24, 0x2B	; 43
    1886:	01 c0       	rjmp	.+2      	; 0x188a <vfprintf+0x378>
    1888:	80 e2       	ldi	r24, 0x20	; 32
    188a:	f7 fc       	sbrc	r15, 7
    188c:	8d e2       	ldi	r24, 0x2D	; 45
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	b3 01       	movw	r22, r6
    1892:	57 d0       	rcall	.+174    	; 0x1942 <fputc>
    1894:	05 c0       	rjmp	.+10     	; 0x18a0 <vfprintf+0x38e>
    1896:	80 e3       	ldi	r24, 0x30	; 48
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	b3 01       	movw	r22, r6
    189c:	52 d0       	rcall	.+164    	; 0x1942 <fputc>
    189e:	9a 94       	dec	r9
    18a0:	d9 14       	cp	r13, r9
    18a2:	c8 f3       	brcs	.-14     	; 0x1896 <vfprintf+0x384>
    18a4:	da 94       	dec	r13
    18a6:	f1 01       	movw	r30, r2
    18a8:	ed 0d       	add	r30, r13
    18aa:	f1 1d       	adc	r31, r1
    18ac:	80 81       	ld	r24, Z
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	b3 01       	movw	r22, r6
    18b2:	47 d0       	rcall	.+142    	; 0x1942 <fputc>
    18b4:	dd 20       	and	r13, r13
    18b6:	b1 f7       	brne	.-20     	; 0x18a4 <vfprintf+0x392>
    18b8:	05 c0       	rjmp	.+10     	; 0x18c4 <vfprintf+0x3b2>
    18ba:	80 e2       	ldi	r24, 0x20	; 32
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	b3 01       	movw	r22, r6
    18c0:	40 d0       	rcall	.+128    	; 0x1942 <fputc>
    18c2:	ea 94       	dec	r14
    18c4:	ee 20       	and	r14, r14
    18c6:	c9 f7       	brne	.-14     	; 0x18ba <vfprintf+0x3a8>
    18c8:	50 ce       	rjmp	.-864    	; 0x156a <vfprintf+0x58>
    18ca:	f3 01       	movw	r30, r6
    18cc:	66 81       	ldd	r22, Z+6	; 0x06
    18ce:	77 81       	ldd	r23, Z+7	; 0x07
    18d0:	cb 01       	movw	r24, r22
    18d2:	2b 96       	adiw	r28, 0x0b	; 11
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
    18de:	cf 91       	pop	r28
    18e0:	df 91       	pop	r29
    18e2:	1f 91       	pop	r17
    18e4:	0f 91       	pop	r16
    18e6:	ff 90       	pop	r15
    18e8:	ef 90       	pop	r14
    18ea:	df 90       	pop	r13
    18ec:	cf 90       	pop	r12
    18ee:	bf 90       	pop	r11
    18f0:	af 90       	pop	r10
    18f2:	9f 90       	pop	r9
    18f4:	8f 90       	pop	r8
    18f6:	7f 90       	pop	r7
    18f8:	6f 90       	pop	r6
    18fa:	5f 90       	pop	r5
    18fc:	4f 90       	pop	r4
    18fe:	3f 90       	pop	r3
    1900:	2f 90       	pop	r2
    1902:	08 95       	ret

00001904 <strnlen_P>:
    1904:	fc 01       	movw	r30, r24
    1906:	05 90       	lpm	r0, Z+
    1908:	61 50       	subi	r22, 0x01	; 1
    190a:	70 40       	sbci	r23, 0x00	; 0
    190c:	01 10       	cpse	r0, r1
    190e:	d8 f7       	brcc	.-10     	; 0x1906 <strnlen_P+0x2>
    1910:	80 95       	com	r24
    1912:	90 95       	com	r25
    1914:	8e 0f       	add	r24, r30
    1916:	9f 1f       	adc	r25, r31
    1918:	08 95       	ret

0000191a <memcpy>:
    191a:	fb 01       	movw	r30, r22
    191c:	dc 01       	movw	r26, r24
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <memcpy+0xa>
    1920:	01 90       	ld	r0, Z+
    1922:	0d 92       	st	X+, r0
    1924:	41 50       	subi	r20, 0x01	; 1
    1926:	50 40       	sbci	r21, 0x00	; 0
    1928:	d8 f7       	brcc	.-10     	; 0x1920 <memcpy+0x6>
    192a:	08 95       	ret

0000192c <strnlen>:
    192c:	fc 01       	movw	r30, r24
    192e:	61 50       	subi	r22, 0x01	; 1
    1930:	70 40       	sbci	r23, 0x00	; 0
    1932:	01 90       	ld	r0, Z+
    1934:	01 10       	cpse	r0, r1
    1936:	d8 f7       	brcc	.-10     	; 0x192e <strnlen+0x2>
    1938:	80 95       	com	r24
    193a:	90 95       	com	r25
    193c:	8e 0f       	add	r24, r30
    193e:	9f 1f       	adc	r25, r31
    1940:	08 95       	ret

00001942 <fputc>:
    1942:	0f 93       	push	r16
    1944:	1f 93       	push	r17
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	8c 01       	movw	r16, r24
    194c:	eb 01       	movw	r28, r22
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	81 ff       	sbrs	r24, 1
    1952:	1b c0       	rjmp	.+54     	; 0x198a <fputc+0x48>
    1954:	82 ff       	sbrs	r24, 2
    1956:	0d c0       	rjmp	.+26     	; 0x1972 <fputc+0x30>
    1958:	2e 81       	ldd	r18, Y+6	; 0x06
    195a:	3f 81       	ldd	r19, Y+7	; 0x07
    195c:	8c 81       	ldd	r24, Y+4	; 0x04
    195e:	9d 81       	ldd	r25, Y+5	; 0x05
    1960:	28 17       	cp	r18, r24
    1962:	39 07       	cpc	r19, r25
    1964:	64 f4       	brge	.+24     	; 0x197e <fputc+0x3c>
    1966:	e8 81       	ld	r30, Y
    1968:	f9 81       	ldd	r31, Y+1	; 0x01
    196a:	01 93       	st	Z+, r16
    196c:	f9 83       	std	Y+1, r31	; 0x01
    196e:	e8 83       	st	Y, r30
    1970:	06 c0       	rjmp	.+12     	; 0x197e <fputc+0x3c>
    1972:	e8 85       	ldd	r30, Y+8	; 0x08
    1974:	f9 85       	ldd	r31, Y+9	; 0x09
    1976:	80 2f       	mov	r24, r16
    1978:	09 95       	icall
    197a:	89 2b       	or	r24, r25
    197c:	31 f4       	brne	.+12     	; 0x198a <fputc+0x48>
    197e:	8e 81       	ldd	r24, Y+6	; 0x06
    1980:	9f 81       	ldd	r25, Y+7	; 0x07
    1982:	01 96       	adiw	r24, 0x01	; 1
    1984:	9f 83       	std	Y+7, r25	; 0x07
    1986:	8e 83       	std	Y+6, r24	; 0x06
    1988:	02 c0       	rjmp	.+4      	; 0x198e <fputc+0x4c>
    198a:	0f ef       	ldi	r16, 0xFF	; 255
    198c:	1f ef       	ldi	r17, 0xFF	; 255
    198e:	c8 01       	movw	r24, r16
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	1f 91       	pop	r17
    1996:	0f 91       	pop	r16
    1998:	08 95       	ret

0000199a <__ultoa_invert>:
    199a:	fa 01       	movw	r30, r20
    199c:	aa 27       	eor	r26, r26
    199e:	28 30       	cpi	r18, 0x08	; 8
    19a0:	51 f1       	breq	.+84     	; 0x19f6 <__ultoa_invert+0x5c>
    19a2:	20 31       	cpi	r18, 0x10	; 16
    19a4:	81 f1       	breq	.+96     	; 0x1a06 <__ultoa_invert+0x6c>
    19a6:	e8 94       	clt
    19a8:	6f 93       	push	r22
    19aa:	6e 7f       	andi	r22, 0xFE	; 254
    19ac:	6e 5f       	subi	r22, 0xFE	; 254
    19ae:	7f 4f       	sbci	r23, 0xFF	; 255
    19b0:	8f 4f       	sbci	r24, 0xFF	; 255
    19b2:	9f 4f       	sbci	r25, 0xFF	; 255
    19b4:	af 4f       	sbci	r26, 0xFF	; 255
    19b6:	b1 e0       	ldi	r27, 0x01	; 1
    19b8:	3e d0       	rcall	.+124    	; 0x1a36 <__ultoa_invert+0x9c>
    19ba:	b4 e0       	ldi	r27, 0x04	; 4
    19bc:	3c d0       	rcall	.+120    	; 0x1a36 <__ultoa_invert+0x9c>
    19be:	67 0f       	add	r22, r23
    19c0:	78 1f       	adc	r23, r24
    19c2:	89 1f       	adc	r24, r25
    19c4:	9a 1f       	adc	r25, r26
    19c6:	a1 1d       	adc	r26, r1
    19c8:	68 0f       	add	r22, r24
    19ca:	79 1f       	adc	r23, r25
    19cc:	8a 1f       	adc	r24, r26
    19ce:	91 1d       	adc	r25, r1
    19d0:	a1 1d       	adc	r26, r1
    19d2:	6a 0f       	add	r22, r26
    19d4:	71 1d       	adc	r23, r1
    19d6:	81 1d       	adc	r24, r1
    19d8:	91 1d       	adc	r25, r1
    19da:	a1 1d       	adc	r26, r1
    19dc:	20 d0       	rcall	.+64     	; 0x1a1e <__ultoa_invert+0x84>
    19de:	09 f4       	brne	.+2      	; 0x19e2 <__ultoa_invert+0x48>
    19e0:	68 94       	set
    19e2:	3f 91       	pop	r19
    19e4:	2a e0       	ldi	r18, 0x0A	; 10
    19e6:	26 9f       	mul	r18, r22
    19e8:	11 24       	eor	r1, r1
    19ea:	30 19       	sub	r19, r0
    19ec:	30 5d       	subi	r19, 0xD0	; 208
    19ee:	31 93       	st	Z+, r19
    19f0:	de f6       	brtc	.-74     	; 0x19a8 <__ultoa_invert+0xe>
    19f2:	cf 01       	movw	r24, r30
    19f4:	08 95       	ret
    19f6:	46 2f       	mov	r20, r22
    19f8:	47 70       	andi	r20, 0x07	; 7
    19fa:	40 5d       	subi	r20, 0xD0	; 208
    19fc:	41 93       	st	Z+, r20
    19fe:	b3 e0       	ldi	r27, 0x03	; 3
    1a00:	0f d0       	rcall	.+30     	; 0x1a20 <__ultoa_invert+0x86>
    1a02:	c9 f7       	brne	.-14     	; 0x19f6 <__ultoa_invert+0x5c>
    1a04:	f6 cf       	rjmp	.-20     	; 0x19f2 <__ultoa_invert+0x58>
    1a06:	46 2f       	mov	r20, r22
    1a08:	4f 70       	andi	r20, 0x0F	; 15
    1a0a:	40 5d       	subi	r20, 0xD0	; 208
    1a0c:	4a 33       	cpi	r20, 0x3A	; 58
    1a0e:	18 f0       	brcs	.+6      	; 0x1a16 <__ultoa_invert+0x7c>
    1a10:	49 5d       	subi	r20, 0xD9	; 217
    1a12:	31 fd       	sbrc	r19, 1
    1a14:	40 52       	subi	r20, 0x20	; 32
    1a16:	41 93       	st	Z+, r20
    1a18:	02 d0       	rcall	.+4      	; 0x1a1e <__ultoa_invert+0x84>
    1a1a:	a9 f7       	brne	.-22     	; 0x1a06 <__ultoa_invert+0x6c>
    1a1c:	ea cf       	rjmp	.-44     	; 0x19f2 <__ultoa_invert+0x58>
    1a1e:	b4 e0       	ldi	r27, 0x04	; 4
    1a20:	a6 95       	lsr	r26
    1a22:	97 95       	ror	r25
    1a24:	87 95       	ror	r24
    1a26:	77 95       	ror	r23
    1a28:	67 95       	ror	r22
    1a2a:	ba 95       	dec	r27
    1a2c:	c9 f7       	brne	.-14     	; 0x1a20 <__ultoa_invert+0x86>
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	61 05       	cpc	r22, r1
    1a32:	71 05       	cpc	r23, r1
    1a34:	08 95       	ret
    1a36:	9b 01       	movw	r18, r22
    1a38:	ac 01       	movw	r20, r24
    1a3a:	0a 2e       	mov	r0, r26
    1a3c:	06 94       	lsr	r0
    1a3e:	57 95       	ror	r21
    1a40:	47 95       	ror	r20
    1a42:	37 95       	ror	r19
    1a44:	27 95       	ror	r18
    1a46:	ba 95       	dec	r27
    1a48:	c9 f7       	brne	.-14     	; 0x1a3c <__ultoa_invert+0xa2>
    1a4a:	62 0f       	add	r22, r18
    1a4c:	73 1f       	adc	r23, r19
    1a4e:	84 1f       	adc	r24, r20
    1a50:	95 1f       	adc	r25, r21
    1a52:	a0 1d       	adc	r26, r0
    1a54:	08 95       	ret

00001a56 <_exit>:
    1a56:	f8 94       	cli

00001a58 <__stop_program>:
    1a58:	ff cf       	rjmp	.-2      	; 0x1a58 <__stop_program>
