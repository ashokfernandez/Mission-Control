
MassStorageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  0000246c  00002500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000246c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080013c  0080013c  0000253c  2**0
                  ALLOC
  3 .stab         00000fa8  00000000  00000000  0000253c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000313  00000000  00000000  000034e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000410  00000000  00000000  000037f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000008ca  00000000  00000000  00003c07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006099  00000000  00000000  000044d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001e54  00000000  00000000  0000a56a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000046bd  00000000  00000000  0000c3be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005c0  00000000  00000000  00010a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002740  00000000  00000000  0001103c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002ada  00000000  00000000  0001377c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000500  00000000  00000000  00016256  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
uint8_t MassStore_WriteDeviceBlock(const uint8_t LUNIndex,
                                   const uint32_t BlockAddress,
                                   const uint8_t Blocks,
                                   const uint16_t BlockSize,
                                   void* BufferPtr)
{
       0:	26 c2       	rjmp	.+1100   	; 0x44e <__ctors_end>
}

uint8_t USB_Host_GetDeviceStringDescriptor(const uint8_t Index,
                                           void* const Buffer,
                                           const uint8_t BufferLength)
{
       2:	00 00       	nop
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       4:	42 c2       	rjmp	.+1156   	; 0x48a <__bad_interrupt>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       6:	00 00       	nop
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       8:	40 c2       	rjmp	.+1152   	; 0x48a <__bad_interrupt>
       a:	00 00       	nop
       c:	3e c2       	rjmp	.+1148   	; 0x48a <__bad_interrupt>
       e:	00 00       	nop
      10:	3c c2       	rjmp	.+1144   	; 0x48a <__bad_interrupt>
      12:	00 00       	nop
      14:	3a c2       	rjmp	.+1140   	; 0x48a <__bad_interrupt>
      16:	00 00       	nop
      18:	38 c2       	rjmp	.+1136   	; 0x48a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	36 c2       	rjmp	.+1132   	; 0x48a <__bad_interrupt>
      1e:	00 00       	nop
      20:	34 c2       	rjmp	.+1128   	; 0x48a <__bad_interrupt>
      22:	00 00       	nop
      24:	32 c2       	rjmp	.+1124   	; 0x48a <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__vector_10>
      2c:	2e c2       	rjmp	.+1116   	; 0x48a <__bad_interrupt>
      2e:	00 00       	nop
      30:	2c c2       	rjmp	.+1112   	; 0x48a <__bad_interrupt>
      32:	00 00       	nop
      34:	2a c2       	rjmp	.+1108   	; 0x48a <__bad_interrupt>
      36:	00 00       	nop
      38:	28 c2       	rjmp	.+1104   	; 0x48a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	26 c2       	rjmp	.+1100   	; 0x48a <__bad_interrupt>
      3e:	00 00       	nop
      40:	24 c2       	rjmp	.+1096   	; 0x48a <__bad_interrupt>
      42:	00 00       	nop
      44:	22 c2       	rjmp	.+1092   	; 0x48a <__bad_interrupt>
      46:	00 00       	nop
      48:	20 c2       	rjmp	.+1088   	; 0x48a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1e c2       	rjmp	.+1084   	; 0x48a <__bad_interrupt>
      4e:	00 00       	nop
      50:	1c c2       	rjmp	.+1080   	; 0x48a <__bad_interrupt>
      52:	00 00       	nop
      54:	1a c2       	rjmp	.+1076   	; 0x48a <__bad_interrupt>
      56:	00 00       	nop
      58:	18 c2       	rjmp	.+1072   	; 0x48a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	16 c2       	rjmp	.+1068   	; 0x48a <__bad_interrupt>
      5e:	00 00       	nop
      60:	14 c2       	rjmp	.+1064   	; 0x48a <__bad_interrupt>
      62:	00 00       	nop
      64:	12 c2       	rjmp	.+1060   	; 0x48a <__bad_interrupt>
      66:	00 00       	nop
      68:	10 c2       	rjmp	.+1056   	; 0x48a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0e c2       	rjmp	.+1052   	; 0x48a <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c c2       	rjmp	.+1048   	; 0x48a <__bad_interrupt>
      72:	00 00       	nop
      74:	0a c2       	rjmp	.+1044   	; 0x48a <__bad_interrupt>
      76:	00 00       	nop
      78:	08 c2       	rjmp	.+1040   	; 0x48a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	06 c2       	rjmp	.+1036   	; 0x48a <__bad_interrupt>
      7e:	00 00       	nop
      80:	04 c2       	rjmp	.+1032   	; 0x48a <__bad_interrupt>
      82:	00 00       	nop
      84:	02 c2       	rjmp	.+1028   	; 0x48a <__bad_interrupt>
      86:	00 00       	nop
      88:	00 c2       	rjmp	.+1024   	; 0x48a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fe c1       	rjmp	.+1020   	; 0x48a <__bad_interrupt>
      8e:	00 00       	nop
      90:	fc c1       	rjmp	.+1016   	; 0x48a <__bad_interrupt>
      92:	00 00       	nop
      94:	fa c1       	rjmp	.+1012   	; 0x48a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4369>:
      98:	20 20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a       -- Error Code:
      a8:	20 25 64 1b 5b 33 37 6d 00                           %d.[37m.

000000b1 <__c.4367>:
      b1:	1b 5b 33 31 6d 43 6f 6d 6d 61 6e 64 20 65 72 72     .[31mCommand err
      c1:	6f 72 20 28 25 53 29 2e 0d 0a 00                    or (%S)....

000000cc <__c.4365>:
      cc:	1b 5b 33 31 6d 53 43 53 49 20 63 6f 6d 6d 61 6e     .[31mSCSI comman
      dc:	64 20 65 72 72 6f 72 20 28 25 53 29 2e 0d 0a 00     d error (%S)....

000000ec <__c.4295>:
      ec:	52 65 61 64 20 44 65 76 69 63 65 20 42 6c 6f 63     Read Device Bloc
      fc:	6b 00                                               k.

000000fe <__c.4289>:
      fe:	0d 0a 0d 0a 50 72 65 73 73 20 62 6f 61 72 64 20     ....Press board 
     10e:	62 75 74 74 6f 6e 20 74 6f 20 72 65 61 64 20 65     button to read e
     11e:	6e 74 69 72 65 20 41 53 43 49 49 20 63 6f 6e 74     ntire ASCII cont
     12e:	65 6e 74 73 20 6f 66 20 64 69 73 6b 2e 2e 2e 0d     ents of disk....
     13e:	0a 0d 0a 00                                         ....

00000142 <__c.4284>:
     142:	0d 0a 00                                            ...

00000145 <__c.4277>:
     145:	20 20 20 20 00                                          .

0000014a <__c.4272>:
     14a:	25 2e 32 58 20 00                                   %.2X .

00000150 <__c.4266>:
     150:	0d 0a 43 6f 6e 74 65 6e 74 73 20 6f 66 20 66 69     ..Contents of fi
     160:	72 73 74 20 62 6c 6f 63 6b 3a 0d 0a 00              rst block:...

0000016d <__c.4264>:
     16d:	52 65 61 64 20 44 65 76 69 63 65 20 42 6c 6f 63     Read Device Bloc
     17d:	6b 00                                               k.

0000017f <__c.4261>:
     17f:	25 6c 75 20 62 6c 6f 63 6b 73 20 6f 66 20 25 6c     %lu blocks of %l
     18f:	75 20 62 79 74 65 73 2e 0d 0a 00                    u bytes....

0000019a <__c.4259>:
     19a:	52 65 61 64 20 43 61 70 61 63 69 74 79 00           Read Capacity.

000001a8 <__c.4256>:
     1a8:	0d 0a 52 65 74 72 69 65 76 69 6e 67 20 43 61 70     ..Retrieving Cap
     1b8:	61 63 69 74 79 2e 2e 2e 20 00                       acity... .

000001c2 <__c.4253>:
     1c2:	54 65 73 74 20 55 6e 69 74 20 52 65 61 64 79 00     Test Unit Ready.

000001d2 <__c.4250>:
     1d2:	57 61 69 74 69 6e 67 20 75 6e 74 69 6c 20 72 65     Waiting until re
     1e2:	61 64 79 2e 2e 00                                   ady...

000001e8 <__c.4248>:
     1e8:	56 65 6e 64 6f 72 20 22 25 2e 38 73 22 2c 20 50     Vendor "%.8s", P
     1f8:	72 6f 64 75 63 74 20 22 25 2e 31 36 73 22 0d 0a     roduct "%.16s"..
     208:	00                                                  .

00000209 <__c.4246>:
     209:	49 6e 71 75 69 72 79 00                             Inquiry.

00000211 <__c.4243>:
     211:	50 72 65 76 65 6e 74 2f 41 6c 6c 6f 77 20 4d 65     Prevent/Allow Me
     221:	64 69 75 6d 20 52 65 6d 6f 76 61 6c 00              dium Removal.

0000022e <__c.4241>:
     22e:	52 65 71 75 65 73 74 20 53 65 6e 73 65 00           Request Sense.

0000023c <__c.4238>:
     23c:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 52 65 73     Mass Storage Res
     24c:	65 74 00                                            et.

0000024f <__c.4236>:
     24f:	54 6f 74 61 6c 20 4c 55 4e 73 3a 20 25 64 20 2d     Total LUNs: %d -
     25f:	20 55 73 69 6e 67 20 66 69 72 73 74 20 4c 55 4e      Using first LUN
     26f:	20 69 6e 20 64 65 76 69 63 65 2e 0d 0a 00            in device....

0000027d <__c.4234>:
     27d:	47 65 74 20 4d 61 78 20 4c 55 4e 00                 Get Max LUN.

00000289 <__c.4231>:
     289:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 44 69 73     Mass Storage Dis
     299:	6b 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d 0a 00     k Enumerated....

000002a9 <__c.4229>:
     2a9:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     2b9:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     2c9:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     2d9:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     2e9:	37 6d 00                                            7m.

000002ec <__c.4226>:
     2ec:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     2fc:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

00000306 <__c.4224>:
     306:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     316:	69 63 65 2e 0d 0a 00                                ice....

0000031d <__c.4222>:
     31d:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     32d:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     33d:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000347 <__c.4220>:
     347:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     357:	61 74 61 2e 0d 0a 00                                ata....

0000035e <__c.4209>:
     35e:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     36e:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     37e:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     38e:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     39e:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     3ae:	1b 5b 33 37 6d 00                                   .[37m.

000003b4 <__c.4201>:
     3b4:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     3c4:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     3d4:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

000003e3 <__c.4193>:
     3e3:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     3f3:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     403:	00                                                  .

00000404 <__c.4188>:
     404:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     414:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000421 <__c.4174>:
     421:	1b 5b 33 36 6d 4d 61 73 73 20 53 74 6f 72 61 67     .[36mMass Storag
     431:	65 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     e Host Demo runn
     441:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00              ing....[37m..

0000044e <__ctors_end>:
     44e:	11 24       	eor	r1, r1
     450:	1f be       	out	0x3f, r1	; 63
     452:	cf ef       	ldi	r28, 0xFF	; 255
     454:	d0 e2       	ldi	r29, 0x20	; 32
     456:	de bf       	out	0x3e, r29	; 62
     458:	cd bf       	out	0x3d, r28	; 61

0000045a <__do_copy_data>:
     45a:	11 e0       	ldi	r17, 0x01	; 1
     45c:	a0 e0       	ldi	r26, 0x00	; 0
     45e:	b1 e0       	ldi	r27, 0x01	; 1
     460:	ec e6       	ldi	r30, 0x6C	; 108
     462:	f4 e2       	ldi	r31, 0x24	; 36
     464:	00 e0       	ldi	r16, 0x00	; 0
     466:	0b bf       	out	0x3b, r16	; 59
     468:	02 c0       	rjmp	.+4      	; 0x46e <__do_copy_data+0x14>
     46a:	07 90       	elpm	r0, Z+
     46c:	0d 92       	st	X+, r0
     46e:	ac 33       	cpi	r26, 0x3C	; 60
     470:	b1 07       	cpc	r27, r17
     472:	d9 f7       	brne	.-10     	; 0x46a <__do_copy_data+0x10>

00000474 <__do_clear_bss>:
     474:	11 e0       	ldi	r17, 0x01	; 1
     476:	ac e3       	ldi	r26, 0x3C	; 60
     478:	b1 e0       	ldi	r27, 0x01	; 1
     47a:	01 c0       	rjmp	.+2      	; 0x47e <.do_clear_bss_start>

0000047c <.do_clear_bss_loop>:
     47c:	1d 92       	st	X+, r1

0000047e <.do_clear_bss_start>:
     47e:	a0 35       	cpi	r26, 0x50	; 80
     480:	b1 07       	cpc	r27, r17
     482:	e1 f7       	brne	.-8      	; 0x47c <.do_clear_bss_loop>
     484:	29 d3       	rcall	.+1618   	; 0xad8 <main>
     486:	0c 94 34 12 	jmp	0x2468	; 0x2468 <_exit>

0000048a <__bad_interrupt>:
     48a:	ba cd       	rjmp	.-1164   	; 0x0 <__vectors>

0000048c <EVENT_USB_Host_DeviceEnumerationComplete>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     48c:	8b b1       	in	r24, 0x0b	; 11
     48e:	8f 70       	andi	r24, 0x0F	; 15
     490:	80 66       	ori	r24, 0x60	; 96
     492:	8b b9       	out	0x0b, r24	; 11
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     494:	08 95       	ret

00000496 <ShowDiskReadError>:
 *  \param[in] CommandString  ASCII string located in PROGMEM space indicating what operation failed
 *  \param[in] ErrorCode      Error code of the function which failed to complete successfully
 */
void ShowDiskReadError(char* CommandString,
                       const uint8_t ErrorCode)
{
     496:	1f 93       	push	r17
     498:	9c 01       	movw	r18, r24
     49a:	16 2f       	mov	r17, r22
	if (ErrorCode == MASS_STORE_SCSI_COMMAND_FAILED)
     49c:	60 3c       	cpi	r22, 0xC0	; 192
     49e:	79 f4       	brne	.+30     	; 0x4be <ShowDiskReadError+0x28>
	{
		/* Display the error code */
		printf_P(PSTR(ESC_FG_RED "SCSI command error (%S).\r\n"), CommandString);
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <ShowDiskReadError+0xc>
     4a2:	00 d0       	rcall	.+0      	; 0x4a4 <ShowDiskReadError+0xe>
     4a4:	8c ec       	ldi	r24, 0xCC	; 204
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	ad b7       	in	r26, 0x3d	; 61
     4aa:	be b7       	in	r27, 0x3e	; 62
     4ac:	12 96       	adiw	r26, 0x02	; 2
     4ae:	9c 93       	st	X, r25
     4b0:	8e 93       	st	-X, r24
     4b2:	11 97       	sbiw	r26, 0x01	; 1
     4b4:	14 96       	adiw	r26, 0x04	; 4
     4b6:	3c 93       	st	X, r19
     4b8:	2e 93       	st	-X, r18
     4ba:	13 97       	sbiw	r26, 0x03	; 3
     4bc:	19 c0       	rjmp	.+50     	; 0x4f0 <ShowDiskReadError+0x5a>
	}
	else
	{
		/* Display the error code */
		printf_P(PSTR(ESC_FG_RED "Command error (%S).\r\n"), CommandString);
     4be:	00 d0       	rcall	.+0      	; 0x4c0 <ShowDiskReadError+0x2a>
     4c0:	00 d0       	rcall	.+0      	; 0x4c2 <ShowDiskReadError+0x2c>
     4c2:	81 eb       	ldi	r24, 0xB1	; 177
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	ed b7       	in	r30, 0x3d	; 61
     4c8:	fe b7       	in	r31, 0x3e	; 62
     4ca:	92 83       	std	Z+2, r25	; 0x02
     4cc:	81 83       	std	Z+1, r24	; 0x01
     4ce:	34 83       	std	Z+4, r19	; 0x04
     4d0:	23 83       	std	Z+3, r18	; 0x03
     4d2:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <printf_P>
		printf_P(PSTR("  -- Error Code: %d" ESC_FG_WHITE), ErrorCode);
     4d6:	ed b7       	in	r30, 0x3d	; 61
     4d8:	fe b7       	in	r31, 0x3e	; 62
     4da:	31 96       	adiw	r30, 0x01	; 1
     4dc:	88 e9       	ldi	r24, 0x98	; 152
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	ad b7       	in	r26, 0x3d	; 61
     4e2:	be b7       	in	r27, 0x3e	; 62
     4e4:	12 96       	adiw	r26, 0x02	; 2
     4e6:	9c 93       	st	X, r25
     4e8:	8e 93       	st	-X, r24
     4ea:	11 97       	sbiw	r26, 0x01	; 1
     4ec:	12 83       	std	Z+2, r17	; 0x02
     4ee:	13 82       	std	Z+3, r1	; 0x03
     4f0:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <printf_P>
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     4fc:	80 91 a9 00 	lds	r24, 0x00A9
     500:	80 64       	ori	r24, 0x40	; 64
     502:	80 93 a9 00 	sts	0x00A9, r24
     506:	8b b1       	in	r24, 0x0b	; 11
     508:	8f 70       	andi	r24, 0x0F	; 15
     50a:	80 69       	ori	r24, 0x90	; 144
     50c:	8b b9       	out	0x0b, r24	; 11

	Pipe_Freeze();

	/* Indicate device error via the status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     50e:	1f 91       	pop	r17
     510:	08 95       	ret

00000512 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     512:	90 91 49 01 	lds	r25, 0x0149
     516:	2d b7       	in	r18, 0x3d	; 61
     518:	3e b7       	in	r19, 0x3e	; 62
     51a:	28 50       	subi	r18, 0x08	; 8
     51c:	30 40       	sbci	r19, 0x00	; 0
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	f8 94       	cli
     522:	3e bf       	out	0x3e, r19	; 62
     524:	0f be       	out	0x3f, r0	; 63
     526:	2d bf       	out	0x3d, r18	; 61
     528:	ed b7       	in	r30, 0x3d	; 61
     52a:	fe b7       	in	r31, 0x3e	; 62
     52c:	31 96       	adiw	r30, 0x01	; 1
     52e:	2e e5       	ldi	r18, 0x5E	; 94
     530:	33 e0       	ldi	r19, 0x03	; 3
     532:	ad b7       	in	r26, 0x3d	; 61
     534:	be b7       	in	r27, 0x3e	; 62
     536:	12 96       	adiw	r26, 0x02	; 2
     538:	3c 93       	st	X, r19
     53a:	2e 93       	st	-X, r18
     53c:	11 97       	sbiw	r26, 0x01	; 1
     53e:	82 83       	std	Z+2, r24	; 0x02
     540:	13 82       	std	Z+3, r1	; 0x03
     542:	64 83       	std	Z+4, r22	; 0x04
     544:	15 82       	std	Z+5, r1	; 0x05
     546:	96 83       	std	Z+6, r25	; 0x06
     548:	17 82       	std	Z+7, r1	; 0x07
     54a:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <printf_P>
     54e:	8b b1       	in	r24, 0x0b	; 11
     550:	8f 70       	andi	r24, 0x0F	; 15
     552:	80 69       	ori	r24, 0x90	; 144
     554:	8b b9       	out	0x0b, r24	; 11
     556:	2d b7       	in	r18, 0x3d	; 61
     558:	3e b7       	in	r19, 0x3e	; 62
     55a:	28 5f       	subi	r18, 0xF8	; 248
     55c:	3f 4f       	sbci	r19, 0xFF	; 255
     55e:	0f b6       	in	r0, 0x3f	; 63
     560:	f8 94       	cli
     562:	3e bf       	out	0x3e, r19	; 62
     564:	0f be       	out	0x3f, r0	; 63
     566:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     568:	08 95       	ret

0000056a <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     56a:	83 ee       	ldi	r24, 0xE3	; 227
     56c:	93 e0       	ldi	r25, 0x03	; 3
     56e:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <puts_P>
     572:	8b b1       	in	r24, 0x0b	; 11
     574:	8f 70       	andi	r24, 0x0F	; 15
     576:	80 61       	ori	r24, 0x10	; 16
     578:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     57a:	08 95       	ret

0000057c <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     57c:	84 e0       	ldi	r24, 0x04	; 4
     57e:	94 e0       	ldi	r25, 0x04	; 4
     580:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <puts_P>
     584:	8b b1       	in	r24, 0x0b	; 11
     586:	8f 70       	andi	r24, 0x0F	; 15
     588:	80 6a       	ori	r24, 0xA0	; 160
     58a:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     58c:	08 95       	ret

0000058e <MassStorage_Task>:

/** Task to set the configuration of the attached device after it has been enumerated, and to read in blocks from
 *  the device and print them to the serial port.
 */
void MassStorage_Task(void)
{
     58e:	2f 92       	push	r2
     590:	3f 92       	push	r3
     592:	4f 92       	push	r4
     594:	5f 92       	push	r5
     596:	6f 92       	push	r6
     598:	7f 92       	push	r7
     59a:	8f 92       	push	r8
     59c:	9f 92       	push	r9
     59e:	af 92       	push	r10
     5a0:	bf 92       	push	r11
     5a2:	cf 92       	push	r12
     5a4:	df 92       	push	r13
     5a6:	ef 92       	push	r14
     5a8:	ff 92       	push	r15
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
     5ae:	df 93       	push	r29
     5b0:	cf 93       	push	r28
     5b2:	cd b7       	in	r28, 0x3d	; 61
     5b4:	de b7       	in	r29, 0x3e	; 62
     5b6:	c0 54       	subi	r28, 0x40	; 64
     5b8:	d0 40       	sbci	r29, 0x00	; 0
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61

			/* Wait until USB device disconnected */
			USB_HostState = HOST_STATE_WaitForDeviceRemoval;
			break;
	}
}
     5c4:	8d b7       	in	r24, 0x3d	; 61
     5c6:	9e b7       	in	r25, 0x3e	; 62
     5c8:	21 96       	adiw	r28, 0x01	; 1
     5ca:	9f af       	std	Y+63, r25	; 0x3f
     5cc:	8e af       	std	Y+62, r24	; 0x3e
     5ce:	21 97       	sbiw	r28, 0x01	; 1
 */
void MassStorage_Task(void)
{
	uint8_t ErrorCode;

	switch (USB_HostState)
     5d0:	80 91 49 01 	lds	r24, 0x0149
     5d4:	8b 30       	cpi	r24, 0x0B	; 11
     5d6:	21 f0       	breq	.+8      	; 0x5e0 <MassStorage_Task+0x52>
     5d8:	8c 30       	cpi	r24, 0x0C	; 12
     5da:	09 f0       	breq	.+2      	; 0x5de <MassStorage_Task+0x50>
     5dc:	06 c2       	rjmp	.+1036   	; 0x9ea <MassStorage_Task+0x45c>
     5de:	49 c0       	rjmp	.+146    	; 0x672 <MassStorage_Task+0xe4>
	{
		case HOST_STATE_Addressed:
			puts_P(PSTR("Getting Config Data.\r\n"));
     5e0:	87 e4       	ldi	r24, 0x47	; 71
     5e2:	93 e0       	ldi	r25, 0x03	; 3
     5e4:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <puts_P>

			/* Get and process the configuration descriptor data */
			if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     5e8:	a6 d2       	rcall	.+1356   	; 0xb36 <ProcessConfigurationDescriptor>
     5ea:	18 2f       	mov	r17, r24
     5ec:	88 23       	and	r24, r24
     5ee:	c1 f0       	breq	.+48     	; 0x620 <MassStorage_Task+0x92>
			{
				if (ErrorCode == ControlError)
     5f0:	81 30       	cpi	r24, 0x01	; 1
     5f2:	19 f4       	brne	.+6      	; 0x5fa <MassStorage_Task+0x6c>
				  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     5f4:	8d e1       	ldi	r24, 0x1D	; 29
     5f6:	93 e0       	ldi	r25, 0x03	; 3
     5f8:	02 c0       	rjmp	.+4      	; 0x5fe <MassStorage_Task+0x70>
				else
				  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     5fa:	86 e0       	ldi	r24, 0x06	; 6
     5fc:	93 e0       	ldi	r25, 0x03	; 3
     5fe:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <puts_P>

				printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     602:	00 d0       	rcall	.+0      	; 0x604 <MassStorage_Task+0x76>
     604:	00 d0       	rcall	.+0      	; 0x606 <MassStorage_Task+0x78>
     606:	ed b7       	in	r30, 0x3d	; 61
     608:	fe b7       	in	r31, 0x3e	; 62
     60a:	31 96       	adiw	r30, 0x01	; 1
     60c:	8c ee       	ldi	r24, 0xEC	; 236
     60e:	92 e0       	ldi	r25, 0x02	; 2
     610:	ad b7       	in	r26, 0x3d	; 61
     612:	be b7       	in	r27, 0x3e	; 62
     614:	12 96       	adiw	r26, 0x02	; 2
     616:	9c 93       	st	X, r25
     618:	8e 93       	st	-X, r24
     61a:	11 97       	sbiw	r26, 0x01	; 1
     61c:	12 83       	std	Z+2, r17	; 0x02
     61e:	13 c0       	rjmp	.+38     	; 0x646 <MassStorage_Task+0xb8>
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
			if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	d9 d6       	rcall	.+3506   	; 0x13d6 <USB_Host_SetDeviceConfiguration>
     624:	28 2f       	mov	r18, r24
     626:	88 23       	and	r24, r24
     628:	e1 f0       	breq	.+56     	; 0x662 <MassStorage_Task+0xd4>
			{
				printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     62a:	00 d0       	rcall	.+0      	; 0x62c <MassStorage_Task+0x9e>
     62c:	00 d0       	rcall	.+0      	; 0x62e <MassStorage_Task+0xa0>
     62e:	ed b7       	in	r30, 0x3d	; 61
     630:	fe b7       	in	r31, 0x3e	; 62
     632:	31 96       	adiw	r30, 0x01	; 1
     634:	89 ea       	ldi	r24, 0xA9	; 169
     636:	92 e0       	ldi	r25, 0x02	; 2
     638:	ad b7       	in	r26, 0x3d	; 61
     63a:	be b7       	in	r27, 0x3e	; 62
     63c:	12 96       	adiw	r26, 0x02	; 2
     63e:	9c 93       	st	X, r25
     640:	8e 93       	st	-X, r24
     642:	11 97       	sbiw	r26, 0x01	; 1
     644:	22 83       	std	Z+2, r18	; 0x02
     646:	13 82       	std	Z+3, r1	; 0x03
     648:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <printf_P>
     64c:	8b b1       	in	r24, 0x0b	; 11
     64e:	8f 70       	andi	r24, 0x0F	; 15
     650:	80 69       	ori	r24, 0x90	; 144
     652:	8b b9       	out	0x0b, r24	; 11

				/* Indicate error via status LEDs */
				LEDs_SetAllLEDs(LEDMASK_USB_ERROR);

				/* Wait until USB device disconnected */
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     654:	10 92 49 01 	sts	0x0149, r1
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	c4 c1       	rjmp	.+904    	; 0x9ea <MassStorage_Task+0x45c>
				break;
			}

			puts_P(PSTR("Mass Storage Disk Enumerated.\r\n"));
     662:	89 e8       	ldi	r24, 0x89	; 137
     664:	92 e0       	ldi	r25, 0x02	; 2
     666:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <puts_P>

			USB_HostState = HOST_STATE_Configured;
     66a:	8c e0       	ldi	r24, 0x0C	; 12
     66c:	80 93 49 01 	sts	0x0149, r24
     670:	bc c1       	rjmp	.+888    	; 0x9ea <MassStorage_Task+0x45c>
     672:	8b b1       	in	r24, 0x0b	; 11
     674:	8f 70       	andi	r24, 0x0F	; 15
     676:	80 62       	ori	r24, 0x20	; 32
     678:	8b b9       	out	0x0b, r24	; 11
		case HOST_STATE_Configured:
			/* Indicate device busy via the status LEDs */
			LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

			/* Send the request, display error and wait for device detach if request fails */
			if ((ErrorCode = MassStore_GetMaxLUN(&MassStore_MaxLUNIndex)) != HOST_SENDCONTROL_Successful)
     67a:	8f e3       	ldi	r24, 0x3F	; 63
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	d1 d5       	rcall	.+2978   	; 0x1222 <MassStore_GetMaxLUN>
     680:	68 2f       	mov	r22, r24
     682:	88 23       	and	r24, r24
     684:	19 f0       	breq	.+6      	; 0x68c <MassStorage_Task+0xfe>
			{
				ShowDiskReadError(PSTR("Get Max LUN"), ErrorCode);
     686:	8d e7       	ldi	r24, 0x7D	; 125
     688:	92 e0       	ldi	r25, 0x02	; 2
     68a:	83 c0       	rjmp	.+262    	; 0x792 <MassStorage_Task+0x204>
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			/* Print number of LUNs detected in the attached device */
			printf_P(PSTR("Total LUNs: %d - Using first LUN in device.\r\n"), (MassStore_MaxLUNIndex + 1));
     68c:	00 d0       	rcall	.+0      	; 0x68e <MassStorage_Task+0x100>
     68e:	00 d0       	rcall	.+0      	; 0x690 <MassStorage_Task+0x102>
     690:	8f e4       	ldi	r24, 0x4F	; 79
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	ed b7       	in	r30, 0x3d	; 61
     696:	fe b7       	in	r31, 0x3e	; 62
     698:	92 83       	std	Z+2, r25	; 0x02
     69a:	81 83       	std	Z+1, r24	; 0x01
     69c:	80 91 3f 01 	lds	r24, 0x013F
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	01 96       	adiw	r24, 0x01	; 1
     6a4:	94 83       	std	Z+4, r25	; 0x04
     6a6:	83 83       	std	Z+3, r24	; 0x03
     6a8:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <printf_P>

			/* Reset the Mass Storage device interface, ready for use */
			if ((ErrorCode = MassStore_MassStorageReset()) != HOST_SENDCONTROL_Successful)
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	d2 d5       	rcall	.+2980   	; 0x125a <MassStore_MassStorageReset>
     6b6:	68 2f       	mov	r22, r24
     6b8:	88 23       	and	r24, r24
     6ba:	19 f0       	breq	.+6      	; 0x6c2 <MassStorage_Task+0x134>
			{
				ShowDiskReadError(PSTR("Mass Storage Reset"), ErrorCode);
     6bc:	8c e3       	ldi	r24, 0x3C	; 60
     6be:	92 e0       	ldi	r25, 0x02	; 2
     6c0:	68 c0       	rjmp	.+208    	; 0x792 <MassStorage_Task+0x204>
			}

			/* Get sense data from the device - many devices will not accept any other commands until the sense data
			 * is read - both on start-up and after a failed command */
			SCSI_Request_Sense_Response_t SenseData;
			if ((ErrorCode = MassStore_RequestSense(0, &SenseData)) != 0)
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	be 01       	movw	r22, r28
     6c6:	67 5f       	subi	r22, 0xF7	; 247
     6c8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ca:	23 d5       	rcall	.+2630   	; 0x1112 <MassStore_RequestSense>
     6cc:	68 2f       	mov	r22, r24
     6ce:	88 23       	and	r24, r24
     6d0:	19 f0       	breq	.+6      	; 0x6d8 <MassStorage_Task+0x14a>
			{
				ShowDiskReadError(PSTR("Request Sense"), ErrorCode);
     6d2:	8e e2       	ldi	r24, 0x2E	; 46
     6d4:	92 e0       	ldi	r25, 0x02	; 2
     6d6:	5d c0       	rjmp	.+186    	; 0x792 <MassStorage_Task+0x204>
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			/* Set the prevent removal flag for the device, allowing it to be accessed */
			if ((ErrorCode = MassStore_PreventAllowMediumRemoval(0, true)) != 0)
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	61 e0       	ldi	r22, 0x01	; 1
     6dc:	dd d3       	rcall	.+1978   	; 0xe98 <MassStore_PreventAllowMediumRemoval>
     6de:	68 2f       	mov	r22, r24
     6e0:	88 23       	and	r24, r24
     6e2:	19 f0       	breq	.+6      	; 0x6ea <MassStorage_Task+0x15c>
			{
				ShowDiskReadError(PSTR("Prevent/Allow Medium Removal"), ErrorCode);
     6e4:	81 e1       	ldi	r24, 0x11	; 17
     6e6:	92 e0       	ldi	r25, 0x02	; 2
     6e8:	54 c0       	rjmp	.+168    	; 0x792 <MassStorage_Task+0x204>
				break;
			}

			/* Get inquiry data from the device */
			SCSI_Inquiry_Response_t InquiryData;
			if ((ErrorCode = MassStore_Inquiry(0, &InquiryData)) != 0)
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	be 01       	movw	r22, r28
     6ee:	65 5e       	subi	r22, 0xE5	; 229
     6f0:	7f 4f       	sbci	r23, 0xFF	; 255
     6f2:	53 d5       	rcall	.+2726   	; 0x119a <MassStore_Inquiry>
     6f4:	68 2f       	mov	r22, r24
     6f6:	88 23       	and	r24, r24
     6f8:	19 f0       	breq	.+6      	; 0x700 <MassStorage_Task+0x172>
			{
				ShowDiskReadError(PSTR("Inquiry"), ErrorCode);
     6fa:	89 e0       	ldi	r24, 0x09	; 9
     6fc:	92 e0       	ldi	r25, 0x02	; 2
     6fe:	49 c0       	rjmp	.+146    	; 0x792 <MassStorage_Task+0x204>
				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			/* Print vendor and product names of attached device */
			printf_P(PSTR("Vendor \"%.8s\", Product \"%.16s\"\r\n"), InquiryData.VendorID, InquiryData.ProductID);
     700:	00 d0       	rcall	.+0      	; 0x702 <MassStorage_Task+0x174>
     702:	00 d0       	rcall	.+0      	; 0x704 <MassStorage_Task+0x176>
     704:	00 d0       	rcall	.+0      	; 0x706 <MassStorage_Task+0x178>
     706:	ed b7       	in	r30, 0x3d	; 61
     708:	fe b7       	in	r31, 0x3e	; 62
     70a:	31 96       	adiw	r30, 0x01	; 1
     70c:	88 ee       	ldi	r24, 0xE8	; 232
     70e:	91 e0       	ldi	r25, 0x01	; 1
     710:	ad b7       	in	r26, 0x3d	; 61
     712:	be b7       	in	r27, 0x3e	; 62
     714:	12 96       	adiw	r26, 0x02	; 2
     716:	9c 93       	st	X, r25
     718:	8e 93       	st	-X, r24
     71a:	11 97       	sbiw	r26, 0x01	; 1
     71c:	ce 01       	movw	r24, r28
     71e:	83 96       	adiw	r24, 0x23	; 35
     720:	93 83       	std	Z+3, r25	; 0x03
     722:	82 83       	std	Z+2, r24	; 0x02
     724:	ce 01       	movw	r24, r28
     726:	8b 96       	adiw	r24, 0x2b	; 43
     728:	95 83       	std	Z+5, r25	; 0x05
     72a:	84 83       	std	Z+4, r24	; 0x04
     72c:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <printf_P>

			/* Wait until disk ready */
			puts_P(PSTR("Waiting until ready.."));
     730:	ed b7       	in	r30, 0x3d	; 61
     732:	fe b7       	in	r31, 0x3e	; 62
     734:	36 96       	adiw	r30, 0x06	; 6
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	f8 94       	cli
     73a:	fe bf       	out	0x3e, r31	; 62
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	ed bf       	out	0x3d, r30	; 61
     740:	82 ed       	ldi	r24, 0xD2	; 210
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <puts_P>
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
				UDR1 = DataByte;
     748:	1e e2       	ldi	r17, 0x2E	; 46
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     74a:	80 91 c8 00 	lds	r24, 0x00C8
     74e:	85 ff       	sbrs	r24, 5
     750:	fc cf       	rjmp	.-8      	; 0x74a <MassStorage_Task+0x1bc>
				UDR1 = DataByte;
     752:	10 93 ce 00 	sts	0x00CE, r17
			for (;;)
			{
				Serial_TxByte('.');

				/* Abort if device removed */
				if (USB_HostState == HOST_STATE_Unattached)
     756:	80 91 49 01 	lds	r24, 0x0149
     75a:	82 30       	cpi	r24, 0x02	; 2
     75c:	61 f0       	breq	.+24     	; 0x776 <MassStorage_Task+0x1e8>
				  break;

				/* Check to see if the attached device is ready for new commands */
				ErrorCode = MassStore_TestUnitReady(0);
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	2e d4       	rcall	.+2140   	; 0xfbe <MassStore_TestUnitReady>
     762:	68 2f       	mov	r22, r24

				/* If attached device is ready, abort the loop */
				if (!(ErrorCode))
     764:	88 23       	and	r24, r24
     766:	39 f0       	breq	.+14     	; 0x776 <MassStorage_Task+0x1e8>
				  break;

				/* If an error other than a logical command failure (indicating device busy) returned, abort */
				if (ErrorCode != MASS_STORE_SCSI_COMMAND_FAILED)
     768:	80 3c       	cpi	r24, 0xC0	; 192
     76a:	79 f3       	breq	.-34     	; 0x74a <MassStorage_Task+0x1bc>
				{
					ShowDiskReadError(PSTR("Test Unit Ready"), ErrorCode);
     76c:	82 ec       	ldi	r24, 0xC2	; 194
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	92 de       	rcall	.-732    	; 0x496 <ShowDiskReadError>

					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     772:	10 92 49 01 	sts	0x0149, r1
					break;
				}
			}

			puts_P(PSTR("\r\nRetrieving Capacity... "));
     776:	88 ea       	ldi	r24, 0xA8	; 168
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <puts_P>

			/* Create new structure for the disk's capacity in blocks and block size */
			SCSI_Capacity_t DiskCapacity;

			/* Retrieve disk capacity */
			if ((ErrorCode = MassStore_ReadCapacity(0, &DiskCapacity)) != 0)
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	be 01       	movw	r22, r28
     782:	6f 5f       	subi	r22, 0xFF	; 255
     784:	7f 4f       	sbci	r23, 0xFF	; 255
     786:	c3 d3       	rcall	.+1926   	; 0xf0e <MassStore_ReadCapacity>
     788:	68 2f       	mov	r22, r24
     78a:	88 23       	and	r24, r24
     78c:	31 f0       	breq	.+12     	; 0x79a <MassStorage_Task+0x20c>
			{
				ShowDiskReadError(PSTR("Read Capacity"), ErrorCode);
     78e:	8a e9       	ldi	r24, 0x9A	; 154
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	81 de       	rcall	.-766    	; 0x496 <ShowDiskReadError>

				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     794:	10 92 49 01 	sts	0x0149, r1
     798:	28 c1       	rjmp	.+592    	; 0x9ea <MassStorage_Task+0x45c>
				break;
			}

			/* Display the disk capacity in blocks * block size bytes */
			printf_P(PSTR("%lu blocks of %lu bytes.\r\n"), DiskCapacity.Blocks, DiskCapacity.BlockSize);
     79a:	8d b7       	in	r24, 0x3d	; 61
     79c:	9e b7       	in	r25, 0x3e	; 62
     79e:	0a 97       	sbiw	r24, 0x0a	; 10
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	f8 94       	cli
     7a4:	9e bf       	out	0x3e, r25	; 62
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	8d bf       	out	0x3d, r24	; 61
     7aa:	ed b7       	in	r30, 0x3d	; 61
     7ac:	fe b7       	in	r31, 0x3e	; 62
     7ae:	31 96       	adiw	r30, 0x01	; 1
     7b0:	8f e7       	ldi	r24, 0x7F	; 127
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	ad b7       	in	r26, 0x3d	; 61
     7b6:	be b7       	in	r27, 0x3e	; 62
     7b8:	12 96       	adiw	r26, 0x02	; 2
     7ba:	9c 93       	st	X, r25
     7bc:	8e 93       	st	-X, r24
     7be:	11 97       	sbiw	r26, 0x01	; 1
     7c0:	89 81       	ldd	r24, Y+1	; 0x01
     7c2:	9a 81       	ldd	r25, Y+2	; 0x02
     7c4:	ab 81       	ldd	r26, Y+3	; 0x03
     7c6:	bc 81       	ldd	r27, Y+4	; 0x04
     7c8:	82 83       	std	Z+2, r24	; 0x02
     7ca:	93 83       	std	Z+3, r25	; 0x03
     7cc:	a4 83       	std	Z+4, r26	; 0x04
     7ce:	b5 83       	std	Z+5, r27	; 0x05
     7d0:	8d 81       	ldd	r24, Y+5	; 0x05
     7d2:	9e 81       	ldd	r25, Y+6	; 0x06
     7d4:	af 81       	ldd	r26, Y+7	; 0x07
     7d6:	b8 85       	ldd	r27, Y+8	; 0x08
     7d8:	86 83       	std	Z+6, r24	; 0x06
     7da:	97 83       	std	Z+7, r25	; 0x07
     7dc:	a0 87       	std	Z+8, r26	; 0x08
     7de:	b1 87       	std	Z+9, r27	; 0x09
     7e0:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <printf_P>
     7e4:	ed b7       	in	r30, 0x3d	; 61
     7e6:	fe b7       	in	r31, 0x3e	; 62
     7e8:	3a 96       	adiw	r30, 0x0a	; 10
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	fe bf       	out	0x3e, r31	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	ed bf       	out	0x3d, r30	; 61
     7f4:	3d b6       	in	r3, 0x3d	; 61
     7f6:	2e b6       	in	r2, 0x3e	; 62

			/* Create a new buffer capable of holding a single block from the device */
			uint8_t BlockBuffer[DiskCapacity.BlockSize];
     7f8:	0d 81       	ldd	r16, Y+5	; 0x05
     7fa:	1e 81       	ldd	r17, Y+6	; 0x06
     7fc:	8d b7       	in	r24, 0x3d	; 61
     7fe:	9e b7       	in	r25, 0x3e	; 62
     800:	80 1b       	sub	r24, r16
     802:	91 0b       	sbc	r25, r17
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	9e bf       	out	0x3e, r25	; 62
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	8d bf       	out	0x3d, r24	; 61
     80e:	8d b6       	in	r8, 0x3d	; 61
     810:	9e b6       	in	r9, 0x3e	; 62
     812:	08 94       	sec
     814:	81 1c       	adc	r8, r1
     816:	91 1c       	adc	r9, r1

			/* Read in the first 512 byte block from the device */
			if ((ErrorCode = MassStore_ReadDeviceBlock(0, 0x00000000, 1, DiskCapacity.BlockSize, BlockBuffer)) != 0)
     818:	24 01       	movw	r4, r8
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	40 e0       	ldi	r20, 0x00	; 0
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	21 e0       	ldi	r18, 0x01	; 1
     826:	74 01       	movw	r14, r8
     828:	04 d4       	rcall	.+2056   	; 0x1032 <MassStore_ReadDeviceBlock>
     82a:	68 2f       	mov	r22, r24
     82c:	88 23       	and	r24, r24
     82e:	21 f0       	breq	.+8      	; 0x838 <MassStorage_Task+0x2aa>
			{
				ShowDiskReadError(PSTR("Read Device Block"), ErrorCode);
     830:	8d e6       	ldi	r24, 0x6D	; 109
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	30 de       	rcall	.-928    	; 0x496 <ShowDiskReadError>
     836:	cf c0       	rjmp	.+414    	; 0x9d6 <MassStorage_Task+0x448>

				USB_HostState = HOST_STATE_WaitForDeviceRemoval;
				break;
			}

			puts_P(PSTR("\r\nContents of first block:\r\n"));
     838:	80 e5       	ldi	r24, 0x50	; 80
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <puts_P>
     840:	aa 24       	eor	r10, r10
     842:	bb 24       	eor	r11, r11
				/* Print out the 16 bytes of the chunk in HEX format */
				for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
				{
					char CurrByte = *(ChunkPtr + ByteOffset);

					printf_P(PSTR("%.2X "), CurrByte);
     844:	ea e4       	ldi	r30, 0x4A	; 74
     846:	6e 2e       	mov	r6, r30
     848:	e1 e0       	ldi	r30, 0x01	; 1
     84a:	7e 2e       	mov	r7, r30
     84c:	4e c0       	rjmp	.+156    	; 0x8ea <MassStorage_Task+0x35c>

			/* Print out the first block in both HEX and ASCII, 16 bytes per line */
			for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
			{
				/* Pointer to the start of the current 16-byte chunk in the read block of data */
				uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];
     84e:	65 01       	movw	r12, r10
     850:	74 e0       	ldi	r23, 0x04	; 4
     852:	cc 0c       	add	r12, r12
     854:	dd 1c       	adc	r13, r13
     856:	7a 95       	dec	r23
     858:	e1 f7       	brne	.-8      	; 0x852 <MassStorage_Task+0x2c4>
     85a:	c8 0c       	add	r12, r8
     85c:	d9 1c       	adc	r13, r9
     85e:	00 e0       	ldi	r16, 0x00	; 0
     860:	10 e0       	ldi	r17, 0x00	; 0
				/* Print out the 16 bytes of the chunk in HEX format */
				for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
				{
					char CurrByte = *(ChunkPtr + ByteOffset);

					printf_P(PSTR("%.2X "), CurrByte);
     862:	00 d0       	rcall	.+0      	; 0x864 <MassStorage_Task+0x2d6>
     864:	00 d0       	rcall	.+0      	; 0x866 <MassStorage_Task+0x2d8>
     866:	ed b7       	in	r30, 0x3d	; 61
     868:	fe b7       	in	r31, 0x3e	; 62
     86a:	31 96       	adiw	r30, 0x01	; 1
     86c:	ad b7       	in	r26, 0x3d	; 61
     86e:	be b7       	in	r27, 0x3e	; 62
     870:	12 96       	adiw	r26, 0x02	; 2
     872:	7c 92       	st	X, r7
     874:	6e 92       	st	-X, r6
     876:	11 97       	sbiw	r26, 0x01	; 1
     878:	d6 01       	movw	r26, r12
     87a:	a0 0f       	add	r26, r16
     87c:	b1 1f       	adc	r27, r17
     87e:	8c 91       	ld	r24, X
     880:	82 83       	std	Z+2, r24	; 0x02
     882:	13 82       	std	Z+3, r1	; 0x03
     884:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <printf_P>
     888:	0f 5f       	subi	r16, 0xFF	; 255
     88a:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				/* Pointer to the start of the current 16-byte chunk in the read block of data */
				uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];

				/* Print out the 16 bytes of the chunk in HEX format */
				for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     88c:	0f 90       	pop	r0
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	00 31       	cpi	r16, 0x10	; 16
     896:	11 05       	cpc	r17, r1
     898:	21 f7       	brne	.-56     	; 0x862 <MassStorage_Task+0x2d4>
					char CurrByte = *(ChunkPtr + ByteOffset);

					printf_P(PSTR("%.2X "), CurrByte);
				}

				puts_P(PSTR("    "));
     89a:	85 e4       	ldi	r24, 0x45	; 69
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <puts_P>
     8a2:	ee 24       	eor	r14, r14
     8a4:	ff 24       	eor	r15, r15
				/* Print out the 16 bytes of the chunk in ASCII format */
				for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
				{
					char CurrByte = *(ChunkPtr + ByteOffset);

					putchar(isprint(CurrByte) ? CurrByte : '.');
     8a6:	f6 01       	movw	r30, r12
     8a8:	ee 0d       	add	r30, r14
     8aa:	ff 1d       	adc	r31, r15
     8ac:	80 81       	ld	r24, Z
     8ae:	08 2f       	mov	r16, r24
     8b0:	10 e0       	ldi	r17, 0x00	; 0
     8b2:	c8 01       	movw	r24, r16
     8b4:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <isprint>
     8b8:	89 2b       	or	r24, r25
     8ba:	11 f4       	brne	.+4      	; 0x8c0 <MassStorage_Task+0x332>
     8bc:	0e e2       	ldi	r16, 0x2E	; 46
     8be:	10 e0       	ldi	r17, 0x00	; 0
     8c0:	60 91 4c 01 	lds	r22, 0x014C
     8c4:	70 91 4d 01 	lds	r23, 0x014D
     8c8:	c8 01       	movw	r24, r16
     8ca:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <fputc>
     8ce:	08 94       	sec
     8d0:	e1 1c       	adc	r14, r1
     8d2:	f1 1c       	adc	r15, r1
				}

				puts_P(PSTR("    "));

				/* Print out the 16 bytes of the chunk in ASCII format */
				for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     8d4:	b0 e1       	ldi	r27, 0x10	; 16
     8d6:	eb 16       	cp	r14, r27
     8d8:	f1 04       	cpc	r15, r1
     8da:	29 f7       	brne	.-54     	; 0x8a6 <MassStorage_Task+0x318>
					char CurrByte = *(ChunkPtr + ByteOffset);

					putchar(isprint(CurrByte) ? CurrByte : '.');
				}

				puts_P(PSTR("\r\n"));
     8dc:	82 e4       	ldi	r24, 0x42	; 66
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <puts_P>
			}

			puts_P(PSTR("\r\nContents of first block:\r\n"));

			/* Print out the first block in both HEX and ASCII, 16 bytes per line */
			for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
     8e4:	08 94       	sec
     8e6:	a1 1c       	adc	r10, r1
     8e8:	b1 1c       	adc	r11, r1
     8ea:	95 01       	movw	r18, r10
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	8d 81       	ldd	r24, Y+5	; 0x05
     8f2:	9e 81       	ldd	r25, Y+6	; 0x06
     8f4:	af 81       	ldd	r26, Y+7	; 0x07
     8f6:	b8 85       	ldd	r27, Y+8	; 0x08
     8f8:	64 e0       	ldi	r22, 0x04	; 4
     8fa:	b6 95       	lsr	r27
     8fc:	a7 95       	ror	r26
     8fe:	97 95       	ror	r25
     900:	87 95       	ror	r24
     902:	6a 95       	dec	r22
     904:	d1 f7       	brne	.-12     	; 0x8fa <MassStorage_Task+0x36c>
     906:	28 17       	cp	r18, r24
     908:	39 07       	cpc	r19, r25
     90a:	4a 07       	cpc	r20, r26
     90c:	5b 07       	cpc	r21, r27
     90e:	08 f4       	brcc	.+2      	; 0x912 <MassStorage_Task+0x384>
     910:	9e cf       	rjmp	.-196    	; 0x84e <MassStorage_Task+0x2c0>
				}

				puts_P(PSTR("\r\n"));
			}

			puts_P(PSTR("\r\n\r\nPress board button to read entire ASCII contents of disk...\r\n\r\n"));
     912:	8e ef       	ldi	r24, 0xFE	; 254
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <puts_P>
     91a:	04 c0       	rjmp	.+8      	; 0x924 <MassStorage_Task+0x396>

			/* Wait for the board button to be pressed */
			while (!(Buttons_GetStatus() & BUTTONS_BUTTON1))
			{
				/* Abort if device removed */
				if (USB_HostState == HOST_STATE_Unattached)
     91c:	80 91 49 01 	lds	r24, 0x0149
     920:	82 30       	cpi	r24, 0x02	; 2
     922:	11 f0       	breq	.+4      	; 0x928 <MassStorage_Task+0x39a>
			}

			puts_P(PSTR("\r\n\r\nPress board button to read entire ASCII contents of disk...\r\n\r\n"));

			/* Wait for the board button to be pressed */
			while (!(Buttons_GetStatus() & BUTTONS_BUTTON1))
     924:	62 99       	sbic	0x0c, 2	; 12
     926:	fa cf       	rjmp	.-12     	; 0x91c <MassStorage_Task+0x38e>
				if (USB_HostState == HOST_STATE_Unattached)
				  break;
			}

			/* Abort if device removed */
			if (USB_HostState == HOST_STATE_Unattached)
     928:	80 91 49 01 	lds	r24, 0x0149
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	09 f4       	brne	.+2      	; 0x932 <MassStorage_Task+0x3a4>
     930:	54 c0       	rjmp	.+168    	; 0x9da <MassStorage_Task+0x44c>
     932:	aa 24       	eor	r10, r10
     934:	bb 24       	eor	r11, r11
     936:	65 01       	movw	r12, r10
     938:	40 c0       	rjmp	.+128    	; 0x9ba <MassStorage_Task+0x42c>

			/* Print out the entire disk contents in ASCII format */
			for (uint32_t CurrBlockAddress = 0; CurrBlockAddress < DiskCapacity.Blocks; CurrBlockAddress++)
			{
				/* Read in the next block of data from the device */
				if ((ErrorCode = MassStore_ReadDeviceBlock(0, CurrBlockAddress, 1, DiskCapacity.BlockSize, BlockBuffer)) != 0)
     93a:	0d 81       	ldd	r16, Y+5	; 0x05
     93c:	1e 81       	ldd	r17, Y+6	; 0x06
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	b6 01       	movw	r22, r12
     942:	a5 01       	movw	r20, r10
     944:	21 e0       	ldi	r18, 0x01	; 1
     946:	72 01       	movw	r14, r4
     948:	74 d3       	rcall	.+1768   	; 0x1032 <MassStore_ReadDeviceBlock>
     94a:	68 2f       	mov	r22, r24
     94c:	88 23       	and	r24, r24
     94e:	19 f4       	brne	.+6      	; 0x956 <MassStorage_Task+0x3c8>
     950:	ee 24       	eor	r14, r14
     952:	ff 24       	eor	r15, r15
     954:	1d c0       	rjmp	.+58     	; 0x990 <MassStorage_Task+0x402>
				{
					ShowDiskReadError(PSTR("Read Device Block"), ErrorCode);
     956:	8c ee       	ldi	r24, 0xEC	; 236
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	9d dd       	rcall	.-1222   	; 0x496 <ShowDiskReadError>

					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     95c:	10 92 49 01 	sts	0x0149, r1
     960:	36 c0       	rjmp	.+108    	; 0x9ce <MassStorage_Task+0x440>
				/* Send the ASCII data in the read in block to the serial port */
				for (uint16_t Byte = 0; Byte < DiskCapacity.BlockSize; Byte++)
				{
					char CurrByte = BlockBuffer[Byte];

					putchar(isprint(CurrByte) ? CurrByte : '.');
     962:	f4 01       	movw	r30, r8
     964:	ee 0d       	add	r30, r14
     966:	ff 1d       	adc	r31, r15
     968:	80 81       	ld	r24, Z
     96a:	08 2f       	mov	r16, r24
     96c:	10 e0       	ldi	r17, 0x00	; 0
     96e:	c8 01       	movw	r24, r16
     970:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <isprint>
     974:	89 2b       	or	r24, r25
     976:	11 f4       	brne	.+4      	; 0x97c <MassStorage_Task+0x3ee>
     978:	0e e2       	ldi	r16, 0x2E	; 46
     97a:	10 e0       	ldi	r17, 0x00	; 0
     97c:	60 91 4c 01 	lds	r22, 0x014C
     980:	70 91 4d 01 	lds	r23, 0x014D
     984:	c8 01       	movw	r24, r16
     986:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <fputc>
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				/* Send the ASCII data in the read in block to the serial port */
				for (uint16_t Byte = 0; Byte < DiskCapacity.BlockSize; Byte++)
     98a:	08 94       	sec
     98c:	e1 1c       	adc	r14, r1
     98e:	f1 1c       	adc	r15, r1
     990:	97 01       	movw	r18, r14
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	50 e0       	ldi	r21, 0x00	; 0
     996:	8d 81       	ldd	r24, Y+5	; 0x05
     998:	9e 81       	ldd	r25, Y+6	; 0x06
     99a:	af 81       	ldd	r26, Y+7	; 0x07
     99c:	b8 85       	ldd	r27, Y+8	; 0x08
     99e:	28 17       	cp	r18, r24
     9a0:	39 07       	cpc	r19, r25
     9a2:	4a 07       	cpc	r20, r26
     9a4:	5b 07       	cpc	r21, r27
     9a6:	e8 f2       	brcs	.-70     	; 0x962 <MassStorage_Task+0x3d4>

					putchar(isprint(CurrByte) ? CurrByte : '.');
				}

				/* Abort if device removed */
				if (USB_HostState == HOST_STATE_Unattached)
     9a8:	80 91 49 01 	lds	r24, 0x0149
     9ac:	82 30       	cpi	r24, 0x02	; 2
     9ae:	79 f0       	breq	.+30     	; 0x9ce <MassStorage_Task+0x440>
			/* Abort if device removed */
			if (USB_HostState == HOST_STATE_Unattached)
			  break;

			/* Print out the entire disk contents in ASCII format */
			for (uint32_t CurrBlockAddress = 0; CurrBlockAddress < DiskCapacity.Blocks; CurrBlockAddress++)
     9b0:	08 94       	sec
     9b2:	a1 1c       	adc	r10, r1
     9b4:	b1 1c       	adc	r11, r1
     9b6:	c1 1c       	adc	r12, r1
     9b8:	d1 1c       	adc	r13, r1
     9ba:	89 81       	ldd	r24, Y+1	; 0x01
     9bc:	9a 81       	ldd	r25, Y+2	; 0x02
     9be:	ab 81       	ldd	r26, Y+3	; 0x03
     9c0:	bc 81       	ldd	r27, Y+4	; 0x04
     9c2:	a8 16       	cp	r10, r24
     9c4:	b9 06       	cpc	r11, r25
     9c6:	ca 06       	cpc	r12, r26
     9c8:	db 06       	cpc	r13, r27
     9ca:	08 f4       	brcc	.+2      	; 0x9ce <MassStorage_Task+0x440>
     9cc:	b6 cf       	rjmp	.-148    	; 0x93a <MassStorage_Task+0x3ac>
     9ce:	8b b1       	in	r24, 0x0b	; 11
     9d0:	8f 70       	andi	r24, 0x0F	; 15
     9d2:	80 66       	ori	r24, 0x60	; 96
     9d4:	8b b9       	out	0x0b, r24	; 11

			/* Indicate device no longer busy */
			LEDs_SetAllLEDs(LEDMASK_USB_READY);

			/* Wait until USB device disconnected */
			USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     9d6:	10 92 49 01 	sts	0x0149, r1
     9da:	83 2d       	mov	r24, r3
     9dc:	92 2d       	mov	r25, r2
     9de:	9c 01       	movw	r18, r24
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	f8 94       	cli
     9e4:	3e bf       	out	0x3e, r19	; 62
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	2d bf       	out	0x3d, r18	; 61
			break;
	}
}
     9ea:	21 96       	adiw	r28, 0x01	; 1
     9ec:	ee ad       	ldd	r30, Y+62	; 0x3e
     9ee:	ff ad       	ldd	r31, Y+63	; 0x3f
     9f0:	21 97       	sbiw	r28, 0x01	; 1
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	f8 94       	cli
     9f6:	fe bf       	out	0x3e, r31	; 62
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	ed bf       	out	0x3d, r30	; 61
     9fc:	c0 5c       	subi	r28, 0xC0	; 192
     9fe:	df 4f       	sbci	r29, 0xFF	; 255
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	cd bf       	out	0x3d, r28	; 61
     a0a:	cf 91       	pop	r28
     a0c:	df 91       	pop	r29
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	df 90       	pop	r13
     a18:	cf 90       	pop	r12
     a1a:	bf 90       	pop	r11
     a1c:	af 90       	pop	r10
     a1e:	9f 90       	pop	r9
     a20:	8f 90       	pop	r8
     a22:	7f 90       	pop	r7
     a24:	6f 90       	pop	r6
     a26:	5f 90       	pop	r5
     a28:	4f 90       	pop	r4
     a2a:	3f 90       	pop	r3
     a2c:	2f 90       	pop	r2
     a2e:	08 95       	ret

00000a30 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     a30:	1f 93       	push	r17
     a32:	18 2f       	mov	r17, r24
	USB_ShutDown();
     a34:	e8 d6       	rcall	.+3536   	; 0x1806 <USB_ShutDown>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     a36:	00 d0       	rcall	.+0      	; 0xa38 <EVENT_USB_Host_HostError+0x8>
     a38:	00 d0       	rcall	.+0      	; 0xa3a <EVENT_USB_Host_HostError+0xa>
     a3a:	ed b7       	in	r30, 0x3d	; 61
     a3c:	fe b7       	in	r31, 0x3e	; 62
     a3e:	31 96       	adiw	r30, 0x01	; 1
     a40:	84 eb       	ldi	r24, 0xB4	; 180
     a42:	93 e0       	ldi	r25, 0x03	; 3
     a44:	ad b7       	in	r26, 0x3d	; 61
     a46:	be b7       	in	r27, 0x3e	; 62
     a48:	12 96       	adiw	r26, 0x02	; 2
     a4a:	9c 93       	st	X, r25
     a4c:	8e 93       	st	-X, r24
     a4e:	11 97       	sbiw	r26, 0x01	; 1
     a50:	12 83       	std	Z+2, r17	; 0x02
     a52:	13 82       	std	Z+3, r1	; 0x03
     a54:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <printf_P>
     a58:	8b b1       	in	r24, 0x0b	; 11
     a5a:	8f 70       	andi	r24, 0x0F	; 15
     a5c:	80 69       	ori	r24, 0x90	; 144
     a5e:	8b b9       	out	0x0b, r24	; 11
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	ff cf       	rjmp	.-2      	; 0xa68 <EVENT_USB_Host_HostError+0x38>

00000a6a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     a6a:	84 b7       	in	r24, 0x34	; 52
     a6c:	87 7f       	andi	r24, 0xF7	; 247
     a6e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     a70:	38 e1       	ldi	r19, 0x18	; 24
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	30 93 60 00 	sts	0x0060, r19
     a7a:	10 92 60 00 	sts	0x0060, r1
     a7e:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	20 e8       	ldi	r18, 0x80	; 128
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	f8 94       	cli
     a8a:	20 93 61 00 	sts	0x0061, r18
     a8e:	80 93 61 00 	sts	0x0061, r24
     a92:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     a94:	83 e3       	ldi	r24, 0x33	; 51
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	90 93 cd 00 	sts	0x00CD, r25
     a9c:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     aa0:	86 e0       	ldi	r24, 0x06	; 6
     aa2:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     aa6:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     aaa:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     aae:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     ab0:	5a 9a       	sbi	0x0b, 2	; 11
			static inline void SerialStream_Init(const uint32_t BaudRate,
			                                     const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);

				stdout = &USARTStream;
     ab2:	8d e2       	ldi	r24, 0x2D	; 45
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	90 93 4d 01 	sts	0x014D, r25
     aba:	80 93 4c 01 	sts	0x014C, r24
				stdin  = &USARTStream;
     abe:	90 93 4b 01 	sts	0x014B, r25
     ac2:	80 93 4a 01 	sts	0x014A, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     ac6:	8a b1       	in	r24, 0x0a	; 10
     ac8:	80 6f       	ori	r24, 0xF0	; 240
     aca:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     acc:	8b b1       	in	r24, 0x0b	; 11
     ace:	8f 70       	andi	r24, 0x0F	; 15
     ad0:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     ad2:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     ad4:	72 9a       	sbi	0x0e, 2	; 14
	/* Hardware Initialization */
	SerialStream_Init(9600, false);
	LEDs_Init();
	Buttons_Init();
	USB_Init();
}
     ad6:	8e c6       	rjmp	.+3356   	; 0x17f4 <USB_Init>

00000ad8 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     ad8:	c8 df       	rcall	.-112    	; 0xa6a <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mass Storage Host Demo running.\r\n" ESC_FG_WHITE));
     ada:	81 e2       	ldi	r24, 0x21	; 33
     adc:	94 e0       	ldi	r25, 0x04	; 4
     ade:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     ae2:	8b b1       	in	r24, 0x0b	; 11
     ae4:	8f 70       	andi	r24, 0x0F	; 15
     ae6:	80 61       	ori	r24, 0x10	; 16
     ae8:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     aea:	78 94       	sei

	for (;;)
	{
		MassStorage_Task();
     aec:	50 dd       	rcall	.-1376   	; 0x58e <MassStorage_Task>
		USB_USBTask();
     aee:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <USB_USBTask>
     af2:	fc cf       	rjmp	.-8      	; 0xaec <main+0x14>

00000af4 <DComp_NextMSInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Mass Storage Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMSInterface(void* CurrentDescriptor)
{
     af4:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     af6:	81 81       	ldd	r24, Z+1	; 0x01
     af8:	84 30       	cpi	r24, 0x04	; 4
     afa:	59 f4       	brne	.+22     	; 0xb12 <DComp_NextMSInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the descriptor class and protocol, break out if correct class/protocol interface found */
		if ((Interface->Class    == MASS_STORE_CLASS)    &&
     afc:	85 81       	ldd	r24, Z+5	; 0x05
     afe:	88 30       	cpi	r24, 0x08	; 8
     b00:	41 f4       	brne	.+16     	; 0xb12 <DComp_NextMSInterface+0x1e>
     b02:	86 81       	ldd	r24, Z+6	; 0x06
     b04:	86 30       	cpi	r24, 0x06	; 6
     b06:	29 f4       	brne	.+10     	; 0xb12 <DComp_NextMSInterface+0x1e>
     b08:	87 81       	ldd	r24, Z+7	; 0x07
     b0a:	80 35       	cpi	r24, 0x50	; 80
     b0c:	11 f4       	brne	.+4      	; 0xb12 <DComp_NextMSInterface+0x1e>
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	08 95       	ret
     b12:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     b14:	08 95       	ret

00000b16 <DComp_NextMSInterfaceBulkDataEndpoint>:
 *  another interface descriptor is found before the next endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMSInterfaceBulkDataEndpoint(void* CurrentDescriptor)
{
     b16:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     b18:	81 81       	ldd	r24, Z+1	; 0x01
     b1a:	85 30       	cpi	r24, 0x05	; 5
     b1c:	31 f4       	brne	.+12     	; 0xb2a <DComp_NextMSInterfaceBulkDataEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
     b1e:	83 81       	ldd	r24, Z+3	; 0x03
     b20:	83 70       	andi	r24, 0x03	; 3
     b22:	82 30       	cpi	r24, 0x02	; 2
     b24:	31 f4       	brne	.+12     	; 0xb32 <DComp_NextMSInterfaceBulkDataEndpoint+0x1c>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     b2a:	84 30       	cpi	r24, 0x04	; 4
     b2c:	11 f4       	brne	.+4      	; 0xb32 <DComp_NextMSInterfaceBulkDataEndpoint+0x1c>
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	08 95       	ret
     b32:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     b34:	08 95       	ret

00000b36 <ProcessConfigurationDescriptor>:
 *  This routine searches for a MSD interface descriptor containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref MassStorageHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     b36:	8f 92       	push	r8
     b38:	9f 92       	push	r9
     b3a:	af 92       	push	r10
     b3c:	bf 92       	push	r11
     b3e:	cf 92       	push	r12
     b40:	df 92       	push	r13
     b42:	ef 92       	push	r14
     b44:	ff 92       	push	r15
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c4 50       	subi	r28, 0x04	; 4
     b54:	d2 40       	sbci	r29, 0x02	; 2
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     b60:	ae 01       	movw	r20, r28
     b62:	4b 5f       	subi	r20, 0xFB	; 251
     b64:	5f 4f       	sbci	r21, 0xFF	; 255
     b66:	5a 83       	std	Y+2, r21	; 0x02
     b68:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Interface_t* MSInterface     = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     b6a:	83 e0       	ldi	r24, 0x03	; 3
     b6c:	a8 2e       	mov	r10, r24
     b6e:	b1 2c       	mov	r11, r1
     b70:	ac 0e       	add	r10, r28
     b72:	bd 1e       	adc	r11, r29
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	b5 01       	movw	r22, r10
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	32 e0       	ldi	r19, 0x02	; 2
     b7c:	42 d7       	rcall	.+3716   	; 0x1a02 <USB_Host_GetDeviceConfigDescriptor>
     b7e:	85 30       	cpi	r24, 0x05	; 5
     b80:	29 f0       	breq	.+10     	; 0xb8c <ProcessConfigurationDescriptor+0x56>
     b82:	86 30       	cpi	r24, 0x06	; 6
     b84:	89 f0       	breq	.+34     	; 0xba8 <ProcessConfigurationDescriptor+0x72>
     b86:	88 23       	and	r24, r24
     b88:	19 f0       	breq	.+6      	; 0xb90 <ProcessConfigurationDescriptor+0x5a>
     b8a:	10 c0       	rjmp	.+32     	; 0xbac <ProcessConfigurationDescriptor+0x76>
     b8c:	82 e0       	ldi	r24, 0x02	; 2
     b8e:	4a c0       	rjmp	.+148    	; 0xc24 <ProcessConfigurationDescriptor+0xee>
     b90:	00 e0       	ldi	r16, 0x00	; 0
     b92:	10 e0       	ldi	r17, 0x00	; 0
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	cc 24       	eor	r12, r12
     b9a:	dd 24       	eor	r13, r13
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MSInterface) ||
     b9c:	45 01       	movw	r8, r10
     b9e:	5e 01       	movw	r10, r28
     ba0:	08 94       	sec
     ba2:	a1 1c       	adc	r10, r1
     ba4:	b1 1c       	adc	r11, r1
     ba6:	04 c0       	rjmp	.+8      	; 0xbb0 <ProcessConfigurationDescriptor+0x7a>
	USB_Descriptor_Interface_t* MSInterface     = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     ba8:	83 e0       	ldi	r24, 0x03	; 3
     baa:	3c c0       	rjmp	.+120    	; 0xc24 <ProcessConfigurationDescriptor+0xee>
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	3a c0       	rjmp	.+116    	; 0xc24 <ProcessConfigurationDescriptor+0xee>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MSInterface) ||
     bb0:	01 15       	cp	r16, r1
     bb2:	11 05       	cpc	r17, r1
     bb4:	39 f0       	breq	.+14     	; 0xbc4 <ProcessConfigurationDescriptor+0x8e>
     bb6:	c4 01       	movw	r24, r8
     bb8:	b5 01       	movw	r22, r10
     bba:	4b e8       	ldi	r20, 0x8B	; 139
     bbc:	55 e0       	ldi	r21, 0x05	; 5
     bbe:	e0 d6       	rcall	.+3520   	; 0x1980 <USB_GetNextDescriptorComp>
     bc0:	88 23       	and	r24, r24
     bc2:	81 f0       	breq	.+32     	; 0xbe4 <ProcessConfigurationDescriptor+0xae>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextMSInterfaceBulkDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Mass Storage interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     bc4:	c4 01       	movw	r24, r8
     bc6:	b5 01       	movw	r22, r10
     bc8:	4a e7       	ldi	r20, 0x7A	; 122
     bca:	55 e0       	ldi	r21, 0x05	; 5
     bcc:	d9 d6       	rcall	.+3506   	; 0x1980 <USB_GetNextDescriptorComp>
     bce:	88 23       	and	r24, r24
     bd0:	11 f0       	breq	.+4      	; 0xbd6 <ProcessConfigurationDescriptor+0xa0>
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	27 c0       	rjmp	.+78     	; 0xc24 <ProcessConfigurationDescriptor+0xee>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			MSInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     bd6:	09 81       	ldd	r16, Y+1	; 0x01
     bd8:	1a 81       	ldd	r17, Y+2	; 0x02
     bda:	cc 24       	eor	r12, r12
     bdc:	dd 24       	eor	r13, r13
     bde:	ee 24       	eor	r14, r14
     be0:	ff 24       	eor	r15, r15
     be2:	e6 cf       	rjmp	.-52     	; 0xbb0 <ProcessConfigurationDescriptor+0x7a>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     be4:	e9 81       	ldd	r30, Y+1	; 0x01
     be6:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
     be8:	82 81       	ldd	r24, Z+2	; 0x02
     bea:	87 fd       	sbrc	r24, 7
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <ProcessConfigurationDescriptor+0xbc>
     bee:	6f 01       	movw	r12, r30
     bf0:	01 c0       	rjmp	.+2      	; 0xbf4 <ProcessConfigurationDescriptor+0xbe>
     bf2:	7f 01       	movw	r14, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     bf4:	e1 14       	cp	r14, r1
     bf6:	f1 04       	cpc	r15, r1
     bf8:	d9 f2       	breq	.-74     	; 0xbb0 <ProcessConfigurationDescriptor+0x7a>
     bfa:	c1 14       	cp	r12, r1
     bfc:	d1 04       	cpc	r13, r1
     bfe:	c1 f2       	breq	.-80     	; 0xbb0 <ProcessConfigurationDescriptor+0x7a>
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Configure the Mass Storage data IN pipe */
	Pipe_ConfigurePipe(MASS_STORE_DATA_IN_PIPE, EP_TYPE_BULK, PIPE_TOKEN_IN,
     c00:	f7 01       	movw	r30, r14
     c02:	04 81       	ldd	r16, Z+4	; 0x04
     c04:	15 81       	ldd	r17, Z+5	; 0x05
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	62 e0       	ldi	r22, 0x02	; 2
     c0a:	40 e1       	ldi	r20, 0x10	; 16
     c0c:	22 81       	ldd	r18, Z+2	; 0x02
     c0e:	ee 24       	eor	r14, r14
     c10:	29 d5       	rcall	.+2642   	; 0x1664 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the Mass Storage data OUT pipe */
	Pipe_ConfigurePipe(MASS_STORE_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
     c12:	f6 01       	movw	r30, r12
     c14:	04 81       	ldd	r16, Z+4	; 0x04
     c16:	15 81       	ldd	r17, Z+5	; 0x05
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	62 e0       	ldi	r22, 0x02	; 2
     c1c:	40 e2       	ldi	r20, 0x20	; 32
     c1e:	22 81       	ldd	r18, Z+2	; 0x02
     c20:	21 d5       	rcall	.+2626   	; 0x1664 <Pipe_ConfigurePipe>
     c22:	80 e0       	ldi	r24, 0x00	; 0
					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     c24:	cc 5f       	subi	r28, 0xFC	; 252
     c26:	dd 4f       	sbci	r29, 0xFD	; 253
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	de bf       	out	0x3e, r29	; 62
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	cd bf       	out	0x3d, r28	; 61
     c32:	cf 91       	pop	r28
     c34:	df 91       	pop	r29
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	ff 90       	pop	r15
     c3c:	ef 90       	pop	r14
     c3e:	df 90       	pop	r13
     c40:	cf 90       	pop	r12
     c42:	bf 90       	pop	r11
     c44:	af 90       	pop	r10
     c46:	9f 90       	pop	r9
     c48:	8f 90       	pop	r8
     c4a:	08 95       	ret

00000c4c <MassStore_WaitForDataReceived>:
			/** Returns the current USB frame number, when in host mode. Every millisecond the USB bus is active (i.e. not suspended)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     c4c:	40 91 a2 00 	lds	r20, 0x00A2
     c50:	50 91 a3 00 	lds	r21, 0x00A3
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     c5a:	80 91 a9 00 	lds	r24, 0x00A9
     c5e:	8f 7b       	andi	r24, 0xBF	; 191
     c60:	80 93 a9 00 	sts	0x00A9, r24
     c64:	20 e1       	ldi	r18, 0x10	; 16
     c66:	37 e2       	ldi	r19, 0x27	; 39
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     c68:	72 e0       	ldi	r23, 0x02	; 2
     c6a:	61 e0       	ldi	r22, 0x01	; 1
     c6c:	37 c0       	rjmp	.+110    	; 0xcdc <MassStore_WaitForDataReceived+0x90>
     c6e:	80 91 a2 00 	lds	r24, 0x00A2
     c72:	90 91 a3 00 	lds	r25, 0x00A3
	while (!(Pipe_IsINReceived()))
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		/* Check to see if a new frame has been issued (1ms elapsed) */
		if (CurrentFrameNumber != PreviousFrameNumber)
     c76:	84 17       	cp	r24, r20
     c78:	95 07       	cpc	r25, r21
     c7a:	31 f0       	breq	.+12     	; 0xc88 <MassStore_WaitForDataReceived+0x3c>
		{
			/* Save the new frame number and decrement the timeout period */
			PreviousFrameNumber = CurrentFrameNumber;
			TimeoutMSRem--;
     c7c:	21 50       	subi	r18, 0x01	; 1
     c7e:	30 40       	sbci	r19, 0x00	; 0

			/* Check to see if the timeout period for the command has elapsed */
			if (!(TimeoutMSRem))
     c80:	11 f4       	brne	.+4      	; 0xc86 <MassStore_WaitForDataReceived+0x3a>
     c82:	83 e0       	ldi	r24, 0x03	; 3
     c84:	08 95       	ret
     c86:	ac 01       	movw	r20, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     c88:	80 91 a9 00 	lds	r24, 0x00A9
     c8c:	80 64       	ori	r24, 0x40	; 64
     c8e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     c92:	70 93 a7 00 	sts	0x00A7, r23

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     c96:	80 91 a9 00 	lds	r24, 0x00A9
     c9a:	8f 7b       	andi	r24, 0xBF	; 191
     c9c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     ca0:	80 91 a6 00 	lds	r24, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     ca4:	81 ff       	sbrs	r24, 1
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <MassStore_WaitForDataReceived+0x60>
		{
			/* Clear the stall condition on the OUT pipe */
			USB_Host_ClearPipeStall(MASS_STORE_DATA_OUT_PIPE);
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	11 c0       	rjmp	.+34     	; 0xcce <MassStore_WaitForDataReceived+0x82>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     cac:	80 91 a9 00 	lds	r24, 0x00A9
     cb0:	80 64       	ori	r24, 0x40	; 64
     cb2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     cb6:	60 93 a7 00 	sts	0x00A7, r22

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     cba:	80 91 a9 00 	lds	r24, 0x00A9
     cbe:	8f 7b       	andi	r24, 0xBF	; 191
     cc0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     cc4:	80 91 a6 00 	lds	r24, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     cc8:	81 ff       	sbrs	r24, 1
     cca:	04 c0       	rjmp	.+8      	; 0xcd4 <MassStore_WaitForDataReceived+0x88>
		{
			/* Clear the stall condition on the IN pipe */
			USB_Host_ClearPipeStall(MASS_STORE_DATA_IN_PIPE);
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	6c d3       	rcall	.+1752   	; 0x13a8 <USB_Host_ClearPipeStall>
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	08 95       	ret

			return PIPE_RWSTREAM_PipeStalled;
		}

		/* Check to see if the device was disconnected, if so exit function */
		if (USB_HostState == HOST_STATE_Unattached)
     cd4:	80 91 49 01 	lds	r24, 0x0149
     cd8:	82 30       	cpi	r24, 0x02	; 2
     cda:	a9 f0       	breq	.+42     	; 0xd06 <MassStore_WaitForDataReceived+0xba>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     cdc:	80 91 a6 00 	lds	r24, 0x00A6
	/* Select the IN data pipe for data reception */
	Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Wait until data received in the IN pipe */
	while (!(Pipe_IsINReceived()))
     ce0:	80 ff       	sbrs	r24, 0
     ce2:	c5 cf       	rjmp	.-118    	; 0xc6e <MassStore_WaitForDataReceived+0x22>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	80 93 a7 00 	sts	0x00A7, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     cea:	80 91 a9 00 	lds	r24, 0x00A9
     cee:	80 64       	ori	r24, 0x40	; 64
     cf0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	80 93 a7 00 	sts	0x00A7, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     cfa:	80 91 a9 00 	lds	r24, 0x00A9
     cfe:	80 64       	ori	r24, 0x40	; 64
     d00:	80 93 a9 00 	sts	0x00A9, r24
     d04:	80 e0       	ldi	r24, 0x00	; 0

	Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
     d06:	08 95       	ret

00000d08 <MassStore_SendCommand>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
static uint8_t MassStore_SendCommand(MS_CommandBlockWrapper_t* const SCSICommandBlock,
                                     void* BufferPtr)
{
     d08:	cf 92       	push	r12
     d0a:	df 92       	push	r13
     d0c:	ef 92       	push	r14
     d0e:	ff 92       	push	r15
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	ec 01       	movw	r28, r24
     d1a:	8b 01       	movw	r16, r22
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	/* Each transmission should have a unique tag value, increment before use */
	SCSICommandBlock->Tag = ++MassStore_Tag;
     d1c:	80 91 00 01 	lds	r24, 0x0100
     d20:	90 91 01 01 	lds	r25, 0x0101
     d24:	a0 91 02 01 	lds	r26, 0x0102
     d28:	b0 91 03 01 	lds	r27, 0x0103
     d2c:	01 96       	adiw	r24, 0x01	; 1
     d2e:	a1 1d       	adc	r26, r1
     d30:	b1 1d       	adc	r27, r1
     d32:	80 93 00 01 	sts	0x0100, r24
     d36:	90 93 01 01 	sts	0x0101, r25
     d3a:	a0 93 02 01 	sts	0x0102, r26
     d3e:	b0 93 03 01 	sts	0x0103, r27
     d42:	8c 83       	std	Y+4, r24	; 0x04
     d44:	9d 83       	std	Y+5, r25	; 0x05
     d46:	ae 83       	std	Y+6, r26	; 0x06
     d48:	bf 83       	std	Y+7, r27	; 0x07

	/* Wrap Tag value when invalid - MS class defines tag values of 0 and 0xFFFFFFFF to be invalid */
	if (MassStore_Tag == 0xFFFFFFFF)
     d4a:	8f 5f       	subi	r24, 0xFF	; 255
     d4c:	9f 4f       	sbci	r25, 0xFF	; 255
     d4e:	af 4f       	sbci	r26, 0xFF	; 255
     d50:	bf 4f       	sbci	r27, 0xFF	; 255
     d52:	61 f4       	brne	.+24     	; 0xd6c <MassStore_SendCommand+0x64>
	  MassStore_Tag = 1;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	a0 e0       	ldi	r26, 0x00	; 0
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	80 93 00 01 	sts	0x0100, r24
     d60:	90 93 01 01 	sts	0x0101, r25
     d64:	a0 93 02 01 	sts	0x0102, r26
     d68:	b0 93 03 01 	sts	0x0103, r27
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	c8 2e       	mov	r12, r24
     d70:	c0 92 a7 00 	sts	0x00A7, r12

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     d74:	80 91 a9 00 	lds	r24, 0x00A9
     d78:	8f 7b       	andi	r24, 0xBF	; 191
     d7a:	80 93 a9 00 	sts	0x00A9, r24
	/* Select the OUT data pipe for CBW transmission */
	Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	/* Write the CBW command to the OUT pipe */
	if ((ErrorCode = Pipe_Write_Stream_LE(SCSICommandBlock, sizeof(MS_CommandBlockWrapper_t))) != PIPE_RWSTREAM_NoError)
     d7e:	ce 01       	movw	r24, r28
     d80:	6f e1       	ldi	r22, 0x1F	; 31
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	f7 d7       	rcall	.+4078   	; 0x1d74 <Pipe_Write_Stream_LE>
     d86:	d8 2e       	mov	r13, r24
     d88:	88 23       	and	r24, r24
     d8a:	09 f0       	breq	.+2      	; 0xd8e <MassStore_SendCommand+0x86>
     d8c:	54 c0       	rjmp	.+168    	; 0xe36 <MassStore_SendCommand+0x12e>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     d8e:	80 91 a6 00 	lds	r24, 0x00A6
     d92:	8b 77       	andi	r24, 0x7B	; 123
     d94:	80 93 a6 00 	sts	0x00A6, r24

	/* Send the data in the OUT pipe to the attached device */
	Pipe_ClearOUT();

	/* Wait until command has been sent */
	Pipe_WaitUntilReady();
     d98:	af d4       	rcall	.+2398   	; 0x16f8 <Pipe_WaitUntilReady>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     d9a:	80 91 a9 00 	lds	r24, 0x00A9
     d9e:	80 64       	ori	r24, 0x40	; 64
     da0:	80 93 a9 00 	sts	0x00A9, r24

	/* Freeze pipe after use */
	Pipe_Freeze();

	/* Send data if any */
	if ((BufferPtr != NULL) &&
     da4:	01 15       	cp	r16, r1
     da6:	11 05       	cpc	r17, r1
     da8:	09 f4       	brne	.+2      	; 0xdac <MassStore_SendCommand+0xa4>
     daa:	45 c0       	rjmp	.+138    	; 0xe36 <MassStore_SendCommand+0x12e>
 */
static uint8_t MassStore_SendReceiveData(MS_CommandBlockWrapper_t* const SCSICommandBlock,
                                         void* BufferPtr)
{
	uint8_t  ErrorCode = PIPE_RWSTREAM_NoError;
	uint16_t BytesRem  = SCSICommandBlock->DataTransferLength;
     dac:	e8 84       	ldd	r14, Y+8	; 0x08
     dae:	f9 84       	ldd	r15, Y+9	; 0x09

	/* Check the direction of the SCSI command data stage */
	if (SCSICommandBlock->Flags & MS_COMMAND_DIR_DATA_IN)
     db0:	8c 85       	ldd	r24, Y+12	; 0x0c
     db2:	87 ff       	sbrs	r24, 7
     db4:	18 c0       	rjmp	.+48     	; 0xde6 <MassStore_SendCommand+0xde>
	{
		/* Wait until the device has replied with some data */
		if ((ErrorCode = MassStore_WaitForDataReceived()) != PIPE_RWSTREAM_NoError)
     db6:	4a df       	rcall	.-364    	; 0xc4c <MassStore_WaitForDataReceived>
     db8:	98 2f       	mov	r25, r24
     dba:	88 23       	and	r24, r24
     dbc:	b1 f5       	brne	.+108    	; 0xe2a <MassStore_SendCommand+0x122>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     dc4:	80 91 a9 00 	lds	r24, 0x00A9
     dc8:	8f 7b       	andi	r24, 0xBF	; 191
     dca:	80 93 a9 00 	sts	0x00A9, r24
		/* Select the IN data pipe for data reception */
		Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
		Pipe_Unfreeze();

		/* Read in the block data from the pipe */
		if ((ErrorCode = Pipe_Read_Stream_LE(BufferPtr, BytesRem)) != PIPE_RWSTREAM_NoError)
     dce:	c8 01       	movw	r24, r16
     dd0:	b7 01       	movw	r22, r14
     dd2:	9d d7       	rcall	.+3898   	; 0x1d0e <Pipe_Read_Stream_LE>
     dd4:	98 2f       	mov	r25, r24
     dd6:	88 23       	and	r24, r24
     dd8:	41 f5       	brne	.+80     	; 0xe2a <MassStore_SendCommand+0x122>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     dda:	80 91 a6 00 	lds	r24, 0x00A6
     dde:	8e 77       	andi	r24, 0x7E	; 126
     de0:	80 93 a6 00 	sts	0x00A6, r24
     de4:	1b c0       	rjmp	.+54     	; 0xe1c <MassStore_SendCommand+0x114>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     de6:	c0 92 a7 00 	sts	0x00A7, r12

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     dea:	80 91 a9 00 	lds	r24, 0x00A9
     dee:	8f 7b       	andi	r24, 0xBF	; 191
     df0:	80 93 a9 00 	sts	0x00A9, r24
		/* Select the OUT data pipe for data transmission */
		Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
		Pipe_Unfreeze();

		/* Write the block data to the pipe */
		if ((ErrorCode = Pipe_Write_Stream_LE(BufferPtr, BytesRem)) != PIPE_RWSTREAM_NoError)
     df4:	c8 01       	movw	r24, r16
     df6:	b7 01       	movw	r22, r14
     df8:	bd d7       	rcall	.+3962   	; 0x1d74 <Pipe_Write_Stream_LE>
     dfa:	98 2f       	mov	r25, r24
     dfc:	88 23       	and	r24, r24
     dfe:	a9 f4       	brne	.+42     	; 0xe2a <MassStore_SendCommand+0x122>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     e00:	80 91 a6 00 	lds	r24, 0x00A6
     e04:	8b 77       	andi	r24, 0x7B	; 123
     e06:	80 93 a6 00 	sts	0x00A6, r24
     e0a:	04 c0       	rjmp	.+8      	; 0xe14 <MassStore_SendCommand+0x10c>
		/* Acknowledge the packet */
		Pipe_ClearOUT();

		while (!(Pipe_IsOUTReady()))
		{
			if (USB_HostState == HOST_STATE_Unattached)
     e0c:	80 91 49 01 	lds	r24, 0x0149
     e10:	82 30       	cpi	r24, 0x02	; 2
     e12:	51 f0       	breq	.+20     	; 0xe28 <MassStore_SendCommand+0x120>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e14:	80 91 a6 00 	lds	r24, 0x00A6
		  return ErrorCode;

		/* Acknowledge the packet */
		Pipe_ClearOUT();

		while (!(Pipe_IsOUTReady()))
     e18:	82 ff       	sbrs	r24, 2
     e1a:	f8 cf       	rjmp	.-16     	; 0xe0c <MassStore_SendCommand+0x104>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     e1c:	80 91 a9 00 	lds	r24, 0x00A9
     e20:	80 64       	ori	r24, 0x40	; 64
     e22:	80 93 a9 00 	sts	0x00A9, r24
     e26:	07 c0       	rjmp	.+14     	; 0xe36 <MassStore_SendCommand+0x12e>
     e28:	92 e0       	ldi	r25, 0x02	; 2
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
     e2a:	80 91 a9 00 	lds	r24, 0x00A9
     e2e:	80 64       	ori	r24, 0x40	; 64
     e30:	80 93 a9 00 	sts	0x00A9, r24
     e34:	d9 2e       	mov	r13, r25
     e36:	8d 2d       	mov	r24, r13
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	1f 91       	pop	r17
     e3e:	0f 91       	pop	r16
     e40:	ff 90       	pop	r15
     e42:	ef 90       	pop	r14
     e44:	df 90       	pop	r13
     e46:	cf 90       	pop	r12
     e48:	08 95       	ret

00000e4a <MassStore_GetReturnedStatus>:
 *  \param[out] SCSICommandStatus  Pointer to a destination where the returned status data should be stored
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
static uint8_t MassStore_GetReturnedStatus(MS_CommandStatusWrapper_t* const SCSICommandStatus)
{
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	ec 01       	movw	r28, r24
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	/* If an error in the command occurred, abort */
	if ((ErrorCode = MassStore_WaitForDataReceived()) != PIPE_RWSTREAM_NoError)
     e50:	fd de       	rcall	.-518    	; 0xc4c <MassStore_WaitForDataReceived>
     e52:	98 2f       	mov	r25, r24
     e54:	88 23       	and	r24, r24
     e56:	e1 f4       	brne	.+56     	; 0xe90 <MassStore_GetReturnedStatus+0x46>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e5e:	80 91 a9 00 	lds	r24, 0x00A9
     e62:	8f 7b       	andi	r24, 0xBF	; 191
     e64:	80 93 a9 00 	sts	0x00A9, r24
	/* Select the IN data pipe for data reception */
	Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Load in the CSW from the attached device */
	if ((ErrorCode = Pipe_Read_Stream_LE(SCSICommandStatus, sizeof(MS_CommandStatusWrapper_t))) != PIPE_RWSTREAM_NoError)
     e68:	ce 01       	movw	r24, r28
     e6a:	6d e0       	ldi	r22, 0x0D	; 13
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	4f d7       	rcall	.+3742   	; 0x1d0e <Pipe_Read_Stream_LE>
     e70:	98 2f       	mov	r25, r24
     e72:	88 23       	and	r24, r24
     e74:	69 f4       	brne	.+26     	; 0xe90 <MassStore_GetReturnedStatus+0x46>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     e76:	80 91 a6 00 	lds	r24, 0x00A6
     e7a:	8e 77       	andi	r24, 0x7E	; 126
     e7c:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     e80:	80 91 a9 00 	lds	r24, 0x00A9
     e84:	80 64       	ori	r24, 0x40	; 64
     e86:	80 93 a9 00 	sts	0x00A9, r24

	/* Freeze the IN pipe after use */
	Pipe_Freeze();

	/* Check to see if command failed */
	if (SCSICommandStatus->Status != MS_SCSI_COMMAND_Pass)
     e8a:	8c 85       	ldd	r24, Y+12	; 0x0c
     e8c:	81 11       	cpse	r24, r1
     e8e:	90 ec       	ldi	r25, 0xC0	; 192
	  ErrorCode = MASS_STORE_SCSI_COMMAND_FAILED;

	return ErrorCode;
}
     e90:	89 2f       	mov	r24, r25
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	08 95       	ret

00000e98 <MassStore_PreventAllowMediumRemoval>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_PreventAllowMediumRemoval(const uint8_t LUNIndex,
                                            const bool PreventRemoval)
{
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	ac 97       	sbiw	r28, 0x2c	; 44
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
					0x00,                   // Reserved
					PreventRemoval,         // Prevent flag
					0x00,                   // Reserved
					0x00                    // Unused (control)
				}
		};
     eac:	fe 01       	movw	r30, r28
     eae:	3e 96       	adiw	r30, 0x0e	; 14
     eb0:	9f e1       	ldi	r25, 0x1F	; 31
     eb2:	df 01       	movw	r26, r30
     eb4:	1d 92       	st	X+, r1
     eb6:	9a 95       	dec	r25
     eb8:	e9 f7       	brne	.-6      	; 0xeb4 <MassStore_PreventAllowMediumRemoval+0x1c>
     eba:	25 e5       	ldi	r18, 0x55	; 85
     ebc:	33 e5       	ldi	r19, 0x53	; 83
     ebe:	42 e4       	ldi	r20, 0x42	; 66
     ec0:	53 e4       	ldi	r21, 0x43	; 67
     ec2:	2e 87       	std	Y+14, r18	; 0x0e
     ec4:	3f 87       	std	Y+15, r19	; 0x0f
     ec6:	48 8b       	std	Y+16, r20	; 0x10
     ec8:	59 8b       	std	Y+17, r21	; 0x11
     eca:	8b 8f       	std	Y+27, r24	; 0x1b
     ecc:	86 e0       	ldi	r24, 0x06	; 6
     ece:	8c 8f       	std	Y+28, r24	; 0x1c
     ed0:	8e e1       	ldi	r24, 0x1E	; 30
     ed2:	8d 8f       	std	Y+29, r24	; 0x1d
     ed4:	68 a3       	std	Y+32, r22	; 0x20

	MS_CommandStatusWrapper_t SCSICommandStatus;

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, NULL)) != PIPE_RWSTREAM_NoError)
     ed6:	cf 01       	movw	r24, r30
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	15 df       	rcall	.-470    	; 0xd08 <MassStore_SendCommand>
     ede:	98 2f       	mov	r25, r24
     ee0:	88 23       	and	r24, r24
     ee2:	31 f4       	brne	.+12     	; 0xef0 <MassStore_PreventAllowMediumRemoval+0x58>
		Pipe_Freeze();
		return ErrorCode;
	}

	/* Retrieve status information from the attached device */
	if ((ErrorCode = MassStore_GetReturnedStatus(&SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
     ee4:	ce 01       	movw	r24, r28
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	b0 df       	rcall	.-160    	; 0xe4a <MassStore_GetReturnedStatus>
     eea:	98 2f       	mov	r25, r24
     eec:	88 23       	and	r24, r24
     eee:	29 f0       	breq	.+10     	; 0xefa <MassStore_PreventAllowMediumRemoval+0x62>
     ef0:	80 91 a9 00 	lds	r24, 0x00A9
     ef4:	80 64       	ori	r24, 0x40	; 64
     ef6:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
     efa:	89 2f       	mov	r24, r25
     efc:	ac 96       	adiw	r28, 0x2c	; 44
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	f8 94       	cli
     f02:	de bf       	out	0x3e, r29	; 62
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	cd bf       	out	0x3d, r28	; 61
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <MassStore_ReadCapacity>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_ReadCapacity(const uint8_t LUNIndex,
                               SCSI_Capacity_t* const CapacityPtr)
{
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	ac 97       	sbiw	r28, 0x2c	; 44
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	8b 01       	movw	r16, r22
					0x00,                   // Reserved
					0x00,                   // Reserved
					0x00,                   // Partial Medium Indicator
					0x00                    // Unused (control)
				}
		};
     f28:	fe 01       	movw	r30, r28
     f2a:	3e 96       	adiw	r30, 0x0e	; 14
     f2c:	9f e1       	ldi	r25, 0x1F	; 31
     f2e:	df 01       	movw	r26, r30
     f30:	1d 92       	st	X+, r1
     f32:	9a 95       	dec	r25
     f34:	e9 f7       	brne	.-6      	; 0xf30 <MassStore_ReadCapacity+0x22>
     f36:	25 e5       	ldi	r18, 0x55	; 85
     f38:	33 e5       	ldi	r19, 0x53	; 83
     f3a:	42 e4       	ldi	r20, 0x42	; 66
     f3c:	53 e4       	ldi	r21, 0x43	; 67
     f3e:	2e 87       	std	Y+14, r18	; 0x0e
     f40:	3f 87       	std	Y+15, r19	; 0x0f
     f42:	48 8b       	std	Y+16, r20	; 0x10
     f44:	59 8b       	std	Y+17, r21	; 0x11
     f46:	28 e0       	ldi	r18, 0x08	; 8
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	40 e0       	ldi	r20, 0x00	; 0
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	2e 8b       	std	Y+22, r18	; 0x16
     f50:	3f 8b       	std	Y+23, r19	; 0x17
     f52:	48 8f       	std	Y+24, r20	; 0x18
     f54:	59 8f       	std	Y+25, r21	; 0x19
     f56:	90 e8       	ldi	r25, 0x80	; 128
     f58:	9a 8f       	std	Y+26, r25	; 0x1a
     f5a:	8b 8f       	std	Y+27, r24	; 0x1b
     f5c:	8a e0       	ldi	r24, 0x0A	; 10
     f5e:	8c 8f       	std	Y+28, r24	; 0x1c
     f60:	85 e2       	ldi	r24, 0x25	; 37
     f62:	8d 8f       	std	Y+29, r24	; 0x1d

	MS_CommandStatusWrapper_t SCSICommandStatus;

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, CapacityPtr)) != PIPE_RWSTREAM_NoError)
     f64:	cf 01       	movw	r24, r30
     f66:	d0 de       	rcall	.-608    	; 0xd08 <MassStore_SendCommand>
     f68:	98 2f       	mov	r25, r24
     f6a:	88 23       	and	r24, r24
     f6c:	b9 f4       	brne	.+46     	; 0xf9c <MassStore_ReadCapacity+0x8e>
				{
					uint32_t DWord;
					uint8_t  Bytes[4];
				} Data;

				Data.DWord = DWord;
     f6e:	f8 01       	movw	r30, r16
     f70:	30 81       	ld	r19, Z
     f72:	21 81       	ldd	r18, Z+1	; 0x01
     f74:	92 81       	ldd	r25, Z+2	; 0x02
     f76:	83 81       	ldd	r24, Z+3	; 0x03
		Pipe_Freeze();
		return ErrorCode;
	}

	/* Endian-correct the read data */
	CapacityPtr->Blocks    = SwapEndian_32(CapacityPtr->Blocks);
     f78:	80 83       	st	Z, r24
     f7a:	91 83       	std	Z+1, r25	; 0x01
     f7c:	22 83       	std	Z+2, r18	; 0x02
     f7e:	33 83       	std	Z+3, r19	; 0x03
     f80:	34 81       	ldd	r19, Z+4	; 0x04
     f82:	25 81       	ldd	r18, Z+5	; 0x05
     f84:	96 81       	ldd	r25, Z+6	; 0x06
     f86:	87 81       	ldd	r24, Z+7	; 0x07
	CapacityPtr->BlockSize = SwapEndian_32(CapacityPtr->BlockSize);
     f88:	84 83       	std	Z+4, r24	; 0x04
     f8a:	95 83       	std	Z+5, r25	; 0x05
     f8c:	26 83       	std	Z+6, r18	; 0x06
     f8e:	37 83       	std	Z+7, r19	; 0x07

	/* Retrieve status information from the attached device */
	if ((ErrorCode = MassStore_GetReturnedStatus(&SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
     f90:	ce 01       	movw	r24, r28
     f92:	01 96       	adiw	r24, 0x01	; 1
     f94:	5a df       	rcall	.-332    	; 0xe4a <MassStore_GetReturnedStatus>
     f96:	98 2f       	mov	r25, r24
     f98:	88 23       	and	r24, r24
     f9a:	29 f0       	breq	.+10     	; 0xfa6 <MassStore_ReadCapacity+0x98>
     f9c:	80 91 a9 00 	lds	r24, 0x00A9
     fa0:	80 64       	ori	r24, 0x40	; 64
     fa2:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
     fa6:	89 2f       	mov	r24, r25
     fa8:	ac 96       	adiw	r28, 0x2c	; 44
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	08 95       	ret

00000fbe <MassStore_TestUnitReady>:
 *  \param[in] LUNIndex      Index of the LUN inside the device the command is being addressed to
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_TestUnitReady(const uint8_t LUNIndex)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	ac 97       	sbiw	r28, 0x2c	; 44
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	cd bf       	out	0x3d, r28	; 61
					0x00,                   // Reserved
					0x00,                   // Reserved
					0x00,                   // Reserved
					0x00                    // Unused (control)
				}
		};
     fd2:	fe 01       	movw	r30, r28
     fd4:	3e 96       	adiw	r30, 0x0e	; 14
     fd6:	9f e1       	ldi	r25, 0x1F	; 31
     fd8:	df 01       	movw	r26, r30
     fda:	1d 92       	st	X+, r1
     fdc:	9a 95       	dec	r25
     fde:	e9 f7       	brne	.-6      	; 0xfda <MassStore_TestUnitReady+0x1c>
     fe0:	25 e5       	ldi	r18, 0x55	; 85
     fe2:	33 e5       	ldi	r19, 0x53	; 83
     fe4:	42 e4       	ldi	r20, 0x42	; 66
     fe6:	53 e4       	ldi	r21, 0x43	; 67
     fe8:	2e 87       	std	Y+14, r18	; 0x0e
     fea:	3f 87       	std	Y+15, r19	; 0x0f
     fec:	48 8b       	std	Y+16, r20	; 0x10
     fee:	59 8b       	std	Y+17, r21	; 0x11
     ff0:	90 e8       	ldi	r25, 0x80	; 128
     ff2:	9a 8f       	std	Y+26, r25	; 0x1a
     ff4:	8b 8f       	std	Y+27, r24	; 0x1b
     ff6:	86 e0       	ldi	r24, 0x06	; 6
     ff8:	8c 8f       	std	Y+28, r24	; 0x1c

	MS_CommandStatusWrapper_t SCSICommandStatus;

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, NULL)) != PIPE_RWSTREAM_NoError)
     ffa:	cf 01       	movw	r24, r30
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	83 de       	rcall	.-762    	; 0xd08 <MassStore_SendCommand>
    1002:	98 2f       	mov	r25, r24
    1004:	88 23       	and	r24, r24
    1006:	31 f4       	brne	.+12     	; 0x1014 <MassStore_TestUnitReady+0x56>
		Pipe_Freeze();
		return ErrorCode;
	}

	/* Retrieve status information from the attached device */
	if ((ErrorCode = MassStore_GetReturnedStatus(&SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    1008:	ce 01       	movw	r24, r28
    100a:	01 96       	adiw	r24, 0x01	; 1
    100c:	1e df       	rcall	.-452    	; 0xe4a <MassStore_GetReturnedStatus>
    100e:	98 2f       	mov	r25, r24
    1010:	88 23       	and	r24, r24
    1012:	29 f0       	breq	.+10     	; 0x101e <MassStore_TestUnitReady+0x60>
    1014:	80 91 a9 00 	lds	r24, 0x00A9
    1018:	80 64       	ori	r24, 0x40	; 64
    101a:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
    101e:	89 2f       	mov	r24, r25
    1020:	ac 96       	adiw	r28, 0x2c	; 44
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <MassStore_ReadDeviceBlock>:
uint8_t MassStore_ReadDeviceBlock(const uint8_t LUNIndex,
                                  const uint32_t BlockAddress,
                                  const uint8_t Blocks,
                                  const uint16_t BlockSize,
                                  void* BufferPtr)
{
    1032:	8f 92       	push	r8
    1034:	9f 92       	push	r9
    1036:	af 92       	push	r10
    1038:	bf 92       	push	r11
    103a:	cf 92       	push	r12
    103c:	df 92       	push	r13
    103e:	ef 92       	push	r14
    1040:	ff 92       	push	r15
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	ac 97       	sbiw	r28, 0x2c	; 44
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	f8 94       	cli
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	cd bf       	out	0x3d, r28	; 61
    105a:	98 2e       	mov	r9, r24
    105c:	5a 01       	movw	r10, r20
    105e:	6b 01       	movw	r12, r22
    1060:	82 2e       	mov	r8, r18
    1062:	b8 01       	movw	r22, r16
					0x00,                   // Reserved
					0x00,                   // MSB of Total Blocks to Read
					Blocks,                 // LSB of Total Blocks to Read
					0x00                    // Unused (control)
				}
		};
    1064:	8e 01       	movw	r16, r28
    1066:	02 5f       	subi	r16, 0xF2	; 242
    1068:	1f 4f       	sbci	r17, 0xFF	; 255
    106a:	2f e1       	ldi	r18, 0x1F	; 31
    106c:	f8 01       	movw	r30, r16
    106e:	11 92       	st	Z+, r1
    1070:	2a 95       	dec	r18
    1072:	e9 f7       	brne	.-6      	; 0x106e <MassStore_ReadDeviceBlock+0x3c>
    1074:	25 e5       	ldi	r18, 0x55	; 85
    1076:	33 e5       	ldi	r19, 0x53	; 83
    1078:	42 e4       	ldi	r20, 0x42	; 66
    107a:	53 e4       	ldi	r21, 0x43	; 67
    107c:	2e 87       	std	Y+14, r18	; 0x0e
    107e:	3f 87       	std	Y+15, r19	; 0x0f
    1080:	48 8b       	std	Y+16, r20	; 0x10
    1082:	59 8b       	std	Y+17, r21	; 0x11
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	28 2d       	mov	r18, r8
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	40 e0       	ldi	r20, 0x00	; 0
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	d1 d6       	rcall	.+3490   	; 0x1e34 <__mulsi3>
    1092:	6e 8b       	std	Y+22, r22	; 0x16
    1094:	7f 8b       	std	Y+23, r23	; 0x17
    1096:	88 8f       	std	Y+24, r24	; 0x18
    1098:	99 8f       	std	Y+25, r25	; 0x19
    109a:	80 e8       	ldi	r24, 0x80	; 128
    109c:	8a 8f       	std	Y+26, r24	; 0x1a
    109e:	9b 8e       	std	Y+27, r9	; 0x1b
    10a0:	8a e0       	ldi	r24, 0x0A	; 10
    10a2:	8c 8f       	std	Y+28, r24	; 0x1c
    10a4:	88 e2       	ldi	r24, 0x28	; 40
    10a6:	8d 8f       	std	Y+29, r24	; 0x1d
    10a8:	8d 2d       	mov	r24, r13
    10aa:	99 27       	eor	r25, r25
    10ac:	aa 27       	eor	r26, r26
    10ae:	bb 27       	eor	r27, r27
    10b0:	8f 8f       	std	Y+31, r24	; 0x1f
    10b2:	c6 01       	movw	r24, r12
    10b4:	aa 27       	eor	r26, r26
    10b6:	bb 27       	eor	r27, r27
    10b8:	88 a3       	std	Y+32, r24	; 0x20
    10ba:	bb 27       	eor	r27, r27
    10bc:	ad 2d       	mov	r26, r13
    10be:	9c 2d       	mov	r25, r12
    10c0:	8b 2d       	mov	r24, r11
    10c2:	89 a3       	std	Y+33, r24	; 0x21
    10c4:	aa a2       	std	Y+34, r10	; 0x22
    10c6:	8d a2       	std	Y+37, r8	; 0x25

	MS_CommandStatusWrapper_t SCSICommandStatus;

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, BufferPtr)) != PIPE_RWSTREAM_NoError)
    10c8:	c8 01       	movw	r24, r16
    10ca:	b7 01       	movw	r22, r14
    10cc:	1d de       	rcall	.-966    	; 0xd08 <MassStore_SendCommand>
    10ce:	98 2f       	mov	r25, r24
    10d0:	88 23       	and	r24, r24
    10d2:	31 f4       	brne	.+12     	; 0x10e0 <MassStore_ReadDeviceBlock+0xae>
		Pipe_Freeze();
		return ErrorCode;
	}

	/* Retrieve status information from the attached device */
	if ((ErrorCode = MassStore_GetReturnedStatus(&SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    10d4:	ce 01       	movw	r24, r28
    10d6:	01 96       	adiw	r24, 0x01	; 1
    10d8:	b8 de       	rcall	.-656    	; 0xe4a <MassStore_GetReturnedStatus>
    10da:	98 2f       	mov	r25, r24
    10dc:	88 23       	and	r24, r24
    10de:	29 f0       	breq	.+10     	; 0x10ea <MassStore_ReadDeviceBlock+0xb8>
    10e0:	80 91 a9 00 	lds	r24, 0x00A9
    10e4:	80 64       	ori	r24, 0x40	; 64
    10e6:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
    10ea:	89 2f       	mov	r24, r25
    10ec:	ac 96       	adiw	r28, 0x2c	; 44
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	1f 91       	pop	r17
    10fe:	0f 91       	pop	r16
    1100:	ff 90       	pop	r15
    1102:	ef 90       	pop	r14
    1104:	df 90       	pop	r13
    1106:	cf 90       	pop	r12
    1108:	bf 90       	pop	r11
    110a:	af 90       	pop	r10
    110c:	9f 90       	pop	r9
    110e:	8f 90       	pop	r8
    1110:	08 95       	ret

00001112 <MassStore_RequestSense>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_RequestSense(const uint8_t LUNIndex,
                               SCSI_Request_Sense_Response_t* const SensePtr)
{
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	ac 97       	sbiw	r28, 0x2c	; 44
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
					0x00,                   // Reserved
					0x00,                   // Reserved
					sizeof(SCSI_Request_Sense_Response_t), // Allocation Length
					0x00                    // Unused (control)
				}
		};
    1126:	fe 01       	movw	r30, r28
    1128:	3e 96       	adiw	r30, 0x0e	; 14
    112a:	9f e1       	ldi	r25, 0x1F	; 31
    112c:	df 01       	movw	r26, r30
    112e:	1d 92       	st	X+, r1
    1130:	9a 95       	dec	r25
    1132:	e9 f7       	brne	.-6      	; 0x112e <MassStore_RequestSense+0x1c>
    1134:	25 e5       	ldi	r18, 0x55	; 85
    1136:	33 e5       	ldi	r19, 0x53	; 83
    1138:	42 e4       	ldi	r20, 0x42	; 66
    113a:	53 e4       	ldi	r21, 0x43	; 67
    113c:	2e 87       	std	Y+14, r18	; 0x0e
    113e:	3f 87       	std	Y+15, r19	; 0x0f
    1140:	48 8b       	std	Y+16, r20	; 0x10
    1142:	59 8b       	std	Y+17, r21	; 0x11
    1144:	22 e1       	ldi	r18, 0x12	; 18
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e0       	ldi	r20, 0x00	; 0
    114a:	50 e0       	ldi	r21, 0x00	; 0
    114c:	2e 8b       	std	Y+22, r18	; 0x16
    114e:	3f 8b       	std	Y+23, r19	; 0x17
    1150:	48 8f       	std	Y+24, r20	; 0x18
    1152:	59 8f       	std	Y+25, r21	; 0x19
    1154:	90 e8       	ldi	r25, 0x80	; 128
    1156:	9a 8f       	std	Y+26, r25	; 0x1a
    1158:	8b 8f       	std	Y+27, r24	; 0x1b
    115a:	86 e0       	ldi	r24, 0x06	; 6
    115c:	8c 8f       	std	Y+28, r24	; 0x1c
    115e:	83 e0       	ldi	r24, 0x03	; 3
    1160:	8d 8f       	std	Y+29, r24	; 0x1d
    1162:	82 e1       	ldi	r24, 0x12	; 18
    1164:	89 a3       	std	Y+33, r24	; 0x21

	MS_CommandStatusWrapper_t SCSICommandStatus;

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, SensePtr)) != PIPE_RWSTREAM_NoError)
    1166:	cf 01       	movw	r24, r30
    1168:	cf dd       	rcall	.-1122   	; 0xd08 <MassStore_SendCommand>
    116a:	98 2f       	mov	r25, r24
    116c:	88 23       	and	r24, r24
    116e:	31 f4       	brne	.+12     	; 0x117c <MassStore_RequestSense+0x6a>
		Pipe_Freeze();
		return ErrorCode;
	}

	/* Retrieve status information from the attached device */
	if ((ErrorCode = MassStore_GetReturnedStatus(&SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    1170:	ce 01       	movw	r24, r28
    1172:	01 96       	adiw	r24, 0x01	; 1
    1174:	6a de       	rcall	.-812    	; 0xe4a <MassStore_GetReturnedStatus>
    1176:	98 2f       	mov	r25, r24
    1178:	88 23       	and	r24, r24
    117a:	29 f0       	breq	.+10     	; 0x1186 <MassStore_RequestSense+0x74>
    117c:	80 91 a9 00 	lds	r24, 0x00A9
    1180:	80 64       	ori	r24, 0x40	; 64
    1182:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
    1186:	89 2f       	mov	r24, r25
    1188:	ac 96       	adiw	r28, 0x2c	; 44
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <MassStore_Inquiry>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_Inquiry(const uint8_t LUNIndex,
                          SCSI_Inquiry_Response_t* const InquiryPtr)
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	ac 97       	sbiw	r28, 0x2c	; 44
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
					0x00,                   // Reserved
					0x00,                   // Reserved
					sizeof(SCSI_Inquiry_Response_t), // Allocation Length
					0x00                    // Unused (control)
				}
		};
    11ae:	fe 01       	movw	r30, r28
    11b0:	3e 96       	adiw	r30, 0x0e	; 14
    11b2:	9f e1       	ldi	r25, 0x1F	; 31
    11b4:	df 01       	movw	r26, r30
    11b6:	1d 92       	st	X+, r1
    11b8:	9a 95       	dec	r25
    11ba:	e9 f7       	brne	.-6      	; 0x11b6 <MassStore_Inquiry+0x1c>
    11bc:	25 e5       	ldi	r18, 0x55	; 85
    11be:	33 e5       	ldi	r19, 0x53	; 83
    11c0:	42 e4       	ldi	r20, 0x42	; 66
    11c2:	53 e4       	ldi	r21, 0x43	; 67
    11c4:	2e 87       	std	Y+14, r18	; 0x0e
    11c6:	3f 87       	std	Y+15, r19	; 0x0f
    11c8:	48 8b       	std	Y+16, r20	; 0x10
    11ca:	59 8b       	std	Y+17, r21	; 0x11
    11cc:	24 e2       	ldi	r18, 0x24	; 36
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	40 e0       	ldi	r20, 0x00	; 0
    11d2:	50 e0       	ldi	r21, 0x00	; 0
    11d4:	2e 8b       	std	Y+22, r18	; 0x16
    11d6:	3f 8b       	std	Y+23, r19	; 0x17
    11d8:	48 8f       	std	Y+24, r20	; 0x18
    11da:	59 8f       	std	Y+25, r21	; 0x19
    11dc:	90 e8       	ldi	r25, 0x80	; 128
    11de:	9a 8f       	std	Y+26, r25	; 0x1a
    11e0:	8b 8f       	std	Y+27, r24	; 0x1b
    11e2:	86 e0       	ldi	r24, 0x06	; 6
    11e4:	8c 8f       	std	Y+28, r24	; 0x1c
    11e6:	82 e1       	ldi	r24, 0x12	; 18
    11e8:	8d 8f       	std	Y+29, r24	; 0x1d
    11ea:	84 e2       	ldi	r24, 0x24	; 36
    11ec:	89 a3       	std	Y+33, r24	; 0x21

	MS_CommandStatusWrapper_t SCSICommandStatus;

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, InquiryPtr)) != PIPE_RWSTREAM_NoError)
    11ee:	cf 01       	movw	r24, r30
    11f0:	8b dd       	rcall	.-1258   	; 0xd08 <MassStore_SendCommand>
    11f2:	98 2f       	mov	r25, r24
    11f4:	88 23       	and	r24, r24
    11f6:	31 f4       	brne	.+12     	; 0x1204 <MassStore_Inquiry+0x6a>
		Pipe_Freeze();
		return ErrorCode;
	}

	/* Retrieve status information from the attached device */
	if ((ErrorCode = MassStore_GetReturnedStatus(&SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    11f8:	ce 01       	movw	r24, r28
    11fa:	01 96       	adiw	r24, 0x01	; 1
    11fc:	26 de       	rcall	.-948    	; 0xe4a <MassStore_GetReturnedStatus>
    11fe:	98 2f       	mov	r25, r24
    1200:	88 23       	and	r24, r24
    1202:	29 f0       	breq	.+10     	; 0x120e <MassStore_Inquiry+0x74>
    1204:	80 91 a9 00 	lds	r24, 0x00A9
    1208:	80 64       	ori	r24, 0x40	; 64
    120a:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
    120e:	89 2f       	mov	r24, r25
    1210:	ac 96       	adiw	r28, 0x2c	; 44
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <MassStore_GetMaxLUN>:
 *  \param[out] MaxLUNIndex  Pointer to the location that the maximum LUN index value should be stored
 *
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_GetMaxLUN(uint8_t* const MaxLUNIndex)
{
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	ec 01       	movw	r28, r24
	uint8_t ErrorCode = HOST_SENDCONTROL_Successful;

	USB_ControlRequest = (USB_Request_Header_t)
    1228:	a1 e4       	ldi	r26, 0x41	; 65
    122a:	b1 e0       	ldi	r27, 0x01	; 1
    122c:	e4 e0       	ldi	r30, 0x04	; 4
    122e:	f1 e0       	ldi	r31, 0x01	; 1
    1230:	88 e0       	ldi	r24, 0x08	; 8
    1232:	01 90       	ld	r0, Z+
    1234:	0d 92       	st	X+, r0
    1236:	81 50       	subi	r24, 0x01	; 1
    1238:	e1 f7       	brne	.-8      	; 0x1232 <MassStore_GetMaxLUN+0x10>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    123a:	10 92 a7 00 	sts	0x00A7, r1
		};

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(MaxLUNIndex)) == HOST_SENDCONTROL_SetupStalled)
    123e:	ce 01       	movw	r24, r28
    1240:	64 d4       	rcall	.+2248   	; 0x1b0a <USB_Host_SendControlRequest>
    1242:	83 30       	cpi	r24, 0x03	; 3
    1244:	39 f4       	brne	.+14     	; 0x1254 <MassStore_GetMaxLUN+0x32>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
    1246:	80 91 a6 00 	lds	r24, 0x00A6
    124a:	8d 7f       	andi	r24, 0xFD	; 253
    124c:	80 93 a6 00 	sts	0x00A6, r24
	{
		/* Clear the pipe stall */
		Pipe_ClearStall();

		/* Some faulty Mass Storage devices don't implement the GET_MAX_LUN request, so assume a single LUN */
		*MaxLUNIndex = 0;
    1250:	18 82       	st	Y, r1
    1252:	80 e0       	ldi	r24, 0x00	; 0
		/* Clear the error, and pretend the request executed correctly if the device STALLed it */
		ErrorCode = HOST_SENDCONTROL_Successful;
	}

	return ErrorCode;
}
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	08 95       	ret

0000125a <MassStore_MassStorageReset>:
 *
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_MassStorageReset(void)
{
	USB_ControlRequest = (USB_Request_Header_t)
    125a:	a1 e4       	ldi	r26, 0x41	; 65
    125c:	b1 e0       	ldi	r27, 0x01	; 1
    125e:	ec e0       	ldi	r30, 0x0C	; 12
    1260:	f1 e0       	ldi	r31, 0x01	; 1
    1262:	88 e0       	ldi	r24, 0x08	; 8
    1264:	01 90       	ld	r0, Z+
    1266:	0d 92       	st	X+, r0
    1268:	81 50       	subi	r24, 0x01	; 1
    126a:	e1 f7       	brne	.-8      	; 0x1264 <MassStore_MassStorageReset+0xa>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    126c:	10 92 a7 00 	sts	0x00A7, r1
		};

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	90 e0       	ldi	r25, 0x00	; 0
}
    1274:	4a c4       	rjmp	.+2196   	; 0x1b0a <USB_Host_SendControlRequest>

00001276 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
    1276:	98 2f       	mov	r25, r24
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1278:	20 91 9e 00 	lds	r18, 0x009E
	bool    BusSuspended = USB_Host_IsBusSuspended();
	uint8_t ErrorCode    = HOST_WAITERROR_Successful;
	bool    HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
    127c:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
    1280:	80 91 a0 00 	lds	r24, 0x00A0
    1284:	8f 7d       	andi	r24, 0xDF	; 223
    1286:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
    128a:	80 91 9f 00 	lds	r24, 0x009F
    128e:	8f 7d       	andi	r24, 0xDF	; 223
    1290:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1294:	80 91 9e 00 	lds	r24, 0x009E
    1298:	81 60       	ori	r24, 0x01	; 1
    129a:	80 93 9e 00 	sts	0x009E, r24
    129e:	26 c0       	rjmp	.+76     	; 0x12ec <USB_Host_WaitMS+0x76>

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    12a0:	80 91 9f 00 	lds	r24, 0x009F
    12a4:	85 ff       	sbrs	r24, 5
    12a6:	06 c0       	rjmp	.+12     	; 0x12b4 <USB_Host_WaitMS+0x3e>
		{
			USB_INT_Clear(USB_INT_HSOFI);
    12a8:	80 91 9f 00 	lds	r24, 0x009F
    12ac:	8f 7d       	andi	r24, 0xDF	; 223
    12ae:	80 93 9f 00 	sts	0x009F, r24
			MS--;
    12b2:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
    12b4:	80 91 49 01 	lds	r24, 0x0149
    12b8:	82 30       	cpi	r24, 0x02	; 2
    12ba:	11 f4       	brne	.+4      	; 0x12c0 <USB_Host_WaitMS+0x4a>
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	18 c0       	rjmp	.+48     	; 0x12f0 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if an error has occurred on the selected pipe, false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
    12c0:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
    12c4:	84 ff       	sbrs	r24, 4
    12c6:	07 c0       	rjmp	.+14     	; 0x12d6 <USB_Host_WaitMS+0x60>

			/** Clears the master pipe error flag. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPINTX &= ~(1 << PERRI);
    12c8:	80 91 a6 00 	lds	r24, 0x00A6
    12cc:	8f 7e       	andi	r24, 0xEF	; 239
    12ce:	80 93 a6 00 	sts	0x00A6, r24
    12d2:	92 e0       	ldi	r25, 0x02	; 2
    12d4:	0d c0       	rjmp	.+26     	; 0x12f0 <USB_Host_WaitMS+0x7a>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    12d6:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
    12da:	81 ff       	sbrs	r24, 1
    12dc:	07 c0       	rjmp	.+14     	; 0x12ec <USB_Host_WaitMS+0x76>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
    12de:	80 91 a6 00 	lds	r24, 0x00A6
    12e2:	8d 7f       	andi	r24, 0xFD	; 253
    12e4:	80 93 a6 00 	sts	0x00A6, r24
    12e8:	93 e0       	ldi	r25, 0x03	; 3
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <USB_Host_WaitMS+0x7a>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    12ec:	99 23       	and	r25, r25
    12ee:	c1 f6       	brne	.-80     	; 0x12a0 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
    12f0:	20 fd       	sbrc	r18, 0
    12f2:	05 c0       	rjmp	.+10     	; 0x12fe <USB_Host_WaitMS+0x88>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    12f4:	80 91 9e 00 	lds	r24, 0x009E
    12f8:	8e 7f       	andi	r24, 0xFE	; 254
    12fa:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
    12fe:	35 ff       	sbrs	r19, 5
    1300:	05 c0       	rjmp	.+10     	; 0x130c <USB_Host_WaitMS+0x96>
	  USB_INT_Enable(USB_INT_HSOFI);
    1302:	80 91 a0 00 	lds	r24, 0x00A0
    1306:	80 62       	ori	r24, 0x20	; 32
    1308:	80 93 a0 00 	sts	0x00A0, r24

	return ErrorCode;
}
    130c:	89 2f       	mov	r24, r25
    130e:	08 95       	ret

00001310 <USB_Host_ResetDevice>:
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1310:	60 91 9e 00 	lds	r22, 0x009E

static void USB_Host_ResetDevice(void)
{
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);
    1314:	80 91 a0 00 	lds	r24, 0x00A0
    1318:	8d 7f       	andi	r24, 0xFD	; 253
    131a:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
    131e:	80 91 9e 00 	lds	r24, 0x009E
    1322:	82 60       	ori	r24, 0x02	; 2
    1324:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean true if no bus reset is currently being sent, false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
    1328:	80 91 9e 00 	lds	r24, 0x009E

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
    132c:	81 fd       	sbrc	r24, 1
    132e:	fc cf       	rjmp	.-8      	; 0x1328 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1330:	80 91 9e 00 	lds	r24, 0x009E
    1334:	81 60       	ori	r24, 0x01	; 1
    1336:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();

	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);
    133a:	30 91 a0 00 	lds	r19, 0x00A0

	USB_INT_Disable(USB_INT_HSOFI);
    133e:	80 91 a0 00 	lds	r24, 0x00A0
    1342:	8f 7d       	andi	r24, 0xDF	; 223
    1344:	80 93 a0 00 	sts	0x00A0, r24
	USB_INT_Clear(USB_INT_HSOFI);
    1348:	80 91 9f 00 	lds	r24, 0x009F
    134c:	8f 7d       	andi	r24, 0xDF	; 223
    134e:	80 93 9f 00 	sts	0x009F, r24
    1352:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1354:	40 ed       	ldi	r20, 0xD0	; 208
    1356:	57 e0       	ldi	r21, 0x07	; 7
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    1358:	80 91 9f 00 	lds	r24, 0x009F
    135c:	85 ff       	sbrs	r24, 5
    135e:	0b c0       	rjmp	.+22     	; 0x1376 <USB_Host_ResetDevice+0x66>
		{
			USB_INT_Clear(USB_INT_HSOFI);
    1360:	80 91 9f 00 	lds	r24, 0x009F
    1364:	8f 7d       	andi	r24, 0xDF	; 223
    1366:	80 93 9f 00 	sts	0x009F, r24
			USB_INT_Clear(USB_INT_DDISCI);
    136a:	80 91 9f 00 	lds	r24, 0x009F
    136e:	8d 7f       	andi	r24, 0xFD	; 253
    1370:	80 93 9f 00 	sts	0x009F, r24
    1374:	05 c0       	rjmp	.+10     	; 0x1380 <USB_Host_ResetDevice+0x70>
    1376:	ca 01       	movw	r24, r20
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	f1 f7       	brne	.-4      	; 0x1378 <USB_Host_ResetDevice+0x68>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
    137c:	21 50       	subi	r18, 0x01	; 1
    137e:	61 f7       	brne	.-40     	; 0x1358 <USB_Host_ResetDevice+0x48>
		}

		_delay_ms(1);
	}

	if (HSOFIEnabled)
    1380:	35 ff       	sbrs	r19, 5
    1382:	05 c0       	rjmp	.+10     	; 0x138e <USB_Host_ResetDevice+0x7e>
	  USB_INT_Enable(USB_INT_HSOFI);
    1384:	80 91 a0 00 	lds	r24, 0x00A0
    1388:	80 62       	ori	r24, 0x20	; 32
    138a:	80 93 a0 00 	sts	0x00A0, r24

	if (BusSuspended)
    138e:	60 fd       	sbrc	r22, 0
    1390:	05 c0       	rjmp	.+10     	; 0x139c <USB_Host_ResetDevice+0x8c>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1392:	80 91 9e 00 	lds	r24, 0x009E
    1396:	8e 7f       	andi	r24, 0xFE	; 254
    1398:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
    139c:	80 91 a0 00 	lds	r24, 0x00A0
    13a0:	82 60       	ori	r24, 0x02	; 2
    13a2:	80 93 a0 00 	sts	0x00A0, r24
}
    13a6:	08 95       	ret

000013a8 <USB_Host_ClearPipeStall>:
	return USB_Host_SendControlRequest(Buffer);
}

uint8_t USB_Host_ClearPipeStall(const uint8_t EndpointNum)
{
	USB_ControlRequest = (USB_Request_Header_t)
    13a8:	92 e0       	ldi	r25, 0x02	; 2
    13aa:	90 93 41 01 	sts	0x0141, r25
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	90 93 42 01 	sts	0x0142, r25
    13b4:	10 92 44 01 	sts	0x0144, r1
    13b8:	10 92 43 01 	sts	0x0143, r1
    13bc:	80 93 45 01 	sts	0x0145, r24
    13c0:	10 92 46 01 	sts	0x0146, r1
    13c4:	10 92 48 01 	sts	0x0148, r1
    13c8:	10 92 47 01 	sts	0x0147, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    13cc:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	90 e0       	ldi	r25, 0x00	; 0
}
    13d4:	9a c3       	rjmp	.+1844   	; 0x1b0a <USB_Host_SendControlRequest>

000013d6 <USB_Host_SetDeviceConfiguration>:
	USB_INT_Enable(USB_INT_DDISCI);
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	USB_ControlRequest = (USB_Request_Header_t)
    13d6:	10 92 41 01 	sts	0x0141, r1
    13da:	99 e0       	ldi	r25, 0x09	; 9
    13dc:	90 93 42 01 	sts	0x0142, r25
    13e0:	80 93 43 01 	sts	0x0143, r24
    13e4:	10 92 44 01 	sts	0x0144, r1
    13e8:	10 92 46 01 	sts	0x0146, r1
    13ec:	10 92 45 01 	sts	0x0145, r1
    13f0:	10 92 48 01 	sts	0x0148, r1
    13f4:	10 92 47 01 	sts	0x0147, r1
    13f8:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	90 e0       	ldi	r25, 0x00	; 0
}
    1400:	84 c3       	rjmp	.+1800   	; 0x1b0a <USB_Host_SendControlRequest>

00001402 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "Host.h"

void USB_Host_ProcessNextHostState(void)
{
    1402:	ef 92       	push	r14
    1404:	0f 93       	push	r16
    1406:	1f 93       	push	r17
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	28 97       	sbiw	r28, 0x08	; 8
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    141c:	80 91 49 01 	lds	r24, 0x0149
    1420:	86 30       	cpi	r24, 0x06	; 6
    1422:	09 f4       	brne	.+2      	; 0x1426 <USB_Host_ProcessNextHostState+0x24>
    1424:	94 c0       	rjmp	.+296    	; 0x154e <USB_Host_ProcessNextHostState+0x14c>
    1426:	87 30       	cpi	r24, 0x07	; 7
    1428:	70 f4       	brcc	.+28     	; 0x1446 <USB_Host_ProcessNextHostState+0x44>
    142a:	83 30       	cpi	r24, 0x03	; 3
    142c:	c1 f1       	breq	.+112    	; 0x149e <USB_Host_ProcessNextHostState+0x9c>
    142e:	84 30       	cpi	r24, 0x04	; 4
    1430:	20 f4       	brcc	.+8      	; 0x143a <USB_Host_ProcessNextHostState+0x38>
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	09 f0       	breq	.+2      	; 0x1438 <USB_Host_ProcessNextHostState+0x36>
    1436:	0a c1       	rjmp	.+532    	; 0x164c <USB_Host_ProcessNextHostState+0x24a>
    1438:	13 c0       	rjmp	.+38     	; 0x1460 <USB_Host_ProcessNextHostState+0x5e>
    143a:	84 30       	cpi	r24, 0x04	; 4
    143c:	c1 f1       	breq	.+112    	; 0x14ae <USB_Host_ProcessNextHostState+0xac>
    143e:	85 30       	cpi	r24, 0x05	; 5
    1440:	09 f0       	breq	.+2      	; 0x1444 <USB_Host_ProcessNextHostState+0x42>
    1442:	04 c1       	rjmp	.+520    	; 0x164c <USB_Host_ProcessNextHostState+0x24a>
    1444:	5b c0       	rjmp	.+182    	; 0x14fc <USB_Host_ProcessNextHostState+0xfa>
    1446:	88 30       	cpi	r24, 0x08	; 8
    1448:	09 f4       	brne	.+2      	; 0x144c <USB_Host_ProcessNextHostState+0x4a>
    144a:	9b c0       	rjmp	.+310    	; 0x1582 <USB_Host_ProcessNextHostState+0x180>
    144c:	88 30       	cpi	r24, 0x08	; 8
    144e:	08 f4       	brcc	.+2      	; 0x1452 <USB_Host_ProcessNextHostState+0x50>
    1450:	8a c0       	rjmp	.+276    	; 0x1566 <USB_Host_ProcessNextHostState+0x164>
    1452:	89 30       	cpi	r24, 0x09	; 9
    1454:	09 f4       	brne	.+2      	; 0x1458 <USB_Host_ProcessNextHostState+0x56>
    1456:	b4 c0       	rjmp	.+360    	; 0x15c0 <USB_Host_ProcessNextHostState+0x1be>
    1458:	8a 30       	cpi	r24, 0x0A	; 10
    145a:	09 f0       	breq	.+2      	; 0x145e <USB_Host_ProcessNextHostState+0x5c>
    145c:	f7 c0       	rjmp	.+494    	; 0x164c <USB_Host_ProcessNextHostState+0x24a>
    145e:	d9 c0       	rjmp	.+434    	; 0x1612 <USB_Host_ProcessNextHostState+0x210>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    1460:	00 91 3d 01 	lds	r16, 0x013D
    1464:	10 91 3e 01 	lds	r17, 0x013E
    1468:	01 15       	cp	r16, r1
    146a:	11 05       	cpc	r17, r1
    146c:	09 f4       	brne	.+2      	; 0x1470 <USB_Host_ProcessNextHostState+0x6e>
    146e:	ee c0       	rjmp	.+476    	; 0x164c <USB_Host_ProcessNextHostState+0x24a>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	01 df       	rcall	.-510    	; 0x1276 <USB_Host_WaitMS>
    1474:	68 2f       	mov	r22, r24
    1476:	88 23       	and	r24, r24
    1478:	31 f0       	breq	.+12     	; 0x1486 <USB_Host_ProcessNextHostState+0x84>
				{
					USB_HostState = PostWaitState;
    147a:	80 91 3c 01 	lds	r24, 0x013C
    147e:	80 93 49 01 	sts	0x0149, r24
    1482:	91 e0       	ldi	r25, 0x01	; 1
    1484:	df c0       	rjmp	.+446    	; 0x1644 <USB_Host_ProcessNextHostState+0x242>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
    1486:	c8 01       	movw	r24, r16
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	90 93 3e 01 	sts	0x013E, r25
    148e:	80 93 3d 01 	sts	0x013D, r24
    1492:	89 2b       	or	r24, r25
    1494:	09 f0       	breq	.+2      	; 0x1498 <USB_Host_ProcessNextHostState+0x96>
    1496:	da c0       	rjmp	.+436    	; 0x164c <USB_Host_ProcessNextHostState+0x24a>
				  USB_HostState = PostWaitState;
    1498:	80 91 3c 01 	lds	r24, 0x013C
    149c:	c0 c0       	rjmp	.+384    	; 0x161e <USB_Host_ProcessNextHostState+0x21c>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    149e:	88 ee       	ldi	r24, 0xE8	; 232
    14a0:	93 e0       	ldi	r25, 0x03	; 3
    14a2:	90 93 3e 01 	sts	0x013E, r25
    14a6:	80 93 3d 01 	sts	0x013D, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    14aa:	84 e0       	ldi	r24, 0x04	; 4
    14ac:	b8 c0       	rjmp	.+368    	; 0x161e <USB_Host_ProcessNextHostState+0x21c>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    14ae:	80 91 3d 01 	lds	r24, 0x013D
    14b2:	90 91 3e 01 	lds	r25, 0x013E
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	90 93 3e 01 	sts	0x013E, r25
    14bc:	80 93 3d 01 	sts	0x013D, r24
    14c0:	01 96       	adiw	r24, 0x01	; 1
    14c2:	29 f0       	breq	.+10     	; 0x14ce <USB_Host_ProcessNextHostState+0xcc>
    14c4:	80 ed       	ldi	r24, 0xD0	; 208
    14c6:	97 e0       	ldi	r25, 0x07	; 7
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <USB_Host_ProcessNextHostState+0xc6>
    14cc:	bf c0       	rjmp	.+382    	; 0x164c <USB_Host_ProcessNextHostState+0x24a>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    14ce:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    14d0:	80 91 d8 00 	lds	r24, 0x00D8
    14d4:	80 61       	ori	r24, 0x10	; 16
    14d6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    14da:	80 91 dd 00 	lds	r24, 0x00DD
    14de:	8b 7f       	andi	r24, 0xFB	; 251
    14e0:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
    14e4:	80 91 d7 00 	lds	r24, 0x00D7
    14e8:	80 61       	ori	r24, 0x10	; 16
    14ea:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    14ee:	80 91 dd 00 	lds	r24, 0x00DD
    14f2:	82 60       	ori	r24, 0x02	; 2
    14f4:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    14f8:	85 e0       	ldi	r24, 0x05	; 5
    14fa:	91 c0       	rjmp	.+290    	; 0x161e <USB_Host_ProcessNextHostState+0x21c>
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    14fc:	80 91 9f 00 	lds	r24, 0x009F
    1500:	80 ff       	sbrs	r24, 0
    1502:	a4 c0       	rjmp	.+328    	; 0x164c <USB_Host_ProcessNextHostState+0x24a>
			{
				USB_INT_Clear(USB_INT_DCONNI);
    1504:	80 91 9f 00 	lds	r24, 0x009F
    1508:	8e 7f       	andi	r24, 0xFE	; 254
    150a:	80 93 9f 00 	sts	0x009F, r24
				USB_INT_Clear(USB_INT_DDISCI);
    150e:	80 91 9f 00 	lds	r24, 0x009F
    1512:	8d 7f       	andi	r24, 0xFD	; 253
    1514:	80 93 9f 00 	sts	0x009F, r24

				USB_INT_Clear(USB_INT_VBERRI);
    1518:	80 91 df 00 	lds	r24, 0x00DF
    151c:	8d 7f       	andi	r24, 0xFD	; 253
    151e:	80 93 df 00 	sts	0x00DF, r24
				USB_INT_Enable(USB_INT_VBERRI);
    1522:	80 91 de 00 	lds	r24, 0x00DE
    1526:	82 60       	ori	r24, 0x02	; 2
    1528:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    152c:	80 91 9e 00 	lds	r24, 0x009E
    1530:	81 60       	ori	r24, 0x01	; 1
    1532:	80 93 9e 00 	sts	0x009E, r24

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    1536:	cc d0       	rcall	.+408    	; 0x16d0 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	80 93 49 01 	sts	0x0149, r24
    153e:	84 e6       	ldi	r24, 0x64	; 100
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	90 93 3e 01 	sts	0x013E, r25
    1546:	80 93 3d 01 	sts	0x013D, r24
    154a:	86 e0       	ldi	r24, 0x06	; 6
    154c:	5f c0       	rjmp	.+190    	; 0x160c <USB_Host_ProcessNextHostState+0x20a>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    154e:	e0 de       	rcall	.-576    	; 0x1310 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	80 93 49 01 	sts	0x0149, r24
    1556:	88 ec       	ldi	r24, 0xC8	; 200
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	90 93 3e 01 	sts	0x013E, r25
    155e:	80 93 3d 01 	sts	0x013D, r24
    1562:	87 e0       	ldi	r24, 0x07	; 7
    1564:	53 c0       	rjmp	.+166    	; 0x160c <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	00 e4       	ldi	r16, 0x40	; 64
    1570:	10 e0       	ldi	r17, 0x00	; 0
    1572:	ee 24       	eor	r14, r14
    1574:	77 d0       	rcall	.+238    	; 0x1664 <Pipe_ConfigurePipe>
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1576:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
    157a:	87 ff       	sbrs	r24, 7
    157c:	61 c0       	rjmp	.+194    	; 0x1640 <USB_Host_ProcessNextHostState+0x23e>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    157e:	88 e0       	ldi	r24, 0x08	; 8
    1580:	4e c0       	rjmp	.+156    	; 0x161e <USB_Host_ProcessNextHostState+0x21c>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    1582:	a1 e4       	ldi	r26, 0x41	; 65
    1584:	b1 e0       	ldi	r27, 0x01	; 1
    1586:	e4 e2       	ldi	r30, 0x24	; 36
    1588:	f1 e0       	ldi	r31, 0x01	; 1
    158a:	88 e0       	ldi	r24, 0x08	; 8
    158c:	01 90       	ld	r0, Z+
    158e:	0d 92       	st	X+, r0
    1590:	81 50       	subi	r24, 0x01	; 1
    1592:	e1 f7       	brne	.-8      	; 0x158c <USB_Host_ProcessNextHostState+0x18a>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    1594:	ce 01       	movw	r24, r28
    1596:	01 96       	adiw	r24, 0x01	; 1
    1598:	b8 d2       	rcall	.+1392   	; 0x1b0a <USB_Host_SendControlRequest>
    159a:	68 2f       	mov	r22, r24
    159c:	88 23       	and	r24, r24
    159e:	09 f0       	breq	.+2      	; 0x15a2 <USB_Host_ProcessNextHostState+0x1a0>
    15a0:	4d c0       	rjmp	.+154    	; 0x163c <USB_Host_ProcessNextHostState+0x23a>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    15a2:	88 85       	ldd	r24, Y+8	; 0x08
    15a4:	80 93 2c 01 	sts	0x012C, r24

			USB_Host_ResetDevice();
    15a8:	b3 de       	rcall	.-666    	; 0x1310 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	80 93 49 01 	sts	0x0149, r24
    15b0:	88 ec       	ldi	r24, 0xC8	; 200
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	90 93 3e 01 	sts	0x013E, r25
    15b8:	80 93 3d 01 	sts	0x013D, r24
    15bc:	89 e0       	ldi	r24, 0x09	; 9
    15be:	26 c0       	rjmp	.+76     	; 0x160c <USB_Host_ProcessNextHostState+0x20a>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
    15c0:	00 91 2c 01 	lds	r16, 0x012C
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	60 e0       	ldi	r22, 0x00	; 0
    15c8:	40 e0       	ldi	r20, 0x00	; 0
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	10 e0       	ldi	r17, 0x00	; 0
    15ce:	ee 24       	eor	r14, r14
    15d0:	49 d0       	rcall	.+146    	; 0x1664 <Pipe_ConfigurePipe>
    15d2:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
    15d6:	87 ff       	sbrs	r24, 7
    15d8:	33 c0       	rjmp	.+102    	; 0x1640 <USB_Host_ProcessNextHostState+0x23e>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    15da:	a1 e4       	ldi	r26, 0x41	; 65
    15dc:	b1 e0       	ldi	r27, 0x01	; 1
    15de:	ec e1       	ldi	r30, 0x1C	; 28
    15e0:	f1 e0       	ldi	r31, 0x01	; 1
    15e2:	88 e0       	ldi	r24, 0x08	; 8
    15e4:	01 90       	ld	r0, Z+
    15e6:	0d 92       	st	X+, r0
    15e8:	81 50       	subi	r24, 0x01	; 1
    15ea:	e1 f7       	brne	.-8      	; 0x15e4 <USB_Host_ProcessNextHostState+0x1e2>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	8c d2       	rcall	.+1304   	; 0x1b0a <USB_Host_SendControlRequest>
    15f2:	68 2f       	mov	r22, r24
    15f4:	88 23       	and	r24, r24
    15f6:	11 f5       	brne	.+68     	; 0x163c <USB_Host_ProcessNextHostState+0x23a>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	80 93 49 01 	sts	0x0149, r24
    15fe:	84 e6       	ldi	r24, 0x64	; 100
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	90 93 3e 01 	sts	0x013E, r25
    1606:	80 93 3d 01 	sts	0x013D, r24
    160a:	8a e0       	ldi	r24, 0x0A	; 10
    160c:	80 93 3c 01 	sts	0x013C, r24
    1610:	1d c0       	rjmp	.+58     	; 0x164c <USB_Host_ProcessNextHostState+0x24a>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			EVENT_USB_Host_DeviceEnumerationComplete();
    1618:	0e 94 46 02 	call	0x48c	; 0x48c <EVENT_USB_Host_DeviceEnumerationComplete>
			USB_HostState = HOST_STATE_Addressed;
    161c:	8b e0       	ldi	r24, 0x0B	; 11
    161e:	80 93 49 01 	sts	0x0149, r24
    1622:	14 c0       	rjmp	.+40     	; 0x164c <USB_Host_ProcessNextHostState+0x24a>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    1624:	89 2f       	mov	r24, r25
    1626:	0e 94 89 02 	call	0x512	; 0x512 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    162a:	80 91 dd 00 	lds	r24, 0x00DD
    162e:	81 60       	ori	r24, 0x01	; 1
    1630:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    1634:	0e 94 b5 02 	call	0x56a	; 0x56a <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1638:	8f d0       	rcall	.+286    	; 0x1758 <USB_ResetInterface>
    163a:	08 c0       	rjmp	.+16     	; 0x164c <USB_Host_ProcessNextHostState+0x24a>
	}
}
    163c:	93 e0       	ldi	r25, 0x03	; 3
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <USB_Host_ProcessNextHostState+0x242>
    1640:	94 e0       	ldi	r25, 0x04	; 4
    1642:	60 e0       	ldi	r22, 0x00	; 0
			EVENT_USB_Host_DeviceEnumerationComplete();
			USB_HostState = HOST_STATE_Addressed;
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    1644:	80 91 49 01 	lds	r24, 0x0149
    1648:	82 30       	cpi	r24, 0x02	; 2
    164a:	61 f7       	brne	.-40     	; 0x1624 <USB_Host_ProcessNextHostState+0x222>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
    164c:	28 96       	adiw	r28, 0x08	; 8
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	ef 90       	pop	r14
    1662:	08 95       	ret

00001664 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    1664:	ef 92       	push	r14
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	9e 2d       	mov	r25, r14
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    166c:	80 93 a7 00 	sts	0x00A7, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    1670:	80 91 a9 00 	lds	r24, 0x00A9
    1674:	81 60       	ori	r24, 0x01	; 1
    1676:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_SelectPipe(Number);
	Pipe_EnablePipe();

	UPCFG1X = 0;
    167a:	10 92 ab 00 	sts	0x00AB, r1

	UPCFG0X = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
    167e:	62 95       	swap	r22
    1680:	66 0f       	add	r22, r22
    1682:	66 0f       	add	r22, r22
    1684:	60 7c       	andi	r22, 0xC0	; 192
    1686:	64 2b       	or	r22, r20
    1688:	2f 70       	andi	r18, 0x0F	; 15
    168a:	62 2b       	or	r22, r18
    168c:	60 93 aa 00 	sts	0x00AA, r22
    1690:	28 e0       	ldi	r18, 0x08	; 8
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	03 c0       	rjmp	.+6      	; 0x169e <Pipe_ConfigurePipe+0x3a>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    1698:	8f 5f       	subi	r24, 0xFF	; 255
					CheckBytes <<= 1;
    169a:	22 0f       	add	r18, r18
    169c:	33 1f       	adc	r19, r19
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    169e:	20 17       	cp	r18, r16
    16a0:	31 07       	cpc	r19, r17
    16a2:	10 f4       	brcc	.+4      	; 0x16a8 <Pipe_ConfigurePipe+0x44>
    16a4:	85 30       	cpi	r24, 0x05	; 5
    16a6:	c1 f7       	brne	.-16     	; 0x1698 <Pipe_ConfigurePipe+0x34>
	UPCFG1X = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    16a8:	92 60       	ori	r25, 0x02	; 2
    16aa:	82 95       	swap	r24
    16ac:	80 7f       	andi	r24, 0xF0	; 240
    16ae:	89 2b       	or	r24, r25
    16b0:	80 93 ab 00 	sts	0x00AB, r24

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    16b4:	80 91 a9 00 	lds	r24, 0x00A9
    16b8:	80 62       	ori	r24, 0x20	; 32
    16ba:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean true if the selected pipe is configured, false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    16be:	80 91 ac 00 	lds	r24, 0x00AC

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
}
    16c2:	88 1f       	adc	r24, r24
    16c4:	88 27       	eor	r24, r24
    16c6:	88 1f       	adc	r24, r24
    16c8:	1f 91       	pop	r17
    16ca:	0f 91       	pop	r16
    16cc:	ef 90       	pop	r14
    16ce:	08 95       	ret

000016d0 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    16d0:	10 92 f8 00 	sts	0x00F8, r1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    16d6:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    16da:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    16de:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    16e2:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    16e6:	80 91 a9 00 	lds	r24, 0x00A9
    16ea:	8e 7f       	andi	r24, 0xFE	; 254
    16ec:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    16f0:	9f 5f       	subi	r25, 0xFF	; 255
    16f2:	97 30       	cpi	r25, 0x07	; 7
    16f4:	81 f7       	brne	.-32     	; 0x16d6 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    16f6:	08 95       	ret

000016f8 <Pipe_WaitUntilReady>:
			/** Returns the current USB frame number, when in host mode. Every millisecond the USB bus is active (i.e. not suspended)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    16f8:	40 91 a2 00 	lds	r20, 0x00A2
    16fc:	50 91 a3 00 	lds	r21, 0x00A3
    1700:	28 e8       	ldi	r18, 0x88	; 136
    1702:	33 e1       	ldi	r19, 0x13	; 19
			 *  \return The current pipe token, as a PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    1704:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1708:	80 73       	andi	r24, 0x30	; 48
    170a:	80 31       	cpi	r24, 0x10	; 16
    170c:	29 f4       	brne	.+10     	; 0x1718 <Pipe_WaitUntilReady+0x20>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    170e:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
    1712:	80 ff       	sbrs	r24, 0
    1714:	05 c0       	rjmp	.+10     	; 0x1720 <Pipe_WaitUntilReady+0x28>
    1716:	1e c0       	rjmp	.+60     	; 0x1754 <Pipe_WaitUntilReady+0x5c>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1718:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    171c:	82 fd       	sbrc	r24, 2
    171e:	1a c0       	rjmp	.+52     	; 0x1754 <Pipe_WaitUntilReady+0x5c>
			 *  \return Boolean true if the current pipe has been stalled by the attached device, false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1720:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    1724:	81 ff       	sbrs	r24, 1
    1726:	02 c0       	rjmp	.+4      	; 0x172c <Pipe_WaitUntilReady+0x34>
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    172c:	80 91 49 01 	lds	r24, 0x0149
    1730:	82 30       	cpi	r24, 0x02	; 2
    1732:	89 f0       	breq	.+34     	; 0x1756 <Pipe_WaitUntilReady+0x5e>
    1734:	80 91 a2 00 	lds	r24, 0x00A2
    1738:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    173c:	84 17       	cp	r24, r20
    173e:	95 07       	cpc	r25, r21
    1740:	09 f3       	breq	.-62     	; 0x1704 <Pipe_WaitUntilReady+0xc>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1742:	21 15       	cp	r18, r1
    1744:	31 05       	cpc	r19, r1
    1746:	11 f4       	brne	.+4      	; 0x174c <Pipe_WaitUntilReady+0x54>
    1748:	83 e0       	ldi	r24, 0x03	; 3
    174a:	08 95       	ret
    174c:	21 50       	subi	r18, 0x01	; 1
    174e:	30 40       	sbci	r19, 0x00	; 0
    1750:	ac 01       	movw	r20, r24
    1752:	d8 cf       	rjmp	.-80     	; 0x1704 <Pipe_WaitUntilReady+0xc>
    1754:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
    1756:	08 95       	ret

00001758 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1758:	6e d0       	rcall	.+220    	; 0x1836 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    175a:	75 d0       	rcall	.+234    	; 0x1846 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
    175c:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
    1760:	98 2f       	mov	r25, r24
    1762:	9f 77       	andi	r25, 0x7F	; 127
    1764:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
    1768:	80 68       	ori	r24, 0x80	; 128
    176a:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
    176e:	8c e0       	ldi	r24, 0x0C	; 12
    1770:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
    1772:	89 b5       	in	r24, 0x29	; 41
    1774:	82 60       	ori	r24, 0x02	; 2
    1776:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1778:	09 b4       	in	r0, 0x29	; 41
    177a:	00 fe       	sbrs	r0, 0
    177c:	fd cf       	rjmp	.-6      	; 0x1778 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    177e:	80 91 d8 00 	lds	r24, 0x00D8
    1782:	8f 7d       	andi	r24, 0xDF	; 223
    1784:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    1788:	80 91 d7 00 	lds	r24, 0x00D7
    178c:	8f 77       	andi	r24, 0x7F	; 127
    178e:	80 93 d7 00 	sts	0x00D7, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState       = HOST_STATE_Unattached;
    1792:	82 e0       	ldi	r24, 0x02	; 2
    1794:	80 93 49 01 	sts	0x0149, r24
	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    1798:	80 e4       	ldi	r24, 0x40	; 64
    179a:	80 93 2c 01 	sts	0x012C, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    179e:	80 91 d8 00 	lds	r24, 0x00D8
    17a2:	80 64       	ori	r24, 0x40	; 64
    17a4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    17a8:	80 91 dd 00 	lds	r24, 0x00DD
    17ac:	81 60       	ori	r24, 0x01	; 1
    17ae:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    17b2:	80 91 dd 00 	lds	r24, 0x00DD
    17b6:	84 60       	ori	r24, 0x04	; 4
    17b8:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
    17bc:	80 91 d7 00 	lds	r24, 0x00D7
    17c0:	8f 7e       	andi	r24, 0xEF	; 239
    17c2:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
    17c6:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
    17c8:	77 9a       	sbi	0x0e, 7	; 14

	USB_Host_VBUS_Auto_Off();
	USB_Host_VBUS_Manual_Enable();
	USB_Host_VBUS_Manual_On();

	USB_INT_Enable(USB_INT_SRPI);
    17ca:	80 91 de 00 	lds	r24, 0x00DE
    17ce:	81 60       	ori	r24, 0x01	; 1
    17d0:	80 93 de 00 	sts	0x00DE, r24
	USB_INT_Enable(USB_INT_BCERRI);
    17d4:	80 91 de 00 	lds	r24, 0x00DE
    17d8:	84 60       	ori	r24, 0x04	; 4
    17da:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    17de:	80 91 e0 00 	lds	r24, 0x00E0
    17e2:	8e 7f       	andi	r24, 0xFE	; 254
    17e4:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    17e8:	80 91 d8 00 	lds	r24, 0x00D8
    17ec:	80 61       	ori	r24, 0x10	; 16
    17ee:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    17f2:	08 95       	ret

000017f4 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    17f4:	e7 ed       	ldi	r30, 0xD7	; 215
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	81 60       	ori	r24, 0x01	; 1
    17fc:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	80 93 40 01 	sts	0x0140, r24

	USB_ResetInterface();
}
    1804:	a9 cf       	rjmp	.-174    	; 0x1758 <USB_ResetInterface>

00001806 <USB_ShutDown>:

void USB_ShutDown(void)
{
	USB_INT_DisableAllInterrupts();
    1806:	17 d0       	rcall	.+46     	; 0x1836 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1808:	1e d0       	rcall	.+60     	; 0x1846 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    180a:	e0 ee       	ldi	r30, 0xE0	; 224
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	81 60       	ori	r24, 0x01	; 1
    1812:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
    1814:	a8 ed       	ldi	r26, 0xD8	; 216
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	8c 91       	ld	r24, X
    181a:	8f 77       	andi	r24, 0x7F	; 127
    181c:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
    181e:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
    1820:	e7 ed       	ldi	r30, 0xD7	; 215
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	8e 7f       	andi	r24, 0xFE	; 254
    1828:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
    182a:	8c 91       	ld	r24, X
    182c:	8f 7e       	andi	r24, 0xEF	; 239
    182e:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1830:	10 92 40 01 	sts	0x0140, r1
}
    1834:	08 95       	ret

00001836 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1836:	e8 ed       	ldi	r30, 0xD8	; 216
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	8c 7f       	andi	r24, 0xFC	; 252
    183e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    1840:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    1844:	08 95       	ret

00001846 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
    1846:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
    184a:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
	#endif
}
    184e:	08 95       	ret

00001850 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1850:	1f 92       	push	r1
    1852:	0f 92       	push	r0
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	0f 92       	push	r0
    1858:	0b b6       	in	r0, 0x3b	; 59
    185a:	0f 92       	push	r0
    185c:	11 24       	eor	r1, r1
    185e:	2f 93       	push	r18
    1860:	3f 93       	push	r19
    1862:	4f 93       	push	r20
    1864:	5f 93       	push	r21
    1866:	6f 93       	push	r22
    1868:	7f 93       	push	r23
    186a:	8f 93       	push	r24
    186c:	9f 93       	push	r25
    186e:	af 93       	push	r26
    1870:	bf 93       	push	r27
    1872:	ef 93       	push	r30
    1874:	ff 93       	push	r31
	}
	#endif
	#endif

	#if defined(USB_CAN_BE_HOST)
	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    1876:	80 91 9f 00 	lds	r24, 0x009F
    187a:	81 ff       	sbrs	r24, 1
    187c:	16 c0       	rjmp	.+44     	; 0x18aa <__vector_10+0x5a>
    187e:	80 91 a0 00 	lds	r24, 0x00A0
    1882:	81 ff       	sbrs	r24, 1
    1884:	12 c0       	rjmp	.+36     	; 0x18aa <__vector_10+0x5a>
	{
		USB_INT_Clear(USB_INT_DDISCI);
    1886:	80 91 9f 00 	lds	r24, 0x009F
    188a:	8d 7f       	andi	r24, 0xFD	; 253
    188c:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Clear(USB_INT_DCONNI);
    1890:	80 91 9f 00 	lds	r24, 0x009F
    1894:	8e 7f       	andi	r24, 0xFE	; 254
    1896:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Disable(USB_INT_DDISCI);
    189a:	80 91 a0 00 	lds	r24, 0x00A0
    189e:	8d 7f       	andi	r24, 0xFD	; 253
    18a0:	80 93 a0 00 	sts	0x00A0, r24

		EVENT_USB_Host_DeviceUnattached();
    18a4:	0e 94 b5 02 	call	0x56a	; 0x56a <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    18a8:	57 df       	rcall	.-338    	; 0x1758 <USB_ResetInterface>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    18aa:	80 91 df 00 	lds	r24, 0x00DF
    18ae:	81 ff       	sbrs	r24, 1
    18b0:	16 c0       	rjmp	.+44     	; 0x18de <__vector_10+0x8e>
    18b2:	80 91 de 00 	lds	r24, 0x00DE
    18b6:	81 ff       	sbrs	r24, 1
    18b8:	12 c0       	rjmp	.+36     	; 0x18de <__vector_10+0x8e>
	{
		USB_INT_Clear(USB_INT_VBERRI);
    18ba:	80 91 df 00 	lds	r24, 0x00DF
    18be:	8d 7f       	andi	r24, 0xFD	; 253
    18c0:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    18c4:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    18c6:	80 91 dd 00 	lds	r24, 0x00DD
    18ca:	81 60       	ori	r24, 0x01	; 1
    18cc:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	ae d8       	rcall	.-3748   	; 0xa30 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    18d4:	0e 94 b5 02 	call	0x56a	; 0x56a <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    18d8:	82 e0       	ldi	r24, 0x02	; 2
    18da:	80 93 49 01 	sts	0x0149, r24
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    18de:	80 91 df 00 	lds	r24, 0x00DF
    18e2:	80 ff       	sbrs	r24, 0
    18e4:	18 c0       	rjmp	.+48     	; 0x1916 <__vector_10+0xc6>
    18e6:	80 91 de 00 	lds	r24, 0x00DE
    18ea:	80 ff       	sbrs	r24, 0
    18ec:	14 c0       	rjmp	.+40     	; 0x1916 <__vector_10+0xc6>
	{
		USB_INT_Clear(USB_INT_SRPI);
    18ee:	80 91 df 00 	lds	r24, 0x00DF
    18f2:	8e 7f       	andi	r24, 0xFE	; 254
    18f4:	80 93 df 00 	sts	0x00DF, r24
		USB_INT_Disable(USB_INT_SRPI);
    18f8:	80 91 de 00 	lds	r24, 0x00DE
    18fc:	8e 7f       	andi	r24, 0xFE	; 254
    18fe:	80 93 de 00 	sts	0x00DE, r24

		EVENT_USB_Host_DeviceAttached();
    1902:	0e 94 be 02 	call	0x57c	; 0x57c <EVENT_USB_Host_DeviceAttached>

		USB_INT_Enable(USB_INT_DDISCI);
    1906:	80 91 a0 00 	lds	r24, 0x00A0
    190a:	82 60       	ori	r24, 0x02	; 2
    190c:	80 93 a0 00 	sts	0x00A0, r24

		USB_HostState = HOST_STATE_Powered;
    1910:	83 e0       	ldi	r24, 0x03	; 3
    1912:	80 93 49 01 	sts	0x0149, r24
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1916:	80 91 df 00 	lds	r24, 0x00DF
    191a:	82 ff       	sbrs	r24, 2
    191c:	10 c0       	rjmp	.+32     	; 0x193e <__vector_10+0xee>
    191e:	80 91 de 00 	lds	r24, 0x00DE
    1922:	82 ff       	sbrs	r24, 2
    1924:	0c c0       	rjmp	.+24     	; 0x193e <__vector_10+0xee>
	{
		USB_INT_Clear(USB_INT_BCERRI);
    1926:	80 91 df 00 	lds	r24, 0x00DF
    192a:	8b 7f       	andi	r24, 0xFB	; 251
    192c:	80 93 df 00 	sts	0x00DF, r24

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1930:	82 e0       	ldi	r24, 0x02	; 2
    1932:	60 e0       	ldi	r22, 0x00	; 0
    1934:	0e 94 89 02 	call	0x512	; 0x512 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    1938:	0e 94 b5 02 	call	0x56a	; 0x56a <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    193c:	0d df       	rcall	.-486    	; 0x1758 <USB_ResetInterface>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    193e:	80 91 9f 00 	lds	r24, 0x009F
    1942:	85 ff       	sbrs	r24, 5
    1944:	0a c0       	rjmp	.+20     	; 0x195a <__vector_10+0x10a>
    1946:	80 91 a0 00 	lds	r24, 0x00A0
    194a:	85 ff       	sbrs	r24, 5
    194c:	06 c0       	rjmp	.+12     	; 0x195a <__vector_10+0x10a>
	{
		USB_INT_Clear(USB_INT_HSOFI);
    194e:	80 91 9f 00 	lds	r24, 0x009F
    1952:	8f 7d       	andi	r24, 0xDF	; 223
    1954:	80 93 9f 00 	sts	0x009F, r24

		EVENT_USB_Host_StartOfFrame();
    1958:	ae d0       	rcall	.+348    	; 0x1ab6 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    195a:	ff 91       	pop	r31
    195c:	ef 91       	pop	r30
    195e:	bf 91       	pop	r27
    1960:	af 91       	pop	r26
    1962:	9f 91       	pop	r25
    1964:	8f 91       	pop	r24
    1966:	7f 91       	pop	r23
    1968:	6f 91       	pop	r22
    196a:	5f 91       	pop	r21
    196c:	4f 91       	pop	r20
    196e:	3f 91       	pop	r19
    1970:	2f 91       	pop	r18
    1972:	0f 90       	pop	r0
    1974:	0b be       	out	0x3b, r0	; 59
    1976:	0f 90       	pop	r0
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	0f 90       	pop	r0
    197c:	1f 90       	pop	r1
    197e:	18 95       	reti

00001980 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
    1980:	af 92       	push	r10
    1982:	bf 92       	push	r11
    1984:	cf 92       	push	r12
    1986:	df 92       	push	r13
    1988:	ef 92       	push	r14
    198a:	ff 92       	push	r15
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	7c 01       	movw	r14, r24
    1996:	8b 01       	movw	r16, r22
    1998:	5a 01       	movw	r10, r20
    199a:	21 c0       	rjmp	.+66     	; 0x19de <USB_GetNextDescriptorComp+0x5e>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    199c:	f8 01       	movw	r30, r16
    199e:	c0 81       	ld	r28, Z
    19a0:	d1 81       	ldd	r29, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    19a2:	88 81       	ld	r24, Y
    19a4:	90 e0       	ldi	r25, 0x00	; 0

				*CurrConfigLoc  = ((uint8_t*)*CurrConfigLoc) + CurrDescriptorSize;
    19a6:	9e 01       	movw	r18, r28
    19a8:	28 0f       	add	r18, r24
    19aa:	39 1f       	adc	r19, r25
    19ac:	31 83       	std	Z+1, r19	; 0x01
    19ae:	20 83       	st	Z, r18
				*BytesRem      -= CurrDescriptorSize;
    19b0:	f7 01       	movw	r30, r14
    19b2:	20 81       	ld	r18, Z
    19b4:	31 81       	ldd	r19, Z+1	; 0x01
    19b6:	28 1b       	sub	r18, r24
    19b8:	39 0b       	sbc	r19, r25
    19ba:	31 83       	std	Z+1, r19	; 0x01
    19bc:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    19be:	f8 01       	movw	r30, r16
    19c0:	80 81       	ld	r24, Z
    19c2:	91 81       	ldd	r25, Z+1	; 0x01
    19c4:	f5 01       	movw	r30, r10
    19c6:	09 95       	icall
    19c8:	82 30       	cpi	r24, 0x02	; 2
    19ca:	49 f0       	breq	.+18     	; 0x19de <USB_GetNextDescriptorComp+0x5e>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    19cc:	81 30       	cpi	r24, 0x01	; 1
    19ce:	71 f4       	brne	.+28     	; 0x19ec <USB_GetNextDescriptorComp+0x6c>
			{
				*CurrConfigLoc = PrevDescLoc;
    19d0:	f8 01       	movw	r30, r16
    19d2:	c0 83       	st	Z, r28
    19d4:	d1 83       	std	Z+1, r29	; 0x01
				*BytesRem      = PrevBytesRem;
    19d6:	f7 01       	movw	r30, r14
    19d8:	d1 82       	std	Z+1, r13	; 0x01
    19da:	c0 82       	st	Z, r12
    19dc:	07 c0       	rjmp	.+14     	; 0x19ec <USB_GetNextDescriptorComp+0x6c>

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem, void** const CurrConfigLoc, ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    19de:	f7 01       	movw	r30, r14
    19e0:	c0 80       	ld	r12, Z
    19e2:	d1 80       	ldd	r13, Z+1	; 0x01
    19e4:	c1 14       	cp	r12, r1
    19e6:	d1 04       	cpc	r13, r1
    19e8:	c9 f6       	brne	.-78     	; 0x199c <USB_GetNextDescriptorComp+0x1c>
    19ea:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	1f 91       	pop	r17
    19f2:	0f 91       	pop	r16
    19f4:	ff 90       	pop	r15
    19f6:	ef 90       	pop	r14
    19f8:	df 90       	pop	r13
    19fa:	cf 90       	pop	r12
    19fc:	bf 90       	pop	r11
    19fe:	af 90       	pop	r10
    1a00:	08 95       	ret

00001a02 <USB_Host_GetDeviceConfigDescriptor>:
#include "ConfigDescriptor.h"

#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(uint8_t ConfigNumber, uint16_t* const ConfigSizePtr,
                                           void* BufferPtr, uint16_t BufferSize)
{
    1a02:	cf 92       	push	r12
    1a04:	df 92       	push	r13
    1a06:	ef 92       	push	r14
    1a08:	ff 92       	push	r15
    1a0a:	0f 93       	push	r16
    1a0c:	1f 93       	push	r17
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	29 97       	sbiw	r28, 0x09	; 9
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	cd bf       	out	0x3d, r28	; 61
    1a22:	6b 01       	movw	r12, r22
    1a24:	8a 01       	movw	r16, r20
    1a26:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1a28:	90 e8       	ldi	r25, 0x80	; 128
    1a2a:	90 93 41 01 	sts	0x0141, r25
    1a2e:	96 e0       	ldi	r25, 0x06	; 6
    1a30:	90 93 42 01 	sts	0x0142, r25
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	92 60       	ori	r25, 0x02	; 2
    1a3a:	90 93 44 01 	sts	0x0144, r25
    1a3e:	80 93 43 01 	sts	0x0143, r24
    1a42:	10 92 46 01 	sts	0x0146, r1
    1a46:	10 92 45 01 	sts	0x0145, r1
    1a4a:	89 e0       	ldi	r24, 0x09	; 9
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	90 93 48 01 	sts	0x0148, r25
    1a52:	80 93 47 01 	sts	0x0147, r24
    1a56:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	01 96       	adiw	r24, 0x01	; 1
    1a5e:	55 d0       	rcall	.+170    	; 0x1b0a <USB_Host_SendControlRequest>
    1a60:	28 2f       	mov	r18, r24
    1a62:	88 23       	and	r24, r24
    1a64:	c1 f4       	brne	.+48     	; 0x1a96 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize;
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6a:	f6 01       	movw	r30, r12
    1a6c:	91 83       	std	Z+1, r25	; 0x01
    1a6e:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1a70:	e8 16       	cp	r14, r24
    1a72:	f9 06       	cpc	r15, r25
    1a74:	10 f4       	brcc	.+4      	; 0x1a7a <USB_Host_GetDeviceConfigDescriptor+0x78>
    1a76:	25 e0       	ldi	r18, 0x05	; 5
    1a78:	0e c0       	rjmp	.+28     	; 0x1a96 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1a7a:	90 93 48 01 	sts	0x0148, r25
    1a7e:	80 93 47 01 	sts	0x0147, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1a82:	c8 01       	movw	r24, r16
    1a84:	42 d0       	rcall	.+132    	; 0x1b0a <USB_Host_SendControlRequest>
    1a86:	28 2f       	mov	r18, r24
    1a88:	88 23       	and	r24, r24
    1a8a:	29 f4       	brne	.+10     	; 0x1a96 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	81 81       	ldd	r24, Z+1	; 0x01
    1a90:	82 30       	cpi	r24, 0x02	; 2
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1a94:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1a96:	82 2f       	mov	r24, r18
    1a98:	29 96       	adiw	r28, 0x09	; 9
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	ff 90       	pop	r15
    1aae:	ef 90       	pop	r14
    1ab0:	df 90       	pop	r13
    1ab2:	cf 90       	pop	r12
    1ab4:	08 95       	ret

00001ab6 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1ab6:	08 95       	ret

00001ab8 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1ab8:	1f 93       	push	r17
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	18 2f       	mov	r17, r24
    1ac0:	c8 ee       	ldi	r28, 0xE8	; 232
    1ac2:	d3 e0       	ldi	r29, 0x03	; 3
    1ac4:	09 c0       	rjmp	.+18     	; 0x1ad8 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	d6 db       	rcall	.-2132   	; 0x1276 <USB_Host_WaitMS>
    1aca:	88 23       	and	r24, r24
    1acc:	d1 f4       	brne	.+52     	; 0x1b02 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1ace:	20 97       	sbiw	r28, 0x00	; 0
    1ad0:	11 f4       	brne	.+4      	; 0x1ad6 <USB_Host_WaitForIOS+0x1e>
    1ad2:	84 e0       	ldi	r24, 0x04	; 4
    1ad4:	16 c0       	rjmp	.+44     	; 0x1b02 <USB_Host_WaitForIOS+0x4a>
    1ad6:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1ad8:	11 23       	and	r17, r17
    1ada:	29 f4       	brne	.+10     	; 0x1ae6 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean true if the current pipe is ready for a SETUP packet, false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1adc:	80 91 a6 00 	lds	r24, 0x00A6
    1ae0:	83 ff       	sbrs	r24, 3
    1ae2:	f1 cf       	rjmp	.-30     	; 0x1ac6 <USB_Host_WaitForIOS+0xe>
    1ae4:	0d c0       	rjmp	.+26     	; 0x1b00 <USB_Host_WaitForIOS+0x48>
    1ae6:	11 30       	cpi	r17, 0x01	; 1
    1ae8:	29 f4       	brne	.+10     	; 0x1af4 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean true if the current pipe has received an IN packet, false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1aea:	80 91 a6 00 	lds	r24, 0x00A6
    1aee:	80 ff       	sbrs	r24, 0
    1af0:	ea cf       	rjmp	.-44     	; 0x1ac6 <USB_Host_WaitForIOS+0xe>
    1af2:	06 c0       	rjmp	.+12     	; 0x1b00 <USB_Host_WaitForIOS+0x48>
    1af4:	12 30       	cpi	r17, 0x02	; 2
    1af6:	39 f7       	brne	.-50     	; 0x1ac6 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean true if the current pipe is ready for an OUT packet, false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1af8:	80 91 a6 00 	lds	r24, 0x00A6
    1afc:	82 ff       	sbrs	r24, 2
    1afe:	e3 cf       	rjmp	.-58     	; 0x1ac6 <USB_Host_WaitForIOS+0xe>
    1b00:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    1b02:	df 91       	pop	r29
    1b04:	cf 91       	pop	r28
    1b06:	1f 91       	pop	r17
    1b08:	08 95       	ret

00001b0a <USB_Host_SendControlRequest>:

#define  __INCLUDE_FROM_HOSTSTDREQ_C
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1b0a:	ff 92       	push	r15
    1b0c:	0f 93       	push	r16
    1b0e:	1f 93       	push	r17
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	18 2f       	mov	r17, r24
    1b16:	09 2f       	mov	r16, r25
			 *  \return Boolean true if the bus is currently suspended, false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1b18:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
	bool     BusSuspended   = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus   = HOST_SENDCONTROL_Successful;
	uint16_t DataLen        = USB_ControlRequest.wLength;
    1b1c:	c0 91 47 01 	lds	r28, 0x0147
    1b20:	d0 91 48 01 	lds	r29, 0x0148
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1b24:	80 91 9e 00 	lds	r24, 0x009E
    1b28:	81 60       	ori	r24, 0x01	; 1
    1b2a:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	a2 db       	rcall	.-2236   	; 0x1276 <USB_Host_WaitMS>
    1b32:	98 2f       	mov	r25, r24
    1b34:	88 23       	and	r24, r24
    1b36:	09 f0       	breq	.+2      	; 0x1b3a <USB_Host_SendControlRequest+0x30>
    1b38:	d2 c0       	rjmp	.+420    	; 0x1cde <USB_Host_SendControlRequest+0x1d4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1b3a:	80 91 aa 00 	lds	r24, 0x00AA
    1b3e:	8f 7c       	andi	r24, 0xCF	; 207
    1b40:	80 93 aa 00 	sts	0x00AA, r24
			 *  flag for the pipe.
			 */
			static inline void Pipe_ClearErrorFlags(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearErrorFlags(void)
			{
				UPERRX = 0;
    1b44:	10 92 f5 00 	sts	0x00F5, r1

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1b48:	80 91 a9 00 	lds	r24, 0x00A9
    1b4c:	8f 7b       	andi	r24, 0xBF	; 191
    1b4e:	80 93 a9 00 	sts	0x00A9, r24
    1b52:	e1 e4       	ldi	r30, 0x41	; 65
    1b54:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_Byte(*(HeaderStream++));
    1b56:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    1b58:	80 93 af 00 	sts	0x00AF, r24
	Pipe_SetPipeToken(PIPE_TOKEN_SETUP);
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	e9 34       	cpi	r30, 0x49	; 73
    1b60:	f8 07       	cpc	r31, r24
    1b62:	c9 f7       	brne	.-14     	; 0x1b56 <USB_Host_SendControlRequest+0x4c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1b64:	80 91 a6 00 	lds	r24, 0x00A6
    1b68:	87 77       	andi	r24, 0x77	; 119
    1b6a:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_Byte(*(HeaderStream++));

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	a3 df       	rcall	.-186    	; 0x1ab8 <USB_Host_WaitForIOS>
    1b72:	98 2f       	mov	r25, r24
    1b74:	88 23       	and	r24, r24
    1b76:	09 f0       	breq	.+2      	; 0x1b7a <USB_Host_SendControlRequest+0x70>
    1b78:	b2 c0       	rjmp	.+356    	; 0x1cde <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1b7a:	80 91 a9 00 	lds	r24, 0x00A9
    1b7e:	80 64       	ori	r24, 0x40	; 64
    1b80:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	77 db       	rcall	.-2322   	; 0x1276 <USB_Host_WaitMS>
    1b88:	98 2f       	mov	r25, r24
    1b8a:	88 23       	and	r24, r24
    1b8c:	09 f0       	breq	.+2      	; 0x1b90 <USB_Host_SendControlRequest+0x86>
    1b8e:	a7 c0       	rjmp	.+334    	; 0x1cde <USB_Host_SendControlRequest+0x1d4>
#include "HostStandardReq.h"

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
    1b90:	21 2f       	mov	r18, r17
    1b92:	30 2f       	mov	r19, r16
    1b94:	c9 01       	movw	r24, r18
    1b96:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1b98:	80 91 41 01 	lds	r24, 0x0141
    1b9c:	87 ff       	sbrs	r24, 7
    1b9e:	52 c0       	rjmp	.+164    	; 0x1c44 <USB_Host_SendControlRequest+0x13a>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1ba0:	80 91 aa 00 	lds	r24, 0x00AA
    1ba4:	8f 7c       	andi	r24, 0xCF	; 207
    1ba6:	80 61       	ori	r24, 0x10	; 16
    1ba8:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1bac:	01 15       	cp	r16, r1
    1bae:	11 05       	cpc	r17, r1
    1bb0:	69 f5       	brne	.+90     	; 0x1c0c <USB_Host_SendControlRequest+0x102>
    1bb2:	2e c0       	rjmp	.+92     	; 0x1c10 <USB_Host_SendControlRequest+0x106>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1bb4:	80 91 a9 00 	lds	r24, 0x00A9
    1bb8:	8f 7b       	andi	r24, 0xBF	; 191
    1bba:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	7b df       	rcall	.-266    	; 0x1ab8 <USB_Host_WaitForIOS>
    1bc2:	98 2f       	mov	r25, r24
    1bc4:	88 23       	and	r24, r24
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <USB_Host_SendControlRequest+0xc0>
    1bc8:	8a c0       	rjmp	.+276    	; 0x1cde <USB_Host_SendControlRequest+0x1d4>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1bca:	80 91 f6 00 	lds	r24, 0x00F6
    1bce:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1bd2:	89 2b       	or	r24, r25
    1bd4:	49 f4       	brne	.+18     	; 0x1be8 <USB_Host_SendControlRequest+0xde>
    1bd6:	c0 e0       	ldi	r28, 0x00	; 0
    1bd8:	d0 e0       	ldi	r29, 0x00	; 0
    1bda:	06 c0       	rjmp	.+12     	; 0x1be8 <USB_Host_SendControlRequest+0xde>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    1bdc:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_Byte();
    1be0:	f8 01       	movw	r30, r16
    1be2:	81 93       	st	Z+, r24
    1be4:	8f 01       	movw	r16, r30
					DataLen--;
    1be6:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1be8:	80 91 f6 00 	lds	r24, 0x00F6
    1bec:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1bf0:	89 2b       	or	r24, r25
    1bf2:	11 f0       	breq	.+4      	; 0x1bf8 <USB_Host_SendControlRequest+0xee>
    1bf4:	20 97       	sbiw	r28, 0x00	; 0
    1bf6:	91 f7       	brne	.-28     	; 0x1bdc <USB_Host_SendControlRequest+0xd2>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1bf8:	80 91 a9 00 	lds	r24, 0x00A9
    1bfc:	80 64       	ori	r24, 0x40	; 64
    1bfe:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1c02:	80 91 a6 00 	lds	r24, 0x00A6
    1c06:	8e 77       	andi	r24, 0x7E	; 126
    1c08:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1c0c:	20 97       	sbiw	r28, 0x00	; 0
    1c0e:	91 f6       	brne	.-92     	; 0x1bb4 <USB_Host_SendControlRequest+0xaa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1c10:	80 91 aa 00 	lds	r24, 0x00AA
    1c14:	8f 7c       	andi	r24, 0xCF	; 207
    1c16:	80 62       	ori	r24, 0x20	; 32
    1c18:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c1c:	80 91 a9 00 	lds	r24, 0x00A9
    1c20:	8f 7b       	andi	r24, 0xBF	; 191
    1c22:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1c26:	82 e0       	ldi	r24, 0x02	; 2
    1c28:	47 df       	rcall	.-370    	; 0x1ab8 <USB_Host_WaitForIOS>
    1c2a:	98 2f       	mov	r25, r24
    1c2c:	88 23       	and	r24, r24
    1c2e:	09 f0       	breq	.+2      	; 0x1c32 <USB_Host_SendControlRequest+0x128>
    1c30:	56 c0       	rjmp	.+172    	; 0x1cde <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1c32:	80 91 a6 00 	lds	r24, 0x00A6
    1c36:	8b 77       	andi	r24, 0x7B	; 123
    1c38:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	3c df       	rcall	.-392    	; 0x1ab8 <USB_Host_WaitForIOS>
    1c40:	98 2f       	mov	r25, r24
    1c42:	4d c0       	rjmp	.+154    	; 0x1cde <USB_Host_SendControlRequest+0x1d4>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1c44:	01 15       	cp	r16, r1
    1c46:	11 05       	cpc	r17, r1
    1c48:	a9 f1       	breq	.+106    	; 0x1cb4 <USB_Host_SendControlRequest+0x1aa>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1c4a:	80 91 aa 00 	lds	r24, 0x00AA
    1c4e:	8f 7c       	andi	r24, 0xCF	; 207
    1c50:	80 62       	ori	r24, 0x20	; 32
    1c52:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c56:	80 91 a9 00 	lds	r24, 0x00A9
    1c5a:	8f 7b       	andi	r24, 0xBF	; 191
    1c5c:	80 93 a9 00 	sts	0x00A9, r24
    1c60:	1d c0       	rjmp	.+58     	; 0x1c9c <USB_Host_SendControlRequest+0x192>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1c62:	82 e0       	ldi	r24, 0x02	; 2
    1c64:	29 df       	rcall	.-430    	; 0x1ab8 <USB_Host_WaitForIOS>
    1c66:	98 2f       	mov	r25, r24
    1c68:	88 23       	and	r24, r24
    1c6a:	c9 f5       	brne	.+114    	; 0x1cde <USB_Host_SendControlRequest+0x1d4>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    1c6c:	80 91 2c 01 	lds	r24, 0x012C
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	07 c0       	rjmp	.+14     	; 0x1c84 <USB_Host_SendControlRequest+0x17a>
				{
					Pipe_Write_Byte(*(DataStream++));
    1c76:	f8 01       	movw	r30, r16
    1c78:	81 91       	ld	r24, Z+
    1c7a:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    1c7c:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1c80:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
    1c82:	39 f0       	breq	.+14     	; 0x1c92 <USB_Host_SendControlRequest+0x188>
			 *  \return Total number of bytes in the currently selected Pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1c84:	80 91 f6 00 	lds	r24, 0x00F6
    1c88:	90 91 f7 00 	lds	r25, 0x00F7
    1c8c:	82 17       	cp	r24, r18
    1c8e:	93 07       	cpc	r25, r19
    1c90:	90 f3       	brcs	.-28     	; 0x1c76 <USB_Host_SendControlRequest+0x16c>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1c92:	80 91 a6 00 	lds	r24, 0x00A6
    1c96:	8b 77       	andi	r24, 0x7B	; 123
    1c98:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1c9c:	20 97       	sbiw	r28, 0x00	; 0
    1c9e:	09 f7       	brne	.-62     	; 0x1c62 <USB_Host_SendControlRequest+0x158>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1ca0:	82 e0       	ldi	r24, 0x02	; 2
    1ca2:	0a df       	rcall	.-492    	; 0x1ab8 <USB_Host_WaitForIOS>
    1ca4:	98 2f       	mov	r25, r24
    1ca6:	88 23       	and	r24, r24
    1ca8:	d1 f4       	brne	.+52     	; 0x1cde <USB_Host_SendControlRequest+0x1d4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1caa:	80 91 a9 00 	lds	r24, 0x00A9
    1cae:	80 64       	ori	r24, 0x40	; 64
    1cb0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1cb4:	80 91 aa 00 	lds	r24, 0x00AA
    1cb8:	8f 7c       	andi	r24, 0xCF	; 207
    1cba:	80 61       	ori	r24, 0x10	; 16
    1cbc:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1cc0:	80 91 a9 00 	lds	r24, 0x00A9
    1cc4:	8f 7b       	andi	r24, 0xBF	; 191
    1cc6:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	f5 de       	rcall	.-534    	; 0x1ab8 <USB_Host_WaitForIOS>
    1cce:	98 2f       	mov	r25, r24
    1cd0:	88 23       	and	r24, r24
    1cd2:	29 f4       	brne	.+10     	; 0x1cde <USB_Host_SendControlRequest+0x1d4>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1cd4:	80 91 a6 00 	lds	r24, 0x00A6
    1cd8:	8e 77       	andi	r24, 0x7E	; 126
    1cda:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1cde:	80 91 a9 00 	lds	r24, 0x00A9
    1ce2:	80 64       	ori	r24, 0x40	; 64
    1ce4:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1ce8:	f0 fc       	sbrc	r15, 0
    1cea:	05 c0       	rjmp	.+10     	; 0x1cf6 <USB_Host_SendControlRequest+0x1ec>
			 *  messages to the device.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1cec:	80 91 9e 00 	lds	r24, 0x009E
    1cf0:	8e 7f       	andi	r24, 0xFE	; 254
    1cf2:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    1cfc:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1d00:	89 2f       	mov	r24, r25
    1d02:	df 91       	pop	r29
    1d04:	cf 91       	pop	r28
    1d06:	1f 91       	pop	r17
    1d08:	0f 91       	pop	r16
    1d0a:	ff 90       	pop	r15
    1d0c:	08 95       	ret

00001d0e <Pipe_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    1d0e:	ff 92       	push	r15
    1d10:	0f 93       	push	r16
    1d12:	1f 93       	push	r17
    1d14:	cf 93       	push	r28
    1d16:	df 93       	push	r29
    1d18:	18 2f       	mov	r17, r24
    1d1a:	09 2f       	mov	r16, r25
    1d1c:	eb 01       	movw	r28, r22
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1d1e:	80 91 aa 00 	lds	r24, 0x00AA
    1d22:	8f 7c       	andi	r24, 0xCF	; 207
    1d24:	80 61       	ori	r24, 0x10	; 16
    1d26:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1d2a:	e6 dc       	rcall	.-1588   	; 0x16f8 <Pipe_WaitUntilReady>
    1d2c:	f8 2e       	mov	r15, r24
    1d2e:	88 23       	and	r24, r24
    1d30:	d1 f4       	brne	.+52     	; 0x1d66 <Pipe_Read_Stream_LE+0x58>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1d32:	81 2f       	mov	r24, r17
    1d34:	90 2f       	mov	r25, r16
    1d36:	9c 01       	movw	r18, r24
    1d38:	89 01       	movw	r16, r18
    1d3a:	13 c0       	rjmp	.+38     	; 0x1d62 <Pipe_Read_Stream_LE+0x54>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1d3c:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1d40:	85 fd       	sbrc	r24, 5
    1d42:	09 c0       	rjmp	.+18     	; 0x1d56 <Pipe_Read_Stream_LE+0x48>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1d44:	80 91 a6 00 	lds	r24, 0x00A6
    1d48:	8e 77       	andi	r24, 0x7E	; 126
    1d4a:	80 93 a6 00 	sts	0x00A6, r24
			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1d4e:	d4 dc       	rcall	.-1624   	; 0x16f8 <Pipe_WaitUntilReady>
    1d50:	88 23       	and	r24, r24
    1d52:	39 f0       	breq	.+14     	; 0x1d62 <Pipe_Read_Stream_LE+0x54>
    1d54:	09 c0       	rjmp	.+18     	; 0x1d68 <Pipe_Read_Stream_LE+0x5a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
    1d56:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1d5a:	f8 01       	movw	r30, r16
    1d5c:	81 93       	st	Z+, r24
    1d5e:	8f 01       	movw	r16, r30
			Length--;
    1d60:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    1d62:	20 97       	sbiw	r28, 0x00	; 0
    1d64:	59 f7       	brne	.-42     	; 0x1d3c <Pipe_Read_Stream_LE+0x2e>
    1d66:	8f 2d       	mov	r24, r15
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	1f 91       	pop	r17
    1d6e:	0f 91       	pop	r16
    1d70:	ff 90       	pop	r15
    1d72:	08 95       	ret

00001d74 <Pipe_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    1d74:	ff 92       	push	r15
    1d76:	0f 93       	push	r16
    1d78:	1f 93       	push	r17
    1d7a:	cf 93       	push	r28
    1d7c:	df 93       	push	r29
    1d7e:	18 2f       	mov	r17, r24
    1d80:	09 2f       	mov	r16, r25
    1d82:	eb 01       	movw	r28, r22
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1d84:	80 91 aa 00 	lds	r24, 0x00AA
    1d88:	8f 7c       	andi	r24, 0xCF	; 207
    1d8a:	80 62       	ori	r24, 0x20	; 32
    1d8c:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1d90:	b3 dc       	rcall	.-1690   	; 0x16f8 <Pipe_WaitUntilReady>
    1d92:	f8 2e       	mov	r15, r24
    1d94:	88 23       	and	r24, r24
    1d96:	d1 f4       	brne	.+52     	; 0x1dcc <Pipe_Write_Stream_LE+0x58>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1d98:	81 2f       	mov	r24, r17
    1d9a:	90 2f       	mov	r25, r16
    1d9c:	9c 01       	movw	r18, r24
    1d9e:	89 01       	movw	r16, r18
    1da0:	13 c0       	rjmp	.+38     	; 0x1dc8 <Pipe_Write_Stream_LE+0x54>
			 *  \return Boolean true if the currently selected pipe may be read from or written to, depending on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1da2:	80 91 a6 00 	lds	r24, 0x00A6
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1da6:	85 fd       	sbrc	r24, 5
    1da8:	09 c0       	rjmp	.+18     	; 0x1dbc <Pipe_Write_Stream_LE+0x48>
			 *  \ingroup Group_PipePacketManagement
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1daa:	80 91 a6 00 	lds	r24, 0x00A6
    1dae:	8b 77       	andi	r24, 0x7B	; 123
    1db0:	80 93 a6 00 	sts	0x00A6, r24
			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1db4:	a1 dc       	rcall	.-1726   	; 0x16f8 <Pipe_WaitUntilReady>
    1db6:	88 23       	and	r24, r24
    1db8:	39 f0       	breq	.+14     	; 0x1dc8 <Pipe_Write_Stream_LE+0x54>
    1dba:	09 c0       	rjmp	.+18     	; 0x1dce <Pipe_Write_Stream_LE+0x5a>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1dbc:	f8 01       	movw	r30, r16
    1dbe:	81 91       	ld	r24, Z+
    1dc0:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
    1dc2:	80 93 af 00 	sts	0x00AF, r24
			Length--;
    1dc6:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    1dc8:	20 97       	sbiw	r28, 0x00	; 0
    1dca:	59 f7       	brne	.-42     	; 0x1da2 <Pipe_Write_Stream_LE+0x2e>
    1dcc:	8f 2d       	mov	r24, r15
			Length--;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	1f 91       	pop	r17
    1dd4:	0f 91       	pop	r16
    1dd6:	ff 90       	pop	r15
    1dd8:	08 95       	ret

00001dda <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1dda:	ff 92       	push	r15
    1ddc:	0f 93       	push	r16
    1dde:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1de0:	07 ea       	ldi	r16, 0xA7	; 167
    1de2:	10 e0       	ldi	r17, 0x00	; 0
    1de4:	f8 01       	movw	r30, r16
    1de6:	f0 80       	ld	r15, Z
    1de8:	f7 e0       	ldi	r31, 0x07	; 7
    1dea:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1dec:	f8 01       	movw	r30, r16
    1dee:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1df0:	08 db       	rcall	.-2544   	; 0x1402 <USB_Host_ProcessNextHostState>
    1df2:	f8 01       	movw	r30, r16
    1df4:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1df6:	1f 91       	pop	r17
    1df8:	0f 91       	pop	r16
    1dfa:	ff 90       	pop	r15
    1dfc:	08 95       	ret

00001dfe <SerialStream_TxByte>:

FILE USARTStream = FDEV_SETUP_STREAM(SerialStream_TxByte, SerialStream_RxByte, _FDEV_SETUP_RW);

static int SerialStream_TxByte(char DataByte,
                               FILE *Stream)
{
    1dfe:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1e00:	80 91 c8 00 	lds	r24, 0x00C8
    1e04:	85 ff       	sbrs	r24, 5
    1e06:	fc cf       	rjmp	.-8      	; 0x1e00 <SerialStream_TxByte+0x2>
				UDR1 = DataByte;
    1e08:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_TxByte(DataByte);
	return 0;
}
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	08 95       	ret

00001e12 <SerialStream_RxByte>:
			 *  \return Boolean true if a character has been received, false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1e12:	80 91 c8 00 	lds	r24, 0x00C8

static int SerialStream_RxByte(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1e16:	87 fd       	sbrc	r24, 7
    1e18:	03 c0       	rjmp	.+6      	; 0x1e20 <SerialStream_RxByte+0xe>
    1e1a:	2e ef       	ldi	r18, 0xFE	; 254
    1e1c:	3f ef       	ldi	r19, 0xFF	; 255
    1e1e:	08 c0       	rjmp	.+16     	; 0x1e30 <SerialStream_RxByte+0x1e>
			 *  \return Byte received from the USART.
			 */
			static inline char Serial_RxByte(void) ATTR_ALWAYS_INLINE;
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
    1e20:	80 91 c8 00 	lds	r24, 0x00C8
    1e24:	87 ff       	sbrs	r24, 7
    1e26:	fc cf       	rjmp	.-8      	; 0x1e20 <SerialStream_RxByte+0xe>
				return UDR1;
    1e28:	80 91 ce 00 	lds	r24, 0x00CE
	  return _FDEV_EOF;

	return Serial_RxByte();
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
}
    1e30:	c9 01       	movw	r24, r18
    1e32:	08 95       	ret

00001e34 <__mulsi3>:
    1e34:	62 9f       	mul	r22, r18
    1e36:	d0 01       	movw	r26, r0
    1e38:	73 9f       	mul	r23, r19
    1e3a:	f0 01       	movw	r30, r0
    1e3c:	82 9f       	mul	r24, r18
    1e3e:	e0 0d       	add	r30, r0
    1e40:	f1 1d       	adc	r31, r1
    1e42:	64 9f       	mul	r22, r20
    1e44:	e0 0d       	add	r30, r0
    1e46:	f1 1d       	adc	r31, r1
    1e48:	92 9f       	mul	r25, r18
    1e4a:	f0 0d       	add	r31, r0
    1e4c:	83 9f       	mul	r24, r19
    1e4e:	f0 0d       	add	r31, r0
    1e50:	74 9f       	mul	r23, r20
    1e52:	f0 0d       	add	r31, r0
    1e54:	65 9f       	mul	r22, r21
    1e56:	f0 0d       	add	r31, r0
    1e58:	99 27       	eor	r25, r25
    1e5a:	72 9f       	mul	r23, r18
    1e5c:	b0 0d       	add	r27, r0
    1e5e:	e1 1d       	adc	r30, r1
    1e60:	f9 1f       	adc	r31, r25
    1e62:	63 9f       	mul	r22, r19
    1e64:	b0 0d       	add	r27, r0
    1e66:	e1 1d       	adc	r30, r1
    1e68:	f9 1f       	adc	r31, r25
    1e6a:	bd 01       	movw	r22, r26
    1e6c:	cf 01       	movw	r24, r30
    1e6e:	11 24       	eor	r1, r1
    1e70:	08 95       	ret

00001e72 <isgraph>:
    1e72:	80 32       	cpi	r24, 0x20	; 32
    1e74:	09 f0       	breq	.+2      	; 0x1e78 <isprint+0x2>

00001e76 <isprint>:
    1e76:	91 11       	cpse	r25, r1
    1e78:	80 c2       	rjmp	.+1280   	; 0x237a <__ctype_isfalse>
    1e7a:	80 52       	subi	r24, 0x20	; 32
    1e7c:	8f 55       	subi	r24, 0x5F	; 95
    1e7e:	e0 f7       	brcc	.-8      	; 0x1e78 <isprint+0x2>
    1e80:	08 95       	ret

00001e82 <fputc>:
    1e82:	0f 93       	push	r16
    1e84:	1f 93       	push	r17
    1e86:	cf 93       	push	r28
    1e88:	df 93       	push	r29
    1e8a:	8c 01       	movw	r16, r24
    1e8c:	eb 01       	movw	r28, r22
    1e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e90:	81 ff       	sbrs	r24, 1
    1e92:	1b c0       	rjmp	.+54     	; 0x1eca <fputc+0x48>
    1e94:	82 ff       	sbrs	r24, 2
    1e96:	0d c0       	rjmp	.+26     	; 0x1eb2 <fputc+0x30>
    1e98:	2e 81       	ldd	r18, Y+6	; 0x06
    1e9a:	3f 81       	ldd	r19, Y+7	; 0x07
    1e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea0:	28 17       	cp	r18, r24
    1ea2:	39 07       	cpc	r19, r25
    1ea4:	64 f4       	brge	.+24     	; 0x1ebe <fputc+0x3c>
    1ea6:	e8 81       	ld	r30, Y
    1ea8:	f9 81       	ldd	r31, Y+1	; 0x01
    1eaa:	01 93       	st	Z+, r16
    1eac:	f9 83       	std	Y+1, r31	; 0x01
    1eae:	e8 83       	st	Y, r30
    1eb0:	06 c0       	rjmp	.+12     	; 0x1ebe <fputc+0x3c>
    1eb2:	e8 85       	ldd	r30, Y+8	; 0x08
    1eb4:	f9 85       	ldd	r31, Y+9	; 0x09
    1eb6:	80 2f       	mov	r24, r16
    1eb8:	09 95       	icall
    1eba:	89 2b       	or	r24, r25
    1ebc:	31 f4       	brne	.+12     	; 0x1eca <fputc+0x48>
    1ebe:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec2:	01 96       	adiw	r24, 0x01	; 1
    1ec4:	9f 83       	std	Y+7, r25	; 0x07
    1ec6:	8e 83       	std	Y+6, r24	; 0x06
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <fputc+0x4c>
    1eca:	0f ef       	ldi	r16, 0xFF	; 255
    1ecc:	1f ef       	ldi	r17, 0xFF	; 255
    1ece:	c8 01       	movw	r24, r16
    1ed0:	df 91       	pop	r29
    1ed2:	cf 91       	pop	r28
    1ed4:	1f 91       	pop	r17
    1ed6:	0f 91       	pop	r16
    1ed8:	08 95       	ret

00001eda <printf_P>:
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
    1ee2:	fe 01       	movw	r30, r28
    1ee4:	35 96       	adiw	r30, 0x05	; 5
    1ee6:	61 91       	ld	r22, Z+
    1ee8:	71 91       	ld	r23, Z+
    1eea:	a0 91 4c 01 	lds	r26, 0x014C
    1eee:	b0 91 4d 01 	lds	r27, 0x014D
    1ef2:	13 96       	adiw	r26, 0x03	; 3
    1ef4:	8c 91       	ld	r24, X
    1ef6:	13 97       	sbiw	r26, 0x03	; 3
    1ef8:	88 60       	ori	r24, 0x08	; 8
    1efa:	13 96       	adiw	r26, 0x03	; 3
    1efc:	8c 93       	st	X, r24
    1efe:	80 91 4c 01 	lds	r24, 0x014C
    1f02:	90 91 4d 01 	lds	r25, 0x014D
    1f06:	af 01       	movw	r20, r30
    1f08:	3f d0       	rcall	.+126    	; 0x1f88 <vfprintf>
    1f0a:	e0 91 4c 01 	lds	r30, 0x014C
    1f0e:	f0 91 4d 01 	lds	r31, 0x014D
    1f12:	23 81       	ldd	r18, Z+3	; 0x03
    1f14:	27 7f       	andi	r18, 0xF7	; 247
    1f16:	23 83       	std	Z+3, r18	; 0x03
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	08 95       	ret

00001f1e <puts_P>:
    1f1e:	0f 93       	push	r16
    1f20:	1f 93       	push	r17
    1f22:	cf 93       	push	r28
    1f24:	df 93       	push	r29
    1f26:	ec 01       	movw	r28, r24
    1f28:	e0 91 4c 01 	lds	r30, 0x014C
    1f2c:	f0 91 4d 01 	lds	r31, 0x014D
    1f30:	83 81       	ldd	r24, Z+3	; 0x03
    1f32:	81 ff       	sbrs	r24, 1
    1f34:	21 c0       	rjmp	.+66     	; 0x1f78 <puts_P+0x5a>
    1f36:	00 e0       	ldi	r16, 0x00	; 0
    1f38:	10 e0       	ldi	r17, 0x00	; 0
    1f3a:	0e c0       	rjmp	.+28     	; 0x1f58 <puts_P+0x3a>
    1f3c:	e0 91 4c 01 	lds	r30, 0x014C
    1f40:	f0 91 4d 01 	lds	r31, 0x014D
    1f44:	20 85       	ldd	r18, Z+8	; 0x08
    1f46:	31 85       	ldd	r19, Z+9	; 0x09
    1f48:	bf 01       	movw	r22, r30
    1f4a:	f9 01       	movw	r30, r18
    1f4c:	09 95       	icall
    1f4e:	89 2b       	or	r24, r25
    1f50:	11 f0       	breq	.+4      	; 0x1f56 <puts_P+0x38>
    1f52:	0f ef       	ldi	r16, 0xFF	; 255
    1f54:	1f ef       	ldi	r17, 0xFF	; 255
    1f56:	21 96       	adiw	r28, 0x01	; 1
    1f58:	fe 01       	movw	r30, r28
    1f5a:	84 91       	lpm	r24, Z+
    1f5c:	88 23       	and	r24, r24
    1f5e:	71 f7       	brne	.-36     	; 0x1f3c <puts_P+0x1e>
    1f60:	e0 91 4c 01 	lds	r30, 0x014C
    1f64:	f0 91 4d 01 	lds	r31, 0x014D
    1f68:	20 85       	ldd	r18, Z+8	; 0x08
    1f6a:	31 85       	ldd	r19, Z+9	; 0x09
    1f6c:	8a e0       	ldi	r24, 0x0A	; 10
    1f6e:	bf 01       	movw	r22, r30
    1f70:	f9 01       	movw	r30, r18
    1f72:	09 95       	icall
    1f74:	89 2b       	or	r24, r25
    1f76:	11 f0       	breq	.+4      	; 0x1f7c <puts_P+0x5e>
    1f78:	0f ef       	ldi	r16, 0xFF	; 255
    1f7a:	1f ef       	ldi	r17, 0xFF	; 255
    1f7c:	c8 01       	movw	r24, r16
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	1f 91       	pop	r17
    1f84:	0f 91       	pop	r16
    1f86:	08 95       	ret

00001f88 <vfprintf>:
    1f88:	2f 92       	push	r2
    1f8a:	3f 92       	push	r3
    1f8c:	4f 92       	push	r4
    1f8e:	5f 92       	push	r5
    1f90:	6f 92       	push	r6
    1f92:	7f 92       	push	r7
    1f94:	8f 92       	push	r8
    1f96:	9f 92       	push	r9
    1f98:	af 92       	push	r10
    1f9a:	bf 92       	push	r11
    1f9c:	cf 92       	push	r12
    1f9e:	df 92       	push	r13
    1fa0:	ef 92       	push	r14
    1fa2:	ff 92       	push	r15
    1fa4:	0f 93       	push	r16
    1fa6:	1f 93       	push	r17
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	2b 97       	sbiw	r28, 0x0b	; 11
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61
    1fbc:	3c 01       	movw	r6, r24
    1fbe:	2b 01       	movw	r4, r22
    1fc0:	5a 01       	movw	r10, r20
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	17 82       	std	Z+7, r1	; 0x07
    1fc6:	16 82       	std	Z+6, r1	; 0x06
    1fc8:	83 81       	ldd	r24, Z+3	; 0x03
    1fca:	81 fd       	sbrc	r24, 1
    1fcc:	03 c0       	rjmp	.+6      	; 0x1fd4 <vfprintf+0x4c>
    1fce:	6f ef       	ldi	r22, 0xFF	; 255
    1fd0:	7f ef       	ldi	r23, 0xFF	; 255
    1fd2:	b9 c1       	rjmp	.+882    	; 0x2346 <__stack+0x247>
    1fd4:	9a e0       	ldi	r25, 0x0A	; 10
    1fd6:	89 2e       	mov	r8, r25
    1fd8:	1e 01       	movw	r2, r28
    1fda:	08 94       	sec
    1fdc:	21 1c       	adc	r2, r1
    1fde:	31 1c       	adc	r3, r1
    1fe0:	f3 01       	movw	r30, r6
    1fe2:	23 81       	ldd	r18, Z+3	; 0x03
    1fe4:	f2 01       	movw	r30, r4
    1fe6:	23 fd       	sbrc	r18, 3
    1fe8:	85 91       	lpm	r24, Z+
    1fea:	23 ff       	sbrs	r18, 3
    1fec:	81 91       	ld	r24, Z+
    1fee:	2f 01       	movw	r4, r30
    1ff0:	88 23       	and	r24, r24
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <vfprintf+0x6e>
    1ff4:	a5 c1       	rjmp	.+842    	; 0x2340 <__stack+0x241>
    1ff6:	85 32       	cpi	r24, 0x25	; 37
    1ff8:	39 f4       	brne	.+14     	; 0x2008 <vfprintf+0x80>
    1ffa:	23 fd       	sbrc	r18, 3
    1ffc:	85 91       	lpm	r24, Z+
    1ffe:	23 ff       	sbrs	r18, 3
    2000:	81 91       	ld	r24, Z+
    2002:	2f 01       	movw	r4, r30
    2004:	85 32       	cpi	r24, 0x25	; 37
    2006:	21 f4       	brne	.+8      	; 0x2010 <vfprintf+0x88>
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	b3 01       	movw	r22, r6
    200c:	3a df       	rcall	.-396    	; 0x1e82 <fputc>
    200e:	e8 cf       	rjmp	.-48     	; 0x1fe0 <vfprintf+0x58>
    2010:	98 2f       	mov	r25, r24
    2012:	ff 24       	eor	r15, r15
    2014:	ee 24       	eor	r14, r14
    2016:	99 24       	eor	r9, r9
    2018:	ff e1       	ldi	r31, 0x1F	; 31
    201a:	ff 15       	cp	r31, r15
    201c:	d0 f0       	brcs	.+52     	; 0x2052 <vfprintf+0xca>
    201e:	9b 32       	cpi	r25, 0x2B	; 43
    2020:	69 f0       	breq	.+26     	; 0x203c <vfprintf+0xb4>
    2022:	9c 32       	cpi	r25, 0x2C	; 44
    2024:	28 f4       	brcc	.+10     	; 0x2030 <vfprintf+0xa8>
    2026:	90 32       	cpi	r25, 0x20	; 32
    2028:	59 f0       	breq	.+22     	; 0x2040 <vfprintf+0xb8>
    202a:	93 32       	cpi	r25, 0x23	; 35
    202c:	91 f4       	brne	.+36     	; 0x2052 <vfprintf+0xca>
    202e:	0e c0       	rjmp	.+28     	; 0x204c <vfprintf+0xc4>
    2030:	9d 32       	cpi	r25, 0x2D	; 45
    2032:	49 f0       	breq	.+18     	; 0x2046 <vfprintf+0xbe>
    2034:	90 33       	cpi	r25, 0x30	; 48
    2036:	69 f4       	brne	.+26     	; 0x2052 <vfprintf+0xca>
    2038:	41 e0       	ldi	r20, 0x01	; 1
    203a:	24 c0       	rjmp	.+72     	; 0x2084 <vfprintf+0xfc>
    203c:	52 e0       	ldi	r21, 0x02	; 2
    203e:	f5 2a       	or	r15, r21
    2040:	84 e0       	ldi	r24, 0x04	; 4
    2042:	f8 2a       	or	r15, r24
    2044:	28 c0       	rjmp	.+80     	; 0x2096 <vfprintf+0x10e>
    2046:	98 e0       	ldi	r25, 0x08	; 8
    2048:	f9 2a       	or	r15, r25
    204a:	25 c0       	rjmp	.+74     	; 0x2096 <vfprintf+0x10e>
    204c:	e0 e1       	ldi	r30, 0x10	; 16
    204e:	fe 2a       	or	r15, r30
    2050:	22 c0       	rjmp	.+68     	; 0x2096 <vfprintf+0x10e>
    2052:	f7 fc       	sbrc	r15, 7
    2054:	29 c0       	rjmp	.+82     	; 0x20a8 <vfprintf+0x120>
    2056:	89 2f       	mov	r24, r25
    2058:	80 53       	subi	r24, 0x30	; 48
    205a:	8a 30       	cpi	r24, 0x0A	; 10
    205c:	70 f4       	brcc	.+28     	; 0x207a <vfprintf+0xf2>
    205e:	f6 fe       	sbrs	r15, 6
    2060:	05 c0       	rjmp	.+10     	; 0x206c <vfprintf+0xe4>
    2062:	98 9c       	mul	r9, r8
    2064:	90 2c       	mov	r9, r0
    2066:	11 24       	eor	r1, r1
    2068:	98 0e       	add	r9, r24
    206a:	15 c0       	rjmp	.+42     	; 0x2096 <vfprintf+0x10e>
    206c:	e8 9c       	mul	r14, r8
    206e:	e0 2c       	mov	r14, r0
    2070:	11 24       	eor	r1, r1
    2072:	e8 0e       	add	r14, r24
    2074:	f0 e2       	ldi	r31, 0x20	; 32
    2076:	ff 2a       	or	r15, r31
    2078:	0e c0       	rjmp	.+28     	; 0x2096 <vfprintf+0x10e>
    207a:	9e 32       	cpi	r25, 0x2E	; 46
    207c:	29 f4       	brne	.+10     	; 0x2088 <vfprintf+0x100>
    207e:	f6 fc       	sbrc	r15, 6
    2080:	5f c1       	rjmp	.+702    	; 0x2340 <__stack+0x241>
    2082:	40 e4       	ldi	r20, 0x40	; 64
    2084:	f4 2a       	or	r15, r20
    2086:	07 c0       	rjmp	.+14     	; 0x2096 <vfprintf+0x10e>
    2088:	9c 36       	cpi	r25, 0x6C	; 108
    208a:	19 f4       	brne	.+6      	; 0x2092 <vfprintf+0x10a>
    208c:	50 e8       	ldi	r21, 0x80	; 128
    208e:	f5 2a       	or	r15, r21
    2090:	02 c0       	rjmp	.+4      	; 0x2096 <vfprintf+0x10e>
    2092:	98 36       	cpi	r25, 0x68	; 104
    2094:	49 f4       	brne	.+18     	; 0x20a8 <vfprintf+0x120>
    2096:	f2 01       	movw	r30, r4
    2098:	23 fd       	sbrc	r18, 3
    209a:	95 91       	lpm	r25, Z+
    209c:	23 ff       	sbrs	r18, 3
    209e:	91 91       	ld	r25, Z+
    20a0:	2f 01       	movw	r4, r30
    20a2:	99 23       	and	r25, r25
    20a4:	09 f0       	breq	.+2      	; 0x20a8 <vfprintf+0x120>
    20a6:	b8 cf       	rjmp	.-144    	; 0x2018 <vfprintf+0x90>
    20a8:	89 2f       	mov	r24, r25
    20aa:	85 54       	subi	r24, 0x45	; 69
    20ac:	83 30       	cpi	r24, 0x03	; 3
    20ae:	18 f0       	brcs	.+6      	; 0x20b6 <vfprintf+0x12e>
    20b0:	80 52       	subi	r24, 0x20	; 32
    20b2:	83 30       	cpi	r24, 0x03	; 3
    20b4:	38 f4       	brcc	.+14     	; 0x20c4 <vfprintf+0x13c>
    20b6:	44 e0       	ldi	r20, 0x04	; 4
    20b8:	50 e0       	ldi	r21, 0x00	; 0
    20ba:	a4 0e       	add	r10, r20
    20bc:	b5 1e       	adc	r11, r21
    20be:	5f e3       	ldi	r21, 0x3F	; 63
    20c0:	59 83       	std	Y+1, r21	; 0x01
    20c2:	0f c0       	rjmp	.+30     	; 0x20e2 <vfprintf+0x15a>
    20c4:	93 36       	cpi	r25, 0x63	; 99
    20c6:	31 f0       	breq	.+12     	; 0x20d4 <vfprintf+0x14c>
    20c8:	93 37       	cpi	r25, 0x73	; 115
    20ca:	79 f0       	breq	.+30     	; 0x20ea <vfprintf+0x162>
    20cc:	93 35       	cpi	r25, 0x53	; 83
    20ce:	09 f0       	breq	.+2      	; 0x20d2 <vfprintf+0x14a>
    20d0:	52 c0       	rjmp	.+164    	; 0x2176 <__stack+0x77>
    20d2:	1f c0       	rjmp	.+62     	; 0x2112 <__stack+0x13>
    20d4:	f5 01       	movw	r30, r10
    20d6:	80 81       	ld	r24, Z
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	42 e0       	ldi	r20, 0x02	; 2
    20dc:	50 e0       	ldi	r21, 0x00	; 0
    20de:	a4 0e       	add	r10, r20
    20e0:	b5 1e       	adc	r11, r21
    20e2:	61 01       	movw	r12, r2
    20e4:	01 e0       	ldi	r16, 0x01	; 1
    20e6:	10 e0       	ldi	r17, 0x00	; 0
    20e8:	11 c0       	rjmp	.+34     	; 0x210c <__stack+0xd>
    20ea:	f5 01       	movw	r30, r10
    20ec:	c0 80       	ld	r12, Z
    20ee:	d1 80       	ldd	r13, Z+1	; 0x01
    20f0:	f6 fc       	sbrc	r15, 6
    20f2:	03 c0       	rjmp	.+6      	; 0x20fa <vfprintf+0x172>
    20f4:	6f ef       	ldi	r22, 0xFF	; 255
    20f6:	7f ef       	ldi	r23, 0xFF	; 255
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <vfprintf+0x176>
    20fa:	69 2d       	mov	r22, r9
    20fc:	70 e0       	ldi	r23, 0x00	; 0
    20fe:	42 e0       	ldi	r20, 0x02	; 2
    2100:	50 e0       	ldi	r21, 0x00	; 0
    2102:	a4 0e       	add	r10, r20
    2104:	b5 1e       	adc	r11, r21
    2106:	c6 01       	movw	r24, r12
    2108:	46 d1       	rcall	.+652    	; 0x2396 <strnlen>
    210a:	8c 01       	movw	r16, r24
    210c:	5f e7       	ldi	r21, 0x7F	; 127
    210e:	f5 22       	and	r15, r21
    2110:	13 c0       	rjmp	.+38     	; 0x2138 <__stack+0x39>
    2112:	f5 01       	movw	r30, r10
    2114:	c0 80       	ld	r12, Z
    2116:	d1 80       	ldd	r13, Z+1	; 0x01
    2118:	f6 fc       	sbrc	r15, 6
    211a:	03 c0       	rjmp	.+6      	; 0x2122 <__stack+0x23>
    211c:	6f ef       	ldi	r22, 0xFF	; 255
    211e:	7f ef       	ldi	r23, 0xFF	; 255
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <__stack+0x27>
    2122:	69 2d       	mov	r22, r9
    2124:	70 e0       	ldi	r23, 0x00	; 0
    2126:	42 e0       	ldi	r20, 0x02	; 2
    2128:	50 e0       	ldi	r21, 0x00	; 0
    212a:	a4 0e       	add	r10, r20
    212c:	b5 1e       	adc	r11, r21
    212e:	c6 01       	movw	r24, r12
    2130:	27 d1       	rcall	.+590    	; 0x2380 <strnlen_P>
    2132:	8c 01       	movw	r16, r24
    2134:	50 e8       	ldi	r21, 0x80	; 128
    2136:	f5 2a       	or	r15, r21
    2138:	f3 fe       	sbrs	r15, 3
    213a:	06 c0       	rjmp	.+12     	; 0x2148 <__stack+0x49>
    213c:	18 c0       	rjmp	.+48     	; 0x216e <__stack+0x6f>
    213e:	80 e2       	ldi	r24, 0x20	; 32
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	b3 01       	movw	r22, r6
    2144:	9e de       	rcall	.-708    	; 0x1e82 <fputc>
    2146:	ea 94       	dec	r14
    2148:	8e 2d       	mov	r24, r14
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	08 17       	cp	r16, r24
    214e:	19 07       	cpc	r17, r25
    2150:	b0 f3       	brcs	.-20     	; 0x213e <__stack+0x3f>
    2152:	0d c0       	rjmp	.+26     	; 0x216e <__stack+0x6f>
    2154:	f6 01       	movw	r30, r12
    2156:	f7 fc       	sbrc	r15, 7
    2158:	85 91       	lpm	r24, Z+
    215a:	f7 fe       	sbrs	r15, 7
    215c:	81 91       	ld	r24, Z+
    215e:	6f 01       	movw	r12, r30
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	b3 01       	movw	r22, r6
    2164:	8e de       	rcall	.-740    	; 0x1e82 <fputc>
    2166:	e1 10       	cpse	r14, r1
    2168:	ea 94       	dec	r14
    216a:	01 50       	subi	r16, 0x01	; 1
    216c:	10 40       	sbci	r17, 0x00	; 0
    216e:	01 15       	cp	r16, r1
    2170:	11 05       	cpc	r17, r1
    2172:	81 f7       	brne	.-32     	; 0x2154 <__stack+0x55>
    2174:	e2 c0       	rjmp	.+452    	; 0x233a <__stack+0x23b>
    2176:	94 36       	cpi	r25, 0x64	; 100
    2178:	11 f0       	breq	.+4      	; 0x217e <__stack+0x7f>
    217a:	99 36       	cpi	r25, 0x69	; 105
    217c:	61 f5       	brne	.+88     	; 0x21d6 <__stack+0xd7>
    217e:	f7 fe       	sbrs	r15, 7
    2180:	08 c0       	rjmp	.+16     	; 0x2192 <__stack+0x93>
    2182:	f5 01       	movw	r30, r10
    2184:	20 81       	ld	r18, Z
    2186:	31 81       	ldd	r19, Z+1	; 0x01
    2188:	42 81       	ldd	r20, Z+2	; 0x02
    218a:	53 81       	ldd	r21, Z+3	; 0x03
    218c:	84 e0       	ldi	r24, 0x04	; 4
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	0a c0       	rjmp	.+20     	; 0x21a6 <__stack+0xa7>
    2192:	f5 01       	movw	r30, r10
    2194:	80 81       	ld	r24, Z
    2196:	91 81       	ldd	r25, Z+1	; 0x01
    2198:	9c 01       	movw	r18, r24
    219a:	44 27       	eor	r20, r20
    219c:	37 fd       	sbrc	r19, 7
    219e:	40 95       	com	r20
    21a0:	54 2f       	mov	r21, r20
    21a2:	82 e0       	ldi	r24, 0x02	; 2
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	a8 0e       	add	r10, r24
    21a8:	b9 1e       	adc	r11, r25
    21aa:	9f e6       	ldi	r25, 0x6F	; 111
    21ac:	f9 22       	and	r15, r25
    21ae:	57 ff       	sbrs	r21, 7
    21b0:	09 c0       	rjmp	.+18     	; 0x21c4 <__stack+0xc5>
    21b2:	50 95       	com	r21
    21b4:	40 95       	com	r20
    21b6:	30 95       	com	r19
    21b8:	21 95       	neg	r18
    21ba:	3f 4f       	sbci	r19, 0xFF	; 255
    21bc:	4f 4f       	sbci	r20, 0xFF	; 255
    21be:	5f 4f       	sbci	r21, 0xFF	; 255
    21c0:	e0 e8       	ldi	r30, 0x80	; 128
    21c2:	fe 2a       	or	r15, r30
    21c4:	ca 01       	movw	r24, r20
    21c6:	b9 01       	movw	r22, r18
    21c8:	a1 01       	movw	r20, r2
    21ca:	2a e0       	ldi	r18, 0x0A	; 10
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	ee d0       	rcall	.+476    	; 0x23ac <__ultoa_invert>
    21d0:	d8 2e       	mov	r13, r24
    21d2:	d2 18       	sub	r13, r2
    21d4:	3f c0       	rjmp	.+126    	; 0x2254 <__stack+0x155>
    21d6:	95 37       	cpi	r25, 0x75	; 117
    21d8:	29 f4       	brne	.+10     	; 0x21e4 <__stack+0xe5>
    21da:	1f 2d       	mov	r17, r15
    21dc:	1f 7e       	andi	r17, 0xEF	; 239
    21de:	2a e0       	ldi	r18, 0x0A	; 10
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	1d c0       	rjmp	.+58     	; 0x221e <__stack+0x11f>
    21e4:	1f 2d       	mov	r17, r15
    21e6:	19 7f       	andi	r17, 0xF9	; 249
    21e8:	9f 36       	cpi	r25, 0x6F	; 111
    21ea:	61 f0       	breq	.+24     	; 0x2204 <__stack+0x105>
    21ec:	90 37       	cpi	r25, 0x70	; 112
    21ee:	20 f4       	brcc	.+8      	; 0x21f8 <__stack+0xf9>
    21f0:	98 35       	cpi	r25, 0x58	; 88
    21f2:	09 f0       	breq	.+2      	; 0x21f6 <__stack+0xf7>
    21f4:	a5 c0       	rjmp	.+330    	; 0x2340 <__stack+0x241>
    21f6:	0f c0       	rjmp	.+30     	; 0x2216 <__stack+0x117>
    21f8:	90 37       	cpi	r25, 0x70	; 112
    21fa:	39 f0       	breq	.+14     	; 0x220a <__stack+0x10b>
    21fc:	98 37       	cpi	r25, 0x78	; 120
    21fe:	09 f0       	breq	.+2      	; 0x2202 <__stack+0x103>
    2200:	9f c0       	rjmp	.+318    	; 0x2340 <__stack+0x241>
    2202:	04 c0       	rjmp	.+8      	; 0x220c <__stack+0x10d>
    2204:	28 e0       	ldi	r18, 0x08	; 8
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	0a c0       	rjmp	.+20     	; 0x221e <__stack+0x11f>
    220a:	10 61       	ori	r17, 0x10	; 16
    220c:	14 fd       	sbrc	r17, 4
    220e:	14 60       	ori	r17, 0x04	; 4
    2210:	20 e1       	ldi	r18, 0x10	; 16
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	04 c0       	rjmp	.+8      	; 0x221e <__stack+0x11f>
    2216:	14 fd       	sbrc	r17, 4
    2218:	16 60       	ori	r17, 0x06	; 6
    221a:	20 e1       	ldi	r18, 0x10	; 16
    221c:	32 e0       	ldi	r19, 0x02	; 2
    221e:	17 ff       	sbrs	r17, 7
    2220:	08 c0       	rjmp	.+16     	; 0x2232 <__stack+0x133>
    2222:	f5 01       	movw	r30, r10
    2224:	60 81       	ld	r22, Z
    2226:	71 81       	ldd	r23, Z+1	; 0x01
    2228:	82 81       	ldd	r24, Z+2	; 0x02
    222a:	93 81       	ldd	r25, Z+3	; 0x03
    222c:	44 e0       	ldi	r20, 0x04	; 4
    222e:	50 e0       	ldi	r21, 0x00	; 0
    2230:	08 c0       	rjmp	.+16     	; 0x2242 <__stack+0x143>
    2232:	f5 01       	movw	r30, r10
    2234:	80 81       	ld	r24, Z
    2236:	91 81       	ldd	r25, Z+1	; 0x01
    2238:	bc 01       	movw	r22, r24
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	42 e0       	ldi	r20, 0x02	; 2
    2240:	50 e0       	ldi	r21, 0x00	; 0
    2242:	a4 0e       	add	r10, r20
    2244:	b5 1e       	adc	r11, r21
    2246:	a1 01       	movw	r20, r2
    2248:	b1 d0       	rcall	.+354    	; 0x23ac <__ultoa_invert>
    224a:	d8 2e       	mov	r13, r24
    224c:	d2 18       	sub	r13, r2
    224e:	8f e7       	ldi	r24, 0x7F	; 127
    2250:	f8 2e       	mov	r15, r24
    2252:	f1 22       	and	r15, r17
    2254:	f6 fe       	sbrs	r15, 6
    2256:	0b c0       	rjmp	.+22     	; 0x226e <__stack+0x16f>
    2258:	5e ef       	ldi	r21, 0xFE	; 254
    225a:	f5 22       	and	r15, r21
    225c:	d9 14       	cp	r13, r9
    225e:	38 f4       	brcc	.+14     	; 0x226e <__stack+0x16f>
    2260:	f4 fe       	sbrs	r15, 4
    2262:	07 c0       	rjmp	.+14     	; 0x2272 <__stack+0x173>
    2264:	f2 fc       	sbrc	r15, 2
    2266:	05 c0       	rjmp	.+10     	; 0x2272 <__stack+0x173>
    2268:	8f ee       	ldi	r24, 0xEF	; 239
    226a:	f8 22       	and	r15, r24
    226c:	02 c0       	rjmp	.+4      	; 0x2272 <__stack+0x173>
    226e:	1d 2d       	mov	r17, r13
    2270:	01 c0       	rjmp	.+2      	; 0x2274 <__stack+0x175>
    2272:	19 2d       	mov	r17, r9
    2274:	f4 fe       	sbrs	r15, 4
    2276:	0d c0       	rjmp	.+26     	; 0x2292 <__stack+0x193>
    2278:	fe 01       	movw	r30, r28
    227a:	ed 0d       	add	r30, r13
    227c:	f1 1d       	adc	r31, r1
    227e:	80 81       	ld	r24, Z
    2280:	80 33       	cpi	r24, 0x30	; 48
    2282:	19 f4       	brne	.+6      	; 0x228a <__stack+0x18b>
    2284:	99 ee       	ldi	r25, 0xE9	; 233
    2286:	f9 22       	and	r15, r25
    2288:	08 c0       	rjmp	.+16     	; 0x229a <__stack+0x19b>
    228a:	1f 5f       	subi	r17, 0xFF	; 255
    228c:	f2 fe       	sbrs	r15, 2
    228e:	05 c0       	rjmp	.+10     	; 0x229a <__stack+0x19b>
    2290:	03 c0       	rjmp	.+6      	; 0x2298 <__stack+0x199>
    2292:	8f 2d       	mov	r24, r15
    2294:	86 78       	andi	r24, 0x86	; 134
    2296:	09 f0       	breq	.+2      	; 0x229a <__stack+0x19b>
    2298:	1f 5f       	subi	r17, 0xFF	; 255
    229a:	0f 2d       	mov	r16, r15
    229c:	f3 fc       	sbrc	r15, 3
    229e:	13 c0       	rjmp	.+38     	; 0x22c6 <__stack+0x1c7>
    22a0:	f0 fe       	sbrs	r15, 0
    22a2:	0e c0       	rjmp	.+28     	; 0x22c0 <__stack+0x1c1>
    22a4:	1e 15       	cp	r17, r14
    22a6:	10 f0       	brcs	.+4      	; 0x22ac <__stack+0x1ad>
    22a8:	9d 2c       	mov	r9, r13
    22aa:	0a c0       	rjmp	.+20     	; 0x22c0 <__stack+0x1c1>
    22ac:	9d 2c       	mov	r9, r13
    22ae:	9e 0c       	add	r9, r14
    22b0:	91 1a       	sub	r9, r17
    22b2:	1e 2d       	mov	r17, r14
    22b4:	05 c0       	rjmp	.+10     	; 0x22c0 <__stack+0x1c1>
    22b6:	80 e2       	ldi	r24, 0x20	; 32
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	b3 01       	movw	r22, r6
    22bc:	e2 dd       	rcall	.-1084   	; 0x1e82 <fputc>
    22be:	1f 5f       	subi	r17, 0xFF	; 255
    22c0:	1e 15       	cp	r17, r14
    22c2:	c8 f3       	brcs	.-14     	; 0x22b6 <__stack+0x1b7>
    22c4:	04 c0       	rjmp	.+8      	; 0x22ce <__stack+0x1cf>
    22c6:	1e 15       	cp	r17, r14
    22c8:	10 f4       	brcc	.+4      	; 0x22ce <__stack+0x1cf>
    22ca:	e1 1a       	sub	r14, r17
    22cc:	01 c0       	rjmp	.+2      	; 0x22d0 <__stack+0x1d1>
    22ce:	ee 24       	eor	r14, r14
    22d0:	04 ff       	sbrs	r16, 4
    22d2:	0e c0       	rjmp	.+28     	; 0x22f0 <__stack+0x1f1>
    22d4:	80 e3       	ldi	r24, 0x30	; 48
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	b3 01       	movw	r22, r6
    22da:	d3 dd       	rcall	.-1114   	; 0x1e82 <fputc>
    22dc:	02 ff       	sbrs	r16, 2
    22de:	1b c0       	rjmp	.+54     	; 0x2316 <__stack+0x217>
    22e0:	01 fd       	sbrc	r16, 1
    22e2:	03 c0       	rjmp	.+6      	; 0x22ea <__stack+0x1eb>
    22e4:	88 e7       	ldi	r24, 0x78	; 120
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	0e c0       	rjmp	.+28     	; 0x2306 <__stack+0x207>
    22ea:	88 e5       	ldi	r24, 0x58	; 88
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	0b c0       	rjmp	.+22     	; 0x2306 <__stack+0x207>
    22f0:	80 2f       	mov	r24, r16
    22f2:	86 78       	andi	r24, 0x86	; 134
    22f4:	81 f0       	breq	.+32     	; 0x2316 <__stack+0x217>
    22f6:	01 ff       	sbrs	r16, 1
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <__stack+0x1ff>
    22fa:	8b e2       	ldi	r24, 0x2B	; 43
    22fc:	01 c0       	rjmp	.+2      	; 0x2300 <__stack+0x201>
    22fe:	80 e2       	ldi	r24, 0x20	; 32
    2300:	f7 fc       	sbrc	r15, 7
    2302:	8d e2       	ldi	r24, 0x2D	; 45
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	b3 01       	movw	r22, r6
    2308:	bc dd       	rcall	.-1160   	; 0x1e82 <fputc>
    230a:	05 c0       	rjmp	.+10     	; 0x2316 <__stack+0x217>
    230c:	80 e3       	ldi	r24, 0x30	; 48
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	b3 01       	movw	r22, r6
    2312:	b7 dd       	rcall	.-1170   	; 0x1e82 <fputc>
    2314:	9a 94       	dec	r9
    2316:	d9 14       	cp	r13, r9
    2318:	c8 f3       	brcs	.-14     	; 0x230c <__stack+0x20d>
    231a:	da 94       	dec	r13
    231c:	f1 01       	movw	r30, r2
    231e:	ed 0d       	add	r30, r13
    2320:	f1 1d       	adc	r31, r1
    2322:	80 81       	ld	r24, Z
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	b3 01       	movw	r22, r6
    2328:	ac dd       	rcall	.-1192   	; 0x1e82 <fputc>
    232a:	dd 20       	and	r13, r13
    232c:	b1 f7       	brne	.-20     	; 0x231a <__stack+0x21b>
    232e:	05 c0       	rjmp	.+10     	; 0x233a <__stack+0x23b>
    2330:	80 e2       	ldi	r24, 0x20	; 32
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	b3 01       	movw	r22, r6
    2336:	a5 dd       	rcall	.-1206   	; 0x1e82 <fputc>
    2338:	ea 94       	dec	r14
    233a:	ee 20       	and	r14, r14
    233c:	c9 f7       	brne	.-14     	; 0x2330 <__stack+0x231>
    233e:	50 ce       	rjmp	.-864    	; 0x1fe0 <vfprintf+0x58>
    2340:	f3 01       	movw	r30, r6
    2342:	66 81       	ldd	r22, Z+6	; 0x06
    2344:	77 81       	ldd	r23, Z+7	; 0x07
    2346:	cb 01       	movw	r24, r22
    2348:	2b 96       	adiw	r28, 0x0b	; 11
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	cf 91       	pop	r28
    2356:	df 91       	pop	r29
    2358:	1f 91       	pop	r17
    235a:	0f 91       	pop	r16
    235c:	ff 90       	pop	r15
    235e:	ef 90       	pop	r14
    2360:	df 90       	pop	r13
    2362:	cf 90       	pop	r12
    2364:	bf 90       	pop	r11
    2366:	af 90       	pop	r10
    2368:	9f 90       	pop	r9
    236a:	8f 90       	pop	r8
    236c:	7f 90       	pop	r7
    236e:	6f 90       	pop	r6
    2370:	5f 90       	pop	r5
    2372:	4f 90       	pop	r4
    2374:	3f 90       	pop	r3
    2376:	2f 90       	pop	r2
    2378:	08 95       	ret

0000237a <__ctype_isfalse>:
    237a:	99 27       	eor	r25, r25
    237c:	88 27       	eor	r24, r24

0000237e <__ctype_istrue>:
    237e:	08 95       	ret

00002380 <strnlen_P>:
    2380:	fc 01       	movw	r30, r24
    2382:	05 90       	lpm	r0, Z+
    2384:	61 50       	subi	r22, 0x01	; 1
    2386:	70 40       	sbci	r23, 0x00	; 0
    2388:	01 10       	cpse	r0, r1
    238a:	d8 f7       	brcc	.-10     	; 0x2382 <strnlen_P+0x2>
    238c:	80 95       	com	r24
    238e:	90 95       	com	r25
    2390:	8e 0f       	add	r24, r30
    2392:	9f 1f       	adc	r25, r31
    2394:	08 95       	ret

00002396 <strnlen>:
    2396:	fc 01       	movw	r30, r24
    2398:	61 50       	subi	r22, 0x01	; 1
    239a:	70 40       	sbci	r23, 0x00	; 0
    239c:	01 90       	ld	r0, Z+
    239e:	01 10       	cpse	r0, r1
    23a0:	d8 f7       	brcc	.-10     	; 0x2398 <strnlen+0x2>
    23a2:	80 95       	com	r24
    23a4:	90 95       	com	r25
    23a6:	8e 0f       	add	r24, r30
    23a8:	9f 1f       	adc	r25, r31
    23aa:	08 95       	ret

000023ac <__ultoa_invert>:
    23ac:	fa 01       	movw	r30, r20
    23ae:	aa 27       	eor	r26, r26
    23b0:	28 30       	cpi	r18, 0x08	; 8
    23b2:	51 f1       	breq	.+84     	; 0x2408 <__ultoa_invert+0x5c>
    23b4:	20 31       	cpi	r18, 0x10	; 16
    23b6:	81 f1       	breq	.+96     	; 0x2418 <__ultoa_invert+0x6c>
    23b8:	e8 94       	clt
    23ba:	6f 93       	push	r22
    23bc:	6e 7f       	andi	r22, 0xFE	; 254
    23be:	6e 5f       	subi	r22, 0xFE	; 254
    23c0:	7f 4f       	sbci	r23, 0xFF	; 255
    23c2:	8f 4f       	sbci	r24, 0xFF	; 255
    23c4:	9f 4f       	sbci	r25, 0xFF	; 255
    23c6:	af 4f       	sbci	r26, 0xFF	; 255
    23c8:	b1 e0       	ldi	r27, 0x01	; 1
    23ca:	3e d0       	rcall	.+124    	; 0x2448 <__ultoa_invert+0x9c>
    23cc:	b4 e0       	ldi	r27, 0x04	; 4
    23ce:	3c d0       	rcall	.+120    	; 0x2448 <__ultoa_invert+0x9c>
    23d0:	67 0f       	add	r22, r23
    23d2:	78 1f       	adc	r23, r24
    23d4:	89 1f       	adc	r24, r25
    23d6:	9a 1f       	adc	r25, r26
    23d8:	a1 1d       	adc	r26, r1
    23da:	68 0f       	add	r22, r24
    23dc:	79 1f       	adc	r23, r25
    23de:	8a 1f       	adc	r24, r26
    23e0:	91 1d       	adc	r25, r1
    23e2:	a1 1d       	adc	r26, r1
    23e4:	6a 0f       	add	r22, r26
    23e6:	71 1d       	adc	r23, r1
    23e8:	81 1d       	adc	r24, r1
    23ea:	91 1d       	adc	r25, r1
    23ec:	a1 1d       	adc	r26, r1
    23ee:	20 d0       	rcall	.+64     	; 0x2430 <__ultoa_invert+0x84>
    23f0:	09 f4       	brne	.+2      	; 0x23f4 <__ultoa_invert+0x48>
    23f2:	68 94       	set
    23f4:	3f 91       	pop	r19
    23f6:	2a e0       	ldi	r18, 0x0A	; 10
    23f8:	26 9f       	mul	r18, r22
    23fa:	11 24       	eor	r1, r1
    23fc:	30 19       	sub	r19, r0
    23fe:	30 5d       	subi	r19, 0xD0	; 208
    2400:	31 93       	st	Z+, r19
    2402:	de f6       	brtc	.-74     	; 0x23ba <__ultoa_invert+0xe>
    2404:	cf 01       	movw	r24, r30
    2406:	08 95       	ret
    2408:	46 2f       	mov	r20, r22
    240a:	47 70       	andi	r20, 0x07	; 7
    240c:	40 5d       	subi	r20, 0xD0	; 208
    240e:	41 93       	st	Z+, r20
    2410:	b3 e0       	ldi	r27, 0x03	; 3
    2412:	0f d0       	rcall	.+30     	; 0x2432 <__ultoa_invert+0x86>
    2414:	c9 f7       	brne	.-14     	; 0x2408 <__ultoa_invert+0x5c>
    2416:	f6 cf       	rjmp	.-20     	; 0x2404 <__ultoa_invert+0x58>
    2418:	46 2f       	mov	r20, r22
    241a:	4f 70       	andi	r20, 0x0F	; 15
    241c:	40 5d       	subi	r20, 0xD0	; 208
    241e:	4a 33       	cpi	r20, 0x3A	; 58
    2420:	18 f0       	brcs	.+6      	; 0x2428 <__ultoa_invert+0x7c>
    2422:	49 5d       	subi	r20, 0xD9	; 217
    2424:	31 fd       	sbrc	r19, 1
    2426:	40 52       	subi	r20, 0x20	; 32
    2428:	41 93       	st	Z+, r20
    242a:	02 d0       	rcall	.+4      	; 0x2430 <__ultoa_invert+0x84>
    242c:	a9 f7       	brne	.-22     	; 0x2418 <__ultoa_invert+0x6c>
    242e:	ea cf       	rjmp	.-44     	; 0x2404 <__ultoa_invert+0x58>
    2430:	b4 e0       	ldi	r27, 0x04	; 4
    2432:	a6 95       	lsr	r26
    2434:	97 95       	ror	r25
    2436:	87 95       	ror	r24
    2438:	77 95       	ror	r23
    243a:	67 95       	ror	r22
    243c:	ba 95       	dec	r27
    243e:	c9 f7       	brne	.-14     	; 0x2432 <__ultoa_invert+0x86>
    2440:	00 97       	sbiw	r24, 0x00	; 0
    2442:	61 05       	cpc	r22, r1
    2444:	71 05       	cpc	r23, r1
    2446:	08 95       	ret
    2448:	9b 01       	movw	r18, r22
    244a:	ac 01       	movw	r20, r24
    244c:	0a 2e       	mov	r0, r26
    244e:	06 94       	lsr	r0
    2450:	57 95       	ror	r21
    2452:	47 95       	ror	r20
    2454:	37 95       	ror	r19
    2456:	27 95       	ror	r18
    2458:	ba 95       	dec	r27
    245a:	c9 f7       	brne	.-14     	; 0x244e <__ultoa_invert+0xa2>
    245c:	62 0f       	add	r22, r18
    245e:	73 1f       	adc	r23, r19
    2460:	84 1f       	adc	r24, r20
    2462:	95 1f       	adc	r25, r21
    2464:	a0 1d       	adc	r26, r0
    2466:	08 95       	ret

00002468 <_exit>:
    2468:	f8 94       	cli

0000246a <__stop_program>:
    246a:	ff cf       	rjmp	.-2      	; 0x246a <__stop_program>
