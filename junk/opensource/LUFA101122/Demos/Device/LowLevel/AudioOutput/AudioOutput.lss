
AudioOutput.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000af2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000e  00800100  00800100  00000b66  2**0
                  ALLOC
  2 .stab         000008f4  00000000  00000000  00000b68  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000013d  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000280  00000000  00000000  00001599  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000765  00000000  00000000  00001819  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003dd9  00000000  00000000  00001f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000faf  00000000  00000000  00005d57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003450  00000000  00000000  00006d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a0  00000000  00000000  0000a158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c6c  00000000  00000000  0000a4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ea2  00000000  00000000  0000c164  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  0000e006  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return Endpoint_IsConfigured();
}

void Endpoint_ClearEndpoints(void)
{
   0:	aa c0       	rjmp	.+340    	; 0x156 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
   4:	c5 c0       	rjmp	.+394    	; 0x190 <__bad_interrupt>
   6:	00 00       	nop
   8:	c3 c0       	rjmp	.+390    	; 0x190 <__bad_interrupt>
   a:	00 00       	nop
   c:	c1 c0       	rjmp	.+386    	; 0x190 <__bad_interrupt>
   e:	00 00       	nop
  10:	bf c0       	rjmp	.+382    	; 0x190 <__bad_interrupt>
  12:	00 00       	nop
  14:	bd c0       	rjmp	.+378    	; 0x190 <__bad_interrupt>
  16:	00 00       	nop
  18:	bb c0       	rjmp	.+374    	; 0x190 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b9 c0       	rjmp	.+370    	; 0x190 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b7 c0       	rjmp	.+366    	; 0x190 <__bad_interrupt>
  22:	00 00       	nop
  24:	b5 c0       	rjmp	.+362    	; 0x190 <__bad_interrupt>
  26:	00 00       	nop
  28:	5e c2       	rjmp	.+1212   	; 0x4e6 <__vector_10>
  2a:	00 00       	nop
  2c:	b1 c0       	rjmp	.+354    	; 0x190 <__bad_interrupt>
  2e:	00 00       	nop
  30:	af c0       	rjmp	.+350    	; 0x190 <__bad_interrupt>
  32:	00 00       	nop
  34:	ad c0       	rjmp	.+346    	; 0x190 <__bad_interrupt>
  36:	00 00       	nop
  38:	ab c0       	rjmp	.+342    	; 0x190 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a9 c0       	rjmp	.+338    	; 0x190 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a7 c0       	rjmp	.+334    	; 0x190 <__bad_interrupt>
  42:	00 00       	nop
  44:	a5 c0       	rjmp	.+330    	; 0x190 <__bad_interrupt>
  46:	00 00       	nop
  48:	a3 c0       	rjmp	.+326    	; 0x190 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a1 c0       	rjmp	.+322    	; 0x190 <__bad_interrupt>
  4e:	00 00       	nop
  50:	9f c0       	rjmp	.+318    	; 0x190 <__bad_interrupt>
  52:	00 00       	nop
  54:	c0 c0       	rjmp	.+384    	; 0x1d6 <__vector_21>
  56:	00 00       	nop
  58:	9b c0       	rjmp	.+310    	; 0x190 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	99 c0       	rjmp	.+306    	; 0x190 <__bad_interrupt>
  5e:	00 00       	nop
  60:	97 c0       	rjmp	.+302    	; 0x190 <__bad_interrupt>
  62:	00 00       	nop
  64:	95 c0       	rjmp	.+298    	; 0x190 <__bad_interrupt>
  66:	00 00       	nop
  68:	93 c0       	rjmp	.+294    	; 0x190 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	91 c0       	rjmp	.+290    	; 0x190 <__bad_interrupt>
  6e:	00 00       	nop
  70:	8f c0       	rjmp	.+286    	; 0x190 <__bad_interrupt>
  72:	00 00       	nop
  74:	8d c0       	rjmp	.+282    	; 0x190 <__bad_interrupt>
  76:	00 00       	nop
  78:	8b c0       	rjmp	.+278    	; 0x190 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	89 c0       	rjmp	.+274    	; 0x190 <__bad_interrupt>
  7e:	00 00       	nop
  80:	87 c0       	rjmp	.+270    	; 0x190 <__bad_interrupt>
  82:	00 00       	nop
  84:	85 c0       	rjmp	.+266    	; 0x190 <__bad_interrupt>
  86:	00 00       	nop
  88:	83 c0       	rjmp	.+262    	; 0x190 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	81 c0       	rjmp	.+258    	; 0x190 <__bad_interrupt>
  8e:	00 00       	nop
  90:	7f c0       	rjmp	.+254    	; 0x190 <__bad_interrupt>
  92:	00 00       	nop
  94:	7d c0       	rjmp	.+250    	; 0x190 <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 10 01 00 00 00 08 eb 03 46 20 01 00 01 02     ..........F ....
  a8:	00 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 64 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..d.....2.......
  ba:	00 00 09 24 01 00 01 1e 00 01 01 0c 24 02 01 01     ...$........$...
  ca:	01 00 02 03 00 00 00 09 24 03 02 01 03 00 01 00     ........$.......
  da:	09 04 01 00 00 01 02 00 00 09 04 01 01 01 01 02     ................
  ea:	00 00 07 24 01 01 01 01 00 0b 24 02 01 02 02 10     ...$......$.....
  fa:	01 80 bb 00 09 05 01 0d 00 01 01 00 00 07 25 01     ..............%.
 10a:	00 00 00 00                                         ....

0000010e <LanguageString>:
 10e:	04 03 09 04                                         ....

00000112 <ManufacturerString>:
 112:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
 122:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000012c <ProductString>:
 12c:	28 03 4c 00 55 00 46 00 41 00 20 00 41 00 75 00     (.L.U.F.A. .A.u.
 13c:	64 00 69 00 6f 00 20 00 4f 00 75 00 74 00 20 00     d.i.o. .O.u.t. .
 14c:	44 00 65 00 6d 00 6f 00 00 00                       D.e.m.o...

00000156 <__ctors_end>:
 156:	11 24       	eor	r1, r1
 158:	1f be       	out	0x3f, r1	; 63
 15a:	cf ef       	ldi	r28, 0xFF	; 255
 15c:	d0 e2       	ldi	r29, 0x20	; 32
 15e:	de bf       	out	0x3e, r29	; 62
 160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
 162:	11 e0       	ldi	r17, 0x01	; 1
 164:	a0 e0       	ldi	r26, 0x00	; 0
 166:	b1 e0       	ldi	r27, 0x01	; 1
 168:	e2 ef       	ldi	r30, 0xF2	; 242
 16a:	fa e0       	ldi	r31, 0x0A	; 10
 16c:	00 e0       	ldi	r16, 0x00	; 0
 16e:	0b bf       	out	0x3b, r16	; 59
 170:	02 c0       	rjmp	.+4      	; 0x176 <__do_copy_data+0x14>
 172:	07 90       	elpm	r0, Z+
 174:	0d 92       	st	X+, r0
 176:	a0 30       	cpi	r26, 0x00	; 0
 178:	b1 07       	cpc	r27, r17
 17a:	d9 f7       	brne	.-10     	; 0x172 <__do_copy_data+0x10>

0000017c <__do_clear_bss>:
 17c:	11 e0       	ldi	r17, 0x01	; 1
 17e:	a0 e0       	ldi	r26, 0x00	; 0
 180:	b1 e0       	ldi	r27, 0x01	; 1
 182:	01 c0       	rjmp	.+2      	; 0x186 <.do_clear_bss_start>

00000184 <.do_clear_bss_loop>:
 184:	1d 92       	st	X+, r1

00000186 <.do_clear_bss_start>:
 186:	ae 30       	cpi	r26, 0x0E	; 14
 188:	b1 07       	cpc	r27, r17
 18a:	e1 f7       	brne	.-8      	; 0x184 <.do_clear_bss_loop>
 18c:	df d0       	rcall	.+446    	; 0x34c <main>
 18e:	af c4       	rjmp	.+2398   	; 0xaee <_exit>

00000190 <__bad_interrupt>:
 190:	37 cf       	rjmp	.-402    	; 0x0 <__vectors>

00000192 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 192:	8b b1       	in	r24, 0x0b	; 11
 194:	8f 70       	andi	r24, 0x0F	; 15
 196:	80 6a       	ori	r24, 0xA0	; 160
 198:	8b b9       	out	0x0b, r24	; 11
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	/* Sample reload timer initialization */
	TIMSK0 = (1 << OCIE0A);
 19a:	92 e0       	ldi	r25, 0x02	; 2
 19c:	90 93 6e 00 	sts	0x006E, r25
	OCR0A  = ((F_CPU / 8 / AUDIO_SAMPLE_FREQUENCY) - 1);
 1a0:	83 e1       	ldi	r24, 0x13	; 19
 1a2:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01);  // CTC mode
 1a4:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01);   // Fcpu/8 speed
 1a6:	95 bd       	out	0x25, r25	; 37
	#if defined(AUDIO_OUT_MONO)
	/* Set speaker as output */
	DDRC  |= (1 << 6);
	#elif defined(AUDIO_OUT_STEREO)
	/* Set speakers as outputs */
	DDRC  |= ((1 << 6) | (1 << 5));
 1a8:	87 b1       	in	r24, 0x07	; 7
 1aa:	80 66       	ori	r24, 0x60	; 96
 1ac:	87 b9       	out	0x07, r24	; 7
	DDRC  |= 0xFF;
	#endif

	#if (defined(AUDIO_OUT_MONO) || defined(AUDIO_OUT_STEREO))
	/* PWM speaker timer initialization */
	TCCR3A = ((1 << WGM30) | (1 << COM3A1) | (1 << COM3A0)
 1ae:	81 ef       	ldi	r24, 0xF1	; 241
 1b0:	80 93 90 00 	sts	0x0090, r24
	                       | (1 << COM3B1) | (1 << COM3B0)); // Set on match, clear on TOP
	TCCR3B = ((1 << WGM32) | (1 << CS30));  // Fast 8-Bit PWM, F_CPU speed
 1b4:	89 e0       	ldi	r24, 0x09	; 9
 1b6:	80 93 91 00 	sts	0x0091, r24
	#endif
}
 1ba:	08 95       	ret

000001bc <EVENT_USB_Device_Disconnect>:
 *  the status LEDs, disables the sample update and PWM output timers and stops the USB and Audio management tasks.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Stop the timers */
	TCCR0B = 0;
 1bc:	15 bc       	out	0x25, r1	; 37
	#if (defined(AUDIO_OUT_MONO) || defined(AUDIO_OUT_STEREO))
	TCCR3B = 0;
 1be:	10 92 91 00 	sts	0x0091, r1
	#if defined(AUDIO_OUT_MONO)
	/* Set speaker as input to reduce current draw */
	DDRC  &= ~(1 << 6);
	#elif defined(AUDIO_OUT_STEREO)
	/* Set speakers as inputs to reduce current draw */
	DDRC  &= ~((1 << 6) | (1 << 5));
 1c2:	87 b1       	in	r24, 0x07	; 7
 1c4:	8f 79       	andi	r24, 0x9F	; 159
 1c6:	87 b9       	out	0x07, r24	; 7
	/* Set PORTC low */
	PORTC = 0x00;
	#endif

	/* Indicate streaming audio interface not selected */
	StreamingAudioInterfaceSelected = false;
 1c8:	10 92 00 01 	sts	0x0100, r1
 1cc:	8b b1       	in	r24, 0x0b	; 11
 1ce:	8f 70       	andi	r24, 0x0F	; 15
 1d0:	80 61       	ori	r24, 0x10	; 16
 1d2:	8b b9       	out	0x0b, r24	; 11

	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 1d4:	08 95       	ret

000001d6 <__vector_21>:
	}
}

/** ISR to handle the reloading of the PWM timer with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	2f 93       	push	r18
 1e2:	3f 93       	push	r19
 1e4:	4f 93       	push	r20
 1e6:	5f 93       	push	r21
 1e8:	6f 93       	push	r22
 1ea:	7f 93       	push	r23
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 1f0:	70 91 e9 00 	lds	r23, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 1fa:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the audio stream endpoint */
	Endpoint_SelectEndpoint(AUDIO_STREAM_EPNUM);

	/* Check if the current endpoint can be read from (contains a packet) and the host is sending data */
	if (Endpoint_IsOUTReceived() && StreamingAudioInterfaceSelected)
 1fe:	82 ff       	sbrs	r24, 2
 200:	50 c0       	rjmp	.+160    	; 0x2a2 <__vector_21+0xcc>
 202:	80 91 00 01 	lds	r24, 0x0100
 206:	88 23       	and	r24, r24
 208:	09 f4       	brne	.+2      	; 0x20c <__vector_21+0x36>
 20a:	4b c0       	rjmp	.+150    	; 0x2a2 <__vector_21+0xcc>
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 20c:	80 91 f1 00 	lds	r24, 0x00F1
 210:	28 2f       	mov	r18, r24
				Data.Bytes[1] = UEDATX;
 212:	80 91 f1 00 	lds	r24, 0x00F1
 216:	38 2f       	mov	r19, r24
	{
		/* Retrieve the signed 16-bit left and right audio samples, convert to 8-bit */
		int8_t LeftSample_8Bit   = ((int16_t)Endpoint_Read_Word_LE() >> 8);
 218:	23 2f       	mov	r18, r19
 21a:	33 0f       	add	r19, r19
 21c:	33 0b       	sbc	r19, r19
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
 21e:	40 91 f1 00 	lds	r20, 0x00F1
 222:	84 2f       	mov	r24, r20
				Data.Bytes[1] = UEDATX;
 224:	40 91 f1 00 	lds	r20, 0x00F1
 228:	94 2f       	mov	r25, r20
		int8_t RightSample_8Bit  = ((int16_t)Endpoint_Read_Word_LE() >> 8);

		/* Mix the two channels together to produce a mono, 8-bit sample */
		int8_t MixedSample_8Bit  = (((int16_t)LeftSample_8Bit + (int16_t)RightSample_8Bit) >> 1);
 22a:	33 27       	eor	r19, r19
 22c:	27 fd       	sbrc	r18, 7
 22e:	30 95       	com	r19
 230:	89 2f       	mov	r24, r25
 232:	99 0f       	add	r25, r25
 234:	99 0b       	sbc	r25, r25
 236:	48 2f       	mov	r20, r24
 238:	55 27       	eor	r21, r21
 23a:	47 fd       	sbrc	r20, 7
 23c:	50 95       	com	r21
 23e:	ca 01       	movw	r24, r20
 240:	82 0f       	add	r24, r18
 242:	93 1f       	adc	r25, r19
 244:	95 95       	asr	r25
 246:	87 95       	ror	r24
 248:	68 2f       	mov	r22, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 24a:	80 91 e8 00 	lds	r24, 0x00E8

		/* Check to see if the bank is now empty */
		if (!(Endpoint_IsReadWriteAllowed()))
 24e:	85 fd       	sbrc	r24, 5
 250:	05 c0       	rjmp	.+10     	; 0x25c <__vector_21+0x86>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 252:	80 91 e8 00 	lds	r24, 0x00E8
 256:	8b 77       	andi	r24, 0x7B	; 123
 258:	80 93 e8 00 	sts	0x00E8, r24
		#if defined(AUDIO_OUT_MONO)
		/* Load the sample into the PWM timer channel */
		OCR3A = (MixedSample_8Bit ^ (1 << 7));
		#elif defined(AUDIO_OUT_STEREO)
		/* Load the dual 8-bit samples into the PWM timer channels */
		OCR3A = (LeftSample_8Bit  ^ (1 << 7));
 25c:	80 e8       	ldi	r24, 0x80	; 128
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	28 27       	eor	r18, r24
 262:	39 27       	eor	r19, r25
 264:	30 93 99 00 	sts	0x0099, r19
 268:	20 93 98 00 	sts	0x0098, r18
		OCR3B = (RightSample_8Bit ^ (1 << 7));
 26c:	48 27       	eor	r20, r24
 26e:	59 27       	eor	r21, r25
 270:	50 93 9b 00 	sts	0x009B, r21
 274:	40 93 9a 00 	sts	0x009A, r20
		#endif

		uint8_t LEDMask = LEDS_NO_LEDS;

		/* Turn on LEDs as the sample amplitude increases */
		if (MixedSample_8Bit > 16)
 278:	61 31       	cpi	r22, 0x11	; 17
 27a:	14 f0       	brlt	.+4      	; 0x280 <__vector_21+0xaa>
 27c:	90 ef       	ldi	r25, 0xF0	; 240
 27e:	0d c0       	rjmp	.+26     	; 0x29a <__vector_21+0xc4>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3 | LEDS_LED4);
		else if (MixedSample_8Bit > 8)
 280:	69 30       	cpi	r22, 0x09	; 9
 282:	14 f0       	brlt	.+4      	; 0x288 <__vector_21+0xb2>
 284:	90 eb       	ldi	r25, 0xB0	; 176
 286:	09 c0       	rjmp	.+18     	; 0x29a <__vector_21+0xc4>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3);
		else if (MixedSample_8Bit > 4)
 288:	65 30       	cpi	r22, 0x05	; 5
 28a:	14 f0       	brlt	.+4      	; 0x290 <__vector_21+0xba>
 28c:	90 e3       	ldi	r25, 0x30	; 48
 28e:	05 c0       	rjmp	.+10     	; 0x29a <__vector_21+0xc4>
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
		else if (MixedSample_8Bit > 2)
 290:	63 30       	cpi	r22, 0x03	; 3
 292:	14 f0       	brlt	.+4      	; 0x298 <__vector_21+0xc2>
 294:	90 e1       	ldi	r25, 0x10	; 16
 296:	01 c0       	rjmp	.+2      	; 0x29a <__vector_21+0xc4>
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	8b b1       	in	r24, 0x0b	; 11
 29c:	8f 70       	andi	r24, 0x0F	; 15
 29e:	98 2b       	or	r25, r24
 2a0:	9b b9       	out	0x0b, r25	; 11
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 2a2:	77 70       	andi	r23, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 2a4:	70 93 e9 00 	sts	0x00E9, r23

		LEDs_SetAllLEDs(LEDMask);
	}
	
	Endpoint_SelectEndpoint(PrevEndpoint);
}
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	7f 91       	pop	r23
 2ae:	6f 91       	pop	r22
 2b0:	5f 91       	pop	r21
 2b2:	4f 91       	pop	r20
 2b4:	3f 91       	pop	r19
 2b6:	2f 91       	pop	r18
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 2c2:	1f 93       	push	r17
	/* Process General and Audio specific control requests */
	switch (USB_ControlRequest.bRequest)
 2c4:	80 91 07 01 	lds	r24, 0x0107
 2c8:	8b 30       	cpi	r24, 0x0B	; 11
 2ca:	a1 f4       	brne	.+40     	; 0x2f4 <EVENT_USB_Device_ControlRequest+0x32>
	{
		case REQ_SetInterface:
			/* Set Interface is not handled by the library, as its function is application-specific */
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_INTERFACE))
 2cc:	10 91 06 01 	lds	r17, 0x0106
 2d0:	11 30       	cpi	r17, 0x01	; 1
 2d2:	81 f4       	brne	.+32     	; 0x2f4 <EVENT_USB_Device_ControlRequest+0x32>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 2d4:	80 91 e8 00 	lds	r24, 0x00E8
 2d8:	87 7f       	andi	r24, 0xF7	; 247
 2da:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 2de:	7f d0       	rcall	.+254    	; 0x3de <Endpoint_ClearStatusStage>

				/* Check if the host is enabling the audio interface (setting AlternateSetting to 1) */
				StreamingAudioInterfaceSelected = ((USB_ControlRequest.wValue) != 0);
 2e0:	10 92 00 01 	sts	0x0100, r1
 2e4:	80 91 08 01 	lds	r24, 0x0108
 2e8:	90 91 09 01 	lds	r25, 0x0109
 2ec:	89 2b       	or	r24, r25
 2ee:	11 f0       	breq	.+4      	; 0x2f4 <EVENT_USB_Device_ControlRequest+0x32>
 2f0:	10 93 00 01 	sts	0x0100, r17
			}

			break;
	}
}
 2f4:	1f 91       	pop	r17
 2f6:	08 95       	ret

000002f8 <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	60 e4       	ldi	r22, 0x40	; 64
 2fc:	46 e5       	ldi	r20, 0x56	; 86
 2fe:	5c d0       	rcall	.+184    	; 0x3b8 <Endpoint_ConfigureEndpoint_Prv>
	/* Setup Audio Stream Endpoint */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(AUDIO_STREAM_EPNUM, EP_TYPE_ISOCHRONOUS, ENDPOINT_DIR_OUT,
	                                            AUDIO_STREAM_EPSIZE, ENDPOINT_BANK_DOUBLE);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 300:	80 fd       	sbrc	r24, 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <EVENT_USB_Device_ConfigurationChanged+0x10>
 304:	90 e9       	ldi	r25, 0x90	; 144
 306:	01 c0       	rjmp	.+2      	; 0x30a <EVENT_USB_Device_ConfigurationChanged+0x12>
 308:	90 e6       	ldi	r25, 0x60	; 96
 30a:	8b b1       	in	r24, 0x0b	; 11
 30c:	8f 70       	andi	r24, 0x0F	; 15
 30e:	98 2b       	or	r25, r24
 310:	9b b9       	out	0x0b, r25	; 11
}
 312:	08 95       	ret

00000314 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 314:	84 b7       	in	r24, 0x34	; 52
 316:	87 7f       	andi	r24, 0xF7	; 247
 318:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 31a:	88 e1       	ldi	r24, 0x18	; 24
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	f8 94       	cli
 320:	80 93 60 00 	sts	0x0060, r24
 324:	10 92 60 00 	sts	0x0060, r1
 328:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	20 e8       	ldi	r18, 0x80	; 128
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	f8 94       	cli
 334:	20 93 61 00 	sts	0x0061, r18
 338:	80 93 61 00 	sts	0x0061, r24
 33c:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 33e:	8a b1       	in	r24, 0x0a	; 10
 340:	80 6f       	ori	r24, 0xF0	; 240
 342:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 344:	8b b1       	in	r24, 0x0b	; 11
 346:	8f 70       	andi	r24, 0x0F	; 15
 348:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
}
 34a:	b7 c0       	rjmp	.+366    	; 0x4ba <USB_Init>

0000034c <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 34c:	e3 df       	rcall	.-58     	; 0x314 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 34e:	8b b1       	in	r24, 0x0b	; 11
 350:	8f 70       	andi	r24, 0x0F	; 15
 352:	80 61       	ori	r24, 0x10	; 16
 354:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
 356:	78 94       	sei

	for (;;)
	{
		USB_USBTask();
 358:	b7 d3       	rcall	.+1902   	; 0xac8 <USB_USBTask>
 35a:	fe cf       	rjmp	.-4      	; 0x358 <main+0xc>

0000035c <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 35c:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 35e:	92 30       	cpi	r25, 0x02	; 2
 360:	49 f0       	breq	.+18     	; 0x374 <CALLBACK_USB_GetDescriptor+0x18>
 362:	93 30       	cpi	r25, 0x03	; 3
 364:	61 f0       	breq	.+24     	; 0x37e <CALLBACK_USB_GetDescriptor+0x22>
 366:	91 30       	cpi	r25, 0x01	; 1
 368:	f9 f4       	brne	.+62     	; 0x3a8 <CALLBACK_USB_GetDescriptor+0x4c>
 36a:	e8 e9       	ldi	r30, 0x98	; 152
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	22 e1       	ldi	r18, 0x12	; 18
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	1e c0       	rjmp	.+60     	; 0x3b0 <CALLBACK_USB_GetDescriptor+0x54>
 374:	ea ea       	ldi	r30, 0xAA	; 170
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	24 e6       	ldi	r18, 0x64	; 100
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	19 c0       	rjmp	.+50     	; 0x3b0 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	49 f0       	breq	.+18     	; 0x394 <CALLBACK_USB_GetDescriptor+0x38>
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	18 f0       	brcs	.+6      	; 0x38c <CALLBACK_USB_GetDescriptor+0x30>
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	79 f4       	brne	.+30     	; 0x3a8 <CALLBACK_USB_GetDescriptor+0x4c>
 38a:	08 c0       	rjmp	.+16     	; 0x39c <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 38c:	ee e0       	ldi	r30, 0x0E	; 14
 38e:	f1 e0       	ldi	r31, 0x01	; 1
 390:	84 91       	lpm	r24, Z+
 392:	07 c0       	rjmp	.+14     	; 0x3a2 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 394:	e2 e1       	ldi	r30, 0x12	; 18
 396:	f1 e0       	ldi	r31, 0x01	; 1
 398:	84 91       	lpm	r24, Z+
 39a:	03 c0       	rjmp	.+6      	; 0x3a2 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 39c:	ec e2       	ldi	r30, 0x2C	; 44
 39e:	f1 e0       	ldi	r31, 0x01	; 1
 3a0:	84 91       	lpm	r24, Z+
 3a2:	28 2f       	mov	r18, r24
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	04 c0       	rjmp	.+8      	; 0x3b0 <CALLBACK_USB_GetDescriptor+0x54>
 3a8:	e0 e0       	ldi	r30, 0x00	; 0
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 3b0:	ed 93       	st	X+, r30
 3b2:	fc 93       	st	X, r31
	return Size;
}
 3b4:	c9 01       	movw	r24, r18
 3b6:	08 95       	ret

000003b8 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 3b8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 3bc:	80 91 eb 00 	lds	r24, 0x00EB
 3c0:	81 60       	ori	r24, 0x01	; 1
 3c2:	80 93 eb 00 	sts	0x00EB, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
 3c6:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
 3ca:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
 3ce:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 3d2:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
 3d6:	88 1f       	adc	r24, r24
 3d8:	88 27       	eor	r24, r24
 3da:	88 1f       	adc	r24, r24
 3dc:	08 95       	ret

000003de <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 3de:	80 91 06 01 	lds	r24, 0x0106
 3e2:	88 23       	and	r24, r24
 3e4:	9c f4       	brge	.+38     	; 0x40c <Endpoint_ClearStatusStage+0x2e>
 3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 3e8:	80 91 05 01 	lds	r24, 0x0105
 3ec:	88 23       	and	r24, r24
 3ee:	b9 f0       	breq	.+46     	; 0x41e <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3f0:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 3f4:	82 ff       	sbrs	r24, 2
 3f6:	f8 cf       	rjmp	.-16     	; 0x3e8 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 3f8:	80 91 e8 00 	lds	r24, 0x00E8
 3fc:	8b 77       	andi	r24, 0x7B	; 123
 3fe:	80 93 e8 00 	sts	0x00E8, r24
 402:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 404:	80 91 05 01 	lds	r24, 0x0105
 408:	88 23       	and	r24, r24
 40a:	49 f0       	breq	.+18     	; 0x41e <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 40c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 410:	80 ff       	sbrs	r24, 0
 412:	f8 cf       	rjmp	.-16     	; 0x404 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 414:	80 91 e8 00 	lds	r24, 0x00E8
 418:	8e 77       	andi	r24, 0x7E	; 126
 41a:	80 93 e8 00 	sts	0x00E8, r24
 41e:	08 95       	ret

00000420 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 420:	55 d0       	rcall	.+170    	; 0x4cc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 422:	5c d0       	rcall	.+184    	; 0x4dc <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 424:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
 428:	98 2f       	mov	r25, r24
 42a:	9f 77       	andi	r25, 0x7F	; 127
 42c:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
 430:	80 68       	ori	r24, 0x80	; 128
 432:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 436:	8c e0       	ldi	r24, 0x0C	; 12
 438:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 43a:	89 b5       	in	r24, 0x29	; 41
 43c:	82 60       	ori	r24, 0x02	; 2
 43e:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
 440:	09 b4       	in	r0, 0x29	; 41
 442:	00 fe       	sbrs	r0, 0
 444:	fd cf       	rjmp	.-6      	; 0x440 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 446:	80 91 d8 00 	lds	r24, 0x00D8
 44a:	8f 7d       	andi	r24, 0xDF	; 223
 44c:	80 93 d8 00 	sts	0x00D8, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 450:	80 91 d7 00 	lds	r24, 0x00D7
 454:	80 68       	ori	r24, 0x80	; 128
 456:	80 93 d7 00 	sts	0x00D7, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
 45a:	10 92 05 01 	sts	0x0105, r1
	USB_ConfigurationNumber  = 0;
 45e:	10 92 03 01 	sts	0x0103, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
 462:	10 92 02 01 	sts	0x0102, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
 466:	10 92 01 01 	sts	0x0101, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 46a:	80 91 e0 00 	lds	r24, 0x00E0
 46e:	8b 7f       	andi	r24, 0xFB	; 251
 470:	80 93 e0 00 	sts	0x00E0, r24
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  USB_Device_SetLowSpeed();
	else
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUS);
 474:	80 91 d8 00 	lds	r24, 0x00D8
 478:	81 60       	ori	r24, 0x01	; 1
 47a:	80 93 d8 00 	sts	0x00D8, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	42 e0       	ldi	r20, 0x02	; 2
 484:	99 df       	rcall	.-206    	; 0x3b8 <Endpoint_ConfigureEndpoint_Prv>

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
							   ENDPOINT_BANK_SINGLE);

	USB_INT_Clear(USB_INT_SUSPI);
 486:	80 91 e1 00 	lds	r24, 0x00E1
 48a:	8e 7f       	andi	r24, 0xFE	; 254
 48c:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPI);
 490:	80 91 e2 00 	lds	r24, 0x00E2
 494:	81 60       	ori	r24, 0x01	; 1
 496:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Enable(USB_INT_EORSTI);
 49a:	80 91 e2 00 	lds	r24, 0x00E2
 49e:	88 60       	ori	r24, 0x08	; 8
 4a0:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 4a4:	80 91 e0 00 	lds	r24, 0x00E0
 4a8:	8e 7f       	andi	r24, 0xFE	; 254
 4aa:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 4ae:	80 91 d8 00 	lds	r24, 0x00D8
 4b2:	80 61       	ori	r24, 0x10	; 16
 4b4:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 4b8:	08 95       	ret

000004ba <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 4ba:	e7 ed       	ldi	r30, 0xD7	; 215
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	80 81       	ld	r24, Z
 4c0:	81 60       	ori	r24, 0x01	; 1
 4c2:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	80 93 04 01 	sts	0x0104, r24

	USB_ResetInterface();
}
 4ca:	aa cf       	rjmp	.-172    	; 0x420 <USB_ResetInterface>

000004cc <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 4cc:	e8 ed       	ldi	r30, 0xD8	; 216
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	80 81       	ld	r24, Z
 4d2:	8c 7f       	andi	r24, 0xFC	; 252
 4d4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 4d6:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 4da:	08 95       	ret

000004dc <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
 4dc:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
 4e0:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 4e4:	08 95       	ret

000004e6 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 4e6:	1f 92       	push	r1
 4e8:	0f 92       	push	r0
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	0f 92       	push	r0
 4ee:	0b b6       	in	r0, 0x3b	; 59
 4f0:	0f 92       	push	r0
 4f2:	11 24       	eor	r1, r1
 4f4:	2f 93       	push	r18
 4f6:	3f 93       	push	r19
 4f8:	4f 93       	push	r20
 4fa:	5f 93       	push	r21
 4fc:	6f 93       	push	r22
 4fe:	7f 93       	push	r23
 500:	8f 93       	push	r24
 502:	9f 93       	push	r25
 504:	af 93       	push	r26
 506:	bf 93       	push	r27
 508:	ef 93       	push	r30
 50a:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
 50c:	80 91 da 00 	lds	r24, 0x00DA
 510:	80 ff       	sbrs	r24, 0
 512:	15 c0       	rjmp	.+42     	; 0x53e <__vector_10+0x58>
 514:	80 91 d8 00 	lds	r24, 0x00D8
 518:	80 ff       	sbrs	r24, 0
 51a:	11 c0       	rjmp	.+34     	; 0x53e <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_VBUS);
 51c:	80 91 da 00 	lds	r24, 0x00DA
 520:	8e 7f       	andi	r24, 0xFE	; 254
 522:	80 93 da 00 	sts	0x00DA, r24
				 *  \note This function is not available on some AVR models which do not support hardware VBUS monitoring.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 526:	80 91 d9 00 	lds	r24, 0x00D9

		if (USB_VBUS_GetStatus())
 52a:	80 ff       	sbrs	r24, 0
 52c:	05 c0       	rjmp	.+10     	; 0x538 <__vector_10+0x52>
		{
			USB_DeviceState = DEVICE_STATE_Powered;
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	80 93 05 01 	sts	0x0105, r24
			EVENT_USB_Device_Connect();
 534:	2e de       	rcall	.-932    	; 0x192 <EVENT_USB_Device_Connect>
 536:	03 c0       	rjmp	.+6      	; 0x53e <__vector_10+0x58>
		}
		else
		{
			USB_DeviceState = DEVICE_STATE_Unattached;
 538:	10 92 05 01 	sts	0x0105, r1
			EVENT_USB_Device_Disconnect();
 53c:	3f de       	rcall	.-898    	; 0x1bc <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 53e:	80 91 e1 00 	lds	r24, 0x00E1
 542:	80 ff       	sbrs	r24, 0
 544:	1d c0       	rjmp	.+58     	; 0x580 <__vector_10+0x9a>
 546:	80 91 e2 00 	lds	r24, 0x00E2
 54a:	80 ff       	sbrs	r24, 0
 54c:	19 c0       	rjmp	.+50     	; 0x580 <__vector_10+0x9a>
	{
		USB_INT_Clear(USB_INT_SUSPI);
 54e:	80 91 e1 00 	lds	r24, 0x00E1
 552:	8e 7f       	andi	r24, 0xFE	; 254
 554:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPI);
 558:	80 91 e2 00 	lds	r24, 0x00E2
 55c:	8e 7f       	andi	r24, 0xFE	; 254
 55e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
 562:	80 91 e2 00 	lds	r24, 0x00E2
 566:	80 61       	ori	r24, 0x10	; 16
 568:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 56c:	80 91 d8 00 	lds	r24, 0x00D8
 570:	80 62       	ori	r24, 0x20	; 32
 572:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 576:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 578:	85 e0       	ldi	r24, 0x05	; 5
 57a:	80 93 05 01 	sts	0x0105, r24
		EVENT_USB_Device_Suspend();
 57e:	e5 d1       	rcall	.+970    	; 0x94a <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 580:	80 91 e1 00 	lds	r24, 0x00E1
 584:	84 ff       	sbrs	r24, 4
 586:	2e c0       	rjmp	.+92     	; 0x5e4 <__vector_10+0xfe>
 588:	80 91 e2 00 	lds	r24, 0x00E2
 58c:	84 ff       	sbrs	r24, 4
 58e:	2a c0       	rjmp	.+84     	; 0x5e4 <__vector_10+0xfe>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 590:	8c e0       	ldi	r24, 0x0C	; 12
 592:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 594:	89 b5       	in	r24, 0x29	; 41
 596:	82 60       	ori	r24, 0x02	; 2
 598:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 59a:	09 b4       	in	r0, 0x29	; 41
 59c:	00 fe       	sbrs	r0, 0
 59e:	fd cf       	rjmp	.-6      	; 0x59a <__vector_10+0xb4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 5a0:	80 91 d8 00 	lds	r24, 0x00D8
 5a4:	8f 7d       	andi	r24, 0xDF	; 223
 5a6:	80 93 d8 00 	sts	0x00D8, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUPI);
 5aa:	80 91 e1 00 	lds	r24, 0x00E1
 5ae:	8f 7e       	andi	r24, 0xEF	; 239
 5b0:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUPI);
 5b4:	80 91 e2 00 	lds	r24, 0x00E2
 5b8:	8f 7e       	andi	r24, 0xEF	; 239
 5ba:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPI);
 5be:	80 91 e2 00 	lds	r24, 0x00E2
 5c2:	81 60       	ori	r24, 0x01	; 1
 5c4:	80 93 e2 00 	sts	0x00E2, r24

		if (USB_ConfigurationNumber)
 5c8:	80 91 03 01 	lds	r24, 0x0103
 5cc:	88 23       	and	r24, r24
 5ce:	31 f4       	brne	.+12     	; 0x5dc <__vector_10+0xf6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 5d0:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 5d4:	87 fd       	sbrc	r24, 7
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <__vector_10+0xf6>
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	01 c0       	rjmp	.+2      	; 0x5de <__vector_10+0xf8>
 5dc:	84 e0       	ldi	r24, 0x04	; 4
 5de:	80 93 05 01 	sts	0x0105, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 5e2:	b3 d1       	rcall	.+870    	; 0x94a <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 5e4:	80 91 e1 00 	lds	r24, 0x00E1
 5e8:	83 ff       	sbrs	r24, 3
 5ea:	22 c0       	rjmp	.+68     	; 0x630 <__vector_10+0x14a>
 5ec:	80 91 e2 00 	lds	r24, 0x00E2
 5f0:	83 ff       	sbrs	r24, 3
 5f2:	1e c0       	rjmp	.+60     	; 0x630 <__vector_10+0x14a>
	{
		USB_INT_Clear(USB_INT_EORSTI);
 5f4:	80 91 e1 00 	lds	r24, 0x00E1
 5f8:	87 7f       	andi	r24, 0xF7	; 247
 5fa:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
 5fe:	82 e0       	ldi	r24, 0x02	; 2
 600:	80 93 05 01 	sts	0x0105, r24
		USB_ConfigurationNumber = 0;
 604:	10 92 03 01 	sts	0x0103, r1

		USB_INT_Clear(USB_INT_SUSPI);
 608:	80 91 e1 00 	lds	r24, 0x00E1
 60c:	8e 7f       	andi	r24, 0xFE	; 254
 60e:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPI);
 612:	80 91 e2 00 	lds	r24, 0x00E2
 616:	8e 7f       	andi	r24, 0xFE	; 254
 618:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
 61c:	80 91 e2 00 	lds	r24, 0x00E2
 620:	80 61       	ori	r24, 0x10	; 16
 622:	80 93 e2 00 	sts	0x00E2, r24
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	60 e0       	ldi	r22, 0x00	; 0
 62a:	42 e0       	ldi	r20, 0x02	; 2
 62c:	c5 de       	rcall	.-630    	; 0x3b8 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 62e:	8d d1       	rcall	.+794    	; 0x94a <USB_Event_Stub>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 630:	80 91 e1 00 	lds	r24, 0x00E1
 634:	82 ff       	sbrs	r24, 2
 636:	0a c0       	rjmp	.+20     	; 0x64c <__vector_10+0x166>
 638:	80 91 e2 00 	lds	r24, 0x00E2
 63c:	82 ff       	sbrs	r24, 2
 63e:	06 c0       	rjmp	.+12     	; 0x64c <__vector_10+0x166>
	{
		USB_INT_Clear(USB_INT_SOFI);
 640:	80 91 e1 00 	lds	r24, 0x00E1
 644:	8b 7f       	andi	r24, 0xFB	; 251
 646:	80 93 e1 00 	sts	0x00E1, r24

		EVENT_USB_Device_StartOfFrame();
 64a:	7f d1       	rcall	.+766    	; 0x94a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 64c:	ff 91       	pop	r31
 64e:	ef 91       	pop	r30
 650:	bf 91       	pop	r27
 652:	af 91       	pop	r26
 654:	9f 91       	pop	r25
 656:	8f 91       	pop	r24
 658:	7f 91       	pop	r23
 65a:	6f 91       	pop	r22
 65c:	5f 91       	pop	r21
 65e:	4f 91       	pop	r20
 660:	3f 91       	pop	r19
 662:	2f 91       	pop	r18
 664:	0f 90       	pop	r0
 666:	0b be       	out	0x3b, r0	; 59
 668:	0f 90       	pop	r0
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	0f 90       	pop	r0
 66e:	1f 90       	pop	r1
 670:	18 95       	reti

00000672 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 672:	0f 93       	push	r16
 674:	1f 93       	push	r17
 676:	df 93       	push	r29
 678:	cf 93       	push	r28
 67a:	cd b7       	in	r28, 0x3d	; 61
 67c:	de b7       	in	r29, 0x3e	; 62
 67e:	ac 97       	sbiw	r28, 0x2c	; 44
 680:	0f b6       	in	r0, 0x3f	; 63
 682:	f8 94       	cli
 684:	de bf       	out	0x3e, r29	; 62
 686:	0f be       	out	0x3f, r0	; 63
 688:	cd bf       	out	0x3d, r28	; 61
 68a:	e6 e0       	ldi	r30, 0x06	; 6
 68c:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 68e:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
 692:	81 93       	st	Z+, r24

void USB_Device_ProcessControlRequest(void)
{
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 694:	21 e0       	ldi	r18, 0x01	; 1
 696:	ee 30       	cpi	r30, 0x0E	; 14
 698:	f2 07       	cpc	r31, r18
 69a:	c9 f7       	brne	.-14     	; 0x68e <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_Byte();

	EVENT_USB_Device_ControlRequest();
 69c:	12 de       	rcall	.-988    	; 0x2c2 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 69e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 6a2:	83 ff       	sbrs	r24, 3
 6a4:	39 c1       	rjmp	.+626    	; 0x918 <USB_Device_ProcessControlRequest+0x2a6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 6a6:	80 91 06 01 	lds	r24, 0x0106

		switch (USB_ControlRequest.bRequest)
 6aa:	30 91 07 01 	lds	r19, 0x0107
 6ae:	35 30       	cpi	r19, 0x05	; 5
 6b0:	09 f4       	brne	.+2      	; 0x6b4 <USB_Device_ProcessControlRequest+0x42>
 6b2:	87 c0       	rjmp	.+270    	; 0x7c2 <USB_Device_ProcessControlRequest+0x150>
 6b4:	36 30       	cpi	r19, 0x06	; 6
 6b6:	40 f4       	brcc	.+16     	; 0x6c8 <USB_Device_ProcessControlRequest+0x56>
 6b8:	31 30       	cpi	r19, 0x01	; 1
 6ba:	c9 f1       	breq	.+114    	; 0x72e <USB_Device_ProcessControlRequest+0xbc>
 6bc:	31 30       	cpi	r19, 0x01	; 1
 6be:	70 f0       	brcs	.+28     	; 0x6dc <USB_Device_ProcessControlRequest+0x6a>
 6c0:	33 30       	cpi	r19, 0x03	; 3
 6c2:	09 f0       	breq	.+2      	; 0x6c6 <USB_Device_ProcessControlRequest+0x54>
 6c4:	29 c1       	rjmp	.+594    	; 0x918 <USB_Device_ProcessControlRequest+0x2a6>
 6c6:	33 c0       	rjmp	.+102    	; 0x72e <USB_Device_ProcessControlRequest+0xbc>
 6c8:	38 30       	cpi	r19, 0x08	; 8
 6ca:	09 f4       	brne	.+2      	; 0x6ce <USB_Device_ProcessControlRequest+0x5c>
 6cc:	f7 c0       	rjmp	.+494    	; 0x8bc <USB_Device_ProcessControlRequest+0x24a>
 6ce:	39 30       	cpi	r19, 0x09	; 9
 6d0:	09 f4       	brne	.+2      	; 0x6d4 <USB_Device_ProcessControlRequest+0x62>
 6d2:	06 c1       	rjmp	.+524    	; 0x8e0 <USB_Device_ProcessControlRequest+0x26e>
 6d4:	36 30       	cpi	r19, 0x06	; 6
 6d6:	09 f0       	breq	.+2      	; 0x6da <USB_Device_ProcessControlRequest+0x68>
 6d8:	1f c1       	rjmp	.+574    	; 0x918 <USB_Device_ProcessControlRequest+0x2a6>
 6da:	99 c0       	rjmp	.+306    	; 0x80e <USB_Device_ProcessControlRequest+0x19c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 6dc:	80 38       	cpi	r24, 0x80	; 128
 6de:	21 f0       	breq	.+8      	; 0x6e8 <USB_Device_ProcessControlRequest+0x76>
 6e0:	82 38       	cpi	r24, 0x82	; 130
 6e2:	09 f0       	breq	.+2      	; 0x6e6 <USB_Device_ProcessControlRequest+0x74>
 6e4:	19 c1       	rjmp	.+562    	; 0x918 <USB_Device_ProcessControlRequest+0x2a6>
 6e6:	08 c0       	rjmp	.+16     	; 0x6f8 <USB_Device_ProcessControlRequest+0x86>
 6e8:	90 91 01 01 	lds	r25, 0x0101
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
 6ec:	80 91 02 01 	lds	r24, 0x0102
 6f0:	88 23       	and	r24, r24
 6f2:	99 f0       	breq	.+38     	; 0x71a <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 6f4:	92 60       	ori	r25, 0x02	; 2
 6f6:	11 c0       	rjmp	.+34     	; 0x71a <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 6f8:	80 91 0a 01 	lds	r24, 0x010A
 6fc:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 6fe:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 702:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	25 e0       	ldi	r18, 0x05	; 5
 70a:	96 95       	lsr	r25
 70c:	87 95       	ror	r24
 70e:	2a 95       	dec	r18
 710:	e1 f7       	brne	.-8      	; 0x70a <USB_Device_ProcessControlRequest+0x98>
 712:	98 2f       	mov	r25, r24
 714:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 716:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 71a:	80 91 e8 00 	lds	r24, 0x00E8
 71e:	87 7f       	andi	r24, 0xF7	; 247
 720:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
 724:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Word >> 8);
 728:	10 92 f1 00 	sts	0x00F1, r1
 72c:	d2 c0       	rjmp	.+420    	; 0x8d2 <USB_Device_ProcessControlRequest+0x260>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 72e:	88 23       	and	r24, r24
 730:	19 f0       	breq	.+6      	; 0x738 <USB_Device_ProcessControlRequest+0xc6>
 732:	82 30       	cpi	r24, 0x02	; 2
 734:	09 f0       	breq	.+2      	; 0x738 <USB_Device_ProcessControlRequest+0xc6>
 736:	f0 c0       	rjmp	.+480    	; 0x918 <USB_Device_ProcessControlRequest+0x2a6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	8f 71       	andi	r24, 0x1F	; 31
 73c:	90 70       	andi	r25, 0x00	; 0
 73e:	00 97       	sbiw	r24, 0x00	; 0
 740:	21 f0       	breq	.+8      	; 0x74a <USB_Device_ProcessControlRequest+0xd8>
 742:	02 97       	sbiw	r24, 0x02	; 2
 744:	09 f0       	breq	.+2      	; 0x748 <USB_Device_ProcessControlRequest+0xd6>
 746:	e8 c0       	rjmp	.+464    	; 0x918 <USB_Device_ProcessControlRequest+0x2a6>
 748:	0c c0       	rjmp	.+24     	; 0x762 <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 74a:	80 91 08 01 	lds	r24, 0x0108
 74e:	81 30       	cpi	r24, 0x01	; 1
 750:	09 f0       	breq	.+2      	; 0x754 <USB_Device_ProcessControlRequest+0xe2>
 752:	e2 c0       	rjmp	.+452    	; 0x918 <USB_Device_ProcessControlRequest+0x2a6>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 754:	10 92 02 01 	sts	0x0102, r1
 758:	33 30       	cpi	r19, 0x03	; 3
 75a:	69 f5       	brne	.+90     	; 0x7b6 <USB_Device_ProcessControlRequest+0x144>
 75c:	80 93 02 01 	sts	0x0102, r24
 760:	2a c0       	rjmp	.+84     	; 0x7b6 <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 762:	80 91 08 01 	lds	r24, 0x0108
 766:	88 23       	and	r24, r24
 768:	31 f5       	brne	.+76     	; 0x7b6 <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 76a:	20 91 0a 01 	lds	r18, 0x010A
 76e:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 770:	09 f4       	brne	.+2      	; 0x774 <USB_Device_ProcessControlRequest+0x102>
 772:	d2 c0       	rjmp	.+420    	; 0x918 <USB_Device_ProcessControlRequest+0x2a6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 774:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 778:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 77c:	80 ff       	sbrs	r24, 0
 77e:	1b c0       	rjmp	.+54     	; 0x7b6 <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 780:	33 30       	cpi	r19, 0x03	; 3
 782:	21 f4       	brne	.+8      	; 0x78c <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 784:	80 91 eb 00 	lds	r24, 0x00EB
 788:	80 62       	ori	r24, 0x20	; 32
 78a:	13 c0       	rjmp	.+38     	; 0x7b2 <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 78c:	80 91 eb 00 	lds	r24, 0x00EB
 790:	80 61       	ori	r24, 0x10	; 16
 792:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <USB_Device_ProcessControlRequest+0x12e>
 79c:	88 0f       	add	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	2a 95       	dec	r18
 7a2:	e2 f7       	brpl	.-8      	; 0x79c <USB_Device_ProcessControlRequest+0x12a>
 7a4:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 7a8:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 7ac:	80 91 eb 00 	lds	r24, 0x00EB
 7b0:	88 60       	ori	r24, 0x08	; 8
 7b2:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 7b6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 7ba:	80 91 e8 00 	lds	r24, 0x00E8
 7be:	87 7f       	andi	r24, 0xF7	; 247
 7c0:	8b c0       	rjmp	.+278    	; 0x8d8 <USB_Device_ProcessControlRequest+0x266>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 7c2:	88 23       	and	r24, r24
 7c4:	09 f0       	breq	.+2      	; 0x7c8 <USB_Device_ProcessControlRequest+0x156>
 7c6:	a8 c0       	rjmp	.+336    	; 0x918 <USB_Device_ProcessControlRequest+0x2a6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 7c8:	10 91 08 01 	lds	r17, 0x0108
 7cc:	1f 77       	andi	r17, 0x7F	; 127

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 7ce:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 7d0:	f8 94       	cli
 7d2:	80 91 e8 00 	lds	r24, 0x00E8
 7d6:	87 7f       	andi	r24, 0xF7	; 247
 7d8:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearSETUP();

		Endpoint_ClearStatusStage();
 7dc:	00 de       	rcall	.-1024   	; 0x3de <Endpoint_ClearStatusStage>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 7de:	80 91 e8 00 	lds	r24, 0x00E8

		while (!(Endpoint_IsINReady()));
 7e2:	80 ff       	sbrs	r24, 0
 7e4:	fc cf       	rjmp	.-8      	; 0x7de <USB_Device_ProcessControlRequest+0x16c>

		USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 7e6:	11 23       	and	r17, r17
 7e8:	11 f4       	brne	.+4      	; 0x7ee <USB_Device_ProcessControlRequest+0x17c>
 7ea:	82 e0       	ldi	r24, 0x02	; 2
 7ec:	01 c0       	rjmp	.+2      	; 0x7f0 <USB_Device_ProcessControlRequest+0x17e>
 7ee:	83 e0       	ldi	r24, 0x03	; 3
 7f0:	80 93 05 01 	sts	0x0105, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
 7f4:	80 91 e3 00 	lds	r24, 0x00E3
 7f8:	80 78       	andi	r24, 0x80	; 128
 7fa:	18 2b       	or	r17, r24
 7fc:	10 93 e3 00 	sts	0x00E3, r17
				UDADDR |= (1 << ADDEN);
 800:	80 91 e3 00 	lds	r24, 0x00E3
 804:	80 68       	ori	r24, 0x80	; 128
 806:	80 93 e3 00 	sts	0x00E3, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 80a:	0f bf       	out	0x3f, r16	; 63
    __asm__ volatile ("" ::: "memory");
 80c:	85 c0       	rjmp	.+266    	; 0x918 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 80e:	80 58       	subi	r24, 0x80	; 128
 810:	82 30       	cpi	r24, 0x02	; 2
 812:	08 f0       	brcs	.+2      	; 0x816 <USB_Device_ProcessControlRequest+0x1a4>
 814:	81 c0       	rjmp	.+258    	; 0x918 <USB_Device_ProcessControlRequest+0x2a6>
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 816:	80 91 08 01 	lds	r24, 0x0108
 81a:	90 91 09 01 	lds	r25, 0x0109
 81e:	23 e0       	ldi	r18, 0x03	; 3
 820:	8c 3d       	cpi	r24, 0xDC	; 220
 822:	92 07       	cpc	r25, r18
 824:	99 f5       	brne	.+102    	; 0x88c <USB_Device_ProcessControlRequest+0x21a>
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 826:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 828:	f8 94       	cli
 82a:	de 01       	movw	r26, r28
 82c:	15 96       	adiw	r26, 0x05	; 5
 82e:	6e e0       	ldi	r22, 0x0E	; 14
 830:	40 e0       	ldi	r20, 0x00	; 0
 832:	50 e0       	ldi	r21, 0x00	; 0
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 834:	11 e2       	ldi	r17, 0x21	; 33
 836:	e6 2f       	mov	r30, r22
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	10 93 57 00 	sts	0x0057, r17
 83e:	84 91       	lpm	r24, Z+

			if (SerialCharNum & 0x01)
 840:	40 ff       	sbrs	r20, 0
 842:	03 c0       	rjmp	.+6      	; 0x84a <USB_Device_ProcessControlRequest+0x1d8>
			{
				SerialByte >>= 4;
 844:	82 95       	swap	r24
 846:	8f 70       	andi	r24, 0x0F	; 15
				SigReadAddress++;
 848:	6f 5f       	subi	r22, 0xFF	; 255
			}

			SerialByte &= 0x0F;
 84a:	8f 70       	andi	r24, 0x0F	; 15
 84c:	28 2f       	mov	r18, r24
 84e:	30 e0       	ldi	r19, 0x00	; 0

			SignatureDescriptor.UnicodeString[SerialCharNum] = (SerialByte >= 10) ?
 850:	8a 30       	cpi	r24, 0x0A	; 10
 852:	18 f0       	brcs	.+6      	; 0x85a <USB_Device_ProcessControlRequest+0x1e8>
 854:	c9 01       	movw	r24, r18
 856:	c7 96       	adiw	r24, 0x37	; 55
 858:	02 c0       	rjmp	.+4      	; 0x85e <USB_Device_ProcessControlRequest+0x1ec>
 85a:	c9 01       	movw	r24, r18
 85c:	c0 96       	adiw	r24, 0x30	; 48
 85e:	8d 93       	st	X+, r24
 860:	9d 93       	st	X+, r25
 862:	4f 5f       	subi	r20, 0xFF	; 255
 864:	5f 4f       	sbci	r21, 0xFF	; 255

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
 866:	44 31       	cpi	r20, 0x14	; 20
 868:	51 05       	cpc	r21, r1
 86a:	29 f7       	brne	.-54     	; 0x836 <USB_Device_ProcessControlRequest+0x1c4>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 86c:	7f bf       	out	0x3f, r23	; 63
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
 86e:	8a e2       	ldi	r24, 0x2A	; 42
 870:	8b 83       	std	Y+3, r24	; 0x03
	{
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 872:	83 e0       	ldi	r24, 0x03	; 3
 874:	8c 83       	std	Y+4, r24	; 0x04
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 876:	80 91 e8 00 	lds	r24, 0x00E8
 87a:	87 7f       	andi	r24, 0xF7	; 247
 87c:	80 93 e8 00 	sts	0x00E8, r24
		}
	}

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 880:	ce 01       	movw	r24, r28
 882:	03 96       	adiw	r24, 0x03	; 3
 884:	6a e2       	ldi	r22, 0x2A	; 42
 886:	70 e0       	ldi	r23, 0x00	; 0
 888:	61 d0       	rcall	.+194    	; 0x94c <Endpoint_Write_Control_Stream_LE>
 88a:	12 c0       	rjmp	.+36     	; 0x8b0 <USB_Device_ProcessControlRequest+0x23e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 88c:	60 91 0a 01 	lds	r22, 0x010A
 890:	ae 01       	movw	r20, r28
 892:	4f 5f       	subi	r20, 0xFF	; 255
 894:	5f 4f       	sbci	r21, 0xFF	; 255
 896:	62 dd       	rcall	.-1340   	; 0x35c <CALLBACK_USB_GetDescriptor>
 898:	bc 01       	movw	r22, r24
 89a:	00 97       	sbiw	r24, 0x00	; 0
 89c:	09 f4       	brne	.+2      	; 0x8a0 <USB_Device_ProcessControlRequest+0x22e>
 89e:	3c c0       	rjmp	.+120    	; 0x918 <USB_Device_ProcessControlRequest+0x2a6>
 8a0:	80 91 e8 00 	lds	r24, 0x00E8
 8a4:	87 7f       	andi	r24, 0xF7	; 247
 8a6:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 8aa:	89 81       	ldd	r24, Y+1	; 0x01
 8ac:	9a 81       	ldd	r25, Y+2	; 0x02
 8ae:	ac d0       	rcall	.+344    	; 0xa08 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 8b0:	80 91 e8 00 	lds	r24, 0x00E8
 8b4:	8b 77       	andi	r24, 0x7B	; 123
 8b6:	80 93 e8 00 	sts	0x00E8, r24
 8ba:	2e c0       	rjmp	.+92     	; 0x918 <USB_Device_ProcessControlRequest+0x2a6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 8bc:	80 38       	cpi	r24, 0x80	; 128
 8be:	61 f5       	brne	.+88     	; 0x918 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 8c0:	80 91 e8 00 	lds	r24, 0x00E8
 8c4:	87 7f       	andi	r24, 0xF7	; 247
 8c6:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
 8ca:	80 91 03 01 	lds	r24, 0x0103
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 8ce:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8d2:	80 91 e8 00 	lds	r24, 0x00E8
 8d6:	8e 77       	andi	r24, 0x7E	; 126
 8d8:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 8dc:	80 dd       	rcall	.-1280   	; 0x3de <Endpoint_ClearStatusStage>
 8de:	1c c0       	rjmp	.+56     	; 0x918 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 8e0:	88 23       	and	r24, r24
 8e2:	d1 f4       	brne	.+52     	; 0x918 <USB_Device_ProcessControlRequest+0x2a6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 8e4:	90 91 08 01 	lds	r25, 0x0108
 8e8:	92 30       	cpi	r25, 0x02	; 2
 8ea:	b0 f4       	brcc	.+44     	; 0x918 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 8ec:	80 91 e8 00 	lds	r24, 0x00E8
 8f0:	87 7f       	andi	r24, 0xF7	; 247
 8f2:	80 93 e8 00 	sts	0x00E8, r24
	}
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 8f6:	90 93 03 01 	sts	0x0103, r25

	Endpoint_ClearStatusStage();
 8fa:	71 dd       	rcall	.-1310   	; 0x3de <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
 8fc:	80 91 03 01 	lds	r24, 0x0103
 900:	88 23       	and	r24, r24
 902:	31 f4       	brne	.+12     	; 0x910 <USB_Device_ProcessControlRequest+0x29e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 904:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 908:	87 fd       	sbrc	r24, 7
 90a:	02 c0       	rjmp	.+4      	; 0x910 <USB_Device_ProcessControlRequest+0x29e>
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	01 c0       	rjmp	.+2      	; 0x912 <USB_Device_ProcessControlRequest+0x2a0>
 910:	84 e0       	ldi	r24, 0x04	; 4
 912:	80 93 05 01 	sts	0x0105, r24

	EVENT_USB_Device_ConfigurationChanged();
 916:	f0 dc       	rcall	.-1568   	; 0x2f8 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 918:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 91c:	83 ff       	sbrs	r24, 3
 91e:	0a c0       	rjmp	.+20     	; 0x934 <USB_Device_ProcessControlRequest+0x2c2>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 920:	80 91 eb 00 	lds	r24, 0x00EB
 924:	80 62       	ori	r24, 0x20	; 32
 926:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 92a:	80 91 e8 00 	lds	r24, 0x00E8
 92e:	87 7f       	andi	r24, 0xF7	; 247
 930:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 934:	ac 96       	adiw	r28, 0x2c	; 44
 936:	0f b6       	in	r0, 0x3f	; 63
 938:	f8 94       	cli
 93a:	de bf       	out	0x3e, r29	; 62
 93c:	0f be       	out	0x3f, r0	; 63
 93e:	cd bf       	out	0x3d, r28	; 61
 940:	cf 91       	pop	r28
 942:	df 91       	pop	r29
 944:	1f 91       	pop	r17
 946:	0f 91       	pop	r16
 948:	08 95       	ret

0000094a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 94a:	08 95       	ret

0000094c <Endpoint_Write_Control_Stream_LE>:
 94c:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 94e:	40 91 0c 01 	lds	r20, 0x010C
 952:	50 91 0d 01 	lds	r21, 0x010D
 956:	46 17       	cp	r20, r22
 958:	57 07       	cpc	r21, r23
 95a:	18 f4       	brcc	.+6      	; 0x962 <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 95c:	f9 01       	movw	r30, r18
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	3d c0       	rjmp	.+122    	; 0x9dc <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 962:	61 15       	cp	r22, r1
 964:	71 05       	cpc	r23, r1
 966:	11 f0       	breq	.+4      	; 0x96c <Endpoint_Write_Control_Stream_LE+0x20>
 968:	ab 01       	movw	r20, r22
 96a:	f8 cf       	rjmp	.-16     	; 0x95c <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 96c:	80 91 e8 00 	lds	r24, 0x00E8
 970:	8e 77       	andi	r24, 0x7E	; 126
 972:	80 93 e8 00 	sts	0x00E8, r24
 976:	40 e0       	ldi	r20, 0x00	; 0
 978:	50 e0       	ldi	r21, 0x00	; 0
 97a:	f0 cf       	rjmp	.-32     	; 0x95c <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 97c:	80 91 05 01 	lds	r24, 0x0105

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 980:	88 23       	and	r24, r24
 982:	f1 f1       	breq	.+124    	; 0xa00 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 984:	85 30       	cpi	r24, 0x05	; 5
 986:	f1 f1       	breq	.+124    	; 0xa04 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 988:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 98c:	83 ff       	sbrs	r24, 3
 98e:	02 c0       	rjmp	.+4      	; 0x994 <Endpoint_Write_Control_Stream_LE+0x48>
 990:	81 e0       	ldi	r24, 0x01	; 1
 992:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 994:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 998:	82 fd       	sbrc	r24, 2
 99a:	2c c0       	rjmp	.+88     	; 0x9f4 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 99c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 9a0:	80 ff       	sbrs	r24, 0
 9a2:	1c c0       	rjmp	.+56     	; 0x9dc <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 9a4:	20 91 f2 00 	lds	r18, 0x00F2
 9a8:	30 91 f3 00 	lds	r19, 0x00F3
 9ac:	07 c0       	rjmp	.+14     	; 0x9bc <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 9ae:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 9b0:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
 9b4:	41 50       	subi	r20, 0x01	; 1
 9b6:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 9b8:	2f 5f       	subi	r18, 0xFF	; 255
 9ba:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 9bc:	41 15       	cp	r20, r1
 9be:	51 05       	cpc	r21, r1
 9c0:	19 f0       	breq	.+6      	; 0x9c8 <Endpoint_Write_Control_Stream_LE+0x7c>
 9c2:	28 30       	cpi	r18, 0x08	; 8
 9c4:	31 05       	cpc	r19, r1
 9c6:	98 f3       	brcs	.-26     	; 0x9ae <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	28 30       	cpi	r18, 0x08	; 8
 9cc:	31 05       	cpc	r19, r1
 9ce:	09 f4       	brne	.+2      	; 0x9d2 <Endpoint_Write_Control_Stream_LE+0x86>
 9d0:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 9d2:	80 91 e8 00 	lds	r24, 0x00E8
 9d6:	8e 77       	andi	r24, 0x7E	; 126
 9d8:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 9dc:	41 15       	cp	r20, r1
 9de:	51 05       	cpc	r21, r1
 9e0:	69 f6       	brne	.-102    	; 0x97c <Endpoint_Write_Control_Stream_LE+0x30>
 9e2:	99 23       	and	r25, r25
 9e4:	59 f6       	brne	.-106    	; 0x97c <Endpoint_Write_Control_Stream_LE+0x30>
 9e6:	06 c0       	rjmp	.+12     	; 0x9f4 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 9e8:	80 91 05 01 	lds	r24, 0x0105

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 9ec:	88 23       	and	r24, r24
 9ee:	41 f0       	breq	.+16     	; 0xa00 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 9f0:	85 30       	cpi	r24, 0x05	; 5
 9f2:	41 f0       	breq	.+16     	; 0xa04 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 9f4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 9f8:	82 ff       	sbrs	r24, 2
 9fa:	f6 cf       	rjmp	.-20     	; 0x9e8 <Endpoint_Write_Control_Stream_LE+0x9c>
 9fc:	80 e0       	ldi	r24, 0x00	; 0
 9fe:	08 95       	ret
 a00:	82 e0       	ldi	r24, 0x02	; 2
 a02:	08 95       	ret
 a04:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 a06:	08 95       	ret

00000a08 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
 a08:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 a0a:	40 91 0c 01 	lds	r20, 0x010C
 a0e:	50 91 0d 01 	lds	r21, 0x010D
 a12:	46 17       	cp	r20, r22
 a14:	57 07       	cpc	r21, r23
 a16:	10 f4       	brcc	.+4      	; 0xa1c <Endpoint_Write_Control_PStream_LE+0x14>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 a18:	60 e0       	ldi	r22, 0x00	; 0
 a1a:	40 c0       	rjmp	.+128    	; 0xa9c <Endpoint_Write_Control_PStream_LE+0x94>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 a1c:	61 15       	cp	r22, r1
 a1e:	71 05       	cpc	r23, r1
 a20:	11 f0       	breq	.+4      	; 0xa26 <Endpoint_Write_Control_PStream_LE+0x1e>
 a22:	ab 01       	movw	r20, r22
 a24:	f9 cf       	rjmp	.-14     	; 0xa18 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a26:	80 91 e8 00 	lds	r24, 0x00E8
 a2a:	8e 77       	andi	r24, 0x7E	; 126
 a2c:	80 93 e8 00 	sts	0x00E8, r24
 a30:	40 e0       	ldi	r20, 0x00	; 0
 a32:	50 e0       	ldi	r21, 0x00	; 0
 a34:	f1 cf       	rjmp	.-30     	; 0xa18 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 a36:	80 91 05 01 	lds	r24, 0x0105

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 a3a:	88 23       	and	r24, r24
 a3c:	09 f4       	brne	.+2      	; 0xa40 <Endpoint_Write_Control_PStream_LE+0x38>
 a3e:	40 c0       	rjmp	.+128    	; 0xac0 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 a40:	85 30       	cpi	r24, 0x05	; 5
 a42:	09 f4       	brne	.+2      	; 0xa46 <Endpoint_Write_Control_PStream_LE+0x3e>
 a44:	3f c0       	rjmp	.+126    	; 0xac4 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a46:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 a4a:	83 ff       	sbrs	r24, 3
 a4c:	02 c0       	rjmp	.+4      	; 0xa52 <Endpoint_Write_Control_PStream_LE+0x4a>
 a4e:	81 e0       	ldi	r24, 0x01	; 1
 a50:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a52:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 a56:	82 fd       	sbrc	r24, 2
 a58:	2d c0       	rjmp	.+90     	; 0xab4 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a5a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 a5e:	80 ff       	sbrs	r24, 0
 a60:	1d c0       	rjmp	.+58     	; 0xa9c <Endpoint_Write_Control_PStream_LE+0x94>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 a62:	80 91 f2 00 	lds	r24, 0x00F2
 a66:	90 91 f3 00 	lds	r25, 0x00F3
 a6a:	09 c0       	rjmp	.+18     	; 0xa7e <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 a6c:	f9 01       	movw	r30, r18
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 a6e:	2f 5f       	subi	r18, 0xFF	; 255
 a70:	3f 4f       	sbci	r19, 0xFF	; 255
 a72:	e4 91       	lpm	r30, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 a74:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
 a78:	41 50       	subi	r20, 0x01	; 1
 a7a:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 a7c:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 a7e:	41 15       	cp	r20, r1
 a80:	51 05       	cpc	r21, r1
 a82:	19 f0       	breq	.+6      	; 0xa8a <Endpoint_Write_Control_PStream_LE+0x82>
 a84:	88 30       	cpi	r24, 0x08	; 8
 a86:	91 05       	cpc	r25, r1
 a88:	88 f3       	brcs	.-30     	; 0xa6c <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 a8a:	60 e0       	ldi	r22, 0x00	; 0
 a8c:	08 97       	sbiw	r24, 0x08	; 8
 a8e:	09 f4       	brne	.+2      	; 0xa92 <Endpoint_Write_Control_PStream_LE+0x8a>
 a90:	61 e0       	ldi	r22, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a92:	80 91 e8 00 	lds	r24, 0x00E8
 a96:	8e 77       	andi	r24, 0x7E	; 126
 a98:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 a9c:	41 15       	cp	r20, r1
 a9e:	51 05       	cpc	r21, r1
 aa0:	51 f6       	brne	.-108    	; 0xa36 <Endpoint_Write_Control_PStream_LE+0x2e>
 aa2:	66 23       	and	r22, r22
 aa4:	41 f6       	brne	.-112    	; 0xa36 <Endpoint_Write_Control_PStream_LE+0x2e>
 aa6:	06 c0       	rjmp	.+12     	; 0xab4 <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 aa8:	80 91 05 01 	lds	r24, 0x0105

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 aac:	88 23       	and	r24, r24
 aae:	41 f0       	breq	.+16     	; 0xac0 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 ab0:	85 30       	cpi	r24, 0x05	; 5
 ab2:	41 f0       	breq	.+16     	; 0xac4 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 ab4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 ab8:	82 ff       	sbrs	r24, 2
 aba:	f6 cf       	rjmp	.-20     	; 0xaa8 <Endpoint_Write_Control_PStream_LE+0xa0>
 abc:	80 e0       	ldi	r24, 0x00	; 0
 abe:	08 95       	ret
 ac0:	82 e0       	ldi	r24, 0x02	; 2
 ac2:	08 95       	ret
 ac4:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 ac6:	08 95       	ret

00000ac8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 ac8:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 aca:	80 91 05 01 	lds	r24, 0x0105
 ace:	88 23       	and	r24, r24
 ad0:	61 f0       	breq	.+24     	; 0xaea <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 ad2:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ad6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ada:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 ade:	83 ff       	sbrs	r24, 3
 ae0:	01 c0       	rjmp	.+2      	; 0xae4 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 ae2:	c7 dd       	rcall	.-1138   	; 0x672 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 ae4:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ae6:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 aea:	1f 91       	pop	r17
 aec:	08 95       	ret

00000aee <_exit>:
 aee:	f8 94       	cli

00000af0 <__stop_program>:
 af0:	ff cf       	rjmp	.-2      	; 0xaf0 <__stop_program>
