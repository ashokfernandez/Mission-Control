
VirtualSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00000c5a  00000cee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080015a  0080015a  00000d48  2**0
                  ALLOC
  3 .stab         000008f4  00000000  00000000  00000d48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000013d  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000280  00000000  00000000  00001779  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000074f  00000000  00000000  000019f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003ada  00000000  00000000  00002148  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000faf  00000000  00000000  00005c22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000345e  00000000  00000000  00006bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003a0  00000000  00000000  0000a030  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001aef  00000000  00000000  0000a3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001bc8  00000000  00000000  0000bebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000308  00000000  00000000  0000da87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return Endpoint_IsConfigured();
}

void Endpoint_ClearEndpoints(void)
{
   0:	91 c0       	rjmp	.+290    	; 0x124 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
   4:	ac c0       	rjmp	.+344    	; 0x15e <__bad_interrupt>
   6:	00 00       	nop
   8:	aa c0       	rjmp	.+340    	; 0x15e <__bad_interrupt>
   a:	00 00       	nop
   c:	a8 c0       	rjmp	.+336    	; 0x15e <__bad_interrupt>
   e:	00 00       	nop
  10:	a6 c0       	rjmp	.+332    	; 0x15e <__bad_interrupt>
  12:	00 00       	nop
  14:	a4 c0       	rjmp	.+328    	; 0x15e <__bad_interrupt>
  16:	00 00       	nop
  18:	a2 c0       	rjmp	.+324    	; 0x15e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a0 c0       	rjmp	.+320    	; 0x15e <__bad_interrupt>
  1e:	00 00       	nop
  20:	9e c0       	rjmp	.+316    	; 0x15e <__bad_interrupt>
  22:	00 00       	nop
  24:	9c c0       	rjmp	.+312    	; 0x15e <__bad_interrupt>
  26:	00 00       	nop
  28:	a4 c2       	rjmp	.+1352   	; 0x572 <__vector_10>
  2a:	00 00       	nop
  2c:	98 c0       	rjmp	.+304    	; 0x15e <__bad_interrupt>
  2e:	00 00       	nop
  30:	96 c0       	rjmp	.+300    	; 0x15e <__bad_interrupt>
  32:	00 00       	nop
  34:	94 c0       	rjmp	.+296    	; 0x15e <__bad_interrupt>
  36:	00 00       	nop
  38:	92 c0       	rjmp	.+292    	; 0x15e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	90 c0       	rjmp	.+288    	; 0x15e <__bad_interrupt>
  3e:	00 00       	nop
  40:	8e c0       	rjmp	.+284    	; 0x15e <__bad_interrupt>
  42:	00 00       	nop
  44:	8c c0       	rjmp	.+280    	; 0x15e <__bad_interrupt>
  46:	00 00       	nop
  48:	8a c0       	rjmp	.+276    	; 0x15e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	88 c0       	rjmp	.+272    	; 0x15e <__bad_interrupt>
  4e:	00 00       	nop
  50:	86 c0       	rjmp	.+268    	; 0x15e <__bad_interrupt>
  52:	00 00       	nop
  54:	84 c0       	rjmp	.+264    	; 0x15e <__bad_interrupt>
  56:	00 00       	nop
  58:	82 c0       	rjmp	.+260    	; 0x15e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	80 c0       	rjmp	.+256    	; 0x15e <__bad_interrupt>
  5e:	00 00       	nop
  60:	7e c0       	rjmp	.+252    	; 0x15e <__bad_interrupt>
  62:	00 00       	nop
  64:	7c c0       	rjmp	.+248    	; 0x15e <__bad_interrupt>
  66:	00 00       	nop
  68:	7a c0       	rjmp	.+244    	; 0x15e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	78 c0       	rjmp	.+240    	; 0x15e <__bad_interrupt>
  6e:	00 00       	nop
  70:	76 c0       	rjmp	.+236    	; 0x15e <__bad_interrupt>
  72:	00 00       	nop
  74:	74 c0       	rjmp	.+232    	; 0x15e <__bad_interrupt>
  76:	00 00       	nop
  78:	72 c0       	rjmp	.+228    	; 0x15e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	70 c0       	rjmp	.+224    	; 0x15e <__bad_interrupt>
  7e:	00 00       	nop
  80:	6e c0       	rjmp	.+220    	; 0x15e <__bad_interrupt>
  82:	00 00       	nop
  84:	6c c0       	rjmp	.+216    	; 0x15e <__bad_interrupt>
  86:	00 00       	nop
  88:	6a c0       	rjmp	.+212    	; 0x15e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	68 c0       	rjmp	.+208    	; 0x15e <__bad_interrupt>
  8e:	00 00       	nop
  90:	66 c0       	rjmp	.+204    	; 0x15e <__bad_interrupt>
  92:	00 00       	nop
  94:	64 c0       	rjmp	.+200    	; 0x15e <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
  a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  ba:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
  ca:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
  da:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

000000e8 <LanguageString>:
  e8:	04 03 09 04                                         ....

000000ec <ManufacturerString>:
  ec:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  fc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000106 <ProductString>:
 106:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
 116:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

00000124 <__ctors_end>:
 124:	11 24       	eor	r1, r1
 126:	1f be       	out	0x3f, r1	; 63
 128:	cf ef       	ldi	r28, 0xFF	; 255
 12a:	d0 e2       	ldi	r29, 0x20	; 32
 12c:	de bf       	out	0x3e, r29	; 62
 12e:	cd bf       	out	0x3d, r28	; 61

00000130 <__do_copy_data>:
 130:	11 e0       	ldi	r17, 0x01	; 1
 132:	a0 e0       	ldi	r26, 0x00	; 0
 134:	b1 e0       	ldi	r27, 0x01	; 1
 136:	ea e5       	ldi	r30, 0x5A	; 90
 138:	fc e0       	ldi	r31, 0x0C	; 12
 13a:	00 e0       	ldi	r16, 0x00	; 0
 13c:	0b bf       	out	0x3b, r16	; 59
 13e:	02 c0       	rjmp	.+4      	; 0x144 <__do_copy_data+0x14>
 140:	07 90       	elpm	r0, Z+
 142:	0d 92       	st	X+, r0
 144:	aa 35       	cpi	r26, 0x5A	; 90
 146:	b1 07       	cpc	r27, r17
 148:	d9 f7       	brne	.-10     	; 0x140 <__do_copy_data+0x10>

0000014a <__do_clear_bss>:
 14a:	11 e0       	ldi	r17, 0x01	; 1
 14c:	aa e5       	ldi	r26, 0x5A	; 90
 14e:	b1 e0       	ldi	r27, 0x01	; 1
 150:	01 c0       	rjmp	.+2      	; 0x154 <.do_clear_bss_start>

00000152 <.do_clear_bss_loop>:
 152:	1d 92       	st	X+, r1

00000154 <.do_clear_bss_start>:
 154:	a8 36       	cpi	r26, 0x68	; 104
 156:	b1 07       	cpc	r27, r17
 158:	e1 f7       	brne	.-8      	; 0x152 <.do_clear_bss_loop>
 15a:	0b d1       	rcall	.+534    	; 0x372 <main>
 15c:	7c c5       	rjmp	.+2808   	; 0xc56 <_exit>

0000015e <__bad_interrupt>:
 15e:	50 cf       	rjmp	.-352    	; 0x0 <__vectors>

00000160 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 160:	8b b1       	in	r24, 0x0b	; 11
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	80 6a       	ori	r24, 0xA0	; 160
 166:	8b b9       	out	0x0b, r24	; 11
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
 168:	08 95       	ret

0000016a <EVENT_USB_Device_Disconnect>:
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	8f 70       	andi	r24, 0x0F	; 15
 16e:	80 61       	ori	r24, 0x10	; 16
 170:	8b b9       	out	0x0b, r24	; 11
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 172:	08 95       	ret

00000174 <CDC_Task>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> 1));
 174:	23 b1       	in	r18, 0x03	; 3
 176:	9c b1       	in	r25, 0x0c	; 12
	char*       ReportString    = NULL;
	uint8_t     JoyStatus_LCL   = Joystick_GetStatus();
	static bool ActionSent      = false;

	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 178:	80 91 5f 01 	lds	r24, 0x015F
 17c:	84 30       	cpi	r24, 0x04	; 4
 17e:	09 f0       	breq	.+2      	; 0x182 <CDC_Task+0xe>
 180:	64 c0       	rjmp	.+200    	; 0x24a <CDC_Task+0xd6>
 182:	90 95       	com	r25
 184:	89 2f       	mov	r24, r25
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	80 73       	andi	r24, 0x30	; 48
 18a:	90 70       	andi	r25, 0x00	; 0
 18c:	95 95       	asr	r25
 18e:	87 95       	ror	r24
 190:	92 2f       	mov	r25, r18
 192:	90 95       	com	r25
 194:	90 7e       	andi	r25, 0xE0	; 224
 196:	98 2b       	or	r25, r24
	  return;

	/* Determine if a joystick action has occurred */
	if (JoyStatus_LCL & JOY_UP)
 198:	97 fd       	sbrc	r25, 7
 19a:	17 c0       	rjmp	.+46     	; 0x1ca <CDC_Task+0x56>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
 19c:	94 ff       	sbrs	r25, 4
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <CDC_Task+0x32>
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	31 e0       	ldi	r19, 0x01	; 1
 1a4:	14 c0       	rjmp	.+40     	; 0x1ce <CDC_Task+0x5a>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
 1a6:	96 ff       	sbrs	r25, 6
 1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <CDC_Task+0x3c>
 1aa:	20 e1       	ldi	r18, 0x10	; 16
 1ac:	31 e0       	ldi	r19, 0x01	; 1
 1ae:	0f c0       	rjmp	.+30     	; 0x1ce <CDC_Task+0x5a>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
 1b0:	93 ff       	sbrs	r25, 3
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <CDC_Task+0x46>
 1b4:	20 e2       	ldi	r18, 0x20	; 32
 1b6:	31 e0       	ldi	r19, 0x01	; 1
 1b8:	0a c0       	rjmp	.+20     	; 0x1ce <CDC_Task+0x5a>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
 1ba:	95 ff       	sbrs	r25, 5
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <CDC_Task+0x50>
 1be:	21 e3       	ldi	r18, 0x31	; 49
 1c0:	31 e0       	ldi	r19, 0x01	; 1
 1c2:	05 c0       	rjmp	.+10     	; 0x1ce <CDC_Task+0x5a>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
 1c4:	10 92 5a 01 	sts	0x015A, r1
 1c8:	34 c0       	rjmp	.+104    	; 0x232 <CDC_Task+0xbe>
 1ca:	24 e4       	ldi	r18, 0x44	; 68
 1cc:	31 e0       	ldi	r19, 0x01	; 1

	/* Flag management - Only allow one string to be sent per action */
	if ((ReportString != NULL) && (ActionSent == false) && LineEncoding.BaudRateBPS)
 1ce:	80 91 5a 01 	lds	r24, 0x015A
 1d2:	88 23       	and	r24, r24
 1d4:	71 f5       	brne	.+92     	; 0x232 <CDC_Task+0xbe>
 1d6:	80 91 52 01 	lds	r24, 0x0152
 1da:	90 91 53 01 	lds	r25, 0x0153
 1de:	a0 91 54 01 	lds	r26, 0x0154
 1e2:	b0 91 55 01 	lds	r27, 0x0155
 1e6:	00 97       	sbiw	r24, 0x00	; 0
 1e8:	a1 05       	cpc	r26, r1
 1ea:	b1 05       	cpc	r27, r1
 1ec:	11 f1       	breq	.+68     	; 0x232 <CDC_Task+0xbe>
	{
		ActionSent = true;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 5a 01 	sts	0x015A, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 1f4:	83 e0       	ldi	r24, 0x03	; 3
 1f6:	80 93 e9 00 	sts	0x00E9, r24

		/* Select the Serial Tx Endpoint */
		Endpoint_SelectEndpoint(CDC_TX_EPNUM);

		/* Write the String to the Endpoint */
		Endpoint_Write_Stream_LE(ReportString, strlen(ReportString));
 1fa:	f9 01       	movw	r30, r18
 1fc:	01 90       	ld	r0, Z+
 1fe:	00 20       	and	r0, r0
 200:	e9 f7       	brne	.-6      	; 0x1fc <CDC_Task+0x88>
 202:	31 97       	sbiw	r30, 0x01	; 1
 204:	e2 1b       	sub	r30, r18
 206:	f3 0b       	sbc	r31, r19
 208:	c9 01       	movw	r24, r18
 20a:	bf 01       	movw	r22, r30
 20c:	e4 d4       	rcall	.+2504   	; 0xbd6 <Endpoint_Write_Stream_LE>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 20e:	20 91 f2 00 	lds	r18, 0x00F2
 212:	30 91 f3 00 	lds	r19, 0x00F3
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 216:	80 91 e8 00 	lds	r24, 0x00E8
 21a:	8e 77       	andi	r24, 0x7E	; 126
 21c:	80 93 e8 00 	sts	0x00E8, r24
		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* If the last packet filled the endpoint, send an empty packet to release the buffer on
		 * the receiver (otherwise all data will be cached until a non-full packet is received) */
		if (IsFull)
 220:	20 31       	cpi	r18, 0x10	; 16
 222:	31 05       	cpc	r19, r1
 224:	31 f4       	brne	.+12     	; 0x232 <CDC_Task+0xbe>
		{
			/* Wait until the endpoint is ready for another packet */
			Endpoint_WaitUntilReady();
 226:	10 d1       	rcall	.+544    	; 0x448 <Endpoint_WaitUntilReady>
 228:	80 91 e8 00 	lds	r24, 0x00E8
 22c:	8e 77       	andi	r24, 0x7E	; 126
 22e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 232:	84 e0       	ldi	r24, 0x04	; 4
 234:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 238:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Serial Rx Endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Throw away any received data from the host */
	if (Endpoint_IsOUTReceived())
 23c:	82 ff       	sbrs	r24, 2
 23e:	05 c0       	rjmp	.+10     	; 0x24a <CDC_Task+0xd6>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 240:	80 91 e8 00 	lds	r24, 0x00E8
 244:	8b 77       	andi	r24, 0x7B	; 123
 246:	80 93 e8 00 	sts	0x00E8, r24
 24a:	08 95       	ret

0000024c <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
 24c:	80 91 61 01 	lds	r24, 0x0161
 250:	81 32       	cpi	r24, 0x21	; 33
 252:	29 f0       	breq	.+10     	; 0x25e <EVENT_USB_Device_ControlRequest+0x12>
 254:	82 32       	cpi	r24, 0x22	; 34
 256:	49 f1       	breq	.+82     	; 0x2aa <EVENT_USB_Device_ControlRequest+0x5e>
 258:	80 32       	cpi	r24, 0x20	; 32
 25a:	89 f5       	brne	.+98     	; 0x2be <EVENT_USB_Device_ControlRequest+0x72>
 25c:	12 c0       	rjmp	.+36     	; 0x282 <EVENT_USB_Device_ControlRequest+0x36>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 25e:	80 91 60 01 	lds	r24, 0x0160
 262:	81 3a       	cpi	r24, 0xA1	; 161
 264:	61 f5       	brne	.+88     	; 0x2be <EVENT_USB_Device_ControlRequest+0x72>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 266:	80 91 e8 00 	lds	r24, 0x00E8
 26a:	87 7f       	andi	r24, 0xF7	; 247
 26c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 270:	82 e5       	ldi	r24, 0x52	; 82
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	67 e0       	ldi	r22, 0x07	; 7
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	af d3       	rcall	.+1886   	; 0x9d8 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 27a:	80 91 e8 00 	lds	r24, 0x00E8
 27e:	8b 77       	andi	r24, 0x7B	; 123
 280:	11 c0       	rjmp	.+34     	; 0x2a4 <EVENT_USB_Device_ControlRequest+0x58>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 282:	80 91 60 01 	lds	r24, 0x0160
 286:	81 32       	cpi	r24, 0x21	; 33
 288:	d1 f4       	brne	.+52     	; 0x2be <EVENT_USB_Device_ControlRequest+0x72>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 28a:	80 91 e8 00 	lds	r24, 0x00E8
 28e:	87 7f       	andi	r24, 0xF7	; 247
 290:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
 294:	82 e5       	ldi	r24, 0x52	; 82
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	67 e0       	ldi	r22, 0x07	; 7
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	5b d4       	rcall	.+2230   	; 0xb54 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 29e:	80 91 e8 00 	lds	r24, 0x00E8
 2a2:	8e 77       	andi	r24, 0x7E	; 126
 2a4:	80 93 e8 00 	sts	0x00E8, r24
 2a8:	08 95       	ret
				Endpoint_ClearIN();
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 2aa:	80 91 60 01 	lds	r24, 0x0160
 2ae:	81 32       	cpi	r24, 0x21	; 33
 2b0:	31 f4       	brne	.+12     	; 0x2be <EVENT_USB_Device_ControlRequest+0x72>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 2b2:	80 91 e8 00 	lds	r24, 0x00E8
 2b6:	87 7f       	andi	r24, 0xF7	; 247
 2b8:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 2bc:	a4 c0       	rjmp	.+328    	; 0x406 <Endpoint_ClearStatusStage>
 2be:	08 95       	ret

000002c0 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host set the current configuration
 *  of the USB device after enumeration - the device endpoints are configured and the CDC management task started.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 2c0:	ef 92       	push	r14
 2c2:	ff 92       	push	r15
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	61 ec       	ldi	r22, 0xC1	; 193
 2cc:	42 e0       	ldi	r20, 0x02	; 2
 2ce:	88 d0       	rcall	.+272    	; 0x3e0 <Endpoint_ConfigureEndpoint_Prv>
 2d0:	08 2f       	mov	r16, r24
	                                            CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_OUT,
	                                            CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Reset line encoding baud rate so that the host knows to send new values */
	LineEncoding.BaudRateBPS = 0;
 2d2:	83 e0       	ldi	r24, 0x03	; 3
 2d4:	61 e8       	ldi	r22, 0x81	; 129
 2d6:	42 e1       	ldi	r20, 0x12	; 18
 2d8:	83 d0       	rcall	.+262    	; 0x3e0 <Endpoint_ConfigureEndpoint_Prv>
 2da:	e8 2e       	mov	r14, r24
 2dc:	84 e0       	ldi	r24, 0x04	; 4
 2de:	60 e8       	ldi	r22, 0x80	; 128
 2e0:	42 e1       	ldi	r20, 0x12	; 18
 2e2:	7e d0       	rcall	.+252    	; 0x3e0 <Endpoint_ConfigureEndpoint_Prv>
 2e4:	10 92 52 01 	sts	0x0152, r1
 2e8:	10 92 53 01 	sts	0x0153, r1
 2ec:	10 92 54 01 	sts	0x0154, r1
 2f0:	10 92 55 01 	sts	0x0155, r1

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 2f4:	10 e0       	ldi	r17, 0x00	; 0
 2f6:	ff 24       	eor	r15, r15
 2f8:	0e 21       	and	r16, r14
 2fa:	1f 21       	and	r17, r15
 2fc:	01 70       	andi	r16, 0x01	; 1
 2fe:	10 70       	andi	r17, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	08 23       	and	r16, r24
 304:	19 23       	and	r17, r25
 306:	01 2b       	or	r16, r17
 308:	11 f4       	brne	.+4      	; 0x30e <EVENT_USB_Device_ConfigurationChanged+0x4e>
 30a:	90 e9       	ldi	r25, 0x90	; 144
 30c:	01 c0       	rjmp	.+2      	; 0x310 <EVENT_USB_Device_ConfigurationChanged+0x50>
 30e:	90 e6       	ldi	r25, 0x60	; 96
 310:	8b b1       	in	r24, 0x0b	; 11
 312:	8f 70       	andi	r24, 0x0F	; 15
 314:	98 2b       	or	r25, r24
 316:	9b b9       	out	0x0b, r25	; 11
}
 318:	1f 91       	pop	r17
 31a:	0f 91       	pop	r16
 31c:	ff 90       	pop	r15
 31e:	ef 90       	pop	r14
 320:	08 95       	ret

00000322 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 322:	84 b7       	in	r24, 0x34	; 52
 324:	87 7f       	andi	r24, 0xF7	; 247
 326:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 328:	88 e1       	ldi	r24, 0x18	; 24
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	f8 94       	cli
 32e:	80 93 60 00 	sts	0x0060, r24
 332:	10 92 60 00 	sts	0x0060, r1
 336:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	20 e8       	ldi	r18, 0x80	; 128
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	f8 94       	cli
 342:	20 93 61 00 	sts	0x0061, r18
 346:	80 93 61 00 	sts	0x0061, r24
 34a:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 34c:	84 b1       	in	r24, 0x04	; 4
 34e:	8f 71       	andi	r24, 0x1F	; 31
 350:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 352:	8d b1       	in	r24, 0x0d	; 13
 354:	8f 7c       	andi	r24, 0xCF	; 207
 356:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 358:	85 b1       	in	r24, 0x05	; 5
 35a:	80 6e       	ori	r24, 0xE0	; 224
 35c:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 35e:	8e b1       	in	r24, 0x0e	; 14
 360:	80 63       	ori	r24, 0x30	; 48
 362:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 364:	8a b1       	in	r24, 0x0a	; 10
 366:	80 6f       	ori	r24, 0xF0	; 240
 368:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 36a:	8b b1       	in	r24, 0x0b	; 11
 36c:	8f 70       	andi	r24, 0x0F	; 15
 36e:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
}
 370:	ea c0       	rjmp	.+468    	; 0x546 <USB_Init>

00000372 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 372:	d7 df       	rcall	.-82     	; 0x322 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 374:	8b b1       	in	r24, 0x0b	; 11
 376:	8f 70       	andi	r24, 0x0F	; 15
 378:	80 61       	ori	r24, 0x10	; 16
 37a:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
 37c:	78 94       	sei

	for (;;)
	{
		CDC_Task();
 37e:	fa de       	rcall	.-524    	; 0x174 <CDC_Task>
		USB_USBTask();
 380:	57 d4       	rcall	.+2222   	; 0xc30 <USB_USBTask>
 382:	fd cf       	rjmp	.-6      	; 0x37e <main+0xc>

00000384 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 384:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 386:	92 30       	cpi	r25, 0x02	; 2
 388:	49 f0       	breq	.+18     	; 0x39c <CALLBACK_USB_GetDescriptor+0x18>
 38a:	93 30       	cpi	r25, 0x03	; 3
 38c:	61 f0       	breq	.+24     	; 0x3a6 <CALLBACK_USB_GetDescriptor+0x22>
 38e:	91 30       	cpi	r25, 0x01	; 1
 390:	f9 f4       	brne	.+62     	; 0x3d0 <CALLBACK_USB_GetDescriptor+0x4c>
 392:	e8 e9       	ldi	r30, 0x98	; 152
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	22 e1       	ldi	r18, 0x12	; 18
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	1e c0       	rjmp	.+60     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x54>
 39c:	ea ea       	ldi	r30, 0xAA	; 170
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	2e e3       	ldi	r18, 0x3E	; 62
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	19 c0       	rjmp	.+50     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	49 f0       	breq	.+18     	; 0x3bc <CALLBACK_USB_GetDescriptor+0x38>
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	18 f0       	brcs	.+6      	; 0x3b4 <CALLBACK_USB_GetDescriptor+0x30>
 3ae:	82 30       	cpi	r24, 0x02	; 2
 3b0:	79 f4       	brne	.+30     	; 0x3d0 <CALLBACK_USB_GetDescriptor+0x4c>
 3b2:	08 c0       	rjmp	.+16     	; 0x3c4 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 3b4:	e8 ee       	ldi	r30, 0xE8	; 232
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	84 91       	lpm	r24, Z+
 3ba:	07 c0       	rjmp	.+14     	; 0x3ca <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 3bc:	ec ee       	ldi	r30, 0xEC	; 236
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	84 91       	lpm	r24, Z+
 3c2:	03 c0       	rjmp	.+6      	; 0x3ca <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 3c4:	e6 e0       	ldi	r30, 0x06	; 6
 3c6:	f1 e0       	ldi	r31, 0x01	; 1
 3c8:	84 91       	lpm	r24, Z+
 3ca:	28 2f       	mov	r18, r24
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	04 c0       	rjmp	.+8      	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x54>
 3d0:	e0 e0       	ldi	r30, 0x00	; 0
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	20 e0       	ldi	r18, 0x00	; 0
 3d6:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 3d8:	ed 93       	st	X+, r30
 3da:	fc 93       	st	X, r31
	return Size;
}
 3dc:	c9 01       	movw	r24, r18
 3de:	08 95       	ret

000003e0 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 3e0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 3e4:	80 91 eb 00 	lds	r24, 0x00EB
 3e8:	81 60       	ori	r24, 0x01	; 1
 3ea:	80 93 eb 00 	sts	0x00EB, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
 3ee:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
 3f2:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
 3f6:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 3fa:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
 3fe:	88 1f       	adc	r24, r24
 400:	88 27       	eor	r24, r24
 402:	88 1f       	adc	r24, r24
 404:	08 95       	ret

00000406 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 406:	80 91 60 01 	lds	r24, 0x0160
 40a:	88 23       	and	r24, r24
 40c:	9c f4       	brge	.+38     	; 0x434 <Endpoint_ClearStatusStage+0x2e>
 40e:	04 c0       	rjmp	.+8      	; 0x418 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 410:	80 91 5f 01 	lds	r24, 0x015F
 414:	88 23       	and	r24, r24
 416:	b9 f0       	breq	.+46     	; 0x446 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 418:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 41c:	82 ff       	sbrs	r24, 2
 41e:	f8 cf       	rjmp	.-16     	; 0x410 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 420:	80 91 e8 00 	lds	r24, 0x00E8
 424:	8b 77       	andi	r24, 0x7B	; 123
 426:	80 93 e8 00 	sts	0x00E8, r24
 42a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 42c:	80 91 5f 01 	lds	r24, 0x015F
 430:	88 23       	and	r24, r24
 432:	49 f0       	breq	.+18     	; 0x446 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 434:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 438:	80 ff       	sbrs	r24, 0
 43a:	f8 cf       	rjmp	.-16     	; 0x42c <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 43c:	80 91 e8 00 	lds	r24, 0x00E8
 440:	8e 77       	andi	r24, 0x7E	; 126
 442:	80 93 e8 00 	sts	0x00E8, r24
 446:	08 95       	ret

00000448 <Endpoint_WaitUntilReady>:
			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is active (i.e. enumerated to a host)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 448:	40 91 e4 00 	lds	r20, 0x00E4
 44c:	50 91 e5 00 	lds	r21, 0x00E5
 450:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
 452:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 456:	80 ff       	sbrs	r24, 0
 458:	05 c0       	rjmp	.+10     	; 0x464 <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 45a:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
 45e:	80 ff       	sbrs	r24, 0
 460:	05 c0       	rjmp	.+10     	; 0x46c <Endpoint_WaitUntilReady+0x24>
 462:	22 c0       	rjmp	.+68     	; 0x4a8 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 464:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 468:	82 fd       	sbrc	r24, 2
 46a:	1e c0       	rjmp	.+60     	; 0x4a8 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 46c:	80 91 5f 01 	lds	r24, 0x015F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 470:	88 23       	and	r24, r24
 472:	11 f4       	brne	.+4      	; 0x478 <Endpoint_WaitUntilReady+0x30>
 474:	82 e0       	ldi	r24, 0x02	; 2
 476:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 478:	85 30       	cpi	r24, 0x05	; 5
 47a:	11 f4       	brne	.+4      	; 0x480 <Endpoint_WaitUntilReady+0x38>
 47c:	83 e0       	ldi	r24, 0x03	; 3
 47e:	08 95       	ret
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 480:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 484:	85 ff       	sbrs	r24, 5
 486:	02 c0       	rjmp	.+4      	; 0x48c <Endpoint_WaitUntilReady+0x44>
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	08 95       	ret
 48c:	80 91 e4 00 	lds	r24, 0x00E4
 490:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 494:	84 17       	cp	r24, r20
 496:	95 07       	cpc	r25, r21
 498:	e1 f2       	breq	.-72     	; 0x452 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 49a:	22 23       	and	r18, r18
 49c:	11 f4       	brne	.+4      	; 0x4a2 <Endpoint_WaitUntilReady+0x5a>
 49e:	84 e0       	ldi	r24, 0x04	; 4
 4a0:	08 95       	ret
 4a2:	21 50       	subi	r18, 0x01	; 1
 4a4:	ac 01       	movw	r20, r24
 4a6:	d5 cf       	rjmp	.-86     	; 0x452 <Endpoint_WaitUntilReady+0xa>
 4a8:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 4aa:	08 95       	ret

000004ac <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 4ac:	55 d0       	rcall	.+170    	; 0x558 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 4ae:	5c d0       	rcall	.+184    	; 0x568 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 4b0:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
 4b4:	98 2f       	mov	r25, r24
 4b6:	9f 77       	andi	r25, 0x7F	; 127
 4b8:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
 4bc:	80 68       	ori	r24, 0x80	; 128
 4be:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 4c2:	8c e0       	ldi	r24, 0x0C	; 12
 4c4:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 4c6:	89 b5       	in	r24, 0x29	; 41
 4c8:	82 60       	ori	r24, 0x02	; 2
 4ca:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
 4cc:	09 b4       	in	r0, 0x29	; 41
 4ce:	00 fe       	sbrs	r0, 0
 4d0:	fd cf       	rjmp	.-6      	; 0x4cc <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 4d2:	80 91 d8 00 	lds	r24, 0x00D8
 4d6:	8f 7d       	andi	r24, 0xDF	; 223
 4d8:	80 93 d8 00 	sts	0x00D8, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 4dc:	80 91 d7 00 	lds	r24, 0x00D7
 4e0:	80 68       	ori	r24, 0x80	; 128
 4e2:	80 93 d7 00 	sts	0x00D7, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
 4e6:	10 92 5f 01 	sts	0x015F, r1
	USB_ConfigurationNumber  = 0;
 4ea:	10 92 5d 01 	sts	0x015D, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
 4ee:	10 92 5c 01 	sts	0x015C, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
 4f2:	10 92 5b 01 	sts	0x015B, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 4f6:	80 91 e0 00 	lds	r24, 0x00E0
 4fa:	8b 7f       	andi	r24, 0xFB	; 251
 4fc:	80 93 e0 00 	sts	0x00E0, r24
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  USB_Device_SetLowSpeed();
	else
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUS);
 500:	80 91 d8 00 	lds	r24, 0x00D8
 504:	81 60       	ori	r24, 0x01	; 1
 506:	80 93 d8 00 	sts	0x00D8, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	42 e0       	ldi	r20, 0x02	; 2
 510:	67 df       	rcall	.-306    	; 0x3e0 <Endpoint_ConfigureEndpoint_Prv>

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
							   ENDPOINT_BANK_SINGLE);

	USB_INT_Clear(USB_INT_SUSPI);
 512:	80 91 e1 00 	lds	r24, 0x00E1
 516:	8e 7f       	andi	r24, 0xFE	; 254
 518:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPI);
 51c:	80 91 e2 00 	lds	r24, 0x00E2
 520:	81 60       	ori	r24, 0x01	; 1
 522:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Enable(USB_INT_EORSTI);
 526:	80 91 e2 00 	lds	r24, 0x00E2
 52a:	88 60       	ori	r24, 0x08	; 8
 52c:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 530:	80 91 e0 00 	lds	r24, 0x00E0
 534:	8e 7f       	andi	r24, 0xFE	; 254
 536:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 53a:	80 91 d8 00 	lds	r24, 0x00D8
 53e:	80 61       	ori	r24, 0x10	; 16
 540:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 544:	08 95       	ret

00000546 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 546:	e7 ed       	ldi	r30, 0xD7	; 215
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	80 81       	ld	r24, Z
 54c:	81 60       	ori	r24, 0x01	; 1
 54e:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	80 93 5e 01 	sts	0x015E, r24

	USB_ResetInterface();
}
 556:	aa cf       	rjmp	.-172    	; 0x4ac <USB_ResetInterface>

00000558 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 558:	e8 ed       	ldi	r30, 0xD8	; 216
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	80 81       	ld	r24, Z
 55e:	8c 7f       	andi	r24, 0xFC	; 252
 560:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 562:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 566:	08 95       	ret

00000568 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
 568:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
 56c:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 570:	08 95       	ret

00000572 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 572:	1f 92       	push	r1
 574:	0f 92       	push	r0
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	0f 92       	push	r0
 57a:	0b b6       	in	r0, 0x3b	; 59
 57c:	0f 92       	push	r0
 57e:	11 24       	eor	r1, r1
 580:	2f 93       	push	r18
 582:	3f 93       	push	r19
 584:	4f 93       	push	r20
 586:	5f 93       	push	r21
 588:	6f 93       	push	r22
 58a:	7f 93       	push	r23
 58c:	8f 93       	push	r24
 58e:	9f 93       	push	r25
 590:	af 93       	push	r26
 592:	bf 93       	push	r27
 594:	ef 93       	push	r30
 596:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
 598:	80 91 da 00 	lds	r24, 0x00DA
 59c:	80 ff       	sbrs	r24, 0
 59e:	15 c0       	rjmp	.+42     	; 0x5ca <__vector_10+0x58>
 5a0:	80 91 d8 00 	lds	r24, 0x00D8
 5a4:	80 ff       	sbrs	r24, 0
 5a6:	11 c0       	rjmp	.+34     	; 0x5ca <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_VBUS);
 5a8:	80 91 da 00 	lds	r24, 0x00DA
 5ac:	8e 7f       	andi	r24, 0xFE	; 254
 5ae:	80 93 da 00 	sts	0x00DA, r24
				 *  \note This function is not available on some AVR models which do not support hardware VBUS monitoring.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 5b2:	80 91 d9 00 	lds	r24, 0x00D9

		if (USB_VBUS_GetStatus())
 5b6:	80 ff       	sbrs	r24, 0
 5b8:	05 c0       	rjmp	.+10     	; 0x5c4 <__vector_10+0x52>
		{
			USB_DeviceState = DEVICE_STATE_Powered;
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	80 93 5f 01 	sts	0x015F, r24
			EVENT_USB_Device_Connect();
 5c0:	cf dd       	rcall	.-1122   	; 0x160 <EVENT_USB_Device_Connect>
 5c2:	03 c0       	rjmp	.+6      	; 0x5ca <__vector_10+0x58>
		}
		else
		{
			USB_DeviceState = DEVICE_STATE_Unattached;
 5c4:	10 92 5f 01 	sts	0x015F, r1
			EVENT_USB_Device_Disconnect();
 5c8:	d0 dd       	rcall	.-1120   	; 0x16a <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 5ca:	80 91 e1 00 	lds	r24, 0x00E1
 5ce:	80 ff       	sbrs	r24, 0
 5d0:	1d c0       	rjmp	.+58     	; 0x60c <__vector_10+0x9a>
 5d2:	80 91 e2 00 	lds	r24, 0x00E2
 5d6:	80 ff       	sbrs	r24, 0
 5d8:	19 c0       	rjmp	.+50     	; 0x60c <__vector_10+0x9a>
	{
		USB_INT_Clear(USB_INT_SUSPI);
 5da:	80 91 e1 00 	lds	r24, 0x00E1
 5de:	8e 7f       	andi	r24, 0xFE	; 254
 5e0:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPI);
 5e4:	80 91 e2 00 	lds	r24, 0x00E2
 5e8:	8e 7f       	andi	r24, 0xFE	; 254
 5ea:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
 5ee:	80 91 e2 00 	lds	r24, 0x00E2
 5f2:	80 61       	ori	r24, 0x10	; 16
 5f4:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 5f8:	80 91 d8 00 	lds	r24, 0x00D8
 5fc:	80 62       	ori	r24, 0x20	; 32
 5fe:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 602:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 604:	85 e0       	ldi	r24, 0x05	; 5
 606:	80 93 5f 01 	sts	0x015F, r24
		EVENT_USB_Device_Suspend();
 60a:	e5 d1       	rcall	.+970    	; 0x9d6 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 60c:	80 91 e1 00 	lds	r24, 0x00E1
 610:	84 ff       	sbrs	r24, 4
 612:	2e c0       	rjmp	.+92     	; 0x670 <__vector_10+0xfe>
 614:	80 91 e2 00 	lds	r24, 0x00E2
 618:	84 ff       	sbrs	r24, 4
 61a:	2a c0       	rjmp	.+84     	; 0x670 <__vector_10+0xfe>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 61c:	8c e0       	ldi	r24, 0x0C	; 12
 61e:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 620:	89 b5       	in	r24, 0x29	; 41
 622:	82 60       	ori	r24, 0x02	; 2
 624:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 626:	09 b4       	in	r0, 0x29	; 41
 628:	00 fe       	sbrs	r0, 0
 62a:	fd cf       	rjmp	.-6      	; 0x626 <__vector_10+0xb4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 62c:	80 91 d8 00 	lds	r24, 0x00D8
 630:	8f 7d       	andi	r24, 0xDF	; 223
 632:	80 93 d8 00 	sts	0x00D8, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUPI);
 636:	80 91 e1 00 	lds	r24, 0x00E1
 63a:	8f 7e       	andi	r24, 0xEF	; 239
 63c:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUPI);
 640:	80 91 e2 00 	lds	r24, 0x00E2
 644:	8f 7e       	andi	r24, 0xEF	; 239
 646:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPI);
 64a:	80 91 e2 00 	lds	r24, 0x00E2
 64e:	81 60       	ori	r24, 0x01	; 1
 650:	80 93 e2 00 	sts	0x00E2, r24

		if (USB_ConfigurationNumber)
 654:	80 91 5d 01 	lds	r24, 0x015D
 658:	88 23       	and	r24, r24
 65a:	31 f4       	brne	.+12     	; 0x668 <__vector_10+0xf6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 65c:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 660:	87 fd       	sbrc	r24, 7
 662:	02 c0       	rjmp	.+4      	; 0x668 <__vector_10+0xf6>
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	01 c0       	rjmp	.+2      	; 0x66a <__vector_10+0xf8>
 668:	84 e0       	ldi	r24, 0x04	; 4
 66a:	80 93 5f 01 	sts	0x015F, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 66e:	b3 d1       	rcall	.+870    	; 0x9d6 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 670:	80 91 e1 00 	lds	r24, 0x00E1
 674:	83 ff       	sbrs	r24, 3
 676:	22 c0       	rjmp	.+68     	; 0x6bc <__vector_10+0x14a>
 678:	80 91 e2 00 	lds	r24, 0x00E2
 67c:	83 ff       	sbrs	r24, 3
 67e:	1e c0       	rjmp	.+60     	; 0x6bc <__vector_10+0x14a>
	{
		USB_INT_Clear(USB_INT_EORSTI);
 680:	80 91 e1 00 	lds	r24, 0x00E1
 684:	87 7f       	andi	r24, 0xF7	; 247
 686:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
 68a:	82 e0       	ldi	r24, 0x02	; 2
 68c:	80 93 5f 01 	sts	0x015F, r24
		USB_ConfigurationNumber = 0;
 690:	10 92 5d 01 	sts	0x015D, r1

		USB_INT_Clear(USB_INT_SUSPI);
 694:	80 91 e1 00 	lds	r24, 0x00E1
 698:	8e 7f       	andi	r24, 0xFE	; 254
 69a:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPI);
 69e:	80 91 e2 00 	lds	r24, 0x00E2
 6a2:	8e 7f       	andi	r24, 0xFE	; 254
 6a4:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
 6a8:	80 91 e2 00 	lds	r24, 0x00E2
 6ac:	80 61       	ori	r24, 0x10	; 16
 6ae:	80 93 e2 00 	sts	0x00E2, r24
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	60 e0       	ldi	r22, 0x00	; 0
 6b6:	42 e0       	ldi	r20, 0x02	; 2
 6b8:	93 de       	rcall	.-730    	; 0x3e0 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 6ba:	8d d1       	rcall	.+794    	; 0x9d6 <USB_Event_Stub>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 6bc:	80 91 e1 00 	lds	r24, 0x00E1
 6c0:	82 ff       	sbrs	r24, 2
 6c2:	0a c0       	rjmp	.+20     	; 0x6d8 <__vector_10+0x166>
 6c4:	80 91 e2 00 	lds	r24, 0x00E2
 6c8:	82 ff       	sbrs	r24, 2
 6ca:	06 c0       	rjmp	.+12     	; 0x6d8 <__vector_10+0x166>
	{
		USB_INT_Clear(USB_INT_SOFI);
 6cc:	80 91 e1 00 	lds	r24, 0x00E1
 6d0:	8b 7f       	andi	r24, 0xFB	; 251
 6d2:	80 93 e1 00 	sts	0x00E1, r24

		EVENT_USB_Device_StartOfFrame();
 6d6:	7f d1       	rcall	.+766    	; 0x9d6 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 6d8:	ff 91       	pop	r31
 6da:	ef 91       	pop	r30
 6dc:	bf 91       	pop	r27
 6de:	af 91       	pop	r26
 6e0:	9f 91       	pop	r25
 6e2:	8f 91       	pop	r24
 6e4:	7f 91       	pop	r23
 6e6:	6f 91       	pop	r22
 6e8:	5f 91       	pop	r21
 6ea:	4f 91       	pop	r20
 6ec:	3f 91       	pop	r19
 6ee:	2f 91       	pop	r18
 6f0:	0f 90       	pop	r0
 6f2:	0b be       	out	0x3b, r0	; 59
 6f4:	0f 90       	pop	r0
 6f6:	0f be       	out	0x3f, r0	; 63
 6f8:	0f 90       	pop	r0
 6fa:	1f 90       	pop	r1
 6fc:	18 95       	reti

000006fe <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 6fe:	0f 93       	push	r16
 700:	1f 93       	push	r17
 702:	df 93       	push	r29
 704:	cf 93       	push	r28
 706:	cd b7       	in	r28, 0x3d	; 61
 708:	de b7       	in	r29, 0x3e	; 62
 70a:	ac 97       	sbiw	r28, 0x2c	; 44
 70c:	0f b6       	in	r0, 0x3f	; 63
 70e:	f8 94       	cli
 710:	de bf       	out	0x3e, r29	; 62
 712:	0f be       	out	0x3f, r0	; 63
 714:	cd bf       	out	0x3d, r28	; 61
 716:	e0 e6       	ldi	r30, 0x60	; 96
 718:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 71a:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
 71e:	81 93       	st	Z+, r24

void USB_Device_ProcessControlRequest(void)
{
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 720:	21 e0       	ldi	r18, 0x01	; 1
 722:	e8 36       	cpi	r30, 0x68	; 104
 724:	f2 07       	cpc	r31, r18
 726:	c9 f7       	brne	.-14     	; 0x71a <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_Byte();

	EVENT_USB_Device_ControlRequest();
 728:	91 dd       	rcall	.-1246   	; 0x24c <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 72a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 72e:	83 ff       	sbrs	r24, 3
 730:	39 c1       	rjmp	.+626    	; 0x9a4 <USB_Device_ProcessControlRequest+0x2a6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 732:	80 91 60 01 	lds	r24, 0x0160

		switch (USB_ControlRequest.bRequest)
 736:	30 91 61 01 	lds	r19, 0x0161
 73a:	35 30       	cpi	r19, 0x05	; 5
 73c:	09 f4       	brne	.+2      	; 0x740 <USB_Device_ProcessControlRequest+0x42>
 73e:	87 c0       	rjmp	.+270    	; 0x84e <USB_Device_ProcessControlRequest+0x150>
 740:	36 30       	cpi	r19, 0x06	; 6
 742:	40 f4       	brcc	.+16     	; 0x754 <USB_Device_ProcessControlRequest+0x56>
 744:	31 30       	cpi	r19, 0x01	; 1
 746:	c9 f1       	breq	.+114    	; 0x7ba <USB_Device_ProcessControlRequest+0xbc>
 748:	31 30       	cpi	r19, 0x01	; 1
 74a:	70 f0       	brcs	.+28     	; 0x768 <USB_Device_ProcessControlRequest+0x6a>
 74c:	33 30       	cpi	r19, 0x03	; 3
 74e:	09 f0       	breq	.+2      	; 0x752 <USB_Device_ProcessControlRequest+0x54>
 750:	29 c1       	rjmp	.+594    	; 0x9a4 <USB_Device_ProcessControlRequest+0x2a6>
 752:	33 c0       	rjmp	.+102    	; 0x7ba <USB_Device_ProcessControlRequest+0xbc>
 754:	38 30       	cpi	r19, 0x08	; 8
 756:	09 f4       	brne	.+2      	; 0x75a <USB_Device_ProcessControlRequest+0x5c>
 758:	f7 c0       	rjmp	.+494    	; 0x948 <USB_Device_ProcessControlRequest+0x24a>
 75a:	39 30       	cpi	r19, 0x09	; 9
 75c:	09 f4       	brne	.+2      	; 0x760 <USB_Device_ProcessControlRequest+0x62>
 75e:	06 c1       	rjmp	.+524    	; 0x96c <USB_Device_ProcessControlRequest+0x26e>
 760:	36 30       	cpi	r19, 0x06	; 6
 762:	09 f0       	breq	.+2      	; 0x766 <USB_Device_ProcessControlRequest+0x68>
 764:	1f c1       	rjmp	.+574    	; 0x9a4 <USB_Device_ProcessControlRequest+0x2a6>
 766:	99 c0       	rjmp	.+306    	; 0x89a <USB_Device_ProcessControlRequest+0x19c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 768:	80 38       	cpi	r24, 0x80	; 128
 76a:	21 f0       	breq	.+8      	; 0x774 <USB_Device_ProcessControlRequest+0x76>
 76c:	82 38       	cpi	r24, 0x82	; 130
 76e:	09 f0       	breq	.+2      	; 0x772 <USB_Device_ProcessControlRequest+0x74>
 770:	19 c1       	rjmp	.+562    	; 0x9a4 <USB_Device_ProcessControlRequest+0x2a6>
 772:	08 c0       	rjmp	.+16     	; 0x784 <USB_Device_ProcessControlRequest+0x86>
 774:	90 91 5b 01 	lds	r25, 0x015B
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
 778:	80 91 5c 01 	lds	r24, 0x015C
 77c:	88 23       	and	r24, r24
 77e:	99 f0       	breq	.+38     	; 0x7a6 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 780:	92 60       	ori	r25, 0x02	; 2
 782:	11 c0       	rjmp	.+34     	; 0x7a6 <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 784:	80 91 64 01 	lds	r24, 0x0164
 788:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 78a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 78e:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	25 e0       	ldi	r18, 0x05	; 5
 796:	96 95       	lsr	r25
 798:	87 95       	ror	r24
 79a:	2a 95       	dec	r18
 79c:	e1 f7       	brne	.-8      	; 0x796 <USB_Device_ProcessControlRequest+0x98>
 79e:	98 2f       	mov	r25, r24
 7a0:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 7a2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 7a6:	80 91 e8 00 	lds	r24, 0x00E8
 7aa:	87 7f       	andi	r24, 0xF7	; 247
 7ac:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
 7b0:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Word >> 8);
 7b4:	10 92 f1 00 	sts	0x00F1, r1
 7b8:	d2 c0       	rjmp	.+420    	; 0x95e <USB_Device_ProcessControlRequest+0x260>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 7ba:	88 23       	and	r24, r24
 7bc:	19 f0       	breq	.+6      	; 0x7c4 <USB_Device_ProcessControlRequest+0xc6>
 7be:	82 30       	cpi	r24, 0x02	; 2
 7c0:	09 f0       	breq	.+2      	; 0x7c4 <USB_Device_ProcessControlRequest+0xc6>
 7c2:	f0 c0       	rjmp	.+480    	; 0x9a4 <USB_Device_ProcessControlRequest+0x2a6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	8f 71       	andi	r24, 0x1F	; 31
 7c8:	90 70       	andi	r25, 0x00	; 0
 7ca:	00 97       	sbiw	r24, 0x00	; 0
 7cc:	21 f0       	breq	.+8      	; 0x7d6 <USB_Device_ProcessControlRequest+0xd8>
 7ce:	02 97       	sbiw	r24, 0x02	; 2
 7d0:	09 f0       	breq	.+2      	; 0x7d4 <USB_Device_ProcessControlRequest+0xd6>
 7d2:	e8 c0       	rjmp	.+464    	; 0x9a4 <USB_Device_ProcessControlRequest+0x2a6>
 7d4:	0c c0       	rjmp	.+24     	; 0x7ee <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 7d6:	80 91 62 01 	lds	r24, 0x0162
 7da:	81 30       	cpi	r24, 0x01	; 1
 7dc:	09 f0       	breq	.+2      	; 0x7e0 <USB_Device_ProcessControlRequest+0xe2>
 7de:	e2 c0       	rjmp	.+452    	; 0x9a4 <USB_Device_ProcessControlRequest+0x2a6>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 7e0:	10 92 5c 01 	sts	0x015C, r1
 7e4:	33 30       	cpi	r19, 0x03	; 3
 7e6:	69 f5       	brne	.+90     	; 0x842 <USB_Device_ProcessControlRequest+0x144>
 7e8:	80 93 5c 01 	sts	0x015C, r24
 7ec:	2a c0       	rjmp	.+84     	; 0x842 <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 7ee:	80 91 62 01 	lds	r24, 0x0162
 7f2:	88 23       	and	r24, r24
 7f4:	31 f5       	brne	.+76     	; 0x842 <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 7f6:	20 91 64 01 	lds	r18, 0x0164
 7fa:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 7fc:	09 f4       	brne	.+2      	; 0x800 <USB_Device_ProcessControlRequest+0x102>
 7fe:	d2 c0       	rjmp	.+420    	; 0x9a4 <USB_Device_ProcessControlRequest+0x2a6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 800:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 804:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 808:	80 ff       	sbrs	r24, 0
 80a:	1b c0       	rjmp	.+54     	; 0x842 <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 80c:	33 30       	cpi	r19, 0x03	; 3
 80e:	21 f4       	brne	.+8      	; 0x818 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 810:	80 91 eb 00 	lds	r24, 0x00EB
 814:	80 62       	ori	r24, 0x20	; 32
 816:	13 c0       	rjmp	.+38     	; 0x83e <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 818:	80 91 eb 00 	lds	r24, 0x00EB
 81c:	80 61       	ori	r24, 0x10	; 16
 81e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	02 c0       	rjmp	.+4      	; 0x82c <USB_Device_ProcessControlRequest+0x12e>
 828:	88 0f       	add	r24, r24
 82a:	99 1f       	adc	r25, r25
 82c:	2a 95       	dec	r18
 82e:	e2 f7       	brpl	.-8      	; 0x828 <USB_Device_ProcessControlRequest+0x12a>
 830:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 834:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 838:	80 91 eb 00 	lds	r24, 0x00EB
 83c:	88 60       	ori	r24, 0x08	; 8
 83e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 842:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 846:	80 91 e8 00 	lds	r24, 0x00E8
 84a:	87 7f       	andi	r24, 0xF7	; 247
 84c:	8b c0       	rjmp	.+278    	; 0x964 <USB_Device_ProcessControlRequest+0x266>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 84e:	88 23       	and	r24, r24
 850:	09 f0       	breq	.+2      	; 0x854 <USB_Device_ProcessControlRequest+0x156>
 852:	a8 c0       	rjmp	.+336    	; 0x9a4 <USB_Device_ProcessControlRequest+0x2a6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 854:	10 91 62 01 	lds	r17, 0x0162
 858:	1f 77       	andi	r17, 0x7F	; 127

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 85a:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 85c:	f8 94       	cli
 85e:	80 91 e8 00 	lds	r24, 0x00E8
 862:	87 7f       	andi	r24, 0xF7	; 247
 864:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearSETUP();

		Endpoint_ClearStatusStage();
 868:	ce dd       	rcall	.-1124   	; 0x406 <Endpoint_ClearStatusStage>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 86a:	80 91 e8 00 	lds	r24, 0x00E8

		while (!(Endpoint_IsINReady()));
 86e:	80 ff       	sbrs	r24, 0
 870:	fc cf       	rjmp	.-8      	; 0x86a <USB_Device_ProcessControlRequest+0x16c>

		USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 872:	11 23       	and	r17, r17
 874:	11 f4       	brne	.+4      	; 0x87a <USB_Device_ProcessControlRequest+0x17c>
 876:	82 e0       	ldi	r24, 0x02	; 2
 878:	01 c0       	rjmp	.+2      	; 0x87c <USB_Device_ProcessControlRequest+0x17e>
 87a:	83 e0       	ldi	r24, 0x03	; 3
 87c:	80 93 5f 01 	sts	0x015F, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
 880:	80 91 e3 00 	lds	r24, 0x00E3
 884:	80 78       	andi	r24, 0x80	; 128
 886:	18 2b       	or	r17, r24
 888:	10 93 e3 00 	sts	0x00E3, r17
				UDADDR |= (1 << ADDEN);
 88c:	80 91 e3 00 	lds	r24, 0x00E3
 890:	80 68       	ori	r24, 0x80	; 128
 892:	80 93 e3 00 	sts	0x00E3, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 896:	0f bf       	out	0x3f, r16	; 63
    __asm__ volatile ("" ::: "memory");
 898:	85 c0       	rjmp	.+266    	; 0x9a4 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 89a:	80 58       	subi	r24, 0x80	; 128
 89c:	82 30       	cpi	r24, 0x02	; 2
 89e:	08 f0       	brcs	.+2      	; 0x8a2 <USB_Device_ProcessControlRequest+0x1a4>
 8a0:	81 c0       	rjmp	.+258    	; 0x9a4 <USB_Device_ProcessControlRequest+0x2a6>
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 8a2:	80 91 62 01 	lds	r24, 0x0162
 8a6:	90 91 63 01 	lds	r25, 0x0163
 8aa:	23 e0       	ldi	r18, 0x03	; 3
 8ac:	8c 3d       	cpi	r24, 0xDC	; 220
 8ae:	92 07       	cpc	r25, r18
 8b0:	99 f5       	brne	.+102    	; 0x918 <USB_Device_ProcessControlRequest+0x21a>
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 8b2:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 8b4:	f8 94       	cli
 8b6:	de 01       	movw	r26, r28
 8b8:	15 96       	adiw	r26, 0x05	; 5
 8ba:	6e e0       	ldi	r22, 0x0E	; 14
 8bc:	40 e0       	ldi	r20, 0x00	; 0
 8be:	50 e0       	ldi	r21, 0x00	; 0
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 8c0:	11 e2       	ldi	r17, 0x21	; 33
 8c2:	e6 2f       	mov	r30, r22
 8c4:	f0 e0       	ldi	r31, 0x00	; 0
 8c6:	10 93 57 00 	sts	0x0057, r17
 8ca:	84 91       	lpm	r24, Z+

			if (SerialCharNum & 0x01)
 8cc:	40 ff       	sbrs	r20, 0
 8ce:	03 c0       	rjmp	.+6      	; 0x8d6 <USB_Device_ProcessControlRequest+0x1d8>
			{
				SerialByte >>= 4;
 8d0:	82 95       	swap	r24
 8d2:	8f 70       	andi	r24, 0x0F	; 15
				SigReadAddress++;
 8d4:	6f 5f       	subi	r22, 0xFF	; 255
			}

			SerialByte &= 0x0F;
 8d6:	8f 70       	andi	r24, 0x0F	; 15
 8d8:	28 2f       	mov	r18, r24
 8da:	30 e0       	ldi	r19, 0x00	; 0

			SignatureDescriptor.UnicodeString[SerialCharNum] = (SerialByte >= 10) ?
 8dc:	8a 30       	cpi	r24, 0x0A	; 10
 8de:	18 f0       	brcs	.+6      	; 0x8e6 <USB_Device_ProcessControlRequest+0x1e8>
 8e0:	c9 01       	movw	r24, r18
 8e2:	c7 96       	adiw	r24, 0x37	; 55
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <USB_Device_ProcessControlRequest+0x1ec>
 8e6:	c9 01       	movw	r24, r18
 8e8:	c0 96       	adiw	r24, 0x30	; 48
 8ea:	8d 93       	st	X+, r24
 8ec:	9d 93       	st	X+, r25
 8ee:	4f 5f       	subi	r20, 0xFF	; 255
 8f0:	5f 4f       	sbci	r21, 0xFF	; 255

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
 8f2:	44 31       	cpi	r20, 0x14	; 20
 8f4:	51 05       	cpc	r21, r1
 8f6:	29 f7       	brne	.-54     	; 0x8c2 <USB_Device_ProcessControlRequest+0x1c4>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 8f8:	7f bf       	out	0x3f, r23	; 63
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
 8fa:	8a e2       	ldi	r24, 0x2A	; 42
 8fc:	8b 83       	std	Y+3, r24	; 0x03
	{
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 8fe:	83 e0       	ldi	r24, 0x03	; 3
 900:	8c 83       	std	Y+4, r24	; 0x04
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 902:	80 91 e8 00 	lds	r24, 0x00E8
 906:	87 7f       	andi	r24, 0xF7	; 247
 908:	80 93 e8 00 	sts	0x00E8, r24
		}
	}

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 90c:	ce 01       	movw	r24, r28
 90e:	03 96       	adiw	r24, 0x03	; 3
 910:	6a e2       	ldi	r22, 0x2A	; 42
 912:	70 e0       	ldi	r23, 0x00	; 0
 914:	61 d0       	rcall	.+194    	; 0x9d8 <Endpoint_Write_Control_Stream_LE>
 916:	12 c0       	rjmp	.+36     	; 0x93c <USB_Device_ProcessControlRequest+0x23e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 918:	60 91 64 01 	lds	r22, 0x0164
 91c:	ae 01       	movw	r20, r28
 91e:	4f 5f       	subi	r20, 0xFF	; 255
 920:	5f 4f       	sbci	r21, 0xFF	; 255
 922:	30 dd       	rcall	.-1440   	; 0x384 <CALLBACK_USB_GetDescriptor>
 924:	bc 01       	movw	r22, r24
 926:	00 97       	sbiw	r24, 0x00	; 0
 928:	09 f4       	brne	.+2      	; 0x92c <USB_Device_ProcessControlRequest+0x22e>
 92a:	3c c0       	rjmp	.+120    	; 0x9a4 <USB_Device_ProcessControlRequest+0x2a6>
 92c:	80 91 e8 00 	lds	r24, 0x00E8
 930:	87 7f       	andi	r24, 0xF7	; 247
 932:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 936:	89 81       	ldd	r24, Y+1	; 0x01
 938:	9a 81       	ldd	r25, Y+2	; 0x02
 93a:	ac d0       	rcall	.+344    	; 0xa94 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 93c:	80 91 e8 00 	lds	r24, 0x00E8
 940:	8b 77       	andi	r24, 0x7B	; 123
 942:	80 93 e8 00 	sts	0x00E8, r24
 946:	2e c0       	rjmp	.+92     	; 0x9a4 <USB_Device_ProcessControlRequest+0x2a6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 948:	80 38       	cpi	r24, 0x80	; 128
 94a:	61 f5       	brne	.+88     	; 0x9a4 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 94c:	80 91 e8 00 	lds	r24, 0x00E8
 950:	87 7f       	andi	r24, 0xF7	; 247
 952:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
 956:	80 91 5d 01 	lds	r24, 0x015D
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 95a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 95e:	80 91 e8 00 	lds	r24, 0x00E8
 962:	8e 77       	andi	r24, 0x7E	; 126
 964:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 968:	4e dd       	rcall	.-1380   	; 0x406 <Endpoint_ClearStatusStage>
 96a:	1c c0       	rjmp	.+56     	; 0x9a4 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 96c:	88 23       	and	r24, r24
 96e:	d1 f4       	brne	.+52     	; 0x9a4 <USB_Device_ProcessControlRequest+0x2a6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 970:	90 91 62 01 	lds	r25, 0x0162
 974:	92 30       	cpi	r25, 0x02	; 2
 976:	b0 f4       	brcc	.+44     	; 0x9a4 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 978:	80 91 e8 00 	lds	r24, 0x00E8
 97c:	87 7f       	andi	r24, 0xF7	; 247
 97e:	80 93 e8 00 	sts	0x00E8, r24
	}
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 982:	90 93 5d 01 	sts	0x015D, r25

	Endpoint_ClearStatusStage();
 986:	3f dd       	rcall	.-1410   	; 0x406 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
 988:	80 91 5d 01 	lds	r24, 0x015D
 98c:	88 23       	and	r24, r24
 98e:	31 f4       	brne	.+12     	; 0x99c <USB_Device_ProcessControlRequest+0x29e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 990:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 994:	87 fd       	sbrc	r24, 7
 996:	02 c0       	rjmp	.+4      	; 0x99c <USB_Device_ProcessControlRequest+0x29e>
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	01 c0       	rjmp	.+2      	; 0x99e <USB_Device_ProcessControlRequest+0x2a0>
 99c:	84 e0       	ldi	r24, 0x04	; 4
 99e:	80 93 5f 01 	sts	0x015F, r24

	EVENT_USB_Device_ConfigurationChanged();
 9a2:	8e dc       	rcall	.-1764   	; 0x2c0 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9a4:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 9a8:	83 ff       	sbrs	r24, 3
 9aa:	0a c0       	rjmp	.+20     	; 0x9c0 <USB_Device_ProcessControlRequest+0x2c2>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 9ac:	80 91 eb 00 	lds	r24, 0x00EB
 9b0:	80 62       	ori	r24, 0x20	; 32
 9b2:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9b6:	80 91 e8 00 	lds	r24, 0x00E8
 9ba:	87 7f       	andi	r24, 0xF7	; 247
 9bc:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 9c0:	ac 96       	adiw	r28, 0x2c	; 44
 9c2:	0f b6       	in	r0, 0x3f	; 63
 9c4:	f8 94       	cli
 9c6:	de bf       	out	0x3e, r29	; 62
 9c8:	0f be       	out	0x3f, r0	; 63
 9ca:	cd bf       	out	0x3d, r28	; 61
 9cc:	cf 91       	pop	r28
 9ce:	df 91       	pop	r29
 9d0:	1f 91       	pop	r17
 9d2:	0f 91       	pop	r16
 9d4:	08 95       	ret

000009d6 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 9d6:	08 95       	ret

000009d8 <Endpoint_Write_Control_Stream_LE>:
 9d8:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 9da:	40 91 66 01 	lds	r20, 0x0166
 9de:	50 91 67 01 	lds	r21, 0x0167
 9e2:	46 17       	cp	r20, r22
 9e4:	57 07       	cpc	r21, r23
 9e6:	18 f4       	brcc	.+6      	; 0x9ee <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 9e8:	f9 01       	movw	r30, r18
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	3d c0       	rjmp	.+122    	; 0xa68 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 9ee:	61 15       	cp	r22, r1
 9f0:	71 05       	cpc	r23, r1
 9f2:	11 f0       	breq	.+4      	; 0x9f8 <Endpoint_Write_Control_Stream_LE+0x20>
 9f4:	ab 01       	movw	r20, r22
 9f6:	f8 cf       	rjmp	.-16     	; 0x9e8 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 9f8:	80 91 e8 00 	lds	r24, 0x00E8
 9fc:	8e 77       	andi	r24, 0x7E	; 126
 9fe:	80 93 e8 00 	sts	0x00E8, r24
 a02:	40 e0       	ldi	r20, 0x00	; 0
 a04:	50 e0       	ldi	r21, 0x00	; 0
 a06:	f0 cf       	rjmp	.-32     	; 0x9e8 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 a08:	80 91 5f 01 	lds	r24, 0x015F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 a0c:	88 23       	and	r24, r24
 a0e:	f1 f1       	breq	.+124    	; 0xa8c <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 a10:	85 30       	cpi	r24, 0x05	; 5
 a12:	f1 f1       	breq	.+124    	; 0xa90 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a14:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 a18:	83 ff       	sbrs	r24, 3
 a1a:	02 c0       	rjmp	.+4      	; 0xa20 <Endpoint_Write_Control_Stream_LE+0x48>
 a1c:	81 e0       	ldi	r24, 0x01	; 1
 a1e:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a20:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 a24:	82 fd       	sbrc	r24, 2
 a26:	2c c0       	rjmp	.+88     	; 0xa80 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a28:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 a2c:	80 ff       	sbrs	r24, 0
 a2e:	1c c0       	rjmp	.+56     	; 0xa68 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 a30:	20 91 f2 00 	lds	r18, 0x00F2
 a34:	30 91 f3 00 	lds	r19, 0x00F3
 a38:	07 c0       	rjmp	.+14     	; 0xa48 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 a3a:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 a3c:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
 a40:	41 50       	subi	r20, 0x01	; 1
 a42:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 a44:	2f 5f       	subi	r18, 0xFF	; 255
 a46:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 a48:	41 15       	cp	r20, r1
 a4a:	51 05       	cpc	r21, r1
 a4c:	19 f0       	breq	.+6      	; 0xa54 <Endpoint_Write_Control_Stream_LE+0x7c>
 a4e:	28 30       	cpi	r18, 0x08	; 8
 a50:	31 05       	cpc	r19, r1
 a52:	98 f3       	brcs	.-26     	; 0xa3a <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	28 30       	cpi	r18, 0x08	; 8
 a58:	31 05       	cpc	r19, r1
 a5a:	09 f4       	brne	.+2      	; 0xa5e <Endpoint_Write_Control_Stream_LE+0x86>
 a5c:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a5e:	80 91 e8 00 	lds	r24, 0x00E8
 a62:	8e 77       	andi	r24, 0x7E	; 126
 a64:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 a68:	41 15       	cp	r20, r1
 a6a:	51 05       	cpc	r21, r1
 a6c:	69 f6       	brne	.-102    	; 0xa08 <Endpoint_Write_Control_Stream_LE+0x30>
 a6e:	99 23       	and	r25, r25
 a70:	59 f6       	brne	.-106    	; 0xa08 <Endpoint_Write_Control_Stream_LE+0x30>
 a72:	06 c0       	rjmp	.+12     	; 0xa80 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 a74:	80 91 5f 01 	lds	r24, 0x015F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 a78:	88 23       	and	r24, r24
 a7a:	41 f0       	breq	.+16     	; 0xa8c <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 a7c:	85 30       	cpi	r24, 0x05	; 5
 a7e:	41 f0       	breq	.+16     	; 0xa90 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a80:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 a84:	82 ff       	sbrs	r24, 2
 a86:	f6 cf       	rjmp	.-20     	; 0xa74 <Endpoint_Write_Control_Stream_LE+0x9c>
 a88:	80 e0       	ldi	r24, 0x00	; 0
 a8a:	08 95       	ret
 a8c:	82 e0       	ldi	r24, 0x02	; 2
 a8e:	08 95       	ret
 a90:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 a92:	08 95       	ret

00000a94 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
 a94:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 a96:	40 91 66 01 	lds	r20, 0x0166
 a9a:	50 91 67 01 	lds	r21, 0x0167
 a9e:	46 17       	cp	r20, r22
 aa0:	57 07       	cpc	r21, r23
 aa2:	10 f4       	brcc	.+4      	; 0xaa8 <Endpoint_Write_Control_PStream_LE+0x14>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 aa4:	60 e0       	ldi	r22, 0x00	; 0
 aa6:	40 c0       	rjmp	.+128    	; 0xb28 <Endpoint_Write_Control_PStream_LE+0x94>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 aa8:	61 15       	cp	r22, r1
 aaa:	71 05       	cpc	r23, r1
 aac:	11 f0       	breq	.+4      	; 0xab2 <Endpoint_Write_Control_PStream_LE+0x1e>
 aae:	ab 01       	movw	r20, r22
 ab0:	f9 cf       	rjmp	.-14     	; 0xaa4 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ab2:	80 91 e8 00 	lds	r24, 0x00E8
 ab6:	8e 77       	andi	r24, 0x7E	; 126
 ab8:	80 93 e8 00 	sts	0x00E8, r24
 abc:	40 e0       	ldi	r20, 0x00	; 0
 abe:	50 e0       	ldi	r21, 0x00	; 0
 ac0:	f1 cf       	rjmp	.-30     	; 0xaa4 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 ac2:	80 91 5f 01 	lds	r24, 0x015F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 ac6:	88 23       	and	r24, r24
 ac8:	09 f4       	brne	.+2      	; 0xacc <Endpoint_Write_Control_PStream_LE+0x38>
 aca:	40 c0       	rjmp	.+128    	; 0xb4c <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 acc:	85 30       	cpi	r24, 0x05	; 5
 ace:	09 f4       	brne	.+2      	; 0xad2 <Endpoint_Write_Control_PStream_LE+0x3e>
 ad0:	3f c0       	rjmp	.+126    	; 0xb50 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ad2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 ad6:	83 ff       	sbrs	r24, 3
 ad8:	02 c0       	rjmp	.+4      	; 0xade <Endpoint_Write_Control_PStream_LE+0x4a>
 ada:	81 e0       	ldi	r24, 0x01	; 1
 adc:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 ade:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 ae2:	82 fd       	sbrc	r24, 2
 ae4:	2d c0       	rjmp	.+90     	; 0xb40 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 ae6:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 aea:	80 ff       	sbrs	r24, 0
 aec:	1d c0       	rjmp	.+58     	; 0xb28 <Endpoint_Write_Control_PStream_LE+0x94>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 aee:	80 91 f2 00 	lds	r24, 0x00F2
 af2:	90 91 f3 00 	lds	r25, 0x00F3
 af6:	09 c0       	rjmp	.+18     	; 0xb0a <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 af8:	f9 01       	movw	r30, r18
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 afa:	2f 5f       	subi	r18, 0xFF	; 255
 afc:	3f 4f       	sbci	r19, 0xFF	; 255
 afe:	e4 91       	lpm	r30, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 b00:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
 b04:	41 50       	subi	r20, 0x01	; 1
 b06:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 b08:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 b0a:	41 15       	cp	r20, r1
 b0c:	51 05       	cpc	r21, r1
 b0e:	19 f0       	breq	.+6      	; 0xb16 <Endpoint_Write_Control_PStream_LE+0x82>
 b10:	88 30       	cpi	r24, 0x08	; 8
 b12:	91 05       	cpc	r25, r1
 b14:	88 f3       	brcs	.-30     	; 0xaf8 <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 b16:	60 e0       	ldi	r22, 0x00	; 0
 b18:	08 97       	sbiw	r24, 0x08	; 8
 b1a:	09 f4       	brne	.+2      	; 0xb1e <Endpoint_Write_Control_PStream_LE+0x8a>
 b1c:	61 e0       	ldi	r22, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b1e:	80 91 e8 00 	lds	r24, 0x00E8
 b22:	8e 77       	andi	r24, 0x7E	; 126
 b24:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 b28:	41 15       	cp	r20, r1
 b2a:	51 05       	cpc	r21, r1
 b2c:	51 f6       	brne	.-108    	; 0xac2 <Endpoint_Write_Control_PStream_LE+0x2e>
 b2e:	66 23       	and	r22, r22
 b30:	41 f6       	brne	.-112    	; 0xac2 <Endpoint_Write_Control_PStream_LE+0x2e>
 b32:	06 c0       	rjmp	.+12     	; 0xb40 <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 b34:	80 91 5f 01 	lds	r24, 0x015F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 b38:	88 23       	and	r24, r24
 b3a:	41 f0       	breq	.+16     	; 0xb4c <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 b3c:	85 30       	cpi	r24, 0x05	; 5
 b3e:	41 f0       	breq	.+16     	; 0xb50 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 b40:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 b44:	82 ff       	sbrs	r24, 2
 b46:	f6 cf       	rjmp	.-20     	; 0xb34 <Endpoint_Write_Control_PStream_LE+0xa0>
 b48:	80 e0       	ldi	r24, 0x00	; 0
 b4a:	08 95       	ret
 b4c:	82 e0       	ldi	r24, 0x02	; 2
 b4e:	08 95       	ret
 b50:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 b52:	08 95       	ret

00000b54 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
 b54:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
 b56:	61 15       	cp	r22, r1
 b58:	71 05       	cpc	r23, r1
 b5a:	29 f4       	brne	.+10     	; 0xb66 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b5c:	80 91 e8 00 	lds	r24, 0x00E8
 b60:	8b 77       	andi	r24, 0x7B	; 123
 b62:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 b66:	f9 01       	movw	r30, r18
 b68:	22 c0       	rjmp	.+68     	; 0xbae <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 b6a:	80 91 5f 01 	lds	r24, 0x015F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 b6e:	88 23       	and	r24, r24
 b70:	71 f1       	breq	.+92     	; 0xbce <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 b72:	85 30       	cpi	r24, 0x05	; 5
 b74:	71 f1       	breq	.+92     	; 0xbd2 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b76:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 b7a:	83 ff       	sbrs	r24, 3
 b7c:	02 c0       	rjmp	.+4      	; 0xb82 <Endpoint_Read_Control_Stream_LE+0x2e>
 b7e:	81 e0       	ldi	r24, 0x01	; 1
 b80:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 b82:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 b86:	82 ff       	sbrs	r24, 2
 b88:	f0 cf       	rjmp	.-32     	; 0xb6a <Endpoint_Read_Control_Stream_LE+0x16>
 b8a:	06 c0       	rjmp	.+12     	; 0xb98 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 b8c:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 b90:	81 93       	st	Z+, r24
				Length--;
 b92:	61 50       	subi	r22, 0x01	; 1
 b94:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 b96:	31 f0       	breq	.+12     	; 0xba4 <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 b98:	80 91 f2 00 	lds	r24, 0x00F2
 b9c:	90 91 f3 00 	lds	r25, 0x00F3
 ba0:	89 2b       	or	r24, r25
 ba2:	a1 f7       	brne	.-24     	; 0xb8c <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 ba4:	80 91 e8 00 	lds	r24, 0x00E8
 ba8:	8b 77       	andi	r24, 0x7B	; 123
 baa:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
 bae:	61 15       	cp	r22, r1
 bb0:	71 05       	cpc	r23, r1
 bb2:	d9 f6       	brne	.-74     	; 0xb6a <Endpoint_Read_Control_Stream_LE+0x16>
 bb4:	06 c0       	rjmp	.+12     	; 0xbc2 <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 bb6:	80 91 5f 01 	lds	r24, 0x015F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 bba:	88 23       	and	r24, r24
 bbc:	41 f0       	breq	.+16     	; 0xbce <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 bbe:	85 30       	cpi	r24, 0x05	; 5
 bc0:	41 f0       	breq	.+16     	; 0xbd2 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 bc2:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
 bc6:	80 ff       	sbrs	r24, 0
 bc8:	f6 cf       	rjmp	.-20     	; 0xbb6 <Endpoint_Read_Control_Stream_LE+0x62>
 bca:	80 e0       	ldi	r24, 0x00	; 0
 bcc:	08 95       	ret
 bce:	82 e0       	ldi	r24, 0x02	; 2
 bd0:	08 95       	ret
 bd2:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 bd4:	08 95       	ret

00000bd6 <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
 bd6:	ff 92       	push	r15
 bd8:	0f 93       	push	r16
 bda:	1f 93       	push	r17
 bdc:	cf 93       	push	r28
 bde:	df 93       	push	r29
 be0:	18 2f       	mov	r17, r24
 be2:	09 2f       	mov	r16, r25
 be4:	eb 01       	movw	r28, r22
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 be6:	30 dc       	rcall	.-1952   	; 0x448 <Endpoint_WaitUntilReady>
 be8:	f8 2e       	mov	r15, r24
 bea:	88 23       	and	r24, r24
 bec:	d1 f4       	brne	.+52     	; 0xc22 <Endpoint_Write_Stream_LE+0x4c>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 bee:	81 2f       	mov	r24, r17
 bf0:	90 2f       	mov	r25, r16
 bf2:	9c 01       	movw	r18, r24
 bf4:	89 01       	movw	r16, r18
 bf6:	13 c0       	rjmp	.+38     	; 0xc1e <Endpoint_Write_Stream_LE+0x48>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 bf8:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 bfc:	85 fd       	sbrc	r24, 5
 bfe:	09 c0       	rjmp	.+18     	; 0xc12 <Endpoint_Write_Stream_LE+0x3c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c00:	80 91 e8 00 	lds	r24, 0x00E8
 c04:	8e 77       	andi	r24, 0x7E	; 126
 c06:	80 93 e8 00 	sts	0x00E8, r24
			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 c0a:	1e dc       	rcall	.-1988   	; 0x448 <Endpoint_WaitUntilReady>
 c0c:	88 23       	and	r24, r24
 c0e:	39 f0       	breq	.+14     	; 0xc1e <Endpoint_Write_Stream_LE+0x48>
 c10:	09 c0       	rjmp	.+18     	; 0xc24 <Endpoint_Write_Stream_LE+0x4e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 c12:	f8 01       	movw	r30, r16
 c14:	81 91       	ld	r24, Z+
 c16:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 c18:	80 93 f1 00 	sts	0x00F1, r24
			Length--;
 c1c:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
 c1e:	20 97       	sbiw	r28, 0x00	; 0
 c20:	59 f7       	brne	.-42     	; 0xbf8 <Endpoint_Write_Stream_LE+0x22>
 c22:	8f 2d       	mov	r24, r15
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 c24:	df 91       	pop	r29
 c26:	cf 91       	pop	r28
 c28:	1f 91       	pop	r17
 c2a:	0f 91       	pop	r16
 c2c:	ff 90       	pop	r15
 c2e:	08 95       	ret

00000c30 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 c30:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 c32:	80 91 5f 01 	lds	r24, 0x015F
 c36:	88 23       	and	r24, r24
 c38:	61 f0       	breq	.+24     	; 0xc52 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 c3a:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c3e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c42:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 c46:	83 ff       	sbrs	r24, 3
 c48:	01 c0       	rjmp	.+2      	; 0xc4c <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 c4a:	59 dd       	rcall	.-1358   	; 0x6fe <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 c4c:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c4e:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 c52:	1f 91       	pop	r17
 c54:	08 95       	ret

00000c56 <_exit>:
 c56:	f8 94       	cli

00000c58 <__stop_program>:
 c58:	ff cf       	rjmp	.-2      	; 0xc58 <__stop_program>
