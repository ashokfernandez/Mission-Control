
AudioInput.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aa8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000011  00800100  00800100  00000b1c  2**0
                  ALLOC
  2 .stab         000008f4  00000000  00000000  00000b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000013d  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000280  00000000  00000000  0000154d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000765  00000000  00000000  000017cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e15  00000000  00000000  00001f32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f84  00000000  00000000  00005d47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000345e  00000000  00000000  00006ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a0  00000000  00000000  0000a12c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001cb4  00000000  00000000  0000a4cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e48  00000000  00000000  0000c180  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  0000dfc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return Endpoint_IsConfigured();
}

void Endpoint_ClearEndpoints(void)
{
   0:	a9 c0       	rjmp	.+338    	; 0x154 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
   4:	c4 c0       	rjmp	.+392    	; 0x18e <__bad_interrupt>
   6:	00 00       	nop
   8:	c2 c0       	rjmp	.+388    	; 0x18e <__bad_interrupt>
   a:	00 00       	nop
   c:	c0 c0       	rjmp	.+384    	; 0x18e <__bad_interrupt>
   e:	00 00       	nop
  10:	be c0       	rjmp	.+380    	; 0x18e <__bad_interrupt>
  12:	00 00       	nop
  14:	bc c0       	rjmp	.+376    	; 0x18e <__bad_interrupt>
  16:	00 00       	nop
  18:	ba c0       	rjmp	.+372    	; 0x18e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b8 c0       	rjmp	.+368    	; 0x18e <__bad_interrupt>
  1e:	00 00       	nop
  20:	b6 c0       	rjmp	.+364    	; 0x18e <__bad_interrupt>
  22:	00 00       	nop
  24:	b4 c0       	rjmp	.+360    	; 0x18e <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c2       	rjmp	.+1138   	; 0x49c <__vector_10>
  2a:	00 00       	nop
  2c:	b0 c0       	rjmp	.+352    	; 0x18e <__bad_interrupt>
  2e:	00 00       	nop
  30:	ae c0       	rjmp	.+348    	; 0x18e <__bad_interrupt>
  32:	00 00       	nop
  34:	ac c0       	rjmp	.+344    	; 0x18e <__bad_interrupt>
  36:	00 00       	nop
  38:	aa c0       	rjmp	.+340    	; 0x18e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a8 c0       	rjmp	.+336    	; 0x18e <__bad_interrupt>
  3e:	00 00       	nop
  40:	a6 c0       	rjmp	.+332    	; 0x18e <__bad_interrupt>
  42:	00 00       	nop
  44:	a4 c0       	rjmp	.+328    	; 0x18e <__bad_interrupt>
  46:	00 00       	nop
  48:	a2 c0       	rjmp	.+324    	; 0x18e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a0 c0       	rjmp	.+320    	; 0x18e <__bad_interrupt>
  4e:	00 00       	nop
  50:	9e c0       	rjmp	.+316    	; 0x18e <__bad_interrupt>
  52:	00 00       	nop
  54:	b1 c0       	rjmp	.+354    	; 0x1b8 <__vector_21>
  56:	00 00       	nop
  58:	9a c0       	rjmp	.+308    	; 0x18e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	98 c0       	rjmp	.+304    	; 0x18e <__bad_interrupt>
  5e:	00 00       	nop
  60:	96 c0       	rjmp	.+300    	; 0x18e <__bad_interrupt>
  62:	00 00       	nop
  64:	94 c0       	rjmp	.+296    	; 0x18e <__bad_interrupt>
  66:	00 00       	nop
  68:	92 c0       	rjmp	.+292    	; 0x18e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	90 c0       	rjmp	.+288    	; 0x18e <__bad_interrupt>
  6e:	00 00       	nop
  70:	8e c0       	rjmp	.+284    	; 0x18e <__bad_interrupt>
  72:	00 00       	nop
  74:	8c c0       	rjmp	.+280    	; 0x18e <__bad_interrupt>
  76:	00 00       	nop
  78:	8a c0       	rjmp	.+276    	; 0x18e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	88 c0       	rjmp	.+272    	; 0x18e <__bad_interrupt>
  7e:	00 00       	nop
  80:	86 c0       	rjmp	.+268    	; 0x18e <__bad_interrupt>
  82:	00 00       	nop
  84:	84 c0       	rjmp	.+264    	; 0x18e <__bad_interrupt>
  86:	00 00       	nop
  88:	82 c0       	rjmp	.+260    	; 0x18e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	80 c0       	rjmp	.+256    	; 0x18e <__bad_interrupt>
  8e:	00 00       	nop
  90:	7e c0       	rjmp	.+252    	; 0x18e <__bad_interrupt>
  92:	00 00       	nop
  94:	7c c0       	rjmp	.+248    	; 0x18e <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 10 01 00 00 00 08 eb 03 47 20 01 00 01 02     ..........G ....
  a8:	00 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 64 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..d.....2.......
  ba:	00 00 09 24 01 00 01 1e 00 01 01 0c 24 02 01 01     ...$........$...
  ca:	02 00 01 00 00 00 00 09 24 03 02 01 01 00 01 00     ........$.......
  da:	09 04 01 00 00 01 02 00 00 09 04 01 01 01 01 02     ................
  ea:	00 00 07 24 01 02 01 01 00 0b 24 02 01 01 02 10     ...$......$.....
  fa:	01 80 bb 00 09 05 81 0d 00 01 01 00 00 07 25 01     ..............%.
 10a:	00 00 00 00                                         ....

0000010e <LanguageString>:
 10e:	04 03 09 04                                         ....

00000112 <ManufacturerString>:
 112:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
 122:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000012c <ProductString>:
 12c:	26 03 4c 00 55 00 46 00 41 00 20 00 41 00 75 00     &.L.U.F.A. .A.u.
 13c:	64 00 69 00 6f 00 20 00 49 00 6e 00 20 00 44 00     d.i.o. .I.n. .D.
 14c:	65 00 6d 00 6f 00 00 00                             e.m.o...

00000154 <__ctors_end>:
 154:	11 24       	eor	r1, r1
 156:	1f be       	out	0x3f, r1	; 63
 158:	cf ef       	ldi	r28, 0xFF	; 255
 15a:	d0 e2       	ldi	r29, 0x20	; 32
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	cd bf       	out	0x3d, r28	; 61

00000160 <__do_copy_data>:
 160:	11 e0       	ldi	r17, 0x01	; 1
 162:	a0 e0       	ldi	r26, 0x00	; 0
 164:	b1 e0       	ldi	r27, 0x01	; 1
 166:	e8 ea       	ldi	r30, 0xA8	; 168
 168:	fa e0       	ldi	r31, 0x0A	; 10
 16a:	00 e0       	ldi	r16, 0x00	; 0
 16c:	0b bf       	out	0x3b, r16	; 59
 16e:	02 c0       	rjmp	.+4      	; 0x174 <__do_copy_data+0x14>
 170:	07 90       	elpm	r0, Z+
 172:	0d 92       	st	X+, r0
 174:	a0 30       	cpi	r26, 0x00	; 0
 176:	b1 07       	cpc	r27, r17
 178:	d9 f7       	brne	.-10     	; 0x170 <__do_copy_data+0x10>

0000017a <__do_clear_bss>:
 17a:	11 e0       	ldi	r17, 0x01	; 1
 17c:	a0 e0       	ldi	r26, 0x00	; 0
 17e:	b1 e0       	ldi	r27, 0x01	; 1
 180:	01 c0       	rjmp	.+2      	; 0x184 <.do_clear_bss_start>

00000182 <.do_clear_bss_loop>:
 182:	1d 92       	st	X+, r1

00000184 <.do_clear_bss_start>:
 184:	a1 31       	cpi	r26, 0x11	; 17
 186:	b1 07       	cpc	r27, r17
 188:	e1 f7       	brne	.-8      	; 0x182 <.do_clear_bss_loop>
 18a:	bb d0       	rcall	.+374    	; 0x302 <main>
 18c:	8b c4       	rjmp	.+2326   	; 0xaa4 <_exit>

0000018e <__bad_interrupt>:
 18e:	38 cf       	rjmp	.-400    	; 0x0 <__vectors>

00000190 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 190:	8b b1       	in	r24, 0x0b	; 11
 192:	8f 70       	andi	r24, 0x0F	; 15
 194:	80 6a       	ori	r24, 0xA0	; 160
 196:	8b b9       	out	0x0b, r24	; 11
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
 198:	92 e0       	ldi	r25, 0x02	; 2
 19a:	90 93 6e 00 	sts	0x006E, r25
	OCR0A   = ((F_CPU / 8 / AUDIO_SAMPLE_FREQUENCY) - 1);
 19e:	83 e1       	ldi	r24, 0x13	; 19
 1a0:	87 bd       	out	0x27, r24	; 39
	TCCR0A  = (1 << WGM01);  // CTC mode
 1a2:	94 bd       	out	0x24, r25	; 36
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed
 1a4:	95 bd       	out	0x25, r25	; 37
}
 1a6:	08 95       	ret

000001a8 <EVENT_USB_Device_Disconnect>:
 *  the status LEDs, disables the sample update and PWM output timers and stops the USB and Audio management tasks.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Stop the sample reload timer */
	TCCR0B = 0;
 1a8:	15 bc       	out	0x25, r1	; 37

	/* Indicate streaming audio interface not selected */
	StreamingAudioInterfaceSelected = false;
 1aa:	10 92 00 01 	sts	0x0100, r1
 1ae:	8b b1       	in	r24, 0x0b	; 11
 1b0:	8f 70       	andi	r24, 0x0F	; 15
 1b2:	80 61       	ori	r24, 0x10	; 16
 1b4:	8b b9       	out	0x0b, r24	; 11

	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 1b6:	08 95       	ret

000001b8 <__vector_21>:
	}
}

/** ISR to handle the reloading of the data endpoint with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	2f 93       	push	r18
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 1c8:	20 91 e9 00 	lds	r18, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 1d2:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the audio stream endpoint */
	Endpoint_SelectEndpoint(AUDIO_STREAM_EPNUM);

	/* Check if the current endpoint can be written to and that the audio interface is enabled */
	if (Endpoint_IsINReady() && StreamingAudioInterfaceSelected)
 1d6:	80 ff       	sbrs	r24, 0
 1d8:	2b c0       	rjmp	.+86     	; 0x230 <__vector_21+0x78>
 1da:	80 91 00 01 	lds	r24, 0x0100
 1de:	88 23       	and	r24, r24
 1e0:	39 f1       	breq	.+78     	; 0x230 <__vector_21+0x78>
		#if defined(USE_TEST_TONE)
			static uint8_t SquareWaveSampleCount;
			static int16_t CurrentWaveValue;
			
			/* In test tone mode, generate a square wave at 1/256 of the sample rate */
			if (SquareWaveSampleCount++ == 0xFF)
 1e2:	80 91 03 01 	lds	r24, 0x0103
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	80 93 03 01 	sts	0x0103, r24
 1ec:	81 50       	subi	r24, 0x01	; 1
 1ee:	50 f4       	brcc	.+20     	; 0x204 <__vector_21+0x4c>
			  CurrentWaveValue ^= 0x8000;
 1f0:	80 91 01 01 	lds	r24, 0x0101
 1f4:	90 91 02 01 	lds	r25, 0x0102
 1f8:	80 50       	subi	r24, 0x00	; 0
 1fa:	90 48       	sbci	r25, 0x80	; 128
 1fc:	90 93 02 01 	sts	0x0102, r25
 200:	80 93 01 01 	sts	0x0101, r24
			
			/* Only generate audio if the board button is being pressed */
			AudioSample = (Buttons_GetStatus() & BUTTONS_BUTTON1) ? CurrentWaveValue : 0;
 204:	62 9b       	sbis	0x0c, 2	; 12
 206:	03 c0       	rjmp	.+6      	; 0x20e <__vector_21+0x56>
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	04 c0       	rjmp	.+8      	; 0x216 <__vector_21+0x5e>
 20e:	80 91 01 01 	lds	r24, 0x0101
 212:	90 91 02 01 	lds	r25, 0x0102
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
 216:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Word >> 8);
 21a:	90 93 f1 00 	sts	0x00F1, r25
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 21e:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write the sample to the buffer */
		Endpoint_Write_Word_LE(AudioSample);

		/* Check to see if the bank is now full */
		if (!(Endpoint_IsReadWriteAllowed()))
 222:	85 fd       	sbrc	r24, 5
 224:	05 c0       	rjmp	.+10     	; 0x230 <__vector_21+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 226:	80 91 e8 00 	lds	r24, 0x00E8
 22a:	8e 77       	andi	r24, 0x7E	; 126
 22c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 230:	27 70       	andi	r18, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 232:	20 93 e9 00 	sts	0x00E9, r18
			Endpoint_ClearIN();
		}
	}

	Endpoint_SelectEndpoint(PrevEndpoint);
}
 236:	9f 91       	pop	r25
 238:	8f 91       	pop	r24
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 246:	1f 93       	push	r17
	/* Process General and Audio specific control requests */
	switch (USB_ControlRequest.bRequest)
 248:	80 91 0a 01 	lds	r24, 0x010A
 24c:	8b 30       	cpi	r24, 0x0B	; 11
 24e:	a1 f4       	brne	.+40     	; 0x278 <EVENT_USB_Device_ControlRequest+0x32>
	{
		case REQ_SetInterface:
			/* Set Interface is not handled by the library, as its function is application-specific */
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_INTERFACE))
 250:	10 91 09 01 	lds	r17, 0x0109
 254:	11 30       	cpi	r17, 0x01	; 1
 256:	81 f4       	brne	.+32     	; 0x278 <EVENT_USB_Device_ControlRequest+0x32>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 258:	80 91 e8 00 	lds	r24, 0x00E8
 25c:	87 7f       	andi	r24, 0xF7	; 247
 25e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 262:	98 d0       	rcall	.+304    	; 0x394 <Endpoint_ClearStatusStage>

				/* Check if the host is enabling the audio interface (setting AlternateSetting to 1) */
				StreamingAudioInterfaceSelected = ((USB_ControlRequest.wValue) != 0);
 264:	10 92 00 01 	sts	0x0100, r1
 268:	80 91 0b 01 	lds	r24, 0x010B
 26c:	90 91 0c 01 	lds	r25, 0x010C
 270:	89 2b       	or	r24, r25
 272:	11 f0       	breq	.+4      	; 0x278 <EVENT_USB_Device_ControlRequest+0x32>
 274:	10 93 00 01 	sts	0x0100, r17
			}

			break;
	}
}
 278:	1f 91       	pop	r17
 27a:	08 95       	ret

0000027c <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	61 e4       	ldi	r22, 0x41	; 65
 280:	46 e5       	ldi	r20, 0x56	; 86
 282:	75 d0       	rcall	.+234    	; 0x36e <Endpoint_ConfigureEndpoint_Prv>
	/* Setup Audio Stream Endpoint */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(AUDIO_STREAM_EPNUM, EP_TYPE_ISOCHRONOUS, ENDPOINT_DIR_IN,
	                                            AUDIO_STREAM_EPSIZE, ENDPOINT_BANK_DOUBLE);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 284:	80 fd       	sbrc	r24, 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <EVENT_USB_Device_ConfigurationChanged+0x10>
 288:	90 e9       	ldi	r25, 0x90	; 144
 28a:	01 c0       	rjmp	.+2      	; 0x28e <EVENT_USB_Device_ConfigurationChanged+0x12>
 28c:	90 e6       	ldi	r25, 0x60	; 96
 28e:	8b b1       	in	r24, 0x0b	; 11
 290:	8f 70       	andi	r24, 0x0F	; 15
 292:	98 2b       	or	r25, r24
 294:	9b b9       	out	0x0b, r25	; 11
}
 296:	08 95       	ret

00000298 <SetupHardware>:
	}
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 29c:	84 b7       	in	r24, 0x34	; 52
 29e:	87 7f       	andi	r24, 0xF7	; 247
 2a0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 2a2:	88 e1       	ldi	r24, 0x18	; 24
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	f8 94       	cli
 2a8:	80 93 60 00 	sts	0x0060, r24
 2ac:	10 92 60 00 	sts	0x0060, r1
 2b0:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	20 e8       	ldi	r18, 0x80	; 128
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	f8 94       	cli
 2bc:	20 93 61 00 	sts	0x0061, r18
 2c0:	80 93 61 00 	sts	0x0061, r24
 2c4:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 2c6:	8a b1       	in	r24, 0x0a	; 10
 2c8:	80 6f       	ori	r24, 0xF0	; 240
 2ca:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 2cc:	8b b1       	in	r24, 0x0b	; 11
 2ce:	8f 70       	andi	r24, 0x0F	; 15
 2d0:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 2d2:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 2d4:	72 9a       	sbi	0x0e, 2	; 14
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
 2d6:	0a e7       	ldi	r16, 0x7A	; 122
 2d8:	10 e0       	ldi	r17, 0x00	; 0
 2da:	85 ea       	ldi	r24, 0xA5	; 165
 2dc:	f8 01       	movw	r30, r16
 2de:	80 83       	st	Z, r24
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__) || \
					 defined(__AVR_ATmega32U6__))
				DDRF  &= ~(1 << ChannelIndex);
 2e0:	82 98       	cbi	0x10, 2	; 16
				DIDR0 |=  (1 << ChannelIndex);
 2e2:	ee e7       	ldi	r30, 0x7E	; 126
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	84 60       	ori	r24, 0x04	; 4
 2ea:	80 83       	st	Z, r24
	/* Hardware Initialization */
	LEDs_Init();
	Buttons_Init();
	ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_32);
	ADC_SetupChannel(MIC_IN_ADC_CHANNEL);
	USB_Init();
 2ec:	c1 d0       	rcall	.+386    	; 0x470 <USB_Init>
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
 2ee:	82 e4       	ldi	r24, 0x42	; 66
 2f0:	80 93 7c 00 	sts	0x007C, r24
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
				#endif

				ADCSRA |= (1 << ADSC);
 2f4:	f8 01       	movw	r30, r16
 2f6:	80 81       	ld	r24, Z
 2f8:	80 64       	ori	r24, 0x40	; 64
 2fa:	80 83       	st	Z, r24

	/* Start the ADC conversion in free running mode */
	ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | MIC_IN_ADC_MUX_MASK);
}
 2fc:	1f 91       	pop	r17
 2fe:	0f 91       	pop	r16
 300:	08 95       	ret

00000302 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 302:	ca df       	rcall	.-108    	; 0x298 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 304:	8b b1       	in	r24, 0x0b	; 11
 306:	8f 70       	andi	r24, 0x0F	; 15
 308:	80 61       	ori	r24, 0x10	; 16
 30a:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
 30c:	78 94       	sei

	for (;;)
	{
		USB_USBTask();
 30e:	b7 d3       	rcall	.+1902   	; 0xa7e <USB_USBTask>
 310:	fe cf       	rjmp	.-4      	; 0x30e <main+0xc>

00000312 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 312:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 314:	92 30       	cpi	r25, 0x02	; 2
 316:	49 f0       	breq	.+18     	; 0x32a <CALLBACK_USB_GetDescriptor+0x18>
 318:	93 30       	cpi	r25, 0x03	; 3
 31a:	61 f0       	breq	.+24     	; 0x334 <CALLBACK_USB_GetDescriptor+0x22>
 31c:	91 30       	cpi	r25, 0x01	; 1
 31e:	f9 f4       	brne	.+62     	; 0x35e <CALLBACK_USB_GetDescriptor+0x4c>
 320:	e8 e9       	ldi	r30, 0x98	; 152
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	22 e1       	ldi	r18, 0x12	; 18
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	1e c0       	rjmp	.+60     	; 0x366 <CALLBACK_USB_GetDescriptor+0x54>
 32a:	ea ea       	ldi	r30, 0xAA	; 170
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	24 e6       	ldi	r18, 0x64	; 100
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	19 c0       	rjmp	.+50     	; 0x366 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 334:	81 30       	cpi	r24, 0x01	; 1
 336:	49 f0       	breq	.+18     	; 0x34a <CALLBACK_USB_GetDescriptor+0x38>
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	18 f0       	brcs	.+6      	; 0x342 <CALLBACK_USB_GetDescriptor+0x30>
 33c:	82 30       	cpi	r24, 0x02	; 2
 33e:	79 f4       	brne	.+30     	; 0x35e <CALLBACK_USB_GetDescriptor+0x4c>
 340:	08 c0       	rjmp	.+16     	; 0x352 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 342:	ee e0       	ldi	r30, 0x0E	; 14
 344:	f1 e0       	ldi	r31, 0x01	; 1
 346:	84 91       	lpm	r24, Z+
 348:	07 c0       	rjmp	.+14     	; 0x358 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 34a:	e2 e1       	ldi	r30, 0x12	; 18
 34c:	f1 e0       	ldi	r31, 0x01	; 1
 34e:	84 91       	lpm	r24, Z+
 350:	03 c0       	rjmp	.+6      	; 0x358 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 352:	ec e2       	ldi	r30, 0x2C	; 44
 354:	f1 e0       	ldi	r31, 0x01	; 1
 356:	84 91       	lpm	r24, Z+
 358:	28 2f       	mov	r18, r24
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	04 c0       	rjmp	.+8      	; 0x366 <CALLBACK_USB_GetDescriptor+0x54>
 35e:	e0 e0       	ldi	r30, 0x00	; 0
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	20 e0       	ldi	r18, 0x00	; 0
 364:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 366:	ed 93       	st	X+, r30
 368:	fc 93       	st	X, r31
	return Size;
}
 36a:	c9 01       	movw	r24, r18
 36c:	08 95       	ret

0000036e <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 36e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 372:	80 91 eb 00 	lds	r24, 0x00EB
 376:	81 60       	ori	r24, 0x01	; 1
 378:	80 93 eb 00 	sts	0x00EB, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
 37c:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
 380:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
 384:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 388:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
 38c:	88 1f       	adc	r24, r24
 38e:	88 27       	eor	r24, r24
 390:	88 1f       	adc	r24, r24
 392:	08 95       	ret

00000394 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 394:	80 91 09 01 	lds	r24, 0x0109
 398:	88 23       	and	r24, r24
 39a:	9c f4       	brge	.+38     	; 0x3c2 <Endpoint_ClearStatusStage+0x2e>
 39c:	04 c0       	rjmp	.+8      	; 0x3a6 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 39e:	80 91 08 01 	lds	r24, 0x0108
 3a2:	88 23       	and	r24, r24
 3a4:	b9 f0       	breq	.+46     	; 0x3d4 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3a6:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 3aa:	82 ff       	sbrs	r24, 2
 3ac:	f8 cf       	rjmp	.-16     	; 0x39e <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 3ae:	80 91 e8 00 	lds	r24, 0x00E8
 3b2:	8b 77       	andi	r24, 0x7B	; 123
 3b4:	80 93 e8 00 	sts	0x00E8, r24
 3b8:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 3ba:	80 91 08 01 	lds	r24, 0x0108
 3be:	88 23       	and	r24, r24
 3c0:	49 f0       	breq	.+18     	; 0x3d4 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 3c2:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 3c6:	80 ff       	sbrs	r24, 0
 3c8:	f8 cf       	rjmp	.-16     	; 0x3ba <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3ca:	80 91 e8 00 	lds	r24, 0x00E8
 3ce:	8e 77       	andi	r24, 0x7E	; 126
 3d0:	80 93 e8 00 	sts	0x00E8, r24
 3d4:	08 95       	ret

000003d6 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 3d6:	55 d0       	rcall	.+170    	; 0x482 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 3d8:	5c d0       	rcall	.+184    	; 0x492 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 3da:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
 3de:	98 2f       	mov	r25, r24
 3e0:	9f 77       	andi	r25, 0x7F	; 127
 3e2:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
 3e6:	80 68       	ori	r24, 0x80	; 128
 3e8:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 3ec:	8c e0       	ldi	r24, 0x0C	; 12
 3ee:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 3f0:	89 b5       	in	r24, 0x29	; 41
 3f2:	82 60       	ori	r24, 0x02	; 2
 3f4:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
 3f6:	09 b4       	in	r0, 0x29	; 41
 3f8:	00 fe       	sbrs	r0, 0
 3fa:	fd cf       	rjmp	.-6      	; 0x3f6 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 3fc:	80 91 d8 00 	lds	r24, 0x00D8
 400:	8f 7d       	andi	r24, 0xDF	; 223
 402:	80 93 d8 00 	sts	0x00D8, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 406:	80 91 d7 00 	lds	r24, 0x00D7
 40a:	80 68       	ori	r24, 0x80	; 128
 40c:	80 93 d7 00 	sts	0x00D7, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
 410:	10 92 08 01 	sts	0x0108, r1
	USB_ConfigurationNumber  = 0;
 414:	10 92 06 01 	sts	0x0106, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
 418:	10 92 05 01 	sts	0x0105, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
 41c:	10 92 04 01 	sts	0x0104, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 420:	80 91 e0 00 	lds	r24, 0x00E0
 424:	8b 7f       	andi	r24, 0xFB	; 251
 426:	80 93 e0 00 	sts	0x00E0, r24
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  USB_Device_SetLowSpeed();
	else
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUS);
 42a:	80 91 d8 00 	lds	r24, 0x00D8
 42e:	81 60       	ori	r24, 0x01	; 1
 430:	80 93 d8 00 	sts	0x00D8, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	42 e0       	ldi	r20, 0x02	; 2
 43a:	99 df       	rcall	.-206    	; 0x36e <Endpoint_ConfigureEndpoint_Prv>

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
							   ENDPOINT_BANK_SINGLE);

	USB_INT_Clear(USB_INT_SUSPI);
 43c:	80 91 e1 00 	lds	r24, 0x00E1
 440:	8e 7f       	andi	r24, 0xFE	; 254
 442:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPI);
 446:	80 91 e2 00 	lds	r24, 0x00E2
 44a:	81 60       	ori	r24, 0x01	; 1
 44c:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Enable(USB_INT_EORSTI);
 450:	80 91 e2 00 	lds	r24, 0x00E2
 454:	88 60       	ori	r24, 0x08	; 8
 456:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 45a:	80 91 e0 00 	lds	r24, 0x00E0
 45e:	8e 7f       	andi	r24, 0xFE	; 254
 460:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 464:	80 91 d8 00 	lds	r24, 0x00D8
 468:	80 61       	ori	r24, 0x10	; 16
 46a:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 46e:	08 95       	ret

00000470 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 470:	e7 ed       	ldi	r30, 0xD7	; 215
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	81 60       	ori	r24, 0x01	; 1
 478:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	80 93 07 01 	sts	0x0107, r24

	USB_ResetInterface();
}
 480:	aa cf       	rjmp	.-172    	; 0x3d6 <USB_ResetInterface>

00000482 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 482:	e8 ed       	ldi	r30, 0xD8	; 216
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	80 81       	ld	r24, Z
 488:	8c 7f       	andi	r24, 0xFC	; 252
 48a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 48c:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 490:	08 95       	ret

00000492 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
 492:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
 496:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 49a:	08 95       	ret

0000049c <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 49c:	1f 92       	push	r1
 49e:	0f 92       	push	r0
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	0f 92       	push	r0
 4a4:	0b b6       	in	r0, 0x3b	; 59
 4a6:	0f 92       	push	r0
 4a8:	11 24       	eor	r1, r1
 4aa:	2f 93       	push	r18
 4ac:	3f 93       	push	r19
 4ae:	4f 93       	push	r20
 4b0:	5f 93       	push	r21
 4b2:	6f 93       	push	r22
 4b4:	7f 93       	push	r23
 4b6:	8f 93       	push	r24
 4b8:	9f 93       	push	r25
 4ba:	af 93       	push	r26
 4bc:	bf 93       	push	r27
 4be:	ef 93       	push	r30
 4c0:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
 4c2:	80 91 da 00 	lds	r24, 0x00DA
 4c6:	80 ff       	sbrs	r24, 0
 4c8:	15 c0       	rjmp	.+42     	; 0x4f4 <__vector_10+0x58>
 4ca:	80 91 d8 00 	lds	r24, 0x00D8
 4ce:	80 ff       	sbrs	r24, 0
 4d0:	11 c0       	rjmp	.+34     	; 0x4f4 <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_VBUS);
 4d2:	80 91 da 00 	lds	r24, 0x00DA
 4d6:	8e 7f       	andi	r24, 0xFE	; 254
 4d8:	80 93 da 00 	sts	0x00DA, r24
				 *  \note This function is not available on some AVR models which do not support hardware VBUS monitoring.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 4dc:	80 91 d9 00 	lds	r24, 0x00D9

		if (USB_VBUS_GetStatus())
 4e0:	80 ff       	sbrs	r24, 0
 4e2:	05 c0       	rjmp	.+10     	; 0x4ee <__vector_10+0x52>
		{
			USB_DeviceState = DEVICE_STATE_Powered;
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	80 93 08 01 	sts	0x0108, r24
			EVENT_USB_Device_Connect();
 4ea:	52 de       	rcall	.-860    	; 0x190 <EVENT_USB_Device_Connect>
 4ec:	03 c0       	rjmp	.+6      	; 0x4f4 <__vector_10+0x58>
		}
		else
		{
			USB_DeviceState = DEVICE_STATE_Unattached;
 4ee:	10 92 08 01 	sts	0x0108, r1
			EVENT_USB_Device_Disconnect();
 4f2:	5a de       	rcall	.-844    	; 0x1a8 <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 4f4:	80 91 e1 00 	lds	r24, 0x00E1
 4f8:	80 ff       	sbrs	r24, 0
 4fa:	1d c0       	rjmp	.+58     	; 0x536 <__vector_10+0x9a>
 4fc:	80 91 e2 00 	lds	r24, 0x00E2
 500:	80 ff       	sbrs	r24, 0
 502:	19 c0       	rjmp	.+50     	; 0x536 <__vector_10+0x9a>
	{
		USB_INT_Clear(USB_INT_SUSPI);
 504:	80 91 e1 00 	lds	r24, 0x00E1
 508:	8e 7f       	andi	r24, 0xFE	; 254
 50a:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPI);
 50e:	80 91 e2 00 	lds	r24, 0x00E2
 512:	8e 7f       	andi	r24, 0xFE	; 254
 514:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
 518:	80 91 e2 00 	lds	r24, 0x00E2
 51c:	80 61       	ori	r24, 0x10	; 16
 51e:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 522:	80 91 d8 00 	lds	r24, 0x00D8
 526:	80 62       	ori	r24, 0x20	; 32
 528:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 52c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 52e:	85 e0       	ldi	r24, 0x05	; 5
 530:	80 93 08 01 	sts	0x0108, r24
		EVENT_USB_Device_Suspend();
 534:	e5 d1       	rcall	.+970    	; 0x900 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 536:	80 91 e1 00 	lds	r24, 0x00E1
 53a:	84 ff       	sbrs	r24, 4
 53c:	2e c0       	rjmp	.+92     	; 0x59a <__vector_10+0xfe>
 53e:	80 91 e2 00 	lds	r24, 0x00E2
 542:	84 ff       	sbrs	r24, 4
 544:	2a c0       	rjmp	.+84     	; 0x59a <__vector_10+0xfe>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 546:	8c e0       	ldi	r24, 0x0C	; 12
 548:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 54a:	89 b5       	in	r24, 0x29	; 41
 54c:	82 60       	ori	r24, 0x02	; 2
 54e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 550:	09 b4       	in	r0, 0x29	; 41
 552:	00 fe       	sbrs	r0, 0
 554:	fd cf       	rjmp	.-6      	; 0x550 <__vector_10+0xb4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 556:	80 91 d8 00 	lds	r24, 0x00D8
 55a:	8f 7d       	andi	r24, 0xDF	; 223
 55c:	80 93 d8 00 	sts	0x00D8, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUPI);
 560:	80 91 e1 00 	lds	r24, 0x00E1
 564:	8f 7e       	andi	r24, 0xEF	; 239
 566:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUPI);
 56a:	80 91 e2 00 	lds	r24, 0x00E2
 56e:	8f 7e       	andi	r24, 0xEF	; 239
 570:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPI);
 574:	80 91 e2 00 	lds	r24, 0x00E2
 578:	81 60       	ori	r24, 0x01	; 1
 57a:	80 93 e2 00 	sts	0x00E2, r24

		if (USB_ConfigurationNumber)
 57e:	80 91 06 01 	lds	r24, 0x0106
 582:	88 23       	and	r24, r24
 584:	31 f4       	brne	.+12     	; 0x592 <__vector_10+0xf6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 586:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 58a:	87 fd       	sbrc	r24, 7
 58c:	02 c0       	rjmp	.+4      	; 0x592 <__vector_10+0xf6>
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	01 c0       	rjmp	.+2      	; 0x594 <__vector_10+0xf8>
 592:	84 e0       	ldi	r24, 0x04	; 4
 594:	80 93 08 01 	sts	0x0108, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 598:	b3 d1       	rcall	.+870    	; 0x900 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 59a:	80 91 e1 00 	lds	r24, 0x00E1
 59e:	83 ff       	sbrs	r24, 3
 5a0:	22 c0       	rjmp	.+68     	; 0x5e6 <__vector_10+0x14a>
 5a2:	80 91 e2 00 	lds	r24, 0x00E2
 5a6:	83 ff       	sbrs	r24, 3
 5a8:	1e c0       	rjmp	.+60     	; 0x5e6 <__vector_10+0x14a>
	{
		USB_INT_Clear(USB_INT_EORSTI);
 5aa:	80 91 e1 00 	lds	r24, 0x00E1
 5ae:	87 7f       	andi	r24, 0xF7	; 247
 5b0:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
 5b4:	82 e0       	ldi	r24, 0x02	; 2
 5b6:	80 93 08 01 	sts	0x0108, r24
		USB_ConfigurationNumber = 0;
 5ba:	10 92 06 01 	sts	0x0106, r1

		USB_INT_Clear(USB_INT_SUSPI);
 5be:	80 91 e1 00 	lds	r24, 0x00E1
 5c2:	8e 7f       	andi	r24, 0xFE	; 254
 5c4:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPI);
 5c8:	80 91 e2 00 	lds	r24, 0x00E2
 5cc:	8e 7f       	andi	r24, 0xFE	; 254
 5ce:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
 5d2:	80 91 e2 00 	lds	r24, 0x00E2
 5d6:	80 61       	ori	r24, 0x10	; 16
 5d8:	80 93 e2 00 	sts	0x00E2, r24
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	60 e0       	ldi	r22, 0x00	; 0
 5e0:	42 e0       	ldi	r20, 0x02	; 2
 5e2:	c5 de       	rcall	.-630    	; 0x36e <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 5e4:	8d d1       	rcall	.+794    	; 0x900 <USB_Event_Stub>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 5e6:	80 91 e1 00 	lds	r24, 0x00E1
 5ea:	82 ff       	sbrs	r24, 2
 5ec:	0a c0       	rjmp	.+20     	; 0x602 <__vector_10+0x166>
 5ee:	80 91 e2 00 	lds	r24, 0x00E2
 5f2:	82 ff       	sbrs	r24, 2
 5f4:	06 c0       	rjmp	.+12     	; 0x602 <__vector_10+0x166>
	{
		USB_INT_Clear(USB_INT_SOFI);
 5f6:	80 91 e1 00 	lds	r24, 0x00E1
 5fa:	8b 7f       	andi	r24, 0xFB	; 251
 5fc:	80 93 e1 00 	sts	0x00E1, r24

		EVENT_USB_Device_StartOfFrame();
 600:	7f d1       	rcall	.+766    	; 0x900 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 602:	ff 91       	pop	r31
 604:	ef 91       	pop	r30
 606:	bf 91       	pop	r27
 608:	af 91       	pop	r26
 60a:	9f 91       	pop	r25
 60c:	8f 91       	pop	r24
 60e:	7f 91       	pop	r23
 610:	6f 91       	pop	r22
 612:	5f 91       	pop	r21
 614:	4f 91       	pop	r20
 616:	3f 91       	pop	r19
 618:	2f 91       	pop	r18
 61a:	0f 90       	pop	r0
 61c:	0b be       	out	0x3b, r0	; 59
 61e:	0f 90       	pop	r0
 620:	0f be       	out	0x3f, r0	; 63
 622:	0f 90       	pop	r0
 624:	1f 90       	pop	r1
 626:	18 95       	reti

00000628 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 628:	0f 93       	push	r16
 62a:	1f 93       	push	r17
 62c:	df 93       	push	r29
 62e:	cf 93       	push	r28
 630:	cd b7       	in	r28, 0x3d	; 61
 632:	de b7       	in	r29, 0x3e	; 62
 634:	ac 97       	sbiw	r28, 0x2c	; 44
 636:	0f b6       	in	r0, 0x3f	; 63
 638:	f8 94       	cli
 63a:	de bf       	out	0x3e, r29	; 62
 63c:	0f be       	out	0x3f, r0	; 63
 63e:	cd bf       	out	0x3d, r28	; 61
 640:	e9 e0       	ldi	r30, 0x09	; 9
 642:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 644:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
 648:	81 93       	st	Z+, r24

void USB_Device_ProcessControlRequest(void)
{
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 64a:	21 e0       	ldi	r18, 0x01	; 1
 64c:	e1 31       	cpi	r30, 0x11	; 17
 64e:	f2 07       	cpc	r31, r18
 650:	c9 f7       	brne	.-14     	; 0x644 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_Byte();

	EVENT_USB_Device_ControlRequest();
 652:	f9 dd       	rcall	.-1038   	; 0x246 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 654:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 658:	83 ff       	sbrs	r24, 3
 65a:	39 c1       	rjmp	.+626    	; 0x8ce <USB_Device_ProcessControlRequest+0x2a6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 65c:	80 91 09 01 	lds	r24, 0x0109

		switch (USB_ControlRequest.bRequest)
 660:	30 91 0a 01 	lds	r19, 0x010A
 664:	35 30       	cpi	r19, 0x05	; 5
 666:	09 f4       	brne	.+2      	; 0x66a <USB_Device_ProcessControlRequest+0x42>
 668:	87 c0       	rjmp	.+270    	; 0x778 <USB_Device_ProcessControlRequest+0x150>
 66a:	36 30       	cpi	r19, 0x06	; 6
 66c:	40 f4       	brcc	.+16     	; 0x67e <USB_Device_ProcessControlRequest+0x56>
 66e:	31 30       	cpi	r19, 0x01	; 1
 670:	c9 f1       	breq	.+114    	; 0x6e4 <USB_Device_ProcessControlRequest+0xbc>
 672:	31 30       	cpi	r19, 0x01	; 1
 674:	70 f0       	brcs	.+28     	; 0x692 <USB_Device_ProcessControlRequest+0x6a>
 676:	33 30       	cpi	r19, 0x03	; 3
 678:	09 f0       	breq	.+2      	; 0x67c <USB_Device_ProcessControlRequest+0x54>
 67a:	29 c1       	rjmp	.+594    	; 0x8ce <USB_Device_ProcessControlRequest+0x2a6>
 67c:	33 c0       	rjmp	.+102    	; 0x6e4 <USB_Device_ProcessControlRequest+0xbc>
 67e:	38 30       	cpi	r19, 0x08	; 8
 680:	09 f4       	brne	.+2      	; 0x684 <USB_Device_ProcessControlRequest+0x5c>
 682:	f7 c0       	rjmp	.+494    	; 0x872 <USB_Device_ProcessControlRequest+0x24a>
 684:	39 30       	cpi	r19, 0x09	; 9
 686:	09 f4       	brne	.+2      	; 0x68a <USB_Device_ProcessControlRequest+0x62>
 688:	06 c1       	rjmp	.+524    	; 0x896 <USB_Device_ProcessControlRequest+0x26e>
 68a:	36 30       	cpi	r19, 0x06	; 6
 68c:	09 f0       	breq	.+2      	; 0x690 <USB_Device_ProcessControlRequest+0x68>
 68e:	1f c1       	rjmp	.+574    	; 0x8ce <USB_Device_ProcessControlRequest+0x2a6>
 690:	99 c0       	rjmp	.+306    	; 0x7c4 <USB_Device_ProcessControlRequest+0x19c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 692:	80 38       	cpi	r24, 0x80	; 128
 694:	21 f0       	breq	.+8      	; 0x69e <USB_Device_ProcessControlRequest+0x76>
 696:	82 38       	cpi	r24, 0x82	; 130
 698:	09 f0       	breq	.+2      	; 0x69c <USB_Device_ProcessControlRequest+0x74>
 69a:	19 c1       	rjmp	.+562    	; 0x8ce <USB_Device_ProcessControlRequest+0x2a6>
 69c:	08 c0       	rjmp	.+16     	; 0x6ae <USB_Device_ProcessControlRequest+0x86>
 69e:	90 91 04 01 	lds	r25, 0x0104
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
 6a2:	80 91 05 01 	lds	r24, 0x0105
 6a6:	88 23       	and	r24, r24
 6a8:	99 f0       	breq	.+38     	; 0x6d0 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 6aa:	92 60       	ori	r25, 0x02	; 2
 6ac:	11 c0       	rjmp	.+34     	; 0x6d0 <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 6ae:	80 91 0d 01 	lds	r24, 0x010D
 6b2:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 6b4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 6b8:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	25 e0       	ldi	r18, 0x05	; 5
 6c0:	96 95       	lsr	r25
 6c2:	87 95       	ror	r24
 6c4:	2a 95       	dec	r18
 6c6:	e1 f7       	brne	.-8      	; 0x6c0 <USB_Device_ProcessControlRequest+0x98>
 6c8:	98 2f       	mov	r25, r24
 6ca:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 6cc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 6d0:	80 91 e8 00 	lds	r24, 0x00E8
 6d4:	87 7f       	andi	r24, 0xF7	; 247
 6d6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
 6da:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Word >> 8);
 6de:	10 92 f1 00 	sts	0x00F1, r1
 6e2:	d2 c0       	rjmp	.+420    	; 0x888 <USB_Device_ProcessControlRequest+0x260>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 6e4:	88 23       	and	r24, r24
 6e6:	19 f0       	breq	.+6      	; 0x6ee <USB_Device_ProcessControlRequest+0xc6>
 6e8:	82 30       	cpi	r24, 0x02	; 2
 6ea:	09 f0       	breq	.+2      	; 0x6ee <USB_Device_ProcessControlRequest+0xc6>
 6ec:	f0 c0       	rjmp	.+480    	; 0x8ce <USB_Device_ProcessControlRequest+0x2a6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	8f 71       	andi	r24, 0x1F	; 31
 6f2:	90 70       	andi	r25, 0x00	; 0
 6f4:	00 97       	sbiw	r24, 0x00	; 0
 6f6:	21 f0       	breq	.+8      	; 0x700 <USB_Device_ProcessControlRequest+0xd8>
 6f8:	02 97       	sbiw	r24, 0x02	; 2
 6fa:	09 f0       	breq	.+2      	; 0x6fe <USB_Device_ProcessControlRequest+0xd6>
 6fc:	e8 c0       	rjmp	.+464    	; 0x8ce <USB_Device_ProcessControlRequest+0x2a6>
 6fe:	0c c0       	rjmp	.+24     	; 0x718 <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 700:	80 91 0b 01 	lds	r24, 0x010B
 704:	81 30       	cpi	r24, 0x01	; 1
 706:	09 f0       	breq	.+2      	; 0x70a <USB_Device_ProcessControlRequest+0xe2>
 708:	e2 c0       	rjmp	.+452    	; 0x8ce <USB_Device_ProcessControlRequest+0x2a6>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 70a:	10 92 05 01 	sts	0x0105, r1
 70e:	33 30       	cpi	r19, 0x03	; 3
 710:	69 f5       	brne	.+90     	; 0x76c <USB_Device_ProcessControlRequest+0x144>
 712:	80 93 05 01 	sts	0x0105, r24
 716:	2a c0       	rjmp	.+84     	; 0x76c <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 718:	80 91 0b 01 	lds	r24, 0x010B
 71c:	88 23       	and	r24, r24
 71e:	31 f5       	brne	.+76     	; 0x76c <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 720:	20 91 0d 01 	lds	r18, 0x010D
 724:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 726:	09 f4       	brne	.+2      	; 0x72a <USB_Device_ProcessControlRequest+0x102>
 728:	d2 c0       	rjmp	.+420    	; 0x8ce <USB_Device_ProcessControlRequest+0x2a6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 72a:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 72e:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 732:	80 ff       	sbrs	r24, 0
 734:	1b c0       	rjmp	.+54     	; 0x76c <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 736:	33 30       	cpi	r19, 0x03	; 3
 738:	21 f4       	brne	.+8      	; 0x742 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 73a:	80 91 eb 00 	lds	r24, 0x00EB
 73e:	80 62       	ori	r24, 0x20	; 32
 740:	13 c0       	rjmp	.+38     	; 0x768 <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 742:	80 91 eb 00 	lds	r24, 0x00EB
 746:	80 61       	ori	r24, 0x10	; 16
 748:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	02 c0       	rjmp	.+4      	; 0x756 <USB_Device_ProcessControlRequest+0x12e>
 752:	88 0f       	add	r24, r24
 754:	99 1f       	adc	r25, r25
 756:	2a 95       	dec	r18
 758:	e2 f7       	brpl	.-8      	; 0x752 <USB_Device_ProcessControlRequest+0x12a>
 75a:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 75e:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 762:	80 91 eb 00 	lds	r24, 0x00EB
 766:	88 60       	ori	r24, 0x08	; 8
 768:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 76c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 770:	80 91 e8 00 	lds	r24, 0x00E8
 774:	87 7f       	andi	r24, 0xF7	; 247
 776:	8b c0       	rjmp	.+278    	; 0x88e <USB_Device_ProcessControlRequest+0x266>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 778:	88 23       	and	r24, r24
 77a:	09 f0       	breq	.+2      	; 0x77e <USB_Device_ProcessControlRequest+0x156>
 77c:	a8 c0       	rjmp	.+336    	; 0x8ce <USB_Device_ProcessControlRequest+0x2a6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 77e:	10 91 0b 01 	lds	r17, 0x010B
 782:	1f 77       	andi	r17, 0x7F	; 127

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 784:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 786:	f8 94       	cli
 788:	80 91 e8 00 	lds	r24, 0x00E8
 78c:	87 7f       	andi	r24, 0xF7	; 247
 78e:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearSETUP();

		Endpoint_ClearStatusStage();
 792:	00 de       	rcall	.-1024   	; 0x394 <Endpoint_ClearStatusStage>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 794:	80 91 e8 00 	lds	r24, 0x00E8

		while (!(Endpoint_IsINReady()));
 798:	80 ff       	sbrs	r24, 0
 79a:	fc cf       	rjmp	.-8      	; 0x794 <USB_Device_ProcessControlRequest+0x16c>

		USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 79c:	11 23       	and	r17, r17
 79e:	11 f4       	brne	.+4      	; 0x7a4 <USB_Device_ProcessControlRequest+0x17c>
 7a0:	82 e0       	ldi	r24, 0x02	; 2
 7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <USB_Device_ProcessControlRequest+0x17e>
 7a4:	83 e0       	ldi	r24, 0x03	; 3
 7a6:	80 93 08 01 	sts	0x0108, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
 7aa:	80 91 e3 00 	lds	r24, 0x00E3
 7ae:	80 78       	andi	r24, 0x80	; 128
 7b0:	18 2b       	or	r17, r24
 7b2:	10 93 e3 00 	sts	0x00E3, r17
				UDADDR |= (1 << ADDEN);
 7b6:	80 91 e3 00 	lds	r24, 0x00E3
 7ba:	80 68       	ori	r24, 0x80	; 128
 7bc:	80 93 e3 00 	sts	0x00E3, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 7c0:	0f bf       	out	0x3f, r16	; 63
    __asm__ volatile ("" ::: "memory");
 7c2:	85 c0       	rjmp	.+266    	; 0x8ce <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 7c4:	80 58       	subi	r24, 0x80	; 128
 7c6:	82 30       	cpi	r24, 0x02	; 2
 7c8:	08 f0       	brcs	.+2      	; 0x7cc <USB_Device_ProcessControlRequest+0x1a4>
 7ca:	81 c0       	rjmp	.+258    	; 0x8ce <USB_Device_ProcessControlRequest+0x2a6>
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 7cc:	80 91 0b 01 	lds	r24, 0x010B
 7d0:	90 91 0c 01 	lds	r25, 0x010C
 7d4:	23 e0       	ldi	r18, 0x03	; 3
 7d6:	8c 3d       	cpi	r24, 0xDC	; 220
 7d8:	92 07       	cpc	r25, r18
 7da:	99 f5       	brne	.+102    	; 0x842 <USB_Device_ProcessControlRequest+0x21a>
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 7dc:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 7de:	f8 94       	cli
 7e0:	de 01       	movw	r26, r28
 7e2:	15 96       	adiw	r26, 0x05	; 5
 7e4:	6e e0       	ldi	r22, 0x0E	; 14
 7e6:	40 e0       	ldi	r20, 0x00	; 0
 7e8:	50 e0       	ldi	r21, 0x00	; 0
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 7ea:	11 e2       	ldi	r17, 0x21	; 33
 7ec:	e6 2f       	mov	r30, r22
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	10 93 57 00 	sts	0x0057, r17
 7f4:	84 91       	lpm	r24, Z+

			if (SerialCharNum & 0x01)
 7f6:	40 ff       	sbrs	r20, 0
 7f8:	03 c0       	rjmp	.+6      	; 0x800 <USB_Device_ProcessControlRequest+0x1d8>
			{
				SerialByte >>= 4;
 7fa:	82 95       	swap	r24
 7fc:	8f 70       	andi	r24, 0x0F	; 15
				SigReadAddress++;
 7fe:	6f 5f       	subi	r22, 0xFF	; 255
			}

			SerialByte &= 0x0F;
 800:	8f 70       	andi	r24, 0x0F	; 15
 802:	28 2f       	mov	r18, r24
 804:	30 e0       	ldi	r19, 0x00	; 0

			SignatureDescriptor.UnicodeString[SerialCharNum] = (SerialByte >= 10) ?
 806:	8a 30       	cpi	r24, 0x0A	; 10
 808:	18 f0       	brcs	.+6      	; 0x810 <USB_Device_ProcessControlRequest+0x1e8>
 80a:	c9 01       	movw	r24, r18
 80c:	c7 96       	adiw	r24, 0x37	; 55
 80e:	02 c0       	rjmp	.+4      	; 0x814 <USB_Device_ProcessControlRequest+0x1ec>
 810:	c9 01       	movw	r24, r18
 812:	c0 96       	adiw	r24, 0x30	; 48
 814:	8d 93       	st	X+, r24
 816:	9d 93       	st	X+, r25
 818:	4f 5f       	subi	r20, 0xFF	; 255
 81a:	5f 4f       	sbci	r21, 0xFF	; 255

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
 81c:	44 31       	cpi	r20, 0x14	; 20
 81e:	51 05       	cpc	r21, r1
 820:	29 f7       	brne	.-54     	; 0x7ec <USB_Device_ProcessControlRequest+0x1c4>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 822:	7f bf       	out	0x3f, r23	; 63
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
 824:	8a e2       	ldi	r24, 0x2A	; 42
 826:	8b 83       	std	Y+3, r24	; 0x03
	{
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 828:	83 e0       	ldi	r24, 0x03	; 3
 82a:	8c 83       	std	Y+4, r24	; 0x04
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 82c:	80 91 e8 00 	lds	r24, 0x00E8
 830:	87 7f       	andi	r24, 0xF7	; 247
 832:	80 93 e8 00 	sts	0x00E8, r24
		}
	}

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 836:	ce 01       	movw	r24, r28
 838:	03 96       	adiw	r24, 0x03	; 3
 83a:	6a e2       	ldi	r22, 0x2A	; 42
 83c:	70 e0       	ldi	r23, 0x00	; 0
 83e:	61 d0       	rcall	.+194    	; 0x902 <Endpoint_Write_Control_Stream_LE>
 840:	12 c0       	rjmp	.+36     	; 0x866 <USB_Device_ProcessControlRequest+0x23e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 842:	60 91 0d 01 	lds	r22, 0x010D
 846:	ae 01       	movw	r20, r28
 848:	4f 5f       	subi	r20, 0xFF	; 255
 84a:	5f 4f       	sbci	r21, 0xFF	; 255
 84c:	62 dd       	rcall	.-1340   	; 0x312 <CALLBACK_USB_GetDescriptor>
 84e:	bc 01       	movw	r22, r24
 850:	00 97       	sbiw	r24, 0x00	; 0
 852:	09 f4       	brne	.+2      	; 0x856 <USB_Device_ProcessControlRequest+0x22e>
 854:	3c c0       	rjmp	.+120    	; 0x8ce <USB_Device_ProcessControlRequest+0x2a6>
 856:	80 91 e8 00 	lds	r24, 0x00E8
 85a:	87 7f       	andi	r24, 0xF7	; 247
 85c:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 860:	89 81       	ldd	r24, Y+1	; 0x01
 862:	9a 81       	ldd	r25, Y+2	; 0x02
 864:	ac d0       	rcall	.+344    	; 0x9be <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 866:	80 91 e8 00 	lds	r24, 0x00E8
 86a:	8b 77       	andi	r24, 0x7B	; 123
 86c:	80 93 e8 00 	sts	0x00E8, r24
 870:	2e c0       	rjmp	.+92     	; 0x8ce <USB_Device_ProcessControlRequest+0x2a6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 872:	80 38       	cpi	r24, 0x80	; 128
 874:	61 f5       	brne	.+88     	; 0x8ce <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 876:	80 91 e8 00 	lds	r24, 0x00E8
 87a:	87 7f       	andi	r24, 0xF7	; 247
 87c:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
 880:	80 91 06 01 	lds	r24, 0x0106
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 884:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 888:	80 91 e8 00 	lds	r24, 0x00E8
 88c:	8e 77       	andi	r24, 0x7E	; 126
 88e:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 892:	80 dd       	rcall	.-1280   	; 0x394 <Endpoint_ClearStatusStage>
 894:	1c c0       	rjmp	.+56     	; 0x8ce <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 896:	88 23       	and	r24, r24
 898:	d1 f4       	brne	.+52     	; 0x8ce <USB_Device_ProcessControlRequest+0x2a6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 89a:	90 91 0b 01 	lds	r25, 0x010B
 89e:	92 30       	cpi	r25, 0x02	; 2
 8a0:	b0 f4       	brcc	.+44     	; 0x8ce <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 8a2:	80 91 e8 00 	lds	r24, 0x00E8
 8a6:	87 7f       	andi	r24, 0xF7	; 247
 8a8:	80 93 e8 00 	sts	0x00E8, r24
	}
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 8ac:	90 93 06 01 	sts	0x0106, r25

	Endpoint_ClearStatusStage();
 8b0:	71 dd       	rcall	.-1310   	; 0x394 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
 8b2:	80 91 06 01 	lds	r24, 0x0106
 8b6:	88 23       	and	r24, r24
 8b8:	31 f4       	brne	.+12     	; 0x8c6 <USB_Device_ProcessControlRequest+0x29e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 8ba:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 8be:	87 fd       	sbrc	r24, 7
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <USB_Device_ProcessControlRequest+0x29e>
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <USB_Device_ProcessControlRequest+0x2a0>
 8c6:	84 e0       	ldi	r24, 0x04	; 4
 8c8:	80 93 08 01 	sts	0x0108, r24

	EVENT_USB_Device_ConfigurationChanged();
 8cc:	d7 dc       	rcall	.-1618   	; 0x27c <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 8ce:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 8d2:	83 ff       	sbrs	r24, 3
 8d4:	0a c0       	rjmp	.+20     	; 0x8ea <USB_Device_ProcessControlRequest+0x2c2>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 8d6:	80 91 eb 00 	lds	r24, 0x00EB
 8da:	80 62       	ori	r24, 0x20	; 32
 8dc:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 8e0:	80 91 e8 00 	lds	r24, 0x00E8
 8e4:	87 7f       	andi	r24, 0xF7	; 247
 8e6:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 8ea:	ac 96       	adiw	r28, 0x2c	; 44
 8ec:	0f b6       	in	r0, 0x3f	; 63
 8ee:	f8 94       	cli
 8f0:	de bf       	out	0x3e, r29	; 62
 8f2:	0f be       	out	0x3f, r0	; 63
 8f4:	cd bf       	out	0x3d, r28	; 61
 8f6:	cf 91       	pop	r28
 8f8:	df 91       	pop	r29
 8fa:	1f 91       	pop	r17
 8fc:	0f 91       	pop	r16
 8fe:	08 95       	ret

00000900 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 900:	08 95       	ret

00000902 <Endpoint_Write_Control_Stream_LE>:
 902:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 904:	40 91 0f 01 	lds	r20, 0x010F
 908:	50 91 10 01 	lds	r21, 0x0110
 90c:	46 17       	cp	r20, r22
 90e:	57 07       	cpc	r21, r23
 910:	18 f4       	brcc	.+6      	; 0x918 <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 912:	f9 01       	movw	r30, r18
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	3d c0       	rjmp	.+122    	; 0x992 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 918:	61 15       	cp	r22, r1
 91a:	71 05       	cpc	r23, r1
 91c:	11 f0       	breq	.+4      	; 0x922 <Endpoint_Write_Control_Stream_LE+0x20>
 91e:	ab 01       	movw	r20, r22
 920:	f8 cf       	rjmp	.-16     	; 0x912 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 922:	80 91 e8 00 	lds	r24, 0x00E8
 926:	8e 77       	andi	r24, 0x7E	; 126
 928:	80 93 e8 00 	sts	0x00E8, r24
 92c:	40 e0       	ldi	r20, 0x00	; 0
 92e:	50 e0       	ldi	r21, 0x00	; 0
 930:	f0 cf       	rjmp	.-32     	; 0x912 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 932:	80 91 08 01 	lds	r24, 0x0108

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 936:	88 23       	and	r24, r24
 938:	f1 f1       	breq	.+124    	; 0x9b6 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 93a:	85 30       	cpi	r24, 0x05	; 5
 93c:	f1 f1       	breq	.+124    	; 0x9ba <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 93e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 942:	83 ff       	sbrs	r24, 3
 944:	02 c0       	rjmp	.+4      	; 0x94a <Endpoint_Write_Control_Stream_LE+0x48>
 946:	81 e0       	ldi	r24, 0x01	; 1
 948:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 94a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 94e:	82 fd       	sbrc	r24, 2
 950:	2c c0       	rjmp	.+88     	; 0x9aa <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 952:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 956:	80 ff       	sbrs	r24, 0
 958:	1c c0       	rjmp	.+56     	; 0x992 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 95a:	20 91 f2 00 	lds	r18, 0x00F2
 95e:	30 91 f3 00 	lds	r19, 0x00F3
 962:	07 c0       	rjmp	.+14     	; 0x972 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 964:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 966:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
 96a:	41 50       	subi	r20, 0x01	; 1
 96c:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 96e:	2f 5f       	subi	r18, 0xFF	; 255
 970:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 972:	41 15       	cp	r20, r1
 974:	51 05       	cpc	r21, r1
 976:	19 f0       	breq	.+6      	; 0x97e <Endpoint_Write_Control_Stream_LE+0x7c>
 978:	28 30       	cpi	r18, 0x08	; 8
 97a:	31 05       	cpc	r19, r1
 97c:	98 f3       	brcs	.-26     	; 0x964 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	28 30       	cpi	r18, 0x08	; 8
 982:	31 05       	cpc	r19, r1
 984:	09 f4       	brne	.+2      	; 0x988 <Endpoint_Write_Control_Stream_LE+0x86>
 986:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 988:	80 91 e8 00 	lds	r24, 0x00E8
 98c:	8e 77       	andi	r24, 0x7E	; 126
 98e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 992:	41 15       	cp	r20, r1
 994:	51 05       	cpc	r21, r1
 996:	69 f6       	brne	.-102    	; 0x932 <Endpoint_Write_Control_Stream_LE+0x30>
 998:	99 23       	and	r25, r25
 99a:	59 f6       	brne	.-106    	; 0x932 <Endpoint_Write_Control_Stream_LE+0x30>
 99c:	06 c0       	rjmp	.+12     	; 0x9aa <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 99e:	80 91 08 01 	lds	r24, 0x0108

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 9a2:	88 23       	and	r24, r24
 9a4:	41 f0       	breq	.+16     	; 0x9b6 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 9a6:	85 30       	cpi	r24, 0x05	; 5
 9a8:	41 f0       	breq	.+16     	; 0x9ba <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 9aa:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 9ae:	82 ff       	sbrs	r24, 2
 9b0:	f6 cf       	rjmp	.-20     	; 0x99e <Endpoint_Write_Control_Stream_LE+0x9c>
 9b2:	80 e0       	ldi	r24, 0x00	; 0
 9b4:	08 95       	ret
 9b6:	82 e0       	ldi	r24, 0x02	; 2
 9b8:	08 95       	ret
 9ba:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 9bc:	08 95       	ret

000009be <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
 9be:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 9c0:	40 91 0f 01 	lds	r20, 0x010F
 9c4:	50 91 10 01 	lds	r21, 0x0110
 9c8:	46 17       	cp	r20, r22
 9ca:	57 07       	cpc	r21, r23
 9cc:	10 f4       	brcc	.+4      	; 0x9d2 <Endpoint_Write_Control_PStream_LE+0x14>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 9ce:	60 e0       	ldi	r22, 0x00	; 0
 9d0:	40 c0       	rjmp	.+128    	; 0xa52 <Endpoint_Write_Control_PStream_LE+0x94>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 9d2:	61 15       	cp	r22, r1
 9d4:	71 05       	cpc	r23, r1
 9d6:	11 f0       	breq	.+4      	; 0x9dc <Endpoint_Write_Control_PStream_LE+0x1e>
 9d8:	ab 01       	movw	r20, r22
 9da:	f9 cf       	rjmp	.-14     	; 0x9ce <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 9dc:	80 91 e8 00 	lds	r24, 0x00E8
 9e0:	8e 77       	andi	r24, 0x7E	; 126
 9e2:	80 93 e8 00 	sts	0x00E8, r24
 9e6:	40 e0       	ldi	r20, 0x00	; 0
 9e8:	50 e0       	ldi	r21, 0x00	; 0
 9ea:	f1 cf       	rjmp	.-30     	; 0x9ce <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 9ec:	80 91 08 01 	lds	r24, 0x0108

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 9f0:	88 23       	and	r24, r24
 9f2:	09 f4       	brne	.+2      	; 0x9f6 <Endpoint_Write_Control_PStream_LE+0x38>
 9f4:	40 c0       	rjmp	.+128    	; 0xa76 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 9f6:	85 30       	cpi	r24, 0x05	; 5
 9f8:	09 f4       	brne	.+2      	; 0x9fc <Endpoint_Write_Control_PStream_LE+0x3e>
 9fa:	3f c0       	rjmp	.+126    	; 0xa7a <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9fc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 a00:	83 ff       	sbrs	r24, 3
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <Endpoint_Write_Control_PStream_LE+0x4a>
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a08:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 a0c:	82 fd       	sbrc	r24, 2
 a0e:	2d c0       	rjmp	.+90     	; 0xa6a <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a10:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 a14:	80 ff       	sbrs	r24, 0
 a16:	1d c0       	rjmp	.+58     	; 0xa52 <Endpoint_Write_Control_PStream_LE+0x94>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 a18:	80 91 f2 00 	lds	r24, 0x00F2
 a1c:	90 91 f3 00 	lds	r25, 0x00F3
 a20:	09 c0       	rjmp	.+18     	; 0xa34 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 a22:	f9 01       	movw	r30, r18
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 a24:	2f 5f       	subi	r18, 0xFF	; 255
 a26:	3f 4f       	sbci	r19, 0xFF	; 255
 a28:	e4 91       	lpm	r30, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 a2a:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
 a2e:	41 50       	subi	r20, 0x01	; 1
 a30:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 a32:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 a34:	41 15       	cp	r20, r1
 a36:	51 05       	cpc	r21, r1
 a38:	19 f0       	breq	.+6      	; 0xa40 <Endpoint_Write_Control_PStream_LE+0x82>
 a3a:	88 30       	cpi	r24, 0x08	; 8
 a3c:	91 05       	cpc	r25, r1
 a3e:	88 f3       	brcs	.-30     	; 0xa22 <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 a40:	60 e0       	ldi	r22, 0x00	; 0
 a42:	08 97       	sbiw	r24, 0x08	; 8
 a44:	09 f4       	brne	.+2      	; 0xa48 <Endpoint_Write_Control_PStream_LE+0x8a>
 a46:	61 e0       	ldi	r22, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a48:	80 91 e8 00 	lds	r24, 0x00E8
 a4c:	8e 77       	andi	r24, 0x7E	; 126
 a4e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 a52:	41 15       	cp	r20, r1
 a54:	51 05       	cpc	r21, r1
 a56:	51 f6       	brne	.-108    	; 0x9ec <Endpoint_Write_Control_PStream_LE+0x2e>
 a58:	66 23       	and	r22, r22
 a5a:	41 f6       	brne	.-112    	; 0x9ec <Endpoint_Write_Control_PStream_LE+0x2e>
 a5c:	06 c0       	rjmp	.+12     	; 0xa6a <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 a5e:	80 91 08 01 	lds	r24, 0x0108

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 a62:	88 23       	and	r24, r24
 a64:	41 f0       	breq	.+16     	; 0xa76 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 a66:	85 30       	cpi	r24, 0x05	; 5
 a68:	41 f0       	breq	.+16     	; 0xa7a <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a6a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 a6e:	82 ff       	sbrs	r24, 2
 a70:	f6 cf       	rjmp	.-20     	; 0xa5e <Endpoint_Write_Control_PStream_LE+0xa0>
 a72:	80 e0       	ldi	r24, 0x00	; 0
 a74:	08 95       	ret
 a76:	82 e0       	ldi	r24, 0x02	; 2
 a78:	08 95       	ret
 a7a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 a7c:	08 95       	ret

00000a7e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 a7e:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 a80:	80 91 08 01 	lds	r24, 0x0108
 a84:	88 23       	and	r24, r24
 a86:	61 f0       	breq	.+24     	; 0xaa0 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 a88:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a8c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a90:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 a94:	83 ff       	sbrs	r24, 3
 a96:	01 c0       	rjmp	.+2      	; 0xa9a <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 a98:	c7 dd       	rcall	.-1138   	; 0x628 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 a9a:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a9c:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 aa0:	1f 91       	pop	r17
 aa2:	08 95       	ret

00000aa4 <_exit>:
 aa4:	f8 94       	cli

00000aa6 <__stop_program>:
 aa6:	ff cf       	rjmp	.-2      	; 0xaa6 <__stop_program>
