
MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  000016fc  00001790  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  00800144  00800144  000017d4  2**0
                  ALLOC
  3 .stab         000008f4  00000000  00000000  000017d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000013d  00000000  00000000  000020c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000330  00000000  00000000  00002205  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000008fa  00000000  00000000  00002535  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005d81  00000000  00000000  00002e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014f6  00000000  00000000  00008bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004c55  00000000  00000000  0000a0a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004c0  00000000  00000000  0000ecfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002039  00000000  00000000  0000f1bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000023ed  00000000  00000000  000111f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000468  00000000  00000000  000135e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 *  \param[in] BufferPtr     Pointer to the data source RAM buffer
 */
void DataflashManager_WriteBlocks_RAM(const uint32_t BlockAddress,
                                      uint16_t TotalBlocks,
                                      uint8_t* BufferPtr)
{
       0:	8b c0       	rjmp	.+278    	; 0x118 <__ctors_end>

	return Endpoint_IsConfigured();
}

void Endpoint_ClearEndpoints(void)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	a7 c0       	rjmp	.+334    	; 0x154 <__bad_interrupt>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
       8:	a5 c0       	rjmp	.+330    	; 0x154 <__bad_interrupt>
       a:	00 00       	nop
       c:	a3 c0       	rjmp	.+326    	; 0x154 <__bad_interrupt>
       e:	00 00       	nop
      10:	a1 c0       	rjmp	.+322    	; 0x154 <__bad_interrupt>
      12:	00 00       	nop
      14:	9f c0       	rjmp	.+318    	; 0x154 <__bad_interrupt>
      16:	00 00       	nop
      18:	9d c0       	rjmp	.+314    	; 0x154 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9b c0       	rjmp	.+310    	; 0x154 <__bad_interrupt>
      1e:	00 00       	nop
      20:	99 c0       	rjmp	.+306    	; 0x154 <__bad_interrupt>
      22:	00 00       	nop
      24:	97 c0       	rjmp	.+302    	; 0x154 <__bad_interrupt>
      26:	00 00       	nop
      28:	e7 c7       	rjmp	.+4046   	; 0xff8 <__vector_10>
      2a:	00 00       	nop
      2c:	a7 c7       	rjmp	.+3918   	; 0xf7c <__vector_11>
      2e:	00 00       	nop
      30:	91 c0       	rjmp	.+290    	; 0x154 <__bad_interrupt>
      32:	00 00       	nop
      34:	8f c0       	rjmp	.+286    	; 0x154 <__bad_interrupt>
      36:	00 00       	nop
      38:	8d c0       	rjmp	.+282    	; 0x154 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8b c0       	rjmp	.+278    	; 0x154 <__bad_interrupt>
      3e:	00 00       	nop
      40:	89 c0       	rjmp	.+274    	; 0x154 <__bad_interrupt>
      42:	00 00       	nop
      44:	87 c0       	rjmp	.+270    	; 0x154 <__bad_interrupt>
      46:	00 00       	nop
      48:	85 c0       	rjmp	.+266    	; 0x154 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	83 c0       	rjmp	.+262    	; 0x154 <__bad_interrupt>
      4e:	00 00       	nop
      50:	81 c0       	rjmp	.+258    	; 0x154 <__bad_interrupt>
      52:	00 00       	nop
      54:	7f c0       	rjmp	.+254    	; 0x154 <__bad_interrupt>
      56:	00 00       	nop
      58:	7d c0       	rjmp	.+250    	; 0x154 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7b c0       	rjmp	.+246    	; 0x154 <__bad_interrupt>
      5e:	00 00       	nop
      60:	79 c0       	rjmp	.+242    	; 0x154 <__bad_interrupt>
      62:	00 00       	nop
      64:	77 c0       	rjmp	.+238    	; 0x154 <__bad_interrupt>
      66:	00 00       	nop
      68:	75 c0       	rjmp	.+234    	; 0x154 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	73 c0       	rjmp	.+230    	; 0x154 <__bad_interrupt>
      6e:	00 00       	nop
      70:	71 c0       	rjmp	.+226    	; 0x154 <__bad_interrupt>
      72:	00 00       	nop
      74:	6f c0       	rjmp	.+222    	; 0x154 <__bad_interrupt>
      76:	00 00       	nop
      78:	6d c0       	rjmp	.+218    	; 0x154 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6b c0       	rjmp	.+214    	; 0x154 <__bad_interrupt>
      7e:	00 00       	nop
      80:	69 c0       	rjmp	.+210    	; 0x154 <__bad_interrupt>
      82:	00 00       	nop
      84:	67 c0       	rjmp	.+206    	; 0x154 <__bad_interrupt>
      86:	00 00       	nop
      88:	65 c0       	rjmp	.+202    	; 0x154 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	63 c0       	rjmp	.+198    	; 0x154 <__bad_interrupt>
      8e:	00 00       	nop
      90:	61 c0       	rjmp	.+194    	; 0x154 <__bad_interrupt>
      92:	00 00       	nop
      94:	5f c0       	rjmp	.+190    	; 0x154 <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
      a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
      ba:	50 00 07 05 83 02 40 00 01 07 05 04 02 40 00 01     P.....@......@..

000000ca <LanguageString>:
      ca:	04 03 09 04                                         ....

000000ce <ManufacturerString>:
      ce:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      de:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e8 <ProductString>:
      e8:	2e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     ..L.U.F.A. .M.a.
      f8:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
     108:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...

00000118 <__ctors_end>:
     118:	11 24       	eor	r1, r1
     11a:	1f be       	out	0x3f, r1	; 63
     11c:	cf ef       	ldi	r28, 0xFF	; 255
     11e:	d0 e2       	ldi	r29, 0x20	; 32
     120:	de bf       	out	0x3e, r29	; 62
     122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
     124:	11 e0       	ldi	r17, 0x01	; 1
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	ec ef       	ldi	r30, 0xFC	; 252
     12c:	f6 e1       	ldi	r31, 0x16	; 22
     12e:	00 e0       	ldi	r16, 0x00	; 0
     130:	0b bf       	out	0x3b, r16	; 59
     132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x14>
     134:	07 90       	elpm	r0, Z+
     136:	0d 92       	st	X+, r0
     138:	a4 34       	cpi	r26, 0x44	; 68
     13a:	b1 07       	cpc	r27, r17
     13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0x10>

0000013e <__do_clear_bss>:
     13e:	11 e0       	ldi	r17, 0x01	; 1
     140:	a4 e4       	ldi	r26, 0x44	; 68
     142:	b1 e0       	ldi	r27, 0x01	; 1
     144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
     146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
     148:	a1 37       	cpi	r26, 0x71	; 113
     14a:	b1 07       	cpc	r27, r17
     14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
     14e:	6c d1       	rcall	.+728    	; 0x428 <main>
     150:	0c 94 7c 0b 	jmp	0x16f8	; 0x16f8 <_exit>

00000154 <__bad_interrupt>:
     154:	55 cf       	rjmp	.-342    	; 0x0 <__vectors>

00000156 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     156:	8b b1       	in	r24, 0x0b	; 11
     158:	8f 70       	andi	r24, 0x0F	; 15
     15a:	80 6a       	ori	r24, 0xA0	; 160
     15c:	8b b9       	out	0x0b, r24	; 11
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	/* Reset the MSReset flag upon connection */
	IsMassStoreReset = false;
     15e:	10 92 44 01 	sts	0x0144, r1
}
     162:	08 95       	ret

00000164 <EVENT_USB_Device_Disconnect>:
     164:	8b b1       	in	r24, 0x0b	; 11
     166:	8f 70       	andi	r24, 0x0F	; 15
     168:	80 61       	ori	r24, 0x10	; 16
     16a:	8b b9       	out	0x0b, r24	; 11
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     16c:	08 95       	ret

0000016e <StreamCallback_AbortOnMassStoreReset>:
 *  if a Mass Storage Reset request has been issued to the control endpoint.
 */
uint8_t StreamCallback_AbortOnMassStoreReset(void)
{
	/* Abort if a Mass Storage reset command was received */
	if (IsMassStoreReset)
     16e:	80 91 44 01 	lds	r24, 0x0144
	  return STREAMCALLBACK_Abort;

	/* Continue with the current stream operation */
	return STREAMCALLBACK_Continue;
}
     172:	08 95       	ret

00000174 <MassStorage_Task>:
 *  contain, and returning Command Status Wrappers back to the host to indicate the success or failure of the last issued command.
 */
void MassStorage_Task(void)
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     174:	80 91 68 01 	lds	r24, 0x0168
     178:	84 30       	cpi	r24, 0x04	; 4
     17a:	09 f0       	breq	.+2      	; 0x17e <MassStorage_Task+0xa>
     17c:	e2 c0       	rjmp	.+452    	; 0x342 <MassStorage_Task+0x1ce>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     17e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     182:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPNUM);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived()))
     186:	82 ff       	sbrs	r24, 2
     188:	b2 c0       	rjmp	.+356    	; 0x2ee <MassStorage_Task+0x17a>
	  return false;

	/* Read in command block header */
	Endpoint_Read_Stream_LE(&CommandBlock, (sizeof(CommandBlock) - sizeof(CommandBlock.SCSICommandData)),
     18a:	85 e4       	ldi	r24, 0x45	; 69
     18c:	91 e0       	ldi	r25, 0x01	; 1
     18e:	6f e0       	ldi	r22, 0x0F	; 15
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	47 eb       	ldi	r20, 0xB7	; 183
     194:	50 e0       	ldi	r21, 0x00	; 0
     196:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <Endpoint_Read_Stream_LE>
	                        StreamCallback_AbortOnMassStoreReset);

	/* Check if the current command is being aborted by the host */
	if (IsMassStoreReset)
     19a:	80 91 44 01 	lds	r24, 0x0144
     19e:	88 23       	and	r24, r24
     1a0:	09 f0       	breq	.+2      	; 0x1a4 <MassStorage_Task+0x30>
     1a2:	a5 c0       	rjmp	.+330    	; 0x2ee <MassStorage_Task+0x17a>
	  return false;

	/* Verify the command block - abort if invalid */
	if ((CommandBlock.Signature         != MS_CBW_SIGNATURE) ||
     1a4:	80 91 45 01 	lds	r24, 0x0145
     1a8:	90 91 46 01 	lds	r25, 0x0146
     1ac:	a0 91 47 01 	lds	r26, 0x0147
     1b0:	b0 91 48 01 	lds	r27, 0x0148
     1b4:	85 55       	subi	r24, 0x55	; 85
     1b6:	93 45       	sbci	r25, 0x53	; 83
     1b8:	a2 44       	sbci	r26, 0x42	; 66
     1ba:	b3 44       	sbci	r27, 0x43	; 67
     1bc:	89 f4       	brne	.+34     	; 0x1e0 <MassStorage_Task+0x6c>
     1be:	80 91 52 01 	lds	r24, 0x0152
     1c2:	88 23       	and	r24, r24
     1c4:	69 f4       	brne	.+26     	; 0x1e0 <MassStorage_Task+0x6c>
     1c6:	80 91 51 01 	lds	r24, 0x0151
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	8f 71       	andi	r24, 0x1F	; 31
     1ce:	90 70       	andi	r25, 0x00	; 0
     1d0:	89 2b       	or	r24, r25
     1d2:	31 f4       	brne	.+12     	; 0x1e0 <MassStorage_Task+0x6c>
     1d4:	60 91 53 01 	lds	r22, 0x0153
     1d8:	66 23       	and	r22, r22
     1da:	11 f0       	breq	.+4      	; 0x1e0 <MassStorage_Task+0x6c>
     1dc:	61 31       	cpi	r22, 0x11	; 17
     1de:	70 f0       	brcs	.+28     	; 0x1fc <MassStorage_Task+0x88>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     1e0:	80 91 eb 00 	lds	r24, 0x00EB
     1e4:	80 62       	ori	r24, 0x20	; 32
     1e6:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     1ea:	83 e0       	ldi	r24, 0x03	; 3
     1ec:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     1f0:	80 91 eb 00 	lds	r24, 0x00EB
     1f4:	80 62       	ori	r24, 0x20	; 32
     1f6:	80 93 eb 00 	sts	0x00EB, r24
     1fa:	79 c0       	rjmp	.+242    	; 0x2ee <MassStorage_Task+0x17a>

		return false;
	}

	/* Read in command block command data */
	Endpoint_Read_Stream_LE(&CommandBlock.SCSICommandData,
     1fc:	84 e5       	ldi	r24, 0x54	; 84
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	70 e0       	ldi	r23, 0x00	; 0
     202:	47 eb       	ldi	r20, 0xB7	; 183
     204:	50 e0       	ldi	r21, 0x00	; 0
     206:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <Endpoint_Read_Stream_LE>
	                        CommandBlock.SCSICommandLength,
	                        StreamCallback_AbortOnMassStoreReset);

	/* Check if the current command is being aborted by the host */
	if (IsMassStoreReset)
     20a:	80 91 44 01 	lds	r24, 0x0144
     20e:	88 23       	and	r24, r24
     210:	09 f0       	breq	.+2      	; 0x214 <MassStorage_Task+0xa0>
     212:	6d c0       	rjmp	.+218    	; 0x2ee <MassStorage_Task+0x17a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     214:	80 91 e8 00 	lds	r24, 0x00E8
     218:	8b 77       	andi	r24, 0x7B	; 123
     21a:	80 93 e8 00 	sts	0x00E8, r24
     21e:	8b b1       	in	r24, 0x0b	; 11
     220:	8f 70       	andi	r24, 0x0F	; 15
     222:	80 62       	ori	r24, 0x20	; 32
     224:	8b b9       	out	0x0b, r24	; 11
	{
		/* Indicate busy */
		LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

		/* Check direction of command, select Data IN endpoint if data is from the device */
		if (CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
     226:	80 91 51 01 	lds	r24, 0x0151
     22a:	87 ff       	sbrs	r24, 7
     22c:	03 c0       	rjmp	.+6      	; 0x234 <MassStorage_Task+0xc0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     22e:	83 e0       	ldi	r24, 0x03	; 3
     230:	80 93 e9 00 	sts	0x00E9, r24
		  Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPNUM);

		/* Decode the received SCSI command, set returned status code */
		CommandStatus.Status = SCSI_DecodeSCSICommand() ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
     234:	3f d5       	rcall	.+2686   	; 0xcb4 <SCSI_DecodeSCSICommand>
     236:	21 e0       	ldi	r18, 0x01	; 1
     238:	28 27       	eor	r18, r24
     23a:	20 93 0c 01 	sts	0x010C, r18

		/* Load in the CBW tag into the CSW to link them together */
		CommandStatus.Tag = CommandBlock.Tag;
     23e:	80 91 49 01 	lds	r24, 0x0149
     242:	90 91 4a 01 	lds	r25, 0x014A
     246:	a0 91 4b 01 	lds	r26, 0x014B
     24a:	b0 91 4c 01 	lds	r27, 0x014C
     24e:	80 93 04 01 	sts	0x0104, r24
     252:	90 93 05 01 	sts	0x0105, r25
     256:	a0 93 06 01 	sts	0x0106, r26
     25a:	b0 93 07 01 	sts	0x0107, r27

		/* Load in the data residue counter into the CSW */
		CommandStatus.DataTransferResidue = CommandBlock.DataTransferLength;
     25e:	80 91 4d 01 	lds	r24, 0x014D
     262:	90 91 4e 01 	lds	r25, 0x014E
     266:	a0 91 4f 01 	lds	r26, 0x014F
     26a:	b0 91 50 01 	lds	r27, 0x0150
     26e:	80 93 08 01 	sts	0x0108, r24
     272:	90 93 09 01 	sts	0x0109, r25
     276:	a0 93 0a 01 	sts	0x010A, r26
     27a:	b0 93 0b 01 	sts	0x010B, r27

		/* Stall the selected data pipe if command failed (if data is still to be transferred) */
		if ((CommandStatus.Status == MS_SCSI_COMMAND_Fail) && (CommandStatus.DataTransferResidue))
     27e:	21 30       	cpi	r18, 0x01	; 1
     280:	49 f4       	brne	.+18     	; 0x294 <MassStorage_Task+0x120>
     282:	00 97       	sbiw	r24, 0x00	; 0
     284:	a1 05       	cpc	r26, r1
     286:	b1 05       	cpc	r27, r1
     288:	29 f0       	breq	.+10     	; 0x294 <MassStorage_Task+0x120>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     28a:	80 91 eb 00 	lds	r24, 0x00EB
     28e:	80 62       	ori	r24, 0x20	; 32
     290:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     294:	84 e0       	ldi	r24, 0x04	; 4
     296:	80 93 e9 00 	sts	0x00E9, r24
     29a:	04 c0       	rjmp	.+8      	; 0x2a4 <MassStorage_Task+0x130>

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     29c:	80 91 44 01 	lds	r24, 0x0144
     2a0:	88 23       	and	r24, r24
     2a2:	09 f5       	brne	.+66     	; 0x2e6 <MassStorage_Task+0x172>
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     2a4:	80 91 eb 00 	lds	r24, 0x00EB
{
	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPNUM);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     2a8:	85 fd       	sbrc	r24, 5
     2aa:	f8 cf       	rjmp	.-16     	; 0x29c <MassStorage_Task+0x128>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     2ac:	83 e0       	ldi	r24, 0x03	; 3
     2ae:	80 93 e9 00 	sts	0x00E9, r24
     2b2:	04 c0       	rjmp	.+8      	; 0x2bc <MassStorage_Task+0x148>

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     2b4:	80 91 44 01 	lds	r24, 0x0144
     2b8:	88 23       	and	r24, r24
     2ba:	a9 f4       	brne	.+42     	; 0x2e6 <MassStorage_Task+0x172>
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     2bc:	80 91 eb 00 	lds	r24, 0x00EB

	/* Select the Data In endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPNUM);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     2c0:	85 fd       	sbrc	r24, 5
     2c2:	f8 cf       	rjmp	.-16     	; 0x2b4 <MassStorage_Task+0x140>
		if (IsMassStoreReset)
		  return;
	}

	/* Write the CSW to the endpoint */
	Endpoint_Write_Stream_LE(&CommandStatus, sizeof(CommandStatus),
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	6d e0       	ldi	r22, 0x0D	; 13
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	47 eb       	ldi	r20, 0xB7	; 183
     2ce:	50 e0       	ldi	r21, 0x00	; 0
     2d0:	0e 94 2e 0b 	call	0x165c	; 0x165c <Endpoint_Write_Stream_LE>
	                          StreamCallback_AbortOnMassStoreReset);

	/* Check if the current command is being aborted by the host */
	if (IsMassStoreReset)
     2d4:	80 91 44 01 	lds	r24, 0x0144
     2d8:	88 23       	and	r24, r24
     2da:	29 f4       	brne	.+10     	; 0x2e6 <MassStorage_Task+0x172>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     2dc:	80 91 e8 00 	lds	r24, 0x00E8
     2e0:	8e 77       	andi	r24, 0x7E	; 126
     2e2:	80 93 e8 00 	sts	0x00E8, r24
     2e6:	8b b1       	in	r24, 0x0b	; 11
     2e8:	8f 70       	andi	r24, 0x0F	; 15
     2ea:	80 66       	ori	r24, 0x60	; 96
     2ec:	8b b9       	out	0x0b, r24	; 11
		/* Indicate ready */
		LEDs_SetAllLEDs(LEDMASK_USB_READY);
	}

	/* Check if a Mass Storage Reset occurred */
	if (IsMassStoreReset)
     2ee:	80 91 44 01 	lds	r24, 0x0144
     2f2:	88 23       	and	r24, r24
     2f4:	31 f1       	breq	.+76     	; 0x342 <MassStorage_Task+0x1ce>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     2f6:	80 e1       	ldi	r24, 0x10	; 16
     2f8:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     2fc:	10 92 ea 00 	sts	0x00EA, r1
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     300:	88 e0       	ldi	r24, 0x08	; 8
     302:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     306:	10 92 ea 00 	sts	0x00EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     30a:	84 e0       	ldi	r24, 0x04	; 4
     30c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     310:	80 91 eb 00 	lds	r24, 0x00EB
     314:	80 61       	ori	r24, 0x10	; 16
     316:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     31a:	80 91 eb 00 	lds	r24, 0x00EB
     31e:	88 60       	ori	r24, 0x08	; 8
     320:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     324:	83 e0       	ldi	r24, 0x03	; 3
     326:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     32a:	80 91 eb 00 	lds	r24, 0x00EB
     32e:	80 61       	ori	r24, 0x10	; 16
     330:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     334:	80 91 eb 00 	lds	r24, 0x00EB
     338:	88 60       	ori	r24, 0x08	; 8
     33a:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPNUM);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		/* Clear the abort transfer flag */
		IsMassStoreReset = false;
     33e:	10 92 44 01 	sts	0x0144, r1
     342:	08 95       	ret

00000344 <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Process UFI specific control requests */
	switch (USB_ControlRequest.bRequest)
     344:	80 91 6a 01 	lds	r24, 0x016A
     348:	8e 3f       	cpi	r24, 0xFE	; 254
     34a:	81 f0       	breq	.+32     	; 0x36c <EVENT_USB_Device_ControlRequest+0x28>
     34c:	8f 3f       	cpi	r24, 0xFF	; 255
     34e:	f9 f4       	brne	.+62     	; 0x38e <EVENT_USB_Device_ControlRequest+0x4a>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     350:	80 91 69 01 	lds	r24, 0x0169
     354:	81 32       	cpi	r24, 0x21	; 33
     356:	d9 f4       	brne	.+54     	; 0x38e <EVENT_USB_Device_ControlRequest+0x4a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     358:	80 91 e8 00 	lds	r24, 0x00E8
     35c:	87 7f       	andi	r24, 0xF7	; 247
     35e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     362:	56 d5       	rcall	.+2732   	; 0xe10 <Endpoint_ClearStatusStage>

				/* Indicate that the current transfer should be aborted */
				IsMassStoreReset = true;
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	80 93 44 01 	sts	0x0144, r24
     36a:	08 95       	ret
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     36c:	80 91 69 01 	lds	r24, 0x0169
     370:	81 3a       	cpi	r24, 0xA1	; 161
     372:	69 f4       	brne	.+26     	; 0x38e <EVENT_USB_Device_ControlRequest+0x4a>
     374:	80 91 e8 00 	lds	r24, 0x00E8
     378:	87 7f       	andi	r24, 0xF7	; 247
     37a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     37e:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     382:	80 91 e8 00 	lds	r24, 0x00E8
     386:	8e 77       	andi	r24, 0x7E	; 126
     388:	80 93 e8 00 	sts	0x00E8, r24

				/* Indicate to the host the number of supported LUNs (virtual disks) on the device */
				Endpoint_Write_Byte(TOTAL_LUNS - 1);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     38c:	41 c5       	rjmp	.+2690   	; 0xe10 <Endpoint_ClearStatusStage>
     38e:	08 95       	ret

00000390 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host set the current configuration
 *  of the USB device after enumeration - the device endpoints are configured and the Mass Storage management task started.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
     394:	83 e0       	ldi	r24, 0x03	; 3
     396:	61 e8       	ldi	r22, 0x81	; 129
     398:	42 e3       	ldi	r20, 0x32	; 50
     39a:	27 d5       	rcall	.+2638   	; 0xdea <Endpoint_ConfigureEndpoint_Prv>
     39c:	08 2f       	mov	r16, r24
	                                            MASS_STORAGE_IO_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_OUT_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_OUT,
	                                            MASS_STORAGE_IO_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     39e:	84 e0       	ldi	r24, 0x04	; 4
     3a0:	60 e8       	ldi	r22, 0x80	; 128
     3a2:	42 e3       	ldi	r20, 0x32	; 50
     3a4:	22 d5       	rcall	.+2628   	; 0xdea <Endpoint_ConfigureEndpoint_Prv>
     3a6:	10 e0       	ldi	r17, 0x00	; 0
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	08 23       	and	r16, r24
     3ac:	19 23       	and	r17, r25
     3ae:	00 ff       	sbrs	r16, 0
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <EVENT_USB_Device_ConfigurationChanged+0x26>
     3b2:	90 e6       	ldi	r25, 0x60	; 96
     3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <EVENT_USB_Device_ConfigurationChanged+0x28>
     3b6:	90 e9       	ldi	r25, 0x90	; 144
     3b8:	8b b1       	in	r24, 0x0b	; 11
     3ba:	8f 70       	andi	r24, 0x0F	; 15
     3bc:	98 2b       	or	r25, r24
     3be:	9b b9       	out	0x0b, r25	; 11
}
     3c0:	1f 91       	pop	r17
     3c2:	0f 91       	pop	r16
     3c4:	08 95       	ret

000003c6 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     3c6:	84 b7       	in	r24, 0x34	; 52
     3c8:	87 7f       	andi	r24, 0xF7	; 247
     3ca:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     3cc:	88 e1       	ldi	r24, 0x18	; 24
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	f8 94       	cli
     3d2:	80 93 60 00 	sts	0x0060, r24
     3d6:	10 92 60 00 	sts	0x0060, r1
     3da:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	20 e8       	ldi	r18, 0x80	; 128
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	20 93 61 00 	sts	0x0061, r18
     3ea:	80 93 61 00 	sts	0x0061, r24
     3ee:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     3f0:	8a b1       	in	r24, 0x0a	; 10
     3f2:	80 6f       	ori	r24, 0xF0	; 240
     3f4:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     3f6:	8b b1       	in	r24, 0x0b	; 11
     3f8:	8f 70       	andi	r24, 0x0F	; 15
     3fa:	8b b9       	out	0x0b, r24	; 11
			 *  \param[in] SPIOptions  SPI Options, a mask consisting of one of each of the SPI_SPEED_*,
			 *                         SPI_SCK_*, SPI_SAMPLE_*, SPI_ORDER_* and SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				DDRB  |=  ((1 << 1) | (1 << 2));
     3fc:	84 b1       	in	r24, 0x04	; 4
     3fe:	86 60       	ori	r24, 0x06	; 6
     400:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~((1 << 0) | (1 << 3));
     402:	84 b1       	in	r24, 0x04	; 4
     404:	86 7f       	andi	r24, 0xF6	; 246
     406:	84 b9       	out	0x04, r24	; 4
				PORTB |=  ((1 << 0) | (1 << 3));
     408:	85 b1       	in	r24, 0x05	; 5
     40a:	89 60       	ori	r24, 0x09	; 9
     40c:	85 b9       	out	0x05, r24	; 5

				SPCR   = ((1 << SPE) | SPIOptions);
     40e:	8c e5       	ldi	r24, 0x5C	; 92
     410:	8c bd       	out	0x2c, r24	; 44

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     412:	8d b5       	in	r24, 0x2d	; 45
     414:	81 60       	ori	r24, 0x01	; 1
     416:	8d bd       	out	0x2d, r24	; 45
			/** Initialises the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The AVR's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     418:	8d b1       	in	r24, 0x0d	; 13
     41a:	83 60       	ori	r24, 0x03	; 3
     41c:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     41e:	8e b1       	in	r24, 0x0e	; 14
     420:	83 60       	ori	r24, 0x03	; 3
     422:	8e b9       	out	0x0e, r24	; 14

	/* Hardware Initialization */
	LEDs_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     424:	95 d5       	rcall	.+2858   	; 0xf50 <USB_Init>

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
}
     426:	7e c0       	rjmp	.+252    	; 0x524 <DataflashManager_ResetDataflashProtections>

00000428 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     428:	ce df       	rcall	.-100    	; 0x3c6 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     42a:	8b b1       	in	r24, 0x0b	; 11
     42c:	8f 70       	andi	r24, 0x0F	; 15
     42e:	80 61       	ori	r24, 0x10	; 16
     430:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     432:	78 94       	sei

	for (;;)
	{
		MassStorage_Task();
     434:	9f de       	rcall	.-706    	; 0x174 <MassStorage_Task>
		USB_USBTask();
     436:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <USB_USBTask>
     43a:	fc cf       	rjmp	.-8      	; 0x434 <main+0xc>

0000043c <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     43c:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     43e:	92 30       	cpi	r25, 0x02	; 2
     440:	49 f0       	breq	.+18     	; 0x454 <CALLBACK_USB_GetDescriptor+0x18>
     442:	93 30       	cpi	r25, 0x03	; 3
     444:	61 f0       	breq	.+24     	; 0x45e <CALLBACK_USB_GetDescriptor+0x22>
     446:	91 30       	cpi	r25, 0x01	; 1
     448:	f9 f4       	brne	.+62     	; 0x488 <CALLBACK_USB_GetDescriptor+0x4c>
     44a:	e8 e9       	ldi	r30, 0x98	; 152
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	22 e1       	ldi	r18, 0x12	; 18
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	1e c0       	rjmp	.+60     	; 0x490 <CALLBACK_USB_GetDescriptor+0x54>
     454:	ea ea       	ldi	r30, 0xAA	; 170
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	20 e2       	ldi	r18, 0x20	; 32
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	19 c0       	rjmp	.+50     	; 0x490 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     45e:	81 30       	cpi	r24, 0x01	; 1
     460:	49 f0       	breq	.+18     	; 0x474 <CALLBACK_USB_GetDescriptor+0x38>
     462:	81 30       	cpi	r24, 0x01	; 1
     464:	18 f0       	brcs	.+6      	; 0x46c <CALLBACK_USB_GetDescriptor+0x30>
     466:	82 30       	cpi	r24, 0x02	; 2
     468:	79 f4       	brne	.+30     	; 0x488 <CALLBACK_USB_GetDescriptor+0x4c>
     46a:	08 c0       	rjmp	.+16     	; 0x47c <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     46c:	ea ec       	ldi	r30, 0xCA	; 202
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	84 91       	lpm	r24, Z+
     472:	07 c0       	rjmp	.+14     	; 0x482 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     474:	ee ec       	ldi	r30, 0xCE	; 206
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	84 91       	lpm	r24, Z+
     47a:	03 c0       	rjmp	.+6      	; 0x482 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     47c:	e8 ee       	ldi	r30, 0xE8	; 232
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	84 91       	lpm	r24, Z+
     482:	28 2f       	mov	r18, r24
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	04 c0       	rjmp	.+8      	; 0x490 <CALLBACK_USB_GetDescriptor+0x54>
     488:	e0 e0       	ldi	r30, 0x00	; 0
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     490:	ed 93       	st	X+, r30
     492:	fc 93       	st	X, r31
	return Size;
}
     494:	c9 01       	movw	r24, r18
     496:	08 95       	ret

00000498 <Dataflash_SelectChipFromPage>:
			 *
			 *  \param[in] PageAddress  Address of the page to manipulate, ranging from
			 *                          ((DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS) - 1).
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
     498:	9c 01       	movw	r18, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     49a:	8e b1       	in	r24, 0x0e	; 14
     49c:	83 60       	ori	r24, 0x03	; 3
     49e:	8e b9       	out	0x0e, r24	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     4a0:	80 e4       	ldi	r24, 0x40	; 64
     4a2:	20 30       	cpi	r18, 0x00	; 0
     4a4:	38 07       	cpc	r19, r24
     4a6:	58 f4       	brcc	.+22     	; 0x4be <Dataflash_SelectChipFromPage+0x26>
				  return;

				if (PageAddress & 0x01)
     4a8:	20 ff       	sbrs	r18, 0
     4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <Dataflash_SelectChipFromPage+0x1e>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     4ac:	8e b1       	in	r24, 0x0e	; 14
     4ae:	8c 7f       	andi	r24, 0xFC	; 252
     4b0:	81 60       	ori	r24, 0x01	; 1
     4b2:	8e b9       	out	0x0e, r24	; 14
     4b4:	08 95       	ret
     4b6:	8e b1       	in	r24, 0x0e	; 14
     4b8:	8c 7f       	andi	r24, 0xFC	; 252
     4ba:	82 60       	ori	r24, 0x02	; 2
     4bc:	8e b9       	out	0x0e, r24	; 14
     4be:	08 95       	ret

000004c0 <Dataflash_ToggleSelectedChipCS>:
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     4c0:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     4c2:	9e b1       	in	r25, 0x0e	; 14
     4c4:	93 60       	ori	r25, 0x03	; 3
     4c6:	9e b9       	out	0x0e, r25	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     4c8:	9e b1       	in	r25, 0x0e	; 14
     4ca:	83 70       	andi	r24, 0x03	; 3
     4cc:	9c 7f       	andi	r25, 0xFC	; 252
     4ce:	89 2b       	or	r24, r25
     4d0:	8e b9       	out	0x0e, r24	; 14
     4d2:	08 95       	ret

000004d4 <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     4d4:	f5 df       	rcall	.-22     	; 0x4c0 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4d6:	87 ed       	ldi	r24, 0xD7	; 215
     4d8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4da:	0d b4       	in	r0, 0x2d	; 45
     4dc:	07 fe       	sbrs	r0, 7
     4de:	fd cf       	rjmp	.-6      	; 0x4da <Dataflash_WaitWhileBusy+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     4e0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4e2:	0d b4       	in	r0, 0x2d	; 45
     4e4:	07 fe       	sbrs	r0, 7
     4e6:	fd cf       	rjmp	.-6      	; 0x4e2 <Dataflash_WaitWhileBusy+0xe>
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     4e8:	0e b4       	in	r0, 0x2e	; 46
     4ea:	07 fe       	sbrs	r0, 7
     4ec:	f9 cf       	rjmp	.-14     	; 0x4e0 <Dataflash_WaitWhileBusy+0xc>
				Dataflash_ToggleSelectedChipCS();
			}
     4ee:	e8 cf       	rjmp	.-48     	; 0x4c0 <Dataflash_ToggleSelectedChipCS>

000004f0 <Dataflash_SendAddressBytes>:
			 *  \param[in] BufferByte   Address within the dataflash's buffer
			 */
			static inline void Dataflash_SendAddressBytes(uint16_t PageAddress,
			                                              const uint16_t BufferByte)
			{
				PageAddress >>= 1;
     4f0:	9c 01       	movw	r18, r24
     4f2:	36 95       	lsr	r19
     4f4:	27 95       	ror	r18

				Dataflash_SendByte(PageAddress >> 5);
     4f6:	36 e0       	ldi	r19, 0x06	; 6
     4f8:	96 95       	lsr	r25
     4fa:	87 95       	ror	r24
     4fc:	3a 95       	dec	r19
     4fe:	e1 f7       	brne	.-8      	; 0x4f8 <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     500:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     502:	0d b4       	in	r0, 0x2d	; 45
     504:	07 fe       	sbrs	r0, 7
     506:	fd cf       	rjmp	.-6      	; 0x502 <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     508:	82 2f       	mov	r24, r18
     50a:	88 0f       	add	r24, r24
     50c:	88 0f       	add	r24, r24
     50e:	88 0f       	add	r24, r24
     510:	87 2b       	or	r24, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     512:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     514:	0d b4       	in	r0, 0x2d	; 45
     516:	07 fe       	sbrs	r0, 7
     518:	fd cf       	rjmp	.-6      	; 0x514 <Dataflash_SendAddressBytes+0x24>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     51a:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     51c:	0d b4       	in	r0, 0x2d	; 45
     51e:	07 fe       	sbrs	r0, 7
     520:	fd cf       	rjmp	.-6      	; 0x51c <Dataflash_SendAddressBytes+0x2c>
				Dataflash_SendByte(BufferByte);
			}
     522:	08 95       	ret

00000524 <DataflashManager_ResetDataflashProtections>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     524:	8e b1       	in	r24, 0x0e	; 14
     526:	8c 7f       	andi	r24, 0xFC	; 252
     528:	82 60       	ori	r24, 0x02	; 2
     52a:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     52c:	87 ed       	ldi	r24, 0xD7	; 215
     52e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     530:	0d b4       	in	r0, 0x2d	; 45
     532:	07 fe       	sbrs	r0, 7
     534:	fd cf       	rjmp	.-6      	; 0x530 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     536:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     538:	0d b4       	in	r0, 0x2d	; 45
     53a:	07 fe       	sbrs	r0, 7
     53c:	fd cf       	rjmp	.-6      	; 0x538 <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     53e:	0e b4       	in	r0, 0x2e	; 46
     540:	01 fe       	sbrs	r0, 1
     542:	15 c0       	rjmp	.+42     	; 0x56e <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
     544:	bd df       	rcall	.-134    	; 0x4c0 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     546:	8d e3       	ldi	r24, 0x3D	; 61
     548:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     54a:	0d b4       	in	r0, 0x2d	; 45
     54c:	07 fe       	sbrs	r0, 7
     54e:	fd cf       	rjmp	.-6      	; 0x54a <DataflashManager_ResetDataflashProtections+0x26>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     550:	8a e2       	ldi	r24, 0x2A	; 42
     552:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     554:	0d b4       	in	r0, 0x2d	; 45
     556:	07 fe       	sbrs	r0, 7
     558:	fd cf       	rjmp	.-6      	; 0x554 <DataflashManager_ResetDataflashProtections+0x30>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     55a:	8f e7       	ldi	r24, 0x7F	; 127
     55c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     55e:	0d b4       	in	r0, 0x2d	; 45
     560:	07 fe       	sbrs	r0, 7
     562:	fd cf       	rjmp	.-6      	; 0x55e <DataflashManager_ResetDataflashProtections+0x3a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     564:	8a e9       	ldi	r24, 0x9A	; 154
     566:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     568:	0d b4       	in	r0, 0x2d	; 45
     56a:	07 fe       	sbrs	r0, 7
     56c:	fd cf       	rjmp	.-6      	; 0x568 <DataflashManager_ResetDataflashProtections+0x44>
     56e:	8e b1       	in	r24, 0x0e	; 14
     570:	8c 7f       	andi	r24, 0xFC	; 252
     572:	81 60       	ori	r24, 0x01	; 1
     574:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     576:	87 ed       	ldi	r24, 0xD7	; 215
     578:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     57a:	0d b4       	in	r0, 0x2d	; 45
     57c:	07 fe       	sbrs	r0, 7
     57e:	fd cf       	rjmp	.-6      	; 0x57a <DataflashManager_ResetDataflashProtections+0x56>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     580:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     582:	0d b4       	in	r0, 0x2d	; 45
     584:	07 fe       	sbrs	r0, 7
     586:	fd cf       	rjmp	.-6      	; 0x582 <DataflashManager_ResetDataflashProtections+0x5e>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     588:	0e b4       	in	r0, 0x2e	; 46
     58a:	01 fe       	sbrs	r0, 1
     58c:	15 c0       	rjmp	.+42     	; 0x5b8 <DataflashManager_ResetDataflashProtections+0x94>
	{
		Dataflash_ToggleSelectedChipCS();
     58e:	98 df       	rcall	.-208    	; 0x4c0 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     590:	8d e3       	ldi	r24, 0x3D	; 61
     592:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     594:	0d b4       	in	r0, 0x2d	; 45
     596:	07 fe       	sbrs	r0, 7
     598:	fd cf       	rjmp	.-6      	; 0x594 <DataflashManager_ResetDataflashProtections+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     59a:	8a e2       	ldi	r24, 0x2A	; 42
     59c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     59e:	0d b4       	in	r0, 0x2d	; 45
     5a0:	07 fe       	sbrs	r0, 7
     5a2:	fd cf       	rjmp	.-6      	; 0x59e <DataflashManager_ResetDataflashProtections+0x7a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5a4:	8f e7       	ldi	r24, 0x7F	; 127
     5a6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5a8:	0d b4       	in	r0, 0x2d	; 45
     5aa:	07 fe       	sbrs	r0, 7
     5ac:	fd cf       	rjmp	.-6      	; 0x5a8 <DataflashManager_ResetDataflashProtections+0x84>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5ae:	8a e9       	ldi	r24, 0x9A	; 154
     5b0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5b2:	0d b4       	in	r0, 0x2d	; 45
     5b4:	07 fe       	sbrs	r0, 7
     5b6:	fd cf       	rjmp	.-6      	; 0x5b2 <DataflashManager_ResetDataflashProtections+0x8e>
     5b8:	8e b1       	in	r24, 0x0e	; 14
     5ba:	83 60       	ori	r24, 0x03	; 3
     5bc:	8e b9       	out	0x0e, r24	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     5be:	08 95       	ret

000005c0 <DataflashManager_CheckDataflashOperation>:
     5c0:	8e b1       	in	r24, 0x0e	; 14
     5c2:	8c 7f       	andi	r24, 0xFC	; 252
     5c4:	82 60       	ori	r24, 0x02	; 2
     5c6:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5c8:	8f e9       	ldi	r24, 0x9F	; 159
     5ca:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5cc:	0d b4       	in	r0, 0x2d	; 45
     5ce:	07 fe       	sbrs	r0, 7
     5d0:	fd cf       	rjmp	.-6      	; 0x5cc <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     5d2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5d4:	0d b4       	in	r0, 0x2d	; 45
     5d6:	07 fe       	sbrs	r0, 7
     5d8:	fd cf       	rjmp	.-6      	; 0x5d4 <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     5da:	9e b5       	in	r25, 0x2e	; 46
     5dc:	8e b1       	in	r24, 0x0e	; 14
     5de:	83 60       	ori	r24, 0x03	; 3
     5e0:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     5e2:	9f 31       	cpi	r25, 0x1F	; 31
     5e4:	11 f0       	breq	.+4      	; 0x5ea <DataflashManager_CheckDataflashOperation+0x2a>
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	08 95       	ret
     5ea:	8e b1       	in	r24, 0x0e	; 14
     5ec:	8c 7f       	andi	r24, 0xFC	; 252
     5ee:	81 60       	ori	r24, 0x01	; 1
     5f0:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5f2:	8f e9       	ldi	r24, 0x9F	; 159
     5f4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     5f6:	0d b4       	in	r0, 0x2d	; 45
     5f8:	07 fe       	sbrs	r0, 7
     5fa:	fd cf       	rjmp	.-6      	; 0x5f6 <DataflashManager_CheckDataflashOperation+0x36>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     5fc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5fe:	0d b4       	in	r0, 0x2d	; 45
     600:	07 fe       	sbrs	r0, 7
     602:	fd cf       	rjmp	.-6      	; 0x5fe <DataflashManager_CheckDataflashOperation+0x3e>
				return SPDR;
     604:	9e b5       	in	r25, 0x2e	; 46
     606:	8e b1       	in	r24, 0x0e	; 14
     608:	83 60       	ori	r24, 0x03	; 3
     60a:	8e b9       	out	0x0e, r24	; 14
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	9f 31       	cpi	r25, 0x1F	; 31
     610:	09 f4       	brne	.+2      	; 0x614 <DataflashManager_CheckDataflashOperation+0x54>
     612:	81 e0       	ldi	r24, 0x01	; 1
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     614:	08 95       	ret

00000616 <DataflashManager_ReadBlocks>:
 *  \param[in] BlockAddress  Data block starting address for the read sequence
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     616:	cf 92       	push	r12
     618:	df 92       	push	r13
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	df 93       	push	r29
     624:	cf 93       	push	r28
     626:	0f 92       	push	r0
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	7a 01       	movw	r14, r20
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     62e:	f9 e0       	ldi	r31, 0x09	; 9
     630:	66 0f       	add	r22, r22
     632:	77 1f       	adc	r23, r23
     634:	88 1f       	adc	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	fa 95       	dec	r31
     63a:	d1 f7       	brne	.-12     	; 0x630 <DataflashManager_ReadBlocks+0x1a>
     63c:	9b 01       	movw	r18, r22
     63e:	ac 01       	movw	r20, r24
     640:	ea e0       	ldi	r30, 0x0A	; 10
     642:	56 95       	lsr	r21
     644:	47 95       	ror	r20
     646:	37 95       	ror	r19
     648:	27 95       	ror	r18
     64a:	ea 95       	dec	r30
     64c:	d1 f7       	brne	.-12     	; 0x642 <DataflashManager_ReadBlocks+0x2c>
     64e:	89 01       	movw	r16, r18
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     650:	4f ef       	ldi	r20, 0xFF	; 255
     652:	c4 2e       	mov	r12, r20
     654:	43 e0       	ldi	r20, 0x03	; 3
     656:	d4 2e       	mov	r13, r20
     658:	c6 22       	and	r12, r22
     65a:	d7 22       	and	r13, r23
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     65c:	c9 01       	movw	r24, r18
     65e:	1c df       	rcall	.-456    	; 0x498 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     660:	82 ed       	ldi	r24, 0xD2	; 210
     662:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     664:	0d b4       	in	r0, 0x2d	; 45
     666:	07 fe       	sbrs	r0, 7
     668:	fd cf       	rjmp	.-6      	; 0x664 <DataflashManager_ReadBlocks+0x4e>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     66a:	c8 01       	movw	r24, r16
     66c:	b6 01       	movw	r22, r12
     66e:	40 df       	rcall	.-384    	; 0x4f0 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     670:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     672:	0d b4       	in	r0, 0x2d	; 45
     674:	07 fe       	sbrs	r0, 7
     676:	fd cf       	rjmp	.-6      	; 0x672 <DataflashManager_ReadBlocks+0x5c>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     678:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     67a:	0d b4       	in	r0, 0x2d	; 45
     67c:	07 fe       	sbrs	r0, 7
     67e:	fd cf       	rjmp	.-6      	; 0x67a <DataflashManager_ReadBlocks+0x64>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     680:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     682:	0d b4       	in	r0, 0x2d	; 45
     684:	07 fe       	sbrs	r0, 7
     686:	fd cf       	rjmp	.-6      	; 0x682 <DataflashManager_ReadBlocks+0x6c>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     688:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     68a:	0d b4       	in	r0, 0x2d	; 45
     68c:	07 fe       	sbrs	r0, 7
     68e:	fd cf       	rjmp	.-6      	; 0x68a <DataflashManager_ReadBlocks+0x74>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     690:	e0 d3       	rcall	.+1984   	; 0xe52 <Endpoint_WaitUntilReady>
     692:	88 23       	and	r24, r24
     694:	09 f0       	breq	.+2      	; 0x698 <DataflashManager_ReadBlocks+0x82>
     696:	c5 c0       	rjmp	.+394    	; 0x822 <DataflashManager_ReadBlocks+0x20c>
void DataflashManager_ReadBlocks(const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     698:	94 e0       	ldi	r25, 0x04	; 4
     69a:	d6 94       	lsr	r13
     69c:	c7 94       	ror	r12
     69e:	9a 95       	dec	r25
     6a0:	e1 f7       	brne	.-8      	; 0x69a <DataflashManager_ReadBlocks+0x84>
     6a2:	9c 2d       	mov	r25, r12
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6a4:	82 ed       	ldi	r24, 0xD2	; 210
     6a6:	c8 2e       	mov	r12, r24
     6a8:	ac c0       	rjmp	.+344    	; 0x802 <DataflashManager_ReadBlocks+0x1ec>
     6aa:	dd 24       	eor	r13, r13
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     6ac:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     6b0:	85 fd       	sbrc	r24, 5
     6b2:	0b c0       	rjmp	.+22     	; 0x6ca <DataflashManager_ReadBlocks+0xb4>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6b4:	80 91 e8 00 	lds	r24, 0x00E8
     6b8:	8e 77       	andi	r24, 0x7E	; 126
     6ba:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     6be:	99 83       	std	Y+1, r25	; 0x01
     6c0:	c8 d3       	rcall	.+1936   	; 0xe52 <Endpoint_WaitUntilReady>
     6c2:	99 81       	ldd	r25, Y+1	; 0x01
     6c4:	88 23       	and	r24, r24
     6c6:	09 f0       	breq	.+2      	; 0x6ca <DataflashManager_ReadBlocks+0xb4>
     6c8:	ac c0       	rjmp	.+344    	; 0x822 <DataflashManager_ReadBlocks+0x20c>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     6ca:	90 34       	cpi	r25, 0x40	; 64
     6cc:	e9 f4       	brne	.+58     	; 0x708 <DataflashManager_ReadBlocks+0xf2>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     6ce:	0f 5f       	subi	r16, 0xFF	; 255
     6d0:	1f 4f       	sbci	r17, 0xFF	; 255

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     6d2:	c8 01       	movw	r24, r16
     6d4:	e1 de       	rcall	.-574    	; 0x498 <Dataflash_SelectChipFromPage>
     6d6:	ce bc       	out	0x2e, r12	; 46
				while (!(SPSR & (1 << SPIF)));
     6d8:	0d b4       	in	r0, 0x2d	; 45
     6da:	07 fe       	sbrs	r0, 7
     6dc:	fd cf       	rjmp	.-6      	; 0x6d8 <DataflashManager_ReadBlocks+0xc2>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     6de:	c8 01       	movw	r24, r16
     6e0:	60 e0       	ldi	r22, 0x00	; 0
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	05 df       	rcall	.-502    	; 0x4f0 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6e6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6e8:	0d b4       	in	r0, 0x2d	; 45
     6ea:	07 fe       	sbrs	r0, 7
     6ec:	fd cf       	rjmp	.-6      	; 0x6e8 <DataflashManager_ReadBlocks+0xd2>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6ee:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6f0:	0d b4       	in	r0, 0x2d	; 45
     6f2:	07 fe       	sbrs	r0, 7
     6f4:	fd cf       	rjmp	.-6      	; 0x6f0 <DataflashManager_ReadBlocks+0xda>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6f6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6f8:	0d b4       	in	r0, 0x2d	; 45
     6fa:	07 fe       	sbrs	r0, 7
     6fc:	fd cf       	rjmp	.-6      	; 0x6f8 <DataflashManager_ReadBlocks+0xe2>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6fe:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     700:	0d b4       	in	r0, 0x2d	; 45
     702:	07 fe       	sbrs	r0, 7
     704:	fd cf       	rjmp	.-6      	; 0x700 <DataflashManager_ReadBlocks+0xea>
     706:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     708:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     70a:	0d b4       	in	r0, 0x2d	; 45
     70c:	07 fe       	sbrs	r0, 7
     70e:	fd cf       	rjmp	.-6      	; 0x70a <DataflashManager_ReadBlocks+0xf4>
				return SPDR;
     710:	8e b5       	in	r24, 0x2e	; 46
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     712:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     716:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     718:	0d b4       	in	r0, 0x2d	; 45
     71a:	07 fe       	sbrs	r0, 7
     71c:	fd cf       	rjmp	.-6      	; 0x718 <DataflashManager_ReadBlocks+0x102>
				return SPDR;
     71e:	8e b5       	in	r24, 0x2e	; 46
     720:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     724:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     726:	0d b4       	in	r0, 0x2d	; 45
     728:	07 fe       	sbrs	r0, 7
     72a:	fd cf       	rjmp	.-6      	; 0x726 <DataflashManager_ReadBlocks+0x110>
				return SPDR;
     72c:	8e b5       	in	r24, 0x2e	; 46
     72e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     732:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     734:	0d b4       	in	r0, 0x2d	; 45
     736:	07 fe       	sbrs	r0, 7
     738:	fd cf       	rjmp	.-6      	; 0x734 <DataflashManager_ReadBlocks+0x11e>
				return SPDR;
     73a:	8e b5       	in	r24, 0x2e	; 46
     73c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     740:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     742:	0d b4       	in	r0, 0x2d	; 45
     744:	07 fe       	sbrs	r0, 7
     746:	fd cf       	rjmp	.-6      	; 0x742 <DataflashManager_ReadBlocks+0x12c>
				return SPDR;
     748:	8e b5       	in	r24, 0x2e	; 46
     74a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     74e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     750:	0d b4       	in	r0, 0x2d	; 45
     752:	07 fe       	sbrs	r0, 7
     754:	fd cf       	rjmp	.-6      	; 0x750 <DataflashManager_ReadBlocks+0x13a>
				return SPDR;
     756:	8e b5       	in	r24, 0x2e	; 46
     758:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     75c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     75e:	0d b4       	in	r0, 0x2d	; 45
     760:	07 fe       	sbrs	r0, 7
     762:	fd cf       	rjmp	.-6      	; 0x75e <DataflashManager_ReadBlocks+0x148>
				return SPDR;
     764:	8e b5       	in	r24, 0x2e	; 46
     766:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     76a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     76c:	0d b4       	in	r0, 0x2d	; 45
     76e:	07 fe       	sbrs	r0, 7
     770:	fd cf       	rjmp	.-6      	; 0x76c <DataflashManager_ReadBlocks+0x156>
				return SPDR;
     772:	8e b5       	in	r24, 0x2e	; 46
     774:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     778:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     77a:	0d b4       	in	r0, 0x2d	; 45
     77c:	07 fe       	sbrs	r0, 7
     77e:	fd cf       	rjmp	.-6      	; 0x77a <DataflashManager_ReadBlocks+0x164>
				return SPDR;
     780:	8e b5       	in	r24, 0x2e	; 46
     782:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     786:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     788:	0d b4       	in	r0, 0x2d	; 45
     78a:	07 fe       	sbrs	r0, 7
     78c:	fd cf       	rjmp	.-6      	; 0x788 <DataflashManager_ReadBlocks+0x172>
				return SPDR;
     78e:	8e b5       	in	r24, 0x2e	; 46
     790:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     794:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     796:	0d b4       	in	r0, 0x2d	; 45
     798:	07 fe       	sbrs	r0, 7
     79a:	fd cf       	rjmp	.-6      	; 0x796 <DataflashManager_ReadBlocks+0x180>
				return SPDR;
     79c:	8e b5       	in	r24, 0x2e	; 46
     79e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7a2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7a4:	0d b4       	in	r0, 0x2d	; 45
     7a6:	07 fe       	sbrs	r0, 7
     7a8:	fd cf       	rjmp	.-6      	; 0x7a4 <DataflashManager_ReadBlocks+0x18e>
				return SPDR;
     7aa:	8e b5       	in	r24, 0x2e	; 46
     7ac:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7b0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7b2:	0d b4       	in	r0, 0x2d	; 45
     7b4:	07 fe       	sbrs	r0, 7
     7b6:	fd cf       	rjmp	.-6      	; 0x7b2 <DataflashManager_ReadBlocks+0x19c>
				return SPDR;
     7b8:	8e b5       	in	r24, 0x2e	; 46
     7ba:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7be:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7c0:	0d b4       	in	r0, 0x2d	; 45
     7c2:	07 fe       	sbrs	r0, 7
     7c4:	fd cf       	rjmp	.-6      	; 0x7c0 <DataflashManager_ReadBlocks+0x1aa>
				return SPDR;
     7c6:	8e b5       	in	r24, 0x2e	; 46
     7c8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7cc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7ce:	0d b4       	in	r0, 0x2d	; 45
     7d0:	07 fe       	sbrs	r0, 7
     7d2:	fd cf       	rjmp	.-6      	; 0x7ce <DataflashManager_ReadBlocks+0x1b8>
				return SPDR;
     7d4:	8e b5       	in	r24, 0x2e	; 46
     7d6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7da:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7dc:	0d b4       	in	r0, 0x2d	; 45
     7de:	07 fe       	sbrs	r0, 7
     7e0:	fd cf       	rjmp	.-6      	; 0x7dc <DataflashManager_ReadBlocks+0x1c6>
				return SPDR;
     7e2:	8e b5       	in	r24, 0x2e	; 46
     7e4:	80 93 f1 00 	sts	0x00F1, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (IsMassStoreReset)
     7e8:	80 91 44 01 	lds	r24, 0x0144
     7ec:	88 23       	and	r24, r24
     7ee:	c9 f4       	brne	.+50     	; 0x822 <DataflashManager_ReadBlocks+0x20c>
			Endpoint_Write_Byte(Dataflash_ReceiveByte());
			Endpoint_Write_Byte(Dataflash_ReceiveByte());
			Endpoint_Write_Byte(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     7f0:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     7f2:	d3 94       	inc	r13
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     7f4:	80 e2       	ldi	r24, 0x20	; 32
     7f6:	d8 16       	cp	r13, r24
     7f8:	09 f0       	breq	.+2      	; 0x7fc <DataflashManager_ReadBlocks+0x1e6>
     7fa:	58 cf       	rjmp	.-336    	; 0x6ac <DataflashManager_ReadBlocks+0x96>
			if (IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     7fc:	08 94       	sec
     7fe:	e1 08       	sbc	r14, r1
     800:	f1 08       	sbc	r15, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     802:	e1 14       	cp	r14, r1
     804:	f1 04       	cpc	r15, r1
     806:	09 f0       	breq	.+2      	; 0x80a <DataflashManager_ReadBlocks+0x1f4>
     808:	50 cf       	rjmp	.-352    	; 0x6aa <DataflashManager_ReadBlocks+0x94>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     80a:	80 91 e8 00 	lds	r24, 0x00E8
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     80e:	85 fd       	sbrc	r24, 5
     810:	05 c0       	rjmp	.+10     	; 0x81c <DataflashManager_ReadBlocks+0x206>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     812:	80 91 e8 00 	lds	r24, 0x00E8
     816:	8e 77       	andi	r24, 0x7E	; 126
     818:	80 93 e8 00 	sts	0x00E8, r24
     81c:	8e b1       	in	r24, 0x0e	; 14
     81e:	83 60       	ori	r24, 0x03	; 3
     820:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     822:	0f 90       	pop	r0
     824:	cf 91       	pop	r28
     826:	df 91       	pop	r29
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	df 90       	pop	r13
     832:	cf 90       	pop	r12
     834:	08 95       	ret

00000836 <DataflashManager_WriteBlocks>:
 *  \param[in] BlockAddress  Data block starting address for the write sequence
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     836:	af 92       	push	r10
     838:	bf 92       	push	r11
     83a:	cf 92       	push	r12
     83c:	df 92       	push	r13
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	df 93       	push	r29
     848:	cf 93       	push	r28
     84a:	0f 92       	push	r0
     84c:	cd b7       	in	r28, 0x3d	; 61
     84e:	de b7       	in	r29, 0x3e	; 62
     850:	7a 01       	movw	r14, r20
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     852:	29 e0       	ldi	r18, 0x09	; 9
     854:	66 0f       	add	r22, r22
     856:	77 1f       	adc	r23, r23
     858:	88 1f       	adc	r24, r24
     85a:	99 1f       	adc	r25, r25
     85c:	2a 95       	dec	r18
     85e:	d1 f7       	brne	.-12     	; 0x854 <DataflashManager_WriteBlocks+0x1e>
     860:	9b 01       	movw	r18, r22
     862:	ac 01       	movw	r20, r24
     864:	9a e0       	ldi	r25, 0x0A	; 10
     866:	56 95       	lsr	r21
     868:	47 95       	ror	r20
     86a:	37 95       	ror	r19
     86c:	27 95       	ror	r18
     86e:	9a 95       	dec	r25
     870:	d1 f7       	brne	.-12     	; 0x866 <DataflashManager_WriteBlocks+0x30>
     872:	89 01       	movw	r16, r18
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     874:	8f ef       	ldi	r24, 0xFF	; 255
     876:	c8 2e       	mov	r12, r24
     878:	83 e0       	ldi	r24, 0x03	; 3
     87a:	d8 2e       	mov	r13, r24
     87c:	c6 22       	and	r12, r22
     87e:	d7 22       	and	r13, r23
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     880:	c9 01       	movw	r24, r18
     882:	0a de       	rcall	.-1004   	; 0x498 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     884:	83 e5       	ldi	r24, 0x53	; 83
     886:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     888:	0d b4       	in	r0, 0x2d	; 45
     88a:	07 fe       	sbrs	r0, 7
     88c:	fd cf       	rjmp	.-6      	; 0x888 <DataflashManager_WriteBlocks+0x52>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     88e:	c8 01       	movw	r24, r16
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	2d de       	rcall	.-934    	; 0x4f0 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     896:	1e de       	rcall	.-964    	; 0x4d4 <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     898:	84 e8       	ldi	r24, 0x84	; 132
     89a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     89c:	0d b4       	in	r0, 0x2d	; 45
     89e:	07 fe       	sbrs	r0, 7
     8a0:	fd cf       	rjmp	.-6      	; 0x89c <DataflashManager_WriteBlocks+0x66>
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	b6 01       	movw	r22, r12
     8a8:	23 de       	rcall	.-954    	; 0x4f0 <Dataflash_SendAddressBytes>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     8aa:	d3 d2       	rcall	.+1446   	; 0xe52 <Endpoint_WaitUntilReady>
     8ac:	88 23       	and	r24, r24
     8ae:	09 f0       	breq	.+2      	; 0x8b2 <DataflashManager_WriteBlocks+0x7c>
     8b0:	ea c0       	rjmp	.+468    	; 0xa86 <DataflashManager_WriteBlocks+0x250>
void DataflashManager_WriteBlocks(const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     8b2:	b4 e0       	ldi	r27, 0x04	; 4
     8b4:	d6 94       	lsr	r13
     8b6:	c7 94       	ror	r12
     8b8:	ba 95       	dec	r27
     8ba:	e1 f7       	brne	.-8      	; 0x8b4 <DataflashManager_WriteBlocks+0x7e>
     8bc:	9c 2d       	mov	r25, r12
     8be:	57 01       	movw	r10, r14
     8c0:	a5 e0       	ldi	r26, 0x05	; 5
     8c2:	aa 0c       	add	r10, r10
     8c4:	bb 1c       	adc	r11, r11
     8c6:	aa 95       	dec	r26
     8c8:	e1 f7       	brne	.-8      	; 0x8c2 <DataflashManager_WriteBlocks+0x8c>
     8ca:	dd 24       	eor	r13, r13
     8cc:	bd c0       	rjmp	.+378    	; 0xa48 <DataflashManager_WriteBlocks+0x212>
     8ce:	cc 24       	eor	r12, r12
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     8d0:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     8d4:	85 fd       	sbrc	r24, 5
     8d6:	0b c0       	rjmp	.+22     	; 0x8ee <DataflashManager_WriteBlocks+0xb8>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     8d8:	80 91 e8 00 	lds	r24, 0x00E8
     8dc:	8b 77       	andi	r24, 0x7B	; 123
     8de:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     8e2:	99 83       	std	Y+1, r25	; 0x01
     8e4:	b6 d2       	rcall	.+1388   	; 0xe52 <Endpoint_WaitUntilReady>
     8e6:	99 81       	ldd	r25, Y+1	; 0x01
     8e8:	88 23       	and	r24, r24
     8ea:	09 f0       	breq	.+2      	; 0x8ee <DataflashManager_WriteBlocks+0xb8>
     8ec:	cc c0       	rjmp	.+408    	; 0xa86 <DataflashManager_WriteBlocks+0x250>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     8ee:	90 34       	cpi	r25, 0x40	; 64
     8f0:	09 f0       	breq	.+2      	; 0x8f4 <DataflashManager_WriteBlocks+0xbe>
     8f2:	39 c0       	rjmp	.+114    	; 0x966 <DataflashManager_WriteBlocks+0x130>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     8f4:	ef dd       	rcall	.-1058   	; 0x4d4 <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     8f6:	dd 20       	and	r13, r13
     8f8:	11 f4       	brne	.+4      	; 0x8fe <DataflashManager_WriteBlocks+0xc8>
     8fa:	83 e8       	ldi	r24, 0x83	; 131
     8fc:	01 c0       	rjmp	.+2      	; 0x900 <DataflashManager_WriteBlocks+0xca>
     8fe:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     900:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     902:	0d b4       	in	r0, 0x2d	; 45
     904:	07 fe       	sbrs	r0, 7
     906:	fd cf       	rjmp	.-6      	; 0x902 <DataflashManager_WriteBlocks+0xcc>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     908:	c8 01       	movw	r24, r16
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	f0 dd       	rcall	.-1056   	; 0x4f0 <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     910:	0f 5f       	subi	r16, 0xFF	; 255
     912:	1f 4f       	sbci	r17, 0xFF	; 255
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     914:	8e b1       	in	r24, 0x0e	; 14

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     916:	83 70       	andi	r24, 0x03	; 3
     918:	81 30       	cpi	r24, 0x01	; 1
     91a:	09 f4       	brne	.+2      	; 0x91e <DataflashManager_WriteBlocks+0xe8>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     91c:	d8 26       	eor	r13, r24

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     91e:	c8 01       	movw	r24, r16
     920:	bb dd       	rcall	.-1162   	; 0x498 <Dataflash_SelectChipFromPage>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     922:	20 e4       	ldi	r18, 0x40	; 64
     924:	a2 16       	cp	r10, r18
     926:	b1 04       	cpc	r11, r1
     928:	78 f4       	brcc	.+30     	; 0x948 <DataflashManager_WriteBlocks+0x112>
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     92a:	d4 dd       	rcall	.-1112   	; 0x4d4 <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     92c:	dd 20       	and	r13, r13
     92e:	11 f4       	brne	.+4      	; 0x934 <DataflashManager_WriteBlocks+0xfe>
     930:	83 e5       	ldi	r24, 0x53	; 83
     932:	01 c0       	rjmp	.+2      	; 0x936 <DataflashManager_WriteBlocks+0x100>
     934:	85 e5       	ldi	r24, 0x55	; 85
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     936:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     938:	0d b4       	in	r0, 0x2d	; 45
     93a:	07 fe       	sbrs	r0, 7
     93c:	fd cf       	rjmp	.-6      	; 0x938 <DataflashManager_WriteBlocks+0x102>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     93e:	c8 01       	movw	r24, r16
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	d5 dd       	rcall	.-1110   	; 0x4f0 <Dataflash_SendAddressBytes>
					Dataflash_WaitWhileBusy();
     946:	c6 dd       	rcall	.-1140   	; 0x4d4 <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     948:	dd 20       	and	r13, r13
     94a:	11 f4       	brne	.+4      	; 0x950 <DataflashManager_WriteBlocks+0x11a>
     94c:	84 e8       	ldi	r24, 0x84	; 132
     94e:	01 c0       	rjmp	.+2      	; 0x952 <DataflashManager_WriteBlocks+0x11c>
     950:	87 e8       	ldi	r24, 0x87	; 135
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     952:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     954:	0d b4       	in	r0, 0x2d	; 45
     956:	07 fe       	sbrs	r0, 7
     958:	fd cf       	rjmp	.-6      	; 0x954 <DataflashManager_WriteBlocks+0x11e>
				Dataflash_SendAddressBytes(0, 0);
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	c6 dd       	rcall	.-1140   	; 0x4f0 <Dataflash_SendAddressBytes>
     964:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     966:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     96a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     96c:	0d b4       	in	r0, 0x2d	; 45
     96e:	07 fe       	sbrs	r0, 7
     970:	fd cf       	rjmp	.-6      	; 0x96c <DataflashManager_WriteBlocks+0x136>
     972:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     976:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     978:	0d b4       	in	r0, 0x2d	; 45
     97a:	07 fe       	sbrs	r0, 7
     97c:	fd cf       	rjmp	.-6      	; 0x978 <DataflashManager_WriteBlocks+0x142>
     97e:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     982:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     984:	0d b4       	in	r0, 0x2d	; 45
     986:	07 fe       	sbrs	r0, 7
     988:	fd cf       	rjmp	.-6      	; 0x984 <DataflashManager_WriteBlocks+0x14e>
     98a:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     98e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     990:	0d b4       	in	r0, 0x2d	; 45
     992:	07 fe       	sbrs	r0, 7
     994:	fd cf       	rjmp	.-6      	; 0x990 <DataflashManager_WriteBlocks+0x15a>
     996:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     99a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     99c:	0d b4       	in	r0, 0x2d	; 45
     99e:	07 fe       	sbrs	r0, 7
     9a0:	fd cf       	rjmp	.-6      	; 0x99c <DataflashManager_WriteBlocks+0x166>
     9a2:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9a6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9a8:	0d b4       	in	r0, 0x2d	; 45
     9aa:	07 fe       	sbrs	r0, 7
     9ac:	fd cf       	rjmp	.-6      	; 0x9a8 <DataflashManager_WriteBlocks+0x172>
     9ae:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9b2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9b4:	0d b4       	in	r0, 0x2d	; 45
     9b6:	07 fe       	sbrs	r0, 7
     9b8:	fd cf       	rjmp	.-6      	; 0x9b4 <DataflashManager_WriteBlocks+0x17e>
     9ba:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9be:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9c0:	0d b4       	in	r0, 0x2d	; 45
     9c2:	07 fe       	sbrs	r0, 7
     9c4:	fd cf       	rjmp	.-6      	; 0x9c0 <DataflashManager_WriteBlocks+0x18a>
     9c6:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9ca:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9cc:	0d b4       	in	r0, 0x2d	; 45
     9ce:	07 fe       	sbrs	r0, 7
     9d0:	fd cf       	rjmp	.-6      	; 0x9cc <DataflashManager_WriteBlocks+0x196>
     9d2:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9d6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9d8:	0d b4       	in	r0, 0x2d	; 45
     9da:	07 fe       	sbrs	r0, 7
     9dc:	fd cf       	rjmp	.-6      	; 0x9d8 <DataflashManager_WriteBlocks+0x1a2>
     9de:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9e2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9e4:	0d b4       	in	r0, 0x2d	; 45
     9e6:	07 fe       	sbrs	r0, 7
     9e8:	fd cf       	rjmp	.-6      	; 0x9e4 <DataflashManager_WriteBlocks+0x1ae>
     9ea:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9ee:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9f0:	0d b4       	in	r0, 0x2d	; 45
     9f2:	07 fe       	sbrs	r0, 7
     9f4:	fd cf       	rjmp	.-6      	; 0x9f0 <DataflashManager_WriteBlocks+0x1ba>
     9f6:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9fa:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9fc:	0d b4       	in	r0, 0x2d	; 45
     9fe:	07 fe       	sbrs	r0, 7
     a00:	fd cf       	rjmp	.-6      	; 0x9fc <DataflashManager_WriteBlocks+0x1c6>
     a02:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a06:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a08:	0d b4       	in	r0, 0x2d	; 45
     a0a:	07 fe       	sbrs	r0, 7
     a0c:	fd cf       	rjmp	.-6      	; 0xa08 <DataflashManager_WriteBlocks+0x1d2>
     a0e:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a12:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a14:	0d b4       	in	r0, 0x2d	; 45
     a16:	07 fe       	sbrs	r0, 7
     a18:	fd cf       	rjmp	.-6      	; 0xa14 <DataflashManager_WriteBlocks+0x1de>
     a1a:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a1e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a20:	0d b4       	in	r0, 0x2d	; 45
     a22:	07 fe       	sbrs	r0, 7
     a24:	fd cf       	rjmp	.-6      	; 0xa20 <DataflashManager_WriteBlocks+0x1ea>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (IsMassStoreReset)
     a26:	80 91 44 01 	lds	r24, 0x0144
     a2a:	88 23       	and	r24, r24
     a2c:	61 f5       	brne	.+88     	; 0xa86 <DataflashManager_WriteBlocks+0x250>
			Dataflash_SendByte(Endpoint_Read_Byte());
			Dataflash_SendByte(Endpoint_Read_Byte());
			Dataflash_SendByte(Endpoint_Read_Byte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     a2e:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     a30:	c3 94       	inc	r12
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     a32:	30 e2       	ldi	r19, 0x20	; 32
     a34:	c3 16       	cp	r12, r19
     a36:	09 f0       	breq	.+2      	; 0xa3a <DataflashManager_WriteBlocks+0x204>
     a38:	4b cf       	rjmp	.-362    	; 0x8d0 <DataflashManager_WriteBlocks+0x9a>
			if (IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter and reset the sub block counter */
		TotalBlocks--;
     a3a:	08 94       	sec
     a3c:	e1 08       	sbc	r14, r1
     a3e:	f1 08       	sbc	r15, r1
     a40:	e0 ee       	ldi	r30, 0xE0	; 224
     a42:	ff ef       	ldi	r31, 0xFF	; 255
     a44:	ae 0e       	add	r10, r30
     a46:	bf 1e       	adc	r11, r31

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     a48:	e1 14       	cp	r14, r1
     a4a:	f1 04       	cpc	r15, r1
     a4c:	09 f0       	breq	.+2      	; 0xa50 <DataflashManager_WriteBlocks+0x21a>
     a4e:	3f cf       	rjmp	.-386    	; 0x8ce <DataflashManager_WriteBlocks+0x98>
		/* Decrement the blocks remaining counter and reset the sub block counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     a50:	41 dd       	rcall	.-1406   	; 0x4d4 <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     a52:	dd 20       	and	r13, r13
     a54:	11 f4       	brne	.+4      	; 0xa5a <DataflashManager_WriteBlocks+0x224>
     a56:	83 e8       	ldi	r24, 0x83	; 131
     a58:	01 c0       	rjmp	.+2      	; 0xa5c <DataflashManager_WriteBlocks+0x226>
     a5a:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a5c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a5e:	0d b4       	in	r0, 0x2d	; 45
     a60:	07 fe       	sbrs	r0, 7
     a62:	fd cf       	rjmp	.-6      	; 0xa5e <DataflashManager_WriteBlocks+0x228>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     a64:	c8 01       	movw	r24, r16
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	42 dd       	rcall	.-1404   	; 0x4f0 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     a6c:	33 dd       	rcall	.-1434   	; 0x4d4 <Dataflash_WaitWhileBusy>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     a6e:	80 91 e8 00 	lds	r24, 0x00E8

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     a72:	85 fd       	sbrc	r24, 5
     a74:	05 c0       	rjmp	.+10     	; 0xa80 <DataflashManager_WriteBlocks+0x24a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a76:	80 91 e8 00 	lds	r24, 0x00E8
     a7a:	8b 77       	andi	r24, 0x7B	; 123
     a7c:	80 93 e8 00 	sts	0x00E8, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     a80:	8e b1       	in	r24, 0x0e	; 14
     a82:	83 60       	ori	r24, 0x03	; 3
     a84:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     a86:	0f 90       	pop	r0
     a88:	cf 91       	pop	r28
     a8a:	df 91       	pop	r29
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	ff 90       	pop	r15
     a92:	ef 90       	pop	r14
     a94:	df 90       	pop	r13
     a96:	cf 90       	pop	r12
     a98:	bf 90       	pop	r11
     a9a:	af 90       	pop	r10
     a9c:	08 95       	ret

00000a9e <SCSI_Command_Inquiry>:
 *  and capabilities to the host.
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(void)
{
     a9e:	cf 92       	push	r12
     aa0:	df 92       	push	r13
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	df 93       	push	r29
     aac:	cf 93       	push	r28
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= BytesTransferred;

	return true;
}
     ab2:	cd b6       	in	r12, 0x3d	; 61
     ab4:	de b6       	in	r13, 0x3e	; 62

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     ab6:	00 91 58 01 	lds	r16, 0x0158
     aba:	10 91 57 01 	lds	r17, 0x0157
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = (AllocationLength < sizeof(InquiryData))? AllocationLength :
	                                                                       sizeof(InquiryData);

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     abe:	80 91 55 01 	lds	r24, 0x0155
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	83 70       	andi	r24, 0x03	; 3
     ac6:	90 70       	andi	r25, 0x00	; 0
     ac8:	89 2b       	or	r24, r25
     aca:	21 f4       	brne	.+8      	; 0xad4 <SCSI_Command_Inquiry+0x36>
     acc:	80 91 56 01 	lds	r24, 0x0156
     ad0:	88 23       	and	r24, r24
     ad2:	69 f0       	breq	.+26     	; 0xaee <SCSI_Command_Inquiry+0x50>
	     CommandBlock.SCSICommandData[2])
	{
		/* Optional but unsupported bits set - update the SENSE key and fail the request */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     ad4:	80 91 33 01 	lds	r24, 0x0133
     ad8:	80 7f       	andi	r24, 0xF0	; 240
     ada:	85 60       	ori	r24, 0x05	; 5
     adc:	80 93 33 01 	sts	0x0133, r24
     ae0:	84 e2       	ldi	r24, 0x24	; 36
     ae2:	80 93 3d 01 	sts	0x013D, r24
     ae6:	10 92 3e 01 	sts	0x013E, r1
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	3a c0       	rjmp	.+116    	; 0xb62 <SCSI_Command_Inquiry+0xc4>
 */
static bool SCSI_Command_Inquiry(void)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = (AllocationLength < sizeof(InquiryData))? AllocationLength :
	                                                                       sizeof(InquiryData);
     aee:	78 01       	movw	r14, r16
     af0:	05 32       	cpi	r16, 0x25	; 37
     af2:	11 05       	cpc	r17, r1
     af4:	18 f0       	brcs	.+6      	; 0xafc <SCSI_Command_Inquiry+0x5e>
     af6:	84 e2       	ldi	r24, 0x24	; 36
     af8:	e8 2e       	mov	r14, r24
     afa:	f1 2c       	mov	r15, r1

		return false;
	}

	/* Write the INQUIRY data to the endpoint */
	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, StreamCallback_AbortOnMassStoreReset);
     afc:	8d e0       	ldi	r24, 0x0D	; 13
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	b7 01       	movw	r22, r14
     b02:	47 eb       	ldi	r20, 0xB7	; 183
     b04:	50 e0       	ldi	r21, 0x00	; 0
     b06:	aa d5       	rcall	.+2900   	; 0x165c <Endpoint_Write_Stream_LE>

	uint8_t PadBytes[AllocationLength - BytesTransferred];
     b08:	b8 01       	movw	r22, r16
     b0a:	6e 19       	sub	r22, r14
     b0c:	7f 09       	sbc	r23, r15
     b0e:	8d b7       	in	r24, 0x3d	; 61
     b10:	9e b7       	in	r25, 0x3e	; 62
     b12:	86 1b       	sub	r24, r22
     b14:	97 0b       	sbc	r25, r23
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	9e bf       	out	0x3e, r25	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	8d bf       	out	0x3d, r24	; 61

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Write_Stream_LE(&PadBytes, sizeof(PadBytes), StreamCallback_AbortOnMassStoreReset);
     b20:	01 96       	adiw	r24, 0x01	; 1
     b22:	47 eb       	ldi	r20, 0xB7	; 183
     b24:	50 e0       	ldi	r21, 0x00	; 0
     b26:	9a d5       	rcall	.+2868   	; 0x165c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b28:	80 91 e8 00 	lds	r24, 0x00E8
     b2c:	8e 77       	andi	r24, 0x7E	; 126
     b2e:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= BytesTransferred;
     b32:	97 01       	movw	r18, r14
     b34:	40 e0       	ldi	r20, 0x00	; 0
     b36:	50 e0       	ldi	r21, 0x00	; 0
     b38:	80 91 4d 01 	lds	r24, 0x014D
     b3c:	90 91 4e 01 	lds	r25, 0x014E
     b40:	a0 91 4f 01 	lds	r26, 0x014F
     b44:	b0 91 50 01 	lds	r27, 0x0150
     b48:	82 1b       	sub	r24, r18
     b4a:	93 0b       	sbc	r25, r19
     b4c:	a4 0b       	sbc	r26, r20
     b4e:	b5 0b       	sbc	r27, r21
     b50:	80 93 4d 01 	sts	0x014D, r24
     b54:	90 93 4e 01 	sts	0x014E, r25
     b58:	a0 93 4f 01 	sts	0x014F, r26
     b5c:	b0 93 50 01 	sts	0x0150, r27
     b60:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	f8 94       	cli
     b66:	de be       	out	0x3e, r13	; 62
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	cd be       	out	0x3d, r12	; 61
     b6c:	cf 91       	pop	r28
     b6e:	df 91       	pop	r29
     b70:	1f 91       	pop	r17
     b72:	0f 91       	pop	r16
     b74:	ff 90       	pop	r15
     b76:	ef 90       	pop	r14
     b78:	df 90       	pop	r13
     b7a:	cf 90       	pop	r12
     b7c:	08 95       	ret

00000b7e <SCSI_Command_Request_Sense>:
 *  including the error code and additional error information so that the host can determine why a command failed to complete.
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(void)
{
     b7e:	ef 92       	push	r14
     b80:	ff 92       	push	r15
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= BytesTransferred;

	return true;
}
     b8e:	ed b6       	in	r14, 0x3d	; 61
     b90:	fe b6       	in	r15, 0x3e	; 62
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(void)
{
	uint8_t  AllocationLength = CommandBlock.SCSICommandData[4];
     b92:	10 91 58 01 	lds	r17, 0x0158
	uint8_t  BytesTransferred = (AllocationLength < sizeof(SenseData))? AllocationLength : sizeof(SenseData);
     b96:	01 2f       	mov	r16, r17
     b98:	13 31       	cpi	r17, 0x13	; 19
     b9a:	08 f0       	brcs	.+2      	; 0xb9e <SCSI_Command_Request_Sense+0x20>
     b9c:	02 e1       	ldi	r16, 0x12	; 18

	/* Send the SENSE data - this indicates to the host the status of the last command */
	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, StreamCallback_AbortOnMassStoreReset);
     b9e:	81 e3       	ldi	r24, 0x31	; 49
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	60 2f       	mov	r22, r16
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	47 eb       	ldi	r20, 0xB7	; 183
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	58 d5       	rcall	.+2736   	; 0x165c <Endpoint_Write_Stream_LE>

	uint8_t PadBytes[AllocationLength - BytesTransferred];
     bac:	61 2f       	mov	r22, r17
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	60 1b       	sub	r22, r16
     bb2:	71 09       	sbc	r23, r1
     bb4:	8d b7       	in	r24, 0x3d	; 61
     bb6:	9e b7       	in	r25, 0x3e	; 62
     bb8:	86 1b       	sub	r24, r22
     bba:	97 0b       	sbc	r25, r23
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	9e bf       	out	0x3e, r25	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	8d bf       	out	0x3d, r24	; 61

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Write_Stream_LE(&PadBytes, sizeof(PadBytes), StreamCallback_AbortOnMassStoreReset);
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	47 eb       	ldi	r20, 0xB7	; 183
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	47 d5       	rcall	.+2702   	; 0x165c <Endpoint_Write_Stream_LE>
     bce:	80 91 e8 00 	lds	r24, 0x00E8
     bd2:	8e 77       	andi	r24, 0x7E	; 126
     bd4:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= BytesTransferred;
     bd8:	80 91 4d 01 	lds	r24, 0x014D
     bdc:	90 91 4e 01 	lds	r25, 0x014E
     be0:	a0 91 4f 01 	lds	r26, 0x014F
     be4:	b0 91 50 01 	lds	r27, 0x0150
     be8:	80 1b       	sub	r24, r16
     bea:	91 09       	sbc	r25, r1
     bec:	a1 09       	sbc	r26, r1
     bee:	b1 09       	sbc	r27, r1
     bf0:	80 93 4d 01 	sts	0x014D, r24
     bf4:	90 93 4e 01 	sts	0x014E, r25
     bf8:	a0 93 4f 01 	sts	0x014F, r26
     bfc:	b0 93 50 01 	sts	0x0150, r27

	return true;
}
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	fe be       	out	0x3e, r15	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	ed be       	out	0x3d, r14	; 61
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	ff 90       	pop	r15
     c16:	ef 90       	pop	r14
     c18:	08 95       	ret

00000c1a <SCSI_Command_ReadWrite_10>:
 *  \param[in] IsDataRead  Indicates if the command is a READ (10) command or WRITE (10) command (DATA_READ or DATA_WRITE)
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(const bool IsDataRead)
{
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	28 2f       	mov	r18, r24

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     c20:	60 91 59 01 	lds	r22, 0x0159
     c24:	70 91 58 01 	lds	r23, 0x0158
     c28:	80 91 57 01 	lds	r24, 0x0157
     c2c:	90 91 56 01 	lds	r25, 0x0156

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     c30:	c0 91 5c 01 	lds	r28, 0x015C
     c34:	d0 91 5b 01 	lds	r29, 0x015B
	uint32_t BlockAddress = SwapEndian_32(*(uint32_t*)&CommandBlock.SCSICommandData[2]);
	uint16_t TotalBlocks  = SwapEndian_16(*(uint16_t*)&CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     c38:	60 30       	cpi	r22, 0x00	; 0
     c3a:	30 e8       	ldi	r19, 0x80	; 128
     c3c:	73 07       	cpc	r23, r19
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	83 07       	cpc	r24, r19
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	93 07       	cpc	r25, r19
     c46:	68 f0       	brcs	.+26     	; 0xc62 <SCSI_Command_ReadWrite_10+0x48>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     c48:	80 91 33 01 	lds	r24, 0x0133
     c4c:	80 7f       	andi	r24, 0xF0	; 240
     c4e:	85 60       	ori	r24, 0x05	; 5
     c50:	80 93 33 01 	sts	0x0133, r24
     c54:	81 e2       	ldi	r24, 0x21	; 33
     c56:	80 93 3d 01 	sts	0x013D, r24
     c5a:	10 92 3e 01 	sts	0x013E, r1
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	26 c0       	rjmp	.+76     	; 0xcae <SCSI_Command_ReadWrite_10+0x94>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     c62:	22 23       	and	r18, r18
     c64:	19 f0       	breq	.+6      	; 0xc6c <SCSI_Command_ReadWrite_10+0x52>
	  DataflashManager_ReadBlocks(BlockAddress, TotalBlocks);
     c66:	ae 01       	movw	r20, r28
     c68:	d6 dc       	rcall	.-1620   	; 0x616 <DataflashManager_ReadBlocks>
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <SCSI_Command_ReadWrite_10+0x56>
	else
	  DataflashManager_WriteBlocks(BlockAddress, TotalBlocks);
     c6c:	ae 01       	movw	r20, r28
     c6e:	e3 dd       	rcall	.-1082   	; 0x836 <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     c70:	9e 01       	movw	r18, r28
     c72:	40 e0       	ldi	r20, 0x00	; 0
     c74:	50 e0       	ldi	r21, 0x00	; 0
     c76:	99 e0       	ldi	r25, 0x09	; 9
     c78:	22 0f       	add	r18, r18
     c7a:	33 1f       	adc	r19, r19
     c7c:	44 1f       	adc	r20, r20
     c7e:	55 1f       	adc	r21, r21
     c80:	9a 95       	dec	r25
     c82:	d1 f7       	brne	.-12     	; 0xc78 <SCSI_Command_ReadWrite_10+0x5e>
     c84:	80 91 4d 01 	lds	r24, 0x014D
     c88:	90 91 4e 01 	lds	r25, 0x014E
     c8c:	a0 91 4f 01 	lds	r26, 0x014F
     c90:	b0 91 50 01 	lds	r27, 0x0150
     c94:	82 1b       	sub	r24, r18
     c96:	93 0b       	sbc	r25, r19
     c98:	a4 0b       	sbc	r26, r20
     c9a:	b5 0b       	sbc	r27, r21
     c9c:	80 93 4d 01 	sts	0x014D, r24
     ca0:	90 93 4e 01 	sts	0x014E, r25
     ca4:	a0 93 4f 01 	sts	0x014F, r26
     ca8:	b0 93 50 01 	sts	0x0150, r27
     cac:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	08 95       	ret

00000cb4 <SCSI_DecodeSCSICommand>:
bool SCSI_DecodeSCSICommand(void)
{
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (CommandBlock.SCSICommandData[0])
     cb4:	80 91 54 01 	lds	r24, 0x0154
     cb8:	8e 31       	cpi	r24, 0x1E	; 30
     cba:	09 f4       	brne	.+2      	; 0xcbe <SCSI_DecodeSCSICommand+0xa>
     cbc:	74 c0       	rjmp	.+232    	; 0xda6 <SCSI_DecodeSCSICommand+0xf2>
     cbe:	8f 31       	cpi	r24, 0x1F	; 31
     cc0:	70 f4       	brcc	.+28     	; 0xcde <SCSI_DecodeSCSICommand+0x2a>
     cc2:	83 30       	cpi	r24, 0x03	; 3
     cc4:	f1 f0       	breq	.+60     	; 0xd02 <SCSI_DecodeSCSICommand+0x4e>
     cc6:	84 30       	cpi	r24, 0x04	; 4
     cc8:	20 f4       	brcc	.+8      	; 0xcd2 <SCSI_DecodeSCSICommand+0x1e>
     cca:	88 23       	and	r24, r24
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <SCSI_DecodeSCSICommand+0x1c>
     cce:	6b c0       	rjmp	.+214    	; 0xda6 <SCSI_DecodeSCSICommand+0xf2>
     cd0:	73 c0       	rjmp	.+230    	; 0xdb8 <SCSI_DecodeSCSICommand+0x104>
     cd2:	82 31       	cpi	r24, 0x12	; 18
     cd4:	a1 f0       	breq	.+40     	; 0xcfe <SCSI_DecodeSCSICommand+0x4a>
     cd6:	8d 31       	cpi	r24, 0x1D	; 29
     cd8:	09 f0       	breq	.+2      	; 0xcdc <SCSI_DecodeSCSICommand+0x28>
     cda:	6e c0       	rjmp	.+220    	; 0xdb8 <SCSI_DecodeSCSICommand+0x104>
     cdc:	45 c0       	rjmp	.+138    	; 0xd68 <SCSI_DecodeSCSICommand+0xb4>
     cde:	88 32       	cpi	r24, 0x28	; 40
     ce0:	09 f4       	brne	.+2      	; 0xce4 <SCSI_DecodeSCSICommand+0x30>
     ce2:	5e c0       	rjmp	.+188    	; 0xda0 <SCSI_DecodeSCSICommand+0xec>
     ce4:	89 32       	cpi	r24, 0x29	; 41
     ce6:	20 f4       	brcc	.+8      	; 0xcf0 <SCSI_DecodeSCSICommand+0x3c>
     ce8:	85 32       	cpi	r24, 0x25	; 37
     cea:	09 f0       	breq	.+2      	; 0xcee <SCSI_DecodeSCSICommand+0x3a>
     cec:	65 c0       	rjmp	.+202    	; 0xdb8 <SCSI_DecodeSCSICommand+0x104>
     cee:	0b c0       	rjmp	.+22     	; 0xd06 <SCSI_DecodeSCSICommand+0x52>
     cf0:	8a 32       	cpi	r24, 0x2A	; 42
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <SCSI_DecodeSCSICommand+0x42>
     cf4:	53 c0       	rjmp	.+166    	; 0xd9c <SCSI_DecodeSCSICommand+0xe8>
     cf6:	8f 32       	cpi	r24, 0x2F	; 47
     cf8:	09 f0       	breq	.+2      	; 0xcfc <SCSI_DecodeSCSICommand+0x48>
     cfa:	5e c0       	rjmp	.+188    	; 0xdb8 <SCSI_DecodeSCSICommand+0x104>
     cfc:	54 c0       	rjmp	.+168    	; 0xda6 <SCSI_DecodeSCSICommand+0xf2>
	{
		case SCSI_CMD_INQUIRY:
			CommandSuccess = SCSI_Command_Inquiry();
     cfe:	cf de       	rcall	.-610    	; 0xa9e <SCSI_Command_Inquiry>
     d00:	65 c0       	rjmp	.+202    	; 0xdcc <SCSI_DecodeSCSICommand+0x118>
			break;
		case SCSI_CMD_REQUEST_SENSE:
			CommandSuccess = SCSI_Command_Request_Sense();
     d02:	3d df       	rcall	.-390    	; 0xb7e <SCSI_Command_Request_Sense>
     d04:	63 c0       	rjmp	.+198    	; 0xdcc <SCSI_DecodeSCSICommand+0x118>
			 *  \param[in] DWord  Next double word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_DWord_BE(const uint32_t DWord) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_DWord_BE(const uint32_t DWord)
			{
				UEDATX = (DWord >> 24);
     d06:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (DWord >> 16);
     d0a:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (DWord >> 8);
     d0e:	8f e7       	ldi	r24, 0x7F	; 127
     d10:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (DWord &  0xFF);
     d14:	8f ef       	ldi	r24, 0xFF	; 255
     d16:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] DWord  Next double word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_DWord_BE(const uint32_t DWord) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_DWord_BE(const uint32_t DWord)
			{
				UEDATX = (DWord >> 24);
     d1a:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (DWord >> 16);
     d1e:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (DWord >> 8);
     d22:	82 e0       	ldi	r24, 0x02	; 2
     d24:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (DWord &  0xFF);
     d28:	10 92 f1 00 	sts	0x00F1, r1

	/* Send the logical block size of the device (must be 512 bytes) */
	Endpoint_Write_DWord_BE(VIRTUAL_MEMORY_BLOCK_SIZE);

	/* Check if the current command is being aborted by the host */
	if (IsMassStoreReset)
     d2c:	80 91 44 01 	lds	r24, 0x0144
     d30:	88 23       	and	r24, r24
     d32:	09 f0       	breq	.+2      	; 0xd36 <SCSI_DecodeSCSICommand+0x82>
     d34:	4d c0       	rjmp	.+154    	; 0xdd0 <SCSI_DecodeSCSICommand+0x11c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d36:	80 91 e8 00 	lds	r24, 0x00E8
     d3a:	8e 77       	andi	r24, 0x7E	; 126
     d3c:	80 93 e8 00 	sts	0x00E8, r24

	/* Send the endpoint data packet to the host */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= 8;
     d40:	80 91 4d 01 	lds	r24, 0x014D
     d44:	90 91 4e 01 	lds	r25, 0x014E
     d48:	a0 91 4f 01 	lds	r26, 0x014F
     d4c:	b0 91 50 01 	lds	r27, 0x0150
     d50:	08 97       	sbiw	r24, 0x08	; 8
     d52:	a1 09       	sbc	r26, r1
     d54:	b1 09       	sbc	r27, r1
     d56:	80 93 4d 01 	sts	0x014D, r24
     d5a:	90 93 4e 01 	sts	0x014E, r25
     d5e:	a0 93 4f 01 	sts	0x014F, r26
     d62:	b0 93 50 01 	sts	0x0150, r27
     d66:	36 c0       	rjmp	.+108    	; 0xdd4 <SCSI_DecodeSCSICommand+0x120>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(void)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(CommandBlock.SCSICommandData[1] & (1 << 2)))
     d68:	80 91 55 01 	lds	r24, 0x0155
     d6c:	82 fd       	sbrc	r24, 2
     d6e:	08 c0       	rjmp	.+16     	; 0xd80 <SCSI_DecodeSCSICommand+0xcc>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     d70:	80 91 33 01 	lds	r24, 0x0133
     d74:	80 7f       	andi	r24, 0xF0	; 240
     d76:	85 60       	ori	r24, 0x05	; 5
     d78:	80 93 33 01 	sts	0x0133, r24
     d7c:	84 e2       	ldi	r24, 0x24	; 36
     d7e:	23 c0       	rjmp	.+70     	; 0xdc6 <SCSI_DecodeSCSICommand+0x112>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     d80:	1f dc       	rcall	.-1986   	; 0x5c0 <DataflashManager_CheckDataflashOperation>
     d82:	88 23       	and	r24, r24
     d84:	81 f4       	brne	.+32     	; 0xda6 <SCSI_DecodeSCSICommand+0xf2>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     d86:	80 91 33 01 	lds	r24, 0x0133
     d8a:	80 7f       	andi	r24, 0xF0	; 240
     d8c:	84 60       	ori	r24, 0x04	; 4
     d8e:	80 93 33 01 	sts	0x0133, r24
     d92:	10 92 3d 01 	sts	0x013D, r1
     d96:	10 92 3e 01 	sts	0x013E, r1
     d9a:	1a c0       	rjmp	.+52     	; 0xdd0 <SCSI_DecodeSCSICommand+0x11c>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic();
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(DATA_WRITE);
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	01 c0       	rjmp	.+2      	; 0xda2 <SCSI_DecodeSCSICommand+0xee>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(DATA_READ);
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	3b df       	rcall	.-394    	; 0xc1a <SCSI_Command_ReadWrite_10>
     da4:	13 c0       	rjmp	.+38     	; 0xdcc <SCSI_DecodeSCSICommand+0x118>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			CommandBlock.DataTransferLength = 0;
     da6:	10 92 4d 01 	sts	0x014D, r1
     daa:	10 92 4e 01 	sts	0x014E, r1
     dae:	10 92 4f 01 	sts	0x014F, r1
     db2:	10 92 50 01 	sts	0x0150, r1
     db6:	0e c0       	rjmp	.+28     	; 0xdd4 <SCSI_DecodeSCSICommand+0x120>
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     db8:	80 91 33 01 	lds	r24, 0x0133
     dbc:	80 7f       	andi	r24, 0xF0	; 240
     dbe:	85 60       	ori	r24, 0x05	; 5
     dc0:	80 93 33 01 	sts	0x0133, r24
     dc4:	80 e2       	ldi	r24, 0x20	; 32
     dc6:	80 93 3d 01 	sts	0x013D, r24
     dca:	e5 cf       	rjmp	.-54     	; 0xd96 <SCSI_DecodeSCSICommand+0xe2>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     dcc:	88 23       	and	r24, r24
     dce:	11 f4       	brne	.+4      	; 0xdd4 <SCSI_DecodeSCSICommand+0x120>
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	08 95       	ret
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     dd4:	80 91 33 01 	lds	r24, 0x0133
     dd8:	80 7f       	andi	r24, 0xF0	; 240
     dda:	80 93 33 01 	sts	0x0133, r24
     dde:	10 92 3d 01 	sts	0x013D, r1
     de2:	10 92 3e 01 	sts	0x013E, r1
     de6:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	}

	return false;
}
     de8:	08 95       	ret

00000dea <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     dea:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     dee:	80 91 eb 00 	lds	r24, 0x00EB
     df2:	81 60       	ori	r24, 0x01	; 1
     df4:	80 93 eb 00 	sts	0x00EB, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     df8:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
     dfc:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
     e00:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     e04:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
     e08:	88 1f       	adc	r24, r24
     e0a:	88 27       	eor	r24, r24
     e0c:	88 1f       	adc	r24, r24
     e0e:	08 95       	ret

00000e10 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     e10:	80 91 69 01 	lds	r24, 0x0169
     e14:	88 23       	and	r24, r24
     e16:	9c f4       	brge	.+38     	; 0xe3e <Endpoint_ClearStatusStage+0x2e>
     e18:	04 c0       	rjmp	.+8      	; 0xe22 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     e1a:	80 91 68 01 	lds	r24, 0x0168
     e1e:	88 23       	and	r24, r24
     e20:	b9 f0       	breq	.+46     	; 0xe50 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e22:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     e26:	82 ff       	sbrs	r24, 2
     e28:	f8 cf       	rjmp	.-16     	; 0xe1a <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e2a:	80 91 e8 00 	lds	r24, 0x00E8
     e2e:	8b 77       	andi	r24, 0x7B	; 123
     e30:	80 93 e8 00 	sts	0x00E8, r24
     e34:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     e36:	80 91 68 01 	lds	r24, 0x0168
     e3a:	88 23       	and	r24, r24
     e3c:	49 f0       	breq	.+18     	; 0xe50 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e3e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     e42:	80 ff       	sbrs	r24, 0
     e44:	f8 cf       	rjmp	.-16     	; 0xe36 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e46:	80 91 e8 00 	lds	r24, 0x00E8
     e4a:	8e 77       	andi	r24, 0x7E	; 126
     e4c:	80 93 e8 00 	sts	0x00E8, r24
     e50:	08 95       	ret

00000e52 <Endpoint_WaitUntilReady>:
			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is active (i.e. enumerated to a host)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     e52:	40 91 e4 00 	lds	r20, 0x00E4
     e56:	50 91 e5 00 	lds	r21, 0x00E5
     e5a:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     e5c:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     e60:	80 ff       	sbrs	r24, 0
     e62:	05 c0       	rjmp	.+10     	; 0xe6e <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e64:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
     e68:	80 ff       	sbrs	r24, 0
     e6a:	05 c0       	rjmp	.+10     	; 0xe76 <Endpoint_WaitUntilReady+0x24>
     e6c:	22 c0       	rjmp	.+68     	; 0xeb2 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e6e:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     e72:	82 fd       	sbrc	r24, 2
     e74:	1e c0       	rjmp	.+60     	; 0xeb2 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     e76:	80 91 68 01 	lds	r24, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e7a:	88 23       	and	r24, r24
     e7c:	11 f4       	brne	.+4      	; 0xe82 <Endpoint_WaitUntilReady+0x30>
     e7e:	82 e0       	ldi	r24, 0x02	; 2
     e80:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e82:	85 30       	cpi	r24, 0x05	; 5
     e84:	11 f4       	brne	.+4      	; 0xe8a <Endpoint_WaitUntilReady+0x38>
     e86:	83 e0       	ldi	r24, 0x03	; 3
     e88:	08 95       	ret
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     e8a:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     e8e:	85 ff       	sbrs	r24, 5
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <Endpoint_WaitUntilReady+0x44>
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	08 95       	ret
     e96:	80 91 e4 00 	lds	r24, 0x00E4
     e9a:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     e9e:	84 17       	cp	r24, r20
     ea0:	95 07       	cpc	r25, r21
     ea2:	e1 f2       	breq	.-72     	; 0xe5c <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     ea4:	22 23       	and	r18, r18
     ea6:	11 f4       	brne	.+4      	; 0xeac <Endpoint_WaitUntilReady+0x5a>
     ea8:	84 e0       	ldi	r24, 0x04	; 4
     eaa:	08 95       	ret
     eac:	21 50       	subi	r18, 0x01	; 1
     eae:	ac 01       	movw	r20, r24
     eb0:	d5 cf       	rjmp	.-86     	; 0xe5c <Endpoint_WaitUntilReady+0xa>
     eb2:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     eb4:	08 95       	ret

00000eb6 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     eb6:	55 d0       	rcall	.+170    	; 0xf62 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     eb8:	5c d0       	rcall	.+184    	; 0xf72 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     eba:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
     ebe:	98 2f       	mov	r25, r24
     ec0:	9f 77       	andi	r25, 0x7F	; 127
     ec2:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
     ec6:	80 68       	ori	r24, 0x80	; 128
     ec8:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     ecc:	8c e0       	ldi	r24, 0x0C	; 12
     ece:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     ed0:	89 b5       	in	r24, 0x29	; 41
     ed2:	82 60       	ori	r24, 0x02	; 2
     ed4:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     ed6:	09 b4       	in	r0, 0x29	; 41
     ed8:	00 fe       	sbrs	r0, 0
     eda:	fd cf       	rjmp	.-6      	; 0xed6 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     edc:	80 91 d8 00 	lds	r24, 0x00D8
     ee0:	8f 7d       	andi	r24, 0xDF	; 223
     ee2:	80 93 d8 00 	sts	0x00D8, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     ee6:	80 91 d7 00 	lds	r24, 0x00D7
     eea:	80 68       	ori	r24, 0x80	; 128
     eec:	80 93 d7 00 	sts	0x00D7, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
     ef0:	10 92 68 01 	sts	0x0168, r1
	USB_ConfigurationNumber  = 0;
     ef4:	10 92 66 01 	sts	0x0166, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
     ef8:	10 92 65 01 	sts	0x0165, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
     efc:	10 92 64 01 	sts	0x0164, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     f00:	80 91 e0 00 	lds	r24, 0x00E0
     f04:	8b 7f       	andi	r24, 0xFB	; 251
     f06:	80 93 e0 00 	sts	0x00E0, r24
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  USB_Device_SetLowSpeed();
	else
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUS);
     f0a:	80 91 d8 00 	lds	r24, 0x00D8
     f0e:	81 60       	ori	r24, 0x01	; 1
     f10:	80 93 d8 00 	sts	0x00D8, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	60 e0       	ldi	r22, 0x00	; 0
     f18:	42 e0       	ldi	r20, 0x02	; 2
     f1a:	67 df       	rcall	.-306    	; 0xdea <Endpoint_ConfigureEndpoint_Prv>

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
							   ENDPOINT_BANK_SINGLE);

	USB_INT_Clear(USB_INT_SUSPI);
     f1c:	80 91 e1 00 	lds	r24, 0x00E1
     f20:	8e 7f       	andi	r24, 0xFE	; 254
     f22:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPI);
     f26:	80 91 e2 00 	lds	r24, 0x00E2
     f2a:	81 60       	ori	r24, 0x01	; 1
     f2c:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Enable(USB_INT_EORSTI);
     f30:	80 91 e2 00 	lds	r24, 0x00E2
     f34:	88 60       	ori	r24, 0x08	; 8
     f36:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     f3a:	80 91 e0 00 	lds	r24, 0x00E0
     f3e:	8e 7f       	andi	r24, 0xFE	; 254
     f40:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     f44:	80 91 d8 00 	lds	r24, 0x00D8
     f48:	80 61       	ori	r24, 0x10	; 16
     f4a:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     f4e:	08 95       	ret

00000f50 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     f50:	e7 ed       	ldi	r30, 0xD7	; 215
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	81 60       	ori	r24, 0x01	; 1
     f58:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	80 93 67 01 	sts	0x0167, r24

	USB_ResetInterface();
}
     f60:	aa cf       	rjmp	.-172    	; 0xeb6 <USB_ResetInterface>

00000f62 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     f62:	e8 ed       	ldi	r30, 0xD8	; 216
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	8c 7f       	andi	r24, 0xFC	; 252
     f6a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     f6c:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     f70:	08 95       	ret

00000f72 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
     f72:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
     f76:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     f7a:	08 95       	ret

00000f7c <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     f7c:	1f 92       	push	r1
     f7e:	0f 92       	push	r0
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	0f 92       	push	r0
     f84:	0b b6       	in	r0, 0x3b	; 59
     f86:	0f 92       	push	r0
     f88:	11 24       	eor	r1, r1
     f8a:	1f 93       	push	r17
     f8c:	2f 93       	push	r18
     f8e:	3f 93       	push	r19
     f90:	4f 93       	push	r20
     f92:	5f 93       	push	r21
     f94:	6f 93       	push	r22
     f96:	7f 93       	push	r23
     f98:	8f 93       	push	r24
     f9a:	9f 93       	push	r25
     f9c:	af 93       	push	r26
     f9e:	bf 93       	push	r27
     fa0:	ef 93       	push	r30
     fa2:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     fa4:	e9 ee       	ldi	r30, 0xE9	; 233
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	10 81       	ld	r17, Z
     faa:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     fac:	10 82       	st	Z, r1
	uint8_t PrevSelectedEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);
     fae:	e0 ef       	ldi	r30, 0xF0	; 240
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	87 7f       	andi	r24, 0xF7	; 247
     fb6:	80 83       	st	Z, r24

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
     fb8:	78 94       	sei

	NONATOMIC_BLOCK(NONATOMIC_FORCEOFF)
	{
		USB_Device_ProcessControlRequest();
     fba:	e9 d0       	rcall	.+466    	; 0x118e <USB_Device_ProcessControlRequest>
    (void)__s;
}

static __inline__ void __iCliParam(const uint8_t *__s)
{
    cli();
     fbc:	f8 94       	cli
     fbe:	a9 ee       	ldi	r26, 0xE9	; 233
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	1c 92       	st	X, r1
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
     fc4:	e0 ef       	ldi	r30, 0xF0	; 240
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	88 60       	ori	r24, 0x08	; 8
     fcc:	80 83       	st	Z, r24
     fce:	1c 93       	st	X, r17
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     fd0:	ff 91       	pop	r31
     fd2:	ef 91       	pop	r30
     fd4:	bf 91       	pop	r27
     fd6:	af 91       	pop	r26
     fd8:	9f 91       	pop	r25
     fda:	8f 91       	pop	r24
     fdc:	7f 91       	pop	r23
     fde:	6f 91       	pop	r22
     fe0:	5f 91       	pop	r21
     fe2:	4f 91       	pop	r20
     fe4:	3f 91       	pop	r19
     fe6:	2f 91       	pop	r18
     fe8:	1f 91       	pop	r17
     fea:	0f 90       	pop	r0
     fec:	0b be       	out	0x3b, r0	; 59
     fee:	0f 90       	pop	r0
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	0f 90       	pop	r0
     ff4:	1f 90       	pop	r1
     ff6:	18 95       	reti

00000ff8 <__vector_10>:
	UDINT   = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     ff8:	1f 92       	push	r1
     ffa:	0f 92       	push	r0
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	0f 92       	push	r0
    1000:	0b b6       	in	r0, 0x3b	; 59
    1002:	0f 92       	push	r0
    1004:	11 24       	eor	r1, r1
    1006:	2f 93       	push	r18
    1008:	3f 93       	push	r19
    100a:	4f 93       	push	r20
    100c:	5f 93       	push	r21
    100e:	6f 93       	push	r22
    1010:	7f 93       	push	r23
    1012:	8f 93       	push	r24
    1014:	9f 93       	push	r25
    1016:	af 93       	push	r26
    1018:	bf 93       	push	r27
    101a:	ef 93       	push	r30
    101c:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
    101e:	80 91 da 00 	lds	r24, 0x00DA
    1022:	80 ff       	sbrs	r24, 0
    1024:	15 c0       	rjmp	.+42     	; 0x1050 <__vector_10+0x58>
    1026:	80 91 d8 00 	lds	r24, 0x00D8
    102a:	80 ff       	sbrs	r24, 0
    102c:	11 c0       	rjmp	.+34     	; 0x1050 <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_VBUS);
    102e:	80 91 da 00 	lds	r24, 0x00DA
    1032:	8e 7f       	andi	r24, 0xFE	; 254
    1034:	80 93 da 00 	sts	0x00DA, r24
				 *  \note This function is not available on some AVR models which do not support hardware VBUS monitoring.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1038:	80 91 d9 00 	lds	r24, 0x00D9

		if (USB_VBUS_GetStatus())
    103c:	80 ff       	sbrs	r24, 0
    103e:	05 c0       	rjmp	.+10     	; 0x104a <__vector_10+0x52>
		{
			USB_DeviceState = DEVICE_STATE_Powered;
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	80 93 68 01 	sts	0x0168, r24
			EVENT_USB_Device_Connect();
    1046:	87 d8       	rcall	.-3826   	; 0x156 <EVENT_USB_Device_Connect>
    1048:	03 c0       	rjmp	.+6      	; 0x1050 <__vector_10+0x58>
		}
		else
		{
			USB_DeviceState = DEVICE_STATE_Unattached;
    104a:	10 92 68 01 	sts	0x0168, r1
			EVENT_USB_Device_Disconnect();
    104e:	8a d8       	rcall	.-3820   	; 0x164 <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1050:	80 91 e1 00 	lds	r24, 0x00E1
    1054:	80 ff       	sbrs	r24, 0
    1056:	1d c0       	rjmp	.+58     	; 0x1092 <__vector_10+0x9a>
    1058:	80 91 e2 00 	lds	r24, 0x00E2
    105c:	80 ff       	sbrs	r24, 0
    105e:	19 c0       	rjmp	.+50     	; 0x1092 <__vector_10+0x9a>
	{
		USB_INT_Clear(USB_INT_SUSPI);
    1060:	80 91 e1 00 	lds	r24, 0x00E1
    1064:	8e 7f       	andi	r24, 0xFE	; 254
    1066:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPI);
    106a:	80 91 e2 00 	lds	r24, 0x00E2
    106e:	8e 7f       	andi	r24, 0xFE	; 254
    1070:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
    1074:	80 91 e2 00 	lds	r24, 0x00E2
    1078:	80 61       	ori	r24, 0x10	; 16
    107a:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    107e:	80 91 d8 00 	lds	r24, 0x00D8
    1082:	80 62       	ori	r24, 0x20	; 32
    1084:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
    1088:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    108a:	85 e0       	ldi	r24, 0x05	; 5
    108c:	80 93 68 01 	sts	0x0168, r24
		EVENT_USB_Device_Suspend();
    1090:	eb d1       	rcall	.+982    	; 0x1468 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1092:	80 91 e1 00 	lds	r24, 0x00E1
    1096:	84 ff       	sbrs	r24, 4
    1098:	2e c0       	rjmp	.+92     	; 0x10f6 <__vector_10+0xfe>
    109a:	80 91 e2 00 	lds	r24, 0x00E2
    109e:	84 ff       	sbrs	r24, 4
    10a0:	2a c0       	rjmp	.+84     	; 0x10f6 <__vector_10+0xfe>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
    10a2:	8c e0       	ldi	r24, 0x0C	; 12
    10a4:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
    10a6:	89 b5       	in	r24, 0x29	; 41
    10a8:	82 60       	ori	r24, 0x02	; 2
    10aa:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    10ac:	09 b4       	in	r0, 0x29	; 41
    10ae:	00 fe       	sbrs	r0, 0
    10b0:	fd cf       	rjmp	.-6      	; 0x10ac <__vector_10+0xb4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    10b2:	80 91 d8 00 	lds	r24, 0x00D8
    10b6:	8f 7d       	andi	r24, 0xDF	; 223
    10b8:	80 93 d8 00 	sts	0x00D8, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUPI);
    10bc:	80 91 e1 00 	lds	r24, 0x00E1
    10c0:	8f 7e       	andi	r24, 0xEF	; 239
    10c2:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUPI);
    10c6:	80 91 e2 00 	lds	r24, 0x00E2
    10ca:	8f 7e       	andi	r24, 0xEF	; 239
    10cc:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPI);
    10d0:	80 91 e2 00 	lds	r24, 0x00E2
    10d4:	81 60       	ori	r24, 0x01	; 1
    10d6:	80 93 e2 00 	sts	0x00E2, r24

		if (USB_ConfigurationNumber)
    10da:	80 91 66 01 	lds	r24, 0x0166
    10de:	88 23       	and	r24, r24
    10e0:	31 f4       	brne	.+12     	; 0x10ee <__vector_10+0xf6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    10e2:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    10e6:	87 fd       	sbrc	r24, 7
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <__vector_10+0xf6>
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	01 c0       	rjmp	.+2      	; 0x10f0 <__vector_10+0xf8>
    10ee:	84 e0       	ldi	r24, 0x04	; 4
    10f0:	80 93 68 01 	sts	0x0168, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    10f4:	b9 d1       	rcall	.+882    	; 0x1468 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    10f6:	80 91 e1 00 	lds	r24, 0x00E1
    10fa:	83 ff       	sbrs	r24, 3
    10fc:	27 c0       	rjmp	.+78     	; 0x114c <__vector_10+0x154>
    10fe:	80 91 e2 00 	lds	r24, 0x00E2
    1102:	83 ff       	sbrs	r24, 3
    1104:	23 c0       	rjmp	.+70     	; 0x114c <__vector_10+0x154>
	{
		USB_INT_Clear(USB_INT_EORSTI);
    1106:	80 91 e1 00 	lds	r24, 0x00E1
    110a:	87 7f       	andi	r24, 0xF7	; 247
    110c:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
    1110:	82 e0       	ldi	r24, 0x02	; 2
    1112:	80 93 68 01 	sts	0x0168, r24
		USB_ConfigurationNumber = 0;
    1116:	10 92 66 01 	sts	0x0166, r1

		USB_INT_Clear(USB_INT_SUSPI);
    111a:	80 91 e1 00 	lds	r24, 0x00E1
    111e:	8e 7f       	andi	r24, 0xFE	; 254
    1120:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPI);
    1124:	80 91 e2 00 	lds	r24, 0x00E2
    1128:	8e 7f       	andi	r24, 0xFE	; 254
    112a:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
    112e:	80 91 e2 00 	lds	r24, 0x00E2
    1132:	80 61       	ori	r24, 0x10	; 16
    1134:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	60 e0       	ldi	r22, 0x00	; 0
    113c:	42 e0       	ldi	r20, 0x02	; 2
    113e:	55 de       	rcall	.-854    	; 0xdea <Endpoint_ConfigureEndpoint_Prv>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
		                           ENDPOINT_BANK_SINGLE);

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
    1140:	80 91 f0 00 	lds	r24, 0x00F0
    1144:	88 60       	ori	r24, 0x08	; 8
    1146:	80 93 f0 00 	sts	0x00F0, r24
		#endif

		EVENT_USB_Device_Reset();
    114a:	8e d1       	rcall	.+796    	; 0x1468 <USB_Event_Stub>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    114c:	80 91 e1 00 	lds	r24, 0x00E1
    1150:	82 ff       	sbrs	r24, 2
    1152:	0a c0       	rjmp	.+20     	; 0x1168 <__vector_10+0x170>
    1154:	80 91 e2 00 	lds	r24, 0x00E2
    1158:	82 ff       	sbrs	r24, 2
    115a:	06 c0       	rjmp	.+12     	; 0x1168 <__vector_10+0x170>
	{
		USB_INT_Clear(USB_INT_SOFI);
    115c:	80 91 e1 00 	lds	r24, 0x00E1
    1160:	8b 7f       	andi	r24, 0xFB	; 251
    1162:	80 93 e1 00 	sts	0x00E1, r24

		EVENT_USB_Device_StartOfFrame();
    1166:	80 d1       	rcall	.+768    	; 0x1468 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1168:	ff 91       	pop	r31
    116a:	ef 91       	pop	r30
    116c:	bf 91       	pop	r27
    116e:	af 91       	pop	r26
    1170:	9f 91       	pop	r25
    1172:	8f 91       	pop	r24
    1174:	7f 91       	pop	r23
    1176:	6f 91       	pop	r22
    1178:	5f 91       	pop	r21
    117a:	4f 91       	pop	r20
    117c:	3f 91       	pop	r19
    117e:	2f 91       	pop	r18
    1180:	0f 90       	pop	r0
    1182:	0b be       	out	0x3b, r0	; 59
    1184:	0f 90       	pop	r0
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	0f 90       	pop	r0
    118a:	1f 90       	pop	r1
    118c:	18 95       	reti

0000118e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    118e:	0f 93       	push	r16
    1190:	1f 93       	push	r17
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	ac 97       	sbiw	r28, 0x2c	; 44
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	e9 e6       	ldi	r30, 0x69	; 105
    11a8:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    11aa:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
    11ae:	81 93       	st	Z+, r24

void USB_Device_ProcessControlRequest(void)
{
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    11b0:	21 e0       	ldi	r18, 0x01	; 1
    11b2:	e1 37       	cpi	r30, 0x71	; 113
    11b4:	f2 07       	cpc	r31, r18
    11b6:	c9 f7       	brne	.-14     	; 0x11aa <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_Byte();

	EVENT_USB_Device_ControlRequest();
    11b8:	c5 d8       	rcall	.-3702   	; 0x344 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    11ba:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    11be:	83 ff       	sbrs	r24, 3
    11c0:	3a c1       	rjmp	.+628    	; 0x1436 <USB_Device_ProcessControlRequest+0x2a8>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    11c2:	80 91 69 01 	lds	r24, 0x0169

		switch (USB_ControlRequest.bRequest)
    11c6:	30 91 6a 01 	lds	r19, 0x016A
    11ca:	35 30       	cpi	r19, 0x05	; 5
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <USB_Device_ProcessControlRequest+0x42>
    11ce:	87 c0       	rjmp	.+270    	; 0x12de <USB_Device_ProcessControlRequest+0x150>
    11d0:	36 30       	cpi	r19, 0x06	; 6
    11d2:	40 f4       	brcc	.+16     	; 0x11e4 <USB_Device_ProcessControlRequest+0x56>
    11d4:	31 30       	cpi	r19, 0x01	; 1
    11d6:	c9 f1       	breq	.+114    	; 0x124a <USB_Device_ProcessControlRequest+0xbc>
    11d8:	31 30       	cpi	r19, 0x01	; 1
    11da:	70 f0       	brcs	.+28     	; 0x11f8 <USB_Device_ProcessControlRequest+0x6a>
    11dc:	33 30       	cpi	r19, 0x03	; 3
    11de:	09 f0       	breq	.+2      	; 0x11e2 <USB_Device_ProcessControlRequest+0x54>
    11e0:	2a c1       	rjmp	.+596    	; 0x1436 <USB_Device_ProcessControlRequest+0x2a8>
    11e2:	33 c0       	rjmp	.+102    	; 0x124a <USB_Device_ProcessControlRequest+0xbc>
    11e4:	38 30       	cpi	r19, 0x08	; 8
    11e6:	09 f4       	brne	.+2      	; 0x11ea <USB_Device_ProcessControlRequest+0x5c>
    11e8:	f7 c0       	rjmp	.+494    	; 0x13d8 <USB_Device_ProcessControlRequest+0x24a>
    11ea:	39 30       	cpi	r19, 0x09	; 9
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <USB_Device_ProcessControlRequest+0x62>
    11ee:	06 c1       	rjmp	.+524    	; 0x13fc <USB_Device_ProcessControlRequest+0x26e>
    11f0:	36 30       	cpi	r19, 0x06	; 6
    11f2:	09 f0       	breq	.+2      	; 0x11f6 <USB_Device_ProcessControlRequest+0x68>
    11f4:	20 c1       	rjmp	.+576    	; 0x1436 <USB_Device_ProcessControlRequest+0x2a8>
    11f6:	99 c0       	rjmp	.+306    	; 0x132a <USB_Device_ProcessControlRequest+0x19c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    11f8:	80 38       	cpi	r24, 0x80	; 128
    11fa:	21 f0       	breq	.+8      	; 0x1204 <USB_Device_ProcessControlRequest+0x76>
    11fc:	82 38       	cpi	r24, 0x82	; 130
    11fe:	09 f0       	breq	.+2      	; 0x1202 <USB_Device_ProcessControlRequest+0x74>
    1200:	1a c1       	rjmp	.+564    	; 0x1436 <USB_Device_ProcessControlRequest+0x2a8>
    1202:	08 c0       	rjmp	.+16     	; 0x1214 <USB_Device_ProcessControlRequest+0x86>
    1204:	90 91 64 01 	lds	r25, 0x0164
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
    1208:	80 91 65 01 	lds	r24, 0x0165
    120c:	88 23       	and	r24, r24
    120e:	99 f0       	breq	.+38     	; 0x1236 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1210:	92 60       	ori	r25, 0x02	; 2
    1212:	11 c0       	rjmp	.+34     	; 0x1236 <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1214:	80 91 6d 01 	lds	r24, 0x016D
    1218:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    121a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    121e:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	25 e0       	ldi	r18, 0x05	; 5
    1226:	96 95       	lsr	r25
    1228:	87 95       	ror	r24
    122a:	2a 95       	dec	r18
    122c:	e1 f7       	brne	.-8      	; 0x1226 <USB_Device_ProcessControlRequest+0x98>
    122e:	98 2f       	mov	r25, r24
    1230:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1232:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1236:	80 91 e8 00 	lds	r24, 0x00E8
    123a:	87 7f       	andi	r24, 0xF7	; 247
    123c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
    1240:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Word >> 8);
    1244:	10 92 f1 00 	sts	0x00F1, r1
    1248:	d2 c0       	rjmp	.+420    	; 0x13ee <USB_Device_ProcessControlRequest+0x260>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    124a:	88 23       	and	r24, r24
    124c:	19 f0       	breq	.+6      	; 0x1254 <USB_Device_ProcessControlRequest+0xc6>
    124e:	82 30       	cpi	r24, 0x02	; 2
    1250:	09 f0       	breq	.+2      	; 0x1254 <USB_Device_ProcessControlRequest+0xc6>
    1252:	f1 c0       	rjmp	.+482    	; 0x1436 <USB_Device_ProcessControlRequest+0x2a8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	8f 71       	andi	r24, 0x1F	; 31
    1258:	90 70       	andi	r25, 0x00	; 0
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	21 f0       	breq	.+8      	; 0x1266 <USB_Device_ProcessControlRequest+0xd8>
    125e:	02 97       	sbiw	r24, 0x02	; 2
    1260:	09 f0       	breq	.+2      	; 0x1264 <USB_Device_ProcessControlRequest+0xd6>
    1262:	e9 c0       	rjmp	.+466    	; 0x1436 <USB_Device_ProcessControlRequest+0x2a8>
    1264:	0c c0       	rjmp	.+24     	; 0x127e <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1266:	80 91 6b 01 	lds	r24, 0x016B
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	09 f0       	breq	.+2      	; 0x1270 <USB_Device_ProcessControlRequest+0xe2>
    126e:	e3 c0       	rjmp	.+454    	; 0x1436 <USB_Device_ProcessControlRequest+0x2a8>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1270:	10 92 65 01 	sts	0x0165, r1
    1274:	33 30       	cpi	r19, 0x03	; 3
    1276:	69 f5       	brne	.+90     	; 0x12d2 <USB_Device_ProcessControlRequest+0x144>
    1278:	80 93 65 01 	sts	0x0165, r24
    127c:	2a c0       	rjmp	.+84     	; 0x12d2 <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    127e:	80 91 6b 01 	lds	r24, 0x016B
    1282:	88 23       	and	r24, r24
    1284:	31 f5       	brne	.+76     	; 0x12d2 <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1286:	20 91 6d 01 	lds	r18, 0x016D
    128a:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    128c:	09 f4       	brne	.+2      	; 0x1290 <USB_Device_ProcessControlRequest+0x102>
    128e:	d3 c0       	rjmp	.+422    	; 0x1436 <USB_Device_ProcessControlRequest+0x2a8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1290:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1294:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1298:	80 ff       	sbrs	r24, 0
    129a:	1b c0       	rjmp	.+54     	; 0x12d2 <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    129c:	33 30       	cpi	r19, 0x03	; 3
    129e:	21 f4       	brne	.+8      	; 0x12a8 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    12a0:	80 91 eb 00 	lds	r24, 0x00EB
    12a4:	80 62       	ori	r24, 0x20	; 32
    12a6:	13 c0       	rjmp	.+38     	; 0x12ce <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    12a8:	80 91 eb 00 	lds	r24, 0x00EB
    12ac:	80 61       	ori	r24, 0x10	; 16
    12ae:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <USB_Device_ProcessControlRequest+0x12e>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	2a 95       	dec	r18
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <USB_Device_ProcessControlRequest+0x12a>
    12c0:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    12c4:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    12c8:	80 91 eb 00 	lds	r24, 0x00EB
    12cc:	88 60       	ori	r24, 0x08	; 8
    12ce:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    12d2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12d6:	80 91 e8 00 	lds	r24, 0x00E8
    12da:	87 7f       	andi	r24, 0xF7	; 247
    12dc:	8b c0       	rjmp	.+278    	; 0x13f4 <USB_Device_ProcessControlRequest+0x266>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    12de:	88 23       	and	r24, r24
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <USB_Device_ProcessControlRequest+0x156>
    12e2:	a9 c0       	rjmp	.+338    	; 0x1436 <USB_Device_ProcessControlRequest+0x2a8>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    12e4:	10 91 6b 01 	lds	r17, 0x016B
    12e8:	1f 77       	andi	r17, 0x7F	; 127

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    12ea:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12ec:	f8 94       	cli
    12ee:	80 91 e8 00 	lds	r24, 0x00E8
    12f2:	87 7f       	andi	r24, 0xF7	; 247
    12f4:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearSETUP();

		Endpoint_ClearStatusStage();
    12f8:	8b dd       	rcall	.-1258   	; 0xe10 <Endpoint_ClearStatusStage>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12fa:	80 91 e8 00 	lds	r24, 0x00E8

		while (!(Endpoint_IsINReady()));
    12fe:	80 ff       	sbrs	r24, 0
    1300:	fc cf       	rjmp	.-8      	; 0x12fa <USB_Device_ProcessControlRequest+0x16c>

		USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1302:	11 23       	and	r17, r17
    1304:	11 f4       	brne	.+4      	; 0x130a <USB_Device_ProcessControlRequest+0x17c>
    1306:	82 e0       	ldi	r24, 0x02	; 2
    1308:	01 c0       	rjmp	.+2      	; 0x130c <USB_Device_ProcessControlRequest+0x17e>
    130a:	83 e0       	ldi	r24, 0x03	; 3
    130c:	80 93 68 01 	sts	0x0168, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
    1310:	80 91 e3 00 	lds	r24, 0x00E3
    1314:	80 78       	andi	r24, 0x80	; 128
    1316:	18 2b       	or	r17, r24
    1318:	10 93 e3 00 	sts	0x00E3, r17
				UDADDR |= (1 << ADDEN);
    131c:	80 91 e3 00 	lds	r24, 0x00E3
    1320:	80 68       	ori	r24, 0x80	; 128
    1322:	80 93 e3 00 	sts	0x00E3, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1326:	0f bf       	out	0x3f, r16	; 63
    __asm__ volatile ("" ::: "memory");
    1328:	86 c0       	rjmp	.+268    	; 0x1436 <USB_Device_ProcessControlRequest+0x2a8>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    132a:	80 58       	subi	r24, 0x80	; 128
    132c:	82 30       	cpi	r24, 0x02	; 2
    132e:	08 f0       	brcs	.+2      	; 0x1332 <USB_Device_ProcessControlRequest+0x1a4>
    1330:	82 c0       	rjmp	.+260    	; 0x1436 <USB_Device_ProcessControlRequest+0x2a8>
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1332:	80 91 6b 01 	lds	r24, 0x016B
    1336:	90 91 6c 01 	lds	r25, 0x016C
    133a:	23 e0       	ldi	r18, 0x03	; 3
    133c:	8c 3d       	cpi	r24, 0xDC	; 220
    133e:	92 07       	cpc	r25, r18
    1340:	99 f5       	brne	.+102    	; 0x13a8 <USB_Device_ProcessControlRequest+0x21a>
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1342:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1344:	f8 94       	cli
    1346:	de 01       	movw	r26, r28
    1348:	15 96       	adiw	r26, 0x05	; 5
    134a:	6e e0       	ldi	r22, 0x0E	; 14
    134c:	40 e0       	ldi	r20, 0x00	; 0
    134e:	50 e0       	ldi	r21, 0x00	; 0
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1350:	11 e2       	ldi	r17, 0x21	; 33
    1352:	e6 2f       	mov	r30, r22
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	10 93 57 00 	sts	0x0057, r17
    135a:	84 91       	lpm	r24, Z+

			if (SerialCharNum & 0x01)
    135c:	40 ff       	sbrs	r20, 0
    135e:	03 c0       	rjmp	.+6      	; 0x1366 <USB_Device_ProcessControlRequest+0x1d8>
			{
				SerialByte >>= 4;
    1360:	82 95       	swap	r24
    1362:	8f 70       	andi	r24, 0x0F	; 15
				SigReadAddress++;
    1364:	6f 5f       	subi	r22, 0xFF	; 255
			}

			SerialByte &= 0x0F;
    1366:	8f 70       	andi	r24, 0x0F	; 15
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0

			SignatureDescriptor.UnicodeString[SerialCharNum] = (SerialByte >= 10) ?
    136c:	8a 30       	cpi	r24, 0x0A	; 10
    136e:	18 f0       	brcs	.+6      	; 0x1376 <USB_Device_ProcessControlRequest+0x1e8>
    1370:	c9 01       	movw	r24, r18
    1372:	c7 96       	adiw	r24, 0x37	; 55
    1374:	02 c0       	rjmp	.+4      	; 0x137a <USB_Device_ProcessControlRequest+0x1ec>
    1376:	c9 01       	movw	r24, r18
    1378:	c0 96       	adiw	r24, 0x30	; 48
    137a:	8d 93       	st	X+, r24
    137c:	9d 93       	st	X+, r25
    137e:	4f 5f       	subi	r20, 0xFF	; 255
    1380:	5f 4f       	sbci	r21, 0xFF	; 255

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
    1382:	44 31       	cpi	r20, 0x14	; 20
    1384:	51 05       	cpc	r21, r1
    1386:	29 f7       	brne	.-54     	; 0x1352 <USB_Device_ProcessControlRequest+0x1c4>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1388:	7f bf       	out	0x3f, r23	; 63
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
    138a:	8a e2       	ldi	r24, 0x2A	; 42
    138c:	8b 83       	std	Y+3, r24	; 0x03
	{
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    138e:	83 e0       	ldi	r24, 0x03	; 3
    1390:	8c 83       	std	Y+4, r24	; 0x04
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1392:	80 91 e8 00 	lds	r24, 0x00E8
    1396:	87 7f       	andi	r24, 0xF7	; 247
    1398:	80 93 e8 00 	sts	0x00E8, r24
		}
	}

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    139c:	ce 01       	movw	r24, r28
    139e:	03 96       	adiw	r24, 0x03	; 3
    13a0:	6a e2       	ldi	r22, 0x2A	; 42
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	62 d0       	rcall	.+196    	; 0x146a <Endpoint_Write_Control_Stream_LE>
    13a6:	12 c0       	rjmp	.+36     	; 0x13cc <USB_Device_ProcessControlRequest+0x23e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    13a8:	60 91 6d 01 	lds	r22, 0x016D
    13ac:	ae 01       	movw	r20, r28
    13ae:	4f 5f       	subi	r20, 0xFF	; 255
    13b0:	5f 4f       	sbci	r21, 0xFF	; 255
    13b2:	44 d8       	rcall	.-3960   	; 0x43c <CALLBACK_USB_GetDescriptor>
    13b4:	bc 01       	movw	r22, r24
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	09 f4       	brne	.+2      	; 0x13bc <USB_Device_ProcessControlRequest+0x22e>
    13ba:	3d c0       	rjmp	.+122    	; 0x1436 <USB_Device_ProcessControlRequest+0x2a8>
    13bc:	80 91 e8 00 	lds	r24, 0x00E8
    13c0:	87 7f       	andi	r24, 0xF7	; 247
    13c2:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ca:	ad d0       	rcall	.+346    	; 0x1526 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    13cc:	80 91 e8 00 	lds	r24, 0x00E8
    13d0:	8b 77       	andi	r24, 0x7B	; 123
    13d2:	80 93 e8 00 	sts	0x00E8, r24
    13d6:	2f c0       	rjmp	.+94     	; 0x1436 <USB_Device_ProcessControlRequest+0x2a8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    13d8:	80 38       	cpi	r24, 0x80	; 128
    13da:	69 f5       	brne	.+90     	; 0x1436 <USB_Device_ProcessControlRequest+0x2a8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    13dc:	80 91 e8 00 	lds	r24, 0x00E8
    13e0:	87 7f       	andi	r24, 0xF7	; 247
    13e2:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
    13e6:	80 91 66 01 	lds	r24, 0x0166
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    13ea:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13ee:	80 91 e8 00 	lds	r24, 0x00E8
    13f2:	8e 77       	andi	r24, 0x7E	; 126
    13f4:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    13f8:	0b dd       	rcall	.-1514   	; 0xe10 <Endpoint_ClearStatusStage>
    13fa:	1d c0       	rjmp	.+58     	; 0x1436 <USB_Device_ProcessControlRequest+0x2a8>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    13fc:	88 23       	and	r24, r24
    13fe:	d9 f4       	brne	.+54     	; 0x1436 <USB_Device_ProcessControlRequest+0x2a8>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1400:	90 91 6b 01 	lds	r25, 0x016B
    1404:	92 30       	cpi	r25, 0x02	; 2
    1406:	b8 f4       	brcc	.+46     	; 0x1436 <USB_Device_ProcessControlRequest+0x2a8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1408:	80 91 e8 00 	lds	r24, 0x00E8
    140c:	87 7f       	andi	r24, 0xF7	; 247
    140e:	80 93 e8 00 	sts	0x00E8, r24
	}
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1412:	90 93 66 01 	sts	0x0166, r25

	Endpoint_ClearStatusStage();
    1416:	fc dc       	rcall	.-1544   	; 0xe10 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
    1418:	80 91 66 01 	lds	r24, 0x0166
    141c:	88 23       	and	r24, r24
    141e:	31 f4       	brne	.+12     	; 0x142c <USB_Device_ProcessControlRequest+0x29e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1420:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1424:	87 fd       	sbrc	r24, 7
    1426:	02 c0       	rjmp	.+4      	; 0x142c <USB_Device_ProcessControlRequest+0x29e>
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	01 c0       	rjmp	.+2      	; 0x142e <USB_Device_ProcessControlRequest+0x2a0>
    142c:	84 e0       	ldi	r24, 0x04	; 4
    142e:	80 93 68 01 	sts	0x0168, r24

	EVENT_USB_Device_ConfigurationChanged();
    1432:	0e 94 c8 01 	call	0x390	; 0x390 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1436:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    143a:	83 ff       	sbrs	r24, 3
    143c:	0a c0       	rjmp	.+20     	; 0x1452 <USB_Device_ProcessControlRequest+0x2c4>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    143e:	80 91 eb 00 	lds	r24, 0x00EB
    1442:	80 62       	ori	r24, 0x20	; 32
    1444:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1448:	80 91 e8 00 	lds	r24, 0x00E8
    144c:	87 7f       	andi	r24, 0xF7	; 247
    144e:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    1452:	ac 96       	adiw	r28, 0x2c	; 44
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	1f 91       	pop	r17
    1464:	0f 91       	pop	r16
    1466:	08 95       	ret

00001468 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1468:	08 95       	ret

0000146a <Endpoint_Write_Control_Stream_LE>:
    146a:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    146c:	40 91 6f 01 	lds	r20, 0x016F
    1470:	50 91 70 01 	lds	r21, 0x0170
    1474:	46 17       	cp	r20, r22
    1476:	57 07       	cpc	r21, r23
    1478:	18 f4       	brcc	.+6      	; 0x1480 <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    147a:	f9 01       	movw	r30, r18
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	3d c0       	rjmp	.+122    	; 0x14fa <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1480:	61 15       	cp	r22, r1
    1482:	71 05       	cpc	r23, r1
    1484:	11 f0       	breq	.+4      	; 0x148a <Endpoint_Write_Control_Stream_LE+0x20>
    1486:	ab 01       	movw	r20, r22
    1488:	f8 cf       	rjmp	.-16     	; 0x147a <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    148a:	80 91 e8 00 	lds	r24, 0x00E8
    148e:	8e 77       	andi	r24, 0x7E	; 126
    1490:	80 93 e8 00 	sts	0x00E8, r24
    1494:	40 e0       	ldi	r20, 0x00	; 0
    1496:	50 e0       	ldi	r21, 0x00	; 0
    1498:	f0 cf       	rjmp	.-32     	; 0x147a <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    149a:	80 91 68 01 	lds	r24, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    149e:	88 23       	and	r24, r24
    14a0:	f1 f1       	breq	.+124    	; 0x151e <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    14a2:	85 30       	cpi	r24, 0x05	; 5
    14a4:	f1 f1       	breq	.+124    	; 0x1522 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    14a6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    14aa:	83 ff       	sbrs	r24, 3
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <Endpoint_Write_Control_Stream_LE+0x48>
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    14b2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    14b6:	82 fd       	sbrc	r24, 2
    14b8:	2c c0       	rjmp	.+88     	; 0x1512 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    14ba:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    14be:	80 ff       	sbrs	r24, 0
    14c0:	1c c0       	rjmp	.+56     	; 0x14fa <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    14c2:	20 91 f2 00 	lds	r18, 0x00F2
    14c6:	30 91 f3 00 	lds	r19, 0x00F3
    14ca:	07 c0       	rjmp	.+14     	; 0x14da <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    14cc:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    14ce:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
    14d2:	41 50       	subi	r20, 0x01	; 1
    14d4:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    14d6:	2f 5f       	subi	r18, 0xFF	; 255
    14d8:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    14da:	41 15       	cp	r20, r1
    14dc:	51 05       	cpc	r21, r1
    14de:	19 f0       	breq	.+6      	; 0x14e6 <Endpoint_Write_Control_Stream_LE+0x7c>
    14e0:	28 30       	cpi	r18, 0x08	; 8
    14e2:	31 05       	cpc	r19, r1
    14e4:	98 f3       	brcs	.-26     	; 0x14cc <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	28 30       	cpi	r18, 0x08	; 8
    14ea:	31 05       	cpc	r19, r1
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <Endpoint_Write_Control_Stream_LE+0x86>
    14ee:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14f0:	80 91 e8 00 	lds	r24, 0x00E8
    14f4:	8e 77       	andi	r24, 0x7E	; 126
    14f6:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    14fa:	41 15       	cp	r20, r1
    14fc:	51 05       	cpc	r21, r1
    14fe:	69 f6       	brne	.-102    	; 0x149a <Endpoint_Write_Control_Stream_LE+0x30>
    1500:	99 23       	and	r25, r25
    1502:	59 f6       	brne	.-106    	; 0x149a <Endpoint_Write_Control_Stream_LE+0x30>
    1504:	06 c0       	rjmp	.+12     	; 0x1512 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1506:	80 91 68 01 	lds	r24, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    150a:	88 23       	and	r24, r24
    150c:	41 f0       	breq	.+16     	; 0x151e <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    150e:	85 30       	cpi	r24, 0x05	; 5
    1510:	41 f0       	breq	.+16     	; 0x1522 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1512:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1516:	82 ff       	sbrs	r24, 2
    1518:	f6 cf       	rjmp	.-20     	; 0x1506 <Endpoint_Write_Control_Stream_LE+0x9c>
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	08 95       	ret
    151e:	82 e0       	ldi	r24, 0x02	; 2
    1520:	08 95       	ret
    1522:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1524:	08 95       	ret

00001526 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
    1526:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1528:	40 91 6f 01 	lds	r20, 0x016F
    152c:	50 91 70 01 	lds	r21, 0x0170
    1530:	46 17       	cp	r20, r22
    1532:	57 07       	cpc	r21, r23
    1534:	10 f4       	brcc	.+4      	; 0x153a <Endpoint_Write_Control_PStream_LE+0x14>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	40 c0       	rjmp	.+128    	; 0x15ba <Endpoint_Write_Control_PStream_LE+0x94>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    153a:	61 15       	cp	r22, r1
    153c:	71 05       	cpc	r23, r1
    153e:	11 f0       	breq	.+4      	; 0x1544 <Endpoint_Write_Control_PStream_LE+0x1e>
    1540:	ab 01       	movw	r20, r22
    1542:	f9 cf       	rjmp	.-14     	; 0x1536 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1544:	80 91 e8 00 	lds	r24, 0x00E8
    1548:	8e 77       	andi	r24, 0x7E	; 126
    154a:	80 93 e8 00 	sts	0x00E8, r24
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	f1 cf       	rjmp	.-30     	; 0x1536 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1554:	80 91 68 01 	lds	r24, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1558:	88 23       	and	r24, r24
    155a:	09 f4       	brne	.+2      	; 0x155e <Endpoint_Write_Control_PStream_LE+0x38>
    155c:	40 c0       	rjmp	.+128    	; 0x15de <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    155e:	85 30       	cpi	r24, 0x05	; 5
    1560:	09 f4       	brne	.+2      	; 0x1564 <Endpoint_Write_Control_PStream_LE+0x3e>
    1562:	3f c0       	rjmp	.+126    	; 0x15e2 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1564:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1568:	83 ff       	sbrs	r24, 3
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <Endpoint_Write_Control_PStream_LE+0x4a>
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1570:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1574:	82 fd       	sbrc	r24, 2
    1576:	2d c0       	rjmp	.+90     	; 0x15d2 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1578:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    157c:	80 ff       	sbrs	r24, 0
    157e:	1d c0       	rjmp	.+58     	; 0x15ba <Endpoint_Write_Control_PStream_LE+0x94>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1580:	80 91 f2 00 	lds	r24, 0x00F2
    1584:	90 91 f3 00 	lds	r25, 0x00F3
    1588:	09 c0       	rjmp	.+18     	; 0x159c <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    158a:	f9 01       	movw	r30, r18
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    158c:	2f 5f       	subi	r18, 0xFF	; 255
    158e:	3f 4f       	sbci	r19, 0xFF	; 255
    1590:	e4 91       	lpm	r30, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    1592:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
    1596:	41 50       	subi	r20, 0x01	; 1
    1598:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    159a:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    159c:	41 15       	cp	r20, r1
    159e:	51 05       	cpc	r21, r1
    15a0:	19 f0       	breq	.+6      	; 0x15a8 <Endpoint_Write_Control_PStream_LE+0x82>
    15a2:	88 30       	cpi	r24, 0x08	; 8
    15a4:	91 05       	cpc	r25, r1
    15a6:	88 f3       	brcs	.-30     	; 0x158a <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	08 97       	sbiw	r24, 0x08	; 8
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <Endpoint_Write_Control_PStream_LE+0x8a>
    15ae:	61 e0       	ldi	r22, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15b0:	80 91 e8 00 	lds	r24, 0x00E8
    15b4:	8e 77       	andi	r24, 0x7E	; 126
    15b6:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    15ba:	41 15       	cp	r20, r1
    15bc:	51 05       	cpc	r21, r1
    15be:	51 f6       	brne	.-108    	; 0x1554 <Endpoint_Write_Control_PStream_LE+0x2e>
    15c0:	66 23       	and	r22, r22
    15c2:	41 f6       	brne	.-112    	; 0x1554 <Endpoint_Write_Control_PStream_LE+0x2e>
    15c4:	06 c0       	rjmp	.+12     	; 0x15d2 <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    15c6:	80 91 68 01 	lds	r24, 0x0168

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    15ca:	88 23       	and	r24, r24
    15cc:	41 f0       	breq	.+16     	; 0x15de <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    15ce:	85 30       	cpi	r24, 0x05	; 5
    15d0:	41 f0       	breq	.+16     	; 0x15e2 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    15d2:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    15d6:	82 ff       	sbrs	r24, 2
    15d8:	f6 cf       	rjmp	.-20     	; 0x15c6 <Endpoint_Write_Control_PStream_LE+0xa0>
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	08 95       	ret
    15de:	82 e0       	ldi	r24, 0x02	; 2
    15e0:	08 95       	ret
    15e2:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    15e4:	08 95       	ret

000015e6 <Endpoint_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    15e6:	df 92       	push	r13
    15e8:	ef 92       	push	r14
    15ea:	ff 92       	push	r15
    15ec:	0f 93       	push	r16
    15ee:	1f 93       	push	r17
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	18 2f       	mov	r17, r24
    15f6:	09 2f       	mov	r16, r25
    15f8:	eb 01       	movw	r28, r22
    15fa:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    15fc:	2a dc       	rcall	.-1964   	; 0xe52 <Endpoint_WaitUntilReady>
    15fe:	d8 2e       	mov	r13, r24
    1600:	88 23       	and	r24, r24
    1602:	19 f5       	brne	.+70     	; 0x164a <Endpoint_Read_Stream_LE+0x64>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1604:	81 2f       	mov	r24, r17
    1606:	90 2f       	mov	r25, r16
    1608:	9c 01       	movw	r18, r24
    160a:	89 01       	movw	r16, r18
    160c:	1c c0       	rjmp	.+56     	; 0x1646 <Endpoint_Read_Stream_LE+0x60>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    160e:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1612:	85 fd       	sbrc	r24, 5
    1614:	12 c0       	rjmp	.+36     	; 0x163a <Endpoint_Read_Stream_LE+0x54>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1616:	80 91 e8 00 	lds	r24, 0x00E8
    161a:	8b 77       	andi	r24, 0x7B	; 123
    161c:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    1620:	e1 14       	cp	r14, r1
    1622:	f1 04       	cpc	r15, r1
    1624:	31 f0       	breq	.+12     	; 0x1632 <Endpoint_Read_Stream_LE+0x4c>
    1626:	f7 01       	movw	r30, r14
    1628:	09 95       	icall
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	11 f4       	brne	.+4      	; 0x1632 <Endpoint_Read_Stream_LE+0x4c>
    162e:	85 e0       	ldi	r24, 0x05	; 5
    1630:	0d c0       	rjmp	.+26     	; 0x164c <Endpoint_Read_Stream_LE+0x66>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1632:	0f dc       	rcall	.-2018   	; 0xe52 <Endpoint_WaitUntilReady>
    1634:	88 23       	and	r24, r24
    1636:	39 f0       	breq	.+14     	; 0x1646 <Endpoint_Read_Stream_LE+0x60>
    1638:	09 c0       	rjmp	.+18     	; 0x164c <Endpoint_Read_Stream_LE+0x66>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    163a:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    163e:	f8 01       	movw	r30, r16
    1640:	81 93       	st	Z+, r24
    1642:	8f 01       	movw	r16, r30
			Length--;
    1644:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    1646:	20 97       	sbiw	r28, 0x00	; 0
    1648:	11 f7       	brne	.-60     	; 0x160e <Endpoint_Read_Stream_LE+0x28>
    164a:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    164c:	df 91       	pop	r29
    164e:	cf 91       	pop	r28
    1650:	1f 91       	pop	r17
    1652:	0f 91       	pop	r16
    1654:	ff 90       	pop	r15
    1656:	ef 90       	pop	r14
    1658:	df 90       	pop	r13
    165a:	08 95       	ret

0000165c <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    165c:	df 92       	push	r13
    165e:	ef 92       	push	r14
    1660:	ff 92       	push	r15
    1662:	0f 93       	push	r16
    1664:	1f 93       	push	r17
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
    166a:	18 2f       	mov	r17, r24
    166c:	09 2f       	mov	r16, r25
    166e:	eb 01       	movw	r28, r22
    1670:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1672:	ef db       	rcall	.-2082   	; 0xe52 <Endpoint_WaitUntilReady>
    1674:	d8 2e       	mov	r13, r24
    1676:	88 23       	and	r24, r24
    1678:	19 f5       	brne	.+70     	; 0x16c0 <Endpoint_Write_Stream_LE+0x64>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    167a:	81 2f       	mov	r24, r17
    167c:	90 2f       	mov	r25, r16
    167e:	9c 01       	movw	r18, r24
    1680:	89 01       	movw	r16, r18
    1682:	1c c0       	rjmp	.+56     	; 0x16bc <Endpoint_Write_Stream_LE+0x60>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1684:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1688:	85 fd       	sbrc	r24, 5
    168a:	12 c0       	rjmp	.+36     	; 0x16b0 <Endpoint_Write_Stream_LE+0x54>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    168c:	80 91 e8 00 	lds	r24, 0x00E8
    1690:	8e 77       	andi	r24, 0x7E	; 126
    1692:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    1696:	e1 14       	cp	r14, r1
    1698:	f1 04       	cpc	r15, r1
    169a:	31 f0       	breq	.+12     	; 0x16a8 <Endpoint_Write_Stream_LE+0x4c>
    169c:	f7 01       	movw	r30, r14
    169e:	09 95       	icall
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	11 f4       	brne	.+4      	; 0x16a8 <Endpoint_Write_Stream_LE+0x4c>
    16a4:	85 e0       	ldi	r24, 0x05	; 5
    16a6:	0d c0       	rjmp	.+26     	; 0x16c2 <Endpoint_Write_Stream_LE+0x66>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    16a8:	d4 db       	rcall	.-2136   	; 0xe52 <Endpoint_WaitUntilReady>
    16aa:	88 23       	and	r24, r24
    16ac:	39 f0       	breq	.+14     	; 0x16bc <Endpoint_Write_Stream_LE+0x60>
    16ae:	09 c0       	rjmp	.+18     	; 0x16c2 <Endpoint_Write_Stream_LE+0x66>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    16b0:	f8 01       	movw	r30, r16
    16b2:	81 91       	ld	r24, Z+
    16b4:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    16b6:	80 93 f1 00 	sts	0x00F1, r24
			Length--;
    16ba:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    16bc:	20 97       	sbiw	r28, 0x00	; 0
    16be:	11 f7       	brne	.-60     	; 0x1684 <Endpoint_Write_Stream_LE+0x28>
    16c0:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	1f 91       	pop	r17
    16c8:	0f 91       	pop	r16
    16ca:	ff 90       	pop	r15
    16cc:	ef 90       	pop	r14
    16ce:	df 90       	pop	r13
    16d0:	08 95       	ret

000016d2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    16d2:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    16d4:	80 91 68 01 	lds	r24, 0x0168
    16d8:	88 23       	and	r24, r24
    16da:	61 f0       	breq	.+24     	; 0x16f4 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    16dc:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    16e0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    16e4:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    16e8:	83 ff       	sbrs	r24, 3
    16ea:	01 c0       	rjmp	.+2      	; 0x16ee <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    16ec:	50 dd       	rcall	.-1376   	; 0x118e <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    16ee:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    16f0:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    16f4:	1f 91       	pop	r17
    16f6:	08 95       	ret

000016f8 <_exit>:
    16f8:	f8 94       	cli

000016fa <__stop_program>:
    16fa:	ff cf       	rjmp	.-2      	; 0x16fa <__stop_program>
