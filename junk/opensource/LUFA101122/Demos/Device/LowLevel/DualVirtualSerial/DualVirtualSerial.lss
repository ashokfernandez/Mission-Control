
DualVirtualSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00000e3e  00000ed2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800160  00800160  00000f32  2**0
                  ALLOC
  3 .stab         000008f4  00000000  00000000  00000f34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000013d  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000288  00000000  00000000  00001965  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000771  00000000  00000000  00001bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003d56  00000000  00000000  0000235e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001000  00000000  00000000  000060b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000355e  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003b0  00000000  00000000  0000a614  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001c3a  00000000  00000000  0000a9c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001c38  00000000  00000000  0000c5fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000310  00000000  00000000  0000e236  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return Endpoint_IsConfigured();
}

void Endpoint_ClearEndpoints(void)
{
   0:	b9 c0       	rjmp	.+370    	; 0x174 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
   4:	d4 c0       	rjmp	.+424    	; 0x1ae <__bad_interrupt>
   6:	00 00       	nop
   8:	d2 c0       	rjmp	.+420    	; 0x1ae <__bad_interrupt>
   a:	00 00       	nop
   c:	d0 c0       	rjmp	.+416    	; 0x1ae <__bad_interrupt>
   e:	00 00       	nop
  10:	ce c0       	rjmp	.+412    	; 0x1ae <__bad_interrupt>
  12:	00 00       	nop
  14:	cc c0       	rjmp	.+408    	; 0x1ae <__bad_interrupt>
  16:	00 00       	nop
  18:	ca c0       	rjmp	.+404    	; 0x1ae <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c8 c0       	rjmp	.+400    	; 0x1ae <__bad_interrupt>
  1e:	00 00       	nop
  20:	c6 c0       	rjmp	.+396    	; 0x1ae <__bad_interrupt>
  22:	00 00       	nop
  24:	c4 c0       	rjmp	.+392    	; 0x1ae <__bad_interrupt>
  26:	00 00       	nop
  28:	69 c3       	rjmp	.+1746   	; 0x6fc <__vector_10>
  2a:	00 00       	nop
  2c:	c0 c0       	rjmp	.+384    	; 0x1ae <__bad_interrupt>
  2e:	00 00       	nop
  30:	be c0       	rjmp	.+380    	; 0x1ae <__bad_interrupt>
  32:	00 00       	nop
  34:	bc c0       	rjmp	.+376    	; 0x1ae <__bad_interrupt>
  36:	00 00       	nop
  38:	ba c0       	rjmp	.+372    	; 0x1ae <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b8 c0       	rjmp	.+368    	; 0x1ae <__bad_interrupt>
  3e:	00 00       	nop
  40:	b6 c0       	rjmp	.+364    	; 0x1ae <__bad_interrupt>
  42:	00 00       	nop
  44:	b4 c0       	rjmp	.+360    	; 0x1ae <__bad_interrupt>
  46:	00 00       	nop
  48:	b2 c0       	rjmp	.+356    	; 0x1ae <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b0 c0       	rjmp	.+352    	; 0x1ae <__bad_interrupt>
  4e:	00 00       	nop
  50:	ae c0       	rjmp	.+348    	; 0x1ae <__bad_interrupt>
  52:	00 00       	nop
  54:	ac c0       	rjmp	.+344    	; 0x1ae <__bad_interrupt>
  56:	00 00       	nop
  58:	aa c0       	rjmp	.+340    	; 0x1ae <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a8 c0       	rjmp	.+336    	; 0x1ae <__bad_interrupt>
  5e:	00 00       	nop
  60:	a6 c0       	rjmp	.+332    	; 0x1ae <__bad_interrupt>
  62:	00 00       	nop
  64:	a4 c0       	rjmp	.+328    	; 0x1ae <__bad_interrupt>
  66:	00 00       	nop
  68:	a2 c0       	rjmp	.+324    	; 0x1ae <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a0 c0       	rjmp	.+320    	; 0x1ae <__bad_interrupt>
  6e:	00 00       	nop
  70:	9e c0       	rjmp	.+316    	; 0x1ae <__bad_interrupt>
  72:	00 00       	nop
  74:	9c c0       	rjmp	.+312    	; 0x1ae <__bad_interrupt>
  76:	00 00       	nop
  78:	9a c0       	rjmp	.+308    	; 0x1ae <__bad_interrupt>
  7a:	00 00       	nop
  7c:	98 c0       	rjmp	.+304    	; 0x1ae <__bad_interrupt>
  7e:	00 00       	nop
  80:	96 c0       	rjmp	.+300    	; 0x1ae <__bad_interrupt>
  82:	00 00       	nop
  84:	94 c0       	rjmp	.+296    	; 0x1ae <__bad_interrupt>
  86:	00 00       	nop
  88:	92 c0       	rjmp	.+292    	; 0x1ae <__bad_interrupt>
  8a:	00 00       	nop
  8c:	90 c0       	rjmp	.+288    	; 0x1ae <__bad_interrupt>
  8e:	00 00       	nop
  90:	8e c0       	rjmp	.+284    	; 0x1ae <__bad_interrupt>
  92:	00 00       	nop
  94:	8c c0       	rjmp	.+280    	; 0x1ae <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 10 01 ef 02 01 08 eb 03 4e 20 01 00 01 02     ..........N ....
  a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 83 00 04 01 00 c0 32 08 0b 00 02 02 02 01     ........2.......
  ba:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
  ca:	24 02 06 05 24 06 00 01 07 05 83 03 08 00 ff 09     $...$...........
  da:	04 01 00 02 0a 00 00 00 07 05 02 02 10 00 01 07     ................
  ea:	05 81 02 10 00 01 08 0b 02 02 02 02 01 00 09 04     ................
  fa:	02 00 01 02 02 01 00 05 24 00 10 01 04 24 02 06     ........$....$..
 10a:	05 24 06 02 03 07 05 84 03 08 00 ff 09 04 03 00     .$..............
 11a:	02 0a 00 00 00 07 05 06 02 10 00 01 07 05 85 02     ................
 12a:	10 00 01                                            ...

0000012d <LanguageString>:
 12d:	04 03 09 04                                         ....

00000131 <ManufacturerString>:
 131:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
 141:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000014b <ProductString>:
 14b:	1c 03 4c 00 55 00 46 00 41 00 20 00 44 00 75 00     ..L.U.F.A. .D.u.
 15b:	61 00 6c 00 20 00 43 00 44 00 43 00 20 00 44 00     a.l. .C.D.C. .D.
 16b:	65 00 6d 00 6f 00 00 00 00                          e.m.o....

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf ef       	ldi	r28, 0xFF	; 255
 17a:	d0 e2       	ldi	r29, 0x20	; 32
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	11 e0       	ldi	r17, 0x01	; 1
 182:	a0 e0       	ldi	r26, 0x00	; 0
 184:	b1 e0       	ldi	r27, 0x01	; 1
 186:	ee e3       	ldi	r30, 0x3E	; 62
 188:	fe e0       	ldi	r31, 0x0E	; 14
 18a:	00 e0       	ldi	r16, 0x00	; 0
 18c:	0b bf       	out	0x3b, r16	; 59
 18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x14>
 190:	07 90       	elpm	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	a0 36       	cpi	r26, 0x60	; 96
 196:	b1 07       	cpc	r27, r17
 198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0x10>

0000019a <__do_clear_bss>:
 19a:	11 e0       	ldi	r17, 0x01	; 1
 19c:	a0 e6       	ldi	r26, 0x60	; 96
 19e:	b1 e0       	ldi	r27, 0x01	; 1
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
 1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
 1a4:	ae 36       	cpi	r26, 0x6E	; 110
 1a6:	b1 07       	cpc	r27, r17
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
 1aa:	a7 d1       	rcall	.+846    	; 0x4fa <main>
 1ac:	46 c6       	rjmp	.+3212   	; 0xe3a <_exit>

000001ae <__bad_interrupt>:
 1ae:	28 cf       	rjmp	.-432    	; 0x0 <__vectors>

000001b0 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 1b0:	8b b1       	in	r24, 0x0b	; 11
 1b2:	8f 70       	andi	r24, 0x0F	; 15
 1b4:	80 6a       	ori	r24, 0xA0	; 160
 1b6:	8b b9       	out	0x0b, r24	; 11
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
 1b8:	08 95       	ret

000001ba <EVENT_USB_Device_Disconnect>:
 1ba:	8b b1       	in	r24, 0x0b	; 11
 1bc:	8f 70       	andi	r24, 0x0F	; 15
 1be:	80 61       	ori	r24, 0x10	; 16
 1c0:	8b b9       	out	0x0b, r24	; 11
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 1c2:	08 95       	ret

000001c4 <CDC2_Task>:

/** Function to manage CDC data transmission and reception to and from the host for the second CDC interface, which echoes back
 *  all data sent to it from the host.
 */
void CDC2_Task(void)
{
 1c4:	af 92       	push	r10
 1c6:	bf 92       	push	r11
 1c8:	cf 92       	push	r12
 1ca:	df 92       	push	r13
 1cc:	ef 92       	push	r14
 1ce:	ff 92       	push	r15
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	df 93       	push	r29
 1d6:	cf 93       	push	r28
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
		Endpoint_WaitUntilReady();

		/* Send an empty packet to prevent host buffering */
		Endpoint_ClearIN();
	}
}
 1dc:	ad b6       	in	r10, 0x3d	; 61
 1de:	be b6       	in	r11, 0x3e	; 62
 *  all data sent to it from the host.
 */
void CDC2_Task(void)
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 1e0:	80 91 65 01 	lds	r24, 0x0165
 1e4:	84 30       	cpi	r24, 0x04	; 4
 1e6:	09 f0       	breq	.+2      	; 0x1ea <CDC2_Task+0x26>
 1e8:	3e c0       	rjmp	.+124    	; 0x266 <CDC2_Task+0xa2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 1ea:	86 e0       	ldi	r24, 0x06	; 6
 1ec:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 1f0:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Serial Rx Endpoint */
	Endpoint_SelectEndpoint(CDC2_RX_EPNUM);

	/* Check to see if any data has been received */
	if (Endpoint_IsOUTReceived())
 1f4:	82 ff       	sbrs	r24, 2
 1f6:	37 c0       	rjmp	.+110    	; 0x266 <CDC2_Task+0xa2>
 1f8:	ce b6       	in	r12, 0x3e	; 62
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 1fa:	80 91 f2 00 	lds	r24, 0x00F2
 1fe:	90 91 f3 00 	lds	r25, 0x00F3
	{
		/* Create a temp buffer big enough to hold the incoming endpoint packet */
		uint8_t  Buffer[Endpoint_BytesInEndpoint()];
 202:	2d b7       	in	r18, 0x3d	; 61
 204:	3e b7       	in	r19, 0x3e	; 62
 206:	28 1b       	sub	r18, r24
 208:	39 0b       	sbc	r19, r25
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	f8 94       	cli
 20e:	3e bf       	out	0x3e, r19	; 62
 210:	0f be       	out	0x3f, r0	; 63
 212:	2d bf       	out	0x3d, r18	; 61
 214:	0d b7       	in	r16, 0x3d	; 61
 216:	1e b7       	in	r17, 0x3e	; 62
 218:	0f 5f       	subi	r16, 0xFF	; 255
 21a:	1f 4f       	sbci	r17, 0xFF	; 255
 21c:	e0 90 f2 00 	lds	r14, 0x00F2
 220:	f0 90 f3 00 	lds	r15, 0x00F3

		/* Remember how large the incoming packet is */
		uint16_t DataLength = Endpoint_BytesInEndpoint();

		/* Read in the incoming packet into the buffer */
		Endpoint_Read_Stream_LE(&Buffer, DataLength);
 224:	c8 01       	movw	r24, r16
 226:	b7 01       	movw	r22, r14
 228:	9b d5       	rcall	.+2870   	; 0xd60 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 22a:	80 91 e8 00 	lds	r24, 0x00E8
 22e:	8b 77       	andi	r24, 0x7B	; 123
 230:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 234:	85 e0       	ldi	r24, 0x05	; 5
 236:	80 93 e9 00 	sts	0x00E9, r24

		/* Select the Serial Tx Endpoint */
		Endpoint_SelectEndpoint(CDC2_TX_EPNUM);

		/* Write the received data to the endpoint */
		Endpoint_Write_Stream_LE(&Buffer, DataLength);
 23a:	c8 01       	movw	r24, r16
 23c:	b7 01       	movw	r22, r14
 23e:	bd d5       	rcall	.+2938   	; 0xdba <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 240:	80 91 e8 00 	lds	r24, 0x00E8
 244:	8e 77       	andi	r24, 0x7E	; 126
 246:	80 93 e8 00 	sts	0x00E8, r24

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* Wait until the endpoint is ready for the next packet */
		Endpoint_WaitUntilReady();
 24a:	c3 d1       	rcall	.+902    	; 0x5d2 <Endpoint_WaitUntilReady>
 24c:	80 91 e8 00 	lds	r24, 0x00E8
 250:	8e 77       	andi	r24, 0x7E	; 126
 252:	80 93 e8 00 	sts	0x00E8, r24
 256:	2a 2d       	mov	r18, r10
 258:	3c 2d       	mov	r19, r12
 25a:	c9 01       	movw	r24, r18
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	f8 94       	cli
 260:	9e bf       	out	0x3e, r25	; 62
 262:	0f be       	out	0x3f, r0	; 63
 264:	8d bf       	out	0x3d, r24	; 61

		/* Send an empty packet to prevent host buffering */
		Endpoint_ClearIN();
	}
}
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	f8 94       	cli
 26a:	be be       	out	0x3e, r11	; 62
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	ad be       	out	0x3d, r10	; 61
 270:	cf 91       	pop	r28
 272:	df 91       	pop	r29
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	ff 90       	pop	r15
 27a:	ef 90       	pop	r14
 27c:	df 90       	pop	r13
 27e:	cf 90       	pop	r12
 280:	bf 90       	pop	r11
 282:	af 90       	pop	r10
 284:	08 95       	ret

00000286 <CDC1_Task>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> 1));
 286:	23 b1       	in	r18, 0x03	; 3
 288:	9c b1       	in	r25, 0x0c	; 12
	char*       ReportString    = NULL;
	uint8_t     JoyStatus_LCL   = Joystick_GetStatus();
	static bool ActionSent      = false;

	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 28a:	80 91 65 01 	lds	r24, 0x0165
 28e:	84 30       	cpi	r24, 0x04	; 4
 290:	09 f0       	breq	.+2      	; 0x294 <CDC1_Task+0xe>
 292:	5c c0       	rjmp	.+184    	; 0x34c <CDC1_Task+0xc6>
 294:	90 95       	com	r25
 296:	89 2f       	mov	r24, r25
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	80 73       	andi	r24, 0x30	; 48
 29c:	90 70       	andi	r25, 0x00	; 0
 29e:	95 95       	asr	r25
 2a0:	87 95       	ror	r24
 2a2:	92 2f       	mov	r25, r18
 2a4:	90 95       	com	r25
 2a6:	90 7e       	andi	r25, 0xE0	; 224
 2a8:	98 2b       	or	r25, r24
	  return;

	/* Determine if a joystick action has occurred */
	if (JoyStatus_LCL & JOY_UP)
 2aa:	97 fd       	sbrc	r25, 7
 2ac:	17 c0       	rjmp	.+46     	; 0x2dc <CDC1_Task+0x56>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
 2ae:	94 ff       	sbrs	r25, 4
 2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <CDC1_Task+0x32>
 2b2:	20 e0       	ldi	r18, 0x00	; 0
 2b4:	31 e0       	ldi	r19, 0x01	; 1
 2b6:	14 c0       	rjmp	.+40     	; 0x2e0 <CDC1_Task+0x5a>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
 2b8:	96 ff       	sbrs	r25, 6
 2ba:	03 c0       	rjmp	.+6      	; 0x2c2 <CDC1_Task+0x3c>
 2bc:	20 e1       	ldi	r18, 0x10	; 16
 2be:	31 e0       	ldi	r19, 0x01	; 1
 2c0:	0f c0       	rjmp	.+30     	; 0x2e0 <CDC1_Task+0x5a>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
 2c2:	93 ff       	sbrs	r25, 3
 2c4:	03 c0       	rjmp	.+6      	; 0x2cc <CDC1_Task+0x46>
 2c6:	20 e2       	ldi	r18, 0x20	; 32
 2c8:	31 e0       	ldi	r19, 0x01	; 1
 2ca:	0a c0       	rjmp	.+20     	; 0x2e0 <CDC1_Task+0x5a>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
 2cc:	95 ff       	sbrs	r25, 5
 2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <CDC1_Task+0x50>
 2d0:	21 e3       	ldi	r18, 0x31	; 49
 2d2:	31 e0       	ldi	r19, 0x01	; 1
 2d4:	05 c0       	rjmp	.+10     	; 0x2e0 <CDC1_Task+0x5a>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
 2d6:	10 92 60 01 	sts	0x0160, r1
 2da:	2c c0       	rjmp	.+88     	; 0x334 <CDC1_Task+0xae>
 2dc:	24 e4       	ldi	r18, 0x44	; 68
 2de:	31 e0       	ldi	r19, 0x01	; 1

	/* Flag management - Only allow one string to be sent per action */
	if ((ReportString != NULL) && (ActionSent == false) && LineEncoding1.BaudRateBPS)
 2e0:	80 91 60 01 	lds	r24, 0x0160
 2e4:	88 23       	and	r24, r24
 2e6:	31 f5       	brne	.+76     	; 0x334 <CDC1_Task+0xae>
 2e8:	80 91 52 01 	lds	r24, 0x0152
 2ec:	90 91 53 01 	lds	r25, 0x0153
 2f0:	a0 91 54 01 	lds	r26, 0x0154
 2f4:	b0 91 55 01 	lds	r27, 0x0155
 2f8:	00 97       	sbiw	r24, 0x00	; 0
 2fa:	a1 05       	cpc	r26, r1
 2fc:	b1 05       	cpc	r27, r1
 2fe:	d1 f0       	breq	.+52     	; 0x334 <CDC1_Task+0xae>
	{
		ActionSent = true;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	80 93 60 01 	sts	0x0160, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 306:	80 93 e9 00 	sts	0x00E9, r24

		/* Select the Serial Tx Endpoint */
		Endpoint_SelectEndpoint(CDC1_TX_EPNUM);

		/* Write the String to the Endpoint */
		Endpoint_Write_Stream_LE(ReportString, strlen(ReportString));
 30a:	f9 01       	movw	r30, r18
 30c:	01 90       	ld	r0, Z+
 30e:	00 20       	and	r0, r0
 310:	e9 f7       	brne	.-6      	; 0x30c <CDC1_Task+0x86>
 312:	31 97       	sbiw	r30, 0x01	; 1
 314:	e2 1b       	sub	r30, r18
 316:	f3 0b       	sbc	r31, r19
 318:	c9 01       	movw	r24, r18
 31a:	bf 01       	movw	r22, r30
 31c:	4e d5       	rcall	.+2716   	; 0xdba <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 31e:	80 91 e8 00 	lds	r24, 0x00E8
 322:	8e 77       	andi	r24, 0x7E	; 126
 324:	80 93 e8 00 	sts	0x00E8, r24

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* Wait until the endpoint is ready for another packet */
		Endpoint_WaitUntilReady();
 328:	54 d1       	rcall	.+680    	; 0x5d2 <Endpoint_WaitUntilReady>
 32a:	80 91 e8 00 	lds	r24, 0x00E8
 32e:	8e 77       	andi	r24, 0x7E	; 126
 330:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 33a:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Serial Rx Endpoint */
	Endpoint_SelectEndpoint(CDC1_RX_EPNUM);

	/* Throw away any received data from the host */
	if (Endpoint_IsOUTReceived())
 33e:	82 ff       	sbrs	r24, 2
 340:	05 c0       	rjmp	.+10     	; 0x34c <CDC1_Task+0xc6>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 342:	80 91 e8 00 	lds	r24, 0x00E8
 346:	8b 77       	andi	r24, 0x7B	; 123
 348:	80 93 e8 00 	sts	0x00E8, r24
 34c:	08 95       	ret

0000034e <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Determine which interface's Line Coding data is being set from the wIndex parameter */
	void* LineEncodingData = (USB_ControlRequest.wIndex == 0) ? &LineEncoding1 : &LineEncoding2;
 34e:	80 91 6a 01 	lds	r24, 0x016A
 352:	90 91 6b 01 	lds	r25, 0x016B
 356:	89 2b       	or	r24, r25
 358:	19 f0       	breq	.+6      	; 0x360 <EVENT_USB_Device_ControlRequest+0x12>
 35a:	29 e5       	ldi	r18, 0x59	; 89
 35c:	31 e0       	ldi	r19, 0x01	; 1
 35e:	02 c0       	rjmp	.+4      	; 0x364 <EVENT_USB_Device_ControlRequest+0x16>
 360:	22 e5       	ldi	r18, 0x52	; 82
 362:	31 e0       	ldi	r19, 0x01	; 1

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
 364:	80 91 67 01 	lds	r24, 0x0167
 368:	81 32       	cpi	r24, 0x21	; 33
 36a:	29 f0       	breq	.+10     	; 0x376 <EVENT_USB_Device_ControlRequest+0x28>
 36c:	82 32       	cpi	r24, 0x22	; 34
 36e:	39 f1       	breq	.+78     	; 0x3be <EVENT_USB_Device_ControlRequest+0x70>
 370:	80 32       	cpi	r24, 0x20	; 32
 372:	79 f5       	brne	.+94     	; 0x3d2 <EVENT_USB_Device_ControlRequest+0x84>
 374:	11 c0       	rjmp	.+34     	; 0x398 <EVENT_USB_Device_ControlRequest+0x4a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 376:	80 91 66 01 	lds	r24, 0x0166
 37a:	81 3a       	cpi	r24, 0xA1	; 161
 37c:	51 f5       	brne	.+84     	; 0x3d2 <EVENT_USB_Device_ControlRequest+0x84>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 37e:	80 91 e8 00 	lds	r24, 0x00E8
 382:	87 7f       	andi	r24, 0xF7	; 247
 384:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(LineEncodingData, sizeof(CDC_LineEncoding_t));
 388:	c9 01       	movw	r24, r18
 38a:	67 e0       	ldi	r22, 0x07	; 7
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	e9 d3       	rcall	.+2002   	; 0xb62 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 390:	80 91 e8 00 	lds	r24, 0x00E8
 394:	8b 77       	andi	r24, 0x7B	; 123
 396:	10 c0       	rjmp	.+32     	; 0x3b8 <EVENT_USB_Device_ControlRequest+0x6a>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 398:	80 91 66 01 	lds	r24, 0x0166
 39c:	81 32       	cpi	r24, 0x21	; 33
 39e:	c9 f4       	brne	.+50     	; 0x3d2 <EVENT_USB_Device_ControlRequest+0x84>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 3a0:	80 91 e8 00 	lds	r24, 0x00E8
 3a4:	87 7f       	andi	r24, 0xF7	; 247
 3a6:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(LineEncodingData, sizeof(CDC_LineEncoding_t));
 3aa:	c9 01       	movw	r24, r18
 3ac:	67 e0       	ldi	r22, 0x07	; 7
 3ae:	70 e0       	ldi	r23, 0x00	; 0
 3b0:	96 d4       	rcall	.+2348   	; 0xcde <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3b2:	80 91 e8 00 	lds	r24, 0x00E8
 3b6:	8e 77       	andi	r24, 0x7E	; 126
 3b8:	80 93 e8 00 	sts	0x00E8, r24
 3bc:	08 95       	ret
				Endpoint_ClearIN();
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 3be:	80 91 66 01 	lds	r24, 0x0166
 3c2:	81 32       	cpi	r24, 0x21	; 33
 3c4:	31 f4       	brne	.+12     	; 0x3d2 <EVENT_USB_Device_ControlRequest+0x84>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 3c6:	80 91 e8 00 	lds	r24, 0x00E8
 3ca:	87 7f       	andi	r24, 0xF7	; 247
 3cc:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 3d0:	df c0       	rjmp	.+446    	; 0x590 <Endpoint_ClearStatusStage>
 3d2:	08 95       	ret

000003d4 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host set the current configuration
 *  of the USB device after enumeration - the device endpoints are configured and the CDC management tasks are started.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 3d4:	bf 92       	push	r11
 3d6:	cf 92       	push	r12
 3d8:	df 92       	push	r13
 3da:	ef 92       	push	r14
 3dc:	ff 92       	push	r15
 3de:	0f 93       	push	r16
 3e0:	1f 93       	push	r17
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	61 e8       	ldi	r22, 0x81	; 129
 3e6:	42 e1       	ldi	r20, 0x12	; 18
 3e8:	c0 d0       	rcall	.+384    	; 0x56a <Endpoint_ConfigureEndpoint_Prv>
 3ea:	08 2f       	mov	r16, r24
	/* Setup first CDC Interface's Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC1_TX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_IN,
	                                            CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC1_RX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_OUT,
	                                            CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC1_NOTIFICATION_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 3ec:	82 e0       	ldi	r24, 0x02	; 2
 3ee:	60 e8       	ldi	r22, 0x80	; 128
 3f0:	42 e1       	ldi	r20, 0x12	; 18
 3f2:	bb d0       	rcall	.+374    	; 0x56a <Endpoint_ConfigureEndpoint_Prv>
 3f4:	c8 2e       	mov	r12, r24
 3f6:	83 e0       	ldi	r24, 0x03	; 3
 3f8:	61 ec       	ldi	r22, 0xC1	; 193
 3fa:	42 e0       	ldi	r20, 0x02	; 2
 3fc:	b6 d0       	rcall	.+364    	; 0x56a <Endpoint_ConfigureEndpoint_Prv>
 3fe:	e8 2e       	mov	r14, r24
 400:	85 e0       	ldi	r24, 0x05	; 5
 402:	61 e8       	ldi	r22, 0x81	; 129
 404:	42 e1       	ldi	r20, 0x12	; 18
 406:	b1 d0       	rcall	.+354    	; 0x56a <Endpoint_ConfigureEndpoint_Prv>
 408:	b8 2e       	mov	r11, r24
 40a:	86 e0       	ldi	r24, 0x06	; 6
 40c:	60 e8       	ldi	r22, 0x80	; 128
 40e:	42 e1       	ldi	r20, 0x12	; 18
 410:	ac d0       	rcall	.+344    	; 0x56a <Endpoint_ConfigureEndpoint_Prv>
 412:	48 2f       	mov	r20, r24
 414:	10 e0       	ldi	r17, 0x00	; 0
 416:	dd 24       	eor	r13, r13
 418:	0c 21       	and	r16, r12
 41a:	1d 21       	and	r17, r13
 41c:	01 70       	andi	r16, 0x01	; 1
 41e:	10 70       	andi	r17, 0x00	; 0
 420:	ff 24       	eor	r15, r15
 422:	0e 21       	and	r16, r14
 424:	1f 21       	and	r17, r15
	                                            CDC_NOTIFICATION_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Setup second CDC Interface's Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC2_TX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_IN,
 426:	20 e0       	ldi	r18, 0x00	; 0
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	01 2b       	or	r16, r17
 42c:	11 f0       	breq	.+4      	; 0x432 <EVENT_USB_Device_ConfigurationChanged+0x5e>
 42e:	21 e0       	ldi	r18, 0x01	; 1
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	8b 2d       	mov	r24, r11
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	28 23       	and	r18, r24
 438:	39 23       	and	r19, r25
	                                            CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC2_RX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_OUT,
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	23 2b       	or	r18, r19
 440:	11 f0       	breq	.+4      	; 0x446 <EVENT_USB_Device_ConfigurationChanged+0x72>
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	04 2f       	mov	r16, r20
 448:	10 e0       	ldi	r17, 0x00	; 0
 44a:	08 23       	and	r16, r24
 44c:	19 23       	and	r17, r25
 44e:	84 e0       	ldi	r24, 0x04	; 4
 450:	61 ec       	ldi	r22, 0xC1	; 193
 452:	42 e0       	ldi	r20, 0x02	; 2
 454:	8a d0       	rcall	.+276    	; 0x56a <Endpoint_ConfigureEndpoint_Prv>
	                                            CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC2_NOTIFICATION_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
	                                            CDC_NOTIFICATION_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Reset line encoding baud rates so that the host knows to send new values */
	LineEncoding1.BaudRateBPS = 0;
 456:	10 92 52 01 	sts	0x0152, r1
 45a:	10 92 53 01 	sts	0x0153, r1
 45e:	10 92 54 01 	sts	0x0154, r1
 462:	10 92 55 01 	sts	0x0155, r1
	LineEncoding2.BaudRateBPS = 0;
 466:	10 92 59 01 	sts	0x0159, r1
 46a:	10 92 5a 01 	sts	0x015A, r1
 46e:	10 92 5b 01 	sts	0x015B, r1
 472:	10 92 5c 01 	sts	0x015C, r1

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	01 2b       	or	r16, r17
 47c:	11 f0       	breq	.+4      	; 0x482 <EVENT_USB_Device_ConfigurationChanged+0xae>
 47e:	21 e0       	ldi	r18, 0x01	; 1
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	28 23       	and	r18, r24
 486:	39 23       	and	r19, r25
 488:	23 2b       	or	r18, r19
 48a:	11 f4       	brne	.+4      	; 0x490 <EVENT_USB_Device_ConfigurationChanged+0xbc>
 48c:	90 e9       	ldi	r25, 0x90	; 144
 48e:	01 c0       	rjmp	.+2      	; 0x492 <EVENT_USB_Device_ConfigurationChanged+0xbe>
 490:	90 e6       	ldi	r25, 0x60	; 96
 492:	8b b1       	in	r24, 0x0b	; 11
 494:	8f 70       	andi	r24, 0x0F	; 15
 496:	98 2b       	or	r25, r24
 498:	9b b9       	out	0x0b, r25	; 11
}
 49a:	1f 91       	pop	r17
 49c:	0f 91       	pop	r16
 49e:	ff 90       	pop	r15
 4a0:	ef 90       	pop	r14
 4a2:	df 90       	pop	r13
 4a4:	cf 90       	pop	r12
 4a6:	bf 90       	pop	r11
 4a8:	08 95       	ret

000004aa <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 4aa:	84 b7       	in	r24, 0x34	; 52
 4ac:	87 7f       	andi	r24, 0xF7	; 247
 4ae:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 4b0:	88 e1       	ldi	r24, 0x18	; 24
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	f8 94       	cli
 4b6:	80 93 60 00 	sts	0x0060, r24
 4ba:	10 92 60 00 	sts	0x0060, r1
 4be:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	20 e8       	ldi	r18, 0x80	; 128
 4c6:	0f b6       	in	r0, 0x3f	; 63
 4c8:	f8 94       	cli
 4ca:	20 93 61 00 	sts	0x0061, r18
 4ce:	80 93 61 00 	sts	0x0061, r24
 4d2:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 4d4:	84 b1       	in	r24, 0x04	; 4
 4d6:	8f 71       	andi	r24, 0x1F	; 31
 4d8:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 4da:	8d b1       	in	r24, 0x0d	; 13
 4dc:	8f 7c       	andi	r24, 0xCF	; 207
 4de:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 4e0:	85 b1       	in	r24, 0x05	; 5
 4e2:	80 6e       	ori	r24, 0xE0	; 224
 4e4:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 4e6:	8e b1       	in	r24, 0x0e	; 14
 4e8:	80 63       	ori	r24, 0x30	; 48
 4ea:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 4ec:	8a b1       	in	r24, 0x0a	; 10
 4ee:	80 6f       	ori	r24, 0xF0	; 240
 4f0:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 4f2:	8b b1       	in	r24, 0x0b	; 11
 4f4:	8f 70       	andi	r24, 0x0F	; 15
 4f6:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
}
 4f8:	eb c0       	rjmp	.+470    	; 0x6d0 <USB_Init>

000004fa <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
 4fa:	d7 df       	rcall	.-82     	; 0x4aa <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 4fc:	8b b1       	in	r24, 0x0b	; 11
 4fe:	8f 70       	andi	r24, 0x0F	; 15
 500:	80 61       	ori	r24, 0x10	; 16
 502:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
 504:	78 94       	sei

	for (;;)
	{
		CDC1_Task();
 506:	bf de       	rcall	.-642    	; 0x286 <CDC1_Task>
		CDC2_Task();
 508:	5d de       	rcall	.-838    	; 0x1c4 <CDC2_Task>
		USB_USBTask();
 50a:	84 d4       	rcall	.+2312   	; 0xe14 <USB_USBTask>
 50c:	fc cf       	rjmp	.-8      	; 0x506 <main+0xc>

0000050e <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 50e:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 510:	92 30       	cpi	r25, 0x02	; 2
 512:	49 f0       	breq	.+18     	; 0x526 <CALLBACK_USB_GetDescriptor+0x18>
 514:	93 30       	cpi	r25, 0x03	; 3
 516:	61 f0       	breq	.+24     	; 0x530 <CALLBACK_USB_GetDescriptor+0x22>
 518:	91 30       	cpi	r25, 0x01	; 1
 51a:	f9 f4       	brne	.+62     	; 0x55a <CALLBACK_USB_GetDescriptor+0x4c>
 51c:	e8 e9       	ldi	r30, 0x98	; 152
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	22 e1       	ldi	r18, 0x12	; 18
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	1e c0       	rjmp	.+60     	; 0x562 <CALLBACK_USB_GetDescriptor+0x54>
 526:	ea ea       	ldi	r30, 0xAA	; 170
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	23 e8       	ldi	r18, 0x83	; 131
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	19 c0       	rjmp	.+50     	; 0x562 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 530:	81 30       	cpi	r24, 0x01	; 1
 532:	49 f0       	breq	.+18     	; 0x546 <CALLBACK_USB_GetDescriptor+0x38>
 534:	81 30       	cpi	r24, 0x01	; 1
 536:	18 f0       	brcs	.+6      	; 0x53e <CALLBACK_USB_GetDescriptor+0x30>
 538:	82 30       	cpi	r24, 0x02	; 2
 53a:	79 f4       	brne	.+30     	; 0x55a <CALLBACK_USB_GetDescriptor+0x4c>
 53c:	08 c0       	rjmp	.+16     	; 0x54e <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 53e:	ed e2       	ldi	r30, 0x2D	; 45
 540:	f1 e0       	ldi	r31, 0x01	; 1
 542:	84 91       	lpm	r24, Z+
 544:	07 c0       	rjmp	.+14     	; 0x554 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 546:	e1 e3       	ldi	r30, 0x31	; 49
 548:	f1 e0       	ldi	r31, 0x01	; 1
 54a:	84 91       	lpm	r24, Z+
 54c:	03 c0       	rjmp	.+6      	; 0x554 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 54e:	eb e4       	ldi	r30, 0x4B	; 75
 550:	f1 e0       	ldi	r31, 0x01	; 1
 552:	84 91       	lpm	r24, Z+
 554:	28 2f       	mov	r18, r24
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	04 c0       	rjmp	.+8      	; 0x562 <CALLBACK_USB_GetDescriptor+0x54>
 55a:	e0 e0       	ldi	r30, 0x00	; 0
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	20 e0       	ldi	r18, 0x00	; 0
 560:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 562:	ed 93       	st	X+, r30
 564:	fc 93       	st	X, r31
	return Size;
}
 566:	c9 01       	movw	r24, r18
 568:	08 95       	ret

0000056a <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 56a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 56e:	80 91 eb 00 	lds	r24, 0x00EB
 572:	81 60       	ori	r24, 0x01	; 1
 574:	80 93 eb 00 	sts	0x00EB, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
 578:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
 57c:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
 580:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 584:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
 588:	88 1f       	adc	r24, r24
 58a:	88 27       	eor	r24, r24
 58c:	88 1f       	adc	r24, r24
 58e:	08 95       	ret

00000590 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 590:	80 91 66 01 	lds	r24, 0x0166
 594:	88 23       	and	r24, r24
 596:	9c f4       	brge	.+38     	; 0x5be <Endpoint_ClearStatusStage+0x2e>
 598:	04 c0       	rjmp	.+8      	; 0x5a2 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 59a:	80 91 65 01 	lds	r24, 0x0165
 59e:	88 23       	and	r24, r24
 5a0:	b9 f0       	breq	.+46     	; 0x5d0 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5a2:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 5a6:	82 ff       	sbrs	r24, 2
 5a8:	f8 cf       	rjmp	.-16     	; 0x59a <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 5aa:	80 91 e8 00 	lds	r24, 0x00E8
 5ae:	8b 77       	andi	r24, 0x7B	; 123
 5b0:	80 93 e8 00 	sts	0x00E8, r24
 5b4:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 5b6:	80 91 65 01 	lds	r24, 0x0165
 5ba:	88 23       	and	r24, r24
 5bc:	49 f0       	breq	.+18     	; 0x5d0 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 5be:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 5c2:	80 ff       	sbrs	r24, 0
 5c4:	f8 cf       	rjmp	.-16     	; 0x5b6 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5c6:	80 91 e8 00 	lds	r24, 0x00E8
 5ca:	8e 77       	andi	r24, 0x7E	; 126
 5cc:	80 93 e8 00 	sts	0x00E8, r24
 5d0:	08 95       	ret

000005d2 <Endpoint_WaitUntilReady>:
			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is active (i.e. enumerated to a host)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 5d2:	40 91 e4 00 	lds	r20, 0x00E4
 5d6:	50 91 e5 00 	lds	r21, 0x00E5
 5da:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
 5dc:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 5e0:	80 ff       	sbrs	r24, 0
 5e2:	05 c0       	rjmp	.+10     	; 0x5ee <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 5e4:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
 5e8:	80 ff       	sbrs	r24, 0
 5ea:	05 c0       	rjmp	.+10     	; 0x5f6 <Endpoint_WaitUntilReady+0x24>
 5ec:	22 c0       	rjmp	.+68     	; 0x632 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5ee:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 5f2:	82 fd       	sbrc	r24, 2
 5f4:	1e c0       	rjmp	.+60     	; 0x632 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5f6:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5fa:	88 23       	and	r24, r24
 5fc:	11 f4       	brne	.+4      	; 0x602 <Endpoint_WaitUntilReady+0x30>
 5fe:	82 e0       	ldi	r24, 0x02	; 2
 600:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 602:	85 30       	cpi	r24, 0x05	; 5
 604:	11 f4       	brne	.+4      	; 0x60a <Endpoint_WaitUntilReady+0x38>
 606:	83 e0       	ldi	r24, 0x03	; 3
 608:	08 95       	ret
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 60a:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 60e:	85 ff       	sbrs	r24, 5
 610:	02 c0       	rjmp	.+4      	; 0x616 <Endpoint_WaitUntilReady+0x44>
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	08 95       	ret
 616:	80 91 e4 00 	lds	r24, 0x00E4
 61a:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 61e:	84 17       	cp	r24, r20
 620:	95 07       	cpc	r25, r21
 622:	e1 f2       	breq	.-72     	; 0x5dc <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 624:	22 23       	and	r18, r18
 626:	11 f4       	brne	.+4      	; 0x62c <Endpoint_WaitUntilReady+0x5a>
 628:	84 e0       	ldi	r24, 0x04	; 4
 62a:	08 95       	ret
 62c:	21 50       	subi	r18, 0x01	; 1
 62e:	ac 01       	movw	r20, r24
 630:	d5 cf       	rjmp	.-86     	; 0x5dc <Endpoint_WaitUntilReady+0xa>
 632:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 634:	08 95       	ret

00000636 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 636:	55 d0       	rcall	.+170    	; 0x6e2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 638:	5c d0       	rcall	.+184    	; 0x6f2 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 63a:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
 63e:	98 2f       	mov	r25, r24
 640:	9f 77       	andi	r25, 0x7F	; 127
 642:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
 646:	80 68       	ori	r24, 0x80	; 128
 648:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 64c:	8c e0       	ldi	r24, 0x0C	; 12
 64e:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 650:	89 b5       	in	r24, 0x29	; 41
 652:	82 60       	ori	r24, 0x02	; 2
 654:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
 656:	09 b4       	in	r0, 0x29	; 41
 658:	00 fe       	sbrs	r0, 0
 65a:	fd cf       	rjmp	.-6      	; 0x656 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 65c:	80 91 d8 00 	lds	r24, 0x00D8
 660:	8f 7d       	andi	r24, 0xDF	; 223
 662:	80 93 d8 00 	sts	0x00D8, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 666:	80 91 d7 00 	lds	r24, 0x00D7
 66a:	80 68       	ori	r24, 0x80	; 128
 66c:	80 93 d7 00 	sts	0x00D7, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
 670:	10 92 65 01 	sts	0x0165, r1
	USB_ConfigurationNumber  = 0;
 674:	10 92 63 01 	sts	0x0163, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
 678:	10 92 62 01 	sts	0x0162, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
 67c:	10 92 61 01 	sts	0x0161, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 680:	80 91 e0 00 	lds	r24, 0x00E0
 684:	8b 7f       	andi	r24, 0xFB	; 251
 686:	80 93 e0 00 	sts	0x00E0, r24
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  USB_Device_SetLowSpeed();
	else
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUS);
 68a:	80 91 d8 00 	lds	r24, 0x00D8
 68e:	81 60       	ori	r24, 0x01	; 1
 690:	80 93 d8 00 	sts	0x00D8, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	60 e0       	ldi	r22, 0x00	; 0
 698:	42 e0       	ldi	r20, 0x02	; 2
 69a:	67 df       	rcall	.-306    	; 0x56a <Endpoint_ConfigureEndpoint_Prv>

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
							   ENDPOINT_BANK_SINGLE);

	USB_INT_Clear(USB_INT_SUSPI);
 69c:	80 91 e1 00 	lds	r24, 0x00E1
 6a0:	8e 7f       	andi	r24, 0xFE	; 254
 6a2:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPI);
 6a6:	80 91 e2 00 	lds	r24, 0x00E2
 6aa:	81 60       	ori	r24, 0x01	; 1
 6ac:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Enable(USB_INT_EORSTI);
 6b0:	80 91 e2 00 	lds	r24, 0x00E2
 6b4:	88 60       	ori	r24, 0x08	; 8
 6b6:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 6ba:	80 91 e0 00 	lds	r24, 0x00E0
 6be:	8e 7f       	andi	r24, 0xFE	; 254
 6c0:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 6c4:	80 91 d8 00 	lds	r24, 0x00D8
 6c8:	80 61       	ori	r24, 0x10	; 16
 6ca:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 6ce:	08 95       	ret

000006d0 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 6d0:	e7 ed       	ldi	r30, 0xD7	; 215
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	80 81       	ld	r24, Z
 6d6:	81 60       	ori	r24, 0x01	; 1
 6d8:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	80 93 64 01 	sts	0x0164, r24

	USB_ResetInterface();
}
 6e0:	aa cf       	rjmp	.-172    	; 0x636 <USB_ResetInterface>

000006e2 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 6e2:	e8 ed       	ldi	r30, 0xD8	; 216
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	80 81       	ld	r24, Z
 6e8:	8c 7f       	andi	r24, 0xFC	; 252
 6ea:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 6ec:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 6f0:	08 95       	ret

000006f2 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
 6f2:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
 6f6:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 6fa:	08 95       	ret

000006fc <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 6fc:	1f 92       	push	r1
 6fe:	0f 92       	push	r0
 700:	0f b6       	in	r0, 0x3f	; 63
 702:	0f 92       	push	r0
 704:	0b b6       	in	r0, 0x3b	; 59
 706:	0f 92       	push	r0
 708:	11 24       	eor	r1, r1
 70a:	2f 93       	push	r18
 70c:	3f 93       	push	r19
 70e:	4f 93       	push	r20
 710:	5f 93       	push	r21
 712:	6f 93       	push	r22
 714:	7f 93       	push	r23
 716:	8f 93       	push	r24
 718:	9f 93       	push	r25
 71a:	af 93       	push	r26
 71c:	bf 93       	push	r27
 71e:	ef 93       	push	r30
 720:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
 722:	80 91 da 00 	lds	r24, 0x00DA
 726:	80 ff       	sbrs	r24, 0
 728:	15 c0       	rjmp	.+42     	; 0x754 <__vector_10+0x58>
 72a:	80 91 d8 00 	lds	r24, 0x00D8
 72e:	80 ff       	sbrs	r24, 0
 730:	11 c0       	rjmp	.+34     	; 0x754 <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_VBUS);
 732:	80 91 da 00 	lds	r24, 0x00DA
 736:	8e 7f       	andi	r24, 0xFE	; 254
 738:	80 93 da 00 	sts	0x00DA, r24
				 *  \note This function is not available on some AVR models which do not support hardware VBUS monitoring.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 73c:	80 91 d9 00 	lds	r24, 0x00D9

		if (USB_VBUS_GetStatus())
 740:	80 ff       	sbrs	r24, 0
 742:	05 c0       	rjmp	.+10     	; 0x74e <__vector_10+0x52>
		{
			USB_DeviceState = DEVICE_STATE_Powered;
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	80 93 65 01 	sts	0x0165, r24
			EVENT_USB_Device_Connect();
 74a:	32 dd       	rcall	.-1436   	; 0x1b0 <EVENT_USB_Device_Connect>
 74c:	03 c0       	rjmp	.+6      	; 0x754 <__vector_10+0x58>
		}
		else
		{
			USB_DeviceState = DEVICE_STATE_Unattached;
 74e:	10 92 65 01 	sts	0x0165, r1
			EVENT_USB_Device_Disconnect();
 752:	33 dd       	rcall	.-1434   	; 0x1ba <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 754:	80 91 e1 00 	lds	r24, 0x00E1
 758:	80 ff       	sbrs	r24, 0
 75a:	1d c0       	rjmp	.+58     	; 0x796 <__vector_10+0x9a>
 75c:	80 91 e2 00 	lds	r24, 0x00E2
 760:	80 ff       	sbrs	r24, 0
 762:	19 c0       	rjmp	.+50     	; 0x796 <__vector_10+0x9a>
	{
		USB_INT_Clear(USB_INT_SUSPI);
 764:	80 91 e1 00 	lds	r24, 0x00E1
 768:	8e 7f       	andi	r24, 0xFE	; 254
 76a:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPI);
 76e:	80 91 e2 00 	lds	r24, 0x00E2
 772:	8e 7f       	andi	r24, 0xFE	; 254
 774:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
 778:	80 91 e2 00 	lds	r24, 0x00E2
 77c:	80 61       	ori	r24, 0x10	; 16
 77e:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 782:	80 91 d8 00 	lds	r24, 0x00D8
 786:	80 62       	ori	r24, 0x20	; 32
 788:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 78c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 78e:	85 e0       	ldi	r24, 0x05	; 5
 790:	80 93 65 01 	sts	0x0165, r24
		EVENT_USB_Device_Suspend();
 794:	e5 d1       	rcall	.+970    	; 0xb60 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 796:	80 91 e1 00 	lds	r24, 0x00E1
 79a:	84 ff       	sbrs	r24, 4
 79c:	2e c0       	rjmp	.+92     	; 0x7fa <__vector_10+0xfe>
 79e:	80 91 e2 00 	lds	r24, 0x00E2
 7a2:	84 ff       	sbrs	r24, 4
 7a4:	2a c0       	rjmp	.+84     	; 0x7fa <__vector_10+0xfe>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 7a6:	8c e0       	ldi	r24, 0x0C	; 12
 7a8:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 7aa:	89 b5       	in	r24, 0x29	; 41
 7ac:	82 60       	ori	r24, 0x02	; 2
 7ae:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 7b0:	09 b4       	in	r0, 0x29	; 41
 7b2:	00 fe       	sbrs	r0, 0
 7b4:	fd cf       	rjmp	.-6      	; 0x7b0 <__vector_10+0xb4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 7b6:	80 91 d8 00 	lds	r24, 0x00D8
 7ba:	8f 7d       	andi	r24, 0xDF	; 223
 7bc:	80 93 d8 00 	sts	0x00D8, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUPI);
 7c0:	80 91 e1 00 	lds	r24, 0x00E1
 7c4:	8f 7e       	andi	r24, 0xEF	; 239
 7c6:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUPI);
 7ca:	80 91 e2 00 	lds	r24, 0x00E2
 7ce:	8f 7e       	andi	r24, 0xEF	; 239
 7d0:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPI);
 7d4:	80 91 e2 00 	lds	r24, 0x00E2
 7d8:	81 60       	ori	r24, 0x01	; 1
 7da:	80 93 e2 00 	sts	0x00E2, r24

		if (USB_ConfigurationNumber)
 7de:	80 91 63 01 	lds	r24, 0x0163
 7e2:	88 23       	and	r24, r24
 7e4:	31 f4       	brne	.+12     	; 0x7f2 <__vector_10+0xf6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 7e6:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 7ea:	87 fd       	sbrc	r24, 7
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <__vector_10+0xf6>
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	01 c0       	rjmp	.+2      	; 0x7f4 <__vector_10+0xf8>
 7f2:	84 e0       	ldi	r24, 0x04	; 4
 7f4:	80 93 65 01 	sts	0x0165, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 7f8:	b3 d1       	rcall	.+870    	; 0xb60 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 7fa:	80 91 e1 00 	lds	r24, 0x00E1
 7fe:	83 ff       	sbrs	r24, 3
 800:	22 c0       	rjmp	.+68     	; 0x846 <__vector_10+0x14a>
 802:	80 91 e2 00 	lds	r24, 0x00E2
 806:	83 ff       	sbrs	r24, 3
 808:	1e c0       	rjmp	.+60     	; 0x846 <__vector_10+0x14a>
	{
		USB_INT_Clear(USB_INT_EORSTI);
 80a:	80 91 e1 00 	lds	r24, 0x00E1
 80e:	87 7f       	andi	r24, 0xF7	; 247
 810:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
 814:	82 e0       	ldi	r24, 0x02	; 2
 816:	80 93 65 01 	sts	0x0165, r24
		USB_ConfigurationNumber = 0;
 81a:	10 92 63 01 	sts	0x0163, r1

		USB_INT_Clear(USB_INT_SUSPI);
 81e:	80 91 e1 00 	lds	r24, 0x00E1
 822:	8e 7f       	andi	r24, 0xFE	; 254
 824:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPI);
 828:	80 91 e2 00 	lds	r24, 0x00E2
 82c:	8e 7f       	andi	r24, 0xFE	; 254
 82e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
 832:	80 91 e2 00 	lds	r24, 0x00E2
 836:	80 61       	ori	r24, 0x10	; 16
 838:	80 93 e2 00 	sts	0x00E2, r24
 83c:	80 e0       	ldi	r24, 0x00	; 0
 83e:	60 e0       	ldi	r22, 0x00	; 0
 840:	42 e0       	ldi	r20, 0x02	; 2
 842:	93 de       	rcall	.-730    	; 0x56a <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 844:	8d d1       	rcall	.+794    	; 0xb60 <USB_Event_Stub>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 846:	80 91 e1 00 	lds	r24, 0x00E1
 84a:	82 ff       	sbrs	r24, 2
 84c:	0a c0       	rjmp	.+20     	; 0x862 <__vector_10+0x166>
 84e:	80 91 e2 00 	lds	r24, 0x00E2
 852:	82 ff       	sbrs	r24, 2
 854:	06 c0       	rjmp	.+12     	; 0x862 <__vector_10+0x166>
	{
		USB_INT_Clear(USB_INT_SOFI);
 856:	80 91 e1 00 	lds	r24, 0x00E1
 85a:	8b 7f       	andi	r24, 0xFB	; 251
 85c:	80 93 e1 00 	sts	0x00E1, r24

		EVENT_USB_Device_StartOfFrame();
 860:	7f d1       	rcall	.+766    	; 0xb60 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 862:	ff 91       	pop	r31
 864:	ef 91       	pop	r30
 866:	bf 91       	pop	r27
 868:	af 91       	pop	r26
 86a:	9f 91       	pop	r25
 86c:	8f 91       	pop	r24
 86e:	7f 91       	pop	r23
 870:	6f 91       	pop	r22
 872:	5f 91       	pop	r21
 874:	4f 91       	pop	r20
 876:	3f 91       	pop	r19
 878:	2f 91       	pop	r18
 87a:	0f 90       	pop	r0
 87c:	0b be       	out	0x3b, r0	; 59
 87e:	0f 90       	pop	r0
 880:	0f be       	out	0x3f, r0	; 63
 882:	0f 90       	pop	r0
 884:	1f 90       	pop	r1
 886:	18 95       	reti

00000888 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 888:	0f 93       	push	r16
 88a:	1f 93       	push	r17
 88c:	df 93       	push	r29
 88e:	cf 93       	push	r28
 890:	cd b7       	in	r28, 0x3d	; 61
 892:	de b7       	in	r29, 0x3e	; 62
 894:	ac 97       	sbiw	r28, 0x2c	; 44
 896:	0f b6       	in	r0, 0x3f	; 63
 898:	f8 94       	cli
 89a:	de bf       	out	0x3e, r29	; 62
 89c:	0f be       	out	0x3f, r0	; 63
 89e:	cd bf       	out	0x3d, r28	; 61
 8a0:	e6 e6       	ldi	r30, 0x66	; 102
 8a2:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 8a4:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
 8a8:	81 93       	st	Z+, r24

void USB_Device_ProcessControlRequest(void)
{
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 8aa:	21 e0       	ldi	r18, 0x01	; 1
 8ac:	ee 36       	cpi	r30, 0x6E	; 110
 8ae:	f2 07       	cpc	r31, r18
 8b0:	c9 f7       	brne	.-14     	; 0x8a4 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_Byte();

	EVENT_USB_Device_ControlRequest();
 8b2:	4d dd       	rcall	.-1382   	; 0x34e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 8b4:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 8b8:	83 ff       	sbrs	r24, 3
 8ba:	39 c1       	rjmp	.+626    	; 0xb2e <USB_Device_ProcessControlRequest+0x2a6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 8bc:	80 91 66 01 	lds	r24, 0x0166

		switch (USB_ControlRequest.bRequest)
 8c0:	30 91 67 01 	lds	r19, 0x0167
 8c4:	35 30       	cpi	r19, 0x05	; 5
 8c6:	09 f4       	brne	.+2      	; 0x8ca <USB_Device_ProcessControlRequest+0x42>
 8c8:	87 c0       	rjmp	.+270    	; 0x9d8 <USB_Device_ProcessControlRequest+0x150>
 8ca:	36 30       	cpi	r19, 0x06	; 6
 8cc:	40 f4       	brcc	.+16     	; 0x8de <USB_Device_ProcessControlRequest+0x56>
 8ce:	31 30       	cpi	r19, 0x01	; 1
 8d0:	c9 f1       	breq	.+114    	; 0x944 <USB_Device_ProcessControlRequest+0xbc>
 8d2:	31 30       	cpi	r19, 0x01	; 1
 8d4:	70 f0       	brcs	.+28     	; 0x8f2 <USB_Device_ProcessControlRequest+0x6a>
 8d6:	33 30       	cpi	r19, 0x03	; 3
 8d8:	09 f0       	breq	.+2      	; 0x8dc <USB_Device_ProcessControlRequest+0x54>
 8da:	29 c1       	rjmp	.+594    	; 0xb2e <USB_Device_ProcessControlRequest+0x2a6>
 8dc:	33 c0       	rjmp	.+102    	; 0x944 <USB_Device_ProcessControlRequest+0xbc>
 8de:	38 30       	cpi	r19, 0x08	; 8
 8e0:	09 f4       	brne	.+2      	; 0x8e4 <USB_Device_ProcessControlRequest+0x5c>
 8e2:	f7 c0       	rjmp	.+494    	; 0xad2 <USB_Device_ProcessControlRequest+0x24a>
 8e4:	39 30       	cpi	r19, 0x09	; 9
 8e6:	09 f4       	brne	.+2      	; 0x8ea <USB_Device_ProcessControlRequest+0x62>
 8e8:	06 c1       	rjmp	.+524    	; 0xaf6 <USB_Device_ProcessControlRequest+0x26e>
 8ea:	36 30       	cpi	r19, 0x06	; 6
 8ec:	09 f0       	breq	.+2      	; 0x8f0 <USB_Device_ProcessControlRequest+0x68>
 8ee:	1f c1       	rjmp	.+574    	; 0xb2e <USB_Device_ProcessControlRequest+0x2a6>
 8f0:	99 c0       	rjmp	.+306    	; 0xa24 <USB_Device_ProcessControlRequest+0x19c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 8f2:	80 38       	cpi	r24, 0x80	; 128
 8f4:	21 f0       	breq	.+8      	; 0x8fe <USB_Device_ProcessControlRequest+0x76>
 8f6:	82 38       	cpi	r24, 0x82	; 130
 8f8:	09 f0       	breq	.+2      	; 0x8fc <USB_Device_ProcessControlRequest+0x74>
 8fa:	19 c1       	rjmp	.+562    	; 0xb2e <USB_Device_ProcessControlRequest+0x2a6>
 8fc:	08 c0       	rjmp	.+16     	; 0x90e <USB_Device_ProcessControlRequest+0x86>
 8fe:	90 91 61 01 	lds	r25, 0x0161
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
 902:	80 91 62 01 	lds	r24, 0x0162
 906:	88 23       	and	r24, r24
 908:	99 f0       	breq	.+38     	; 0x930 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 90a:	92 60       	ori	r25, 0x02	; 2
 90c:	11 c0       	rjmp	.+34     	; 0x930 <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 90e:	80 91 6a 01 	lds	r24, 0x016A
 912:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 914:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 918:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	25 e0       	ldi	r18, 0x05	; 5
 920:	96 95       	lsr	r25
 922:	87 95       	ror	r24
 924:	2a 95       	dec	r18
 926:	e1 f7       	brne	.-8      	; 0x920 <USB_Device_ProcessControlRequest+0x98>
 928:	98 2f       	mov	r25, r24
 92a:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 92c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 930:	80 91 e8 00 	lds	r24, 0x00E8
 934:	87 7f       	andi	r24, 0xF7	; 247
 936:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
 93a:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Word >> 8);
 93e:	10 92 f1 00 	sts	0x00F1, r1
 942:	d2 c0       	rjmp	.+420    	; 0xae8 <USB_Device_ProcessControlRequest+0x260>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 944:	88 23       	and	r24, r24
 946:	19 f0       	breq	.+6      	; 0x94e <USB_Device_ProcessControlRequest+0xc6>
 948:	82 30       	cpi	r24, 0x02	; 2
 94a:	09 f0       	breq	.+2      	; 0x94e <USB_Device_ProcessControlRequest+0xc6>
 94c:	f0 c0       	rjmp	.+480    	; 0xb2e <USB_Device_ProcessControlRequest+0x2a6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	8f 71       	andi	r24, 0x1F	; 31
 952:	90 70       	andi	r25, 0x00	; 0
 954:	00 97       	sbiw	r24, 0x00	; 0
 956:	21 f0       	breq	.+8      	; 0x960 <USB_Device_ProcessControlRequest+0xd8>
 958:	02 97       	sbiw	r24, 0x02	; 2
 95a:	09 f0       	breq	.+2      	; 0x95e <USB_Device_ProcessControlRequest+0xd6>
 95c:	e8 c0       	rjmp	.+464    	; 0xb2e <USB_Device_ProcessControlRequest+0x2a6>
 95e:	0c c0       	rjmp	.+24     	; 0x978 <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 960:	80 91 68 01 	lds	r24, 0x0168
 964:	81 30       	cpi	r24, 0x01	; 1
 966:	09 f0       	breq	.+2      	; 0x96a <USB_Device_ProcessControlRequest+0xe2>
 968:	e2 c0       	rjmp	.+452    	; 0xb2e <USB_Device_ProcessControlRequest+0x2a6>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 96a:	10 92 62 01 	sts	0x0162, r1
 96e:	33 30       	cpi	r19, 0x03	; 3
 970:	69 f5       	brne	.+90     	; 0x9cc <USB_Device_ProcessControlRequest+0x144>
 972:	80 93 62 01 	sts	0x0162, r24
 976:	2a c0       	rjmp	.+84     	; 0x9cc <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 978:	80 91 68 01 	lds	r24, 0x0168
 97c:	88 23       	and	r24, r24
 97e:	31 f5       	brne	.+76     	; 0x9cc <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 980:	20 91 6a 01 	lds	r18, 0x016A
 984:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 986:	09 f4       	brne	.+2      	; 0x98a <USB_Device_ProcessControlRequest+0x102>
 988:	d2 c0       	rjmp	.+420    	; 0xb2e <USB_Device_ProcessControlRequest+0x2a6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 98a:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 98e:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 992:	80 ff       	sbrs	r24, 0
 994:	1b c0       	rjmp	.+54     	; 0x9cc <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 996:	33 30       	cpi	r19, 0x03	; 3
 998:	21 f4       	brne	.+8      	; 0x9a2 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 99a:	80 91 eb 00 	lds	r24, 0x00EB
 99e:	80 62       	ori	r24, 0x20	; 32
 9a0:	13 c0       	rjmp	.+38     	; 0x9c8 <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 9a2:	80 91 eb 00 	lds	r24, 0x00EB
 9a6:	80 61       	ori	r24, 0x10	; 16
 9a8:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 9ac:	81 e0       	ldi	r24, 0x01	; 1
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <USB_Device_ProcessControlRequest+0x12e>
 9b2:	88 0f       	add	r24, r24
 9b4:	99 1f       	adc	r25, r25
 9b6:	2a 95       	dec	r18
 9b8:	e2 f7       	brpl	.-8      	; 0x9b2 <USB_Device_ProcessControlRequest+0x12a>
 9ba:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 9be:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 9c2:	80 91 eb 00 	lds	r24, 0x00EB
 9c6:	88 60       	ori	r24, 0x08	; 8
 9c8:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9cc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9d0:	80 91 e8 00 	lds	r24, 0x00E8
 9d4:	87 7f       	andi	r24, 0xF7	; 247
 9d6:	8b c0       	rjmp	.+278    	; 0xaee <USB_Device_ProcessControlRequest+0x266>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 9d8:	88 23       	and	r24, r24
 9da:	09 f0       	breq	.+2      	; 0x9de <USB_Device_ProcessControlRequest+0x156>
 9dc:	a8 c0       	rjmp	.+336    	; 0xb2e <USB_Device_ProcessControlRequest+0x2a6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 9de:	10 91 68 01 	lds	r17, 0x0168
 9e2:	1f 77       	andi	r17, 0x7F	; 127

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 9e4:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 9e6:	f8 94       	cli
 9e8:	80 91 e8 00 	lds	r24, 0x00E8
 9ec:	87 7f       	andi	r24, 0xF7	; 247
 9ee:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearSETUP();

		Endpoint_ClearStatusStage();
 9f2:	ce dd       	rcall	.-1124   	; 0x590 <Endpoint_ClearStatusStage>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 9f4:	80 91 e8 00 	lds	r24, 0x00E8

		while (!(Endpoint_IsINReady()));
 9f8:	80 ff       	sbrs	r24, 0
 9fa:	fc cf       	rjmp	.-8      	; 0x9f4 <USB_Device_ProcessControlRequest+0x16c>

		USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 9fc:	11 23       	and	r17, r17
 9fe:	11 f4       	brne	.+4      	; 0xa04 <USB_Device_ProcessControlRequest+0x17c>
 a00:	82 e0       	ldi	r24, 0x02	; 2
 a02:	01 c0       	rjmp	.+2      	; 0xa06 <USB_Device_ProcessControlRequest+0x17e>
 a04:	83 e0       	ldi	r24, 0x03	; 3
 a06:	80 93 65 01 	sts	0x0165, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
 a0a:	80 91 e3 00 	lds	r24, 0x00E3
 a0e:	80 78       	andi	r24, 0x80	; 128
 a10:	18 2b       	or	r17, r24
 a12:	10 93 e3 00 	sts	0x00E3, r17
				UDADDR |= (1 << ADDEN);
 a16:	80 91 e3 00 	lds	r24, 0x00E3
 a1a:	80 68       	ori	r24, 0x80	; 128
 a1c:	80 93 e3 00 	sts	0x00E3, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 a20:	0f bf       	out	0x3f, r16	; 63
    __asm__ volatile ("" ::: "memory");
 a22:	85 c0       	rjmp	.+266    	; 0xb2e <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a24:	80 58       	subi	r24, 0x80	; 128
 a26:	82 30       	cpi	r24, 0x02	; 2
 a28:	08 f0       	brcs	.+2      	; 0xa2c <USB_Device_ProcessControlRequest+0x1a4>
 a2a:	81 c0       	rjmp	.+258    	; 0xb2e <USB_Device_ProcessControlRequest+0x2a6>
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 a2c:	80 91 68 01 	lds	r24, 0x0168
 a30:	90 91 69 01 	lds	r25, 0x0169
 a34:	23 e0       	ldi	r18, 0x03	; 3
 a36:	8c 3d       	cpi	r24, 0xDC	; 220
 a38:	92 07       	cpc	r25, r18
 a3a:	99 f5       	brne	.+102    	; 0xaa2 <USB_Device_ProcessControlRequest+0x21a>
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 a3c:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 a3e:	f8 94       	cli
 a40:	de 01       	movw	r26, r28
 a42:	15 96       	adiw	r26, 0x05	; 5
 a44:	6e e0       	ldi	r22, 0x0E	; 14
 a46:	40 e0       	ldi	r20, 0x00	; 0
 a48:	50 e0       	ldi	r21, 0x00	; 0
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 a4a:	11 e2       	ldi	r17, 0x21	; 33
 a4c:	e6 2f       	mov	r30, r22
 a4e:	f0 e0       	ldi	r31, 0x00	; 0
 a50:	10 93 57 00 	sts	0x0057, r17
 a54:	84 91       	lpm	r24, Z+

			if (SerialCharNum & 0x01)
 a56:	40 ff       	sbrs	r20, 0
 a58:	03 c0       	rjmp	.+6      	; 0xa60 <USB_Device_ProcessControlRequest+0x1d8>
			{
				SerialByte >>= 4;
 a5a:	82 95       	swap	r24
 a5c:	8f 70       	andi	r24, 0x0F	; 15
				SigReadAddress++;
 a5e:	6f 5f       	subi	r22, 0xFF	; 255
			}

			SerialByte &= 0x0F;
 a60:	8f 70       	andi	r24, 0x0F	; 15
 a62:	28 2f       	mov	r18, r24
 a64:	30 e0       	ldi	r19, 0x00	; 0

			SignatureDescriptor.UnicodeString[SerialCharNum] = (SerialByte >= 10) ?
 a66:	8a 30       	cpi	r24, 0x0A	; 10
 a68:	18 f0       	brcs	.+6      	; 0xa70 <USB_Device_ProcessControlRequest+0x1e8>
 a6a:	c9 01       	movw	r24, r18
 a6c:	c7 96       	adiw	r24, 0x37	; 55
 a6e:	02 c0       	rjmp	.+4      	; 0xa74 <USB_Device_ProcessControlRequest+0x1ec>
 a70:	c9 01       	movw	r24, r18
 a72:	c0 96       	adiw	r24, 0x30	; 48
 a74:	8d 93       	st	X+, r24
 a76:	9d 93       	st	X+, r25
 a78:	4f 5f       	subi	r20, 0xFF	; 255
 a7a:	5f 4f       	sbci	r21, 0xFF	; 255

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
 a7c:	44 31       	cpi	r20, 0x14	; 20
 a7e:	51 05       	cpc	r21, r1
 a80:	29 f7       	brne	.-54     	; 0xa4c <USB_Device_ProcessControlRequest+0x1c4>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 a82:	7f bf       	out	0x3f, r23	; 63
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
 a84:	8a e2       	ldi	r24, 0x2A	; 42
 a86:	8b 83       	std	Y+3, r24	; 0x03
	{
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 a88:	83 e0       	ldi	r24, 0x03	; 3
 a8a:	8c 83       	std	Y+4, r24	; 0x04
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a8c:	80 91 e8 00 	lds	r24, 0x00E8
 a90:	87 7f       	andi	r24, 0xF7	; 247
 a92:	80 93 e8 00 	sts	0x00E8, r24
		}
	}

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 a96:	ce 01       	movw	r24, r28
 a98:	03 96       	adiw	r24, 0x03	; 3
 a9a:	6a e2       	ldi	r22, 0x2A	; 42
 a9c:	70 e0       	ldi	r23, 0x00	; 0
 a9e:	61 d0       	rcall	.+194    	; 0xb62 <Endpoint_Write_Control_Stream_LE>
 aa0:	12 c0       	rjmp	.+36     	; 0xac6 <USB_Device_ProcessControlRequest+0x23e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 aa2:	60 91 6a 01 	lds	r22, 0x016A
 aa6:	ae 01       	movw	r20, r28
 aa8:	4f 5f       	subi	r20, 0xFF	; 255
 aaa:	5f 4f       	sbci	r21, 0xFF	; 255
 aac:	30 dd       	rcall	.-1440   	; 0x50e <CALLBACK_USB_GetDescriptor>
 aae:	bc 01       	movw	r22, r24
 ab0:	00 97       	sbiw	r24, 0x00	; 0
 ab2:	09 f4       	brne	.+2      	; 0xab6 <USB_Device_ProcessControlRequest+0x22e>
 ab4:	3c c0       	rjmp	.+120    	; 0xb2e <USB_Device_ProcessControlRequest+0x2a6>
 ab6:	80 91 e8 00 	lds	r24, 0x00E8
 aba:	87 7f       	andi	r24, 0xF7	; 247
 abc:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 ac0:	89 81       	ldd	r24, Y+1	; 0x01
 ac2:	9a 81       	ldd	r25, Y+2	; 0x02
 ac4:	ac d0       	rcall	.+344    	; 0xc1e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 ac6:	80 91 e8 00 	lds	r24, 0x00E8
 aca:	8b 77       	andi	r24, 0x7B	; 123
 acc:	80 93 e8 00 	sts	0x00E8, r24
 ad0:	2e c0       	rjmp	.+92     	; 0xb2e <USB_Device_ProcessControlRequest+0x2a6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 ad2:	80 38       	cpi	r24, 0x80	; 128
 ad4:	61 f5       	brne	.+88     	; 0xb2e <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ad6:	80 91 e8 00 	lds	r24, 0x00E8
 ada:	87 7f       	andi	r24, 0xF7	; 247
 adc:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
 ae0:	80 91 63 01 	lds	r24, 0x0163
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 ae4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ae8:	80 91 e8 00 	lds	r24, 0x00E8
 aec:	8e 77       	andi	r24, 0x7E	; 126
 aee:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 af2:	4e dd       	rcall	.-1380   	; 0x590 <Endpoint_ClearStatusStage>
 af4:	1c c0       	rjmp	.+56     	; 0xb2e <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 af6:	88 23       	and	r24, r24
 af8:	d1 f4       	brne	.+52     	; 0xb2e <USB_Device_ProcessControlRequest+0x2a6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 afa:	90 91 68 01 	lds	r25, 0x0168
 afe:	92 30       	cpi	r25, 0x02	; 2
 b00:	b0 f4       	brcc	.+44     	; 0xb2e <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b02:	80 91 e8 00 	lds	r24, 0x00E8
 b06:	87 7f       	andi	r24, 0xF7	; 247
 b08:	80 93 e8 00 	sts	0x00E8, r24
	}
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 b0c:	90 93 63 01 	sts	0x0163, r25

	Endpoint_ClearStatusStage();
 b10:	3f dd       	rcall	.-1410   	; 0x590 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
 b12:	80 91 63 01 	lds	r24, 0x0163
 b16:	88 23       	and	r24, r24
 b18:	31 f4       	brne	.+12     	; 0xb26 <USB_Device_ProcessControlRequest+0x29e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 b1a:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 b1e:	87 fd       	sbrc	r24, 7
 b20:	02 c0       	rjmp	.+4      	; 0xb26 <USB_Device_ProcessControlRequest+0x29e>
 b22:	81 e0       	ldi	r24, 0x01	; 1
 b24:	01 c0       	rjmp	.+2      	; 0xb28 <USB_Device_ProcessControlRequest+0x2a0>
 b26:	84 e0       	ldi	r24, 0x04	; 4
 b28:	80 93 65 01 	sts	0x0165, r24

	EVENT_USB_Device_ConfigurationChanged();
 b2c:	53 dc       	rcall	.-1882   	; 0x3d4 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b2e:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 b32:	83 ff       	sbrs	r24, 3
 b34:	0a c0       	rjmp	.+20     	; 0xb4a <USB_Device_ProcessControlRequest+0x2c2>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b36:	80 91 eb 00 	lds	r24, 0x00EB
 b3a:	80 62       	ori	r24, 0x20	; 32
 b3c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b40:	80 91 e8 00 	lds	r24, 0x00E8
 b44:	87 7f       	andi	r24, 0xF7	; 247
 b46:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 b4a:	ac 96       	adiw	r28, 0x2c	; 44
 b4c:	0f b6       	in	r0, 0x3f	; 63
 b4e:	f8 94       	cli
 b50:	de bf       	out	0x3e, r29	; 62
 b52:	0f be       	out	0x3f, r0	; 63
 b54:	cd bf       	out	0x3d, r28	; 61
 b56:	cf 91       	pop	r28
 b58:	df 91       	pop	r29
 b5a:	1f 91       	pop	r17
 b5c:	0f 91       	pop	r16
 b5e:	08 95       	ret

00000b60 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 b60:	08 95       	ret

00000b62 <Endpoint_Write_Control_Stream_LE>:
 b62:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 b64:	40 91 6c 01 	lds	r20, 0x016C
 b68:	50 91 6d 01 	lds	r21, 0x016D
 b6c:	46 17       	cp	r20, r22
 b6e:	57 07       	cpc	r21, r23
 b70:	18 f4       	brcc	.+6      	; 0xb78 <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 b72:	f9 01       	movw	r30, r18
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	3d c0       	rjmp	.+122    	; 0xbf2 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 b78:	61 15       	cp	r22, r1
 b7a:	71 05       	cpc	r23, r1
 b7c:	11 f0       	breq	.+4      	; 0xb82 <Endpoint_Write_Control_Stream_LE+0x20>
 b7e:	ab 01       	movw	r20, r22
 b80:	f8 cf       	rjmp	.-16     	; 0xb72 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b82:	80 91 e8 00 	lds	r24, 0x00E8
 b86:	8e 77       	andi	r24, 0x7E	; 126
 b88:	80 93 e8 00 	sts	0x00E8, r24
 b8c:	40 e0       	ldi	r20, 0x00	; 0
 b8e:	50 e0       	ldi	r21, 0x00	; 0
 b90:	f0 cf       	rjmp	.-32     	; 0xb72 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 b92:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 b96:	88 23       	and	r24, r24
 b98:	f1 f1       	breq	.+124    	; 0xc16 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 b9a:	85 30       	cpi	r24, 0x05	; 5
 b9c:	f1 f1       	breq	.+124    	; 0xc1a <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b9e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 ba2:	83 ff       	sbrs	r24, 3
 ba4:	02 c0       	rjmp	.+4      	; 0xbaa <Endpoint_Write_Control_Stream_LE+0x48>
 ba6:	81 e0       	ldi	r24, 0x01	; 1
 ba8:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 baa:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 bae:	82 fd       	sbrc	r24, 2
 bb0:	2c c0       	rjmp	.+88     	; 0xc0a <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 bb2:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 bb6:	80 ff       	sbrs	r24, 0
 bb8:	1c c0       	rjmp	.+56     	; 0xbf2 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 bba:	20 91 f2 00 	lds	r18, 0x00F2
 bbe:	30 91 f3 00 	lds	r19, 0x00F3
 bc2:	07 c0       	rjmp	.+14     	; 0xbd2 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 bc4:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 bc6:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
 bca:	41 50       	subi	r20, 0x01	; 1
 bcc:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 bce:	2f 5f       	subi	r18, 0xFF	; 255
 bd0:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 bd2:	41 15       	cp	r20, r1
 bd4:	51 05       	cpc	r21, r1
 bd6:	19 f0       	breq	.+6      	; 0xbde <Endpoint_Write_Control_Stream_LE+0x7c>
 bd8:	28 30       	cpi	r18, 0x08	; 8
 bda:	31 05       	cpc	r19, r1
 bdc:	98 f3       	brcs	.-26     	; 0xbc4 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 bde:	90 e0       	ldi	r25, 0x00	; 0
 be0:	28 30       	cpi	r18, 0x08	; 8
 be2:	31 05       	cpc	r19, r1
 be4:	09 f4       	brne	.+2      	; 0xbe8 <Endpoint_Write_Control_Stream_LE+0x86>
 be6:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 be8:	80 91 e8 00 	lds	r24, 0x00E8
 bec:	8e 77       	andi	r24, 0x7E	; 126
 bee:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 bf2:	41 15       	cp	r20, r1
 bf4:	51 05       	cpc	r21, r1
 bf6:	69 f6       	brne	.-102    	; 0xb92 <Endpoint_Write_Control_Stream_LE+0x30>
 bf8:	99 23       	and	r25, r25
 bfa:	59 f6       	brne	.-106    	; 0xb92 <Endpoint_Write_Control_Stream_LE+0x30>
 bfc:	06 c0       	rjmp	.+12     	; 0xc0a <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 bfe:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 c02:	88 23       	and	r24, r24
 c04:	41 f0       	breq	.+16     	; 0xc16 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 c06:	85 30       	cpi	r24, 0x05	; 5
 c08:	41 f0       	breq	.+16     	; 0xc1a <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 c0a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 c0e:	82 ff       	sbrs	r24, 2
 c10:	f6 cf       	rjmp	.-20     	; 0xbfe <Endpoint_Write_Control_Stream_LE+0x9c>
 c12:	80 e0       	ldi	r24, 0x00	; 0
 c14:	08 95       	ret
 c16:	82 e0       	ldi	r24, 0x02	; 2
 c18:	08 95       	ret
 c1a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 c1c:	08 95       	ret

00000c1e <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
 c1e:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 c20:	40 91 6c 01 	lds	r20, 0x016C
 c24:	50 91 6d 01 	lds	r21, 0x016D
 c28:	46 17       	cp	r20, r22
 c2a:	57 07       	cpc	r21, r23
 c2c:	10 f4       	brcc	.+4      	; 0xc32 <Endpoint_Write_Control_PStream_LE+0x14>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 c2e:	60 e0       	ldi	r22, 0x00	; 0
 c30:	40 c0       	rjmp	.+128    	; 0xcb2 <Endpoint_Write_Control_PStream_LE+0x94>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 c32:	61 15       	cp	r22, r1
 c34:	71 05       	cpc	r23, r1
 c36:	11 f0       	breq	.+4      	; 0xc3c <Endpoint_Write_Control_PStream_LE+0x1e>
 c38:	ab 01       	movw	r20, r22
 c3a:	f9 cf       	rjmp	.-14     	; 0xc2e <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c3c:	80 91 e8 00 	lds	r24, 0x00E8
 c40:	8e 77       	andi	r24, 0x7E	; 126
 c42:	80 93 e8 00 	sts	0x00E8, r24
 c46:	40 e0       	ldi	r20, 0x00	; 0
 c48:	50 e0       	ldi	r21, 0x00	; 0
 c4a:	f1 cf       	rjmp	.-30     	; 0xc2e <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 c4c:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 c50:	88 23       	and	r24, r24
 c52:	09 f4       	brne	.+2      	; 0xc56 <Endpoint_Write_Control_PStream_LE+0x38>
 c54:	40 c0       	rjmp	.+128    	; 0xcd6 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 c56:	85 30       	cpi	r24, 0x05	; 5
 c58:	09 f4       	brne	.+2      	; 0xc5c <Endpoint_Write_Control_PStream_LE+0x3e>
 c5a:	3f c0       	rjmp	.+126    	; 0xcda <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c5c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 c60:	83 ff       	sbrs	r24, 3
 c62:	02 c0       	rjmp	.+4      	; 0xc68 <Endpoint_Write_Control_PStream_LE+0x4a>
 c64:	81 e0       	ldi	r24, 0x01	; 1
 c66:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 c68:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 c6c:	82 fd       	sbrc	r24, 2
 c6e:	2d c0       	rjmp	.+90     	; 0xcca <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 c70:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 c74:	80 ff       	sbrs	r24, 0
 c76:	1d c0       	rjmp	.+58     	; 0xcb2 <Endpoint_Write_Control_PStream_LE+0x94>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 c78:	80 91 f2 00 	lds	r24, 0x00F2
 c7c:	90 91 f3 00 	lds	r25, 0x00F3
 c80:	09 c0       	rjmp	.+18     	; 0xc94 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 c82:	f9 01       	movw	r30, r18
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 c84:	2f 5f       	subi	r18, 0xFF	; 255
 c86:	3f 4f       	sbci	r19, 0xFF	; 255
 c88:	e4 91       	lpm	r30, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 c8a:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
 c8e:	41 50       	subi	r20, 0x01	; 1
 c90:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 c92:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 c94:	41 15       	cp	r20, r1
 c96:	51 05       	cpc	r21, r1
 c98:	19 f0       	breq	.+6      	; 0xca0 <Endpoint_Write_Control_PStream_LE+0x82>
 c9a:	88 30       	cpi	r24, 0x08	; 8
 c9c:	91 05       	cpc	r25, r1
 c9e:	88 f3       	brcs	.-30     	; 0xc82 <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 ca0:	60 e0       	ldi	r22, 0x00	; 0
 ca2:	08 97       	sbiw	r24, 0x08	; 8
 ca4:	09 f4       	brne	.+2      	; 0xca8 <Endpoint_Write_Control_PStream_LE+0x8a>
 ca6:	61 e0       	ldi	r22, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ca8:	80 91 e8 00 	lds	r24, 0x00E8
 cac:	8e 77       	andi	r24, 0x7E	; 126
 cae:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 cb2:	41 15       	cp	r20, r1
 cb4:	51 05       	cpc	r21, r1
 cb6:	51 f6       	brne	.-108    	; 0xc4c <Endpoint_Write_Control_PStream_LE+0x2e>
 cb8:	66 23       	and	r22, r22
 cba:	41 f6       	brne	.-112    	; 0xc4c <Endpoint_Write_Control_PStream_LE+0x2e>
 cbc:	06 c0       	rjmp	.+12     	; 0xcca <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 cbe:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 cc2:	88 23       	and	r24, r24
 cc4:	41 f0       	breq	.+16     	; 0xcd6 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 cc6:	85 30       	cpi	r24, 0x05	; 5
 cc8:	41 f0       	breq	.+16     	; 0xcda <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 cca:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 cce:	82 ff       	sbrs	r24, 2
 cd0:	f6 cf       	rjmp	.-20     	; 0xcbe <Endpoint_Write_Control_PStream_LE+0xa0>
 cd2:	80 e0       	ldi	r24, 0x00	; 0
 cd4:	08 95       	ret
 cd6:	82 e0       	ldi	r24, 0x02	; 2
 cd8:	08 95       	ret
 cda:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 cdc:	08 95       	ret

00000cde <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
 cde:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
 ce0:	61 15       	cp	r22, r1
 ce2:	71 05       	cpc	r23, r1
 ce4:	29 f4       	brne	.+10     	; 0xcf0 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 ce6:	80 91 e8 00 	lds	r24, 0x00E8
 cea:	8b 77       	andi	r24, 0x7B	; 123
 cec:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 cf0:	f9 01       	movw	r30, r18
 cf2:	22 c0       	rjmp	.+68     	; 0xd38 <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 cf4:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 cf8:	88 23       	and	r24, r24
 cfa:	71 f1       	breq	.+92     	; 0xd58 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 cfc:	85 30       	cpi	r24, 0x05	; 5
 cfe:	71 f1       	breq	.+92     	; 0xd5c <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d00:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 d04:	83 ff       	sbrs	r24, 3
 d06:	02 c0       	rjmp	.+4      	; 0xd0c <Endpoint_Read_Control_Stream_LE+0x2e>
 d08:	81 e0       	ldi	r24, 0x01	; 1
 d0a:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 d0c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 d10:	82 ff       	sbrs	r24, 2
 d12:	f0 cf       	rjmp	.-32     	; 0xcf4 <Endpoint_Read_Control_Stream_LE+0x16>
 d14:	06 c0       	rjmp	.+12     	; 0xd22 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 d16:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 d1a:	81 93       	st	Z+, r24
				Length--;
 d1c:	61 50       	subi	r22, 0x01	; 1
 d1e:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 d20:	31 f0       	breq	.+12     	; 0xd2e <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 d22:	80 91 f2 00 	lds	r24, 0x00F2
 d26:	90 91 f3 00 	lds	r25, 0x00F3
 d2a:	89 2b       	or	r24, r25
 d2c:	a1 f7       	brne	.-24     	; 0xd16 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d2e:	80 91 e8 00 	lds	r24, 0x00E8
 d32:	8b 77       	andi	r24, 0x7B	; 123
 d34:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
 d38:	61 15       	cp	r22, r1
 d3a:	71 05       	cpc	r23, r1
 d3c:	d9 f6       	brne	.-74     	; 0xcf4 <Endpoint_Read_Control_Stream_LE+0x16>
 d3e:	06 c0       	rjmp	.+12     	; 0xd4c <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 d40:	80 91 65 01 	lds	r24, 0x0165

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 d44:	88 23       	and	r24, r24
 d46:	41 f0       	breq	.+16     	; 0xd58 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 d48:	85 30       	cpi	r24, 0x05	; 5
 d4a:	41 f0       	breq	.+16     	; 0xd5c <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 d4c:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
 d50:	80 ff       	sbrs	r24, 0
 d52:	f6 cf       	rjmp	.-20     	; 0xd40 <Endpoint_Read_Control_Stream_LE+0x62>
 d54:	80 e0       	ldi	r24, 0x00	; 0
 d56:	08 95       	ret
 d58:	82 e0       	ldi	r24, 0x02	; 2
 d5a:	08 95       	ret
 d5c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 d5e:	08 95       	ret

00000d60 <Endpoint_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
 d60:	ff 92       	push	r15
 d62:	0f 93       	push	r16
 d64:	1f 93       	push	r17
 d66:	cf 93       	push	r28
 d68:	df 93       	push	r29
 d6a:	18 2f       	mov	r17, r24
 d6c:	09 2f       	mov	r16, r25
 d6e:	eb 01       	movw	r28, r22
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 d70:	30 dc       	rcall	.-1952   	; 0x5d2 <Endpoint_WaitUntilReady>
 d72:	f8 2e       	mov	r15, r24
 d74:	88 23       	and	r24, r24
 d76:	d1 f4       	brne	.+52     	; 0xdac <Endpoint_Read_Stream_LE+0x4c>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 d78:	81 2f       	mov	r24, r17
 d7a:	90 2f       	mov	r25, r16
 d7c:	9c 01       	movw	r18, r24
 d7e:	89 01       	movw	r16, r18
 d80:	13 c0       	rjmp	.+38     	; 0xda8 <Endpoint_Read_Stream_LE+0x48>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d82:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 d86:	85 fd       	sbrc	r24, 5
 d88:	09 c0       	rjmp	.+18     	; 0xd9c <Endpoint_Read_Stream_LE+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d8a:	80 91 e8 00 	lds	r24, 0x00E8
 d8e:	8b 77       	andi	r24, 0x7B	; 123
 d90:	80 93 e8 00 	sts	0x00E8, r24
			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 d94:	1e dc       	rcall	.-1988   	; 0x5d2 <Endpoint_WaitUntilReady>
 d96:	88 23       	and	r24, r24
 d98:	39 f0       	breq	.+14     	; 0xda8 <Endpoint_Read_Stream_LE+0x48>
 d9a:	09 c0       	rjmp	.+18     	; 0xdae <Endpoint_Read_Stream_LE+0x4e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 d9c:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 da0:	f8 01       	movw	r30, r16
 da2:	81 93       	st	Z+, r24
 da4:	8f 01       	movw	r16, r30
			Length--;
 da6:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
 da8:	20 97       	sbiw	r28, 0x00	; 0
 daa:	59 f7       	brne	.-42     	; 0xd82 <Endpoint_Read_Stream_LE+0x22>
 dac:	8f 2d       	mov	r24, r15
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 dae:	df 91       	pop	r29
 db0:	cf 91       	pop	r28
 db2:	1f 91       	pop	r17
 db4:	0f 91       	pop	r16
 db6:	ff 90       	pop	r15
 db8:	08 95       	ret

00000dba <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
 dba:	ff 92       	push	r15
 dbc:	0f 93       	push	r16
 dbe:	1f 93       	push	r17
 dc0:	cf 93       	push	r28
 dc2:	df 93       	push	r29
 dc4:	18 2f       	mov	r17, r24
 dc6:	09 2f       	mov	r16, r25
 dc8:	eb 01       	movw	r28, r22
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 dca:	03 dc       	rcall	.-2042   	; 0x5d2 <Endpoint_WaitUntilReady>
 dcc:	f8 2e       	mov	r15, r24
 dce:	88 23       	and	r24, r24
 dd0:	d1 f4       	brne	.+52     	; 0xe06 <Endpoint_Write_Stream_LE+0x4c>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 dd2:	81 2f       	mov	r24, r17
 dd4:	90 2f       	mov	r25, r16
 dd6:	9c 01       	movw	r18, r24
 dd8:	89 01       	movw	r16, r18
 dda:	13 c0       	rjmp	.+38     	; 0xe02 <Endpoint_Write_Stream_LE+0x48>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 ddc:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 de0:	85 fd       	sbrc	r24, 5
 de2:	09 c0       	rjmp	.+18     	; 0xdf6 <Endpoint_Write_Stream_LE+0x3c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 de4:	80 91 e8 00 	lds	r24, 0x00E8
 de8:	8e 77       	andi	r24, 0x7E	; 126
 dea:	80 93 e8 00 	sts	0x00E8, r24
			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 dee:	f1 db       	rcall	.-2078   	; 0x5d2 <Endpoint_WaitUntilReady>
 df0:	88 23       	and	r24, r24
 df2:	39 f0       	breq	.+14     	; 0xe02 <Endpoint_Write_Stream_LE+0x48>
 df4:	09 c0       	rjmp	.+18     	; 0xe08 <Endpoint_Write_Stream_LE+0x4e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 df6:	f8 01       	movw	r30, r16
 df8:	81 91       	ld	r24, Z+
 dfa:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 dfc:	80 93 f1 00 	sts	0x00F1, r24
			Length--;
 e00:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
 e02:	20 97       	sbiw	r28, 0x00	; 0
 e04:	59 f7       	brne	.-42     	; 0xddc <Endpoint_Write_Stream_LE+0x22>
 e06:	8f 2d       	mov	r24, r15
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 e08:	df 91       	pop	r29
 e0a:	cf 91       	pop	r28
 e0c:	1f 91       	pop	r17
 e0e:	0f 91       	pop	r16
 e10:	ff 90       	pop	r15
 e12:	08 95       	ret

00000e14 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 e14:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 e16:	80 91 65 01 	lds	r24, 0x0165
 e1a:	88 23       	and	r24, r24
 e1c:	61 f0       	breq	.+24     	; 0xe36 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 e1e:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 e22:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e26:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 e2a:	83 ff       	sbrs	r24, 3
 e2c:	01 c0       	rjmp	.+2      	; 0xe30 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 e2e:	2c dd       	rcall	.-1448   	; 0x888 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 e30:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 e32:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 e36:	1f 91       	pop	r17
 e38:	08 95       	ret

00000e3a <_exit>:
 e3a:	f8 94       	cli

00000e3c <__stop_program>:
 e3c:	ff cf       	rjmp	.-2      	; 0xe3c <__stop_program>
