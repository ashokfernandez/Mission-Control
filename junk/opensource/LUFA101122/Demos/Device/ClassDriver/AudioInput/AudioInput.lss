
AudioInput.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000b3a  00000bce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800108  00800108  00000bd6  2**0
                  ALLOC
  3 .stab         00000b1c  00000000  00000000  00000bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002b1  00000000  00000000  000016f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000410  00000000  00000000  000019a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000b29  00000000  00000000  00001db5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000711b  00000000  00000000  000028de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001d76  00000000  00000000  000099f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005806  00000000  00000000  0000b76f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000600  00000000  00000000  00010f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002ef6  00000000  00000000  00011578  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002be8  00000000  00000000  0001446e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004b0  00000000  00000000  00017056  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return Endpoint_IsConfigured();
}

void Endpoint_ClearEndpoints(void)
{
   0:	a9 c0       	rjmp	.+338    	; 0x154 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
   4:	c4 c0       	rjmp	.+392    	; 0x18e <__bad_interrupt>
   6:	00 00       	nop
   8:	c2 c0       	rjmp	.+388    	; 0x18e <__bad_interrupt>
   a:	00 00       	nop
   c:	c0 c0       	rjmp	.+384    	; 0x18e <__bad_interrupt>
   e:	00 00       	nop
  10:	be c0       	rjmp	.+380    	; 0x18e <__bad_interrupt>
  12:	00 00       	nop
  14:	bc c0       	rjmp	.+376    	; 0x18e <__bad_interrupt>
  16:	00 00       	nop
  18:	ba c0       	rjmp	.+372    	; 0x18e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b8 c0       	rjmp	.+368    	; 0x18e <__bad_interrupt>
  1e:	00 00       	nop
  20:	b6 c0       	rjmp	.+364    	; 0x18e <__bad_interrupt>
  22:	00 00       	nop
  24:	b4 c0       	rjmp	.+360    	; 0x18e <__bad_interrupt>
  26:	00 00       	nop
  28:	2e c2       	rjmp	.+1116   	; 0x486 <__vector_10>
  2a:	00 00       	nop
  2c:	b0 c0       	rjmp	.+352    	; 0x18e <__bad_interrupt>
  2e:	00 00       	nop
  30:	ae c0       	rjmp	.+348    	; 0x18e <__bad_interrupt>
  32:	00 00       	nop
  34:	ac c0       	rjmp	.+344    	; 0x18e <__bad_interrupt>
  36:	00 00       	nop
  38:	aa c0       	rjmp	.+340    	; 0x18e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a8 c0       	rjmp	.+336    	; 0x18e <__bad_interrupt>
  3e:	00 00       	nop
  40:	a6 c0       	rjmp	.+332    	; 0x18e <__bad_interrupt>
  42:	00 00       	nop
  44:	a4 c0       	rjmp	.+328    	; 0x18e <__bad_interrupt>
  46:	00 00       	nop
  48:	a2 c0       	rjmp	.+324    	; 0x18e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a0 c0       	rjmp	.+320    	; 0x18e <__bad_interrupt>
  4e:	00 00       	nop
  50:	9e c0       	rjmp	.+316    	; 0x18e <__bad_interrupt>
  52:	00 00       	nop
  54:	9d c0       	rjmp	.+314    	; 0x190 <__vector_21>
  56:	00 00       	nop
  58:	9a c0       	rjmp	.+308    	; 0x18e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	98 c0       	rjmp	.+304    	; 0x18e <__bad_interrupt>
  5e:	00 00       	nop
  60:	96 c0       	rjmp	.+300    	; 0x18e <__bad_interrupt>
  62:	00 00       	nop
  64:	94 c0       	rjmp	.+296    	; 0x18e <__bad_interrupt>
  66:	00 00       	nop
  68:	92 c0       	rjmp	.+292    	; 0x18e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	90 c0       	rjmp	.+288    	; 0x18e <__bad_interrupt>
  6e:	00 00       	nop
  70:	8e c0       	rjmp	.+284    	; 0x18e <__bad_interrupt>
  72:	00 00       	nop
  74:	8c c0       	rjmp	.+280    	; 0x18e <__bad_interrupt>
  76:	00 00       	nop
  78:	8a c0       	rjmp	.+276    	; 0x18e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	88 c0       	rjmp	.+272    	; 0x18e <__bad_interrupt>
  7e:	00 00       	nop
  80:	86 c0       	rjmp	.+268    	; 0x18e <__bad_interrupt>
  82:	00 00       	nop
  84:	84 c0       	rjmp	.+264    	; 0x18e <__bad_interrupt>
  86:	00 00       	nop
  88:	82 c0       	rjmp	.+260    	; 0x18e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	80 c0       	rjmp	.+256    	; 0x18e <__bad_interrupt>
  8e:	00 00       	nop
  90:	7e c0       	rjmp	.+252    	; 0x18e <__bad_interrupt>
  92:	00 00       	nop
  94:	7c c0       	rjmp	.+248    	; 0x18e <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 00 02 00 00 00 08 eb 03 47 20 01 00 01 02     ..........G ....
  a8:	00 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 64 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..d.....2.......
  ba:	00 00 09 24 01 00 01 1e 00 01 01 0c 24 02 01 01     ...$........$...
  ca:	02 00 01 00 00 00 00 09 24 03 02 01 01 00 01 00     ........$.......
  da:	09 04 01 00 00 01 02 00 00 09 04 01 01 01 01 02     ................
  ea:	00 00 07 24 01 02 01 01 00 0b 24 02 01 01 02 10     ...$......$.....
  fa:	01 80 bb 00 09 05 81 0d 00 01 01 00 00 07 25 01     ..............%.
 10a:	00 00 00 00                                         ....

0000010e <LanguageString>:
 10e:	04 03 09 04                                         ....

00000112 <ManufacturerString>:
 112:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
 122:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000012c <ProductString>:
 12c:	26 03 4c 00 55 00 46 00 41 00 20 00 41 00 75 00     &.L.U.F.A. .A.u.
 13c:	64 00 69 00 6f 00 20 00 49 00 6e 00 20 00 44 00     d.i.o. .I.n. .D.
 14c:	65 00 6d 00 6f 00 00 00                             e.m.o...

00000154 <__ctors_end>:
 154:	11 24       	eor	r1, r1
 156:	1f be       	out	0x3f, r1	; 63
 158:	cf ef       	ldi	r28, 0xFF	; 255
 15a:	d0 e2       	ldi	r29, 0x20	; 32
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	cd bf       	out	0x3d, r28	; 61

00000160 <__do_copy_data>:
 160:	11 e0       	ldi	r17, 0x01	; 1
 162:	a0 e0       	ldi	r26, 0x00	; 0
 164:	b1 e0       	ldi	r27, 0x01	; 1
 166:	ea e3       	ldi	r30, 0x3A	; 58
 168:	fb e0       	ldi	r31, 0x0B	; 11
 16a:	00 e0       	ldi	r16, 0x00	; 0
 16c:	0b bf       	out	0x3b, r16	; 59
 16e:	02 c0       	rjmp	.+4      	; 0x174 <__do_copy_data+0x14>
 170:	07 90       	elpm	r0, Z+
 172:	0d 92       	st	X+, r0
 174:	a8 30       	cpi	r26, 0x08	; 8
 176:	b1 07       	cpc	r27, r17
 178:	d9 f7       	brne	.-10     	; 0x170 <__do_copy_data+0x10>

0000017a <__do_clear_bss>:
 17a:	11 e0       	ldi	r17, 0x01	; 1
 17c:	a8 e0       	ldi	r26, 0x08	; 8
 17e:	b1 e0       	ldi	r27, 0x01	; 1
 180:	01 c0       	rjmp	.+2      	; 0x184 <.do_clear_bss_start>

00000182 <.do_clear_bss_loop>:
 182:	1d 92       	st	X+, r1

00000184 <.do_clear_bss_start>:
 184:	a8 31       	cpi	r26, 0x18	; 24
 186:	b1 07       	cpc	r27, r17
 188:	e1 f7       	brne	.-8      	; 0x182 <.do_clear_bss_loop>
 18a:	b0 d0       	rcall	.+352    	; 0x2ec <main>
 18c:	d4 c4       	rjmp	.+2472   	; 0xb36 <_exit>

0000018e <__bad_interrupt>:
 18e:	38 cf       	rjmp	.-400    	; 0x0 <__vectors>

00000190 <__vector_21>:
	ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | MIC_IN_ADC_MUX_MASK);
}

/** ISR to handle the reloading of the data endpoint with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	4f 93       	push	r20
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 1a4:	40 91 e9 00 	lds	r20, 0x00E9
			 */
			static inline bool Audio_Device_IsReadyForNextSample(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
			                                                     ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
			static inline bool Audio_Device_IsReadyForNextSample(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
			{
				if ((USB_DeviceState != DEVICE_STATE_Configured) || !(AudioInterfaceInfo->State.InterfaceEnabled))
 1a8:	80 91 0f 01 	lds	r24, 0x010F
 1ac:	84 30       	cpi	r24, 0x04	; 4
 1ae:	d1 f5       	brne	.+116    	; 0x224 <__vector_21+0x94>
 1b0:	80 91 07 01 	lds	r24, 0x0107
 1b4:	88 23       	and	r24, r24
 1b6:	b1 f1       	breq	.+108    	; 0x224 <__vector_21+0x94>
				  return false;

				Endpoint_SelectEndpoint(AudioInterfaceInfo->Config.DataINEndpointNumber);
 1b8:	80 91 01 01 	lds	r24, 0x0101
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 1bc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 1c0:	80 91 e8 00 	lds	r24, 0x00E8
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	/* Check if the sample reload timer period has elapsed, and that the USB bus is ready for a new sample */
	if (Audio_Device_IsReadyForNextSample(&Microphone_Audio_Interface))
 1c4:	80 ff       	sbrs	r24, 0
 1c6:	2e c0       	rjmp	.+92     	; 0x224 <__vector_21+0x94>
		#if defined(USE_TEST_TONE)
			static uint8_t SquareWaveSampleCount;
			static int16_t CurrentWaveValue;
			
			/* In test tone mode, generate a square wave at 1/256 of the sample rate */
			if (SquareWaveSampleCount++ == 0xFF)
 1c8:	80 91 0a 01 	lds	r24, 0x010A
 1cc:	8f 5f       	subi	r24, 0xFF	; 255
 1ce:	80 93 0a 01 	sts	0x010A, r24
 1d2:	81 50       	subi	r24, 0x01	; 1
 1d4:	50 f4       	brcc	.+20     	; 0x1ea <__vector_21+0x5a>
			  CurrentWaveValue ^= 0x8000;
 1d6:	80 91 08 01 	lds	r24, 0x0108
 1da:	90 91 09 01 	lds	r25, 0x0109
 1de:	80 50       	subi	r24, 0x00	; 0
 1e0:	90 48       	sbci	r25, 0x80	; 128
 1e2:	90 93 09 01 	sts	0x0109, r25
 1e6:	80 93 08 01 	sts	0x0108, r24
			
			/* Only generate audio if the board button is being pressed */
			AudioSample = (Buttons_GetStatus() & BUTTONS_BUTTON1) ? CurrentWaveValue : 0;
 1ea:	62 9b       	sbis	0x0c, 2	; 12
 1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <__vector_21+0x64>
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	04 c0       	rjmp	.+8      	; 0x1fc <__vector_21+0x6c>
 1f4:	80 91 08 01 	lds	r24, 0x0108
 1f8:	90 91 09 01 	lds	r25, 0x0109
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
 1fc:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Word >> 8);
 200:	90 93 f1 00 	sts	0x00F1, r25
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 204:	20 91 f2 00 	lds	r18, 0x00F2
 208:	30 91 f3 00 	lds	r19, 0x00F3
			static inline void Audio_Device_WriteSample16(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo,
			                                              const int16_t Sample)
			{
				Endpoint_Write_Word_LE(Sample);

				if (Endpoint_BytesInEndpoint() == AudioInterfaceInfo->Config.DataINEndpointSize)
 20c:	80 91 02 01 	lds	r24, 0x0102
 210:	90 91 03 01 	lds	r25, 0x0103
 214:	28 17       	cp	r18, r24
 216:	39 07       	cpc	r19, r25
 218:	29 f4       	brne	.+10     	; 0x224 <__vector_21+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 21a:	80 91 e8 00 	lds	r24, 0x00E8
 21e:	8e 77       	andi	r24, 0x7E	; 126
 220:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 224:	47 70       	andi	r20, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 226:	40 93 e9 00 	sts	0x00E9, r20
		
		Audio_Device_WriteSample16(&Microphone_Audio_Interface, AudioSample);
	}

	Endpoint_SelectEndpoint(PrevEndpoint);
}
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	4f 91       	pop	r20
 230:	3f 91       	pop	r19
 232:	2f 91       	pop	r18
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 23e:	8b b1       	in	r24, 0x0b	; 11
 240:	8f 70       	andi	r24, 0x0F	; 15
 242:	80 6a       	ori	r24, 0xA0	; 160
 244:	8b b9       	out	0x0b, r24	; 11
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
 246:	92 e0       	ldi	r25, 0x02	; 2
 248:	90 93 6e 00 	sts	0x006E, r25
	OCR0A   = ((F_CPU / 8 / AUDIO_SAMPLE_FREQUENCY) - 1);
 24c:	83 e1       	ldi	r24, 0x13	; 19
 24e:	87 bd       	out	0x27, r24	; 39
	TCCR0A  = (1 << WGM01);  // CTC mode
 250:	94 bd       	out	0x24, r25	; 36
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed
 252:	95 bd       	out	0x25, r25	; 37
}
 254:	08 95       	ret

00000256 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	/* Stop the sample reload timer */
	TCCR0B = 0;
 256:	15 bc       	out	0x25, r1	; 37
 258:	8b b1       	in	r24, 0x0b	; 11
 25a:	8f 70       	andi	r24, 0x0F	; 15
 25c:	80 61       	ori	r24, 0x10	; 16
 25e:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 260:	08 95       	ret

00000262 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	Audio_Device_ProcessControlRequest(&Microphone_Audio_Interface);
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	91 e0       	ldi	r25, 0x01	; 1
}
 266:	40 c4       	rjmp	.+2176   	; 0xae8 <Audio_Device_ProcessControlRequest>

00000268 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= Audio_Device_ConfigureEndpoints(&Microphone_Audio_Interface);
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	10 d4       	rcall	.+2080   	; 0xa8e <Audio_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 26e:	80 fd       	sbrc	r24, 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <EVENT_USB_Device_ConfigurationChanged+0xe>
 272:	90 e9       	ldi	r25, 0x90	; 144
 274:	01 c0       	rjmp	.+2      	; 0x278 <EVENT_USB_Device_ConfigurationChanged+0x10>
 276:	90 e6       	ldi	r25, 0x60	; 96
 278:	8b b1       	in	r24, 0x0b	; 11
 27a:	8f 70       	andi	r24, 0x0F	; 15
 27c:	98 2b       	or	r25, r24
 27e:	9b b9       	out	0x0b, r25	; 11
}
 280:	08 95       	ret

00000282 <SetupHardware>:
	}
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 286:	84 b7       	in	r24, 0x34	; 52
 288:	87 7f       	andi	r24, 0xF7	; 247
 28a:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 28c:	88 e1       	ldi	r24, 0x18	; 24
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	f8 94       	cli
 292:	80 93 60 00 	sts	0x0060, r24
 296:	10 92 60 00 	sts	0x0060, r1
 29a:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	20 e8       	ldi	r18, 0x80	; 128
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	f8 94       	cli
 2a6:	20 93 61 00 	sts	0x0061, r18
 2aa:	80 93 61 00 	sts	0x0061, r24
 2ae:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 2b0:	8a b1       	in	r24, 0x0a	; 10
 2b2:	80 6f       	ori	r24, 0xF0	; 240
 2b4:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 2b6:	8b b1       	in	r24, 0x0b	; 11
 2b8:	8f 70       	andi	r24, 0x0F	; 15
 2ba:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 2bc:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 2be:	72 9a       	sbi	0x0e, 2	; 14
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
 2c0:	0a e7       	ldi	r16, 0x7A	; 122
 2c2:	10 e0       	ldi	r17, 0x00	; 0
 2c4:	85 ea       	ldi	r24, 0xA5	; 165
 2c6:	f8 01       	movw	r30, r16
 2c8:	80 83       	st	Z, r24
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__) || \
					 defined(__AVR_ATmega32U6__))
				DDRF  &= ~(1 << ChannelIndex);
 2ca:	82 98       	cbi	0x10, 2	; 16
				DIDR0 |=  (1 << ChannelIndex);
 2cc:	ee e7       	ldi	r30, 0x7E	; 126
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	84 60       	ori	r24, 0x04	; 4
 2d4:	80 83       	st	Z, r24
	/* Hardware Initialization */
	LEDs_Init();
	Buttons_Init();
	ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_32);
	ADC_SetupChannel(MIC_IN_ADC_CHANNEL);
	USB_Init();
 2d6:	c1 d0       	rcall	.+386    	; 0x45a <USB_Init>
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
 2d8:	82 e4       	ldi	r24, 0x42	; 66
 2da:	80 93 7c 00 	sts	0x007C, r24
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
				#endif

				ADCSRA |= (1 << ADSC);
 2de:	f8 01       	movw	r30, r16
 2e0:	80 81       	ld	r24, Z
 2e2:	80 64       	ori	r24, 0x40	; 64
 2e4:	80 83       	st	Z, r24

	/* Start the ADC conversion in free running mode */
	ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | MIC_IN_ADC_MUX_MASK);
}
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	08 95       	ret

000002ec <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 2ec:	ca df       	rcall	.-108    	; 0x282 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 2ee:	8b b1       	in	r24, 0x0b	; 11
 2f0:	8f 70       	andi	r24, 0x0F	; 15
 2f2:	80 61       	ori	r24, 0x10	; 16
 2f4:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
 2f6:	78 94       	sei

	for (;;)
	{
		Audio_Device_USBTask(&Microphone_Audio_Interface);
		USB_USBTask();
 2f8:	b7 d3       	rcall	.+1902   	; 0xa68 <USB_USBTask>
 2fa:	fe cf       	rjmp	.-4      	; 0x2f8 <main+0xc>

000002fc <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 2fc:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 2fe:	92 30       	cpi	r25, 0x02	; 2
 300:	49 f0       	breq	.+18     	; 0x314 <CALLBACK_USB_GetDescriptor+0x18>
 302:	93 30       	cpi	r25, 0x03	; 3
 304:	61 f0       	breq	.+24     	; 0x31e <CALLBACK_USB_GetDescriptor+0x22>
 306:	91 30       	cpi	r25, 0x01	; 1
 308:	f9 f4       	brne	.+62     	; 0x348 <CALLBACK_USB_GetDescriptor+0x4c>
 30a:	e8 e9       	ldi	r30, 0x98	; 152
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	22 e1       	ldi	r18, 0x12	; 18
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	1e c0       	rjmp	.+60     	; 0x350 <CALLBACK_USB_GetDescriptor+0x54>
 314:	ea ea       	ldi	r30, 0xAA	; 170
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	24 e6       	ldi	r18, 0x64	; 100
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	19 c0       	rjmp	.+50     	; 0x350 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	49 f0       	breq	.+18     	; 0x334 <CALLBACK_USB_GetDescriptor+0x38>
 322:	81 30       	cpi	r24, 0x01	; 1
 324:	18 f0       	brcs	.+6      	; 0x32c <CALLBACK_USB_GetDescriptor+0x30>
 326:	82 30       	cpi	r24, 0x02	; 2
 328:	79 f4       	brne	.+30     	; 0x348 <CALLBACK_USB_GetDescriptor+0x4c>
 32a:	08 c0       	rjmp	.+16     	; 0x33c <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 32c:	ee e0       	ldi	r30, 0x0E	; 14
 32e:	f1 e0       	ldi	r31, 0x01	; 1
 330:	84 91       	lpm	r24, Z+
 332:	07 c0       	rjmp	.+14     	; 0x342 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 334:	e2 e1       	ldi	r30, 0x12	; 18
 336:	f1 e0       	ldi	r31, 0x01	; 1
 338:	84 91       	lpm	r24, Z+
 33a:	03 c0       	rjmp	.+6      	; 0x342 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 33c:	ec e2       	ldi	r30, 0x2C	; 44
 33e:	f1 e0       	ldi	r31, 0x01	; 1
 340:	84 91       	lpm	r24, Z+
 342:	28 2f       	mov	r18, r24
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	04 c0       	rjmp	.+8      	; 0x350 <CALLBACK_USB_GetDescriptor+0x54>
 348:	e0 e0       	ldi	r30, 0x00	; 0
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	20 e0       	ldi	r18, 0x00	; 0
 34e:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 350:	ed 93       	st	X+, r30
 352:	fc 93       	st	X, r31
	return Size;
}
 354:	c9 01       	movw	r24, r18
 356:	08 95       	ret

00000358 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 358:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 35c:	80 91 eb 00 	lds	r24, 0x00EB
 360:	81 60       	ori	r24, 0x01	; 1
 362:	80 93 eb 00 	sts	0x00EB, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
 366:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
 36a:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
 36e:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 372:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
 376:	88 1f       	adc	r24, r24
 378:	88 27       	eor	r24, r24
 37a:	88 1f       	adc	r24, r24
 37c:	08 95       	ret

0000037e <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 37e:	80 91 10 01 	lds	r24, 0x0110
 382:	88 23       	and	r24, r24
 384:	9c f4       	brge	.+38     	; 0x3ac <Endpoint_ClearStatusStage+0x2e>
 386:	04 c0       	rjmp	.+8      	; 0x390 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 388:	80 91 0f 01 	lds	r24, 0x010F
 38c:	88 23       	and	r24, r24
 38e:	b9 f0       	breq	.+46     	; 0x3be <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 390:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 394:	82 ff       	sbrs	r24, 2
 396:	f8 cf       	rjmp	.-16     	; 0x388 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 398:	80 91 e8 00 	lds	r24, 0x00E8
 39c:	8b 77       	andi	r24, 0x7B	; 123
 39e:	80 93 e8 00 	sts	0x00E8, r24
 3a2:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 3a4:	80 91 0f 01 	lds	r24, 0x010F
 3a8:	88 23       	and	r24, r24
 3aa:	49 f0       	breq	.+18     	; 0x3be <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 3ac:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 3b0:	80 ff       	sbrs	r24, 0
 3b2:	f8 cf       	rjmp	.-16     	; 0x3a4 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3b4:	80 91 e8 00 	lds	r24, 0x00E8
 3b8:	8e 77       	andi	r24, 0x7E	; 126
 3ba:	80 93 e8 00 	sts	0x00E8, r24
 3be:	08 95       	ret

000003c0 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 3c0:	55 d0       	rcall	.+170    	; 0x46c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 3c2:	5c d0       	rcall	.+184    	; 0x47c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 3c4:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
 3c8:	98 2f       	mov	r25, r24
 3ca:	9f 77       	andi	r25, 0x7F	; 127
 3cc:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
 3d0:	80 68       	ori	r24, 0x80	; 128
 3d2:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 3d6:	8c e0       	ldi	r24, 0x0C	; 12
 3d8:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 3da:	89 b5       	in	r24, 0x29	; 41
 3dc:	82 60       	ori	r24, 0x02	; 2
 3de:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
 3e0:	09 b4       	in	r0, 0x29	; 41
 3e2:	00 fe       	sbrs	r0, 0
 3e4:	fd cf       	rjmp	.-6      	; 0x3e0 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 3e6:	80 91 d8 00 	lds	r24, 0x00D8
 3ea:	8f 7d       	andi	r24, 0xDF	; 223
 3ec:	80 93 d8 00 	sts	0x00D8, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 3f0:	80 91 d7 00 	lds	r24, 0x00D7
 3f4:	80 68       	ori	r24, 0x80	; 128
 3f6:	80 93 d7 00 	sts	0x00D7, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
 3fa:	10 92 0f 01 	sts	0x010F, r1
	USB_ConfigurationNumber  = 0;
 3fe:	10 92 0d 01 	sts	0x010D, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
 402:	10 92 0c 01 	sts	0x010C, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
 406:	10 92 0b 01 	sts	0x010B, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 40a:	80 91 e0 00 	lds	r24, 0x00E0
 40e:	8b 7f       	andi	r24, 0xFB	; 251
 410:	80 93 e0 00 	sts	0x00E0, r24
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  USB_Device_SetLowSpeed();
	else
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUS);
 414:	80 91 d8 00 	lds	r24, 0x00D8
 418:	81 60       	ori	r24, 0x01	; 1
 41a:	80 93 d8 00 	sts	0x00D8, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	42 e0       	ldi	r20, 0x02	; 2
 424:	99 df       	rcall	.-206    	; 0x358 <Endpoint_ConfigureEndpoint_Prv>

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
							   ENDPOINT_BANK_SINGLE);

	USB_INT_Clear(USB_INT_SUSPI);
 426:	80 91 e1 00 	lds	r24, 0x00E1
 42a:	8e 7f       	andi	r24, 0xFE	; 254
 42c:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPI);
 430:	80 91 e2 00 	lds	r24, 0x00E2
 434:	81 60       	ori	r24, 0x01	; 1
 436:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Enable(USB_INT_EORSTI);
 43a:	80 91 e2 00 	lds	r24, 0x00E2
 43e:	88 60       	ori	r24, 0x08	; 8
 440:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 444:	80 91 e0 00 	lds	r24, 0x00E0
 448:	8e 7f       	andi	r24, 0xFE	; 254
 44a:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 44e:	80 91 d8 00 	lds	r24, 0x00D8
 452:	80 61       	ori	r24, 0x10	; 16
 454:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 458:	08 95       	ret

0000045a <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 45a:	e7 ed       	ldi	r30, 0xD7	; 215
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	80 81       	ld	r24, Z
 460:	81 60       	ori	r24, 0x01	; 1
 462:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	80 93 0e 01 	sts	0x010E, r24

	USB_ResetInterface();
}
 46a:	aa cf       	rjmp	.-172    	; 0x3c0 <USB_ResetInterface>

0000046c <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 46c:	e8 ed       	ldi	r30, 0xD8	; 216
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	8c 7f       	andi	r24, 0xFC	; 252
 474:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 476:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 47a:	08 95       	ret

0000047c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
 47c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
 480:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 484:	08 95       	ret

00000486 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 486:	1f 92       	push	r1
 488:	0f 92       	push	r0
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	0f 92       	push	r0
 48e:	0b b6       	in	r0, 0x3b	; 59
 490:	0f 92       	push	r0
 492:	11 24       	eor	r1, r1
 494:	2f 93       	push	r18
 496:	3f 93       	push	r19
 498:	4f 93       	push	r20
 49a:	5f 93       	push	r21
 49c:	6f 93       	push	r22
 49e:	7f 93       	push	r23
 4a0:	8f 93       	push	r24
 4a2:	9f 93       	push	r25
 4a4:	af 93       	push	r26
 4a6:	bf 93       	push	r27
 4a8:	ef 93       	push	r30
 4aa:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
 4ac:	80 91 da 00 	lds	r24, 0x00DA
 4b0:	80 ff       	sbrs	r24, 0
 4b2:	15 c0       	rjmp	.+42     	; 0x4de <__vector_10+0x58>
 4b4:	80 91 d8 00 	lds	r24, 0x00D8
 4b8:	80 ff       	sbrs	r24, 0
 4ba:	11 c0       	rjmp	.+34     	; 0x4de <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_VBUS);
 4bc:	80 91 da 00 	lds	r24, 0x00DA
 4c0:	8e 7f       	andi	r24, 0xFE	; 254
 4c2:	80 93 da 00 	sts	0x00DA, r24
				 *  \note This function is not available on some AVR models which do not support hardware VBUS monitoring.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 4c6:	80 91 d9 00 	lds	r24, 0x00D9

		if (USB_VBUS_GetStatus())
 4ca:	80 ff       	sbrs	r24, 0
 4cc:	05 c0       	rjmp	.+10     	; 0x4d8 <__vector_10+0x52>
		{
			USB_DeviceState = DEVICE_STATE_Powered;
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	80 93 0f 01 	sts	0x010F, r24
			EVENT_USB_Device_Connect();
 4d4:	b4 de       	rcall	.-664    	; 0x23e <EVENT_USB_Device_Connect>
 4d6:	03 c0       	rjmp	.+6      	; 0x4de <__vector_10+0x58>
		}
		else
		{
			USB_DeviceState = DEVICE_STATE_Unattached;
 4d8:	10 92 0f 01 	sts	0x010F, r1
			EVENT_USB_Device_Disconnect();
 4dc:	bc de       	rcall	.-648    	; 0x256 <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 4de:	80 91 e1 00 	lds	r24, 0x00E1
 4e2:	80 ff       	sbrs	r24, 0
 4e4:	1d c0       	rjmp	.+58     	; 0x520 <__vector_10+0x9a>
 4e6:	80 91 e2 00 	lds	r24, 0x00E2
 4ea:	80 ff       	sbrs	r24, 0
 4ec:	19 c0       	rjmp	.+50     	; 0x520 <__vector_10+0x9a>
	{
		USB_INT_Clear(USB_INT_SUSPI);
 4ee:	80 91 e1 00 	lds	r24, 0x00E1
 4f2:	8e 7f       	andi	r24, 0xFE	; 254
 4f4:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPI);
 4f8:	80 91 e2 00 	lds	r24, 0x00E2
 4fc:	8e 7f       	andi	r24, 0xFE	; 254
 4fe:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
 502:	80 91 e2 00 	lds	r24, 0x00E2
 506:	80 61       	ori	r24, 0x10	; 16
 508:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 50c:	80 91 d8 00 	lds	r24, 0x00D8
 510:	80 62       	ori	r24, 0x20	; 32
 512:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 516:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 518:	85 e0       	ldi	r24, 0x05	; 5
 51a:	80 93 0f 01 	sts	0x010F, r24
		EVENT_USB_Device_Suspend();
 51e:	e5 d1       	rcall	.+970    	; 0x8ea <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 520:	80 91 e1 00 	lds	r24, 0x00E1
 524:	84 ff       	sbrs	r24, 4
 526:	2e c0       	rjmp	.+92     	; 0x584 <__vector_10+0xfe>
 528:	80 91 e2 00 	lds	r24, 0x00E2
 52c:	84 ff       	sbrs	r24, 4
 52e:	2a c0       	rjmp	.+84     	; 0x584 <__vector_10+0xfe>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 530:	8c e0       	ldi	r24, 0x0C	; 12
 532:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 534:	89 b5       	in	r24, 0x29	; 41
 536:	82 60       	ori	r24, 0x02	; 2
 538:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 53a:	09 b4       	in	r0, 0x29	; 41
 53c:	00 fe       	sbrs	r0, 0
 53e:	fd cf       	rjmp	.-6      	; 0x53a <__vector_10+0xb4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 540:	80 91 d8 00 	lds	r24, 0x00D8
 544:	8f 7d       	andi	r24, 0xDF	; 223
 546:	80 93 d8 00 	sts	0x00D8, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUPI);
 54a:	80 91 e1 00 	lds	r24, 0x00E1
 54e:	8f 7e       	andi	r24, 0xEF	; 239
 550:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUPI);
 554:	80 91 e2 00 	lds	r24, 0x00E2
 558:	8f 7e       	andi	r24, 0xEF	; 239
 55a:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPI);
 55e:	80 91 e2 00 	lds	r24, 0x00E2
 562:	81 60       	ori	r24, 0x01	; 1
 564:	80 93 e2 00 	sts	0x00E2, r24

		if (USB_ConfigurationNumber)
 568:	80 91 0d 01 	lds	r24, 0x010D
 56c:	88 23       	and	r24, r24
 56e:	31 f4       	brne	.+12     	; 0x57c <__vector_10+0xf6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 570:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 574:	87 fd       	sbrc	r24, 7
 576:	02 c0       	rjmp	.+4      	; 0x57c <__vector_10+0xf6>
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	01 c0       	rjmp	.+2      	; 0x57e <__vector_10+0xf8>
 57c:	84 e0       	ldi	r24, 0x04	; 4
 57e:	80 93 0f 01 	sts	0x010F, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 582:	b3 d1       	rcall	.+870    	; 0x8ea <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 584:	80 91 e1 00 	lds	r24, 0x00E1
 588:	83 ff       	sbrs	r24, 3
 58a:	22 c0       	rjmp	.+68     	; 0x5d0 <__vector_10+0x14a>
 58c:	80 91 e2 00 	lds	r24, 0x00E2
 590:	83 ff       	sbrs	r24, 3
 592:	1e c0       	rjmp	.+60     	; 0x5d0 <__vector_10+0x14a>
	{
		USB_INT_Clear(USB_INT_EORSTI);
 594:	80 91 e1 00 	lds	r24, 0x00E1
 598:	87 7f       	andi	r24, 0xF7	; 247
 59a:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
 59e:	82 e0       	ldi	r24, 0x02	; 2
 5a0:	80 93 0f 01 	sts	0x010F, r24
		USB_ConfigurationNumber = 0;
 5a4:	10 92 0d 01 	sts	0x010D, r1

		USB_INT_Clear(USB_INT_SUSPI);
 5a8:	80 91 e1 00 	lds	r24, 0x00E1
 5ac:	8e 7f       	andi	r24, 0xFE	; 254
 5ae:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPI);
 5b2:	80 91 e2 00 	lds	r24, 0x00E2
 5b6:	8e 7f       	andi	r24, 0xFE	; 254
 5b8:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
 5bc:	80 91 e2 00 	lds	r24, 0x00E2
 5c0:	80 61       	ori	r24, 0x10	; 16
 5c2:	80 93 e2 00 	sts	0x00E2, r24
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	60 e0       	ldi	r22, 0x00	; 0
 5ca:	42 e0       	ldi	r20, 0x02	; 2
 5cc:	c5 de       	rcall	.-630    	; 0x358 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 5ce:	8d d1       	rcall	.+794    	; 0x8ea <USB_Event_Stub>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 5d0:	80 91 e1 00 	lds	r24, 0x00E1
 5d4:	82 ff       	sbrs	r24, 2
 5d6:	0a c0       	rjmp	.+20     	; 0x5ec <__vector_10+0x166>
 5d8:	80 91 e2 00 	lds	r24, 0x00E2
 5dc:	82 ff       	sbrs	r24, 2
 5de:	06 c0       	rjmp	.+12     	; 0x5ec <__vector_10+0x166>
	{
		USB_INT_Clear(USB_INT_SOFI);
 5e0:	80 91 e1 00 	lds	r24, 0x00E1
 5e4:	8b 7f       	andi	r24, 0xFB	; 251
 5e6:	80 93 e1 00 	sts	0x00E1, r24

		EVENT_USB_Device_StartOfFrame();
 5ea:	7f d1       	rcall	.+766    	; 0x8ea <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 5ec:	ff 91       	pop	r31
 5ee:	ef 91       	pop	r30
 5f0:	bf 91       	pop	r27
 5f2:	af 91       	pop	r26
 5f4:	9f 91       	pop	r25
 5f6:	8f 91       	pop	r24
 5f8:	7f 91       	pop	r23
 5fa:	6f 91       	pop	r22
 5fc:	5f 91       	pop	r21
 5fe:	4f 91       	pop	r20
 600:	3f 91       	pop	r19
 602:	2f 91       	pop	r18
 604:	0f 90       	pop	r0
 606:	0b be       	out	0x3b, r0	; 59
 608:	0f 90       	pop	r0
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	0f 90       	pop	r0
 60e:	1f 90       	pop	r1
 610:	18 95       	reti

00000612 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 612:	0f 93       	push	r16
 614:	1f 93       	push	r17
 616:	df 93       	push	r29
 618:	cf 93       	push	r28
 61a:	cd b7       	in	r28, 0x3d	; 61
 61c:	de b7       	in	r29, 0x3e	; 62
 61e:	ac 97       	sbiw	r28, 0x2c	; 44
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	f8 94       	cli
 624:	de bf       	out	0x3e, r29	; 62
 626:	0f be       	out	0x3f, r0	; 63
 628:	cd bf       	out	0x3d, r28	; 61
 62a:	e0 e1       	ldi	r30, 0x10	; 16
 62c:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 62e:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
 632:	81 93       	st	Z+, r24

void USB_Device_ProcessControlRequest(void)
{
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 634:	21 e0       	ldi	r18, 0x01	; 1
 636:	e8 31       	cpi	r30, 0x18	; 24
 638:	f2 07       	cpc	r31, r18
 63a:	c9 f7       	brne	.-14     	; 0x62e <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_Byte();

	EVENT_USB_Device_ControlRequest();
 63c:	12 de       	rcall	.-988    	; 0x262 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 63e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 642:	83 ff       	sbrs	r24, 3
 644:	39 c1       	rjmp	.+626    	; 0x8b8 <USB_Device_ProcessControlRequest+0x2a6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 646:	80 91 10 01 	lds	r24, 0x0110

		switch (USB_ControlRequest.bRequest)
 64a:	30 91 11 01 	lds	r19, 0x0111
 64e:	35 30       	cpi	r19, 0x05	; 5
 650:	09 f4       	brne	.+2      	; 0x654 <USB_Device_ProcessControlRequest+0x42>
 652:	87 c0       	rjmp	.+270    	; 0x762 <USB_Device_ProcessControlRequest+0x150>
 654:	36 30       	cpi	r19, 0x06	; 6
 656:	40 f4       	brcc	.+16     	; 0x668 <USB_Device_ProcessControlRequest+0x56>
 658:	31 30       	cpi	r19, 0x01	; 1
 65a:	c9 f1       	breq	.+114    	; 0x6ce <USB_Device_ProcessControlRequest+0xbc>
 65c:	31 30       	cpi	r19, 0x01	; 1
 65e:	70 f0       	brcs	.+28     	; 0x67c <USB_Device_ProcessControlRequest+0x6a>
 660:	33 30       	cpi	r19, 0x03	; 3
 662:	09 f0       	breq	.+2      	; 0x666 <USB_Device_ProcessControlRequest+0x54>
 664:	29 c1       	rjmp	.+594    	; 0x8b8 <USB_Device_ProcessControlRequest+0x2a6>
 666:	33 c0       	rjmp	.+102    	; 0x6ce <USB_Device_ProcessControlRequest+0xbc>
 668:	38 30       	cpi	r19, 0x08	; 8
 66a:	09 f4       	brne	.+2      	; 0x66e <USB_Device_ProcessControlRequest+0x5c>
 66c:	f7 c0       	rjmp	.+494    	; 0x85c <USB_Device_ProcessControlRequest+0x24a>
 66e:	39 30       	cpi	r19, 0x09	; 9
 670:	09 f4       	brne	.+2      	; 0x674 <USB_Device_ProcessControlRequest+0x62>
 672:	06 c1       	rjmp	.+524    	; 0x880 <USB_Device_ProcessControlRequest+0x26e>
 674:	36 30       	cpi	r19, 0x06	; 6
 676:	09 f0       	breq	.+2      	; 0x67a <USB_Device_ProcessControlRequest+0x68>
 678:	1f c1       	rjmp	.+574    	; 0x8b8 <USB_Device_ProcessControlRequest+0x2a6>
 67a:	99 c0       	rjmp	.+306    	; 0x7ae <USB_Device_ProcessControlRequest+0x19c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 67c:	80 38       	cpi	r24, 0x80	; 128
 67e:	21 f0       	breq	.+8      	; 0x688 <USB_Device_ProcessControlRequest+0x76>
 680:	82 38       	cpi	r24, 0x82	; 130
 682:	09 f0       	breq	.+2      	; 0x686 <USB_Device_ProcessControlRequest+0x74>
 684:	19 c1       	rjmp	.+562    	; 0x8b8 <USB_Device_ProcessControlRequest+0x2a6>
 686:	08 c0       	rjmp	.+16     	; 0x698 <USB_Device_ProcessControlRequest+0x86>
 688:	90 91 0b 01 	lds	r25, 0x010B
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
 68c:	80 91 0c 01 	lds	r24, 0x010C
 690:	88 23       	and	r24, r24
 692:	99 f0       	breq	.+38     	; 0x6ba <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 694:	92 60       	ori	r25, 0x02	; 2
 696:	11 c0       	rjmp	.+34     	; 0x6ba <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 698:	80 91 14 01 	lds	r24, 0x0114
 69c:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 69e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 6a2:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	25 e0       	ldi	r18, 0x05	; 5
 6aa:	96 95       	lsr	r25
 6ac:	87 95       	ror	r24
 6ae:	2a 95       	dec	r18
 6b0:	e1 f7       	brne	.-8      	; 0x6aa <USB_Device_ProcessControlRequest+0x98>
 6b2:	98 2f       	mov	r25, r24
 6b4:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 6b6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 6ba:	80 91 e8 00 	lds	r24, 0x00E8
 6be:	87 7f       	andi	r24, 0xF7	; 247
 6c0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
 6c4:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Word >> 8);
 6c8:	10 92 f1 00 	sts	0x00F1, r1
 6cc:	d2 c0       	rjmp	.+420    	; 0x872 <USB_Device_ProcessControlRequest+0x260>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 6ce:	88 23       	and	r24, r24
 6d0:	19 f0       	breq	.+6      	; 0x6d8 <USB_Device_ProcessControlRequest+0xc6>
 6d2:	82 30       	cpi	r24, 0x02	; 2
 6d4:	09 f0       	breq	.+2      	; 0x6d8 <USB_Device_ProcessControlRequest+0xc6>
 6d6:	f0 c0       	rjmp	.+480    	; 0x8b8 <USB_Device_ProcessControlRequest+0x2a6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	8f 71       	andi	r24, 0x1F	; 31
 6dc:	90 70       	andi	r25, 0x00	; 0
 6de:	00 97       	sbiw	r24, 0x00	; 0
 6e0:	21 f0       	breq	.+8      	; 0x6ea <USB_Device_ProcessControlRequest+0xd8>
 6e2:	02 97       	sbiw	r24, 0x02	; 2
 6e4:	09 f0       	breq	.+2      	; 0x6e8 <USB_Device_ProcessControlRequest+0xd6>
 6e6:	e8 c0       	rjmp	.+464    	; 0x8b8 <USB_Device_ProcessControlRequest+0x2a6>
 6e8:	0c c0       	rjmp	.+24     	; 0x702 <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 6ea:	80 91 12 01 	lds	r24, 0x0112
 6ee:	81 30       	cpi	r24, 0x01	; 1
 6f0:	09 f0       	breq	.+2      	; 0x6f4 <USB_Device_ProcessControlRequest+0xe2>
 6f2:	e2 c0       	rjmp	.+452    	; 0x8b8 <USB_Device_ProcessControlRequest+0x2a6>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 6f4:	10 92 0c 01 	sts	0x010C, r1
 6f8:	33 30       	cpi	r19, 0x03	; 3
 6fa:	69 f5       	brne	.+90     	; 0x756 <USB_Device_ProcessControlRequest+0x144>
 6fc:	80 93 0c 01 	sts	0x010C, r24
 700:	2a c0       	rjmp	.+84     	; 0x756 <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 702:	80 91 12 01 	lds	r24, 0x0112
 706:	88 23       	and	r24, r24
 708:	31 f5       	brne	.+76     	; 0x756 <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 70a:	20 91 14 01 	lds	r18, 0x0114
 70e:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 710:	09 f4       	brne	.+2      	; 0x714 <USB_Device_ProcessControlRequest+0x102>
 712:	d2 c0       	rjmp	.+420    	; 0x8b8 <USB_Device_ProcessControlRequest+0x2a6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 714:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 718:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 71c:	80 ff       	sbrs	r24, 0
 71e:	1b c0       	rjmp	.+54     	; 0x756 <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 720:	33 30       	cpi	r19, 0x03	; 3
 722:	21 f4       	brne	.+8      	; 0x72c <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 724:	80 91 eb 00 	lds	r24, 0x00EB
 728:	80 62       	ori	r24, 0x20	; 32
 72a:	13 c0       	rjmp	.+38     	; 0x752 <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 72c:	80 91 eb 00 	lds	r24, 0x00EB
 730:	80 61       	ori	r24, 0x10	; 16
 732:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	02 c0       	rjmp	.+4      	; 0x740 <USB_Device_ProcessControlRequest+0x12e>
 73c:	88 0f       	add	r24, r24
 73e:	99 1f       	adc	r25, r25
 740:	2a 95       	dec	r18
 742:	e2 f7       	brpl	.-8      	; 0x73c <USB_Device_ProcessControlRequest+0x12a>
 744:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 748:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 74c:	80 91 eb 00 	lds	r24, 0x00EB
 750:	88 60       	ori	r24, 0x08	; 8
 752:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 756:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 75a:	80 91 e8 00 	lds	r24, 0x00E8
 75e:	87 7f       	andi	r24, 0xF7	; 247
 760:	8b c0       	rjmp	.+278    	; 0x878 <USB_Device_ProcessControlRequest+0x266>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 762:	88 23       	and	r24, r24
 764:	09 f0       	breq	.+2      	; 0x768 <USB_Device_ProcessControlRequest+0x156>
 766:	a8 c0       	rjmp	.+336    	; 0x8b8 <USB_Device_ProcessControlRequest+0x2a6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 768:	10 91 12 01 	lds	r17, 0x0112
 76c:	1f 77       	andi	r17, 0x7F	; 127

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 76e:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 770:	f8 94       	cli
 772:	80 91 e8 00 	lds	r24, 0x00E8
 776:	87 7f       	andi	r24, 0xF7	; 247
 778:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearSETUP();

		Endpoint_ClearStatusStage();
 77c:	00 de       	rcall	.-1024   	; 0x37e <Endpoint_ClearStatusStage>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 77e:	80 91 e8 00 	lds	r24, 0x00E8

		while (!(Endpoint_IsINReady()));
 782:	80 ff       	sbrs	r24, 0
 784:	fc cf       	rjmp	.-8      	; 0x77e <USB_Device_ProcessControlRequest+0x16c>

		USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 786:	11 23       	and	r17, r17
 788:	11 f4       	brne	.+4      	; 0x78e <USB_Device_ProcessControlRequest+0x17c>
 78a:	82 e0       	ldi	r24, 0x02	; 2
 78c:	01 c0       	rjmp	.+2      	; 0x790 <USB_Device_ProcessControlRequest+0x17e>
 78e:	83 e0       	ldi	r24, 0x03	; 3
 790:	80 93 0f 01 	sts	0x010F, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
 794:	80 91 e3 00 	lds	r24, 0x00E3
 798:	80 78       	andi	r24, 0x80	; 128
 79a:	18 2b       	or	r17, r24
 79c:	10 93 e3 00 	sts	0x00E3, r17
				UDADDR |= (1 << ADDEN);
 7a0:	80 91 e3 00 	lds	r24, 0x00E3
 7a4:	80 68       	ori	r24, 0x80	; 128
 7a6:	80 93 e3 00 	sts	0x00E3, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 7aa:	0f bf       	out	0x3f, r16	; 63
    __asm__ volatile ("" ::: "memory");
 7ac:	85 c0       	rjmp	.+266    	; 0x8b8 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 7ae:	80 58       	subi	r24, 0x80	; 128
 7b0:	82 30       	cpi	r24, 0x02	; 2
 7b2:	08 f0       	brcs	.+2      	; 0x7b6 <USB_Device_ProcessControlRequest+0x1a4>
 7b4:	81 c0       	rjmp	.+258    	; 0x8b8 <USB_Device_ProcessControlRequest+0x2a6>
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 7b6:	80 91 12 01 	lds	r24, 0x0112
 7ba:	90 91 13 01 	lds	r25, 0x0113
 7be:	23 e0       	ldi	r18, 0x03	; 3
 7c0:	8c 3d       	cpi	r24, 0xDC	; 220
 7c2:	92 07       	cpc	r25, r18
 7c4:	99 f5       	brne	.+102    	; 0x82c <USB_Device_ProcessControlRequest+0x21a>
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 7c6:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 7c8:	f8 94       	cli
 7ca:	de 01       	movw	r26, r28
 7cc:	15 96       	adiw	r26, 0x05	; 5
 7ce:	6e e0       	ldi	r22, 0x0E	; 14
 7d0:	40 e0       	ldi	r20, 0x00	; 0
 7d2:	50 e0       	ldi	r21, 0x00	; 0
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 7d4:	11 e2       	ldi	r17, 0x21	; 33
 7d6:	e6 2f       	mov	r30, r22
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	10 93 57 00 	sts	0x0057, r17
 7de:	84 91       	lpm	r24, Z+

			if (SerialCharNum & 0x01)
 7e0:	40 ff       	sbrs	r20, 0
 7e2:	03 c0       	rjmp	.+6      	; 0x7ea <USB_Device_ProcessControlRequest+0x1d8>
			{
				SerialByte >>= 4;
 7e4:	82 95       	swap	r24
 7e6:	8f 70       	andi	r24, 0x0F	; 15
				SigReadAddress++;
 7e8:	6f 5f       	subi	r22, 0xFF	; 255
			}

			SerialByte &= 0x0F;
 7ea:	8f 70       	andi	r24, 0x0F	; 15
 7ec:	28 2f       	mov	r18, r24
 7ee:	30 e0       	ldi	r19, 0x00	; 0

			SignatureDescriptor.UnicodeString[SerialCharNum] = (SerialByte >= 10) ?
 7f0:	8a 30       	cpi	r24, 0x0A	; 10
 7f2:	18 f0       	brcs	.+6      	; 0x7fa <USB_Device_ProcessControlRequest+0x1e8>
 7f4:	c9 01       	movw	r24, r18
 7f6:	c7 96       	adiw	r24, 0x37	; 55
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe <USB_Device_ProcessControlRequest+0x1ec>
 7fa:	c9 01       	movw	r24, r18
 7fc:	c0 96       	adiw	r24, 0x30	; 48
 7fe:	8d 93       	st	X+, r24
 800:	9d 93       	st	X+, r25
 802:	4f 5f       	subi	r20, 0xFF	; 255
 804:	5f 4f       	sbci	r21, 0xFF	; 255

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
 806:	44 31       	cpi	r20, 0x14	; 20
 808:	51 05       	cpc	r21, r1
 80a:	29 f7       	brne	.-54     	; 0x7d6 <USB_Device_ProcessControlRequest+0x1c4>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 80c:	7f bf       	out	0x3f, r23	; 63
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
 80e:	8a e2       	ldi	r24, 0x2A	; 42
 810:	8b 83       	std	Y+3, r24	; 0x03
	{
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 812:	83 e0       	ldi	r24, 0x03	; 3
 814:	8c 83       	std	Y+4, r24	; 0x04
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 816:	80 91 e8 00 	lds	r24, 0x00E8
 81a:	87 7f       	andi	r24, 0xF7	; 247
 81c:	80 93 e8 00 	sts	0x00E8, r24
		}
	}

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 820:	ce 01       	movw	r24, r28
 822:	03 96       	adiw	r24, 0x03	; 3
 824:	6a e2       	ldi	r22, 0x2A	; 42
 826:	70 e0       	ldi	r23, 0x00	; 0
 828:	61 d0       	rcall	.+194    	; 0x8ec <Endpoint_Write_Control_Stream_LE>
 82a:	12 c0       	rjmp	.+36     	; 0x850 <USB_Device_ProcessControlRequest+0x23e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 82c:	60 91 14 01 	lds	r22, 0x0114
 830:	ae 01       	movw	r20, r28
 832:	4f 5f       	subi	r20, 0xFF	; 255
 834:	5f 4f       	sbci	r21, 0xFF	; 255
 836:	62 dd       	rcall	.-1340   	; 0x2fc <CALLBACK_USB_GetDescriptor>
 838:	bc 01       	movw	r22, r24
 83a:	00 97       	sbiw	r24, 0x00	; 0
 83c:	09 f4       	brne	.+2      	; 0x840 <USB_Device_ProcessControlRequest+0x22e>
 83e:	3c c0       	rjmp	.+120    	; 0x8b8 <USB_Device_ProcessControlRequest+0x2a6>
 840:	80 91 e8 00 	lds	r24, 0x00E8
 844:	87 7f       	andi	r24, 0xF7	; 247
 846:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 84a:	89 81       	ldd	r24, Y+1	; 0x01
 84c:	9a 81       	ldd	r25, Y+2	; 0x02
 84e:	ac d0       	rcall	.+344    	; 0x9a8 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 850:	80 91 e8 00 	lds	r24, 0x00E8
 854:	8b 77       	andi	r24, 0x7B	; 123
 856:	80 93 e8 00 	sts	0x00E8, r24
 85a:	2e c0       	rjmp	.+92     	; 0x8b8 <USB_Device_ProcessControlRequest+0x2a6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 85c:	80 38       	cpi	r24, 0x80	; 128
 85e:	61 f5       	brne	.+88     	; 0x8b8 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 860:	80 91 e8 00 	lds	r24, 0x00E8
 864:	87 7f       	andi	r24, 0xF7	; 247
 866:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
 86a:	80 91 0d 01 	lds	r24, 0x010D
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 86e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 872:	80 91 e8 00 	lds	r24, 0x00E8
 876:	8e 77       	andi	r24, 0x7E	; 126
 878:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 87c:	80 dd       	rcall	.-1280   	; 0x37e <Endpoint_ClearStatusStage>
 87e:	1c c0       	rjmp	.+56     	; 0x8b8 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 880:	88 23       	and	r24, r24
 882:	d1 f4       	brne	.+52     	; 0x8b8 <USB_Device_ProcessControlRequest+0x2a6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 884:	90 91 12 01 	lds	r25, 0x0112
 888:	92 30       	cpi	r25, 0x02	; 2
 88a:	b0 f4       	brcc	.+44     	; 0x8b8 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 88c:	80 91 e8 00 	lds	r24, 0x00E8
 890:	87 7f       	andi	r24, 0xF7	; 247
 892:	80 93 e8 00 	sts	0x00E8, r24
	}
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 896:	90 93 0d 01 	sts	0x010D, r25

	Endpoint_ClearStatusStage();
 89a:	71 dd       	rcall	.-1310   	; 0x37e <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
 89c:	80 91 0d 01 	lds	r24, 0x010D
 8a0:	88 23       	and	r24, r24
 8a2:	31 f4       	brne	.+12     	; 0x8b0 <USB_Device_ProcessControlRequest+0x29e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 8a4:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 8a8:	87 fd       	sbrc	r24, 7
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <USB_Device_ProcessControlRequest+0x29e>
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <USB_Device_ProcessControlRequest+0x2a0>
 8b0:	84 e0       	ldi	r24, 0x04	; 4
 8b2:	80 93 0f 01 	sts	0x010F, r24

	EVENT_USB_Device_ConfigurationChanged();
 8b6:	d8 dc       	rcall	.-1616   	; 0x268 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 8b8:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 8bc:	83 ff       	sbrs	r24, 3
 8be:	0a c0       	rjmp	.+20     	; 0x8d4 <USB_Device_ProcessControlRequest+0x2c2>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 8c0:	80 91 eb 00 	lds	r24, 0x00EB
 8c4:	80 62       	ori	r24, 0x20	; 32
 8c6:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 8ca:	80 91 e8 00 	lds	r24, 0x00E8
 8ce:	87 7f       	andi	r24, 0xF7	; 247
 8d0:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 8d4:	ac 96       	adiw	r28, 0x2c	; 44
 8d6:	0f b6       	in	r0, 0x3f	; 63
 8d8:	f8 94       	cli
 8da:	de bf       	out	0x3e, r29	; 62
 8dc:	0f be       	out	0x3f, r0	; 63
 8de:	cd bf       	out	0x3d, r28	; 61
 8e0:	cf 91       	pop	r28
 8e2:	df 91       	pop	r29
 8e4:	1f 91       	pop	r17
 8e6:	0f 91       	pop	r16
 8e8:	08 95       	ret

000008ea <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 8ea:	08 95       	ret

000008ec <Endpoint_Write_Control_Stream_LE>:
 8ec:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 8ee:	40 91 16 01 	lds	r20, 0x0116
 8f2:	50 91 17 01 	lds	r21, 0x0117
 8f6:	46 17       	cp	r20, r22
 8f8:	57 07       	cpc	r21, r23
 8fa:	18 f4       	brcc	.+6      	; 0x902 <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 8fc:	f9 01       	movw	r30, r18
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	3d c0       	rjmp	.+122    	; 0x97c <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 902:	61 15       	cp	r22, r1
 904:	71 05       	cpc	r23, r1
 906:	11 f0       	breq	.+4      	; 0x90c <Endpoint_Write_Control_Stream_LE+0x20>
 908:	ab 01       	movw	r20, r22
 90a:	f8 cf       	rjmp	.-16     	; 0x8fc <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 90c:	80 91 e8 00 	lds	r24, 0x00E8
 910:	8e 77       	andi	r24, 0x7E	; 126
 912:	80 93 e8 00 	sts	0x00E8, r24
 916:	40 e0       	ldi	r20, 0x00	; 0
 918:	50 e0       	ldi	r21, 0x00	; 0
 91a:	f0 cf       	rjmp	.-32     	; 0x8fc <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 91c:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 920:	88 23       	and	r24, r24
 922:	f1 f1       	breq	.+124    	; 0x9a0 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 924:	85 30       	cpi	r24, 0x05	; 5
 926:	f1 f1       	breq	.+124    	; 0x9a4 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 928:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 92c:	83 ff       	sbrs	r24, 3
 92e:	02 c0       	rjmp	.+4      	; 0x934 <Endpoint_Write_Control_Stream_LE+0x48>
 930:	81 e0       	ldi	r24, 0x01	; 1
 932:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 934:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 938:	82 fd       	sbrc	r24, 2
 93a:	2c c0       	rjmp	.+88     	; 0x994 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 93c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 940:	80 ff       	sbrs	r24, 0
 942:	1c c0       	rjmp	.+56     	; 0x97c <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 944:	20 91 f2 00 	lds	r18, 0x00F2
 948:	30 91 f3 00 	lds	r19, 0x00F3
 94c:	07 c0       	rjmp	.+14     	; 0x95c <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 94e:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 950:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
 954:	41 50       	subi	r20, 0x01	; 1
 956:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 958:	2f 5f       	subi	r18, 0xFF	; 255
 95a:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 95c:	41 15       	cp	r20, r1
 95e:	51 05       	cpc	r21, r1
 960:	19 f0       	breq	.+6      	; 0x968 <Endpoint_Write_Control_Stream_LE+0x7c>
 962:	28 30       	cpi	r18, 0x08	; 8
 964:	31 05       	cpc	r19, r1
 966:	98 f3       	brcs	.-26     	; 0x94e <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	28 30       	cpi	r18, 0x08	; 8
 96c:	31 05       	cpc	r19, r1
 96e:	09 f4       	brne	.+2      	; 0x972 <Endpoint_Write_Control_Stream_LE+0x86>
 970:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 972:	80 91 e8 00 	lds	r24, 0x00E8
 976:	8e 77       	andi	r24, 0x7E	; 126
 978:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 97c:	41 15       	cp	r20, r1
 97e:	51 05       	cpc	r21, r1
 980:	69 f6       	brne	.-102    	; 0x91c <Endpoint_Write_Control_Stream_LE+0x30>
 982:	99 23       	and	r25, r25
 984:	59 f6       	brne	.-106    	; 0x91c <Endpoint_Write_Control_Stream_LE+0x30>
 986:	06 c0       	rjmp	.+12     	; 0x994 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 988:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 98c:	88 23       	and	r24, r24
 98e:	41 f0       	breq	.+16     	; 0x9a0 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 990:	85 30       	cpi	r24, 0x05	; 5
 992:	41 f0       	breq	.+16     	; 0x9a4 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 994:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 998:	82 ff       	sbrs	r24, 2
 99a:	f6 cf       	rjmp	.-20     	; 0x988 <Endpoint_Write_Control_Stream_LE+0x9c>
 99c:	80 e0       	ldi	r24, 0x00	; 0
 99e:	08 95       	ret
 9a0:	82 e0       	ldi	r24, 0x02	; 2
 9a2:	08 95       	ret
 9a4:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 9a6:	08 95       	ret

000009a8 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
 9a8:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 9aa:	40 91 16 01 	lds	r20, 0x0116
 9ae:	50 91 17 01 	lds	r21, 0x0117
 9b2:	46 17       	cp	r20, r22
 9b4:	57 07       	cpc	r21, r23
 9b6:	10 f4       	brcc	.+4      	; 0x9bc <Endpoint_Write_Control_PStream_LE+0x14>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 9b8:	60 e0       	ldi	r22, 0x00	; 0
 9ba:	40 c0       	rjmp	.+128    	; 0xa3c <Endpoint_Write_Control_PStream_LE+0x94>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 9bc:	61 15       	cp	r22, r1
 9be:	71 05       	cpc	r23, r1
 9c0:	11 f0       	breq	.+4      	; 0x9c6 <Endpoint_Write_Control_PStream_LE+0x1e>
 9c2:	ab 01       	movw	r20, r22
 9c4:	f9 cf       	rjmp	.-14     	; 0x9b8 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 9c6:	80 91 e8 00 	lds	r24, 0x00E8
 9ca:	8e 77       	andi	r24, 0x7E	; 126
 9cc:	80 93 e8 00 	sts	0x00E8, r24
 9d0:	40 e0       	ldi	r20, 0x00	; 0
 9d2:	50 e0       	ldi	r21, 0x00	; 0
 9d4:	f1 cf       	rjmp	.-30     	; 0x9b8 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 9d6:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 9da:	88 23       	and	r24, r24
 9dc:	09 f4       	brne	.+2      	; 0x9e0 <Endpoint_Write_Control_PStream_LE+0x38>
 9de:	40 c0       	rjmp	.+128    	; 0xa60 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 9e0:	85 30       	cpi	r24, 0x05	; 5
 9e2:	09 f4       	brne	.+2      	; 0x9e6 <Endpoint_Write_Control_PStream_LE+0x3e>
 9e4:	3f c0       	rjmp	.+126    	; 0xa64 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9e6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 9ea:	83 ff       	sbrs	r24, 3
 9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <Endpoint_Write_Control_PStream_LE+0x4a>
 9ee:	81 e0       	ldi	r24, 0x01	; 1
 9f0:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 9f2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 9f6:	82 fd       	sbrc	r24, 2
 9f8:	2d c0       	rjmp	.+90     	; 0xa54 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 9fa:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 9fe:	80 ff       	sbrs	r24, 0
 a00:	1d c0       	rjmp	.+58     	; 0xa3c <Endpoint_Write_Control_PStream_LE+0x94>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 a02:	80 91 f2 00 	lds	r24, 0x00F2
 a06:	90 91 f3 00 	lds	r25, 0x00F3
 a0a:	09 c0       	rjmp	.+18     	; 0xa1e <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 a0c:	f9 01       	movw	r30, r18
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 a0e:	2f 5f       	subi	r18, 0xFF	; 255
 a10:	3f 4f       	sbci	r19, 0xFF	; 255
 a12:	e4 91       	lpm	r30, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 a14:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
 a18:	41 50       	subi	r20, 0x01	; 1
 a1a:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 a1c:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 a1e:	41 15       	cp	r20, r1
 a20:	51 05       	cpc	r21, r1
 a22:	19 f0       	breq	.+6      	; 0xa2a <Endpoint_Write_Control_PStream_LE+0x82>
 a24:	88 30       	cpi	r24, 0x08	; 8
 a26:	91 05       	cpc	r25, r1
 a28:	88 f3       	brcs	.-30     	; 0xa0c <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 a2a:	60 e0       	ldi	r22, 0x00	; 0
 a2c:	08 97       	sbiw	r24, 0x08	; 8
 a2e:	09 f4       	brne	.+2      	; 0xa32 <Endpoint_Write_Control_PStream_LE+0x8a>
 a30:	61 e0       	ldi	r22, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a32:	80 91 e8 00 	lds	r24, 0x00E8
 a36:	8e 77       	andi	r24, 0x7E	; 126
 a38:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 a3c:	41 15       	cp	r20, r1
 a3e:	51 05       	cpc	r21, r1
 a40:	51 f6       	brne	.-108    	; 0x9d6 <Endpoint_Write_Control_PStream_LE+0x2e>
 a42:	66 23       	and	r22, r22
 a44:	41 f6       	brne	.-112    	; 0x9d6 <Endpoint_Write_Control_PStream_LE+0x2e>
 a46:	06 c0       	rjmp	.+12     	; 0xa54 <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 a48:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 a4c:	88 23       	and	r24, r24
 a4e:	41 f0       	breq	.+16     	; 0xa60 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 a50:	85 30       	cpi	r24, 0x05	; 5
 a52:	41 f0       	breq	.+16     	; 0xa64 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a54:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 a58:	82 ff       	sbrs	r24, 2
 a5a:	f6 cf       	rjmp	.-20     	; 0xa48 <Endpoint_Write_Control_PStream_LE+0xa0>
 a5c:	80 e0       	ldi	r24, 0x00	; 0
 a5e:	08 95       	ret
 a60:	82 e0       	ldi	r24, 0x02	; 2
 a62:	08 95       	ret
 a64:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 a66:	08 95       	ret

00000a68 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 a68:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 a6a:	80 91 0f 01 	lds	r24, 0x010F
 a6e:	88 23       	and	r24, r24
 a70:	61 f0       	breq	.+24     	; 0xa8a <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 a72:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a76:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a7a:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 a7e:	83 ff       	sbrs	r24, 3
 a80:	01 c0       	rjmp	.+2      	; 0xa84 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 a82:	c7 dd       	rcall	.-1138   	; 0x612 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 a84:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a86:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 a8a:	1f 91       	pop	r17
 a8c:	08 95       	ret

00000a8e <Audio_Device_ConfigureEndpoints>:
			break;
	}
}

bool Audio_Device_ConfigureEndpoints(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
{
 a8e:	1f 93       	push	r17
 a90:	cf 93       	push	r28
 a92:	df 93       	push	r29
 a94:	ec 01       	movw	r28, r24
	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));
 a96:	1f 82       	std	Y+7, r1	; 0x07
 a98:	11 e0       	ldi	r17, 0x01	; 1
	{
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;

		if (EndpointNum == AudioInterfaceInfo->Config.DataINEndpointNumber)
 a9a:	89 81       	ldd	r24, Y+1	; 0x01
 a9c:	18 17       	cp	r17, r24
 a9e:	21 f4       	brne	.+8      	; 0xaa8 <Audio_Device_ConfigureEndpoints+0x1a>
		{
			Size         = AudioInterfaceInfo->Config.DataINEndpointSize;
 aa0:	2a 81       	ldd	r18, Y+2	; 0x02
 aa2:	3b 81       	ldd	r19, Y+3	; 0x03
 aa4:	61 e0       	ldi	r22, 0x01	; 1
 aa6:	06 c0       	rjmp	.+12     	; 0xab4 <Audio_Device_ConfigureEndpoints+0x26>
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_ISOCHRONOUS;
		}
		else if (EndpointNum == AudioInterfaceInfo->Config.DataOUTEndpointNumber)
 aa8:	8c 81       	ldd	r24, Y+4	; 0x04
 aaa:	18 17       	cp	r17, r24
 aac:	a9 f4       	brne	.+42     	; 0xad8 <Audio_Device_ConfigureEndpoints+0x4a>
		{
			Size         = AudioInterfaceInfo->Config.DataOUTEndpointSize;
 aae:	2d 81       	ldd	r18, Y+5	; 0x05
 ab0:	3e 81       	ldd	r19, Y+6	; 0x06
 ab2:	60 e0       	ldi	r22, 0x00	; 0
 ab4:	40 e0       	ldi	r20, 0x00	; 0
 ab6:	88 e0       	ldi	r24, 0x08	; 8
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	03 c0       	rjmp	.+6      	; 0xac2 <Audio_Device_ConfigureEndpoints+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 abc:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
 abe:	88 0f       	add	r24, r24
 ac0:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 ac2:	82 17       	cp	r24, r18
 ac4:	93 07       	cpc	r25, r19
 ac6:	d0 f3       	brcs	.-12     	; 0xabc <Audio_Device_ConfigureEndpoints+0x2e>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 ac8:	60 64       	ori	r22, 0x40	; 64
 aca:	42 95       	swap	r20
 acc:	40 7f       	andi	r20, 0xF0	; 240
 ace:	46 60       	ori	r20, 0x06	; 6
 ad0:	81 2f       	mov	r24, r17
 ad2:	42 dc       	rcall	.-1916   	; 0x358 <Endpoint_ConfigureEndpoint_Prv>
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size, ENDPOINT_BANK_DOUBLE)))
 ad4:	88 23       	and	r24, r24
 ad6:	21 f0       	breq	.+8      	; 0xae0 <Audio_Device_ConfigureEndpoints+0x52>

bool Audio_Device_ConfigureEndpoints(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
{
	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
 ad8:	1f 5f       	subi	r17, 0xFF	; 255
 ada:	17 30       	cpi	r17, 0x07	; 7
 adc:	f1 f6       	brne	.-68     	; 0xa9a <Audio_Device_ConfigureEndpoints+0xc>
 ade:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
 ae0:	df 91       	pop	r29
 ae2:	cf 91       	pop	r28
 ae4:	1f 91       	pop	r17
 ae6:	08 95       	ret

00000ae8 <Audio_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_AUDIO_DRIVER
#define  __INCLUDE_FROM_AUDIO_DEVICE_C
#include "Audio.h"

void Audio_Device_ProcessControlRequest(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
{
 ae8:	cf 93       	push	r28
 aea:	df 93       	push	r29
 aec:	ec 01       	movw	r28, r24
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 aee:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 af2:	83 ff       	sbrs	r24, 3
 af4:	1d c0       	rjmp	.+58     	; 0xb30 <Audio_Device_ProcessControlRequest+0x48>
	  return;

	if (USB_ControlRequest.wIndex != AudioInterfaceInfo->Config.StreamingInterfaceNumber)
 af6:	88 81       	ld	r24, Y
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	20 91 14 01 	lds	r18, 0x0114
 afe:	30 91 15 01 	lds	r19, 0x0115
 b02:	28 17       	cp	r18, r24
 b04:	39 07       	cpc	r19, r25
 b06:	a1 f4       	brne	.+40     	; 0xb30 <Audio_Device_ProcessControlRequest+0x48>
	  return;

	switch (USB_ControlRequest.bRequest)
 b08:	80 91 11 01 	lds	r24, 0x0111
 b0c:	8b 30       	cpi	r24, 0x0B	; 11
 b0e:	81 f4       	brne	.+32     	; 0xb30 <Audio_Device_ProcessControlRequest+0x48>
	{
		case REQ_SetInterface:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_INTERFACE))
 b10:	80 91 10 01 	lds	r24, 0x0110
 b14:	81 30       	cpi	r24, 0x01	; 1
 b16:	61 f4       	brne	.+24     	; 0xb30 <Audio_Device_ProcessControlRequest+0x48>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b18:	80 91 e8 00 	lds	r24, 0x00E8
 b1c:	87 7f       	andi	r24, 0xF7	; 247
 b1e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 b22:	2d dc       	rcall	.-1958   	; 0x37e <Endpoint_ClearStatusStage>

				AudioInterfaceInfo->State.InterfaceEnabled = ((USB_ControlRequest.wValue & 0xFF) != 0);
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	80 91 12 01 	lds	r24, 0x0112
 b2a:	81 11       	cpse	r24, r1
 b2c:	91 e0       	ldi	r25, 0x01	; 1
 b2e:	9f 83       	std	Y+7, r25	; 0x07
			}

			break;
	}
}
 b30:	df 91       	pop	r29
 b32:	cf 91       	pop	r28
 b34:	08 95       	ret

00000b36 <_exit>:
 b36:	f8 94       	cli

00000b38 <__stop_program>:
 b38:	ff cf       	rjmp	.-2      	; 0xb38 <__stop_program>
