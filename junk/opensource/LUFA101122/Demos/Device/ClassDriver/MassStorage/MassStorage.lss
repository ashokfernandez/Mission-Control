
MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00001866  000018fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001866  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080016e  0080016e  00001968  2**0
                  ALLOC
  3 .stab         00000b1c  00000000  00000000  00001968  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002b1  00000000  00000000  00002484  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004b8  00000000  00000000  00002735  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000c8e  00000000  00000000  00002bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008fb0  00000000  00000000  0000387b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000022a4  00000000  00000000  0000c82b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006dfa  00000000  00000000  0000eacf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000710  00000000  00000000  000158cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000030a4  00000000  00000000  00015fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000032d5  00000000  00000000  00019080  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000608  00000000  00000000  0001c355  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 *  \param[in] BufferPtr     Pointer to the data source RAM buffer
 */
void DataflashManager_WriteBlocks_RAM(const uint32_t BlockAddress,
                                      uint16_t TotalBlocks,
                                      uint8_t* BufferPtr)
{
       0:	8b c0       	rjmp	.+278    	; 0x118 <__ctors_end>

	return Endpoint_IsConfigured();
}

void Endpoint_ClearEndpoints(void)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	a7 c0       	rjmp	.+334    	; 0x154 <__bad_interrupt>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
       8:	a5 c0       	rjmp	.+330    	; 0x154 <__bad_interrupt>
       a:	00 00       	nop
       c:	a3 c0       	rjmp	.+326    	; 0x154 <__bad_interrupt>
       e:	00 00       	nop
      10:	a1 c0       	rjmp	.+322    	; 0x154 <__bad_interrupt>
      12:	00 00       	nop
      14:	9f c0       	rjmp	.+318    	; 0x154 <__bad_interrupt>
      16:	00 00       	nop
      18:	9d c0       	rjmp	.+314    	; 0x154 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9b c0       	rjmp	.+310    	; 0x154 <__bad_interrupt>
      1e:	00 00       	nop
      20:	99 c0       	rjmp	.+306    	; 0x154 <__bad_interrupt>
      22:	00 00       	nop
      24:	97 c0       	rjmp	.+302    	; 0x154 <__bad_interrupt>
      26:	00 00       	nop
      28:	f7 c6       	rjmp	.+3566   	; 0xe18 <__vector_10>
      2a:	00 00       	nop
      2c:	b7 c6       	rjmp	.+3438   	; 0xd9c <__vector_11>
      2e:	00 00       	nop
      30:	91 c0       	rjmp	.+290    	; 0x154 <__bad_interrupt>
      32:	00 00       	nop
      34:	8f c0       	rjmp	.+286    	; 0x154 <__bad_interrupt>
      36:	00 00       	nop
      38:	8d c0       	rjmp	.+282    	; 0x154 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8b c0       	rjmp	.+278    	; 0x154 <__bad_interrupt>
      3e:	00 00       	nop
      40:	89 c0       	rjmp	.+274    	; 0x154 <__bad_interrupt>
      42:	00 00       	nop
      44:	87 c0       	rjmp	.+270    	; 0x154 <__bad_interrupt>
      46:	00 00       	nop
      48:	85 c0       	rjmp	.+266    	; 0x154 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	83 c0       	rjmp	.+262    	; 0x154 <__bad_interrupt>
      4e:	00 00       	nop
      50:	81 c0       	rjmp	.+258    	; 0x154 <__bad_interrupt>
      52:	00 00       	nop
      54:	7f c0       	rjmp	.+254    	; 0x154 <__bad_interrupt>
      56:	00 00       	nop
      58:	7d c0       	rjmp	.+250    	; 0x154 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7b c0       	rjmp	.+246    	; 0x154 <__bad_interrupt>
      5e:	00 00       	nop
      60:	79 c0       	rjmp	.+242    	; 0x154 <__bad_interrupt>
      62:	00 00       	nop
      64:	77 c0       	rjmp	.+238    	; 0x154 <__bad_interrupt>
      66:	00 00       	nop
      68:	75 c0       	rjmp	.+234    	; 0x154 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	73 c0       	rjmp	.+230    	; 0x154 <__bad_interrupt>
      6e:	00 00       	nop
      70:	71 c0       	rjmp	.+226    	; 0x154 <__bad_interrupt>
      72:	00 00       	nop
      74:	6f c0       	rjmp	.+222    	; 0x154 <__bad_interrupt>
      76:	00 00       	nop
      78:	6d c0       	rjmp	.+218    	; 0x154 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6b c0       	rjmp	.+214    	; 0x154 <__bad_interrupt>
      7e:	00 00       	nop
      80:	69 c0       	rjmp	.+210    	; 0x154 <__bad_interrupt>
      82:	00 00       	nop
      84:	67 c0       	rjmp	.+206    	; 0x154 <__bad_interrupt>
      86:	00 00       	nop
      88:	65 c0       	rjmp	.+202    	; 0x154 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	63 c0       	rjmp	.+198    	; 0x154 <__bad_interrupt>
      8e:	00 00       	nop
      90:	61 c0       	rjmp	.+194    	; 0x154 <__bad_interrupt>
      92:	00 00       	nop
      94:	5f c0       	rjmp	.+190    	; 0x154 <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
      a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
      ba:	50 00 07 05 83 02 40 00 01 07 05 04 02 40 00 01     P.....@......@..

000000ca <LanguageString>:
      ca:	04 03 09 04                                         ....

000000ce <ManufacturerString>:
      ce:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      de:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e8 <ProductString>:
      e8:	2e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     ..L.U.F.A. .M.a.
      f8:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
     108:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...

00000118 <__ctors_end>:
     118:	11 24       	eor	r1, r1
     11a:	1f be       	out	0x3f, r1	; 63
     11c:	cf ef       	ldi	r28, 0xFF	; 255
     11e:	d0 e2       	ldi	r29, 0x20	; 32
     120:	de bf       	out	0x3e, r29	; 62
     122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
     124:	11 e0       	ldi	r17, 0x01	; 1
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	e6 e6       	ldi	r30, 0x66	; 102
     12c:	f8 e1       	ldi	r31, 0x18	; 24
     12e:	00 e0       	ldi	r16, 0x00	; 0
     130:	0b bf       	out	0x3b, r16	; 59
     132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x14>
     134:	07 90       	elpm	r0, Z+
     136:	0d 92       	st	X+, r0
     138:	ae 36       	cpi	r26, 0x6E	; 110
     13a:	b1 07       	cpc	r27, r17
     13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0x10>

0000013e <__do_clear_bss>:
     13e:	11 e0       	ldi	r17, 0x01	; 1
     140:	ae e6       	ldi	r26, 0x6E	; 110
     142:	b1 e0       	ldi	r27, 0x01	; 1
     144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
     146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
     148:	ad 37       	cpi	r26, 0x7D	; 125
     14a:	b1 07       	cpc	r27, r17
     14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
     14e:	5a d0       	rcall	.+180    	; 0x204 <main>
     150:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <_exit>

00000154 <__bad_interrupt>:
     154:	55 cf       	rjmp	.-342    	; 0x0 <__vectors>

00000156 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     156:	8b b1       	in	r24, 0x0b	; 11
     158:	8f 70       	andi	r24, 0x0F	; 15
     15a:	80 6a       	ori	r24, 0xA0	; 160
     15c:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     15e:	08 95       	ret

00000160 <EVENT_USB_Device_Disconnect>:
     160:	8b b1       	in	r24, 0x0b	; 11
     162:	8f 70       	andi	r24, 0x0F	; 15
     164:	80 61       	ori	r24, 0x10	; 16
     166:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     168:	08 95       	ret

0000016a <CALLBACK_MS_Device_SCSICommandReceived>:
     16a:	2b b1       	in	r18, 0x0b	; 11
     16c:	2f 70       	andi	r18, 0x0F	; 15
     16e:	20 62       	ori	r18, 0x20	; 32
     170:	2b b9       	out	0x0b, r18	; 11
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     172:	99 d4       	rcall	.+2354   	; 0xaa6 <SCSI_DecodeSCSICommand>
     174:	9b b1       	in	r25, 0x0b	; 11
     176:	9f 70       	andi	r25, 0x0F	; 15
     178:	90 66       	ori	r25, 0x60	; 96
     17a:	9b b9       	out	0x0b, r25	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);

	return CommandSuccess;
}
     17c:	08 95       	ret

0000017e <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	91 e0       	ldi	r25, 0x01	; 1
     182:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <MS_Device_ProcessControlRequest>

00000186 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	91 e0       	ldi	r25, 0x01	; 1
     18a:	0e 94 bd 0b 	call	0x177a	; 0x177a <MS_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     18e:	80 fd       	sbrc	r24, 0
     190:	02 c0       	rjmp	.+4      	; 0x196 <EVENT_USB_Device_ConfigurationChanged+0x10>
     192:	90 e9       	ldi	r25, 0x90	; 144
     194:	01 c0       	rjmp	.+2      	; 0x198 <EVENT_USB_Device_ConfigurationChanged+0x12>
     196:	90 e6       	ldi	r25, 0x60	; 96
     198:	8b b1       	in	r24, 0x0b	; 11
     19a:	8f 70       	andi	r24, 0x0F	; 15
     19c:	98 2b       	or	r25, r24
     19e:	9b b9       	out	0x0b, r25	; 11
}
     1a0:	08 95       	ret

000001a2 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1a2:	84 b7       	in	r24, 0x34	; 52
     1a4:	87 7f       	andi	r24, 0xF7	; 247
     1a6:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     1a8:	88 e1       	ldi	r24, 0x18	; 24
     1aa:	0f b6       	in	r0, 0x3f	; 63
     1ac:	f8 94       	cli
     1ae:	80 93 60 00 	sts	0x0060, r24
     1b2:	10 92 60 00 	sts	0x0060, r1
     1b6:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	20 e8       	ldi	r18, 0x80	; 128
     1be:	0f b6       	in	r0, 0x3f	; 63
     1c0:	f8 94       	cli
     1c2:	20 93 61 00 	sts	0x0061, r18
     1c6:	80 93 61 00 	sts	0x0061, r24
     1ca:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     1cc:	8a b1       	in	r24, 0x0a	; 10
     1ce:	80 6f       	ori	r24, 0xF0	; 240
     1d0:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     1d2:	8b b1       	in	r24, 0x0b	; 11
     1d4:	8f 70       	andi	r24, 0x0F	; 15
     1d6:	8b b9       	out	0x0b, r24	; 11
			 *  \param[in] SPIOptions  SPI Options, a mask consisting of one of each of the SPI_SPEED_*,
			 *                         SPI_SCK_*, SPI_SAMPLE_*, SPI_ORDER_* and SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				DDRB  |=  ((1 << 1) | (1 << 2));
     1d8:	84 b1       	in	r24, 0x04	; 4
     1da:	86 60       	ori	r24, 0x06	; 6
     1dc:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~((1 << 0) | (1 << 3));
     1de:	84 b1       	in	r24, 0x04	; 4
     1e0:	86 7f       	andi	r24, 0xF6	; 246
     1e2:	84 b9       	out	0x04, r24	; 4
				PORTB |=  ((1 << 0) | (1 << 3));
     1e4:	85 b1       	in	r24, 0x05	; 5
     1e6:	89 60       	ori	r24, 0x09	; 9
     1e8:	85 b9       	out	0x05, r24	; 5

				SPCR   = ((1 << SPE) | SPIOptions);
     1ea:	8c e5       	ldi	r24, 0x5C	; 92
     1ec:	8c bd       	out	0x2c, r24	; 44

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     1ee:	8d b5       	in	r24, 0x2d	; 45
     1f0:	81 60       	ori	r24, 0x01	; 1
     1f2:	8d bd       	out	0x2d, r24	; 45
			/** Initialises the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The AVR's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     1f4:	8d b1       	in	r24, 0x0d	; 13
     1f6:	83 60       	ori	r24, 0x03	; 3
     1f8:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     1fa:	8e b1       	in	r24, 0x0e	; 14
     1fc:	83 60       	ori	r24, 0x03	; 3
     1fe:	8e b9       	out	0x0e, r24	; 14

	/* Hardware Initialization */
	LEDs_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     200:	b7 d5       	rcall	.+2926   	; 0xd70 <USB_Init>

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
}
     202:	81 c0       	rjmp	.+258    	; 0x306 <DataflashManager_ResetDataflashProtections>

00000204 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     204:	ce df       	rcall	.-100    	; 0x1a2 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     206:	8b b1       	in	r24, 0x0b	; 11
     208:	8f 70       	andi	r24, 0x0F	; 15
     20a:	80 61       	ori	r24, 0x10	; 16
     20c:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     20e:	78 94       	sei

	for (;;)
	{
		MS_Device_USBTask(&Disk_MS_Interface);
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	91 e0       	ldi	r25, 0x01	; 1
     214:	0e 94 cd 0a 	call	0x159a	; 0x159a <MS_Device_USBTask>
		USB_USBTask();
     218:	0e 94 b4 0a 	call	0x1568	; 0x1568 <USB_USBTask>
     21c:	f9 cf       	rjmp	.-14     	; 0x210 <main+0xc>

0000021e <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     21e:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     220:	92 30       	cpi	r25, 0x02	; 2
     222:	49 f0       	breq	.+18     	; 0x236 <CALLBACK_USB_GetDescriptor+0x18>
     224:	93 30       	cpi	r25, 0x03	; 3
     226:	61 f0       	breq	.+24     	; 0x240 <CALLBACK_USB_GetDescriptor+0x22>
     228:	91 30       	cpi	r25, 0x01	; 1
     22a:	f9 f4       	brne	.+62     	; 0x26a <CALLBACK_USB_GetDescriptor+0x4c>
     22c:	e8 e9       	ldi	r30, 0x98	; 152
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	22 e1       	ldi	r18, 0x12	; 18
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	1e c0       	rjmp	.+60     	; 0x272 <CALLBACK_USB_GetDescriptor+0x54>
     236:	ea ea       	ldi	r30, 0xAA	; 170
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	20 e2       	ldi	r18, 0x20	; 32
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	19 c0       	rjmp	.+50     	; 0x272 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     240:	81 30       	cpi	r24, 0x01	; 1
     242:	49 f0       	breq	.+18     	; 0x256 <CALLBACK_USB_GetDescriptor+0x38>
     244:	81 30       	cpi	r24, 0x01	; 1
     246:	18 f0       	brcs	.+6      	; 0x24e <CALLBACK_USB_GetDescriptor+0x30>
     248:	82 30       	cpi	r24, 0x02	; 2
     24a:	79 f4       	brne	.+30     	; 0x26a <CALLBACK_USB_GetDescriptor+0x4c>
     24c:	08 c0       	rjmp	.+16     	; 0x25e <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     24e:	ea ec       	ldi	r30, 0xCA	; 202
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	84 91       	lpm	r24, Z+
     254:	07 c0       	rjmp	.+14     	; 0x264 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     256:	ee ec       	ldi	r30, 0xCE	; 206
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	84 91       	lpm	r24, Z+
     25c:	03 c0       	rjmp	.+6      	; 0x264 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     25e:	e8 ee       	ldi	r30, 0xE8	; 232
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	84 91       	lpm	r24, Z+
     264:	28 2f       	mov	r18, r24
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	04 c0       	rjmp	.+8      	; 0x272 <CALLBACK_USB_GetDescriptor+0x54>
     26a:	e0 e0       	ldi	r30, 0x00	; 0
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     272:	ed 93       	st	X+, r30
     274:	fc 93       	st	X, r31
	return Size;
}
     276:	c9 01       	movw	r24, r18
     278:	08 95       	ret

0000027a <Dataflash_SelectChipFromPage>:
			 *
			 *  \param[in] PageAddress  Address of the page to manipulate, ranging from
			 *                          ((DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS) - 1).
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
     27a:	9c 01       	movw	r18, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     27c:	8e b1       	in	r24, 0x0e	; 14
     27e:	83 60       	ori	r24, 0x03	; 3
     280:	8e b9       	out	0x0e, r24	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     282:	80 e4       	ldi	r24, 0x40	; 64
     284:	20 30       	cpi	r18, 0x00	; 0
     286:	38 07       	cpc	r19, r24
     288:	58 f4       	brcc	.+22     	; 0x2a0 <Dataflash_SelectChipFromPage+0x26>
				  return;

				if (PageAddress & 0x01)
     28a:	20 ff       	sbrs	r18, 0
     28c:	05 c0       	rjmp	.+10     	; 0x298 <Dataflash_SelectChipFromPage+0x1e>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     28e:	8e b1       	in	r24, 0x0e	; 14
     290:	8c 7f       	andi	r24, 0xFC	; 252
     292:	81 60       	ori	r24, 0x01	; 1
     294:	8e b9       	out	0x0e, r24	; 14
     296:	08 95       	ret
     298:	8e b1       	in	r24, 0x0e	; 14
     29a:	8c 7f       	andi	r24, 0xFC	; 252
     29c:	82 60       	ori	r24, 0x02	; 2
     29e:	8e b9       	out	0x0e, r24	; 14
     2a0:	08 95       	ret

000002a2 <Dataflash_ToggleSelectedChipCS>:
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     2a2:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     2a4:	9e b1       	in	r25, 0x0e	; 14
     2a6:	93 60       	ori	r25, 0x03	; 3
     2a8:	9e b9       	out	0x0e, r25	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     2aa:	9e b1       	in	r25, 0x0e	; 14
     2ac:	83 70       	andi	r24, 0x03	; 3
     2ae:	9c 7f       	andi	r25, 0xFC	; 252
     2b0:	89 2b       	or	r24, r25
     2b2:	8e b9       	out	0x0e, r24	; 14
     2b4:	08 95       	ret

000002b6 <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     2b6:	f5 df       	rcall	.-22     	; 0x2a2 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     2b8:	87 ed       	ldi	r24, 0xD7	; 215
     2ba:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     2bc:	0d b4       	in	r0, 0x2d	; 45
     2be:	07 fe       	sbrs	r0, 7
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <Dataflash_WaitWhileBusy+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     2c2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     2c4:	0d b4       	in	r0, 0x2d	; 45
     2c6:	07 fe       	sbrs	r0, 7
     2c8:	fd cf       	rjmp	.-6      	; 0x2c4 <Dataflash_WaitWhileBusy+0xe>
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     2ca:	0e b4       	in	r0, 0x2e	; 46
     2cc:	07 fe       	sbrs	r0, 7
     2ce:	f9 cf       	rjmp	.-14     	; 0x2c2 <Dataflash_WaitWhileBusy+0xc>
				Dataflash_ToggleSelectedChipCS();
			}
     2d0:	e8 cf       	rjmp	.-48     	; 0x2a2 <Dataflash_ToggleSelectedChipCS>

000002d2 <Dataflash_SendAddressBytes>:
			 *  \param[in] BufferByte   Address within the dataflash's buffer
			 */
			static inline void Dataflash_SendAddressBytes(uint16_t PageAddress,
			                                              const uint16_t BufferByte)
			{
				PageAddress >>= 1;
     2d2:	9c 01       	movw	r18, r24
     2d4:	36 95       	lsr	r19
     2d6:	27 95       	ror	r18

				Dataflash_SendByte(PageAddress >> 5);
     2d8:	36 e0       	ldi	r19, 0x06	; 6
     2da:	96 95       	lsr	r25
     2dc:	87 95       	ror	r24
     2de:	3a 95       	dec	r19
     2e0:	e1 f7       	brne	.-8      	; 0x2da <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     2e2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     2e4:	0d b4       	in	r0, 0x2d	; 45
     2e6:	07 fe       	sbrs	r0, 7
     2e8:	fd cf       	rjmp	.-6      	; 0x2e4 <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     2ea:	82 2f       	mov	r24, r18
     2ec:	88 0f       	add	r24, r24
     2ee:	88 0f       	add	r24, r24
     2f0:	88 0f       	add	r24, r24
     2f2:	87 2b       	or	r24, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     2f4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     2f6:	0d b4       	in	r0, 0x2d	; 45
     2f8:	07 fe       	sbrs	r0, 7
     2fa:	fd cf       	rjmp	.-6      	; 0x2f6 <Dataflash_SendAddressBytes+0x24>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     2fc:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     2fe:	0d b4       	in	r0, 0x2d	; 45
     300:	07 fe       	sbrs	r0, 7
     302:	fd cf       	rjmp	.-6      	; 0x2fe <Dataflash_SendAddressBytes+0x2c>
				Dataflash_SendByte(BufferByte);
			}
     304:	08 95       	ret

00000306 <DataflashManager_ResetDataflashProtections>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     306:	8e b1       	in	r24, 0x0e	; 14
     308:	8c 7f       	andi	r24, 0xFC	; 252
     30a:	82 60       	ori	r24, 0x02	; 2
     30c:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     30e:	87 ed       	ldi	r24, 0xD7	; 215
     310:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     312:	0d b4       	in	r0, 0x2d	; 45
     314:	07 fe       	sbrs	r0, 7
     316:	fd cf       	rjmp	.-6      	; 0x312 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     318:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     31a:	0d b4       	in	r0, 0x2d	; 45
     31c:	07 fe       	sbrs	r0, 7
     31e:	fd cf       	rjmp	.-6      	; 0x31a <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     320:	0e b4       	in	r0, 0x2e	; 46
     322:	01 fe       	sbrs	r0, 1
     324:	15 c0       	rjmp	.+42     	; 0x350 <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
     326:	bd df       	rcall	.-134    	; 0x2a2 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     328:	8d e3       	ldi	r24, 0x3D	; 61
     32a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     32c:	0d b4       	in	r0, 0x2d	; 45
     32e:	07 fe       	sbrs	r0, 7
     330:	fd cf       	rjmp	.-6      	; 0x32c <DataflashManager_ResetDataflashProtections+0x26>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     332:	8a e2       	ldi	r24, 0x2A	; 42
     334:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     336:	0d b4       	in	r0, 0x2d	; 45
     338:	07 fe       	sbrs	r0, 7
     33a:	fd cf       	rjmp	.-6      	; 0x336 <DataflashManager_ResetDataflashProtections+0x30>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     33c:	8f e7       	ldi	r24, 0x7F	; 127
     33e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     340:	0d b4       	in	r0, 0x2d	; 45
     342:	07 fe       	sbrs	r0, 7
     344:	fd cf       	rjmp	.-6      	; 0x340 <DataflashManager_ResetDataflashProtections+0x3a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     346:	8a e9       	ldi	r24, 0x9A	; 154
     348:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     34a:	0d b4       	in	r0, 0x2d	; 45
     34c:	07 fe       	sbrs	r0, 7
     34e:	fd cf       	rjmp	.-6      	; 0x34a <DataflashManager_ResetDataflashProtections+0x44>
     350:	8e b1       	in	r24, 0x0e	; 14
     352:	8c 7f       	andi	r24, 0xFC	; 252
     354:	81 60       	ori	r24, 0x01	; 1
     356:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     358:	87 ed       	ldi	r24, 0xD7	; 215
     35a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     35c:	0d b4       	in	r0, 0x2d	; 45
     35e:	07 fe       	sbrs	r0, 7
     360:	fd cf       	rjmp	.-6      	; 0x35c <DataflashManager_ResetDataflashProtections+0x56>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     362:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     364:	0d b4       	in	r0, 0x2d	; 45
     366:	07 fe       	sbrs	r0, 7
     368:	fd cf       	rjmp	.-6      	; 0x364 <DataflashManager_ResetDataflashProtections+0x5e>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     36a:	0e b4       	in	r0, 0x2e	; 46
     36c:	01 fe       	sbrs	r0, 1
     36e:	15 c0       	rjmp	.+42     	; 0x39a <DataflashManager_ResetDataflashProtections+0x94>
	{
		Dataflash_ToggleSelectedChipCS();
     370:	98 df       	rcall	.-208    	; 0x2a2 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     372:	8d e3       	ldi	r24, 0x3D	; 61
     374:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     376:	0d b4       	in	r0, 0x2d	; 45
     378:	07 fe       	sbrs	r0, 7
     37a:	fd cf       	rjmp	.-6      	; 0x376 <DataflashManager_ResetDataflashProtections+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     37c:	8a e2       	ldi	r24, 0x2A	; 42
     37e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     380:	0d b4       	in	r0, 0x2d	; 45
     382:	07 fe       	sbrs	r0, 7
     384:	fd cf       	rjmp	.-6      	; 0x380 <DataflashManager_ResetDataflashProtections+0x7a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     386:	8f e7       	ldi	r24, 0x7F	; 127
     388:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     38a:	0d b4       	in	r0, 0x2d	; 45
     38c:	07 fe       	sbrs	r0, 7
     38e:	fd cf       	rjmp	.-6      	; 0x38a <DataflashManager_ResetDataflashProtections+0x84>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     390:	8a e9       	ldi	r24, 0x9A	; 154
     392:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     394:	0d b4       	in	r0, 0x2d	; 45
     396:	07 fe       	sbrs	r0, 7
     398:	fd cf       	rjmp	.-6      	; 0x394 <DataflashManager_ResetDataflashProtections+0x8e>
     39a:	8e b1       	in	r24, 0x0e	; 14
     39c:	83 60       	ori	r24, 0x03	; 3
     39e:	8e b9       	out	0x0e, r24	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     3a0:	08 95       	ret

000003a2 <DataflashManager_CheckDataflashOperation>:
     3a2:	8e b1       	in	r24, 0x0e	; 14
     3a4:	8c 7f       	andi	r24, 0xFC	; 252
     3a6:	82 60       	ori	r24, 0x02	; 2
     3a8:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3aa:	8f e9       	ldi	r24, 0x9F	; 159
     3ac:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     3ae:	0d b4       	in	r0, 0x2d	; 45
     3b0:	07 fe       	sbrs	r0, 7
     3b2:	fd cf       	rjmp	.-6      	; 0x3ae <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     3b4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     3b6:	0d b4       	in	r0, 0x2d	; 45
     3b8:	07 fe       	sbrs	r0, 7
     3ba:	fd cf       	rjmp	.-6      	; 0x3b6 <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     3bc:	9e b5       	in	r25, 0x2e	; 46
     3be:	8e b1       	in	r24, 0x0e	; 14
     3c0:	83 60       	ori	r24, 0x03	; 3
     3c2:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     3c4:	9f 31       	cpi	r25, 0x1F	; 31
     3c6:	11 f0       	breq	.+4      	; 0x3cc <DataflashManager_CheckDataflashOperation+0x2a>
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	08 95       	ret
     3cc:	8e b1       	in	r24, 0x0e	; 14
     3ce:	8c 7f       	andi	r24, 0xFC	; 252
     3d0:	81 60       	ori	r24, 0x01	; 1
     3d2:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3d4:	8f e9       	ldi	r24, 0x9F	; 159
     3d6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     3d8:	0d b4       	in	r0, 0x2d	; 45
     3da:	07 fe       	sbrs	r0, 7
     3dc:	fd cf       	rjmp	.-6      	; 0x3d8 <DataflashManager_CheckDataflashOperation+0x36>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     3de:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     3e0:	0d b4       	in	r0, 0x2d	; 45
     3e2:	07 fe       	sbrs	r0, 7
     3e4:	fd cf       	rjmp	.-6      	; 0x3e0 <DataflashManager_CheckDataflashOperation+0x3e>
				return SPDR;
     3e6:	9e b5       	in	r25, 0x2e	; 46
     3e8:	8e b1       	in	r24, 0x0e	; 14
     3ea:	83 60       	ori	r24, 0x03	; 3
     3ec:	8e b9       	out	0x0e, r24	; 14
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	9f 31       	cpi	r25, 0x1F	; 31
     3f2:	09 f4       	brne	.+2      	; 0x3f6 <DataflashManager_CheckDataflashOperation+0x54>
     3f4:	81 e0       	ldi	r24, 0x01	; 1
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     3f6:	08 95       	ret

000003f8 <DataflashManager_ReadBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     3f8:	af 92       	push	r10
     3fa:	bf 92       	push	r11
     3fc:	cf 92       	push	r12
     3fe:	df 92       	push	r13
     400:	ef 92       	push	r14
     402:	ff 92       	push	r15
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	df 93       	push	r29
     40a:	cf 93       	push	r28
     40c:	0f 92       	push	r0
     40e:	cd b7       	in	r28, 0x3d	; 61
     410:	de b7       	in	r29, 0x3e	; 62
     412:	5c 01       	movw	r10, r24
     414:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     416:	e9 e0       	ldi	r30, 0x09	; 9
     418:	44 0f       	add	r20, r20
     41a:	55 1f       	adc	r21, r21
     41c:	66 1f       	adc	r22, r22
     41e:	77 1f       	adc	r23, r23
     420:	ea 95       	dec	r30
     422:	d1 f7       	brne	.-12     	; 0x418 <DataflashManager_ReadBlocks+0x20>
     424:	db 01       	movw	r26, r22
     426:	ca 01       	movw	r24, r20
     428:	3a e0       	ldi	r19, 0x0A	; 10
     42a:	b6 95       	lsr	r27
     42c:	a7 95       	ror	r26
     42e:	97 95       	ror	r25
     430:	87 95       	ror	r24
     432:	3a 95       	dec	r19
     434:	d1 f7       	brne	.-12     	; 0x42a <DataflashManager_ReadBlocks+0x32>
     436:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     438:	2f ef       	ldi	r18, 0xFF	; 255
     43a:	c2 2e       	mov	r12, r18
     43c:	23 e0       	ldi	r18, 0x03	; 3
     43e:	d2 2e       	mov	r13, r18
     440:	c4 22       	and	r12, r20
     442:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     444:	1a df       	rcall	.-460    	; 0x27a <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     446:	82 ed       	ldi	r24, 0xD2	; 210
     448:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     44a:	0d b4       	in	r0, 0x2d	; 45
     44c:	07 fe       	sbrs	r0, 7
     44e:	fd cf       	rjmp	.-6      	; 0x44a <DataflashManager_ReadBlocks+0x52>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     450:	c8 01       	movw	r24, r16
     452:	b6 01       	movw	r22, r12
     454:	3e df       	rcall	.-388    	; 0x2d2 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     456:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     458:	0d b4       	in	r0, 0x2d	; 45
     45a:	07 fe       	sbrs	r0, 7
     45c:	fd cf       	rjmp	.-6      	; 0x458 <DataflashManager_ReadBlocks+0x60>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     45e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     460:	0d b4       	in	r0, 0x2d	; 45
     462:	07 fe       	sbrs	r0, 7
     464:	fd cf       	rjmp	.-6      	; 0x460 <DataflashManager_ReadBlocks+0x68>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     466:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     468:	0d b4       	in	r0, 0x2d	; 45
     46a:	07 fe       	sbrs	r0, 7
     46c:	fd cf       	rjmp	.-6      	; 0x468 <DataflashManager_ReadBlocks+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     46e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     470:	0d b4       	in	r0, 0x2d	; 45
     472:	07 fe       	sbrs	r0, 7
     474:	fd cf       	rjmp	.-6      	; 0x470 <DataflashManager_ReadBlocks+0x78>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     476:	fd d3       	rcall	.+2042   	; 0xc72 <Endpoint_WaitUntilReady>
     478:	88 23       	and	r24, r24
     47a:	09 f0       	breq	.+2      	; 0x47e <DataflashManager_ReadBlocks+0x86>
     47c:	c5 c0       	rjmp	.+394    	; 0x608 <DataflashManager_ReadBlocks+0x210>
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     47e:	94 e0       	ldi	r25, 0x04	; 4
     480:	d6 94       	lsr	r13
     482:	c7 94       	ror	r12
     484:	9a 95       	dec	r25
     486:	e1 f7       	brne	.-8      	; 0x480 <DataflashManager_ReadBlocks+0x88>
     488:	9c 2d       	mov	r25, r12
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     48a:	82 ed       	ldi	r24, 0xD2	; 210
     48c:	c8 2e       	mov	r12, r24
     48e:	ac c0       	rjmp	.+344    	; 0x5e8 <DataflashManager_ReadBlocks+0x1f0>
     490:	dd 24       	eor	r13, r13
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     492:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     496:	85 fd       	sbrc	r24, 5
     498:	0b c0       	rjmp	.+22     	; 0x4b0 <DataflashManager_ReadBlocks+0xb8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     49a:	80 91 e8 00 	lds	r24, 0x00E8
     49e:	8e 77       	andi	r24, 0x7E	; 126
     4a0:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     4a4:	99 83       	std	Y+1, r25	; 0x01
     4a6:	e5 d3       	rcall	.+1994   	; 0xc72 <Endpoint_WaitUntilReady>
     4a8:	99 81       	ldd	r25, Y+1	; 0x01
     4aa:	88 23       	and	r24, r24
     4ac:	09 f0       	breq	.+2      	; 0x4b0 <DataflashManager_ReadBlocks+0xb8>
     4ae:	ac c0       	rjmp	.+344    	; 0x608 <DataflashManager_ReadBlocks+0x210>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     4b0:	90 34       	cpi	r25, 0x40	; 64
     4b2:	e9 f4       	brne	.+58     	; 0x4ee <DataflashManager_ReadBlocks+0xf6>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     4b4:	0f 5f       	subi	r16, 0xFF	; 255
     4b6:	1f 4f       	sbci	r17, 0xFF	; 255

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     4b8:	c8 01       	movw	r24, r16
     4ba:	df de       	rcall	.-578    	; 0x27a <Dataflash_SelectChipFromPage>
     4bc:	ce bc       	out	0x2e, r12	; 46
				while (!(SPSR & (1 << SPIF)));
     4be:	0d b4       	in	r0, 0x2d	; 45
     4c0:	07 fe       	sbrs	r0, 7
     4c2:	fd cf       	rjmp	.-6      	; 0x4be <DataflashManager_ReadBlocks+0xc6>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     4c4:	c8 01       	movw	r24, r16
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	03 df       	rcall	.-506    	; 0x2d2 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4cc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4ce:	0d b4       	in	r0, 0x2d	; 45
     4d0:	07 fe       	sbrs	r0, 7
     4d2:	fd cf       	rjmp	.-6      	; 0x4ce <DataflashManager_ReadBlocks+0xd6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4d4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4d6:	0d b4       	in	r0, 0x2d	; 45
     4d8:	07 fe       	sbrs	r0, 7
     4da:	fd cf       	rjmp	.-6      	; 0x4d6 <DataflashManager_ReadBlocks+0xde>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4dc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4de:	0d b4       	in	r0, 0x2d	; 45
     4e0:	07 fe       	sbrs	r0, 7
     4e2:	fd cf       	rjmp	.-6      	; 0x4de <DataflashManager_ReadBlocks+0xe6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4e4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4e6:	0d b4       	in	r0, 0x2d	; 45
     4e8:	07 fe       	sbrs	r0, 7
     4ea:	fd cf       	rjmp	.-6      	; 0x4e6 <DataflashManager_ReadBlocks+0xee>
     4ec:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     4ee:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4f0:	0d b4       	in	r0, 0x2d	; 45
     4f2:	07 fe       	sbrs	r0, 7
     4f4:	fd cf       	rjmp	.-6      	; 0x4f0 <DataflashManager_ReadBlocks+0xf8>
				return SPDR;
     4f6:	8e b5       	in	r24, 0x2e	; 46
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     4f8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     4fc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4fe:	0d b4       	in	r0, 0x2d	; 45
     500:	07 fe       	sbrs	r0, 7
     502:	fd cf       	rjmp	.-6      	; 0x4fe <DataflashManager_ReadBlocks+0x106>
				return SPDR;
     504:	8e b5       	in	r24, 0x2e	; 46
     506:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     50a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     50c:	0d b4       	in	r0, 0x2d	; 45
     50e:	07 fe       	sbrs	r0, 7
     510:	fd cf       	rjmp	.-6      	; 0x50c <DataflashManager_ReadBlocks+0x114>
				return SPDR;
     512:	8e b5       	in	r24, 0x2e	; 46
     514:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     518:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     51a:	0d b4       	in	r0, 0x2d	; 45
     51c:	07 fe       	sbrs	r0, 7
     51e:	fd cf       	rjmp	.-6      	; 0x51a <DataflashManager_ReadBlocks+0x122>
				return SPDR;
     520:	8e b5       	in	r24, 0x2e	; 46
     522:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     526:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     528:	0d b4       	in	r0, 0x2d	; 45
     52a:	07 fe       	sbrs	r0, 7
     52c:	fd cf       	rjmp	.-6      	; 0x528 <DataflashManager_ReadBlocks+0x130>
				return SPDR;
     52e:	8e b5       	in	r24, 0x2e	; 46
     530:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     534:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     536:	0d b4       	in	r0, 0x2d	; 45
     538:	07 fe       	sbrs	r0, 7
     53a:	fd cf       	rjmp	.-6      	; 0x536 <DataflashManager_ReadBlocks+0x13e>
				return SPDR;
     53c:	8e b5       	in	r24, 0x2e	; 46
     53e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     542:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     544:	0d b4       	in	r0, 0x2d	; 45
     546:	07 fe       	sbrs	r0, 7
     548:	fd cf       	rjmp	.-6      	; 0x544 <DataflashManager_ReadBlocks+0x14c>
				return SPDR;
     54a:	8e b5       	in	r24, 0x2e	; 46
     54c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     550:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     552:	0d b4       	in	r0, 0x2d	; 45
     554:	07 fe       	sbrs	r0, 7
     556:	fd cf       	rjmp	.-6      	; 0x552 <DataflashManager_ReadBlocks+0x15a>
				return SPDR;
     558:	8e b5       	in	r24, 0x2e	; 46
     55a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     55e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     560:	0d b4       	in	r0, 0x2d	; 45
     562:	07 fe       	sbrs	r0, 7
     564:	fd cf       	rjmp	.-6      	; 0x560 <DataflashManager_ReadBlocks+0x168>
				return SPDR;
     566:	8e b5       	in	r24, 0x2e	; 46
     568:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     56c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     56e:	0d b4       	in	r0, 0x2d	; 45
     570:	07 fe       	sbrs	r0, 7
     572:	fd cf       	rjmp	.-6      	; 0x56e <DataflashManager_ReadBlocks+0x176>
				return SPDR;
     574:	8e b5       	in	r24, 0x2e	; 46
     576:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     57a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     57c:	0d b4       	in	r0, 0x2d	; 45
     57e:	07 fe       	sbrs	r0, 7
     580:	fd cf       	rjmp	.-6      	; 0x57c <DataflashManager_ReadBlocks+0x184>
				return SPDR;
     582:	8e b5       	in	r24, 0x2e	; 46
     584:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     588:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     58a:	0d b4       	in	r0, 0x2d	; 45
     58c:	07 fe       	sbrs	r0, 7
     58e:	fd cf       	rjmp	.-6      	; 0x58a <DataflashManager_ReadBlocks+0x192>
				return SPDR;
     590:	8e b5       	in	r24, 0x2e	; 46
     592:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     596:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     598:	0d b4       	in	r0, 0x2d	; 45
     59a:	07 fe       	sbrs	r0, 7
     59c:	fd cf       	rjmp	.-6      	; 0x598 <DataflashManager_ReadBlocks+0x1a0>
				return SPDR;
     59e:	8e b5       	in	r24, 0x2e	; 46
     5a0:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     5a4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5a6:	0d b4       	in	r0, 0x2d	; 45
     5a8:	07 fe       	sbrs	r0, 7
     5aa:	fd cf       	rjmp	.-6      	; 0x5a6 <DataflashManager_ReadBlocks+0x1ae>
				return SPDR;
     5ac:	8e b5       	in	r24, 0x2e	; 46
     5ae:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     5b2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5b4:	0d b4       	in	r0, 0x2d	; 45
     5b6:	07 fe       	sbrs	r0, 7
     5b8:	fd cf       	rjmp	.-6      	; 0x5b4 <DataflashManager_ReadBlocks+0x1bc>
				return SPDR;
     5ba:	8e b5       	in	r24, 0x2e	; 46
     5bc:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     5c0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5c2:	0d b4       	in	r0, 0x2d	; 45
     5c4:	07 fe       	sbrs	r0, 7
     5c6:	fd cf       	rjmp	.-6      	; 0x5c2 <DataflashManager_ReadBlocks+0x1ca>
				return SPDR;
     5c8:	8e b5       	in	r24, 0x2e	; 46
     5ca:	80 93 f1 00 	sts	0x00F1, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     5ce:	f5 01       	movw	r30, r10
     5d0:	86 a9       	ldd	r24, Z+54	; 0x36
     5d2:	88 23       	and	r24, r24
     5d4:	c9 f4       	brne	.+50     	; 0x608 <DataflashManager_ReadBlocks+0x210>
			Endpoint_Write_Byte(Dataflash_ReceiveByte());
			Endpoint_Write_Byte(Dataflash_ReceiveByte());
			Endpoint_Write_Byte(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     5d6:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     5d8:	d3 94       	inc	r13
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     5da:	f0 e2       	ldi	r31, 0x20	; 32
     5dc:	df 16       	cp	r13, r31
     5de:	09 f0       	breq	.+2      	; 0x5e2 <DataflashManager_ReadBlocks+0x1ea>
     5e0:	58 cf       	rjmp	.-336    	; 0x492 <DataflashManager_ReadBlocks+0x9a>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     5e2:	08 94       	sec
     5e4:	e1 08       	sbc	r14, r1
     5e6:	f1 08       	sbc	r15, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	09 f0       	breq	.+2      	; 0x5f0 <DataflashManager_ReadBlocks+0x1f8>
     5ee:	50 cf       	rjmp	.-352    	; 0x490 <DataflashManager_ReadBlocks+0x98>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     5f0:	80 91 e8 00 	lds	r24, 0x00E8
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     5f4:	85 fd       	sbrc	r24, 5
     5f6:	05 c0       	rjmp	.+10     	; 0x602 <DataflashManager_ReadBlocks+0x20a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5f8:	80 91 e8 00 	lds	r24, 0x00E8
     5fc:	8e 77       	andi	r24, 0x7E	; 126
     5fe:	80 93 e8 00 	sts	0x00E8, r24
     602:	8e b1       	in	r24, 0x0e	; 14
     604:	83 60       	ori	r24, 0x03	; 3
     606:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     608:	0f 90       	pop	r0
     60a:	cf 91       	pop	r28
     60c:	df 91       	pop	r29
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	ff 90       	pop	r15
     614:	ef 90       	pop	r14
     616:	df 90       	pop	r13
     618:	cf 90       	pop	r12
     61a:	bf 90       	pop	r11
     61c:	af 90       	pop	r10
     61e:	08 95       	ret

00000620 <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     620:	8f 92       	push	r8
     622:	9f 92       	push	r9
     624:	af 92       	push	r10
     626:	bf 92       	push	r11
     628:	cf 92       	push	r12
     62a:	df 92       	push	r13
     62c:	ef 92       	push	r14
     62e:	ff 92       	push	r15
     630:	0f 93       	push	r16
     632:	1f 93       	push	r17
     634:	df 93       	push	r29
     636:	cf 93       	push	r28
     638:	0f 92       	push	r0
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
     63e:	5c 01       	movw	r10, r24
     640:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     642:	09 e0       	ldi	r16, 0x09	; 9
     644:	44 0f       	add	r20, r20
     646:	55 1f       	adc	r21, r21
     648:	66 1f       	adc	r22, r22
     64a:	77 1f       	adc	r23, r23
     64c:	0a 95       	dec	r16
     64e:	d1 f7       	brne	.-12     	; 0x644 <DataflashManager_WriteBlocks+0x24>
     650:	db 01       	movw	r26, r22
     652:	ca 01       	movw	r24, r20
     654:	1a e0       	ldi	r17, 0x0A	; 10
     656:	b6 95       	lsr	r27
     658:	a7 95       	ror	r26
     65a:	97 95       	ror	r25
     65c:	87 95       	ror	r24
     65e:	1a 95       	dec	r17
     660:	d1 f7       	brne	.-12     	; 0x656 <DataflashManager_WriteBlocks+0x36>
     662:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     664:	bf ef       	ldi	r27, 0xFF	; 255
     666:	cb 2e       	mov	r12, r27
     668:	b3 e0       	ldi	r27, 0x03	; 3
     66a:	db 2e       	mov	r13, r27
     66c:	c4 22       	and	r12, r20
     66e:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     670:	04 de       	rcall	.-1016   	; 0x27a <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     672:	83 e5       	ldi	r24, 0x53	; 83
     674:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     676:	0d b4       	in	r0, 0x2d	; 45
     678:	07 fe       	sbrs	r0, 7
     67a:	fd cf       	rjmp	.-6      	; 0x676 <DataflashManager_WriteBlocks+0x56>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     67c:	c8 01       	movw	r24, r16
     67e:	60 e0       	ldi	r22, 0x00	; 0
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	27 de       	rcall	.-946    	; 0x2d2 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     684:	18 de       	rcall	.-976    	; 0x2b6 <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     686:	84 e8       	ldi	r24, 0x84	; 132
     688:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     68a:	0d b4       	in	r0, 0x2d	; 45
     68c:	07 fe       	sbrs	r0, 7
     68e:	fd cf       	rjmp	.-6      	; 0x68a <DataflashManager_WriteBlocks+0x6a>
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	b6 01       	movw	r22, r12
     696:	1d de       	rcall	.-966    	; 0x2d2 <Dataflash_SendAddressBytes>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     698:	ec d2       	rcall	.+1496   	; 0xc72 <Endpoint_WaitUntilReady>
     69a:	88 23       	and	r24, r24
     69c:	09 f0       	breq	.+2      	; 0x6a0 <DataflashManager_WriteBlocks+0x80>
     69e:	ea c0       	rjmp	.+468    	; 0x874 <DataflashManager_WriteBlocks+0x254>
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     6a0:	a4 e0       	ldi	r26, 0x04	; 4
     6a2:	d6 94       	lsr	r13
     6a4:	c7 94       	ror	r12
     6a6:	aa 95       	dec	r26
     6a8:	e1 f7       	brne	.-8      	; 0x6a2 <DataflashManager_WriteBlocks+0x82>
     6aa:	9c 2d       	mov	r25, r12
     6ac:	47 01       	movw	r8, r14
     6ae:	f5 e0       	ldi	r31, 0x05	; 5
     6b0:	88 0c       	add	r8, r8
     6b2:	99 1c       	adc	r9, r9
     6b4:	fa 95       	dec	r31
     6b6:	e1 f7       	brne	.-8      	; 0x6b0 <DataflashManager_WriteBlocks+0x90>
     6b8:	dd 24       	eor	r13, r13
     6ba:	bd c0       	rjmp	.+378    	; 0x836 <DataflashManager_WriteBlocks+0x216>
     6bc:	cc 24       	eor	r12, r12
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     6be:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     6c2:	85 fd       	sbrc	r24, 5
     6c4:	0b c0       	rjmp	.+22     	; 0x6dc <DataflashManager_WriteBlocks+0xbc>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     6c6:	80 91 e8 00 	lds	r24, 0x00E8
     6ca:	8b 77       	andi	r24, 0x7B	; 123
     6cc:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     6d0:	99 83       	std	Y+1, r25	; 0x01
     6d2:	cf d2       	rcall	.+1438   	; 0xc72 <Endpoint_WaitUntilReady>
     6d4:	99 81       	ldd	r25, Y+1	; 0x01
     6d6:	88 23       	and	r24, r24
     6d8:	09 f0       	breq	.+2      	; 0x6dc <DataflashManager_WriteBlocks+0xbc>
     6da:	cc c0       	rjmp	.+408    	; 0x874 <DataflashManager_WriteBlocks+0x254>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     6dc:	90 34       	cpi	r25, 0x40	; 64
     6de:	09 f0       	breq	.+2      	; 0x6e2 <DataflashManager_WriteBlocks+0xc2>
     6e0:	39 c0       	rjmp	.+114    	; 0x754 <DataflashManager_WriteBlocks+0x134>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     6e2:	e9 dd       	rcall	.-1070   	; 0x2b6 <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     6e4:	dd 20       	and	r13, r13
     6e6:	11 f4       	brne	.+4      	; 0x6ec <DataflashManager_WriteBlocks+0xcc>
     6e8:	83 e8       	ldi	r24, 0x83	; 131
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <DataflashManager_WriteBlocks+0xce>
     6ec:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6ee:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6f0:	0d b4       	in	r0, 0x2d	; 45
     6f2:	07 fe       	sbrs	r0, 7
     6f4:	fd cf       	rjmp	.-6      	; 0x6f0 <DataflashManager_WriteBlocks+0xd0>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     6f6:	c8 01       	movw	r24, r16
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea dd       	rcall	.-1068   	; 0x2d2 <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     6fe:	0f 5f       	subi	r16, 0xFF	; 255
     700:	1f 4f       	sbci	r17, 0xFF	; 255
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     702:	8e b1       	in	r24, 0x0e	; 14

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     704:	83 70       	andi	r24, 0x03	; 3
     706:	81 30       	cpi	r24, 0x01	; 1
     708:	09 f4       	brne	.+2      	; 0x70c <DataflashManager_WriteBlocks+0xec>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     70a:	d8 26       	eor	r13, r24

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     70c:	c8 01       	movw	r24, r16
     70e:	b5 dd       	rcall	.-1174   	; 0x27a <Dataflash_SelectChipFromPage>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     710:	20 e4       	ldi	r18, 0x40	; 64
     712:	82 16       	cp	r8, r18
     714:	91 04       	cpc	r9, r1
     716:	78 f4       	brcc	.+30     	; 0x736 <DataflashManager_WriteBlocks+0x116>
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     718:	ce dd       	rcall	.-1124   	; 0x2b6 <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     71a:	dd 20       	and	r13, r13
     71c:	11 f4       	brne	.+4      	; 0x722 <DataflashManager_WriteBlocks+0x102>
     71e:	83 e5       	ldi	r24, 0x53	; 83
     720:	01 c0       	rjmp	.+2      	; 0x724 <DataflashManager_WriteBlocks+0x104>
     722:	85 e5       	ldi	r24, 0x55	; 85
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     724:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     726:	0d b4       	in	r0, 0x2d	; 45
     728:	07 fe       	sbrs	r0, 7
     72a:	fd cf       	rjmp	.-6      	; 0x726 <DataflashManager_WriteBlocks+0x106>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     72c:	c8 01       	movw	r24, r16
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	cf dd       	rcall	.-1122   	; 0x2d2 <Dataflash_SendAddressBytes>
					Dataflash_WaitWhileBusy();
     734:	c0 dd       	rcall	.-1152   	; 0x2b6 <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     736:	dd 20       	and	r13, r13
     738:	11 f4       	brne	.+4      	; 0x73e <DataflashManager_WriteBlocks+0x11e>
     73a:	84 e8       	ldi	r24, 0x84	; 132
     73c:	01 c0       	rjmp	.+2      	; 0x740 <DataflashManager_WriteBlocks+0x120>
     73e:	87 e8       	ldi	r24, 0x87	; 135
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     740:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     742:	0d b4       	in	r0, 0x2d	; 45
     744:	07 fe       	sbrs	r0, 7
     746:	fd cf       	rjmp	.-6      	; 0x742 <DataflashManager_WriteBlocks+0x122>
				Dataflash_SendAddressBytes(0, 0);
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	c0 dd       	rcall	.-1152   	; 0x2d2 <Dataflash_SendAddressBytes>
     752:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     754:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     758:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     75a:	0d b4       	in	r0, 0x2d	; 45
     75c:	07 fe       	sbrs	r0, 7
     75e:	fd cf       	rjmp	.-6      	; 0x75a <DataflashManager_WriteBlocks+0x13a>
     760:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     764:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     766:	0d b4       	in	r0, 0x2d	; 45
     768:	07 fe       	sbrs	r0, 7
     76a:	fd cf       	rjmp	.-6      	; 0x766 <DataflashManager_WriteBlocks+0x146>
     76c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     770:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     772:	0d b4       	in	r0, 0x2d	; 45
     774:	07 fe       	sbrs	r0, 7
     776:	fd cf       	rjmp	.-6      	; 0x772 <DataflashManager_WriteBlocks+0x152>
     778:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     77c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     77e:	0d b4       	in	r0, 0x2d	; 45
     780:	07 fe       	sbrs	r0, 7
     782:	fd cf       	rjmp	.-6      	; 0x77e <DataflashManager_WriteBlocks+0x15e>
     784:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     788:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     78a:	0d b4       	in	r0, 0x2d	; 45
     78c:	07 fe       	sbrs	r0, 7
     78e:	fd cf       	rjmp	.-6      	; 0x78a <DataflashManager_WriteBlocks+0x16a>
     790:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     794:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     796:	0d b4       	in	r0, 0x2d	; 45
     798:	07 fe       	sbrs	r0, 7
     79a:	fd cf       	rjmp	.-6      	; 0x796 <DataflashManager_WriteBlocks+0x176>
     79c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7a0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7a2:	0d b4       	in	r0, 0x2d	; 45
     7a4:	07 fe       	sbrs	r0, 7
     7a6:	fd cf       	rjmp	.-6      	; 0x7a2 <DataflashManager_WriteBlocks+0x182>
     7a8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7ac:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7ae:	0d b4       	in	r0, 0x2d	; 45
     7b0:	07 fe       	sbrs	r0, 7
     7b2:	fd cf       	rjmp	.-6      	; 0x7ae <DataflashManager_WriteBlocks+0x18e>
     7b4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7b8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7ba:	0d b4       	in	r0, 0x2d	; 45
     7bc:	07 fe       	sbrs	r0, 7
     7be:	fd cf       	rjmp	.-6      	; 0x7ba <DataflashManager_WriteBlocks+0x19a>
     7c0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7c4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7c6:	0d b4       	in	r0, 0x2d	; 45
     7c8:	07 fe       	sbrs	r0, 7
     7ca:	fd cf       	rjmp	.-6      	; 0x7c6 <DataflashManager_WriteBlocks+0x1a6>
     7cc:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7d0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7d2:	0d b4       	in	r0, 0x2d	; 45
     7d4:	07 fe       	sbrs	r0, 7
     7d6:	fd cf       	rjmp	.-6      	; 0x7d2 <DataflashManager_WriteBlocks+0x1b2>
     7d8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7dc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7de:	0d b4       	in	r0, 0x2d	; 45
     7e0:	07 fe       	sbrs	r0, 7
     7e2:	fd cf       	rjmp	.-6      	; 0x7de <DataflashManager_WriteBlocks+0x1be>
     7e4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7e8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7ea:	0d b4       	in	r0, 0x2d	; 45
     7ec:	07 fe       	sbrs	r0, 7
     7ee:	fd cf       	rjmp	.-6      	; 0x7ea <DataflashManager_WriteBlocks+0x1ca>
     7f0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7f4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7f6:	0d b4       	in	r0, 0x2d	; 45
     7f8:	07 fe       	sbrs	r0, 7
     7fa:	fd cf       	rjmp	.-6      	; 0x7f6 <DataflashManager_WriteBlocks+0x1d6>
     7fc:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     800:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     802:	0d b4       	in	r0, 0x2d	; 45
     804:	07 fe       	sbrs	r0, 7
     806:	fd cf       	rjmp	.-6      	; 0x802 <DataflashManager_WriteBlocks+0x1e2>
     808:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     80c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     80e:	0d b4       	in	r0, 0x2d	; 45
     810:	07 fe       	sbrs	r0, 7
     812:	fd cf       	rjmp	.-6      	; 0x80e <DataflashManager_WriteBlocks+0x1ee>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     814:	f5 01       	movw	r30, r10
     816:	86 a9       	ldd	r24, Z+54	; 0x36
     818:	88 23       	and	r24, r24
     81a:	61 f5       	brne	.+88     	; 0x874 <DataflashManager_WriteBlocks+0x254>
			Dataflash_SendByte(Endpoint_Read_Byte());
			Dataflash_SendByte(Endpoint_Read_Byte());
			Dataflash_SendByte(Endpoint_Read_Byte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     81c:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     81e:	c3 94       	inc	r12
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     820:	f0 e2       	ldi	r31, 0x20	; 32
     822:	cf 16       	cp	r12, r31
     824:	09 f0       	breq	.+2      	; 0x828 <DataflashManager_WriteBlocks+0x208>
     826:	4b cf       	rjmp	.-362    	; 0x6be <DataflashManager_WriteBlocks+0x9e>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter and reset the sub block counter */
		TotalBlocks--;
     828:	08 94       	sec
     82a:	e1 08       	sbc	r14, r1
     82c:	f1 08       	sbc	r15, r1
     82e:	20 ee       	ldi	r18, 0xE0	; 224
     830:	3f ef       	ldi	r19, 0xFF	; 255
     832:	82 0e       	add	r8, r18
     834:	93 1e       	adc	r9, r19

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     836:	e1 14       	cp	r14, r1
     838:	f1 04       	cpc	r15, r1
     83a:	09 f0       	breq	.+2      	; 0x83e <DataflashManager_WriteBlocks+0x21e>
     83c:	3f cf       	rjmp	.-386    	; 0x6bc <DataflashManager_WriteBlocks+0x9c>
		/* Decrement the blocks remaining counter and reset the sub block counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     83e:	3b dd       	rcall	.-1418   	; 0x2b6 <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     840:	dd 20       	and	r13, r13
     842:	11 f4       	brne	.+4      	; 0x848 <DataflashManager_WriteBlocks+0x228>
     844:	83 e8       	ldi	r24, 0x83	; 131
     846:	01 c0       	rjmp	.+2      	; 0x84a <DataflashManager_WriteBlocks+0x22a>
     848:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     84a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     84c:	0d b4       	in	r0, 0x2d	; 45
     84e:	07 fe       	sbrs	r0, 7
     850:	fd cf       	rjmp	.-6      	; 0x84c <DataflashManager_WriteBlocks+0x22c>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     852:	c8 01       	movw	r24, r16
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	3c dd       	rcall	.-1416   	; 0x2d2 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     85a:	2d dd       	rcall	.-1446   	; 0x2b6 <Dataflash_WaitWhileBusy>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     85c:	80 91 e8 00 	lds	r24, 0x00E8

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     860:	85 fd       	sbrc	r24, 5
     862:	05 c0       	rjmp	.+10     	; 0x86e <DataflashManager_WriteBlocks+0x24e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     864:	80 91 e8 00 	lds	r24, 0x00E8
     868:	8b 77       	andi	r24, 0x7B	; 123
     86a:	80 93 e8 00 	sts	0x00E8, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     86e:	8e b1       	in	r24, 0x0e	; 14
     870:	83 60       	ori	r24, 0x03	; 3
     872:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     874:	0f 90       	pop	r0
     876:	cf 91       	pop	r28
     878:	df 91       	pop	r29
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	ef 90       	pop	r14
     882:	df 90       	pop	r13
     884:	cf 90       	pop	r12
     886:	bf 90       	pop	r11
     888:	af 90       	pop	r10
     88a:	9f 90       	pop	r9
     88c:	8f 90       	pop	r8
     88e:	08 95       	ret

00000890 <SCSI_Command_Inquiry>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     890:	af 92       	push	r10
     892:	bf 92       	push	r11
     894:	cf 92       	push	r12
     896:	df 92       	push	r13
     898:	ef 92       	push	r14
     89a:	ff 92       	push	r15
     89c:	0f 93       	push	r16
     89e:	1f 93       	push	r17
     8a0:	df 93       	push	r29
     8a2:	cf 93       	push	r28
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
     8a8:	6c 01       	movw	r12, r24

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;

	return true;
}
     8aa:	ad b6       	in	r10, 0x3d	; 61
     8ac:	be b6       	in	r11, 0x3e	; 62

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     8ae:	fc 01       	movw	r30, r24
     8b0:	05 8d       	ldd	r16, Z+29	; 0x1d
     8b2:	14 8d       	ldd	r17, Z+28	; 0x1c
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = (AllocationLength < sizeof(InquiryData))? AllocationLength :
	                                                                       sizeof(InquiryData);

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     8b4:	82 8d       	ldd	r24, Z+26	; 0x1a
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	83 70       	andi	r24, 0x03	; 3
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	89 2b       	or	r24, r25
     8be:	19 f4       	brne	.+6      	; 0x8c6 <SCSI_Command_Inquiry+0x36>
     8c0:	83 8d       	ldd	r24, Z+27	; 0x1b
     8c2:	88 23       	and	r24, r24
     8c4:	69 f0       	breq	.+26     	; 0x8e0 <SCSI_Command_Inquiry+0x50>
	     MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
	{
		/* Optional but unsupported bits set - update the SENSE key and fail the request */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     8c6:	80 91 5d 01 	lds	r24, 0x015D
     8ca:	80 7f       	andi	r24, 0xF0	; 240
     8cc:	85 60       	ori	r24, 0x05	; 5
     8ce:	80 93 5d 01 	sts	0x015D, r24
     8d2:	84 e2       	ldi	r24, 0x24	; 36
     8d4:	80 93 67 01 	sts	0x0167, r24
     8d8:	10 92 68 01 	sts	0x0168, r1
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	33 c0       	rjmp	.+102    	; 0x946 <SCSI_Command_Inquiry+0xb6>
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = (AllocationLength < sizeof(InquiryData))? AllocationLength :
	                                                                       sizeof(InquiryData);
     8e0:	78 01       	movw	r14, r16
     8e2:	05 32       	cpi	r16, 0x25	; 37
     8e4:	11 05       	cpc	r17, r1
     8e6:	18 f0       	brcs	.+6      	; 0x8ee <SCSI_Command_Inquiry+0x5e>
     8e8:	84 e2       	ldi	r24, 0x24	; 36
     8ea:	e8 2e       	mov	r14, r24
     8ec:	f1 2c       	mov	r15, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NO_STREAM_CALLBACK);
     8ee:	87 e3       	ldi	r24, 0x37	; 55
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	b7 01       	movw	r22, r14
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	fc d5       	rcall	.+3064   	; 0x14f2 <Endpoint_Write_Stream_LE>

	uint8_t PadBytes[AllocationLength - BytesTransferred];
     8fa:	b8 01       	movw	r22, r16
     8fc:	6e 19       	sub	r22, r14
     8fe:	7f 09       	sbc	r23, r15
     900:	8d b7       	in	r24, 0x3d	; 61
     902:	9e b7       	in	r25, 0x3e	; 62
     904:	86 1b       	sub	r24, r22
     906:	97 0b       	sbc	r25, r23
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	f8 94       	cli
     90c:	9e bf       	out	0x3e, r25	; 62
     90e:	0f be       	out	0x3f, r0	; 63
     910:	8d bf       	out	0x3d, r24	; 61

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Write_Stream_LE(&PadBytes, sizeof(PadBytes), NO_STREAM_CALLBACK);
     912:	01 96       	adiw	r24, 0x01	; 1
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	50 e0       	ldi	r21, 0x00	; 0
     918:	ec d5       	rcall	.+3032   	; 0x14f2 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     91a:	80 91 e8 00 	lds	r24, 0x00E8
     91e:	8e 77       	andi	r24, 0x7E	; 126
     920:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     924:	97 01       	movw	r18, r14
     926:	40 e0       	ldi	r20, 0x00	; 0
     928:	50 e0       	ldi	r21, 0x00	; 0
     92a:	f6 01       	movw	r30, r12
     92c:	82 89       	ldd	r24, Z+18	; 0x12
     92e:	93 89       	ldd	r25, Z+19	; 0x13
     930:	a4 89       	ldd	r26, Z+20	; 0x14
     932:	b5 89       	ldd	r27, Z+21	; 0x15
     934:	82 1b       	sub	r24, r18
     936:	93 0b       	sbc	r25, r19
     938:	a4 0b       	sbc	r26, r20
     93a:	b5 0b       	sbc	r27, r21
     93c:	82 8b       	std	Z+18, r24	; 0x12
     93e:	93 8b       	std	Z+19, r25	; 0x13
     940:	a4 8b       	std	Z+20, r26	; 0x14
     942:	b5 8b       	std	Z+21, r27	; 0x15
     944:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	f8 94       	cli
     94a:	be be       	out	0x3e, r11	; 62
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	ad be       	out	0x3d, r10	; 61
     950:	cf 91       	pop	r28
     952:	df 91       	pop	r29
     954:	1f 91       	pop	r17
     956:	0f 91       	pop	r16
     958:	ff 90       	pop	r15
     95a:	ef 90       	pop	r14
     95c:	df 90       	pop	r13
     95e:	cf 90       	pop	r12
     960:	bf 90       	pop	r11
     962:	af 90       	pop	r10
     964:	08 95       	ret

00000966 <SCSI_Command_Request_Sense>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     966:	8f 92       	push	r8
     968:	9f 92       	push	r9
     96a:	bf 92       	push	r11
     96c:	cf 92       	push	r12
     96e:	df 92       	push	r13
     970:	ef 92       	push	r14
     972:	ff 92       	push	r15
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	df 93       	push	r29
     97a:	cf 93       	push	r28
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
     980:	6c 01       	movw	r12, r24

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;

	return true;
}
     982:	8d b6       	in	r8, 0x3d	; 61
     984:	9e b6       	in	r9, 0x3e	; 62
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     986:	fc 01       	movw	r30, r24
     988:	05 8d       	ldd	r16, Z+29	; 0x1d
	uint8_t  BytesTransferred = (AllocationLength < sizeof(SenseData))? AllocationLength : sizeof(SenseData);
     98a:	b0 2e       	mov	r11, r16
     98c:	03 31       	cpi	r16, 0x13	; 19
     98e:	10 f0       	brcs	.+4      	; 0x994 <SCSI_Command_Request_Sense+0x2e>
     990:	92 e1       	ldi	r25, 0x12	; 18
     992:	b9 2e       	mov	r11, r25

	uint8_t PadBytes[AllocationLength - BytesTransferred];
     994:	10 e0       	ldi	r17, 0x00	; 0
     996:	0b 19       	sub	r16, r11
     998:	11 09       	sbc	r17, r1
     99a:	8d b7       	in	r24, 0x3d	; 61
     99c:	9e b7       	in	r25, 0x3e	; 62
     99e:	80 1b       	sub	r24, r16
     9a0:	91 0b       	sbc	r25, r17
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	9e bf       	out	0x3e, r25	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	8d bf       	out	0x3d, r24	; 61
     9ac:	ed b6       	in	r14, 0x3d	; 61
     9ae:	fe b6       	in	r15, 0x3e	; 62
     9b0:	08 94       	sec
     9b2:	e1 1c       	adc	r14, r1
     9b4:	f1 1c       	adc	r15, r1

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NO_STREAM_CALLBACK);
     9b6:	8b e5       	ldi	r24, 0x5B	; 91
     9b8:	91 e0       	ldi	r25, 0x01	; 1
     9ba:	6b 2d       	mov	r22, r11
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	40 e0       	ldi	r20, 0x00	; 0
     9c0:	50 e0       	ldi	r21, 0x00	; 0
     9c2:	97 d5       	rcall	.+2862   	; 0x14f2 <Endpoint_Write_Stream_LE>
	Endpoint_Write_Stream_LE(&PadBytes, sizeof(PadBytes), NO_STREAM_CALLBACK);
     9c4:	c7 01       	movw	r24, r14
     9c6:	b8 01       	movw	r22, r16
     9c8:	40 e0       	ldi	r20, 0x00	; 0
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	92 d5       	rcall	.+2852   	; 0x14f2 <Endpoint_Write_Stream_LE>
     9ce:	80 91 e8 00 	lds	r24, 0x00E8
     9d2:	8e 77       	andi	r24, 0x7E	; 126
     9d4:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     9d8:	f6 01       	movw	r30, r12
     9da:	82 89       	ldd	r24, Z+18	; 0x12
     9dc:	93 89       	ldd	r25, Z+19	; 0x13
     9de:	a4 89       	ldd	r26, Z+20	; 0x14
     9e0:	b5 89       	ldd	r27, Z+21	; 0x15
     9e2:	8b 19       	sub	r24, r11
     9e4:	91 09       	sbc	r25, r1
     9e6:	a1 09       	sbc	r26, r1
     9e8:	b1 09       	sbc	r27, r1
     9ea:	82 8b       	std	Z+18, r24	; 0x12
     9ec:	93 8b       	std	Z+19, r25	; 0x13
     9ee:	a4 8b       	std	Z+20, r26	; 0x14
     9f0:	b5 8b       	std	Z+21, r27	; 0x15

	return true;
}
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	f8 94       	cli
     9f8:	9e be       	out	0x3e, r9	; 62
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	8d be       	out	0x3d, r8	; 61
     9fe:	cf 91       	pop	r28
     a00:	df 91       	pop	r29
     a02:	1f 91       	pop	r17
     a04:	0f 91       	pop	r16
     a06:	ff 90       	pop	r15
     a08:	ef 90       	pop	r14
     a0a:	df 90       	pop	r13
     a0c:	cf 90       	pop	r12
     a0e:	bf 90       	pop	r11
     a10:	9f 90       	pop	r9
     a12:	8f 90       	pop	r8
     a14:	08 95       	ret

00000a16 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	8c 01       	movw	r16, r24
     a20:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     a22:	f8 01       	movw	r30, r16
     a24:	46 8d       	ldd	r20, Z+30	; 0x1e
     a26:	55 8d       	ldd	r21, Z+29	; 0x1d
     a28:	64 8d       	ldd	r22, Z+28	; 0x1c
     a2a:	73 8d       	ldd	r23, Z+27	; 0x1b

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     a2c:	c1 a1       	ldd	r28, Z+33	; 0x21
     a2e:	d0 a1       	ldd	r29, Z+32	; 0x20

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     a30:	40 30       	cpi	r20, 0x00	; 0
     a32:	f0 e8       	ldi	r31, 0x80	; 128
     a34:	5f 07       	cpc	r21, r31
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	6f 07       	cpc	r22, r31
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	7f 07       	cpc	r23, r31
     a3e:	68 f0       	brcs	.+26     	; 0xa5a <SCSI_Command_ReadWrite_10+0x44>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     a40:	80 91 5d 01 	lds	r24, 0x015D
     a44:	80 7f       	andi	r24, 0xF0	; 240
     a46:	85 60       	ori	r24, 0x05	; 5
     a48:	80 93 5d 01 	sts	0x015D, r24
     a4c:	81 e2       	ldi	r24, 0x21	; 33
     a4e:	80 93 67 01 	sts	0x0167, r24
     a52:	10 92 68 01 	sts	0x0168, r1
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	21 c0       	rjmp	.+66     	; 0xa9c <SCSI_Command_ReadWrite_10+0x86>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     a5a:	88 23       	and	r24, r24
     a5c:	21 f0       	breq	.+8      	; 0xa66 <SCSI_Command_ReadWrite_10+0x50>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     a5e:	c8 01       	movw	r24, r16
     a60:	9e 01       	movw	r18, r28
     a62:	ca dc       	rcall	.-1644   	; 0x3f8 <DataflashManager_ReadBlocks>
     a64:	03 c0       	rjmp	.+6      	; 0xa6c <SCSI_Command_ReadWrite_10+0x56>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     a66:	c8 01       	movw	r24, r16
     a68:	9e 01       	movw	r18, r28
     a6a:	da dd       	rcall	.-1100   	; 0x620 <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     a6c:	9e 01       	movw	r18, r28
     a6e:	40 e0       	ldi	r20, 0x00	; 0
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	69 e0       	ldi	r22, 0x09	; 9
     a74:	22 0f       	add	r18, r18
     a76:	33 1f       	adc	r19, r19
     a78:	44 1f       	adc	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	6a 95       	dec	r22
     a7e:	d1 f7       	brne	.-12     	; 0xa74 <SCSI_Command_ReadWrite_10+0x5e>
     a80:	f8 01       	movw	r30, r16
     a82:	82 89       	ldd	r24, Z+18	; 0x12
     a84:	93 89       	ldd	r25, Z+19	; 0x13
     a86:	a4 89       	ldd	r26, Z+20	; 0x14
     a88:	b5 89       	ldd	r27, Z+21	; 0x15
     a8a:	82 1b       	sub	r24, r18
     a8c:	93 0b       	sbc	r25, r19
     a8e:	a4 0b       	sbc	r26, r20
     a90:	b5 0b       	sbc	r27, r21
     a92:	82 8b       	std	Z+18, r24	; 0x12
     a94:	93 8b       	std	Z+19, r25	; 0x13
     a96:	a4 8b       	std	Z+20, r26	; 0x14
     a98:	b5 8b       	std	Z+21, r27	; 0x15
     a9a:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	1f 91       	pop	r17
     aa2:	0f 91       	pop	r16
     aa4:	08 95       	ret

00000aa6 <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	df 93       	push	r29
     aac:	cf 93       	push	r28
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
     ab2:	28 97       	sbiw	r28, 0x08	; 8
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	f8 94       	cli
     ab8:	de bf       	out	0x3e, r29	; 62
     aba:	0f be       	out	0x3f, r0	; 63
     abc:	cd bf       	out	0x3d, r28	; 61
     abe:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     ac0:	fc 01       	movw	r30, r24
     ac2:	81 8d       	ldd	r24, Z+25	; 0x19
     ac4:	8e 31       	cpi	r24, 0x1E	; 30
     ac6:	09 f4       	brne	.+2      	; 0xaca <SCSI_DecodeSCSICommand+0x24>
     ac8:	77 c0       	rjmp	.+238    	; 0xbb8 <SCSI_DecodeSCSICommand+0x112>
     aca:	8f 31       	cpi	r24, 0x1F	; 31
     acc:	70 f4       	brcc	.+28     	; 0xaea <SCSI_DecodeSCSICommand+0x44>
     ace:	83 30       	cpi	r24, 0x03	; 3
     ad0:	f9 f0       	breq	.+62     	; 0xb10 <SCSI_DecodeSCSICommand+0x6a>
     ad2:	84 30       	cpi	r24, 0x04	; 4
     ad4:	20 f4       	brcc	.+8      	; 0xade <SCSI_DecodeSCSICommand+0x38>
     ad6:	88 23       	and	r24, r24
     ad8:	09 f4       	brne	.+2      	; 0xadc <SCSI_DecodeSCSICommand+0x36>
     ada:	6e c0       	rjmp	.+220    	; 0xbb8 <SCSI_DecodeSCSICommand+0x112>
     adc:	73 c0       	rjmp	.+230    	; 0xbc4 <SCSI_DecodeSCSICommand+0x11e>
     ade:	82 31       	cpi	r24, 0x12	; 18
     ae0:	a1 f0       	breq	.+40     	; 0xb0a <SCSI_DecodeSCSICommand+0x64>
     ae2:	8d 31       	cpi	r24, 0x1D	; 29
     ae4:	09 f0       	breq	.+2      	; 0xae8 <SCSI_DecodeSCSICommand+0x42>
     ae6:	6e c0       	rjmp	.+220    	; 0xbc4 <SCSI_DecodeSCSICommand+0x11e>
     ae8:	46 c0       	rjmp	.+140    	; 0xb76 <SCSI_DecodeSCSICommand+0xd0>
     aea:	88 32       	cpi	r24, 0x28	; 40
     aec:	09 f4       	brne	.+2      	; 0xaf0 <SCSI_DecodeSCSICommand+0x4a>
     aee:	60 c0       	rjmp	.+192    	; 0xbb0 <SCSI_DecodeSCSICommand+0x10a>
     af0:	89 32       	cpi	r24, 0x29	; 41
     af2:	20 f4       	brcc	.+8      	; 0xafc <SCSI_DecodeSCSICommand+0x56>
     af4:	85 32       	cpi	r24, 0x25	; 37
     af6:	09 f0       	breq	.+2      	; 0xafa <SCSI_DecodeSCSICommand+0x54>
     af8:	65 c0       	rjmp	.+202    	; 0xbc4 <SCSI_DecodeSCSICommand+0x11e>
     afa:	0d c0       	rjmp	.+26     	; 0xb16 <SCSI_DecodeSCSICommand+0x70>
     afc:	8a 32       	cpi	r24, 0x2A	; 42
     afe:	09 f4       	brne	.+2      	; 0xb02 <SCSI_DecodeSCSICommand+0x5c>
     b00:	54 c0       	rjmp	.+168    	; 0xbaa <SCSI_DecodeSCSICommand+0x104>
     b02:	8f 32       	cpi	r24, 0x2F	; 47
     b04:	09 f0       	breq	.+2      	; 0xb08 <SCSI_DecodeSCSICommand+0x62>
     b06:	5e c0       	rjmp	.+188    	; 0xbc4 <SCSI_DecodeSCSICommand+0x11e>
     b08:	57 c0       	rjmp	.+174    	; 0xbb8 <SCSI_DecodeSCSICommand+0x112>
	{
		case SCSI_CMD_INQUIRY:
			CommandSuccess = SCSI_Command_Inquiry(MSInterfaceInfo);
     b0a:	c8 01       	movw	r24, r16
     b0c:	c1 de       	rcall	.-638    	; 0x890 <SCSI_Command_Inquiry>
     b0e:	64 c0       	rjmp	.+200    	; 0xbd8 <SCSI_DecodeSCSICommand+0x132>
			break;
		case SCSI_CMD_REQUEST_SENSE:
			CommandSuccess = SCSI_Command_Request_Sense(MSInterfaceInfo);
     b10:	c8 01       	movw	r24, r16
     b12:	29 df       	rcall	.-430    	; 0x966 <SCSI_Command_Request_Sense>
     b14:	61 c0       	rjmp	.+194    	; 0xbd8 <SCSI_DecodeSCSICommand+0x132>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     b16:	8f ef       	ldi	r24, 0xFF	; 255
     b18:	9f e7       	ldi	r25, 0x7F	; 127
     b1a:	a0 e0       	ldi	r26, 0x00	; 0
     b1c:	b0 e0       	ldi	r27, 0x00	; 0
     b1e:	89 83       	std	Y+1, r24	; 0x01
     b20:	9a 83       	std	Y+2, r25	; 0x02
     b22:	ab 83       	std	Y+3, r26	; 0x03
     b24:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	92 e0       	ldi	r25, 0x02	; 2
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	8d 83       	std	Y+5, r24	; 0x05
     b30:	9e 83       	std	Y+6, r25	; 0x06
     b32:	af 83       	std	Y+7, r26	; 0x07
     b34:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NO_STREAM_CALLBACK);
     b36:	ce 01       	movw	r24, r28
     b38:	01 96       	adiw	r24, 0x01	; 1
     b3a:	64 e0       	ldi	r22, 0x04	; 4
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	40 e0       	ldi	r20, 0x00	; 0
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	9c d4       	rcall	.+2360   	; 0x147c <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NO_STREAM_CALLBACK);
     b44:	ce 01       	movw	r24, r28
     b46:	05 96       	adiw	r24, 0x05	; 5
     b48:	64 e0       	ldi	r22, 0x04	; 4
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	50 e0       	ldi	r21, 0x00	; 0
     b50:	95 d4       	rcall	.+2346   	; 0x147c <Endpoint_Write_Stream_BE>
     b52:	80 91 e8 00 	lds	r24, 0x00E8
     b56:	8e 77       	andi	r24, 0x7E	; 126
     b58:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     b5c:	f8 01       	movw	r30, r16
     b5e:	82 89       	ldd	r24, Z+18	; 0x12
     b60:	93 89       	ldd	r25, Z+19	; 0x13
     b62:	a4 89       	ldd	r26, Z+20	; 0x14
     b64:	b5 89       	ldd	r27, Z+21	; 0x15
     b66:	08 97       	sbiw	r24, 0x08	; 8
     b68:	a1 09       	sbc	r26, r1
     b6a:	b1 09       	sbc	r27, r1
     b6c:	82 8b       	std	Z+18, r24	; 0x12
     b6e:	93 8b       	std	Z+19, r25	; 0x13
     b70:	a4 8b       	std	Z+20, r26	; 0x14
     b72:	b5 8b       	std	Z+21, r27	; 0x15
     b74:	35 c0       	rjmp	.+106    	; 0xbe0 <SCSI_DecodeSCSICommand+0x13a>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     b76:	f8 01       	movw	r30, r16
     b78:	82 8d       	ldd	r24, Z+26	; 0x1a
     b7a:	82 fd       	sbrc	r24, 2
     b7c:	08 c0       	rjmp	.+16     	; 0xb8e <SCSI_DecodeSCSICommand+0xe8>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     b7e:	80 91 5d 01 	lds	r24, 0x015D
     b82:	80 7f       	andi	r24, 0xF0	; 240
     b84:	85 60       	ori	r24, 0x05	; 5
     b86:	80 93 5d 01 	sts	0x015D, r24
     b8a:	84 e2       	ldi	r24, 0x24	; 36
     b8c:	22 c0       	rjmp	.+68     	; 0xbd2 <SCSI_DecodeSCSICommand+0x12c>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     b8e:	09 dc       	rcall	.-2030   	; 0x3a2 <DataflashManager_CheckDataflashOperation>
     b90:	88 23       	and	r24, r24
     b92:	91 f4       	brne	.+36     	; 0xbb8 <SCSI_DecodeSCSICommand+0x112>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     b94:	80 91 5d 01 	lds	r24, 0x015D
     b98:	80 7f       	andi	r24, 0xF0	; 240
     b9a:	84 60       	ori	r24, 0x04	; 4
     b9c:	80 93 5d 01 	sts	0x015D, r24
     ba0:	10 92 67 01 	sts	0x0167, r1
     ba4:	10 92 68 01 	sts	0x0168, r1
     ba8:	19 c0       	rjmp	.+50     	; 0xbdc <SCSI_DecodeSCSICommand+0x136>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     baa:	c8 01       	movw	r24, r16
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <SCSI_DecodeSCSICommand+0x10e>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     bb0:	c8 01       	movw	r24, r16
     bb2:	61 e0       	ldi	r22, 0x01	; 1
     bb4:	30 df       	rcall	.-416    	; 0xa16 <SCSI_Command_ReadWrite_10>
     bb6:	10 c0       	rjmp	.+32     	; 0xbd8 <SCSI_DecodeSCSICommand+0x132>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     bb8:	f8 01       	movw	r30, r16
     bba:	12 8a       	std	Z+18, r1	; 0x12
     bbc:	13 8a       	std	Z+19, r1	; 0x13
     bbe:	14 8a       	std	Z+20, r1	; 0x14
     bc0:	15 8a       	std	Z+21, r1	; 0x15
     bc2:	0e c0       	rjmp	.+28     	; 0xbe0 <SCSI_DecodeSCSICommand+0x13a>
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     bc4:	80 91 5d 01 	lds	r24, 0x015D
     bc8:	80 7f       	andi	r24, 0xF0	; 240
     bca:	85 60       	ori	r24, 0x05	; 5
     bcc:	80 93 5d 01 	sts	0x015D, r24
     bd0:	80 e2       	ldi	r24, 0x20	; 32
     bd2:	80 93 67 01 	sts	0x0167, r24
     bd6:	e6 cf       	rjmp	.-52     	; 0xba4 <SCSI_DecodeSCSICommand+0xfe>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     bd8:	88 23       	and	r24, r24
     bda:	11 f4       	brne	.+4      	; 0xbe0 <SCSI_DecodeSCSICommand+0x13a>
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	0a c0       	rjmp	.+20     	; 0xbf4 <SCSI_DecodeSCSICommand+0x14e>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     be0:	80 91 5d 01 	lds	r24, 0x015D
     be4:	80 7f       	andi	r24, 0xF0	; 240
     be6:	80 93 5d 01 	sts	0x015D, r24
     bea:	10 92 67 01 	sts	0x0167, r1
     bee:	10 92 68 01 	sts	0x0168, r1
     bf2:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	}

	return false;
}
     bf4:	28 96       	adiw	r28, 0x08	; 8
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	de bf       	out	0x3e, r29	; 62
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	cd bf       	out	0x3d, r28	; 61
     c00:	cf 91       	pop	r28
     c02:	df 91       	pop	r29
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	08 95       	ret

00000c0a <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c0a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     c0e:	80 91 eb 00 	lds	r24, 0x00EB
     c12:	81 60       	ori	r24, 0x01	; 1
     c14:	80 93 eb 00 	sts	0x00EB, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     c18:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
     c1c:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
     c20:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     c24:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
     c28:	88 1f       	adc	r24, r24
     c2a:	88 27       	eor	r24, r24
     c2c:	88 1f       	adc	r24, r24
     c2e:	08 95       	ret

00000c30 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     c30:	80 91 75 01 	lds	r24, 0x0175
     c34:	88 23       	and	r24, r24
     c36:	9c f4       	brge	.+38     	; 0xc5e <Endpoint_ClearStatusStage+0x2e>
     c38:	04 c0       	rjmp	.+8      	; 0xc42 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     c3a:	80 91 74 01 	lds	r24, 0x0174
     c3e:	88 23       	and	r24, r24
     c40:	b9 f0       	breq	.+46     	; 0xc70 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c42:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     c46:	82 ff       	sbrs	r24, 2
     c48:	f8 cf       	rjmp	.-16     	; 0xc3a <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c4a:	80 91 e8 00 	lds	r24, 0x00E8
     c4e:	8b 77       	andi	r24, 0x7B	; 123
     c50:	80 93 e8 00 	sts	0x00E8, r24
     c54:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     c56:	80 91 74 01 	lds	r24, 0x0174
     c5a:	88 23       	and	r24, r24
     c5c:	49 f0       	breq	.+18     	; 0xc70 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c5e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     c62:	80 ff       	sbrs	r24, 0
     c64:	f8 cf       	rjmp	.-16     	; 0xc56 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c66:	80 91 e8 00 	lds	r24, 0x00E8
     c6a:	8e 77       	andi	r24, 0x7E	; 126
     c6c:	80 93 e8 00 	sts	0x00E8, r24
     c70:	08 95       	ret

00000c72 <Endpoint_WaitUntilReady>:
			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is active (i.e. enumerated to a host)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     c72:	40 91 e4 00 	lds	r20, 0x00E4
     c76:	50 91 e5 00 	lds	r21, 0x00E5
     c7a:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     c7c:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     c80:	80 ff       	sbrs	r24, 0
     c82:	05 c0       	rjmp	.+10     	; 0xc8e <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c84:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
     c88:	80 ff       	sbrs	r24, 0
     c8a:	05 c0       	rjmp	.+10     	; 0xc96 <Endpoint_WaitUntilReady+0x24>
     c8c:	22 c0       	rjmp	.+68     	; 0xcd2 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c8e:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     c92:	82 fd       	sbrc	r24, 2
     c94:	1e c0       	rjmp	.+60     	; 0xcd2 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c96:	80 91 74 01 	lds	r24, 0x0174

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c9a:	88 23       	and	r24, r24
     c9c:	11 f4       	brne	.+4      	; 0xca2 <Endpoint_WaitUntilReady+0x30>
     c9e:	82 e0       	ldi	r24, 0x02	; 2
     ca0:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ca2:	85 30       	cpi	r24, 0x05	; 5
     ca4:	11 f4       	brne	.+4      	; 0xcaa <Endpoint_WaitUntilReady+0x38>
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	08 95       	ret
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     caa:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     cae:	85 ff       	sbrs	r24, 5
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <Endpoint_WaitUntilReady+0x44>
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	08 95       	ret
     cb6:	80 91 e4 00 	lds	r24, 0x00E4
     cba:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     cbe:	84 17       	cp	r24, r20
     cc0:	95 07       	cpc	r25, r21
     cc2:	e1 f2       	breq	.-72     	; 0xc7c <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     cc4:	22 23       	and	r18, r18
     cc6:	11 f4       	brne	.+4      	; 0xccc <Endpoint_WaitUntilReady+0x5a>
     cc8:	84 e0       	ldi	r24, 0x04	; 4
     cca:	08 95       	ret
     ccc:	21 50       	subi	r18, 0x01	; 1
     cce:	ac 01       	movw	r20, r24
     cd0:	d5 cf       	rjmp	.-86     	; 0xc7c <Endpoint_WaitUntilReady+0xa>
     cd2:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     cd4:	08 95       	ret

00000cd6 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     cd6:	55 d0       	rcall	.+170    	; 0xd82 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     cd8:	5c d0       	rcall	.+184    	; 0xd92 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     cda:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
     cde:	98 2f       	mov	r25, r24
     ce0:	9f 77       	andi	r25, 0x7F	; 127
     ce2:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
     ce6:	80 68       	ori	r24, 0x80	; 128
     ce8:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     cec:	8c e0       	ldi	r24, 0x0C	; 12
     cee:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     cf0:	89 b5       	in	r24, 0x29	; 41
     cf2:	82 60       	ori	r24, 0x02	; 2
     cf4:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     cf6:	09 b4       	in	r0, 0x29	; 41
     cf8:	00 fe       	sbrs	r0, 0
     cfa:	fd cf       	rjmp	.-6      	; 0xcf6 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     cfc:	80 91 d8 00 	lds	r24, 0x00D8
     d00:	8f 7d       	andi	r24, 0xDF	; 223
     d02:	80 93 d8 00 	sts	0x00D8, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     d06:	80 91 d7 00 	lds	r24, 0x00D7
     d0a:	80 68       	ori	r24, 0x80	; 128
     d0c:	80 93 d7 00 	sts	0x00D7, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
     d10:	10 92 74 01 	sts	0x0174, r1
	USB_ConfigurationNumber  = 0;
     d14:	10 92 72 01 	sts	0x0172, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
     d18:	10 92 71 01 	sts	0x0171, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
     d1c:	10 92 70 01 	sts	0x0170, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     d20:	80 91 e0 00 	lds	r24, 0x00E0
     d24:	8b 7f       	andi	r24, 0xFB	; 251
     d26:	80 93 e0 00 	sts	0x00E0, r24
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  USB_Device_SetLowSpeed();
	else
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUS);
     d2a:	80 91 d8 00 	lds	r24, 0x00D8
     d2e:	81 60       	ori	r24, 0x01	; 1
     d30:	80 93 d8 00 	sts	0x00D8, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	42 e0       	ldi	r20, 0x02	; 2
     d3a:	67 df       	rcall	.-306    	; 0xc0a <Endpoint_ConfigureEndpoint_Prv>

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
							   ENDPOINT_BANK_SINGLE);

	USB_INT_Clear(USB_INT_SUSPI);
     d3c:	80 91 e1 00 	lds	r24, 0x00E1
     d40:	8e 7f       	andi	r24, 0xFE	; 254
     d42:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPI);
     d46:	80 91 e2 00 	lds	r24, 0x00E2
     d4a:	81 60       	ori	r24, 0x01	; 1
     d4c:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Enable(USB_INT_EORSTI);
     d50:	80 91 e2 00 	lds	r24, 0x00E2
     d54:	88 60       	ori	r24, 0x08	; 8
     d56:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     d5a:	80 91 e0 00 	lds	r24, 0x00E0
     d5e:	8e 7f       	andi	r24, 0xFE	; 254
     d60:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     d64:	80 91 d8 00 	lds	r24, 0x00D8
     d68:	80 61       	ori	r24, 0x10	; 16
     d6a:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     d6e:	08 95       	ret

00000d70 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     d70:	e7 ed       	ldi	r30, 0xD7	; 215
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	81 60       	ori	r24, 0x01	; 1
     d78:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	80 93 73 01 	sts	0x0173, r24

	USB_ResetInterface();
}
     d80:	aa cf       	rjmp	.-172    	; 0xcd6 <USB_ResetInterface>

00000d82 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     d82:	e8 ed       	ldi	r30, 0xD8	; 216
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	8c 7f       	andi	r24, 0xFC	; 252
     d8a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     d8c:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     d90:	08 95       	ret

00000d92 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
     d92:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
     d96:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     d9a:	08 95       	ret

00000d9c <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     d9c:	1f 92       	push	r1
     d9e:	0f 92       	push	r0
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	0f 92       	push	r0
     da4:	0b b6       	in	r0, 0x3b	; 59
     da6:	0f 92       	push	r0
     da8:	11 24       	eor	r1, r1
     daa:	1f 93       	push	r17
     dac:	2f 93       	push	r18
     dae:	3f 93       	push	r19
     db0:	4f 93       	push	r20
     db2:	5f 93       	push	r21
     db4:	6f 93       	push	r22
     db6:	7f 93       	push	r23
     db8:	8f 93       	push	r24
     dba:	9f 93       	push	r25
     dbc:	af 93       	push	r26
     dbe:	bf 93       	push	r27
     dc0:	ef 93       	push	r30
     dc2:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     dc4:	e9 ee       	ldi	r30, 0xE9	; 233
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	10 81       	ld	r17, Z
     dca:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     dcc:	10 82       	st	Z, r1
	uint8_t PrevSelectedEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);
     dce:	e0 ef       	ldi	r30, 0xF0	; 240
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	87 7f       	andi	r24, 0xF7	; 247
     dd6:	80 83       	st	Z, r24

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
     dd8:	78 94       	sei

	NONATOMIC_BLOCK(NONATOMIC_FORCEOFF)
	{
		USB_Device_ProcessControlRequest();
     dda:	e9 d0       	rcall	.+466    	; 0xfae <USB_Device_ProcessControlRequest>
    (void)__s;
}

static __inline__ void __iCliParam(const uint8_t *__s)
{
    cli();
     ddc:	f8 94       	cli
     dde:	a9 ee       	ldi	r26, 0xE9	; 233
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	1c 92       	st	X, r1
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
     de4:	e0 ef       	ldi	r30, 0xF0	; 240
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	88 60       	ori	r24, 0x08	; 8
     dec:	80 83       	st	Z, r24
     dee:	1c 93       	st	X, r17
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     df0:	ff 91       	pop	r31
     df2:	ef 91       	pop	r30
     df4:	bf 91       	pop	r27
     df6:	af 91       	pop	r26
     df8:	9f 91       	pop	r25
     dfa:	8f 91       	pop	r24
     dfc:	7f 91       	pop	r23
     dfe:	6f 91       	pop	r22
     e00:	5f 91       	pop	r21
     e02:	4f 91       	pop	r20
     e04:	3f 91       	pop	r19
     e06:	2f 91       	pop	r18
     e08:	1f 91       	pop	r17
     e0a:	0f 90       	pop	r0
     e0c:	0b be       	out	0x3b, r0	; 59
     e0e:	0f 90       	pop	r0
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	0f 90       	pop	r0
     e14:	1f 90       	pop	r1
     e16:	18 95       	reti

00000e18 <__vector_10>:
	UDINT   = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     e18:	1f 92       	push	r1
     e1a:	0f 92       	push	r0
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	0f 92       	push	r0
     e20:	0b b6       	in	r0, 0x3b	; 59
     e22:	0f 92       	push	r0
     e24:	11 24       	eor	r1, r1
     e26:	2f 93       	push	r18
     e28:	3f 93       	push	r19
     e2a:	4f 93       	push	r20
     e2c:	5f 93       	push	r21
     e2e:	6f 93       	push	r22
     e30:	7f 93       	push	r23
     e32:	8f 93       	push	r24
     e34:	9f 93       	push	r25
     e36:	af 93       	push	r26
     e38:	bf 93       	push	r27
     e3a:	ef 93       	push	r30
     e3c:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
     e3e:	80 91 da 00 	lds	r24, 0x00DA
     e42:	80 ff       	sbrs	r24, 0
     e44:	15 c0       	rjmp	.+42     	; 0xe70 <__vector_10+0x58>
     e46:	80 91 d8 00 	lds	r24, 0x00D8
     e4a:	80 ff       	sbrs	r24, 0
     e4c:	11 c0       	rjmp	.+34     	; 0xe70 <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_VBUS);
     e4e:	80 91 da 00 	lds	r24, 0x00DA
     e52:	8e 7f       	andi	r24, 0xFE	; 254
     e54:	80 93 da 00 	sts	0x00DA, r24
				 *  \note This function is not available on some AVR models which do not support hardware VBUS monitoring.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     e58:	80 91 d9 00 	lds	r24, 0x00D9

		if (USB_VBUS_GetStatus())
     e5c:	80 ff       	sbrs	r24, 0
     e5e:	05 c0       	rjmp	.+10     	; 0xe6a <__vector_10+0x52>
		{
			USB_DeviceState = DEVICE_STATE_Powered;
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	80 93 74 01 	sts	0x0174, r24
			EVENT_USB_Device_Connect();
     e66:	77 d9       	rcall	.-3346   	; 0x156 <EVENT_USB_Device_Connect>
     e68:	03 c0       	rjmp	.+6      	; 0xe70 <__vector_10+0x58>
		}
		else
		{
			USB_DeviceState = DEVICE_STATE_Unattached;
     e6a:	10 92 74 01 	sts	0x0174, r1
			EVENT_USB_Device_Disconnect();
     e6e:	78 d9       	rcall	.-3344   	; 0x160 <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     e70:	80 91 e1 00 	lds	r24, 0x00E1
     e74:	80 ff       	sbrs	r24, 0
     e76:	1d c0       	rjmp	.+58     	; 0xeb2 <__vector_10+0x9a>
     e78:	80 91 e2 00 	lds	r24, 0x00E2
     e7c:	80 ff       	sbrs	r24, 0
     e7e:	19 c0       	rjmp	.+50     	; 0xeb2 <__vector_10+0x9a>
	{
		USB_INT_Clear(USB_INT_SUSPI);
     e80:	80 91 e1 00 	lds	r24, 0x00E1
     e84:	8e 7f       	andi	r24, 0xFE	; 254
     e86:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPI);
     e8a:	80 91 e2 00 	lds	r24, 0x00E2
     e8e:	8e 7f       	andi	r24, 0xFE	; 254
     e90:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
     e94:	80 91 e2 00 	lds	r24, 0x00E2
     e98:	80 61       	ori	r24, 0x10	; 16
     e9a:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     e9e:	80 91 d8 00 	lds	r24, 0x00D8
     ea2:	80 62       	ori	r24, 0x20	; 32
     ea4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     ea8:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     eaa:	85 e0       	ldi	r24, 0x05	; 5
     eac:	80 93 74 01 	sts	0x0174, r24
		EVENT_USB_Device_Suspend();
     eb0:	eb d1       	rcall	.+982    	; 0x1288 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     eb2:	80 91 e1 00 	lds	r24, 0x00E1
     eb6:	84 ff       	sbrs	r24, 4
     eb8:	2e c0       	rjmp	.+92     	; 0xf16 <__vector_10+0xfe>
     eba:	80 91 e2 00 	lds	r24, 0x00E2
     ebe:	84 ff       	sbrs	r24, 4
     ec0:	2a c0       	rjmp	.+84     	; 0xf16 <__vector_10+0xfe>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     ec2:	8c e0       	ldi	r24, 0x0C	; 12
     ec4:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     ec6:	89 b5       	in	r24, 0x29	; 41
     ec8:	82 60       	ori	r24, 0x02	; 2
     eca:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     ecc:	09 b4       	in	r0, 0x29	; 41
     ece:	00 fe       	sbrs	r0, 0
     ed0:	fd cf       	rjmp	.-6      	; 0xecc <__vector_10+0xb4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     ed2:	80 91 d8 00 	lds	r24, 0x00D8
     ed6:	8f 7d       	andi	r24, 0xDF	; 223
     ed8:	80 93 d8 00 	sts	0x00D8, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUPI);
     edc:	80 91 e1 00 	lds	r24, 0x00E1
     ee0:	8f 7e       	andi	r24, 0xEF	; 239
     ee2:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUPI);
     ee6:	80 91 e2 00 	lds	r24, 0x00E2
     eea:	8f 7e       	andi	r24, 0xEF	; 239
     eec:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPI);
     ef0:	80 91 e2 00 	lds	r24, 0x00E2
     ef4:	81 60       	ori	r24, 0x01	; 1
     ef6:	80 93 e2 00 	sts	0x00E2, r24

		if (USB_ConfigurationNumber)
     efa:	80 91 72 01 	lds	r24, 0x0172
     efe:	88 23       	and	r24, r24
     f00:	31 f4       	brne	.+12     	; 0xf0e <__vector_10+0xf6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     f02:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     f06:	87 fd       	sbrc	r24, 7
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <__vector_10+0xf6>
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	01 c0       	rjmp	.+2      	; 0xf10 <__vector_10+0xf8>
     f0e:	84 e0       	ldi	r24, 0x04	; 4
     f10:	80 93 74 01 	sts	0x0174, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     f14:	b9 d1       	rcall	.+882    	; 0x1288 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     f16:	80 91 e1 00 	lds	r24, 0x00E1
     f1a:	83 ff       	sbrs	r24, 3
     f1c:	27 c0       	rjmp	.+78     	; 0xf6c <__vector_10+0x154>
     f1e:	80 91 e2 00 	lds	r24, 0x00E2
     f22:	83 ff       	sbrs	r24, 3
     f24:	23 c0       	rjmp	.+70     	; 0xf6c <__vector_10+0x154>
	{
		USB_INT_Clear(USB_INT_EORSTI);
     f26:	80 91 e1 00 	lds	r24, 0x00E1
     f2a:	87 7f       	andi	r24, 0xF7	; 247
     f2c:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
     f30:	82 e0       	ldi	r24, 0x02	; 2
     f32:	80 93 74 01 	sts	0x0174, r24
		USB_ConfigurationNumber = 0;
     f36:	10 92 72 01 	sts	0x0172, r1

		USB_INT_Clear(USB_INT_SUSPI);
     f3a:	80 91 e1 00 	lds	r24, 0x00E1
     f3e:	8e 7f       	andi	r24, 0xFE	; 254
     f40:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPI);
     f44:	80 91 e2 00 	lds	r24, 0x00E2
     f48:	8e 7f       	andi	r24, 0xFE	; 254
     f4a:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
     f4e:	80 91 e2 00 	lds	r24, 0x00E2
     f52:	80 61       	ori	r24, 0x10	; 16
     f54:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	42 e0       	ldi	r20, 0x02	; 2
     f5e:	55 de       	rcall	.-854    	; 0xc0a <Endpoint_ConfigureEndpoint_Prv>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
		                           ENDPOINT_BANK_SINGLE);

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
     f60:	80 91 f0 00 	lds	r24, 0x00F0
     f64:	88 60       	ori	r24, 0x08	; 8
     f66:	80 93 f0 00 	sts	0x00F0, r24
		#endif

		EVENT_USB_Device_Reset();
     f6a:	8e d1       	rcall	.+796    	; 0x1288 <USB_Event_Stub>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     f6c:	80 91 e1 00 	lds	r24, 0x00E1
     f70:	82 ff       	sbrs	r24, 2
     f72:	0a c0       	rjmp	.+20     	; 0xf88 <__vector_10+0x170>
     f74:	80 91 e2 00 	lds	r24, 0x00E2
     f78:	82 ff       	sbrs	r24, 2
     f7a:	06 c0       	rjmp	.+12     	; 0xf88 <__vector_10+0x170>
	{
		USB_INT_Clear(USB_INT_SOFI);
     f7c:	80 91 e1 00 	lds	r24, 0x00E1
     f80:	8b 7f       	andi	r24, 0xFB	; 251
     f82:	80 93 e1 00 	sts	0x00E1, r24

		EVENT_USB_Device_StartOfFrame();
     f86:	80 d1       	rcall	.+768    	; 0x1288 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     f88:	ff 91       	pop	r31
     f8a:	ef 91       	pop	r30
     f8c:	bf 91       	pop	r27
     f8e:	af 91       	pop	r26
     f90:	9f 91       	pop	r25
     f92:	8f 91       	pop	r24
     f94:	7f 91       	pop	r23
     f96:	6f 91       	pop	r22
     f98:	5f 91       	pop	r21
     f9a:	4f 91       	pop	r20
     f9c:	3f 91       	pop	r19
     f9e:	2f 91       	pop	r18
     fa0:	0f 90       	pop	r0
     fa2:	0b be       	out	0x3b, r0	; 59
     fa4:	0f 90       	pop	r0
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	0f 90       	pop	r0
     faa:	1f 90       	pop	r1
     fac:	18 95       	reti

00000fae <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     fae:	0f 93       	push	r16
     fb0:	1f 93       	push	r17
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	ac 97       	sbiw	r28, 0x2c	; 44
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	e5 e7       	ldi	r30, 0x75	; 117
     fc8:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     fca:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
     fce:	81 93       	st	Z+, r24

void USB_Device_ProcessControlRequest(void)
{
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     fd0:	21 e0       	ldi	r18, 0x01	; 1
     fd2:	ed 37       	cpi	r30, 0x7D	; 125
     fd4:	f2 07       	cpc	r31, r18
     fd6:	c9 f7       	brne	.-14     	; 0xfca <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_Byte();

	EVENT_USB_Device_ControlRequest();
     fd8:	d2 d8       	rcall	.-3676   	; 0x17e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     fda:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     fde:	83 ff       	sbrs	r24, 3
     fe0:	3a c1       	rjmp	.+628    	; 0x1256 <USB_Device_ProcessControlRequest+0x2a8>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     fe2:	80 91 75 01 	lds	r24, 0x0175

		switch (USB_ControlRequest.bRequest)
     fe6:	30 91 76 01 	lds	r19, 0x0176
     fea:	35 30       	cpi	r19, 0x05	; 5
     fec:	09 f4       	brne	.+2      	; 0xff0 <USB_Device_ProcessControlRequest+0x42>
     fee:	87 c0       	rjmp	.+270    	; 0x10fe <USB_Device_ProcessControlRequest+0x150>
     ff0:	36 30       	cpi	r19, 0x06	; 6
     ff2:	40 f4       	brcc	.+16     	; 0x1004 <USB_Device_ProcessControlRequest+0x56>
     ff4:	31 30       	cpi	r19, 0x01	; 1
     ff6:	c9 f1       	breq	.+114    	; 0x106a <USB_Device_ProcessControlRequest+0xbc>
     ff8:	31 30       	cpi	r19, 0x01	; 1
     ffa:	70 f0       	brcs	.+28     	; 0x1018 <USB_Device_ProcessControlRequest+0x6a>
     ffc:	33 30       	cpi	r19, 0x03	; 3
     ffe:	09 f0       	breq	.+2      	; 0x1002 <USB_Device_ProcessControlRequest+0x54>
    1000:	2a c1       	rjmp	.+596    	; 0x1256 <USB_Device_ProcessControlRequest+0x2a8>
    1002:	33 c0       	rjmp	.+102    	; 0x106a <USB_Device_ProcessControlRequest+0xbc>
    1004:	38 30       	cpi	r19, 0x08	; 8
    1006:	09 f4       	brne	.+2      	; 0x100a <USB_Device_ProcessControlRequest+0x5c>
    1008:	f7 c0       	rjmp	.+494    	; 0x11f8 <USB_Device_ProcessControlRequest+0x24a>
    100a:	39 30       	cpi	r19, 0x09	; 9
    100c:	09 f4       	brne	.+2      	; 0x1010 <USB_Device_ProcessControlRequest+0x62>
    100e:	06 c1       	rjmp	.+524    	; 0x121c <USB_Device_ProcessControlRequest+0x26e>
    1010:	36 30       	cpi	r19, 0x06	; 6
    1012:	09 f0       	breq	.+2      	; 0x1016 <USB_Device_ProcessControlRequest+0x68>
    1014:	20 c1       	rjmp	.+576    	; 0x1256 <USB_Device_ProcessControlRequest+0x2a8>
    1016:	99 c0       	rjmp	.+306    	; 0x114a <USB_Device_ProcessControlRequest+0x19c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1018:	80 38       	cpi	r24, 0x80	; 128
    101a:	21 f0       	breq	.+8      	; 0x1024 <USB_Device_ProcessControlRequest+0x76>
    101c:	82 38       	cpi	r24, 0x82	; 130
    101e:	09 f0       	breq	.+2      	; 0x1022 <USB_Device_ProcessControlRequest+0x74>
    1020:	1a c1       	rjmp	.+564    	; 0x1256 <USB_Device_ProcessControlRequest+0x2a8>
    1022:	08 c0       	rjmp	.+16     	; 0x1034 <USB_Device_ProcessControlRequest+0x86>
    1024:	90 91 70 01 	lds	r25, 0x0170
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
    1028:	80 91 71 01 	lds	r24, 0x0171
    102c:	88 23       	and	r24, r24
    102e:	99 f0       	breq	.+38     	; 0x1056 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1030:	92 60       	ori	r25, 0x02	; 2
    1032:	11 c0       	rjmp	.+34     	; 0x1056 <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1034:	80 91 79 01 	lds	r24, 0x0179
    1038:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    103a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    103e:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	25 e0       	ldi	r18, 0x05	; 5
    1046:	96 95       	lsr	r25
    1048:	87 95       	ror	r24
    104a:	2a 95       	dec	r18
    104c:	e1 f7       	brne	.-8      	; 0x1046 <USB_Device_ProcessControlRequest+0x98>
    104e:	98 2f       	mov	r25, r24
    1050:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1052:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1056:	80 91 e8 00 	lds	r24, 0x00E8
    105a:	87 7f       	andi	r24, 0xF7	; 247
    105c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
    1060:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Word >> 8);
    1064:	10 92 f1 00 	sts	0x00F1, r1
    1068:	d2 c0       	rjmp	.+420    	; 0x120e <USB_Device_ProcessControlRequest+0x260>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    106a:	88 23       	and	r24, r24
    106c:	19 f0       	breq	.+6      	; 0x1074 <USB_Device_ProcessControlRequest+0xc6>
    106e:	82 30       	cpi	r24, 0x02	; 2
    1070:	09 f0       	breq	.+2      	; 0x1074 <USB_Device_ProcessControlRequest+0xc6>
    1072:	f1 c0       	rjmp	.+482    	; 0x1256 <USB_Device_ProcessControlRequest+0x2a8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	8f 71       	andi	r24, 0x1F	; 31
    1078:	90 70       	andi	r25, 0x00	; 0
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	21 f0       	breq	.+8      	; 0x1086 <USB_Device_ProcessControlRequest+0xd8>
    107e:	02 97       	sbiw	r24, 0x02	; 2
    1080:	09 f0       	breq	.+2      	; 0x1084 <USB_Device_ProcessControlRequest+0xd6>
    1082:	e9 c0       	rjmp	.+466    	; 0x1256 <USB_Device_ProcessControlRequest+0x2a8>
    1084:	0c c0       	rjmp	.+24     	; 0x109e <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1086:	80 91 77 01 	lds	r24, 0x0177
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	09 f0       	breq	.+2      	; 0x1090 <USB_Device_ProcessControlRequest+0xe2>
    108e:	e3 c0       	rjmp	.+454    	; 0x1256 <USB_Device_ProcessControlRequest+0x2a8>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1090:	10 92 71 01 	sts	0x0171, r1
    1094:	33 30       	cpi	r19, 0x03	; 3
    1096:	69 f5       	brne	.+90     	; 0x10f2 <USB_Device_ProcessControlRequest+0x144>
    1098:	80 93 71 01 	sts	0x0171, r24
    109c:	2a c0       	rjmp	.+84     	; 0x10f2 <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    109e:	80 91 77 01 	lds	r24, 0x0177
    10a2:	88 23       	and	r24, r24
    10a4:	31 f5       	brne	.+76     	; 0x10f2 <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    10a6:	20 91 79 01 	lds	r18, 0x0179
    10aa:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <USB_Device_ProcessControlRequest+0x102>
    10ae:	d3 c0       	rjmp	.+422    	; 0x1256 <USB_Device_ProcessControlRequest+0x2a8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    10b0:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    10b4:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    10b8:	80 ff       	sbrs	r24, 0
    10ba:	1b c0       	rjmp	.+54     	; 0x10f2 <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    10bc:	33 30       	cpi	r19, 0x03	; 3
    10be:	21 f4       	brne	.+8      	; 0x10c8 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    10c0:	80 91 eb 00 	lds	r24, 0x00EB
    10c4:	80 62       	ori	r24, 0x20	; 32
    10c6:	13 c0       	rjmp	.+38     	; 0x10ee <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    10c8:	80 91 eb 00 	lds	r24, 0x00EB
    10cc:	80 61       	ori	r24, 0x10	; 16
    10ce:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <USB_Device_ProcessControlRequest+0x12e>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	2a 95       	dec	r18
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <USB_Device_ProcessControlRequest+0x12a>
    10e0:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    10e4:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    10e8:	80 91 eb 00 	lds	r24, 0x00EB
    10ec:	88 60       	ori	r24, 0x08	; 8
    10ee:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    10f2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10f6:	80 91 e8 00 	lds	r24, 0x00E8
    10fa:	87 7f       	andi	r24, 0xF7	; 247
    10fc:	8b c0       	rjmp	.+278    	; 0x1214 <USB_Device_ProcessControlRequest+0x266>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    10fe:	88 23       	and	r24, r24
    1100:	09 f0       	breq	.+2      	; 0x1104 <USB_Device_ProcessControlRequest+0x156>
    1102:	a9 c0       	rjmp	.+338    	; 0x1256 <USB_Device_ProcessControlRequest+0x2a8>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1104:	10 91 77 01 	lds	r17, 0x0177
    1108:	1f 77       	andi	r17, 0x7F	; 127

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    110a:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    110c:	f8 94       	cli
    110e:	80 91 e8 00 	lds	r24, 0x00E8
    1112:	87 7f       	andi	r24, 0xF7	; 247
    1114:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearSETUP();

		Endpoint_ClearStatusStage();
    1118:	8b dd       	rcall	.-1258   	; 0xc30 <Endpoint_ClearStatusStage>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    111a:	80 91 e8 00 	lds	r24, 0x00E8

		while (!(Endpoint_IsINReady()));
    111e:	80 ff       	sbrs	r24, 0
    1120:	fc cf       	rjmp	.-8      	; 0x111a <USB_Device_ProcessControlRequest+0x16c>

		USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1122:	11 23       	and	r17, r17
    1124:	11 f4       	brne	.+4      	; 0x112a <USB_Device_ProcessControlRequest+0x17c>
    1126:	82 e0       	ldi	r24, 0x02	; 2
    1128:	01 c0       	rjmp	.+2      	; 0x112c <USB_Device_ProcessControlRequest+0x17e>
    112a:	83 e0       	ldi	r24, 0x03	; 3
    112c:	80 93 74 01 	sts	0x0174, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
    1130:	80 91 e3 00 	lds	r24, 0x00E3
    1134:	80 78       	andi	r24, 0x80	; 128
    1136:	18 2b       	or	r17, r24
    1138:	10 93 e3 00 	sts	0x00E3, r17
				UDADDR |= (1 << ADDEN);
    113c:	80 91 e3 00 	lds	r24, 0x00E3
    1140:	80 68       	ori	r24, 0x80	; 128
    1142:	80 93 e3 00 	sts	0x00E3, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1146:	0f bf       	out	0x3f, r16	; 63
    __asm__ volatile ("" ::: "memory");
    1148:	86 c0       	rjmp	.+268    	; 0x1256 <USB_Device_ProcessControlRequest+0x2a8>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    114a:	80 58       	subi	r24, 0x80	; 128
    114c:	82 30       	cpi	r24, 0x02	; 2
    114e:	08 f0       	brcs	.+2      	; 0x1152 <USB_Device_ProcessControlRequest+0x1a4>
    1150:	82 c0       	rjmp	.+260    	; 0x1256 <USB_Device_ProcessControlRequest+0x2a8>
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1152:	80 91 77 01 	lds	r24, 0x0177
    1156:	90 91 78 01 	lds	r25, 0x0178
    115a:	23 e0       	ldi	r18, 0x03	; 3
    115c:	8c 3d       	cpi	r24, 0xDC	; 220
    115e:	92 07       	cpc	r25, r18
    1160:	99 f5       	brne	.+102    	; 0x11c8 <USB_Device_ProcessControlRequest+0x21a>
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1162:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1164:	f8 94       	cli
    1166:	de 01       	movw	r26, r28
    1168:	15 96       	adiw	r26, 0x05	; 5
    116a:	6e e0       	ldi	r22, 0x0E	; 14
    116c:	40 e0       	ldi	r20, 0x00	; 0
    116e:	50 e0       	ldi	r21, 0x00	; 0
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1170:	11 e2       	ldi	r17, 0x21	; 33
    1172:	e6 2f       	mov	r30, r22
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	10 93 57 00 	sts	0x0057, r17
    117a:	84 91       	lpm	r24, Z+

			if (SerialCharNum & 0x01)
    117c:	40 ff       	sbrs	r20, 0
    117e:	03 c0       	rjmp	.+6      	; 0x1186 <USB_Device_ProcessControlRequest+0x1d8>
			{
				SerialByte >>= 4;
    1180:	82 95       	swap	r24
    1182:	8f 70       	andi	r24, 0x0F	; 15
				SigReadAddress++;
    1184:	6f 5f       	subi	r22, 0xFF	; 255
			}

			SerialByte &= 0x0F;
    1186:	8f 70       	andi	r24, 0x0F	; 15
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0

			SignatureDescriptor.UnicodeString[SerialCharNum] = (SerialByte >= 10) ?
    118c:	8a 30       	cpi	r24, 0x0A	; 10
    118e:	18 f0       	brcs	.+6      	; 0x1196 <USB_Device_ProcessControlRequest+0x1e8>
    1190:	c9 01       	movw	r24, r18
    1192:	c7 96       	adiw	r24, 0x37	; 55
    1194:	02 c0       	rjmp	.+4      	; 0x119a <USB_Device_ProcessControlRequest+0x1ec>
    1196:	c9 01       	movw	r24, r18
    1198:	c0 96       	adiw	r24, 0x30	; 48
    119a:	8d 93       	st	X+, r24
    119c:	9d 93       	st	X+, r25
    119e:	4f 5f       	subi	r20, 0xFF	; 255
    11a0:	5f 4f       	sbci	r21, 0xFF	; 255

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
    11a2:	44 31       	cpi	r20, 0x14	; 20
    11a4:	51 05       	cpc	r21, r1
    11a6:	29 f7       	brne	.-54     	; 0x1172 <USB_Device_ProcessControlRequest+0x1c4>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11a8:	7f bf       	out	0x3f, r23	; 63
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
    11aa:	8a e2       	ldi	r24, 0x2A	; 42
    11ac:	8b 83       	std	Y+3, r24	; 0x03
	{
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    11ae:	83 e0       	ldi	r24, 0x03	; 3
    11b0:	8c 83       	std	Y+4, r24	; 0x04
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11b2:	80 91 e8 00 	lds	r24, 0x00E8
    11b6:	87 7f       	andi	r24, 0xF7	; 247
    11b8:	80 93 e8 00 	sts	0x00E8, r24
		}
	}

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    11bc:	ce 01       	movw	r24, r28
    11be:	03 96       	adiw	r24, 0x03	; 3
    11c0:	6a e2       	ldi	r22, 0x2A	; 42
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	62 d0       	rcall	.+196    	; 0x128a <Endpoint_Write_Control_Stream_LE>
    11c6:	12 c0       	rjmp	.+36     	; 0x11ec <USB_Device_ProcessControlRequest+0x23e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    11c8:	60 91 79 01 	lds	r22, 0x0179
    11cc:	ae 01       	movw	r20, r28
    11ce:	4f 5f       	subi	r20, 0xFF	; 255
    11d0:	5f 4f       	sbci	r21, 0xFF	; 255
    11d2:	25 d8       	rcall	.-4022   	; 0x21e <CALLBACK_USB_GetDescriptor>
    11d4:	bc 01       	movw	r22, r24
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	09 f4       	brne	.+2      	; 0x11dc <USB_Device_ProcessControlRequest+0x22e>
    11da:	3d c0       	rjmp	.+122    	; 0x1256 <USB_Device_ProcessControlRequest+0x2a8>
    11dc:	80 91 e8 00 	lds	r24, 0x00E8
    11e0:	87 7f       	andi	r24, 0xF7	; 247
    11e2:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ea:	ad d0       	rcall	.+346    	; 0x1346 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    11ec:	80 91 e8 00 	lds	r24, 0x00E8
    11f0:	8b 77       	andi	r24, 0x7B	; 123
    11f2:	80 93 e8 00 	sts	0x00E8, r24
    11f6:	2f c0       	rjmp	.+94     	; 0x1256 <USB_Device_ProcessControlRequest+0x2a8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    11f8:	80 38       	cpi	r24, 0x80	; 128
    11fa:	69 f5       	brne	.+90     	; 0x1256 <USB_Device_ProcessControlRequest+0x2a8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11fc:	80 91 e8 00 	lds	r24, 0x00E8
    1200:	87 7f       	andi	r24, 0xF7	; 247
    1202:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
    1206:	80 91 72 01 	lds	r24, 0x0172
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    120a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    120e:	80 91 e8 00 	lds	r24, 0x00E8
    1212:	8e 77       	andi	r24, 0x7E	; 126
    1214:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1218:	0b dd       	rcall	.-1514   	; 0xc30 <Endpoint_ClearStatusStage>
    121a:	1d c0       	rjmp	.+58     	; 0x1256 <USB_Device_ProcessControlRequest+0x2a8>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    121c:	88 23       	and	r24, r24
    121e:	d9 f4       	brne	.+54     	; 0x1256 <USB_Device_ProcessControlRequest+0x2a8>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1220:	90 91 77 01 	lds	r25, 0x0177
    1224:	92 30       	cpi	r25, 0x02	; 2
    1226:	b8 f4       	brcc	.+46     	; 0x1256 <USB_Device_ProcessControlRequest+0x2a8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1228:	80 91 e8 00 	lds	r24, 0x00E8
    122c:	87 7f       	andi	r24, 0xF7	; 247
    122e:	80 93 e8 00 	sts	0x00E8, r24
	}
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1232:	90 93 72 01 	sts	0x0172, r25

	Endpoint_ClearStatusStage();
    1236:	fc dc       	rcall	.-1544   	; 0xc30 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
    1238:	80 91 72 01 	lds	r24, 0x0172
    123c:	88 23       	and	r24, r24
    123e:	31 f4       	brne	.+12     	; 0x124c <USB_Device_ProcessControlRequest+0x29e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1240:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1244:	87 fd       	sbrc	r24, 7
    1246:	02 c0       	rjmp	.+4      	; 0x124c <USB_Device_ProcessControlRequest+0x29e>
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	01 c0       	rjmp	.+2      	; 0x124e <USB_Device_ProcessControlRequest+0x2a0>
    124c:	84 e0       	ldi	r24, 0x04	; 4
    124e:	80 93 74 01 	sts	0x0174, r24

	EVENT_USB_Device_ConfigurationChanged();
    1252:	0e 94 c3 00 	call	0x186	; 0x186 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1256:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    125a:	83 ff       	sbrs	r24, 3
    125c:	0a c0       	rjmp	.+20     	; 0x1272 <USB_Device_ProcessControlRequest+0x2c4>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    125e:	80 91 eb 00 	lds	r24, 0x00EB
    1262:	80 62       	ori	r24, 0x20	; 32
    1264:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1268:	80 91 e8 00 	lds	r24, 0x00E8
    126c:	87 7f       	andi	r24, 0xF7	; 247
    126e:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    1272:	ac 96       	adiw	r28, 0x2c	; 44
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	1f 91       	pop	r17
    1284:	0f 91       	pop	r16
    1286:	08 95       	ret

00001288 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1288:	08 95       	ret

0000128a <Endpoint_Write_Control_Stream_LE>:
    128a:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    128c:	40 91 7b 01 	lds	r20, 0x017B
    1290:	50 91 7c 01 	lds	r21, 0x017C
    1294:	46 17       	cp	r20, r22
    1296:	57 07       	cpc	r21, r23
    1298:	18 f4       	brcc	.+6      	; 0x12a0 <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    129a:	f9 01       	movw	r30, r18
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	3d c0       	rjmp	.+122    	; 0x131a <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    12a0:	61 15       	cp	r22, r1
    12a2:	71 05       	cpc	r23, r1
    12a4:	11 f0       	breq	.+4      	; 0x12aa <Endpoint_Write_Control_Stream_LE+0x20>
    12a6:	ab 01       	movw	r20, r22
    12a8:	f8 cf       	rjmp	.-16     	; 0x129a <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12aa:	80 91 e8 00 	lds	r24, 0x00E8
    12ae:	8e 77       	andi	r24, 0x7E	; 126
    12b0:	80 93 e8 00 	sts	0x00E8, r24
    12b4:	40 e0       	ldi	r20, 0x00	; 0
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	f0 cf       	rjmp	.-32     	; 0x129a <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    12ba:	80 91 74 01 	lds	r24, 0x0174

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    12be:	88 23       	and	r24, r24
    12c0:	f1 f1       	breq	.+124    	; 0x133e <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    12c2:	85 30       	cpi	r24, 0x05	; 5
    12c4:	f1 f1       	breq	.+124    	; 0x1342 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    12c6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    12ca:	83 ff       	sbrs	r24, 3
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <Endpoint_Write_Control_Stream_LE+0x48>
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    12d2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    12d6:	82 fd       	sbrc	r24, 2
    12d8:	2c c0       	rjmp	.+88     	; 0x1332 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12da:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    12de:	80 ff       	sbrs	r24, 0
    12e0:	1c c0       	rjmp	.+56     	; 0x131a <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    12e2:	20 91 f2 00 	lds	r18, 0x00F2
    12e6:	30 91 f3 00 	lds	r19, 0x00F3
    12ea:	07 c0       	rjmp	.+14     	; 0x12fa <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    12ec:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    12ee:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
    12f2:	41 50       	subi	r20, 0x01	; 1
    12f4:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    12f6:	2f 5f       	subi	r18, 0xFF	; 255
    12f8:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    12fa:	41 15       	cp	r20, r1
    12fc:	51 05       	cpc	r21, r1
    12fe:	19 f0       	breq	.+6      	; 0x1306 <Endpoint_Write_Control_Stream_LE+0x7c>
    1300:	28 30       	cpi	r18, 0x08	; 8
    1302:	31 05       	cpc	r19, r1
    1304:	98 f3       	brcs	.-26     	; 0x12ec <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	28 30       	cpi	r18, 0x08	; 8
    130a:	31 05       	cpc	r19, r1
    130c:	09 f4       	brne	.+2      	; 0x1310 <Endpoint_Write_Control_Stream_LE+0x86>
    130e:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1310:	80 91 e8 00 	lds	r24, 0x00E8
    1314:	8e 77       	andi	r24, 0x7E	; 126
    1316:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    131a:	41 15       	cp	r20, r1
    131c:	51 05       	cpc	r21, r1
    131e:	69 f6       	brne	.-102    	; 0x12ba <Endpoint_Write_Control_Stream_LE+0x30>
    1320:	99 23       	and	r25, r25
    1322:	59 f6       	brne	.-106    	; 0x12ba <Endpoint_Write_Control_Stream_LE+0x30>
    1324:	06 c0       	rjmp	.+12     	; 0x1332 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1326:	80 91 74 01 	lds	r24, 0x0174

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    132a:	88 23       	and	r24, r24
    132c:	41 f0       	breq	.+16     	; 0x133e <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    132e:	85 30       	cpi	r24, 0x05	; 5
    1330:	41 f0       	breq	.+16     	; 0x1342 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1332:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1336:	82 ff       	sbrs	r24, 2
    1338:	f6 cf       	rjmp	.-20     	; 0x1326 <Endpoint_Write_Control_Stream_LE+0x9c>
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	08 95       	ret
    133e:	82 e0       	ldi	r24, 0x02	; 2
    1340:	08 95       	ret
    1342:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1344:	08 95       	ret

00001346 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
    1346:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1348:	40 91 7b 01 	lds	r20, 0x017B
    134c:	50 91 7c 01 	lds	r21, 0x017C
    1350:	46 17       	cp	r20, r22
    1352:	57 07       	cpc	r21, r23
    1354:	10 f4       	brcc	.+4      	; 0x135a <Endpoint_Write_Control_PStream_LE+0x14>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1356:	60 e0       	ldi	r22, 0x00	; 0
    1358:	40 c0       	rjmp	.+128    	; 0x13da <Endpoint_Write_Control_PStream_LE+0x94>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    135a:	61 15       	cp	r22, r1
    135c:	71 05       	cpc	r23, r1
    135e:	11 f0       	breq	.+4      	; 0x1364 <Endpoint_Write_Control_PStream_LE+0x1e>
    1360:	ab 01       	movw	r20, r22
    1362:	f9 cf       	rjmp	.-14     	; 0x1356 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1364:	80 91 e8 00 	lds	r24, 0x00E8
    1368:	8e 77       	andi	r24, 0x7E	; 126
    136a:	80 93 e8 00 	sts	0x00E8, r24
    136e:	40 e0       	ldi	r20, 0x00	; 0
    1370:	50 e0       	ldi	r21, 0x00	; 0
    1372:	f1 cf       	rjmp	.-30     	; 0x1356 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1374:	80 91 74 01 	lds	r24, 0x0174

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1378:	88 23       	and	r24, r24
    137a:	09 f4       	brne	.+2      	; 0x137e <Endpoint_Write_Control_PStream_LE+0x38>
    137c:	40 c0       	rjmp	.+128    	; 0x13fe <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    137e:	85 30       	cpi	r24, 0x05	; 5
    1380:	09 f4       	brne	.+2      	; 0x1384 <Endpoint_Write_Control_PStream_LE+0x3e>
    1382:	3f c0       	rjmp	.+126    	; 0x1402 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1384:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1388:	83 ff       	sbrs	r24, 3
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <Endpoint_Write_Control_PStream_LE+0x4a>
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1390:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1394:	82 fd       	sbrc	r24, 2
    1396:	2d c0       	rjmp	.+90     	; 0x13f2 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1398:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    139c:	80 ff       	sbrs	r24, 0
    139e:	1d c0       	rjmp	.+58     	; 0x13da <Endpoint_Write_Control_PStream_LE+0x94>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    13a0:	80 91 f2 00 	lds	r24, 0x00F2
    13a4:	90 91 f3 00 	lds	r25, 0x00F3
    13a8:	09 c0       	rjmp	.+18     	; 0x13bc <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    13aa:	f9 01       	movw	r30, r18
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    13ac:	2f 5f       	subi	r18, 0xFF	; 255
    13ae:	3f 4f       	sbci	r19, 0xFF	; 255
    13b0:	e4 91       	lpm	r30, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    13b2:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
    13b6:	41 50       	subi	r20, 0x01	; 1
    13b8:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    13ba:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    13bc:	41 15       	cp	r20, r1
    13be:	51 05       	cpc	r21, r1
    13c0:	19 f0       	breq	.+6      	; 0x13c8 <Endpoint_Write_Control_PStream_LE+0x82>
    13c2:	88 30       	cpi	r24, 0x08	; 8
    13c4:	91 05       	cpc	r25, r1
    13c6:	88 f3       	brcs	.-30     	; 0x13aa <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	08 97       	sbiw	r24, 0x08	; 8
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <Endpoint_Write_Control_PStream_LE+0x8a>
    13ce:	61 e0       	ldi	r22, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13d0:	80 91 e8 00 	lds	r24, 0x00E8
    13d4:	8e 77       	andi	r24, 0x7E	; 126
    13d6:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    13da:	41 15       	cp	r20, r1
    13dc:	51 05       	cpc	r21, r1
    13de:	51 f6       	brne	.-108    	; 0x1374 <Endpoint_Write_Control_PStream_LE+0x2e>
    13e0:	66 23       	and	r22, r22
    13e2:	41 f6       	brne	.-112    	; 0x1374 <Endpoint_Write_Control_PStream_LE+0x2e>
    13e4:	06 c0       	rjmp	.+12     	; 0x13f2 <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    13e6:	80 91 74 01 	lds	r24, 0x0174

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    13ea:	88 23       	and	r24, r24
    13ec:	41 f0       	breq	.+16     	; 0x13fe <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    13ee:	85 30       	cpi	r24, 0x05	; 5
    13f0:	41 f0       	breq	.+16     	; 0x1402 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    13f2:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    13f6:	82 ff       	sbrs	r24, 2
    13f8:	f6 cf       	rjmp	.-20     	; 0x13e6 <Endpoint_Write_Control_PStream_LE+0xa0>
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	08 95       	ret
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	08 95       	ret
    1402:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1404:	08 95       	ret

00001406 <Endpoint_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    1406:	df 92       	push	r13
    1408:	ef 92       	push	r14
    140a:	ff 92       	push	r15
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	18 2f       	mov	r17, r24
    1416:	09 2f       	mov	r16, r25
    1418:	eb 01       	movw	r28, r22
    141a:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    141c:	2a dc       	rcall	.-1964   	; 0xc72 <Endpoint_WaitUntilReady>
    141e:	d8 2e       	mov	r13, r24
    1420:	88 23       	and	r24, r24
    1422:	19 f5       	brne	.+70     	; 0x146a <Endpoint_Read_Stream_LE+0x64>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1424:	81 2f       	mov	r24, r17
    1426:	90 2f       	mov	r25, r16
    1428:	9c 01       	movw	r18, r24
    142a:	89 01       	movw	r16, r18
    142c:	1c c0       	rjmp	.+56     	; 0x1466 <Endpoint_Read_Stream_LE+0x60>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    142e:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1432:	85 fd       	sbrc	r24, 5
    1434:	12 c0       	rjmp	.+36     	; 0x145a <Endpoint_Read_Stream_LE+0x54>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1436:	80 91 e8 00 	lds	r24, 0x00E8
    143a:	8b 77       	andi	r24, 0x7B	; 123
    143c:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    1440:	e1 14       	cp	r14, r1
    1442:	f1 04       	cpc	r15, r1
    1444:	31 f0       	breq	.+12     	; 0x1452 <Endpoint_Read_Stream_LE+0x4c>
    1446:	f7 01       	movw	r30, r14
    1448:	09 95       	icall
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	11 f4       	brne	.+4      	; 0x1452 <Endpoint_Read_Stream_LE+0x4c>
    144e:	85 e0       	ldi	r24, 0x05	; 5
    1450:	0d c0       	rjmp	.+26     	; 0x146c <Endpoint_Read_Stream_LE+0x66>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1452:	0f dc       	rcall	.-2018   	; 0xc72 <Endpoint_WaitUntilReady>
    1454:	88 23       	and	r24, r24
    1456:	39 f0       	breq	.+14     	; 0x1466 <Endpoint_Read_Stream_LE+0x60>
    1458:	09 c0       	rjmp	.+18     	; 0x146c <Endpoint_Read_Stream_LE+0x66>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    145a:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    145e:	f8 01       	movw	r30, r16
    1460:	81 93       	st	Z+, r24
    1462:	8f 01       	movw	r16, r30
			Length--;
    1464:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    1466:	20 97       	sbiw	r28, 0x00	; 0
    1468:	11 f7       	brne	.-60     	; 0x142e <Endpoint_Read_Stream_LE+0x28>
    146a:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	1f 91       	pop	r17
    1472:	0f 91       	pop	r16
    1474:	ff 90       	pop	r15
    1476:	ef 90       	pop	r14
    1478:	df 90       	pop	r13
    147a:	08 95       	ret

0000147c <Endpoint_Write_Stream_BE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    147c:	df 92       	push	r13
    147e:	ef 92       	push	r14
    1480:	ff 92       	push	r15
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	8c 01       	movw	r16, r24
    148c:	eb 01       	movw	r28, r22
    148e:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1490:	f0 db       	rcall	.-2080   	; 0xc72 <Endpoint_WaitUntilReady>
    1492:	d8 2e       	mov	r13, r24
    1494:	88 23       	and	r24, r24
    1496:	21 f5       	brne	.+72     	; 0x14e0 <Endpoint_Write_Stream_BE+0x64>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1498:	21 97       	sbiw	r28, 0x01	; 1
    149a:	0c 0f       	add	r16, r28
    149c:	1d 1f       	adc	r17, r29
    149e:	21 96       	adiw	r28, 0x01	; 1
    14a0:	1d c0       	rjmp	.+58     	; 0x14dc <Endpoint_Write_Stream_BE+0x60>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    14a2:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    14a6:	85 fd       	sbrc	r24, 5
    14a8:	12 c0       	rjmp	.+36     	; 0x14ce <Endpoint_Write_Stream_BE+0x52>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14aa:	80 91 e8 00 	lds	r24, 0x00E8
    14ae:	8e 77       	andi	r24, 0x7E	; 126
    14b0:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    14b4:	e1 14       	cp	r14, r1
    14b6:	f1 04       	cpc	r15, r1
    14b8:	31 f0       	breq	.+12     	; 0x14c6 <Endpoint_Write_Stream_BE+0x4a>
    14ba:	f7 01       	movw	r30, r14
    14bc:	09 95       	icall
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	11 f4       	brne	.+4      	; 0x14c6 <Endpoint_Write_Stream_BE+0x4a>
    14c2:	85 e0       	ldi	r24, 0x05	; 5
    14c4:	0e c0       	rjmp	.+28     	; 0x14e2 <Endpoint_Write_Stream_BE+0x66>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    14c6:	d5 db       	rcall	.-2134   	; 0xc72 <Endpoint_WaitUntilReady>
    14c8:	88 23       	and	r24, r24
    14ca:	41 f0       	breq	.+16     	; 0x14dc <Endpoint_Write_Stream_BE+0x60>
    14cc:	0a c0       	rjmp	.+20     	; 0x14e2 <Endpoint_Write_Stream_BE+0x66>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    14ce:	f8 01       	movw	r30, r16
    14d0:	80 81       	ld	r24, Z
    14d2:	01 50       	subi	r16, 0x01	; 1
    14d4:	10 40       	sbci	r17, 0x00	; 0
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    14d6:	80 93 f1 00 	sts	0x00F1, r24
			Length--;
    14da:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    14dc:	20 97       	sbiw	r28, 0x00	; 0
    14de:	09 f7       	brne	.-62     	; 0x14a2 <Endpoint_Write_Stream_BE+0x26>
    14e0:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	ff 90       	pop	r15
    14ec:	ef 90       	pop	r14
    14ee:	df 90       	pop	r13
    14f0:	08 95       	ret

000014f2 <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    14f2:	df 92       	push	r13
    14f4:	ef 92       	push	r14
    14f6:	ff 92       	push	r15
    14f8:	0f 93       	push	r16
    14fa:	1f 93       	push	r17
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	18 2f       	mov	r17, r24
    1502:	09 2f       	mov	r16, r25
    1504:	eb 01       	movw	r28, r22
    1506:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1508:	b4 db       	rcall	.-2200   	; 0xc72 <Endpoint_WaitUntilReady>
    150a:	d8 2e       	mov	r13, r24
    150c:	88 23       	and	r24, r24
    150e:	19 f5       	brne	.+70     	; 0x1556 <Endpoint_Write_Stream_LE+0x64>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1510:	81 2f       	mov	r24, r17
    1512:	90 2f       	mov	r25, r16
    1514:	9c 01       	movw	r18, r24
    1516:	89 01       	movw	r16, r18
    1518:	1c c0       	rjmp	.+56     	; 0x1552 <Endpoint_Write_Stream_LE+0x60>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    151a:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    151e:	85 fd       	sbrc	r24, 5
    1520:	12 c0       	rjmp	.+36     	; 0x1546 <Endpoint_Write_Stream_LE+0x54>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1522:	80 91 e8 00 	lds	r24, 0x00E8
    1526:	8e 77       	andi	r24, 0x7E	; 126
    1528:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    152c:	e1 14       	cp	r14, r1
    152e:	f1 04       	cpc	r15, r1
    1530:	31 f0       	breq	.+12     	; 0x153e <Endpoint_Write_Stream_LE+0x4c>
    1532:	f7 01       	movw	r30, r14
    1534:	09 95       	icall
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	11 f4       	brne	.+4      	; 0x153e <Endpoint_Write_Stream_LE+0x4c>
    153a:	85 e0       	ldi	r24, 0x05	; 5
    153c:	0d c0       	rjmp	.+26     	; 0x1558 <Endpoint_Write_Stream_LE+0x66>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    153e:	99 db       	rcall	.-2254   	; 0xc72 <Endpoint_WaitUntilReady>
    1540:	88 23       	and	r24, r24
    1542:	39 f0       	breq	.+14     	; 0x1552 <Endpoint_Write_Stream_LE+0x60>
    1544:	09 c0       	rjmp	.+18     	; 0x1558 <Endpoint_Write_Stream_LE+0x66>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1546:	f8 01       	movw	r30, r16
    1548:	81 91       	ld	r24, Z+
    154a:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    154c:	80 93 f1 00 	sts	0x00F1, r24
			Length--;
    1550:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    1552:	20 97       	sbiw	r28, 0x00	; 0
    1554:	11 f7       	brne	.-60     	; 0x151a <Endpoint_Write_Stream_LE+0x28>
    1556:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	ff 90       	pop	r15
    1562:	ef 90       	pop	r14
    1564:	df 90       	pop	r13
    1566:	08 95       	ret

00001568 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1568:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    156a:	80 91 74 01 	lds	r24, 0x0174
    156e:	88 23       	and	r24, r24
    1570:	61 f0       	breq	.+24     	; 0x158a <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1572:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1576:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    157a:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    157e:	83 ff       	sbrs	r24, 3
    1580:	01 c0       	rjmp	.+2      	; 0x1584 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    1582:	15 dd       	rcall	.-1494   	; 0xfae <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1584:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1586:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    158a:	1f 91       	pop	r17
    158c:	08 95       	ret

0000158e <StreamCallback_MS_Device_AbortOnMassStoreReset>:
{
	#if !defined(INTERRUPT_CONTROL_ENDPOINT)
	USB_USBTask();
	#endif

	if (*CallbackIsResetSource)
    158e:	e0 91 6e 01 	lds	r30, 0x016E
    1592:	f0 91 6f 01 	lds	r31, 0x016F
    1596:	80 81       	ld	r24, Z
	  return STREAMCALLBACK_Abort;
	else
	  return STREAMCALLBACK_Continue;
}
    1598:	08 95       	ret

0000159a <MS_Device_USBTask>:

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	ec 01       	movw	r28, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    15a4:	80 91 74 01 	lds	r24, 0x0174
    15a8:	84 30       	cpi	r24, 0x04	; 4
    15aa:	09 f0       	breq	.+2      	; 0x15ae <MS_Device_USBTask+0x14>
    15ac:	e1 c0       	rjmp	.+450    	; 0x1770 <MS_Device_USBTask+0x1d6>
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    15ae:	9d 81       	ldd	r25, Y+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    15b0:	90 93 e9 00 	sts	0x00E9, r25
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    15b4:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    15b8:	85 ff       	sbrs	r24, 5
    15ba:	a5 c0       	rjmp	.+330    	; 0x1706 <MS_Device_USBTask+0x16c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    15bc:	90 93 e9 00 	sts	0x00E9, r25

static bool MS_Device_ReadInCommandBlock(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);

	CallbackIsResetSource = &MSInterfaceInfo->State.IsMassStoreReset;
    15c0:	8e 01       	movw	r16, r28
    15c2:	0a 5c       	subi	r16, 0xCA	; 202
    15c4:	1f 4f       	sbci	r17, 0xFF	; 255
    15c6:	10 93 6f 01 	sts	0x016F, r17
    15ca:	00 93 6e 01 	sts	0x016E, r16
	if (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    15ce:	ce 01       	movw	r24, r28
    15d0:	0a 96       	adiw	r24, 0x0a	; 10
    15d2:	6f e0       	ldi	r22, 0x0F	; 15
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	47 ec       	ldi	r20, 0xC7	; 199
    15d8:	5a e0       	ldi	r21, 0x0A	; 10
    15da:	15 df       	rcall	.-470    	; 0x1406 <Endpoint_Read_Stream_LE>
    15dc:	88 23       	and	r24, r24
    15de:	09 f0       	breq	.+2      	; 0x15e2 <MS_Device_USBTask+0x48>
    15e0:	92 c0       	rjmp	.+292    	; 0x1706 <MS_Device_USBTask+0x16c>
	                            StreamCallback_MS_Device_AbortOnMassStoreReset))
	{
		return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != MS_CBW_SIGNATURE)                  ||
    15e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    15e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    15e6:	ac 85       	ldd	r26, Y+12	; 0x0c
    15e8:	bd 85       	ldd	r27, Y+13	; 0x0d
    15ea:	85 55       	subi	r24, 0x55	; 85
    15ec:	93 45       	sbci	r25, 0x53	; 83
    15ee:	a2 44       	sbci	r26, 0x42	; 66
    15f0:	b3 44       	sbci	r27, 0x43	; 67
    15f2:	79 f4       	brne	.+30     	; 0x1612 <MS_Device_USBTask+0x78>
    15f4:	9f 89       	ldd	r25, Y+23	; 0x17
    15f6:	89 85       	ldd	r24, Y+9	; 0x09
    15f8:	98 17       	cp	r25, r24
    15fa:	58 f4       	brcc	.+22     	; 0x1612 <MS_Device_USBTask+0x78>
    15fc:	8e 89       	ldd	r24, Y+22	; 0x16
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	8f 71       	andi	r24, 0x1F	; 31
    1602:	90 70       	andi	r25, 0x00	; 0
    1604:	89 2b       	or	r24, r25
    1606:	29 f4       	brne	.+10     	; 0x1612 <MS_Device_USBTask+0x78>
    1608:	68 8d       	ldd	r22, Y+24	; 0x18
    160a:	66 23       	and	r22, r22
    160c:	11 f0       	breq	.+4      	; 0x1612 <MS_Device_USBTask+0x78>
    160e:	61 31       	cpi	r22, 0x11	; 17
    1610:	70 f0       	brcs	.+28     	; 0x162e <MS_Device_USBTask+0x94>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1612:	80 91 eb 00 	lds	r24, 0x00EB
    1616:	80 62       	ori	r24, 0x20	; 32
    1618:	80 93 eb 00 	sts	0x00EB, r24
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength >  16))
	{
		Endpoint_StallTransaction();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    161c:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    161e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1622:	80 91 eb 00 	lds	r24, 0x00EB
    1626:	80 62       	ori	r24, 0x20	; 32
    1628:	80 93 eb 00 	sts	0x00EB, r24
    162c:	6c c0       	rjmp	.+216    	; 0x1706 <MS_Device_USBTask+0x16c>
		Endpoint_StallTransaction();

		return false;
	}

	CallbackIsResetSource = &MSInterfaceInfo->State.IsMassStoreReset;
    162e:	10 93 6f 01 	sts	0x016F, r17
    1632:	00 93 6e 01 	sts	0x016E, r16
	if (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1636:	ce 01       	movw	r24, r28
    1638:	49 96       	adiw	r24, 0x19	; 25
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	47 ec       	ldi	r20, 0xC7	; 199
    163e:	5a e0       	ldi	r21, 0x0A	; 10
    1640:	e2 de       	rcall	.-572    	; 0x1406 <Endpoint_Read_Stream_LE>
    1642:	88 23       	and	r24, r24
    1644:	09 f0       	breq	.+2      	; 0x1648 <MS_Device_USBTask+0xae>
    1646:	5f c0       	rjmp	.+190    	; 0x1706 <MS_Device_USBTask+0x16c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1648:	80 91 e8 00 	lds	r24, 0x00E8
    164c:	8b 77       	andi	r24, 0x7B	; 123
    164e:	80 93 e8 00 	sts	0x00E8, r24

	if (Endpoint_IsReadWriteAllowed())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    1652:	8e 89       	ldd	r24, Y+22	; 0x16
    1654:	87 ff       	sbrs	r24, 7
    1656:	03 c0       	rjmp	.+6      	; 0x165e <MS_Device_USBTask+0xc4>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1658:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    165a:	80 93 e9 00 	sts	0x00E9, r24

			MSInterfaceInfo->State.CommandStatus.Status = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo) ?
    165e:	ce 01       	movw	r24, r28
    1660:	0e 94 b5 00 	call	0x16a	; 0x16a <CALLBACK_MS_Device_SCSICommandReceived>
    1664:	91 e0       	ldi	r25, 0x01	; 1
    1666:	98 27       	eor	r25, r24
    1668:	9d ab       	std	Y+53, r25	; 0x35
			                                               MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
			MSInterfaceInfo->State.CommandStatus.Signature           = MS_CSW_SIGNATURE;
    166a:	25 e5       	ldi	r18, 0x55	; 85
    166c:	33 e5       	ldi	r19, 0x53	; 83
    166e:	42 e4       	ldi	r20, 0x42	; 66
    1670:	53 e5       	ldi	r21, 0x53	; 83
    1672:	29 a7       	std	Y+41, r18	; 0x29
    1674:	3a a7       	std	Y+42, r19	; 0x2a
    1676:	4b a7       	std	Y+43, r20	; 0x2b
    1678:	5c a7       	std	Y+44, r21	; 0x2c
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    167a:	2e 85       	ldd	r18, Y+14	; 0x0e
    167c:	3f 85       	ldd	r19, Y+15	; 0x0f
    167e:	48 89       	ldd	r20, Y+16	; 0x10
    1680:	59 89       	ldd	r21, Y+17	; 0x11
    1682:	2d a7       	std	Y+45, r18	; 0x2d
    1684:	3e a7       	std	Y+46, r19	; 0x2e
    1686:	4f a7       	std	Y+47, r20	; 0x2f
    1688:	58 ab       	std	Y+48, r21	; 0x30
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    168a:	2a 89       	ldd	r18, Y+18	; 0x12
    168c:	3b 89       	ldd	r19, Y+19	; 0x13
    168e:	4c 89       	ldd	r20, Y+20	; 0x14
    1690:	5d 89       	ldd	r21, Y+21	; 0x15
    1692:	29 ab       	std	Y+49, r18	; 0x31
    1694:	3a ab       	std	Y+50, r19	; 0x32
    1696:	4b ab       	std	Y+51, r20	; 0x33
    1698:	5c ab       	std	Y+52, r21	; 0x34

			if ((MSInterfaceInfo->State.CommandStatus.Status == MS_SCSI_COMMAND_Fail) &&
    169a:	91 30       	cpi	r25, 0x01	; 1
    169c:	51 f4       	brne	.+20     	; 0x16b2 <MS_Device_USBTask+0x118>
    169e:	21 15       	cp	r18, r1
    16a0:	31 05       	cpc	r19, r1
    16a2:	41 05       	cpc	r20, r1
    16a4:	51 05       	cpc	r21, r1
    16a6:	29 f0       	breq	.+10     	; 0x16b2 <MS_Device_USBTask+0x118>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    16a8:	80 91 eb 00 	lds	r24, 0x00EB
    16ac:	80 62       	ori	r24, 0x20	; 32
    16ae:	80 93 eb 00 	sts	0x00EB, r24
	return true;
}

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    16b2:	8d 81       	ldd	r24, Y+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    16b4:	80 93 e9 00 	sts	0x00E9, r24
    16b8:	03 c0       	rjmp	.+6      	; 0x16c0 <MS_Device_USBTask+0x126>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    16ba:	8e a9       	ldd	r24, Y+54	; 0x36
    16bc:	88 23       	and	r24, r24
    16be:	19 f5       	brne	.+70     	; 0x1706 <MS_Device_USBTask+0x16c>
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    16c0:	80 91 eb 00 	lds	r24, 0x00EB

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);

	while (Endpoint_IsStalled())
    16c4:	85 fd       	sbrc	r24, 5
    16c6:	f9 cf       	rjmp	.-14     	; 0x16ba <MS_Device_USBTask+0x120>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    16ca:	80 93 e9 00 	sts	0x00E9, r24
    16ce:	03 c0       	rjmp	.+6      	; 0x16d6 <MS_Device_USBTask+0x13c>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    16d0:	8e a9       	ldd	r24, Y+54	; 0x36
    16d2:	88 23       	and	r24, r24
    16d4:	c1 f4       	brne	.+48     	; 0x1706 <MS_Device_USBTask+0x16c>
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    16d6:	80 91 eb 00 	lds	r24, 0x00EB
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);

	while (Endpoint_IsStalled())
    16da:	85 fd       	sbrc	r24, 5
    16dc:	f9 cf       	rjmp	.-14     	; 0x16d0 <MS_Device_USBTask+0x136>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	CallbackIsResetSource = &MSInterfaceInfo->State.IsMassStoreReset;
    16de:	e6 96       	adiw	r28, 0x36	; 54
    16e0:	d0 93 6f 01 	sts	0x016F, r29
    16e4:	c0 93 6e 01 	sts	0x016E, r28
    16e8:	e6 97       	sbiw	r28, 0x36	; 54
	if (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus, sizeof(MS_CommandStatusWrapper_t),
    16ea:	ce 01       	movw	r24, r28
    16ec:	89 96       	adiw	r24, 0x29	; 41
    16ee:	6d e0       	ldi	r22, 0x0D	; 13
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	47 ec       	ldi	r20, 0xC7	; 199
    16f4:	5a e0       	ldi	r21, 0x0A	; 10
    16f6:	fd de       	rcall	.-518    	; 0x14f2 <Endpoint_Write_Stream_LE>
    16f8:	88 23       	and	r24, r24
    16fa:	29 f4       	brne	.+10     	; 0x1706 <MS_Device_USBTask+0x16c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16fc:	80 91 e8 00 	lds	r24, 0x00E8
    1700:	8e 77       	andi	r24, 0x7E	; 126
    1702:	80 93 e8 00 	sts	0x00E8, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    1706:	8e a9       	ldd	r24, Y+54	; 0x36
    1708:	88 23       	and	r24, r24
    170a:	91 f1       	breq	.+100    	; 0x1770 <MS_Device_USBTask+0x1d6>
	{
		Endpoint_ResetFIFO(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    170c:	4d 81       	ldd	r20, Y+5	; 0x05
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    170e:	21 e0       	ldi	r18, 0x01	; 1
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	c9 01       	movw	r24, r18
    1714:	04 2e       	mov	r0, r20
    1716:	02 c0       	rjmp	.+4      	; 0x171c <MS_Device_USBTask+0x182>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <MS_Device_USBTask+0x17e>
    1720:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1724:	10 92 ea 00 	sts	0x00EA, r1
		Endpoint_ResetFIFO(MSInterfaceInfo->Config.DataINEndpointNumber);
    1728:	99 81       	ldd	r25, Y+1	; 0x01
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    172a:	09 2e       	mov	r0, r25
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <MS_Device_USBTask+0x198>
    172e:	22 0f       	add	r18, r18
    1730:	33 1f       	adc	r19, r19
    1732:	0a 94       	dec	r0
    1734:	e2 f7       	brpl	.-8      	; 0x172e <MS_Device_USBTask+0x194>
    1736:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    173a:	10 92 ea 00 	sts	0x00EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    173e:	40 93 e9 00 	sts	0x00E9, r20
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1742:	80 91 eb 00 	lds	r24, 0x00EB
    1746:	80 61       	ori	r24, 0x10	; 16
    1748:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    174c:	80 91 eb 00 	lds	r24, 0x00EB
    1750:	88 60       	ori	r24, 0x08	; 8
    1752:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1756:	90 93 e9 00 	sts	0x00E9, r25
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    175a:	80 91 eb 00 	lds	r24, 0x00EB
    175e:	80 61       	ori	r24, 0x10	; 16
    1760:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1764:	80 91 eb 00 	lds	r24, 0x00EB
    1768:	88 60       	ori	r24, 0x08	; 8
    176a:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    176e:	1e aa       	std	Y+54, r1	; 0x36
	}
}
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	1f 91       	pop	r17
    1776:	0f 91       	pop	r16
    1778:	08 95       	ret

0000177a <MS_Device_ConfigureEndpoints>:
			break;
	}
}

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    177a:	1f 93       	push	r17
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    1782:	0a 96       	adiw	r24, 0x0a	; 10
    1784:	fc 01       	movw	r30, r24
    1786:	8d e2       	ldi	r24, 0x2D	; 45
    1788:	df 01       	movw	r26, r30
    178a:	1d 92       	st	X+, r1
    178c:	8a 95       	dec	r24
    178e:	e9 f7       	brne	.-6      	; 0x178a <MS_Device_ConfigureEndpoints+0x10>
    1790:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == MSInterfaceInfo->Config.DataINEndpointNumber)
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	18 17       	cp	r17, r24
    1796:	29 f4       	brne	.+10     	; 0x17a2 <MS_Device_ConfigureEndpoints+0x28>
		{
			Size         = MSInterfaceInfo->Config.DataINEndpointSize;
    1798:	ea 81       	ldd	r30, Y+2	; 0x02
    179a:	fb 81       	ldd	r31, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
    179c:	8c 81       	ldd	r24, Y+4	; 0x04
    179e:	61 e0       	ldi	r22, 0x01	; 1
    17a0:	07 c0       	rjmp	.+14     	; 0x17b0 <MS_Device_ConfigureEndpoints+0x36>
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
    17a2:	8d 81       	ldd	r24, Y+5	; 0x05
    17a4:	18 17       	cp	r17, r24
    17a6:	e1 f4       	brne	.+56     	; 0x17e0 <MS_Device_ConfigureEndpoints+0x66>
		{
			Size         = MSInterfaceInfo->Config.DataOUTEndpointSize;
    17a8:	ee 81       	ldd	r30, Y+6	; 0x06
    17aa:	ff 81       	ldd	r31, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    17ac:	88 85       	ldd	r24, Y+8	; 0x08
    17ae:	60 e0       	ldi	r22, 0x00	; 0
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    17b0:	88 23       	and	r24, r24
    17b2:	11 f4       	brne	.+4      	; 0x17b8 <MS_Device_ConfigureEndpoints+0x3e>
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    17b6:	01 c0       	rjmp	.+2      	; 0x17ba <MS_Device_ConfigureEndpoints+0x40>
    17b8:	44 e0       	ldi	r20, 0x04	; 4
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	88 e0       	ldi	r24, 0x08	; 8
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	03 c0       	rjmp	.+6      	; 0x17c8 <MS_Device_ConfigureEndpoints+0x4e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    17c2:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    17c8:	8e 17       	cp	r24, r30
    17ca:	9f 07       	cpc	r25, r31
    17cc:	d0 f3       	brcs	.-12     	; 0x17c2 <MS_Device_ConfigureEndpoints+0x48>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
    17ce:	60 68       	ori	r22, 0x80	; 128
    17d0:	42 60       	ori	r20, 0x02	; 2
    17d2:	22 95       	swap	r18
    17d4:	20 7f       	andi	r18, 0xF0	; 240
    17d6:	42 2b       	or	r20, r18
    17d8:	81 2f       	mov	r24, r17
    17da:	17 da       	rcall	.-3026   	; 0xc0a <Endpoint_ConfigureEndpoint_Prv>
    17dc:	88 23       	and	r24, r24
    17de:	21 f0       	breq	.+8      	; 0x17e8 <MS_Device_ConfigureEndpoints+0x6e>

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    17e0:	1f 5f       	subi	r17, 0xFF	; 255
    17e2:	17 30       	cpi	r17, 0x07	; 7
    17e4:	b1 f6       	brne	.-84     	; 0x1792 <MS_Device_ConfigureEndpoints+0x18>
    17e6:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	1f 91       	pop	r17
    17ee:	08 95       	ret

000017f0 <MS_Device_ProcessControlRequest>:
#include "MassStorage.h"

static volatile bool* CallbackIsResetSource;

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	ec 01       	movw	r28, r24
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    17f6:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    17fa:	83 ff       	sbrs	r24, 3
    17fc:	2f c0       	rjmp	.+94     	; 0x185c <MS_Device_ProcessControlRequest+0x6c>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    17fe:	88 81       	ld	r24, Y
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	20 91 79 01 	lds	r18, 0x0179
    1806:	30 91 7a 01 	lds	r19, 0x017A
    180a:	28 17       	cp	r18, r24
    180c:	39 07       	cpc	r19, r25
    180e:	31 f5       	brne	.+76     	; 0x185c <MS_Device_ProcessControlRequest+0x6c>
	  return;

	switch (USB_ControlRequest.bRequest)
    1810:	80 91 76 01 	lds	r24, 0x0176
    1814:	8e 3f       	cpi	r24, 0xFE	; 254
    1816:	79 f0       	breq	.+30     	; 0x1836 <MS_Device_ProcessControlRequest+0x46>
    1818:	8f 3f       	cpi	r24, 0xFF	; 255
    181a:	01 f5       	brne	.+64     	; 0x185c <MS_Device_ProcessControlRequest+0x6c>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    181c:	80 91 75 01 	lds	r24, 0x0175
    1820:	81 32       	cpi	r24, 0x21	; 33
    1822:	e1 f4       	brne	.+56     	; 0x185c <MS_Device_ProcessControlRequest+0x6c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1824:	80 91 e8 00 	lds	r24, 0x00E8
    1828:	87 7f       	andi	r24, 0xF7	; 247
    182a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    182e:	00 da       	rcall	.-3072   	; 0xc30 <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	8e ab       	std	Y+54, r24	; 0x36
    1834:	13 c0       	rjmp	.+38     	; 0x185c <MS_Device_ProcessControlRequest+0x6c>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1836:	80 91 75 01 	lds	r24, 0x0175
    183a:	81 3a       	cpi	r24, 0xA1	; 161
    183c:	79 f4       	brne	.+30     	; 0x185c <MS_Device_ProcessControlRequest+0x6c>
    183e:	80 91 e8 00 	lds	r24, 0x00E8
    1842:	87 7f       	andi	r24, 0xF7	; 247
    1844:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Byte(MSInterfaceInfo->Config.TotalLUNs - 1);
    1848:	89 85       	ldd	r24, Y+9	; 0x09
    184a:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    184c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1850:	80 91 e8 00 	lds	r24, 0x00E8
    1854:	8e 77       	andi	r24, 0x7E	; 126
    1856:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    185a:	ea d9       	rcall	.-3116   	; 0xc30 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	08 95       	ret

00001862 <_exit>:
    1862:	f8 94       	cli

00001864 <__stop_program>:
    1864:	ff cf       	rjmp	.-2      	; 0x1864 <__stop_program>
