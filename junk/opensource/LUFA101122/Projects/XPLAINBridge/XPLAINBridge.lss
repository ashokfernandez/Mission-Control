
XPLAINBridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  0000222a  000022de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000222a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021e  00800158  00800158  00002336  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  00002336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000b1c  00000000  00000000  00002338  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000002b1  00000000  00000000  00002e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000660  00000000  00000000  00003105  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000011ab  00000000  00000000  00003765  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000a795  00000000  00000000  00004910  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002ef9  00000000  00000000  0000f0a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00007cc5  00000000  00000000  00011f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000009a0  00000000  00000000  00019c64  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000038a0  00000000  00000000  0001a604  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003a8e  00000000  00000000  0001dea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000768  00000000  00000000  00021932  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return Endpoint_IsConfigured();
}

void Endpoint_ClearEndpoints(void)
{
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
       4:	9e c2       	rjmp	.+1340   	; 0x542 <__vector_1>

	return ENDPOINT_READYWAIT_NoError;
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
       6:	00 00       	nop
       8:	ff c0       	rjmp	.+510    	; 0x208 <__bad_interrupt>
       a:	00 00       	nop
       c:	fd c0       	rjmp	.+506    	; 0x208 <__bad_interrupt>
       e:	00 00       	nop
      10:	fb c0       	rjmp	.+502    	; 0x208 <__bad_interrupt>
      12:	00 00       	nop
      14:	f9 c0       	rjmp	.+498    	; 0x208 <__bad_interrupt>
      16:	00 00       	nop
      18:	f7 c0       	rjmp	.+494    	; 0x208 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f5 c0       	rjmp	.+490    	; 0x208 <__bad_interrupt>
      1e:	00 00       	nop
      20:	f3 c0       	rjmp	.+486    	; 0x208 <__bad_interrupt>
      22:	00 00       	nop
      24:	f1 c0       	rjmp	.+482    	; 0x208 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <__vector_10>
      2c:	ed c0       	rjmp	.+474    	; 0x208 <__bad_interrupt>
      2e:	00 00       	nop
      30:	eb c0       	rjmp	.+470    	; 0x208 <__bad_interrupt>
      32:	00 00       	nop
      34:	e9 c0       	rjmp	.+466    	; 0x208 <__bad_interrupt>
      36:	00 00       	nop
      38:	e7 c0       	rjmp	.+462    	; 0x208 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e5 c0       	rjmp	.+458    	; 0x208 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c2       	rjmp	.+1330   	; 0x574 <__vector_16>
      42:	00 00       	nop
      44:	e1 c0       	rjmp	.+450    	; 0x208 <__bad_interrupt>
      46:	00 00       	nop
      48:	df c0       	rjmp	.+446    	; 0x208 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	dd c0       	rjmp	.+442    	; 0x208 <__bad_interrupt>
      4e:	00 00       	nop
      50:	db c0       	rjmp	.+438    	; 0x208 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c3       	rjmp	.+1648   	; 0x6c6 <__vector_21>
      56:	00 00       	nop
      58:	d7 c0       	rjmp	.+430    	; 0x208 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d5 c0       	rjmp	.+426    	; 0x208 <__bad_interrupt>
      5e:	00 00       	nop
      60:	d3 c0       	rjmp	.+422    	; 0x208 <__bad_interrupt>
      62:	00 00       	nop
      64:	d1 c0       	rjmp	.+418    	; 0x208 <__bad_interrupt>
      66:	00 00       	nop
      68:	cf c0       	rjmp	.+414    	; 0x208 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	cd c0       	rjmp	.+410    	; 0x208 <__bad_interrupt>
      6e:	00 00       	nop
      70:	cb c0       	rjmp	.+406    	; 0x208 <__bad_interrupt>
      72:	00 00       	nop
      74:	c9 c0       	rjmp	.+402    	; 0x208 <__bad_interrupt>
      76:	00 00       	nop
      78:	c7 c0       	rjmp	.+398    	; 0x208 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ce c2       	rjmp	.+1436   	; 0x61a <__vector_31>
      7e:	00 00       	nop
      80:	c3 c0       	rjmp	.+390    	; 0x208 <__bad_interrupt>
      82:	00 00       	nop
      84:	c1 c0       	rjmp	.+386    	; 0x208 <__bad_interrupt>
      86:	00 00       	nop
      88:	bf c0       	rjmp	.+382    	; 0x208 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	bd c0       	rjmp	.+378    	; 0x208 <__bad_interrupt>
      8e:	00 00       	nop
      90:	bb c0       	rjmp	.+374    	; 0x208 <__bad_interrupt>
      92:	00 00       	nop
      94:	b9 c0       	rjmp	.+370    	; 0x208 <__bad_interrupt>
      96:	00 00       	nop

00000098 <AVRISP_DeviceDescriptor>:
      98:	12 01 10 01 ff 00 00 08 eb 03 04 21 00 02 01 02     ...........!....
      a8:	03 01                                               ..

000000aa <AVRISP_ConfigurationDescriptor>:
      aa:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 ff 00     .. .....2.......
      ba:	00 00 07 05 82 02 40 00 0a 07 05 02 02 40 00 0a     ......@......@..

000000ca <AVRISP_LanguageString>:
      ca:	04 03 09 04                                         ....

000000ce <AVRISP_ManufacturerString>:
      ce:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      de:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e8 <AVRISP_ProductString>:
      e8:	2e 03 4c 00 55 00 46 00 41 00 20 00 41 00 56 00     ..L.U.F.A. .A.V.
      f8:	52 00 49 00 53 00 50 00 20 00 4d 00 6b 00 49 00     R.I.S.P. .M.k.I.
     108:	49 00 20 00 43 00 6c 00 6f 00 6e 00 65 00 00 00     I. .C.l.o.n.e...

00000118 <AVRISP_SerialString>:
     118:	1c 03 30 00 30 00 30 00 30 00 41 00 30 00 30 00     ..0.0.0.0.A.0.0.
     128:	31 00 32 00 38 00 32 00 35 00 35 00 00 00           1.2.8.2.5.5...

00000136 <USART_DeviceDescriptor>:
     136:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
     146:	dc 01                                               ..

00000148 <USART_ConfigurationDescriptor>:
     148:	09 02 3e 00 02 01 00 80 32 09 04 00 00 01 02 02     ..>.....2.......
     158:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     168:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     178:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

00000186 <USART_LanguageString>:
     186:	04 03 09 04                                         ....

0000018a <USART_ManufacturerString>:
     18a:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     19a:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000001a4 <USART_ProductString>:
     1a4:	26 03 4c 00 55 00 46 00 41 00 20 00 58 00 50 00     &.L.U.F.A. .X.P.
     1b4:	4c 00 41 00 49 00 4e 00 20 00 42 00 72 00 69 00     L.A.I.N. .B.r.i.
     1c4:	64 00 67 00 65 00 00 00                             d.g.e...

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d0 e2       	ldi	r29, 0x20	; 32
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61

000001d8 <__do_copy_data>:
     1d8:	11 e0       	ldi	r17, 0x01	; 1
     1da:	a0 e0       	ldi	r26, 0x00	; 0
     1dc:	b1 e0       	ldi	r27, 0x01	; 1
     1de:	ea e2       	ldi	r30, 0x2A	; 42
     1e0:	f2 e2       	ldi	r31, 0x22	; 34
     1e2:	00 e0       	ldi	r16, 0x00	; 0
     1e4:	0b bf       	out	0x3b, r16	; 59
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <__do_copy_data+0x14>
     1e8:	07 90       	elpm	r0, Z+
     1ea:	0d 92       	st	X+, r0
     1ec:	a8 35       	cpi	r26, 0x58	; 88
     1ee:	b1 07       	cpc	r27, r17
     1f0:	d9 f7       	brne	.-10     	; 0x1e8 <__do_copy_data+0x10>

000001f2 <__do_clear_bss>:
     1f2:	13 e0       	ldi	r17, 0x03	; 3
     1f4:	a8 e5       	ldi	r26, 0x58	; 88
     1f6:	b1 e0       	ldi	r27, 0x01	; 1
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <.do_clear_bss_start>

000001fa <.do_clear_bss_loop>:
     1fa:	1d 92       	st	X+, r1

000001fc <.do_clear_bss_start>:
     1fc:	a6 37       	cpi	r26, 0x76	; 118
     1fe:	b1 07       	cpc	r27, r17
     200:	e1 f7       	brne	.-8      	; 0x1fa <.do_clear_bss_loop>
     202:	15 d1       	rcall	.+554    	; 0x42e <main>
     204:	0c 94 13 11 	jmp	0x2226	; 0x2226 <_exit>

00000208 <__bad_interrupt>:
     208:	fb ce       	rjmp	.-522    	; 0x0 <__vectors>

0000020a <EVENT_USB_Device_Connect>:
				PORTB |= LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB | LEDS_ALL_LEDS) & ~LEDMask);
     20a:	2e 98       	cbi	0x05, 6	; 5

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     20c:	08 95       	ret

0000020e <EVENT_USB_Device_Disconnect>:
     20e:	2e 98       	cbi	0x05, 6	; 5

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     210:	08 95       	ret

00000212 <EVENT_CDC_Device_LineEncodingChanged>:
		#define STXDDR     DDRD

	/* Inline Functions: */
		static inline void SoftUART_SetBaud(const uint32_t Baud)
		{
			uint16_t BitTime = ((F_CPU / Baud) - 1);
     212:	fc 01       	movw	r30, r24
     214:	27 85       	ldd	r18, Z+15	; 0x0f
     216:	30 89       	ldd	r19, Z+16	; 0x10
     218:	41 89       	ldd	r20, Z+17	; 0x11
     21a:	52 89       	ldd	r21, Z+18	; 0x12
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	72 e1       	ldi	r23, 0x12	; 18
     220:	8a e7       	ldi	r24, 0x7A	; 122
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__udivmodsi4>
     228:	21 50       	subi	r18, 0x01	; 1
     22a:	30 40       	sbci	r19, 0x00	; 0

			ICR1 = BitTime;
     22c:	30 93 87 00 	sts	0x0087, r19
     230:	20 93 86 00 	sts	0x0086, r18
			ICR3 = BitTime;
     234:	30 93 97 00 	sts	0x0097, r19
     238:	20 93 96 00 	sts	0x0096, r18
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	/* Change the software UART's baud rate to match the new baud rate */
	SoftUART_SetBaud(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
}
     23c:	08 95       	ret

0000023e <CALLBACK_USB_GetDescriptor>:
 *  \return Length of the retrieved descriptor in bytes, or NO_DESCRIPTOR if the descriptor was not found
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     23e:	9c 01       	movw	r18, r24
	/* Return the correct descriptors based on the selected mode */
	if (CurrentFirmwareMode == MODE_USART_BRIDGE)
     240:	80 91 58 01 	lds	r24, 0x0158
     244:	88 23       	and	r24, r24
     246:	11 f4       	brne	.+4      	; 0x24c <CALLBACK_USB_GetDescriptor+0xe>
	  return USART_GetDescriptor(wValue, wIndex, DescriptorAddress);
     248:	c9 01       	movw	r24, r18
     24a:	32 c1       	rjmp	.+612    	; 0x4b0 <USART_GetDescriptor>
	else
	  return AVRISP_GetDescriptor(wValue, wIndex, DescriptorAddress);
     24c:	c9 01       	movw	r24, r18
}
     24e:	fc c0       	rjmp	.+504    	; 0x448 <AVRISP_GetDescriptor>

00000250 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	if (CurrentFirmwareMode == MODE_USART_BRIDGE)
     250:	80 91 58 01 	lds	r24, 0x0158
     254:	88 23       	and	r24, r24
     256:	21 f4       	brne	.+8      	; 0x260 <EVENT_USB_Device_ControlRequest+0x10>
	  CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <CDC_Device_ProcessControlRequest>
     260:	08 95       	ret

00000262 <EVENT_USB_Device_ConfigurationChanged>:
	MCUCR &= ~(1 << JTD);
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     262:	1f 93       	push	r17
	bool ConfigSuccess = true;

	/* Configure the device endpoints according to the selected mode */
	if (CurrentFirmwareMode == MODE_USART_BRIDGE)
     264:	80 91 58 01 	lds	r24, 0x0158
     268:	88 23       	and	r24, r24
     26a:	21 f5       	brne	.+72     	; 0x2b4 <EVENT_USB_Device_ConfigurationChanged+0x52>
	{
		ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	91 e0       	ldi	r25, 0x01	; 1
     270:	0e 94 20 10 	call	0x2040	; 0x2040 <CDC_Device_ConfigureEndpoints>
     274:	18 2f       	mov	r17, r24
     276:	11 70       	andi	r17, 0x01	; 1

		/* Configure the UART flush timer - run at Fcpu/1024 for maximum interval before overflow */
		TCCR0B = ((1 << CS02) | (1 << CS00));
     278:	85 e0       	ldi	r24, 0x05	; 5
     27a:	85 bd       	out	0x25, r24	; 37
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     27c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     27e:	f8 94       	cli
			{
				Buffer->In  = Buffer->Buffer;
     280:	8e e5       	ldi	r24, 0x5E	; 94
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	90 93 5e 02 	sts	0x025E, r25
     288:	80 93 5d 02 	sts	0x025D, r24
				Buffer->Out = Buffer->Buffer;
     28c:	90 93 60 02 	sts	0x0260, r25
     290:	80 93 5f 02 	sts	0x025F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     294:	2f bf       	out	0x3f, r18	; 63
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     296:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     298:	f8 94       	cli
			{
				Buffer->In  = Buffer->Buffer;
     29a:	82 e6       	ldi	r24, 0x62	; 98
     29c:	92 e0       	ldi	r25, 0x02	; 2
     29e:	90 93 62 03 	sts	0x0362, r25
     2a2:	80 93 61 03 	sts	0x0361, r24
				Buffer->Out = Buffer->Buffer;
     2a6:	90 93 64 03 	sts	0x0364, r25
     2aa:	80 93 63 03 	sts	0x0363, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2ae:	2f bf       	out	0x3f, r18	; 63
		/* Initialize ring buffers used to hold serial data between USB and software UART interfaces */
		RingBuffer_InitBuffer(&USBtoUART_Buffer);
		RingBuffer_InitBuffer(&UARTtoUSB_Buffer);

		/* Start the software USART */
		SoftUART_Init();
     2b0:	2d d1       	rcall	.+602    	; 0x50c <SoftUART_Init>
     2b2:	08 c0       	rjmp	.+16     	; 0x2c4 <EVENT_USB_Device_ConfigurationChanged+0x62>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
     2b4:	82 e0       	ldi	r24, 0x02	; 2
     2b6:	60 e8       	ldi	r22, 0x80	; 128
     2b8:	42 e3       	ldi	r20, 0x32	; 50
     2ba:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <Endpoint_ConfigureEndpoint_Prv>
	}
	else
	{
		ConfigSuccess &= Endpoint_ConfigureEndpoint(AVRISP_DATA_OUT_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_OUT,
     2be:	18 2f       	mov	r17, r24
     2c0:	11 70       	andi	r17, 0x01	; 1
		ConfigSuccess &= Endpoint_ConfigureEndpoint(AVRISP_DATA_IN_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_IN,
		                                            AVRISP_DATA_EPSIZE, ENDPOINT_BANK_SINGLE);
		#endif

		/* Configure the V2 protocol packet handler */
		V2Protocol_Init();
     2c2:	ec d2       	rcall	.+1496   	; 0x89c <V2Protocol_Init>
	}

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2c4:	11 23       	and	r17, r17
     2c6:	11 f4       	brne	.+4      	; 0x2cc <EVENT_USB_Device_ConfigurationChanged+0x6a>
     2c8:	90 e4       	ldi	r25, 0x40	; 64
     2ca:	01 c0       	rjmp	.+2      	; 0x2ce <EVENT_USB_Device_ConfigurationChanged+0x6c>
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	85 b1       	in	r24, 0x05	; 5
     2d0:	90 95       	com	r25
     2d2:	80 64       	ori	r24, 0x40	; 64
     2d4:	98 23       	and	r25, r24
     2d6:	95 b9       	out	0x05, r25	; 5
}
     2d8:	1f 91       	pop	r17
     2da:	08 95       	ret

000002dc <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2dc:	84 b7       	in	r24, 0x34	; 52
     2de:	87 7f       	andi	r24, 0xF7	; 247
     2e0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2e2:	88 e1       	ldi	r24, 0x18	; 24
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	80 93 60 00 	sts	0x0060, r24
     2ec:	10 92 60 00 	sts	0x0060, r1
     2f0:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	20 e8       	ldi	r18, 0x80	; 128
     2f8:	0f b6       	in	r0, 0x3f	; 63
     2fa:	f8 94       	cli
     2fc:	20 93 61 00 	sts	0x0061, r18
     300:	80 93 61 00 	sts	0x0061, r24
     304:	0f be       	out	0x3f, r0	; 63

	/* Hardware Initialization */
	SoftUART_Init();
     306:	02 d1       	rcall	.+516    	; 0x50c <SoftUART_Init>

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |= LEDS_ALL_LEDS;
     308:	26 9a       	sbi	0x04, 6	; 4
				PORTB |= LEDS_ALL_LEDS;
     30a:	2e 9a       	sbi	0x05, 6	; 5
	LEDs_Init();
	USB_Init();
     30c:	0e 94 a6 0b 	call	0x174c	; 0x174c <USB_Init>

	/* Disable JTAG debugging */
	MCUCR |= (1 << JTD);
     310:	85 b7       	in	r24, 0x35	; 53
     312:	80 68       	ori	r24, 0x80	; 128
     314:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << JTD);
     316:	85 b7       	in	r24, 0x35	; 53
     318:	80 68       	ori	r24, 0x80	; 128
     31a:	85 bf       	out	0x35, r24	; 53

	/* Enable pull-up on the JTAG TDI pin so we can use it to select the mode */
	PORTF |= (1 << 7);
     31c:	8f 9a       	sbi	0x11, 7	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     31e:	80 e2       	ldi	r24, 0x20	; 32
     320:	9e e4       	ldi	r25, 0x4E	; 78
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	f1 f7       	brne	.-4      	; 0x322 <SetupHardware+0x46>
	_delay_ms(10);

	/* Select the firmware mode based on the JTD pin's value */
	CurrentFirmwareMode = (PINF & (1 << 7)) ? MODE_USART_BRIDGE : MODE_PDI_PROGRAMMER;
     326:	8f b1       	in	r24, 0x0f	; 15
     328:	10 92 58 01 	sts	0x0158, r1
     32c:	87 fd       	sbrc	r24, 7
     32e:	03 c0       	rjmp	.+6      	; 0x336 <SetupHardware+0x5a>
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	80 93 58 01 	sts	0x0158, r24

	/* Re-enable JTAG debugging */
	MCUCR &= ~(1 << JTD);
     336:	85 b7       	in	r24, 0x35	; 53
     338:	8f 77       	andi	r24, 0x7F	; 127
     33a:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << JTD);
     33c:	85 b7       	in	r24, 0x35	; 53
     33e:	8f 77       	andi	r24, 0x7F	; 127
     340:	85 bf       	out	0x35, r24	; 53
}
     342:	08 95       	ret

00000344 <UARTBridge_Task>:
		LEDs_SetAllLEDs(LEDMASK_USB_READY);
	}
}

void UARTBridge_Task(void)
{
     344:	1f 93       	push	r17
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
	/* Must be in the configured state for the USART Bridge code to process data */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     34a:	8e b3       	in	r24, 0x1e	; 30
     34c:	84 30       	cpi	r24, 0x04	; 4
     34e:	09 f0       	breq	.+2      	; 0x352 <UARTBridge_Task+0xe>
     350:	5b c0       	rjmp	.+182    	; 0x408 <UARTBridge_Task+0xc4>
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     352:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     354:	f8 94       	cli
			{
				Count = Buffer->Count;
     356:	90 91 61 02 	lds	r25, 0x0261
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     35a:	8f bf       	out	0x3f, r24	; 63
	  return;

	/* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
	if (!(RingBuffer_IsFull(&USBtoUART_Buffer)))
     35c:	9f 3f       	cpi	r25, 0xFF	; 255
     35e:	21 f1       	breq	.+72     	; 0x3a8 <UARTBridge_Task+0x64>
	{
		int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <CDC_Device_ReceiveByte>

		/* Read bytes from the USB OUT endpoint into the UART transmit buffer */
		if (!(ReceivedByte < 0))
     368:	97 fd       	sbrc	r25, 7
     36a:	1e c0       	rjmp	.+60     	; 0x3a8 <UARTBridge_Task+0x64>
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
     36c:	e0 91 5d 02 	lds	r30, 0x025D
     370:	f0 91 5e 02 	lds	r31, 0x025E
     374:	80 83       	st	Z, r24

			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
     376:	e0 91 5d 02 	lds	r30, 0x025D
     37a:	f0 91 5e 02 	lds	r31, 0x025E
     37e:	cf 01       	movw	r24, r30
     380:	01 96       	adiw	r24, 0x01	; 1
     382:	90 93 5e 02 	sts	0x025E, r25
     386:	80 93 5d 02 	sts	0x025D, r24
     38a:	8d 55       	subi	r24, 0x5D	; 93
     38c:	92 40       	sbci	r25, 0x02	; 2
     38e:	21 f4       	brne	.+8      	; 0x398 <UARTBridge_Task+0x54>
			  Buffer->In = Buffer->Buffer;
     390:	8e e5       	ldi	r24, 0x5E	; 94
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	92 83       	std	Z+2, r25	; 0x02
     396:	81 83       	std	Z+1, r24	; 0x01

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     398:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     39a:	f8 94       	cli
			{
				Buffer->Count++;
     39c:	80 91 61 02 	lds	r24, 0x0261
     3a0:	8f 5f       	subi	r24, 0xFF	; 255
     3a2:	80 93 61 02 	sts	0x0261, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3a6:	9f bf       	out	0x3f, r25	; 63
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     3a8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3aa:	f8 94       	cli
			{
				Count = Buffer->Count;
     3ac:	10 91 65 03 	lds	r17, 0x0365
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3b0:	8f bf       	out	0x3f, r24	; 63
		  RingBuffer_Insert(&USBtoUART_Buffer, ReceivedByte);
	}
	
	/* Check if the UART receive buffer flush timer has expired or buffer is nearly full */
	RingBuff_Count_t BufferCount = RingBuffer_GetCount(&UARTtoUSB_Buffer);
	if ((TIFR0 & (1 << TOV0)) || (BufferCount > 200))
     3b2:	a8 99       	sbic	0x15, 0	; 21
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <UARTBridge_Task+0x76>
     3b6:	19 3c       	cpi	r17, 0xC9	; 201
     3b8:	18 f1       	brcs	.+70     	; 0x400 <UARTBridge_Task+0xbc>
	{
		/* Clear flush timer expiry flag */
		TIFR0 |= (1 << TOV0);
     3ba:	a8 9a       	sbi	0x15, 0	; 21
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;

			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->Out = Buffer->Buffer;
     3bc:	c2 e6       	ldi	r28, 0x62	; 98
     3be:	d2 e0       	ldi	r29, 0x02	; 2
     3c0:	1d c0       	rjmp	.+58     	; 0x3fc <UARTBridge_Task+0xb8>
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
     3c2:	e0 91 63 03 	lds	r30, 0x0363
     3c6:	f0 91 64 03 	lds	r31, 0x0364
     3ca:	61 91       	ld	r22, Z+

			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
     3cc:	f0 93 64 03 	sts	0x0364, r31
     3d0:	e0 93 63 03 	sts	0x0363, r30
     3d4:	e1 56       	subi	r30, 0x61	; 97
     3d6:	f3 40       	sbci	r31, 0x03	; 3
     3d8:	21 f4       	brne	.+8      	; 0x3e2 <UARTBridge_Task+0x9e>
			  Buffer->Out = Buffer->Buffer;
     3da:	d0 93 64 03 	sts	0x0364, r29
     3de:	c0 93 63 03 	sts	0x0363, r28

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     3e2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3e4:	f8 94       	cli
			{
				Buffer->Count--;
     3e6:	80 91 65 03 	lds	r24, 0x0365
     3ea:	81 50       	subi	r24, 0x01	; 1
     3ec:	80 93 65 03 	sts	0x0365, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3f0:	9f bf       	out	0x3f, r25	; 63

		/* Read bytes from the UART receive buffer into the USB IN endpoint */
		while (BufferCount--)
		  CDC_Device_SendByte(&VirtualSerial_CDC_Interface, RingBuffer_Remove(&UARTtoUSB_Buffer));
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <CDC_Device_SendByte>
     3fa:	11 50       	subi	r17, 0x01	; 1
	{
		/* Clear flush timer expiry flag */
		TIFR0 |= (1 << TOV0);

		/* Read bytes from the UART receive buffer into the USB IN endpoint */
		while (BufferCount--)
     3fc:	11 23       	and	r17, r17
     3fe:	09 f7       	brne	.-62     	; 0x3c2 <UARTBridge_Task+0x7e>
		  CDC_Device_SendByte(&VirtualSerial_CDC_Interface, RingBuffer_Remove(&UARTtoUSB_Buffer));
	}

	CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <CDC_Device_USBTask>
}
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	1f 91       	pop	r17
     40e:	08 95       	ret

00000410 <AVRISP_Task>:
}

void AVRISP_Task(void)
{
	/* Must be in the configured state for the AVRISP code to process data */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     410:	8e b3       	in	r24, 0x1e	; 30
     412:	84 30       	cpi	r24, 0x04	; 4
     414:	59 f4       	brne	.+22     	; 0x42c <AVRISP_Task+0x1c>
	  return;

	V2Params_UpdateParamValues();
     416:	79 d2       	rcall	.+1266   	; 0x90a <V2Params_UpdateParamValues>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     418:	82 e0       	ldi	r24, 0x02	; 2
     41a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     41e:	80 91 e8 00 	lds	r24, 0x00E8

	Endpoint_SelectEndpoint(AVRISP_DATA_OUT_EPNUM);

	/* Check to see if a V2 Protocol command has been received */
	if (Endpoint_IsOUTReceived())
     422:	82 ff       	sbrs	r24, 2
     424:	03 c0       	rjmp	.+6      	; 0x42c <AVRISP_Task+0x1c>
				PORTB |= LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB | LEDS_ALL_LEDS) & ~LEDMask);
     426:	2e 98       	cbi	0x05, 6	; 5
	{
		LEDs_SetAllLEDs(LEDMASK_BUSY);

		/* Pass off processing of the V2 Protocol command to the V2 Protocol handler */
		V2Protocol_ProcessCommand();
     428:	61 d1       	rcall	.+706    	; 0x6ec <V2Protocol_ProcessCommand>
     42a:	2e 9a       	sbi	0x05, 6	; 5
     42c:	08 95       	ret

0000042e <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     42e:	56 df       	rcall	.-340    	; 0x2dc <SetupHardware>
     430:	2e 98       	cbi	0x05, 6	; 5

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     432:	78 94       	sei

	for (;;)
	{
		if (CurrentFirmwareMode == MODE_USART_BRIDGE)
     434:	80 91 58 01 	lds	r24, 0x0158
     438:	88 23       	and	r24, r24
     43a:	11 f4       	brne	.+4      	; 0x440 <main+0x12>
		  UARTBridge_Task();
     43c:	83 df       	rcall	.-250    	; 0x344 <UARTBridge_Task>
     43e:	01 c0       	rjmp	.+2      	; 0x442 <main+0x14>
		else
		  AVRISP_Task();
     440:	e7 df       	rcall	.-50     	; 0x410 <AVRISP_Task>

		USB_USBTask();
     442:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <USB_USBTask>
     446:	f6 cf       	rjmp	.-20     	; 0x434 <main+0x6>

00000448 <AVRISP_GetDescriptor>:
 *  USB host.
 */
uint16_t AVRISP_GetDescriptor(const uint16_t wValue,
                              const uint8_t wIndex,
                              const void** const DescriptorAddress)
{
     448:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     44a:	92 30       	cpi	r25, 0x02	; 2
     44c:	49 f0       	breq	.+18     	; 0x460 <AVRISP_GetDescriptor+0x18>
     44e:	93 30       	cpi	r25, 0x03	; 3
     450:	61 f0       	breq	.+24     	; 0x46a <AVRISP_GetDescriptor+0x22>
     452:	91 30       	cpi	r25, 0x01	; 1
     454:	29 f5       	brne	.+74     	; 0x4a0 <AVRISP_GetDescriptor+0x58>
     456:	e8 e9       	ldi	r30, 0x98	; 152
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	22 e1       	ldi	r18, 0x12	; 18
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	24 c0       	rjmp	.+72     	; 0x4a8 <AVRISP_GetDescriptor+0x60>
     460:	ea ea       	ldi	r30, 0xAA	; 170
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	20 e2       	ldi	r18, 0x20	; 32
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	1f c0       	rjmp	.+62     	; 0x4a8 <AVRISP_GetDescriptor+0x60>
		case DTYPE_Configuration:
			Address = &AVRISP_ConfigurationDescriptor;
			Size    = sizeof(AVRISP_USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     46a:	81 30       	cpi	r24, 0x01	; 1
     46c:	59 f0       	breq	.+22     	; 0x484 <AVRISP_GetDescriptor+0x3c>
     46e:	81 30       	cpi	r24, 0x01	; 1
     470:	28 f0       	brcs	.+10     	; 0x47c <AVRISP_GetDescriptor+0x34>
     472:	82 30       	cpi	r24, 0x02	; 2
     474:	59 f0       	breq	.+22     	; 0x48c <AVRISP_GetDescriptor+0x44>
     476:	83 30       	cpi	r24, 0x03	; 3
     478:	99 f4       	brne	.+38     	; 0x4a0 <AVRISP_GetDescriptor+0x58>
     47a:	0c c0       	rjmp	.+24     	; 0x494 <AVRISP_GetDescriptor+0x4c>
			{
				case 0x00:
					Address = &AVRISP_LanguageString;
					Size    = pgm_read_byte(&AVRISP_LanguageString.Header.Size);
     47c:	ea ec       	ldi	r30, 0xCA	; 202
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	84 91       	lpm	r24, Z+
     482:	0b c0       	rjmp	.+22     	; 0x49a <AVRISP_GetDescriptor+0x52>
					break;
				case 0x01:
					Address = &AVRISP_ManufacturerString;
					Size    = pgm_read_byte(&AVRISP_ManufacturerString.Header.Size);
     484:	ee ec       	ldi	r30, 0xCE	; 206
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	84 91       	lpm	r24, Z+
     48a:	07 c0       	rjmp	.+14     	; 0x49a <AVRISP_GetDescriptor+0x52>
					break;
				case 0x02:
					Address = &AVRISP_ProductString;
					Size    = pgm_read_byte(&AVRISP_ProductString.Header.Size);
     48c:	e8 ee       	ldi	r30, 0xE8	; 232
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	84 91       	lpm	r24, Z+
     492:	03 c0       	rjmp	.+6      	; 0x49a <AVRISP_GetDescriptor+0x52>
					break;
				case 0x03:
					Address = &AVRISP_SerialString;
					Size    = pgm_read_byte(&AVRISP_SerialString.Header.Size);
     494:	e8 e1       	ldi	r30, 0x18	; 24
     496:	f1 e0       	ldi	r31, 0x01	; 1
     498:	84 91       	lpm	r24, Z+
     49a:	28 2f       	mov	r18, r24
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	04 c0       	rjmp	.+8      	; 0x4a8 <AVRISP_GetDescriptor+0x60>
     4a0:	e0 e0       	ldi	r30, 0x00	; 0
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     4a8:	ed 93       	st	X+, r30
     4aa:	fc 93       	st	X, r31
	return Size;
}
     4ac:	c9 01       	movw	r24, r18
     4ae:	08 95       	ret

000004b0 <USART_GetDescriptor>:
 *  callback function in the main source file, to retrieve the device's descriptors when in USART bridge mode.
 */
uint16_t USART_GetDescriptor(const uint16_t wValue,
                             const uint8_t wIndex,
                             const void** const DescriptorAddress)
{
     4b0:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     4b2:	92 30       	cpi	r25, 0x02	; 2
     4b4:	49 f0       	breq	.+18     	; 0x4c8 <USART_GetDescriptor+0x18>
     4b6:	93 30       	cpi	r25, 0x03	; 3
     4b8:	61 f0       	breq	.+24     	; 0x4d2 <USART_GetDescriptor+0x22>
     4ba:	91 30       	cpi	r25, 0x01	; 1
     4bc:	f9 f4       	brne	.+62     	; 0x4fc <USART_GetDescriptor+0x4c>
     4be:	e6 e3       	ldi	r30, 0x36	; 54
     4c0:	f1 e0       	ldi	r31, 0x01	; 1
     4c2:	22 e1       	ldi	r18, 0x12	; 18
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	1e c0       	rjmp	.+60     	; 0x504 <USART_GetDescriptor+0x54>
     4c8:	e8 e4       	ldi	r30, 0x48	; 72
     4ca:	f1 e0       	ldi	r31, 0x01	; 1
     4cc:	2e e3       	ldi	r18, 0x3E	; 62
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	19 c0       	rjmp	.+50     	; 0x504 <USART_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &USART_ConfigurationDescriptor;
			Size    = sizeof(USART_USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     4d2:	81 30       	cpi	r24, 0x01	; 1
     4d4:	49 f0       	breq	.+18     	; 0x4e8 <USART_GetDescriptor+0x38>
     4d6:	81 30       	cpi	r24, 0x01	; 1
     4d8:	18 f0       	brcs	.+6      	; 0x4e0 <USART_GetDescriptor+0x30>
     4da:	82 30       	cpi	r24, 0x02	; 2
     4dc:	79 f4       	brne	.+30     	; 0x4fc <USART_GetDescriptor+0x4c>
     4de:	08 c0       	rjmp	.+16     	; 0x4f0 <USART_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &USART_LanguageString;
					Size    = pgm_read_byte(&USART_LanguageString.Header.Size);
     4e0:	e6 e8       	ldi	r30, 0x86	; 134
     4e2:	f1 e0       	ldi	r31, 0x01	; 1
     4e4:	84 91       	lpm	r24, Z+
     4e6:	07 c0       	rjmp	.+14     	; 0x4f6 <USART_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &USART_ManufacturerString;
					Size    = pgm_read_byte(&USART_ManufacturerString.Header.Size);
     4e8:	ea e8       	ldi	r30, 0x8A	; 138
     4ea:	f1 e0       	ldi	r31, 0x01	; 1
     4ec:	84 91       	lpm	r24, Z+
     4ee:	03 c0       	rjmp	.+6      	; 0x4f6 <USART_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &USART_ProductString;
					Size    = pgm_read_byte(&USART_ProductString.Header.Size);
     4f0:	e4 ea       	ldi	r30, 0xA4	; 164
     4f2:	f1 e0       	ldi	r31, 0x01	; 1
     4f4:	84 91       	lpm	r24, Z+
     4f6:	28 2f       	mov	r18, r24
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	04 c0       	rjmp	.+8      	; 0x504 <USART_GetDescriptor+0x54>
     4fc:	e0 e0       	ldi	r30, 0x00	; 0
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     504:	ed 93       	st	X+, r30
     506:	fc 93       	st	X, r31
	return Size;
}
     508:	c9 01       	movw	r24, r18
     50a:	08 95       	ret

0000050c <SoftUART_Init>:

/** Initialises the software UART, ready for data transmission and reception into the global ring buffers. */
void SoftUART_Init(void)
{
	/* Set TX pin to output high, enable RX pull-up */
	STXPORT |= (1 << STX);
     50c:	59 9a       	sbi	0x0b, 1	; 11
	STXDDR  |= (1 << STX);
     50e:	51 9a       	sbi	0x0a, 1	; 10
	SRXPORT |= (1 << SRX);
     510:	58 9a       	sbi	0x0b, 0	; 11

	/* Enable INT0 for the detection of incoming start bits that signal the start of a byte */
	EICRA  = (1 << ISC01);
     512:	82 e0       	ldi	r24, 0x02	; 2
     514:	80 93 69 00 	sts	0x0069, r24
	EIMSK  = (1 << INT0);
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	8d bb       	out	0x1d, r24	; 29
	/* Inline Functions: */
		static inline void SoftUART_SetBaud(const uint32_t Baud)
		{
			uint16_t BitTime = ((F_CPU / Baud) - 1);

			ICR1 = BitTime;
     51c:	80 e4       	ldi	r24, 0x40	; 64
     51e:	93 e0       	ldi	r25, 0x03	; 3
     520:	90 93 87 00 	sts	0x0087, r25
     524:	80 93 86 00 	sts	0x0086, r24
			ICR3 = BitTime;
     528:	90 93 97 00 	sts	0x0097, r25
     52c:	80 93 96 00 	sts	0x0096, r24

	/* Set the transmission and reception timer compare values for the default baud rate */
	SoftUART_SetBaud(9600);

	/* Setup reception timer compare ISR */
	TIMSK1 = (1 << ICIE1);
     530:	80 e2       	ldi	r24, 0x20	; 32
     532:	80 93 6f 00 	sts	0x006F, r24

	/* Setup transmission timer compare ISR and start the timer */
	TIMSK3 = (1 << ICIE3);
     536:	80 93 71 00 	sts	0x0071, r24
	TCCR3B = ((1 << CS30) | (1 << WGM33) | (1 << WGM32));
     53a:	89 e1       	ldi	r24, 0x19	; 25
     53c:	80 93 91 00 	sts	0x0091, r24
}
     540:	08 95       	ret

00000542 <__vector_1>:

/** ISR to detect the start of a bit being sent to the software UART. */
ISR(INT0_vect, ISR_BLOCK)
{
     542:	1f 92       	push	r1
     544:	0f 92       	push	r0
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	0f 92       	push	r0
     54a:	11 24       	eor	r1, r1
     54c:	8f 93       	push	r24
	/* Reset the number of reception bits remaining counter */
	RX_BitsRemaining = 8;
     54e:	88 e0       	ldi	r24, 0x08	; 8
     550:	80 93 5b 01 	sts	0x015B, r24

	/* Reset the bit reception timer */
	TCNT1 = 0;
     554:	10 92 85 00 	sts	0x0085, r1
     558:	10 92 84 00 	sts	0x0084, r1

	/* Check to see that the pin is still low (prevents glitches from starting a frame reception) */
	if (!(SRXPIN & (1 << SRX)))
     55c:	48 99       	sbic	0x09, 0	; 9
     55e:	04 c0       	rjmp	.+8      	; 0x568 <__vector_1+0x26>
	{
		/* Disable start bit detection ISR while the next byte is received */
		EIMSK = 0;
     560:	1d ba       	out	0x1d, r1	; 29

		/* Start the reception timer */
		TCCR1B = ((1 << CS10) | (1 << WGM13) | (1 << WGM12));
     562:	89 e1       	ldi	r24, 0x19	; 25
     564:	80 93 81 00 	sts	0x0081, r24
	}
}
     568:	8f 91       	pop	r24
     56a:	0f 90       	pop	r0
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	0f 90       	pop	r0
     570:	1f 90       	pop	r1
     572:	18 95       	reti

00000574 <__vector_16>:

/** ISR to manage the reception of bits to the software UART. */
ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	0b b6       	in	r0, 0x3b	; 59
     57e:	0f 92       	push	r0
     580:	11 24       	eor	r1, r1
     582:	2f 93       	push	r18
     584:	8f 93       	push	r24
     586:	9f 93       	push	r25
     588:	ef 93       	push	r30
     58a:	ff 93       	push	r31
	/* Cache the current RX pin value for later checking */
	uint8_t SRX_Cached = (SRXPIN & (1 << SRX));
     58c:	29 b1       	in	r18, 0x09	; 9
     58e:	21 70       	andi	r18, 0x01	; 1

	/* Check if reception has finished */
	if (RX_BitsRemaining)
     590:	90 91 5b 01 	lds	r25, 0x015B
     594:	99 23       	and	r25, r25
     596:	71 f0       	breq	.+28     	; 0x5b4 <__vector_16+0x40>
	{
		/* Shift the current received bit mask to the next bit position */
		RX_Data >>= 1;
     598:	80 91 5c 01 	lds	r24, 0x015C
     59c:	86 95       	lsr	r24
     59e:	80 93 5c 01 	sts	0x015C, r24
		RX_BitsRemaining--;
     5a2:	91 50       	subi	r25, 0x01	; 1
     5a4:	90 93 5b 01 	sts	0x015B, r25

		/* Store next bit into the received data variable */
		if (SRX_Cached)
     5a8:	22 23       	and	r18, r18
     5aa:	59 f1       	breq	.+86     	; 0x602 <__vector_16+0x8e>
		  RX_Data |= (1 << 7);
     5ac:	80 68       	ori	r24, 0x80	; 128
     5ae:	80 93 5c 01 	sts	0x015C, r24
     5b2:	27 c0       	rjmp	.+78     	; 0x602 <__vector_16+0x8e>
	}
	else
	{
		/* Disable the reception timer as all data has now been received, re-enable start bit detection ISR */
		TCCR1B = 0;
     5b4:	10 92 81 00 	sts	0x0081, r1
		EIFR   = (1 << INTF0);
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	8c bb       	out	0x1c, r24	; 28
		EIMSK  = (1 << INT0);
     5bc:	8d bb       	out	0x1d, r24	; 29

		/* Reception complete, store the received byte if stop bit valid */
		if (SRX_Cached)
     5be:	22 23       	and	r18, r18
     5c0:	01 f1       	breq	.+64     	; 0x602 <__vector_16+0x8e>
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
     5c2:	e0 91 61 03 	lds	r30, 0x0361
     5c6:	f0 91 62 03 	lds	r31, 0x0362
     5ca:	80 91 5c 01 	lds	r24, 0x015C
     5ce:	80 83       	st	Z, r24

			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
     5d0:	e0 91 61 03 	lds	r30, 0x0361
     5d4:	f0 91 62 03 	lds	r31, 0x0362
     5d8:	cf 01       	movw	r24, r30
     5da:	01 96       	adiw	r24, 0x01	; 1
     5dc:	90 93 62 03 	sts	0x0362, r25
     5e0:	80 93 61 03 	sts	0x0361, r24
     5e4:	81 56       	subi	r24, 0x61	; 97
     5e6:	93 40       	sbci	r25, 0x03	; 3
     5e8:	21 f4       	brne	.+8      	; 0x5f2 <__vector_16+0x7e>
			  Buffer->In = Buffer->Buffer;
     5ea:	82 e6       	ldi	r24, 0x62	; 98
     5ec:	92 e0       	ldi	r25, 0x02	; 2
     5ee:	92 83       	std	Z+2, r25	; 0x02
     5f0:	81 83       	std	Z+1, r24	; 0x01

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     5f2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5f4:	f8 94       	cli
			{
				Buffer->Count++;
     5f6:	80 91 65 03 	lds	r24, 0x0365
     5fa:	8f 5f       	subi	r24, 0xFF	; 255
     5fc:	80 93 65 03 	sts	0x0365, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     600:	9f bf       	out	0x3f, r25	; 63
		  RingBuffer_Insert(&UARTtoUSB_Buffer, RX_Data);
	}
}
     602:	ff 91       	pop	r31
     604:	ef 91       	pop	r30
     606:	9f 91       	pop	r25
     608:	8f 91       	pop	r24
     60a:	2f 91       	pop	r18
     60c:	0f 90       	pop	r0
     60e:	0b be       	out	0x3b, r0	; 59
     610:	0f 90       	pop	r0
     612:	0f be       	out	0x3f, r0	; 63
     614:	0f 90       	pop	r0
     616:	1f 90       	pop	r1
     618:	18 95       	reti

0000061a <__vector_31>:

/** ISR to manage the transmission of bits via the software UART. */
ISR(TIMER3_CAPT_vect, ISR_BLOCK)
{
     61a:	1f 92       	push	r1
     61c:	0f 92       	push	r0
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	0f 92       	push	r0
     622:	0b b6       	in	r0, 0x3b	; 59
     624:	0f 92       	push	r0
     626:	11 24       	eor	r1, r1
     628:	2f 93       	push	r18
     62a:	8f 93       	push	r24
     62c:	9f 93       	push	r25
     62e:	ef 93       	push	r30
     630:	ff 93       	push	r31
	/* Check if transmission has finished */
	if (TX_BitsRemaining)
     632:	90 91 59 01 	lds	r25, 0x0159
     636:	99 23       	and	r25, r25
     638:	71 f0       	breq	.+28     	; 0x656 <__vector_31+0x3c>
	{
		/* Set the TX line to the value of the next bit in the byte to send */
		if (TX_Data & (1 << 0))
     63a:	80 91 5a 01 	lds	r24, 0x015A
     63e:	80 ff       	sbrs	r24, 0
     640:	02 c0       	rjmp	.+4      	; 0x646 <__vector_31+0x2c>
		  STXPORT &= ~(1 << STX);
     642:	59 98       	cbi	0x0b, 1	; 11
     644:	01 c0       	rjmp	.+2      	; 0x648 <__vector_31+0x2e>
		else
		  STXPORT |=  (1 << STX);
     646:	59 9a       	sbi	0x0b, 1	; 11

		/* Shift the transmission byte to move the next bit into position and decrement the bits remaining counter */
		TX_Data >>= 1;
     648:	86 95       	lsr	r24
     64a:	80 93 5a 01 	sts	0x015A, r24
		TX_BitsRemaining--;
     64e:	91 50       	subi	r25, 0x01	; 1
     650:	90 93 59 01 	sts	0x0159, r25
     654:	2c c0       	rjmp	.+88     	; 0x6ae <__vector_31+0x94>
	}
	else if (!(RX_BitsRemaining) && !(RingBuffer_IsEmpty(&USBtoUART_Buffer)))
     656:	80 91 5b 01 	lds	r24, 0x015B
     65a:	88 23       	and	r24, r24
     65c:	41 f5       	brne	.+80     	; 0x6ae <__vector_31+0x94>
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     65e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     660:	f8 94       	cli
			{
				Count = Buffer->Count;
     662:	90 91 61 02 	lds	r25, 0x0261
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     666:	8f bf       	out	0x3f, r24	; 63
     668:	99 23       	and	r25, r25
     66a:	09 f1       	breq	.+66     	; 0x6ae <__vector_31+0x94>
	{
		/* Start bit - TX line low */
		STXPORT &= ~(1 << STX);
     66c:	59 98       	cbi	0x0b, 1	; 11
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
     66e:	e0 91 5f 02 	lds	r30, 0x025F
     672:	f0 91 60 02 	lds	r31, 0x0260
     676:	21 91       	ld	r18, Z+

			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
     678:	f0 93 60 02 	sts	0x0260, r31
     67c:	e0 93 5f 02 	sts	0x025F, r30
     680:	ed 55       	subi	r30, 0x5D	; 93
     682:	f2 40       	sbci	r31, 0x02	; 2
     684:	31 f4       	brne	.+12     	; 0x692 <__vector_31+0x78>
			  Buffer->Out = Buffer->Buffer;
     686:	8e e5       	ldi	r24, 0x5E	; 94
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	90 93 60 02 	sts	0x0260, r25
     68e:	80 93 5f 02 	sts	0x025F, r24

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     692:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     694:	f8 94       	cli
			{
				Buffer->Count--;
     696:	90 91 61 02 	lds	r25, 0x0261
     69a:	91 50       	subi	r25, 0x01	; 1
     69c:	90 93 61 02 	sts	0x0261, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     6a0:	8f bf       	out	0x3f, r24	; 63

		/* Transmission complete, get the next byte to send (if available) */
		TX_Data          = ~RingBuffer_Remove(&USBtoUART_Buffer);
     6a2:	20 95       	com	r18
     6a4:	20 93 5a 01 	sts	0x015A, r18
		TX_BitsRemaining = 9;
     6a8:	89 e0       	ldi	r24, 0x09	; 9
     6aa:	80 93 59 01 	sts	0x0159, r24
	}
}
     6ae:	ff 91       	pop	r31
     6b0:	ef 91       	pop	r30
     6b2:	9f 91       	pop	r25
     6b4:	8f 91       	pop	r24
     6b6:	2f 91       	pop	r18
     6b8:	0f 90       	pop	r0
     6ba:	0b be       	out	0x3b, r0	; 59
     6bc:	0f 90       	pop	r0
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	0f 90       	pop	r0
     6c2:	1f 90       	pop	r1
     6c4:	18 95       	reti

000006c6 <__vector_21>:
bool MustLoadExtendedAddress;


/** ISR to manage timeouts whilst processing a V2Protocol command */
ISR(TIMER0_COMPA_vect, ISR_NOBLOCK)
{
     6c6:	78 94       	sei
     6c8:	1f 92       	push	r1
     6ca:	0f 92       	push	r0
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	0f 92       	push	r0
     6d0:	11 24       	eor	r1, r1
     6d2:	8f 93       	push	r24
	if (TimeoutTicksRemaining)
     6d4:	8a b5       	in	r24, 0x2a	; 42
     6d6:	88 23       	and	r24, r24
     6d8:	19 f0       	breq	.+6      	; 0x6e0 <__vector_21+0x1a>
	  TimeoutTicksRemaining--;
     6da:	8a b5       	in	r24, 0x2a	; 42
     6dc:	81 50       	subi	r24, 0x01	; 1
     6de:	8a bd       	out	0x2a, r24	; 42
}
     6e0:	8f 91       	pop	r24
     6e2:	0f 90       	pop	r0
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	0f 90       	pop	r0
     6e8:	1f 90       	pop	r1
     6ea:	18 95       	reti

000006ec <V2Protocol_ProcessCommand>:
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
void V2Protocol_ProcessCommand(void)
{
     6ec:	ff 92       	push	r15
     6ee:	0f 93       	push	r16
     6f0:	1f 93       	push	r17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     6f2:	10 91 f1 00 	lds	r17, 0x00F1
	uint8_t V2Command = Endpoint_Read_Byte();

	/* Start the timeout management timer */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
     6f6:	84 e6       	ldi	r24, 0x64	; 100
     6f8:	8a bd       	out	0x2a, r24	; 42
	TCCR0B = ((1 << CS02) | (1 << CS00));
     6fa:	85 e0       	ldi	r24, 0x05	; 5
     6fc:	85 bd       	out	0x25, r24	; 37

	switch (V2Command)
     6fe:	16 30       	cpi	r17, 0x06	; 6
     700:	09 f4       	brne	.+2      	; 0x704 <V2Protocol_ProcessCommand+0x18>
     702:	5e c0       	rjmp	.+188    	; 0x7c0 <V2Protocol_ProcessCommand+0xd4>
     704:	17 30       	cpi	r17, 0x07	; 7
     706:	48 f4       	brcc	.+18     	; 0x71a <V2Protocol_ProcessCommand+0x2e>
     708:	11 30       	cpi	r17, 0x01	; 1
     70a:	89 f0       	breq	.+34     	; 0x72e <V2Protocol_ProcessCommand+0x42>
     70c:	11 30       	cpi	r17, 0x01	; 1
     70e:	08 f4       	brcc	.+2      	; 0x712 <V2Protocol_ProcessCommand+0x26>
     710:	99 c0       	rjmp	.+306    	; 0x844 <V2Protocol_ProcessCommand+0x158>
     712:	14 30       	cpi	r17, 0x04	; 4
     714:	08 f0       	brcs	.+2      	; 0x718 <V2Protocol_ProcessCommand+0x2c>
     716:	96 c0       	rjmp	.+300    	; 0x844 <V2Protocol_ProcessCommand+0x158>
     718:	27 c0       	rjmp	.+78     	; 0x768 <V2Protocol_ProcessCommand+0x7c>
     71a:	10 35       	cpi	r17, 0x50	; 80
     71c:	09 f4       	brne	.+2      	; 0x720 <V2Protocol_ProcessCommand+0x34>
     71e:	8a c0       	rjmp	.+276    	; 0x834 <V2Protocol_ProcessCommand+0x148>
     720:	11 35       	cpi	r17, 0x51	; 81
     722:	09 f4       	brne	.+2      	; 0x726 <V2Protocol_ProcessCommand+0x3a>
     724:	85 c0       	rjmp	.+266    	; 0x830 <V2Protocol_ProcessCommand+0x144>
     726:	1a 30       	cpi	r17, 0x0A	; 10
     728:	09 f0       	breq	.+2      	; 0x72c <V2Protocol_ProcessCommand+0x40>
     72a:	8c c0       	rjmp	.+280    	; 0x844 <V2Protocol_ProcessCommand+0x158>
     72c:	6f c0       	rjmp	.+222    	; 0x80c <V2Protocol_ProcessCommand+0x120>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     72e:	80 91 e8 00 	lds	r24, 0x00E8
     732:	8b 77       	andi	r24, 0x7B	; 123
     734:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     73e:	80 91 ec 00 	lds	r24, 0x00EC
     742:	81 60       	ori	r24, 0x01	; 1
     744:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     748:	10 93 f1 00 	sts	0x00F1, r17
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_Byte(CMD_SIGN_ON);
	Endpoint_Write_Byte(STATUS_CMD_OK);
	Endpoint_Write_Byte(sizeof(PROGRAMMER_ID) - 1);
	Endpoint_Write_Stream_LE(PROGRAMMER_ID, (sizeof(PROGRAMMER_ID) - 1), NO_STREAM_CALLBACK);
     74c:	10 92 f1 00 	sts	0x00F1, r1
     750:	8a e0       	ldi	r24, 0x0A	; 10
     752:	80 93 f1 00 	sts	0x00F1, r24
     756:	86 e1       	ldi	r24, 0x16	; 22
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	6a e0       	ldi	r22, 0x0A	; 10
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	40 e0       	ldi	r20, 0x00	; 0
     760:	50 e0       	ldi	r21, 0x00	; 0
     762:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <Endpoint_Write_Stream_LE>
     766:	87 c0       	rjmp	.+270    	; 0x876 <V2Protocol_ProcessCommand+0x18a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     768:	00 91 f1 00 	lds	r16, 0x00F1
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = Endpoint_Read_Byte();
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER)
     76c:	12 30       	cpi	r17, 0x02	; 2
     76e:	11 f0       	breq	.+4      	; 0x774 <V2Protocol_ProcessCommand+0x88>
     770:	ff 24       	eor	r15, r15
     772:	02 c0       	rjmp	.+4      	; 0x778 <V2Protocol_ProcessCommand+0x8c>
     774:	f0 90 f1 00 	lds	r15, 0x00F1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     778:	80 91 e8 00 	lds	r24, 0x00E8
     77c:	8b 77       	andi	r24, 0x7B	; 123
     77e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     788:	80 91 ec 00 	lds	r24, 0x00EC
     78c:	81 60       	ori	r24, 0x01	; 1
     78e:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     792:	10 93 f1 00 	sts	0x00F1, r17
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_Byte(V2Command);

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
     796:	80 2f       	mov	r24, r16
     798:	b0 d0       	rcall	.+352    	; 0x8fa <V2Params_GetParameterPrivileges>

	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
     79a:	12 30       	cpi	r17, 0x02	; 2
     79c:	41 f4       	brne	.+16     	; 0x7ae <V2Protocol_ProcessCommand+0xc2>
     79e:	81 ff       	sbrs	r24, 1
     7a0:	0d c0       	rjmp	.+26     	; 0x7bc <V2Protocol_ProcessCommand+0xd0>
     7a2:	10 92 f1 00 	sts	0x00F1, r1
	{
		Endpoint_Write_Byte(STATUS_CMD_OK);
		V2Params_SetParameterValue(ParamID, ParamValue);
     7a6:	80 2f       	mov	r24, r16
     7a8:	6f 2d       	mov	r22, r15
     7aa:	ca d0       	rcall	.+404    	; 0x940 <V2Params_SetParameterValue>
     7ac:	64 c0       	rjmp	.+200    	; 0x876 <V2Protocol_ProcessCommand+0x18a>
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
     7ae:	80 ff       	sbrs	r24, 0
     7b0:	05 c0       	rjmp	.+10     	; 0x7bc <V2Protocol_ProcessCommand+0xd0>
     7b2:	10 92 f1 00 	sts	0x00F1, r1
	{
		Endpoint_Write_Byte(STATUS_CMD_OK);
		Endpoint_Write_Byte(V2Params_GetParameterValue(ParamID));
     7b6:	80 2f       	mov	r24, r16
     7b8:	98 d0       	rcall	.+304    	; 0x8ea <V2Params_GetParameterValue>
     7ba:	5b c0       	rjmp	.+182    	; 0x872 <V2Protocol_ProcessCommand+0x186>
     7bc:	80 ec       	ldi	r24, 0xC0	; 192
     7be:	59 c0       	rjmp	.+178    	; 0x872 <V2Protocol_ProcessCommand+0x186>
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	Endpoint_Read_Stream_BE(&CurrentAddress, sizeof(CurrentAddress), NO_STREAM_CALLBACK);
     7c0:	87 e6       	ldi	r24, 0x67	; 103
     7c2:	93 e0       	ldi	r25, 0x03	; 3
     7c4:	64 e0       	ldi	r22, 0x04	; 4
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	40 e0       	ldi	r20, 0x00	; 0
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <Endpoint_Read_Stream_BE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7d0:	80 91 e8 00 	lds	r24, 0x00E8
     7d4:	8b 77       	andi	r24, 0x7B	; 123
     7d6:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     7da:	82 e0       	ldi	r24, 0x02	; 2
     7dc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     7e0:	80 91 ec 00 	lds	r24, 0x00EC
     7e4:	81 60       	ori	r24, 0x01	; 1
     7e6:	80 93 ec 00 	sts	0x00EC, r24

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (CurrentAddress & (1UL << 31))
     7ea:	80 91 67 03 	lds	r24, 0x0367
     7ee:	90 91 68 03 	lds	r25, 0x0368
     7f2:	a0 91 69 03 	lds	r26, 0x0369
     7f6:	b0 91 6a 03 	lds	r27, 0x036A
     7fa:	b7 ff       	sbrs	r27, 7
     7fc:	03 c0       	rjmp	.+6      	; 0x804 <V2Protocol_ProcessCommand+0x118>
	  MustLoadExtendedAddress = true;
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	80 93 66 03 	sts	0x0366, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     804:	86 e0       	ldi	r24, 0x06	; 6
     806:	80 93 f1 00 	sts	0x00F1, r24
     80a:	0f c0       	rjmp	.+30     	; 0x82a <V2Protocol_ProcessCommand+0x13e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     80c:	80 91 e8 00 	lds	r24, 0x00E8
     810:	8b 77       	andi	r24, 0x7B	; 123
     812:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     816:	82 e0       	ldi	r24, 0x02	; 2
     818:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     81c:	80 91 ec 00 	lds	r24, 0x00EC
     820:	81 60       	ori	r24, 0x01	; 1
     822:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     826:	10 93 f1 00 	sts	0x00F1, r17
			ISPProtocol_SPIMulti();
			break;
#endif
#if defined(ENABLE_XPROG_PROTOCOL)
		case CMD_XPROG_SETMODE:
			XPROGProtocol_SetMode();
     82a:	10 92 f1 00 	sts	0x00F1, r1
     82e:	23 c0       	rjmp	.+70     	; 0x876 <V2Protocol_ProcessCommand+0x18a>
     830:	a8 d0       	rcall	.+336    	; 0x982 <XPROGProtocol_SetMode>
     832:	26 c0       	rjmp	.+76     	; 0x880 <V2Protocol_ProcessCommand+0x194>
			break;
		case CMD_XPROG:
			XPROGProtocol_Command();
     834:	d7 d1       	rcall	.+942    	; 0xbe4 <XPROGProtocol_Command>
     836:	24 c0       	rjmp	.+72     	; 0x880 <V2Protocol_ProcessCommand+0x194>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     838:	80 91 e8 00 	lds	r24, 0x00E8
     83c:	8b 77       	andi	r24, 0x7B	; 123
     83e:	80 93 e8 00 	sts	0x00E8, r24
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
     842:	0b d7       	rcall	.+3606   	; 0x165a <Endpoint_WaitUntilReady>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     844:	80 91 f2 00 	lds	r24, 0x00F2
     848:	90 91 f3 00 	lds	r25, 0x00F3
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_UnknownCommand(const uint8_t V2Command)
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
     84c:	80 34       	cpi	r24, 0x40	; 64
     84e:	91 05       	cpc	r25, r1
     850:	99 f3       	breq	.-26     	; 0x838 <V2Protocol_ProcessCommand+0x14c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     852:	80 91 e8 00 	lds	r24, 0x00E8
     856:	8b 77       	andi	r24, 0x7B	; 123
     858:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     85c:	82 e0       	ldi	r24, 0x02	; 2
     85e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     862:	80 91 ec 00 	lds	r24, 0x00EC
     866:	81 60       	ori	r24, 0x01	; 1
     868:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     86c:	10 93 f1 00 	sts	0x00F1, r17
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     870:	89 ec       	ldi	r24, 0xC9	; 201
     872:	80 93 f1 00 	sts	0x00F1, r24
     876:	80 91 e8 00 	lds	r24, 0x00E8
     87a:	8e 77       	andi	r24, 0x7E	; 126
     87c:	80 93 e8 00 	sts	0x00E8, r24
			V2Protocol_UnknownCommand(V2Command);
			break;
	}

	/* Disable the timeout management timer */
	TCCR0B = 0;
     880:	15 bc       	out	0x25, r1	; 37

	Endpoint_WaitUntilReady();
     882:	eb d6       	rcall	.+3542   	; 0x165a <Endpoint_WaitUntilReady>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     884:	82 e0       	ldi	r24, 0x02	; 2
     886:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     88a:	80 91 ec 00 	lds	r24, 0x00EC
     88e:	8e 7f       	andi	r24, 0xFE	; 254
     890:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_OUT_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_OUT);
}
     894:	1f 91       	pop	r17
     896:	0f 91       	pop	r16
     898:	ff 90       	pop	r15
     89a:	08 95       	ret

0000089c <V2Protocol_Init>:
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
     89c:	aa e7       	ldi	r26, 0x7A	; 122
     89e:	b0 e0       	ldi	r27, 0x00	; 0
     8a0:	87 ea       	ldi	r24, 0xA7	; 167
     8a2:	8c 93       	st	X, r24
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__) || \
					 defined(__AVR_ATmega32U6__))
				DDRF  &= ~(1 << ChannelIndex);
     8a4:	82 98       	cbi	0x10, 2	; 16
				DIDR0 |=  (1 << ChannelIndex);
     8a6:	ee e7       	ldi	r30, 0x7E	; 126
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	80 81       	ld	r24, Z
     8ac:	84 60       	ori	r24, 0x04	; 4
     8ae:	80 83       	st	Z, r24
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
     8b0:	82 e4       	ldi	r24, 0x42	; 66
     8b2:	80 93 7c 00 	sts	0x007C, r24
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
				#endif

				ADCSRA |= (1 << ADSC);
     8b6:	8c 91       	ld	r24, X
     8b8:	80 64       	ori	r24, 0x40	; 64
     8ba:	8c 93       	st	X, r24
	ADC_SetupChannel(VTARGET_ADC_CHANNEL);
	ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | VTARGET_ADC_CHANNEL_MASK);
	#endif

	/* Timeout timer initialization (10ms period) */
	OCR0A  = (((F_CPU / 1024) / 100) - 1);
     8bc:	8d e4       	ldi	r24, 0x4D	; 77
     8be:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01);
     8c0:	82 e0       	ldi	r24, 0x02	; 2
     8c2:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = (1 << OCIE0A);
     8c4:	80 93 6e 00 	sts	0x006E, r24
	V2Params_LoadNonVolatileParamValues();
	
	#if defined(ENABLE_ISP_PROTOCOL)
	ISPTarget_ConfigureRescueClock();
	#endif
}
     8c8:	4e c0       	rjmp	.+156    	; 0x966 <V2Params_LoadNonVolatileParamValues>

000008ca <V2Params_GetParamFromTable>:
 *  \param[in] ParamID  Parameter ID to find in the table
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
static ParameterItem_t* V2Params_GetParamFromTable(const uint8_t ParamID)
{
     8ca:	98 2f       	mov	r25, r24
     8cc:	e1 e2       	ldi	r30, 0x21	; 33
     8ce:	f1 e0       	ldi	r31, 0x01	; 1
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
	{
		if (ParamID == CurrTableItem->ParamID)
     8d0:	80 81       	ld	r24, Z
     8d2:	98 17       	cp	r25, r24
     8d4:	41 f0       	breq	.+16     	; 0x8e6 <V2Params_GetParamFromTable+0x1c>
static ParameterItem_t* V2Params_GetParamFromTable(const uint8_t ParamID)
{
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	ec 33       	cpi	r30, 0x3C	; 60
     8da:	f8 07       	cpc	r31, r24
     8dc:	11 f0       	breq	.+4      	; 0x8e2 <V2Params_GetParamFromTable+0x18>
	{
		if (ParamID == CurrTableItem->ParamID)
		  return CurrTableItem;

		CurrTableItem++;
     8de:	33 96       	adiw	r30, 0x03	; 3
     8e0:	f7 cf       	rjmp	.-18     	; 0x8d0 <V2Params_GetParamFromTable+0x6>
     8e2:	e0 e0       	ldi	r30, 0x00	; 0
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
	}

	return NULL;
}
     8e6:	cf 01       	movw	r24, r30
     8e8:	08 95       	ret

000008ea <V2Params_GetParameterValue>:
 *
 *  \return Current value of the parameter in the table, or 0 if not found
 */
uint8_t V2Params_GetParameterValue(const uint8_t ParamID)
{
	ParameterItem_t* ParamInfo = V2Params_GetParamFromTable(ParamID);
     8ea:	ef df       	rcall	.-34     	; 0x8ca <V2Params_GetParamFromTable>
     8ec:	fc 01       	movw	r30, r24

	if (ParamInfo == NULL)
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	11 f4       	brne	.+4      	; 0x8f6 <V2Params_GetParameterValue+0xc>
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	08 95       	ret
	  return 0;

	return ParamInfo->ParamValue;
     8f6:	82 81       	ldd	r24, Z+2	; 0x02
}
     8f8:	08 95       	ret

000008fa <V2Params_GetParameterPrivileges>:
 *
 *  \return Privileges for the requested parameter, as a mask of PARAM_PRIV_* masks
 */
uint8_t V2Params_GetParameterPrivileges(const uint8_t ParamID)
{
	ParameterItem_t* ParamInfo = V2Params_GetParamFromTable(ParamID);
     8fa:	e7 df       	rcall	.-50     	; 0x8ca <V2Params_GetParamFromTable>
     8fc:	fc 01       	movw	r30, r24

	if (ParamInfo == NULL)
     8fe:	00 97       	sbiw	r24, 0x00	; 0
     900:	11 f4       	brne	.+4      	; 0x906 <V2Params_GetParameterPrivileges+0xc>
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	08 95       	ret
	  return 0;

	return ParamInfo->ParamPrivileges;
     906:	81 81       	ldd	r24, Z+1	; 0x01
}
     908:	08 95       	ret

0000090a <V2Params_UpdateParamValues>:
 */
void V2Params_UpdateParamValues(void)
{
	#if (defined(ADC) && !defined(NO_VTARGET_DETECT))
	/* Update VTARGET parameter with the latest ADC conversion of VTARGET on supported AVR models */
	V2Params_GetParamFromTable(PARAM_VTARGET)->ParamValue = (((uint16_t)(VTARGET_REF_VOLTS * 10 * VTARGET_SCALE_FACTOR) * ADC_GetResult()) / 1024);
     90a:	84 e9       	ldi	r24, 0x94	; 148
     90c:	de df       	rcall	.-68     	; 0x8ca <V2Params_GetParamFromTable>
			 *  \return The result of the last ADC conversion as an unsigned value.
			 */
			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t ADC_GetResult(void)
			{
				ADCSRA |= (1 << ADIF);
     90e:	ea e7       	ldi	r30, 0x7A	; 122
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	20 81       	ld	r18, Z
     914:	20 61       	ori	r18, 0x10	; 16
     916:	20 83       	st	Z, r18
				return ADC;
     918:	20 91 78 00 	lds	r18, 0x0078
     91c:	30 91 79 00 	lds	r19, 0x0079
     920:	a9 01       	movw	r20, r18
     922:	76 e0       	ldi	r23, 0x06	; 6
     924:	44 0f       	add	r20, r20
     926:	55 1f       	adc	r21, r21
     928:	7a 95       	dec	r23
     92a:	e1 f7       	brne	.-8      	; 0x924 <V2Params_UpdateParamValues+0x1a>
     92c:	22 0f       	add	r18, r18
     92e:	33 1f       	adc	r19, r19
     930:	42 0f       	add	r20, r18
     932:	53 1f       	adc	r21, r19
     934:	25 2f       	mov	r18, r21
     936:	26 95       	lsr	r18
     938:	26 95       	lsr	r18
     93a:	fc 01       	movw	r30, r24
     93c:	22 83       	std	Z+2, r18	; 0x02
	#endif
}
     93e:	08 95       	ret

00000940 <V2Params_SetParameterValue>:
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
void V2Params_SetParameterValue(const uint8_t ParamID,
                                const uint8_t Value)
{
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	18 2f       	mov	r17, r24
     946:	06 2f       	mov	r16, r22
	ParameterItem_t* ParamInfo = V2Params_GetParamFromTable(ParamID);
     948:	c0 df       	rcall	.-128    	; 0x8ca <V2Params_GetParamFromTable>
     94a:	fc 01       	movw	r30, r24

	if (ParamInfo == NULL)
     94c:	00 97       	sbiw	r24, 0x00	; 0
     94e:	41 f0       	breq	.+16     	; 0x960 <V2Params_SetParameterValue+0x20>
	  return;

	ParamInfo->ParamValue = Value;
     950:	02 83       	std	Z+2, r16	; 0x02

	/* The target RESET line polarity is a non-volatile parameter, save to EEPROM when changed */
	if (ParamID == PARAM_RESET_POLARITY)
     952:	1e 39       	cpi	r17, 0x9E	; 158
     954:	29 f4       	brne	.+10     	; 0x960 <V2Params_SetParameterValue+0x20>
	  eeprom_update_byte(&EEPROM_Rest_Polarity, Value);
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	60 2f       	mov	r22, r16
     95c:	0e 94 01 11 	call	0x2202	; 0x2202 <__eeupd_byte_usb1287>
}
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	08 95       	ret

00000966 <V2Params_LoadNonVolatileParamValues>:
	};


/** Loads saved non-volatile parameter values from the EEPROM into the parameter table, as needed. */
void V2Params_LoadNonVolatileParamValues(void)
{
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
	/* Target RESET line polarity is a non-volatile value, retrieve current parameter value from EEPROM */
	V2Params_GetParamFromTable(PARAM_RESET_POLARITY)->ParamValue = eeprom_read_byte(&EEPROM_Rest_Polarity);
     96a:	8e e9       	ldi	r24, 0x9E	; 158
     96c:	ae df       	rcall	.-164    	; 0x8ca <V2Params_GetParamFromTable>
     96e:	8c 01       	movw	r16, r24
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__eerd_byte_usb1287>
     978:	f8 01       	movw	r30, r16
     97a:	82 83       	std	Z+2, r24	; 0x02
}
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	08 95       	ret

00000982 <XPROGProtocol_SetMode>:

/** Handler for the CMD_XPROG_SETMODE command, which sets the programmer-to-target protocol used for PDI/TPI
 *  programming.
 */
void XPROGProtocol_SetMode(void)
{
     982:	df 93       	push	r29
     984:	cf 93       	push	r28
     986:	0f 92       	push	r0
     988:	cd b7       	in	r28, 0x3d	; 61
     98a:	de b7       	in	r29, 0x3e	; 62
	struct
	{
		uint8_t Protocol;
	} SetMode_XPROG_Params;

	Endpoint_Read_Stream_LE(&SetMode_XPROG_Params, sizeof(SetMode_XPROG_Params), NO_STREAM_CALLBACK);
     98c:	ce 01       	movw	r24, r28
     98e:	01 96       	adiw	r24, 0x01	; 1
     990:	61 e0       	ldi	r22, 0x01	; 1
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	50 e0       	ldi	r21, 0x00	; 0
     998:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     99c:	80 91 e8 00 	lds	r24, 0x00E8
     9a0:	8b 77       	andi	r24, 0x7B	; 123
     9a2:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     9ac:	80 91 ec 00 	lds	r24, 0x00EC
     9b0:	81 60       	ori	r24, 0x01	; 1
     9b2:	80 93 ec 00 	sts	0x00EC, r24

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	XPROG_SelectedProtocol = SetMode_XPROG_Params.Protocol;
     9b6:	99 81       	ldd	r25, Y+1	; 0x01
     9b8:	90 93 5d 01 	sts	0x015D, r25
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     9bc:	81 e5       	ldi	r24, 0x51	; 81
     9be:	80 93 f1 00 	sts	0x00F1, r24

	Endpoint_Write_Byte(CMD_XPROG_SETMODE);
	Endpoint_Write_Byte((SetMode_XPROG_Params.Protocol != XPRG_PROTOCOL_JTAG) ? STATUS_CMD_OK : STATUS_CMD_FAILED);
     9c2:	91 30       	cpi	r25, 0x01	; 1
     9c4:	11 f4       	brne	.+4      	; 0x9ca <XPROGProtocol_SetMode+0x48>
     9c6:	80 ec       	ldi	r24, 0xC0	; 192
     9c8:	01 c0       	rjmp	.+2      	; 0x9cc <XPROGProtocol_SetMode+0x4a>
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9d0:	80 91 e8 00 	lds	r24, 0x00E8
     9d4:	8e 77       	andi	r24, 0x7E	; 126
     9d6:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();
}
     9da:	0f 90       	pop	r0
     9dc:	cf 91       	pop	r28
     9de:	df 91       	pop	r29
     9e0:	08 95       	ret

000009e2 <XPROGProtocol_WriteMemory>:
	Endpoint_ClearIN();
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(void)
{
     9e2:	af 92       	push	r10
     9e4:	bf 92       	push	r11
     9e6:	cf 92       	push	r12
     9e8:	df 92       	push	r13
     9ea:	ef 92       	push	r14
     9ec:	ff 92       	push	r15
     9ee:	0f 93       	push	r16
     9f0:	1f 93       	push	r17
     9f2:	df 93       	push	r29
     9f4:	cf 93       	push	r28
     9f6:	cd b7       	in	r28, 0x3d	; 61
     9f8:	de b7       	in	r29, 0x3e	; 62
     9fa:	c8 50       	subi	r28, 0x08	; 8
     9fc:	d1 40       	sbci	r29, 0x01	; 1
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	f8 94       	cli
     a02:	de bf       	out	0x3e, r29	; 62
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	cd bf       	out	0x3d, r28	; 61
		uint32_t Address;
		uint16_t Length;
		uint8_t  ProgData[256];
	} WriteMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params, (sizeof(WriteMemory_XPROG_Params) -
     a08:	ce 01       	movw	r24, r28
     a0a:	01 96       	adiw	r24, 0x01	; 1
     a0c:	68 e0       	ldi	r22, 0x08	; 8
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <Endpoint_Read_Stream_LE>
				{
					uint32_t DWord;
					uint8_t  Bytes[4];
				} Data;

				Data.DWord = DWord;
     a18:	3b 81       	ldd	r19, Y+3	; 0x03
     a1a:	2c 81       	ldd	r18, Y+4	; 0x04
     a1c:	9d 81       	ldd	r25, Y+5	; 0x05
     a1e:	8e 81       	ldd	r24, Y+6	; 0x06
	                                                    sizeof(WriteMemory_XPROG_Params).ProgData), NO_STREAM_CALLBACK);
	WriteMemory_XPROG_Params.Address = SwapEndian_32(WriteMemory_XPROG_Params.Address);
     a20:	8b 83       	std	Y+3, r24	; 0x03
     a22:	9c 83       	std	Y+4, r25	; 0x04
     a24:	2d 83       	std	Y+5, r18	; 0x05
     a26:	3e 83       	std	Y+6, r19	; 0x06
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;
     a28:	7f 81       	ldd	r23, Y+7	; 0x07
     a2a:	68 85       	ldd	r22, Y+8	; 0x08
	WriteMemory_XPROG_Params.Length  = SwapEndian_16(WriteMemory_XPROG_Params.Length);
     a2c:	6f 83       	std	Y+7, r22	; 0x07
     a2e:	78 87       	std	Y+8, r23	; 0x08
	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length, NO_STREAM_CALLBACK);
     a30:	8e 01       	movw	r16, r28
     a32:	07 5f       	subi	r16, 0xF7	; 247
     a34:	1f 4f       	sbci	r17, 0xFF	; 255
     a36:	c8 01       	movw	r24, r16
     a38:	40 e0       	ldi	r20, 0x00	; 0
     a3a:	50 e0       	ldi	r21, 0x00	; 0
     a3c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a40:	80 91 e8 00 	lds	r24, 0x00E8
     a44:	8b 77       	andi	r24, 0x7B	; 123
     a46:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a4a:	82 e0       	ldi	r24, 0x02	; 2
     a4c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     a50:	80 91 ec 00 	lds	r24, 0x00EC
     a54:	81 60       	ori	r24, 0x01	; 1
     a56:	80 93 ec 00 	sts	0x00EC, r24

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     a5a:	80 91 5d 01 	lds	r24, 0x015D
     a5e:	88 23       	and	r24, r24
     a60:	79 f5       	brne	.+94     	; 0xac0 <XPROGProtocol_WriteMemory+0xde>
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
		uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
		bool    PagedMemory      = true;

		switch (WriteMemory_XPROG_Params.MemoryType)
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	83 30       	cpi	r24, 0x03	; 3
     a66:	a9 f0       	breq	.+42     	; 0xa92 <XPROGProtocol_WriteMemory+0xb0>
     a68:	84 30       	cpi	r24, 0x04	; 4
     a6a:	28 f4       	brcc	.+10     	; 0xa76 <XPROGProtocol_WriteMemory+0x94>
     a6c:	81 30       	cpi	r24, 0x01	; 1
     a6e:	69 f0       	breq	.+26     	; 0xa8a <XPROGProtocol_WriteMemory+0xa8>
     a70:	82 30       	cpi	r24, 0x02	; 2
     a72:	a9 f4       	brne	.+42     	; 0xa9e <XPROGProtocol_WriteMemory+0xbc>
     a74:	0c c0       	rjmp	.+24     	; 0xa8e <XPROGProtocol_WriteMemory+0xac>
     a76:	85 30       	cpi	r24, 0x05	; 5
     a78:	31 f0       	breq	.+12     	; 0xa86 <XPROGProtocol_WriteMemory+0xa4>
     a7a:	85 30       	cpi	r24, 0x05	; 5
     a7c:	08 f4       	brcc	.+2      	; 0xa80 <XPROGProtocol_WriteMemory+0x9e>
     a7e:	4a c0       	rjmp	.+148    	; 0xb14 <XPROGProtocol_WriteMemory+0x132>
     a80:	86 30       	cpi	r24, 0x06	; 6
     a82:	69 f4       	brne	.+26     	; 0xa9e <XPROGProtocol_WriteMemory+0xbc>
     a84:	0a c0       	rjmp	.+20     	; 0xa9a <XPROGProtocol_WriteMemory+0xb8>
     a86:	88 e0       	ldi	r24, 0x08	; 8
     a88:	46 c0       	rjmp	.+140    	; 0xb16 <XPROGProtocol_WriteMemory+0x134>
     a8a:	44 e2       	ldi	r20, 0x24	; 36
     a8c:	09 c0       	rjmp	.+18     	; 0xaa0 <XPROGProtocol_WriteMemory+0xbe>
     a8e:	4c e2       	ldi	r20, 0x2C	; 44
     a90:	07 c0       	rjmp	.+14     	; 0xaa0 <XPROGProtocol_WriteMemory+0xbe>
			case XPRG_MEM_TYPE_APPL:
				WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
				break;
			case XPRG_MEM_TYPE_BOOT:
				WriteCommand     = XMEGA_NVM_CMD_WRITEBOOTSECPAGE;
				break;
     a92:	45 e3       	ldi	r20, 0x35	; 53
     a94:	83 e3       	ldi	r24, 0x33	; 51
     a96:	66 e3       	ldi	r22, 0x36	; 54
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <XPROGProtocol_WriteMemory+0xc2>
			case XPRG_MEM_TYPE_EEPROM:
				WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
				WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
				EraseBuffCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF;
				break;
     a9a:	4a e1       	ldi	r20, 0x1A	; 26
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <XPROGProtocol_WriteMemory+0xbe>
			case XPRG_MEM_TYPE_USERSIG:
				WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
				break;
     a9e:	4e e2       	ldi	r20, 0x2E	; 46
     aa0:	83 e2       	ldi	r24, 0x23	; 35
     aa2:	66 e2       	ldi	r22, 0x26	; 38
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
     aa4:	eb 80       	ldd	r14, Y+3	; 0x03
     aa6:	fc 80       	ldd	r15, Y+4	; 0x04
     aa8:	0d 81       	ldd	r16, Y+5	; 0x05
     aaa:	1e 81       	ldd	r17, Y+6	; 0x06
     aac:	af 80       	ldd	r10, Y+7	; 0x07
     aae:	b8 84       	ldd	r11, Y+8	; 0x08
     ab0:	2a 81       	ldd	r18, Y+2	; 0x02
     ab2:	99 e0       	ldi	r25, 0x09	; 9
     ab4:	c9 2e       	mov	r12, r25
     ab6:	d1 2c       	mov	r13, r1
     ab8:	cc 0e       	add	r12, r28
     aba:	dd 1e       	adc	r13, r29
     abc:	e1 d2       	rcall	.+1474   	; 0x1080 <XMEGANVM_WritePageMemory>
     abe:	06 c0       	rjmp	.+12     	; 0xacc <XPROGProtocol_WriteMemory+0xea>
		}
	}
	else
	{
		/* Send write command to the TPI device, indicate timeout if occurred */
		if (!(TINYNVM_WriteMemory(WriteMemory_XPROG_Params.Address, WriteMemory_XPROG_Params.ProgData,
     ac0:	4f 81       	ldd	r20, Y+7	; 0x07
     ac2:	58 85       	ldd	r21, Y+8	; 0x08
     ac4:	8b 81       	ldd	r24, Y+3	; 0x03
     ac6:	9c 81       	ldd	r25, Y+4	; 0x04
     ac8:	b8 01       	movw	r22, r16
     aca:	e8 d4       	rcall	.+2512   	; 0x149c <TINYNVM_WriteMemory>
     acc:	88 23       	and	r24, r24
     ace:	11 f0       	breq	.+4      	; 0xad4 <XPROGProtocol_WriteMemory+0xf2>
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <XPROGProtocol_WriteMemory+0xf4>
     ad4:	93 e0       	ldi	r25, 0x03	; 3
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     ad6:	80 e5       	ldi	r24, 0x50	; 80
     ad8:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     adc:	84 e0       	ldi	r24, 0x04	; 4
     ade:	80 93 f1 00 	sts	0x00F1, r24
     ae2:	90 93 f1 00 	sts	0x00F1, r25
     ae6:	80 91 e8 00 	lds	r24, 0x00E8
     aea:	8e 77       	andi	r24, 0x7E	; 126
     aec:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_Write_Byte(CMD_XPROG);
	Endpoint_Write_Byte(XPRG_CMD_WRITE_MEM);
	Endpoint_Write_Byte(ReturnStatus);
	Endpoint_ClearIN();
}
     af0:	c8 5f       	subi	r28, 0xF8	; 248
     af2:	de 4f       	sbci	r29, 0xFE	; 254
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	f8 94       	cli
     af8:	de bf       	out	0x3e, r29	; 62
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	cd bf       	out	0x3d, r28	; 61
     afe:	cf 91       	pop	r28
     b00:	df 91       	pop	r29
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	df 90       	pop	r13
     b0c:	cf 90       	pop	r12
     b0e:	bf 90       	pop	r11
     b10:	af 90       	pop	r10
     b12:	08 95       	ret
     b14:	8c e4       	ldi	r24, 0x4C	; 76
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
     b16:	4b 81       	ldd	r20, Y+3	; 0x03
     b18:	5c 81       	ldd	r21, Y+4	; 0x04
     b1a:	6d 81       	ldd	r22, Y+5	; 0x05
     b1c:	7e 81       	ldd	r23, Y+6	; 0x06
     b1e:	29 85       	ldd	r18, Y+9	; 0x09
     b20:	16 d3       	rcall	.+1580   	; 0x114e <XMEGANVM_WriteByteMemory>
     b22:	d4 cf       	rjmp	.-88     	; 0xacc <XPROGProtocol_WriteMemory+0xea>

00000b24 <XPROGProtocol_ReadMemory>:

/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(void)
{
     b24:	df 93       	push	r29
     b26:	cf 93       	push	r28
     b28:	cd b7       	in	r28, 0x3d	; 61
     b2a:	de b7       	in	r29, 0x3e	; 62
     b2c:	c7 50       	subi	r28, 0x07	; 7
     b2e:	d1 40       	sbci	r29, 0x01	; 1
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
		uint8_t  MemoryType;
		uint32_t Address;
		uint16_t Length;
	} ReadMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadMemory_XPROG_Params, sizeof(ReadMemory_XPROG_Params), NO_STREAM_CALLBACK);
     b3a:	ce 01       	movw	r24, r28
     b3c:	01 96       	adiw	r24, 0x01	; 1
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <Endpoint_Read_Stream_LE>
				{
					uint32_t DWord;
					uint8_t  Bytes[4];
				} Data;

				Data.DWord = DWord;
     b4a:	9a 81       	ldd	r25, Y+2	; 0x02
     b4c:	eb 81       	ldd	r30, Y+3	; 0x03
     b4e:	7c 81       	ldd	r23, Y+4	; 0x04
     b50:	6d 81       	ldd	r22, Y+5	; 0x05
	ReadMemory_XPROG_Params.Address = SwapEndian_32(ReadMemory_XPROG_Params.Address);
     b52:	6a 83       	std	Y+2, r22	; 0x02
     b54:	7b 83       	std	Y+3, r23	; 0x03
     b56:	ec 83       	std	Y+4, r30	; 0x04
     b58:	9d 83       	std	Y+5, r25	; 0x05
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;
     b5a:	3e 81       	ldd	r19, Y+6	; 0x06
     b5c:	2f 81       	ldd	r18, Y+7	; 0x07
	ReadMemory_XPROG_Params.Length  = SwapEndian_16(ReadMemory_XPROG_Params.Length);
     b5e:	2e 83       	std	Y+6, r18	; 0x06
     b60:	3f 83       	std	Y+7, r19	; 0x07
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b62:	80 91 e8 00 	lds	r24, 0x00E8
     b66:	8b 77       	andi	r24, 0x7B	; 123
     b68:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     b72:	80 91 ec 00 	lds	r24, 0x00EC
     b76:	81 60       	ori	r24, 0x01	; 1
     b78:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ReadBuffer[256];

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     b7c:	80 91 5d 01 	lds	r24, 0x015D
     b80:	ae 01       	movw	r20, r28
     b82:	48 5f       	subi	r20, 0xF8	; 248
     b84:	5f 4f       	sbci	r21, 0xFF	; 255
     b86:	88 23       	and	r24, r24
     b88:	19 f4       	brne	.+6      	; 0xb90 <XPROGProtocol_ReadMemory+0x6c>
	{
		/* Read the PDI target's memory, indicate timeout if occurred */
		if (!(XMEGANVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
     b8a:	8e 2f       	mov	r24, r30
     b8c:	02 d3       	rcall	.+1540   	; 0x1192 <XMEGANVM_ReadMemory>
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <XPROGProtocol_ReadMemory+0x74>
		  ReturnStatus = XPRG_ERR_TIMEOUT;
	}
	else
	{
		/* Read the TPI target's memory, indicate timeout if occurred */
		if (!(TINYNVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
     b90:	cb 01       	movw	r24, r22
     b92:	ba 01       	movw	r22, r20
     b94:	a9 01       	movw	r20, r18
     b96:	ba d4       	rcall	.+2420   	; 0x150c <TINYNVM_ReadMemory>
     b98:	88 23       	and	r24, r24
     b9a:	11 f4       	brne	.+4      	; 0xba0 <XPROGProtocol_ReadMemory+0x7c>
     b9c:	93 e0       	ldi	r25, 0x03	; 3
     b9e:	01 c0       	rjmp	.+2      	; 0xba2 <XPROGProtocol_ReadMemory+0x7e>
     ba0:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     ba2:	80 e5       	ldi	r24, 0x50	; 80
     ba4:	80 93 f1 00 	sts	0x00F1, r24

	Endpoint_Write_Byte(CMD_XPROG);
	Endpoint_Write_Byte(XPRG_CMD_READ_MEM);
	Endpoint_Write_Byte(ReturnStatus);

	if (ReturnStatus == XPRG_ERR_OK)
     ba8:	85 e0       	ldi	r24, 0x05	; 5
     baa:	80 93 f1 00 	sts	0x00F1, r24
     bae:	90 93 f1 00 	sts	0x00F1, r25
     bb2:	99 23       	and	r25, r25
     bb4:	41 f4       	brne	.+16     	; 0xbc6 <XPROGProtocol_ReadMemory+0xa2>
	  Endpoint_Write_Stream_LE(ReadBuffer, ReadMemory_XPROG_Params.Length, NO_STREAM_CALLBACK);
     bb6:	6e 81       	ldd	r22, Y+6	; 0x06
     bb8:	7f 81       	ldd	r23, Y+7	; 0x07
     bba:	ce 01       	movw	r24, r28
     bbc:	08 96       	adiw	r24, 0x08	; 8
     bbe:	40 e0       	ldi	r20, 0x00	; 0
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bc6:	80 91 e8 00 	lds	r24, 0x00E8
     bca:	8e 77       	andi	r24, 0x7E	; 126
     bcc:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearIN();
}
     bd0:	c9 5f       	subi	r28, 0xF9	; 249
     bd2:	de 4f       	sbci	r29, 0xFE	; 254
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	de bf       	out	0x3e, r29	; 62
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	cd bf       	out	0x3d, r28	; 61
     bde:	cf 91       	pop	r28
     be0:	df 91       	pop	r29
     be2:	08 95       	ret

00000be4 <XPROGProtocol_Command>:

/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
void XPROGProtocol_Command(void)
{
     be4:	df 93       	push	r29
     be6:	cf 93       	push	r28
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
     bec:	29 97       	sbiw	r28, 0x09	; 9
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	f8 94       	cli
     bf2:	de bf       	out	0x3e, r29	; 62
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     bf8:	90 91 f1 00 	lds	r25, 0x00F1
	uint8_t XPROGCommand = Endpoint_Read_Byte();

	switch (XPROGCommand)
     bfc:	94 30       	cpi	r25, 0x04	; 4
     bfe:	09 f4       	brne	.+2      	; 0xc02 <XPROGProtocol_Command+0x1e>
     c00:	ae c0       	rjmp	.+348    	; 0xd5e <XPROGProtocol_Command+0x17a>
     c02:	95 30       	cpi	r25, 0x05	; 5
     c04:	48 f4       	brcc	.+18     	; 0xc18 <XPROGProtocol_Command+0x34>
     c06:	92 30       	cpi	r25, 0x02	; 2
     c08:	a1 f1       	breq	.+104    	; 0xc72 <XPROGProtocol_Command+0x8e>
     c0a:	93 30       	cpi	r25, 0x03	; 3
     c0c:	08 f0       	brcs	.+2      	; 0xc10 <XPROGProtocol_Command+0x2c>
     c0e:	4d c0       	rjmp	.+154    	; 0xcaa <XPROGProtocol_Command+0xc6>
     c10:	91 30       	cpi	r25, 0x01	; 1
     c12:	09 f0       	breq	.+2      	; 0xc16 <XPROGProtocol_Command+0x32>
     c14:	38 c1       	rjmp	.+624    	; 0xe86 <XPROGProtocol_Command+0x2a2>
     c16:	0a c0       	rjmp	.+20     	; 0xc2c <XPROGProtocol_Command+0x48>
     c18:	96 30       	cpi	r25, 0x06	; 6
     c1a:	09 f4       	brne	.+2      	; 0xc1e <XPROGProtocol_Command+0x3a>
     c1c:	a4 c0       	rjmp	.+328    	; 0xd66 <XPROGProtocol_Command+0x182>
     c1e:	96 30       	cpi	r25, 0x06	; 6
     c20:	08 f4       	brcc	.+2      	; 0xc24 <XPROGProtocol_Command+0x40>
     c22:	9f c0       	rjmp	.+318    	; 0xd62 <XPROGProtocol_Command+0x17e>
     c24:	97 30       	cpi	r25, 0x07	; 7
     c26:	09 f0       	breq	.+2      	; 0xc2a <XPROGProtocol_Command+0x46>
     c28:	2e c1       	rjmp	.+604    	; 0xe86 <XPROGProtocol_Command+0x2a2>
     c2a:	e0 c0       	rjmp	.+448    	; 0xdec <XPROGProtocol_Command+0x208>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c2c:	80 91 e8 00 	lds	r24, 0x00E8
     c30:	8b 77       	andi	r24, 0x7B	; 123
     c32:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c36:	82 e0       	ldi	r24, 0x02	; 2
     c38:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     c3c:	80 91 ec 00 	lds	r24, 0x00EC
     c40:	81 60       	ori	r24, 0x01	; 1
     c42:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	bool NVMBusEnabled = false;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     c46:	80 91 5d 01 	lds	r24, 0x015D
     c4a:	88 23       	and	r24, r24
     c4c:	11 f4       	brne	.+4      	; 0xc52 <XPROGProtocol_Command+0x6e>
	  NVMBusEnabled = XMEGANVM_EnablePDI();
     c4e:	98 d3       	rcall	.+1840   	; 0x1380 <XMEGANVM_EnablePDI>
     c50:	05 c0       	rjmp	.+10     	; 0xc5c <XPROGProtocol_Command+0x78>
	else if (XPROG_SelectedProtocol == XPRG_PROTOCOL_TPI)
     c52:	82 30       	cpi	r24, 0x02	; 2
     c54:	11 f0       	breq	.+4      	; 0xc5a <XPROGProtocol_Command+0x76>
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <XPROGProtocol_Command+0x7a>
	  NVMBusEnabled = TINYNVM_EnableTPI();
     c5a:	93 d4       	rcall	.+2342   	; 0x1582 <TINYNVM_EnableTPI>
     c5c:	98 2f       	mov	r25, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     c5e:	80 e5       	ldi	r24, 0x50	; 80
     c60:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	80 93 f1 00 	sts	0x00F1, r24
     c6a:	89 27       	eor	r24, r25
     c6c:	80 93 f1 00 	sts	0x00F1, r24
     c70:	05 c1       	rjmp	.+522    	; 0xe7c <XPROGProtocol_Command+0x298>
     c72:	80 91 e8 00 	lds	r24, 0x00E8
     c76:	8b 77       	andi	r24, 0x7B	; 123
     c78:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c7c:	90 93 e9 00 	sts	0x00E9, r25
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     c80:	80 91 ec 00 	lds	r24, 0x00EC
     c84:	81 60       	ori	r24, 0x01	; 1
     c86:	80 93 ec 00 	sts	0x00EC, r24
{
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     c8a:	80 91 5d 01 	lds	r24, 0x015D
     c8e:	88 23       	and	r24, r24
     c90:	11 f4       	brne	.+4      	; 0xc96 <XPROGProtocol_Command+0xb2>
	  XMEGANVM_DisablePDI();
     c92:	6c d3       	rcall	.+1752   	; 0x136c <XMEGANVM_DisablePDI>
     c94:	01 c0       	rjmp	.+2      	; 0xc98 <XPROGProtocol_Command+0xb4>
	else
	  TINYNVM_DisableTPI();
     c96:	6f d4       	rcall	.+2270   	; 0x1576 <TINYNVM_DisableTPI>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     c98:	80 e5       	ldi	r24, 0x50	; 80
     c9a:	80 93 f1 00 	sts	0x00F1, r24
	{
		uint8_t  MemoryType;
		uint32_t Address;
	} Erase_XPROG_Params;

	Endpoint_Read_Stream_LE(&Erase_XPROG_Params, sizeof(Erase_XPROG_Params), NO_STREAM_CALLBACK);
     c9e:	82 e0       	ldi	r24, 0x02	; 2
     ca0:	80 93 f1 00 	sts	0x00F1, r24
     ca4:	10 92 f1 00 	sts	0x00F1, r1
     ca8:	e9 c0       	rjmp	.+466    	; 0xe7c <XPROGProtocol_Command+0x298>
     caa:	ce 01       	movw	r24, r28
     cac:	05 96       	adiw	r24, 0x05	; 5
     cae:	65 e0       	ldi	r22, 0x05	; 5
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	40 e0       	ldi	r20, 0x00	; 0
     cb4:	50 e0       	ldi	r21, 0x00	; 0
     cb6:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <Endpoint_Read_Stream_LE>
				{
					uint32_t DWord;
					uint8_t  Bytes[4];
				} Data;

				Data.DWord = DWord;
     cba:	58 85       	ldd	r21, Y+8	; 0x08
     cbc:	49 85       	ldd	r20, Y+9	; 0x09

				Temp = Data.Bytes[0];
     cbe:	7e 81       	ldd	r23, Y+6	; 0x06
				Data.Bytes[0] = Data.Bytes[3];
				Data.Bytes[3] = Temp;

				Temp = Data.Bytes[1];
     cc0:	6f 81       	ldd	r22, Y+7	; 0x07
	Erase_XPROG_Params.Address = SwapEndian_32(Erase_XPROG_Params.Address);
     cc2:	4e 83       	std	Y+6, r20	; 0x06
     cc4:	5f 83       	std	Y+7, r21	; 0x07
     cc6:	68 87       	std	Y+8, r22	; 0x08
     cc8:	79 87       	std	Y+9, r23	; 0x09
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     cca:	80 91 e8 00 	lds	r24, 0x00E8
     cce:	8b 77       	andi	r24, 0x7B	; 123
     cd0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     cd4:	82 e0       	ldi	r24, 0x02	; 2
     cd6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     cda:	80 91 ec 00 	lds	r24, 0x00EC
     cde:	81 60       	ori	r24, 0x01	; 1
     ce0:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t EraseCommand;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     ce4:	80 91 5d 01 	lds	r24, 0x015D
     ce8:	9d 81       	ldd	r25, Y+5	; 0x05
     cea:	88 23       	and	r24, r24
     cec:	39 f5       	brne	.+78     	; 0xd3c <XPROGProtocol_Command+0x158>
	{
		/* Determine which NVM command to send to the device depending on the memory to erase */
		switch (Erase_XPROG_Params.MemoryType)
     cee:	94 30       	cpi	r25, 0x04	; 4
     cf0:	c1 f0       	breq	.+48     	; 0xd22 <XPROGProtocol_Command+0x13e>
     cf2:	95 30       	cpi	r25, 0x05	; 5
     cf4:	38 f4       	brcc	.+14     	; 0xd04 <XPROGProtocol_Command+0x120>
     cf6:	92 30       	cpi	r25, 0x02	; 2
     cf8:	71 f0       	breq	.+28     	; 0xd16 <XPROGProtocol_Command+0x132>
     cfa:	93 30       	cpi	r25, 0x03	; 3
     cfc:	80 f4       	brcc	.+32     	; 0xd1e <XPROGProtocol_Command+0x13a>
     cfe:	91 30       	cpi	r25, 0x01	; 1
     d00:	d1 f4       	brne	.+52     	; 0xd36 <XPROGProtocol_Command+0x152>
     d02:	0b c0       	rjmp	.+22     	; 0xd1a <XPROGProtocol_Command+0x136>
     d04:	96 30       	cpi	r25, 0x06	; 6
     d06:	89 f0       	breq	.+34     	; 0xd2a <XPROGProtocol_Command+0x146>
     d08:	96 30       	cpi	r25, 0x06	; 6
     d0a:	68 f0       	brcs	.+26     	; 0xd26 <XPROGProtocol_Command+0x142>
     d0c:	97 30       	cpi	r25, 0x07	; 7
     d0e:	79 f0       	breq	.+30     	; 0xd2e <XPROGProtocol_Command+0x14a>
     d10:	98 30       	cpi	r25, 0x08	; 8
     d12:	89 f4       	brne	.+34     	; 0xd36 <XPROGProtocol_Command+0x152>
     d14:	0e c0       	rjmp	.+28     	; 0xd32 <XPROGProtocol_Command+0x14e>
     d16:	80 e2       	ldi	r24, 0x20	; 32
     d18:	0f c0       	rjmp	.+30     	; 0xd38 <XPROGProtocol_Command+0x154>
     d1a:	80 e4       	ldi	r24, 0x40	; 64
     d1c:	0d c0       	rjmp	.+26     	; 0xd38 <XPROGProtocol_Command+0x154>
     d1e:	88 e6       	ldi	r24, 0x68	; 104
     d20:	0b c0       	rjmp	.+22     	; 0xd38 <XPROGProtocol_Command+0x154>
     d22:	80 e3       	ldi	r24, 0x30	; 48
     d24:	09 c0       	rjmp	.+18     	; 0xd38 <XPROGProtocol_Command+0x154>
     d26:	82 e2       	ldi	r24, 0x22	; 34
     d28:	07 c0       	rjmp	.+14     	; 0xd38 <XPROGProtocol_Command+0x154>
     d2a:	8a e2       	ldi	r24, 0x2A	; 42
     d2c:	05 c0       	rjmp	.+10     	; 0xd38 <XPROGProtocol_Command+0x154>
     d2e:	82 e3       	ldi	r24, 0x32	; 50
     d30:	03 c0       	rjmp	.+6      	; 0xd38 <XPROGProtocol_Command+0x154>
     d32:	88 e1       	ldi	r24, 0x18	; 24
     d34:	01 c0       	rjmp	.+2      	; 0xd38 <XPROGProtocol_Command+0x154>
     d36:	80 e0       	ldi	r24, 0x00	; 0
				EraseCommand = XMEGA_NVM_CMD_NOOP;
				break;
		}

		/* Erase the target memory, indicate timeout if occurred */
		if (!(XMEGANVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
     d38:	70 d2       	rcall	.+1248   	; 0x121a <XMEGANVM_EraseMemory>
     d3a:	07 c0       	rjmp	.+14     	; 0xd4a <XPROGProtocol_Command+0x166>
		  ReturnStatus = XPRG_ERR_TIMEOUT;
	}
	else
	{
		if (Erase_XPROG_Params.MemoryType == XPRG_ERASE_CHIP)
     d3c:	91 30       	cpi	r25, 0x01	; 1
     d3e:	11 f0       	breq	.+4      	; 0xd44 <XPROGProtocol_Command+0x160>
     d40:	84 e1       	ldi	r24, 0x14	; 20
     d42:	01 c0       	rjmp	.+2      	; 0xd46 <XPROGProtocol_Command+0x162>
     d44:	80 e1       	ldi	r24, 0x10	; 16
		  EraseCommand = TINY_NVM_CMD_CHIPERASE;
		else
		  EraseCommand = TINY_NVM_CMD_SECTIONERASE;

		/* Erase the target memory, indicate timeout if occurred */
		if (!(TINYNVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
     d46:	ba 01       	movw	r22, r20
     d48:	8e d3       	rcall	.+1820   	; 0x1466 <TINYNVM_EraseMemory>
     d4a:	88 23       	and	r24, r24
     d4c:	11 f0       	breq	.+4      	; 0xd52 <XPROGProtocol_Command+0x16e>
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	01 c0       	rjmp	.+2      	; 0xd54 <XPROGProtocol_Command+0x170>
     d52:	93 e0       	ldi	r25, 0x03	; 3
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     d54:	80 e5       	ldi	r24, 0x50	; 80
     d56:	80 93 f1 00 	sts	0x00F1, r24
			break;
		case XPRG_CMD_ERASE:
			XPROGProtocol_Erase();
			break;
		case XPRG_CMD_WRITE_MEM:
			XPROGProtocol_WriteMemory();
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8b c0       	rjmp	.+278    	; 0xe74 <XPROGProtocol_Command+0x290>
     d5e:	41 de       	rcall	.-894    	; 0x9e2 <XPROGProtocol_WriteMemory>
     d60:	92 c0       	rjmp	.+292    	; 0xe86 <XPROGProtocol_Command+0x2a2>
			break;
		case XPRG_CMD_READ_MEM:
			XPROGProtocol_ReadMemory();
     d62:	e0 de       	rcall	.-576    	; 0xb24 <XPROGProtocol_ReadMemory>
     d64:	90 c0       	rjmp	.+288    	; 0xe86 <XPROGProtocol_Command+0x2a2>
	struct
	{
		uint8_t CRCType;
	} ReadCRC_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadCRC_XPROG_Params, sizeof(ReadCRC_XPROG_Params), NO_STREAM_CALLBACK);
     d66:	ce 01       	movw	r24, r28
     d68:	05 96       	adiw	r24, 0x05	; 5
     d6a:	61 e0       	ldi	r22, 0x01	; 1
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	40 e0       	ldi	r20, 0x00	; 0
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d76:	80 91 e8 00 	lds	r24, 0x00E8
     d7a:	8b 77       	andi	r24, 0x7B	; 123
     d7c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d80:	82 e0       	ldi	r24, 0x02	; 2
     d82:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     d86:	80 91 ec 00 	lds	r24, 0x00EC
     d8a:	81 60       	ori	r24, 0x01	; 1
     d8c:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint32_t MemoryCRC;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     d90:	80 91 5d 01 	lds	r24, 0x015D
     d94:	88 23       	and	r24, r24
     d96:	11 f0       	breq	.+4      	; 0xd9c <XPROGProtocol_Command+0x1b8>
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	13 c0       	rjmp	.+38     	; 0xdc2 <XPROGProtocol_Command+0x1de>
	{
		uint8_t CRCCommand;

		/* Determine which NVM command to send to the device depending on the memory to CRC */
		switch (ReadCRC_XPROG_Params.CRCType)
     d9c:	8d 81       	ldd	r24, Y+5	; 0x05
     d9e:	81 30       	cpi	r24, 0x01	; 1
     da0:	21 f0       	breq	.+8      	; 0xdaa <XPROGProtocol_Command+0x1c6>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	21 f4       	brne	.+8      	; 0xdae <XPROGProtocol_Command+0x1ca>
     da6:	89 e3       	ldi	r24, 0x39	; 57
     da8:	03 c0       	rjmp	.+6      	; 0xdb0 <XPROGProtocol_Command+0x1cc>
     daa:	88 e3       	ldi	r24, 0x38	; 56
     dac:	01 c0       	rjmp	.+2      	; 0xdb0 <XPROGProtocol_Command+0x1cc>
     dae:	88 e7       	ldi	r24, 0x78	; 120
				CRCCommand = XMEGA_NVM_CMD_FLASHCRC;
				break;
		}

		/* Perform and retrieve the memory CRC, indicate timeout if occurred */
		if (!(XMEGANVM_GetMemoryCRC(CRCCommand, &MemoryCRC)))
     db0:	be 01       	movw	r22, r28
     db2:	6f 5f       	subi	r22, 0xFF	; 255
     db4:	7f 4f       	sbci	r23, 0xFF	; 255
     db6:	9e d2       	rcall	.+1340   	; 0x12f4 <XMEGANVM_GetMemoryCRC>
     db8:	88 23       	and	r24, r24
     dba:	11 f4       	brne	.+4      	; 0xdc0 <XPROGProtocol_Command+0x1dc>
     dbc:	93 e0       	ldi	r25, 0x03	; 3
     dbe:	01 c0       	rjmp	.+2      	; 0xdc2 <XPROGProtocol_Command+0x1de>
     dc0:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     dc2:	80 e5       	ldi	r24, 0x50	; 80
     dc4:	80 93 f1 00 	sts	0x00F1, r24

	Endpoint_Write_Byte(CMD_XPROG);
	Endpoint_Write_Byte(XPRG_CMD_CRC);
	Endpoint_Write_Byte(ReturnStatus);

	if (ReturnStatus == XPRG_ERR_OK)
     dc8:	86 e0       	ldi	r24, 0x06	; 6
     dca:	80 93 f1 00 	sts	0x00F1, r24
     dce:	90 93 f1 00 	sts	0x00F1, r25
     dd2:	99 23       	and	r25, r25
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <XPROGProtocol_Command+0x1f4>
     dd6:	52 c0       	rjmp	.+164    	; 0xe7c <XPROGProtocol_Command+0x298>
	{
		Endpoint_Write_Byte(MemoryCRC >> 16);
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	9a 81       	ldd	r25, Y+2	; 0x02
     ddc:	ab 81       	ldd	r26, Y+3	; 0x03
     dde:	bc 81       	ldd	r27, Y+4	; 0x04
     de0:	9d 01       	movw	r18, r26
     de2:	44 27       	eor	r20, r20
     de4:	55 27       	eor	r21, r21
     de6:	20 93 f1 00 	sts	0x00F1, r18
     dea:	44 c0       	rjmp	.+136    	; 0xe74 <XPROGProtocol_Command+0x290>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     dec:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t ReturnStatus = XPRG_ERR_OK;

	uint8_t XPROGParam = Endpoint_Read_Byte();

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
     df0:	82 30       	cpi	r24, 0x02	; 2
     df2:	e1 f0       	breq	.+56     	; 0xe2c <XPROGProtocol_Command+0x248>
     df4:	83 30       	cpi	r24, 0x03	; 3
     df6:	18 f4       	brcc	.+6      	; 0xdfe <XPROGProtocol_Command+0x21a>
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	29 f4       	brne	.+10     	; 0xe06 <XPROGProtocol_Command+0x222>
     dfc:	06 c0       	rjmp	.+12     	; 0xe0a <XPROGProtocol_Command+0x226>
     dfe:	83 30       	cpi	r24, 0x03	; 3
     e00:	f1 f0       	breq	.+60     	; 0xe3e <XPROGProtocol_Command+0x25a>
     e02:	84 30       	cpi	r24, 0x04	; 4
     e04:	09 f1       	breq	.+66     	; 0xe48 <XPROGProtocol_Command+0x264>
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	24 c0       	rjmp	.+72     	; 0xe52 <XPROGProtocol_Command+0x26e>
				{
					uint32_t DWord;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[3] = UEDATX;
     e0a:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[2] = UEDATX;
     e0e:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
     e12:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[0] = UEDATX;
     e16:	80 91 f1 00 	lds	r24, 0x00F1
	{
		case XPRG_PARAM_NVMBASE:
			XPROG_Param_NVMBase = Endpoint_Read_DWord_BE();
     e1a:	80 93 3f 01 	sts	0x013F, r24
     e1e:	90 93 40 01 	sts	0x0140, r25
     e22:	20 93 41 01 	sts	0x0141, r18
     e26:	30 93 42 01 	sts	0x0142, r19
     e2a:	12 c0       	rjmp	.+36     	; 0xe50 <XPROGProtocol_Command+0x26c>
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[1] = UEDATX;
     e2c:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[0] = UEDATX;
     e30:	80 91 f1 00 	lds	r24, 0x00F1
			break;
		case XPRG_PARAM_EEPPAGESIZE:
			XPROG_Param_EEPageSize = Endpoint_Read_Word_BE();
     e34:	80 93 43 01 	sts	0x0143, r24
     e38:	90 93 44 01 	sts	0x0144, r25
     e3c:	09 c0       	rjmp	.+18     	; 0xe50 <XPROGProtocol_Command+0x26c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     e3e:	80 91 f1 00 	lds	r24, 0x00F1
			break;
		case XPRG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = Endpoint_Read_Byte();
     e42:	80 93 45 01 	sts	0x0145, r24
     e46:	04 c0       	rjmp	.+8      	; 0xe50 <XPROGProtocol_Command+0x26c>
     e48:	80 91 f1 00 	lds	r24, 0x00F1
			break;
		case XPRG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = Endpoint_Read_Byte();
     e4c:	80 93 46 01 	sts	0x0146, r24
     e50:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e52:	80 91 e8 00 	lds	r24, 0x00E8
     e56:	8b 77       	andi	r24, 0x7B	; 123
     e58:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     e62:	80 91 ec 00 	lds	r24, 0x00EC
     e66:	81 60       	ori	r24, 0x01	; 1
     e68:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     e6c:	80 e5       	ldi	r24, 0x50	; 80
     e6e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e72:	87 e0       	ldi	r24, 0x07	; 7
     e74:	80 93 f1 00 	sts	0x00F1, r24
     e78:	90 93 f1 00 	sts	0x00F1, r25
     e7c:	80 91 e8 00 	lds	r24, 0x00E8
     e80:	8e 77       	andi	r24, 0x7E	; 126
     e82:	80 93 e8 00 	sts	0x00E8, r24
			break;
		case XPRG_CMD_SET_PARAM:
			XPROGProtocol_SetParam();
			break;
	}
}
     e86:	29 96       	adiw	r28, 0x09	; 9
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	de bf       	out	0x3e, r29	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	cd bf       	out	0x3d, r28	; 61
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <XPROGTarget_SetTxMode>:
}

static void XPROGTarget_SetTxMode(void)
{
	/* Wait for a full cycle of the clock */
	while (PIND & (1 << 5));
     e98:	4d 99       	sbic	0x09, 5	; 9
     e9a:	fe cf       	rjmp	.-4      	; 0xe98 <XPROGTarget_SetTxMode>
	while (!(PIND & (1 << 5)));
     e9c:	4d 9b       	sbis	0x09, 5	; 9
     e9e:	fe cf       	rjmp	.-4      	; 0xe9c <XPROGTarget_SetTxMode+0x4>

	PORTD  |=  (1 << 3);
     ea0:	5b 9a       	sbi	0x0b, 3	; 11
	DDRD   |=  (1 << 3);
     ea2:	53 9a       	sbi	0x0a, 3	; 10

	UCSR1B &= ~(1 << RXEN1);
     ea4:	80 91 c9 00 	lds	r24, 0x00C9
     ea8:	8f 7e       	andi	r24, 0xEF	; 239
     eaa:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B |=  (1 << TXEN1);
     eae:	80 91 c9 00 	lds	r24, 0x00C9
     eb2:	88 60       	ori	r24, 0x08	; 8
     eb4:	80 93 c9 00 	sts	0x00C9, r24

	IsSending = true;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	80 93 6b 03 	sts	0x036B, r24
}
     ebe:	08 95       	ret

00000ec0 <XPROGTarget_SendIdle>:

/** Sends an IDLE via the USART to the attached target, consisting of a full frame of idle bits. */
void XPROGTarget_SendIdle(void)
{
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
     ec0:	80 91 6b 03 	lds	r24, 0x036B
     ec4:	88 23       	and	r24, r24
     ec6:	09 f4       	brne	.+2      	; 0xeca <XPROGTarget_SendIdle+0xa>
	  XPROGTarget_SetTxMode();
     ec8:	e7 df       	rcall	.-50     	; 0xe98 <XPROGTarget_SetTxMode>
     eca:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
	{
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
     ecc:	4d 99       	sbic	0x09, 5	; 9
     ece:	fe cf       	rjmp	.-4      	; 0xecc <XPROGTarget_SendIdle+0xc>
		while (!(PIND & (1 << 5)));
     ed0:	4d 9b       	sbis	0x09, 5	; 9
     ed2:	fe cf       	rjmp	.-4      	; 0xed0 <XPROGTarget_SendIdle+0x10>
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
	  XPROGTarget_SetTxMode();
	
	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
     ed4:	8f 5f       	subi	r24, 0xFF	; 255
     ed6:	8c 30       	cpi	r24, 0x0C	; 12
     ed8:	c9 f7       	brne	.-14     	; 0xecc <XPROGTarget_SendIdle+0xc>
	{
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
		while (!(PIND & (1 << 5)));
	}
}
     eda:	08 95       	ret

00000edc <XPROGTarget_EnableTargetTPI>:
}

/** Enables the target's TPI interface, holding the target in reset until TPI mode is exited. */
void XPROGTarget_EnableTargetTPI(void)
{
	IsSending = false;
     edc:	10 92 6b 03 	sts	0x036B, r1

	/* Set /RESET line low for at least 400ns to enable TPI functionality */
	AUX_LINE_DDR  |=  AUX_LINE_MASK;
     ee0:	24 9a       	sbi	0x04, 4	; 4
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
     ee2:	2c 98       	cbi	0x05, 4	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	8a 95       	dec	r24
     ee8:	f1 f7       	brne	.-4      	; 0xee6 <XPROGTarget_EnableTargetTPI+0xa>
	_delay_us(1);

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
     eea:	8a b1       	in	r24, 0x0a	; 10
     eec:	88 62       	ori	r24, 0x28	; 40
     eee:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
     ef0:	52 98       	cbi	0x0a, 2	; 10

	/* Set up the synchronous USART for TINY communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
     ef2:	8f e0       	ldi	r24, 0x0F	; 15
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	90 93 cd 00 	sts	0x00CD, r25
     efa:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1 << TXEN1);
     efe:	88 e0       	ldi	r24, 0x08	; 8
     f00:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
     f04:	8f e6       	ldi	r24, 0x6F	; 111
     f06:	80 93 ca 00 	sts	0x00CA, r24

	/* Send two IDLEs of 12 bits each to enable TPI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
     f0a:	da df       	rcall	.-76     	; 0xec0 <XPROGTarget_SendIdle>
	XPROGTarget_SendIdle();
}
     f0c:	d9 cf       	rjmp	.-78     	; 0xec0 <XPROGTarget_SendIdle>

00000f0e <XPROGTarget_EnableTargetPDI>:
bool IsSending;

/** Enables the target's PDI interface, holding the target in reset until PDI mode is exited. */
void XPROGTarget_EnableTargetPDI(void)
{
	IsSending = false;
     f0e:	10 92 6b 03 	sts	0x036B, r1

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
     f12:	8a b1       	in	r24, 0x0a	; 10
     f14:	88 62       	ori	r24, 0x28	; 40
     f16:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
     f18:	52 98       	cbi	0x0a, 2	; 10

	/* Set DATA line high for at least 90ns to disable /RESET functionality */
	PORTD |= (1 << 3);
     f1a:	5b 9a       	sbi	0x0b, 3	; 11
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	8a 95       	dec	r24
     f20:	f1 f7       	brne	.-4      	; 0xf1e <XPROGTarget_EnableTargetPDI+0x10>
	_delay_us(1);

	/* Set up the synchronous USART for XMEGA communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
     f22:	8f e0       	ldi	r24, 0x0F	; 15
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	90 93 cd 00 	sts	0x00CD, r25
     f2a:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1 << TXEN1);
     f2e:	88 e0       	ldi	r24, 0x08	; 8
     f30:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
     f34:	8f e6       	ldi	r24, 0x6F	; 111
     f36:	80 93 ca 00 	sts	0x00CA, r24

	/* Send two IDLEs of 12 bits each to enable PDI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
     f3a:	c2 df       	rcall	.-124    	; 0xec0 <XPROGTarget_SendIdle>
	XPROGTarget_SendIdle();
}
     f3c:	c1 cf       	rjmp	.-126    	; 0xec0 <XPROGTarget_SendIdle>

00000f3e <XPROGTarget_SendByte>:
/** Sends a byte via the USART.
 *
 *  \param[in] Byte  Byte to send through the USART
 */
void XPROGTarget_SendByte(const uint8_t Byte)
{
     f3e:	1f 93       	push	r17
     f40:	18 2f       	mov	r17, r24
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
     f42:	80 91 6b 03 	lds	r24, 0x036B
     f46:	88 23       	and	r24, r24
     f48:	09 f4       	brne	.+2      	; 0xf4c <XPROGTarget_SendByte+0xe>
	  XPROGTarget_SetTxMode();
     f4a:	a6 df       	rcall	.-180    	; 0xe98 <XPROGTarget_SetTxMode>

	/* Wait until there is space in the hardware Tx buffer before writing */
	while (!(UCSR1A & (1 << UDRE1)));
     f4c:	80 91 c8 00 	lds	r24, 0x00C8
     f50:	85 ff       	sbrs	r24, 5
     f52:	fc cf       	rjmp	.-8      	; 0xf4c <XPROGTarget_SendByte+0xe>
	UCSR1A |= (1 << TXC1);
     f54:	80 91 c8 00 	lds	r24, 0x00C8
     f58:	80 64       	ori	r24, 0x40	; 64
     f5a:	80 93 c8 00 	sts	0x00C8, r24
	UDR1    = Byte;
     f5e:	10 93 ce 00 	sts	0x00CE, r17
}
     f62:	1f 91       	pop	r17
     f64:	08 95       	ret

00000f66 <XPROGTarget_SetRxMode>:
	IsSending = true;
}

static void XPROGTarget_SetRxMode(void)
{
	while (!(UCSR1A & (1 << TXC1)));
     f66:	80 91 c8 00 	lds	r24, 0x00C8
     f6a:	86 ff       	sbrs	r24, 6
     f6c:	fc cf       	rjmp	.-8      	; 0xf66 <XPROGTarget_SetRxMode>
	UCSR1A |=  (1 << TXC1);
     f6e:	80 91 c8 00 	lds	r24, 0x00C8
     f72:	80 64       	ori	r24, 0x40	; 64
     f74:	80 93 c8 00 	sts	0x00C8, r24

	UCSR1B &= ~(1 << TXEN1);
     f78:	80 91 c9 00 	lds	r24, 0x00C9
     f7c:	87 7f       	andi	r24, 0xF7	; 247
     f7e:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B |=  (1 << RXEN1);
     f82:	80 91 c9 00 	lds	r24, 0x00C9
     f86:	80 61       	ori	r24, 0x10	; 16
     f88:	80 93 c9 00 	sts	0x00C9, r24

	DDRD   &= ~(1 << 3);
     f8c:	53 98       	cbi	0x0a, 3	; 10
	PORTD  &= ~(1 << 3);
     f8e:	5b 98       	cbi	0x0b, 3	; 11

	IsSending = false;
     f90:	10 92 6b 03 	sts	0x036B, r1
}
     f94:	08 95       	ret

00000f96 <XPROGTarget_ReceiveByte>:
 *  \return Received byte from the USART
 */
uint8_t XPROGTarget_ReceiveByte(void)
{
	/* Switch to Rx mode if currently in Tx mode */
	if (IsSending)
     f96:	80 91 6b 03 	lds	r24, 0x036B
     f9a:	88 23       	and	r24, r24
     f9c:	09 f0       	breq	.+2      	; 0xfa0 <XPROGTarget_ReceiveByte+0xa>
	  XPROGTarget_SetRxMode();
     f9e:	e3 df       	rcall	.-58     	; 0xf66 <XPROGTarget_SetRxMode>

	/* Wait until a byte has been received before reading */
	while (!(UCSR1A & (1 << RXC1)) && TimeoutTicksRemaining);
     fa0:	80 91 c8 00 	lds	r24, 0x00C8
     fa4:	87 fd       	sbrc	r24, 7
     fa6:	03 c0       	rjmp	.+6      	; 0xfae <XPROGTarget_ReceiveByte+0x18>
     fa8:	8a b5       	in	r24, 0x2a	; 42
     faa:	88 23       	and	r24, r24
     fac:	c9 f7       	brne	.-14     	; 0xfa0 <XPROGTarget_ReceiveByte+0xa>

	return UDR1;
     fae:	80 91 ce 00 	lds	r24, 0x00CE
}
     fb2:	08 95       	ret

00000fb4 <XPROGTarget_DisableTargetTPI>:

/** Disables the target's TPI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetTPI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	XPROGTarget_SetRxMode();
     fb4:	d8 df       	rcall	.-80     	; 0xf66 <XPROGTarget_SetRxMode>

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A |= (1 << TXC1) | (1 << RXC1);
     fb6:	e8 ec       	ldi	r30, 0xC8	; 200
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	80 6c       	ori	r24, 0xC0	; 192
     fbe:	80 83       	st	Z, r24
	UCSR1B  = 0;
     fc0:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1C  = 0;
     fc4:	10 92 ca 00 	sts	0x00CA, r1

	/* Set all USART lines as inputs, tristate */
	DDRD  &= ~((1 << 5) | (1 << 3));
     fc8:	8a b1       	in	r24, 0x0a	; 10
     fca:	87 7d       	andi	r24, 0xD7	; 215
     fcc:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
     fce:	8b b1       	in	r24, 0x0b	; 11
     fd0:	83 7d       	andi	r24, 0xD3	; 211
     fd2:	8b b9       	out	0x0b, r24	; 11
	
	/* Tristate target /RESET line */
	AUX_LINE_DDR  &= ~AUX_LINE_MASK;
     fd4:	24 98       	cbi	0x04, 4	; 4
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
     fd6:	2c 98       	cbi	0x05, 4	; 5
}
     fd8:	08 95       	ret

00000fda <XPROGTarget_DisableTargetPDI>:

/** Disables the target's PDI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetPDI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	XPROGTarget_SetRxMode();
     fda:	c5 df       	rcall	.-118    	; 0xf66 <XPROGTarget_SetRxMode>

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A  = ((1 << TXC1) | (1 << RXC1));
     fdc:	80 ec       	ldi	r24, 0xC0	; 192
     fde:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B  = 0;
     fe2:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1C  = 0;
     fe6:	10 92 ca 00 	sts	0x00CA, r1

	/* Tristate all pins */
	DDRD  &= ~((1 << 5) | (1 << 3));
     fea:	8a b1       	in	r24, 0x0a	; 10
     fec:	87 7d       	andi	r24, 0xD7	; 215
     fee:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
     ff0:	8b b1       	in	r24, 0x0b	; 11
     ff2:	83 7d       	andi	r24, 0xD3	; 211
     ff4:	8b b9       	out	0x0b, r24	; 11
}
     ff6:	08 95       	ret

00000ff8 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	00 d0       	rcall	.+0      	; 0x1002 <XMEGANVM_SendAddress+0xa>
    1002:	00 d0       	rcall	.+0      	; 0x1004 <XMEGANVM_SendAddress+0xc>
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	69 83       	std	Y+1, r22	; 0x01
    100a:	7a 83       	std	Y+2, r23	; 0x02
    100c:	8b 83       	std	Y+3, r24	; 0x03
    100e:	9c 83       	std	Y+4, r25	; 0x04
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(((uint8_t*)&AbsoluteAddress)[0]);
    1010:	8e 01       	movw	r16, r28
    1012:	0f 5f       	subi	r16, 0xFF	; 255
    1014:	1f 4f       	sbci	r17, 0xFF	; 255
    1016:	86 2f       	mov	r24, r22
    1018:	92 df       	rcall	.-220    	; 0xf3e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(((uint8_t*)&AbsoluteAddress)[1]);
    101a:	f8 01       	movw	r30, r16
    101c:	81 81       	ldd	r24, Z+1	; 0x01
    101e:	8f df       	rcall	.-226    	; 0xf3e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(((uint8_t*)&AbsoluteAddress)[2]);
    1020:	f8 01       	movw	r30, r16
    1022:	82 81       	ldd	r24, Z+2	; 0x02
    1024:	8c df       	rcall	.-232    	; 0xf3e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(((uint8_t*)&AbsoluteAddress)[3]);
    1026:	f8 01       	movw	r30, r16
    1028:	83 81       	ldd	r24, Z+3	; 0x03
    102a:	89 df       	rcall	.-238    	; 0xf3e <XPROGTarget_SendByte>
}
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	08 95       	ret

0000103e <XMEGANVM_SendNVMRegAddress>:
{
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	a0 e0       	ldi	r26, 0x00	; 0
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	20 91 3f 01 	lds	r18, 0x013F
    1048:	30 91 40 01 	lds	r19, 0x0140
    104c:	40 91 41 01 	lds	r20, 0x0141
    1050:	50 91 42 01 	lds	r21, 0x0142
    1054:	82 2b       	or	r24, r18
    1056:	93 2b       	or	r25, r19
    1058:	a4 2b       	or	r26, r20
    105a:	b5 2b       	or	r27, r21
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
}
    1060:	cb cf       	rjmp	.-106    	; 0xff8 <XMEGANVM_SendAddress>

00001062 <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  \return Boolean true if the NVM controller became ready within the timeout period, false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1062:	8b e6       	ldi	r24, 0x6B	; 107
    1064:	6c df       	rcall	.-296    	; 0xf3e <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
    1066:	8f e0       	ldi	r24, 0x0F	; 15
    1068:	ea df       	rcall	.-44     	; 0x103e <XMEGANVM_SendNVMRegAddress>

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT << 2) | PDI_DATSIZE_1BYTE);
    106a:	80 e2       	ldi	r24, 0x20	; 32
    106c:	68 df       	rcall	.-304    	; 0xf3e <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    106e:	93 df       	rcall	.-218    	; 0xf96 <XPROGTarget_ReceiveByte>
    1070:	98 2f       	mov	r25, r24

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1072:	8a b5       	in	r24, 0x2a	; 42
    1074:	88 23       	and	r24, r24
    1076:	19 f0       	breq	.+6      	; 0x107e <XMEGANVM_WaitWhileNVMControllerBusy+0x1c>
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    1078:	97 fd       	sbrc	r25, 7
    107a:	f7 cf       	rjmp	.-18     	; 0x106a <XMEGANVM_WaitWhileNVMControllerBusy+0x8>
    107c:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
	}
}
    107e:	08 95       	ret

00001080 <XMEGANVM_WritePageMemory>:
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_WritePageMemory(const uint8_t WriteBuffCommand, const uint8_t EraseBuffCommand,
                              const uint8_t WritePageCommand, const uint8_t PageMode, const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer, uint16_t WriteSize)
{
    1080:	7f 92       	push	r7
    1082:	8f 92       	push	r8
    1084:	9f 92       	push	r9
    1086:	af 92       	push	r10
    1088:	bf 92       	push	r11
    108a:	cf 92       	push	r12
    108c:	df 92       	push	r13
    108e:	ef 92       	push	r14
    1090:	ff 92       	push	r15
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	88 2e       	mov	r8, r24
    109c:	96 2e       	mov	r9, r22
    109e:	74 2e       	mov	r7, r20
    10a0:	e6 01       	movw	r28, r12
	if (PageMode & XPRG_PAGEMODE_ERASE)
    10a2:	d2 2e       	mov	r13, r18
    10a4:	20 ff       	sbrs	r18, 0
    10a6:	10 c0       	rjmp	.+32     	; 0x10c8 <XMEGANVM_WritePageMemory+0x48>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    10a8:	dc df       	rcall	.-72     	; 0x1062 <XMEGANVM_WaitWhileNVMControllerBusy>
    10aa:	88 23       	and	r24, r24
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <XMEGANVM_WritePageMemory+0x30>
    10ae:	40 c0       	rjmp	.+128    	; 0x1130 <XMEGANVM_WritePageMemory+0xb0>
		  return false;

		/* Send the memory buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    10b0:	8c e4       	ldi	r24, 0x4C	; 76
    10b2:	45 df       	rcall	.-374    	; 0xf3e <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    10b4:	8a e0       	ldi	r24, 0x0A	; 10
    10b6:	c3 df       	rcall	.-122    	; 0x103e <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseBuffCommand);
    10b8:	89 2d       	mov	r24, r9
    10ba:	41 df       	rcall	.-382    	; 0xf3e <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    10bc:	8c e4       	ldi	r24, 0x4C	; 76
    10be:	3f df       	rcall	.-386    	; 0xf3e <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    10c0:	8b e0       	ldi	r24, 0x0B	; 11
    10c2:	bd df       	rcall	.-134    	; 0x103e <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(1 << 0);
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	3b df       	rcall	.-394    	; 0xf3e <XPROGTarget_SendByte>
	}

	if (WriteSize)
    10c8:	a1 14       	cp	r10, r1
    10ca:	b1 04       	cpc	r11, r1
    10cc:	e9 f0       	breq	.+58     	; 0x1108 <XMEGANVM_WritePageMemory+0x88>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    10ce:	c9 df       	rcall	.-110    	; 0x1062 <XMEGANVM_WaitWhileNVMControllerBusy>
    10d0:	88 23       	and	r24, r24
    10d2:	71 f1       	breq	.+92     	; 0x1130 <XMEGANVM_WritePageMemory+0xb0>
		  return false;

		/* Send the memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    10d4:	8c e4       	ldi	r24, 0x4C	; 76
    10d6:	33 df       	rcall	.-410    	; 0xf3e <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    10d8:	8a e0       	ldi	r24, 0x0A	; 10
    10da:	b1 df       	rcall	.-158    	; 0x103e <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(WriteBuffCommand);
    10dc:	88 2d       	mov	r24, r8
    10de:	2f df       	rcall	.-418    	; 0xf3e <XPROGTarget_SendByte>

		/* Load the PDI pointer register with the start address we want to write to */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    10e0:	8b e6       	ldi	r24, 0x6B	; 107
    10e2:	2d df       	rcall	.-422    	; 0xf3e <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(WriteAddress);
    10e4:	c8 01       	movw	r24, r16
    10e6:	b7 01       	movw	r22, r14
    10e8:	87 df       	rcall	.-242    	; 0xff8 <XMEGANVM_SendAddress>

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    10ea:	80 ea       	ldi	r24, 0xA0	; 160
    10ec:	28 df       	rcall	.-432    	; 0xf3e <XPROGTarget_SendByte>
		XPROGTarget_SendByte(WriteSize - 1);
    10ee:	8a 2d       	mov	r24, r10
    10f0:	81 50       	subi	r24, 0x01	; 1
    10f2:	25 df       	rcall	.-438    	; 0xf3e <XPROGTarget_SendByte>

		/* Send a ST command with indirect access and post-increment to write the bytes */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    10f4:	84 e6       	ldi	r24, 0x64	; 100
    10f6:	23 df       	rcall	.-442    	; 0xf3e <XPROGTarget_SendByte>
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
    10f8:	89 91       	ld	r24, Y+
    10fa:	21 df       	rcall	.-446    	; 0xf3e <XPROGTarget_SendByte>
    10fc:	08 94       	sec
    10fe:	a1 08       	sbc	r10, r1
    1100:	b1 08       	sbc	r11, r1
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
		XPROGTarget_SendByte(WriteSize - 1);

		/* Send a ST command with indirect access and post-increment to write the bytes */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
		while (WriteSize--)
    1102:	a1 14       	cp	r10, r1
    1104:	b1 04       	cpc	r11, r1
    1106:	c1 f7       	brne	.-16     	; 0x10f8 <XMEGANVM_WritePageMemory+0x78>
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPRG_PAGEMODE_WRITE)
    1108:	d1 fe       	sbrs	r13, 1
    110a:	10 c0       	rjmp	.+32     	; 0x112c <XMEGANVM_WritePageMemory+0xac>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    110c:	aa df       	rcall	.-172    	; 0x1062 <XMEGANVM_WaitWhileNVMControllerBusy>
    110e:	88 23       	and	r24, r24
    1110:	79 f0       	breq	.+30     	; 0x1130 <XMEGANVM_WritePageMemory+0xb0>
		  return false;

		/* Send the memory write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1112:	8c e4       	ldi	r24, 0x4C	; 76
    1114:	14 df       	rcall	.-472    	; 0xf3e <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1116:	8a e0       	ldi	r24, 0x0A	; 10
    1118:	92 df       	rcall	.-220    	; 0x103e <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(WritePageCommand);
    111a:	87 2d       	mov	r24, r7
    111c:	10 df       	rcall	.-480    	; 0xf3e <XPROGTarget_SendByte>

		/* Send the address of the first page location to write the memory page */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    111e:	8c e4       	ldi	r24, 0x4C	; 76
    1120:	0e df       	rcall	.-484    	; 0xf3e <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(WriteAddress);
    1122:	c8 01       	movw	r24, r16
    1124:	b7 01       	movw	r22, r14
    1126:	68 df       	rcall	.-304    	; 0xff8 <XMEGANVM_SendAddress>
		XPROGTarget_SendByte(0x00);
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	09 df       	rcall	.-494    	; 0xf3e <XPROGTarget_SendByte>
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	01 c0       	rjmp	.+2      	; 0x1132 <XMEGANVM_WritePageMemory+0xb2>
    1130:	80 e0       	ldi	r24, 0x00	; 0
	}

	return true;
}
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	ff 90       	pop	r15
    113c:	ef 90       	pop	r14
    113e:	df 90       	pop	r13
    1140:	cf 90       	pop	r12
    1142:	bf 90       	pop	r11
    1144:	af 90       	pop	r10
    1146:	9f 90       	pop	r9
    1148:	8f 90       	pop	r8
    114a:	7f 90       	pop	r7
    114c:	08 95       	ret

0000114e <XMEGANVM_WriteByteMemory>:
 *  \param[in]  Byte          Byte to write to the target
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand, const uint32_t WriteAddress, const uint8_t Byte)
{
    114e:	cf 92       	push	r12
    1150:	df 92       	push	r13
    1152:	ef 92       	push	r14
    1154:	ff 92       	push	r15
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	d8 2e       	mov	r13, r24
    115c:	7a 01       	movw	r14, r20
    115e:	8b 01       	movw	r16, r22
    1160:	c2 2e       	mov	r12, r18
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1162:	7f df       	rcall	.-258    	; 0x1062 <XMEGANVM_WaitWhileNVMControllerBusy>
    1164:	88 23       	and	r24, r24
    1166:	71 f0       	breq	.+28     	; 0x1184 <XMEGANVM_WriteByteMemory+0x36>
	  return false;

	/* Send the memory write command to the target */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1168:	8c e4       	ldi	r24, 0x4C	; 76
    116a:	e9 de       	rcall	.-558    	; 0xf3e <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    116c:	8a e0       	ldi	r24, 0x0A	; 10
    116e:	67 df       	rcall	.-306    	; 0x103e <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(WriteCommand);
    1170:	8d 2d       	mov	r24, r13
    1172:	e5 de       	rcall	.-566    	; 0xf3e <XPROGTarget_SendByte>

	/* Send new memory byte to the memory of the target */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1174:	8c e4       	ldi	r24, 0x4C	; 76
    1176:	e3 de       	rcall	.-570    	; 0xf3e <XPROGTarget_SendByte>
	XMEGANVM_SendAddress(WriteAddress);
    1178:	c8 01       	movw	r24, r16
    117a:	b7 01       	movw	r22, r14
    117c:	3d df       	rcall	.-390    	; 0xff8 <XMEGANVM_SendAddress>
	XPROGTarget_SendByte(Byte);
    117e:	8c 2d       	mov	r24, r12
    1180:	de de       	rcall	.-580    	; 0xf3e <XPROGTarget_SendByte>
    1182:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	ff 90       	pop	r15
    118a:	ef 90       	pop	r14
    118c:	df 90       	pop	r13
    118e:	cf 90       	pop	r12
    1190:	08 95       	ret

00001192 <XMEGANVM_ReadMemory>:
 *  \param[in]  ReadSize     Number of bytes to read
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress, uint8_t* ReadBuffer, uint16_t ReadSize)
{
    1192:	cf 92       	push	r12
    1194:	df 92       	push	r13
    1196:	ef 92       	push	r14
    1198:	ff 92       	push	r15
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	7b 01       	movw	r14, r22
    11a4:	8c 01       	movw	r16, r24
    11a6:	6a 01       	movw	r12, r20
    11a8:	e9 01       	movw	r28, r18
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    11aa:	5b df       	rcall	.-330    	; 0x1062 <XMEGANVM_WaitWhileNVMControllerBusy>
    11ac:	88 23       	and	r24, r24
    11ae:	09 f1       	breq	.+66     	; 0x11f2 <XMEGANVM_ReadMemory+0x60>
	  return false;

	/* Send the READNVM command to the NVM controller for reading of an arbitrary location */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    11b0:	8c e4       	ldi	r24, 0x4C	; 76
    11b2:	c5 de       	rcall	.-630    	; 0xf3e <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    11b4:	8a e0       	ldi	r24, 0x0A	; 10
    11b6:	43 df       	rcall	.-378    	; 0x103e <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
    11b8:	83 e4       	ldi	r24, 0x43	; 67
    11ba:	c1 de       	rcall	.-638    	; 0xf3e <XPROGTarget_SendByte>

	/* Load the PDI pointer register with the start address we want to read from */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    11bc:	8b e6       	ldi	r24, 0x6B	; 107
    11be:	bf de       	rcall	.-642    	; 0xf3e <XPROGTarget_SendByte>
	XMEGANVM_SendAddress(ReadAddress);
    11c0:	c8 01       	movw	r24, r16
    11c2:	b7 01       	movw	r22, r14
    11c4:	19 df       	rcall	.-462    	; 0xff8 <XMEGANVM_SendAddress>

	/* Send the REPEAT command with the specified number of bytes to read */
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    11c6:	80 ea       	ldi	r24, 0xA0	; 160
    11c8:	ba de       	rcall	.-652    	; 0xf3e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(ReadSize - 1);
    11ca:	9e 01       	movw	r18, r28
    11cc:	21 50       	subi	r18, 0x01	; 1
    11ce:	82 2f       	mov	r24, r18
    11d0:	b6 de       	rcall	.-660    	; 0xf3e <XPROGTarget_SendByte>

	/* Send a LD command with indirect access and post-increment to read out the bytes */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    11d2:	84 e2       	ldi	r24, 0x24	; 36
    11d4:	b4 de       	rcall	.-664    	; 0xf3e <XPROGTarget_SendByte>
    11d6:	04 c0       	rjmp	.+8      	; 0x11e0 <XMEGANVM_ReadMemory+0x4e>
	while (ReadSize-- && TimeoutTicksRemaining)
	  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
    11d8:	de de       	rcall	.-580    	; 0xf96 <XPROGTarget_ReceiveByte>
    11da:	f6 01       	movw	r30, r12
    11dc:	81 93       	st	Z+, r24
    11de:	6f 01       	movw	r12, r30
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
	XPROGTarget_SendByte(ReadSize - 1);

	/* Send a LD command with indirect access and post-increment to read out the bytes */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
	while (ReadSize-- && TimeoutTicksRemaining)
    11e0:	20 97       	sbiw	r28, 0x00	; 0
    11e2:	21 f0       	breq	.+8      	; 0x11ec <XMEGANVM_ReadMemory+0x5a>
    11e4:	8a b5       	in	r24, 0x2a	; 42
    11e6:	21 97       	sbiw	r28, 0x01	; 1
    11e8:	88 23       	and	r24, r24
    11ea:	b1 f7       	brne	.-20     	; 0x11d8 <XMEGANVM_ReadMemory+0x46>
	  *(ReadBuffer++) = XPROGTarget_ReceiveByte();

	return (TimeoutTicksRemaining != 0);
    11ec:	8a b5       	in	r24, 0x2a	; 42
    11ee:	81 11       	cpse	r24, r1
    11f0:	81 e0       	ldi	r24, 0x01	; 1
}
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	1f 91       	pop	r17
    11f8:	0f 91       	pop	r16
    11fa:	ff 90       	pop	r15
    11fc:	ef 90       	pop	r14
    11fe:	df 90       	pop	r13
    1200:	cf 90       	pop	r12
    1202:	08 95       	ret

00001204 <XMEGANVM_WaitWhileNVMBusBusy>:
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS | PDI_STATUS_REG);
    1204:	80 e8       	ldi	r24, 0x80	; 128
    1206:	9b de       	rcall	.-714    	; 0xf3e <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1208:	c6 de       	rcall	.-628    	; 0xf96 <XPROGTarget_ReceiveByte>
    120a:	98 2f       	mov	r25, r24

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    120c:	8a b5       	in	r24, 0x2a	; 42
    120e:	88 23       	and	r24, r24
    1210:	19 f0       	breq	.+6      	; 0x1218 <XMEGANVM_WaitWhileNVMBusBusy+0x14>
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM)
    1212:	91 ff       	sbrs	r25, 1
    1214:	f7 cf       	rjmp	.-18     	; 0x1204 <XMEGANVM_WaitWhileNVMBusBusy>
    1216:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
	}
}
    1218:	08 95       	ret

0000121a <XMEGANVM_EraseMemory>:
 *  \param[in] Address       Address inside the memory space to erase
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand, const uint32_t Address)
{
    121a:	cf 92       	push	r12
    121c:	df 92       	push	r13
    121e:	ef 92       	push	r14
    1220:	ff 92       	push	r15
    1222:	1f 93       	push	r17
    1224:	18 2f       	mov	r17, r24
    1226:	6a 01       	movw	r12, r20
    1228:	7b 01       	movw	r14, r22
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    122a:	1b df       	rcall	.-458    	; 0x1062 <XMEGANVM_WaitWhileNVMControllerBusy>
    122c:	88 23       	and	r24, r24
    122e:	09 f4       	brne	.+2      	; 0x1232 <XMEGANVM_EraseMemory+0x18>
    1230:	5a c0       	rjmp	.+180    	; 0x12e6 <XMEGANVM_EraseMemory+0xcc>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
    1232:	10 34       	cpi	r17, 0x40	; 64
    1234:	31 f4       	brne	.+12     	; 0x1242 <XMEGANVM_EraseMemory+0x28>
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1236:	8c e4       	ldi	r24, 0x4C	; 76
    1238:	82 de       	rcall	.-764    	; 0xf3e <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    123a:	8a e0       	ldi	r24, 0x0A	; 10
    123c:	00 df       	rcall	.-512    	; 0x103e <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseCommand);
    123e:	80 e4       	ldi	r24, 0x40	; 64
    1240:	39 c0       	rjmp	.+114    	; 0x12b4 <XMEGANVM_EraseMemory+0x9a>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(1 << 0);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
    1242:	10 33       	cpi	r17, 0x30	; 48
    1244:	09 f0       	breq	.+2      	; 0x1248 <XMEGANVM_EraseMemory+0x2e>
    1246:	3d c0       	rjmp	.+122    	; 0x12c2 <XMEGANVM_EraseMemory+0xa8>
	{
		/* Send the EEPROM page buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1248:	8c e4       	ldi	r24, 0x4C	; 76
    124a:	79 de       	rcall	.-782    	; 0xf3e <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    124c:	8a e0       	ldi	r24, 0x0A	; 10
    124e:	f7 de       	rcall	.-530    	; 0x103e <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
    1250:	86 e3       	ldi	r24, 0x36	; 54
    1252:	75 de       	rcall	.-790    	; 0xf3e <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1254:	8c e4       	ldi	r24, 0x4C	; 76
    1256:	73 de       	rcall	.-794    	; 0xf3e <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1258:	8b e0       	ldi	r24, 0x0B	; 11
    125a:	f1 de       	rcall	.-542    	; 0x103e <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(1 << 0);
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	6f de       	rcall	.-802    	; 0xf3e <XPROGTarget_SendByte>

		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1260:	00 df       	rcall	.-512    	; 0x1062 <XMEGANVM_WaitWhileNVMControllerBusy>
    1262:	88 23       	and	r24, r24
    1264:	09 f4       	brne	.+2      	; 0x1268 <XMEGANVM_EraseMemory+0x4e>
    1266:	3f c0       	rjmp	.+126    	; 0x12e6 <XMEGANVM_EraseMemory+0xcc>
		  return false;

		/* Send the EEPROM memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1268:	8c e4       	ldi	r24, 0x4C	; 76
    126a:	69 de       	rcall	.-814    	; 0xf3e <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    126c:	8a e0       	ldi	r24, 0x0A	; 10
    126e:	e7 de       	rcall	.-562    	; 0x103e <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
    1270:	83 e3       	ldi	r24, 0x33	; 51
    1272:	65 de       	rcall	.-822    	; 0xf3e <XPROGTarget_SendByte>

		/* Load the PDI pointer register with the EEPROM page start address */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1274:	8b e6       	ldi	r24, 0x6B	; 107
    1276:	63 de       	rcall	.-826    	; 0xf3e <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(Address);
    1278:	c7 01       	movw	r24, r14
    127a:	b6 01       	movw	r22, r12
    127c:	bd de       	rcall	.-646    	; 0xff8 <XMEGANVM_SendAddress>

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    127e:	80 ea       	ldi	r24, 0xA0	; 160
    1280:	5e de       	rcall	.-836    	; 0xf3e <XPROGTarget_SendByte>
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
    1282:	80 91 43 01 	lds	r24, 0x0143
    1286:	81 50       	subi	r24, 0x01	; 1
    1288:	5a de       	rcall	.-844    	; 0xf3e <XPROGTarget_SendByte>

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    128a:	84 e6       	ldi	r24, 0x64	; 100
    128c:	58 de       	rcall	.-848    	; 0xf3e <XPROGTarget_SendByte>
    128e:	10 e0       	ldi	r17, 0x00	; 0
    1290:	03 c0       	rjmp	.+6      	; 0x1298 <XMEGANVM_EraseMemory+0x7e>
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
		  XPROGTarget_SendByte(0x00);
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	54 de       	rcall	.-856    	; 0xf3e <XPROGTarget_SendByte>
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
    1296:	1f 5f       	subi	r17, 0xFF	; 255
    1298:	21 2f       	mov	r18, r17
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	80 91 43 01 	lds	r24, 0x0143
    12a0:	90 91 44 01 	lds	r25, 0x0144
    12a4:	28 17       	cp	r18, r24
    12a6:	39 07       	cpc	r19, r25
    12a8:	a0 f3       	brcs	.-24     	; 0x1292 <XMEGANVM_EraseMemory+0x78>
		  XPROGTarget_SendByte(0x00);

		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    12aa:	8c e4       	ldi	r24, 0x4C	; 76
    12ac:	48 de       	rcall	.-880    	; 0xf3e <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    12ae:	8a e0       	ldi	r24, 0x0A	; 10
    12b0:	c6 de       	rcall	.-628    	; 0x103e <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseCommand);
    12b2:	80 e3       	ldi	r24, 0x30	; 48
    12b4:	44 de       	rcall	.-888    	; 0xf3e <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the EEPROM erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    12b6:	8c e4       	ldi	r24, 0x4C	; 76
    12b8:	42 de       	rcall	.-892    	; 0xf3e <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    12ba:	8b e0       	ldi	r24, 0x0B	; 11
    12bc:	c0 de       	rcall	.-640    	; 0x103e <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(1 << 0);
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	0c c0       	rjmp	.+24     	; 0x12da <XMEGANVM_EraseMemory+0xc0>
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    12c2:	8c e4       	ldi	r24, 0x4C	; 76
    12c4:	3c de       	rcall	.-904    	; 0xf3e <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    12c6:	8a e0       	ldi	r24, 0x0A	; 10
    12c8:	ba de       	rcall	.-652    	; 0x103e <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseCommand);
    12ca:	81 2f       	mov	r24, r17
    12cc:	38 de       	rcall	.-912    	; 0xf3e <XPROGTarget_SendByte>

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    12ce:	8c e4       	ldi	r24, 0x4C	; 76
    12d0:	36 de       	rcall	.-916    	; 0xf3e <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(Address);
    12d2:	c7 01       	movw	r24, r14
    12d4:	b6 01       	movw	r22, r12
    12d6:	90 de       	rcall	.-736    	; 0xff8 <XMEGANVM_SendAddress>
		XPROGTarget_SendByte(0x00);
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	31 de       	rcall	.-926    	; 0xf3e <XPROGTarget_SendByte>
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
    12dc:	93 df       	rcall	.-218    	; 0x1204 <XMEGANVM_WaitWhileNVMBusBusy>
    12de:	88 23       	and	r24, r24
    12e0:	19 f0       	breq	.+6      	; 0x12e8 <XMEGANVM_EraseMemory+0xce>
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	01 c0       	rjmp	.+2      	; 0x12e8 <XMEGANVM_EraseMemory+0xce>
    12e6:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	return true;
}
    12e8:	1f 91       	pop	r17
    12ea:	ff 90       	pop	r15
    12ec:	ef 90       	pop	r14
    12ee:	df 90       	pop	r13
    12f0:	cf 90       	pop	r12
    12f2:	08 95       	ret

000012f4 <XMEGANVM_GetMemoryCRC>:
 *  \param[out] CRCDest     CRC Destination when read from the target
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_GetMemoryCRC(const uint8_t CRCCommand, uint32_t* const CRCDest)
{
    12f4:	ef 92       	push	r14
    12f6:	ff 92       	push	r15
    12f8:	0f 93       	push	r16
    12fa:	1f 93       	push	r17
    12fc:	08 2f       	mov	r16, r24
    12fe:	f6 2e       	mov	r15, r22
    1300:	e7 2e       	mov	r14, r23
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1302:	af de       	rcall	.-674    	; 0x1062 <XMEGANVM_WaitWhileNVMControllerBusy>
    1304:	88 23       	and	r24, r24
    1306:	61 f1       	breq	.+88     	; 0x1360 <XMEGANVM_GetMemoryCRC+0x6c>
	  return false;

	/* Set the NVM command to the correct CRC read command */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1308:	8c e4       	ldi	r24, 0x4C	; 76
    130a:	19 de       	rcall	.-974    	; 0xf3e <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    130c:	8a e0       	ldi	r24, 0x0A	; 10
    130e:	97 de       	rcall	.-722    	; 0x103e <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(CRCCommand);
    1310:	80 2f       	mov	r24, r16
    1312:	15 de       	rcall	.-982    	; 0xf3e <XPROGTarget_SendByte>

	/* Set CMDEX bit in NVM CTRLA register to start the CRC generation */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1314:	8c e4       	ldi	r24, 0x4C	; 76
    1316:	13 de       	rcall	.-986    	; 0xf3e <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1318:	8b e0       	ldi	r24, 0x0B	; 11
    131a:	91 de       	rcall	.-734    	; 0x103e <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(1 << 0);
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	0f de       	rcall	.-994    	; 0xf3e <XPROGTarget_SendByte>

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
    1320:	71 df       	rcall	.-286    	; 0x1204 <XMEGANVM_WaitWhileNVMBusBusy>
    1322:	88 23       	and	r24, r24
    1324:	e9 f0       	breq	.+58     	; 0x1360 <XMEGANVM_GetMemoryCRC+0x6c>
	  return false;

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1326:	9d de       	rcall	.-710    	; 0x1062 <XMEGANVM_WaitWhileNVMControllerBusy>
    1328:	88 23       	and	r24, r24
    132a:	d1 f0       	breq	.+52     	; 0x1360 <XMEGANVM_GetMemoryCRC+0x6c>
	  return false;

	/* Load the PDI pointer register with the DAT0 register start address */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    132c:	8b e6       	ldi	r24, 0x6B	; 107
    132e:	07 de       	rcall	.-1010   	; 0xf3e <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_DAT0);
    1330:	84 e0       	ldi	r24, 0x04	; 4
    1332:	85 de       	rcall	.-758    	; 0x103e <XMEGANVM_SendNVMRegAddress>

	/* Send the REPEAT command to grab the CRC bytes */
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    1334:	80 ea       	ldi	r24, 0xA0	; 160
    1336:	03 de       	rcall	.-1018   	; 0xf3e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(XMEGA_CRC_LENGTH - 1);
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	01 de       	rcall	.-1022   	; 0xf3e <XPROGTarget_SendByte>

	/* Read in the CRC bytes from the target */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    133c:	84 e2       	ldi	r24, 0x24	; 36
    133e:	ff dd       	rcall	.-1026   	; 0xf3e <XPROGTarget_SendByte>
	for (uint8_t i = 0; i < XMEGA_CRC_LENGTH; i++)
	  ((uint8_t*)CRCDest)[i] = XPROGTarget_ReceiveByte();
    1340:	0f 2d       	mov	r16, r15
    1342:	1e 2d       	mov	r17, r14
    1344:	28 de       	rcall	.-944    	; 0xf96 <XPROGTarget_ReceiveByte>
    1346:	f8 01       	movw	r30, r16
    1348:	80 83       	st	Z, r24
    134a:	25 de       	rcall	.-950    	; 0xf96 <XPROGTarget_ReceiveByte>
    134c:	f8 01       	movw	r30, r16
    134e:	81 83       	std	Z+1, r24	; 0x01
    1350:	22 de       	rcall	.-956    	; 0xf96 <XPROGTarget_ReceiveByte>
    1352:	f8 01       	movw	r30, r16
    1354:	82 83       	std	Z+2, r24	; 0x02

	return (TimeoutTicksRemaining != 0);
    1356:	8a b5       	in	r24, 0x2a	; 42
    1358:	88 23       	and	r24, r24
    135a:	19 f0       	breq	.+6      	; 0x1362 <XMEGANVM_GetMemoryCRC+0x6e>
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <XMEGANVM_GetMemoryCRC+0x6e>
    1360:	80 e0       	ldi	r24, 0x00	; 0
}
    1362:	1f 91       	pop	r17
    1364:	0f 91       	pop	r16
    1366:	ff 90       	pop	r15
    1368:	ef 90       	pop	r14
    136a:	08 95       	ret

0000136c <XMEGANVM_DisablePDI>:
}

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
	XMEGANVM_WaitWhileNVMBusBusy();
    136c:	4b df       	rcall	.-362    	; 0x1204 <XMEGANVM_WaitWhileNVMBusBusy>

	/* Clear the RESET key in the RESET PDI register to allow the XMEGA to run */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    136e:	81 ec       	ldi	r24, 0xC1	; 193
    1370:	e6 dd       	rcall	.-1076   	; 0xf3e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x00);
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	e4 dd       	rcall	.-1080   	; 0xf3e <XPROGTarget_SendByte>

	/* Do it twice to make sure it takes effect (silicon bug?) */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    1376:	81 ec       	ldi	r24, 0xC1	; 193
    1378:	e2 dd       	rcall	.-1084   	; 0xf3e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x00);
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	e0 dd       	rcall	.-1088   	; 0xf3e <XPROGTarget_SendByte>

	XPROGTarget_DisableTargetPDI();
}
    137e:	2d ce       	rjmp	.-934    	; 0xfda <XPROGTarget_DisableTargetPDI>

00001380 <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the PDI interface was enabled successfully, false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
    1380:	ef 92       	push	r14
    1382:	ff 92       	push	r15
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	28 97       	sbiw	r28, 0x08	; 8
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	cd bf       	out	0x3d, r28	; 61
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
    139c:	b8 dd       	rcall	.-1168   	; 0xf0e <XPROGTarget_EnableTargetPDI>

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    139e:	81 ec       	ldi	r24, 0xC1	; 193
    13a0:	ce dd       	rcall	.-1124   	; 0xf3e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(PDI_RESET_KEY);
    13a2:	89 e5       	ldi	r24, 0x59	; 89
    13a4:	cc dd       	rcall	.-1128   	; 0xf3e <XPROGTarget_SendByte>

	/* Lower direction change guard time to 0 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_CTRL_REG);
    13a6:	82 ec       	ldi	r24, 0xC2	; 194
    13a8:	ca dd       	rcall	.-1132   	; 0xf3e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x07);
    13aa:	87 e0       	ldi	r24, 0x07	; 7
    13ac:	c8 dd       	rcall	.-1136   	; 0xf3e <XPROGTarget_SendByte>

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
    13ae:	80 ee       	ldi	r24, 0xE0	; 224
    13b0:	c6 dd       	rcall	.-1140   	; 0xf3e <XPROGTarget_SendByte>
    13b2:	8e 01       	movw	r16, r28
    13b4:	08 5f       	subi	r16, 0xF8	; 248
    13b6:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
    13b8:	7e 01       	movw	r14, r28
    13ba:	08 94       	sec
    13bc:	e1 1c       	adc	r14, r1
    13be:	f1 1c       	adc	r15, r1
    13c0:	d7 01       	movw	r26, r14
    13c2:	e7 e4       	ldi	r30, 0x47	; 71
    13c4:	f1 e0       	ldi	r31, 0x01	; 1
    13c6:	88 e0       	ldi	r24, 0x08	; 8
    13c8:	01 90       	ld	r0, Z+
    13ca:	0d 92       	st	X+, r0
    13cc:	81 50       	subi	r24, 0x01	; 1
    13ce:	e1 f7       	brne	.-8      	; 0x13c8 <XMEGANVM_EnablePDI+0x48>
    13d0:	f8 01       	movw	r30, r16
    13d2:	80 81       	ld	r24, Z
    13d4:	b4 dd       	rcall	.-1176   	; 0xf3e <XPROGTarget_SendByte>
    13d6:	01 50       	subi	r16, 0x01	; 1
    13d8:	10 40       	sbci	r17, 0x00	; 0
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_CTRL_REG);
	XPROGTarget_SendByte(0x07);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
    13da:	0c 17       	cp	r16, r28
    13dc:	1d 07       	cpc	r17, r29
    13de:	81 f7       	brne	.-32     	; 0x13c0 <XMEGANVM_EnablePDI+0x40>
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
    13e0:	11 df       	rcall	.-478    	; 0x1204 <XMEGANVM_WaitWhileNVMBusBusy>
}
    13e2:	28 96       	adiw	r28, 0x08	; 8
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	1f 91       	pop	r17
    13f4:	0f 91       	pop	r16
    13f6:	ff 90       	pop	r15
    13f8:	ef 90       	pop	r14
    13fa:	08 95       	ret

000013fc <TINYNVM_SendWriteNVMRegister>:
/** Sends a SOUT command to the target with the specified I/O address, ready for the data byte to be read.
 *
 *  \param[in] Address  6-bit I/O address to read from in the target's I/O memory space
 */
static void TINYNVM_SendWriteNVMRegister(const uint8_t Address)
{
    13fc:	28 2f       	mov	r18, r24
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once */
	XPROGTarget_SendByte(TPI_CMD_SOUT | ((Address & 0x30) << 1) | (Address & 0x0F));
    13fe:	8f 70       	andi	r24, 0x0F	; 15
    1400:	80 69       	ori	r24, 0x90	; 144
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	20 73       	andi	r18, 0x30	; 48
    1406:	30 70       	andi	r19, 0x00	; 0
    1408:	22 0f       	add	r18, r18
    140a:	33 1f       	adc	r19, r19
    140c:	82 2b       	or	r24, r18
}
    140e:	97 cd       	rjmp	.-1234   	; 0xf3e <XPROGTarget_SendByte>

00001410 <TINYNVM_SendPointerAddress>:

#if defined(ENABLE_XPROG_PROTOCOL) || defined(__DOXYGEN__)

/** Sends the given pointer address to the target's TPI pointer register */
static void TINYNVM_SendPointerAddress(const uint16_t AbsoluteAddress)
{
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	00 d0       	rcall	.+0      	; 0x1416 <TINYNVM_SendPointerAddress+0x6>
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	9a 83       	std	Y+2, r25	; 0x02
    141c:	89 83       	std	Y+1, r24	; 0x01
	/* Send the given 16-bit address to the target, LSB first */
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 0);
    141e:	88 e6       	ldi	r24, 0x68	; 104
    1420:	8e dd       	rcall	.-1252   	; 0xf3e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(((uint8_t*)&AbsoluteAddress)[0]);
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	8c dd       	rcall	.-1256   	; 0xf3e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 1);
    1426:	89 e6       	ldi	r24, 0x69	; 105
    1428:	8a dd       	rcall	.-1260   	; 0xf3e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(((uint8_t*)&AbsoluteAddress)[1]);
    142a:	fe 01       	movw	r30, r28
    142c:	31 96       	adiw	r30, 0x01	; 1
    142e:	81 81       	ldd	r24, Z+1	; 0x01
    1430:	86 dd       	rcall	.-1268   	; 0xf3e <XPROGTarget_SendByte>
}
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <TINYNVM_WaitWhileNVMControllerBusy>:
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the SIN command to read the TPI STATUS register to see the NVM bus is busy */
		TINYNVM_SendReadNVMRegister(XPROG_Param_NVMCSRRegAddr);
    143c:	20 91 46 01 	lds	r18, 0x0146
 */
static void TINYNVM_SendReadNVMRegister(const uint8_t Address)
{
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once */
	XPROGTarget_SendByte(TPI_CMD_SIN | ((Address & 0x30) << 1) | (Address & 0x0F));
    1440:	82 2f       	mov	r24, r18
    1442:	8f 70       	andi	r24, 0x0F	; 15
    1444:	80 61       	ori	r24, 0x10	; 16
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	20 73       	andi	r18, 0x30	; 48
    144a:	30 70       	andi	r19, 0x00	; 0
    144c:	22 0f       	add	r18, r18
    144e:	33 1f       	adc	r19, r19
    1450:	82 2b       	or	r24, r18
    1452:	75 dd       	rcall	.-1302   	; 0xf3e <XPROGTarget_SendByte>
	for (;;)
	{
		/* Send the SIN command to read the TPI STATUS register to see the NVM bus is busy */
		TINYNVM_SendReadNVMRegister(XPROG_Param_NVMCSRRegAddr);

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1454:	a0 dd       	rcall	.-1216   	; 0xf96 <XPROGTarget_ReceiveByte>
    1456:	98 2f       	mov	r25, r24

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1458:	8a b5       	in	r24, 0x2a	; 42
    145a:	88 23       	and	r24, r24
    145c:	19 f0       	breq	.+6      	; 0x1464 <TINYNVM_WaitWhileNVMControllerBusy+0x28>
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    145e:	97 fd       	sbrc	r25, 7
    1460:	ed cf       	rjmp	.-38     	; 0x143c <TINYNVM_WaitWhileNVMControllerBusy>
    1462:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
	}
}
    1464:	08 95       	ret

00001466 <TINYNVM_EraseMemory>:
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_EraseMemory(const uint8_t EraseCommand,
                         const uint16_t Address)
{
    1466:	1f 93       	push	r17
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	18 2f       	mov	r17, r24
    146e:	eb 01       	movw	r28, r22
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1470:	e5 df       	rcall	.-54     	; 0x143c <TINYNVM_WaitWhileNVMControllerBusy>
    1472:	88 23       	and	r24, r24
    1474:	79 f0       	breq	.+30     	; 0x1494 <TINYNVM_EraseMemory+0x2e>
	  return false;

	/* Set the NVM control register to the target memory erase command */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1476:	80 91 45 01 	lds	r24, 0x0145
    147a:	c0 df       	rcall	.-128    	; 0x13fc <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(EraseCommand);
    147c:	81 2f       	mov	r24, r17
    147e:	5f dd       	rcall	.-1346   	; 0xf3e <XPROGTarget_SendByte>

	/* Write to a high byte location within the target address space to start the erase process */
	TINYNVM_SendPointerAddress(Address | 0x0001);
    1480:	ce 01       	movw	r24, r28
    1482:	81 60       	ori	r24, 0x01	; 1
    1484:	c5 df       	rcall	.-118    	; 0x1410 <TINYNVM_SendPointerAddress>
	XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT);
    1486:	80 e6       	ldi	r24, 0x60	; 96
    1488:	5a dd       	rcall	.-1356   	; 0xf3e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x00);
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	58 dd       	rcall	.-1360   	; 0xf3e <XPROGTarget_SendByte>

	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    148e:	d6 df       	rcall	.-84     	; 0x143c <TINYNVM_WaitWhileNVMControllerBusy>
    1490:	81 11       	cpse	r24, r1
    1492:	81 e0       	ldi	r24, 0x01	; 1
	  return false;

	return true;
}
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	1f 91       	pop	r17
    149a:	08 95       	ret

0000149c <TINYNVM_WriteMemory>:
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_WriteMemory(const uint16_t WriteAddress,
                         uint8_t* WriteBuffer,
                         uint16_t WriteLength)
{
    149c:	ef 92       	push	r14
    149e:	ff 92       	push	r15
    14a0:	0f 93       	push	r16
    14a2:	1f 93       	push	r17
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	7c 01       	movw	r14, r24
    14aa:	8b 01       	movw	r16, r22
    14ac:	ea 01       	movw	r28, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    14ae:	c6 df       	rcall	.-116    	; 0x143c <TINYNVM_WaitWhileNVMControllerBusy>
    14b0:	88 23       	and	r24, r24
    14b2:	21 f1       	breq	.+72     	; 0x14fc <TINYNVM_WriteMemory+0x60>
	  return false;

	/* Must have an integer number of words to write - if extra byte, word-align via a dummy high byte */
	if (WriteLength & 0x01)
    14b4:	c0 ff       	sbrs	r28, 0
    14b6:	06 c0       	rjmp	.+12     	; 0x14c4 <TINYNVM_WriteMemory+0x28>
	  WriteBuffer[WriteLength++] = 0xFF;
    14b8:	f8 01       	movw	r30, r16
    14ba:	ec 0f       	add	r30, r28
    14bc:	fd 1f       	adc	r31, r29
    14be:	8f ef       	ldi	r24, 0xFF	; 255
    14c0:	80 83       	st	Z, r24
    14c2:	21 96       	adiw	r28, 0x01	; 1

	/* Set the NVM control register to the WORD WRITE command for memory reading */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    14c4:	80 91 45 01 	lds	r24, 0x0145
    14c8:	99 df       	rcall	.-206    	; 0x13fc <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(TINY_NVM_CMD_WORDWRITE);
    14ca:	8d e1       	ldi	r24, 0x1D	; 29
    14cc:	38 dd       	rcall	.-1424   	; 0xf3e <XPROGTarget_SendByte>

	/* Send the address of the location to write to */
	TINYNVM_SendPointerAddress(WriteAddress);
    14ce:	c7 01       	movw	r24, r14
    14d0:	9f df       	rcall	.-194    	; 0x1410 <TINYNVM_SendPointerAddress>
    14d2:	10 c0       	rjmp	.+32     	; 0x14f4 <TINYNVM_WriteMemory+0x58>

	while (WriteLength)
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    14d4:	b3 df       	rcall	.-154    	; 0x143c <TINYNVM_WaitWhileNVMControllerBusy>
    14d6:	88 23       	and	r24, r24
    14d8:	89 f0       	breq	.+34     	; 0x14fc <TINYNVM_WriteMemory+0x60>
		  return false;

		/* Write the low byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
    14da:	84 e6       	ldi	r24, 0x64	; 100
    14dc:	30 dd       	rcall	.-1440   	; 0xf3e <XPROGTarget_SendByte>
		XPROGTarget_SendByte(*(WriteBuffer++));
    14de:	f8 01       	movw	r30, r16
    14e0:	80 81       	ld	r24, Z
    14e2:	2d dd       	rcall	.-1446   	; 0xf3e <XPROGTarget_SendByte>

		/* Write the high byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
    14e4:	84 e6       	ldi	r24, 0x64	; 100
    14e6:	2b dd       	rcall	.-1450   	; 0xf3e <XPROGTarget_SendByte>
		XPROGTarget_SendByte(*(WriteBuffer++));
    14e8:	f8 01       	movw	r30, r16
    14ea:	81 81       	ldd	r24, Z+1	; 0x01
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_WriteMemory(const uint16_t WriteAddress,
                         uint8_t* WriteBuffer,
                         uint16_t WriteLength)
{
    14ec:	0e 5f       	subi	r16, 0xFE	; 254
    14ee:	1f 4f       	sbci	r17, 0xFF	; 255
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
		XPROGTarget_SendByte(*(WriteBuffer++));

		/* Write the high byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
		XPROGTarget_SendByte(*(WriteBuffer++));
    14f0:	26 dd       	rcall	.-1460   	; 0xf3e <XPROGTarget_SendByte>

		/* Need to decrement the write length twice, since we read out a whole word */
		WriteLength -= 2;
    14f2:	22 97       	sbiw	r28, 0x02	; 2
	XPROGTarget_SendByte(TINY_NVM_CMD_WORDWRITE);

	/* Send the address of the location to write to */
	TINYNVM_SendPointerAddress(WriteAddress);

	while (WriteLength)
    14f4:	20 97       	sbiw	r28, 0x00	; 0
    14f6:	71 f7       	brne	.-36     	; 0x14d4 <TINYNVM_WriteMemory+0x38>
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	01 c0       	rjmp	.+2      	; 0x14fe <TINYNVM_WriteMemory+0x62>
    14fc:	80 e0       	ldi	r24, 0x00	; 0
		/* Need to decrement the write length twice, since we read out a whole word */
		WriteLength -= 2;
	}

	return true;
}
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	1f 91       	pop	r17
    1504:	0f 91       	pop	r16
    1506:	ff 90       	pop	r15
    1508:	ef 90       	pop	r14
    150a:	08 95       	ret

0000150c <TINYNVM_ReadMemory>:
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_ReadMemory(const uint16_t ReadAddress,
                        uint8_t* ReadBuffer,
                        uint16_t ReadSize)
{
    150c:	ef 92       	push	r14
    150e:	ff 92       	push	r15
    1510:	0f 93       	push	r16
    1512:	1f 93       	push	r17
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	8c 01       	movw	r16, r24
    151a:	7b 01       	movw	r14, r22
    151c:	ea 01       	movw	r28, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    151e:	8e df       	rcall	.-228    	; 0x143c <TINYNVM_WaitWhileNVMControllerBusy>
    1520:	88 23       	and	r24, r24
    1522:	b9 f0       	breq	.+46     	; 0x1552 <TINYNVM_ReadMemory+0x46>
	  return false;

	/* Set the NVM control register to the NO OP command for memory reading */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1524:	80 91 45 01 	lds	r24, 0x0145
    1528:	69 df       	rcall	.-302    	; 0x13fc <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(TINY_NVM_CMD_NOOP);
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	08 dd       	rcall	.-1520   	; 0xf3e <XPROGTarget_SendByte>

	/* Send the address of the location to read from */
	TINYNVM_SendPointerAddress(ReadAddress);
    152e:	c8 01       	movw	r24, r16
    1530:	6f df       	rcall	.-290    	; 0x1410 <TINYNVM_SendPointerAddress>
    1532:	06 c0       	rjmp	.+12     	; 0x1540 <TINYNVM_ReadMemory+0x34>

	while (ReadSize-- && TimeoutTicksRemaining)
	{
		/* Read the byte of data from the target */
		XPROGTarget_SendByte(TPI_CMD_SLD | TPI_POINTER_INDIRECT_PI);
    1534:	84 e2       	ldi	r24, 0x24	; 36
    1536:	03 dd       	rcall	.-1530   	; 0xf3e <XPROGTarget_SendByte>
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
    1538:	2e dd       	rcall	.-1444   	; 0xf96 <XPROGTarget_ReceiveByte>
    153a:	f7 01       	movw	r30, r14
    153c:	81 93       	st	Z+, r24
    153e:	7f 01       	movw	r14, r30
	XPROGTarget_SendByte(TINY_NVM_CMD_NOOP);

	/* Send the address of the location to read from */
	TINYNVM_SendPointerAddress(ReadAddress);

	while (ReadSize-- && TimeoutTicksRemaining)
    1540:	20 97       	sbiw	r28, 0x00	; 0
    1542:	21 f0       	breq	.+8      	; 0x154c <TINYNVM_ReadMemory+0x40>
    1544:	8a b5       	in	r24, 0x2a	; 42
    1546:	21 97       	sbiw	r28, 0x01	; 1
    1548:	88 23       	and	r24, r24
    154a:	a1 f7       	brne	.-24     	; 0x1534 <TINYNVM_ReadMemory+0x28>
		/* Read the byte of data from the target */
		XPROGTarget_SendByte(TPI_CMD_SLD | TPI_POINTER_INDIRECT_PI);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining != 0);
    154c:	8a b5       	in	r24, 0x2a	; 42
    154e:	81 11       	cpse	r24, r1
    1550:	81 e0       	ldi	r24, 0x01	; 1
}
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	ff 90       	pop	r15
    155c:	ef 90       	pop	r14
    155e:	08 95       	ret

00001560 <TINYNVM_WaitWhileNVMBusBusy>:
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the SLDCS command to read the TPI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(TPI_CMD_SLDCS | TPI_STATUS_REG);
    1560:	80 e8       	ldi	r24, 0x80	; 128
    1562:	ed dc       	rcall	.-1574   	; 0xf3e <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1564:	18 dd       	rcall	.-1488   	; 0xf96 <XPROGTarget_ReceiveByte>
    1566:	98 2f       	mov	r25, r24

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1568:	8a b5       	in	r24, 0x2a	; 42
    156a:	88 23       	and	r24, r24
    156c:	19 f0       	breq	.+6      	; 0x1574 <TINYNVM_WaitWhileNVMBusBusy+0x14>
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & TPI_STATUS_NVM)
    156e:	91 ff       	sbrs	r25, 1
    1570:	f7 cf       	rjmp	.-18     	; 0x1560 <TINYNVM_WaitWhileNVMBusBusy>
    1572:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
	}
}
    1574:	08 95       	ret

00001576 <TINYNVM_DisableTPI>:
}

/** Removes access to the target's NVM controller and physically disables the target's physical TPI interface. */
void TINYNVM_DisableTPI(void)
{
	TINYNVM_WaitWhileNVMBusBusy();
    1576:	f4 df       	rcall	.-24     	; 0x1560 <TINYNVM_WaitWhileNVMBusBusy>

	/* Clear the NVMEN bit in the TPI STATUS register to disable TPI mode */
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_STATUS_REG);
    1578:	80 ec       	ldi	r24, 0xC0	; 192
    157a:	e1 dc       	rcall	.-1598   	; 0xf3e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x00);
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	df dc       	rcall	.-1602   	; 0xf3e <XPROGTarget_SendByte>

	XPROGTarget_DisableTargetTPI();
}
    1580:	19 cd       	rjmp	.-1486   	; 0xfb4 <XPROGTarget_DisableTargetTPI>

00001582 <TINYNVM_EnableTPI>:
/** Enables the physical TPI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the TPI interface was enabled successfully, false otherwise
 */
bool TINYNVM_EnableTPI(void)
{
    1582:	ef 92       	push	r14
    1584:	ff 92       	push	r15
    1586:	0f 93       	push	r16
    1588:	1f 93       	push	r17
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	28 97       	sbiw	r28, 0x08	; 8
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	f8 94       	cli
    1598:	de bf       	out	0x3e, r29	; 62
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	cd bf       	out	0x3d, r28	; 61
	/* Enable TPI programming mode with the attached target */
	XPROGTarget_EnableTargetTPI();
    159e:	9e dc       	rcall	.-1732   	; 0xedc <XPROGTarget_EnableTargetTPI>

	/* Lower direction change guard time to 0 USART bits */
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_CTRL_REG);
    15a0:	82 ec       	ldi	r24, 0xC2	; 194
    15a2:	cd dc       	rcall	.-1638   	; 0xf3e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x07);
    15a4:	87 e0       	ldi	r24, 0x07	; 7
    15a6:	cb dc       	rcall	.-1642   	; 0xf3e <XPROGTarget_SendByte>

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
    15a8:	80 ee       	ldi	r24, 0xE0	; 224
    15aa:	c9 dc       	rcall	.-1646   	; 0xf3e <XPROGTarget_SendByte>
    15ac:	8e 01       	movw	r16, r28
    15ae:	08 5f       	subi	r16, 0xF8	; 248
    15b0:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);
    15b2:	7e 01       	movw	r14, r28
    15b4:	08 94       	sec
    15b6:	e1 1c       	adc	r14, r1
    15b8:	f1 1c       	adc	r15, r1
    15ba:	d7 01       	movw	r26, r14
    15bc:	ef e4       	ldi	r30, 0x4F	; 79
    15be:	f1 e0       	ldi	r31, 0x01	; 1
    15c0:	88 e0       	ldi	r24, 0x08	; 8
    15c2:	01 90       	ld	r0, Z+
    15c4:	0d 92       	st	X+, r0
    15c6:	81 50       	subi	r24, 0x01	; 1
    15c8:	e1 f7       	brne	.-8      	; 0x15c2 <TINYNVM_EnableTPI+0x40>
    15ca:	f8 01       	movw	r30, r16
    15cc:	80 81       	ld	r24, Z
    15ce:	b7 dc       	rcall	.-1682   	; 0xf3e <XPROGTarget_SendByte>
    15d0:	01 50       	subi	r16, 0x01	; 1
    15d2:	10 40       	sbci	r17, 0x00	; 0
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_CTRL_REG);
	XPROGTarget_SendByte(0x07);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
    15d4:	0c 17       	cp	r16, r28
    15d6:	1d 07       	cpc	r17, r29
    15d8:	81 f7       	brne	.-32     	; 0x15ba <TINYNVM_EnableTPI+0x38>
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return TINYNVM_WaitWhileNVMBusBusy();
    15da:	c2 df       	rcall	.-124    	; 0x1560 <TINYNVM_WaitWhileNVMBusBusy>
}
    15dc:	28 96       	adiw	r28, 0x08	; 8
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	de bf       	out	0x3e, r29	; 62
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	cd bf       	out	0x3d, r28	; 61
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	1f 91       	pop	r17
    15ee:	0f 91       	pop	r16
    15f0:	ff 90       	pop	r15
    15f2:	ef 90       	pop	r14
    15f4:	08 95       	ret

000015f6 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    15f6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    15fa:	80 91 eb 00 	lds	r24, 0x00EB
    15fe:	81 60       	ori	r24, 0x01	; 1
    1600:	80 93 eb 00 	sts	0x00EB, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    1604:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
    1608:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    160c:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1610:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
    1614:	88 1f       	adc	r24, r24
    1616:	88 27       	eor	r24, r24
    1618:	88 1f       	adc	r24, r24
    161a:	08 95       	ret

0000161c <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    161c:	80 91 6e 03 	lds	r24, 0x036E
    1620:	88 23       	and	r24, r24
    1622:	8c f4       	brge	.+34     	; 0x1646 <Endpoint_ClearStatusStage+0x2a>
    1624:	03 c0       	rjmp	.+6      	; 0x162c <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1626:	8e b3       	in	r24, 0x1e	; 30
    1628:	88 23       	and	r24, r24
    162a:	b1 f0       	breq	.+44     	; 0x1658 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    162c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1630:	82 ff       	sbrs	r24, 2
    1632:	f9 cf       	rjmp	.-14     	; 0x1626 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1634:	80 91 e8 00 	lds	r24, 0x00E8
    1638:	8b 77       	andi	r24, 0x7B	; 123
    163a:	80 93 e8 00 	sts	0x00E8, r24
    163e:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1640:	8e b3       	in	r24, 0x1e	; 30
    1642:	88 23       	and	r24, r24
    1644:	49 f0       	breq	.+18     	; 0x1658 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1646:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    164a:	80 ff       	sbrs	r24, 0
    164c:	f9 cf       	rjmp	.-14     	; 0x1640 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    164e:	80 91 e8 00 	lds	r24, 0x00E8
    1652:	8e 77       	andi	r24, 0x7E	; 126
    1654:	80 93 e8 00 	sts	0x00E8, r24
    1658:	08 95       	ret

0000165a <Endpoint_WaitUntilReady>:
			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is active (i.e. enumerated to a host)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    165a:	40 91 e4 00 	lds	r20, 0x00E4
    165e:	50 91 e5 00 	lds	r21, 0x00E5
    1662:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
    1664:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    1668:	80 ff       	sbrs	r24, 0
    166a:	05 c0       	rjmp	.+10     	; 0x1676 <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    166c:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
    1670:	80 ff       	sbrs	r24, 0
    1672:	05 c0       	rjmp	.+10     	; 0x167e <Endpoint_WaitUntilReady+0x24>
    1674:	21 c0       	rjmp	.+66     	; 0x16b8 <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1676:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    167a:	82 fd       	sbrc	r24, 2
    167c:	1d c0       	rjmp	.+58     	; 0x16b8 <Endpoint_WaitUntilReady+0x5e>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    167e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1680:	88 23       	and	r24, r24
    1682:	11 f4       	brne	.+4      	; 0x1688 <Endpoint_WaitUntilReady+0x2e>
    1684:	82 e0       	ldi	r24, 0x02	; 2
    1686:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1688:	85 30       	cpi	r24, 0x05	; 5
    168a:	11 f4       	brne	.+4      	; 0x1690 <Endpoint_WaitUntilReady+0x36>
    168c:	83 e0       	ldi	r24, 0x03	; 3
    168e:	08 95       	ret
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1690:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1694:	85 ff       	sbrs	r24, 5
    1696:	02 c0       	rjmp	.+4      	; 0x169c <Endpoint_WaitUntilReady+0x42>
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	08 95       	ret
    169c:	80 91 e4 00 	lds	r24, 0x00E4
    16a0:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    16a4:	84 17       	cp	r24, r20
    16a6:	95 07       	cpc	r25, r21
    16a8:	e9 f2       	breq	.-70     	; 0x1664 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    16aa:	22 23       	and	r18, r18
    16ac:	11 f4       	brne	.+4      	; 0x16b2 <Endpoint_WaitUntilReady+0x58>
    16ae:	84 e0       	ldi	r24, 0x04	; 4
    16b0:	08 95       	ret
    16b2:	21 50       	subi	r18, 0x01	; 1
    16b4:	ac 01       	movw	r20, r24
    16b6:	d6 cf       	rjmp	.-84     	; 0x1664 <Endpoint_WaitUntilReady+0xa>
    16b8:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    16ba:	08 95       	ret

000016bc <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    16bc:	50 d0       	rcall	.+160    	; 0x175e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    16be:	57 d0       	rcall	.+174    	; 0x176e <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
    16c0:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
    16c4:	98 2f       	mov	r25, r24
    16c6:	9f 77       	andi	r25, 0x7F	; 127
    16c8:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
    16cc:	80 68       	ori	r24, 0x80	; 128
    16ce:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
    16d2:	8c e0       	ldi	r24, 0x0C	; 12
    16d4:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
    16d6:	89 b5       	in	r24, 0x29	; 41
    16d8:	82 60       	ori	r24, 0x02	; 2
    16da:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    16dc:	09 b4       	in	r0, 0x29	; 41
    16de:	00 fe       	sbrs	r0, 0
    16e0:	fd cf       	rjmp	.-6      	; 0x16dc <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    16e2:	80 91 d8 00 	lds	r24, 0x00D8
    16e6:	8f 7d       	andi	r24, 0xDF	; 223
    16e8:	80 93 d8 00 	sts	0x00D8, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    16ec:	80 91 d7 00 	lds	r24, 0x00D7
    16f0:	80 68       	ori	r24, 0x80	; 128
    16f2:	80 93 d7 00 	sts	0x00D7, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
    16f6:	1e ba       	out	0x1e, r1	; 30
	USB_ConfigurationNumber  = 0;
    16f8:	10 92 6c 03 	sts	0x036C, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    16fc:	80 91 e0 00 	lds	r24, 0x00E0
    1700:	8b 7f       	andi	r24, 0xFB	; 251
    1702:	80 93 e0 00 	sts	0x00E0, r24
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  USB_Device_SetLowSpeed();
	else
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUS);
    1706:	80 91 d8 00 	lds	r24, 0x00D8
    170a:	81 60       	ori	r24, 0x01	; 1
    170c:	80 93 d8 00 	sts	0x00D8, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	42 e0       	ldi	r20, 0x02	; 2
    1716:	6f df       	rcall	.-290    	; 0x15f6 <Endpoint_ConfigureEndpoint_Prv>

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
							   ENDPOINT_BANK_SINGLE);

	USB_INT_Clear(USB_INT_SUSPI);
    1718:	80 91 e1 00 	lds	r24, 0x00E1
    171c:	8e 7f       	andi	r24, 0xFE	; 254
    171e:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPI);
    1722:	80 91 e2 00 	lds	r24, 0x00E2
    1726:	81 60       	ori	r24, 0x01	; 1
    1728:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Enable(USB_INT_EORSTI);
    172c:	80 91 e2 00 	lds	r24, 0x00E2
    1730:	88 60       	ori	r24, 0x08	; 8
    1732:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1736:	80 91 e0 00 	lds	r24, 0x00E0
    173a:	8e 7f       	andi	r24, 0xFE	; 254
    173c:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    1740:	80 91 d8 00 	lds	r24, 0x00D8
    1744:	80 61       	ori	r24, 0x10	; 16
    1746:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    174a:	08 95       	ret

0000174c <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    174c:	e7 ed       	ldi	r30, 0xD7	; 215
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	81 60       	ori	r24, 0x01	; 1
    1754:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	80 93 6d 03 	sts	0x036D, r24

	USB_ResetInterface();
}
    175c:	af cf       	rjmp	.-162    	; 0x16bc <USB_ResetInterface>

0000175e <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    175e:	e8 ed       	ldi	r30, 0xD8	; 216
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	8c 7f       	andi	r24, 0xFC	; 252
    1766:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1768:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    176c:	08 95       	ret

0000176e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
    176e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
    1772:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    1776:	08 95       	ret

00001778 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1778:	1f 92       	push	r1
    177a:	0f 92       	push	r0
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	0f 92       	push	r0
    1780:	0b b6       	in	r0, 0x3b	; 59
    1782:	0f 92       	push	r0
    1784:	11 24       	eor	r1, r1
    1786:	2f 93       	push	r18
    1788:	3f 93       	push	r19
    178a:	4f 93       	push	r20
    178c:	5f 93       	push	r21
    178e:	6f 93       	push	r22
    1790:	7f 93       	push	r23
    1792:	8f 93       	push	r24
    1794:	9f 93       	push	r25
    1796:	af 93       	push	r26
    1798:	bf 93       	push	r27
    179a:	ef 93       	push	r30
    179c:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
    179e:	80 91 da 00 	lds	r24, 0x00DA
    17a2:	80 ff       	sbrs	r24, 0
    17a4:	15 c0       	rjmp	.+42     	; 0x17d0 <__vector_10+0x58>
    17a6:	80 91 d8 00 	lds	r24, 0x00D8
    17aa:	80 ff       	sbrs	r24, 0
    17ac:	11 c0       	rjmp	.+34     	; 0x17d0 <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_VBUS);
    17ae:	80 91 da 00 	lds	r24, 0x00DA
    17b2:	8e 7f       	andi	r24, 0xFE	; 254
    17b4:	80 93 da 00 	sts	0x00DA, r24
				 *  \note This function is not available on some AVR models which do not support hardware VBUS monitoring.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    17b8:	80 91 d9 00 	lds	r24, 0x00D9

		if (USB_VBUS_GetStatus())
    17bc:	80 ff       	sbrs	r24, 0
    17be:	05 c0       	rjmp	.+10     	; 0x17ca <__vector_10+0x52>
		{
			USB_DeviceState = DEVICE_STATE_Powered;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    17c4:	0e 94 05 01 	call	0x20a	; 0x20a <EVENT_USB_Device_Connect>
    17c8:	03 c0       	rjmp	.+6      	; 0x17d0 <__vector_10+0x58>
		}
		else
		{
			USB_DeviceState = DEVICE_STATE_Unattached;
    17ca:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
    17cc:	0e 94 07 01 	call	0x20e	; 0x20e <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    17d0:	80 91 e1 00 	lds	r24, 0x00E1
    17d4:	80 ff       	sbrs	r24, 0
    17d6:	1c c0       	rjmp	.+56     	; 0x1810 <__vector_10+0x98>
    17d8:	80 91 e2 00 	lds	r24, 0x00E2
    17dc:	80 ff       	sbrs	r24, 0
    17de:	18 c0       	rjmp	.+48     	; 0x1810 <__vector_10+0x98>
	{
		USB_INT_Clear(USB_INT_SUSPI);
    17e0:	80 91 e1 00 	lds	r24, 0x00E1
    17e4:	8e 7f       	andi	r24, 0xFE	; 254
    17e6:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPI);
    17ea:	80 91 e2 00 	lds	r24, 0x00E2
    17ee:	8e 7f       	andi	r24, 0xFE	; 254
    17f0:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
    17f4:	80 91 e2 00 	lds	r24, 0x00E2
    17f8:	80 61       	ori	r24, 0x10	; 16
    17fa:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    17fe:	80 91 d8 00 	lds	r24, 0x00D8
    1802:	80 62       	ori	r24, 0x20	; 32
    1804:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
    1808:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    180a:	85 e0       	ldi	r24, 0x05	; 5
    180c:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
    180e:	ca d1       	rcall	.+916    	; 0x1ba4 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1810:	80 91 e1 00 	lds	r24, 0x00E1
    1814:	84 ff       	sbrs	r24, 4
    1816:	2d c0       	rjmp	.+90     	; 0x1872 <__vector_10+0xfa>
    1818:	80 91 e2 00 	lds	r24, 0x00E2
    181c:	84 ff       	sbrs	r24, 4
    181e:	29 c0       	rjmp	.+82     	; 0x1872 <__vector_10+0xfa>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
    1820:	8c e0       	ldi	r24, 0x0C	; 12
    1822:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
    1824:	89 b5       	in	r24, 0x29	; 41
    1826:	82 60       	ori	r24, 0x02	; 2
    1828:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    182a:	09 b4       	in	r0, 0x29	; 41
    182c:	00 fe       	sbrs	r0, 0
    182e:	fd cf       	rjmp	.-6      	; 0x182a <__vector_10+0xb2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    1830:	80 91 d8 00 	lds	r24, 0x00D8
    1834:	8f 7d       	andi	r24, 0xDF	; 223
    1836:	80 93 d8 00 	sts	0x00D8, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUPI);
    183a:	80 91 e1 00 	lds	r24, 0x00E1
    183e:	8f 7e       	andi	r24, 0xEF	; 239
    1840:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUPI);
    1844:	80 91 e2 00 	lds	r24, 0x00E2
    1848:	8f 7e       	andi	r24, 0xEF	; 239
    184a:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPI);
    184e:	80 91 e2 00 	lds	r24, 0x00E2
    1852:	81 60       	ori	r24, 0x01	; 1
    1854:	80 93 e2 00 	sts	0x00E2, r24

		if (USB_ConfigurationNumber)
    1858:	80 91 6c 03 	lds	r24, 0x036C
    185c:	88 23       	and	r24, r24
    185e:	31 f4       	brne	.+12     	; 0x186c <__vector_10+0xf4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1860:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1864:	87 fd       	sbrc	r24, 7
    1866:	02 c0       	rjmp	.+4      	; 0x186c <__vector_10+0xf4>
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	01 c0       	rjmp	.+2      	; 0x186e <__vector_10+0xf6>
    186c:	84 e0       	ldi	r24, 0x04	; 4
    186e:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1870:	99 d1       	rcall	.+818    	; 0x1ba4 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1872:	80 91 e1 00 	lds	r24, 0x00E1
    1876:	83 ff       	sbrs	r24, 3
    1878:	21 c0       	rjmp	.+66     	; 0x18bc <__vector_10+0x144>
    187a:	80 91 e2 00 	lds	r24, 0x00E2
    187e:	83 ff       	sbrs	r24, 3
    1880:	1d c0       	rjmp	.+58     	; 0x18bc <__vector_10+0x144>
	{
		USB_INT_Clear(USB_INT_EORSTI);
    1882:	80 91 e1 00 	lds	r24, 0x00E1
    1886:	87 7f       	andi	r24, 0xF7	; 247
    1888:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
    188c:	82 e0       	ldi	r24, 0x02	; 2
    188e:	8e bb       	out	0x1e, r24	; 30
		USB_ConfigurationNumber = 0;
    1890:	10 92 6c 03 	sts	0x036C, r1

		USB_INT_Clear(USB_INT_SUSPI);
    1894:	80 91 e1 00 	lds	r24, 0x00E1
    1898:	8e 7f       	andi	r24, 0xFE	; 254
    189a:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPI);
    189e:	80 91 e2 00 	lds	r24, 0x00E2
    18a2:	8e 7f       	andi	r24, 0xFE	; 254
    18a4:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
    18a8:	80 91 e2 00 	lds	r24, 0x00E2
    18ac:	80 61       	ori	r24, 0x10	; 16
    18ae:	80 93 e2 00 	sts	0x00E2, r24
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	60 e0       	ldi	r22, 0x00	; 0
    18b6:	42 e0       	ldi	r20, 0x02	; 2
    18b8:	9e de       	rcall	.-708    	; 0x15f6 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    18ba:	74 d1       	rcall	.+744    	; 0x1ba4 <USB_Event_Stub>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    18bc:	80 91 e1 00 	lds	r24, 0x00E1
    18c0:	82 ff       	sbrs	r24, 2
    18c2:	0a c0       	rjmp	.+20     	; 0x18d8 <__vector_10+0x160>
    18c4:	80 91 e2 00 	lds	r24, 0x00E2
    18c8:	82 ff       	sbrs	r24, 2
    18ca:	06 c0       	rjmp	.+12     	; 0x18d8 <__vector_10+0x160>
	{
		USB_INT_Clear(USB_INT_SOFI);
    18cc:	80 91 e1 00 	lds	r24, 0x00E1
    18d0:	8b 7f       	andi	r24, 0xFB	; 251
    18d2:	80 93 e1 00 	sts	0x00E1, r24

		EVENT_USB_Device_StartOfFrame();
    18d6:	66 d1       	rcall	.+716    	; 0x1ba4 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    18d8:	ff 91       	pop	r31
    18da:	ef 91       	pop	r30
    18dc:	bf 91       	pop	r27
    18de:	af 91       	pop	r26
    18e0:	9f 91       	pop	r25
    18e2:	8f 91       	pop	r24
    18e4:	7f 91       	pop	r23
    18e6:	6f 91       	pop	r22
    18e8:	5f 91       	pop	r21
    18ea:	4f 91       	pop	r20
    18ec:	3f 91       	pop	r19
    18ee:	2f 91       	pop	r18
    18f0:	0f 90       	pop	r0
    18f2:	0b be       	out	0x3b, r0	; 59
    18f4:	0f 90       	pop	r0
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	0f 90       	pop	r0
    18fa:	1f 90       	pop	r1
    18fc:	18 95       	reti

000018fe <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	ac 97       	sbiw	r28, 0x2c	; 44
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	cd bf       	out	0x3d, r28	; 61
    1916:	ee e6       	ldi	r30, 0x6E	; 110
    1918:	f3 e0       	ldi	r31, 0x03	; 3
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    191a:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
    191e:	81 93       	st	Z+, r24

void USB_Device_ProcessControlRequest(void)
{
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1920:	23 e0       	ldi	r18, 0x03	; 3
    1922:	e6 37       	cpi	r30, 0x76	; 118
    1924:	f2 07       	cpc	r31, r18
    1926:	c9 f7       	brne	.-14     	; 0x191a <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_Byte();

	EVENT_USB_Device_ControlRequest();
    1928:	0e 94 28 01 	call	0x250	; 0x250 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    192c:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1930:	83 ff       	sbrs	r24, 3
    1932:	1f c1       	rjmp	.+574    	; 0x1b72 <USB_Device_ProcessControlRequest+0x274>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1934:	80 91 6e 03 	lds	r24, 0x036E

		switch (USB_ControlRequest.bRequest)
    1938:	90 91 6f 03 	lds	r25, 0x036F
    193c:	95 30       	cpi	r25, 0x05	; 5
    193e:	09 f4       	brne	.+2      	; 0x1942 <USB_Device_ProcessControlRequest+0x44>
    1940:	6d c0       	rjmp	.+218    	; 0x1a1c <USB_Device_ProcessControlRequest+0x11e>
    1942:	96 30       	cpi	r25, 0x06	; 6
    1944:	40 f4       	brcc	.+16     	; 0x1956 <USB_Device_ProcessControlRequest+0x58>
    1946:	91 30       	cpi	r25, 0x01	; 1
    1948:	81 f1       	breq	.+96     	; 0x19aa <USB_Device_ProcessControlRequest+0xac>
    194a:	91 30       	cpi	r25, 0x01	; 1
    194c:	70 f0       	brcs	.+28     	; 0x196a <USB_Device_ProcessControlRequest+0x6c>
    194e:	93 30       	cpi	r25, 0x03	; 3
    1950:	09 f0       	breq	.+2      	; 0x1954 <USB_Device_ProcessControlRequest+0x56>
    1952:	0f c1       	rjmp	.+542    	; 0x1b72 <USB_Device_ProcessControlRequest+0x274>
    1954:	2a c0       	rjmp	.+84     	; 0x19aa <USB_Device_ProcessControlRequest+0xac>
    1956:	98 30       	cpi	r25, 0x08	; 8
    1958:	09 f4       	brne	.+2      	; 0x195c <USB_Device_ProcessControlRequest+0x5e>
    195a:	dd c0       	rjmp	.+442    	; 0x1b16 <USB_Device_ProcessControlRequest+0x218>
    195c:	99 30       	cpi	r25, 0x09	; 9
    195e:	09 f4       	brne	.+2      	; 0x1962 <USB_Device_ProcessControlRequest+0x64>
    1960:	ec c0       	rjmp	.+472    	; 0x1b3a <USB_Device_ProcessControlRequest+0x23c>
    1962:	96 30       	cpi	r25, 0x06	; 6
    1964:	09 f0       	breq	.+2      	; 0x1968 <USB_Device_ProcessControlRequest+0x6a>
    1966:	05 c1       	rjmp	.+522    	; 0x1b72 <USB_Device_ProcessControlRequest+0x274>
    1968:	7e c0       	rjmp	.+252    	; 0x1a66 <USB_Device_ProcessControlRequest+0x168>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    196a:	80 38       	cpi	r24, 0x80	; 128
    196c:	09 f4       	brne	.+2      	; 0x1970 <USB_Device_ProcessControlRequest+0x72>
    196e:	01 c1       	rjmp	.+514    	; 0x1b72 <USB_Device_ProcessControlRequest+0x274>
    1970:	82 38       	cpi	r24, 0x82	; 130
    1972:	09 f0       	breq	.+2      	; 0x1976 <USB_Device_ProcessControlRequest+0x78>
    1974:	fe c0       	rjmp	.+508    	; 0x1b72 <USB_Device_ProcessControlRequest+0x274>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1976:	80 91 72 03 	lds	r24, 0x0372
    197a:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    197c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1980:	80 91 eb 00 	lds	r24, 0x00EB
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1984:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1988:	20 91 e8 00 	lds	r18, 0x00E8
    198c:	27 7f       	andi	r18, 0xF7	; 247
    198e:	20 93 e8 00 	sts	0x00E8, r18
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	25 e0       	ldi	r18, 0x05	; 5
    1996:	96 95       	lsr	r25
    1998:	87 95       	ror	r24
    199a:	2a 95       	dec	r18
    199c:	e1 f7       	brne	.-8      	; 0x1996 <USB_Device_ProcessControlRequest+0x98>
    199e:	81 70       	andi	r24, 0x01	; 1
    19a0:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Word >> 8);
    19a4:	10 92 f1 00 	sts	0x00F1, r1
    19a8:	c1 c0       	rjmp	.+386    	; 0x1b2c <USB_Device_ProcessControlRequest+0x22e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    19aa:	88 23       	and	r24, r24
    19ac:	19 f0       	breq	.+6      	; 0x19b4 <USB_Device_ProcessControlRequest+0xb6>
    19ae:	82 30       	cpi	r24, 0x02	; 2
    19b0:	09 f0       	breq	.+2      	; 0x19b4 <USB_Device_ProcessControlRequest+0xb6>
    19b2:	df c0       	rjmp	.+446    	; 0x1b72 <USB_Device_ProcessControlRequest+0x274>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    19b4:	8f 71       	andi	r24, 0x1F	; 31
    19b6:	82 30       	cpi	r24, 0x02	; 2
    19b8:	09 f0       	breq	.+2      	; 0x19bc <USB_Device_ProcessControlRequest+0xbe>
    19ba:	db c0       	rjmp	.+438    	; 0x1b72 <USB_Device_ProcessControlRequest+0x274>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    19bc:	80 91 70 03 	lds	r24, 0x0370
    19c0:	88 23       	and	r24, r24
    19c2:	31 f5       	brne	.+76     	; 0x1a10 <USB_Device_ProcessControlRequest+0x112>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    19c4:	20 91 72 03 	lds	r18, 0x0372
    19c8:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    19ca:	09 f4       	brne	.+2      	; 0x19ce <USB_Device_ProcessControlRequest+0xd0>
    19cc:	d2 c0       	rjmp	.+420    	; 0x1b72 <USB_Device_ProcessControlRequest+0x274>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    19ce:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    19d2:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    19d6:	80 ff       	sbrs	r24, 0
    19d8:	1b c0       	rjmp	.+54     	; 0x1a10 <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    19da:	93 30       	cpi	r25, 0x03	; 3
    19dc:	21 f4       	brne	.+8      	; 0x19e6 <USB_Device_ProcessControlRequest+0xe8>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    19de:	80 91 eb 00 	lds	r24, 0x00EB
    19e2:	80 62       	ori	r24, 0x20	; 32
    19e4:	13 c0       	rjmp	.+38     	; 0x1a0c <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    19e6:	80 91 eb 00 	lds	r24, 0x00EB
    19ea:	80 61       	ori	r24, 0x10	; 16
    19ec:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <USB_Device_ProcessControlRequest+0xfc>
    19f6:	88 0f       	add	r24, r24
    19f8:	99 1f       	adc	r25, r25
    19fa:	2a 95       	dec	r18
    19fc:	e2 f7       	brpl	.-8      	; 0x19f6 <USB_Device_ProcessControlRequest+0xf8>
    19fe:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1a02:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1a06:	80 91 eb 00 	lds	r24, 0x00EB
    1a0a:	88 60       	ori	r24, 0x08	; 8
    1a0c:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1a10:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a14:	80 91 e8 00 	lds	r24, 0x00E8
    1a18:	87 7f       	andi	r24, 0xF7	; 247
    1a1a:	8b c0       	rjmp	.+278    	; 0x1b32 <USB_Device_ProcessControlRequest+0x234>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1a1c:	88 23       	and	r24, r24
    1a1e:	09 f0       	breq	.+2      	; 0x1a22 <USB_Device_ProcessControlRequest+0x124>
    1a20:	a8 c0       	rjmp	.+336    	; 0x1b72 <USB_Device_ProcessControlRequest+0x274>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1a22:	10 91 70 03 	lds	r17, 0x0370
    1a26:	1f 77       	andi	r17, 0x7F	; 127

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1a28:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a2a:	f8 94       	cli
    1a2c:	80 91 e8 00 	lds	r24, 0x00E8
    1a30:	87 7f       	andi	r24, 0xF7	; 247
    1a32:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearSETUP();

		Endpoint_ClearStatusStage();
    1a36:	f2 dd       	rcall	.-1052   	; 0x161c <Endpoint_ClearStatusStage>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a38:	80 91 e8 00 	lds	r24, 0x00E8

		while (!(Endpoint_IsINReady()));
    1a3c:	80 ff       	sbrs	r24, 0
    1a3e:	fc cf       	rjmp	.-8      	; 0x1a38 <USB_Device_ProcessControlRequest+0x13a>

		USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1a40:	11 23       	and	r17, r17
    1a42:	11 f4       	brne	.+4      	; 0x1a48 <USB_Device_ProcessControlRequest+0x14a>
    1a44:	82 e0       	ldi	r24, 0x02	; 2
    1a46:	01 c0       	rjmp	.+2      	; 0x1a4a <USB_Device_ProcessControlRequest+0x14c>
    1a48:	83 e0       	ldi	r24, 0x03	; 3
    1a4a:	8e bb       	out	0x1e, r24	; 30
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
    1a4c:	80 91 e3 00 	lds	r24, 0x00E3
    1a50:	80 78       	andi	r24, 0x80	; 128
    1a52:	18 2b       	or	r17, r24
    1a54:	10 93 e3 00 	sts	0x00E3, r17
				UDADDR |= (1 << ADDEN);
    1a58:	80 91 e3 00 	lds	r24, 0x00E3
    1a5c:	80 68       	ori	r24, 0x80	; 128
    1a5e:	80 93 e3 00 	sts	0x00E3, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a62:	0f bf       	out	0x3f, r16	; 63
    __asm__ volatile ("" ::: "memory");
    1a64:	86 c0       	rjmp	.+268    	; 0x1b72 <USB_Device_ProcessControlRequest+0x274>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1a66:	80 58       	subi	r24, 0x80	; 128
    1a68:	82 30       	cpi	r24, 0x02	; 2
    1a6a:	08 f0       	brcs	.+2      	; 0x1a6e <USB_Device_ProcessControlRequest+0x170>
    1a6c:	82 c0       	rjmp	.+260    	; 0x1b72 <USB_Device_ProcessControlRequest+0x274>
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1a6e:	80 91 70 03 	lds	r24, 0x0370
    1a72:	90 91 71 03 	lds	r25, 0x0371
    1a76:	23 e0       	ldi	r18, 0x03	; 3
    1a78:	8c 3d       	cpi	r24, 0xDC	; 220
    1a7a:	92 07       	cpc	r25, r18
    1a7c:	99 f5       	brne	.+102    	; 0x1ae4 <USB_Device_ProcessControlRequest+0x1e6>
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1a7e:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a80:	f8 94       	cli
    1a82:	de 01       	movw	r26, r28
    1a84:	15 96       	adiw	r26, 0x05	; 5
    1a86:	6e e0       	ldi	r22, 0x0E	; 14
    1a88:	40 e0       	ldi	r20, 0x00	; 0
    1a8a:	50 e0       	ldi	r21, 0x00	; 0
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1a8c:	11 e2       	ldi	r17, 0x21	; 33
    1a8e:	e6 2f       	mov	r30, r22
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	10 93 57 00 	sts	0x0057, r17
    1a96:	84 91       	lpm	r24, Z+

			if (SerialCharNum & 0x01)
    1a98:	40 ff       	sbrs	r20, 0
    1a9a:	03 c0       	rjmp	.+6      	; 0x1aa2 <USB_Device_ProcessControlRequest+0x1a4>
			{
				SerialByte >>= 4;
    1a9c:	82 95       	swap	r24
    1a9e:	8f 70       	andi	r24, 0x0F	; 15
				SigReadAddress++;
    1aa0:	6f 5f       	subi	r22, 0xFF	; 255
			}

			SerialByte &= 0x0F;
    1aa2:	8f 70       	andi	r24, 0x0F	; 15
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0

			SignatureDescriptor.UnicodeString[SerialCharNum] = (SerialByte >= 10) ?
    1aa8:	8a 30       	cpi	r24, 0x0A	; 10
    1aaa:	18 f0       	brcs	.+6      	; 0x1ab2 <USB_Device_ProcessControlRequest+0x1b4>
    1aac:	c9 01       	movw	r24, r18
    1aae:	c7 96       	adiw	r24, 0x37	; 55
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <USB_Device_ProcessControlRequest+0x1b8>
    1ab2:	c9 01       	movw	r24, r18
    1ab4:	c0 96       	adiw	r24, 0x30	; 48
    1ab6:	8d 93       	st	X+, r24
    1ab8:	9d 93       	st	X+, r25
    1aba:	4f 5f       	subi	r20, 0xFF	; 255
    1abc:	5f 4f       	sbci	r21, 0xFF	; 255

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
    1abe:	44 31       	cpi	r20, 0x14	; 20
    1ac0:	51 05       	cpc	r21, r1
    1ac2:	29 f7       	brne	.-54     	; 0x1a8e <USB_Device_ProcessControlRequest+0x190>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ac4:	7f bf       	out	0x3f, r23	; 63
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
    1ac6:	8a e2       	ldi	r24, 0x2A	; 42
    1ac8:	8b 83       	std	Y+3, r24	; 0x03
	{
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1aca:	83 e0       	ldi	r24, 0x03	; 3
    1acc:	8c 83       	std	Y+4, r24	; 0x04
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ace:	80 91 e8 00 	lds	r24, 0x00E8
    1ad2:	87 7f       	andi	r24, 0xF7	; 247
    1ad4:	80 93 e8 00 	sts	0x00E8, r24
		}
	}

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1ad8:	ce 01       	movw	r24, r28
    1ada:	03 96       	adiw	r24, 0x03	; 3
    1adc:	6a e2       	ldi	r22, 0x2A	; 42
    1ade:	70 e0       	ldi	r23, 0x00	; 0
    1ae0:	62 d0       	rcall	.+196    	; 0x1ba6 <Endpoint_Write_Control_Stream_LE>
    1ae2:	13 c0       	rjmp	.+38     	; 0x1b0a <USB_Device_ProcessControlRequest+0x20c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1ae4:	60 91 72 03 	lds	r22, 0x0372
    1ae8:	ae 01       	movw	r20, r28
    1aea:	4f 5f       	subi	r20, 0xFF	; 255
    1aec:	5f 4f       	sbci	r21, 0xFF	; 255
    1aee:	0e 94 1f 01 	call	0x23e	; 0x23e <CALLBACK_USB_GetDescriptor>
    1af2:	bc 01       	movw	r22, r24
    1af4:	00 97       	sbiw	r24, 0x00	; 0
    1af6:	09 f4       	brne	.+2      	; 0x1afa <USB_Device_ProcessControlRequest+0x1fc>
    1af8:	3c c0       	rjmp	.+120    	; 0x1b72 <USB_Device_ProcessControlRequest+0x274>
    1afa:	80 91 e8 00 	lds	r24, 0x00E8
    1afe:	87 7f       	andi	r24, 0xF7	; 247
    1b00:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	9a 81       	ldd	r25, Y+2	; 0x02
    1b08:	aa d0       	rcall	.+340    	; 0x1c5e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b0a:	80 91 e8 00 	lds	r24, 0x00E8
    1b0e:	8b 77       	andi	r24, 0x7B	; 123
    1b10:	80 93 e8 00 	sts	0x00E8, r24
    1b14:	2e c0       	rjmp	.+92     	; 0x1b72 <USB_Device_ProcessControlRequest+0x274>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1b16:	80 38       	cpi	r24, 0x80	; 128
    1b18:	61 f5       	brne	.+88     	; 0x1b72 <USB_Device_ProcessControlRequest+0x274>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b1a:	80 91 e8 00 	lds	r24, 0x00E8
    1b1e:	87 7f       	andi	r24, 0xF7	; 247
    1b20:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
    1b24:	80 91 6c 03 	lds	r24, 0x036C
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    1b28:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b2c:	80 91 e8 00 	lds	r24, 0x00E8
    1b30:	8e 77       	andi	r24, 0x7E	; 126
    1b32:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1b36:	72 dd       	rcall	.-1308   	; 0x161c <Endpoint_ClearStatusStage>
    1b38:	1c c0       	rjmp	.+56     	; 0x1b72 <USB_Device_ProcessControlRequest+0x274>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1b3a:	88 23       	and	r24, r24
    1b3c:	d1 f4       	brne	.+52     	; 0x1b72 <USB_Device_ProcessControlRequest+0x274>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1b3e:	90 91 70 03 	lds	r25, 0x0370
    1b42:	92 30       	cpi	r25, 0x02	; 2
    1b44:	b0 f4       	brcc	.+44     	; 0x1b72 <USB_Device_ProcessControlRequest+0x274>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b46:	80 91 e8 00 	lds	r24, 0x00E8
    1b4a:	87 7f       	andi	r24, 0xF7	; 247
    1b4c:	80 93 e8 00 	sts	0x00E8, r24
	}
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1b50:	90 93 6c 03 	sts	0x036C, r25

	Endpoint_ClearStatusStage();
    1b54:	63 dd       	rcall	.-1338   	; 0x161c <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
    1b56:	80 91 6c 03 	lds	r24, 0x036C
    1b5a:	88 23       	and	r24, r24
    1b5c:	31 f4       	brne	.+12     	; 0x1b6a <USB_Device_ProcessControlRequest+0x26c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1b5e:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1b62:	87 fd       	sbrc	r24, 7
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <USB_Device_ProcessControlRequest+0x26c>
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	01 c0       	rjmp	.+2      	; 0x1b6c <USB_Device_ProcessControlRequest+0x26e>
    1b6a:	84 e0       	ldi	r24, 0x04	; 4
    1b6c:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    1b6e:	0e 94 31 01 	call	0x262	; 0x262 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b72:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1b76:	83 ff       	sbrs	r24, 3
    1b78:	0a c0       	rjmp	.+20     	; 0x1b8e <USB_Device_ProcessControlRequest+0x290>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1b7a:	80 91 eb 00 	lds	r24, 0x00EB
    1b7e:	80 62       	ori	r24, 0x20	; 32
    1b80:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b84:	80 91 e8 00 	lds	r24, 0x00E8
    1b88:	87 7f       	andi	r24, 0xF7	; 247
    1b8a:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    1b8e:	ac 96       	adiw	r28, 0x2c	; 44
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	de bf       	out	0x3e, r29	; 62
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	cd bf       	out	0x3d, r28	; 61
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	1f 91       	pop	r17
    1ba0:	0f 91       	pop	r16
    1ba2:	08 95       	ret

00001ba4 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1ba4:	08 95       	ret

00001ba6 <Endpoint_Write_Control_Stream_LE>:
    1ba6:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1ba8:	40 91 74 03 	lds	r20, 0x0374
    1bac:	50 91 75 03 	lds	r21, 0x0375
    1bb0:	46 17       	cp	r20, r22
    1bb2:	57 07       	cpc	r21, r23
    1bb4:	18 f4       	brcc	.+6      	; 0x1bbc <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1bb6:	f9 01       	movw	r30, r18
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	3c c0       	rjmp	.+120    	; 0x1c34 <Endpoint_Write_Control_Stream_LE+0x8e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1bbc:	61 15       	cp	r22, r1
    1bbe:	71 05       	cpc	r23, r1
    1bc0:	11 f0       	breq	.+4      	; 0x1bc6 <Endpoint_Write_Control_Stream_LE+0x20>
    1bc2:	ab 01       	movw	r20, r22
    1bc4:	f8 cf       	rjmp	.-16     	; 0x1bb6 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1bc6:	80 91 e8 00 	lds	r24, 0x00E8
    1bca:	8e 77       	andi	r24, 0x7E	; 126
    1bcc:	80 93 e8 00 	sts	0x00E8, r24
    1bd0:	40 e0       	ldi	r20, 0x00	; 0
    1bd2:	50 e0       	ldi	r21, 0x00	; 0
    1bd4:	f0 cf       	rjmp	.-32     	; 0x1bb6 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1bd6:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1bd8:	88 23       	and	r24, r24
    1bda:	e9 f1       	breq	.+122    	; 0x1c56 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1bdc:	85 30       	cpi	r24, 0x05	; 5
    1bde:	e9 f1       	breq	.+122    	; 0x1c5a <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1be0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1be4:	83 ff       	sbrs	r24, 3
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <Endpoint_Write_Control_Stream_LE+0x46>
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1bec:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1bf0:	82 fd       	sbrc	r24, 2
    1bf2:	2b c0       	rjmp	.+86     	; 0x1c4a <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1bf4:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1bf8:	80 ff       	sbrs	r24, 0
    1bfa:	1c c0       	rjmp	.+56     	; 0x1c34 <Endpoint_Write_Control_Stream_LE+0x8e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1bfc:	20 91 f2 00 	lds	r18, 0x00F2
    1c00:	30 91 f3 00 	lds	r19, 0x00F3
    1c04:	07 c0       	rjmp	.+14     	; 0x1c14 <Endpoint_Write_Control_Stream_LE+0x6e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1c06:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    1c08:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
    1c0c:	41 50       	subi	r20, 0x01	; 1
    1c0e:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1c10:	2f 5f       	subi	r18, 0xFF	; 255
    1c12:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    1c14:	41 15       	cp	r20, r1
    1c16:	51 05       	cpc	r21, r1
    1c18:	19 f0       	breq	.+6      	; 0x1c20 <Endpoint_Write_Control_Stream_LE+0x7a>
    1c1a:	28 30       	cpi	r18, 0x08	; 8
    1c1c:	31 05       	cpc	r19, r1
    1c1e:	98 f3       	brcs	.-26     	; 0x1c06 <Endpoint_Write_Control_Stream_LE+0x60>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	28 30       	cpi	r18, 0x08	; 8
    1c24:	31 05       	cpc	r19, r1
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <Endpoint_Write_Control_Stream_LE+0x84>
    1c28:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c2a:	80 91 e8 00 	lds	r24, 0x00E8
    1c2e:	8e 77       	andi	r24, 0x7E	; 126
    1c30:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1c34:	41 15       	cp	r20, r1
    1c36:	51 05       	cpc	r21, r1
    1c38:	71 f6       	brne	.-100    	; 0x1bd6 <Endpoint_Write_Control_Stream_LE+0x30>
    1c3a:	99 23       	and	r25, r25
    1c3c:	61 f6       	brne	.-104    	; 0x1bd6 <Endpoint_Write_Control_Stream_LE+0x30>
    1c3e:	05 c0       	rjmp	.+10     	; 0x1c4a <Endpoint_Write_Control_Stream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1c40:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1c42:	88 23       	and	r24, r24
    1c44:	41 f0       	breq	.+16     	; 0x1c56 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1c46:	85 30       	cpi	r24, 0x05	; 5
    1c48:	41 f0       	breq	.+16     	; 0x1c5a <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c4a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1c4e:	82 ff       	sbrs	r24, 2
    1c50:	f7 cf       	rjmp	.-18     	; 0x1c40 <Endpoint_Write_Control_Stream_LE+0x9a>
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	08 95       	ret
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	08 95       	ret
    1c5a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1c5c:	08 95       	ret

00001c5e <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
    1c5e:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1c60:	40 91 74 03 	lds	r20, 0x0374
    1c64:	50 91 75 03 	lds	r21, 0x0375
    1c68:	46 17       	cp	r20, r22
    1c6a:	57 07       	cpc	r21, r23
    1c6c:	10 f4       	brcc	.+4      	; 0x1c72 <Endpoint_Write_Control_PStream_LE+0x14>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1c6e:	60 e0       	ldi	r22, 0x00	; 0
    1c70:	3f c0       	rjmp	.+126    	; 0x1cf0 <Endpoint_Write_Control_PStream_LE+0x92>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1c72:	61 15       	cp	r22, r1
    1c74:	71 05       	cpc	r23, r1
    1c76:	11 f0       	breq	.+4      	; 0x1c7c <Endpoint_Write_Control_PStream_LE+0x1e>
    1c78:	ab 01       	movw	r20, r22
    1c7a:	f9 cf       	rjmp	.-14     	; 0x1c6e <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c7c:	80 91 e8 00 	lds	r24, 0x00E8
    1c80:	8e 77       	andi	r24, 0x7E	; 126
    1c82:	80 93 e8 00 	sts	0x00E8, r24
    1c86:	40 e0       	ldi	r20, 0x00	; 0
    1c88:	50 e0       	ldi	r21, 0x00	; 0
    1c8a:	f1 cf       	rjmp	.-30     	; 0x1c6e <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1c8c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1c8e:	88 23       	and	r24, r24
    1c90:	09 f4       	brne	.+2      	; 0x1c94 <Endpoint_Write_Control_PStream_LE+0x36>
    1c92:	3f c0       	rjmp	.+126    	; 0x1d12 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1c94:	85 30       	cpi	r24, 0x05	; 5
    1c96:	09 f4       	brne	.+2      	; 0x1c9a <Endpoint_Write_Control_PStream_LE+0x3c>
    1c98:	3e c0       	rjmp	.+124    	; 0x1d16 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1c9a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1c9e:	83 ff       	sbrs	r24, 3
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <Endpoint_Write_Control_PStream_LE+0x48>
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ca6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1caa:	82 fd       	sbrc	r24, 2
    1cac:	2c c0       	rjmp	.+88     	; 0x1d06 <Endpoint_Write_Control_PStream_LE+0xa8>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1cae:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1cb2:	80 ff       	sbrs	r24, 0
    1cb4:	1d c0       	rjmp	.+58     	; 0x1cf0 <Endpoint_Write_Control_PStream_LE+0x92>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1cb6:	80 91 f2 00 	lds	r24, 0x00F2
    1cba:	90 91 f3 00 	lds	r25, 0x00F3
    1cbe:	09 c0       	rjmp	.+18     	; 0x1cd2 <Endpoint_Write_Control_PStream_LE+0x74>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    1cc0:	f9 01       	movw	r30, r18
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1cc2:	2f 5f       	subi	r18, 0xFF	; 255
    1cc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc6:	e4 91       	lpm	r30, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    1cc8:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
    1ccc:	41 50       	subi	r20, 0x01	; 1
    1cce:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1cd0:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    1cd2:	41 15       	cp	r20, r1
    1cd4:	51 05       	cpc	r21, r1
    1cd6:	19 f0       	breq	.+6      	; 0x1cde <Endpoint_Write_Control_PStream_LE+0x80>
    1cd8:	88 30       	cpi	r24, 0x08	; 8
    1cda:	91 05       	cpc	r25, r1
    1cdc:	88 f3       	brcs	.-30     	; 0x1cc0 <Endpoint_Write_Control_PStream_LE+0x62>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    1cde:	60 e0       	ldi	r22, 0x00	; 0
    1ce0:	08 97       	sbiw	r24, 0x08	; 8
    1ce2:	09 f4       	brne	.+2      	; 0x1ce6 <Endpoint_Write_Control_PStream_LE+0x88>
    1ce4:	61 e0       	ldi	r22, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ce6:	80 91 e8 00 	lds	r24, 0x00E8
    1cea:	8e 77       	andi	r24, 0x7E	; 126
    1cec:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1cf0:	41 15       	cp	r20, r1
    1cf2:	51 05       	cpc	r21, r1
    1cf4:	59 f6       	brne	.-106    	; 0x1c8c <Endpoint_Write_Control_PStream_LE+0x2e>
    1cf6:	66 23       	and	r22, r22
    1cf8:	49 f6       	brne	.-110    	; 0x1c8c <Endpoint_Write_Control_PStream_LE+0x2e>
    1cfa:	05 c0       	rjmp	.+10     	; 0x1d06 <Endpoint_Write_Control_PStream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1cfc:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1cfe:	88 23       	and	r24, r24
    1d00:	41 f0       	breq	.+16     	; 0x1d12 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1d02:	85 30       	cpi	r24, 0x05	; 5
    1d04:	41 f0       	breq	.+16     	; 0x1d16 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1d06:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1d0a:	82 ff       	sbrs	r24, 2
    1d0c:	f7 cf       	rjmp	.-18     	; 0x1cfc <Endpoint_Write_Control_PStream_LE+0x9e>
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	08 95       	ret
    1d12:	82 e0       	ldi	r24, 0x02	; 2
    1d14:	08 95       	ret
    1d16:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1d18:	08 95       	ret

00001d1a <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
    1d1a:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    1d1c:	61 15       	cp	r22, r1
    1d1e:	71 05       	cpc	r23, r1
    1d20:	29 f4       	brne	.+10     	; 0x1d2c <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1d22:	80 91 e8 00 	lds	r24, 0x00E8
    1d26:	8b 77       	andi	r24, 0x7B	; 123
    1d28:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1d2c:	f9 01       	movw	r30, r18
    1d2e:	21 c0       	rjmp	.+66     	; 0x1d72 <Endpoint_Read_Control_Stream_LE+0x58>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1d30:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1d32:	88 23       	and	r24, r24
    1d34:	69 f1       	breq	.+90     	; 0x1d90 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1d36:	85 30       	cpi	r24, 0x05	; 5
    1d38:	69 f1       	breq	.+90     	; 0x1d94 <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d3a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1d3e:	83 ff       	sbrs	r24, 3
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <Endpoint_Read_Control_Stream_LE+0x2c>
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1d46:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    1d4a:	82 ff       	sbrs	r24, 2
    1d4c:	f1 cf       	rjmp	.-30     	; 0x1d30 <Endpoint_Read_Control_Stream_LE+0x16>
    1d4e:	06 c0       	rjmp	.+12     	; 0x1d5c <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    1d50:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1d54:	81 93       	st	Z+, r24
				Length--;
    1d56:	61 50       	subi	r22, 0x01	; 1
    1d58:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    1d5a:	31 f0       	breq	.+12     	; 0x1d68 <Endpoint_Read_Control_Stream_LE+0x4e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1d5c:	80 91 f2 00 	lds	r24, 0x00F2
    1d60:	90 91 f3 00 	lds	r25, 0x00F3
    1d64:	89 2b       	or	r24, r25
    1d66:	a1 f7       	brne	.-24     	; 0x1d50 <Endpoint_Read_Control_Stream_LE+0x36>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1d68:	80 91 e8 00 	lds	r24, 0x00E8
    1d6c:	8b 77       	andi	r24, 0x7B	; 123
    1d6e:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    1d72:	61 15       	cp	r22, r1
    1d74:	71 05       	cpc	r23, r1
    1d76:	e1 f6       	brne	.-72     	; 0x1d30 <Endpoint_Read_Control_Stream_LE+0x16>
    1d78:	05 c0       	rjmp	.+10     	; 0x1d84 <Endpoint_Read_Control_Stream_LE+0x6a>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1d7a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1d7c:	88 23       	and	r24, r24
    1d7e:	41 f0       	breq	.+16     	; 0x1d90 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1d80:	85 30       	cpi	r24, 0x05	; 5
    1d82:	41 f0       	breq	.+16     	; 0x1d94 <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1d84:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    1d88:	80 ff       	sbrs	r24, 0
    1d8a:	f7 cf       	rjmp	.-18     	; 0x1d7a <Endpoint_Read_Control_Stream_LE+0x60>
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	08 95       	ret
    1d90:	82 e0       	ldi	r24, 0x02	; 2
    1d92:	08 95       	ret
    1d94:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1d96:	08 95       	ret

00001d98 <Endpoint_Read_Stream_BE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    1d98:	df 92       	push	r13
    1d9a:	ef 92       	push	r14
    1d9c:	ff 92       	push	r15
    1d9e:	0f 93       	push	r16
    1da0:	1f 93       	push	r17
    1da2:	cf 93       	push	r28
    1da4:	df 93       	push	r29
    1da6:	8c 01       	movw	r16, r24
    1da8:	eb 01       	movw	r28, r22
    1daa:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1dac:	56 dc       	rcall	.-1876   	; 0x165a <Endpoint_WaitUntilReady>
    1dae:	d8 2e       	mov	r13, r24
    1db0:	88 23       	and	r24, r24
    1db2:	21 f5       	brne	.+72     	; 0x1dfc <Endpoint_Read_Stream_BE+0x64>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1db4:	21 97       	sbiw	r28, 0x01	; 1
    1db6:	0c 0f       	add	r16, r28
    1db8:	1d 1f       	adc	r17, r29
    1dba:	21 96       	adiw	r28, 0x01	; 1
    1dbc:	1d c0       	rjmp	.+58     	; 0x1df8 <Endpoint_Read_Stream_BE+0x60>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1dbe:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1dc2:	85 fd       	sbrc	r24, 5
    1dc4:	12 c0       	rjmp	.+36     	; 0x1dea <Endpoint_Read_Stream_BE+0x52>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1dc6:	80 91 e8 00 	lds	r24, 0x00E8
    1dca:	8b 77       	andi	r24, 0x7B	; 123
    1dcc:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    1dd0:	e1 14       	cp	r14, r1
    1dd2:	f1 04       	cpc	r15, r1
    1dd4:	31 f0       	breq	.+12     	; 0x1de2 <Endpoint_Read_Stream_BE+0x4a>
    1dd6:	f7 01       	movw	r30, r14
    1dd8:	09 95       	icall
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	11 f4       	brne	.+4      	; 0x1de2 <Endpoint_Read_Stream_BE+0x4a>
    1dde:	85 e0       	ldi	r24, 0x05	; 5
    1de0:	0e c0       	rjmp	.+28     	; 0x1dfe <Endpoint_Read_Stream_BE+0x66>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1de2:	3b dc       	rcall	.-1930   	; 0x165a <Endpoint_WaitUntilReady>
    1de4:	88 23       	and	r24, r24
    1de6:	41 f0       	breq	.+16     	; 0x1df8 <Endpoint_Read_Stream_BE+0x60>
    1de8:	0a c0       	rjmp	.+20     	; 0x1dfe <Endpoint_Read_Stream_BE+0x66>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    1dea:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1dee:	f8 01       	movw	r30, r16
    1df0:	80 83       	st	Z, r24
    1df2:	01 50       	subi	r16, 0x01	; 1
    1df4:	10 40       	sbci	r17, 0x00	; 0
			Length--;
    1df6:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    1df8:	20 97       	sbiw	r28, 0x00	; 0
    1dfa:	09 f7       	brne	.-62     	; 0x1dbe <Endpoint_Read_Stream_BE+0x26>
    1dfc:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1dfe:	df 91       	pop	r29
    1e00:	cf 91       	pop	r28
    1e02:	1f 91       	pop	r17
    1e04:	0f 91       	pop	r16
    1e06:	ff 90       	pop	r15
    1e08:	ef 90       	pop	r14
    1e0a:	df 90       	pop	r13
    1e0c:	08 95       	ret

00001e0e <Endpoint_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    1e0e:	df 92       	push	r13
    1e10:	ef 92       	push	r14
    1e12:	ff 92       	push	r15
    1e14:	0f 93       	push	r16
    1e16:	1f 93       	push	r17
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	18 2f       	mov	r17, r24
    1e1e:	09 2f       	mov	r16, r25
    1e20:	eb 01       	movw	r28, r22
    1e22:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1e24:	1a dc       	rcall	.-1996   	; 0x165a <Endpoint_WaitUntilReady>
    1e26:	d8 2e       	mov	r13, r24
    1e28:	88 23       	and	r24, r24
    1e2a:	19 f5       	brne	.+70     	; 0x1e72 <Endpoint_Read_Stream_LE+0x64>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1e2c:	81 2f       	mov	r24, r17
    1e2e:	90 2f       	mov	r25, r16
    1e30:	9c 01       	movw	r18, r24
    1e32:	89 01       	movw	r16, r18
    1e34:	1c c0       	rjmp	.+56     	; 0x1e6e <Endpoint_Read_Stream_LE+0x60>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1e36:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1e3a:	85 fd       	sbrc	r24, 5
    1e3c:	12 c0       	rjmp	.+36     	; 0x1e62 <Endpoint_Read_Stream_LE+0x54>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1e3e:	80 91 e8 00 	lds	r24, 0x00E8
    1e42:	8b 77       	andi	r24, 0x7B	; 123
    1e44:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    1e48:	e1 14       	cp	r14, r1
    1e4a:	f1 04       	cpc	r15, r1
    1e4c:	31 f0       	breq	.+12     	; 0x1e5a <Endpoint_Read_Stream_LE+0x4c>
    1e4e:	f7 01       	movw	r30, r14
    1e50:	09 95       	icall
    1e52:	81 30       	cpi	r24, 0x01	; 1
    1e54:	11 f4       	brne	.+4      	; 0x1e5a <Endpoint_Read_Stream_LE+0x4c>
    1e56:	85 e0       	ldi	r24, 0x05	; 5
    1e58:	0d c0       	rjmp	.+26     	; 0x1e74 <Endpoint_Read_Stream_LE+0x66>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1e5a:	ff db       	rcall	.-2050   	; 0x165a <Endpoint_WaitUntilReady>
    1e5c:	88 23       	and	r24, r24
    1e5e:	39 f0       	breq	.+14     	; 0x1e6e <Endpoint_Read_Stream_LE+0x60>
    1e60:	09 c0       	rjmp	.+18     	; 0x1e74 <Endpoint_Read_Stream_LE+0x66>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    1e62:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1e66:	f8 01       	movw	r30, r16
    1e68:	81 93       	st	Z+, r24
    1e6a:	8f 01       	movw	r16, r30
			Length--;
    1e6c:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    1e6e:	20 97       	sbiw	r28, 0x00	; 0
    1e70:	11 f7       	brne	.-60     	; 0x1e36 <Endpoint_Read_Stream_LE+0x28>
    1e72:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1e74:	df 91       	pop	r29
    1e76:	cf 91       	pop	r28
    1e78:	1f 91       	pop	r17
    1e7a:	0f 91       	pop	r16
    1e7c:	ff 90       	pop	r15
    1e7e:	ef 90       	pop	r14
    1e80:	df 90       	pop	r13
    1e82:	08 95       	ret

00001e84 <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    1e84:	df 92       	push	r13
    1e86:	ef 92       	push	r14
    1e88:	ff 92       	push	r15
    1e8a:	0f 93       	push	r16
    1e8c:	1f 93       	push	r17
    1e8e:	cf 93       	push	r28
    1e90:	df 93       	push	r29
    1e92:	18 2f       	mov	r17, r24
    1e94:	09 2f       	mov	r16, r25
    1e96:	eb 01       	movw	r28, r22
    1e98:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1e9a:	df db       	rcall	.-2114   	; 0x165a <Endpoint_WaitUntilReady>
    1e9c:	d8 2e       	mov	r13, r24
    1e9e:	88 23       	and	r24, r24
    1ea0:	19 f5       	brne	.+70     	; 0x1ee8 <Endpoint_Write_Stream_LE+0x64>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1ea2:	81 2f       	mov	r24, r17
    1ea4:	90 2f       	mov	r25, r16
    1ea6:	9c 01       	movw	r18, r24
    1ea8:	89 01       	movw	r16, r18
    1eaa:	1c c0       	rjmp	.+56     	; 0x1ee4 <Endpoint_Write_Stream_LE+0x60>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1eac:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1eb0:	85 fd       	sbrc	r24, 5
    1eb2:	12 c0       	rjmp	.+36     	; 0x1ed8 <Endpoint_Write_Stream_LE+0x54>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1eb4:	80 91 e8 00 	lds	r24, 0x00E8
    1eb8:	8e 77       	andi	r24, 0x7E	; 126
    1eba:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    1ebe:	e1 14       	cp	r14, r1
    1ec0:	f1 04       	cpc	r15, r1
    1ec2:	31 f0       	breq	.+12     	; 0x1ed0 <Endpoint_Write_Stream_LE+0x4c>
    1ec4:	f7 01       	movw	r30, r14
    1ec6:	09 95       	icall
    1ec8:	81 30       	cpi	r24, 0x01	; 1
    1eca:	11 f4       	brne	.+4      	; 0x1ed0 <Endpoint_Write_Stream_LE+0x4c>
    1ecc:	85 e0       	ldi	r24, 0x05	; 5
    1ece:	0d c0       	rjmp	.+26     	; 0x1eea <Endpoint_Write_Stream_LE+0x66>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1ed0:	c4 db       	rcall	.-2168   	; 0x165a <Endpoint_WaitUntilReady>
    1ed2:	88 23       	and	r24, r24
    1ed4:	39 f0       	breq	.+14     	; 0x1ee4 <Endpoint_Write_Stream_LE+0x60>
    1ed6:	09 c0       	rjmp	.+18     	; 0x1eea <Endpoint_Write_Stream_LE+0x66>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1ed8:	f8 01       	movw	r30, r16
    1eda:	81 91       	ld	r24, Z+
    1edc:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    1ede:	80 93 f1 00 	sts	0x00F1, r24
			Length--;
    1ee2:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    1ee4:	20 97       	sbiw	r28, 0x00	; 0
    1ee6:	11 f7       	brne	.-60     	; 0x1eac <Endpoint_Write_Stream_LE+0x28>
    1ee8:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	1f 91       	pop	r17
    1ef0:	0f 91       	pop	r16
    1ef2:	ff 90       	pop	r15
    1ef4:	ef 90       	pop	r14
    1ef6:	df 90       	pop	r13
    1ef8:	08 95       	ret

00001efa <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1efa:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    1efc:	8e b3       	in	r24, 0x1e	; 30
    1efe:	88 23       	and	r24, r24
    1f00:	61 f0       	breq	.+24     	; 0x1f1a <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1f02:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1f06:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1f0a:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    1f0e:	83 ff       	sbrs	r24, 3
    1f10:	01 c0       	rjmp	.+2      	; 0x1f14 <USB_USBTask+0x1a>
		  USB_Device_ProcessControlRequest();
    1f12:	f5 dc       	rcall	.-1558   	; 0x18fe <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1f14:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1f16:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1f1a:	1f 91       	pop	r17
    1f1c:	08 95       	ret

00001f1e <CDC_Device_Event_Stub>:
#include "CDC.h"

void CDC_Device_Event_Stub(void)
{

}
    1f1e:	08 95       	ret

00001f20 <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1f20:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1f22:	8e b3       	in	r24, 0x1e	; 30
    1f24:	84 30       	cpi	r24, 0x04	; 4
    1f26:	41 f5       	brne	.+80     	; 0x1f78 <CDC_Device_ReceiveByte+0x58>
    1f28:	87 85       	ldd	r24, Z+15	; 0x0f
    1f2a:	90 89       	ldd	r25, Z+16	; 0x10
    1f2c:	a1 89       	ldd	r26, Z+17	; 0x11
    1f2e:	b2 89       	ldd	r27, Z+18	; 0x12
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	a1 05       	cpc	r26, r1
    1f34:	b1 05       	cpc	r27, r1
    1f36:	01 f1       	breq	.+64     	; 0x1f78 <CDC_Device_ReceiveByte+0x58>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
    1f38:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1f3a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1f3e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
    1f42:	82 ff       	sbrs	r24, 2
    1f44:	19 c0       	rjmp	.+50     	; 0x1f78 <CDC_Device_ReceiveByte+0x58>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1f46:	80 91 f2 00 	lds	r24, 0x00F2
    1f4a:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
    1f4e:	89 2b       	or	r24, r25
    1f50:	19 f4       	brne	.+6      	; 0x1f58 <CDC_Device_ReceiveByte+0x38>
    1f52:	2f ef       	ldi	r18, 0xFF	; 255
    1f54:	3f ef       	ldi	r19, 0xFF	; 255
    1f56:	04 c0       	rjmp	.+8      	; 0x1f60 <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    1f58:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_Byte();
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1f60:	80 91 f2 00 	lds	r24, 0x00F2
    1f64:	90 91 f3 00 	lds	r25, 0x00F3

		if (!(Endpoint_BytesInEndpoint()))
    1f68:	89 2b       	or	r24, r25
    1f6a:	41 f4       	brne	.+16     	; 0x1f7c <CDC_Device_ReceiveByte+0x5c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1f6c:	80 91 e8 00 	lds	r24, 0x00E8
    1f70:	8b 77       	andi	r24, 0x7B	; 123
    1f72:	80 93 e8 00 	sts	0x00E8, r24
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <CDC_Device_ReceiveByte+0x5c>
    1f78:	2f ef       	ldi	r18, 0xFF	; 255
    1f7a:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    1f7c:	c9 01       	movw	r24, r18
    1f7e:	08 95       	ret

00001f80 <CDC_Device_Flush>:
	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1f80:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1f82:	8e b3       	in	r24, 0x1e	; 30
    1f84:	84 30       	cpi	r24, 0x04	; 4
    1f86:	21 f5       	brne	.+72     	; 0x1fd0 <CDC_Device_Flush+0x50>
    1f88:	87 85       	ldd	r24, Z+15	; 0x0f
    1f8a:	90 89       	ldd	r25, Z+16	; 0x10
    1f8c:	a1 89       	ldd	r26, Z+17	; 0x11
    1f8e:	b2 89       	ldd	r27, Z+18	; 0x12
    1f90:	00 97       	sbiw	r24, 0x00	; 0
    1f92:	a1 05       	cpc	r26, r1
    1f94:	b1 05       	cpc	r27, r1
    1f96:	e1 f0       	breq	.+56     	; 0x1fd0 <CDC_Device_Flush+0x50>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    1f98:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1f9a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1f9e:	80 91 f2 00 	lds	r24, 0x00F2
    1fa2:	90 91 f3 00 	lds	r25, 0x00F3

	if (!(Endpoint_BytesInEndpoint()))
    1fa6:	89 2b       	or	r24, r25
    1fa8:	a9 f0       	breq	.+42     	; 0x1fd4 <CDC_Device_Flush+0x54>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1faa:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1fae:	80 91 e8 00 	lds	r24, 0x00E8
    1fb2:	8e 77       	andi	r24, 0x7E	; 126
    1fb4:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    1fb8:	95 fd       	sbrc	r25, 5
    1fba:	0c c0       	rjmp	.+24     	; 0x1fd4 <CDC_Device_Flush+0x54>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1fbc:	4e db       	rcall	.-2404   	; 0x165a <Endpoint_WaitUntilReady>
    1fbe:	98 2f       	mov	r25, r24
    1fc0:	88 23       	and	r24, r24
    1fc2:	49 f4       	brne	.+18     	; 0x1fd6 <CDC_Device_Flush+0x56>
    1fc4:	80 91 e8 00 	lds	r24, 0x00E8
    1fc8:	8e 77       	andi	r24, 0x7E	; 126
    1fca:	80 93 e8 00 	sts	0x00E8, r24
    1fce:	03 c0       	rjmp	.+6      	; 0x1fd6 <CDC_Device_Flush+0x56>
    1fd0:	92 e0       	ldi	r25, 0x02	; 2
    1fd2:	01 c0       	rjmp	.+2      	; 0x1fd6 <CDC_Device_Flush+0x56>
    1fd4:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    1fd6:	89 2f       	mov	r24, r25
    1fd8:	08 95       	ret

00001fda <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1fda:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1fdc:	8e b3       	in	r24, 0x1e	; 30
    1fde:	84 30       	cpi	r24, 0x04	; 4
    1fe0:	51 f4       	brne	.+20     	; 0x1ff6 <CDC_Device_USBTask+0x1c>
    1fe2:	87 85       	ldd	r24, Z+15	; 0x0f
    1fe4:	90 89       	ldd	r25, Z+16	; 0x10
    1fe6:	a1 89       	ldd	r26, Z+17	; 0x11
    1fe8:	b2 89       	ldd	r27, Z+18	; 0x12
    1fea:	00 97       	sbiw	r24, 0x00	; 0
    1fec:	a1 05       	cpc	r26, r1
    1fee:	b1 05       	cpc	r27, r1
    1ff0:	11 f0       	breq	.+4      	; 0x1ff6 <CDC_Device_USBTask+0x1c>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
    1ff2:	cf 01       	movw	r24, r30
    1ff4:	c5 cf       	rjmp	.-118    	; 0x1f80 <CDC_Device_Flush>
    1ff6:	08 95       	ret

00001ff8 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Data, Length, NO_STREAM_CALLBACK);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    1ff8:	1f 93       	push	r17
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1ffe:	8e b3       	in	r24, 0x1e	; 30
    2000:	84 30       	cpi	r24, 0x04	; 4
    2002:	d9 f4       	brne	.+54     	; 0x203a <CDC_Device_SendByte+0x42>
    2004:	87 85       	ldd	r24, Z+15	; 0x0f
    2006:	90 89       	ldd	r25, Z+16	; 0x10
    2008:	a1 89       	ldd	r26, Z+17	; 0x11
    200a:	b2 89       	ldd	r27, Z+18	; 0x12
    200c:	00 97       	sbiw	r24, 0x00	; 0
    200e:	a1 05       	cpc	r26, r1
    2010:	b1 05       	cpc	r27, r1
    2012:	99 f0       	breq	.+38     	; 0x203a <CDC_Device_SendByte+0x42>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    2014:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    2016:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    201a:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
    201e:	85 fd       	sbrc	r24, 5
    2020:	08 c0       	rjmp	.+16     	; 0x2032 <CDC_Device_SendByte+0x3a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2022:	80 91 e8 00 	lds	r24, 0x00E8
    2026:	8e 77       	andi	r24, 0x7E	; 126
    2028:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    202c:	16 db       	rcall	.-2516   	; 0x165a <Endpoint_WaitUntilReady>
    202e:	88 23       	and	r24, r24
    2030:	29 f4       	brne	.+10     	; 0x203c <CDC_Device_SendByte+0x44>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    2032:	10 93 f1 00 	sts	0x00F1, r17
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	01 c0       	rjmp	.+2      	; 0x203c <CDC_Device_SendByte+0x44>
		  return ErrorCode;
	}

	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
    203a:	82 e0       	ldi	r24, 0x02	; 2
}
    203c:	1f 91       	pop	r17
    203e:	08 95       	ret

00002040 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2040:	1f 93       	push	r17
    2042:	cf 93       	push	r28
    2044:	df 93       	push	r29
    2046:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    2048:	0d 96       	adiw	r24, 0x0d	; 13
    204a:	fc 01       	movw	r30, r24
    204c:	89 e0       	ldi	r24, 0x09	; 9
    204e:	df 01       	movw	r26, r30
    2050:	1d 92       	st	X+, r1
    2052:	8a 95       	dec	r24
    2054:	e9 f7       	brne	.-6      	; 0x2050 <CDC_Device_ConfigureEndpoints+0x10>
    2056:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	18 17       	cp	r17, r24
    205c:	29 f4       	brne	.+10     	; 0x2068 <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
    205e:	ea 81       	ldd	r30, Y+2	; 0x02
    2060:	fb 81       	ldd	r31, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
    2062:	8c 81       	ldd	r24, Y+4	; 0x04
    2064:	62 e0       	ldi	r22, 0x02	; 2
    2066:	10 c0       	rjmp	.+32     	; 0x2088 <CDC_Device_ConfigureEndpoints+0x48>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
    2068:	8d 81       	ldd	r24, Y+5	; 0x05
    206a:	18 17       	cp	r17, r24
    206c:	31 f4       	brne	.+12     	; 0x207a <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
    206e:	ee 81       	ldd	r30, Y+6	; 0x06
    2070:	ff 81       	ldd	r31, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    2072:	88 85       	ldd	r24, Y+8	; 0x08
    2074:	62 e0       	ldi	r22, 0x02	; 2
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	08 c0       	rjmp	.+16     	; 0x208a <CDC_Device_ConfigureEndpoints+0x4a>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
    207a:	89 85       	ldd	r24, Y+9	; 0x09
    207c:	18 17       	cp	r17, r24
    207e:	09 f5       	brne	.+66     	; 0x20c2 <CDC_Device_ConfigureEndpoints+0x82>
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
    2080:	ea 85       	ldd	r30, Y+10	; 0x0a
    2082:	fb 85       	ldd	r31, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
    2084:	8c 85       	ldd	r24, Y+12	; 0x0c
    2086:	63 e0       	ldi	r22, 0x03	; 3
    2088:	31 e0       	ldi	r19, 0x01	; 1
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    208a:	88 23       	and	r24, r24
    208c:	11 f4       	brne	.+4      	; 0x2092 <CDC_Device_ConfigureEndpoints+0x52>
    208e:	40 e0       	ldi	r20, 0x00	; 0
    2090:	01 c0       	rjmp	.+2      	; 0x2094 <CDC_Device_ConfigureEndpoints+0x54>
    2092:	44 e0       	ldi	r20, 0x04	; 4
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	88 e0       	ldi	r24, 0x08	; 8
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	03 c0       	rjmp	.+6      	; 0x20a2 <CDC_Device_ConfigureEndpoints+0x62>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    209c:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    209e:	88 0f       	add	r24, r24
    20a0:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    20a2:	8e 17       	cp	r24, r30
    20a4:	9f 07       	cpc	r25, r31
    20a6:	d0 f3       	brcs	.-12     	; 0x209c <CDC_Device_ConfigureEndpoints+0x5c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
    20a8:	62 95       	swap	r22
    20aa:	66 0f       	add	r22, r22
    20ac:	66 0f       	add	r22, r22
    20ae:	60 7c       	andi	r22, 0xC0	; 192
    20b0:	63 2b       	or	r22, r19
    20b2:	42 60       	ori	r20, 0x02	; 2
    20b4:	22 95       	swap	r18
    20b6:	20 7f       	andi	r18, 0xF0	; 240
    20b8:	42 2b       	or	r20, r18
    20ba:	81 2f       	mov	r24, r17
    20bc:	9c da       	rcall	.-2760   	; 0x15f6 <Endpoint_ConfigureEndpoint_Prv>
    20be:	88 23       	and	r24, r24
    20c0:	21 f0       	breq	.+8      	; 0x20ca <CDC_Device_ConfigureEndpoints+0x8a>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    20c2:	1f 5f       	subi	r17, 0xFF	; 255
    20c4:	17 30       	cpi	r17, 0x07	; 7
    20c6:	41 f6       	brne	.-112    	; 0x2058 <CDC_Device_ConfigureEndpoints+0x18>
    20c8:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
    20ca:	df 91       	pop	r29
    20cc:	cf 91       	pop	r28
    20ce:	1f 91       	pop	r17
    20d0:	08 95       	ret

000020d2 <CDC_Device_ProcessControlRequest>:
{

}

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    20d2:	cf 93       	push	r28
    20d4:	df 93       	push	r29
    20d6:	ec 01       	movw	r28, r24
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    20d8:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    20dc:	83 ff       	sbrs	r24, 3
    20de:	64 c0       	rjmp	.+200    	; 0x21a8 <__stack+0xa9>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    20e0:	88 81       	ld	r24, Y
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	20 91 72 03 	lds	r18, 0x0372
    20e8:	30 91 73 03 	lds	r19, 0x0373
    20ec:	28 17       	cp	r18, r24
    20ee:	39 07       	cpc	r19, r25
    20f0:	09 f0       	breq	.+2      	; 0x20f4 <CDC_Device_ProcessControlRequest+0x22>
    20f2:	5a c0       	rjmp	.+180    	; 0x21a8 <__stack+0xa9>
	  return;

	switch (USB_ControlRequest.bRequest)
    20f4:	80 91 6f 03 	lds	r24, 0x036F
    20f8:	81 32       	cpi	r24, 0x21	; 33
    20fa:	61 f0       	breq	.+24     	; 0x2114 <__stack+0x15>
    20fc:	82 32       	cpi	r24, 0x22	; 34
    20fe:	20 f4       	brcc	.+8      	; 0x2108 <__stack+0x9>
    2100:	80 32       	cpi	r24, 0x20	; 32
    2102:	09 f0       	breq	.+2      	; 0x2106 <__stack+0x7>
    2104:	51 c0       	rjmp	.+162    	; 0x21a8 <__stack+0xa9>
    2106:	1b c0       	rjmp	.+54     	; 0x213e <__stack+0x3f>
    2108:	82 32       	cpi	r24, 0x22	; 34
    210a:	81 f1       	breq	.+96     	; 0x216c <__stack+0x6d>
    210c:	83 32       	cpi	r24, 0x23	; 35
    210e:	09 f0       	breq	.+2      	; 0x2112 <__stack+0x13>
    2110:	4b c0       	rjmp	.+150    	; 0x21a8 <__stack+0xa9>
    2112:	3c c0       	rjmp	.+120    	; 0x218c <__stack+0x8d>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2114:	80 91 6e 03 	lds	r24, 0x036E
    2118:	81 3a       	cpi	r24, 0xA1	; 161
    211a:	09 f0       	breq	.+2      	; 0x211e <__stack+0x1f>
    211c:	45 c0       	rjmp	.+138    	; 0x21a8 <__stack+0xa9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    211e:	80 91 e8 00 	lds	r24, 0x00E8
    2122:	87 7f       	andi	r24, 0xF7	; 247
    2124:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
    2128:	ce 01       	movw	r24, r28
    212a:	0f 96       	adiw	r24, 0x0f	; 15
    212c:	67 e0       	ldi	r22, 0x07	; 7
    212e:	70 e0       	ldi	r23, 0x00	; 0
    2130:	3a dd       	rcall	.-1420   	; 0x1ba6 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2132:	80 91 e8 00 	lds	r24, 0x00E8
    2136:	8b 77       	andi	r24, 0x7B	; 123
    2138:	80 93 e8 00 	sts	0x00E8, r24
    213c:	35 c0       	rjmp	.+106    	; 0x21a8 <__stack+0xa9>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    213e:	80 91 6e 03 	lds	r24, 0x036E
    2142:	81 32       	cpi	r24, 0x21	; 33
    2144:	89 f5       	brne	.+98     	; 0x21a8 <__stack+0xa9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2146:	80 91 e8 00 	lds	r24, 0x00E8
    214a:	87 7f       	andi	r24, 0xF7	; 247
    214c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
    2150:	ce 01       	movw	r24, r28
    2152:	0f 96       	adiw	r24, 0x0f	; 15
    2154:	67 e0       	ldi	r22, 0x07	; 7
    2156:	70 e0       	ldi	r23, 0x00	; 0
    2158:	e0 dd       	rcall	.-1088   	; 0x1d1a <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    215a:	80 91 e8 00 	lds	r24, 0x00E8
    215e:	8e 77       	andi	r24, 0x7E	; 126
    2160:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    2164:	ce 01       	movw	r24, r28
    2166:	0e 94 09 01 	call	0x212	; 0x212 <EVENT_CDC_Device_LineEncodingChanged>
    216a:	1e c0       	rjmp	.+60     	; 0x21a8 <__stack+0xa9>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    216c:	80 91 6e 03 	lds	r24, 0x036E
    2170:	81 32       	cpi	r24, 0x21	; 33
    2172:	d1 f4       	brne	.+52     	; 0x21a8 <__stack+0xa9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2174:	80 91 e8 00 	lds	r24, 0x00E8
    2178:	87 7f       	andi	r24, 0xF7	; 247
    217a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    217e:	4e da       	rcall	.-2916   	; 0x161c <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    2180:	80 91 70 03 	lds	r24, 0x0370
    2184:	8d 87       	std	Y+13, r24	; 0x0d

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    2186:	ce 01       	movw	r24, r28
    2188:	ca de       	rcall	.-620    	; 0x1f1e <CDC_Device_Event_Stub>
    218a:	0e c0       	rjmp	.+28     	; 0x21a8 <__stack+0xa9>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    218c:	80 91 6e 03 	lds	r24, 0x036E
    2190:	81 32       	cpi	r24, 0x21	; 33
    2192:	51 f4       	brne	.+20     	; 0x21a8 <__stack+0xa9>
    2194:	80 91 e8 00 	lds	r24, 0x00E8
    2198:	87 7f       	andi	r24, 0xF7	; 247
    219a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    219e:	3e da       	rcall	.-2948   	; 0x161c <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    21a0:	ce 01       	movw	r24, r28
    21a2:	60 91 70 03 	lds	r22, 0x0370
    21a6:	bb de       	rcall	.-650    	; 0x1f1e <CDC_Device_Event_Stub>
			}

			break;
	}
}
    21a8:	df 91       	pop	r29
    21aa:	cf 91       	pop	r28
    21ac:	08 95       	ret

000021ae <__udivmodsi4>:
    21ae:	a1 e2       	ldi	r26, 0x21	; 33
    21b0:	1a 2e       	mov	r1, r26
    21b2:	aa 1b       	sub	r26, r26
    21b4:	bb 1b       	sub	r27, r27
    21b6:	fd 01       	movw	r30, r26
    21b8:	0d c0       	rjmp	.+26     	; 0x21d4 <__udivmodsi4_ep>

000021ba <__udivmodsi4_loop>:
    21ba:	aa 1f       	adc	r26, r26
    21bc:	bb 1f       	adc	r27, r27
    21be:	ee 1f       	adc	r30, r30
    21c0:	ff 1f       	adc	r31, r31
    21c2:	a2 17       	cp	r26, r18
    21c4:	b3 07       	cpc	r27, r19
    21c6:	e4 07       	cpc	r30, r20
    21c8:	f5 07       	cpc	r31, r21
    21ca:	20 f0       	brcs	.+8      	; 0x21d4 <__udivmodsi4_ep>
    21cc:	a2 1b       	sub	r26, r18
    21ce:	b3 0b       	sbc	r27, r19
    21d0:	e4 0b       	sbc	r30, r20
    21d2:	f5 0b       	sbc	r31, r21

000021d4 <__udivmodsi4_ep>:
    21d4:	66 1f       	adc	r22, r22
    21d6:	77 1f       	adc	r23, r23
    21d8:	88 1f       	adc	r24, r24
    21da:	99 1f       	adc	r25, r25
    21dc:	1a 94       	dec	r1
    21de:	69 f7       	brne	.-38     	; 0x21ba <__udivmodsi4_loop>
    21e0:	60 95       	com	r22
    21e2:	70 95       	com	r23
    21e4:	80 95       	com	r24
    21e6:	90 95       	com	r25
    21e8:	9b 01       	movw	r18, r22
    21ea:	ac 01       	movw	r20, r24
    21ec:	bd 01       	movw	r22, r26
    21ee:	cf 01       	movw	r24, r30
    21f0:	08 95       	ret

000021f2 <__eerd_byte_usb1287>:
    21f2:	f9 99       	sbic	0x1f, 1	; 31
    21f4:	fe cf       	rjmp	.-4      	; 0x21f2 <__eerd_byte_usb1287>
    21f6:	92 bd       	out	0x22, r25	; 34
    21f8:	81 bd       	out	0x21, r24	; 33
    21fa:	f8 9a       	sbi	0x1f, 0	; 31
    21fc:	99 27       	eor	r25, r25
    21fe:	80 b5       	in	r24, 0x20	; 32
    2200:	08 95       	ret

00002202 <__eeupd_byte_usb1287>:
    2202:	26 2f       	mov	r18, r22

00002204 <__eeupd_r18_usb1287>:
    2204:	f9 99       	sbic	0x1f, 1	; 31
    2206:	fe cf       	rjmp	.-4      	; 0x2204 <__eeupd_r18_usb1287>
    2208:	92 bd       	out	0x22, r25	; 34
    220a:	81 bd       	out	0x21, r24	; 33
    220c:	f8 9a       	sbi	0x1f, 0	; 31
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	00 b4       	in	r0, 0x20	; 32
    2212:	02 16       	cp	r0, r18
    2214:	39 f0       	breq	.+14     	; 0x2224 <__eeupd_r18_usb1287+0x20>
    2216:	1f ba       	out	0x1f, r1	; 31
    2218:	20 bd       	out	0x20, r18	; 32
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	fa 9a       	sbi	0x1f, 2	; 31
    2220:	f9 9a       	sbi	0x1f, 1	; 31
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	08 95       	ret

00002226 <_exit>:
    2226:	f8 94       	cli

00002228 <__stop_program>:
    2228:	ff cf       	rjmp	.-2      	; 0x2228 <__stop_program>
