
AVRISP-MKII.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  0000264c  00002700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000264c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800142  00800142  00002742  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  00002742  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000858  00000000  00000000  00002744  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000013d  00000000  00000000  00002f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000530  00000000  00000000  000030d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000e78  00000000  00000000  00003609  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000071a7  00000000  00000000  00004481  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002093  00000000  00000000  0000b628  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005c7f  00000000  00000000  0000d6bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000800  00000000  00000000  0001333c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002715  00000000  00000000  00013b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002e54  00000000  00000000  00016251  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000005d0  00000000  00000000  000190a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return Endpoint_IsConfigured();
}

void Endpoint_ClearEndpoints(void)
{
       0:	29 c1       	rjmp	.+594    	; 0x254 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
       4:	43 c1       	rjmp	.+646    	; 0x28c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c1       	rjmp	.+642    	; 0x28c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c1       	rjmp	.+638    	; 0x28c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c1       	rjmp	.+634    	; 0x28c <__bad_interrupt>
      12:	00 00       	nop
      14:	3b c1       	rjmp	.+630    	; 0x28c <__bad_interrupt>
      16:	00 00       	nop
      18:	39 c1       	rjmp	.+626    	; 0x28c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	37 c1       	rjmp	.+622    	; 0x28c <__bad_interrupt>
      1e:	00 00       	nop
      20:	35 c1       	rjmp	.+618    	; 0x28c <__bad_interrupt>
      22:	00 00       	nop
      24:	33 c1       	rjmp	.+614    	; 0x28c <__bad_interrupt>
      26:	00 00       	nop
      28:	31 c1       	rjmp	.+610    	; 0x28c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 30 10 	jmp	0x2060	; 0x2060 <__vector_11>
      30:	2d c1       	rjmp	.+602    	; 0x28c <__bad_interrupt>
      32:	00 00       	nop
      34:	2b c1       	rjmp	.+598    	; 0x28c <__bad_interrupt>
      36:	00 00       	nop
      38:	29 c1       	rjmp	.+594    	; 0x28c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	fa c7       	rjmp	.+4084   	; 0x1032 <__vector_15>
      3e:	00 00       	nop
      40:	25 c1       	rjmp	.+586    	; 0x28c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c1       	rjmp	.+582    	; 0x28c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c1       	rjmp	.+578    	; 0x28c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b3 c1       	rjmp	.+870    	; 0x3b4 <__vector_19>
      4e:	00 00       	nop
      50:	1d c1       	rjmp	.+570    	; 0x28c <__bad_interrupt>
      52:	00 00       	nop
      54:	1b c1       	rjmp	.+566    	; 0x28c <__bad_interrupt>
      56:	00 00       	nop
      58:	19 c1       	rjmp	.+562    	; 0x28c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	17 c1       	rjmp	.+558    	; 0x28c <__bad_interrupt>
      5e:	00 00       	nop
      60:	15 c1       	rjmp	.+554    	; 0x28c <__bad_interrupt>
      62:	00 00       	nop
      64:	13 c1       	rjmp	.+550    	; 0x28c <__bad_interrupt>
      66:	00 00       	nop
      68:	11 c1       	rjmp	.+546    	; 0x28c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0f c1       	rjmp	.+542    	; 0x28c <__bad_interrupt>
      6e:	00 00       	nop
      70:	0d c1       	rjmp	.+538    	; 0x28c <__bad_interrupt>
      72:	00 00       	nop

00000074 <DeviceDescriptor>:
      74:	12 01 10 01 ff 00 00 10 eb 03 04 21 00 02 01 02     ...........!....
      84:	03 01                                               ..

00000086 <ConfigurationDescriptor>:
      86:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 ff 00     .. .....2.......
      96:	00 00 07 05 82 02 40 00 0a 07 05 02 02 40 00 0a     ......@......@..

000000a6 <LanguageString>:
      a6:	04 03 09 04                                         ....

000000aa <ManufacturerString>:
      aa:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      ba:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000c4 <ProductString>:
      c4:	2e 03 4c 00 55 00 46 00 41 00 20 00 41 00 56 00     ..L.U.F.A. .A.V.
      d4:	52 00 49 00 53 00 50 00 20 00 4d 00 6b 00 49 00     R.I.S.P. .M.k.I.
      e4:	49 00 20 00 43 00 6c 00 6f 00 6e 00 65 00 00 00     I. .C.l.o.n.e...

000000f4 <SerialString>:
      f4:	1c 03 30 00 30 00 30 00 30 00 41 00 30 00 30 00     ..0.0.0.0.A.0.0.
     104:	31 00 32 00 38 00 32 00 35 00 35 00 00 00           1.2.8.2.5.5...

00000112 <TimerCompareFromSCKDuration>:
     112:	09 00 0a 00 0a 00 0b 00 0c 00 0d 00 0d 00 0e 00     ................
     122:	0f 00 10 00 10 00 12 00 13 00 13 00 14 00 16 00     ................
     132:	16 00 18 00 19 00 1a 00 1c 00 1d 00 1f 00 20 00     .............. .
     142:	22 00 23 00 25 00 27 00 29 00 2b 00 2e 00 30 00     ".#.%.'.).+...0.
     152:	32 00 34 00 37 00 3a 00 3d 00 40 00 43 00 46 00     2.4.7.:.=.@.C.F.
     162:	4a 00 4e 00 52 00 55 00 5a 00 5e 00 63 00 68 00     J.N.R.U.Z.^.c.h.
     172:	6d 00 73 00 78 00 7e 00 84 00 8b 00 91 00 99 00     m.s.x.~.........
     182:	a0 00 a9 00 b1 00 b9 00 c3 00 cc 00 d6 00 e1 00     ................
     192:	ec 00 f7 00 04 01 11 01 1e 01 2d 01 3b 01 4b 01     ..........-.;.K.
     1a2:	5b 01 6c 01 7d 01 91 01 a5 01 ba 01 cf 01 e6 01     [.l.}...........
     1b2:	fe 01 16 02 31 02 4c 02 6a 02 88 02 a8 02 ca 02     ....1.L.j.......
     1c2:	ed 02 11 03 38 03 60 03 8b 03 b8 03 e7 03 18 04     ....8.`.........
     1d2:	4b 04 81 04 b9 04 f5 04 34 05 75 05 b9 05 01 06     K.......4.u.....
     1e2:	4e 06 9d 06 ef 06 48 07 a3 07 04 08 65 08 d0 08     N.....H.....e...
     1f2:	40 09 b6 09 2b 0a ab 0a 30 0b c3 0b 51 0c ee 0c     @...+...0...Q...
     202:	8f 0d 40 0e f6 0e af 0f 68 10 47 11 14 12 f5 12     ..@.....h.G.....
     212:	ed 13 e2 14 f0 15 f9 16 1b 18 5c 19 91 1a e5 1b     ..........\.....
     222:	25 1d 83 1e 03 20 ab 21 30 23 32 25 0f 27 f1 28     %.... .!0#2%.'.(
     232:	f8 2a 1a 2d 49 2f a1 31 14 34 a1 36 45 39 17 3c     .*.-I/.1.4.6E9.<
     242:	1a 3f 34 42 60 45 df 48 70 4c                       .?4B`E.HpL

0000024c <SPIMaskFromSCKDuration>:
     24c:	40 00 41 01 42 43 03 00                             @.A.BC..

00000254 <__ctors_end>:
     254:	11 24       	eor	r1, r1
     256:	1f be       	out	0x3f, r1	; 63
     258:	cf ef       	ldi	r28, 0xFF	; 255
     25a:	d2 e0       	ldi	r29, 0x02	; 2
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	cd bf       	out	0x3d, r28	; 61

00000260 <__do_copy_data>:
     260:	11 e0       	ldi	r17, 0x01	; 1
     262:	a0 e0       	ldi	r26, 0x00	; 0
     264:	b1 e0       	ldi	r27, 0x01	; 1
     266:	ec e4       	ldi	r30, 0x4C	; 76
     268:	f6 e2       	ldi	r31, 0x26	; 38
     26a:	02 c0       	rjmp	.+4      	; 0x270 <.do_copy_data_start>

0000026c <.do_copy_data_loop>:
     26c:	05 90       	lpm	r0, Z+
     26e:	0d 92       	st	X+, r0

00000270 <.do_copy_data_start>:
     270:	a2 34       	cpi	r26, 0x42	; 66
     272:	b1 07       	cpc	r27, r17
     274:	d9 f7       	brne	.-10     	; 0x26c <.do_copy_data_loop>

00000276 <__do_clear_bss>:
     276:	11 e0       	ldi	r17, 0x01	; 1
     278:	a2 e4       	ldi	r26, 0x42	; 66
     27a:	b1 e0       	ldi	r27, 0x01	; 1
     27c:	01 c0       	rjmp	.+2      	; 0x280 <.do_clear_bss_start>

0000027e <.do_clear_bss_loop>:
     27e:	1d 92       	st	X+, r1

00000280 <.do_clear_bss_start>:
     280:	a5 35       	cpi	r26, 0x55	; 85
     282:	b1 07       	cpc	r27, r17
     284:	e1 f7       	brne	.-8      	; 0x27e <.do_clear_bss_loop>
     286:	4e d0       	rcall	.+156    	; 0x324 <main>
     288:	0c 94 24 13 	jmp	0x2648	; 0x2648 <_exit>

0000028c <__bad_interrupt>:
     28c:	b9 ce       	rjmp	.-654    	; 0x0 <__vectors>

0000028e <EVENT_USB_Device_Connect>:
				PORTB &= ~LedMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LedMask)
			{
				PORTB = ((PORTB & ~LEDS_ALL_LEDS) | LedMask);
     28e:	85 b1       	in	r24, 0x05	; 5
     290:	8f 71       	andi	r24, 0x1F	; 31
     292:	80 6c       	ori	r24, 0xC0	; 192
     294:	85 b9       	out	0x05, r24	; 5

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     296:	08 95       	ret

00000298 <EVENT_USB_Device_Disconnect>:
     298:	85 b1       	in	r24, 0x05	; 5
     29a:	8f 71       	andi	r24, 0x1F	; 31
     29c:	80 64       	ori	r24, 0x40	; 64
     29e:	85 b9       	out	0x05, r24	; 5

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     2a0:	08 95       	ret

000002a2 <AVRISP_Task>:

/** Processes incoming V2 Protocol commands from the host, returning a response when required. */
void AVRISP_Task(void)
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     2a2:	8e b3       	in	r24, 0x1e	; 30
     2a4:	84 30       	cpi	r24, 0x04	; 4
     2a6:	89 f4       	brne	.+34     	; 0x2ca <AVRISP_Task+0x28>
	  return;

	V2Params_UpdateParamValues();
     2a8:	b9 d1       	rcall	.+882    	; 0x61c <V2Params_UpdateParamValues>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     2aa:	82 e0       	ldi	r24, 0x02	; 2
     2ac:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     2b0:	80 91 e8 00 	lds	r24, 0x00E8

	Endpoint_SelectEndpoint(AVRISP_DATA_OUT_EPNUM);

	/* Check to see if a V2 Protocol command has been received */
	if (Endpoint_IsOUTReceived())
     2b4:	82 ff       	sbrs	r24, 2
     2b6:	09 c0       	rjmp	.+18     	; 0x2ca <AVRISP_Task+0x28>
     2b8:	85 b1       	in	r24, 0x05	; 5
     2ba:	8f 71       	andi	r24, 0x1F	; 31
     2bc:	80 6c       	ori	r24, 0xC0	; 192
     2be:	85 b9       	out	0x05, r24	; 5
	{
		LEDs_SetAllLEDs(LEDMASK_BUSY);

		/* Pass off processing of the V2 Protocol command to the V2 Protocol handler */
		V2Protocol_ProcessCommand();
     2c0:	8c d0       	rcall	.+280    	; 0x3da <V2Protocol_ProcessCommand>
     2c2:	85 b1       	in	r24, 0x05	; 5
     2c4:	8f 71       	andi	r24, 0x1F	; 31
     2c6:	80 68       	ori	r24, 0x80	; 128
     2c8:	85 b9       	out	0x05, r24	; 5
     2ca:	08 95       	ret

000002cc <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
     2cc:	82 e0       	ldi	r24, 0x02	; 2
     2ce:	60 e8       	ldi	r22, 0x80	; 128
     2d0:	42 e3       	ldi	r20, 0x32	; 50
     2d2:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <Endpoint_ConfigureEndpoint_Prv>
	ConfigSuccess &= Endpoint_ConfigureEndpoint(AVRISP_DATA_IN_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_IN,
	                                            AVRISP_DATA_EPSIZE, ENDPOINT_BANK_SINGLE);
	#endif

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     2d6:	80 fd       	sbrc	r24, 0
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <EVENT_USB_Device_ConfigurationChanged+0x12>
     2da:	90 e4       	ldi	r25, 0x40	; 64
     2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <EVENT_USB_Device_ConfigurationChanged+0x14>
     2de:	90 e8       	ldi	r25, 0x80	; 128
     2e0:	85 b1       	in	r24, 0x05	; 5
     2e2:	8f 71       	andi	r24, 0x1F	; 31
     2e4:	98 2b       	or	r25, r24
     2e6:	95 b9       	out	0x05, r25	; 5
}
     2e8:	08 95       	ret

000002ea <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2ea:	84 b7       	in	r24, 0x34	; 52
     2ec:	87 7f       	andi	r24, 0xF7	; 247
     2ee:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2f0:	88 e1       	ldi	r24, 0x18	; 24
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	f8 94       	cli
     2f6:	80 93 60 00 	sts	0x0060, r24
     2fa:	10 92 60 00 	sts	0x0060, r1
     2fe:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	20 e8       	ldi	r18, 0x80	; 128
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	f8 94       	cli
     30a:	20 93 61 00 	sts	0x0061, r18
     30e:	80 93 61 00 	sts	0x0061, r24
     312:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |=  LEDS_ALL_LEDS;
     314:	84 b1       	in	r24, 0x04	; 4
     316:	80 6e       	ori	r24, 0xE0	; 224
     318:	84 b9       	out	0x04, r24	; 4
				PORTB &= ~LEDS_ALL_LEDS;
     31a:	85 b1       	in	r24, 0x05	; 5
     31c:	8f 71       	andi	r24, 0x1F	; 31
     31e:	85 b9       	out	0x05, r24	; 5

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     320:	0c 94 21 10 	jmp	0x2042	; 0x2042 <USB_Init>

00000324 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     324:	e2 df       	rcall	.-60     	; 0x2ea <SetupHardware>
	V2Protocol_Init();
     326:	72 d1       	rcall	.+740    	; 0x60c <V2Protocol_Init>
				PORTB &= ~LedMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LedMask)
			{
				PORTB = ((PORTB & ~LEDS_ALL_LEDS) | LedMask);
     328:	85 b1       	in	r24, 0x05	; 5
     32a:	8f 71       	andi	r24, 0x1F	; 31
     32c:	80 64       	ori	r24, 0x40	; 64
     32e:	85 b9       	out	0x05, r24	; 5

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     330:	78 94       	sei
	for (;;)
	{
		#if (BOARD == BOARD_USBTINYMKII)
		/* On the USBTINY-MKII target, there is a secondary LED which indicates the current selected power
		   mode - either VBUS, or sourced from the VTARGET pin of the programming connectors */
		LEDs_ChangeLEDs(LEDMASK_VBUSPOWER, (PIND & (1 << 0)) ? 0 : LEDMASK_VBUSPOWER);
     332:	48 99       	sbic	0x09, 0	; 9
     334:	02 c0       	rjmp	.+4      	; 0x33a <main+0x16>
     336:	90 e2       	ldi	r25, 0x20	; 32
     338:	01 c0       	rjmp	.+2      	; 0x33c <main+0x18>
     33a:	90 e0       	ldi	r25, 0x00	; 0
			}

			static inline void LEDs_ChangeLEDs(const uint8_t LedMask,
			                                   const uint8_t ActiveMask)
			{
				PORTB = ((PORTB & ~LedMask) | ActiveMask);
     33c:	85 b1       	in	r24, 0x05	; 5
     33e:	8f 7d       	andi	r24, 0xDF	; 223
     340:	98 2b       	or	r25, r24
     342:	95 b9       	out	0x05, r25	; 5
		#endif

		AVRISP_Task();
     344:	ae df       	rcall	.-164    	; 0x2a2 <AVRISP_Task>
		USB_USBTask();
     346:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <USB_USBTask>
     34a:	f3 cf       	rjmp	.-26     	; 0x332 <main+0xe>

0000034c <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     34c:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     34e:	92 30       	cpi	r25, 0x02	; 2
     350:	49 f0       	breq	.+18     	; 0x364 <CALLBACK_USB_GetDescriptor+0x18>
     352:	93 30       	cpi	r25, 0x03	; 3
     354:	61 f0       	breq	.+24     	; 0x36e <CALLBACK_USB_GetDescriptor+0x22>
     356:	91 30       	cpi	r25, 0x01	; 1
     358:	29 f5       	brne	.+74     	; 0x3a4 <CALLBACK_USB_GetDescriptor+0x58>
     35a:	e4 e7       	ldi	r30, 0x74	; 116
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	22 e1       	ldi	r18, 0x12	; 18
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	24 c0       	rjmp	.+72     	; 0x3ac <CALLBACK_USB_GetDescriptor+0x60>
     364:	e6 e8       	ldi	r30, 0x86	; 134
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	20 e2       	ldi	r18, 0x20	; 32
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	1f c0       	rjmp	.+62     	; 0x3ac <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     36e:	81 30       	cpi	r24, 0x01	; 1
     370:	59 f0       	breq	.+22     	; 0x388 <CALLBACK_USB_GetDescriptor+0x3c>
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	28 f0       	brcs	.+10     	; 0x380 <CALLBACK_USB_GetDescriptor+0x34>
     376:	82 30       	cpi	r24, 0x02	; 2
     378:	59 f0       	breq	.+22     	; 0x390 <CALLBACK_USB_GetDescriptor+0x44>
     37a:	83 30       	cpi	r24, 0x03	; 3
     37c:	99 f4       	brne	.+38     	; 0x3a4 <CALLBACK_USB_GetDescriptor+0x58>
     37e:	0c c0       	rjmp	.+24     	; 0x398 <CALLBACK_USB_GetDescriptor+0x4c>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     380:	e6 ea       	ldi	r30, 0xA6	; 166
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	84 91       	lpm	r24, Z+
     386:	0b c0       	rjmp	.+22     	; 0x39e <CALLBACK_USB_GetDescriptor+0x52>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     388:	ea ea       	ldi	r30, 0xAA	; 170
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	84 91       	lpm	r24, Z+
     38e:	07 c0       	rjmp	.+14     	; 0x39e <CALLBACK_USB_GetDescriptor+0x52>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     390:	e4 ec       	ldi	r30, 0xC4	; 196
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	84 91       	lpm	r24, Z+
     396:	03 c0       	rjmp	.+6      	; 0x39e <CALLBACK_USB_GetDescriptor+0x52>
					break;
				case 0x03:
					Address = &SerialString;
					Size    = pgm_read_byte(&SerialString.Header.Size);
     398:	e4 ef       	ldi	r30, 0xF4	; 244
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	84 91       	lpm	r24, Z+
     39e:	28 2f       	mov	r18, r24
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	04 c0       	rjmp	.+8      	; 0x3ac <CALLBACK_USB_GetDescriptor+0x60>
     3a4:	e0 e0       	ldi	r30, 0x00	; 0
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	20 e0       	ldi	r18, 0x00	; 0
     3aa:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     3ac:	ed 93       	st	X+, r30
     3ae:	fc 93       	st	X, r31
	return Size;
}
     3b0:	c9 01       	movw	r24, r18
     3b2:	08 95       	ret

000003b4 <__vector_19>:
bool MustLoadExtendedAddress;


/** ISR to manage timeouts whilst processing a V2Protocol command */
ISR(TIMER0_COMPA_vect, ISR_NOBLOCK)
{
     3b4:	78 94       	sei
     3b6:	1f 92       	push	r1
     3b8:	0f 92       	push	r0
     3ba:	0f b6       	in	r0, 0x3f	; 63
     3bc:	0f 92       	push	r0
     3be:	11 24       	eor	r1, r1
     3c0:	8f 93       	push	r24
	if (TimeoutTicksRemaining)
     3c2:	8a b5       	in	r24, 0x2a	; 42
     3c4:	88 23       	and	r24, r24
     3c6:	19 f0       	breq	.+6      	; 0x3ce <__vector_19+0x1a>
	  TimeoutTicksRemaining--;
     3c8:	8a b5       	in	r24, 0x2a	; 42
     3ca:	81 50       	subi	r24, 0x01	; 1
     3cc:	8a bd       	out	0x2a, r24	; 42
}
     3ce:	8f 91       	pop	r24
     3d0:	0f 90       	pop	r0
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	0f 90       	pop	r0
     3d6:	1f 90       	pop	r1
     3d8:	18 95       	reti

000003da <V2Protocol_ProcessCommand>:
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
void V2Protocol_ProcessCommand(void)
{
     3da:	ff 92       	push	r15
     3dc:	0f 93       	push	r16
     3de:	1f 93       	push	r17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     3e0:	10 91 f1 00 	lds	r17, 0x00F1
	uint8_t V2Command = Endpoint_Read_Byte();

	/* Start the timeout management timer */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
     3e4:	84 e6       	ldi	r24, 0x64	; 100
     3e6:	8a bd       	out	0x2a, r24	; 42
	TCCR0B = ((1 << CS02) | (1 << CS00));
     3e8:	85 e0       	ldi	r24, 0x05	; 5
     3ea:	85 bd       	out	0x25, r24	; 37

	switch (V2Command)
     3ec:	14 31       	cpi	r17, 0x14	; 20
     3ee:	09 f4       	brne	.+2      	; 0x3f2 <V2Protocol_ProcessCommand+0x18>
     3f0:	cb c0       	rjmp	.+406    	; 0x588 <V2Protocol_ProcessCommand+0x1ae>
     3f2:	15 31       	cpi	r17, 0x15	; 21
     3f4:	10 f5       	brcc	.+68     	; 0x43a <V2Protocol_ProcessCommand+0x60>
     3f6:	1a 30       	cpi	r17, 0x0A	; 10
     3f8:	09 f4       	brne	.+2      	; 0x3fc <V2Protocol_ProcessCommand+0x22>
     3fa:	ad c0       	rjmp	.+346    	; 0x556 <V2Protocol_ProcessCommand+0x17c>
     3fc:	1b 30       	cpi	r17, 0x0B	; 11
     3fe:	68 f4       	brcc	.+26     	; 0x41a <V2Protocol_ProcessCommand+0x40>
     400:	14 30       	cpi	r17, 0x04	; 4
     402:	38 f4       	brcc	.+14     	; 0x412 <V2Protocol_ProcessCommand+0x38>
     404:	12 30       	cpi	r17, 0x02	; 2
     406:	08 f0       	brcs	.+2      	; 0x40a <V2Protocol_ProcessCommand+0x30>
     408:	54 c0       	rjmp	.+168    	; 0x4b2 <V2Protocol_ProcessCommand+0xd8>
     40a:	11 30       	cpi	r17, 0x01	; 1
     40c:	09 f0       	breq	.+2      	; 0x410 <V2Protocol_ProcessCommand+0x36>
     40e:	d4 c0       	rjmp	.+424    	; 0x5b8 <V2Protocol_ProcessCommand+0x1de>
     410:	33 c0       	rjmp	.+102    	; 0x478 <V2Protocol_ProcessCommand+0x9e>
     412:	16 30       	cpi	r17, 0x06	; 6
     414:	09 f0       	breq	.+2      	; 0x418 <V2Protocol_ProcessCommand+0x3e>
     416:	d0 c0       	rjmp	.+416    	; 0x5b8 <V2Protocol_ProcessCommand+0x1de>
     418:	78 c0       	rjmp	.+240    	; 0x50a <V2Protocol_ProcessCommand+0x130>
     41a:	11 31       	cpi	r17, 0x11	; 17
     41c:	09 f4       	brne	.+2      	; 0x420 <V2Protocol_ProcessCommand+0x46>
     41e:	af c0       	rjmp	.+350    	; 0x57e <V2Protocol_ProcessCommand+0x1a4>
     420:	12 31       	cpi	r17, 0x12	; 18
     422:	20 f4       	brcc	.+8      	; 0x42c <V2Protocol_ProcessCommand+0x52>
     424:	10 31       	cpi	r17, 0x10	; 16
     426:	09 f0       	breq	.+2      	; 0x42a <V2Protocol_ProcessCommand+0x50>
     428:	c7 c0       	rjmp	.+398    	; 0x5b8 <V2Protocol_ProcessCommand+0x1de>
     42a:	a7 c0       	rjmp	.+334    	; 0x57a <V2Protocol_ProcessCommand+0x1a0>
     42c:	12 31       	cpi	r17, 0x12	; 18
     42e:	09 f4       	brne	.+2      	; 0x432 <V2Protocol_ProcessCommand+0x58>
     430:	ae c0       	rjmp	.+348    	; 0x58e <V2Protocol_ProcessCommand+0x1b4>
     432:	13 31       	cpi	r17, 0x13	; 19
     434:	09 f0       	breq	.+2      	; 0x438 <V2Protocol_ProcessCommand+0x5e>
     436:	c0 c0       	rjmp	.+384    	; 0x5b8 <V2Protocol_ProcessCommand+0x1de>
     438:	a4 c0       	rjmp	.+328    	; 0x582 <V2Protocol_ProcessCommand+0x1a8>
     43a:	19 31       	cpi	r17, 0x19	; 25
     43c:	09 f4       	brne	.+2      	; 0x440 <V2Protocol_ProcessCommand+0x66>
     43e:	ac c0       	rjmp	.+344    	; 0x598 <V2Protocol_ProcessCommand+0x1be>
     440:	1a 31       	cpi	r17, 0x1A	; 26
     442:	68 f4       	brcc	.+26     	; 0x45e <V2Protocol_ProcessCommand+0x84>
     444:	16 31       	cpi	r17, 0x16	; 22
     446:	09 f4       	brne	.+2      	; 0x44a <V2Protocol_ProcessCommand+0x70>
     448:	9f c0       	rjmp	.+318    	; 0x588 <V2Protocol_ProcessCommand+0x1ae>
     44a:	16 31       	cpi	r17, 0x16	; 22
     44c:	08 f4       	brcc	.+2      	; 0x450 <V2Protocol_ProcessCommand+0x76>
     44e:	99 c0       	rjmp	.+306    	; 0x582 <V2Protocol_ProcessCommand+0x1a8>
     450:	17 31       	cpi	r17, 0x17	; 23
     452:	09 f4       	brne	.+2      	; 0x456 <V2Protocol_ProcessCommand+0x7c>
     454:	a1 c0       	rjmp	.+322    	; 0x598 <V2Protocol_ProcessCommand+0x1be>
     456:	18 31       	cpi	r17, 0x18	; 24
     458:	09 f0       	breq	.+2      	; 0x45c <V2Protocol_ProcessCommand+0x82>
     45a:	ae c0       	rjmp	.+348    	; 0x5b8 <V2Protocol_ProcessCommand+0x1de>
     45c:	9a c0       	rjmp	.+308    	; 0x592 <V2Protocol_ProcessCommand+0x1b8>
     45e:	1d 31       	cpi	r17, 0x1D	; 29
     460:	09 f4       	brne	.+2      	; 0x464 <V2Protocol_ProcessCommand+0x8a>
     462:	9d c0       	rjmp	.+314    	; 0x59e <V2Protocol_ProcessCommand+0x1c4>
     464:	1d 31       	cpi	r17, 0x1D	; 29
     466:	08 f4       	brcc	.+2      	; 0x46a <V2Protocol_ProcessCommand+0x90>
     468:	94 c0       	rjmp	.+296    	; 0x592 <V2Protocol_ProcessCommand+0x1b8>
     46a:	10 35       	cpi	r17, 0x50	; 80
     46c:	09 f4       	brne	.+2      	; 0x470 <V2Protocol_ProcessCommand+0x96>
     46e:	9b c0       	rjmp	.+310    	; 0x5a6 <V2Protocol_ProcessCommand+0x1cc>
     470:	11 35       	cpi	r17, 0x51	; 81
     472:	09 f0       	breq	.+2      	; 0x476 <V2Protocol_ProcessCommand+0x9c>
     474:	a1 c0       	rjmp	.+322    	; 0x5b8 <V2Protocol_ProcessCommand+0x1de>
     476:	95 c0       	rjmp	.+298    	; 0x5a2 <V2Protocol_ProcessCommand+0x1c8>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     478:	80 91 e8 00 	lds	r24, 0x00E8
     47c:	8b 77       	andi	r24, 0x7B	; 123
     47e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     482:	82 e0       	ldi	r24, 0x02	; 2
     484:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     488:	80 91 ec 00 	lds	r24, 0x00EC
     48c:	81 60       	ori	r24, 0x01	; 1
     48e:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     492:	10 93 f1 00 	sts	0x00F1, r17
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_Byte(CMD_SIGN_ON);
	Endpoint_Write_Byte(STATUS_CMD_OK);
	Endpoint_Write_Byte(sizeof(PROGRAMMER_ID) - 1);
	Endpoint_Write_Stream_LE(PROGRAMMER_ID, (sizeof(PROGRAMMER_ID) - 1), NO_STREAM_CALLBACK);
     496:	10 92 f1 00 	sts	0x00F1, r1
     49a:	8a e0       	ldi	r24, 0x0A	; 10
     49c:	80 93 f1 00 	sts	0x00F1, r24
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	6a e0       	ldi	r22, 0x0A	; 10
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	0e 94 bd 12 	call	0x257a	; 0x257a <Endpoint_Write_Stream_LE>
     4b0:	99 c0       	rjmp	.+306    	; 0x5e4 <V2Protocol_ProcessCommand+0x20a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     4b2:	00 91 f1 00 	lds	r16, 0x00F1
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = Endpoint_Read_Byte();
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER)
     4b6:	12 30       	cpi	r17, 0x02	; 2
     4b8:	11 f0       	breq	.+4      	; 0x4be <V2Protocol_ProcessCommand+0xe4>
     4ba:	ff 24       	eor	r15, r15
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <V2Protocol_ProcessCommand+0xe8>
     4be:	f0 90 f1 00 	lds	r15, 0x00F1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     4c2:	80 91 e8 00 	lds	r24, 0x00E8
     4c6:	8b 77       	andi	r24, 0x7B	; 123
     4c8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     4d2:	80 91 ec 00 	lds	r24, 0x00EC
     4d6:	81 60       	ori	r24, 0x01	; 1
     4d8:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     4dc:	10 93 f1 00 	sts	0x00F1, r17
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_Byte(V2Command);

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
     4e0:	80 2f       	mov	r24, r16
     4e2:	b5 d0       	rcall	.+362    	; 0x64e <V2Params_GetParameterPrivileges>

	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
     4e4:	12 30       	cpi	r17, 0x02	; 2
     4e6:	41 f4       	brne	.+16     	; 0x4f8 <V2Protocol_ProcessCommand+0x11e>
     4e8:	81 ff       	sbrs	r24, 1
     4ea:	0d c0       	rjmp	.+26     	; 0x506 <V2Protocol_ProcessCommand+0x12c>
     4ec:	10 92 f1 00 	sts	0x00F1, r1
	{
		Endpoint_Write_Byte(STATUS_CMD_OK);
		V2Params_SetParameterValue(ParamID, ParamValue);
     4f0:	80 2f       	mov	r24, r16
     4f2:	6f 2d       	mov	r22, r15
     4f4:	b4 d0       	rcall	.+360    	; 0x65e <V2Params_SetParameterValue>
     4f6:	76 c0       	rjmp	.+236    	; 0x5e4 <V2Protocol_ProcessCommand+0x20a>
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
     4f8:	80 ff       	sbrs	r24, 0
     4fa:	05 c0       	rjmp	.+10     	; 0x506 <V2Protocol_ProcessCommand+0x12c>
     4fc:	10 92 f1 00 	sts	0x00F1, r1
	{
		Endpoint_Write_Byte(STATUS_CMD_OK);
		Endpoint_Write_Byte(V2Params_GetParameterValue(ParamID));
     500:	80 2f       	mov	r24, r16
     502:	9d d0       	rcall	.+314    	; 0x63e <V2Params_GetParameterValue>
     504:	6d c0       	rjmp	.+218    	; 0x5e0 <V2Protocol_ProcessCommand+0x206>
     506:	80 ec       	ldi	r24, 0xC0	; 192
     508:	6b c0       	rjmp	.+214    	; 0x5e0 <V2Protocol_ProcessCommand+0x206>
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	Endpoint_Read_Stream_BE(&CurrentAddress, sizeof(CurrentAddress), NO_STREAM_CALLBACK);
     50a:	84 e4       	ldi	r24, 0x44	; 68
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	64 e0       	ldi	r22, 0x04	; 4
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	40 e0       	ldi	r20, 0x00	; 0
     514:	50 e0       	ldi	r21, 0x00	; 0
     516:	0e 94 47 12 	call	0x248e	; 0x248e <Endpoint_Read_Stream_BE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     51a:	80 91 e8 00 	lds	r24, 0x00E8
     51e:	8b 77       	andi	r24, 0x7B	; 123
     520:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     524:	82 e0       	ldi	r24, 0x02	; 2
     526:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     52a:	80 91 ec 00 	lds	r24, 0x00EC
     52e:	81 60       	ori	r24, 0x01	; 1
     530:	80 93 ec 00 	sts	0x00EC, r24

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (CurrentAddress & (1UL << 31))
     534:	80 91 44 01 	lds	r24, 0x0144
     538:	90 91 45 01 	lds	r25, 0x0145
     53c:	a0 91 46 01 	lds	r26, 0x0146
     540:	b0 91 47 01 	lds	r27, 0x0147
     544:	b7 ff       	sbrs	r27, 7
     546:	03 c0       	rjmp	.+6      	; 0x54e <V2Protocol_ProcessCommand+0x174>
	  MustLoadExtendedAddress = true;
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	80 93 43 01 	sts	0x0143, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     54e:	86 e0       	ldi	r24, 0x06	; 6
     550:	80 93 f1 00 	sts	0x00F1, r24
     554:	0f c0       	rjmp	.+30     	; 0x574 <V2Protocol_ProcessCommand+0x19a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     556:	80 91 e8 00 	lds	r24, 0x00E8
     55a:	8b 77       	andi	r24, 0x7B	; 123
     55c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     566:	80 91 ec 00 	lds	r24, 0x00EC
     56a:	81 60       	ori	r24, 0x01	; 1
     56c:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     570:	10 93 f1 00 	sts	0x00F1, r17
		case CMD_RESET_PROTECTION:
			V2Protocol_ResetProtection();
			break;
#if defined(ENABLE_ISP_PROTOCOL)
		case CMD_ENTER_PROGMODE_ISP:
			ISPProtocol_EnterISPMode();
     574:	10 92 f1 00 	sts	0x00F1, r1
     578:	35 c0       	rjmp	.+106    	; 0x5e4 <V2Protocol_ProcessCommand+0x20a>
     57a:	be d4       	rcall	.+2428   	; 0xef8 <ISPProtocol_EnterISPMode>
     57c:	38 c0       	rjmp	.+112    	; 0x5ee <V2Protocol_ProcessCommand+0x214>
			break;
		case CMD_LEAVE_PROGMODE_ISP:
			ISPProtocol_LeaveISPMode();
     57e:	88 d4       	rcall	.+2320   	; 0xe90 <ISPProtocol_LeaveISPMode>
     580:	36 c0       	rjmp	.+108    	; 0x5ee <V2Protocol_ProcessCommand+0x214>
			break;
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			ISPProtocol_ProgramMemory(V2Command);
     582:	81 2f       	mov	r24, r17
     584:	f2 d2       	rcall	.+1508   	; 0xb6a <ISPProtocol_ProgramMemory>
     586:	33 c0       	rjmp	.+102    	; 0x5ee <V2Protocol_ProcessCommand+0x214>
			break;
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:
			ISPProtocol_ReadMemory(V2Command);
     588:	81 2f       	mov	r24, r17
     58a:	41 d2       	rcall	.+1154   	; 0xa0e <ISPProtocol_ReadMemory>
     58c:	30 c0       	rjmp	.+96     	; 0x5ee <V2Protocol_ProcessCommand+0x214>
			break;
		case CMD_CHIP_ERASE_ISP:
			ISPProtocol_ChipErase();
     58e:	f0 d1       	rcall	.+992    	; 0x970 <ISPProtocol_ChipErase>
     590:	2e c0       	rjmp	.+92     	; 0x5ee <V2Protocol_ProcessCommand+0x214>
			break;
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
		case CMD_READ_SIGNATURE_ISP:
		case CMD_READ_OSCCAL_ISP:
			ISPProtocol_ReadFuseLockSigOSCCAL(V2Command);
     592:	81 2f       	mov	r24, r17
     594:	e5 d0       	rcall	.+458    	; 0x760 <ISPProtocol_ReadFuseLockSigOSCCAL>
     596:	2b c0       	rjmp	.+86     	; 0x5ee <V2Protocol_ProcessCommand+0x214>
			break;
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			ISPProtocol_WriteFuseLock(V2Command);
     598:	81 2f       	mov	r24, r17
     59a:	9c d0       	rcall	.+312    	; 0x6d4 <ISPProtocol_WriteFuseLock>
     59c:	28 c0       	rjmp	.+80     	; 0x5ee <V2Protocol_ProcessCommand+0x214>
			break;
		case CMD_SPI_MULTI:
			ISPProtocol_SPIMulti();
     59e:	4b d1       	rcall	.+662    	; 0x836 <ISPProtocol_SPIMulti>
     5a0:	26 c0       	rjmp	.+76     	; 0x5ee <V2Protocol_ProcessCommand+0x214>
			break;
#endif
#if defined(ENABLE_XPROG_PROTOCOL)
		case CMD_XPROG_SETMODE:
			XPROGProtocol_SetMode();
     5a2:	80 d6       	rcall	.+3328   	; 0x12a4 <XPROGProtocol_SetMode>
     5a4:	24 c0       	rjmp	.+72     	; 0x5ee <V2Protocol_ProcessCommand+0x214>
			break;
		case CMD_XPROG:
			XPROGProtocol_Command();
     5a6:	af d7       	rcall	.+3934   	; 0x1506 <XPROGProtocol_Command>
     5a8:	22 c0       	rjmp	.+68     	; 0x5ee <V2Protocol_ProcessCommand+0x214>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     5aa:	80 91 e8 00 	lds	r24, 0x00E8
     5ae:	8b 77       	andi	r24, 0x7B	; 123
     5b0:	80 93 e8 00 	sts	0x00E8, r24
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
     5b4:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <Endpoint_WaitUntilReady>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     5b8:	80 91 f2 00 	lds	r24, 0x00F2
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_UnknownCommand(const uint8_t V2Command)
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
     5bc:	80 34       	cpi	r24, 0x40	; 64
     5be:	a9 f3       	breq	.-22     	; 0x5aa <V2Protocol_ProcessCommand+0x1d0>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     5c0:	80 91 e8 00 	lds	r24, 0x00E8
     5c4:	8b 77       	andi	r24, 0x7B	; 123
     5c6:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     5ca:	82 e0       	ldi	r24, 0x02	; 2
     5cc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     5d0:	80 91 ec 00 	lds	r24, 0x00EC
     5d4:	81 60       	ori	r24, 0x01	; 1
     5d6:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     5da:	10 93 f1 00 	sts	0x00F1, r17
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5de:	89 ec       	ldi	r24, 0xC9	; 201
     5e0:	80 93 f1 00 	sts	0x00F1, r24
     5e4:	80 91 e8 00 	lds	r24, 0x00E8
     5e8:	8e 77       	andi	r24, 0x7E	; 126
     5ea:	80 93 e8 00 	sts	0x00E8, r24
			V2Protocol_UnknownCommand(V2Command);
			break;
	}

	/* Disable the timeout management timer */
	TCCR0B = 0;
     5ee:	15 bc       	out	0x25, r1	; 37

	Endpoint_WaitUntilReady();
     5f0:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <Endpoint_WaitUntilReady>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     5f4:	82 e0       	ldi	r24, 0x02	; 2
     5f6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     5fa:	80 91 ec 00 	lds	r24, 0x00EC
     5fe:	8e 7f       	andi	r24, 0xFE	; 254
     600:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_OUT_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_OUT);
}
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	ff 90       	pop	r15
     60a:	08 95       	ret

0000060c <V2Protocol_Init>:
	ADC_SetupChannel(VTARGET_ADC_CHANNEL);
	ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | VTARGET_ADC_CHANNEL_MASK);
	#endif

	/* Timeout timer initialization (10ms period) */
	OCR0A  = (((F_CPU / 1024) / 100) - 1);
     60c:	8b e9       	ldi	r24, 0x9B	; 155
     60e:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01);
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = (1 << OCIE0A);
     614:	80 93 6e 00 	sts	0x006E, r24

	V2Params_LoadNonVolatileParamValues();
     618:	35 d0       	rcall	.+106    	; 0x684 <V2Params_LoadNonVolatileParamValues>
	
	#if defined(ENABLE_ISP_PROTOCOL)
	ISPTarget_ConfigureRescueClock();
	#endif
}
     61a:	37 c5       	rjmp	.+2670   	; 0x108a <ISPTarget_ConfigureRescueClock>

0000061c <V2Params_UpdateParamValues>:
{
	#if (defined(ADC) && !defined(NO_VTARGET_DETECT))
	/* Update VTARGET parameter with the latest ADC conversion of VTARGET on supported AVR models */
	V2Params_GetParamFromTable(PARAM_VTARGET)->ParamValue = (((uint16_t)(VTARGET_REF_VOLTS * 10 * VTARGET_SCALE_FACTOR) * ADC_GetResult()) / 1024);
	#endif
}
     61c:	08 95       	ret

0000061e <V2Params_GetParamFromTable>:
 *  \param[in] ParamID  Parameter ID to find in the table
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
static ParameterItem_t* V2Params_GetParamFromTable(const uint8_t ParamID)
{
     61e:	98 2f       	mov	r25, r24
     620:	eb e0       	ldi	r30, 0x0B	; 11
     622:	f1 e0       	ldi	r31, 0x01	; 1
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
	{
		if (ParamID == CurrTableItem->ParamID)
     624:	80 81       	ld	r24, Z
     626:	98 17       	cp	r25, r24
     628:	41 f0       	breq	.+16     	; 0x63a <V2Params_GetParamFromTable+0x1c>
static ParameterItem_t* V2Params_GetParamFromTable(const uint8_t ParamID)
{
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	e6 32       	cpi	r30, 0x26	; 38
     62e:	f8 07       	cpc	r31, r24
     630:	11 f0       	breq	.+4      	; 0x636 <V2Params_GetParamFromTable+0x18>
	{
		if (ParamID == CurrTableItem->ParamID)
		  return CurrTableItem;

		CurrTableItem++;
     632:	33 96       	adiw	r30, 0x03	; 3
     634:	f7 cf       	rjmp	.-18     	; 0x624 <V2Params_GetParamFromTable+0x6>
     636:	e0 e0       	ldi	r30, 0x00	; 0
     638:	f0 e0       	ldi	r31, 0x00	; 0
	}

	return NULL;
}
     63a:	cf 01       	movw	r24, r30
     63c:	08 95       	ret

0000063e <V2Params_GetParameterValue>:
 *
 *  \return Current value of the parameter in the table, or 0 if not found
 */
uint8_t V2Params_GetParameterValue(const uint8_t ParamID)
{
	ParameterItem_t* ParamInfo = V2Params_GetParamFromTable(ParamID);
     63e:	ef df       	rcall	.-34     	; 0x61e <V2Params_GetParamFromTable>
     640:	fc 01       	movw	r30, r24

	if (ParamInfo == NULL)
     642:	00 97       	sbiw	r24, 0x00	; 0
     644:	11 f4       	brne	.+4      	; 0x64a <V2Params_GetParameterValue+0xc>
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	08 95       	ret
	  return 0;

	return ParamInfo->ParamValue;
     64a:	82 81       	ldd	r24, Z+2	; 0x02
}
     64c:	08 95       	ret

0000064e <V2Params_GetParameterPrivileges>:
 *
 *  \return Privileges for the requested parameter, as a mask of PARAM_PRIV_* masks
 */
uint8_t V2Params_GetParameterPrivileges(const uint8_t ParamID)
{
	ParameterItem_t* ParamInfo = V2Params_GetParamFromTable(ParamID);
     64e:	e7 df       	rcall	.-50     	; 0x61e <V2Params_GetParamFromTable>
     650:	fc 01       	movw	r30, r24

	if (ParamInfo == NULL)
     652:	00 97       	sbiw	r24, 0x00	; 0
     654:	11 f4       	brne	.+4      	; 0x65a <V2Params_GetParameterPrivileges+0xc>
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	08 95       	ret
	  return 0;

	return ParamInfo->ParamPrivileges;
     65a:	81 81       	ldd	r24, Z+1	; 0x01
}
     65c:	08 95       	ret

0000065e <V2Params_SetParameterValue>:
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
void V2Params_SetParameterValue(const uint8_t ParamID,
                                const uint8_t Value)
{
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	18 2f       	mov	r17, r24
     664:	06 2f       	mov	r16, r22
	ParameterItem_t* ParamInfo = V2Params_GetParamFromTable(ParamID);
     666:	db df       	rcall	.-74     	; 0x61e <V2Params_GetParamFromTable>
     668:	fc 01       	movw	r30, r24

	if (ParamInfo == NULL)
     66a:	00 97       	sbiw	r24, 0x00	; 0
     66c:	41 f0       	breq	.+16     	; 0x67e <V2Params_SetParameterValue+0x20>
	  return;

	ParamInfo->ParamValue = Value;
     66e:	02 83       	std	Z+2, r16	; 0x02

	/* The target RESET line polarity is a non-volatile parameter, save to EEPROM when changed */
	if (ParamID == PARAM_RESET_POLARITY)
     670:	1e 39       	cpi	r17, 0x9E	; 158
     672:	29 f4       	brne	.+10     	; 0x67e <V2Params_SetParameterValue+0x20>
	  eeprom_update_byte(&EEPROM_Rest_Polarity, Value);
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	60 2f       	mov	r22, r16
     67a:	0e 94 12 13 	call	0x2624	; 0x2624 <__eeupd_byte_usb162>
}
     67e:	1f 91       	pop	r17
     680:	0f 91       	pop	r16
     682:	08 95       	ret

00000684 <V2Params_LoadNonVolatileParamValues>:
	};


/** Loads saved non-volatile parameter values from the EEPROM into the parameter table, as needed. */
void V2Params_LoadNonVolatileParamValues(void)
{
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
	/* Target RESET line polarity is a non-volatile value, retrieve current parameter value from EEPROM */
	V2Params_GetParamFromTable(PARAM_RESET_POLARITY)->ParamValue = eeprom_read_byte(&EEPROM_Rest_Polarity);
     688:	8e e9       	ldi	r24, 0x9E	; 158
     68a:	c9 df       	rcall	.-110    	; 0x61e <V2Params_GetParamFromTable>
     68c:	8c 01       	movw	r16, r24
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	0e 94 0a 13 	call	0x2614	; 0x2614 <__eerd_byte_usb162>
     696:	f8 01       	movw	r30, r16
     698:	82 83       	std	Z+2, r24	; 0x02
}
     69a:	1f 91       	pop	r17
     69c:	0f 91       	pop	r16
     69e:	08 95       	ret

000006a0 <ISPProtocol_DelayMS>:
/** Blocking delay for a given number of milliseconds.
 *
 *  \param[in] DelayMS  Number of milliseconds to delay for
 */
void ISPProtocol_DelayMS(uint8_t DelayMS)
{
     6a0:	28 2f       	mov	r18, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6a2:	40 ea       	ldi	r20, 0xA0	; 160
     6a4:	5f e0       	ldi	r21, 0x0F	; 15
     6a6:	03 c0       	rjmp	.+6      	; 0x6ae <ISPProtocol_DelayMS+0xe>
     6a8:	ca 01       	movw	r24, r20
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <ISPProtocol_DelayMS+0xa>
	while (DelayMS-- && TimeoutTicksRemaining)
     6ae:	22 23       	and	r18, r18
     6b0:	21 f0       	breq	.+8      	; 0x6ba <ISPProtocol_DelayMS+0x1a>
     6b2:	8a b5       	in	r24, 0x2a	; 42
     6b4:	21 50       	subi	r18, 0x01	; 1
     6b6:	88 23       	and	r24, r24
     6b8:	b9 f7       	brne	.-18     	; 0x6a8 <ISPProtocol_DelayMS+0x8>
     6ba:	08 95       	ret

000006bc <ISPTarget_SendByte>:
		 *  software routines depending on the selected ISP speed.
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
     6bc:	98 2f       	mov	r25, r24
			if (HardwareSPIMode)
     6be:	80 91 29 01 	lds	r24, 0x0129
     6c2:	88 23       	and	r24, r24
     6c4:	29 f0       	breq	.+10     	; 0x6d0 <ISPTarget_SendByte+0x14>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6c6:	9e bd       	out	0x2e, r25	; 46
				while (!(SPSR & (1 << SPIF)));
     6c8:	0d b4       	in	r0, 0x2d	; 45
     6ca:	07 fe       	sbrs	r0, 7
     6cc:	fd cf       	rjmp	.-6      	; 0x6c8 <ISPTarget_SendByte+0xc>
     6ce:	08 95       	ret
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     6d0:	89 2f       	mov	r24, r25
     6d2:	1b c5       	rjmp	.+2614   	; 0x110a <ISPTarget_TransferSoftSPIByte>

000006d4 <ISPProtocol_WriteFuseLock>:
 *  byte to the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_WriteFuseLock(uint8_t V2Command)
{
     6d4:	df 92       	push	r13
     6d6:	ef 92       	push	r14
     6d8:	ff 92       	push	r15
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	df 93       	push	r29
     6e0:	cf 93       	push	r28
     6e2:	00 d0       	rcall	.+0      	; 0x6e4 <ISPProtocol_WriteFuseLock+0x10>
     6e4:	00 d0       	rcall	.+0      	; 0x6e6 <ISPProtocol_WriteFuseLock+0x12>
     6e6:	cd b7       	in	r28, 0x3d	; 61
     6e8:	de b7       	in	r29, 0x3e	; 62
     6ea:	d8 2e       	mov	r13, r24
	struct
	{
		uint8_t WriteCommandBytes[4];
	} Write_FuseLockSig_Params;

	Endpoint_Read_Stream_LE(&Write_FuseLockSig_Params, sizeof(Write_FuseLockSig_Params), NO_STREAM_CALLBACK);
     6ec:	8e 01       	movw	r16, r28
     6ee:	0f 5f       	subi	r16, 0xFF	; 255
     6f0:	1f 4f       	sbci	r17, 0xFF	; 255
     6f2:	c8 01       	movw	r24, r16
     6f4:	64 e0       	ldi	r22, 0x04	; 4
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	40 e0       	ldi	r20, 0x00	; 0
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	0e 94 82 12 	call	0x2504	; 0x2504 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     700:	80 91 e8 00 	lds	r24, 0x00E8
     704:	8b 77       	andi	r24, 0x7B	; 123
     706:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     70a:	82 e0       	ldi	r24, 0x02	; 2
     70c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     710:	80 91 ec 00 	lds	r24, 0x00EC
     714:	81 60       	ori	r24, 0x01	; 1
     716:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++)
     71a:	85 e0       	ldi	r24, 0x05	; 5
     71c:	e8 2e       	mov	r14, r24
     71e:	f1 2c       	mov	r15, r1
     720:	ec 0e       	add	r14, r28
     722:	fd 1e       	adc	r15, r29
	  ISPTarget_SendByte(Write_FuseLockSig_Params.WriteCommandBytes[SByte]);
     724:	f8 01       	movw	r30, r16
     726:	81 91       	ld	r24, Z+
     728:	8f 01       	movw	r16, r30
     72a:	c8 df       	rcall	.-112    	; 0x6bc <ISPTarget_SendByte>
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++)
     72c:	0e 15       	cp	r16, r14
     72e:	1f 05       	cpc	r17, r15
     730:	c9 f7       	brne	.-14     	; 0x724 <ISPProtocol_WriteFuseLock+0x50>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     732:	d0 92 f1 00 	sts	0x00F1, r13
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     736:	10 92 f1 00 	sts	0x00F1, r1
     73a:	10 92 f1 00 	sts	0x00F1, r1
     73e:	80 91 e8 00 	lds	r24, 0x00E8
     742:	8e 77       	andi	r24, 0x7E	; 126
     744:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_Write_Byte(V2Command);
	Endpoint_Write_Byte(STATUS_CMD_OK);
	Endpoint_Write_Byte(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	cf 91       	pop	r28
     752:	df 91       	pop	r29
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	ff 90       	pop	r15
     75a:	ef 90       	pop	r14
     75c:	df 90       	pop	r13
     75e:	08 95       	ret

00000760 <ISPProtocol_ReadFuseLockSigOSCCAL>:
 *  reading the requested configuration byte from the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadFuseLockSigOSCCAL(uint8_t V2Command)
{
     760:	bf 92       	push	r11
     762:	cf 92       	push	r12
     764:	df 92       	push	r13
     766:	ef 92       	push	r14
     768:	ff 92       	push	r15
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	df 93       	push	r29
     770:	cf 93       	push	r28
     772:	cd b7       	in	r28, 0x3d	; 61
     774:	de b7       	in	r29, 0x3e	; 62
     776:	29 97       	sbiw	r28, 0x09	; 9
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	de bf       	out	0x3e, r29	; 62
     77e:	0f be       	out	0x3f, r0	; 63
     780:	cd bf       	out	0x3d, r28	; 61
     782:	b8 2e       	mov	r11, r24
	{
		uint8_t RetByte;
		uint8_t ReadCommandBytes[4];
	} Read_FuseLockSigOSCCAL_Params;

	Endpoint_Read_Stream_LE(&Read_FuseLockSigOSCCAL_Params, sizeof(Read_FuseLockSigOSCCAL_Params), NO_STREAM_CALLBACK);
     784:	ce 01       	movw	r24, r28
     786:	05 96       	adiw	r24, 0x05	; 5
     788:	65 e0       	ldi	r22, 0x05	; 5
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	40 e0       	ldi	r20, 0x00	; 0
     78e:	50 e0       	ldi	r21, 0x00	; 0
     790:	0e 94 82 12 	call	0x2504	; 0x2504 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     794:	80 91 e8 00 	lds	r24, 0x00E8
     798:	8b 77       	andi	r24, 0x7B	; 123
     79a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     79e:	82 e0       	ldi	r24, 0x02	; 2
     7a0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     7a4:	80 91 ec 00 	lds	r24, 0x00EC
     7a8:	81 60       	ori	r24, 0x01	; 1
     7aa:	80 93 ec 00 	sts	0x00EC, r24
     7ae:	8e 01       	movw	r16, r28
     7b0:	0a 5f       	subi	r16, 0xFA	; 250
     7b2:	1f 4f       	sbci	r17, 0xFF	; 255
     7b4:	7e 01       	movw	r14, r28
     7b6:	08 94       	sec
     7b8:	e1 1c       	adc	r14, r1
     7ba:	f1 1c       	adc	r15, r1
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
     7bc:	9a e0       	ldi	r25, 0x0A	; 10
     7be:	c9 2e       	mov	r12, r25
     7c0:	d1 2c       	mov	r13, r1
     7c2:	cc 0e       	add	r12, r28
     7c4:	dd 1e       	adc	r13, r29
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);
     7c6:	f8 01       	movw	r30, r16
     7c8:	90 81       	ld	r25, Z
		 *
		 *  \return Received byte of data from the attached target
		 */
		static inline uint8_t ISPTarget_TransferByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     7ca:	80 91 29 01 	lds	r24, 0x0129
     7ce:	88 23       	and	r24, r24
     7d0:	31 f0       	breq	.+12     	; 0x7de <ISPProtocol_ReadFuseLockSigOSCCAL+0x7e>
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7d2:	9e bd       	out	0x2e, r25	; 46
				while (!(SPSR & (1 << SPIF)));
     7d4:	0d b4       	in	r0, 0x2d	; 45
     7d6:	07 fe       	sbrs	r0, 7
     7d8:	fd cf       	rjmp	.-6      	; 0x7d4 <ISPProtocol_ReadFuseLockSigOSCCAL+0x74>
				return SPDR;
     7da:	8e b5       	in	r24, 0x2e	; 46
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <ISPProtocol_ReadFuseLockSigOSCCAL+0x82>
			  return SPI_TransferByte(Byte);
			else
			  return ISPTarget_TransferSoftSPIByte(Byte);
     7de:	89 2f       	mov	r24, r25
     7e0:	94 d4       	rcall	.+2344   	; 0x110a <ISPTarget_TransferSoftSPIByte>
     7e2:	f7 01       	movw	r30, r14
     7e4:	81 93       	st	Z+, r24
     7e6:	7f 01       	movw	r14, r30
     7e8:	0f 5f       	subi	r16, 0xFF	; 255
     7ea:	1f 4f       	sbci	r17, 0xFF	; 255
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
     7ec:	0c 15       	cp	r16, r12
     7ee:	1d 05       	cpc	r17, r13
     7f0:	51 f7       	brne	.-44     	; 0x7c6 <ISPProtocol_ReadFuseLockSigOSCCAL+0x66>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     7f2:	b0 92 f1 00 	sts	0x00F1, r11
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);

	Endpoint_Write_Byte(V2Command);
	Endpoint_Write_Byte(STATUS_CMD_OK);
	Endpoint_Write_Byte(ResponseBytes[Read_FuseLockSigOSCCAL_Params.RetByte - 1]);
     7f6:	10 92 f1 00 	sts	0x00F1, r1
     7fa:	8d 81       	ldd	r24, Y+5	; 0x05
     7fc:	fe 01       	movw	r30, r28
     7fe:	e8 0f       	add	r30, r24
     800:	f1 1d       	adc	r31, r1
     802:	80 81       	ld	r24, Z
     804:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     808:	10 92 f1 00 	sts	0x00F1, r1
     80c:	80 91 e8 00 	lds	r24, 0x00E8
     810:	8e 77       	andi	r24, 0x7E	; 126
     812:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_Write_Byte(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     816:	29 96       	adiw	r28, 0x09	; 9
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	cf 91       	pop	r28
     824:	df 91       	pop	r29
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	ff 90       	pop	r15
     82c:	ef 90       	pop	r14
     82e:	df 90       	pop	r13
     830:	cf 90       	pop	r12
     832:	bf 90       	pop	r11
     834:	08 95       	ret

00000836 <ISPProtocol_SPIMulti>:
	Endpoint_ClearIN();
}

/** Handler for the CMD_SPI_MULTI command, writing and reading arbitrary SPI data to and from the attached device. */
void ISPProtocol_SPIMulti(void)
{
     836:	ef 92       	push	r14
     838:	ff 92       	push	r15
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17
     83e:	df 93       	push	r29
     840:	cf 93       	push	r28
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
     846:	c2 50       	subi	r28, 0x02	; 2
     848:	d1 40       	sbci	r29, 0x01	; 1
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
		uint8_t RxBytes;
		uint8_t RxStartAddr;
		uint8_t TxData[255];
	} SPI_Multi_Params;

	Endpoint_Read_Stream_LE(&SPI_Multi_Params, (sizeof(SPI_Multi_Params) - sizeof(SPI_Multi_Params.TxData)), NO_STREAM_CALLBACK);
     854:	ce 01       	movw	r24, r28
     856:	01 96       	adiw	r24, 0x01	; 1
     858:	63 e0       	ldi	r22, 0x03	; 3
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	0e 94 82 12 	call	0x2504	; 0x2504 <Endpoint_Read_Stream_LE>
	Endpoint_Read_Stream_LE(&SPI_Multi_Params.TxData, SPI_Multi_Params.TxBytes, NO_STREAM_CALLBACK);
     864:	34 e0       	ldi	r19, 0x04	; 4
     866:	e3 2e       	mov	r14, r19
     868:	f1 2c       	mov	r15, r1
     86a:	ec 0e       	add	r14, r28
     86c:	fd 1e       	adc	r15, r29
     86e:	69 81       	ldd	r22, Y+1	; 0x01
     870:	c7 01       	movw	r24, r14
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	40 e0       	ldi	r20, 0x00	; 0
     876:	50 e0       	ldi	r21, 0x00	; 0
     878:	0e 94 82 12 	call	0x2504	; 0x2504 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     87c:	80 91 e8 00 	lds	r24, 0x00E8
     880:	8b 77       	andi	r24, 0x7B	; 123
     882:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     886:	82 e0       	ldi	r24, 0x02	; 2
     888:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     88c:	80 91 ec 00 	lds	r24, 0x00EC
     890:	81 60       	ori	r24, 0x01	; 1
     892:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     896:	8d e1       	ldi	r24, 0x1D	; 29
     898:	80 93 f1 00 	sts	0x00F1, r24
	uint8_t CurrRxPos = 0;

	/* Write out bytes to transmit until the start of the bytes to receive is met */
	while (CurrTxPos < SPI_Multi_Params.RxStartAddr)
	{
		if (CurrTxPos < SPI_Multi_Params.TxBytes)
     89c:	10 92 f1 00 	sts	0x00F1, r1
     8a0:	00 e0       	ldi	r16, 0x00	; 0
     8a2:	0b c0       	rjmp	.+22     	; 0x8ba <ISPProtocol_SPIMulti+0x84>
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	08 17       	cp	r16, r24
     8a8:	28 f4       	brcc	.+10     	; 0x8b4 <ISPProtocol_SPIMulti+0x7e>
		  ISPTarget_SendByte(SPI_Multi_Params.TxData[CurrTxPos]);
     8aa:	f7 01       	movw	r30, r14
     8ac:	e0 0f       	add	r30, r16
     8ae:	f1 1d       	adc	r31, r1
     8b0:	80 81       	ld	r24, Z
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <ISPProtocol_SPIMulti+0x80>
		else
		  ISPTarget_SendByte(0);
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	02 df       	rcall	.-508    	; 0x6bc <ISPTarget_SendByte>

		CurrTxPos++;
     8b8:	0f 5f       	subi	r16, 0xFF	; 255

	uint8_t CurrTxPos = 0;
	uint8_t CurrRxPos = 0;

	/* Write out bytes to transmit until the start of the bytes to receive is met */
	while (CurrTxPos < SPI_Multi_Params.RxStartAddr)
     8ba:	8b 81       	ldd	r24, Y+3	; 0x03
     8bc:	08 17       	cp	r16, r24
     8be:	90 f3       	brcs	.-28     	; 0x8a4 <ISPProtocol_SPIMulti+0x6e>
     8c0:	10 e0       	ldi	r17, 0x00	; 0

	/* Transmit remaining bytes with padding as needed, read in response bytes */
	while (CurrRxPos < SPI_Multi_Params.RxBytes)
	{
		if (CurrTxPos < SPI_Multi_Params.TxBytes)
		  Endpoint_Write_Byte(ISPTarget_TransferByte(SPI_Multi_Params.TxData[CurrTxPos++]));
     8c2:	24 e0       	ldi	r18, 0x04	; 4
     8c4:	e2 2e       	mov	r14, r18
     8c6:	f1 2c       	mov	r15, r1
     8c8:	ec 0e       	add	r14, r28
     8ca:	fd 1e       	adc	r15, r29
     8cc:	2c c0       	rjmp	.+88     	; 0x926 <ISPProtocol_SPIMulti+0xf0>
	}

	/* Transmit remaining bytes with padding as needed, read in response bytes */
	while (CurrRxPos < SPI_Multi_Params.RxBytes)
	{
		if (CurrTxPos < SPI_Multi_Params.TxBytes)
     8ce:	89 81       	ldd	r24, Y+1	; 0x01
     8d0:	90 91 29 01 	lds	r25, 0x0129
     8d4:	08 17       	cp	r16, r24
     8d6:	78 f4       	brcc	.+30     	; 0x8f6 <ISPProtocol_SPIMulti+0xc0>
		  Endpoint_Write_Byte(ISPTarget_TransferByte(SPI_Multi_Params.TxData[CurrTxPos++]));
     8d8:	f7 01       	movw	r30, r14
     8da:	e0 0f       	add	r30, r16
     8dc:	f1 1d       	adc	r31, r1
     8de:	80 81       	ld	r24, Z
		 *
		 *  \return Received byte of data from the attached target
		 */
		static inline uint8_t ISPTarget_TransferByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     8e0:	99 23       	and	r25, r25
     8e2:	31 f0       	breq	.+12     	; 0x8f0 <ISPProtocol_SPIMulti+0xba>
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8e4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8e6:	0d b4       	in	r0, 0x2d	; 45
     8e8:	07 fe       	sbrs	r0, 7
     8ea:	fd cf       	rjmp	.-6      	; 0x8e6 <ISPProtocol_SPIMulti+0xb0>
				return SPDR;
     8ec:	8e b5       	in	r24, 0x2e	; 46
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <ISPProtocol_SPIMulti+0xbc>
			  return SPI_TransferByte(Byte);
			else
			  return ISPTarget_TransferSoftSPIByte(Byte);
     8f0:	0c d4       	rcall	.+2072   	; 0x110a <ISPTarget_TransferSoftSPIByte>
     8f2:	0f 5f       	subi	r16, 0xFF	; 255
     8f4:	0a c0       	rjmp	.+20     	; 0x90a <ISPProtocol_SPIMulti+0xd4>
		 *
		 *  \return Received byte of data from the attached target
		 */
		static inline uint8_t ISPTarget_ReceiveByte(void)
		{
			if (HardwareSPIMode)
     8f6:	99 23       	and	r25, r25
     8f8:	31 f0       	breq	.+12     	; 0x906 <ISPProtocol_SPIMulti+0xd0>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     8fa:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     8fc:	0d b4       	in	r0, 0x2d	; 45
     8fe:	07 fe       	sbrs	r0, 7
     900:	fd cf       	rjmp	.-6      	; 0x8fc <ISPProtocol_SPIMulti+0xc6>
				return SPDR;
     902:	8e b5       	in	r24, 0x2e	; 46
     904:	02 c0       	rjmp	.+4      	; 0x90a <ISPProtocol_SPIMulti+0xd4>
			  return SPI_ReceiveByte();
			else
			  return ISPTarget_TransferSoftSPIByte(0x00);
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	00 d4       	rcall	.+2048   	; 0x110a <ISPTarget_TransferSoftSPIByte>
     90a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     90e:	80 91 e8 00 	lds	r24, 0x00E8
		else
		  Endpoint_Write_Byte(ISPTarget_ReceiveByte());

		/* Check to see if we have filled the endpoint bank and need to send the packet */
		if (!(Endpoint_IsReadWriteAllowed()))
     912:	85 fd       	sbrc	r24, 5
     914:	07 c0       	rjmp	.+14     	; 0x924 <ISPProtocol_SPIMulti+0xee>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     916:	80 91 e8 00 	lds	r24, 0x00E8
     91a:	8e 77       	andi	r24, 0x7E	; 126
     91c:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();
			Endpoint_WaitUntilReady();
     920:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <Endpoint_WaitUntilReady>
		}

		CurrRxPos++;
     924:	1f 5f       	subi	r17, 0xFF	; 255

		CurrTxPos++;
	}

	/* Transmit remaining bytes with padding as needed, read in response bytes */
	while (CurrRxPos < SPI_Multi_Params.RxBytes)
     926:	8a 81       	ldd	r24, Y+2	; 0x02
     928:	18 17       	cp	r17, r24
     92a:	88 f2       	brcs	.-94     	; 0x8ce <ISPProtocol_SPIMulti+0x98>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     92c:	10 92 f1 00 	sts	0x00F1, r1
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     930:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     934:	80 91 e8 00 	lds	r24, 0x00E8
     938:	8e 77       	andi	r24, 0x7E	; 126
     93a:	80 93 e8 00 	sts	0x00E8, r24

	bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
	Endpoint_ClearIN();

	/* Ensure last packet is a short packet to terminate the transfer */
	if (IsEndpointFull)
     93e:	95 fd       	sbrc	r25, 5
     940:	09 c0       	rjmp	.+18     	; 0x954 <ISPProtocol_SPIMulti+0x11e>
	{
		Endpoint_WaitUntilReady();
     942:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <Endpoint_WaitUntilReady>
     946:	80 91 e8 00 	lds	r24, 0x00E8
     94a:	8e 77       	andi	r24, 0x7E	; 126
     94c:	80 93 e8 00 	sts	0x00E8, r24
		Endpoint_ClearIN();
		Endpoint_WaitUntilReady();
     950:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <Endpoint_WaitUntilReady>
	}
}
     954:	ce 5f       	subi	r28, 0xFE	; 254
     956:	de 4f       	sbci	r29, 0xFE	; 254
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	de bf       	out	0x3e, r29	; 62
     95e:	0f be       	out	0x3f, r0	; 63
     960:	cd bf       	out	0x3d, r28	; 61
     962:	cf 91       	pop	r28
     964:	df 91       	pop	r29
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	ff 90       	pop	r15
     96c:	ef 90       	pop	r14
     96e:	08 95       	ret

00000970 <ISPProtocol_ChipErase>:
	}
}

/** Handler for the CMD_CHI_ERASE_ISP command, clearing the target's FLASH memory. */
void ISPProtocol_ChipErase(void)
{
     970:	ef 92       	push	r14
     972:	ff 92       	push	r15
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	df 93       	push	r29
     97a:	cf 93       	push	r28
     97c:	00 d0       	rcall	.+0      	; 0x97e <ISPProtocol_ChipErase+0xe>
     97e:	00 d0       	rcall	.+0      	; 0x980 <ISPProtocol_ChipErase+0x10>
     980:	00 d0       	rcall	.+0      	; 0x982 <ISPProtocol_ChipErase+0x12>
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62
		uint8_t EraseDelayMS;
		uint8_t PollMethod;
		uint8_t EraseCommandBytes[4];
	} Erase_Chip_Params;

	Endpoint_Read_Stream_LE(&Erase_Chip_Params, sizeof(Erase_Chip_Params), NO_STREAM_CALLBACK);
     986:	ce 01       	movw	r24, r28
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	66 e0       	ldi	r22, 0x06	; 6
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	0e 94 82 12 	call	0x2504	; 0x2504 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     996:	80 91 e8 00 	lds	r24, 0x00E8
     99a:	8b 77       	andi	r24, 0x7B	; 123
     99c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     9a0:	82 e0       	ldi	r24, 0x02	; 2
     9a2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     9a6:	80 91 ec 00 	lds	r24, 0x00EC
     9aa:	81 60       	ori	r24, 0x01	; 1
     9ac:	80 93 ec 00 	sts	0x00EC, r24
     9b0:	8e 01       	movw	r16, r28
     9b2:	0d 5f       	subi	r16, 0xFD	; 253
     9b4:	1f 4f       	sbci	r17, 0xFF	; 255
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_OK;

	/* Send the chip erase commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++)
     9b6:	47 e0       	ldi	r20, 0x07	; 7
     9b8:	e4 2e       	mov	r14, r20
     9ba:	f1 2c       	mov	r15, r1
     9bc:	ec 0e       	add	r14, r28
     9be:	fd 1e       	adc	r15, r29
	  ISPTarget_SendByte(Erase_Chip_Params.EraseCommandBytes[SByte]);
     9c0:	f8 01       	movw	r30, r16
     9c2:	81 91       	ld	r24, Z+
     9c4:	8f 01       	movw	r16, r30
     9c6:	7a de       	rcall	.-780    	; 0x6bc <ISPTarget_SendByte>
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_OK;

	/* Send the chip erase commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++)
     9c8:	0e 15       	cp	r16, r14
     9ca:	1f 05       	cpc	r17, r15
     9cc:	c9 f7       	brne	.-14     	; 0x9c0 <ISPProtocol_ChipErase+0x50>
	  ISPTarget_SendByte(Erase_Chip_Params.EraseCommandBytes[SByte]);

	/* Use appropriate command completion check as given by the host (delay or busy polling) */
	if (!(Erase_Chip_Params.PollMethod))
     9ce:	8a 81       	ldd	r24, Y+2	; 0x02
     9d0:	88 23       	and	r24, r24
     9d2:	21 f4       	brne	.+8      	; 0x9dc <ISPProtocol_ChipErase+0x6c>
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
     9d4:	89 81       	ldd	r24, Y+1	; 0x01
     9d6:	64 de       	rcall	.-824    	; 0x6a0 <ISPProtocol_DelayMS>
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <ISPProtocol_ChipErase+0x70>
	else
	  ResponseStatus = ISPTarget_WaitWhileTargetBusy();
     9dc:	c1 d3       	rcall	.+1922   	; 0x1160 <ISPTarget_WaitWhileTargetBusy>
     9de:	98 2f       	mov	r25, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     9e0:	82 e1       	ldi	r24, 0x12	; 18
     9e2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9e6:	90 93 f1 00 	sts	0x00F1, r25
     9ea:	80 91 e8 00 	lds	r24, 0x00E8
     9ee:	8e 77       	andi	r24, 0x7E	; 126
     9f0:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_Write_Byte(CMD_CHIP_ERASE_ISP);
	Endpoint_Write_Byte(ResponseStatus);
	Endpoint_ClearIN();
}
     9f4:	26 96       	adiw	r28, 0x06	; 6
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	f8 94       	cli
     9fa:	de bf       	out	0x3e, r29	; 62
     9fc:	0f be       	out	0x3f, r0	; 63
     9fe:	cd bf       	out	0x3d, r28	; 61
     a00:	cf 91       	pop	r28
     a02:	df 91       	pop	r29
     a04:	1f 91       	pop	r17
     a06:	0f 91       	pop	r16
     a08:	ff 90       	pop	r15
     a0a:	ef 90       	pop	r14
     a0c:	08 95       	ret

00000a0e <ISPProtocol_ReadMemory>:
 *  words or pages of data from the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadMemory(uint8_t V2Command)
{
     a0e:	df 92       	push	r13
     a10:	ef 92       	push	r14
     a12:	ff 92       	push	r15
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
     a18:	df 93       	push	r29
     a1a:	cf 93       	push	r28
     a1c:	00 d0       	rcall	.+0      	; 0xa1e <ISPProtocol_ReadMemory+0x10>
     a1e:	0f 92       	push	r0
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
     a24:	f8 2e       	mov	r15, r24
	{
		uint16_t BytesToRead;
		uint8_t  ReadMemoryCommand;
	} Read_Memory_Params;

	Endpoint_Read_Stream_LE(&Read_Memory_Params, sizeof(Read_Memory_Params), NO_STREAM_CALLBACK);
     a26:	ce 01       	movw	r24, r28
     a28:	01 96       	adiw	r24, 0x01	; 1
     a2a:	63 e0       	ldi	r22, 0x03	; 3
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	40 e0       	ldi	r20, 0x00	; 0
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	0e 94 82 12 	call	0x2504	; 0x2504 <Endpoint_Read_Stream_LE>
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;
     a36:	99 81       	ldd	r25, Y+1	; 0x01
     a38:	8a 81       	ldd	r24, Y+2	; 0x02
	Read_Memory_Params.BytesToRead = SwapEndian_16(Read_Memory_Params.BytesToRead);
     a3a:	89 83       	std	Y+1, r24	; 0x01
     a3c:	9a 83       	std	Y+2, r25	; 0x02
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a3e:	80 91 e8 00 	lds	r24, 0x00E8
     a42:	8b 77       	andi	r24, 0x7B	; 123
     a44:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a48:	82 e0       	ldi	r24, 0x02	; 2
     a4a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     a4e:	80 91 ec 00 	lds	r24, 0x00EC
     a52:	81 60       	ori	r24, 0x01	; 1
     a54:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     a58:	f0 92 f1 00 	sts	0x00F1, r15
		}

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
     a5c:	10 92 f1 00 	sts	0x00F1, r1
     a60:	00 e0       	ldi	r16, 0x00	; 0
     a62:	10 e0       	ldi	r17, 0x00	; 0
     a64:	68 e0       	ldi	r22, 0x08	; 8
     a66:	d6 2e       	mov	r13, r22
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
		{
			CurrentAddress++;

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
			  MustLoadExtendedAddress = true;
     a68:	ee 24       	eor	r14, r14
     a6a:	e3 94       	inc	r14
     a6c:	59 c0       	rjmp	.+178    	; 0xb20 <ISPProtocol_ReadMemory+0x112>

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
	{
		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
     a6e:	80 91 43 01 	lds	r24, 0x0143
     a72:	88 23       	and	r24, r24
     a74:	19 f0       	breq	.+6      	; 0xa7c <ISPProtocol_ReadMemory+0x6e>
		{
			ISPTarget_LoadExtendedAddress();
     a76:	92 d3       	rcall	.+1828   	; 0x119c <ISPTarget_LoadExtendedAddress>
			MustLoadExtendedAddress = false;
     a78:	10 92 43 01 	sts	0x0143, r1
		}

		/* Read the next byte from the desired memory space in the device */
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
     a7c:	8b 81       	ldd	r24, Y+3	; 0x03
     a7e:	1e de       	rcall	.-964    	; 0x6bc <ISPTarget_SendByte>
		ISPTarget_SendByte(CurrentAddress >> 8);
     a80:	80 91 44 01 	lds	r24, 0x0144
     a84:	90 91 45 01 	lds	r25, 0x0145
     a88:	a0 91 46 01 	lds	r26, 0x0146
     a8c:	b0 91 47 01 	lds	r27, 0x0147
     a90:	89 2f       	mov	r24, r25
     a92:	9a 2f       	mov	r25, r26
     a94:	ab 2f       	mov	r26, r27
     a96:	bb 27       	eor	r27, r27
     a98:	11 de       	rcall	.-990    	; 0x6bc <ISPTarget_SendByte>
		ISPTarget_SendByte(CurrentAddress & 0xFF);
     a9a:	80 91 44 01 	lds	r24, 0x0144
     a9e:	0e de       	rcall	.-996    	; 0x6bc <ISPTarget_SendByte>
		 *
		 *  \return Received byte of data from the attached target
		 */
		static inline uint8_t ISPTarget_ReceiveByte(void)
		{
			if (HardwareSPIMode)
     aa0:	80 91 29 01 	lds	r24, 0x0129
     aa4:	88 23       	and	r24, r24
     aa6:	31 f0       	breq	.+12     	; 0xab4 <ISPProtocol_ReadMemory+0xa6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     aa8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     aaa:	0d b4       	in	r0, 0x2d	; 45
     aac:	07 fe       	sbrs	r0, 7
     aae:	fd cf       	rjmp	.-6      	; 0xaaa <ISPProtocol_ReadMemory+0x9c>
				return SPDR;
     ab0:	8e b5       	in	r24, 0x2e	; 46
     ab2:	02 c0       	rjmp	.+4      	; 0xab8 <ISPProtocol_ReadMemory+0xaa>
			  return SPI_ReceiveByte();
			else
			  return ISPTarget_TransferSoftSPIByte(0x00);
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	29 d3       	rcall	.+1618   	; 0x110a <ISPTarget_TransferSoftSPIByte>
     ab8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     abc:	80 91 e8 00 	lds	r24, 0x00E8
		Endpoint_Write_Byte(ISPTarget_ReceiveByte());

		/* Check if the endpoint bank is currently full, if so send the packet */
		if (!(Endpoint_IsReadWriteAllowed()))
     ac0:	85 fd       	sbrc	r24, 5
     ac2:	07 c0       	rjmp	.+14     	; 0xad2 <ISPProtocol_ReadMemory+0xc4>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ac4:	80 91 e8 00 	lds	r24, 0x00E8
     ac8:	8e 77       	andi	r24, 0x7E	; 126
     aca:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();
			Endpoint_WaitUntilReady();
     ace:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <Endpoint_WaitUntilReady>
		}

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
     ad2:	24 e1       	ldi	r18, 0x14	; 20
     ad4:	f2 16       	cp	r15, r18
     ad6:	19 f4       	brne	.+6      	; 0xade <ISPProtocol_ReadMemory+0xd0>
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
     ad8:	8b 81       	ldd	r24, Y+3	; 0x03
     ada:	8d 25       	eor	r24, r13
     adc:	8b 83       	std	Y+3, r24	; 0x03

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed */
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
     ade:	00 fd       	sbrc	r16, 0
     ae0:	03 c0       	rjmp	.+6      	; 0xae8 <ISPProtocol_ReadMemory+0xda>
     ae2:	86 e1       	ldi	r24, 0x16	; 22
     ae4:	f8 16       	cp	r15, r24
     ae6:	d1 f4       	brne	.+52     	; 0xb1c <ISPProtocol_ReadMemory+0x10e>
		{
			CurrentAddress++;
     ae8:	80 91 44 01 	lds	r24, 0x0144
     aec:	90 91 45 01 	lds	r25, 0x0145
     af0:	a0 91 46 01 	lds	r26, 0x0146
     af4:	b0 91 47 01 	lds	r27, 0x0147
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	a1 1d       	adc	r26, r1
     afc:	b1 1d       	adc	r27, r1
     afe:	80 93 44 01 	sts	0x0144, r24
     b02:	90 93 45 01 	sts	0x0145, r25
     b06:	a0 93 46 01 	sts	0x0146, r26
     b0a:	b0 93 47 01 	sts	0x0147, r27

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
     b0e:	26 e1       	ldi	r18, 0x16	; 22
     b10:	f2 16       	cp	r15, r18
     b12:	21 f0       	breq	.+8      	; 0xb1c <ISPProtocol_ReadMemory+0x10e>
     b14:	89 2b       	or	r24, r25
     b16:	11 f4       	brne	.+4      	; 0xb1c <ISPProtocol_ReadMemory+0x10e>
			  MustLoadExtendedAddress = true;
     b18:	e0 92 43 01 	sts	0x0143, r14

	Endpoint_Write_Byte(V2Command);
	Endpoint_Write_Byte(STATUS_CMD_OK);

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
     b1c:	0f 5f       	subi	r16, 0xFF	; 255
     b1e:	1f 4f       	sbci	r17, 0xFF	; 255
     b20:	89 81       	ldd	r24, Y+1	; 0x01
     b22:	9a 81       	ldd	r25, Y+2	; 0x02
     b24:	08 17       	cp	r16, r24
     b26:	19 07       	cpc	r17, r25
     b28:	08 f4       	brcc	.+2      	; 0xb2c <ISPProtocol_ReadMemory+0x11e>
     b2a:	a1 cf       	rjmp	.-190    	; 0xa6e <ISPProtocol_ReadMemory+0x60>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     b2c:	10 92 f1 00 	sts	0x00F1, r1
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     b30:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b34:	80 91 e8 00 	lds	r24, 0x00E8
     b38:	8e 77       	andi	r24, 0x7E	; 126
     b3a:	80 93 e8 00 	sts	0x00E8, r24

	bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
	Endpoint_ClearIN();

	/* Ensure last packet is a short packet to terminate the transfer */
	if (IsEndpointFull)
     b3e:	95 fd       	sbrc	r25, 5
     b40:	09 c0       	rjmp	.+18     	; 0xb54 <ISPProtocol_ReadMemory+0x146>
	{
		Endpoint_WaitUntilReady();
     b42:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <Endpoint_WaitUntilReady>
     b46:	80 91 e8 00 	lds	r24, 0x00E8
     b4a:	8e 77       	andi	r24, 0x7E	; 126
     b4c:	80 93 e8 00 	sts	0x00E8, r24
		Endpoint_ClearIN();
		Endpoint_WaitUntilReady();
     b50:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <Endpoint_WaitUntilReady>
	}
}
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	cf 91       	pop	r28
     b5c:	df 91       	pop	r29
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	ff 90       	pop	r15
     b64:	ef 90       	pop	r14
     b66:	df 90       	pop	r13
     b68:	08 95       	ret

00000b6a <ISPProtocol_ProgramMemory>:
 *  words or pages of data to the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ProgramMemory(uint8_t V2Command)
{
     b6a:	4f 92       	push	r4
     b6c:	5f 92       	push	r5
     b6e:	6f 92       	push	r6
     b70:	7f 92       	push	r7
     b72:	8f 92       	push	r8
     b74:	9f 92       	push	r9
     b76:	af 92       	push	r10
     b78:	bf 92       	push	r11
     b7a:	cf 92       	push	r12
     b7c:	df 92       	push	r13
     b7e:	ef 92       	push	r14
     b80:	ff 92       	push	r15
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	c9 50       	subi	r28, 0x09	; 9
     b90:	d1 40       	sbci	r29, 0x01	; 1
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	f8 94       	cli
     b96:	de bf       	out	0x3e, r29	; 62
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	cd bf       	out	0x3d, r28	; 61
     b9c:	b8 2e       	mov	r11, r24
		uint8_t  PollValue1;
		uint8_t  PollValue2;
		uint8_t  ProgData[256]; // Note, the Jungo driver has a very short ACK timeout period, need to buffer the
	} Write_Memory_Params;      // whole page and ACK the packet as fast as possible to prevent it from aborting

	Endpoint_Read_Stream_LE(&Write_Memory_Params, (sizeof(Write_Memory_Params) -
     b9e:	ce 01       	movw	r24, r28
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	69 e0       	ldi	r22, 0x09	; 9
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	0e 94 82 12 	call	0x2504	; 0x2504 <Endpoint_Read_Stream_LE>

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     bae:	6a 81       	ldd	r22, Y+2	; 0x02
     bb0:	79 81       	ldd	r23, Y+1	; 0x01
	                                               sizeof(Write_Memory_Params.ProgData)), NO_STREAM_CALLBACK);


	Write_Memory_Params.BytesToWrite = SwapEndian_16(Write_Memory_Params.BytesToWrite);

	if (Write_Memory_Params.BytesToWrite > sizeof(Write_Memory_Params.ProgData))
     bb2:	31 e0       	ldi	r19, 0x01	; 1
     bb4:	61 30       	cpi	r22, 0x01	; 1
     bb6:	73 07       	cpc	r23, r19
     bb8:	98 f0       	brcs	.+38     	; 0xbe0 <ISPProtocol_ProgramMemory+0x76>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     bba:	80 91 e8 00 	lds	r24, 0x00E8
     bbe:	8b 77       	andi	r24, 0x7B	; 123
     bc0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     bc4:	82 e0       	ldi	r24, 0x02	; 2
     bc6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     bca:	80 91 ec 00 	lds	r24, 0x00EC
     bce:	81 60       	ori	r24, 0x01	; 1
     bd0:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     bd4:	b0 92 f1 00 	sts	0x00F1, r11

	Endpoint_Read_Stream_LE(&Write_Memory_Params, (sizeof(Write_Memory_Params) -
	                                               sizeof(Write_Memory_Params.ProgData)), NO_STREAM_CALLBACK);


	Write_Memory_Params.BytesToWrite = SwapEndian_16(Write_Memory_Params.BytesToWrite);
     bd8:	80 ec       	ldi	r24, 0xC0	; 192
     bda:	80 93 f1 00 	sts	0x00F1, r24
     bde:	3b c1       	rjmp	.+630    	; 0xe56 <ISPProtocol_ProgramMemory+0x2ec>
     be0:	7a 83       	std	Y+2, r23	; 0x02
     be2:	69 83       	std	Y+1, r22	; 0x01
		Endpoint_Write_Byte(STATUS_CMD_FAILED);
		Endpoint_ClearIN();
		return;
	}

	Endpoint_Read_Stream_LE(&Write_Memory_Params.ProgData, Write_Memory_Params.BytesToWrite, NO_STREAM_CALLBACK);
     be4:	ce 01       	movw	r24, r28
     be6:	0a 96       	adiw	r24, 0x0a	; 10
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	0e 94 82 12 	call	0x2504	; 0x2504 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     bf0:	80 91 e8 00 	lds	r24, 0x00E8
     bf4:	8b 77       	andi	r24, 0x7B	; 123
     bf6:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     bfa:	82 e0       	ldi	r24, 0x02	; 2
     bfc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     c00:	80 91 ec 00 	lds	r24, 0x00EC
     c04:	81 60       	ori	r24, 0x01	; 1
     c06:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
	uint16_t PollAddress       = 0;
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
	                                                                    Write_Memory_Params.PollValue2;
     c0a:	83 e1       	ldi	r24, 0x13	; 19
     c0c:	b8 16       	cp	r11, r24
     c0e:	11 f4       	brne	.+4      	; 0xc14 <ISPProtocol_ProgramMemory+0xaa>
     c10:	58 84       	ldd	r5, Y+8	; 0x08
     c12:	01 c0       	rjmp	.+2      	; 0xc16 <ISPProtocol_ProgramMemory+0xac>
     c14:	59 84       	ldd	r5, Y+9	; 0x09
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;

	/* Check the programming mode desired by the host, either Paged or Word memory writes */
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK)
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	80 fd       	sbrc	r24, 0
     c1a:	0f c0       	rjmp	.+30     	; 0xc3a <ISPProtocol_ProgramMemory+0xd0>
     c1c:	66 24       	eor	r6, r6
     c1e:	77 24       	eor	r7, r7
     c20:	0a e0       	ldi	r16, 0x0A	; 10
     c22:	c0 2e       	mov	r12, r16
     c24:	d1 2c       	mov	r13, r1
     c26:	cc 0e       	add	r12, r28
     c28:	dd 1e       	adc	r13, r29
     c2a:	ee 24       	eor	r14, r14
     c2c:	ff 24       	eor	r15, r15
     c2e:	20 e0       	ldi	r18, 0x00	; 0
			ISPTarget_SendByte(ByteToWrite);

			/* AVR FLASH addressing requires us to modify the write command based on if we are writing a high
			 * or low byte at the current word address */
			if (V2Command == CMD_PROGRAM_FLASH_ISP)
			  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
     c30:	18 e0       	ldi	r17, 0x08	; 8
     c32:	41 2e       	mov	r4, r17
			if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
			{
				CurrentAddress++;

				if ((V2Command != CMD_PROGRAM_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
				  MustLoadExtendedAddress = true;
     c34:	aa 24       	eor	r10, r10
     c36:	a3 94       	inc	r10
     c38:	04 c1       	rjmp	.+520    	; 0xe42 <ISPProtocol_ProgramMemory+0x2d8>
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;

	/* Check the programming mode desired by the host, either Paged or Word memory writes */
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK)
	{
		uint16_t StartAddress = (CurrentAddress & 0xFFFF);
     c3a:	70 90 44 01 	lds	r7, 0x0144
     c3e:	80 90 45 01 	lds	r8, 0x0145

		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
     c42:	80 91 43 01 	lds	r24, 0x0143
     c46:	88 23       	and	r24, r24
     c48:	19 f0       	breq	.+6      	; 0xc50 <ISPProtocol_ProgramMemory+0xe6>
		{
			ISPTarget_LoadExtendedAddress();
     c4a:	a8 d2       	rcall	.+1360   	; 0x119c <ISPTarget_LoadExtendedAddress>
			MustLoadExtendedAddress = false;
     c4c:	10 92 43 01 	sts	0x0143, r1
     c50:	cc 24       	eor	r12, r12
     c52:	dd 24       	eor	r13, r13
     c54:	ba e0       	ldi	r27, 0x0A	; 10
     c56:	eb 2e       	mov	r14, r27
     c58:	f1 2c       	mov	r15, r1
     c5a:	ec 0e       	add	r14, r28
     c5c:	fd 1e       	adc	r15, r29
     c5e:	00 e0       	ldi	r16, 0x00	; 0
     c60:	10 e0       	ldi	r17, 0x00	; 0
			ISPTarget_SendByte(ByteToWrite);

			/* AVR FLASH addressing requires us to modify the write command based on if we are writing a high
			 * or low byte at the current word address */
			if (V2Command == CMD_PROGRAM_FLASH_ISP)
			  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
     c62:	a8 e0       	ldi	r26, 0x08	; 8
     c64:	6a 2e       	mov	r6, r26
     c66:	4d c0       	rjmp	.+154    	; 0xd02 <ISPProtocol_ProgramMemory+0x198>
		}

		/* Paged mode memory programming */
		for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
		{
			bool    IsOddByte   = (CurrentByte & 0x01);
     c68:	99 24       	eor	r9, r9
     c6a:	93 94       	inc	r9
     c6c:	90 22       	and	r9, r16
			uint8_t ByteToWrite = *(NextWriteByte++);
     c6e:	f7 01       	movw	r30, r14
     c70:	a0 80       	ld	r10, Z

			ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
     c72:	8d 81       	ldd	r24, Y+5	; 0x05
     c74:	23 dd       	rcall	.-1466   	; 0x6bc <ISPTarget_SendByte>
			ISPTarget_SendByte(CurrentAddress >> 8);
     c76:	80 91 44 01 	lds	r24, 0x0144
     c7a:	90 91 45 01 	lds	r25, 0x0145
     c7e:	a0 91 46 01 	lds	r26, 0x0146
     c82:	b0 91 47 01 	lds	r27, 0x0147
     c86:	89 2f       	mov	r24, r25
     c88:	9a 2f       	mov	r25, r26
     c8a:	ab 2f       	mov	r26, r27
     c8c:	bb 27       	eor	r27, r27
     c8e:	16 dd       	rcall	.-1492   	; 0x6bc <ISPTarget_SendByte>
			ISPTarget_SendByte(CurrentAddress & 0xFF);
     c90:	80 91 44 01 	lds	r24, 0x0144
     c94:	13 dd       	rcall	.-1498   	; 0x6bc <ISPTarget_SendByte>
			ISPTarget_SendByte(ByteToWrite);
     c96:	8a 2d       	mov	r24, r10
     c98:	11 dd       	rcall	.-1502   	; 0x6bc <ISPTarget_SendByte>

			/* AVR FLASH addressing requires us to modify the write command based on if we are writing a high
			 * or low byte at the current word address */
			if (V2Command == CMD_PROGRAM_FLASH_ISP)
     c9a:	f3 e1       	ldi	r31, 0x13	; 19
     c9c:	bf 16       	cp	r11, r31
     c9e:	19 f4       	brne	.+6      	; 0xca6 <ISPProtocol_ProgramMemory+0x13c>
			  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
     ca0:	8d 81       	ldd	r24, Y+5	; 0x05
     ca2:	86 25       	eor	r24, r6
     ca4:	8d 83       	std	Y+5, r24	; 0x05

			/* Check to see the write completion method, to see if we have a valid polling address */
			if (!(PollAddress) && (ByteToWrite != PollValue))
     ca6:	c1 14       	cp	r12, r1
     ca8:	d1 04       	cpc	r13, r1
     caa:	71 f4       	brne	.+28     	; 0xcc8 <ISPProtocol_ProgramMemory+0x15e>
     cac:	a5 14       	cp	r10, r5
     cae:	61 f0       	breq	.+24     	; 0xcc8 <ISPProtocol_ProgramMemory+0x15e>
			{
				if (IsOddByte && (V2Command == CMD_PROGRAM_FLASH_ISP))
     cb0:	99 20       	and	r9, r9
     cb2:	31 f0       	breq	.+12     	; 0xcc0 <ISPProtocol_ProgramMemory+0x156>
     cb4:	33 e1       	ldi	r19, 0x13	; 19
     cb6:	b3 16       	cp	r11, r19
     cb8:	19 f4       	brne	.+6      	; 0xcc0 <ISPProtocol_ProgramMemory+0x156>
				  Write_Memory_Params.ProgrammingCommands[2] |= READ_WRITE_HIGH_BYTE_MASK;
     cba:	8f 81       	ldd	r24, Y+7	; 0x07
     cbc:	88 60       	ori	r24, 0x08	; 8
     cbe:	8f 83       	std	Y+7, r24	; 0x07

				PollAddress = (CurrentAddress & 0xFFFF);
     cc0:	c0 90 44 01 	lds	r12, 0x0144
     cc4:	d0 90 45 01 	lds	r13, 0x0145
			}

			/* EEPROM increments the address on each byte, flash needs to increment on each word */
			if (IsOddByte || (V2Command == CMD_PROGRAM_EEPROM_ISP))
     cc8:	99 20       	and	r9, r9
     cca:	19 f4       	brne	.+6      	; 0xcd2 <ISPProtocol_ProgramMemory+0x168>
     ccc:	85 e1       	ldi	r24, 0x15	; 21
     cce:	b8 16       	cp	r11, r24
     cd0:	99 f4       	brne	.+38     	; 0xcf8 <ISPProtocol_ProgramMemory+0x18e>
			  CurrentAddress++;
     cd2:	80 91 44 01 	lds	r24, 0x0144
     cd6:	90 91 45 01 	lds	r25, 0x0145
     cda:	a0 91 46 01 	lds	r26, 0x0146
     cde:	b0 91 47 01 	lds	r27, 0x0147
     ce2:	01 96       	adiw	r24, 0x01	; 1
     ce4:	a1 1d       	adc	r26, r1
     ce6:	b1 1d       	adc	r27, r1
     ce8:	80 93 44 01 	sts	0x0144, r24
     cec:	90 93 45 01 	sts	0x0145, r25
     cf0:	a0 93 46 01 	sts	0x0146, r26
     cf4:	b0 93 47 01 	sts	0x0147, r27

		/* Paged mode memory programming */
		for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
		{
			bool    IsOddByte   = (CurrentByte & 0x01);
			uint8_t ByteToWrite = *(NextWriteByte++);
     cf8:	08 94       	sec
     cfa:	e1 1c       	adc	r14, r1
     cfc:	f1 1c       	adc	r15, r1
			ISPTarget_LoadExtendedAddress();
			MustLoadExtendedAddress = false;
		}

		/* Paged mode memory programming */
		for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
     cfe:	0f 5f       	subi	r16, 0xFF	; 255
     d00:	1f 4f       	sbci	r17, 0xFF	; 255
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	9a 81       	ldd	r25, Y+2	; 0x02
     d06:	08 17       	cp	r16, r24
     d08:	19 07       	cpc	r17, r25
     d0a:	08 f4       	brcc	.+2      	; 0xd0e <ISPProtocol_ProgramMemory+0x1a4>
     d0c:	ad cf       	rjmp	.-166    	; 0xc68 <ISPProtocol_ProgramMemory+0xfe>
			if (IsOddByte || (V2Command == CMD_PROGRAM_EEPROM_ISP))
			  CurrentAddress++;
		}

		/* If the current page must be committed, send the PROGRAM PAGE command to the target */
		if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	87 fd       	sbrc	r24, 7
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <ISPProtocol_ProgramMemory+0x1ae>
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	9b c0       	rjmp	.+310    	; 0xe4e <ISPProtocol_ProgramMemory+0x2e4>
		{
			ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[1]);
     d18:	8e 81       	ldd	r24, Y+6	; 0x06
     d1a:	d0 dc       	rcall	.-1632   	; 0x6bc <ISPTarget_SendByte>
			ISPTarget_SendByte(StartAddress >> 8);
     d1c:	88 2d       	mov	r24, r8
     d1e:	ce dc       	rcall	.-1636   	; 0x6bc <ISPTarget_SendByte>
			ISPTarget_SendByte(StartAddress & 0xFF);
     d20:	87 2d       	mov	r24, r7
     d22:	cc dc       	rcall	.-1640   	; 0x6bc <ISPTarget_SendByte>
			ISPTarget_SendByte(0x00);
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	ca dc       	rcall	.-1644   	; 0x6bc <ISPTarget_SendByte>

			/* Check if polling is possible and enabled, if not switch to timed delay mode */
			if (!(PollAddress) && (Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_VALUE_MASK))
     d28:	c1 14       	cp	r12, r1
     d2a:	d1 04       	cpc	r13, r1
     d2c:	31 f4       	brne	.+12     	; 0xd3a <ISPProtocol_ProgramMemory+0x1d0>
     d2e:	8b 81       	ldd	r24, Y+3	; 0x03
     d30:	85 ff       	sbrs	r24, 5
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <ISPProtocol_ProgramMemory+0x1d0>
			{
				Write_Memory_Params.ProgrammingMode &= ~PROG_MODE_PAGED_VALUE_MASK;
     d34:	8f 7d       	andi	r24, 0xDF	; 223
				Write_Memory_Params.ProgrammingMode |=  PROG_MODE_PAGED_TIMEDELAY_MASK;
     d36:	80 61       	ori	r24, 0x10	; 16
     d38:	8b 83       	std	Y+3, r24	; 0x03
			}

			ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	b6 01       	movw	r22, r12
     d3e:	45 2d       	mov	r20, r5
     d40:	2c 81       	ldd	r18, Y+4	; 0x04
     d42:	0f 81       	ldd	r16, Y+7	; 0x07
     d44:	34 d2       	rcall	.+1128   	; 0x11ae <ISPTarget_WaitForProgComplete>
     d46:	28 2f       	mov	r18, r24
			                                                  Write_Memory_Params.DelayMS, Write_Memory_Params.ProgrammingCommands[2]);

			/* Check to see if the FLASH address has crossed the extended address boundary */
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
     d48:	e3 e1       	ldi	r30, 0x13	; 19
     d4a:	be 16       	cp	r11, r30
     d4c:	09 f0       	breq	.+2      	; 0xd50 <ISPProtocol_ProgramMemory+0x1e6>
     d4e:	7f c0       	rjmp	.+254    	; 0xe4e <ISPProtocol_ProgramMemory+0x2e4>
     d50:	80 91 44 01 	lds	r24, 0x0144
     d54:	90 91 45 01 	lds	r25, 0x0145
     d58:	89 2b       	or	r24, r25
     d5a:	09 f0       	breq	.+2      	; 0xd5e <ISPProtocol_ProgramMemory+0x1f4>
     d5c:	78 c0       	rjmp	.+240    	; 0xe4e <ISPProtocol_ProgramMemory+0x2e4>
			  MustLoadExtendedAddress = true;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	80 93 43 01 	sts	0x0143, r24
     d64:	74 c0       	rjmp	.+232    	; 0xe4e <ISPProtocol_ProgramMemory+0x2e4>
	else
	{
		/* Word/byte mode memory programming */
		for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
		{
			bool    IsOddByte   = (CurrentByte & 0x01);
     d66:	e1 e0       	ldi	r30, 0x01	; 1
     d68:	8e 2e       	mov	r8, r30
     d6a:	91 2c       	mov	r9, r1
     d6c:	8e 20       	and	r8, r14
     d6e:	9f 20       	and	r9, r15
			uint8_t ByteToWrite = *(NextWriteByte++);
     d70:	f6 01       	movw	r30, r12
     d72:	00 81       	ld	r16, Z

			/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
			if (MustLoadExtendedAddress)
     d74:	80 91 43 01 	lds	r24, 0x0143
     d78:	88 23       	and	r24, r24
     d7a:	19 f0       	breq	.+6      	; 0xd82 <ISPProtocol_ProgramMemory+0x218>
			{
				ISPTarget_LoadExtendedAddress();
     d7c:	0f d2       	rcall	.+1054   	; 0x119c <ISPTarget_LoadExtendedAddress>
				MustLoadExtendedAddress = false;
     d7e:	10 92 43 01 	sts	0x0143, r1
			}

			ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
     d82:	8d 81       	ldd	r24, Y+5	; 0x05
     d84:	9b dc       	rcall	.-1738   	; 0x6bc <ISPTarget_SendByte>
			ISPTarget_SendByte(CurrentAddress >> 8);
     d86:	80 91 44 01 	lds	r24, 0x0144
     d8a:	90 91 45 01 	lds	r25, 0x0145
     d8e:	a0 91 46 01 	lds	r26, 0x0146
     d92:	b0 91 47 01 	lds	r27, 0x0147
     d96:	89 2f       	mov	r24, r25
     d98:	9a 2f       	mov	r25, r26
     d9a:	ab 2f       	mov	r26, r27
     d9c:	bb 27       	eor	r27, r27
     d9e:	8e dc       	rcall	.-1764   	; 0x6bc <ISPTarget_SendByte>
			ISPTarget_SendByte(CurrentAddress & 0xFF);
     da0:	80 91 44 01 	lds	r24, 0x0144
     da4:	8b dc       	rcall	.-1770   	; 0x6bc <ISPTarget_SendByte>
			ISPTarget_SendByte(ByteToWrite);
     da6:	80 2f       	mov	r24, r16
     da8:	89 dc       	rcall	.-1774   	; 0x6bc <ISPTarget_SendByte>

			/* AVR FLASH addressing requires us to modify the write command based on if we are writing a high
			 * or low byte at the current word address */
			if (V2Command == CMD_PROGRAM_FLASH_ISP)
     daa:	f3 e1       	ldi	r31, 0x13	; 19
     dac:	bf 16       	cp	r11, r31
     dae:	19 f4       	brne	.+6      	; 0xdb6 <ISPProtocol_ProgramMemory+0x24c>
			  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
     db0:	8d 81       	ldd	r24, Y+5	; 0x05
     db2:	84 25       	eor	r24, r4
     db4:	8d 83       	std	Y+5, r24	; 0x05

			/* Save previous programming mode in case we modify it for the current word */
			uint8_t PreviousProgrammingMode = Write_Memory_Params.ProgrammingMode;
     db6:	1b 81       	ldd	r17, Y+3	; 0x03

			if (ByteToWrite != PollValue)
     db8:	05 15       	cp	r16, r5
     dba:	71 f0       	breq	.+28     	; 0xdd8 <ISPProtocol_ProgramMemory+0x26e>
			{
				if (IsOddByte && (V2Command == CMD_PROGRAM_FLASH_ISP))
     dbc:	81 14       	cp	r8, r1
     dbe:	91 04       	cpc	r9, r1
     dc0:	31 f0       	breq	.+12     	; 0xdce <ISPProtocol_ProgramMemory+0x264>
     dc2:	33 e1       	ldi	r19, 0x13	; 19
     dc4:	b3 16       	cp	r11, r19
     dc6:	19 f4       	brne	.+6      	; 0xdce <ISPProtocol_ProgramMemory+0x264>
				  Write_Memory_Params.ProgrammingCommands[2] |= READ_WRITE_HIGH_BYTE_MASK;
     dc8:	8f 81       	ldd	r24, Y+7	; 0x07
     dca:	88 60       	ori	r24, 0x08	; 8
     dcc:	8f 83       	std	Y+7, r24	; 0x07

				PollAddress = (CurrentAddress & 0xFFFF);
     dce:	60 90 44 01 	lds	r6, 0x0144
     dd2:	70 90 45 01 	lds	r7, 0x0145
     dd6:	06 c0       	rjmp	.+12     	; 0xde4 <ISPProtocol_ProgramMemory+0x27a>
			}
			else if (!(Write_Memory_Params.ProgrammingMode & PROG_MODE_WORD_READYBUSY_MASK))
     dd8:	13 fd       	sbrc	r17, 3
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <ISPProtocol_ProgramMemory+0x27a>
			{
				Write_Memory_Params.ProgrammingMode &= ~PROG_MODE_WORD_VALUE_MASK;
     ddc:	81 2f       	mov	r24, r17
     dde:	8b 7f       	andi	r24, 0xFB	; 251
				Write_Memory_Params.ProgrammingMode |=  PROG_MODE_WORD_TIMEDELAY_MASK;
     de0:	82 60       	ori	r24, 0x02	; 2
     de2:	8b 83       	std	Y+3, r24	; 0x03
			}

			ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	b3 01       	movw	r22, r6
     de8:	45 2d       	mov	r20, r5
     dea:	2c 81       	ldd	r18, Y+4	; 0x04
     dec:	0f 81       	ldd	r16, Y+7	; 0x07
     dee:	df d1       	rcall	.+958    	; 0x11ae <ISPTarget_WaitForProgComplete>
     df0:	28 2f       	mov	r18, r24

			/* Restore previous programming mode mask in case the current word needed to change it */
			Write_Memory_Params.ProgrammingMode = PreviousProgrammingMode;

			/* Abort the programming loop early if the byte/word programming failed */
			if (ProgrammingStatus != STATUS_CMD_OK)
     df2:	88 23       	and	r24, r24
     df4:	61 f5       	brne	.+88     	; 0xe4e <ISPProtocol_ProgramMemory+0x2e4>
			  break;

			/* EEPROM just increments the address each byte, flash needs to increment on each word and
			 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
			 * address boundary has been crossed */
			if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
     df6:	89 28       	or	r8, r9
     df8:	19 f4       	brne	.+6      	; 0xe00 <ISPProtocol_ProgramMemory+0x296>
     dfa:	85 e1       	ldi	r24, 0x15	; 21
     dfc:	b8 16       	cp	r11, r24
     dfe:	d1 f4       	brne	.+52     	; 0xe34 <ISPProtocol_ProgramMemory+0x2ca>
			{
				CurrentAddress++;
     e00:	80 91 44 01 	lds	r24, 0x0144
     e04:	90 91 45 01 	lds	r25, 0x0145
     e08:	a0 91 46 01 	lds	r26, 0x0146
     e0c:	b0 91 47 01 	lds	r27, 0x0147
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	a1 1d       	adc	r26, r1
     e14:	b1 1d       	adc	r27, r1
     e16:	80 93 44 01 	sts	0x0144, r24
     e1a:	90 93 45 01 	sts	0x0145, r25
     e1e:	a0 93 46 01 	sts	0x0146, r26
     e22:	b0 93 47 01 	sts	0x0147, r27

				if ((V2Command != CMD_PROGRAM_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
     e26:	e5 e1       	ldi	r30, 0x15	; 21
     e28:	be 16       	cp	r11, r30
     e2a:	21 f0       	breq	.+8      	; 0xe34 <ISPProtocol_ProgramMemory+0x2ca>
     e2c:	89 2b       	or	r24, r25
     e2e:	11 f4       	brne	.+4      	; 0xe34 <ISPProtocol_ProgramMemory+0x2ca>
				  MustLoadExtendedAddress = true;
     e30:	a0 92 43 01 	sts	0x0143, r10
	{
		/* Word/byte mode memory programming */
		for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
		{
			bool    IsOddByte   = (CurrentByte & 0x01);
			uint8_t ByteToWrite = *(NextWriteByte++);
     e34:	08 94       	sec
     e36:	c1 1c       	adc	r12, r1
     e38:	d1 1c       	adc	r13, r1

			ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
			                                                  Write_Memory_Params.DelayMS, Write_Memory_Params.ProgrammingCommands[2]);

			/* Restore previous programming mode mask in case the current word needed to change it */
			Write_Memory_Params.ProgrammingMode = PreviousProgrammingMode;
     e3a:	1b 83       	std	Y+3, r17	; 0x03
		}
	}
	else
	{
		/* Word/byte mode memory programming */
		for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
     e3c:	08 94       	sec
     e3e:	e1 1c       	adc	r14, r1
     e40:	f1 1c       	adc	r15, r1
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	9a 81       	ldd	r25, Y+2	; 0x02
     e46:	e8 16       	cp	r14, r24
     e48:	f9 06       	cpc	r15, r25
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <ISPProtocol_ProgramMemory+0x2e4>
     e4c:	8c cf       	rjmp	.-232    	; 0xd66 <ISPProtocol_ProgramMemory+0x1fc>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     e4e:	b0 92 f1 00 	sts	0x00F1, r11
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e52:	20 93 f1 00 	sts	0x00F1, r18
     e56:	80 91 e8 00 	lds	r24, 0x00E8
     e5a:	8e 77       	andi	r24, 0x7E	; 126
     e5c:	80 93 e8 00 	sts	0x00E8, r24
	}

	Endpoint_Write_Byte(V2Command);
	Endpoint_Write_Byte(ProgrammingStatus);
	Endpoint_ClearIN();
}
     e60:	c7 5f       	subi	r28, 0xF7	; 247
     e62:	de 4f       	sbci	r29, 0xFE	; 254
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	de bf       	out	0x3e, r29	; 62
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	1f 91       	pop	r17
     e74:	0f 91       	pop	r16
     e76:	ff 90       	pop	r15
     e78:	ef 90       	pop	r14
     e7a:	df 90       	pop	r13
     e7c:	cf 90       	pop	r12
     e7e:	bf 90       	pop	r11
     e80:	af 90       	pop	r10
     e82:	9f 90       	pop	r9
     e84:	8f 90       	pop	r8
     e86:	7f 90       	pop	r7
     e88:	6f 90       	pop	r6
     e8a:	5f 90       	pop	r5
     e8c:	4f 90       	pop	r4
     e8e:	08 95       	ret

00000e90 <ISPProtocol_LeaveISPMode>:
	Endpoint_ClearIN();
}

/** Handler for the CMD_LEAVE_ISP command, which releases the target from programming mode. */
void ISPProtocol_LeaveISPMode(void)
{
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <ISPProtocol_LeaveISPMode+0xa>
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
	{
		uint8_t PreDelayMS;
		uint8_t PostDelayMS;
	} Leave_ISP_Params;

	Endpoint_Read_Stream_LE(&Leave_ISP_Params, sizeof(Leave_ISP_Params), NO_STREAM_CALLBACK);
     e9e:	ce 01       	movw	r24, r28
     ea0:	01 96       	adiw	r24, 0x01	; 1
     ea2:	62 e0       	ldi	r22, 0x02	; 2
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	0e 94 82 12 	call	0x2504	; 0x2504 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     eae:	08 ee       	ldi	r16, 0xE8	; 232
     eb0:	10 e0       	ldi	r17, 0x00	; 0
     eb2:	f8 01       	movw	r30, r16
     eb4:	80 81       	ld	r24, Z
     eb6:	8b 77       	andi	r24, 0x7B	; 123
     eb8:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     eba:	82 e0       	ldi	r24, 0x02	; 2
     ebc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     ec0:	ec ee       	ldi	r30, 0xEC	; 236
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	81 60       	ori	r24, 0x01	; 1
     ec8:	80 83       	st	Z, r24
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Perform pre-exit delay, release the target /RESET, disable the SPI bus and perform the post-exit delay */
	ISPProtocol_DelayMS(Leave_ISP_Params.PreDelayMS);
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	e9 db       	rcall	.-2094   	; 0x6a0 <ISPProtocol_DelayMS>
	ISPTarget_ChangeTargetResetLine(false);
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	b1 d1       	rcall	.+866    	; 0x1234 <ISPTarget_ChangeTargetResetLine>
	ISPTarget_DisableTargetISP();
     ed2:	ef d0       	rcall	.+478    	; 0x10b2 <ISPTarget_DisableTargetISP>
	ISPProtocol_DelayMS(Leave_ISP_Params.PostDelayMS);
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	e4 db       	rcall	.-2104   	; 0x6a0 <ISPProtocol_DelayMS>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     ed8:	e1 ef       	ldi	r30, 0xF1	; 241
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	81 e1       	ldi	r24, 0x11	; 17
     ede:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ee0:	10 82       	st	Z, r1
     ee2:	f8 01       	movw	r30, r16
     ee4:	80 81       	ld	r24, Z
     ee6:	8e 77       	andi	r24, 0x7E	; 126
     ee8:	80 83       	st	Z, r24

	Endpoint_Write_Byte(CMD_LEAVE_PROGMODE_ISP);
	Endpoint_Write_Byte(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	08 95       	ret

00000ef8 <ISPProtocol_EnterISPMode>:

/** Handler for the CMD_ENTER_PROGMODE_ISP command, which attempts to enter programming mode on
 *  the attached device, returning success or failure back to the host.
 */
void ISPProtocol_EnterISPMode(void)
{
     ef8:	6f 92       	push	r6
     efa:	7f 92       	push	r7
     efc:	8f 92       	push	r8
     efe:	9f 92       	push	r9
     f00:	af 92       	push	r10
     f02:	bf 92       	push	r11
     f04:	df 92       	push	r13
     f06:	ef 92       	push	r14
     f08:	ff 92       	push	r15
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	2f 97       	sbiw	r28, 0x0f	; 15
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
		uint8_t PollValue;
		uint8_t PollIndex;
		uint8_t EnterProgBytes[4];
	} Enter_ISP_Params;

	Endpoint_Read_Stream_LE(&Enter_ISP_Params, sizeof(Enter_ISP_Params), NO_STREAM_CALLBACK);
     f22:	ce 01       	movw	r24, r28
     f24:	05 96       	adiw	r24, 0x05	; 5
     f26:	6b e0       	ldi	r22, 0x0B	; 11
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	40 e0       	ldi	r20, 0x00	; 0
     f2c:	50 e0       	ldi	r21, 0x00	; 0
     f2e:	0e 94 82 12 	call	0x2504	; 0x2504 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f32:	80 91 e8 00 	lds	r24, 0x00E8
     f36:	8b 77       	andi	r24, 0x7B	; 123
     f38:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
     f42:	80 91 ec 00 	lds	r24, 0x00EC
     f46:	81 60       	ori	r24, 0x01	; 1
     f48:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_FAILED;

	CurrentAddress = 0;
     f4c:	10 92 44 01 	sts	0x0144, r1
     f50:	10 92 45 01 	sts	0x0145, r1
     f54:	10 92 46 01 	sts	0x0146, r1
     f58:	10 92 47 01 	sts	0x0147, r1

	/* Perform execution delay, initialize SPI bus */
	ISPProtocol_DelayMS(Enter_ISP_Params.ExecutionDelayMS);
     f5c:	8f 81       	ldd	r24, Y+7	; 0x07
     f5e:	a0 db       	rcall	.-2240   	; 0x6a0 <ISPProtocol_DelayMS>
	ISPTarget_EnableTargetISP();
     f60:	75 d1       	rcall	.+746    	; 0x124c <ISPTarget_EnableTargetISP>
     f62:	20 ec       	ldi	r18, 0xC0	; 192
     f64:	d2 2e       	mov	r13, r18
	while (Enter_ISP_Params.SynchLoops-- && (ResponseStatus == STATUS_CMD_FAILED) && TimeoutTicksRemaining)
	{
		uint8_t ResponseBytes[4];

		ISPTarget_ChangeTargetResetLine(true);
		ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
     f66:	9c e0       	ldi	r25, 0x0C	; 12
     f68:	69 2e       	mov	r6, r25
     f6a:	71 2c       	mov	r7, r1
     f6c:	6c 0e       	add	r6, r28
     f6e:	7d 1e       	adc	r7, r29
     f70:	4e 01       	movw	r8, r28
     f72:	08 94       	sec
     f74:	81 1c       	adc	r8, r1
     f76:	91 1c       	adc	r9, r1

		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
     f78:	80 e1       	ldi	r24, 0x10	; 16
     f7a:	a8 2e       	mov	r10, r24
     f7c:	b1 2c       	mov	r11, r1
     f7e:	ac 0e       	add	r10, r28
     f80:	bd 1e       	adc	r11, r29
     f82:	30 c0       	rjmp	.+96     	; 0xfe4 <ISPProtocol_EnterISPMode+0xec>
	ISPProtocol_DelayMS(Enter_ISP_Params.ExecutionDelayMS);
	ISPTarget_EnableTargetISP();

	/* Continuously attempt to synchronize with the target until either the number of attempts specified
	 * by the host has exceeded, or the the device sends back the expected response values */
	while (Enter_ISP_Params.SynchLoops-- && (ResponseStatus == STATUS_CMD_FAILED) && TimeoutTicksRemaining)
     f84:	91 50       	subi	r25, 0x01	; 1
     f86:	98 87       	std	Y+8, r25	; 0x08
	{
		uint8_t ResponseBytes[4];

		ISPTarget_ChangeTargetResetLine(true);
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	54 d1       	rcall	.+680    	; 0x1234 <ISPTarget_ChangeTargetResetLine>
		ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
     f8c:	8e 81       	ldd	r24, Y+6	; 0x06
     f8e:	88 db       	rcall	.-2288   	; 0x6a0 <ISPProtocol_DelayMS>
     f90:	83 01       	movw	r16, r6
     f92:	74 01       	movw	r14, r8

		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
		{
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
     f94:	89 85       	ldd	r24, Y+9	; 0x09
     f96:	84 db       	rcall	.-2296   	; 0x6a0 <ISPProtocol_DelayMS>
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
     f98:	f8 01       	movw	r30, r16
     f9a:	90 81       	ld	r25, Z
		 *
		 *  \return Received byte of data from the attached target
		 */
		static inline uint8_t ISPTarget_TransferByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     f9c:	80 91 29 01 	lds	r24, 0x0129
     fa0:	88 23       	and	r24, r24
     fa2:	31 f0       	breq	.+12     	; 0xfb0 <ISPProtocol_EnterISPMode+0xb8>
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     fa4:	9e bd       	out	0x2e, r25	; 46
				while (!(SPSR & (1 << SPIF)));
     fa6:	0d b4       	in	r0, 0x2d	; 45
     fa8:	07 fe       	sbrs	r0, 7
     faa:	fd cf       	rjmp	.-6      	; 0xfa6 <ISPProtocol_EnterISPMode+0xae>
				return SPDR;
     fac:	8e b5       	in	r24, 0x2e	; 46
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <ISPProtocol_EnterISPMode+0xbc>
			  return SPI_TransferByte(Byte);
			else
			  return ISPTarget_TransferSoftSPIByte(Byte);
     fb0:	89 2f       	mov	r24, r25
     fb2:	ab d0       	rcall	.+342    	; 0x110a <ISPTarget_TransferSoftSPIByte>
     fb4:	f7 01       	movw	r30, r14
     fb6:	81 93       	st	Z+, r24
     fb8:	7f 01       	movw	r14, r30
     fba:	0f 5f       	subi	r16, 0xFF	; 255
     fbc:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t ResponseBytes[4];

		ISPTarget_ChangeTargetResetLine(true);
		ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);

		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
     fbe:	0a 15       	cp	r16, r10
     fc0:	1b 05       	cpc	r17, r11
     fc2:	41 f7       	brne	.-48     	; 0xf94 <ISPProtocol_EnterISPMode+0x9c>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
		}

		/* Check if polling disabled, or if the polled value matches the expected value */
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
     fc4:	8b 85       	ldd	r24, Y+11	; 0x0b
     fc6:	88 23       	and	r24, r24
     fc8:	61 f0       	breq	.+24     	; 0xfe2 <ISPProtocol_EnterISPMode+0xea>
     fca:	fe 01       	movw	r30, r28
     fcc:	e8 0f       	add	r30, r24
     fce:	f1 1d       	adc	r31, r1
     fd0:	90 81       	ld	r25, Z
     fd2:	8a 85       	ldd	r24, Y+10	; 0x0a
     fd4:	98 17       	cp	r25, r24
     fd6:	29 f0       	breq	.+10     	; 0xfe2 <ISPProtocol_EnterISPMode+0xea>
		{
			ResponseStatus = STATUS_CMD_OK;
		}
		else
		{
			ISPTarget_ChangeTargetResetLine(false);
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	2c d1       	rcall	.+600    	; 0x1234 <ISPTarget_ChangeTargetResetLine>
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
     fdc:	8e 81       	ldd	r24, Y+6	; 0x06
     fde:	60 db       	rcall	.-2368   	; 0x6a0 <ISPProtocol_DelayMS>
     fe0:	01 c0       	rjmp	.+2      	; 0xfe4 <ISPProtocol_EnterISPMode+0xec>
     fe2:	dd 24       	eor	r13, r13
	ISPProtocol_DelayMS(Enter_ISP_Params.ExecutionDelayMS);
	ISPTarget_EnableTargetISP();

	/* Continuously attempt to synchronize with the target until either the number of attempts specified
	 * by the host has exceeded, or the the device sends back the expected response values */
	while (Enter_ISP_Params.SynchLoops-- && (ResponseStatus == STATUS_CMD_FAILED) && TimeoutTicksRemaining)
     fe4:	98 85       	ldd	r25, Y+8	; 0x08
     fe6:	99 23       	and	r25, r25
     fe8:	31 f0       	breq	.+12     	; 0xff6 <ISPProtocol_EnterISPMode+0xfe>
     fea:	f0 ec       	ldi	r31, 0xC0	; 192
     fec:	df 16       	cp	r13, r31
     fee:	19 f4       	brne	.+6      	; 0xff6 <ISPProtocol_EnterISPMode+0xfe>
     ff0:	8a b5       	in	r24, 0x2a	; 42
     ff2:	88 23       	and	r24, r24
     ff4:	39 f6       	brne	.-114    	; 0xf84 <ISPProtocol_EnterISPMode+0x8c>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     ff6:	80 e1       	ldi	r24, 0x10	; 16
     ff8:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ffc:	d0 92 f1 00 	sts	0x00F1, r13
    1000:	80 91 e8 00 	lds	r24, 0x00E8
    1004:	8e 77       	andi	r24, 0x7E	; 126
    1006:	80 93 e8 00 	sts	0x00E8, r24
	}

	Endpoint_Write_Byte(CMD_ENTER_PROGMODE_ISP);
	Endpoint_Write_Byte(ResponseStatus);
	Endpoint_ClearIN();
}
    100a:	2f 96       	adiw	r28, 0x0f	; 15
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	cd bf       	out	0x3d, r28	; 61
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	1f 91       	pop	r17
    101c:	0f 91       	pop	r16
    101e:	ff 90       	pop	r15
    1020:	ef 90       	pop	r14
    1022:	df 90       	pop	r13
    1024:	bf 90       	pop	r11
    1026:	af 90       	pop	r10
    1028:	9f 90       	pop	r9
    102a:	8f 90       	pop	r8
    102c:	7f 90       	pop	r7
    102e:	6f 90       	pop	r6
    1030:	08 95       	ret

00001032 <__vector_15>:
volatile uint8_t SoftSPI_BitsRemaining;


/** ISR to handle software SPI transmission and reception */
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
    1032:	1f 92       	push	r1
    1034:	0f 92       	push	r0
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	0f 92       	push	r0
    103a:	11 24       	eor	r1, r1
    103c:	8f 93       	push	r24
	if (!(PINB & (1 << 1)))
    103e:	19 99       	sbic	0x03, 1	; 3
    1040:	08 c0       	rjmp	.+16     	; 0x1052 <__vector_15+0x20>
	{
		if (SoftSPI_Data & (1 << 7))
    1042:	80 91 49 01 	lds	r24, 0x0149
    1046:	87 ff       	sbrs	r24, 7
    1048:	02 c0       	rjmp	.+4      	; 0x104e <__vector_15+0x1c>
		  PORTB |=  (1 << 2);
    104a:	2a 9a       	sbi	0x05, 2	; 5
    104c:	17 c0       	rjmp	.+46     	; 0x107c <__vector_15+0x4a>
		else
		  PORTB &= ~(1 << 2);
    104e:	2a 98       	cbi	0x05, 2	; 5
    1050:	15 c0       	rjmp	.+42     	; 0x107c <__vector_15+0x4a>
	}
	else
	{
		SoftSPI_Data <<= 1;
    1052:	80 91 49 01 	lds	r24, 0x0149
    1056:	88 0f       	add	r24, r24
    1058:	80 93 49 01 	sts	0x0149, r24

		if (!(SoftSPI_BitsRemaining--))
    105c:	80 91 48 01 	lds	r24, 0x0148
    1060:	81 50       	subi	r24, 0x01	; 1
    1062:	80 93 48 01 	sts	0x0148, r24
    1066:	8f 5f       	subi	r24, 0xFF	; 255
    1068:	11 f4       	brne	.+4      	; 0x106e <__vector_15+0x3c>
		  TCCR1B = 0;
    106a:	10 92 81 00 	sts	0x0081, r1

		if (PINB & (1 << 3))
    106e:	1b 9b       	sbis	0x03, 3	; 3
    1070:	05 c0       	rjmp	.+10     	; 0x107c <__vector_15+0x4a>
		  SoftSPI_Data |= (1 << 0);
    1072:	80 91 49 01 	lds	r24, 0x0149
    1076:	81 60       	ori	r24, 0x01	; 1
    1078:	80 93 49 01 	sts	0x0149, r24
	}

	/* Fast toggle of PORTB.1 via the PIN register (see datasheet) */
	PINB |= (1 << 1);
    107c:	19 9a       	sbi	0x03, 1	; 3
}
    107e:	8f 91       	pop	r24
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	0f 90       	pop	r0
    1086:	1f 90       	pop	r1
    1088:	18 95       	reti

0000108a <ISPTarget_ConfigureRescueClock>:
		UCSR1B = (1 << TXEN1);
		UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
	#else
		/* Configure OCR1A as an output for the specified AVR model */
		#if defined(USB_SERIES_2_AVR)
		DDRC |= (1 << 6);
    108a:	3e 9a       	sbi	0x07, 6	; 7
		#else
		DDRB |= (1 << 5);
		#endif

		/* Start Timer 1 to generate a 4MHz clock on the OCR1A pin */
		TIMSK1 = 0;
    108c:	10 92 6f 00 	sts	0x006F, r1
		TCNT1  = 0;
    1090:	10 92 85 00 	sts	0x0085, r1
    1094:	10 92 84 00 	sts	0x0084, r1
		OCR1A  = ((F_CPU / 2 / ISP_RESCUE_CLOCK_SPEED) - 1);
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	90 93 89 00 	sts	0x0089, r25
    10a0:	80 93 88 00 	sts	0x0088, r24
		TCCR1A = (1 << COM1A0);
    10a4:	80 e4       	ldi	r24, 0x40	; 64
    10a6:	80 93 80 00 	sts	0x0080, r24
		TCCR1B = ((1 << WGM12) | (1 << CS10));
    10aa:	89 e0       	ldi	r24, 0x09	; 9
    10ac:	80 93 81 00 	sts	0x0081, r24
	#endif
}
    10b0:	08 95       	ret

000010b2 <ISPTarget_DisableTargetISP>:
/** Shuts down the current selected SPI driver (hardware or software, depending on the selected ISP speed) so that no
 *  further communications can occur until the driver is re-initialized.
 */
void ISPTarget_DisableTargetISP(void)
{
	if (HardwareSPIMode)
    10b2:	80 91 29 01 	lds	r24, 0x0129
    10b6:	88 23       	and	r24, r24
    10b8:	49 f0       	breq	.+18     	; 0x10cc <ISPTarget_DisableTargetISP+0x1a>
			}

			/** Turns off the SPI driver, disabling and returning used hardware to their default configuration. */
			static inline void SPI_ShutDown(void)
			{
				DDRB  &= ~((1 << 1) | (1 << 2));
    10ba:	84 b1       	in	r24, 0x04	; 4
    10bc:	89 7f       	andi	r24, 0xF9	; 249
    10be:	84 b9       	out	0x04, r24	; 4
				PORTB &= ~((1 << 0) | (1 << 3));
    10c0:	85 b1       	in	r24, 0x05	; 5
    10c2:	86 7f       	andi	r24, 0xF6	; 246
    10c4:	85 b9       	out	0x05, r24	; 5

				SPCR   = 0;
    10c6:	1c bc       	out	0x2c, r1	; 44
				SPSR   = 0;
    10c8:	1d bc       	out	0x2d, r1	; 45
    10ca:	08 95       	ret
	{
		SPI_ShutDown();
	}
	else
	{
		DDRB  &= ~((1 << 1) | (1 << 2));
    10cc:	84 b1       	in	r24, 0x04	; 4
    10ce:	89 7f       	andi	r24, 0xF9	; 249
    10d0:	84 b9       	out	0x04, r24	; 4
		PORTB &= ~((1 << 0) | (1 << 3));
    10d2:	85 b1       	in	r24, 0x05	; 5
    10d4:	86 7f       	andi	r24, 0xF6	; 246
    10d6:	85 b9       	out	0x05, r24	; 5
		
		ISPTarget_ConfigureRescueClock();
    10d8:	d8 cf       	rjmp	.-80     	; 0x108a <ISPTarget_ConfigureRescueClock>

000010da <ISPTarget_ConfigureSoftwareISP>:
 *  \param[in] SCKDuration  Duration of the desired software ISP SCK clock
 */
void ISPTarget_ConfigureSoftwareISP(const uint8_t SCKDuration)
{
	/* Configure Timer 1 for software ISP using the specified SCK duration */
	TIMSK1 = (1 << OCIE1A);
    10da:	92 e0       	ldi	r25, 0x02	; 2
    10dc:	90 93 6f 00 	sts	0x006F, r25
	TCNT1  = 0;
    10e0:	10 92 85 00 	sts	0x0085, r1
    10e4:	10 92 84 00 	sts	0x0084, r1
	OCR1A  = pgm_read_word(&TimerCompareFromSCKDuration[SCKDuration - sizeof(SPIMaskFromSCKDuration)]);
    10e8:	e8 2f       	mov	r30, r24
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	ee 0f       	add	r30, r30
    10ee:	ff 1f       	adc	r31, r31
    10f0:	ec 5f       	subi	r30, 0xFC	; 252
    10f2:	fe 4f       	sbci	r31, 0xFE	; 254
    10f4:	85 91       	lpm	r24, Z+
    10f6:	94 91       	lpm	r25, Z+
    10f8:	90 93 89 00 	sts	0x0089, r25
    10fc:	80 93 88 00 	sts	0x0088, r24
	TCCR1A = 0;
    1100:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;
    1104:	10 92 81 00 	sts	0x0081, r1
}
    1108:	08 95       	ret

0000110a <ISPTarget_TransferSoftSPIByte>:
 *
 *  \return Received byte of data from the attached target
 */
uint8_t ISPTarget_TransferSoftSPIByte(const uint8_t Byte)
{
	SoftSPI_Data          = Byte;
    110a:	80 93 49 01 	sts	0x0149, r24
	SoftSPI_BitsRemaining = 8;
    110e:	88 e0       	ldi	r24, 0x08	; 8
    1110:	80 93 48 01 	sts	0x0148, r24

	if (SoftSPI_Data & 0x01)
    1114:	80 91 49 01 	lds	r24, 0x0149
    1118:	80 ff       	sbrs	r24, 0
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <ISPTarget_TransferSoftSPIByte+0x16>
	  PORTB |=  (1 << 2);
    111c:	2a 9a       	sbi	0x05, 2	; 5
    111e:	01 c0       	rjmp	.+2      	; 0x1122 <ISPTarget_TransferSoftSPIByte+0x18>
	else
	  PORTB &= ~(1 << 2);
    1120:	2a 98       	cbi	0x05, 2	; 5

	TCNT1  = 0;
    1122:	10 92 85 00 	sts	0x0085, r1
    1126:	10 92 84 00 	sts	0x0084, r1
	TCCR1B = ((1 << WGM12) | (1 << CS11));
    112a:	8a e0       	ldi	r24, 0x0A	; 10
    112c:	80 93 81 00 	sts	0x0081, r24
	while (SoftSPI_BitsRemaining && TimeoutTicksRemaining);
    1130:	80 91 48 01 	lds	r24, 0x0148
    1134:	88 23       	and	r24, r24
    1136:	19 f0       	breq	.+6      	; 0x113e <ISPTarget_TransferSoftSPIByte+0x34>
    1138:	8a b5       	in	r24, 0x2a	; 42
    113a:	88 23       	and	r24, r24
    113c:	c9 f7       	brne	.-14     	; 0x1130 <ISPTarget_TransferSoftSPIByte+0x26>
	TCCR1B = 0;
    113e:	10 92 81 00 	sts	0x0081, r1

	return SoftSPI_Data;
    1142:	80 91 49 01 	lds	r24, 0x0149
}
    1146:	08 95       	ret

00001148 <ISPTarget_SendByte>:
		 *  software routines depending on the selected ISP speed.
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
    1148:	98 2f       	mov	r25, r24
			if (HardwareSPIMode)
    114a:	80 91 29 01 	lds	r24, 0x0129
    114e:	88 23       	and	r24, r24
    1150:	29 f0       	breq	.+10     	; 0x115c <ISPTarget_SendByte+0x14>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1152:	9e bd       	out	0x2e, r25	; 46
				while (!(SPSR & (1 << SPIF)));
    1154:	0d b4       	in	r0, 0x2d	; 45
    1156:	07 fe       	sbrs	r0, 7
    1158:	fd cf       	rjmp	.-6      	; 0x1154 <ISPTarget_SendByte+0xc>
    115a:	08 95       	ret
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    115c:	89 2f       	mov	r24, r25
    115e:	d5 cf       	rjmp	.-86     	; 0x110a <ISPTarget_TransferSoftSPIByte>

00001160 <ISPTarget_WaitWhileTargetBusy>:
 */
uint8_t ISPTarget_WaitWhileTargetBusy(void)
{
	do
	{
		ISPTarget_SendByte(0xF0);
    1160:	80 ef       	ldi	r24, 0xF0	; 240
    1162:	f2 df       	rcall	.-28     	; 0x1148 <ISPTarget_SendByte>
		ISPTarget_SendByte(0x00);
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	f0 df       	rcall	.-32     	; 0x1148 <ISPTarget_SendByte>
		ISPTarget_SendByte(0x00);
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	ee df       	rcall	.-36     	; 0x1148 <ISPTarget_SendByte>
		 *
		 *  \return Received byte of data from the attached target
		 */
		static inline uint8_t ISPTarget_ReceiveByte(void)
		{
			if (HardwareSPIMode)
    116c:	80 91 29 01 	lds	r24, 0x0129
    1170:	88 23       	and	r24, r24
    1172:	31 f0       	breq	.+12     	; 0x1180 <ISPTarget_WaitWhileTargetBusy+0x20>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1174:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1176:	0d b4       	in	r0, 0x2d	; 45
    1178:	07 fe       	sbrs	r0, 7
    117a:	fd cf       	rjmp	.-6      	; 0x1176 <ISPTarget_WaitWhileTargetBusy+0x16>
				return SPDR;
    117c:	8e b5       	in	r24, 0x2e	; 46
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <ISPTarget_WaitWhileTargetBusy+0x24>
			  return SPI_ReceiveByte();
			else
			  return ISPTarget_TransferSoftSPIByte(0x00);
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	c3 df       	rcall	.-122    	; 0x110a <ISPTarget_TransferSoftSPIByte>
	}
	while ((ISPTarget_ReceiveByte() & 0x01) && TimeoutTicksRemaining);
    1184:	80 ff       	sbrs	r24, 0
    1186:	03 c0       	rjmp	.+6      	; 0x118e <ISPTarget_WaitWhileTargetBusy+0x2e>
    1188:	8a b5       	in	r24, 0x2a	; 42
    118a:	88 23       	and	r24, r24
    118c:	49 f7       	brne	.-46     	; 0x1160 <ISPTarget_WaitWhileTargetBusy>

	return TimeoutTicksRemaining ? STATUS_CMD_OK : STATUS_RDY_BSY_TOUT;
    118e:	8a b5       	in	r24, 0x2a	; 42
    1190:	88 23       	and	r24, r24
    1192:	11 f4       	brne	.+4      	; 0x1198 <ISPTarget_WaitWhileTargetBusy+0x38>
    1194:	81 e8       	ldi	r24, 0x81	; 129
    1196:	08 95       	ret
    1198:	80 e0       	ldi	r24, 0x00	; 0
}
    119a:	08 95       	ret

0000119c <ISPTarget_LoadExtendedAddress>:
 *  64KB boundary. This sends the command with the correct address as indicated by the current address
 *  pointer variable set by the host when a SET ADDRESS command is issued.
 */
void ISPTarget_LoadExtendedAddress(void)
{
	ISPTarget_SendByte(LOAD_EXTENDED_ADDRESS_CMD);
    119c:	8d e4       	ldi	r24, 0x4D	; 77
    119e:	d4 df       	rcall	.-88     	; 0x1148 <ISPTarget_SendByte>
	ISPTarget_SendByte(0x00);
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	d2 df       	rcall	.-92     	; 0x1148 <ISPTarget_SendByte>
	ISPTarget_SendByte((CurrentAddress & 0x00FF0000) >> 16);
    11a4:	80 91 46 01 	lds	r24, 0x0146
    11a8:	cf df       	rcall	.-98     	; 0x1148 <ISPTarget_SendByte>
	ISPTarget_SendByte(0x00);
    11aa:	80 e0       	ldi	r24, 0x00	; 0
}
    11ac:	cd cf       	rjmp	.-102    	; 0x1148 <ISPTarget_SendByte>

000011ae <ISPTarget_WaitForProgComplete>:
uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
    11ae:	ef 92       	push	r14
    11b0:	ff 92       	push	r15
    11b2:	0f 93       	push	r16
    11b4:	1f 93       	push	r17
    11b6:	7b 01       	movw	r14, r22
    11b8:	14 2f       	mov	r17, r20
	uint8_t ProgrammingStatus = STATUS_CMD_OK;

	/* Determine method of Programming Complete check */
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	8e 77       	andi	r24, 0x7E	; 126
    11be:	88 30       	cpi	r24, 0x08	; 8
    11c0:	91 05       	cpc	r25, r1
    11c2:	81 f1       	breq	.+96     	; 0x1224 <ISPTarget_WaitForProgComplete+0x76>
    11c4:	89 30       	cpi	r24, 0x09	; 9
    11c6:	91 05       	cpc	r25, r1
    11c8:	34 f4       	brge	.+12     	; 0x11d6 <ISPTarget_WaitForProgComplete+0x28>
    11ca:	82 30       	cpi	r24, 0x02	; 2
    11cc:	91 05       	cpc	r25, r1
    11ce:	59 f0       	breq	.+22     	; 0x11e6 <ISPTarget_WaitForProgComplete+0x38>
    11d0:	04 97       	sbiw	r24, 0x04	; 4
    11d2:	51 f5       	brne	.+84     	; 0x1228 <ISPTarget_WaitForProgComplete+0x7a>
    11d4:	0b c0       	rjmp	.+22     	; 0x11ec <ISPTarget_WaitForProgComplete+0x3e>
    11d6:	80 32       	cpi	r24, 0x20	; 32
    11d8:	91 05       	cpc	r25, r1
    11da:	41 f0       	breq	.+16     	; 0x11ec <ISPTarget_WaitForProgComplete+0x3e>
    11dc:	80 34       	cpi	r24, 0x40	; 64
    11de:	91 05       	cpc	r25, r1
    11e0:	09 f1       	breq	.+66     	; 0x1224 <ISPTarget_WaitForProgComplete+0x76>
    11e2:	40 97       	sbiw	r24, 0x10	; 16
    11e4:	09 f5       	brne	.+66     	; 0x1228 <ISPTarget_WaitForProgComplete+0x7a>
	{
		case PROG_MODE_WORD_TIMEDELAY_MASK:
		case PROG_MODE_PAGED_TIMEDELAY_MASK:
			ISPProtocol_DelayMS(DelayMS);
    11e6:	82 2f       	mov	r24, r18
    11e8:	5b da       	rcall	.-2890   	; 0x6a0 <ISPProtocol_DelayMS>
    11ea:	1e c0       	rjmp	.+60     	; 0x1228 <ISPTarget_WaitForProgComplete+0x7a>
			break;
		case PROG_MODE_WORD_VALUE_MASK:
		case PROG_MODE_PAGED_VALUE_MASK:
			do
			{
				ISPTarget_SendByte(ReadMemCommand);
    11ec:	80 2f       	mov	r24, r16
    11ee:	ac df       	rcall	.-168    	; 0x1148 <ISPTarget_SendByte>
				ISPTarget_SendByte(PollAddress >> 8);
    11f0:	8f 2d       	mov	r24, r15
    11f2:	aa df       	rcall	.-172    	; 0x1148 <ISPTarget_SendByte>
				ISPTarget_SendByte(PollAddress & 0xFF);
    11f4:	8e 2d       	mov	r24, r14
    11f6:	a8 df       	rcall	.-176    	; 0x1148 <ISPTarget_SendByte>
		 *
		 *  \return Received byte of data from the attached target
		 */
		static inline uint8_t ISPTarget_TransferByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    11f8:	80 91 29 01 	lds	r24, 0x0129
    11fc:	88 23       	and	r24, r24
    11fe:	31 f0       	breq	.+12     	; 0x120c <ISPTarget_WaitForProgComplete+0x5e>
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1200:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1202:	0d b4       	in	r0, 0x2d	; 45
    1204:	07 fe       	sbrs	r0, 7
    1206:	fd cf       	rjmp	.-6      	; 0x1202 <ISPTarget_WaitForProgComplete+0x54>
				return SPDR;
    1208:	8e b5       	in	r24, 0x2e	; 46
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <ISPTarget_WaitForProgComplete+0x62>
			  return SPI_TransferByte(Byte);
			else
			  return ISPTarget_TransferSoftSPIByte(Byte);
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	7d df       	rcall	.-262    	; 0x110a <ISPTarget_TransferSoftSPIByte>
			}
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);
    1210:	81 17       	cp	r24, r17
    1212:	19 f4       	brne	.+6      	; 0x121a <ISPTarget_WaitForProgComplete+0x6c>
    1214:	8a b5       	in	r24, 0x2a	; 42
    1216:	88 23       	and	r24, r24
    1218:	49 f7       	brne	.-46     	; 0x11ec <ISPTarget_WaitForProgComplete+0x3e>

			if (!(TimeoutTicksRemaining))
    121a:	8a b5       	in	r24, 0x2a	; 42
    121c:	88 23       	and	r24, r24
    121e:	21 f4       	brne	.+8      	; 0x1228 <ISPTarget_WaitForProgComplete+0x7a>
    1220:	80 e8       	ldi	r24, 0x80	; 128
    1222:	03 c0       	rjmp	.+6      	; 0x122a <ISPTarget_WaitForProgComplete+0x7c>
			 ProgrammingStatus = STATUS_CMD_TOUT;

			break;
		case PROG_MODE_WORD_READYBUSY_MASK:
		case PROG_MODE_PAGED_READYBUSY_MASK:
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
    1224:	9d df       	rcall	.-198    	; 0x1160 <ISPTarget_WaitWhileTargetBusy>
    1226:	01 c0       	rjmp	.+2      	; 0x122a <ISPTarget_WaitForProgComplete+0x7c>
    1228:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}

	return ProgrammingStatus;
}
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	ff 90       	pop	r15
    1230:	ef 90       	pop	r14
    1232:	08 95       	ret

00001234 <ISPTarget_ChangeTargetResetLine>:
 *
 *  \param[in] ResetTarget  Boolean true when the target should be held in reset, false otherwise
 */
void ISPTarget_ChangeTargetResetLine(const bool ResetTarget)
{
	if (ResetTarget)
    1234:	88 23       	and	r24, r24
    1236:	39 f0       	breq	.+14     	; 0x1246 <ISPTarget_ChangeTargetResetLine+0x12>
	{
		AUX_LINE_DDR |= AUX_LINE_MASK;
    1238:	24 9a       	sbi	0x04, 4	; 4

		if (!(V2Params_GetParameterValue(PARAM_RESET_POLARITY)))
    123a:	8e e9       	ldi	r24, 0x9E	; 158
    123c:	00 da       	rcall	.-3072   	; 0x63e <V2Params_GetParameterValue>
    123e:	88 23       	and	r24, r24
    1240:	19 f4       	brne	.+6      	; 0x1248 <ISPTarget_ChangeTargetResetLine+0x14>
		  AUX_LINE_PORT |=  AUX_LINE_MASK;
    1242:	2c 9a       	sbi	0x05, 4	; 5
    1244:	08 95       	ret
		else
		  AUX_LINE_PORT &= ~AUX_LINE_MASK;
	}
	else
	{
		AUX_LINE_DDR  &= ~AUX_LINE_MASK;
    1246:	24 98       	cbi	0x04, 4	; 4
		AUX_LINE_PORT &= ~AUX_LINE_MASK;
    1248:	2c 98       	cbi	0x05, 4	; 5
    124a:	08 95       	ret

0000124c <ISPTarget_EnableTargetISP>:
/** Initialises the appropriate SPI driver (hardware or software, depending on the selected ISP speed) ready for
 *  communication with the attached target.
 */
void ISPTarget_EnableTargetISP(void)
{
	uint8_t SCKDuration = V2Params_GetParameterValue(PARAM_SCK_DURATION);
    124c:	88 e9       	ldi	r24, 0x98	; 152
    124e:	f7 d9       	rcall	.-3090   	; 0x63e <V2Params_GetParameterValue>
    1250:	e8 2f       	mov	r30, r24

	if (SCKDuration < sizeof(SPIMaskFromSCKDuration))
    1252:	87 30       	cpi	r24, 0x07	; 7
    1254:	e8 f4       	brcc	.+58     	; 0x1290 <ISPTarget_EnableTargetISP+0x44>
	{
		HardwareSPIMode = true;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	80 93 29 01 	sts	0x0129, r24

		SPI_Init(pgm_read_byte(&SPIMaskFromSCKDuration[SCKDuration]) | SPI_ORDER_MSB_FIRST |
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	e4 5b       	subi	r30, 0xB4	; 180
    1260:	fd 4f       	sbci	r31, 0xFD	; 253
    1262:	e4 91       	lpm	r30, Z+
    1264:	9e 2f       	mov	r25, r30
    1266:	90 61       	ori	r25, 0x10	; 16
			 *  \param[in] SPIOptions  SPI Options, a mask consisting of one of each of the SPI_SPEED_*,
			 *                         SPI_SCK_*, SPI_SAMPLE_*, SPI_ORDER_* and SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				DDRB  |=  ((1 << 1) | (1 << 2));
    1268:	84 b1       	in	r24, 0x04	; 4
    126a:	86 60       	ori	r24, 0x06	; 6
    126c:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~((1 << 0) | (1 << 3));
    126e:	84 b1       	in	r24, 0x04	; 4
    1270:	86 7f       	andi	r24, 0xF6	; 246
    1272:	84 b9       	out	0x04, r24	; 4
				PORTB |=  ((1 << 0) | (1 << 3));
    1274:	85 b1       	in	r24, 0x05	; 5
    1276:	89 60       	ori	r24, 0x09	; 9
    1278:	85 b9       	out	0x05, r24	; 5

				SPCR   = ((1 << SPE) | SPIOptions);
    127a:	e0 65       	ori	r30, 0x50	; 80
    127c:	ec bd       	out	0x2c, r30	; 44

				if (SPIOptions & SPI_USE_DOUBLESPEED)
    127e:	96 ff       	sbrs	r25, 6
    1280:	03 c0       	rjmp	.+6      	; 0x1288 <ISPTarget_EnableTargetISP+0x3c>
				  SPSR |= (1 << SPI2X);
    1282:	8d b5       	in	r24, 0x2d	; 45
    1284:	81 60       	ori	r24, 0x01	; 1
    1286:	02 c0       	rjmp	.+4      	; 0x128c <ISPTarget_EnableTargetISP+0x40>
				else
				  SPSR &= ~(1 << SPI2X);
    1288:	8d b5       	in	r24, 0x2d	; 45
    128a:	8e 7f       	andi	r24, 0xFE	; 254
    128c:	8d bd       	out	0x2d, r24	; 45
    128e:	08 95       	ret
		                       SPI_SCK_LEAD_RISING | SPI_SAMPLE_LEADING | SPI_MODE_MASTER);
	}
	else
	{
		HardwareSPIMode = false;
    1290:	10 92 29 01 	sts	0x0129, r1

		DDRB  |= ((1 << 1) | (1 << 2));
    1294:	84 b1       	in	r24, 0x04	; 4
    1296:	86 60       	ori	r24, 0x06	; 6
    1298:	84 b9       	out	0x04, r24	; 4
		PORTB |= ((1 << 0) | (1 << 3));
    129a:	85 b1       	in	r24, 0x05	; 5
    129c:	89 60       	ori	r24, 0x09	; 9
    129e:	85 b9       	out	0x05, r24	; 5

		ISPTarget_ConfigureSoftwareISP(SCKDuration);
    12a0:	8e 2f       	mov	r24, r30
    12a2:	1b cf       	rjmp	.-458    	; 0x10da <ISPTarget_ConfigureSoftwareISP>

000012a4 <XPROGProtocol_SetMode>:

/** Handler for the CMD_XPROG_SETMODE command, which sets the programmer-to-target protocol used for PDI/TPI
 *  programming.
 */
void XPROGProtocol_SetMode(void)
{
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	0f 92       	push	r0
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
	struct
	{
		uint8_t Protocol;
	} SetMode_XPROG_Params;

	Endpoint_Read_Stream_LE(&SetMode_XPROG_Params, sizeof(SetMode_XPROG_Params), NO_STREAM_CALLBACK);
    12ae:	ce 01       	movw	r24, r28
    12b0:	01 96       	adiw	r24, 0x01	; 1
    12b2:	61 e0       	ldi	r22, 0x01	; 1
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	40 e0       	ldi	r20, 0x00	; 0
    12b8:	50 e0       	ldi	r21, 0x00	; 0
    12ba:	0e 94 82 12 	call	0x2504	; 0x2504 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    12be:	80 91 e8 00 	lds	r24, 0x00E8
    12c2:	8b 77       	andi	r24, 0x7B	; 123
    12c4:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    12c8:	82 e0       	ldi	r24, 0x02	; 2
    12ca:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
    12ce:	80 91 ec 00 	lds	r24, 0x00EC
    12d2:	81 60       	ori	r24, 0x01	; 1
    12d4:	80 93 ec 00 	sts	0x00EC, r24

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	XPROG_SelectedProtocol = SetMode_XPROG_Params.Protocol;
    12d8:	99 81       	ldd	r25, Y+1	; 0x01
    12da:	90 93 42 01 	sts	0x0142, r25
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    12de:	81 e5       	ldi	r24, 0x51	; 81
    12e0:	80 93 f1 00 	sts	0x00F1, r24

	Endpoint_Write_Byte(CMD_XPROG_SETMODE);
	Endpoint_Write_Byte((SetMode_XPROG_Params.Protocol != XPRG_PROTOCOL_JTAG) ? STATUS_CMD_OK : STATUS_CMD_FAILED);
    12e4:	91 30       	cpi	r25, 0x01	; 1
    12e6:	11 f4       	brne	.+4      	; 0x12ec <XPROGProtocol_SetMode+0x48>
    12e8:	80 ec       	ldi	r24, 0xC0	; 192
    12ea:	01 c0       	rjmp	.+2      	; 0x12ee <XPROGProtocol_SetMode+0x4a>
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12f2:	80 91 e8 00 	lds	r24, 0x00E8
    12f6:	8e 77       	andi	r24, 0x7E	; 126
    12f8:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();
}
    12fc:	0f 90       	pop	r0
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <XPROGProtocol_WriteMemory>:
	Endpoint_ClearIN();
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(void)
{
    1304:	af 92       	push	r10
    1306:	bf 92       	push	r11
    1308:	cf 92       	push	r12
    130a:	df 92       	push	r13
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	c8 50       	subi	r28, 0x08	; 8
    131e:	d1 40       	sbci	r29, 0x01	; 1
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
		uint32_t Address;
		uint16_t Length;
		uint8_t  ProgData[256];
	} WriteMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params, (sizeof(WriteMemory_XPROG_Params) -
    132a:	ce 01       	movw	r24, r28
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	68 e0       	ldi	r22, 0x08	; 8
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	40 e0       	ldi	r20, 0x00	; 0
    1334:	50 e0       	ldi	r21, 0x00	; 0
    1336:	0e 94 82 12 	call	0x2504	; 0x2504 <Endpoint_Read_Stream_LE>
				{
					uint32_t DWord;
					uint8_t  Bytes[4];
				} Data;

				Data.DWord = DWord;
    133a:	3b 81       	ldd	r19, Y+3	; 0x03
    133c:	2c 81       	ldd	r18, Y+4	; 0x04
    133e:	9d 81       	ldd	r25, Y+5	; 0x05
    1340:	8e 81       	ldd	r24, Y+6	; 0x06
	                                                    sizeof(WriteMemory_XPROG_Params).ProgData), NO_STREAM_CALLBACK);
	WriteMemory_XPROG_Params.Address = SwapEndian_32(WriteMemory_XPROG_Params.Address);
    1342:	8b 83       	std	Y+3, r24	; 0x03
    1344:	9c 83       	std	Y+4, r25	; 0x04
    1346:	2d 83       	std	Y+5, r18	; 0x05
    1348:	3e 83       	std	Y+6, r19	; 0x06
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;
    134a:	7f 81       	ldd	r23, Y+7	; 0x07
    134c:	68 85       	ldd	r22, Y+8	; 0x08
	WriteMemory_XPROG_Params.Length  = SwapEndian_16(WriteMemory_XPROG_Params.Length);
    134e:	6f 83       	std	Y+7, r22	; 0x07
    1350:	78 87       	std	Y+8, r23	; 0x08
	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length, NO_STREAM_CALLBACK);
    1352:	8e 01       	movw	r16, r28
    1354:	07 5f       	subi	r16, 0xF7	; 247
    1356:	1f 4f       	sbci	r17, 0xFF	; 255
    1358:	c8 01       	movw	r24, r16
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	50 e0       	ldi	r21, 0x00	; 0
    135e:	0e 94 82 12 	call	0x2504	; 0x2504 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1362:	80 91 e8 00 	lds	r24, 0x00E8
    1366:	8b 77       	andi	r24, 0x7B	; 123
    1368:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    136c:	82 e0       	ldi	r24, 0x02	; 2
    136e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
    1372:	80 91 ec 00 	lds	r24, 0x00EC
    1376:	81 60       	ori	r24, 0x01	; 1
    1378:	80 93 ec 00 	sts	0x00EC, r24

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    137c:	80 91 42 01 	lds	r24, 0x0142
    1380:	88 23       	and	r24, r24
    1382:	79 f5       	brne	.+94     	; 0x13e2 <XPROGProtocol_WriteMemory+0xde>
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
		uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
		bool    PagedMemory      = true;

		switch (WriteMemory_XPROG_Params.MemoryType)
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	83 30       	cpi	r24, 0x03	; 3
    1388:	a9 f0       	breq	.+42     	; 0x13b4 <XPROGProtocol_WriteMemory+0xb0>
    138a:	84 30       	cpi	r24, 0x04	; 4
    138c:	28 f4       	brcc	.+10     	; 0x1398 <XPROGProtocol_WriteMemory+0x94>
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	69 f0       	breq	.+26     	; 0x13ac <XPROGProtocol_WriteMemory+0xa8>
    1392:	82 30       	cpi	r24, 0x02	; 2
    1394:	a9 f4       	brne	.+42     	; 0x13c0 <XPROGProtocol_WriteMemory+0xbc>
    1396:	0c c0       	rjmp	.+24     	; 0x13b0 <XPROGProtocol_WriteMemory+0xac>
    1398:	85 30       	cpi	r24, 0x05	; 5
    139a:	31 f0       	breq	.+12     	; 0x13a8 <XPROGProtocol_WriteMemory+0xa4>
    139c:	85 30       	cpi	r24, 0x05	; 5
    139e:	08 f4       	brcc	.+2      	; 0x13a2 <XPROGProtocol_WriteMemory+0x9e>
    13a0:	4a c0       	rjmp	.+148    	; 0x1436 <XPROGProtocol_WriteMemory+0x132>
    13a2:	86 30       	cpi	r24, 0x06	; 6
    13a4:	69 f4       	brne	.+26     	; 0x13c0 <XPROGProtocol_WriteMemory+0xbc>
    13a6:	0a c0       	rjmp	.+20     	; 0x13bc <XPROGProtocol_WriteMemory+0xb8>
    13a8:	88 e0       	ldi	r24, 0x08	; 8
    13aa:	46 c0       	rjmp	.+140    	; 0x1438 <XPROGProtocol_WriteMemory+0x134>
    13ac:	44 e2       	ldi	r20, 0x24	; 36
    13ae:	09 c0       	rjmp	.+18     	; 0x13c2 <XPROGProtocol_WriteMemory+0xbe>
    13b0:	4c e2       	ldi	r20, 0x2C	; 44
    13b2:	07 c0       	rjmp	.+14     	; 0x13c2 <XPROGProtocol_WriteMemory+0xbe>
			case XPRG_MEM_TYPE_APPL:
				WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
				break;
			case XPRG_MEM_TYPE_BOOT:
				WriteCommand     = XMEGA_NVM_CMD_WRITEBOOTSECPAGE;
				break;
    13b4:	45 e3       	ldi	r20, 0x35	; 53
    13b6:	83 e3       	ldi	r24, 0x33	; 51
    13b8:	66 e3       	ldi	r22, 0x36	; 54
    13ba:	05 c0       	rjmp	.+10     	; 0x13c6 <XPROGProtocol_WriteMemory+0xc2>
			case XPRG_MEM_TYPE_EEPROM:
				WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
				WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
				EraseBuffCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF;
				break;
    13bc:	4a e1       	ldi	r20, 0x1A	; 26
    13be:	01 c0       	rjmp	.+2      	; 0x13c2 <XPROGProtocol_WriteMemory+0xbe>
			case XPRG_MEM_TYPE_USERSIG:
				WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
				break;
    13c0:	4e e2       	ldi	r20, 0x2E	; 46
    13c2:	83 e2       	ldi	r24, 0x23	; 35
    13c4:	66 e2       	ldi	r22, 0x26	; 38
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
    13c6:	eb 80       	ldd	r14, Y+3	; 0x03
    13c8:	fc 80       	ldd	r15, Y+4	; 0x04
    13ca:	0d 81       	ldd	r16, Y+5	; 0x05
    13cc:	1e 81       	ldd	r17, Y+6	; 0x06
    13ce:	af 80       	ldd	r10, Y+7	; 0x07
    13d0:	b8 84       	ldd	r11, Y+8	; 0x08
    13d2:	2a 81       	ldd	r18, Y+2	; 0x02
    13d4:	99 e0       	ldi	r25, 0x09	; 9
    13d6:	c9 2e       	mov	r12, r25
    13d8:	d1 2c       	mov	r13, r1
    13da:	cc 0e       	add	r12, r28
    13dc:	dd 1e       	adc	r13, r29
    13de:	df d2       	rcall	.+1470   	; 0x199e <XMEGANVM_WritePageMemory>
    13e0:	06 c0       	rjmp	.+12     	; 0x13ee <XPROGProtocol_WriteMemory+0xea>
		}
	}
	else
	{
		/* Send write command to the TPI device, indicate timeout if occurred */
		if (!(TINYNVM_WriteMemory(WriteMemory_XPROG_Params.Address, WriteMemory_XPROG_Params.ProgData,
    13e2:	4f 81       	ldd	r20, Y+7	; 0x07
    13e4:	58 85       	ldd	r21, Y+8	; 0x08
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ea:	b8 01       	movw	r22, r16
    13ec:	e6 d4       	rcall	.+2508   	; 0x1dba <TINYNVM_WriteMemory>
    13ee:	88 23       	and	r24, r24
    13f0:	11 f0       	breq	.+4      	; 0x13f6 <XPROGProtocol_WriteMemory+0xf2>
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	01 c0       	rjmp	.+2      	; 0x13f8 <XPROGProtocol_WriteMemory+0xf4>
    13f6:	93 e0       	ldi	r25, 0x03	; 3
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    13f8:	80 e5       	ldi	r24, 0x50	; 80
    13fa:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13fe:	84 e0       	ldi	r24, 0x04	; 4
    1400:	80 93 f1 00 	sts	0x00F1, r24
    1404:	90 93 f1 00 	sts	0x00F1, r25
    1408:	80 91 e8 00 	lds	r24, 0x00E8
    140c:	8e 77       	andi	r24, 0x7E	; 126
    140e:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_Write_Byte(CMD_XPROG);
	Endpoint_Write_Byte(XPRG_CMD_WRITE_MEM);
	Endpoint_Write_Byte(ReturnStatus);
	Endpoint_ClearIN();
}
    1412:	c8 5f       	subi	r28, 0xF8	; 248
    1414:	de 4f       	sbci	r29, 0xFE	; 254
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	1f 91       	pop	r17
    1426:	0f 91       	pop	r16
    1428:	ff 90       	pop	r15
    142a:	ef 90       	pop	r14
    142c:	df 90       	pop	r13
    142e:	cf 90       	pop	r12
    1430:	bf 90       	pop	r11
    1432:	af 90       	pop	r10
    1434:	08 95       	ret
    1436:	8c e4       	ldi	r24, 0x4C	; 76
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
    1438:	4b 81       	ldd	r20, Y+3	; 0x03
    143a:	5c 81       	ldd	r21, Y+4	; 0x04
    143c:	6d 81       	ldd	r22, Y+5	; 0x05
    143e:	7e 81       	ldd	r23, Y+6	; 0x06
    1440:	29 85       	ldd	r18, Y+9	; 0x09
    1442:	14 d3       	rcall	.+1576   	; 0x1a6c <XMEGANVM_WriteByteMemory>
    1444:	d4 cf       	rjmp	.-88     	; 0x13ee <XPROGProtocol_WriteMemory+0xea>

00001446 <XPROGProtocol_ReadMemory>:

/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(void)
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	c7 50       	subi	r28, 0x07	; 7
    1450:	d1 40       	sbci	r29, 0x01	; 1
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
		uint8_t  MemoryType;
		uint32_t Address;
		uint16_t Length;
	} ReadMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadMemory_XPROG_Params, sizeof(ReadMemory_XPROG_Params), NO_STREAM_CALLBACK);
    145c:	ce 01       	movw	r24, r28
    145e:	01 96       	adiw	r24, 0x01	; 1
    1460:	67 e0       	ldi	r22, 0x07	; 7
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	40 e0       	ldi	r20, 0x00	; 0
    1466:	50 e0       	ldi	r21, 0x00	; 0
    1468:	0e 94 82 12 	call	0x2504	; 0x2504 <Endpoint_Read_Stream_LE>
				{
					uint32_t DWord;
					uint8_t  Bytes[4];
				} Data;

				Data.DWord = DWord;
    146c:	9a 81       	ldd	r25, Y+2	; 0x02
    146e:	eb 81       	ldd	r30, Y+3	; 0x03
    1470:	7c 81       	ldd	r23, Y+4	; 0x04
    1472:	6d 81       	ldd	r22, Y+5	; 0x05
	ReadMemory_XPROG_Params.Address = SwapEndian_32(ReadMemory_XPROG_Params.Address);
    1474:	6a 83       	std	Y+2, r22	; 0x02
    1476:	7b 83       	std	Y+3, r23	; 0x03
    1478:	ec 83       	std	Y+4, r30	; 0x04
    147a:	9d 83       	std	Y+5, r25	; 0x05
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Word = Word;
    147c:	3e 81       	ldd	r19, Y+6	; 0x06
    147e:	2f 81       	ldd	r18, Y+7	; 0x07
	ReadMemory_XPROG_Params.Length  = SwapEndian_16(ReadMemory_XPROG_Params.Length);
    1480:	2e 83       	std	Y+6, r18	; 0x06
    1482:	3f 83       	std	Y+7, r19	; 0x07
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1484:	80 91 e8 00 	lds	r24, 0x00E8
    1488:	8b 77       	andi	r24, 0x7B	; 123
    148a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    148e:	82 e0       	ldi	r24, 0x02	; 2
    1490:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
    1494:	80 91 ec 00 	lds	r24, 0x00EC
    1498:	81 60       	ori	r24, 0x01	; 1
    149a:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ReadBuffer[256];

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    149e:	80 91 42 01 	lds	r24, 0x0142
    14a2:	ae 01       	movw	r20, r28
    14a4:	48 5f       	subi	r20, 0xF8	; 248
    14a6:	5f 4f       	sbci	r21, 0xFF	; 255
    14a8:	88 23       	and	r24, r24
    14aa:	19 f4       	brne	.+6      	; 0x14b2 <XPROGProtocol_ReadMemory+0x6c>
	{
		/* Read the PDI target's memory, indicate timeout if occurred */
		if (!(XMEGANVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
    14ac:	8e 2f       	mov	r24, r30
    14ae:	00 d3       	rcall	.+1536   	; 0x1ab0 <XMEGANVM_ReadMemory>
    14b0:	04 c0       	rjmp	.+8      	; 0x14ba <XPROGProtocol_ReadMemory+0x74>
		  ReturnStatus = XPRG_ERR_TIMEOUT;
	}
	else
	{
		/* Read the TPI target's memory, indicate timeout if occurred */
		if (!(TINYNVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
    14b2:	cb 01       	movw	r24, r22
    14b4:	ba 01       	movw	r22, r20
    14b6:	a9 01       	movw	r20, r18
    14b8:	b8 d4       	rcall	.+2416   	; 0x1e2a <TINYNVM_ReadMemory>
    14ba:	88 23       	and	r24, r24
    14bc:	11 f4       	brne	.+4      	; 0x14c2 <XPROGProtocol_ReadMemory+0x7c>
    14be:	93 e0       	ldi	r25, 0x03	; 3
    14c0:	01 c0       	rjmp	.+2      	; 0x14c4 <XPROGProtocol_ReadMemory+0x7e>
    14c2:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    14c4:	80 e5       	ldi	r24, 0x50	; 80
    14c6:	80 93 f1 00 	sts	0x00F1, r24

	Endpoint_Write_Byte(CMD_XPROG);
	Endpoint_Write_Byte(XPRG_CMD_READ_MEM);
	Endpoint_Write_Byte(ReturnStatus);

	if (ReturnStatus == XPRG_ERR_OK)
    14ca:	85 e0       	ldi	r24, 0x05	; 5
    14cc:	80 93 f1 00 	sts	0x00F1, r24
    14d0:	90 93 f1 00 	sts	0x00F1, r25
    14d4:	99 23       	and	r25, r25
    14d6:	41 f4       	brne	.+16     	; 0x14e8 <XPROGProtocol_ReadMemory+0xa2>
	  Endpoint_Write_Stream_LE(ReadBuffer, ReadMemory_XPROG_Params.Length, NO_STREAM_CALLBACK);
    14d8:	6e 81       	ldd	r22, Y+6	; 0x06
    14da:	7f 81       	ldd	r23, Y+7	; 0x07
    14dc:	ce 01       	movw	r24, r28
    14de:	08 96       	adiw	r24, 0x08	; 8
    14e0:	40 e0       	ldi	r20, 0x00	; 0
    14e2:	50 e0       	ldi	r21, 0x00	; 0
    14e4:	0e 94 bd 12 	call	0x257a	; 0x257a <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14e8:	80 91 e8 00 	lds	r24, 0x00E8
    14ec:	8e 77       	andi	r24, 0x7E	; 126
    14ee:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearIN();
}
    14f2:	c9 5f       	subi	r28, 0xF9	; 249
    14f4:	de 4f       	sbci	r29, 0xFE	; 254
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	08 95       	ret

00001506 <XPROGProtocol_Command>:

/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
void XPROGProtocol_Command(void)
{
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	29 97       	sbiw	r28, 0x09	; 9
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    151a:	90 91 f1 00 	lds	r25, 0x00F1
	uint8_t XPROGCommand = Endpoint_Read_Byte();

	switch (XPROGCommand)
    151e:	94 30       	cpi	r25, 0x04	; 4
    1520:	09 f4       	brne	.+2      	; 0x1524 <XPROGProtocol_Command+0x1e>
    1522:	ad c0       	rjmp	.+346    	; 0x167e <XPROGProtocol_Command+0x178>
    1524:	95 30       	cpi	r25, 0x05	; 5
    1526:	48 f4       	brcc	.+18     	; 0x153a <XPROGProtocol_Command+0x34>
    1528:	92 30       	cpi	r25, 0x02	; 2
    152a:	a1 f1       	breq	.+104    	; 0x1594 <XPROGProtocol_Command+0x8e>
    152c:	93 30       	cpi	r25, 0x03	; 3
    152e:	08 f0       	brcs	.+2      	; 0x1532 <XPROGProtocol_Command+0x2c>
    1530:	4d c0       	rjmp	.+154    	; 0x15cc <XPROGProtocol_Command+0xc6>
    1532:	91 30       	cpi	r25, 0x01	; 1
    1534:	09 f0       	breq	.+2      	; 0x1538 <XPROGProtocol_Command+0x32>
    1536:	36 c1       	rjmp	.+620    	; 0x17a4 <XPROGProtocol_Command+0x29e>
    1538:	0a c0       	rjmp	.+20     	; 0x154e <XPROGProtocol_Command+0x48>
    153a:	96 30       	cpi	r25, 0x06	; 6
    153c:	09 f4       	brne	.+2      	; 0x1540 <XPROGProtocol_Command+0x3a>
    153e:	a3 c0       	rjmp	.+326    	; 0x1686 <XPROGProtocol_Command+0x180>
    1540:	96 30       	cpi	r25, 0x06	; 6
    1542:	08 f4       	brcc	.+2      	; 0x1546 <XPROGProtocol_Command+0x40>
    1544:	9e c0       	rjmp	.+316    	; 0x1682 <XPROGProtocol_Command+0x17c>
    1546:	97 30       	cpi	r25, 0x07	; 7
    1548:	09 f0       	breq	.+2      	; 0x154c <XPROGProtocol_Command+0x46>
    154a:	2c c1       	rjmp	.+600    	; 0x17a4 <XPROGProtocol_Command+0x29e>
    154c:	de c0       	rjmp	.+444    	; 0x170a <XPROGProtocol_Command+0x204>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    154e:	80 91 e8 00 	lds	r24, 0x00E8
    1552:	8b 77       	andi	r24, 0x7B	; 123
    1554:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1558:	82 e0       	ldi	r24, 0x02	; 2
    155a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
    155e:	80 91 ec 00 	lds	r24, 0x00EC
    1562:	81 60       	ori	r24, 0x01	; 1
    1564:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	bool NVMBusEnabled = false;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    1568:	80 91 42 01 	lds	r24, 0x0142
    156c:	88 23       	and	r24, r24
    156e:	11 f4       	brne	.+4      	; 0x1574 <XPROGProtocol_Command+0x6e>
	  NVMBusEnabled = XMEGANVM_EnablePDI();
    1570:	96 d3       	rcall	.+1836   	; 0x1c9e <XMEGANVM_EnablePDI>
    1572:	05 c0       	rjmp	.+10     	; 0x157e <XPROGProtocol_Command+0x78>
	else if (XPROG_SelectedProtocol == XPRG_PROTOCOL_TPI)
    1574:	82 30       	cpi	r24, 0x02	; 2
    1576:	11 f0       	breq	.+4      	; 0x157c <XPROGProtocol_Command+0x76>
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <XPROGProtocol_Command+0x7a>
	  NVMBusEnabled = TINYNVM_EnableTPI();
    157c:	91 d4       	rcall	.+2338   	; 0x1ea0 <TINYNVM_EnableTPI>
    157e:	98 2f       	mov	r25, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    1580:	80 e5       	ldi	r24, 0x50	; 80
    1582:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	80 93 f1 00 	sts	0x00F1, r24
    158c:	89 27       	eor	r24, r25
    158e:	80 93 f1 00 	sts	0x00F1, r24
    1592:	03 c1       	rjmp	.+518    	; 0x179a <XPROGProtocol_Command+0x294>
    1594:	80 91 e8 00 	lds	r24, 0x00E8
    1598:	8b 77       	andi	r24, 0x7B	; 123
    159a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    159e:	90 93 e9 00 	sts	0x00E9, r25
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
    15a2:	80 91 ec 00 	lds	r24, 0x00EC
    15a6:	81 60       	ori	r24, 0x01	; 1
    15a8:	80 93 ec 00 	sts	0x00EC, r24
{
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    15ac:	80 91 42 01 	lds	r24, 0x0142
    15b0:	88 23       	and	r24, r24
    15b2:	11 f4       	brne	.+4      	; 0x15b8 <XPROGProtocol_Command+0xb2>
	  XMEGANVM_DisablePDI();
    15b4:	6a d3       	rcall	.+1748   	; 0x1c8a <XMEGANVM_DisablePDI>
    15b6:	01 c0       	rjmp	.+2      	; 0x15ba <XPROGProtocol_Command+0xb4>
	else
	  TINYNVM_DisableTPI();
    15b8:	6d d4       	rcall	.+2266   	; 0x1e94 <TINYNVM_DisableTPI>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    15ba:	80 e5       	ldi	r24, 0x50	; 80
    15bc:	80 93 f1 00 	sts	0x00F1, r24
	{
		uint8_t  MemoryType;
		uint32_t Address;
	} Erase_XPROG_Params;

	Endpoint_Read_Stream_LE(&Erase_XPROG_Params, sizeof(Erase_XPROG_Params), NO_STREAM_CALLBACK);
    15c0:	82 e0       	ldi	r24, 0x02	; 2
    15c2:	80 93 f1 00 	sts	0x00F1, r24
    15c6:	10 92 f1 00 	sts	0x00F1, r1
    15ca:	e7 c0       	rjmp	.+462    	; 0x179a <XPROGProtocol_Command+0x294>
    15cc:	ce 01       	movw	r24, r28
    15ce:	05 96       	adiw	r24, 0x05	; 5
    15d0:	65 e0       	ldi	r22, 0x05	; 5
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	40 e0       	ldi	r20, 0x00	; 0
    15d6:	50 e0       	ldi	r21, 0x00	; 0
    15d8:	95 d7       	rcall	.+3882   	; 0x2504 <Endpoint_Read_Stream_LE>
				{
					uint32_t DWord;
					uint8_t  Bytes[4];
				} Data;

				Data.DWord = DWord;
    15da:	58 85       	ldd	r21, Y+8	; 0x08
    15dc:	49 85       	ldd	r20, Y+9	; 0x09

				Temp = Data.Bytes[0];
    15de:	7e 81       	ldd	r23, Y+6	; 0x06
				Data.Bytes[0] = Data.Bytes[3];
				Data.Bytes[3] = Temp;

				Temp = Data.Bytes[1];
    15e0:	6f 81       	ldd	r22, Y+7	; 0x07
	Erase_XPROG_Params.Address = SwapEndian_32(Erase_XPROG_Params.Address);
    15e2:	4e 83       	std	Y+6, r20	; 0x06
    15e4:	5f 83       	std	Y+7, r21	; 0x07
    15e6:	68 87       	std	Y+8, r22	; 0x08
    15e8:	79 87       	std	Y+9, r23	; 0x09
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    15ea:	80 91 e8 00 	lds	r24, 0x00E8
    15ee:	8b 77       	andi	r24, 0x7B	; 123
    15f0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    15f4:	82 e0       	ldi	r24, 0x02	; 2
    15f6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
    15fa:	80 91 ec 00 	lds	r24, 0x00EC
    15fe:	81 60       	ori	r24, 0x01	; 1
    1600:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t EraseCommand;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    1604:	80 91 42 01 	lds	r24, 0x0142
    1608:	9d 81       	ldd	r25, Y+5	; 0x05
    160a:	88 23       	and	r24, r24
    160c:	39 f5       	brne	.+78     	; 0x165c <XPROGProtocol_Command+0x156>
	{
		/* Determine which NVM command to send to the device depending on the memory to erase */
		switch (Erase_XPROG_Params.MemoryType)
    160e:	94 30       	cpi	r25, 0x04	; 4
    1610:	c1 f0       	breq	.+48     	; 0x1642 <XPROGProtocol_Command+0x13c>
    1612:	95 30       	cpi	r25, 0x05	; 5
    1614:	38 f4       	brcc	.+14     	; 0x1624 <XPROGProtocol_Command+0x11e>
    1616:	92 30       	cpi	r25, 0x02	; 2
    1618:	71 f0       	breq	.+28     	; 0x1636 <XPROGProtocol_Command+0x130>
    161a:	93 30       	cpi	r25, 0x03	; 3
    161c:	80 f4       	brcc	.+32     	; 0x163e <XPROGProtocol_Command+0x138>
    161e:	91 30       	cpi	r25, 0x01	; 1
    1620:	d1 f4       	brne	.+52     	; 0x1656 <XPROGProtocol_Command+0x150>
    1622:	0b c0       	rjmp	.+22     	; 0x163a <XPROGProtocol_Command+0x134>
    1624:	96 30       	cpi	r25, 0x06	; 6
    1626:	89 f0       	breq	.+34     	; 0x164a <XPROGProtocol_Command+0x144>
    1628:	96 30       	cpi	r25, 0x06	; 6
    162a:	68 f0       	brcs	.+26     	; 0x1646 <XPROGProtocol_Command+0x140>
    162c:	97 30       	cpi	r25, 0x07	; 7
    162e:	79 f0       	breq	.+30     	; 0x164e <XPROGProtocol_Command+0x148>
    1630:	98 30       	cpi	r25, 0x08	; 8
    1632:	89 f4       	brne	.+34     	; 0x1656 <XPROGProtocol_Command+0x150>
    1634:	0e c0       	rjmp	.+28     	; 0x1652 <XPROGProtocol_Command+0x14c>
    1636:	80 e2       	ldi	r24, 0x20	; 32
    1638:	0f c0       	rjmp	.+30     	; 0x1658 <XPROGProtocol_Command+0x152>
    163a:	80 e4       	ldi	r24, 0x40	; 64
    163c:	0d c0       	rjmp	.+26     	; 0x1658 <XPROGProtocol_Command+0x152>
    163e:	88 e6       	ldi	r24, 0x68	; 104
    1640:	0b c0       	rjmp	.+22     	; 0x1658 <XPROGProtocol_Command+0x152>
    1642:	80 e3       	ldi	r24, 0x30	; 48
    1644:	09 c0       	rjmp	.+18     	; 0x1658 <XPROGProtocol_Command+0x152>
    1646:	82 e2       	ldi	r24, 0x22	; 34
    1648:	07 c0       	rjmp	.+14     	; 0x1658 <XPROGProtocol_Command+0x152>
    164a:	8a e2       	ldi	r24, 0x2A	; 42
    164c:	05 c0       	rjmp	.+10     	; 0x1658 <XPROGProtocol_Command+0x152>
    164e:	82 e3       	ldi	r24, 0x32	; 50
    1650:	03 c0       	rjmp	.+6      	; 0x1658 <XPROGProtocol_Command+0x152>
    1652:	88 e1       	ldi	r24, 0x18	; 24
    1654:	01 c0       	rjmp	.+2      	; 0x1658 <XPROGProtocol_Command+0x152>
    1656:	80 e0       	ldi	r24, 0x00	; 0
				EraseCommand = XMEGA_NVM_CMD_NOOP;
				break;
		}

		/* Erase the target memory, indicate timeout if occurred */
		if (!(XMEGANVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
    1658:	6f d2       	rcall	.+1246   	; 0x1b38 <XMEGANVM_EraseMemory>
    165a:	07 c0       	rjmp	.+14     	; 0x166a <XPROGProtocol_Command+0x164>
		  ReturnStatus = XPRG_ERR_TIMEOUT;
	}
	else
	{
		if (Erase_XPROG_Params.MemoryType == XPRG_ERASE_CHIP)
    165c:	91 30       	cpi	r25, 0x01	; 1
    165e:	11 f0       	breq	.+4      	; 0x1664 <XPROGProtocol_Command+0x15e>
    1660:	84 e1       	ldi	r24, 0x14	; 20
    1662:	01 c0       	rjmp	.+2      	; 0x1666 <XPROGProtocol_Command+0x160>
    1664:	80 e1       	ldi	r24, 0x10	; 16
		  EraseCommand = TINY_NVM_CMD_CHIPERASE;
		else
		  EraseCommand = TINY_NVM_CMD_SECTIONERASE;

		/* Erase the target memory, indicate timeout if occurred */
		if (!(TINYNVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
    1666:	ba 01       	movw	r22, r20
    1668:	8d d3       	rcall	.+1818   	; 0x1d84 <TINYNVM_EraseMemory>
    166a:	88 23       	and	r24, r24
    166c:	11 f0       	breq	.+4      	; 0x1672 <XPROGProtocol_Command+0x16c>
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	01 c0       	rjmp	.+2      	; 0x1674 <XPROGProtocol_Command+0x16e>
    1672:	93 e0       	ldi	r25, 0x03	; 3
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    1674:	80 e5       	ldi	r24, 0x50	; 80
    1676:	80 93 f1 00 	sts	0x00F1, r24
			break;
		case XPRG_CMD_ERASE:
			XPROGProtocol_Erase();
			break;
		case XPRG_CMD_WRITE_MEM:
			XPROGProtocol_WriteMemory();
    167a:	83 e0       	ldi	r24, 0x03	; 3
    167c:	8a c0       	rjmp	.+276    	; 0x1792 <XPROGProtocol_Command+0x28c>
    167e:	42 de       	rcall	.-892    	; 0x1304 <XPROGProtocol_WriteMemory>
    1680:	91 c0       	rjmp	.+290    	; 0x17a4 <XPROGProtocol_Command+0x29e>
			break;
		case XPRG_CMD_READ_MEM:
			XPROGProtocol_ReadMemory();
    1682:	e1 de       	rcall	.-574    	; 0x1446 <XPROGProtocol_ReadMemory>
    1684:	8f c0       	rjmp	.+286    	; 0x17a4 <XPROGProtocol_Command+0x29e>
	struct
	{
		uint8_t CRCType;
	} ReadCRC_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadCRC_XPROG_Params, sizeof(ReadCRC_XPROG_Params), NO_STREAM_CALLBACK);
    1686:	ce 01       	movw	r24, r28
    1688:	05 96       	adiw	r24, 0x05	; 5
    168a:	61 e0       	ldi	r22, 0x01	; 1
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	40 e0       	ldi	r20, 0x00	; 0
    1690:	50 e0       	ldi	r21, 0x00	; 0
    1692:	38 d7       	rcall	.+3696   	; 0x2504 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1694:	80 91 e8 00 	lds	r24, 0x00E8
    1698:	8b 77       	andi	r24, 0x7B	; 123
    169a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    169e:	82 e0       	ldi	r24, 0x02	; 2
    16a0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
    16a4:	80 91 ec 00 	lds	r24, 0x00EC
    16a8:	81 60       	ori	r24, 0x01	; 1
    16aa:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPNUM);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint32_t MemoryCRC;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    16ae:	80 91 42 01 	lds	r24, 0x0142
    16b2:	88 23       	and	r24, r24
    16b4:	11 f0       	breq	.+4      	; 0x16ba <XPROGProtocol_Command+0x1b4>
    16b6:	91 e0       	ldi	r25, 0x01	; 1
    16b8:	13 c0       	rjmp	.+38     	; 0x16e0 <XPROGProtocol_Command+0x1da>
	{
		uint8_t CRCCommand;

		/* Determine which NVM command to send to the device depending on the memory to CRC */
		switch (ReadCRC_XPROG_Params.CRCType)
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	81 30       	cpi	r24, 0x01	; 1
    16be:	21 f0       	breq	.+8      	; 0x16c8 <XPROGProtocol_Command+0x1c2>
    16c0:	82 30       	cpi	r24, 0x02	; 2
    16c2:	21 f4       	brne	.+8      	; 0x16cc <XPROGProtocol_Command+0x1c6>
    16c4:	89 e3       	ldi	r24, 0x39	; 57
    16c6:	03 c0       	rjmp	.+6      	; 0x16ce <XPROGProtocol_Command+0x1c8>
    16c8:	88 e3       	ldi	r24, 0x38	; 56
    16ca:	01 c0       	rjmp	.+2      	; 0x16ce <XPROGProtocol_Command+0x1c8>
    16cc:	88 e7       	ldi	r24, 0x78	; 120
				CRCCommand = XMEGA_NVM_CMD_FLASHCRC;
				break;
		}

		/* Perform and retrieve the memory CRC, indicate timeout if occurred */
		if (!(XMEGANVM_GetMemoryCRC(CRCCommand, &MemoryCRC)))
    16ce:	be 01       	movw	r22, r28
    16d0:	6f 5f       	subi	r22, 0xFF	; 255
    16d2:	7f 4f       	sbci	r23, 0xFF	; 255
    16d4:	9e d2       	rcall	.+1340   	; 0x1c12 <XMEGANVM_GetMemoryCRC>
    16d6:	88 23       	and	r24, r24
    16d8:	11 f4       	brne	.+4      	; 0x16de <XPROGProtocol_Command+0x1d8>
    16da:	93 e0       	ldi	r25, 0x03	; 3
    16dc:	01 c0       	rjmp	.+2      	; 0x16e0 <XPROGProtocol_Command+0x1da>
    16de:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    16e0:	80 e5       	ldi	r24, 0x50	; 80
    16e2:	80 93 f1 00 	sts	0x00F1, r24

	Endpoint_Write_Byte(CMD_XPROG);
	Endpoint_Write_Byte(XPRG_CMD_CRC);
	Endpoint_Write_Byte(ReturnStatus);

	if (ReturnStatus == XPRG_ERR_OK)
    16e6:	86 e0       	ldi	r24, 0x06	; 6
    16e8:	80 93 f1 00 	sts	0x00F1, r24
    16ec:	90 93 f1 00 	sts	0x00F1, r25
    16f0:	99 23       	and	r25, r25
    16f2:	09 f0       	breq	.+2      	; 0x16f6 <XPROGProtocol_Command+0x1f0>
    16f4:	52 c0       	rjmp	.+164    	; 0x179a <XPROGProtocol_Command+0x294>
	{
		Endpoint_Write_Byte(MemoryCRC >> 16);
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	9a 81       	ldd	r25, Y+2	; 0x02
    16fa:	ab 81       	ldd	r26, Y+3	; 0x03
    16fc:	bc 81       	ldd	r27, Y+4	; 0x04
    16fe:	9d 01       	movw	r18, r26
    1700:	44 27       	eor	r20, r20
    1702:	55 27       	eor	r21, r21
    1704:	20 93 f1 00 	sts	0x00F1, r18
    1708:	44 c0       	rjmp	.+136    	; 0x1792 <XPROGProtocol_Command+0x28c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    170a:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t ReturnStatus = XPRG_ERR_OK;

	uint8_t XPROGParam = Endpoint_Read_Byte();

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
    170e:	82 30       	cpi	r24, 0x02	; 2
    1710:	e1 f0       	breq	.+56     	; 0x174a <XPROGProtocol_Command+0x244>
    1712:	83 30       	cpi	r24, 0x03	; 3
    1714:	18 f4       	brcc	.+6      	; 0x171c <XPROGProtocol_Command+0x216>
    1716:	81 30       	cpi	r24, 0x01	; 1
    1718:	29 f4       	brne	.+10     	; 0x1724 <XPROGProtocol_Command+0x21e>
    171a:	06 c0       	rjmp	.+12     	; 0x1728 <XPROGProtocol_Command+0x222>
    171c:	83 30       	cpi	r24, 0x03	; 3
    171e:	f1 f0       	breq	.+60     	; 0x175c <XPROGProtocol_Command+0x256>
    1720:	84 30       	cpi	r24, 0x04	; 4
    1722:	09 f1       	breq	.+66     	; 0x1766 <XPROGProtocol_Command+0x260>
    1724:	91 e0       	ldi	r25, 0x01	; 1
    1726:	24 c0       	rjmp	.+72     	; 0x1770 <XPROGProtocol_Command+0x26a>
				{
					uint32_t DWord;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[3] = UEDATX;
    1728:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[2] = UEDATX;
    172c:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    1730:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[0] = UEDATX;
    1734:	80 91 f1 00 	lds	r24, 0x00F1
	{
		case XPRG_PARAM_NVMBASE:
			XPROG_Param_NVMBase = Endpoint_Read_DWord_BE();
    1738:	80 93 2a 01 	sts	0x012A, r24
    173c:	90 93 2b 01 	sts	0x012B, r25
    1740:	20 93 2c 01 	sts	0x012C, r18
    1744:	30 93 2d 01 	sts	0x012D, r19
    1748:	12 c0       	rjmp	.+36     	; 0x176e <XPROGProtocol_Command+0x268>
				{
					uint16_t Word;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[1] = UEDATX;
    174a:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[0] = UEDATX;
    174e:	80 91 f1 00 	lds	r24, 0x00F1
			break;
		case XPRG_PARAM_EEPPAGESIZE:
			XPROG_Param_EEPageSize = Endpoint_Read_Word_BE();
    1752:	80 93 2e 01 	sts	0x012E, r24
    1756:	90 93 2f 01 	sts	0x012F, r25
    175a:	09 c0       	rjmp	.+18     	; 0x176e <XPROGProtocol_Command+0x268>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    175c:	80 91 f1 00 	lds	r24, 0x00F1
			break;
		case XPRG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = Endpoint_Read_Byte();
    1760:	80 93 30 01 	sts	0x0130, r24
    1764:	04 c0       	rjmp	.+8      	; 0x176e <XPROGProtocol_Command+0x268>
    1766:	80 91 f1 00 	lds	r24, 0x00F1
			break;
		case XPRG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = Endpoint_Read_Byte();
    176a:	80 93 31 01 	sts	0x0131, r24
    176e:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1770:	80 91 e8 00 	lds	r24, 0x00E8
    1774:	8b 77       	andi	r24, 0x7B	; 123
    1776:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    177a:	82 e0       	ldi	r24, 0x02	; 2
    177c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~ENDPOINT_DIR_IN) | DirectionMask);
    1780:	80 91 ec 00 	lds	r24, 0x00EC
    1784:	81 60       	ori	r24, 0x01	; 1
    1786:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    178a:	80 e5       	ldi	r24, 0x50	; 80
    178c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1790:	87 e0       	ldi	r24, 0x07	; 7
    1792:	80 93 f1 00 	sts	0x00F1, r24
    1796:	90 93 f1 00 	sts	0x00F1, r25
    179a:	80 91 e8 00 	lds	r24, 0x00E8
    179e:	8e 77       	andi	r24, 0x7E	; 126
    17a0:	80 93 e8 00 	sts	0x00E8, r24
			break;
		case XPRG_CMD_SET_PARAM:
			XPROGProtocol_SetParam();
			break;
	}
}
    17a4:	29 96       	adiw	r28, 0x09	; 9
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	de bf       	out	0x3e, r29	; 62
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	cd bf       	out	0x3d, r28	; 61
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <XPROGTarget_SetTxMode>:
}

static void XPROGTarget_SetTxMode(void)
{
	/* Wait for a full cycle of the clock */
	while (PIND & (1 << 5));
    17b6:	4d 99       	sbic	0x09, 5	; 9
    17b8:	fe cf       	rjmp	.-4      	; 0x17b6 <XPROGTarget_SetTxMode>
	while (!(PIND & (1 << 5)));
    17ba:	4d 9b       	sbis	0x09, 5	; 9
    17bc:	fe cf       	rjmp	.-4      	; 0x17ba <XPROGTarget_SetTxMode+0x4>

	PORTD  |=  (1 << 3);
    17be:	5b 9a       	sbi	0x0b, 3	; 11
	DDRD   |=  (1 << 3);
    17c0:	53 9a       	sbi	0x0a, 3	; 10

	UCSR1B &= ~(1 << RXEN1);
    17c2:	80 91 c9 00 	lds	r24, 0x00C9
    17c6:	8f 7e       	andi	r24, 0xEF	; 239
    17c8:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B |=  (1 << TXEN1);
    17cc:	80 91 c9 00 	lds	r24, 0x00C9
    17d0:	88 60       	ori	r24, 0x08	; 8
    17d2:	80 93 c9 00 	sts	0x00C9, r24

	IsSending = true;
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	80 93 4a 01 	sts	0x014A, r24
}
    17dc:	08 95       	ret

000017de <XPROGTarget_SendIdle>:

/** Sends an IDLE via the USART to the attached target, consisting of a full frame of idle bits. */
void XPROGTarget_SendIdle(void)
{
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
    17de:	80 91 4a 01 	lds	r24, 0x014A
    17e2:	88 23       	and	r24, r24
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <XPROGTarget_SendIdle+0xa>
	  XPROGTarget_SetTxMode();
    17e6:	e7 df       	rcall	.-50     	; 0x17b6 <XPROGTarget_SetTxMode>
    17e8:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
	{
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
    17ea:	4d 99       	sbic	0x09, 5	; 9
    17ec:	fe cf       	rjmp	.-4      	; 0x17ea <XPROGTarget_SendIdle+0xc>
		while (!(PIND & (1 << 5)));
    17ee:	4d 9b       	sbis	0x09, 5	; 9
    17f0:	fe cf       	rjmp	.-4      	; 0x17ee <XPROGTarget_SendIdle+0x10>
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
	  XPROGTarget_SetTxMode();
	
	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
    17f2:	8f 5f       	subi	r24, 0xFF	; 255
    17f4:	8c 30       	cpi	r24, 0x0C	; 12
    17f6:	c9 f7       	brne	.-14     	; 0x17ea <XPROGTarget_SendIdle+0xc>
	{
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
		while (!(PIND & (1 << 5)));
	}
}
    17f8:	08 95       	ret

000017fa <XPROGTarget_EnableTargetTPI>:
}

/** Enables the target's TPI interface, holding the target in reset until TPI mode is exited. */
void XPROGTarget_EnableTargetTPI(void)
{
	IsSending = false;
    17fa:	10 92 4a 01 	sts	0x014A, r1

	/* Set /RESET line low for at least 400ns to enable TPI functionality */
	AUX_LINE_DDR  |=  AUX_LINE_MASK;
    17fe:	24 9a       	sbi	0x04, 4	; 4
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
    1800:	2c 98       	cbi	0x05, 4	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1802:	85 e0       	ldi	r24, 0x05	; 5
    1804:	8a 95       	dec	r24
    1806:	f1 f7       	brne	.-4      	; 0x1804 <XPROGTarget_EnableTargetTPI+0xa>
	_delay_us(1);

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
    1808:	8a b1       	in	r24, 0x0a	; 10
    180a:	88 62       	ori	r24, 0x28	; 40
    180c:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
    180e:	52 98       	cbi	0x0a, 2	; 10

	/* Set up the synchronous USART for TINY communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
    1810:	8f e1       	ldi	r24, 0x1F	; 31
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	90 93 cd 00 	sts	0x00CD, r25
    1818:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1 << TXEN1);
    181c:	88 e0       	ldi	r24, 0x08	; 8
    181e:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
    1822:	8f e6       	ldi	r24, 0x6F	; 111
    1824:	80 93 ca 00 	sts	0x00CA, r24

	/* Send two IDLEs of 12 bits each to enable TPI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
    1828:	da df       	rcall	.-76     	; 0x17de <XPROGTarget_SendIdle>
	XPROGTarget_SendIdle();
}
    182a:	d9 cf       	rjmp	.-78     	; 0x17de <XPROGTarget_SendIdle>

0000182c <XPROGTarget_EnableTargetPDI>:
bool IsSending;

/** Enables the target's PDI interface, holding the target in reset until PDI mode is exited. */
void XPROGTarget_EnableTargetPDI(void)
{
	IsSending = false;
    182c:	10 92 4a 01 	sts	0x014A, r1

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
    1830:	8a b1       	in	r24, 0x0a	; 10
    1832:	88 62       	ori	r24, 0x28	; 40
    1834:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
    1836:	52 98       	cbi	0x0a, 2	; 10

	/* Set DATA line high for at least 90ns to disable /RESET functionality */
	PORTD |= (1 << 3);
    1838:	5b 9a       	sbi	0x0b, 3	; 11
    183a:	85 e0       	ldi	r24, 0x05	; 5
    183c:	8a 95       	dec	r24
    183e:	f1 f7       	brne	.-4      	; 0x183c <XPROGTarget_EnableTargetPDI+0x10>
	_delay_us(1);

	/* Set up the synchronous USART for XMEGA communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
    1840:	8f e1       	ldi	r24, 0x1F	; 31
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	90 93 cd 00 	sts	0x00CD, r25
    1848:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1 << TXEN1);
    184c:	88 e0       	ldi	r24, 0x08	; 8
    184e:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
    1852:	8f e6       	ldi	r24, 0x6F	; 111
    1854:	80 93 ca 00 	sts	0x00CA, r24

	/* Send two IDLEs of 12 bits each to enable PDI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
    1858:	c2 df       	rcall	.-124    	; 0x17de <XPROGTarget_SendIdle>
	XPROGTarget_SendIdle();
}
    185a:	c1 cf       	rjmp	.-126    	; 0x17de <XPROGTarget_SendIdle>

0000185c <XPROGTarget_SendByte>:
/** Sends a byte via the USART.
 *
 *  \param[in] Byte  Byte to send through the USART
 */
void XPROGTarget_SendByte(const uint8_t Byte)
{
    185c:	1f 93       	push	r17
    185e:	18 2f       	mov	r17, r24
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
    1860:	80 91 4a 01 	lds	r24, 0x014A
    1864:	88 23       	and	r24, r24
    1866:	09 f4       	brne	.+2      	; 0x186a <XPROGTarget_SendByte+0xe>
	  XPROGTarget_SetTxMode();
    1868:	a6 df       	rcall	.-180    	; 0x17b6 <XPROGTarget_SetTxMode>

	/* Wait until there is space in the hardware Tx buffer before writing */
	while (!(UCSR1A & (1 << UDRE1)));
    186a:	80 91 c8 00 	lds	r24, 0x00C8
    186e:	85 ff       	sbrs	r24, 5
    1870:	fc cf       	rjmp	.-8      	; 0x186a <XPROGTarget_SendByte+0xe>
	UCSR1A |= (1 << TXC1);
    1872:	80 91 c8 00 	lds	r24, 0x00C8
    1876:	80 64       	ori	r24, 0x40	; 64
    1878:	80 93 c8 00 	sts	0x00C8, r24
	UDR1    = Byte;
    187c:	10 93 ce 00 	sts	0x00CE, r17
}
    1880:	1f 91       	pop	r17
    1882:	08 95       	ret

00001884 <XPROGTarget_SetRxMode>:
	IsSending = true;
}

static void XPROGTarget_SetRxMode(void)
{
	while (!(UCSR1A & (1 << TXC1)));
    1884:	80 91 c8 00 	lds	r24, 0x00C8
    1888:	86 ff       	sbrs	r24, 6
    188a:	fc cf       	rjmp	.-8      	; 0x1884 <XPROGTarget_SetRxMode>
	UCSR1A |=  (1 << TXC1);
    188c:	80 91 c8 00 	lds	r24, 0x00C8
    1890:	80 64       	ori	r24, 0x40	; 64
    1892:	80 93 c8 00 	sts	0x00C8, r24

	UCSR1B &= ~(1 << TXEN1);
    1896:	80 91 c9 00 	lds	r24, 0x00C9
    189a:	87 7f       	andi	r24, 0xF7	; 247
    189c:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B |=  (1 << RXEN1);
    18a0:	80 91 c9 00 	lds	r24, 0x00C9
    18a4:	80 61       	ori	r24, 0x10	; 16
    18a6:	80 93 c9 00 	sts	0x00C9, r24

	DDRD   &= ~(1 << 3);
    18aa:	53 98       	cbi	0x0a, 3	; 10
	PORTD  &= ~(1 << 3);
    18ac:	5b 98       	cbi	0x0b, 3	; 11

	IsSending = false;
    18ae:	10 92 4a 01 	sts	0x014A, r1
}
    18b2:	08 95       	ret

000018b4 <XPROGTarget_ReceiveByte>:
 *  \return Received byte from the USART
 */
uint8_t XPROGTarget_ReceiveByte(void)
{
	/* Switch to Rx mode if currently in Tx mode */
	if (IsSending)
    18b4:	80 91 4a 01 	lds	r24, 0x014A
    18b8:	88 23       	and	r24, r24
    18ba:	09 f0       	breq	.+2      	; 0x18be <XPROGTarget_ReceiveByte+0xa>
	  XPROGTarget_SetRxMode();
    18bc:	e3 df       	rcall	.-58     	; 0x1884 <XPROGTarget_SetRxMode>

	/* Wait until a byte has been received before reading */
	while (!(UCSR1A & (1 << RXC1)) && TimeoutTicksRemaining);
    18be:	80 91 c8 00 	lds	r24, 0x00C8
    18c2:	87 fd       	sbrc	r24, 7
    18c4:	03 c0       	rjmp	.+6      	; 0x18cc <XPROGTarget_ReceiveByte+0x18>
    18c6:	8a b5       	in	r24, 0x2a	; 42
    18c8:	88 23       	and	r24, r24
    18ca:	c9 f7       	brne	.-14     	; 0x18be <XPROGTarget_ReceiveByte+0xa>

	return UDR1;
    18cc:	80 91 ce 00 	lds	r24, 0x00CE
}
    18d0:	08 95       	ret

000018d2 <XPROGTarget_DisableTargetTPI>:

/** Disables the target's TPI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetTPI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	XPROGTarget_SetRxMode();
    18d2:	d8 df       	rcall	.-80     	; 0x1884 <XPROGTarget_SetRxMode>

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A |= (1 << TXC1) | (1 << RXC1);
    18d4:	e8 ec       	ldi	r30, 0xC8	; 200
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	80 6c       	ori	r24, 0xC0	; 192
    18dc:	80 83       	st	Z, r24
	UCSR1B  = 0;
    18de:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1C  = 0;
    18e2:	10 92 ca 00 	sts	0x00CA, r1

	/* Set all USART lines as inputs, tristate */
	DDRD  &= ~((1 << 5) | (1 << 3));
    18e6:	8a b1       	in	r24, 0x0a	; 10
    18e8:	87 7d       	andi	r24, 0xD7	; 215
    18ea:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
    18ec:	8b b1       	in	r24, 0x0b	; 11
    18ee:	83 7d       	andi	r24, 0xD3	; 211
    18f0:	8b b9       	out	0x0b, r24	; 11
	
	/* Tristate target /RESET line */
	AUX_LINE_DDR  &= ~AUX_LINE_MASK;
    18f2:	24 98       	cbi	0x04, 4	; 4
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
    18f4:	2c 98       	cbi	0x05, 4	; 5
}
    18f6:	08 95       	ret

000018f8 <XPROGTarget_DisableTargetPDI>:

/** Disables the target's PDI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetPDI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	XPROGTarget_SetRxMode();
    18f8:	c5 df       	rcall	.-118    	; 0x1884 <XPROGTarget_SetRxMode>

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A  = ((1 << TXC1) | (1 << RXC1));
    18fa:	80 ec       	ldi	r24, 0xC0	; 192
    18fc:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B  = 0;
    1900:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1C  = 0;
    1904:	10 92 ca 00 	sts	0x00CA, r1

	/* Tristate all pins */
	DDRD  &= ~((1 << 5) | (1 << 3));
    1908:	8a b1       	in	r24, 0x0a	; 10
    190a:	87 7d       	andi	r24, 0xD7	; 215
    190c:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
    190e:	8b b1       	in	r24, 0x0b	; 11
    1910:	83 7d       	andi	r24, 0xD3	; 211
    1912:	8b b9       	out	0x0b, r24	; 11
}
    1914:	08 95       	ret

00001916 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
    1916:	0f 93       	push	r16
    1918:	1f 93       	push	r17
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	00 d0       	rcall	.+0      	; 0x1920 <XMEGANVM_SendAddress+0xa>
    1920:	00 d0       	rcall	.+0      	; 0x1922 <XMEGANVM_SendAddress+0xc>
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
    1926:	69 83       	std	Y+1, r22	; 0x01
    1928:	7a 83       	std	Y+2, r23	; 0x02
    192a:	8b 83       	std	Y+3, r24	; 0x03
    192c:	9c 83       	std	Y+4, r25	; 0x04
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(((uint8_t*)&AbsoluteAddress)[0]);
    192e:	8e 01       	movw	r16, r28
    1930:	0f 5f       	subi	r16, 0xFF	; 255
    1932:	1f 4f       	sbci	r17, 0xFF	; 255
    1934:	86 2f       	mov	r24, r22
    1936:	92 df       	rcall	.-220    	; 0x185c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(((uint8_t*)&AbsoluteAddress)[1]);
    1938:	f8 01       	movw	r30, r16
    193a:	81 81       	ldd	r24, Z+1	; 0x01
    193c:	8f df       	rcall	.-226    	; 0x185c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(((uint8_t*)&AbsoluteAddress)[2]);
    193e:	f8 01       	movw	r30, r16
    1940:	82 81       	ldd	r24, Z+2	; 0x02
    1942:	8c df       	rcall	.-232    	; 0x185c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(((uint8_t*)&AbsoluteAddress)[3]);
    1944:	f8 01       	movw	r30, r16
    1946:	83 81       	ldd	r24, Z+3	; 0x03
    1948:	89 df       	rcall	.-238    	; 0x185c <XPROGTarget_SendByte>
}
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	1f 91       	pop	r17
    1958:	0f 91       	pop	r16
    195a:	08 95       	ret

0000195c <XMEGANVM_SendNVMRegAddress>:
{
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	a0 e0       	ldi	r26, 0x00	; 0
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	20 91 2a 01 	lds	r18, 0x012A
    1966:	30 91 2b 01 	lds	r19, 0x012B
    196a:	40 91 2c 01 	lds	r20, 0x012C
    196e:	50 91 2d 01 	lds	r21, 0x012D
    1972:	82 2b       	or	r24, r18
    1974:	93 2b       	or	r25, r19
    1976:	a4 2b       	or	r26, r20
    1978:	b5 2b       	or	r27, r21
    197a:	bc 01       	movw	r22, r24
    197c:	cd 01       	movw	r24, r26
}
    197e:	cb cf       	rjmp	.-106    	; 0x1916 <XMEGANVM_SendAddress>

00001980 <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  \return Boolean true if the NVM controller became ready within the timeout period, false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1980:	8b e6       	ldi	r24, 0x6B	; 107
    1982:	6c df       	rcall	.-296    	; 0x185c <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
    1984:	8f e0       	ldi	r24, 0x0F	; 15
    1986:	ea df       	rcall	.-44     	; 0x195c <XMEGANVM_SendNVMRegAddress>

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT << 2) | PDI_DATSIZE_1BYTE);
    1988:	80 e2       	ldi	r24, 0x20	; 32
    198a:	68 df       	rcall	.-304    	; 0x185c <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    198c:	93 df       	rcall	.-218    	; 0x18b4 <XPROGTarget_ReceiveByte>
    198e:	98 2f       	mov	r25, r24

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1990:	8a b5       	in	r24, 0x2a	; 42
    1992:	88 23       	and	r24, r24
    1994:	19 f0       	breq	.+6      	; 0x199c <XMEGANVM_WaitWhileNVMControllerBusy+0x1c>
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    1996:	97 fd       	sbrc	r25, 7
    1998:	f7 cf       	rjmp	.-18     	; 0x1988 <XMEGANVM_WaitWhileNVMControllerBusy+0x8>
    199a:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
	}
}
    199c:	08 95       	ret

0000199e <XMEGANVM_WritePageMemory>:
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_WritePageMemory(const uint8_t WriteBuffCommand, const uint8_t EraseBuffCommand,
                              const uint8_t WritePageCommand, const uint8_t PageMode, const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer, uint16_t WriteSize)
{
    199e:	7f 92       	push	r7
    19a0:	8f 92       	push	r8
    19a2:	9f 92       	push	r9
    19a4:	af 92       	push	r10
    19a6:	bf 92       	push	r11
    19a8:	cf 92       	push	r12
    19aa:	df 92       	push	r13
    19ac:	ef 92       	push	r14
    19ae:	ff 92       	push	r15
    19b0:	0f 93       	push	r16
    19b2:	1f 93       	push	r17
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	88 2e       	mov	r8, r24
    19ba:	96 2e       	mov	r9, r22
    19bc:	74 2e       	mov	r7, r20
    19be:	e6 01       	movw	r28, r12
	if (PageMode & XPRG_PAGEMODE_ERASE)
    19c0:	d2 2e       	mov	r13, r18
    19c2:	20 ff       	sbrs	r18, 0
    19c4:	10 c0       	rjmp	.+32     	; 0x19e6 <XMEGANVM_WritePageMemory+0x48>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    19c6:	dc df       	rcall	.-72     	; 0x1980 <XMEGANVM_WaitWhileNVMControllerBusy>
    19c8:	88 23       	and	r24, r24
    19ca:	09 f4       	brne	.+2      	; 0x19ce <XMEGANVM_WritePageMemory+0x30>
    19cc:	40 c0       	rjmp	.+128    	; 0x1a4e <XMEGANVM_WritePageMemory+0xb0>
		  return false;

		/* Send the memory buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    19ce:	8c e4       	ldi	r24, 0x4C	; 76
    19d0:	45 df       	rcall	.-374    	; 0x185c <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    19d2:	8a e0       	ldi	r24, 0x0A	; 10
    19d4:	c3 df       	rcall	.-122    	; 0x195c <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseBuffCommand);
    19d6:	89 2d       	mov	r24, r9
    19d8:	41 df       	rcall	.-382    	; 0x185c <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    19da:	8c e4       	ldi	r24, 0x4C	; 76
    19dc:	3f df       	rcall	.-386    	; 0x185c <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    19de:	8b e0       	ldi	r24, 0x0B	; 11
    19e0:	bd df       	rcall	.-134    	; 0x195c <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(1 << 0);
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	3b df       	rcall	.-394    	; 0x185c <XPROGTarget_SendByte>
	}

	if (WriteSize)
    19e6:	a1 14       	cp	r10, r1
    19e8:	b1 04       	cpc	r11, r1
    19ea:	e9 f0       	breq	.+58     	; 0x1a26 <XMEGANVM_WritePageMemory+0x88>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    19ec:	c9 df       	rcall	.-110    	; 0x1980 <XMEGANVM_WaitWhileNVMControllerBusy>
    19ee:	88 23       	and	r24, r24
    19f0:	71 f1       	breq	.+92     	; 0x1a4e <XMEGANVM_WritePageMemory+0xb0>
		  return false;

		/* Send the memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    19f2:	8c e4       	ldi	r24, 0x4C	; 76
    19f4:	33 df       	rcall	.-410    	; 0x185c <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    19f6:	8a e0       	ldi	r24, 0x0A	; 10
    19f8:	b1 df       	rcall	.-158    	; 0x195c <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(WriteBuffCommand);
    19fa:	88 2d       	mov	r24, r8
    19fc:	2f df       	rcall	.-418    	; 0x185c <XPROGTarget_SendByte>

		/* Load the PDI pointer register with the start address we want to write to */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    19fe:	8b e6       	ldi	r24, 0x6B	; 107
    1a00:	2d df       	rcall	.-422    	; 0x185c <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(WriteAddress);
    1a02:	c8 01       	movw	r24, r16
    1a04:	b7 01       	movw	r22, r14
    1a06:	87 df       	rcall	.-242    	; 0x1916 <XMEGANVM_SendAddress>

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    1a08:	80 ea       	ldi	r24, 0xA0	; 160
    1a0a:	28 df       	rcall	.-432    	; 0x185c <XPROGTarget_SendByte>
		XPROGTarget_SendByte(WriteSize - 1);
    1a0c:	8a 2d       	mov	r24, r10
    1a0e:	81 50       	subi	r24, 0x01	; 1
    1a10:	25 df       	rcall	.-438    	; 0x185c <XPROGTarget_SendByte>

		/* Send a ST command with indirect access and post-increment to write the bytes */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1a12:	84 e6       	ldi	r24, 0x64	; 100
    1a14:	23 df       	rcall	.-442    	; 0x185c <XPROGTarget_SendByte>
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
    1a16:	89 91       	ld	r24, Y+
    1a18:	21 df       	rcall	.-446    	; 0x185c <XPROGTarget_SendByte>
    1a1a:	08 94       	sec
    1a1c:	a1 08       	sbc	r10, r1
    1a1e:	b1 08       	sbc	r11, r1
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
		XPROGTarget_SendByte(WriteSize - 1);

		/* Send a ST command with indirect access and post-increment to write the bytes */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
		while (WriteSize--)
    1a20:	a1 14       	cp	r10, r1
    1a22:	b1 04       	cpc	r11, r1
    1a24:	c1 f7       	brne	.-16     	; 0x1a16 <XMEGANVM_WritePageMemory+0x78>
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPRG_PAGEMODE_WRITE)
    1a26:	d1 fe       	sbrs	r13, 1
    1a28:	10 c0       	rjmp	.+32     	; 0x1a4a <XMEGANVM_WritePageMemory+0xac>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1a2a:	aa df       	rcall	.-172    	; 0x1980 <XMEGANVM_WaitWhileNVMControllerBusy>
    1a2c:	88 23       	and	r24, r24
    1a2e:	79 f0       	breq	.+30     	; 0x1a4e <XMEGANVM_WritePageMemory+0xb0>
		  return false;

		/* Send the memory write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1a30:	8c e4       	ldi	r24, 0x4C	; 76
    1a32:	14 df       	rcall	.-472    	; 0x185c <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1a34:	8a e0       	ldi	r24, 0x0A	; 10
    1a36:	92 df       	rcall	.-220    	; 0x195c <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(WritePageCommand);
    1a38:	87 2d       	mov	r24, r7
    1a3a:	10 df       	rcall	.-480    	; 0x185c <XPROGTarget_SendByte>

		/* Send the address of the first page location to write the memory page */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1a3c:	8c e4       	ldi	r24, 0x4C	; 76
    1a3e:	0e df       	rcall	.-484    	; 0x185c <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(WriteAddress);
    1a40:	c8 01       	movw	r24, r16
    1a42:	b7 01       	movw	r22, r14
    1a44:	68 df       	rcall	.-304    	; 0x1916 <XMEGANVM_SendAddress>
		XPROGTarget_SendByte(0x00);
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	09 df       	rcall	.-494    	; 0x185c <XPROGTarget_SendByte>
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	01 c0       	rjmp	.+2      	; 0x1a50 <XMEGANVM_WritePageMemory+0xb2>
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
	}

	return true;
}
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	1f 91       	pop	r17
    1a56:	0f 91       	pop	r16
    1a58:	ff 90       	pop	r15
    1a5a:	ef 90       	pop	r14
    1a5c:	df 90       	pop	r13
    1a5e:	cf 90       	pop	r12
    1a60:	bf 90       	pop	r11
    1a62:	af 90       	pop	r10
    1a64:	9f 90       	pop	r9
    1a66:	8f 90       	pop	r8
    1a68:	7f 90       	pop	r7
    1a6a:	08 95       	ret

00001a6c <XMEGANVM_WriteByteMemory>:
 *  \param[in]  Byte          Byte to write to the target
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand, const uint32_t WriteAddress, const uint8_t Byte)
{
    1a6c:	cf 92       	push	r12
    1a6e:	df 92       	push	r13
    1a70:	ef 92       	push	r14
    1a72:	ff 92       	push	r15
    1a74:	0f 93       	push	r16
    1a76:	1f 93       	push	r17
    1a78:	d8 2e       	mov	r13, r24
    1a7a:	7a 01       	movw	r14, r20
    1a7c:	8b 01       	movw	r16, r22
    1a7e:	c2 2e       	mov	r12, r18
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1a80:	7f df       	rcall	.-258    	; 0x1980 <XMEGANVM_WaitWhileNVMControllerBusy>
    1a82:	88 23       	and	r24, r24
    1a84:	71 f0       	breq	.+28     	; 0x1aa2 <XMEGANVM_WriteByteMemory+0x36>
	  return false;

	/* Send the memory write command to the target */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1a86:	8c e4       	ldi	r24, 0x4C	; 76
    1a88:	e9 de       	rcall	.-558    	; 0x185c <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1a8a:	8a e0       	ldi	r24, 0x0A	; 10
    1a8c:	67 df       	rcall	.-306    	; 0x195c <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(WriteCommand);
    1a8e:	8d 2d       	mov	r24, r13
    1a90:	e5 de       	rcall	.-566    	; 0x185c <XPROGTarget_SendByte>

	/* Send new memory byte to the memory of the target */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1a92:	8c e4       	ldi	r24, 0x4C	; 76
    1a94:	e3 de       	rcall	.-570    	; 0x185c <XPROGTarget_SendByte>
	XMEGANVM_SendAddress(WriteAddress);
    1a96:	c8 01       	movw	r24, r16
    1a98:	b7 01       	movw	r22, r14
    1a9a:	3d df       	rcall	.-390    	; 0x1916 <XMEGANVM_SendAddress>
	XPROGTarget_SendByte(Byte);
    1a9c:	8c 2d       	mov	r24, r12
    1a9e:	de de       	rcall	.-580    	; 0x185c <XPROGTarget_SendByte>
    1aa0:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
    1aa2:	1f 91       	pop	r17
    1aa4:	0f 91       	pop	r16
    1aa6:	ff 90       	pop	r15
    1aa8:	ef 90       	pop	r14
    1aaa:	df 90       	pop	r13
    1aac:	cf 90       	pop	r12
    1aae:	08 95       	ret

00001ab0 <XMEGANVM_ReadMemory>:
 *  \param[in]  ReadSize     Number of bytes to read
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress, uint8_t* ReadBuffer, uint16_t ReadSize)
{
    1ab0:	cf 92       	push	r12
    1ab2:	df 92       	push	r13
    1ab4:	ef 92       	push	r14
    1ab6:	ff 92       	push	r15
    1ab8:	0f 93       	push	r16
    1aba:	1f 93       	push	r17
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	7b 01       	movw	r14, r22
    1ac2:	8c 01       	movw	r16, r24
    1ac4:	6a 01       	movw	r12, r20
    1ac6:	e9 01       	movw	r28, r18
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1ac8:	5b df       	rcall	.-330    	; 0x1980 <XMEGANVM_WaitWhileNVMControllerBusy>
    1aca:	88 23       	and	r24, r24
    1acc:	09 f1       	breq	.+66     	; 0x1b10 <XMEGANVM_ReadMemory+0x60>
	  return false;

	/* Send the READNVM command to the NVM controller for reading of an arbitrary location */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1ace:	8c e4       	ldi	r24, 0x4C	; 76
    1ad0:	c5 de       	rcall	.-630    	; 0x185c <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1ad2:	8a e0       	ldi	r24, 0x0A	; 10
    1ad4:	43 df       	rcall	.-378    	; 0x195c <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
    1ad6:	83 e4       	ldi	r24, 0x43	; 67
    1ad8:	c1 de       	rcall	.-638    	; 0x185c <XPROGTarget_SendByte>

	/* Load the PDI pointer register with the start address we want to read from */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1ada:	8b e6       	ldi	r24, 0x6B	; 107
    1adc:	bf de       	rcall	.-642    	; 0x185c <XPROGTarget_SendByte>
	XMEGANVM_SendAddress(ReadAddress);
    1ade:	c8 01       	movw	r24, r16
    1ae0:	b7 01       	movw	r22, r14
    1ae2:	19 df       	rcall	.-462    	; 0x1916 <XMEGANVM_SendAddress>

	/* Send the REPEAT command with the specified number of bytes to read */
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    1ae4:	80 ea       	ldi	r24, 0xA0	; 160
    1ae6:	ba de       	rcall	.-652    	; 0x185c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(ReadSize - 1);
    1ae8:	9e 01       	movw	r18, r28
    1aea:	21 50       	subi	r18, 0x01	; 1
    1aec:	82 2f       	mov	r24, r18
    1aee:	b6 de       	rcall	.-660    	; 0x185c <XPROGTarget_SendByte>

	/* Send a LD command with indirect access and post-increment to read out the bytes */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1af0:	84 e2       	ldi	r24, 0x24	; 36
    1af2:	b4 de       	rcall	.-664    	; 0x185c <XPROGTarget_SendByte>
    1af4:	04 c0       	rjmp	.+8      	; 0x1afe <XMEGANVM_ReadMemory+0x4e>
	while (ReadSize-- && TimeoutTicksRemaining)
	  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
    1af6:	de de       	rcall	.-580    	; 0x18b4 <XPROGTarget_ReceiveByte>
    1af8:	f6 01       	movw	r30, r12
    1afa:	81 93       	st	Z+, r24
    1afc:	6f 01       	movw	r12, r30
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
	XPROGTarget_SendByte(ReadSize - 1);

	/* Send a LD command with indirect access and post-increment to read out the bytes */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
	while (ReadSize-- && TimeoutTicksRemaining)
    1afe:	20 97       	sbiw	r28, 0x00	; 0
    1b00:	21 f0       	breq	.+8      	; 0x1b0a <XMEGANVM_ReadMemory+0x5a>
    1b02:	8a b5       	in	r24, 0x2a	; 42
    1b04:	21 97       	sbiw	r28, 0x01	; 1
    1b06:	88 23       	and	r24, r24
    1b08:	b1 f7       	brne	.-20     	; 0x1af6 <XMEGANVM_ReadMemory+0x46>
	  *(ReadBuffer++) = XPROGTarget_ReceiveByte();

	return (TimeoutTicksRemaining != 0);
    1b0a:	8a b5       	in	r24, 0x2a	; 42
    1b0c:	81 11       	cpse	r24, r1
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
}
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	1f 91       	pop	r17
    1b16:	0f 91       	pop	r16
    1b18:	ff 90       	pop	r15
    1b1a:	ef 90       	pop	r14
    1b1c:	df 90       	pop	r13
    1b1e:	cf 90       	pop	r12
    1b20:	08 95       	ret

00001b22 <XMEGANVM_WaitWhileNVMBusBusy>:
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS | PDI_STATUS_REG);
    1b22:	80 e8       	ldi	r24, 0x80	; 128
    1b24:	9b de       	rcall	.-714    	; 0x185c <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1b26:	c6 de       	rcall	.-628    	; 0x18b4 <XPROGTarget_ReceiveByte>
    1b28:	98 2f       	mov	r25, r24

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1b2a:	8a b5       	in	r24, 0x2a	; 42
    1b2c:	88 23       	and	r24, r24
    1b2e:	19 f0       	breq	.+6      	; 0x1b36 <XMEGANVM_WaitWhileNVMBusBusy+0x14>
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM)
    1b30:	91 ff       	sbrs	r25, 1
    1b32:	f7 cf       	rjmp	.-18     	; 0x1b22 <XMEGANVM_WaitWhileNVMBusBusy>
    1b34:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
	}
}
    1b36:	08 95       	ret

00001b38 <XMEGANVM_EraseMemory>:
 *  \param[in] Address       Address inside the memory space to erase
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand, const uint32_t Address)
{
    1b38:	cf 92       	push	r12
    1b3a:	df 92       	push	r13
    1b3c:	ef 92       	push	r14
    1b3e:	ff 92       	push	r15
    1b40:	1f 93       	push	r17
    1b42:	18 2f       	mov	r17, r24
    1b44:	6a 01       	movw	r12, r20
    1b46:	7b 01       	movw	r14, r22
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1b48:	1b df       	rcall	.-458    	; 0x1980 <XMEGANVM_WaitWhileNVMControllerBusy>
    1b4a:	88 23       	and	r24, r24
    1b4c:	09 f4       	brne	.+2      	; 0x1b50 <XMEGANVM_EraseMemory+0x18>
    1b4e:	5a c0       	rjmp	.+180    	; 0x1c04 <XMEGANVM_EraseMemory+0xcc>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
    1b50:	10 34       	cpi	r17, 0x40	; 64
    1b52:	31 f4       	brne	.+12     	; 0x1b60 <XMEGANVM_EraseMemory+0x28>
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1b54:	8c e4       	ldi	r24, 0x4C	; 76
    1b56:	82 de       	rcall	.-764    	; 0x185c <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1b58:	8a e0       	ldi	r24, 0x0A	; 10
    1b5a:	00 df       	rcall	.-512    	; 0x195c <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseCommand);
    1b5c:	80 e4       	ldi	r24, 0x40	; 64
    1b5e:	39 c0       	rjmp	.+114    	; 0x1bd2 <XMEGANVM_EraseMemory+0x9a>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(1 << 0);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
    1b60:	10 33       	cpi	r17, 0x30	; 48
    1b62:	09 f0       	breq	.+2      	; 0x1b66 <XMEGANVM_EraseMemory+0x2e>
    1b64:	3d c0       	rjmp	.+122    	; 0x1be0 <XMEGANVM_EraseMemory+0xa8>
	{
		/* Send the EEPROM page buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1b66:	8c e4       	ldi	r24, 0x4C	; 76
    1b68:	79 de       	rcall	.-782    	; 0x185c <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1b6a:	8a e0       	ldi	r24, 0x0A	; 10
    1b6c:	f7 de       	rcall	.-530    	; 0x195c <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
    1b6e:	86 e3       	ldi	r24, 0x36	; 54
    1b70:	75 de       	rcall	.-790    	; 0x185c <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1b72:	8c e4       	ldi	r24, 0x4C	; 76
    1b74:	73 de       	rcall	.-794    	; 0x185c <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1b76:	8b e0       	ldi	r24, 0x0B	; 11
    1b78:	f1 de       	rcall	.-542    	; 0x195c <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(1 << 0);
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	6f de       	rcall	.-802    	; 0x185c <XPROGTarget_SendByte>

		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1b7e:	00 df       	rcall	.-512    	; 0x1980 <XMEGANVM_WaitWhileNVMControllerBusy>
    1b80:	88 23       	and	r24, r24
    1b82:	09 f4       	brne	.+2      	; 0x1b86 <XMEGANVM_EraseMemory+0x4e>
    1b84:	3f c0       	rjmp	.+126    	; 0x1c04 <XMEGANVM_EraseMemory+0xcc>
		  return false;

		/* Send the EEPROM memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1b86:	8c e4       	ldi	r24, 0x4C	; 76
    1b88:	69 de       	rcall	.-814    	; 0x185c <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1b8a:	8a e0       	ldi	r24, 0x0A	; 10
    1b8c:	e7 de       	rcall	.-562    	; 0x195c <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
    1b8e:	83 e3       	ldi	r24, 0x33	; 51
    1b90:	65 de       	rcall	.-822    	; 0x185c <XPROGTarget_SendByte>

		/* Load the PDI pointer register with the EEPROM page start address */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1b92:	8b e6       	ldi	r24, 0x6B	; 107
    1b94:	63 de       	rcall	.-826    	; 0x185c <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(Address);
    1b96:	c7 01       	movw	r24, r14
    1b98:	b6 01       	movw	r22, r12
    1b9a:	bd de       	rcall	.-646    	; 0x1916 <XMEGANVM_SendAddress>

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    1b9c:	80 ea       	ldi	r24, 0xA0	; 160
    1b9e:	5e de       	rcall	.-836    	; 0x185c <XPROGTarget_SendByte>
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
    1ba0:	80 91 2e 01 	lds	r24, 0x012E
    1ba4:	81 50       	subi	r24, 0x01	; 1
    1ba6:	5a de       	rcall	.-844    	; 0x185c <XPROGTarget_SendByte>

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1ba8:	84 e6       	ldi	r24, 0x64	; 100
    1baa:	58 de       	rcall	.-848    	; 0x185c <XPROGTarget_SendByte>
    1bac:	10 e0       	ldi	r17, 0x00	; 0
    1bae:	03 c0       	rjmp	.+6      	; 0x1bb6 <XMEGANVM_EraseMemory+0x7e>
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
		  XPROGTarget_SendByte(0x00);
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	54 de       	rcall	.-856    	; 0x185c <XPROGTarget_SendByte>
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
    1bb4:	1f 5f       	subi	r17, 0xFF	; 255
    1bb6:	21 2f       	mov	r18, r17
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	80 91 2e 01 	lds	r24, 0x012E
    1bbe:	90 91 2f 01 	lds	r25, 0x012F
    1bc2:	28 17       	cp	r18, r24
    1bc4:	39 07       	cpc	r19, r25
    1bc6:	a0 f3       	brcs	.-24     	; 0x1bb0 <XMEGANVM_EraseMemory+0x78>
		  XPROGTarget_SendByte(0x00);

		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1bc8:	8c e4       	ldi	r24, 0x4C	; 76
    1bca:	48 de       	rcall	.-880    	; 0x185c <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1bcc:	8a e0       	ldi	r24, 0x0A	; 10
    1bce:	c6 de       	rcall	.-628    	; 0x195c <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseCommand);
    1bd0:	80 e3       	ldi	r24, 0x30	; 48
    1bd2:	44 de       	rcall	.-888    	; 0x185c <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the EEPROM erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1bd4:	8c e4       	ldi	r24, 0x4C	; 76
    1bd6:	42 de       	rcall	.-892    	; 0x185c <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1bd8:	8b e0       	ldi	r24, 0x0B	; 11
    1bda:	c0 de       	rcall	.-640    	; 0x195c <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(1 << 0);
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	0c c0       	rjmp	.+24     	; 0x1bf8 <XMEGANVM_EraseMemory+0xc0>
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1be0:	8c e4       	ldi	r24, 0x4C	; 76
    1be2:	3c de       	rcall	.-904    	; 0x185c <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1be4:	8a e0       	ldi	r24, 0x0A	; 10
    1be6:	ba de       	rcall	.-652    	; 0x195c <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseCommand);
    1be8:	81 2f       	mov	r24, r17
    1bea:	38 de       	rcall	.-912    	; 0x185c <XPROGTarget_SendByte>

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1bec:	8c e4       	ldi	r24, 0x4C	; 76
    1bee:	36 de       	rcall	.-916    	; 0x185c <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(Address);
    1bf0:	c7 01       	movw	r24, r14
    1bf2:	b6 01       	movw	r22, r12
    1bf4:	90 de       	rcall	.-736    	; 0x1916 <XMEGANVM_SendAddress>
		XPROGTarget_SendByte(0x00);
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	31 de       	rcall	.-926    	; 0x185c <XPROGTarget_SendByte>
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
    1bfa:	93 df       	rcall	.-218    	; 0x1b22 <XMEGANVM_WaitWhileNVMBusBusy>
    1bfc:	88 23       	and	r24, r24
    1bfe:	19 f0       	breq	.+6      	; 0x1c06 <XMEGANVM_EraseMemory+0xce>
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	01 c0       	rjmp	.+2      	; 0x1c06 <XMEGANVM_EraseMemory+0xce>
    1c04:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	return true;
}
    1c06:	1f 91       	pop	r17
    1c08:	ff 90       	pop	r15
    1c0a:	ef 90       	pop	r14
    1c0c:	df 90       	pop	r13
    1c0e:	cf 90       	pop	r12
    1c10:	08 95       	ret

00001c12 <XMEGANVM_GetMemoryCRC>:
 *  \param[out] CRCDest     CRC Destination when read from the target
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_GetMemoryCRC(const uint8_t CRCCommand, uint32_t* const CRCDest)
{
    1c12:	ef 92       	push	r14
    1c14:	ff 92       	push	r15
    1c16:	0f 93       	push	r16
    1c18:	1f 93       	push	r17
    1c1a:	08 2f       	mov	r16, r24
    1c1c:	f6 2e       	mov	r15, r22
    1c1e:	e7 2e       	mov	r14, r23
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1c20:	af de       	rcall	.-674    	; 0x1980 <XMEGANVM_WaitWhileNVMControllerBusy>
    1c22:	88 23       	and	r24, r24
    1c24:	61 f1       	breq	.+88     	; 0x1c7e <XMEGANVM_GetMemoryCRC+0x6c>
	  return false;

	/* Set the NVM command to the correct CRC read command */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1c26:	8c e4       	ldi	r24, 0x4C	; 76
    1c28:	19 de       	rcall	.-974    	; 0x185c <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1c2a:	8a e0       	ldi	r24, 0x0A	; 10
    1c2c:	97 de       	rcall	.-722    	; 0x195c <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(CRCCommand);
    1c2e:	80 2f       	mov	r24, r16
    1c30:	15 de       	rcall	.-982    	; 0x185c <XPROGTarget_SendByte>

	/* Set CMDEX bit in NVM CTRLA register to start the CRC generation */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1c32:	8c e4       	ldi	r24, 0x4C	; 76
    1c34:	13 de       	rcall	.-986    	; 0x185c <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1c36:	8b e0       	ldi	r24, 0x0B	; 11
    1c38:	91 de       	rcall	.-734    	; 0x195c <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(1 << 0);
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	0f de       	rcall	.-994    	; 0x185c <XPROGTarget_SendByte>

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
    1c3e:	71 df       	rcall	.-286    	; 0x1b22 <XMEGANVM_WaitWhileNVMBusBusy>
    1c40:	88 23       	and	r24, r24
    1c42:	e9 f0       	breq	.+58     	; 0x1c7e <XMEGANVM_GetMemoryCRC+0x6c>
	  return false;

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1c44:	9d de       	rcall	.-710    	; 0x1980 <XMEGANVM_WaitWhileNVMControllerBusy>
    1c46:	88 23       	and	r24, r24
    1c48:	d1 f0       	breq	.+52     	; 0x1c7e <XMEGANVM_GetMemoryCRC+0x6c>
	  return false;

	/* Load the PDI pointer register with the DAT0 register start address */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1c4a:	8b e6       	ldi	r24, 0x6B	; 107
    1c4c:	07 de       	rcall	.-1010   	; 0x185c <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_DAT0);
    1c4e:	84 e0       	ldi	r24, 0x04	; 4
    1c50:	85 de       	rcall	.-758    	; 0x195c <XMEGANVM_SendNVMRegAddress>

	/* Send the REPEAT command to grab the CRC bytes */
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    1c52:	80 ea       	ldi	r24, 0xA0	; 160
    1c54:	03 de       	rcall	.-1018   	; 0x185c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(XMEGA_CRC_LENGTH - 1);
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	01 de       	rcall	.-1022   	; 0x185c <XPROGTarget_SendByte>

	/* Read in the CRC bytes from the target */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1c5a:	84 e2       	ldi	r24, 0x24	; 36
    1c5c:	ff dd       	rcall	.-1026   	; 0x185c <XPROGTarget_SendByte>
	for (uint8_t i = 0; i < XMEGA_CRC_LENGTH; i++)
	  ((uint8_t*)CRCDest)[i] = XPROGTarget_ReceiveByte();
    1c5e:	0f 2d       	mov	r16, r15
    1c60:	1e 2d       	mov	r17, r14
    1c62:	28 de       	rcall	.-944    	; 0x18b4 <XPROGTarget_ReceiveByte>
    1c64:	f8 01       	movw	r30, r16
    1c66:	80 83       	st	Z, r24
    1c68:	25 de       	rcall	.-950    	; 0x18b4 <XPROGTarget_ReceiveByte>
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	81 83       	std	Z+1, r24	; 0x01
    1c6e:	22 de       	rcall	.-956    	; 0x18b4 <XPROGTarget_ReceiveByte>
    1c70:	f8 01       	movw	r30, r16
    1c72:	82 83       	std	Z+2, r24	; 0x02

	return (TimeoutTicksRemaining != 0);
    1c74:	8a b5       	in	r24, 0x2a	; 42
    1c76:	88 23       	and	r24, r24
    1c78:	19 f0       	breq	.+6      	; 0x1c80 <XMEGANVM_GetMemoryCRC+0x6e>
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	01 c0       	rjmp	.+2      	; 0x1c80 <XMEGANVM_GetMemoryCRC+0x6e>
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
}
    1c80:	1f 91       	pop	r17
    1c82:	0f 91       	pop	r16
    1c84:	ff 90       	pop	r15
    1c86:	ef 90       	pop	r14
    1c88:	08 95       	ret

00001c8a <XMEGANVM_DisablePDI>:
}

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
	XMEGANVM_WaitWhileNVMBusBusy();
    1c8a:	4b df       	rcall	.-362    	; 0x1b22 <XMEGANVM_WaitWhileNVMBusBusy>

	/* Clear the RESET key in the RESET PDI register to allow the XMEGA to run */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    1c8c:	81 ec       	ldi	r24, 0xC1	; 193
    1c8e:	e6 dd       	rcall	.-1076   	; 0x185c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x00);
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	e4 dd       	rcall	.-1080   	; 0x185c <XPROGTarget_SendByte>

	/* Do it twice to make sure it takes effect (silicon bug?) */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    1c94:	81 ec       	ldi	r24, 0xC1	; 193
    1c96:	e2 dd       	rcall	.-1084   	; 0x185c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x00);
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	e0 dd       	rcall	.-1088   	; 0x185c <XPROGTarget_SendByte>

	XPROGTarget_DisableTargetPDI();
}
    1c9c:	2d ce       	rjmp	.-934    	; 0x18f8 <XPROGTarget_DisableTargetPDI>

00001c9e <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the PDI interface was enabled successfully, false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
    1c9e:	ef 92       	push	r14
    1ca0:	ff 92       	push	r15
    1ca2:	0f 93       	push	r16
    1ca4:	1f 93       	push	r17
    1ca6:	df 93       	push	r29
    1ca8:	cf 93       	push	r28
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	28 97       	sbiw	r28, 0x08	; 8
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	cd bf       	out	0x3d, r28	; 61
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
    1cba:	b8 dd       	rcall	.-1168   	; 0x182c <XPROGTarget_EnableTargetPDI>

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    1cbc:	81 ec       	ldi	r24, 0xC1	; 193
    1cbe:	ce dd       	rcall	.-1124   	; 0x185c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(PDI_RESET_KEY);
    1cc0:	89 e5       	ldi	r24, 0x59	; 89
    1cc2:	cc dd       	rcall	.-1128   	; 0x185c <XPROGTarget_SendByte>

	/* Lower direction change guard time to 0 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_CTRL_REG);
    1cc4:	82 ec       	ldi	r24, 0xC2	; 194
    1cc6:	ca dd       	rcall	.-1132   	; 0x185c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x07);
    1cc8:	87 e0       	ldi	r24, 0x07	; 7
    1cca:	c8 dd       	rcall	.-1136   	; 0x185c <XPROGTarget_SendByte>

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
    1ccc:	80 ee       	ldi	r24, 0xE0	; 224
    1cce:	c6 dd       	rcall	.-1140   	; 0x185c <XPROGTarget_SendByte>
    1cd0:	8e 01       	movw	r16, r28
    1cd2:	08 5f       	subi	r16, 0xF8	; 248
    1cd4:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
    1cd6:	7e 01       	movw	r14, r28
    1cd8:	08 94       	sec
    1cda:	e1 1c       	adc	r14, r1
    1cdc:	f1 1c       	adc	r15, r1
    1cde:	d7 01       	movw	r26, r14
    1ce0:	e2 e3       	ldi	r30, 0x32	; 50
    1ce2:	f1 e0       	ldi	r31, 0x01	; 1
    1ce4:	88 e0       	ldi	r24, 0x08	; 8
    1ce6:	01 90       	ld	r0, Z+
    1ce8:	0d 92       	st	X+, r0
    1cea:	81 50       	subi	r24, 0x01	; 1
    1cec:	e1 f7       	brne	.-8      	; 0x1ce6 <XMEGANVM_EnablePDI+0x48>
    1cee:	f8 01       	movw	r30, r16
    1cf0:	80 81       	ld	r24, Z
    1cf2:	b4 dd       	rcall	.-1176   	; 0x185c <XPROGTarget_SendByte>
    1cf4:	01 50       	subi	r16, 0x01	; 1
    1cf6:	10 40       	sbci	r17, 0x00	; 0
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_CTRL_REG);
	XPROGTarget_SendByte(0x07);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
    1cf8:	0c 17       	cp	r16, r28
    1cfa:	1d 07       	cpc	r17, r29
    1cfc:	81 f7       	brne	.-32     	; 0x1cde <XMEGANVM_EnablePDI+0x40>
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
    1cfe:	11 df       	rcall	.-478    	; 0x1b22 <XMEGANVM_WaitWhileNVMBusBusy>
}
    1d00:	28 96       	adiw	r28, 0x08	; 8
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	f8 94       	cli
    1d06:	de bf       	out	0x3e, r29	; 62
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	cd bf       	out	0x3d, r28	; 61
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	1f 91       	pop	r17
    1d12:	0f 91       	pop	r16
    1d14:	ff 90       	pop	r15
    1d16:	ef 90       	pop	r14
    1d18:	08 95       	ret

00001d1a <TINYNVM_SendWriteNVMRegister>:
/** Sends a SOUT command to the target with the specified I/O address, ready for the data byte to be read.
 *
 *  \param[in] Address  6-bit I/O address to read from in the target's I/O memory space
 */
static void TINYNVM_SendWriteNVMRegister(const uint8_t Address)
{
    1d1a:	28 2f       	mov	r18, r24
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once */
	XPROGTarget_SendByte(TPI_CMD_SOUT | ((Address & 0x30) << 1) | (Address & 0x0F));
    1d1c:	8f 70       	andi	r24, 0x0F	; 15
    1d1e:	80 69       	ori	r24, 0x90	; 144
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	20 73       	andi	r18, 0x30	; 48
    1d24:	30 70       	andi	r19, 0x00	; 0
    1d26:	22 0f       	add	r18, r18
    1d28:	33 1f       	adc	r19, r19
    1d2a:	82 2b       	or	r24, r18
}
    1d2c:	97 cd       	rjmp	.-1234   	; 0x185c <XPROGTarget_SendByte>

00001d2e <TINYNVM_SendPointerAddress>:

#if defined(ENABLE_XPROG_PROTOCOL) || defined(__DOXYGEN__)

/** Sends the given pointer address to the target's TPI pointer register */
static void TINYNVM_SendPointerAddress(const uint16_t AbsoluteAddress)
{
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	00 d0       	rcall	.+0      	; 0x1d34 <TINYNVM_SendPointerAddress+0x6>
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	9a 83       	std	Y+2, r25	; 0x02
    1d3a:	89 83       	std	Y+1, r24	; 0x01
	/* Send the given 16-bit address to the target, LSB first */
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 0);
    1d3c:	88 e6       	ldi	r24, 0x68	; 104
    1d3e:	8e dd       	rcall	.-1252   	; 0x185c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(((uint8_t*)&AbsoluteAddress)[0]);
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	8c dd       	rcall	.-1256   	; 0x185c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 1);
    1d44:	89 e6       	ldi	r24, 0x69	; 105
    1d46:	8a dd       	rcall	.-1260   	; 0x185c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(((uint8_t*)&AbsoluteAddress)[1]);
    1d48:	fe 01       	movw	r30, r28
    1d4a:	31 96       	adiw	r30, 0x01	; 1
    1d4c:	81 81       	ldd	r24, Z+1	; 0x01
    1d4e:	86 dd       	rcall	.-1268   	; 0x185c <XPROGTarget_SendByte>
}
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	cf 91       	pop	r28
    1d56:	df 91       	pop	r29
    1d58:	08 95       	ret

00001d5a <TINYNVM_WaitWhileNVMControllerBusy>:
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the SIN command to read the TPI STATUS register to see the NVM bus is busy */
		TINYNVM_SendReadNVMRegister(XPROG_Param_NVMCSRRegAddr);
    1d5a:	20 91 31 01 	lds	r18, 0x0131
 */
static void TINYNVM_SendReadNVMRegister(const uint8_t Address)
{
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once */
	XPROGTarget_SendByte(TPI_CMD_SIN | ((Address & 0x30) << 1) | (Address & 0x0F));
    1d5e:	82 2f       	mov	r24, r18
    1d60:	8f 70       	andi	r24, 0x0F	; 15
    1d62:	80 61       	ori	r24, 0x10	; 16
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	20 73       	andi	r18, 0x30	; 48
    1d68:	30 70       	andi	r19, 0x00	; 0
    1d6a:	22 0f       	add	r18, r18
    1d6c:	33 1f       	adc	r19, r19
    1d6e:	82 2b       	or	r24, r18
    1d70:	75 dd       	rcall	.-1302   	; 0x185c <XPROGTarget_SendByte>
	for (;;)
	{
		/* Send the SIN command to read the TPI STATUS register to see the NVM bus is busy */
		TINYNVM_SendReadNVMRegister(XPROG_Param_NVMCSRRegAddr);

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1d72:	a0 dd       	rcall	.-1216   	; 0x18b4 <XPROGTarget_ReceiveByte>
    1d74:	98 2f       	mov	r25, r24

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1d76:	8a b5       	in	r24, 0x2a	; 42
    1d78:	88 23       	and	r24, r24
    1d7a:	19 f0       	breq	.+6      	; 0x1d82 <TINYNVM_WaitWhileNVMControllerBusy+0x28>
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    1d7c:	97 fd       	sbrc	r25, 7
    1d7e:	ed cf       	rjmp	.-38     	; 0x1d5a <TINYNVM_WaitWhileNVMControllerBusy>
    1d80:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
	}
}
    1d82:	08 95       	ret

00001d84 <TINYNVM_EraseMemory>:
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_EraseMemory(const uint8_t EraseCommand,
                         const uint16_t Address)
{
    1d84:	1f 93       	push	r17
    1d86:	cf 93       	push	r28
    1d88:	df 93       	push	r29
    1d8a:	18 2f       	mov	r17, r24
    1d8c:	eb 01       	movw	r28, r22
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1d8e:	e5 df       	rcall	.-54     	; 0x1d5a <TINYNVM_WaitWhileNVMControllerBusy>
    1d90:	88 23       	and	r24, r24
    1d92:	79 f0       	breq	.+30     	; 0x1db2 <TINYNVM_EraseMemory+0x2e>
	  return false;

	/* Set the NVM control register to the target memory erase command */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1d94:	80 91 30 01 	lds	r24, 0x0130
    1d98:	c0 df       	rcall	.-128    	; 0x1d1a <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(EraseCommand);
    1d9a:	81 2f       	mov	r24, r17
    1d9c:	5f dd       	rcall	.-1346   	; 0x185c <XPROGTarget_SendByte>

	/* Write to a high byte location within the target address space to start the erase process */
	TINYNVM_SendPointerAddress(Address | 0x0001);
    1d9e:	ce 01       	movw	r24, r28
    1da0:	81 60       	ori	r24, 0x01	; 1
    1da2:	c5 df       	rcall	.-118    	; 0x1d2e <TINYNVM_SendPointerAddress>
	XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT);
    1da4:	80 e6       	ldi	r24, 0x60	; 96
    1da6:	5a dd       	rcall	.-1356   	; 0x185c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x00);
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	58 dd       	rcall	.-1360   	; 0x185c <XPROGTarget_SendByte>

	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1dac:	d6 df       	rcall	.-84     	; 0x1d5a <TINYNVM_WaitWhileNVMControllerBusy>
    1dae:	81 11       	cpse	r24, r1
    1db0:	81 e0       	ldi	r24, 0x01	; 1
	  return false;

	return true;
}
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	1f 91       	pop	r17
    1db8:	08 95       	ret

00001dba <TINYNVM_WriteMemory>:
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_WriteMemory(const uint16_t WriteAddress,
                         uint8_t* WriteBuffer,
                         uint16_t WriteLength)
{
    1dba:	ef 92       	push	r14
    1dbc:	ff 92       	push	r15
    1dbe:	0f 93       	push	r16
    1dc0:	1f 93       	push	r17
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	7c 01       	movw	r14, r24
    1dc8:	8b 01       	movw	r16, r22
    1dca:	ea 01       	movw	r28, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1dcc:	c6 df       	rcall	.-116    	; 0x1d5a <TINYNVM_WaitWhileNVMControllerBusy>
    1dce:	88 23       	and	r24, r24
    1dd0:	21 f1       	breq	.+72     	; 0x1e1a <TINYNVM_WriteMemory+0x60>
	  return false;

	/* Must have an integer number of words to write - if extra byte, word-align via a dummy high byte */
	if (WriteLength & 0x01)
    1dd2:	c0 ff       	sbrs	r28, 0
    1dd4:	06 c0       	rjmp	.+12     	; 0x1de2 <TINYNVM_WriteMemory+0x28>
	  WriteBuffer[WriteLength++] = 0xFF;
    1dd6:	f8 01       	movw	r30, r16
    1dd8:	ec 0f       	add	r30, r28
    1dda:	fd 1f       	adc	r31, r29
    1ddc:	8f ef       	ldi	r24, 0xFF	; 255
    1dde:	80 83       	st	Z, r24
    1de0:	21 96       	adiw	r28, 0x01	; 1

	/* Set the NVM control register to the WORD WRITE command for memory reading */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1de2:	80 91 30 01 	lds	r24, 0x0130
    1de6:	99 df       	rcall	.-206    	; 0x1d1a <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(TINY_NVM_CMD_WORDWRITE);
    1de8:	8d e1       	ldi	r24, 0x1D	; 29
    1dea:	38 dd       	rcall	.-1424   	; 0x185c <XPROGTarget_SendByte>

	/* Send the address of the location to write to */
	TINYNVM_SendPointerAddress(WriteAddress);
    1dec:	c7 01       	movw	r24, r14
    1dee:	9f df       	rcall	.-194    	; 0x1d2e <TINYNVM_SendPointerAddress>
    1df0:	10 c0       	rjmp	.+32     	; 0x1e12 <TINYNVM_WriteMemory+0x58>

	while (WriteLength)
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1df2:	b3 df       	rcall	.-154    	; 0x1d5a <TINYNVM_WaitWhileNVMControllerBusy>
    1df4:	88 23       	and	r24, r24
    1df6:	89 f0       	breq	.+34     	; 0x1e1a <TINYNVM_WriteMemory+0x60>
		  return false;

		/* Write the low byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
    1df8:	84 e6       	ldi	r24, 0x64	; 100
    1dfa:	30 dd       	rcall	.-1440   	; 0x185c <XPROGTarget_SendByte>
		XPROGTarget_SendByte(*(WriteBuffer++));
    1dfc:	f8 01       	movw	r30, r16
    1dfe:	80 81       	ld	r24, Z
    1e00:	2d dd       	rcall	.-1446   	; 0x185c <XPROGTarget_SendByte>

		/* Write the high byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
    1e02:	84 e6       	ldi	r24, 0x64	; 100
    1e04:	2b dd       	rcall	.-1450   	; 0x185c <XPROGTarget_SendByte>
		XPROGTarget_SendByte(*(WriteBuffer++));
    1e06:	f8 01       	movw	r30, r16
    1e08:	81 81       	ldd	r24, Z+1	; 0x01
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_WriteMemory(const uint16_t WriteAddress,
                         uint8_t* WriteBuffer,
                         uint16_t WriteLength)
{
    1e0a:	0e 5f       	subi	r16, 0xFE	; 254
    1e0c:	1f 4f       	sbci	r17, 0xFF	; 255
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
		XPROGTarget_SendByte(*(WriteBuffer++));

		/* Write the high byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
		XPROGTarget_SendByte(*(WriteBuffer++));
    1e0e:	26 dd       	rcall	.-1460   	; 0x185c <XPROGTarget_SendByte>

		/* Need to decrement the write length twice, since we read out a whole word */
		WriteLength -= 2;
    1e10:	22 97       	sbiw	r28, 0x02	; 2
	XPROGTarget_SendByte(TINY_NVM_CMD_WORDWRITE);

	/* Send the address of the location to write to */
	TINYNVM_SendPointerAddress(WriteAddress);

	while (WriteLength)
    1e12:	20 97       	sbiw	r28, 0x00	; 0
    1e14:	71 f7       	brne	.-36     	; 0x1df2 <TINYNVM_WriteMemory+0x38>
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	01 c0       	rjmp	.+2      	; 0x1e1c <TINYNVM_WriteMemory+0x62>
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
		/* Need to decrement the write length twice, since we read out a whole word */
		WriteLength -= 2;
	}

	return true;
}
    1e1c:	df 91       	pop	r29
    1e1e:	cf 91       	pop	r28
    1e20:	1f 91       	pop	r17
    1e22:	0f 91       	pop	r16
    1e24:	ff 90       	pop	r15
    1e26:	ef 90       	pop	r14
    1e28:	08 95       	ret

00001e2a <TINYNVM_ReadMemory>:
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_ReadMemory(const uint16_t ReadAddress,
                        uint8_t* ReadBuffer,
                        uint16_t ReadSize)
{
    1e2a:	ef 92       	push	r14
    1e2c:	ff 92       	push	r15
    1e2e:	0f 93       	push	r16
    1e30:	1f 93       	push	r17
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	8c 01       	movw	r16, r24
    1e38:	7b 01       	movw	r14, r22
    1e3a:	ea 01       	movw	r28, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1e3c:	8e df       	rcall	.-228    	; 0x1d5a <TINYNVM_WaitWhileNVMControllerBusy>
    1e3e:	88 23       	and	r24, r24
    1e40:	b9 f0       	breq	.+46     	; 0x1e70 <TINYNVM_ReadMemory+0x46>
	  return false;

	/* Set the NVM control register to the NO OP command for memory reading */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1e42:	80 91 30 01 	lds	r24, 0x0130
    1e46:	69 df       	rcall	.-302    	; 0x1d1a <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(TINY_NVM_CMD_NOOP);
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	08 dd       	rcall	.-1520   	; 0x185c <XPROGTarget_SendByte>

	/* Send the address of the location to read from */
	TINYNVM_SendPointerAddress(ReadAddress);
    1e4c:	c8 01       	movw	r24, r16
    1e4e:	6f df       	rcall	.-290    	; 0x1d2e <TINYNVM_SendPointerAddress>
    1e50:	06 c0       	rjmp	.+12     	; 0x1e5e <TINYNVM_ReadMemory+0x34>

	while (ReadSize-- && TimeoutTicksRemaining)
	{
		/* Read the byte of data from the target */
		XPROGTarget_SendByte(TPI_CMD_SLD | TPI_POINTER_INDIRECT_PI);
    1e52:	84 e2       	ldi	r24, 0x24	; 36
    1e54:	03 dd       	rcall	.-1530   	; 0x185c <XPROGTarget_SendByte>
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
    1e56:	2e dd       	rcall	.-1444   	; 0x18b4 <XPROGTarget_ReceiveByte>
    1e58:	f7 01       	movw	r30, r14
    1e5a:	81 93       	st	Z+, r24
    1e5c:	7f 01       	movw	r14, r30
	XPROGTarget_SendByte(TINY_NVM_CMD_NOOP);

	/* Send the address of the location to read from */
	TINYNVM_SendPointerAddress(ReadAddress);

	while (ReadSize-- && TimeoutTicksRemaining)
    1e5e:	20 97       	sbiw	r28, 0x00	; 0
    1e60:	21 f0       	breq	.+8      	; 0x1e6a <TINYNVM_ReadMemory+0x40>
    1e62:	8a b5       	in	r24, 0x2a	; 42
    1e64:	21 97       	sbiw	r28, 0x01	; 1
    1e66:	88 23       	and	r24, r24
    1e68:	a1 f7       	brne	.-24     	; 0x1e52 <TINYNVM_ReadMemory+0x28>
		/* Read the byte of data from the target */
		XPROGTarget_SendByte(TPI_CMD_SLD | TPI_POINTER_INDIRECT_PI);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining != 0);
    1e6a:	8a b5       	in	r24, 0x2a	; 42
    1e6c:	81 11       	cpse	r24, r1
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
}
    1e70:	df 91       	pop	r29
    1e72:	cf 91       	pop	r28
    1e74:	1f 91       	pop	r17
    1e76:	0f 91       	pop	r16
    1e78:	ff 90       	pop	r15
    1e7a:	ef 90       	pop	r14
    1e7c:	08 95       	ret

00001e7e <TINYNVM_WaitWhileNVMBusBusy>:
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the SLDCS command to read the TPI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(TPI_CMD_SLDCS | TPI_STATUS_REG);
    1e7e:	80 e8       	ldi	r24, 0x80	; 128
    1e80:	ed dc       	rcall	.-1574   	; 0x185c <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1e82:	18 dd       	rcall	.-1488   	; 0x18b4 <XPROGTarget_ReceiveByte>
    1e84:	98 2f       	mov	r25, r24

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1e86:	8a b5       	in	r24, 0x2a	; 42
    1e88:	88 23       	and	r24, r24
    1e8a:	19 f0       	breq	.+6      	; 0x1e92 <TINYNVM_WaitWhileNVMBusBusy+0x14>
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & TPI_STATUS_NVM)
    1e8c:	91 ff       	sbrs	r25, 1
    1e8e:	f7 cf       	rjmp	.-18     	; 0x1e7e <TINYNVM_WaitWhileNVMBusBusy>
    1e90:	81 e0       	ldi	r24, 0x01	; 1
		  return true;
	}
}
    1e92:	08 95       	ret

00001e94 <TINYNVM_DisableTPI>:
}

/** Removes access to the target's NVM controller and physically disables the target's physical TPI interface. */
void TINYNVM_DisableTPI(void)
{
	TINYNVM_WaitWhileNVMBusBusy();
    1e94:	f4 df       	rcall	.-24     	; 0x1e7e <TINYNVM_WaitWhileNVMBusBusy>

	/* Clear the NVMEN bit in the TPI STATUS register to disable TPI mode */
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_STATUS_REG);
    1e96:	80 ec       	ldi	r24, 0xC0	; 192
    1e98:	e1 dc       	rcall	.-1598   	; 0x185c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x00);
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	df dc       	rcall	.-1602   	; 0x185c <XPROGTarget_SendByte>

	XPROGTarget_DisableTargetTPI();
}
    1e9e:	19 cd       	rjmp	.-1486   	; 0x18d2 <XPROGTarget_DisableTargetTPI>

00001ea0 <TINYNVM_EnableTPI>:
/** Enables the physical TPI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the TPI interface was enabled successfully, false otherwise
 */
bool TINYNVM_EnableTPI(void)
{
    1ea0:	ef 92       	push	r14
    1ea2:	ff 92       	push	r15
    1ea4:	0f 93       	push	r16
    1ea6:	1f 93       	push	r17
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	28 97       	sbiw	r28, 0x08	; 8
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	de bf       	out	0x3e, r29	; 62
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	cd bf       	out	0x3d, r28	; 61
	/* Enable TPI programming mode with the attached target */
	XPROGTarget_EnableTargetTPI();
    1ebc:	9e dc       	rcall	.-1732   	; 0x17fa <XPROGTarget_EnableTargetTPI>

	/* Lower direction change guard time to 0 USART bits */
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_CTRL_REG);
    1ebe:	82 ec       	ldi	r24, 0xC2	; 194
    1ec0:	cd dc       	rcall	.-1638   	; 0x185c <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x07);
    1ec2:	87 e0       	ldi	r24, 0x07	; 7
    1ec4:	cb dc       	rcall	.-1642   	; 0x185c <XPROGTarget_SendByte>

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
    1ec6:	80 ee       	ldi	r24, 0xE0	; 224
    1ec8:	c9 dc       	rcall	.-1646   	; 0x185c <XPROGTarget_SendByte>
    1eca:	8e 01       	movw	r16, r28
    1ecc:	08 5f       	subi	r16, 0xF8	; 248
    1ece:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);
    1ed0:	7e 01       	movw	r14, r28
    1ed2:	08 94       	sec
    1ed4:	e1 1c       	adc	r14, r1
    1ed6:	f1 1c       	adc	r15, r1
    1ed8:	d7 01       	movw	r26, r14
    1eda:	ea e3       	ldi	r30, 0x3A	; 58
    1edc:	f1 e0       	ldi	r31, 0x01	; 1
    1ede:	88 e0       	ldi	r24, 0x08	; 8
    1ee0:	01 90       	ld	r0, Z+
    1ee2:	0d 92       	st	X+, r0
    1ee4:	81 50       	subi	r24, 0x01	; 1
    1ee6:	e1 f7       	brne	.-8      	; 0x1ee0 <TINYNVM_EnableTPI+0x40>
    1ee8:	f8 01       	movw	r30, r16
    1eea:	80 81       	ld	r24, Z
    1eec:	b7 dc       	rcall	.-1682   	; 0x185c <XPROGTarget_SendByte>
    1eee:	01 50       	subi	r16, 0x01	; 1
    1ef0:	10 40       	sbci	r17, 0x00	; 0
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_CTRL_REG);
	XPROGTarget_SendByte(0x07);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
    1ef2:	0c 17       	cp	r16, r28
    1ef4:	1d 07       	cpc	r17, r29
    1ef6:	81 f7       	brne	.-32     	; 0x1ed8 <TINYNVM_EnableTPI+0x38>
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return TINYNVM_WaitWhileNVMBusBusy();
    1ef8:	c2 df       	rcall	.-124    	; 0x1e7e <TINYNVM_WaitWhileNVMBusBusy>
}
    1efa:	28 96       	adiw	r28, 0x08	; 8
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	f8 94       	cli
    1f00:	de bf       	out	0x3e, r29	; 62
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	cd bf       	out	0x3d, r28	; 61
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	1f 91       	pop	r17
    1f0c:	0f 91       	pop	r16
    1f0e:	ff 90       	pop	r15
    1f10:	ef 90       	pop	r14
    1f12:	08 95       	ret

00001f14 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1f14:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1f18:	80 91 eb 00 	lds	r24, 0x00EB
    1f1c:	81 60       	ori	r24, 0x01	; 1
    1f1e:	80 93 eb 00 	sts	0x00EB, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    1f22:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
    1f26:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    1f2a:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1f2e:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
    1f32:	88 1f       	adc	r24, r24
    1f34:	88 27       	eor	r24, r24
    1f36:	88 1f       	adc	r24, r24
    1f38:	08 95       	ret

00001f3a <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1f3a:	80 91 4d 01 	lds	r24, 0x014D
    1f3e:	88 23       	and	r24, r24
    1f40:	8c f4       	brge	.+34     	; 0x1f64 <Endpoint_ClearStatusStage+0x2a>
    1f42:	03 c0       	rjmp	.+6      	; 0x1f4a <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1f44:	8e b3       	in	r24, 0x1e	; 30
    1f46:	88 23       	and	r24, r24
    1f48:	b1 f0       	breq	.+44     	; 0x1f76 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1f4a:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1f4e:	82 ff       	sbrs	r24, 2
    1f50:	f9 cf       	rjmp	.-14     	; 0x1f44 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1f52:	80 91 e8 00 	lds	r24, 0x00E8
    1f56:	8b 77       	andi	r24, 0x7B	; 123
    1f58:	80 93 e8 00 	sts	0x00E8, r24
    1f5c:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1f5e:	8e b3       	in	r24, 0x1e	; 30
    1f60:	88 23       	and	r24, r24
    1f62:	49 f0       	breq	.+18     	; 0x1f76 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f64:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1f68:	80 ff       	sbrs	r24, 0
    1f6a:	f9 cf       	rjmp	.-14     	; 0x1f5e <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f6c:	80 91 e8 00 	lds	r24, 0x00E8
    1f70:	8e 77       	andi	r24, 0x7E	; 126
    1f72:	80 93 e8 00 	sts	0x00E8, r24
    1f76:	08 95       	ret

00001f78 <Endpoint_WaitUntilReady>:
			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is active (i.e. enumerated to a host)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1f78:	40 91 e4 00 	lds	r20, 0x00E4
    1f7c:	50 91 e5 00 	lds	r21, 0x00E5
    1f80:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
    1f82:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    1f86:	80 ff       	sbrs	r24, 0
    1f88:	05 c0       	rjmp	.+10     	; 0x1f94 <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f8a:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
    1f8e:	80 ff       	sbrs	r24, 0
    1f90:	05 c0       	rjmp	.+10     	; 0x1f9c <Endpoint_WaitUntilReady+0x24>
    1f92:	21 c0       	rjmp	.+66     	; 0x1fd6 <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1f94:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1f98:	82 fd       	sbrc	r24, 2
    1f9a:	1d c0       	rjmp	.+58     	; 0x1fd6 <Endpoint_WaitUntilReady+0x5e>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1f9c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1f9e:	88 23       	and	r24, r24
    1fa0:	11 f4       	brne	.+4      	; 0x1fa6 <Endpoint_WaitUntilReady+0x2e>
    1fa2:	82 e0       	ldi	r24, 0x02	; 2
    1fa4:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1fa6:	85 30       	cpi	r24, 0x05	; 5
    1fa8:	11 f4       	brne	.+4      	; 0x1fae <Endpoint_WaitUntilReady+0x36>
    1faa:	83 e0       	ldi	r24, 0x03	; 3
    1fac:	08 95       	ret
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1fae:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1fb2:	85 ff       	sbrs	r24, 5
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <Endpoint_WaitUntilReady+0x42>
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	08 95       	ret
    1fba:	80 91 e4 00 	lds	r24, 0x00E4
    1fbe:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1fc2:	84 17       	cp	r24, r20
    1fc4:	95 07       	cpc	r25, r21
    1fc6:	e9 f2       	breq	.-70     	; 0x1f82 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1fc8:	22 23       	and	r18, r18
    1fca:	11 f4       	brne	.+4      	; 0x1fd0 <Endpoint_WaitUntilReady+0x58>
    1fcc:	84 e0       	ldi	r24, 0x04	; 4
    1fce:	08 95       	ret
    1fd0:	21 50       	subi	r18, 0x01	; 1
    1fd2:	ac 01       	movw	r20, r24
    1fd4:	d6 cf       	rjmp	.-84     	; 0x1f82 <Endpoint_WaitUntilReady+0xa>
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1fd8:	08 95       	ret

00001fda <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1fda:	3c d0       	rcall	.+120    	; 0x2054 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1fdc:	3e d0       	rcall	.+124    	; 0x205a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
    1fde:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
    1fe2:	98 2f       	mov	r25, r24
    1fe4:	9f 77       	andi	r25, 0x7F	; 127
    1fe6:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
    1fea:	80 68       	ori	r24, 0x80	; 128
    1fec:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
    1ff0:	84 e0       	ldi	r24, 0x04	; 4
    1ff2:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
    1ff4:	89 b5       	in	r24, 0x29	; 41
    1ff6:	82 60       	ori	r24, 0x02	; 2
    1ff8:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1ffa:	09 b4       	in	r0, 0x29	; 41
    1ffc:	00 fe       	sbrs	r0, 0
    1ffe:	fd cf       	rjmp	.-6      	; 0x1ffa <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    2000:	80 91 d8 00 	lds	r24, 0x00D8
    2004:	8f 7d       	andi	r24, 0xDF	; 223
    2006:	80 93 d8 00 	sts	0x00D8, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
    200a:	1e ba       	out	0x1e, r1	; 30
	USB_ConfigurationNumber  = 0;
    200c:	10 92 4b 01 	sts	0x014B, r1
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	60 e0       	ldi	r22, 0x00	; 0
    2014:	42 e1       	ldi	r20, 0x12	; 18
    2016:	7e df       	rcall	.-260    	; 0x1f14 <Endpoint_ConfigureEndpoint_Prv>

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
							   ENDPOINT_BANK_SINGLE);

	USB_INT_Clear(USB_INT_SUSPI);
    2018:	80 91 e1 00 	lds	r24, 0x00E1
    201c:	8e 7f       	andi	r24, 0xFE	; 254
    201e:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPI);
    2022:	80 91 e2 00 	lds	r24, 0x00E2
    2026:	81 60       	ori	r24, 0x01	; 1
    2028:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Enable(USB_INT_EORSTI);
    202c:	80 91 e2 00 	lds	r24, 0x00E2
    2030:	88 60       	ori	r24, 0x08	; 8
    2032:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    2036:	80 91 e0 00 	lds	r24, 0x00E0
    203a:	8e 7f       	andi	r24, 0xFE	; 254
    203c:	80 93 e0 00 	sts	0x00E0, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    2040:	08 95       	ret

00002042 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
			#else
				REGCR   &= ~(1 << REGDIS);
    2042:	e3 e6       	ldi	r30, 0x63	; 99
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	8e 7f       	andi	r24, 0xFE	; 254
    204a:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	80 93 4c 01 	sts	0x014C, r24

	USB_ResetInterface();
}
    2052:	c3 cf       	rjmp	.-122    	; 0x1fda <USB_ResetInterface>

00002054 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    2054:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    2058:	08 95       	ret

0000205a <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
    205a:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    205e:	08 95       	ret

00002060 <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    2060:	1f 92       	push	r1
    2062:	0f 92       	push	r0
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	0f 92       	push	r0
    2068:	11 24       	eor	r1, r1
    206a:	2f 93       	push	r18
    206c:	3f 93       	push	r19
    206e:	4f 93       	push	r20
    2070:	5f 93       	push	r21
    2072:	6f 93       	push	r22
    2074:	7f 93       	push	r23
    2076:	8f 93       	push	r24
    2078:	9f 93       	push	r25
    207a:	af 93       	push	r26
    207c:	bf 93       	push	r27
    207e:	ef 93       	push	r30
    2080:	ff 93       	push	r31
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    2082:	80 91 e1 00 	lds	r24, 0x00E1
    2086:	80 ff       	sbrs	r24, 0
    2088:	1c c0       	rjmp	.+56     	; 0x20c2 <__vector_11+0x62>
    208a:	80 91 e2 00 	lds	r24, 0x00E2
    208e:	80 ff       	sbrs	r24, 0
    2090:	18 c0       	rjmp	.+48     	; 0x20c2 <__vector_11+0x62>
	{
		USB_INT_Clear(USB_INT_SUSPI);
    2092:	80 91 e1 00 	lds	r24, 0x00E1
    2096:	8e 7f       	andi	r24, 0xFE	; 254
    2098:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPI);
    209c:	80 91 e2 00 	lds	r24, 0x00E2
    20a0:	8e 7f       	andi	r24, 0xFE	; 254
    20a2:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
    20a6:	80 91 e2 00 	lds	r24, 0x00E2
    20aa:	80 61       	ori	r24, 0x10	; 16
    20ac:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    20b0:	80 91 d8 00 	lds	r24, 0x00D8
    20b4:	80 62       	ori	r24, 0x20	; 32
    20b6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
    20ba:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    20bc:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
    20be:	0e 94 4c 01 	call	0x298	; 0x298 <EVENT_USB_Device_Disconnect>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    20c2:	80 91 e1 00 	lds	r24, 0x00E1
    20c6:	84 ff       	sbrs	r24, 4
    20c8:	2e c0       	rjmp	.+92     	; 0x2126 <__vector_11+0xc6>
    20ca:	80 91 e2 00 	lds	r24, 0x00E2
    20ce:	84 ff       	sbrs	r24, 4
    20d0:	2a c0       	rjmp	.+84     	; 0x2126 <__vector_11+0xc6>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
    20d2:	84 e0       	ldi	r24, 0x04	; 4
    20d4:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
    20d6:	89 b5       	in	r24, 0x29	; 41
    20d8:	82 60       	ori	r24, 0x02	; 2
    20da:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    20dc:	09 b4       	in	r0, 0x29	; 41
    20de:	00 fe       	sbrs	r0, 0
    20e0:	fd cf       	rjmp	.-6      	; 0x20dc <__vector_11+0x7c>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    20e2:	80 91 d8 00 	lds	r24, 0x00D8
    20e6:	8f 7d       	andi	r24, 0xDF	; 223
    20e8:	80 93 d8 00 	sts	0x00D8, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUPI);
    20ec:	80 91 e1 00 	lds	r24, 0x00E1
    20f0:	8f 7e       	andi	r24, 0xEF	; 239
    20f2:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUPI);
    20f6:	80 91 e2 00 	lds	r24, 0x00E2
    20fa:	8f 7e       	andi	r24, 0xEF	; 239
    20fc:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPI);
    2100:	80 91 e2 00 	lds	r24, 0x00E2
    2104:	81 60       	ori	r24, 0x01	; 1
    2106:	80 93 e2 00 	sts	0x00E2, r24

		if (USB_ConfigurationNumber)
    210a:	80 91 4b 01 	lds	r24, 0x014B
    210e:	88 23       	and	r24, r24
    2110:	31 f4       	brne	.+12     	; 0x211e <__vector_11+0xbe>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2112:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2116:	87 fd       	sbrc	r24, 7
    2118:	02 c0       	rjmp	.+4      	; 0x211e <__vector_11+0xbe>
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	01 c0       	rjmp	.+2      	; 0x2120 <__vector_11+0xc0>
    211e:	84 e0       	ldi	r24, 0x04	; 4
    2120:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    2122:	0e 94 47 01 	call	0x28e	; 0x28e <EVENT_USB_Device_Connect>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    2126:	80 91 e1 00 	lds	r24, 0x00E1
    212a:	83 ff       	sbrs	r24, 3
    212c:	21 c0       	rjmp	.+66     	; 0x2170 <__vector_11+0x110>
    212e:	80 91 e2 00 	lds	r24, 0x00E2
    2132:	83 ff       	sbrs	r24, 3
    2134:	1d c0       	rjmp	.+58     	; 0x2170 <__vector_11+0x110>
	{
		USB_INT_Clear(USB_INT_EORSTI);
    2136:	80 91 e1 00 	lds	r24, 0x00E1
    213a:	87 7f       	andi	r24, 0xF7	; 247
    213c:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
    2140:	82 e0       	ldi	r24, 0x02	; 2
    2142:	8e bb       	out	0x1e, r24	; 30
		USB_ConfigurationNumber = 0;
    2144:	10 92 4b 01 	sts	0x014B, r1

		USB_INT_Clear(USB_INT_SUSPI);
    2148:	80 91 e1 00 	lds	r24, 0x00E1
    214c:	8e 7f       	andi	r24, 0xFE	; 254
    214e:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPI);
    2152:	80 91 e2 00 	lds	r24, 0x00E2
    2156:	8e 7f       	andi	r24, 0xFE	; 254
    2158:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
    215c:	80 91 e2 00 	lds	r24, 0x00E2
    2160:	80 61       	ori	r24, 0x10	; 16
    2162:	80 93 e2 00 	sts	0x00E2, r24
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	60 e0       	ldi	r22, 0x00	; 0
    216a:	42 e1       	ldi	r20, 0x12	; 18
    216c:	d3 de       	rcall	.-602    	; 0x1f14 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    216e:	31 d1       	rcall	.+610    	; 0x23d2 <USB_Event_Stub>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    2170:	80 91 e1 00 	lds	r24, 0x00E1
    2174:	82 ff       	sbrs	r24, 2
    2176:	0a c0       	rjmp	.+20     	; 0x218c <__vector_11+0x12c>
    2178:	80 91 e2 00 	lds	r24, 0x00E2
    217c:	82 ff       	sbrs	r24, 2
    217e:	06 c0       	rjmp	.+12     	; 0x218c <__vector_11+0x12c>
	{
		USB_INT_Clear(USB_INT_SOFI);
    2180:	80 91 e1 00 	lds	r24, 0x00E1
    2184:	8b 7f       	andi	r24, 0xFB	; 251
    2186:	80 93 e1 00 	sts	0x00E1, r24

		EVENT_USB_Device_StartOfFrame();
    218a:	23 d1       	rcall	.+582    	; 0x23d2 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    218c:	ff 91       	pop	r31
    218e:	ef 91       	pop	r30
    2190:	bf 91       	pop	r27
    2192:	af 91       	pop	r26
    2194:	9f 91       	pop	r25
    2196:	8f 91       	pop	r24
    2198:	7f 91       	pop	r23
    219a:	6f 91       	pop	r22
    219c:	5f 91       	pop	r21
    219e:	4f 91       	pop	r20
    21a0:	3f 91       	pop	r19
    21a2:	2f 91       	pop	r18
    21a4:	0f 90       	pop	r0
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	0f 90       	pop	r0
    21aa:	1f 90       	pop	r1
    21ac:	18 95       	reti

000021ae <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    21ae:	0f 93       	push	r16
    21b0:	1f 93       	push	r17
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <USB_Device_ProcessControlRequest+0xa>
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	ed e4       	ldi	r30, 0x4D	; 77
    21be:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    21c0:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
    21c4:	81 93       	st	Z+, r24

void USB_Device_ProcessControlRequest(void)
{
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	e5 35       	cpi	r30, 0x55	; 85
    21ca:	f8 07       	cpc	r31, r24
    21cc:	c9 f7       	brne	.-14     	; 0x21c0 <USB_Device_ProcessControlRequest+0x12>
	  *(RequestHeader++) = Endpoint_Read_Byte();

	EVENT_USB_Device_ControlRequest();
    21ce:	01 d1       	rcall	.+514    	; 0x23d2 <USB_Event_Stub>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    21d0:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    21d4:	83 ff       	sbrs	r24, 3
    21d6:	e8 c0       	rjmp	.+464    	; 0x23a8 <USB_Device_ProcessControlRequest+0x1fa>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    21d8:	80 91 4d 01 	lds	r24, 0x014D

		switch (USB_ControlRequest.bRequest)
    21dc:	90 91 4e 01 	lds	r25, 0x014E
    21e0:	95 30       	cpi	r25, 0x05	; 5
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <USB_Device_ProcessControlRequest+0x38>
    21e4:	6d c0       	rjmp	.+218    	; 0x22c0 <USB_Device_ProcessControlRequest+0x112>
    21e6:	96 30       	cpi	r25, 0x06	; 6
    21e8:	40 f4       	brcc	.+16     	; 0x21fa <USB_Device_ProcessControlRequest+0x4c>
    21ea:	91 30       	cpi	r25, 0x01	; 1
    21ec:	81 f1       	breq	.+96     	; 0x224e <USB_Device_ProcessControlRequest+0xa0>
    21ee:	91 30       	cpi	r25, 0x01	; 1
    21f0:	70 f0       	brcs	.+28     	; 0x220e <USB_Device_ProcessControlRequest+0x60>
    21f2:	93 30       	cpi	r25, 0x03	; 3
    21f4:	09 f0       	breq	.+2      	; 0x21f8 <USB_Device_ProcessControlRequest+0x4a>
    21f6:	d8 c0       	rjmp	.+432    	; 0x23a8 <USB_Device_ProcessControlRequest+0x1fa>
    21f8:	2a c0       	rjmp	.+84     	; 0x224e <USB_Device_ProcessControlRequest+0xa0>
    21fa:	98 30       	cpi	r25, 0x08	; 8
    21fc:	09 f4       	brne	.+2      	; 0x2200 <USB_Device_ProcessControlRequest+0x52>
    21fe:	a6 c0       	rjmp	.+332    	; 0x234c <USB_Device_ProcessControlRequest+0x19e>
    2200:	99 30       	cpi	r25, 0x09	; 9
    2202:	09 f4       	brne	.+2      	; 0x2206 <USB_Device_ProcessControlRequest+0x58>
    2204:	b5 c0       	rjmp	.+362    	; 0x2370 <USB_Device_ProcessControlRequest+0x1c2>
    2206:	96 30       	cpi	r25, 0x06	; 6
    2208:	09 f0       	breq	.+2      	; 0x220c <USB_Device_ProcessControlRequest+0x5e>
    220a:	ce c0       	rjmp	.+412    	; 0x23a8 <USB_Device_ProcessControlRequest+0x1fa>
    220c:	7e c0       	rjmp	.+252    	; 0x230a <USB_Device_ProcessControlRequest+0x15c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    220e:	80 38       	cpi	r24, 0x80	; 128
    2210:	09 f4       	brne	.+2      	; 0x2214 <USB_Device_ProcessControlRequest+0x66>
    2212:	ca c0       	rjmp	.+404    	; 0x23a8 <USB_Device_ProcessControlRequest+0x1fa>
    2214:	82 38       	cpi	r24, 0x82	; 130
    2216:	09 f0       	breq	.+2      	; 0x221a <USB_Device_ProcessControlRequest+0x6c>
    2218:	c7 c0       	rjmp	.+398    	; 0x23a8 <USB_Device_ProcessControlRequest+0x1fa>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    221a:	80 91 51 01 	lds	r24, 0x0151
    221e:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    2220:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2224:	80 91 eb 00 	lds	r24, 0x00EB
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    2228:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    222c:	20 91 e8 00 	lds	r18, 0x00E8
    2230:	27 7f       	andi	r18, 0xF7	; 247
    2232:	20 93 e8 00 	sts	0x00E8, r18
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	25 e0       	ldi	r18, 0x05	; 5
    223a:	96 95       	lsr	r25
    223c:	87 95       	ror	r24
    223e:	2a 95       	dec	r18
    2240:	e1 f7       	brne	.-8      	; 0x223a <USB_Device_ProcessControlRequest+0x8c>
    2242:	81 70       	andi	r24, 0x01	; 1
    2244:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Word >> 8);
    2248:	10 92 f1 00 	sts	0x00F1, r1
    224c:	8a c0       	rjmp	.+276    	; 0x2362 <USB_Device_ProcessControlRequest+0x1b4>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    224e:	88 23       	and	r24, r24
    2250:	19 f0       	breq	.+6      	; 0x2258 <USB_Device_ProcessControlRequest+0xaa>
    2252:	82 30       	cpi	r24, 0x02	; 2
    2254:	09 f0       	breq	.+2      	; 0x2258 <USB_Device_ProcessControlRequest+0xaa>
    2256:	a8 c0       	rjmp	.+336    	; 0x23a8 <USB_Device_ProcessControlRequest+0x1fa>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    2258:	8f 71       	andi	r24, 0x1F	; 31
    225a:	82 30       	cpi	r24, 0x02	; 2
    225c:	09 f0       	breq	.+2      	; 0x2260 <USB_Device_ProcessControlRequest+0xb2>
    225e:	a4 c0       	rjmp	.+328    	; 0x23a8 <USB_Device_ProcessControlRequest+0x1fa>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    2260:	80 91 4f 01 	lds	r24, 0x014F
    2264:	88 23       	and	r24, r24
    2266:	31 f5       	brne	.+76     	; 0x22b4 <USB_Device_ProcessControlRequest+0x106>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2268:	20 91 51 01 	lds	r18, 0x0151
    226c:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    226e:	09 f4       	brne	.+2      	; 0x2272 <USB_Device_ProcessControlRequest+0xc4>
    2270:	9b c0       	rjmp	.+310    	; 0x23a8 <USB_Device_ProcessControlRequest+0x1fa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    2272:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    2276:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    227a:	80 ff       	sbrs	r24, 0
    227c:	1b c0       	rjmp	.+54     	; 0x22b4 <USB_Device_ProcessControlRequest+0x106>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    227e:	93 30       	cpi	r25, 0x03	; 3
    2280:	21 f4       	brne	.+8      	; 0x228a <USB_Device_ProcessControlRequest+0xdc>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2282:	80 91 eb 00 	lds	r24, 0x00EB
    2286:	80 62       	ori	r24, 0x20	; 32
    2288:	13 c0       	rjmp	.+38     	; 0x22b0 <USB_Device_ProcessControlRequest+0x102>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    228a:	80 91 eb 00 	lds	r24, 0x00EB
    228e:	80 61       	ori	r24, 0x10	; 16
    2290:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	02 c0       	rjmp	.+4      	; 0x229e <USB_Device_ProcessControlRequest+0xf0>
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	2a 95       	dec	r18
    22a0:	e2 f7       	brpl	.-8      	; 0x229a <USB_Device_ProcessControlRequest+0xec>
    22a2:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    22a6:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    22aa:	80 91 eb 00 	lds	r24, 0x00EB
    22ae:	88 60       	ori	r24, 0x08	; 8
    22b0:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    22b4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22b8:	80 91 e8 00 	lds	r24, 0x00E8
    22bc:	87 7f       	andi	r24, 0xF7	; 247
    22be:	54 c0       	rjmp	.+168    	; 0x2368 <USB_Device_ProcessControlRequest+0x1ba>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    22c0:	88 23       	and	r24, r24
    22c2:	09 f0       	breq	.+2      	; 0x22c6 <USB_Device_ProcessControlRequest+0x118>
    22c4:	71 c0       	rjmp	.+226    	; 0x23a8 <USB_Device_ProcessControlRequest+0x1fa>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    22c6:	10 91 4f 01 	lds	r17, 0x014F
    22ca:	1f 77       	andi	r17, 0x7F	; 127

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    22cc:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    22ce:	f8 94       	cli
    22d0:	80 91 e8 00 	lds	r24, 0x00E8
    22d4:	87 7f       	andi	r24, 0xF7	; 247
    22d6:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearSETUP();

		Endpoint_ClearStatusStage();
    22da:	2f de       	rcall	.-930    	; 0x1f3a <Endpoint_ClearStatusStage>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    22dc:	80 91 e8 00 	lds	r24, 0x00E8

		while (!(Endpoint_IsINReady()));
    22e0:	80 ff       	sbrs	r24, 0
    22e2:	fc cf       	rjmp	.-8      	; 0x22dc <USB_Device_ProcessControlRequest+0x12e>

		USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    22e4:	11 23       	and	r17, r17
    22e6:	11 f4       	brne	.+4      	; 0x22ec <USB_Device_ProcessControlRequest+0x13e>
    22e8:	82 e0       	ldi	r24, 0x02	; 2
    22ea:	01 c0       	rjmp	.+2      	; 0x22ee <USB_Device_ProcessControlRequest+0x140>
    22ec:	83 e0       	ldi	r24, 0x03	; 3
    22ee:	8e bb       	out	0x1e, r24	; 30
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
    22f0:	80 91 e3 00 	lds	r24, 0x00E3
    22f4:	80 78       	andi	r24, 0x80	; 128
    22f6:	18 2b       	or	r17, r24
    22f8:	10 93 e3 00 	sts	0x00E3, r17
				UDADDR |= (1 << ADDEN);
    22fc:	80 91 e3 00 	lds	r24, 0x00E3
    2300:	80 68       	ori	r24, 0x80	; 128
    2302:	80 93 e3 00 	sts	0x00E3, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2306:	0f bf       	out	0x3f, r16	; 63
    __asm__ volatile ("" ::: "memory");
    2308:	4f c0       	rjmp	.+158    	; 0x23a8 <USB_Device_ProcessControlRequest+0x1fa>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    230a:	80 58       	subi	r24, 0x80	; 128
    230c:	82 30       	cpi	r24, 0x02	; 2
    230e:	08 f0       	brcs	.+2      	; 0x2312 <USB_Device_ProcessControlRequest+0x164>
    2310:	4b c0       	rjmp	.+150    	; 0x23a8 <USB_Device_ProcessControlRequest+0x1fa>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2312:	80 91 4f 01 	lds	r24, 0x014F
    2316:	90 91 50 01 	lds	r25, 0x0150
    231a:	60 91 51 01 	lds	r22, 0x0151
    231e:	ae 01       	movw	r20, r28
    2320:	4f 5f       	subi	r20, 0xFF	; 255
    2322:	5f 4f       	sbci	r21, 0xFF	; 255
    2324:	0e 94 a6 01 	call	0x34c	; 0x34c <CALLBACK_USB_GetDescriptor>
    2328:	bc 01       	movw	r22, r24
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	09 f4       	brne	.+2      	; 0x2330 <USB_Device_ProcessControlRequest+0x182>
    232e:	3c c0       	rjmp	.+120    	; 0x23a8 <USB_Device_ProcessControlRequest+0x1fa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2330:	80 91 e8 00 	lds	r24, 0x00E8
    2334:	87 7f       	andi	r24, 0xF7	; 247
    2336:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	9a 81       	ldd	r25, Y+2	; 0x02
    233e:	4a d0       	rcall	.+148    	; 0x23d4 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2340:	80 91 e8 00 	lds	r24, 0x00E8
    2344:	8b 77       	andi	r24, 0x7B	; 123
    2346:	80 93 e8 00 	sts	0x00E8, r24
    234a:	2e c0       	rjmp	.+92     	; 0x23a8 <USB_Device_ProcessControlRequest+0x1fa>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    234c:	80 38       	cpi	r24, 0x80	; 128
    234e:	61 f5       	brne	.+88     	; 0x23a8 <USB_Device_ProcessControlRequest+0x1fa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2350:	80 91 e8 00 	lds	r24, 0x00E8
    2354:	87 7f       	andi	r24, 0xF7	; 247
    2356:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
    235a:	80 91 4b 01 	lds	r24, 0x014B
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    235e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2362:	80 91 e8 00 	lds	r24, 0x00E8
    2366:	8e 77       	andi	r24, 0x7E	; 126
    2368:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    236c:	e6 dd       	rcall	.-1076   	; 0x1f3a <Endpoint_ClearStatusStage>
    236e:	1c c0       	rjmp	.+56     	; 0x23a8 <USB_Device_ProcessControlRequest+0x1fa>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2370:	88 23       	and	r24, r24
    2372:	d1 f4       	brne	.+52     	; 0x23a8 <USB_Device_ProcessControlRequest+0x1fa>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2374:	90 91 4f 01 	lds	r25, 0x014F
    2378:	92 30       	cpi	r25, 0x02	; 2
    237a:	b0 f4       	brcc	.+44     	; 0x23a8 <USB_Device_ProcessControlRequest+0x1fa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    237c:	80 91 e8 00 	lds	r24, 0x00E8
    2380:	87 7f       	andi	r24, 0xF7	; 247
    2382:	80 93 e8 00 	sts	0x00E8, r24
	}
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2386:	90 93 4b 01 	sts	0x014B, r25

	Endpoint_ClearStatusStage();
    238a:	d7 dd       	rcall	.-1106   	; 0x1f3a <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
    238c:	80 91 4b 01 	lds	r24, 0x014B
    2390:	88 23       	and	r24, r24
    2392:	31 f4       	brne	.+12     	; 0x23a0 <USB_Device_ProcessControlRequest+0x1f2>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2394:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2398:	87 fd       	sbrc	r24, 7
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <USB_Device_ProcessControlRequest+0x1f2>
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	01 c0       	rjmp	.+2      	; 0x23a2 <USB_Device_ProcessControlRequest+0x1f4>
    23a0:	84 e0       	ldi	r24, 0x04	; 4
    23a2:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    23a4:	0e 94 66 01 	call	0x2cc	; 0x2cc <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    23a8:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    23ac:	83 ff       	sbrs	r24, 3
    23ae:	0a c0       	rjmp	.+20     	; 0x23c4 <USB_Device_ProcessControlRequest+0x216>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    23b0:	80 91 eb 00 	lds	r24, 0x00EB
    23b4:	80 62       	ori	r24, 0x20	; 32
    23b6:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    23ba:	80 91 e8 00 	lds	r24, 0x00E8
    23be:	87 7f       	andi	r24, 0xF7	; 247
    23c0:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	1f 91       	pop	r17
    23ce:	0f 91       	pop	r16
    23d0:	08 95       	ret

000023d2 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    23d2:	08 95       	ret

000023d4 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
    23d4:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    23d6:	40 91 53 01 	lds	r20, 0x0153
    23da:	50 91 54 01 	lds	r21, 0x0154
    23de:	46 17       	cp	r20, r22
    23e0:	57 07       	cpc	r21, r23
    23e2:	10 f4       	brcc	.+4      	; 0x23e8 <Endpoint_Write_Control_PStream_LE+0x14>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    23e4:	60 e0       	ldi	r22, 0x00	; 0
    23e6:	3e c0       	rjmp	.+124    	; 0x2464 <Endpoint_Write_Control_PStream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    23e8:	61 15       	cp	r22, r1
    23ea:	71 05       	cpc	r23, r1
    23ec:	11 f0       	breq	.+4      	; 0x23f2 <Endpoint_Write_Control_PStream_LE+0x1e>
    23ee:	ab 01       	movw	r20, r22
    23f0:	f9 cf       	rjmp	.-14     	; 0x23e4 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    23f2:	80 91 e8 00 	lds	r24, 0x00E8
    23f6:	8e 77       	andi	r24, 0x7E	; 126
    23f8:	80 93 e8 00 	sts	0x00E8, r24
    23fc:	40 e0       	ldi	r20, 0x00	; 0
    23fe:	50 e0       	ldi	r21, 0x00	; 0
    2400:	f1 cf       	rjmp	.-30     	; 0x23e4 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2402:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2404:	88 23       	and	r24, r24
    2406:	09 f4       	brne	.+2      	; 0x240a <Endpoint_Write_Control_PStream_LE+0x36>
    2408:	3e c0       	rjmp	.+124    	; 0x2486 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    240a:	85 30       	cpi	r24, 0x05	; 5
    240c:	09 f4       	brne	.+2      	; 0x2410 <Endpoint_Write_Control_PStream_LE+0x3c>
    240e:	3d c0       	rjmp	.+122    	; 0x248a <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2410:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2414:	83 ff       	sbrs	r24, 3
    2416:	02 c0       	rjmp	.+4      	; 0x241c <Endpoint_Write_Control_PStream_LE+0x48>
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    241c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2420:	82 fd       	sbrc	r24, 2
    2422:	2b c0       	rjmp	.+86     	; 0x247a <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2424:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    2428:	80 ff       	sbrs	r24, 0
    242a:	1c c0       	rjmp	.+56     	; 0x2464 <Endpoint_Write_Control_PStream_LE+0x90>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    242c:	80 91 f2 00 	lds	r24, 0x00F2
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	09 c0       	rjmp	.+18     	; 0x2446 <Endpoint_Write_Control_PStream_LE+0x72>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    2434:	f9 01       	movw	r30, r18
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2436:	2f 5f       	subi	r18, 0xFF	; 255
    2438:	3f 4f       	sbci	r19, 0xFF	; 255
    243a:	e4 91       	lpm	r30, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    243c:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
    2440:	41 50       	subi	r20, 0x01	; 1
    2442:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    2444:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    2446:	41 15       	cp	r20, r1
    2448:	51 05       	cpc	r21, r1
    244a:	19 f0       	breq	.+6      	; 0x2452 <Endpoint_Write_Control_PStream_LE+0x7e>
    244c:	80 31       	cpi	r24, 0x10	; 16
    244e:	91 05       	cpc	r25, r1
    2450:	88 f3       	brcs	.-30     	; 0x2434 <Endpoint_Write_Control_PStream_LE+0x60>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    2452:	60 e0       	ldi	r22, 0x00	; 0
    2454:	40 97       	sbiw	r24, 0x10	; 16
    2456:	09 f4       	brne	.+2      	; 0x245a <Endpoint_Write_Control_PStream_LE+0x86>
    2458:	61 e0       	ldi	r22, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    245a:	80 91 e8 00 	lds	r24, 0x00E8
    245e:	8e 77       	andi	r24, 0x7E	; 126
    2460:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2464:	41 15       	cp	r20, r1
    2466:	51 05       	cpc	r21, r1
    2468:	61 f6       	brne	.-104    	; 0x2402 <Endpoint_Write_Control_PStream_LE+0x2e>
    246a:	66 23       	and	r22, r22
    246c:	51 f6       	brne	.-108    	; 0x2402 <Endpoint_Write_Control_PStream_LE+0x2e>
    246e:	05 c0       	rjmp	.+10     	; 0x247a <Endpoint_Write_Control_PStream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2470:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2472:	88 23       	and	r24, r24
    2474:	41 f0       	breq	.+16     	; 0x2486 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2476:	85 30       	cpi	r24, 0x05	; 5
    2478:	41 f0       	breq	.+16     	; 0x248a <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    247a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    247e:	82 ff       	sbrs	r24, 2
    2480:	f7 cf       	rjmp	.-18     	; 0x2470 <Endpoint_Write_Control_PStream_LE+0x9c>
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	08 95       	ret
    2486:	82 e0       	ldi	r24, 0x02	; 2
    2488:	08 95       	ret
    248a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    248c:	08 95       	ret

0000248e <Endpoint_Read_Stream_BE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    248e:	df 92       	push	r13
    2490:	ef 92       	push	r14
    2492:	ff 92       	push	r15
    2494:	0f 93       	push	r16
    2496:	1f 93       	push	r17
    2498:	cf 93       	push	r28
    249a:	df 93       	push	r29
    249c:	8c 01       	movw	r16, r24
    249e:	eb 01       	movw	r28, r22
    24a0:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    24a2:	6a dd       	rcall	.-1324   	; 0x1f78 <Endpoint_WaitUntilReady>
    24a4:	d8 2e       	mov	r13, r24
    24a6:	88 23       	and	r24, r24
    24a8:	21 f5       	brne	.+72     	; 0x24f2 <Endpoint_Read_Stream_BE+0x64>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    24aa:	21 97       	sbiw	r28, 0x01	; 1
    24ac:	0c 0f       	add	r16, r28
    24ae:	1d 1f       	adc	r17, r29
    24b0:	21 96       	adiw	r28, 0x01	; 1
    24b2:	1d c0       	rjmp	.+58     	; 0x24ee <Endpoint_Read_Stream_BE+0x60>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    24b4:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    24b8:	85 fd       	sbrc	r24, 5
    24ba:	12 c0       	rjmp	.+36     	; 0x24e0 <Endpoint_Read_Stream_BE+0x52>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    24bc:	80 91 e8 00 	lds	r24, 0x00E8
    24c0:	8b 77       	andi	r24, 0x7B	; 123
    24c2:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    24c6:	e1 14       	cp	r14, r1
    24c8:	f1 04       	cpc	r15, r1
    24ca:	31 f0       	breq	.+12     	; 0x24d8 <Endpoint_Read_Stream_BE+0x4a>
    24cc:	f7 01       	movw	r30, r14
    24ce:	09 95       	icall
    24d0:	81 30       	cpi	r24, 0x01	; 1
    24d2:	11 f4       	brne	.+4      	; 0x24d8 <Endpoint_Read_Stream_BE+0x4a>
    24d4:	85 e0       	ldi	r24, 0x05	; 5
    24d6:	0e c0       	rjmp	.+28     	; 0x24f4 <Endpoint_Read_Stream_BE+0x66>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    24d8:	4f dd       	rcall	.-1378   	; 0x1f78 <Endpoint_WaitUntilReady>
    24da:	88 23       	and	r24, r24
    24dc:	41 f0       	breq	.+16     	; 0x24ee <Endpoint_Read_Stream_BE+0x60>
    24de:	0a c0       	rjmp	.+20     	; 0x24f4 <Endpoint_Read_Stream_BE+0x66>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    24e0:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    24e4:	f8 01       	movw	r30, r16
    24e6:	80 83       	st	Z, r24
    24e8:	01 50       	subi	r16, 0x01	; 1
    24ea:	10 40       	sbci	r17, 0x00	; 0
			Length--;
    24ec:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    24ee:	20 97       	sbiw	r28, 0x00	; 0
    24f0:	09 f7       	brne	.-62     	; 0x24b4 <Endpoint_Read_Stream_BE+0x26>
    24f2:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    24f4:	df 91       	pop	r29
    24f6:	cf 91       	pop	r28
    24f8:	1f 91       	pop	r17
    24fa:	0f 91       	pop	r16
    24fc:	ff 90       	pop	r15
    24fe:	ef 90       	pop	r14
    2500:	df 90       	pop	r13
    2502:	08 95       	ret

00002504 <Endpoint_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    2504:	df 92       	push	r13
    2506:	ef 92       	push	r14
    2508:	ff 92       	push	r15
    250a:	0f 93       	push	r16
    250c:	1f 93       	push	r17
    250e:	cf 93       	push	r28
    2510:	df 93       	push	r29
    2512:	18 2f       	mov	r17, r24
    2514:	09 2f       	mov	r16, r25
    2516:	eb 01       	movw	r28, r22
    2518:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    251a:	2e dd       	rcall	.-1444   	; 0x1f78 <Endpoint_WaitUntilReady>
    251c:	d8 2e       	mov	r13, r24
    251e:	88 23       	and	r24, r24
    2520:	19 f5       	brne	.+70     	; 0x2568 <Endpoint_Read_Stream_LE+0x64>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    2522:	81 2f       	mov	r24, r17
    2524:	90 2f       	mov	r25, r16
    2526:	9c 01       	movw	r18, r24
    2528:	89 01       	movw	r16, r18
    252a:	1c c0       	rjmp	.+56     	; 0x2564 <Endpoint_Read_Stream_LE+0x60>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    252c:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    2530:	85 fd       	sbrc	r24, 5
    2532:	12 c0       	rjmp	.+36     	; 0x2558 <Endpoint_Read_Stream_LE+0x54>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2534:	80 91 e8 00 	lds	r24, 0x00E8
    2538:	8b 77       	andi	r24, 0x7B	; 123
    253a:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    253e:	e1 14       	cp	r14, r1
    2540:	f1 04       	cpc	r15, r1
    2542:	31 f0       	breq	.+12     	; 0x2550 <Endpoint_Read_Stream_LE+0x4c>
    2544:	f7 01       	movw	r30, r14
    2546:	09 95       	icall
    2548:	81 30       	cpi	r24, 0x01	; 1
    254a:	11 f4       	brne	.+4      	; 0x2550 <Endpoint_Read_Stream_LE+0x4c>
    254c:	85 e0       	ldi	r24, 0x05	; 5
    254e:	0d c0       	rjmp	.+26     	; 0x256a <Endpoint_Read_Stream_LE+0x66>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    2550:	13 dd       	rcall	.-1498   	; 0x1f78 <Endpoint_WaitUntilReady>
    2552:	88 23       	and	r24, r24
    2554:	39 f0       	breq	.+14     	; 0x2564 <Endpoint_Read_Stream_LE+0x60>
    2556:	09 c0       	rjmp	.+18     	; 0x256a <Endpoint_Read_Stream_LE+0x66>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    2558:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    255c:	f8 01       	movw	r30, r16
    255e:	81 93       	st	Z+, r24
    2560:	8f 01       	movw	r16, r30
			Length--;
    2562:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    2564:	20 97       	sbiw	r28, 0x00	; 0
    2566:	11 f7       	brne	.-60     	; 0x252c <Endpoint_Read_Stream_LE+0x28>
    2568:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    256a:	df 91       	pop	r29
    256c:	cf 91       	pop	r28
    256e:	1f 91       	pop	r17
    2570:	0f 91       	pop	r16
    2572:	ff 90       	pop	r15
    2574:	ef 90       	pop	r14
    2576:	df 90       	pop	r13
    2578:	08 95       	ret

0000257a <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    257a:	df 92       	push	r13
    257c:	ef 92       	push	r14
    257e:	ff 92       	push	r15
    2580:	0f 93       	push	r16
    2582:	1f 93       	push	r17
    2584:	cf 93       	push	r28
    2586:	df 93       	push	r29
    2588:	18 2f       	mov	r17, r24
    258a:	09 2f       	mov	r16, r25
    258c:	eb 01       	movw	r28, r22
    258e:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    2590:	f3 dc       	rcall	.-1562   	; 0x1f78 <Endpoint_WaitUntilReady>
    2592:	d8 2e       	mov	r13, r24
    2594:	88 23       	and	r24, r24
    2596:	19 f5       	brne	.+70     	; 0x25de <Endpoint_Write_Stream_LE+0x64>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    2598:	81 2f       	mov	r24, r17
    259a:	90 2f       	mov	r25, r16
    259c:	9c 01       	movw	r18, r24
    259e:	89 01       	movw	r16, r18
    25a0:	1c c0       	rjmp	.+56     	; 0x25da <Endpoint_Write_Stream_LE+0x60>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    25a2:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    25a6:	85 fd       	sbrc	r24, 5
    25a8:	12 c0       	rjmp	.+36     	; 0x25ce <Endpoint_Write_Stream_LE+0x54>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    25aa:	80 91 e8 00 	lds	r24, 0x00E8
    25ae:	8e 77       	andi	r24, 0x7E	; 126
    25b0:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    25b4:	e1 14       	cp	r14, r1
    25b6:	f1 04       	cpc	r15, r1
    25b8:	31 f0       	breq	.+12     	; 0x25c6 <Endpoint_Write_Stream_LE+0x4c>
    25ba:	f7 01       	movw	r30, r14
    25bc:	09 95       	icall
    25be:	81 30       	cpi	r24, 0x01	; 1
    25c0:	11 f4       	brne	.+4      	; 0x25c6 <Endpoint_Write_Stream_LE+0x4c>
    25c2:	85 e0       	ldi	r24, 0x05	; 5
    25c4:	0d c0       	rjmp	.+26     	; 0x25e0 <Endpoint_Write_Stream_LE+0x66>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    25c6:	d8 dc       	rcall	.-1616   	; 0x1f78 <Endpoint_WaitUntilReady>
    25c8:	88 23       	and	r24, r24
    25ca:	39 f0       	breq	.+14     	; 0x25da <Endpoint_Write_Stream_LE+0x60>
    25cc:	09 c0       	rjmp	.+18     	; 0x25e0 <Endpoint_Write_Stream_LE+0x66>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    25ce:	f8 01       	movw	r30, r16
    25d0:	81 91       	ld	r24, Z+
    25d2:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    25d4:	80 93 f1 00 	sts	0x00F1, r24
			Length--;
    25d8:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    25da:	20 97       	sbiw	r28, 0x00	; 0
    25dc:	11 f7       	brne	.-60     	; 0x25a2 <Endpoint_Write_Stream_LE+0x28>
    25de:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    25e0:	df 91       	pop	r29
    25e2:	cf 91       	pop	r28
    25e4:	1f 91       	pop	r17
    25e6:	0f 91       	pop	r16
    25e8:	ff 90       	pop	r15
    25ea:	ef 90       	pop	r14
    25ec:	df 90       	pop	r13
    25ee:	08 95       	ret

000025f0 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    25f0:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    25f2:	8e b3       	in	r24, 0x1e	; 30
    25f4:	88 23       	and	r24, r24
    25f6:	61 f0       	breq	.+24     	; 0x2610 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    25f8:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    25fc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2600:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    2604:	83 ff       	sbrs	r24, 3
    2606:	01 c0       	rjmp	.+2      	; 0x260a <USB_USBTask+0x1a>
		  USB_Device_ProcessControlRequest();
    2608:	d2 dd       	rcall	.-1116   	; 0x21ae <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    260a:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    260c:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    2610:	1f 91       	pop	r17
    2612:	08 95       	ret

00002614 <__eerd_byte_usb162>:
    2614:	f9 99       	sbic	0x1f, 1	; 31
    2616:	fe cf       	rjmp	.-4      	; 0x2614 <__eerd_byte_usb162>
    2618:	92 bd       	out	0x22, r25	; 34
    261a:	81 bd       	out	0x21, r24	; 33
    261c:	f8 9a       	sbi	0x1f, 0	; 31
    261e:	99 27       	eor	r25, r25
    2620:	80 b5       	in	r24, 0x20	; 32
    2622:	08 95       	ret

00002624 <__eeupd_byte_usb162>:
    2624:	26 2f       	mov	r18, r22

00002626 <__eeupd_r18_usb162>:
    2626:	f9 99       	sbic	0x1f, 1	; 31
    2628:	fe cf       	rjmp	.-4      	; 0x2626 <__eeupd_r18_usb162>
    262a:	92 bd       	out	0x22, r25	; 34
    262c:	81 bd       	out	0x21, r24	; 33
    262e:	f8 9a       	sbi	0x1f, 0	; 31
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	00 b4       	in	r0, 0x20	; 32
    2634:	02 16       	cp	r0, r18
    2636:	39 f0       	breq	.+14     	; 0x2646 <__eeupd_r18_usb162+0x20>
    2638:	1f ba       	out	0x1f, r1	; 31
    263a:	20 bd       	out	0x20, r18	; 32
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	f8 94       	cli
    2640:	fa 9a       	sbi	0x1f, 2	; 31
    2642:	f9 9a       	sbi	0x1f, 1	; 31
    2644:	0f be       	out	0x3f, r0	; 63
    2646:	08 95       	ret

00002648 <_exit>:
    2648:	f8 94       	cli

0000264a <__stop_program>:
    264a:	ff cf       	rjmp	.-2      	; 0x264a <__stop_program>
