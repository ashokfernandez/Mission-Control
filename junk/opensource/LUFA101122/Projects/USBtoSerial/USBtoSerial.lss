
USBtoSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000fe6  0000107a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fe6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000117  00800116  00800116  00001090  2**0
                  ALLOC
  3 .stab         00000b1c  00000000  00000000  00001090  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002b1  00000000  00000000  00001bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000428  00000000  00000000  00001e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000b8f  00000000  00000000  00002285  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000073a0  00000000  00000000  00002e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001e45  00000000  00000000  0000a1b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005993  00000000  00000000  0000bff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000630  00000000  00000000  0001198c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002db8  00000000  00000000  00011fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002cd9  00000000  00000000  00014d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004e0  00000000  00000000  00017a4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return Endpoint_IsConfigured();
}

void Endpoint_ClearEndpoints(void)
{
   0:	9a c0       	rjmp	.+308    	; 0x136 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
   4:	b5 c0       	rjmp	.+362    	; 0x170 <__bad_interrupt>

	return ENDPOINT_READYWAIT_NoError;
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
   6:	00 00       	nop
   8:	b3 c0       	rjmp	.+358    	; 0x170 <__bad_interrupt>
   a:	00 00       	nop
   c:	b1 c0       	rjmp	.+354    	; 0x170 <__bad_interrupt>
   e:	00 00       	nop
  10:	af c0       	rjmp	.+350    	; 0x170 <__bad_interrupt>
  12:	00 00       	nop
  14:	ad c0       	rjmp	.+346    	; 0x170 <__bad_interrupt>
  16:	00 00       	nop
  18:	ab c0       	rjmp	.+342    	; 0x170 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a9 c0       	rjmp	.+338    	; 0x170 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a7 c0       	rjmp	.+334    	; 0x170 <__bad_interrupt>
  22:	00 00       	nop
  24:	a5 c0       	rjmp	.+330    	; 0x170 <__bad_interrupt>
  26:	00 00       	nop
  28:	25 c3       	rjmp	.+1610   	; 0x674 <__vector_10>
  2a:	00 00       	nop
  2c:	e5 c2       	rjmp	.+1482   	; 0x5f8 <__vector_11>
  2e:	00 00       	nop
  30:	9f c0       	rjmp	.+318    	; 0x170 <__bad_interrupt>
  32:	00 00       	nop
  34:	9d c0       	rjmp	.+314    	; 0x170 <__bad_interrupt>
  36:	00 00       	nop
  38:	9b c0       	rjmp	.+310    	; 0x170 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	99 c0       	rjmp	.+306    	; 0x170 <__bad_interrupt>
  3e:	00 00       	nop
  40:	97 c0       	rjmp	.+302    	; 0x170 <__bad_interrupt>
  42:	00 00       	nop
  44:	95 c0       	rjmp	.+298    	; 0x170 <__bad_interrupt>
  46:	00 00       	nop
  48:	93 c0       	rjmp	.+294    	; 0x170 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	91 c0       	rjmp	.+290    	; 0x170 <__bad_interrupt>
  4e:	00 00       	nop
  50:	8f c0       	rjmp	.+286    	; 0x170 <__bad_interrupt>
  52:	00 00       	nop
  54:	8d c0       	rjmp	.+282    	; 0x170 <__bad_interrupt>
  56:	00 00       	nop
  58:	8b c0       	rjmp	.+278    	; 0x170 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	89 c0       	rjmp	.+274    	; 0x170 <__bad_interrupt>
  5e:	00 00       	nop
  60:	87 c0       	rjmp	.+270    	; 0x170 <__bad_interrupt>
  62:	00 00       	nop
  64:	ad c0       	rjmp	.+346    	; 0x1c0 <__vector_25>
  66:	00 00       	nop
  68:	83 c0       	rjmp	.+262    	; 0x170 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	81 c0       	rjmp	.+258    	; 0x170 <__bad_interrupt>
  6e:	00 00       	nop
  70:	7f c0       	rjmp	.+254    	; 0x170 <__bad_interrupt>
  72:	00 00       	nop
  74:	7d c0       	rjmp	.+250    	; 0x170 <__bad_interrupt>
  76:	00 00       	nop
  78:	7b c0       	rjmp	.+246    	; 0x170 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	79 c0       	rjmp	.+242    	; 0x170 <__bad_interrupt>
  7e:	00 00       	nop
  80:	77 c0       	rjmp	.+238    	; 0x170 <__bad_interrupt>
  82:	00 00       	nop
  84:	75 c0       	rjmp	.+234    	; 0x170 <__bad_interrupt>
  86:	00 00       	nop
  88:	73 c0       	rjmp	.+230    	; 0x170 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	71 c0       	rjmp	.+226    	; 0x170 <__bad_interrupt>
  8e:	00 00       	nop
  90:	6f c0       	rjmp	.+222    	; 0x170 <__bad_interrupt>
  92:	00 00       	nop
  94:	6d c0       	rjmp	.+218    	; 0x170 <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
  a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  ba:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
  ca:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
  da:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

000000e8 <LanguageString>:
  e8:	04 03 09 04                                         ....

000000ec <ManufacturerString>:
  ec:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  fc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000106 <ProductString>:
 106:	30 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     0.L.U.F.A. .U.S.
 116:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
 126:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

00000136 <__ctors_end>:
 136:	11 24       	eor	r1, r1
 138:	1f be       	out	0x3f, r1	; 63
 13a:	cf ef       	ldi	r28, 0xFF	; 255
 13c:	d0 e2       	ldi	r29, 0x20	; 32
 13e:	de bf       	out	0x3e, r29	; 62
 140:	cd bf       	out	0x3d, r28	; 61

00000142 <__do_copy_data>:
 142:	11 e0       	ldi	r17, 0x01	; 1
 144:	a0 e0       	ldi	r26, 0x00	; 0
 146:	b1 e0       	ldi	r27, 0x01	; 1
 148:	e6 ee       	ldi	r30, 0xE6	; 230
 14a:	ff e0       	ldi	r31, 0x0F	; 15
 14c:	00 e0       	ldi	r16, 0x00	; 0
 14e:	0b bf       	out	0x3b, r16	; 59
 150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x14>
 152:	07 90       	elpm	r0, Z+
 154:	0d 92       	st	X+, r0
 156:	a6 31       	cpi	r26, 0x16	; 22
 158:	b1 07       	cpc	r27, r17
 15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0x10>

0000015c <__do_clear_bss>:
 15c:	12 e0       	ldi	r17, 0x02	; 2
 15e:	a6 e1       	ldi	r26, 0x16	; 22
 160:	b1 e0       	ldi	r27, 0x01	; 1
 162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
 164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
 166:	ad 32       	cpi	r26, 0x2D	; 45
 168:	b1 07       	cpc	r27, r17
 16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>
 16c:	d6 d0       	rcall	.+428    	; 0x31a <main>
 16e:	39 c7       	rjmp	.+3698   	; 0xfe2 <_exit>

00000170 <__bad_interrupt>:
 170:	47 cf       	rjmp	.-370    	; 0x0 <__vectors>

00000172 <RingBuffer_Remove>:
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to retrieve from
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
 172:	9c 01       	movw	r18, r24
			RingBuff_Data_t Data = *Buffer->Out;
 174:	dc 01       	movw	r26, r24
 176:	ae 57       	subi	r26, 0x7E	; 126
 178:	bf 4f       	sbci	r27, 0xFF	; 255
 17a:	ed 91       	ld	r30, X+
 17c:	fc 91       	ld	r31, X
 17e:	11 97       	sbiw	r26, 0x01	; 1
 180:	41 91       	ld	r20, Z+

			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 182:	11 96       	adiw	r26, 0x01	; 1
 184:	fc 93       	st	X, r31
 186:	ee 93       	st	-X, r30
 188:	80 58       	subi	r24, 0x80	; 128
 18a:	9f 4f       	sbci	r25, 0xFF	; 255
 18c:	e8 17       	cp	r30, r24
 18e:	f9 07       	cpc	r31, r25
 190:	11 f4       	brne	.+4      	; 0x196 <RingBuffer_Remove+0x24>
			  Buffer->Out = Buffer->Buffer;
 192:	2d 93       	st	X+, r18
 194:	3c 93       	st	X, r19

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 196:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 198:	f8 94       	cli
			{
				Buffer->Count--;
 19a:	f9 01       	movw	r30, r18
 19c:	ec 57       	subi	r30, 0x7C	; 124
 19e:	ff 4f       	sbci	r31, 0xFF	; 255
 1a0:	80 81       	ld	r24, Z
 1a2:	81 50       	subi	r24, 0x01	; 1
 1a4:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1a6:	9f bf       	out	0x3f, r25	; 63
			}

			return Data;
		}
 1a8:	84 2f       	mov	r24, r20
 1aa:	08 95       	ret

000001ac <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 1ac:	8b b1       	in	r24, 0x0b	; 11
 1ae:	8f 70       	andi	r24, 0x0F	; 15
 1b0:	80 6a       	ori	r24, 0xA0	; 160
 1b2:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
 1b4:	08 95       	ret

000001b6 <EVENT_USB_Device_Disconnect>:
 1b6:	8b b1       	in	r24, 0x0b	; 11
 1b8:	8f 70       	andi	r24, 0x0F	; 15
 1ba:	80 61       	ori	r24, 0x10	; 16
 1bc:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 1be:	08 95       	ret

000001c0 <__vector_25>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	0b b6       	in	r0, 0x3b	; 59
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	2f 93       	push	r18
 1d0:	8f 93       	push	r24
 1d2:	9f 93       	push	r25
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
 1d8:	90 91 ce 00 	lds	r25, 0x00CE

	if (USB_DeviceState == DEVICE_STATE_Configured)
 1dc:	80 91 24 02 	lds	r24, 0x0224
 1e0:	84 30       	cpi	r24, 0x04	; 4
 1e2:	f1 f4       	brne	.+60     	; 0x220 <__vector_25+0x60>
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
 1e4:	e0 91 96 01 	lds	r30, 0x0196
 1e8:	f0 91 97 01 	lds	r31, 0x0197
 1ec:	90 83       	st	Z, r25

			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
 1ee:	e0 91 96 01 	lds	r30, 0x0196
 1f2:	f0 91 97 01 	lds	r31, 0x0197
 1f6:	cf 01       	movw	r24, r30
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	90 93 97 01 	sts	0x0197, r25
 1fe:	80 93 96 01 	sts	0x0196, r24
 202:	86 59       	subi	r24, 0x96	; 150
 204:	91 40       	sbci	r25, 0x01	; 1
 206:	21 f4       	brne	.+8      	; 0x210 <__vector_25+0x50>
			  Buffer->In = Buffer->Buffer;
 208:	86 e1       	ldi	r24, 0x16	; 22
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	92 83       	std	Z+2, r25	; 0x02
 20e:	81 83       	std	Z+1, r24	; 0x01

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 210:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 212:	f8 94       	cli
			{
				Buffer->Count++;
 214:	80 91 9a 01 	lds	r24, 0x019A
 218:	8f 5f       	subi	r24, 0xFF	; 255
 21a:	80 93 9a 01 	sts	0x019A, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 21e:	9f bf       	out	0x3f, r25	; 63
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
}
 220:	ff 91       	pop	r31
 222:	ef 91       	pop	r30
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0b be       	out	0x3b, r0	; 59
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 238:	1f 93       	push	r17
 23a:	fc 01       	movw	r30, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
 23c:	84 89       	ldd	r24, Z+20	; 0x14
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	19 f0       	breq	.+6      	; 0x248 <EVENT_CDC_Device_LineEncodingChanged+0x10>
 242:	82 30       	cpi	r24, 0x02	; 2
 244:	19 f4       	brne	.+6      	; 0x24c <EVENT_CDC_Device_LineEncodingChanged+0x14>
 246:	04 c0       	rjmp	.+8      	; 0x250 <EVENT_CDC_Device_LineEncodingChanged+0x18>
 248:	10 e3       	ldi	r17, 0x30	; 48
 24a:	03 c0       	rjmp	.+6      	; 0x252 <EVENT_CDC_Device_LineEncodingChanged+0x1a>
 24c:	10 e0       	ldi	r17, 0x00	; 0
 24e:	01 c0       	rjmp	.+2      	; 0x252 <EVENT_CDC_Device_LineEncodingChanged+0x1a>
 250:	10 e2       	ldi	r17, 0x20	; 32
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
 252:	83 89       	ldd	r24, Z+19	; 0x13
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	09 f4       	brne	.+2      	; 0x25a <EVENT_CDC_Device_LineEncodingChanged+0x22>
	  ConfigMask |= (1 << USBS1);
 258:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
 25a:	85 89       	ldd	r24, Z+21	; 0x15
 25c:	87 30       	cpi	r24, 0x07	; 7
 25e:	31 f0       	breq	.+12     	; 0x26c <EVENT_CDC_Device_LineEncodingChanged+0x34>
 260:	88 30       	cpi	r24, 0x08	; 8
 262:	31 f0       	breq	.+12     	; 0x270 <EVENT_CDC_Device_LineEncodingChanged+0x38>
 264:	86 30       	cpi	r24, 0x06	; 6
 266:	29 f4       	brne	.+10     	; 0x272 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
 268:	12 60       	ori	r17, 0x02	; 2
 26a:	03 c0       	rjmp	.+6      	; 0x272 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
			break;
		case 7:
			ConfigMask |= (1 << UCSZ11);
 26c:	14 60       	ori	r17, 0x04	; 4
 26e:	01 c0       	rjmp	.+2      	; 0x272 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
			break;
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
 270:	16 60       	ori	r17, 0x06	; 6
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
 272:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
 276:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
 27a:	10 92 ca 00 	sts	0x00CA, r1

	/* Set the new baud rate before configuring the USART */
	UBRR1  = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 27e:	27 85       	ldd	r18, Z+15	; 0x0f
 280:	30 89       	ldd	r19, Z+16	; 0x10
 282:	41 89       	ldd	r20, Z+17	; 0x11
 284:	52 89       	ldd	r21, Z+18	; 0x12
 286:	ca 01       	movw	r24, r20
 288:	b9 01       	movw	r22, r18
 28a:	96 95       	lsr	r25
 28c:	87 95       	ror	r24
 28e:	77 95       	ror	r23
 290:	67 95       	ror	r22
 292:	60 5c       	subi	r22, 0xC0	; 192
 294:	7d 4b       	sbci	r23, 0xBD	; 189
 296:	80 4f       	sbci	r24, 0xF0	; 240
 298:	9f 4f       	sbci	r25, 0xFF	; 255
 29a:	81 d6       	rcall	.+3330   	; 0xf9e <__udivmodsi4>
 29c:	21 50       	subi	r18, 0x01	; 1
 29e:	30 40       	sbci	r19, 0x00	; 0
 2a0:	30 93 cd 00 	sts	0x00CD, r19
 2a4:	20 93 cc 00 	sts	0x00CC, r18

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
 2a8:	10 93 ca 00 	sts	0x00CA, r17
	UCSR1A = (1 << U2X1);
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
 2b2:	88 e9       	ldi	r24, 0x98	; 152
 2b4:	80 93 c9 00 	sts	0x00C9, r24
}
 2b8:	1f 91       	pop	r17
 2ba:	08 95       	ret

000002bc <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	91 e0       	ldi	r25, 0x01	; 1
}
 2c0:	01 c6       	rjmp	.+3074   	; 0xec4 <CDC_Device_ProcessControlRequest>

000002c2 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	b5 d5       	rcall	.+2922   	; 0xe32 <CDC_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 2c8:	80 fd       	sbrc	r24, 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <EVENT_USB_Device_ConfigurationChanged+0xe>
 2cc:	90 e9       	ldi	r25, 0x90	; 144
 2ce:	01 c0       	rjmp	.+2      	; 0x2d2 <EVENT_USB_Device_ConfigurationChanged+0x10>
 2d0:	90 e6       	ldi	r25, 0x60	; 96
 2d2:	8b b1       	in	r24, 0x0b	; 11
 2d4:	8f 70       	andi	r24, 0x0F	; 15
 2d6:	98 2b       	or	r25, r24
 2d8:	9b b9       	out	0x0b, r25	; 11
}
 2da:	08 95       	ret

000002dc <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 2dc:	84 b7       	in	r24, 0x34	; 52
 2de:	87 7f       	andi	r24, 0xF7	; 247
 2e0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 2e2:	88 e1       	ldi	r24, 0x18	; 24
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	f8 94       	cli
 2e8:	80 93 60 00 	sts	0x0060, r24
 2ec:	10 92 60 00 	sts	0x0060, r1
 2f0:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	20 e8       	ldi	r18, 0x80	; 128
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	20 93 61 00 	sts	0x0061, r18
 300:	80 93 61 00 	sts	0x0061, r24
 304:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 306:	8a b1       	in	r24, 0x0a	; 10
 308:	80 6f       	ori	r24, 0xF0	; 240
 30a:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 30c:	8b b1       	in	r24, 0x0b	; 11
 30e:	8f 70       	andi	r24, 0x0F	; 15
 310:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
 312:	5c d1       	rcall	.+696    	; 0x5cc <USB_Init>

	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	TCCR0B = (1 << CS02);
 314:	84 e0       	ldi	r24, 0x04	; 4
 316:	85 bd       	out	0x25, r24	; 37
}
 318:	08 95       	ret

0000031a <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
 31a:	1f 93       	push	r17
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
	SetupHardware();
 320:	dd df       	rcall	.-70     	; 0x2dc <SetupHardware>
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 322:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 324:	f8 94       	cli
			{
				Buffer->In  = Buffer->Buffer;
 326:	8b e9       	ldi	r24, 0x9B	; 155
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	90 93 1c 02 	sts	0x021C, r25
 32e:	80 93 1b 02 	sts	0x021B, r24
				Buffer->Out = Buffer->Buffer;
 332:	90 93 1e 02 	sts	0x021E, r25
 336:	80 93 1d 02 	sts	0x021D, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 33a:	2f bf       	out	0x3f, r18	; 63
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 33c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 33e:	f8 94       	cli
			{
				Buffer->In  = Buffer->Buffer;
 340:	86 e1       	ldi	r24, 0x16	; 22
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	90 93 97 01 	sts	0x0197, r25
 348:	80 93 96 01 	sts	0x0196, r24
				Buffer->Out = Buffer->Buffer;
 34c:	90 93 99 01 	sts	0x0199, r25
 350:	80 93 98 01 	sts	0x0198, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 354:	2f bf       	out	0x3f, r18	; 63
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 356:	8b b1       	in	r24, 0x0b	; 11
 358:	8f 70       	andi	r24, 0x0F	; 15
 35a:	80 61       	ori	r24, 0x10	; 16
 35c:	8b b9       	out	0x0b, r24	; 11

	RingBuffer_InitBuffer(&USBtoUSART_Buffer);
	RingBuffer_InitBuffer(&USARTtoUSB_Buffer);

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
 35e:	78 94       	sei
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;

			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->In = Buffer->Buffer;
 360:	cb e9       	ldi	r28, 0x9B	; 155
 362:	d1 e0       	ldi	r29, 0x01	; 1
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 364:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 366:	f8 94       	cli
			{
				Count = Buffer->Count;
 368:	90 91 1f 02 	lds	r25, 0x021F
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 36c:	8f bf       	out	0x3f, r24	; 63

	for (;;)
	{
		/* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
		if (!(RingBuffer_IsFull(&USBtoUSART_Buffer)))
 36e:	90 38       	cpi	r25, 0x80	; 128
 370:	09 f1       	breq	.+66     	; 0x3b4 <main+0x9a>
		{
			int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	c9 d4       	rcall	.+2450   	; 0xd0a <CDC_Device_ReceiveByte>

			/* Read bytes from the USB OUT endpoint into the USART transmit buffer */
			if (!(ReceivedByte < 0))
 378:	97 fd       	sbrc	r25, 7
 37a:	1c c0       	rjmp	.+56     	; 0x3b4 <main+0x9a>
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
 37c:	e0 91 1b 02 	lds	r30, 0x021B
 380:	f0 91 1c 02 	lds	r31, 0x021C
 384:	80 83       	st	Z, r24

			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
 386:	e0 91 1b 02 	lds	r30, 0x021B
 38a:	f0 91 1c 02 	lds	r31, 0x021C
 38e:	cf 01       	movw	r24, r30
 390:	01 96       	adiw	r24, 0x01	; 1
 392:	90 93 1c 02 	sts	0x021C, r25
 396:	80 93 1b 02 	sts	0x021B, r24
 39a:	8b 51       	subi	r24, 0x1B	; 27
 39c:	92 40       	sbci	r25, 0x02	; 2
 39e:	11 f4       	brne	.+4      	; 0x3a4 <main+0x8a>
			  Buffer->In = Buffer->Buffer;
 3a0:	d2 83       	std	Z+2, r29	; 0x02
 3a2:	c1 83       	std	Z+1, r28	; 0x01

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 3a4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3a6:	f8 94       	cli
			{
				Buffer->Count++;
 3a8:	80 91 1f 02 	lds	r24, 0x021F
 3ac:	8f 5f       	subi	r24, 0xFF	; 255
 3ae:	80 93 1f 02 	sts	0x021F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3b2:	9f bf       	out	0x3f, r25	; 63
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 3b4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3b6:	f8 94       	cli
			{
				Count = Buffer->Count;
 3b8:	10 91 9a 01 	lds	r17, 0x019A
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3bc:	8f bf       	out	0x3f, r24	; 63
			  RingBuffer_Insert(&USBtoUSART_Buffer, ReceivedByte);
		}
		
		/* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
		RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
		if ((TIFR0 & (1 << TOV0)) || (BufferCount > 200))
 3be:	a8 99       	sbic	0x15, 0	; 21
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <main+0xac>
 3c2:	19 3c       	cpi	r17, 0xC9	; 201
 3c4:	60 f0       	brcs	.+24     	; 0x3de <main+0xc4>
		{
			/* Clear flush timer expiry flag */
			TIFR0 |= (1 << TOV0);
 3c6:	a8 9a       	sbi	0x15, 0	; 21
 3c8:	08 c0       	rjmp	.+16     	; 0x3da <main+0xc0>

			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (BufferCount--)
			  CDC_Device_SendByte(&VirtualSerial_CDC_Interface, RingBuffer_Remove(&USARTtoUSB_Buffer));
 3ca:	86 e1       	ldi	r24, 0x16	; 22
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	d1 de       	rcall	.-606    	; 0x172 <RingBuffer_Remove>
 3d0:	68 2f       	mov	r22, r24
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	08 d5       	rcall	.+2576   	; 0xde8 <CDC_Device_SendByte>
 3d8:	11 50       	subi	r17, 0x01	; 1
		{
			/* Clear flush timer expiry flag */
			TIFR0 |= (1 << TOV0);

			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (BufferCount--)
 3da:	11 23       	and	r17, r17
 3dc:	b1 f7       	brne	.-20     	; 0x3ca <main+0xb0>
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 3de:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3e0:	f8 94       	cli
			{
				Count = Buffer->Count;
 3e2:	90 91 1f 02 	lds	r25, 0x021F
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3e6:	8f bf       	out	0x3f, r24	; 63
			  CDC_Device_SendByte(&VirtualSerial_CDC_Interface, RingBuffer_Remove(&USARTtoUSB_Buffer));
		}

		/* Load the next byte from the USART transmit buffer into the USART */
		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer)))
 3e8:	99 23       	and	r25, r25
 3ea:	51 f0       	breq	.+20     	; 0x400 <main+0xe6>
		  Serial_TxByte(RingBuffer_Remove(&USBtoUSART_Buffer));
 3ec:	8b e9       	ldi	r24, 0x9B	; 155
 3ee:	91 e0       	ldi	r25, 0x01	; 1
 3f0:	c0 de       	rcall	.-640    	; 0x172 <RingBuffer_Remove>
 3f2:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
 3f4:	80 91 c8 00 	lds	r24, 0x00C8
 3f8:	85 ff       	sbrs	r24, 5
 3fa:	fc cf       	rjmp	.-8      	; 0x3f4 <main+0xda>
				UDR1 = DataByte;
 3fc:	90 93 ce 00 	sts	0x00CE, r25

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	e1 d4       	rcall	.+2498   	; 0xdc8 <CDC_Device_USBTask>
		USB_USBTask();
 406:	6d d4       	rcall	.+2266   	; 0xce2 <USB_USBTask>
 408:	ad cf       	rjmp	.-166    	; 0x364 <main+0x4a>

0000040a <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 40a:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 40c:	92 30       	cpi	r25, 0x02	; 2
 40e:	49 f0       	breq	.+18     	; 0x422 <CALLBACK_USB_GetDescriptor+0x18>
 410:	93 30       	cpi	r25, 0x03	; 3
 412:	61 f0       	breq	.+24     	; 0x42c <CALLBACK_USB_GetDescriptor+0x22>
 414:	91 30       	cpi	r25, 0x01	; 1
 416:	f9 f4       	brne	.+62     	; 0x456 <CALLBACK_USB_GetDescriptor+0x4c>
 418:	e8 e9       	ldi	r30, 0x98	; 152
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	22 e1       	ldi	r18, 0x12	; 18
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	1e c0       	rjmp	.+60     	; 0x45e <CALLBACK_USB_GetDescriptor+0x54>
 422:	ea ea       	ldi	r30, 0xAA	; 170
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	2e e3       	ldi	r18, 0x3E	; 62
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	19 c0       	rjmp	.+50     	; 0x45e <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	49 f0       	breq	.+18     	; 0x442 <CALLBACK_USB_GetDescriptor+0x38>
 430:	81 30       	cpi	r24, 0x01	; 1
 432:	18 f0       	brcs	.+6      	; 0x43a <CALLBACK_USB_GetDescriptor+0x30>
 434:	82 30       	cpi	r24, 0x02	; 2
 436:	79 f4       	brne	.+30     	; 0x456 <CALLBACK_USB_GetDescriptor+0x4c>
 438:	08 c0       	rjmp	.+16     	; 0x44a <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 43a:	e8 ee       	ldi	r30, 0xE8	; 232
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	84 91       	lpm	r24, Z+
 440:	07 c0       	rjmp	.+14     	; 0x450 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 442:	ec ee       	ldi	r30, 0xEC	; 236
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	84 91       	lpm	r24, Z+
 448:	03 c0       	rjmp	.+6      	; 0x450 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 44a:	e6 e0       	ldi	r30, 0x06	; 6
 44c:	f1 e0       	ldi	r31, 0x01	; 1
 44e:	84 91       	lpm	r24, Z+
 450:	28 2f       	mov	r18, r24
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	04 c0       	rjmp	.+8      	; 0x45e <CALLBACK_USB_GetDescriptor+0x54>
 456:	e0 e0       	ldi	r30, 0x00	; 0
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	20 e0       	ldi	r18, 0x00	; 0
 45c:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 45e:	ed 93       	st	X+, r30
 460:	fc 93       	st	X, r31
	return Size;
}
 462:	c9 01       	movw	r24, r18
 464:	08 95       	ret

00000466 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 466:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 46a:	80 91 eb 00 	lds	r24, 0x00EB
 46e:	81 60       	ori	r24, 0x01	; 1
 470:	80 93 eb 00 	sts	0x00EB, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
 474:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
 478:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
 47c:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 480:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
 484:	88 1f       	adc	r24, r24
 486:	88 27       	eor	r24, r24
 488:	88 1f       	adc	r24, r24
 48a:	08 95       	ret

0000048c <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 48c:	80 91 25 02 	lds	r24, 0x0225
 490:	88 23       	and	r24, r24
 492:	9c f4       	brge	.+38     	; 0x4ba <Endpoint_ClearStatusStage+0x2e>
 494:	04 c0       	rjmp	.+8      	; 0x49e <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 496:	80 91 24 02 	lds	r24, 0x0224
 49a:	88 23       	and	r24, r24
 49c:	b9 f0       	breq	.+46     	; 0x4cc <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 49e:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 4a2:	82 ff       	sbrs	r24, 2
 4a4:	f8 cf       	rjmp	.-16     	; 0x496 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 4a6:	80 91 e8 00 	lds	r24, 0x00E8
 4aa:	8b 77       	andi	r24, 0x7B	; 123
 4ac:	80 93 e8 00 	sts	0x00E8, r24
 4b0:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 4b2:	80 91 24 02 	lds	r24, 0x0224
 4b6:	88 23       	and	r24, r24
 4b8:	49 f0       	breq	.+18     	; 0x4cc <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 4ba:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 4be:	80 ff       	sbrs	r24, 0
 4c0:	f8 cf       	rjmp	.-16     	; 0x4b2 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4c2:	80 91 e8 00 	lds	r24, 0x00E8
 4c6:	8e 77       	andi	r24, 0x7E	; 126
 4c8:	80 93 e8 00 	sts	0x00E8, r24
 4cc:	08 95       	ret

000004ce <Endpoint_WaitUntilReady>:
			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is active (i.e. enumerated to a host)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 4ce:	40 91 e4 00 	lds	r20, 0x00E4
 4d2:	50 91 e5 00 	lds	r21, 0x00E5
 4d6:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
 4d8:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 4dc:	80 ff       	sbrs	r24, 0
 4de:	05 c0       	rjmp	.+10     	; 0x4ea <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 4e0:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
 4e4:	80 ff       	sbrs	r24, 0
 4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <Endpoint_WaitUntilReady+0x24>
 4e8:	22 c0       	rjmp	.+68     	; 0x52e <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4ea:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 4ee:	82 fd       	sbrc	r24, 2
 4f0:	1e c0       	rjmp	.+60     	; 0x52e <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 4f2:	80 91 24 02 	lds	r24, 0x0224

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 4f6:	88 23       	and	r24, r24
 4f8:	11 f4       	brne	.+4      	; 0x4fe <Endpoint_WaitUntilReady+0x30>
 4fa:	82 e0       	ldi	r24, 0x02	; 2
 4fc:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 4fe:	85 30       	cpi	r24, 0x05	; 5
 500:	11 f4       	brne	.+4      	; 0x506 <Endpoint_WaitUntilReady+0x38>
 502:	83 e0       	ldi	r24, 0x03	; 3
 504:	08 95       	ret
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 506:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 50a:	85 ff       	sbrs	r24, 5
 50c:	02 c0       	rjmp	.+4      	; 0x512 <Endpoint_WaitUntilReady+0x44>
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	08 95       	ret
 512:	80 91 e4 00 	lds	r24, 0x00E4
 516:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 51a:	84 17       	cp	r24, r20
 51c:	95 07       	cpc	r25, r21
 51e:	e1 f2       	breq	.-72     	; 0x4d8 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 520:	22 23       	and	r18, r18
 522:	11 f4       	brne	.+4      	; 0x528 <Endpoint_WaitUntilReady+0x5a>
 524:	84 e0       	ldi	r24, 0x04	; 4
 526:	08 95       	ret
 528:	21 50       	subi	r18, 0x01	; 1
 52a:	ac 01       	movw	r20, r24
 52c:	d5 cf       	rjmp	.-86     	; 0x4d8 <Endpoint_WaitUntilReady+0xa>
 52e:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 530:	08 95       	ret

00000532 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 532:	55 d0       	rcall	.+170    	; 0x5de <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 534:	5c d0       	rcall	.+184    	; 0x5ee <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 536:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
 53a:	98 2f       	mov	r25, r24
 53c:	9f 77       	andi	r25, 0x7F	; 127
 53e:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
 542:	80 68       	ori	r24, 0x80	; 128
 544:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 548:	8c e0       	ldi	r24, 0x0C	; 12
 54a:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 54c:	89 b5       	in	r24, 0x29	; 41
 54e:	82 60       	ori	r24, 0x02	; 2
 550:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
 552:	09 b4       	in	r0, 0x29	; 41
 554:	00 fe       	sbrs	r0, 0
 556:	fd cf       	rjmp	.-6      	; 0x552 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 558:	80 91 d8 00 	lds	r24, 0x00D8
 55c:	8f 7d       	andi	r24, 0xDF	; 223
 55e:	80 93 d8 00 	sts	0x00D8, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 562:	80 91 d7 00 	lds	r24, 0x00D7
 566:	80 68       	ori	r24, 0x80	; 128
 568:	80 93 d7 00 	sts	0x00D7, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
 56c:	10 92 24 02 	sts	0x0224, r1
	USB_ConfigurationNumber  = 0;
 570:	10 92 22 02 	sts	0x0222, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
 574:	10 92 21 02 	sts	0x0221, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
 578:	10 92 20 02 	sts	0x0220, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 57c:	80 91 e0 00 	lds	r24, 0x00E0
 580:	8b 7f       	andi	r24, 0xFB	; 251
 582:	80 93 e0 00 	sts	0x00E0, r24
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  USB_Device_SetLowSpeed();
	else
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUS);
 586:	80 91 d8 00 	lds	r24, 0x00D8
 58a:	81 60       	ori	r24, 0x01	; 1
 58c:	80 93 d8 00 	sts	0x00D8, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	60 e0       	ldi	r22, 0x00	; 0
 594:	42 e0       	ldi	r20, 0x02	; 2
 596:	67 df       	rcall	.-306    	; 0x466 <Endpoint_ConfigureEndpoint_Prv>

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
							   ENDPOINT_BANK_SINGLE);

	USB_INT_Clear(USB_INT_SUSPI);
 598:	80 91 e1 00 	lds	r24, 0x00E1
 59c:	8e 7f       	andi	r24, 0xFE	; 254
 59e:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPI);
 5a2:	80 91 e2 00 	lds	r24, 0x00E2
 5a6:	81 60       	ori	r24, 0x01	; 1
 5a8:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Enable(USB_INT_EORSTI);
 5ac:	80 91 e2 00 	lds	r24, 0x00E2
 5b0:	88 60       	ori	r24, 0x08	; 8
 5b2:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 5b6:	80 91 e0 00 	lds	r24, 0x00E0
 5ba:	8e 7f       	andi	r24, 0xFE	; 254
 5bc:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 5c0:	80 91 d8 00 	lds	r24, 0x00D8
 5c4:	80 61       	ori	r24, 0x10	; 16
 5c6:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 5ca:	08 95       	ret

000005cc <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 5cc:	e7 ed       	ldi	r30, 0xD7	; 215
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	80 81       	ld	r24, Z
 5d2:	81 60       	ori	r24, 0x01	; 1
 5d4:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	80 93 23 02 	sts	0x0223, r24

	USB_ResetInterface();
}
 5dc:	aa cf       	rjmp	.-172    	; 0x532 <USB_ResetInterface>

000005de <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 5de:	e8 ed       	ldi	r30, 0xD8	; 216
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	80 81       	ld	r24, Z
 5e4:	8c 7f       	andi	r24, 0xFC	; 252
 5e6:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 5e8:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 5ec:	08 95       	ret

000005ee <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
 5ee:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
 5f2:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 5f6:	08 95       	ret

000005f8 <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 5f8:	1f 92       	push	r1
 5fa:	0f 92       	push	r0
 5fc:	0f b6       	in	r0, 0x3f	; 63
 5fe:	0f 92       	push	r0
 600:	0b b6       	in	r0, 0x3b	; 59
 602:	0f 92       	push	r0
 604:	11 24       	eor	r1, r1
 606:	1f 93       	push	r17
 608:	2f 93       	push	r18
 60a:	3f 93       	push	r19
 60c:	4f 93       	push	r20
 60e:	5f 93       	push	r21
 610:	6f 93       	push	r22
 612:	7f 93       	push	r23
 614:	8f 93       	push	r24
 616:	9f 93       	push	r25
 618:	af 93       	push	r26
 61a:	bf 93       	push	r27
 61c:	ef 93       	push	r30
 61e:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 620:	e9 ee       	ldi	r30, 0xE9	; 233
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	10 81       	ld	r17, Z
 626:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 628:	10 82       	st	Z, r1
	uint8_t PrevSelectedEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);
 62a:	e0 ef       	ldi	r30, 0xF0	; 240
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	80 81       	ld	r24, Z
 630:	87 7f       	andi	r24, 0xF7	; 247
 632:	80 83       	st	Z, r24

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
 634:	78 94       	sei

	NONATOMIC_BLOCK(NONATOMIC_FORCEOFF)
	{
		USB_Device_ProcessControlRequest();
 636:	e9 d0       	rcall	.+466    	; 0x80a <USB_Device_ProcessControlRequest>
    (void)__s;
}

static __inline__ void __iCliParam(const uint8_t *__s)
{
    cli();
 638:	f8 94       	cli
 63a:	a9 ee       	ldi	r26, 0xE9	; 233
 63c:	b0 e0       	ldi	r27, 0x00	; 0
 63e:	1c 92       	st	X, r1
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
 640:	e0 ef       	ldi	r30, 0xF0	; 240
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	80 81       	ld	r24, Z
 646:	88 60       	ori	r24, 0x08	; 8
 648:	80 83       	st	Z, r24
 64a:	1c 93       	st	X, r17
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 64c:	ff 91       	pop	r31
 64e:	ef 91       	pop	r30
 650:	bf 91       	pop	r27
 652:	af 91       	pop	r26
 654:	9f 91       	pop	r25
 656:	8f 91       	pop	r24
 658:	7f 91       	pop	r23
 65a:	6f 91       	pop	r22
 65c:	5f 91       	pop	r21
 65e:	4f 91       	pop	r20
 660:	3f 91       	pop	r19
 662:	2f 91       	pop	r18
 664:	1f 91       	pop	r17
 666:	0f 90       	pop	r0
 668:	0b be       	out	0x3b, r0	; 59
 66a:	0f 90       	pop	r0
 66c:	0f be       	out	0x3f, r0	; 63
 66e:	0f 90       	pop	r0
 670:	1f 90       	pop	r1
 672:	18 95       	reti

00000674 <__vector_10>:
	UDINT   = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 674:	1f 92       	push	r1
 676:	0f 92       	push	r0
 678:	0f b6       	in	r0, 0x3f	; 63
 67a:	0f 92       	push	r0
 67c:	0b b6       	in	r0, 0x3b	; 59
 67e:	0f 92       	push	r0
 680:	11 24       	eor	r1, r1
 682:	2f 93       	push	r18
 684:	3f 93       	push	r19
 686:	4f 93       	push	r20
 688:	5f 93       	push	r21
 68a:	6f 93       	push	r22
 68c:	7f 93       	push	r23
 68e:	8f 93       	push	r24
 690:	9f 93       	push	r25
 692:	af 93       	push	r26
 694:	bf 93       	push	r27
 696:	ef 93       	push	r30
 698:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
 69a:	80 91 da 00 	lds	r24, 0x00DA
 69e:	80 ff       	sbrs	r24, 0
 6a0:	15 c0       	rjmp	.+42     	; 0x6cc <__vector_10+0x58>
 6a2:	80 91 d8 00 	lds	r24, 0x00D8
 6a6:	80 ff       	sbrs	r24, 0
 6a8:	11 c0       	rjmp	.+34     	; 0x6cc <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_VBUS);
 6aa:	80 91 da 00 	lds	r24, 0x00DA
 6ae:	8e 7f       	andi	r24, 0xFE	; 254
 6b0:	80 93 da 00 	sts	0x00DA, r24
				 *  \note This function is not available on some AVR models which do not support hardware VBUS monitoring.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 6b4:	80 91 d9 00 	lds	r24, 0x00D9

		if (USB_VBUS_GetStatus())
 6b8:	80 ff       	sbrs	r24, 0
 6ba:	05 c0       	rjmp	.+10     	; 0x6c6 <__vector_10+0x52>
		{
			USB_DeviceState = DEVICE_STATE_Powered;
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	80 93 24 02 	sts	0x0224, r24
			EVENT_USB_Device_Connect();
 6c2:	74 dd       	rcall	.-1304   	; 0x1ac <EVENT_USB_Device_Connect>
 6c4:	03 c0       	rjmp	.+6      	; 0x6cc <__vector_10+0x58>
		}
		else
		{
			USB_DeviceState = DEVICE_STATE_Unattached;
 6c6:	10 92 24 02 	sts	0x0224, r1
			EVENT_USB_Device_Disconnect();
 6ca:	75 dd       	rcall	.-1302   	; 0x1b6 <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 6cc:	80 91 e1 00 	lds	r24, 0x00E1
 6d0:	80 ff       	sbrs	r24, 0
 6d2:	1d c0       	rjmp	.+58     	; 0x70e <__vector_10+0x9a>
 6d4:	80 91 e2 00 	lds	r24, 0x00E2
 6d8:	80 ff       	sbrs	r24, 0
 6da:	19 c0       	rjmp	.+50     	; 0x70e <__vector_10+0x9a>
	{
		USB_INT_Clear(USB_INT_SUSPI);
 6dc:	80 91 e1 00 	lds	r24, 0x00E1
 6e0:	8e 7f       	andi	r24, 0xFE	; 254
 6e2:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPI);
 6e6:	80 91 e2 00 	lds	r24, 0x00E2
 6ea:	8e 7f       	andi	r24, 0xFE	; 254
 6ec:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
 6f0:	80 91 e2 00 	lds	r24, 0x00E2
 6f4:	80 61       	ori	r24, 0x10	; 16
 6f6:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 6fa:	80 91 d8 00 	lds	r24, 0x00D8
 6fe:	80 62       	ori	r24, 0x20	; 32
 700:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 704:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 706:	85 e0       	ldi	r24, 0x05	; 5
 708:	80 93 24 02 	sts	0x0224, r24
		EVENT_USB_Device_Suspend();
 70c:	ea d1       	rcall	.+980    	; 0xae2 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 70e:	80 91 e1 00 	lds	r24, 0x00E1
 712:	84 ff       	sbrs	r24, 4
 714:	2e c0       	rjmp	.+92     	; 0x772 <__vector_10+0xfe>
 716:	80 91 e2 00 	lds	r24, 0x00E2
 71a:	84 ff       	sbrs	r24, 4
 71c:	2a c0       	rjmp	.+84     	; 0x772 <__vector_10+0xfe>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 71e:	8c e0       	ldi	r24, 0x0C	; 12
 720:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 722:	89 b5       	in	r24, 0x29	; 41
 724:	82 60       	ori	r24, 0x02	; 2
 726:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 728:	09 b4       	in	r0, 0x29	; 41
 72a:	00 fe       	sbrs	r0, 0
 72c:	fd cf       	rjmp	.-6      	; 0x728 <__vector_10+0xb4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 72e:	80 91 d8 00 	lds	r24, 0x00D8
 732:	8f 7d       	andi	r24, 0xDF	; 223
 734:	80 93 d8 00 	sts	0x00D8, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUPI);
 738:	80 91 e1 00 	lds	r24, 0x00E1
 73c:	8f 7e       	andi	r24, 0xEF	; 239
 73e:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUPI);
 742:	80 91 e2 00 	lds	r24, 0x00E2
 746:	8f 7e       	andi	r24, 0xEF	; 239
 748:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPI);
 74c:	80 91 e2 00 	lds	r24, 0x00E2
 750:	81 60       	ori	r24, 0x01	; 1
 752:	80 93 e2 00 	sts	0x00E2, r24

		if (USB_ConfigurationNumber)
 756:	80 91 22 02 	lds	r24, 0x0222
 75a:	88 23       	and	r24, r24
 75c:	31 f4       	brne	.+12     	; 0x76a <__vector_10+0xf6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 75e:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 762:	87 fd       	sbrc	r24, 7
 764:	02 c0       	rjmp	.+4      	; 0x76a <__vector_10+0xf6>
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	01 c0       	rjmp	.+2      	; 0x76c <__vector_10+0xf8>
 76a:	84 e0       	ldi	r24, 0x04	; 4
 76c:	80 93 24 02 	sts	0x0224, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 770:	b8 d1       	rcall	.+880    	; 0xae2 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 772:	80 91 e1 00 	lds	r24, 0x00E1
 776:	83 ff       	sbrs	r24, 3
 778:	27 c0       	rjmp	.+78     	; 0x7c8 <__vector_10+0x154>
 77a:	80 91 e2 00 	lds	r24, 0x00E2
 77e:	83 ff       	sbrs	r24, 3
 780:	23 c0       	rjmp	.+70     	; 0x7c8 <__vector_10+0x154>
	{
		USB_INT_Clear(USB_INT_EORSTI);
 782:	80 91 e1 00 	lds	r24, 0x00E1
 786:	87 7f       	andi	r24, 0xF7	; 247
 788:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
 78c:	82 e0       	ldi	r24, 0x02	; 2
 78e:	80 93 24 02 	sts	0x0224, r24
		USB_ConfigurationNumber = 0;
 792:	10 92 22 02 	sts	0x0222, r1

		USB_INT_Clear(USB_INT_SUSPI);
 796:	80 91 e1 00 	lds	r24, 0x00E1
 79a:	8e 7f       	andi	r24, 0xFE	; 254
 79c:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPI);
 7a0:	80 91 e2 00 	lds	r24, 0x00E2
 7a4:	8e 7f       	andi	r24, 0xFE	; 254
 7a6:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
 7aa:	80 91 e2 00 	lds	r24, 0x00E2
 7ae:	80 61       	ori	r24, 0x10	; 16
 7b0:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 7b4:	80 e0       	ldi	r24, 0x00	; 0
 7b6:	60 e0       	ldi	r22, 0x00	; 0
 7b8:	42 e0       	ldi	r20, 0x02	; 2
 7ba:	55 de       	rcall	.-854    	; 0x466 <Endpoint_ConfigureEndpoint_Prv>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
		                           ENDPOINT_BANK_SINGLE);

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
 7bc:	80 91 f0 00 	lds	r24, 0x00F0
 7c0:	88 60       	ori	r24, 0x08	; 8
 7c2:	80 93 f0 00 	sts	0x00F0, r24
		#endif

		EVENT_USB_Device_Reset();
 7c6:	8d d1       	rcall	.+794    	; 0xae2 <USB_Event_Stub>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 7c8:	80 91 e1 00 	lds	r24, 0x00E1
 7cc:	82 ff       	sbrs	r24, 2
 7ce:	0a c0       	rjmp	.+20     	; 0x7e4 <__vector_10+0x170>
 7d0:	80 91 e2 00 	lds	r24, 0x00E2
 7d4:	82 ff       	sbrs	r24, 2
 7d6:	06 c0       	rjmp	.+12     	; 0x7e4 <__vector_10+0x170>
	{
		USB_INT_Clear(USB_INT_SOFI);
 7d8:	80 91 e1 00 	lds	r24, 0x00E1
 7dc:	8b 7f       	andi	r24, 0xFB	; 251
 7de:	80 93 e1 00 	sts	0x00E1, r24

		EVENT_USB_Device_StartOfFrame();
 7e2:	7f d1       	rcall	.+766    	; 0xae2 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 7e4:	ff 91       	pop	r31
 7e6:	ef 91       	pop	r30
 7e8:	bf 91       	pop	r27
 7ea:	af 91       	pop	r26
 7ec:	9f 91       	pop	r25
 7ee:	8f 91       	pop	r24
 7f0:	7f 91       	pop	r23
 7f2:	6f 91       	pop	r22
 7f4:	5f 91       	pop	r21
 7f6:	4f 91       	pop	r20
 7f8:	3f 91       	pop	r19
 7fa:	2f 91       	pop	r18
 7fc:	0f 90       	pop	r0
 7fe:	0b be       	out	0x3b, r0	; 59
 800:	0f 90       	pop	r0
 802:	0f be       	out	0x3f, r0	; 63
 804:	0f 90       	pop	r0
 806:	1f 90       	pop	r1
 808:	18 95       	reti

0000080a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 80a:	0f 93       	push	r16
 80c:	1f 93       	push	r17
 80e:	df 93       	push	r29
 810:	cf 93       	push	r28
 812:	cd b7       	in	r28, 0x3d	; 61
 814:	de b7       	in	r29, 0x3e	; 62
 816:	ac 97       	sbiw	r28, 0x2c	; 44
 818:	0f b6       	in	r0, 0x3f	; 63
 81a:	f8 94       	cli
 81c:	de bf       	out	0x3e, r29	; 62
 81e:	0f be       	out	0x3f, r0	; 63
 820:	cd bf       	out	0x3d, r28	; 61
 822:	e5 e2       	ldi	r30, 0x25	; 37
 824:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 826:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
 82a:	81 93       	st	Z+, r24

void USB_Device_ProcessControlRequest(void)
{
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 82c:	22 e0       	ldi	r18, 0x02	; 2
 82e:	ed 32       	cpi	r30, 0x2D	; 45
 830:	f2 07       	cpc	r31, r18
 832:	c9 f7       	brne	.-14     	; 0x826 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_Byte();

	EVENT_USB_Device_ControlRequest();
 834:	43 dd       	rcall	.-1402   	; 0x2bc <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 836:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 83a:	83 ff       	sbrs	r24, 3
 83c:	39 c1       	rjmp	.+626    	; 0xab0 <USB_Device_ProcessControlRequest+0x2a6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 83e:	80 91 25 02 	lds	r24, 0x0225

		switch (USB_ControlRequest.bRequest)
 842:	30 91 26 02 	lds	r19, 0x0226
 846:	35 30       	cpi	r19, 0x05	; 5
 848:	09 f4       	brne	.+2      	; 0x84c <USB_Device_ProcessControlRequest+0x42>
 84a:	87 c0       	rjmp	.+270    	; 0x95a <USB_Device_ProcessControlRequest+0x150>
 84c:	36 30       	cpi	r19, 0x06	; 6
 84e:	40 f4       	brcc	.+16     	; 0x860 <USB_Device_ProcessControlRequest+0x56>
 850:	31 30       	cpi	r19, 0x01	; 1
 852:	c9 f1       	breq	.+114    	; 0x8c6 <USB_Device_ProcessControlRequest+0xbc>
 854:	31 30       	cpi	r19, 0x01	; 1
 856:	70 f0       	brcs	.+28     	; 0x874 <USB_Device_ProcessControlRequest+0x6a>
 858:	33 30       	cpi	r19, 0x03	; 3
 85a:	09 f0       	breq	.+2      	; 0x85e <USB_Device_ProcessControlRequest+0x54>
 85c:	29 c1       	rjmp	.+594    	; 0xab0 <USB_Device_ProcessControlRequest+0x2a6>
 85e:	33 c0       	rjmp	.+102    	; 0x8c6 <USB_Device_ProcessControlRequest+0xbc>
 860:	38 30       	cpi	r19, 0x08	; 8
 862:	09 f4       	brne	.+2      	; 0x866 <USB_Device_ProcessControlRequest+0x5c>
 864:	f7 c0       	rjmp	.+494    	; 0xa54 <USB_Device_ProcessControlRequest+0x24a>
 866:	39 30       	cpi	r19, 0x09	; 9
 868:	09 f4       	brne	.+2      	; 0x86c <USB_Device_ProcessControlRequest+0x62>
 86a:	06 c1       	rjmp	.+524    	; 0xa78 <USB_Device_ProcessControlRequest+0x26e>
 86c:	36 30       	cpi	r19, 0x06	; 6
 86e:	09 f0       	breq	.+2      	; 0x872 <USB_Device_ProcessControlRequest+0x68>
 870:	1f c1       	rjmp	.+574    	; 0xab0 <USB_Device_ProcessControlRequest+0x2a6>
 872:	99 c0       	rjmp	.+306    	; 0x9a6 <USB_Device_ProcessControlRequest+0x19c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 874:	80 38       	cpi	r24, 0x80	; 128
 876:	21 f0       	breq	.+8      	; 0x880 <USB_Device_ProcessControlRequest+0x76>
 878:	82 38       	cpi	r24, 0x82	; 130
 87a:	09 f0       	breq	.+2      	; 0x87e <USB_Device_ProcessControlRequest+0x74>
 87c:	19 c1       	rjmp	.+562    	; 0xab0 <USB_Device_ProcessControlRequest+0x2a6>
 87e:	08 c0       	rjmp	.+16     	; 0x890 <USB_Device_ProcessControlRequest+0x86>
 880:	90 91 20 02 	lds	r25, 0x0220
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
 884:	80 91 21 02 	lds	r24, 0x0221
 888:	88 23       	and	r24, r24
 88a:	99 f0       	breq	.+38     	; 0x8b2 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 88c:	92 60       	ori	r25, 0x02	; 2
 88e:	11 c0       	rjmp	.+34     	; 0x8b2 <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 890:	80 91 29 02 	lds	r24, 0x0229
 894:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 896:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 89a:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	25 e0       	ldi	r18, 0x05	; 5
 8a2:	96 95       	lsr	r25
 8a4:	87 95       	ror	r24
 8a6:	2a 95       	dec	r18
 8a8:	e1 f7       	brne	.-8      	; 0x8a2 <USB_Device_ProcessControlRequest+0x98>
 8aa:	98 2f       	mov	r25, r24
 8ac:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 8ae:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 8b2:	80 91 e8 00 	lds	r24, 0x00E8
 8b6:	87 7f       	andi	r24, 0xF7	; 247
 8b8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
 8bc:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Word >> 8);
 8c0:	10 92 f1 00 	sts	0x00F1, r1
 8c4:	d2 c0       	rjmp	.+420    	; 0xa6a <USB_Device_ProcessControlRequest+0x260>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 8c6:	88 23       	and	r24, r24
 8c8:	19 f0       	breq	.+6      	; 0x8d0 <USB_Device_ProcessControlRequest+0xc6>
 8ca:	82 30       	cpi	r24, 0x02	; 2
 8cc:	09 f0       	breq	.+2      	; 0x8d0 <USB_Device_ProcessControlRequest+0xc6>
 8ce:	f0 c0       	rjmp	.+480    	; 0xab0 <USB_Device_ProcessControlRequest+0x2a6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	8f 71       	andi	r24, 0x1F	; 31
 8d4:	90 70       	andi	r25, 0x00	; 0
 8d6:	00 97       	sbiw	r24, 0x00	; 0
 8d8:	21 f0       	breq	.+8      	; 0x8e2 <USB_Device_ProcessControlRequest+0xd8>
 8da:	02 97       	sbiw	r24, 0x02	; 2
 8dc:	09 f0       	breq	.+2      	; 0x8e0 <USB_Device_ProcessControlRequest+0xd6>
 8de:	e8 c0       	rjmp	.+464    	; 0xab0 <USB_Device_ProcessControlRequest+0x2a6>
 8e0:	0c c0       	rjmp	.+24     	; 0x8fa <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 8e2:	80 91 27 02 	lds	r24, 0x0227
 8e6:	81 30       	cpi	r24, 0x01	; 1
 8e8:	09 f0       	breq	.+2      	; 0x8ec <USB_Device_ProcessControlRequest+0xe2>
 8ea:	e2 c0       	rjmp	.+452    	; 0xab0 <USB_Device_ProcessControlRequest+0x2a6>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 8ec:	10 92 21 02 	sts	0x0221, r1
 8f0:	33 30       	cpi	r19, 0x03	; 3
 8f2:	69 f5       	brne	.+90     	; 0x94e <USB_Device_ProcessControlRequest+0x144>
 8f4:	80 93 21 02 	sts	0x0221, r24
 8f8:	2a c0       	rjmp	.+84     	; 0x94e <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 8fa:	80 91 27 02 	lds	r24, 0x0227
 8fe:	88 23       	and	r24, r24
 900:	31 f5       	brne	.+76     	; 0x94e <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 902:	20 91 29 02 	lds	r18, 0x0229
 906:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 908:	09 f4       	brne	.+2      	; 0x90c <USB_Device_ProcessControlRequest+0x102>
 90a:	d2 c0       	rjmp	.+420    	; 0xab0 <USB_Device_ProcessControlRequest+0x2a6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 90c:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 910:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 914:	80 ff       	sbrs	r24, 0
 916:	1b c0       	rjmp	.+54     	; 0x94e <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 918:	33 30       	cpi	r19, 0x03	; 3
 91a:	21 f4       	brne	.+8      	; 0x924 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 91c:	80 91 eb 00 	lds	r24, 0x00EB
 920:	80 62       	ori	r24, 0x20	; 32
 922:	13 c0       	rjmp	.+38     	; 0x94a <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 924:	80 91 eb 00 	lds	r24, 0x00EB
 928:	80 61       	ori	r24, 0x10	; 16
 92a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 92e:	81 e0       	ldi	r24, 0x01	; 1
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	02 c0       	rjmp	.+4      	; 0x938 <USB_Device_ProcessControlRequest+0x12e>
 934:	88 0f       	add	r24, r24
 936:	99 1f       	adc	r25, r25
 938:	2a 95       	dec	r18
 93a:	e2 f7       	brpl	.-8      	; 0x934 <USB_Device_ProcessControlRequest+0x12a>
 93c:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 940:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 944:	80 91 eb 00 	lds	r24, 0x00EB
 948:	88 60       	ori	r24, 0x08	; 8
 94a:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 94e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 952:	80 91 e8 00 	lds	r24, 0x00E8
 956:	87 7f       	andi	r24, 0xF7	; 247
 958:	8b c0       	rjmp	.+278    	; 0xa70 <USB_Device_ProcessControlRequest+0x266>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 95a:	88 23       	and	r24, r24
 95c:	09 f0       	breq	.+2      	; 0x960 <USB_Device_ProcessControlRequest+0x156>
 95e:	a8 c0       	rjmp	.+336    	; 0xab0 <USB_Device_ProcessControlRequest+0x2a6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 960:	10 91 27 02 	lds	r17, 0x0227
 964:	1f 77       	andi	r17, 0x7F	; 127

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 966:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 968:	f8 94       	cli
 96a:	80 91 e8 00 	lds	r24, 0x00E8
 96e:	87 7f       	andi	r24, 0xF7	; 247
 970:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearSETUP();

		Endpoint_ClearStatusStage();
 974:	8b dd       	rcall	.-1258   	; 0x48c <Endpoint_ClearStatusStage>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 976:	80 91 e8 00 	lds	r24, 0x00E8

		while (!(Endpoint_IsINReady()));
 97a:	80 ff       	sbrs	r24, 0
 97c:	fc cf       	rjmp	.-8      	; 0x976 <USB_Device_ProcessControlRequest+0x16c>

		USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 97e:	11 23       	and	r17, r17
 980:	11 f4       	brne	.+4      	; 0x986 <USB_Device_ProcessControlRequest+0x17c>
 982:	82 e0       	ldi	r24, 0x02	; 2
 984:	01 c0       	rjmp	.+2      	; 0x988 <USB_Device_ProcessControlRequest+0x17e>
 986:	83 e0       	ldi	r24, 0x03	; 3
 988:	80 93 24 02 	sts	0x0224, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
 98c:	80 91 e3 00 	lds	r24, 0x00E3
 990:	80 78       	andi	r24, 0x80	; 128
 992:	18 2b       	or	r17, r24
 994:	10 93 e3 00 	sts	0x00E3, r17
				UDADDR |= (1 << ADDEN);
 998:	80 91 e3 00 	lds	r24, 0x00E3
 99c:	80 68       	ori	r24, 0x80	; 128
 99e:	80 93 e3 00 	sts	0x00E3, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 9a2:	0f bf       	out	0x3f, r16	; 63
    __asm__ volatile ("" ::: "memory");
 9a4:	85 c0       	rjmp	.+266    	; 0xab0 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9a6:	80 58       	subi	r24, 0x80	; 128
 9a8:	82 30       	cpi	r24, 0x02	; 2
 9aa:	08 f0       	brcs	.+2      	; 0x9ae <USB_Device_ProcessControlRequest+0x1a4>
 9ac:	81 c0       	rjmp	.+258    	; 0xab0 <USB_Device_ProcessControlRequest+0x2a6>
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 9ae:	80 91 27 02 	lds	r24, 0x0227
 9b2:	90 91 28 02 	lds	r25, 0x0228
 9b6:	23 e0       	ldi	r18, 0x03	; 3
 9b8:	8c 3d       	cpi	r24, 0xDC	; 220
 9ba:	92 07       	cpc	r25, r18
 9bc:	99 f5       	brne	.+102    	; 0xa24 <USB_Device_ProcessControlRequest+0x21a>
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 9be:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 9c0:	f8 94       	cli
 9c2:	de 01       	movw	r26, r28
 9c4:	15 96       	adiw	r26, 0x05	; 5
 9c6:	6e e0       	ldi	r22, 0x0E	; 14
 9c8:	40 e0       	ldi	r20, 0x00	; 0
 9ca:	50 e0       	ldi	r21, 0x00	; 0
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 9cc:	11 e2       	ldi	r17, 0x21	; 33
 9ce:	e6 2f       	mov	r30, r22
 9d0:	f0 e0       	ldi	r31, 0x00	; 0
 9d2:	10 93 57 00 	sts	0x0057, r17
 9d6:	84 91       	lpm	r24, Z+

			if (SerialCharNum & 0x01)
 9d8:	40 ff       	sbrs	r20, 0
 9da:	03 c0       	rjmp	.+6      	; 0x9e2 <USB_Device_ProcessControlRequest+0x1d8>
			{
				SerialByte >>= 4;
 9dc:	82 95       	swap	r24
 9de:	8f 70       	andi	r24, 0x0F	; 15
				SigReadAddress++;
 9e0:	6f 5f       	subi	r22, 0xFF	; 255
			}

			SerialByte &= 0x0F;
 9e2:	8f 70       	andi	r24, 0x0F	; 15
 9e4:	28 2f       	mov	r18, r24
 9e6:	30 e0       	ldi	r19, 0x00	; 0

			SignatureDescriptor.UnicodeString[SerialCharNum] = (SerialByte >= 10) ?
 9e8:	8a 30       	cpi	r24, 0x0A	; 10
 9ea:	18 f0       	brcs	.+6      	; 0x9f2 <USB_Device_ProcessControlRequest+0x1e8>
 9ec:	c9 01       	movw	r24, r18
 9ee:	c7 96       	adiw	r24, 0x37	; 55
 9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <USB_Device_ProcessControlRequest+0x1ec>
 9f2:	c9 01       	movw	r24, r18
 9f4:	c0 96       	adiw	r24, 0x30	; 48
 9f6:	8d 93       	st	X+, r24
 9f8:	9d 93       	st	X+, r25
 9fa:	4f 5f       	subi	r20, 0xFF	; 255
 9fc:	5f 4f       	sbci	r21, 0xFF	; 255

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
 9fe:	44 31       	cpi	r20, 0x14	; 20
 a00:	51 05       	cpc	r21, r1
 a02:	29 f7       	brne	.-54     	; 0x9ce <USB_Device_ProcessControlRequest+0x1c4>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 a04:	7f bf       	out	0x3f, r23	; 63
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
 a06:	8a e2       	ldi	r24, 0x2A	; 42
 a08:	8b 83       	std	Y+3, r24	; 0x03
	{
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 a0a:	83 e0       	ldi	r24, 0x03	; 3
 a0c:	8c 83       	std	Y+4, r24	; 0x04
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a0e:	80 91 e8 00 	lds	r24, 0x00E8
 a12:	87 7f       	andi	r24, 0xF7	; 247
 a14:	80 93 e8 00 	sts	0x00E8, r24
		}
	}

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 a18:	ce 01       	movw	r24, r28
 a1a:	03 96       	adiw	r24, 0x03	; 3
 a1c:	6a e2       	ldi	r22, 0x2A	; 42
 a1e:	70 e0       	ldi	r23, 0x00	; 0
 a20:	61 d0       	rcall	.+194    	; 0xae4 <Endpoint_Write_Control_Stream_LE>
 a22:	12 c0       	rjmp	.+36     	; 0xa48 <USB_Device_ProcessControlRequest+0x23e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 a24:	60 91 29 02 	lds	r22, 0x0229
 a28:	ae 01       	movw	r20, r28
 a2a:	4f 5f       	subi	r20, 0xFF	; 255
 a2c:	5f 4f       	sbci	r21, 0xFF	; 255
 a2e:	ed dc       	rcall	.-1574   	; 0x40a <CALLBACK_USB_GetDescriptor>
 a30:	bc 01       	movw	r22, r24
 a32:	00 97       	sbiw	r24, 0x00	; 0
 a34:	09 f4       	brne	.+2      	; 0xa38 <USB_Device_ProcessControlRequest+0x22e>
 a36:	3c c0       	rjmp	.+120    	; 0xab0 <USB_Device_ProcessControlRequest+0x2a6>
 a38:	80 91 e8 00 	lds	r24, 0x00E8
 a3c:	87 7f       	andi	r24, 0xF7	; 247
 a3e:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 a42:	89 81       	ldd	r24, Y+1	; 0x01
 a44:	9a 81       	ldd	r25, Y+2	; 0x02
 a46:	ac d0       	rcall	.+344    	; 0xba0 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 a48:	80 91 e8 00 	lds	r24, 0x00E8
 a4c:	8b 77       	andi	r24, 0x7B	; 123
 a4e:	80 93 e8 00 	sts	0x00E8, r24
 a52:	2e c0       	rjmp	.+92     	; 0xab0 <USB_Device_ProcessControlRequest+0x2a6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 a54:	80 38       	cpi	r24, 0x80	; 128
 a56:	61 f5       	brne	.+88     	; 0xab0 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a58:	80 91 e8 00 	lds	r24, 0x00E8
 a5c:	87 7f       	andi	r24, 0xF7	; 247
 a5e:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
 a62:	80 91 22 02 	lds	r24, 0x0222
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 a66:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a6a:	80 91 e8 00 	lds	r24, 0x00E8
 a6e:	8e 77       	andi	r24, 0x7E	; 126
 a70:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 a74:	0b dd       	rcall	.-1514   	; 0x48c <Endpoint_ClearStatusStage>
 a76:	1c c0       	rjmp	.+56     	; 0xab0 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a78:	88 23       	and	r24, r24
 a7a:	d1 f4       	brne	.+52     	; 0xab0 <USB_Device_ProcessControlRequest+0x2a6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 a7c:	90 91 27 02 	lds	r25, 0x0227
 a80:	92 30       	cpi	r25, 0x02	; 2
 a82:	b0 f4       	brcc	.+44     	; 0xab0 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a84:	80 91 e8 00 	lds	r24, 0x00E8
 a88:	87 7f       	andi	r24, 0xF7	; 247
 a8a:	80 93 e8 00 	sts	0x00E8, r24
	}
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 a8e:	90 93 22 02 	sts	0x0222, r25

	Endpoint_ClearStatusStage();
 a92:	fc dc       	rcall	.-1544   	; 0x48c <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
 a94:	80 91 22 02 	lds	r24, 0x0222
 a98:	88 23       	and	r24, r24
 a9a:	31 f4       	brne	.+12     	; 0xaa8 <USB_Device_ProcessControlRequest+0x29e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 a9c:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 aa0:	87 fd       	sbrc	r24, 7
 aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <USB_Device_ProcessControlRequest+0x29e>
 aa4:	81 e0       	ldi	r24, 0x01	; 1
 aa6:	01 c0       	rjmp	.+2      	; 0xaaa <USB_Device_ProcessControlRequest+0x2a0>
 aa8:	84 e0       	ldi	r24, 0x04	; 4
 aaa:	80 93 24 02 	sts	0x0224, r24

	EVENT_USB_Device_ConfigurationChanged();
 aae:	09 dc       	rcall	.-2030   	; 0x2c2 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ab0:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 ab4:	83 ff       	sbrs	r24, 3
 ab6:	0a c0       	rjmp	.+20     	; 0xacc <USB_Device_ProcessControlRequest+0x2c2>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 ab8:	80 91 eb 00 	lds	r24, 0x00EB
 abc:	80 62       	ori	r24, 0x20	; 32
 abe:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ac2:	80 91 e8 00 	lds	r24, 0x00E8
 ac6:	87 7f       	andi	r24, 0xF7	; 247
 ac8:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 acc:	ac 96       	adiw	r28, 0x2c	; 44
 ace:	0f b6       	in	r0, 0x3f	; 63
 ad0:	f8 94       	cli
 ad2:	de bf       	out	0x3e, r29	; 62
 ad4:	0f be       	out	0x3f, r0	; 63
 ad6:	cd bf       	out	0x3d, r28	; 61
 ad8:	cf 91       	pop	r28
 ada:	df 91       	pop	r29
 adc:	1f 91       	pop	r17
 ade:	0f 91       	pop	r16
 ae0:	08 95       	ret

00000ae2 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 ae2:	08 95       	ret

00000ae4 <Endpoint_Write_Control_Stream_LE>:
 ae4:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 ae6:	40 91 2b 02 	lds	r20, 0x022B
 aea:	50 91 2c 02 	lds	r21, 0x022C
 aee:	46 17       	cp	r20, r22
 af0:	57 07       	cpc	r21, r23
 af2:	18 f4       	brcc	.+6      	; 0xafa <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 af4:	f9 01       	movw	r30, r18
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	3d c0       	rjmp	.+122    	; 0xb74 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 afa:	61 15       	cp	r22, r1
 afc:	71 05       	cpc	r23, r1
 afe:	11 f0       	breq	.+4      	; 0xb04 <Endpoint_Write_Control_Stream_LE+0x20>
 b00:	ab 01       	movw	r20, r22
 b02:	f8 cf       	rjmp	.-16     	; 0xaf4 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b04:	80 91 e8 00 	lds	r24, 0x00E8
 b08:	8e 77       	andi	r24, 0x7E	; 126
 b0a:	80 93 e8 00 	sts	0x00E8, r24
 b0e:	40 e0       	ldi	r20, 0x00	; 0
 b10:	50 e0       	ldi	r21, 0x00	; 0
 b12:	f0 cf       	rjmp	.-32     	; 0xaf4 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 b14:	80 91 24 02 	lds	r24, 0x0224

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 b18:	88 23       	and	r24, r24
 b1a:	f1 f1       	breq	.+124    	; 0xb98 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 b1c:	85 30       	cpi	r24, 0x05	; 5
 b1e:	f1 f1       	breq	.+124    	; 0xb9c <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b20:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 b24:	83 ff       	sbrs	r24, 3
 b26:	02 c0       	rjmp	.+4      	; 0xb2c <Endpoint_Write_Control_Stream_LE+0x48>
 b28:	81 e0       	ldi	r24, 0x01	; 1
 b2a:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 b2c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 b30:	82 fd       	sbrc	r24, 2
 b32:	2c c0       	rjmp	.+88     	; 0xb8c <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b34:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 b38:	80 ff       	sbrs	r24, 0
 b3a:	1c c0       	rjmp	.+56     	; 0xb74 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 b3c:	20 91 f2 00 	lds	r18, 0x00F2
 b40:	30 91 f3 00 	lds	r19, 0x00F3
 b44:	07 c0       	rjmp	.+14     	; 0xb54 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 b46:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 b48:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
 b4c:	41 50       	subi	r20, 0x01	; 1
 b4e:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 b50:	2f 5f       	subi	r18, 0xFF	; 255
 b52:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 b54:	41 15       	cp	r20, r1
 b56:	51 05       	cpc	r21, r1
 b58:	19 f0       	breq	.+6      	; 0xb60 <Endpoint_Write_Control_Stream_LE+0x7c>
 b5a:	28 30       	cpi	r18, 0x08	; 8
 b5c:	31 05       	cpc	r19, r1
 b5e:	98 f3       	brcs	.-26     	; 0xb46 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 b60:	90 e0       	ldi	r25, 0x00	; 0
 b62:	28 30       	cpi	r18, 0x08	; 8
 b64:	31 05       	cpc	r19, r1
 b66:	09 f4       	brne	.+2      	; 0xb6a <Endpoint_Write_Control_Stream_LE+0x86>
 b68:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b6a:	80 91 e8 00 	lds	r24, 0x00E8
 b6e:	8e 77       	andi	r24, 0x7E	; 126
 b70:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 b74:	41 15       	cp	r20, r1
 b76:	51 05       	cpc	r21, r1
 b78:	69 f6       	brne	.-102    	; 0xb14 <Endpoint_Write_Control_Stream_LE+0x30>
 b7a:	99 23       	and	r25, r25
 b7c:	59 f6       	brne	.-106    	; 0xb14 <Endpoint_Write_Control_Stream_LE+0x30>
 b7e:	06 c0       	rjmp	.+12     	; 0xb8c <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 b80:	80 91 24 02 	lds	r24, 0x0224

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 b84:	88 23       	and	r24, r24
 b86:	41 f0       	breq	.+16     	; 0xb98 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 b88:	85 30       	cpi	r24, 0x05	; 5
 b8a:	41 f0       	breq	.+16     	; 0xb9c <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 b8c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 b90:	82 ff       	sbrs	r24, 2
 b92:	f6 cf       	rjmp	.-20     	; 0xb80 <Endpoint_Write_Control_Stream_LE+0x9c>
 b94:	80 e0       	ldi	r24, 0x00	; 0
 b96:	08 95       	ret
 b98:	82 e0       	ldi	r24, 0x02	; 2
 b9a:	08 95       	ret
 b9c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 b9e:	08 95       	ret

00000ba0 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
 ba0:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 ba2:	40 91 2b 02 	lds	r20, 0x022B
 ba6:	50 91 2c 02 	lds	r21, 0x022C
 baa:	46 17       	cp	r20, r22
 bac:	57 07       	cpc	r21, r23
 bae:	10 f4       	brcc	.+4      	; 0xbb4 <Endpoint_Write_Control_PStream_LE+0x14>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 bb0:	60 e0       	ldi	r22, 0x00	; 0
 bb2:	40 c0       	rjmp	.+128    	; 0xc34 <Endpoint_Write_Control_PStream_LE+0x94>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 bb4:	61 15       	cp	r22, r1
 bb6:	71 05       	cpc	r23, r1
 bb8:	11 f0       	breq	.+4      	; 0xbbe <Endpoint_Write_Control_PStream_LE+0x1e>
 bba:	ab 01       	movw	r20, r22
 bbc:	f9 cf       	rjmp	.-14     	; 0xbb0 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bbe:	80 91 e8 00 	lds	r24, 0x00E8
 bc2:	8e 77       	andi	r24, 0x7E	; 126
 bc4:	80 93 e8 00 	sts	0x00E8, r24
 bc8:	40 e0       	ldi	r20, 0x00	; 0
 bca:	50 e0       	ldi	r21, 0x00	; 0
 bcc:	f1 cf       	rjmp	.-30     	; 0xbb0 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 bce:	80 91 24 02 	lds	r24, 0x0224

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 bd2:	88 23       	and	r24, r24
 bd4:	09 f4       	brne	.+2      	; 0xbd8 <Endpoint_Write_Control_PStream_LE+0x38>
 bd6:	40 c0       	rjmp	.+128    	; 0xc58 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 bd8:	85 30       	cpi	r24, 0x05	; 5
 bda:	09 f4       	brne	.+2      	; 0xbde <Endpoint_Write_Control_PStream_LE+0x3e>
 bdc:	3f c0       	rjmp	.+126    	; 0xc5c <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 bde:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 be2:	83 ff       	sbrs	r24, 3
 be4:	02 c0       	rjmp	.+4      	; 0xbea <Endpoint_Write_Control_PStream_LE+0x4a>
 be6:	81 e0       	ldi	r24, 0x01	; 1
 be8:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 bea:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 bee:	82 fd       	sbrc	r24, 2
 bf0:	2d c0       	rjmp	.+90     	; 0xc4c <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 bf2:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 bf6:	80 ff       	sbrs	r24, 0
 bf8:	1d c0       	rjmp	.+58     	; 0xc34 <Endpoint_Write_Control_PStream_LE+0x94>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 bfa:	80 91 f2 00 	lds	r24, 0x00F2
 bfe:	90 91 f3 00 	lds	r25, 0x00F3
 c02:	09 c0       	rjmp	.+18     	; 0xc16 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 c04:	f9 01       	movw	r30, r18
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 c06:	2f 5f       	subi	r18, 0xFF	; 255
 c08:	3f 4f       	sbci	r19, 0xFF	; 255
 c0a:	e4 91       	lpm	r30, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 c0c:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
 c10:	41 50       	subi	r20, 0x01	; 1
 c12:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 c14:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 c16:	41 15       	cp	r20, r1
 c18:	51 05       	cpc	r21, r1
 c1a:	19 f0       	breq	.+6      	; 0xc22 <Endpoint_Write_Control_PStream_LE+0x82>
 c1c:	88 30       	cpi	r24, 0x08	; 8
 c1e:	91 05       	cpc	r25, r1
 c20:	88 f3       	brcs	.-30     	; 0xc04 <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 c22:	60 e0       	ldi	r22, 0x00	; 0
 c24:	08 97       	sbiw	r24, 0x08	; 8
 c26:	09 f4       	brne	.+2      	; 0xc2a <Endpoint_Write_Control_PStream_LE+0x8a>
 c28:	61 e0       	ldi	r22, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c2a:	80 91 e8 00 	lds	r24, 0x00E8
 c2e:	8e 77       	andi	r24, 0x7E	; 126
 c30:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 c34:	41 15       	cp	r20, r1
 c36:	51 05       	cpc	r21, r1
 c38:	51 f6       	brne	.-108    	; 0xbce <Endpoint_Write_Control_PStream_LE+0x2e>
 c3a:	66 23       	and	r22, r22
 c3c:	41 f6       	brne	.-112    	; 0xbce <Endpoint_Write_Control_PStream_LE+0x2e>
 c3e:	06 c0       	rjmp	.+12     	; 0xc4c <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 c40:	80 91 24 02 	lds	r24, 0x0224

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 c44:	88 23       	and	r24, r24
 c46:	41 f0       	breq	.+16     	; 0xc58 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 c48:	85 30       	cpi	r24, 0x05	; 5
 c4a:	41 f0       	breq	.+16     	; 0xc5c <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 c4c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 c50:	82 ff       	sbrs	r24, 2
 c52:	f6 cf       	rjmp	.-20     	; 0xc40 <Endpoint_Write_Control_PStream_LE+0xa0>
 c54:	80 e0       	ldi	r24, 0x00	; 0
 c56:	08 95       	ret
 c58:	82 e0       	ldi	r24, 0x02	; 2
 c5a:	08 95       	ret
 c5c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 c5e:	08 95       	ret

00000c60 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
 c60:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
 c62:	61 15       	cp	r22, r1
 c64:	71 05       	cpc	r23, r1
 c66:	29 f4       	brne	.+10     	; 0xc72 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c68:	80 91 e8 00 	lds	r24, 0x00E8
 c6c:	8b 77       	andi	r24, 0x7B	; 123
 c6e:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 c72:	f9 01       	movw	r30, r18
 c74:	22 c0       	rjmp	.+68     	; 0xcba <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 c76:	80 91 24 02 	lds	r24, 0x0224

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 c7a:	88 23       	and	r24, r24
 c7c:	71 f1       	breq	.+92     	; 0xcda <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 c7e:	85 30       	cpi	r24, 0x05	; 5
 c80:	71 f1       	breq	.+92     	; 0xcde <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c82:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 c86:	83 ff       	sbrs	r24, 3
 c88:	02 c0       	rjmp	.+4      	; 0xc8e <Endpoint_Read_Control_Stream_LE+0x2e>
 c8a:	81 e0       	ldi	r24, 0x01	; 1
 c8c:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 c8e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 c92:	82 ff       	sbrs	r24, 2
 c94:	f0 cf       	rjmp	.-32     	; 0xc76 <Endpoint_Read_Control_Stream_LE+0x16>
 c96:	06 c0       	rjmp	.+12     	; 0xca4 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 c98:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 c9c:	81 93       	st	Z+, r24
				Length--;
 c9e:	61 50       	subi	r22, 0x01	; 1
 ca0:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 ca2:	31 f0       	breq	.+12     	; 0xcb0 <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 ca4:	80 91 f2 00 	lds	r24, 0x00F2
 ca8:	90 91 f3 00 	lds	r25, 0x00F3
 cac:	89 2b       	or	r24, r25
 cae:	a1 f7       	brne	.-24     	; 0xc98 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 cb0:	80 91 e8 00 	lds	r24, 0x00E8
 cb4:	8b 77       	andi	r24, 0x7B	; 123
 cb6:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
 cba:	61 15       	cp	r22, r1
 cbc:	71 05       	cpc	r23, r1
 cbe:	d9 f6       	brne	.-74     	; 0xc76 <Endpoint_Read_Control_Stream_LE+0x16>
 cc0:	06 c0       	rjmp	.+12     	; 0xcce <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 cc2:	80 91 24 02 	lds	r24, 0x0224

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 cc6:	88 23       	and	r24, r24
 cc8:	41 f0       	breq	.+16     	; 0xcda <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 cca:	85 30       	cpi	r24, 0x05	; 5
 ccc:	41 f0       	breq	.+16     	; 0xcde <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 cce:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
 cd2:	80 ff       	sbrs	r24, 0
 cd4:	f6 cf       	rjmp	.-20     	; 0xcc2 <Endpoint_Read_Control_Stream_LE+0x62>
 cd6:	80 e0       	ldi	r24, 0x00	; 0
 cd8:	08 95       	ret
 cda:	82 e0       	ldi	r24, 0x02	; 2
 cdc:	08 95       	ret
 cde:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 ce0:	08 95       	ret

00000ce2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 ce2:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 ce4:	80 91 24 02 	lds	r24, 0x0224
 ce8:	88 23       	and	r24, r24
 cea:	61 f0       	breq	.+24     	; 0xd04 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 cec:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 cf0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cf4:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 cf8:	83 ff       	sbrs	r24, 3
 cfa:	01 c0       	rjmp	.+2      	; 0xcfe <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 cfc:	86 dd       	rcall	.-1268   	; 0x80a <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 cfe:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 d00:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 d04:	1f 91       	pop	r17
 d06:	08 95       	ret

00000d08 <CDC_Device_Event_Stub>:
#include "CDC.h"

void CDC_Device_Event_Stub(void)
{

}
 d08:	08 95       	ret

00000d0a <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 d0a:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 d0c:	80 91 24 02 	lds	r24, 0x0224
 d10:	84 30       	cpi	r24, 0x04	; 4
 d12:	41 f5       	brne	.+80     	; 0xd64 <CDC_Device_ReceiveByte+0x5a>
 d14:	87 85       	ldd	r24, Z+15	; 0x0f
 d16:	90 89       	ldd	r25, Z+16	; 0x10
 d18:	a1 89       	ldd	r26, Z+17	; 0x11
 d1a:	b2 89       	ldd	r27, Z+18	; 0x12
 d1c:	00 97       	sbiw	r24, 0x00	; 0
 d1e:	a1 05       	cpc	r26, r1
 d20:	b1 05       	cpc	r27, r1
 d22:	01 f1       	breq	.+64     	; 0xd64 <CDC_Device_ReceiveByte+0x5a>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
 d24:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 d26:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 d2a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
 d2e:	82 ff       	sbrs	r24, 2
 d30:	19 c0       	rjmp	.+50     	; 0xd64 <CDC_Device_ReceiveByte+0x5a>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 d32:	80 91 f2 00 	lds	r24, 0x00F2
 d36:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
 d3a:	89 2b       	or	r24, r25
 d3c:	19 f4       	brne	.+6      	; 0xd44 <CDC_Device_ReceiveByte+0x3a>
 d3e:	2f ef       	ldi	r18, 0xFF	; 255
 d40:	3f ef       	ldi	r19, 0xFF	; 255
 d42:	04 c0       	rjmp	.+8      	; 0xd4c <CDC_Device_ReceiveByte+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 d44:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_Byte();
 d48:	28 2f       	mov	r18, r24
 d4a:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 d4c:	80 91 f2 00 	lds	r24, 0x00F2
 d50:	90 91 f3 00 	lds	r25, 0x00F3

		if (!(Endpoint_BytesInEndpoint()))
 d54:	89 2b       	or	r24, r25
 d56:	41 f4       	brne	.+16     	; 0xd68 <CDC_Device_ReceiveByte+0x5e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d58:	80 91 e8 00 	lds	r24, 0x00E8
 d5c:	8b 77       	andi	r24, 0x7B	; 123
 d5e:	80 93 e8 00 	sts	0x00E8, r24
 d62:	02 c0       	rjmp	.+4      	; 0xd68 <CDC_Device_ReceiveByte+0x5e>
 d64:	2f ef       	ldi	r18, 0xFF	; 255
 d66:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 d68:	c9 01       	movw	r24, r18
 d6a:	08 95       	ret

00000d6c <CDC_Device_Flush>:
	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 d6c:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 d6e:	80 91 24 02 	lds	r24, 0x0224
 d72:	84 30       	cpi	r24, 0x04	; 4
 d74:	21 f5       	brne	.+72     	; 0xdbe <CDC_Device_Flush+0x52>
 d76:	87 85       	ldd	r24, Z+15	; 0x0f
 d78:	90 89       	ldd	r25, Z+16	; 0x10
 d7a:	a1 89       	ldd	r26, Z+17	; 0x11
 d7c:	b2 89       	ldd	r27, Z+18	; 0x12
 d7e:	00 97       	sbiw	r24, 0x00	; 0
 d80:	a1 05       	cpc	r26, r1
 d82:	b1 05       	cpc	r27, r1
 d84:	e1 f0       	breq	.+56     	; 0xdbe <CDC_Device_Flush+0x52>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 d86:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 d88:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 d8c:	80 91 f2 00 	lds	r24, 0x00F2
 d90:	90 91 f3 00 	lds	r25, 0x00F3

	if (!(Endpoint_BytesInEndpoint()))
 d94:	89 2b       	or	r24, r25
 d96:	a9 f0       	breq	.+42     	; 0xdc2 <CDC_Device_Flush+0x56>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d98:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d9c:	80 91 e8 00 	lds	r24, 0x00E8
 da0:	8e 77       	andi	r24, 0x7E	; 126
 da2:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
 da6:	95 fd       	sbrc	r25, 5
 da8:	0c c0       	rjmp	.+24     	; 0xdc2 <CDC_Device_Flush+0x56>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 daa:	91 db       	rcall	.-2270   	; 0x4ce <Endpoint_WaitUntilReady>
 dac:	98 2f       	mov	r25, r24
 dae:	88 23       	and	r24, r24
 db0:	49 f4       	brne	.+18     	; 0xdc4 <CDC_Device_Flush+0x58>
 db2:	80 91 e8 00 	lds	r24, 0x00E8
 db6:	8e 77       	andi	r24, 0x7E	; 126
 db8:	80 93 e8 00 	sts	0x00E8, r24
 dbc:	03 c0       	rjmp	.+6      	; 0xdc4 <CDC_Device_Flush+0x58>
 dbe:	92 e0       	ldi	r25, 0x02	; 2
 dc0:	01 c0       	rjmp	.+2      	; 0xdc4 <CDC_Device_Flush+0x58>
 dc2:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
 dc4:	89 2f       	mov	r24, r25
 dc6:	08 95       	ret

00000dc8 <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 dc8:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 dca:	80 91 24 02 	lds	r24, 0x0224
 dce:	84 30       	cpi	r24, 0x04	; 4
 dd0:	51 f4       	brne	.+20     	; 0xde6 <CDC_Device_USBTask+0x1e>
 dd2:	87 85       	ldd	r24, Z+15	; 0x0f
 dd4:	90 89       	ldd	r25, Z+16	; 0x10
 dd6:	a1 89       	ldd	r26, Z+17	; 0x11
 dd8:	b2 89       	ldd	r27, Z+18	; 0x12
 dda:	00 97       	sbiw	r24, 0x00	; 0
 ddc:	a1 05       	cpc	r26, r1
 dde:	b1 05       	cpc	r27, r1
 de0:	11 f0       	breq	.+4      	; 0xde6 <CDC_Device_USBTask+0x1e>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
 de2:	cf 01       	movw	r24, r30
 de4:	c3 cf       	rjmp	.-122    	; 0xd6c <CDC_Device_Flush>
 de6:	08 95       	ret

00000de8 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Data, Length, NO_STREAM_CALLBACK);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
 de8:	1f 93       	push	r17
 dea:	fc 01       	movw	r30, r24
 dec:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 dee:	80 91 24 02 	lds	r24, 0x0224
 df2:	84 30       	cpi	r24, 0x04	; 4
 df4:	d9 f4       	brne	.+54     	; 0xe2c <CDC_Device_SendByte+0x44>
 df6:	87 85       	ldd	r24, Z+15	; 0x0f
 df8:	90 89       	ldd	r25, Z+16	; 0x10
 dfa:	a1 89       	ldd	r26, Z+17	; 0x11
 dfc:	b2 89       	ldd	r27, Z+18	; 0x12
 dfe:	00 97       	sbiw	r24, 0x00	; 0
 e00:	a1 05       	cpc	r26, r1
 e02:	b1 05       	cpc	r27, r1
 e04:	99 f0       	breq	.+38     	; 0xe2c <CDC_Device_SendByte+0x44>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 e06:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 e08:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 e0c:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
 e10:	85 fd       	sbrc	r24, 5
 e12:	08 c0       	rjmp	.+16     	; 0xe24 <CDC_Device_SendByte+0x3c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e14:	80 91 e8 00 	lds	r24, 0x00E8
 e18:	8e 77       	andi	r24, 0x7E	; 126
 e1a:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 e1e:	57 db       	rcall	.-2386   	; 0x4ce <Endpoint_WaitUntilReady>
 e20:	88 23       	and	r24, r24
 e22:	29 f4       	brne	.+10     	; 0xe2e <CDC_Device_SendByte+0x46>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 e24:	10 93 f1 00 	sts	0x00F1, r17
 e28:	80 e0       	ldi	r24, 0x00	; 0
 e2a:	01 c0       	rjmp	.+2      	; 0xe2e <CDC_Device_SendByte+0x46>
		  return ErrorCode;
	}

	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
 e2c:	82 e0       	ldi	r24, 0x02	; 2
}
 e2e:	1f 91       	pop	r17
 e30:	08 95       	ret

00000e32 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 e32:	1f 93       	push	r17
 e34:	cf 93       	push	r28
 e36:	df 93       	push	r29
 e38:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 e3a:	0d 96       	adiw	r24, 0x0d	; 13
 e3c:	fc 01       	movw	r30, r24
 e3e:	89 e0       	ldi	r24, 0x09	; 9
 e40:	df 01       	movw	r26, r30
 e42:	1d 92       	st	X+, r1
 e44:	8a 95       	dec	r24
 e46:	e9 f7       	brne	.-6      	; 0xe42 <CDC_Device_ConfigureEndpoints+0x10>
 e48:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
 e4a:	89 81       	ldd	r24, Y+1	; 0x01
 e4c:	18 17       	cp	r17, r24
 e4e:	29 f4       	brne	.+10     	; 0xe5a <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
 e50:	ea 81       	ldd	r30, Y+2	; 0x02
 e52:	fb 81       	ldd	r31, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
 e54:	8c 81       	ldd	r24, Y+4	; 0x04
 e56:	62 e0       	ldi	r22, 0x02	; 2
 e58:	10 c0       	rjmp	.+32     	; 0xe7a <CDC_Device_ConfigureEndpoints+0x48>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
 e5a:	8d 81       	ldd	r24, Y+5	; 0x05
 e5c:	18 17       	cp	r17, r24
 e5e:	31 f4       	brne	.+12     	; 0xe6c <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
 e60:	ee 81       	ldd	r30, Y+6	; 0x06
 e62:	ff 81       	ldd	r31, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
 e64:	88 85       	ldd	r24, Y+8	; 0x08
 e66:	62 e0       	ldi	r22, 0x02	; 2
 e68:	30 e0       	ldi	r19, 0x00	; 0
 e6a:	08 c0       	rjmp	.+16     	; 0xe7c <CDC_Device_ConfigureEndpoints+0x4a>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
 e6c:	89 85       	ldd	r24, Y+9	; 0x09
 e6e:	18 17       	cp	r17, r24
 e70:	09 f5       	brne	.+66     	; 0xeb4 <CDC_Device_ConfigureEndpoints+0x82>
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
 e72:	ea 85       	ldd	r30, Y+10	; 0x0a
 e74:	fb 85       	ldd	r31, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
 e76:	8c 85       	ldd	r24, Y+12	; 0x0c
 e78:	63 e0       	ldi	r22, 0x03	; 3
 e7a:	31 e0       	ldi	r19, 0x01	; 1
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
 e7c:	88 23       	and	r24, r24
 e7e:	11 f4       	brne	.+4      	; 0xe84 <CDC_Device_ConfigureEndpoints+0x52>
 e80:	40 e0       	ldi	r20, 0x00	; 0
 e82:	01 c0       	rjmp	.+2      	; 0xe86 <CDC_Device_ConfigureEndpoints+0x54>
 e84:	44 e0       	ldi	r20, 0x04	; 4
 e86:	20 e0       	ldi	r18, 0x00	; 0
 e88:	88 e0       	ldi	r24, 0x08	; 8
 e8a:	90 e0       	ldi	r25, 0x00	; 0
 e8c:	03 c0       	rjmp	.+6      	; 0xe94 <CDC_Device_ConfigureEndpoints+0x62>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 e8e:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
 e90:	88 0f       	add	r24, r24
 e92:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 e94:	8e 17       	cp	r24, r30
 e96:	9f 07       	cpc	r25, r31
 e98:	d0 f3       	brcs	.-12     	; 0xe8e <CDC_Device_ConfigureEndpoints+0x5c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 e9a:	62 95       	swap	r22
 e9c:	66 0f       	add	r22, r22
 e9e:	66 0f       	add	r22, r22
 ea0:	60 7c       	andi	r22, 0xC0	; 192
 ea2:	63 2b       	or	r22, r19
 ea4:	42 60       	ori	r20, 0x02	; 2
 ea6:	22 95       	swap	r18
 ea8:	20 7f       	andi	r18, 0xF0	; 240
 eaa:	42 2b       	or	r20, r18
 eac:	81 2f       	mov	r24, r17
 eae:	db da       	rcall	.-2634   	; 0x466 <Endpoint_ConfigureEndpoint_Prv>
 eb0:	88 23       	and	r24, r24
 eb2:	21 f0       	breq	.+8      	; 0xebc <CDC_Device_ConfigureEndpoints+0x8a>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
 eb4:	1f 5f       	subi	r17, 0xFF	; 255
 eb6:	17 30       	cpi	r17, 0x07	; 7
 eb8:	41 f6       	brne	.-112    	; 0xe4a <CDC_Device_ConfigureEndpoints+0x18>
 eba:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
 ebc:	df 91       	pop	r29
 ebe:	cf 91       	pop	r28
 ec0:	1f 91       	pop	r17
 ec2:	08 95       	ret

00000ec4 <CDC_Device_ProcessControlRequest>:
{

}

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 ec4:	cf 93       	push	r28
 ec6:	df 93       	push	r29
 ec8:	ec 01       	movw	r28, r24
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 eca:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 ece:	83 ff       	sbrs	r24, 3
 ed0:	63 c0       	rjmp	.+198    	; 0xf98 <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 ed2:	88 81       	ld	r24, Y
 ed4:	90 e0       	ldi	r25, 0x00	; 0
 ed6:	20 91 29 02 	lds	r18, 0x0229
 eda:	30 91 2a 02 	lds	r19, 0x022A
 ede:	28 17       	cp	r18, r24
 ee0:	39 07       	cpc	r19, r25
 ee2:	09 f0       	breq	.+2      	; 0xee6 <CDC_Device_ProcessControlRequest+0x22>
 ee4:	59 c0       	rjmp	.+178    	; 0xf98 <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	switch (USB_ControlRequest.bRequest)
 ee6:	80 91 26 02 	lds	r24, 0x0226
 eea:	81 32       	cpi	r24, 0x21	; 33
 eec:	61 f0       	breq	.+24     	; 0xf06 <CDC_Device_ProcessControlRequest+0x42>
 eee:	82 32       	cpi	r24, 0x22	; 34
 ef0:	20 f4       	brcc	.+8      	; 0xefa <CDC_Device_ProcessControlRequest+0x36>
 ef2:	80 32       	cpi	r24, 0x20	; 32
 ef4:	09 f0       	breq	.+2      	; 0xef8 <CDC_Device_ProcessControlRequest+0x34>
 ef6:	50 c0       	rjmp	.+160    	; 0xf98 <CDC_Device_ProcessControlRequest+0xd4>
 ef8:	1b c0       	rjmp	.+54     	; 0xf30 <CDC_Device_ProcessControlRequest+0x6c>
 efa:	82 32       	cpi	r24, 0x22	; 34
 efc:	79 f1       	breq	.+94     	; 0xf5c <CDC_Device_ProcessControlRequest+0x98>
 efe:	83 32       	cpi	r24, 0x23	; 35
 f00:	09 f0       	breq	.+2      	; 0xf04 <CDC_Device_ProcessControlRequest+0x40>
 f02:	4a c0       	rjmp	.+148    	; 0xf98 <CDC_Device_ProcessControlRequest+0xd4>
 f04:	3b c0       	rjmp	.+118    	; 0xf7c <CDC_Device_ProcessControlRequest+0xb8>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 f06:	80 91 25 02 	lds	r24, 0x0225
 f0a:	81 3a       	cpi	r24, 0xA1	; 161
 f0c:	09 f0       	breq	.+2      	; 0xf10 <CDC_Device_ProcessControlRequest+0x4c>
 f0e:	44 c0       	rjmp	.+136    	; 0xf98 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 f10:	80 91 e8 00 	lds	r24, 0x00E8
 f14:	87 7f       	andi	r24, 0xF7	; 247
 f16:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
 f1a:	ce 01       	movw	r24, r28
 f1c:	0f 96       	adiw	r24, 0x0f	; 15
 f1e:	67 e0       	ldi	r22, 0x07	; 7
 f20:	70 e0       	ldi	r23, 0x00	; 0
 f22:	e0 dd       	rcall	.-1088   	; 0xae4 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 f24:	80 91 e8 00 	lds	r24, 0x00E8
 f28:	8b 77       	andi	r24, 0x7B	; 123
 f2a:	80 93 e8 00 	sts	0x00E8, r24
 f2e:	34 c0       	rjmp	.+104    	; 0xf98 <CDC_Device_ProcessControlRequest+0xd4>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 f30:	80 91 25 02 	lds	r24, 0x0225
 f34:	81 32       	cpi	r24, 0x21	; 33
 f36:	81 f5       	brne	.+96     	; 0xf98 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 f38:	80 91 e8 00 	lds	r24, 0x00E8
 f3c:	87 7f       	andi	r24, 0xF7	; 247
 f3e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
 f42:	ce 01       	movw	r24, r28
 f44:	0f 96       	adiw	r24, 0x0f	; 15
 f46:	67 e0       	ldi	r22, 0x07	; 7
 f48:	70 e0       	ldi	r23, 0x00	; 0
 f4a:	8a de       	rcall	.-748    	; 0xc60 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 f4c:	80 91 e8 00 	lds	r24, 0x00E8
 f50:	8e 77       	andi	r24, 0x7E	; 126
 f52:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 f56:	ce 01       	movw	r24, r28
 f58:	6f d9       	rcall	.-3362   	; 0x238 <EVENT_CDC_Device_LineEncodingChanged>
 f5a:	1e c0       	rjmp	.+60     	; 0xf98 <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 f5c:	80 91 25 02 	lds	r24, 0x0225
 f60:	81 32       	cpi	r24, 0x21	; 33
 f62:	d1 f4       	brne	.+52     	; 0xf98 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 f64:	80 91 e8 00 	lds	r24, 0x00E8
 f68:	87 7f       	andi	r24, 0xF7	; 247
 f6a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 f6e:	8e da       	rcall	.-2788   	; 0x48c <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 f70:	80 91 27 02 	lds	r24, 0x0227
 f74:	8d 87       	std	Y+13, r24	; 0x0d

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 f76:	ce 01       	movw	r24, r28
 f78:	c7 de       	rcall	.-626    	; 0xd08 <CDC_Device_Event_Stub>
 f7a:	0e c0       	rjmp	.+28     	; 0xf98 <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 f7c:	80 91 25 02 	lds	r24, 0x0225
 f80:	81 32       	cpi	r24, 0x21	; 33
 f82:	51 f4       	brne	.+20     	; 0xf98 <CDC_Device_ProcessControlRequest+0xd4>
 f84:	80 91 e8 00 	lds	r24, 0x00E8
 f88:	87 7f       	andi	r24, 0xF7	; 247
 f8a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 f8e:	7e da       	rcall	.-2820   	; 0x48c <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 f90:	ce 01       	movw	r24, r28
 f92:	60 91 27 02 	lds	r22, 0x0227
 f96:	b8 de       	rcall	.-656    	; 0xd08 <CDC_Device_Event_Stub>
			}

			break;
	}
}
 f98:	df 91       	pop	r29
 f9a:	cf 91       	pop	r28
 f9c:	08 95       	ret

00000f9e <__udivmodsi4>:
 f9e:	a1 e2       	ldi	r26, 0x21	; 33
 fa0:	1a 2e       	mov	r1, r26
 fa2:	aa 1b       	sub	r26, r26
 fa4:	bb 1b       	sub	r27, r27
 fa6:	fd 01       	movw	r30, r26
 fa8:	0d c0       	rjmp	.+26     	; 0xfc4 <__udivmodsi4_ep>

00000faa <__udivmodsi4_loop>:
 faa:	aa 1f       	adc	r26, r26
 fac:	bb 1f       	adc	r27, r27
 fae:	ee 1f       	adc	r30, r30
 fb0:	ff 1f       	adc	r31, r31
 fb2:	a2 17       	cp	r26, r18
 fb4:	b3 07       	cpc	r27, r19
 fb6:	e4 07       	cpc	r30, r20
 fb8:	f5 07       	cpc	r31, r21
 fba:	20 f0       	brcs	.+8      	; 0xfc4 <__udivmodsi4_ep>
 fbc:	a2 1b       	sub	r26, r18
 fbe:	b3 0b       	sbc	r27, r19
 fc0:	e4 0b       	sbc	r30, r20
 fc2:	f5 0b       	sbc	r31, r21

00000fc4 <__udivmodsi4_ep>:
 fc4:	66 1f       	adc	r22, r22
 fc6:	77 1f       	adc	r23, r23
 fc8:	88 1f       	adc	r24, r24
 fca:	99 1f       	adc	r25, r25
 fcc:	1a 94       	dec	r1
 fce:	69 f7       	brne	.-38     	; 0xfaa <__udivmodsi4_loop>
 fd0:	60 95       	com	r22
 fd2:	70 95       	com	r23
 fd4:	80 95       	com	r24
 fd6:	90 95       	com	r25
 fd8:	9b 01       	movw	r18, r22
 fda:	ac 01       	movw	r20, r24
 fdc:	bd 01       	movw	r22, r26
 fde:	cf 01       	movw	r24, r30
 fe0:	08 95       	ret

00000fe2 <_exit>:
 fe2:	f8 94       	cli

00000fe4 <__stop_program>:
 fe4:	ff cf       	rjmp	.-2      	; 0xfe4 <__stop_program>
