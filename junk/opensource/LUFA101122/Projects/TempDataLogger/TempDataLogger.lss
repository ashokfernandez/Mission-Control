
TempDataLogger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c8  00800100  0000510c  000051c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000510c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026b  008001c8  008001c8  00005288  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  00005288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000010d4  00000000  00000000  0000528c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000003d0  00000000  00000000  00006360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000006a8  00000000  00000000  00006730  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000fdb  00000000  00000000  00006dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000beaf  00000000  00000000  00007db3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002ead  00000000  00000000  00013c62  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00009237  00000000  00000000  00016b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000009f0  00000000  00000000  0001fd48  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003ad0  00000000  00000000  00020738  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006452  00000000  00000000  00024208  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ad8  00000000  00000000  0002a65a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
       0:	20 c1       	rjmp	.+576    	; 0x242 <__ctors_end>

	return Endpoint_IsConfigured();
}

void Endpoint_ClearEndpoints(void)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	3c c1       	rjmp	.+632    	; 0x27e <__bad_interrupt>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
       8:	3a c1       	rjmp	.+628    	; 0x27e <__bad_interrupt>
       a:	00 00       	nop
       c:	38 c1       	rjmp	.+624    	; 0x27e <__bad_interrupt>
       e:	00 00       	nop
      10:	36 c1       	rjmp	.+620    	; 0x27e <__bad_interrupt>
      12:	00 00       	nop
      14:	34 c1       	rjmp	.+616    	; 0x27e <__bad_interrupt>
      16:	00 00       	nop
      18:	32 c1       	rjmp	.+612    	; 0x27e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	30 c1       	rjmp	.+608    	; 0x27e <__bad_interrupt>
      1e:	00 00       	nop
      20:	2e c1       	rjmp	.+604    	; 0x27e <__bad_interrupt>
      22:	00 00       	nop
      24:	2c c1       	rjmp	.+600    	; 0x27e <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 1c 1d 	jmp	0x3a38	; 0x3a38 <__vector_10>
      2c:	0c 94 de 1c 	jmp	0x39bc	; 0x39bc <__vector_11>
      30:	26 c1       	rjmp	.+588    	; 0x27e <__bad_interrupt>
      32:	00 00       	nop
      34:	24 c1       	rjmp	.+584    	; 0x27e <__bad_interrupt>
      36:	00 00       	nop
      38:	22 c1       	rjmp	.+580    	; 0x27e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	20 c1       	rjmp	.+576    	; 0x27e <__bad_interrupt>
      3e:	00 00       	nop
      40:	1e c1       	rjmp	.+572    	; 0x27e <__bad_interrupt>
      42:	00 00       	nop
      44:	82 c2       	rjmp	.+1284   	; 0x54a <__vector_17>
      46:	00 00       	nop
      48:	1a c1       	rjmp	.+564    	; 0x27e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	18 c1       	rjmp	.+560    	; 0x27e <__bad_interrupt>
      4e:	00 00       	nop
      50:	16 c1       	rjmp	.+556    	; 0x27e <__bad_interrupt>
      52:	00 00       	nop
      54:	14 c1       	rjmp	.+552    	; 0x27e <__bad_interrupt>
      56:	00 00       	nop
      58:	12 c1       	rjmp	.+548    	; 0x27e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	10 c1       	rjmp	.+544    	; 0x27e <__bad_interrupt>
      5e:	00 00       	nop
      60:	0e c1       	rjmp	.+540    	; 0x27e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c c1       	rjmp	.+536    	; 0x27e <__bad_interrupt>
      66:	00 00       	nop
      68:	0a c1       	rjmp	.+532    	; 0x27e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	08 c1       	rjmp	.+528    	; 0x27e <__bad_interrupt>
      6e:	00 00       	nop
      70:	06 c1       	rjmp	.+524    	; 0x27e <__bad_interrupt>
      72:	00 00       	nop
      74:	04 c1       	rjmp	.+520    	; 0x27e <__bad_interrupt>
      76:	00 00       	nop
      78:	02 c1       	rjmp	.+516    	; 0x27e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	00 c1       	rjmp	.+512    	; 0x27e <__bad_interrupt>
      7e:	00 00       	nop
      80:	fe c0       	rjmp	.+508    	; 0x27e <__bad_interrupt>
      82:	00 00       	nop
      84:	fc c0       	rjmp	.+504    	; 0x27e <__bad_interrupt>
      86:	00 00       	nop
      88:	fa c0       	rjmp	.+500    	; 0x27e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f8 c0       	rjmp	.+496    	; 0x27e <__bad_interrupt>
      8e:	00 00       	nop
      90:	f6 c0       	rjmp	.+492    	; 0x27e <__bad_interrupt>
      92:	00 00       	nop
      94:	f4 c0       	rjmp	.+488    	; 0x27e <__bad_interrupt>
      96:	00 00       	nop

00000098 <GenericReport>:
      98:	06 9c ff 09 01 a1 01 09 02 75 08 95 07 15 80 25     .........u.....%
      a8:	7f 81 02 09 03 75 08 95 07 15 00 25 ff 91 02 c0     .....u.....%....

000000b8 <DeviceDescriptor>:
      b8:	12 01 10 01 00 00 00 08 eb 03 63 20 01 00 01 02     ..........c ....
      c8:	dc 01                                               ..

000000ca <ConfigurationDescriptor>:
      ca:	09 02 39 00 02 01 00 c0 32 09 04 00 00 02 08 06     ..9.....2.......
      da:	50 00 07 05 83 02 40 00 01 07 05 04 02 40 00 01     P.....@......@..
      ea:	09 04 01 00 01 03 00 00 00 09 21 11 01 00 01 22     ..........!...."
      fa:	20 00 07 05 81 03 10 00 01                           ........

00000103 <LanguageString>:
     103:	04 03 09 04                                         ....

00000107 <ManufacturerString>:
     107:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     117:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000121 <ProductString>:
     121:	2e 03 54 00 65 00 6d 00 70 00 65 00 72 00 61 00     ..T.e.m.p.e.r.a.
     131:	74 00 75 00 72 00 65 00 20 00 44 00 61 00 74 00     t.u.r.e. .D.a.t.
     141:	61 00 6c 00 6f 00 67 00 67 00 65 00 72 00 00 00     a.l.o.g.g.e.r...

00000151 <Temperature_Lookup>:
     151:	b4 03 b0 03 ab 03 a6 03 a0 03 9a 03 94 03 8e 03     ................
     161:	88 03 81 03 7a 03 73 03 6b 03 63 03 5b 03 53 03     ....z.s.k.c.[.S.
     171:	4a 03 41 03 38 03 2f 03 25 03 1b 03 11 03 07 03     J.A.8./.%.......
     181:	fc 02 f1 02 e6 02 db 02 d0 02 c4 02 b8 02 ac 02     ................
     191:	a0 02 94 02 88 02 7c 02 6f 02 63 02 56 02 4a 02     ......|.o.c.V.J.
     1a1:	3d 02 31 02 25 02 18 02 0c 02 00 02 f3 01 e7 01     =.1.%...........
     1b1:	db 01 cf 01 c4 01 b8 01 ac 01 a1 01 96 01 8b 01     ................
     1c1:	80 01 76 01 6b 01 61 01 57 01 4d 01 44 01 3a 01     ..v.k.a.W.M.D.:.
     1d1:	31 01 28 01 1f 01 17 01 0f 01 06 01 fe 00 f7 00     1.(.............
     1e1:	ef 00 e8 00 e1 00 da 00 d3 00 cd 00 c7 00 c0 00     ................
     1f1:	ba 00 b5 00 af 00 aa 00 a4 00 9f 00 9a 00 96 00     ................
     201:	91 00 8c 00 88 00 84 00 80 00 7c 00 78 00 74 00     ..........|.x.t.
     211:	71 00 6d 00 6a 00 67 00 64 00 61 00 5e 00 5b 00     q.m.j.g.d.a.^.[.
     221:	58 00 55 00 53 00 50 00 4e 00 4c 00 49 00 47 00     X.U.S.P.N.L.I.G.
     231:	45 00 43 00 41 00 3f 00 3d 00 3c 00 3a 00 38 00     E.C.A.?.=.<.:.8.
     241:	00                                                  .

00000242 <__ctors_end>:
     242:	11 24       	eor	r1, r1
     244:	1f be       	out	0x3f, r1	; 63
     246:	cf ef       	ldi	r28, 0xFF	; 255
     248:	d0 e2       	ldi	r29, 0x20	; 32
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	cd bf       	out	0x3d, r28	; 61

0000024e <__do_copy_data>:
     24e:	11 e0       	ldi	r17, 0x01	; 1
     250:	a0 e0       	ldi	r26, 0x00	; 0
     252:	b1 e0       	ldi	r27, 0x01	; 1
     254:	ec e0       	ldi	r30, 0x0C	; 12
     256:	f1 e5       	ldi	r31, 0x51	; 81
     258:	00 e0       	ldi	r16, 0x00	; 0
     25a:	0b bf       	out	0x3b, r16	; 59
     25c:	02 c0       	rjmp	.+4      	; 0x262 <__do_copy_data+0x14>
     25e:	07 90       	elpm	r0, Z+
     260:	0d 92       	st	X+, r0
     262:	a8 3c       	cpi	r26, 0xC8	; 200
     264:	b1 07       	cpc	r27, r17
     266:	d9 f7       	brne	.-10     	; 0x25e <__do_copy_data+0x10>

00000268 <__do_clear_bss>:
     268:	14 e0       	ldi	r17, 0x04	; 4
     26a:	a8 ec       	ldi	r26, 0xC8	; 200
     26c:	b1 e0       	ldi	r27, 0x01	; 1
     26e:	01 c0       	rjmp	.+2      	; 0x272 <.do_clear_bss_start>

00000270 <.do_clear_bss_loop>:
     270:	1d 92       	st	X+, r1

00000272 <.do_clear_bss_start>:
     272:	a3 33       	cpi	r26, 0x33	; 51
     274:	b1 07       	cpc	r27, r17
     276:	e1 f7       	brne	.-8      	; 0x270 <.do_clear_bss_loop>
     278:	42 d1       	rcall	.+644    	; 0x4fe <main>
     27a:	0c 94 84 28 	jmp	0x5108	; 0x5108 <_exit>

0000027e <__bad_interrupt>:
     27e:	c0 ce       	rjmp	.-640    	; 0x0 <__vectors>

00000280 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
	Device_Report_t* ReportParams = (Device_Report_t*)ReportData;
     284:	89 01       	movw	r16, r18

	DS1307_SetDate(ReportParams->Day,  ReportParams->Month,  ReportParams->Year);
     286:	f9 01       	movw	r30, r18
     288:	80 81       	ld	r24, Z
     28a:	61 81       	ldd	r22, Z+1	; 0x01
     28c:	42 81       	ldd	r20, Z+2	; 0x02
     28e:	0e 94 82 0b 	call	0x1704	; 0x1704 <DS1307_SetDate>
	DS1307_SetTime(ReportParams->Hour, ReportParams->Minute, ReportParams->Second);
     292:	f8 01       	movw	r30, r16
     294:	83 81       	ldd	r24, Z+3	; 0x03
     296:	64 81       	ldd	r22, Z+4	; 0x04
     298:	45 81       	ldd	r20, Z+5	; 0x05
     29a:	0e 94 06 0b 	call	0x160c	; 0x160c <DS1307_SetTime>

	/* If the logging interval has changed from its current value, write it to EEPROM */
	if (LoggingInterval500MS_SRAM != ReportParams->LogInterval500MS)
     29e:	f8 01       	movw	r30, r16
     2a0:	66 81       	ldd	r22, Z+6	; 0x06
     2a2:	80 91 ee 01 	lds	r24, 0x01EE
     2a6:	86 17       	cp	r24, r22
     2a8:	31 f0       	breq	.+12     	; 0x2b6 <CALLBACK_HID_Device_ProcessHIDReport+0x36>
	{
		LoggingInterval500MS_SRAM = ReportParams->LogInterval500MS;
     2aa:	60 93 ee 01 	sts	0x01EE, r22
		eeprom_update_byte(&LoggingInterval500MS_EEPROM, LoggingInterval500MS_SRAM);
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <__eeupd_byte_usb1287>
	}
}
     2b6:	1f 91       	pop	r17
     2b8:	0f 91       	pop	r16
     2ba:	08 95       	ret

000002bc <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     2bc:	ef 92       	push	r14
     2be:	ff 92       	push	r15
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	78 01       	movw	r14, r16
	Device_Report_t* ReportParams = (Device_Report_t*)ReportData;
     2c6:	89 01       	movw	r16, r18

	DS1307_GetDate(&ReportParams->Day,  &ReportParams->Month,  &ReportParams->Year);
     2c8:	b9 01       	movw	r22, r18
     2ca:	6f 5f       	subi	r22, 0xFF	; 255
     2cc:	7f 4f       	sbci	r23, 0xFF	; 255
     2ce:	a9 01       	movw	r20, r18
     2d0:	4e 5f       	subi	r20, 0xFE	; 254
     2d2:	5f 4f       	sbci	r21, 0xFF	; 255
     2d4:	c9 01       	movw	r24, r18
     2d6:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <DS1307_GetDate>
	DS1307_GetTime(&ReportParams->Hour, &ReportParams->Minute, &ReportParams->Second);
     2da:	b8 01       	movw	r22, r16
     2dc:	6c 5f       	subi	r22, 0xFC	; 252
     2de:	7f 4f       	sbci	r23, 0xFF	; 255
     2e0:	a8 01       	movw	r20, r16
     2e2:	4b 5f       	subi	r20, 0xFB	; 251
     2e4:	5f 4f       	sbci	r21, 0xFF	; 255
     2e6:	c8 01       	movw	r24, r16
     2e8:	03 96       	adiw	r24, 0x03	; 3
     2ea:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <DS1307_GetTime>

	ReportParams->LogInterval500MS = LoggingInterval500MS_SRAM;
     2ee:	80 91 ee 01 	lds	r24, 0x01EE
     2f2:	f8 01       	movw	r30, r16
     2f4:	86 83       	std	Z+6, r24	; 0x06

	*ReportSize = sizeof(Device_Report_t);
     2f6:	87 e0       	ldi	r24, 0x07	; 7
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	f7 01       	movw	r30, r14
     2fc:	91 83       	std	Z+1, r25	; 0x01
     2fe:	80 83       	st	Z, r24
	return true;
}
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	ff 90       	pop	r15
     308:	ef 90       	pop	r14
     30a:	08 95       	ret

0000030c <CALLBACK_MS_Device_SCSICommandReceived>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     30c:	2b b1       	in	r18, 0x0b	; 11
     30e:	2f 70       	andi	r18, 0x0F	; 15
     310:	20 62       	ori	r18, 0x20	; 32
     312:	2b b9       	out	0x0b, r18	; 11
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     314:	92 d7       	rcall	.+3876   	; 0x123a <SCSI_DecodeSCSICommand>
     316:	9b b1       	in	r25, 0x0b	; 11
     318:	9f 70       	andi	r25, 0x0F	; 15
     31a:	90 66       	ori	r25, 0x60	; 96
     31c:	9b b9       	out	0x0b, r25	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);

	return CommandSuccess;
}
     31e:	08 95       	ret

00000320 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     320:	80 e4       	ldi	r24, 0x40	; 64
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <MS_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
     328:	87 e7       	ldi	r24, 0x77	; 119
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	0c 94 0f 22 	jmp	0x441e	; 0x441e <HID_Device_ProcessControlRequest>

00000330 <EVENT_USB_Device_ConfigurationChanged>:
	OpenLogFile();
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
	bool ConfigSuccess = true;

	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     334:	80 e4       	ldi	r24, 0x40	; 64
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	0e 94 2f 24 	call	0x485e	; 0x485e <MS_Device_ConfigureEndpoints>
     33c:	08 2f       	mov	r16, r24
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
     33e:	87 e7       	ldi	r24, 0x77	; 119
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	0e 94 d7 21 	call	0x43ae	; 0x43ae <HID_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     346:	10 e0       	ldi	r17, 0x00	; 0
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	08 23       	and	r16, r24
     34c:	19 23       	and	r17, r25
     34e:	00 ff       	sbrs	r16, 0
     350:	02 c0       	rjmp	.+4      	; 0x356 <EVENT_USB_Device_ConfigurationChanged+0x26>
     352:	90 e6       	ldi	r25, 0x60	; 96
     354:	01 c0       	rjmp	.+2      	; 0x358 <EVENT_USB_Device_ConfigurationChanged+0x28>
     356:	90 e9       	ldi	r25, 0x90	; 144
     358:	8b b1       	in	r24, 0x0b	; 11
     35a:	8f 70       	andi	r24, 0x0F	; 15
     35c:	98 2b       	or	r25, r24
     35e:	9b b9       	out	0x0b, r25	; 11
}
     360:	1f 91       	pop	r17
     362:	0f 91       	pop	r16
     364:	08 95       	ret

00000366 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     366:	84 b7       	in	r24, 0x34	; 52
     368:	87 7f       	andi	r24, 0xF7	; 247
     36a:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     36c:	88 e1       	ldi	r24, 0x18	; 24
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	f8 94       	cli
     372:	80 93 60 00 	sts	0x0060, r24
     376:	10 92 60 00 	sts	0x0060, r1
     37a:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	20 e8       	ldi	r18, 0x80	; 128
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	20 93 61 00 	sts	0x0061, r18
     38a:	80 93 61 00 	sts	0x0061, r24
     38e:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     390:	8a b1       	in	r24, 0x0a	; 10
     392:	80 6f       	ori	r24, 0xF0	; 240
     394:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     396:	8b b1       	in	r24, 0x0b	; 11
     398:	8f 70       	andi	r24, 0x0F	; 15
     39a:	8b b9       	out	0x0b, r24	; 11
			 *  \param[in] SPIOptions  SPI Options, a mask consisting of one of each of the SPI_SPEED_*,
			 *                         SPI_SCK_*, SPI_SAMPLE_*, SPI_ORDER_* and SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				DDRB  |=  ((1 << 1) | (1 << 2));
     39c:	84 b1       	in	r24, 0x04	; 4
     39e:	86 60       	ori	r24, 0x06	; 6
     3a0:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~((1 << 0) | (1 << 3));
     3a2:	84 b1       	in	r24, 0x04	; 4
     3a4:	86 7f       	andi	r24, 0xF6	; 246
     3a6:	84 b9       	out	0x04, r24	; 4
				PORTB |=  ((1 << 0) | (1 << 3));
     3a8:	85 b1       	in	r24, 0x05	; 5
     3aa:	89 60       	ori	r24, 0x09	; 9
     3ac:	85 b9       	out	0x05, r24	; 5

				SPCR   = ((1 << SPE) | SPIOptions);
     3ae:	8c e5       	ldi	r24, 0x5C	; 92
     3b0:	8c bd       	out	0x2c, r24	; 44

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     3b2:	8d b5       	in	r24, 0x2d	; 45
     3b4:	81 60       	ori	r24, 0x01	; 1
     3b6:	8d bd       	out	0x2d, r24	; 45
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
     3b8:	87 ea       	ldi	r24, 0xA7	; 167
     3ba:	80 93 7a 00 	sts	0x007A, r24
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__) || \
					 defined(__AVR_ATmega32U6__))
				DDRF  &= ~(1 << ChannelIndex);
     3be:	80 98       	cbi	0x10, 0	; 16
				DIDR0 |=  (1 << ChannelIndex);
     3c0:	ee e7       	ldi	r30, 0x7E	; 126
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	81 60       	ori	r24, 0x01	; 1
     3c8:	80 83       	st	Z, r24
			/** Initialises the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The AVR's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     3ca:	8d b1       	in	r24, 0x0d	; 13
     3cc:	83 60       	ori	r24, 0x03	; 3
     3ce:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     3d0:	8e b1       	in	r24, 0x0e	; 14
     3d2:	83 60       	ori	r24, 0x03	; 3
     3d4:	8e b9       	out	0x0e, r24	; 14
	LEDs_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_128);
	Temperature_Init();
	Dataflash_Init();
	USB_Init();
     3d6:	0e 94 c8 1c 	call	0x3990	; 0x3990 <USB_Init>
			 *  before any other TWI operations.
			 */
			static inline void TWI_Init(void) ATTR_ALWAYS_INLINE;
			static inline void TWI_Init(void)
			{
				TWCR |=  (1 << TWEN);
     3da:	ec eb       	ldi	r30, 0xBC	; 188
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	80 81       	ld	r24, Z
     3e0:	84 60       	ori	r24, 0x04	; 4
     3e2:	80 83       	st	Z, r24
	TWI_Init();

	/* 500ms logging interval timer configuration */
	OCR1A   = (((F_CPU / 1024) / 2) - 1);
     3e4:	81 e4       	ldi	r24, 0x41	; 65
     3e6:	9f e0       	ldi	r25, 0x0F	; 15
     3e8:	90 93 89 00 	sts	0x0089, r25
     3ec:	80 93 88 00 	sts	0x0088, r24
	TCCR1B  = (1 << WGM12) | (1 << CS12) | (1 << CS10);
     3f0:	8d e0       	ldi	r24, 0x0D	; 13
     3f2:	80 93 81 00 	sts	0x0081, r24
	TIMSK1  = (1 << OCIE1A);
     3f6:	82 e0       	ldi	r24, 0x02	; 2
     3f8:	80 93 6f 00 	sts	0x006F, r24

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
}
     3fc:	46 c3       	rjmp	.+1676   	; 0xa8a <DataflashManager_ResetDataflashProtections>

000003fe <CloseLogFile>:
	f_lseek(&TempLogFile, TempLogFile.fsize);
}

/** Closes the open data log file on the Dataflash's FAT formatted partition */
void CloseLogFile(void)
{
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
	/* Sync any data waiting to be written, unmount the storage device */
	f_sync(&TempLogFile);
     402:	0e ec       	ldi	r16, 0xCE	; 206
     404:	11 e0       	ldi	r17, 0x01	; 1
     406:	c8 01       	movw	r24, r16
     408:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <f_sync>
	f_close(&TempLogFile);
     40c:	c8 01       	movw	r24, r16
     40e:	0e 94 6f 16 	call	0x2cde	; 0x2cde <f_close>
}
     412:	1f 91       	pop	r17
     414:	0f 91       	pop	r16
     416:	08 95       	ret

00000418 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     418:	8b b1       	in	r24, 0x0b	; 11
     41a:	8f 70       	andi	r24, 0x0F	; 15
     41c:	80 6a       	ori	r24, 0xA0	; 160
     41e:	8b b9       	out	0x0b, r24	; 11
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	/* Close the log file so that the host has exclusive filesystem access */
	CloseLogFile();
}
     420:	ee cf       	rjmp	.-36     	; 0x3fe <CloseLogFile>

00000422 <OpenLogFile>:
	}
}

/** Opens the log file on the Dataflash's FAT formatted partition according to the current date */
void OpenLogFile(void)
{
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	df 93       	push	r29
     42c:	cf 93       	push	r28
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
     432:	2f 97       	sbiw	r28, 0x0f	; 15
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	f8 94       	cli
     438:	de bf       	out	0x3e, r29	; 62
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	cd bf       	out	0x3d, r28	; 61
	char LogFileName[12];

	/* Get the current date for the filename as "DDMMYY.csv" */
	uint8_t Day, Month, Year;
	DS1307_GetDate(&Day, &Month, &Year);
     43e:	ce 01       	movw	r24, r28
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	be 01       	movw	r22, r28
     444:	6e 5f       	subi	r22, 0xFE	; 254
     446:	7f 4f       	sbci	r23, 0xFF	; 255
     448:	ae 01       	movw	r20, r28
     44a:	4d 5f       	subi	r20, 0xFD	; 253
     44c:	5f 4f       	sbci	r21, 0xFF	; 255
     44e:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <DS1307_GetDate>
	sprintf(LogFileName, "%02d%02d%02d.csv", Day, Month, Year);
     452:	8d b7       	in	r24, 0x3d	; 61
     454:	9e b7       	in	r25, 0x3e	; 62
     456:	0a 97       	sbiw	r24, 0x0a	; 10
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	f8 94       	cli
     45c:	9e bf       	out	0x3e, r25	; 62
     45e:	0f be       	out	0x3f, r0	; 63
     460:	8d bf       	out	0x3d, r24	; 61
     462:	ed b7       	in	r30, 0x3d	; 61
     464:	fe b7       	in	r31, 0x3e	; 62
     466:	31 96       	adiw	r30, 0x01	; 1
     468:	84 e0       	ldi	r24, 0x04	; 4
     46a:	e8 2e       	mov	r14, r24
     46c:	f1 2c       	mov	r15, r1
     46e:	ec 0e       	add	r14, r28
     470:	fd 1e       	adc	r15, r29
     472:	ad b7       	in	r26, 0x3d	; 61
     474:	be b7       	in	r27, 0x3e	; 62
     476:	12 96       	adiw	r26, 0x02	; 2
     478:	fc 92       	st	X, r15
     47a:	ee 92       	st	-X, r14
     47c:	11 97       	sbiw	r26, 0x01	; 1
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	93 83       	std	Z+3, r25	; 0x03
     484:	82 83       	std	Z+2, r24	; 0x02
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	84 83       	std	Z+4, r24	; 0x04
     48a:	15 82       	std	Z+5, r1	; 0x05
     48c:	8a 81       	ldd	r24, Y+2	; 0x02
     48e:	86 83       	std	Z+6, r24	; 0x06
     490:	17 82       	std	Z+7, r1	; 0x07
     492:	8b 81       	ldd	r24, Y+3	; 0x03
     494:	80 87       	std	Z+8, r24	; 0x08
     496:	11 86       	std	Z+9, r1	; 0x09
     498:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <sprintf>

	/* Mount the storage device, open the file */
	f_mount(0, &DiskFATState);
     49c:	8d b7       	in	r24, 0x3d	; 61
     49e:	9e b7       	in	r25, 0x3e	; 62
     4a0:	0a 96       	adiw	r24, 0x0a	; 10
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	9e bf       	out	0x3e, r25	; 62
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	8d bf       	out	0x3d, r24	; 61
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	61 ef       	ldi	r22, 0xF1	; 241
     4b0:	71 e0       	ldi	r23, 0x01	; 1
     4b2:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <f_mount>
	f_open(&TempLogFile, LogFileName, FA_OPEN_ALWAYS | FA_WRITE);
     4b6:	0e ec       	ldi	r16, 0xCE	; 206
     4b8:	11 e0       	ldi	r17, 0x01	; 1
     4ba:	c8 01       	movw	r24, r16
     4bc:	b7 01       	movw	r22, r14
     4be:	42 e1       	ldi	r20, 0x12	; 18
     4c0:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <f_open>
	f_lseek(&TempLogFile, TempLogFile.fsize);
     4c4:	40 91 d8 01 	lds	r20, 0x01D8
     4c8:	50 91 d9 01 	lds	r21, 0x01D9
     4cc:	60 91 da 01 	lds	r22, 0x01DA
     4d0:	70 91 db 01 	lds	r23, 0x01DB
     4d4:	c8 01       	movw	r24, r16
     4d6:	0e 94 47 10 	call	0x208e	; 0x208e <f_lseek>
}
     4da:	2f 96       	adiw	r28, 0x0f	; 15
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	f8 94       	cli
     4e0:	de bf       	out	0x3e, r29	; 62
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	cd bf       	out	0x3d, r28	; 61
     4e6:	cf 91       	pop	r28
     4e8:	df 91       	pop	r29
     4ea:	1f 91       	pop	r17
     4ec:	0f 91       	pop	r16
     4ee:	ff 90       	pop	r15
     4f0:	ef 90       	pop	r14
     4f2:	08 95       	ret

000004f4 <EVENT_USB_Device_Disconnect>:
     4f4:	8b b1       	in	r24, 0x0b	; 11
     4f6:	8f 70       	andi	r24, 0x0F	; 15
     4f8:	80 61       	ori	r24, 0x10	; 16
     4fa:	8b b9       	out	0x0b, r24	; 11
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);

	/* Mount and open the log file on the Dataflash FAT partition */
	OpenLogFile();
}
     4fc:	92 cf       	rjmp	.-220    	; 0x422 <OpenLogFile>

000004fe <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     4fe:	df 93       	push	r29
     500:	cf 93       	push	r28
     502:	0f 92       	push	r0
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
	SetupHardware();
     508:	2e df       	rcall	.-420    	; 0x366 <SetupHardware>

	/* Fetch logging interval from EEPROM */
	LoggingInterval500MS_SRAM = eeprom_read_byte(&LoggingInterval500MS_EEPROM);
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__eerd_byte_usb1287>
     512:	80 93 ee 01 	sts	0x01EE, r24

	/* Check if the logging interval is invalid (0xFF) indicating that the EEPROM is blank */
	if (LoggingInterval500MS_SRAM == 0xFF)
     516:	8f 3f       	cpi	r24, 0xFF	; 255
     518:	19 f4       	brne	.+6      	; 0x520 <main+0x22>
	  LoggingInterval500MS_SRAM = DEFAULT_LOG_INTERVAL;
     51a:	84 e1       	ldi	r24, 0x14	; 20
     51c:	80 93 ee 01 	sts	0x01EE, r24

	/* Mount and open the log file on the Dataflash FAT partition */
	OpenLogFile();
     520:	80 df       	rcall	.-256    	; 0x422 <OpenLogFile>
     522:	8b b1       	in	r24, 0x0b	; 11
     524:	8f 70       	andi	r24, 0x0F	; 15
     526:	80 61       	ori	r24, 0x10	; 16
     528:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     52a:	78 94       	sei

	/* Discard the first sample from the temperature sensor, as it is generally incorrect */
	volatile uint8_t Dummy = Temperature_GetTemperature();
     52c:	0e 94 a6 24 	call	0x494c	; 0x494c <Temperature_GetTemperature>
     530:	89 83       	std	Y+1, r24	; 0x01
	(void)Dummy;
     532:	89 81       	ldd	r24, Y+1	; 0x01

	for (;;)
	{
		MS_Device_USBTask(&Disk_MS_Interface);
     534:	80 e4       	ldi	r24, 0x40	; 64
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	0e 94 3f 23 	call	0x467e	; 0x467e <MS_Device_USBTask>
		HID_Device_USBTask(&Generic_HID_Interface);
     53c:	87 e7       	ldi	r24, 0x77	; 119
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	0e 94 1c 21 	call	0x4238	; 0x4238 <HID_Device_USBTask>
		USB_USBTask();
     544:	0e 94 09 21 	call	0x4212	; 0x4212 <USB_USBTask>
     548:	f5 cf       	rjmp	.-22     	; 0x534 <main+0x36>

0000054a <__vector_17>:
FIL TempLogFile;


/** ISR to handle the 500ms ticks for sampling and data logging */
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
     54a:	1f 92       	push	r1
     54c:	0f 92       	push	r0
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	0f 92       	push	r0
     552:	0b b6       	in	r0, 0x3b	; 59
     554:	0f 92       	push	r0
     556:	11 24       	eor	r1, r1
     558:	8f 92       	push	r8
     55a:	9f 92       	push	r9
     55c:	af 92       	push	r10
     55e:	bf 92       	push	r11
     560:	cf 92       	push	r12
     562:	df 92       	push	r13
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	2f 93       	push	r18
     56c:	3f 93       	push	r19
     56e:	4f 93       	push	r20
     570:	5f 93       	push	r21
     572:	6f 93       	push	r22
     574:	7f 93       	push	r23
     576:	8f 93       	push	r24
     578:	9f 93       	push	r25
     57a:	af 93       	push	r26
     57c:	bf 93       	push	r27
     57e:	ef 93       	push	r30
     580:	ff 93       	push	r31
     582:	df 93       	push	r29
     584:	cf 93       	push	r28
     586:	cd b7       	in	r28, 0x3d	; 61
     588:	de b7       	in	r29, 0x3e	; 62
     58a:	cc 56       	subi	r28, 0x6C	; 108
     58c:	d0 40       	sbci	r29, 0x00	; 0
     58e:	de bf       	out	0x3e, r29	; 62
     590:	cd bf       	out	0x3d, r28	; 61
			}

			static inline uint8_t LEDs_GetLEDs(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t LEDs_GetLEDs(void)
			{
				return (PORTD & LEDS_ALL_LEDS);
     592:	0b b1       	in	r16, 0x0b	; 11
	uint8_t LEDMask = LEDs_GetLEDs();

	/* Check to see if the logging interval has expired */
	if (CurrentLoggingTicks++ < LoggingInterval500MS_SRAM)
     594:	80 91 ef 01 	lds	r24, 0x01EF
     598:	90 91 f0 01 	lds	r25, 0x01F0
     59c:	20 91 ee 01 	lds	r18, 0x01EE
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	90 93 f0 01 	sts	0x01F0, r25
     5a8:	80 93 ef 01 	sts	0x01EF, r24
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	82 17       	cp	r24, r18
     5b0:	93 07       	cpc	r25, r19
     5b2:	08 f4       	brcc	.+2      	; 0x5b6 <__vector_17+0x6c>
     5b4:	72 c0       	rjmp	.+228    	; 0x69a <__vector_17+0x150>
	  return;

	/* Reset log tick counter to prepare for next logging interval */
	CurrentLoggingTicks = 0;
     5b6:	10 92 f0 01 	sts	0x01F0, r1
     5ba:	10 92 ef 01 	sts	0x01EF, r1
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     5be:	8b b1       	in	r24, 0x0b	; 11
     5c0:	8f 70       	andi	r24, 0x0F	; 15
     5c2:	80 62       	ori	r24, 0x20	; 32
     5c4:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

	/* Only log when not connected to a USB host */
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     5c6:	80 91 2a 04 	lds	r24, 0x042A
     5ca:	88 23       	and	r24, r24
     5cc:	09 f0       	breq	.+2      	; 0x5d0 <__vector_17+0x86>
     5ce:	60 c0       	rjmp	.+192    	; 0x690 <__vector_17+0x146>
	{
		uint8_t Day,  Month,  Year;
		uint8_t Hour, Minute, Second;

		DS1307_GetDate(&Day,  &Month,  &Year);
     5d0:	ce 01       	movw	r24, r28
     5d2:	01 96       	adiw	r24, 0x01	; 1
     5d4:	be 01       	movw	r22, r28
     5d6:	6e 5f       	subi	r22, 0xFE	; 254
     5d8:	7f 4f       	sbci	r23, 0xFF	; 255
     5da:	ae 01       	movw	r20, r28
     5dc:	4d 5f       	subi	r20, 0xFD	; 253
     5de:	5f 4f       	sbci	r21, 0xFF	; 255
     5e0:	7b d7       	rcall	.+3830   	; 0x14d8 <DS1307_GetDate>
		DS1307_GetTime(&Hour, &Minute, &Second);
     5e2:	ce 01       	movw	r24, r28
     5e4:	04 96       	adiw	r24, 0x04	; 4
     5e6:	be 01       	movw	r22, r28
     5e8:	6b 5f       	subi	r22, 0xFB	; 251
     5ea:	7f 4f       	sbci	r23, 0xFF	; 255
     5ec:	ae 01       	movw	r20, r28
     5ee:	4a 5f       	subi	r20, 0xFA	; 250
     5f0:	5f 4f       	sbci	r21, 0xFF	; 255
     5f2:	d7 d6       	rcall	.+3502   	; 0x13a2 <DS1307_GetTime>

		char     LineBuffer[100];
		uint16_t BytesWritten;

		BytesWritten = sprintf(LineBuffer, "%02d/%02d/20%04d, %02d:%02d:%02d, %d Degrees\r\n",
     5f4:	f9 80       	ldd	r15, Y+1	; 0x01
     5f6:	ea 80       	ldd	r14, Y+2	; 0x02
     5f8:	db 80       	ldd	r13, Y+3	; 0x03
     5fa:	cc 80       	ldd	r12, Y+4	; 0x04
     5fc:	bd 80       	ldd	r11, Y+5	; 0x05
     5fe:	ae 80       	ldd	r10, Y+6	; 0x06
     600:	0e 94 a6 24 	call	0x494c	; 0x494c <Temperature_GetTemperature>
     604:	2d b7       	in	r18, 0x3d	; 61
     606:	3e b7       	in	r19, 0x3e	; 62
     608:	22 51       	subi	r18, 0x12	; 18
     60a:	30 40       	sbci	r19, 0x00	; 0
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	3e bf       	out	0x3e, r19	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	2d bf       	out	0x3d, r18	; 61
     616:	ed b7       	in	r30, 0x3d	; 61
     618:	fe b7       	in	r31, 0x3e	; 62
     61a:	31 96       	adiw	r30, 0x01	; 1
     61c:	99 e0       	ldi	r25, 0x09	; 9
     61e:	89 2e       	mov	r8, r25
     620:	91 2c       	mov	r9, r1
     622:	8c 0e       	add	r8, r28
     624:	9d 1e       	adc	r9, r29
     626:	ad b7       	in	r26, 0x3d	; 61
     628:	be b7       	in	r27, 0x3e	; 62
     62a:	12 96       	adiw	r26, 0x02	; 2
     62c:	9c 92       	st	X, r9
     62e:	8e 92       	st	-X, r8
     630:	11 97       	sbiw	r26, 0x01	; 1
     632:	21 e1       	ldi	r18, 0x11	; 17
     634:	31 e0       	ldi	r19, 0x01	; 1
     636:	33 83       	std	Z+3, r19	; 0x03
     638:	22 83       	std	Z+2, r18	; 0x02
     63a:	f4 82       	std	Z+4, r15	; 0x04
     63c:	15 82       	std	Z+5, r1	; 0x05
     63e:	e6 82       	std	Z+6, r14	; 0x06
     640:	17 82       	std	Z+7, r1	; 0x07
     642:	d0 86       	std	Z+8, r13	; 0x08
     644:	11 86       	std	Z+9, r1	; 0x09
     646:	c2 86       	std	Z+10, r12	; 0x0a
     648:	13 86       	std	Z+11, r1	; 0x0b
     64a:	b4 86       	std	Z+12, r11	; 0x0c
     64c:	15 86       	std	Z+13, r1	; 0x0d
     64e:	a6 86       	std	Z+14, r10	; 0x0e
     650:	17 86       	std	Z+15, r1	; 0x0f
     652:	99 27       	eor	r25, r25
     654:	87 fd       	sbrc	r24, 7
     656:	90 95       	com	r25
     658:	91 8b       	std	Z+17, r25	; 0x11
     65a:	80 8b       	std	Z+16, r24	; 0x10
     65c:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <sprintf>
     660:	ac 01       	movw	r20, r24
     662:	8f 83       	std	Y+7, r24	; 0x07
     664:	58 87       	std	Y+8, r21	; 0x08
							   Day, Month, Year, Hour, Minute, Second, Temperature_GetTemperature());

		f_write(&TempLogFile, LineBuffer, BytesWritten, &BytesWritten);
     666:	2d b7       	in	r18, 0x3d	; 61
     668:	3e b7       	in	r19, 0x3e	; 62
     66a:	2e 5e       	subi	r18, 0xEE	; 238
     66c:	3f 4f       	sbci	r19, 0xFF	; 255
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	f8 94       	cli
     672:	3e bf       	out	0x3e, r19	; 62
     674:	0f be       	out	0x3f, r0	; 63
     676:	2d bf       	out	0x3d, r18	; 61
     678:	8e ec       	ldi	r24, 0xCE	; 206
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	b4 01       	movw	r22, r8
     67e:	9e 01       	movw	r18, r28
     680:	29 5f       	subi	r18, 0xF9	; 249
     682:	3f 4f       	sbci	r19, 0xFF	; 255
     684:	0e 94 c3 12 	call	0x2586	; 0x2586 <f_write>
		f_sync(&TempLogFile);
     688:	8e ec       	ldi	r24, 0xCE	; 206
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <f_sync>
     690:	8b b1       	in	r24, 0x0b	; 11
     692:	00 7f       	andi	r16, 0xF0	; 240
     694:	8f 70       	andi	r24, 0x0F	; 15
     696:	08 2b       	or	r16, r24
     698:	0b b9       	out	0x0b, r16	; 11
	}

	LEDs_SetAllLEDs(LEDMask);
}
     69a:	c4 59       	subi	r28, 0x94	; 148
     69c:	df 4f       	sbci	r29, 0xFF	; 255
     69e:	de bf       	out	0x3e, r29	; 62
     6a0:	cd bf       	out	0x3d, r28	; 61
     6a2:	cf 91       	pop	r28
     6a4:	df 91       	pop	r29
     6a6:	ff 91       	pop	r31
     6a8:	ef 91       	pop	r30
     6aa:	bf 91       	pop	r27
     6ac:	af 91       	pop	r26
     6ae:	9f 91       	pop	r25
     6b0:	8f 91       	pop	r24
     6b2:	7f 91       	pop	r23
     6b4:	6f 91       	pop	r22
     6b6:	5f 91       	pop	r21
     6b8:	4f 91       	pop	r20
     6ba:	3f 91       	pop	r19
     6bc:	2f 91       	pop	r18
     6be:	0f 91       	pop	r16
     6c0:	ff 90       	pop	r15
     6c2:	ef 90       	pop	r14
     6c4:	df 90       	pop	r13
     6c6:	cf 90       	pop	r12
     6c8:	bf 90       	pop	r11
     6ca:	af 90       	pop	r10
     6cc:	9f 90       	pop	r9
     6ce:	8f 90       	pop	r8
     6d0:	0f 90       	pop	r0
     6d2:	0b be       	out	0x3b, r0	; 59
     6d4:	0f 90       	pop	r0
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	0f 90       	pop	r0
     6da:	1f 90       	pop	r1
     6dc:	18 95       	reti

000006de <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     6de:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     6e0:	93 30       	cpi	r25, 0x03	; 3
     6e2:	b1 f0       	breq	.+44     	; 0x710 <CALLBACK_USB_GetDescriptor+0x32>
     6e4:	94 30       	cpi	r25, 0x04	; 4
     6e6:	28 f4       	brcc	.+10     	; 0x6f2 <CALLBACK_USB_GetDescriptor+0x14>
     6e8:	91 30       	cpi	r25, 0x01	; 1
     6ea:	41 f0       	breq	.+16     	; 0x6fc <CALLBACK_USB_GetDescriptor+0x1e>
     6ec:	92 30       	cpi	r25, 0x02	; 2
     6ee:	79 f5       	brne	.+94     	; 0x74e <CALLBACK_USB_GetDescriptor+0x70>
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <CALLBACK_USB_GetDescriptor+0x28>
     6f2:	91 32       	cpi	r25, 0x21	; 33
     6f4:	11 f1       	breq	.+68     	; 0x73a <CALLBACK_USB_GetDescriptor+0x5c>
     6f6:	92 32       	cpi	r25, 0x22	; 34
     6f8:	51 f5       	brne	.+84     	; 0x74e <CALLBACK_USB_GetDescriptor+0x70>
     6fa:	24 c0       	rjmp	.+72     	; 0x744 <CALLBACK_USB_GetDescriptor+0x66>
     6fc:	e8 eb       	ldi	r30, 0xB8	; 184
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	22 e1       	ldi	r18, 0x12	; 18
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	28 c0       	rjmp	.+80     	; 0x756 <CALLBACK_USB_GetDescriptor+0x78>
     706:	ea ec       	ldi	r30, 0xCA	; 202
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	29 e3       	ldi	r18, 0x39	; 57
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	23 c0       	rjmp	.+70     	; 0x756 <CALLBACK_USB_GetDescriptor+0x78>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     710:	81 30       	cpi	r24, 0x01	; 1
     712:	49 f0       	breq	.+18     	; 0x726 <CALLBACK_USB_GetDescriptor+0x48>
     714:	81 30       	cpi	r24, 0x01	; 1
     716:	18 f0       	brcs	.+6      	; 0x71e <CALLBACK_USB_GetDescriptor+0x40>
     718:	82 30       	cpi	r24, 0x02	; 2
     71a:	c9 f4       	brne	.+50     	; 0x74e <CALLBACK_USB_GetDescriptor+0x70>
     71c:	0a c0       	rjmp	.+20     	; 0x732 <CALLBACK_USB_GetDescriptor+0x54>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     71e:	e3 e0       	ldi	r30, 0x03	; 3
     720:	f1 e0       	ldi	r31, 0x01	; 1
     722:	84 91       	lpm	r24, Z+
     724:	03 c0       	rjmp	.+6      	; 0x72c <CALLBACK_USB_GetDescriptor+0x4e>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     726:	e7 e0       	ldi	r30, 0x07	; 7
     728:	f1 e0       	ldi	r31, 0x01	; 1
     72a:	84 91       	lpm	r24, Z+
     72c:	28 2f       	mov	r18, r24
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	12 c0       	rjmp	.+36     	; 0x756 <CALLBACK_USB_GetDescriptor+0x78>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     732:	e1 e2       	ldi	r30, 0x21	; 33
     734:	f1 e0       	ldi	r31, 0x01	; 1
     736:	84 91       	lpm	r24, Z+
     738:	f9 cf       	rjmp	.-14     	; 0x72c <CALLBACK_USB_GetDescriptor+0x4e>
     73a:	e3 ef       	ldi	r30, 0xF3	; 243
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	29 e0       	ldi	r18, 0x09	; 9
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	09 c0       	rjmp	.+18     	; 0x756 <CALLBACK_USB_GetDescriptor+0x78>

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     744:	e8 e9       	ldi	r30, 0x98	; 152
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	20 e2       	ldi	r18, 0x20	; 32
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	04 c0       	rjmp	.+8      	; 0x756 <CALLBACK_USB_GetDescriptor+0x78>
     74e:	e0 e0       	ldi	r30, 0x00	; 0
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e0       	ldi	r19, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
     756:	ed 93       	st	X+, r30
     758:	fc 93       	st	X, r31
	return Size;
}
     75a:	c9 01       	movw	r24, r18
     75c:	08 95       	ret

0000075e <Dataflash_SelectChipFromPage>:
			 *
			 *  \param[in] PageAddress  Address of the page to manipulate, ranging from
			 *                          ((DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS) - 1).
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
     75e:	9c 01       	movw	r18, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     760:	8e b1       	in	r24, 0x0e	; 14
     762:	83 60       	ori	r24, 0x03	; 3
     764:	8e b9       	out	0x0e, r24	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     766:	80 e4       	ldi	r24, 0x40	; 64
     768:	20 30       	cpi	r18, 0x00	; 0
     76a:	38 07       	cpc	r19, r24
     76c:	58 f4       	brcc	.+22     	; 0x784 <Dataflash_SelectChipFromPage+0x26>
				  return;

				if (PageAddress & 0x01)
     76e:	20 ff       	sbrs	r18, 0
     770:	05 c0       	rjmp	.+10     	; 0x77c <Dataflash_SelectChipFromPage+0x1e>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     772:	8e b1       	in	r24, 0x0e	; 14
     774:	8c 7f       	andi	r24, 0xFC	; 252
     776:	81 60       	ori	r24, 0x01	; 1
     778:	8e b9       	out	0x0e, r24	; 14
     77a:	08 95       	ret
     77c:	8e b1       	in	r24, 0x0e	; 14
     77e:	8c 7f       	andi	r24, 0xFC	; 252
     780:	82 60       	ori	r24, 0x02	; 2
     782:	8e b9       	out	0x0e, r24	; 14
     784:	08 95       	ret

00000786 <Dataflash_ToggleSelectedChipCS>:
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     786:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     788:	9e b1       	in	r25, 0x0e	; 14
     78a:	93 60       	ori	r25, 0x03	; 3
     78c:	9e b9       	out	0x0e, r25	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     78e:	9e b1       	in	r25, 0x0e	; 14
     790:	83 70       	andi	r24, 0x03	; 3
     792:	9c 7f       	andi	r25, 0xFC	; 252
     794:	89 2b       	or	r24, r25
     796:	8e b9       	out	0x0e, r24	; 14
     798:	08 95       	ret

0000079a <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     79a:	f5 df       	rcall	.-22     	; 0x786 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     79c:	87 ed       	ldi	r24, 0xD7	; 215
     79e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7a0:	0d b4       	in	r0, 0x2d	; 45
     7a2:	07 fe       	sbrs	r0, 7
     7a4:	fd cf       	rjmp	.-6      	; 0x7a0 <Dataflash_WaitWhileBusy+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7a6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7a8:	0d b4       	in	r0, 0x2d	; 45
     7aa:	07 fe       	sbrs	r0, 7
     7ac:	fd cf       	rjmp	.-6      	; 0x7a8 <Dataflash_WaitWhileBusy+0xe>
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     7ae:	0e b4       	in	r0, 0x2e	; 46
     7b0:	07 fe       	sbrs	r0, 7
     7b2:	f9 cf       	rjmp	.-14     	; 0x7a6 <Dataflash_WaitWhileBusy+0xc>
				Dataflash_ToggleSelectedChipCS();
			}
     7b4:	e8 cf       	rjmp	.-48     	; 0x786 <Dataflash_ToggleSelectedChipCS>

000007b6 <Dataflash_SendAddressBytes>:
			 *  \param[in] BufferByte   Address within the dataflash's buffer
			 */
			static inline void Dataflash_SendAddressBytes(uint16_t PageAddress,
			                                              const uint16_t BufferByte)
			{
				PageAddress >>= 1;
     7b6:	9c 01       	movw	r18, r24
     7b8:	36 95       	lsr	r19
     7ba:	27 95       	ror	r18

				Dataflash_SendByte(PageAddress >> 5);
     7bc:	36 e0       	ldi	r19, 0x06	; 6
     7be:	96 95       	lsr	r25
     7c0:	87 95       	ror	r24
     7c2:	3a 95       	dec	r19
     7c4:	e1 f7       	brne	.-8      	; 0x7be <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7c6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7c8:	0d b4       	in	r0, 0x2d	; 45
     7ca:	07 fe       	sbrs	r0, 7
     7cc:	fd cf       	rjmp	.-6      	; 0x7c8 <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     7ce:	82 2f       	mov	r24, r18
     7d0:	88 0f       	add	r24, r24
     7d2:	88 0f       	add	r24, r24
     7d4:	88 0f       	add	r24, r24
     7d6:	87 2b       	or	r24, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7d8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7da:	0d b4       	in	r0, 0x2d	; 45
     7dc:	07 fe       	sbrs	r0, 7
     7de:	fd cf       	rjmp	.-6      	; 0x7da <Dataflash_SendAddressBytes+0x24>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7e0:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     7e2:	0d b4       	in	r0, 0x2d	; 45
     7e4:	07 fe       	sbrs	r0, 7
     7e6:	fd cf       	rjmp	.-6      	; 0x7e2 <Dataflash_SendAddressBytes+0x2c>
				Dataflash_SendByte(BufferByte);
			}
     7e8:	08 95       	ret

000007ea <DataflashManager_WriteBlocks_RAM>:
 *  \param[in] BufferPtr     Pointer to the data source RAM buffer
 */
void DataflashManager_WriteBlocks_RAM(const uint32_t BlockAddress,
                                      uint16_t TotalBlocks,
                                      const uint8_t* BufferPtr)
{
     7ea:	6f 92       	push	r6
     7ec:	7f 92       	push	r7
     7ee:	8f 92       	push	r8
     7f0:	9f 92       	push	r9
     7f2:	af 92       	push	r10
     7f4:	bf 92       	push	r11
     7f6:	cf 92       	push	r12
     7f8:	df 92       	push	r13
     7fa:	ef 92       	push	r14
     7fc:	ff 92       	push	r15
     7fe:	0f 93       	push	r16
     800:	1f 93       	push	r17
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	5a 01       	movw	r10, r20
     808:	49 01       	movw	r8, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     80a:	f9 e0       	ldi	r31, 0x09	; 9
     80c:	66 0f       	add	r22, r22
     80e:	77 1f       	adc	r23, r23
     810:	88 1f       	adc	r24, r24
     812:	99 1f       	adc	r25, r25
     814:	fa 95       	dec	r31
     816:	d1 f7       	brne	.-12     	; 0x80c <DataflashManager_WriteBlocks_RAM+0x22>
     818:	9b 01       	movw	r18, r22
     81a:	ac 01       	movw	r20, r24
     81c:	ea e0       	ldi	r30, 0x0A	; 10
     81e:	56 95       	lsr	r21
     820:	47 95       	ror	r20
     822:	37 95       	ror	r19
     824:	27 95       	ror	r18
     826:	ea 95       	dec	r30
     828:	d1 f7       	brne	.-12     	; 0x81e <DataflashManager_WriteBlocks_RAM+0x34>
     82a:	e9 01       	movw	r28, r18
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     82c:	8b 01       	movw	r16, r22
     82e:	13 70       	andi	r17, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     830:	c9 01       	movw	r24, r18
     832:	95 df       	rcall	.-214    	; 0x75e <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     834:	83 e5       	ldi	r24, 0x53	; 83
     836:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     838:	0d b4       	in	r0, 0x2d	; 45
     83a:	07 fe       	sbrs	r0, 7
     83c:	fd cf       	rjmp	.-6      	; 0x838 <DataflashManager_WriteBlocks_RAM+0x4e>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     83e:	ce 01       	movw	r24, r28
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	b8 df       	rcall	.-144    	; 0x7b6 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     846:	a9 df       	rcall	.-174    	; 0x79a <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     848:	84 e8       	ldi	r24, 0x84	; 132
     84a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     84c:	0d b4       	in	r0, 0x2d	; 45
     84e:	07 fe       	sbrs	r0, 7
     850:	fd cf       	rjmp	.-6      	; 0x84c <DataflashManager_WriteBlocks_RAM+0x62>
                                      uint16_t TotalBlocks,
                                      const uint8_t* BufferPtr)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     852:	c8 01       	movw	r24, r16
     854:	74 e0       	ldi	r23, 0x04	; 4
     856:	96 95       	lsr	r25
     858:	87 95       	ror	r24
     85a:	7a 95       	dec	r23
     85c:	e1 f7       	brne	.-8      	; 0x856 <DataflashManager_WriteBlocks_RAM+0x6c>
     85e:	f8 2e       	mov	r15, r24
	Dataflash_WaitWhileBusy();
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	b8 01       	movw	r22, r16
     866:	a7 df       	rcall	.-178    	; 0x7b6 <Dataflash_SendAddressBytes>
     868:	65 01       	movw	r12, r10
     86a:	65 e0       	ldi	r22, 0x05	; 5
     86c:	cc 0c       	add	r12, r12
     86e:	dd 1c       	adc	r13, r13
     870:	6a 95       	dec	r22
     872:	e1 f7       	brne	.-8      	; 0x86c <DataflashManager_WriteBlocks_RAM+0x82>
     874:	ee 24       	eor	r14, r14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     876:	54 e8       	ldi	r21, 0x84	; 132
     878:	65 2e       	mov	r6, r21
     87a:	56 c0       	rjmp	.+172    	; 0x928 <DataflashManager_WriteBlocks_RAM+0x13e>

	while (TotalBlocks)
     87c:	84 01       	movw	r16, r8
     87e:	77 24       	eor	r7, r7

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     880:	80 e4       	ldi	r24, 0x40	; 64
     882:	f8 16       	cp	r15, r24
     884:	a1 f5       	brne	.+104    	; 0x8ee <DataflashManager_WriteBlocks_RAM+0x104>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     886:	89 df       	rcall	.-238    	; 0x79a <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     888:	ee 20       	and	r14, r14
     88a:	11 f4       	brne	.+4      	; 0x890 <DataflashManager_WriteBlocks_RAM+0xa6>
     88c:	83 e8       	ldi	r24, 0x83	; 131
     88e:	01 c0       	rjmp	.+2      	; 0x892 <DataflashManager_WriteBlocks_RAM+0xa8>
     890:	86 e8       	ldi	r24, 0x86	; 134
     892:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     894:	0d b4       	in	r0, 0x2d	; 45
     896:	07 fe       	sbrs	r0, 7
     898:	fd cf       	rjmp	.-6      	; 0x894 <DataflashManager_WriteBlocks_RAM+0xaa>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     89a:	ce 01       	movw	r24, r28
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	8a df       	rcall	.-236    	; 0x7b6 <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     8a2:	21 96       	adiw	r28, 0x01	; 1
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     8a4:	8e b1       	in	r24, 0x0e	; 14

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     8a6:	83 70       	andi	r24, 0x03	; 3
     8a8:	81 30       	cpi	r24, 0x01	; 1
     8aa:	09 f4       	brne	.+2      	; 0x8ae <DataflashManager_WriteBlocks_RAM+0xc4>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     8ac:	e8 26       	eor	r14, r24

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     8ae:	ce 01       	movw	r24, r28
     8b0:	56 df       	rcall	.-340    	; 0x75e <Dataflash_SelectChipFromPage>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     8b2:	90 e4       	ldi	r25, 0x40	; 64
     8b4:	c9 16       	cp	r12, r25
     8b6:	d1 04       	cpc	r13, r1
     8b8:	78 f4       	brcc	.+30     	; 0x8d8 <DataflashManager_WriteBlocks_RAM+0xee>
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     8ba:	6f df       	rcall	.-290    	; 0x79a <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     8bc:	ee 20       	and	r14, r14
     8be:	11 f4       	brne	.+4      	; 0x8c4 <DataflashManager_WriteBlocks_RAM+0xda>
     8c0:	83 e5       	ldi	r24, 0x53	; 83
     8c2:	01 c0       	rjmp	.+2      	; 0x8c6 <DataflashManager_WriteBlocks_RAM+0xdc>
     8c4:	85 e5       	ldi	r24, 0x55	; 85
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8c6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8c8:	0d b4       	in	r0, 0x2d	; 45
     8ca:	07 fe       	sbrs	r0, 7
     8cc:	fd cf       	rjmp	.-6      	; 0x8c8 <DataflashManager_WriteBlocks_RAM+0xde>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     8ce:	ce 01       	movw	r24, r28
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	70 df       	rcall	.-288    	; 0x7b6 <Dataflash_SendAddressBytes>
					Dataflash_WaitWhileBusy();
     8d6:	61 df       	rcall	.-318    	; 0x79a <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_ToggleSelectedChipCS();
     8d8:	56 df       	rcall	.-340    	; 0x786 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8da:	6e bc       	out	0x2e, r6	; 46
				while (!(SPSR & (1 << SPIF)));
     8dc:	0d b4       	in	r0, 0x2d	; 45
     8de:	07 fe       	sbrs	r0, 7
     8e0:	fd cf       	rjmp	.-6      	; 0x8dc <DataflashManager_WriteBlocks_RAM+0xf2>
				Dataflash_SendByte(DF_CMD_BUFF1WRITE);
				Dataflash_SendAddressBytes(0, 0);
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	65 df       	rcall	.-310    	; 0x7b6 <Dataflash_SendAddressBytes>
     8ec:	ff 24       	eor	r15, r15
     8ee:	f8 01       	movw	r30, r16
     8f0:	90 e0       	ldi	r25, 0x00	; 0
			}

			/* Write one 16-byte chunk of data to the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
			  Dataflash_SendByte(*(BufferPtr++));
     8f2:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8f4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8f6:	0d b4       	in	r0, 0x2d	; 45
     8f8:	07 fe       	sbrs	r0, 7
     8fa:	fd cf       	rjmp	.-6      	; 0x8f6 <DataflashManager_WriteBlocks_RAM+0x10c>
				Dataflash_SendByte(DF_CMD_BUFF1WRITE);
				Dataflash_SendAddressBytes(0, 0);
			}

			/* Write one 16-byte chunk of data to the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
     8fc:	9f 5f       	subi	r25, 0xFF	; 255
     8fe:	90 31       	cpi	r25, 0x10	; 16
     900:	c1 f7       	brne	.-16     	; 0x8f2 <DataflashManager_WriteBlocks_RAM+0x108>
     902:	00 5f       	subi	r16, 0xF0	; 240
     904:	1f 4f       	sbci	r17, 0xFF	; 255
			  Dataflash_SendByte(*(BufferPtr++));

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     906:	f3 94       	inc	r15

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     908:	73 94       	inc	r7
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     90a:	80 e2       	ldi	r24, 0x20	; 32
     90c:	78 16       	cp	r7, r24
     90e:	09 f0       	breq	.+2      	; 0x912 <DataflashManager_WriteBlocks_RAM+0x128>
     910:	b7 cf       	rjmp	.-146    	; 0x880 <DataflashManager_WriteBlocks_RAM+0x96>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	92 e0       	ldi	r25, 0x02	; 2
     916:	88 0e       	add	r8, r24
     918:	99 1e       	adc	r9, r25
			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
		}

		/* Decrement the blocks remaining counter and reset the sub block counter */
		TotalBlocks--;
     91a:	08 94       	sec
     91c:	a1 08       	sbc	r10, r1
     91e:	b1 08       	sbc	r11, r1
     920:	80 ee       	ldi	r24, 0xE0	; 224
     922:	9f ef       	ldi	r25, 0xFF	; 255
     924:	c8 0e       	add	r12, r24
     926:	d9 1e       	adc	r13, r25

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);

	while (TotalBlocks)
     928:	a1 14       	cp	r10, r1
     92a:	b1 04       	cpc	r11, r1
     92c:	09 f0       	breq	.+2      	; 0x930 <DataflashManager_WriteBlocks_RAM+0x146>
     92e:	a6 cf       	rjmp	.-180    	; 0x87c <DataflashManager_WriteBlocks_RAM+0x92>
		/* Decrement the blocks remaining counter and reset the sub block counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     930:	34 df       	rcall	.-408    	; 0x79a <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     932:	ee 20       	and	r14, r14
     934:	11 f4       	brne	.+4      	; 0x93a <DataflashManager_WriteBlocks_RAM+0x150>
     936:	83 e8       	ldi	r24, 0x83	; 131
     938:	01 c0       	rjmp	.+2      	; 0x93c <DataflashManager_WriteBlocks_RAM+0x152>
     93a:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     93c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     93e:	0d b4       	in	r0, 0x2d	; 45
     940:	07 fe       	sbrs	r0, 7
     942:	fd cf       	rjmp	.-6      	; 0x93e <DataflashManager_WriteBlocks_RAM+0x154>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     944:	ce 01       	movw	r24, r28
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	35 df       	rcall	.-406    	; 0x7b6 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     94c:	26 df       	rcall	.-436    	; 0x79a <Dataflash_WaitWhileBusy>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     94e:	8e b1       	in	r24, 0x0e	; 14
     950:	83 60       	ori	r24, 0x03	; 3
     952:	8e b9       	out	0x0e, r24	; 14

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	ff 90       	pop	r15
     95e:	ef 90       	pop	r14
     960:	df 90       	pop	r13
     962:	cf 90       	pop	r12
     964:	bf 90       	pop	r11
     966:	af 90       	pop	r10
     968:	9f 90       	pop	r9
     96a:	8f 90       	pop	r8
     96c:	7f 90       	pop	r7
     96e:	6f 90       	pop	r6
     970:	08 95       	ret

00000972 <DataflashManager_ReadBlocks_RAM>:
 *  \param[out] BufferPtr    Pointer to the data destination RAM buffer
 */
void DataflashManager_ReadBlocks_RAM(const uint32_t BlockAddress,
                                     uint16_t TotalBlocks,
                                     uint8_t* BufferPtr)
{
     972:	af 92       	push	r10
     974:	bf 92       	push	r11
     976:	cf 92       	push	r12
     978:	df 92       	push	r13
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	6a 01       	movw	r12, r20
     988:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     98a:	09 e0       	ldi	r16, 0x09	; 9
     98c:	66 0f       	add	r22, r22
     98e:	77 1f       	adc	r23, r23
     990:	88 1f       	adc	r24, r24
     992:	99 1f       	adc	r25, r25
     994:	0a 95       	dec	r16
     996:	d1 f7       	brne	.-12     	; 0x98c <DataflashManager_ReadBlocks_RAM+0x1a>
     998:	9b 01       	movw	r18, r22
     99a:	ac 01       	movw	r20, r24
     99c:	1a e0       	ldi	r17, 0x0A	; 10
     99e:	56 95       	lsr	r21
     9a0:	47 95       	ror	r20
     9a2:	37 95       	ror	r19
     9a4:	27 95       	ror	r18
     9a6:	1a 95       	dec	r17
     9a8:	d1 f7       	brne	.-12     	; 0x99e <DataflashManager_ReadBlocks_RAM+0x2c>
     9aa:	89 01       	movw	r16, r18
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     9ac:	eb 01       	movw	r28, r22
     9ae:	d3 70       	andi	r29, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     9b0:	c9 01       	movw	r24, r18
     9b2:	d5 de       	rcall	.-598    	; 0x75e <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9b4:	82 ed       	ldi	r24, 0xD2	; 210
     9b6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9b8:	0d b4       	in	r0, 0x2d	; 45
     9ba:	07 fe       	sbrs	r0, 7
     9bc:	fd cf       	rjmp	.-6      	; 0x9b8 <DataflashManager_ReadBlocks_RAM+0x46>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     9be:	c8 01       	movw	r24, r16
     9c0:	be 01       	movw	r22, r28
     9c2:	f9 de       	rcall	.-526    	; 0x7b6 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9c4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9c6:	0d b4       	in	r0, 0x2d	; 45
     9c8:	07 fe       	sbrs	r0, 7
     9ca:	fd cf       	rjmp	.-6      	; 0x9c6 <DataflashManager_ReadBlocks_RAM+0x54>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9cc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9ce:	0d b4       	in	r0, 0x2d	; 45
     9d0:	07 fe       	sbrs	r0, 7
     9d2:	fd cf       	rjmp	.-6      	; 0x9ce <DataflashManager_ReadBlocks_RAM+0x5c>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9d4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9d6:	0d b4       	in	r0, 0x2d	; 45
     9d8:	07 fe       	sbrs	r0, 7
     9da:	fd cf       	rjmp	.-6      	; 0x9d6 <DataflashManager_ReadBlocks_RAM+0x64>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9dc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9de:	0d b4       	in	r0, 0x2d	; 45
     9e0:	07 fe       	sbrs	r0, 7
     9e2:	fd cf       	rjmp	.-6      	; 0x9de <DataflashManager_ReadBlocks_RAM+0x6c>
                                     uint16_t TotalBlocks,
                                     uint8_t* BufferPtr)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     9e4:	b4 e0       	ldi	r27, 0x04	; 4
     9e6:	d6 95       	lsr	r29
     9e8:	c7 95       	ror	r28
     9ea:	ba 95       	dec	r27
     9ec:	e1 f7       	brne	.-8      	; 0x9e6 <DataflashManager_ReadBlocks_RAM+0x74>
     9ee:	6c 2f       	mov	r22, r28
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9f0:	a2 ed       	ldi	r26, 0xD2	; 210
     9f2:	aa 2e       	mov	r10, r26
     9f4:	39 c0       	rjmp	.+114    	; 0xa68 <DataflashManager_ReadBlocks_RAM+0xf6>
     9f6:	e7 01       	movw	r28, r14
     9f8:	bb 24       	eor	r11, r11

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     9fa:	60 34       	cpi	r22, 0x40	; 64
     9fc:	e9 f4       	brne	.+58     	; 0xa38 <DataflashManager_ReadBlocks_RAM+0xc6>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     9fe:	0f 5f       	subi	r16, 0xFF	; 255
     a00:	1f 4f       	sbci	r17, 0xFF	; 255

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     a02:	c8 01       	movw	r24, r16
     a04:	ac de       	rcall	.-680    	; 0x75e <Dataflash_SelectChipFromPage>
     a06:	ae bc       	out	0x2e, r10	; 46
				while (!(SPSR & (1 << SPIF)));
     a08:	0d b4       	in	r0, 0x2d	; 45
     a0a:	07 fe       	sbrs	r0, 7
     a0c:	fd cf       	rjmp	.-6      	; 0xa08 <DataflashManager_ReadBlocks_RAM+0x96>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     a0e:	c8 01       	movw	r24, r16
     a10:	60 e0       	ldi	r22, 0x00	; 0
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	d0 de       	rcall	.-608    	; 0x7b6 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a16:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a18:	0d b4       	in	r0, 0x2d	; 45
     a1a:	07 fe       	sbrs	r0, 7
     a1c:	fd cf       	rjmp	.-6      	; 0xa18 <DataflashManager_ReadBlocks_RAM+0xa6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a1e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a20:	0d b4       	in	r0, 0x2d	; 45
     a22:	07 fe       	sbrs	r0, 7
     a24:	fd cf       	rjmp	.-6      	; 0xa20 <DataflashManager_ReadBlocks_RAM+0xae>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a26:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a28:	0d b4       	in	r0, 0x2d	; 45
     a2a:	07 fe       	sbrs	r0, 7
     a2c:	fd cf       	rjmp	.-6      	; 0xa28 <DataflashManager_ReadBlocks_RAM+0xb6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a2e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a30:	0d b4       	in	r0, 0x2d	; 45
     a32:	07 fe       	sbrs	r0, 7
     a34:	fd cf       	rjmp	.-6      	; 0xa30 <DataflashManager_ReadBlocks_RAM+0xbe>
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	fe 01       	movw	r30, r28
     a3a:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     a3c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a3e:	0d b4       	in	r0, 0x2d	; 45
     a40:	07 fe       	sbrs	r0, 7
     a42:	fd cf       	rjmp	.-6      	; 0xa3e <DataflashManager_ReadBlocks_RAM+0xcc>
				return SPDR;
     a44:	8e b5       	in	r24, 0x2e	; 46
				Dataflash_SendByte(0x00);
			}

			/* Read one 16-byte chunk of data from the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
			  *(BufferPtr++) = Dataflash_ReceiveByte();
     a46:	81 93       	st	Z+, r24
				Dataflash_SendByte(0x00);
				Dataflash_SendByte(0x00);
			}

			/* Read one 16-byte chunk of data from the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
     a48:	9f 5f       	subi	r25, 0xFF	; 255
     a4a:	90 31       	cpi	r25, 0x10	; 16
     a4c:	b9 f7       	brne	.-18     	; 0xa3c <DataflashManager_ReadBlocks_RAM+0xca>
     a4e:	60 96       	adiw	r28, 0x10	; 16
			  *(BufferPtr++) = Dataflash_ReceiveByte();

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     a50:	6f 5f       	subi	r22, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     a52:	b3 94       	inc	r11
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     a54:	80 e2       	ldi	r24, 0x20	; 32
     a56:	b8 16       	cp	r11, r24
     a58:	81 f6       	brne	.-96     	; 0x9fa <DataflashManager_ReadBlocks_RAM+0x88>
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	92 e0       	ldi	r25, 0x02	; 2
     a5e:	e8 0e       	add	r14, r24
     a60:	f9 1e       	adc	r15, r25
			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     a62:	08 94       	sec
     a64:	c1 08       	sbc	r12, r1
     a66:	d1 08       	sbc	r13, r1
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	while (TotalBlocks)
     a68:	c1 14       	cp	r12, r1
     a6a:	d1 04       	cpc	r13, r1
     a6c:	21 f6       	brne	.-120    	; 0x9f6 <DataflashManager_ReadBlocks_RAM+0x84>
     a6e:	8e b1       	in	r24, 0x0e	; 14
     a70:	83 60       	ori	r24, 0x03	; 3
     a72:	8e b9       	out	0x0e, r24	; 14
		TotalBlocks--;
	}

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	df 90       	pop	r13
     a82:	cf 90       	pop	r12
     a84:	bf 90       	pop	r11
     a86:	af 90       	pop	r10
     a88:	08 95       	ret

00000a8a <DataflashManager_ResetDataflashProtections>:
     a8a:	8e b1       	in	r24, 0x0e	; 14
     a8c:	8c 7f       	andi	r24, 0xFC	; 252
     a8e:	82 60       	ori	r24, 0x02	; 2
     a90:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a92:	87 ed       	ldi	r24, 0xD7	; 215
     a94:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a96:	0d b4       	in	r0, 0x2d	; 45
     a98:	07 fe       	sbrs	r0, 7
     a9a:	fd cf       	rjmp	.-6      	; 0xa96 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     a9c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a9e:	0d b4       	in	r0, 0x2d	; 45
     aa0:	07 fe       	sbrs	r0, 7
     aa2:	fd cf       	rjmp	.-6      	; 0xa9e <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     aa4:	0e b4       	in	r0, 0x2e	; 46
     aa6:	01 fe       	sbrs	r0, 1
     aa8:	15 c0       	rjmp	.+42     	; 0xad4 <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
     aaa:	6d de       	rcall	.-806    	; 0x786 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     aac:	8d e3       	ldi	r24, 0x3D	; 61
     aae:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ab0:	0d b4       	in	r0, 0x2d	; 45
     ab2:	07 fe       	sbrs	r0, 7
     ab4:	fd cf       	rjmp	.-6      	; 0xab0 <DataflashManager_ResetDataflashProtections+0x26>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ab6:	8a e2       	ldi	r24, 0x2A	; 42
     ab8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     aba:	0d b4       	in	r0, 0x2d	; 45
     abc:	07 fe       	sbrs	r0, 7
     abe:	fd cf       	rjmp	.-6      	; 0xaba <DataflashManager_ResetDataflashProtections+0x30>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ac0:	8f e7       	ldi	r24, 0x7F	; 127
     ac2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ac4:	0d b4       	in	r0, 0x2d	; 45
     ac6:	07 fe       	sbrs	r0, 7
     ac8:	fd cf       	rjmp	.-6      	; 0xac4 <DataflashManager_ResetDataflashProtections+0x3a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     aca:	8a e9       	ldi	r24, 0x9A	; 154
     acc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ace:	0d b4       	in	r0, 0x2d	; 45
     ad0:	07 fe       	sbrs	r0, 7
     ad2:	fd cf       	rjmp	.-6      	; 0xace <DataflashManager_ResetDataflashProtections+0x44>
     ad4:	8e b1       	in	r24, 0x0e	; 14
     ad6:	8c 7f       	andi	r24, 0xFC	; 252
     ad8:	81 60       	ori	r24, 0x01	; 1
     ada:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     adc:	87 ed       	ldi	r24, 0xD7	; 215
     ade:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ae0:	0d b4       	in	r0, 0x2d	; 45
     ae2:	07 fe       	sbrs	r0, 7
     ae4:	fd cf       	rjmp	.-6      	; 0xae0 <DataflashManager_ResetDataflashProtections+0x56>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     ae6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     ae8:	0d b4       	in	r0, 0x2d	; 45
     aea:	07 fe       	sbrs	r0, 7
     aec:	fd cf       	rjmp	.-6      	; 0xae8 <DataflashManager_ResetDataflashProtections+0x5e>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     aee:	0e b4       	in	r0, 0x2e	; 46
     af0:	01 fe       	sbrs	r0, 1
     af2:	15 c0       	rjmp	.+42     	; 0xb1e <DataflashManager_ResetDataflashProtections+0x94>
	{
		Dataflash_ToggleSelectedChipCS();
     af4:	48 de       	rcall	.-880    	; 0x786 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     af6:	8d e3       	ldi	r24, 0x3D	; 61
     af8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     afa:	0d b4       	in	r0, 0x2d	; 45
     afc:	07 fe       	sbrs	r0, 7
     afe:	fd cf       	rjmp	.-6      	; 0xafa <DataflashManager_ResetDataflashProtections+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     b00:	8a e2       	ldi	r24, 0x2A	; 42
     b02:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     b04:	0d b4       	in	r0, 0x2d	; 45
     b06:	07 fe       	sbrs	r0, 7
     b08:	fd cf       	rjmp	.-6      	; 0xb04 <DataflashManager_ResetDataflashProtections+0x7a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     b0a:	8f e7       	ldi	r24, 0x7F	; 127
     b0c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     b0e:	0d b4       	in	r0, 0x2d	; 45
     b10:	07 fe       	sbrs	r0, 7
     b12:	fd cf       	rjmp	.-6      	; 0xb0e <DataflashManager_ResetDataflashProtections+0x84>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     b14:	8a e9       	ldi	r24, 0x9A	; 154
     b16:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     b18:	0d b4       	in	r0, 0x2d	; 45
     b1a:	07 fe       	sbrs	r0, 7
     b1c:	fd cf       	rjmp	.-6      	; 0xb18 <DataflashManager_ResetDataflashProtections+0x8e>
     b1e:	8e b1       	in	r24, 0x0e	; 14
     b20:	83 60       	ori	r24, 0x03	; 3
     b22:	8e b9       	out	0x0e, r24	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     b24:	08 95       	ret

00000b26 <DataflashManager_CheckDataflashOperation>:
     b26:	8e b1       	in	r24, 0x0e	; 14
     b28:	8c 7f       	andi	r24, 0xFC	; 252
     b2a:	82 60       	ori	r24, 0x02	; 2
     b2c:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     b2e:	8f e9       	ldi	r24, 0x9F	; 159
     b30:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     b32:	0d b4       	in	r0, 0x2d	; 45
     b34:	07 fe       	sbrs	r0, 7
     b36:	fd cf       	rjmp	.-6      	; 0xb32 <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b38:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b3a:	0d b4       	in	r0, 0x2d	; 45
     b3c:	07 fe       	sbrs	r0, 7
     b3e:	fd cf       	rjmp	.-6      	; 0xb3a <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     b40:	9e b5       	in	r25, 0x2e	; 46
     b42:	8e b1       	in	r24, 0x0e	; 14
     b44:	83 60       	ori	r24, 0x03	; 3
     b46:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     b48:	9f 31       	cpi	r25, 0x1F	; 31
     b4a:	11 f0       	breq	.+4      	; 0xb50 <DataflashManager_CheckDataflashOperation+0x2a>
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	08 95       	ret
     b50:	8e b1       	in	r24, 0x0e	; 14
     b52:	8c 7f       	andi	r24, 0xFC	; 252
     b54:	81 60       	ori	r24, 0x01	; 1
     b56:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     b58:	8f e9       	ldi	r24, 0x9F	; 159
     b5a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     b5c:	0d b4       	in	r0, 0x2d	; 45
     b5e:	07 fe       	sbrs	r0, 7
     b60:	fd cf       	rjmp	.-6      	; 0xb5c <DataflashManager_CheckDataflashOperation+0x36>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b62:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b64:	0d b4       	in	r0, 0x2d	; 45
     b66:	07 fe       	sbrs	r0, 7
     b68:	fd cf       	rjmp	.-6      	; 0xb64 <DataflashManager_CheckDataflashOperation+0x3e>
				return SPDR;
     b6a:	9e b5       	in	r25, 0x2e	; 46
     b6c:	8e b1       	in	r24, 0x0e	; 14
     b6e:	83 60       	ori	r24, 0x03	; 3
     b70:	8e b9       	out	0x0e, r24	; 14
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	9f 31       	cpi	r25, 0x1F	; 31
     b76:	09 f4       	brne	.+2      	; 0xb7a <DataflashManager_CheckDataflashOperation+0x54>
     b78:	81 e0       	ldi	r24, 0x01	; 1
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     b7a:	08 95       	ret

00000b7c <DataflashManager_ReadBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     b7c:	af 92       	push	r10
     b7e:	bf 92       	push	r11
     b80:	cf 92       	push	r12
     b82:	df 92       	push	r13
     b84:	ef 92       	push	r14
     b86:	ff 92       	push	r15
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	0f 92       	push	r0
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	5c 01       	movw	r10, r24
     b98:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     b9a:	e9 e0       	ldi	r30, 0x09	; 9
     b9c:	44 0f       	add	r20, r20
     b9e:	55 1f       	adc	r21, r21
     ba0:	66 1f       	adc	r22, r22
     ba2:	77 1f       	adc	r23, r23
     ba4:	ea 95       	dec	r30
     ba6:	d1 f7       	brne	.-12     	; 0xb9c <DataflashManager_ReadBlocks+0x20>
     ba8:	db 01       	movw	r26, r22
     baa:	ca 01       	movw	r24, r20
     bac:	3a e0       	ldi	r19, 0x0A	; 10
     bae:	b6 95       	lsr	r27
     bb0:	a7 95       	ror	r26
     bb2:	97 95       	ror	r25
     bb4:	87 95       	ror	r24
     bb6:	3a 95       	dec	r19
     bb8:	d1 f7       	brne	.-12     	; 0xbae <DataflashManager_ReadBlocks+0x32>
     bba:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     bbc:	2f ef       	ldi	r18, 0xFF	; 255
     bbe:	c2 2e       	mov	r12, r18
     bc0:	23 e0       	ldi	r18, 0x03	; 3
     bc2:	d2 2e       	mov	r13, r18
     bc4:	c4 22       	and	r12, r20
     bc6:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     bc8:	ca dd       	rcall	.-1132   	; 0x75e <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     bca:	82 ed       	ldi	r24, 0xD2	; 210
     bcc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     bce:	0d b4       	in	r0, 0x2d	; 45
     bd0:	07 fe       	sbrs	r0, 7
     bd2:	fd cf       	rjmp	.-6      	; 0xbce <DataflashManager_ReadBlocks+0x52>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     bd4:	c8 01       	movw	r24, r16
     bd6:	b6 01       	movw	r22, r12
     bd8:	ee dd       	rcall	.-1060   	; 0x7b6 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     bda:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     bdc:	0d b4       	in	r0, 0x2d	; 45
     bde:	07 fe       	sbrs	r0, 7
     be0:	fd cf       	rjmp	.-6      	; 0xbdc <DataflashManager_ReadBlocks+0x60>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     be2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     be4:	0d b4       	in	r0, 0x2d	; 45
     be6:	07 fe       	sbrs	r0, 7
     be8:	fd cf       	rjmp	.-6      	; 0xbe4 <DataflashManager_ReadBlocks+0x68>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     bea:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     bec:	0d b4       	in	r0, 0x2d	; 45
     bee:	07 fe       	sbrs	r0, 7
     bf0:	fd cf       	rjmp	.-6      	; 0xbec <DataflashManager_ReadBlocks+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     bf2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     bf4:	0d b4       	in	r0, 0x2d	; 45
     bf6:	07 fe       	sbrs	r0, 7
     bf8:	fd cf       	rjmp	.-6      	; 0xbf4 <DataflashManager_ReadBlocks+0x78>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     bfa:	0e 94 49 1c 	call	0x3892	; 0x3892 <Endpoint_WaitUntilReady>
     bfe:	88 23       	and	r24, r24
     c00:	09 f0       	breq	.+2      	; 0xc04 <DataflashManager_ReadBlocks+0x88>
     c02:	c6 c0       	rjmp	.+396    	; 0xd90 <DataflashManager_ReadBlocks+0x214>
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     c04:	94 e0       	ldi	r25, 0x04	; 4
     c06:	d6 94       	lsr	r13
     c08:	c7 94       	ror	r12
     c0a:	9a 95       	dec	r25
     c0c:	e1 f7       	brne	.-8      	; 0xc06 <DataflashManager_ReadBlocks+0x8a>
     c0e:	9c 2d       	mov	r25, r12
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     c10:	82 ed       	ldi	r24, 0xD2	; 210
     c12:	c8 2e       	mov	r12, r24
     c14:	ad c0       	rjmp	.+346    	; 0xd70 <DataflashManager_ReadBlocks+0x1f4>
     c16:	dd 24       	eor	r13, r13
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     c18:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     c1c:	85 fd       	sbrc	r24, 5
     c1e:	0c c0       	rjmp	.+24     	; 0xc38 <DataflashManager_ReadBlocks+0xbc>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c20:	80 91 e8 00 	lds	r24, 0x00E8
     c24:	8e 77       	andi	r24, 0x7E	; 126
     c26:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     c2a:	99 83       	std	Y+1, r25	; 0x01
     c2c:	0e 94 49 1c 	call	0x3892	; 0x3892 <Endpoint_WaitUntilReady>
     c30:	99 81       	ldd	r25, Y+1	; 0x01
     c32:	88 23       	and	r24, r24
     c34:	09 f0       	breq	.+2      	; 0xc38 <DataflashManager_ReadBlocks+0xbc>
     c36:	ac c0       	rjmp	.+344    	; 0xd90 <DataflashManager_ReadBlocks+0x214>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     c38:	90 34       	cpi	r25, 0x40	; 64
     c3a:	e9 f4       	brne	.+58     	; 0xc76 <DataflashManager_ReadBlocks+0xfa>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     c3c:	0f 5f       	subi	r16, 0xFF	; 255
     c3e:	1f 4f       	sbci	r17, 0xFF	; 255

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     c40:	c8 01       	movw	r24, r16
     c42:	8d dd       	rcall	.-1254   	; 0x75e <Dataflash_SelectChipFromPage>
     c44:	ce bc       	out	0x2e, r12	; 46
				while (!(SPSR & (1 << SPIF)));
     c46:	0d b4       	in	r0, 0x2d	; 45
     c48:	07 fe       	sbrs	r0, 7
     c4a:	fd cf       	rjmp	.-6      	; 0xc46 <DataflashManager_ReadBlocks+0xca>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     c4c:	c8 01       	movw	r24, r16
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	b1 dd       	rcall	.-1182   	; 0x7b6 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     c54:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     c56:	0d b4       	in	r0, 0x2d	; 45
     c58:	07 fe       	sbrs	r0, 7
     c5a:	fd cf       	rjmp	.-6      	; 0xc56 <DataflashManager_ReadBlocks+0xda>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     c5c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     c5e:	0d b4       	in	r0, 0x2d	; 45
     c60:	07 fe       	sbrs	r0, 7
     c62:	fd cf       	rjmp	.-6      	; 0xc5e <DataflashManager_ReadBlocks+0xe2>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     c64:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     c66:	0d b4       	in	r0, 0x2d	; 45
     c68:	07 fe       	sbrs	r0, 7
     c6a:	fd cf       	rjmp	.-6      	; 0xc66 <DataflashManager_ReadBlocks+0xea>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     c6c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     c6e:	0d b4       	in	r0, 0x2d	; 45
     c70:	07 fe       	sbrs	r0, 7
     c72:	fd cf       	rjmp	.-6      	; 0xc6e <DataflashManager_ReadBlocks+0xf2>
     c74:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     c76:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     c78:	0d b4       	in	r0, 0x2d	; 45
     c7a:	07 fe       	sbrs	r0, 7
     c7c:	fd cf       	rjmp	.-6      	; 0xc78 <DataflashManager_ReadBlocks+0xfc>
				return SPDR;
     c7e:	8e b5       	in	r24, 0x2e	; 46
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     c80:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     c84:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     c86:	0d b4       	in	r0, 0x2d	; 45
     c88:	07 fe       	sbrs	r0, 7
     c8a:	fd cf       	rjmp	.-6      	; 0xc86 <DataflashManager_ReadBlocks+0x10a>
				return SPDR;
     c8c:	8e b5       	in	r24, 0x2e	; 46
     c8e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     c92:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     c94:	0d b4       	in	r0, 0x2d	; 45
     c96:	07 fe       	sbrs	r0, 7
     c98:	fd cf       	rjmp	.-6      	; 0xc94 <DataflashManager_ReadBlocks+0x118>
				return SPDR;
     c9a:	8e b5       	in	r24, 0x2e	; 46
     c9c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     ca0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     ca2:	0d b4       	in	r0, 0x2d	; 45
     ca4:	07 fe       	sbrs	r0, 7
     ca6:	fd cf       	rjmp	.-6      	; 0xca2 <DataflashManager_ReadBlocks+0x126>
				return SPDR;
     ca8:	8e b5       	in	r24, 0x2e	; 46
     caa:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     cae:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     cb0:	0d b4       	in	r0, 0x2d	; 45
     cb2:	07 fe       	sbrs	r0, 7
     cb4:	fd cf       	rjmp	.-6      	; 0xcb0 <DataflashManager_ReadBlocks+0x134>
				return SPDR;
     cb6:	8e b5       	in	r24, 0x2e	; 46
     cb8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     cbc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     cbe:	0d b4       	in	r0, 0x2d	; 45
     cc0:	07 fe       	sbrs	r0, 7
     cc2:	fd cf       	rjmp	.-6      	; 0xcbe <DataflashManager_ReadBlocks+0x142>
				return SPDR;
     cc4:	8e b5       	in	r24, 0x2e	; 46
     cc6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     cca:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     ccc:	0d b4       	in	r0, 0x2d	; 45
     cce:	07 fe       	sbrs	r0, 7
     cd0:	fd cf       	rjmp	.-6      	; 0xccc <DataflashManager_ReadBlocks+0x150>
				return SPDR;
     cd2:	8e b5       	in	r24, 0x2e	; 46
     cd4:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     cd8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     cda:	0d b4       	in	r0, 0x2d	; 45
     cdc:	07 fe       	sbrs	r0, 7
     cde:	fd cf       	rjmp	.-6      	; 0xcda <DataflashManager_ReadBlocks+0x15e>
				return SPDR;
     ce0:	8e b5       	in	r24, 0x2e	; 46
     ce2:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     ce6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     ce8:	0d b4       	in	r0, 0x2d	; 45
     cea:	07 fe       	sbrs	r0, 7
     cec:	fd cf       	rjmp	.-6      	; 0xce8 <DataflashManager_ReadBlocks+0x16c>
				return SPDR;
     cee:	8e b5       	in	r24, 0x2e	; 46
     cf0:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     cf4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     cf6:	0d b4       	in	r0, 0x2d	; 45
     cf8:	07 fe       	sbrs	r0, 7
     cfa:	fd cf       	rjmp	.-6      	; 0xcf6 <DataflashManager_ReadBlocks+0x17a>
				return SPDR;
     cfc:	8e b5       	in	r24, 0x2e	; 46
     cfe:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     d02:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     d04:	0d b4       	in	r0, 0x2d	; 45
     d06:	07 fe       	sbrs	r0, 7
     d08:	fd cf       	rjmp	.-6      	; 0xd04 <DataflashManager_ReadBlocks+0x188>
				return SPDR;
     d0a:	8e b5       	in	r24, 0x2e	; 46
     d0c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     d10:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     d12:	0d b4       	in	r0, 0x2d	; 45
     d14:	07 fe       	sbrs	r0, 7
     d16:	fd cf       	rjmp	.-6      	; 0xd12 <DataflashManager_ReadBlocks+0x196>
				return SPDR;
     d18:	8e b5       	in	r24, 0x2e	; 46
     d1a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     d1e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     d20:	0d b4       	in	r0, 0x2d	; 45
     d22:	07 fe       	sbrs	r0, 7
     d24:	fd cf       	rjmp	.-6      	; 0xd20 <DataflashManager_ReadBlocks+0x1a4>
				return SPDR;
     d26:	8e b5       	in	r24, 0x2e	; 46
     d28:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     d2c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     d2e:	0d b4       	in	r0, 0x2d	; 45
     d30:	07 fe       	sbrs	r0, 7
     d32:	fd cf       	rjmp	.-6      	; 0xd2e <DataflashManager_ReadBlocks+0x1b2>
				return SPDR;
     d34:	8e b5       	in	r24, 0x2e	; 46
     d36:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     d3a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     d3c:	0d b4       	in	r0, 0x2d	; 45
     d3e:	07 fe       	sbrs	r0, 7
     d40:	fd cf       	rjmp	.-6      	; 0xd3c <DataflashManager_ReadBlocks+0x1c0>
				return SPDR;
     d42:	8e b5       	in	r24, 0x2e	; 46
     d44:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     d48:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     d4a:	0d b4       	in	r0, 0x2d	; 45
     d4c:	07 fe       	sbrs	r0, 7
     d4e:	fd cf       	rjmp	.-6      	; 0xd4a <DataflashManager_ReadBlocks+0x1ce>
				return SPDR;
     d50:	8e b5       	in	r24, 0x2e	; 46
     d52:	80 93 f1 00 	sts	0x00F1, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     d56:	f5 01       	movw	r30, r10
     d58:	86 a9       	ldd	r24, Z+54	; 0x36
     d5a:	88 23       	and	r24, r24
     d5c:	c9 f4       	brne	.+50     	; 0xd90 <DataflashManager_ReadBlocks+0x214>
			Endpoint_Write_Byte(Dataflash_ReceiveByte());
			Endpoint_Write_Byte(Dataflash_ReceiveByte());
			Endpoint_Write_Byte(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     d5e:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     d60:	d3 94       	inc	r13
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     d62:	f0 e2       	ldi	r31, 0x20	; 32
     d64:	df 16       	cp	r13, r31
     d66:	09 f0       	breq	.+2      	; 0xd6a <DataflashManager_ReadBlocks+0x1ee>
     d68:	57 cf       	rjmp	.-338    	; 0xc18 <DataflashManager_ReadBlocks+0x9c>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     d6a:	08 94       	sec
     d6c:	e1 08       	sbc	r14, r1
     d6e:	f1 08       	sbc	r15, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     d70:	e1 14       	cp	r14, r1
     d72:	f1 04       	cpc	r15, r1
     d74:	09 f0       	breq	.+2      	; 0xd78 <DataflashManager_ReadBlocks+0x1fc>
     d76:	4f cf       	rjmp	.-354    	; 0xc16 <DataflashManager_ReadBlocks+0x9a>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     d78:	80 91 e8 00 	lds	r24, 0x00E8
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     d7c:	85 fd       	sbrc	r24, 5
     d7e:	05 c0       	rjmp	.+10     	; 0xd8a <DataflashManager_ReadBlocks+0x20e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d80:	80 91 e8 00 	lds	r24, 0x00E8
     d84:	8e 77       	andi	r24, 0x7E	; 126
     d86:	80 93 e8 00 	sts	0x00E8, r24
     d8a:	8e b1       	in	r24, 0x0e	; 14
     d8c:	83 60       	ori	r24, 0x03	; 3
     d8e:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     d90:	0f 90       	pop	r0
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	ff 90       	pop	r15
     d9c:	ef 90       	pop	r14
     d9e:	df 90       	pop	r13
     da0:	cf 90       	pop	r12
     da2:	bf 90       	pop	r11
     da4:	af 90       	pop	r10
     da6:	08 95       	ret

00000da8 <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     da8:	8f 92       	push	r8
     daa:	9f 92       	push	r9
     dac:	af 92       	push	r10
     dae:	bf 92       	push	r11
     db0:	cf 92       	push	r12
     db2:	df 92       	push	r13
     db4:	ef 92       	push	r14
     db6:	ff 92       	push	r15
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	0f 92       	push	r0
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	5c 01       	movw	r10, r24
     dc8:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     dca:	09 e0       	ldi	r16, 0x09	; 9
     dcc:	44 0f       	add	r20, r20
     dce:	55 1f       	adc	r21, r21
     dd0:	66 1f       	adc	r22, r22
     dd2:	77 1f       	adc	r23, r23
     dd4:	0a 95       	dec	r16
     dd6:	d1 f7       	brne	.-12     	; 0xdcc <DataflashManager_WriteBlocks+0x24>
     dd8:	db 01       	movw	r26, r22
     dda:	ca 01       	movw	r24, r20
     ddc:	1a e0       	ldi	r17, 0x0A	; 10
     dde:	b6 95       	lsr	r27
     de0:	a7 95       	ror	r26
     de2:	97 95       	ror	r25
     de4:	87 95       	ror	r24
     de6:	1a 95       	dec	r17
     de8:	d1 f7       	brne	.-12     	; 0xdde <DataflashManager_WriteBlocks+0x36>
     dea:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     dec:	bf ef       	ldi	r27, 0xFF	; 255
     dee:	cb 2e       	mov	r12, r27
     df0:	b3 e0       	ldi	r27, 0x03	; 3
     df2:	db 2e       	mov	r13, r27
     df4:	c4 22       	and	r12, r20
     df6:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     df8:	b2 dc       	rcall	.-1692   	; 0x75e <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     dfa:	83 e5       	ldi	r24, 0x53	; 83
     dfc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     dfe:	0d b4       	in	r0, 0x2d	; 45
     e00:	07 fe       	sbrs	r0, 7
     e02:	fd cf       	rjmp	.-6      	; 0xdfe <DataflashManager_WriteBlocks+0x56>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     e04:	c8 01       	movw	r24, r16
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	d5 dc       	rcall	.-1622   	; 0x7b6 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     e0c:	c6 dc       	rcall	.-1652   	; 0x79a <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e0e:	84 e8       	ldi	r24, 0x84	; 132
     e10:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     e12:	0d b4       	in	r0, 0x2d	; 45
     e14:	07 fe       	sbrs	r0, 7
     e16:	fd cf       	rjmp	.-6      	; 0xe12 <DataflashManager_WriteBlocks+0x6a>
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	b6 01       	movw	r22, r12
     e1e:	cb dc       	rcall	.-1642   	; 0x7b6 <Dataflash_SendAddressBytes>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     e20:	0e 94 49 1c 	call	0x3892	; 0x3892 <Endpoint_WaitUntilReady>
     e24:	88 23       	and	r24, r24
     e26:	09 f0       	breq	.+2      	; 0xe2a <DataflashManager_WriteBlocks+0x82>
     e28:	eb c0       	rjmp	.+470    	; 0x1000 <DataflashManager_WriteBlocks+0x258>
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     e2a:	a4 e0       	ldi	r26, 0x04	; 4
     e2c:	d6 94       	lsr	r13
     e2e:	c7 94       	ror	r12
     e30:	aa 95       	dec	r26
     e32:	e1 f7       	brne	.-8      	; 0xe2c <DataflashManager_WriteBlocks+0x84>
     e34:	9c 2d       	mov	r25, r12
     e36:	47 01       	movw	r8, r14
     e38:	f5 e0       	ldi	r31, 0x05	; 5
     e3a:	88 0c       	add	r8, r8
     e3c:	99 1c       	adc	r9, r9
     e3e:	fa 95       	dec	r31
     e40:	e1 f7       	brne	.-8      	; 0xe3a <DataflashManager_WriteBlocks+0x92>
     e42:	dd 24       	eor	r13, r13
     e44:	be c0       	rjmp	.+380    	; 0xfc2 <DataflashManager_WriteBlocks+0x21a>
     e46:	cc 24       	eor	r12, r12
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e48:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     e4c:	85 fd       	sbrc	r24, 5
     e4e:	0c c0       	rjmp	.+24     	; 0xe68 <DataflashManager_WriteBlocks+0xc0>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e50:	80 91 e8 00 	lds	r24, 0x00E8
     e54:	8b 77       	andi	r24, 0x7B	; 123
     e56:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     e5a:	99 83       	std	Y+1, r25	; 0x01
     e5c:	0e 94 49 1c 	call	0x3892	; 0x3892 <Endpoint_WaitUntilReady>
     e60:	99 81       	ldd	r25, Y+1	; 0x01
     e62:	88 23       	and	r24, r24
     e64:	09 f0       	breq	.+2      	; 0xe68 <DataflashManager_WriteBlocks+0xc0>
     e66:	cc c0       	rjmp	.+408    	; 0x1000 <DataflashManager_WriteBlocks+0x258>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     e68:	90 34       	cpi	r25, 0x40	; 64
     e6a:	09 f0       	breq	.+2      	; 0xe6e <DataflashManager_WriteBlocks+0xc6>
     e6c:	39 c0       	rjmp	.+114    	; 0xee0 <DataflashManager_WriteBlocks+0x138>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     e6e:	95 dc       	rcall	.-1750   	; 0x79a <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     e70:	dd 20       	and	r13, r13
     e72:	11 f4       	brne	.+4      	; 0xe78 <DataflashManager_WriteBlocks+0xd0>
     e74:	83 e8       	ldi	r24, 0x83	; 131
     e76:	01 c0       	rjmp	.+2      	; 0xe7a <DataflashManager_WriteBlocks+0xd2>
     e78:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e7a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     e7c:	0d b4       	in	r0, 0x2d	; 45
     e7e:	07 fe       	sbrs	r0, 7
     e80:	fd cf       	rjmp	.-6      	; 0xe7c <DataflashManager_WriteBlocks+0xd4>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     e82:	c8 01       	movw	r24, r16
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	96 dc       	rcall	.-1748   	; 0x7b6 <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     e8a:	0f 5f       	subi	r16, 0xFF	; 255
     e8c:	1f 4f       	sbci	r17, 0xFF	; 255
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     e8e:	8e b1       	in	r24, 0x0e	; 14

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     e90:	83 70       	andi	r24, 0x03	; 3
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	09 f4       	brne	.+2      	; 0xe98 <DataflashManager_WriteBlocks+0xf0>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     e96:	d8 26       	eor	r13, r24

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     e98:	c8 01       	movw	r24, r16
     e9a:	61 dc       	rcall	.-1854   	; 0x75e <Dataflash_SelectChipFromPage>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     e9c:	20 e4       	ldi	r18, 0x40	; 64
     e9e:	82 16       	cp	r8, r18
     ea0:	91 04       	cpc	r9, r1
     ea2:	78 f4       	brcc	.+30     	; 0xec2 <DataflashManager_WriteBlocks+0x11a>
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     ea4:	7a dc       	rcall	.-1804   	; 0x79a <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     ea6:	dd 20       	and	r13, r13
     ea8:	11 f4       	brne	.+4      	; 0xeae <DataflashManager_WriteBlocks+0x106>
     eaa:	83 e5       	ldi	r24, 0x53	; 83
     eac:	01 c0       	rjmp	.+2      	; 0xeb0 <DataflashManager_WriteBlocks+0x108>
     eae:	85 e5       	ldi	r24, 0x55	; 85
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     eb0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     eb2:	0d b4       	in	r0, 0x2d	; 45
     eb4:	07 fe       	sbrs	r0, 7
     eb6:	fd cf       	rjmp	.-6      	; 0xeb2 <DataflashManager_WriteBlocks+0x10a>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     eb8:	c8 01       	movw	r24, r16
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	7b dc       	rcall	.-1802   	; 0x7b6 <Dataflash_SendAddressBytes>
					Dataflash_WaitWhileBusy();
     ec0:	6c dc       	rcall	.-1832   	; 0x79a <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     ec2:	dd 20       	and	r13, r13
     ec4:	11 f4       	brne	.+4      	; 0xeca <DataflashManager_WriteBlocks+0x122>
     ec6:	84 e8       	ldi	r24, 0x84	; 132
     ec8:	01 c0       	rjmp	.+2      	; 0xecc <DataflashManager_WriteBlocks+0x124>
     eca:	87 e8       	ldi	r24, 0x87	; 135
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ecc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ece:	0d b4       	in	r0, 0x2d	; 45
     ed0:	07 fe       	sbrs	r0, 7
     ed2:	fd cf       	rjmp	.-6      	; 0xece <DataflashManager_WriteBlocks+0x126>
				Dataflash_SendAddressBytes(0, 0);
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	6c dc       	rcall	.-1832   	; 0x7b6 <Dataflash_SendAddressBytes>
     ede:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     ee0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ee4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ee6:	0d b4       	in	r0, 0x2d	; 45
     ee8:	07 fe       	sbrs	r0, 7
     eea:	fd cf       	rjmp	.-6      	; 0xee6 <DataflashManager_WriteBlocks+0x13e>
     eec:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ef0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ef2:	0d b4       	in	r0, 0x2d	; 45
     ef4:	07 fe       	sbrs	r0, 7
     ef6:	fd cf       	rjmp	.-6      	; 0xef2 <DataflashManager_WriteBlocks+0x14a>
     ef8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     efc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     efe:	0d b4       	in	r0, 0x2d	; 45
     f00:	07 fe       	sbrs	r0, 7
     f02:	fd cf       	rjmp	.-6      	; 0xefe <DataflashManager_WriteBlocks+0x156>
     f04:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f08:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f0a:	0d b4       	in	r0, 0x2d	; 45
     f0c:	07 fe       	sbrs	r0, 7
     f0e:	fd cf       	rjmp	.-6      	; 0xf0a <DataflashManager_WriteBlocks+0x162>
     f10:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f14:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f16:	0d b4       	in	r0, 0x2d	; 45
     f18:	07 fe       	sbrs	r0, 7
     f1a:	fd cf       	rjmp	.-6      	; 0xf16 <DataflashManager_WriteBlocks+0x16e>
     f1c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f20:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f22:	0d b4       	in	r0, 0x2d	; 45
     f24:	07 fe       	sbrs	r0, 7
     f26:	fd cf       	rjmp	.-6      	; 0xf22 <DataflashManager_WriteBlocks+0x17a>
     f28:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f2c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f2e:	0d b4       	in	r0, 0x2d	; 45
     f30:	07 fe       	sbrs	r0, 7
     f32:	fd cf       	rjmp	.-6      	; 0xf2e <DataflashManager_WriteBlocks+0x186>
     f34:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f38:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f3a:	0d b4       	in	r0, 0x2d	; 45
     f3c:	07 fe       	sbrs	r0, 7
     f3e:	fd cf       	rjmp	.-6      	; 0xf3a <DataflashManager_WriteBlocks+0x192>
     f40:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f44:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f46:	0d b4       	in	r0, 0x2d	; 45
     f48:	07 fe       	sbrs	r0, 7
     f4a:	fd cf       	rjmp	.-6      	; 0xf46 <DataflashManager_WriteBlocks+0x19e>
     f4c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f50:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f52:	0d b4       	in	r0, 0x2d	; 45
     f54:	07 fe       	sbrs	r0, 7
     f56:	fd cf       	rjmp	.-6      	; 0xf52 <DataflashManager_WriteBlocks+0x1aa>
     f58:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f5c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f5e:	0d b4       	in	r0, 0x2d	; 45
     f60:	07 fe       	sbrs	r0, 7
     f62:	fd cf       	rjmp	.-6      	; 0xf5e <DataflashManager_WriteBlocks+0x1b6>
     f64:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f68:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f6a:	0d b4       	in	r0, 0x2d	; 45
     f6c:	07 fe       	sbrs	r0, 7
     f6e:	fd cf       	rjmp	.-6      	; 0xf6a <DataflashManager_WriteBlocks+0x1c2>
     f70:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f74:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f76:	0d b4       	in	r0, 0x2d	; 45
     f78:	07 fe       	sbrs	r0, 7
     f7a:	fd cf       	rjmp	.-6      	; 0xf76 <DataflashManager_WriteBlocks+0x1ce>
     f7c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f80:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f82:	0d b4       	in	r0, 0x2d	; 45
     f84:	07 fe       	sbrs	r0, 7
     f86:	fd cf       	rjmp	.-6      	; 0xf82 <DataflashManager_WriteBlocks+0x1da>
     f88:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f8c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f8e:	0d b4       	in	r0, 0x2d	; 45
     f90:	07 fe       	sbrs	r0, 7
     f92:	fd cf       	rjmp	.-6      	; 0xf8e <DataflashManager_WriteBlocks+0x1e6>
     f94:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f98:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f9a:	0d b4       	in	r0, 0x2d	; 45
     f9c:	07 fe       	sbrs	r0, 7
     f9e:	fd cf       	rjmp	.-6      	; 0xf9a <DataflashManager_WriteBlocks+0x1f2>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     fa0:	f5 01       	movw	r30, r10
     fa2:	86 a9       	ldd	r24, Z+54	; 0x36
     fa4:	88 23       	and	r24, r24
     fa6:	61 f5       	brne	.+88     	; 0x1000 <DataflashManager_WriteBlocks+0x258>
			Dataflash_SendByte(Endpoint_Read_Byte());
			Dataflash_SendByte(Endpoint_Read_Byte());
			Dataflash_SendByte(Endpoint_Read_Byte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     fa8:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     faa:	c3 94       	inc	r12
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     fac:	f0 e2       	ldi	r31, 0x20	; 32
     fae:	cf 16       	cp	r12, r31
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <DataflashManager_WriteBlocks+0x20c>
     fb2:	4a cf       	rjmp	.-364    	; 0xe48 <DataflashManager_WriteBlocks+0xa0>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter and reset the sub block counter */
		TotalBlocks--;
     fb4:	08 94       	sec
     fb6:	e1 08       	sbc	r14, r1
     fb8:	f1 08       	sbc	r15, r1
     fba:	20 ee       	ldi	r18, 0xE0	; 224
     fbc:	3f ef       	ldi	r19, 0xFF	; 255
     fbe:	82 0e       	add	r8, r18
     fc0:	93 1e       	adc	r9, r19

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     fc2:	e1 14       	cp	r14, r1
     fc4:	f1 04       	cpc	r15, r1
     fc6:	09 f0       	breq	.+2      	; 0xfca <DataflashManager_WriteBlocks+0x222>
     fc8:	3e cf       	rjmp	.-388    	; 0xe46 <DataflashManager_WriteBlocks+0x9e>
		/* Decrement the blocks remaining counter and reset the sub block counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     fca:	e7 db       	rcall	.-2098   	; 0x79a <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     fcc:	dd 20       	and	r13, r13
     fce:	11 f4       	brne	.+4      	; 0xfd4 <DataflashManager_WriteBlocks+0x22c>
     fd0:	83 e8       	ldi	r24, 0x83	; 131
     fd2:	01 c0       	rjmp	.+2      	; 0xfd6 <DataflashManager_WriteBlocks+0x22e>
     fd4:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     fd6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     fd8:	0d b4       	in	r0, 0x2d	; 45
     fda:	07 fe       	sbrs	r0, 7
     fdc:	fd cf       	rjmp	.-6      	; 0xfd8 <DataflashManager_WriteBlocks+0x230>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     fde:	c8 01       	movw	r24, r16
     fe0:	60 e0       	ldi	r22, 0x00	; 0
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	e8 db       	rcall	.-2096   	; 0x7b6 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     fe6:	d9 db       	rcall	.-2126   	; 0x79a <Dataflash_WaitWhileBusy>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     fe8:	80 91 e8 00 	lds	r24, 0x00E8

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     fec:	85 fd       	sbrc	r24, 5
     fee:	05 c0       	rjmp	.+10     	; 0xffa <DataflashManager_WriteBlocks+0x252>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ff0:	80 91 e8 00 	lds	r24, 0x00E8
     ff4:	8b 77       	andi	r24, 0x7B	; 123
     ff6:	80 93 e8 00 	sts	0x00E8, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     ffa:	8e b1       	in	r24, 0x0e	; 14
     ffc:	83 60       	ori	r24, 0x03	; 3
     ffe:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
    1000:	0f 90       	pop	r0
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	ff 90       	pop	r15
    100c:	ef 90       	pop	r14
    100e:	df 90       	pop	r13
    1010:	cf 90       	pop	r12
    1012:	bf 90       	pop	r11
    1014:	af 90       	pop	r10
    1016:	9f 90       	pop	r9
    1018:	8f 90       	pop	r8
    101a:	08 95       	ret

0000101c <SCSI_Command_Inquiry>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    101c:	af 92       	push	r10
    101e:	bf 92       	push	r11
    1020:	cf 92       	push	r12
    1022:	df 92       	push	r13
    1024:	ef 92       	push	r14
    1026:	ff 92       	push	r15
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	6c 01       	movw	r12, r24

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;

	return true;
}
    1036:	ad b6       	in	r10, 0x3d	; 61
    1038:	be b6       	in	r11, 0x3e	; 62

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
    103a:	fc 01       	movw	r30, r24
    103c:	05 8d       	ldd	r16, Z+29	; 0x1d
    103e:	14 8d       	ldd	r17, Z+28	; 0x1c
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = (AllocationLength < sizeof(InquiryData))? AllocationLength :
	                                                                       sizeof(InquiryData);

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
    1040:	82 8d       	ldd	r24, Z+26	; 0x1a
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	83 70       	andi	r24, 0x03	; 3
    1046:	90 70       	andi	r25, 0x00	; 0
    1048:	89 2b       	or	r24, r25
    104a:	19 f4       	brne	.+6      	; 0x1052 <SCSI_Command_Inquiry+0x36>
    104c:	83 8d       	ldd	r24, Z+27	; 0x1b
    104e:	88 23       	and	r24, r24
    1050:	69 f0       	breq	.+26     	; 0x106c <SCSI_Command_Inquiry+0x50>
	     MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
	{
		/* Optional but unsupported bits set - update the SENSE key and fail the request */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    1052:	80 91 aa 01 	lds	r24, 0x01AA
    1056:	80 7f       	andi	r24, 0xF0	; 240
    1058:	85 60       	ori	r24, 0x05	; 5
    105a:	80 93 aa 01 	sts	0x01AA, r24
    105e:	84 e2       	ldi	r24, 0x24	; 36
    1060:	80 93 b4 01 	sts	0x01B4, r24
    1064:	10 92 b5 01 	sts	0x01B5, r1
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	35 c0       	rjmp	.+106    	; 0x10d6 <SCSI_Command_Inquiry+0xba>
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = (AllocationLength < sizeof(InquiryData))? AllocationLength :
	                                                                       sizeof(InquiryData);
    106c:	78 01       	movw	r14, r16
    106e:	05 32       	cpi	r16, 0x25	; 37
    1070:	11 05       	cpc	r17, r1
    1072:	18 f0       	brcs	.+6      	; 0x107a <SCSI_Command_Inquiry+0x5e>
    1074:	84 e2       	ldi	r24, 0x24	; 36
    1076:	e8 2e       	mov	r14, r24
    1078:	f1 2c       	mov	r15, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NO_STREAM_CALLBACK);
    107a:	84 e8       	ldi	r24, 0x84	; 132
    107c:	91 e0       	ldi	r25, 0x01	; 1
    107e:	b7 01       	movw	r22, r14
    1080:	40 e0       	ldi	r20, 0x00	; 0
    1082:	50 e0       	ldi	r21, 0x00	; 0
    1084:	0e 94 ce 20 	call	0x419c	; 0x419c <Endpoint_Write_Stream_LE>

	uint8_t PadBytes[AllocationLength - BytesTransferred];
    1088:	b8 01       	movw	r22, r16
    108a:	6e 19       	sub	r22, r14
    108c:	7f 09       	sbc	r23, r15
    108e:	8d b7       	in	r24, 0x3d	; 61
    1090:	9e b7       	in	r25, 0x3e	; 62
    1092:	86 1b       	sub	r24, r22
    1094:	97 0b       	sbc	r25, r23
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	9e bf       	out	0x3e, r25	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	8d bf       	out	0x3d, r24	; 61

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Write_Stream_LE(&PadBytes, sizeof(PadBytes), NO_STREAM_CALLBACK);
    10a0:	01 96       	adiw	r24, 0x01	; 1
    10a2:	40 e0       	ldi	r20, 0x00	; 0
    10a4:	50 e0       	ldi	r21, 0x00	; 0
    10a6:	0e 94 ce 20 	call	0x419c	; 0x419c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10aa:	80 91 e8 00 	lds	r24, 0x00E8
    10ae:	8e 77       	andi	r24, 0x7E	; 126
    10b0:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    10b4:	97 01       	movw	r18, r14
    10b6:	40 e0       	ldi	r20, 0x00	; 0
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	f6 01       	movw	r30, r12
    10bc:	82 89       	ldd	r24, Z+18	; 0x12
    10be:	93 89       	ldd	r25, Z+19	; 0x13
    10c0:	a4 89       	ldd	r26, Z+20	; 0x14
    10c2:	b5 89       	ldd	r27, Z+21	; 0x15
    10c4:	82 1b       	sub	r24, r18
    10c6:	93 0b       	sbc	r25, r19
    10c8:	a4 0b       	sbc	r26, r20
    10ca:	b5 0b       	sbc	r27, r21
    10cc:	82 8b       	std	Z+18, r24	; 0x12
    10ce:	93 8b       	std	Z+19, r25	; 0x13
    10d0:	a4 8b       	std	Z+20, r26	; 0x14
    10d2:	b5 8b       	std	Z+21, r27	; 0x15
    10d4:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	be be       	out	0x3e, r11	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	ad be       	out	0x3d, r10	; 61
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	ff 90       	pop	r15
    10ea:	ef 90       	pop	r14
    10ec:	df 90       	pop	r13
    10ee:	cf 90       	pop	r12
    10f0:	bf 90       	pop	r11
    10f2:	af 90       	pop	r10
    10f4:	08 95       	ret

000010f6 <SCSI_Command_Request_Sense>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    10f6:	8f 92       	push	r8
    10f8:	9f 92       	push	r9
    10fa:	bf 92       	push	r11
    10fc:	cf 92       	push	r12
    10fe:	df 92       	push	r13
    1100:	ef 92       	push	r14
    1102:	ff 92       	push	r15
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	6c 01       	movw	r12, r24

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;

	return true;
}
    1112:	8d b6       	in	r8, 0x3d	; 61
    1114:	9e b6       	in	r9, 0x3e	; 62
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
    1116:	fc 01       	movw	r30, r24
    1118:	05 8d       	ldd	r16, Z+29	; 0x1d
	uint8_t  BytesTransferred = (AllocationLength < sizeof(SenseData))? AllocationLength : sizeof(SenseData);
    111a:	b0 2e       	mov	r11, r16
    111c:	03 31       	cpi	r16, 0x13	; 19
    111e:	10 f0       	brcs	.+4      	; 0x1124 <SCSI_Command_Request_Sense+0x2e>
    1120:	92 e1       	ldi	r25, 0x12	; 18
    1122:	b9 2e       	mov	r11, r25

	uint8_t PadBytes[AllocationLength - BytesTransferred];
    1124:	10 e0       	ldi	r17, 0x00	; 0
    1126:	0b 19       	sub	r16, r11
    1128:	11 09       	sbc	r17, r1
    112a:	8d b7       	in	r24, 0x3d	; 61
    112c:	9e b7       	in	r25, 0x3e	; 62
    112e:	80 1b       	sub	r24, r16
    1130:	91 0b       	sbc	r25, r17
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	9e bf       	out	0x3e, r25	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	8d bf       	out	0x3d, r24	; 61
    113c:	ed b6       	in	r14, 0x3d	; 61
    113e:	fe b6       	in	r15, 0x3e	; 62
    1140:	08 94       	sec
    1142:	e1 1c       	adc	r14, r1
    1144:	f1 1c       	adc	r15, r1

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NO_STREAM_CALLBACK);
    1146:	88 ea       	ldi	r24, 0xA8	; 168
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	6b 2d       	mov	r22, r11
    114c:	70 e0       	ldi	r23, 0x00	; 0
    114e:	40 e0       	ldi	r20, 0x00	; 0
    1150:	50 e0       	ldi	r21, 0x00	; 0
    1152:	0e 94 ce 20 	call	0x419c	; 0x419c <Endpoint_Write_Stream_LE>
	Endpoint_Write_Stream_LE(&PadBytes, sizeof(PadBytes), NO_STREAM_CALLBACK);
    1156:	c7 01       	movw	r24, r14
    1158:	b8 01       	movw	r22, r16
    115a:	40 e0       	ldi	r20, 0x00	; 0
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	0e 94 ce 20 	call	0x419c	; 0x419c <Endpoint_Write_Stream_LE>
    1162:	80 91 e8 00 	lds	r24, 0x00E8
    1166:	8e 77       	andi	r24, 0x7E	; 126
    1168:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    116c:	f6 01       	movw	r30, r12
    116e:	82 89       	ldd	r24, Z+18	; 0x12
    1170:	93 89       	ldd	r25, Z+19	; 0x13
    1172:	a4 89       	ldd	r26, Z+20	; 0x14
    1174:	b5 89       	ldd	r27, Z+21	; 0x15
    1176:	8b 19       	sub	r24, r11
    1178:	91 09       	sbc	r25, r1
    117a:	a1 09       	sbc	r26, r1
    117c:	b1 09       	sbc	r27, r1
    117e:	82 8b       	std	Z+18, r24	; 0x12
    1180:	93 8b       	std	Z+19, r25	; 0x13
    1182:	a4 8b       	std	Z+20, r26	; 0x14
    1184:	b5 8b       	std	Z+21, r27	; 0x15

	return true;
}
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	9e be       	out	0x3e, r9	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	8d be       	out	0x3d, r8	; 61
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	ff 90       	pop	r15
    119c:	ef 90       	pop	r14
    119e:	df 90       	pop	r13
    11a0:	cf 90       	pop	r12
    11a2:	bf 90       	pop	r11
    11a4:	9f 90       	pop	r9
    11a6:	8f 90       	pop	r8
    11a8:	08 95       	ret

000011aa <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
    11aa:	0f 93       	push	r16
    11ac:	1f 93       	push	r17
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	8c 01       	movw	r16, r24
    11b4:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
    11b6:	f8 01       	movw	r30, r16
    11b8:	46 8d       	ldd	r20, Z+30	; 0x1e
    11ba:	55 8d       	ldd	r21, Z+29	; 0x1d
    11bc:	64 8d       	ldd	r22, Z+28	; 0x1c
    11be:	73 8d       	ldd	r23, Z+27	; 0x1b

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
    11c0:	c1 a1       	ldd	r28, Z+33	; 0x21
    11c2:	d0 a1       	ldd	r29, Z+32	; 0x20

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= VIRTUAL_MEMORY_BLOCKS)
    11c4:	40 30       	cpi	r20, 0x00	; 0
    11c6:	f0 e8       	ldi	r31, 0x80	; 128
    11c8:	5f 07       	cpc	r21, r31
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	6f 07       	cpc	r22, r31
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	7f 07       	cpc	r23, r31
    11d2:	68 f0       	brcs	.+26     	; 0x11ee <SCSI_Command_ReadWrite_10+0x44>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    11d4:	80 91 aa 01 	lds	r24, 0x01AA
    11d8:	80 7f       	andi	r24, 0xF0	; 240
    11da:	85 60       	ori	r24, 0x05	; 5
    11dc:	80 93 aa 01 	sts	0x01AA, r24
    11e0:	81 e2       	ldi	r24, 0x21	; 33
    11e2:	80 93 b4 01 	sts	0x01B4, r24
    11e6:	10 92 b5 01 	sts	0x01B5, r1
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	21 c0       	rjmp	.+66     	; 0x1230 <SCSI_Command_ReadWrite_10+0x86>

		return false;
	}

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
    11ee:	88 23       	and	r24, r24
    11f0:	21 f0       	breq	.+8      	; 0x11fa <SCSI_Command_ReadWrite_10+0x50>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    11f2:	c8 01       	movw	r24, r16
    11f4:	9e 01       	movw	r18, r28
    11f6:	c2 dc       	rcall	.-1660   	; 0xb7c <DataflashManager_ReadBlocks>
    11f8:	03 c0       	rjmp	.+6      	; 0x1200 <SCSI_Command_ReadWrite_10+0x56>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    11fa:	c8 01       	movw	r24, r16
    11fc:	9e 01       	movw	r18, r28
    11fe:	d4 dd       	rcall	.-1112   	; 0xda8 <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
    1200:	9e 01       	movw	r18, r28
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	69 e0       	ldi	r22, 0x09	; 9
    1208:	22 0f       	add	r18, r18
    120a:	33 1f       	adc	r19, r19
    120c:	44 1f       	adc	r20, r20
    120e:	55 1f       	adc	r21, r21
    1210:	6a 95       	dec	r22
    1212:	d1 f7       	brne	.-12     	; 0x1208 <SCSI_Command_ReadWrite_10+0x5e>
    1214:	f8 01       	movw	r30, r16
    1216:	82 89       	ldd	r24, Z+18	; 0x12
    1218:	93 89       	ldd	r25, Z+19	; 0x13
    121a:	a4 89       	ldd	r26, Z+20	; 0x14
    121c:	b5 89       	ldd	r27, Z+21	; 0x15
    121e:	82 1b       	sub	r24, r18
    1220:	93 0b       	sbc	r25, r19
    1222:	a4 0b       	sbc	r26, r20
    1224:	b5 0b       	sbc	r27, r21
    1226:	82 8b       	std	Z+18, r24	; 0x12
    1228:	93 8b       	std	Z+19, r25	; 0x13
    122a:	a4 8b       	std	Z+20, r26	; 0x14
    122c:	b5 8b       	std	Z+21, r27	; 0x15
    122e:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	08 95       	ret

0000123a <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	28 97       	sbiw	r28, 0x08	; 8
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	cd bf       	out	0x3d, r28	; 61
    1252:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
    1254:	fc 01       	movw	r30, r24
    1256:	81 8d       	ldd	r24, Z+25	; 0x19
    1258:	8e 31       	cpi	r24, 0x1E	; 30
    125a:	09 f4       	brne	.+2      	; 0x125e <SCSI_DecodeSCSICommand+0x24>
    125c:	79 c0       	rjmp	.+242    	; 0x1350 <SCSI_DecodeSCSICommand+0x116>
    125e:	8f 31       	cpi	r24, 0x1F	; 31
    1260:	70 f4       	brcc	.+28     	; 0x127e <SCSI_DecodeSCSICommand+0x44>
    1262:	83 30       	cpi	r24, 0x03	; 3
    1264:	f9 f0       	breq	.+62     	; 0x12a4 <SCSI_DecodeSCSICommand+0x6a>
    1266:	84 30       	cpi	r24, 0x04	; 4
    1268:	20 f4       	brcc	.+8      	; 0x1272 <SCSI_DecodeSCSICommand+0x38>
    126a:	88 23       	and	r24, r24
    126c:	09 f4       	brne	.+2      	; 0x1270 <SCSI_DecodeSCSICommand+0x36>
    126e:	70 c0       	rjmp	.+224    	; 0x1350 <SCSI_DecodeSCSICommand+0x116>
    1270:	75 c0       	rjmp	.+234    	; 0x135c <SCSI_DecodeSCSICommand+0x122>
    1272:	82 31       	cpi	r24, 0x12	; 18
    1274:	a1 f0       	breq	.+40     	; 0x129e <SCSI_DecodeSCSICommand+0x64>
    1276:	8d 31       	cpi	r24, 0x1D	; 29
    1278:	09 f0       	breq	.+2      	; 0x127c <SCSI_DecodeSCSICommand+0x42>
    127a:	70 c0       	rjmp	.+224    	; 0x135c <SCSI_DecodeSCSICommand+0x122>
    127c:	48 c0       	rjmp	.+144    	; 0x130e <SCSI_DecodeSCSICommand+0xd4>
    127e:	88 32       	cpi	r24, 0x28	; 40
    1280:	09 f4       	brne	.+2      	; 0x1284 <SCSI_DecodeSCSICommand+0x4a>
    1282:	62 c0       	rjmp	.+196    	; 0x1348 <SCSI_DecodeSCSICommand+0x10e>
    1284:	89 32       	cpi	r24, 0x29	; 41
    1286:	20 f4       	brcc	.+8      	; 0x1290 <SCSI_DecodeSCSICommand+0x56>
    1288:	85 32       	cpi	r24, 0x25	; 37
    128a:	09 f0       	breq	.+2      	; 0x128e <SCSI_DecodeSCSICommand+0x54>
    128c:	67 c0       	rjmp	.+206    	; 0x135c <SCSI_DecodeSCSICommand+0x122>
    128e:	0d c0       	rjmp	.+26     	; 0x12aa <SCSI_DecodeSCSICommand+0x70>
    1290:	8a 32       	cpi	r24, 0x2A	; 42
    1292:	09 f4       	brne	.+2      	; 0x1296 <SCSI_DecodeSCSICommand+0x5c>
    1294:	56 c0       	rjmp	.+172    	; 0x1342 <SCSI_DecodeSCSICommand+0x108>
    1296:	8f 32       	cpi	r24, 0x2F	; 47
    1298:	09 f0       	breq	.+2      	; 0x129c <SCSI_DecodeSCSICommand+0x62>
    129a:	60 c0       	rjmp	.+192    	; 0x135c <SCSI_DecodeSCSICommand+0x122>
    129c:	59 c0       	rjmp	.+178    	; 0x1350 <SCSI_DecodeSCSICommand+0x116>
	{
		case SCSI_CMD_INQUIRY:
			CommandSuccess = SCSI_Command_Inquiry(MSInterfaceInfo);
    129e:	c8 01       	movw	r24, r16
    12a0:	bd de       	rcall	.-646    	; 0x101c <SCSI_Command_Inquiry>
    12a2:	66 c0       	rjmp	.+204    	; 0x1370 <SCSI_DecodeSCSICommand+0x136>
			break;
		case SCSI_CMD_REQUEST_SENSE:
			CommandSuccess = SCSI_Command_Request_Sense(MSInterfaceInfo);
    12a4:	c8 01       	movw	r24, r16
    12a6:	27 df       	rcall	.-434    	; 0x10f6 <SCSI_Command_Request_Sense>
    12a8:	63 c0       	rjmp	.+198    	; 0x1370 <SCSI_DecodeSCSICommand+0x136>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (VIRTUAL_MEMORY_BLOCKS - 1);
    12aa:	8f ef       	ldi	r24, 0xFF	; 255
    12ac:	9f e7       	ldi	r25, 0x7F	; 127
    12ae:	a0 e0       	ldi	r26, 0x00	; 0
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	89 83       	std	Y+1, r24	; 0x01
    12b4:	9a 83       	std	Y+2, r25	; 0x02
    12b6:	ab 83       	std	Y+3, r26	; 0x03
    12b8:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	92 e0       	ldi	r25, 0x02	; 2
    12be:	a0 e0       	ldi	r26, 0x00	; 0
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	8d 83       	std	Y+5, r24	; 0x05
    12c4:	9e 83       	std	Y+6, r25	; 0x06
    12c6:	af 83       	std	Y+7, r26	; 0x07
    12c8:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NO_STREAM_CALLBACK);
    12ca:	ce 01       	movw	r24, r28
    12cc:	01 96       	adiw	r24, 0x01	; 1
    12ce:	64 e0       	ldi	r22, 0x04	; 4
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	40 e0       	ldi	r20, 0x00	; 0
    12d4:	50 e0       	ldi	r21, 0x00	; 0
    12d6:	0e 94 93 20 	call	0x4126	; 0x4126 <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NO_STREAM_CALLBACK);
    12da:	ce 01       	movw	r24, r28
    12dc:	05 96       	adiw	r24, 0x05	; 5
    12de:	64 e0       	ldi	r22, 0x04	; 4
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	40 e0       	ldi	r20, 0x00	; 0
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	0e 94 93 20 	call	0x4126	; 0x4126 <Endpoint_Write_Stream_BE>
    12ea:	80 91 e8 00 	lds	r24, 0x00E8
    12ee:	8e 77       	andi	r24, 0x7E	; 126
    12f0:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
    12f4:	f8 01       	movw	r30, r16
    12f6:	82 89       	ldd	r24, Z+18	; 0x12
    12f8:	93 89       	ldd	r25, Z+19	; 0x13
    12fa:	a4 89       	ldd	r26, Z+20	; 0x14
    12fc:	b5 89       	ldd	r27, Z+21	; 0x15
    12fe:	08 97       	sbiw	r24, 0x08	; 8
    1300:	a1 09       	sbc	r26, r1
    1302:	b1 09       	sbc	r27, r1
    1304:	82 8b       	std	Z+18, r24	; 0x12
    1306:	93 8b       	std	Z+19, r25	; 0x13
    1308:	a4 8b       	std	Z+20, r26	; 0x14
    130a:	b5 8b       	std	Z+21, r27	; 0x15
    130c:	35 c0       	rjmp	.+106    	; 0x1378 <SCSI_DecodeSCSICommand+0x13e>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
    130e:	f8 01       	movw	r30, r16
    1310:	82 8d       	ldd	r24, Z+26	; 0x1a
    1312:	82 fd       	sbrc	r24, 2
    1314:	08 c0       	rjmp	.+16     	; 0x1326 <SCSI_DecodeSCSICommand+0xec>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    1316:	80 91 aa 01 	lds	r24, 0x01AA
    131a:	80 7f       	andi	r24, 0xF0	; 240
    131c:	85 60       	ori	r24, 0x05	; 5
    131e:	80 93 aa 01 	sts	0x01AA, r24
    1322:	84 e2       	ldi	r24, 0x24	; 36
    1324:	22 c0       	rjmp	.+68     	; 0x136a <SCSI_DecodeSCSICommand+0x130>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
    1326:	ff db       	rcall	.-2050   	; 0xb26 <DataflashManager_CheckDataflashOperation>
    1328:	88 23       	and	r24, r24
    132a:	91 f4       	brne	.+36     	; 0x1350 <SCSI_DecodeSCSICommand+0x116>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
    132c:	80 91 aa 01 	lds	r24, 0x01AA
    1330:	80 7f       	andi	r24, 0xF0	; 240
    1332:	84 60       	ori	r24, 0x04	; 4
    1334:	80 93 aa 01 	sts	0x01AA, r24
    1338:	10 92 b4 01 	sts	0x01B4, r1
    133c:	10 92 b5 01 	sts	0x01B5, r1
    1340:	19 c0       	rjmp	.+50     	; 0x1374 <SCSI_DecodeSCSICommand+0x13a>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
    1342:	c8 01       	movw	r24, r16
    1344:	60 e0       	ldi	r22, 0x00	; 0
    1346:	02 c0       	rjmp	.+4      	; 0x134c <SCSI_DecodeSCSICommand+0x112>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
    1348:	c8 01       	movw	r24, r16
    134a:	61 e0       	ldi	r22, 0x01	; 1
    134c:	2e df       	rcall	.-420    	; 0x11aa <SCSI_Command_ReadWrite_10>
    134e:	10 c0       	rjmp	.+32     	; 0x1370 <SCSI_DecodeSCSICommand+0x136>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
    1350:	f8 01       	movw	r30, r16
    1352:	12 8a       	std	Z+18, r1	; 0x12
    1354:	13 8a       	std	Z+19, r1	; 0x13
    1356:	14 8a       	std	Z+20, r1	; 0x14
    1358:	15 8a       	std	Z+21, r1	; 0x15
    135a:	0e c0       	rjmp	.+28     	; 0x1378 <SCSI_DecodeSCSICommand+0x13e>
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    135c:	80 91 aa 01 	lds	r24, 0x01AA
    1360:	80 7f       	andi	r24, 0xF0	; 240
    1362:	85 60       	ori	r24, 0x05	; 5
    1364:	80 93 aa 01 	sts	0x01AA, r24
    1368:	80 e2       	ldi	r24, 0x20	; 32
    136a:	80 93 b4 01 	sts	0x01B4, r24
    136e:	e6 cf       	rjmp	.-52     	; 0x133c <SCSI_DecodeSCSICommand+0x102>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
    1370:	88 23       	and	r24, r24
    1372:	11 f4       	brne	.+4      	; 0x1378 <SCSI_DecodeSCSICommand+0x13e>
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	0a c0       	rjmp	.+20     	; 0x138c <SCSI_DecodeSCSICommand+0x152>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
    1378:	80 91 aa 01 	lds	r24, 0x01AA
    137c:	80 7f       	andi	r24, 0xF0	; 240
    137e:	80 93 aa 01 	sts	0x01AA, r24
    1382:	10 92 b4 01 	sts	0x01B4, r1
    1386:	10 92 b5 01 	sts	0x01B5, r1
    138a:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	}

	return false;
}
    138c:	28 96       	adiw	r28, 0x08	; 8
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	de bf       	out	0x3e, r29	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	cd bf       	out	0x3d, r28	; 61
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	08 95       	ret

000013a2 <DS1307_GetTime>:
}

void DS1307_GetTime(uint8_t* const Hour,
                    uint8_t* const Minute,
                    uint8_t* const Second)
{
    13a2:	cf 92       	push	r12
    13a4:	df 92       	push	r13
    13a6:	ef 92       	push	r14
    13a8:	ff 92       	push	r15
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <DS1307_GetTime+0x12>
    13b4:	0f 92       	push	r0
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	6c 01       	movw	r12, r24
    13bc:	7b 01       	movw	r14, r22
    13be:	8a 01       	movw	r16, r20
	*Minute = 1;
	*Second = 1;
	return;
#endif

	if (TWI_StartTransmission(DS1307_ADDRESS_WRITE, 10))
    13c0:	80 ed       	ldi	r24, 0xD0	; 208
    13c2:	6a e0       	ldi	r22, 0x0A	; 10
    13c4:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <TWI_StartTransmission>
    13c8:	88 23       	and	r24, r24
    13ca:	71 f0       	breq	.+28     	; 0x13e8 <DS1307_GetTime+0x46>
			 *
			 *  \return Boolean true if the recipient ACKed the byte, false otherwise
			 */
			static inline bool TWI_SendByte(const uint8_t Byte)
			{
				TWDR = Byte;
    13cc:	10 92 bb 00 	sts	0x00BB, r1
				TWCR = ((1 << TWINT) | (1 << TWEN));
    13d0:	84 e8       	ldi	r24, 0x84	; 132
    13d2:	80 93 bc 00 	sts	0x00BC, r24
				while (!(TWCR & (1 << TWINT)));
    13d6:	80 91 bc 00 	lds	r24, 0x00BC
    13da:	87 ff       	sbrs	r24, 7
    13dc:	fc cf       	rjmp	.-8      	; 0x13d6 <DS1307_GetTime+0x34>

				return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    13de:	80 91 b9 00 	lds	r24, 0x00B9

			/** Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
			static inline void TWI_StopTransmission(void) ATTR_ALWAYS_INLINE;
			static inline void TWI_StopTransmission(void)
			{
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    13e2:	84 e9       	ldi	r24, 0x94	; 148
    13e4:	80 93 bc 00 	sts	0x00BC, r24
		TWI_StopTransmission();
	}

	DS1307_TimeRegs_t CurrentRTCTime;

	if (TWI_StartTransmission(DS1307_ADDRESS_READ, 10))
    13e8:	81 ed       	ldi	r24, 0xD1	; 209
    13ea:	6a e0       	ldi	r22, 0x0A	; 10
    13ec:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <TWI_StartTransmission>
    13f0:	88 23       	and	r24, r24
    13f2:	39 f1       	breq	.+78     	; 0x1442 <DS1307_GetTime+0xa0>
				uint8_t TWCRMask = ((1 << TWINT) | (1 << TWEN));

				if (!(LastByte))
				  TWCRMask |= (1 << TWEA);

				TWCR = TWCRMask;
    13f4:	84 ec       	ldi	r24, 0xC4	; 196
    13f6:	80 93 bc 00 	sts	0x00BC, r24
				while (!(TWCR & (1 << TWINT)));
    13fa:	80 91 bc 00 	lds	r24, 0x00BC
    13fe:	87 ff       	sbrs	r24, 7
    1400:	fc cf       	rjmp	.-8      	; 0x13fa <DS1307_GetTime+0x58>
				*Byte = TWDR;
    1402:	20 91 bb 00 	lds	r18, 0x00BB

				return ((TWSR & TW_STATUS_MASK) == TW_MR_DATA_ACK);
    1406:	80 91 b9 00 	lds	r24, 0x00B9
				uint8_t TWCRMask = ((1 << TWINT) | (1 << TWEN));

				if (!(LastByte))
				  TWCRMask |= (1 << TWEA);

				TWCR = TWCRMask;
    140a:	84 ec       	ldi	r24, 0xC4	; 196
    140c:	80 93 bc 00 	sts	0x00BC, r24
				while (!(TWCR & (1 << TWINT)));
    1410:	80 91 bc 00 	lds	r24, 0x00BC
    1414:	87 ff       	sbrs	r24, 7
    1416:	fc cf       	rjmp	.-8      	; 0x1410 <DS1307_GetTime+0x6e>
				*Byte = TWDR;
    1418:	90 91 bb 00 	lds	r25, 0x00BB

				return ((TWSR & TW_STATUS_MASK) == TW_MR_DATA_ACK);
    141c:	80 91 b9 00 	lds	r24, 0x00B9
				uint8_t TWCRMask = ((1 << TWINT) | (1 << TWEN));

				if (!(LastByte))
				  TWCRMask |= (1 << TWEA);

				TWCR = TWCRMask;
    1420:	84 e8       	ldi	r24, 0x84	; 132
    1422:	80 93 bc 00 	sts	0x00BC, r24
				while (!(TWCR & (1 << TWINT)));
    1426:	80 91 bc 00 	lds	r24, 0x00BC
    142a:	87 ff       	sbrs	r24, 7
    142c:	fc cf       	rjmp	.-8      	; 0x1426 <DS1307_GetTime+0x84>
				*Byte = TWDR;
    142e:	29 83       	std	Y+1, r18	; 0x01
    1430:	9a 83       	std	Y+2, r25	; 0x02
    1432:	80 91 bb 00 	lds	r24, 0x00BB
    1436:	8b 83       	std	Y+3, r24	; 0x03

				return ((TWSR & TW_STATUS_MASK) == TW_MR_DATA_ACK);
    1438:	80 91 b9 00 	lds	r24, 0x00B9

			/** Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
			static inline void TWI_StopTransmission(void) ATTR_ALWAYS_INLINE;
			static inline void TWI_StopTransmission(void)
			{
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    143c:	84 e9       	ldi	r24, 0x94	; 148
    143e:	80 93 bc 00 	sts	0x00BC, r24
		TWI_ReceiveByte(&CurrentRTCTime.Byte3.IntVal, true);

		TWI_StopTransmission();
	}

	*Second  = (CurrentRTCTime.Byte1.Fields.TenSec  * 10) + CurrentRTCTime.Byte1.Fields.Sec;
    1442:	49 81       	ldd	r20, Y+1	; 0x01
    1444:	24 2f       	mov	r18, r20
    1446:	22 95       	swap	r18
    1448:	2f 70       	andi	r18, 0x0F	; 15
    144a:	82 2f       	mov	r24, r18
    144c:	87 70       	andi	r24, 0x07	; 7
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	9c 01       	movw	r18, r24
    1452:	a3 e0       	ldi	r26, 0x03	; 3
    1454:	22 0f       	add	r18, r18
    1456:	33 1f       	adc	r19, r19
    1458:	aa 95       	dec	r26
    145a:	e1 f7       	brne	.-8      	; 0x1454 <DS1307_GetTime+0xb2>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	28 0f       	add	r18, r24
    1462:	39 1f       	adc	r19, r25
    1464:	4f 70       	andi	r20, 0x0F	; 15
    1466:	42 0f       	add	r20, r18
    1468:	f8 01       	movw	r30, r16
    146a:	40 83       	st	Z, r20
	*Minute  = (CurrentRTCTime.Byte2.Fields.TenMin  * 10) + CurrentRTCTime.Byte2.Fields.Min;
    146c:	4a 81       	ldd	r20, Y+2	; 0x02
    146e:	24 2f       	mov	r18, r20
    1470:	22 95       	swap	r18
    1472:	2f 70       	andi	r18, 0x0F	; 15
    1474:	82 2f       	mov	r24, r18
    1476:	87 70       	andi	r24, 0x07	; 7
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	9c 01       	movw	r18, r24
    147c:	e3 e0       	ldi	r30, 0x03	; 3
    147e:	22 0f       	add	r18, r18
    1480:	33 1f       	adc	r19, r19
    1482:	ea 95       	dec	r30
    1484:	e1 f7       	brne	.-8      	; 0x147e <DS1307_GetTime+0xdc>
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	28 0f       	add	r18, r24
    148c:	39 1f       	adc	r19, r25
    148e:	4f 70       	andi	r20, 0x0F	; 15
    1490:	42 0f       	add	r20, r18
    1492:	f7 01       	movw	r30, r14
    1494:	40 83       	st	Z, r20
	*Hour    = (CurrentRTCTime.Byte3.Fields.TenHour * 10) + CurrentRTCTime.Byte3.Fields.Hour;
    1496:	4b 81       	ldd	r20, Y+3	; 0x03
    1498:	24 2f       	mov	r18, r20
    149a:	22 95       	swap	r18
    149c:	2f 70       	andi	r18, 0x0F	; 15
    149e:	82 2f       	mov	r24, r18
    14a0:	83 70       	andi	r24, 0x03	; 3
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	9c 01       	movw	r18, r24
    14a6:	63 e0       	ldi	r22, 0x03	; 3
    14a8:	22 0f       	add	r18, r18
    14aa:	33 1f       	adc	r19, r19
    14ac:	6a 95       	dec	r22
    14ae:	e1 f7       	brne	.-8      	; 0x14a8 <DS1307_GetTime+0x106>
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	28 0f       	add	r18, r24
    14b6:	39 1f       	adc	r19, r25
    14b8:	4f 70       	andi	r20, 0x0F	; 15
    14ba:	42 0f       	add	r20, r18
    14bc:	f6 01       	movw	r30, r12
    14be:	40 83       	st	Z, r20
}
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	1f 91       	pop	r17
    14cc:	0f 91       	pop	r16
    14ce:	ff 90       	pop	r15
    14d0:	ef 90       	pop	r14
    14d2:	df 90       	pop	r13
    14d4:	cf 90       	pop	r12
    14d6:	08 95       	ret

000014d8 <DS1307_GetDate>:
}

void DS1307_GetDate(uint8_t* const Day,
                    uint8_t* const Month,
                    uint8_t* const Year)
{
    14d8:	cf 92       	push	r12
    14da:	df 92       	push	r13
    14dc:	ef 92       	push	r14
    14de:	ff 92       	push	r15
    14e0:	0f 93       	push	r16
    14e2:	1f 93       	push	r17
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <DS1307_GetDate+0x12>
    14ea:	0f 92       	push	r0
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	8c 01       	movw	r16, r24
    14f2:	7b 01       	movw	r14, r22
    14f4:	6a 01       	movw	r12, r20
	*Month = 1;
	*Year  = 1;
	return;
#endif

	if (TWI_StartTransmission(DS1307_ADDRESS_WRITE, 10))
    14f6:	80 ed       	ldi	r24, 0xD0	; 208
    14f8:	6a e0       	ldi	r22, 0x0A	; 10
    14fa:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <TWI_StartTransmission>
    14fe:	88 23       	and	r24, r24
    1500:	79 f0       	breq	.+30     	; 0x1520 <DS1307_GetDate+0x48>
			 *
			 *  \return Boolean true if the recipient ACKed the byte, false otherwise
			 */
			static inline bool TWI_SendByte(const uint8_t Byte)
			{
				TWDR = Byte;
    1502:	84 e0       	ldi	r24, 0x04	; 4
    1504:	80 93 bb 00 	sts	0x00BB, r24
				TWCR = ((1 << TWINT) | (1 << TWEN));
    1508:	84 e8       	ldi	r24, 0x84	; 132
    150a:	80 93 bc 00 	sts	0x00BC, r24
				while (!(TWCR & (1 << TWINT)));
    150e:	80 91 bc 00 	lds	r24, 0x00BC
    1512:	87 ff       	sbrs	r24, 7
    1514:	fc cf       	rjmp	.-8      	; 0x150e <DS1307_GetDate+0x36>

				return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    1516:	80 91 b9 00 	lds	r24, 0x00B9

			/** Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
			static inline void TWI_StopTransmission(void) ATTR_ALWAYS_INLINE;
			static inline void TWI_StopTransmission(void)
			{
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    151a:	84 e9       	ldi	r24, 0x94	; 148
    151c:	80 93 bc 00 	sts	0x00BC, r24
		TWI_StopTransmission();
	}

	DS1307_DateRegs_t CurrentRTCDate;

	if (TWI_StartTransmission(DS1307_ADDRESS_READ, 10))
    1520:	81 ed       	ldi	r24, 0xD1	; 209
    1522:	6a e0       	ldi	r22, 0x0A	; 10
    1524:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <TWI_StartTransmission>
    1528:	88 23       	and	r24, r24
    152a:	39 f1       	breq	.+78     	; 0x157a <DS1307_GetDate+0xa2>
				uint8_t TWCRMask = ((1 << TWINT) | (1 << TWEN));

				if (!(LastByte))
				  TWCRMask |= (1 << TWEA);

				TWCR = TWCRMask;
    152c:	84 ec       	ldi	r24, 0xC4	; 196
    152e:	80 93 bc 00 	sts	0x00BC, r24
				while (!(TWCR & (1 << TWINT)));
    1532:	80 91 bc 00 	lds	r24, 0x00BC
    1536:	87 ff       	sbrs	r24, 7
    1538:	fc cf       	rjmp	.-8      	; 0x1532 <DS1307_GetDate+0x5a>
				*Byte = TWDR;
    153a:	20 91 bb 00 	lds	r18, 0x00BB

				return ((TWSR & TW_STATUS_MASK) == TW_MR_DATA_ACK);
    153e:	80 91 b9 00 	lds	r24, 0x00B9
				uint8_t TWCRMask = ((1 << TWINT) | (1 << TWEN));

				if (!(LastByte))
				  TWCRMask |= (1 << TWEA);

				TWCR = TWCRMask;
    1542:	84 ec       	ldi	r24, 0xC4	; 196
    1544:	80 93 bc 00 	sts	0x00BC, r24
				while (!(TWCR & (1 << TWINT)));
    1548:	80 91 bc 00 	lds	r24, 0x00BC
    154c:	87 ff       	sbrs	r24, 7
    154e:	fc cf       	rjmp	.-8      	; 0x1548 <DS1307_GetDate+0x70>
				*Byte = TWDR;
    1550:	90 91 bb 00 	lds	r25, 0x00BB

				return ((TWSR & TW_STATUS_MASK) == TW_MR_DATA_ACK);
    1554:	80 91 b9 00 	lds	r24, 0x00B9
				uint8_t TWCRMask = ((1 << TWINT) | (1 << TWEN));

				if (!(LastByte))
				  TWCRMask |= (1 << TWEA);

				TWCR = TWCRMask;
    1558:	84 e8       	ldi	r24, 0x84	; 132
    155a:	80 93 bc 00 	sts	0x00BC, r24
				while (!(TWCR & (1 << TWINT)));
    155e:	80 91 bc 00 	lds	r24, 0x00BC
    1562:	87 ff       	sbrs	r24, 7
    1564:	fc cf       	rjmp	.-8      	; 0x155e <DS1307_GetDate+0x86>
				*Byte = TWDR;
    1566:	29 83       	std	Y+1, r18	; 0x01
    1568:	9a 83       	std	Y+2, r25	; 0x02
    156a:	80 91 bb 00 	lds	r24, 0x00BB
    156e:	8b 83       	std	Y+3, r24	; 0x03

				return ((TWSR & TW_STATUS_MASK) == TW_MR_DATA_ACK);
    1570:	80 91 b9 00 	lds	r24, 0x00B9

			/** Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
			static inline void TWI_StopTransmission(void) ATTR_ALWAYS_INLINE;
			static inline void TWI_StopTransmission(void)
			{
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    1574:	84 e9       	ldi	r24, 0x94	; 148
    1576:	80 93 bc 00 	sts	0x00BC, r24
		TWI_ReceiveByte(&CurrentRTCDate.Byte3.IntVal, true);

		TWI_StopTransmission();
	}

	*Day    = (CurrentRTCDate.Byte1.Fields.TenDay   * 10) + CurrentRTCDate.Byte1.Fields.Day;
    157a:	49 81       	ldd	r20, Y+1	; 0x01
    157c:	24 2f       	mov	r18, r20
    157e:	22 95       	swap	r18
    1580:	2f 70       	andi	r18, 0x0F	; 15
    1582:	82 2f       	mov	r24, r18
    1584:	83 70       	andi	r24, 0x03	; 3
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	9c 01       	movw	r18, r24
    158a:	73 e0       	ldi	r23, 0x03	; 3
    158c:	22 0f       	add	r18, r18
    158e:	33 1f       	adc	r19, r19
    1590:	7a 95       	dec	r23
    1592:	e1 f7       	brne	.-8      	; 0x158c <DS1307_GetDate+0xb4>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	28 0f       	add	r18, r24
    159a:	39 1f       	adc	r19, r25
    159c:	4f 70       	andi	r20, 0x0F	; 15
    159e:	42 0f       	add	r20, r18
    15a0:	f8 01       	movw	r30, r16
    15a2:	40 83       	st	Z, r20
	*Month  = (CurrentRTCDate.Byte2.Fields.TenMonth * 10) + CurrentRTCDate.Byte2.Fields.Month;
    15a4:	4a 81       	ldd	r20, Y+2	; 0x02
    15a6:	24 2f       	mov	r18, r20
    15a8:	22 95       	swap	r18
    15aa:	2f 70       	andi	r18, 0x0F	; 15
    15ac:	82 2f       	mov	r24, r18
    15ae:	81 70       	andi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	9c 01       	movw	r18, r24
    15b4:	53 e0       	ldi	r21, 0x03	; 3
    15b6:	22 0f       	add	r18, r18
    15b8:	33 1f       	adc	r19, r19
    15ba:	5a 95       	dec	r21
    15bc:	e1 f7       	brne	.-8      	; 0x15b6 <DS1307_GetDate+0xde>
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	28 0f       	add	r18, r24
    15c4:	39 1f       	adc	r19, r25
    15c6:	4f 70       	andi	r20, 0x0F	; 15
    15c8:	42 0f       	add	r20, r18
    15ca:	f7 01       	movw	r30, r14
    15cc:	40 83       	st	Z, r20
	*Year   = (CurrentRTCDate.Byte3.Fields.TenYear  * 10) + CurrentRTCDate.Byte3.Fields.Year;
    15ce:	4b 81       	ldd	r20, Y+3	; 0x03
    15d0:	84 2f       	mov	r24, r20
    15d2:	82 95       	swap	r24
    15d4:	8f 70       	andi	r24, 0x0F	; 15
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	9c 01       	movw	r18, r24
    15da:	13 e0       	ldi	r17, 0x03	; 3
    15dc:	22 0f       	add	r18, r18
    15de:	33 1f       	adc	r19, r19
    15e0:	1a 95       	dec	r17
    15e2:	e1 f7       	brne	.-8      	; 0x15dc <DS1307_GetDate+0x104>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	28 0f       	add	r18, r24
    15ea:	39 1f       	adc	r19, r25
    15ec:	4f 70       	andi	r20, 0x0F	; 15
    15ee:	42 0f       	add	r20, r18
    15f0:	f6 01       	movw	r30, r12
    15f2:	40 83       	st	Z, r20
}
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	1f 91       	pop	r17
    1600:	0f 91       	pop	r16
    1602:	ff 90       	pop	r15
    1604:	ef 90       	pop	r14
    1606:	df 90       	pop	r13
    1608:	cf 90       	pop	r12
    160a:	08 95       	ret

0000160c <DS1307_SetTime>:
}

void DS1307_SetTime(const uint8_t Hour,
                    const uint8_t Minute,
                    const uint8_t Second)
{
    160c:	ff 92       	push	r15
    160e:	0f 93       	push	r16
    1610:	1f 93       	push	r17
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	00 d0       	rcall	.+0      	; 0x1618 <DS1307_SetTime+0xc>
    1618:	0f 92       	push	r0
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	f8 2e       	mov	r15, r24
    1620:	06 2f       	mov	r16, r22
    1622:	14 2f       	mov	r17, r20
	CurrentRTCTime.Byte2.Fields.Min     = (Minute % 10);
	CurrentRTCTime.Byte3.Fields.TenHour = (Hour / 10);
	CurrentRTCTime.Byte3.Fields.Hour    = (Hour % 10);
	CurrentRTCTime.Byte3.Fields.TwelveHourMode = false;

	if (TWI_StartTransmission(DS1307_ADDRESS_WRITE, 10))
    1624:	80 ed       	ldi	r24, 0xD0	; 208
    1626:	6a e0       	ldi	r22, 0x0A	; 10
    1628:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <TWI_StartTransmission>
    162c:	88 23       	and	r24, r24
    162e:	09 f4       	brne	.+2      	; 0x1632 <DS1307_SetTime+0x26>
    1630:	60 c0       	rjmp	.+192    	; 0x16f2 <DS1307_SetTime+0xe6>
			 *
			 *  \return Boolean true if the recipient ACKed the byte, false otherwise
			 */
			static inline bool TWI_SendByte(const uint8_t Byte)
			{
				TWDR = Byte;
    1632:	10 92 bb 00 	sts	0x00BB, r1
				TWCR = ((1 << TWINT) | (1 << TWEN));
    1636:	84 e8       	ldi	r24, 0x84	; 132
    1638:	80 93 bc 00 	sts	0x00BC, r24
				while (!(TWCR & (1 << TWINT)));
    163c:	80 91 bc 00 	lds	r24, 0x00BC
    1640:	87 ff       	sbrs	r24, 7
    1642:	fc cf       	rjmp	.-8      	; 0x163c <DS1307_SetTime+0x30>

				return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    1644:	80 91 b9 00 	lds	r24, 0x00B9
#if defined(DUMMY_RTC)
	return;
#endif

	DS1307_TimeRegs_t CurrentRTCTime;
	CurrentRTCTime.Byte1.Fields.TenSec  = (Second / 10);
    1648:	81 2f       	mov	r24, r17
    164a:	6a e0       	ldi	r22, 0x0A	; 10
    164c:	0e 94 56 25 	call	0x4aac	; 0x4aac <__udivmodqi4>
    1650:	28 2f       	mov	r18, r24
    1652:	27 70       	andi	r18, 0x07	; 7
    1654:	22 95       	swap	r18
    1656:	20 7f       	andi	r18, 0xF0	; 240
	CurrentRTCTime.Byte1.Fields.Sec     = (Second % 10);
    1658:	81 2f       	mov	r24, r17
    165a:	0e 94 56 25 	call	0x4aac	; 0x4aac <__udivmodqi4>
    165e:	9f 70       	andi	r25, 0x0F	; 15
	CurrentRTCTime.Byte1.Fields.CH      = false;
    1660:	29 2b       	or	r18, r25
    1662:	29 83       	std	Y+1, r18	; 0x01
			 *
			 *  \return Boolean true if the recipient ACKed the byte, false otherwise
			 */
			static inline bool TWI_SendByte(const uint8_t Byte)
			{
				TWDR = Byte;
    1664:	20 93 bb 00 	sts	0x00BB, r18
				TWCR = ((1 << TWINT) | (1 << TWEN));
    1668:	84 e8       	ldi	r24, 0x84	; 132
    166a:	80 93 bc 00 	sts	0x00BC, r24
				while (!(TWCR & (1 << TWINT)));
    166e:	80 91 bc 00 	lds	r24, 0x00BC
    1672:	87 ff       	sbrs	r24, 7
    1674:	fc cf       	rjmp	.-8      	; 0x166e <DS1307_SetTime+0x62>

				return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    1676:	80 91 b9 00 	lds	r24, 0x00B9
	CurrentRTCTime.Byte2.Fields.TenMin  = (Minute / 10);
    167a:	80 2f       	mov	r24, r16
    167c:	6a e0       	ldi	r22, 0x0A	; 10
    167e:	0e 94 56 25 	call	0x4aac	; 0x4aac <__udivmodqi4>
    1682:	38 2f       	mov	r19, r24
    1684:	37 70       	andi	r19, 0x07	; 7
    1686:	32 95       	swap	r19
    1688:	30 7f       	andi	r19, 0xF0	; 240
    168a:	2a 81       	ldd	r18, Y+2	; 0x02
    168c:	20 78       	andi	r18, 0x80	; 128
	CurrentRTCTime.Byte2.Fields.Min     = (Minute % 10);
    168e:	80 2f       	mov	r24, r16
    1690:	0e 94 56 25 	call	0x4aac	; 0x4aac <__udivmodqi4>
    1694:	9f 70       	andi	r25, 0x0F	; 15
    1696:	23 2b       	or	r18, r19
    1698:	29 2b       	or	r18, r25
    169a:	2a 83       	std	Y+2, r18	; 0x02
			 *
			 *  \return Boolean true if the recipient ACKed the byte, false otherwise
			 */
			static inline bool TWI_SendByte(const uint8_t Byte)
			{
				TWDR = Byte;
    169c:	20 93 bb 00 	sts	0x00BB, r18
				TWCR = ((1 << TWINT) | (1 << TWEN));
    16a0:	84 e8       	ldi	r24, 0x84	; 132
    16a2:	80 93 bc 00 	sts	0x00BC, r24
				while (!(TWCR & (1 << TWINT)));
    16a6:	80 91 bc 00 	lds	r24, 0x00BC
    16aa:	87 ff       	sbrs	r24, 7
    16ac:	fc cf       	rjmp	.-8      	; 0x16a6 <DS1307_SetTime+0x9a>

				return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    16ae:	80 91 b9 00 	lds	r24, 0x00B9
	CurrentRTCTime.Byte3.Fields.TenHour = (Hour / 10);
    16b2:	8f 2d       	mov	r24, r15
    16b4:	6a e0       	ldi	r22, 0x0A	; 10
    16b6:	0e 94 56 25 	call	0x4aac	; 0x4aac <__udivmodqi4>
    16ba:	38 2f       	mov	r19, r24
    16bc:	33 70       	andi	r19, 0x03	; 3
    16be:	32 95       	swap	r19
    16c0:	30 7f       	andi	r19, 0xF0	; 240
    16c2:	2b 81       	ldd	r18, Y+3	; 0x03
    16c4:	20 7c       	andi	r18, 0xC0	; 192
	CurrentRTCTime.Byte3.Fields.Hour    = (Hour % 10);
    16c6:	8f 2d       	mov	r24, r15
    16c8:	0e 94 56 25 	call	0x4aac	; 0x4aac <__udivmodqi4>
    16cc:	9f 70       	andi	r25, 0x0F	; 15
    16ce:	23 2b       	or	r18, r19
    16d0:	29 2b       	or	r18, r25
	CurrentRTCTime.Byte3.Fields.TwelveHourMode = false;
    16d2:	2f 7b       	andi	r18, 0xBF	; 191
    16d4:	2b 83       	std	Y+3, r18	; 0x03
			 *
			 *  \return Boolean true if the recipient ACKed the byte, false otherwise
			 */
			static inline bool TWI_SendByte(const uint8_t Byte)
			{
				TWDR = Byte;
    16d6:	20 93 bb 00 	sts	0x00BB, r18
				TWCR = ((1 << TWINT) | (1 << TWEN));
    16da:	84 e8       	ldi	r24, 0x84	; 132
    16dc:	80 93 bc 00 	sts	0x00BC, r24
				while (!(TWCR & (1 << TWINT)));
    16e0:	80 91 bc 00 	lds	r24, 0x00BC
    16e4:	87 ff       	sbrs	r24, 7
    16e6:	fc cf       	rjmp	.-8      	; 0x16e0 <DS1307_SetTime+0xd4>

				return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    16e8:	80 91 b9 00 	lds	r24, 0x00B9

			/** Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
			static inline void TWI_StopTransmission(void) ATTR_ALWAYS_INLINE;
			static inline void TWI_StopTransmission(void)
			{
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    16ec:	84 e9       	ldi	r24, 0x94	; 148
    16ee:	80 93 bc 00 	sts	0x00BC, r24
		TWI_SendByte(CurrentRTCTime.Byte2.IntVal);
		TWI_SendByte(CurrentRTCTime.Byte3.IntVal);

		TWI_StopTransmission();
	}
}
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	1f 91       	pop	r17
    16fe:	0f 91       	pop	r16
    1700:	ff 90       	pop	r15
    1702:	08 95       	ret

00001704 <DS1307_SetDate>:
#include "DS1307.h"

void DS1307_SetDate(const uint8_t Day,
                    const uint8_t Month,
                    const uint8_t Year)
{
    1704:	ff 92       	push	r15
    1706:	0f 93       	push	r16
    1708:	1f 93       	push	r17
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	00 d0       	rcall	.+0      	; 0x1710 <DS1307_SetDate+0xc>
    1710:	0f 92       	push	r0
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	18 2f       	mov	r17, r24
    1718:	06 2f       	mov	r16, r22
    171a:	f4 2e       	mov	r15, r20
	CurrentRTCDate.Byte2.Fields.TenMonth = (Month / 10);
	CurrentRTCDate.Byte2.Fields.Month    = (Month % 10);
	CurrentRTCDate.Byte3.Fields.TenYear  = (Year / 10);
	CurrentRTCDate.Byte3.Fields.Year     = (Year % 10);

	if (TWI_StartTransmission(DS1307_ADDRESS_WRITE, 10))
    171c:	80 ed       	ldi	r24, 0xD0	; 208
    171e:	6a e0       	ldi	r22, 0x0A	; 10
    1720:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <TWI_StartTransmission>
    1724:	88 23       	and	r24, r24
    1726:	09 f4       	brne	.+2      	; 0x172a <DS1307_SetDate+0x26>
    1728:	5f c0       	rjmp	.+190    	; 0x17e8 <DS1307_SetDate+0xe4>
			 *
			 *  \return Boolean true if the recipient ACKed the byte, false otherwise
			 */
			static inline bool TWI_SendByte(const uint8_t Byte)
			{
				TWDR = Byte;
    172a:	84 e0       	ldi	r24, 0x04	; 4
    172c:	80 93 bb 00 	sts	0x00BB, r24
				TWCR = ((1 << TWINT) | (1 << TWEN));
    1730:	84 e8       	ldi	r24, 0x84	; 132
    1732:	80 93 bc 00 	sts	0x00BC, r24
				while (!(TWCR & (1 << TWINT)));
    1736:	80 91 bc 00 	lds	r24, 0x00BC
    173a:	87 ff       	sbrs	r24, 7
    173c:	fc cf       	rjmp	.-8      	; 0x1736 <DS1307_SetDate+0x32>

				return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    173e:	80 91 b9 00 	lds	r24, 0x00B9
#if defined(DUMMY_RTC)
	return;
#endif

	DS1307_DateRegs_t CurrentRTCDate;
	CurrentRTCDate.Byte1.Fields.TenDay   = (Day / 10);
    1742:	81 2f       	mov	r24, r17
    1744:	6a e0       	ldi	r22, 0x0A	; 10
    1746:	0e 94 56 25 	call	0x4aac	; 0x4aac <__udivmodqi4>
    174a:	38 2f       	mov	r19, r24
    174c:	33 70       	andi	r19, 0x03	; 3
    174e:	32 95       	swap	r19
    1750:	30 7f       	andi	r19, 0xF0	; 240
    1752:	29 81       	ldd	r18, Y+1	; 0x01
    1754:	20 7c       	andi	r18, 0xC0	; 192
	CurrentRTCDate.Byte1.Fields.Day      = (Day % 10);
    1756:	81 2f       	mov	r24, r17
    1758:	0e 94 56 25 	call	0x4aac	; 0x4aac <__udivmodqi4>
    175c:	9f 70       	andi	r25, 0x0F	; 15
    175e:	23 2b       	or	r18, r19
    1760:	29 2b       	or	r18, r25
    1762:	29 83       	std	Y+1, r18	; 0x01
			 *
			 *  \return Boolean true if the recipient ACKed the byte, false otherwise
			 */
			static inline bool TWI_SendByte(const uint8_t Byte)
			{
				TWDR = Byte;
    1764:	20 93 bb 00 	sts	0x00BB, r18
				TWCR = ((1 << TWINT) | (1 << TWEN));
    1768:	84 e8       	ldi	r24, 0x84	; 132
    176a:	80 93 bc 00 	sts	0x00BC, r24
				while (!(TWCR & (1 << TWINT)));
    176e:	80 91 bc 00 	lds	r24, 0x00BC
    1772:	87 ff       	sbrs	r24, 7
    1774:	fc cf       	rjmp	.-8      	; 0x176e <DS1307_SetDate+0x6a>

				return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    1776:	80 91 b9 00 	lds	r24, 0x00B9
	CurrentRTCDate.Byte2.Fields.TenMonth = (Month / 10);
    177a:	80 2f       	mov	r24, r16
    177c:	6a e0       	ldi	r22, 0x0A	; 10
    177e:	0e 94 56 25 	call	0x4aac	; 0x4aac <__udivmodqi4>
    1782:	38 2f       	mov	r19, r24
    1784:	31 70       	andi	r19, 0x01	; 1
    1786:	32 95       	swap	r19
    1788:	30 7f       	andi	r19, 0xF0	; 240
    178a:	2a 81       	ldd	r18, Y+2	; 0x02
    178c:	20 7e       	andi	r18, 0xE0	; 224
	CurrentRTCDate.Byte2.Fields.Month    = (Month % 10);
    178e:	80 2f       	mov	r24, r16
    1790:	0e 94 56 25 	call	0x4aac	; 0x4aac <__udivmodqi4>
    1794:	9f 70       	andi	r25, 0x0F	; 15
    1796:	23 2b       	or	r18, r19
    1798:	29 2b       	or	r18, r25
    179a:	2a 83       	std	Y+2, r18	; 0x02
			 *
			 *  \return Boolean true if the recipient ACKed the byte, false otherwise
			 */
			static inline bool TWI_SendByte(const uint8_t Byte)
			{
				TWDR = Byte;
    179c:	20 93 bb 00 	sts	0x00BB, r18
				TWCR = ((1 << TWINT) | (1 << TWEN));
    17a0:	84 e8       	ldi	r24, 0x84	; 132
    17a2:	80 93 bc 00 	sts	0x00BC, r24
				while (!(TWCR & (1 << TWINT)));
    17a6:	80 91 bc 00 	lds	r24, 0x00BC
    17aa:	87 ff       	sbrs	r24, 7
    17ac:	fc cf       	rjmp	.-8      	; 0x17a6 <DS1307_SetDate+0xa2>

				return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    17ae:	80 91 b9 00 	lds	r24, 0x00B9
	CurrentRTCDate.Byte3.Fields.TenYear  = (Year / 10);
    17b2:	8f 2d       	mov	r24, r15
    17b4:	6a e0       	ldi	r22, 0x0A	; 10
    17b6:	0e 94 56 25 	call	0x4aac	; 0x4aac <__udivmodqi4>
    17ba:	28 2f       	mov	r18, r24
    17bc:	22 95       	swap	r18
    17be:	20 7f       	andi	r18, 0xF0	; 240
	CurrentRTCDate.Byte3.Fields.Year     = (Year % 10);
    17c0:	8f 2d       	mov	r24, r15
    17c2:	0e 94 56 25 	call	0x4aac	; 0x4aac <__udivmodqi4>
    17c6:	9f 70       	andi	r25, 0x0F	; 15
    17c8:	29 2b       	or	r18, r25
    17ca:	2b 83       	std	Y+3, r18	; 0x03
			 *
			 *  \return Boolean true if the recipient ACKed the byte, false otherwise
			 */
			static inline bool TWI_SendByte(const uint8_t Byte)
			{
				TWDR = Byte;
    17cc:	20 93 bb 00 	sts	0x00BB, r18
				TWCR = ((1 << TWINT) | (1 << TWEN));
    17d0:	84 e8       	ldi	r24, 0x84	; 132
    17d2:	80 93 bc 00 	sts	0x00BC, r24
				while (!(TWCR & (1 << TWINT)));
    17d6:	80 91 bc 00 	lds	r24, 0x00BC
    17da:	87 ff       	sbrs	r24, 7
    17dc:	fc cf       	rjmp	.-8      	; 0x17d6 <DS1307_SetDate+0xd2>

				return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    17de:	80 91 b9 00 	lds	r24, 0x00B9

			/** Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
			static inline void TWI_StopTransmission(void) ATTR_ALWAYS_INLINE;
			static inline void TWI_StopTransmission(void)
			{
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    17e2:	84 e9       	ldi	r24, 0x94	; 148
    17e4:	80 93 bc 00 	sts	0x00BC, r24
		TWI_SendByte(CurrentRTCDate.Byte2.IntVal);
		TWI_SendByte(CurrentRTCDate.Byte3.IntVal);

		TWI_StopTransmission();
	}
}
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	1f 91       	pop	r17
    17f4:	0f 91       	pop	r16
    17f6:	ff 90       	pop	r15
    17f8:	08 95       	ret

000017fa <disk_initialize>:
DSTATUS disk_initialize (
	BYTE drv				/* Physical drive number (0..) */
)
{
	return FR_OK;
}
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	08 95       	ret

000017fe <disk_status>:
DSTATUS disk_status (
	BYTE drv		/* Physical drive number (0..) */
)
{
	return FR_OK;
}
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	08 95       	ret

00001802 <disk_ioctl>:
	BYTE drv,		/* Physical drive number (0..) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
	if (ctrl == CTRL_SYNC)
    1802:	66 23       	and	r22, r22
    1804:	11 f0       	breq	.+4      	; 0x180a <disk_ioctl+0x8>
    1806:	84 e0       	ldi	r24, 0x04	; 4
    1808:	08 95       	ret
    180a:	80 e0       	ldi	r24, 0x00	; 0
	  return RES_OK;
	else
	  return RES_PARERR;
}
    180c:	08 95       	ret

0000180e <get_fattime>:


DWORD get_fattime (void)
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	00 d0       	rcall	.+0      	; 0x1814 <get_fattime+0x6>
    1814:	00 d0       	rcall	.+0      	; 0x1816 <get_fattime+0x8>
    1816:	00 d0       	rcall	.+0      	; 0x1818 <get_fattime+0xa>
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
	uint8_t Day,  Month,  Year;
	uint8_t Hour, Minute, Second;

	DS1307_GetDate(&Day,  &Month,  &Year);
    181c:	ce 01       	movw	r24, r28
    181e:	01 96       	adiw	r24, 0x01	; 1
    1820:	be 01       	movw	r22, r28
    1822:	6e 5f       	subi	r22, 0xFE	; 254
    1824:	7f 4f       	sbci	r23, 0xFF	; 255
    1826:	ae 01       	movw	r20, r28
    1828:	4d 5f       	subi	r20, 0xFD	; 253
    182a:	5f 4f       	sbci	r21, 0xFF	; 255
    182c:	55 de       	rcall	.-854    	; 0x14d8 <DS1307_GetDate>
	DS1307_GetTime(&Hour, &Minute, &Second);
    182e:	ce 01       	movw	r24, r28
    1830:	04 96       	adiw	r24, 0x04	; 4
    1832:	be 01       	movw	r22, r28
    1834:	6b 5f       	subi	r22, 0xFB	; 251
    1836:	7f 4f       	sbci	r23, 0xFF	; 255
    1838:	ae 01       	movw	r20, r28
    183a:	4a 5f       	subi	r20, 0xFA	; 250
    183c:	5f 4f       	sbci	r21, 0xFF	; 255
    183e:	b1 dd       	rcall	.-1182   	; 0x13a2 <DS1307_GetTime>
    1840:	29 81       	ldd	r18, Y+1	; 0x01
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e0       	ldi	r20, 0x00	; 0
    1846:	50 e0       	ldi	r21, 0x00	; 0
    1848:	a9 01       	movw	r20, r18
    184a:	33 27       	eor	r19, r19
    184c:	22 27       	eor	r18, r18
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	a0 e0       	ldi	r26, 0x00	; 0
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	f5 e1       	ldi	r31, 0x15	; 21
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	aa 1f       	adc	r26, r26
    185e:	bb 1f       	adc	r27, r27
    1860:	fa 95       	dec	r31
    1862:	d1 f7       	brne	.-12     	; 0x1858 <get_fattime+0x4a>
    1864:	28 2b       	or	r18, r24
    1866:	39 2b       	or	r19, r25
    1868:	4a 2b       	or	r20, r26
    186a:	5b 2b       	or	r21, r27
    186c:	8c 81       	ldd	r24, Y+4	; 0x04
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	a0 e0       	ldi	r26, 0x00	; 0
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	eb e0       	ldi	r30, 0x0B	; 11
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	aa 1f       	adc	r26, r26
    187c:	bb 1f       	adc	r27, r27
    187e:	ea 95       	dec	r30
    1880:	d1 f7       	brne	.-12     	; 0x1876 <get_fattime+0x68>
    1882:	28 2b       	or	r18, r24
    1884:	39 2b       	or	r19, r25
    1886:	4a 2b       	or	r20, r26
    1888:	5b 2b       	or	r21, r27
    188a:	8d 81       	ldd	r24, Y+5	; 0x05
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	a0 e0       	ldi	r26, 0x00	; 0
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	75 e0       	ldi	r23, 0x05	; 5
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	aa 1f       	adc	r26, r26
    189a:	bb 1f       	adc	r27, r27
    189c:	7a 95       	dec	r23
    189e:	d1 f7       	brne	.-12     	; 0x1894 <get_fattime+0x86>
    18a0:	28 2b       	or	r18, r24
    18a2:	39 2b       	or	r19, r25
    18a4:	4a 2b       	or	r20, r26
    18a6:	5b 2b       	or	r21, r27
    18a8:	8e 81       	ldd	r24, Y+6	; 0x06
    18aa:	86 95       	lsr	r24
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	a0 e0       	ldi	r26, 0x00	; 0
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	28 2b       	or	r18, r24
    18b4:	39 2b       	or	r19, r25
    18b6:	4a 2b       	or	r20, r26
    18b8:	5b 2b       	or	r21, r27
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	44 96       	adiw	r24, 0x14	; 20
    18c0:	aa 27       	eor	r26, r26
    18c2:	97 fd       	sbrc	r25, 7
    18c4:	a0 95       	com	r26
    18c6:	ba 2f       	mov	r27, r26
    18c8:	69 e1       	ldi	r22, 0x19	; 25
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	aa 1f       	adc	r26, r26
    18d0:	bb 1f       	adc	r27, r27
    18d2:	6a 95       	dec	r22
    18d4:	d1 f7       	brne	.-12     	; 0x18ca <get_fattime+0xbc>
    18d6:	28 2b       	or	r18, r24
    18d8:	39 2b       	or	r19, r25
    18da:	4a 2b       	or	r20, r26
    18dc:	5b 2b       	or	r21, r27
	             ((DWORD)Month << 21) |
	               ((DWORD)Day << 16) |
	              ((DWORD)Hour << 11) |
	             ((DWORD)Minute << 5) |
	      (((DWORD)Second >> 1) << 0);
}
    18de:	b9 01       	movw	r22, r18
    18e0:	ca 01       	movw	r24, r20
    18e2:	26 96       	adiw	r28, 0x06	; 6
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <disk_write>:
	BYTE drv,			/* Physical drive number (0..) */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	BYTE count			/* Number of sectors to write (1..255) */
)
{
    18f4:	0f 93       	push	r16
    18f6:	fb 01       	movw	r30, r22
	DataflashManager_WriteBlocks_RAM(sector, count, buff);
    18f8:	ca 01       	movw	r24, r20
    18fa:	b9 01       	movw	r22, r18
    18fc:	40 2f       	mov	r20, r16
    18fe:	50 e0       	ldi	r21, 0x00	; 0
    1900:	9f 01       	movw	r18, r30
    1902:	0e 94 f5 03 	call	0x7ea	; 0x7ea <DataflashManager_WriteBlocks_RAM>
	return RES_OK;
}
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	0f 91       	pop	r16
    190a:	08 95       	ret

0000190c <disk_read>:
	BYTE drv,		/* Physical drive number (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	BYTE count		/* Number of sectors to read (1..255) */
)
{
    190c:	0f 93       	push	r16
    190e:	fb 01       	movw	r30, r22
	DataflashManager_ReadBlocks_RAM(sector, count, buff);
    1910:	ca 01       	movw	r24, r20
    1912:	b9 01       	movw	r22, r18
    1914:	40 2f       	mov	r20, r16
    1916:	50 e0       	ldi	r21, 0x00	; 0
    1918:	9f 01       	movw	r18, r30
    191a:	2b d8       	rcall	.-4010   	; 0x972 <DataflashManager_ReadBlocks_RAM>
	return RES_OK;
}
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	0f 91       	pop	r16
    1920:	08 95       	ret

00001922 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
    1922:	0f 93       	push	r16
    1924:	1f 93       	push	r17
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
    192a:	8c 01       	movw	r16, r24
    192c:	eb 01       	movw	r28, r22
    192e:	ba 01       	movw	r22, r20
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	0e c0       	rjmp	.+28     	; 0x1952 <mem_cpy+0x30>

#if _WORD_ACCESS == 1
	while (cnt >= sizeof(int)) {
		*(int*)d = *(int*)s;
    1936:	f8 01       	movw	r30, r16
    1938:	e2 0f       	add	r30, r18
    193a:	f3 1f       	adc	r31, r19
    193c:	de 01       	movw	r26, r28
    193e:	a2 0f       	add	r26, r18
    1940:	b3 1f       	adc	r27, r19
    1942:	8d 91       	ld	r24, X+
    1944:	9c 91       	ld	r25, X
    1946:	91 83       	std	Z+1, r25	; 0x01
    1948:	80 83       	st	Z, r24
    194a:	42 50       	subi	r20, 0x02	; 2
    194c:	50 40       	sbci	r21, 0x00	; 0
    194e:	2e 5f       	subi	r18, 0xFE	; 254
    1950:	3f 4f       	sbci	r19, 0xFF	; 255
void mem_cpy (void* dst, const void* src, int cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof(int)) {
    1952:	42 30       	cpi	r20, 0x02	; 2
    1954:	51 05       	cpc	r21, r1
    1956:	78 f7       	brcc	.-34     	; 0x1936 <mem_cpy+0x14>
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
    1958:	cb 01       	movw	r24, r22
    195a:	8e 7f       	andi	r24, 0xFE	; 254
    195c:	de 01       	movw	r26, r28
    195e:	a8 0f       	add	r26, r24
    1960:	b9 1f       	adc	r27, r25
    1962:	f8 01       	movw	r30, r16
    1964:	e8 0f       	add	r30, r24
    1966:	f9 1f       	adc	r31, r25
    1968:	ab 01       	movw	r20, r22
    196a:	48 1b       	sub	r20, r24
    196c:	59 0b       	sbc	r21, r25
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <mem_cpy+0x52>
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
    1970:	8d 91       	ld	r24, X+
    1972:	81 93       	st	Z+, r24
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    1974:	41 50       	subi	r20, 0x01	; 1
    1976:	50 40       	sbci	r21, 0x00	; 0
    1978:	8f ef       	ldi	r24, 0xFF	; 255
    197a:	4f 3f       	cpi	r20, 0xFF	; 255
    197c:	58 07       	cpc	r21, r24
    197e:	c1 f7       	brne	.-16     	; 0x1970 <mem_cpy+0x4e>
		*d++ = *s++;
}
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	08 95       	ret

0000198a <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	BYTE *d = (BYTE*)dst;
    198a:	fc 01       	movw	r30, r24
    198c:	01 c0       	rjmp	.+2      	; 0x1990 <mem_set+0x6>

	while (cnt--)
		*d++ = (BYTE)val;
    198e:	61 93       	st	Z+, r22
/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    1990:	41 50       	subi	r20, 0x01	; 1
    1992:	50 40       	sbci	r21, 0x00	; 0
    1994:	8f ef       	ldi	r24, 0xFF	; 255
    1996:	4f 3f       	cpi	r20, 0xFF	; 255
    1998:	58 07       	cpc	r21, r24
    199a:	c9 f7       	brne	.-14     	; 0x198e <mem_set+0x4>
		*d++ = (BYTE)val;
}
    199c:	08 95       	ret

0000199e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    199e:	ef 92       	push	r14
    19a0:	ff 92       	push	r15
    19a2:	0f 93       	push	r16
    19a4:	1f 93       	push	r17
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
    19aa:	ec 01       	movw	r28, r24
    19ac:	7a 01       	movw	r14, r20
    19ae:	8b 01       	movw	r16, r22
	clst -= 2;
    19b0:	8e ef       	ldi	r24, 0xFE	; 254
    19b2:	9f ef       	ldi	r25, 0xFF	; 255
    19b4:	af ef       	ldi	r26, 0xFF	; 255
    19b6:	bf ef       	ldi	r27, 0xFF	; 255
    19b8:	e8 0e       	add	r14, r24
    19ba:	f9 1e       	adc	r15, r25
    19bc:	0a 1f       	adc	r16, r26
    19be:	1b 1f       	adc	r17, r27
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    19c0:	8e 89       	ldd	r24, Y+22	; 0x16
    19c2:	9f 89       	ldd	r25, Y+23	; 0x17
    19c4:	a8 8d       	ldd	r26, Y+24	; 0x18
    19c6:	b9 8d       	ldd	r27, Y+25	; 0x19
    19c8:	02 97       	sbiw	r24, 0x02	; 2
    19ca:	a1 09       	sbc	r26, r1
    19cc:	b1 09       	sbc	r27, r1
    19ce:	e8 16       	cp	r14, r24
    19d0:	f9 06       	cpc	r15, r25
    19d2:	0a 07       	cpc	r16, r26
    19d4:	1b 07       	cpc	r17, r27
    19d6:	28 f0       	brcs	.+10     	; 0x19e2 <clust2sect+0x44>
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e0       	ldi	r20, 0x00	; 0
    19de:	50 e0       	ldi	r21, 0x00	; 0
    19e0:	12 c0       	rjmp	.+36     	; 0x1a06 <clust2sect+0x68>
	return clst * fs->csize + fs->database;
    19e2:	2a 81       	ldd	r18, Y+2	; 0x02
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e0       	ldi	r20, 0x00	; 0
    19e8:	50 e0       	ldi	r21, 0x00	; 0
    19ea:	c8 01       	movw	r24, r16
    19ec:	b7 01       	movw	r22, r14
    19ee:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <__mulsi3>
    19f2:	9b 01       	movw	r18, r22
    19f4:	ac 01       	movw	r20, r24
    19f6:	8e a1       	ldd	r24, Y+38	; 0x26
    19f8:	9f a1       	ldd	r25, Y+39	; 0x27
    19fa:	a8 a5       	ldd	r26, Y+40	; 0x28
    19fc:	b9 a5       	ldd	r27, Y+41	; 0x29
    19fe:	28 0f       	add	r18, r24
    1a00:	39 1f       	adc	r19, r25
    1a02:	4a 1f       	adc	r20, r26
    1a04:	5b 1f       	adc	r21, r27
}
    1a06:	b9 01       	movw	r22, r18
    1a08:	ca 01       	movw	r24, r20
    1a0a:	df 91       	pop	r29
    1a0c:	cf 91       	pop	r28
    1a0e:	1f 91       	pop	r17
    1a10:	0f 91       	pop	r16
    1a12:	ff 90       	pop	r15
    1a14:	ef 90       	pop	r14
    1a16:	08 95       	ret

00001a18 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    1a18:	db 01       	movw	r26, r22
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    1a1a:	88 23       	and	r24, r24
    1a1c:	11 f0       	breq	.+4      	; 0x1a22 <f_mount+0xa>
    1a1e:	8b e0       	ldi	r24, 0x0B	; 11
    1a20:	08 95       	ret
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    1a22:	e0 91 ca 01 	lds	r30, 0x01CA
    1a26:	f0 91 cb 01 	lds	r31, 0x01CB

	if (rfs) {
    1a2a:	30 97       	sbiw	r30, 0x00	; 0
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <f_mount+0x18>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    1a2e:	10 82       	st	Z, r1
	}

	if (fs) {
    1a30:	10 97       	sbiw	r26, 0x00	; 0
    1a32:	09 f0       	breq	.+2      	; 0x1a36 <f_mount+0x1e>
		fs->fs_type = 0;			/* Clear new fs object */
    1a34:	1c 92       	st	X, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    1a36:	b0 93 cb 01 	sts	0x01CB, r27
    1a3a:	a0 93 ca 01 	sts	0x01CA, r26
    1a3e:	80 e0       	ldi	r24, 0x00	; 0

	return FR_OK;
}
    1a40:	08 95       	ret

00001a42 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    1a42:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	81 f0       	breq	.+32     	; 0x1a68 <validate+0x26>
    1a48:	80 81       	ld	r24, Z
    1a4a:	88 23       	and	r24, r24
    1a4c:	69 f0       	breq	.+26     	; 0x1a68 <validate+0x26>
    1a4e:	86 81       	ldd	r24, Z+6	; 0x06
    1a50:	97 81       	ldd	r25, Z+7	; 0x07
    1a52:	86 17       	cp	r24, r22
    1a54:	97 07       	cpc	r25, r23
    1a56:	41 f4       	brne	.+16     	; 0x1a68 <validate+0x26>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    1a58:	81 81       	ldd	r24, Z+1	; 0x01
    1a5a:	d1 de       	rcall	.-606    	; 0x17fe <disk_status>
    1a5c:	80 fd       	sbrc	r24, 0
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <validate+0x22>
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	08 95       	ret
    1a64:	83 e0       	ldi	r24, 0x03	; 3
    1a66:	08 95       	ret
    1a68:	89 e0       	ldi	r24, 0x09	; 9
		return FR_NOT_READY;

	return FR_OK;
}
    1a6a:	08 95       	ret

00001a6c <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    1a6c:	6f 92       	push	r6
    1a6e:	7f 92       	push	r7
    1a70:	8f 92       	push	r8
    1a72:	9f 92       	push	r9
    1a74:	af 92       	push	r10
    1a76:	bf 92       	push	r11
    1a78:	cf 92       	push	r12
    1a7a:	df 92       	push	r13
    1a7c:	ef 92       	push	r14
    1a7e:	ff 92       	push	r15
    1a80:	0f 93       	push	r16
    1a82:	1f 93       	push	r17
    1a84:	cf 93       	push	r28
    1a86:	df 93       	push	r29
    1a88:	ec 01       	movw	r28, r24
    1a8a:	4a 01       	movw	r8, r20
    1a8c:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    1a8e:	ca a4       	ldd	r12, Y+42	; 0x2a
    1a90:	db a4       	ldd	r13, Y+43	; 0x2b
    1a92:	ec a4       	ldd	r14, Y+44	; 0x2c
    1a94:	fd a4       	ldd	r15, Y+45	; 0x2d
	if (wsect != sector) {	/* Changed current window */
    1a96:	c4 16       	cp	r12, r20
    1a98:	d5 06       	cpc	r13, r21
    1a9a:	e6 06       	cpc	r14, r22
    1a9c:	f7 06       	cpc	r15, r23
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <move_window+0x36>
    1aa0:	4b c0       	rjmp	.+150    	; 0x1b38 <move_window+0xcc>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    1aa2:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa4:	88 23       	and	r24, r24
    1aa6:	91 f1       	breq	.+100    	; 0x1b0c <move_window+0xa0>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    1aa8:	8e e2       	ldi	r24, 0x2E	; 46
    1aaa:	68 2e       	mov	r6, r24
    1aac:	71 2c       	mov	r7, r1
    1aae:	6c 0e       	add	r6, r28
    1ab0:	7d 1e       	adc	r7, r29
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	b3 01       	movw	r22, r6
    1ab6:	a7 01       	movw	r20, r14
    1ab8:	96 01       	movw	r18, r12
    1aba:	01 e0       	ldi	r16, 0x01	; 1
    1abc:	1b df       	rcall	.-458    	; 0x18f4 <disk_write>
    1abe:	88 23       	and	r24, r24
    1ac0:	c9 f5       	brne	.+114    	; 0x1b34 <move_window+0xc8>
				return FR_DISK_ERR;
			fs->wflag = 0;
    1ac2:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    1ac4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ac6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ac8:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1aca:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1acc:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1ace:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1ad0:	48 a1       	ldd	r20, Y+32	; 0x20
    1ad2:	59 a1       	ldd	r21, Y+33	; 0x21
    1ad4:	82 0f       	add	r24, r18
    1ad6:	93 1f       	adc	r25, r19
    1ad8:	a4 1f       	adc	r26, r20
    1ada:	b5 1f       	adc	r27, r21
    1adc:	c8 16       	cp	r12, r24
    1ade:	d9 06       	cpc	r13, r25
    1ae0:	ea 06       	cpc	r14, r26
    1ae2:	fb 06       	cpc	r15, r27
    1ae4:	98 f4       	brcc	.+38     	; 0x1b0c <move_window+0xa0>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    1ae6:	1b 81       	ldd	r17, Y+3	; 0x03
    1ae8:	0f c0       	rjmp	.+30     	; 0x1b08 <move_window+0x9c>
					wsect += fs->fsize;
    1aea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1aec:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1aee:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1af0:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1af2:	c8 0e       	add	r12, r24
    1af4:	d9 1e       	adc	r13, r25
    1af6:	ea 1e       	adc	r14, r26
    1af8:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	b3 01       	movw	r22, r6
    1afe:	a7 01       	movw	r20, r14
    1b00:	96 01       	movw	r18, r12
    1b02:	01 e0       	ldi	r16, 0x01	; 1
    1b04:	f7 de       	rcall	.-530    	; 0x18f4 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    1b06:	11 50       	subi	r17, 0x01	; 1
    1b08:	12 30       	cpi	r17, 0x02	; 2
    1b0a:	78 f7       	brcc	.-34     	; 0x1aea <move_window+0x7e>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    1b0c:	81 14       	cp	r8, r1
    1b0e:	91 04       	cpc	r9, r1
    1b10:	a1 04       	cpc	r10, r1
    1b12:	b1 04       	cpc	r11, r1
    1b14:	89 f0       	breq	.+34     	; 0x1b38 <move_window+0xcc>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    1b16:	be 01       	movw	r22, r28
    1b18:	62 5d       	subi	r22, 0xD2	; 210
    1b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	a5 01       	movw	r20, r10
    1b20:	94 01       	movw	r18, r8
    1b22:	01 e0       	ldi	r16, 0x01	; 1
    1b24:	f3 de       	rcall	.-538    	; 0x190c <disk_read>
    1b26:	88 23       	and	r24, r24
    1b28:	29 f4       	brne	.+10     	; 0x1b34 <move_window+0xc8>
				return FR_DISK_ERR;
			fs->winsect = sector;
    1b2a:	8a a6       	std	Y+42, r8	; 0x2a
    1b2c:	9b a6       	std	Y+43, r9	; 0x2b
    1b2e:	ac a6       	std	Y+44, r10	; 0x2c
    1b30:	bd a6       	std	Y+45, r11	; 0x2d
    1b32:	03 c0       	rjmp	.+6      	; 0x1b3a <move_window+0xce>
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	01 c0       	rjmp	.+2      	; 0x1b3a <move_window+0xce>
    1b38:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return FR_OK;
}
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	ff 90       	pop	r15
    1b44:	ef 90       	pop	r14
    1b46:	df 90       	pop	r13
    1b48:	cf 90       	pop	r12
    1b4a:	bf 90       	pop	r11
    1b4c:	af 90       	pop	r10
    1b4e:	9f 90       	pop	r9
    1b50:	8f 90       	pop	r8
    1b52:	7f 90       	pop	r7
    1b54:	6f 90       	pop	r6
    1b56:	08 95       	ret

00001b58 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    1b58:	8f 92       	push	r8
    1b5a:	9f 92       	push	r9
    1b5c:	af 92       	push	r10
    1b5e:	bf 92       	push	r11
    1b60:	cf 92       	push	r12
    1b62:	df 92       	push	r13
    1b64:	ef 92       	push	r14
    1b66:	ff 92       	push	r15
    1b68:	0f 93       	push	r16
    1b6a:	1f 93       	push	r17
    1b6c:	cf 93       	push	r28
    1b6e:	df 93       	push	r29
    1b70:	ec 01       	movw	r28, r24
    1b72:	6a 01       	movw	r12, r20
    1b74:	7b 01       	movw	r14, r22
    1b76:	48 01       	movw	r8, r16
    1b78:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    1b7a:	42 30       	cpi	r20, 0x02	; 2
    1b7c:	51 05       	cpc	r21, r1
    1b7e:	61 05       	cpc	r22, r1
    1b80:	71 05       	cpc	r23, r1
    1b82:	08 f4       	brcc	.+2      	; 0x1b86 <put_fat+0x2e>
    1b84:	cd c0       	rjmp	.+410    	; 0x1d20 <put_fat+0x1c8>
    1b86:	8e 89       	ldd	r24, Y+22	; 0x16
    1b88:	9f 89       	ldd	r25, Y+23	; 0x17
    1b8a:	a8 8d       	ldd	r26, Y+24	; 0x18
    1b8c:	b9 8d       	ldd	r27, Y+25	; 0x19
    1b8e:	48 17       	cp	r20, r24
    1b90:	59 07       	cpc	r21, r25
    1b92:	6a 07       	cpc	r22, r26
    1b94:	7b 07       	cpc	r23, r27
    1b96:	08 f0       	brcs	.+2      	; 0x1b9a <put_fat+0x42>
    1b98:	c3 c0       	rjmp	.+390    	; 0x1d20 <put_fat+0x1c8>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    1b9a:	88 81       	ld	r24, Y
    1b9c:	82 30       	cpi	r24, 0x02	; 2
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <put_fat+0x4a>
    1ba0:	6e c0       	rjmp	.+220    	; 0x1c7e <put_fat+0x126>
    1ba2:	83 30       	cpi	r24, 0x03	; 3
    1ba4:	09 f4       	brne	.+2      	; 0x1ba8 <put_fat+0x50>
    1ba6:	89 c0       	rjmp	.+274    	; 0x1cba <put_fat+0x162>
    1ba8:	81 30       	cpi	r24, 0x01	; 1
    1baa:	11 f0       	breq	.+4      	; 0x1bb0 <put_fat+0x58>
    1bac:	22 e0       	ldi	r18, 0x02	; 2
    1bae:	b5 c0       	rjmp	.+362    	; 0x1d1a <put_fat+0x1c2>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    1bb0:	8a 01       	movw	r16, r20
    1bb2:	16 95       	lsr	r17
    1bb4:	07 95       	ror	r16
    1bb6:	04 0f       	add	r16, r20
    1bb8:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1bba:	a8 01       	movw	r20, r16
    1bbc:	45 2f       	mov	r20, r21
    1bbe:	55 27       	eor	r21, r21
    1bc0:	46 95       	lsr	r20
    1bc2:	60 e0       	ldi	r22, 0x00	; 0
    1bc4:	70 e0       	ldi	r23, 0x00	; 0
    1bc6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bc8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1bca:	a8 a1       	ldd	r26, Y+32	; 0x20
    1bcc:	b9 a1       	ldd	r27, Y+33	; 0x21
    1bce:	48 0f       	add	r20, r24
    1bd0:	59 1f       	adc	r21, r25
    1bd2:	6a 1f       	adc	r22, r26
    1bd4:	7b 1f       	adc	r23, r27
    1bd6:	ce 01       	movw	r24, r28
    1bd8:	49 df       	rcall	.-366    	; 0x1a6c <move_window>
    1bda:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    1bdc:	88 23       	and	r24, r24
    1bde:	09 f0       	breq	.+2      	; 0x1be2 <put_fat+0x8a>
    1be0:	9c c0       	rjmp	.+312    	; 0x1d1a <put_fat+0x1c2>
			p = &fs->win[bc % SS(fs)];
    1be2:	d8 01       	movw	r26, r16
    1be4:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	e8 2e       	mov	r14, r24
    1bea:	f1 2c       	mov	r15, r1
    1bec:	ec 20       	and	r14, r12
    1bee:	fd 20       	and	r15, r13
    1bf0:	e1 14       	cp	r14, r1
    1bf2:	f1 04       	cpc	r15, r1
    1bf4:	51 f0       	breq	.+20     	; 0x1c0a <put_fat+0xb2>
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	ea 0f       	add	r30, r26
    1bfa:	fb 1f       	adc	r31, r27
    1bfc:	86 a5       	ldd	r24, Z+46	; 0x2e
    1bfe:	8f 70       	andi	r24, 0x0F	; 15
    1c00:	98 2d       	mov	r25, r8
    1c02:	92 95       	swap	r25
    1c04:	90 7f       	andi	r25, 0xF0	; 240
    1c06:	98 2b       	or	r25, r24
    1c08:	01 c0       	rjmp	.+2      	; 0x1c0c <put_fat+0xb4>
    1c0a:	98 2d       	mov	r25, r8
    1c0c:	ac 0f       	add	r26, r28
    1c0e:	bd 1f       	adc	r27, r29
    1c10:	9e 96       	adiw	r26, 0x2e	; 46
    1c12:	9c 93       	st	X, r25
			bc++;
    1c14:	0f 5f       	subi	r16, 0xFF	; 255
    1c16:	1f 4f       	sbci	r17, 0xFF	; 255
			fs->wflag = 1;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1c1c:	a8 01       	movw	r20, r16
    1c1e:	45 2f       	mov	r20, r21
    1c20:	55 27       	eor	r21, r21
    1c22:	46 95       	lsr	r20
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	70 e0       	ldi	r23, 0x00	; 0
    1c28:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c2a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c2c:	a8 a1       	ldd	r26, Y+32	; 0x20
    1c2e:	b9 a1       	ldd	r27, Y+33	; 0x21
    1c30:	48 0f       	add	r20, r24
    1c32:	59 1f       	adc	r21, r25
    1c34:	6a 1f       	adc	r22, r26
    1c36:	7b 1f       	adc	r23, r27
    1c38:	ce 01       	movw	r24, r28
    1c3a:	18 df       	rcall	.-464    	; 0x1a6c <move_window>
    1c3c:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    1c3e:	88 23       	and	r24, r24
    1c40:	09 f0       	breq	.+2      	; 0x1c44 <put_fat+0xec>
    1c42:	6b c0       	rjmp	.+214    	; 0x1d1a <put_fat+0x1c2>
			p = &fs->win[bc % SS(fs)];
    1c44:	a8 01       	movw	r20, r16
    1c46:	51 70       	andi	r21, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1c48:	ef 28       	or	r14, r15
    1c4a:	49 f0       	breq	.+18     	; 0x1c5e <put_fat+0x106>
    1c4c:	e4 e0       	ldi	r30, 0x04	; 4
    1c4e:	b6 94       	lsr	r11
    1c50:	a7 94       	ror	r10
    1c52:	97 94       	ror	r9
    1c54:	87 94       	ror	r8
    1c56:	ea 95       	dec	r30
    1c58:	d1 f7       	brne	.-12     	; 0x1c4e <put_fat+0xf6>
    1c5a:	68 2d       	mov	r22, r8
    1c5c:	0b c0       	rjmp	.+22     	; 0x1c74 <put_fat+0x11c>
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e4 0f       	add	r30, r20
    1c62:	f5 1f       	adc	r31, r21
    1c64:	66 a5       	ldd	r22, Z+46	; 0x2e
    1c66:	60 7f       	andi	r22, 0xF0	; 240
    1c68:	bb 27       	eor	r27, r27
    1c6a:	ab 2d       	mov	r26, r11
    1c6c:	9a 2d       	mov	r25, r10
    1c6e:	89 2d       	mov	r24, r9
    1c70:	8f 70       	andi	r24, 0x0F	; 15
    1c72:	68 2b       	or	r22, r24
    1c74:	4c 0f       	add	r20, r28
    1c76:	5d 1f       	adc	r21, r29
    1c78:	fa 01       	movw	r30, r20
    1c7a:	66 a7       	std	Z+46, r22	; 0x2e
    1c7c:	4e c0       	rjmp	.+156    	; 0x1d1a <put_fat+0x1c2>
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    1c7e:	77 27       	eor	r23, r23
    1c80:	6f 2d       	mov	r22, r15
    1c82:	5e 2d       	mov	r21, r14
    1c84:	4d 2d       	mov	r20, r13
    1c86:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c88:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c8a:	a8 a1       	ldd	r26, Y+32	; 0x20
    1c8c:	b9 a1       	ldd	r27, Y+33	; 0x21
    1c8e:	48 0f       	add	r20, r24
    1c90:	59 1f       	adc	r21, r25
    1c92:	6a 1f       	adc	r22, r26
    1c94:	7b 1f       	adc	r23, r27
    1c96:	ce 01       	movw	r24, r28
    1c98:	e9 de       	rcall	.-558    	; 0x1a6c <move_window>
    1c9a:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    1c9c:	88 23       	and	r24, r24
    1c9e:	09 f0       	breq	.+2      	; 0x1ca2 <put_fat+0x14a>
    1ca0:	3c c0       	rjmp	.+120    	; 0x1d1a <put_fat+0x1c2>
			p = &fs->win[clst * 2 % SS(fs)];
			ST_WORD(p, (WORD)val);
    1ca2:	cc 0c       	add	r12, r12
    1ca4:	dd 1c       	adc	r13, r13
    1ca6:	ee 1c       	adc	r14, r14
    1ca8:	ff 1c       	adc	r15, r15
    1caa:	f6 01       	movw	r30, r12
    1cac:	f1 70       	andi	r31, 0x01	; 1
    1cae:	be 96       	adiw	r30, 0x2e	; 46
    1cb0:	ec 0f       	add	r30, r28
    1cb2:	fd 1f       	adc	r31, r29
    1cb4:	91 82       	std	Z+1, r9	; 0x01
    1cb6:	80 82       	st	Z, r8
    1cb8:	30 c0       	rjmp	.+96     	; 0x1d1a <put_fat+0x1c2>
			break;

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    1cba:	27 e0       	ldi	r18, 0x07	; 7
    1cbc:	76 95       	lsr	r23
    1cbe:	67 95       	ror	r22
    1cc0:	57 95       	ror	r21
    1cc2:	47 95       	ror	r20
    1cc4:	2a 95       	dec	r18
    1cc6:	d1 f7       	brne	.-12     	; 0x1cbc <put_fat+0x164>
    1cc8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ccc:	a8 a1       	ldd	r26, Y+32	; 0x20
    1cce:	b9 a1       	ldd	r27, Y+33	; 0x21
    1cd0:	48 0f       	add	r20, r24
    1cd2:	59 1f       	adc	r21, r25
    1cd4:	6a 1f       	adc	r22, r26
    1cd6:	7b 1f       	adc	r23, r27
    1cd8:	ce 01       	movw	r24, r28
    1cda:	c8 de       	rcall	.-624    	; 0x1a6c <move_window>
    1cdc:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    1cde:	88 23       	and	r24, r24
    1ce0:	e1 f4       	brne	.+56     	; 0x1d1a <put_fat+0x1c2>
			p = &fs->win[clst * 4 % SS(fs)];
			val |= LD_DWORD(p) & 0xF0000000;
    1ce2:	92 e0       	ldi	r25, 0x02	; 2
    1ce4:	cc 0c       	add	r12, r12
    1ce6:	dd 1c       	adc	r13, r13
    1ce8:	ee 1c       	adc	r14, r14
    1cea:	ff 1c       	adc	r15, r15
    1cec:	9a 95       	dec	r25
    1cee:	d1 f7       	brne	.-12     	; 0x1ce4 <put_fat+0x18c>
    1cf0:	f6 01       	movw	r30, r12
    1cf2:	f1 70       	andi	r31, 0x01	; 1
    1cf4:	be 96       	adiw	r30, 0x2e	; 46
    1cf6:	ec 0f       	add	r30, r28
    1cf8:	fd 1f       	adc	r31, r29
			ST_DWORD(p, val);
    1cfa:	80 81       	ld	r24, Z
    1cfc:	91 81       	ldd	r25, Z+1	; 0x01
    1cfe:	a2 81       	ldd	r26, Z+2	; 0x02
    1d00:	b3 81       	ldd	r27, Z+3	; 0x03
    1d02:	80 70       	andi	r24, 0x00	; 0
    1d04:	90 70       	andi	r25, 0x00	; 0
    1d06:	a0 70       	andi	r26, 0x00	; 0
    1d08:	b0 7f       	andi	r27, 0xF0	; 240
    1d0a:	88 29       	or	r24, r8
    1d0c:	99 29       	or	r25, r9
    1d0e:	aa 29       	or	r26, r10
    1d10:	bb 29       	or	r27, r11
    1d12:	80 83       	st	Z, r24
    1d14:	91 83       	std	Z+1, r25	; 0x01
    1d16:	a2 83       	std	Z+2, r26	; 0x02
    1d18:	b3 83       	std	Z+3, r27	; 0x03
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	8c 83       	std	Y+4, r24	; 0x04
    1d1e:	01 c0       	rjmp	.+2      	; 0x1d22 <put_fat+0x1ca>
    1d20:	22 e0       	ldi	r18, 0x02	; 2
	}

	return res;
}
    1d22:	82 2f       	mov	r24, r18
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	1f 91       	pop	r17
    1d2a:	0f 91       	pop	r16
    1d2c:	ff 90       	pop	r15
    1d2e:	ef 90       	pop	r14
    1d30:	df 90       	pop	r13
    1d32:	cf 90       	pop	r12
    1d34:	bf 90       	pop	r11
    1d36:	af 90       	pop	r10
    1d38:	9f 90       	pop	r9
    1d3a:	8f 90       	pop	r8
    1d3c:	08 95       	ret

00001d3e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    1d3e:	bf 92       	push	r11
    1d40:	cf 92       	push	r12
    1d42:	df 92       	push	r13
    1d44:	ef 92       	push	r14
    1d46:	ff 92       	push	r15
    1d48:	0f 93       	push	r16
    1d4a:	1f 93       	push	r17
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	6c 01       	movw	r12, r24
    1d52:	7a 01       	movw	r14, r20
    1d54:	8b 01       	movw	r16, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
    1d56:	42 30       	cpi	r20, 0x02	; 2
    1d58:	51 05       	cpc	r21, r1
    1d5a:	61 05       	cpc	r22, r1
    1d5c:	71 05       	cpc	r23, r1
    1d5e:	08 f4       	brcc	.+2      	; 0x1d62 <get_fat+0x24>
    1d60:	a8 c0       	rjmp	.+336    	; 0x1eb2 <get_fat+0x174>
    1d62:	f6 01       	movw	r30, r12
    1d64:	86 89       	ldd	r24, Z+22	; 0x16
    1d66:	97 89       	ldd	r25, Z+23	; 0x17
    1d68:	a0 8d       	ldd	r26, Z+24	; 0x18
    1d6a:	b1 8d       	ldd	r27, Z+25	; 0x19
    1d6c:	48 17       	cp	r20, r24
    1d6e:	59 07       	cpc	r21, r25
    1d70:	6a 07       	cpc	r22, r26
    1d72:	7b 07       	cpc	r23, r27
    1d74:	08 f0       	brcs	.+2      	; 0x1d78 <get_fat+0x3a>
    1d76:	9d c0       	rjmp	.+314    	; 0x1eb2 <get_fat+0x174>
		return 1;

	switch (fs->fs_type) {
    1d78:	80 81       	ld	r24, Z
    1d7a:	82 30       	cpi	r24, 0x02	; 2
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <get_fat+0x42>
    1d7e:	55 c0       	rjmp	.+170    	; 0x1e2a <get_fat+0xec>
    1d80:	83 30       	cpi	r24, 0x03	; 3
    1d82:	09 f4       	brne	.+2      	; 0x1d86 <get_fat+0x48>
    1d84:	71 c0       	rjmp	.+226    	; 0x1e68 <get_fat+0x12a>
    1d86:	81 30       	cpi	r24, 0x01	; 1
    1d88:	09 f0       	breq	.+2      	; 0x1d8c <get_fat+0x4e>
    1d8a:	98 c0       	rjmp	.+304    	; 0x1ebc <get_fat+0x17e>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    1d8c:	ea 01       	movw	r28, r20
    1d8e:	d6 95       	lsr	r29
    1d90:	c7 95       	ror	r28
    1d92:	c4 0f       	add	r28, r20
    1d94:	d5 1f       	adc	r29, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    1d96:	ae 01       	movw	r20, r28
    1d98:	45 2f       	mov	r20, r21
    1d9a:	55 27       	eor	r21, r21
    1d9c:	46 95       	lsr	r20
    1d9e:	60 e0       	ldi	r22, 0x00	; 0
    1da0:	70 e0       	ldi	r23, 0x00	; 0
    1da2:	f6 01       	movw	r30, r12
    1da4:	86 8d       	ldd	r24, Z+30	; 0x1e
    1da6:	97 8d       	ldd	r25, Z+31	; 0x1f
    1da8:	a0 a1       	ldd	r26, Z+32	; 0x20
    1daa:	b1 a1       	ldd	r27, Z+33	; 0x21
    1dac:	48 0f       	add	r20, r24
    1dae:	59 1f       	adc	r21, r25
    1db0:	6a 1f       	adc	r22, r26
    1db2:	7b 1f       	adc	r23, r27
    1db4:	c6 01       	movw	r24, r12
    1db6:	5a de       	rcall	.-844    	; 0x1a6c <move_window>
    1db8:	88 23       	and	r24, r24
    1dba:	09 f0       	breq	.+2      	; 0x1dbe <get_fat+0x80>
    1dbc:	7f c0       	rjmp	.+254    	; 0x1ebc <get_fat+0x17e>
		wc = fs->win[bc % SS(fs)]; bc++;
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	f1 70       	andi	r31, 0x01	; 1
    1dc2:	ec 0d       	add	r30, r12
    1dc4:	fd 1d       	adc	r31, r13
    1dc6:	b6 a4       	ldd	r11, Z+46	; 0x2e
    1dc8:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    1dca:	ae 01       	movw	r20, r28
    1dcc:	45 2f       	mov	r20, r21
    1dce:	55 27       	eor	r21, r21
    1dd0:	46 95       	lsr	r20
    1dd2:	60 e0       	ldi	r22, 0x00	; 0
    1dd4:	70 e0       	ldi	r23, 0x00	; 0
    1dd6:	f6 01       	movw	r30, r12
    1dd8:	86 8d       	ldd	r24, Z+30	; 0x1e
    1dda:	97 8d       	ldd	r25, Z+31	; 0x1f
    1ddc:	a0 a1       	ldd	r26, Z+32	; 0x20
    1dde:	b1 a1       	ldd	r27, Z+33	; 0x21
    1de0:	48 0f       	add	r20, r24
    1de2:	59 1f       	adc	r21, r25
    1de4:	6a 1f       	adc	r22, r26
    1de6:	7b 1f       	adc	r23, r27
    1de8:	c6 01       	movw	r24, r12
    1dea:	40 de       	rcall	.-896    	; 0x1a6c <move_window>
    1dec:	88 23       	and	r24, r24
    1dee:	09 f0       	breq	.+2      	; 0x1df2 <get_fat+0xb4>
    1df0:	65 c0       	rjmp	.+202    	; 0x1ebc <get_fat+0x17e>

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
    1df2:	6b 2d       	mov	r22, r11
    1df4:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
    1df6:	d1 70       	andi	r29, 0x01	; 1
    1df8:	cc 0d       	add	r28, r12
    1dfa:	dd 1d       	adc	r29, r13
    1dfc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	68 2b       	or	r22, r24
    1e02:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    1e04:	c7 01       	movw	r24, r14
    1e06:	81 70       	andi	r24, 0x01	; 1
    1e08:	90 70       	andi	r25, 0x00	; 0
    1e0a:	89 2b       	or	r24, r25
    1e0c:	39 f0       	breq	.+14     	; 0x1e1c <get_fat+0xde>
    1e0e:	b4 e0       	ldi	r27, 0x04	; 4
    1e10:	76 95       	lsr	r23
    1e12:	67 95       	ror	r22
    1e14:	ba 95       	dec	r27
    1e16:	e1 f7       	brne	.-8      	; 0x1e10 <get_fat+0xd2>
    1e18:	9b 01       	movw	r18, r22
    1e1a:	23 c0       	rjmp	.+70     	; 0x1e62 <get_fat+0x124>
    1e1c:	9b 01       	movw	r18, r22
    1e1e:	40 e0       	ldi	r20, 0x00	; 0
    1e20:	50 e0       	ldi	r21, 0x00	; 0
    1e22:	3f 70       	andi	r19, 0x0F	; 15
    1e24:	40 70       	andi	r20, 0x00	; 0
    1e26:	50 70       	andi	r21, 0x00	; 0
    1e28:	4d c0       	rjmp	.+154    	; 0x1ec4 <get_fat+0x186>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    1e2a:	45 2f       	mov	r20, r21
    1e2c:	56 2f       	mov	r21, r22
    1e2e:	67 2f       	mov	r22, r23
    1e30:	77 27       	eor	r23, r23
    1e32:	f6 01       	movw	r30, r12
    1e34:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e36:	97 8d       	ldd	r25, Z+31	; 0x1f
    1e38:	a0 a1       	ldd	r26, Z+32	; 0x20
    1e3a:	b1 a1       	ldd	r27, Z+33	; 0x21
    1e3c:	48 0f       	add	r20, r24
    1e3e:	59 1f       	adc	r21, r25
    1e40:	6a 1f       	adc	r22, r26
    1e42:	7b 1f       	adc	r23, r27
    1e44:	c6 01       	movw	r24, r12
    1e46:	12 de       	rcall	.-988    	; 0x1a6c <move_window>
    1e48:	88 23       	and	r24, r24
    1e4a:	c1 f5       	brne	.+112    	; 0x1ebc <get_fat+0x17e>
		p = &fs->win[clst * 2 % SS(fs)];
		return LD_WORD(p);
    1e4c:	ee 0c       	add	r14, r14
    1e4e:	ff 1c       	adc	r15, r15
    1e50:	00 1f       	adc	r16, r16
    1e52:	11 1f       	adc	r17, r17
    1e54:	f7 01       	movw	r30, r14
    1e56:	f1 70       	andi	r31, 0x01	; 1
    1e58:	ec 0d       	add	r30, r12
    1e5a:	fd 1d       	adc	r31, r13
    1e5c:	86 a5       	ldd	r24, Z+46	; 0x2e
    1e5e:	97 a5       	ldd	r25, Z+47	; 0x2f
    1e60:	9c 01       	movw	r18, r24
    1e62:	40 e0       	ldi	r20, 0x00	; 0
    1e64:	50 e0       	ldi	r21, 0x00	; 0
    1e66:	2e c0       	rjmp	.+92     	; 0x1ec4 <get_fat+0x186>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    1e68:	e7 e0       	ldi	r30, 0x07	; 7
    1e6a:	76 95       	lsr	r23
    1e6c:	67 95       	ror	r22
    1e6e:	57 95       	ror	r21
    1e70:	47 95       	ror	r20
    1e72:	ea 95       	dec	r30
    1e74:	d1 f7       	brne	.-12     	; 0x1e6a <get_fat+0x12c>
    1e76:	f6 01       	movw	r30, r12
    1e78:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e7a:	97 8d       	ldd	r25, Z+31	; 0x1f
    1e7c:	a0 a1       	ldd	r26, Z+32	; 0x20
    1e7e:	b1 a1       	ldd	r27, Z+33	; 0x21
    1e80:	48 0f       	add	r20, r24
    1e82:	59 1f       	adc	r21, r25
    1e84:	6a 1f       	adc	r22, r26
    1e86:	7b 1f       	adc	r23, r27
    1e88:	c6 01       	movw	r24, r12
    1e8a:	f0 dd       	rcall	.-1056   	; 0x1a6c <move_window>
    1e8c:	88 23       	and	r24, r24
    1e8e:	b1 f4       	brne	.+44     	; 0x1ebc <get_fat+0x17e>
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
    1e90:	32 e0       	ldi	r19, 0x02	; 2
    1e92:	ee 0c       	add	r14, r14
    1e94:	ff 1c       	adc	r15, r15
    1e96:	00 1f       	adc	r16, r16
    1e98:	11 1f       	adc	r17, r17
    1e9a:	3a 95       	dec	r19
    1e9c:	d1 f7       	brne	.-12     	; 0x1e92 <get_fat+0x154>
    1e9e:	f7 01       	movw	r30, r14
    1ea0:	f1 70       	andi	r31, 0x01	; 1
    1ea2:	ec 0d       	add	r30, r12
    1ea4:	fd 1d       	adc	r31, r13
    1ea6:	26 a5       	ldd	r18, Z+46	; 0x2e
    1ea8:	37 a5       	ldd	r19, Z+47	; 0x2f
    1eaa:	40 a9       	ldd	r20, Z+48	; 0x30
    1eac:	51 a9       	ldd	r21, Z+49	; 0x31
    1eae:	5f 70       	andi	r21, 0x0F	; 15
    1eb0:	09 c0       	rjmp	.+18     	; 0x1ec4 <get_fat+0x186>
    1eb2:	21 e0       	ldi	r18, 0x01	; 1
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	50 e0       	ldi	r21, 0x00	; 0
    1eba:	04 c0       	rjmp	.+8      	; 0x1ec4 <get_fat+0x186>
    1ebc:	2f ef       	ldi	r18, 0xFF	; 255
    1ebe:	3f ef       	ldi	r19, 0xFF	; 255
    1ec0:	4f ef       	ldi	r20, 0xFF	; 255
    1ec2:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
}
    1ec4:	b9 01       	movw	r22, r18
    1ec6:	ca 01       	movw	r24, r20
    1ec8:	df 91       	pop	r29
    1eca:	cf 91       	pop	r28
    1ecc:	1f 91       	pop	r17
    1ece:	0f 91       	pop	r16
    1ed0:	ff 90       	pop	r15
    1ed2:	ef 90       	pop	r14
    1ed4:	df 90       	pop	r13
    1ed6:	cf 90       	pop	r12
    1ed8:	bf 90       	pop	r11
    1eda:	08 95       	ret

00001edc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    1edc:	4f 92       	push	r4
    1ede:	5f 92       	push	r5
    1ee0:	6f 92       	push	r6
    1ee2:	7f 92       	push	r7
    1ee4:	8f 92       	push	r8
    1ee6:	9f 92       	push	r9
    1ee8:	af 92       	push	r10
    1eea:	bf 92       	push	r11
    1eec:	cf 92       	push	r12
    1eee:	df 92       	push	r13
    1ef0:	ef 92       	push	r14
    1ef2:	ff 92       	push	r15
    1ef4:	0f 93       	push	r16
    1ef6:	1f 93       	push	r17
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	ec 01       	movw	r28, r24
    1efe:	2a 01       	movw	r4, r20
    1f00:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl;


	if (clst == 0) {		/* Create a new chain */
    1f02:	41 15       	cp	r20, r1
    1f04:	51 05       	cpc	r21, r1
    1f06:	61 05       	cpc	r22, r1
    1f08:	71 05       	cpc	r23, r1
    1f0a:	99 f4       	brne	.+38     	; 0x1f32 <create_chain+0x56>
		scl = fs->last_clust;			/* Get suggested start point */
    1f0c:	8a 84       	ldd	r8, Y+10	; 0x0a
    1f0e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f10:	ac 84       	ldd	r10, Y+12	; 0x0c
    1f12:	bd 84       	ldd	r11, Y+13	; 0x0d
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1f14:	81 14       	cp	r8, r1
    1f16:	91 04       	cpc	r9, r1
    1f18:	a1 04       	cpc	r10, r1
    1f1a:	b1 04       	cpc	r11, r1
    1f1c:	21 f1       	breq	.+72     	; 0x1f66 <create_chain+0x8a>
    1f1e:	8e 89       	ldd	r24, Y+22	; 0x16
    1f20:	9f 89       	ldd	r25, Y+23	; 0x17
    1f22:	a8 8d       	ldd	r26, Y+24	; 0x18
    1f24:	b9 8d       	ldd	r27, Y+25	; 0x19
    1f26:	88 16       	cp	r8, r24
    1f28:	99 06       	cpc	r9, r25
    1f2a:	aa 06       	cpc	r10, r26
    1f2c:	bb 06       	cpc	r11, r27
    1f2e:	d8 f4       	brcc	.+54     	; 0x1f66 <create_chain+0x8a>
    1f30:	1f c0       	rjmp	.+62     	; 0x1f70 <create_chain+0x94>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1f32:	05 df       	rcall	.-502    	; 0x1d3e <get_fat>
    1f34:	9b 01       	movw	r18, r22
    1f36:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1f38:	62 30       	cpi	r22, 0x02	; 2
    1f3a:	71 05       	cpc	r23, r1
    1f3c:	81 05       	cpc	r24, r1
    1f3e:	91 05       	cpc	r25, r1
    1f40:	28 f4       	brcc	.+10     	; 0x1f4c <create_chain+0x70>
    1f42:	21 e0       	ldi	r18, 0x01	; 1
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	40 e0       	ldi	r20, 0x00	; 0
    1f48:	50 e0       	ldi	r21, 0x00	; 0
    1f4a:	8e c0       	rjmp	.+284    	; 0x2068 <create_chain+0x18c>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    1f4c:	8e 89       	ldd	r24, Y+22	; 0x16
    1f4e:	9f 89       	ldd	r25, Y+23	; 0x17
    1f50:	a8 8d       	ldd	r26, Y+24	; 0x18
    1f52:	b9 8d       	ldd	r27, Y+25	; 0x19
    1f54:	28 17       	cp	r18, r24
    1f56:	39 07       	cpc	r19, r25
    1f58:	4a 07       	cpc	r20, r26
    1f5a:	5b 07       	cpc	r21, r27
    1f5c:	08 f4       	brcc	.+2      	; 0x1f60 <create_chain+0x84>
    1f5e:	84 c0       	rjmp	.+264    	; 0x2068 <create_chain+0x18c>
    1f60:	53 01       	movw	r10, r6
    1f62:	42 01       	movw	r8, r4
    1f64:	05 c0       	rjmp	.+10     	; 0x1f70 <create_chain+0x94>
    1f66:	41 e0       	ldi	r20, 0x01	; 1
    1f68:	84 2e       	mov	r8, r20
    1f6a:	91 2c       	mov	r9, r1
    1f6c:	a1 2c       	mov	r10, r1
    1f6e:	b1 2c       	mov	r11, r1
    1f70:	75 01       	movw	r14, r10
    1f72:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1f74:	08 94       	sec
    1f76:	c1 1c       	adc	r12, r1
    1f78:	d1 1c       	adc	r13, r1
    1f7a:	e1 1c       	adc	r14, r1
    1f7c:	f1 1c       	adc	r15, r1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    1f7e:	8e 89       	ldd	r24, Y+22	; 0x16
    1f80:	9f 89       	ldd	r25, Y+23	; 0x17
    1f82:	a8 8d       	ldd	r26, Y+24	; 0x18
    1f84:	b9 8d       	ldd	r27, Y+25	; 0x19
    1f86:	c8 16       	cp	r12, r24
    1f88:	d9 06       	cpc	r13, r25
    1f8a:	ea 06       	cpc	r14, r26
    1f8c:	fb 06       	cpc	r15, r27
    1f8e:	60 f0       	brcs	.+24     	; 0x1fa8 <create_chain+0xcc>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    1f90:	22 e0       	ldi	r18, 0x02	; 2
    1f92:	82 16       	cp	r8, r18
    1f94:	91 04       	cpc	r9, r1
    1f96:	a1 04       	cpc	r10, r1
    1f98:	b1 04       	cpc	r11, r1
    1f9a:	08 f4       	brcc	.+2      	; 0x1f9e <create_chain+0xc2>
    1f9c:	5c c0       	rjmp	.+184    	; 0x2056 <create_chain+0x17a>
    1f9e:	32 e0       	ldi	r19, 0x02	; 2
    1fa0:	c3 2e       	mov	r12, r19
    1fa2:	d1 2c       	mov	r13, r1
    1fa4:	e1 2c       	mov	r14, r1
    1fa6:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1fa8:	ce 01       	movw	r24, r28
    1faa:	b7 01       	movw	r22, r14
    1fac:	a6 01       	movw	r20, r12
    1fae:	c7 de       	rcall	.-626    	; 0x1d3e <get_fat>
    1fb0:	9b 01       	movw	r18, r22
    1fb2:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    1fb4:	61 15       	cp	r22, r1
    1fb6:	71 05       	cpc	r23, r1
    1fb8:	81 05       	cpc	r24, r1
    1fba:	91 05       	cpc	r25, r1
    1fbc:	a9 f0       	breq	.+42     	; 0x1fe8 <create_chain+0x10c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1fbe:	2f 3f       	cpi	r18, 0xFF	; 255
    1fc0:	8f ef       	ldi	r24, 0xFF	; 255
    1fc2:	38 07       	cpc	r19, r24
    1fc4:	8f ef       	ldi	r24, 0xFF	; 255
    1fc6:	48 07       	cpc	r20, r24
    1fc8:	8f ef       	ldi	r24, 0xFF	; 255
    1fca:	58 07       	cpc	r21, r24
    1fcc:	09 f4       	brne	.+2      	; 0x1fd0 <create_chain+0xf4>
    1fce:	4c c0       	rjmp	.+152    	; 0x2068 <create_chain+0x18c>
    1fd0:	21 30       	cpi	r18, 0x01	; 1
    1fd2:	31 05       	cpc	r19, r1
    1fd4:	41 05       	cpc	r20, r1
    1fd6:	51 05       	cpc	r21, r1
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <create_chain+0x100>
    1fda:	46 c0       	rjmp	.+140    	; 0x2068 <create_chain+0x18c>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    1fdc:	c8 14       	cp	r12, r8
    1fde:	d9 04       	cpc	r13, r9
    1fe0:	ea 04       	cpc	r14, r10
    1fe2:	fb 04       	cpc	r15, r11
    1fe4:	39 f6       	brne	.-114    	; 0x1f74 <create_chain+0x98>
    1fe6:	37 c0       	rjmp	.+110    	; 0x2056 <create_chain+0x17a>
    1fe8:	bc 2c       	mov	r11, r12
    1fea:	ad 2c       	mov	r10, r13
    1fec:	9e 2c       	mov	r9, r14
    1fee:	8f 2c       	mov	r8, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "last link" */
    1ff0:	ce 01       	movw	r24, r28
    1ff2:	a6 01       	movw	r20, r12
    1ff4:	b7 01       	movw	r22, r14
    1ff6:	0f ef       	ldi	r16, 0xFF	; 255
    1ff8:	1f ef       	ldi	r17, 0xFF	; 255
    1ffa:	2f ef       	ldi	r18, 0xFF	; 255
    1ffc:	3f e0       	ldi	r19, 0x0F	; 15
    1ffe:	ac dd       	rcall	.-1192   	; 0x1b58 <put_fat>
    2000:	88 23       	and	r24, r24
    2002:	71 f5       	brne	.+92     	; 0x2060 <create_chain+0x184>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
    2004:	41 14       	cp	r4, r1
    2006:	51 04       	cpc	r5, r1
    2008:	61 04       	cpc	r6, r1
    200a:	71 04       	cpc	r7, r1
    200c:	41 f0       	breq	.+16     	; 0x201e <create_chain+0x142>
		if (put_fat(fs, clst, ncl))
    200e:	ce 01       	movw	r24, r28
    2010:	b3 01       	movw	r22, r6
    2012:	a2 01       	movw	r20, r4
    2014:	86 01       	movw	r16, r12
    2016:	97 01       	movw	r18, r14
    2018:	9f dd       	rcall	.-1218   	; 0x1b58 <put_fat>
    201a:	88 23       	and	r24, r24
    201c:	09 f5       	brne	.+66     	; 0x2060 <create_chain+0x184>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
    201e:	ba 86       	std	Y+10, r11	; 0x0a
    2020:	ab 86       	std	Y+11, r10	; 0x0b
    2022:	9c 86       	std	Y+12, r9	; 0x0c
    2024:	8d 86       	std	Y+13, r8	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
    2026:	8e 85       	ldd	r24, Y+14	; 0x0e
    2028:	9f 85       	ldd	r25, Y+15	; 0x0f
    202a:	a8 89       	ldd	r26, Y+16	; 0x10
    202c:	b9 89       	ldd	r27, Y+17	; 0x11
    202e:	8f 3f       	cpi	r24, 0xFF	; 255
    2030:	2f ef       	ldi	r18, 0xFF	; 255
    2032:	92 07       	cpc	r25, r18
    2034:	2f ef       	ldi	r18, 0xFF	; 255
    2036:	a2 07       	cpc	r26, r18
    2038:	2f ef       	ldi	r18, 0xFF	; 255
    203a:	b2 07       	cpc	r27, r18
    203c:	49 f0       	breq	.+18     	; 0x2050 <create_chain+0x174>
		fs->free_clust--;
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	a1 09       	sbc	r26, r1
    2042:	b1 09       	sbc	r27, r1
    2044:	8e 87       	std	Y+14, r24	; 0x0e
    2046:	9f 87       	std	Y+15, r25	; 0x0f
    2048:	a8 8b       	std	Y+16, r26	; 0x10
    204a:	b9 8b       	std	Y+17, r27	; 0x11
		fs->fsi_flag = 1;
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	8d 83       	std	Y+5, r24	; 0x05
    2050:	a7 01       	movw	r20, r14
    2052:	96 01       	movw	r18, r12
    2054:	09 c0       	rjmp	.+18     	; 0x2068 <create_chain+0x18c>
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e0       	ldi	r20, 0x00	; 0
    205c:	50 e0       	ldi	r21, 0x00	; 0
    205e:	04 c0       	rjmp	.+8      	; 0x2068 <create_chain+0x18c>
    2060:	2f ef       	ldi	r18, 0xFF	; 255
    2062:	3f ef       	ldi	r19, 0xFF	; 255
    2064:	4f ef       	ldi	r20, 0xFF	; 255
    2066:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number */
}
    2068:	b9 01       	movw	r22, r18
    206a:	ca 01       	movw	r24, r20
    206c:	df 91       	pop	r29
    206e:	cf 91       	pop	r28
    2070:	1f 91       	pop	r17
    2072:	0f 91       	pop	r16
    2074:	ff 90       	pop	r15
    2076:	ef 90       	pop	r14
    2078:	df 90       	pop	r13
    207a:	cf 90       	pop	r12
    207c:	bf 90       	pop	r11
    207e:	af 90       	pop	r10
    2080:	9f 90       	pop	r9
    2082:	8f 90       	pop	r8
    2084:	7f 90       	pop	r7
    2086:	6f 90       	pop	r6
    2088:	5f 90       	pop	r5
    208a:	4f 90       	pop	r4
    208c:	08 95       	ret

0000208e <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    208e:	2f 92       	push	r2
    2090:	3f 92       	push	r3
    2092:	4f 92       	push	r4
    2094:	5f 92       	push	r5
    2096:	6f 92       	push	r6
    2098:	7f 92       	push	r7
    209a:	8f 92       	push	r8
    209c:	9f 92       	push	r9
    209e:	af 92       	push	r10
    20a0:	bf 92       	push	r11
    20a2:	cf 92       	push	r12
    20a4:	df 92       	push	r13
    20a6:	ef 92       	push	r14
    20a8:	ff 92       	push	r15
    20aa:	0f 93       	push	r16
    20ac:	1f 93       	push	r17
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <f_lseek+0x26>
    20b4:	00 d0       	rcall	.+0      	; 0x20b6 <f_lseek+0x28>
    20b6:	0f 92       	push	r0
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	9d 83       	std	Y+5, r25	; 0x05
    20be:	8c 83       	std	Y+4, r24	; 0x04
    20c0:	3a 01       	movw	r6, r20
    20c2:	4b 01       	movw	r8, r22
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    20c4:	dc 01       	movw	r26, r24
    20c6:	12 96       	adiw	r26, 0x02	; 2
    20c8:	6d 91       	ld	r22, X+
    20ca:	7c 91       	ld	r23, X
    20cc:	13 97       	sbiw	r26, 0x03	; 3
    20ce:	8d 91       	ld	r24, X+
    20d0:	9c 91       	ld	r25, X
    20d2:	b7 dc       	rcall	.-1682   	; 0x1a42 <validate>
    20d4:	8b 83       	std	Y+3, r24	; 0x03
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    20d6:	88 23       	and	r24, r24
    20d8:	09 f0       	breq	.+2      	; 0x20dc <f_lseek+0x4e>
    20da:	7d c1       	rjmp	.+762    	; 0x23d6 <__stack+0x2d7>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    20dc:	ec 81       	ldd	r30, Y+4	; 0x04
    20de:	fd 81       	ldd	r31, Y+5	; 0x05
    20e0:	84 81       	ldd	r24, Z+4	; 0x04
    20e2:	87 fd       	sbrc	r24, 7
    20e4:	8f c0       	rjmp	.+286    	; 0x2204 <__stack+0x105>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    20e6:	ac 81       	ldd	r26, Y+4	; 0x04
    20e8:	bd 81       	ldd	r27, Y+5	; 0x05
    20ea:	1a 96       	adiw	r26, 0x0a	; 10
    20ec:	ad 90       	ld	r10, X+
    20ee:	bd 90       	ld	r11, X+
    20f0:	cd 90       	ld	r12, X+
    20f2:	dc 90       	ld	r13, X
    20f4:	1d 97       	sbiw	r26, 0x0d	; 13
    20f6:	a6 14       	cp	r10, r6
    20f8:	b7 04       	cpc	r11, r7
    20fa:	c8 04       	cpc	r12, r8
    20fc:	d9 04       	cpc	r13, r9
    20fe:	10 f4       	brcc	.+4      	; 0x2104 <__stack+0x5>
    2100:	81 ff       	sbrs	r24, 1
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <__stack+0x9>
    2104:	64 01       	movw	r12, r8
    2106:	53 01       	movw	r10, r6
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    2108:	ec 81       	ldd	r30, Y+4	; 0x04
    210a:	fd 81       	ldd	r31, Y+5	; 0x05
    210c:	26 81       	ldd	r18, Z+6	; 0x06
    210e:	37 81       	ldd	r19, Z+7	; 0x07
    2110:	40 85       	ldd	r20, Z+8	; 0x08
    2112:	51 85       	ldd	r21, Z+9	; 0x09
		fp->fptr = nsect = 0;
    2114:	16 82       	std	Z+6, r1	; 0x06
    2116:	17 82       	std	Z+7, r1	; 0x07
    2118:	10 86       	std	Z+8, r1	; 0x08
    211a:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    211c:	a1 14       	cp	r10, r1
    211e:	b1 04       	cpc	r11, r1
    2120:	c1 04       	cpc	r12, r1
    2122:	d1 04       	cpc	r13, r1
    2124:	09 f4       	brne	.+2      	; 0x2128 <__stack+0x29>
    2126:	23 c1       	rjmp	.+582    	; 0x236e <__stack+0x26f>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    2128:	01 90       	ld	r0, Z+
    212a:	f0 81       	ld	r31, Z
    212c:	e0 2d       	mov	r30, r0
    212e:	fa 83       	std	Y+2, r31	; 0x02
    2130:	e9 83       	std	Y+1, r30	; 0x01
    2132:	82 81       	ldd	r24, Z+2	; 0x02
    2134:	68 2e       	mov	r6, r24
    2136:	77 24       	eor	r7, r7
    2138:	88 24       	eor	r8, r8
    213a:	99 24       	eor	r9, r9
    213c:	f9 e0       	ldi	r31, 0x09	; 9
    213e:	66 0c       	add	r6, r6
    2140:	77 1c       	adc	r7, r7
    2142:	88 1c       	adc	r8, r8
    2144:	99 1c       	adc	r9, r9
    2146:	fa 95       	dec	r31
    2148:	d1 f7       	brne	.-12     	; 0x213e <__stack+0x3f>
			if (ifptr > 0 &&
    214a:	21 15       	cp	r18, r1
    214c:	31 05       	cpc	r19, r1
    214e:	41 05       	cpc	r20, r1
    2150:	51 05       	cpc	r21, r1
    2152:	c1 f1       	breq	.+112    	; 0x21c4 <__stack+0xc5>
    2154:	19 01       	movw	r2, r18
    2156:	2a 01       	movw	r4, r20
    2158:	08 94       	sec
    215a:	21 08       	sbc	r2, r1
    215c:	31 08       	sbc	r3, r1
    215e:	41 08       	sbc	r4, r1
    2160:	51 08       	sbc	r5, r1
    2162:	c6 01       	movw	r24, r12
    2164:	b5 01       	movw	r22, r10
    2166:	61 50       	subi	r22, 0x01	; 1
    2168:	70 40       	sbci	r23, 0x00	; 0
    216a:	80 40       	sbci	r24, 0x00	; 0
    216c:	90 40       	sbci	r25, 0x00	; 0
    216e:	a4 01       	movw	r20, r8
    2170:	93 01       	movw	r18, r6
    2172:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <__udivmodsi4>
    2176:	79 01       	movw	r14, r18
    2178:	8a 01       	movw	r16, r20
    217a:	c2 01       	movw	r24, r4
    217c:	b1 01       	movw	r22, r2
    217e:	a4 01       	movw	r20, r8
    2180:	93 01       	movw	r18, r6
    2182:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <__udivmodsi4>
    2186:	e2 16       	cp	r14, r18
    2188:	f3 06       	cpc	r15, r19
    218a:	04 07       	cpc	r16, r20
    218c:	15 07       	cpc	r17, r21
    218e:	d0 f0       	brcs	.+52     	; 0x21c4 <__stack+0xc5>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    2190:	88 27       	eor	r24, r24
    2192:	99 27       	eor	r25, r25
    2194:	dc 01       	movw	r26, r24
    2196:	86 19       	sub	r24, r6
    2198:	97 09       	sbc	r25, r7
    219a:	a8 09       	sbc	r26, r8
    219c:	b9 09       	sbc	r27, r9
    219e:	82 21       	and	r24, r2
    21a0:	93 21       	and	r25, r3
    21a2:	a4 21       	and	r26, r4
    21a4:	b5 21       	and	r27, r5
    21a6:	ec 81       	ldd	r30, Y+4	; 0x04
    21a8:	fd 81       	ldd	r31, Y+5	; 0x05
    21aa:	86 83       	std	Z+6, r24	; 0x06
    21ac:	97 83       	std	Z+7, r25	; 0x07
    21ae:	a0 87       	std	Z+8, r26	; 0x08
    21b0:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    21b2:	a8 1a       	sub	r10, r24
    21b4:	b9 0a       	sbc	r11, r25
    21b6:	ca 0a       	sbc	r12, r26
    21b8:	db 0a       	sbc	r13, r27
				clst = fp->curr_clust;
    21ba:	42 89       	ldd	r20, Z+18	; 0x12
    21bc:	53 89       	ldd	r21, Z+19	; 0x13
    21be:	64 89       	ldd	r22, Z+20	; 0x14
    21c0:	75 89       	ldd	r23, Z+21	; 0x15
    21c2:	39 c0       	rjmp	.+114    	; 0x2236 <__stack+0x137>
			} else {									/* When seek to back cluster, */
				clst = fp->org_clust;					/* start from the first cluster */
    21c4:	ac 81       	ldd	r26, Y+4	; 0x04
    21c6:	bd 81       	ldd	r27, Y+5	; 0x05
    21c8:	1e 96       	adiw	r26, 0x0e	; 14
    21ca:	4d 91       	ld	r20, X+
    21cc:	5d 91       	ld	r21, X+
    21ce:	6d 91       	ld	r22, X+
    21d0:	7c 91       	ld	r23, X
    21d2:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    21d4:	41 15       	cp	r20, r1
    21d6:	51 05       	cpc	r21, r1
    21d8:	61 05       	cpc	r22, r1
    21da:	71 05       	cpc	r23, r1
    21dc:	21 f5       	brne	.+72     	; 0x2226 <__stack+0x127>
					clst = create_chain(fp->fs, 0);
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	9a 81       	ldd	r25, Y+2	; 0x02
    21e2:	40 e0       	ldi	r20, 0x00	; 0
    21e4:	50 e0       	ldi	r21, 0x00	; 0
    21e6:	60 e0       	ldi	r22, 0x00	; 0
    21e8:	70 e0       	ldi	r23, 0x00	; 0
    21ea:	78 de       	rcall	.-784    	; 0x1edc <create_chain>
    21ec:	ab 01       	movw	r20, r22
    21ee:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    21f0:	41 30       	cpi	r20, 0x01	; 1
    21f2:	51 05       	cpc	r21, r1
    21f4:	61 05       	cpc	r22, r1
    21f6:	71 05       	cpc	r23, r1
    21f8:	41 f4       	brne	.+16     	; 0x220a <__stack+0x10b>
    21fa:	ec 81       	ldd	r30, Y+4	; 0x04
    21fc:	fd 81       	ldd	r31, Y+5	; 0x05
    21fe:	84 81       	ldd	r24, Z+4	; 0x04
    2200:	80 68       	ori	r24, 0x80	; 128
    2202:	84 83       	std	Z+4, r24	; 0x04
    2204:	f2 e0       	ldi	r31, 0x02	; 2
    2206:	fb 83       	std	Y+3, r31	; 0x03
    2208:	e6 c0       	rjmp	.+460    	; 0x23d6 <__stack+0x2d7>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    220a:	4f 3f       	cpi	r20, 0xFF	; 255
    220c:	8f ef       	ldi	r24, 0xFF	; 255
    220e:	58 07       	cpc	r21, r24
    2210:	8f ef       	ldi	r24, 0xFF	; 255
    2212:	68 07       	cpc	r22, r24
    2214:	8f ef       	ldi	r24, 0xFF	; 255
    2216:	78 07       	cpc	r23, r24
    2218:	a1 f1       	breq	.+104    	; 0x2282 <__stack+0x183>
					fp->org_clust = clst;
    221a:	ec 81       	ldd	r30, Y+4	; 0x04
    221c:	fd 81       	ldd	r31, Y+5	; 0x05
    221e:	46 87       	std	Z+14, r20	; 0x0e
    2220:	57 87       	std	Z+15, r21	; 0x0f
    2222:	60 8b       	std	Z+16, r22	; 0x10
    2224:	71 8b       	std	Z+17, r23	; 0x11
				}
#endif
				fp->curr_clust = clst;
    2226:	ac 81       	ldd	r26, Y+4	; 0x04
    2228:	bd 81       	ldd	r27, Y+5	; 0x05
    222a:	52 96       	adiw	r26, 0x12	; 18
    222c:	4d 93       	st	X+, r20
    222e:	5d 93       	st	X+, r21
    2230:	6d 93       	st	X+, r22
    2232:	7c 93       	st	X, r23
    2234:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
    2236:	41 15       	cp	r20, r1
    2238:	51 05       	cpc	r21, r1
    223a:	61 05       	cpc	r22, r1
    223c:	71 05       	cpc	r23, r1
    223e:	09 f0       	breq	.+2      	; 0x2242 <__stack+0x143>
    2240:	58 c0       	rjmp	.+176    	; 0x22f2 <__stack+0x1f3>
    2242:	95 c0       	rjmp	.+298    	; 0x236e <__stack+0x26f>
				while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    2244:	ec 81       	ldd	r30, Y+4	; 0x04
    2246:	fd 81       	ldd	r31, Y+5	; 0x05
    2248:	84 81       	ldd	r24, Z+4	; 0x04
    224a:	20 81       	ld	r18, Z
    224c:	31 81       	ldd	r19, Z+1	; 0x01
    224e:	81 ff       	sbrs	r24, 1
    2250:	0c c0       	rjmp	.+24     	; 0x226a <__stack+0x16b>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    2252:	c9 01       	movw	r24, r18
    2254:	43 de       	rcall	.-890    	; 0x1edc <create_chain>
    2256:	ab 01       	movw	r20, r22
    2258:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    225a:	41 15       	cp	r20, r1
    225c:	51 05       	cpc	r21, r1
    225e:	61 05       	cpc	r22, r1
    2260:	71 05       	cpc	r23, r1
    2262:	39 f4       	brne	.+14     	; 0x2272 <__stack+0x173>
    2264:	64 01       	movw	r12, r8
    2266:	53 01       	movw	r10, r6
    2268:	4a c0       	rjmp	.+148    	; 0x22fe <__stack+0x1ff>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    226a:	c9 01       	movw	r24, r18
    226c:	68 dd       	rcall	.-1328   	; 0x1d3e <get_fat>
    226e:	ab 01       	movw	r20, r22
    2270:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2272:	4f 3f       	cpi	r20, 0xFF	; 255
    2274:	ff ef       	ldi	r31, 0xFF	; 255
    2276:	5f 07       	cpc	r21, r31
    2278:	ff ef       	ldi	r31, 0xFF	; 255
    227a:	6f 07       	cpc	r22, r31
    227c:	ff ef       	ldi	r31, 0xFF	; 255
    227e:	7f 07       	cpc	r23, r31
    2280:	51 f4       	brne	.+20     	; 0x2296 <__stack+0x197>
    2282:	ac 81       	ldd	r26, Y+4	; 0x04
    2284:	bd 81       	ldd	r27, Y+5	; 0x05
    2286:	14 96       	adiw	r26, 0x04	; 4
    2288:	8c 91       	ld	r24, X
    228a:	14 97       	sbiw	r26, 0x04	; 4
    228c:	80 68       	ori	r24, 0x80	; 128
    228e:	14 96       	adiw	r26, 0x04	; 4
    2290:	8c 93       	st	X, r24
    2292:	b1 e0       	ldi	r27, 0x01	; 1
    2294:	5c c0       	rjmp	.+184    	; 0x234e <__stack+0x24f>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    2296:	42 30       	cpi	r20, 0x02	; 2
    2298:	51 05       	cpc	r21, r1
    229a:	61 05       	cpc	r22, r1
    229c:	71 05       	cpc	r23, r1
    229e:	08 f4       	brcc	.+2      	; 0x22a2 <__stack+0x1a3>
    22a0:	ac cf       	rjmp	.-168    	; 0x21fa <__stack+0xfb>
    22a2:	ac 81       	ldd	r26, Y+4	; 0x04
    22a4:	bd 81       	ldd	r27, Y+5	; 0x05
    22a6:	ed 91       	ld	r30, X+
    22a8:	fc 91       	ld	r31, X
    22aa:	86 89       	ldd	r24, Z+22	; 0x16
    22ac:	97 89       	ldd	r25, Z+23	; 0x17
    22ae:	a0 8d       	ldd	r26, Z+24	; 0x18
    22b0:	b1 8d       	ldd	r27, Z+25	; 0x19
    22b2:	48 17       	cp	r20, r24
    22b4:	59 07       	cpc	r21, r25
    22b6:	6a 07       	cpc	r22, r26
    22b8:	7b 07       	cpc	r23, r27
    22ba:	08 f0       	brcs	.+2      	; 0x22be <__stack+0x1bf>
    22bc:	9e cf       	rjmp	.-196    	; 0x21fa <__stack+0xfb>
					fp->curr_clust = clst;
    22be:	ac 81       	ldd	r26, Y+4	; 0x04
    22c0:	bd 81       	ldd	r27, Y+5	; 0x05
    22c2:	52 96       	adiw	r26, 0x12	; 18
    22c4:	4d 93       	st	X+, r20
    22c6:	5d 93       	st	X+, r21
    22c8:	6d 93       	st	X+, r22
    22ca:	7c 93       	st	X, r23
    22cc:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    22ce:	ec 81       	ldd	r30, Y+4	; 0x04
    22d0:	fd 81       	ldd	r31, Y+5	; 0x05
    22d2:	86 81       	ldd	r24, Z+6	; 0x06
    22d4:	97 81       	ldd	r25, Z+7	; 0x07
    22d6:	a0 85       	ldd	r26, Z+8	; 0x08
    22d8:	b1 85       	ldd	r27, Z+9	; 0x09
    22da:	86 0d       	add	r24, r6
    22dc:	97 1d       	adc	r25, r7
    22de:	a8 1d       	adc	r26, r8
    22e0:	b9 1d       	adc	r27, r9
    22e2:	86 83       	std	Z+6, r24	; 0x06
    22e4:	97 83       	std	Z+7, r25	; 0x07
    22e6:	a0 87       	std	Z+8, r26	; 0x08
    22e8:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    22ea:	a6 18       	sub	r10, r6
    22ec:	b7 08       	sbc	r11, r7
    22ee:	c8 08       	sbc	r12, r8
    22f0:	d9 08       	sbc	r13, r9
				}
#endif
				fp->curr_clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    22f2:	6a 14       	cp	r6, r10
    22f4:	7b 04       	cpc	r7, r11
    22f6:	8c 04       	cpc	r8, r12
    22f8:	9d 04       	cpc	r9, r13
    22fa:	08 f4       	brcc	.+2      	; 0x22fe <__stack+0x1ff>
    22fc:	a3 cf       	rjmp	.-186    	; 0x2244 <__stack+0x145>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->curr_clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    22fe:	ec 81       	ldd	r30, Y+4	; 0x04
    2300:	fd 81       	ldd	r31, Y+5	; 0x05
    2302:	86 81       	ldd	r24, Z+6	; 0x06
    2304:	97 81       	ldd	r25, Z+7	; 0x07
    2306:	a0 85       	ldd	r26, Z+8	; 0x08
    2308:	b1 85       	ldd	r27, Z+9	; 0x09
    230a:	8a 0d       	add	r24, r10
    230c:	9b 1d       	adc	r25, r11
    230e:	ac 1d       	adc	r26, r12
    2310:	bd 1d       	adc	r27, r13
    2312:	86 83       	std	Z+6, r24	; 0x06
    2314:	97 83       	std	Z+7, r25	; 0x07
    2316:	a0 87       	std	Z+8, r26	; 0x08
    2318:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    231a:	d6 01       	movw	r26, r12
    231c:	c5 01       	movw	r24, r10
    231e:	91 70       	andi	r25, 0x01	; 1
    2320:	a0 70       	andi	r26, 0x00	; 0
    2322:	b0 70       	andi	r27, 0x00	; 0
    2324:	00 97       	sbiw	r24, 0x00	; 0
    2326:	a1 05       	cpc	r26, r1
    2328:	b1 05       	cpc	r27, r1
    232a:	09 f1       	breq	.+66     	; 0x236e <__stack+0x26f>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    232c:	80 81       	ld	r24, Z
    232e:	91 81       	ldd	r25, Z+1	; 0x01
    2330:	36 db       	rcall	.-2452   	; 0x199e <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    2332:	61 15       	cp	r22, r1
    2334:	71 05       	cpc	r23, r1
    2336:	81 05       	cpc	r24, r1
    2338:	91 05       	cpc	r25, r1
    233a:	59 f4       	brne	.+22     	; 0x2352 <__stack+0x253>
    233c:	ac 81       	ldd	r26, Y+4	; 0x04
    233e:	bd 81       	ldd	r27, Y+5	; 0x05
    2340:	14 96       	adiw	r26, 0x04	; 4
    2342:	8c 91       	ld	r24, X
    2344:	14 97       	sbiw	r26, 0x04	; 4
    2346:	80 68       	ori	r24, 0x80	; 128
    2348:	14 96       	adiw	r26, 0x04	; 4
    234a:	8c 93       	st	X, r24
    234c:	b2 e0       	ldi	r27, 0x02	; 2
    234e:	bb 83       	std	Y+3, r27	; 0x03
    2350:	42 c0       	rjmp	.+132    	; 0x23d6 <__stack+0x2d7>
					nsect += ofs / SS(fp->fs);
    2352:	a6 01       	movw	r20, r12
    2354:	95 01       	movw	r18, r10
    2356:	e9 e0       	ldi	r30, 0x09	; 9
    2358:	56 95       	lsr	r21
    235a:	47 95       	ror	r20
    235c:	37 95       	ror	r19
    235e:	27 95       	ror	r18
    2360:	ea 95       	dec	r30
    2362:	d1 f7       	brne	.-12     	; 0x2358 <__stack+0x259>
    2364:	26 0f       	add	r18, r22
    2366:	37 1f       	adc	r19, r23
    2368:	48 1f       	adc	r20, r24
    236a:	59 1f       	adc	r21, r25
    236c:	04 c0       	rjmp	.+8      	; 0x2376 <__stack+0x277>
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e0       	ldi	r20, 0x00	; 0
    2374:	50 e0       	ldi	r21, 0x00	; 0
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    2376:	ec 81       	ldd	r30, Y+4	; 0x04
    2378:	fd 81       	ldd	r31, Y+5	; 0x05
    237a:	86 81       	ldd	r24, Z+6	; 0x06
    237c:	97 81       	ldd	r25, Z+7	; 0x07
    237e:	a0 85       	ldd	r26, Z+8	; 0x08
    2380:	b1 85       	ldd	r27, Z+9	; 0x09
    2382:	91 70       	andi	r25, 0x01	; 1
    2384:	a0 70       	andi	r26, 0x00	; 0
    2386:	b0 70       	andi	r27, 0x00	; 0
    2388:	00 97       	sbiw	r24, 0x00	; 0
    238a:	a1 05       	cpc	r26, r1
    238c:	b1 05       	cpc	r27, r1
    238e:	69 f0       	breq	.+26     	; 0x23aa <__stack+0x2ab>
    2390:	86 89       	ldd	r24, Z+22	; 0x16
    2392:	97 89       	ldd	r25, Z+23	; 0x17
    2394:	a0 8d       	ldd	r26, Z+24	; 0x18
    2396:	b1 8d       	ldd	r27, Z+25	; 0x19
    2398:	28 17       	cp	r18, r24
    239a:	39 07       	cpc	r19, r25
    239c:	4a 07       	cpc	r20, r26
    239e:	5b 07       	cpc	r21, r27
    23a0:	21 f0       	breq	.+8      	; 0x23aa <__stack+0x2ab>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    23a2:	26 8b       	std	Z+22, r18	; 0x16
    23a4:	37 8b       	std	Z+23, r19	; 0x17
    23a6:	40 8f       	std	Z+24, r20	; 0x18
    23a8:	51 8f       	std	Z+25, r21	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    23aa:	ec 81       	ldd	r30, Y+4	; 0x04
    23ac:	fd 81       	ldd	r31, Y+5	; 0x05
    23ae:	26 81       	ldd	r18, Z+6	; 0x06
    23b0:	37 81       	ldd	r19, Z+7	; 0x07
    23b2:	40 85       	ldd	r20, Z+8	; 0x08
    23b4:	51 85       	ldd	r21, Z+9	; 0x09
    23b6:	82 85       	ldd	r24, Z+10	; 0x0a
    23b8:	93 85       	ldd	r25, Z+11	; 0x0b
    23ba:	a4 85       	ldd	r26, Z+12	; 0x0c
    23bc:	b5 85       	ldd	r27, Z+13	; 0x0d
    23be:	82 17       	cp	r24, r18
    23c0:	93 07       	cpc	r25, r19
    23c2:	a4 07       	cpc	r26, r20
    23c4:	b5 07       	cpc	r27, r21
    23c6:	38 f4       	brcc	.+14     	; 0x23d6 <__stack+0x2d7>
			fp->fsize = fp->fptr;
    23c8:	22 87       	std	Z+10, r18	; 0x0a
    23ca:	33 87       	std	Z+11, r19	; 0x0b
    23cc:	44 87       	std	Z+12, r20	; 0x0c
    23ce:	55 87       	std	Z+13, r21	; 0x0d
			fp->flag |= FA__WRITTEN;
    23d0:	84 81       	ldd	r24, Z+4	; 0x04
    23d2:	80 62       	ori	r24, 0x20	; 32
    23d4:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	1f 91       	pop	r17
    23e8:	0f 91       	pop	r16
    23ea:	ff 90       	pop	r15
    23ec:	ef 90       	pop	r14
    23ee:	df 90       	pop	r13
    23f0:	cf 90       	pop	r12
    23f2:	bf 90       	pop	r11
    23f4:	af 90       	pop	r10
    23f6:	9f 90       	pop	r9
    23f8:	8f 90       	pop	r8
    23fa:	7f 90       	pop	r7
    23fc:	6f 90       	pop	r6
    23fe:	5f 90       	pop	r5
    2400:	4f 90       	pop	r4
    2402:	3f 90       	pop	r3
    2404:	2f 90       	pop	r2
    2406:	08 95       	ret

00002408 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    2408:	ef 92       	push	r14
    240a:	ff 92       	push	r15
    240c:	0f 93       	push	r16
    240e:	1f 93       	push	r17
    2410:	cf 93       	push	r28
    2412:	df 93       	push	r29
    2414:	8c 01       	movw	r16, r24
    2416:	eb 01       	movw	r28, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    2418:	dc 01       	movw	r26, r24
    241a:	15 96       	adiw	r26, 0x05	; 5
    241c:	7c 93       	st	X, r23
    241e:	6e 93       	st	-X, r22
    2420:	14 97       	sbiw	r26, 0x04	; 4
	clst = dj->sclust;
    2422:	16 96       	adiw	r26, 0x06	; 6
    2424:	4d 91       	ld	r20, X+
    2426:	5d 91       	ld	r21, X+
    2428:	6d 91       	ld	r22, X+
    242a:	7c 91       	ld	r23, X
    242c:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    242e:	41 30       	cpi	r20, 0x01	; 1
    2430:	51 05       	cpc	r21, r1
    2432:	61 05       	cpc	r22, r1
    2434:	71 05       	cpc	r23, r1
    2436:	09 f4       	brne	.+2      	; 0x243a <dir_sdi+0x32>
    2438:	9e c0       	rjmp	.+316    	; 0x2576 <dir_sdi+0x16e>
    243a:	ed 91       	ld	r30, X+
    243c:	fc 91       	ld	r31, X
    243e:	86 89       	ldd	r24, Z+22	; 0x16
    2440:	97 89       	ldd	r25, Z+23	; 0x17
    2442:	a0 8d       	ldd	r26, Z+24	; 0x18
    2444:	b1 8d       	ldd	r27, Z+25	; 0x19
    2446:	48 17       	cp	r20, r24
    2448:	59 07       	cpc	r21, r25
    244a:	6a 07       	cpc	r22, r26
    244c:	7b 07       	cpc	r23, r27
    244e:	08 f0       	brcs	.+2      	; 0x2452 <dir_sdi+0x4a>
    2450:	92 c0       	rjmp	.+292    	; 0x2576 <dir_sdi+0x16e>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    2452:	41 15       	cp	r20, r1
    2454:	51 05       	cpc	r21, r1
    2456:	61 05       	cpc	r22, r1
    2458:	71 05       	cpc	r23, r1
    245a:	81 f5       	brne	.+96     	; 0x24bc <dir_sdi+0xb4>
    245c:	80 81       	ld	r24, Z
    245e:	83 30       	cpi	r24, 0x03	; 3
    2460:	49 f4       	brne	.+18     	; 0x2474 <dir_sdi+0x6c>
		clst = dj->fs->dirbase;
    2462:	42 a1       	ldd	r20, Z+34	; 0x22
    2464:	53 a1       	ldd	r21, Z+35	; 0x23
    2466:	64 a1       	ldd	r22, Z+36	; 0x24
    2468:	75 a1       	ldd	r23, Z+37	; 0x25

	if (clst == 0) {	/* Static table */
    246a:	41 15       	cp	r20, r1
    246c:	51 05       	cpc	r21, r1
    246e:	61 05       	cpc	r22, r1
    2470:	71 05       	cpc	r23, r1
    2472:	21 f5       	brne	.+72     	; 0x24bc <dir_sdi+0xb4>
		dj->clust = clst;
    2474:	f8 01       	movw	r30, r16
    2476:	12 86       	std	Z+10, r1	; 0x0a
    2478:	13 86       	std	Z+11, r1	; 0x0b
    247a:	14 86       	std	Z+12, r1	; 0x0c
    247c:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    247e:	01 90       	ld	r0, Z+
    2480:	f0 81       	ld	r31, Z
    2482:	e0 2d       	mov	r30, r0
    2484:	80 85       	ldd	r24, Z+8	; 0x08
    2486:	91 85       	ldd	r25, Z+9	; 0x09
    2488:	c8 17       	cp	r28, r24
    248a:	d9 07       	cpc	r29, r25
    248c:	08 f0       	brcs	.+2      	; 0x2490 <dir_sdi+0x88>
    248e:	73 c0       	rjmp	.+230    	; 0x2576 <dir_sdi+0x16e>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    2490:	ce 01       	movw	r24, r28
    2492:	24 e0       	ldi	r18, 0x04	; 4
    2494:	96 95       	lsr	r25
    2496:	87 95       	ror	r24
    2498:	2a 95       	dec	r18
    249a:	e1 f7       	brne	.-8      	; 0x2494 <dir_sdi+0x8c>
    249c:	a0 e0       	ldi	r26, 0x00	; 0
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	22 a1       	ldd	r18, Z+34	; 0x22
    24a2:	33 a1       	ldd	r19, Z+35	; 0x23
    24a4:	44 a1       	ldd	r20, Z+36	; 0x24
    24a6:	55 a1       	ldd	r21, Z+37	; 0x25
    24a8:	82 0f       	add	r24, r18
    24aa:	93 1f       	adc	r25, r19
    24ac:	a4 1f       	adc	r26, r20
    24ae:	b5 1f       	adc	r27, r21
    24b0:	f8 01       	movw	r30, r16
    24b2:	86 87       	std	Z+14, r24	; 0x0e
    24b4:	97 87       	std	Z+15, r25	; 0x0f
    24b6:	a0 8b       	std	Z+16, r26	; 0x10
    24b8:	b1 8b       	std	Z+17, r27	; 0x11
    24ba:	49 c0       	rjmp	.+146    	; 0x254e <dir_sdi+0x146>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    24bc:	82 81       	ldd	r24, Z+2	; 0x02
    24be:	e8 2e       	mov	r14, r24
    24c0:	ff 24       	eor	r15, r15
    24c2:	84 e0       	ldi	r24, 0x04	; 4
    24c4:	ee 0c       	add	r14, r14
    24c6:	ff 1c       	adc	r15, r15
    24c8:	8a 95       	dec	r24
    24ca:	e1 f7       	brne	.-8      	; 0x24c4 <dir_sdi+0xbc>
    24cc:	21 c0       	rjmp	.+66     	; 0x2510 <dir_sdi+0x108>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    24ce:	37 dc       	rcall	.-1938   	; 0x1d3e <get_fat>
    24d0:	ab 01       	movw	r20, r22
    24d2:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    24d4:	4f 3f       	cpi	r20, 0xFF	; 255
    24d6:	ff ef       	ldi	r31, 0xFF	; 255
    24d8:	5f 07       	cpc	r21, r31
    24da:	ff ef       	ldi	r31, 0xFF	; 255
    24dc:	6f 07       	cpc	r22, r31
    24de:	ff ef       	ldi	r31, 0xFF	; 255
    24e0:	7f 07       	cpc	r23, r31
    24e2:	11 f4       	brne	.+4      	; 0x24e8 <dir_sdi+0xe0>
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	48 c0       	rjmp	.+144    	; 0x2578 <dir_sdi+0x170>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    24e8:	42 30       	cpi	r20, 0x02	; 2
    24ea:	51 05       	cpc	r21, r1
    24ec:	61 05       	cpc	r22, r1
    24ee:	71 05       	cpc	r23, r1
    24f0:	08 f4       	brcc	.+2      	; 0x24f4 <dir_sdi+0xec>
    24f2:	41 c0       	rjmp	.+130    	; 0x2576 <dir_sdi+0x16e>
    24f4:	d8 01       	movw	r26, r16
    24f6:	ed 91       	ld	r30, X+
    24f8:	fc 91       	ld	r31, X
    24fa:	86 89       	ldd	r24, Z+22	; 0x16
    24fc:	97 89       	ldd	r25, Z+23	; 0x17
    24fe:	a0 8d       	ldd	r26, Z+24	; 0x18
    2500:	b1 8d       	ldd	r27, Z+25	; 0x19
    2502:	48 17       	cp	r20, r24
    2504:	59 07       	cpc	r21, r25
    2506:	6a 07       	cpc	r22, r26
    2508:	7b 07       	cpc	r23, r27
    250a:	a8 f5       	brcc	.+106    	; 0x2576 <dir_sdi+0x16e>
				return FR_INT_ERR;
			idx -= ic;
    250c:	ce 19       	sub	r28, r14
    250e:	df 09       	sbc	r29, r15
    2510:	f8 01       	movw	r30, r16
    2512:	80 81       	ld	r24, Z
    2514:	91 81       	ldd	r25, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    2516:	ce 15       	cp	r28, r14
    2518:	df 05       	cpc	r29, r15
    251a:	c8 f6       	brcc	.-78     	; 0x24ce <dir_sdi+0xc6>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    251c:	d8 01       	movw	r26, r16
    251e:	1a 96       	adiw	r26, 0x0a	; 10
    2520:	4d 93       	st	X+, r20
    2522:	5d 93       	st	X+, r21
    2524:	6d 93       	st	X+, r22
    2526:	7c 93       	st	X, r23
    2528:	1d 97       	sbiw	r26, 0x0d	; 13
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    252a:	39 da       	rcall	.-2958   	; 0x199e <clust2sect>
    252c:	9e 01       	movw	r18, r28
    252e:	b4 e0       	ldi	r27, 0x04	; 4
    2530:	36 95       	lsr	r19
    2532:	27 95       	ror	r18
    2534:	ba 95       	dec	r27
    2536:	e1 f7       	brne	.-8      	; 0x2530 <dir_sdi+0x128>
    2538:	40 e0       	ldi	r20, 0x00	; 0
    253a:	50 e0       	ldi	r21, 0x00	; 0
    253c:	26 0f       	add	r18, r22
    253e:	37 1f       	adc	r19, r23
    2540:	48 1f       	adc	r20, r24
    2542:	59 1f       	adc	r21, r25
    2544:	f8 01       	movw	r30, r16
    2546:	26 87       	std	Z+14, r18	; 0x0e
    2548:	37 87       	std	Z+15, r19	; 0x0f
    254a:	40 8b       	std	Z+16, r20	; 0x10
    254c:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    254e:	cf 70       	andi	r28, 0x0F	; 15
    2550:	d0 70       	andi	r29, 0x00	; 0
    2552:	a5 e0       	ldi	r26, 0x05	; 5
    2554:	cc 0f       	add	r28, r28
    2556:	dd 1f       	adc	r29, r29
    2558:	aa 95       	dec	r26
    255a:	e1 f7       	brne	.-8      	; 0x2554 <dir_sdi+0x14c>
    255c:	ae 96       	adiw	r28, 0x2e	; 46
    255e:	d8 01       	movw	r26, r16
    2560:	8d 91       	ld	r24, X+
    2562:	9c 91       	ld	r25, X
    2564:	11 97       	sbiw	r26, 0x01	; 1
    2566:	8c 0f       	add	r24, r28
    2568:	9d 1f       	adc	r25, r29
    256a:	53 96       	adiw	r26, 0x13	; 19
    256c:	9c 93       	st	X, r25
    256e:	8e 93       	st	-X, r24
    2570:	52 97       	sbiw	r26, 0x12	; 18
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	01 c0       	rjmp	.+2      	; 0x2578 <dir_sdi+0x170>

	return FR_OK;	/* Seek succeeded */
    2576:	82 e0       	ldi	r24, 0x02	; 2
}
    2578:	df 91       	pop	r29
    257a:	cf 91       	pop	r28
    257c:	1f 91       	pop	r17
    257e:	0f 91       	pop	r16
    2580:	ff 90       	pop	r15
    2582:	ef 90       	pop	r14
    2584:	08 95       	ret

00002586 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    2586:	2f 92       	push	r2
    2588:	3f 92       	push	r3
    258a:	4f 92       	push	r4
    258c:	5f 92       	push	r5
    258e:	6f 92       	push	r6
    2590:	7f 92       	push	r7
    2592:	8f 92       	push	r8
    2594:	9f 92       	push	r9
    2596:	af 92       	push	r10
    2598:	bf 92       	push	r11
    259a:	cf 92       	push	r12
    259c:	df 92       	push	r13
    259e:	ef 92       	push	r14
    25a0:	ff 92       	push	r15
    25a2:	0f 93       	push	r16
    25a4:	1f 93       	push	r17
    25a6:	cf 93       	push	r28
    25a8:	df 93       	push	r29
    25aa:	ec 01       	movw	r28, r24
    25ac:	16 2f       	mov	r17, r22
    25ae:	07 2f       	mov	r16, r23
    25b0:	3a 01       	movw	r6, r20
    25b2:	19 01       	movw	r2, r18
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    25b4:	f9 01       	movw	r30, r18
    25b6:	11 82       	std	Z+1, r1	; 0x01
    25b8:	10 82       	st	Z, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    25ba:	6a 81       	ldd	r22, Y+2	; 0x02
    25bc:	7b 81       	ldd	r23, Y+3	; 0x03
    25be:	88 81       	ld	r24, Y
    25c0:	99 81       	ldd	r25, Y+1	; 0x01
    25c2:	3f da       	rcall	.-2946   	; 0x1a42 <validate>
    25c4:	88 2e       	mov	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    25c6:	88 23       	and	r24, r24
    25c8:	09 f0       	breq	.+2      	; 0x25cc <f_write+0x46>
    25ca:	6d c1       	rjmp	.+730    	; 0x28a6 <f_write+0x320>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    25cc:	8c 81       	ldd	r24, Y+4	; 0x04
    25ce:	87 fd       	sbrc	r24, 7
    25d0:	67 c0       	rjmp	.+206    	; 0x26a0 <f_write+0x11a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    25d2:	81 fd       	sbrc	r24, 1
    25d4:	03 c0       	rjmp	.+6      	; 0x25dc <f_write+0x56>
    25d6:	07 e0       	ldi	r16, 0x07	; 7
    25d8:	80 2e       	mov	r8, r16
    25da:	65 c1       	rjmp	.+714    	; 0x28a6 <f_write+0x320>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    25dc:	2a 85       	ldd	r18, Y+10	; 0x0a
    25de:	3b 85       	ldd	r19, Y+11	; 0x0b
    25e0:	4c 85       	ldd	r20, Y+12	; 0x0c
    25e2:	5d 85       	ldd	r21, Y+13	; 0x0d
    25e4:	c3 01       	movw	r24, r6
    25e6:	a0 e0       	ldi	r26, 0x00	; 0
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	82 0f       	add	r24, r18
    25ec:	93 1f       	adc	r25, r19
    25ee:	a4 1f       	adc	r26, r20
    25f0:	b5 1f       	adc	r27, r21
    25f2:	82 17       	cp	r24, r18
    25f4:	93 07       	cpc	r25, r19
    25f6:	a4 07       	cpc	r26, r20
    25f8:	b5 07       	cpc	r27, r21
    25fa:	10 f4       	brcc	.+4      	; 0x2600 <f_write+0x7a>
    25fc:	66 24       	eor	r6, r6
    25fe:	77 24       	eor	r7, r7
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    2600:	81 2f       	mov	r24, r17
    2602:	90 2f       	mov	r25, r16
    2604:	9c 01       	movw	r18, r24
    2606:	29 01       	movw	r4, r18
    2608:	36 c1       	rjmp	.+620    	; 0x2876 <f_write+0x2f0>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    260a:	2e 81       	ldd	r18, Y+6	; 0x06
    260c:	3f 81       	ldd	r19, Y+7	; 0x07
    260e:	48 85       	ldd	r20, Y+8	; 0x08
    2610:	59 85       	ldd	r21, Y+9	; 0x09
    2612:	da 01       	movw	r26, r20
    2614:	c9 01       	movw	r24, r18
    2616:	91 70       	andi	r25, 0x01	; 1
    2618:	a0 70       	andi	r26, 0x00	; 0
    261a:	b0 70       	andi	r27, 0x00	; 0
    261c:	00 97       	sbiw	r24, 0x00	; 0
    261e:	a1 05       	cpc	r26, r1
    2620:	b1 05       	cpc	r27, r1
    2622:	09 f0       	breq	.+2      	; 0x2626 <f_write+0xa0>
    2624:	e0 c0       	rjmp	.+448    	; 0x27e6 <f_write+0x260>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    2626:	e8 81       	ld	r30, Y
    2628:	f9 81       	ldd	r31, Y+1	; 0x01
    262a:	da 01       	movw	r26, r20
    262c:	c9 01       	movw	r24, r18
    262e:	19 e0       	ldi	r17, 0x09	; 9
    2630:	b6 95       	lsr	r27
    2632:	a7 95       	ror	r26
    2634:	97 95       	ror	r25
    2636:	87 95       	ror	r24
    2638:	1a 95       	dec	r17
    263a:	d1 f7       	brne	.-12     	; 0x2630 <f_write+0xaa>
    263c:	92 80       	ldd	r9, Z+2	; 0x02
    263e:	9a 94       	dec	r9
    2640:	98 22       	and	r9, r24
			if (!csect) {							/* On the cluster boundary? */
    2642:	09 f0       	breq	.+2      	; 0x2646 <f_write+0xc0>
    2644:	3d c0       	rjmp	.+122    	; 0x26c0 <f_write+0x13a>
				if (fp->fptr == 0) {				/* On the top of the file? */
    2646:	21 15       	cp	r18, r1
    2648:	31 05       	cpc	r19, r1
    264a:	41 05       	cpc	r20, r1
    264c:	51 05       	cpc	r21, r1
    264e:	a1 f4       	brne	.+40     	; 0x2678 <f_write+0xf2>
					clst = fp->org_clust;			/* Follow from the origin */
    2650:	6e 85       	ldd	r22, Y+14	; 0x0e
    2652:	7f 85       	ldd	r23, Y+15	; 0x0f
    2654:	88 89       	ldd	r24, Y+16	; 0x10
    2656:	99 89       	ldd	r25, Y+17	; 0x11
					if (clst == 0)					/* When there is no cluster chain, */
    2658:	61 15       	cp	r22, r1
    265a:	71 05       	cpc	r23, r1
    265c:	81 05       	cpc	r24, r1
    265e:	91 05       	cpc	r25, r1
    2660:	b9 f4       	brne	.+46     	; 0x2690 <f_write+0x10a>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    2662:	cf 01       	movw	r24, r30
    2664:	40 e0       	ldi	r20, 0x00	; 0
    2666:	50 e0       	ldi	r21, 0x00	; 0
    2668:	60 e0       	ldi	r22, 0x00	; 0
    266a:	70 e0       	ldi	r23, 0x00	; 0
    266c:	37 dc       	rcall	.-1938   	; 0x1edc <create_chain>
    266e:	6e 87       	std	Y+14, r22	; 0x0e
    2670:	7f 87       	std	Y+15, r23	; 0x0f
    2672:	88 8b       	std	Y+16, r24	; 0x10
    2674:	99 8b       	std	Y+17, r25	; 0x11
    2676:	06 c0       	rjmp	.+12     	; 0x2684 <f_write+0xfe>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or stretch cluster chain */
    2678:	4a 89       	ldd	r20, Y+18	; 0x12
    267a:	5b 89       	ldd	r21, Y+19	; 0x13
    267c:	6c 89       	ldd	r22, Y+20	; 0x14
    267e:	7d 89       	ldd	r23, Y+21	; 0x15
    2680:	cf 01       	movw	r24, r30
    2682:	2c dc       	rcall	.-1960   	; 0x1edc <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    2684:	61 15       	cp	r22, r1
    2686:	71 05       	cpc	r23, r1
    2688:	81 05       	cpc	r24, r1
    268a:	91 05       	cpc	r25, r1
    268c:	09 f4       	brne	.+2      	; 0x2690 <f_write+0x10a>
    268e:	f7 c0       	rjmp	.+494    	; 0x287e <f_write+0x2f8>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2690:	61 30       	cpi	r22, 0x01	; 1
    2692:	71 05       	cpc	r23, r1
    2694:	81 05       	cpc	r24, r1
    2696:	91 05       	cpc	r25, r1
    2698:	31 f4       	brne	.+12     	; 0x26a6 <f_write+0x120>
    269a:	8c 81       	ldd	r24, Y+4	; 0x04
    269c:	80 68       	ori	r24, 0x80	; 128
    269e:	8c 83       	std	Y+4, r24	; 0x04
    26a0:	e2 e0       	ldi	r30, 0x02	; 2
    26a2:	8e 2e       	mov	r8, r30
    26a4:	00 c1       	rjmp	.+512    	; 0x28a6 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    26a6:	6f 3f       	cpi	r22, 0xFF	; 255
    26a8:	ff ef       	ldi	r31, 0xFF	; 255
    26aa:	7f 07       	cpc	r23, r31
    26ac:	ff ef       	ldi	r31, 0xFF	; 255
    26ae:	8f 07       	cpc	r24, r31
    26b0:	ff ef       	ldi	r31, 0xFF	; 255
    26b2:	9f 07       	cpc	r25, r31
    26b4:	09 f4       	brne	.+2      	; 0x26b8 <f_write+0x132>
    26b6:	a4 c0       	rjmp	.+328    	; 0x2800 <f_write+0x27a>
				fp->curr_clust = clst;				/* Update current cluster */
    26b8:	6a 8b       	std	Y+18, r22	; 0x12
    26ba:	7b 8b       	std	Y+19, r23	; 0x13
    26bc:	8c 8b       	std	Y+20, r24	; 0x14
    26be:	9d 8b       	std	Y+21, r25	; 0x15
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
    26c0:	e8 81       	ld	r30, Y
    26c2:	f9 81       	ldd	r31, Y+1	; 0x01
    26c4:	22 a5       	ldd	r18, Z+42	; 0x2a
    26c6:	33 a5       	ldd	r19, Z+43	; 0x2b
    26c8:	44 a5       	ldd	r20, Z+44	; 0x2c
    26ca:	55 a5       	ldd	r21, Z+45	; 0x2d
    26cc:	8e 89       	ldd	r24, Y+22	; 0x16
    26ce:	9f 89       	ldd	r25, Y+23	; 0x17
    26d0:	a8 8d       	ldd	r26, Y+24	; 0x18
    26d2:	b9 8d       	ldd	r27, Y+25	; 0x19
    26d4:	28 17       	cp	r18, r24
    26d6:	39 07       	cpc	r19, r25
    26d8:	4a 07       	cpc	r20, r26
    26da:	5b 07       	cpc	r21, r27
    26dc:	49 f4       	brne	.+18     	; 0x26f0 <f_write+0x16a>
    26de:	cf 01       	movw	r24, r30
    26e0:	40 e0       	ldi	r20, 0x00	; 0
    26e2:	50 e0       	ldi	r21, 0x00	; 0
    26e4:	60 e0       	ldi	r22, 0x00	; 0
    26e6:	70 e0       	ldi	r23, 0x00	; 0
    26e8:	c1 d9       	rcall	.-3198   	; 0x1a6c <move_window>
    26ea:	88 23       	and	r24, r24
    26ec:	09 f0       	breq	.+2      	; 0x26f0 <f_write+0x16a>
    26ee:	88 c0       	rjmp	.+272    	; 0x2800 <f_write+0x27a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    26f0:	08 81       	ld	r16, Y
    26f2:	19 81       	ldd	r17, Y+1	; 0x01
    26f4:	4a 89       	ldd	r20, Y+18	; 0x12
    26f6:	5b 89       	ldd	r21, Y+19	; 0x13
    26f8:	6c 89       	ldd	r22, Y+20	; 0x14
    26fa:	7d 89       	ldd	r23, Y+21	; 0x15
    26fc:	c8 01       	movw	r24, r16
    26fe:	4f d9       	rcall	.-3426   	; 0x199e <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    2700:	61 15       	cp	r22, r1
    2702:	71 05       	cpc	r23, r1
    2704:	81 05       	cpc	r24, r1
    2706:	91 05       	cpc	r25, r1
    2708:	41 f2       	breq	.-112    	; 0x269a <f_write+0x114>
			sect += csect;
    270a:	6b 01       	movw	r12, r22
    270c:	7c 01       	movw	r14, r24
    270e:	c9 0c       	add	r12, r9
    2710:	d1 1c       	adc	r13, r1
    2712:	e1 1c       	adc	r14, r1
    2714:	f1 1c       	adc	r15, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    2716:	53 01       	movw	r10, r6
    2718:	ab 2c       	mov	r10, r11
    271a:	bb 24       	eor	r11, r11
    271c:	a6 94       	lsr	r10
			if (cc) {								/* Write maximum contiguous sectors directly */
    271e:	a1 14       	cp	r10, r1
    2720:	b1 04       	cpc	r11, r1
    2722:	09 f4       	brne	.+2      	; 0x2726 <f_write+0x1a0>
    2724:	41 c0       	rjmp	.+130    	; 0x27a8 <f_write+0x222>
				if (csect + cc > fp->fs->csize)		/* Clip at cluster boundary */
    2726:	f8 01       	movw	r30, r16
    2728:	22 81       	ldd	r18, Z+2	; 0x02
    272a:	49 2d       	mov	r20, r9
    272c:	50 e0       	ldi	r21, 0x00	; 0
    272e:	c5 01       	movw	r24, r10
    2730:	84 0f       	add	r24, r20
    2732:	95 1f       	adc	r25, r21
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	28 17       	cp	r18, r24
    2738:	39 07       	cpc	r19, r25
    273a:	18 f4       	brcc	.+6      	; 0x2742 <f_write+0x1bc>
					cc = fp->fs->csize - csect;
    273c:	59 01       	movw	r10, r18
    273e:	a4 1a       	sub	r10, r20
    2740:	b5 0a       	sbc	r11, r21
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    2742:	f8 01       	movw	r30, r16
    2744:	81 81       	ldd	r24, Z+1	; 0x01
    2746:	b2 01       	movw	r22, r4
    2748:	a7 01       	movw	r20, r14
    274a:	96 01       	movw	r18, r12
    274c:	0a 2d       	mov	r16, r10
    274e:	d2 d8       	rcall	.-3676   	; 0x18f4 <disk_write>
    2750:	88 23       	and	r24, r24
    2752:	09 f0       	breq	.+2      	; 0x2756 <f_write+0x1d0>
    2754:	55 c0       	rjmp	.+170    	; 0x2800 <f_write+0x27a>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
    2756:	e8 81       	ld	r30, Y
    2758:	f9 81       	ldd	r31, Y+1	; 0x01
    275a:	22 a5       	ldd	r18, Z+42	; 0x2a
    275c:	33 a5       	ldd	r19, Z+43	; 0x2b
    275e:	44 a5       	ldd	r20, Z+44	; 0x2c
    2760:	55 a5       	ldd	r21, Z+45	; 0x2d
    2762:	2c 19       	sub	r18, r12
    2764:	3d 09       	sbc	r19, r13
    2766:	4e 09       	sbc	r20, r14
    2768:	5f 09       	sbc	r21, r15
    276a:	c5 01       	movw	r24, r10
    276c:	a0 e0       	ldi	r26, 0x00	; 0
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	28 17       	cp	r18, r24
    2772:	39 07       	cpc	r19, r25
    2774:	4a 07       	cpc	r20, r26
    2776:	5b 07       	cpc	r21, r27
    2778:	90 f4       	brcc	.+36     	; 0x279e <f_write+0x218>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    277a:	69 e0       	ldi	r22, 0x09	; 9
    277c:	22 0f       	add	r18, r18
    277e:	33 1f       	adc	r19, r19
    2780:	44 1f       	adc	r20, r20
    2782:	55 1f       	adc	r21, r21
    2784:	6a 95       	dec	r22
    2786:	d1 f7       	brne	.-12     	; 0x277c <f_write+0x1f6>
    2788:	b2 01       	movw	r22, r4
    278a:	62 0f       	add	r22, r18
    278c:	73 1f       	adc	r23, r19
    278e:	cf 01       	movw	r24, r30
    2790:	8e 96       	adiw	r24, 0x2e	; 46
    2792:	40 e0       	ldi	r20, 0x00	; 0
    2794:	52 e0       	ldi	r21, 0x02	; 2
    2796:	c5 d8       	rcall	.-3702   	; 0x1922 <mem_cpy>
					fp->fs->wflag = 0;
    2798:	e8 81       	ld	r30, Y
    279a:	f9 81       	ldd	r31, Y+1	; 0x01
    279c:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    279e:	85 01       	movw	r16, r10
    27a0:	10 2f       	mov	r17, r16
    27a2:	00 27       	eor	r16, r16
    27a4:	11 0f       	add	r17, r17
    27a6:	4d c0       	rjmp	.+154    	; 0x2842 <f_write+0x2bc>
				continue;
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
    27a8:	2e 81       	ldd	r18, Y+6	; 0x06
    27aa:	3f 81       	ldd	r19, Y+7	; 0x07
    27ac:	48 85       	ldd	r20, Y+8	; 0x08
    27ae:	59 85       	ldd	r21, Y+9	; 0x09
    27b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    27b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    27b4:	ac 85       	ldd	r26, Y+12	; 0x0c
    27b6:	bd 85       	ldd	r27, Y+13	; 0x0d
    27b8:	28 17       	cp	r18, r24
    27ba:	39 07       	cpc	r19, r25
    27bc:	4a 07       	cpc	r20, r26
    27be:	5b 07       	cpc	r21, r27
    27c0:	70 f0       	brcs	.+28     	; 0x27de <f_write+0x258>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    27c2:	c8 01       	movw	r24, r16
    27c4:	40 e0       	ldi	r20, 0x00	; 0
    27c6:	50 e0       	ldi	r21, 0x00	; 0
    27c8:	60 e0       	ldi	r22, 0x00	; 0
    27ca:	70 e0       	ldi	r23, 0x00	; 0
    27cc:	4f d9       	rcall	.-3426   	; 0x1a6c <move_window>
    27ce:	88 23       	and	r24, r24
    27d0:	b9 f4       	brne	.+46     	; 0x2800 <f_write+0x27a>
				fp->fs->winsect = sect;
    27d2:	e8 81       	ld	r30, Y
    27d4:	f9 81       	ldd	r31, Y+1	; 0x01
    27d6:	c2 a6       	std	Z+42, r12	; 0x2a
    27d8:	d3 a6       	std	Z+43, r13	; 0x2b
    27da:	e4 a6       	std	Z+44, r14	; 0x2c
    27dc:	f5 a6       	std	Z+45, r15	; 0x2d
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    27de:	ce 8a       	std	Y+22, r12	; 0x16
    27e0:	df 8a       	std	Y+23, r13	; 0x17
    27e2:	e8 8e       	std	Y+24, r14	; 0x18
    27e4:	f9 8e       	std	Y+25, r15	; 0x19
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    27e6:	ee 80       	ldd	r14, Y+6	; 0x06
    27e8:	ff 80       	ldd	r15, Y+7	; 0x07
    27ea:	08 85       	ldd	r16, Y+8	; 0x08
    27ec:	19 85       	ldd	r17, Y+9	; 0x09
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    27ee:	4e 89       	ldd	r20, Y+22	; 0x16
    27f0:	5f 89       	ldd	r21, Y+23	; 0x17
    27f2:	68 8d       	ldd	r22, Y+24	; 0x18
    27f4:	79 8d       	ldd	r23, Y+25	; 0x19
    27f6:	88 81       	ld	r24, Y
    27f8:	99 81       	ldd	r25, Y+1	; 0x01
    27fa:	38 d9       	rcall	.-3472   	; 0x1a6c <move_window>
    27fc:	88 23       	and	r24, r24
    27fe:	31 f0       	breq	.+12     	; 0x280c <f_write+0x286>
			ABORT(fp->fs, FR_DISK_ERR);
    2800:	8c 81       	ldd	r24, Y+4	; 0x04
    2802:	80 68       	ori	r24, 0x80	; 128
    2804:	8c 83       	std	Y+4, r24	; 0x04
    2806:	88 24       	eor	r8, r8
    2808:	83 94       	inc	r8
    280a:	4d c0       	rjmp	.+154    	; 0x28a6 <f_write+0x320>
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    280c:	c7 01       	movw	r24, r14
    280e:	91 70       	andi	r25, 0x01	; 1
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	32 e0       	ldi	r19, 0x02	; 2
    2814:	28 1b       	sub	r18, r24
    2816:	39 0b       	sbc	r19, r25
    2818:	83 01       	movw	r16, r6
    281a:	26 15       	cp	r18, r6
    281c:	37 05       	cpc	r19, r7
    281e:	08 f4       	brcc	.+2      	; 0x2822 <f_write+0x29c>
    2820:	89 01       	movw	r16, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    2822:	2e 81       	ldd	r18, Y+6	; 0x06
    2824:	3f 81       	ldd	r19, Y+7	; 0x07
    2826:	31 70       	andi	r19, 0x01	; 1
    2828:	22 5d       	subi	r18, 0xD2	; 210
    282a:	3f 4f       	sbci	r19, 0xFF	; 255
    282c:	88 81       	ld	r24, Y
    282e:	99 81       	ldd	r25, Y+1	; 0x01
    2830:	82 0f       	add	r24, r18
    2832:	93 1f       	adc	r25, r19
    2834:	b2 01       	movw	r22, r4
    2836:	a8 01       	movw	r20, r16
    2838:	74 d8       	rcall	.-3864   	; 0x1922 <mem_cpy>
		fp->fs->wflag = 1;
    283a:	e8 81       	ld	r30, Y
    283c:	f9 81       	ldd	r31, Y+1	; 0x01
    283e:	31 e0       	ldi	r19, 0x01	; 1
    2840:	34 83       	std	Z+4, r19	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    2842:	40 0e       	add	r4, r16
    2844:	51 1e       	adc	r5, r17
    2846:	c8 01       	movw	r24, r16
    2848:	a0 e0       	ldi	r26, 0x00	; 0
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	2e 81       	ldd	r18, Y+6	; 0x06
    284e:	3f 81       	ldd	r19, Y+7	; 0x07
    2850:	48 85       	ldd	r20, Y+8	; 0x08
    2852:	59 85       	ldd	r21, Y+9	; 0x09
    2854:	28 0f       	add	r18, r24
    2856:	39 1f       	adc	r19, r25
    2858:	4a 1f       	adc	r20, r26
    285a:	5b 1f       	adc	r21, r27
    285c:	2e 83       	std	Y+6, r18	; 0x06
    285e:	3f 83       	std	Y+7, r19	; 0x07
    2860:	48 87       	std	Y+8, r20	; 0x08
    2862:	59 87       	std	Y+9, r21	; 0x09
    2864:	f1 01       	movw	r30, r2
    2866:	80 81       	ld	r24, Z
    2868:	91 81       	ldd	r25, Z+1	; 0x01
    286a:	80 0f       	add	r24, r16
    286c:	91 1f       	adc	r25, r17
    286e:	91 83       	std	Z+1, r25	; 0x01
    2870:	80 83       	st	Z, r24
    2872:	60 1a       	sub	r6, r16
    2874:	71 0a       	sbc	r7, r17
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    2876:	61 14       	cp	r6, r1
    2878:	71 04       	cpc	r7, r1
    287a:	09 f0       	breq	.+2      	; 0x287e <f_write+0x2f8>
    287c:	c6 ce       	rjmp	.-628    	; 0x260a <f_write+0x84>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    287e:	2e 81       	ldd	r18, Y+6	; 0x06
    2880:	3f 81       	ldd	r19, Y+7	; 0x07
    2882:	48 85       	ldd	r20, Y+8	; 0x08
    2884:	59 85       	ldd	r21, Y+9	; 0x09
    2886:	8a 85       	ldd	r24, Y+10	; 0x0a
    2888:	9b 85       	ldd	r25, Y+11	; 0x0b
    288a:	ac 85       	ldd	r26, Y+12	; 0x0c
    288c:	bd 85       	ldd	r27, Y+13	; 0x0d
    288e:	82 17       	cp	r24, r18
    2890:	93 07       	cpc	r25, r19
    2892:	a4 07       	cpc	r26, r20
    2894:	b5 07       	cpc	r27, r21
    2896:	20 f4       	brcc	.+8      	; 0x28a0 <f_write+0x31a>
    2898:	2a 87       	std	Y+10, r18	; 0x0a
    289a:	3b 87       	std	Y+11, r19	; 0x0b
    289c:	4c 87       	std	Y+12, r20	; 0x0c
    289e:	5d 87       	std	Y+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    28a0:	8c 81       	ldd	r24, Y+4	; 0x04
    28a2:	80 62       	ori	r24, 0x20	; 32
    28a4:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, FR_OK);
}
    28a6:	88 2d       	mov	r24, r8
    28a8:	df 91       	pop	r29
    28aa:	cf 91       	pop	r28
    28ac:	1f 91       	pop	r17
    28ae:	0f 91       	pop	r16
    28b0:	ff 90       	pop	r15
    28b2:	ef 90       	pop	r14
    28b4:	df 90       	pop	r13
    28b6:	cf 90       	pop	r12
    28b8:	bf 90       	pop	r11
    28ba:	af 90       	pop	r10
    28bc:	9f 90       	pop	r9
    28be:	8f 90       	pop	r8
    28c0:	7f 90       	pop	r7
    28c2:	6f 90       	pop	r6
    28c4:	5f 90       	pop	r5
    28c6:	4f 90       	pop	r4
    28c8:	3f 90       	pop	r3
    28ca:	2f 90       	pop	r2
    28cc:	08 95       	ret

000028ce <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    28ce:	8f 92       	push	r8
    28d0:	9f 92       	push	r9
    28d2:	af 92       	push	r10
    28d4:	bf 92       	push	r11
    28d6:	cf 92       	push	r12
    28d8:	df 92       	push	r13
    28da:	ef 92       	push	r14
    28dc:	ff 92       	push	r15
    28de:	0f 93       	push	r16
    28e0:	1f 93       	push	r17
    28e2:	cf 93       	push	r28
    28e4:	df 93       	push	r29
    28e6:	ec 01       	movw	r28, r24
    28e8:	8b 01       	movw	r16, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    28ea:	ac 80       	ldd	r10, Y+4	; 0x04
    28ec:	bd 80       	ldd	r11, Y+5	; 0x05
    28ee:	08 94       	sec
    28f0:	a1 1c       	adc	r10, r1
    28f2:	b1 1c       	adc	r11, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    28f4:	a1 14       	cp	r10, r1
    28f6:	b1 04       	cpc	r11, r1
    28f8:	09 f4       	brne	.+2      	; 0x28fc <dir_next+0x2e>
    28fa:	e8 c0       	rjmp	.+464    	; 0x2acc <dir_next+0x1fe>
    28fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    28fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    2900:	a8 89       	ldd	r26, Y+16	; 0x10
    2902:	b9 89       	ldd	r27, Y+17	; 0x11
    2904:	00 97       	sbiw	r24, 0x00	; 0
    2906:	a1 05       	cpc	r26, r1
    2908:	b1 05       	cpc	r27, r1
    290a:	09 f4       	brne	.+2      	; 0x290e <dir_next+0x40>
    290c:	df c0       	rjmp	.+446    	; 0x2acc <dir_next+0x1fe>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    290e:	2f e0       	ldi	r18, 0x0F	; 15
    2910:	82 2e       	mov	r8, r18
    2912:	91 2c       	mov	r9, r1
    2914:	8a 20       	and	r8, r10
    2916:	9b 20       	and	r9, r11
    2918:	81 14       	cp	r8, r1
    291a:	91 04       	cpc	r9, r1
    291c:	09 f0       	breq	.+2      	; 0x2920 <dir_next+0x52>
    291e:	c3 c0       	rjmp	.+390    	; 0x2aa6 <dir_next+0x1d8>
		dj->sect++;					/* Next sector */
    2920:	01 96       	adiw	r24, 0x01	; 1
    2922:	a1 1d       	adc	r26, r1
    2924:	b1 1d       	adc	r27, r1
    2926:	8e 87       	std	Y+14, r24	; 0x0e
    2928:	9f 87       	std	Y+15, r25	; 0x0f
    292a:	a8 8b       	std	Y+16, r26	; 0x10
    292c:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    292e:	4a 85       	ldd	r20, Y+10	; 0x0a
    2930:	5b 85       	ldd	r21, Y+11	; 0x0b
    2932:	6c 85       	ldd	r22, Y+12	; 0x0c
    2934:	7d 85       	ldd	r23, Y+13	; 0x0d
    2936:	e8 81       	ld	r30, Y
    2938:	f9 81       	ldd	r31, Y+1	; 0x01
    293a:	41 15       	cp	r20, r1
    293c:	51 05       	cpc	r21, r1
    293e:	61 05       	cpc	r22, r1
    2940:	71 05       	cpc	r23, r1
    2942:	39 f4       	brne	.+14     	; 0x2952 <dir_next+0x84>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    2944:	80 85       	ldd	r24, Z+8	; 0x08
    2946:	91 85       	ldd	r25, Z+9	; 0x09
    2948:	a8 16       	cp	r10, r24
    294a:	b9 06       	cpc	r11, r25
    294c:	08 f4       	brcc	.+2      	; 0x2950 <dir_next+0x82>
    294e:	ab c0       	rjmp	.+342    	; 0x2aa6 <dir_next+0x1d8>
    2950:	bd c0       	rjmp	.+378    	; 0x2acc <dir_next+0x1fe>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    2952:	82 81       	ldd	r24, Z+2	; 0x02
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	95 01       	movw	r18, r10
    295a:	a4 e0       	ldi	r26, 0x04	; 4
    295c:	36 95       	lsr	r19
    295e:	27 95       	ror	r18
    2960:	aa 95       	dec	r26
    2962:	e1 f7       	brne	.-8      	; 0x295c <dir_next+0x8e>
    2964:	82 23       	and	r24, r18
    2966:	93 23       	and	r25, r19
    2968:	89 2b       	or	r24, r25
    296a:	09 f0       	breq	.+2      	; 0x296e <dir_next+0xa0>
    296c:	9c c0       	rjmp	.+312    	; 0x2aa6 <dir_next+0x1d8>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    296e:	cf 01       	movw	r24, r30
    2970:	e6 d9       	rcall	.-3124   	; 0x1d3e <get_fat>
    2972:	6b 01       	movw	r12, r22
    2974:	7c 01       	movw	r14, r24
				if (clst <= 1) return FR_INT_ERR;
    2976:	82 e0       	ldi	r24, 0x02	; 2
    2978:	c8 16       	cp	r12, r24
    297a:	d1 04       	cpc	r13, r1
    297c:	e1 04       	cpc	r14, r1
    297e:	f1 04       	cpc	r15, r1
    2980:	08 f4       	brcc	.+2      	; 0x2984 <dir_next+0xb6>
    2982:	a6 c0       	rjmp	.+332    	; 0x2ad0 <dir_next+0x202>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2984:	9f ef       	ldi	r25, 0xFF	; 255
    2986:	c9 16       	cp	r12, r25
    2988:	9f ef       	ldi	r25, 0xFF	; 255
    298a:	d9 06       	cpc	r13, r25
    298c:	9f ef       	ldi	r25, 0xFF	; 255
    298e:	e9 06       	cpc	r14, r25
    2990:	9f ef       	ldi	r25, 0xFF	; 255
    2992:	f9 06       	cpc	r15, r25
    2994:	09 f4       	brne	.+2      	; 0x2998 <dir_next+0xca>
    2996:	9e c0       	rjmp	.+316    	; 0x2ad4 <dir_next+0x206>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    2998:	e8 81       	ld	r30, Y
    299a:	f9 81       	ldd	r31, Y+1	; 0x01
    299c:	86 89       	ldd	r24, Z+22	; 0x16
    299e:	97 89       	ldd	r25, Z+23	; 0x17
    29a0:	a0 8d       	ldd	r26, Z+24	; 0x18
    29a2:	b1 8d       	ldd	r27, Z+25	; 0x19
    29a4:	c8 16       	cp	r12, r24
    29a6:	d9 06       	cpc	r13, r25
    29a8:	ea 06       	cpc	r14, r26
    29aa:	fb 06       	cpc	r15, r27
    29ac:	08 f4       	brcc	.+2      	; 0x29b0 <dir_next+0xe2>
    29ae:	6d c0       	rjmp	.+218    	; 0x2a8a <dir_next+0x1bc>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    29b0:	01 2b       	or	r16, r17
    29b2:	09 f4       	brne	.+2      	; 0x29b6 <dir_next+0xe8>
    29b4:	8b c0       	rjmp	.+278    	; 0x2acc <dir_next+0x1fe>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    29b6:	4a 85       	ldd	r20, Y+10	; 0x0a
    29b8:	5b 85       	ldd	r21, Y+11	; 0x0b
    29ba:	6c 85       	ldd	r22, Y+12	; 0x0c
    29bc:	7d 85       	ldd	r23, Y+13	; 0x0d
    29be:	cf 01       	movw	r24, r30
    29c0:	8d da       	rcall	.-2790   	; 0x1edc <create_chain>
    29c2:	6b 01       	movw	r12, r22
    29c4:	7c 01       	movw	r14, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    29c6:	61 15       	cp	r22, r1
    29c8:	71 05       	cpc	r23, r1
    29ca:	81 05       	cpc	r24, r1
    29cc:	91 05       	cpc	r25, r1
    29ce:	11 f4       	brne	.+4      	; 0x29d4 <dir_next+0x106>
    29d0:	87 e0       	ldi	r24, 0x07	; 7
    29d2:	81 c0       	rjmp	.+258    	; 0x2ad6 <dir_next+0x208>
					if (clst == 1) return FR_INT_ERR;
    29d4:	61 30       	cpi	r22, 0x01	; 1
    29d6:	71 05       	cpc	r23, r1
    29d8:	81 05       	cpc	r24, r1
    29da:	91 05       	cpc	r25, r1
    29dc:	09 f4       	brne	.+2      	; 0x29e0 <dir_next+0x112>
    29de:	78 c0       	rjmp	.+240    	; 0x2ad0 <dir_next+0x202>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    29e0:	6f 3f       	cpi	r22, 0xFF	; 255
    29e2:	ff ef       	ldi	r31, 0xFF	; 255
    29e4:	7f 07       	cpc	r23, r31
    29e6:	ff ef       	ldi	r31, 0xFF	; 255
    29e8:	8f 07       	cpc	r24, r31
    29ea:	ff ef       	ldi	r31, 0xFF	; 255
    29ec:	9f 07       	cpc	r25, r31
    29ee:	09 f4       	brne	.+2      	; 0x29f2 <dir_next+0x124>
    29f0:	71 c0       	rjmp	.+226    	; 0x2ad4 <dir_next+0x206>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    29f2:	88 81       	ld	r24, Y
    29f4:	99 81       	ldd	r25, Y+1	; 0x01
    29f6:	40 e0       	ldi	r20, 0x00	; 0
    29f8:	50 e0       	ldi	r21, 0x00	; 0
    29fa:	60 e0       	ldi	r22, 0x00	; 0
    29fc:	70 e0       	ldi	r23, 0x00	; 0
    29fe:	36 d8       	rcall	.-3988   	; 0x1a6c <move_window>
    2a00:	88 23       	and	r24, r24
    2a02:	09 f0       	breq	.+2      	; 0x2a06 <dir_next+0x138>
    2a04:	67 c0       	rjmp	.+206    	; 0x2ad4 <dir_next+0x206>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    2a06:	88 81       	ld	r24, Y
    2a08:	99 81       	ldd	r25, Y+1	; 0x01
    2a0a:	8e 96       	adiw	r24, 0x2e	; 46
    2a0c:	60 e0       	ldi	r22, 0x00	; 0
    2a0e:	70 e0       	ldi	r23, 0x00	; 0
    2a10:	40 e0       	ldi	r20, 0x00	; 0
    2a12:	52 e0       	ldi	r21, 0x02	; 2
    2a14:	0e 94 c5 0c 	call	0x198a	; 0x198a <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    2a18:	08 81       	ld	r16, Y
    2a1a:	19 81       	ldd	r17, Y+1	; 0x01
    2a1c:	c8 01       	movw	r24, r16
    2a1e:	b7 01       	movw	r22, r14
    2a20:	a6 01       	movw	r20, r12
    2a22:	0e 94 cf 0c 	call	0x199e	; 0x199e <clust2sect>
    2a26:	f8 01       	movw	r30, r16
    2a28:	62 a7       	std	Z+42, r22	; 0x2a
    2a2a:	73 a7       	std	Z+43, r23	; 0x2b
    2a2c:	84 a7       	std	Z+44, r24	; 0x2c
    2a2e:	95 a7       	std	Z+45, r25	; 0x2d
    2a30:	00 e0       	ldi	r16, 0x00	; 0
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    2a32:	11 e0       	ldi	r17, 0x01	; 1
    2a34:	19 c0       	rjmp	.+50     	; 0x2a68 <dir_next+0x19a>
    2a36:	14 83       	std	Z+4, r17	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    2a38:	88 81       	ld	r24, Y
    2a3a:	99 81       	ldd	r25, Y+1	; 0x01
    2a3c:	40 e0       	ldi	r20, 0x00	; 0
    2a3e:	50 e0       	ldi	r21, 0x00	; 0
    2a40:	60 e0       	ldi	r22, 0x00	; 0
    2a42:	70 e0       	ldi	r23, 0x00	; 0
    2a44:	13 d8       	rcall	.-4058   	; 0x1a6c <move_window>
    2a46:	88 23       	and	r24, r24
    2a48:	09 f0       	breq	.+2      	; 0x2a4c <dir_next+0x17e>
    2a4a:	44 c0       	rjmp	.+136    	; 0x2ad4 <dir_next+0x206>
						dj->fs->winsect++;
    2a4c:	e8 81       	ld	r30, Y
    2a4e:	f9 81       	ldd	r31, Y+1	; 0x01
    2a50:	82 a5       	ldd	r24, Z+42	; 0x2a
    2a52:	93 a5       	ldd	r25, Z+43	; 0x2b
    2a54:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2a56:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2a58:	01 96       	adiw	r24, 0x01	; 1
    2a5a:	a1 1d       	adc	r26, r1
    2a5c:	b1 1d       	adc	r27, r1
    2a5e:	82 a7       	std	Z+42, r24	; 0x2a
    2a60:	93 a7       	std	Z+43, r25	; 0x2b
    2a62:	a4 a7       	std	Z+44, r26	; 0x2c
    2a64:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2a66:	0f 5f       	subi	r16, 0xFF	; 255
    2a68:	e8 81       	ld	r30, Y
    2a6a:	f9 81       	ldd	r31, Y+1	; 0x01
    2a6c:	82 81       	ldd	r24, Z+2	; 0x02
    2a6e:	08 17       	cp	r16, r24
    2a70:	10 f3       	brcs	.-60     	; 0x2a36 <dir_next+0x168>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    2a72:	82 a5       	ldd	r24, Z+42	; 0x2a
    2a74:	93 a5       	ldd	r25, Z+43	; 0x2b
    2a76:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2a78:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2a7a:	80 1b       	sub	r24, r16
    2a7c:	91 09       	sbc	r25, r1
    2a7e:	a1 09       	sbc	r26, r1
    2a80:	b1 09       	sbc	r27, r1
    2a82:	82 a7       	std	Z+42, r24	; 0x2a
    2a84:	93 a7       	std	Z+43, r25	; 0x2b
    2a86:	a4 a7       	std	Z+44, r26	; 0x2c
    2a88:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    2a8a:	ca 86       	std	Y+10, r12	; 0x0a
    2a8c:	db 86       	std	Y+11, r13	; 0x0b
    2a8e:	ec 86       	std	Y+12, r14	; 0x0c
    2a90:	fd 86       	std	Y+13, r15	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    2a92:	88 81       	ld	r24, Y
    2a94:	99 81       	ldd	r25, Y+1	; 0x01
    2a96:	b7 01       	movw	r22, r14
    2a98:	a6 01       	movw	r20, r12
    2a9a:	0e 94 cf 0c 	call	0x199e	; 0x199e <clust2sect>
    2a9e:	6e 87       	std	Y+14, r22	; 0x0e
    2aa0:	7f 87       	std	Y+15, r23	; 0x0f
    2aa2:	88 8b       	std	Y+16, r24	; 0x10
    2aa4:	99 8b       	std	Y+17, r25	; 0x11
			}
		}
	}

	dj->index = i;
    2aa6:	bd 82       	std	Y+5, r11	; 0x05
    2aa8:	ac 82       	std	Y+4, r10	; 0x04
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    2aaa:	85 e0       	ldi	r24, 0x05	; 5
    2aac:	88 0c       	add	r8, r8
    2aae:	99 1c       	adc	r9, r9
    2ab0:	8a 95       	dec	r24
    2ab2:	e1 f7       	brne	.-8      	; 0x2aac <dir_next+0x1de>
    2ab4:	8e e2       	ldi	r24, 0x2E	; 46
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	88 0e       	add	r8, r24
    2aba:	99 1e       	adc	r9, r25
    2abc:	88 81       	ld	r24, Y
    2abe:	99 81       	ldd	r25, Y+1	; 0x01
    2ac0:	88 0d       	add	r24, r8
    2ac2:	99 1d       	adc	r25, r9
    2ac4:	9b 8b       	std	Y+19, r25	; 0x13
    2ac6:	8a 8b       	std	Y+18, r24	; 0x12
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	05 c0       	rjmp	.+10     	; 0x2ad6 <dir_next+0x208>

	return FR_OK;
    2acc:	84 e0       	ldi	r24, 0x04	; 4
    2ace:	03 c0       	rjmp	.+6      	; 0x2ad6 <dir_next+0x208>
    2ad0:	82 e0       	ldi	r24, 0x02	; 2
    2ad2:	01 c0       	rjmp	.+2      	; 0x2ad6 <dir_next+0x208>
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
}
    2ad6:	df 91       	pop	r29
    2ad8:	cf 91       	pop	r28
    2ada:	1f 91       	pop	r17
    2adc:	0f 91       	pop	r16
    2ade:	ff 90       	pop	r15
    2ae0:	ef 90       	pop	r14
    2ae2:	df 90       	pop	r13
    2ae4:	cf 90       	pop	r12
    2ae6:	bf 90       	pop	r11
    2ae8:	af 90       	pop	r10
    2aea:	9f 90       	pop	r9
    2aec:	8f 90       	pop	r8
    2aee:	08 95       	ret

00002af0 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    2af0:	0f 93       	push	r16
    2af2:	cf 93       	push	r28
    2af4:	df 93       	push	r29
    2af6:	ec 01       	movw	r28, r24
    2af8:	9a 01       	movw	r18, r20
    2afa:	ab 01       	movw	r20, r22
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    2afc:	bc 01       	movw	r22, r24
    2afe:	62 5d       	subi	r22, 0xD2	; 210
    2b00:	7f 4f       	sbci	r23, 0xFF	; 255
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
    2b04:	01 e0       	ldi	r16, 0x01	; 1
    2b06:	0e 94 86 0c 	call	0x190c	; 0x190c <disk_read>
    2b0a:	88 23       	and	r24, r24
    2b0c:	11 f0       	breq	.+4      	; 0x2b12 <check_fs+0x22>
    2b0e:	23 e0       	ldi	r18, 0x03	; 3
    2b10:	29 c0       	rjmp	.+82     	; 0x2b64 <check_fs+0x74>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    2b12:	c4 5d       	subi	r28, 0xD4	; 212
    2b14:	dd 4f       	sbci	r29, 0xFD	; 253
    2b16:	88 81       	ld	r24, Y
    2b18:	99 81       	ldd	r25, Y+1	; 0x01
    2b1a:	cc 52       	subi	r28, 0x2C	; 44
    2b1c:	d2 40       	sbci	r29, 0x02	; 2
    2b1e:	85 55       	subi	r24, 0x55	; 85
    2b20:	9a 4a       	sbci	r25, 0xAA	; 170
    2b22:	11 f0       	breq	.+4      	; 0x2b28 <check_fs+0x38>
    2b24:	22 e0       	ldi	r18, 0x02	; 2
    2b26:	1e c0       	rjmp	.+60     	; 0x2b64 <check_fs+0x74>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    2b28:	cc 59       	subi	r28, 0x9C	; 156
    2b2a:	df 4f       	sbci	r29, 0xFF	; 255
    2b2c:	88 81       	ld	r24, Y
    2b2e:	99 81       	ldd	r25, Y+1	; 0x01
    2b30:	aa 81       	ldd	r26, Y+2	; 0x02
    2b32:	bb 81       	ldd	r27, Y+3	; 0x03
    2b34:	c4 56       	subi	r28, 0x64	; 100
    2b36:	d0 40       	sbci	r29, 0x00	; 0
    2b38:	b0 70       	andi	r27, 0x00	; 0
    2b3a:	86 54       	subi	r24, 0x46	; 70
    2b3c:	91 44       	sbci	r25, 0x41	; 65
    2b3e:	a4 45       	sbci	r26, 0x54	; 84
    2b40:	b0 40       	sbci	r27, 0x00	; 0
    2b42:	11 f4       	brne	.+4      	; 0x2b48 <check_fs+0x58>
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	0e c0       	rjmp	.+28     	; 0x2b64 <check_fs+0x74>
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	c0 58       	subi	r28, 0x80	; 128
    2b4c:	df 4f       	sbci	r29, 0xFF	; 255
    2b4e:	88 81       	ld	r24, Y
    2b50:	99 81       	ldd	r25, Y+1	; 0x01
    2b52:	aa 81       	ldd	r26, Y+2	; 0x02
    2b54:	bb 81       	ldd	r27, Y+3	; 0x03
    2b56:	b0 70       	andi	r27, 0x00	; 0
    2b58:	86 54       	subi	r24, 0x46	; 70
    2b5a:	91 44       	sbci	r25, 0x41	; 65
    2b5c:	a4 45       	sbci	r26, 0x54	; 84
    2b5e:	b0 40       	sbci	r27, 0x00	; 0
    2b60:	09 f0       	breq	.+2      	; 0x2b64 <check_fs+0x74>
    2b62:	21 e0       	ldi	r18, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    2b64:	82 2f       	mov	r24, r18
    2b66:	df 91       	pop	r29
    2b68:	cf 91       	pop	r28
    2b6a:	0f 91       	pop	r16
    2b6c:	08 95       	ret

00002b6e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    2b6e:	0f 93       	push	r16
    2b70:	1f 93       	push	r17
    2b72:	cf 93       	push	r28
    2b74:	df 93       	push	r29
    2b76:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    2b78:	6a 81       	ldd	r22, Y+2	; 0x02
    2b7a:	7b 81       	ldd	r23, Y+3	; 0x03
    2b7c:	88 81       	ld	r24, Y
    2b7e:	99 81       	ldd	r25, Y+1	; 0x01
    2b80:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <validate>
    2b84:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    2b86:	88 23       	and	r24, r24
    2b88:	09 f0       	breq	.+2      	; 0x2b8c <f_sync+0x1e>
    2b8a:	a3 c0       	rjmp	.+326    	; 0x2cd2 <f_sync+0x164>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    2b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b8e:	85 ff       	sbrs	r24, 5
    2b90:	a0 c0       	rjmp	.+320    	; 0x2cd2 <f_sync+0x164>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    2b92:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2b94:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2b96:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2b98:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2b9a:	88 81       	ld	r24, Y
    2b9c:	99 81       	ldd	r25, Y+1	; 0x01
    2b9e:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <move_window>
    2ba2:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    2ba4:	88 23       	and	r24, r24
    2ba6:	09 f0       	breq	.+2      	; 0x2baa <f_sync+0x3c>
    2ba8:	94 c0       	rjmp	.+296    	; 0x2cd2 <f_sync+0x164>
				dir = fp->dir_ptr;
    2baa:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2bac:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    2bae:	f8 01       	movw	r30, r16
    2bb0:	83 85       	ldd	r24, Z+11	; 0x0b
    2bb2:	80 62       	ori	r24, 0x20	; 32
    2bb4:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    2bb6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bb8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bba:	ac 85       	ldd	r26, Y+12	; 0x0c
    2bbc:	bd 85       	ldd	r27, Y+13	; 0x0d
    2bbe:	84 8f       	std	Z+28, r24	; 0x1c
    2bc0:	95 8f       	std	Z+29, r25	; 0x1d
    2bc2:	a6 8f       	std	Z+30, r26	; 0x1e
    2bc4:	b7 8f       	std	Z+31, r27	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    2bc6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bc8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bca:	93 8f       	std	Z+27, r25	; 0x1b
    2bcc:	82 8f       	std	Z+26, r24	; 0x1a
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    2bce:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bd0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bd2:	a8 89       	ldd	r26, Y+16	; 0x10
    2bd4:	b9 89       	ldd	r27, Y+17	; 0x11
    2bd6:	cd 01       	movw	r24, r26
    2bd8:	aa 27       	eor	r26, r26
    2bda:	bb 27       	eor	r27, r27
    2bdc:	95 8b       	std	Z+21, r25	; 0x15
    2bde:	84 8b       	std	Z+20, r24	; 0x14
				tim = get_fattime();						/* Update updated time */
    2be0:	0e 94 07 0c 	call	0x180e	; 0x180e <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    2be4:	f8 01       	movw	r30, r16
    2be6:	66 8b       	std	Z+22, r22	; 0x16
    2be8:	77 8b       	std	Z+23, r23	; 0x17
    2bea:	80 8f       	std	Z+24, r24	; 0x18
    2bec:	91 8f       	std	Z+25, r25	; 0x19
				fp->flag &= ~FA__WRITTEN;
    2bee:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf0:	8f 7d       	andi	r24, 0xDF	; 223
    2bf2:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    2bf4:	e8 81       	ld	r30, Y
    2bf6:	f9 81       	ldd	r31, Y+1	; 0x01
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    2bfc:	09 90       	ld	r0, Y+
    2bfe:	d8 81       	ld	r29, Y
    2c00:	c0 2d       	mov	r28, r0
)
{
	FRESULT res;


	res = move_window(fs, 0);
    2c02:	ce 01       	movw	r24, r28
    2c04:	40 e0       	ldi	r20, 0x00	; 0
    2c06:	50 e0       	ldi	r21, 0x00	; 0
    2c08:	60 e0       	ldi	r22, 0x00	; 0
    2c0a:	70 e0       	ldi	r23, 0x00	; 0
    2c0c:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <move_window>
    2c10:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    2c12:	88 23       	and	r24, r24
    2c14:	09 f0       	breq	.+2      	; 0x2c18 <f_sync+0xaa>
    2c16:	5d c0       	rjmp	.+186    	; 0x2cd2 <f_sync+0x164>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    2c18:	88 81       	ld	r24, Y
    2c1a:	83 30       	cpi	r24, 0x03	; 3
    2c1c:	09 f0       	breq	.+2      	; 0x2c20 <f_sync+0xb2>
    2c1e:	50 c0       	rjmp	.+160    	; 0x2cc0 <f_sync+0x152>
    2c20:	8d 81       	ldd	r24, Y+5	; 0x05
    2c22:	88 23       	and	r24, r24
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <f_sync+0xba>
    2c26:	4c c0       	rjmp	.+152    	; 0x2cc0 <f_sync+0x152>
			fs->winsect = 0;
    2c28:	1a a6       	std	Y+42, r1	; 0x2a
    2c2a:	1b a6       	std	Y+43, r1	; 0x2b
    2c2c:	1c a6       	std	Y+44, r1	; 0x2c
    2c2e:	1d a6       	std	Y+45, r1	; 0x2d
			mem_set(fs->win, 0, 512);
    2c30:	8e 01       	movw	r16, r28
    2c32:	02 5d       	subi	r16, 0xD2	; 210
    2c34:	1f 4f       	sbci	r17, 0xFF	; 255
    2c36:	c8 01       	movw	r24, r16
    2c38:	60 e0       	ldi	r22, 0x00	; 0
    2c3a:	70 e0       	ldi	r23, 0x00	; 0
    2c3c:	40 e0       	ldi	r20, 0x00	; 0
    2c3e:	52 e0       	ldi	r21, 0x02	; 2
    2c40:	0e 94 c5 0c 	call	0x198a	; 0x198a <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    2c44:	c4 5d       	subi	r28, 0xD4	; 212
    2c46:	dd 4f       	sbci	r29, 0xFD	; 253
    2c48:	85 e5       	ldi	r24, 0x55	; 85
    2c4a:	9a ea       	ldi	r25, 0xAA	; 170
    2c4c:	99 83       	std	Y+1, r25	; 0x01
    2c4e:	88 83       	st	Y, r24
    2c50:	cc 52       	subi	r28, 0x2C	; 44
    2c52:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    2c54:	82 e5       	ldi	r24, 0x52	; 82
    2c56:	92 e5       	ldi	r25, 0x52	; 82
    2c58:	a1 e6       	ldi	r26, 0x61	; 97
    2c5a:	b1 e4       	ldi	r27, 0x41	; 65
    2c5c:	8e a7       	std	Y+46, r24	; 0x2e
    2c5e:	9f a7       	std	Y+47, r25	; 0x2f
    2c60:	a8 ab       	std	Y+48, r26	; 0x30
    2c62:	b9 ab       	std	Y+49, r27	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    2c64:	ce 5e       	subi	r28, 0xEE	; 238
    2c66:	dd 4f       	sbci	r29, 0xFD	; 253
    2c68:	82 e7       	ldi	r24, 0x72	; 114
    2c6a:	92 e7       	ldi	r25, 0x72	; 114
    2c6c:	a1 e4       	ldi	r26, 0x41	; 65
    2c6e:	b1 e6       	ldi	r27, 0x61	; 97
    2c70:	88 83       	st	Y, r24
    2c72:	99 83       	std	Y+1, r25	; 0x01
    2c74:	aa 83       	std	Y+2, r26	; 0x02
    2c76:	bb 83       	std	Y+3, r27	; 0x03
    2c78:	c2 51       	subi	r28, 0x12	; 18
    2c7a:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    2c7c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c7e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c80:	a8 89       	ldd	r26, Y+16	; 0x10
    2c82:	b9 89       	ldd	r27, Y+17	; 0x11
    2c84:	ca 5e       	subi	r28, 0xEA	; 234
    2c86:	dd 4f       	sbci	r29, 0xFD	; 253
    2c88:	88 83       	st	Y, r24
    2c8a:	99 83       	std	Y+1, r25	; 0x01
    2c8c:	aa 83       	std	Y+2, r26	; 0x02
    2c8e:	bb 83       	std	Y+3, r27	; 0x03
    2c90:	c6 51       	subi	r28, 0x16	; 22
    2c92:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    2c94:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c96:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c98:	ac 85       	ldd	r26, Y+12	; 0x0c
    2c9a:	bd 85       	ldd	r27, Y+13	; 0x0d
    2c9c:	c6 5e       	subi	r28, 0xE6	; 230
    2c9e:	dd 4f       	sbci	r29, 0xFD	; 253
    2ca0:	88 83       	st	Y, r24
    2ca2:	99 83       	std	Y+1, r25	; 0x01
    2ca4:	aa 83       	std	Y+2, r26	; 0x02
    2ca6:	bb 83       	std	Y+3, r27	; 0x03
    2ca8:	ca 51       	subi	r28, 0x1A	; 26
    2caa:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    2cac:	2a 89       	ldd	r18, Y+18	; 0x12
    2cae:	3b 89       	ldd	r19, Y+19	; 0x13
    2cb0:	4c 89       	ldd	r20, Y+20	; 0x14
    2cb2:	5d 89       	ldd	r21, Y+21	; 0x15
    2cb4:	89 81       	ldd	r24, Y+1	; 0x01
    2cb6:	b8 01       	movw	r22, r16
    2cb8:	01 e0       	ldi	r16, 0x01	; 1
    2cba:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <disk_write>
			fs->fsi_flag = 0;
    2cbe:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	60 e0       	ldi	r22, 0x00	; 0
    2cc4:	40 e0       	ldi	r20, 0x00	; 0
    2cc6:	50 e0       	ldi	r21, 0x00	; 0
    2cc8:	0e 94 01 0c 	call	0x1802	; 0x1802 <disk_ioctl>
    2ccc:	81 11       	cpse	r24, r1
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	98 2f       	mov	r25, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    2cd2:	89 2f       	mov	r24, r25
    2cd4:	df 91       	pop	r29
    2cd6:	cf 91       	pop	r28
    2cd8:	1f 91       	pop	r17
    2cda:	0f 91       	pop	r16
    2cdc:	08 95       	ret

00002cde <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    2cde:	cf 93       	push	r28
    2ce0:	df 93       	push	r29
    2ce2:	ec 01       	movw	r28, r24
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    2ce4:	44 df       	rcall	.-376    	; 0x2b6e <f_sync>
#else
		res = dec_lock(fp->fs, fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    2ce6:	88 23       	and	r24, r24
    2ce8:	11 f4       	brne	.+4      	; 0x2cee <f_close+0x10>
    2cea:	19 82       	std	Y+1, r1	; 0x01
    2cec:	18 82       	st	Y, r1
	return res;
#endif
}
    2cee:	df 91       	pop	r29
    2cf0:	cf 91       	pop	r28
    2cf2:	08 95       	ret

00002cf4 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2cf4:	2f 92       	push	r2
    2cf6:	3f 92       	push	r3
    2cf8:	4f 92       	push	r4
    2cfa:	5f 92       	push	r5
    2cfc:	6f 92       	push	r6
    2cfe:	7f 92       	push	r7
    2d00:	8f 92       	push	r8
    2d02:	9f 92       	push	r9
    2d04:	af 92       	push	r10
    2d06:	bf 92       	push	r11
    2d08:	cf 92       	push	r12
    2d0a:	df 92       	push	r13
    2d0c:	ef 92       	push	r14
    2d0e:	ff 92       	push	r15
    2d10:	0f 93       	push	r16
    2d12:	1f 93       	push	r17
    2d14:	df 93       	push	r29
    2d16:	cf 93       	push	r28
    2d18:	cd b7       	in	r28, 0x3d	; 61
    2d1a:	de b7       	in	r29, 0x3e	; 62
    2d1c:	e5 97       	sbiw	r28, 0x35	; 53
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	de bf       	out	0x3e, r29	; 62
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	cd bf       	out	0x3d, r28	; 61
    2d28:	9b ab       	std	Y+51, r25	; 0x33
    2d2a:	8a ab       	std	Y+50, r24	; 0x32
    2d2c:	7d ab       	std	Y+53, r23	; 0x35
    2d2e:	6c ab       	std	Y+52, r22	; 0x34
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    2d30:	dc 01       	movw	r26, r24
    2d32:	1d 92       	st	X+, r1
    2d34:	1c 92       	st	X, r1

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    2d36:	4f 71       	andi	r20, 0x1F	; 31
    2d38:	4b a7       	std	Y+43, r20	; 0x2b
	WORD nrsv;
	const TCHAR *p = *path;
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    2d3a:	ec a9       	ldd	r30, Y+52	; 0x34
    2d3c:	fd a9       	ldd	r31, Y+53	; 0x35
    2d3e:	80 81       	ld	r24, Z
    2d40:	28 2f       	mov	r18, r24
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	20 53       	subi	r18, 0x30	; 48
    2d46:	30 40       	sbci	r19, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    2d48:	2a 30       	cpi	r18, 0x0A	; 10
    2d4a:	31 05       	cpc	r19, r1
    2d4c:	58 f4       	brcc	.+22     	; 0x2d64 <f_open+0x70>
    2d4e:	81 81       	ldd	r24, Z+1	; 0x01
    2d50:	8a 33       	cpi	r24, 0x3A	; 58
    2d52:	41 f4       	brne	.+16     	; 0x2d64 <f_open+0x70>
		p += 2; *path = p;			/* Return pointer to the path name */
    2d54:	32 96       	adiw	r30, 0x02	; 2
    2d56:	fd ab       	std	Y+53, r31	; 0x35
    2d58:	ec ab       	std	Y+52, r30	; 0x34
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    2d5a:	23 2b       	or	r18, r19
    2d5c:	19 f0       	breq	.+6      	; 0x2d64 <f_open+0x70>
    2d5e:	5b e0       	ldi	r21, 0x0B	; 11
    2d60:	b5 2e       	mov	r11, r21
    2d62:	67 c2       	rjmp	.+1230   	; 0x3232 <f_open+0x53e>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Return pointer to the corresponding file system object */
    2d64:	e0 90 ca 01 	lds	r14, 0x01CA
    2d68:	f0 90 cb 01 	lds	r15, 0x01CB
    2d6c:	fe 86       	std	Y+14, r15	; 0x0e
    2d6e:	ed 86       	std	Y+13, r14	; 0x0d
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    2d70:	e1 14       	cp	r14, r1
    2d72:	f1 04       	cpc	r15, r1
    2d74:	19 f4       	brne	.+6      	; 0x2d7c <f_open+0x88>
    2d76:	4c e0       	ldi	r20, 0x0C	; 12
    2d78:	b4 2e       	mov	r11, r20
    2d7a:	5b c2       	rjmp	.+1206   	; 0x3232 <f_open+0x53e>

	fp->fs = 0;			/* Clear file object */

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    2d7c:	1b a5       	ldd	r17, Y+43	; 0x2b
    2d7e:	1e 7f       	andi	r17, 0xFE	; 254
	*rfs = fs = FatFs[vol];			/* Return pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    2d80:	d7 01       	movw	r26, r14
    2d82:	8c 91       	ld	r24, X
    2d84:	88 23       	and	r24, r24
    2d86:	61 f0       	breq	.+24     	; 0x2da0 <f_open+0xac>
		stat = disk_status(fs->drv);
    2d88:	11 96       	adiw	r26, 0x01	; 1
    2d8a:	8c 91       	ld	r24, X
    2d8c:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <disk_status>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    2d90:	80 fd       	sbrc	r24, 0
    2d92:	06 c0       	rjmp	.+12     	; 0x2da0 <f_open+0xac>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    2d94:	11 23       	and	r17, r17
    2d96:	09 f4       	brne	.+2      	; 0x2d9a <f_open+0xa6>
    2d98:	48 c2       	rjmp	.+1168   	; 0x322a <f_open+0x536>
    2d9a:	82 fd       	sbrc	r24, 2
    2d9c:	43 c2       	rjmp	.+1158   	; 0x3224 <f_open+0x530>
    2d9e:	45 c2       	rjmp	.+1162   	; 0x322a <f_open+0x536>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume (initialize the file system object) */

	fs->fs_type = 0;					/* Clear the file system object */
    2da0:	f7 01       	movw	r30, r14
    2da2:	10 82       	st	Z, r1
	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
    2da4:	11 82       	std	Z+1, r1	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    2da6:	80 e0       	ldi	r24, 0x00	; 0
    2da8:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    2dac:	80 ff       	sbrs	r24, 0
    2dae:	03 c0       	rjmp	.+6      	; 0x2db6 <f_open+0xc2>
    2db0:	33 e0       	ldi	r19, 0x03	; 3
    2db2:	b3 2e       	mov	r11, r19
    2db4:	3e c2       	rjmp	.+1148   	; 0x3232 <f_open+0x53e>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    2db6:	11 23       	and	r17, r17
    2db8:	11 f0       	breq	.+4      	; 0x2dbe <f_open+0xca>
    2dba:	82 fd       	sbrc	r24, 2
    2dbc:	33 c2       	rjmp	.+1126   	; 0x3224 <f_open+0x530>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive (Supports only generic partitions, FDISK and SFD) */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
    2dbe:	c7 01       	movw	r24, r14
    2dc0:	40 e0       	ldi	r20, 0x00	; 0
    2dc2:	50 e0       	ldi	r21, 0x00	; 0
    2dc4:	60 e0       	ldi	r22, 0x00	; 0
    2dc6:	70 e0       	ldi	r23, 0x00	; 0
    2dc8:	93 de       	rcall	.-730    	; 0x2af0 <check_fs>
	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
    2dca:	81 30       	cpi	r24, 0x01	; 1
    2dcc:	29 f0       	breq	.+10     	; 0x2dd8 <f_open+0xe4>
    2dce:	1c a6       	std	Y+44, r1	; 0x2c
    2dd0:	1d a6       	std	Y+45, r1	; 0x2d
    2dd2:	1e a6       	std	Y+46, r1	; 0x2e
    2dd4:	1f a6       	std	Y+47, r1	; 0x2f
    2dd6:	13 c0       	rjmp	.+38     	; 0x2dfe <f_open+0x10a>
		/* Check the partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    2dd8:	f7 01       	movw	r30, r14
    2dda:	e4 51       	subi	r30, 0x14	; 20
    2ddc:	fe 4f       	sbci	r31, 0xFE	; 254
		if (tbl[4]) {									/* Is the partition existing? */
    2dde:	84 81       	ldd	r24, Z+4	; 0x04
    2de0:	88 23       	and	r24, r24
    2de2:	09 f4       	brne	.+2      	; 0x2de6 <f_open+0xf2>
    2de4:	24 c2       	rjmp	.+1096   	; 0x322e <f_open+0x53a>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    2de6:	20 85       	ldd	r18, Z+8	; 0x08
    2de8:	31 85       	ldd	r19, Z+9	; 0x09
    2dea:	42 85       	ldd	r20, Z+10	; 0x0a
    2dec:	53 85       	ldd	r21, Z+11	; 0x0b
    2dee:	2c a7       	std	Y+44, r18	; 0x2c
    2df0:	3d a7       	std	Y+45, r19	; 0x2d
    2df2:	4e a7       	std	Y+46, r20	; 0x2e
    2df4:	5f a7       	std	Y+47, r21	; 0x2f
			fmt = check_fs(fs, bsect);					/* Check the partition */
    2df6:	c7 01       	movw	r24, r14
    2df8:	ba 01       	movw	r22, r20
    2dfa:	a9 01       	movw	r20, r18
    2dfc:	79 de       	rcall	.-782    	; 0x2af0 <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    2dfe:	83 30       	cpi	r24, 0x03	; 3
    2e00:	19 f4       	brne	.+6      	; 0x2e08 <f_open+0x114>
    2e02:	bb 24       	eor	r11, r11
    2e04:	b3 94       	inc	r11
    2e06:	15 c2       	rjmp	.+1066   	; 0x3232 <f_open+0x53e>
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
    2e08:	88 23       	and	r24, r24
    2e0a:	09 f0       	breq	.+2      	; 0x2e0e <f_open+0x11a>
    2e0c:	10 c2       	rjmp	.+1056   	; 0x322e <f_open+0x53a>

	/* Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    2e0e:	d7 01       	movw	r26, r14
    2e10:	d9 96       	adiw	r26, 0x39	; 57
    2e12:	8d 91       	ld	r24, X+
    2e14:	9c 91       	ld	r25, X
    2e16:	da 97       	sbiw	r26, 0x3a	; 58
    2e18:	80 50       	subi	r24, 0x00	; 0
    2e1a:	92 40       	sbci	r25, 0x02	; 2
    2e1c:	09 f0       	breq	.+2      	; 0x2e20 <f_open+0x12c>
    2e1e:	07 c2       	rjmp	.+1038   	; 0x322e <f_open+0x53a>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    2e20:	e4 e4       	ldi	r30, 0x44	; 68
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	ee 0e       	add	r14, r30
    2e26:	ff 1e       	adc	r15, r31
    2e28:	d7 01       	movw	r26, r14
    2e2a:	8d 91       	ld	r24, X+
    2e2c:	9c 91       	ld	r25, X
    2e2e:	ec eb       	ldi	r30, 0xBC	; 188
    2e30:	ff ef       	ldi	r31, 0xFF	; 255
    2e32:	ee 0e       	add	r14, r30
    2e34:	ff 1e       	adc	r15, r31
    2e36:	3c 01       	movw	r6, r24
    2e38:	88 24       	eor	r8, r8
    2e3a:	99 24       	eor	r9, r9
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    2e3c:	61 14       	cp	r6, r1
    2e3e:	71 04       	cpc	r7, r1
    2e40:	81 04       	cpc	r8, r1
    2e42:	91 04       	cpc	r9, r1
    2e44:	69 f4       	brne	.+26     	; 0x2e60 <f_open+0x16c>
    2e46:	22 e5       	ldi	r18, 0x52	; 82
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	e2 0e       	add	r14, r18
    2e4c:	f3 1e       	adc	r15, r19
    2e4e:	d7 01       	movw	r26, r14
    2e50:	6d 90       	ld	r6, X+
    2e52:	7d 90       	ld	r7, X+
    2e54:	8d 90       	ld	r8, X+
    2e56:	9c 90       	ld	r9, X
    2e58:	ee ea       	ldi	r30, 0xAE	; 174
    2e5a:	ff ef       	ldi	r31, 0xFF	; 255
    2e5c:	ee 0e       	add	r14, r30
    2e5e:	ff 1e       	adc	r15, r31
	fs->fsize = fasize;
    2e60:	d7 01       	movw	r26, r14
    2e62:	5a 96       	adiw	r26, 0x1a	; 26
    2e64:	6d 92       	st	X+, r6
    2e66:	7d 92       	st	X+, r7
    2e68:	8d 92       	st	X+, r8
    2e6a:	9c 92       	st	X, r9
    2e6c:	5d 97       	sbiw	r26, 0x1d	; 29

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    2e6e:	de 96       	adiw	r26, 0x3e	; 62
    2e70:	4c 91       	ld	r20, X
    2e72:	de 97       	sbiw	r26, 0x3e	; 62
    2e74:	13 96       	adiw	r26, 0x03	; 3
    2e76:	4c 93       	st	X, r20
    2e78:	13 97       	sbiw	r26, 0x03	; 3
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    2e7a:	84 2f       	mov	r24, r20
    2e7c:	81 50       	subi	r24, 0x01	; 1
    2e7e:	82 30       	cpi	r24, 0x02	; 2
    2e80:	08 f0       	brcs	.+2      	; 0x2e84 <f_open+0x190>
    2e82:	d5 c1       	rjmp	.+938    	; 0x322e <f_open+0x53a>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    2e84:	db 96       	adiw	r26, 0x3b	; 59
    2e86:	2c 91       	ld	r18, X
    2e88:	db 97       	sbiw	r26, 0x3b	; 59
    2e8a:	12 96       	adiw	r26, 0x02	; 2
    2e8c:	2c 93       	st	X, r18
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be 1,2,4...128) */
    2e8e:	22 23       	and	r18, r18
    2e90:	09 f4       	brne	.+2      	; 0x2e94 <f_open+0x1a0>
    2e92:	cd c1       	rjmp	.+922    	; 0x322e <f_open+0x53a>
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	c9 01       	movw	r24, r18
    2e98:	01 97       	sbiw	r24, 0x01	; 1
    2e9a:	82 23       	and	r24, r18
    2e9c:	93 23       	and	r25, r19
    2e9e:	89 2b       	or	r24, r25
    2ea0:	09 f0       	breq	.+2      	; 0x2ea4 <f_open+0x1b0>
    2ea2:	c5 c1       	rjmp	.+906    	; 0x322e <f_open+0x53a>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    2ea4:	ef e3       	ldi	r30, 0x3F	; 63
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	ee 0e       	add	r14, r30
    2eaa:	ff 1e       	adc	r15, r31
    2eac:	d7 01       	movw	r26, r14
    2eae:	0d 91       	ld	r16, X+
    2eb0:	1c 91       	ld	r17, X
    2eb2:	e1 ec       	ldi	r30, 0xC1	; 193
    2eb4:	ff ef       	ldi	r31, 0xFF	; 255
    2eb6:	ee 0e       	add	r14, r30
    2eb8:	ff 1e       	adc	r15, r31
    2eba:	d7 01       	movw	r26, r14
    2ebc:	19 96       	adiw	r26, 0x09	; 9
    2ebe:	1c 93       	st	X, r17
    2ec0:	0e 93       	st	-X, r16
    2ec2:	18 97       	sbiw	r26, 0x08	; 8
	if (fs->n_rootdir % (SS(fs) / 32)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    2ec4:	c8 01       	movw	r24, r16
    2ec6:	8f 70       	andi	r24, 0x0F	; 15
    2ec8:	90 70       	andi	r25, 0x00	; 0
    2eca:	89 2b       	or	r24, r25
    2ecc:	09 f0       	breq	.+2      	; 0x2ed0 <f_open+0x1dc>
    2ece:	af c1       	rjmp	.+862    	; 0x322e <f_open+0x53a>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    2ed0:	e1 e4       	ldi	r30, 0x41	; 65
    2ed2:	f0 e0       	ldi	r31, 0x00	; 0
    2ed4:	ee 0e       	add	r14, r30
    2ed6:	ff 1e       	adc	r15, r31
    2ed8:	d7 01       	movw	r26, r14
    2eda:	8d 91       	ld	r24, X+
    2edc:	9c 91       	ld	r25, X
    2ede:	ef eb       	ldi	r30, 0xBF	; 191
    2ee0:	ff ef       	ldi	r31, 0xFF	; 255
    2ee2:	ee 0e       	add	r14, r30
    2ee4:	ff 1e       	adc	r15, r31
    2ee6:	5c 01       	movw	r10, r24
    2ee8:	cc 24       	eor	r12, r12
    2eea:	dd 24       	eor	r13, r13
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    2eec:	a1 14       	cp	r10, r1
    2eee:	b1 04       	cpc	r11, r1
    2ef0:	c1 04       	cpc	r12, r1
    2ef2:	d1 04       	cpc	r13, r1
    2ef4:	69 f4       	brne	.+26     	; 0x2f10 <f_open+0x21c>
    2ef6:	2e e4       	ldi	r18, 0x4E	; 78
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	e2 0e       	add	r14, r18
    2efc:	f3 1e       	adc	r15, r19
    2efe:	d7 01       	movw	r26, r14
    2f00:	ad 90       	ld	r10, X+
    2f02:	bd 90       	ld	r11, X+
    2f04:	cd 90       	ld	r12, X+
    2f06:	dc 90       	ld	r13, X
    2f08:	e2 eb       	ldi	r30, 0xB2	; 178
    2f0a:	ff ef       	ldi	r31, 0xFF	; 255
    2f0c:	ee 0e       	add	r14, r30
    2f0e:	ff 1e       	adc	r15, r31

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    2f10:	d7 01       	movw	r26, r14
    2f12:	dc 96       	adiw	r26, 0x3c	; 60
    2f14:	4d 90       	ld	r4, X+
    2f16:	5c 90       	ld	r5, X
    2f18:	dd 97       	sbiw	r26, 0x3d	; 61
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    2f1a:	41 14       	cp	r4, r1
    2f1c:	51 04       	cpc	r5, r1
    2f1e:	09 f4       	brne	.+2      	; 0x2f22 <f_open+0x22e>
    2f20:	86 c1       	rjmp	.+780    	; 0x322e <f_open+0x53a>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    2f22:	24 2f       	mov	r18, r20
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	40 e0       	ldi	r20, 0x00	; 0
    2f28:	50 e0       	ldi	r21, 0x00	; 0
    2f2a:	c4 01       	movw	r24, r8
    2f2c:	b3 01       	movw	r22, r6
    2f2e:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <__mulsi3>
    2f32:	6b a3       	std	Y+35, r22	; 0x23
    2f34:	7c a3       	std	Y+36, r23	; 0x24
    2f36:	8d a3       	std	Y+37, r24	; 0x25
    2f38:	9e a3       	std	Y+38, r25	; 0x26

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / 32);	/* RSV+FAT+DIR */
    2f3a:	12 01       	movw	r2, r4
    2f3c:	44 24       	eor	r4, r4
    2f3e:	55 24       	eor	r5, r5
    2f40:	24 e0       	ldi	r18, 0x04	; 4
    2f42:	16 95       	lsr	r17
    2f44:	07 95       	ror	r16
    2f46:	2a 95       	dec	r18
    2f48:	e1 f7       	brne	.-8      	; 0x2f42 <f_open+0x24e>
    2f4a:	38 01       	movw	r6, r16
    2f4c:	88 24       	eor	r8, r8
    2f4e:	99 24       	eor	r9, r9
    2f50:	62 0c       	add	r6, r2
    2f52:	73 1c       	adc	r7, r3
    2f54:	84 1c       	adc	r8, r4
    2f56:	95 1c       	adc	r9, r5
    2f58:	66 0e       	add	r6, r22
    2f5a:	77 1e       	adc	r7, r23
    2f5c:	88 1e       	adc	r8, r24
    2f5e:	99 1e       	adc	r9, r25
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    2f60:	a6 14       	cp	r10, r6
    2f62:	b7 04       	cpc	r11, r7
    2f64:	c8 04       	cpc	r12, r8
    2f66:	d9 04       	cpc	r13, r9
    2f68:	08 f4       	brcc	.+2      	; 0x2f6c <f_open+0x278>
    2f6a:	61 c1       	rjmp	.+706    	; 0x322e <f_open+0x53a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    2f6c:	a6 18       	sub	r10, r6
    2f6e:	b7 08       	sbc	r11, r7
    2f70:	c8 08       	sbc	r12, r8
    2f72:	d9 08       	sbc	r13, r9
    2f74:	f7 01       	movw	r30, r14
    2f76:	22 81       	ldd	r18, Z+2	; 0x02
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	40 e0       	ldi	r20, 0x00	; 0
    2f7c:	50 e0       	ldi	r21, 0x00	; 0
    2f7e:	c6 01       	movw	r24, r12
    2f80:	b5 01       	movw	r22, r10
    2f82:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <__udivmodsi4>
    2f86:	c9 01       	movw	r24, r18
    2f88:	da 01       	movw	r26, r20
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    2f8a:	00 97       	sbiw	r24, 0x00	; 0
    2f8c:	a1 05       	cpc	r26, r1
    2f8e:	b1 05       	cpc	r27, r1
    2f90:	09 f4       	brne	.+2      	; 0x2f94 <f_open+0x2a0>
    2f92:	4d c1       	rjmp	.+666    	; 0x322e <f_open+0x53a>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    2f94:	86 3f       	cpi	r24, 0xF6	; 246
    2f96:	ff e0       	ldi	r31, 0x0F	; 15
    2f98:	9f 07       	cpc	r25, r31
    2f9a:	f0 e0       	ldi	r31, 0x00	; 0
    2f9c:	af 07       	cpc	r26, r31
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	bf 07       	cpc	r27, r31
    2fa2:	10 f4       	brcc	.+4      	; 0x2fa8 <f_open+0x2b4>
    2fa4:	11 e0       	ldi	r17, 0x01	; 1
    2fa6:	0b c0       	rjmp	.+22     	; 0x2fbe <f_open+0x2ca>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    2fa8:	86 3f       	cpi	r24, 0xF6	; 246
    2faa:	2f ef       	ldi	r18, 0xFF	; 255
    2fac:	92 07       	cpc	r25, r18
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	a2 07       	cpc	r26, r18
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	b2 07       	cpc	r27, r18
    2fb6:	10 f0       	brcs	.+4      	; 0x2fbc <f_open+0x2c8>
    2fb8:	13 e0       	ldi	r17, 0x03	; 3
    2fba:	01 c0       	rjmp	.+2      	; 0x2fbe <f_open+0x2ca>
    2fbc:	12 e0       	ldi	r17, 0x02	; 2

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    2fbe:	02 e0       	ldi	r16, 0x02	; 2
    2fc0:	a0 2e       	mov	r10, r16
    2fc2:	b1 2c       	mov	r11, r1
    2fc4:	c1 2c       	mov	r12, r1
    2fc6:	d1 2c       	mov	r13, r1
    2fc8:	a8 0e       	add	r10, r24
    2fca:	b9 1e       	adc	r11, r25
    2fcc:	ca 1e       	adc	r12, r26
    2fce:	db 1e       	adc	r13, r27
    2fd0:	d7 01       	movw	r26, r14
    2fd2:	56 96       	adiw	r26, 0x16	; 22
    2fd4:	ad 92       	st	X+, r10
    2fd6:	bd 92       	st	X+, r11
    2fd8:	cd 92       	st	X+, r12
    2fda:	dc 92       	st	X, r13
    2fdc:	59 97       	sbiw	r26, 0x19	; 25
	fs->database = bsect + sysect;						/* Data start sector */
    2fde:	2c a5       	ldd	r18, Y+44	; 0x2c
    2fe0:	3d a5       	ldd	r19, Y+45	; 0x2d
    2fe2:	4e a5       	ldd	r20, Y+46	; 0x2e
    2fe4:	5f a5       	ldd	r21, Y+47	; 0x2f
    2fe6:	62 0e       	add	r6, r18
    2fe8:	73 1e       	adc	r7, r19
    2fea:	84 1e       	adc	r8, r20
    2fec:	95 1e       	adc	r9, r21
    2fee:	96 96       	adiw	r26, 0x26	; 38
    2ff0:	6d 92       	st	X+, r6
    2ff2:	7d 92       	st	X+, r7
    2ff4:	8d 92       	st	X+, r8
    2ff6:	9c 92       	st	X, r9
    2ff8:	99 97       	sbiw	r26, 0x29	; 41
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    2ffa:	da 01       	movw	r26, r20
    2ffc:	c9 01       	movw	r24, r18
    2ffe:	82 0d       	add	r24, r2
    3000:	93 1d       	adc	r25, r3
    3002:	a4 1d       	adc	r26, r4
    3004:	b5 1d       	adc	r27, r5
    3006:	f7 01       	movw	r30, r14
    3008:	86 8f       	std	Z+30, r24	; 0x1e
    300a:	97 8f       	std	Z+31, r25	; 0x1f
    300c:	a0 a3       	std	Z+32, r26	; 0x20
    300e:	b1 a3       	std	Z+33, r27	; 0x21
    3010:	20 85       	ldd	r18, Z+8	; 0x08
    3012:	31 85       	ldd	r19, Z+9	; 0x09
	if (fmt == FS_FAT32) {
    3014:	13 30       	cpi	r17, 0x03	; 3
    3016:	f9 f4       	brne	.+62     	; 0x3056 <f_open+0x362>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    3018:	23 2b       	or	r18, r19
    301a:	09 f0       	breq	.+2      	; 0x301e <f_open+0x32a>
    301c:	08 c1       	rjmp	.+528    	; 0x322e <f_open+0x53a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    301e:	2a e5       	ldi	r18, 0x5A	; 90
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	e2 0e       	add	r14, r18
    3024:	f3 1e       	adc	r15, r19
    3026:	f7 01       	movw	r30, r14
    3028:	80 81       	ld	r24, Z
    302a:	91 81       	ldd	r25, Z+1	; 0x01
    302c:	a2 81       	ldd	r26, Z+2	; 0x02
    302e:	b3 81       	ldd	r27, Z+3	; 0x03
    3030:	26 ea       	ldi	r18, 0xA6	; 166
    3032:	3f ef       	ldi	r19, 0xFF	; 255
    3034:	e2 0e       	add	r14, r18
    3036:	f3 1e       	adc	r15, r19
    3038:	f7 01       	movw	r30, r14
    303a:	82 a3       	std	Z+34, r24	; 0x22
    303c:	93 a3       	std	Z+35, r25	; 0x23
    303e:	a4 a3       	std	Z+36, r26	; 0x24
    3040:	b5 a3       	std	Z+37, r27	; 0x25
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    3042:	a6 01       	movw	r20, r12
    3044:	95 01       	movw	r18, r10
    3046:	f2 e0       	ldi	r31, 0x02	; 2
    3048:	22 0f       	add	r18, r18
    304a:	33 1f       	adc	r19, r19
    304c:	44 1f       	adc	r20, r20
    304e:	55 1f       	adc	r21, r21
    3050:	fa 95       	dec	r31
    3052:	d1 f7       	brne	.-12     	; 0x3048 <f_open+0x354>
    3054:	31 c0       	rjmp	.+98     	; 0x30b8 <f_open+0x3c4>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    3056:	23 2b       	or	r18, r19
    3058:	09 f4       	brne	.+2      	; 0x305c <f_open+0x368>
    305a:	e9 c0       	rjmp	.+466    	; 0x322e <f_open+0x53a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    305c:	2b a1       	ldd	r18, Y+35	; 0x23
    305e:	3c a1       	ldd	r19, Y+36	; 0x24
    3060:	4d a1       	ldd	r20, Y+37	; 0x25
    3062:	5e a1       	ldd	r21, Y+38	; 0x26
    3064:	82 0f       	add	r24, r18
    3066:	93 1f       	adc	r25, r19
    3068:	a4 1f       	adc	r26, r20
    306a:	b5 1f       	adc	r27, r21
    306c:	f7 01       	movw	r30, r14
    306e:	82 a3       	std	Z+34, r24	; 0x22
    3070:	93 a3       	std	Z+35, r25	; 0x23
    3072:	a4 a3       	std	Z+36, r26	; 0x24
    3074:	b5 a3       	std	Z+37, r27	; 0x25
    3076:	d6 01       	movw	r26, r12
    3078:	c5 01       	movw	r24, r10
    307a:	88 0f       	add	r24, r24
    307c:	99 1f       	adc	r25, r25
    307e:	aa 1f       	adc	r26, r26
    3080:	bb 1f       	adc	r27, r27
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    3082:	12 30       	cpi	r17, 0x02	; 2
    3084:	19 f4       	brne	.+6      	; 0x308c <f_open+0x398>
    3086:	9c 01       	movw	r18, r24
    3088:	ad 01       	movw	r20, r26
    308a:	16 c0       	rjmp	.+44     	; 0x30b8 <f_open+0x3c4>
    308c:	9c 01       	movw	r18, r24
    308e:	ad 01       	movw	r20, r26
    3090:	2a 0d       	add	r18, r10
    3092:	3b 1d       	adc	r19, r11
    3094:	4c 1d       	adc	r20, r12
    3096:	5d 1d       	adc	r21, r13
    3098:	56 95       	lsr	r21
    309a:	47 95       	ror	r20
    309c:	37 95       	ror	r19
    309e:	27 95       	ror	r18
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	a0 e0       	ldi	r26, 0x00	; 0
    30a6:	b0 e0       	ldi	r27, 0x00	; 0
    30a8:	a8 22       	and	r10, r24
    30aa:	b9 22       	and	r11, r25
    30ac:	ca 22       	and	r12, r26
    30ae:	db 22       	and	r13, r27
    30b0:	2a 0d       	add	r18, r10
    30b2:	3b 1d       	adc	r19, r11
    30b4:	4c 1d       	adc	r20, r12
    30b6:	5d 1d       	adc	r21, r13
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (FAT size must not be less than FAT sectors */
    30b8:	21 50       	subi	r18, 0x01	; 1
    30ba:	3e 4f       	sbci	r19, 0xFE	; 254
    30bc:	4f 4f       	sbci	r20, 0xFF	; 255
    30be:	5f 4f       	sbci	r21, 0xFF	; 255
    30c0:	69 e0       	ldi	r22, 0x09	; 9
    30c2:	56 95       	lsr	r21
    30c4:	47 95       	ror	r20
    30c6:	37 95       	ror	r19
    30c8:	27 95       	ror	r18
    30ca:	6a 95       	dec	r22
    30cc:	d1 f7       	brne	.-12     	; 0x30c2 <f_open+0x3ce>
    30ce:	f7 01       	movw	r30, r14
    30d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    30d2:	93 8d       	ldd	r25, Z+27	; 0x1b
    30d4:	a4 8d       	ldd	r26, Z+28	; 0x1c
    30d6:	b5 8d       	ldd	r27, Z+29	; 0x1d
    30d8:	82 17       	cp	r24, r18
    30da:	93 07       	cpc	r25, r19
    30dc:	a4 07       	cpc	r26, r20
    30de:	b5 07       	cpc	r27, r21
    30e0:	08 f4       	brcc	.+2      	; 0x30e4 <f_open+0x3f0>
    30e2:	a5 c0       	rjmp	.+330    	; 0x322e <f_open+0x53a>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    30e4:	8f ef       	ldi	r24, 0xFF	; 255
    30e6:	9f ef       	ldi	r25, 0xFF	; 255
    30e8:	af ef       	ldi	r26, 0xFF	; 255
    30ea:	bf ef       	ldi	r27, 0xFF	; 255
    30ec:	86 87       	std	Z+14, r24	; 0x0e
    30ee:	97 87       	std	Z+15, r25	; 0x0f
    30f0:	a0 8b       	std	Z+16, r26	; 0x10
    30f2:	b1 8b       	std	Z+17, r27	; 0x11
	fs->last_clust = 0;
    30f4:	d7 01       	movw	r26, r14
    30f6:	1a 96       	adiw	r26, 0x0a	; 10
    30f8:	1d 92       	st	X+, r1
    30fa:	1d 92       	st	X+, r1
    30fc:	1d 92       	st	X+, r1
    30fe:	1c 92       	st	X, r1
    3100:	1d 97       	sbiw	r26, 0x0d	; 13

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    3102:	13 30       	cpi	r17, 0x03	; 3
    3104:	09 f0       	breq	.+2      	; 0x3108 <f_open+0x414>
    3106:	78 c0       	rjmp	.+240    	; 0x31f8 <f_open+0x504>
	 	fs->fsi_flag = 0;
    3108:	15 96       	adiw	r26, 0x05	; 5
    310a:	1c 92       	st	X, r1
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    310c:	ee e5       	ldi	r30, 0x5E	; 94
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	ee 0e       	add	r14, r30
    3112:	ff 1e       	adc	r15, r31
    3114:	d7 01       	movw	r26, r14
    3116:	2d 91       	ld	r18, X+
    3118:	3c 91       	ld	r19, X
    311a:	e2 ea       	ldi	r30, 0xA2	; 162
    311c:	ff ef       	ldi	r31, 0xFF	; 255
    311e:	ee 0e       	add	r14, r30
    3120:	ff 1e       	adc	r15, r31
    3122:	40 e0       	ldi	r20, 0x00	; 0
    3124:	50 e0       	ldi	r21, 0x00	; 0
    3126:	8c a5       	ldd	r24, Y+44	; 0x2c
    3128:	9d a5       	ldd	r25, Y+45	; 0x2d
    312a:	ae a5       	ldd	r26, Y+46	; 0x2e
    312c:	bf a5       	ldd	r27, Y+47	; 0x2f
    312e:	28 0f       	add	r18, r24
    3130:	39 1f       	adc	r19, r25
    3132:	4a 1f       	adc	r20, r26
    3134:	5b 1f       	adc	r21, r27
    3136:	d7 01       	movw	r26, r14
    3138:	52 96       	adiw	r26, 0x12	; 18
    313a:	2d 93       	st	X+, r18
    313c:	3d 93       	st	X+, r19
    313e:	4d 93       	st	X+, r20
    3140:	5c 93       	st	X, r21
    3142:	55 97       	sbiw	r26, 0x15	; 21
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3144:	b7 01       	movw	r22, r14
    3146:	62 5d       	subi	r22, 0xD2	; 210
    3148:	7f 4f       	sbci	r23, 0xFF	; 255
    314a:	11 96       	adiw	r26, 0x01	; 1
    314c:	8c 91       	ld	r24, X
    314e:	01 e0       	ldi	r16, 0x01	; 1
    3150:	0e 94 86 0c 	call	0x190c	; 0x190c <disk_read>
    3154:	88 23       	and	r24, r24
    3156:	09 f0       	breq	.+2      	; 0x315a <f_open+0x466>
    3158:	4f c0       	rjmp	.+158    	; 0x31f8 <f_open+0x504>
    315a:	ec e2       	ldi	r30, 0x2C	; 44
    315c:	f2 e0       	ldi	r31, 0x02	; 2
    315e:	ee 0e       	add	r14, r30
    3160:	ff 1e       	adc	r15, r31
    3162:	d7 01       	movw	r26, r14
    3164:	8d 91       	ld	r24, X+
    3166:	9c 91       	ld	r25, X
    3168:	e4 ed       	ldi	r30, 0xD4	; 212
    316a:	fd ef       	ldi	r31, 0xFD	; 253
    316c:	ee 0e       	add	r14, r30
    316e:	ff 1e       	adc	r15, r31
    3170:	85 55       	subi	r24, 0x55	; 85
    3172:	9a 4a       	sbci	r25, 0xAA	; 170
    3174:	09 f0       	breq	.+2      	; 0x3178 <f_open+0x484>
    3176:	40 c0       	rjmp	.+128    	; 0x31f8 <f_open+0x504>
    3178:	f7 01       	movw	r30, r14
    317a:	86 a5       	ldd	r24, Z+46	; 0x2e
    317c:	97 a5       	ldd	r25, Z+47	; 0x2f
    317e:	a0 a9       	ldd	r26, Z+48	; 0x30
    3180:	b1 a9       	ldd	r27, Z+49	; 0x31
    3182:	82 55       	subi	r24, 0x52	; 82
    3184:	92 45       	sbci	r25, 0x52	; 82
    3186:	a1 46       	sbci	r26, 0x61	; 97
    3188:	b1 44       	sbci	r27, 0x41	; 65
    318a:	b1 f5       	brne	.+108    	; 0x31f8 <f_open+0x504>
    318c:	22 e1       	ldi	r18, 0x12	; 18
    318e:	32 e0       	ldi	r19, 0x02	; 2
    3190:	e2 0e       	add	r14, r18
    3192:	f3 1e       	adc	r15, r19
    3194:	f7 01       	movw	r30, r14
    3196:	80 81       	ld	r24, Z
    3198:	91 81       	ldd	r25, Z+1	; 0x01
    319a:	a2 81       	ldd	r26, Z+2	; 0x02
    319c:	b3 81       	ldd	r27, Z+3	; 0x03
    319e:	2e ee       	ldi	r18, 0xEE	; 238
    31a0:	3d ef       	ldi	r19, 0xFD	; 253
    31a2:	e2 0e       	add	r14, r18
    31a4:	f3 1e       	adc	r15, r19
    31a6:	82 57       	subi	r24, 0x72	; 114
    31a8:	92 47       	sbci	r25, 0x72	; 114
    31aa:	a1 44       	sbci	r26, 0x41	; 65
    31ac:	b1 46       	sbci	r27, 0x61	; 97
    31ae:	21 f5       	brne	.+72     	; 0x31f8 <f_open+0x504>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    31b0:	4a e1       	ldi	r20, 0x1A	; 26
    31b2:	52 e0       	ldi	r21, 0x02	; 2
    31b4:	e4 0e       	add	r14, r20
    31b6:	f5 1e       	adc	r15, r21
    31b8:	f7 01       	movw	r30, r14
    31ba:	80 81       	ld	r24, Z
    31bc:	91 81       	ldd	r25, Z+1	; 0x01
    31be:	a2 81       	ldd	r26, Z+2	; 0x02
    31c0:	b3 81       	ldd	r27, Z+3	; 0x03
    31c2:	26 ee       	ldi	r18, 0xE6	; 230
    31c4:	3d ef       	ldi	r19, 0xFD	; 253
    31c6:	e2 0e       	add	r14, r18
    31c8:	f3 1e       	adc	r15, r19
    31ca:	f7 01       	movw	r30, r14
    31cc:	82 87       	std	Z+10, r24	; 0x0a
    31ce:	93 87       	std	Z+11, r25	; 0x0b
    31d0:	a4 87       	std	Z+12, r26	; 0x0c
    31d2:	b5 87       	std	Z+13, r27	; 0x0d
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    31d4:	26 e1       	ldi	r18, 0x16	; 22
    31d6:	32 e0       	ldi	r19, 0x02	; 2
    31d8:	e2 0e       	add	r14, r18
    31da:	f3 1e       	adc	r15, r19
    31dc:	f7 01       	movw	r30, r14
    31de:	80 81       	ld	r24, Z
    31e0:	91 81       	ldd	r25, Z+1	; 0x01
    31e2:	a2 81       	ldd	r26, Z+2	; 0x02
    31e4:	b3 81       	ldd	r27, Z+3	; 0x03
    31e6:	2a ee       	ldi	r18, 0xEA	; 234
    31e8:	3d ef       	ldi	r19, 0xFD	; 253
    31ea:	e2 0e       	add	r14, r18
    31ec:	f3 1e       	adc	r15, r19
    31ee:	f7 01       	movw	r30, r14
    31f0:	86 87       	std	Z+14, r24	; 0x0e
    31f2:	97 87       	std	Z+15, r25	; 0x0f
    31f4:	a0 8b       	std	Z+16, r26	; 0x10
    31f6:	b1 8b       	std	Z+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    31f8:	d7 01       	movw	r26, r14
    31fa:	1c 93       	st	X, r17
	fs->id = ++Fsid;		/* File system mount ID */
    31fc:	80 91 c8 01 	lds	r24, 0x01C8
    3200:	90 91 c9 01 	lds	r25, 0x01C9
    3204:	01 96       	adiw	r24, 0x01	; 1
    3206:	90 93 c9 01 	sts	0x01C9, r25
    320a:	80 93 c8 01 	sts	0x01C8, r24
    320e:	17 96       	adiw	r26, 0x07	; 7
    3210:	9c 93       	st	X, r25
    3212:	8e 93       	st	-X, r24
    3214:	16 97       	sbiw	r26, 0x06	; 6
	fs->winsect = 0;		/* Invalidate sector cache */
    3216:	f7 01       	movw	r30, r14
    3218:	12 a6       	std	Z+42, r1	; 0x2a
    321a:	13 a6       	std	Z+43, r1	; 0x2b
    321c:	14 a6       	std	Z+44, r1	; 0x2c
    321e:	15 a6       	std	Z+45, r1	; 0x2d
	fs->wflag = 0;
    3220:	14 82       	std	Z+4, r1	; 0x04
    3222:	03 c0       	rjmp	.+6      	; 0x322a <f_open+0x536>
    3224:	5a e0       	ldi	r21, 0x0A	; 10
    3226:	b5 2e       	mov	r11, r21
    3228:	04 c0       	rjmp	.+8      	; 0x3232 <f_open+0x53e>
    322a:	bb 24       	eor	r11, r11
    322c:	02 c0       	rjmp	.+4      	; 0x3232 <f_open+0x53e>
    322e:	4d e0       	ldi	r20, 0x0D	; 13
    3230:	b4 2e       	mov	r11, r20
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    3232:	ce 01       	movw	r24, r28
    3234:	01 96       	adiw	r24, 0x01	; 1
    3236:	9a a3       	std	Y+34, r25	; 0x22
    3238:	89 a3       	std	Y+33, r24	; 0x21
	if (res == FR_OK)
    323a:	bb 20       	and	r11, r11
    323c:	09 f0       	breq	.+2      	; 0x3240 <f_open+0x54c>
    323e:	30 c1       	rjmp	.+608    	; 0x34a0 <f_open+0x7ac>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    3240:	ac a9       	ldd	r26, Y+52	; 0x34
    3242:	bd a9       	ldd	r27, Y+53	; 0x35
    3244:	8c 91       	ld	r24, X
    3246:	8f 32       	cpi	r24, 0x2F	; 47
    3248:	11 f0       	breq	.+4      	; 0x324e <f_open+0x55a>
    324a:	8c 35       	cpi	r24, 0x5C	; 92
    324c:	29 f4       	brne	.+10     	; 0x3258 <f_open+0x564>
		path++;
    324e:	ec a9       	ldd	r30, Y+52	; 0x34
    3250:	fd a9       	ldd	r31, Y+53	; 0x35
    3252:	31 96       	adiw	r30, 0x01	; 1
    3254:	fd ab       	std	Y+53, r31	; 0x35
    3256:	ec ab       	std	Y+52, r30	; 0x34
	dj->sclust = 0;						/* Start from the root dir */
    3258:	1b 8a       	std	Y+19, r1	; 0x13
    325a:	1c 8a       	std	Y+20, r1	; 0x14
    325c:	1d 8a       	std	Y+21, r1	; 0x15
    325e:	1e 8a       	std	Y+22, r1	; 0x16
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    3260:	ac a9       	ldd	r26, Y+52	; 0x34
    3262:	bd a9       	ldd	r27, Y+53	; 0x35
    3264:	8c 91       	ld	r24, X
    3266:	80 32       	cpi	r24, 0x20	; 32
    3268:	48 f4       	brcc	.+18     	; 0x327c <f_open+0x588>
		res = dir_sdi(dj, 0);
    326a:	ce 01       	movw	r24, r28
    326c:	0d 96       	adiw	r24, 0x0d	; 13
    326e:	60 e0       	ldi	r22, 0x00	; 0
    3270:	70 e0       	ldi	r23, 0x00	; 0
    3272:	ca d8       	rcall	.-3692   	; 0x2408 <dir_sdi>
    3274:	b8 2e       	mov	r11, r24
		dj->dir = 0;
    3276:	18 a2       	std	Y+32, r1	; 0x20
    3278:	1f 8e       	std	Y+31, r1	; 0x1f
    327a:	12 c1       	rjmp	.+548    	; 0x34a0 <f_open+0x7ac>
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    327c:	35 e0       	ldi	r19, 0x05	; 5
    327e:	93 2e       	mov	r9, r19
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    3280:	2d e0       	ldi	r18, 0x0D	; 13
    3282:	a2 2e       	mov	r10, r18
    3284:	b1 2c       	mov	r11, r1
    3286:	ac 0e       	add	r10, r28
    3288:	bd 1e       	adc	r11, r29
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    328a:	09 a1       	ldd	r16, Y+33	; 0x21
    328c:	1a a1       	ldd	r17, Y+34	; 0x22
	mem_set(sfn, ' ', 11);
    328e:	c8 01       	movw	r24, r16
    3290:	60 e2       	ldi	r22, 0x20	; 32
    3292:	70 e0       	ldi	r23, 0x00	; 0
    3294:	4b e0       	ldi	r20, 0x0B	; 11
    3296:	50 e0       	ldi	r21, 0x00	; 0
    3298:	0e 94 c5 0c 	call	0x198a	; 0x198a <mem_set>
    329c:	a0 e0       	ldi	r26, 0x00	; 0
    329e:	40 e0       	ldi	r20, 0x00	; 0
    32a0:	50 e0       	ldi	r21, 0x00	; 0
    32a2:	ee 24       	eor	r14, r14
    32a4:	ff 24       	eor	r15, r15
    32a6:	98 e0       	ldi	r25, 0x08	; 8
    32a8:	c9 2e       	mov	r12, r25
    32aa:	d1 2c       	mov	r13, r1
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    32ac:	ec a9       	ldd	r30, Y+52	; 0x34
    32ae:	fd a9       	ldd	r31, Y+53	; 0x35
    32b0:	ee 0d       	add	r30, r14
    32b2:	ff 1d       	adc	r31, r15
    32b4:	20 81       	ld	r18, Z
    32b6:	08 94       	sec
    32b8:	e1 1c       	adc	r14, r1
    32ba:	f1 1c       	adc	r15, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    32bc:	21 32       	cpi	r18, 0x21	; 33
    32be:	08 f4       	brcc	.+2      	; 0x32c2 <f_open+0x5ce>
    32c0:	67 c0       	rjmp	.+206    	; 0x3390 <f_open+0x69c>
    32c2:	2f 32       	cpi	r18, 0x2F	; 47
    32c4:	09 f4       	brne	.+2      	; 0x32c8 <f_open+0x5d4>
    32c6:	af c2       	rjmp	.+1374   	; 0x3826 <f_open+0xb32>
    32c8:	2c 35       	cpi	r18, 0x5C	; 92
    32ca:	09 f4       	brne	.+2      	; 0x32ce <f_open+0x5da>
    32cc:	ac c2       	rjmp	.+1368   	; 0x3826 <f_open+0xb32>
		if (c == '.' || i >= ni) {
    32ce:	2e 32       	cpi	r18, 0x2E	; 46
    32d0:	19 f0       	breq	.+6      	; 0x32d8 <f_open+0x5e4>
    32d2:	4c 15       	cp	r20, r12
    32d4:	5d 05       	cpc	r21, r13
    32d6:	84 f0       	brlt	.+32     	; 0x32f8 <f_open+0x604>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    32d8:	b8 e0       	ldi	r27, 0x08	; 8
    32da:	cb 16       	cp	r12, r27
    32dc:	d1 04       	cpc	r13, r1
    32de:	09 f0       	breq	.+2      	; 0x32e2 <f_open+0x5ee>
    32e0:	d8 c0       	rjmp	.+432    	; 0x3492 <f_open+0x79e>
    32e2:	2e 32       	cpi	r18, 0x2E	; 46
    32e4:	09 f0       	breq	.+2      	; 0x32e8 <f_open+0x5f4>
    32e6:	d5 c0       	rjmp	.+426    	; 0x3492 <f_open+0x79e>
			i = 8; ni = 11;
			b <<= 2; continue;
    32e8:	aa 0f       	add	r26, r26
    32ea:	aa 0f       	add	r26, r26
    32ec:	48 e0       	ldi	r20, 0x08	; 8
    32ee:	50 e0       	ldi	r21, 0x00	; 0
    32f0:	8b e0       	ldi	r24, 0x0B	; 11
    32f2:	c8 2e       	mov	r12, r24
    32f4:	d1 2c       	mov	r13, r1
    32f6:	da cf       	rjmp	.-76     	; 0x32ac <f_open+0x5b8>
		}
		if (c >= 0x80) {				/* Extended char */
    32f8:	27 fd       	sbrc	r18, 7
#ifdef _EXCVT
			c = excvt[c - 0x80];		/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if extended char is exist */
    32fa:	a3 60       	ori	r26, 0x03	; 3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
    32fc:	82 2f       	mov	r24, r18
    32fe:	81 58       	subi	r24, 0x81	; 129
    3300:	8f 31       	cpi	r24, 0x1F	; 31
    3302:	18 f0       	brcs	.+6      	; 0x330a <f_open+0x616>
    3304:	8f 55       	subi	r24, 0x5F	; 95
    3306:	8d 31       	cpi	r24, 0x1D	; 29
    3308:	10 f5       	brcc	.+68     	; 0x334e <f_open+0x65a>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    330a:	ec a9       	ldd	r30, Y+52	; 0x34
    330c:	fd a9       	ldd	r31, Y+53	; 0x35
    330e:	ee 0d       	add	r30, r14
    3310:	ff 1d       	adc	r31, r15
    3312:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    3314:	83 2f       	mov	r24, r19
    3316:	80 54       	subi	r24, 0x40	; 64
    3318:	8f 33       	cpi	r24, 0x3F	; 63
    331a:	20 f0       	brcs	.+8      	; 0x3324 <f_open+0x630>
    331c:	80 54       	subi	r24, 0x40	; 64
    331e:	8d 37       	cpi	r24, 0x7D	; 125
    3320:	08 f0       	brcs	.+2      	; 0x3324 <f_open+0x630>
    3322:	b7 c0       	rjmp	.+366    	; 0x3492 <f_open+0x79e>
    3324:	c6 01       	movw	r24, r12
    3326:	01 97       	sbiw	r24, 0x01	; 1
    3328:	48 17       	cp	r20, r24
    332a:	59 07       	cpc	r21, r25
    332c:	0c f0       	brlt	.+2      	; 0x3330 <f_open+0x63c>
    332e:	b1 c0       	rjmp	.+354    	; 0x3492 <f_open+0x79e>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    3330:	08 94       	sec
    3332:	e1 1c       	adc	r14, r1
    3334:	f1 1c       	adc	r15, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    3336:	f8 01       	movw	r30, r16
    3338:	e4 0f       	add	r30, r20
    333a:	f5 1f       	adc	r31, r21
    333c:	20 83       	st	Z, r18
    333e:	ca 01       	movw	r24, r20
    3340:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    3342:	f8 01       	movw	r30, r16
    3344:	e8 0f       	add	r30, r24
    3346:	f9 1f       	adc	r31, r25
    3348:	30 83       	st	Z, r19
    334a:	ac 01       	movw	r20, r24
    334c:	1e c0       	rjmp	.+60     	; 0x338a <f_open+0x696>
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    334e:	62 2f       	mov	r22, r18
    3350:	70 e0       	ldi	r23, 0x00	; 0
    3352:	ea eb       	ldi	r30, 0xBA	; 186
    3354:	f1 e0       	ldi	r31, 0x01	; 1
    3356:	01 c0       	rjmp	.+2      	; 0x335a <f_open+0x666>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    3358:	31 96       	adiw	r30, 0x01	; 1
    335a:	80 81       	ld	r24, Z
    335c:	88 23       	and	r24, r24
    335e:	29 f0       	breq	.+10     	; 0x336a <f_open+0x676>
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	86 17       	cp	r24, r22
    3364:	97 07       	cpc	r25, r23
    3366:	c1 f7       	brne	.-16     	; 0x3358 <f_open+0x664>
    3368:	94 c0       	rjmp	.+296    	; 0x3492 <f_open+0x79e>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    336a:	82 2f       	mov	r24, r18
    336c:	81 54       	subi	r24, 0x41	; 65
    336e:	8a 31       	cpi	r24, 0x1A	; 26
    3370:	10 f4       	brcc	.+4      	; 0x3376 <f_open+0x682>
				b |= 2;
    3372:	a2 60       	ori	r26, 0x02	; 2
    3374:	06 c0       	rjmp	.+12     	; 0x3382 <f_open+0x68e>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    3376:	82 2f       	mov	r24, r18
    3378:	81 56       	subi	r24, 0x61	; 97
    337a:	8a 31       	cpi	r24, 0x1A	; 26
    337c:	10 f4       	brcc	.+4      	; 0x3382 <f_open+0x68e>
					b |= 1; c -= 0x20;
    337e:	a1 60       	ori	r26, 0x01	; 1
    3380:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    3382:	f8 01       	movw	r30, r16
    3384:	e4 0f       	add	r30, r20
    3386:	f5 1f       	adc	r31, r21
    3388:	20 83       	st	Z, r18
    338a:	4f 5f       	subi	r20, 0xFF	; 255
    338c:	5f 4f       	sbci	r21, 0xFF	; 255
    338e:	8e cf       	rjmp	.-228    	; 0x32ac <f_open+0x5b8>
    3390:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    3392:	45 2b       	or	r20, r21
    3394:	09 f4       	brne	.+2      	; 0x3398 <f_open+0x6a4>
    3396:	7d c0       	rjmp	.+250    	; 0x3492 <f_open+0x79e>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    3398:	f8 01       	movw	r30, r16
    339a:	80 81       	ld	r24, Z
    339c:	85 3e       	cpi	r24, 0xE5	; 229
    339e:	09 f4       	brne	.+2      	; 0x33a2 <f_open+0x6ae>
    33a0:	90 82       	st	Z, r9

	if (ni == 8) b <<= 2;
    33a2:	f8 e0       	ldi	r31, 0x08	; 8
    33a4:	cf 16       	cp	r12, r31
    33a6:	d1 04       	cpc	r13, r1
    33a8:	11 f4       	brne	.+4      	; 0x33ae <f_open+0x6ba>
    33aa:	aa 0f       	add	r26, r26
    33ac:	aa 0f       	add	r26, r26
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    33ae:	2a 2f       	mov	r18, r26
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	c9 01       	movw	r24, r18
    33b4:	83 70       	andi	r24, 0x03	; 3
    33b6:	90 70       	andi	r25, 0x00	; 0
    33b8:	01 97       	sbiw	r24, 0x01	; 1
    33ba:	09 f4       	brne	.+2      	; 0x33be <f_open+0x6ca>
    33bc:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    33be:	2c 70       	andi	r18, 0x0C	; 12
    33c0:	30 70       	andi	r19, 0x00	; 0
    33c2:	24 30       	cpi	r18, 0x04	; 4
    33c4:	31 05       	cpc	r19, r1
    33c6:	09 f4       	brne	.+2      	; 0x33ca <f_open+0x6d6>
    33c8:	68 60       	ori	r22, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    33ca:	d8 01       	movw	r26, r16
    33cc:	1b 96       	adiw	r26, 0x0b	; 11
    33ce:	6c 93       	st	X, r22
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    33d0:	c5 01       	movw	r24, r10
    33d2:	60 e0       	ldi	r22, 0x00	; 0
    33d4:	70 e0       	ldi	r23, 0x00	; 0
    33d6:	18 d8       	rcall	.-4048   	; 0x2408 <dir_sdi>
    33d8:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    33da:	88 23       	and	r24, r24
    33dc:	69 f5       	brne	.+90     	; 0x3438 <f_open+0x744>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    33de:	4b 8d       	ldd	r20, Y+27	; 0x1b
    33e0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    33e2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    33e4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    33e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ea:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <move_window>
    33ee:	48 2f       	mov	r20, r24
		if (res != FR_OK) break;
    33f0:	88 23       	and	r24, r24
    33f2:	11 f5       	brne	.+68     	; 0x3438 <f_open+0x744>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    33f4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    33f6:	f8 a1       	ldd	r31, Y+32	; 0x20
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    33f8:	80 81       	ld	r24, Z
    33fa:	88 23       	and	r24, r24
    33fc:	11 f4       	brne	.+4      	; 0x3402 <f_open+0x70e>
    33fe:	44 e0       	ldi	r20, 0x04	; 4
    3400:	1b c0       	rjmp	.+54     	; 0x3438 <f_open+0x744>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    3402:	83 85       	ldd	r24, Z+11	; 0x0b
    3404:	83 fd       	sbrc	r24, 3
    3406:	13 c0       	rjmp	.+38     	; 0x342e <f_open+0x73a>
    3408:	89 a1       	ldd	r24, Y+33	; 0x21
    340a:	9a a1       	ldd	r25, Y+34	; 0x22
    340c:	9c 01       	movw	r18, r24
    340e:	d9 01       	movw	r26, r18
    3410:	2b e0       	ldi	r18, 0x0B	; 11
    3412:	30 e0       	ldi	r19, 0x00	; 0
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    3414:	21 50       	subi	r18, 0x01	; 1
    3416:	30 40       	sbci	r19, 0x00	; 0
    3418:	5f ef       	ldi	r21, 0xFF	; 255
    341a:	2f 3f       	cpi	r18, 0xFF	; 255
    341c:	35 07       	cpc	r19, r21
    341e:	61 f0       	breq	.+24     	; 0x3438 <f_open+0x744>
    3420:	90 81       	ld	r25, Z
    3422:	8c 91       	ld	r24, X
    3424:	98 17       	cp	r25, r24
    3426:	19 f4       	brne	.+6      	; 0x342e <f_open+0x73a>
    3428:	31 96       	adiw	r30, 0x01	; 1
    342a:	11 96       	adiw	r26, 0x01	; 1
    342c:	f3 cf       	rjmp	.-26     	; 0x3414 <f_open+0x720>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    342e:	c5 01       	movw	r24, r10
    3430:	60 e0       	ldi	r22, 0x00	; 0
    3432:	70 e0       	ldi	r23, 0x00	; 0
    3434:	4c da       	rcall	.-2920   	; 0x28ce <dir_next>
    3436:	d0 cf       	rjmp	.-96     	; 0x33d8 <f_open+0x6e4>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    3438:	e9 a1       	ldd	r30, Y+33	; 0x21
    343a:	fa a1       	ldd	r31, Y+34	; 0x22
    343c:	83 85       	ldd	r24, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
    343e:	44 23       	and	r20, r20
    3440:	39 f0       	breq	.+14     	; 0x3450 <f_open+0x75c>
    3442:	b4 2e       	mov	r11, r20
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
    3444:	94 e0       	ldi	r25, 0x04	; 4
    3446:	49 17       	cp	r20, r25
    3448:	39 f5       	brne	.+78     	; 0x3498 <f_open+0x7a4>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    344a:	82 ff       	sbrs	r24, 2
    344c:	27 c0       	rjmp	.+78     	; 0x349c <f_open+0x7a8>
    344e:	28 c0       	rjmp	.+80     	; 0x34a0 <f_open+0x7ac>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    3450:	82 fd       	sbrc	r24, 2
    3452:	22 c0       	rjmp	.+68     	; 0x3498 <f_open+0x7a4>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    3454:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3456:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    3458:	83 85       	ldd	r24, Z+11	; 0x0b
    345a:	84 ff       	sbrs	r24, 4
    345c:	1f c0       	rjmp	.+62     	; 0x349c <f_open+0x7a8>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    345e:	ac a9       	ldd	r26, Y+52	; 0x34
    3460:	bd a9       	ldd	r27, Y+53	; 0x35
    3462:	ae 0d       	add	r26, r14
    3464:	bf 1d       	adc	r27, r15
    3466:	bd ab       	std	Y+53, r27	; 0x35
    3468:	ac ab       	std	Y+52, r26	; 0x34
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    346a:	84 89       	ldd	r24, Z+20	; 0x14
    346c:	95 89       	ldd	r25, Z+21	; 0x15
    346e:	a0 e0       	ldi	r26, 0x00	; 0
    3470:	b0 e0       	ldi	r27, 0x00	; 0
    3472:	dc 01       	movw	r26, r24
    3474:	99 27       	eor	r25, r25
    3476:	88 27       	eor	r24, r24
    3478:	22 8d       	ldd	r18, Z+26	; 0x1a
    347a:	33 8d       	ldd	r19, Z+27	; 0x1b
    347c:	40 e0       	ldi	r20, 0x00	; 0
    347e:	50 e0       	ldi	r21, 0x00	; 0
    3480:	82 2b       	or	r24, r18
    3482:	93 2b       	or	r25, r19
    3484:	a4 2b       	or	r26, r20
    3486:	b5 2b       	or	r27, r21
    3488:	8b 8b       	std	Y+19, r24	; 0x13
    348a:	9c 8b       	std	Y+20, r25	; 0x14
    348c:	ad 8b       	std	Y+21, r26	; 0x15
    348e:	be 8b       	std	Y+22, r27	; 0x16
    3490:	fc ce       	rjmp	.-520    	; 0x328a <f_open+0x596>
    3492:	b6 e0       	ldi	r27, 0x06	; 6
    3494:	bb 2e       	mov	r11, r27
    3496:	04 c0       	rjmp	.+8      	; 0x34a0 <f_open+0x7ac>
    3498:	b4 2e       	mov	r11, r20
    349a:	02 c0       	rjmp	.+4      	; 0x34a0 <f_open+0x7ac>
    349c:	a5 e0       	ldi	r26, 0x05	; 5
    349e:	ba 2e       	mov	r11, r26
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
	if (res == FR_OK)
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    34a0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    34a2:	f8 a1       	ldd	r31, Y+32	; 0x20
    34a4:	f9 ab       	std	Y+49, r31	; 0x31
    34a6:	e8 ab       	std	Y+48, r30	; 0x30

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    34a8:	bb 20       	and	r11, r11
    34aa:	21 f4       	brne	.+8      	; 0x34b4 <f_open+0x7c0>
		if (!dir)	/* Current dir itself */
    34ac:	ef 2b       	or	r30, r31
    34ae:	11 f4       	brne	.+4      	; 0x34b4 <f_open+0x7c0>
    34b0:	f6 e0       	ldi	r31, 0x06	; 6
    34b2:	bf 2e       	mov	r11, r31
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    34b4:	fb a5       	ldd	r31, Y+43	; 0x2b
    34b6:	2f 2f       	mov	r18, r31
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	c9 01       	movw	r24, r18
    34bc:	8c 71       	andi	r24, 0x1C	; 28
    34be:	90 70       	andi	r25, 0x00	; 0
    34c0:	89 2b       	or	r24, r25
    34c2:	09 f4       	brne	.+2      	; 0x34c6 <f_open+0x7d2>
    34c4:	01 c1       	rjmp	.+514    	; 0x36c8 <f_open+0x9d4>
		DWORD dw, cl;

		if (res != FR_OK) {				/* No file, create new */
    34c6:	bb 20       	and	r11, r11
    34c8:	09 f4       	brne	.+2      	; 0x34cc <f_open+0x7d8>
    34ca:	49 c0       	rjmp	.+146    	; 0x355e <f_open+0x86a>
			if (res == FR_NO_FILE)		/* There is no file to open, create a new entry */
    34cc:	24 e0       	ldi	r18, 0x04	; 4
    34ce:	b2 16       	cp	r11, r18
    34d0:	d9 f5       	brne	.+118    	; 0x3548 <f_open+0x854>
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    34d2:	8e 01       	movw	r16, r28
    34d4:	03 5f       	subi	r16, 0xF3	; 243
    34d6:	1f 4f       	sbci	r17, 0xFF	; 255
    34d8:	c8 01       	movw	r24, r16
    34da:	60 e0       	ldi	r22, 0x00	; 0
    34dc:	70 e0       	ldi	r23, 0x00	; 0
    34de:	0e 94 04 12 	call	0x2408	; 0x2408 <dir_sdi>
    34e2:	b8 2e       	mov	r11, r24
	if (res == FR_OK) {
    34e4:	88 23       	and	r24, r24
    34e6:	81 f5       	brne	.+96     	; 0x3548 <f_open+0x854>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    34e8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    34ea:	5c 8d       	ldd	r21, Y+28	; 0x1c
    34ec:	6d 8d       	ldd	r22, Y+29	; 0x1d
    34ee:	7e 8d       	ldd	r23, Y+30	; 0x1e
    34f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    34f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    34f4:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <move_window>
    34f8:	b8 2e       	mov	r11, r24
			if (res != FR_OK) break;
    34fa:	88 23       	and	r24, r24
    34fc:	29 f5       	brne	.+74     	; 0x3548 <f_open+0x854>
			c = *dj->dir;
    34fe:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3500:	f8 a1       	ldd	r31, Y+32	; 0x20
    3502:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    3504:	e5 3e       	cpi	r30, 0xE5	; 229
    3506:	09 f4       	brne	.+2      	; 0x350a <f_open+0x816>
    3508:	69 c1       	rjmp	.+722    	; 0x37dc <f_open+0xae8>
    350a:	ee 23       	and	r30, r30
    350c:	09 f4       	brne	.+2      	; 0x3510 <f_open+0x81c>
    350e:	66 c1       	rjmp	.+716    	; 0x37dc <f_open+0xae8>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    3510:	c8 01       	movw	r24, r16
    3512:	61 e0       	ldi	r22, 0x01	; 1
    3514:	70 e0       	ldi	r23, 0x00	; 0
    3516:	db d9       	rcall	.-3146   	; 0x28ce <dir_next>
    3518:	b8 2e       	mov	r11, r24
		} while (res == FR_OK);
    351a:	88 23       	and	r24, r24
    351c:	29 f3       	breq	.-54     	; 0x34e8 <f_open+0x7f4>
    351e:	14 c0       	rjmp	.+40     	; 0x3548 <f_open+0x854>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    3520:	0f 8d       	ldd	r16, Y+31	; 0x1f
    3522:	18 a1       	ldd	r17, Y+32	; 0x20
			mem_set(dir, 0, 32);		/* Clean the entry */
    3524:	c8 01       	movw	r24, r16
    3526:	60 e0       	ldi	r22, 0x00	; 0
    3528:	70 e0       	ldi	r23, 0x00	; 0
    352a:	40 e2       	ldi	r20, 0x20	; 32
    352c:	50 e0       	ldi	r21, 0x00	; 0
    352e:	0e 94 c5 0c 	call	0x198a	; 0x198a <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    3532:	69 a1       	ldd	r22, Y+33	; 0x21
    3534:	7a a1       	ldd	r23, Y+34	; 0x22
    3536:	c8 01       	movw	r24, r16
    3538:	4b e0       	ldi	r20, 0x0B	; 11
    353a:	50 e0       	ldi	r21, 0x00	; 0
    353c:	0e 94 91 0c 	call	0x1922	; 0x1922 <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
    3540:	ed 85       	ldd	r30, Y+13	; 0x0d
    3542:	fe 85       	ldd	r31, Y+14	; 0x0e
    3544:	81 e0       	ldi	r24, 0x01	; 1
    3546:	84 83       	std	Z+4, r24	; 0x04
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;
			dir = dj.dir;				/* New entry */
    3548:	4f 8d       	ldd	r20, Y+31	; 0x1f
    354a:	58 a1       	ldd	r21, Y+32	; 0x20
    354c:	59 ab       	std	Y+49, r21	; 0x31
    354e:	48 ab       	std	Y+48, r20	; 0x30
			} else {
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR))	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    3550:	bb 20       	and	r11, r11
    3552:	09 f0       	breq	.+2      	; 0x3556 <f_open+0x862>
    3554:	26 c1       	rjmp	.+588    	; 0x37a2 <f_open+0xaae>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;
    3556:	5b a5       	ldd	r21, Y+43	; 0x2b
    3558:	58 60       	ori	r21, 0x08	; 8
    355a:	5b a7       	std	Y+43, r21	; 0x2b
    355c:	0c c0       	rjmp	.+24     	; 0x3576 <f_open+0x882>
			dir = dj.dir;				/* New entry */
		}
		else {							/* Any object is already existing */
			if (mode & FA_CREATE_NEW) {			/* Cannot create new */
    355e:	f2 ff       	sbrs	r31, 2
    3560:	03 c0       	rjmp	.+6      	; 0x3568 <f_open+0x874>
    3562:	e8 e0       	ldi	r30, 0x08	; 8
    3564:	be 2e       	mov	r11, r30
    3566:	1d c1       	rjmp	.+570    	; 0x37a2 <f_open+0xaae>
				res = FR_EXIST;
			} else {
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR))	/* Cannot overwrite it (R/O or DIR) */
    3568:	a8 a9       	ldd	r26, Y+48	; 0x30
    356a:	b9 a9       	ldd	r27, Y+49	; 0x31
    356c:	1b 96       	adiw	r26, 0x0b	; 11
    356e:	8c 91       	ld	r24, X
    3570:	81 71       	andi	r24, 0x11	; 17
    3572:	09 f0       	breq	.+2      	; 0x3576 <f_open+0x882>
    3574:	30 c1       	rjmp	.+608    	; 0x37d6 <f_open+0xae2>
					res = FR_DENIED;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    3576:	bb a5       	ldd	r27, Y+43	; 0x2b
    3578:	b3 ff       	sbrs	r27, 3
    357a:	b6 c0       	rjmp	.+364    	; 0x36e8 <f_open+0x9f4>
			dw = get_fattime();						/* Created time */
    357c:	0e 94 07 0c 	call	0x180e	; 0x180e <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, dw);
    3580:	e8 a9       	ldd	r30, Y+48	; 0x30
    3582:	f9 a9       	ldd	r31, Y+49	; 0x31
    3584:	66 87       	std	Z+14, r22	; 0x0e
    3586:	77 87       	std	Z+15, r23	; 0x0f
    3588:	80 8b       	std	Z+16, r24	; 0x10
    358a:	91 8b       	std	Z+17, r25	; 0x11
			dir[DIR_Attr] = 0;					/* Reset attribute */
    358c:	13 86       	std	Z+11, r1	; 0x0b
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    358e:	a8 a9       	ldd	r26, Y+48	; 0x30
    3590:	b9 a9       	ldd	r27, Y+49	; 0x31
    3592:	5c 96       	adiw	r26, 0x1c	; 28
    3594:	1d 92       	st	X+, r1
    3596:	1d 92       	st	X+, r1
    3598:	1d 92       	st	X+, r1
    359a:	1c 92       	st	X, r1
    359c:	5f 97       	sbiw	r26, 0x1f	; 31
			cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    359e:	54 96       	adiw	r26, 0x14	; 20
    35a0:	8d 91       	ld	r24, X+
    35a2:	9c 91       	ld	r25, X
    35a4:	55 97       	sbiw	r26, 0x15	; 21
    35a6:	a0 e0       	ldi	r26, 0x00	; 0
    35a8:	b0 e0       	ldi	r27, 0x00	; 0
    35aa:	7c 01       	movw	r14, r24
    35ac:	dd 24       	eor	r13, r13
    35ae:	cc 24       	eor	r12, r12
    35b0:	e8 a9       	ldd	r30, Y+48	; 0x30
    35b2:	f9 a9       	ldd	r31, Y+49	; 0x31
    35b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    35b6:	93 8d       	ldd	r25, Z+27	; 0x1b
    35b8:	a0 e0       	ldi	r26, 0x00	; 0
    35ba:	b0 e0       	ldi	r27, 0x00	; 0
    35bc:	c8 2a       	or	r12, r24
    35be:	d9 2a       	or	r13, r25
    35c0:	ea 2a       	or	r14, r26
    35c2:	fb 2a       	or	r15, r27
			ST_WORD(dir+DIR_FstClusHI, 0);		/* cluster = 0 */
    35c4:	15 8a       	std	Z+21, r1	; 0x15
    35c6:	14 8a       	std	Z+20, r1	; 0x14
			ST_WORD(dir+DIR_FstClusLO, 0);
    35c8:	13 8e       	std	Z+27, r1	; 0x1b
    35ca:	12 8e       	std	Z+26, r1	; 0x1a
			dj.fs->wflag = 1;
    35cc:	ed 85       	ldd	r30, Y+13	; 0x0d
    35ce:	fe 85       	ldd	r31, Y+14	; 0x0e
    35d0:	81 e0       	ldi	r24, 0x01	; 1
    35d2:	84 83       	std	Z+4, r24	; 0x04
			if (cl) {							/* Remove the cluster chain if exist */
    35d4:	c1 14       	cp	r12, r1
    35d6:	d1 04       	cpc	r13, r1
    35d8:	e1 04       	cpc	r14, r1
    35da:	f1 04       	cpc	r15, r1
    35dc:	09 f4       	brne	.+2      	; 0x35e0 <f_open+0x8ec>
    35de:	84 c0       	rjmp	.+264    	; 0x36e8 <f_open+0x9f4>
				dw = dj.fs->winsect;
    35e0:	2d 84       	ldd	r2, Y+13	; 0x0d
    35e2:	3e 84       	ldd	r3, Y+14	; 0x0e
    35e4:	d1 01       	movw	r26, r2
    35e6:	9a 96       	adiw	r26, 0x2a	; 42
    35e8:	2d 91       	ld	r18, X+
    35ea:	3d 91       	ld	r19, X+
    35ec:	4d 91       	ld	r20, X+
    35ee:	5c 91       	ld	r21, X
    35f0:	9d 97       	sbiw	r26, 0x2d	; 45
    35f2:	2f a3       	std	Y+39, r18	; 0x27
    35f4:	38 a7       	std	Y+40, r19	; 0x28
    35f6:	49 a7       	std	Y+41, r20	; 0x29
    35f8:	5a a7       	std	Y+42, r21	; 0x2a
{
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    35fa:	b1 e0       	ldi	r27, 0x01	; 1
    35fc:	cb 16       	cp	r12, r27
    35fe:	d1 04       	cpc	r13, r1
    3600:	e1 04       	cpc	r14, r1
    3602:	f1 04       	cpc	r15, r1
    3604:	09 f4       	brne	.+2      	; 0x3608 <f_open+0x914>
    3606:	5d c0       	rjmp	.+186    	; 0x36c2 <f_open+0x9ce>
    3608:	f1 01       	movw	r30, r2
    360a:	86 89       	ldd	r24, Z+22	; 0x16
    360c:	97 89       	ldd	r25, Z+23	; 0x17
    360e:	a0 8d       	ldd	r26, Z+24	; 0x18
    3610:	b1 8d       	ldd	r27, Z+25	; 0x19
    3612:	c8 16       	cp	r12, r24
    3614:	d9 06       	cpc	r13, r25
    3616:	ea 06       	cpc	r14, r26
    3618:	fb 06       	cpc	r15, r27
    361a:	08 f0       	brcs	.+2      	; 0x361e <f_open+0x92a>
    361c:	52 c0       	rjmp	.+164    	; 0x36c2 <f_open+0x9ce>
    361e:	46 01       	movw	r8, r12
    3620:	57 01       	movw	r10, r14
    3622:	43 c0       	rjmp	.+134    	; 0x36aa <f_open+0x9b6>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    3624:	c1 01       	movw	r24, r2
    3626:	b5 01       	movw	r22, r10
    3628:	a4 01       	movw	r20, r8
    362a:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <get_fat>
    362e:	2b 01       	movw	r4, r22
    3630:	3c 01       	movw	r6, r24
			if (nxt == 0) break;				/* Empty cluster? */
    3632:	61 15       	cp	r22, r1
    3634:	71 05       	cpc	r23, r1
    3636:	81 05       	cpc	r24, r1
    3638:	91 05       	cpc	r25, r1
    363a:	09 f4       	brne	.+2      	; 0x363e <f_open+0x94a>
    363c:	dc c0       	rjmp	.+440    	; 0x37f6 <f_open+0xb02>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    363e:	61 30       	cpi	r22, 0x01	; 1
    3640:	71 05       	cpc	r23, r1
    3642:	81 05       	cpc	r24, r1
    3644:	91 05       	cpc	r25, r1
    3646:	e9 f1       	breq	.+122    	; 0x36c2 <f_open+0x9ce>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    3648:	6f 3f       	cpi	r22, 0xFF	; 255
    364a:	2f ef       	ldi	r18, 0xFF	; 255
    364c:	72 07       	cpc	r23, r18
    364e:	2f ef       	ldi	r18, 0xFF	; 255
    3650:	82 07       	cpc	r24, r18
    3652:	2f ef       	ldi	r18, 0xFF	; 255
    3654:	92 07       	cpc	r25, r18
    3656:	19 f4       	brne	.+6      	; 0x365e <f_open+0x96a>
    3658:	bb 24       	eor	r11, r11
    365a:	b3 94       	inc	r11
    365c:	a2 c0       	rjmp	.+324    	; 0x37a2 <f_open+0xaae>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    365e:	c1 01       	movw	r24, r2
    3660:	b5 01       	movw	r22, r10
    3662:	a4 01       	movw	r20, r8
    3664:	00 e0       	ldi	r16, 0x00	; 0
    3666:	10 e0       	ldi	r17, 0x00	; 0
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <put_fat>
    3670:	b8 2e       	mov	r11, r24
			if (res != FR_OK) break;
    3672:	88 23       	and	r24, r24
    3674:	09 f0       	breq	.+2      	; 0x3678 <f_open+0x984>
    3676:	95 c0       	rjmp	.+298    	; 0x37a2 <f_open+0xaae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    3678:	f1 01       	movw	r30, r2
    367a:	86 85       	ldd	r24, Z+14	; 0x0e
    367c:	97 85       	ldd	r25, Z+15	; 0x0f
    367e:	a0 89       	ldd	r26, Z+16	; 0x10
    3680:	b1 89       	ldd	r27, Z+17	; 0x11
    3682:	8f 3f       	cpi	r24, 0xFF	; 255
    3684:	ff ef       	ldi	r31, 0xFF	; 255
    3686:	9f 07       	cpc	r25, r31
    3688:	ff ef       	ldi	r31, 0xFF	; 255
    368a:	af 07       	cpc	r26, r31
    368c:	ff ef       	ldi	r31, 0xFF	; 255
    368e:	bf 07       	cpc	r27, r31
    3690:	51 f0       	breq	.+20     	; 0x36a6 <f_open+0x9b2>
				fs->free_clust++;
    3692:	01 96       	adiw	r24, 0x01	; 1
    3694:	a1 1d       	adc	r26, r1
    3696:	b1 1d       	adc	r27, r1
    3698:	f1 01       	movw	r30, r2
    369a:	86 87       	std	Z+14, r24	; 0x0e
    369c:	97 87       	std	Z+15, r25	; 0x0f
    369e:	a0 8b       	std	Z+16, r26	; 0x10
    36a0:	b1 8b       	std	Z+17, r27	; 0x11
				fs->fsi_flag = 1;
    36a2:	21 e0       	ldi	r18, 0x01	; 1
    36a4:	25 83       	std	Z+5, r18	; 0x05
    36a6:	53 01       	movw	r10, r6
    36a8:	42 01       	movw	r8, r4
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    36aa:	f1 01       	movw	r30, r2
    36ac:	86 89       	ldd	r24, Z+22	; 0x16
    36ae:	97 89       	ldd	r25, Z+23	; 0x17
    36b0:	a0 8d       	ldd	r26, Z+24	; 0x18
    36b2:	b1 8d       	ldd	r27, Z+25	; 0x19
    36b4:	88 16       	cp	r8, r24
    36b6:	99 06       	cpc	r9, r25
    36b8:	aa 06       	cpc	r10, r26
    36ba:	bb 06       	cpc	r11, r27
    36bc:	08 f4       	brcc	.+2      	; 0x36c0 <f_open+0x9cc>
    36be:	b2 cf       	rjmp	.-156    	; 0x3624 <f_open+0x930>
    36c0:	9a c0       	rjmp	.+308    	; 0x37f6 <f_open+0xb02>
    36c2:	62 e0       	ldi	r22, 0x02	; 2
    36c4:	b6 2e       	mov	r11, r22
    36c6:	6d c0       	rjmp	.+218    	; 0x37a2 <f_open+0xaae>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    36c8:	bb 20       	and	r11, r11
    36ca:	09 f0       	breq	.+2      	; 0x36ce <f_open+0x9da>
    36cc:	6a c0       	rjmp	.+212    	; 0x37a2 <f_open+0xaae>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    36ce:	a8 a9       	ldd	r26, Y+48	; 0x30
    36d0:	b9 a9       	ldd	r27, Y+49	; 0x31
    36d2:	1b 96       	adiw	r26, 0x0b	; 11
    36d4:	8c 91       	ld	r24, X
    36d6:	84 ff       	sbrs	r24, 4
    36d8:	03 c0       	rjmp	.+6      	; 0x36e0 <f_open+0x9ec>
    36da:	54 e0       	ldi	r21, 0x04	; 4
    36dc:	b5 2e       	mov	r11, r21
    36de:	61 c0       	rjmp	.+194    	; 0x37a2 <f_open+0xaae>
				res = FR_NO_FILE;
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    36e0:	f1 ff       	sbrs	r31, 1
    36e2:	02 c0       	rjmp	.+4      	; 0x36e8 <f_open+0x9f4>
    36e4:	80 fd       	sbrc	r24, 0
    36e6:	77 c0       	rjmp	.+238    	; 0x37d6 <f_open+0xae2>
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
		if (mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW))
    36e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    36ea:	8e 71       	andi	r24, 0x1E	; 30
    36ec:	19 f0       	breq	.+6      	; 0x36f4 <f_open+0xa00>
			mode |= FA__WRITTEN;				/* Set file changed flag */
    36ee:	bb a5       	ldd	r27, Y+43	; 0x2b
    36f0:	b0 62       	ori	r27, 0x20	; 32
    36f2:	bb a7       	std	Y+43, r27	; 0x2b
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    36f4:	6d 85       	ldd	r22, Y+13	; 0x0d
    36f6:	7e 85       	ldd	r23, Y+14	; 0x0e
    36f8:	fb 01       	movw	r30, r22
    36fa:	22 a5       	ldd	r18, Z+42	; 0x2a
    36fc:	33 a5       	ldd	r19, Z+43	; 0x2b
    36fe:	44 a5       	ldd	r20, Z+44	; 0x2c
    3700:	55 a5       	ldd	r21, Z+45	; 0x2d
    3702:	aa a9       	ldd	r26, Y+50	; 0x32
    3704:	bb a9       	ldd	r27, Y+51	; 0x33
    3706:	5a 96       	adiw	r26, 0x1a	; 26
    3708:	2d 93       	st	X+, r18
    370a:	3d 93       	st	X+, r19
    370c:	4d 93       	st	X+, r20
    370e:	5c 93       	st	X, r21
    3710:	5d 97       	sbiw	r26, 0x1d	; 29
		fp->dir_ptr = dir;
    3712:	e8 a9       	ldd	r30, Y+48	; 0x30
    3714:	f9 a9       	ldd	r31, Y+49	; 0x31
    3716:	5f 96       	adiw	r26, 0x1f	; 31
    3718:	fc 93       	st	X, r31
    371a:	ee 93       	st	-X, r30
    371c:	5e 97       	sbiw	r26, 0x1e	; 30
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    371e:	fb a5       	ldd	r31, Y+43	; 0x2b
    3720:	14 96       	adiw	r26, 0x04	; 4
    3722:	fc 93       	st	X, r31
		fp->org_clust =						/* File start cluster */
    3724:	a8 a9       	ldd	r26, Y+48	; 0x30
    3726:	b9 a9       	ldd	r27, Y+49	; 0x31
    3728:	54 96       	adiw	r26, 0x14	; 20
    372a:	8d 91       	ld	r24, X+
    372c:	9c 91       	ld	r25, X
    372e:	55 97       	sbiw	r26, 0x15	; 21
    3730:	a0 e0       	ldi	r26, 0x00	; 0
    3732:	b0 e0       	ldi	r27, 0x00	; 0
    3734:	dc 01       	movw	r26, r24
    3736:	99 27       	eor	r25, r25
    3738:	88 27       	eor	r24, r24
    373a:	e8 a9       	ldd	r30, Y+48	; 0x30
    373c:	f9 a9       	ldd	r31, Y+49	; 0x31
    373e:	22 8d       	ldd	r18, Z+26	; 0x1a
    3740:	33 8d       	ldd	r19, Z+27	; 0x1b
    3742:	40 e0       	ldi	r20, 0x00	; 0
    3744:	50 e0       	ldi	r21, 0x00	; 0
    3746:	82 2b       	or	r24, r18
    3748:	93 2b       	or	r25, r19
    374a:	a4 2b       	or	r26, r20
    374c:	b5 2b       	or	r27, r21
    374e:	ea a9       	ldd	r30, Y+50	; 0x32
    3750:	fb a9       	ldd	r31, Y+51	; 0x33
    3752:	86 87       	std	Z+14, r24	; 0x0e
    3754:	97 87       	std	Z+15, r25	; 0x0f
    3756:	a0 8b       	std	Z+16, r26	; 0x10
    3758:	b1 8b       	std	Z+17, r27	; 0x11
			((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    375a:	e8 a9       	ldd	r30, Y+48	; 0x30
    375c:	f9 a9       	ldd	r31, Y+49	; 0x31
    375e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3760:	95 8d       	ldd	r25, Z+29	; 0x1d
    3762:	a6 8d       	ldd	r26, Z+30	; 0x1e
    3764:	b7 8d       	ldd	r27, Z+31	; 0x1f
    3766:	ea a9       	ldd	r30, Y+50	; 0x32
    3768:	fb a9       	ldd	r31, Y+51	; 0x33
    376a:	82 87       	std	Z+10, r24	; 0x0a
    376c:	93 87       	std	Z+11, r25	; 0x0b
    376e:	a4 87       	std	Z+12, r26	; 0x0c
    3770:	b5 87       	std	Z+13, r27	; 0x0d
		fp->fptr = 0;						/* File pointer */
    3772:	aa a9       	ldd	r26, Y+50	; 0x32
    3774:	bb a9       	ldd	r27, Y+51	; 0x33
    3776:	16 96       	adiw	r26, 0x06	; 6
    3778:	1d 92       	st	X+, r1
    377a:	1d 92       	st	X+, r1
    377c:	1d 92       	st	X+, r1
    377e:	1c 92       	st	X, r1
    3780:	19 97       	sbiw	r26, 0x09	; 9
		fp->dsect = 0;
    3782:	ea a9       	ldd	r30, Y+50	; 0x32
    3784:	fb a9       	ldd	r31, Y+51	; 0x33
    3786:	16 8a       	std	Z+22, r1	; 0x16
    3788:	17 8a       	std	Z+23, r1	; 0x17
    378a:	10 8e       	std	Z+24, r1	; 0x18
    378c:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* No cluster link map table */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    378e:	71 83       	std	Z+1, r23	; 0x01
    3790:	60 83       	st	Z, r22
    3792:	db 01       	movw	r26, r22
    3794:	16 96       	adiw	r26, 0x06	; 6
    3796:	8d 91       	ld	r24, X+
    3798:	9c 91       	ld	r25, X
    379a:	17 97       	sbiw	r26, 0x07	; 7
    379c:	93 83       	std	Z+3, r25	; 0x03
    379e:	82 83       	std	Z+2, r24	; 0x02
    37a0:	bb 24       	eor	r11, r11
	}

	LEAVE_FF(dj.fs, res);
}
    37a2:	8b 2d       	mov	r24, r11
    37a4:	e5 96       	adiw	r28, 0x35	; 53
    37a6:	0f b6       	in	r0, 0x3f	; 63
    37a8:	f8 94       	cli
    37aa:	de bf       	out	0x3e, r29	; 62
    37ac:	0f be       	out	0x3f, r0	; 63
    37ae:	cd bf       	out	0x3d, r28	; 61
    37b0:	cf 91       	pop	r28
    37b2:	df 91       	pop	r29
    37b4:	1f 91       	pop	r17
    37b6:	0f 91       	pop	r16
    37b8:	ff 90       	pop	r15
    37ba:	ef 90       	pop	r14
    37bc:	df 90       	pop	r13
    37be:	cf 90       	pop	r12
    37c0:	bf 90       	pop	r11
    37c2:	af 90       	pop	r10
    37c4:	9f 90       	pop	r9
    37c6:	8f 90       	pop	r8
    37c8:	7f 90       	pop	r7
    37ca:	6f 90       	pop	r6
    37cc:	5f 90       	pop	r5
    37ce:	4f 90       	pop	r4
    37d0:	3f 90       	pop	r3
    37d2:	2f 90       	pop	r2
    37d4:	08 95       	ret
		fp->fptr = 0;						/* File pointer */
		fp->dsect = 0;
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* No cluster link map table */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    37d6:	37 e0       	ldi	r19, 0x07	; 7
    37d8:	b3 2e       	mov	r11, r19
    37da:	e3 cf       	rjmp	.-58     	; 0x37a2 <f_open+0xaae>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    37dc:	4b 8d       	ldd	r20, Y+27	; 0x1b
    37de:	5c 8d       	ldd	r21, Y+28	; 0x1c
    37e0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    37e2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    37e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    37e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    37e8:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <move_window>
    37ec:	b8 2e       	mov	r11, r24
		if (res == FR_OK) {
    37ee:	88 23       	and	r24, r24
    37f0:	09 f0       	breq	.+2      	; 0x37f4 <f_open+0xb00>
    37f2:	aa ce       	rjmp	.-684    	; 0x3548 <f_open+0x854>
    37f4:	95 ce       	rjmp	.-726    	; 0x3520 <f_open+0x82c>
			dj.fs->wflag = 1;
			if (cl) {							/* Remove the cluster chain if exist */
				dw = dj.fs->winsect;
				res = remove_chain(dj.fs, cl);
				if (res == FR_OK) {
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    37f6:	ed 85       	ldd	r30, Y+13	; 0x0d
    37f8:	fe 85       	ldd	r31, Y+14	; 0x0e
    37fa:	08 94       	sec
    37fc:	c1 08       	sbc	r12, r1
    37fe:	d1 08       	sbc	r13, r1
    3800:	e1 08       	sbc	r14, r1
    3802:	f1 08       	sbc	r15, r1
    3804:	c2 86       	std	Z+10, r12	; 0x0a
    3806:	d3 86       	std	Z+11, r13	; 0x0b
    3808:	e4 86       	std	Z+12, r14	; 0x0c
    380a:	f5 86       	std	Z+13, r15	; 0x0d
					res = move_window(dj.fs, dw);
    380c:	8d 85       	ldd	r24, Y+13	; 0x0d
    380e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3810:	4f a1       	ldd	r20, Y+39	; 0x27
    3812:	58 a5       	ldd	r21, Y+40	; 0x28
    3814:	69 a5       	ldd	r22, Y+41	; 0x29
    3816:	7a a5       	ldd	r23, Y+42	; 0x2a
    3818:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <move_window>
    381c:	b8 2e       	mov	r11, r24
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
    381e:	88 23       	and	r24, r24
    3820:	09 f4       	brne	.+2      	; 0x3824 <f_open+0xb30>
    3822:	62 cf       	rjmp	.-316    	; 0x36e8 <f_open+0x9f4>
    3824:	be cf       	rjmp	.-132    	; 0x37a2 <f_open+0xaae>
    3826:	60 e0       	ldi	r22, 0x00	; 0
    3828:	b4 cd       	rjmp	.-1176   	; 0x3392 <f_open+0x69e>

0000382a <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    382a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    382e:	80 91 eb 00 	lds	r24, 0x00EB
    3832:	81 60       	ori	r24, 0x01	; 1
    3834:	80 93 eb 00 	sts	0x00EB, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    3838:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
    383c:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    3840:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    3844:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
    3848:	88 1f       	adc	r24, r24
    384a:	88 27       	eor	r24, r24
    384c:	88 1f       	adc	r24, r24
    384e:	08 95       	ret

00003850 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    3850:	80 91 2b 04 	lds	r24, 0x042B
    3854:	88 23       	and	r24, r24
    3856:	9c f4       	brge	.+38     	; 0x387e <Endpoint_ClearStatusStage+0x2e>
    3858:	04 c0       	rjmp	.+8      	; 0x3862 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    385a:	80 91 2a 04 	lds	r24, 0x042A
    385e:	88 23       	and	r24, r24
    3860:	b9 f0       	breq	.+46     	; 0x3890 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3862:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    3866:	82 ff       	sbrs	r24, 2
    3868:	f8 cf       	rjmp	.-16     	; 0x385a <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    386a:	80 91 e8 00 	lds	r24, 0x00E8
    386e:	8b 77       	andi	r24, 0x7B	; 123
    3870:	80 93 e8 00 	sts	0x00E8, r24
    3874:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3876:	80 91 2a 04 	lds	r24, 0x042A
    387a:	88 23       	and	r24, r24
    387c:	49 f0       	breq	.+18     	; 0x3890 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    387e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    3882:	80 ff       	sbrs	r24, 0
    3884:	f8 cf       	rjmp	.-16     	; 0x3876 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3886:	80 91 e8 00 	lds	r24, 0x00E8
    388a:	8e 77       	andi	r24, 0x7E	; 126
    388c:	80 93 e8 00 	sts	0x00E8, r24
    3890:	08 95       	ret

00003892 <Endpoint_WaitUntilReady>:
			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is active (i.e. enumerated to a host)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    3892:	40 91 e4 00 	lds	r20, 0x00E4
    3896:	50 91 e5 00 	lds	r21, 0x00E5
    389a:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
    389c:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    38a0:	80 ff       	sbrs	r24, 0
    38a2:	05 c0       	rjmp	.+10     	; 0x38ae <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    38a4:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
    38a8:	80 ff       	sbrs	r24, 0
    38aa:	05 c0       	rjmp	.+10     	; 0x38b6 <Endpoint_WaitUntilReady+0x24>
    38ac:	22 c0       	rjmp	.+68     	; 0x38f2 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    38ae:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    38b2:	82 fd       	sbrc	r24, 2
    38b4:	1e c0       	rjmp	.+60     	; 0x38f2 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    38b6:	80 91 2a 04 	lds	r24, 0x042A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    38ba:	88 23       	and	r24, r24
    38bc:	11 f4       	brne	.+4      	; 0x38c2 <Endpoint_WaitUntilReady+0x30>
    38be:	82 e0       	ldi	r24, 0x02	; 2
    38c0:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    38c2:	85 30       	cpi	r24, 0x05	; 5
    38c4:	11 f4       	brne	.+4      	; 0x38ca <Endpoint_WaitUntilReady+0x38>
    38c6:	83 e0       	ldi	r24, 0x03	; 3
    38c8:	08 95       	ret
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    38ca:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    38ce:	85 ff       	sbrs	r24, 5
    38d0:	02 c0       	rjmp	.+4      	; 0x38d6 <Endpoint_WaitUntilReady+0x44>
    38d2:	81 e0       	ldi	r24, 0x01	; 1
    38d4:	08 95       	ret
    38d6:	80 91 e4 00 	lds	r24, 0x00E4
    38da:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    38de:	84 17       	cp	r24, r20
    38e0:	95 07       	cpc	r25, r21
    38e2:	e1 f2       	breq	.-72     	; 0x389c <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    38e4:	22 23       	and	r18, r18
    38e6:	11 f4       	brne	.+4      	; 0x38ec <Endpoint_WaitUntilReady+0x5a>
    38e8:	84 e0       	ldi	r24, 0x04	; 4
    38ea:	08 95       	ret
    38ec:	21 50       	subi	r18, 0x01	; 1
    38ee:	ac 01       	movw	r20, r24
    38f0:	d5 cf       	rjmp	.-86     	; 0x389c <Endpoint_WaitUntilReady+0xa>
    38f2:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    38f4:	08 95       	ret

000038f6 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    38f6:	55 d0       	rcall	.+170    	; 0x39a2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    38f8:	5c d0       	rcall	.+184    	; 0x39b2 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
    38fa:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
    38fe:	98 2f       	mov	r25, r24
    3900:	9f 77       	andi	r25, 0x7F	; 127
    3902:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
    3906:	80 68       	ori	r24, 0x80	; 128
    3908:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
    390c:	8c e0       	ldi	r24, 0x0C	; 12
    390e:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
    3910:	89 b5       	in	r24, 0x29	; 41
    3912:	82 60       	ori	r24, 0x02	; 2
    3914:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    3916:	09 b4       	in	r0, 0x29	; 41
    3918:	00 fe       	sbrs	r0, 0
    391a:	fd cf       	rjmp	.-6      	; 0x3916 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    391c:	80 91 d8 00 	lds	r24, 0x00D8
    3920:	8f 7d       	andi	r24, 0xDF	; 223
    3922:	80 93 d8 00 	sts	0x00D8, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    3926:	80 91 d7 00 	lds	r24, 0x00D7
    392a:	80 68       	ori	r24, 0x80	; 128
    392c:	80 93 d7 00 	sts	0x00D7, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
    3930:	10 92 2a 04 	sts	0x042A, r1
	USB_ConfigurationNumber  = 0;
    3934:	10 92 28 04 	sts	0x0428, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
    3938:	10 92 27 04 	sts	0x0427, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
    393c:	10 92 26 04 	sts	0x0426, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    3940:	80 91 e0 00 	lds	r24, 0x00E0
    3944:	8b 7f       	andi	r24, 0xFB	; 251
    3946:	80 93 e0 00 	sts	0x00E0, r24
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  USB_Device_SetLowSpeed();
	else
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUS);
    394a:	80 91 d8 00 	lds	r24, 0x00D8
    394e:	81 60       	ori	r24, 0x01	; 1
    3950:	80 93 d8 00 	sts	0x00D8, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
    3954:	80 e0       	ldi	r24, 0x00	; 0
    3956:	60 e0       	ldi	r22, 0x00	; 0
    3958:	42 e0       	ldi	r20, 0x02	; 2
    395a:	67 df       	rcall	.-306    	; 0x382a <Endpoint_ConfigureEndpoint_Prv>

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
							   ENDPOINT_BANK_SINGLE);

	USB_INT_Clear(USB_INT_SUSPI);
    395c:	80 91 e1 00 	lds	r24, 0x00E1
    3960:	8e 7f       	andi	r24, 0xFE	; 254
    3962:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPI);
    3966:	80 91 e2 00 	lds	r24, 0x00E2
    396a:	81 60       	ori	r24, 0x01	; 1
    396c:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Enable(USB_INT_EORSTI);
    3970:	80 91 e2 00 	lds	r24, 0x00E2
    3974:	88 60       	ori	r24, 0x08	; 8
    3976:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    397a:	80 91 e0 00 	lds	r24, 0x00E0
    397e:	8e 7f       	andi	r24, 0xFE	; 254
    3980:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    3984:	80 91 d8 00 	lds	r24, 0x00D8
    3988:	80 61       	ori	r24, 0x10	; 16
    398a:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    398e:	08 95       	ret

00003990 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    3990:	e7 ed       	ldi	r30, 0xD7	; 215
    3992:	f0 e0       	ldi	r31, 0x00	; 0
    3994:	80 81       	ld	r24, Z
    3996:	81 60       	ori	r24, 0x01	; 1
    3998:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    399a:	81 e0       	ldi	r24, 0x01	; 1
    399c:	80 93 29 04 	sts	0x0429, r24

	USB_ResetInterface();
}
    39a0:	aa cf       	rjmp	.-172    	; 0x38f6 <USB_ResetInterface>

000039a2 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    39a2:	e8 ed       	ldi	r30, 0xD8	; 216
    39a4:	f0 e0       	ldi	r31, 0x00	; 0
    39a6:	80 81       	ld	r24, Z
    39a8:	8c 7f       	andi	r24, 0xFC	; 252
    39aa:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    39ac:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    39b0:	08 95       	ret

000039b2 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
    39b2:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
    39b6:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    39ba:	08 95       	ret

000039bc <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    39bc:	1f 92       	push	r1
    39be:	0f 92       	push	r0
    39c0:	0f b6       	in	r0, 0x3f	; 63
    39c2:	0f 92       	push	r0
    39c4:	0b b6       	in	r0, 0x3b	; 59
    39c6:	0f 92       	push	r0
    39c8:	11 24       	eor	r1, r1
    39ca:	1f 93       	push	r17
    39cc:	2f 93       	push	r18
    39ce:	3f 93       	push	r19
    39d0:	4f 93       	push	r20
    39d2:	5f 93       	push	r21
    39d4:	6f 93       	push	r22
    39d6:	7f 93       	push	r23
    39d8:	8f 93       	push	r24
    39da:	9f 93       	push	r25
    39dc:	af 93       	push	r26
    39de:	bf 93       	push	r27
    39e0:	ef 93       	push	r30
    39e2:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    39e4:	e9 ee       	ldi	r30, 0xE9	; 233
    39e6:	f0 e0       	ldi	r31, 0x00	; 0
    39e8:	10 81       	ld	r17, Z
    39ea:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    39ec:	10 82       	st	Z, r1
	uint8_t PrevSelectedEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);
    39ee:	e0 ef       	ldi	r30, 0xF0	; 240
    39f0:	f0 e0       	ldi	r31, 0x00	; 0
    39f2:	80 81       	ld	r24, Z
    39f4:	87 7f       	andi	r24, 0xF7	; 247
    39f6:	80 83       	st	Z, r24

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    39f8:	78 94       	sei

	NONATOMIC_BLOCK(NONATOMIC_FORCEOFF)
	{
		USB_Device_ProcessControlRequest();
    39fa:	eb d0       	rcall	.+470    	; 0x3bd2 <USB_Device_ProcessControlRequest>
    (void)__s;
}

static __inline__ void __iCliParam(const uint8_t *__s)
{
    cli();
    39fc:	f8 94       	cli
    39fe:	a9 ee       	ldi	r26, 0xE9	; 233
    3a00:	b0 e0       	ldi	r27, 0x00	; 0
    3a02:	1c 92       	st	X, r1
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
    3a04:	e0 ef       	ldi	r30, 0xF0	; 240
    3a06:	f0 e0       	ldi	r31, 0x00	; 0
    3a08:	80 81       	ld	r24, Z
    3a0a:	88 60       	ori	r24, 0x08	; 8
    3a0c:	80 83       	st	Z, r24
    3a0e:	1c 93       	st	X, r17
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    3a10:	ff 91       	pop	r31
    3a12:	ef 91       	pop	r30
    3a14:	bf 91       	pop	r27
    3a16:	af 91       	pop	r26
    3a18:	9f 91       	pop	r25
    3a1a:	8f 91       	pop	r24
    3a1c:	7f 91       	pop	r23
    3a1e:	6f 91       	pop	r22
    3a20:	5f 91       	pop	r21
    3a22:	4f 91       	pop	r20
    3a24:	3f 91       	pop	r19
    3a26:	2f 91       	pop	r18
    3a28:	1f 91       	pop	r17
    3a2a:	0f 90       	pop	r0
    3a2c:	0b be       	out	0x3b, r0	; 59
    3a2e:	0f 90       	pop	r0
    3a30:	0f be       	out	0x3f, r0	; 63
    3a32:	0f 90       	pop	r0
    3a34:	1f 90       	pop	r1
    3a36:	18 95       	reti

00003a38 <__vector_10>:
	UDINT   = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    3a38:	1f 92       	push	r1
    3a3a:	0f 92       	push	r0
    3a3c:	0f b6       	in	r0, 0x3f	; 63
    3a3e:	0f 92       	push	r0
    3a40:	0b b6       	in	r0, 0x3b	; 59
    3a42:	0f 92       	push	r0
    3a44:	11 24       	eor	r1, r1
    3a46:	2f 93       	push	r18
    3a48:	3f 93       	push	r19
    3a4a:	4f 93       	push	r20
    3a4c:	5f 93       	push	r21
    3a4e:	6f 93       	push	r22
    3a50:	7f 93       	push	r23
    3a52:	8f 93       	push	r24
    3a54:	9f 93       	push	r25
    3a56:	af 93       	push	r26
    3a58:	bf 93       	push	r27
    3a5a:	ef 93       	push	r30
    3a5c:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
    3a5e:	80 91 da 00 	lds	r24, 0x00DA
    3a62:	80 ff       	sbrs	r24, 0
    3a64:	17 c0       	rjmp	.+46     	; 0x3a94 <__vector_10+0x5c>
    3a66:	80 91 d8 00 	lds	r24, 0x00D8
    3a6a:	80 ff       	sbrs	r24, 0
    3a6c:	13 c0       	rjmp	.+38     	; 0x3a94 <__vector_10+0x5c>
	{
		USB_INT_Clear(USB_INT_VBUS);
    3a6e:	80 91 da 00 	lds	r24, 0x00DA
    3a72:	8e 7f       	andi	r24, 0xFE	; 254
    3a74:	80 93 da 00 	sts	0x00DA, r24
				 *  \note This function is not available on some AVR models which do not support hardware VBUS monitoring.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    3a78:	80 91 d9 00 	lds	r24, 0x00D9

		if (USB_VBUS_GetStatus())
    3a7c:	80 ff       	sbrs	r24, 0
    3a7e:	06 c0       	rjmp	.+12     	; 0x3a8c <__vector_10+0x54>
		{
			USB_DeviceState = DEVICE_STATE_Powered;
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    3a82:	80 93 2a 04 	sts	0x042A, r24
			EVENT_USB_Device_Connect();
    3a86:	0e 94 0c 02 	call	0x418	; 0x418 <EVENT_USB_Device_Connect>
    3a8a:	04 c0       	rjmp	.+8      	; 0x3a94 <__vector_10+0x5c>
		}
		else
		{
			USB_DeviceState = DEVICE_STATE_Unattached;
    3a8c:	10 92 2a 04 	sts	0x042A, r1
			EVENT_USB_Device_Disconnect();
    3a90:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    3a94:	80 91 e1 00 	lds	r24, 0x00E1
    3a98:	80 ff       	sbrs	r24, 0
    3a9a:	1d c0       	rjmp	.+58     	; 0x3ad6 <__vector_10+0x9e>
    3a9c:	80 91 e2 00 	lds	r24, 0x00E2
    3aa0:	80 ff       	sbrs	r24, 0
    3aa2:	19 c0       	rjmp	.+50     	; 0x3ad6 <__vector_10+0x9e>
	{
		USB_INT_Clear(USB_INT_SUSPI);
    3aa4:	80 91 e1 00 	lds	r24, 0x00E1
    3aa8:	8e 7f       	andi	r24, 0xFE	; 254
    3aaa:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPI);
    3aae:	80 91 e2 00 	lds	r24, 0x00E2
    3ab2:	8e 7f       	andi	r24, 0xFE	; 254
    3ab4:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
    3ab8:	80 91 e2 00 	lds	r24, 0x00E2
    3abc:	80 61       	ori	r24, 0x10	; 16
    3abe:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    3ac2:	80 91 d8 00 	lds	r24, 0x00D8
    3ac6:	80 62       	ori	r24, 0x20	; 32
    3ac8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
    3acc:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    3ace:	85 e0       	ldi	r24, 0x05	; 5
    3ad0:	80 93 2a 04 	sts	0x042A, r24
		EVENT_USB_Device_Suspend();
    3ad4:	ed d1       	rcall	.+986    	; 0x3eb0 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    3ad6:	80 91 e1 00 	lds	r24, 0x00E1
    3ada:	84 ff       	sbrs	r24, 4
    3adc:	2e c0       	rjmp	.+92     	; 0x3b3a <__vector_10+0x102>
    3ade:	80 91 e2 00 	lds	r24, 0x00E2
    3ae2:	84 ff       	sbrs	r24, 4
    3ae4:	2a c0       	rjmp	.+84     	; 0x3b3a <__vector_10+0x102>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
    3ae6:	8c e0       	ldi	r24, 0x0C	; 12
    3ae8:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
    3aea:	89 b5       	in	r24, 0x29	; 41
    3aec:	82 60       	ori	r24, 0x02	; 2
    3aee:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    3af0:	09 b4       	in	r0, 0x29	; 41
    3af2:	00 fe       	sbrs	r0, 0
    3af4:	fd cf       	rjmp	.-6      	; 0x3af0 <__vector_10+0xb8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    3af6:	80 91 d8 00 	lds	r24, 0x00D8
    3afa:	8f 7d       	andi	r24, 0xDF	; 223
    3afc:	80 93 d8 00 	sts	0x00D8, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUPI);
    3b00:	80 91 e1 00 	lds	r24, 0x00E1
    3b04:	8f 7e       	andi	r24, 0xEF	; 239
    3b06:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUPI);
    3b0a:	80 91 e2 00 	lds	r24, 0x00E2
    3b0e:	8f 7e       	andi	r24, 0xEF	; 239
    3b10:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPI);
    3b14:	80 91 e2 00 	lds	r24, 0x00E2
    3b18:	81 60       	ori	r24, 0x01	; 1
    3b1a:	80 93 e2 00 	sts	0x00E2, r24

		if (USB_ConfigurationNumber)
    3b1e:	80 91 28 04 	lds	r24, 0x0428
    3b22:	88 23       	and	r24, r24
    3b24:	31 f4       	brne	.+12     	; 0x3b32 <__vector_10+0xfa>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3b26:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3b2a:	87 fd       	sbrc	r24, 7
    3b2c:	02 c0       	rjmp	.+4      	; 0x3b32 <__vector_10+0xfa>
    3b2e:	81 e0       	ldi	r24, 0x01	; 1
    3b30:	01 c0       	rjmp	.+2      	; 0x3b34 <__vector_10+0xfc>
    3b32:	84 e0       	ldi	r24, 0x04	; 4
    3b34:	80 93 2a 04 	sts	0x042A, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    3b38:	bb d1       	rcall	.+886    	; 0x3eb0 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    3b3a:	80 91 e1 00 	lds	r24, 0x00E1
    3b3e:	83 ff       	sbrs	r24, 3
    3b40:	27 c0       	rjmp	.+78     	; 0x3b90 <__vector_10+0x158>
    3b42:	80 91 e2 00 	lds	r24, 0x00E2
    3b46:	83 ff       	sbrs	r24, 3
    3b48:	23 c0       	rjmp	.+70     	; 0x3b90 <__vector_10+0x158>
	{
		USB_INT_Clear(USB_INT_EORSTI);
    3b4a:	80 91 e1 00 	lds	r24, 0x00E1
    3b4e:	87 7f       	andi	r24, 0xF7	; 247
    3b50:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
    3b54:	82 e0       	ldi	r24, 0x02	; 2
    3b56:	80 93 2a 04 	sts	0x042A, r24
		USB_ConfigurationNumber = 0;
    3b5a:	10 92 28 04 	sts	0x0428, r1

		USB_INT_Clear(USB_INT_SUSPI);
    3b5e:	80 91 e1 00 	lds	r24, 0x00E1
    3b62:	8e 7f       	andi	r24, 0xFE	; 254
    3b64:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPI);
    3b68:	80 91 e2 00 	lds	r24, 0x00E2
    3b6c:	8e 7f       	andi	r24, 0xFE	; 254
    3b6e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
    3b72:	80 91 e2 00 	lds	r24, 0x00E2
    3b76:	80 61       	ori	r24, 0x10	; 16
    3b78:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
    3b7c:	80 e0       	ldi	r24, 0x00	; 0
    3b7e:	60 e0       	ldi	r22, 0x00	; 0
    3b80:	42 e0       	ldi	r20, 0x02	; 2
    3b82:	53 de       	rcall	.-858    	; 0x382a <Endpoint_ConfigureEndpoint_Prv>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
		                           ENDPOINT_BANK_SINGLE);

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
    3b84:	80 91 f0 00 	lds	r24, 0x00F0
    3b88:	88 60       	ori	r24, 0x08	; 8
    3b8a:	80 93 f0 00 	sts	0x00F0, r24
		#endif

		EVENT_USB_Device_Reset();
    3b8e:	90 d1       	rcall	.+800    	; 0x3eb0 <USB_Event_Stub>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    3b90:	80 91 e1 00 	lds	r24, 0x00E1
    3b94:	82 ff       	sbrs	r24, 2
    3b96:	0a c0       	rjmp	.+20     	; 0x3bac <__vector_10+0x174>
    3b98:	80 91 e2 00 	lds	r24, 0x00E2
    3b9c:	82 ff       	sbrs	r24, 2
    3b9e:	06 c0       	rjmp	.+12     	; 0x3bac <__vector_10+0x174>
	{
		USB_INT_Clear(USB_INT_SOFI);
    3ba0:	80 91 e1 00 	lds	r24, 0x00E1
    3ba4:	8b 7f       	andi	r24, 0xFB	; 251
    3ba6:	80 93 e1 00 	sts	0x00E1, r24

		EVENT_USB_Device_StartOfFrame();
    3baa:	82 d1       	rcall	.+772    	; 0x3eb0 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    3bac:	ff 91       	pop	r31
    3bae:	ef 91       	pop	r30
    3bb0:	bf 91       	pop	r27
    3bb2:	af 91       	pop	r26
    3bb4:	9f 91       	pop	r25
    3bb6:	8f 91       	pop	r24
    3bb8:	7f 91       	pop	r23
    3bba:	6f 91       	pop	r22
    3bbc:	5f 91       	pop	r21
    3bbe:	4f 91       	pop	r20
    3bc0:	3f 91       	pop	r19
    3bc2:	2f 91       	pop	r18
    3bc4:	0f 90       	pop	r0
    3bc6:	0b be       	out	0x3b, r0	; 59
    3bc8:	0f 90       	pop	r0
    3bca:	0f be       	out	0x3f, r0	; 63
    3bcc:	0f 90       	pop	r0
    3bce:	1f 90       	pop	r1
    3bd0:	18 95       	reti

00003bd2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    3bd2:	0f 93       	push	r16
    3bd4:	1f 93       	push	r17
    3bd6:	df 93       	push	r29
    3bd8:	cf 93       	push	r28
    3bda:	cd b7       	in	r28, 0x3d	; 61
    3bdc:	de b7       	in	r29, 0x3e	; 62
    3bde:	ac 97       	sbiw	r28, 0x2c	; 44
    3be0:	0f b6       	in	r0, 0x3f	; 63
    3be2:	f8 94       	cli
    3be4:	de bf       	out	0x3e, r29	; 62
    3be6:	0f be       	out	0x3f, r0	; 63
    3be8:	cd bf       	out	0x3d, r28	; 61
    3bea:	eb e2       	ldi	r30, 0x2B	; 43
    3bec:	f4 e0       	ldi	r31, 0x04	; 4
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    3bee:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
    3bf2:	81 93       	st	Z+, r24

void USB_Device_ProcessControlRequest(void)
{
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    3bf4:	24 e0       	ldi	r18, 0x04	; 4
    3bf6:	e3 33       	cpi	r30, 0x33	; 51
    3bf8:	f2 07       	cpc	r31, r18
    3bfa:	c9 f7       	brne	.-14     	; 0x3bee <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_Byte();

	EVENT_USB_Device_ControlRequest();
    3bfc:	0e 94 90 01 	call	0x320	; 0x320 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3c00:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    3c04:	83 ff       	sbrs	r24, 3
    3c06:	3b c1       	rjmp	.+630    	; 0x3e7e <USB_Device_ProcessControlRequest+0x2ac>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    3c08:	80 91 2b 04 	lds	r24, 0x042B

		switch (USB_ControlRequest.bRequest)
    3c0c:	30 91 2c 04 	lds	r19, 0x042C
    3c10:	35 30       	cpi	r19, 0x05	; 5
    3c12:	09 f4       	brne	.+2      	; 0x3c16 <USB_Device_ProcessControlRequest+0x44>
    3c14:	87 c0       	rjmp	.+270    	; 0x3d24 <USB_Device_ProcessControlRequest+0x152>
    3c16:	36 30       	cpi	r19, 0x06	; 6
    3c18:	40 f4       	brcc	.+16     	; 0x3c2a <USB_Device_ProcessControlRequest+0x58>
    3c1a:	31 30       	cpi	r19, 0x01	; 1
    3c1c:	c9 f1       	breq	.+114    	; 0x3c90 <USB_Device_ProcessControlRequest+0xbe>
    3c1e:	31 30       	cpi	r19, 0x01	; 1
    3c20:	70 f0       	brcs	.+28     	; 0x3c3e <USB_Device_ProcessControlRequest+0x6c>
    3c22:	33 30       	cpi	r19, 0x03	; 3
    3c24:	09 f0       	breq	.+2      	; 0x3c28 <USB_Device_ProcessControlRequest+0x56>
    3c26:	2b c1       	rjmp	.+598    	; 0x3e7e <USB_Device_ProcessControlRequest+0x2ac>
    3c28:	33 c0       	rjmp	.+102    	; 0x3c90 <USB_Device_ProcessControlRequest+0xbe>
    3c2a:	38 30       	cpi	r19, 0x08	; 8
    3c2c:	09 f4       	brne	.+2      	; 0x3c30 <USB_Device_ProcessControlRequest+0x5e>
    3c2e:	f8 c0       	rjmp	.+496    	; 0x3e20 <USB_Device_ProcessControlRequest+0x24e>
    3c30:	39 30       	cpi	r19, 0x09	; 9
    3c32:	09 f4       	brne	.+2      	; 0x3c36 <USB_Device_ProcessControlRequest+0x64>
    3c34:	07 c1       	rjmp	.+526    	; 0x3e44 <USB_Device_ProcessControlRequest+0x272>
    3c36:	36 30       	cpi	r19, 0x06	; 6
    3c38:	09 f0       	breq	.+2      	; 0x3c3c <USB_Device_ProcessControlRequest+0x6a>
    3c3a:	21 c1       	rjmp	.+578    	; 0x3e7e <USB_Device_ProcessControlRequest+0x2ac>
    3c3c:	99 c0       	rjmp	.+306    	; 0x3d70 <USB_Device_ProcessControlRequest+0x19e>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3c3e:	80 38       	cpi	r24, 0x80	; 128
    3c40:	21 f0       	breq	.+8      	; 0x3c4a <USB_Device_ProcessControlRequest+0x78>
    3c42:	82 38       	cpi	r24, 0x82	; 130
    3c44:	09 f0       	breq	.+2      	; 0x3c48 <USB_Device_ProcessControlRequest+0x76>
    3c46:	1b c1       	rjmp	.+566    	; 0x3e7e <USB_Device_ProcessControlRequest+0x2ac>
    3c48:	08 c0       	rjmp	.+16     	; 0x3c5a <USB_Device_ProcessControlRequest+0x88>
    3c4a:	90 91 26 04 	lds	r25, 0x0426
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
    3c4e:	80 91 27 04 	lds	r24, 0x0427
    3c52:	88 23       	and	r24, r24
    3c54:	99 f0       	breq	.+38     	; 0x3c7c <USB_Device_ProcessControlRequest+0xaa>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    3c56:	92 60       	ori	r25, 0x02	; 2
    3c58:	11 c0       	rjmp	.+34     	; 0x3c7c <USB_Device_ProcessControlRequest+0xaa>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3c5a:	80 91 2f 04 	lds	r24, 0x042F
    3c5e:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    3c60:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3c64:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	25 e0       	ldi	r18, 0x05	; 5
    3c6c:	96 95       	lsr	r25
    3c6e:	87 95       	ror	r24
    3c70:	2a 95       	dec	r18
    3c72:	e1 f7       	brne	.-8      	; 0x3c6c <USB_Device_ProcessControlRequest+0x9a>
    3c74:	98 2f       	mov	r25, r24
    3c76:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    3c78:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3c7c:	80 91 e8 00 	lds	r24, 0x00E8
    3c80:	87 7f       	andi	r24, 0xF7	; 247
    3c82:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
    3c86:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Word >> 8);
    3c8a:	10 92 f1 00 	sts	0x00F1, r1
    3c8e:	d3 c0       	rjmp	.+422    	; 0x3e36 <USB_Device_ProcessControlRequest+0x264>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3c90:	88 23       	and	r24, r24
    3c92:	19 f0       	breq	.+6      	; 0x3c9a <USB_Device_ProcessControlRequest+0xc8>
    3c94:	82 30       	cpi	r24, 0x02	; 2
    3c96:	09 f0       	breq	.+2      	; 0x3c9a <USB_Device_ProcessControlRequest+0xc8>
    3c98:	f2 c0       	rjmp	.+484    	; 0x3e7e <USB_Device_ProcessControlRequest+0x2ac>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	8f 71       	andi	r24, 0x1F	; 31
    3c9e:	90 70       	andi	r25, 0x00	; 0
    3ca0:	00 97       	sbiw	r24, 0x00	; 0
    3ca2:	21 f0       	breq	.+8      	; 0x3cac <USB_Device_ProcessControlRequest+0xda>
    3ca4:	02 97       	sbiw	r24, 0x02	; 2
    3ca6:	09 f0       	breq	.+2      	; 0x3caa <USB_Device_ProcessControlRequest+0xd8>
    3ca8:	ea c0       	rjmp	.+468    	; 0x3e7e <USB_Device_ProcessControlRequest+0x2ac>
    3caa:	0c c0       	rjmp	.+24     	; 0x3cc4 <USB_Device_ProcessControlRequest+0xf2>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    3cac:	80 91 2d 04 	lds	r24, 0x042D
    3cb0:	81 30       	cpi	r24, 0x01	; 1
    3cb2:	09 f0       	breq	.+2      	; 0x3cb6 <USB_Device_ProcessControlRequest+0xe4>
    3cb4:	e4 c0       	rjmp	.+456    	; 0x3e7e <USB_Device_ProcessControlRequest+0x2ac>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    3cb6:	10 92 27 04 	sts	0x0427, r1
    3cba:	33 30       	cpi	r19, 0x03	; 3
    3cbc:	69 f5       	brne	.+90     	; 0x3d18 <USB_Device_ProcessControlRequest+0x146>
    3cbe:	80 93 27 04 	sts	0x0427, r24
    3cc2:	2a c0       	rjmp	.+84     	; 0x3d18 <USB_Device_ProcessControlRequest+0x146>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    3cc4:	80 91 2d 04 	lds	r24, 0x042D
    3cc8:	88 23       	and	r24, r24
    3cca:	31 f5       	brne	.+76     	; 0x3d18 <USB_Device_ProcessControlRequest+0x146>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3ccc:	20 91 2f 04 	lds	r18, 0x042F
    3cd0:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    3cd2:	09 f4       	brne	.+2      	; 0x3cd6 <USB_Device_ProcessControlRequest+0x104>
    3cd4:	d4 c0       	rjmp	.+424    	; 0x3e7e <USB_Device_ProcessControlRequest+0x2ac>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    3cd6:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    3cda:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    3cde:	80 ff       	sbrs	r24, 0
    3ce0:	1b c0       	rjmp	.+54     	; 0x3d18 <USB_Device_ProcessControlRequest+0x146>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    3ce2:	33 30       	cpi	r19, 0x03	; 3
    3ce4:	21 f4       	brne	.+8      	; 0x3cee <USB_Device_ProcessControlRequest+0x11c>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3ce6:	80 91 eb 00 	lds	r24, 0x00EB
    3cea:	80 62       	ori	r24, 0x20	; 32
    3cec:	13 c0       	rjmp	.+38     	; 0x3d14 <USB_Device_ProcessControlRequest+0x142>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    3cee:	80 91 eb 00 	lds	r24, 0x00EB
    3cf2:	80 61       	ori	r24, 0x10	; 16
    3cf4:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    3cf8:	81 e0       	ldi	r24, 0x01	; 1
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	02 c0       	rjmp	.+4      	; 0x3d02 <USB_Device_ProcessControlRequest+0x130>
    3cfe:	88 0f       	add	r24, r24
    3d00:	99 1f       	adc	r25, r25
    3d02:	2a 95       	dec	r18
    3d04:	e2 f7       	brpl	.-8      	; 0x3cfe <USB_Device_ProcessControlRequest+0x12c>
    3d06:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    3d0a:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    3d0e:	80 91 eb 00 	lds	r24, 0x00EB
    3d12:	88 60       	ori	r24, 0x08	; 8
    3d14:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    3d18:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3d1c:	80 91 e8 00 	lds	r24, 0x00E8
    3d20:	87 7f       	andi	r24, 0xF7	; 247
    3d22:	8c c0       	rjmp	.+280    	; 0x3e3c <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3d24:	88 23       	and	r24, r24
    3d26:	09 f0       	breq	.+2      	; 0x3d2a <USB_Device_ProcessControlRequest+0x158>
    3d28:	aa c0       	rjmp	.+340    	; 0x3e7e <USB_Device_ProcessControlRequest+0x2ac>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    3d2a:	10 91 2d 04 	lds	r17, 0x042D
    3d2e:	1f 77       	andi	r17, 0x7F	; 127

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    3d30:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3d32:	f8 94       	cli
    3d34:	80 91 e8 00 	lds	r24, 0x00E8
    3d38:	87 7f       	andi	r24, 0xF7	; 247
    3d3a:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearSETUP();

		Endpoint_ClearStatusStage();
    3d3e:	88 dd       	rcall	.-1264   	; 0x3850 <Endpoint_ClearStatusStage>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3d40:	80 91 e8 00 	lds	r24, 0x00E8

		while (!(Endpoint_IsINReady()));
    3d44:	80 ff       	sbrs	r24, 0
    3d46:	fc cf       	rjmp	.-8      	; 0x3d40 <USB_Device_ProcessControlRequest+0x16e>

		USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    3d48:	11 23       	and	r17, r17
    3d4a:	11 f4       	brne	.+4      	; 0x3d50 <USB_Device_ProcessControlRequest+0x17e>
    3d4c:	82 e0       	ldi	r24, 0x02	; 2
    3d4e:	01 c0       	rjmp	.+2      	; 0x3d52 <USB_Device_ProcessControlRequest+0x180>
    3d50:	83 e0       	ldi	r24, 0x03	; 3
    3d52:	80 93 2a 04 	sts	0x042A, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
    3d56:	80 91 e3 00 	lds	r24, 0x00E3
    3d5a:	80 78       	andi	r24, 0x80	; 128
    3d5c:	18 2b       	or	r17, r24
    3d5e:	10 93 e3 00 	sts	0x00E3, r17
				UDADDR |= (1 << ADDEN);
    3d62:	80 91 e3 00 	lds	r24, 0x00E3
    3d66:	80 68       	ori	r24, 0x80	; 128
    3d68:	80 93 e3 00 	sts	0x00E3, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3d6c:	0f bf       	out	0x3f, r16	; 63
    __asm__ volatile ("" ::: "memory");
    3d6e:	87 c0       	rjmp	.+270    	; 0x3e7e <USB_Device_ProcessControlRequest+0x2ac>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3d70:	80 58       	subi	r24, 0x80	; 128
    3d72:	82 30       	cpi	r24, 0x02	; 2
    3d74:	08 f0       	brcs	.+2      	; 0x3d78 <USB_Device_ProcessControlRequest+0x1a6>
    3d76:	83 c0       	rjmp	.+262    	; 0x3e7e <USB_Device_ProcessControlRequest+0x2ac>
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    3d78:	80 91 2d 04 	lds	r24, 0x042D
    3d7c:	90 91 2e 04 	lds	r25, 0x042E
    3d80:	23 e0       	ldi	r18, 0x03	; 3
    3d82:	8c 3d       	cpi	r24, 0xDC	; 220
    3d84:	92 07       	cpc	r25, r18
    3d86:	99 f5       	brne	.+102    	; 0x3dee <USB_Device_ProcessControlRequest+0x21c>
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    3d88:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3d8a:	f8 94       	cli
    3d8c:	de 01       	movw	r26, r28
    3d8e:	15 96       	adiw	r26, 0x05	; 5
    3d90:	6e e0       	ldi	r22, 0x0E	; 14
    3d92:	40 e0       	ldi	r20, 0x00	; 0
    3d94:	50 e0       	ldi	r21, 0x00	; 0
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    3d96:	11 e2       	ldi	r17, 0x21	; 33
    3d98:	e6 2f       	mov	r30, r22
    3d9a:	f0 e0       	ldi	r31, 0x00	; 0
    3d9c:	10 93 57 00 	sts	0x0057, r17
    3da0:	84 91       	lpm	r24, Z+

			if (SerialCharNum & 0x01)
    3da2:	40 ff       	sbrs	r20, 0
    3da4:	03 c0       	rjmp	.+6      	; 0x3dac <USB_Device_ProcessControlRequest+0x1da>
			{
				SerialByte >>= 4;
    3da6:	82 95       	swap	r24
    3da8:	8f 70       	andi	r24, 0x0F	; 15
				SigReadAddress++;
    3daa:	6f 5f       	subi	r22, 0xFF	; 255
			}

			SerialByte &= 0x0F;
    3dac:	8f 70       	andi	r24, 0x0F	; 15
    3dae:	28 2f       	mov	r18, r24
    3db0:	30 e0       	ldi	r19, 0x00	; 0

			SignatureDescriptor.UnicodeString[SerialCharNum] = (SerialByte >= 10) ?
    3db2:	8a 30       	cpi	r24, 0x0A	; 10
    3db4:	18 f0       	brcs	.+6      	; 0x3dbc <USB_Device_ProcessControlRequest+0x1ea>
    3db6:	c9 01       	movw	r24, r18
    3db8:	c7 96       	adiw	r24, 0x37	; 55
    3dba:	02 c0       	rjmp	.+4      	; 0x3dc0 <USB_Device_ProcessControlRequest+0x1ee>
    3dbc:	c9 01       	movw	r24, r18
    3dbe:	c0 96       	adiw	r24, 0x30	; 48
    3dc0:	8d 93       	st	X+, r24
    3dc2:	9d 93       	st	X+, r25
    3dc4:	4f 5f       	subi	r20, 0xFF	; 255
    3dc6:	5f 4f       	sbci	r21, 0xFF	; 255

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
    3dc8:	44 31       	cpi	r20, 0x14	; 20
    3dca:	51 05       	cpc	r21, r1
    3dcc:	29 f7       	brne	.-54     	; 0x3d98 <USB_Device_ProcessControlRequest+0x1c6>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3dce:	7f bf       	out	0x3f, r23	; 63
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
    3dd0:	8a e2       	ldi	r24, 0x2A	; 42
    3dd2:	8b 83       	std	Y+3, r24	; 0x03
	{
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    3dd4:	83 e0       	ldi	r24, 0x03	; 3
    3dd6:	8c 83       	std	Y+4, r24	; 0x04
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3dd8:	80 91 e8 00 	lds	r24, 0x00E8
    3ddc:	87 7f       	andi	r24, 0xF7	; 247
    3dde:	80 93 e8 00 	sts	0x00E8, r24
		}
	}

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    3de2:	ce 01       	movw	r24, r28
    3de4:	03 96       	adiw	r24, 0x03	; 3
    3de6:	6a e2       	ldi	r22, 0x2A	; 42
    3de8:	70 e0       	ldi	r23, 0x00	; 0
    3dea:	63 d0       	rcall	.+198    	; 0x3eb2 <Endpoint_Write_Control_Stream_LE>
    3dec:	13 c0       	rjmp	.+38     	; 0x3e14 <USB_Device_ProcessControlRequest+0x242>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    3dee:	60 91 2f 04 	lds	r22, 0x042F
    3df2:	ae 01       	movw	r20, r28
    3df4:	4f 5f       	subi	r20, 0xFF	; 255
    3df6:	5f 4f       	sbci	r21, 0xFF	; 255
    3df8:	0e 94 6f 03 	call	0x6de	; 0x6de <CALLBACK_USB_GetDescriptor>
    3dfc:	bc 01       	movw	r22, r24
    3dfe:	00 97       	sbiw	r24, 0x00	; 0
    3e00:	09 f4       	brne	.+2      	; 0x3e04 <USB_Device_ProcessControlRequest+0x232>
    3e02:	3d c0       	rjmp	.+122    	; 0x3e7e <USB_Device_ProcessControlRequest+0x2ac>
    3e04:	80 91 e8 00 	lds	r24, 0x00E8
    3e08:	87 7f       	andi	r24, 0xF7	; 247
    3e0a:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    3e0e:	89 81       	ldd	r24, Y+1	; 0x01
    3e10:	9a 81       	ldd	r25, Y+2	; 0x02
    3e12:	ad d0       	rcall	.+346    	; 0x3f6e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3e14:	80 91 e8 00 	lds	r24, 0x00E8
    3e18:	8b 77       	andi	r24, 0x7B	; 123
    3e1a:	80 93 e8 00 	sts	0x00E8, r24
    3e1e:	2f c0       	rjmp	.+94     	; 0x3e7e <USB_Device_ProcessControlRequest+0x2ac>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    3e20:	80 38       	cpi	r24, 0x80	; 128
    3e22:	69 f5       	brne	.+90     	; 0x3e7e <USB_Device_ProcessControlRequest+0x2ac>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3e24:	80 91 e8 00 	lds	r24, 0x00E8
    3e28:	87 7f       	andi	r24, 0xF7	; 247
    3e2a:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
    3e2e:	80 91 28 04 	lds	r24, 0x0428
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    3e32:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3e36:	80 91 e8 00 	lds	r24, 0x00E8
    3e3a:	8e 77       	andi	r24, 0x7E	; 126
    3e3c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    3e40:	07 dd       	rcall	.-1522   	; 0x3850 <Endpoint_ClearStatusStage>
    3e42:	1d c0       	rjmp	.+58     	; 0x3e7e <USB_Device_ProcessControlRequest+0x2ac>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3e44:	88 23       	and	r24, r24
    3e46:	d9 f4       	brne	.+54     	; 0x3e7e <USB_Device_ProcessControlRequest+0x2ac>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    3e48:	90 91 2d 04 	lds	r25, 0x042D
    3e4c:	92 30       	cpi	r25, 0x02	; 2
    3e4e:	b8 f4       	brcc	.+46     	; 0x3e7e <USB_Device_ProcessControlRequest+0x2ac>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3e50:	80 91 e8 00 	lds	r24, 0x00E8
    3e54:	87 7f       	andi	r24, 0xF7	; 247
    3e56:	80 93 e8 00 	sts	0x00E8, r24
	}
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    3e5a:	90 93 28 04 	sts	0x0428, r25

	Endpoint_ClearStatusStage();
    3e5e:	f8 dc       	rcall	.-1552   	; 0x3850 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
    3e60:	80 91 28 04 	lds	r24, 0x0428
    3e64:	88 23       	and	r24, r24
    3e66:	31 f4       	brne	.+12     	; 0x3e74 <USB_Device_ProcessControlRequest+0x2a2>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3e68:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3e6c:	87 fd       	sbrc	r24, 7
    3e6e:	02 c0       	rjmp	.+4      	; 0x3e74 <USB_Device_ProcessControlRequest+0x2a2>
    3e70:	81 e0       	ldi	r24, 0x01	; 1
    3e72:	01 c0       	rjmp	.+2      	; 0x3e76 <USB_Device_ProcessControlRequest+0x2a4>
    3e74:	84 e0       	ldi	r24, 0x04	; 4
    3e76:	80 93 2a 04 	sts	0x042A, r24

	EVENT_USB_Device_ConfigurationChanged();
    3e7a:	0e 94 98 01 	call	0x330	; 0x330 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3e7e:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    3e82:	83 ff       	sbrs	r24, 3
    3e84:	0a c0       	rjmp	.+20     	; 0x3e9a <USB_Device_ProcessControlRequest+0x2c8>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3e86:	80 91 eb 00 	lds	r24, 0x00EB
    3e8a:	80 62       	ori	r24, 0x20	; 32
    3e8c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3e90:	80 91 e8 00 	lds	r24, 0x00E8
    3e94:	87 7f       	andi	r24, 0xF7	; 247
    3e96:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    3e9a:	ac 96       	adiw	r28, 0x2c	; 44
    3e9c:	0f b6       	in	r0, 0x3f	; 63
    3e9e:	f8 94       	cli
    3ea0:	de bf       	out	0x3e, r29	; 62
    3ea2:	0f be       	out	0x3f, r0	; 63
    3ea4:	cd bf       	out	0x3d, r28	; 61
    3ea6:	cf 91       	pop	r28
    3ea8:	df 91       	pop	r29
    3eaa:	1f 91       	pop	r17
    3eac:	0f 91       	pop	r16
    3eae:	08 95       	ret

00003eb0 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    3eb0:	08 95       	ret

00003eb2 <Endpoint_Write_Control_Stream_LE>:
    3eb2:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    3eb4:	40 91 31 04 	lds	r20, 0x0431
    3eb8:	50 91 32 04 	lds	r21, 0x0432
    3ebc:	46 17       	cp	r20, r22
    3ebe:	57 07       	cpc	r21, r23
    3ec0:	18 f4       	brcc	.+6      	; 0x3ec8 <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    3ec2:	f9 01       	movw	r30, r18
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	3d c0       	rjmp	.+122    	; 0x3f42 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    3ec8:	61 15       	cp	r22, r1
    3eca:	71 05       	cpc	r23, r1
    3ecc:	11 f0       	breq	.+4      	; 0x3ed2 <Endpoint_Write_Control_Stream_LE+0x20>
    3ece:	ab 01       	movw	r20, r22
    3ed0:	f8 cf       	rjmp	.-16     	; 0x3ec2 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3ed2:	80 91 e8 00 	lds	r24, 0x00E8
    3ed6:	8e 77       	andi	r24, 0x7E	; 126
    3ed8:	80 93 e8 00 	sts	0x00E8, r24
    3edc:	40 e0       	ldi	r20, 0x00	; 0
    3ede:	50 e0       	ldi	r21, 0x00	; 0
    3ee0:	f0 cf       	rjmp	.-32     	; 0x3ec2 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3ee2:	80 91 2a 04 	lds	r24, 0x042A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3ee6:	88 23       	and	r24, r24
    3ee8:	f1 f1       	breq	.+124    	; 0x3f66 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3eea:	85 30       	cpi	r24, 0x05	; 5
    3eec:	f1 f1       	breq	.+124    	; 0x3f6a <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3eee:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3ef2:	83 ff       	sbrs	r24, 3
    3ef4:	02 c0       	rjmp	.+4      	; 0x3efa <Endpoint_Write_Control_Stream_LE+0x48>
    3ef6:	81 e0       	ldi	r24, 0x01	; 1
    3ef8:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3efa:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    3efe:	82 fd       	sbrc	r24, 2
    3f00:	2c c0       	rjmp	.+88     	; 0x3f5a <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3f02:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    3f06:	80 ff       	sbrs	r24, 0
    3f08:	1c c0       	rjmp	.+56     	; 0x3f42 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    3f0a:	20 91 f2 00 	lds	r18, 0x00F2
    3f0e:	30 91 f3 00 	lds	r19, 0x00F3
    3f12:	07 c0       	rjmp	.+14     	; 0x3f22 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    3f14:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    3f16:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
    3f1a:	41 50       	subi	r20, 0x01	; 1
    3f1c:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    3f1e:	2f 5f       	subi	r18, 0xFF	; 255
    3f20:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    3f22:	41 15       	cp	r20, r1
    3f24:	51 05       	cpc	r21, r1
    3f26:	19 f0       	breq	.+6      	; 0x3f2e <Endpoint_Write_Control_Stream_LE+0x7c>
    3f28:	28 30       	cpi	r18, 0x08	; 8
    3f2a:	31 05       	cpc	r19, r1
    3f2c:	98 f3       	brcs	.-26     	; 0x3f14 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	28 30       	cpi	r18, 0x08	; 8
    3f32:	31 05       	cpc	r19, r1
    3f34:	09 f4       	brne	.+2      	; 0x3f38 <Endpoint_Write_Control_Stream_LE+0x86>
    3f36:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3f38:	80 91 e8 00 	lds	r24, 0x00E8
    3f3c:	8e 77       	andi	r24, 0x7E	; 126
    3f3e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    3f42:	41 15       	cp	r20, r1
    3f44:	51 05       	cpc	r21, r1
    3f46:	69 f6       	brne	.-102    	; 0x3ee2 <Endpoint_Write_Control_Stream_LE+0x30>
    3f48:	99 23       	and	r25, r25
    3f4a:	59 f6       	brne	.-106    	; 0x3ee2 <Endpoint_Write_Control_Stream_LE+0x30>
    3f4c:	06 c0       	rjmp	.+12     	; 0x3f5a <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3f4e:	80 91 2a 04 	lds	r24, 0x042A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3f52:	88 23       	and	r24, r24
    3f54:	41 f0       	breq	.+16     	; 0x3f66 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3f56:	85 30       	cpi	r24, 0x05	; 5
    3f58:	41 f0       	breq	.+16     	; 0x3f6a <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3f5a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    3f5e:	82 ff       	sbrs	r24, 2
    3f60:	f6 cf       	rjmp	.-20     	; 0x3f4e <Endpoint_Write_Control_Stream_LE+0x9c>
    3f62:	80 e0       	ldi	r24, 0x00	; 0
    3f64:	08 95       	ret
    3f66:	82 e0       	ldi	r24, 0x02	; 2
    3f68:	08 95       	ret
    3f6a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3f6c:	08 95       	ret

00003f6e <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
    3f6e:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    3f70:	40 91 31 04 	lds	r20, 0x0431
    3f74:	50 91 32 04 	lds	r21, 0x0432
    3f78:	46 17       	cp	r20, r22
    3f7a:	57 07       	cpc	r21, r23
    3f7c:	10 f4       	brcc	.+4      	; 0x3f82 <Endpoint_Write_Control_PStream_LE+0x14>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    3f7e:	60 e0       	ldi	r22, 0x00	; 0
    3f80:	40 c0       	rjmp	.+128    	; 0x4002 <Endpoint_Write_Control_PStream_LE+0x94>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    3f82:	61 15       	cp	r22, r1
    3f84:	71 05       	cpc	r23, r1
    3f86:	11 f0       	breq	.+4      	; 0x3f8c <Endpoint_Write_Control_PStream_LE+0x1e>
    3f88:	ab 01       	movw	r20, r22
    3f8a:	f9 cf       	rjmp	.-14     	; 0x3f7e <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3f8c:	80 91 e8 00 	lds	r24, 0x00E8
    3f90:	8e 77       	andi	r24, 0x7E	; 126
    3f92:	80 93 e8 00 	sts	0x00E8, r24
    3f96:	40 e0       	ldi	r20, 0x00	; 0
    3f98:	50 e0       	ldi	r21, 0x00	; 0
    3f9a:	f1 cf       	rjmp	.-30     	; 0x3f7e <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3f9c:	80 91 2a 04 	lds	r24, 0x042A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3fa0:	88 23       	and	r24, r24
    3fa2:	09 f4       	brne	.+2      	; 0x3fa6 <Endpoint_Write_Control_PStream_LE+0x38>
    3fa4:	40 c0       	rjmp	.+128    	; 0x4026 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3fa6:	85 30       	cpi	r24, 0x05	; 5
    3fa8:	09 f4       	brne	.+2      	; 0x3fac <Endpoint_Write_Control_PStream_LE+0x3e>
    3faa:	3f c0       	rjmp	.+126    	; 0x402a <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3fac:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3fb0:	83 ff       	sbrs	r24, 3
    3fb2:	02 c0       	rjmp	.+4      	; 0x3fb8 <Endpoint_Write_Control_PStream_LE+0x4a>
    3fb4:	81 e0       	ldi	r24, 0x01	; 1
    3fb6:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3fb8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    3fbc:	82 fd       	sbrc	r24, 2
    3fbe:	2d c0       	rjmp	.+90     	; 0x401a <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3fc0:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    3fc4:	80 ff       	sbrs	r24, 0
    3fc6:	1d c0       	rjmp	.+58     	; 0x4002 <Endpoint_Write_Control_PStream_LE+0x94>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    3fc8:	80 91 f2 00 	lds	r24, 0x00F2
    3fcc:	90 91 f3 00 	lds	r25, 0x00F3
    3fd0:	09 c0       	rjmp	.+18     	; 0x3fe4 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    3fd2:	f9 01       	movw	r30, r18
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    3fd4:	2f 5f       	subi	r18, 0xFF	; 255
    3fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    3fd8:	e4 91       	lpm	r30, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    3fda:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
    3fde:	41 50       	subi	r20, 0x01	; 1
    3fe0:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    3fe2:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    3fe4:	41 15       	cp	r20, r1
    3fe6:	51 05       	cpc	r21, r1
    3fe8:	19 f0       	breq	.+6      	; 0x3ff0 <Endpoint_Write_Control_PStream_LE+0x82>
    3fea:	88 30       	cpi	r24, 0x08	; 8
    3fec:	91 05       	cpc	r25, r1
    3fee:	88 f3       	brcs	.-30     	; 0x3fd2 <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    3ff0:	60 e0       	ldi	r22, 0x00	; 0
    3ff2:	08 97       	sbiw	r24, 0x08	; 8
    3ff4:	09 f4       	brne	.+2      	; 0x3ff8 <Endpoint_Write_Control_PStream_LE+0x8a>
    3ff6:	61 e0       	ldi	r22, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3ff8:	80 91 e8 00 	lds	r24, 0x00E8
    3ffc:	8e 77       	andi	r24, 0x7E	; 126
    3ffe:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    4002:	41 15       	cp	r20, r1
    4004:	51 05       	cpc	r21, r1
    4006:	51 f6       	brne	.-108    	; 0x3f9c <Endpoint_Write_Control_PStream_LE+0x2e>
    4008:	66 23       	and	r22, r22
    400a:	41 f6       	brne	.-112    	; 0x3f9c <Endpoint_Write_Control_PStream_LE+0x2e>
    400c:	06 c0       	rjmp	.+12     	; 0x401a <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    400e:	80 91 2a 04 	lds	r24, 0x042A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    4012:	88 23       	and	r24, r24
    4014:	41 f0       	breq	.+16     	; 0x4026 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    4016:	85 30       	cpi	r24, 0x05	; 5
    4018:	41 f0       	breq	.+16     	; 0x402a <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    401a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    401e:	82 ff       	sbrs	r24, 2
    4020:	f6 cf       	rjmp	.-20     	; 0x400e <Endpoint_Write_Control_PStream_LE+0xa0>
    4022:	80 e0       	ldi	r24, 0x00	; 0
    4024:	08 95       	ret
    4026:	82 e0       	ldi	r24, 0x02	; 2
    4028:	08 95       	ret
    402a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    402c:	08 95       	ret

0000402e <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
    402e:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    4030:	61 15       	cp	r22, r1
    4032:	71 05       	cpc	r23, r1
    4034:	29 f4       	brne	.+10     	; 0x4040 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    4036:	80 91 e8 00 	lds	r24, 0x00E8
    403a:	8b 77       	andi	r24, 0x7B	; 123
    403c:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    4040:	f9 01       	movw	r30, r18
    4042:	22 c0       	rjmp	.+68     	; 0x4088 <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    4044:	80 91 2a 04 	lds	r24, 0x042A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    4048:	88 23       	and	r24, r24
    404a:	71 f1       	breq	.+92     	; 0x40a8 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    404c:	85 30       	cpi	r24, 0x05	; 5
    404e:	71 f1       	breq	.+92     	; 0x40ac <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4050:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    4054:	83 ff       	sbrs	r24, 3
    4056:	02 c0       	rjmp	.+4      	; 0x405c <Endpoint_Read_Control_Stream_LE+0x2e>
    4058:	81 e0       	ldi	r24, 0x01	; 1
    405a:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    405c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    4060:	82 ff       	sbrs	r24, 2
    4062:	f0 cf       	rjmp	.-32     	; 0x4044 <Endpoint_Read_Control_Stream_LE+0x16>
    4064:	06 c0       	rjmp	.+12     	; 0x4072 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    4066:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    406a:	81 93       	st	Z+, r24
				Length--;
    406c:	61 50       	subi	r22, 0x01	; 1
    406e:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    4070:	31 f0       	breq	.+12     	; 0x407e <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    4072:	80 91 f2 00 	lds	r24, 0x00F2
    4076:	90 91 f3 00 	lds	r25, 0x00F3
    407a:	89 2b       	or	r24, r25
    407c:	a1 f7       	brne	.-24     	; 0x4066 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    407e:	80 91 e8 00 	lds	r24, 0x00E8
    4082:	8b 77       	andi	r24, 0x7B	; 123
    4084:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    4088:	61 15       	cp	r22, r1
    408a:	71 05       	cpc	r23, r1
    408c:	d9 f6       	brne	.-74     	; 0x4044 <Endpoint_Read_Control_Stream_LE+0x16>
    408e:	06 c0       	rjmp	.+12     	; 0x409c <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    4090:	80 91 2a 04 	lds	r24, 0x042A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    4094:	88 23       	and	r24, r24
    4096:	41 f0       	breq	.+16     	; 0x40a8 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    4098:	85 30       	cpi	r24, 0x05	; 5
    409a:	41 f0       	breq	.+16     	; 0x40ac <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    409c:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    40a0:	80 ff       	sbrs	r24, 0
    40a2:	f6 cf       	rjmp	.-20     	; 0x4090 <Endpoint_Read_Control_Stream_LE+0x62>
    40a4:	80 e0       	ldi	r24, 0x00	; 0
    40a6:	08 95       	ret
    40a8:	82 e0       	ldi	r24, 0x02	; 2
    40aa:	08 95       	ret
    40ac:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    40ae:	08 95       	ret

000040b0 <Endpoint_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    40b0:	df 92       	push	r13
    40b2:	ef 92       	push	r14
    40b4:	ff 92       	push	r15
    40b6:	0f 93       	push	r16
    40b8:	1f 93       	push	r17
    40ba:	cf 93       	push	r28
    40bc:	df 93       	push	r29
    40be:	18 2f       	mov	r17, r24
    40c0:	09 2f       	mov	r16, r25
    40c2:	eb 01       	movw	r28, r22
    40c4:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    40c6:	e5 db       	rcall	.-2102   	; 0x3892 <Endpoint_WaitUntilReady>
    40c8:	d8 2e       	mov	r13, r24
    40ca:	88 23       	and	r24, r24
    40cc:	19 f5       	brne	.+70     	; 0x4114 <Endpoint_Read_Stream_LE+0x64>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    40ce:	81 2f       	mov	r24, r17
    40d0:	90 2f       	mov	r25, r16
    40d2:	9c 01       	movw	r18, r24
    40d4:	89 01       	movw	r16, r18
    40d6:	1c c0       	rjmp	.+56     	; 0x4110 <Endpoint_Read_Stream_LE+0x60>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    40d8:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    40dc:	85 fd       	sbrc	r24, 5
    40de:	12 c0       	rjmp	.+36     	; 0x4104 <Endpoint_Read_Stream_LE+0x54>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    40e0:	80 91 e8 00 	lds	r24, 0x00E8
    40e4:	8b 77       	andi	r24, 0x7B	; 123
    40e6:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    40ea:	e1 14       	cp	r14, r1
    40ec:	f1 04       	cpc	r15, r1
    40ee:	31 f0       	breq	.+12     	; 0x40fc <Endpoint_Read_Stream_LE+0x4c>
    40f0:	f7 01       	movw	r30, r14
    40f2:	09 95       	icall
    40f4:	81 30       	cpi	r24, 0x01	; 1
    40f6:	11 f4       	brne	.+4      	; 0x40fc <Endpoint_Read_Stream_LE+0x4c>
    40f8:	85 e0       	ldi	r24, 0x05	; 5
    40fa:	0d c0       	rjmp	.+26     	; 0x4116 <Endpoint_Read_Stream_LE+0x66>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    40fc:	ca db       	rcall	.-2156   	; 0x3892 <Endpoint_WaitUntilReady>
    40fe:	88 23       	and	r24, r24
    4100:	39 f0       	breq	.+14     	; 0x4110 <Endpoint_Read_Stream_LE+0x60>
    4102:	09 c0       	rjmp	.+18     	; 0x4116 <Endpoint_Read_Stream_LE+0x66>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    4104:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    4108:	f8 01       	movw	r30, r16
    410a:	81 93       	st	Z+, r24
    410c:	8f 01       	movw	r16, r30
			Length--;
    410e:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    4110:	20 97       	sbiw	r28, 0x00	; 0
    4112:	11 f7       	brne	.-60     	; 0x40d8 <Endpoint_Read_Stream_LE+0x28>
    4114:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    4116:	df 91       	pop	r29
    4118:	cf 91       	pop	r28
    411a:	1f 91       	pop	r17
    411c:	0f 91       	pop	r16
    411e:	ff 90       	pop	r15
    4120:	ef 90       	pop	r14
    4122:	df 90       	pop	r13
    4124:	08 95       	ret

00004126 <Endpoint_Write_Stream_BE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    4126:	df 92       	push	r13
    4128:	ef 92       	push	r14
    412a:	ff 92       	push	r15
    412c:	0f 93       	push	r16
    412e:	1f 93       	push	r17
    4130:	cf 93       	push	r28
    4132:	df 93       	push	r29
    4134:	8c 01       	movw	r16, r24
    4136:	eb 01       	movw	r28, r22
    4138:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    413a:	ab db       	rcall	.-2218   	; 0x3892 <Endpoint_WaitUntilReady>
    413c:	d8 2e       	mov	r13, r24
    413e:	88 23       	and	r24, r24
    4140:	21 f5       	brne	.+72     	; 0x418a <Endpoint_Write_Stream_BE+0x64>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    4142:	21 97       	sbiw	r28, 0x01	; 1
    4144:	0c 0f       	add	r16, r28
    4146:	1d 1f       	adc	r17, r29
    4148:	21 96       	adiw	r28, 0x01	; 1
    414a:	1d c0       	rjmp	.+58     	; 0x4186 <Endpoint_Write_Stream_BE+0x60>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    414c:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    4150:	85 fd       	sbrc	r24, 5
    4152:	12 c0       	rjmp	.+36     	; 0x4178 <Endpoint_Write_Stream_BE+0x52>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4154:	80 91 e8 00 	lds	r24, 0x00E8
    4158:	8e 77       	andi	r24, 0x7E	; 126
    415a:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    415e:	e1 14       	cp	r14, r1
    4160:	f1 04       	cpc	r15, r1
    4162:	31 f0       	breq	.+12     	; 0x4170 <Endpoint_Write_Stream_BE+0x4a>
    4164:	f7 01       	movw	r30, r14
    4166:	09 95       	icall
    4168:	81 30       	cpi	r24, 0x01	; 1
    416a:	11 f4       	brne	.+4      	; 0x4170 <Endpoint_Write_Stream_BE+0x4a>
    416c:	85 e0       	ldi	r24, 0x05	; 5
    416e:	0e c0       	rjmp	.+28     	; 0x418c <Endpoint_Write_Stream_BE+0x66>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    4170:	90 db       	rcall	.-2272   	; 0x3892 <Endpoint_WaitUntilReady>
    4172:	88 23       	and	r24, r24
    4174:	41 f0       	breq	.+16     	; 0x4186 <Endpoint_Write_Stream_BE+0x60>
    4176:	0a c0       	rjmp	.+20     	; 0x418c <Endpoint_Write_Stream_BE+0x66>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    4178:	f8 01       	movw	r30, r16
    417a:	80 81       	ld	r24, Z
    417c:	01 50       	subi	r16, 0x01	; 1
    417e:	10 40       	sbci	r17, 0x00	; 0
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    4180:	80 93 f1 00 	sts	0x00F1, r24
			Length--;
    4184:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    4186:	20 97       	sbiw	r28, 0x00	; 0
    4188:	09 f7       	brne	.-62     	; 0x414c <Endpoint_Write_Stream_BE+0x26>
    418a:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    418c:	df 91       	pop	r29
    418e:	cf 91       	pop	r28
    4190:	1f 91       	pop	r17
    4192:	0f 91       	pop	r16
    4194:	ff 90       	pop	r15
    4196:	ef 90       	pop	r14
    4198:	df 90       	pop	r13
    419a:	08 95       	ret

0000419c <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    419c:	df 92       	push	r13
    419e:	ef 92       	push	r14
    41a0:	ff 92       	push	r15
    41a2:	0f 93       	push	r16
    41a4:	1f 93       	push	r17
    41a6:	cf 93       	push	r28
    41a8:	df 93       	push	r29
    41aa:	18 2f       	mov	r17, r24
    41ac:	09 2f       	mov	r16, r25
    41ae:	eb 01       	movw	r28, r22
    41b0:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    41b2:	6f db       	rcall	.-2338   	; 0x3892 <Endpoint_WaitUntilReady>
    41b4:	d8 2e       	mov	r13, r24
    41b6:	88 23       	and	r24, r24
    41b8:	19 f5       	brne	.+70     	; 0x4200 <Endpoint_Write_Stream_LE+0x64>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    41ba:	81 2f       	mov	r24, r17
    41bc:	90 2f       	mov	r25, r16
    41be:	9c 01       	movw	r18, r24
    41c0:	89 01       	movw	r16, r18
    41c2:	1c c0       	rjmp	.+56     	; 0x41fc <Endpoint_Write_Stream_LE+0x60>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    41c4:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    41c8:	85 fd       	sbrc	r24, 5
    41ca:	12 c0       	rjmp	.+36     	; 0x41f0 <Endpoint_Write_Stream_LE+0x54>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    41cc:	80 91 e8 00 	lds	r24, 0x00E8
    41d0:	8e 77       	andi	r24, 0x7E	; 126
    41d2:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    41d6:	e1 14       	cp	r14, r1
    41d8:	f1 04       	cpc	r15, r1
    41da:	31 f0       	breq	.+12     	; 0x41e8 <Endpoint_Write_Stream_LE+0x4c>
    41dc:	f7 01       	movw	r30, r14
    41de:	09 95       	icall
    41e0:	81 30       	cpi	r24, 0x01	; 1
    41e2:	11 f4       	brne	.+4      	; 0x41e8 <Endpoint_Write_Stream_LE+0x4c>
    41e4:	85 e0       	ldi	r24, 0x05	; 5
    41e6:	0d c0       	rjmp	.+26     	; 0x4202 <Endpoint_Write_Stream_LE+0x66>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    41e8:	54 db       	rcall	.-2392   	; 0x3892 <Endpoint_WaitUntilReady>
    41ea:	88 23       	and	r24, r24
    41ec:	39 f0       	breq	.+14     	; 0x41fc <Endpoint_Write_Stream_LE+0x60>
    41ee:	09 c0       	rjmp	.+18     	; 0x4202 <Endpoint_Write_Stream_LE+0x66>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    41f0:	f8 01       	movw	r30, r16
    41f2:	81 91       	ld	r24, Z+
    41f4:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    41f6:	80 93 f1 00 	sts	0x00F1, r24
			Length--;
    41fa:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    41fc:	20 97       	sbiw	r28, 0x00	; 0
    41fe:	11 f7       	brne	.-60     	; 0x41c4 <Endpoint_Write_Stream_LE+0x28>
    4200:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    4202:	df 91       	pop	r29
    4204:	cf 91       	pop	r28
    4206:	1f 91       	pop	r17
    4208:	0f 91       	pop	r16
    420a:	ff 90       	pop	r15
    420c:	ef 90       	pop	r14
    420e:	df 90       	pop	r13
    4210:	08 95       	ret

00004212 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    4212:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    4214:	80 91 2a 04 	lds	r24, 0x042A
    4218:	88 23       	and	r24, r24
    421a:	61 f0       	breq	.+24     	; 0x4234 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    421c:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4220:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4224:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    4228:	83 ff       	sbrs	r24, 3
    422a:	01 c0       	rjmp	.+2      	; 0x422e <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    422c:	d2 dc       	rcall	.-1628   	; 0x3bd2 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    422e:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4230:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    4234:	1f 91       	pop	r17
    4236:	08 95       	ret

00004238 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    4238:	4f 92       	push	r4
    423a:	5f 92       	push	r5
    423c:	6f 92       	push	r6
    423e:	7f 92       	push	r7
    4240:	8f 92       	push	r8
    4242:	9f 92       	push	r9
    4244:	af 92       	push	r10
    4246:	bf 92       	push	r11
    4248:	cf 92       	push	r12
    424a:	df 92       	push	r13
    424c:	ef 92       	push	r14
    424e:	ff 92       	push	r15
    4250:	0f 93       	push	r16
    4252:	1f 93       	push	r17
    4254:	df 93       	push	r29
    4256:	cf 93       	push	r28
    4258:	00 d0       	rcall	.+0      	; 0x425a <HID_Device_USBTask+0x22>
    425a:	0f 92       	push	r0
    425c:	cd b7       	in	r28, 0x3d	; 61
    425e:	de b7       	in	r29, 0x3e	; 62
    4260:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);

			Endpoint_ClearIN();
		}
	}
}
    4262:	6d b6       	in	r6, 0x3d	; 61
    4264:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    4266:	80 91 2a 04 	lds	r24, 0x042A
    426a:	84 30       	cpi	r24, 0x04	; 4
    426c:	09 f0       	breq	.+2      	; 0x4270 <HID_Device_USBTask+0x38>
    426e:	86 c0       	rjmp	.+268    	; 0x437c <HID_Device_USBTask+0x144>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    4270:	f7 01       	movw	r30, r14
    4272:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4274:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    4278:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    427c:	85 ff       	sbrs	r24, 5
    427e:	7e c0       	rjmp	.+252    	; 0x437c <HID_Device_USBTask+0x144>
    4280:	5d b6       	in	r5, 0x3d	; 61
    4282:	4e b6       	in	r4, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    4284:	47 81       	ldd	r20, Z+7	; 0x07
    4286:	8d b7       	in	r24, 0x3d	; 61
    4288:	9e b7       	in	r25, 0x3e	; 62
    428a:	84 1b       	sub	r24, r20
    428c:	91 09       	sbc	r25, r1
    428e:	0f b6       	in	r0, 0x3f	; 63
    4290:	f8 94       	cli
    4292:	9e bf       	out	0x3e, r25	; 62
    4294:	0f be       	out	0x3f, r0	; 63
    4296:	8d bf       	out	0x3d, r24	; 61
    4298:	0d b7       	in	r16, 0x3d	; 61
    429a:	1e b7       	in	r17, 0x3e	; 62
    429c:	0f 5f       	subi	r16, 0xFF	; 255
    429e:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
    42a0:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    42a2:	1b 82       	std	Y+3, r1	; 0x03
    42a4:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    42a6:	c0 2e       	mov	r12, r16
    42a8:	91 2e       	mov	r9, r17
    42aa:	c8 01       	movw	r24, r16
    42ac:	60 e0       	ldi	r22, 0x00	; 0
    42ae:	70 e0       	ldi	r23, 0x00	; 0
    42b0:	50 e0       	ldi	r21, 0x00	; 0
    42b2:	40 d4       	rcall	.+2176   	; 0x4b34 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
    42b4:	c7 01       	movw	r24, r14
    42b6:	be 01       	movw	r22, r28
    42b8:	6f 5f       	subi	r22, 0xFF	; 255
    42ba:	7f 4f       	sbci	r23, 0xFF	; 255
    42bc:	40 e0       	ldi	r20, 0x00	; 0
    42be:	98 01       	movw	r18, r16
    42c0:	8e 01       	movw	r16, r28
    42c2:	0e 5f       	subi	r16, 0xFE	; 254
    42c4:	1f 4f       	sbci	r17, 0xFF	; 255
    42c6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <CALLBACK_HID_Device_CreateHIDReport>
    42ca:	88 2e       	mov	r8, r24
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    42cc:	f7 01       	movw	r30, r14
    42ce:	81 85       	ldd	r24, Z+9	; 0x09
    42d0:	92 85       	ldd	r25, Z+10	; 0x0a
    42d2:	89 2b       	or	r24, r25
    42d4:	19 f4       	brne	.+6      	; 0x42dc <HID_Device_USBTask+0xa4>
    42d6:	aa 24       	eor	r10, r10
    42d8:	bb 24       	eor	r11, r11
    42da:	0b c0       	rjmp	.+22     	; 0x42f2 <HID_Device_USBTask+0xba>
    42dc:	20 e0       	ldi	r18, 0x00	; 0
    42de:	f7 01       	movw	r30, r14
    42e0:	83 85       	ldd	r24, Z+11	; 0x0b
    42e2:	94 85       	ldd	r25, Z+12	; 0x0c
    42e4:	89 2b       	or	r24, r25
    42e6:	09 f0       	breq	.+2      	; 0x42ea <HID_Device_USBTask+0xb2>
    42e8:	21 e0       	ldi	r18, 0x01	; 1
    42ea:	81 e0       	ldi	r24, 0x01	; 1
    42ec:	28 27       	eor	r18, r24
    42ee:	a2 2e       	mov	r10, r18
    42f0:	bb 24       	eor	r11, r11

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    42f2:	f7 01       	movw	r30, r14
    42f4:	05 81       	ldd	r16, Z+5	; 0x05
    42f6:	16 81       	ldd	r17, Z+6	; 0x06
    42f8:	01 15       	cp	r16, r1
    42fa:	11 05       	cpc	r17, r1
    42fc:	11 f4       	brne	.+4      	; 0x4302 <HID_Device_USBTask+0xca>
    42fe:	dd 24       	eor	r13, r13
    4300:	12 c0       	rjmp	.+36     	; 0x4326 <HID_Device_USBTask+0xee>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    4302:	4a 81       	ldd	r20, Y+2	; 0x02
    4304:	5b 81       	ldd	r21, Y+3	; 0x03
    4306:	8c 2d       	mov	r24, r12
    4308:	99 2d       	mov	r25, r9
    430a:	b8 01       	movw	r22, r16
    430c:	fd d3       	rcall	.+2042   	; 0x4b08 <memcmp>
    430e:	dd 24       	eor	r13, r13
    4310:	00 97       	sbiw	r24, 0x00	; 0
    4312:	11 f0       	breq	.+4      	; 0x4318 <HID_Device_USBTask+0xe0>
    4314:	dd 24       	eor	r13, r13
    4316:	d3 94       	inc	r13
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    4318:	f7 01       	movw	r30, r14
    431a:	47 81       	ldd	r20, Z+7	; 0x07
    431c:	c8 01       	movw	r24, r16
    431e:	6c 2d       	mov	r22, r12
    4320:	79 2d       	mov	r23, r9
    4322:	50 e0       	ldi	r21, 0x00	; 0
    4324:	fe d3       	rcall	.+2044   	; 0x4b22 <memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    4326:	8a 81       	ldd	r24, Y+2	; 0x02
    4328:	9b 81       	ldd	r25, Y+3	; 0x03
    432a:	89 2b       	or	r24, r25
    432c:	f9 f0       	breq	.+62     	; 0x436c <HID_Device_USBTask+0x134>
    432e:	88 20       	and	r8, r8
    4330:	21 f4       	brne	.+8      	; 0x433a <HID_Device_USBTask+0x102>
    4332:	dd 20       	and	r13, r13
    4334:	11 f4       	brne	.+4      	; 0x433a <HID_Device_USBTask+0x102>
    4336:	ab 28       	or	r10, r11
    4338:	c9 f0       	breq	.+50     	; 0x436c <HID_Device_USBTask+0x134>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    433a:	f7 01       	movw	r30, r14
    433c:	81 85       	ldd	r24, Z+9	; 0x09
    433e:	92 85       	ldd	r25, Z+10	; 0x0a
    4340:	94 87       	std	Z+12, r25	; 0x0c
    4342:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    4344:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4346:	80 93 e9 00 	sts	0x00E9, r24

			if (ReportID)
    434a:	89 81       	ldd	r24, Y+1	; 0x01
    434c:	88 23       	and	r24, r24
    434e:	11 f0       	breq	.+4      	; 0x4354 <HID_Device_USBTask+0x11c>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    4350:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_Byte(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);
    4354:	6a 81       	ldd	r22, Y+2	; 0x02
    4356:	7b 81       	ldd	r23, Y+3	; 0x03
    4358:	8c 2d       	mov	r24, r12
    435a:	99 2d       	mov	r25, r9
    435c:	40 e0       	ldi	r20, 0x00	; 0
    435e:	50 e0       	ldi	r21, 0x00	; 0
    4360:	1d df       	rcall	.-454    	; 0x419c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4362:	80 91 e8 00 	lds	r24, 0x00E8
    4366:	8e 77       	andi	r24, 0x7E	; 126
    4368:	80 93 e8 00 	sts	0x00E8, r24
    436c:	85 2d       	mov	r24, r5
    436e:	94 2d       	mov	r25, r4
    4370:	9c 01       	movw	r18, r24
    4372:	0f b6       	in	r0, 0x3f	; 63
    4374:	f8 94       	cli
    4376:	3e bf       	out	0x3e, r19	; 62
    4378:	0f be       	out	0x3f, r0	; 63
    437a:	2d bf       	out	0x3d, r18	; 61

			Endpoint_ClearIN();
		}
	}
}
    437c:	0f b6       	in	r0, 0x3f	; 63
    437e:	f8 94       	cli
    4380:	7e be       	out	0x3e, r7	; 62
    4382:	0f be       	out	0x3f, r0	; 63
    4384:	6d be       	out	0x3d, r6	; 61
    4386:	0f 90       	pop	r0
    4388:	0f 90       	pop	r0
    438a:	0f 90       	pop	r0
    438c:	cf 91       	pop	r28
    438e:	df 91       	pop	r29
    4390:	1f 91       	pop	r17
    4392:	0f 91       	pop	r16
    4394:	ff 90       	pop	r15
    4396:	ef 90       	pop	r14
    4398:	df 90       	pop	r13
    439a:	cf 90       	pop	r12
    439c:	bf 90       	pop	r11
    439e:	af 90       	pop	r10
    43a0:	9f 90       	pop	r9
    43a2:	8f 90       	pop	r8
    43a4:	7f 90       	pop	r7
    43a6:	6f 90       	pop	r6
    43a8:	5f 90       	pop	r5
    43aa:	4f 90       	pop	r4
    43ac:	08 95       	ret

000043ae <HID_Device_ConfigureEndpoints>:
			break;
	}
}

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    43ae:	cf 93       	push	r28
    43b0:	df 93       	push	r29
    43b2:	dc 01       	movw	r26, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    43b4:	08 96       	adiw	r24, 0x08	; 8
    43b6:	fc 01       	movw	r30, r24
    43b8:	85 e0       	ldi	r24, 0x05	; 5
    43ba:	ef 01       	movw	r28, r30
    43bc:	19 92       	st	Y+, r1
    43be:	8a 95       	dec	r24
    43c0:	e9 f7       	brne	.-6      	; 0x43bc <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    43c2:	81 e0       	ldi	r24, 0x01	; 1
    43c4:	18 96       	adiw	r26, 0x08	; 8
    43c6:	8c 93       	st	X, r24
    43c8:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.IdleCount = 500;
    43ca:	84 ef       	ldi	r24, 0xF4	; 244
    43cc:	91 e0       	ldi	r25, 0x01	; 1
    43ce:	1a 96       	adiw	r26, 0x0a	; 10
    43d0:	9c 93       	st	X, r25
    43d2:	8e 93       	st	-X, r24
    43d4:	19 97       	sbiw	r26, 0x09	; 9

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
    43d6:	11 96       	adiw	r26, 0x01	; 1
    43d8:	3c 91       	ld	r19, X
    43da:	11 97       	sbiw	r26, 0x01	; 1
    43dc:	12 96       	adiw	r26, 0x02	; 2
    43de:	6d 91       	ld	r22, X+
    43e0:	7c 91       	ld	r23, X
    43e2:	13 97       	sbiw	r26, 0x03	; 3
    43e4:	14 96       	adiw	r26, 0x04	; 4
    43e6:	8c 91       	ld	r24, X
    43e8:	88 23       	and	r24, r24
    43ea:	11 f4       	brne	.+4      	; 0x43f0 <HID_Device_ConfigureEndpoints+0x42>
    43ec:	40 e0       	ldi	r20, 0x00	; 0
    43ee:	01 c0       	rjmp	.+2      	; 0x43f2 <HID_Device_ConfigureEndpoints+0x44>
    43f0:	44 e0       	ldi	r20, 0x04	; 4
    43f2:	20 e0       	ldi	r18, 0x00	; 0
    43f4:	88 e0       	ldi	r24, 0x08	; 8
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	03 c0       	rjmp	.+6      	; 0x4400 <HID_Device_ConfigureEndpoints+0x52>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    43fa:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    43fc:	88 0f       	add	r24, r24
    43fe:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    4400:	86 17       	cp	r24, r22
    4402:	97 07       	cpc	r25, r23
    4404:	d0 f3       	brcs	.-12     	; 0x43fa <HID_Device_ConfigureEndpoints+0x4c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
    4406:	42 60       	ori	r20, 0x02	; 2
    4408:	22 95       	swap	r18
    440a:	20 7f       	andi	r18, 0xF0	; 240
    440c:	42 2b       	or	r20, r18
    440e:	83 2f       	mov	r24, r19
    4410:	61 ec       	ldi	r22, 0xC1	; 193
    4412:	0b da       	rcall	.-3050   	; 0x382a <Endpoint_ConfigureEndpoint_Prv>
    4414:	81 11       	cpse	r24, r1
    4416:	81 e0       	ldi	r24, 0x01	; 1
	{
		return false;
	}

	return true;
}
    4418:	df 91       	pop	r29
    441a:	cf 91       	pop	r28
    441c:	08 95       	ret

0000441e <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    441e:	6f 92       	push	r6
    4420:	7f 92       	push	r7
    4422:	8f 92       	push	r8
    4424:	9f 92       	push	r9
    4426:	af 92       	push	r10
    4428:	bf 92       	push	r11
    442a:	cf 92       	push	r12
    442c:	df 92       	push	r13
    442e:	ef 92       	push	r14
    4430:	ff 92       	push	r15
    4432:	0f 93       	push	r16
    4434:	1f 93       	push	r17
    4436:	df 93       	push	r29
    4438:	cf 93       	push	r28
    443a:	00 d0       	rcall	.+0      	; 0x443c <HID_Device_ProcessControlRequest+0x1e>
    443c:	0f 92       	push	r0
    443e:	cd b7       	in	r28, 0x3d	; 61
    4440:	de b7       	in	r29, 0x3e	; 62
    4442:	4c 01       	movw	r8, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    4444:	6d b6       	in	r6, 0x3d	; 61
    4446:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4448:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    444c:	83 ff       	sbrs	r24, 3
    444e:	fa c0       	rjmp	.+500    	; 0x4644 <HID_Device_ProcessControlRequest+0x226>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    4450:	f4 01       	movw	r30, r8
    4452:	80 81       	ld	r24, Z
    4454:	90 e0       	ldi	r25, 0x00	; 0
    4456:	20 91 2f 04 	lds	r18, 0x042F
    445a:	30 91 30 04 	lds	r19, 0x0430
    445e:	28 17       	cp	r18, r24
    4460:	39 07       	cpc	r19, r25
    4462:	09 f0       	breq	.+2      	; 0x4466 <HID_Device_ProcessControlRequest+0x48>
    4464:	ef c0       	rjmp	.+478    	; 0x4644 <HID_Device_ProcessControlRequest+0x226>
	  return;

	switch (USB_ControlRequest.bRequest)
    4466:	80 91 2c 04 	lds	r24, 0x042C
    446a:	83 30       	cpi	r24, 0x03	; 3
    446c:	09 f4       	brne	.+2      	; 0x4470 <HID_Device_ProcessControlRequest+0x52>
    446e:	9a c0       	rjmp	.+308    	; 0x45a4 <HID_Device_ProcessControlRequest+0x186>
    4470:	84 30       	cpi	r24, 0x04	; 4
    4472:	30 f4       	brcc	.+12     	; 0x4480 <HID_Device_ProcessControlRequest+0x62>
    4474:	81 30       	cpi	r24, 0x01	; 1
    4476:	71 f0       	breq	.+28     	; 0x4494 <HID_Device_ProcessControlRequest+0x76>
    4478:	82 30       	cpi	r24, 0x02	; 2
    447a:	09 f0       	breq	.+2      	; 0x447e <HID_Device_ProcessControlRequest+0x60>
    447c:	e3 c0       	rjmp	.+454    	; 0x4644 <HID_Device_ProcessControlRequest+0x226>
    447e:	ca c0       	rjmp	.+404    	; 0x4614 <HID_Device_ProcessControlRequest+0x1f6>
    4480:	8a 30       	cpi	r24, 0x0A	; 10
    4482:	09 f4       	brne	.+2      	; 0x4486 <HID_Device_ProcessControlRequest+0x68>
    4484:	af c0       	rjmp	.+350    	; 0x45e4 <HID_Device_ProcessControlRequest+0x1c6>
    4486:	8b 30       	cpi	r24, 0x0B	; 11
    4488:	09 f4       	brne	.+2      	; 0x448c <HID_Device_ProcessControlRequest+0x6e>
    448a:	99 c0       	rjmp	.+306    	; 0x45be <HID_Device_ProcessControlRequest+0x1a0>
    448c:	89 30       	cpi	r24, 0x09	; 9
    448e:	09 f0       	breq	.+2      	; 0x4492 <HID_Device_ProcessControlRequest+0x74>
    4490:	d9 c0       	rjmp	.+434    	; 0x4644 <HID_Device_ProcessControlRequest+0x226>
    4492:	50 c0       	rjmp	.+160    	; 0x4534 <HID_Device_ProcessControlRequest+0x116>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    4494:	80 91 2b 04 	lds	r24, 0x042B
    4498:	81 3a       	cpi	r24, 0xA1	; 161
    449a:	09 f0       	breq	.+2      	; 0x449e <HID_Device_ProcessControlRequest+0x80>
    449c:	d3 c0       	rjmp	.+422    	; 0x4644 <HID_Device_ProcessControlRequest+0x226>
    449e:	ad b6       	in	r10, 0x3d	; 61
    44a0:	fe b6       	in	r15, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    44a2:	1b 82       	std	Y+3, r1	; 0x03
    44a4:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    44a6:	80 91 2d 04 	lds	r24, 0x042D
    44aa:	10 91 2e 04 	lds	r17, 0x042E
    44ae:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    44b0:	f4 01       	movw	r30, r8
    44b2:	47 81       	ldd	r20, Z+7	; 0x07
    44b4:	8d b7       	in	r24, 0x3d	; 61
    44b6:	9e b7       	in	r25, 0x3e	; 62
    44b8:	84 1b       	sub	r24, r20
    44ba:	91 09       	sbc	r25, r1
    44bc:	0f b6       	in	r0, 0x3f	; 63
    44be:	f8 94       	cli
    44c0:	9e bf       	out	0x3e, r25	; 62
    44c2:	0f be       	out	0x3f, r0	; 63
    44c4:	8d bf       	out	0x3d, r24	; 61
    44c6:	cd b6       	in	r12, 0x3d	; 61
    44c8:	de b6       	in	r13, 0x3e	; 62
    44ca:	08 94       	sec
    44cc:	c1 1c       	adc	r12, r1
    44ce:	d1 1c       	adc	r13, r1

				memset(ReportData, 0, sizeof(ReportData));
    44d0:	ec 2c       	mov	r14, r12
    44d2:	bd 2c       	mov	r11, r13
    44d4:	c6 01       	movw	r24, r12
    44d6:	60 e0       	ldi	r22, 0x00	; 0
    44d8:	70 e0       	ldi	r23, 0x00	; 0
    44da:	50 e0       	ldi	r21, 0x00	; 0
    44dc:	2b d3       	rcall	.+1622   	; 0x4b34 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    44de:	11 50       	subi	r17, 0x01	; 1
    44e0:	c4 01       	movw	r24, r8
    44e2:	be 01       	movw	r22, r28
    44e4:	6f 5f       	subi	r22, 0xFF	; 255
    44e6:	7f 4f       	sbci	r23, 0xFF	; 255
    44e8:	41 2f       	mov	r20, r17
    44ea:	96 01       	movw	r18, r12
    44ec:	8e 01       	movw	r16, r28
    44ee:	0e 5f       	subi	r16, 0xFE	; 254
    44f0:	1f 4f       	sbci	r17, 0xFF	; 255
    44f2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    44f6:	f4 01       	movw	r30, r8
    44f8:	25 81       	ldd	r18, Z+5	; 0x05
    44fa:	36 81       	ldd	r19, Z+6	; 0x06
    44fc:	21 15       	cp	r18, r1
    44fe:	31 05       	cpc	r19, r1
    4500:	29 f0       	breq	.+10     	; 0x450c <HID_Device_ProcessControlRequest+0xee>
				  memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    4502:	47 81       	ldd	r20, Z+7	; 0x07
    4504:	c9 01       	movw	r24, r18
    4506:	b6 01       	movw	r22, r12
    4508:	50 e0       	ldi	r21, 0x00	; 0
    450a:	0b d3       	rcall	.+1558   	; 0x4b22 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    450c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4510:	80 91 e8 00 	lds	r24, 0x00E8
    4514:	87 7f       	andi	r24, 0xF7	; 247
    4516:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    451a:	6a 81       	ldd	r22, Y+2	; 0x02
    451c:	7b 81       	ldd	r23, Y+3	; 0x03
    451e:	8e 2d       	mov	r24, r14
    4520:	9b 2d       	mov	r25, r11
    4522:	c7 dc       	rcall	.-1650   	; 0x3eb2 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    4524:	80 91 e8 00 	lds	r24, 0x00E8
    4528:	8b 77       	andi	r24, 0x7B	; 123
    452a:	80 93 e8 00 	sts	0x00E8, r24
    452e:	2a 2d       	mov	r18, r10
    4530:	3f 2d       	mov	r19, r15
    4532:	32 c0       	rjmp	.+100    	; 0x4598 <HID_Device_ProcessControlRequest+0x17a>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    4534:	80 91 2b 04 	lds	r24, 0x042B
    4538:	81 32       	cpi	r24, 0x21	; 33
    453a:	09 f0       	breq	.+2      	; 0x453e <HID_Device_ProcessControlRequest+0x120>
    453c:	83 c0       	rjmp	.+262    	; 0x4644 <HID_Device_ProcessControlRequest+0x226>
    453e:	ae b6       	in	r10, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    4540:	00 91 31 04 	lds	r16, 0x0431
    4544:	10 91 32 04 	lds	r17, 0x0432
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    4548:	c0 90 2d 04 	lds	r12, 0x042D
    454c:	d0 90 2e 04 	lds	r13, 0x042E
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    4550:	8d b7       	in	r24, 0x3d	; 61
    4552:	9e b7       	in	r25, 0x3e	; 62
    4554:	80 1b       	sub	r24, r16
    4556:	91 0b       	sbc	r25, r17
    4558:	0f b6       	in	r0, 0x3f	; 63
    455a:	f8 94       	cli
    455c:	9e bf       	out	0x3e, r25	; 62
    455e:	0f be       	out	0x3f, r0	; 63
    4560:	8d bf       	out	0x3d, r24	; 61
    4562:	ed b6       	in	r14, 0x3d	; 61
    4564:	fe b6       	in	r15, 0x3e	; 62
    4566:	08 94       	sec
    4568:	e1 1c       	adc	r14, r1
    456a:	f1 1c       	adc	r15, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    456c:	80 91 e8 00 	lds	r24, 0x00E8
    4570:	87 7f       	andi	r24, 0xF7	; 247
    4572:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    4576:	c7 01       	movw	r24, r14
    4578:	b8 01       	movw	r22, r16
    457a:	59 dd       	rcall	.-1358   	; 0x402e <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    457c:	80 91 e8 00 	lds	r24, 0x00E8
    4580:	8e 77       	andi	r24, 0x7E	; 126
    4582:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType, ReportData, ReportSize);
    4586:	da 94       	dec	r13
    4588:	c4 01       	movw	r24, r8
    458a:	6c 2d       	mov	r22, r12
    458c:	4d 2d       	mov	r20, r13
    458e:	97 01       	movw	r18, r14
    4590:	0e 94 40 01 	call	0x280	; 0x280 <CALLBACK_HID_Device_ProcessHIDReport>
    4594:	26 2d       	mov	r18, r6
    4596:	3a 2d       	mov	r19, r10
    4598:	0f b6       	in	r0, 0x3f	; 63
    459a:	f8 94       	cli
    459c:	3e bf       	out	0x3e, r19	; 62
    459e:	0f be       	out	0x3f, r0	; 63
    45a0:	2d bf       	out	0x3d, r18	; 61
    45a2:	50 c0       	rjmp	.+160    	; 0x4644 <HID_Device_ProcessControlRequest+0x226>
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    45a4:	80 91 2b 04 	lds	r24, 0x042B
    45a8:	81 3a       	cpi	r24, 0xA1	; 161
    45aa:	09 f0       	breq	.+2      	; 0x45ae <HID_Device_ProcessControlRequest+0x190>
    45ac:	4b c0       	rjmp	.+150    	; 0x4644 <HID_Device_ProcessControlRequest+0x226>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    45ae:	80 91 e8 00 	lds	r24, 0x00E8
    45b2:	87 7f       	andi	r24, 0xF7	; 247
    45b4:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Byte(HIDInterfaceInfo->State.UsingReportProtocol);
    45b8:	f4 01       	movw	r30, r8
    45ba:	80 85       	ldd	r24, Z+8	; 0x08
    45bc:	3b c0       	rjmp	.+118    	; 0x4634 <HID_Device_ProcessControlRequest+0x216>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    45be:	80 91 2b 04 	lds	r24, 0x042B
    45c2:	81 32       	cpi	r24, 0x21	; 33
    45c4:	09 f0       	breq	.+2      	; 0x45c8 <HID_Device_ProcessControlRequest+0x1aa>
    45c6:	3e c0       	rjmp	.+124    	; 0x4644 <HID_Device_ProcessControlRequest+0x226>
    45c8:	80 91 e8 00 	lds	r24, 0x00E8
    45cc:	87 7f       	andi	r24, 0xF7	; 247
    45ce:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    45d2:	3e d9       	rcall	.-3460   	; 0x3850 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	80 91 2d 04 	lds	r24, 0x042D
    45da:	81 11       	cpse	r24, r1
    45dc:	91 e0       	ldi	r25, 0x01	; 1
    45de:	f4 01       	movw	r30, r8
    45e0:	90 87       	std	Z+8, r25	; 0x08
    45e2:	30 c0       	rjmp	.+96     	; 0x4644 <HID_Device_ProcessControlRequest+0x226>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    45e4:	80 91 2b 04 	lds	r24, 0x042B
    45e8:	81 32       	cpi	r24, 0x21	; 33
    45ea:	61 f5       	brne	.+88     	; 0x4644 <HID_Device_ProcessControlRequest+0x226>
    45ec:	80 91 e8 00 	lds	r24, 0x00E8
    45f0:	87 7f       	andi	r24, 0xF7	; 247
    45f2:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    45f6:	2c d9       	rcall	.-3496   	; 0x3850 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    45f8:	80 91 2d 04 	lds	r24, 0x042D
    45fc:	90 91 2e 04 	lds	r25, 0x042E
    4600:	80 70       	andi	r24, 0x00	; 0
    4602:	76 e0       	ldi	r23, 0x06	; 6
    4604:	96 95       	lsr	r25
    4606:	87 95       	ror	r24
    4608:	7a 95       	dec	r23
    460a:	e1 f7       	brne	.-8      	; 0x4604 <HID_Device_ProcessControlRequest+0x1e6>
    460c:	f4 01       	movw	r30, r8
    460e:	92 87       	std	Z+10, r25	; 0x0a
    4610:	81 87       	std	Z+9, r24	; 0x09
    4612:	18 c0       	rjmp	.+48     	; 0x4644 <HID_Device_ProcessControlRequest+0x226>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    4614:	80 91 2b 04 	lds	r24, 0x042B
    4618:	81 3a       	cpi	r24, 0xA1	; 161
    461a:	a1 f4       	brne	.+40     	; 0x4644 <HID_Device_ProcessControlRequest+0x226>
    461c:	80 91 e8 00 	lds	r24, 0x00E8
    4620:	87 7f       	andi	r24, 0xF7	; 247
    4622:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Byte(HIDInterfaceInfo->State.IdleCount >> 2);
    4626:	f4 01       	movw	r30, r8
    4628:	81 85       	ldd	r24, Z+9	; 0x09
    462a:	92 85       	ldd	r25, Z+10	; 0x0a
    462c:	96 95       	lsr	r25
    462e:	87 95       	ror	r24
    4630:	96 95       	lsr	r25
    4632:	87 95       	ror	r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    4634:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4638:	80 91 e8 00 	lds	r24, 0x00E8
    463c:	8e 77       	andi	r24, 0x7E	; 126
    463e:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    4642:	06 d9       	rcall	.-3572   	; 0x3850 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    4644:	0f b6       	in	r0, 0x3f	; 63
    4646:	f8 94       	cli
    4648:	7e be       	out	0x3e, r7	; 62
    464a:	0f be       	out	0x3f, r0	; 63
    464c:	6d be       	out	0x3d, r6	; 61
    464e:	0f 90       	pop	r0
    4650:	0f 90       	pop	r0
    4652:	0f 90       	pop	r0
    4654:	cf 91       	pop	r28
    4656:	df 91       	pop	r29
    4658:	1f 91       	pop	r17
    465a:	0f 91       	pop	r16
    465c:	ff 90       	pop	r15
    465e:	ef 90       	pop	r14
    4660:	df 90       	pop	r13
    4662:	cf 90       	pop	r12
    4664:	bf 90       	pop	r11
    4666:	af 90       	pop	r10
    4668:	9f 90       	pop	r9
    466a:	8f 90       	pop	r8
    466c:	7f 90       	pop	r7
    466e:	6f 90       	pop	r6
    4670:	08 95       	ret

00004672 <StreamCallback_MS_Device_AbortOnMassStoreReset>:
{
	#if !defined(INTERRUPT_CONTROL_ENDPOINT)
	USB_USBTask();
	#endif

	if (*CallbackIsResetSource)
    4672:	e0 91 cc 01 	lds	r30, 0x01CC
    4676:	f0 91 cd 01 	lds	r31, 0x01CD
    467a:	80 81       	ld	r24, Z
	  return STREAMCALLBACK_Abort;
	else
	  return STREAMCALLBACK_Continue;
}
    467c:	08 95       	ret

0000467e <MS_Device_USBTask>:

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    467e:	0f 93       	push	r16
    4680:	1f 93       	push	r17
    4682:	cf 93       	push	r28
    4684:	df 93       	push	r29
    4686:	ec 01       	movw	r28, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    4688:	80 91 2a 04 	lds	r24, 0x042A
    468c:	84 30       	cpi	r24, 0x04	; 4
    468e:	09 f0       	breq	.+2      	; 0x4692 <MS_Device_USBTask+0x14>
    4690:	e1 c0       	rjmp	.+450    	; 0x4854 <MS_Device_USBTask+0x1d6>
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    4692:	9d 81       	ldd	r25, Y+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4694:	90 93 e9 00 	sts	0x00E9, r25
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    4698:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    469c:	85 ff       	sbrs	r24, 5
    469e:	a5 c0       	rjmp	.+330    	; 0x47ea <MS_Device_USBTask+0x16c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    46a0:	90 93 e9 00 	sts	0x00E9, r25

static bool MS_Device_ReadInCommandBlock(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);

	CallbackIsResetSource = &MSInterfaceInfo->State.IsMassStoreReset;
    46a4:	8e 01       	movw	r16, r28
    46a6:	0a 5c       	subi	r16, 0xCA	; 202
    46a8:	1f 4f       	sbci	r17, 0xFF	; 255
    46aa:	10 93 cd 01 	sts	0x01CD, r17
    46ae:	00 93 cc 01 	sts	0x01CC, r16
	if (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    46b2:	ce 01       	movw	r24, r28
    46b4:	0a 96       	adiw	r24, 0x0a	; 10
    46b6:	6f e0       	ldi	r22, 0x0F	; 15
    46b8:	70 e0       	ldi	r23, 0x00	; 0
    46ba:	49 e3       	ldi	r20, 0x39	; 57
    46bc:	53 e2       	ldi	r21, 0x23	; 35
    46be:	f8 dc       	rcall	.-1552   	; 0x40b0 <Endpoint_Read_Stream_LE>
    46c0:	88 23       	and	r24, r24
    46c2:	09 f0       	breq	.+2      	; 0x46c6 <MS_Device_USBTask+0x48>
    46c4:	92 c0       	rjmp	.+292    	; 0x47ea <MS_Device_USBTask+0x16c>
	                            StreamCallback_MS_Device_AbortOnMassStoreReset))
	{
		return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != MS_CBW_SIGNATURE)                  ||
    46c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    46c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    46ca:	ac 85       	ldd	r26, Y+12	; 0x0c
    46cc:	bd 85       	ldd	r27, Y+13	; 0x0d
    46ce:	85 55       	subi	r24, 0x55	; 85
    46d0:	93 45       	sbci	r25, 0x53	; 83
    46d2:	a2 44       	sbci	r26, 0x42	; 66
    46d4:	b3 44       	sbci	r27, 0x43	; 67
    46d6:	79 f4       	brne	.+30     	; 0x46f6 <MS_Device_USBTask+0x78>
    46d8:	9f 89       	ldd	r25, Y+23	; 0x17
    46da:	89 85       	ldd	r24, Y+9	; 0x09
    46dc:	98 17       	cp	r25, r24
    46de:	58 f4       	brcc	.+22     	; 0x46f6 <MS_Device_USBTask+0x78>
    46e0:	8e 89       	ldd	r24, Y+22	; 0x16
    46e2:	90 e0       	ldi	r25, 0x00	; 0
    46e4:	8f 71       	andi	r24, 0x1F	; 31
    46e6:	90 70       	andi	r25, 0x00	; 0
    46e8:	89 2b       	or	r24, r25
    46ea:	29 f4       	brne	.+10     	; 0x46f6 <MS_Device_USBTask+0x78>
    46ec:	68 8d       	ldd	r22, Y+24	; 0x18
    46ee:	66 23       	and	r22, r22
    46f0:	11 f0       	breq	.+4      	; 0x46f6 <MS_Device_USBTask+0x78>
    46f2:	61 31       	cpi	r22, 0x11	; 17
    46f4:	70 f0       	brcs	.+28     	; 0x4712 <MS_Device_USBTask+0x94>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    46f6:	80 91 eb 00 	lds	r24, 0x00EB
    46fa:	80 62       	ori	r24, 0x20	; 32
    46fc:	80 93 eb 00 	sts	0x00EB, r24
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength >  16))
	{
		Endpoint_StallTransaction();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    4700:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4702:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    4706:	80 91 eb 00 	lds	r24, 0x00EB
    470a:	80 62       	ori	r24, 0x20	; 32
    470c:	80 93 eb 00 	sts	0x00EB, r24
    4710:	6c c0       	rjmp	.+216    	; 0x47ea <MS_Device_USBTask+0x16c>
		Endpoint_StallTransaction();

		return false;
	}

	CallbackIsResetSource = &MSInterfaceInfo->State.IsMassStoreReset;
    4712:	10 93 cd 01 	sts	0x01CD, r17
    4716:	00 93 cc 01 	sts	0x01CC, r16
	if (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    471a:	ce 01       	movw	r24, r28
    471c:	49 96       	adiw	r24, 0x19	; 25
    471e:	70 e0       	ldi	r23, 0x00	; 0
    4720:	49 e3       	ldi	r20, 0x39	; 57
    4722:	53 e2       	ldi	r21, 0x23	; 35
    4724:	c5 dc       	rcall	.-1654   	; 0x40b0 <Endpoint_Read_Stream_LE>
    4726:	88 23       	and	r24, r24
    4728:	09 f0       	breq	.+2      	; 0x472c <MS_Device_USBTask+0xae>
    472a:	5f c0       	rjmp	.+190    	; 0x47ea <MS_Device_USBTask+0x16c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    472c:	80 91 e8 00 	lds	r24, 0x00E8
    4730:	8b 77       	andi	r24, 0x7B	; 123
    4732:	80 93 e8 00 	sts	0x00E8, r24

	if (Endpoint_IsReadWriteAllowed())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    4736:	8e 89       	ldd	r24, Y+22	; 0x16
    4738:	87 ff       	sbrs	r24, 7
    473a:	03 c0       	rjmp	.+6      	; 0x4742 <MS_Device_USBTask+0xc4>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    473c:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    473e:	80 93 e9 00 	sts	0x00E9, r24

			MSInterfaceInfo->State.CommandStatus.Status = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo) ?
    4742:	ce 01       	movw	r24, r28
    4744:	0e 94 86 01 	call	0x30c	; 0x30c <CALLBACK_MS_Device_SCSICommandReceived>
    4748:	91 e0       	ldi	r25, 0x01	; 1
    474a:	98 27       	eor	r25, r24
    474c:	9d ab       	std	Y+53, r25	; 0x35
			                                               MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
			MSInterfaceInfo->State.CommandStatus.Signature           = MS_CSW_SIGNATURE;
    474e:	25 e5       	ldi	r18, 0x55	; 85
    4750:	33 e5       	ldi	r19, 0x53	; 83
    4752:	42 e4       	ldi	r20, 0x42	; 66
    4754:	53 e5       	ldi	r21, 0x53	; 83
    4756:	29 a7       	std	Y+41, r18	; 0x29
    4758:	3a a7       	std	Y+42, r19	; 0x2a
    475a:	4b a7       	std	Y+43, r20	; 0x2b
    475c:	5c a7       	std	Y+44, r21	; 0x2c
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    475e:	2e 85       	ldd	r18, Y+14	; 0x0e
    4760:	3f 85       	ldd	r19, Y+15	; 0x0f
    4762:	48 89       	ldd	r20, Y+16	; 0x10
    4764:	59 89       	ldd	r21, Y+17	; 0x11
    4766:	2d a7       	std	Y+45, r18	; 0x2d
    4768:	3e a7       	std	Y+46, r19	; 0x2e
    476a:	4f a7       	std	Y+47, r20	; 0x2f
    476c:	58 ab       	std	Y+48, r21	; 0x30
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    476e:	2a 89       	ldd	r18, Y+18	; 0x12
    4770:	3b 89       	ldd	r19, Y+19	; 0x13
    4772:	4c 89       	ldd	r20, Y+20	; 0x14
    4774:	5d 89       	ldd	r21, Y+21	; 0x15
    4776:	29 ab       	std	Y+49, r18	; 0x31
    4778:	3a ab       	std	Y+50, r19	; 0x32
    477a:	4b ab       	std	Y+51, r20	; 0x33
    477c:	5c ab       	std	Y+52, r21	; 0x34

			if ((MSInterfaceInfo->State.CommandStatus.Status == MS_SCSI_COMMAND_Fail) &&
    477e:	91 30       	cpi	r25, 0x01	; 1
    4780:	51 f4       	brne	.+20     	; 0x4796 <MS_Device_USBTask+0x118>
    4782:	21 15       	cp	r18, r1
    4784:	31 05       	cpc	r19, r1
    4786:	41 05       	cpc	r20, r1
    4788:	51 05       	cpc	r21, r1
    478a:	29 f0       	breq	.+10     	; 0x4796 <MS_Device_USBTask+0x118>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    478c:	80 91 eb 00 	lds	r24, 0x00EB
    4790:	80 62       	ori	r24, 0x20	; 32
    4792:	80 93 eb 00 	sts	0x00EB, r24
	return true;
}

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    4796:	8d 81       	ldd	r24, Y+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4798:	80 93 e9 00 	sts	0x00E9, r24
    479c:	03 c0       	rjmp	.+6      	; 0x47a4 <MS_Device_USBTask+0x126>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    479e:	8e a9       	ldd	r24, Y+54	; 0x36
    47a0:	88 23       	and	r24, r24
    47a2:	19 f5       	brne	.+70     	; 0x47ea <MS_Device_USBTask+0x16c>
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    47a4:	80 91 eb 00 	lds	r24, 0x00EB

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);

	while (Endpoint_IsStalled())
    47a8:	85 fd       	sbrc	r24, 5
    47aa:	f9 cf       	rjmp	.-14     	; 0x479e <MS_Device_USBTask+0x120>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    47ac:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    47ae:	80 93 e9 00 	sts	0x00E9, r24
    47b2:	03 c0       	rjmp	.+6      	; 0x47ba <MS_Device_USBTask+0x13c>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    47b4:	8e a9       	ldd	r24, Y+54	; 0x36
    47b6:	88 23       	and	r24, r24
    47b8:	c1 f4       	brne	.+48     	; 0x47ea <MS_Device_USBTask+0x16c>
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    47ba:	80 91 eb 00 	lds	r24, 0x00EB
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);

	while (Endpoint_IsStalled())
    47be:	85 fd       	sbrc	r24, 5
    47c0:	f9 cf       	rjmp	.-14     	; 0x47b4 <MS_Device_USBTask+0x136>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	CallbackIsResetSource = &MSInterfaceInfo->State.IsMassStoreReset;
    47c2:	e6 96       	adiw	r28, 0x36	; 54
    47c4:	d0 93 cd 01 	sts	0x01CD, r29
    47c8:	c0 93 cc 01 	sts	0x01CC, r28
    47cc:	e6 97       	sbiw	r28, 0x36	; 54
	if (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus, sizeof(MS_CommandStatusWrapper_t),
    47ce:	ce 01       	movw	r24, r28
    47d0:	89 96       	adiw	r24, 0x29	; 41
    47d2:	6d e0       	ldi	r22, 0x0D	; 13
    47d4:	70 e0       	ldi	r23, 0x00	; 0
    47d6:	49 e3       	ldi	r20, 0x39	; 57
    47d8:	53 e2       	ldi	r21, 0x23	; 35
    47da:	e0 dc       	rcall	.-1600   	; 0x419c <Endpoint_Write_Stream_LE>
    47dc:	88 23       	and	r24, r24
    47de:	29 f4       	brne	.+10     	; 0x47ea <MS_Device_USBTask+0x16c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    47e0:	80 91 e8 00 	lds	r24, 0x00E8
    47e4:	8e 77       	andi	r24, 0x7E	; 126
    47e6:	80 93 e8 00 	sts	0x00E8, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    47ea:	8e a9       	ldd	r24, Y+54	; 0x36
    47ec:	88 23       	and	r24, r24
    47ee:	91 f1       	breq	.+100    	; 0x4854 <MS_Device_USBTask+0x1d6>
	{
		Endpoint_ResetFIFO(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    47f0:	4d 81       	ldd	r20, Y+5	; 0x05
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    47f2:	21 e0       	ldi	r18, 0x01	; 1
    47f4:	30 e0       	ldi	r19, 0x00	; 0
    47f6:	c9 01       	movw	r24, r18
    47f8:	04 2e       	mov	r0, r20
    47fa:	02 c0       	rjmp	.+4      	; 0x4800 <MS_Device_USBTask+0x182>
    47fc:	88 0f       	add	r24, r24
    47fe:	99 1f       	adc	r25, r25
    4800:	0a 94       	dec	r0
    4802:	e2 f7       	brpl	.-8      	; 0x47fc <MS_Device_USBTask+0x17e>
    4804:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    4808:	10 92 ea 00 	sts	0x00EA, r1
		Endpoint_ResetFIFO(MSInterfaceInfo->Config.DataINEndpointNumber);
    480c:	99 81       	ldd	r25, Y+1	; 0x01
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    480e:	09 2e       	mov	r0, r25
    4810:	02 c0       	rjmp	.+4      	; 0x4816 <MS_Device_USBTask+0x198>
    4812:	22 0f       	add	r18, r18
    4814:	33 1f       	adc	r19, r19
    4816:	0a 94       	dec	r0
    4818:	e2 f7       	brpl	.-8      	; 0x4812 <MS_Device_USBTask+0x194>
    481a:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    481e:	10 92 ea 00 	sts	0x00EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4822:	40 93 e9 00 	sts	0x00E9, r20
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    4826:	80 91 eb 00 	lds	r24, 0x00EB
    482a:	80 61       	ori	r24, 0x10	; 16
    482c:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    4830:	80 91 eb 00 	lds	r24, 0x00EB
    4834:	88 60       	ori	r24, 0x08	; 8
    4836:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    483a:	90 93 e9 00 	sts	0x00E9, r25
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    483e:	80 91 eb 00 	lds	r24, 0x00EB
    4842:	80 61       	ori	r24, 0x10	; 16
    4844:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    4848:	80 91 eb 00 	lds	r24, 0x00EB
    484c:	88 60       	ori	r24, 0x08	; 8
    484e:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    4852:	1e aa       	std	Y+54, r1	; 0x36
	}
}
    4854:	df 91       	pop	r29
    4856:	cf 91       	pop	r28
    4858:	1f 91       	pop	r17
    485a:	0f 91       	pop	r16
    485c:	08 95       	ret

0000485e <MS_Device_ConfigureEndpoints>:
			break;
	}
}

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    485e:	1f 93       	push	r17
    4860:	cf 93       	push	r28
    4862:	df 93       	push	r29
    4864:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    4866:	0a 96       	adiw	r24, 0x0a	; 10
    4868:	fc 01       	movw	r30, r24
    486a:	8d e2       	ldi	r24, 0x2D	; 45
    486c:	df 01       	movw	r26, r30
    486e:	1d 92       	st	X+, r1
    4870:	8a 95       	dec	r24
    4872:	e9 f7       	brne	.-6      	; 0x486e <MS_Device_ConfigureEndpoints+0x10>
    4874:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == MSInterfaceInfo->Config.DataINEndpointNumber)
    4876:	89 81       	ldd	r24, Y+1	; 0x01
    4878:	18 17       	cp	r17, r24
    487a:	29 f4       	brne	.+10     	; 0x4886 <MS_Device_ConfigureEndpoints+0x28>
		{
			Size         = MSInterfaceInfo->Config.DataINEndpointSize;
    487c:	ea 81       	ldd	r30, Y+2	; 0x02
    487e:	fb 81       	ldd	r31, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
    4880:	8c 81       	ldd	r24, Y+4	; 0x04
    4882:	61 e0       	ldi	r22, 0x01	; 1
    4884:	07 c0       	rjmp	.+14     	; 0x4894 <MS_Device_ConfigureEndpoints+0x36>
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
    4886:	8d 81       	ldd	r24, Y+5	; 0x05
    4888:	18 17       	cp	r17, r24
    488a:	e9 f4       	brne	.+58     	; 0x48c6 <MS_Device_ConfigureEndpoints+0x68>
		{
			Size         = MSInterfaceInfo->Config.DataOUTEndpointSize;
    488c:	ee 81       	ldd	r30, Y+6	; 0x06
    488e:	ff 81       	ldd	r31, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    4890:	88 85       	ldd	r24, Y+8	; 0x08
    4892:	60 e0       	ldi	r22, 0x00	; 0
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    4894:	88 23       	and	r24, r24
    4896:	11 f4       	brne	.+4      	; 0x489c <MS_Device_ConfigureEndpoints+0x3e>
    4898:	40 e0       	ldi	r20, 0x00	; 0
    489a:	01 c0       	rjmp	.+2      	; 0x489e <MS_Device_ConfigureEndpoints+0x40>
    489c:	44 e0       	ldi	r20, 0x04	; 4
    489e:	20 e0       	ldi	r18, 0x00	; 0
    48a0:	88 e0       	ldi	r24, 0x08	; 8
    48a2:	90 e0       	ldi	r25, 0x00	; 0
    48a4:	03 c0       	rjmp	.+6      	; 0x48ac <MS_Device_ConfigureEndpoints+0x4e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    48a6:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    48a8:	88 0f       	add	r24, r24
    48aa:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    48ac:	8e 17       	cp	r24, r30
    48ae:	9f 07       	cpc	r25, r31
    48b0:	d0 f3       	brcs	.-12     	; 0x48a6 <MS_Device_ConfigureEndpoints+0x48>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
    48b2:	60 68       	ori	r22, 0x80	; 128
    48b4:	42 60       	ori	r20, 0x02	; 2
    48b6:	22 95       	swap	r18
    48b8:	20 7f       	andi	r18, 0xF0	; 240
    48ba:	42 2b       	or	r20, r18
    48bc:	81 2f       	mov	r24, r17
    48be:	0e 94 15 1c 	call	0x382a	; 0x382a <Endpoint_ConfigureEndpoint_Prv>
    48c2:	88 23       	and	r24, r24
    48c4:	21 f0       	breq	.+8      	; 0x48ce <MS_Device_ConfigureEndpoints+0x70>

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    48c6:	1f 5f       	subi	r17, 0xFF	; 255
    48c8:	17 30       	cpi	r17, 0x07	; 7
    48ca:	a9 f6       	brne	.-86     	; 0x4876 <MS_Device_ConfigureEndpoints+0x18>
    48cc:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
    48ce:	df 91       	pop	r29
    48d0:	cf 91       	pop	r28
    48d2:	1f 91       	pop	r17
    48d4:	08 95       	ret

000048d6 <MS_Device_ProcessControlRequest>:
#include "MassStorage.h"

static volatile bool* CallbackIsResetSource;

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    48d6:	cf 93       	push	r28
    48d8:	df 93       	push	r29
    48da:	ec 01       	movw	r28, r24
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    48dc:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    48e0:	83 ff       	sbrs	r24, 3
    48e2:	31 c0       	rjmp	.+98     	; 0x4946 <MS_Device_ProcessControlRequest+0x70>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    48e4:	88 81       	ld	r24, Y
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	20 91 2f 04 	lds	r18, 0x042F
    48ec:	30 91 30 04 	lds	r19, 0x0430
    48f0:	28 17       	cp	r18, r24
    48f2:	39 07       	cpc	r19, r25
    48f4:	41 f5       	brne	.+80     	; 0x4946 <MS_Device_ProcessControlRequest+0x70>
	  return;

	switch (USB_ControlRequest.bRequest)
    48f6:	80 91 2c 04 	lds	r24, 0x042C
    48fa:	8e 3f       	cpi	r24, 0xFE	; 254
    48fc:	81 f0       	breq	.+32     	; 0x491e <MS_Device_ProcessControlRequest+0x48>
    48fe:	8f 3f       	cpi	r24, 0xFF	; 255
    4900:	11 f5       	brne	.+68     	; 0x4946 <MS_Device_ProcessControlRequest+0x70>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    4902:	80 91 2b 04 	lds	r24, 0x042B
    4906:	81 32       	cpi	r24, 0x21	; 33
    4908:	f1 f4       	brne	.+60     	; 0x4946 <MS_Device_ProcessControlRequest+0x70>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    490a:	80 91 e8 00 	lds	r24, 0x00E8
    490e:	87 7f       	andi	r24, 0xF7	; 247
    4910:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    4914:	0e 94 28 1c 	call	0x3850	; 0x3850 <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    4918:	81 e0       	ldi	r24, 0x01	; 1
    491a:	8e ab       	std	Y+54, r24	; 0x36
    491c:	14 c0       	rjmp	.+40     	; 0x4946 <MS_Device_ProcessControlRequest+0x70>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    491e:	80 91 2b 04 	lds	r24, 0x042B
    4922:	81 3a       	cpi	r24, 0xA1	; 161
    4924:	81 f4       	brne	.+32     	; 0x4946 <MS_Device_ProcessControlRequest+0x70>
    4926:	80 91 e8 00 	lds	r24, 0x00E8
    492a:	87 7f       	andi	r24, 0xF7	; 247
    492c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Byte(MSInterfaceInfo->Config.TotalLUNs - 1);
    4930:	89 85       	ldd	r24, Y+9	; 0x09
    4932:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    4934:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4938:	80 91 e8 00 	lds	r24, 0x00E8
    493c:	8e 77       	andi	r24, 0x7E	; 126
    493e:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    4942:	0e 94 28 1c 	call	0x3850	; 0x3850 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    4946:	df 91       	pop	r29
    4948:	cf 91       	pop	r28
    494a:	08 95       	ret

0000494c <Temperature_GetTemperature>:
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
    494c:	80 e4       	ldi	r24, 0x40	; 64
    494e:	80 93 7c 00 	sts	0x007C, r24
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
				#endif

				ADCSRA |= (1 << ADSC);
    4952:	80 91 7a 00 	lds	r24, 0x007A
    4956:	80 64       	ori	r24, 0x40	; 64
    4958:	80 93 7a 00 	sts	0x007A, r24
			 *          complete and ready to be read out with \ref ADC_GetResult().
			 */
			static inline bool ADC_IsReadingComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool ADC_IsReadingComplete(void)
			{
				return ((ADCSRA & (1 << ADIF)) ? true : false);
    495c:	80 91 7a 00 	lds	r24, 0x007A
			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask) ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask)
			{
				ADC_StartReading(MUXMask);

				while (!(ADC_IsReadingComplete()));
    4960:	84 ff       	sbrs	r24, 4
    4962:	fc cf       	rjmp	.-8      	; 0x495c <Temperature_GetTemperature+0x10>
			 *  \return The result of the last ADC conversion as an unsigned value.
			 */
			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t ADC_GetResult(void)
			{
				ADCSRA |= (1 << ADIF);
    4964:	80 91 7a 00 	lds	r24, 0x007A
    4968:	80 61       	ori	r24, 0x10	; 16
    496a:	80 93 7a 00 	sts	0x007A, r24
				return ADC;
    496e:	60 91 78 00 	lds	r22, 0x0078
    4972:	70 91 79 00 	lds	r23, 0x0079

int8_t Temperature_GetTemperature(void)
{
	uint16_t Temp_ADC = ADC_GetChannelReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | TEMP_ADC_CHANNEL_MASK);

	if (Temp_ADC > pgm_read_word(&Temperature_Lookup[0]))
    4976:	41 e5       	ldi	r20, 0x51	; 81
    4978:	51 e0       	ldi	r21, 0x01	; 1
    497a:	fa 01       	movw	r30, r20
    497c:	85 91       	lpm	r24, Z+
    497e:	94 91       	lpm	r25, Z+
    4980:	86 17       	cp	r24, r22
    4982:	97 07       	cpc	r25, r23
    4984:	10 f4       	brcc	.+4      	; 0x498a <Temperature_GetTemperature+0x3e>
    4986:	8b ee       	ldi	r24, 0xEB	; 235
    4988:	08 95       	ret
    498a:	20 e0       	ldi	r18, 0x00	; 0
    498c:	30 e0       	ldi	r19, 0x00	; 0
	  return TEMP_MIN_TEMP;

	for (uint16_t Index = 0; Index < TEMP_TABLE_SIZE; Index++)
	{
		if (Temp_ADC > pgm_read_word(&Temperature_Lookup[Index]))
    498e:	fa 01       	movw	r30, r20
    4990:	85 91       	lpm	r24, Z+
    4992:	94 91       	lpm	r25, Z+
    4994:	86 17       	cp	r24, r22
    4996:	97 07       	cpc	r25, r23
    4998:	18 f4       	brcc	.+6      	; 0x49a0 <Temperature_GetTemperature+0x54>
		  return (Index + TEMP_TABLE_OFFSET);
    499a:	82 2f       	mov	r24, r18
    499c:	85 51       	subi	r24, 0x15	; 21
    499e:	08 95       	ret
	uint16_t Temp_ADC = ADC_GetChannelReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | TEMP_ADC_CHANNEL_MASK);

	if (Temp_ADC > pgm_read_word(&Temperature_Lookup[0]))
	  return TEMP_MIN_TEMP;

	for (uint16_t Index = 0; Index < TEMP_TABLE_SIZE; Index++)
    49a0:	2f 5f       	subi	r18, 0xFF	; 255
    49a2:	3f 4f       	sbci	r19, 0xFF	; 255
    49a4:	4e 5f       	subi	r20, 0xFE	; 254
    49a6:	5f 4f       	sbci	r21, 0xFF	; 255
    49a8:	28 37       	cpi	r18, 0x78	; 120
    49aa:	31 05       	cpc	r19, r1
    49ac:	81 f7       	brne	.-32     	; 0x498e <Temperature_GetTemperature+0x42>
    49ae:	82 e6       	ldi	r24, 0x62	; 98
		if (Temp_ADC > pgm_read_word(&Temperature_Lookup[Index]))
		  return (Index + TEMP_TABLE_OFFSET);
	}

	return TEMP_MAX_TEMP;
}
    49b0:	08 95       	ret

000049b2 <TWI_StartTransmission>:

#include "TWI.h"

bool TWI_StartTransmission(const uint8_t SlaveAddress,
                           const uint8_t TimeoutMS)
{
    49b2:	78 2f       	mov	r23, r24
	for (;;)
	{
		bool     BusCaptured = false;
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    49b4:	84 ea       	ldi	r24, 0xA4	; 164
    49b6:	80 93 bc 00 	sts	0x00BC, r24

		TimeoutRemaining = (TimeoutMS * 100);
    49ba:	84 e6       	ldi	r24, 0x64	; 100
    49bc:	68 9f       	mul	r22, r24
    49be:	a0 01       	movw	r20, r0
    49c0:	11 24       	eor	r1, r1
    49c2:	9a 01       	movw	r18, r20
    49c4:	60 e0       	ldi	r22, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    49c6:	fa e1       	ldi	r31, 0x1A	; 26
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
						break;
					case TW_MT_ARB_LOST:
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    49c8:	e4 ea       	ldi	r30, 0xA4	; 164
    49ca:	1b c0       	rjmp	.+54     	; 0x4a02 <TWI_StartTransmission+0x50>
		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining-- && !(BusCaptured))
		{
			if (TWCR & (1 << TWINT))
    49cc:	80 91 bc 00 	lds	r24, 0x00BC
    49d0:	87 ff       	sbrs	r24, 7
    49d2:	12 c0       	rjmp	.+36     	; 0x49f8 <TWI_StartTransmission+0x46>
			{
				switch (TWSR & TW_STATUS_MASK)
    49d4:	80 91 b9 00 	lds	r24, 0x00B9
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	88 7f       	andi	r24, 0xF8	; 248
    49dc:	90 70       	andi	r25, 0x00	; 0
    49de:	80 31       	cpi	r24, 0x10	; 16
    49e0:	91 05       	cpc	r25, r1
    49e2:	49 f0       	breq	.+18     	; 0x49f6 <TWI_StartTransmission+0x44>
    49e4:	88 33       	cpi	r24, 0x38	; 56
    49e6:	91 05       	cpc	r25, r1
    49e8:	19 f0       	breq	.+6      	; 0x49f0 <TWI_StartTransmission+0x3e>
    49ea:	08 97       	sbiw	r24, 0x08	; 8
    49ec:	91 f4       	brne	.+36     	; 0x4a12 <TWI_StartTransmission+0x60>
    49ee:	03 c0       	rjmp	.+6      	; 0x49f6 <TWI_StartTransmission+0x44>
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
						break;
					case TW_MT_ARB_LOST:
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    49f0:	e0 93 bc 00 	sts	0x00BC, r30
    49f4:	04 c0       	rjmp	.+8      	; 0x49fe <TWI_StartTransmission+0x4c>
						continue;
					default:
						TWCR = (1 << TWEN);
						return false;
    49f6:	61 e0       	ldi	r22, 0x01	; 1
    49f8:	8f 2f       	mov	r24, r31
    49fa:	8a 95       	dec	r24
    49fc:	f1 f7       	brne	.-4      	; 0x49fa <TWI_StartTransmission+0x48>
    49fe:	21 50       	subi	r18, 0x01	; 1
    4a00:	30 40       	sbci	r19, 0x00	; 0
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining-- && !(BusCaptured))
    4a02:	21 15       	cp	r18, r1
    4a04:	31 05       	cpc	r19, r1
    4a06:	19 f0       	breq	.+6      	; 0x4a0e <TWI_StartTransmission+0x5c>
    4a08:	66 23       	and	r22, r22
    4a0a:	01 f3       	breq	.-64     	; 0x49cc <TWI_StartTransmission+0x1a>
    4a0c:	06 c0       	rjmp	.+12     	; 0x4a1a <TWI_StartTransmission+0x68>
			}

			_delay_us(10);
		}

		if (!(BusCaptured))
    4a0e:	66 23       	and	r22, r22
    4a10:	21 f4       	brne	.+8      	; 0x4a1a <TWI_StartTransmission+0x68>
		{
			TWCR = (1 << TWEN);
    4a12:	84 e0       	ldi	r24, 0x04	; 4
    4a14:	80 93 bc 00 	sts	0x00BC, r24
    4a18:	16 c0       	rjmp	.+44     	; 0x4a46 <TWI_StartTransmission+0x94>
			return false;
		}

		TWDR = SlaveAddress;
    4a1a:	70 93 bb 00 	sts	0x00BB, r23
		TWCR = ((1 << TWINT) | (1 << TWEN));
    4a1e:	84 e8       	ldi	r24, 0x84	; 132
    4a20:	80 93 bc 00 	sts	0x00BC, r24
    4a24:	9a e1       	ldi	r25, 0x1A	; 26
    4a26:	07 c0       	rjmp	.+14     	; 0x4a36 <TWI_StartTransmission+0x84>

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining--)
		{
			if (TWCR & (1 << TWINT))
    4a28:	80 91 bc 00 	lds	r24, 0x00BC
    4a2c:	87 fd       	sbrc	r24, 7
    4a2e:	09 c0       	rjmp	.+18     	; 0x4a42 <TWI_StartTransmission+0x90>
    4a30:	89 2f       	mov	r24, r25
    4a32:	8a 95       	dec	r24
    4a34:	f1 f7       	brne	.-4      	; 0x4a32 <TWI_StartTransmission+0x80>

		TWDR = SlaveAddress;
		TWCR = ((1 << TWINT) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining--)
    4a36:	41 50       	subi	r20, 0x01	; 1
    4a38:	50 40       	sbci	r21, 0x00	; 0
    4a3a:	8f ef       	ldi	r24, 0xFF	; 255
    4a3c:	4f 3f       	cpi	r20, 0xFF	; 255
    4a3e:	58 07       	cpc	r21, r24
    4a40:	99 f7       	brne	.-26     	; 0x4a28 <TWI_StartTransmission+0x76>
			  break;

			_delay_us(10);
		}

		if (!(TimeoutRemaining))
    4a42:	45 2b       	or	r20, r21
    4a44:	11 f4       	brne	.+4      	; 0x4a4a <TWI_StartTransmission+0x98>
    4a46:	80 e0       	ldi	r24, 0x00	; 0
    4a48:	08 95       	ret
		  return false;

		switch (TWSR & TW_STATUS_MASK)
    4a4a:	80 91 b9 00 	lds	r24, 0x00B9
    4a4e:	90 e0       	ldi	r25, 0x00	; 0
    4a50:	88 7f       	andi	r24, 0xF8	; 248
    4a52:	90 70       	andi	r25, 0x00	; 0
    4a54:	88 31       	cpi	r24, 0x18	; 24
    4a56:	91 05       	cpc	r25, r1
    4a58:	19 f0       	breq	.+6      	; 0x4a60 <TWI_StartTransmission+0xae>
    4a5a:	80 34       	cpi	r24, 0x40	; 64
    4a5c:	91 05       	cpc	r25, r1
    4a5e:	11 f4       	brne	.+4      	; 0x4a64 <TWI_StartTransmission+0xb2>
    4a60:	81 e0       	ldi	r24, 0x01	; 1
    4a62:	08 95       	ret
		{
			case TW_MT_SLA_ACK:
			case TW_MR_SLA_ACK:
				return true;
			default:
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    4a64:	84 e9       	ldi	r24, 0x94	; 148
    4a66:	80 93 bc 00 	sts	0x00BC, r24
    4a6a:	80 e0       	ldi	r24, 0x00	; 0
				return false;
		}
	}
}
    4a6c:	08 95       	ret

00004a6e <__mulsi3>:
    4a6e:	62 9f       	mul	r22, r18
    4a70:	d0 01       	movw	r26, r0
    4a72:	73 9f       	mul	r23, r19
    4a74:	f0 01       	movw	r30, r0
    4a76:	82 9f       	mul	r24, r18
    4a78:	e0 0d       	add	r30, r0
    4a7a:	f1 1d       	adc	r31, r1
    4a7c:	64 9f       	mul	r22, r20
    4a7e:	e0 0d       	add	r30, r0
    4a80:	f1 1d       	adc	r31, r1
    4a82:	92 9f       	mul	r25, r18
    4a84:	f0 0d       	add	r31, r0
    4a86:	83 9f       	mul	r24, r19
    4a88:	f0 0d       	add	r31, r0
    4a8a:	74 9f       	mul	r23, r20
    4a8c:	f0 0d       	add	r31, r0
    4a8e:	65 9f       	mul	r22, r21
    4a90:	f0 0d       	add	r31, r0
    4a92:	99 27       	eor	r25, r25
    4a94:	72 9f       	mul	r23, r18
    4a96:	b0 0d       	add	r27, r0
    4a98:	e1 1d       	adc	r30, r1
    4a9a:	f9 1f       	adc	r31, r25
    4a9c:	63 9f       	mul	r22, r19
    4a9e:	b0 0d       	add	r27, r0
    4aa0:	e1 1d       	adc	r30, r1
    4aa2:	f9 1f       	adc	r31, r25
    4aa4:	bd 01       	movw	r22, r26
    4aa6:	cf 01       	movw	r24, r30
    4aa8:	11 24       	eor	r1, r1
    4aaa:	08 95       	ret

00004aac <__udivmodqi4>:
    4aac:	99 1b       	sub	r25, r25
    4aae:	79 e0       	ldi	r23, 0x09	; 9
    4ab0:	04 c0       	rjmp	.+8      	; 0x4aba <__udivmodqi4_ep>

00004ab2 <__udivmodqi4_loop>:
    4ab2:	99 1f       	adc	r25, r25
    4ab4:	96 17       	cp	r25, r22
    4ab6:	08 f0       	brcs	.+2      	; 0x4aba <__udivmodqi4_ep>
    4ab8:	96 1b       	sub	r25, r22

00004aba <__udivmodqi4_ep>:
    4aba:	88 1f       	adc	r24, r24
    4abc:	7a 95       	dec	r23
    4abe:	c9 f7       	brne	.-14     	; 0x4ab2 <__udivmodqi4_loop>
    4ac0:	80 95       	com	r24
    4ac2:	08 95       	ret

00004ac4 <__udivmodsi4>:
    4ac4:	a1 e2       	ldi	r26, 0x21	; 33
    4ac6:	1a 2e       	mov	r1, r26
    4ac8:	aa 1b       	sub	r26, r26
    4aca:	bb 1b       	sub	r27, r27
    4acc:	fd 01       	movw	r30, r26
    4ace:	0d c0       	rjmp	.+26     	; 0x4aea <__udivmodsi4_ep>

00004ad0 <__udivmodsi4_loop>:
    4ad0:	aa 1f       	adc	r26, r26
    4ad2:	bb 1f       	adc	r27, r27
    4ad4:	ee 1f       	adc	r30, r30
    4ad6:	ff 1f       	adc	r31, r31
    4ad8:	a2 17       	cp	r26, r18
    4ada:	b3 07       	cpc	r27, r19
    4adc:	e4 07       	cpc	r30, r20
    4ade:	f5 07       	cpc	r31, r21
    4ae0:	20 f0       	brcs	.+8      	; 0x4aea <__udivmodsi4_ep>
    4ae2:	a2 1b       	sub	r26, r18
    4ae4:	b3 0b       	sbc	r27, r19
    4ae6:	e4 0b       	sbc	r30, r20
    4ae8:	f5 0b       	sbc	r31, r21

00004aea <__udivmodsi4_ep>:
    4aea:	66 1f       	adc	r22, r22
    4aec:	77 1f       	adc	r23, r23
    4aee:	88 1f       	adc	r24, r24
    4af0:	99 1f       	adc	r25, r25
    4af2:	1a 94       	dec	r1
    4af4:	69 f7       	brne	.-38     	; 0x4ad0 <__udivmodsi4_loop>
    4af6:	60 95       	com	r22
    4af8:	70 95       	com	r23
    4afa:	80 95       	com	r24
    4afc:	90 95       	com	r25
    4afe:	9b 01       	movw	r18, r22
    4b00:	ac 01       	movw	r20, r24
    4b02:	bd 01       	movw	r22, r26
    4b04:	cf 01       	movw	r24, r30
    4b06:	08 95       	ret

00004b08 <memcmp>:
    4b08:	fb 01       	movw	r30, r22
    4b0a:	dc 01       	movw	r26, r24
    4b0c:	04 c0       	rjmp	.+8      	; 0x4b16 <memcmp+0xe>
    4b0e:	8d 91       	ld	r24, X+
    4b10:	01 90       	ld	r0, Z+
    4b12:	80 19       	sub	r24, r0
    4b14:	21 f4       	brne	.+8      	; 0x4b1e <memcmp+0x16>
    4b16:	41 50       	subi	r20, 0x01	; 1
    4b18:	50 40       	sbci	r21, 0x00	; 0
    4b1a:	c8 f7       	brcc	.-14     	; 0x4b0e <memcmp+0x6>
    4b1c:	88 1b       	sub	r24, r24
    4b1e:	99 0b       	sbc	r25, r25
    4b20:	08 95       	ret

00004b22 <memcpy>:
    4b22:	fb 01       	movw	r30, r22
    4b24:	dc 01       	movw	r26, r24
    4b26:	02 c0       	rjmp	.+4      	; 0x4b2c <memcpy+0xa>
    4b28:	01 90       	ld	r0, Z+
    4b2a:	0d 92       	st	X+, r0
    4b2c:	41 50       	subi	r20, 0x01	; 1
    4b2e:	50 40       	sbci	r21, 0x00	; 0
    4b30:	d8 f7       	brcc	.-10     	; 0x4b28 <memcpy+0x6>
    4b32:	08 95       	ret

00004b34 <memset>:
    4b34:	dc 01       	movw	r26, r24
    4b36:	01 c0       	rjmp	.+2      	; 0x4b3a <memset+0x6>
    4b38:	6d 93       	st	X+, r22
    4b3a:	41 50       	subi	r20, 0x01	; 1
    4b3c:	50 40       	sbci	r21, 0x00	; 0
    4b3e:	e0 f7       	brcc	.-8      	; 0x4b38 <memset+0x4>
    4b40:	08 95       	ret

00004b42 <sprintf>:
    4b42:	0f 93       	push	r16
    4b44:	1f 93       	push	r17
    4b46:	df 93       	push	r29
    4b48:	cf 93       	push	r28
    4b4a:	cd b7       	in	r28, 0x3d	; 61
    4b4c:	de b7       	in	r29, 0x3e	; 62
    4b4e:	2e 97       	sbiw	r28, 0x0e	; 14
    4b50:	0f b6       	in	r0, 0x3f	; 63
    4b52:	f8 94       	cli
    4b54:	de bf       	out	0x3e, r29	; 62
    4b56:	0f be       	out	0x3f, r0	; 63
    4b58:	cd bf       	out	0x3d, r28	; 61
    4b5a:	0d 89       	ldd	r16, Y+21	; 0x15
    4b5c:	1e 89       	ldd	r17, Y+22	; 0x16
    4b5e:	86 e0       	ldi	r24, 0x06	; 6
    4b60:	8c 83       	std	Y+4, r24	; 0x04
    4b62:	1a 83       	std	Y+2, r17	; 0x02
    4b64:	09 83       	std	Y+1, r16	; 0x01
    4b66:	8f ef       	ldi	r24, 0xFF	; 255
    4b68:	9f e7       	ldi	r25, 0x7F	; 127
    4b6a:	9e 83       	std	Y+6, r25	; 0x06
    4b6c:	8d 83       	std	Y+5, r24	; 0x05
    4b6e:	9e 01       	movw	r18, r28
    4b70:	27 5e       	subi	r18, 0xE7	; 231
    4b72:	3f 4f       	sbci	r19, 0xFF	; 255
    4b74:	ce 01       	movw	r24, r28
    4b76:	01 96       	adiw	r24, 0x01	; 1
    4b78:	6f 89       	ldd	r22, Y+23	; 0x17
    4b7a:	78 8d       	ldd	r23, Y+24	; 0x18
    4b7c:	a9 01       	movw	r20, r18
    4b7e:	11 d0       	rcall	.+34     	; 0x4ba2 <vfprintf>
    4b80:	2f 81       	ldd	r18, Y+7	; 0x07
    4b82:	38 85       	ldd	r19, Y+8	; 0x08
    4b84:	02 0f       	add	r16, r18
    4b86:	13 1f       	adc	r17, r19
    4b88:	f8 01       	movw	r30, r16
    4b8a:	10 82       	st	Z, r1
    4b8c:	2e 96       	adiw	r28, 0x0e	; 14
    4b8e:	0f b6       	in	r0, 0x3f	; 63
    4b90:	f8 94       	cli
    4b92:	de bf       	out	0x3e, r29	; 62
    4b94:	0f be       	out	0x3f, r0	; 63
    4b96:	cd bf       	out	0x3d, r28	; 61
    4b98:	cf 91       	pop	r28
    4b9a:	df 91       	pop	r29
    4b9c:	1f 91       	pop	r17
    4b9e:	0f 91       	pop	r16
    4ba0:	08 95       	ret

00004ba2 <vfprintf>:
    4ba2:	2f 92       	push	r2
    4ba4:	3f 92       	push	r3
    4ba6:	4f 92       	push	r4
    4ba8:	5f 92       	push	r5
    4baa:	6f 92       	push	r6
    4bac:	7f 92       	push	r7
    4bae:	8f 92       	push	r8
    4bb0:	9f 92       	push	r9
    4bb2:	af 92       	push	r10
    4bb4:	bf 92       	push	r11
    4bb6:	cf 92       	push	r12
    4bb8:	df 92       	push	r13
    4bba:	ef 92       	push	r14
    4bbc:	ff 92       	push	r15
    4bbe:	0f 93       	push	r16
    4bc0:	1f 93       	push	r17
    4bc2:	df 93       	push	r29
    4bc4:	cf 93       	push	r28
    4bc6:	cd b7       	in	r28, 0x3d	; 61
    4bc8:	de b7       	in	r29, 0x3e	; 62
    4bca:	2b 97       	sbiw	r28, 0x0b	; 11
    4bcc:	0f b6       	in	r0, 0x3f	; 63
    4bce:	f8 94       	cli
    4bd0:	de bf       	out	0x3e, r29	; 62
    4bd2:	0f be       	out	0x3f, r0	; 63
    4bd4:	cd bf       	out	0x3d, r28	; 61
    4bd6:	3c 01       	movw	r6, r24
    4bd8:	2b 01       	movw	r4, r22
    4bda:	5a 01       	movw	r10, r20
    4bdc:	fc 01       	movw	r30, r24
    4bde:	17 82       	std	Z+7, r1	; 0x07
    4be0:	16 82       	std	Z+6, r1	; 0x06
    4be2:	83 81       	ldd	r24, Z+3	; 0x03
    4be4:	81 fd       	sbrc	r24, 1
    4be6:	03 c0       	rjmp	.+6      	; 0x4bee <vfprintf+0x4c>
    4be8:	6f ef       	ldi	r22, 0xFF	; 255
    4bea:	7f ef       	ldi	r23, 0xFF	; 255
    4bec:	b9 c1       	rjmp	.+882    	; 0x4f60 <vfprintf+0x3be>
    4bee:	9a e0       	ldi	r25, 0x0A	; 10
    4bf0:	89 2e       	mov	r8, r25
    4bf2:	1e 01       	movw	r2, r28
    4bf4:	08 94       	sec
    4bf6:	21 1c       	adc	r2, r1
    4bf8:	31 1c       	adc	r3, r1
    4bfa:	f3 01       	movw	r30, r6
    4bfc:	23 81       	ldd	r18, Z+3	; 0x03
    4bfe:	f2 01       	movw	r30, r4
    4c00:	23 fd       	sbrc	r18, 3
    4c02:	85 91       	lpm	r24, Z+
    4c04:	23 ff       	sbrs	r18, 3
    4c06:	81 91       	ld	r24, Z+
    4c08:	2f 01       	movw	r4, r30
    4c0a:	88 23       	and	r24, r24
    4c0c:	09 f4       	brne	.+2      	; 0x4c10 <vfprintf+0x6e>
    4c0e:	a5 c1       	rjmp	.+842    	; 0x4f5a <vfprintf+0x3b8>
    4c10:	85 32       	cpi	r24, 0x25	; 37
    4c12:	39 f4       	brne	.+14     	; 0x4c22 <vfprintf+0x80>
    4c14:	23 fd       	sbrc	r18, 3
    4c16:	85 91       	lpm	r24, Z+
    4c18:	23 ff       	sbrs	r18, 3
    4c1a:	81 91       	ld	r24, Z+
    4c1c:	2f 01       	movw	r4, r30
    4c1e:	85 32       	cpi	r24, 0x25	; 37
    4c20:	21 f4       	brne	.+8      	; 0x4c2a <vfprintf+0x88>
    4c22:	90 e0       	ldi	r25, 0x00	; 0
    4c24:	b3 01       	movw	r22, r6
    4c26:	e6 d1       	rcall	.+972    	; 0x4ff4 <fputc>
    4c28:	e8 cf       	rjmp	.-48     	; 0x4bfa <vfprintf+0x58>
    4c2a:	98 2f       	mov	r25, r24
    4c2c:	ff 24       	eor	r15, r15
    4c2e:	ee 24       	eor	r14, r14
    4c30:	99 24       	eor	r9, r9
    4c32:	ff e1       	ldi	r31, 0x1F	; 31
    4c34:	ff 15       	cp	r31, r15
    4c36:	d0 f0       	brcs	.+52     	; 0x4c6c <vfprintf+0xca>
    4c38:	9b 32       	cpi	r25, 0x2B	; 43
    4c3a:	69 f0       	breq	.+26     	; 0x4c56 <vfprintf+0xb4>
    4c3c:	9c 32       	cpi	r25, 0x2C	; 44
    4c3e:	28 f4       	brcc	.+10     	; 0x4c4a <vfprintf+0xa8>
    4c40:	90 32       	cpi	r25, 0x20	; 32
    4c42:	59 f0       	breq	.+22     	; 0x4c5a <vfprintf+0xb8>
    4c44:	93 32       	cpi	r25, 0x23	; 35
    4c46:	91 f4       	brne	.+36     	; 0x4c6c <vfprintf+0xca>
    4c48:	0e c0       	rjmp	.+28     	; 0x4c66 <vfprintf+0xc4>
    4c4a:	9d 32       	cpi	r25, 0x2D	; 45
    4c4c:	49 f0       	breq	.+18     	; 0x4c60 <vfprintf+0xbe>
    4c4e:	90 33       	cpi	r25, 0x30	; 48
    4c50:	69 f4       	brne	.+26     	; 0x4c6c <vfprintf+0xca>
    4c52:	41 e0       	ldi	r20, 0x01	; 1
    4c54:	24 c0       	rjmp	.+72     	; 0x4c9e <vfprintf+0xfc>
    4c56:	52 e0       	ldi	r21, 0x02	; 2
    4c58:	f5 2a       	or	r15, r21
    4c5a:	84 e0       	ldi	r24, 0x04	; 4
    4c5c:	f8 2a       	or	r15, r24
    4c5e:	28 c0       	rjmp	.+80     	; 0x4cb0 <vfprintf+0x10e>
    4c60:	98 e0       	ldi	r25, 0x08	; 8
    4c62:	f9 2a       	or	r15, r25
    4c64:	25 c0       	rjmp	.+74     	; 0x4cb0 <vfprintf+0x10e>
    4c66:	e0 e1       	ldi	r30, 0x10	; 16
    4c68:	fe 2a       	or	r15, r30
    4c6a:	22 c0       	rjmp	.+68     	; 0x4cb0 <vfprintf+0x10e>
    4c6c:	f7 fc       	sbrc	r15, 7
    4c6e:	29 c0       	rjmp	.+82     	; 0x4cc2 <vfprintf+0x120>
    4c70:	89 2f       	mov	r24, r25
    4c72:	80 53       	subi	r24, 0x30	; 48
    4c74:	8a 30       	cpi	r24, 0x0A	; 10
    4c76:	70 f4       	brcc	.+28     	; 0x4c94 <vfprintf+0xf2>
    4c78:	f6 fe       	sbrs	r15, 6
    4c7a:	05 c0       	rjmp	.+10     	; 0x4c86 <vfprintf+0xe4>
    4c7c:	98 9c       	mul	r9, r8
    4c7e:	90 2c       	mov	r9, r0
    4c80:	11 24       	eor	r1, r1
    4c82:	98 0e       	add	r9, r24
    4c84:	15 c0       	rjmp	.+42     	; 0x4cb0 <vfprintf+0x10e>
    4c86:	e8 9c       	mul	r14, r8
    4c88:	e0 2c       	mov	r14, r0
    4c8a:	11 24       	eor	r1, r1
    4c8c:	e8 0e       	add	r14, r24
    4c8e:	f0 e2       	ldi	r31, 0x20	; 32
    4c90:	ff 2a       	or	r15, r31
    4c92:	0e c0       	rjmp	.+28     	; 0x4cb0 <vfprintf+0x10e>
    4c94:	9e 32       	cpi	r25, 0x2E	; 46
    4c96:	29 f4       	brne	.+10     	; 0x4ca2 <vfprintf+0x100>
    4c98:	f6 fc       	sbrc	r15, 6
    4c9a:	5f c1       	rjmp	.+702    	; 0x4f5a <vfprintf+0x3b8>
    4c9c:	40 e4       	ldi	r20, 0x40	; 64
    4c9e:	f4 2a       	or	r15, r20
    4ca0:	07 c0       	rjmp	.+14     	; 0x4cb0 <vfprintf+0x10e>
    4ca2:	9c 36       	cpi	r25, 0x6C	; 108
    4ca4:	19 f4       	brne	.+6      	; 0x4cac <vfprintf+0x10a>
    4ca6:	50 e8       	ldi	r21, 0x80	; 128
    4ca8:	f5 2a       	or	r15, r21
    4caa:	02 c0       	rjmp	.+4      	; 0x4cb0 <vfprintf+0x10e>
    4cac:	98 36       	cpi	r25, 0x68	; 104
    4cae:	49 f4       	brne	.+18     	; 0x4cc2 <vfprintf+0x120>
    4cb0:	f2 01       	movw	r30, r4
    4cb2:	23 fd       	sbrc	r18, 3
    4cb4:	95 91       	lpm	r25, Z+
    4cb6:	23 ff       	sbrs	r18, 3
    4cb8:	91 91       	ld	r25, Z+
    4cba:	2f 01       	movw	r4, r30
    4cbc:	99 23       	and	r25, r25
    4cbe:	09 f0       	breq	.+2      	; 0x4cc2 <vfprintf+0x120>
    4cc0:	b8 cf       	rjmp	.-144    	; 0x4c32 <vfprintf+0x90>
    4cc2:	89 2f       	mov	r24, r25
    4cc4:	85 54       	subi	r24, 0x45	; 69
    4cc6:	83 30       	cpi	r24, 0x03	; 3
    4cc8:	18 f0       	brcs	.+6      	; 0x4cd0 <vfprintf+0x12e>
    4cca:	80 52       	subi	r24, 0x20	; 32
    4ccc:	83 30       	cpi	r24, 0x03	; 3
    4cce:	38 f4       	brcc	.+14     	; 0x4cde <vfprintf+0x13c>
    4cd0:	44 e0       	ldi	r20, 0x04	; 4
    4cd2:	50 e0       	ldi	r21, 0x00	; 0
    4cd4:	a4 0e       	add	r10, r20
    4cd6:	b5 1e       	adc	r11, r21
    4cd8:	5f e3       	ldi	r21, 0x3F	; 63
    4cda:	59 83       	std	Y+1, r21	; 0x01
    4cdc:	0f c0       	rjmp	.+30     	; 0x4cfc <vfprintf+0x15a>
    4cde:	93 36       	cpi	r25, 0x63	; 99
    4ce0:	31 f0       	breq	.+12     	; 0x4cee <vfprintf+0x14c>
    4ce2:	93 37       	cpi	r25, 0x73	; 115
    4ce4:	79 f0       	breq	.+30     	; 0x4d04 <vfprintf+0x162>
    4ce6:	93 35       	cpi	r25, 0x53	; 83
    4ce8:	09 f0       	breq	.+2      	; 0x4cec <vfprintf+0x14a>
    4cea:	52 c0       	rjmp	.+164    	; 0x4d90 <vfprintf+0x1ee>
    4cec:	1f c0       	rjmp	.+62     	; 0x4d2c <vfprintf+0x18a>
    4cee:	f5 01       	movw	r30, r10
    4cf0:	80 81       	ld	r24, Z
    4cf2:	89 83       	std	Y+1, r24	; 0x01
    4cf4:	42 e0       	ldi	r20, 0x02	; 2
    4cf6:	50 e0       	ldi	r21, 0x00	; 0
    4cf8:	a4 0e       	add	r10, r20
    4cfa:	b5 1e       	adc	r11, r21
    4cfc:	61 01       	movw	r12, r2
    4cfe:	01 e0       	ldi	r16, 0x01	; 1
    4d00:	10 e0       	ldi	r17, 0x00	; 0
    4d02:	11 c0       	rjmp	.+34     	; 0x4d26 <vfprintf+0x184>
    4d04:	f5 01       	movw	r30, r10
    4d06:	c0 80       	ld	r12, Z
    4d08:	d1 80       	ldd	r13, Z+1	; 0x01
    4d0a:	f6 fc       	sbrc	r15, 6
    4d0c:	03 c0       	rjmp	.+6      	; 0x4d14 <vfprintf+0x172>
    4d0e:	6f ef       	ldi	r22, 0xFF	; 255
    4d10:	7f ef       	ldi	r23, 0xFF	; 255
    4d12:	02 c0       	rjmp	.+4      	; 0x4d18 <vfprintf+0x176>
    4d14:	69 2d       	mov	r22, r9
    4d16:	70 e0       	ldi	r23, 0x00	; 0
    4d18:	42 e0       	ldi	r20, 0x02	; 2
    4d1a:	50 e0       	ldi	r21, 0x00	; 0
    4d1c:	a4 0e       	add	r10, r20
    4d1e:	b5 1e       	adc	r11, r21
    4d20:	c6 01       	movw	r24, r12
    4d22:	5d d1       	rcall	.+698    	; 0x4fde <strnlen>
    4d24:	8c 01       	movw	r16, r24
    4d26:	5f e7       	ldi	r21, 0x7F	; 127
    4d28:	f5 22       	and	r15, r21
    4d2a:	13 c0       	rjmp	.+38     	; 0x4d52 <vfprintf+0x1b0>
    4d2c:	f5 01       	movw	r30, r10
    4d2e:	c0 80       	ld	r12, Z
    4d30:	d1 80       	ldd	r13, Z+1	; 0x01
    4d32:	f6 fc       	sbrc	r15, 6
    4d34:	03 c0       	rjmp	.+6      	; 0x4d3c <vfprintf+0x19a>
    4d36:	6f ef       	ldi	r22, 0xFF	; 255
    4d38:	7f ef       	ldi	r23, 0xFF	; 255
    4d3a:	02 c0       	rjmp	.+4      	; 0x4d40 <vfprintf+0x19e>
    4d3c:	69 2d       	mov	r22, r9
    4d3e:	70 e0       	ldi	r23, 0x00	; 0
    4d40:	42 e0       	ldi	r20, 0x02	; 2
    4d42:	50 e0       	ldi	r21, 0x00	; 0
    4d44:	a4 0e       	add	r10, r20
    4d46:	b5 1e       	adc	r11, r21
    4d48:	c6 01       	movw	r24, r12
    4d4a:	3e d1       	rcall	.+636    	; 0x4fc8 <strnlen_P>
    4d4c:	8c 01       	movw	r16, r24
    4d4e:	50 e8       	ldi	r21, 0x80	; 128
    4d50:	f5 2a       	or	r15, r21
    4d52:	f3 fe       	sbrs	r15, 3
    4d54:	06 c0       	rjmp	.+12     	; 0x4d62 <vfprintf+0x1c0>
    4d56:	18 c0       	rjmp	.+48     	; 0x4d88 <vfprintf+0x1e6>
    4d58:	80 e2       	ldi	r24, 0x20	; 32
    4d5a:	90 e0       	ldi	r25, 0x00	; 0
    4d5c:	b3 01       	movw	r22, r6
    4d5e:	4a d1       	rcall	.+660    	; 0x4ff4 <fputc>
    4d60:	ea 94       	dec	r14
    4d62:	8e 2d       	mov	r24, r14
    4d64:	90 e0       	ldi	r25, 0x00	; 0
    4d66:	08 17       	cp	r16, r24
    4d68:	19 07       	cpc	r17, r25
    4d6a:	b0 f3       	brcs	.-20     	; 0x4d58 <vfprintf+0x1b6>
    4d6c:	0d c0       	rjmp	.+26     	; 0x4d88 <vfprintf+0x1e6>
    4d6e:	f6 01       	movw	r30, r12
    4d70:	f7 fc       	sbrc	r15, 7
    4d72:	85 91       	lpm	r24, Z+
    4d74:	f7 fe       	sbrs	r15, 7
    4d76:	81 91       	ld	r24, Z+
    4d78:	6f 01       	movw	r12, r30
    4d7a:	90 e0       	ldi	r25, 0x00	; 0
    4d7c:	b3 01       	movw	r22, r6
    4d7e:	3a d1       	rcall	.+628    	; 0x4ff4 <fputc>
    4d80:	e1 10       	cpse	r14, r1
    4d82:	ea 94       	dec	r14
    4d84:	01 50       	subi	r16, 0x01	; 1
    4d86:	10 40       	sbci	r17, 0x00	; 0
    4d88:	01 15       	cp	r16, r1
    4d8a:	11 05       	cpc	r17, r1
    4d8c:	81 f7       	brne	.-32     	; 0x4d6e <vfprintf+0x1cc>
    4d8e:	e2 c0       	rjmp	.+452    	; 0x4f54 <vfprintf+0x3b2>
    4d90:	94 36       	cpi	r25, 0x64	; 100
    4d92:	11 f0       	breq	.+4      	; 0x4d98 <vfprintf+0x1f6>
    4d94:	99 36       	cpi	r25, 0x69	; 105
    4d96:	61 f5       	brne	.+88     	; 0x4df0 <vfprintf+0x24e>
    4d98:	f7 fe       	sbrs	r15, 7
    4d9a:	08 c0       	rjmp	.+16     	; 0x4dac <vfprintf+0x20a>
    4d9c:	f5 01       	movw	r30, r10
    4d9e:	20 81       	ld	r18, Z
    4da0:	31 81       	ldd	r19, Z+1	; 0x01
    4da2:	42 81       	ldd	r20, Z+2	; 0x02
    4da4:	53 81       	ldd	r21, Z+3	; 0x03
    4da6:	84 e0       	ldi	r24, 0x04	; 4
    4da8:	90 e0       	ldi	r25, 0x00	; 0
    4daa:	0a c0       	rjmp	.+20     	; 0x4dc0 <vfprintf+0x21e>
    4dac:	f5 01       	movw	r30, r10
    4dae:	80 81       	ld	r24, Z
    4db0:	91 81       	ldd	r25, Z+1	; 0x01
    4db2:	9c 01       	movw	r18, r24
    4db4:	44 27       	eor	r20, r20
    4db6:	37 fd       	sbrc	r19, 7
    4db8:	40 95       	com	r20
    4dba:	54 2f       	mov	r21, r20
    4dbc:	82 e0       	ldi	r24, 0x02	; 2
    4dbe:	90 e0       	ldi	r25, 0x00	; 0
    4dc0:	a8 0e       	add	r10, r24
    4dc2:	b9 1e       	adc	r11, r25
    4dc4:	9f e6       	ldi	r25, 0x6F	; 111
    4dc6:	f9 22       	and	r15, r25
    4dc8:	57 ff       	sbrs	r21, 7
    4dca:	09 c0       	rjmp	.+18     	; 0x4dde <vfprintf+0x23c>
    4dcc:	50 95       	com	r21
    4dce:	40 95       	com	r20
    4dd0:	30 95       	com	r19
    4dd2:	21 95       	neg	r18
    4dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    4dd6:	4f 4f       	sbci	r20, 0xFF	; 255
    4dd8:	5f 4f       	sbci	r21, 0xFF	; 255
    4dda:	e0 e8       	ldi	r30, 0x80	; 128
    4ddc:	fe 2a       	or	r15, r30
    4dde:	ca 01       	movw	r24, r20
    4de0:	b9 01       	movw	r22, r18
    4de2:	a1 01       	movw	r20, r2
    4de4:	2a e0       	ldi	r18, 0x0A	; 10
    4de6:	30 e0       	ldi	r19, 0x00	; 0
    4de8:	31 d1       	rcall	.+610    	; 0x504c <__ultoa_invert>
    4dea:	d8 2e       	mov	r13, r24
    4dec:	d2 18       	sub	r13, r2
    4dee:	3f c0       	rjmp	.+126    	; 0x4e6e <vfprintf+0x2cc>
    4df0:	95 37       	cpi	r25, 0x75	; 117
    4df2:	29 f4       	brne	.+10     	; 0x4dfe <vfprintf+0x25c>
    4df4:	1f 2d       	mov	r17, r15
    4df6:	1f 7e       	andi	r17, 0xEF	; 239
    4df8:	2a e0       	ldi	r18, 0x0A	; 10
    4dfa:	30 e0       	ldi	r19, 0x00	; 0
    4dfc:	1d c0       	rjmp	.+58     	; 0x4e38 <vfprintf+0x296>
    4dfe:	1f 2d       	mov	r17, r15
    4e00:	19 7f       	andi	r17, 0xF9	; 249
    4e02:	9f 36       	cpi	r25, 0x6F	; 111
    4e04:	61 f0       	breq	.+24     	; 0x4e1e <vfprintf+0x27c>
    4e06:	90 37       	cpi	r25, 0x70	; 112
    4e08:	20 f4       	brcc	.+8      	; 0x4e12 <vfprintf+0x270>
    4e0a:	98 35       	cpi	r25, 0x58	; 88
    4e0c:	09 f0       	breq	.+2      	; 0x4e10 <vfprintf+0x26e>
    4e0e:	a5 c0       	rjmp	.+330    	; 0x4f5a <vfprintf+0x3b8>
    4e10:	0f c0       	rjmp	.+30     	; 0x4e30 <vfprintf+0x28e>
    4e12:	90 37       	cpi	r25, 0x70	; 112
    4e14:	39 f0       	breq	.+14     	; 0x4e24 <vfprintf+0x282>
    4e16:	98 37       	cpi	r25, 0x78	; 120
    4e18:	09 f0       	breq	.+2      	; 0x4e1c <vfprintf+0x27a>
    4e1a:	9f c0       	rjmp	.+318    	; 0x4f5a <vfprintf+0x3b8>
    4e1c:	04 c0       	rjmp	.+8      	; 0x4e26 <vfprintf+0x284>
    4e1e:	28 e0       	ldi	r18, 0x08	; 8
    4e20:	30 e0       	ldi	r19, 0x00	; 0
    4e22:	0a c0       	rjmp	.+20     	; 0x4e38 <vfprintf+0x296>
    4e24:	10 61       	ori	r17, 0x10	; 16
    4e26:	14 fd       	sbrc	r17, 4
    4e28:	14 60       	ori	r17, 0x04	; 4
    4e2a:	20 e1       	ldi	r18, 0x10	; 16
    4e2c:	30 e0       	ldi	r19, 0x00	; 0
    4e2e:	04 c0       	rjmp	.+8      	; 0x4e38 <vfprintf+0x296>
    4e30:	14 fd       	sbrc	r17, 4
    4e32:	16 60       	ori	r17, 0x06	; 6
    4e34:	20 e1       	ldi	r18, 0x10	; 16
    4e36:	32 e0       	ldi	r19, 0x02	; 2
    4e38:	17 ff       	sbrs	r17, 7
    4e3a:	08 c0       	rjmp	.+16     	; 0x4e4c <vfprintf+0x2aa>
    4e3c:	f5 01       	movw	r30, r10
    4e3e:	60 81       	ld	r22, Z
    4e40:	71 81       	ldd	r23, Z+1	; 0x01
    4e42:	82 81       	ldd	r24, Z+2	; 0x02
    4e44:	93 81       	ldd	r25, Z+3	; 0x03
    4e46:	44 e0       	ldi	r20, 0x04	; 4
    4e48:	50 e0       	ldi	r21, 0x00	; 0
    4e4a:	08 c0       	rjmp	.+16     	; 0x4e5c <vfprintf+0x2ba>
    4e4c:	f5 01       	movw	r30, r10
    4e4e:	80 81       	ld	r24, Z
    4e50:	91 81       	ldd	r25, Z+1	; 0x01
    4e52:	bc 01       	movw	r22, r24
    4e54:	80 e0       	ldi	r24, 0x00	; 0
    4e56:	90 e0       	ldi	r25, 0x00	; 0
    4e58:	42 e0       	ldi	r20, 0x02	; 2
    4e5a:	50 e0       	ldi	r21, 0x00	; 0
    4e5c:	a4 0e       	add	r10, r20
    4e5e:	b5 1e       	adc	r11, r21
    4e60:	a1 01       	movw	r20, r2
    4e62:	f4 d0       	rcall	.+488    	; 0x504c <__ultoa_invert>
    4e64:	d8 2e       	mov	r13, r24
    4e66:	d2 18       	sub	r13, r2
    4e68:	8f e7       	ldi	r24, 0x7F	; 127
    4e6a:	f8 2e       	mov	r15, r24
    4e6c:	f1 22       	and	r15, r17
    4e6e:	f6 fe       	sbrs	r15, 6
    4e70:	0b c0       	rjmp	.+22     	; 0x4e88 <vfprintf+0x2e6>
    4e72:	5e ef       	ldi	r21, 0xFE	; 254
    4e74:	f5 22       	and	r15, r21
    4e76:	d9 14       	cp	r13, r9
    4e78:	38 f4       	brcc	.+14     	; 0x4e88 <vfprintf+0x2e6>
    4e7a:	f4 fe       	sbrs	r15, 4
    4e7c:	07 c0       	rjmp	.+14     	; 0x4e8c <vfprintf+0x2ea>
    4e7e:	f2 fc       	sbrc	r15, 2
    4e80:	05 c0       	rjmp	.+10     	; 0x4e8c <vfprintf+0x2ea>
    4e82:	8f ee       	ldi	r24, 0xEF	; 239
    4e84:	f8 22       	and	r15, r24
    4e86:	02 c0       	rjmp	.+4      	; 0x4e8c <vfprintf+0x2ea>
    4e88:	1d 2d       	mov	r17, r13
    4e8a:	01 c0       	rjmp	.+2      	; 0x4e8e <vfprintf+0x2ec>
    4e8c:	19 2d       	mov	r17, r9
    4e8e:	f4 fe       	sbrs	r15, 4
    4e90:	0d c0       	rjmp	.+26     	; 0x4eac <vfprintf+0x30a>
    4e92:	fe 01       	movw	r30, r28
    4e94:	ed 0d       	add	r30, r13
    4e96:	f1 1d       	adc	r31, r1
    4e98:	80 81       	ld	r24, Z
    4e9a:	80 33       	cpi	r24, 0x30	; 48
    4e9c:	19 f4       	brne	.+6      	; 0x4ea4 <vfprintf+0x302>
    4e9e:	99 ee       	ldi	r25, 0xE9	; 233
    4ea0:	f9 22       	and	r15, r25
    4ea2:	08 c0       	rjmp	.+16     	; 0x4eb4 <vfprintf+0x312>
    4ea4:	1f 5f       	subi	r17, 0xFF	; 255
    4ea6:	f2 fe       	sbrs	r15, 2
    4ea8:	05 c0       	rjmp	.+10     	; 0x4eb4 <vfprintf+0x312>
    4eaa:	03 c0       	rjmp	.+6      	; 0x4eb2 <vfprintf+0x310>
    4eac:	8f 2d       	mov	r24, r15
    4eae:	86 78       	andi	r24, 0x86	; 134
    4eb0:	09 f0       	breq	.+2      	; 0x4eb4 <vfprintf+0x312>
    4eb2:	1f 5f       	subi	r17, 0xFF	; 255
    4eb4:	0f 2d       	mov	r16, r15
    4eb6:	f3 fc       	sbrc	r15, 3
    4eb8:	13 c0       	rjmp	.+38     	; 0x4ee0 <vfprintf+0x33e>
    4eba:	f0 fe       	sbrs	r15, 0
    4ebc:	0e c0       	rjmp	.+28     	; 0x4eda <vfprintf+0x338>
    4ebe:	1e 15       	cp	r17, r14
    4ec0:	10 f0       	brcs	.+4      	; 0x4ec6 <vfprintf+0x324>
    4ec2:	9d 2c       	mov	r9, r13
    4ec4:	0a c0       	rjmp	.+20     	; 0x4eda <vfprintf+0x338>
    4ec6:	9d 2c       	mov	r9, r13
    4ec8:	9e 0c       	add	r9, r14
    4eca:	91 1a       	sub	r9, r17
    4ecc:	1e 2d       	mov	r17, r14
    4ece:	05 c0       	rjmp	.+10     	; 0x4eda <vfprintf+0x338>
    4ed0:	80 e2       	ldi	r24, 0x20	; 32
    4ed2:	90 e0       	ldi	r25, 0x00	; 0
    4ed4:	b3 01       	movw	r22, r6
    4ed6:	8e d0       	rcall	.+284    	; 0x4ff4 <fputc>
    4ed8:	1f 5f       	subi	r17, 0xFF	; 255
    4eda:	1e 15       	cp	r17, r14
    4edc:	c8 f3       	brcs	.-14     	; 0x4ed0 <vfprintf+0x32e>
    4ede:	04 c0       	rjmp	.+8      	; 0x4ee8 <vfprintf+0x346>
    4ee0:	1e 15       	cp	r17, r14
    4ee2:	10 f4       	brcc	.+4      	; 0x4ee8 <vfprintf+0x346>
    4ee4:	e1 1a       	sub	r14, r17
    4ee6:	01 c0       	rjmp	.+2      	; 0x4eea <vfprintf+0x348>
    4ee8:	ee 24       	eor	r14, r14
    4eea:	04 ff       	sbrs	r16, 4
    4eec:	0e c0       	rjmp	.+28     	; 0x4f0a <vfprintf+0x368>
    4eee:	80 e3       	ldi	r24, 0x30	; 48
    4ef0:	90 e0       	ldi	r25, 0x00	; 0
    4ef2:	b3 01       	movw	r22, r6
    4ef4:	7f d0       	rcall	.+254    	; 0x4ff4 <fputc>
    4ef6:	02 ff       	sbrs	r16, 2
    4ef8:	1b c0       	rjmp	.+54     	; 0x4f30 <vfprintf+0x38e>
    4efa:	01 fd       	sbrc	r16, 1
    4efc:	03 c0       	rjmp	.+6      	; 0x4f04 <vfprintf+0x362>
    4efe:	88 e7       	ldi	r24, 0x78	; 120
    4f00:	90 e0       	ldi	r25, 0x00	; 0
    4f02:	0e c0       	rjmp	.+28     	; 0x4f20 <vfprintf+0x37e>
    4f04:	88 e5       	ldi	r24, 0x58	; 88
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	0b c0       	rjmp	.+22     	; 0x4f20 <vfprintf+0x37e>
    4f0a:	80 2f       	mov	r24, r16
    4f0c:	86 78       	andi	r24, 0x86	; 134
    4f0e:	81 f0       	breq	.+32     	; 0x4f30 <vfprintf+0x38e>
    4f10:	01 ff       	sbrs	r16, 1
    4f12:	02 c0       	rjmp	.+4      	; 0x4f18 <vfprintf+0x376>
    4f14:	8b e2       	ldi	r24, 0x2B	; 43
    4f16:	01 c0       	rjmp	.+2      	; 0x4f1a <vfprintf+0x378>
    4f18:	80 e2       	ldi	r24, 0x20	; 32
    4f1a:	f7 fc       	sbrc	r15, 7
    4f1c:	8d e2       	ldi	r24, 0x2D	; 45
    4f1e:	90 e0       	ldi	r25, 0x00	; 0
    4f20:	b3 01       	movw	r22, r6
    4f22:	68 d0       	rcall	.+208    	; 0x4ff4 <fputc>
    4f24:	05 c0       	rjmp	.+10     	; 0x4f30 <vfprintf+0x38e>
    4f26:	80 e3       	ldi	r24, 0x30	; 48
    4f28:	90 e0       	ldi	r25, 0x00	; 0
    4f2a:	b3 01       	movw	r22, r6
    4f2c:	63 d0       	rcall	.+198    	; 0x4ff4 <fputc>
    4f2e:	9a 94       	dec	r9
    4f30:	d9 14       	cp	r13, r9
    4f32:	c8 f3       	brcs	.-14     	; 0x4f26 <vfprintf+0x384>
    4f34:	da 94       	dec	r13
    4f36:	f1 01       	movw	r30, r2
    4f38:	ed 0d       	add	r30, r13
    4f3a:	f1 1d       	adc	r31, r1
    4f3c:	80 81       	ld	r24, Z
    4f3e:	90 e0       	ldi	r25, 0x00	; 0
    4f40:	b3 01       	movw	r22, r6
    4f42:	58 d0       	rcall	.+176    	; 0x4ff4 <fputc>
    4f44:	dd 20       	and	r13, r13
    4f46:	b1 f7       	brne	.-20     	; 0x4f34 <vfprintf+0x392>
    4f48:	05 c0       	rjmp	.+10     	; 0x4f54 <vfprintf+0x3b2>
    4f4a:	80 e2       	ldi	r24, 0x20	; 32
    4f4c:	90 e0       	ldi	r25, 0x00	; 0
    4f4e:	b3 01       	movw	r22, r6
    4f50:	51 d0       	rcall	.+162    	; 0x4ff4 <fputc>
    4f52:	ea 94       	dec	r14
    4f54:	ee 20       	and	r14, r14
    4f56:	c9 f7       	brne	.-14     	; 0x4f4a <vfprintf+0x3a8>
    4f58:	50 ce       	rjmp	.-864    	; 0x4bfa <vfprintf+0x58>
    4f5a:	f3 01       	movw	r30, r6
    4f5c:	66 81       	ldd	r22, Z+6	; 0x06
    4f5e:	77 81       	ldd	r23, Z+7	; 0x07
    4f60:	cb 01       	movw	r24, r22
    4f62:	2b 96       	adiw	r28, 0x0b	; 11
    4f64:	0f b6       	in	r0, 0x3f	; 63
    4f66:	f8 94       	cli
    4f68:	de bf       	out	0x3e, r29	; 62
    4f6a:	0f be       	out	0x3f, r0	; 63
    4f6c:	cd bf       	out	0x3d, r28	; 61
    4f6e:	cf 91       	pop	r28
    4f70:	df 91       	pop	r29
    4f72:	1f 91       	pop	r17
    4f74:	0f 91       	pop	r16
    4f76:	ff 90       	pop	r15
    4f78:	ef 90       	pop	r14
    4f7a:	df 90       	pop	r13
    4f7c:	cf 90       	pop	r12
    4f7e:	bf 90       	pop	r11
    4f80:	af 90       	pop	r10
    4f82:	9f 90       	pop	r9
    4f84:	8f 90       	pop	r8
    4f86:	7f 90       	pop	r7
    4f88:	6f 90       	pop	r6
    4f8a:	5f 90       	pop	r5
    4f8c:	4f 90       	pop	r4
    4f8e:	3f 90       	pop	r3
    4f90:	2f 90       	pop	r2
    4f92:	08 95       	ret

00004f94 <__eerd_byte_usb1287>:
    4f94:	f9 99       	sbic	0x1f, 1	; 31
    4f96:	fe cf       	rjmp	.-4      	; 0x4f94 <__eerd_byte_usb1287>
    4f98:	92 bd       	out	0x22, r25	; 34
    4f9a:	81 bd       	out	0x21, r24	; 33
    4f9c:	f8 9a       	sbi	0x1f, 0	; 31
    4f9e:	99 27       	eor	r25, r25
    4fa0:	80 b5       	in	r24, 0x20	; 32
    4fa2:	08 95       	ret

00004fa4 <__eeupd_byte_usb1287>:
    4fa4:	26 2f       	mov	r18, r22

00004fa6 <__eeupd_r18_usb1287>:
    4fa6:	f9 99       	sbic	0x1f, 1	; 31
    4fa8:	fe cf       	rjmp	.-4      	; 0x4fa6 <__eeupd_r18_usb1287>
    4faa:	92 bd       	out	0x22, r25	; 34
    4fac:	81 bd       	out	0x21, r24	; 33
    4fae:	f8 9a       	sbi	0x1f, 0	; 31
    4fb0:	01 97       	sbiw	r24, 0x01	; 1
    4fb2:	00 b4       	in	r0, 0x20	; 32
    4fb4:	02 16       	cp	r0, r18
    4fb6:	39 f0       	breq	.+14     	; 0x4fc6 <__eeupd_r18_usb1287+0x20>
    4fb8:	1f ba       	out	0x1f, r1	; 31
    4fba:	20 bd       	out	0x20, r18	; 32
    4fbc:	0f b6       	in	r0, 0x3f	; 63
    4fbe:	f8 94       	cli
    4fc0:	fa 9a       	sbi	0x1f, 2	; 31
    4fc2:	f9 9a       	sbi	0x1f, 1	; 31
    4fc4:	0f be       	out	0x3f, r0	; 63
    4fc6:	08 95       	ret

00004fc8 <strnlen_P>:
    4fc8:	fc 01       	movw	r30, r24
    4fca:	05 90       	lpm	r0, Z+
    4fcc:	61 50       	subi	r22, 0x01	; 1
    4fce:	70 40       	sbci	r23, 0x00	; 0
    4fd0:	01 10       	cpse	r0, r1
    4fd2:	d8 f7       	brcc	.-10     	; 0x4fca <strnlen_P+0x2>
    4fd4:	80 95       	com	r24
    4fd6:	90 95       	com	r25
    4fd8:	8e 0f       	add	r24, r30
    4fda:	9f 1f       	adc	r25, r31
    4fdc:	08 95       	ret

00004fde <strnlen>:
    4fde:	fc 01       	movw	r30, r24
    4fe0:	61 50       	subi	r22, 0x01	; 1
    4fe2:	70 40       	sbci	r23, 0x00	; 0
    4fe4:	01 90       	ld	r0, Z+
    4fe6:	01 10       	cpse	r0, r1
    4fe8:	d8 f7       	brcc	.-10     	; 0x4fe0 <strnlen+0x2>
    4fea:	80 95       	com	r24
    4fec:	90 95       	com	r25
    4fee:	8e 0f       	add	r24, r30
    4ff0:	9f 1f       	adc	r25, r31
    4ff2:	08 95       	ret

00004ff4 <fputc>:
    4ff4:	0f 93       	push	r16
    4ff6:	1f 93       	push	r17
    4ff8:	cf 93       	push	r28
    4ffa:	df 93       	push	r29
    4ffc:	8c 01       	movw	r16, r24
    4ffe:	eb 01       	movw	r28, r22
    5000:	8b 81       	ldd	r24, Y+3	; 0x03
    5002:	81 ff       	sbrs	r24, 1
    5004:	1b c0       	rjmp	.+54     	; 0x503c <fputc+0x48>
    5006:	82 ff       	sbrs	r24, 2
    5008:	0d c0       	rjmp	.+26     	; 0x5024 <fputc+0x30>
    500a:	2e 81       	ldd	r18, Y+6	; 0x06
    500c:	3f 81       	ldd	r19, Y+7	; 0x07
    500e:	8c 81       	ldd	r24, Y+4	; 0x04
    5010:	9d 81       	ldd	r25, Y+5	; 0x05
    5012:	28 17       	cp	r18, r24
    5014:	39 07       	cpc	r19, r25
    5016:	64 f4       	brge	.+24     	; 0x5030 <fputc+0x3c>
    5018:	e8 81       	ld	r30, Y
    501a:	f9 81       	ldd	r31, Y+1	; 0x01
    501c:	01 93       	st	Z+, r16
    501e:	f9 83       	std	Y+1, r31	; 0x01
    5020:	e8 83       	st	Y, r30
    5022:	06 c0       	rjmp	.+12     	; 0x5030 <fputc+0x3c>
    5024:	e8 85       	ldd	r30, Y+8	; 0x08
    5026:	f9 85       	ldd	r31, Y+9	; 0x09
    5028:	80 2f       	mov	r24, r16
    502a:	09 95       	icall
    502c:	89 2b       	or	r24, r25
    502e:	31 f4       	brne	.+12     	; 0x503c <fputc+0x48>
    5030:	8e 81       	ldd	r24, Y+6	; 0x06
    5032:	9f 81       	ldd	r25, Y+7	; 0x07
    5034:	01 96       	adiw	r24, 0x01	; 1
    5036:	9f 83       	std	Y+7, r25	; 0x07
    5038:	8e 83       	std	Y+6, r24	; 0x06
    503a:	02 c0       	rjmp	.+4      	; 0x5040 <fputc+0x4c>
    503c:	0f ef       	ldi	r16, 0xFF	; 255
    503e:	1f ef       	ldi	r17, 0xFF	; 255
    5040:	c8 01       	movw	r24, r16
    5042:	df 91       	pop	r29
    5044:	cf 91       	pop	r28
    5046:	1f 91       	pop	r17
    5048:	0f 91       	pop	r16
    504a:	08 95       	ret

0000504c <__ultoa_invert>:
    504c:	fa 01       	movw	r30, r20
    504e:	aa 27       	eor	r26, r26
    5050:	28 30       	cpi	r18, 0x08	; 8
    5052:	51 f1       	breq	.+84     	; 0x50a8 <__ultoa_invert+0x5c>
    5054:	20 31       	cpi	r18, 0x10	; 16
    5056:	81 f1       	breq	.+96     	; 0x50b8 <__ultoa_invert+0x6c>
    5058:	e8 94       	clt
    505a:	6f 93       	push	r22
    505c:	6e 7f       	andi	r22, 0xFE	; 254
    505e:	6e 5f       	subi	r22, 0xFE	; 254
    5060:	7f 4f       	sbci	r23, 0xFF	; 255
    5062:	8f 4f       	sbci	r24, 0xFF	; 255
    5064:	9f 4f       	sbci	r25, 0xFF	; 255
    5066:	af 4f       	sbci	r26, 0xFF	; 255
    5068:	b1 e0       	ldi	r27, 0x01	; 1
    506a:	3e d0       	rcall	.+124    	; 0x50e8 <__ultoa_invert+0x9c>
    506c:	b4 e0       	ldi	r27, 0x04	; 4
    506e:	3c d0       	rcall	.+120    	; 0x50e8 <__ultoa_invert+0x9c>
    5070:	67 0f       	add	r22, r23
    5072:	78 1f       	adc	r23, r24
    5074:	89 1f       	adc	r24, r25
    5076:	9a 1f       	adc	r25, r26
    5078:	a1 1d       	adc	r26, r1
    507a:	68 0f       	add	r22, r24
    507c:	79 1f       	adc	r23, r25
    507e:	8a 1f       	adc	r24, r26
    5080:	91 1d       	adc	r25, r1
    5082:	a1 1d       	adc	r26, r1
    5084:	6a 0f       	add	r22, r26
    5086:	71 1d       	adc	r23, r1
    5088:	81 1d       	adc	r24, r1
    508a:	91 1d       	adc	r25, r1
    508c:	a1 1d       	adc	r26, r1
    508e:	20 d0       	rcall	.+64     	; 0x50d0 <__ultoa_invert+0x84>
    5090:	09 f4       	brne	.+2      	; 0x5094 <__ultoa_invert+0x48>
    5092:	68 94       	set
    5094:	3f 91       	pop	r19
    5096:	2a e0       	ldi	r18, 0x0A	; 10
    5098:	26 9f       	mul	r18, r22
    509a:	11 24       	eor	r1, r1
    509c:	30 19       	sub	r19, r0
    509e:	30 5d       	subi	r19, 0xD0	; 208
    50a0:	31 93       	st	Z+, r19
    50a2:	de f6       	brtc	.-74     	; 0x505a <__ultoa_invert+0xe>
    50a4:	cf 01       	movw	r24, r30
    50a6:	08 95       	ret
    50a8:	46 2f       	mov	r20, r22
    50aa:	47 70       	andi	r20, 0x07	; 7
    50ac:	40 5d       	subi	r20, 0xD0	; 208
    50ae:	41 93       	st	Z+, r20
    50b0:	b3 e0       	ldi	r27, 0x03	; 3
    50b2:	0f d0       	rcall	.+30     	; 0x50d2 <__ultoa_invert+0x86>
    50b4:	c9 f7       	brne	.-14     	; 0x50a8 <__ultoa_invert+0x5c>
    50b6:	f6 cf       	rjmp	.-20     	; 0x50a4 <__ultoa_invert+0x58>
    50b8:	46 2f       	mov	r20, r22
    50ba:	4f 70       	andi	r20, 0x0F	; 15
    50bc:	40 5d       	subi	r20, 0xD0	; 208
    50be:	4a 33       	cpi	r20, 0x3A	; 58
    50c0:	18 f0       	brcs	.+6      	; 0x50c8 <__ultoa_invert+0x7c>
    50c2:	49 5d       	subi	r20, 0xD9	; 217
    50c4:	31 fd       	sbrc	r19, 1
    50c6:	40 52       	subi	r20, 0x20	; 32
    50c8:	41 93       	st	Z+, r20
    50ca:	02 d0       	rcall	.+4      	; 0x50d0 <__ultoa_invert+0x84>
    50cc:	a9 f7       	brne	.-22     	; 0x50b8 <__ultoa_invert+0x6c>
    50ce:	ea cf       	rjmp	.-44     	; 0x50a4 <__ultoa_invert+0x58>
    50d0:	b4 e0       	ldi	r27, 0x04	; 4
    50d2:	a6 95       	lsr	r26
    50d4:	97 95       	ror	r25
    50d6:	87 95       	ror	r24
    50d8:	77 95       	ror	r23
    50da:	67 95       	ror	r22
    50dc:	ba 95       	dec	r27
    50de:	c9 f7       	brne	.-14     	; 0x50d2 <__ultoa_invert+0x86>
    50e0:	00 97       	sbiw	r24, 0x00	; 0
    50e2:	61 05       	cpc	r22, r1
    50e4:	71 05       	cpc	r23, r1
    50e6:	08 95       	ret
    50e8:	9b 01       	movw	r18, r22
    50ea:	ac 01       	movw	r20, r24
    50ec:	0a 2e       	mov	r0, r26
    50ee:	06 94       	lsr	r0
    50f0:	57 95       	ror	r21
    50f2:	47 95       	ror	r20
    50f4:	37 95       	ror	r19
    50f6:	27 95       	ror	r18
    50f8:	ba 95       	dec	r27
    50fa:	c9 f7       	brne	.-14     	; 0x50ee <__ultoa_invert+0xa2>
    50fc:	62 0f       	add	r22, r18
    50fe:	73 1f       	adc	r23, r19
    5100:	84 1f       	adc	r24, r20
    5102:	95 1f       	adc	r25, r21
    5104:	a0 1d       	adc	r26, r0
    5106:	08 95       	ret

00005108 <_exit>:
    5108:	f8 94       	cli

0000510a <__stop_program>:
    510a:	ff cf       	rjmp	.-2      	; 0x510a <__stop_program>
