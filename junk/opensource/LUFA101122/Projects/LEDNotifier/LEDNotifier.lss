
LEDNotifier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000e64  00000ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800116  00800116  00000f0e  2**0
                  ALLOC
  3 .stab         00000b1c  00000000  00000000  00000f10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002b1  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000420  00000000  00000000  00001cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000b09  00000000  00000000  000020fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006e8d  00000000  00000000  00002c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001e10  00000000  00000000  00009a93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000055df  00000000  00000000  0000b8a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000600  00000000  00000000  00010e84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002c66  00000000  00000000  00011484  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002c8f  00000000  00000000  000140ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004a0  00000000  00000000  00016d79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	return Endpoint_IsConfigured();
}

void Endpoint_ClearEndpoints(void)
{
   0:	90 c0       	rjmp	.+288    	; 0x122 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
   4:	ab c0       	rjmp	.+342    	; 0x15c <__bad_interrupt>

	return ENDPOINT_READYWAIT_NoError;
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
   6:	00 00       	nop
   8:	a9 c0       	rjmp	.+338    	; 0x15c <__bad_interrupt>
   a:	00 00       	nop
   c:	a7 c0       	rjmp	.+334    	; 0x15c <__bad_interrupt>
   e:	00 00       	nop
  10:	a5 c0       	rjmp	.+330    	; 0x15c <__bad_interrupt>
  12:	00 00       	nop
  14:	a3 c0       	rjmp	.+326    	; 0x15c <__bad_interrupt>
  16:	00 00       	nop
  18:	a1 c0       	rjmp	.+322    	; 0x15c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	9f c0       	rjmp	.+318    	; 0x15c <__bad_interrupt>
  1e:	00 00       	nop
  20:	9d c0       	rjmp	.+314    	; 0x15c <__bad_interrupt>
  22:	00 00       	nop
  24:	9b c0       	rjmp	.+310    	; 0x15c <__bad_interrupt>
  26:	00 00       	nop
  28:	0e c2       	rjmp	.+1052   	; 0x446 <__vector_10>
  2a:	00 00       	nop
  2c:	97 c0       	rjmp	.+302    	; 0x15c <__bad_interrupt>
  2e:	00 00       	nop
  30:	95 c0       	rjmp	.+298    	; 0x15c <__bad_interrupt>
  32:	00 00       	nop
  34:	93 c0       	rjmp	.+294    	; 0x15c <__bad_interrupt>
  36:	00 00       	nop
  38:	91 c0       	rjmp	.+290    	; 0x15c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	8f c0       	rjmp	.+286    	; 0x15c <__bad_interrupt>
  3e:	00 00       	nop
  40:	8d c0       	rjmp	.+282    	; 0x15c <__bad_interrupt>
  42:	00 00       	nop
  44:	8b c0       	rjmp	.+278    	; 0x15c <__bad_interrupt>
  46:	00 00       	nop
  48:	89 c0       	rjmp	.+274    	; 0x15c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	87 c0       	rjmp	.+270    	; 0x15c <__bad_interrupt>
  4e:	00 00       	nop
  50:	85 c0       	rjmp	.+266    	; 0x15c <__bad_interrupt>
  52:	00 00       	nop
  54:	84 c0       	rjmp	.+264    	; 0x15e <__vector_21>
  56:	00 00       	nop
  58:	81 c0       	rjmp	.+258    	; 0x15c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	7f c0       	rjmp	.+254    	; 0x15c <__bad_interrupt>
  5e:	00 00       	nop
  60:	7d c0       	rjmp	.+250    	; 0x15c <__bad_interrupt>
  62:	00 00       	nop
  64:	7b c0       	rjmp	.+246    	; 0x15c <__bad_interrupt>
  66:	00 00       	nop
  68:	79 c0       	rjmp	.+242    	; 0x15c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	77 c0       	rjmp	.+238    	; 0x15c <__bad_interrupt>
  6e:	00 00       	nop
  70:	75 c0       	rjmp	.+234    	; 0x15c <__bad_interrupt>
  72:	00 00       	nop
  74:	73 c0       	rjmp	.+230    	; 0x15c <__bad_interrupt>
  76:	00 00       	nop
  78:	71 c0       	rjmp	.+226    	; 0x15c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	6f c0       	rjmp	.+222    	; 0x15c <__bad_interrupt>
  7e:	00 00       	nop
  80:	6d c0       	rjmp	.+218    	; 0x15c <__bad_interrupt>
  82:	00 00       	nop
  84:	6b c0       	rjmp	.+214    	; 0x15c <__bad_interrupt>
  86:	00 00       	nop
  88:	69 c0       	rjmp	.+210    	; 0x15c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	67 c0       	rjmp	.+206    	; 0x15c <__bad_interrupt>
  8e:	00 00       	nop
  90:	65 c0       	rjmp	.+202    	; 0x15c <__bad_interrupt>
  92:	00 00       	nop
  94:	63 c0       	rjmp	.+198    	; 0x15c <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
  a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  ba:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
  ca:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
  da:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

000000e8 <LanguageString>:
  e8:	04 03 09 04                                         ....

000000ec <ManufacturerString>:
  ec:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  fc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000106 <ProductString>:
 106:	1a 03 4c 00 45 00 44 00 20 00 4e 00 6f 00 74 00     ..L.E.D. .N.o.t.
 116:	69 00 66 00 69 00 65 00 72 00 00 00                 i.f.i.e.r...

00000122 <__ctors_end>:
 122:	11 24       	eor	r1, r1
 124:	1f be       	out	0x3f, r1	; 63
 126:	cf ef       	ldi	r28, 0xFF	; 255
 128:	d0 e2       	ldi	r29, 0x20	; 32
 12a:	de bf       	out	0x3e, r29	; 62
 12c:	cd bf       	out	0x3d, r28	; 61

0000012e <__do_copy_data>:
 12e:	11 e0       	ldi	r17, 0x01	; 1
 130:	a0 e0       	ldi	r26, 0x00	; 0
 132:	b1 e0       	ldi	r27, 0x01	; 1
 134:	e4 e6       	ldi	r30, 0x64	; 100
 136:	fe e0       	ldi	r31, 0x0E	; 14
 138:	00 e0       	ldi	r16, 0x00	; 0
 13a:	0b bf       	out	0x3b, r16	; 59
 13c:	02 c0       	rjmp	.+4      	; 0x142 <__do_copy_data+0x14>
 13e:	07 90       	elpm	r0, Z+
 140:	0d 92       	st	X+, r0
 142:	a6 31       	cpi	r26, 0x16	; 22
 144:	b1 07       	cpc	r27, r17
 146:	d9 f7       	brne	.-10     	; 0x13e <__do_copy_data+0x10>

00000148 <__do_clear_bss>:
 148:	11 e0       	ldi	r17, 0x01	; 1
 14a:	a6 e1       	ldi	r26, 0x16	; 22
 14c:	b1 e0       	ldi	r27, 0x01	; 1
 14e:	01 c0       	rjmp	.+2      	; 0x152 <.do_clear_bss_start>

00000150 <.do_clear_bss_loop>:
 150:	1d 92       	st	X+, r1

00000152 <.do_clear_bss_start>:
 152:	a5 33       	cpi	r26, 0x35	; 53
 154:	b1 07       	cpc	r27, r17
 156:	e1 f7       	brne	.-8      	; 0x150 <.do_clear_bss_loop>
 158:	60 d0       	rcall	.+192    	; 0x21a <main>
 15a:	82 c6       	rjmp	.+3332   	; 0xe60 <_exit>

0000015c <__bad_interrupt>:
 15c:	51 cf       	rjmp	.-350    	; 0x0 <__vectors>

0000015e <__vector_21>:
static volatile uint8_t SoftPWM_Channel3_Duty;


/** Interrupt handler for managing the software PWM channels for the LEDs */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	2f 93       	push	r18
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
	uint8_t LEDMask = LEDS_ALL_LEDS;

	if (++SoftPWM_Count == 0b00011111)
 16e:	80 91 16 01 	lds	r24, 0x0116
 172:	8f 5f       	subi	r24, 0xFF	; 255
 174:	80 93 16 01 	sts	0x0116, r24
 178:	80 91 16 01 	lds	r24, 0x0116
 17c:	8f 31       	cpi	r24, 0x1F	; 31
 17e:	11 f4       	brne	.+4      	; 0x184 <__vector_21+0x26>
	  SoftPWM_Count = 0;
 180:	10 92 16 01 	sts	0x0116, r1

	if (SoftPWM_Count >= SoftPWM_Channel1_Duty)
 184:	90 91 16 01 	lds	r25, 0x0116
 188:	80 91 17 01 	lds	r24, 0x0117
 18c:	98 17       	cp	r25, r24
 18e:	10 f0       	brcs	.+4      	; 0x194 <__vector_21+0x36>
 190:	28 e1       	ldi	r18, 0x18	; 24
 192:	01 c0       	rjmp	.+2      	; 0x196 <__vector_21+0x38>
 194:	2c e1       	ldi	r18, 0x1C	; 28
	  LEDMask &= ~LEDS_LED1;

	if (SoftPWM_Count >= SoftPWM_Channel2_Duty)
 196:	90 91 16 01 	lds	r25, 0x0116
 19a:	80 91 18 01 	lds	r24, 0x0118
 19e:	98 17       	cp	r25, r24
 1a0:	08 f0       	brcs	.+2      	; 0x1a4 <__vector_21+0x46>
	  LEDMask &= ~LEDS_LED2;
 1a2:	27 7f       	andi	r18, 0xF7	; 247

	if (SoftPWM_Count >= SoftPWM_Channel3_Duty)
 1a4:	90 91 16 01 	lds	r25, 0x0116
 1a8:	80 91 19 01 	lds	r24, 0x0119
 1ac:	98 17       	cp	r25, r24
 1ae:	08 f0       	brcs	.+2      	; 0x1b2 <__vector_21+0x54>
	  LEDMask &= ~LEDS_LED3;
 1b0:	2f 7e       	andi	r18, 0xEF	; 239
				PORTC &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTC = (PORTC & ~LEDS_ALL_LEDS) | LEDMask;
 1b2:	88 b1       	in	r24, 0x08	; 8
 1b4:	83 7e       	andi	r24, 0xE3	; 227
 1b6:	28 2b       	or	r18, r24
 1b8:	28 b9       	out	0x08, r18	; 8

	LEDs_SetAllLEDs(LEDMask);
}
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	2f 91       	pop	r18
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	91 e0       	ldi	r25, 0x01	; 1
}
 1ce:	99 c5       	rjmp	.+2866   	; 0xd02 <CDC_Device_ProcessControlRequest>

000001d0 <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	91 e0       	ldi	r25, 0x01	; 1
}
 1d4:	4d c5       	rjmp	.+2714   	; 0xc70 <CDC_Device_ConfigureEndpoints>

000001d6 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1d6:	84 b7       	in	r24, 0x34	; 52
 1d8:	87 7f       	andi	r24, 0xF7	; 247
 1da:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 1dc:	88 e1       	ldi	r24, 0x18	; 24
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	f8 94       	cli
 1e2:	80 93 60 00 	sts	0x0060, r24
 1e6:	10 92 60 00 	sts	0x0060, r1
 1ea:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	20 e8       	ldi	r18, 0x80	; 128
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	f8 94       	cli
 1f6:	20 93 61 00 	sts	0x0061, r18
 1fa:	80 93 61 00 	sts	0x0061, r24
 1fe:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRC |= LEDS_ALL_LEDS;
 200:	87 b1       	in	r24, 0x07	; 7
 202:	8c 61       	ori	r24, 0x1C	; 28
 204:	87 b9       	out	0x07, r24	; 7

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
 206:	09 d1       	rcall	.+530    	; 0x41a <USB_Init>

	/* Timer Initialization */
	OCR0A  = 100;
 208:	84 e6       	ldi	r24, 0x64	; 100
 20a:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01);
 20c:	92 e0       	ldi	r25, 0x02	; 2
 20e:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS00);
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << OCIE0A);
 214:	90 93 6e 00 	sts	0x006E, r25
}
 218:	08 95       	ret

0000021a <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 21a:	dd df       	rcall	.-70     	; 0x1d6 <SetupHardware>

	/* Create a regular blocking character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateBlockingStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	6a e1       	ldi	r22, 0x1A	; 26
 222:	71 e0       	ldi	r23, 0x01	; 1
 224:	87 d4       	rcall	.+2318   	; 0xb34 <CDC_Device_CreateBlockingStream>

	sei();
 226:	78 94       	sei

	for (;;)
	{
		/* Read in next LED colour command from the host */
		uint8_t ColourUpdate = fgetc(&USBSerialStream);
 228:	8a e1       	ldi	r24, 0x1A	; 26
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	d7 d5       	rcall	.+2990   	; 0xddc <fgetc>

		/* Top 3 bits select the LED, bottom 5 control the brightness */
		uint8_t Channel = (ColourUpdate & 0b11100000);
 22e:	28 2f       	mov	r18, r24
 230:	20 7e       	andi	r18, 0xE0	; 224
		uint8_t Duty    = (ColourUpdate & 0b00011111);
 232:	8f 71       	andi	r24, 0x1F	; 31

		if (Channel & (1 << 5))
 234:	92 2f       	mov	r25, r18
 236:	25 ff       	sbrs	r18, 5
 238:	02 c0       	rjmp	.+4      	; 0x23e <main+0x24>
		  SoftPWM_Channel1_Duty = Duty;
 23a:	80 93 17 01 	sts	0x0117, r24

		if (Channel & (1 << 6))
 23e:	96 ff       	sbrs	r25, 6
 240:	02 c0       	rjmp	.+4      	; 0x246 <main+0x2c>
		  SoftPWM_Channel2_Duty = Duty;
 242:	80 93 18 01 	sts	0x0118, r24

		if (Channel & (1 << 7))
 246:	27 ff       	sbrs	r18, 7
 248:	02 c0       	rjmp	.+4      	; 0x24e <main+0x34>
		  SoftPWM_Channel3_Duty = Duty;
 24a:	80 93 19 01 	sts	0x0119, r24

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	b1 d4       	rcall	.+2402   	; 0xbb6 <CDC_Device_USBTask>
		USB_USBTask();
 254:	2a d4       	rcall	.+2132   	; 0xaaa <USB_USBTask>
 256:	e8 cf       	rjmp	.-48     	; 0x228 <main+0xe>

00000258 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 258:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 25a:	92 30       	cpi	r25, 0x02	; 2
 25c:	49 f0       	breq	.+18     	; 0x270 <CALLBACK_USB_GetDescriptor+0x18>
 25e:	93 30       	cpi	r25, 0x03	; 3
 260:	61 f0       	breq	.+24     	; 0x27a <CALLBACK_USB_GetDescriptor+0x22>
 262:	91 30       	cpi	r25, 0x01	; 1
 264:	f9 f4       	brne	.+62     	; 0x2a4 <CALLBACK_USB_GetDescriptor+0x4c>
 266:	e8 e9       	ldi	r30, 0x98	; 152
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	22 e1       	ldi	r18, 0x12	; 18
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	1e c0       	rjmp	.+60     	; 0x2ac <CALLBACK_USB_GetDescriptor+0x54>
 270:	ea ea       	ldi	r30, 0xAA	; 170
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	2e e3       	ldi	r18, 0x3E	; 62
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	19 c0       	rjmp	.+50     	; 0x2ac <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	49 f0       	breq	.+18     	; 0x290 <CALLBACK_USB_GetDescriptor+0x38>
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	18 f0       	brcs	.+6      	; 0x288 <CALLBACK_USB_GetDescriptor+0x30>
 282:	82 30       	cpi	r24, 0x02	; 2
 284:	79 f4       	brne	.+30     	; 0x2a4 <CALLBACK_USB_GetDescriptor+0x4c>
 286:	08 c0       	rjmp	.+16     	; 0x298 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 288:	e8 ee       	ldi	r30, 0xE8	; 232
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	84 91       	lpm	r24, Z+
 28e:	07 c0       	rjmp	.+14     	; 0x29e <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 290:	ec ee       	ldi	r30, 0xEC	; 236
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	84 91       	lpm	r24, Z+
 296:	03 c0       	rjmp	.+6      	; 0x29e <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 298:	e6 e0       	ldi	r30, 0x06	; 6
 29a:	f1 e0       	ldi	r31, 0x01	; 1
 29c:	84 91       	lpm	r24, Z+
 29e:	28 2f       	mov	r18, r24
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	04 c0       	rjmp	.+8      	; 0x2ac <CALLBACK_USB_GetDescriptor+0x54>
 2a4:	e0 e0       	ldi	r30, 0x00	; 0
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 2ac:	ed 93       	st	X+, r30
 2ae:	fc 93       	st	X, r31
	return Size;
}
 2b0:	c9 01       	movw	r24, r18
 2b2:	08 95       	ret

000002b4 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 2b4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 2b8:	80 91 eb 00 	lds	r24, 0x00EB
 2bc:	81 60       	ori	r24, 0x01	; 1
 2be:	80 93 eb 00 	sts	0x00EB, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
 2c2:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
 2c6:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
 2ca:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 2ce:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
 2d2:	88 1f       	adc	r24, r24
 2d4:	88 27       	eor	r24, r24
 2d6:	88 1f       	adc	r24, r24
 2d8:	08 95       	ret

000002da <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 2da:	80 91 2d 01 	lds	r24, 0x012D
 2de:	88 23       	and	r24, r24
 2e0:	9c f4       	brge	.+38     	; 0x308 <Endpoint_ClearStatusStage+0x2e>
 2e2:	04 c0       	rjmp	.+8      	; 0x2ec <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 2e4:	80 91 2c 01 	lds	r24, 0x012C
 2e8:	88 23       	and	r24, r24
 2ea:	b9 f0       	breq	.+46     	; 0x31a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 2ec:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 2f0:	82 ff       	sbrs	r24, 2
 2f2:	f8 cf       	rjmp	.-16     	; 0x2e4 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 2f4:	80 91 e8 00 	lds	r24, 0x00E8
 2f8:	8b 77       	andi	r24, 0x7B	; 123
 2fa:	80 93 e8 00 	sts	0x00E8, r24
 2fe:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 300:	80 91 2c 01 	lds	r24, 0x012C
 304:	88 23       	and	r24, r24
 306:	49 f0       	breq	.+18     	; 0x31a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 308:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 30c:	80 ff       	sbrs	r24, 0
 30e:	f8 cf       	rjmp	.-16     	; 0x300 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 310:	80 91 e8 00 	lds	r24, 0x00E8
 314:	8e 77       	andi	r24, 0x7E	; 126
 316:	80 93 e8 00 	sts	0x00E8, r24
 31a:	08 95       	ret

0000031c <Endpoint_WaitUntilReady>:
			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is active (i.e. enumerated to a host)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 31c:	40 91 e4 00 	lds	r20, 0x00E4
 320:	50 91 e5 00 	lds	r21, 0x00E5
 324:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
 326:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 32a:	80 ff       	sbrs	r24, 0
 32c:	05 c0       	rjmp	.+10     	; 0x338 <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 32e:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
 332:	80 ff       	sbrs	r24, 0
 334:	05 c0       	rjmp	.+10     	; 0x340 <Endpoint_WaitUntilReady+0x24>
 336:	22 c0       	rjmp	.+68     	; 0x37c <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 338:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 33c:	82 fd       	sbrc	r24, 2
 33e:	1e c0       	rjmp	.+60     	; 0x37c <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 340:	80 91 2c 01 	lds	r24, 0x012C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 344:	88 23       	and	r24, r24
 346:	11 f4       	brne	.+4      	; 0x34c <Endpoint_WaitUntilReady+0x30>
 348:	82 e0       	ldi	r24, 0x02	; 2
 34a:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 34c:	85 30       	cpi	r24, 0x05	; 5
 34e:	11 f4       	brne	.+4      	; 0x354 <Endpoint_WaitUntilReady+0x38>
 350:	83 e0       	ldi	r24, 0x03	; 3
 352:	08 95       	ret
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 354:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 358:	85 ff       	sbrs	r24, 5
 35a:	02 c0       	rjmp	.+4      	; 0x360 <Endpoint_WaitUntilReady+0x44>
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	08 95       	ret
 360:	80 91 e4 00 	lds	r24, 0x00E4
 364:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 368:	84 17       	cp	r24, r20
 36a:	95 07       	cpc	r25, r21
 36c:	e1 f2       	breq	.-72     	; 0x326 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 36e:	22 23       	and	r18, r18
 370:	11 f4       	brne	.+4      	; 0x376 <Endpoint_WaitUntilReady+0x5a>
 372:	84 e0       	ldi	r24, 0x04	; 4
 374:	08 95       	ret
 376:	21 50       	subi	r18, 0x01	; 1
 378:	ac 01       	movw	r20, r24
 37a:	d5 cf       	rjmp	.-86     	; 0x326 <Endpoint_WaitUntilReady+0xa>
 37c:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 37e:	08 95       	ret

00000380 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 380:	55 d0       	rcall	.+170    	; 0x42c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 382:	5c d0       	rcall	.+184    	; 0x43c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 384:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
 388:	98 2f       	mov	r25, r24
 38a:	9f 77       	andi	r25, 0x7F	; 127
 38c:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
 390:	80 68       	ori	r24, 0x80	; 128
 392:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 396:	8c e0       	ldi	r24, 0x0C	; 12
 398:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 39a:	89 b5       	in	r24, 0x29	; 41
 39c:	82 60       	ori	r24, 0x02	; 2
 39e:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
 3a0:	09 b4       	in	r0, 0x29	; 41
 3a2:	00 fe       	sbrs	r0, 0
 3a4:	fd cf       	rjmp	.-6      	; 0x3a0 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 3a6:	80 91 d8 00 	lds	r24, 0x00D8
 3aa:	8f 7d       	andi	r24, 0xDF	; 223
 3ac:	80 93 d8 00 	sts	0x00D8, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 3b0:	80 91 d7 00 	lds	r24, 0x00D7
 3b4:	80 68       	ori	r24, 0x80	; 128
 3b6:	80 93 d7 00 	sts	0x00D7, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
 3ba:	10 92 2c 01 	sts	0x012C, r1
	USB_ConfigurationNumber  = 0;
 3be:	10 92 2a 01 	sts	0x012A, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
 3c2:	10 92 29 01 	sts	0x0129, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
 3c6:	10 92 28 01 	sts	0x0128, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 3ca:	80 91 e0 00 	lds	r24, 0x00E0
 3ce:	8b 7f       	andi	r24, 0xFB	; 251
 3d0:	80 93 e0 00 	sts	0x00E0, r24
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  USB_Device_SetLowSpeed();
	else
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUS);
 3d4:	80 91 d8 00 	lds	r24, 0x00D8
 3d8:	81 60       	ori	r24, 0x01	; 1
 3da:	80 93 d8 00 	sts	0x00D8, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	42 e0       	ldi	r20, 0x02	; 2
 3e4:	67 df       	rcall	.-306    	; 0x2b4 <Endpoint_ConfigureEndpoint_Prv>

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
							   ENDPOINT_BANK_SINGLE);

	USB_INT_Clear(USB_INT_SUSPI);
 3e6:	80 91 e1 00 	lds	r24, 0x00E1
 3ea:	8e 7f       	andi	r24, 0xFE	; 254
 3ec:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPI);
 3f0:	80 91 e2 00 	lds	r24, 0x00E2
 3f4:	81 60       	ori	r24, 0x01	; 1
 3f6:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Enable(USB_INT_EORSTI);
 3fa:	80 91 e2 00 	lds	r24, 0x00E2
 3fe:	88 60       	ori	r24, 0x08	; 8
 400:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 404:	80 91 e0 00 	lds	r24, 0x00E0
 408:	8e 7f       	andi	r24, 0xFE	; 254
 40a:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 40e:	80 91 d8 00 	lds	r24, 0x00D8
 412:	80 61       	ori	r24, 0x10	; 16
 414:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 418:	08 95       	ret

0000041a <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 41a:	e7 ed       	ldi	r30, 0xD7	; 215
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	81 60       	ori	r24, 0x01	; 1
 422:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	80 93 2b 01 	sts	0x012B, r24

	USB_ResetInterface();
}
 42a:	aa cf       	rjmp	.-172    	; 0x380 <USB_ResetInterface>

0000042c <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 42c:	e8 ed       	ldi	r30, 0xD8	; 216
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	8c 7f       	andi	r24, 0xFC	; 252
 434:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 436:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 43a:	08 95       	ret

0000043c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
 43c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
 440:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 444:	08 95       	ret

00000446 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 446:	1f 92       	push	r1
 448:	0f 92       	push	r0
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	0f 92       	push	r0
 44e:	0b b6       	in	r0, 0x3b	; 59
 450:	0f 92       	push	r0
 452:	11 24       	eor	r1, r1
 454:	2f 93       	push	r18
 456:	3f 93       	push	r19
 458:	4f 93       	push	r20
 45a:	5f 93       	push	r21
 45c:	6f 93       	push	r22
 45e:	7f 93       	push	r23
 460:	8f 93       	push	r24
 462:	9f 93       	push	r25
 464:	af 93       	push	r26
 466:	bf 93       	push	r27
 468:	ef 93       	push	r30
 46a:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
 46c:	80 91 da 00 	lds	r24, 0x00DA
 470:	80 ff       	sbrs	r24, 0
 472:	15 c0       	rjmp	.+42     	; 0x49e <__vector_10+0x58>
 474:	80 91 d8 00 	lds	r24, 0x00D8
 478:	80 ff       	sbrs	r24, 0
 47a:	11 c0       	rjmp	.+34     	; 0x49e <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_VBUS);
 47c:	80 91 da 00 	lds	r24, 0x00DA
 480:	8e 7f       	andi	r24, 0xFE	; 254
 482:	80 93 da 00 	sts	0x00DA, r24
				 *  \note This function is not available on some AVR models which do not support hardware VBUS monitoring.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 486:	80 91 d9 00 	lds	r24, 0x00D9

		if (USB_VBUS_GetStatus())
 48a:	80 ff       	sbrs	r24, 0
 48c:	05 c0       	rjmp	.+10     	; 0x498 <__vector_10+0x52>
		{
			USB_DeviceState = DEVICE_STATE_Powered;
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	80 93 2c 01 	sts	0x012C, r24
			EVENT_USB_Device_Connect();
 494:	0a d2       	rcall	.+1044   	; 0x8aa <USB_Event_Stub>
 496:	03 c0       	rjmp	.+6      	; 0x49e <__vector_10+0x58>
		}
		else
		{
			USB_DeviceState = DEVICE_STATE_Unattached;
 498:	10 92 2c 01 	sts	0x012C, r1
			EVENT_USB_Device_Disconnect();
 49c:	06 d2       	rcall	.+1036   	; 0x8aa <USB_Event_Stub>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 49e:	80 91 e1 00 	lds	r24, 0x00E1
 4a2:	80 ff       	sbrs	r24, 0
 4a4:	1d c0       	rjmp	.+58     	; 0x4e0 <__vector_10+0x9a>
 4a6:	80 91 e2 00 	lds	r24, 0x00E2
 4aa:	80 ff       	sbrs	r24, 0
 4ac:	19 c0       	rjmp	.+50     	; 0x4e0 <__vector_10+0x9a>
	{
		USB_INT_Clear(USB_INT_SUSPI);
 4ae:	80 91 e1 00 	lds	r24, 0x00E1
 4b2:	8e 7f       	andi	r24, 0xFE	; 254
 4b4:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPI);
 4b8:	80 91 e2 00 	lds	r24, 0x00E2
 4bc:	8e 7f       	andi	r24, 0xFE	; 254
 4be:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
 4c2:	80 91 e2 00 	lds	r24, 0x00E2
 4c6:	80 61       	ori	r24, 0x10	; 16
 4c8:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 4cc:	80 91 d8 00 	lds	r24, 0x00D8
 4d0:	80 62       	ori	r24, 0x20	; 32
 4d2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 4d6:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 4d8:	85 e0       	ldi	r24, 0x05	; 5
 4da:	80 93 2c 01 	sts	0x012C, r24
		EVENT_USB_Device_Suspend();
 4de:	e5 d1       	rcall	.+970    	; 0x8aa <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 4e0:	80 91 e1 00 	lds	r24, 0x00E1
 4e4:	84 ff       	sbrs	r24, 4
 4e6:	2e c0       	rjmp	.+92     	; 0x544 <__vector_10+0xfe>
 4e8:	80 91 e2 00 	lds	r24, 0x00E2
 4ec:	84 ff       	sbrs	r24, 4
 4ee:	2a c0       	rjmp	.+84     	; 0x544 <__vector_10+0xfe>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 4f0:	8c e0       	ldi	r24, 0x0C	; 12
 4f2:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 4f4:	89 b5       	in	r24, 0x29	; 41
 4f6:	82 60       	ori	r24, 0x02	; 2
 4f8:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 4fa:	09 b4       	in	r0, 0x29	; 41
 4fc:	00 fe       	sbrs	r0, 0
 4fe:	fd cf       	rjmp	.-6      	; 0x4fa <__vector_10+0xb4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 500:	80 91 d8 00 	lds	r24, 0x00D8
 504:	8f 7d       	andi	r24, 0xDF	; 223
 506:	80 93 d8 00 	sts	0x00D8, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUPI);
 50a:	80 91 e1 00 	lds	r24, 0x00E1
 50e:	8f 7e       	andi	r24, 0xEF	; 239
 510:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUPI);
 514:	80 91 e2 00 	lds	r24, 0x00E2
 518:	8f 7e       	andi	r24, 0xEF	; 239
 51a:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPI);
 51e:	80 91 e2 00 	lds	r24, 0x00E2
 522:	81 60       	ori	r24, 0x01	; 1
 524:	80 93 e2 00 	sts	0x00E2, r24

		if (USB_ConfigurationNumber)
 528:	80 91 2a 01 	lds	r24, 0x012A
 52c:	88 23       	and	r24, r24
 52e:	31 f4       	brne	.+12     	; 0x53c <__vector_10+0xf6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 530:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 534:	87 fd       	sbrc	r24, 7
 536:	02 c0       	rjmp	.+4      	; 0x53c <__vector_10+0xf6>
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	01 c0       	rjmp	.+2      	; 0x53e <__vector_10+0xf8>
 53c:	84 e0       	ldi	r24, 0x04	; 4
 53e:	80 93 2c 01 	sts	0x012C, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 542:	b3 d1       	rcall	.+870    	; 0x8aa <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 544:	80 91 e1 00 	lds	r24, 0x00E1
 548:	83 ff       	sbrs	r24, 3
 54a:	22 c0       	rjmp	.+68     	; 0x590 <__vector_10+0x14a>
 54c:	80 91 e2 00 	lds	r24, 0x00E2
 550:	83 ff       	sbrs	r24, 3
 552:	1e c0       	rjmp	.+60     	; 0x590 <__vector_10+0x14a>
	{
		USB_INT_Clear(USB_INT_EORSTI);
 554:	80 91 e1 00 	lds	r24, 0x00E1
 558:	87 7f       	andi	r24, 0xF7	; 247
 55a:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
 55e:	82 e0       	ldi	r24, 0x02	; 2
 560:	80 93 2c 01 	sts	0x012C, r24
		USB_ConfigurationNumber = 0;
 564:	10 92 2a 01 	sts	0x012A, r1

		USB_INT_Clear(USB_INT_SUSPI);
 568:	80 91 e1 00 	lds	r24, 0x00E1
 56c:	8e 7f       	andi	r24, 0xFE	; 254
 56e:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPI);
 572:	80 91 e2 00 	lds	r24, 0x00E2
 576:	8e 7f       	andi	r24, 0xFE	; 254
 578:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
 57c:	80 91 e2 00 	lds	r24, 0x00E2
 580:	80 61       	ori	r24, 0x10	; 16
 582:	80 93 e2 00 	sts	0x00E2, r24
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	60 e0       	ldi	r22, 0x00	; 0
 58a:	42 e0       	ldi	r20, 0x02	; 2
 58c:	93 de       	rcall	.-730    	; 0x2b4 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 58e:	8d d1       	rcall	.+794    	; 0x8aa <USB_Event_Stub>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 590:	80 91 e1 00 	lds	r24, 0x00E1
 594:	82 ff       	sbrs	r24, 2
 596:	0a c0       	rjmp	.+20     	; 0x5ac <__vector_10+0x166>
 598:	80 91 e2 00 	lds	r24, 0x00E2
 59c:	82 ff       	sbrs	r24, 2
 59e:	06 c0       	rjmp	.+12     	; 0x5ac <__vector_10+0x166>
	{
		USB_INT_Clear(USB_INT_SOFI);
 5a0:	80 91 e1 00 	lds	r24, 0x00E1
 5a4:	8b 7f       	andi	r24, 0xFB	; 251
 5a6:	80 93 e1 00 	sts	0x00E1, r24

		EVENT_USB_Device_StartOfFrame();
 5aa:	7f d1       	rcall	.+766    	; 0x8aa <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 5ac:	ff 91       	pop	r31
 5ae:	ef 91       	pop	r30
 5b0:	bf 91       	pop	r27
 5b2:	af 91       	pop	r26
 5b4:	9f 91       	pop	r25
 5b6:	8f 91       	pop	r24
 5b8:	7f 91       	pop	r23
 5ba:	6f 91       	pop	r22
 5bc:	5f 91       	pop	r21
 5be:	4f 91       	pop	r20
 5c0:	3f 91       	pop	r19
 5c2:	2f 91       	pop	r18
 5c4:	0f 90       	pop	r0
 5c6:	0b be       	out	0x3b, r0	; 59
 5c8:	0f 90       	pop	r0
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	0f 90       	pop	r0
 5ce:	1f 90       	pop	r1
 5d0:	18 95       	reti

000005d2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 5d2:	0f 93       	push	r16
 5d4:	1f 93       	push	r17
 5d6:	df 93       	push	r29
 5d8:	cf 93       	push	r28
 5da:	cd b7       	in	r28, 0x3d	; 61
 5dc:	de b7       	in	r29, 0x3e	; 62
 5de:	ac 97       	sbiw	r28, 0x2c	; 44
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	f8 94       	cli
 5e4:	de bf       	out	0x3e, r29	; 62
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	cd bf       	out	0x3d, r28	; 61
 5ea:	ed e2       	ldi	r30, 0x2D	; 45
 5ec:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 5ee:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
 5f2:	81 93       	st	Z+, r24

void USB_Device_ProcessControlRequest(void)
{
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 5f4:	21 e0       	ldi	r18, 0x01	; 1
 5f6:	e5 33       	cpi	r30, 0x35	; 53
 5f8:	f2 07       	cpc	r31, r18
 5fa:	c9 f7       	brne	.-14     	; 0x5ee <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_Byte();

	EVENT_USB_Device_ControlRequest();
 5fc:	e6 dd       	rcall	.-1076   	; 0x1ca <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 5fe:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 602:	83 ff       	sbrs	r24, 3
 604:	39 c1       	rjmp	.+626    	; 0x878 <USB_Device_ProcessControlRequest+0x2a6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 606:	80 91 2d 01 	lds	r24, 0x012D

		switch (USB_ControlRequest.bRequest)
 60a:	30 91 2e 01 	lds	r19, 0x012E
 60e:	35 30       	cpi	r19, 0x05	; 5
 610:	09 f4       	brne	.+2      	; 0x614 <USB_Device_ProcessControlRequest+0x42>
 612:	87 c0       	rjmp	.+270    	; 0x722 <USB_Device_ProcessControlRequest+0x150>
 614:	36 30       	cpi	r19, 0x06	; 6
 616:	40 f4       	brcc	.+16     	; 0x628 <USB_Device_ProcessControlRequest+0x56>
 618:	31 30       	cpi	r19, 0x01	; 1
 61a:	c9 f1       	breq	.+114    	; 0x68e <USB_Device_ProcessControlRequest+0xbc>
 61c:	31 30       	cpi	r19, 0x01	; 1
 61e:	70 f0       	brcs	.+28     	; 0x63c <USB_Device_ProcessControlRequest+0x6a>
 620:	33 30       	cpi	r19, 0x03	; 3
 622:	09 f0       	breq	.+2      	; 0x626 <USB_Device_ProcessControlRequest+0x54>
 624:	29 c1       	rjmp	.+594    	; 0x878 <USB_Device_ProcessControlRequest+0x2a6>
 626:	33 c0       	rjmp	.+102    	; 0x68e <USB_Device_ProcessControlRequest+0xbc>
 628:	38 30       	cpi	r19, 0x08	; 8
 62a:	09 f4       	brne	.+2      	; 0x62e <USB_Device_ProcessControlRequest+0x5c>
 62c:	f7 c0       	rjmp	.+494    	; 0x81c <USB_Device_ProcessControlRequest+0x24a>
 62e:	39 30       	cpi	r19, 0x09	; 9
 630:	09 f4       	brne	.+2      	; 0x634 <USB_Device_ProcessControlRequest+0x62>
 632:	06 c1       	rjmp	.+524    	; 0x840 <USB_Device_ProcessControlRequest+0x26e>
 634:	36 30       	cpi	r19, 0x06	; 6
 636:	09 f0       	breq	.+2      	; 0x63a <USB_Device_ProcessControlRequest+0x68>
 638:	1f c1       	rjmp	.+574    	; 0x878 <USB_Device_ProcessControlRequest+0x2a6>
 63a:	99 c0       	rjmp	.+306    	; 0x76e <USB_Device_ProcessControlRequest+0x19c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 63c:	80 38       	cpi	r24, 0x80	; 128
 63e:	21 f0       	breq	.+8      	; 0x648 <USB_Device_ProcessControlRequest+0x76>
 640:	82 38       	cpi	r24, 0x82	; 130
 642:	09 f0       	breq	.+2      	; 0x646 <USB_Device_ProcessControlRequest+0x74>
 644:	19 c1       	rjmp	.+562    	; 0x878 <USB_Device_ProcessControlRequest+0x2a6>
 646:	08 c0       	rjmp	.+16     	; 0x658 <USB_Device_ProcessControlRequest+0x86>
 648:	90 91 28 01 	lds	r25, 0x0128
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
 64c:	80 91 29 01 	lds	r24, 0x0129
 650:	88 23       	and	r24, r24
 652:	99 f0       	breq	.+38     	; 0x67a <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 654:	92 60       	ori	r25, 0x02	; 2
 656:	11 c0       	rjmp	.+34     	; 0x67a <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 658:	80 91 31 01 	lds	r24, 0x0131
 65c:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 65e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 662:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	25 e0       	ldi	r18, 0x05	; 5
 66a:	96 95       	lsr	r25
 66c:	87 95       	ror	r24
 66e:	2a 95       	dec	r18
 670:	e1 f7       	brne	.-8      	; 0x66a <USB_Device_ProcessControlRequest+0x98>
 672:	98 2f       	mov	r25, r24
 674:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 676:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 67a:	80 91 e8 00 	lds	r24, 0x00E8
 67e:	87 7f       	andi	r24, 0xF7	; 247
 680:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
 684:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Word >> 8);
 688:	10 92 f1 00 	sts	0x00F1, r1
 68c:	d2 c0       	rjmp	.+420    	; 0x832 <USB_Device_ProcessControlRequest+0x260>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 68e:	88 23       	and	r24, r24
 690:	19 f0       	breq	.+6      	; 0x698 <USB_Device_ProcessControlRequest+0xc6>
 692:	82 30       	cpi	r24, 0x02	; 2
 694:	09 f0       	breq	.+2      	; 0x698 <USB_Device_ProcessControlRequest+0xc6>
 696:	f0 c0       	rjmp	.+480    	; 0x878 <USB_Device_ProcessControlRequest+0x2a6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	8f 71       	andi	r24, 0x1F	; 31
 69c:	90 70       	andi	r25, 0x00	; 0
 69e:	00 97       	sbiw	r24, 0x00	; 0
 6a0:	21 f0       	breq	.+8      	; 0x6aa <USB_Device_ProcessControlRequest+0xd8>
 6a2:	02 97       	sbiw	r24, 0x02	; 2
 6a4:	09 f0       	breq	.+2      	; 0x6a8 <USB_Device_ProcessControlRequest+0xd6>
 6a6:	e8 c0       	rjmp	.+464    	; 0x878 <USB_Device_ProcessControlRequest+0x2a6>
 6a8:	0c c0       	rjmp	.+24     	; 0x6c2 <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 6aa:	80 91 2f 01 	lds	r24, 0x012F
 6ae:	81 30       	cpi	r24, 0x01	; 1
 6b0:	09 f0       	breq	.+2      	; 0x6b4 <USB_Device_ProcessControlRequest+0xe2>
 6b2:	e2 c0       	rjmp	.+452    	; 0x878 <USB_Device_ProcessControlRequest+0x2a6>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 6b4:	10 92 29 01 	sts	0x0129, r1
 6b8:	33 30       	cpi	r19, 0x03	; 3
 6ba:	69 f5       	brne	.+90     	; 0x716 <USB_Device_ProcessControlRequest+0x144>
 6bc:	80 93 29 01 	sts	0x0129, r24
 6c0:	2a c0       	rjmp	.+84     	; 0x716 <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 6c2:	80 91 2f 01 	lds	r24, 0x012F
 6c6:	88 23       	and	r24, r24
 6c8:	31 f5       	brne	.+76     	; 0x716 <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 6ca:	20 91 31 01 	lds	r18, 0x0131
 6ce:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 6d0:	09 f4       	brne	.+2      	; 0x6d4 <USB_Device_ProcessControlRequest+0x102>
 6d2:	d2 c0       	rjmp	.+420    	; 0x878 <USB_Device_ProcessControlRequest+0x2a6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 6d4:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 6d8:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 6dc:	80 ff       	sbrs	r24, 0
 6de:	1b c0       	rjmp	.+54     	; 0x716 <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 6e0:	33 30       	cpi	r19, 0x03	; 3
 6e2:	21 f4       	brne	.+8      	; 0x6ec <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 6e4:	80 91 eb 00 	lds	r24, 0x00EB
 6e8:	80 62       	ori	r24, 0x20	; 32
 6ea:	13 c0       	rjmp	.+38     	; 0x712 <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 6ec:	80 91 eb 00 	lds	r24, 0x00EB
 6f0:	80 61       	ori	r24, 0x10	; 16
 6f2:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <USB_Device_ProcessControlRequest+0x12e>
 6fc:	88 0f       	add	r24, r24
 6fe:	99 1f       	adc	r25, r25
 700:	2a 95       	dec	r18
 702:	e2 f7       	brpl	.-8      	; 0x6fc <USB_Device_ProcessControlRequest+0x12a>
 704:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 708:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 70c:	80 91 eb 00 	lds	r24, 0x00EB
 710:	88 60       	ori	r24, 0x08	; 8
 712:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 716:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 71a:	80 91 e8 00 	lds	r24, 0x00E8
 71e:	87 7f       	andi	r24, 0xF7	; 247
 720:	8b c0       	rjmp	.+278    	; 0x838 <USB_Device_ProcessControlRequest+0x266>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 722:	88 23       	and	r24, r24
 724:	09 f0       	breq	.+2      	; 0x728 <USB_Device_ProcessControlRequest+0x156>
 726:	a8 c0       	rjmp	.+336    	; 0x878 <USB_Device_ProcessControlRequest+0x2a6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 728:	10 91 2f 01 	lds	r17, 0x012F
 72c:	1f 77       	andi	r17, 0x7F	; 127

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 72e:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 730:	f8 94       	cli
 732:	80 91 e8 00 	lds	r24, 0x00E8
 736:	87 7f       	andi	r24, 0xF7	; 247
 738:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearSETUP();

		Endpoint_ClearStatusStage();
 73c:	ce dd       	rcall	.-1124   	; 0x2da <Endpoint_ClearStatusStage>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 73e:	80 91 e8 00 	lds	r24, 0x00E8

		while (!(Endpoint_IsINReady()));
 742:	80 ff       	sbrs	r24, 0
 744:	fc cf       	rjmp	.-8      	; 0x73e <USB_Device_ProcessControlRequest+0x16c>

		USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 746:	11 23       	and	r17, r17
 748:	11 f4       	brne	.+4      	; 0x74e <USB_Device_ProcessControlRequest+0x17c>
 74a:	82 e0       	ldi	r24, 0x02	; 2
 74c:	01 c0       	rjmp	.+2      	; 0x750 <USB_Device_ProcessControlRequest+0x17e>
 74e:	83 e0       	ldi	r24, 0x03	; 3
 750:	80 93 2c 01 	sts	0x012C, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
 754:	80 91 e3 00 	lds	r24, 0x00E3
 758:	80 78       	andi	r24, 0x80	; 128
 75a:	18 2b       	or	r17, r24
 75c:	10 93 e3 00 	sts	0x00E3, r17
				UDADDR |= (1 << ADDEN);
 760:	80 91 e3 00 	lds	r24, 0x00E3
 764:	80 68       	ori	r24, 0x80	; 128
 766:	80 93 e3 00 	sts	0x00E3, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 76a:	0f bf       	out	0x3f, r16	; 63
    __asm__ volatile ("" ::: "memory");
 76c:	85 c0       	rjmp	.+266    	; 0x878 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 76e:	80 58       	subi	r24, 0x80	; 128
 770:	82 30       	cpi	r24, 0x02	; 2
 772:	08 f0       	brcs	.+2      	; 0x776 <USB_Device_ProcessControlRequest+0x1a4>
 774:	81 c0       	rjmp	.+258    	; 0x878 <USB_Device_ProcessControlRequest+0x2a6>
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 776:	80 91 2f 01 	lds	r24, 0x012F
 77a:	90 91 30 01 	lds	r25, 0x0130
 77e:	23 e0       	ldi	r18, 0x03	; 3
 780:	8c 3d       	cpi	r24, 0xDC	; 220
 782:	92 07       	cpc	r25, r18
 784:	99 f5       	brne	.+102    	; 0x7ec <USB_Device_ProcessControlRequest+0x21a>
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 786:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 788:	f8 94       	cli
 78a:	de 01       	movw	r26, r28
 78c:	15 96       	adiw	r26, 0x05	; 5
 78e:	6e e0       	ldi	r22, 0x0E	; 14
 790:	40 e0       	ldi	r20, 0x00	; 0
 792:	50 e0       	ldi	r21, 0x00	; 0
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 794:	11 e2       	ldi	r17, 0x21	; 33
 796:	e6 2f       	mov	r30, r22
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	10 93 57 00 	sts	0x0057, r17
 79e:	84 91       	lpm	r24, Z+

			if (SerialCharNum & 0x01)
 7a0:	40 ff       	sbrs	r20, 0
 7a2:	03 c0       	rjmp	.+6      	; 0x7aa <USB_Device_ProcessControlRequest+0x1d8>
			{
				SerialByte >>= 4;
 7a4:	82 95       	swap	r24
 7a6:	8f 70       	andi	r24, 0x0F	; 15
				SigReadAddress++;
 7a8:	6f 5f       	subi	r22, 0xFF	; 255
			}

			SerialByte &= 0x0F;
 7aa:	8f 70       	andi	r24, 0x0F	; 15
 7ac:	28 2f       	mov	r18, r24
 7ae:	30 e0       	ldi	r19, 0x00	; 0

			SignatureDescriptor.UnicodeString[SerialCharNum] = (SerialByte >= 10) ?
 7b0:	8a 30       	cpi	r24, 0x0A	; 10
 7b2:	18 f0       	brcs	.+6      	; 0x7ba <USB_Device_ProcessControlRequest+0x1e8>
 7b4:	c9 01       	movw	r24, r18
 7b6:	c7 96       	adiw	r24, 0x37	; 55
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <USB_Device_ProcessControlRequest+0x1ec>
 7ba:	c9 01       	movw	r24, r18
 7bc:	c0 96       	adiw	r24, 0x30	; 48
 7be:	8d 93       	st	X+, r24
 7c0:	9d 93       	st	X+, r25
 7c2:	4f 5f       	subi	r20, 0xFF	; 255
 7c4:	5f 4f       	sbci	r21, 0xFF	; 255

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
 7c6:	44 31       	cpi	r20, 0x14	; 20
 7c8:	51 05       	cpc	r21, r1
 7ca:	29 f7       	brne	.-54     	; 0x796 <USB_Device_ProcessControlRequest+0x1c4>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 7cc:	7f bf       	out	0x3f, r23	; 63
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
 7ce:	8a e2       	ldi	r24, 0x2A	; 42
 7d0:	8b 83       	std	Y+3, r24	; 0x03
	{
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 7d2:	83 e0       	ldi	r24, 0x03	; 3
 7d4:	8c 83       	std	Y+4, r24	; 0x04
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 7d6:	80 91 e8 00 	lds	r24, 0x00E8
 7da:	87 7f       	andi	r24, 0xF7	; 247
 7dc:	80 93 e8 00 	sts	0x00E8, r24
		}
	}

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 7e0:	ce 01       	movw	r24, r28
 7e2:	03 96       	adiw	r24, 0x03	; 3
 7e4:	6a e2       	ldi	r22, 0x2A	; 42
 7e6:	70 e0       	ldi	r23, 0x00	; 0
 7e8:	61 d0       	rcall	.+194    	; 0x8ac <Endpoint_Write_Control_Stream_LE>
 7ea:	12 c0       	rjmp	.+36     	; 0x810 <USB_Device_ProcessControlRequest+0x23e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 7ec:	60 91 31 01 	lds	r22, 0x0131
 7f0:	ae 01       	movw	r20, r28
 7f2:	4f 5f       	subi	r20, 0xFF	; 255
 7f4:	5f 4f       	sbci	r21, 0xFF	; 255
 7f6:	30 dd       	rcall	.-1440   	; 0x258 <CALLBACK_USB_GetDescriptor>
 7f8:	bc 01       	movw	r22, r24
 7fa:	00 97       	sbiw	r24, 0x00	; 0
 7fc:	09 f4       	brne	.+2      	; 0x800 <USB_Device_ProcessControlRequest+0x22e>
 7fe:	3c c0       	rjmp	.+120    	; 0x878 <USB_Device_ProcessControlRequest+0x2a6>
 800:	80 91 e8 00 	lds	r24, 0x00E8
 804:	87 7f       	andi	r24, 0xF7	; 247
 806:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 80a:	89 81       	ldd	r24, Y+1	; 0x01
 80c:	9a 81       	ldd	r25, Y+2	; 0x02
 80e:	ac d0       	rcall	.+344    	; 0x968 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 810:	80 91 e8 00 	lds	r24, 0x00E8
 814:	8b 77       	andi	r24, 0x7B	; 123
 816:	80 93 e8 00 	sts	0x00E8, r24
 81a:	2e c0       	rjmp	.+92     	; 0x878 <USB_Device_ProcessControlRequest+0x2a6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 81c:	80 38       	cpi	r24, 0x80	; 128
 81e:	61 f5       	brne	.+88     	; 0x878 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 820:	80 91 e8 00 	lds	r24, 0x00E8
 824:	87 7f       	andi	r24, 0xF7	; 247
 826:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
 82a:	80 91 2a 01 	lds	r24, 0x012A
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 82e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 832:	80 91 e8 00 	lds	r24, 0x00E8
 836:	8e 77       	andi	r24, 0x7E	; 126
 838:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 83c:	4e dd       	rcall	.-1380   	; 0x2da <Endpoint_ClearStatusStage>
 83e:	1c c0       	rjmp	.+56     	; 0x878 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 840:	88 23       	and	r24, r24
 842:	d1 f4       	brne	.+52     	; 0x878 <USB_Device_ProcessControlRequest+0x2a6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 844:	90 91 2f 01 	lds	r25, 0x012F
 848:	92 30       	cpi	r25, 0x02	; 2
 84a:	b0 f4       	brcc	.+44     	; 0x878 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 84c:	80 91 e8 00 	lds	r24, 0x00E8
 850:	87 7f       	andi	r24, 0xF7	; 247
 852:	80 93 e8 00 	sts	0x00E8, r24
	}
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 856:	90 93 2a 01 	sts	0x012A, r25

	Endpoint_ClearStatusStage();
 85a:	3f dd       	rcall	.-1410   	; 0x2da <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
 85c:	80 91 2a 01 	lds	r24, 0x012A
 860:	88 23       	and	r24, r24
 862:	31 f4       	brne	.+12     	; 0x870 <USB_Device_ProcessControlRequest+0x29e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 864:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 868:	87 fd       	sbrc	r24, 7
 86a:	02 c0       	rjmp	.+4      	; 0x870 <USB_Device_ProcessControlRequest+0x29e>
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	01 c0       	rjmp	.+2      	; 0x872 <USB_Device_ProcessControlRequest+0x2a0>
 870:	84 e0       	ldi	r24, 0x04	; 4
 872:	80 93 2c 01 	sts	0x012C, r24

	EVENT_USB_Device_ConfigurationChanged();
 876:	ac dc       	rcall	.-1704   	; 0x1d0 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 878:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 87c:	83 ff       	sbrs	r24, 3
 87e:	0a c0       	rjmp	.+20     	; 0x894 <USB_Device_ProcessControlRequest+0x2c2>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 880:	80 91 eb 00 	lds	r24, 0x00EB
 884:	80 62       	ori	r24, 0x20	; 32
 886:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 88a:	80 91 e8 00 	lds	r24, 0x00E8
 88e:	87 7f       	andi	r24, 0xF7	; 247
 890:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 894:	ac 96       	adiw	r28, 0x2c	; 44
 896:	0f b6       	in	r0, 0x3f	; 63
 898:	f8 94       	cli
 89a:	de bf       	out	0x3e, r29	; 62
 89c:	0f be       	out	0x3f, r0	; 63
 89e:	cd bf       	out	0x3d, r28	; 61
 8a0:	cf 91       	pop	r28
 8a2:	df 91       	pop	r29
 8a4:	1f 91       	pop	r17
 8a6:	0f 91       	pop	r16
 8a8:	08 95       	ret

000008aa <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 8aa:	08 95       	ret

000008ac <Endpoint_Write_Control_Stream_LE>:
 8ac:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 8ae:	40 91 33 01 	lds	r20, 0x0133
 8b2:	50 91 34 01 	lds	r21, 0x0134
 8b6:	46 17       	cp	r20, r22
 8b8:	57 07       	cpc	r21, r23
 8ba:	18 f4       	brcc	.+6      	; 0x8c2 <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 8bc:	f9 01       	movw	r30, r18
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	3d c0       	rjmp	.+122    	; 0x93c <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 8c2:	61 15       	cp	r22, r1
 8c4:	71 05       	cpc	r23, r1
 8c6:	11 f0       	breq	.+4      	; 0x8cc <Endpoint_Write_Control_Stream_LE+0x20>
 8c8:	ab 01       	movw	r20, r22
 8ca:	f8 cf       	rjmp	.-16     	; 0x8bc <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8cc:	80 91 e8 00 	lds	r24, 0x00E8
 8d0:	8e 77       	andi	r24, 0x7E	; 126
 8d2:	80 93 e8 00 	sts	0x00E8, r24
 8d6:	40 e0       	ldi	r20, 0x00	; 0
 8d8:	50 e0       	ldi	r21, 0x00	; 0
 8da:	f0 cf       	rjmp	.-32     	; 0x8bc <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8dc:	80 91 2c 01 	lds	r24, 0x012C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8e0:	88 23       	and	r24, r24
 8e2:	f1 f1       	breq	.+124    	; 0x960 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8e4:	85 30       	cpi	r24, 0x05	; 5
 8e6:	f1 f1       	breq	.+124    	; 0x964 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 8e8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 8ec:	83 ff       	sbrs	r24, 3
 8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <Endpoint_Write_Control_Stream_LE+0x48>
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 8f4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 8f8:	82 fd       	sbrc	r24, 2
 8fa:	2c c0       	rjmp	.+88     	; 0x954 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 8fc:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 900:	80 ff       	sbrs	r24, 0
 902:	1c c0       	rjmp	.+56     	; 0x93c <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 904:	20 91 f2 00 	lds	r18, 0x00F2
 908:	30 91 f3 00 	lds	r19, 0x00F3
 90c:	07 c0       	rjmp	.+14     	; 0x91c <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 90e:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 910:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
 914:	41 50       	subi	r20, 0x01	; 1
 916:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 918:	2f 5f       	subi	r18, 0xFF	; 255
 91a:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 91c:	41 15       	cp	r20, r1
 91e:	51 05       	cpc	r21, r1
 920:	19 f0       	breq	.+6      	; 0x928 <Endpoint_Write_Control_Stream_LE+0x7c>
 922:	28 30       	cpi	r18, 0x08	; 8
 924:	31 05       	cpc	r19, r1
 926:	98 f3       	brcs	.-26     	; 0x90e <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	28 30       	cpi	r18, 0x08	; 8
 92c:	31 05       	cpc	r19, r1
 92e:	09 f4       	brne	.+2      	; 0x932 <Endpoint_Write_Control_Stream_LE+0x86>
 930:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 932:	80 91 e8 00 	lds	r24, 0x00E8
 936:	8e 77       	andi	r24, 0x7E	; 126
 938:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 93c:	41 15       	cp	r20, r1
 93e:	51 05       	cpc	r21, r1
 940:	69 f6       	brne	.-102    	; 0x8dc <Endpoint_Write_Control_Stream_LE+0x30>
 942:	99 23       	and	r25, r25
 944:	59 f6       	brne	.-106    	; 0x8dc <Endpoint_Write_Control_Stream_LE+0x30>
 946:	06 c0       	rjmp	.+12     	; 0x954 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 948:	80 91 2c 01 	lds	r24, 0x012C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 94c:	88 23       	and	r24, r24
 94e:	41 f0       	breq	.+16     	; 0x960 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 950:	85 30       	cpi	r24, 0x05	; 5
 952:	41 f0       	breq	.+16     	; 0x964 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 954:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 958:	82 ff       	sbrs	r24, 2
 95a:	f6 cf       	rjmp	.-20     	; 0x948 <Endpoint_Write_Control_Stream_LE+0x9c>
 95c:	80 e0       	ldi	r24, 0x00	; 0
 95e:	08 95       	ret
 960:	82 e0       	ldi	r24, 0x02	; 2
 962:	08 95       	ret
 964:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 966:	08 95       	ret

00000968 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
 968:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 96a:	40 91 33 01 	lds	r20, 0x0133
 96e:	50 91 34 01 	lds	r21, 0x0134
 972:	46 17       	cp	r20, r22
 974:	57 07       	cpc	r21, r23
 976:	10 f4       	brcc	.+4      	; 0x97c <Endpoint_Write_Control_PStream_LE+0x14>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 978:	60 e0       	ldi	r22, 0x00	; 0
 97a:	40 c0       	rjmp	.+128    	; 0x9fc <Endpoint_Write_Control_PStream_LE+0x94>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 97c:	61 15       	cp	r22, r1
 97e:	71 05       	cpc	r23, r1
 980:	11 f0       	breq	.+4      	; 0x986 <Endpoint_Write_Control_PStream_LE+0x1e>
 982:	ab 01       	movw	r20, r22
 984:	f9 cf       	rjmp	.-14     	; 0x978 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 986:	80 91 e8 00 	lds	r24, 0x00E8
 98a:	8e 77       	andi	r24, 0x7E	; 126
 98c:	80 93 e8 00 	sts	0x00E8, r24
 990:	40 e0       	ldi	r20, 0x00	; 0
 992:	50 e0       	ldi	r21, 0x00	; 0
 994:	f1 cf       	rjmp	.-30     	; 0x978 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 996:	80 91 2c 01 	lds	r24, 0x012C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 99a:	88 23       	and	r24, r24
 99c:	09 f4       	brne	.+2      	; 0x9a0 <Endpoint_Write_Control_PStream_LE+0x38>
 99e:	40 c0       	rjmp	.+128    	; 0xa20 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 9a0:	85 30       	cpi	r24, 0x05	; 5
 9a2:	09 f4       	brne	.+2      	; 0x9a6 <Endpoint_Write_Control_PStream_LE+0x3e>
 9a4:	3f c0       	rjmp	.+126    	; 0xa24 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9a6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 9aa:	83 ff       	sbrs	r24, 3
 9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <Endpoint_Write_Control_PStream_LE+0x4a>
 9ae:	81 e0       	ldi	r24, 0x01	; 1
 9b0:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 9b2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 9b6:	82 fd       	sbrc	r24, 2
 9b8:	2d c0       	rjmp	.+90     	; 0xa14 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 9ba:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 9be:	80 ff       	sbrs	r24, 0
 9c0:	1d c0       	rjmp	.+58     	; 0x9fc <Endpoint_Write_Control_PStream_LE+0x94>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 9c2:	80 91 f2 00 	lds	r24, 0x00F2
 9c6:	90 91 f3 00 	lds	r25, 0x00F3
 9ca:	09 c0       	rjmp	.+18     	; 0x9de <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 9cc:	f9 01       	movw	r30, r18
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 9ce:	2f 5f       	subi	r18, 0xFF	; 255
 9d0:	3f 4f       	sbci	r19, 0xFF	; 255
 9d2:	e4 91       	lpm	r30, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 9d4:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
 9d8:	41 50       	subi	r20, 0x01	; 1
 9da:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 9dc:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 9de:	41 15       	cp	r20, r1
 9e0:	51 05       	cpc	r21, r1
 9e2:	19 f0       	breq	.+6      	; 0x9ea <Endpoint_Write_Control_PStream_LE+0x82>
 9e4:	88 30       	cpi	r24, 0x08	; 8
 9e6:	91 05       	cpc	r25, r1
 9e8:	88 f3       	brcs	.-30     	; 0x9cc <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 9ea:	60 e0       	ldi	r22, 0x00	; 0
 9ec:	08 97       	sbiw	r24, 0x08	; 8
 9ee:	09 f4       	brne	.+2      	; 0x9f2 <Endpoint_Write_Control_PStream_LE+0x8a>
 9f0:	61 e0       	ldi	r22, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 9f2:	80 91 e8 00 	lds	r24, 0x00E8
 9f6:	8e 77       	andi	r24, 0x7E	; 126
 9f8:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 9fc:	41 15       	cp	r20, r1
 9fe:	51 05       	cpc	r21, r1
 a00:	51 f6       	brne	.-108    	; 0x996 <Endpoint_Write_Control_PStream_LE+0x2e>
 a02:	66 23       	and	r22, r22
 a04:	41 f6       	brne	.-112    	; 0x996 <Endpoint_Write_Control_PStream_LE+0x2e>
 a06:	06 c0       	rjmp	.+12     	; 0xa14 <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 a08:	80 91 2c 01 	lds	r24, 0x012C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 a0c:	88 23       	and	r24, r24
 a0e:	41 f0       	breq	.+16     	; 0xa20 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 a10:	85 30       	cpi	r24, 0x05	; 5
 a12:	41 f0       	breq	.+16     	; 0xa24 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a14:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 a18:	82 ff       	sbrs	r24, 2
 a1a:	f6 cf       	rjmp	.-20     	; 0xa08 <Endpoint_Write_Control_PStream_LE+0xa0>
 a1c:	80 e0       	ldi	r24, 0x00	; 0
 a1e:	08 95       	ret
 a20:	82 e0       	ldi	r24, 0x02	; 2
 a22:	08 95       	ret
 a24:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 a26:	08 95       	ret

00000a28 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
 a28:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
 a2a:	61 15       	cp	r22, r1
 a2c:	71 05       	cpc	r23, r1
 a2e:	29 f4       	brne	.+10     	; 0xa3a <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 a30:	80 91 e8 00 	lds	r24, 0x00E8
 a34:	8b 77       	andi	r24, 0x7B	; 123
 a36:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 a3a:	f9 01       	movw	r30, r18
 a3c:	22 c0       	rjmp	.+68     	; 0xa82 <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 a3e:	80 91 2c 01 	lds	r24, 0x012C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 a42:	88 23       	and	r24, r24
 a44:	71 f1       	breq	.+92     	; 0xaa2 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 a46:	85 30       	cpi	r24, 0x05	; 5
 a48:	71 f1       	breq	.+92     	; 0xaa6 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a4a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 a4e:	83 ff       	sbrs	r24, 3
 a50:	02 c0       	rjmp	.+4      	; 0xa56 <Endpoint_Read_Control_Stream_LE+0x2e>
 a52:	81 e0       	ldi	r24, 0x01	; 1
 a54:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a56:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 a5a:	82 ff       	sbrs	r24, 2
 a5c:	f0 cf       	rjmp	.-32     	; 0xa3e <Endpoint_Read_Control_Stream_LE+0x16>
 a5e:	06 c0       	rjmp	.+12     	; 0xa6c <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 a60:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 a64:	81 93       	st	Z+, r24
				Length--;
 a66:	61 50       	subi	r22, 0x01	; 1
 a68:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 a6a:	31 f0       	breq	.+12     	; 0xa78 <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 a6c:	80 91 f2 00 	lds	r24, 0x00F2
 a70:	90 91 f3 00 	lds	r25, 0x00F3
 a74:	89 2b       	or	r24, r25
 a76:	a1 f7       	brne	.-24     	; 0xa60 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 a78:	80 91 e8 00 	lds	r24, 0x00E8
 a7c:	8b 77       	andi	r24, 0x7B	; 123
 a7e:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
 a82:	61 15       	cp	r22, r1
 a84:	71 05       	cpc	r23, r1
 a86:	d9 f6       	brne	.-74     	; 0xa3e <Endpoint_Read_Control_Stream_LE+0x16>
 a88:	06 c0       	rjmp	.+12     	; 0xa96 <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 a8a:	80 91 2c 01 	lds	r24, 0x012C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 a8e:	88 23       	and	r24, r24
 a90:	41 f0       	breq	.+16     	; 0xaa2 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 a92:	85 30       	cpi	r24, 0x05	; 5
 a94:	41 f0       	breq	.+16     	; 0xaa6 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 a96:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
 a9a:	80 ff       	sbrs	r24, 0
 a9c:	f6 cf       	rjmp	.-20     	; 0xa8a <Endpoint_Read_Control_Stream_LE+0x62>
 a9e:	80 e0       	ldi	r24, 0x00	; 0
 aa0:	08 95       	ret
 aa2:	82 e0       	ldi	r24, 0x02	; 2
 aa4:	08 95       	ret
 aa6:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 aa8:	08 95       	ret

00000aaa <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 aaa:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 aac:	80 91 2c 01 	lds	r24, 0x012C
 ab0:	88 23       	and	r24, r24
 ab2:	61 f0       	breq	.+24     	; 0xacc <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 ab4:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ab8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 abc:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 ac0:	83 ff       	sbrs	r24, 3
 ac2:	01 c0       	rjmp	.+2      	; 0xac6 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 ac4:	86 dd       	rcall	.-1268   	; 0x5d2 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 ac6:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ac8:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 acc:	1f 91       	pop	r17
 ace:	08 95       	ret

00000ad0 <CDC_Device_Event_Stub>:
#include "CDC.h"

void CDC_Device_Event_Stub(void)
{

}
 ad0:	08 95       	ret

00000ad2 <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 ad2:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 ad4:	80 91 2c 01 	lds	r24, 0x012C
 ad8:	84 30       	cpi	r24, 0x04	; 4
 ada:	41 f5       	brne	.+80     	; 0xb2c <CDC_Device_ReceiveByte+0x5a>
 adc:	87 85       	ldd	r24, Z+15	; 0x0f
 ade:	90 89       	ldd	r25, Z+16	; 0x10
 ae0:	a1 89       	ldd	r26, Z+17	; 0x11
 ae2:	b2 89       	ldd	r27, Z+18	; 0x12
 ae4:	00 97       	sbiw	r24, 0x00	; 0
 ae6:	a1 05       	cpc	r26, r1
 ae8:	b1 05       	cpc	r27, r1
 aea:	01 f1       	breq	.+64     	; 0xb2c <CDC_Device_ReceiveByte+0x5a>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
 aec:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 aee:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 af2:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
 af6:	82 ff       	sbrs	r24, 2
 af8:	19 c0       	rjmp	.+50     	; 0xb2c <CDC_Device_ReceiveByte+0x5a>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 afa:	80 91 f2 00 	lds	r24, 0x00F2
 afe:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
 b02:	89 2b       	or	r24, r25
 b04:	19 f4       	brne	.+6      	; 0xb0c <CDC_Device_ReceiveByte+0x3a>
 b06:	2f ef       	ldi	r18, 0xFF	; 255
 b08:	3f ef       	ldi	r19, 0xFF	; 255
 b0a:	04 c0       	rjmp	.+8      	; 0xb14 <CDC_Device_ReceiveByte+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 b0c:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_Byte();
 b10:	28 2f       	mov	r18, r24
 b12:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 b14:	80 91 f2 00 	lds	r24, 0x00F2
 b18:	90 91 f3 00 	lds	r25, 0x00F3

		if (!(Endpoint_BytesInEndpoint()))
 b1c:	89 2b       	or	r24, r25
 b1e:	41 f4       	brne	.+16     	; 0xb30 <CDC_Device_ReceiveByte+0x5e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b20:	80 91 e8 00 	lds	r24, 0x00E8
 b24:	8b 77       	andi	r24, 0x7B	; 123
 b26:	80 93 e8 00 	sts	0x00E8, r24
 b2a:	02 c0       	rjmp	.+4      	; 0xb30 <CDC_Device_ReceiveByte+0x5e>
 b2c:	2f ef       	ldi	r18, 0xFF	; 255
 b2e:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 b30:	c9 01       	movw	r24, r18
 b32:	08 95       	ret

00000b34 <CDC_Device_CreateBlockingStream>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
 b34:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
 b36:	2e e0       	ldi	r18, 0x0E	; 14
 b38:	db 01       	movw	r26, r22
 b3a:	1d 92       	st	X+, r1
 b3c:	2a 95       	dec	r18
 b3e:	e9 f7       	brne	.-6      	; 0xb3a <CDC_Device_CreateBlockingStream+0x6>
 b40:	23 e0       	ldi	r18, 0x03	; 3
 b42:	23 83       	std	Z+3, r18	; 0x03
 b44:	29 e2       	ldi	r18, 0x29	; 41
 b46:	36 e0       	ldi	r19, 0x06	; 6
 b48:	31 87       	std	Z+9, r19	; 0x09
 b4a:	20 87       	std	Z+8, r18	; 0x08
 b4c:	2b ee       	ldi	r18, 0xEB	; 235
 b4e:	35 e0       	ldi	r19, 0x05	; 5
 b50:	33 87       	std	Z+11, r19	; 0x0b
 b52:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
 b54:	95 87       	std	Z+13, r25	; 0x0d
 b56:	84 87       	std	Z+12, r24	; 0x0c
}
 b58:	08 95       	ret

00000b5a <CDC_Device_Flush>:
	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 b5a:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 b5c:	80 91 2c 01 	lds	r24, 0x012C
 b60:	84 30       	cpi	r24, 0x04	; 4
 b62:	21 f5       	brne	.+72     	; 0xbac <CDC_Device_Flush+0x52>
 b64:	87 85       	ldd	r24, Z+15	; 0x0f
 b66:	90 89       	ldd	r25, Z+16	; 0x10
 b68:	a1 89       	ldd	r26, Z+17	; 0x11
 b6a:	b2 89       	ldd	r27, Z+18	; 0x12
 b6c:	00 97       	sbiw	r24, 0x00	; 0
 b6e:	a1 05       	cpc	r26, r1
 b70:	b1 05       	cpc	r27, r1
 b72:	e1 f0       	breq	.+56     	; 0xbac <CDC_Device_Flush+0x52>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 b74:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b76:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 b7a:	80 91 f2 00 	lds	r24, 0x00F2
 b7e:	90 91 f3 00 	lds	r25, 0x00F3

	if (!(Endpoint_BytesInEndpoint()))
 b82:	89 2b       	or	r24, r25
 b84:	a9 f0       	breq	.+42     	; 0xbb0 <CDC_Device_Flush+0x56>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 b86:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b8a:	80 91 e8 00 	lds	r24, 0x00E8
 b8e:	8e 77       	andi	r24, 0x7E	; 126
 b90:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
 b94:	95 fd       	sbrc	r25, 5
 b96:	0c c0       	rjmp	.+24     	; 0xbb0 <CDC_Device_Flush+0x56>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 b98:	c1 db       	rcall	.-2174   	; 0x31c <Endpoint_WaitUntilReady>
 b9a:	98 2f       	mov	r25, r24
 b9c:	88 23       	and	r24, r24
 b9e:	49 f4       	brne	.+18     	; 0xbb2 <CDC_Device_Flush+0x58>
 ba0:	80 91 e8 00 	lds	r24, 0x00E8
 ba4:	8e 77       	andi	r24, 0x7E	; 126
 ba6:	80 93 e8 00 	sts	0x00E8, r24
 baa:	03 c0       	rjmp	.+6      	; 0xbb2 <CDC_Device_Flush+0x58>
 bac:	92 e0       	ldi	r25, 0x02	; 2
 bae:	01 c0       	rjmp	.+2      	; 0xbb2 <CDC_Device_Flush+0x58>
 bb0:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
 bb2:	89 2f       	mov	r24, r25
 bb4:	08 95       	ret

00000bb6 <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 bb6:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 bb8:	80 91 2c 01 	lds	r24, 0x012C
 bbc:	84 30       	cpi	r24, 0x04	; 4
 bbe:	51 f4       	brne	.+20     	; 0xbd4 <CDC_Device_USBTask+0x1e>
 bc0:	87 85       	ldd	r24, Z+15	; 0x0f
 bc2:	90 89       	ldd	r25, Z+16	; 0x10
 bc4:	a1 89       	ldd	r26, Z+17	; 0x11
 bc6:	b2 89       	ldd	r27, Z+18	; 0x12
 bc8:	00 97       	sbiw	r24, 0x00	; 0
 bca:	a1 05       	cpc	r26, r1
 bcc:	b1 05       	cpc	r27, r1
 bce:	11 f0       	breq	.+4      	; 0xbd4 <CDC_Device_USBTask+0x1e>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
 bd0:	cf 01       	movw	r24, r30
 bd2:	c3 cf       	rjmp	.-122    	; 0xb5a <CDC_Device_Flush>
 bd4:	08 95       	ret

00000bd6 <CDC_Device_getchar_Blocking>:

	return ReceivedByte;
}

static int CDC_Device_getchar_Blocking(FILE* Stream)
{
 bd6:	cf 93       	push	r28
 bd8:	df 93       	push	r29
 bda:	ec 01       	movw	r28, r24
 bdc:	0b c0       	rjmp	.+22     	; 0xbf4 <CDC_Device_getchar_Blocking+0x1e>
	int16_t ReceivedByte;

	while ((ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream))) < 0)
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 bde:	80 91 2c 01 	lds	r24, 0x012C
 be2:	88 23       	and	r24, r24
 be4:	19 f4       	brne	.+6      	; 0xbec <CDC_Device_getchar_Blocking+0x16>
 be6:	2e ef       	ldi	r18, 0xFE	; 254
 be8:	3f ef       	ldi	r19, 0xFF	; 255
 bea:	0a c0       	rjmp	.+20     	; 0xc00 <CDC_Device_getchar_Blocking+0x2a>
		  return _FDEV_EOF;

		CDC_Device_USBTask((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
 bec:	8c 85       	ldd	r24, Y+12	; 0x0c
 bee:	9d 85       	ldd	r25, Y+13	; 0x0d
 bf0:	e2 df       	rcall	.-60     	; 0xbb6 <CDC_Device_USBTask>
		USB_USBTask();
 bf2:	5b df       	rcall	.-330    	; 0xaaa <USB_USBTask>

static int CDC_Device_getchar_Blocking(FILE* Stream)
{
	int16_t ReceivedByte;

	while ((ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream))) < 0)
 bf4:	8c 85       	ldd	r24, Y+12	; 0x0c
 bf6:	9d 85       	ldd	r25, Y+13	; 0x0d
 bf8:	6c df       	rcall	.-296    	; 0xad2 <CDC_Device_ReceiveByte>
 bfa:	9c 01       	movw	r18, r24
 bfc:	97 fd       	sbrc	r25, 7
 bfe:	ef cf       	rjmp	.-34     	; 0xbde <CDC_Device_getchar_Blocking+0x8>
		CDC_Device_USBTask((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
		USB_USBTask();
	}

	return ReceivedByte;
}
 c00:	c9 01       	movw	r24, r18
 c02:	df 91       	pop	r29
 c04:	cf 91       	pop	r28
 c06:	08 95       	ret

00000c08 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Data, Length, NO_STREAM_CALLBACK);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
 c08:	1f 93       	push	r17
 c0a:	fc 01       	movw	r30, r24
 c0c:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 c0e:	80 91 2c 01 	lds	r24, 0x012C
 c12:	84 30       	cpi	r24, 0x04	; 4
 c14:	d9 f4       	brne	.+54     	; 0xc4c <CDC_Device_SendByte+0x44>
 c16:	87 85       	ldd	r24, Z+15	; 0x0f
 c18:	90 89       	ldd	r25, Z+16	; 0x10
 c1a:	a1 89       	ldd	r26, Z+17	; 0x11
 c1c:	b2 89       	ldd	r27, Z+18	; 0x12
 c1e:	00 97       	sbiw	r24, 0x00	; 0
 c20:	a1 05       	cpc	r26, r1
 c22:	b1 05       	cpc	r27, r1
 c24:	99 f0       	breq	.+38     	; 0xc4c <CDC_Device_SendByte+0x44>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 c26:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c28:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 c2c:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
 c30:	85 fd       	sbrc	r24, 5
 c32:	08 c0       	rjmp	.+16     	; 0xc44 <CDC_Device_SendByte+0x3c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c34:	80 91 e8 00 	lds	r24, 0x00E8
 c38:	8e 77       	andi	r24, 0x7E	; 126
 c3a:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 c3e:	6e db       	rcall	.-2340   	; 0x31c <Endpoint_WaitUntilReady>
 c40:	88 23       	and	r24, r24
 c42:	29 f4       	brne	.+10     	; 0xc4e <CDC_Device_SendByte+0x46>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 c44:	10 93 f1 00 	sts	0x00F1, r17
 c48:	80 e0       	ldi	r24, 0x00	; 0
 c4a:	01 c0       	rjmp	.+2      	; 0xc4e <CDC_Device_SendByte+0x46>
		  return ErrorCode;
	}

	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
 c4c:	82 e0       	ldi	r24, 0x02	; 2
}
 c4e:	1f 91       	pop	r17
 c50:	08 95       	ret

00000c52 <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
 c52:	28 2f       	mov	r18, r24
 c54:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
 c56:	84 85       	ldd	r24, Z+12	; 0x0c
 c58:	95 85       	ldd	r25, Z+13	; 0x0d
 c5a:	62 2f       	mov	r22, r18
 c5c:	d5 df       	rcall	.-86     	; 0xc08 <CDC_Device_SendByte>
 c5e:	88 23       	and	r24, r24
 c60:	19 f4       	brne	.+6      	; 0xc68 <CDC_Device_putchar+0x16>
 c62:	20 e0       	ldi	r18, 0x00	; 0
 c64:	30 e0       	ldi	r19, 0x00	; 0
 c66:	02 c0       	rjmp	.+4      	; 0xc6c <CDC_Device_putchar+0x1a>
 c68:	2f ef       	ldi	r18, 0xFF	; 255
 c6a:	3f ef       	ldi	r19, 0xFF	; 255
}
 c6c:	c9 01       	movw	r24, r18
 c6e:	08 95       	ret

00000c70 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 c70:	1f 93       	push	r17
 c72:	cf 93       	push	r28
 c74:	df 93       	push	r29
 c76:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 c78:	0d 96       	adiw	r24, 0x0d	; 13
 c7a:	fc 01       	movw	r30, r24
 c7c:	89 e0       	ldi	r24, 0x09	; 9
 c7e:	df 01       	movw	r26, r30
 c80:	1d 92       	st	X+, r1
 c82:	8a 95       	dec	r24
 c84:	e9 f7       	brne	.-6      	; 0xc80 <CDC_Device_ConfigureEndpoints+0x10>
 c86:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
 c88:	89 81       	ldd	r24, Y+1	; 0x01
 c8a:	18 17       	cp	r17, r24
 c8c:	29 f4       	brne	.+10     	; 0xc98 <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
 c8e:	ea 81       	ldd	r30, Y+2	; 0x02
 c90:	fb 81       	ldd	r31, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
 c92:	8c 81       	ldd	r24, Y+4	; 0x04
 c94:	62 e0       	ldi	r22, 0x02	; 2
 c96:	10 c0       	rjmp	.+32     	; 0xcb8 <CDC_Device_ConfigureEndpoints+0x48>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
 c98:	8d 81       	ldd	r24, Y+5	; 0x05
 c9a:	18 17       	cp	r17, r24
 c9c:	31 f4       	brne	.+12     	; 0xcaa <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
 c9e:	ee 81       	ldd	r30, Y+6	; 0x06
 ca0:	ff 81       	ldd	r31, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
 ca2:	88 85       	ldd	r24, Y+8	; 0x08
 ca4:	62 e0       	ldi	r22, 0x02	; 2
 ca6:	30 e0       	ldi	r19, 0x00	; 0
 ca8:	08 c0       	rjmp	.+16     	; 0xcba <CDC_Device_ConfigureEndpoints+0x4a>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
 caa:	89 85       	ldd	r24, Y+9	; 0x09
 cac:	18 17       	cp	r17, r24
 cae:	09 f5       	brne	.+66     	; 0xcf2 <CDC_Device_ConfigureEndpoints+0x82>
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
 cb0:	ea 85       	ldd	r30, Y+10	; 0x0a
 cb2:	fb 85       	ldd	r31, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
 cb4:	8c 85       	ldd	r24, Y+12	; 0x0c
 cb6:	63 e0       	ldi	r22, 0x03	; 3
 cb8:	31 e0       	ldi	r19, 0x01	; 1
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
 cba:	88 23       	and	r24, r24
 cbc:	11 f4       	brne	.+4      	; 0xcc2 <CDC_Device_ConfigureEndpoints+0x52>
 cbe:	40 e0       	ldi	r20, 0x00	; 0
 cc0:	01 c0       	rjmp	.+2      	; 0xcc4 <CDC_Device_ConfigureEndpoints+0x54>
 cc2:	44 e0       	ldi	r20, 0x04	; 4
 cc4:	20 e0       	ldi	r18, 0x00	; 0
 cc6:	88 e0       	ldi	r24, 0x08	; 8
 cc8:	90 e0       	ldi	r25, 0x00	; 0
 cca:	03 c0       	rjmp	.+6      	; 0xcd2 <CDC_Device_ConfigureEndpoints+0x62>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 ccc:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
 cce:	88 0f       	add	r24, r24
 cd0:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 cd2:	8e 17       	cp	r24, r30
 cd4:	9f 07       	cpc	r25, r31
 cd6:	d0 f3       	brcs	.-12     	; 0xccc <CDC_Device_ConfigureEndpoints+0x5c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 cd8:	62 95       	swap	r22
 cda:	66 0f       	add	r22, r22
 cdc:	66 0f       	add	r22, r22
 cde:	60 7c       	andi	r22, 0xC0	; 192
 ce0:	63 2b       	or	r22, r19
 ce2:	42 60       	ori	r20, 0x02	; 2
 ce4:	22 95       	swap	r18
 ce6:	20 7f       	andi	r18, 0xF0	; 240
 ce8:	42 2b       	or	r20, r18
 cea:	81 2f       	mov	r24, r17
 cec:	e3 da       	rcall	.-2618   	; 0x2b4 <Endpoint_ConfigureEndpoint_Prv>
 cee:	88 23       	and	r24, r24
 cf0:	21 f0       	breq	.+8      	; 0xcfa <CDC_Device_ConfigureEndpoints+0x8a>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
 cf2:	1f 5f       	subi	r17, 0xFF	; 255
 cf4:	17 30       	cpi	r17, 0x07	; 7
 cf6:	41 f6       	brne	.-112    	; 0xc88 <CDC_Device_ConfigureEndpoints+0x18>
 cf8:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
 cfa:	df 91       	pop	r29
 cfc:	cf 91       	pop	r28
 cfe:	1f 91       	pop	r17
 d00:	08 95       	ret

00000d02 <CDC_Device_ProcessControlRequest>:
{

}

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 d02:	cf 93       	push	r28
 d04:	df 93       	push	r29
 d06:	ec 01       	movw	r28, r24
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d08:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 d0c:	83 ff       	sbrs	r24, 3
 d0e:	63 c0       	rjmp	.+198    	; 0xdd6 <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 d10:	88 81       	ld	r24, Y
 d12:	90 e0       	ldi	r25, 0x00	; 0
 d14:	20 91 31 01 	lds	r18, 0x0131
 d18:	30 91 32 01 	lds	r19, 0x0132
 d1c:	28 17       	cp	r18, r24
 d1e:	39 07       	cpc	r19, r25
 d20:	09 f0       	breq	.+2      	; 0xd24 <CDC_Device_ProcessControlRequest+0x22>
 d22:	59 c0       	rjmp	.+178    	; 0xdd6 <CDC_Device_ProcessControlRequest+0xd4>
	  return;

	switch (USB_ControlRequest.bRequest)
 d24:	80 91 2e 01 	lds	r24, 0x012E
 d28:	81 32       	cpi	r24, 0x21	; 33
 d2a:	61 f0       	breq	.+24     	; 0xd44 <CDC_Device_ProcessControlRequest+0x42>
 d2c:	82 32       	cpi	r24, 0x22	; 34
 d2e:	20 f4       	brcc	.+8      	; 0xd38 <CDC_Device_ProcessControlRequest+0x36>
 d30:	80 32       	cpi	r24, 0x20	; 32
 d32:	09 f0       	breq	.+2      	; 0xd36 <CDC_Device_ProcessControlRequest+0x34>
 d34:	50 c0       	rjmp	.+160    	; 0xdd6 <CDC_Device_ProcessControlRequest+0xd4>
 d36:	1b c0       	rjmp	.+54     	; 0xd6e <CDC_Device_ProcessControlRequest+0x6c>
 d38:	82 32       	cpi	r24, 0x22	; 34
 d3a:	79 f1       	breq	.+94     	; 0xd9a <CDC_Device_ProcessControlRequest+0x98>
 d3c:	83 32       	cpi	r24, 0x23	; 35
 d3e:	09 f0       	breq	.+2      	; 0xd42 <CDC_Device_ProcessControlRequest+0x40>
 d40:	4a c0       	rjmp	.+148    	; 0xdd6 <CDC_Device_ProcessControlRequest+0xd4>
 d42:	3b c0       	rjmp	.+118    	; 0xdba <CDC_Device_ProcessControlRequest+0xb8>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 d44:	80 91 2d 01 	lds	r24, 0x012D
 d48:	81 3a       	cpi	r24, 0xA1	; 161
 d4a:	09 f0       	breq	.+2      	; 0xd4e <CDC_Device_ProcessControlRequest+0x4c>
 d4c:	44 c0       	rjmp	.+136    	; 0xdd6 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d4e:	80 91 e8 00 	lds	r24, 0x00E8
 d52:	87 7f       	andi	r24, 0xF7	; 247
 d54:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
 d58:	ce 01       	movw	r24, r28
 d5a:	0f 96       	adiw	r24, 0x0f	; 15
 d5c:	67 e0       	ldi	r22, 0x07	; 7
 d5e:	70 e0       	ldi	r23, 0x00	; 0
 d60:	a5 dd       	rcall	.-1206   	; 0x8ac <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d62:	80 91 e8 00 	lds	r24, 0x00E8
 d66:	8b 77       	andi	r24, 0x7B	; 123
 d68:	80 93 e8 00 	sts	0x00E8, r24
 d6c:	34 c0       	rjmp	.+104    	; 0xdd6 <CDC_Device_ProcessControlRequest+0xd4>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d6e:	80 91 2d 01 	lds	r24, 0x012D
 d72:	81 32       	cpi	r24, 0x21	; 33
 d74:	81 f5       	brne	.+96     	; 0xdd6 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d76:	80 91 e8 00 	lds	r24, 0x00E8
 d7a:	87 7f       	andi	r24, 0xF7	; 247
 d7c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
 d80:	ce 01       	movw	r24, r28
 d82:	0f 96       	adiw	r24, 0x0f	; 15
 d84:	67 e0       	ldi	r22, 0x07	; 7
 d86:	70 e0       	ldi	r23, 0x00	; 0
 d88:	4f de       	rcall	.-866    	; 0xa28 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d8a:	80 91 e8 00 	lds	r24, 0x00E8
 d8e:	8e 77       	andi	r24, 0x7E	; 126
 d90:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 d94:	ce 01       	movw	r24, r28
 d96:	9c de       	rcall	.-712    	; 0xad0 <CDC_Device_Event_Stub>
 d98:	1e c0       	rjmp	.+60     	; 0xdd6 <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d9a:	80 91 2d 01 	lds	r24, 0x012D
 d9e:	81 32       	cpi	r24, 0x21	; 33
 da0:	d1 f4       	brne	.+52     	; 0xdd6 <CDC_Device_ProcessControlRequest+0xd4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 da2:	80 91 e8 00 	lds	r24, 0x00E8
 da6:	87 7f       	andi	r24, 0xF7	; 247
 da8:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 dac:	96 da       	rcall	.-2772   	; 0x2da <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 dae:	80 91 2f 01 	lds	r24, 0x012F
 db2:	8d 87       	std	Y+13, r24	; 0x0d

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 db4:	ce 01       	movw	r24, r28
 db6:	8c de       	rcall	.-744    	; 0xad0 <CDC_Device_Event_Stub>
 db8:	0e c0       	rjmp	.+28     	; 0xdd6 <CDC_Device_ProcessControlRequest+0xd4>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 dba:	80 91 2d 01 	lds	r24, 0x012D
 dbe:	81 32       	cpi	r24, 0x21	; 33
 dc0:	51 f4       	brne	.+20     	; 0xdd6 <CDC_Device_ProcessControlRequest+0xd4>
 dc2:	80 91 e8 00 	lds	r24, 0x00E8
 dc6:	87 7f       	andi	r24, 0xF7	; 247
 dc8:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 dcc:	86 da       	rcall	.-2804   	; 0x2da <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 dce:	ce 01       	movw	r24, r28
 dd0:	60 91 2f 01 	lds	r22, 0x012F
 dd4:	7d de       	rcall	.-774    	; 0xad0 <CDC_Device_Event_Stub>
			}

			break;
	}
}
 dd6:	df 91       	pop	r29
 dd8:	cf 91       	pop	r28
 dda:	08 95       	ret

00000ddc <fgetc>:
 ddc:	cf 93       	push	r28
 dde:	df 93       	push	r29
 de0:	ec 01       	movw	r28, r24
 de2:	4b 81       	ldd	r20, Y+3	; 0x03
 de4:	40 ff       	sbrs	r20, 0
 de6:	1a c0       	rjmp	.+52     	; 0xe1c <fgetc+0x40>
 de8:	46 ff       	sbrs	r20, 6
 dea:	0a c0       	rjmp	.+20     	; 0xe00 <fgetc+0x24>
 dec:	4f 7b       	andi	r20, 0xBF	; 191
 dee:	4b 83       	std	Y+3, r20	; 0x03
 df0:	8e 81       	ldd	r24, Y+6	; 0x06
 df2:	9f 81       	ldd	r25, Y+7	; 0x07
 df4:	01 96       	adiw	r24, 0x01	; 1
 df6:	9f 83       	std	Y+7, r25	; 0x07
 df8:	8e 83       	std	Y+6, r24	; 0x06
 dfa:	8a 81       	ldd	r24, Y+2	; 0x02
 dfc:	28 2f       	mov	r18, r24
 dfe:	2b c0       	rjmp	.+86     	; 0xe56 <fgetc+0x7a>
 e00:	42 ff       	sbrs	r20, 2
 e02:	13 c0       	rjmp	.+38     	; 0xe2a <fgetc+0x4e>
 e04:	e8 81       	ld	r30, Y
 e06:	f9 81       	ldd	r31, Y+1	; 0x01
 e08:	80 81       	ld	r24, Z
 e0a:	28 2f       	mov	r18, r24
 e0c:	33 27       	eor	r19, r19
 e0e:	27 fd       	sbrc	r18, 7
 e10:	30 95       	com	r19
 e12:	21 15       	cp	r18, r1
 e14:	31 05       	cpc	r19, r1
 e16:	29 f4       	brne	.+10     	; 0xe22 <fgetc+0x46>
 e18:	40 62       	ori	r20, 0x20	; 32
 e1a:	4b 83       	std	Y+3, r20	; 0x03
 e1c:	2f ef       	ldi	r18, 0xFF	; 255
 e1e:	3f ef       	ldi	r19, 0xFF	; 255
 e20:	1b c0       	rjmp	.+54     	; 0xe58 <fgetc+0x7c>
 e22:	31 96       	adiw	r30, 0x01	; 1
 e24:	f9 83       	std	Y+1, r31	; 0x01
 e26:	e8 83       	st	Y, r30
 e28:	11 c0       	rjmp	.+34     	; 0xe4c <fgetc+0x70>
 e2a:	ea 85       	ldd	r30, Y+10	; 0x0a
 e2c:	fb 85       	ldd	r31, Y+11	; 0x0b
 e2e:	ce 01       	movw	r24, r28
 e30:	09 95       	icall
 e32:	9c 01       	movw	r18, r24
 e34:	97 ff       	sbrs	r25, 7
 e36:	0a c0       	rjmp	.+20     	; 0xe4c <fgetc+0x70>
 e38:	9b 81       	ldd	r25, Y+3	; 0x03
 e3a:	2f 5f       	subi	r18, 0xFF	; 255
 e3c:	3f 4f       	sbci	r19, 0xFF	; 255
 e3e:	11 f0       	breq	.+4      	; 0xe44 <fgetc+0x68>
 e40:	80 e2       	ldi	r24, 0x20	; 32
 e42:	01 c0       	rjmp	.+2      	; 0xe46 <fgetc+0x6a>
 e44:	80 e1       	ldi	r24, 0x10	; 16
 e46:	89 2b       	or	r24, r25
 e48:	8b 83       	std	Y+3, r24	; 0x03
 e4a:	e8 cf       	rjmp	.-48     	; 0xe1c <fgetc+0x40>
 e4c:	8e 81       	ldd	r24, Y+6	; 0x06
 e4e:	9f 81       	ldd	r25, Y+7	; 0x07
 e50:	01 96       	adiw	r24, 0x01	; 1
 e52:	9f 83       	std	Y+7, r25	; 0x07
 e54:	8e 83       	std	Y+6, r24	; 0x06
 e56:	30 e0       	ldi	r19, 0x00	; 0
 e58:	c9 01       	movw	r24, r18
 e5a:	df 91       	pop	r29
 e5c:	cf 91       	pop	r28
 e5e:	08 95       	ret

00000e60 <_exit>:
 e60:	f8 94       	cli

00000e62 <__stop_program>:
 e62:	ff cf       	rjmp	.-2      	; 0xe62 <__stop_program>
