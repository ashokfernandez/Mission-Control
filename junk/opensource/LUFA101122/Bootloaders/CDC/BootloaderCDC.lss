
BootloaderCDC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  0001edd2  00000e66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dd2  0001e000  0001e000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080018c  0080018c  00000ef2  2**0
                  ALLOC
  3 .stab         000009d8  00000000  00000000  00000ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000019a  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000280  00000000  00000000  00001a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000006d0  00000000  00000000  00001ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000039c0  00000000  00000000  000023b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f29  00000000  00000000  00005d76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003428  00000000  00000000  00006c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003a0  00000000  00000000  0000a0c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001985  00000000  00000000  0000a468  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001f6b  00000000  00000000  0000bded  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002a8  00000000  00000000  0000dd58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001e000 <__vectors>:

	return Endpoint_IsConfigured();
}

void Endpoint_ClearEndpoints(void)
{
   1e000:	4b c0       	rjmp	.+150    	; 0x1e098 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   1e002:	00 00       	nop
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
   1e004:	66 c0       	rjmp	.+204    	; 0x1e0d2 <__bad_interrupt>
   1e006:	00 00       	nop
   1e008:	64 c0       	rjmp	.+200    	; 0x1e0d2 <__bad_interrupt>
   1e00a:	00 00       	nop
   1e00c:	62 c0       	rjmp	.+196    	; 0x1e0d2 <__bad_interrupt>
   1e00e:	00 00       	nop
   1e010:	60 c0       	rjmp	.+192    	; 0x1e0d2 <__bad_interrupt>
   1e012:	00 00       	nop
   1e014:	5e c0       	rjmp	.+188    	; 0x1e0d2 <__bad_interrupt>
   1e016:	00 00       	nop
   1e018:	5c c0       	rjmp	.+184    	; 0x1e0d2 <__bad_interrupt>
   1e01a:	00 00       	nop
   1e01c:	5a c0       	rjmp	.+180    	; 0x1e0d2 <__bad_interrupt>
   1e01e:	00 00       	nop
   1e020:	58 c0       	rjmp	.+176    	; 0x1e0d2 <__bad_interrupt>
   1e022:	00 00       	nop
   1e024:	56 c0       	rjmp	.+172    	; 0x1e0d2 <__bad_interrupt>
   1e026:	00 00       	nop
   1e028:	4b c4       	rjmp	.+2198   	; 0x1e8c0 <__vector_10>
   1e02a:	00 00       	nop
   1e02c:	52 c0       	rjmp	.+164    	; 0x1e0d2 <__bad_interrupt>
   1e02e:	00 00       	nop
   1e030:	50 c0       	rjmp	.+160    	; 0x1e0d2 <__bad_interrupt>
   1e032:	00 00       	nop
   1e034:	4e c0       	rjmp	.+156    	; 0x1e0d2 <__bad_interrupt>
   1e036:	00 00       	nop
   1e038:	4c c0       	rjmp	.+152    	; 0x1e0d2 <__bad_interrupt>
   1e03a:	00 00       	nop
   1e03c:	4a c0       	rjmp	.+148    	; 0x1e0d2 <__bad_interrupt>
   1e03e:	00 00       	nop
   1e040:	48 c0       	rjmp	.+144    	; 0x1e0d2 <__bad_interrupt>
   1e042:	00 00       	nop
   1e044:	46 c0       	rjmp	.+140    	; 0x1e0d2 <__bad_interrupt>
   1e046:	00 00       	nop
   1e048:	44 c0       	rjmp	.+136    	; 0x1e0d2 <__bad_interrupt>
   1e04a:	00 00       	nop
   1e04c:	42 c0       	rjmp	.+132    	; 0x1e0d2 <__bad_interrupt>
   1e04e:	00 00       	nop
   1e050:	40 c0       	rjmp	.+128    	; 0x1e0d2 <__bad_interrupt>
   1e052:	00 00       	nop
   1e054:	3e c0       	rjmp	.+124    	; 0x1e0d2 <__bad_interrupt>
   1e056:	00 00       	nop
   1e058:	3c c0       	rjmp	.+120    	; 0x1e0d2 <__bad_interrupt>
   1e05a:	00 00       	nop
   1e05c:	3a c0       	rjmp	.+116    	; 0x1e0d2 <__bad_interrupt>
   1e05e:	00 00       	nop
   1e060:	38 c0       	rjmp	.+112    	; 0x1e0d2 <__bad_interrupt>
   1e062:	00 00       	nop
   1e064:	36 c0       	rjmp	.+108    	; 0x1e0d2 <__bad_interrupt>
   1e066:	00 00       	nop
   1e068:	34 c0       	rjmp	.+104    	; 0x1e0d2 <__bad_interrupt>
   1e06a:	00 00       	nop
   1e06c:	32 c0       	rjmp	.+100    	; 0x1e0d2 <__bad_interrupt>
   1e06e:	00 00       	nop
   1e070:	30 c0       	rjmp	.+96     	; 0x1e0d2 <__bad_interrupt>
   1e072:	00 00       	nop
   1e074:	2e c0       	rjmp	.+92     	; 0x1e0d2 <__bad_interrupt>
   1e076:	00 00       	nop
   1e078:	2c c0       	rjmp	.+88     	; 0x1e0d2 <__bad_interrupt>
   1e07a:	00 00       	nop
   1e07c:	2a c0       	rjmp	.+84     	; 0x1e0d2 <__bad_interrupt>
   1e07e:	00 00       	nop
   1e080:	28 c0       	rjmp	.+80     	; 0x1e0d2 <__bad_interrupt>
   1e082:	00 00       	nop
   1e084:	26 c0       	rjmp	.+76     	; 0x1e0d2 <__bad_interrupt>
   1e086:	00 00       	nop
   1e088:	24 c0       	rjmp	.+72     	; 0x1e0d2 <__bad_interrupt>
   1e08a:	00 00       	nop
   1e08c:	22 c0       	rjmp	.+68     	; 0x1e0d2 <__bad_interrupt>
   1e08e:	00 00       	nop
   1e090:	20 c0       	rjmp	.+64     	; 0x1e0d2 <__bad_interrupt>
   1e092:	00 00       	nop
   1e094:	1e c0       	rjmp	.+60     	; 0x1e0d2 <__bad_interrupt>
   1e096:	00 00       	nop

0001e098 <__ctors_end>:
   1e098:	11 24       	eor	r1, r1
   1e09a:	1f be       	out	0x3f, r1	; 63
   1e09c:	cf ef       	ldi	r28, 0xFF	; 255
   1e09e:	d0 e2       	ldi	r29, 0x20	; 32
   1e0a0:	de bf       	out	0x3e, r29	; 62
   1e0a2:	cd bf       	out	0x3d, r28	; 61

0001e0a4 <__do_copy_data>:
   1e0a4:	11 e0       	ldi	r17, 0x01	; 1
   1e0a6:	a0 e0       	ldi	r26, 0x00	; 0
   1e0a8:	b1 e0       	ldi	r27, 0x01	; 1
   1e0aa:	e2 ed       	ldi	r30, 0xD2	; 210
   1e0ac:	fd ee       	ldi	r31, 0xED	; 237
   1e0ae:	01 e0       	ldi	r16, 0x01	; 1
   1e0b0:	0b bf       	out	0x3b, r16	; 59
   1e0b2:	02 c0       	rjmp	.+4      	; 0x1e0b8 <__do_copy_data+0x14>
   1e0b4:	07 90       	elpm	r0, Z+
   1e0b6:	0d 92       	st	X+, r0
   1e0b8:	ac 38       	cpi	r26, 0x8C	; 140
   1e0ba:	b1 07       	cpc	r27, r17
   1e0bc:	d9 f7       	brne	.-10     	; 0x1e0b4 <__do_copy_data+0x10>

0001e0be <__do_clear_bss>:
   1e0be:	11 e0       	ldi	r17, 0x01	; 1
   1e0c0:	ac e8       	ldi	r26, 0x8C	; 140
   1e0c2:	b1 e0       	ldi	r27, 0x01	; 1
   1e0c4:	01 c0       	rjmp	.+2      	; 0x1e0c8 <.do_clear_bss_start>

0001e0c6 <.do_clear_bss_loop>:
   1e0c6:	1d 92       	st	X+, r1

0001e0c8 <.do_clear_bss_start>:
   1e0c8:	aa 39       	cpi	r26, 0x9A	; 154
   1e0ca:	b1 07       	cpc	r27, r17
   1e0cc:	e1 f7       	brne	.-8      	; 0x1e0c6 <.do_clear_bss_loop>
   1e0ce:	25 d3       	rcall	.+1610   	; 0x1e71a <main>
   1e0d0:	7e c6       	rjmp	.+3324   	; 0x1edce <_exit>

0001e0d2 <__bad_interrupt>:
   1e0d2:	96 cf       	rjmp	.-212    	; 0x1e000 <__vectors>

0001e0d4 <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1e0d4:	84 e0       	ldi	r24, 0x04	; 4
   1e0d6:	80 93 e9 00 	sts	0x00E9, r24
   1e0da:	0d c0       	rjmp	.+26     	; 0x1e0f6 <FetchNextCommandByte+0x22>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e0dc:	80 91 e8 00 	lds	r24, 0x00E8
   1e0e0:	8b 77       	andi	r24, 0x7B	; 123
   1e0e2:	80 93 e8 00 	sts	0x00E8, r24
   1e0e6:	03 c0       	rjmp	.+6      	; 0x1e0ee <FetchNextCommandByte+0x1a>
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e0e8:	8e b3       	in	r24, 0x1e	; 30
   1e0ea:	88 23       	and	r24, r24
   1e0ec:	51 f0       	breq	.+20     	; 0x1e102 <FetchNextCommandByte+0x2e>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e0ee:	80 91 e8 00 	lds	r24, 0x00E8
	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
   1e0f2:	82 ff       	sbrs	r24, 2
   1e0f4:	f9 cf       	rjmp	.-14     	; 0x1e0e8 <FetchNextCommandByte+0x14>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1e0f6:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
   1e0fa:	85 ff       	sbrs	r24, 5
   1e0fc:	ef cf       	rjmp	.-34     	; 0x1e0dc <FetchNextCommandByte+0x8>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
   1e0fe:	80 91 f1 00 	lds	r24, 0x00F1
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_Byte();
}
   1e102:	08 95       	ret

0001e104 <WriteNextResponseByte>:
 *  bank when full ready for the next byte in the packet to the host.
 *
 *  \param[in] Response  Next response byte to send to the host
 */
static void WriteNextResponseByte(const uint8_t Response)
{
   1e104:	98 2f       	mov	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1e106:	83 e0       	ldi	r24, 0x03	; 3
   1e108:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1e10c:	80 91 e8 00 	lds	r24, 0x00E8
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPNUM);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
   1e110:	85 fd       	sbrc	r24, 5
   1e112:	0d c0       	rjmp	.+26     	; 0x1e12e <WriteNextResponseByte+0x2a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e114:	80 91 e8 00 	lds	r24, 0x00E8
   1e118:	8e 77       	andi	r24, 0x7E	; 126
   1e11a:	80 93 e8 00 	sts	0x00E8, r24
   1e11e:	03 c0       	rjmp	.+6      	; 0x1e126 <WriteNextResponseByte+0x22>
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e120:	8e b3       	in	r24, 0x1e	; 30
   1e122:	88 23       	and	r24, r24
   1e124:	31 f0       	breq	.+12     	; 0x1e132 <WriteNextResponseByte+0x2e>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e126:	80 91 e8 00 	lds	r24, 0x00E8
	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
   1e12a:	80 ff       	sbrs	r24, 0
   1e12c:	f9 cf       	rjmp	.-14     	; 0x1e120 <WriteNextResponseByte+0x1c>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
   1e12e:	90 93 f1 00 	sts	0x00F1, r25
   1e132:	08 95       	ret

0001e134 <CDC_Task>:

/** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the required actions
 *  and send the appropriate response back to the host.
 */
void CDC_Task(void)
{
   1e134:	4f 92       	push	r4
   1e136:	5f 92       	push	r5
   1e138:	6f 92       	push	r6
   1e13a:	7f 92       	push	r7
   1e13c:	8f 92       	push	r8
   1e13e:	9f 92       	push	r9
   1e140:	af 92       	push	r10
   1e142:	bf 92       	push	r11
   1e144:	cf 92       	push	r12
   1e146:	df 92       	push	r13
   1e148:	ef 92       	push	r14
   1e14a:	ff 92       	push	r15
   1e14c:	0f 93       	push	r16
   1e14e:	1f 93       	push	r17
   1e150:	cf 93       	push	r28
   1e152:	df 93       	push	r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1e154:	84 e0       	ldi	r24, 0x04	; 4
   1e156:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e15a:	80 91 e8 00 	lds	r24, 0x00E8
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Check if endpoint has a command in it sent from the host */
	if (!(Endpoint_IsOUTReceived()))
   1e15e:	82 ff       	sbrs	r24, 2
   1e160:	77 c2       	rjmp	.+1262   	; 0x1e650 <CDC_Task+0x51c>
	  return;

	/* Read in the bootloader command (first byte sent from host) */
	uint8_t Command = FetchNextCommandByte();
   1e162:	b8 df       	rcall	.-144    	; 0x1e0d4 <FetchNextCommandByte>
   1e164:	18 2f       	mov	r17, r24

	if (Command == 'E')
   1e166:	85 34       	cpi	r24, 0x45	; 69
   1e168:	19 f4       	brne	.+6      	; 0x1e170 <CDC_Task+0x3c>
	{
		RunBootloader = false;
   1e16a:	10 92 0f 01 	sts	0x010F, r1
   1e16e:	03 c0       	rjmp	.+6      	; 0x1e176 <CDC_Task+0x42>
	
		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'T')
   1e170:	84 35       	cpi	r24, 0x54	; 84
   1e172:	19 f4       	brne	.+6      	; 0x1e17a <CDC_Task+0x46>
	{
		FetchNextCommandByte();
   1e174:	af df       	rcall	.-162    	; 0x1e0d4 <FetchNextCommandByte>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
   1e176:	8d e0       	ldi	r24, 0x0D	; 13
   1e178:	41 c2       	rjmp	.+1154   	; 0x1e5fc <CDC_Task+0x4c8>
	}
	else if ((Command == 'L') || (Command == 'P'))
   1e17a:	8c 34       	cpi	r24, 0x4C	; 76
   1e17c:	e1 f3       	breq	.-8      	; 0x1e176 <CDC_Task+0x42>
   1e17e:	80 35       	cpi	r24, 0x50	; 80
   1e180:	d1 f3       	breq	.-12     	; 0x1e176 <CDC_Task+0x42>
	{
		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 't')
   1e182:	84 37       	cpi	r24, 0x74	; 116
   1e184:	11 f4       	brne	.+4      	; 0x1e18a <CDC_Task+0x56>
	{
		/* Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader */
		WriteNextResponseByte(0x44);
   1e186:	84 e4       	ldi	r24, 0x44	; 68
   1e188:	9c c0       	rjmp	.+312    	; 0x1e2c2 <CDC_Task+0x18e>
		WriteNextResponseByte(0x00);
	}
	else if (Command == 'a')
   1e18a:	81 36       	cpi	r24, 0x61	; 97
   1e18c:	11 f4       	brne	.+4      	; 0x1e192 <CDC_Task+0x5e>
	{
		/* Indicate auto-address increment is supported */
		WriteNextResponseByte('Y');
   1e18e:	89 e5       	ldi	r24, 0x59	; 89
   1e190:	35 c2       	rjmp	.+1130   	; 0x1e5fc <CDC_Task+0x4c8>
	}
	else if (Command == 'A')
   1e192:	81 34       	cpi	r24, 0x41	; 65
   1e194:	e9 f4       	brne	.+58     	; 0x1e1d0 <CDC_Task+0x9c>
	{
		/* Set the current address to that given by the host */
		CurrAddress   = (FetchNextCommandByte() << 9);
   1e196:	9e df       	rcall	.-196    	; 0x1e0d4 <FetchNextCommandByte>
   1e198:	f8 2e       	mov	r15, r24
   1e19a:	ff 0c       	add	r15, r15
   1e19c:	ee 24       	eor	r14, r14
   1e19e:	00 27       	eor	r16, r16
   1e1a0:	f7 fc       	sbrc	r15, 7
   1e1a2:	00 95       	com	r16
   1e1a4:	10 2f       	mov	r17, r16
   1e1a6:	e0 92 8c 01 	sts	0x018C, r14
   1e1aa:	f0 92 8d 01 	sts	0x018D, r15
   1e1ae:	00 93 8e 01 	sts	0x018E, r16
   1e1b2:	10 93 8f 01 	sts	0x018F, r17
		CurrAddress  |= (FetchNextCommandByte() << 1);
   1e1b6:	8e df       	rcall	.-228    	; 0x1e0d4 <FetchNextCommandByte>
   1e1b8:	90 e0       	ldi	r25, 0x00	; 0
   1e1ba:	88 0f       	add	r24, r24
   1e1bc:	99 1f       	adc	r25, r25
   1e1be:	aa 27       	eor	r26, r26
   1e1c0:	97 fd       	sbrc	r25, 7
   1e1c2:	a0 95       	com	r26
   1e1c4:	ba 2f       	mov	r27, r26
   1e1c6:	8e 29       	or	r24, r14
   1e1c8:	9f 29       	or	r25, r15
   1e1ca:	a0 2b       	or	r26, r16
   1e1cc:	b1 2b       	or	r27, r17
   1e1ce:	e6 c1       	rjmp	.+972    	; 0x1e59c <CDC_Task+0x468>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'p')
   1e1d0:	80 37       	cpi	r24, 0x70	; 112
   1e1d2:	11 f4       	brne	.+4      	; 0x1e1d8 <CDC_Task+0xa4>
	{
		/* Indicate serial programmer back to the host */
		WriteNextResponseByte('S');
   1e1d4:	83 e5       	ldi	r24, 0x53	; 83
   1e1d6:	12 c2       	rjmp	.+1060   	; 0x1e5fc <CDC_Task+0x4c8>
	}
	else if (Command == 'S')
   1e1d8:	83 35       	cpi	r24, 0x53	; 83
   1e1da:	49 f4       	brne	.+18     	; 0x1e1ee <CDC_Task+0xba>
   1e1dc:	c0 e0       	ldi	r28, 0x00	; 0
   1e1de:	d1 e0       	ldi	r29, 0x01	; 1
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
   1e1e0:	89 91       	ld	r24, Y+
   1e1e2:	90 df       	rcall	.-224    	; 0x1e104 <WriteNextResponseByte>
		WriteNextResponseByte('S');
	}
	else if (Command == 'S')
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
   1e1e4:	41 e0       	ldi	r20, 0x01	; 1
   1e1e6:	c7 30       	cpi	r28, 0x07	; 7
   1e1e8:	d4 07       	cpc	r29, r20
   1e1ea:	d1 f7       	brne	.-12     	; 0x1e1e0 <CDC_Task+0xac>
   1e1ec:	08 c2       	rjmp	.+1040   	; 0x1e5fe <CDC_Task+0x4ca>
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
	}
	else if (Command == 'V')
   1e1ee:	86 35       	cpi	r24, 0x56	; 86
   1e1f0:	21 f4       	brne	.+8      	; 0x1e1fa <CDC_Task+0xc6>
	{
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
   1e1f2:	81 e3       	ldi	r24, 0x31	; 49
   1e1f4:	87 df       	rcall	.-242    	; 0x1e104 <WriteNextResponseByte>
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
   1e1f6:	80 e3       	ldi	r24, 0x30	; 48
   1e1f8:	01 c2       	rjmp	.+1026   	; 0x1e5fc <CDC_Task+0x4c8>
	}
	else if (Command == 's')
   1e1fa:	83 37       	cpi	r24, 0x73	; 115
   1e1fc:	31 f4       	brne	.+12     	; 0x1e20a <CDC_Task+0xd6>
	{
		WriteNextResponseByte(AVR_SIGNATURE_3);
   1e1fe:	82 e8       	ldi	r24, 0x82	; 130
   1e200:	81 df       	rcall	.-254    	; 0x1e104 <WriteNextResponseByte>
		WriteNextResponseByte(AVR_SIGNATURE_2);
   1e202:	87 e9       	ldi	r24, 0x97	; 151
   1e204:	7f df       	rcall	.-258    	; 0x1e104 <WriteNextResponseByte>
		WriteNextResponseByte(AVR_SIGNATURE_1);
   1e206:	8e e1       	ldi	r24, 0x1E	; 30
   1e208:	f9 c1       	rjmp	.+1010   	; 0x1e5fc <CDC_Task+0x4c8>
	}
	else if (Command == 'e')
   1e20a:	85 36       	cpi	r24, 0x65	; 101
   1e20c:	29 f5       	brne	.+74     	; 0x1e258 <CDC_Task+0x124>
   1e20e:	80 e0       	ldi	r24, 0x00	; 0
   1e210:	90 e0       	ldi	r25, 0x00	; 0
   1e212:	a0 e0       	ldi	r26, 0x00	; 0
   1e214:	b0 e0       	ldi	r27, 0x00	; 0
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
   1e216:	33 e0       	ldi	r19, 0x03	; 3
			boot_spm_busy_wait();
			boot_page_write(CurrFlashAddress);
   1e218:	25 e0       	ldi	r18, 0x05	; 5
	else if (Command == 'e')
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
   1e21a:	fc 01       	movw	r30, r24
   1e21c:	a0 93 5b 00 	sts	0x005B, r26
   1e220:	30 93 57 00 	sts	0x0057, r19
   1e224:	e8 95       	spm
			boot_spm_busy_wait();
   1e226:	07 b6       	in	r0, 0x37	; 55
   1e228:	00 fc       	sbrc	r0, 0
   1e22a:	fd cf       	rjmp	.-6      	; 0x1e226 <CDC_Task+0xf2>
			boot_page_write(CurrFlashAddress);
   1e22c:	fc 01       	movw	r30, r24
   1e22e:	a0 93 5b 00 	sts	0x005B, r26
   1e232:	20 93 57 00 	sts	0x0057, r18
   1e236:	e8 95       	spm
			boot_spm_busy_wait();
   1e238:	07 b6       	in	r0, 0x37	; 55
   1e23a:	00 fc       	sbrc	r0, 0
   1e23c:	fd cf       	rjmp	.-6      	; 0x1e238 <CDC_Task+0x104>
		WriteNextResponseByte(AVR_SIGNATURE_1);
	}
	else if (Command == 'e')
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
   1e23e:	80 50       	subi	r24, 0x00	; 0
   1e240:	9f 4f       	sbci	r25, 0xFF	; 255
   1e242:	af 4f       	sbci	r26, 0xFF	; 255
   1e244:	bf 4f       	sbci	r27, 0xFF	; 255
   1e246:	80 30       	cpi	r24, 0x00	; 0
   1e248:	40 ee       	ldi	r20, 0xE0	; 224
   1e24a:	94 07       	cpc	r25, r20
   1e24c:	41 e0       	ldi	r20, 0x01	; 1
   1e24e:	a4 07       	cpc	r26, r20
   1e250:	40 e0       	ldi	r20, 0x00	; 0
   1e252:	b4 07       	cpc	r27, r20
   1e254:	11 f7       	brne	.-60     	; 0x1e21a <CDC_Task+0xe6>
   1e256:	8f cf       	rjmp	.-226    	; 0x1e176 <CDC_Task+0x42>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#if !defined(NO_LOCK_BYTE_WRITE_SUPPORT)
	else if (Command == 'l')
   1e258:	8c 36       	cpi	r24, 0x6C	; 108
   1e25a:	51 f4       	brne	.+20     	; 0x1e270 <CDC_Task+0x13c>
	{
		/* Set the lock bits to those given by the host */
		boot_lock_bits_set(FetchNextCommandByte());
   1e25c:	3b df       	rcall	.-394    	; 0x1e0d4 <FetchNextCommandByte>
   1e25e:	80 95       	com	r24
   1e260:	99 e0       	ldi	r25, 0x09	; 9
   1e262:	e1 e0       	ldi	r30, 0x01	; 1
   1e264:	f0 e0       	ldi	r31, 0x00	; 0
   1e266:	08 2e       	mov	r0, r24
   1e268:	90 93 57 00 	sts	0x0057, r25
   1e26c:	e8 95       	spm
   1e26e:	83 cf       	rjmp	.-250    	; 0x1e176 <CDC_Task+0x42>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#endif
	else if (Command == 'r')
   1e270:	82 37       	cpi	r24, 0x72	; 114
   1e272:	39 f4       	brne	.+14     	; 0x1e282 <CDC_Task+0x14e>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
   1e274:	e1 e0       	ldi	r30, 0x01	; 1
   1e276:	f0 e0       	ldi	r31, 0x00	; 0
   1e278:	89 e0       	ldi	r24, 0x09	; 9
   1e27a:	80 93 57 00 	sts	0x0057, r24
   1e27e:	84 91       	lpm	r24, Z+
   1e280:	bd c1       	rjmp	.+890    	; 0x1e5fc <CDC_Task+0x4c8>
	}
	else if (Command == 'F')
   1e282:	86 34       	cpi	r24, 0x46	; 70
   1e284:	39 f4       	brne	.+14     	; 0x1e294 <CDC_Task+0x160>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
   1e286:	e0 e0       	ldi	r30, 0x00	; 0
   1e288:	f0 e0       	ldi	r31, 0x00	; 0
   1e28a:	89 e0       	ldi	r24, 0x09	; 9
   1e28c:	80 93 57 00 	sts	0x0057, r24
   1e290:	84 91       	lpm	r24, Z+
   1e292:	b4 c1       	rjmp	.+872    	; 0x1e5fc <CDC_Task+0x4c8>
	}
	else if (Command == 'N')
   1e294:	8e 34       	cpi	r24, 0x4E	; 78
   1e296:	39 f4       	brne	.+14     	; 0x1e2a6 <CDC_Task+0x172>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
   1e298:	e3 e0       	ldi	r30, 0x03	; 3
   1e29a:	f0 e0       	ldi	r31, 0x00	; 0
   1e29c:	89 e0       	ldi	r24, 0x09	; 9
   1e29e:	80 93 57 00 	sts	0x0057, r24
   1e2a2:	84 91       	lpm	r24, Z+
   1e2a4:	ab c1       	rjmp	.+854    	; 0x1e5fc <CDC_Task+0x4c8>
	}
	else if (Command == 'Q')
   1e2a6:	81 35       	cpi	r24, 0x51	; 81
   1e2a8:	39 f4       	brne	.+14     	; 0x1e2b8 <CDC_Task+0x184>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
   1e2aa:	e2 e0       	ldi	r30, 0x02	; 2
   1e2ac:	f0 e0       	ldi	r31, 0x00	; 0
   1e2ae:	89 e0       	ldi	r24, 0x09	; 9
   1e2b0:	80 93 57 00 	sts	0x0057, r24
   1e2b4:	84 91       	lpm	r24, Z+
   1e2b6:	a2 c1       	rjmp	.+836    	; 0x1e5fc <CDC_Task+0x4c8>
	}
	#if !defined(NO_BLOCK_SUPPORT)
	else if (Command == 'b')
   1e2b8:	82 36       	cpi	r24, 0x62	; 98
   1e2ba:	31 f4       	brne	.+12     	; 0x1e2c8 <CDC_Task+0x194>
	{
		WriteNextResponseByte('Y');
   1e2bc:	89 e5       	ldi	r24, 0x59	; 89
   1e2be:	22 df       	rcall	.-444    	; 0x1e104 <WriteNextResponseByte>

		/* Send block size to the host */
		WriteNextResponseByte(SPM_PAGESIZE >> 8);
   1e2c0:	81 e0       	ldi	r24, 0x01	; 1
   1e2c2:	20 df       	rcall	.-448    	; 0x1e104 <WriteNextResponseByte>
		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
   1e2c4:	80 e0       	ldi	r24, 0x00	; 0
   1e2c6:	9a c1       	rjmp	.+820    	; 0x1e5fc <CDC_Task+0x4c8>
	}
	else if ((Command == 'B') || (Command == 'g'))
   1e2c8:	82 34       	cpi	r24, 0x42	; 66
   1e2ca:	19 f0       	breq	.+6      	; 0x1e2d2 <CDC_Task+0x19e>
   1e2cc:	87 36       	cpi	r24, 0x67	; 103
   1e2ce:	09 f0       	breq	.+2      	; 0x1e2d2 <CDC_Task+0x19e>
   1e2d0:	ed c0       	rjmp	.+474    	; 0x1e4ac <CDC_Task+0x378>
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
   1e2d2:	00 df       	rcall	.-512    	; 0x1e0d4 <FetchNextCommandByte>
   1e2d4:	e8 2e       	mov	r14, r24
	BlockSize |=  FetchNextCommandByte();
   1e2d6:	fe de       	rcall	.-516    	; 0x1e0d4 <FetchNextCommandByte>
   1e2d8:	d8 2e       	mov	r13, r24

	MemoryType =  FetchNextCommandByte();
   1e2da:	fc de       	rcall	.-520    	; 0x1e0d4 <FetchNextCommandByte>
   1e2dc:	68 2e       	mov	r6, r24

	if ((MemoryType != 'E') && (MemoryType != 'F'))
   1e2de:	85 54       	subi	r24, 0x45	; 69
   1e2e0:	82 30       	cpi	r24, 0x02	; 2
   1e2e2:	08 f0       	brcs	.+2      	; 0x1e2e6 <CDC_Task+0x1b2>
   1e2e4:	8a c1       	rjmp	.+788    	; 0x1e5fa <CDC_Task+0x4c6>
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
   1e2e6:	9e 2d       	mov	r25, r14
   1e2e8:	80 e0       	ldi	r24, 0x00	; 0
	BlockSize |=  FetchNextCommandByte();
   1e2ea:	cd 2d       	mov	r28, r13
   1e2ec:	d0 e0       	ldi	r29, 0x00	; 0
   1e2ee:	c8 2b       	or	r28, r24
   1e2f0:	d9 2b       	or	r29, r25

		return;
	}

	/* Check if command is to read memory */
	if (Command == 'g')
   1e2f2:	17 36       	cpi	r17, 0x67	; 103
   1e2f4:	09 f0       	breq	.+2      	; 0x1e2f8 <CDC_Task+0x1c4>
   1e2f6:	54 c0       	rjmp	.+168    	; 0x1e3a0 <CDC_Task+0x26c>
	{
		/* Re-enable RWW section */
		boot_rww_enable();
   1e2f8:	81 e1       	ldi	r24, 0x11	; 17
   1e2fa:	80 93 57 00 	sts	0x0057, r24
   1e2fe:	e8 95       	spm
   1e300:	10 e0       	ldi	r17, 0x00	; 0

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
				  CurrAddress += 2;

				HighByte = !HighByte;
   1e302:	01 e0       	ldi	r16, 0x01	; 1
   1e304:	49 c0       	rjmp	.+146    	; 0x1e398 <CDC_Task+0x264>
   1e306:	20 91 8c 01 	lds	r18, 0x018C
   1e30a:	30 91 8d 01 	lds	r19, 0x018D
   1e30e:	40 91 8e 01 	lds	r20, 0x018E
   1e312:	50 91 8f 01 	lds	r21, 0x018F
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
		{
			if (MemoryType == 'F')
   1e316:	86 e4       	ldi	r24, 0x46	; 70
   1e318:	68 16       	cp	r6, r24
   1e31a:	19 f5       	brne	.+70     	; 0x1e362 <CDC_Task+0x22e>
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
   1e31c:	81 2f       	mov	r24, r17
   1e31e:	90 e0       	ldi	r25, 0x00	; 0
   1e320:	a0 e0       	ldi	r26, 0x00	; 0
   1e322:	b0 e0       	ldi	r27, 0x00	; 0
   1e324:	82 2b       	or	r24, r18
   1e326:	93 2b       	or	r25, r19
   1e328:	a4 2b       	or	r26, r20
   1e32a:	b5 2b       	or	r27, r21
   1e32c:	ab bf       	out	0x3b, r26	; 59
   1e32e:	fc 01       	movw	r30, r24
   1e330:	87 91       	elpm	r24, Z+
   1e332:	e8 de       	rcall	.-560    	; 0x1e104 <WriteNextResponseByte>
				#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
				#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
   1e334:	11 23       	and	r17, r17
   1e336:	99 f0       	breq	.+38     	; 0x1e35e <CDC_Task+0x22a>
				  CurrAddress += 2;
   1e338:	80 91 8c 01 	lds	r24, 0x018C
   1e33c:	90 91 8d 01 	lds	r25, 0x018D
   1e340:	a0 91 8e 01 	lds	r26, 0x018E
   1e344:	b0 91 8f 01 	lds	r27, 0x018F
   1e348:	02 96       	adiw	r24, 0x02	; 2
   1e34a:	a1 1d       	adc	r26, r1
   1e34c:	b1 1d       	adc	r27, r1
   1e34e:	80 93 8c 01 	sts	0x018C, r24
   1e352:	90 93 8d 01 	sts	0x018D, r25
   1e356:	a0 93 8e 01 	sts	0x018E, r26
   1e35a:	b0 93 8f 01 	sts	0x018F, r27

				HighByte = !HighByte;
   1e35e:	10 27       	eor	r17, r16
   1e360:	1a c0       	rjmp	.+52     	; 0x1e396 <CDC_Task+0x262>
			}
			else
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
   1e362:	56 95       	lsr	r21
   1e364:	47 95       	ror	r20
   1e366:	37 95       	ror	r19
   1e368:	27 95       	ror	r18
   1e36a:	c9 01       	movw	r24, r18
   1e36c:	1a d5       	rcall	.+2612   	; 0x1eda2 <__eerd_byte_usb1287>
   1e36e:	ca de       	rcall	.-620    	; 0x1e104 <WriteNextResponseByte>

				/* Increment the address counter after use */
				CurrAddress += 2;
   1e370:	80 91 8c 01 	lds	r24, 0x018C
   1e374:	90 91 8d 01 	lds	r25, 0x018D
   1e378:	a0 91 8e 01 	lds	r26, 0x018E
   1e37c:	b0 91 8f 01 	lds	r27, 0x018F
   1e380:	02 96       	adiw	r24, 0x02	; 2
   1e382:	a1 1d       	adc	r26, r1
   1e384:	b1 1d       	adc	r27, r1
   1e386:	80 93 8c 01 	sts	0x018C, r24
   1e38a:	90 93 8d 01 	sts	0x018D, r25
   1e38e:	a0 93 8e 01 	sts	0x018E, r26
   1e392:	b0 93 8f 01 	sts	0x018F, r27
   1e396:	21 97       	sbiw	r28, 0x01	; 1
	if (Command == 'g')
	{
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
   1e398:	20 97       	sbiw	r28, 0x00	; 0
   1e39a:	09 f0       	breq	.+2      	; 0x1e39e <CDC_Task+0x26a>
   1e39c:	b4 cf       	rjmp	.-152    	; 0x1e306 <CDC_Task+0x1d2>
   1e39e:	2f c1       	rjmp	.+606    	; 0x1e5fe <CDC_Task+0x4ca>
			}
		}
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;
   1e3a0:	80 90 8c 01 	lds	r8, 0x018C
   1e3a4:	90 90 8d 01 	lds	r9, 0x018D
   1e3a8:	a0 90 8e 01 	lds	r10, 0x018E
   1e3ac:	b0 90 8f 01 	lds	r11, 0x018F

		if (MemoryType == 'F')
   1e3b0:	96 e4       	ldi	r25, 0x46	; 70
   1e3b2:	69 16       	cp	r6, r25
   1e3b4:	09 f0       	breq	.+2      	; 0x1e3b8 <CDC_Task+0x284>
   1e3b6:	64 c0       	rjmp	.+200    	; 0x1e480 <CDC_Task+0x34c>
		{
			boot_page_erase(PageStartAddress);
   1e3b8:	83 e0       	ldi	r24, 0x03	; 3
   1e3ba:	f4 01       	movw	r30, r8
   1e3bc:	a0 92 5b 00 	sts	0x005B, r10
   1e3c0:	80 93 57 00 	sts	0x0057, r24
   1e3c4:	e8 95       	spm
			boot_spm_busy_wait();
   1e3c6:	07 b6       	in	r0, 0x37	; 55
   1e3c8:	00 fc       	sbrc	r0, 0
   1e3ca:	fd cf       	rjmp	.-6      	; 0x1e3c6 <CDC_Task+0x292>
   1e3cc:	59 c0       	rjmp	.+178    	; 0x1e480 <CDC_Task+0x34c>
		}

		while (BlockSize--)
		{
			if (MemoryType == 'F')
   1e3ce:	a6 e4       	ldi	r26, 0x46	; 70
   1e3d0:	6a 16       	cp	r6, r26
   1e3d2:	89 f5       	brne	.+98     	; 0x1e436 <CDC_Task+0x302>
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
   1e3d4:	77 20       	and	r7, r7
   1e3d6:	59 f1       	breq	.+86     	; 0x1e42e <CDC_Task+0x2fa>
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
   1e3d8:	e0 90 8c 01 	lds	r14, 0x018C
   1e3dc:	f0 90 8d 01 	lds	r15, 0x018D
   1e3e0:	00 91 8e 01 	lds	r16, 0x018E
   1e3e4:	10 91 8f 01 	lds	r17, 0x018F
   1e3e8:	75 de       	rcall	.-790    	; 0x1e0d4 <FetchNextCommandByte>
   1e3ea:	d8 2e       	mov	r13, r24
   1e3ec:	cc 24       	eor	r12, r12
   1e3ee:	85 2d       	mov	r24, r5
   1e3f0:	90 e0       	ldi	r25, 0x00	; 0
   1e3f2:	8c 29       	or	r24, r12
   1e3f4:	9d 29       	or	r25, r13
   1e3f6:	0c 01       	movw	r0, r24
   1e3f8:	f7 01       	movw	r30, r14
   1e3fa:	00 93 5b 00 	sts	0x005B, r16
   1e3fe:	40 92 57 00 	sts	0x0057, r4
   1e402:	e8 95       	spm
   1e404:	11 24       	eor	r1, r1

					/* Increment the address counter after use */
					CurrAddress += 2;
   1e406:	80 91 8c 01 	lds	r24, 0x018C
   1e40a:	90 91 8d 01 	lds	r25, 0x018D
   1e40e:	a0 91 8e 01 	lds	r26, 0x018E
   1e412:	b0 91 8f 01 	lds	r27, 0x018F
   1e416:	02 96       	adiw	r24, 0x02	; 2
   1e418:	a1 1d       	adc	r26, r1
   1e41a:	b1 1d       	adc	r27, r1
   1e41c:	80 93 8c 01 	sts	0x018C, r24
   1e420:	90 93 8d 01 	sts	0x018D, r25
   1e424:	a0 93 8e 01 	sts	0x018E, r26
   1e428:	b0 93 8f 01 	sts	0x018F, r27
   1e42c:	02 c0       	rjmp	.+4      	; 0x1e432 <CDC_Task+0x2fe>
				}
				else
				{
					LowByte = FetchNextCommandByte();
   1e42e:	52 de       	rcall	.-860    	; 0x1e0d4 <FetchNextCommandByte>
   1e430:	58 2e       	mov	r5, r24
				}
				
				HighByte = !HighByte;
   1e432:	74 24       	eor	r7, r4
   1e434:	23 c0       	rjmp	.+70     	; 0x1e47c <CDC_Task+0x348>
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
   1e436:	e0 90 8c 01 	lds	r14, 0x018C
   1e43a:	f0 90 8d 01 	lds	r15, 0x018D
   1e43e:	00 91 8e 01 	lds	r16, 0x018E
   1e442:	10 91 8f 01 	lds	r17, 0x018F
   1e446:	16 95       	lsr	r17
   1e448:	07 95       	ror	r16
   1e44a:	f7 94       	ror	r15
   1e44c:	e7 94       	ror	r14
   1e44e:	42 de       	rcall	.-892    	; 0x1e0d4 <FetchNextCommandByte>
   1e450:	68 2f       	mov	r22, r24
   1e452:	c7 01       	movw	r24, r14
   1e454:	ae d4       	rcall	.+2396   	; 0x1edb2 <__eewr_byte_usb1287>

				/* Increment the address counter after use */
				CurrAddress += 2;
   1e456:	80 91 8c 01 	lds	r24, 0x018C
   1e45a:	90 91 8d 01 	lds	r25, 0x018D
   1e45e:	a0 91 8e 01 	lds	r26, 0x018E
   1e462:	b0 91 8f 01 	lds	r27, 0x018F
   1e466:	02 96       	adiw	r24, 0x02	; 2
   1e468:	a1 1d       	adc	r26, r1
   1e46a:	b1 1d       	adc	r27, r1
   1e46c:	80 93 8c 01 	sts	0x018C, r24
   1e470:	90 93 8d 01 	sts	0x018D, r25
   1e474:	a0 93 8e 01 	sts	0x018E, r26
   1e478:	b0 93 8f 01 	sts	0x018F, r27
   1e47c:	21 97       	sbiw	r28, 0x01	; 1
   1e47e:	04 c0       	rjmp	.+8      	; 0x1e488 <CDC_Task+0x354>
   1e480:	55 24       	eor	r5, r5
   1e482:	77 24       	eor	r7, r7
				else
				{
					LowByte = FetchNextCommandByte();
				}
				
				HighByte = !HighByte;
   1e484:	44 24       	eor	r4, r4
   1e486:	43 94       	inc	r4
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
   1e488:	20 97       	sbiw	r28, 0x00	; 0
   1e48a:	09 f0       	breq	.+2      	; 0x1e48e <CDC_Task+0x35a>
   1e48c:	a0 cf       	rjmp	.-192    	; 0x1e3ce <CDC_Task+0x29a>
				CurrAddress += 2;
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == 'F')
   1e48e:	b6 e4       	ldi	r27, 0x46	; 70
   1e490:	6b 16       	cp	r6, r27
   1e492:	09 f0       	breq	.+2      	; 0x1e496 <CDC_Task+0x362>
   1e494:	70 ce       	rjmp	.-800    	; 0x1e176 <CDC_Task+0x42>
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
   1e496:	85 e0       	ldi	r24, 0x05	; 5
   1e498:	f4 01       	movw	r30, r8
   1e49a:	a0 92 5b 00 	sts	0x005B, r10
   1e49e:	80 93 57 00 	sts	0x0057, r24
   1e4a2:	e8 95       	spm

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
   1e4a4:	07 b6       	in	r0, 0x37	; 55
   1e4a6:	00 fc       	sbrc	r0, 0
   1e4a8:	fd cf       	rjmp	.-6      	; 0x1e4a4 <CDC_Task+0x370>
   1e4aa:	65 ce       	rjmp	.-822    	; 0x1e176 <CDC_Task+0x42>
		/* Delegate the block write/read to a separate function for clarity */
		ReadWriteMemoryBlock(Command);
	}
	#endif
	#if !defined(NO_FLASH_BYTE_SUPPORT)
	else if (Command == 'C')
   1e4ac:	83 34       	cpi	r24, 0x43	; 67
   1e4ae:	a1 f4       	brne	.+40     	; 0x1e4d8 <CDC_Task+0x3a4>
	{
		/* Write the high byte to the current flash page */
		boot_page_fill(CurrAddress, FetchNextCommandByte());
   1e4b0:	e0 90 8c 01 	lds	r14, 0x018C
   1e4b4:	f0 90 8d 01 	lds	r15, 0x018D
   1e4b8:	00 91 8e 01 	lds	r16, 0x018E
   1e4bc:	10 91 8f 01 	lds	r17, 0x018F
   1e4c0:	09 de       	rcall	.-1006   	; 0x1e0d4 <FetchNextCommandByte>
   1e4c2:	90 e0       	ldi	r25, 0x00	; 0
   1e4c4:	21 e0       	ldi	r18, 0x01	; 1
   1e4c6:	0c 01       	movw	r0, r24
   1e4c8:	f7 01       	movw	r30, r14
   1e4ca:	00 93 5b 00 	sts	0x005B, r16
   1e4ce:	20 93 57 00 	sts	0x0057, r18
   1e4d2:	e8 95       	spm
   1e4d4:	11 24       	eor	r1, r1
   1e4d6:	4f ce       	rjmp	.-866    	; 0x1e176 <CDC_Task+0x42>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'c')
   1e4d8:	83 36       	cpi	r24, 0x63	; 99
   1e4da:	e1 f4       	brne	.+56     	; 0x1e514 <CDC_Task+0x3e0>
	{
		/* Write the low byte to the current flash page */
		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
   1e4dc:	e0 90 8c 01 	lds	r14, 0x018C
   1e4e0:	f0 90 8d 01 	lds	r15, 0x018D
   1e4e4:	00 91 8e 01 	lds	r16, 0x018E
   1e4e8:	10 91 8f 01 	lds	r17, 0x018F
   1e4ec:	81 e0       	ldi	r24, 0x01	; 1
   1e4ee:	90 e0       	ldi	r25, 0x00	; 0
   1e4f0:	a0 e0       	ldi	r26, 0x00	; 0
   1e4f2:	b0 e0       	ldi	r27, 0x00	; 0
   1e4f4:	e8 2a       	or	r14, r24
   1e4f6:	f9 2a       	or	r15, r25
   1e4f8:	0a 2b       	or	r16, r26
   1e4fa:	1b 2b       	or	r17, r27
   1e4fc:	eb dd       	rcall	.-1066   	; 0x1e0d4 <FetchNextCommandByte>
   1e4fe:	90 e0       	ldi	r25, 0x00	; 0
   1e500:	21 e0       	ldi	r18, 0x01	; 1
   1e502:	0c 01       	movw	r0, r24
   1e504:	f7 01       	movw	r30, r14
   1e506:	00 93 5b 00 	sts	0x005B, r16
   1e50a:	20 93 57 00 	sts	0x0057, r18
   1e50e:	e8 95       	spm
   1e510:	11 24       	eor	r1, r1
   1e512:	39 c0       	rjmp	.+114    	; 0x1e586 <CDC_Task+0x452>
		CurrAddress += 2;

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'm')
   1e514:	8d 36       	cpi	r24, 0x6D	; 109
   1e516:	99 f4       	brne	.+38     	; 0x1e53e <CDC_Task+0x40a>
	{
		/* Commit the flash page to memory */
		boot_page_write(CurrAddress);
   1e518:	80 91 8c 01 	lds	r24, 0x018C
   1e51c:	90 91 8d 01 	lds	r25, 0x018D
   1e520:	a0 91 8e 01 	lds	r26, 0x018E
   1e524:	b0 91 8f 01 	lds	r27, 0x018F
   1e528:	25 e0       	ldi	r18, 0x05	; 5
   1e52a:	fc 01       	movw	r30, r24
   1e52c:	a0 93 5b 00 	sts	0x005B, r26
   1e530:	20 93 57 00 	sts	0x0057, r18
   1e534:	e8 95       	spm

		/* Wait until write operation has completed */
		boot_spm_busy_wait();
   1e536:	07 b6       	in	r0, 0x37	; 55
   1e538:	00 fc       	sbrc	r0, 0
   1e53a:	fd cf       	rjmp	.-6      	; 0x1e536 <CDC_Task+0x402>
   1e53c:	1c ce       	rjmp	.-968    	; 0x1e176 <CDC_Task+0x42>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'R')
   1e53e:	82 35       	cpi	r24, 0x52	; 82
   1e540:	81 f4       	brne	.+32     	; 0x1e562 <CDC_Task+0x42e>
	{
		#if (FLASHEND > 0xFFFF)
		uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
   1e542:	e0 90 8c 01 	lds	r14, 0x018C
   1e546:	f0 90 8d 01 	lds	r15, 0x018D
   1e54a:	00 91 8e 01 	lds	r16, 0x018E
   1e54e:	10 91 8f 01 	lds	r17, 0x018F
   1e552:	0b bf       	out	0x3b, r16	; 59
   1e554:	f7 01       	movw	r30, r14
   1e556:	e7 90       	elpm	r14, Z+
   1e558:	f6 90       	elpm	r15, Z+
		#else
		uint16_t ProgramWord = pgm_read_word(CurrAddress);
		#endif

		WriteNextResponseByte(ProgramWord >> 8);
   1e55a:	8f 2d       	mov	r24, r15
   1e55c:	d3 dd       	rcall	.-1114   	; 0x1e104 <WriteNextResponseByte>
		WriteNextResponseByte(ProgramWord & 0xFF);
   1e55e:	8e 2d       	mov	r24, r14
   1e560:	4d c0       	rjmp	.+154    	; 0x1e5fc <CDC_Task+0x4c8>
	}
	#endif
	#if !defined(NO_EEPROM_BYTE_SUPPORT)
	else if (Command == 'D')
   1e562:	84 34       	cpi	r24, 0x44	; 68
   1e564:	21 f5       	brne	.+72     	; 0x1e5ae <CDC_Task+0x47a>
	{
		/* Read the byte from the endpoint and write it to the EEPROM */
		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
   1e566:	e0 90 8c 01 	lds	r14, 0x018C
   1e56a:	f0 90 8d 01 	lds	r15, 0x018D
   1e56e:	00 91 8e 01 	lds	r16, 0x018E
   1e572:	10 91 8f 01 	lds	r17, 0x018F
   1e576:	16 95       	lsr	r17
   1e578:	07 95       	ror	r16
   1e57a:	f7 94       	ror	r15
   1e57c:	e7 94       	ror	r14
   1e57e:	aa dd       	rcall	.-1196   	; 0x1e0d4 <FetchNextCommandByte>
   1e580:	68 2f       	mov	r22, r24
   1e582:	c7 01       	movw	r24, r14
   1e584:	16 d4       	rcall	.+2092   	; 0x1edb2 <__eewr_byte_usb1287>

		/* Increment the address after use */
		CurrAddress += 2;
   1e586:	80 91 8c 01 	lds	r24, 0x018C
   1e58a:	90 91 8d 01 	lds	r25, 0x018D
   1e58e:	a0 91 8e 01 	lds	r26, 0x018E
   1e592:	b0 91 8f 01 	lds	r27, 0x018F
   1e596:	02 96       	adiw	r24, 0x02	; 2
   1e598:	a1 1d       	adc	r26, r1
   1e59a:	b1 1d       	adc	r27, r1
   1e59c:	80 93 8c 01 	sts	0x018C, r24
   1e5a0:	90 93 8d 01 	sts	0x018D, r25
   1e5a4:	a0 93 8e 01 	sts	0x018E, r26
   1e5a8:	b0 93 8f 01 	sts	0x018F, r27
   1e5ac:	e4 cd       	rjmp	.-1080   	; 0x1e176 <CDC_Task+0x42>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'd')
   1e5ae:	84 36       	cpi	r24, 0x64	; 100
   1e5b0:	11 f5       	brne	.+68     	; 0x1e5f6 <CDC_Task+0x4c2>
	{
		/* Read the EEPROM byte and write it to the endpoint */
		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
   1e5b2:	80 91 8c 01 	lds	r24, 0x018C
   1e5b6:	90 91 8d 01 	lds	r25, 0x018D
   1e5ba:	a0 91 8e 01 	lds	r26, 0x018E
   1e5be:	b0 91 8f 01 	lds	r27, 0x018F
   1e5c2:	b6 95       	lsr	r27
   1e5c4:	a7 95       	ror	r26
   1e5c6:	97 95       	ror	r25
   1e5c8:	87 95       	ror	r24
   1e5ca:	eb d3       	rcall	.+2006   	; 0x1eda2 <__eerd_byte_usb1287>
   1e5cc:	9b dd       	rcall	.-1226   	; 0x1e104 <WriteNextResponseByte>

		/* Increment the address after use */
		CurrAddress += 2;
   1e5ce:	80 91 8c 01 	lds	r24, 0x018C
   1e5d2:	90 91 8d 01 	lds	r25, 0x018D
   1e5d6:	a0 91 8e 01 	lds	r26, 0x018E
   1e5da:	b0 91 8f 01 	lds	r27, 0x018F
   1e5de:	02 96       	adiw	r24, 0x02	; 2
   1e5e0:	a1 1d       	adc	r26, r1
   1e5e2:	b1 1d       	adc	r27, r1
   1e5e4:	80 93 8c 01 	sts	0x018C, r24
   1e5e8:	90 93 8d 01 	sts	0x018D, r25
   1e5ec:	a0 93 8e 01 	sts	0x018E, r26
   1e5f0:	b0 93 8f 01 	sts	0x018F, r27
   1e5f4:	04 c0       	rjmp	.+8      	; 0x1e5fe <CDC_Task+0x4ca>
	}
	#endif
	else if (Command != 27)
   1e5f6:	8b 31       	cpi	r24, 0x1B	; 27
   1e5f8:	11 f0       	breq	.+4      	; 0x1e5fe <CDC_Task+0x4ca>
	{
		/* Unknown (non-sync) command, return fail code */
		WriteNextResponseByte('?');
   1e5fa:	8f e3       	ldi	r24, 0x3F	; 63
   1e5fc:	83 dd       	rcall	.-1274   	; 0x1e104 <WriteNextResponseByte>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1e5fe:	83 e0       	ldi	r24, 0x03	; 3
   1e600:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1e604:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e608:	80 91 e8 00 	lds	r24, 0x00E8
   1e60c:	8e 77       	andi	r24, 0x7E	; 126
   1e60e:	80 93 e8 00 	sts	0x00E8, r24

	/* Send the endpoint data to the host */
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
   1e612:	95 ff       	sbrs	r25, 5
   1e614:	04 c0       	rjmp	.+8      	; 0x1e61e <CDC_Task+0x4ea>
   1e616:	10 c0       	rjmp	.+32     	; 0x1e638 <CDC_Task+0x504>
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e618:	8e b3       	in	r24, 0x1e	; 30
   1e61a:	88 23       	and	r24, r24
   1e61c:	c9 f0       	breq	.+50     	; 0x1e650 <CDC_Task+0x51c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e61e:	80 91 e8 00 	lds	r24, 0x00E8
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
	{
		while (!(Endpoint_IsINReady()))
   1e622:	80 ff       	sbrs	r24, 0
   1e624:	f9 cf       	rjmp	.-14     	; 0x1e618 <CDC_Task+0x4e4>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e626:	80 91 e8 00 	lds	r24, 0x00E8
   1e62a:	8e 77       	andi	r24, 0x7E	; 126
   1e62c:	80 93 e8 00 	sts	0x00E8, r24
   1e630:	03 c0       	rjmp	.+6      	; 0x1e638 <CDC_Task+0x504>
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e632:	8e b3       	in	r24, 0x1e	; 30
   1e634:	88 23       	and	r24, r24
   1e636:	61 f0       	breq	.+24     	; 0x1e650 <CDC_Task+0x51c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e638:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearIN();
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
   1e63c:	80 ff       	sbrs	r24, 0
   1e63e:	f9 cf       	rjmp	.-14     	; 0x1e632 <CDC_Task+0x4fe>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1e640:	84 e0       	ldi	r24, 0x04	; 4
   1e642:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e646:	80 91 e8 00 	lds	r24, 0x00E8
   1e64a:	8b 77       	andi	r24, 0x7B	; 123
   1e64c:	80 93 e8 00 	sts	0x00E8, r24
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Acknowledge the command from the host */
	Endpoint_ClearOUT();
}
   1e650:	df 91       	pop	r29
   1e652:	cf 91       	pop	r28
   1e654:	1f 91       	pop	r17
   1e656:	0f 91       	pop	r16
   1e658:	ff 90       	pop	r15
   1e65a:	ef 90       	pop	r14
   1e65c:	df 90       	pop	r13
   1e65e:	cf 90       	pop	r12
   1e660:	bf 90       	pop	r11
   1e662:	af 90       	pop	r10
   1e664:	9f 90       	pop	r9
   1e666:	8f 90       	pop	r8
   1e668:	7f 90       	pop	r7
   1e66a:	6f 90       	pop	r6
   1e66c:	5f 90       	pop	r5
   1e66e:	4f 90       	pop	r4
   1e670:	08 95       	ret

0001e672 <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
   1e672:	80 91 93 01 	lds	r24, 0x0193
   1e676:	80 32       	cpi	r24, 0x20	; 32
   1e678:	b1 f0       	breq	.+44     	; 0x1e6a6 <EVENT_USB_Device_ControlRequest+0x34>
   1e67a:	81 32       	cpi	r24, 0x21	; 33
   1e67c:	39 f5       	brne	.+78     	; 0x1e6cc <EVENT_USB_Device_ControlRequest+0x5a>
	{
		case REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
   1e67e:	80 91 92 01 	lds	r24, 0x0192
   1e682:	81 3a       	cpi	r24, 0xA1	; 161
   1e684:	19 f5       	brne	.+70     	; 0x1e6cc <EVENT_USB_Device_ControlRequest+0x5a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e686:	80 91 e8 00 	lds	r24, 0x00E8
   1e68a:	87 7f       	andi	r24, 0xF7	; 247
   1e68c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_Line_Coding_t));
   1e690:	88 e0       	ldi	r24, 0x08	; 8
   1e692:	91 e0       	ldi	r25, 0x01	; 1
   1e694:	67 e0       	ldi	r22, 0x07	; 7
   1e696:	70 e0       	ldi	r23, 0x00	; 0
   1e698:	d7 d2       	rcall	.+1454   	; 0x1ec48 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e69a:	80 91 e8 00 	lds	r24, 0x00E8
   1e69e:	8b 77       	andi	r24, 0x7B	; 123
   1e6a0:	80 93 e8 00 	sts	0x00E8, r24
   1e6a4:	08 95       	ret
				Endpoint_ClearOUT();
			}

			break;
		case REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
   1e6a6:	80 91 92 01 	lds	r24, 0x0192
   1e6aa:	81 32       	cpi	r24, 0x21	; 33
   1e6ac:	79 f4       	brne	.+30     	; 0x1e6cc <EVENT_USB_Device_ControlRequest+0x5a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e6ae:	80 91 e8 00 	lds	r24, 0x00E8
   1e6b2:	87 7f       	andi	r24, 0xF7	; 247
   1e6b4:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_Line_Coding_t));
   1e6b8:	88 e0       	ldi	r24, 0x08	; 8
   1e6ba:	91 e0       	ldi	r25, 0x01	; 1
   1e6bc:	67 e0       	ldi	r22, 0x07	; 7
   1e6be:	70 e0       	ldi	r23, 0x00	; 0
   1e6c0:	1f d3       	rcall	.+1598   	; 0x1ed00 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e6c2:	80 91 e8 00 	lds	r24, 0x00E8
   1e6c6:	8e 77       	andi	r24, 0x7E	; 126
   1e6c8:	80 93 e8 00 	sts	0x00E8, r24
   1e6cc:	08 95       	ret

0001e6ce <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
   1e6ce:	82 e0       	ldi	r24, 0x02	; 2
   1e6d0:	61 ec       	ldi	r22, 0xC1	; 193
   1e6d2:	42 e0       	ldi	r20, 0x02	; 2
   1e6d4:	65 d0       	rcall	.+202    	; 0x1e7a0 <Endpoint_ConfigureEndpoint_Prv>
	                           ENDPOINT_BANK_SINGLE);

	Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK,
	                           ENDPOINT_DIR_OUT, CDC_TXRX_EPSIZE,
	                           ENDPOINT_BANK_SINGLE);
}
   1e6d6:	83 e0       	ldi	r24, 0x03	; 3
   1e6d8:	61 e8       	ldi	r22, 0x81	; 129
   1e6da:	42 e1       	ldi	r20, 0x12	; 18
   1e6dc:	61 d0       	rcall	.+194    	; 0x1e7a0 <Endpoint_ConfigureEndpoint_Prv>
   1e6de:	84 e0       	ldi	r24, 0x04	; 4
   1e6e0:	60 e8       	ldi	r22, 0x80	; 128
   1e6e2:	42 e1       	ldi	r20, 0x12	; 18
   1e6e4:	5d c0       	rjmp	.+186    	; 0x1e7a0 <Endpoint_ConfigureEndpoint_Prv>

0001e6e6 <SetupHardware>:

/** Configures all hardware required for the bootloader. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
   1e6e6:	84 b7       	in	r24, 0x34	; 52
   1e6e8:	87 7f       	andi	r24, 0xF7	; 247
   1e6ea:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
   1e6ec:	88 e1       	ldi	r24, 0x18	; 24
   1e6ee:	0f b6       	in	r0, 0x3f	; 63
   1e6f0:	f8 94       	cli
   1e6f2:	80 93 60 00 	sts	0x0060, r24
   1e6f6:	10 92 60 00 	sts	0x0060, r1
   1e6fa:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
   1e6fc:	80 e0       	ldi	r24, 0x00	; 0
   1e6fe:	90 e0       	ldi	r25, 0x00	; 0
   1e700:	20 e8       	ldi	r18, 0x80	; 128
   1e702:	0f b6       	in	r0, 0x3f	; 63
   1e704:	f8 94       	cli
   1e706:	20 93 61 00 	sts	0x0061, r18
   1e70a:	80 93 61 00 	sts	0x0061, r24
   1e70e:	0f be       	out	0x3f, r0	; 63

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
   1e710:	81 e0       	ldi	r24, 0x01	; 1
   1e712:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1 << IVSEL);
   1e714:	82 e0       	ldi	r24, 0x02	; 2
   1e716:	85 bf       	out	0x35, r24	; 53

	/* Initialize USB Subsystem */
	USB_Init();
}
   1e718:	bd c0       	rjmp	.+378    	; 0x1e894 <USB_Init>

0001e71a <main>:
 *  the loaded application code.
 */
int main(void)
{
	/* Setup hardware required for the bootloader */
	SetupHardware();
   1e71a:	e5 df       	rcall	.-54     	; 0x1e6e6 <SetupHardware>

	/* Enable global interrupts so that the USB stack can function */
	sei();
   1e71c:	78 94       	sei
   1e71e:	02 c0       	rjmp	.+4      	; 0x1e724 <main+0xa>

	while (RunBootloader)
	{
		CDC_Task();
   1e720:	09 dd       	rcall	.-1518   	; 0x1e134 <CDC_Task>
		USB_USBTask();
   1e722:	2d d3       	rcall	.+1626   	; 0x1ed7e <USB_USBTask>
	SetupHardware();

	/* Enable global interrupts so that the USB stack can function */
	sei();

	while (RunBootloader)
   1e724:	80 91 0f 01 	lds	r24, 0x010F
   1e728:	88 23       	and	r24, r24
   1e72a:	d1 f7       	brne	.-12     	; 0x1e720 <main+0x6>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
   1e72c:	80 91 e0 00 	lds	r24, 0x00E0
   1e730:	81 60       	ori	r24, 0x01	; 1
   1e732:	80 93 e0 00 	sts	0x00E0, r24

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Enable the watchdog and force a timeout to reset the AVR */
	wdt_enable(WDTO_250MS);
   1e736:	2c e0       	ldi	r18, 0x0C	; 12
   1e738:	88 e1       	ldi	r24, 0x18	; 24
   1e73a:	90 e0       	ldi	r25, 0x00	; 0
   1e73c:	0f b6       	in	r0, 0x3f	; 63
   1e73e:	f8 94       	cli
   1e740:	a8 95       	wdr
   1e742:	80 93 60 00 	sts	0x0060, r24
   1e746:	0f be       	out	0x3f, r0	; 63
   1e748:	20 93 60 00 	sts	0x0060, r18
   1e74c:	ff cf       	rjmp	.-2      	; 0x1e74c <main+0x32>

0001e74e <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
   1e74e:	fa 01       	movw	r30, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
   1e750:	92 30       	cpi	r25, 0x02	; 2
   1e752:	71 f0       	breq	.+28     	; 0x1e770 <CALLBACK_USB_GetDescriptor+0x22>
   1e754:	93 30       	cpi	r25, 0x03	; 3
   1e756:	89 f0       	breq	.+34     	; 0x1e77a <CALLBACK_USB_GetDescriptor+0x2c>
   1e758:	91 30       	cpi	r25, 0x01	; 1
   1e75a:	29 f4       	brne	.+10     	; 0x1e766 <CALLBACK_USB_GetDescriptor+0x18>
   1e75c:	80 e1       	ldi	r24, 0x10	; 16
   1e75e:	91 e0       	ldi	r25, 0x01	; 1
   1e760:	22 e1       	ldi	r18, 0x12	; 18
   1e762:	30 e0       	ldi	r19, 0x00	; 0
   1e764:	19 c0       	rjmp	.+50     	; 0x1e798 <CALLBACK_USB_GetDescriptor+0x4a>
   1e766:	80 e0       	ldi	r24, 0x00	; 0
   1e768:	90 e0       	ldi	r25, 0x00	; 0
   1e76a:	20 e0       	ldi	r18, 0x00	; 0
   1e76c:	30 e0       	ldi	r19, 0x00	; 0
   1e76e:	14 c0       	rjmp	.+40     	; 0x1e798 <CALLBACK_USB_GetDescriptor+0x4a>
   1e770:	82 e2       	ldi	r24, 0x22	; 34
   1e772:	91 e0       	ldi	r25, 0x01	; 1
   1e774:	2e e3       	ldi	r18, 0x3E	; 62
   1e776:	30 e0       	ldi	r19, 0x00	; 0
   1e778:	0f c0       	rjmp	.+30     	; 0x1e798 <CALLBACK_USB_GetDescriptor+0x4a>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
   1e77a:	88 23       	and	r24, r24
   1e77c:	39 f4       	brne	.+14     	; 0x1e78c <CALLBACK_USB_GetDescriptor+0x3e>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
   1e77e:	80 91 60 01 	lds	r24, 0x0160
   1e782:	28 2f       	mov	r18, r24
   1e784:	30 e0       	ldi	r19, 0x00	; 0
   1e786:	80 e6       	ldi	r24, 0x60	; 96
   1e788:	91 e0       	ldi	r25, 0x01	; 1
   1e78a:	06 c0       	rjmp	.+12     	; 0x1e798 <CALLBACK_USB_GetDescriptor+0x4a>
			}
			else
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
   1e78c:	80 91 64 01 	lds	r24, 0x0164
   1e790:	28 2f       	mov	r18, r24
   1e792:	30 e0       	ldi	r19, 0x00	; 0
   1e794:	84 e6       	ldi	r24, 0x64	; 100
   1e796:	91 e0       	ldi	r25, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
   1e798:	91 83       	std	Z+1, r25	; 0x01
   1e79a:	80 83       	st	Z, r24
	return Size;
}
   1e79c:	c9 01       	movw	r24, r18
   1e79e:	08 95       	ret

0001e7a0 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1e7a0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
   1e7a4:	80 91 eb 00 	lds	r24, 0x00EB
   1e7a8:	81 60       	ori	r24, 0x01	; 1
   1e7aa:	80 93 eb 00 	sts	0x00EB, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
   1e7ae:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
   1e7b2:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
   1e7b6:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
   1e7ba:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
   1e7be:	88 1f       	adc	r24, r24
   1e7c0:	88 27       	eor	r24, r24
   1e7c2:	88 1f       	adc	r24, r24
   1e7c4:	08 95       	ret

0001e7c6 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
   1e7c6:	80 91 92 01 	lds	r24, 0x0192
   1e7ca:	88 23       	and	r24, r24
   1e7cc:	8c f4       	brge	.+34     	; 0x1e7f0 <Endpoint_ClearStatusStage+0x2a>
   1e7ce:	03 c0       	rjmp	.+6      	; 0x1e7d6 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e7d0:	8e b3       	in	r24, 0x1e	; 30
   1e7d2:	88 23       	and	r24, r24
   1e7d4:	b1 f0       	breq	.+44     	; 0x1e802 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e7d6:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
   1e7da:	82 ff       	sbrs	r24, 2
   1e7dc:	f9 cf       	rjmp	.-14     	; 0x1e7d0 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e7de:	80 91 e8 00 	lds	r24, 0x00E8
   1e7e2:	8b 77       	andi	r24, 0x7B	; 123
   1e7e4:	80 93 e8 00 	sts	0x00E8, r24
   1e7e8:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e7ea:	8e b3       	in	r24, 0x1e	; 30
   1e7ec:	88 23       	and	r24, r24
   1e7ee:	49 f0       	breq	.+18     	; 0x1e802 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e7f0:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
   1e7f4:	80 ff       	sbrs	r24, 0
   1e7f6:	f9 cf       	rjmp	.-14     	; 0x1e7ea <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e7f8:	80 91 e8 00 	lds	r24, 0x00E8
   1e7fc:	8e 77       	andi	r24, 0x7E	; 126
   1e7fe:	80 93 e8 00 	sts	0x00E8, r24
   1e802:	08 95       	ret

0001e804 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
   1e804:	50 d0       	rcall	.+160    	; 0x1e8a6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1e806:	57 d0       	rcall	.+174    	; 0x1e8b6 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
   1e808:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
   1e80c:	98 2f       	mov	r25, r24
   1e80e:	9f 77       	andi	r25, 0x7F	; 127
   1e810:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
   1e814:	80 68       	ori	r24, 0x80	; 128
   1e816:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
   1e81a:	8c e0       	ldi	r24, 0x0C	; 12
   1e81c:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
   1e81e:	89 b5       	in	r24, 0x29	; 41
   1e820:	82 60       	ori	r24, 0x02	; 2
   1e822:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
   1e824:	09 b4       	in	r0, 0x29	; 41
   1e826:	00 fe       	sbrs	r0, 0
   1e828:	fd cf       	rjmp	.-6      	; 0x1e824 <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
   1e82a:	80 91 d8 00 	lds	r24, 0x00D8
   1e82e:	8f 7d       	andi	r24, 0xDF	; 223
   1e830:	80 93 d8 00 	sts	0x00D8, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
   1e834:	80 91 d7 00 	lds	r24, 0x00D7
   1e838:	80 68       	ori	r24, 0x80	; 128
   1e83a:	80 93 d7 00 	sts	0x00D7, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
   1e83e:	1e ba       	out	0x1e, r1	; 30
	USB_ConfigurationNumber  = 0;
   1e840:	10 92 90 01 	sts	0x0190, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
   1e844:	80 91 e0 00 	lds	r24, 0x00E0
   1e848:	8b 7f       	andi	r24, 0xFB	; 251
   1e84a:	80 93 e0 00 	sts	0x00E0, r24
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  USB_Device_SetLowSpeed();
	else
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUS);
   1e84e:	80 91 d8 00 	lds	r24, 0x00D8
   1e852:	81 60       	ori	r24, 0x01	; 1
   1e854:	80 93 d8 00 	sts	0x00D8, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
   1e858:	80 e0       	ldi	r24, 0x00	; 0
   1e85a:	60 e0       	ldi	r22, 0x00	; 0
   1e85c:	42 e0       	ldi	r20, 0x02	; 2
   1e85e:	a0 df       	rcall	.-192    	; 0x1e7a0 <Endpoint_ConfigureEndpoint_Prv>

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
							   ENDPOINT_BANK_SINGLE);

	USB_INT_Clear(USB_INT_SUSPI);
   1e860:	80 91 e1 00 	lds	r24, 0x00E1
   1e864:	8e 7f       	andi	r24, 0xFE	; 254
   1e866:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPI);
   1e86a:	80 91 e2 00 	lds	r24, 0x00E2
   1e86e:	81 60       	ori	r24, 0x01	; 1
   1e870:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Enable(USB_INT_EORSTI);
   1e874:	80 91 e2 00 	lds	r24, 0x00E2
   1e878:	88 60       	ori	r24, 0x08	; 8
   1e87a:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
   1e87e:	80 91 e0 00 	lds	r24, 0x00E0
   1e882:	8e 7f       	andi	r24, 0xFE	; 254
   1e884:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
   1e888:	80 91 d8 00 	lds	r24, 0x00D8
   1e88c:	80 61       	ori	r24, 0x10	; 16
   1e88e:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
   1e892:	08 95       	ret

0001e894 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
   1e894:	e7 ed       	ldi	r30, 0xD7	; 215
   1e896:	f0 e0       	ldi	r31, 0x00	; 0
   1e898:	80 81       	ld	r24, Z
   1e89a:	81 60       	ori	r24, 0x01	; 1
   1e89c:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
   1e89e:	81 e0       	ldi	r24, 0x01	; 1
   1e8a0:	80 93 91 01 	sts	0x0191, r24

	USB_ResetInterface();
}
   1e8a4:	af cf       	rjmp	.-162    	; 0x1e804 <USB_ResetInterface>

0001e8a6 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
   1e8a6:	e8 ed       	ldi	r30, 0xD8	; 216
   1e8a8:	f0 e0       	ldi	r31, 0x00	; 0
   1e8aa:	80 81       	ld	r24, Z
   1e8ac:	8c 7f       	andi	r24, 0xFC	; 252
   1e8ae:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
   1e8b0:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
   1e8b4:	08 95       	ret

0001e8b6 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
   1e8b6:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
   1e8ba:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
   1e8be:	08 95       	ret

0001e8c0 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
   1e8c0:	1f 92       	push	r1
   1e8c2:	0f 92       	push	r0
   1e8c4:	0f b6       	in	r0, 0x3f	; 63
   1e8c6:	0f 92       	push	r0
   1e8c8:	0b b6       	in	r0, 0x3b	; 59
   1e8ca:	0f 92       	push	r0
   1e8cc:	11 24       	eor	r1, r1
   1e8ce:	2f 93       	push	r18
   1e8d0:	3f 93       	push	r19
   1e8d2:	4f 93       	push	r20
   1e8d4:	5f 93       	push	r21
   1e8d6:	6f 93       	push	r22
   1e8d8:	7f 93       	push	r23
   1e8da:	8f 93       	push	r24
   1e8dc:	9f 93       	push	r25
   1e8de:	af 93       	push	r26
   1e8e0:	bf 93       	push	r27
   1e8e2:	ef 93       	push	r30
   1e8e4:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
   1e8e6:	80 91 da 00 	lds	r24, 0x00DA
   1e8ea:	80 ff       	sbrs	r24, 0
   1e8ec:	13 c0       	rjmp	.+38     	; 0x1e914 <__vector_10+0x54>
   1e8ee:	80 91 d8 00 	lds	r24, 0x00D8
   1e8f2:	80 ff       	sbrs	r24, 0
   1e8f4:	0f c0       	rjmp	.+30     	; 0x1e914 <__vector_10+0x54>
	{
		USB_INT_Clear(USB_INT_VBUS);
   1e8f6:	80 91 da 00 	lds	r24, 0x00DA
   1e8fa:	8e 7f       	andi	r24, 0xFE	; 254
   1e8fc:	80 93 da 00 	sts	0x00DA, r24
				 *  \note This function is not available on some AVR models which do not support hardware VBUS monitoring.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
   1e900:	80 91 d9 00 	lds	r24, 0x00D9

		if (USB_VBUS_GetStatus())
   1e904:	80 ff       	sbrs	r24, 0
   1e906:	04 c0       	rjmp	.+8      	; 0x1e910 <__vector_10+0x50>
		{
			USB_DeviceState = DEVICE_STATE_Powered;
   1e908:	81 e0       	ldi	r24, 0x01	; 1
   1e90a:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
   1e90c:	9c d1       	rcall	.+824    	; 0x1ec46 <USB_Event_Stub>
   1e90e:	02 c0       	rjmp	.+4      	; 0x1e914 <__vector_10+0x54>
		}
		else
		{
			USB_DeviceState = DEVICE_STATE_Unattached;
   1e910:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
   1e912:	99 d1       	rcall	.+818    	; 0x1ec46 <USB_Event_Stub>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
   1e914:	80 91 e1 00 	lds	r24, 0x00E1
   1e918:	80 ff       	sbrs	r24, 0
   1e91a:	1c c0       	rjmp	.+56     	; 0x1e954 <__vector_10+0x94>
   1e91c:	80 91 e2 00 	lds	r24, 0x00E2
   1e920:	80 ff       	sbrs	r24, 0
   1e922:	18 c0       	rjmp	.+48     	; 0x1e954 <__vector_10+0x94>
	{
		USB_INT_Clear(USB_INT_SUSPI);
   1e924:	80 91 e1 00 	lds	r24, 0x00E1
   1e928:	8e 7f       	andi	r24, 0xFE	; 254
   1e92a:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPI);
   1e92e:	80 91 e2 00 	lds	r24, 0x00E2
   1e932:	8e 7f       	andi	r24, 0xFE	; 254
   1e934:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
   1e938:	80 91 e2 00 	lds	r24, 0x00E2
   1e93c:	80 61       	ori	r24, 0x10	; 16
   1e93e:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
   1e942:	80 91 d8 00 	lds	r24, 0x00D8
   1e946:	80 62       	ori	r24, 0x20	; 32
   1e948:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
   1e94c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
   1e94e:	85 e0       	ldi	r24, 0x05	; 5
   1e950:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
   1e952:	79 d1       	rcall	.+754    	; 0x1ec46 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
   1e954:	80 91 e1 00 	lds	r24, 0x00E1
   1e958:	84 ff       	sbrs	r24, 4
   1e95a:	2d c0       	rjmp	.+90     	; 0x1e9b6 <__vector_10+0xf6>
   1e95c:	80 91 e2 00 	lds	r24, 0x00E2
   1e960:	84 ff       	sbrs	r24, 4
   1e962:	29 c0       	rjmp	.+82     	; 0x1e9b6 <__vector_10+0xf6>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
   1e964:	8c e0       	ldi	r24, 0x0C	; 12
   1e966:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
   1e968:	89 b5       	in	r24, 0x29	; 41
   1e96a:	82 60       	ori	r24, 0x02	; 2
   1e96c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
   1e96e:	09 b4       	in	r0, 0x29	; 41
   1e970:	00 fe       	sbrs	r0, 0
   1e972:	fd cf       	rjmp	.-6      	; 0x1e96e <__vector_10+0xae>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
   1e974:	80 91 d8 00 	lds	r24, 0x00D8
   1e978:	8f 7d       	andi	r24, 0xDF	; 223
   1e97a:	80 93 d8 00 	sts	0x00D8, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUPI);
   1e97e:	80 91 e1 00 	lds	r24, 0x00E1
   1e982:	8f 7e       	andi	r24, 0xEF	; 239
   1e984:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUPI);
   1e988:	80 91 e2 00 	lds	r24, 0x00E2
   1e98c:	8f 7e       	andi	r24, 0xEF	; 239
   1e98e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPI);
   1e992:	80 91 e2 00 	lds	r24, 0x00E2
   1e996:	81 60       	ori	r24, 0x01	; 1
   1e998:	80 93 e2 00 	sts	0x00E2, r24

		if (USB_ConfigurationNumber)
   1e99c:	80 91 90 01 	lds	r24, 0x0190
   1e9a0:	88 23       	and	r24, r24
   1e9a2:	31 f4       	brne	.+12     	; 0x1e9b0 <__vector_10+0xf0>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1e9a4:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1e9a8:	87 fd       	sbrc	r24, 7
   1e9aa:	02 c0       	rjmp	.+4      	; 0x1e9b0 <__vector_10+0xf0>
   1e9ac:	81 e0       	ldi	r24, 0x01	; 1
   1e9ae:	01 c0       	rjmp	.+2      	; 0x1e9b2 <__vector_10+0xf2>
   1e9b0:	84 e0       	ldi	r24, 0x04	; 4
   1e9b2:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
   1e9b4:	48 d1       	rcall	.+656    	; 0x1ec46 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
   1e9b6:	80 91 e1 00 	lds	r24, 0x00E1
   1e9ba:	83 ff       	sbrs	r24, 3
   1e9bc:	21 c0       	rjmp	.+66     	; 0x1ea00 <__vector_10+0x140>
   1e9be:	80 91 e2 00 	lds	r24, 0x00E2
   1e9c2:	83 ff       	sbrs	r24, 3
   1e9c4:	1d c0       	rjmp	.+58     	; 0x1ea00 <__vector_10+0x140>
	{
		USB_INT_Clear(USB_INT_EORSTI);
   1e9c6:	80 91 e1 00 	lds	r24, 0x00E1
   1e9ca:	87 7f       	andi	r24, 0xF7	; 247
   1e9cc:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
   1e9d0:	82 e0       	ldi	r24, 0x02	; 2
   1e9d2:	8e bb       	out	0x1e, r24	; 30
		USB_ConfigurationNumber = 0;
   1e9d4:	10 92 90 01 	sts	0x0190, r1

		USB_INT_Clear(USB_INT_SUSPI);
   1e9d8:	80 91 e1 00 	lds	r24, 0x00E1
   1e9dc:	8e 7f       	andi	r24, 0xFE	; 254
   1e9de:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPI);
   1e9e2:	80 91 e2 00 	lds	r24, 0x00E2
   1e9e6:	8e 7f       	andi	r24, 0xFE	; 254
   1e9e8:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
   1e9ec:	80 91 e2 00 	lds	r24, 0x00E2
   1e9f0:	80 61       	ori	r24, 0x10	; 16
   1e9f2:	80 93 e2 00 	sts	0x00E2, r24
   1e9f6:	80 e0       	ldi	r24, 0x00	; 0
   1e9f8:	60 e0       	ldi	r22, 0x00	; 0
   1e9fa:	42 e0       	ldi	r20, 0x02	; 2
   1e9fc:	d1 de       	rcall	.-606    	; 0x1e7a0 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
   1e9fe:	23 d1       	rcall	.+582    	; 0x1ec46 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
   1ea00:	ff 91       	pop	r31
   1ea02:	ef 91       	pop	r30
   1ea04:	bf 91       	pop	r27
   1ea06:	af 91       	pop	r26
   1ea08:	9f 91       	pop	r25
   1ea0a:	8f 91       	pop	r24
   1ea0c:	7f 91       	pop	r23
   1ea0e:	6f 91       	pop	r22
   1ea10:	5f 91       	pop	r21
   1ea12:	4f 91       	pop	r20
   1ea14:	3f 91       	pop	r19
   1ea16:	2f 91       	pop	r18
   1ea18:	0f 90       	pop	r0
   1ea1a:	0b be       	out	0x3b, r0	; 59
   1ea1c:	0f 90       	pop	r0
   1ea1e:	0f be       	out	0x3f, r0	; 63
   1ea20:	0f 90       	pop	r0
   1ea22:	1f 90       	pop	r1
   1ea24:	18 95       	reti

0001ea26 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   1ea26:	0f 93       	push	r16
   1ea28:	1f 93       	push	r17
   1ea2a:	df 93       	push	r29
   1ea2c:	cf 93       	push	r28
   1ea2e:	00 d0       	rcall	.+0      	; 0x1ea30 <USB_Device_ProcessControlRequest+0xa>
   1ea30:	cd b7       	in	r28, 0x3d	; 61
   1ea32:	de b7       	in	r29, 0x3e	; 62
   1ea34:	e2 e9       	ldi	r30, 0x92	; 146
   1ea36:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
   1ea38:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
   1ea3c:	81 93       	st	Z+, r24

void USB_Device_ProcessControlRequest(void)
{
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
   1ea3e:	81 e0       	ldi	r24, 0x01	; 1
   1ea40:	ea 39       	cpi	r30, 0x9A	; 154
   1ea42:	f8 07       	cpc	r31, r24
   1ea44:	c9 f7       	brne	.-14     	; 0x1ea38 <USB_Device_ProcessControlRequest+0x12>
	  *(RequestHeader++) = Endpoint_Read_Byte();

	EVENT_USB_Device_ControlRequest();
   1ea46:	15 de       	rcall	.-982    	; 0x1e672 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ea48:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
   1ea4c:	83 ff       	sbrs	r24, 3
   1ea4e:	e6 c0       	rjmp	.+460    	; 0x1ec1c <USB_Device_ProcessControlRequest+0x1f6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
   1ea50:	80 91 92 01 	lds	r24, 0x0192

		switch (USB_ControlRequest.bRequest)
   1ea54:	90 91 93 01 	lds	r25, 0x0193
   1ea58:	95 30       	cpi	r25, 0x05	; 5
   1ea5a:	09 f4       	brne	.+2      	; 0x1ea5e <USB_Device_ProcessControlRequest+0x38>
   1ea5c:	6d c0       	rjmp	.+218    	; 0x1eb38 <USB_Device_ProcessControlRequest+0x112>
   1ea5e:	96 30       	cpi	r25, 0x06	; 6
   1ea60:	40 f4       	brcc	.+16     	; 0x1ea72 <USB_Device_ProcessControlRequest+0x4c>
   1ea62:	91 30       	cpi	r25, 0x01	; 1
   1ea64:	81 f1       	breq	.+96     	; 0x1eac6 <USB_Device_ProcessControlRequest+0xa0>
   1ea66:	91 30       	cpi	r25, 0x01	; 1
   1ea68:	70 f0       	brcs	.+28     	; 0x1ea86 <USB_Device_ProcessControlRequest+0x60>
   1ea6a:	93 30       	cpi	r25, 0x03	; 3
   1ea6c:	09 f0       	breq	.+2      	; 0x1ea70 <USB_Device_ProcessControlRequest+0x4a>
   1ea6e:	d6 c0       	rjmp	.+428    	; 0x1ec1c <USB_Device_ProcessControlRequest+0x1f6>
   1ea70:	2a c0       	rjmp	.+84     	; 0x1eac6 <USB_Device_ProcessControlRequest+0xa0>
   1ea72:	98 30       	cpi	r25, 0x08	; 8
   1ea74:	09 f4       	brne	.+2      	; 0x1ea78 <USB_Device_ProcessControlRequest+0x52>
   1ea76:	a5 c0       	rjmp	.+330    	; 0x1ebc2 <USB_Device_ProcessControlRequest+0x19c>
   1ea78:	99 30       	cpi	r25, 0x09	; 9
   1ea7a:	09 f4       	brne	.+2      	; 0x1ea7e <USB_Device_ProcessControlRequest+0x58>
   1ea7c:	b4 c0       	rjmp	.+360    	; 0x1ebe6 <USB_Device_ProcessControlRequest+0x1c0>
   1ea7e:	96 30       	cpi	r25, 0x06	; 6
   1ea80:	09 f0       	breq	.+2      	; 0x1ea84 <USB_Device_ProcessControlRequest+0x5e>
   1ea82:	cc c0       	rjmp	.+408    	; 0x1ec1c <USB_Device_ProcessControlRequest+0x1f6>
   1ea84:	7e c0       	rjmp	.+252    	; 0x1eb82 <USB_Device_ProcessControlRequest+0x15c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1ea86:	80 38       	cpi	r24, 0x80	; 128
   1ea88:	09 f4       	brne	.+2      	; 0x1ea8c <USB_Device_ProcessControlRequest+0x66>
   1ea8a:	c8 c0       	rjmp	.+400    	; 0x1ec1c <USB_Device_ProcessControlRequest+0x1f6>
   1ea8c:	82 38       	cpi	r24, 0x82	; 130
   1ea8e:	09 f0       	breq	.+2      	; 0x1ea92 <USB_Device_ProcessControlRequest+0x6c>
   1ea90:	c5 c0       	rjmp	.+394    	; 0x1ec1c <USB_Device_ProcessControlRequest+0x1f6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1ea92:	80 91 96 01 	lds	r24, 0x0196
   1ea96:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1ea98:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1ea9c:	80 91 eb 00 	lds	r24, 0x00EB
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1eaa0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1eaa4:	20 91 e8 00 	lds	r18, 0x00E8
   1eaa8:	27 7f       	andi	r18, 0xF7	; 247
   1eaaa:	20 93 e8 00 	sts	0x00E8, r18
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
   1eaae:	90 e0       	ldi	r25, 0x00	; 0
   1eab0:	25 e0       	ldi	r18, 0x05	; 5
   1eab2:	96 95       	lsr	r25
   1eab4:	87 95       	ror	r24
   1eab6:	2a 95       	dec	r18
   1eab8:	e1 f7       	brne	.-8      	; 0x1eab2 <USB_Device_ProcessControlRequest+0x8c>
   1eaba:	81 70       	andi	r24, 0x01	; 1
   1eabc:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Word >> 8);
   1eac0:	10 92 f1 00 	sts	0x00F1, r1
   1eac4:	89 c0       	rjmp	.+274    	; 0x1ebd8 <USB_Device_ProcessControlRequest+0x1b2>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1eac6:	88 23       	and	r24, r24
   1eac8:	19 f0       	breq	.+6      	; 0x1ead0 <USB_Device_ProcessControlRequest+0xaa>
   1eaca:	82 30       	cpi	r24, 0x02	; 2
   1eacc:	09 f0       	breq	.+2      	; 0x1ead0 <USB_Device_ProcessControlRequest+0xaa>
   1eace:	a6 c0       	rjmp	.+332    	; 0x1ec1c <USB_Device_ProcessControlRequest+0x1f6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
   1ead0:	8f 71       	andi	r24, 0x1F	; 31
   1ead2:	82 30       	cpi	r24, 0x02	; 2
   1ead4:	09 f0       	breq	.+2      	; 0x1ead8 <USB_Device_ProcessControlRequest+0xb2>
   1ead6:	a2 c0       	rjmp	.+324    	; 0x1ec1c <USB_Device_ProcessControlRequest+0x1f6>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
   1ead8:	80 91 94 01 	lds	r24, 0x0194
   1eadc:	88 23       	and	r24, r24
   1eade:	31 f5       	brne	.+76     	; 0x1eb2c <USB_Device_ProcessControlRequest+0x106>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1eae0:	20 91 96 01 	lds	r18, 0x0196
   1eae4:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
   1eae6:	09 f4       	brne	.+2      	; 0x1eaea <USB_Device_ProcessControlRequest+0xc4>
   1eae8:	99 c0       	rjmp	.+306    	; 0x1ec1c <USB_Device_ProcessControlRequest+0x1f6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1eaea:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
   1eaee:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
   1eaf2:	80 ff       	sbrs	r24, 0
   1eaf4:	1b c0       	rjmp	.+54     	; 0x1eb2c <USB_Device_ProcessControlRequest+0x106>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
   1eaf6:	93 30       	cpi	r25, 0x03	; 3
   1eaf8:	21 f4       	brne	.+8      	; 0x1eb02 <USB_Device_ProcessControlRequest+0xdc>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1eafa:	80 91 eb 00 	lds	r24, 0x00EB
   1eafe:	80 62       	ori	r24, 0x20	; 32
   1eb00:	13 c0       	rjmp	.+38     	; 0x1eb28 <USB_Device_ProcessControlRequest+0x102>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1eb02:	80 91 eb 00 	lds	r24, 0x00EB
   1eb06:	80 61       	ori	r24, 0x10	; 16
   1eb08:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
   1eb0c:	81 e0       	ldi	r24, 0x01	; 1
   1eb0e:	90 e0       	ldi	r25, 0x00	; 0
   1eb10:	02 c0       	rjmp	.+4      	; 0x1eb16 <USB_Device_ProcessControlRequest+0xf0>
   1eb12:	88 0f       	add	r24, r24
   1eb14:	99 1f       	adc	r25, r25
   1eb16:	2a 95       	dec	r18
   1eb18:	e2 f7       	brpl	.-8      	; 0x1eb12 <USB_Device_ProcessControlRequest+0xec>
   1eb1a:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
   1eb1e:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1eb22:	80 91 eb 00 	lds	r24, 0x00EB
   1eb26:	88 60       	ori	r24, 0x08	; 8
   1eb28:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1eb2c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1eb30:	80 91 e8 00 	lds	r24, 0x00E8
   1eb34:	87 7f       	andi	r24, 0xF7	; 247
   1eb36:	53 c0       	rjmp	.+166    	; 0x1ebde <USB_Device_ProcessControlRequest+0x1b8>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1eb38:	88 23       	and	r24, r24
   1eb3a:	09 f0       	breq	.+2      	; 0x1eb3e <USB_Device_ProcessControlRequest+0x118>
   1eb3c:	6f c0       	rjmp	.+222    	; 0x1ec1c <USB_Device_ProcessControlRequest+0x1f6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
   1eb3e:	10 91 94 01 	lds	r17, 0x0194
   1eb42:	1f 77       	andi	r17, 0x7F	; 127

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
   1eb44:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   1eb46:	f8 94       	cli
   1eb48:	80 91 e8 00 	lds	r24, 0x00E8
   1eb4c:	87 7f       	andi	r24, 0xF7	; 247
   1eb4e:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearSETUP();

		Endpoint_ClearStatusStage();
   1eb52:	39 de       	rcall	.-910    	; 0x1e7c6 <Endpoint_ClearStatusStage>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1eb54:	80 91 e8 00 	lds	r24, 0x00E8

		while (!(Endpoint_IsINReady()));
   1eb58:	80 ff       	sbrs	r24, 0
   1eb5a:	fc cf       	rjmp	.-8      	; 0x1eb54 <USB_Device_ProcessControlRequest+0x12e>

		USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
   1eb5c:	11 23       	and	r17, r17
   1eb5e:	11 f4       	brne	.+4      	; 0x1eb64 <USB_Device_ProcessControlRequest+0x13e>
   1eb60:	82 e0       	ldi	r24, 0x02	; 2
   1eb62:	01 c0       	rjmp	.+2      	; 0x1eb66 <USB_Device_ProcessControlRequest+0x140>
   1eb64:	83 e0       	ldi	r24, 0x03	; 3
   1eb66:	8e bb       	out	0x1e, r24	; 30
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
   1eb68:	80 91 e3 00 	lds	r24, 0x00E3
   1eb6c:	80 78       	andi	r24, 0x80	; 128
   1eb6e:	18 2b       	or	r17, r24
   1eb70:	10 93 e3 00 	sts	0x00E3, r17
				UDADDR |= (1 << ADDEN);
   1eb74:	80 91 e3 00 	lds	r24, 0x00E3
   1eb78:	80 68       	ori	r24, 0x80	; 128
   1eb7a:	80 93 e3 00 	sts	0x00E3, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
   1eb7e:	0f bf       	out	0x3f, r16	; 63
    __asm__ volatile ("" ::: "memory");
   1eb80:	4d c0       	rjmp	.+154    	; 0x1ec1c <USB_Device_ProcessControlRequest+0x1f6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1eb82:	80 58       	subi	r24, 0x80	; 128
   1eb84:	82 30       	cpi	r24, 0x02	; 2
   1eb86:	08 f0       	brcs	.+2      	; 0x1eb8a <USB_Device_ProcessControlRequest+0x164>
   1eb88:	49 c0       	rjmp	.+146    	; 0x1ec1c <USB_Device_ProcessControlRequest+0x1f6>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
   1eb8a:	80 91 94 01 	lds	r24, 0x0194
   1eb8e:	90 91 95 01 	lds	r25, 0x0195
   1eb92:	60 91 96 01 	lds	r22, 0x0196
   1eb96:	ae 01       	movw	r20, r28
   1eb98:	4f 5f       	subi	r20, 0xFF	; 255
   1eb9a:	5f 4f       	sbci	r21, 0xFF	; 255
   1eb9c:	d8 dd       	rcall	.-1104   	; 0x1e74e <CALLBACK_USB_GetDescriptor>
   1eb9e:	bc 01       	movw	r22, r24
   1eba0:	00 97       	sbiw	r24, 0x00	; 0
   1eba2:	09 f4       	brne	.+2      	; 0x1eba6 <USB_Device_ProcessControlRequest+0x180>
   1eba4:	3b c0       	rjmp	.+118    	; 0x1ec1c <USB_Device_ProcessControlRequest+0x1f6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1eba6:	80 91 e8 00 	lds	r24, 0x00E8
   1ebaa:	87 7f       	andi	r24, 0xF7	; 247
   1ebac:	80 93 e8 00 	sts	0x00E8, r24
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
   1ebb0:	89 81       	ldd	r24, Y+1	; 0x01
   1ebb2:	9a 81       	ldd	r25, Y+2	; 0x02
   1ebb4:	49 d0       	rcall	.+146    	; 0x1ec48 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1ebb6:	80 91 e8 00 	lds	r24, 0x00E8
   1ebba:	8b 77       	andi	r24, 0x7B	; 123
   1ebbc:	80 93 e8 00 	sts	0x00E8, r24
   1ebc0:	2d c0       	rjmp	.+90     	; 0x1ec1c <USB_Device_ProcessControlRequest+0x1f6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
   1ebc2:	80 38       	cpi	r24, 0x80	; 128
   1ebc4:	59 f5       	brne	.+86     	; 0x1ec1c <USB_Device_ProcessControlRequest+0x1f6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ebc6:	80 91 e8 00 	lds	r24, 0x00E8
   1ebca:	87 7f       	andi	r24, 0xF7	; 247
   1ebcc:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
   1ebd0:	80 91 90 01 	lds	r24, 0x0190
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
   1ebd4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1ebd8:	80 91 e8 00 	lds	r24, 0x00E8
   1ebdc:	8e 77       	andi	r24, 0x7E	; 126
   1ebde:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
   1ebe2:	f1 dd       	rcall	.-1054   	; 0x1e7c6 <Endpoint_ClearStatusStage>
   1ebe4:	1b c0       	rjmp	.+54     	; 0x1ec1c <USB_Device_ProcessControlRequest+0x1f6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1ebe6:	88 23       	and	r24, r24
   1ebe8:	c9 f4       	brne	.+50     	; 0x1ec1c <USB_Device_ProcessControlRequest+0x1f6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
   1ebea:	90 91 94 01 	lds	r25, 0x0194
   1ebee:	92 30       	cpi	r25, 0x02	; 2
   1ebf0:	a8 f4       	brcc	.+42     	; 0x1ec1c <USB_Device_ProcessControlRequest+0x1f6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ebf2:	80 91 e8 00 	lds	r24, 0x00E8
   1ebf6:	87 7f       	andi	r24, 0xF7	; 247
   1ebf8:	80 93 e8 00 	sts	0x00E8, r24
	}
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
   1ebfc:	90 93 90 01 	sts	0x0190, r25

	Endpoint_ClearStatusStage();
   1ec00:	e2 dd       	rcall	.-1084   	; 0x1e7c6 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
   1ec02:	80 91 90 01 	lds	r24, 0x0190
   1ec06:	88 23       	and	r24, r24
   1ec08:	31 f4       	brne	.+12     	; 0x1ec16 <USB_Device_ProcessControlRequest+0x1f0>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1ec0a:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1ec0e:	87 fd       	sbrc	r24, 7
   1ec10:	02 c0       	rjmp	.+4      	; 0x1ec16 <USB_Device_ProcessControlRequest+0x1f0>
   1ec12:	81 e0       	ldi	r24, 0x01	; 1
   1ec14:	01 c0       	rjmp	.+2      	; 0x1ec18 <USB_Device_ProcessControlRequest+0x1f2>
   1ec16:	84 e0       	ldi	r24, 0x04	; 4
   1ec18:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
   1ec1a:	59 dd       	rcall	.-1358   	; 0x1e6ce <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ec1c:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
   1ec20:	83 ff       	sbrs	r24, 3
   1ec22:	0a c0       	rjmp	.+20     	; 0x1ec38 <USB_Device_ProcessControlRequest+0x212>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1ec24:	80 91 eb 00 	lds	r24, 0x00EB
   1ec28:	80 62       	ori	r24, 0x20	; 32
   1ec2a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ec2e:	80 91 e8 00 	lds	r24, 0x00E8
   1ec32:	87 7f       	andi	r24, 0xF7	; 247
   1ec34:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
   1ec38:	0f 90       	pop	r0
   1ec3a:	0f 90       	pop	r0
   1ec3c:	cf 91       	pop	r28
   1ec3e:	df 91       	pop	r29
   1ec40:	1f 91       	pop	r17
   1ec42:	0f 91       	pop	r16
   1ec44:	08 95       	ret

0001ec46 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
   1ec46:	08 95       	ret

0001ec48 <Endpoint_Write_Control_Stream_LE>:
   1ec48:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
   1ec4a:	40 91 98 01 	lds	r20, 0x0198
   1ec4e:	50 91 99 01 	lds	r21, 0x0199
   1ec52:	46 17       	cp	r20, r22
   1ec54:	57 07       	cpc	r21, r23
   1ec56:	18 f4       	brcc	.+6      	; 0x1ec5e <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
   1ec58:	f9 01       	movw	r30, r18
   1ec5a:	90 e0       	ldi	r25, 0x00	; 0
   1ec5c:	3c c0       	rjmp	.+120    	; 0x1ecd6 <Endpoint_Write_Control_Stream_LE+0x8e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
   1ec5e:	61 15       	cp	r22, r1
   1ec60:	71 05       	cpc	r23, r1
   1ec62:	11 f0       	breq	.+4      	; 0x1ec68 <Endpoint_Write_Control_Stream_LE+0x20>
   1ec64:	ab 01       	movw	r20, r22
   1ec66:	f8 cf       	rjmp	.-16     	; 0x1ec58 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1ec68:	80 91 e8 00 	lds	r24, 0x00E8
   1ec6c:	8e 77       	andi	r24, 0x7E	; 126
   1ec6e:	80 93 e8 00 	sts	0x00E8, r24
   1ec72:	40 e0       	ldi	r20, 0x00	; 0
   1ec74:	50 e0       	ldi	r21, 0x00	; 0
   1ec76:	f0 cf       	rjmp	.-32     	; 0x1ec58 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1ec78:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1ec7a:	88 23       	and	r24, r24
   1ec7c:	e9 f1       	breq	.+122    	; 0x1ecf8 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1ec7e:	85 30       	cpi	r24, 0x05	; 5
   1ec80:	e9 f1       	breq	.+122    	; 0x1ecfc <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ec82:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1ec86:	83 ff       	sbrs	r24, 3
   1ec88:	02 c0       	rjmp	.+4      	; 0x1ec8e <Endpoint_Write_Control_Stream_LE+0x46>
   1ec8a:	81 e0       	ldi	r24, 0x01	; 1
   1ec8c:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ec8e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
   1ec92:	82 fd       	sbrc	r24, 2
   1ec94:	2b c0       	rjmp	.+86     	; 0x1ecec <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ec96:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
   1ec9a:	80 ff       	sbrs	r24, 0
   1ec9c:	1c c0       	rjmp	.+56     	; 0x1ecd6 <Endpoint_Write_Control_Stream_LE+0x8e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1ec9e:	20 91 f2 00 	lds	r18, 0x00F2
   1eca2:	30 91 f3 00 	lds	r19, 0x00F3
   1eca6:	07 c0       	rjmp	.+14     	; 0x1ecb6 <Endpoint_Write_Control_Stream_LE+0x6e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1eca8:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
   1ecaa:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
   1ecae:	41 50       	subi	r20, 0x01	; 1
   1ecb0:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
   1ecb2:	2f 5f       	subi	r18, 0xFF	; 255
   1ecb4:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
   1ecb6:	41 15       	cp	r20, r1
   1ecb8:	51 05       	cpc	r21, r1
   1ecba:	19 f0       	breq	.+6      	; 0x1ecc2 <Endpoint_Write_Control_Stream_LE+0x7a>
   1ecbc:	28 30       	cpi	r18, 0x08	; 8
   1ecbe:	31 05       	cpc	r19, r1
   1ecc0:	98 f3       	brcs	.-26     	; 0x1eca8 <Endpoint_Write_Control_Stream_LE+0x60>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
   1ecc2:	90 e0       	ldi	r25, 0x00	; 0
   1ecc4:	28 30       	cpi	r18, 0x08	; 8
   1ecc6:	31 05       	cpc	r19, r1
   1ecc8:	09 f4       	brne	.+2      	; 0x1eccc <Endpoint_Write_Control_Stream_LE+0x84>
   1ecca:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1eccc:	80 91 e8 00 	lds	r24, 0x00E8
   1ecd0:	8e 77       	andi	r24, 0x7E	; 126
   1ecd2:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1ecd6:	41 15       	cp	r20, r1
   1ecd8:	51 05       	cpc	r21, r1
   1ecda:	71 f6       	brne	.-100    	; 0x1ec78 <Endpoint_Write_Control_Stream_LE+0x30>
   1ecdc:	99 23       	and	r25, r25
   1ecde:	61 f6       	brne	.-104    	; 0x1ec78 <Endpoint_Write_Control_Stream_LE+0x30>
   1ece0:	05 c0       	rjmp	.+10     	; 0x1ecec <Endpoint_Write_Control_Stream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1ece2:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1ece4:	88 23       	and	r24, r24
   1ece6:	41 f0       	breq	.+16     	; 0x1ecf8 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1ece8:	85 30       	cpi	r24, 0x05	; 5
   1ecea:	41 f0       	breq	.+16     	; 0x1ecfc <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ecec:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
   1ecf0:	82 ff       	sbrs	r24, 2
   1ecf2:	f7 cf       	rjmp	.-18     	; 0x1ece2 <Endpoint_Write_Control_Stream_LE+0x9a>
   1ecf4:	80 e0       	ldi	r24, 0x00	; 0
   1ecf6:	08 95       	ret
   1ecf8:	82 e0       	ldi	r24, 0x02	; 2
   1ecfa:	08 95       	ret
   1ecfc:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1ecfe:	08 95       	ret

0001ed00 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
   1ed00:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
   1ed02:	61 15       	cp	r22, r1
   1ed04:	71 05       	cpc	r23, r1
   1ed06:	29 f4       	brne	.+10     	; 0x1ed12 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1ed08:	80 91 e8 00 	lds	r24, 0x00E8
   1ed0c:	8b 77       	andi	r24, 0x7B	; 123
   1ed0e:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
   1ed12:	f9 01       	movw	r30, r18
   1ed14:	21 c0       	rjmp	.+66     	; 0x1ed58 <Endpoint_Read_Control_Stream_LE+0x58>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1ed16:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1ed18:	88 23       	and	r24, r24
   1ed1a:	69 f1       	breq	.+90     	; 0x1ed76 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1ed1c:	85 30       	cpi	r24, 0x05	; 5
   1ed1e:	69 f1       	breq	.+90     	; 0x1ed7a <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ed20:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1ed24:	83 ff       	sbrs	r24, 3
   1ed26:	02 c0       	rjmp	.+4      	; 0x1ed2c <Endpoint_Read_Control_Stream_LE+0x2c>
   1ed28:	81 e0       	ldi	r24, 0x01	; 1
   1ed2a:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ed2c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
   1ed30:	82 ff       	sbrs	r24, 2
   1ed32:	f1 cf       	rjmp	.-30     	; 0x1ed16 <Endpoint_Read_Control_Stream_LE+0x16>
   1ed34:	06 c0       	rjmp	.+12     	; 0x1ed42 <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
   1ed36:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1ed3a:	81 93       	st	Z+, r24
				Length--;
   1ed3c:	61 50       	subi	r22, 0x01	; 1
   1ed3e:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
   1ed40:	31 f0       	breq	.+12     	; 0x1ed4e <Endpoint_Read_Control_Stream_LE+0x4e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1ed42:	80 91 f2 00 	lds	r24, 0x00F2
   1ed46:	90 91 f3 00 	lds	r25, 0x00F3
   1ed4a:	89 2b       	or	r24, r25
   1ed4c:	a1 f7       	brne	.-24     	; 0x1ed36 <Endpoint_Read_Control_Stream_LE+0x36>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1ed4e:	80 91 e8 00 	lds	r24, 0x00E8
   1ed52:	8b 77       	andi	r24, 0x7B	; 123
   1ed54:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
   1ed58:	61 15       	cp	r22, r1
   1ed5a:	71 05       	cpc	r23, r1
   1ed5c:	e1 f6       	brne	.-72     	; 0x1ed16 <Endpoint_Read_Control_Stream_LE+0x16>
   1ed5e:	05 c0       	rjmp	.+10     	; 0x1ed6a <Endpoint_Read_Control_Stream_LE+0x6a>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1ed60:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1ed62:	88 23       	and	r24, r24
   1ed64:	41 f0       	breq	.+16     	; 0x1ed76 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1ed66:	85 30       	cpi	r24, 0x05	; 5
   1ed68:	41 f0       	breq	.+16     	; 0x1ed7a <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ed6a:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
   1ed6e:	80 ff       	sbrs	r24, 0
   1ed70:	f7 cf       	rjmp	.-18     	; 0x1ed60 <Endpoint_Read_Control_Stream_LE+0x60>
   1ed72:	80 e0       	ldi	r24, 0x00	; 0
   1ed74:	08 95       	ret
   1ed76:	82 e0       	ldi	r24, 0x02	; 2
   1ed78:	08 95       	ret
   1ed7a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1ed7c:	08 95       	ret

0001ed7e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
   1ed7e:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
   1ed80:	8e b3       	in	r24, 0x1e	; 30
   1ed82:	88 23       	and	r24, r24
   1ed84:	61 f0       	breq	.+24     	; 0x1ed9e <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
   1ed86:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1ed8a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ed8e:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
   1ed92:	83 ff       	sbrs	r24, 3
   1ed94:	01 c0       	rjmp	.+2      	; 0x1ed98 <USB_USBTask+0x1a>
		  USB_Device_ProcessControlRequest();
   1ed96:	47 de       	rcall	.-882    	; 0x1ea26 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
   1ed98:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1ed9a:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
   1ed9e:	1f 91       	pop	r17
   1eda0:	08 95       	ret

0001eda2 <__eerd_byte_usb1287>:
   1eda2:	f9 99       	sbic	0x1f, 1	; 31
   1eda4:	fe cf       	rjmp	.-4      	; 0x1eda2 <__eerd_byte_usb1287>
   1eda6:	92 bd       	out	0x22, r25	; 34
   1eda8:	81 bd       	out	0x21, r24	; 33
   1edaa:	f8 9a       	sbi	0x1f, 0	; 31
   1edac:	99 27       	eor	r25, r25
   1edae:	80 b5       	in	r24, 0x20	; 32
   1edb0:	08 95       	ret

0001edb2 <__eewr_byte_usb1287>:
   1edb2:	26 2f       	mov	r18, r22

0001edb4 <__eewr_r18_usb1287>:
   1edb4:	f9 99       	sbic	0x1f, 1	; 31
   1edb6:	fe cf       	rjmp	.-4      	; 0x1edb4 <__eewr_r18_usb1287>
   1edb8:	1f ba       	out	0x1f, r1	; 31
   1edba:	92 bd       	out	0x22, r25	; 34
   1edbc:	81 bd       	out	0x21, r24	; 33
   1edbe:	20 bd       	out	0x20, r18	; 32
   1edc0:	0f b6       	in	r0, 0x3f	; 63
   1edc2:	f8 94       	cli
   1edc4:	fa 9a       	sbi	0x1f, 2	; 31
   1edc6:	f9 9a       	sbi	0x1f, 1	; 31
   1edc8:	0f be       	out	0x3f, r0	; 63
   1edca:	01 96       	adiw	r24, 0x01	; 1
   1edcc:	08 95       	ret

0001edce <_exit>:
   1edce:	f8 94       	cli

0001edd0 <__stop_program>:
   1edd0:	ff cf       	rjmp	.-2      	; 0x1edd0 <__stop_program>
