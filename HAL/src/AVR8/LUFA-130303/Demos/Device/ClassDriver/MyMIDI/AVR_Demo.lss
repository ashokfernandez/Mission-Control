
AVR_Demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000e82  00000f16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080011c  0080011c  00000f32  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00000f34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002aa  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000005a0  00000000  00000000  00001c78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008bd1  00000000  00000000  00002218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002433  00000000  00000000  0000ade9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004209  00000000  00000000  0000d21c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ee0  00000000  00000000  00011428  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003d7e  00000000  00000000  00012308  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005208  00000000  00000000  00016086  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000720  00000000  00000000  0001b28e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b5 c0       	rjmp	.+362    	; 0x16c <__ctors_end>
   2:	00 00       	nop
   4:	ce c0       	rjmp	.+412    	; 0x1a2 <__bad_interrupt>
   6:	00 00       	nop
   8:	cc c0       	rjmp	.+408    	; 0x1a2 <__bad_interrupt>
   a:	00 00       	nop
   c:	ca c0       	rjmp	.+404    	; 0x1a2 <__bad_interrupt>
   e:	00 00       	nop
  10:	c8 c0       	rjmp	.+400    	; 0x1a2 <__bad_interrupt>
  12:	00 00       	nop
  14:	c6 c0       	rjmp	.+396    	; 0x1a2 <__bad_interrupt>
  16:	00 00       	nop
  18:	c4 c0       	rjmp	.+392    	; 0x1a2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c2 c0       	rjmp	.+388    	; 0x1a2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	c0 c0       	rjmp	.+384    	; 0x1a2 <__bad_interrupt>
  22:	00 00       	nop
  24:	be c0       	rjmp	.+380    	; 0x1a2 <__bad_interrupt>
  26:	00 00       	nop
  28:	61 c4       	rjmp	.+2242   	; 0x8ec <__vector_10>
  2a:	00 00       	nop
  2c:	ba c0       	rjmp	.+372    	; 0x1a2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	b8 c0       	rjmp	.+368    	; 0x1a2 <__bad_interrupt>
  32:	00 00       	nop
  34:	b6 c0       	rjmp	.+364    	; 0x1a2 <__bad_interrupt>
  36:	00 00       	nop
  38:	b4 c0       	rjmp	.+360    	; 0x1a2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b2 c0       	rjmp	.+356    	; 0x1a2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	b0 c0       	rjmp	.+352    	; 0x1a2 <__bad_interrupt>
  42:	00 00       	nop
  44:	ae c0       	rjmp	.+348    	; 0x1a2 <__bad_interrupt>
  46:	00 00       	nop
  48:	ac c0       	rjmp	.+344    	; 0x1a2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	aa c0       	rjmp	.+340    	; 0x1a2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	a8 c0       	rjmp	.+336    	; 0x1a2 <__bad_interrupt>
  52:	00 00       	nop
  54:	a6 c0       	rjmp	.+332    	; 0x1a2 <__bad_interrupt>
  56:	00 00       	nop
  58:	a4 c0       	rjmp	.+328    	; 0x1a2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a2 c0       	rjmp	.+324    	; 0x1a2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	a0 c0       	rjmp	.+320    	; 0x1a2 <__bad_interrupt>
  62:	00 00       	nop
  64:	9e c0       	rjmp	.+316    	; 0x1a2 <__bad_interrupt>
  66:	00 00       	nop
  68:	9c c0       	rjmp	.+312    	; 0x1a2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	9a c0       	rjmp	.+308    	; 0x1a2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	98 c0       	rjmp	.+304    	; 0x1a2 <__bad_interrupt>
  72:	00 00       	nop
  74:	96 c0       	rjmp	.+300    	; 0x1a2 <__bad_interrupt>
  76:	00 00       	nop
  78:	94 c0       	rjmp	.+296    	; 0x1a2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	92 c0       	rjmp	.+292    	; 0x1a2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	90 c0       	rjmp	.+288    	; 0x1a2 <__bad_interrupt>
  82:	00 00       	nop
  84:	8e c0       	rjmp	.+284    	; 0x1a2 <__bad_interrupt>
  86:	00 00       	nop
  88:	8c c0       	rjmp	.+280    	; 0x1a2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8a c0       	rjmp	.+276    	; 0x1a2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	88 c0       	rjmp	.+272    	; 0x1a2 <__bad_interrupt>
  92:	00 00       	nop
  94:	86 c0       	rjmp	.+268    	; 0x1a2 <__bad_interrupt>
  96:	00 00       	nop
  98:	84 c0       	rjmp	.+264    	; 0x1a2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	82 c0       	rjmp	.+260    	; 0x1a2 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	80 c0       	rjmp	.+256    	; 0x1a2 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	7e c0       	rjmp	.+252    	; 0x1a2 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	7c c0       	rjmp	.+248    	; 0x1a2 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <ProductString>:
  ac:	20 03 4d 00 69 00 73 00 73 00 69 00 6f 00 6e 00      .M.i.s.s.i.o.n.
  bc:	20 00 43 00 6f 00 6e 00 74 00 72 00 6f 00 6c 00      .C.o.n.t.r.o.l.
  cc:	00 00                                               ..

000000ce <ManufacturerString>:
  ce:	20 03 41 00 73 00 68 00 6f 00 6b 00 20 00 46 00      .A.s.h.o.k. .F.
  de:	65 00 72 00 6e 00 61 00 6e 00 64 00 65 00 7a 00     e.r.n.a.n.d.e.z.
  ee:	00 00                                               ..

000000f0 <LanguageString>:
  f0:	04 03 09 04                                         ....

000000f4 <ConfigurationDescriptor>:
  f4:	09 02 65 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..e.....2.......
 104:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
 114:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
 124:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
 134:	09 24 03 02 04 01 01 01 00 09 05 01 02 40 00 05     .$...........@..
 144:	00 00 05 25 01 01 01 09 05 82 02 40 00 05 00 00     ...%.......@....
 154:	05 25 01 01 03                                      .%...

00000159 <DeviceDescriptor>:
 159:	12 01 10 01 00 00 00 08 eb 03 48 20 01 00 01 02     ..........H ....
 169:	00 01 00                                            ...

0000016c <__ctors_end>:
 16c:	11 24       	eor	r1, r1
 16e:	1f be       	out	0x3f, r1	; 63
 170:	cf ef       	ldi	r28, 0xFF	; 255
 172:	da e0       	ldi	r29, 0x0A	; 10
 174:	de bf       	out	0x3e, r29	; 62
 176:	cd bf       	out	0x3d, r28	; 61

00000178 <__do_copy_data>:
 178:	11 e0       	ldi	r17, 0x01	; 1
 17a:	a0 e0       	ldi	r26, 0x00	; 0
 17c:	b1 e0       	ldi	r27, 0x01	; 1
 17e:	e2 e8       	ldi	r30, 0x82	; 130
 180:	fe e0       	ldi	r31, 0x0E	; 14
 182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x10>
 184:	05 90       	lpm	r0, Z+
 186:	0d 92       	st	X+, r0
 188:	ac 31       	cpi	r26, 0x1C	; 28
 18a:	b1 07       	cpc	r27, r17
 18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0xc>

0000018e <__do_clear_bss>:
 18e:	11 e0       	ldi	r17, 0x01	; 1
 190:	ac e1       	ldi	r26, 0x1C	; 28
 192:	b1 e0       	ldi	r27, 0x01	; 1
 194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
 196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
 198:	ac 32       	cpi	r26, 0x2C	; 44
 19a:	b1 07       	cpc	r27, r17
 19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
 19e:	17 d0       	rcall	.+46     	; 0x1ce <main>
 1a0:	6e c6       	rjmp	.+3292   	; 0xe7e <_exit>

000001a2 <__bad_interrupt>:
 1a2:	2e cf       	rjmp	.-420    	; 0x0 <__vectors>

000001a4 <System_Init>:
#include "USBMIDI.h"
//#include "MIDIDefinitions.h"

void System_Init(void){
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1a4:	84 b7       	in	r24, 0x34	; 52
 1a6:	87 7f       	andi	r24, 0xF7	; 247
 1a8:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 1aa:	88 e1       	ldi	r24, 0x18	; 24
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	f8 94       	cli
 1b0:	80 93 60 00 	sts	0x0060, r24
 1b4:	10 92 60 00 	sts	0x0060, r1
 1b8:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	80 e8       	ldi	r24, 0x80	; 128
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	f8 94       	cli
 1c2:	80 93 61 00 	sts	0x0061, r24
 1c6:	90 93 61 00 	sts	0x0061, r25
 1ca:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
}
 1cc:	08 95       	ret

000001ce <main>:
 *  setup of all components and the main program loop.
 */
int main(void)
{
	/* Initialise System */
	System_Init();
 1ce:	ea df       	rcall	.-44     	; 0x1a4 <System_Init>
 1d0:	ba d0       	rcall	.+372    	; 0x346 <USBMIDI_Init>
	USBMIDI_Init();
 1d2:	53 d0       	rcall	.+166    	; 0x27a <Task_SingleAnalogue_Init>
 1d4:	30 d0       	rcall	.+96     	; 0x236 <Task_SingleDigital_Init>

	/* Initialise User Tasks */
	Task_SingleAnalogue_Init();
 1d6:	3c d0       	rcall	.+120    	; 0x250 <Task_SingleDigital_Run>
 1d8:	52 d0       	rcall	.+164    	; 0x27e <Task_SingleAnalogue_Run>
	Task_SingleDigital_Init();
 1da:	db d0       	rcall	.+438    	; 0x392 <USBMIDI_Update>
 1dc:	fc cf       	rjmp	.-8      	; 0x1d6 <main+0x8>

000001de <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 1de:	92 30       	cpi	r25, 0x02	; 2
 1e0:	29 f0       	breq	.+10     	; 0x1ec <CALLBACK_USB_GetDescriptor+0xe>
 1e2:	93 30       	cpi	r25, 0x03	; 3
 1e4:	41 f0       	breq	.+16     	; 0x1f6 <CALLBACK_USB_GetDescriptor+0x18>
 1e6:	91 30       	cpi	r25, 0x01	; 1
 1e8:	e9 f4       	brne	.+58     	; 0x224 <CALLBACK_USB_GetDescriptor+0x46>
 1ea:	17 c0       	rjmp	.+46     	; 0x21a <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 1ec:	85 e6       	ldi	r24, 0x65	; 101
 1ee:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 1f0:	e4 ef       	ldi	r30, 0xF4	; 244
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 1f4:	1b c0       	rjmp	.+54     	; 0x22c <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	41 f0       	breq	.+16     	; 0x20a <CALLBACK_USB_GetDescriptor+0x2c>
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	18 f0       	brcs	.+6      	; 0x204 <CALLBACK_USB_GetDescriptor+0x26>
 1fe:	82 30       	cpi	r24, 0x02	; 2
 200:	89 f4       	brne	.+34     	; 0x224 <CALLBACK_USB_GetDescriptor+0x46>
 202:	06 c0       	rjmp	.+12     	; 0x210 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 204:	e0 ef       	ldi	r30, 0xF0	; 240
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	05 c0       	rjmp	.+10     	; 0x214 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 20a:	ee ec       	ldi	r30, 0xCE	; 206
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 210:	ec ea       	ldi	r30, 0xAC	; 172
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	84 91       	lpm	r24, Z
 216:	90 e0       	ldi	r25, 0x00	; 0
					break;
 218:	09 c0       	rjmp	.+18     	; 0x22c <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 21a:	82 e1       	ldi	r24, 0x12	; 18
 21c:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 21e:	e9 e5       	ldi	r30, 0x59	; 89
 220:	f1 e0       	ldi	r31, 0x01	; 1
 222:	04 c0       	rjmp	.+8      	; 0x22c <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 228:	e0 e0       	ldi	r30, 0x00	; 0
 22a:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 22c:	da 01       	movw	r26, r20
 22e:	11 96       	adiw	r26, 0x01	; 1
 230:	fc 93       	st	X, r31
 232:	ee 93       	st	-X, r30
	return Size;
}
 234:	08 95       	ret

00000236 <Task_SingleDigital_Init>:

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |=  LEDS_PORTB_LEDS;
 236:	84 b1       	in	r24, 0x04	; 4
 238:	81 62       	ori	r24, 0x21	; 33
 23a:	84 b9       	out	0x04, r24	; 4
				PORTB &= ~LEDS_PORTB_LEDS;
 23c:	85 b1       	in	r24, 0x05	; 5
 23e:	8e 7d       	andi	r24, 0xDE	; 222
 240:	85 b9       	out	0x05, r24	; 5
				DDRD  |=  (LEDS_PORTD_LEDS << LEDS_PORTD_MASK_SHIFT);
 242:	55 9a       	sbi	0x0a, 5	; 10
				PORTD &= ~(LEDS_PORTD_LEDS << LEDS_PORTD_MASK_SHIFT);
 244:	5d 98       	cbi	0x0b, 5	; 11
				DDRE  |=  LEDS_PORTE_LEDS;
 246:	6e 9a       	sbi	0x0d, 6	; 13
				PORTE &= ~LEDS_PORTE_LEDS;
 248:	76 98       	cbi	0x0e, 6	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 24a:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 24c:	72 9a       	sbi	0x0e, 2	; 14
#include "USBMIDI.h"

void Task_SingleDigital_Init(void){
	LEDs_Init();
	Buttons_Init();
}
 24e:	08 95       	ret

00000250 <Task_SingleDigital_Run>:

void Task_SingleDigital_Run(void)
{
 250:	cf 93       	push	r28
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
 252:	cc b1       	in	r28, 0x0c	; 12
 254:	c0 95       	com	r28
 256:	c4 70       	andi	r28, 0x04	; 4
	uint8_t ButtonChanged = (ButtonPress ^ PrevButtonPress);

	/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
	uint8_t Channel = 1;

	if (ButtonChanged)
 258:	80 91 1c 01 	lds	r24, 0x011C
 25c:	c8 17       	cp	r28, r24
 25e:	49 f0       	breq	.+18     	; 0x272 <Task_SingleDigital_Run+0x22>
	{
		MIDICommand = (ButtonPress ? MIDI_EVENT_NOTE_ON : MIDI_EVENT_NOTE_OFF);
 260:	cc 23       	and	r28, r28
 262:	11 f0       	breq	.+4      	; 0x268 <Task_SingleDigital_Run+0x18>
 264:	60 e9       	ldi	r22, 0x90	; 144
 266:	01 c0       	rjmp	.+2      	; 0x26a <Task_SingleDigital_Run+0x1a>
 268:	60 e8       	ldi	r22, 0x80	; 128
				.Channel     = Channel,
				.Key       	 = MIDIPitch,
				.Value       = MIDI_STANDARD_VELOCITY,
			};

		USBMIDI_SendMessage(MIDIEvent);
 26a:	71 e0       	ldi	r23, 0x01	; 1
 26c:	8c e3       	ldi	r24, 0x3C	; 60
 26e:	90 e4       	ldi	r25, 0x40	; 64
 270:	6d d0       	rcall	.+218    	; 0x34c <USBMIDI_SendMessage>
 272:	c0 93 1c 01 	sts	0x011C, r28
	}

	PrevButtonPress = ButtonPress;
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <Task_SingleAnalogue_Init>:

#define DIAL_PIN 7

void Task_SingleAnalogue_Init(void)
{
	Analogue_Init();
 27a:	4a c0       	rjmp	.+148    	; 0x310 <Analogue_Init>
 27c:	08 95       	ret

0000027e <Task_SingleAnalogue_Run>:
}
 27e:	cf 93       	push	r28

	uint8_t MIDICommand = 0;
	uint8_t MIDIPitch;

	/* Get current joystick mask, XOR with previous to detect joystick changes */
	uint8_t DialValue  = Analogue_Read(DIAL_PIN);
 280:	87 e0       	ldi	r24, 0x07	; 7
 282:	49 d0       	rcall	.+146    	; 0x316 <Analogue_Read>
 284:	c8 2f       	mov	r28, r24
	DialValue = DialValue >> 1; // Convert to 7 bit
 286:	c6 95       	lsr	r28
 288:	80 91 1d 01 	lds	r24, 0x011D

	/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
	uint8_t Channel = 1;

	if (DialValue != PrevDialValue)
 28c:	c8 17       	cp	r28, r24
 28e:	29 f0       	breq	.+10     	; 0x29a <Task_SingleAnalogue_Run+0x1c>
 290:	60 eb       	ldi	r22, 0xB0	; 176
				.Channel     = Channel,
				.Key         = MIDI_KEY_GENERAL_PURPOSE_CC,
				.Value       = DialValue,
			};

		USBMIDI_SendMessage(MIDIEvent);
 292:	71 e0       	ldi	r23, 0x01	; 1
 294:	80 e1       	ldi	r24, 0x10	; 16
 296:	9c 2f       	mov	r25, r28
 298:	59 d0       	rcall	.+178    	; 0x34c <USBMIDI_SendMessage>
 29a:	c0 93 1d 01 	sts	0x011D, r28
	}

	PrevDialValue = DialValue;
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <adc_ready>:
 /** Checks if the ADC is currently converting a value or not 
 *      @return TRUE if the ADC is currently not converting
 **/
uint8_t adc_ready (void)
{
    return ! (ADCSRA & BIT (ADSC));
 2a2:	90 91 7a 00 	lds	r25, 0x007A
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	96 fd       	sbrc	r25, 6
 2aa:	80 e0       	ldi	r24, 0x00	; 0
}
 2ac:	08 95       	ret

000002ae <adc_init>:
 * *******************************************************************/

void adc_init(uint16_t settings)
{
    /* Apply the settings to the ADC registers */
    ADCSRA = settings;
 2ae:	ea e7       	ldi	r30, 0x7A	; 122
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 83       	st	Z, r24
    ADMUX = (settings >> 8);
 2b4:	ac e7       	ldi	r26, 0x7C	; 124
 2b6:	b0 e0       	ldi	r27, 0x00	; 0
 2b8:	9c 93       	st	X, r25
    
    /* Save whether the adc is 8 bit or not */
    adc_isEightBit |= ADMUX & _BV(ADLAR);
 2ba:	9c 91       	ld	r25, X
 2bc:	90 72       	andi	r25, 0x20	; 32
 2be:	80 91 1e 01 	lds	r24, 0x011E
 2c2:	89 2b       	or	r24, r25
 2c4:	80 93 1e 01 	sts	0x011E, r24
    
    /* Turn the ADC on */
    ADCSRA |= _BV(ADEN);
 2c8:	80 81       	ld	r24, Z
 2ca:	80 68       	ori	r24, 0x80	; 128
 2cc:	80 83       	st	Z, r24
}
 2ce:	08 95       	ret

000002d0 <adc_startConversion>:
 *      @param ADC channel to read
 **/
void adc_startConversion(uint8_t channel)
{
    /* Set the desired channel */
    BITS_INSERT (ADMUX, channel, 0, 3);
 2d0:	90 91 7c 00 	lds	r25, 0x007C
 2d4:	8f 70       	andi	r24, 0x0F	; 15
 2d6:	90 7f       	andi	r25, 0xF0	; 240
 2d8:	89 2b       	or	r24, r25
 2da:	80 93 7c 00 	sts	0x007C, r24
    
    /* Start the conversion if the ADC is ready */
    if(adc_ready())
 2de:	e1 df       	rcall	.-62     	; 0x2a2 <adc_ready>
 2e0:	88 23       	and	r24, r24
 2e2:	29 f0       	breq	.+10     	; 0x2ee <adc_startConversion+0x1e>
 2e4:	80 91 7a 00 	lds	r24, 0x007A
        ADCSRA |= _BV(ADSC);
 2e8:	80 64       	ori	r24, 0x40	; 64
 2ea:	80 93 7a 00 	sts	0x007A, r24
 2ee:	08 95       	ret

000002f0 <adc_read>:
 2f0:	d8 df       	rcall	.-80     	; 0x2a2 <adc_ready>
{
    uint16_t sample = 0;
    uint16_t highBits = 0;
    
    /* Block until conversion is complete */
    while(!adc_ready())
 2f2:	88 23       	and	r24, r24
 2f4:	e9 f3       	breq	.-6      	; 0x2f0 <adc_read>
 2f6:	80 91 1e 01 	lds	r24, 0x011E
        continue;
    
    if(adc_isEightBit)
 2fa:	88 23       	and	r24, r24
 2fc:	21 f0       	breq	.+8      	; 0x306 <adc_read+0x16>
 2fe:	80 91 79 00 	lds	r24, 0x0079
    {
        sample = ADCH;
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	08 95       	ret
 306:	80 91 78 00 	lds	r24, 0x0078
    }
    
    else // sample is 10-bit
    {
        sample = ADC;
 30a:	90 91 79 00 	lds	r25, 0x0079
 30e:	08 95       	ret

00000310 <Analogue_Init>:
    } 
    
    return sample;
}   
 310:	81 e0       	ldi	r24, 0x01	; 1

//____________________________________________________________________________ PUBLIC FUNCTIONS

// Initialise the ADC peripheral to do fast single ended 8-bit conversions with AVCC as a reference.
void Analogue_Init(void){
	adc_init(ADC_REF_AVCC | ADC_8_BIT | ADC_SINGLE_ENDED | ADC_PRESCALE_2);
 312:	90 e6       	ldi	r25, 0x60	; 96
 314:	cc cf       	rjmp	.-104    	; 0x2ae <adc_init>

00000316 <Analogue_Read>:
 316:	dc df       	rcall	.-72     	; 0x2d0 <adc_startConversion>
}
 318:	eb cf       	rjmp	.-42     	; 0x2f0 <adc_read>

0000031a <LEDs_SetAllLEDs>:
				PORTE &= ~(LEDMask & LEDS_PORTE_LEDS);
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB & ~LEDS_PORTB_LEDS) | (LEDMask & LEDS_PORTB_LEDS));
 31a:	25 b1       	in	r18, 0x05	; 5
 31c:	98 2f       	mov	r25, r24
 31e:	91 72       	andi	r25, 0x21	; 33
 320:	2e 7d       	andi	r18, 0xDE	; 222
 322:	92 2b       	or	r25, r18
 324:	95 b9       	out	0x05, r25	; 5
				PORTD = ((PORTD & ~(LEDS_PORTD_LEDS << LEDS_PORTD_MASK_SHIFT)) |
 326:	9b b1       	in	r25, 0x0b	; 11
				         ((LEDMask & LEDS_PORTD_LEDS) << LEDS_PORTD_MASK_SHIFT));
 328:	28 2f       	mov	r18, r24
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	20 71       	andi	r18, 0x10	; 16
 32e:	30 70       	andi	r19, 0x00	; 0
 330:	22 0f       	add	r18, r18
 332:	33 1f       	adc	r19, r19
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB & ~LEDS_PORTB_LEDS) | (LEDMask & LEDS_PORTB_LEDS));
				PORTD = ((PORTD & ~(LEDS_PORTD_LEDS << LEDS_PORTD_MASK_SHIFT)) |
 334:	9f 7d       	andi	r25, 0xDF	; 223
 336:	92 2b       	or	r25, r18
 338:	9b b9       	out	0x0b, r25	; 11
				         ((LEDMask & LEDS_PORTD_LEDS) << LEDS_PORTD_MASK_SHIFT));
				PORTE = ((PORTE & ~LEDS_PORTE_LEDS) | (LEDMask & LEDS_PORTE_LEDS));
 33a:	9e b1       	in	r25, 0x0e	; 14
 33c:	80 74       	andi	r24, 0x40	; 64
 33e:	9f 7b       	andi	r25, 0xBF	; 191
 340:	89 2b       	or	r24, r25
 342:	8e b9       	out	0x0e, r24	; 14
			}
 344:	08 95       	ret

00000346 <USBMIDI_Init>:
					},
			},
	};

void USBMIDI_Init(void){
	USB_Init();
 346:	b5 d2       	rcall	.+1386   	; 0x8b2 <USB_Init>
 348:	78 94       	sei
	sei();
 34a:	08 95       	ret

0000034c <USBMIDI_SendMessage>:
}
 34c:	0f 93       	push	r16

void USBMIDI_SendMessage(USBMIDIEvent_t Event) {
 34e:	1f 93       	push	r17
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	00 d0       	rcall	.+0      	; 0x356 <USBMIDI_SendMessage+0xa>
 356:	00 d0       	rcall	.+0      	; 0x358 <USBMIDI_SendMessage+0xc>
 358:	cd b7       	in	r28, 0x3d	; 61
 35a:	de b7       	in	r29, 0x3e	; 62
	/* Translate the MIDI event into a LUFA Midi event */
	MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t)
 35c:	26 2f       	mov	r18, r22
 35e:	22 95       	swap	r18
 360:	2f 70       	andi	r18, 0x0F	; 15
 362:	29 83       	std	Y+1, r18	; 0x01
 364:	71 50       	subi	r23, 0x01	; 1
 366:	76 2b       	or	r23, r22
 368:	7a 83       	std	Y+2, r23	; 0x02
 36a:	8b 83       	std	Y+3, r24	; 0x03
 36c:	9c 83       	std	Y+4, r25	; 0x04
		.Data2       = Event.Key,
		.Data3       = Event.Value,
	};

	/* Queue the MIDI event in the LUFA USB Queue*/
	MIDI_Device_SendEventPacket(&MIDI_Interface, &MIDIEvent);
 36e:	00 e0       	ldi	r16, 0x00	; 0
 370:	11 e0       	ldi	r17, 0x01	; 1
 372:	c8 01       	movw	r24, r16
 374:	be 01       	movw	r22, r28
 376:	6f 5f       	subi	r22, 0xFF	; 255
 378:	7f 4f       	sbci	r23, 0xFF	; 255
 37a:	15 d5       	rcall	.+2602   	; 0xda6 <MIDI_Device_SendEventPacket>
 37c:	c8 01       	movw	r24, r16
	MIDI_Device_Flush(&MIDI_Interface);
 37e:	30 d5       	rcall	.+2656   	; 0xde0 <MIDI_Device_Flush>
 380:	0f 90       	pop	r0
 382:	0f 90       	pop	r0
}
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	08 95       	ret

00000392 <USBMIDI_Update>:
 392:	cf 93       	push	r28
 394:	df 93       	push	r29

void USBMIDI_Update(void) {
 396:	00 d0       	rcall	.+0      	; 0x398 <USBMIDI_Update+0x6>
 398:	00 d0       	rcall	.+0      	; 0x39a <USBMIDI_Update+0x8>
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
	// Check the queue for MIDI events
	MIDI_EventPacket_t ReceivedMIDIEvent;
	while (MIDI_Device_ReceiveEventPacket(&MIDI_Interface, &ReceivedMIDIEvent))
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	be 01       	movw	r22, r28
 3a4:	6f 5f       	subi	r22, 0xFF	; 255
 3a6:	7f 4f       	sbci	r23, 0xFF	; 255
 3a8:	48 d5       	rcall	.+2704   	; 0xe3a <MIDI_Device_ReceiveEventPacket>
 3aa:	88 23       	and	r24, r24
 3ac:	c1 f7       	brne	.-16     	; 0x39e <USBMIDI_Update+0xc>
 3ae:	80 e0       	ldi	r24, 0x00	; 0
		continue;

	// Sends the MIDI events down the USB connection
	MIDI_Device_USBTask(&MIDI_Interface);
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	34 d5       	rcall	.+2664   	; 0xe1c <MIDI_Device_USBTask>
 3b4:	c6 d4       	rcall	.+2444   	; 0xd42 <USB_USBTask>
 3b6:	0f 90       	pop	r0
	USB_USBTask();
 3b8:	0f 90       	pop	r0
 3ba:	0f 90       	pop	r0
}
 3bc:	0f 90       	pop	r0
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <EVENT_USB_Device_Connect>:
 3c4:	81 e4       	ldi	r24, 0x41	; 65
 3c6:	a9 cf       	rjmp	.-174    	; 0x31a <LEDs_SetAllLEDs>

000003c8 <EVENT_USB_Device_Disconnect>:
 3c8:	80 e1       	ldi	r24, 0x10	; 16

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
 3ca:	a7 cf       	rjmp	.-178    	; 0x31a <LEDs_SetAllLEDs>

000003cc <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 3cc:	80 e0       	ldi	r24, 0x00	; 0
}
 3ce:	91 e0       	ldi	r25, 0x01	; 1
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= MIDI_Device_ConfigureEndpoints(&MIDI_Interface);
 3d0:	d4 d4       	rcall	.+2472   	; 0xd7a <MIDI_Device_ConfigureEndpoints>
 3d2:	88 23       	and	r24, r24

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 3d4:	11 f0       	breq	.+4      	; 0x3da <EVENT_USB_Device_ConfigurationChanged+0xe>
 3d6:	81 e2       	ldi	r24, 0x21	; 33
 3d8:	01 c0       	rjmp	.+2      	; 0x3dc <EVENT_USB_Device_ConfigurationChanged+0x10>
 3da:	80 e5       	ldi	r24, 0x50	; 80
 3dc:	9e cf       	rjmp	.-196    	; 0x31a <LEDs_SetAllLEDs>

000003de <EVENT_USB_Device_ControlRequest>:
 3de:	08 95       	ret

000003e0 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 3e0:	af 92       	push	r10
 3e2:	bf 92       	push	r11
 3e4:	cf 92       	push	r12
 3e6:	df 92       	push	r13
 3e8:	ef 92       	push	r14
 3ea:	ff 92       	push	r15
 3ec:	1f 93       	push	r17
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	ec 01       	movw	r28, r24
 3f4:	7b 01       	movw	r14, r22
 3f6:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 3f8:	e9 d1       	rcall	.+978    	; 0x7cc <Endpoint_WaitUntilReady>
 3fa:	18 2f       	mov	r17, r24
 3fc:	88 23       	and	r24, r24
 3fe:	a9 f5       	brne	.+106    	; 0x46a <Endpoint_Write_Stream_LE+0x8a>
 400:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
 402:	d1 04       	cpc	r13, r1
 404:	39 f0       	breq	.+14     	; 0x414 <Endpoint_Write_Stream_LE+0x34>
 406:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
 408:	20 81       	ld	r18, Z
 40a:	31 81       	ldd	r19, Z+1	; 0x01
 40c:	e2 1a       	sub	r14, r18
 40e:	f3 0a       	sbc	r15, r19
 410:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 412:	d3 1f       	adc	r29, r19
 414:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 416:	bb 24       	eor	r11, r11
 418:	23 c0       	rjmp	.+70     	; 0x460 <Endpoint_Write_Stream_LE+0x80>
 41a:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 41e:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 420:	16 c0       	rjmp	.+44     	; 0x44e <Endpoint_Write_Stream_LE+0x6e>
 422:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 426:	8e 77       	andi	r24, 0x7E	; 126
 428:	80 93 e8 00 	sts	0x00E8, r24
 42c:	8a d4       	rcall	.+2324   	; 0xd42 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 42e:	c1 14       	cp	r12, r1
 430:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
 432:	49 f0       	breq	.+18     	; 0x446 <Endpoint_Write_Stream_LE+0x66>
 434:	f6 01       	movw	r30, r12
 436:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
 438:	91 81       	ldd	r25, Z+1	; 0x01
 43a:	8a 0d       	add	r24, r10
 43c:	9b 1d       	adc	r25, r11
 43e:	91 83       	std	Z+1, r25	; 0x01
 440:	80 83       	st	Z, r24
 442:	15 e0       	ldi	r17, 0x05	; 5
 444:	12 c0       	rjmp	.+36     	; 0x46a <Endpoint_Write_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 446:	c2 d1       	rcall	.+900    	; 0x7cc <Endpoint_WaitUntilReady>
 448:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 44a:	51 f0       	breq	.+20     	; 0x460 <Endpoint_Write_Stream_LE+0x80>
 44c:	0d c0       	rjmp	.+26     	; 0x468 <Endpoint_Write_Stream_LE+0x88>
 44e:	89 91       	ld	r24, Y+
 450:	80 93 f1 00 	sts	0x00F1, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 454:	08 94       	sec
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 456:	e1 08       	sbc	r14, r1
 458:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 45a:	08 94       	sec
 45c:	a1 1c       	adc	r10, r1
 45e:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
 460:	e1 14       	cp	r14, r1
 462:	f1 04       	cpc	r15, r1
 464:	d1 f6       	brne	.-76     	; 0x41a <Endpoint_Write_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 466:	01 c0       	rjmp	.+2      	; 0x46a <Endpoint_Write_Stream_LE+0x8a>
 468:	18 2f       	mov	r17, r24
 46a:	81 2f       	mov	r24, r17
 46c:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 46e:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 470:	1f 91       	pop	r17
 472:	ff 90       	pop	r15
 474:	ef 90       	pop	r14
 476:	df 90       	pop	r13
 478:	cf 90       	pop	r12
 47a:	bf 90       	pop	r11
 47c:	af 90       	pop	r10
 47e:	08 95       	ret

00000480 <Endpoint_Read_Stream_LE>:
 480:	af 92       	push	r10
 482:	bf 92       	push	r11
 484:	cf 92       	push	r12
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 486:	df 92       	push	r13
 488:	ef 92       	push	r14
 48a:	ff 92       	push	r15
 48c:	1f 93       	push	r17
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	ec 01       	movw	r28, r24
 494:	7b 01       	movw	r14, r22
 496:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 498:	99 d1       	rcall	.+818    	; 0x7cc <Endpoint_WaitUntilReady>
 49a:	18 2f       	mov	r17, r24
 49c:	88 23       	and	r24, r24
 49e:	a9 f5       	brne	.+106    	; 0x50a <Endpoint_Read_Stream_LE+0x8a>
 4a0:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
 4a2:	d1 04       	cpc	r13, r1
 4a4:	39 f0       	breq	.+14     	; 0x4b4 <Endpoint_Read_Stream_LE+0x34>
 4a6:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
 4a8:	20 81       	ld	r18, Z
 4aa:	31 81       	ldd	r19, Z+1	; 0x01
 4ac:	e2 1a       	sub	r14, r18
 4ae:	f3 0a       	sbc	r15, r19
 4b0:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 4b2:	d3 1f       	adc	r29, r19
 4b4:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 4b6:	bb 24       	eor	r11, r11
 4b8:	23 c0       	rjmp	.+70     	; 0x500 <Endpoint_Read_Stream_LE+0x80>
 4ba:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 4be:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 4c0:	16 c0       	rjmp	.+44     	; 0x4ee <Endpoint_Read_Stream_LE+0x6e>
 4c2:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 4c6:	8b 77       	andi	r24, 0x7B	; 123
 4c8:	80 93 e8 00 	sts	0x00E8, r24
 4cc:	3a d4       	rcall	.+2164   	; 0xd42 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 4ce:	c1 14       	cp	r12, r1
 4d0:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
 4d2:	49 f0       	breq	.+18     	; 0x4e6 <Endpoint_Read_Stream_LE+0x66>
 4d4:	f6 01       	movw	r30, r12
 4d6:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
 4d8:	91 81       	ldd	r25, Z+1	; 0x01
 4da:	8a 0d       	add	r24, r10
 4dc:	9b 1d       	adc	r25, r11
 4de:	91 83       	std	Z+1, r25	; 0x01
 4e0:	80 83       	st	Z, r24
 4e2:	15 e0       	ldi	r17, 0x05	; 5
 4e4:	12 c0       	rjmp	.+36     	; 0x50a <Endpoint_Read_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 4e6:	72 d1       	rcall	.+740    	; 0x7cc <Endpoint_WaitUntilReady>
 4e8:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 4ea:	51 f0       	breq	.+20     	; 0x500 <Endpoint_Read_Stream_LE+0x80>
 4ec:	0d c0       	rjmp	.+26     	; 0x508 <Endpoint_Read_Stream_LE+0x88>
 4ee:	80 91 f1 00 	lds	r24, 0x00F1
 4f2:	89 93       	st	Y+, r24
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 4f4:	08 94       	sec
 4f6:	e1 08       	sbc	r14, r1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 4f8:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 4fa:	08 94       	sec
 4fc:	a1 1c       	adc	r10, r1
 4fe:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
 500:	e1 14       	cp	r14, r1
 502:	f1 04       	cpc	r15, r1
 504:	d1 f6       	brne	.-76     	; 0x4ba <Endpoint_Read_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 506:	01 c0       	rjmp	.+2      	; 0x50a <Endpoint_Read_Stream_LE+0x8a>
 508:	18 2f       	mov	r17, r24
 50a:	81 2f       	mov	r24, r17
 50c:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 50e:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 510:	1f 91       	pop	r17
 512:	ff 90       	pop	r15
 514:	ef 90       	pop	r14
 516:	df 90       	pop	r13
 518:	cf 90       	pop	r12
 51a:	bf 90       	pop	r11
 51c:	af 90       	pop	r10
 51e:	08 95       	ret

00000520 <Endpoint_Write_Control_Stream_LE>:
 520:	40 91 2a 01 	lds	r20, 0x012A
 524:	50 91 2b 01 	lds	r21, 0x012B
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 528:	46 17       	cp	r20, r22
 52a:	57 07       	cpc	r21, r23
 52c:	20 f4       	brcc	.+8      	; 0x536 <Endpoint_Write_Control_Stream_LE+0x16>
 52e:	ba 01       	movw	r22, r20
 530:	fc 01       	movw	r30, r24
 532:	40 e0       	ldi	r20, 0x00	; 0
 534:	3c c0       	rjmp	.+120    	; 0x5ae <Endpoint_Write_Control_Stream_LE+0x8e>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 536:	61 15       	cp	r22, r1
 538:	71 05       	cpc	r23, r1
 53a:	d1 f7       	brne	.-12     	; 0x530 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 53c:	40 91 e8 00 	lds	r20, 0x00E8
 540:	4e 77       	andi	r20, 0x7E	; 126
 542:	40 93 e8 00 	sts	0x00E8, r20
 546:	f4 cf       	rjmp	.-24     	; 0x530 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 548:	80 91 23 01 	lds	r24, 0x0123

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 54c:	88 23       	and	r24, r24
 54e:	09 f4       	brne	.+2      	; 0x552 <Endpoint_Write_Control_Stream_LE+0x32>
 550:	44 c0       	rjmp	.+136    	; 0x5da <Endpoint_Write_Control_Stream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 552:	85 30       	cpi	r24, 0x05	; 5
 554:	f1 f1       	breq	.+124    	; 0x5d2 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 556:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 55a:	83 fd       	sbrc	r24, 3
 55c:	3c c0       	rjmp	.+120    	; 0x5d6 <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 55e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 562:	82 fd       	sbrc	r24, 2
 564:	30 c0       	rjmp	.+96     	; 0x5c6 <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 566:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 56a:	80 ff       	sbrs	r24, 0
 56c:	20 c0       	rjmp	.+64     	; 0x5ae <Endpoint_Write_Control_Stream_LE+0x8e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 56e:	90 91 f3 00 	lds	r25, 0x00F3
 572:	80 91 f2 00 	lds	r24, 0x00F2
 576:	39 2f       	mov	r19, r25
 578:	20 e0       	ldi	r18, 0x00	; 0
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	82 2b       	or	r24, r18
 57e:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 580:	06 c0       	rjmp	.+12     	; 0x58e <Endpoint_Write_Control_Stream_LE+0x6e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 582:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 584:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 588:	61 50       	subi	r22, 0x01	; 1
 58a:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 58c:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 58e:	61 15       	cp	r22, r1
 590:	71 05       	cpc	r23, r1
 592:	19 f0       	breq	.+6      	; 0x59a <Endpoint_Write_Control_Stream_LE+0x7a>
 594:	88 30       	cpi	r24, 0x08	; 8
 596:	91 05       	cpc	r25, r1
 598:	a0 f3       	brcs	.-24     	; 0x582 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 59a:	41 e0       	ldi	r20, 0x01	; 1
 59c:	88 30       	cpi	r24, 0x08	; 8
 59e:	91 05       	cpc	r25, r1
 5a0:	09 f0       	breq	.+2      	; 0x5a4 <Endpoint_Write_Control_Stream_LE+0x84>
 5a2:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5a4:	80 91 e8 00 	lds	r24, 0x00E8
 5a8:	8e 77       	andi	r24, 0x7E	; 126
 5aa:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 5ae:	61 15       	cp	r22, r1
 5b0:	71 05       	cpc	r23, r1
 5b2:	51 f6       	brne	.-108    	; 0x548 <Endpoint_Write_Control_Stream_LE+0x28>
 5b4:	44 23       	and	r20, r20
 5b6:	41 f6       	brne	.-112    	; 0x548 <Endpoint_Write_Control_Stream_LE+0x28>
 5b8:	06 c0       	rjmp	.+12     	; 0x5c6 <Endpoint_Write_Control_Stream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5ba:	80 91 23 01 	lds	r24, 0x0123

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5be:	88 23       	and	r24, r24
 5c0:	61 f0       	breq	.+24     	; 0x5da <Endpoint_Write_Control_Stream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5c2:	85 30       	cpi	r24, 0x05	; 5
 5c4:	61 f0       	breq	.+24     	; 0x5de <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5c6:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 5ca:	82 ff       	sbrs	r24, 2
 5cc:	f6 cf       	rjmp	.-20     	; 0x5ba <Endpoint_Write_Control_Stream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 5d2:	83 e0       	ldi	r24, 0x03	; 3
 5d4:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 5da:	82 e0       	ldi	r24, 0x02	; 2
 5dc:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 5de:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 5e0:	08 95       	ret

000005e2 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 5e2:	40 91 2a 01 	lds	r20, 0x012A
 5e6:	50 91 2b 01 	lds	r21, 0x012B
 5ea:	46 17       	cp	r20, r22
 5ec:	57 07       	cpc	r21, r23
 5ee:	20 f4       	brcc	.+8      	; 0x5f8 <Endpoint_Write_Control_PStream_LE+0x16>
 5f0:	ba 01       	movw	r22, r20
 5f2:	fc 01       	movw	r30, r24
 5f4:	40 e0       	ldi	r20, 0x00	; 0
 5f6:	3e c0       	rjmp	.+124    	; 0x674 <Endpoint_Write_Control_PStream_LE+0x92>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 5f8:	61 15       	cp	r22, r1
 5fa:	71 05       	cpc	r23, r1
 5fc:	d1 f7       	brne	.-12     	; 0x5f2 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5fe:	40 91 e8 00 	lds	r20, 0x00E8
 602:	4e 77       	andi	r20, 0x7E	; 126
 604:	40 93 e8 00 	sts	0x00E8, r20
 608:	f4 cf       	rjmp	.-24     	; 0x5f2 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 60a:	80 91 23 01 	lds	r24, 0x0123

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 60e:	88 23       	and	r24, r24
 610:	09 f4       	brne	.+2      	; 0x614 <Endpoint_Write_Control_PStream_LE+0x32>
 612:	46 c0       	rjmp	.+140    	; 0x6a0 <Endpoint_Write_Control_PStream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 614:	85 30       	cpi	r24, 0x05	; 5
 616:	09 f4       	brne	.+2      	; 0x61a <Endpoint_Write_Control_PStream_LE+0x38>
 618:	3f c0       	rjmp	.+126    	; 0x698 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 61a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 61e:	83 fd       	sbrc	r24, 3
 620:	3d c0       	rjmp	.+122    	; 0x69c <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 622:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 626:	82 fd       	sbrc	r24, 2
 628:	31 c0       	rjmp	.+98     	; 0x68c <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 62a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 62e:	80 ff       	sbrs	r24, 0
 630:	21 c0       	rjmp	.+66     	; 0x674 <Endpoint_Write_Control_PStream_LE+0x92>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 632:	90 91 f3 00 	lds	r25, 0x00F3
 636:	80 91 f2 00 	lds	r24, 0x00F2
 63a:	39 2f       	mov	r19, r25
 63c:	20 e0       	ldi	r18, 0x00	; 0
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	82 2b       	or	r24, r18
 642:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 644:	07 c0       	rjmp	.+14     	; 0x654 <Endpoint_Write_Control_PStream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 646:	44 91       	lpm	r20, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 648:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 64c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 64e:	61 50       	subi	r22, 0x01	; 1
 650:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 652:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 654:	61 15       	cp	r22, r1
 656:	71 05       	cpc	r23, r1
 658:	19 f0       	breq	.+6      	; 0x660 <Endpoint_Write_Control_PStream_LE+0x7e>
 65a:	88 30       	cpi	r24, 0x08	; 8
 65c:	91 05       	cpc	r25, r1
 65e:	98 f3       	brcs	.-26     	; 0x646 <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 660:	41 e0       	ldi	r20, 0x01	; 1
 662:	88 30       	cpi	r24, 0x08	; 8
 664:	91 05       	cpc	r25, r1
 666:	09 f0       	breq	.+2      	; 0x66a <Endpoint_Write_Control_PStream_LE+0x88>
 668:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 66a:	80 91 e8 00 	lds	r24, 0x00E8
 66e:	8e 77       	andi	r24, 0x7E	; 126
 670:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 674:	61 15       	cp	r22, r1
 676:	71 05       	cpc	r23, r1
 678:	41 f6       	brne	.-112    	; 0x60a <Endpoint_Write_Control_PStream_LE+0x28>
 67a:	44 23       	and	r20, r20
 67c:	31 f6       	brne	.-116    	; 0x60a <Endpoint_Write_Control_PStream_LE+0x28>
 67e:	06 c0       	rjmp	.+12     	; 0x68c <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 680:	80 91 23 01 	lds	r24, 0x0123

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 684:	88 23       	and	r24, r24
 686:	61 f0       	breq	.+24     	; 0x6a0 <Endpoint_Write_Control_PStream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 688:	85 30       	cpi	r24, 0x05	; 5
 68a:	61 f0       	breq	.+24     	; 0x6a4 <Endpoint_Write_Control_PStream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 68c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 690:	82 ff       	sbrs	r24, 2
 692:	f6 cf       	rjmp	.-20     	; 0x680 <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 698:	83 e0       	ldi	r24, 0x03	; 3
 69a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 6a0:	82 e0       	ldi	r24, 0x02	; 2
 6a2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 6a4:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 6a6:	08 95       	ret

000006a8 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 6a8:	98 2f       	mov	r25, r24
 6aa:	2a c0       	rjmp	.+84     	; 0x700 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 6ac:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 6b0:	98 17       	cp	r25, r24
 6b2:	39 f0       	breq	.+14     	; 0x6c2 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 6b4:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 6b8:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 6bc:	50 91 f0 00 	lds	r21, 0x00F0
 6c0:	03 c0       	rjmp	.+6      	; 0x6c8 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 6c2:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 6c4:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 6c6:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 6c8:	21 ff       	sbrs	r18, 1
 6ca:	19 c0       	rjmp	.+50     	; 0x6fe <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 6cc:	30 91 eb 00 	lds	r19, 0x00EB
 6d0:	3e 7f       	andi	r19, 0xFE	; 254
 6d2:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 6d6:	30 91 ed 00 	lds	r19, 0x00ED
 6da:	3d 7f       	andi	r19, 0xFD	; 253
 6dc:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 6e0:	30 91 eb 00 	lds	r19, 0x00EB
 6e4:	31 60       	ori	r19, 0x01	; 1
 6e6:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 6ea:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 6ee:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 6f2:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 6f6:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 6fa:	27 ff       	sbrs	r18, 7
 6fc:	08 c0       	rjmp	.+16     	; 0x70e <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 6fe:	9f 5f       	subi	r25, 0xFF	; 255
 700:	97 30       	cpi	r25, 0x07	; 7
 702:	a0 f2       	brcs	.-88     	; 0x6ac <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 704:	8f 70       	andi	r24, 0x0F	; 15
 706:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 70e:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 710:	08 95       	ret

00000712 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
 712:	0f 93       	push	r16
 714:	1f 93       	push	r17
 716:	cf 93       	push	r28
 718:	df 93       	push	r29
 71a:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
 71c:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
 71e:	00 e0       	ldi	r16, 0x00	; 0
 720:	2a c0       	rjmp	.+84     	; 0x776 <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
 722:	98 81       	ld	r25, Y
 724:	99 23       	and	r25, r25
 726:	29 f1       	breq	.+74     	; 0x772 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
 728:	6b 81       	ldd	r22, Y+3	; 0x03
 72a:	e9 81       	ldd	r30, Y+1	; 0x01
 72c:	fa 81       	ldd	r31, Y+2	; 0x02
 72e:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 730:	89 2f       	mov	r24, r25
 732:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 734:	87 30       	cpi	r24, 0x07	; 7
 736:	18 f5       	brcc	.+70     	; 0x77e <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
 738:	62 95       	swap	r22
 73a:	66 0f       	add	r22, r22
 73c:	66 0f       	add	r22, r22
 73e:	60 7c       	andi	r22, 0xC0	; 192
 740:	99 1f       	adc	r25, r25
 742:	99 27       	eor	r25, r25
 744:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 746:	69 2b       	or	r22, r25
 748:	22 30       	cpi	r18, 0x02	; 2
 74a:	10 f0       	brcs	.+4      	; 0x750 <Endpoint_ConfigureEndpointTable+0x3e>
 74c:	96 e0       	ldi	r25, 0x06	; 6
 74e:	01 c0       	rjmp	.+2      	; 0x752 <Endpoint_ConfigureEndpointTable+0x40>
 750:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 752:	28 e0       	ldi	r18, 0x08	; 8
 754:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
 756:	40 e0       	ldi	r20, 0x00	; 0
 758:	03 c0       	rjmp	.+6      	; 0x760 <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 75a:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
 75c:	22 0f       	add	r18, r18
 75e:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 760:	2e 17       	cp	r18, r30
 762:	3f 07       	cpc	r19, r31
 764:	d0 f3       	brcs	.-12     	; 0x75a <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
 766:	42 95       	swap	r20
 768:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 76a:	49 2b       	or	r20, r25
 76c:	9d df       	rcall	.-198    	; 0x6a8 <Endpoint_ConfigureEndpoint_Prv>
 76e:	88 23       	and	r24, r24
 770:	31 f0       	breq	.+12     	; 0x77e <Endpoint_ConfigureEndpointTable+0x6c>
 772:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
 774:	25 96       	adiw	r28, 0x05	; 5
 776:	01 17       	cp	r16, r17
 778:	a1 f6       	brne	.-88     	; 0x722 <Endpoint_ConfigureEndpointTable+0x10>
 77a:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
 77c:	01 c0       	rjmp	.+2      	; 0x780 <Endpoint_ConfigureEndpointTable+0x6e>
 77e:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
 780:	df 91       	pop	r29
	}
	
	return true;
}
 782:	cf 91       	pop	r28
 784:	1f 91       	pop	r17
 786:	0f 91       	pop	r16
 788:	08 95       	ret

0000078a <Endpoint_ClearStatusStage>:
 78a:	80 91 24 01 	lds	r24, 0x0124
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 78e:	87 ff       	sbrs	r24, 7
 790:	13 c0       	rjmp	.+38     	; 0x7b8 <Endpoint_ClearStatusStage+0x2e>
 792:	04 c0       	rjmp	.+8      	; 0x79c <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 794:	80 91 23 01 	lds	r24, 0x0123
 798:	88 23       	and	r24, r24
 79a:	b9 f0       	breq	.+46     	; 0x7ca <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 79c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 7a0:	82 ff       	sbrs	r24, 2
 7a2:	f8 cf       	rjmp	.-16     	; 0x794 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 7a4:	80 91 e8 00 	lds	r24, 0x00E8
 7a8:	8b 77       	andi	r24, 0x7B	; 123
 7aa:	80 93 e8 00 	sts	0x00E8, r24
 7ae:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 7b0:	80 91 23 01 	lds	r24, 0x0123
 7b4:	88 23       	and	r24, r24
 7b6:	49 f0       	breq	.+18     	; 0x7ca <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 7b8:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 7bc:	80 ff       	sbrs	r24, 0
 7be:	f8 cf       	rjmp	.-16     	; 0x7b0 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7c0:	80 91 e8 00 	lds	r24, 0x00E8
 7c4:	8e 77       	andi	r24, 0x7E	; 126
 7c6:	80 93 e8 00 	sts	0x00E8, r24
 7ca:	08 95       	ret

000007cc <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 7cc:	80 91 e4 00 	lds	r24, 0x00E4
 7d0:	90 91 e5 00 	lds	r25, 0x00E5
 7d4:	45 e6       	ldi	r20, 0x65	; 101
 7d6:	01 c0       	rjmp	.+2      	; 0x7da <Endpoint_WaitUntilReady+0xe>
 7d8:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 7da:	20 91 ec 00 	lds	r18, 0x00EC
 7de:	20 ff       	sbrs	r18, 0
 7e0:	23 c0       	rjmp	.+70     	; 0x828 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 7e2:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 7e6:	20 fd       	sbrc	r18, 0
 7e8:	15 c0       	rjmp	.+42     	; 0x814 <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7ea:	20 91 23 01 	lds	r18, 0x0123

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7ee:	22 23       	and	r18, r18
 7f0:	99 f0       	breq	.+38     	; 0x818 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7f2:	25 30       	cpi	r18, 0x05	; 5
 7f4:	99 f0       	breq	.+38     	; 0x81c <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 7f6:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 7fa:	25 fd       	sbrc	r18, 5
 7fc:	11 c0       	rjmp	.+34     	; 0x820 <Endpoint_WaitUntilReady+0x54>
 7fe:	20 91 e4 00 	lds	r18, 0x00E4
 802:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 806:	28 17       	cp	r18, r24
 808:	39 07       	cpc	r19, r25
 80a:	39 f3       	breq	.-50     	; 0x7da <Endpoint_WaitUntilReady+0xe>
 80c:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 80e:	21 f7       	brne	.-56     	; 0x7d8 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
 810:	84 e0       	ldi	r24, 0x04	; 4
 812:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 814:	80 e0       	ldi	r24, 0x00	; 0
 816:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 818:	82 e0       	ldi	r24, 0x02	; 2
 81a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 81c:	83 e0       	ldi	r24, 0x03	; 3
 81e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
 824:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 826:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 828:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 82c:	22 ff       	sbrs	r18, 2
 82e:	dd cf       	rjmp	.-70     	; 0x7ea <Endpoint_WaitUntilReady+0x1e>
 830:	f9 cf       	rjmp	.-14     	; 0x824 <Endpoint_WaitUntilReady+0x58>

00000832 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 832:	0f 93       	push	r16
 834:	1f 93       	push	r17
 836:	cf 93       	push	r28
 838:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 83a:	4b d0       	rcall	.+150    	; 0x8d2 <USB_INT_DisableAllInterrupts>
 83c:	52 d0       	rcall	.+164    	; 0x8e2 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 83e:	c8 ed       	ldi	r28, 0xD8	; 216
 840:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 842:	88 81       	ld	r24, Y
 844:	8f 77       	andi	r24, 0x7F	; 127
 846:	88 83       	st	Y, r24
 848:	88 81       	ld	r24, Y
 84a:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 84c:	88 83       	st	Y, r24
 84e:	88 81       	ld	r24, Y
 850:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 852:	88 83       	st	Y, r24
 854:	19 bc       	out	0x29, r1	; 41
 856:	10 92 23 01 	sts	0x0123, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 85a:	10 92 1f 01 	sts	0x011F, r1
	USB_Device_ConfigurationNumber  = 0;
 85e:	10 92 21 01 	sts	0x0121, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 862:	10 92 20 01 	sts	0x0120, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 866:	00 ee       	ldi	r16, 0xE0	; 224
 868:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 86a:	f8 01       	movw	r30, r16
 86c:	80 81       	ld	r24, Z
 86e:	8b 7f       	andi	r24, 0xFB	; 251
 870:	80 83       	st	Z, r24
 872:	88 81       	ld	r24, Y
 874:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 876:	88 83       	st	Y, r24
 878:	80 e0       	ldi	r24, 0x00	; 0
 87a:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 87c:	42 e0       	ldi	r20, 0x02	; 2
 87e:	14 df       	rcall	.-472    	; 0x6a8 <Endpoint_ConfigureEndpoint_Prv>
 880:	e1 ee       	ldi	r30, 0xE1	; 225
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 886:	8e 7f       	andi	r24, 0xFE	; 254
 888:	80 83       	st	Z, r24
 88a:	e2 ee       	ldi	r30, 0xE2	; 226
 88c:	f0 e0       	ldi	r31, 0x00	; 0
 88e:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 890:	81 60       	ori	r24, 0x01	; 1
 892:	80 83       	st	Z, r24
 894:	80 81       	ld	r24, Z
 896:	88 60       	ori	r24, 0x08	; 8
 898:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 89a:	f8 01       	movw	r30, r16
 89c:	80 81       	ld	r24, Z
 89e:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 8a0:	80 83       	st	Z, r24
 8a2:	88 81       	ld	r24, Y
 8a4:	80 61       	ori	r24, 0x10	; 16
 8a6:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 8a8:	df 91       	pop	r29
 8aa:	cf 91       	pop	r28
 8ac:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 8ae:	0f 91       	pop	r16
 8b0:	08 95       	ret

000008b2 <USB_Init>:
 8b2:	e8 ed       	ldi	r30, 0xD8	; 216
 8b4:	f0 e0       	ldi	r31, 0x00	; 0
 8b6:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 8b8:	8f 7e       	andi	r24, 0xEF	; 239
 8ba:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 8bc:	e7 ed       	ldi	r30, 0xD7	; 215
 8be:	f0 e0       	ldi	r31, 0x00	; 0
 8c0:	80 81       	ld	r24, Z
 8c2:	81 60       	ori	r24, 0x01	; 1
 8c4:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
 8c6:	84 e0       	ldi	r24, 0x04	; 4
 8c8:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 8ca:	81 e0       	ldi	r24, 0x01	; 1
 8cc:	80 93 22 01 	sts	0x0122, r24

	USB_ResetInterface();
 8d0:	b0 cf       	rjmp	.-160    	; 0x832 <USB_ResetInterface>

000008d2 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
 8d2:	e8 ed       	ldi	r30, 0xD8	; 216
 8d4:	f0 e0       	ldi	r31, 0x00	; 0
 8d6:	80 81       	ld	r24, Z
 8d8:	8e 7f       	andi	r24, 0xFE	; 254
 8da:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 8dc:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 8e0:	08 95       	ret

000008e2 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 8e2:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 8e6:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 8ea:	08 95       	ret

000008ec <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 8ec:	1f 92       	push	r1
 8ee:	0f 92       	push	r0
 8f0:	0f b6       	in	r0, 0x3f	; 63
 8f2:	0f 92       	push	r0
 8f4:	11 24       	eor	r1, r1
 8f6:	2f 93       	push	r18
 8f8:	3f 93       	push	r19
 8fa:	4f 93       	push	r20
 8fc:	5f 93       	push	r21
 8fe:	6f 93       	push	r22
 900:	7f 93       	push	r23
 902:	8f 93       	push	r24
 904:	9f 93       	push	r25
 906:	af 93       	push	r26
 908:	bf 93       	push	r27
 90a:	ef 93       	push	r30
 90c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 90e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 912:	82 ff       	sbrs	r24, 2
 914:	0a c0       	rjmp	.+20     	; 0x92a <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 916:	80 91 e2 00 	lds	r24, 0x00E2
 91a:	82 ff       	sbrs	r24, 2
 91c:	06 c0       	rjmp	.+12     	; 0x92a <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 91e:	80 91 e1 00 	lds	r24, 0x00E1
 922:	8b 7f       	andi	r24, 0xFB	; 251
 924:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 928:	0b d2       	rcall	.+1046   	; 0xd40 <USB_Event_Stub>
 92a:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 92e:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 930:	1d c0       	rjmp	.+58     	; 0x96c <__vector_10+0x80>
 932:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 936:	80 ff       	sbrs	r24, 0
 938:	19 c0       	rjmp	.+50     	; 0x96c <__vector_10+0x80>
 93a:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 93e:	8e 7f       	andi	r24, 0xFE	; 254
 940:	80 93 da 00 	sts	0x00DA, r24
 944:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 948:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 94a:	0c c0       	rjmp	.+24     	; 0x964 <__vector_10+0x78>
 94c:	80 e1       	ldi	r24, 0x10	; 16

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 94e:	89 bd       	out	0x29, r24	; 41
 950:	82 e1       	ldi	r24, 0x12	; 18
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 952:	89 bd       	out	0x29, r24	; 41
 954:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 956:	00 fe       	sbrs	r0, 0
 958:	fd cf       	rjmp	.-6      	; 0x954 <__vector_10+0x68>
 95a:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 95c:	80 93 23 01 	sts	0x0123, r24
 960:	31 dd       	rcall	.-1438   	; 0x3c4 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 962:	04 c0       	rjmp	.+8      	; 0x96c <__vector_10+0x80>
 964:	19 bc       	out	0x29, r1	; 41
 966:	10 92 23 01 	sts	0x0123, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 96a:	2e dd       	rcall	.-1444   	; 0x3c8 <EVENT_USB_Device_Disconnect>
 96c:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 970:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 972:	18 c0       	rjmp	.+48     	; 0x9a4 <__vector_10+0xb8>
 974:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 978:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 97a:	14 c0       	rjmp	.+40     	; 0x9a4 <__vector_10+0xb8>
 97c:	80 91 e2 00 	lds	r24, 0x00E2
 980:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 982:	80 93 e2 00 	sts	0x00E2, r24
 986:	80 91 e2 00 	lds	r24, 0x00E2
 98a:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 98c:	80 93 e2 00 	sts	0x00E2, r24
 990:	80 91 d8 00 	lds	r24, 0x00D8
 994:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 996:	80 93 d8 00 	sts	0x00D8, r24
 99a:	19 bc       	out	0x29, r1	; 41
 99c:	85 e0       	ldi	r24, 0x05	; 5
 99e:	80 93 23 01 	sts	0x0123, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 9a2:	ce d1       	rcall	.+924    	; 0xd40 <USB_Event_Stub>
 9a4:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 9a8:	84 ff       	sbrs	r24, 4
 9aa:	2d c0       	rjmp	.+90     	; 0xa06 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 9ac:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 9b0:	84 ff       	sbrs	r24, 4
 9b2:	29 c0       	rjmp	.+82     	; 0xa06 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 9b4:	80 e1       	ldi	r24, 0x10	; 16
 9b6:	89 bd       	out	0x29, r24	; 41
 9b8:	82 e1       	ldi	r24, 0x12	; 18
 9ba:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 9bc:	09 b4       	in	r0, 0x29	; 41
 9be:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 9c0:	fd cf       	rjmp	.-6      	; 0x9bc <__vector_10+0xd0>
 9c2:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 9c6:	8f 7d       	andi	r24, 0xDF	; 223
 9c8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 9cc:	80 91 e1 00 	lds	r24, 0x00E1
 9d0:	8f 7e       	andi	r24, 0xEF	; 239
 9d2:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 9d6:	80 91 e2 00 	lds	r24, 0x00E2
 9da:	8f 7e       	andi	r24, 0xEF	; 239
 9dc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 9e0:	80 91 e2 00 	lds	r24, 0x00E2
 9e4:	81 60       	ori	r24, 0x01	; 1
 9e6:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 9ea:	80 91 1f 01 	lds	r24, 0x011F
 9ee:	88 23       	and	r24, r24
 9f0:	21 f4       	brne	.+8      	; 0x9fa <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 9f2:	80 91 e3 00 	lds	r24, 0x00E3
 9f6:	87 ff       	sbrs	r24, 7
 9f8:	02 c0       	rjmp	.+4      	; 0x9fe <__vector_10+0x112>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 9fa:	84 e0       	ldi	r24, 0x04	; 4
 9fc:	01 c0       	rjmp	.+2      	; 0xa00 <__vector_10+0x114>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 9fe:	81 e0       	ldi	r24, 0x01	; 1
 a00:	80 93 23 01 	sts	0x0123, r24
 a04:	9d d1       	rcall	.+826    	; 0xd40 <USB_Event_Stub>
 a06:	80 91 e1 00 	lds	r24, 0x00E1
 a0a:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 a0c:	22 c0       	rjmp	.+68     	; 0xa52 <__vector_10+0x166>
 a0e:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 a12:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 a14:	1e c0       	rjmp	.+60     	; 0xa52 <__vector_10+0x166>
 a16:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 a1a:	87 7f       	andi	r24, 0xF7	; 247
 a1c:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 a20:	82 e0       	ldi	r24, 0x02	; 2
 a22:	80 93 23 01 	sts	0x0123, r24
 a26:	10 92 1f 01 	sts	0x011F, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 a2a:	80 91 e1 00 	lds	r24, 0x00E1
 a2e:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 a30:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 a34:	80 91 e2 00 	lds	r24, 0x00E2
 a38:	8e 7f       	andi	r24, 0xFE	; 254
 a3a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 a3e:	80 91 e2 00 	lds	r24, 0x00E2
 a42:	80 61       	ori	r24, 0x10	; 16
 a44:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 a48:	80 e0       	ldi	r24, 0x00	; 0
 a4a:	60 e0       	ldi	r22, 0x00	; 0
 a4c:	42 e0       	ldi	r20, 0x02	; 2
 a4e:	2c de       	rcall	.-936    	; 0x6a8 <Endpoint_ConfigureEndpoint_Prv>
 a50:	77 d1       	rcall	.+750    	; 0xd40 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 a52:	ff 91       	pop	r31
 a54:	ef 91       	pop	r30
 a56:	bf 91       	pop	r27
 a58:	af 91       	pop	r26
 a5a:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 a5c:	8f 91       	pop	r24
 a5e:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 a60:	6f 91       	pop	r22
 a62:	5f 91       	pop	r21
 a64:	4f 91       	pop	r20
 a66:	3f 91       	pop	r19
 a68:	2f 91       	pop	r18
 a6a:	0f 90       	pop	r0
 a6c:	0f be       	out	0x3f, r0	; 63
 a6e:	0f 90       	pop	r0
 a70:	1f 90       	pop	r1
 a72:	18 95       	reti

00000a74 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 a74:	1f 93       	push	r17
 a76:	cf 93       	push	r28
 a78:	df 93       	push	r29
 a7a:	cd b7       	in	r28, 0x3d	; 61
 a7c:	de b7       	in	r29, 0x3e	; 62
 a7e:	ac 97       	sbiw	r28, 0x2c	; 44
 a80:	0f b6       	in	r0, 0x3f	; 63
 a82:	f8 94       	cli
 a84:	de bf       	out	0x3e, r29	; 62
 a86:	0f be       	out	0x3f, r0	; 63
 a88:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a8a:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 a8c:	e4 e2       	ldi	r30, 0x24	; 36
 a8e:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 a90:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 a94:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a96:	8f 5f       	subi	r24, 0xFF	; 255
 a98:	88 30       	cpi	r24, 0x08	; 8
 a9a:	d1 f7       	brne	.-12     	; 0xa90 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 a9c:	a0 dc       	rcall	.-1728   	; 0x3de <EVENT_USB_Device_ControlRequest>
 a9e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 aa2:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 aa4:	35 c1       	rjmp	.+618    	; 0xd10 <__stack+0x211>
 aa6:	80 91 24 01 	lds	r24, 0x0124
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 aaa:	20 91 25 01 	lds	r18, 0x0125

		switch (USB_ControlRequest.bRequest)
 aae:	25 30       	cpi	r18, 0x05	; 5
 ab0:	09 f4       	brne	.+2      	; 0xab4 <USB_Device_ProcessControlRequest+0x40>
 ab2:	84 c0       	rjmp	.+264    	; 0xbbc <__stack+0xbd>
 ab4:	26 30       	cpi	r18, 0x06	; 6
 ab6:	40 f4       	brcc	.+16     	; 0xac8 <USB_Device_ProcessControlRequest+0x54>
 ab8:	21 30       	cpi	r18, 0x01	; 1
 aba:	a1 f1       	breq	.+104    	; 0xb24 <__stack+0x25>
 abc:	21 30       	cpi	r18, 0x01	; 1
 abe:	70 f0       	brcs	.+28     	; 0xadc <USB_Device_ProcessControlRequest+0x68>
 ac0:	23 30       	cpi	r18, 0x03	; 3
 ac2:	09 f0       	breq	.+2      	; 0xac6 <USB_Device_ProcessControlRequest+0x52>
 ac4:	25 c1       	rjmp	.+586    	; 0xd10 <__stack+0x211>
 ac6:	2e c0       	rjmp	.+92     	; 0xb24 <__stack+0x25>
 ac8:	28 30       	cpi	r18, 0x08	; 8
 aca:	09 f4       	brne	.+2      	; 0xace <USB_Device_ProcessControlRequest+0x5a>
 acc:	f3 c0       	rjmp	.+486    	; 0xcb4 <__stack+0x1b5>
 ace:	29 30       	cpi	r18, 0x09	; 9
 ad0:	09 f4       	brne	.+2      	; 0xad4 <USB_Device_ProcessControlRequest+0x60>
 ad2:	02 c1       	rjmp	.+516    	; 0xcd8 <__stack+0x1d9>
 ad4:	26 30       	cpi	r18, 0x06	; 6
 ad6:	09 f0       	breq	.+2      	; 0xada <USB_Device_ProcessControlRequest+0x66>
 ad8:	1b c1       	rjmp	.+566    	; 0xd10 <__stack+0x211>
 ada:	93 c0       	rjmp	.+294    	; 0xc02 <__stack+0x103>
 adc:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ade:	21 f0       	breq	.+8      	; 0xae8 <USB_Device_ProcessControlRequest+0x74>
 ae0:	82 38       	cpi	r24, 0x82	; 130
 ae2:	09 f0       	breq	.+2      	; 0xae6 <USB_Device_ProcessControlRequest+0x72>
 ae4:	15 c1       	rjmp	.+554    	; 0xd10 <__stack+0x211>
 ae6:	08 c0       	rjmp	.+16     	; 0xaf8 <USB_Device_ProcessControlRequest+0x84>
 ae8:	80 91 20 01 	lds	r24, 0x0120
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 aec:	90 91 21 01 	lds	r25, 0x0121
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 af0:	99 23       	and	r25, r25
 af2:	71 f0       	breq	.+28     	; 0xb10 <__stack+0x11>
 af4:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 af6:	0c c0       	rjmp	.+24     	; 0xb10 <__stack+0x11>
 af8:	80 91 28 01 	lds	r24, 0x0128
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 afc:	8f 70       	andi	r24, 0x0F	; 15
 afe:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b02:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 b06:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
 b08:	95 ff       	sbrs	r25, 5
 b0a:	80 e0       	ldi	r24, 0x00	; 0
 b0c:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b10:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b14:	97 7f       	andi	r25, 0xF7	; 247
 b16:	90 93 e8 00 	sts	0x00E8, r25
 b1a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 b1e:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 b22:	d3 c0       	rjmp	.+422    	; 0xcca <__stack+0x1cb>
 b24:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b26:	19 f0       	breq	.+6      	; 0xb2e <__stack+0x2f>
 b28:	82 30       	cpi	r24, 0x02	; 2
 b2a:	09 f0       	breq	.+2      	; 0xb2e <__stack+0x2f>
 b2c:	f1 c0       	rjmp	.+482    	; 0xd10 <__stack+0x211>
 b2e:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 b30:	8f 71       	andi	r24, 0x1F	; 31
 b32:	90 70       	andi	r25, 0x00	; 0
 b34:	00 97       	sbiw	r24, 0x00	; 0
 b36:	29 f0       	breq	.+10     	; 0xb42 <__stack+0x43>
 b38:	82 30       	cpi	r24, 0x02	; 2
 b3a:	91 05       	cpc	r25, r1
 b3c:	09 f0       	breq	.+2      	; 0xb40 <__stack+0x41>
 b3e:	e8 c0       	rjmp	.+464    	; 0xd10 <__stack+0x211>
 b40:	0b c0       	rjmp	.+22     	; 0xb58 <__stack+0x59>
 b42:	80 91 26 01 	lds	r24, 0x0126
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 b46:	81 30       	cpi	r24, 0x01	; 1
 b48:	09 f0       	breq	.+2      	; 0xb4c <__stack+0x4d>
 b4a:	e2 c0       	rjmp	.+452    	; 0xd10 <__stack+0x211>
 b4c:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 b4e:	09 f0       	breq	.+2      	; 0xb52 <__stack+0x53>
 b50:	80 e0       	ldi	r24, 0x00	; 0
 b52:	80 93 21 01 	sts	0x0121, r24
 b56:	2c c0       	rjmp	.+88     	; 0xbb0 <__stack+0xb1>
 b58:	80 91 26 01 	lds	r24, 0x0126

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 b5c:	88 23       	and	r24, r24
 b5e:	41 f5       	brne	.+80     	; 0xbb0 <__stack+0xb1>
 b60:	20 91 28 01 	lds	r18, 0x0128
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b64:	2f 70       	andi	r18, 0x0F	; 15
 b66:	09 f4       	brne	.+2      	; 0xb6a <__stack+0x6b>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 b68:	d3 c0       	rjmp	.+422    	; 0xd10 <__stack+0x211>
 b6a:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b6e:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 b72:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 b74:	1d c0       	rjmp	.+58     	; 0xbb0 <__stack+0xb1>
 b76:	80 91 25 01 	lds	r24, 0x0125
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 b7a:	83 30       	cpi	r24, 0x03	; 3
 b7c:	21 f4       	brne	.+8      	; 0xb86 <__stack+0x87>
 b7e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b82:	80 62       	ori	r24, 0x20	; 32
 b84:	13 c0       	rjmp	.+38     	; 0xbac <__stack+0xad>
 b86:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 b8a:	80 61       	ori	r24, 0x10	; 16
 b8c:	80 93 eb 00 	sts	0x00EB, r24
 b90:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 b92:	90 e0       	ldi	r25, 0x00	; 0
 b94:	02 c0       	rjmp	.+4      	; 0xb9a <__stack+0x9b>
 b96:	88 0f       	add	r24, r24
 b98:	99 1f       	adc	r25, r25
 b9a:	2a 95       	dec	r18
 b9c:	e2 f7       	brpl	.-8      	; 0xb96 <__stack+0x97>
 b9e:	80 93 ea 00 	sts	0x00EA, r24
 ba2:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 ba6:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 baa:	88 60       	ori	r24, 0x08	; 8
 bac:	80 93 eb 00 	sts	0x00EB, r24
 bb0:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bb4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bb8:	87 7f       	andi	r24, 0xF7	; 247
 bba:	8a c0       	rjmp	.+276    	; 0xcd0 <__stack+0x1d1>
 bbc:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 bbe:	09 f0       	breq	.+2      	; 0xbc2 <__stack+0xc3>
 bc0:	a7 c0       	rjmp	.+334    	; 0xd10 <__stack+0x211>
 bc2:	10 91 26 01 	lds	r17, 0x0126
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 bc6:	1f 77       	andi	r17, 0x7F	; 127
 bc8:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 bcc:	80 78       	andi	r24, 0x80	; 128
 bce:	81 2b       	or	r24, r17
 bd0:	80 93 e3 00 	sts	0x00E3, r24
 bd4:	80 91 e8 00 	lds	r24, 0x00E8
 bd8:	87 7f       	andi	r24, 0xF7	; 247
 bda:	80 93 e8 00 	sts	0x00E8, r24
 bde:	d5 dd       	rcall	.-1110   	; 0x78a <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 be0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 be4:	80 ff       	sbrs	r24, 0
 be6:	fc cf       	rjmp	.-8      	; 0xbe0 <__stack+0xe1>

	while (!(Endpoint_IsINReady()));
 be8:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
 bec:	80 68       	ori	r24, 0x80	; 128
 bee:	80 93 e3 00 	sts	0x00E3, r24
 bf2:	11 23       	and	r17, r17
 bf4:	11 f0       	breq	.+4      	; 0xbfa <__stack+0xfb>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 bf6:	83 e0       	ldi	r24, 0x03	; 3
 bf8:	01 c0       	rjmp	.+2      	; 0xbfc <__stack+0xfd>
 bfa:	82 e0       	ldi	r24, 0x02	; 2
 bfc:	80 93 23 01 	sts	0x0123, r24
 c00:	87 c0       	rjmp	.+270    	; 0xd10 <__stack+0x211>
 c02:	80 58       	subi	r24, 0x80	; 128
 c04:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 c06:	08 f0       	brcs	.+2      	; 0xc0a <__stack+0x10b>
 c08:	83 c0       	rjmp	.+262    	; 0xd10 <__stack+0x211>
 c0a:	80 91 26 01 	lds	r24, 0x0126
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 c0e:	90 91 27 01 	lds	r25, 0x0127
 c12:	23 e0       	ldi	r18, 0x03	; 3
 c14:	8c 3d       	cpi	r24, 0xDC	; 220
 c16:	92 07       	cpc	r25, r18
 c18:	a9 f5       	brne	.+106    	; 0xc84 <__stack+0x185>
 c1a:	83 e0       	ldi	r24, 0x03	; 3
 c1c:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 c1e:	8a e2       	ldi	r24, 0x2A	; 42
 c20:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 c22:	5f b7       	in	r21, 0x3f	; 63
 c24:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 c26:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 c28:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 c2a:	80 e0       	ldi	r24, 0x00	; 0
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	4e e0       	ldi	r20, 0x0E	; 14
 c30:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 c32:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 c34:	f0 e0       	ldi	r31, 0x00	; 0
 c36:	60 93 57 00 	sts	0x0057, r22
 c3a:	e4 91       	lpm	r30, Z
 c3c:	80 ff       	sbrs	r24, 0
 c3e:	03 c0       	rjmp	.+6      	; 0xc46 <__stack+0x147>

					if (SerialCharNum & 0x01)
 c40:	e2 95       	swap	r30
 c42:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 c44:	4f 5f       	subi	r20, 0xFF	; 255
 c46:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 c48:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
 c4a:	30 e0       	ldi	r19, 0x00	; 0
 c4c:	ea 30       	cpi	r30, 0x0A	; 10
 c4e:	18 f0       	brcs	.+6      	; 0xc56 <__stack+0x157>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 c50:	29 5c       	subi	r18, 0xC9	; 201
 c52:	3f 4f       	sbci	r19, 0xFF	; 255
 c54:	02 c0       	rjmp	.+4      	; 0xc5a <__stack+0x15b>
 c56:	20 5d       	subi	r18, 0xD0	; 208
 c58:	3f 4f       	sbci	r19, 0xFF	; 255
 c5a:	13 96       	adiw	r26, 0x03	; 3
 c5c:	3c 93       	st	X, r19
 c5e:	2e 93       	st	-X, r18
 c60:	12 97       	sbiw	r26, 0x02	; 2
 c62:	01 96       	adiw	r24, 0x01	; 1
 c64:	12 96       	adiw	r26, 0x02	; 2
 c66:	84 31       	cpi	r24, 0x14	; 20
 c68:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 c6a:	19 f7       	brne	.-58     	; 0xc32 <__stack+0x133>
 c6c:	5f bf       	out	0x3f, r21	; 63
 c6e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c72:	87 7f       	andi	r24, 0xF7	; 247
 c74:	80 93 e8 00 	sts	0x00E8, r24
 c78:	ce 01       	movw	r24, r28
 c7a:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 c7c:	6a e2       	ldi	r22, 0x2A	; 42
 c7e:	70 e0       	ldi	r23, 0x00	; 0
 c80:	4f dc       	rcall	.-1890   	; 0x520 <Endpoint_Write_Control_Stream_LE>
 c82:	12 c0       	rjmp	.+36     	; 0xca8 <__stack+0x1a9>
 c84:	60 91 28 01 	lds	r22, 0x0128
 c88:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 c8a:	4f 5f       	subi	r20, 0xFF	; 255
 c8c:	5f 4f       	sbci	r21, 0xFF	; 255
 c8e:	a7 da       	rcall	.-2738   	; 0x1de <CALLBACK_USB_GetDescriptor>
 c90:	bc 01       	movw	r22, r24
 c92:	00 97       	sbiw	r24, 0x00	; 0
 c94:	09 f4       	brne	.+2      	; 0xc98 <__stack+0x199>
 c96:	3c c0       	rjmp	.+120    	; 0xd10 <__stack+0x211>
 c98:	80 91 e8 00 	lds	r24, 0x00E8
 c9c:	87 7f       	andi	r24, 0xF7	; 247
 c9e:	80 93 e8 00 	sts	0x00E8, r24
 ca2:	89 81       	ldd	r24, Y+1	; 0x01
 ca4:	9a 81       	ldd	r25, Y+2	; 0x02
 ca6:	9d dc       	rcall	.-1734   	; 0x5e2 <Endpoint_Write_Control_PStream_LE>
 ca8:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 cac:	8b 77       	andi	r24, 0x7B	; 123
 cae:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 cb2:	2e c0       	rjmp	.+92     	; 0xd10 <__stack+0x211>
 cb4:	80 38       	cpi	r24, 0x80	; 128
 cb6:	61 f5       	brne	.+88     	; 0xd10 <__stack+0x211>
 cb8:	80 91 e8 00 	lds	r24, 0x00E8
 cbc:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 cbe:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cc2:	80 91 1f 01 	lds	r24, 0x011F
 cc6:	80 93 f1 00 	sts	0x00F1, r24
 cca:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 cce:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 cd0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 cd4:	5a dd       	rcall	.-1356   	; 0x78a <Endpoint_ClearStatusStage>
 cd6:	1c c0       	rjmp	.+56     	; 0xd10 <__stack+0x211>
 cd8:	88 23       	and	r24, r24
 cda:	d1 f4       	brne	.+52     	; 0xd10 <__stack+0x211>
 cdc:	90 91 26 01 	lds	r25, 0x0126
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 ce0:	92 30       	cpi	r25, 0x02	; 2
 ce2:	b0 f4       	brcc	.+44     	; 0xd10 <__stack+0x211>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 ce4:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 ce8:	87 7f       	andi	r24, 0xF7	; 247
 cea:	80 93 e8 00 	sts	0x00E8, r24
 cee:	90 93 1f 01 	sts	0x011F, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cf2:	4b dd       	rcall	.-1386   	; 0x78a <Endpoint_ClearStatusStage>
 cf4:	80 91 1f 01 	lds	r24, 0x011F
 cf8:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 cfa:	21 f4       	brne	.+8      	; 0xd04 <__stack+0x205>
 cfc:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 d00:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 d02:	02 c0       	rjmp	.+4      	; 0xd08 <__stack+0x209>
 d04:	84 e0       	ldi	r24, 0x04	; 4
 d06:	01 c0       	rjmp	.+2      	; 0xd0a <__stack+0x20b>
 d08:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 d0a:	80 93 23 01 	sts	0x0123, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 d0e:	5e db       	rcall	.-2372   	; 0x3cc <EVENT_USB_Device_ConfigurationChanged>
 d10:	80 91 e8 00 	lds	r24, 0x00E8
 d14:	83 ff       	sbrs	r24, 3
 d16:	0a c0       	rjmp	.+20     	; 0xd2c <__stack+0x22d>
 d18:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 d1c:	87 7f       	andi	r24, 0xF7	; 247
 d1e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d22:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 d26:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d28:	80 93 eb 00 	sts	0x00EB, r24
 d2c:	ac 96       	adiw	r28, 0x2c	; 44
 d2e:	0f b6       	in	r0, 0x3f	; 63
 d30:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 d32:	de bf       	out	0x3e, r29	; 62
 d34:	0f be       	out	0x3f, r0	; 63
 d36:	cd bf       	out	0x3d, r28	; 61
 d38:	df 91       	pop	r29
 d3a:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 d3c:	1f 91       	pop	r17
 d3e:	08 95       	ret

00000d40 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 d40:	08 95       	ret

00000d42 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 d42:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 d44:	80 91 23 01 	lds	r24, 0x0123
 d48:	88 23       	and	r24, r24
 d4a:	a9 f0       	breq	.+42     	; 0xd76 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 d4c:	80 91 e9 00 	lds	r24, 0x00E9
 d50:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 d52:	90 91 ec 00 	lds	r25, 0x00EC
 d56:	90 ff       	sbrs	r25, 0
 d58:	02 c0       	rjmp	.+4      	; 0xd5e <USB_USBTask+0x1c>
 d5a:	c0 e8       	ldi	r28, 0x80	; 128
 d5c:	01 c0       	rjmp	.+2      	; 0xd60 <USB_USBTask+0x1e>
 d5e:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 d60:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d62:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d66:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 d6a:	83 ff       	sbrs	r24, 3
 d6c:	01 c0       	rjmp	.+2      	; 0xd70 <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
 d6e:	82 de       	rcall	.-764    	; 0xa74 <USB_Device_ProcessControlRequest>
 d70:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d72:	c0 93 e9 00 	sts	0x00E9, r28
 d76:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 d78:	08 95       	ret

00000d7a <MIDI_Device_ConfigureEndpoints>:
#define  __INCLUDE_FROM_MIDI_DRIVER
#define  __INCLUDE_FROM_MIDI_DEVICE_C
#include "MIDIClassDevice.h"

bool MIDI_Device_ConfigureEndpoints(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
 d7a:	cf 93       	push	r28
 d7c:	df 93       	push	r29
 d7e:	ec 01       	movw	r28, r24
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));
 d80:	1b 86       	std	Y+11, r1	; 0x0b

	MIDIInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
 d82:	82 e0       	ldi	r24, 0x02	; 2
 d84:	8c 83       	std	Y+4, r24	; 0x04
	MIDIInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
 d86:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataINEndpoint, 1)))
 d88:	ce 01       	movw	r24, r28
 d8a:	01 96       	adiw	r24, 0x01	; 1
 d8c:	61 e0       	ldi	r22, 0x01	; 1
 d8e:	c1 dc       	rcall	.-1662   	; 0x712 <Endpoint_ConfigureEndpointTable>
 d90:	88 23       	and	r24, r24
 d92:	29 f0       	breq	.+10     	; 0xd9e <MIDI_Device_ConfigureEndpoints+0x24>
 d94:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataOUTEndpoint, 1)))
 d96:	06 96       	adiw	r24, 0x06	; 6
 d98:	61 e0       	ldi	r22, 0x01	; 1
 d9a:	bb dc       	rcall	.-1674   	; 0x712 <Endpoint_ConfigureEndpointTable>
 d9c:	01 c0       	rjmp	.+2      	; 0xda0 <MIDI_Device_ConfigureEndpoints+0x26>
 d9e:	80 e0       	ldi	r24, 0x00	; 0
 da0:	df 91       	pop	r29

	MIDIInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
	MIDIInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;
 da2:	cf 91       	pop	r28

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	return true;
}
 da4:	08 95       	ret

00000da6 <MIDI_Device_SendEventPacket>:
 da6:	fc 01       	movw	r30, r24
 da8:	cb 01       	movw	r24, r22
}

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 daa:	20 91 23 01 	lds	r18, 0x0123
 dae:	24 30       	cpi	r18, 0x04	; 4
 db0:	a9 f4       	brne	.+42     	; 0xddc <MIDI_Device_SendEventPacket+0x36>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 db2:	21 81       	ldd	r18, Z+1	; 0x01
 db4:	2f 70       	andi	r18, 0x0F	; 15
 db6:	20 93 e9 00 	sts	0x00E9, r18

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if ((ErrorCode = Endpoint_Write_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL)) != ENDPOINT_RWSTREAM_NoError)
 dba:	64 e0       	ldi	r22, 0x04	; 4
 dbc:	70 e0       	ldi	r23, 0x00	; 0
 dbe:	40 e0       	ldi	r20, 0x00	; 0
 dc0:	50 e0       	ldi	r21, 0x00	; 0
 dc2:	0e db       	rcall	.-2532   	; 0x3e0 <Endpoint_Write_Stream_LE>
 dc4:	88 23       	and	r24, r24
 dc6:	59 f4       	brne	.+22     	; 0xdde <MIDI_Device_SendEventPacket+0x38>
 dc8:	90 91 e8 00 	lds	r25, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 dcc:	95 fd       	sbrc	r25, 5
	  return ErrorCode;

	if (!(Endpoint_IsReadWriteAllowed()))
 dce:	07 c0       	rjmp	.+14     	; 0xdde <MIDI_Device_SendEventPacket+0x38>
 dd0:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 dd4:	9e 77       	andi	r25, 0x7E	; 126
 dd6:	90 93 e8 00 	sts	0x00E8, r25
 dda:	08 95       	ret
 ddc:	82 e0       	ldi	r24, 0x02	; 2

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 dde:	08 95       	ret

00000de0 <MIDI_Device_Flush>:

	if (!(Endpoint_IsReadWriteAllowed()))
	  Endpoint_ClearIN();

	return ENDPOINT_RWSTREAM_NoError;
}
 de0:	20 91 23 01 	lds	r18, 0x0123

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 de4:	24 30       	cpi	r18, 0x04	; 4
 de6:	b1 f4       	brne	.+44     	; 0xe14 <MIDI_Device_Flush+0x34>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 de8:	fc 01       	movw	r30, r24
 dea:	81 81       	ldd	r24, Z+1	; 0x01
 dec:	8f 70       	andi	r24, 0x0F	; 15
 dee:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 df2:	90 91 f3 00 	lds	r25, 0x00F3
 df6:	80 91 f2 00 	lds	r24, 0x00F2
 dfa:	39 2f       	mov	r19, r25
 dfc:	20 e0       	ldi	r18, 0x00	; 0
 dfe:	90 e0       	ldi	r25, 0x00	; 0
 e00:	82 2b       	or	r24, r18
 e02:	93 2b       	or	r25, r19

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_BytesInEndpoint())
 e04:	00 97       	sbiw	r24, 0x00	; 0
 e06:	41 f0       	breq	.+16     	; 0xe18 <MIDI_Device_Flush+0x38>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e08:	80 91 e8 00 	lds	r24, 0x00E8
 e0c:	8e 77       	andi	r24, 0x7E	; 126
 e0e:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 e12:	dc cc       	rjmp	.-1608   	; 0x7cc <Endpoint_WaitUntilReady>
 e14:	82 e0       	ldi	r24, 0x02	; 2
 e16:	08 95       	ret
}

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 e18:	80 e0       	ldi	r24, 0x00	; 0
 e1a:	08 95       	ret

00000e1c <MIDI_Device_USBTask>:

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	return ENDPOINT_READYWAIT_NoError;
 e1c:	20 91 23 01 	lds	r18, 0x0123
	return true;
}

void MIDI_Device_USBTask(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 e20:	24 30       	cpi	r18, 0x04	; 4
 e22:	51 f4       	brne	.+20     	; 0xe38 <MIDI_Device_USBTask+0x1c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e24:	fc 01       	movw	r30, r24
 e26:	21 81       	ldd	r18, Z+1	; 0x01
 e28:	2f 70       	andi	r18, 0x0F	; 15
 e2a:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 e2e:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);
	
	if (Endpoint_IsINReady())
 e32:	20 ff       	sbrs	r18, 0
 e34:	01 c0       	rjmp	.+2      	; 0xe38 <MIDI_Device_USBTask+0x1c>
	  MIDI_Device_Flush(MIDIInterfaceInfo);
 e36:	d4 cf       	rjmp	.-88     	; 0xde0 <MIDI_Device_Flush>
 e38:	08 95       	ret

00000e3a <MIDI_Device_ReceiveEventPacket>:
 e3a:	fc 01       	movw	r30, r24
	return ENDPOINT_READYWAIT_NoError;
}

bool MIDI_Device_ReceiveEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    MIDI_EventPacket_t* const Event)
{
 e3c:	cb 01       	movw	r24, r22
	if (USB_DeviceState != DEVICE_STATE_Configured)
 e3e:	20 91 23 01 	lds	r18, 0x0123
 e42:	24 30       	cpi	r18, 0x04	; 4
 e44:	c1 f4       	brne	.+48     	; 0xe76 <MIDI_Device_ReceiveEventPacket+0x3c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e46:	26 81       	ldd	r18, Z+6	; 0x06
 e48:	2f 70       	andi	r18, 0x0F	; 15
 e4a:	20 93 e9 00 	sts	0x00E9, r18
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 e4e:	20 91 e8 00 	lds	r18, 0x00E8
	  return false;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
 e52:	25 ff       	sbrs	r18, 5
 e54:	10 c0       	rjmp	.+32     	; 0xe76 <MIDI_Device_ReceiveEventPacket+0x3c>
	  return false;

	Endpoint_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);
 e56:	64 e0       	ldi	r22, 0x04	; 4
 e58:	70 e0       	ldi	r23, 0x00	; 0
 e5a:	40 e0       	ldi	r20, 0x00	; 0
 e5c:	50 e0       	ldi	r21, 0x00	; 0
 e5e:	10 db       	rcall	.-2528   	; 0x480 <Endpoint_Read_Stream_LE>
 e60:	80 91 e8 00 	lds	r24, 0x00E8
 e64:	85 fd       	sbrc	r24, 5

	if (!(Endpoint_IsReadWriteAllowed()))
 e66:	09 c0       	rjmp	.+18     	; 0xe7a <MIDI_Device_ReceiveEventPacket+0x40>
 e68:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 e6c:	8b 77       	andi	r24, 0x7B	; 123
 e6e:	80 93 e8 00 	sts	0x00E8, r24
 e72:	81 e0       	ldi	r24, 0x01	; 1
	  Endpoint_ClearOUT();

	return true;
 e74:	08 95       	ret
 e76:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
	  return false;
 e78:	08 95       	ret
 e7a:	81 e0       	ldi	r24, 0x01	; 1
	Endpoint_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);

	if (!(Endpoint_IsReadWriteAllowed()))
	  Endpoint_ClearOUT();

	return true;
 e7c:	08 95       	ret

00000e7e <_exit>:
 e7e:	f8 94       	cli

00000e80 <__stop_program>:
 e80:	ff cf       	rjmp	.-2      	; 0xe80 <__stop_program>
