
test_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  0000047a  000004ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000047a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000009d8  00000000  00000000  00000518  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000000b4  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000d4  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000606  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000310  00000000  00000000  000016be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a2  00000000  00000000  000019ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00002070  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001c2  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000028b  00000000  00000000  00002342  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  68:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  6c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  70:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  74:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  78:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  7c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  80:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  84:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  88:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

0000008c <copyRightChar>:
  8c:	07 08 13 14 14 13 08 07 00 10 08 08 08 08 10 00     ................

0000009c <__c.1482>:
  9c:	4c 69 6e 65 20 32 20 6c 6f 6e 67 65 72 20 74 68     Line 2 longer th
  ac:	61 6e 20 31 34 20 63 68 61 72 61 63 74 65 72 73     an 14 characters
	...

000000bd <__c.1480>:
  bd:	4c 69 6e 65 20 31 20 6c 6f 6e 67 65 72 20 74 68     Line 1 longer th
  cd:	61 6e 20 31 34 20 63 68 61 72 61 63 74 65 72 73     an 14 characters
  dd:	0a 00 00                                            ...

000000e0 <__ctors_end>:
  e0:	11 24       	eor	r1, r1
  e2:	1f be       	out	0x3f, r1	; 63
  e4:	cf ef       	ldi	r28, 0xFF	; 255
  e6:	d0 e4       	ldi	r29, 0x40	; 64
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	cd bf       	out	0x3d, r28	; 61

000000ec <__do_copy_data>:
  ec:	11 e0       	ldi	r17, 0x01	; 1
  ee:	a0 e0       	ldi	r26, 0x00	; 0
  f0:	b1 e0       	ldi	r27, 0x01	; 1
  f2:	ea e7       	ldi	r30, 0x7A	; 122
  f4:	f4 e0       	ldi	r31, 0x04	; 4
  f6:	00 e0       	ldi	r16, 0x00	; 0
  f8:	0b bf       	out	0x3b, r16	; 59
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x14>
  fc:	07 90       	elpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	aa 32       	cpi	r26, 0x2A	; 42
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0x10>
 106:	0e 94 91 00 	call	0x122	; 0x122 <main>
 10a:	0c 94 3b 02 	jmp	0x476	; 0x476 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <wait_until_key_pressed>:
{
    unsigned char temp1, temp2;
    unsigned int i;
    
    do {
        temp1 = PIND;                  // read input
 112:	99 b1       	in	r25, 0x09	; 9
        for(i=0;i<65535;i++);
        temp2 = PIND;                  // read input
 114:	89 b1       	in	r24, 0x09	; 9
        temp1 = (temp1 & temp2);       // debounce input
    } while ( temp1 & _BV(PIND2) );
 116:	89 23       	and	r24, r25
 118:	82 fd       	sbrc	r24, 2
 11a:	fb cf       	rjmp	.-10     	; 0x112 <wait_until_key_pressed>
    
    loop_until_bit_is_set(PIND,PIND2);            /* wait until key is released */
 11c:	4a 9b       	sbis	0x09, 2	; 9
 11e:	fe cf       	rjmp	.-4      	; 0x11c <wait_until_key_pressed+0xa>
}
 120:	08 95       	ret

00000122 <main>:


int main(void)
{
 122:	ef 92       	push	r14
 124:	ff 92       	push	r15
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	df 93       	push	r29
 12c:	cf 93       	push	r28
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	27 97       	sbiw	r28, 0x07	; 7
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	de bf       	out	0x3e, r29	; 62
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	cd bf       	out	0x3d, r28	; 61
    char buffer[7];
    int  num=134;
    unsigned char i;
    
    
    DDRD &=~ (1 << PD2);        /* Pin PD2 input              */
 13e:	52 98       	cbi	0x0a, 2	; 10
    PORTD |= (1 << PD2);        /* Pin PD2 pull-up enabled    */
 140:	5a 9a       	sbi	0x0b, 2	; 11


    /* initialize display, cursor off */
    lcd_init(LCD_DISP_ON);
 142:	8c e0       	ldi	r24, 0x0C	; 12
 144:	0e 94 bc 01 	call	0x378	; 0x378 <lcd_init>
         */
        
        lcd_clrscr();   /* clear display home cursor */
        
        /* convert interger into string */
        itoa( num , buffer, 10);
 148:	7e 01       	movw	r14, r28
 14a:	08 94       	sec
 14c:	e1 1c       	adc	r14, r1
 14e:	f1 1c       	adc	r15, r1
        /* 
         * Test 1:  write text to display
         */

        /* clear display and home cursor */
        lcd_clrscr();
 150:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_clrscr>
        
        /* put string to display (line 1) with linefeed */
        lcd_puts("LCD Test Line 1\n");
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e 94 a2 01 	call	0x344	; 0x344 <lcd_puts>

        /* cursor is now on second line, write second line */
        lcd_puts("Line 2");
 15c:	81 e1       	ldi	r24, 0x11	; 17
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	0e 94 a2 01 	call	0x344	; 0x344 <lcd_puts>
        
        /* move cursor to position 8 on line 2 */
        lcd_gotoxy(7,1);  
 164:	87 e0       	ldi	r24, 0x07	; 7
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_gotoxy>
        
        /* write single char to display */
        lcd_putc(':');
 16c:	8a e3       	ldi	r24, 0x3A	; 58
 16e:	0e 94 8d 01 	call	0x31a	; 0x31a <lcd_putc>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 172:	0e 94 89 00 	call	0x112	; 0x112 <wait_until_key_pressed>
        /*
         * Test 2: use lcd_command() to turn on cursor
         */
        
        /* turn on cursor */
        lcd_command(LCD_DISP_ON_CURSOR);
 176:	8e e0       	ldi	r24, 0x0E	; 14
 178:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_command>

        /* put string */
        lcd_puts( "CurOn");
 17c:	88 e1       	ldi	r24, 0x18	; 24
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 a2 01 	call	0x344	; 0x344 <lcd_puts>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 184:	0e 94 89 00 	call	0x112	; 0x112 <wait_until_key_pressed>

        /*
         * Test 3: display shift
         */
        
        lcd_clrscr();     /* clear display home cursor */
 188:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_clrscr>

        /* put string from program memory to display */
        lcd_puts_P( "Line 1 longer than 14 characters\n" );
 18c:	8d eb       	ldi	r24, 0xBD	; 189
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 ae 01 	call	0x35c	; 0x35c <lcd_puts_p>
        lcd_puts_P( "Line 2 longer than 14 characters" );
 194:	8c e9       	ldi	r24, 0x9C	; 156
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 ae 01 	call	0x35c	; 0x35c <lcd_puts_p>
        
        /* move BOTH lines one position to the left */
        lcd_command(LCD_MOVE_DISP_LEFT);
 19c:	88 e1       	ldi	r24, 0x18	; 24
 19e:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_command>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 1a2:	0e 94 89 00 	call	0x112	; 0x112 <wait_until_key_pressed>

        /* turn off cursor */
        lcd_command(LCD_DISP_ON);
 1a6:	8c e0       	ldi	r24, 0x0C	; 12
 1a8:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_command>
        
        /*
         *   Test: Display integer values
         */
        
        lcd_clrscr();   /* clear display home cursor */
 1ac:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_clrscr>
        
        /* convert interger into string */
        itoa( num , buffer, 10);
 1b0:	86 e8       	ldi	r24, 0x86	; 134
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	b7 01       	movw	r22, r14
 1b6:	4a e0       	ldi	r20, 0x0A	; 10
 1b8:	50 e0       	ldi	r21, 0x00	; 0
 1ba:	0e 94 f6 01 	call	0x3ec	; 0x3ec <itoa>
        
        /* put converted string to display */
        lcd_puts(buffer);
 1be:	c7 01       	movw	r24, r14
 1c0:	0e 94 a2 01 	call	0x344	; 0x344 <lcd_puts>
        
        /* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
 1c4:	0e 94 89 00 	call	0x112	; 0x112 <wait_until_key_pressed>
        
        /*
         *  Test: Display userdefined characters
         */

       lcd_clrscr();   /* clear display home cursor */
 1c8:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_clrscr>
       
       lcd_puts("Copyright: ");
 1cc:	8e e1       	ldi	r24, 0x1E	; 30
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 a2 01 	call	0x344	; 0x344 <lcd_puts>
       
       /*
        * load two userdefined characters from program memory
        * into LCD controller CG RAM location 0 and 1
        */
       lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
 1d4:	80 e4       	ldi	r24, 0x40	; 64
 1d6:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_command>
 1da:	0c e8       	ldi	r16, 0x8C	; 140
 1dc:	10 e0       	ldi	r17, 0x00	; 0
       for(i=0; i<16; i++)
       {
           lcd_data(pgm_read_byte_near(&copyRightChar[i]));
 1de:	f8 01       	movw	r30, r16
 1e0:	84 91       	lpm	r24, Z+
 1e2:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_data>
 1e6:	0f 5f       	subi	r16, 0xFF	; 255
 1e8:	1f 4f       	sbci	r17, 0xFF	; 255
       /*
        * load two userdefined characters from program memory
        * into LCD controller CG RAM location 0 and 1
        */
       lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
       for(i=0; i<16; i++)
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	0c 39       	cpi	r16, 0x9C	; 156
 1ee:	1f 07       	cpc	r17, r31
 1f0:	b1 f7       	brne	.-20     	; 0x1de <main+0xbc>
           lcd_data(pgm_read_byte_near(&copyRightChar[i]));
       }
       
       /* move cursor to position 0 on line 2 */
       /* Note: this switched back to DD RAM adresses */
       lcd_gotoxy(0,1);
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_gotoxy>
       
       /* display user defined (c), built using two user defined chars */
       lcd_putc(0);
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	0e 94 8d 01 	call	0x31a	; 0x31a <lcd_putc>
       lcd_putc(1);
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 8d 01 	call	0x31a	; 0x31a <lcd_putc>
       

       /* wait until push button PD2 (INT0) is pressed */
       wait_until_key_pressed();
 206:	0e 94 89 00 	call	0x112	; 0x112 <wait_until_key_pressed>
 20a:	a2 cf       	rjmp	.-188    	; 0x150 <main+0x2e>

0000020c <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 20c:	66 23       	and	r22, r22
 20e:	11 f0       	breq	.+4      	; 0x214 <lcd_write+0x8>
       lcd_rs_high();
 210:	28 9a       	sbi	0x05, 0	; 5
 212:	01 c0       	rjmp	.+2      	; 0x216 <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 214:	28 98       	cbi	0x05, 0	; 5
    }
    lcd_rw_low();
 216:	29 98       	cbi	0x05, 1	; 5
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 218:	23 9a       	sbi	0x04, 3	; 4
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 21a:	24 9a       	sbi	0x04, 4	; 4
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 21c:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 21e:	26 9a       	sbi	0x04, 6	; 4
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 220:	2e 98       	cbi	0x05, 6	; 5
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 222:	2d 98       	cbi	0x05, 5	; 5
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 224:	2c 98       	cbi	0x05, 4	; 5
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 226:	2b 98       	cbi	0x05, 3	; 5
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 228:	87 fd       	sbrc	r24, 7
 22a:	2e 9a       	sbi	0x05, 6	; 5
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 22c:	86 fd       	sbrc	r24, 6
 22e:	2d 9a       	sbi	0x05, 5	; 5
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 230:	85 fd       	sbrc	r24, 5
 232:	2c 9a       	sbi	0x05, 4	; 5
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 234:	84 fd       	sbrc	r24, 4
 236:	2b 9a       	sbi	0x05, 3	; 5

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 238:	2a 9a       	sbi	0x05, 2	; 5
    lcd_e_delay();
 23a:	00 c0       	rjmp	.+0      	; 0x23c <lcd_write+0x30>
    lcd_e_low();
 23c:	2a 98       	cbi	0x05, 2	; 5
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 23e:	2e 98       	cbi	0x05, 6	; 5
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 240:	2d 98       	cbi	0x05, 5	; 5
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 242:	2c 98       	cbi	0x05, 4	; 5
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 244:	2b 98       	cbi	0x05, 3	; 5
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 246:	83 fd       	sbrc	r24, 3
 248:	2e 9a       	sbi	0x05, 6	; 5
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 24a:	82 fd       	sbrc	r24, 2
 24c:	2d 9a       	sbi	0x05, 5	; 5
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 24e:	81 fd       	sbrc	r24, 1
 250:	2c 9a       	sbi	0x05, 4	; 5
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 252:	80 fd       	sbrc	r24, 0
 254:	2b 9a       	sbi	0x05, 3	; 5

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 256:	2a 9a       	sbi	0x05, 2	; 5
    lcd_e_delay();
 258:	00 c0       	rjmp	.+0      	; 0x25a <lcd_write+0x4e>
    lcd_e_low();
 25a:	2a 98       	cbi	0x05, 2	; 5
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 25c:	2b 9a       	sbi	0x05, 3	; 5
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 25e:	2c 9a       	sbi	0x05, 4	; 5
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 260:	2d 9a       	sbi	0x05, 5	; 5
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 262:	2e 9a       	sbi	0x05, 6	; 5
    }
}
 264:	08 95       	ret

00000266 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 266:	88 23       	and	r24, r24
 268:	11 f0       	breq	.+4      	; 0x26e <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 26a:	28 9a       	sbi	0x05, 0	; 5
 26c:	01 c0       	rjmp	.+2      	; 0x270 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 26e:	28 98       	cbi	0x05, 0	; 5
    lcd_rw_high();                           /* RW=1  read mode      */
 270:	29 9a       	sbi	0x05, 1	; 5
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 272:	23 98       	cbi	0x04, 3	; 4
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 274:	24 98       	cbi	0x04, 4	; 4
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 276:	25 98       	cbi	0x04, 5	; 4
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 278:	26 98       	cbi	0x04, 6	; 4
                
        /* read high nibble first */
        lcd_e_high();
 27a:	2a 9a       	sbi	0x05, 2	; 5
        lcd_e_delay();        
 27c:	00 c0       	rjmp	.+0      	; 0x27e <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 27e:	1b 9b       	sbis	0x03, 3	; 3
 280:	02 c0       	rjmp	.+4      	; 0x286 <lcd_read+0x20>
 282:	80 e1       	ldi	r24, 0x10	; 16
 284:	01 c0       	rjmp	.+2      	; 0x288 <lcd_read+0x22>
 286:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 288:	1c 99       	sbic	0x03, 4	; 3
 28a:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 28c:	1d 99       	sbic	0x03, 5	; 3
 28e:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 290:	1e 99       	sbic	0x03, 6	; 3
 292:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 294:	2a 98       	cbi	0x05, 2	; 5

        lcd_e_delay();                       /* Enable 500ns low       */
 296:	00 c0       	rjmp	.+0      	; 0x298 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 298:	2a 9a       	sbi	0x05, 2	; 5
        lcd_e_delay();
 29a:	00 c0       	rjmp	.+0      	; 0x29c <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 29c:	1b 99       	sbic	0x03, 3	; 3
 29e:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 2a0:	1c 99       	sbic	0x03, 4	; 3
 2a2:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 2a4:	1d 99       	sbic	0x03, 5	; 3
 2a6:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 2a8:	1e 99       	sbic	0x03, 6	; 3
 2aa:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 2ac:	2a 98       	cbi	0x05, 2	; 5
    }
    return data;
}
 2ae:	08 95       	ret

000002b0 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	0e 94 33 01 	call	0x266	; 0x266 <lcd_read>
 2b6:	87 fd       	sbrc	r24, 7
 2b8:	fb cf       	rjmp	.-10     	; 0x2b0 <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	0e 94 33 01 	call	0x266	; 0x266 <lcd_read>
    
}/* lcd_waitbusy */
 2c8:	08 95       	ret

000002ca <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 2ca:	1f 93       	push	r17
 2cc:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 2ce:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_waitbusy>
    lcd_write(cmd,0);
 2d2:	81 2f       	mov	r24, r17
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_write>
}
 2da:	1f 91       	pop	r17
 2dc:	08 95       	ret

000002de <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 2de:	1f 93       	push	r17
 2e0:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 2e2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_waitbusy>
    lcd_write(data,1);
 2e6:	81 2f       	mov	r24, r17
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_write>
}
 2ee:	1f 91       	pop	r17
 2f0:	08 95       	ret

000002f2 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 2f2:	66 23       	and	r22, r22
 2f4:	11 f4       	brne	.+4      	; 0x2fa <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 2f6:	80 58       	subi	r24, 0x80	; 128
 2f8:	01 c0       	rjmp	.+2      	; 0x2fc <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 2fa:	80 54       	subi	r24, 0x40	; 64
 2fc:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_command>
 300:	08 95       	ret

00000302 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 302:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_waitbusy>
}
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	08 95       	ret

0000030a <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_command>
}
 310:	08 95       	ret

00000312 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_command>
}
 318:	08 95       	ret

0000031a <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 31a:	1f 93       	push	r17
 31c:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 31e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_waitbusy>
    if (c=='\n')
 322:	1a 30       	cpi	r17, 0x0A	; 10
 324:	49 f4       	brne	.+18     	; 0x338 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 326:	80 34       	cpi	r24, 0x40	; 64
 328:	10 f0       	brcs	.+4      	; 0x32e <lcd_putc+0x14>
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	01 c0       	rjmp	.+2      	; 0x330 <lcd_putc+0x16>
 32e:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 330:	80 58       	subi	r24, 0x80	; 128
 332:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_command>
 336:	04 c0       	rjmp	.+8      	; 0x340 <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 338:	81 2f       	mov	r24, r17
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_write>
    }

}/* lcd_putc */
 340:	1f 91       	pop	r17
 342:	08 95       	ret

00000344 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	ec 01       	movw	r28, r24
 34a:	02 c0       	rjmp	.+4      	; 0x350 <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 34c:	0e 94 8d 01 	call	0x31a	; 0x31a <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 350:	89 91       	ld	r24, Y+
 352:	88 23       	and	r24, r24
 354:	d9 f7       	brne	.-10     	; 0x34c <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	ec 01       	movw	r28, r24
 362:	02 c0       	rjmp	.+4      	; 0x368 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 364:	0e 94 8d 01 	call	0x31a	; 0x31a <lcd_putc>
 368:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 36a:	21 96       	adiw	r28, 0x01	; 1
 36c:	84 91       	lpm	r24, Z+
 36e:	88 23       	and	r24, r24
 370:	c9 f7       	brne	.-14     	; 0x364 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 378:	1f 93       	push	r17
 37a:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 37c:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 37e:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 380:	22 9a       	sbi	0x04, 2	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 382:	23 9a       	sbi	0x04, 3	; 4
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 384:	24 9a       	sbi	0x04, 4	; 4
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 386:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 388:	26 9a       	sbi	0x04, 6	; 4
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 38a:	80 e8       	ldi	r24, 0x80	; 128
 38c:	9e e3       	ldi	r25, 0x3E	; 62
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 392:	2c 9a       	sbi	0x05, 4	; 5
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 394:	2b 9a       	sbi	0x05, 3	; 5

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 396:	2a 9a       	sbi	0x05, 2	; 5
    lcd_e_delay();
 398:	00 c0       	rjmp	.+0      	; 0x39a <lcd_init+0x22>
    lcd_e_low();
 39a:	2a 98       	cbi	0x05, 2	; 5
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 39c:	80 e8       	ldi	r24, 0x80	; 128
 39e:	93 e1       	ldi	r25, 0x13	; 19
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <lcd_init+0x28>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 3a4:	2a 9a       	sbi	0x05, 2	; 5
    lcd_e_delay();
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <lcd_init+0x30>
    lcd_e_low();
 3a8:	2a 98       	cbi	0x05, 2	; 5
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3aa:	80 e4       	ldi	r24, 0x40	; 64
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	fc 01       	movw	r30, r24
 3b0:	31 97       	sbiw	r30, 0x01	; 1
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <lcd_init+0x38>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 3b4:	2a 9a       	sbi	0x05, 2	; 5
    lcd_e_delay();
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <lcd_init+0x40>
    lcd_e_low();
 3b8:	2a 98       	cbi	0x05, 2	; 5
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3ba:	fc 01       	movw	r30, r24
 3bc:	31 97       	sbiw	r30, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <lcd_init+0x44>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 3c0:	2b 98       	cbi	0x05, 3	; 5

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 3c2:	2a 9a       	sbi	0x05, 2	; 5
    lcd_e_delay();
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <lcd_init+0x4e>
    lcd_e_low();
 3c6:	2a 98       	cbi	0x05, 2	; 5
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 3cc:	88 e2       	ldi	r24, 0x28	; 40
 3ce:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 3d2:	88 e0       	ldi	r24, 0x08	; 8
 3d4:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 3d8:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 3dc:	86 e0       	ldi	r24, 0x06	; 6
 3de:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 3e2:	81 2f       	mov	r24, r17
 3e4:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_command>

}/* lcd_init */
 3e8:	1f 91       	pop	r17
 3ea:	08 95       	ret

000003ec <itoa>:
 3ec:	fb 01       	movw	r30, r22
 3ee:	9f 01       	movw	r18, r30
 3f0:	e8 94       	clt
 3f2:	42 30       	cpi	r20, 0x02	; 2
 3f4:	c4 f0       	brlt	.+48     	; 0x426 <itoa+0x3a>
 3f6:	45 32       	cpi	r20, 0x25	; 37
 3f8:	b4 f4       	brge	.+44     	; 0x426 <itoa+0x3a>
 3fa:	4a 30       	cpi	r20, 0x0A	; 10
 3fc:	29 f4       	brne	.+10     	; 0x408 <itoa+0x1c>
 3fe:	97 fb       	bst	r25, 7
 400:	1e f4       	brtc	.+6      	; 0x408 <itoa+0x1c>
 402:	90 95       	com	r25
 404:	81 95       	neg	r24
 406:	9f 4f       	sbci	r25, 0xFF	; 255
 408:	64 2f       	mov	r22, r20
 40a:	77 27       	eor	r23, r23
 40c:	0e 94 27 02 	call	0x44e	; 0x44e <__udivmodhi4>
 410:	80 5d       	subi	r24, 0xD0	; 208
 412:	8a 33       	cpi	r24, 0x3A	; 58
 414:	0c f0       	brlt	.+2      	; 0x418 <itoa+0x2c>
 416:	89 5d       	subi	r24, 0xD9	; 217
 418:	81 93       	st	Z+, r24
 41a:	cb 01       	movw	r24, r22
 41c:	00 97       	sbiw	r24, 0x00	; 0
 41e:	a1 f7       	brne	.-24     	; 0x408 <itoa+0x1c>
 420:	16 f4       	brtc	.+4      	; 0x426 <itoa+0x3a>
 422:	5d e2       	ldi	r21, 0x2D	; 45
 424:	51 93       	st	Z+, r21
 426:	10 82       	st	Z, r1
 428:	c9 01       	movw	r24, r18
 42a:	0c 94 17 02 	jmp	0x42e	; 0x42e <strrev>

0000042e <strrev>:
 42e:	dc 01       	movw	r26, r24
 430:	fc 01       	movw	r30, r24
 432:	67 2f       	mov	r22, r23
 434:	71 91       	ld	r23, Z+
 436:	77 23       	and	r23, r23
 438:	e1 f7       	brne	.-8      	; 0x432 <strrev+0x4>
 43a:	32 97       	sbiw	r30, 0x02	; 2
 43c:	04 c0       	rjmp	.+8      	; 0x446 <strrev+0x18>
 43e:	7c 91       	ld	r23, X
 440:	6d 93       	st	X+, r22
 442:	70 83       	st	Z, r23
 444:	62 91       	ld	r22, -Z
 446:	ae 17       	cp	r26, r30
 448:	bf 07       	cpc	r27, r31
 44a:	c8 f3       	brcs	.-14     	; 0x43e <strrev+0x10>
 44c:	08 95       	ret

0000044e <__udivmodhi4>:
 44e:	aa 1b       	sub	r26, r26
 450:	bb 1b       	sub	r27, r27
 452:	51 e1       	ldi	r21, 0x11	; 17
 454:	07 c0       	rjmp	.+14     	; 0x464 <__udivmodhi4_ep>

00000456 <__udivmodhi4_loop>:
 456:	aa 1f       	adc	r26, r26
 458:	bb 1f       	adc	r27, r27
 45a:	a6 17       	cp	r26, r22
 45c:	b7 07       	cpc	r27, r23
 45e:	10 f0       	brcs	.+4      	; 0x464 <__udivmodhi4_ep>
 460:	a6 1b       	sub	r26, r22
 462:	b7 0b       	sbc	r27, r23

00000464 <__udivmodhi4_ep>:
 464:	88 1f       	adc	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	5a 95       	dec	r21
 46a:	a9 f7       	brne	.-22     	; 0x456 <__udivmodhi4_loop>
 46c:	80 95       	com	r24
 46e:	90 95       	com	r25
 470:	bc 01       	movw	r22, r24
 472:	cd 01       	movw	r24, r26
 474:	08 95       	ret

00000476 <_exit>:
 476:	f8 94       	cli

00000478 <__stop_program>:
 478:	ff cf       	rjmp	.-2      	; 0x478 <__stop_program>
