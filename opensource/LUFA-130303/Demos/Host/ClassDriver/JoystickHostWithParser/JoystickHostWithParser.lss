
JoystickHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00002542  000025d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002542  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fb  00800142  00800142  00002618  2**0
                  ALLOC
  3 .stab         00000f90  00000000  00000000  00002618  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000030d  00000000  00000000  000035a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000890  00000000  00000000  000038b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000da81  00000000  00000000  00004148  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003423  00000000  00000000  00011bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005cc8  00000000  00000000  00014fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001974  00000000  00000000  0001acb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004fa8  00000000  00000000  0001c628  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000985d  00000000  00000000  000215d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a58  00000000  00000000  0002ae2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1f c1       	rjmp	.+574    	; 0x240 <__ctors_end>
       2:	00 00       	nop
       4:	3c c1       	rjmp	.+632    	; 0x27e <__bad_interrupt>
       6:	00 00       	nop
       8:	3a c1       	rjmp	.+628    	; 0x27e <__bad_interrupt>
       a:	00 00       	nop
       c:	38 c1       	rjmp	.+624    	; 0x27e <__bad_interrupt>
       e:	00 00       	nop
      10:	36 c1       	rjmp	.+620    	; 0x27e <__bad_interrupt>
      12:	00 00       	nop
      14:	34 c1       	rjmp	.+616    	; 0x27e <__bad_interrupt>
      16:	00 00       	nop
      18:	32 c1       	rjmp	.+612    	; 0x27e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	30 c1       	rjmp	.+608    	; 0x27e <__bad_interrupt>
      1e:	00 00       	nop
      20:	2e c1       	rjmp	.+604    	; 0x27e <__bad_interrupt>
      22:	00 00       	nop
      24:	2c c1       	rjmp	.+600    	; 0x27e <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__vector_10>
      2c:	28 c1       	rjmp	.+592    	; 0x27e <__bad_interrupt>
      2e:	00 00       	nop
      30:	26 c1       	rjmp	.+588    	; 0x27e <__bad_interrupt>
      32:	00 00       	nop
      34:	24 c1       	rjmp	.+584    	; 0x27e <__bad_interrupt>
      36:	00 00       	nop
      38:	22 c1       	rjmp	.+580    	; 0x27e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	20 c1       	rjmp	.+576    	; 0x27e <__bad_interrupt>
      3e:	00 00       	nop
      40:	1e c1       	rjmp	.+572    	; 0x27e <__bad_interrupt>
      42:	00 00       	nop
      44:	1c c1       	rjmp	.+568    	; 0x27e <__bad_interrupt>
      46:	00 00       	nop
      48:	1a c1       	rjmp	.+564    	; 0x27e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	18 c1       	rjmp	.+560    	; 0x27e <__bad_interrupt>
      4e:	00 00       	nop
      50:	16 c1       	rjmp	.+556    	; 0x27e <__bad_interrupt>
      52:	00 00       	nop
      54:	14 c1       	rjmp	.+552    	; 0x27e <__bad_interrupt>
      56:	00 00       	nop
      58:	12 c1       	rjmp	.+548    	; 0x27e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	10 c1       	rjmp	.+544    	; 0x27e <__bad_interrupt>
      5e:	00 00       	nop
      60:	0e c1       	rjmp	.+540    	; 0x27e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c c1       	rjmp	.+536    	; 0x27e <__bad_interrupt>
      66:	00 00       	nop
      68:	0a c1       	rjmp	.+532    	; 0x27e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	08 c1       	rjmp	.+528    	; 0x27e <__bad_interrupt>
      6e:	00 00       	nop
      70:	06 c1       	rjmp	.+524    	; 0x27e <__bad_interrupt>
      72:	00 00       	nop
      74:	04 c1       	rjmp	.+520    	; 0x27e <__bad_interrupt>
      76:	00 00       	nop
      78:	02 c1       	rjmp	.+516    	; 0x27e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	00 c1       	rjmp	.+512    	; 0x27e <__bad_interrupt>
      7e:	00 00       	nop
      80:	fe c0       	rjmp	.+508    	; 0x27e <__bad_interrupt>
      82:	00 00       	nop
      84:	fc c0       	rjmp	.+504    	; 0x27e <__bad_interrupt>
      86:	00 00       	nop
      88:	fa c0       	rjmp	.+500    	; 0x27e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f8 c0       	rjmp	.+496    	; 0x27e <__bad_interrupt>
      8e:	00 00       	nop
      90:	f6 c0       	rjmp	.+492    	; 0x27e <__bad_interrupt>
      92:	00 00       	nop
      94:	f4 c0       	rjmp	.+488    	; 0x27e <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4265>:
      98:	1b 5b 33 36 6d 4a 6f 79 73 74 69 63 6b 20 48 6f     .[36mJoystick Ho
      a8:	73 74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e     st Demo running.
      b8:	0d 0a 1b 5b 33 37 6d 00                             ...[37m.

000000c0 <__c.4286>:
      c0:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
      d0:	0d 0a 00                                            ...

000000d3 <__c.4291>:
      d3:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
      e3:	68 65 64 2e 0d 0a 00                                hed....

000000ea <__c.4298>:
      ea:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
      fa:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     10a:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

00000117 <__c.4300>:
     117:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     127:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4a 6f 79 73     Not a Valid Joys
     137:	74 69 63 6b 2e 0d 0a 00                             tick....

0000013f <__c.4302>:
     13f:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     14f:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     15f:	6f 6e 2e 0d 0a 00                                   on....

00000165 <__c.4304>:
     165:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 52 65     Error Setting Re
     175:	70 6f 72 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f     port Protocol Mo
     185:	64 65 20 6f 72 20 4e 6f 74 20 61 20 56 61 6c 69     de or Not a Vali
     195:	64 20 4a 6f 79 73 74 69 63 6b 2e 0d 0a 00           d Joystick....

000001a3 <__c.4306>:
     1a3:	4a 6f 79 73 74 69 63 6b 20 45 6e 75 6d 65 72 61     Joystick Enumera
     1b3:	74 65 64 2e 0d 0a 00                                ted....

000001ba <__c.4311>:
     1ba:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     1ca:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     1da:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

000001e9 <__c.4318>:
     1e9:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     1f9:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     209:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     219:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     229:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     239:	1b 5b 33 37 6d 00 00                                .[37m..

00000240 <__ctors_end>:
     240:	11 24       	eor	r1, r1
     242:	1f be       	out	0x3f, r1	; 63
     244:	cf ef       	ldi	r28, 0xFF	; 255
     246:	d0 e2       	ldi	r29, 0x20	; 32
     248:	de bf       	out	0x3e, r29	; 62
     24a:	cd bf       	out	0x3d, r28	; 61

0000024c <__do_copy_data>:
     24c:	11 e0       	ldi	r17, 0x01	; 1
     24e:	a0 e0       	ldi	r26, 0x00	; 0
     250:	b1 e0       	ldi	r27, 0x01	; 1
     252:	e2 e4       	ldi	r30, 0x42	; 66
     254:	f5 e2       	ldi	r31, 0x25	; 37
     256:	00 e0       	ldi	r16, 0x00	; 0
     258:	0b bf       	out	0x3b, r16	; 59
     25a:	02 c0       	rjmp	.+4      	; 0x260 <__do_copy_data+0x14>
     25c:	07 90       	elpm	r0, Z+
     25e:	0d 92       	st	X+, r0
     260:	a2 34       	cpi	r26, 0x42	; 66
     262:	b1 07       	cpc	r27, r17
     264:	d9 f7       	brne	.-10     	; 0x25c <__do_copy_data+0x10>
     266:	1b be       	out	0x3b, r1	; 59

00000268 <__do_clear_bss>:
     268:	15 e0       	ldi	r17, 0x05	; 5
     26a:	a2 e4       	ldi	r26, 0x42	; 66
     26c:	b1 e0       	ldi	r27, 0x01	; 1
     26e:	01 c0       	rjmp	.+2      	; 0x272 <.do_clear_bss_start>

00000270 <.do_clear_bss_loop>:
     270:	1d 92       	st	X+, r1

00000272 <.do_clear_bss_start>:
     272:	ad 33       	cpi	r26, 0x3D	; 61
     274:	b1 07       	cpc	r27, r17
     276:	e1 f7       	brne	.-8      	; 0x270 <.do_clear_bss_loop>
     278:	ef d0       	rcall	.+478    	; 0x458 <main>
     27a:	0c 94 9f 12 	jmp	0x253e	; 0x253e <_exit>

0000027e <__bad_interrupt>:
     27e:	c0 ce       	rjmp	.-640    	; 0x0 <__vectors>

00000280 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     280:	9b b1       	in	r25, 0x0b	; 11
     282:	9f 70       	andi	r25, 0x0F	; 15
     284:	98 2b       	or	r25, r24
     286:	9b b9       	out	0x0b, r25	; 11
			}
     288:	08 95       	ret

0000028a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     28a:	84 b7       	in	r24, 0x34	; 52
     28c:	87 7f       	andi	r24, 0xF7	; 247
     28e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     290:	28 e1       	ldi	r18, 0x18	; 24
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	20 93 60 00 	sts	0x0060, r18
     29a:	10 92 60 00 	sts	0x0060, r1
     29e:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	80 e8       	ldi	r24, 0x80	; 128
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	f8 94       	cli
     2a8:	80 93 61 00 	sts	0x0061, r24
     2ac:	90 93 61 00 	sts	0x0061, r25
     2b0:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2b2:	83 e3       	ldi	r24, 0x33	; 51
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	90 93 cd 00 	sts	0x00CD, r25
     2ba:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2be:	86 e0       	ldi	r24, 0x06	; 6
     2c0:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2c4:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2c8:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     2cc:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2ce:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2d0:	8a b1       	in	r24, 0x0a	; 10
     2d2:	80 6f       	ori	r24, 0xF0	; 240
     2d4:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2d6:	8b b1       	in	r24, 0x0b	; 11
     2d8:	8f 70       	andi	r24, 0x0F	; 15
     2da:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     2dc:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <Serial_CreateStream>

000002e8 <JoystickHost_Task>:
}
     2e8:	4f 92       	push	r4

/** Task to manage an enumerated USB joystick once connected, to display movement
 *  data as it is received.
 */
void JoystickHost_Task(void)
{
     2ea:	5f 92       	push	r5
     2ec:	6f 92       	push	r6
     2ee:	7f 92       	push	r7
     2f0:	8f 92       	push	r8
     2f2:	9f 92       	push	r9
     2f4:	bf 92       	push	r11
     2f6:	cf 92       	push	r12
     2f8:	df 92       	push	r13
     2fa:	ef 92       	push	r14
     2fc:	ff 92       	push	r15
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	0f 92       	push	r0
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
			}
		}

		LEDs_SetAllLEDs(LEDMask);
	}
}
     30c:	4d b6       	in	r4, 0x3d	; 61
     30e:	5e b6       	in	r5, 0x3e	; 62
/** Task to manage an enumerated USB joystick once connected, to display movement
 *  data as it is received.
 */
void JoystickHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     310:	80 91 28 05 	lds	r24, 0x0528
     314:	8b 30       	cpi	r24, 0x0B	; 11
     316:	09 f0       	breq	.+2      	; 0x31a <JoystickHost_Task+0x32>
     318:	89 c0       	rjmp	.+274    	; 0x42c <JoystickHost_Task+0x144>
	  return;

	if (HID_Host_IsReportReceived(&Joystick_HID_Interface))
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <HID_Host_IsReportReceived>
     322:	88 23       	and	r24, r24
     324:	09 f4       	brne	.+2      	; 0x328 <JoystickHost_Task+0x40>
     326:	82 c0       	rjmp	.+260    	; 0x42c <JoystickHost_Task+0x144>
     328:	cd b6       	in	r12, 0x3d	; 61
     32a:	be b6       	in	r11, 0x3e	; 62
	{
		uint8_t JoystickReport[Joystick_HID_Interface.State.LargestReportSize];
     32c:	80 91 16 01 	lds	r24, 0x0116
     330:	2d b7       	in	r18, 0x3d	; 61
     332:	3e b7       	in	r19, 0x3e	; 62
     334:	28 1b       	sub	r18, r24
     336:	31 09       	sbc	r19, r1
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	f8 94       	cli
     33c:	3e bf       	out	0x3e, r19	; 62
     33e:	0f be       	out	0x3f, r0	; 63
     340:	2d bf       	out	0x3d, r18	; 61
     342:	6d b7       	in	r22, 0x3d	; 61
     344:	7e b7       	in	r23, 0x3e	; 62
     346:	6f 5f       	subi	r22, 0xFF	; 255
     348:	7f 4f       	sbci	r23, 0xFF	; 255
		HID_Host_ReceiveReport(&Joystick_HID_Interface, &JoystickReport);
     34a:	e6 2e       	mov	r14, r22
     34c:	d7 2e       	mov	r13, r23
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	0e 94 76 0e 	call	0x1cec	; 0x1cec <HID_Host_ReceiveReport>

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     356:	ff 24       	eor	r15, r15
	if (HID_Host_IsReportReceived(&Joystick_HID_Interface))
	{
		uint8_t JoystickReport[Joystick_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Joystick_HID_Interface, &JoystickReport);

		uint8_t LEDMask = LEDS_NO_LEDS;
     358:	20 e0       	ldi	r18, 0x00	; 0

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     35a:	8a e2       	ldi	r24, 0x2A	; 42
     35c:	68 2e       	mov	r6, r24
     35e:	71 2c       	mov	r7, r1
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
			         ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
			          (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
			{
				int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     360:	40 e1       	ldi	r20, 0x10	; 16
     362:	84 2e       	mov	r8, r20
     364:	91 2c       	mov	r9, r1
		uint8_t JoystickReport[Joystick_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Joystick_HID_Interface, &JoystickReport);

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     366:	59 c0       	rjmp	.+178    	; 0x41a <JoystickHost_Task+0x132>
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     368:	8f 2d       	mov	r24, r15
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	86 9d       	mul	r24, r6
     36e:	80 01       	movw	r16, r0
     370:	87 9d       	mul	r24, r7
     372:	10 0d       	add	r17, r0
     374:	96 9d       	mul	r25, r6
     376:	10 0d       	add	r17, r0
     378:	11 24       	eor	r1, r1
     37a:	0d 5b       	subi	r16, 0xBD	; 189
     37c:	1e 4f       	sbci	r17, 0xFE	; 254

			/* Update the report item value if it is contained within the current report */
			if (!(USB_GetHIDReportItemInfo(JoystickReport, ReportItem)))
     37e:	8e 2d       	mov	r24, r14
     380:	9d 2d       	mov	r25, r13
     382:	b8 01       	movw	r22, r16
     384:	29 83       	std	Y+1, r18	; 0x01
     386:	02 d5       	rcall	.+2564   	; 0xd8c <USB_GetHIDReportItemInfo>
     388:	29 81       	ldd	r18, Y+1	; 0x01
     38a:	88 23       	and	r24, r24
     38c:	09 f4       	brne	.+2      	; 0x390 <JoystickHost_Task+0xa8>
     38e:	44 c0       	rjmp	.+136    	; 0x418 <JoystickHost_Task+0x130>
     390:	f8 01       	movw	r30, r16
			  continue;

			/* Determine what report item is being tested, process updated value as needed */
			if ((ReportItem->Attributes.Usage.Page        == USAGE_PAGE_BUTTON) &&
     392:	81 85       	ldd	r24, Z+9	; 0x09
     394:	92 85       	ldd	r25, Z+10	; 0x0a
     396:	89 30       	cpi	r24, 0x09	; 9
     398:	91 05       	cpc	r25, r1
     39a:	61 f4       	brne	.+24     	; 0x3b4 <JoystickHost_Task+0xcc>
     39c:	82 81       	ldd	r24, Z+2	; 0x02
     39e:	88 23       	and	r24, r24
     3a0:	d9 f5       	brne	.+118    	; 0x418 <JoystickHost_Task+0x130>
     3a2:	82 a1       	lds	r24, 0x42
			    (ReportItem->ItemType                     == HID_REPORT_ITEM_In))
			{
				if (ReportItem->Value)
     3a4:	93 a1       	lds	r25, 0x43
     3a6:	a4 a1       	lds	r26, 0x44
     3a8:	b5 a1       	lds	r27, 0x45
     3aa:	00 97       	sbiw	r24, 0x00	; 0
     3ac:	a1 05       	cpc	r26, r1
     3ae:	b1 05       	cpc	r27, r1
     3b0:	91 f5       	brne	.+100    	; 0x416 <JoystickHost_Task+0x12e>
     3b2:	32 c0       	rjmp	.+100    	; 0x418 <JoystickHost_Task+0x130>
     3b4:	81 30       	cpi	r24, 0x01	; 1
				  LEDMask = LEDS_ALL_LEDS;
			}
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     3b6:	91 05       	cpc	r25, r1
     3b8:	79 f5       	brne	.+94     	; 0x418 <JoystickHost_Task+0x130>
     3ba:	f8 01       	movw	r30, r16
			         ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
     3bc:	43 85       	ldd	r20, Z+11	; 0x0b
     3be:	54 85       	ldd	r21, Z+12	; 0x0c
     3c0:	ca 01       	movw	r24, r20
     3c2:	c0 97       	sbiw	r24, 0x30	; 48
     3c4:	82 30       	cpi	r24, 0x02	; 2
			    (ReportItem->ItemType                     == HID_REPORT_ITEM_In))
			{
				if (ReportItem->Value)
				  LEDMask = LEDS_ALL_LEDS;
			}
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     3c6:	91 05       	cpc	r25, r1
     3c8:	38 f5       	brcc	.+78     	; 0x418 <JoystickHost_Task+0x130>
     3ca:	82 81       	ldd	r24, Z+2	; 0x02
			         ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
			          (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
     3cc:	88 23       	and	r24, r24
     3ce:	21 f5       	brne	.+72     	; 0x418 <JoystickHost_Task+0x130>
     3d0:	80 85       	ldd	r24, Z+8	; 0x08
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
			{
				int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     3d2:	b4 01       	movw	r22, r8
     3d4:	68 1b       	sub	r22, r24
     3d6:	71 09       	sbc	r23, r1
     3d8:	82 a1       	lds	r24, 0x42
     3da:	93 a1       	lds	r25, 0x43
     3dc:	a4 a1       	lds	r26, 0x44
     3de:	b5 a1       	lds	r27, 0x45
     3e0:	04 c0       	rjmp	.+8      	; 0x3ea <JoystickHost_Task+0x102>
     3e2:	88 0f       	add	r24, r24
     3e4:	99 1f       	adc	r25, r25
     3e6:	aa 1f       	adc	r26, r26
     3e8:	bb 1f       	adc	r27, r27
     3ea:	6a 95       	dec	r22
     3ec:	d2 f7       	brpl	.-12     	; 0x3e2 <JoystickHost_Task+0xfa>
     3ee:	00 97       	sbiw	r24, 0x00	; 0

				if (DeltaMovement)
     3f0:	99 f0       	breq	.+38     	; 0x418 <JoystickHost_Task+0x130>
     3f2:	40 33       	cpi	r20, 0x30	; 48
				{
					if (ReportItem->Attributes.Usage.Usage == USAGE_X)
     3f4:	51 05       	cpc	r21, r1
     3f6:	39 f4       	brne	.+14     	; 0x406 <JoystickHost_Task+0x11e>
     3f8:	18 16       	cp	r1, r24
					  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED1 : LEDS_LED2);
     3fa:	19 06       	cpc	r1, r25
     3fc:	14 f4       	brge	.+4      	; 0x402 <JoystickHost_Task+0x11a>
     3fe:	80 e1       	ldi	r24, 0x10	; 16
     400:	08 c0       	rjmp	.+16     	; 0x412 <JoystickHost_Task+0x12a>
     402:	80 e2       	ldi	r24, 0x20	; 32
     404:	06 c0       	rjmp	.+12     	; 0x412 <JoystickHost_Task+0x12a>
     406:	18 16       	cp	r1, r24
					else
					  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
     408:	19 06       	cpc	r1, r25
     40a:	14 f4       	brge	.+4      	; 0x410 <JoystickHost_Task+0x128>
     40c:	80 e8       	ldi	r24, 0x80	; 128
     40e:	01 c0       	rjmp	.+2      	; 0x412 <JoystickHost_Task+0x12a>
     410:	80 e4       	ldi	r24, 0x40	; 64
     412:	28 2b       	or	r18, r24
     414:	01 c0       	rjmp	.+2      	; 0x418 <JoystickHost_Task+0x130>
     416:	20 ef       	ldi	r18, 0xF0	; 240
			/* Determine what report item is being tested, process updated value as needed */
			if ((ReportItem->Attributes.Usage.Page        == USAGE_PAGE_BUTTON) &&
			    (ReportItem->ItemType                     == HID_REPORT_ITEM_In))
			{
				if (ReportItem->Value)
				  LEDMask = LEDS_ALL_LEDS;
     418:	f3 94       	inc	r15
		uint8_t JoystickReport[Joystick_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Joystick_HID_Interface, &JoystickReport);

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     41a:	80 91 42 01 	lds	r24, 0x0142
     41e:	f8 16       	cp	r15, r24
     420:	08 f4       	brcc	.+2      	; 0x424 <JoystickHost_Task+0x13c>
     422:	a2 cf       	rjmp	.-188    	; 0x368 <JoystickHost_Task+0x80>
     424:	82 2f       	mov	r24, r18
					  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
				}
			}
		}

		LEDs_SetAllLEDs(LEDMask);
     426:	2c df       	rcall	.-424    	; 0x280 <LEDs_SetAllLEDs>
     428:	cd be       	out	0x3d, r12	; 61
     42a:	be be       	out	0x3e, r11	; 62
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
	}
}
     430:	5e be       	out	0x3e, r5	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	4d be       	out	0x3d, r4	; 61
     436:	0f 90       	pop	r0
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	1f 91       	pop	r17
     43e:	0f 91       	pop	r16
     440:	ff 90       	pop	r15
     442:	ef 90       	pop	r14
     444:	df 90       	pop	r13
     446:	cf 90       	pop	r12
     448:	bf 90       	pop	r11
     44a:	9f 90       	pop	r9
     44c:	8f 90       	pop	r8
     44e:	7f 90       	pop	r7
     450:	6f 90       	pop	r6
     452:	5f 90       	pop	r5
     454:	4f 90       	pop	r4
     456:	08 95       	ret

00000458 <main>:
     458:	18 df       	rcall	.-464    	; 0x28a <SetupHardware>
     45a:	88 e9       	ldi	r24, 0x98	; 152
 */
int main(void)
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "Joystick Host Demo running.\r\n" ESC_FG_WHITE));
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <puts_P>
     462:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     464:	0d df       	rcall	.-486    	; 0x280 <LEDs_SetAllLEDs>
     466:	78 94       	sei
     468:	3f df       	rcall	.-386    	; 0x2e8 <JoystickHost_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     46a:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		JoystickHost_Task();
     46e:	fc cf       	rjmp	.-8      	; 0x468 <main+0x10>

00000470 <EVENT_USB_Host_DeviceAttached>:

		HID_Host_USBTask(&Joystick_HID_Interface);
		USB_USBTask();
     470:	80 ec       	ldi	r24, 0xC0	; 192
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <puts_P>
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     478:	80 ea       	ldi	r24, 0xA0	; 160
     47a:	02 cf       	rjmp	.-508    	; 0x280 <LEDs_SetAllLEDs>

0000047c <EVENT_USB_Host_DeviceUnattached>:
     47c:	83 ed       	ldi	r24, 0xD3	; 211
}
     47e:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     480:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     484:	80 e1       	ldi	r24, 0x10	; 16
     486:	fc ce       	rjmp	.-520    	; 0x280 <LEDs_SetAllLEDs>

00000488 <EVENT_USB_Host_DeviceEnumerationComplete>:
     488:	cf 93       	push	r28
}
     48a:	df 93       	push	r29

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     48c:	cd b7       	in	r28, 0x3d	; 61
     48e:	de b7       	in	r29, 0x3e	; 62
     490:	c2 50       	subi	r28, 0x02	; 2
     492:	d2 40       	sbci	r29, 0x02	; 2
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	f8 94       	cli
     498:	de bf       	out	0x3e, r29	; 62
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     49e:	80 ea       	ldi	r24, 0xA0	; 160
     4a0:	ef de       	rcall	.-546    	; 0x280 <LEDs_SetAllLEDs>
     4a2:	81 e0       	ldi	r24, 0x01	; 1

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     4a4:	be 01       	movw	r22, r28
     4a6:	6f 5f       	subi	r22, 0xFF	; 255
     4a8:	7f 4f       	sbci	r23, 0xFF	; 255
     4aa:	ae 01       	movw	r20, r28
     4ac:	4d 5f       	subi	r20, 0xFD	; 253
     4ae:	5f 4f       	sbci	r21, 0xFF	; 255
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	32 e0       	ldi	r19, 0x02	; 2
     4b4:	0e 94 88 0b 	call	0x1710	; 0x1710 <USB_Host_GetDeviceConfigDescriptor>
     4b8:	88 23       	and	r24, r24
     4ba:	19 f0       	breq	.+6      	; 0x4c2 <EVENT_USB_Host_DeviceEnumerationComplete+0x3a>
     4bc:	8a ee       	ldi	r24, 0xEA	; 234
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	15 c0       	rjmp	.+42     	; 0x4ec <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
     4c2:	69 81       	ldd	r22, Y+1	; 0x01
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Joystick_HID_Interface,
     4c4:	7a 81       	ldd	r23, Y+2	; 0x02
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	ae 01       	movw	r20, r28
     4cc:	4d 5f       	subi	r20, 0xFD	; 253
     4ce:	5f 4f       	sbci	r21, 0xFF	; 255
     4d0:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <HID_Host_ConfigurePipes>
     4d4:	88 23       	and	r24, r24
     4d6:	19 f0       	breq	.+6      	; 0x4de <EVENT_USB_Host_DeviceEnumerationComplete+0x56>
     4d8:	87 e1       	ldi	r24, 0x17	; 23
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Joystick.\r\n"));
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	07 c0       	rjmp	.+14     	; 0x4ec <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
     4de:	81 e0       	ldi	r24, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     4e0:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <USB_Host_SetDeviceConfiguration>
     4e4:	88 23       	and	r24, r24
     4e6:	31 f0       	breq	.+12     	; 0x4f4 <EVENT_USB_Host_DeviceEnumerationComplete+0x6c>
     4e8:	8f e3       	ldi	r24, 0x3F	; 63
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <puts_P>
     4f0:	80 e9       	ldi	r24, 0x90	; 144
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4f2:	15 c0       	rjmp	.+42     	; 0x51e <EVENT_USB_Host_DeviceEnumerationComplete+0x96>
     4f4:	80 e0       	ldi	r24, 0x00	; 0
		return;
	}

	if (HID_Host_SetReportProtocol(&Joystick_HID_Interface) != 0)
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <HID_Host_SetReportProtocol>
     4fc:	88 23       	and	r24, r24
     4fe:	51 f0       	breq	.+20     	; 0x514 <EVENT_USB_Host_DeviceEnumerationComplete+0x8c>
     500:	85 e6       	ldi	r24, 0x65	; 101
	{
		puts_P(PSTR("Error Setting Report Protocol Mode or Not a Valid Joystick.\r\n"));
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <puts_P>
     508:	80 e9       	ldi	r24, 0x90	; 144
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     50a:	ba de       	rcall	.-652    	; 0x280 <LEDs_SetAllLEDs>
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <USB_Host_SetDeviceConfiguration>
		USB_Host_SetDeviceConfiguration(0);
     512:	06 c0       	rjmp	.+12     	; 0x520 <EVENT_USB_Host_DeviceEnumerationComplete+0x98>
     514:	83 ea       	ldi	r24, 0xA3	; 163
		return;
     516:	91 e0       	ldi	r25, 0x01	; 1
	}

	puts_P(PSTR("Joystick Enumerated.\r\n"));
     518:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <puts_P>
     51c:	80 e6       	ldi	r24, 0x60	; 96
     51e:	b0 de       	rcall	.-672    	; 0x280 <LEDs_SetAllLEDs>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     520:	ce 5f       	subi	r28, 0xFE	; 254
     522:	dd 4f       	sbci	r29, 0xFD	; 253
     524:	0f b6       	in	r0, 0x3f	; 63
}
     526:	f8 94       	cli
     528:	de bf       	out	0x3e, r29	; 62
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	cd bf       	out	0x3d, r28	; 61
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	08 95       	ret

00000534 <EVENT_USB_Host_HostError>:
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	0f 92       	push	r0

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     53e:	89 83       	std	Y+1, r24	; 0x01
     540:	cb d7       	rcall	.+3990   	; 0x14d8 <USB_Disable>
     542:	00 d0       	rcall	.+0      	; 0x544 <EVENT_USB_Host_HostError+0x10>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     544:	00 d0       	rcall	.+0      	; 0x546 <EVENT_USB_Host_HostError+0x12>
     546:	ed b7       	in	r30, 0x3d	; 61
     548:	fe b7       	in	r31, 0x3e	; 62
     54a:	31 96       	adiw	r30, 0x01	; 1
     54c:	2a eb       	ldi	r18, 0xBA	; 186
     54e:	31 e0       	ldi	r19, 0x01	; 1
     550:	ad b7       	in	r26, 0x3d	; 61
     552:	be b7       	in	r27, 0x3e	; 62
     554:	12 96       	adiw	r26, 0x02	; 2
     556:	3c 93       	st	X, r19
     558:	2e 93       	st	-X, r18
     55a:	11 97       	sbiw	r26, 0x01	; 1
     55c:	89 81       	ldd	r24, Y+1	; 0x01
     55e:	82 83       	std	Z+2, r24	; 0x02
     560:	13 82       	std	Z+3, r1	; 0x03
     562:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <printf_P>
     566:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	80 e9       	ldi	r24, 0x90	; 144
     570:	87 de       	rcall	.-754    	; 0x280 <LEDs_SetAllLEDs>
     572:	ff cf       	rjmp	.-2      	; 0x572 <EVENT_USB_Host_HostError+0x3e>

00000574 <EVENT_USB_Host_DeviceEnumerationFailed>:
     574:	90 91 28 05 	lds	r25, 0x0528
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     578:	2d b7       	in	r18, 0x3d	; 61
     57a:	3e b7       	in	r19, 0x3e	; 62
     57c:	28 50       	subi	r18, 0x08	; 8
     57e:	30 40       	sbci	r19, 0x00	; 0
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	3e bf       	out	0x3e, r19	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	2d bf       	out	0x3d, r18	; 61
     58a:	ed b7       	in	r30, 0x3d	; 61
     58c:	fe b7       	in	r31, 0x3e	; 62
     58e:	31 96       	adiw	r30, 0x01	; 1
     590:	29 ee       	ldi	r18, 0xE9	; 233
     592:	31 e0       	ldi	r19, 0x01	; 1
     594:	ad b7       	in	r26, 0x3d	; 61
     596:	be b7       	in	r27, 0x3e	; 62
     598:	12 96       	adiw	r26, 0x02	; 2
     59a:	3c 93       	st	X, r19
     59c:	2e 93       	st	-X, r18
     59e:	11 97       	sbiw	r26, 0x01	; 1
     5a0:	82 83       	std	Z+2, r24	; 0x02
     5a2:	13 82       	std	Z+3, r1	; 0x03
     5a4:	64 83       	std	Z+4, r22	; 0x04
     5a6:	15 82       	std	Z+5, r1	; 0x05
     5a8:	96 83       	std	Z+6, r25	; 0x06
     5aa:	17 82       	std	Z+7, r1	; 0x07
     5ac:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5b0:	2d b7       	in	r18, 0x3d	; 61
     5b2:	3e b7       	in	r19, 0x3e	; 62
     5b4:	28 5f       	subi	r18, 0xF8	; 248
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	3e bf       	out	0x3e, r19	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	2d bf       	out	0x3d, r18	; 61
     5c2:	80 e9       	ldi	r24, 0x90	; 144
     5c4:	5d ce       	rjmp	.-838    	; 0x280 <LEDs_SetAllLEDs>

000005c6 <CALLBACK_HIDParser_FilterHIDReportItem>:
     5c6:	dc 01       	movw	r26, r24
}
     5c8:	16 96       	adiw	r26, 0x06	; 6

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Joystick Usage is found - this prevents Mice, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a joystick by the demo
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     5ca:	ed 91       	ld	r30, X+
     5cc:	fc 91       	ld	r31, X
     5ce:	17 97       	sbiw	r26, 0x07	; 7
     5d0:	0d c0       	rjmp	.+26     	; 0x5ec <CALLBACK_HIDParser_FilterHIDReportItem+0x26>
	{
		if ((CurrPath->Usage.Page  == USAGE_PAGE_GENERIC_DCTRL) &&
     5d2:	81 81       	ldd	r24, Z+1	; 0x01
     5d4:	92 81       	ldd	r25, Z+2	; 0x02
     5d6:	81 30       	cpi	r24, 0x01	; 1
     5d8:	91 05       	cpc	r25, r1
     5da:	29 f4       	brne	.+10     	; 0x5e6 <CALLBACK_HIDParser_FilterHIDReportItem+0x20>
     5dc:	83 81       	ldd	r24, Z+3	; 0x03
     5de:	94 81       	ldd	r25, Z+4	; 0x04
     5e0:	84 30       	cpi	r24, 0x04	; 4
     5e2:	91 05       	cpc	r25, r1
     5e4:	39 f0       	breq	.+14     	; 0x5f4 <CALLBACK_HIDParser_FilterHIDReportItem+0x2e>

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Joystick Usage is found - this prevents Mice, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a joystick by the demo
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     5e6:	05 80       	ldd	r0, Z+5	; 0x05
     5e8:	f6 81       	ldd	r31, Z+6	; 0x06
     5ea:	e0 2d       	mov	r30, r0
     5ec:	30 97       	sbiw	r30, 0x00	; 0
     5ee:	89 f7       	brne	.-30     	; 0x5d2 <CALLBACK_HIDParser_FilterHIDReportItem+0xc>
		}
	}

	/* If a collection with the joystick usage was not found, indicate that we are not interested in this item */
	if (!IsJoystick)
	  return false;
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	08 95       	ret

	/* Check the attributes of the current item - see if we are interested in it or not;
	 * only store BUTTON and GENERIC_DESKTOP_CONTROL items into the Processed HID Report
	 * structure to save RAM and ignore the rest
	 */
	return ((CurrentItem->Attributes.Usage.Page == USAGE_PAGE_BUTTON) ||
     5f4:	19 96       	adiw	r26, 0x09	; 9
     5f6:	2d 91       	ld	r18, X+
     5f8:	3c 91       	ld	r19, X
     5fa:	1a 97       	sbiw	r26, 0x0a	; 10
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	29 30       	cpi	r18, 0x09	; 9
     602:	31 05       	cpc	r19, r1
     604:	31 f0       	breq	.+12     	; 0x612 <CALLBACK_HIDParser_FilterHIDReportItem+0x4c>
     606:	21 30       	cpi	r18, 0x01	; 1
     608:	31 05       	cpc	r19, r1
     60a:	19 f0       	breq	.+6      	; 0x612 <CALLBACK_HIDParser_FilterHIDReportItem+0x4c>
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	08 95       	ret
	        (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_GENERIC_DCTRL));
}
     612:	08 95       	ret

00000614 <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
     614:	2f 92       	push	r2
     616:	3f 92       	push	r3
     618:	4f 92       	push	r4
     61a:	5f 92       	push	r5
     61c:	6f 92       	push	r6
     61e:	7f 92       	push	r7
     620:	8f 92       	push	r8
     622:	9f 92       	push	r9
     624:	af 92       	push	r10
     626:	bf 92       	push	r11
     628:	cf 92       	push	r12
     62a:	df 92       	push	r13
     62c:	ef 92       	push	r14
     62e:	ff 92       	push	r15
     630:	0f 93       	push	r16
     632:	1f 93       	push	r17
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62
     63c:	cf 58       	subi	r28, 0x8F	; 143
     63e:	d0 40       	sbci	r29, 0x00	; 0
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
     64a:	5c 01       	movw	r10, r24
     64c:	e7 96       	adiw	r28, 0x37	; 55
     64e:	7f af       	sts	0x7f, r23
     650:	6e af       	sts	0x7e, r22
     652:	e7 97       	sbiw	r28, 0x37	; 55
     654:	ba 01       	movw	r22, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
     656:	40 57       	subi	r20, 0x70	; 112
     658:	5c 4f       	sbci	r21, 0xFC	; 252
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
     65a:	89 ed       	ldi	r24, 0xD9	; 217
     65c:	93 e0       	ldi	r25, 0x03	; 3
     65e:	db 01       	movw	r26, r22
     660:	fc 01       	movw	r30, r24
     662:	1d 92       	st	X+, r1
     664:	31 97       	sbiw	r30, 0x01	; 1
     666:	e9 f7       	brne	.-6      	; 0x662 <USB_ProcessHIDReport+0x4e>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
     668:	de 01       	movw	r26, r28
     66a:	db 96       	adiw	r26, 0x3b	; 59
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
     66c:	8c e1       	ldi	r24, 0x1C	; 28
     66e:	fd 01       	movw	r30, r26
     670:	11 92       	st	Z+, r1
     672:	8a 95       	dec	r24
     674:	e9 f7       	brne	.-6      	; 0x670 <USB_ProcessHIDReport+0x5c>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     676:	87 e0       	ldi	r24, 0x07	; 7
     678:	fa 01       	movw	r30, r20
     67a:	11 92       	st	Z+, r1
     67c:	8a 95       	dec	r24
     67e:	e9 f7       	brne	.-6      	; 0x67a <USB_ProcessHIDReport+0x66>

	ParserData->TotalDeviceReports = 1;
     680:	fb 01       	movw	r30, r22
     682:	e1 57       	subi	r30, 0x71	; 113
     684:	fc 4f       	sbci	r31, 0xFC	; 252
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	80 83       	st	Z, r24
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
     68a:	eb 96       	adiw	r28, 0x3b	; 59
     68c:	1c ae       	sts	0xbc, r17
     68e:	1d ae       	sts	0xbd, r17
     690:	1e ae       	sts	0xbe, r17
     692:	1f ae       	sts	0xbf, r17
     694:	eb 97       	sbiw	r28, 0x3b	; 59
     696:	44 24       	eor	r4, r4
     698:	55 24       	eor	r5, r5
     69a:	32 01       	movw	r6, r4
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
     69c:	30 e0       	ldi	r19, 0x00	; 0
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
     69e:	88 24       	eor	r8, r8
     6a0:	99 24       	eor	r9, r9
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
     6a2:	8d 01       	movw	r16, r26

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     6a4:	cb 01       	movw	r24, r22
     6a6:	8a 52       	subi	r24, 0x2A	; 42
     6a8:	9c 4f       	sbci	r25, 0xFC	; 252
     6aa:	cf 57       	subi	r28, 0x7F	; 127
     6ac:	df 4f       	sbci	r29, 0xFF	; 255
     6ae:	99 83       	std	Y+1, r25	; 0x01
     6b0:	88 83       	st	Y, r24
     6b2:	c1 58       	subi	r28, 0x81	; 129
     6b4:	d0 40       	sbci	r29, 0x00	; 0
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     6b6:	e5 96       	adiw	r28, 0x35	; 53
     6b8:	bf af       	sts	0x7f, r27
     6ba:	ae af       	sts	0x7e, r26
     6bc:	e5 97       	sbiw	r28, 0x35	; 53

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     6be:	db 01       	movw	r26, r22
     6c0:	a8 57       	subi	r26, 0x78	; 120
     6c2:	bc 4f       	sbci	r27, 0xFC	; 252
     6c4:	c9 57       	subi	r28, 0x79	; 121
     6c6:	df 4f       	sbci	r29, 0xFF	; 255
     6c8:	b9 83       	std	Y+1, r27	; 0x01
     6ca:	a8 83       	st	Y, r26
     6cc:	c7 58       	subi	r28, 0x87	; 135
     6ce:	d0 40       	sbci	r29, 0x00	; 0
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     6d0:	f8 01       	movw	r30, r16
     6d2:	7c 96       	adiw	r30, 0x1c	; 28
     6d4:	c7 57       	subi	r28, 0x77	; 119
     6d6:	df 4f       	sbci	r29, 0xFF	; 255
     6d8:	f9 83       	std	Y+1, r31	; 0x01
     6da:	e8 83       	st	Y, r30
     6dc:	c9 58       	subi	r28, 0x89	; 137
     6de:	d0 40       	sbci	r29, 0x00	; 0
     6e0:	cb 01       	movw	r24, r22
     6e2:	b5 01       	movw	r22, r10
     6e4:	5c 01       	movw	r10, r24
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     6e6:	18 c3       	rjmp	.+1584   	; 0xd18 <USB_ProcessHIDReport+0x704>
	{
		uint8_t  HIDReportItem  = *ReportData;
     6e8:	db 01       	movw	r26, r22
     6ea:	2c 91       	ld	r18, X
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
     6ec:	e7 96       	adiw	r28, 0x37	; 55
     6ee:	ee ad       	sts	0x6e, r30
     6f0:	ff ad       	sts	0x6f, r31
     6f2:	e7 97       	sbiw	r28, 0x37	; 55
     6f4:	31 97       	sbiw	r30, 0x01	; 1
     6f6:	e7 96       	adiw	r28, 0x37	; 55
     6f8:	ff af       	sts	0x7f, r31
     6fa:	ee af       	sts	0x7e, r30
     6fc:	e7 97       	sbiw	r28, 0x37	; 55

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
     6fe:	82 2f       	mov	r24, r18
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	ed 96       	adiw	r28, 0x3d	; 61
     704:	9f af       	sts	0x7f, r25
     706:	8e af       	sts	0x7e, r24
     708:	ed 97       	sbiw	r28, 0x3d	; 61
     70a:	83 70       	andi	r24, 0x03	; 3
     70c:	90 70       	andi	r25, 0x00	; 0
     70e:	82 30       	cpi	r24, 0x02	; 2
     710:	91 05       	cpc	r25, r1
     712:	09 f4       	brne	.+2      	; 0x716 <USB_ProcessHIDReport+0x102>
     714:	49 c0       	rjmp	.+146    	; 0x7a8 <USB_ProcessHIDReport+0x194>
     716:	83 30       	cpi	r24, 0x03	; 3
     718:	91 05       	cpc	r25, r1
     71a:	51 f0       	breq	.+20     	; 0x730 <USB_ProcessHIDReport+0x11c>
     71c:	81 30       	cpi	r24, 0x01	; 1
     71e:	91 05       	cpc	r25, r1
     720:	09 f4       	brne	.+2      	; 0x724 <USB_ProcessHIDReport+0x110>
     722:	69 c0       	rjmp	.+210    	; 0x7f6 <USB_ProcessHIDReport+0x1e2>
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
     724:	6f 5f       	subi	r22, 0xFF	; 255
     726:	7f 4f       	sbci	r23, 0xFF	; 255
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     728:	cc 24       	eor	r12, r12
     72a:	dd 24       	eor	r13, r13
     72c:	76 01       	movw	r14, r12
     72e:	75 c0       	rjmp	.+234    	; 0x81a <USB_ProcessHIDReport+0x206>
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     730:	db 01       	movw	r26, r22
     732:	14 96       	adiw	r26, 0x04	; 4
     734:	8c 91       	ld	r24, X
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	a0 e0       	ldi	r26, 0x00	; 0
     73a:	b0 e0       	ldi	r27, 0x00	; 0
     73c:	f8 2e       	mov	r15, r24
     73e:	ee 24       	eor	r14, r14
     740:	dd 24       	eor	r13, r13
     742:	cc 24       	eor	r12, r12
     744:	fb 01       	movw	r30, r22
     746:	83 81       	ldd	r24, Z+3	; 0x03
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	a0 e0       	ldi	r26, 0x00	; 0
     74c:	b0 e0       	ldi	r27, 0x00	; 0
     74e:	dc 01       	movw	r26, r24
     750:	99 27       	eor	r25, r25
     752:	88 27       	eor	r24, r24
     754:	c8 2a       	or	r12, r24
     756:	d9 2a       	or	r13, r25
     758:	ea 2a       	or	r14, r26
     75a:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     75c:	81 81       	ldd	r24, Z+1	; 0x01
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	a0 e0       	ldi	r26, 0x00	; 0
     762:	b0 e0       	ldi	r27, 0x00	; 0
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     764:	c8 2a       	or	r12, r24
     766:	d9 2a       	or	r13, r25
     768:	ea 2a       	or	r14, r26
     76a:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     76c:	f2 81       	ldd	r31, Z+2	; 0x02
     76e:	ef 96       	adiw	r28, 0x3f	; 63
     770:	ff af       	sts	0x7f, r31
     772:	ef 97       	sbiw	r28, 0x3f	; 63
     774:	ee 96       	adiw	r28, 0x3e	; 62
     776:	1f ae       	sts	0xbf, r17
     778:	ee 97       	sbiw	r28, 0x3e	; 62
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     77a:	ef 96       	adiw	r28, 0x3f	; 63
     77c:	ee ad       	sts	0x6e, r30
     77e:	ff ad       	sts	0x6f, r31
     780:	ef 97       	sbiw	r28, 0x3f	; 63
     782:	cf 01       	movw	r24, r30
     784:	a0 e0       	ldi	r26, 0x00	; 0
     786:	b0 e0       	ldi	r27, 0x00	; 0
     788:	c8 2a       	or	r12, r24
     78a:	d9 2a       	or	r13, r25
     78c:	ea 2a       	or	r14, r26
     78e:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     790:	e7 96       	adiw	r28, 0x37	; 55
     792:	8e ad       	sts	0x6e, r24
     794:	9f ad       	sts	0x6f, r25
     796:	e7 97       	sbiw	r28, 0x37	; 55
     798:	04 97       	sbiw	r24, 0x04	; 4
     79a:	e7 96       	adiw	r28, 0x37	; 55
     79c:	9f af       	sts	0x7f, r25
     79e:	8e af       	sts	0x7e, r24
     7a0:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 4;
     7a2:	6b 5f       	subi	r22, 0xFB	; 251
     7a4:	7f 4f       	sbci	r23, 0xFF	; 255
				break;
     7a6:	39 c0       	rjmp	.+114    	; 0x81a <USB_ProcessHIDReport+0x206>

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     7a8:	db 01       	movw	r26, r22
     7aa:	12 96       	adiw	r26, 0x02	; 2
     7ac:	bc 91       	ld	r27, X
     7ae:	c0 58       	subi	r28, 0x80	; 128
     7b0:	df 4f       	sbci	r29, 0xFF	; 255
     7b2:	b8 83       	st	Y, r27
     7b4:	c0 58       	subi	r28, 0x80	; 128
     7b6:	d0 40       	sbci	r29, 0x00	; 0
     7b8:	c1 58       	subi	r28, 0x81	; 129
     7ba:	df 4f       	sbci	r29, 0xFF	; 255
     7bc:	18 82       	st	Y, r1
     7be:	cf 57       	subi	r28, 0x7F	; 127
     7c0:	d0 40       	sbci	r29, 0x00	; 0
     7c2:	fb 01       	movw	r30, r22
     7c4:	81 81       	ldd	r24, Z+1	; 0x01
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	c1 58       	subi	r28, 0x81	; 129
     7ca:	df 4f       	sbci	r29, 0xFF	; 255
     7cc:	a8 81       	ld	r26, Y
     7ce:	b9 81       	ldd	r27, Y+1	; 0x01
     7d0:	cf 57       	subi	r28, 0x7F	; 127
     7d2:	d0 40       	sbci	r29, 0x00	; 0
     7d4:	8a 2b       	or	r24, r26
     7d6:	9b 2b       	or	r25, r27
     7d8:	6c 01       	movw	r12, r24
     7da:	ee 24       	eor	r14, r14
     7dc:	ff 24       	eor	r15, r15
				ReportSize     -= 2;
     7de:	e7 96       	adiw	r28, 0x37	; 55
     7e0:	ee ad       	sts	0x6e, r30
     7e2:	ff ad       	sts	0x6f, r31
     7e4:	e7 97       	sbiw	r28, 0x37	; 55
     7e6:	32 97       	sbiw	r30, 0x02	; 2
     7e8:	e7 96       	adiw	r28, 0x37	; 55
     7ea:	ff af       	sts	0x7f, r31
     7ec:	ee af       	sts	0x7e, r30
     7ee:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 2;
     7f0:	6d 5f       	subi	r22, 0xFD	; 253
     7f2:	7f 4f       	sbci	r23, 0xFF	; 255
				break;
     7f4:	12 c0       	rjmp	.+36     	; 0x81a <USB_ProcessHIDReport+0x206>

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     7f6:	db 01       	movw	r26, r22
     7f8:	11 96       	adiw	r26, 0x01	; 1
     7fa:	cc 90       	ld	r12, X
     7fc:	11 97       	sbiw	r26, 0x01	; 1
     7fe:	dd 24       	eor	r13, r13
     800:	ee 24       	eor	r14, r14
     802:	ff 24       	eor	r15, r15
				ReportSize     -= 1;
     804:	e7 96       	adiw	r28, 0x37	; 55
     806:	ee ad       	sts	0x6e, r30
     808:	ff ad       	sts	0x6f, r31
     80a:	e7 97       	sbiw	r28, 0x37	; 55
     80c:	31 97       	sbiw	r30, 0x01	; 1
     80e:	e7 96       	adiw	r28, 0x37	; 55
     810:	ff af       	sts	0x7f, r31
     812:	ee af       	sts	0x7e, r30
     814:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 1;
     816:	6e 5f       	subi	r22, 0xFE	; 254
     818:	7f 4f       	sbci	r23, 0xFF	; 255
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     81a:	ed 96       	adiw	r28, 0x3d	; 61
     81c:	8e ad       	sts	0x6e, r24
     81e:	9f ad       	sts	0x6f, r25
     820:	ed 97       	sbiw	r28, 0x3d	; 61
     822:	8c 7f       	andi	r24, 0xFC	; 252
     824:	90 70       	andi	r25, 0x00	; 0
     826:	84 36       	cpi	r24, 0x64	; 100
     828:	91 05       	cpc	r25, r1
     82a:	09 f4       	brne	.+2      	; 0x82e <USB_ProcessHIDReport+0x21a>
     82c:	b0 c0       	rjmp	.+352    	; 0x98e <USB_ProcessHIDReport+0x37a>
     82e:	85 36       	cpi	r24, 0x65	; 101
     830:	91 05       	cpc	r25, r1
     832:	8c f5       	brge	.+98     	; 0x896 <USB_ProcessHIDReport+0x282>
     834:	84 32       	cpi	r24, 0x24	; 36
     836:	91 05       	cpc	r25, r1
     838:	09 f4       	brne	.+2      	; 0x83c <USB_ProcessHIDReport+0x228>
     83a:	90 c0       	rjmp	.+288    	; 0x95c <USB_ProcessHIDReport+0x348>
     83c:	85 32       	cpi	r24, 0x25	; 37
     83e:	91 05       	cpc	r25, r1
     840:	ac f4       	brge	.+42     	; 0x86c <USB_ProcessHIDReport+0x258>
     842:	88 30       	cpi	r24, 0x08	; 8
     844:	91 05       	cpc	r25, r1
     846:	09 f4       	brne	.+2      	; 0x84a <USB_ProcessHIDReport+0x236>
     848:	fb c0       	rjmp	.+502    	; 0xa40 <USB_ProcessHIDReport+0x42c>
     84a:	89 30       	cpi	r24, 0x09	; 9
     84c:	91 05       	cpc	r25, r1
     84e:	2c f4       	brge	.+10     	; 0x85a <USB_ProcessHIDReport+0x246>
     850:	84 30       	cpi	r24, 0x04	; 4
     852:	91 05       	cpc	r25, r1
     854:	09 f0       	breq	.+2      	; 0x858 <USB_ProcessHIDReport+0x244>
     856:	4e c2       	rjmp	.+1180   	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
     858:	75 c0       	rjmp	.+234    	; 0x944 <USB_ProcessHIDReport+0x330>
     85a:	84 31       	cpi	r24, 0x14	; 20
     85c:	91 05       	cpc	r25, r1
     85e:	09 f4       	brne	.+2      	; 0x862 <USB_ProcessHIDReport+0x24e>
     860:	75 c0       	rjmp	.+234    	; 0x94c <USB_ProcessHIDReport+0x338>
     862:	88 31       	cpi	r24, 0x18	; 24
     864:	91 05       	cpc	r25, r1
     866:	09 f0       	breq	.+2      	; 0x86a <USB_ProcessHIDReport+0x256>
     868:	45 c2       	rjmp	.+1162   	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
     86a:	42 c2       	rjmp	.+1156   	; 0xcf0 <USB_ProcessHIDReport+0x6dc>
     86c:	84 33       	cpi	r24, 0x34	; 52
     86e:	91 05       	cpc	r25, r1
     870:	09 f4       	brne	.+2      	; 0x874 <USB_ProcessHIDReport+0x260>
     872:	7a c0       	rjmp	.+244    	; 0x968 <USB_ProcessHIDReport+0x354>
     874:	85 33       	cpi	r24, 0x35	; 53
     876:	91 05       	cpc	r25, r1
     878:	2c f4       	brge	.+10     	; 0x884 <USB_ProcessHIDReport+0x270>
     87a:	88 32       	cpi	r24, 0x28	; 40
     87c:	91 05       	cpc	r25, r1
     87e:	09 f0       	breq	.+2      	; 0x882 <USB_ProcessHIDReport+0x26e>
     880:	39 c2       	rjmp	.+1138   	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
     882:	ef c0       	rjmp	.+478    	; 0xa62 <USB_ProcessHIDReport+0x44e>
     884:	84 34       	cpi	r24, 0x44	; 68
     886:	91 05       	cpc	r25, r1
     888:	09 f4       	brne	.+2      	; 0x88c <USB_ProcessHIDReport+0x278>
     88a:	76 c0       	rjmp	.+236    	; 0x978 <USB_ProcessHIDReport+0x364>
     88c:	84 35       	cpi	r24, 0x54	; 84
     88e:	91 05       	cpc	r25, r1
     890:	09 f0       	breq	.+2      	; 0x894 <USB_ProcessHIDReport+0x280>
     892:	30 c2       	rjmp	.+1120   	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
     894:	77 c0       	rjmp	.+238    	; 0x984 <USB_ProcessHIDReport+0x370>
     896:	84 39       	cpi	r24, 0x94	; 148
     898:	91 05       	cpc	r25, r1
     89a:	09 f4       	brne	.+2      	; 0x89e <USB_ProcessHIDReport+0x28a>
     89c:	81 c0       	rjmp	.+258    	; 0x9a0 <USB_ProcessHIDReport+0x38c>
     89e:	85 39       	cpi	r24, 0x95	; 149
     8a0:	91 05       	cpc	r25, r1
     8a2:	ac f4       	brge	.+42     	; 0x8ce <USB_ProcessHIDReport+0x2ba>
     8a4:	80 38       	cpi	r24, 0x80	; 128
     8a6:	91 05       	cpc	r25, r1
     8a8:	09 f4       	brne	.+2      	; 0x8ac <USB_ProcessHIDReport+0x298>
     8aa:	f8 c1       	rjmp	.+1008   	; 0xc9c <USB_ProcessHIDReport+0x688>
     8ac:	81 38       	cpi	r24, 0x81	; 129
     8ae:	91 05       	cpc	r25, r1
     8b0:	2c f4       	brge	.+10     	; 0x8bc <USB_ProcessHIDReport+0x2a8>
     8b2:	84 37       	cpi	r24, 0x74	; 116
     8b4:	91 05       	cpc	r25, r1
     8b6:	09 f0       	breq	.+2      	; 0x8ba <USB_ProcessHIDReport+0x2a6>
     8b8:	1d c2       	rjmp	.+1082   	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
     8ba:	6f c0       	rjmp	.+222    	; 0x99a <USB_ProcessHIDReport+0x386>
     8bc:	84 38       	cpi	r24, 0x84	; 132
     8be:	91 05       	cpc	r25, r1
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <USB_ProcessHIDReport+0x2b0>
     8c2:	71 c0       	rjmp	.+226    	; 0x9a6 <USB_ProcessHIDReport+0x392>
     8c4:	80 39       	cpi	r24, 0x90	; 144
     8c6:	91 05       	cpc	r25, r1
     8c8:	09 f0       	breq	.+2      	; 0x8cc <USB_ProcessHIDReport+0x2b8>
     8ca:	14 c2       	rjmp	.+1064   	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
     8cc:	e7 c1       	rjmp	.+974    	; 0xc9c <USB_ProcessHIDReport+0x688>
     8ce:	80 3b       	cpi	r24, 0xB0	; 176
     8d0:	91 05       	cpc	r25, r1
     8d2:	09 f4       	brne	.+2      	; 0x8d6 <USB_ProcessHIDReport+0x2c2>
     8d4:	e3 c1       	rjmp	.+966    	; 0xc9c <USB_ProcessHIDReport+0x688>
     8d6:	81 3b       	cpi	r24, 0xB1	; 177
     8d8:	91 05       	cpc	r25, r1
     8da:	4c f4       	brge	.+18     	; 0x8ee <USB_ProcessHIDReport+0x2da>
     8dc:	80 3a       	cpi	r24, 0xA0	; 160
     8de:	91 05       	cpc	r25, r1
     8e0:	09 f4       	brne	.+2      	; 0x8e4 <USB_ProcessHIDReport+0x2d0>
     8e2:	c6 c0       	rjmp	.+396    	; 0xa70 <USB_ProcessHIDReport+0x45c>
     8e4:	84 3a       	cpi	r24, 0xA4	; 164
     8e6:	91 05       	cpc	r25, r1
     8e8:	09 f0       	breq	.+2      	; 0x8ec <USB_ProcessHIDReport+0x2d8>
     8ea:	04 c2       	rjmp	.+1032   	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
     8ec:	08 c0       	rjmp	.+16     	; 0x8fe <USB_ProcessHIDReport+0x2ea>
     8ee:	84 3b       	cpi	r24, 0xB4	; 180
     8f0:	91 05       	cpc	r25, r1
     8f2:	e9 f0       	breq	.+58     	; 0x92e <USB_ProcessHIDReport+0x31a>
     8f4:	80 3c       	cpi	r24, 0xC0	; 192
     8f6:	91 05       	cpc	r25, r1
     8f8:	09 f0       	breq	.+2      	; 0x8fc <USB_ProcessHIDReport+0x2e8>
     8fa:	fc c1       	rjmp	.+1016   	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
     8fc:	08 c1       	rjmp	.+528    	; 0xb0e <USB_ProcessHIDReport+0x4fa>
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     8fe:	c7 57       	subi	r28, 0x77	; 119
     900:	df 4f       	sbci	r29, 0xFF	; 255
     902:	88 81       	ld	r24, Y
     904:	99 81       	ldd	r25, Y+1	; 0x01
     906:	c9 58       	subi	r28, 0x89	; 137
     908:	d0 40       	sbci	r29, 0x00	; 0
     90a:	08 17       	cp	r16, r24
     90c:	19 07       	cpc	r17, r25
     90e:	09 f4       	brne	.+2      	; 0x912 <USB_ProcessHIDReport+0x2fe>
     910:	10 c2       	rjmp	.+1056   	; 0xd32 <USB_ProcessHIDReport+0x71e>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     912:	ec e1       	ldi	r30, 0x1C	; 28
     914:	ce 2e       	mov	r12, r30
     916:	d1 2c       	mov	r13, r1
     918:	c0 0e       	add	r12, r16
     91a:	d1 1e       	adc	r13, r17
     91c:	d6 01       	movw	r26, r12
     91e:	f8 01       	movw	r30, r16
     920:	8a e2       	ldi	r24, 0x2A	; 42
     922:	01 90       	ld	r0, Z+
     924:	0d 92       	st	X+, r0
     926:	81 50       	subi	r24, 0x01	; 1
     928:	e1 f7       	brne	.-8      	; 0x922 <USB_ProcessHIDReport+0x30e>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     92a:	86 01       	movw	r16, r12
				break;
     92c:	e3 c1       	rjmp	.+966    	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     92e:	e5 96       	adiw	r28, 0x35	; 53
     930:	ae ad       	sts	0x6e, r26
     932:	bf ad       	sts	0x6f, r27
     934:	e5 97       	sbiw	r28, 0x35	; 53
     936:	0a 17       	cp	r16, r26
     938:	1b 07       	cpc	r17, r27
     93a:	09 f4       	brne	.+2      	; 0x93e <USB_ProcessHIDReport+0x32a>
     93c:	fc c1       	rjmp	.+1016   	; 0xd36 <USB_ProcessHIDReport+0x722>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     93e:	0c 51       	subi	r16, 0x1C	; 28
     940:	10 40       	sbci	r17, 0x00	; 0
				break;
     942:	d8 c1       	rjmp	.+944    	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     944:	f8 01       	movw	r30, r16
     946:	d2 82       	std	Z+2, r13	; 0x02
     948:	c1 82       	std	Z+1, r12	; 0x01
				break;
     94a:	d4 c1       	rjmp	.+936    	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     94c:	d8 01       	movw	r26, r16
     94e:	1a 96       	adiw	r26, 0x0a	; 10
     950:	cd 92       	st	X+, r12
     952:	dd 92       	st	X+, r13
     954:	ed 92       	st	X+, r14
     956:	fc 92       	st	X, r15
     958:	1d 97       	sbiw	r26, 0x0d	; 13
				break;
     95a:	cc c1       	rjmp	.+920    	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     95c:	f8 01       	movw	r30, r16
     95e:	c6 86       	std	Z+14, r12	; 0x0e
     960:	d7 86       	std	Z+15, r13	; 0x0f
     962:	e0 8a       	std	Z+16, r14	; 0x10
     964:	f1 8a       	std	Z+17, r15	; 0x11
				break;
     966:	c6 c1       	rjmp	.+908    	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     968:	d8 01       	movw	r26, r16
     96a:	52 96       	adiw	r26, 0x12	; 18
     96c:	cd 92       	st	X+, r12
     96e:	dd 92       	st	X+, r13
     970:	ed 92       	st	X+, r14
     972:	fc 92       	st	X, r15
     974:	55 97       	sbiw	r26, 0x15	; 21
				break;
     976:	be c1       	rjmp	.+892    	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     978:	f8 01       	movw	r30, r16
     97a:	c6 8a       	std	Z+22, r12	; 0x16
     97c:	d7 8a       	std	Z+23, r13	; 0x17
     97e:	e0 8e       	std	Z+24, r14	; 0x18
     980:	f1 8e       	std	Z+25, r15	; 0x19
				break;
     982:	b8 c1       	rjmp	.+880    	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     984:	d8 01       	movw	r26, r16
     986:	19 96       	adiw	r26, 0x09	; 9
     988:	cc 92       	st	X, r12
     98a:	19 97       	sbiw	r26, 0x09	; 9
				break;
     98c:	b3 c1       	rjmp	.+870    	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     98e:	f8 01       	movw	r30, r16
     990:	c5 82       	std	Z+5, r12	; 0x05
     992:	d6 82       	std	Z+6, r13	; 0x06
     994:	e7 82       	std	Z+7, r14	; 0x07
     996:	f0 86       	std	Z+8, r15	; 0x08
				break;
     998:	ad c1       	rjmp	.+858    	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     99a:	d8 01       	movw	r26, r16
     99c:	cc 92       	st	X, r12
				break;
     99e:	aa c1       	rjmp	.+852    	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     9a0:	f8 01       	movw	r30, r16
     9a2:	c2 8e       	std	Z+26, r12	; 0x1a
				break;
     9a4:	a7 c1       	rjmp	.+846    	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     9a6:	ac 2d       	mov	r26, r12
     9a8:	f8 01       	movw	r30, r16
     9aa:	c3 8e       	std	Z+27, r12	; 0x1b

				if (ParserData->UsingReportIDs)
     9ac:	f5 01       	movw	r30, r10
     9ae:	e8 52       	subi	r30, 0x28	; 40
     9b0:	fc 4f       	sbci	r31, 0xFC	; 252
     9b2:	80 81       	ld	r24, Z
     9b4:	88 23       	and	r24, r24
     9b6:	d1 f1       	breq	.+116    	; 0xa2c <USB_ProcessHIDReport+0x418>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     9b8:	f5 01       	movw	r30, r10
     9ba:	e1 57       	subi	r30, 0x71	; 113
     9bc:	fc 4f       	sbci	r31, 0xFC	; 252
     9be:	90 81       	ld	r25, Z
     9c0:	a5 01       	movw	r20, r10
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	18 c0       	rjmp	.+48     	; 0x9f6 <USB_ProcessHIDReport+0x3e2>
     9c6:	49 5f       	subi	r20, 0xF9	; 249
     9c8:	5f 4f       	sbci	r21, 0xFF	; 255

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     9ca:	fa 01       	movw	r30, r20
     9cc:	e7 57       	subi	r30, 0x77	; 119
     9ce:	fc 4f       	sbci	r31, 0xFC	; 252
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     9d0:	80 81       	ld	r24, Z
     9d2:	8a 17       	cp	r24, r26
     9d4:	79 f4       	brne	.+30     	; 0x9f4 <USB_ProcessHIDReport+0x3e0>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     9d6:	82 2f       	mov	r24, r18
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	ac 01       	movw	r20, r24
     9dc:	23 e0       	ldi	r18, 0x03	; 3
     9de:	44 0f       	add	r20, r20
     9e0:	55 1f       	adc	r21, r21
     9e2:	2a 95       	dec	r18
     9e4:	e1 f7       	brne	.-8      	; 0x9de <USB_ProcessHIDReport+0x3ca>
     9e6:	48 1b       	sub	r20, r24
     9e8:	59 0b       	sbc	r21, r25
     9ea:	40 57       	subi	r20, 0x70	; 112
     9ec:	5c 4f       	sbci	r21, 0xFC	; 252
     9ee:	4a 0d       	add	r20, r10
     9f0:	5b 1d       	adc	r21, r11
     9f2:	1c c0       	rjmp	.+56     	; 0xa2c <USB_ProcessHIDReport+0x418>

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     9f4:	2f 5f       	subi	r18, 0xFF	; 255
     9f6:	29 17       	cp	r18, r25
     9f8:	31 f7       	brne	.-52     	; 0x9c6 <USB_ProcessHIDReport+0x3b2>
     9fa:	c4 c1       	rjmp	.+904    	; 0xd84 <USB_ProcessHIDReport+0x770>
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     9fc:	82 2f       	mov	r24, r18
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	ac 01       	movw	r20, r24
     a02:	b3 e0       	ldi	r27, 0x03	; 3
     a04:	44 0f       	add	r20, r20
     a06:	55 1f       	adc	r21, r21
     a08:	ba 95       	dec	r27
     a0a:	e1 f7       	brne	.-8      	; 0xa04 <USB_ProcessHIDReport+0x3f0>
     a0c:	48 1b       	sub	r20, r24
     a0e:	59 0b       	sbc	r21, r25
     a10:	40 57       	subi	r20, 0x70	; 112
     a12:	5c 4f       	sbci	r21, 0xFC	; 252
     a14:	4a 0d       	add	r20, r10
     a16:	5b 1d       	adc	r21, r11
     a18:	f5 01       	movw	r30, r10
     a1a:	e1 57       	subi	r30, 0x71	; 113
     a1c:	fc 4f       	sbci	r31, 0xFC	; 252
     a1e:	2f 5f       	subi	r18, 0xFF	; 255
     a20:	20 83       	st	Z, r18
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     a22:	87 e0       	ldi	r24, 0x07	; 7
     a24:	da 01       	movw	r26, r20
     a26:	1d 92       	st	X+, r1
     a28:	8a 95       	dec	r24
     a2a:	e9 f7       	brne	.-6      	; 0xa26 <USB_ProcessHIDReport+0x412>
					}
				}

				ParserData->UsingReportIDs = true;
     a2c:	f5 01       	movw	r30, r10
     a2e:	e8 52       	subi	r30, 0x28	; 40
     a30:	fc 4f       	sbci	r31, 0xFC	; 252
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	80 83       	st	Z, r24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     a36:	f8 01       	movw	r30, r16
     a38:	83 8d       	ldd	r24, Z+27	; 0x1b
     a3a:	da 01       	movw	r26, r20
     a3c:	8c 93       	st	X, r24
				break;
     a3e:	5a c1       	rjmp	.+692    	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     a40:	38 30       	cpi	r19, 0x08	; 8
     a42:	09 f4       	brne	.+2      	; 0xa46 <USB_ProcessHIDReport+0x432>
     a44:	7a c1       	rjmp	.+756    	; 0xd3a <USB_ProcessHIDReport+0x726>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     a46:	e3 2f       	mov	r30, r19
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	ee 0f       	add	r30, r30
     a4c:	ff 1f       	adc	r31, r31
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	8c 0f       	add	r24, r28
     a54:	9d 1f       	adc	r25, r29
     a56:	e8 0f       	add	r30, r24
     a58:	f9 1f       	adc	r31, r25
     a5a:	d1 82       	std	Z+1, r13	; 0x01
     a5c:	c0 82       	st	Z, r12
     a5e:	3f 5f       	subi	r19, 0xFF	; 255
				break;
     a60:	49 c1       	rjmp	.+658    	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     a62:	eb 96       	adiw	r28, 0x3b	; 59
     a64:	cc ae       	sts	0xbc, r28
     a66:	dd ae       	sts	0xbd, r29
     a68:	ee ae       	sts	0xbe, r30
     a6a:	ff ae       	sts	0xbf, r31
     a6c:	eb 97       	sbiw	r28, 0x3b	; 59
     a6e:	42 c1       	rjmp	.+644    	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     a70:	81 14       	cp	r8, r1
     a72:	91 04       	cpc	r9, r1
     a74:	39 f4       	brne	.+14     	; 0xa84 <USB_ProcessHIDReport+0x470>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     a76:	e9 e4       	ldi	r30, 0x49	; 73
     a78:	8e 2e       	mov	r8, r30
     a7a:	e3 e0       	ldi	r30, 0x03	; 3
     a7c:	9e 2e       	mov	r9, r30
     a7e:	8a 0c       	add	r8, r10
     a80:	9b 1c       	adc	r9, r11
     a82:	16 c0       	rjmp	.+44     	; 0xab0 <USB_ProcessHIDReport+0x49c>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     a84:	f5 01       	movw	r30, r10
     a86:	e0 5b       	subi	r30, 0xB0	; 176
     a88:	fc 4f       	sbci	r31, 0xFC	; 252

					while (CurrCollectionPath->Parent != NULL)
     a8a:	0b c0       	rjmp	.+22     	; 0xaa2 <USB_ProcessHIDReport+0x48e>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     a8c:	c9 57       	subi	r28, 0x79	; 121
     a8e:	df 4f       	sbci	r29, 0xFF	; 255
     a90:	a8 81       	ld	r26, Y
     a92:	b9 81       	ldd	r27, Y+1	; 0x01
     a94:	c7 58       	subi	r28, 0x87	; 135
     a96:	d0 40       	sbci	r29, 0x00	; 0
     a98:	ea 17       	cp	r30, r26
     a9a:	fb 07       	cpc	r31, r27
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <USB_ProcessHIDReport+0x48c>
     a9e:	4f c1       	rjmp	.+670    	; 0xd3e <USB_ProcessHIDReport+0x72a>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     aa0:	37 96       	adiw	r30, 0x07	; 7
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     aa2:	85 81       	ldd	r24, Z+5	; 0x05
     aa4:	96 81       	ldd	r25, Z+6	; 0x06
     aa6:	00 97       	sbiw	r24, 0x00	; 0
     aa8:	89 f7       	brne	.-30     	; 0xa8c <USB_ProcessHIDReport+0x478>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     aaa:	96 82       	std	Z+6, r9	; 0x06
     aac:	85 82       	std	Z+5, r8	; 0x05
     aae:	4f 01       	movw	r8, r30
				}

				CurrCollectionPath->Type       = ReportItemData;
     ab0:	f4 01       	movw	r30, r8
     ab2:	c0 82       	st	Z, r12
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     ab4:	d8 01       	movw	r26, r16
     ab6:	11 96       	adiw	r26, 0x01	; 1
     ab8:	8d 91       	ld	r24, X+
     aba:	9c 91       	ld	r25, X
     abc:	12 97       	sbiw	r26, 0x02	; 2
     abe:	92 83       	std	Z+2, r25	; 0x02
     ac0:	81 83       	std	Z+1, r24	; 0x01

				if (UsageListSize)
     ac2:	33 23       	and	r19, r19
     ac4:	81 f0       	breq	.+32     	; 0xae6 <USB_ProcessHIDReport+0x4d2>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     ac6:	89 81       	ldd	r24, Y+1	; 0x01
     ac8:	9a 81       	ldd	r25, Y+2	; 0x02
     aca:	94 83       	std	Z+4, r25	; 0x04
     acc:	83 83       	std	Z+3, r24	; 0x03
     ace:	fe 01       	movw	r30, r28
     ad0:	31 96       	adiw	r30, 0x01	; 1

					for (uint8_t i = 0; i < UsageListSize; i++)
     ad2:	80 e0       	ldi	r24, 0x00	; 0
					  UsageList[i] = UsageList[i + 1];
     ad4:	a2 81       	ldd	r26, Z+2	; 0x02
     ad6:	b3 81       	ldd	r27, Z+3	; 0x03
     ad8:	a1 93       	st	Z+, r26
     ada:	b1 93       	st	Z+, r27

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     adc:	8f 5f       	subi	r24, 0xFF	; 255
     ade:	83 17       	cp	r24, r19
     ae0:	c9 f7       	brne	.-14     	; 0xad4 <USB_ProcessHIDReport+0x4c0>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     ae2:	31 50       	subi	r19, 0x01	; 1
     ae4:	07 c1       	rjmp	.+526    	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     ae6:	eb 96       	adiw	r28, 0x3b	; 59
     ae8:	8c ad       	sts	0x6c, r24
     aea:	9d ad       	sts	0x6d, r25
     aec:	ae ad       	sts	0x6e, r26
     aee:	bf ad       	sts	0x6f, r27
     af0:	eb 97       	sbiw	r28, 0x3b	; 59
     af2:	84 15       	cp	r24, r4
     af4:	95 05       	cpc	r25, r5
     af6:	a6 05       	cpc	r26, r6
     af8:	b7 05       	cpc	r27, r7
     afa:	08 f4       	brcc	.+2      	; 0xafe <USB_ProcessHIDReport+0x4ea>
     afc:	fb c0       	rjmp	.+502    	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     afe:	54 82       	std	Z+4, r5	; 0x04
     b00:	43 82       	std	Z+3, r4	; 0x03
     b02:	08 94       	sec
     b04:	41 1c       	adc	r4, r1
     b06:	51 1c       	adc	r5, r1
     b08:	61 1c       	adc	r6, r1
     b0a:	71 1c       	adc	r7, r1
     b0c:	f3 c0       	rjmp	.+486    	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     b0e:	81 14       	cp	r8, r1
     b10:	91 04       	cpc	r9, r1
     b12:	09 f4       	brne	.+2      	; 0xb16 <USB_ProcessHIDReport+0x502>
     b14:	16 c1       	rjmp	.+556    	; 0xd42 <USB_ProcessHIDReport+0x72e>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     b16:	f4 01       	movw	r30, r8
     b18:	85 80       	ldd	r8, Z+5	; 0x05
     b1a:	96 80       	ldd	r9, Z+6	; 0x06
				break;
     b1c:	eb c0       	rjmp	.+470    	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     b1e:	fe 01       	movw	r30, r28
     b20:	79 96       	adiw	r30, 0x19	; 25
     b22:	d8 01       	movw	r26, r16
     b24:	8a e1       	ldi	r24, 0x1A	; 26
     b26:	0d 90       	ld	r0, X+
     b28:	01 92       	st	Z+, r0
     b2a:	81 50       	subi	r24, 0x01	; 1
     b2c:	e1 f7       	brne	.-8      	; 0xb26 <USB_ProcessHIDReport+0x512>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     b2e:	dd 8a       	std	Y+21, r13	; 0x15
     b30:	cc 8a       	std	Y+20, r12	; 0x14
					NewReportItem.CollectionPath = CurrCollectionPath;
     b32:	78 8f       	std	Y+24, r23	; 0x18
     b34:	6f 8b       	std	Y+23, r22	; 0x17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     b36:	d8 01       	movw	r26, r16
     b38:	5b 96       	adiw	r26, 0x1b	; 27
     b3a:	8c 91       	ld	r24, X
     b3c:	5b 97       	sbiw	r26, 0x1b	; 27
     b3e:	8e 8b       	std	Y+22, r24	; 0x16

					if (UsageListSize)
     b40:	33 23       	and	r19, r19
     b42:	81 f0       	breq	.+32     	; 0xb64 <USB_ProcessHIDReport+0x550>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     b44:	89 81       	ldd	r24, Y+1	; 0x01
     b46:	9a 81       	ldd	r25, Y+2	; 0x02
     b48:	9d 8f       	std	Y+29, r25	; 0x1d
     b4a:	8c 8f       	std	Y+28, r24	; 0x1c
     b4c:	fe 01       	movw	r30, r28
     b4e:	31 96       	adiw	r30, 0x01	; 1

						for (uint8_t i = 0; i < UsageListSize; i++)
     b50:	80 e0       	ldi	r24, 0x00	; 0
						  UsageList[i] = UsageList[i + 1];
     b52:	42 81       	ldd	r20, Z+2	; 0x02
     b54:	53 81       	ldd	r21, Z+3	; 0x03
     b56:	41 93       	st	Z+, r20
     b58:	51 93       	st	Z+, r21

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     b5a:	8f 5f       	subi	r24, 0xFF	; 255
     b5c:	83 17       	cp	r24, r19
     b5e:	c9 f7       	brne	.-14     	; 0xb52 <USB_ProcessHIDReport+0x53e>
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     b60:	31 50       	subi	r19, 0x01	; 1
     b62:	12 c0       	rjmp	.+36     	; 0xb88 <USB_ProcessHIDReport+0x574>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     b64:	eb 96       	adiw	r28, 0x3b	; 59
     b66:	8c ad       	sts	0x6c, r24
     b68:	9d ad       	sts	0x6d, r25
     b6a:	ae ad       	sts	0x6e, r26
     b6c:	bf ad       	sts	0x6f, r27
     b6e:	eb 97       	sbiw	r28, 0x3b	; 59
     b70:	84 15       	cp	r24, r4
     b72:	95 05       	cpc	r25, r5
     b74:	a6 05       	cpc	r26, r6
     b76:	b7 05       	cpc	r27, r7
     b78:	38 f0       	brcs	.+14     	; 0xb88 <USB_ProcessHIDReport+0x574>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     b7a:	5d 8e       	std	Y+29, r5	; 0x1d
     b7c:	4c 8e       	std	Y+28, r4	; 0x1c
     b7e:	08 94       	sec
     b80:	41 1c       	adc	r4, r1
     b82:	51 1c       	adc	r5, r1
     b84:	61 1c       	adc	r6, r1
     b86:	71 1c       	adc	r7, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     b88:	90 e8       	ldi	r25, 0x80	; 128
     b8a:	29 16       	cp	r2, r25
     b8c:	11 f4       	brne	.+4      	; 0xb92 <USB_ProcessHIDReport+0x57e>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     b8e:	1b 8a       	std	Y+19, r1	; 0x13
     b90:	08 c0       	rjmp	.+16     	; 0xba2 <USB_ProcessHIDReport+0x58e>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     b92:	a0 e9       	ldi	r26, 0x90	; 144
     b94:	2a 16       	cp	r2, r26
     b96:	19 f4       	brne	.+6      	; 0xb9e <USB_ProcessHIDReport+0x58a>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     b98:	b1 e0       	ldi	r27, 0x01	; 1
     b9a:	bb 8b       	std	Y+19, r27	; 0x13
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <USB_ProcessHIDReport+0x58e>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     b9e:	e2 e0       	ldi	r30, 0x02	; 2
     ba0:	eb 8b       	std	Y+19, r30	; 0x13

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     ba2:	eb 89       	ldd	r30, Y+19	; 0x13
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	ee 0f       	add	r30, r30
     ba8:	ff 1f       	adc	r31, r31
     baa:	e8 0d       	add	r30, r8
     bac:	f9 1d       	adc	r31, r9
     bae:	81 81       	ldd	r24, Z+1	; 0x01
     bb0:	92 81       	ldd	r25, Z+2	; 0x02
     bb2:	9a 8b       	std	Y+18, r25	; 0x12
     bb4:	89 8b       	std	Y+17, r24	; 0x11

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     bb6:	d8 01       	movw	r26, r16
     bb8:	2c 91       	ld	r18, X
     bba:	81 81       	ldd	r24, Z+1	; 0x01
     bbc:	92 81       	ldd	r25, Z+2	; 0x02
     bbe:	82 0f       	add	r24, r18
     bc0:	91 1d       	adc	r25, r1
     bc2:	92 83       	std	Z+2, r25	; 0x02
     bc4:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     bc6:	eb 89       	ldd	r30, Y+19	; 0x13
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	ee 0f       	add	r30, r30
     bcc:	ff 1f       	adc	r31, r31
     bce:	e8 0d       	add	r30, r8
     bd0:	f9 1d       	adc	r31, r9
     bd2:	cf 57       	subi	r28, 0x7F	; 127
     bd4:	df 4f       	sbci	r29, 0xFF	; 255
     bd6:	a8 81       	ld	r26, Y
     bd8:	b9 81       	ldd	r27, Y+1	; 0x01
     bda:	c1 58       	subi	r28, 0x81	; 129
     bdc:	d0 40       	sbci	r29, 0x00	; 0
     bde:	4d 91       	ld	r20, X+
     be0:	5c 91       	ld	r21, X
     be2:	11 97       	sbiw	r26, 0x01	; 1
     be4:	81 81       	ldd	r24, Z+1	; 0x01
     be6:	92 81       	ldd	r25, Z+2	; 0x02
     be8:	84 17       	cp	r24, r20
     bea:	95 07       	cpc	r25, r21
     bec:	08 f4       	brcc	.+2      	; 0xbf0 <USB_ProcessHIDReport+0x5dc>
     bee:	ca 01       	movw	r24, r20
     bf0:	cf 57       	subi	r28, 0x7F	; 127
     bf2:	df 4f       	sbci	r29, 0xFF	; 255
     bf4:	e8 81       	ld	r30, Y
     bf6:	f9 81       	ldd	r31, Y+1	; 0x01
     bf8:	c1 58       	subi	r28, 0x81	; 129
     bfa:	d0 40       	sbci	r29, 0x00	; 0
     bfc:	91 83       	std	Z+1, r25	; 0x01
     bfe:	80 83       	st	Z, r24

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     c00:	d5 01       	movw	r26, r10
     c02:	8c 91       	ld	r24, X
     c04:	84 31       	cpi	r24, 0x14	; 20
     c06:	09 f4       	brne	.+2      	; 0xc0a <USB_ProcessHIDReport+0x5f6>
     c08:	9e c0       	rjmp	.+316    	; 0xd46 <USB_ProcessHIDReport+0x732>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	4a e2       	ldi	r20, 0x2A	; 42
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	84 9f       	mul	r24, r20
     c12:	f0 01       	movw	r30, r0
     c14:	85 9f       	mul	r24, r21
     c16:	f0 0d       	add	r31, r0
     c18:	94 9f       	mul	r25, r20
     c1a:	f0 0d       	add	r31, r0
     c1c:	11 24       	eor	r1, r1
     c1e:	ea 0d       	add	r30, r10
     c20:	fb 1d       	adc	r31, r11
     c22:	31 96       	adiw	r30, 0x01	; 1
     c24:	de 01       	movw	r26, r28
     c26:	51 96       	adiw	r26, 0x11	; 17
     c28:	8a e2       	ldi	r24, 0x2A	; 42
     c2a:	0d 90       	ld	r0, X+
     c2c:	01 92       	st	Z+, r0
     c2e:	81 50       	subi	r24, 0x01	; 1
     c30:	e1 f7       	brne	.-8      	; 0xc2a <USB_ProcessHIDReport+0x616>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     c32:	cd 57       	subi	r28, 0x7D	; 125
     c34:	df 4f       	sbci	r29, 0xFF	; 255
     c36:	88 81       	ld	r24, Y
     c38:	99 81       	ldd	r25, Y+1	; 0x01
     c3a:	aa 81       	ldd	r26, Y+2	; 0x02
     c3c:	bb 81       	ldd	r27, Y+3	; 0x03
     c3e:	c3 58       	subi	r28, 0x83	; 131
     c40:	d0 40       	sbci	r29, 0x00	; 0
     c42:	00 97       	sbiw	r24, 0x00	; 0
     c44:	a1 05       	cpc	r26, r1
     c46:	b1 05       	cpc	r27, r1
     c48:	39 f5       	brne	.+78     	; 0xc98 <USB_ProcessHIDReport+0x684>
     c4a:	ce 01       	movw	r24, r28
     c4c:	41 96       	adiw	r24, 0x11	; 17
     c4e:	c1 57       	subi	r28, 0x71	; 113
     c50:	df 4f       	sbci	r29, 0xFF	; 255
     c52:	38 83       	st	Y, r19
     c54:	cf 58       	subi	r28, 0x8F	; 143
     c56:	d0 40       	sbci	r29, 0x00	; 0
     c58:	c3 57       	subi	r28, 0x73	; 115
     c5a:	df 4f       	sbci	r29, 0xFF	; 255
     c5c:	68 83       	st	Y, r22
     c5e:	cd 58       	subi	r28, 0x8D	; 141
     c60:	d0 40       	sbci	r29, 0x00	; 0
     c62:	c2 57       	subi	r28, 0x72	; 114
     c64:	df 4f       	sbci	r29, 0xFF	; 255
     c66:	78 83       	st	Y, r23
     c68:	ce 58       	subi	r28, 0x8E	; 142
     c6a:	d0 40       	sbci	r29, 0x00	; 0
     c6c:	ac dc       	rcall	.-1704   	; 0x5c6 <CALLBACK_HIDParser_FilterHIDReportItem>
     c6e:	c1 57       	subi	r28, 0x71	; 113
     c70:	df 4f       	sbci	r29, 0xFF	; 255
     c72:	38 81       	ld	r19, Y
     c74:	cf 58       	subi	r28, 0x8F	; 143
     c76:	d0 40       	sbci	r29, 0x00	; 0
     c78:	c3 57       	subi	r28, 0x73	; 115
     c7a:	df 4f       	sbci	r29, 0xFF	; 255
     c7c:	68 81       	ld	r22, Y
     c7e:	cd 58       	subi	r28, 0x8D	; 141
     c80:	d0 40       	sbci	r29, 0x00	; 0
     c82:	c2 57       	subi	r28, 0x72	; 114
     c84:	df 4f       	sbci	r29, 0xFF	; 255
     c86:	78 81       	ld	r23, Y
     c88:	ce 58       	subi	r28, 0x8E	; 142
     c8a:	d0 40       	sbci	r29, 0x00	; 0
     c8c:	88 23       	and	r24, r24
     c8e:	21 f0       	breq	.+8      	; 0xc98 <USB_ProcessHIDReport+0x684>
     c90:	d5 01       	movw	r26, r10
					  ParserData->TotalReportItems++;
     c92:	8c 91       	ld	r24, X
     c94:	8f 5f       	subi	r24, 0xFF	; 255
     c96:	8c 93       	st	X, r24
     c98:	33 94       	inc	r3
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     c9a:	1a c0       	rjmp	.+52     	; 0xcd0 <USB_ProcessHIDReport+0x6bc>
     c9c:	33 24       	eor	r3, r3
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     c9e:	8c ef       	ldi	r24, 0xFC	; 252
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));
     ca0:	28 2e       	mov	r2, r24
     ca2:	22 22       	and	r2, r18
     ca4:	d7 01       	movw	r26, r14
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     ca6:	c6 01       	movw	r24, r12
     ca8:	81 70       	andi	r24, 0x01	; 1
     caa:	90 70       	andi	r25, 0x00	; 0
     cac:	a0 70       	andi	r26, 0x00	; 0
     cae:	b0 70       	andi	r27, 0x00	; 0
     cb0:	cd 57       	subi	r28, 0x7D	; 125
     cb2:	df 4f       	sbci	r29, 0xFF	; 255
     cb4:	88 83       	st	Y, r24
     cb6:	99 83       	std	Y+1, r25	; 0x01
     cb8:	aa 83       	std	Y+2, r26	; 0x02
     cba:	bb 83       	std	Y+3, r27	; 0x03
     cbc:	c3 58       	subi	r28, 0x83	; 131
     cbe:	d0 40       	sbci	r29, 0x00	; 0
     cc0:	c5 57       	subi	r28, 0x75	; 117
     cc2:	df 4f       	sbci	r29, 0xFF	; 255
     cc4:	79 83       	std	Y+1, r23	; 0x01
     cc6:	68 83       	st	Y, r22
     cc8:	cb 58       	subi	r28, 0x8B	; 139
     cca:	d0 40       	sbci	r29, 0x00	; 0
     ccc:	b4 01       	movw	r22, r8
     cce:	4a 01       	movw	r8, r20
     cd0:	d8 01       	movw	r26, r16
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     cd2:	5a 96       	adiw	r26, 0x1a	; 26
     cd4:	8c 91       	ld	r24, X
     cd6:	5a 97       	sbiw	r26, 0x1a	; 26
     cd8:	38 16       	cp	r3, r24
     cda:	08 f4       	brcc	.+2      	; 0xcde <USB_ProcessHIDReport+0x6ca>
     cdc:	20 cf       	rjmp	.-448    	; 0xb1e <USB_ProcessHIDReport+0x50a>
     cde:	a4 01       	movw	r20, r8
     ce0:	4b 01       	movw	r8, r22
     ce2:	c5 57       	subi	r28, 0x75	; 117
     ce4:	df 4f       	sbci	r29, 0xFF	; 255
     ce6:	68 81       	ld	r22, Y
     ce8:	79 81       	ldd	r23, Y+1	; 0x01
     cea:	cb 58       	subi	r28, 0x8B	; 139
     cec:	d0 40       	sbci	r29, 0x00	; 0
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <USB_ProcessHIDReport+0x6e0>
     cf0:	26 01       	movw	r4, r12
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     cf2:	37 01       	movw	r6, r14
     cf4:	ed 96       	adiw	r28, 0x3d	; 61
			
			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     cf6:	8e ad       	sts	0x6e, r24
     cf8:	9f ad       	sts	0x6f, r25
     cfa:	ed 97       	sbiw	r28, 0x3d	; 61
     cfc:	8c 70       	andi	r24, 0x0C	; 12
     cfe:	90 70       	andi	r25, 0x00	; 0
     d00:	00 97       	sbiw	r24, 0x00	; 0
     d02:	51 f4       	brne	.+20     	; 0xd18 <USB_ProcessHIDReport+0x704>
     d04:	eb 96       	adiw	r28, 0x3b	; 59
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     d06:	1c ae       	sts	0xbc, r17
     d08:	1d ae       	sts	0xbd, r17
     d0a:	1e ae       	sts	0xbe, r17
     d0c:	1f ae       	sts	0xbf, r17
     d0e:	eb 97       	sbiw	r28, 0x3b	; 59
     d10:	44 24       	eor	r4, r4
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     d12:	55 24       	eor	r5, r5
     d14:	32 01       	movw	r6, r4
     d16:	30 e0       	ldi	r19, 0x00	; 0
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     d18:	e7 96       	adiw	r28, 0x37	; 55
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     d1a:	ee ad       	sts	0x6e, r30
     d1c:	ff ad       	sts	0x6f, r31
     d1e:	e7 97       	sbiw	r28, 0x37	; 55
     d20:	30 97       	sbiw	r30, 0x00	; 0
     d22:	09 f0       	breq	.+2      	; 0xd26 <USB_ProcessHIDReport+0x712>
     d24:	e1 cc       	rjmp	.-1598   	; 0x6e8 <USB_ProcessHIDReport+0xd4>
     d26:	d5 01       	movw	r26, r10
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     d28:	8c 91       	ld	r24, X
     d2a:	88 23       	and	r24, r24
     d2c:	71 f4       	brne	.+28     	; 0xd4a <USB_ProcessHIDReport+0x736>
     d2e:	88 e0       	ldi	r24, 0x08	; 8
	  return HID_PARSE_NoUnfilteredReportItems;
     d30:	0f c0       	rjmp	.+30     	; 0xd50 <USB_ProcessHIDReport+0x73c>
     d32:	81 e0       	ldi	r24, 0x01	; 1

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     d34:	0d c0       	rjmp	.+26     	; 0xd50 <USB_ProcessHIDReport+0x73c>
     d36:	82 e0       	ldi	r24, 0x02	; 2

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     d38:	0b c0       	rjmp	.+22     	; 0xd50 <USB_ProcessHIDReport+0x73c>
     d3a:	86 e0       	ldi	r24, 0x06	; 6

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     d3c:	09 c0       	rjmp	.+18     	; 0xd50 <USB_ProcessHIDReport+0x73c>
     d3e:	85 e0       	ldi	r24, 0x05	; 5
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     d40:	07 c0       	rjmp	.+14     	; 0xd50 <USB_ProcessHIDReport+0x73c>
     d42:	84 e0       	ldi	r24, 0x04	; 4
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     d44:	05 c0       	rjmp	.+10     	; 0xd50 <USB_ProcessHIDReport+0x73c>
     d46:	83 e0       	ldi	r24, 0x03	; 3
					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;
     d48:	03 c0       	rjmp	.+6      	; 0xd50 <USB_ProcessHIDReport+0x73c>
     d4a:	80 e0       	ldi	r24, 0x00	; 0
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     d4c:	01 c0       	rjmp	.+2      	; 0xd50 <USB_ProcessHIDReport+0x73c>
     d4e:	87 e0       	ldi	r24, 0x07	; 7
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     d50:	c1 57       	subi	r28, 0x71	; 113

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     d52:	df 4f       	sbci	r29, 0xFF	; 255
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	1f 91       	pop	r17
     d64:	0f 91       	pop	r16
     d66:	ff 90       	pop	r15
     d68:	ef 90       	pop	r14
     d6a:	df 90       	pop	r13
     d6c:	cf 90       	pop	r12
     d6e:	bf 90       	pop	r11
     d70:	af 90       	pop	r10
     d72:	9f 90       	pop	r9
     d74:	8f 90       	pop	r8
     d76:	7f 90       	pop	r7
     d78:	6f 90       	pop	r6
     d7a:	5f 90       	pop	r5
     d7c:	4f 90       	pop	r4
     d7e:	3f 90       	pop	r3
     d80:	2f 90       	pop	r2
     d82:	08 95       	ret
     d84:	2a 30       	cpi	r18, 0x0A	; 10
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     d86:	09 f0       	breq	.+2      	; 0xd8a <USB_ProcessHIDReport+0x776>
     d88:	39 ce       	rjmp	.-910    	; 0x9fc <USB_ProcessHIDReport+0x3e8>
     d8a:	e1 cf       	rjmp	.-62     	; 0xd4e <USB_ProcessHIDReport+0x73a>

00000d8c <USB_GetHIDReportItemInfo>:
     d8c:	ef 92       	push	r14
	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
     d8e:	ff 92       	push	r15
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	8c 01       	movw	r16, r24
     d9a:	eb 01       	movw	r28, r22
	if (ReportItem == NULL)
     d9c:	20 97       	sbiw	r28, 0x00	; 0
     d9e:	09 f4       	brne	.+2      	; 0xda2 <USB_GetHIDReportItemInfo+0x16>
     da0:	4e c0       	rjmp	.+156    	; 0xe3e <USB_GetHIDReportItemInfo+0xb2>
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
     da2:	e8 85       	ldd	r30, Y+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
     da4:	58 81       	ld	r21, Y
     da6:	49 81       	ldd	r20, Y+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
     da8:	8d 81       	ldd	r24, Y+5	; 0x05
     daa:	88 23       	and	r24, r24
     dac:	39 f0       	breq	.+14     	; 0xdbc <USB_GetHIDReportItemInfo+0x30>
	{
		if (ReportItem->ReportID != ReportData[0])
     dae:	d8 01       	movw	r26, r16
     db0:	9c 91       	ld	r25, X
     db2:	89 17       	cp	r24, r25
     db4:	09 f0       	breq	.+2      	; 0xdb8 <USB_GetHIDReportItemInfo+0x2c>
     db6:	43 c0       	rjmp	.+134    	; 0xe3e <USB_GetHIDReportItemInfo+0xb2>
		  return false;

		ReportData++;
     db8:	0f 5f       	subi	r16, 0xFF	; 255
     dba:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	ReportItem->PreviousValue = ReportItem->Value;
     dbc:	8a a1       	lds	r24, 0x4a
     dbe:	9b a1       	lds	r25, 0x4b
     dc0:	ac a1       	lds	r26, 0x4c
     dc2:	bd a1       	lds	r27, 0x4d
     dc4:	8e a3       	lds	r24, 0x5e
     dc6:	9f a3       	lds	r25, 0x5f
     dc8:	a8 a7       	lds	r26, 0x78
     dca:	b9 a7       	lds	r27, 0x79
	ReportItem->Value = 0;
     dcc:	1a a2       	lds	r17, 0x9a
     dce:	1b a2       	lds	r17, 0x9b
     dd0:	1c a2       	lds	r17, 0x9c
     dd2:	1d a2       	lds	r17, 0x9d
{
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
     dd4:	25 2f       	mov	r18, r21
     dd6:	34 2f       	mov	r19, r20
	uint32_t BitMask      = (1 << 0);
     dd8:	41 e0       	ldi	r20, 0x01	; 1
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	70 e0       	ldi	r23, 0x00	; 0
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
     de0:	79 01       	movw	r14, r18
     de2:	ee 0e       	add	r14, r30
     de4:	f1 1c       	adc	r15, r1
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
     de6:	26 c0       	rjmp	.+76     	; 0xe34 <USB_GetHIDReportItemInfo+0xa8>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
     de8:	f9 01       	movw	r30, r18
     dea:	93 e0       	ldi	r25, 0x03	; 3
     dec:	f6 95       	lsr	r31
     dee:	e7 95       	ror	r30
     df0:	9a 95       	dec	r25
     df2:	e1 f7       	brne	.-8      	; 0xdec <USB_GetHIDReportItemInfo+0x60>
     df4:	e0 0f       	add	r30, r16
     df6:	f1 1f       	adc	r31, r17
     df8:	e0 81       	ld	r30, Z
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	c9 01       	movw	r24, r18
     dfe:	87 70       	andi	r24, 0x07	; 7
     e00:	90 70       	andi	r25, 0x00	; 0
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <USB_GetHIDReportItemInfo+0x7c>
     e04:	f5 95       	asr	r31
     e06:	e7 95       	ror	r30
     e08:	8a 95       	dec	r24
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <USB_GetHIDReportItemInfo+0x78>
     e0c:	e0 ff       	sbrs	r30, 0
     e0e:	0c c0       	rjmp	.+24     	; 0xe28 <USB_GetHIDReportItemInfo+0x9c>
		  ReportItem->Value |= BitMask;
     e10:	8a a1       	lds	r24, 0x4a
     e12:	9b a1       	lds	r25, 0x4b
     e14:	ac a1       	lds	r26, 0x4c
     e16:	bd a1       	lds	r27, 0x4d
     e18:	84 2b       	or	r24, r20
     e1a:	95 2b       	or	r25, r21
     e1c:	a6 2b       	or	r26, r22
     e1e:	b7 2b       	or	r27, r23
     e20:	8a a3       	lds	r24, 0x5a
     e22:	9b a3       	lds	r25, 0x5b
     e24:	ac a3       	lds	r26, 0x5c
     e26:	bd a3       	lds	r27, 0x5d

		CurrentBit++;
     e28:	2f 5f       	subi	r18, 0xFF	; 255
     e2a:	3f 4f       	sbci	r19, 0xFF	; 255
		BitMask <<= 1;
     e2c:	44 0f       	add	r20, r20
     e2e:	55 1f       	adc	r21, r21
     e30:	66 1f       	adc	r22, r22
     e32:	77 1f       	adc	r23, r23
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
     e34:	e2 16       	cp	r14, r18
     e36:	f3 06       	cpc	r15, r19
     e38:	b9 f6       	brne	.-82     	; 0xde8 <USB_GetHIDReportItemInfo+0x5c>

		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	01 c0       	rjmp	.+2      	; 0xe40 <USB_GetHIDReportItemInfo+0xb4>
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
		  return false;
     e3e:	80 e0       	ldi	r24, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	ff 90       	pop	r15
     e4a:	ef 90       	pop	r14
     e4c:	08 95       	ret

00000e4e <USB_GetHIDReportSize>:
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
     e4e:	9c 01       	movw	r18, r24
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	44 0f       	add	r20, r20
     e58:	55 1f       	adc	r21, r21
     e5a:	42 0f       	add	r20, r18
     e5c:	53 1f       	adc	r21, r19
     e5e:	fa 01       	movw	r30, r20
     e60:	e8 0f       	add	r30, r24
     e62:	f9 1f       	adc	r31, r25
     e64:	ef 56       	subi	r30, 0x6F	; 111
     e66:	fc 4f       	sbci	r31, 0xFC	; 252
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
     e68:	a0 81       	ld	r26, Z
     e6a:	b1 81       	ldd	r27, Z+1	; 0x01
		CurrentBit++;
		BitMask <<= 1;
	}
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
     e6c:	f9 01       	movw	r30, r18
     e6e:	e8 0f       	add	r30, r24
     e70:	f9 1f       	adc	r31, r25
     e72:	e0 57       	subi	r30, 0x70	; 112
     e74:	fc 4f       	sbci	r31, 0xFC	; 252
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
     e76:	70 81       	ld	r23, Z
     e78:	76 17       	cp	r23, r22
     e7a:	91 f4       	brne	.+36     	; 0xea0 <USB_GetHIDReportSize+0x52>
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
     e7c:	cd 01       	movw	r24, r26
     e7e:	87 70       	andi	r24, 0x07	; 7
     e80:	90 70       	andi	r25, 0x00	; 0
     e82:	21 e0       	ldi	r18, 0x01	; 1
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	11 f4       	brne	.+4      	; 0xe8e <USB_GetHIDReportSize+0x40>
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	cd 01       	movw	r24, r26
     e90:	e3 e0       	ldi	r30, 0x03	; 3
     e92:	96 95       	lsr	r25
     e94:	87 95       	ror	r24
     e96:	ea 95       	dec	r30
     e98:	e1 f7       	brne	.-8      	; 0xe92 <USB_GetHIDReportSize+0x44>
     e9a:	82 0f       	add	r24, r18
     e9c:	93 1f       	adc	r25, r19
     e9e:	08 95       	ret
     ea0:	07 96       	adiw	r24, 0x07	; 7

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
     ea2:	86 34       	cpi	r24, 0x46	; 70
     ea4:	91 05       	cpc	r25, r1
     ea6:	d9 f6       	brne	.-74     	; 0xe5e <USB_GetHIDReportSize+0x10>

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
}
     eac:	08 95       	ret

00000eae <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     eae:	80 91 9e 00 	lds	r24, 0x009E
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	81 70       	andi	r24, 0x01	; 1
     eb6:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     eb8:	20 91 a0 00 	lds	r18, 0x00A0
     ebc:	2d 7f       	andi	r18, 0xFD	; 253
     ebe:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     ec2:	20 91 9e 00 	lds	r18, 0x009E
     ec6:	22 60       	ori	r18, 0x02	; 2
     ec8:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     ecc:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     ed0:	21 fd       	sbrc	r18, 1
     ed2:	fc cf       	rjmp	.-8      	; 0xecc <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     ed4:	20 91 9e 00 	lds	r18, 0x009E
     ed8:	21 60       	ori	r18, 0x01	; 1
     eda:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     ede:	10 92 1e 05 	sts	0x051E, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     ee2:	20 91 a0 00 	lds	r18, 0x00A0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	20 72       	andi	r18, 0x20	; 32
     eea:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     eec:	40 91 a0 00 	lds	r20, 0x00A0
     ef0:	4f 7d       	andi	r20, 0xDF	; 223
     ef2:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ef6:	40 91 9f 00 	lds	r20, 0x009F
     efa:	4f 7d       	andi	r20, 0xDF	; 223
     efc:	40 93 9f 00 	sts	0x009F, r20
     f00:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     f02:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     f06:	55 ff       	sbrs	r21, 5
     f08:	0b c0       	rjmp	.+22     	; 0xf20 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     f0a:	40 91 9f 00 	lds	r20, 0x009F
     f0e:	4f 7d       	andi	r20, 0xDF	; 223
     f10:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     f14:	40 91 9f 00 	lds	r20, 0x009F
     f18:	4d 7f       	andi	r20, 0xFD	; 253
     f1a:	40 93 9f 00 	sts	0x009F, r20
     f1e:	08 c0       	rjmp	.+16     	; 0xf30 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f20:	ef ec       	ldi	r30, 0xCF	; 207
     f22:	f7 e0       	ldi	r31, 0x07	; 7
     f24:	31 97       	sbiw	r30, 0x01	; 1
     f26:	f1 f7       	brne	.-4      	; 0xf24 <USB_Host_ResetDevice+0x76>
     f28:	00 c0       	rjmp	.+0      	; 0xf2a <USB_Host_ResetDevice+0x7c>
     f2a:	00 00       	nop
     f2c:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     f2e:	49 f7       	brne	.-46     	; 0xf02 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     f30:	21 15       	cp	r18, r1
     f32:	31 05       	cpc	r19, r1
     f34:	29 f0       	breq	.+10     	; 0xf40 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     f36:	20 91 a0 00 	lds	r18, 0x00A0
     f3a:	20 62       	ori	r18, 0x20	; 32
     f3c:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	29 f4       	brne	.+10     	; 0xf4e <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     f44:	80 91 9e 00 	lds	r24, 0x009E
     f48:	8e 7f       	andi	r24, 0xFE	; 254
     f4a:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     f4e:	80 91 a0 00 	lds	r24, 0x00A0
     f52:	82 60       	ori	r24, 0x02	; 2
     f54:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     f58:	08 95       	ret

00000f5a <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f5a:	40 91 9e 00 	lds	r20, 0x009E
     f5e:	50 e0       	ldi	r21, 0x00	; 0
     f60:	41 70       	andi	r20, 0x01	; 1
     f62:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     f64:	20 91 a0 00 	lds	r18, 0x00A0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	20 72       	andi	r18, 0x20	; 32
     f6c:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     f6e:	90 91 a0 00 	lds	r25, 0x00A0
     f72:	9f 7d       	andi	r25, 0xDF	; 223
     f74:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     f78:	90 91 9f 00 	lds	r25, 0x009F
     f7c:	9f 7d       	andi	r25, 0xDF	; 223
     f7e:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f82:	90 91 9e 00 	lds	r25, 0x009E
     f86:	91 60       	ori	r25, 0x01	; 1
     f88:	90 93 9e 00 	sts	0x009E, r25
     f8c:	26 c0       	rjmp	.+76     	; 0xfda <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     f8e:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     f92:	95 ff       	sbrs	r25, 5
     f94:	06 c0       	rjmp	.+12     	; 0xfa2 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     f96:	90 91 9f 00 	lds	r25, 0x009F
     f9a:	9f 7d       	andi	r25, 0xDF	; 223
     f9c:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     fa0:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     fa2:	90 91 28 05 	lds	r25, 0x0528
     fa6:	91 30       	cpi	r25, 0x01	; 1
     fa8:	d9 f0       	breq	.+54     	; 0xfe0 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     faa:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     fae:	94 ff       	sbrs	r25, 4
     fb0:	09 c0       	rjmp	.+18     	; 0xfc4 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     fb2:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     fb6:	80 91 a6 00 	lds	r24, 0x00A6
     fba:	8f 7e       	andi	r24, 0xEF	; 239
     fbc:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     fc0:	82 e0       	ldi	r24, 0x02	; 2

			break;
     fc2:	0f c0       	rjmp	.+30     	; 0xfe2 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     fc4:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     fc8:	91 ff       	sbrs	r25, 1
     fca:	07 c0       	rjmp	.+14     	; 0xfda <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     fcc:	80 91 a6 00 	lds	r24, 0x00A6
     fd0:	8d 7f       	andi	r24, 0xFD	; 253
     fd2:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     fd6:	83 e0       	ldi	r24, 0x03	; 3

			break;
     fd8:	04 c0       	rjmp	.+8      	; 0xfe2 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     fda:	88 23       	and	r24, r24
     fdc:	c1 f6       	brne	.-80     	; 0xf8e <USB_Host_WaitMS+0x34>
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     fe0:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     fe2:	41 15       	cp	r20, r1
     fe4:	51 05       	cpc	r21, r1
     fe6:	29 f4       	brne	.+10     	; 0xff2 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     fe8:	90 91 9e 00 	lds	r25, 0x009E
     fec:	9e 7f       	andi	r25, 0xFE	; 254
     fee:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     ff2:	21 15       	cp	r18, r1
     ff4:	31 05       	cpc	r19, r1
     ff6:	29 f0       	breq	.+10     	; 0x1002 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     ff8:	90 91 a0 00 	lds	r25, 0x00A0
     ffc:	90 62       	ori	r25, 0x20	; 32
     ffe:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
    1002:	08 95       	ret

00001004 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	28 97       	sbiw	r28, 0x08	; 8
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    101c:	80 91 28 05 	lds	r24, 0x0528
    1020:	85 30       	cpi	r24, 0x05	; 5
    1022:	09 f4       	brne	.+2      	; 0x1026 <USB_Host_ProcessNextHostState+0x22>
    1024:	99 c0       	rjmp	.+306    	; 0x1158 <USB_Host_ProcessNextHostState+0x154>
    1026:	86 30       	cpi	r24, 0x06	; 6
    1028:	68 f4       	brcc	.+26     	; 0x1044 <USB_Host_ProcessNextHostState+0x40>
    102a:	82 30       	cpi	r24, 0x02	; 2
    102c:	c1 f1       	breq	.+112    	; 0x109e <USB_Host_ProcessNextHostState+0x9a>
    102e:	83 30       	cpi	r24, 0x03	; 3
    1030:	18 f4       	brcc	.+6      	; 0x1038 <USB_Host_ProcessNextHostState+0x34>
    1032:	88 23       	and	r24, r24
    1034:	a1 f0       	breq	.+40     	; 0x105e <USB_Host_ProcessNextHostState+0x5a>
    1036:	04 c1       	rjmp	.+520    	; 0x1240 <USB_Host_ProcessNextHostState+0x23c>
    1038:	83 30       	cpi	r24, 0x03	; 3
    103a:	d9 f1       	breq	.+118    	; 0x10b2 <USB_Host_ProcessNextHostState+0xae>
    103c:	84 30       	cpi	r24, 0x04	; 4
    103e:	09 f0       	breq	.+2      	; 0x1042 <USB_Host_ProcessNextHostState+0x3e>
    1040:	ff c0       	rjmp	.+510    	; 0x1240 <USB_Host_ProcessNextHostState+0x23c>
    1042:	62 c0       	rjmp	.+196    	; 0x1108 <USB_Host_ProcessNextHostState+0x104>
    1044:	87 30       	cpi	r24, 0x07	; 7
    1046:	09 f4       	brne	.+2      	; 0x104a <USB_Host_ProcessNextHostState+0x46>
    1048:	9e c0       	rjmp	.+316    	; 0x1186 <USB_Host_ProcessNextHostState+0x182>
    104a:	87 30       	cpi	r24, 0x07	; 7
    104c:	08 f4       	brcc	.+2      	; 0x1050 <USB_Host_ProcessNextHostState+0x4c>
    104e:	8f c0       	rjmp	.+286    	; 0x116e <USB_Host_ProcessNextHostState+0x16a>
    1050:	88 30       	cpi	r24, 0x08	; 8
    1052:	09 f4       	brne	.+2      	; 0x1056 <USB_Host_ProcessNextHostState+0x52>
    1054:	b8 c0       	rjmp	.+368    	; 0x11c6 <USB_Host_ProcessNextHostState+0x1c2>
    1056:	89 30       	cpi	r24, 0x09	; 9
    1058:	09 f0       	breq	.+2      	; 0x105c <USB_Host_ProcessNextHostState+0x58>
    105a:	f2 c0       	rjmp	.+484    	; 0x1240 <USB_Host_ProcessNextHostState+0x23c>
    105c:	d9 c0       	rjmp	.+434    	; 0x1210 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    105e:	00 91 1b 05 	lds	r16, 0x051B
    1062:	10 91 1c 05 	lds	r17, 0x051C
    1066:	01 15       	cp	r16, r1
    1068:	11 05       	cpc	r17, r1
    106a:	09 f4       	brne	.+2      	; 0x106e <USB_Host_ProcessNextHostState+0x6a>
    106c:	e9 c0       	rjmp	.+466    	; 0x1240 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	74 df       	rcall	.-280    	; 0xf5a <USB_Host_WaitMS>
    1072:	68 2f       	mov	r22, r24
    1074:	88 23       	and	r24, r24
    1076:	31 f0       	breq	.+12     	; 0x1084 <USB_Host_ProcessNextHostState+0x80>
    1078:	80 91 1d 05 	lds	r24, 0x051D
				{
					USB_HostState = PostWaitState;
    107c:	80 93 28 05 	sts	0x0528, r24
    1080:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
    1082:	d2 c0       	rjmp	.+420    	; 0x1228 <USB_Host_ProcessNextHostState+0x224>
					break;
    1084:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
    1086:	10 40       	sbci	r17, 0x00	; 0
    1088:	10 93 1c 05 	sts	0x051C, r17
    108c:	00 93 1b 05 	sts	0x051B, r16
    1090:	01 15       	cp	r16, r1
    1092:	11 05       	cpc	r17, r1
    1094:	09 f0       	breq	.+2      	; 0x1098 <USB_Host_ProcessNextHostState+0x94>
    1096:	d4 c0       	rjmp	.+424    	; 0x1240 <USB_Host_ProcessNextHostState+0x23c>
    1098:	80 91 1d 05 	lds	r24, 0x051D
				  USB_HostState = PostWaitState;
    109c:	07 c0       	rjmp	.+14     	; 0x10ac <USB_Host_ProcessNextHostState+0xa8>
    109e:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    10a0:	93 e0       	ldi	r25, 0x03	; 3
    10a2:	90 93 1c 05 	sts	0x051C, r25
    10a6:	80 93 1b 05 	sts	0x051B, r24
    10aa:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    10ac:	80 93 28 05 	sts	0x0528, r24
    10b0:	c7 c0       	rjmp	.+398    	; 0x1240 <USB_Host_ProcessNextHostState+0x23c>
			break;
    10b2:	80 91 1b 05 	lds	r24, 0x051B
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    10b6:	90 91 1c 05 	lds	r25, 0x051C
    10ba:	9c 01       	movw	r18, r24
    10bc:	21 50       	subi	r18, 0x01	; 1
    10be:	30 40       	sbci	r19, 0x00	; 0
    10c0:	30 93 1c 05 	sts	0x051C, r19
    10c4:	20 93 1b 05 	sts	0x051B, r18
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	39 f0       	breq	.+14     	; 0x10da <USB_Host_ProcessNextHostState+0xd6>
    10cc:	8f ec       	ldi	r24, 0xCF	; 207
    10ce:	97 e0       	ldi	r25, 0x07	; 7
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	f1 f7       	brne	.-4      	; 0x10d0 <USB_Host_ProcessNextHostState+0xcc>
    10d4:	00 c0       	rjmp	.+0      	; 0x10d6 <USB_Host_ProcessNextHostState+0xd2>
    10d6:	00 00       	nop
    10d8:	b3 c0       	rjmp	.+358    	; 0x1240 <USB_Host_ProcessNextHostState+0x23c>
    10da:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    10dc:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    10e0:	80 61       	ori	r24, 0x10	; 16
    10e2:	80 93 d8 00 	sts	0x00D8, r24
    10e6:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    10ea:	8b 7f       	andi	r24, 0xFB	; 251
    10ec:	80 93 dd 00 	sts	0x00DD, r24
    10f0:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
    10f4:	80 61       	ori	r24, 0x10	; 16
    10f6:	80 93 d7 00 	sts	0x00D7, r24
    10fa:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    10fe:	82 60       	ori	r24, 0x02	; 2
    1100:	80 93 dd 00 	sts	0x00DD, r24
    1104:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    1106:	d2 cf       	rjmp	.-92     	; 0x10ac <USB_Host_ProcessNextHostState+0xa8>
    1108:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    110c:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    110e:	98 c0       	rjmp	.+304    	; 0x1240 <USB_Host_ProcessNextHostState+0x23c>
    1110:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1114:	8e 7f       	andi	r24, 0xFE	; 254
    1116:	80 93 9f 00 	sts	0x009F, r24
    111a:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    111e:	8d 7f       	andi	r24, 0xFD	; 253
    1120:	80 93 9f 00 	sts	0x009F, r24
    1124:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1128:	8d 7f       	andi	r24, 0xFD	; 253
    112a:	80 93 df 00 	sts	0x00DF, r24
    112e:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    1132:	82 60       	ori	r24, 0x02	; 2
    1134:	80 93 de 00 	sts	0x00DE, r24
    1138:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    113c:	81 60       	ori	r24, 0x01	; 1
    113e:	80 93 9e 00 	sts	0x009E, r24
    1142:	66 d1       	rcall	.+716    	; 0x1410 <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    1144:	10 92 28 05 	sts	0x0528, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    1148:	84 e6       	ldi	r24, 0x64	; 100
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	90 93 1c 05 	sts	0x051C, r25
    1150:	80 93 1b 05 	sts	0x051B, r24
    1154:	85 e0       	ldi	r24, 0x05	; 5
    1156:	59 c0       	rjmp	.+178    	; 0x120a <USB_Host_ProcessNextHostState+0x206>
    1158:	aa de       	rcall	.-684    	; 0xeae <USB_Host_ResetDevice>
    115a:	10 92 28 05 	sts	0x0528, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    115e:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	90 93 1c 05 	sts	0x051C, r25
    1166:	80 93 1b 05 	sts	0x051B, r24
    116a:	86 e0       	ldi	r24, 0x06	; 6
    116c:	4e c0       	rjmp	.+156    	; 0x120a <USB_Host_ProcessNextHostState+0x206>
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    1174:	20 e4       	ldi	r18, 0x40	; 64
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	01 e0       	ldi	r16, 0x01	; 1
    117a:	c4 d0       	rcall	.+392    	; 0x1304 <Pipe_ConfigurePipe>
    117c:	88 23       	and	r24, r24
    117e:	09 f4       	brne	.+2      	; 0x1182 <USB_Host_ProcessNextHostState+0x17e>
    1180:	4f c0       	rjmp	.+158    	; 0x1220 <USB_Host_ProcessNextHostState+0x21c>
    1182:	87 e0       	ldi	r24, 0x07	; 7
    1184:	93 cf       	rjmp	.-218    	; 0x10ac <USB_Host_ProcessNextHostState+0xa8>
    1186:	a0 e2       	ldi	r26, 0x20	; 32
    1188:	b5 e0       	ldi	r27, 0x05	; 5
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    118a:	e7 e1       	ldi	r30, 0x17	; 23
    118c:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    118e:	88 e0       	ldi	r24, 0x08	; 8
    1190:	01 90       	ld	r0, Z+
    1192:	0d 92       	st	X+, r0
    1194:	81 50       	subi	r24, 0x01	; 1
    1196:	e1 f7       	brne	.-8      	; 0x1190 <USB_Host_ProcessNextHostState+0x18c>
    1198:	10 92 a7 00 	sts	0x00A7, r1
    119c:	ce 01       	movw	r24, r28
    119e:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    11a0:	7e d3       	rcall	.+1788   	; 0x189e <USB_Host_SendControlRequest>
    11a2:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    11a4:	88 23       	and	r24, r24
    11a6:	09 f0       	breq	.+2      	; 0x11aa <USB_Host_ProcessNextHostState+0x1a6>
    11a8:	3e c0       	rjmp	.+124    	; 0x1226 <USB_Host_ProcessNextHostState+0x222>
    11aa:	88 85       	ldd	r24, Y+8	; 0x08
    11ac:	80 93 27 01 	sts	0x0127, r24
    11b0:	7e de       	rcall	.-772    	; 0xeae <USB_Host_ResetDevice>
    11b2:	10 92 28 05 	sts	0x0528, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    11b6:	88 ec       	ldi	r24, 0xC8	; 200
    11b8:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
    11ba:	90 93 1c 05 	sts	0x051C, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    11be:	80 93 1b 05 	sts	0x051B, r24
    11c2:	88 e0       	ldi	r24, 0x08	; 8
    11c4:	22 c0       	rjmp	.+68     	; 0x120a <USB_Host_ProcessNextHostState+0x206>
    11c6:	20 91 27 01 	lds	r18, 0x0127
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	40 e0       	ldi	r20, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    11d2:	01 e0       	ldi	r16, 0x01	; 1
    11d4:	97 d0       	rcall	.+302    	; 0x1304 <Pipe_ConfigurePipe>
    11d6:	88 23       	and	r24, r24
    11d8:	19 f1       	breq	.+70     	; 0x1220 <USB_Host_ProcessNextHostState+0x21c>
    11da:	a0 e2       	ldi	r26, 0x20	; 32
    11dc:	b5 e0       	ldi	r27, 0x05	; 5
    11de:	ef e1       	ldi	r30, 0x1F	; 31
    11e0:	f1 e0       	ldi	r31, 0x01	; 1
    11e2:	88 e0       	ldi	r24, 0x08	; 8
    11e4:	01 90       	ld	r0, Z+
    11e6:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    11e8:	81 50       	subi	r24, 0x01	; 1
    11ea:	e1 f7       	brne	.-8      	; 0x11e4 <USB_Host_ProcessNextHostState+0x1e0>
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	56 d3       	rcall	.+1708   	; 0x189e <USB_Host_SendControlRequest>
    11f2:	68 2f       	mov	r22, r24
    11f4:	88 23       	and	r24, r24
    11f6:	b9 f4       	brne	.+46     	; 0x1226 <USB_Host_ProcessNextHostState+0x222>
    11f8:	10 92 28 05 	sts	0x0528, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    11fc:	84 e6       	ldi	r24, 0x64	; 100
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	90 93 1c 05 	sts	0x051C, r25
    1204:	80 93 1b 05 	sts	0x051B, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    1208:	89 e0       	ldi	r24, 0x09	; 9
    120a:	80 93 1d 05 	sts	0x051D, r24
    120e:	18 c0       	rjmp	.+48     	; 0x1240 <USB_Host_ProcessNextHostState+0x23c>
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	80 93 a1 00 	sts	0x00A1, r24
    1216:	8a e0       	ldi	r24, 0x0A	; 10
    1218:	80 93 28 05 	sts	0x0528, r24
    121c:	35 d9       	rcall	.-3478   	; 0x488 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
    121e:	10 c0       	rjmp	.+32     	; 0x1240 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	84 e0       	ldi	r24, 0x04	; 4
    1224:	01 c0       	rjmp	.+2      	; 0x1228 <USB_Host_ProcessNextHostState+0x224>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    1226:	83 e0       	ldi	r24, 0x03	; 3
    1228:	90 91 28 05 	lds	r25, 0x0528

			EVENT_USB_Host_DeviceEnumerationComplete();
    122c:	91 30       	cpi	r25, 0x01	; 1
    122e:	41 f0       	breq	.+16     	; 0x1240 <USB_Host_ProcessNextHostState+0x23c>
			break;
    1230:	a1 d9       	rcall	.-3262   	; 0x574 <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    1232:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    1236:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
    1238:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    123c:	1f d9       	rcall	.-3522   	; 0x47c <EVENT_USB_Host_DeviceUnattached>
    123e:	64 d1       	rcall	.+712    	; 0x1508 <USB_ResetInterface>
    1240:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    1250:	1f 91       	pop	r17
    1252:	0f 91       	pop	r16

		USB_ResetInterface();
    1254:	08 95       	ret

00001256 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1256:	af 92       	push	r10
    1258:	bf 92       	push	r11
    125a:	cf 92       	push	r12
    125c:	df 92       	push	r13
    125e:	ff 92       	push	r15
    1260:	0f 93       	push	r16
    1262:	1f 93       	push	r17
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	5c 01       	movw	r10, r24
    126a:	eb 01       	movw	r28, r22
    126c:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    126e:	80 91 aa 00 	lds	r24, 0x00AA
    1272:	8f 7c       	andi	r24, 0xCF	; 207
    1274:	80 61       	ori	r24, 0x10	; 16
    1276:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    127a:	00 d1       	rcall	.+512    	; 0x147c <Pipe_WaitUntilReady>
    127c:	f8 2e       	mov	r15, r24
    127e:	88 23       	and	r24, r24
    1280:	b1 f5       	brne	.+108    	; 0x12ee <Pipe_Read_Stream_LE+0x98>
    1282:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1284:	d1 04       	cpc	r13, r1
    1286:	41 f0       	breq	.+16     	; 0x1298 <Pipe_Read_Stream_LE+0x42>
    1288:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
    128a:	00 81       	ld	r16, Z
    128c:	11 81       	ldd	r17, Z+1	; 0x01
    128e:	c0 1b       	sub	r28, r16
    1290:	d1 0b       	sbc	r29, r17
    1292:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1294:	1b 1d       	adc	r17, r11
    1296:	01 c0       	rjmp	.+2      	; 0x129a <Pipe_Read_Stream_LE+0x44>
    1298:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    129a:	aa 24       	eor	r10, r10
    129c:	bb 24       	eor	r11, r11
    129e:	23 c0       	rjmp	.+70     	; 0x12e6 <Pipe_Read_Stream_LE+0x90>
    12a0:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    12a4:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    12a6:	16 c0       	rjmp	.+44     	; 0x12d4 <Pipe_Read_Stream_LE+0x7e>
    12a8:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    12ac:	8e 77       	andi	r24, 0x7E	; 126
    12ae:	80 93 a6 00 	sts	0x00A6, r24
    12b2:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    12b4:	d1 04       	cpc	r13, r1
    12b6:	51 f0       	breq	.+20     	; 0x12cc <Pipe_Read_Stream_LE+0x76>
    12b8:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
    12ba:	80 81       	ld	r24, Z
    12bc:	91 81       	ldd	r25, Z+1	; 0x01
    12be:	8a 0d       	add	r24, r10
    12c0:	9b 1d       	adc	r25, r11
    12c2:	91 83       	std	Z+1, r25	; 0x01
    12c4:	80 83       	st	Z, r24
    12c6:	64 e0       	ldi	r22, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
    12c8:	f6 2e       	mov	r15, r22
    12ca:	11 c0       	rjmp	.+34     	; 0x12ee <Pipe_Read_Stream_LE+0x98>
    12cc:	d7 d0       	rcall	.+430    	; 0x147c <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    12ce:	88 23       	and	r24, r24
    12d0:	51 f0       	breq	.+20     	; 0x12e6 <Pipe_Read_Stream_LE+0x90>
    12d2:	0c c0       	rjmp	.+24     	; 0x12ec <Pipe_Read_Stream_LE+0x96>
    12d4:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    12d8:	f8 01       	movw	r30, r16
    12da:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    12dc:	8f 01       	movw	r16, r30
    12de:	21 97       	sbiw	r28, 0x01	; 1
    12e0:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    12e2:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
    12e4:	b1 1c       	adc	r11, r1
    12e6:	20 97       	sbiw	r28, 0x00	; 0
    12e8:	d9 f6       	brne	.-74     	; 0x12a0 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    12ea:	01 c0       	rjmp	.+2      	; 0x12ee <Pipe_Read_Stream_LE+0x98>
    12ec:	f8 2e       	mov	r15, r24
    12ee:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    12f0:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	ff 90       	pop	r15
    12fa:	df 90       	pop	r13
    12fc:	cf 90       	pop	r12
    12fe:	bf 90       	pop	r11
    1300:	af 90       	pop	r10
    1302:	08 95       	ret

00001304 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    1304:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    1306:	58 2f       	mov	r21, r24
    1308:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    130a:	87 ff       	sbrs	r24, 7
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <Pipe_ConfigurePipe+0xe>
    130e:	80 e1       	ldi	r24, 0x10	; 16
    1310:	01 c0       	rjmp	.+2      	; 0x1314 <Pipe_ConfigurePipe+0x10>
    1312:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
    1314:	57 30       	cpi	r21, 0x07	; 7
    1316:	08 f0       	brcs	.+2      	; 0x131a <Pipe_ConfigurePipe+0x16>
    1318:	57 c0       	rjmp	.+174    	; 0x13c8 <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
    131a:	66 23       	and	r22, r22
    131c:	09 f4       	brne	.+2      	; 0x1320 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
    131e:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    1320:	4f 70       	andi	r20, 0x0F	; 15
    1322:	62 95       	swap	r22
    1324:	66 0f       	add	r22, r22
    1326:	66 0f       	add	r22, r22
    1328:	60 7c       	andi	r22, 0xC0	; 192
    132a:	64 2b       	or	r22, r20
    132c:	68 2b       	or	r22, r24
    132e:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    1330:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1332:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    1336:	45 17       	cp	r20, r21
    1338:	a9 f4       	brne	.+42     	; 0x1364 <Pipe_ConfigurePipe+0x60>
    133a:	04 c0       	rjmp	.+8      	; 0x1344 <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    133c:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	03 c0       	rjmp	.+6      	; 0x134a <Pipe_ConfigurePipe+0x46>
    1344:	88 e0       	ldi	r24, 0x08	; 8
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    134a:	82 17       	cp	r24, r18
    134c:	93 07       	cpc	r25, r19
    134e:	10 f4       	brcc	.+4      	; 0x1354 <Pipe_ConfigurePipe+0x50>
    1350:	75 30       	cpi	r23, 0x05	; 5
    1352:	a1 f7       	brne	.-24     	; 0x133c <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    1354:	87 2f       	mov	r24, r23
    1356:	82 95       	swap	r24
    1358:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    135a:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    135c:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    135e:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    1360:	e0 e0       	ldi	r30, 0x00	; 0
    1362:	08 c0       	rjmp	.+16     	; 0x1374 <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    1364:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    1368:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    136c:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
    1370:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    1374:	81 ff       	sbrs	r24, 1
    1376:	20 c0       	rjmp	.+64     	; 0x13b8 <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1378:	90 91 a9 00 	lds	r25, 0x00A9
    137c:	9e 7f       	andi	r25, 0xFE	; 254
    137e:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    1382:	90 91 ab 00 	lds	r25, 0x00AB
    1386:	9d 7f       	andi	r25, 0xFD	; 253
    1388:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    138c:	90 91 a9 00 	lds	r25, 0x00A9
    1390:	91 60       	ori	r25, 0x01	; 1
    1392:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    1396:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    139a:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    139e:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
    13a2:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    13a6:	80 91 a9 00 	lds	r24, 0x00A9
    13aa:	80 62       	ori	r24, 0x20	; 32
    13ac:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    13b0:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    13b4:	87 ff       	sbrs	r24, 7
    13b6:	08 c0       	rjmp	.+16     	; 0x13c8 <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    13b8:	4f 5f       	subi	r20, 0xFF	; 255
    13ba:	47 30       	cpi	r20, 0x07	; 7
    13bc:	09 f0       	breq	.+2      	; 0x13c0 <Pipe_ConfigurePipe+0xbc>
    13be:	b9 cf       	rjmp	.-142    	; 0x1332 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13c0:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	01 c0       	rjmp	.+2      	; 0x13ca <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
    13c8:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    13ca:	0f 91       	pop	r16
    13cc:	08 95       	ret

000013ce <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
    13ce:	ff 92       	push	r15
    13d0:	0f 93       	push	r16
    13d2:	1f 93       	push	r17
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
    13da:	ec 01       	movw	r28, r24
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    13dc:	ff 24       	eor	r15, r15
    13de:	0d c0       	rjmp	.+26     	; 0x13fa <Pipe_ConfigurePipeTable+0x2c>
	{
		if (!(Table[i].Address))
    13e0:	88 81       	ld	r24, Y
    13e2:	88 23       	and	r24, r24
    13e4:	41 f0       	breq	.+16     	; 0x13f6 <Pipe_ConfigurePipeTable+0x28>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
    13e6:	29 81       	ldd	r18, Y+1	; 0x01
    13e8:	3a 81       	ldd	r19, Y+2	; 0x02
    13ea:	6c 81       	ldd	r22, Y+4	; 0x04
    13ec:	4b 81       	ldd	r20, Y+3	; 0x03
    13ee:	0d 81       	ldd	r16, Y+5	; 0x05
    13f0:	89 df       	rcall	.-238    	; 0x1304 <Pipe_ConfigurePipe>
    13f2:	88 23       	and	r24, r24
    13f4:	31 f0       	breq	.+12     	; 0x1402 <Pipe_ConfigurePipeTable+0x34>
    13f6:	f3 94       	inc	r15
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    13f8:	26 96       	adiw	r28, 0x06	; 6
    13fa:	f1 16       	cp	r15, r17
    13fc:	89 f7       	brne	.-30     	; 0x13e0 <Pipe_ConfigurePipeTable+0x12>
    13fe:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}
	
	return true;
    1400:	01 c0       	rjmp	.+2      	; 0x1404 <Pipe_ConfigurePipeTable+0x36>
    1402:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
    1404:	df 91       	pop	r29
		}
	}
	
	return true;
}
    1406:	cf 91       	pop	r28
    1408:	1f 91       	pop	r17
    140a:	0f 91       	pop	r16
    140c:	ff 90       	pop	r15
    140e:	08 95       	ret

00001410 <Pipe_ClearPipes>:
    1410:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    141a:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    141e:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    1422:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1426:	90 91 a9 00 	lds	r25, 0x00A9
    142a:	9e 7f       	andi	r25, 0xFE	; 254
    142c:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1430:	8f 5f       	subi	r24, 0xFF	; 255
    1432:	87 30       	cpi	r24, 0x07	; 7
    1434:	81 f7       	brne	.-32     	; 0x1416 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    1436:	08 95       	ret

00001438 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1438:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    143c:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1440:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1442:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1446:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
    144a:	27 ff       	sbrs	r18, 7
    144c:	0c c0       	rjmp	.+24     	; 0x1466 <Pipe_IsEndpointBound+0x2e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    144e:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
    1452:	53 2f       	mov	r21, r19
    1454:	5f 70       	andi	r21, 0x0F	; 15
    1456:	30 ff       	sbrs	r19, 0
    1458:	02 c0       	rjmp	.+4      	; 0x145e <Pipe_IsEndpointBound+0x26>
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	01 c0       	rjmp	.+2      	; 0x1460 <Pipe_IsEndpointBound+0x28>
    145e:	20 e8       	ldi	r18, 0x80	; 128
    1460:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
    1462:	28 17       	cp	r18, r24
    1464:	49 f0       	breq	.+18     	; 0x1478 <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1466:	9f 5f       	subi	r25, 0xFF	; 255
    1468:	97 30       	cpi	r25, 0x07	; 7
    146a:	59 f7       	brne	.-42     	; 0x1442 <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    146c:	84 2f       	mov	r24, r20
    146e:	8f 70       	andi	r24, 0x0F	; 15
    1470:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
    1478:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
    147a:	08 95       	ret

0000147c <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    147c:	80 91 a2 00 	lds	r24, 0x00A2
    1480:	90 91 a3 00 	lds	r25, 0x00A3
    1484:	45 e6       	ldi	r20, 0x65	; 101
    1486:	01 c0       	rjmp	.+2      	; 0x148a <Pipe_WaitUntilReady+0xe>
    1488:	c9 01       	movw	r24, r18
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    148a:	20 91 aa 00 	lds	r18, 0x00AA
    148e:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1490:	20 31       	cpi	r18, 0x10	; 16
    1492:	29 f4       	brne	.+10     	; 0x149e <Pipe_WaitUntilReady+0x22>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1494:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    1498:	20 ff       	sbrs	r18, 0
    149a:	05 c0       	rjmp	.+10     	; 0x14a6 <Pipe_WaitUntilReady+0x2a>
    149c:	17 c0       	rjmp	.+46     	; 0x14cc <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    149e:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    14a2:	22 fd       	sbrc	r18, 2
    14a4:	13 c0       	rjmp	.+38     	; 0x14cc <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    14a6:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    14aa:	21 fd       	sbrc	r18, 1
    14ac:	11 c0       	rjmp	.+34     	; 0x14d0 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    14ae:	20 91 28 05 	lds	r18, 0x0528
    14b2:	21 30       	cpi	r18, 0x01	; 1
    14b4:	79 f0       	breq	.+30     	; 0x14d4 <Pipe_WaitUntilReady+0x58>
    14b6:	20 91 a2 00 	lds	r18, 0x00A2
    14ba:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    14be:	28 17       	cp	r18, r24
    14c0:	39 07       	cpc	r19, r25
    14c2:	19 f3       	breq	.-58     	; 0x148a <Pipe_WaitUntilReady+0xe>
    14c4:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    14c6:	01 f7       	brne	.-64     	; 0x1488 <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_Timeout;
    14c8:	83 e0       	ldi	r24, 0x03	; 3
    14ca:	08 95       	ret
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    14d4:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
    14d6:	08 95       	ret

000014d8 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    14d8:	75 d0       	rcall	.+234    	; 0x15c4 <USB_INT_DisableAllInterrupts>
    14da:	7c d0       	rcall	.+248    	; 0x15d4 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    14dc:	e0 ee       	ldi	r30, 0xE0	; 224
    14de:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    14e0:	80 81       	ld	r24, Z
    14e2:	81 60       	ori	r24, 0x01	; 1
    14e4:	80 83       	st	Z, r24
    14e6:	e8 ed       	ldi	r30, 0xD8	; 216
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    14ea:	80 81       	ld	r24, Z
    14ec:	8f 77       	andi	r24, 0x7F	; 127
    14ee:	80 83       	st	Z, r24
    14f0:	19 bc       	out	0x29, r1	; 41
    14f2:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    14f4:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    14f6:	8c 91       	ld	r24, X
    14f8:	8e 7f       	andi	r24, 0xFE	; 254
    14fa:	8c 93       	st	X, r24
    14fc:	80 81       	ld	r24, Z
    14fe:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1500:	80 83       	st	Z, r24
    1502:	10 92 1f 05 	sts	0x051F, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1506:	08 95       	ret

00001508 <USB_ResetInterface>:
    1508:	5d d0       	rcall	.+186    	; 0x15c4 <USB_INT_DisableAllInterrupts>
}
    150a:	64 d0       	rcall	.+200    	; 0x15d4 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    150c:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1510:	8f 77       	andi	r24, 0x7F	; 127
    1512:	80 93 d8 00 	sts	0x00D8, r24
    1516:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    151a:	80 68       	ori	r24, 0x80	; 128
    151c:	80 93 d8 00 	sts	0x00D8, r24
    1520:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1524:	8f 7d       	andi	r24, 0xDF	; 223
    1526:	80 93 d8 00 	sts	0x00D8, r24
    152a:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    152e:	8f 77       	andi	r24, 0x7F	; 127
    1530:	80 93 d7 00 	sts	0x00D7, r24
    1534:	8c e0       	ldi	r24, 0x0C	; 12
    1536:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1538:	8e e0       	ldi	r24, 0x0E	; 14
    153a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    153c:	09 b4       	in	r0, 0x29	; 41
    153e:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1540:	fd cf       	rjmp	.-6      	; 0x153c <USB_ResetInterface+0x34>
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	80 93 28 05 	sts	0x0528, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    1548:	10 92 1e 05 	sts	0x051E, r1
	USB_Host_ConfigurationNumber = 0;
    154c:	80 e4       	ldi	r24, 0x40	; 64
    154e:	80 93 27 01 	sts	0x0127, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    1552:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    1556:	80 64       	ori	r24, 0x40	; 64
    1558:	80 93 d8 00 	sts	0x00D8, r24
    155c:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1560:	81 60       	ori	r24, 0x01	; 1
    1562:	80 93 dd 00 	sts	0x00DD, r24
    1566:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    156a:	84 60       	ori	r24, 0x04	; 4
    156c:	80 93 dd 00 	sts	0x00DD, r24
    1570:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
    1574:	8f 7e       	andi	r24, 0xEF	; 239
    1576:	80 93 d7 00 	sts	0x00D7, r24
    157a:	6f 9a       	sbi	0x0d, 7	; 13
    157c:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
    157e:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    1582:	81 60       	ori	r24, 0x01	; 1
    1584:	80 93 de 00 	sts	0x00DE, r24
    1588:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    158c:	84 60       	ori	r24, 0x04	; 4
    158e:	80 93 de 00 	sts	0x00DE, r24
    1592:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1596:	8e 7f       	andi	r24, 0xFE	; 254
    1598:	80 93 e0 00 	sts	0x00E0, r24
    159c:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    15a0:	80 61       	ori	r24, 0x10	; 16
    15a2:	80 93 d8 00 	sts	0x00D8, r24
    15a6:	08 95       	ret

000015a8 <USB_Init>:
    15a8:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    15ac:	80 81       	ld	r24, Z
    15ae:	8f 7e       	andi	r24, 0xEF	; 239
    15b0:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    15b2:	e7 ed       	ldi	r30, 0xD7	; 215
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	81 60       	ori	r24, 0x01	; 1
    15ba:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	80 93 1f 05 	sts	0x051F, r24

	USB_ResetInterface();
    15c2:	a2 cf       	rjmp	.-188    	; 0x1508 <USB_ResetInterface>

000015c4 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    15c4:	e8 ed       	ldi	r30, 0xD8	; 216
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	8c 7f       	andi	r24, 0xFC	; 252
    15cc:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    15ce:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    15d2:	08 95       	ret

000015d4 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    15d4:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    15d8:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    15dc:	08 95       	ret

000015de <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    15de:	1f 92       	push	r1
    15e0:	0f 92       	push	r0
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	0f 92       	push	r0
    15e6:	0b b6       	in	r0, 0x3b	; 59
    15e8:	0f 92       	push	r0
    15ea:	11 24       	eor	r1, r1
    15ec:	2f 93       	push	r18
    15ee:	3f 93       	push	r19
    15f0:	4f 93       	push	r20
    15f2:	5f 93       	push	r21
    15f4:	6f 93       	push	r22
    15f6:	7f 93       	push	r23
    15f8:	8f 93       	push	r24
    15fa:	9f 93       	push	r25
    15fc:	af 93       	push	r26
    15fe:	bf 93       	push	r27
    1600:	ef 93       	push	r30
    1602:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1604:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    1608:	85 ff       	sbrs	r24, 5
    160a:	0a c0       	rjmp	.+20     	; 0x1620 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    160c:	80 91 a0 00 	lds	r24, 0x00A0
    1610:	85 ff       	sbrs	r24, 5
    1612:	06 c0       	rjmp	.+12     	; 0x1620 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1614:	80 91 9f 00 	lds	r24, 0x009F
    1618:	8f 7d       	andi	r24, 0xDF	; 223
    161a:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    161e:	16 d1       	rcall	.+556    	; 0x184c <USB_Event_Stub>
    1620:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    1624:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    1626:	16 c0       	rjmp	.+44     	; 0x1654 <__vector_10+0x76>
    1628:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    162c:	81 ff       	sbrs	r24, 1
    162e:	12 c0       	rjmp	.+36     	; 0x1654 <__vector_10+0x76>
    1630:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1634:	8d 7f       	andi	r24, 0xFD	; 253
    1636:	80 93 9f 00 	sts	0x009F, r24
    163a:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    163e:	8e 7f       	andi	r24, 0xFE	; 254
    1640:	80 93 9f 00 	sts	0x009F, r24
    1644:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1648:	8d 7f       	andi	r24, 0xFD	; 253
    164a:	80 93 a0 00 	sts	0x00A0, r24
    164e:	0e 94 3e 02 	call	0x47c	; 0x47c <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    1652:	5a df       	rcall	.-332    	; 0x1508 <USB_ResetInterface>

		USB_ResetInterface();
    1654:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1658:	81 ff       	sbrs	r24, 1
    165a:	17 c0       	rjmp	.+46     	; 0x168a <__vector_10+0xac>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    165c:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    1660:	81 ff       	sbrs	r24, 1
    1662:	13 c0       	rjmp	.+38     	; 0x168a <__vector_10+0xac>
    1664:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1668:	8d 7f       	andi	r24, 0xFD	; 253
    166a:	80 93 df 00 	sts	0x00DF, r24
    166e:	77 98       	cbi	0x0e, 7	; 14
    1670:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1674:	81 60       	ori	r24, 0x01	; 1
    1676:	80 93 dd 00 	sts	0x00DD, r24
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	0e 94 9a 02 	call	0x534	; 0x534 <EVENT_USB_Host_HostError>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1680:	0e 94 3e 02 	call	0x47c	; 0x47c <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	80 93 28 05 	sts	0x0528, r24

		USB_HostState = HOST_STATE_Unattached;
    168a:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    168e:	80 ff       	sbrs	r24, 0
    1690:	18 c0       	rjmp	.+48     	; 0x16c2 <__vector_10+0xe4>
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1692:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    1696:	80 ff       	sbrs	r24, 0
    1698:	14 c0       	rjmp	.+40     	; 0x16c2 <__vector_10+0xe4>
    169a:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    169e:	8e 7f       	andi	r24, 0xFE	; 254
    16a0:	80 93 df 00 	sts	0x00DF, r24
    16a4:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    16a8:	8e 7f       	andi	r24, 0xFE	; 254
    16aa:	80 93 de 00 	sts	0x00DE, r24
    16ae:	0e 94 38 02 	call	0x470	; 0x470 <EVENT_USB_Host_DeviceAttached>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    16b2:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    16b6:	82 60       	ori	r24, 0x02	; 2
    16b8:	80 93 a0 00 	sts	0x00A0, r24
    16bc:	82 e0       	ldi	r24, 0x02	; 2
    16be:	80 93 28 05 	sts	0x0528, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    16c2:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    16c6:	82 ff       	sbrs	r24, 2
    16c8:	10 c0       	rjmp	.+32     	; 0x16ea <__vector_10+0x10c>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    16ca:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    16ce:	82 ff       	sbrs	r24, 2
    16d0:	0c c0       	rjmp	.+24     	; 0x16ea <__vector_10+0x10c>
    16d2:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    16d6:	8b 7f       	andi	r24, 0xFB	; 251
    16d8:	80 93 df 00 	sts	0x00DF, r24
    16dc:	82 e0       	ldi	r24, 0x02	; 2
    16de:	60 e0       	ldi	r22, 0x00	; 0
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    16e0:	0e 94 ba 02 	call	0x574	; 0x574 <EVENT_USB_Host_DeviceEnumerationFailed>
    16e4:	0e 94 3e 02 	call	0x47c	; 0x47c <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    16e8:	0f df       	rcall	.-482    	; 0x1508 <USB_ResetInterface>
    16ea:	ff 91       	pop	r31

		USB_ResetInterface();
    16ec:	ef 91       	pop	r30
    16ee:	bf 91       	pop	r27
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    16f0:	af 91       	pop	r26
    16f2:	9f 91       	pop	r25
    16f4:	8f 91       	pop	r24
    16f6:	7f 91       	pop	r23
    16f8:	6f 91       	pop	r22
    16fa:	5f 91       	pop	r21
    16fc:	4f 91       	pop	r20
    16fe:	3f 91       	pop	r19
    1700:	2f 91       	pop	r18
    1702:	0f 90       	pop	r0
    1704:	0b be       	out	0x3b, r0	; 59
    1706:	0f 90       	pop	r0
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	0f 90       	pop	r0
    170c:	1f 90       	pop	r1
    170e:	18 95       	reti

00001710 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1710:	cf 92       	push	r12
    1712:	df 92       	push	r13
    1714:	ef 92       	push	r14
    1716:	ff 92       	push	r15
    1718:	0f 93       	push	r16
    171a:	1f 93       	push	r17
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	29 97       	sbiw	r28, 0x09	; 9
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	de bf       	out	0x3e, r29	; 62
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	cd bf       	out	0x3d, r28	; 61
    1730:	6b 01       	movw	r12, r22
    1732:	8a 01       	movw	r16, r20
    1734:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1736:	90 e8       	ldi	r25, 0x80	; 128
    1738:	90 93 20 05 	sts	0x0520, r25
    173c:	96 e0       	ldi	r25, 0x06	; 6
    173e:	90 93 21 05 	sts	0x0521, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1748:	90 93 23 05 	sts	0x0523, r25
    174c:	80 93 22 05 	sts	0x0522, r24
    1750:	10 92 25 05 	sts	0x0525, r1
    1754:	10 92 24 05 	sts	0x0524, r1
    1758:	89 e0       	ldi	r24, 0x09	; 9
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	90 93 27 05 	sts	0x0527, r25
    1760:	80 93 26 05 	sts	0x0526, r24
    1764:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1768:	ce 01       	movw	r24, r28
    176a:	01 96       	adiw	r24, 0x01	; 1
    176c:	98 d0       	rcall	.+304    	; 0x189e <USB_Host_SendControlRequest>
    176e:	88 23       	and	r24, r24
    1770:	b9 f4       	brne	.+46     	; 0x17a0 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1774:	9c 81       	ldd	r25, Y+4	; 0x04
    1776:	f6 01       	movw	r30, r12
    1778:	91 83       	std	Z+1, r25	; 0x01
    177a:	80 83       	st	Z, r24
    177c:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
    177e:	f9 06       	cpc	r15, r25
    1780:	70 f0       	brcs	.+28     	; 0x179e <USB_Host_GetDeviceConfigDescriptor+0x8e>
    1782:	90 93 27 05 	sts	0x0527, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1786:	80 93 26 05 	sts	0x0526, r24
    178a:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    178c:	88 d0       	rcall	.+272    	; 0x189e <USB_Host_SendControlRequest>
    178e:	88 23       	and	r24, r24
    1790:	39 f4       	brne	.+14     	; 0x17a0 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1792:	f8 01       	movw	r30, r16
    1794:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1796:	92 30       	cpi	r25, 0x02	; 2
    1798:	19 f0       	breq	.+6      	; 0x17a0 <USB_Host_GetDeviceConfigDescriptor+0x90>
    179a:	86 e0       	ldi	r24, 0x06	; 6
    179c:	01 c0       	rjmp	.+2      	; 0x17a0 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    179e:	85 e0       	ldi	r24, 0x05	; 5
    17a0:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    17a2:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	ff 90       	pop	r15
    17b6:	ef 90       	pop	r14
    17b8:	df 90       	pop	r13
    17ba:	cf 90       	pop	r12
    17bc:	08 95       	ret

000017be <USB_GetNextDescriptorComp>:
    17be:	af 92       	push	r10
    17c0:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    17c2:	cf 92       	push	r12
    17c4:	df 92       	push	r13
    17c6:	ef 92       	push	r14
    17c8:	ff 92       	push	r15
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	7c 01       	movw	r14, r24
    17d4:	8b 01       	movw	r16, r22
    17d6:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    17d8:	28 c0       	rjmp	.+80     	; 0x182a <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    17da:	f8 01       	movw	r30, r16
    17dc:	c0 80       	ld	r12, Z
    17de:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    17e0:	f6 01       	movw	r30, r12
    17e2:	80 81       	ld	r24, Z
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	9e 01       	movw	r18, r28
    17e8:	8c 17       	cp	r24, r28
    17ea:	9d 07       	cpc	r25, r29
    17ec:	08 f4       	brcc	.+2      	; 0x17f0 <USB_GetNextDescriptorComp+0x32>
    17ee:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    17f0:	c6 01       	movw	r24, r12
    17f2:	82 0f       	add	r24, r18
    17f4:	93 1f       	adc	r25, r19
    17f6:	f8 01       	movw	r30, r16
    17f8:	91 83       	std	Z+1, r25	; 0x01
    17fa:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
    17fc:	f7 01       	movw	r30, r14
    17fe:	80 81       	ld	r24, Z
    1800:	91 81       	ldd	r25, Z+1	; 0x01
    1802:	82 1b       	sub	r24, r18
    1804:	93 0b       	sbc	r25, r19
    1806:	91 83       	std	Z+1, r25	; 0x01
    1808:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    180a:	f8 01       	movw	r30, r16
    180c:	80 81       	ld	r24, Z
    180e:	91 81       	ldd	r25, Z+1	; 0x01
    1810:	f5 01       	movw	r30, r10
    1812:	09 95       	icall
    1814:	82 30       	cpi	r24, 0x02	; 2
    1816:	49 f0       	breq	.+18     	; 0x182a <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1818:	81 30       	cpi	r24, 0x01	; 1
    181a:	69 f4       	brne	.+26     	; 0x1836 <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
    181c:	f8 01       	movw	r30, r16
    181e:	d1 82       	std	Z+1, r13	; 0x01
    1820:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
    1822:	f7 01       	movw	r30, r14
    1824:	d1 83       	std	Z+1, r29	; 0x01
    1826:	c0 83       	st	Z, r28
    1828:	06 c0       	rjmp	.+12     	; 0x1836 <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    182a:	f7 01       	movw	r30, r14
    182c:	c0 81       	ld	r28, Z
    182e:	d1 81       	ldd	r29, Z+1	; 0x01
    1830:	20 97       	sbiw	r28, 0x00	; 0
    1832:	99 f6       	brne	.-90     	; 0x17da <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1834:	82 e0       	ldi	r24, 0x02	; 2
}
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	1f 91       	pop	r17
    183c:	0f 91       	pop	r16
    183e:	ff 90       	pop	r15
    1840:	ef 90       	pop	r14
    1842:	df 90       	pop	r13
    1844:	cf 90       	pop	r12
    1846:	bf 90       	pop	r11
    1848:	af 90       	pop	r10
    184a:	08 95       	ret

0000184c <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    184c:	08 95       	ret

0000184e <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    184e:	1f 93       	push	r17
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1856:	c9 ee       	ldi	r28, 0xE9	; 233
    1858:	d3 e0       	ldi	r29, 0x03	; 3
    185a:	06 c0       	rjmp	.+12     	; 0x1868 <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	7d db       	rcall	.-2310   	; 0xf5a <USB_Host_WaitMS>
    1860:	88 23       	and	r24, r24
    1862:	c9 f4       	brne	.+50     	; 0x1896 <USB_Host_WaitForIOS+0x48>
    1864:	21 97       	sbiw	r28, 0x01	; 1
    1866:	b1 f0       	breq	.+44     	; 0x1894 <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1868:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    186a:	29 f4       	brne	.+10     	; 0x1876 <USB_Host_WaitForIOS+0x28>
    186c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1870:	83 ff       	sbrs	r24, 3
    1872:	f4 cf       	rjmp	.-24     	; 0x185c <USB_Host_WaitForIOS+0xe>
    1874:	0d c0       	rjmp	.+26     	; 0x1890 <USB_Host_WaitForIOS+0x42>
    1876:	11 30       	cpi	r17, 0x01	; 1
    1878:	29 f4       	brne	.+10     	; 0x1884 <USB_Host_WaitForIOS+0x36>
    187a:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    187e:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1880:	ed cf       	rjmp	.-38     	; 0x185c <USB_Host_WaitForIOS+0xe>
    1882:	06 c0       	rjmp	.+12     	; 0x1890 <USB_Host_WaitForIOS+0x42>
    1884:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1886:	51 f7       	brne	.-44     	; 0x185c <USB_Host_WaitForIOS+0xe>
    1888:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    188c:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    188e:	e6 cf       	rjmp	.-52     	; 0x185c <USB_Host_WaitForIOS+0xe>
    1890:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1892:	01 c0       	rjmp	.+2      	; 0x1896 <USB_Host_WaitForIOS+0x48>
    1894:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1896:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
    1898:	cf 91       	pop	r28
    189a:	1f 91       	pop	r17
    189c:	08 95       	ret

0000189e <USB_Host_SendControlRequest>:
    189e:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    18a0:	ff 92       	push	r15
    18a2:	0f 93       	push	r16
    18a4:	1f 93       	push	r17
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    18ac:	e0 90 9e 00 	lds	r14, 0x009E
    18b0:	ff 24       	eor	r15, r15
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	e8 22       	and	r14, r24
    18b6:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    18b8:	00 91 26 05 	lds	r16, 0x0526
    18bc:	10 91 27 05 	lds	r17, 0x0527
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    18c0:	80 91 9e 00 	lds	r24, 0x009E
    18c4:	81 60       	ori	r24, 0x01	; 1
    18c6:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	46 db       	rcall	.-2420   	; 0xf5a <USB_Host_WaitMS>
    18ce:	88 23       	and	r24, r24
    18d0:	09 f0       	breq	.+2      	; 0x18d4 <USB_Host_SendControlRequest+0x36>
    18d2:	ca c0       	rjmp	.+404    	; 0x1a68 <USB_Host_SendControlRequest+0x1ca>
    18d4:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    18d8:	8f 7c       	andi	r24, 0xCF	; 207
    18da:	80 93 aa 00 	sts	0x00AA, r24
    18de:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    18e2:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    18e6:	8f 7e       	andi	r24, 0xEF	; 239
    18e8:	80 93 a6 00 	sts	0x00A6, r24
    18ec:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    18f0:	8f 7b       	andi	r24, 0xBF	; 191
    18f2:	80 93 a9 00 	sts	0x00A9, r24
    18f6:	88 e0       	ldi	r24, 0x08	; 8
    18f8:	e0 e2       	ldi	r30, 0x20	; 32
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    18fa:	f5 e0       	ldi	r31, 0x05	; 5
    18fc:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    18fe:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1902:	81 50       	subi	r24, 0x01	; 1
    1904:	d9 f7       	brne	.-10     	; 0x18fc <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1906:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    190a:	87 77       	andi	r24, 0x77	; 119
    190c:	80 93 a6 00 	sts	0x00A6, r24
    1910:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1912:	9d df       	rcall	.-198    	; 0x184e <USB_Host_WaitForIOS>
    1914:	88 23       	and	r24, r24
    1916:	09 f0       	breq	.+2      	; 0x191a <USB_Host_SendControlRequest+0x7c>
    1918:	a7 c0       	rjmp	.+334    	; 0x1a68 <USB_Host_SendControlRequest+0x1ca>
    191a:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    191e:	80 64       	ori	r24, 0x40	; 64
    1920:	80 93 a9 00 	sts	0x00A9, r24
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	19 db       	rcall	.-2510   	; 0xf5a <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1928:	88 23       	and	r24, r24
    192a:	09 f0       	breq	.+2      	; 0x192e <USB_Host_SendControlRequest+0x90>
    192c:	9d c0       	rjmp	.+314    	; 0x1a68 <USB_Host_SendControlRequest+0x1ca>
    192e:	80 91 20 05 	lds	r24, 0x0520
    1932:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1934:	4f c0       	rjmp	.+158    	; 0x19d4 <USB_Host_SendControlRequest+0x136>
    1936:	80 91 aa 00 	lds	r24, 0x00AA
    193a:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    193c:	80 61       	ori	r24, 0x10	; 16
    193e:	80 93 aa 00 	sts	0x00AA, r24
    1942:	20 97       	sbiw	r28, 0x00	; 0
    1944:	61 f5       	brne	.+88     	; 0x199e <USB_Host_SendControlRequest+0x100>
    1946:	2e c0       	rjmp	.+92     	; 0x19a4 <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1948:	80 91 a9 00 	lds	r24, 0x00A9
    194c:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    194e:	80 93 a9 00 	sts	0x00A9, r24
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	7c df       	rcall	.-264    	; 0x184e <USB_Host_WaitForIOS>
    1956:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1958:	09 f0       	breq	.+2      	; 0x195c <USB_Host_SendControlRequest+0xbe>
    195a:	86 c0       	rjmp	.+268    	; 0x1a68 <USB_Host_SendControlRequest+0x1ca>
    195c:	80 91 f6 00 	lds	r24, 0x00F6
    1960:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	41 f4       	brne	.+16     	; 0x1978 <USB_Host_SendControlRequest+0xda>
    1968:	00 e0       	ldi	r16, 0x00	; 0
    196a:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    196c:	05 c0       	rjmp	.+10     	; 0x1978 <USB_Host_SendControlRequest+0xda>
    196e:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
    1972:	89 93       	st	Y+, r24
    1974:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1976:	10 40       	sbci	r17, 0x00	; 0
    1978:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
    197c:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	19 f0       	breq	.+6      	; 0x198a <USB_Host_SendControlRequest+0xec>
    1984:	01 15       	cp	r16, r1
    1986:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1988:	91 f7       	brne	.-28     	; 0x196e <USB_Host_SendControlRequest+0xd0>
    198a:	80 91 a9 00 	lds	r24, 0x00A9
    198e:	80 64       	ori	r24, 0x40	; 64
    1990:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1994:	80 91 a6 00 	lds	r24, 0x00A6
    1998:	8e 77       	andi	r24, 0x7E	; 126
    199a:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    199e:	01 15       	cp	r16, r1
    19a0:	11 05       	cpc	r17, r1
    19a2:	91 f6       	brne	.-92     	; 0x1948 <USB_Host_SendControlRequest+0xaa>
    19a4:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    19a8:	8f 7c       	andi	r24, 0xCF	; 207
    19aa:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    19ac:	80 93 aa 00 	sts	0x00AA, r24
    19b0:	80 91 a9 00 	lds	r24, 0x00A9
    19b4:	8f 7b       	andi	r24, 0xBF	; 191
    19b6:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    19ba:	82 e0       	ldi	r24, 0x02	; 2
    19bc:	48 df       	rcall	.-368    	; 0x184e <USB_Host_WaitForIOS>
    19be:	88 23       	and	r24, r24
    19c0:	09 f0       	breq	.+2      	; 0x19c4 <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    19c2:	52 c0       	rjmp	.+164    	; 0x1a68 <USB_Host_SendControlRequest+0x1ca>
    19c4:	80 91 a6 00 	lds	r24, 0x00A6
    19c8:	8b 77       	andi	r24, 0x7B	; 123
    19ca:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    19ce:	82 e0       	ldi	r24, 0x02	; 2
    19d0:	3e df       	rcall	.-388    	; 0x184e <USB_Host_WaitForIOS>
    19d2:	4a c0       	rjmp	.+148    	; 0x1a68 <USB_Host_SendControlRequest+0x1ca>
    19d4:	20 97       	sbiw	r28, 0x00	; 0
    19d6:	a1 f1       	breq	.+104    	; 0x1a40 <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    19d8:	80 91 aa 00 	lds	r24, 0x00AA
    19dc:	8f 7c       	andi	r24, 0xCF	; 207
    19de:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    19e0:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    19e4:	80 91 a9 00 	lds	r24, 0x00A9
    19e8:	8f 7b       	andi	r24, 0xBF	; 191
    19ea:	80 93 a9 00 	sts	0x00A9, r24
    19ee:	1c c0       	rjmp	.+56     	; 0x1a28 <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    19f0:	2e df       	rcall	.-420    	; 0x184e <USB_Host_WaitForIOS>
    19f2:	88 23       	and	r24, r24
    19f4:	c9 f5       	brne	.+114    	; 0x1a68 <USB_Host_SendControlRequest+0x1ca>
    19f6:	fe 01       	movw	r30, r28
    19f8:	07 c0       	rjmp	.+14     	; 0x1a08 <USB_Host_SendControlRequest+0x16a>
    19fa:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    19fc:	ef 01       	movw	r28, r30
    19fe:	80 93 af 00 	sts	0x00AF, r24
    1a02:	01 50       	subi	r16, 0x01	; 1
    1a04:	10 40       	sbci	r17, 0x00	; 0
    1a06:	59 f0       	breq	.+22     	; 0x1a1e <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1a08:	ef 01       	movw	r28, r30
    1a0a:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1a0e:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    1a12:	80 91 27 01 	lds	r24, 0x0127
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1a16:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1a18:	28 17       	cp	r18, r24
    1a1a:	39 07       	cpc	r19, r25
    1a1c:	70 f3       	brcs	.-36     	; 0x19fa <USB_Host_SendControlRequest+0x15c>
    1a1e:	80 91 a6 00 	lds	r24, 0x00A6
    1a22:	8b 77       	andi	r24, 0x7B	; 123
    1a24:	80 93 a6 00 	sts	0x00A6, r24
    1a28:	82 e0       	ldi	r24, 0x02	; 2
    1a2a:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1a2c:	11 05       	cpc	r17, r1
    1a2e:	01 f7       	brne	.-64     	; 0x19f0 <USB_Host_SendControlRequest+0x152>
    1a30:	0e df       	rcall	.-484    	; 0x184e <USB_Host_WaitForIOS>
    1a32:	88 23       	and	r24, r24
    1a34:	c9 f4       	brne	.+50     	; 0x1a68 <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a36:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1a3a:	80 64       	ori	r24, 0x40	; 64
    1a3c:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a40:	80 91 aa 00 	lds	r24, 0x00AA
    1a44:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1a46:	80 61       	ori	r24, 0x10	; 16
    1a48:	80 93 aa 00 	sts	0x00AA, r24
    1a4c:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1a50:	8f 7b       	andi	r24, 0xBF	; 191
    1a52:	80 93 a9 00 	sts	0x00A9, r24
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	fa de       	rcall	.-524    	; 0x184e <USB_Host_WaitForIOS>
    1a5a:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1a5c:	29 f4       	brne	.+10     	; 0x1a68 <USB_Host_SendControlRequest+0x1ca>
    1a5e:	90 91 a6 00 	lds	r25, 0x00A6
    1a62:	9e 77       	andi	r25, 0x7E	; 126
    1a64:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1a68:	90 91 a9 00 	lds	r25, 0x00A9
    1a6c:	90 64       	ori	r25, 0x40	; 64
    1a6e:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1a72:	e1 14       	cp	r14, r1
    1a74:	f1 04       	cpc	r15, r1
    1a76:	29 f4       	brne	.+10     	; 0x1a82 <USB_Host_SendControlRequest+0x1e4>
    1a78:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1a7c:	9e 7f       	andi	r25, 0xFE	; 254
    1a7e:	90 93 9e 00 	sts	0x009E, r25
    1a82:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1a84:	90 93 a8 00 	sts	0x00A8, r25
    1a88:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	1f 91       	pop	r17
    1a92:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1a94:	ff 90       	pop	r15
    1a96:	ef 90       	pop	r14
    1a98:	08 95       	ret

00001a9a <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    1a9a:	cf 93       	push	r28
    1a9c:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1a9e:	10 92 20 05 	sts	0x0520, r1
    1aa2:	89 e0       	ldi	r24, 0x09	; 9
    1aa4:	80 93 21 05 	sts	0x0521, r24
    1aa8:	c0 93 22 05 	sts	0x0522, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1aac:	10 92 23 05 	sts	0x0523, r1
    1ab0:	10 92 25 05 	sts	0x0525, r1
    1ab4:	10 92 24 05 	sts	0x0524, r1
    1ab8:	10 92 27 05 	sts	0x0527, r1
    1abc:	10 92 26 05 	sts	0x0526, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1ac0:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	ea de       	rcall	.-556    	; 0x189e <USB_Host_SendControlRequest>
    1aca:	88 23       	and	r24, r24
    1acc:	49 f4       	brne	.+18     	; 0x1ae0 <USB_Host_SetDeviceConfiguration+0x46>
    1ace:	c0 93 1e 05 	sts	0x051E, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1ad2:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1ad4:	11 f0       	breq	.+4      	; 0x1ada <USB_Host_SetDeviceConfiguration+0x40>
    1ad6:	9b e0       	ldi	r25, 0x0B	; 11
    1ad8:	01 c0       	rjmp	.+2      	; 0x1adc <USB_Host_SetDeviceConfiguration+0x42>
    1ada:	9a e0       	ldi	r25, 0x0A	; 10
    1adc:	90 93 28 05 	sts	0x0528, r25
    1ae0:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1ae2:	08 95       	ret

00001ae4 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1ae4:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1ae6:	c0 91 a7 00 	lds	r28, 0x00A7
    1aea:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1aec:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1af0:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1af4:	87 da       	rcall	.-2802   	; 0x1004 <USB_Host_ProcessNextHostState>
    1af6:	c0 93 a7 00 	sts	0x00A7, r28
    1afa:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1afc:	08 95       	ret

00001afe <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    1afe:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1b00:	81 81       	ldd	r24, Z+1	; 0x01
    1b02:	84 30       	cpi	r24, 0x04	; 4
    1b04:	19 f4       	brne	.+6      	; 0x1b0c <DCOMP_HID_Host_NextHIDInterface+0xe>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    1b06:	85 81       	ldd	r24, Z+5	; 0x05
    1b08:	83 30       	cpi	r24, 0x03	; 3
    1b0a:	11 f0       	breq	.+4      	; 0x1b10 <DCOMP_HID_Host_NextHIDInterface+0x12>
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1b0c:	82 e0       	ldi	r24, 0x02	; 2
    1b0e:	08 95       	ret
	if (Header->Type == DTYPE_Interface)
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
		  return DESCRIPTOR_SEARCH_Found;
    1b10:	80 e0       	ldi	r24, 0x00	; 0
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1b12:	08 95       	ret

00001b14 <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    1b14:	fc 01       	movw	r30, r24
    1b16:	81 81       	ldd	r24, Z+1	; 0x01
    1b18:	81 32       	cpi	r24, 0x21	; 33
    1b1a:	21 f0       	breq	.+8      	; 0x1b24 <DCOMP_HID_Host_NextHIDDescriptor+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    1b1c:	84 30       	cpi	r24, 0x04	; 4
    1b1e:	21 f4       	brne	.+8      	; 0x1b28 <DCOMP_HID_Host_NextHIDDescriptor+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	08 95       	ret
static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
    1b28:	82 e0       	ldi	r24, 0x02	; 2
}
    1b2a:	08 95       	ret

00001b2c <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    1b2c:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1b2e:	81 81       	ldd	r24, Z+1	; 0x01
    1b30:	85 30       	cpi	r24, 0x05	; 5
    1b32:	29 f4       	brne	.+10     	; 0x1b3e <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1b34:	82 81       	ldd	r24, Z+2	; 0x02
    1b36:	80 dc       	rcall	.-1792   	; 0x1438 <Pipe_IsEndpointBound>
    1b38:	88 23       	and	r24, r24
    1b3a:	19 f4       	brne	.+6      	; 0x1b42 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x16>
    1b3c:	04 c0       	rjmp	.+8      	; 0x1b46 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1a>
    1b3e:	84 30       	cpi	r24, 0x04	; 4
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1b40:	21 f0       	breq	.+8      	; 0x1b4a <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1e>
    1b42:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1b44:	08 95       	ret
    1b46:	80 e0       	ldi	r24, 0x00	; 0
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
    1b48:	08 95       	ret
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    1b4c:	08 95       	ret

00001b4e <HID_Host_ConfigurePipes>:
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1b4e:	8f 92       	push	r8
#include "HIDClassHost.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    1b50:	9f 92       	push	r9
    1b52:	af 92       	push	r10
    1b54:	bf 92       	push	r11
    1b56:	cf 92       	push	r12
    1b58:	df 92       	push	r13
    1b5a:	ef 92       	push	r14
    1b5c:	ff 92       	push	r15
    1b5e:	0f 93       	push	r16
    1b60:	1f 93       	push	r17
    1b62:	cf 93       	push	r28
    1b64:	df 93       	push	r29
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <HID_Host_ConfigurePipes+0x1a>
    1b68:	00 d0       	rcall	.+0      	; 0x1b6a <HID_Host_ConfigurePipes+0x1c>
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	8c 01       	movw	r16, r24
    1b70:	7a 83       	std	Y+2, r23	; 0x02
    1b72:	69 83       	std	Y+1, r22	; 0x01
    1b74:	5c 83       	std	Y+4, r21	; 0x04
    1b76:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1b78:	0f 96       	adiw	r24, 0x0f	; 15
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	88 e0       	ldi	r24, 0x08	; 8
    1b7e:	df 01       	movw	r26, r30
    1b80:	1d 92       	st	X+, r1
    1b82:	8a 95       	dec	r24
    1b84:	e9 f7       	brne	.-6      	; 0x1b80 <HID_Host_ConfigurePipes+0x32>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1b86:	eb 81       	ldd	r30, Y+3	; 0x03
    1b88:	fc 81       	ldd	r31, Y+4	; 0x04
    1b8a:	81 81       	ldd	r24, Z+1	; 0x01
    1b8c:	82 30       	cpi	r24, 0x02	; 2
    1b8e:	09 f0       	breq	.+2      	; 0x1b92 <HID_Host_ConfigurePipes+0x44>
    1b90:	97 c0       	rjmp	.+302    	; 0x1cc0 <HID_Host_ConfigurePipes+0x172>
    1b92:	88 24       	eor	r8, r8
    1b94:	99 24       	eor	r9, r9
    1b96:	aa 24       	eor	r10, r10
    1b98:	bb 24       	eor	r11, r11
    1b9a:	ee 24       	eor	r14, r14
    1b9c:	ff 24       	eor	r15, r15
    1b9e:	cc 24       	eor	r12, r12
    1ba0:	dd 24       	eor	r13, r13
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1ba2:	a1 14       	cp	r10, r1
    1ba4:	b1 04       	cpc	r11, r1
    1ba6:	51 f0       	breq	.+20     	; 0x1bbc <HID_Host_ConfigurePipes+0x6e>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1ba8:	ce 01       	movw	r24, r28
    1baa:	01 96       	adiw	r24, 0x01	; 1
    1bac:	be 01       	movw	r22, r28
    1bae:	6d 5f       	subi	r22, 0xFD	; 253
    1bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb2:	46 e9       	ldi	r20, 0x96	; 150
    1bb4:	5d e0       	ldi	r21, 0x0D	; 13
    1bb6:	03 de       	rcall	.-1018   	; 0x17be <USB_GetNextDescriptorComp>
    1bb8:	88 23       	and	r24, r24
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1bba:	51 f1       	breq	.+84     	; 0x1c10 <HID_Host_ConfigurePipes+0xc2>
    1bbc:	c1 14       	cp	r12, r1
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint)
    1bbe:	d1 04       	cpc	r13, r1
    1bc0:	b9 f5       	brne	.+110    	; 0x1c30 <HID_Host_ConfigurePipes+0xe2>
    1bc2:	ce 01       	movw	r24, r28
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1bc4:	01 96       	adiw	r24, 0x01	; 1
    1bc6:	be 01       	movw	r22, r28
    1bc8:	6d 5f       	subi	r22, 0xFD	; 253
    1bca:	7f 4f       	sbci	r23, 0xFF	; 255
    1bcc:	4f e7       	ldi	r20, 0x7F	; 127
    1bce:	5d e0       	ldi	r21, 0x0D	; 13
    1bd0:	f6 dd       	rcall	.-1044   	; 0x17be <USB_GetNextDescriptorComp>
    1bd2:	88 23       	and	r24, r24
    1bd4:	09 f0       	breq	.+2      	; 0x1bd8 <HID_Host_ConfigurePipes+0x8a>
    1bd6:	76 c0       	rjmp	.+236    	; 0x1cc4 <HID_Host_ConfigurePipes+0x176>
    1bd8:	ab 80       	ldd	r10, Y+3	; 0x03
    1bda:	bc 80       	ldd	r11, Y+4	; 0x04
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1bdc:	f8 01       	movw	r30, r16
    1bde:	84 85       	ldd	r24, Z+12	; 0x0c
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1be0:	88 23       	and	r24, r24
    1be2:	31 f0       	breq	.+12     	; 0x1bf0 <HID_Host_ConfigurePipes+0xa2>
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    1be4:	d5 01       	movw	r26, r10
    1be6:	17 96       	adiw	r26, 0x07	; 7
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1be8:	9c 91       	ld	r25, X
    1bea:	17 97       	sbiw	r26, 0x07	; 7
    1bec:	98 17       	cp	r25, r24
    1bee:	49 f7       	brne	.-46     	; 0x1bc2 <HID_Host_ConfigurePipes+0x74>
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	01 96       	adiw	r24, 0x01	; 1
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1bf4:	be 01       	movw	r22, r28
    1bf6:	6d 5f       	subi	r22, 0xFD	; 253
    1bf8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfa:	4a e8       	ldi	r20, 0x8A	; 138
    1bfc:	5d e0       	ldi	r21, 0x0D	; 13
    1bfe:	df dd       	rcall	.-1090   	; 0x17be <USB_GetNextDescriptorComp>
    1c00:	88 23       	and	r24, r24
    1c02:	09 f0       	breq	.+2      	; 0x1c06 <HID_Host_ConfigurePipes+0xb8>
    1c04:	5f c0       	rjmp	.+190    	; 0x1cc4 <HID_Host_ConfigurePipes+0x176>
    1c06:	8b 80       	ldd	r8, Y+3	; 0x03
    1c08:	9c 80       	ldd	r9, Y+4	; 0x04
    1c0a:	ee 24       	eor	r14, r14
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    1c0c:	ff 24       	eor	r15, r15
    1c0e:	c9 cf       	rjmp	.-110    	; 0x1ba2 <HID_Host_ConfigurePipes+0x54>

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    1c10:	eb 81       	ldd	r30, Y+3	; 0x03
    1c12:	fc 81       	ldd	r31, Y+4	; 0x04
    1c14:	82 81       	ldd	r24, Z+2	; 0x02

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1c16:	87 ff       	sbrs	r24, 7
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <HID_Host_ConfigurePipes+0xd0>

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1c1a:	6f 01       	movw	r12, r30
    1c1c:	01 c0       	rjmp	.+2      	; 0x1c20 <HID_Host_ConfigurePipes+0xd2>
    1c1e:	7f 01       	movw	r14, r30
		  DataINEndpoint  = EndpointData;
    1c20:	c1 14       	cp	r12, r1
    1c22:	d1 04       	cpc	r13, r1
		else
		  DataOUTEndpoint = EndpointData;
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <HID_Host_ConfigurePipes+0xda>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1c26:	bd cf       	rjmp	.-134    	; 0x1ba2 <HID_Host_ConfigurePipes+0x54>
    1c28:	e1 14       	cp	r14, r1
    1c2a:	f1 04       	cpc	r15, r1
    1c2c:	09 f4       	brne	.+2      	; 0x1c30 <HID_Host_ConfigurePipes+0xe2>
    1c2e:	b9 cf       	rjmp	.-142    	; 0x1ba2 <HID_Host_ConfigurePipes+0x54>
    1c30:	f6 01       	movw	r30, r12
    1c32:	84 81       	ldd	r24, Z+4	; 0x04
    1c34:	95 81       	ldd	r25, Z+5	; 0x05
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	HIDInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    1c36:	d8 01       	movw	r26, r16
    1c38:	12 96       	adiw	r26, 0x02	; 2
    1c3a:	9c 93       	st	X, r25
    1c3c:	8e 93       	st	-X, r24
    1c3e:	11 97       	sbiw	r26, 0x01	; 1
    1c40:	82 81       	ldd	r24, Z+2	; 0x02
    1c42:	13 96       	adiw	r26, 0x03	; 3
    1c44:	8c 93       	st	X, r24
	HIDInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1c46:	13 97       	sbiw	r26, 0x03	; 3
    1c48:	83 e0       	ldi	r24, 0x03	; 3
    1c4a:	c8 2e       	mov	r12, r24
    1c4c:	14 96       	adiw	r26, 0x04	; 4
	HIDInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_INTERRUPT;
    1c4e:	cc 92       	st	X, r12
    1c50:	c8 01       	movw	r24, r16
    1c52:	61 e0       	ldi	r22, 0x01	; 1
    1c54:	bc db       	rcall	.-2184   	; 0x13ce <Pipe_ConfigurePipeTable>

	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
    1c56:	88 23       	and	r24, r24
    1c58:	b9 f1       	breq	.+110    	; 0x1cc8 <HID_Host_ConfigurePipes+0x17a>
    1c5a:	e1 14       	cp	r14, r1
    1c5c:	f1 04       	cpc	r15, r1
    1c5e:	a1 f0       	breq	.+40     	; 0x1c88 <HID_Host_ConfigurePipes+0x13a>
    1c60:	f7 01       	movw	r30, r14
	  return false;

	if (DataOUTEndpoint)
    1c62:	84 81       	ldd	r24, Z+4	; 0x04
    1c64:	95 81       	ldd	r25, Z+5	; 0x05
    1c66:	d8 01       	movw	r26, r16
	{
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1c68:	18 96       	adiw	r26, 0x08	; 8
    1c6a:	9c 93       	st	X, r25
    1c6c:	8e 93       	st	-X, r24
    1c6e:	17 97       	sbiw	r26, 0x07	; 7
    1c70:	82 81       	ldd	r24, Z+2	; 0x02
    1c72:	19 96       	adiw	r26, 0x09	; 9
    1c74:	8c 93       	st	X, r24
    1c76:	19 97       	sbiw	r26, 0x09	; 9
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1c78:	1a 96       	adiw	r26, 0x0a	; 10
    1c7a:	cc 92       	st	X, r12
    1c7c:	c8 01       	movw	r24, r16
    1c7e:	06 96       	adiw	r24, 0x06	; 6
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;
    1c80:	61 e0       	ldi	r22, 0x01	; 1
    1c82:	a5 db       	rcall	.-2230   	; 0x13ce <Pipe_ConfigurePipeTable>

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
    1c84:	88 23       	and	r24, r24
    1c86:	01 f1       	breq	.+64     	; 0x1cc8 <HID_Host_ConfigurePipes+0x17a>
    1c88:	f5 01       	movw	r30, r10
    1c8a:	82 81       	ldd	r24, Z+2	; 0x02
    1c8c:	d8 01       	movw	r26, r16
    1c8e:	50 96       	adiw	r26, 0x10	; 16
    1c90:	8c 93       	st	X, r24
		  return false;
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    1c92:	50 97       	sbiw	r26, 0x10	; 16
    1c94:	f4 01       	movw	r30, r8
    1c96:	87 81       	ldd	r24, Z+7	; 0x07
    1c98:	90 85       	ldd	r25, Z+8	; 0x08
    1c9a:	55 96       	adiw	r26, 0x15	; 21
    1c9c:	9c 93       	st	X, r25
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    1c9e:	8e 93       	st	-X, r24
    1ca0:	54 97       	sbiw	r26, 0x14	; 20
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	d5 01       	movw	r26, r10
    1ca6:	16 96       	adiw	r26, 0x06	; 6
    1ca8:	9c 91       	ld	r25, X
    1caa:	16 97       	sbiw	r26, 0x06	; 6
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    1cac:	99 23       	and	r25, r25
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <HID_Host_ConfigurePipes+0x164>
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	f8 01       	movw	r30, r16
    1cb4:	81 8b       	std	Z+17, r24	; 0x11
    1cb6:	88 e0       	ldi	r24, 0x08	; 8
    1cb8:	86 8b       	std	Z+22, r24	; 0x16
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	87 87       	std	Z+15, r24	; 0x0f
    1cbe:	04 c0       	rjmp	.+8      	; 0x1cc8 <HID_Host_ConfigurePipes+0x17a>
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	03 c0       	rjmp	.+6      	; 0x1cca <HID_Host_ConfigurePipes+0x17c>
	HIDInterfaceInfo->State.IsActive             = true;
    1cc4:	82 e0       	ldi	r24, 0x02	; 2
    1cc6:	01 c0       	rjmp	.+2      	; 0x1cca <HID_Host_ConfigurePipes+0x17c>
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
		  return false;
    1cd2:	df 91       	pop	r29
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
	HIDInterfaceInfo->State.LargestReportSize    = 8;
	HIDInterfaceInfo->State.IsActive             = true;

	return HID_ENUMERROR_NoError;
}
    1cd4:	cf 91       	pop	r28
    1cd6:	1f 91       	pop	r17
    1cd8:	0f 91       	pop	r16
    1cda:	ff 90       	pop	r15
    1cdc:	ef 90       	pop	r14
    1cde:	df 90       	pop	r13
    1ce0:	cf 90       	pop	r12
    1ce2:	bf 90       	pop	r11
    1ce4:	af 90       	pop	r10
    1ce6:	9f 90       	pop	r9
    1ce8:	8f 90       	pop	r8
    1cea:	08 95       	ret

00001cec <HID_Host_ReceiveReport>:
    1cec:	cf 93       	push	r28
    1cee:	df 93       	push	r29
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	80 91 28 05 	lds	r24, 0x0528
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1cf6:	8b 30       	cpi	r24, 0x0B	; 11
    1cf8:	d9 f5       	brne	.+118    	; 0x1d70 <HID_Host_ReceiveReport+0x84>
    1cfa:	87 85       	ldd	r24, Z+15	; 0x0f
    1cfc:	88 23       	and	r24, r24
    1cfe:	c1 f1       	breq	.+112    	; 0x1d70 <HID_Host_ReceiveReport+0x84>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1d00:	80 81       	ld	r24, Z
    1d02:	8f 70       	andi	r24, 0x0F	; 15
    1d04:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1d08:	80 91 a9 00 	lds	r24, 0x00A9
    1d0c:	8f 7b       	andi	r24, 0xBF	; 191
    1d0e:	80 93 a9 00 	sts	0x00A9, r24

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    1d12:	83 89       	ldd	r24, Z+19	; 0x13
    1d14:	88 23       	and	r24, r24
    1d16:	a9 f4       	brne	.+42     	; 0x1d42 <HID_Host_ReceiveReport+0x56>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    1d18:	a5 85       	ldd	r26, Z+13	; 0x0d
    1d1a:	b6 85       	ldd	r27, Z+14	; 0x0e
    1d1c:	a8 52       	subi	r26, 0x28	; 40
    1d1e:	bc 4f       	sbci	r27, 0xFC	; 252
    1d20:	8c 91       	ld	r24, X
    1d22:	88 23       	and	r24, r24
    1d24:	29 f0       	breq	.+10     	; 0x1d30 <HID_Host_ReceiveReport+0x44>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1d26:	20 91 af 00 	lds	r18, 0x00AF
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
    1d2a:	eb 01       	movw	r28, r22
    1d2c:	29 93       	st	Y+, r18
    1d2e:	02 c0       	rjmp	.+4      	; 0x1d34 <HID_Host_ReceiveReport+0x48>

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    1d30:	eb 01       	movw	r28, r22

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
	{
		uint8_t ReportID = 0;
    1d32:	20 e0       	ldi	r18, 0x00	; 0
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    1d34:	85 85       	ldd	r24, Z+13	; 0x0d
    1d36:	96 85       	ldd	r25, Z+14	; 0x0e
    1d38:	62 2f       	mov	r22, r18
    1d3a:	40 e0       	ldi	r20, 0x00	; 0
    1d3c:	88 d8       	rcall	.-3824   	; 0xe4e <USB_GetHIDReportSize>
    1d3e:	9c 01       	movw	r18, r24
    1d40:	05 c0       	rjmp	.+10     	; 0x1d4c <HID_Host_ReceiveReport+0x60>
    1d42:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1d46:	30 91 f7 00 	lds	r19, 0x00F7
    1d4a:	eb 01       	movw	r28, r22

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    1d4c:	ce 01       	movw	r24, r28
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NULL)) != PIPE_RWSTREAM_NoError)
    1d4e:	b9 01       	movw	r22, r18
    1d50:	40 e0       	ldi	r20, 0x00	; 0
    1d52:	50 e0       	ldi	r21, 0x00	; 0
    1d54:	80 da       	rcall	.-2816   	; 0x1256 <Pipe_Read_Stream_LE>
    1d56:	88 23       	and	r24, r24
    1d58:	61 f4       	brne	.+24     	; 0x1d72 <HID_Host_ReceiveReport+0x86>
    1d5a:	90 91 a6 00 	lds	r25, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1d5e:	9e 77       	andi	r25, 0x7E	; 126
    1d60:	90 93 a6 00 	sts	0x00A6, r25
    1d64:	90 91 a9 00 	lds	r25, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1d68:	90 64       	ori	r25, 0x40	; 64
    1d6a:	90 93 a9 00 	sts	0x00A9, r25
    1d6e:	01 c0       	rjmp	.+2      	; 0x1d72 <HID_Host_ReceiveReport+0x86>
    1d70:	82 e0       	ldi	r24, 0x02	; 2
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    1d72:	df 91       	pop	r29

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    1d74:	cf 91       	pop	r28

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    1d76:	08 95       	ret

00001d78 <HID_Host_IsReportReceived>:
    1d78:	fc 01       	movw	r30, r24
    1d7a:	80 91 28 05 	lds	r24, 0x0528
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1d7e:	8b 30       	cpi	r24, 0x0B	; 11
    1d80:	a9 f4       	brne	.+42     	; 0x1dac <HID_Host_IsReportReceived+0x34>
    1d82:	87 85       	ldd	r24, Z+15	; 0x0f
    1d84:	88 23       	and	r24, r24
    1d86:	a1 f0       	breq	.+40     	; 0x1db0 <HID_Host_IsReportReceived+0x38>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1d88:	80 81       	ld	r24, Z
    1d8a:	8f 70       	andi	r24, 0x0F	; 15
    1d8c:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1d90:	80 91 a9 00 	lds	r24, 0x00A9
    1d94:	8f 7b       	andi	r24, 0xBF	; 191
    1d96:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1d9a:	80 91 a6 00 	lds	r24, 0x00A6
    1d9e:	81 70       	andi	r24, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1da0:	90 91 a9 00 	lds	r25, 0x00A9
    1da4:	90 64       	ori	r25, 0x40	; 64
    1da6:	90 93 a9 00 	sts	0x00A9, r25

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    1daa:	08 95       	ret
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return false;
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	08 95       	ret
    1db0:	80 e0       	ldi	r24, 0x00	; 0
	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
}
    1db2:	08 95       	ret

00001db4 <HID_Host_SetReportProtocol>:
	return USB_Host_SendControlRequest(NULL);
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1db4:	af 92       	push	r10
    1db6:	bf 92       	push	r11
    1db8:	cf 92       	push	r12
    1dba:	df 92       	push	r13
    1dbc:	ef 92       	push	r14
    1dbe:	ff 92       	push	r15
    1dc0:	0f 93       	push	r16
    1dc2:	1f 93       	push	r17
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	8c 01       	movw	r16, r24

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1dce:	ad b6       	in	r10, 0x3d	; 61
    1dd0:	be b6       	in	r11, 0x3e	; 62
#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	uint8_t HIDReportData[HIDInterfaceInfo->State.HIDReportSize];
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	54 96       	adiw	r26, 0x14	; 20
    1dd6:	4d 91       	ld	r20, X+
    1dd8:	5c 91       	ld	r21, X
    1dda:	55 97       	sbiw	r26, 0x15	; 21
    1ddc:	ed b7       	in	r30, 0x3d	; 61
    1dde:	fe b7       	in	r31, 0x3e	; 62
    1de0:	e4 1b       	sub	r30, r20
    1de2:	f5 0b       	sbc	r31, r21
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	f8 94       	cli
    1de8:	fe bf       	out	0x3e, r31	; 62
    1dea:	0f be       	out	0x3f, r0	; 63
    1dec:	ed bf       	out	0x3d, r30	; 61
    1dee:	2d b7       	in	r18, 0x3d	; 61
    1df0:	3e b7       	in	r19, 0x3e	; 62
    1df2:	2f 5f       	subi	r18, 0xFF	; 255
    1df4:	3f 4f       	sbci	r19, 0xFF	; 255

	USB_ControlRequest = (USB_Request_Header_t)
    1df6:	50 96       	adiw	r26, 0x10	; 16
    1df8:	6c 91       	ld	r22, X
    1dfa:	81 e8       	ldi	r24, 0x81	; 129
    1dfc:	80 93 20 05 	sts	0x0520, r24
    1e00:	86 e0       	ldi	r24, 0x06	; 6
    1e02:	80 93 21 05 	sts	0x0521, r24
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	92 e2       	ldi	r25, 0x22	; 34
    1e0a:	90 93 23 05 	sts	0x0523, r25
    1e0e:	80 93 22 05 	sts	0x0522, r24
    1e12:	74 e2       	ldi	r23, 0x24	; 36
    1e14:	e7 2e       	mov	r14, r23
    1e16:	75 e0       	ldi	r23, 0x05	; 5
    1e18:	f7 2e       	mov	r15, r23
    1e1a:	60 93 24 05 	sts	0x0524, r22
    1e1e:	d7 01       	movw	r26, r14
    1e20:	11 96       	adiw	r26, 0x01	; 1
    1e22:	1c 92       	st	X, r1
    1e24:	50 93 27 05 	sts	0x0527, r21
    1e28:	40 93 26 05 	sts	0x0526, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1e2c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = HIDInterfaceInfo->State.HIDReportSize,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(HIDReportData)) != HOST_SENDCONTROL_Successful)
    1e30:	d2 2e       	mov	r13, r18
    1e32:	c3 2e       	mov	r12, r19
    1e34:	c9 01       	movw	r24, r18
    1e36:	33 dd       	rcall	.-1434   	; 0x189e <USB_Host_SendControlRequest>
    1e38:	88 23       	and	r24, r24
    1e3a:	09 f0       	breq	.+2      	; 0x1e3e <HID_Host_SetReportProtocol+0x8a>
    1e3c:	50 c0       	rjmp	.+160    	; 0x1ede <HID_Host_SetReportProtocol+0x12a>
    1e3e:	f8 01       	movw	r30, r16
	  return ErrorCode;

	if (HIDInterfaceInfo->State.UsingBootProtocol)
    1e40:	83 89       	ldd	r24, Z+19	; 0x13
    1e42:	88 23       	and	r24, r24
    1e44:	e9 f0       	breq	.+58     	; 0x1e80 <HID_Host_SetReportProtocol+0xcc>
    1e46:	20 89       	ldd	r18, Z+16	; 0x10
	{
		USB_ControlRequest = (USB_Request_Header_t)
    1e48:	81 e2       	ldi	r24, 0x21	; 33
    1e4a:	80 93 20 05 	sts	0x0520, r24
    1e4e:	8b e0       	ldi	r24, 0x0B	; 11
    1e50:	80 93 21 05 	sts	0x0521, r24
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	90 93 23 05 	sts	0x0523, r25
    1e5c:	80 93 22 05 	sts	0x0522, r24
    1e60:	20 93 24 05 	sts	0x0524, r18
    1e64:	d7 01       	movw	r26, r14
    1e66:	11 96       	adiw	r26, 0x01	; 1
    1e68:	1c 92       	st	X, r1
    1e6a:	10 92 27 05 	sts	0x0527, r1
    1e6e:	10 92 26 05 	sts	0x0526, r1
    1e72:	80 e0       	ldi	r24, 0x00	; 0
				.wValue        = 1,
				.wIndex        = HIDInterfaceInfo->State.InterfaceNumber,
				.wLength       = 0,
			};

		if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	13 dd       	rcall	.-1498   	; 0x189e <USB_Host_SendControlRequest>
    1e78:	88 23       	and	r24, r24
    1e7a:	89 f5       	brne	.+98     	; 0x1ede <HID_Host_SetReportProtocol+0x12a>
    1e7c:	f8 01       	movw	r30, r16
    1e7e:	13 8a       	std	Z+19, r1	; 0x13
		  return ErrorCode;

		HIDInterfaceInfo->State.UsingBootProtocol = false;
    1e80:	d8 01       	movw	r26, r16
    1e82:	1d 96       	adiw	r26, 0x0d	; 13
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
    1e84:	4d 91       	ld	r20, X+
    1e86:	5c 91       	ld	r21, X
    1e88:	1e 97       	sbiw	r26, 0x0e	; 14
    1e8a:	41 15       	cp	r20, r1
    1e8c:	51 05       	cpc	r21, r1
    1e8e:	31 f1       	breq	.+76     	; 0x1edc <HID_Host_SetReportProtocol+0x128>
    1e90:	54 96       	adiw	r26, 0x14	; 20
    1e92:	6d 91       	ld	r22, X+
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_ProcessHIDReport(HIDReportData, HIDInterfaceInfo->State.HIDReportSize,
    1e94:	7c 91       	ld	r23, X
    1e96:	55 97       	sbiw	r26, 0x15	; 21
    1e98:	8d 2d       	mov	r24, r13
    1e9a:	9c 2d       	mov	r25, r12
    1e9c:	0e 94 0a 03 	call	0x614	; 0x614 <USB_ProcessHIDReport>
    1ea0:	88 23       	and	r24, r24
    1ea2:	11 f0       	breq	.+4      	; 0x1ea8 <HID_Host_SetReportProtocol+0xf4>
    1ea4:	80 68       	ori	r24, 0x80	; 128
    1ea6:	1b c0       	rjmp	.+54     	; 0x1ede <HID_Host_SetReportProtocol+0x12a>
	                                      HIDInterfaceInfo->Config.HIDParserData)) != HID_PARSE_Successful)
	{
		return HID_ERROR_LOGICAL | ErrorCode;
    1ea8:	d8 01       	movw	r26, r16
    1eaa:	1d 96       	adiw	r26, 0x0d	; 13
	}

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
    1eac:	ed 91       	ld	r30, X+
    1eae:	fc 91       	ld	r31, X
    1eb0:	1e 97       	sbiw	r26, 0x0e	; 14
    1eb2:	ea 52       	subi	r30, 0x2A	; 42
    1eb4:	fc 4f       	sbci	r31, 0xFC	; 252
    1eb6:	20 81       	ld	r18, Z
    1eb8:	31 81       	ldd	r19, Z+1	; 0x01
    1eba:	a9 01       	movw	r20, r18
    1ebc:	47 70       	andi	r20, 0x07	; 7
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);
    1ebe:	50 70       	andi	r21, 0x00	; 0
    1ec0:	91 e0       	ldi	r25, 0x01	; 1
    1ec2:	41 15       	cp	r20, r1
    1ec4:	51 05       	cpc	r21, r1
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <HID_Host_SetReportProtocol+0x116>
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	43 e0       	ldi	r20, 0x03	; 3
    1ecc:	36 95       	lsr	r19
    1ece:	27 95       	ror	r18
    1ed0:	4a 95       	dec	r20
    1ed2:	e1 f7       	brne	.-8      	; 0x1ecc <HID_Host_SetReportProtocol+0x118>
    1ed4:	29 0f       	add	r18, r25
    1ed6:	f8 01       	movw	r30, r16
    1ed8:	26 8b       	std	Z+22, r18	; 0x16
    1eda:	01 c0       	rjmp	.+2      	; 0x1ede <HID_Host_SetReportProtocol+0x12a>
    1edc:	80 e8       	ldi	r24, 0x80	; 128
    1ede:	0f b6       	in	r0, 0x3f	; 63

		HIDInterfaceInfo->State.UsingBootProtocol = false;
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
	  return HID_ERROR_LOGICAL;
    1ee0:	f8 94       	cli

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1ee2:	be be       	out	0x3e, r11	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	ad be       	out	0x3d, r10	; 61
    1ee8:	df 91       	pop	r29
    1eea:	cf 91       	pop	r28
    1eec:	1f 91       	pop	r17
    1eee:	0f 91       	pop	r16
    1ef0:	ff 90       	pop	r15
    1ef2:	ef 90       	pop	r14
    1ef4:	df 90       	pop	r13
    1ef6:	cf 90       	pop	r12
    1ef8:	bf 90       	pop	r11
    1efa:	af 90       	pop	r10
    1efc:	08 95       	ret

00001efe <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1efe:	90 91 c8 00 	lds	r25, 0x00C8
    1f02:	95 ff       	sbrs	r25, 5
    1f04:	fc cf       	rjmp	.-8      	; 0x1efe <Serial_putchar>
				UDR1 = DataByte;
    1f06:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	08 95       	ret

00001f10 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1f10:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1f14:	87 ff       	sbrs	r24, 7
    1f16:	08 c0       	rjmp	.+16     	; 0x1f28 <Serial_getchar+0x18>
    1f18:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1f1c:	87 ff       	sbrs	r24, 7
    1f1e:	07 c0       	rjmp	.+14     	; 0x1f2e <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1f20:	80 91 ce 00 	lds	r24, 0x00CE
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	08 95       	ret
	  return _FDEV_EOF;
    1f28:	8e ef       	ldi	r24, 0xFE	; 254
    1f2a:	9f ef       	ldi	r25, 0xFF	; 255
    1f2c:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1f2e:	8f ef       	ldi	r24, 0xFF	; 255
    1f30:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1f32:	08 95       	ret

00001f34 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1f34:	fc 01       	movw	r30, r24
	if (!(Stream))
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	51 f4       	brne	.+20     	; 0x1f4e <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1f3a:	e9 e2       	ldi	r30, 0x29	; 41
    1f3c:	f5 e0       	ldi	r31, 0x05	; 5
    1f3e:	f0 93 38 05 	sts	0x0538, r31
    1f42:	e0 93 37 05 	sts	0x0537, r30
		stdout = Stream;
    1f46:	f0 93 3a 05 	sts	0x053A, r31
    1f4a:	e0 93 39 05 	sts	0x0539, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1f4e:	8e e0       	ldi	r24, 0x0E	; 14
    1f50:	df 01       	movw	r26, r30
    1f52:	1d 92       	st	X+, r1
    1f54:	8a 95       	dec	r24
    1f56:	e9 f7       	brne	.-6      	; 0x1f52 <Serial_CreateStream+0x1e>
    1f58:	83 e0       	ldi	r24, 0x03	; 3
    1f5a:	83 83       	std	Z+3, r24	; 0x03
    1f5c:	8f e7       	ldi	r24, 0x7F	; 127
    1f5e:	9f e0       	ldi	r25, 0x0F	; 15
    1f60:	91 87       	std	Z+9, r25	; 0x09
    1f62:	80 87       	std	Z+8, r24	; 0x08
    1f64:	88 e8       	ldi	r24, 0x88	; 136
    1f66:	9f e0       	ldi	r25, 0x0F	; 15
    1f68:	93 87       	std	Z+11, r25	; 0x0b
    1f6a:	82 87       	std	Z+10, r24	; 0x0a
}
    1f6c:	08 95       	ret

00001f6e <printf_P>:
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	fe 01       	movw	r30, r28
    1f78:	35 96       	adiw	r30, 0x05	; 5
    1f7a:	61 91       	ld	r22, Z+
    1f7c:	71 91       	ld	r23, Z+
    1f7e:	80 91 39 05 	lds	r24, 0x0539
    1f82:	90 91 3a 05 	lds	r25, 0x053A
    1f86:	dc 01       	movw	r26, r24
    1f88:	13 96       	adiw	r26, 0x03	; 3
    1f8a:	2c 91       	ld	r18, X
    1f8c:	13 97       	sbiw	r26, 0x03	; 3
    1f8e:	28 60       	ori	r18, 0x08	; 8
    1f90:	13 96       	adiw	r26, 0x03	; 3
    1f92:	2c 93       	st	X, r18
    1f94:	af 01       	movw	r20, r30
    1f96:	39 d0       	rcall	.+114    	; 0x200a <vfprintf>
    1f98:	e0 91 39 05 	lds	r30, 0x0539
    1f9c:	f0 91 3a 05 	lds	r31, 0x053A
    1fa0:	23 81       	ldd	r18, Z+3	; 0x03
    1fa2:	27 7f       	andi	r18, 0xF7	; 247
    1fa4:	23 83       	std	Z+3, r18	; 0x03
    1fa6:	df 91       	pop	r29
    1fa8:	cf 91       	pop	r28
    1faa:	08 95       	ret

00001fac <puts_P>:
    1fac:	0f 93       	push	r16
    1fae:	1f 93       	push	r17
    1fb0:	cf 93       	push	r28
    1fb2:	df 93       	push	r29
    1fb4:	8c 01       	movw	r16, r24
    1fb6:	e0 91 39 05 	lds	r30, 0x0539
    1fba:	f0 91 3a 05 	lds	r31, 0x053A
    1fbe:	83 81       	ldd	r24, Z+3	; 0x03
    1fc0:	81 ff       	sbrs	r24, 1
    1fc2:	1b c0       	rjmp	.+54     	; 0x1ffa <puts_P+0x4e>
    1fc4:	c0 e0       	ldi	r28, 0x00	; 0
    1fc6:	d0 e0       	ldi	r29, 0x00	; 0
    1fc8:	07 c0       	rjmp	.+14     	; 0x1fd8 <puts_P+0x2c>
    1fca:	09 95       	icall
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	11 f0       	breq	.+4      	; 0x1fd4 <puts_P+0x28>
    1fd0:	cf ef       	ldi	r28, 0xFF	; 255
    1fd2:	df ef       	ldi	r29, 0xFF	; 255
    1fd4:	0f 5f       	subi	r16, 0xFF	; 255
    1fd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd8:	f8 01       	movw	r30, r16
    1fda:	84 91       	lpm	r24, Z
    1fdc:	60 91 39 05 	lds	r22, 0x0539
    1fe0:	70 91 3a 05 	lds	r23, 0x053A
    1fe4:	db 01       	movw	r26, r22
    1fe6:	18 96       	adiw	r26, 0x08	; 8
    1fe8:	ed 91       	ld	r30, X+
    1fea:	fc 91       	ld	r31, X
    1fec:	19 97       	sbiw	r26, 0x09	; 9
    1fee:	88 23       	and	r24, r24
    1ff0:	61 f7       	brne	.-40     	; 0x1fca <puts_P+0x1e>
    1ff2:	8a e0       	ldi	r24, 0x0A	; 10
    1ff4:	09 95       	icall
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	11 f0       	breq	.+4      	; 0x1ffe <puts_P+0x52>
    1ffa:	cf ef       	ldi	r28, 0xFF	; 255
    1ffc:	df ef       	ldi	r29, 0xFF	; 255
    1ffe:	ce 01       	movw	r24, r28
    2000:	df 91       	pop	r29
    2002:	cf 91       	pop	r28
    2004:	1f 91       	pop	r17
    2006:	0f 91       	pop	r16
    2008:	08 95       	ret

0000200a <vfprintf>:
    200a:	2f 92       	push	r2
    200c:	3f 92       	push	r3
    200e:	4f 92       	push	r4
    2010:	5f 92       	push	r5
    2012:	6f 92       	push	r6
    2014:	7f 92       	push	r7
    2016:	8f 92       	push	r8
    2018:	9f 92       	push	r9
    201a:	af 92       	push	r10
    201c:	bf 92       	push	r11
    201e:	cf 92       	push	r12
    2020:	df 92       	push	r13
    2022:	ef 92       	push	r14
    2024:	ff 92       	push	r15
    2026:	0f 93       	push	r16
    2028:	1f 93       	push	r17
    202a:	cf 93       	push	r28
    202c:	df 93       	push	r29
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	2d 97       	sbiw	r28, 0x0d	; 13
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61
    203e:	3c 01       	movw	r6, r24
    2040:	7d 87       	std	Y+13, r23	; 0x0d
    2042:	6c 87       	std	Y+12, r22	; 0x0c
    2044:	5a 01       	movw	r10, r20
    2046:	fc 01       	movw	r30, r24
    2048:	17 82       	std	Z+7, r1	; 0x07
    204a:	16 82       	std	Z+6, r1	; 0x06
    204c:	83 81       	ldd	r24, Z+3	; 0x03
    204e:	81 ff       	sbrs	r24, 1
    2050:	bb c1       	rjmp	.+886    	; 0x23c8 <__stack+0x2c9>
    2052:	2e 01       	movw	r4, r28
    2054:	08 94       	sec
    2056:	41 1c       	adc	r4, r1
    2058:	51 1c       	adc	r5, r1
    205a:	f3 01       	movw	r30, r6
    205c:	93 81       	ldd	r25, Z+3	; 0x03
    205e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2060:	fd 85       	ldd	r31, Y+13	; 0x0d
    2062:	93 fd       	sbrc	r25, 3
    2064:	85 91       	lpm	r24, Z+
    2066:	93 ff       	sbrs	r25, 3
    2068:	81 91       	ld	r24, Z+
    206a:	fd 87       	std	Y+13, r31	; 0x0d
    206c:	ec 87       	std	Y+12, r30	; 0x0c
    206e:	88 23       	and	r24, r24
    2070:	09 f4       	brne	.+2      	; 0x2074 <vfprintf+0x6a>
    2072:	a6 c1       	rjmp	.+844    	; 0x23c0 <__stack+0x2c1>
    2074:	85 32       	cpi	r24, 0x25	; 37
    2076:	41 f4       	brne	.+16     	; 0x2088 <vfprintf+0x7e>
    2078:	93 fd       	sbrc	r25, 3
    207a:	85 91       	lpm	r24, Z+
    207c:	93 ff       	sbrs	r25, 3
    207e:	81 91       	ld	r24, Z+
    2080:	fd 87       	std	Y+13, r31	; 0x0d
    2082:	ec 87       	std	Y+12, r30	; 0x0c
    2084:	85 32       	cpi	r24, 0x25	; 37
    2086:	21 f4       	brne	.+8      	; 0x2090 <vfprintf+0x86>
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	b3 01       	movw	r22, r6
    208c:	ce d1       	rcall	.+924    	; 0x242a <fputc>
    208e:	e5 cf       	rjmp	.-54     	; 0x205a <vfprintf+0x50>
    2090:	ff 24       	eor	r15, r15
    2092:	ee 24       	eor	r14, r14
    2094:	10 e0       	ldi	r17, 0x00	; 0
    2096:	10 32       	cpi	r17, 0x20	; 32
    2098:	b0 f4       	brcc	.+44     	; 0x20c6 <vfprintf+0xbc>
    209a:	8b 32       	cpi	r24, 0x2B	; 43
    209c:	69 f0       	breq	.+26     	; 0x20b8 <vfprintf+0xae>
    209e:	8c 32       	cpi	r24, 0x2C	; 44
    20a0:	28 f4       	brcc	.+10     	; 0x20ac <vfprintf+0xa2>
    20a2:	80 32       	cpi	r24, 0x20	; 32
    20a4:	51 f0       	breq	.+20     	; 0x20ba <vfprintf+0xb0>
    20a6:	83 32       	cpi	r24, 0x23	; 35
    20a8:	71 f4       	brne	.+28     	; 0x20c6 <vfprintf+0xbc>
    20aa:	0b c0       	rjmp	.+22     	; 0x20c2 <vfprintf+0xb8>
    20ac:	8d 32       	cpi	r24, 0x2D	; 45
    20ae:	39 f0       	breq	.+14     	; 0x20be <vfprintf+0xb4>
    20b0:	80 33       	cpi	r24, 0x30	; 48
    20b2:	49 f4       	brne	.+18     	; 0x20c6 <vfprintf+0xbc>
    20b4:	11 60       	ori	r17, 0x01	; 1
    20b6:	2c c0       	rjmp	.+88     	; 0x2110 <__stack+0x11>
    20b8:	12 60       	ori	r17, 0x02	; 2
    20ba:	14 60       	ori	r17, 0x04	; 4
    20bc:	29 c0       	rjmp	.+82     	; 0x2110 <__stack+0x11>
    20be:	18 60       	ori	r17, 0x08	; 8
    20c0:	27 c0       	rjmp	.+78     	; 0x2110 <__stack+0x11>
    20c2:	10 61       	ori	r17, 0x10	; 16
    20c4:	25 c0       	rjmp	.+74     	; 0x2110 <__stack+0x11>
    20c6:	17 fd       	sbrc	r17, 7
    20c8:	2e c0       	rjmp	.+92     	; 0x2126 <__stack+0x27>
    20ca:	28 2f       	mov	r18, r24
    20cc:	20 53       	subi	r18, 0x30	; 48
    20ce:	2a 30       	cpi	r18, 0x0A	; 10
    20d0:	98 f4       	brcc	.+38     	; 0x20f8 <vfprintf+0xee>
    20d2:	16 ff       	sbrs	r17, 6
    20d4:	08 c0       	rjmp	.+16     	; 0x20e6 <vfprintf+0xdc>
    20d6:	8f 2d       	mov	r24, r15
    20d8:	88 0f       	add	r24, r24
    20da:	f8 2e       	mov	r15, r24
    20dc:	ff 0c       	add	r15, r15
    20de:	ff 0c       	add	r15, r15
    20e0:	f8 0e       	add	r15, r24
    20e2:	f2 0e       	add	r15, r18
    20e4:	15 c0       	rjmp	.+42     	; 0x2110 <__stack+0x11>
    20e6:	8e 2d       	mov	r24, r14
    20e8:	88 0f       	add	r24, r24
    20ea:	e8 2e       	mov	r14, r24
    20ec:	ee 0c       	add	r14, r14
    20ee:	ee 0c       	add	r14, r14
    20f0:	e8 0e       	add	r14, r24
    20f2:	e2 0e       	add	r14, r18
    20f4:	10 62       	ori	r17, 0x20	; 32
    20f6:	0c c0       	rjmp	.+24     	; 0x2110 <__stack+0x11>
    20f8:	8e 32       	cpi	r24, 0x2E	; 46
    20fa:	21 f4       	brne	.+8      	; 0x2104 <__stack+0x5>
    20fc:	16 fd       	sbrc	r17, 6
    20fe:	60 c1       	rjmp	.+704    	; 0x23c0 <__stack+0x2c1>
    2100:	10 64       	ori	r17, 0x40	; 64
    2102:	06 c0       	rjmp	.+12     	; 0x2110 <__stack+0x11>
    2104:	8c 36       	cpi	r24, 0x6C	; 108
    2106:	11 f4       	brne	.+4      	; 0x210c <__stack+0xd>
    2108:	10 68       	ori	r17, 0x80	; 128
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <__stack+0x11>
    210c:	88 36       	cpi	r24, 0x68	; 104
    210e:	59 f4       	brne	.+22     	; 0x2126 <__stack+0x27>
    2110:	ec 85       	ldd	r30, Y+12	; 0x0c
    2112:	fd 85       	ldd	r31, Y+13	; 0x0d
    2114:	93 fd       	sbrc	r25, 3
    2116:	85 91       	lpm	r24, Z+
    2118:	93 ff       	sbrs	r25, 3
    211a:	81 91       	ld	r24, Z+
    211c:	fd 87       	std	Y+13, r31	; 0x0d
    211e:	ec 87       	std	Y+12, r30	; 0x0c
    2120:	88 23       	and	r24, r24
    2122:	09 f0       	breq	.+2      	; 0x2126 <__stack+0x27>
    2124:	b8 cf       	rjmp	.-144    	; 0x2096 <vfprintf+0x8c>
    2126:	98 2f       	mov	r25, r24
    2128:	95 54       	subi	r25, 0x45	; 69
    212a:	93 30       	cpi	r25, 0x03	; 3
    212c:	18 f0       	brcs	.+6      	; 0x2134 <__stack+0x35>
    212e:	90 52       	subi	r25, 0x20	; 32
    2130:	93 30       	cpi	r25, 0x03	; 3
    2132:	38 f4       	brcc	.+14     	; 0x2142 <__stack+0x43>
    2134:	24 e0       	ldi	r18, 0x04	; 4
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	a2 0e       	add	r10, r18
    213a:	b3 1e       	adc	r11, r19
    213c:	3f e3       	ldi	r19, 0x3F	; 63
    213e:	39 83       	std	Y+1, r19	; 0x01
    2140:	0f c0       	rjmp	.+30     	; 0x2160 <__stack+0x61>
    2142:	83 36       	cpi	r24, 0x63	; 99
    2144:	31 f0       	breq	.+12     	; 0x2152 <__stack+0x53>
    2146:	83 37       	cpi	r24, 0x73	; 115
    2148:	81 f0       	breq	.+32     	; 0x216a <__stack+0x6b>
    214a:	83 35       	cpi	r24, 0x53	; 83
    214c:	09 f0       	breq	.+2      	; 0x2150 <__stack+0x51>
    214e:	56 c0       	rjmp	.+172    	; 0x21fc <__stack+0xfd>
    2150:	21 c0       	rjmp	.+66     	; 0x2194 <__stack+0x95>
    2152:	f5 01       	movw	r30, r10
    2154:	80 81       	ld	r24, Z
    2156:	89 83       	std	Y+1, r24	; 0x01
    2158:	22 e0       	ldi	r18, 0x02	; 2
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	a2 0e       	add	r10, r18
    215e:	b3 1e       	adc	r11, r19
    2160:	21 e0       	ldi	r18, 0x01	; 1
    2162:	c2 2e       	mov	r12, r18
    2164:	d1 2c       	mov	r13, r1
    2166:	42 01       	movw	r8, r4
    2168:	13 c0       	rjmp	.+38     	; 0x2190 <__stack+0x91>
    216a:	92 e0       	ldi	r25, 0x02	; 2
    216c:	29 2e       	mov	r2, r25
    216e:	31 2c       	mov	r3, r1
    2170:	2a 0c       	add	r2, r10
    2172:	3b 1c       	adc	r3, r11
    2174:	f5 01       	movw	r30, r10
    2176:	80 80       	ld	r8, Z
    2178:	91 80       	ldd	r9, Z+1	; 0x01
    217a:	16 ff       	sbrs	r17, 6
    217c:	03 c0       	rjmp	.+6      	; 0x2184 <__stack+0x85>
    217e:	6f 2d       	mov	r22, r15
    2180:	70 e0       	ldi	r23, 0x00	; 0
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <__stack+0x89>
    2184:	6f ef       	ldi	r22, 0xFF	; 255
    2186:	7f ef       	ldi	r23, 0xFF	; 255
    2188:	c4 01       	movw	r24, r8
    218a:	44 d1       	rcall	.+648    	; 0x2414 <strnlen>
    218c:	6c 01       	movw	r12, r24
    218e:	51 01       	movw	r10, r2
    2190:	1f 77       	andi	r17, 0x7F	; 127
    2192:	14 c0       	rjmp	.+40     	; 0x21bc <__stack+0xbd>
    2194:	82 e0       	ldi	r24, 0x02	; 2
    2196:	28 2e       	mov	r2, r24
    2198:	31 2c       	mov	r3, r1
    219a:	2a 0c       	add	r2, r10
    219c:	3b 1c       	adc	r3, r11
    219e:	f5 01       	movw	r30, r10
    21a0:	80 80       	ld	r8, Z
    21a2:	91 80       	ldd	r9, Z+1	; 0x01
    21a4:	16 ff       	sbrs	r17, 6
    21a6:	03 c0       	rjmp	.+6      	; 0x21ae <__stack+0xaf>
    21a8:	6f 2d       	mov	r22, r15
    21aa:	70 e0       	ldi	r23, 0x00	; 0
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <__stack+0xb3>
    21ae:	6f ef       	ldi	r22, 0xFF	; 255
    21b0:	7f ef       	ldi	r23, 0xFF	; 255
    21b2:	c4 01       	movw	r24, r8
    21b4:	24 d1       	rcall	.+584    	; 0x23fe <strnlen_P>
    21b6:	6c 01       	movw	r12, r24
    21b8:	10 68       	ori	r17, 0x80	; 128
    21ba:	51 01       	movw	r10, r2
    21bc:	13 fd       	sbrc	r17, 3
    21be:	1a c0       	rjmp	.+52     	; 0x21f4 <__stack+0xf5>
    21c0:	05 c0       	rjmp	.+10     	; 0x21cc <__stack+0xcd>
    21c2:	80 e2       	ldi	r24, 0x20	; 32
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	b3 01       	movw	r22, r6
    21c8:	30 d1       	rcall	.+608    	; 0x242a <fputc>
    21ca:	ea 94       	dec	r14
    21cc:	8e 2d       	mov	r24, r14
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	c8 16       	cp	r12, r24
    21d2:	d9 06       	cpc	r13, r25
    21d4:	b0 f3       	brcs	.-20     	; 0x21c2 <__stack+0xc3>
    21d6:	0e c0       	rjmp	.+28     	; 0x21f4 <__stack+0xf5>
    21d8:	f4 01       	movw	r30, r8
    21da:	17 fd       	sbrc	r17, 7
    21dc:	85 91       	lpm	r24, Z+
    21de:	17 ff       	sbrs	r17, 7
    21e0:	81 91       	ld	r24, Z+
    21e2:	4f 01       	movw	r8, r30
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	b3 01       	movw	r22, r6
    21e8:	20 d1       	rcall	.+576    	; 0x242a <fputc>
    21ea:	e1 10       	cpse	r14, r1
    21ec:	ea 94       	dec	r14
    21ee:	08 94       	sec
    21f0:	c1 08       	sbc	r12, r1
    21f2:	d1 08       	sbc	r13, r1
    21f4:	c1 14       	cp	r12, r1
    21f6:	d1 04       	cpc	r13, r1
    21f8:	79 f7       	brne	.-34     	; 0x21d8 <__stack+0xd9>
    21fa:	df c0       	rjmp	.+446    	; 0x23ba <__stack+0x2bb>
    21fc:	84 36       	cpi	r24, 0x64	; 100
    21fe:	11 f0       	breq	.+4      	; 0x2204 <__stack+0x105>
    2200:	89 36       	cpi	r24, 0x69	; 105
    2202:	49 f5       	brne	.+82     	; 0x2256 <__stack+0x157>
    2204:	f5 01       	movw	r30, r10
    2206:	17 ff       	sbrs	r17, 7
    2208:	07 c0       	rjmp	.+14     	; 0x2218 <__stack+0x119>
    220a:	80 81       	ld	r24, Z
    220c:	91 81       	ldd	r25, Z+1	; 0x01
    220e:	a2 81       	ldd	r26, Z+2	; 0x02
    2210:	b3 81       	ldd	r27, Z+3	; 0x03
    2212:	24 e0       	ldi	r18, 0x04	; 4
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	08 c0       	rjmp	.+16     	; 0x2228 <__stack+0x129>
    2218:	80 81       	ld	r24, Z
    221a:	91 81       	ldd	r25, Z+1	; 0x01
    221c:	aa 27       	eor	r26, r26
    221e:	97 fd       	sbrc	r25, 7
    2220:	a0 95       	com	r26
    2222:	ba 2f       	mov	r27, r26
    2224:	22 e0       	ldi	r18, 0x02	; 2
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	a2 0e       	add	r10, r18
    222a:	b3 1e       	adc	r11, r19
    222c:	01 2f       	mov	r16, r17
    222e:	0f 76       	andi	r16, 0x6F	; 111
    2230:	b7 ff       	sbrs	r27, 7
    2232:	08 c0       	rjmp	.+16     	; 0x2244 <__stack+0x145>
    2234:	b0 95       	com	r27
    2236:	a0 95       	com	r26
    2238:	90 95       	com	r25
    223a:	81 95       	neg	r24
    223c:	9f 4f       	sbci	r25, 0xFF	; 255
    223e:	af 4f       	sbci	r26, 0xFF	; 255
    2240:	bf 4f       	sbci	r27, 0xFF	; 255
    2242:	00 68       	ori	r16, 0x80	; 128
    2244:	bc 01       	movw	r22, r24
    2246:	cd 01       	movw	r24, r26
    2248:	a2 01       	movw	r20, r4
    224a:	2a e0       	ldi	r18, 0x0A	; 10
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	19 d1       	rcall	.+562    	; 0x2482 <__ultoa_invert>
    2250:	d8 2e       	mov	r13, r24
    2252:	d4 18       	sub	r13, r4
    2254:	3e c0       	rjmp	.+124    	; 0x22d2 <__stack+0x1d3>
    2256:	85 37       	cpi	r24, 0x75	; 117
    2258:	21 f4       	brne	.+8      	; 0x2262 <__stack+0x163>
    225a:	1f 7e       	andi	r17, 0xEF	; 239
    225c:	2a e0       	ldi	r18, 0x0A	; 10
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	20 c0       	rjmp	.+64     	; 0x22a2 <__stack+0x1a3>
    2262:	19 7f       	andi	r17, 0xF9	; 249
    2264:	8f 36       	cpi	r24, 0x6F	; 111
    2266:	a9 f0       	breq	.+42     	; 0x2292 <__stack+0x193>
    2268:	80 37       	cpi	r24, 0x70	; 112
    226a:	20 f4       	brcc	.+8      	; 0x2274 <__stack+0x175>
    226c:	88 35       	cpi	r24, 0x58	; 88
    226e:	09 f0       	breq	.+2      	; 0x2272 <__stack+0x173>
    2270:	a7 c0       	rjmp	.+334    	; 0x23c0 <__stack+0x2c1>
    2272:	0b c0       	rjmp	.+22     	; 0x228a <__stack+0x18b>
    2274:	80 37       	cpi	r24, 0x70	; 112
    2276:	21 f0       	breq	.+8      	; 0x2280 <__stack+0x181>
    2278:	88 37       	cpi	r24, 0x78	; 120
    227a:	09 f0       	breq	.+2      	; 0x227e <__stack+0x17f>
    227c:	a1 c0       	rjmp	.+322    	; 0x23c0 <__stack+0x2c1>
    227e:	01 c0       	rjmp	.+2      	; 0x2282 <__stack+0x183>
    2280:	10 61       	ori	r17, 0x10	; 16
    2282:	14 ff       	sbrs	r17, 4
    2284:	09 c0       	rjmp	.+18     	; 0x2298 <__stack+0x199>
    2286:	14 60       	ori	r17, 0x04	; 4
    2288:	07 c0       	rjmp	.+14     	; 0x2298 <__stack+0x199>
    228a:	14 ff       	sbrs	r17, 4
    228c:	08 c0       	rjmp	.+16     	; 0x229e <__stack+0x19f>
    228e:	16 60       	ori	r17, 0x06	; 6
    2290:	06 c0       	rjmp	.+12     	; 0x229e <__stack+0x19f>
    2292:	28 e0       	ldi	r18, 0x08	; 8
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	05 c0       	rjmp	.+10     	; 0x22a2 <__stack+0x1a3>
    2298:	20 e1       	ldi	r18, 0x10	; 16
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <__stack+0x1a3>
    229e:	20 e1       	ldi	r18, 0x10	; 16
    22a0:	32 e0       	ldi	r19, 0x02	; 2
    22a2:	f5 01       	movw	r30, r10
    22a4:	17 ff       	sbrs	r17, 7
    22a6:	07 c0       	rjmp	.+14     	; 0x22b6 <__stack+0x1b7>
    22a8:	60 81       	ld	r22, Z
    22aa:	71 81       	ldd	r23, Z+1	; 0x01
    22ac:	82 81       	ldd	r24, Z+2	; 0x02
    22ae:	93 81       	ldd	r25, Z+3	; 0x03
    22b0:	44 e0       	ldi	r20, 0x04	; 4
    22b2:	50 e0       	ldi	r21, 0x00	; 0
    22b4:	06 c0       	rjmp	.+12     	; 0x22c2 <__stack+0x1c3>
    22b6:	60 81       	ld	r22, Z
    22b8:	71 81       	ldd	r23, Z+1	; 0x01
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	42 e0       	ldi	r20, 0x02	; 2
    22c0:	50 e0       	ldi	r21, 0x00	; 0
    22c2:	a4 0e       	add	r10, r20
    22c4:	b5 1e       	adc	r11, r21
    22c6:	a2 01       	movw	r20, r4
    22c8:	dc d0       	rcall	.+440    	; 0x2482 <__ultoa_invert>
    22ca:	d8 2e       	mov	r13, r24
    22cc:	d4 18       	sub	r13, r4
    22ce:	01 2f       	mov	r16, r17
    22d0:	0f 77       	andi	r16, 0x7F	; 127
    22d2:	06 ff       	sbrs	r16, 6
    22d4:	09 c0       	rjmp	.+18     	; 0x22e8 <__stack+0x1e9>
    22d6:	0e 7f       	andi	r16, 0xFE	; 254
    22d8:	df 14       	cp	r13, r15
    22da:	30 f4       	brcc	.+12     	; 0x22e8 <__stack+0x1e9>
    22dc:	04 ff       	sbrs	r16, 4
    22de:	06 c0       	rjmp	.+12     	; 0x22ec <__stack+0x1ed>
    22e0:	02 fd       	sbrc	r16, 2
    22e2:	04 c0       	rjmp	.+8      	; 0x22ec <__stack+0x1ed>
    22e4:	0f 7e       	andi	r16, 0xEF	; 239
    22e6:	02 c0       	rjmp	.+4      	; 0x22ec <__stack+0x1ed>
    22e8:	1d 2d       	mov	r17, r13
    22ea:	01 c0       	rjmp	.+2      	; 0x22ee <__stack+0x1ef>
    22ec:	1f 2d       	mov	r17, r15
    22ee:	80 2f       	mov	r24, r16
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	04 ff       	sbrs	r16, 4
    22f4:	0c c0       	rjmp	.+24     	; 0x230e <__stack+0x20f>
    22f6:	fe 01       	movw	r30, r28
    22f8:	ed 0d       	add	r30, r13
    22fa:	f1 1d       	adc	r31, r1
    22fc:	20 81       	ld	r18, Z
    22fe:	20 33       	cpi	r18, 0x30	; 48
    2300:	11 f4       	brne	.+4      	; 0x2306 <__stack+0x207>
    2302:	09 7e       	andi	r16, 0xE9	; 233
    2304:	09 c0       	rjmp	.+18     	; 0x2318 <__stack+0x219>
    2306:	02 ff       	sbrs	r16, 2
    2308:	06 c0       	rjmp	.+12     	; 0x2316 <__stack+0x217>
    230a:	1e 5f       	subi	r17, 0xFE	; 254
    230c:	05 c0       	rjmp	.+10     	; 0x2318 <__stack+0x219>
    230e:	86 78       	andi	r24, 0x86	; 134
    2310:	90 70       	andi	r25, 0x00	; 0
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	09 f0       	breq	.+2      	; 0x2318 <__stack+0x219>
    2316:	1f 5f       	subi	r17, 0xFF	; 255
    2318:	80 2e       	mov	r8, r16
    231a:	99 24       	eor	r9, r9
    231c:	03 fd       	sbrc	r16, 3
    231e:	11 c0       	rjmp	.+34     	; 0x2342 <__stack+0x243>
    2320:	00 ff       	sbrs	r16, 0
    2322:	0c c0       	rjmp	.+24     	; 0x233c <__stack+0x23d>
    2324:	fd 2c       	mov	r15, r13
    2326:	1e 15       	cp	r17, r14
    2328:	48 f4       	brcc	.+18     	; 0x233c <__stack+0x23d>
    232a:	fe 0c       	add	r15, r14
    232c:	f1 1a       	sub	r15, r17
    232e:	1e 2d       	mov	r17, r14
    2330:	05 c0       	rjmp	.+10     	; 0x233c <__stack+0x23d>
    2332:	80 e2       	ldi	r24, 0x20	; 32
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	b3 01       	movw	r22, r6
    2338:	78 d0       	rcall	.+240    	; 0x242a <fputc>
    233a:	1f 5f       	subi	r17, 0xFF	; 255
    233c:	1e 15       	cp	r17, r14
    233e:	c8 f3       	brcs	.-14     	; 0x2332 <__stack+0x233>
    2340:	04 c0       	rjmp	.+8      	; 0x234a <__stack+0x24b>
    2342:	1e 15       	cp	r17, r14
    2344:	10 f4       	brcc	.+4      	; 0x234a <__stack+0x24b>
    2346:	e1 1a       	sub	r14, r17
    2348:	01 c0       	rjmp	.+2      	; 0x234c <__stack+0x24d>
    234a:	ee 24       	eor	r14, r14
    234c:	84 fe       	sbrs	r8, 4
    234e:	0e c0       	rjmp	.+28     	; 0x236c <__stack+0x26d>
    2350:	80 e3       	ldi	r24, 0x30	; 48
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	b3 01       	movw	r22, r6
    2356:	69 d0       	rcall	.+210    	; 0x242a <fputc>
    2358:	82 fe       	sbrs	r8, 2
    235a:	1d c0       	rjmp	.+58     	; 0x2396 <__stack+0x297>
    235c:	81 fe       	sbrs	r8, 1
    235e:	03 c0       	rjmp	.+6      	; 0x2366 <__stack+0x267>
    2360:	88 e5       	ldi	r24, 0x58	; 88
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	10 c0       	rjmp	.+32     	; 0x2386 <__stack+0x287>
    2366:	88 e7       	ldi	r24, 0x78	; 120
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	0d c0       	rjmp	.+26     	; 0x2386 <__stack+0x287>
    236c:	c4 01       	movw	r24, r8
    236e:	86 78       	andi	r24, 0x86	; 134
    2370:	90 70       	andi	r25, 0x00	; 0
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	81 f0       	breq	.+32     	; 0x2396 <__stack+0x297>
    2376:	81 fc       	sbrc	r8, 1
    2378:	02 c0       	rjmp	.+4      	; 0x237e <__stack+0x27f>
    237a:	80 e2       	ldi	r24, 0x20	; 32
    237c:	01 c0       	rjmp	.+2      	; 0x2380 <__stack+0x281>
    237e:	8b e2       	ldi	r24, 0x2B	; 43
    2380:	07 fd       	sbrc	r16, 7
    2382:	8d e2       	ldi	r24, 0x2D	; 45
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	b3 01       	movw	r22, r6
    2388:	50 d0       	rcall	.+160    	; 0x242a <fputc>
    238a:	05 c0       	rjmp	.+10     	; 0x2396 <__stack+0x297>
    238c:	80 e3       	ldi	r24, 0x30	; 48
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	b3 01       	movw	r22, r6
    2392:	4b d0       	rcall	.+150    	; 0x242a <fputc>
    2394:	fa 94       	dec	r15
    2396:	df 14       	cp	r13, r15
    2398:	c8 f3       	brcs	.-14     	; 0x238c <__stack+0x28d>
    239a:	da 94       	dec	r13
    239c:	f2 01       	movw	r30, r4
    239e:	ed 0d       	add	r30, r13
    23a0:	f1 1d       	adc	r31, r1
    23a2:	80 81       	ld	r24, Z
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	b3 01       	movw	r22, r6
    23a8:	40 d0       	rcall	.+128    	; 0x242a <fputc>
    23aa:	dd 20       	and	r13, r13
    23ac:	b1 f7       	brne	.-20     	; 0x239a <__stack+0x29b>
    23ae:	05 c0       	rjmp	.+10     	; 0x23ba <__stack+0x2bb>
    23b0:	80 e2       	ldi	r24, 0x20	; 32
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	b3 01       	movw	r22, r6
    23b6:	39 d0       	rcall	.+114    	; 0x242a <fputc>
    23b8:	ea 94       	dec	r14
    23ba:	ee 20       	and	r14, r14
    23bc:	c9 f7       	brne	.-14     	; 0x23b0 <__stack+0x2b1>
    23be:	4d ce       	rjmp	.-870    	; 0x205a <vfprintf+0x50>
    23c0:	f3 01       	movw	r30, r6
    23c2:	86 81       	ldd	r24, Z+6	; 0x06
    23c4:	97 81       	ldd	r25, Z+7	; 0x07
    23c6:	02 c0       	rjmp	.+4      	; 0x23cc <__stack+0x2cd>
    23c8:	8f ef       	ldi	r24, 0xFF	; 255
    23ca:	9f ef       	ldi	r25, 0xFF	; 255
    23cc:	2d 96       	adiw	r28, 0x0d	; 13
    23ce:	0f b6       	in	r0, 0x3f	; 63
    23d0:	f8 94       	cli
    23d2:	de bf       	out	0x3e, r29	; 62
    23d4:	0f be       	out	0x3f, r0	; 63
    23d6:	cd bf       	out	0x3d, r28	; 61
    23d8:	df 91       	pop	r29
    23da:	cf 91       	pop	r28
    23dc:	1f 91       	pop	r17
    23de:	0f 91       	pop	r16
    23e0:	ff 90       	pop	r15
    23e2:	ef 90       	pop	r14
    23e4:	df 90       	pop	r13
    23e6:	cf 90       	pop	r12
    23e8:	bf 90       	pop	r11
    23ea:	af 90       	pop	r10
    23ec:	9f 90       	pop	r9
    23ee:	8f 90       	pop	r8
    23f0:	7f 90       	pop	r7
    23f2:	6f 90       	pop	r6
    23f4:	5f 90       	pop	r5
    23f6:	4f 90       	pop	r4
    23f8:	3f 90       	pop	r3
    23fa:	2f 90       	pop	r2
    23fc:	08 95       	ret

000023fe <strnlen_P>:
    23fe:	fc 01       	movw	r30, r24
    2400:	05 90       	lpm	r0, Z+
    2402:	61 50       	subi	r22, 0x01	; 1
    2404:	70 40       	sbci	r23, 0x00	; 0
    2406:	01 10       	cpse	r0, r1
    2408:	d8 f7       	brcc	.-10     	; 0x2400 <strnlen_P+0x2>
    240a:	80 95       	com	r24
    240c:	90 95       	com	r25
    240e:	8e 0f       	add	r24, r30
    2410:	9f 1f       	adc	r25, r31
    2412:	08 95       	ret

00002414 <strnlen>:
    2414:	fc 01       	movw	r30, r24
    2416:	61 50       	subi	r22, 0x01	; 1
    2418:	70 40       	sbci	r23, 0x00	; 0
    241a:	01 90       	ld	r0, Z+
    241c:	01 10       	cpse	r0, r1
    241e:	d8 f7       	brcc	.-10     	; 0x2416 <strnlen+0x2>
    2420:	80 95       	com	r24
    2422:	90 95       	com	r25
    2424:	8e 0f       	add	r24, r30
    2426:	9f 1f       	adc	r25, r31
    2428:	08 95       	ret

0000242a <fputc>:
    242a:	0f 93       	push	r16
    242c:	1f 93       	push	r17
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	8c 01       	movw	r16, r24
    2434:	eb 01       	movw	r28, r22
    2436:	8b 81       	ldd	r24, Y+3	; 0x03
    2438:	81 ff       	sbrs	r24, 1
    243a:	1b c0       	rjmp	.+54     	; 0x2472 <fputc+0x48>
    243c:	82 ff       	sbrs	r24, 2
    243e:	0d c0       	rjmp	.+26     	; 0x245a <fputc+0x30>
    2440:	2e 81       	ldd	r18, Y+6	; 0x06
    2442:	3f 81       	ldd	r19, Y+7	; 0x07
    2444:	8c 81       	ldd	r24, Y+4	; 0x04
    2446:	9d 81       	ldd	r25, Y+5	; 0x05
    2448:	28 17       	cp	r18, r24
    244a:	39 07       	cpc	r19, r25
    244c:	64 f4       	brge	.+24     	; 0x2466 <fputc+0x3c>
    244e:	e8 81       	ld	r30, Y
    2450:	f9 81       	ldd	r31, Y+1	; 0x01
    2452:	01 93       	st	Z+, r16
    2454:	f9 83       	std	Y+1, r31	; 0x01
    2456:	e8 83       	st	Y, r30
    2458:	06 c0       	rjmp	.+12     	; 0x2466 <fputc+0x3c>
    245a:	e8 85       	ldd	r30, Y+8	; 0x08
    245c:	f9 85       	ldd	r31, Y+9	; 0x09
    245e:	80 2f       	mov	r24, r16
    2460:	09 95       	icall
    2462:	00 97       	sbiw	r24, 0x00	; 0
    2464:	31 f4       	brne	.+12     	; 0x2472 <fputc+0x48>
    2466:	8e 81       	ldd	r24, Y+6	; 0x06
    2468:	9f 81       	ldd	r25, Y+7	; 0x07
    246a:	01 96       	adiw	r24, 0x01	; 1
    246c:	9f 83       	std	Y+7, r25	; 0x07
    246e:	8e 83       	std	Y+6, r24	; 0x06
    2470:	02 c0       	rjmp	.+4      	; 0x2476 <fputc+0x4c>
    2472:	0f ef       	ldi	r16, 0xFF	; 255
    2474:	1f ef       	ldi	r17, 0xFF	; 255
    2476:	c8 01       	movw	r24, r16
    2478:	df 91       	pop	r29
    247a:	cf 91       	pop	r28
    247c:	1f 91       	pop	r17
    247e:	0f 91       	pop	r16
    2480:	08 95       	ret

00002482 <__ultoa_invert>:
    2482:	fa 01       	movw	r30, r20
    2484:	aa 27       	eor	r26, r26
    2486:	28 30       	cpi	r18, 0x08	; 8
    2488:	51 f1       	breq	.+84     	; 0x24de <__ultoa_invert+0x5c>
    248a:	20 31       	cpi	r18, 0x10	; 16
    248c:	81 f1       	breq	.+96     	; 0x24ee <__ultoa_invert+0x6c>
    248e:	e8 94       	clt
    2490:	6f 93       	push	r22
    2492:	6e 7f       	andi	r22, 0xFE	; 254
    2494:	6e 5f       	subi	r22, 0xFE	; 254
    2496:	7f 4f       	sbci	r23, 0xFF	; 255
    2498:	8f 4f       	sbci	r24, 0xFF	; 255
    249a:	9f 4f       	sbci	r25, 0xFF	; 255
    249c:	af 4f       	sbci	r26, 0xFF	; 255
    249e:	b1 e0       	ldi	r27, 0x01	; 1
    24a0:	3e d0       	rcall	.+124    	; 0x251e <__ultoa_invert+0x9c>
    24a2:	b4 e0       	ldi	r27, 0x04	; 4
    24a4:	3c d0       	rcall	.+120    	; 0x251e <__ultoa_invert+0x9c>
    24a6:	67 0f       	add	r22, r23
    24a8:	78 1f       	adc	r23, r24
    24aa:	89 1f       	adc	r24, r25
    24ac:	9a 1f       	adc	r25, r26
    24ae:	a1 1d       	adc	r26, r1
    24b0:	68 0f       	add	r22, r24
    24b2:	79 1f       	adc	r23, r25
    24b4:	8a 1f       	adc	r24, r26
    24b6:	91 1d       	adc	r25, r1
    24b8:	a1 1d       	adc	r26, r1
    24ba:	6a 0f       	add	r22, r26
    24bc:	71 1d       	adc	r23, r1
    24be:	81 1d       	adc	r24, r1
    24c0:	91 1d       	adc	r25, r1
    24c2:	a1 1d       	adc	r26, r1
    24c4:	20 d0       	rcall	.+64     	; 0x2506 <__ultoa_invert+0x84>
    24c6:	09 f4       	brne	.+2      	; 0x24ca <__ultoa_invert+0x48>
    24c8:	68 94       	set
    24ca:	3f 91       	pop	r19
    24cc:	2a e0       	ldi	r18, 0x0A	; 10
    24ce:	26 9f       	mul	r18, r22
    24d0:	11 24       	eor	r1, r1
    24d2:	30 19       	sub	r19, r0
    24d4:	30 5d       	subi	r19, 0xD0	; 208
    24d6:	31 93       	st	Z+, r19
    24d8:	de f6       	brtc	.-74     	; 0x2490 <__ultoa_invert+0xe>
    24da:	cf 01       	movw	r24, r30
    24dc:	08 95       	ret
    24de:	46 2f       	mov	r20, r22
    24e0:	47 70       	andi	r20, 0x07	; 7
    24e2:	40 5d       	subi	r20, 0xD0	; 208
    24e4:	41 93       	st	Z+, r20
    24e6:	b3 e0       	ldi	r27, 0x03	; 3
    24e8:	0f d0       	rcall	.+30     	; 0x2508 <__ultoa_invert+0x86>
    24ea:	c9 f7       	brne	.-14     	; 0x24de <__ultoa_invert+0x5c>
    24ec:	f6 cf       	rjmp	.-20     	; 0x24da <__ultoa_invert+0x58>
    24ee:	46 2f       	mov	r20, r22
    24f0:	4f 70       	andi	r20, 0x0F	; 15
    24f2:	40 5d       	subi	r20, 0xD0	; 208
    24f4:	4a 33       	cpi	r20, 0x3A	; 58
    24f6:	18 f0       	brcs	.+6      	; 0x24fe <__ultoa_invert+0x7c>
    24f8:	49 5d       	subi	r20, 0xD9	; 217
    24fa:	31 fd       	sbrc	r19, 1
    24fc:	40 52       	subi	r20, 0x20	; 32
    24fe:	41 93       	st	Z+, r20
    2500:	02 d0       	rcall	.+4      	; 0x2506 <__ultoa_invert+0x84>
    2502:	a9 f7       	brne	.-22     	; 0x24ee <__ultoa_invert+0x6c>
    2504:	ea cf       	rjmp	.-44     	; 0x24da <__ultoa_invert+0x58>
    2506:	b4 e0       	ldi	r27, 0x04	; 4
    2508:	a6 95       	lsr	r26
    250a:	97 95       	ror	r25
    250c:	87 95       	ror	r24
    250e:	77 95       	ror	r23
    2510:	67 95       	ror	r22
    2512:	ba 95       	dec	r27
    2514:	c9 f7       	brne	.-14     	; 0x2508 <__ultoa_invert+0x86>
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	61 05       	cpc	r22, r1
    251a:	71 05       	cpc	r23, r1
    251c:	08 95       	ret
    251e:	9b 01       	movw	r18, r22
    2520:	ac 01       	movw	r20, r24
    2522:	0a 2e       	mov	r0, r26
    2524:	06 94       	lsr	r0
    2526:	57 95       	ror	r21
    2528:	47 95       	ror	r20
    252a:	37 95       	ror	r19
    252c:	27 95       	ror	r18
    252e:	ba 95       	dec	r27
    2530:	c9 f7       	brne	.-14     	; 0x2524 <__ultoa_invert+0xa2>
    2532:	62 0f       	add	r22, r18
    2534:	73 1f       	adc	r23, r19
    2536:	84 1f       	adc	r24, r20
    2538:	95 1f       	adc	r25, r21
    253a:	a0 1d       	adc	r26, r0
    253c:	08 95       	ret

0000253e <_exit>:
    253e:	f8 94       	cli

00002540 <__stop_program>:
    2540:	ff cf       	rjmp	.-2      	; 0x2540 <__stop_program>
