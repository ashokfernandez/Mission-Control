
MouseHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00001af2  00001b86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001af2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800142  00800142  00001bc8  2**0
                  ALLOC
  3 .stab         00000f90  00000000  00000000  00001bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000030d  00000000  00000000  00002b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000888  00000000  00000000  00002e68  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d9c7  00000000  00000000  000036f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033fd  00000000  00000000  000110b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005c57  00000000  00000000  000144b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001928  00000000  00000000  0001a10c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004f41  00000000  00000000  0001ba34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009693  00000000  00000000  00020975  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a20  00000000  00000000  0002a008  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1a c1       	rjmp	.+564    	; 0x236 <__ctors_end>
       2:	00 00       	nop
       4:	37 c1       	rjmp	.+622    	; 0x274 <__bad_interrupt>
       6:	00 00       	nop
       8:	35 c1       	rjmp	.+618    	; 0x274 <__bad_interrupt>
       a:	00 00       	nop
       c:	33 c1       	rjmp	.+614    	; 0x274 <__bad_interrupt>
       e:	00 00       	nop
      10:	31 c1       	rjmp	.+610    	; 0x274 <__bad_interrupt>
      12:	00 00       	nop
      14:	2f c1       	rjmp	.+606    	; 0x274 <__bad_interrupt>
      16:	00 00       	nop
      18:	2d c1       	rjmp	.+602    	; 0x274 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2b c1       	rjmp	.+598    	; 0x274 <__bad_interrupt>
      1e:	00 00       	nop
      20:	29 c1       	rjmp	.+594    	; 0x274 <__bad_interrupt>
      22:	00 00       	nop
      24:	27 c1       	rjmp	.+590    	; 0x274 <__bad_interrupt>
      26:	00 00       	nop
      28:	34 c6       	rjmp	.+3176   	; 0xc92 <__vector_10>
      2a:	00 00       	nop
      2c:	23 c1       	rjmp	.+582    	; 0x274 <__bad_interrupt>
      2e:	00 00       	nop
      30:	21 c1       	rjmp	.+578    	; 0x274 <__bad_interrupt>
      32:	00 00       	nop
      34:	1f c1       	rjmp	.+574    	; 0x274 <__bad_interrupt>
      36:	00 00       	nop
      38:	1d c1       	rjmp	.+570    	; 0x274 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1b c1       	rjmp	.+566    	; 0x274 <__bad_interrupt>
      3e:	00 00       	nop
      40:	19 c1       	rjmp	.+562    	; 0x274 <__bad_interrupt>
      42:	00 00       	nop
      44:	17 c1       	rjmp	.+558    	; 0x274 <__bad_interrupt>
      46:	00 00       	nop
      48:	15 c1       	rjmp	.+554    	; 0x274 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	13 c1       	rjmp	.+550    	; 0x274 <__bad_interrupt>
      4e:	00 00       	nop
      50:	11 c1       	rjmp	.+546    	; 0x274 <__bad_interrupt>
      52:	00 00       	nop
      54:	0f c1       	rjmp	.+542    	; 0x274 <__bad_interrupt>
      56:	00 00       	nop
      58:	0d c1       	rjmp	.+538    	; 0x274 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0b c1       	rjmp	.+534    	; 0x274 <__bad_interrupt>
      5e:	00 00       	nop
      60:	09 c1       	rjmp	.+530    	; 0x274 <__bad_interrupt>
      62:	00 00       	nop
      64:	07 c1       	rjmp	.+526    	; 0x274 <__bad_interrupt>
      66:	00 00       	nop
      68:	05 c1       	rjmp	.+522    	; 0x274 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	03 c1       	rjmp	.+518    	; 0x274 <__bad_interrupt>
      6e:	00 00       	nop
      70:	01 c1       	rjmp	.+514    	; 0x274 <__bad_interrupt>
      72:	00 00       	nop
      74:	ff c0       	rjmp	.+510    	; 0x274 <__bad_interrupt>
      76:	00 00       	nop
      78:	fd c0       	rjmp	.+506    	; 0x274 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fb c0       	rjmp	.+502    	; 0x274 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f9 c0       	rjmp	.+498    	; 0x274 <__bad_interrupt>
      82:	00 00       	nop
      84:	f7 c0       	rjmp	.+494    	; 0x274 <__bad_interrupt>
      86:	00 00       	nop
      88:	f5 c0       	rjmp	.+490    	; 0x274 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f3 c0       	rjmp	.+486    	; 0x274 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f1 c0       	rjmp	.+482    	; 0x274 <__bad_interrupt>
      92:	00 00       	nop
      94:	ef c0       	rjmp	.+478    	; 0x274 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4262>:
      98:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 6f 73 74 20     .[36mMouse Host 
      a8:	44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b     Demo running....
      b8:	5b 33 37 6d 00                                      [37m.

000000bd <__c.4273>:
      bd:	64 58 3a 25 32 64 20 64 59 3a 25 32 64 20 42 75     dX:%2d dY:%2d Bu
      cd:	74 74 6f 6e 3a 25 64 0d 0a 00                       tton:%d...

000000d7 <__c.4278>:
      d7:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
      e7:	0d 0a 00                                            ...

000000ea <__c.4283>:
      ea:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
      fa:	68 65 64 2e 0d 0a 00                                hed....

00000101 <__c.4290>:
     101:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     111:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     121:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

0000012e <__c.4292>:
     12e:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     13e:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4d 6f 75 73     Not a Valid Mous
     14e:	65 2e 0d 0a 00                                      e....

00000153 <__c.4294>:
     153:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     163:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     173:	6f 6e 2e 0d 0a 00                                   on....

00000179 <__c.4296>:
     179:	43 6f 75 6c 64 20 6e 6f 74 20 53 65 74 20 42 6f     Could not Set Bo
     189:	6f 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f 64 65     ot Protocol Mode
     199:	2e 0d 0a 00                                         ....

0000019d <__c.4298>:
     19d:	4d 6f 75 73 65 20 45 6e 75 6d 65 72 61 74 65 64     Mouse Enumerated
     1ad:	2e 0d 0a 00                                         ....

000001b1 <__c.4303>:
     1b1:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     1c1:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     1d1:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

000001e0 <__c.4310>:
     1e0:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     1f0:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     200:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     210:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     220:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     230:	1b 5b 33 37 6d 00                                   .[37m.

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d0 e2       	ldi	r29, 0x20	; 32
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61

00000242 <__do_copy_data>:
     242:	11 e0       	ldi	r17, 0x01	; 1
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b1 e0       	ldi	r27, 0x01	; 1
     248:	e2 ef       	ldi	r30, 0xF2	; 242
     24a:	fa e1       	ldi	r31, 0x1A	; 26
     24c:	00 e0       	ldi	r16, 0x00	; 0
     24e:	0b bf       	out	0x3b, r16	; 59
     250:	02 c0       	rjmp	.+4      	; 0x256 <__do_copy_data+0x14>
     252:	07 90       	elpm	r0, Z+
     254:	0d 92       	st	X+, r0
     256:	a2 34       	cpi	r26, 0x42	; 66
     258:	b1 07       	cpc	r27, r17
     25a:	d9 f7       	brne	.-10     	; 0x252 <__do_copy_data+0x10>
     25c:	1b be       	out	0x3b, r1	; 59

0000025e <__do_clear_bss>:
     25e:	11 e0       	ldi	r17, 0x01	; 1
     260:	a2 e4       	ldi	r26, 0x42	; 66
     262:	b1 e0       	ldi	r27, 0x01	; 1
     264:	01 c0       	rjmp	.+2      	; 0x268 <.do_clear_bss_start>

00000266 <.do_clear_bss_loop>:
     266:	1d 92       	st	X+, r1

00000268 <.do_clear_bss_start>:
     268:	a4 36       	cpi	r26, 0x64	; 100
     26a:	b1 07       	cpc	r27, r17
     26c:	e1 f7       	brne	.-8      	; 0x266 <.do_clear_bss_loop>
     26e:	97 d0       	rcall	.+302    	; 0x39e <main>
     270:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <_exit>

00000274 <__bad_interrupt>:
     274:	c5 ce       	rjmp	.-630    	; 0x0 <__vectors>

00000276 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     276:	9b b1       	in	r25, 0x0b	; 11
     278:	9f 70       	andi	r25, 0x0F	; 15
     27a:	98 2b       	or	r25, r24
     27c:	9b b9       	out	0x0b, r25	; 11
			}
     27e:	08 95       	ret

00000280 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     280:	84 b7       	in	r24, 0x34	; 52
     282:	87 7f       	andi	r24, 0xF7	; 247
     284:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     286:	28 e1       	ldi	r18, 0x18	; 24
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	f8 94       	cli
     28c:	20 93 60 00 	sts	0x0060, r18
     290:	10 92 60 00 	sts	0x0060, r1
     294:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	80 e8       	ldi	r24, 0x80	; 128
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	80 93 61 00 	sts	0x0061, r24
     2a2:	90 93 61 00 	sts	0x0061, r25
     2a6:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2a8:	83 e3       	ldi	r24, 0x33	; 51
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	90 93 cd 00 	sts	0x00CD, r25
     2b0:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2b4:	86 e0       	ldi	r24, 0x06	; 6
     2b6:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2ba:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2be:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     2c2:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2c4:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2c6:	8a b1       	in	r24, 0x0a	; 10
     2c8:	80 6f       	ori	r24, 0xF0	; 240
     2ca:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2cc:	8b b1       	in	r24, 0x0b	; 11
     2ce:	8f 70       	andi	r24, 0x0F	; 15
     2d0:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     2d2:	c4 d4       	rcall	.+2440   	; 0xc5c <USB_Init>
     2d4:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0c 94 72 0a 	jmp	0x14e4	; 0x14e4 <Serial_CreateStream>

000002dc <MouseHost_Task>:
     2dc:	cf 93       	push	r28
}
     2de:	df 93       	push	r29

/** Task to manage an enumerated USB mouse once connected, to display movement
 *  data as it is received.
 */
void MouseHost_Task(void)
{
     2e0:	00 d0       	rcall	.+0      	; 0x2e2 <MouseHost_Task+0x6>
     2e2:	0f 92       	push	r0
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     2e8:	80 91 4f 01 	lds	r24, 0x014F
     2ec:	8b 30       	cpi	r24, 0x0B	; 11
     2ee:	09 f0       	breq	.+2      	; 0x2f2 <MouseHost_Task+0x16>
     2f0:	50 c0       	rjmp	.+160    	; 0x392 <MouseHost_Task+0xb6>
	  return;

	if (HID_Host_IsReportReceived(&Mouse_HID_Interface))
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	91 e0       	ldi	r25, 0x01	; 1
     2f6:	0e 94 10 0a 	call	0x1420	; 0x1420 <HID_Host_IsReportReceived>
     2fa:	88 23       	and	r24, r24
     2fc:	09 f4       	brne	.+2      	; 0x300 <MouseHost_Task+0x24>
     2fe:	49 c0       	rjmp	.+146    	; 0x392 <MouseHost_Task+0xb6>
	{
		uint8_t LEDMask = LEDS_NO_LEDS;

		USB_MouseReport_Data_t MouseReport;
		HID_Host_ReceiveReport(&Mouse_HID_Interface, &MouseReport);
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	be 01       	movw	r22, r28
     306:	6f 5f       	subi	r22, 0xFF	; 255
     308:	7f 4f       	sbci	r23, 0xFF	; 255
     30a:	0e 94 ca 09 	call	0x1394	; 0x1394 <HID_Host_ReceiveReport>

		printf_P(PSTR("dX:%2d dY:%2d Button:%d\r\n"), MouseReport.X,
     30e:	2d b7       	in	r18, 0x3d	; 61
     310:	3e b7       	in	r19, 0x3e	; 62
     312:	28 50       	subi	r18, 0x08	; 8
     314:	30 40       	sbci	r19, 0x00	; 0
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	f8 94       	cli
     31a:	3e bf       	out	0x3e, r19	; 62
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	2d bf       	out	0x3d, r18	; 61
     320:	ed b7       	in	r30, 0x3d	; 61
     322:	fe b7       	in	r31, 0x3e	; 62
     324:	31 96       	adiw	r30, 0x01	; 1
     326:	8d eb       	ldi	r24, 0xBD	; 189
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	ad b7       	in	r26, 0x3d	; 61
     32c:	be b7       	in	r27, 0x3e	; 62
     32e:	12 96       	adiw	r26, 0x02	; 2
     330:	9c 93       	st	X, r25
     332:	8e 93       	st	-X, r24
     334:	11 97       	sbiw	r26, 0x01	; 1
     336:	8a 81       	ldd	r24, Y+2	; 0x02
     338:	99 27       	eor	r25, r25
     33a:	87 fd       	sbrc	r24, 7
     33c:	90 95       	com	r25
     33e:	93 83       	std	Z+3, r25	; 0x03
     340:	82 83       	std	Z+2, r24	; 0x02
     342:	8b 81       	ldd	r24, Y+3	; 0x03
     344:	99 27       	eor	r25, r25
     346:	87 fd       	sbrc	r24, 7
     348:	90 95       	com	r25
     34a:	95 83       	std	Z+5, r25	; 0x05
     34c:	84 83       	std	Z+4, r24	; 0x04
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	86 83       	std	Z+6, r24	; 0x06
     352:	17 82       	std	Z+7, r1	; 0x07
     354:	0e 94 8f 0a 	call	0x151e	; 0x151e <printf_P>
		                                              MouseReport.Y,
		                                              MouseReport.Button);
		if (MouseReport.X > 0)
     358:	8a 81       	ldd	r24, Y+2	; 0x02
     35a:	2d b7       	in	r18, 0x3d	; 61
     35c:	3e b7       	in	r19, 0x3e	; 62
     35e:	28 5f       	subi	r18, 0xF8	; 248
     360:	3f 4f       	sbci	r19, 0xFF	; 255
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	f8 94       	cli
     366:	3e bf       	out	0x3e, r19	; 62
     368:	0f be       	out	0x3f, r0	; 63
     36a:	2d bf       	out	0x3d, r18	; 61
     36c:	18 16       	cp	r1, r24
     36e:	1c f0       	brlt	.+6      	; 0x376 <MouseHost_Task+0x9a>
		  LEDMask |= LEDS_LED1;
		else if (MouseReport.X < 0)
     370:	88 23       	and	r24, r24
     372:	21 f0       	breq	.+8      	; 0x37c <MouseHost_Task+0xa0>
     374:	02 c0       	rjmp	.+4      	; 0x37a <MouseHost_Task+0x9e>

		printf_P(PSTR("dX:%2d dY:%2d Button:%d\r\n"), MouseReport.X,
		                                              MouseReport.Y,
		                                              MouseReport.Button);
		if (MouseReport.X > 0)
		  LEDMask |= LEDS_LED1;
     376:	80 e1       	ldi	r24, 0x10	; 16
     378:	01 c0       	rjmp	.+2      	; 0x37c <MouseHost_Task+0xa0>
		else if (MouseReport.X < 0)
		  LEDMask |= LEDS_LED2;
     37a:	80 e2       	ldi	r24, 0x20	; 32

		if (MouseReport.Y > 0)
     37c:	9b 81       	ldd	r25, Y+3	; 0x03
     37e:	19 16       	cp	r1, r25
     380:	14 f4       	brge	.+4      	; 0x386 <MouseHost_Task+0xaa>
		  LEDMask |= LEDS_LED3;
     382:	80 68       	ori	r24, 0x80	; 128
     384:	02 c0       	rjmp	.+4      	; 0x38a <MouseHost_Task+0xae>
		else if (MouseReport.Y < 0)
     386:	91 11       	cpse	r25, r1
		  LEDMask |= LEDS_LED4;
     388:	80 64       	ori	r24, 0x40	; 64

		if (MouseReport.Button)
     38a:	99 81       	ldd	r25, Y+1	; 0x01
     38c:	91 11       	cpse	r25, r1
		  LEDMask  = LEDS_ALL_LEDS;
     38e:	80 ef       	ldi	r24, 0xF0	; 240

		LEDs_SetAllLEDs(LEDMask);
     390:	72 df       	rcall	.-284    	; 0x276 <LEDs_SetAllLEDs>
     392:	0f 90       	pop	r0
	}
}
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	08 95       	ret

0000039e <main>:
     39e:	70 df       	rcall	.-288    	; 0x280 <SetupHardware>
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     3a0:	88 e9       	ldi	r24, 0x98	; 152

	puts_P(PSTR(ESC_FG_CYAN "Mouse Host Demo running.\r\n" ESC_FG_WHITE));
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 ae 0a 	call	0x155c	; 0x155c <puts_P>
     3a8:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3aa:	65 df       	rcall	.-310    	; 0x276 <LEDs_SetAllLEDs>
     3ac:	78 94       	sei
     3ae:	96 df       	rcall	.-212    	; 0x2dc <MouseHost_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     3b0:	ed d6       	rcall	.+3546   	; 0x118c <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		MouseHost_Task();
     3b2:	fd cf       	rjmp	.-6      	; 0x3ae <main+0x10>

000003b4 <EVENT_USB_Host_DeviceAttached>:
     3b4:	87 ed       	ldi	r24, 0xD7	; 215

		HID_Host_USBTask(&Mouse_HID_Interface);
		USB_USBTask();
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 ae 0a 	call	0x155c	; 0x155c <puts_P>
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     3bc:	80 ea       	ldi	r24, 0xA0	; 160
     3be:	5b cf       	rjmp	.-330    	; 0x276 <LEDs_SetAllLEDs>

000003c0 <EVENT_USB_Host_DeviceUnattached>:
     3c0:	8a ee       	ldi	r24, 0xEA	; 234
}
     3c2:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     3c4:	0e 94 ae 0a 	call	0x155c	; 0x155c <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3c8:	80 e1       	ldi	r24, 0x10	; 16
     3ca:	55 cf       	rjmp	.-342    	; 0x276 <LEDs_SetAllLEDs>

000003cc <EVENT_USB_Host_DeviceEnumerationComplete>:
     3cc:	cf 93       	push	r28
}
     3ce:	df 93       	push	r29

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
     3d4:	c2 50       	subi	r28, 0x02	; 2
     3d6:	d2 40       	sbci	r29, 0x02	; 2
     3d8:	0f b6       	in	r0, 0x3f	; 63
     3da:	f8 94       	cli
     3dc:	de bf       	out	0x3e, r29	; 62
     3de:	0f be       	out	0x3f, r0	; 63
     3e0:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     3e2:	80 ea       	ldi	r24, 0xA0	; 160
     3e4:	48 df       	rcall	.-368    	; 0x276 <LEDs_SetAllLEDs>
     3e6:	81 e0       	ldi	r24, 0x01	; 1

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     3e8:	be 01       	movw	r22, r28
     3ea:	6f 5f       	subi	r22, 0xFF	; 255
     3ec:	7f 4f       	sbci	r23, 0xFF	; 255
     3ee:	ae 01       	movw	r20, r28
     3f0:	4d 5f       	subi	r20, 0xFD	; 253
     3f2:	5f 4f       	sbci	r21, 0xFF	; 255
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	32 e0       	ldi	r19, 0x02	; 2
     3f8:	df d4       	rcall	.+2494   	; 0xdb8 <USB_Host_GetDeviceConfigDescriptor>
     3fa:	88 23       	and	r24, r24
     3fc:	19 f0       	breq	.+6      	; 0x404 <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	91 e0       	ldi	r25, 0x01	; 1
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     402:	13 c0       	rjmp	.+38     	; 0x42a <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
     404:	69 81       	ldd	r22, Y+1	; 0x01
     406:	7a 81       	ldd	r23, Y+2	; 0x02
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Mouse_HID_Interface,
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	ae 01       	movw	r20, r28
     40e:	4d 5f       	subi	r20, 0xFD	; 253
     410:	5f 4f       	sbci	r21, 0xFF	; 255
     412:	f1 d6       	rcall	.+3554   	; 0x11f6 <HID_Host_ConfigurePipes>
     414:	88 23       	and	r24, r24
     416:	19 f0       	breq	.+6      	; 0x41e <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
     418:	8e e2       	ldi	r24, 0x2E	; 46
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	06 c0       	rjmp	.+12     	; 0x42a <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Mouse.\r\n"));
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	90 d6       	rcall	.+3360   	; 0x1142 <USB_Host_SetDeviceConfiguration>
     422:	88 23       	and	r24, r24
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     424:	31 f0       	breq	.+12     	; 0x432 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
     426:	83 e5       	ldi	r24, 0x53	; 83
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	0e 94 ae 0a 	call	0x155c	; 0x155c <puts_P>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     42e:	80 e9       	ldi	r24, 0x90	; 144
     430:	14 c0       	rjmp	.+40     	; 0x45a <EVENT_USB_Host_DeviceEnumerationComplete+0x8e>
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     436:	0e 94 2e 0a 	call	0x145c	; 0x145c <HID_Host_SetBootProtocol>
		return;
	}

	if (HID_Host_SetBootProtocol(&Mouse_HID_Interface) != 0)
     43a:	88 23       	and	r24, r24
     43c:	49 f0       	breq	.+18     	; 0x450 <EVENT_USB_Host_DeviceEnumerationComplete+0x84>
     43e:	89 e7       	ldi	r24, 0x79	; 121
     440:	91 e0       	ldi	r25, 0x01	; 1
     442:	0e 94 ae 0a 	call	0x155c	; 0x155c <puts_P>
	{
		puts_P(PSTR("Could not Set Boot Protocol Mode.\r\n"));
     446:	80 e9       	ldi	r24, 0x90	; 144
     448:	16 df       	rcall	.-468    	; 0x276 <LEDs_SetAllLEDs>
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	7a d6       	rcall	.+3316   	; 0x1142 <USB_Host_SetDeviceConfiguration>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     44e:	06 c0       	rjmp	.+12     	; 0x45c <EVENT_USB_Host_DeviceEnumerationComplete+0x90>
     450:	8d e9       	ldi	r24, 0x9D	; 157
     452:	91 e0       	ldi	r25, 0x01	; 1
		USB_Host_SetDeviceConfiguration(0);
     454:	0e 94 ae 0a 	call	0x155c	; 0x155c <puts_P>
     458:	80 e6       	ldi	r24, 0x60	; 96
		return;
     45a:	0d df       	rcall	.-486    	; 0x276 <LEDs_SetAllLEDs>
	}

	puts_P(PSTR("Mouse Enumerated.\r\n"));
     45c:	ce 5f       	subi	r28, 0xFE	; 254
     45e:	dd 4f       	sbci	r29, 0xFD	; 253
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	f8 94       	cli
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     464:	de bf       	out	0x3e, r29	; 62
     466:	0f be       	out	0x3f, r0	; 63
     468:	cd bf       	out	0x3d, r28	; 61
}
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	08 95       	ret

00000470 <EVENT_USB_Host_HostError>:
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	0f 92       	push	r0
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	89 83       	std	Y+1, r24	; 0x01
     47c:	87 d3       	rcall	.+1806   	; 0xb8c <USB_Disable>

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();
     47e:	00 d0       	rcall	.+0      	; 0x480 <EVENT_USB_Host_HostError+0x10>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     480:	00 d0       	rcall	.+0      	; 0x482 <EVENT_USB_Host_HostError+0x12>
     482:	ed b7       	in	r30, 0x3d	; 61
     484:	fe b7       	in	r31, 0x3e	; 62
     486:	31 96       	adiw	r30, 0x01	; 1
     488:	21 eb       	ldi	r18, 0xB1	; 177
     48a:	31 e0       	ldi	r19, 0x01	; 1
     48c:	ad b7       	in	r26, 0x3d	; 61
     48e:	be b7       	in	r27, 0x3e	; 62
     490:	12 96       	adiw	r26, 0x02	; 2
     492:	3c 93       	st	X, r19
     494:	2e 93       	st	-X, r18
     496:	11 97       	sbiw	r26, 0x01	; 1
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	82 83       	std	Z+2, r24	; 0x02
     49c:	13 82       	std	Z+3, r1	; 0x03
     49e:	0e 94 8f 0a 	call	0x151e	; 0x151e <printf_P>
     4a2:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	80 e9       	ldi	r24, 0x90	; 144
     4ac:	e4 de       	rcall	.-568    	; 0x276 <LEDs_SetAllLEDs>
     4ae:	ff cf       	rjmp	.-2      	; 0x4ae <EVENT_USB_Host_HostError+0x3e>

000004b0 <EVENT_USB_Host_DeviceEnumerationFailed>:
     4b0:	90 91 4f 01 	lds	r25, 0x014F
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4b4:	2d b7       	in	r18, 0x3d	; 61
     4b6:	3e b7       	in	r19, 0x3e	; 62
     4b8:	28 50       	subi	r18, 0x08	; 8
     4ba:	30 40       	sbci	r19, 0x00	; 0
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	f8 94       	cli
     4c0:	3e bf       	out	0x3e, r19	; 62
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	2d bf       	out	0x3d, r18	; 61
     4c6:	ed b7       	in	r30, 0x3d	; 61
     4c8:	fe b7       	in	r31, 0x3e	; 62
     4ca:	31 96       	adiw	r30, 0x01	; 1
     4cc:	20 ee       	ldi	r18, 0xE0	; 224
     4ce:	31 e0       	ldi	r19, 0x01	; 1
     4d0:	ad b7       	in	r26, 0x3d	; 61
     4d2:	be b7       	in	r27, 0x3e	; 62
     4d4:	12 96       	adiw	r26, 0x02	; 2
     4d6:	3c 93       	st	X, r19
     4d8:	2e 93       	st	-X, r18
     4da:	11 97       	sbiw	r26, 0x01	; 1
     4dc:	82 83       	std	Z+2, r24	; 0x02
     4de:	13 82       	std	Z+3, r1	; 0x03
     4e0:	64 83       	std	Z+4, r22	; 0x04
     4e2:	15 82       	std	Z+5, r1	; 0x05
     4e4:	96 83       	std	Z+6, r25	; 0x06
     4e6:	17 82       	std	Z+7, r1	; 0x07
     4e8:	0e 94 8f 0a 	call	0x151e	; 0x151e <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4ec:	2d b7       	in	r18, 0x3d	; 61
     4ee:	3e b7       	in	r19, 0x3e	; 62
     4f0:	28 5f       	subi	r18, 0xF8	; 248
     4f2:	3f 4f       	sbci	r19, 0xFF	; 255
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	f8 94       	cli
     4f8:	3e bf       	out	0x3e, r19	; 62
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	2d bf       	out	0x3d, r18	; 61
     4fe:	80 e9       	ldi	r24, 0x90	; 144
     500:	ba ce       	rjmp	.-652    	; 0x276 <LEDs_SetAllLEDs>

00000502 <USB_GetHIDReportSize>:
				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     502:	9c 01       	movw	r18, r24
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
				break;
     508:	50 e0       	ldi	r21, 0x00	; 0
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     50a:	44 0f       	add	r20, r20
     50c:	55 1f       	adc	r21, r21
     50e:	42 0f       	add	r20, r18
     510:	53 1f       	adc	r21, r19
     512:	fa 01       	movw	r30, r20
     514:	e8 0f       	add	r30, r24
     516:	f9 1f       	adc	r31, r25
     518:	ef 56       	subi	r30, 0x6F	; 111
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     51a:	fc 4f       	sbci	r31, 0xFC	; 252
     51c:	a0 81       	ld	r26, Z
					NewReportItem.CollectionPath = CurrCollectionPath;
     51e:	b1 81       	ldd	r27, Z+1	; 0x01
     520:	f9 01       	movw	r30, r18
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     522:	e8 0f       	add	r30, r24
     524:	f9 1f       	adc	r31, r25
     526:	e0 57       	subi	r30, 0x70	; 112
     528:	fc 4f       	sbci	r31, 0xFC	; 252
     52a:	70 81       	ld	r23, Z

					if (UsageListSize)
     52c:	76 17       	cp	r23, r22
     52e:	91 f4       	brne	.+36     	; 0x554 <USB_GetHIDReportSize+0x52>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     530:	cd 01       	movw	r24, r26
     532:	87 70       	andi	r24, 0x07	; 7
     534:	90 70       	andi	r25, 0x00	; 0
     536:	21 e0       	ldi	r18, 0x01	; 1
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	00 97       	sbiw	r24, 0x00	; 0

						for (uint8_t i = 0; i < UsageListSize; i++)
     53c:	11 f4       	brne	.+4      	; 0x542 <USB_GetHIDReportSize+0x40>
						  UsageList[i] = UsageList[i + 1];
     53e:	20 e0       	ldi	r18, 0x00	; 0
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	cd 01       	movw	r24, r26
     544:	e3 e0       	ldi	r30, 0x03	; 3

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     546:	96 95       	lsr	r25
     548:	87 95       	ror	r24
     54a:	ea 95       	dec	r30
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     54c:	e1 f7       	brne	.-8      	; 0x546 <USB_GetHIDReportSize+0x44>
     54e:	82 0f       	add	r24, r18
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     550:	93 1f       	adc	r25, r19
     552:	08 95       	ret
     554:	07 96       	adiw	r24, 0x07	; 7
     556:	86 34       	cpi	r24, 0x46	; 70
     558:	91 05       	cpc	r25, r1
     55a:	d9 f6       	brne	.-74     	; 0x512 <USB_GetHIDReportSize+0x10>
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	08 95       	ret

00000562 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     562:	80 91 9e 00 	lds	r24, 0x009E
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	81 70       	andi	r24, 0x01	; 1
     56a:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     56c:	20 91 a0 00 	lds	r18, 0x00A0
     570:	2d 7f       	andi	r18, 0xFD	; 253
     572:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     576:	20 91 9e 00 	lds	r18, 0x009E
     57a:	22 60       	ori	r18, 0x02	; 2
     57c:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     580:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     584:	21 fd       	sbrc	r18, 1
     586:	fc cf       	rjmp	.-8      	; 0x580 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     588:	20 91 9e 00 	lds	r18, 0x009E
     58c:	21 60       	ori	r18, 0x01	; 1
     58e:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     592:	10 92 45 01 	sts	0x0145, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     596:	20 91 a0 00 	lds	r18, 0x00A0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	20 72       	andi	r18, 0x20	; 32
     59e:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     5a0:	40 91 a0 00 	lds	r20, 0x00A0
     5a4:	4f 7d       	andi	r20, 0xDF	; 223
     5a6:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     5aa:	40 91 9f 00 	lds	r20, 0x009F
     5ae:	4f 7d       	andi	r20, 0xDF	; 223
     5b0:	40 93 9f 00 	sts	0x009F, r20
     5b4:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     5b6:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     5ba:	55 ff       	sbrs	r21, 5
     5bc:	0b c0       	rjmp	.+22     	; 0x5d4 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     5be:	40 91 9f 00 	lds	r20, 0x009F
     5c2:	4f 7d       	andi	r20, 0xDF	; 223
     5c4:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     5c8:	40 91 9f 00 	lds	r20, 0x009F
     5cc:	4d 7f       	andi	r20, 0xFD	; 253
     5ce:	40 93 9f 00 	sts	0x009F, r20
     5d2:	08 c0       	rjmp	.+16     	; 0x5e4 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5d4:	ef ec       	ldi	r30, 0xCF	; 207
     5d6:	f7 e0       	ldi	r31, 0x07	; 7
     5d8:	31 97       	sbiw	r30, 0x01	; 1
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <USB_Host_ResetDevice+0x76>
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <USB_Host_ResetDevice+0x7c>
     5de:	00 00       	nop
     5e0:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     5e2:	49 f7       	brne	.-46     	; 0x5b6 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     5e4:	21 15       	cp	r18, r1
     5e6:	31 05       	cpc	r19, r1
     5e8:	29 f0       	breq	.+10     	; 0x5f4 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     5ea:	20 91 a0 00 	lds	r18, 0x00A0
     5ee:	20 62       	ori	r18, 0x20	; 32
     5f0:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     5f4:	00 97       	sbiw	r24, 0x00	; 0
     5f6:	29 f4       	brne	.+10     	; 0x602 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     5f8:	80 91 9e 00 	lds	r24, 0x009E
     5fc:	8e 7f       	andi	r24, 0xFE	; 254
     5fe:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     602:	80 91 a0 00 	lds	r24, 0x00A0
     606:	82 60       	ori	r24, 0x02	; 2
     608:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     60c:	08 95       	ret

0000060e <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     60e:	40 91 9e 00 	lds	r20, 0x009E
     612:	50 e0       	ldi	r21, 0x00	; 0
     614:	41 70       	andi	r20, 0x01	; 1
     616:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     618:	20 91 a0 00 	lds	r18, 0x00A0
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	20 72       	andi	r18, 0x20	; 32
     620:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     622:	90 91 a0 00 	lds	r25, 0x00A0
     626:	9f 7d       	andi	r25, 0xDF	; 223
     628:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     62c:	90 91 9f 00 	lds	r25, 0x009F
     630:	9f 7d       	andi	r25, 0xDF	; 223
     632:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     636:	90 91 9e 00 	lds	r25, 0x009E
     63a:	91 60       	ori	r25, 0x01	; 1
     63c:	90 93 9e 00 	sts	0x009E, r25
     640:	26 c0       	rjmp	.+76     	; 0x68e <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     642:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     646:	95 ff       	sbrs	r25, 5
     648:	06 c0       	rjmp	.+12     	; 0x656 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     64a:	90 91 9f 00 	lds	r25, 0x009F
     64e:	9f 7d       	andi	r25, 0xDF	; 223
     650:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     654:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     656:	90 91 4f 01 	lds	r25, 0x014F
     65a:	91 30       	cpi	r25, 0x01	; 1
     65c:	d9 f0       	breq	.+54     	; 0x694 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     65e:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     662:	94 ff       	sbrs	r25, 4
     664:	09 c0       	rjmp	.+18     	; 0x678 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     666:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     66a:	80 91 a6 00 	lds	r24, 0x00A6
     66e:	8f 7e       	andi	r24, 0xEF	; 239
     670:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     674:	82 e0       	ldi	r24, 0x02	; 2

			break;
     676:	0f c0       	rjmp	.+30     	; 0x696 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     678:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     67c:	91 ff       	sbrs	r25, 1
     67e:	07 c0       	rjmp	.+14     	; 0x68e <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     680:	80 91 a6 00 	lds	r24, 0x00A6
     684:	8d 7f       	andi	r24, 0xFD	; 253
     686:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     68a:	83 e0       	ldi	r24, 0x03	; 3

			break;
     68c:	04 c0       	rjmp	.+8      	; 0x696 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     68e:	88 23       	and	r24, r24
     690:	c1 f6       	brne	.-80     	; 0x642 <USB_Host_WaitMS+0x34>
     692:	01 c0       	rjmp	.+2      	; 0x696 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     694:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     696:	41 15       	cp	r20, r1
     698:	51 05       	cpc	r21, r1
     69a:	29 f4       	brne	.+10     	; 0x6a6 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     69c:	90 91 9e 00 	lds	r25, 0x009E
     6a0:	9e 7f       	andi	r25, 0xFE	; 254
     6a2:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     6a6:	21 15       	cp	r18, r1
     6a8:	31 05       	cpc	r19, r1
     6aa:	29 f0       	breq	.+10     	; 0x6b6 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     6ac:	90 91 a0 00 	lds	r25, 0x00A0
     6b0:	90 62       	ori	r25, 0x20	; 32
     6b2:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     6b6:	08 95       	ret

000006b8 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62
     6c4:	28 97       	sbiw	r28, 0x08	; 8
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     6d0:	80 91 4f 01 	lds	r24, 0x014F
     6d4:	85 30       	cpi	r24, 0x05	; 5
     6d6:	09 f4       	brne	.+2      	; 0x6da <USB_Host_ProcessNextHostState+0x22>
     6d8:	99 c0       	rjmp	.+306    	; 0x80c <USB_Host_ProcessNextHostState+0x154>
     6da:	86 30       	cpi	r24, 0x06	; 6
     6dc:	68 f4       	brcc	.+26     	; 0x6f8 <USB_Host_ProcessNextHostState+0x40>
     6de:	82 30       	cpi	r24, 0x02	; 2
     6e0:	c1 f1       	breq	.+112    	; 0x752 <USB_Host_ProcessNextHostState+0x9a>
     6e2:	83 30       	cpi	r24, 0x03	; 3
     6e4:	18 f4       	brcc	.+6      	; 0x6ec <USB_Host_ProcessNextHostState+0x34>
     6e6:	88 23       	and	r24, r24
     6e8:	a1 f0       	breq	.+40     	; 0x712 <USB_Host_ProcessNextHostState+0x5a>
     6ea:	04 c1       	rjmp	.+520    	; 0x8f4 <USB_Host_ProcessNextHostState+0x23c>
     6ec:	83 30       	cpi	r24, 0x03	; 3
     6ee:	d9 f1       	breq	.+118    	; 0x766 <USB_Host_ProcessNextHostState+0xae>
     6f0:	84 30       	cpi	r24, 0x04	; 4
     6f2:	09 f0       	breq	.+2      	; 0x6f6 <USB_Host_ProcessNextHostState+0x3e>
     6f4:	ff c0       	rjmp	.+510    	; 0x8f4 <USB_Host_ProcessNextHostState+0x23c>
     6f6:	62 c0       	rjmp	.+196    	; 0x7bc <USB_Host_ProcessNextHostState+0x104>
     6f8:	87 30       	cpi	r24, 0x07	; 7
     6fa:	09 f4       	brne	.+2      	; 0x6fe <USB_Host_ProcessNextHostState+0x46>
     6fc:	9e c0       	rjmp	.+316    	; 0x83a <USB_Host_ProcessNextHostState+0x182>
     6fe:	87 30       	cpi	r24, 0x07	; 7
     700:	08 f4       	brcc	.+2      	; 0x704 <USB_Host_ProcessNextHostState+0x4c>
     702:	8f c0       	rjmp	.+286    	; 0x822 <USB_Host_ProcessNextHostState+0x16a>
     704:	88 30       	cpi	r24, 0x08	; 8
     706:	09 f4       	brne	.+2      	; 0x70a <USB_Host_ProcessNextHostState+0x52>
     708:	b8 c0       	rjmp	.+368    	; 0x87a <USB_Host_ProcessNextHostState+0x1c2>
     70a:	89 30       	cpi	r24, 0x09	; 9
     70c:	09 f0       	breq	.+2      	; 0x710 <USB_Host_ProcessNextHostState+0x58>
     70e:	f2 c0       	rjmp	.+484    	; 0x8f4 <USB_Host_ProcessNextHostState+0x23c>
     710:	d9 c0       	rjmp	.+434    	; 0x8c4 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     712:	00 91 42 01 	lds	r16, 0x0142
     716:	10 91 43 01 	lds	r17, 0x0143
     71a:	01 15       	cp	r16, r1
     71c:	11 05       	cpc	r17, r1
     71e:	09 f4       	brne	.+2      	; 0x722 <USB_Host_ProcessNextHostState+0x6a>
     720:	e9 c0       	rjmp	.+466    	; 0x8f4 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	74 df       	rcall	.-280    	; 0x60e <USB_Host_WaitMS>
     726:	68 2f       	mov	r22, r24
     728:	88 23       	and	r24, r24
     72a:	31 f0       	breq	.+12     	; 0x738 <USB_Host_ProcessNextHostState+0x80>
     72c:	80 91 44 01 	lds	r24, 0x0144
				{
					USB_HostState = PostWaitState;
     730:	80 93 4f 01 	sts	0x014F, r24
     734:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     736:	d2 c0       	rjmp	.+420    	; 0x8dc <USB_Host_ProcessNextHostState+0x224>
					break;
     738:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
     73a:	10 40       	sbci	r17, 0x00	; 0
     73c:	10 93 43 01 	sts	0x0143, r17
     740:	00 93 42 01 	sts	0x0142, r16
     744:	01 15       	cp	r16, r1
     746:	11 05       	cpc	r17, r1
     748:	09 f0       	breq	.+2      	; 0x74c <USB_Host_ProcessNextHostState+0x94>
     74a:	d4 c0       	rjmp	.+424    	; 0x8f4 <USB_Host_ProcessNextHostState+0x23c>
     74c:	80 91 44 01 	lds	r24, 0x0144
				  USB_HostState = PostWaitState;
     750:	07 c0       	rjmp	.+14     	; 0x760 <USB_Host_ProcessNextHostState+0xa8>
     752:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     754:	93 e0       	ldi	r25, 0x03	; 3
     756:	90 93 43 01 	sts	0x0143, r25
     75a:	80 93 42 01 	sts	0x0142, r24
     75e:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     760:	80 93 4f 01 	sts	0x014F, r24
     764:	c7 c0       	rjmp	.+398    	; 0x8f4 <USB_Host_ProcessNextHostState+0x23c>
			break;
     766:	80 91 42 01 	lds	r24, 0x0142
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     76a:	90 91 43 01 	lds	r25, 0x0143
     76e:	9c 01       	movw	r18, r24
     770:	21 50       	subi	r18, 0x01	; 1
     772:	30 40       	sbci	r19, 0x00	; 0
     774:	30 93 43 01 	sts	0x0143, r19
     778:	20 93 42 01 	sts	0x0142, r18
     77c:	00 97       	sbiw	r24, 0x00	; 0
     77e:	39 f0       	breq	.+14     	; 0x78e <USB_Host_ProcessNextHostState+0xd6>
     780:	8f ec       	ldi	r24, 0xCF	; 207
     782:	97 e0       	ldi	r25, 0x07	; 7
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	f1 f7       	brne	.-4      	; 0x784 <USB_Host_ProcessNextHostState+0xcc>
     788:	00 c0       	rjmp	.+0      	; 0x78a <USB_Host_ProcessNextHostState+0xd2>
     78a:	00 00       	nop
     78c:	b3 c0       	rjmp	.+358    	; 0x8f4 <USB_Host_ProcessNextHostState+0x23c>
     78e:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     790:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     794:	80 61       	ori	r24, 0x10	; 16
     796:	80 93 d8 00 	sts	0x00D8, r24
     79a:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     79e:	8b 7f       	andi	r24, 0xFB	; 251
     7a0:	80 93 dd 00 	sts	0x00DD, r24
     7a4:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     7a8:	80 61       	ori	r24, 0x10	; 16
     7aa:	80 93 d7 00 	sts	0x00D7, r24
     7ae:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     7b2:	82 60       	ori	r24, 0x02	; 2
     7b4:	80 93 dd 00 	sts	0x00DD, r24
     7b8:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     7ba:	d2 cf       	rjmp	.-92     	; 0x760 <USB_Host_ProcessNextHostState+0xa8>
     7bc:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     7c0:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     7c2:	98 c0       	rjmp	.+304    	; 0x8f4 <USB_Host_ProcessNextHostState+0x23c>
     7c4:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     7c8:	8e 7f       	andi	r24, 0xFE	; 254
     7ca:	80 93 9f 00 	sts	0x009F, r24
     7ce:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     7d2:	8d 7f       	andi	r24, 0xFD	; 253
     7d4:	80 93 9f 00 	sts	0x009F, r24
     7d8:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     7dc:	8d 7f       	andi	r24, 0xFD	; 253
     7de:	80 93 df 00 	sts	0x00DF, r24
     7e2:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     7e6:	82 60       	ori	r24, 0x02	; 2
     7e8:	80 93 de 00 	sts	0x00DE, r24
     7ec:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7f0:	81 60       	ori	r24, 0x01	; 1
     7f2:	80 93 9e 00 	sts	0x009E, r24
     7f6:	66 d1       	rcall	.+716    	; 0xac4 <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     7f8:	10 92 4f 01 	sts	0x014F, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     7fc:	84 e6       	ldi	r24, 0x64	; 100
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	90 93 43 01 	sts	0x0143, r25
     804:	80 93 42 01 	sts	0x0142, r24
     808:	85 e0       	ldi	r24, 0x05	; 5
     80a:	59 c0       	rjmp	.+178    	; 0x8be <USB_Host_ProcessNextHostState+0x206>
     80c:	aa de       	rcall	.-684    	; 0x562 <USB_Host_ResetDevice>
     80e:	10 92 4f 01 	sts	0x014F, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     812:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	90 93 43 01 	sts	0x0143, r25
     81a:	80 93 42 01 	sts	0x0142, r24
     81e:	86 e0       	ldi	r24, 0x06	; 6
     820:	4e c0       	rjmp	.+156    	; 0x8be <USB_Host_ProcessNextHostState+0x206>
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     828:	20 e4       	ldi	r18, 0x40	; 64
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	01 e0       	ldi	r16, 0x01	; 1
     82e:	c4 d0       	rcall	.+392    	; 0x9b8 <Pipe_ConfigurePipe>
     830:	88 23       	and	r24, r24
     832:	09 f4       	brne	.+2      	; 0x836 <USB_Host_ProcessNextHostState+0x17e>
     834:	4f c0       	rjmp	.+158    	; 0x8d4 <USB_Host_ProcessNextHostState+0x21c>
     836:	87 e0       	ldi	r24, 0x07	; 7
     838:	93 cf       	rjmp	.-218    	; 0x760 <USB_Host_ProcessNextHostState+0xa8>
     83a:	a7 e4       	ldi	r26, 0x47	; 71
     83c:	b1 e0       	ldi	r27, 0x01	; 1
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     83e:	e7 e1       	ldi	r30, 0x17	; 23
     840:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     842:	88 e0       	ldi	r24, 0x08	; 8
     844:	01 90       	ld	r0, Z+
     846:	0d 92       	st	X+, r0
     848:	81 50       	subi	r24, 0x01	; 1
     84a:	e1 f7       	brne	.-8      	; 0x844 <USB_Host_ProcessNextHostState+0x18c>
     84c:	10 92 a7 00 	sts	0x00A7, r1
     850:	ce 01       	movw	r24, r28
     852:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     854:	78 d3       	rcall	.+1776   	; 0xf46 <USB_Host_SendControlRequest>
     856:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     858:	88 23       	and	r24, r24
     85a:	09 f0       	breq	.+2      	; 0x85e <USB_Host_ProcessNextHostState+0x1a6>
     85c:	3e c0       	rjmp	.+124    	; 0x8da <USB_Host_ProcessNextHostState+0x222>
     85e:	88 85       	ldd	r24, Y+8	; 0x08
     860:	80 93 27 01 	sts	0x0127, r24
     864:	7e de       	rcall	.-772    	; 0x562 <USB_Host_ResetDevice>
     866:	10 92 4f 01 	sts	0x014F, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     86a:	88 ec       	ldi	r24, 0xC8	; 200
     86c:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
     86e:	90 93 43 01 	sts	0x0143, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     872:	80 93 42 01 	sts	0x0142, r24
     876:	88 e0       	ldi	r24, 0x08	; 8
     878:	22 c0       	rjmp	.+68     	; 0x8be <USB_Host_ProcessNextHostState+0x206>
     87a:	20 91 27 01 	lds	r18, 0x0127
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     886:	01 e0       	ldi	r16, 0x01	; 1
     888:	97 d0       	rcall	.+302    	; 0x9b8 <Pipe_ConfigurePipe>
     88a:	88 23       	and	r24, r24
     88c:	19 f1       	breq	.+70     	; 0x8d4 <USB_Host_ProcessNextHostState+0x21c>
     88e:	a7 e4       	ldi	r26, 0x47	; 71
     890:	b1 e0       	ldi	r27, 0x01	; 1
     892:	ef e1       	ldi	r30, 0x1F	; 31
     894:	f1 e0       	ldi	r31, 0x01	; 1
     896:	88 e0       	ldi	r24, 0x08	; 8
     898:	01 90       	ld	r0, Z+
     89a:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     89c:	81 50       	subi	r24, 0x01	; 1
     89e:	e1 f7       	brne	.-8      	; 0x898 <USB_Host_ProcessNextHostState+0x1e0>
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	50 d3       	rcall	.+1696   	; 0xf46 <USB_Host_SendControlRequest>
     8a6:	68 2f       	mov	r22, r24
     8a8:	88 23       	and	r24, r24
     8aa:	b9 f4       	brne	.+46     	; 0x8da <USB_Host_ProcessNextHostState+0x222>
     8ac:	10 92 4f 01 	sts	0x014F, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     8b0:	84 e6       	ldi	r24, 0x64	; 100
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	90 93 43 01 	sts	0x0143, r25
     8b8:	80 93 42 01 	sts	0x0142, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     8bc:	89 e0       	ldi	r24, 0x09	; 9
     8be:	80 93 44 01 	sts	0x0144, r24
     8c2:	18 c0       	rjmp	.+48     	; 0x8f4 <USB_Host_ProcessNextHostState+0x23c>
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	80 93 a1 00 	sts	0x00A1, r24
     8ca:	8a e0       	ldi	r24, 0x0A	; 10
     8cc:	80 93 4f 01 	sts	0x014F, r24
     8d0:	7d dd       	rcall	.-1286   	; 0x3cc <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     8d2:	10 c0       	rjmp	.+32     	; 0x8f4 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	84 e0       	ldi	r24, 0x04	; 4
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <USB_Host_ProcessNextHostState+0x224>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     8da:	83 e0       	ldi	r24, 0x03	; 3
     8dc:	90 91 4f 01 	lds	r25, 0x014F

			EVENT_USB_Host_DeviceEnumerationComplete();
     8e0:	91 30       	cpi	r25, 0x01	; 1
     8e2:	41 f0       	breq	.+16     	; 0x8f4 <USB_Host_ProcessNextHostState+0x23c>
			break;
     8e4:	e5 dd       	rcall	.-1078   	; 0x4b0 <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     8e6:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     8ea:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     8ec:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     8f0:	67 dd       	rcall	.-1330   	; 0x3c0 <EVENT_USB_Host_DeviceUnattached>
     8f2:	64 d1       	rcall	.+712    	; 0xbbc <USB_ResetInterface>
     8f4:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     8fa:	de bf       	out	0x3e, r29	; 62
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	cd bf       	out	0x3d, r28	; 61
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16

		USB_ResetInterface();
     908:	08 95       	ret

0000090a <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     90a:	af 92       	push	r10
     90c:	bf 92       	push	r11
     90e:	cf 92       	push	r12
     910:	df 92       	push	r13
     912:	ff 92       	push	r15
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	5c 01       	movw	r10, r24
     91e:	eb 01       	movw	r28, r22
     920:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     922:	80 91 aa 00 	lds	r24, 0x00AA
     926:	8f 7c       	andi	r24, 0xCF	; 207
     928:	80 61       	ori	r24, 0x10	; 16
     92a:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     92e:	00 d1       	rcall	.+512    	; 0xb30 <Pipe_WaitUntilReady>
     930:	f8 2e       	mov	r15, r24
     932:	88 23       	and	r24, r24
     934:	b1 f5       	brne	.+108    	; 0x9a2 <Pipe_Read_Stream_LE+0x98>
     936:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     938:	d1 04       	cpc	r13, r1
     93a:	41 f0       	breq	.+16     	; 0x94c <Pipe_Read_Stream_LE+0x42>
     93c:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     93e:	00 81       	ld	r16, Z
     940:	11 81       	ldd	r17, Z+1	; 0x01
     942:	c0 1b       	sub	r28, r16
     944:	d1 0b       	sbc	r29, r17
     946:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     948:	1b 1d       	adc	r17, r11
     94a:	01 c0       	rjmp	.+2      	; 0x94e <Pipe_Read_Stream_LE+0x44>
     94c:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     94e:	aa 24       	eor	r10, r10
     950:	bb 24       	eor	r11, r11
     952:	23 c0       	rjmp	.+70     	; 0x99a <Pipe_Read_Stream_LE+0x90>
     954:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     958:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     95a:	16 c0       	rjmp	.+44     	; 0x988 <Pipe_Read_Stream_LE+0x7e>
     95c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     960:	8e 77       	andi	r24, 0x7E	; 126
     962:	80 93 a6 00 	sts	0x00A6, r24
     966:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     968:	d1 04       	cpc	r13, r1
     96a:	51 f0       	breq	.+20     	; 0x980 <Pipe_Read_Stream_LE+0x76>
     96c:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     96e:	80 81       	ld	r24, Z
     970:	91 81       	ldd	r25, Z+1	; 0x01
     972:	8a 0d       	add	r24, r10
     974:	9b 1d       	adc	r25, r11
     976:	91 83       	std	Z+1, r25	; 0x01
     978:	80 83       	st	Z, r24
     97a:	64 e0       	ldi	r22, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     97c:	f6 2e       	mov	r15, r22
     97e:	11 c0       	rjmp	.+34     	; 0x9a2 <Pipe_Read_Stream_LE+0x98>
     980:	d7 d0       	rcall	.+430    	; 0xb30 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     982:	88 23       	and	r24, r24
     984:	51 f0       	breq	.+20     	; 0x99a <Pipe_Read_Stream_LE+0x90>
     986:	0c c0       	rjmp	.+24     	; 0x9a0 <Pipe_Read_Stream_LE+0x96>
     988:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     98c:	f8 01       	movw	r30, r16
     98e:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     990:	8f 01       	movw	r16, r30
     992:	21 97       	sbiw	r28, 0x01	; 1
     994:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     996:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     998:	b1 1c       	adc	r11, r1
     99a:	20 97       	sbiw	r28, 0x00	; 0
     99c:	d9 f6       	brne	.-74     	; 0x954 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     99e:	01 c0       	rjmp	.+2      	; 0x9a2 <Pipe_Read_Stream_LE+0x98>
     9a0:	f8 2e       	mov	r15, r24
     9a2:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     9a4:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	ff 90       	pop	r15
     9ae:	df 90       	pop	r13
     9b0:	cf 90       	pop	r12
     9b2:	bf 90       	pop	r11
     9b4:	af 90       	pop	r10
     9b6:	08 95       	ret

000009b8 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     9b8:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     9ba:	58 2f       	mov	r21, r24
     9bc:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     9be:	87 ff       	sbrs	r24, 7
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <Pipe_ConfigurePipe+0xe>
     9c2:	80 e1       	ldi	r24, 0x10	; 16
     9c4:	01 c0       	rjmp	.+2      	; 0x9c8 <Pipe_ConfigurePipe+0x10>
     9c6:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     9c8:	57 30       	cpi	r21, 0x07	; 7
     9ca:	08 f0       	brcs	.+2      	; 0x9ce <Pipe_ConfigurePipe+0x16>
     9cc:	57 c0       	rjmp	.+174    	; 0xa7c <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     9ce:	66 23       	and	r22, r22
     9d0:	09 f4       	brne	.+2      	; 0x9d4 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     9d2:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     9d4:	4f 70       	andi	r20, 0x0F	; 15
     9d6:	62 95       	swap	r22
     9d8:	66 0f       	add	r22, r22
     9da:	66 0f       	add	r22, r22
     9dc:	60 7c       	andi	r22, 0xC0	; 192
     9de:	64 2b       	or	r22, r20
     9e0:	68 2b       	or	r22, r24
     9e2:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9e4:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     9e6:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     9ea:	45 17       	cp	r20, r21
     9ec:	a9 f4       	brne	.+42     	; 0xa18 <Pipe_ConfigurePipe+0x60>
     9ee:	04 c0       	rjmp	.+8      	; 0x9f8 <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     9f0:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     9f2:	88 0f       	add	r24, r24
     9f4:	99 1f       	adc	r25, r25
     9f6:	03 c0       	rjmp	.+6      	; 0x9fe <Pipe_ConfigurePipe+0x46>
     9f8:	88 e0       	ldi	r24, 0x08	; 8
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     9fe:	82 17       	cp	r24, r18
     a00:	93 07       	cpc	r25, r19
     a02:	10 f4       	brcc	.+4      	; 0xa08 <Pipe_ConfigurePipe+0x50>
     a04:	75 30       	cpi	r23, 0x05	; 5
     a06:	a1 f7       	brne	.-24     	; 0x9f0 <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     a08:	87 2f       	mov	r24, r23
     a0a:	82 95       	swap	r24
     a0c:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     a0e:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     a10:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     a12:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     a14:	e0 e0       	ldi	r30, 0x00	; 0
     a16:	08 c0       	rjmp	.+16     	; 0xa28 <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     a18:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     a1c:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     a20:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     a24:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     a28:	81 ff       	sbrs	r24, 1
     a2a:	20 c0       	rjmp	.+64     	; 0xa6c <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a2c:	90 91 a9 00 	lds	r25, 0x00A9
     a30:	9e 7f       	andi	r25, 0xFE	; 254
     a32:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     a36:	90 91 ab 00 	lds	r25, 0x00AB
     a3a:	9d 7f       	andi	r25, 0xFD	; 253
     a3c:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     a40:	90 91 a9 00 	lds	r25, 0x00A9
     a44:	91 60       	ori	r25, 0x01	; 1
     a46:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     a4a:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     a4e:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     a52:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     a56:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     a5a:	80 91 a9 00 	lds	r24, 0x00A9
     a5e:	80 62       	ori	r24, 0x20	; 32
     a60:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a64:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     a68:	87 ff       	sbrs	r24, 7
     a6a:	08 c0       	rjmp	.+16     	; 0xa7c <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a6c:	4f 5f       	subi	r20, 0xFF	; 255
     a6e:	47 30       	cpi	r20, 0x07	; 7
     a70:	09 f0       	breq	.+2      	; 0xa74 <Pipe_ConfigurePipe+0xbc>
     a72:	b9 cf       	rjmp	.-142    	; 0x9e6 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a74:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	01 c0       	rjmp	.+2      	; 0xa7e <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     a7c:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     a7e:	0f 91       	pop	r16
     a80:	08 95       	ret

00000a82 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     a82:	ff 92       	push	r15
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
     a8e:	ec 01       	movw	r28, r24
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     a90:	ff 24       	eor	r15, r15
     a92:	0d c0       	rjmp	.+26     	; 0xaae <Pipe_ConfigurePipeTable+0x2c>
	{
		if (!(Table[i].Address))
     a94:	88 81       	ld	r24, Y
     a96:	88 23       	and	r24, r24
     a98:	41 f0       	breq	.+16     	; 0xaaa <Pipe_ConfigurePipeTable+0x28>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     a9a:	29 81       	ldd	r18, Y+1	; 0x01
     a9c:	3a 81       	ldd	r19, Y+2	; 0x02
     a9e:	6c 81       	ldd	r22, Y+4	; 0x04
     aa0:	4b 81       	ldd	r20, Y+3	; 0x03
     aa2:	0d 81       	ldd	r16, Y+5	; 0x05
     aa4:	89 df       	rcall	.-238    	; 0x9b8 <Pipe_ConfigurePipe>
     aa6:	88 23       	and	r24, r24
     aa8:	31 f0       	breq	.+12     	; 0xab6 <Pipe_ConfigurePipeTable+0x34>
     aaa:	f3 94       	inc	r15
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     aac:	26 96       	adiw	r28, 0x06	; 6
     aae:	f1 16       	cp	r15, r17
     ab0:	89 f7       	brne	.-30     	; 0xa94 <Pipe_ConfigurePipeTable+0x12>
     ab2:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}
	
	return true;
     ab4:	01 c0       	rjmp	.+2      	; 0xab8 <Pipe_ConfigurePipeTable+0x36>
     ab6:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
     ab8:	df 91       	pop	r29
		}
	}
	
	return true;
}
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	ff 90       	pop	r15
     ac2:	08 95       	ret

00000ac4 <Pipe_ClearPipes>:
     ac4:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     ace:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     ad2:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     ad6:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     ada:	90 91 a9 00 	lds	r25, 0x00A9
     ade:	9e 7f       	andi	r25, 0xFE	; 254
     ae0:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     ae4:	8f 5f       	subi	r24, 0xFF	; 255
     ae6:	87 30       	cpi	r24, 0x07	; 7
     ae8:	81 f7       	brne	.-32     	; 0xaca <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     aea:	08 95       	ret

00000aec <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     aec:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     af0:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     af4:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     af6:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     afa:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     afe:	27 ff       	sbrs	r18, 7
     b00:	0c c0       	rjmp	.+24     	; 0xb1a <Pipe_IsEndpointBound+0x2e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     b02:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     b06:	53 2f       	mov	r21, r19
     b08:	5f 70       	andi	r21, 0x0F	; 15
     b0a:	30 ff       	sbrs	r19, 0
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <Pipe_IsEndpointBound+0x26>
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	01 c0       	rjmp	.+2      	; 0xb14 <Pipe_IsEndpointBound+0x28>
     b12:	20 e8       	ldi	r18, 0x80	; 128
     b14:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     b16:	28 17       	cp	r18, r24
     b18:	49 f0       	breq	.+18     	; 0xb2c <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b1a:	9f 5f       	subi	r25, 0xFF	; 255
     b1c:	97 30       	cpi	r25, 0x07	; 7
     b1e:	59 f7       	brne	.-42     	; 0xaf6 <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b20:	84 2f       	mov	r24, r20
     b22:	8f 70       	andi	r24, 0x0F	; 15
     b24:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     b2e:	08 95       	ret

00000b30 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b30:	80 91 a2 00 	lds	r24, 0x00A2
     b34:	90 91 a3 00 	lds	r25, 0x00A3
     b38:	45 e6       	ldi	r20, 0x65	; 101
     b3a:	01 c0       	rjmp	.+2      	; 0xb3e <Pipe_WaitUntilReady+0xe>
     b3c:	c9 01       	movw	r24, r18
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b3e:	20 91 aa 00 	lds	r18, 0x00AA
     b42:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     b44:	20 31       	cpi	r18, 0x10	; 16
     b46:	29 f4       	brne	.+10     	; 0xb52 <Pipe_WaitUntilReady+0x22>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     b48:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     b4c:	20 ff       	sbrs	r18, 0
     b4e:	05 c0       	rjmp	.+10     	; 0xb5a <Pipe_WaitUntilReady+0x2a>
     b50:	17 c0       	rjmp	.+46     	; 0xb80 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     b52:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     b56:	22 fd       	sbrc	r18, 2
     b58:	13 c0       	rjmp	.+38     	; 0xb80 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b5a:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b5e:	21 fd       	sbrc	r18, 1
     b60:	11 c0       	rjmp	.+34     	; 0xb84 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b62:	20 91 4f 01 	lds	r18, 0x014F
     b66:	21 30       	cpi	r18, 0x01	; 1
     b68:	79 f0       	breq	.+30     	; 0xb88 <Pipe_WaitUntilReady+0x58>
     b6a:	20 91 a2 00 	lds	r18, 0x00A2
     b6e:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b72:	28 17       	cp	r18, r24
     b74:	39 07       	cpc	r19, r25
     b76:	19 f3       	breq	.-58     	; 0xb3e <Pipe_WaitUntilReady+0xe>
     b78:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b7a:	01 f7       	brne	.-64     	; 0xb3c <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_Timeout;
     b7c:	83 e0       	ldi	r24, 0x03	; 3
     b7e:	08 95       	ret
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     b88:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     b8a:	08 95       	ret

00000b8c <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     b8c:	75 d0       	rcall	.+234    	; 0xc78 <USB_INT_DisableAllInterrupts>
     b8e:	7c d0       	rcall	.+248    	; 0xc88 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b90:	e0 ee       	ldi	r30, 0xE0	; 224
     b92:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     b94:	80 81       	ld	r24, Z
     b96:	81 60       	ori	r24, 0x01	; 1
     b98:	80 83       	st	Z, r24
     b9a:	e8 ed       	ldi	r30, 0xD8	; 216
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     b9e:	80 81       	ld	r24, Z
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	80 83       	st	Z, r24
     ba4:	19 bc       	out	0x29, r1	; 41
     ba6:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     ba8:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     baa:	8c 91       	ld	r24, X
     bac:	8e 7f       	andi	r24, 0xFE	; 254
     bae:	8c 93       	st	X, r24
     bb0:	80 81       	ld	r24, Z
     bb2:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     bb4:	80 83       	st	Z, r24
     bb6:	10 92 46 01 	sts	0x0146, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     bba:	08 95       	ret

00000bbc <USB_ResetInterface>:
     bbc:	5d d0       	rcall	.+186    	; 0xc78 <USB_INT_DisableAllInterrupts>
}
     bbe:	64 d0       	rcall	.+200    	; 0xc88 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     bc0:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     bc4:	8f 77       	andi	r24, 0x7F	; 127
     bc6:	80 93 d8 00 	sts	0x00D8, r24
     bca:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     bce:	80 68       	ori	r24, 0x80	; 128
     bd0:	80 93 d8 00 	sts	0x00D8, r24
     bd4:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     bd8:	8f 7d       	andi	r24, 0xDF	; 223
     bda:	80 93 d8 00 	sts	0x00D8, r24
     bde:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     be2:	8f 77       	andi	r24, 0x7F	; 127
     be4:	80 93 d7 00 	sts	0x00D7, r24
     be8:	8c e0       	ldi	r24, 0x0C	; 12
     bea:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     bec:	8e e0       	ldi	r24, 0x0E	; 14
     bee:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     bf0:	09 b4       	in	r0, 0x29	; 41
     bf2:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     bf4:	fd cf       	rjmp	.-6      	; 0xbf0 <USB_ResetInterface+0x34>
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	80 93 4f 01 	sts	0x014F, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     bfc:	10 92 45 01 	sts	0x0145, r1
	USB_Host_ConfigurationNumber = 0;
     c00:	80 e4       	ldi	r24, 0x40	; 64
     c02:	80 93 27 01 	sts	0x0127, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c06:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c0a:	80 64       	ori	r24, 0x40	; 64
     c0c:	80 93 d8 00 	sts	0x00D8, r24
     c10:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c14:	81 60       	ori	r24, 0x01	; 1
     c16:	80 93 dd 00 	sts	0x00DD, r24
     c1a:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c1e:	84 60       	ori	r24, 0x04	; 4
     c20:	80 93 dd 00 	sts	0x00DD, r24
     c24:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     c28:	8f 7e       	andi	r24, 0xEF	; 239
     c2a:	80 93 d7 00 	sts	0x00D7, r24
     c2e:	6f 9a       	sbi	0x0d, 7	; 13
     c30:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     c32:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     c36:	81 60       	ori	r24, 0x01	; 1
     c38:	80 93 de 00 	sts	0x00DE, r24
     c3c:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     c40:	84 60       	ori	r24, 0x04	; 4
     c42:	80 93 de 00 	sts	0x00DE, r24
     c46:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c4a:	8e 7f       	andi	r24, 0xFE	; 254
     c4c:	80 93 e0 00 	sts	0x00E0, r24
     c50:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     c54:	80 61       	ori	r24, 0x10	; 16
     c56:	80 93 d8 00 	sts	0x00D8, r24
     c5a:	08 95       	ret

00000c5c <USB_Init>:
     c5c:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     c60:	80 81       	ld	r24, Z
     c62:	8f 7e       	andi	r24, 0xEF	; 239
     c64:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     c66:	e7 ed       	ldi	r30, 0xD7	; 215
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	81 60       	ori	r24, 0x01	; 1
     c6e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	80 93 46 01 	sts	0x0146, r24

	USB_ResetInterface();
     c76:	a2 cf       	rjmp	.-188    	; 0xbbc <USB_ResetInterface>

00000c78 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     c78:	e8 ed       	ldi	r30, 0xD8	; 216
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	8c 7f       	andi	r24, 0xFC	; 252
     c80:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     c82:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     c86:	08 95       	ret

00000c88 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     c88:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     c8c:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     c90:	08 95       	ret

00000c92 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c92:	1f 92       	push	r1
     c94:	0f 92       	push	r0
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	0f 92       	push	r0
     c9a:	0b b6       	in	r0, 0x3b	; 59
     c9c:	0f 92       	push	r0
     c9e:	11 24       	eor	r1, r1
     ca0:	2f 93       	push	r18
     ca2:	3f 93       	push	r19
     ca4:	4f 93       	push	r20
     ca6:	5f 93       	push	r21
     ca8:	6f 93       	push	r22
     caa:	7f 93       	push	r23
     cac:	8f 93       	push	r24
     cae:	9f 93       	push	r25
     cb0:	af 93       	push	r26
     cb2:	bf 93       	push	r27
     cb4:	ef 93       	push	r30
     cb6:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     cb8:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     cbc:	85 ff       	sbrs	r24, 5
     cbe:	0a c0       	rjmp	.+20     	; 0xcd4 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     cc0:	80 91 a0 00 	lds	r24, 0x00A0
     cc4:	85 ff       	sbrs	r24, 5
     cc6:	06 c0       	rjmp	.+12     	; 0xcd4 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     cc8:	80 91 9f 00 	lds	r24, 0x009F
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     cd2:	10 d1       	rcall	.+544    	; 0xef4 <USB_Event_Stub>
     cd4:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     cd8:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     cda:	15 c0       	rjmp	.+42     	; 0xd06 <__vector_10+0x74>
     cdc:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     ce0:	81 ff       	sbrs	r24, 1
     ce2:	11 c0       	rjmp	.+34     	; 0xd06 <__vector_10+0x74>
     ce4:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     ce8:	8d 7f       	andi	r24, 0xFD	; 253
     cea:	80 93 9f 00 	sts	0x009F, r24
     cee:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     cf2:	8e 7f       	andi	r24, 0xFE	; 254
     cf4:	80 93 9f 00 	sts	0x009F, r24
     cf8:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     cfc:	8d 7f       	andi	r24, 0xFD	; 253
     cfe:	80 93 a0 00 	sts	0x00A0, r24
     d02:	5e db       	rcall	.-2372   	; 0x3c0 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     d04:	5b df       	rcall	.-330    	; 0xbbc <USB_ResetInterface>
     d06:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     d0a:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     d0c:	15 c0       	rjmp	.+42     	; 0xd38 <__vector_10+0xa6>
     d0e:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d12:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     d14:	11 c0       	rjmp	.+34     	; 0xd38 <__vector_10+0xa6>
     d16:	80 91 df 00 	lds	r24, 0x00DF
     d1a:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     d1c:	80 93 df 00 	sts	0x00DF, r24
     d20:	77 98       	cbi	0x0e, 7	; 14
     d22:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     d26:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d28:	80 93 dd 00 	sts	0x00DD, r24
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	a0 db       	rcall	.-2240   	; 0x470 <EVENT_USB_Host_HostError>
     d30:	47 db       	rcall	.-2418   	; 0x3c0 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	80 93 4f 01 	sts	0x014F, r24
		EVENT_USB_Host_DeviceUnattached();
     d38:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     d3c:	80 ff       	sbrs	r24, 0
     d3e:	17 c0       	rjmp	.+46     	; 0xd6e <__vector_10+0xdc>
     d40:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     d44:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     d46:	13 c0       	rjmp	.+38     	; 0xd6e <__vector_10+0xdc>
     d48:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     d4c:	8e 7f       	andi	r24, 0xFE	; 254
     d4e:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     d52:	80 91 de 00 	lds	r24, 0x00DE
     d56:	8e 7f       	andi	r24, 0xFE	; 254
     d58:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     d5c:	2b db       	rcall	.-2474   	; 0x3b4 <EVENT_USB_Host_DeviceAttached>
     d5e:	80 91 a0 00 	lds	r24, 0x00A0
     d62:	82 60       	ori	r24, 0x02	; 2
     d64:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     d68:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     d6a:	80 93 4f 01 	sts	0x014F, r24
     d6e:	80 91 df 00 	lds	r24, 0x00DF
     d72:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     d74:	0e c0       	rjmp	.+28     	; 0xd92 <__vector_10+0x100>
     d76:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     d7a:	82 ff       	sbrs	r24, 2
     d7c:	0a c0       	rjmp	.+20     	; 0xd92 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     d7e:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     d82:	8b 7f       	andi	r24, 0xFB	; 251
     d84:	80 93 df 00 	sts	0x00DF, r24
     d88:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	91 db       	rcall	.-2270   	; 0x4b0 <EVENT_USB_Host_DeviceEnumerationFailed>
     d8e:	18 db       	rcall	.-2512   	; 0x3c0 <EVENT_USB_Host_DeviceUnattached>
     d90:	15 df       	rcall	.-470    	; 0xbbc <USB_ResetInterface>
     d92:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     d94:	ef 91       	pop	r30
     d96:	bf 91       	pop	r27
     d98:	af 91       	pop	r26
     d9a:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     d9c:	8f 91       	pop	r24
     d9e:	7f 91       	pop	r23

		USB_ResetInterface();
     da0:	6f 91       	pop	r22
     da2:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     da4:	4f 91       	pop	r20
     da6:	3f 91       	pop	r19
     da8:	2f 91       	pop	r18
     daa:	0f 90       	pop	r0
     dac:	0b be       	out	0x3b, r0	; 59
     dae:	0f 90       	pop	r0
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	0f 90       	pop	r0
     db4:	1f 90       	pop	r1
     db6:	18 95       	reti

00000db8 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     db8:	cf 92       	push	r12
     dba:	df 92       	push	r13
     dbc:	ef 92       	push	r14
     dbe:	ff 92       	push	r15
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	29 97       	sbiw	r28, 0x09	; 9
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	6b 01       	movw	r12, r22
     dda:	8a 01       	movw	r16, r20
     ddc:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     dde:	90 e8       	ldi	r25, 0x80	; 128
     de0:	90 93 47 01 	sts	0x0147, r25
     de4:	96 e0       	ldi	r25, 0x06	; 6
     de6:	90 93 48 01 	sts	0x0148, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     df0:	90 93 4a 01 	sts	0x014A, r25
     df4:	80 93 49 01 	sts	0x0149, r24
     df8:	10 92 4c 01 	sts	0x014C, r1
     dfc:	10 92 4b 01 	sts	0x014B, r1
     e00:	89 e0       	ldi	r24, 0x09	; 9
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	90 93 4e 01 	sts	0x014E, r25
     e08:	80 93 4d 01 	sts	0x014D, r24
     e0c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     e10:	ce 01       	movw	r24, r28
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	98 d0       	rcall	.+304    	; 0xf46 <USB_Host_SendControlRequest>
     e16:	88 23       	and	r24, r24
     e18:	b9 f4       	brne	.+46     	; 0xe48 <USB_Host_GetDeviceConfigDescriptor+0x90>
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     e1c:	9c 81       	ldd	r25, Y+4	; 0x04
     e1e:	f6 01       	movw	r30, r12
     e20:	91 83       	std	Z+1, r25	; 0x01
     e22:	80 83       	st	Z, r24
     e24:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
     e26:	f9 06       	cpc	r15, r25
     e28:	70 f0       	brcs	.+28     	; 0xe46 <USB_Host_GetDeviceConfigDescriptor+0x8e>
     e2a:	90 93 4e 01 	sts	0x014E, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     e2e:	80 93 4d 01 	sts	0x014D, r24
     e32:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     e34:	88 d0       	rcall	.+272    	; 0xf46 <USB_Host_SendControlRequest>
     e36:	88 23       	and	r24, r24
     e38:	39 f4       	brne	.+14     	; 0xe48 <USB_Host_GetDeviceConfigDescriptor+0x90>
     e3a:	f8 01       	movw	r30, r16
     e3c:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     e3e:	92 30       	cpi	r25, 0x02	; 2
     e40:	19 f0       	breq	.+6      	; 0xe48 <USB_Host_GetDeviceConfigDescriptor+0x90>
     e42:	86 e0       	ldi	r24, 0x06	; 6
     e44:	01 c0       	rjmp	.+2      	; 0xe48 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     e46:	85 e0       	ldi	r24, 0x05	; 5
     e48:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     e4a:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	ff 90       	pop	r15
     e5e:	ef 90       	pop	r14
     e60:	df 90       	pop	r13
     e62:	cf 90       	pop	r12
     e64:	08 95       	ret

00000e66 <USB_GetNextDescriptorComp>:
     e66:	af 92       	push	r10
     e68:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     e6a:	cf 92       	push	r12
     e6c:	df 92       	push	r13
     e6e:	ef 92       	push	r14
     e70:	ff 92       	push	r15
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	7c 01       	movw	r14, r24
     e7c:	8b 01       	movw	r16, r22
     e7e:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     e80:	28 c0       	rjmp	.+80     	; 0xed2 <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     e82:	f8 01       	movw	r30, r16
     e84:	c0 80       	ld	r12, Z
     e86:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     e88:	f6 01       	movw	r30, r12
     e8a:	80 81       	ld	r24, Z
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	9e 01       	movw	r18, r28
     e90:	8c 17       	cp	r24, r28
     e92:	9d 07       	cpc	r25, r29
     e94:	08 f4       	brcc	.+2      	; 0xe98 <USB_GetNextDescriptorComp+0x32>
     e96:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     e98:	c6 01       	movw	r24, r12
     e9a:	82 0f       	add	r24, r18
     e9c:	93 1f       	adc	r25, r19
     e9e:	f8 01       	movw	r30, r16
     ea0:	91 83       	std	Z+1, r25	; 0x01
     ea2:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
     ea4:	f7 01       	movw	r30, r14
     ea6:	80 81       	ld	r24, Z
     ea8:	91 81       	ldd	r25, Z+1	; 0x01
     eaa:	82 1b       	sub	r24, r18
     eac:	93 0b       	sbc	r25, r19
     eae:	91 83       	std	Z+1, r25	; 0x01
     eb0:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     eb2:	f8 01       	movw	r30, r16
     eb4:	80 81       	ld	r24, Z
     eb6:	91 81       	ldd	r25, Z+1	; 0x01
     eb8:	f5 01       	movw	r30, r10
     eba:	09 95       	icall
     ebc:	82 30       	cpi	r24, 0x02	; 2
     ebe:	49 f0       	breq	.+18     	; 0xed2 <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	69 f4       	brne	.+26     	; 0xede <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
     ec4:	f8 01       	movw	r30, r16
     ec6:	d1 82       	std	Z+1, r13	; 0x01
     ec8:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
     eca:	f7 01       	movw	r30, r14
     ecc:	d1 83       	std	Z+1, r29	; 0x01
     ece:	c0 83       	st	Z, r28
     ed0:	06 c0       	rjmp	.+12     	; 0xede <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     ed2:	f7 01       	movw	r30, r14
     ed4:	c0 81       	ld	r28, Z
     ed6:	d1 81       	ldd	r29, Z+1	; 0x01
     ed8:	20 97       	sbiw	r28, 0x00	; 0
     eda:	99 f6       	brne	.-90     	; 0xe82 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     edc:	82 e0       	ldi	r24, 0x02	; 2
}
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	ff 90       	pop	r15
     ee8:	ef 90       	pop	r14
     eea:	df 90       	pop	r13
     eec:	cf 90       	pop	r12
     eee:	bf 90       	pop	r11
     ef0:	af 90       	pop	r10
     ef2:	08 95       	ret

00000ef4 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     ef4:	08 95       	ret

00000ef6 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     ef6:	1f 93       	push	r17
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     efe:	c9 ee       	ldi	r28, 0xE9	; 233
     f00:	d3 e0       	ldi	r29, 0x03	; 3
     f02:	06 c0       	rjmp	.+12     	; 0xf10 <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	83 db       	rcall	.-2298   	; 0x60e <USB_Host_WaitMS>
     f08:	88 23       	and	r24, r24
     f0a:	c9 f4       	brne	.+50     	; 0xf3e <USB_Host_WaitForIOS+0x48>
     f0c:	21 97       	sbiw	r28, 0x01	; 1
     f0e:	b1 f0       	breq	.+44     	; 0xf3c <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f10:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f12:	29 f4       	brne	.+10     	; 0xf1e <USB_Host_WaitForIOS+0x28>
     f14:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f18:	83 ff       	sbrs	r24, 3
     f1a:	f4 cf       	rjmp	.-24     	; 0xf04 <USB_Host_WaitForIOS+0xe>
     f1c:	0d c0       	rjmp	.+26     	; 0xf38 <USB_Host_WaitForIOS+0x42>
     f1e:	11 30       	cpi	r17, 0x01	; 1
     f20:	29 f4       	brne	.+10     	; 0xf2c <USB_Host_WaitForIOS+0x36>
     f22:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f26:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     f28:	ed cf       	rjmp	.-38     	; 0xf04 <USB_Host_WaitForIOS+0xe>
     f2a:	06 c0       	rjmp	.+12     	; 0xf38 <USB_Host_WaitForIOS+0x42>
     f2c:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f2e:	51 f7       	brne	.-44     	; 0xf04 <USB_Host_WaitForIOS+0xe>
     f30:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f34:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     f36:	e6 cf       	rjmp	.-52     	; 0xf04 <USB_Host_WaitForIOS+0xe>
     f38:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     f3a:	01 c0       	rjmp	.+2      	; 0xf3e <USB_Host_WaitForIOS+0x48>
     f3c:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     f3e:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
     f40:	cf 91       	pop	r28
     f42:	1f 91       	pop	r17
     f44:	08 95       	ret

00000f46 <USB_Host_SendControlRequest>:
     f46:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     f48:	ff 92       	push	r15
     f4a:	0f 93       	push	r16
     f4c:	1f 93       	push	r17
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f54:	e0 90 9e 00 	lds	r14, 0x009E
     f58:	ff 24       	eor	r15, r15
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	e8 22       	and	r14, r24
     f5e:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     f60:	00 91 4d 01 	lds	r16, 0x014D
     f64:	10 91 4e 01 	lds	r17, 0x014E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f68:	80 91 9e 00 	lds	r24, 0x009E
     f6c:	81 60       	ori	r24, 0x01	; 1
     f6e:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	4c db       	rcall	.-2408   	; 0x60e <USB_Host_WaitMS>
     f76:	88 23       	and	r24, r24
     f78:	09 f0       	breq	.+2      	; 0xf7c <USB_Host_SendControlRequest+0x36>
     f7a:	ca c0       	rjmp	.+404    	; 0x1110 <USB_Host_SendControlRequest+0x1ca>
     f7c:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f80:	8f 7c       	andi	r24, 0xCF	; 207
     f82:	80 93 aa 00 	sts	0x00AA, r24
     f86:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     f8a:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
     f8e:	8f 7e       	andi	r24, 0xEF	; 239
     f90:	80 93 a6 00 	sts	0x00A6, r24
     f94:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f98:	8f 7b       	andi	r24, 0xBF	; 191
     f9a:	80 93 a9 00 	sts	0x00A9, r24
     f9e:	88 e0       	ldi	r24, 0x08	; 8
     fa0:	e7 e4       	ldi	r30, 0x47	; 71
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
     fa2:	f1 e0       	ldi	r31, 0x01	; 1
     fa4:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     fa6:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     faa:	81 50       	subi	r24, 0x01	; 1
     fac:	d9 f7       	brne	.-10     	; 0xfa4 <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     fae:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     fb2:	87 77       	andi	r24, 0x77	; 119
     fb4:	80 93 a6 00 	sts	0x00A6, r24
     fb8:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     fba:	9d df       	rcall	.-198    	; 0xef6 <USB_Host_WaitForIOS>
     fbc:	88 23       	and	r24, r24
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <USB_Host_SendControlRequest+0x7c>
     fc0:	a7 c0       	rjmp	.+334    	; 0x1110 <USB_Host_SendControlRequest+0x1ca>
     fc2:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fc6:	80 64       	ori	r24, 0x40	; 64
     fc8:	80 93 a9 00 	sts	0x00A9, r24
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	1f db       	rcall	.-2498   	; 0x60e <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fd0:	88 23       	and	r24, r24
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <USB_Host_SendControlRequest+0x90>
     fd4:	9d c0       	rjmp	.+314    	; 0x1110 <USB_Host_SendControlRequest+0x1ca>
     fd6:	80 91 47 01 	lds	r24, 0x0147
     fda:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     fdc:	4f c0       	rjmp	.+158    	; 0x107c <USB_Host_SendControlRequest+0x136>
     fde:	80 91 aa 00 	lds	r24, 0x00AA
     fe2:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fe4:	80 61       	ori	r24, 0x10	; 16
     fe6:	80 93 aa 00 	sts	0x00AA, r24
     fea:	20 97       	sbiw	r28, 0x00	; 0
     fec:	61 f5       	brne	.+88     	; 0x1046 <USB_Host_SendControlRequest+0x100>
     fee:	2e c0       	rjmp	.+92     	; 0x104c <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     ff0:	80 91 a9 00 	lds	r24, 0x00A9
     ff4:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ff6:	80 93 a9 00 	sts	0x00A9, r24
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	7c df       	rcall	.-264    	; 0xef6 <USB_Host_WaitForIOS>
     ffe:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1000:	09 f0       	breq	.+2      	; 0x1004 <USB_Host_SendControlRequest+0xbe>
    1002:	86 c0       	rjmp	.+268    	; 0x1110 <USB_Host_SendControlRequest+0x1ca>
    1004:	80 91 f6 00 	lds	r24, 0x00F6
    1008:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	41 f4       	brne	.+16     	; 0x1020 <USB_Host_SendControlRequest+0xda>
    1010:	00 e0       	ldi	r16, 0x00	; 0
    1012:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1014:	05 c0       	rjmp	.+10     	; 0x1020 <USB_Host_SendControlRequest+0xda>
    1016:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
    101a:	89 93       	st	Y+, r24
    101c:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    101e:	10 40       	sbci	r17, 0x00	; 0
    1020:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
    1024:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	19 f0       	breq	.+6      	; 0x1032 <USB_Host_SendControlRequest+0xec>
    102c:	01 15       	cp	r16, r1
    102e:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1030:	91 f7       	brne	.-28     	; 0x1016 <USB_Host_SendControlRequest+0xd0>
    1032:	80 91 a9 00 	lds	r24, 0x00A9
    1036:	80 64       	ori	r24, 0x40	; 64
    1038:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    103c:	80 91 a6 00 	lds	r24, 0x00A6
    1040:	8e 77       	andi	r24, 0x7E	; 126
    1042:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1046:	01 15       	cp	r16, r1
    1048:	11 05       	cpc	r17, r1
    104a:	91 f6       	brne	.-92     	; 0xff0 <USB_Host_SendControlRequest+0xaa>
    104c:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1050:	8f 7c       	andi	r24, 0xCF	; 207
    1052:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1054:	80 93 aa 00 	sts	0x00AA, r24
    1058:	80 91 a9 00 	lds	r24, 0x00A9
    105c:	8f 7b       	andi	r24, 0xBF	; 191
    105e:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1062:	82 e0       	ldi	r24, 0x02	; 2
    1064:	48 df       	rcall	.-368    	; 0xef6 <USB_Host_WaitForIOS>
    1066:	88 23       	and	r24, r24
    1068:	09 f0       	breq	.+2      	; 0x106c <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    106a:	52 c0       	rjmp	.+164    	; 0x1110 <USB_Host_SendControlRequest+0x1ca>
    106c:	80 91 a6 00 	lds	r24, 0x00A6
    1070:	8b 77       	andi	r24, 0x7B	; 123
    1072:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1076:	82 e0       	ldi	r24, 0x02	; 2
    1078:	3e df       	rcall	.-388    	; 0xef6 <USB_Host_WaitForIOS>
    107a:	4a c0       	rjmp	.+148    	; 0x1110 <USB_Host_SendControlRequest+0x1ca>
    107c:	20 97       	sbiw	r28, 0x00	; 0
    107e:	a1 f1       	breq	.+104    	; 0x10e8 <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1080:	80 91 aa 00 	lds	r24, 0x00AA
    1084:	8f 7c       	andi	r24, 0xCF	; 207
    1086:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1088:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    108c:	80 91 a9 00 	lds	r24, 0x00A9
    1090:	8f 7b       	andi	r24, 0xBF	; 191
    1092:	80 93 a9 00 	sts	0x00A9, r24
    1096:	1c c0       	rjmp	.+56     	; 0x10d0 <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1098:	2e df       	rcall	.-420    	; 0xef6 <USB_Host_WaitForIOS>
    109a:	88 23       	and	r24, r24
    109c:	c9 f5       	brne	.+114    	; 0x1110 <USB_Host_SendControlRequest+0x1ca>
    109e:	fe 01       	movw	r30, r28
    10a0:	07 c0       	rjmp	.+14     	; 0x10b0 <USB_Host_SendControlRequest+0x16a>
    10a2:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10a4:	ef 01       	movw	r28, r30
    10a6:	80 93 af 00 	sts	0x00AF, r24
    10aa:	01 50       	subi	r16, 0x01	; 1
    10ac:	10 40       	sbci	r17, 0x00	; 0
    10ae:	59 f0       	breq	.+22     	; 0x10c6 <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    10b0:	ef 01       	movw	r28, r30
    10b2:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    10b6:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    10ba:	80 91 27 01 	lds	r24, 0x0127
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    10be:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10c0:	28 17       	cp	r18, r24
    10c2:	39 07       	cpc	r19, r25
    10c4:	70 f3       	brcs	.-36     	; 0x10a2 <USB_Host_SendControlRequest+0x15c>
    10c6:	80 91 a6 00 	lds	r24, 0x00A6
    10ca:	8b 77       	andi	r24, 0x7B	; 123
    10cc:	80 93 a6 00 	sts	0x00A6, r24
    10d0:	82 e0       	ldi	r24, 0x02	; 2
    10d2:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10d4:	11 05       	cpc	r17, r1
    10d6:	01 f7       	brne	.-64     	; 0x1098 <USB_Host_SendControlRequest+0x152>
    10d8:	0e df       	rcall	.-484    	; 0xef6 <USB_Host_WaitForIOS>
    10da:	88 23       	and	r24, r24
    10dc:	c9 f4       	brne	.+50     	; 0x1110 <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10de:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    10e2:	80 64       	ori	r24, 0x40	; 64
    10e4:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10e8:	80 91 aa 00 	lds	r24, 0x00AA
    10ec:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10ee:	80 61       	ori	r24, 0x10	; 16
    10f0:	80 93 aa 00 	sts	0x00AA, r24
    10f4:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10f8:	8f 7b       	andi	r24, 0xBF	; 191
    10fa:	80 93 a9 00 	sts	0x00A9, r24
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	fa de       	rcall	.-524    	; 0xef6 <USB_Host_WaitForIOS>
    1102:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1104:	29 f4       	brne	.+10     	; 0x1110 <USB_Host_SendControlRequest+0x1ca>
    1106:	90 91 a6 00 	lds	r25, 0x00A6
    110a:	9e 77       	andi	r25, 0x7E	; 126
    110c:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1110:	90 91 a9 00 	lds	r25, 0x00A9
    1114:	90 64       	ori	r25, 0x40	; 64
    1116:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    111a:	e1 14       	cp	r14, r1
    111c:	f1 04       	cpc	r15, r1
    111e:	29 f4       	brne	.+10     	; 0x112a <USB_Host_SendControlRequest+0x1e4>
    1120:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1124:	9e 7f       	andi	r25, 0xFE	; 254
    1126:	90 93 9e 00 	sts	0x009E, r25
    112a:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    112c:	90 93 a8 00 	sts	0x00A8, r25
    1130:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	1f 91       	pop	r17
    113a:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    113c:	ff 90       	pop	r15
    113e:	ef 90       	pop	r14
    1140:	08 95       	ret

00001142 <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    1142:	cf 93       	push	r28
    1144:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1146:	10 92 47 01 	sts	0x0147, r1
    114a:	89 e0       	ldi	r24, 0x09	; 9
    114c:	80 93 48 01 	sts	0x0148, r24
    1150:	c0 93 49 01 	sts	0x0149, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1154:	10 92 4a 01 	sts	0x014A, r1
    1158:	10 92 4c 01 	sts	0x014C, r1
    115c:	10 92 4b 01 	sts	0x014B, r1
    1160:	10 92 4e 01 	sts	0x014E, r1
    1164:	10 92 4d 01 	sts	0x014D, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1168:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	ea de       	rcall	.-556    	; 0xf46 <USB_Host_SendControlRequest>
    1172:	88 23       	and	r24, r24
    1174:	49 f4       	brne	.+18     	; 0x1188 <USB_Host_SetDeviceConfiguration+0x46>
    1176:	c0 93 45 01 	sts	0x0145, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    117a:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    117c:	11 f0       	breq	.+4      	; 0x1182 <USB_Host_SetDeviceConfiguration+0x40>
    117e:	9b e0       	ldi	r25, 0x0B	; 11
    1180:	01 c0       	rjmp	.+2      	; 0x1184 <USB_Host_SetDeviceConfiguration+0x42>
    1182:	9a e0       	ldi	r25, 0x0A	; 10
    1184:	90 93 4f 01 	sts	0x014F, r25
    1188:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    118a:	08 95       	ret

0000118c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    118c:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    118e:	c0 91 a7 00 	lds	r28, 0x00A7
    1192:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1194:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1198:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    119c:	8d da       	rcall	.-2790   	; 0x6b8 <USB_Host_ProcessNextHostState>
    119e:	c0 93 a7 00 	sts	0x00A7, r28
    11a2:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    11a4:	08 95       	ret

000011a6 <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    11a6:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    11a8:	81 81       	ldd	r24, Z+1	; 0x01
    11aa:	84 30       	cpi	r24, 0x04	; 4
    11ac:	19 f4       	brne	.+6      	; 0x11b4 <DCOMP_HID_Host_NextHIDInterface+0xe>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    11ae:	85 81       	ldd	r24, Z+5	; 0x05
    11b0:	83 30       	cpi	r24, 0x03	; 3
    11b2:	11 f0       	breq	.+4      	; 0x11b8 <DCOMP_HID_Host_NextHIDInterface+0x12>
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    11b4:	82 e0       	ldi	r24, 0x02	; 2
    11b6:	08 95       	ret
	if (Header->Type == DTYPE_Interface)
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
		  return DESCRIPTOR_SEARCH_Found;
    11b8:	80 e0       	ldi	r24, 0x00	; 0
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    11ba:	08 95       	ret

000011bc <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    11bc:	fc 01       	movw	r30, r24
    11be:	81 81       	ldd	r24, Z+1	; 0x01
    11c0:	81 32       	cpi	r24, 0x21	; 33
    11c2:	21 f0       	breq	.+8      	; 0x11cc <DCOMP_HID_Host_NextHIDDescriptor+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    11c4:	84 30       	cpi	r24, 0x04	; 4
    11c6:	21 f4       	brne	.+8      	; 0x11d0 <DCOMP_HID_Host_NextHIDDescriptor+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	08 95       	ret
static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
    11d0:	82 e0       	ldi	r24, 0x02	; 2
}
    11d2:	08 95       	ret

000011d4 <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    11d4:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    11d6:	81 81       	ldd	r24, Z+1	; 0x01
    11d8:	85 30       	cpi	r24, 0x05	; 5
    11da:	29 f4       	brne	.+10     	; 0x11e6 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    11dc:	82 81       	ldd	r24, Z+2	; 0x02
    11de:	86 dc       	rcall	.-1780   	; 0xaec <Pipe_IsEndpointBound>
    11e0:	88 23       	and	r24, r24
    11e2:	19 f4       	brne	.+6      	; 0x11ea <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x16>
    11e4:	04 c0       	rjmp	.+8      	; 0x11ee <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1a>
    11e6:	84 30       	cpi	r24, 0x04	; 4
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    11e8:	21 f0       	breq	.+8      	; 0x11f2 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1e>
    11ea:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    11ec:	08 95       	ret
    11ee:	80 e0       	ldi	r24, 0x00	; 0
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
    11f0:	08 95       	ret
    11f2:	81 e0       	ldi	r24, 0x01	; 1
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    11f4:	08 95       	ret

000011f6 <HID_Host_ConfigurePipes>:
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    11f6:	8f 92       	push	r8
#include "HIDClassHost.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    11f8:	9f 92       	push	r9
    11fa:	af 92       	push	r10
    11fc:	bf 92       	push	r11
    11fe:	cf 92       	push	r12
    1200:	df 92       	push	r13
    1202:	ef 92       	push	r14
    1204:	ff 92       	push	r15
    1206:	0f 93       	push	r16
    1208:	1f 93       	push	r17
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	00 d0       	rcall	.+0      	; 0x1210 <HID_Host_ConfigurePipes+0x1a>
    1210:	00 d0       	rcall	.+0      	; 0x1212 <HID_Host_ConfigurePipes+0x1c>
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	8c 01       	movw	r16, r24
    1218:	7a 83       	std	Y+2, r23	; 0x02
    121a:	69 83       	std	Y+1, r22	; 0x01
    121c:	5c 83       	std	Y+4, r21	; 0x04
    121e:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1220:	0f 96       	adiw	r24, 0x0f	; 15
    1222:	fc 01       	movw	r30, r24
    1224:	88 e0       	ldi	r24, 0x08	; 8
    1226:	df 01       	movw	r26, r30
    1228:	1d 92       	st	X+, r1
    122a:	8a 95       	dec	r24
    122c:	e9 f7       	brne	.-6      	; 0x1228 <HID_Host_ConfigurePipes+0x32>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    122e:	eb 81       	ldd	r30, Y+3	; 0x03
    1230:	fc 81       	ldd	r31, Y+4	; 0x04
    1232:	81 81       	ldd	r24, Z+1	; 0x01
    1234:	82 30       	cpi	r24, 0x02	; 2
    1236:	09 f0       	breq	.+2      	; 0x123a <HID_Host_ConfigurePipes+0x44>
    1238:	97 c0       	rjmp	.+302    	; 0x1368 <HID_Host_ConfigurePipes+0x172>
    123a:	88 24       	eor	r8, r8
    123c:	99 24       	eor	r9, r9
    123e:	aa 24       	eor	r10, r10
    1240:	bb 24       	eor	r11, r11
    1242:	ee 24       	eor	r14, r14
    1244:	ff 24       	eor	r15, r15
    1246:	cc 24       	eor	r12, r12
    1248:	dd 24       	eor	r13, r13
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    124a:	a1 14       	cp	r10, r1
    124c:	b1 04       	cpc	r11, r1
    124e:	51 f0       	breq	.+20     	; 0x1264 <HID_Host_ConfigurePipes+0x6e>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1250:	ce 01       	movw	r24, r28
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	be 01       	movw	r22, r28
    1256:	6d 5f       	subi	r22, 0xFD	; 253
    1258:	7f 4f       	sbci	r23, 0xFF	; 255
    125a:	4a ee       	ldi	r20, 0xEA	; 234
    125c:	58 e0       	ldi	r21, 0x08	; 8
    125e:	03 de       	rcall	.-1018   	; 0xe66 <USB_GetNextDescriptorComp>
    1260:	88 23       	and	r24, r24
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1262:	51 f1       	breq	.+84     	; 0x12b8 <HID_Host_ConfigurePipes+0xc2>
    1264:	c1 14       	cp	r12, r1
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint)
    1266:	d1 04       	cpc	r13, r1
    1268:	b9 f5       	brne	.+110    	; 0x12d8 <HID_Host_ConfigurePipes+0xe2>
    126a:	ce 01       	movw	r24, r28
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    126c:	01 96       	adiw	r24, 0x01	; 1
    126e:	be 01       	movw	r22, r28
    1270:	6d 5f       	subi	r22, 0xFD	; 253
    1272:	7f 4f       	sbci	r23, 0xFF	; 255
    1274:	43 ed       	ldi	r20, 0xD3	; 211
    1276:	58 e0       	ldi	r21, 0x08	; 8
    1278:	f6 dd       	rcall	.-1044   	; 0xe66 <USB_GetNextDescriptorComp>
    127a:	88 23       	and	r24, r24
    127c:	09 f0       	breq	.+2      	; 0x1280 <HID_Host_ConfigurePipes+0x8a>
    127e:	76 c0       	rjmp	.+236    	; 0x136c <HID_Host_ConfigurePipes+0x176>
    1280:	ab 80       	ldd	r10, Y+3	; 0x03
    1282:	bc 80       	ldd	r11, Y+4	; 0x04
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1284:	f8 01       	movw	r30, r16
    1286:	84 85       	ldd	r24, Z+12	; 0x0c
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1288:	88 23       	and	r24, r24
    128a:	31 f0       	breq	.+12     	; 0x1298 <HID_Host_ConfigurePipes+0xa2>
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    128c:	d5 01       	movw	r26, r10
    128e:	17 96       	adiw	r26, 0x07	; 7
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1290:	9c 91       	ld	r25, X
    1292:	17 97       	sbiw	r26, 0x07	; 7
    1294:	98 17       	cp	r25, r24
    1296:	49 f7       	brne	.-46     	; 0x126a <HID_Host_ConfigurePipes+0x74>
    1298:	ce 01       	movw	r24, r28
    129a:	01 96       	adiw	r24, 0x01	; 1
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    129c:	be 01       	movw	r22, r28
    129e:	6d 5f       	subi	r22, 0xFD	; 253
    12a0:	7f 4f       	sbci	r23, 0xFF	; 255
    12a2:	4e ed       	ldi	r20, 0xDE	; 222
    12a4:	58 e0       	ldi	r21, 0x08	; 8
    12a6:	df dd       	rcall	.-1090   	; 0xe66 <USB_GetNextDescriptorComp>
    12a8:	88 23       	and	r24, r24
    12aa:	09 f0       	breq	.+2      	; 0x12ae <HID_Host_ConfigurePipes+0xb8>
    12ac:	5f c0       	rjmp	.+190    	; 0x136c <HID_Host_ConfigurePipes+0x176>
    12ae:	8b 80       	ldd	r8, Y+3	; 0x03
    12b0:	9c 80       	ldd	r9, Y+4	; 0x04
    12b2:	ee 24       	eor	r14, r14
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    12b4:	ff 24       	eor	r15, r15
    12b6:	c9 cf       	rjmp	.-110    	; 0x124a <HID_Host_ConfigurePipes+0x54>

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    12b8:	eb 81       	ldd	r30, Y+3	; 0x03
    12ba:	fc 81       	ldd	r31, Y+4	; 0x04
    12bc:	82 81       	ldd	r24, Z+2	; 0x02

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    12be:	87 ff       	sbrs	r24, 7
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <HID_Host_ConfigurePipes+0xd0>

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    12c2:	6f 01       	movw	r12, r30
    12c4:	01 c0       	rjmp	.+2      	; 0x12c8 <HID_Host_ConfigurePipes+0xd2>
    12c6:	7f 01       	movw	r14, r30
		  DataINEndpoint  = EndpointData;
    12c8:	c1 14       	cp	r12, r1
    12ca:	d1 04       	cpc	r13, r1
		else
		  DataOUTEndpoint = EndpointData;
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <HID_Host_ConfigurePipes+0xda>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    12ce:	bd cf       	rjmp	.-134    	; 0x124a <HID_Host_ConfigurePipes+0x54>
    12d0:	e1 14       	cp	r14, r1
    12d2:	f1 04       	cpc	r15, r1
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <HID_Host_ConfigurePipes+0xe2>
    12d6:	b9 cf       	rjmp	.-142    	; 0x124a <HID_Host_ConfigurePipes+0x54>
    12d8:	f6 01       	movw	r30, r12
    12da:	84 81       	ldd	r24, Z+4	; 0x04
    12dc:	95 81       	ldd	r25, Z+5	; 0x05
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	HIDInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    12de:	d8 01       	movw	r26, r16
    12e0:	12 96       	adiw	r26, 0x02	; 2
    12e2:	9c 93       	st	X, r25
    12e4:	8e 93       	st	-X, r24
    12e6:	11 97       	sbiw	r26, 0x01	; 1
    12e8:	82 81       	ldd	r24, Z+2	; 0x02
    12ea:	13 96       	adiw	r26, 0x03	; 3
    12ec:	8c 93       	st	X, r24
	HIDInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    12ee:	13 97       	sbiw	r26, 0x03	; 3
    12f0:	83 e0       	ldi	r24, 0x03	; 3
    12f2:	c8 2e       	mov	r12, r24
    12f4:	14 96       	adiw	r26, 0x04	; 4
	HIDInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_INTERRUPT;
    12f6:	cc 92       	st	X, r12
    12f8:	c8 01       	movw	r24, r16
    12fa:	61 e0       	ldi	r22, 0x01	; 1
    12fc:	c2 db       	rcall	.-2172   	; 0xa82 <Pipe_ConfigurePipeTable>

	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
    12fe:	88 23       	and	r24, r24
    1300:	b9 f1       	breq	.+110    	; 0x1370 <HID_Host_ConfigurePipes+0x17a>
    1302:	e1 14       	cp	r14, r1
    1304:	f1 04       	cpc	r15, r1
    1306:	a1 f0       	breq	.+40     	; 0x1330 <HID_Host_ConfigurePipes+0x13a>
    1308:	f7 01       	movw	r30, r14
	  return false;

	if (DataOUTEndpoint)
    130a:	84 81       	ldd	r24, Z+4	; 0x04
    130c:	95 81       	ldd	r25, Z+5	; 0x05
    130e:	d8 01       	movw	r26, r16
	{
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1310:	18 96       	adiw	r26, 0x08	; 8
    1312:	9c 93       	st	X, r25
    1314:	8e 93       	st	-X, r24
    1316:	17 97       	sbiw	r26, 0x07	; 7
    1318:	82 81       	ldd	r24, Z+2	; 0x02
    131a:	19 96       	adiw	r26, 0x09	; 9
    131c:	8c 93       	st	X, r24
    131e:	19 97       	sbiw	r26, 0x09	; 9
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1320:	1a 96       	adiw	r26, 0x0a	; 10
    1322:	cc 92       	st	X, r12
    1324:	c8 01       	movw	r24, r16
    1326:	06 96       	adiw	r24, 0x06	; 6
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;
    1328:	61 e0       	ldi	r22, 0x01	; 1
    132a:	ab db       	rcall	.-2218   	; 0xa82 <Pipe_ConfigurePipeTable>

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
    132c:	88 23       	and	r24, r24
    132e:	01 f1       	breq	.+64     	; 0x1370 <HID_Host_ConfigurePipes+0x17a>
    1330:	f5 01       	movw	r30, r10
    1332:	82 81       	ldd	r24, Z+2	; 0x02
    1334:	d8 01       	movw	r26, r16
    1336:	50 96       	adiw	r26, 0x10	; 16
    1338:	8c 93       	st	X, r24
		  return false;
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    133a:	50 97       	sbiw	r26, 0x10	; 16
    133c:	f4 01       	movw	r30, r8
    133e:	87 81       	ldd	r24, Z+7	; 0x07
    1340:	90 85       	ldd	r25, Z+8	; 0x08
    1342:	55 96       	adiw	r26, 0x15	; 21
    1344:	9c 93       	st	X, r25
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    1346:	8e 93       	st	-X, r24
    1348:	54 97       	sbiw	r26, 0x14	; 20
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	d5 01       	movw	r26, r10
    134e:	16 96       	adiw	r26, 0x06	; 6
    1350:	9c 91       	ld	r25, X
    1352:	16 97       	sbiw	r26, 0x06	; 6
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    1354:	99 23       	and	r25, r25
    1356:	09 f4       	brne	.+2      	; 0x135a <HID_Host_ConfigurePipes+0x164>
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	f8 01       	movw	r30, r16
    135c:	81 8b       	std	Z+17, r24	; 0x11
    135e:	88 e0       	ldi	r24, 0x08	; 8
    1360:	86 8b       	std	Z+22, r24	; 0x16
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	87 87       	std	Z+15, r24	; 0x0f
    1366:	04 c0       	rjmp	.+8      	; 0x1370 <HID_Host_ConfigurePipes+0x17a>
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	03 c0       	rjmp	.+6      	; 0x1372 <HID_Host_ConfigurePipes+0x17c>
	HIDInterfaceInfo->State.IsActive             = true;
    136c:	82 e0       	ldi	r24, 0x02	; 2
    136e:	01 c0       	rjmp	.+2      	; 0x1372 <HID_Host_ConfigurePipes+0x17c>
    1370:	80 e0       	ldi	r24, 0x00	; 0
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
		  return false;
    137a:	df 91       	pop	r29
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
	HIDInterfaceInfo->State.LargestReportSize    = 8;
	HIDInterfaceInfo->State.IsActive             = true;

	return HID_ENUMERROR_NoError;
}
    137c:	cf 91       	pop	r28
    137e:	1f 91       	pop	r17
    1380:	0f 91       	pop	r16
    1382:	ff 90       	pop	r15
    1384:	ef 90       	pop	r14
    1386:	df 90       	pop	r13
    1388:	cf 90       	pop	r12
    138a:	bf 90       	pop	r11
    138c:	af 90       	pop	r10
    138e:	9f 90       	pop	r9
    1390:	8f 90       	pop	r8
    1392:	08 95       	ret

00001394 <HID_Host_ReceiveReport>:
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	fc 01       	movw	r30, r24
    139a:	80 91 4f 01 	lds	r24, 0x014F
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    139e:	8b 30       	cpi	r24, 0x0B	; 11
    13a0:	d9 f5       	brne	.+118    	; 0x1418 <HID_Host_ReceiveReport+0x84>
    13a2:	87 85       	ldd	r24, Z+15	; 0x0f
    13a4:	88 23       	and	r24, r24
    13a6:	c1 f1       	breq	.+112    	; 0x1418 <HID_Host_ReceiveReport+0x84>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13a8:	80 81       	ld	r24, Z
    13aa:	8f 70       	andi	r24, 0x0F	; 15
    13ac:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13b0:	80 91 a9 00 	lds	r24, 0x00A9
    13b4:	8f 7b       	andi	r24, 0xBF	; 191
    13b6:	80 93 a9 00 	sts	0x00A9, r24

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    13ba:	83 89       	ldd	r24, Z+19	; 0x13
    13bc:	88 23       	and	r24, r24
    13be:	a9 f4       	brne	.+42     	; 0x13ea <HID_Host_ReceiveReport+0x56>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    13c0:	a5 85       	ldd	r26, Z+13	; 0x0d
    13c2:	b6 85       	ldd	r27, Z+14	; 0x0e
    13c4:	a8 52       	subi	r26, 0x28	; 40
    13c6:	bc 4f       	sbci	r27, 0xFC	; 252
    13c8:	8c 91       	ld	r24, X
    13ca:	88 23       	and	r24, r24
    13cc:	29 f0       	breq	.+10     	; 0x13d8 <HID_Host_ReceiveReport+0x44>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    13ce:	20 91 af 00 	lds	r18, 0x00AF
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
    13d2:	eb 01       	movw	r28, r22
    13d4:	29 93       	st	Y+, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <HID_Host_ReceiveReport+0x48>

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    13d8:	eb 01       	movw	r28, r22

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
	{
		uint8_t ReportID = 0;
    13da:	20 e0       	ldi	r18, 0x00	; 0
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    13dc:	85 85       	ldd	r24, Z+13	; 0x0d
    13de:	96 85       	ldd	r25, Z+14	; 0x0e
    13e0:	62 2f       	mov	r22, r18
    13e2:	40 e0       	ldi	r20, 0x00	; 0
    13e4:	8e d8       	rcall	.-3812   	; 0x502 <USB_GetHIDReportSize>
    13e6:	9c 01       	movw	r18, r24
    13e8:	05 c0       	rjmp	.+10     	; 0x13f4 <HID_Host_ReceiveReport+0x60>
    13ea:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13ee:	30 91 f7 00 	lds	r19, 0x00F7
    13f2:	eb 01       	movw	r28, r22

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    13f4:	ce 01       	movw	r24, r28
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NULL)) != PIPE_RWSTREAM_NoError)
    13f6:	b9 01       	movw	r22, r18
    13f8:	40 e0       	ldi	r20, 0x00	; 0
    13fa:	50 e0       	ldi	r21, 0x00	; 0
    13fc:	86 da       	rcall	.-2804   	; 0x90a <Pipe_Read_Stream_LE>
    13fe:	88 23       	and	r24, r24
    1400:	61 f4       	brne	.+24     	; 0x141a <HID_Host_ReceiveReport+0x86>
    1402:	90 91 a6 00 	lds	r25, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1406:	9e 77       	andi	r25, 0x7E	; 126
    1408:	90 93 a6 00 	sts	0x00A6, r25
    140c:	90 91 a9 00 	lds	r25, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1410:	90 64       	ori	r25, 0x40	; 64
    1412:	90 93 a9 00 	sts	0x00A9, r25
    1416:	01 c0       	rjmp	.+2      	; 0x141a <HID_Host_ReceiveReport+0x86>
    1418:	82 e0       	ldi	r24, 0x02	; 2
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    141a:	df 91       	pop	r29

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    141c:	cf 91       	pop	r28

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    141e:	08 95       	ret

00001420 <HID_Host_IsReportReceived>:
    1420:	fc 01       	movw	r30, r24
    1422:	80 91 4f 01 	lds	r24, 0x014F
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1426:	8b 30       	cpi	r24, 0x0B	; 11
    1428:	a9 f4       	brne	.+42     	; 0x1454 <HID_Host_IsReportReceived+0x34>
    142a:	87 85       	ldd	r24, Z+15	; 0x0f
    142c:	88 23       	and	r24, r24
    142e:	a1 f0       	breq	.+40     	; 0x1458 <HID_Host_IsReportReceived+0x38>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1430:	80 81       	ld	r24, Z
    1432:	8f 70       	andi	r24, 0x0F	; 15
    1434:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1438:	80 91 a9 00 	lds	r24, 0x00A9
    143c:	8f 7b       	andi	r24, 0xBF	; 191
    143e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1442:	80 91 a6 00 	lds	r24, 0x00A6
    1446:	81 70       	andi	r24, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1448:	90 91 a9 00 	lds	r25, 0x00A9
    144c:	90 64       	ori	r25, 0x40	; 64
    144e:	90 93 a9 00 	sts	0x00A9, r25

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    1452:	08 95       	ret
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return false;
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	08 95       	ret
    1458:	80 e0       	ldi	r24, 0x00	; 0
	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
}
    145a:	08 95       	ret

0000145c <HID_Host_SetBootProtocol>:

uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	ec 01       	movw	r28, r24
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
    1462:	89 89       	ldd	r24, Y+17	; 0x11
    1464:	88 23       	and	r24, r24
    1466:	f9 f0       	breq	.+62     	; 0x14a6 <HID_Host_SetBootProtocol+0x4a>
	  return HID_ERROR_LOGICAL;

	USB_ControlRequest = (USB_Request_Header_t)
    1468:	88 89       	ldd	r24, Y+16	; 0x10
    146a:	91 e2       	ldi	r25, 0x21	; 33
    146c:	90 93 47 01 	sts	0x0147, r25
    1470:	9b e0       	ldi	r25, 0x0B	; 11
    1472:	90 93 48 01 	sts	0x0148, r25
    1476:	10 92 4a 01 	sts	0x014A, r1
    147a:	10 92 49 01 	sts	0x0149, r1
    147e:	80 93 4b 01 	sts	0x014B, r24
    1482:	10 92 4c 01 	sts	0x014C, r1
    1486:	10 92 4e 01 	sts	0x014E, r1
    148a:	10 92 4d 01 	sts	0x014D, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    148e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	57 dd       	rcall	.-1362   	; 0xf46 <USB_Host_SendControlRequest>
    1498:	88 23       	and	r24, r24
    149a:	31 f4       	brne	.+12     	; 0x14a8 <HID_Host_SetBootProtocol+0x4c>
    149c:	98 e0       	ldi	r25, 0x08	; 8
	  return ErrorCode;

	HIDInterfaceInfo->State.LargestReportSize = 8;
    149e:	9e 8b       	std	Y+22, r25	; 0x16
    14a0:	91 e0       	ldi	r25, 0x01	; 1
	HIDInterfaceInfo->State.UsingBootProtocol = true;
    14a2:	9b 8b       	std	Y+19, r25	; 0x13
    14a4:	01 c0       	rjmp	.+2      	; 0x14a8 <HID_Host_SetBootProtocol+0x4c>

	return HOST_SENDCONTROL_Successful;
    14a6:	80 e8       	ldi	r24, 0x80	; 128
uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
	  return HID_ERROR_LOGICAL;
    14a8:	df 91       	pop	r29

	HIDInterfaceInfo->State.LargestReportSize = 8;
	HIDInterfaceInfo->State.UsingBootProtocol = true;

	return HOST_SENDCONTROL_Successful;
}
    14aa:	cf 91       	pop	r28
    14ac:	08 95       	ret

000014ae <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    14ae:	90 91 c8 00 	lds	r25, 0x00C8
    14b2:	95 ff       	sbrs	r25, 5
    14b4:	fc cf       	rjmp	.-8      	; 0x14ae <Serial_putchar>
				UDR1 = DataByte;
    14b6:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	08 95       	ret

000014c0 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    14c0:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    14c4:	87 ff       	sbrs	r24, 7
    14c6:	08 c0       	rjmp	.+16     	; 0x14d8 <Serial_getchar+0x18>
    14c8:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    14cc:	87 ff       	sbrs	r24, 7
    14ce:	07 c0       	rjmp	.+14     	; 0x14de <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    14d0:	80 91 ce 00 	lds	r24, 0x00CE
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	08 95       	ret
	  return _FDEV_EOF;
    14d8:	8e ef       	ldi	r24, 0xFE	; 254
    14da:	9f ef       	ldi	r25, 0xFF	; 255
    14dc:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    14de:	8f ef       	ldi	r24, 0xFF	; 255
    14e0:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    14e2:	08 95       	ret

000014e4 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    14e4:	fc 01       	movw	r30, r24
	if (!(Stream))
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	51 f4       	brne	.+20     	; 0x14fe <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    14ea:	e0 e5       	ldi	r30, 0x50	; 80
    14ec:	f1 e0       	ldi	r31, 0x01	; 1
    14ee:	f0 93 5f 01 	sts	0x015F, r31
    14f2:	e0 93 5e 01 	sts	0x015E, r30
		stdout = Stream;
    14f6:	f0 93 61 01 	sts	0x0161, r31
    14fa:	e0 93 60 01 	sts	0x0160, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    14fe:	8e e0       	ldi	r24, 0x0E	; 14
    1500:	df 01       	movw	r26, r30
    1502:	1d 92       	st	X+, r1
    1504:	8a 95       	dec	r24
    1506:	e9 f7       	brne	.-6      	; 0x1502 <Serial_CreateStream+0x1e>
    1508:	83 e0       	ldi	r24, 0x03	; 3
    150a:	83 83       	std	Z+3, r24	; 0x03
    150c:	87 e5       	ldi	r24, 0x57	; 87
    150e:	9a e0       	ldi	r25, 0x0A	; 10
    1510:	91 87       	std	Z+9, r25	; 0x09
    1512:	80 87       	std	Z+8, r24	; 0x08
    1514:	80 e6       	ldi	r24, 0x60	; 96
    1516:	9a e0       	ldi	r25, 0x0A	; 10
    1518:	93 87       	std	Z+11, r25	; 0x0b
    151a:	82 87       	std	Z+10, r24	; 0x0a
}
    151c:	08 95       	ret

0000151e <printf_P>:
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	fe 01       	movw	r30, r28
    1528:	35 96       	adiw	r30, 0x05	; 5
    152a:	61 91       	ld	r22, Z+
    152c:	71 91       	ld	r23, Z+
    152e:	80 91 60 01 	lds	r24, 0x0160
    1532:	90 91 61 01 	lds	r25, 0x0161
    1536:	dc 01       	movw	r26, r24
    1538:	13 96       	adiw	r26, 0x03	; 3
    153a:	2c 91       	ld	r18, X
    153c:	13 97       	sbiw	r26, 0x03	; 3
    153e:	28 60       	ori	r18, 0x08	; 8
    1540:	13 96       	adiw	r26, 0x03	; 3
    1542:	2c 93       	st	X, r18
    1544:	af 01       	movw	r20, r30
    1546:	39 d0       	rcall	.+114    	; 0x15ba <vfprintf>
    1548:	e0 91 60 01 	lds	r30, 0x0160
    154c:	f0 91 61 01 	lds	r31, 0x0161
    1550:	23 81       	ldd	r18, Z+3	; 0x03
    1552:	27 7f       	andi	r18, 0xF7	; 247
    1554:	23 83       	std	Z+3, r18	; 0x03
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	08 95       	ret

0000155c <puts_P>:
    155c:	0f 93       	push	r16
    155e:	1f 93       	push	r17
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	8c 01       	movw	r16, r24
    1566:	e0 91 60 01 	lds	r30, 0x0160
    156a:	f0 91 61 01 	lds	r31, 0x0161
    156e:	83 81       	ldd	r24, Z+3	; 0x03
    1570:	81 ff       	sbrs	r24, 1
    1572:	1b c0       	rjmp	.+54     	; 0x15aa <puts_P+0x4e>
    1574:	c0 e0       	ldi	r28, 0x00	; 0
    1576:	d0 e0       	ldi	r29, 0x00	; 0
    1578:	07 c0       	rjmp	.+14     	; 0x1588 <puts_P+0x2c>
    157a:	09 95       	icall
    157c:	00 97       	sbiw	r24, 0x00	; 0
    157e:	11 f0       	breq	.+4      	; 0x1584 <puts_P+0x28>
    1580:	cf ef       	ldi	r28, 0xFF	; 255
    1582:	df ef       	ldi	r29, 0xFF	; 255
    1584:	0f 5f       	subi	r16, 0xFF	; 255
    1586:	1f 4f       	sbci	r17, 0xFF	; 255
    1588:	f8 01       	movw	r30, r16
    158a:	84 91       	lpm	r24, Z
    158c:	60 91 60 01 	lds	r22, 0x0160
    1590:	70 91 61 01 	lds	r23, 0x0161
    1594:	db 01       	movw	r26, r22
    1596:	18 96       	adiw	r26, 0x08	; 8
    1598:	ed 91       	ld	r30, X+
    159a:	fc 91       	ld	r31, X
    159c:	19 97       	sbiw	r26, 0x09	; 9
    159e:	88 23       	and	r24, r24
    15a0:	61 f7       	brne	.-40     	; 0x157a <puts_P+0x1e>
    15a2:	8a e0       	ldi	r24, 0x0A	; 10
    15a4:	09 95       	icall
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	11 f0       	breq	.+4      	; 0x15ae <puts_P+0x52>
    15aa:	cf ef       	ldi	r28, 0xFF	; 255
    15ac:	df ef       	ldi	r29, 0xFF	; 255
    15ae:	ce 01       	movw	r24, r28
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	1f 91       	pop	r17
    15b6:	0f 91       	pop	r16
    15b8:	08 95       	ret

000015ba <vfprintf>:
    15ba:	2f 92       	push	r2
    15bc:	3f 92       	push	r3
    15be:	4f 92       	push	r4
    15c0:	5f 92       	push	r5
    15c2:	6f 92       	push	r6
    15c4:	7f 92       	push	r7
    15c6:	8f 92       	push	r8
    15c8:	9f 92       	push	r9
    15ca:	af 92       	push	r10
    15cc:	bf 92       	push	r11
    15ce:	cf 92       	push	r12
    15d0:	df 92       	push	r13
    15d2:	ef 92       	push	r14
    15d4:	ff 92       	push	r15
    15d6:	0f 93       	push	r16
    15d8:	1f 93       	push	r17
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	2d 97       	sbiw	r28, 0x0d	; 13
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	3c 01       	movw	r6, r24
    15f0:	7d 87       	std	Y+13, r23	; 0x0d
    15f2:	6c 87       	std	Y+12, r22	; 0x0c
    15f4:	5a 01       	movw	r10, r20
    15f6:	fc 01       	movw	r30, r24
    15f8:	17 82       	std	Z+7, r1	; 0x07
    15fa:	16 82       	std	Z+6, r1	; 0x06
    15fc:	83 81       	ldd	r24, Z+3	; 0x03
    15fe:	81 ff       	sbrs	r24, 1
    1600:	bb c1       	rjmp	.+886    	; 0x1978 <vfprintf+0x3be>
    1602:	2e 01       	movw	r4, r28
    1604:	08 94       	sec
    1606:	41 1c       	adc	r4, r1
    1608:	51 1c       	adc	r5, r1
    160a:	f3 01       	movw	r30, r6
    160c:	93 81       	ldd	r25, Z+3	; 0x03
    160e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1610:	fd 85       	ldd	r31, Y+13	; 0x0d
    1612:	93 fd       	sbrc	r25, 3
    1614:	85 91       	lpm	r24, Z+
    1616:	93 ff       	sbrs	r25, 3
    1618:	81 91       	ld	r24, Z+
    161a:	fd 87       	std	Y+13, r31	; 0x0d
    161c:	ec 87       	std	Y+12, r30	; 0x0c
    161e:	88 23       	and	r24, r24
    1620:	09 f4       	brne	.+2      	; 0x1624 <vfprintf+0x6a>
    1622:	a6 c1       	rjmp	.+844    	; 0x1970 <vfprintf+0x3b6>
    1624:	85 32       	cpi	r24, 0x25	; 37
    1626:	41 f4       	brne	.+16     	; 0x1638 <vfprintf+0x7e>
    1628:	93 fd       	sbrc	r25, 3
    162a:	85 91       	lpm	r24, Z+
    162c:	93 ff       	sbrs	r25, 3
    162e:	81 91       	ld	r24, Z+
    1630:	fd 87       	std	Y+13, r31	; 0x0d
    1632:	ec 87       	std	Y+12, r30	; 0x0c
    1634:	85 32       	cpi	r24, 0x25	; 37
    1636:	21 f4       	brne	.+8      	; 0x1640 <vfprintf+0x86>
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	b3 01       	movw	r22, r6
    163c:	ce d1       	rcall	.+924    	; 0x19da <fputc>
    163e:	e5 cf       	rjmp	.-54     	; 0x160a <vfprintf+0x50>
    1640:	ff 24       	eor	r15, r15
    1642:	ee 24       	eor	r14, r14
    1644:	10 e0       	ldi	r17, 0x00	; 0
    1646:	10 32       	cpi	r17, 0x20	; 32
    1648:	b0 f4       	brcc	.+44     	; 0x1676 <vfprintf+0xbc>
    164a:	8b 32       	cpi	r24, 0x2B	; 43
    164c:	69 f0       	breq	.+26     	; 0x1668 <vfprintf+0xae>
    164e:	8c 32       	cpi	r24, 0x2C	; 44
    1650:	28 f4       	brcc	.+10     	; 0x165c <vfprintf+0xa2>
    1652:	80 32       	cpi	r24, 0x20	; 32
    1654:	51 f0       	breq	.+20     	; 0x166a <vfprintf+0xb0>
    1656:	83 32       	cpi	r24, 0x23	; 35
    1658:	71 f4       	brne	.+28     	; 0x1676 <vfprintf+0xbc>
    165a:	0b c0       	rjmp	.+22     	; 0x1672 <vfprintf+0xb8>
    165c:	8d 32       	cpi	r24, 0x2D	; 45
    165e:	39 f0       	breq	.+14     	; 0x166e <vfprintf+0xb4>
    1660:	80 33       	cpi	r24, 0x30	; 48
    1662:	49 f4       	brne	.+18     	; 0x1676 <vfprintf+0xbc>
    1664:	11 60       	ori	r17, 0x01	; 1
    1666:	2c c0       	rjmp	.+88     	; 0x16c0 <vfprintf+0x106>
    1668:	12 60       	ori	r17, 0x02	; 2
    166a:	14 60       	ori	r17, 0x04	; 4
    166c:	29 c0       	rjmp	.+82     	; 0x16c0 <vfprintf+0x106>
    166e:	18 60       	ori	r17, 0x08	; 8
    1670:	27 c0       	rjmp	.+78     	; 0x16c0 <vfprintf+0x106>
    1672:	10 61       	ori	r17, 0x10	; 16
    1674:	25 c0       	rjmp	.+74     	; 0x16c0 <vfprintf+0x106>
    1676:	17 fd       	sbrc	r17, 7
    1678:	2e c0       	rjmp	.+92     	; 0x16d6 <vfprintf+0x11c>
    167a:	28 2f       	mov	r18, r24
    167c:	20 53       	subi	r18, 0x30	; 48
    167e:	2a 30       	cpi	r18, 0x0A	; 10
    1680:	98 f4       	brcc	.+38     	; 0x16a8 <vfprintf+0xee>
    1682:	16 ff       	sbrs	r17, 6
    1684:	08 c0       	rjmp	.+16     	; 0x1696 <vfprintf+0xdc>
    1686:	8f 2d       	mov	r24, r15
    1688:	88 0f       	add	r24, r24
    168a:	f8 2e       	mov	r15, r24
    168c:	ff 0c       	add	r15, r15
    168e:	ff 0c       	add	r15, r15
    1690:	f8 0e       	add	r15, r24
    1692:	f2 0e       	add	r15, r18
    1694:	15 c0       	rjmp	.+42     	; 0x16c0 <vfprintf+0x106>
    1696:	8e 2d       	mov	r24, r14
    1698:	88 0f       	add	r24, r24
    169a:	e8 2e       	mov	r14, r24
    169c:	ee 0c       	add	r14, r14
    169e:	ee 0c       	add	r14, r14
    16a0:	e8 0e       	add	r14, r24
    16a2:	e2 0e       	add	r14, r18
    16a4:	10 62       	ori	r17, 0x20	; 32
    16a6:	0c c0       	rjmp	.+24     	; 0x16c0 <vfprintf+0x106>
    16a8:	8e 32       	cpi	r24, 0x2E	; 46
    16aa:	21 f4       	brne	.+8      	; 0x16b4 <vfprintf+0xfa>
    16ac:	16 fd       	sbrc	r17, 6
    16ae:	60 c1       	rjmp	.+704    	; 0x1970 <vfprintf+0x3b6>
    16b0:	10 64       	ori	r17, 0x40	; 64
    16b2:	06 c0       	rjmp	.+12     	; 0x16c0 <vfprintf+0x106>
    16b4:	8c 36       	cpi	r24, 0x6C	; 108
    16b6:	11 f4       	brne	.+4      	; 0x16bc <vfprintf+0x102>
    16b8:	10 68       	ori	r17, 0x80	; 128
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <vfprintf+0x106>
    16bc:	88 36       	cpi	r24, 0x68	; 104
    16be:	59 f4       	brne	.+22     	; 0x16d6 <vfprintf+0x11c>
    16c0:	ec 85       	ldd	r30, Y+12	; 0x0c
    16c2:	fd 85       	ldd	r31, Y+13	; 0x0d
    16c4:	93 fd       	sbrc	r25, 3
    16c6:	85 91       	lpm	r24, Z+
    16c8:	93 ff       	sbrs	r25, 3
    16ca:	81 91       	ld	r24, Z+
    16cc:	fd 87       	std	Y+13, r31	; 0x0d
    16ce:	ec 87       	std	Y+12, r30	; 0x0c
    16d0:	88 23       	and	r24, r24
    16d2:	09 f0       	breq	.+2      	; 0x16d6 <vfprintf+0x11c>
    16d4:	b8 cf       	rjmp	.-144    	; 0x1646 <vfprintf+0x8c>
    16d6:	98 2f       	mov	r25, r24
    16d8:	95 54       	subi	r25, 0x45	; 69
    16da:	93 30       	cpi	r25, 0x03	; 3
    16dc:	18 f0       	brcs	.+6      	; 0x16e4 <vfprintf+0x12a>
    16de:	90 52       	subi	r25, 0x20	; 32
    16e0:	93 30       	cpi	r25, 0x03	; 3
    16e2:	38 f4       	brcc	.+14     	; 0x16f2 <vfprintf+0x138>
    16e4:	24 e0       	ldi	r18, 0x04	; 4
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	a2 0e       	add	r10, r18
    16ea:	b3 1e       	adc	r11, r19
    16ec:	3f e3       	ldi	r19, 0x3F	; 63
    16ee:	39 83       	std	Y+1, r19	; 0x01
    16f0:	0f c0       	rjmp	.+30     	; 0x1710 <vfprintf+0x156>
    16f2:	83 36       	cpi	r24, 0x63	; 99
    16f4:	31 f0       	breq	.+12     	; 0x1702 <vfprintf+0x148>
    16f6:	83 37       	cpi	r24, 0x73	; 115
    16f8:	81 f0       	breq	.+32     	; 0x171a <vfprintf+0x160>
    16fa:	83 35       	cpi	r24, 0x53	; 83
    16fc:	09 f0       	breq	.+2      	; 0x1700 <vfprintf+0x146>
    16fe:	56 c0       	rjmp	.+172    	; 0x17ac <vfprintf+0x1f2>
    1700:	21 c0       	rjmp	.+66     	; 0x1744 <vfprintf+0x18a>
    1702:	f5 01       	movw	r30, r10
    1704:	80 81       	ld	r24, Z
    1706:	89 83       	std	Y+1, r24	; 0x01
    1708:	22 e0       	ldi	r18, 0x02	; 2
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	a2 0e       	add	r10, r18
    170e:	b3 1e       	adc	r11, r19
    1710:	21 e0       	ldi	r18, 0x01	; 1
    1712:	c2 2e       	mov	r12, r18
    1714:	d1 2c       	mov	r13, r1
    1716:	42 01       	movw	r8, r4
    1718:	13 c0       	rjmp	.+38     	; 0x1740 <vfprintf+0x186>
    171a:	92 e0       	ldi	r25, 0x02	; 2
    171c:	29 2e       	mov	r2, r25
    171e:	31 2c       	mov	r3, r1
    1720:	2a 0c       	add	r2, r10
    1722:	3b 1c       	adc	r3, r11
    1724:	f5 01       	movw	r30, r10
    1726:	80 80       	ld	r8, Z
    1728:	91 80       	ldd	r9, Z+1	; 0x01
    172a:	16 ff       	sbrs	r17, 6
    172c:	03 c0       	rjmp	.+6      	; 0x1734 <vfprintf+0x17a>
    172e:	6f 2d       	mov	r22, r15
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <vfprintf+0x17e>
    1734:	6f ef       	ldi	r22, 0xFF	; 255
    1736:	7f ef       	ldi	r23, 0xFF	; 255
    1738:	c4 01       	movw	r24, r8
    173a:	44 d1       	rcall	.+648    	; 0x19c4 <strnlen>
    173c:	6c 01       	movw	r12, r24
    173e:	51 01       	movw	r10, r2
    1740:	1f 77       	andi	r17, 0x7F	; 127
    1742:	14 c0       	rjmp	.+40     	; 0x176c <vfprintf+0x1b2>
    1744:	82 e0       	ldi	r24, 0x02	; 2
    1746:	28 2e       	mov	r2, r24
    1748:	31 2c       	mov	r3, r1
    174a:	2a 0c       	add	r2, r10
    174c:	3b 1c       	adc	r3, r11
    174e:	f5 01       	movw	r30, r10
    1750:	80 80       	ld	r8, Z
    1752:	91 80       	ldd	r9, Z+1	; 0x01
    1754:	16 ff       	sbrs	r17, 6
    1756:	03 c0       	rjmp	.+6      	; 0x175e <vfprintf+0x1a4>
    1758:	6f 2d       	mov	r22, r15
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <vfprintf+0x1a8>
    175e:	6f ef       	ldi	r22, 0xFF	; 255
    1760:	7f ef       	ldi	r23, 0xFF	; 255
    1762:	c4 01       	movw	r24, r8
    1764:	24 d1       	rcall	.+584    	; 0x19ae <strnlen_P>
    1766:	6c 01       	movw	r12, r24
    1768:	10 68       	ori	r17, 0x80	; 128
    176a:	51 01       	movw	r10, r2
    176c:	13 fd       	sbrc	r17, 3
    176e:	1a c0       	rjmp	.+52     	; 0x17a4 <vfprintf+0x1ea>
    1770:	05 c0       	rjmp	.+10     	; 0x177c <vfprintf+0x1c2>
    1772:	80 e2       	ldi	r24, 0x20	; 32
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	b3 01       	movw	r22, r6
    1778:	30 d1       	rcall	.+608    	; 0x19da <fputc>
    177a:	ea 94       	dec	r14
    177c:	8e 2d       	mov	r24, r14
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	c8 16       	cp	r12, r24
    1782:	d9 06       	cpc	r13, r25
    1784:	b0 f3       	brcs	.-20     	; 0x1772 <vfprintf+0x1b8>
    1786:	0e c0       	rjmp	.+28     	; 0x17a4 <vfprintf+0x1ea>
    1788:	f4 01       	movw	r30, r8
    178a:	17 fd       	sbrc	r17, 7
    178c:	85 91       	lpm	r24, Z+
    178e:	17 ff       	sbrs	r17, 7
    1790:	81 91       	ld	r24, Z+
    1792:	4f 01       	movw	r8, r30
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	b3 01       	movw	r22, r6
    1798:	20 d1       	rcall	.+576    	; 0x19da <fputc>
    179a:	e1 10       	cpse	r14, r1
    179c:	ea 94       	dec	r14
    179e:	08 94       	sec
    17a0:	c1 08       	sbc	r12, r1
    17a2:	d1 08       	sbc	r13, r1
    17a4:	c1 14       	cp	r12, r1
    17a6:	d1 04       	cpc	r13, r1
    17a8:	79 f7       	brne	.-34     	; 0x1788 <vfprintf+0x1ce>
    17aa:	df c0       	rjmp	.+446    	; 0x196a <vfprintf+0x3b0>
    17ac:	84 36       	cpi	r24, 0x64	; 100
    17ae:	11 f0       	breq	.+4      	; 0x17b4 <vfprintf+0x1fa>
    17b0:	89 36       	cpi	r24, 0x69	; 105
    17b2:	49 f5       	brne	.+82     	; 0x1806 <vfprintf+0x24c>
    17b4:	f5 01       	movw	r30, r10
    17b6:	17 ff       	sbrs	r17, 7
    17b8:	07 c0       	rjmp	.+14     	; 0x17c8 <vfprintf+0x20e>
    17ba:	80 81       	ld	r24, Z
    17bc:	91 81       	ldd	r25, Z+1	; 0x01
    17be:	a2 81       	ldd	r26, Z+2	; 0x02
    17c0:	b3 81       	ldd	r27, Z+3	; 0x03
    17c2:	24 e0       	ldi	r18, 0x04	; 4
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	08 c0       	rjmp	.+16     	; 0x17d8 <vfprintf+0x21e>
    17c8:	80 81       	ld	r24, Z
    17ca:	91 81       	ldd	r25, Z+1	; 0x01
    17cc:	aa 27       	eor	r26, r26
    17ce:	97 fd       	sbrc	r25, 7
    17d0:	a0 95       	com	r26
    17d2:	ba 2f       	mov	r27, r26
    17d4:	22 e0       	ldi	r18, 0x02	; 2
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	a2 0e       	add	r10, r18
    17da:	b3 1e       	adc	r11, r19
    17dc:	01 2f       	mov	r16, r17
    17de:	0f 76       	andi	r16, 0x6F	; 111
    17e0:	b7 ff       	sbrs	r27, 7
    17e2:	08 c0       	rjmp	.+16     	; 0x17f4 <vfprintf+0x23a>
    17e4:	b0 95       	com	r27
    17e6:	a0 95       	com	r26
    17e8:	90 95       	com	r25
    17ea:	81 95       	neg	r24
    17ec:	9f 4f       	sbci	r25, 0xFF	; 255
    17ee:	af 4f       	sbci	r26, 0xFF	; 255
    17f0:	bf 4f       	sbci	r27, 0xFF	; 255
    17f2:	00 68       	ori	r16, 0x80	; 128
    17f4:	bc 01       	movw	r22, r24
    17f6:	cd 01       	movw	r24, r26
    17f8:	a2 01       	movw	r20, r4
    17fa:	2a e0       	ldi	r18, 0x0A	; 10
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	19 d1       	rcall	.+562    	; 0x1a32 <__ultoa_invert>
    1800:	d8 2e       	mov	r13, r24
    1802:	d4 18       	sub	r13, r4
    1804:	3e c0       	rjmp	.+124    	; 0x1882 <vfprintf+0x2c8>
    1806:	85 37       	cpi	r24, 0x75	; 117
    1808:	21 f4       	brne	.+8      	; 0x1812 <vfprintf+0x258>
    180a:	1f 7e       	andi	r17, 0xEF	; 239
    180c:	2a e0       	ldi	r18, 0x0A	; 10
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	20 c0       	rjmp	.+64     	; 0x1852 <vfprintf+0x298>
    1812:	19 7f       	andi	r17, 0xF9	; 249
    1814:	8f 36       	cpi	r24, 0x6F	; 111
    1816:	a9 f0       	breq	.+42     	; 0x1842 <vfprintf+0x288>
    1818:	80 37       	cpi	r24, 0x70	; 112
    181a:	20 f4       	brcc	.+8      	; 0x1824 <vfprintf+0x26a>
    181c:	88 35       	cpi	r24, 0x58	; 88
    181e:	09 f0       	breq	.+2      	; 0x1822 <vfprintf+0x268>
    1820:	a7 c0       	rjmp	.+334    	; 0x1970 <vfprintf+0x3b6>
    1822:	0b c0       	rjmp	.+22     	; 0x183a <vfprintf+0x280>
    1824:	80 37       	cpi	r24, 0x70	; 112
    1826:	21 f0       	breq	.+8      	; 0x1830 <vfprintf+0x276>
    1828:	88 37       	cpi	r24, 0x78	; 120
    182a:	09 f0       	breq	.+2      	; 0x182e <vfprintf+0x274>
    182c:	a1 c0       	rjmp	.+322    	; 0x1970 <vfprintf+0x3b6>
    182e:	01 c0       	rjmp	.+2      	; 0x1832 <vfprintf+0x278>
    1830:	10 61       	ori	r17, 0x10	; 16
    1832:	14 ff       	sbrs	r17, 4
    1834:	09 c0       	rjmp	.+18     	; 0x1848 <vfprintf+0x28e>
    1836:	14 60       	ori	r17, 0x04	; 4
    1838:	07 c0       	rjmp	.+14     	; 0x1848 <vfprintf+0x28e>
    183a:	14 ff       	sbrs	r17, 4
    183c:	08 c0       	rjmp	.+16     	; 0x184e <vfprintf+0x294>
    183e:	16 60       	ori	r17, 0x06	; 6
    1840:	06 c0       	rjmp	.+12     	; 0x184e <vfprintf+0x294>
    1842:	28 e0       	ldi	r18, 0x08	; 8
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	05 c0       	rjmp	.+10     	; 0x1852 <vfprintf+0x298>
    1848:	20 e1       	ldi	r18, 0x10	; 16
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <vfprintf+0x298>
    184e:	20 e1       	ldi	r18, 0x10	; 16
    1850:	32 e0       	ldi	r19, 0x02	; 2
    1852:	f5 01       	movw	r30, r10
    1854:	17 ff       	sbrs	r17, 7
    1856:	07 c0       	rjmp	.+14     	; 0x1866 <vfprintf+0x2ac>
    1858:	60 81       	ld	r22, Z
    185a:	71 81       	ldd	r23, Z+1	; 0x01
    185c:	82 81       	ldd	r24, Z+2	; 0x02
    185e:	93 81       	ldd	r25, Z+3	; 0x03
    1860:	44 e0       	ldi	r20, 0x04	; 4
    1862:	50 e0       	ldi	r21, 0x00	; 0
    1864:	06 c0       	rjmp	.+12     	; 0x1872 <vfprintf+0x2b8>
    1866:	60 81       	ld	r22, Z
    1868:	71 81       	ldd	r23, Z+1	; 0x01
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	42 e0       	ldi	r20, 0x02	; 2
    1870:	50 e0       	ldi	r21, 0x00	; 0
    1872:	a4 0e       	add	r10, r20
    1874:	b5 1e       	adc	r11, r21
    1876:	a2 01       	movw	r20, r4
    1878:	dc d0       	rcall	.+440    	; 0x1a32 <__ultoa_invert>
    187a:	d8 2e       	mov	r13, r24
    187c:	d4 18       	sub	r13, r4
    187e:	01 2f       	mov	r16, r17
    1880:	0f 77       	andi	r16, 0x7F	; 127
    1882:	06 ff       	sbrs	r16, 6
    1884:	09 c0       	rjmp	.+18     	; 0x1898 <vfprintf+0x2de>
    1886:	0e 7f       	andi	r16, 0xFE	; 254
    1888:	df 14       	cp	r13, r15
    188a:	30 f4       	brcc	.+12     	; 0x1898 <vfprintf+0x2de>
    188c:	04 ff       	sbrs	r16, 4
    188e:	06 c0       	rjmp	.+12     	; 0x189c <vfprintf+0x2e2>
    1890:	02 fd       	sbrc	r16, 2
    1892:	04 c0       	rjmp	.+8      	; 0x189c <vfprintf+0x2e2>
    1894:	0f 7e       	andi	r16, 0xEF	; 239
    1896:	02 c0       	rjmp	.+4      	; 0x189c <vfprintf+0x2e2>
    1898:	1d 2d       	mov	r17, r13
    189a:	01 c0       	rjmp	.+2      	; 0x189e <vfprintf+0x2e4>
    189c:	1f 2d       	mov	r17, r15
    189e:	80 2f       	mov	r24, r16
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	04 ff       	sbrs	r16, 4
    18a4:	0c c0       	rjmp	.+24     	; 0x18be <vfprintf+0x304>
    18a6:	fe 01       	movw	r30, r28
    18a8:	ed 0d       	add	r30, r13
    18aa:	f1 1d       	adc	r31, r1
    18ac:	20 81       	ld	r18, Z
    18ae:	20 33       	cpi	r18, 0x30	; 48
    18b0:	11 f4       	brne	.+4      	; 0x18b6 <vfprintf+0x2fc>
    18b2:	09 7e       	andi	r16, 0xE9	; 233
    18b4:	09 c0       	rjmp	.+18     	; 0x18c8 <vfprintf+0x30e>
    18b6:	02 ff       	sbrs	r16, 2
    18b8:	06 c0       	rjmp	.+12     	; 0x18c6 <vfprintf+0x30c>
    18ba:	1e 5f       	subi	r17, 0xFE	; 254
    18bc:	05 c0       	rjmp	.+10     	; 0x18c8 <vfprintf+0x30e>
    18be:	86 78       	andi	r24, 0x86	; 134
    18c0:	90 70       	andi	r25, 0x00	; 0
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	09 f0       	breq	.+2      	; 0x18c8 <vfprintf+0x30e>
    18c6:	1f 5f       	subi	r17, 0xFF	; 255
    18c8:	80 2e       	mov	r8, r16
    18ca:	99 24       	eor	r9, r9
    18cc:	03 fd       	sbrc	r16, 3
    18ce:	11 c0       	rjmp	.+34     	; 0x18f2 <vfprintf+0x338>
    18d0:	00 ff       	sbrs	r16, 0
    18d2:	0c c0       	rjmp	.+24     	; 0x18ec <vfprintf+0x332>
    18d4:	fd 2c       	mov	r15, r13
    18d6:	1e 15       	cp	r17, r14
    18d8:	48 f4       	brcc	.+18     	; 0x18ec <vfprintf+0x332>
    18da:	fe 0c       	add	r15, r14
    18dc:	f1 1a       	sub	r15, r17
    18de:	1e 2d       	mov	r17, r14
    18e0:	05 c0       	rjmp	.+10     	; 0x18ec <vfprintf+0x332>
    18e2:	80 e2       	ldi	r24, 0x20	; 32
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	b3 01       	movw	r22, r6
    18e8:	78 d0       	rcall	.+240    	; 0x19da <fputc>
    18ea:	1f 5f       	subi	r17, 0xFF	; 255
    18ec:	1e 15       	cp	r17, r14
    18ee:	c8 f3       	brcs	.-14     	; 0x18e2 <vfprintf+0x328>
    18f0:	04 c0       	rjmp	.+8      	; 0x18fa <vfprintf+0x340>
    18f2:	1e 15       	cp	r17, r14
    18f4:	10 f4       	brcc	.+4      	; 0x18fa <vfprintf+0x340>
    18f6:	e1 1a       	sub	r14, r17
    18f8:	01 c0       	rjmp	.+2      	; 0x18fc <vfprintf+0x342>
    18fa:	ee 24       	eor	r14, r14
    18fc:	84 fe       	sbrs	r8, 4
    18fe:	0e c0       	rjmp	.+28     	; 0x191c <vfprintf+0x362>
    1900:	80 e3       	ldi	r24, 0x30	; 48
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	b3 01       	movw	r22, r6
    1906:	69 d0       	rcall	.+210    	; 0x19da <fputc>
    1908:	82 fe       	sbrs	r8, 2
    190a:	1d c0       	rjmp	.+58     	; 0x1946 <vfprintf+0x38c>
    190c:	81 fe       	sbrs	r8, 1
    190e:	03 c0       	rjmp	.+6      	; 0x1916 <vfprintf+0x35c>
    1910:	88 e5       	ldi	r24, 0x58	; 88
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	10 c0       	rjmp	.+32     	; 0x1936 <vfprintf+0x37c>
    1916:	88 e7       	ldi	r24, 0x78	; 120
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	0d c0       	rjmp	.+26     	; 0x1936 <vfprintf+0x37c>
    191c:	c4 01       	movw	r24, r8
    191e:	86 78       	andi	r24, 0x86	; 134
    1920:	90 70       	andi	r25, 0x00	; 0
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	81 f0       	breq	.+32     	; 0x1946 <vfprintf+0x38c>
    1926:	81 fc       	sbrc	r8, 1
    1928:	02 c0       	rjmp	.+4      	; 0x192e <vfprintf+0x374>
    192a:	80 e2       	ldi	r24, 0x20	; 32
    192c:	01 c0       	rjmp	.+2      	; 0x1930 <vfprintf+0x376>
    192e:	8b e2       	ldi	r24, 0x2B	; 43
    1930:	07 fd       	sbrc	r16, 7
    1932:	8d e2       	ldi	r24, 0x2D	; 45
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	b3 01       	movw	r22, r6
    1938:	50 d0       	rcall	.+160    	; 0x19da <fputc>
    193a:	05 c0       	rjmp	.+10     	; 0x1946 <vfprintf+0x38c>
    193c:	80 e3       	ldi	r24, 0x30	; 48
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	b3 01       	movw	r22, r6
    1942:	4b d0       	rcall	.+150    	; 0x19da <fputc>
    1944:	fa 94       	dec	r15
    1946:	df 14       	cp	r13, r15
    1948:	c8 f3       	brcs	.-14     	; 0x193c <vfprintf+0x382>
    194a:	da 94       	dec	r13
    194c:	f2 01       	movw	r30, r4
    194e:	ed 0d       	add	r30, r13
    1950:	f1 1d       	adc	r31, r1
    1952:	80 81       	ld	r24, Z
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	b3 01       	movw	r22, r6
    1958:	40 d0       	rcall	.+128    	; 0x19da <fputc>
    195a:	dd 20       	and	r13, r13
    195c:	b1 f7       	brne	.-20     	; 0x194a <vfprintf+0x390>
    195e:	05 c0       	rjmp	.+10     	; 0x196a <vfprintf+0x3b0>
    1960:	80 e2       	ldi	r24, 0x20	; 32
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	b3 01       	movw	r22, r6
    1966:	39 d0       	rcall	.+114    	; 0x19da <fputc>
    1968:	ea 94       	dec	r14
    196a:	ee 20       	and	r14, r14
    196c:	c9 f7       	brne	.-14     	; 0x1960 <vfprintf+0x3a6>
    196e:	4d ce       	rjmp	.-870    	; 0x160a <vfprintf+0x50>
    1970:	f3 01       	movw	r30, r6
    1972:	86 81       	ldd	r24, Z+6	; 0x06
    1974:	97 81       	ldd	r25, Z+7	; 0x07
    1976:	02 c0       	rjmp	.+4      	; 0x197c <vfprintf+0x3c2>
    1978:	8f ef       	ldi	r24, 0xFF	; 255
    197a:	9f ef       	ldi	r25, 0xFF	; 255
    197c:	2d 96       	adiw	r28, 0x0d	; 13
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	de bf       	out	0x3e, r29	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	cd bf       	out	0x3d, r28	; 61
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	1f 91       	pop	r17
    198e:	0f 91       	pop	r16
    1990:	ff 90       	pop	r15
    1992:	ef 90       	pop	r14
    1994:	df 90       	pop	r13
    1996:	cf 90       	pop	r12
    1998:	bf 90       	pop	r11
    199a:	af 90       	pop	r10
    199c:	9f 90       	pop	r9
    199e:	8f 90       	pop	r8
    19a0:	7f 90       	pop	r7
    19a2:	6f 90       	pop	r6
    19a4:	5f 90       	pop	r5
    19a6:	4f 90       	pop	r4
    19a8:	3f 90       	pop	r3
    19aa:	2f 90       	pop	r2
    19ac:	08 95       	ret

000019ae <strnlen_P>:
    19ae:	fc 01       	movw	r30, r24
    19b0:	05 90       	lpm	r0, Z+
    19b2:	61 50       	subi	r22, 0x01	; 1
    19b4:	70 40       	sbci	r23, 0x00	; 0
    19b6:	01 10       	cpse	r0, r1
    19b8:	d8 f7       	brcc	.-10     	; 0x19b0 <strnlen_P+0x2>
    19ba:	80 95       	com	r24
    19bc:	90 95       	com	r25
    19be:	8e 0f       	add	r24, r30
    19c0:	9f 1f       	adc	r25, r31
    19c2:	08 95       	ret

000019c4 <strnlen>:
    19c4:	fc 01       	movw	r30, r24
    19c6:	61 50       	subi	r22, 0x01	; 1
    19c8:	70 40       	sbci	r23, 0x00	; 0
    19ca:	01 90       	ld	r0, Z+
    19cc:	01 10       	cpse	r0, r1
    19ce:	d8 f7       	brcc	.-10     	; 0x19c6 <strnlen+0x2>
    19d0:	80 95       	com	r24
    19d2:	90 95       	com	r25
    19d4:	8e 0f       	add	r24, r30
    19d6:	9f 1f       	adc	r25, r31
    19d8:	08 95       	ret

000019da <fputc>:
    19da:	0f 93       	push	r16
    19dc:	1f 93       	push	r17
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
    19e2:	8c 01       	movw	r16, r24
    19e4:	eb 01       	movw	r28, r22
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	81 ff       	sbrs	r24, 1
    19ea:	1b c0       	rjmp	.+54     	; 0x1a22 <fputc+0x48>
    19ec:	82 ff       	sbrs	r24, 2
    19ee:	0d c0       	rjmp	.+26     	; 0x1a0a <fputc+0x30>
    19f0:	2e 81       	ldd	r18, Y+6	; 0x06
    19f2:	3f 81       	ldd	r19, Y+7	; 0x07
    19f4:	8c 81       	ldd	r24, Y+4	; 0x04
    19f6:	9d 81       	ldd	r25, Y+5	; 0x05
    19f8:	28 17       	cp	r18, r24
    19fa:	39 07       	cpc	r19, r25
    19fc:	64 f4       	brge	.+24     	; 0x1a16 <fputc+0x3c>
    19fe:	e8 81       	ld	r30, Y
    1a00:	f9 81       	ldd	r31, Y+1	; 0x01
    1a02:	01 93       	st	Z+, r16
    1a04:	f9 83       	std	Y+1, r31	; 0x01
    1a06:	e8 83       	st	Y, r30
    1a08:	06 c0       	rjmp	.+12     	; 0x1a16 <fputc+0x3c>
    1a0a:	e8 85       	ldd	r30, Y+8	; 0x08
    1a0c:	f9 85       	ldd	r31, Y+9	; 0x09
    1a0e:	80 2f       	mov	r24, r16
    1a10:	09 95       	icall
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	31 f4       	brne	.+12     	; 0x1a22 <fputc+0x48>
    1a16:	8e 81       	ldd	r24, Y+6	; 0x06
    1a18:	9f 81       	ldd	r25, Y+7	; 0x07
    1a1a:	01 96       	adiw	r24, 0x01	; 1
    1a1c:	9f 83       	std	Y+7, r25	; 0x07
    1a1e:	8e 83       	std	Y+6, r24	; 0x06
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <fputc+0x4c>
    1a22:	0f ef       	ldi	r16, 0xFF	; 255
    1a24:	1f ef       	ldi	r17, 0xFF	; 255
    1a26:	c8 01       	movw	r24, r16
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	1f 91       	pop	r17
    1a2e:	0f 91       	pop	r16
    1a30:	08 95       	ret

00001a32 <__ultoa_invert>:
    1a32:	fa 01       	movw	r30, r20
    1a34:	aa 27       	eor	r26, r26
    1a36:	28 30       	cpi	r18, 0x08	; 8
    1a38:	51 f1       	breq	.+84     	; 0x1a8e <__ultoa_invert+0x5c>
    1a3a:	20 31       	cpi	r18, 0x10	; 16
    1a3c:	81 f1       	breq	.+96     	; 0x1a9e <__ultoa_invert+0x6c>
    1a3e:	e8 94       	clt
    1a40:	6f 93       	push	r22
    1a42:	6e 7f       	andi	r22, 0xFE	; 254
    1a44:	6e 5f       	subi	r22, 0xFE	; 254
    1a46:	7f 4f       	sbci	r23, 0xFF	; 255
    1a48:	8f 4f       	sbci	r24, 0xFF	; 255
    1a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4c:	af 4f       	sbci	r26, 0xFF	; 255
    1a4e:	b1 e0       	ldi	r27, 0x01	; 1
    1a50:	3e d0       	rcall	.+124    	; 0x1ace <__ultoa_invert+0x9c>
    1a52:	b4 e0       	ldi	r27, 0x04	; 4
    1a54:	3c d0       	rcall	.+120    	; 0x1ace <__ultoa_invert+0x9c>
    1a56:	67 0f       	add	r22, r23
    1a58:	78 1f       	adc	r23, r24
    1a5a:	89 1f       	adc	r24, r25
    1a5c:	9a 1f       	adc	r25, r26
    1a5e:	a1 1d       	adc	r26, r1
    1a60:	68 0f       	add	r22, r24
    1a62:	79 1f       	adc	r23, r25
    1a64:	8a 1f       	adc	r24, r26
    1a66:	91 1d       	adc	r25, r1
    1a68:	a1 1d       	adc	r26, r1
    1a6a:	6a 0f       	add	r22, r26
    1a6c:	71 1d       	adc	r23, r1
    1a6e:	81 1d       	adc	r24, r1
    1a70:	91 1d       	adc	r25, r1
    1a72:	a1 1d       	adc	r26, r1
    1a74:	20 d0       	rcall	.+64     	; 0x1ab6 <__ultoa_invert+0x84>
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <__ultoa_invert+0x48>
    1a78:	68 94       	set
    1a7a:	3f 91       	pop	r19
    1a7c:	2a e0       	ldi	r18, 0x0A	; 10
    1a7e:	26 9f       	mul	r18, r22
    1a80:	11 24       	eor	r1, r1
    1a82:	30 19       	sub	r19, r0
    1a84:	30 5d       	subi	r19, 0xD0	; 208
    1a86:	31 93       	st	Z+, r19
    1a88:	de f6       	brtc	.-74     	; 0x1a40 <__ultoa_invert+0xe>
    1a8a:	cf 01       	movw	r24, r30
    1a8c:	08 95       	ret
    1a8e:	46 2f       	mov	r20, r22
    1a90:	47 70       	andi	r20, 0x07	; 7
    1a92:	40 5d       	subi	r20, 0xD0	; 208
    1a94:	41 93       	st	Z+, r20
    1a96:	b3 e0       	ldi	r27, 0x03	; 3
    1a98:	0f d0       	rcall	.+30     	; 0x1ab8 <__ultoa_invert+0x86>
    1a9a:	c9 f7       	brne	.-14     	; 0x1a8e <__ultoa_invert+0x5c>
    1a9c:	f6 cf       	rjmp	.-20     	; 0x1a8a <__ultoa_invert+0x58>
    1a9e:	46 2f       	mov	r20, r22
    1aa0:	4f 70       	andi	r20, 0x0F	; 15
    1aa2:	40 5d       	subi	r20, 0xD0	; 208
    1aa4:	4a 33       	cpi	r20, 0x3A	; 58
    1aa6:	18 f0       	brcs	.+6      	; 0x1aae <__ultoa_invert+0x7c>
    1aa8:	49 5d       	subi	r20, 0xD9	; 217
    1aaa:	31 fd       	sbrc	r19, 1
    1aac:	40 52       	subi	r20, 0x20	; 32
    1aae:	41 93       	st	Z+, r20
    1ab0:	02 d0       	rcall	.+4      	; 0x1ab6 <__ultoa_invert+0x84>
    1ab2:	a9 f7       	brne	.-22     	; 0x1a9e <__ultoa_invert+0x6c>
    1ab4:	ea cf       	rjmp	.-44     	; 0x1a8a <__ultoa_invert+0x58>
    1ab6:	b4 e0       	ldi	r27, 0x04	; 4
    1ab8:	a6 95       	lsr	r26
    1aba:	97 95       	ror	r25
    1abc:	87 95       	ror	r24
    1abe:	77 95       	ror	r23
    1ac0:	67 95       	ror	r22
    1ac2:	ba 95       	dec	r27
    1ac4:	c9 f7       	brne	.-14     	; 0x1ab8 <__ultoa_invert+0x86>
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	61 05       	cpc	r22, r1
    1aca:	71 05       	cpc	r23, r1
    1acc:	08 95       	ret
    1ace:	9b 01       	movw	r18, r22
    1ad0:	ac 01       	movw	r20, r24
    1ad2:	0a 2e       	mov	r0, r26
    1ad4:	06 94       	lsr	r0
    1ad6:	57 95       	ror	r21
    1ad8:	47 95       	ror	r20
    1ada:	37 95       	ror	r19
    1adc:	27 95       	ror	r18
    1ade:	ba 95       	dec	r27
    1ae0:	c9 f7       	brne	.-14     	; 0x1ad4 <__ultoa_invert+0xa2>
    1ae2:	62 0f       	add	r22, r18
    1ae4:	73 1f       	adc	r23, r19
    1ae6:	84 1f       	adc	r24, r20
    1ae8:	95 1f       	adc	r25, r21
    1aea:	a0 1d       	adc	r26, r0
    1aec:	08 95       	ret

00001aee <_exit>:
    1aee:	f8 94       	cli

00001af0 <__stop_program>:
    1af0:	ff cf       	rjmp	.-2      	; 0x1af0 <__stop_program>
