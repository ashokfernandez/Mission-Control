
PrinterHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00001b84  00001c18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800162  00800162  00001c7a  2**0
                  ALLOC
  3 .stab         00000f90  00000000  00000000  00001c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000030d  00000000  00000000  00002c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000888  00000000  00000000  00002f20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d66c  00000000  00000000  000037a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003391  00000000  00000000  00010e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005c4d  00000000  00000000  000141a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000193c  00000000  00000000  00019df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004f2b  00000000  00000000  0001b730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000096c4  00000000  00000000  0002065b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a20  00000000  00000000  00029d1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	65 c1       	rjmp	.+714    	; 0x2cc <__ctors_end>
       2:	00 00       	nop
       4:	82 c1       	rjmp	.+772    	; 0x30a <__bad_interrupt>
       6:	00 00       	nop
       8:	80 c1       	rjmp	.+768    	; 0x30a <__bad_interrupt>
       a:	00 00       	nop
       c:	7e c1       	rjmp	.+764    	; 0x30a <__bad_interrupt>
       e:	00 00       	nop
      10:	7c c1       	rjmp	.+760    	; 0x30a <__bad_interrupt>
      12:	00 00       	nop
      14:	7a c1       	rjmp	.+756    	; 0x30a <__bad_interrupt>
      16:	00 00       	nop
      18:	78 c1       	rjmp	.+752    	; 0x30a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	76 c1       	rjmp	.+748    	; 0x30a <__bad_interrupt>
      1e:	00 00       	nop
      20:	74 c1       	rjmp	.+744    	; 0x30a <__bad_interrupt>
      22:	00 00       	nop
      24:	72 c1       	rjmp	.+740    	; 0x30a <__bad_interrupt>
      26:	00 00       	nop
      28:	49 c6       	rjmp	.+3218   	; 0xcbc <__vector_10>
      2a:	00 00       	nop
      2c:	6e c1       	rjmp	.+732    	; 0x30a <__bad_interrupt>
      2e:	00 00       	nop
      30:	6c c1       	rjmp	.+728    	; 0x30a <__bad_interrupt>
      32:	00 00       	nop
      34:	6a c1       	rjmp	.+724    	; 0x30a <__bad_interrupt>
      36:	00 00       	nop
      38:	68 c1       	rjmp	.+720    	; 0x30a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	66 c1       	rjmp	.+716    	; 0x30a <__bad_interrupt>
      3e:	00 00       	nop
      40:	64 c1       	rjmp	.+712    	; 0x30a <__bad_interrupt>
      42:	00 00       	nop
      44:	62 c1       	rjmp	.+708    	; 0x30a <__bad_interrupt>
      46:	00 00       	nop
      48:	60 c1       	rjmp	.+704    	; 0x30a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5e c1       	rjmp	.+700    	; 0x30a <__bad_interrupt>
      4e:	00 00       	nop
      50:	5c c1       	rjmp	.+696    	; 0x30a <__bad_interrupt>
      52:	00 00       	nop
      54:	5a c1       	rjmp	.+692    	; 0x30a <__bad_interrupt>
      56:	00 00       	nop
      58:	58 c1       	rjmp	.+688    	; 0x30a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	56 c1       	rjmp	.+684    	; 0x30a <__bad_interrupt>
      5e:	00 00       	nop
      60:	54 c1       	rjmp	.+680    	; 0x30a <__bad_interrupt>
      62:	00 00       	nop
      64:	52 c1       	rjmp	.+676    	; 0x30a <__bad_interrupt>
      66:	00 00       	nop
      68:	50 c1       	rjmp	.+672    	; 0x30a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4e c1       	rjmp	.+668    	; 0x30a <__bad_interrupt>
      6e:	00 00       	nop
      70:	4c c1       	rjmp	.+664    	; 0x30a <__bad_interrupt>
      72:	00 00       	nop
      74:	4a c1       	rjmp	.+660    	; 0x30a <__bad_interrupt>
      76:	00 00       	nop
      78:	48 c1       	rjmp	.+656    	; 0x30a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	46 c1       	rjmp	.+652    	; 0x30a <__bad_interrupt>
      7e:	00 00       	nop
      80:	44 c1       	rjmp	.+648    	; 0x30a <__bad_interrupt>
      82:	00 00       	nop
      84:	42 c1       	rjmp	.+644    	; 0x30a <__bad_interrupt>
      86:	00 00       	nop
      88:	40 c1       	rjmp	.+640    	; 0x30a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3e c1       	rjmp	.+636    	; 0x30a <__bad_interrupt>
      8e:	00 00       	nop
      90:	3c c1       	rjmp	.+632    	; 0x30a <__bad_interrupt>
      92:	00 00       	nop
      94:	3a c1       	rjmp	.+628    	; 0x30a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4262>:
      98:	1b 5b 33 36 6d 50 72 69 6e 74 65 72 20 48 6f 73     .[36mPrinter Hos
      a8:	74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d     t Demo running..
      b8:	0a 1b 5b 33 37 6d 00                                ..[37m.

000000bf <__c.4271>:
      bf:	52 65 74 72 69 65 76 69 6e 67 20 44 65 76 69 63     Retrieving Devic
      cf:	65 20 49 44 2e 2e 2e 0d 0a 00                       e ID......

000000d9 <__c.4274>:
      d9:	45 72 72 6f 72 20 47 65 74 74 69 6e 67 20 44 65     Error Getting De
      e9:	76 69 63 65 20 49 44 2e 0d 0a 00                    vice ID....

000000f4 <__c.4276>:
      f4:	44 65 76 69 63 65 20 49 44 3a 20 25 73 2e 0d 0a     Device ID: %s...
     104:	00                                                  .

00000105 <__c.4280>:
     105:	53 65 6e 64 69 6e 67 20 54 65 73 74 20 50 61 67     Sending Test Pag
     115:	65 20 28 25 64 20 62 79 74 65 73 29 2e 2e 2e 0d     e (%d bytes)....
     125:	0a 00                                               ..

00000127 <__c.4282>:
     127:	45 72 72 6f 72 20 53 65 6e 64 69 6e 67 20 50 61     Error Sending Pa
     137:	67 65 20 44 61 74 61 2e 0d 0a 00                    ge Data....

00000142 <__c.4284>:
     142:	54 65 73 74 20 50 61 67 65 20 53 65 6e 74 2e 0d     Test Page Sent..
     152:	0a 00                                               ..

00000154 <__c.4289>:
     154:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     164:	0d 0a 00                                            ...

00000167 <__c.4294>:
     167:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     177:	68 65 64 2e 0d 0a 00                                hed....

0000017e <__c.4301>:
     17e:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     18e:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     19e:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001ab <__c.4303>:
     1ab:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1bb:	4e 6f 74 20 61 20 56 61 6c 69 64 20 50 72 69 6e     Not a Valid Prin
     1cb:	74 65 72 20 43 6c 61 73 73 20 44 65 76 69 63 65     ter Class Device
     1db:	2e 0d 0a 00                                         ....

000001df <__c.4305>:
     1df:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     1ef:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     1ff:	6f 6e 2e 0d 0a 00                                   on....

00000205 <__c.4307>:
     205:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 42 69     Error Setting Bi
     215:	64 69 72 65 63 74 69 6f 6e 61 6c 20 4d 6f 64 65     directional Mode
     225:	2e 0d 0a 00                                         ....

00000229 <__c.4309>:
     229:	50 72 69 6e 74 65 72 20 44 65 76 69 63 65 20 45     Printer Device E
     239:	6e 75 6d 65 72 61 74 65 64 2e 0d 0a 00              numerated....

00000246 <__c.4314>:
     246:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     256:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     266:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000275 <__c.4321>:
     275:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     285:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     295:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     2a5:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     2b5:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     2c5:	1b 5b 33 37 6d 00 00                                .[37m..

000002cc <__ctors_end>:
     2cc:	11 24       	eor	r1, r1
     2ce:	1f be       	out	0x3f, r1	; 63
     2d0:	cf ef       	ldi	r28, 0xFF	; 255
     2d2:	d0 e2       	ldi	r29, 0x20	; 32
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	cd bf       	out	0x3d, r28	; 61

000002d8 <__do_copy_data>:
     2d8:	11 e0       	ldi	r17, 0x01	; 1
     2da:	a0 e0       	ldi	r26, 0x00	; 0
     2dc:	b1 e0       	ldi	r27, 0x01	; 1
     2de:	e4 e8       	ldi	r30, 0x84	; 132
     2e0:	fb e1       	ldi	r31, 0x1B	; 27
     2e2:	00 e0       	ldi	r16, 0x00	; 0
     2e4:	0b bf       	out	0x3b, r16	; 59
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <__do_copy_data+0x14>
     2e8:	07 90       	elpm	r0, Z+
     2ea:	0d 92       	st	X+, r0
     2ec:	a2 36       	cpi	r26, 0x62	; 98
     2ee:	b1 07       	cpc	r27, r17
     2f0:	d9 f7       	brne	.-10     	; 0x2e8 <__do_copy_data+0x10>
     2f2:	1b be       	out	0x3b, r1	; 59

000002f4 <__do_clear_bss>:
     2f4:	11 e0       	ldi	r17, 0x01	; 1
     2f6:	a2 e6       	ldi	r26, 0x62	; 98
     2f8:	b1 e0       	ldi	r27, 0x01	; 1
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <.do_clear_bss_start>

000002fc <.do_clear_bss_loop>:
     2fc:	1d 92       	st	X+, r1

000002fe <.do_clear_bss_start>:
     2fe:	a4 38       	cpi	r26, 0x84	; 132
     300:	b1 07       	cpc	r27, r17
     302:	e1 f7       	brne	.-8      	; 0x2fc <.do_clear_bss_loop>
     304:	b2 d0       	rcall	.+356    	; 0x46a <main>
     306:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <_exit>

0000030a <__bad_interrupt>:
     30a:	7a ce       	rjmp	.-780    	; 0x0 <__vectors>

0000030c <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     30c:	9b b1       	in	r25, 0x0b	; 11
     30e:	9f 70       	andi	r25, 0x0F	; 15
     310:	98 2b       	or	r25, r24
     312:	9b b9       	out	0x0b, r25	; 11
			}
     314:	08 95       	ret

00000316 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     316:	84 b7       	in	r24, 0x34	; 52
     318:	87 7f       	andi	r24, 0xF7	; 247
     31a:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     31c:	28 e1       	ldi	r18, 0x18	; 24
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	20 93 60 00 	sts	0x0060, r18
     326:	10 92 60 00 	sts	0x0060, r1
     32a:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	80 e8       	ldi	r24, 0x80	; 128
     330:	0f b6       	in	r0, 0x3f	; 63
     332:	f8 94       	cli
     334:	80 93 61 00 	sts	0x0061, r24
     338:	90 93 61 00 	sts	0x0061, r25
     33c:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     33e:	83 e3       	ldi	r24, 0x33	; 51
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	90 93 cd 00 	sts	0x00CD, r25
     346:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     34a:	86 e0       	ldi	r24, 0x06	; 6
     34c:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     350:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     354:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     358:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     35a:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     35c:	8a b1       	in	r24, 0x0a	; 10
     35e:	80 6f       	ori	r24, 0xF0	; 240
     360:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     362:	8b b1       	in	r24, 0x0b	; 11
     364:	8f 70       	andi	r24, 0x0F	; 15
     366:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     368:	8e d4       	rcall	.+2332   	; 0xc86 <USB_Init>
     36a:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <Serial_CreateStream>

00000372 <PrinterHost_Task>:
     372:	ef 92       	push	r14
}
     374:	ff 92       	push	r15

/** Task to manage an enumerated USB printer once connected, to display device
 *  information and print a test PCL page.
 */
void PrinterHost_Task(void)
{
     376:	0f 93       	push	r16
     378:	1f 93       	push	r17
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62
     382:	c5 55       	subi	r28, 0x55	; 85
     384:	d1 40       	sbci	r29, 0x01	; 1
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	f8 94       	cli
     38a:	de bf       	out	0x3e, r29	; 62
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	cd bf       	out	0x3d, r28	; 61
	if (USB_HostState != HOST_STATE_Configured)
     390:	80 91 6f 01 	lds	r24, 0x016F
     394:	8b 30       	cpi	r24, 0x0B	; 11
     396:	09 f0       	breq	.+2      	; 0x39a <PrinterHost_Task+0x28>
     398:	5a c0       	rjmp	.+180    	; 0x44e <PrinterHost_Task+0xdc>
	  return;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     39a:	80 e2       	ldi	r24, 0x20	; 32
     39c:	b7 df       	rcall	.-146    	; 0x30c <LEDs_SetAllLEDs>
     39e:	8f eb       	ldi	r24, 0xBF	; 191

	puts_P(PSTR("Retrieving Device ID...\r\n"));
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <puts_P>
     3a6:	8e 01       	movw	r16, r28

	char DeviceIDString[300];
	if (PRNT_Host_GetDeviceID(&Printer_PRNT_Interface, DeviceIDString,
     3a8:	06 5d       	subi	r16, 0xD6	; 214
     3aa:	1f 4f       	sbci	r17, 0xFF	; 255
     3ac:	89 e2       	ldi	r24, 0x29	; 41
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	b8 01       	movw	r22, r16
     3b2:	4c e2       	ldi	r20, 0x2C	; 44
     3b4:	51 e0       	ldi	r21, 0x01	; 1
     3b6:	0e 94 26 0a 	call	0x144c	; 0x144c <PRNT_Host_GetDeviceID>
     3ba:	88 23       	and	r24, r24
     3bc:	19 f0       	breq	.+6      	; 0x3c4 <PrinterHost_Task+0x52>
     3be:	89 ed       	ldi	r24, 0xD9	; 217
	                          sizeof(DeviceIDString)) != HOST_SENDCONTROL_Successful)
	{
		puts_P(PSTR("Error Getting Device ID.\r\n"));
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	39 c0       	rjmp	.+114    	; 0x436 <PrinterHost_Task+0xc4>
     3c4:	00 d0       	rcall	.+0      	; 0x3c6 <PrinterHost_Task+0x54>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	printf_P(PSTR("Device ID: %s.\r\n"), DeviceIDString);
     3c6:	00 d0       	rcall	.+0      	; 0x3c8 <PrinterHost_Task+0x56>
     3c8:	84 ef       	ldi	r24, 0xF4	; 244
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	ed b7       	in	r30, 0x3d	; 61
     3ce:	fe b7       	in	r31, 0x3e	; 62
     3d0:	92 83       	std	Z+2, r25	; 0x02
     3d2:	81 83       	std	Z+1, r24	; 0x01
     3d4:	14 83       	std	Z+4, r17	; 0x04
     3d6:	03 83       	std	Z+3, r16	; 0x03
     3d8:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <printf_P>
     3dc:	de 01       	movw	r26, r28

	char     TestPageData[] = "\033%-12345X\033E" "LUFA PCL Test Page" "\033E\033%-12345X";
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	e0 e0       	ldi	r30, 0x00	; 0
     3e2:	f1 e0       	ldi	r31, 0x01	; 1
     3e4:	89 e2       	ldi	r24, 0x29	; 41
     3e6:	01 90       	ld	r0, Z+
     3e8:	0d 92       	st	X+, r0
     3ea:	81 50       	subi	r24, 0x01	; 1
     3ec:	e1 f7       	brne	.-8      	; 0x3e6 <PrinterHost_Task+0x74>
     3ee:	7e 01       	movw	r14, r28
	uint16_t TestPageLength = strlen(TestPageData);
     3f0:	08 94       	sec
     3f2:	e1 1c       	adc	r14, r1
     3f4:	f1 1c       	adc	r15, r1
     3f6:	f7 01       	movw	r30, r14
     3f8:	01 90       	ld	r0, Z+
     3fa:	00 20       	and	r0, r0
     3fc:	e9 f7       	brne	.-6      	; 0x3f8 <PrinterHost_Task+0x86>
     3fe:	8f 01       	movw	r16, r30
     400:	01 50       	subi	r16, 0x01	; 1
     402:	10 40       	sbci	r17, 0x00	; 0
     404:	0e 19       	sub	r16, r14
     406:	1f 09       	sbc	r17, r15
     408:	85 e0       	ldi	r24, 0x05	; 5

	printf_P(PSTR("Sending Test Page (%d bytes)...\r\n"), TestPageLength);
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	ed b7       	in	r30, 0x3d	; 61
     40e:	fe b7       	in	r31, 0x3e	; 62
     410:	92 83       	std	Z+2, r25	; 0x02
     412:	81 83       	std	Z+1, r24	; 0x01
     414:	14 83       	std	Z+4, r17	; 0x04
     416:	03 83       	std	Z+3, r16	; 0x03
     418:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <printf_P>
     41c:	0f 90       	pop	r0

	if (PRNT_Host_SendData(&Printer_PRNT_Interface, &TestPageData, TestPageLength) != PIPE_RWSTREAM_NoError)
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	89 e2       	ldi	r24, 0x29	; 41
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	b7 01       	movw	r22, r14
     42a:	a8 01       	movw	r20, r16
     42c:	e7 d7       	rcall	.+4046   	; 0x13fc <PRNT_Host_SendData>
     42e:	88 23       	and	r24, r24
     430:	31 f0       	breq	.+12     	; 0x43e <PrinterHost_Task+0xcc>
     432:	87 e2       	ldi	r24, 0x27	; 39
     434:	91 e0       	ldi	r25, 0x01	; 1
	{
		puts_P(PSTR("Error Sending Page Data.\r\n"));
     436:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <puts_P>
     43a:	80 e9       	ldi	r24, 0x90	; 144
     43c:	05 c0       	rjmp	.+10     	; 0x448 <PrinterHost_Task+0xd6>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     43e:	82 e4       	ldi	r24, 0x42	; 66
     440:	91 e0       	ldi	r25, 0x01	; 1
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Test Page Sent.\r\n"));
     442:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <puts_P>
     446:	80 e6       	ldi	r24, 0x60	; 96
     448:	61 df       	rcall	.-318    	; 0x30c <LEDs_SetAllLEDs>

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	8f d6       	rcall	.+3358   	; 0x116c <USB_Host_SetDeviceConfiguration>
     44e:	cb 5a       	subi	r28, 0xAB	; 171
	USB_Host_SetDeviceConfiguration(0);
     450:	de 4f       	sbci	r29, 0xFE	; 254
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
}
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	08 95       	ret

0000046a <main>:
     46a:	55 df       	rcall	.-342    	; 0x316 <SetupHardware>
     46c:	88 e9       	ldi	r24, 0x98	; 152
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <puts_P>
 */
int main(void)
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "Printer Host Demo running.\r\n" ESC_FG_WHITE));
     474:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     476:	4a df       	rcall	.-364    	; 0x30c <LEDs_SetAllLEDs>
     478:	78 94       	sei
     47a:	7b df       	rcall	.-266    	; 0x372 <PrinterHost_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     47c:	89 e2       	ldi	r24, 0x29	; 41
	GlobalInterruptEnable();

	for (;;)
	{
		PrinterHost_Task();
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	b3 d7       	rcall	.+3942   	; 0x13e8 <PRNT_Host_USBTask>

		PRNT_Host_USBTask(&Printer_PRNT_Interface);
     482:	b0 d6       	rcall	.+3424   	; 0x11e4 <USB_USBTask>
     484:	fa cf       	rjmp	.-12     	; 0x47a <main+0x10>

00000486 <EVENT_USB_Host_DeviceAttached>:
     486:	84 e5       	ldi	r24, 0x54	; 84
     488:	91 e0       	ldi	r25, 0x01	; 1
		USB_USBTask();
     48a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <puts_P>
     48e:	80 ea       	ldi	r24, 0xA0	; 160
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     490:	3d cf       	rjmp	.-390    	; 0x30c <LEDs_SetAllLEDs>

00000492 <EVENT_USB_Host_DeviceUnattached>:
     492:	87 e6       	ldi	r24, 0x67	; 103
}
     494:	91 e0       	ldi	r25, 0x01	; 1
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     496:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     49a:	80 e1       	ldi	r24, 0x10	; 16
     49c:	37 cf       	rjmp	.-402    	; 0x30c <LEDs_SetAllLEDs>

0000049e <EVENT_USB_Host_DeviceEnumerationComplete>:
     49e:	cf 93       	push	r28
}
     4a0:	df 93       	push	r29

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	c2 50       	subi	r28, 0x02	; 2
     4a8:	d2 40       	sbci	r29, 0x02	; 2
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	de bf       	out	0x3e, r29	; 62
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4b4:	80 ea       	ldi	r24, 0xA0	; 160
     4b6:	2a df       	rcall	.-428    	; 0x30c <LEDs_SetAllLEDs>
     4b8:	81 e0       	ldi	r24, 0x01	; 1

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     4ba:	be 01       	movw	r22, r28
     4bc:	6f 5f       	subi	r22, 0xFF	; 255
     4be:	7f 4f       	sbci	r23, 0xFF	; 255
     4c0:	ae 01       	movw	r20, r28
     4c2:	4d 5f       	subi	r20, 0xFD	; 253
     4c4:	5f 4f       	sbci	r21, 0xFF	; 255
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	32 e0       	ldi	r19, 0x02	; 2
     4ca:	8b d4       	rcall	.+2326   	; 0xde2 <USB_Host_GetDeviceConfigDescriptor>
     4cc:	88 23       	and	r24, r24
     4ce:	19 f0       	breq	.+6      	; 0x4d6 <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
     4d0:	8e e7       	ldi	r24, 0x7E	; 126
     4d2:	91 e0       	ldi	r25, 0x01	; 1
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     4d4:	13 c0       	rjmp	.+38     	; 0x4fc <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
     4d6:	69 81       	ldd	r22, Y+1	; 0x01
     4d8:	7a 81       	ldd	r23, Y+2	; 0x02
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (PRNT_Host_ConfigurePipes(&Printer_PRNT_Interface,
     4da:	89 e2       	ldi	r24, 0x29	; 41
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	ae 01       	movw	r20, r28
     4e0:	4d 5f       	subi	r20, 0xFD	; 253
     4e2:	5f 4f       	sbci	r21, 0xFF	; 255
     4e4:	ae d6       	rcall	.+3420   	; 0x1242 <PRNT_Host_ConfigurePipes>
     4e6:	88 23       	and	r24, r24
     4e8:	19 f0       	breq	.+6      	; 0x4f0 <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
     4ea:	8b ea       	ldi	r24, 0xAB	; 171
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	06 c0       	rjmp	.+12     	; 0x4fc <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
	                             ConfigDescriptorSize, ConfigDescriptorData) != PRNT_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Printer Class Device.\r\n"));
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	3c d6       	rcall	.+3192   	; 0x116c <USB_Host_SetDeviceConfiguration>
     4f4:	88 23       	and	r24, r24
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     4f6:	31 f0       	breq	.+12     	; 0x504 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
     4f8:	8f ed       	ldi	r24, 0xDF	; 223
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <puts_P>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     500:	80 e9       	ldi	r24, 0x90	; 144
     502:	13 c0       	rjmp	.+38     	; 0x52a <EVENT_USB_Host_DeviceEnumerationComplete+0x8c>
     504:	89 e2       	ldi	r24, 0x29	; 41
     506:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     508:	34 d7       	rcall	.+3688   	; 0x1372 <PRNT_Host_SetBidirectionalMode>
     50a:	88 23       	and	r24, r24
		return;
	}

	if (PRNT_Host_SetBidirectionalMode(&Printer_PRNT_Interface) != HOST_SENDCONTROL_Successful)
     50c:	49 f0       	breq	.+18     	; 0x520 <EVENT_USB_Host_DeviceEnumerationComplete+0x82>
     50e:	85 e0       	ldi	r24, 0x05	; 5
     510:	92 e0       	ldi	r25, 0x02	; 2
     512:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <puts_P>
     516:	80 e9       	ldi	r24, 0x90	; 144
	{
		puts_P(PSTR("Error Setting Bidirectional Mode.\r\n"));
     518:	f9 de       	rcall	.-526    	; 0x30c <LEDs_SetAllLEDs>
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	27 d6       	rcall	.+3150   	; 0x116c <USB_Host_SetDeviceConfiguration>
     51e:	06 c0       	rjmp	.+12     	; 0x52c <EVENT_USB_Host_DeviceEnumerationComplete+0x8e>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     520:	89 e2       	ldi	r24, 0x29	; 41
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <puts_P>
		USB_Host_SetDeviceConfiguration(0);
     528:	80 e6       	ldi	r24, 0x60	; 96
     52a:	f0 de       	rcall	.-544    	; 0x30c <LEDs_SetAllLEDs>
		return;
     52c:	ce 5f       	subi	r28, 0xFE	; 254
	}

	puts_P(PSTR("Printer Device Enumerated.\r\n"));
     52e:	dd 4f       	sbci	r29, 0xFD	; 253
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	f8 94       	cli
     534:	de bf       	out	0x3e, r29	; 62
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     536:	0f be       	out	0x3f, r0	; 63
     538:	cd bf       	out	0x3d, r28	; 61
     53a:	df 91       	pop	r29
}
     53c:	cf 91       	pop	r28
     53e:	08 95       	ret

00000540 <EVENT_USB_Host_HostError>:
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	0f 92       	push	r0
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	89 83       	std	Y+1, r24	; 0x01
     54c:	34 d3       	rcall	.+1640   	; 0xbb6 <USB_Disable>
     54e:	00 d0       	rcall	.+0      	; 0x550 <EVENT_USB_Host_HostError+0x10>
/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     550:	00 d0       	rcall	.+0      	; 0x552 <EVENT_USB_Host_HostError+0x12>
     552:	ed b7       	in	r30, 0x3d	; 61
     554:	fe b7       	in	r31, 0x3e	; 62
     556:	31 96       	adiw	r30, 0x01	; 1
     558:	26 e4       	ldi	r18, 0x46	; 70
     55a:	32 e0       	ldi	r19, 0x02	; 2
     55c:	ad b7       	in	r26, 0x3d	; 61
     55e:	be b7       	in	r27, 0x3e	; 62
     560:	12 96       	adiw	r26, 0x02	; 2
     562:	3c 93       	st	X, r19
     564:	2e 93       	st	-X, r18
     566:	11 97       	sbiw	r26, 0x01	; 1
     568:	89 81       	ldd	r24, Y+1	; 0x01
     56a:	82 83       	std	Z+2, r24	; 0x02
     56c:	13 82       	std	Z+3, r1	; 0x03
     56e:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <printf_P>
     572:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	80 e9       	ldi	r24, 0x90	; 144
     57c:	c7 de       	rcall	.-626    	; 0x30c <LEDs_SetAllLEDs>
     57e:	ff cf       	rjmp	.-2      	; 0x57e <EVENT_USB_Host_HostError+0x3e>

00000580 <EVENT_USB_Host_DeviceEnumerationFailed>:
     580:	90 91 6f 01 	lds	r25, 0x016F
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     584:	2d b7       	in	r18, 0x3d	; 61
     586:	3e b7       	in	r19, 0x3e	; 62
     588:	28 50       	subi	r18, 0x08	; 8
     58a:	30 40       	sbci	r19, 0x00	; 0
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	3e bf       	out	0x3e, r19	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	2d bf       	out	0x3d, r18	; 61
     596:	ed b7       	in	r30, 0x3d	; 61
     598:	fe b7       	in	r31, 0x3e	; 62
     59a:	31 96       	adiw	r30, 0x01	; 1
     59c:	25 e7       	ldi	r18, 0x75	; 117
     59e:	32 e0       	ldi	r19, 0x02	; 2
     5a0:	ad b7       	in	r26, 0x3d	; 61
     5a2:	be b7       	in	r27, 0x3e	; 62
     5a4:	12 96       	adiw	r26, 0x02	; 2
     5a6:	3c 93       	st	X, r19
     5a8:	2e 93       	st	-X, r18
     5aa:	11 97       	sbiw	r26, 0x01	; 1
     5ac:	82 83       	std	Z+2, r24	; 0x02
     5ae:	13 82       	std	Z+3, r1	; 0x03
     5b0:	64 83       	std	Z+4, r22	; 0x04
     5b2:	15 82       	std	Z+5, r1	; 0x05
     5b4:	96 83       	std	Z+6, r25	; 0x06
     5b6:	17 82       	std	Z+7, r1	; 0x07
     5b8:	fb d7       	rcall	.+4086   	; 0x15b0 <printf_P>
     5ba:	2d b7       	in	r18, 0x3d	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5bc:	3e b7       	in	r19, 0x3e	; 62
     5be:	28 5f       	subi	r18, 0xF8	; 248
     5c0:	3f 4f       	sbci	r19, 0xFF	; 255
     5c2:	0f b6       	in	r0, 0x3f	; 63
     5c4:	f8 94       	cli
     5c6:	3e bf       	out	0x3e, r19	; 62
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	2d bf       	out	0x3d, r18	; 61
     5cc:	80 e9       	ldi	r24, 0x90	; 144
     5ce:	9e ce       	rjmp	.-708    	; 0x30c <LEDs_SetAllLEDs>

000005d0 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5d0:	80 91 9e 00 	lds	r24, 0x009E
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	81 70       	andi	r24, 0x01	; 1
     5d8:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     5da:	20 91 a0 00 	lds	r18, 0x00A0
     5de:	2d 7f       	andi	r18, 0xFD	; 253
     5e0:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     5e4:	20 91 9e 00 	lds	r18, 0x009E
     5e8:	22 60       	ori	r18, 0x02	; 2
     5ea:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     5ee:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     5f2:	21 fd       	sbrc	r18, 1
     5f4:	fc cf       	rjmp	.-8      	; 0x5ee <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     5f6:	20 91 9e 00 	lds	r18, 0x009E
     5fa:	21 60       	ori	r18, 0x01	; 1
     5fc:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     600:	10 92 65 01 	sts	0x0165, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     604:	20 91 a0 00 	lds	r18, 0x00A0
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	20 72       	andi	r18, 0x20	; 32
     60c:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     60e:	40 91 a0 00 	lds	r20, 0x00A0
     612:	4f 7d       	andi	r20, 0xDF	; 223
     614:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     618:	40 91 9f 00 	lds	r20, 0x009F
     61c:	4f 7d       	andi	r20, 0xDF	; 223
     61e:	40 93 9f 00 	sts	0x009F, r20
     622:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     624:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     628:	55 ff       	sbrs	r21, 5
     62a:	0b c0       	rjmp	.+22     	; 0x642 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     62c:	40 91 9f 00 	lds	r20, 0x009F
     630:	4f 7d       	andi	r20, 0xDF	; 223
     632:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     636:	40 91 9f 00 	lds	r20, 0x009F
     63a:	4d 7f       	andi	r20, 0xFD	; 253
     63c:	40 93 9f 00 	sts	0x009F, r20
     640:	08 c0       	rjmp	.+16     	; 0x652 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     642:	ef ec       	ldi	r30, 0xCF	; 207
     644:	f7 e0       	ldi	r31, 0x07	; 7
     646:	31 97       	sbiw	r30, 0x01	; 1
     648:	f1 f7       	brne	.-4      	; 0x646 <USB_Host_ResetDevice+0x76>
     64a:	00 c0       	rjmp	.+0      	; 0x64c <USB_Host_ResetDevice+0x7c>
     64c:	00 00       	nop
     64e:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     650:	49 f7       	brne	.-46     	; 0x624 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     652:	21 15       	cp	r18, r1
     654:	31 05       	cpc	r19, r1
     656:	29 f0       	breq	.+10     	; 0x662 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     658:	20 91 a0 00 	lds	r18, 0x00A0
     65c:	20 62       	ori	r18, 0x20	; 32
     65e:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     662:	00 97       	sbiw	r24, 0x00	; 0
     664:	29 f4       	brne	.+10     	; 0x670 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     666:	80 91 9e 00 	lds	r24, 0x009E
     66a:	8e 7f       	andi	r24, 0xFE	; 254
     66c:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     670:	80 91 a0 00 	lds	r24, 0x00A0
     674:	82 60       	ori	r24, 0x02	; 2
     676:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     67a:	08 95       	ret

0000067c <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     67c:	40 91 9e 00 	lds	r20, 0x009E
     680:	50 e0       	ldi	r21, 0x00	; 0
     682:	41 70       	andi	r20, 0x01	; 1
     684:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     686:	20 91 a0 00 	lds	r18, 0x00A0
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	20 72       	andi	r18, 0x20	; 32
     68e:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     690:	90 91 a0 00 	lds	r25, 0x00A0
     694:	9f 7d       	andi	r25, 0xDF	; 223
     696:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     69a:	90 91 9f 00 	lds	r25, 0x009F
     69e:	9f 7d       	andi	r25, 0xDF	; 223
     6a0:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6a4:	90 91 9e 00 	lds	r25, 0x009E
     6a8:	91 60       	ori	r25, 0x01	; 1
     6aa:	90 93 9e 00 	sts	0x009E, r25
     6ae:	26 c0       	rjmp	.+76     	; 0x6fc <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     6b0:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     6b4:	95 ff       	sbrs	r25, 5
     6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6b8:	90 91 9f 00 	lds	r25, 0x009F
     6bc:	9f 7d       	andi	r25, 0xDF	; 223
     6be:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     6c2:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     6c4:	90 91 6f 01 	lds	r25, 0x016F
     6c8:	91 30       	cpi	r25, 0x01	; 1
     6ca:	d9 f0       	breq	.+54     	; 0x702 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     6cc:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     6d0:	94 ff       	sbrs	r25, 4
     6d2:	09 c0       	rjmp	.+18     	; 0x6e6 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     6d4:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     6d8:	80 91 a6 00 	lds	r24, 0x00A6
     6dc:	8f 7e       	andi	r24, 0xEF	; 239
     6de:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     6e2:	82 e0       	ldi	r24, 0x02	; 2

			break;
     6e4:	0f c0       	rjmp	.+30     	; 0x704 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     6e6:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     6ea:	91 ff       	sbrs	r25, 1
     6ec:	07 c0       	rjmp	.+14     	; 0x6fc <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     6ee:	80 91 a6 00 	lds	r24, 0x00A6
     6f2:	8d 7f       	andi	r24, 0xFD	; 253
     6f4:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     6f8:	83 e0       	ldi	r24, 0x03	; 3

			break;
     6fa:	04 c0       	rjmp	.+8      	; 0x704 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     6fc:	88 23       	and	r24, r24
     6fe:	c1 f6       	brne	.-80     	; 0x6b0 <USB_Host_WaitMS+0x34>
     700:	01 c0       	rjmp	.+2      	; 0x704 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     702:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     704:	41 15       	cp	r20, r1
     706:	51 05       	cpc	r21, r1
     708:	29 f4       	brne	.+10     	; 0x714 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     70a:	90 91 9e 00 	lds	r25, 0x009E
     70e:	9e 7f       	andi	r25, 0xFE	; 254
     710:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     714:	21 15       	cp	r18, r1
     716:	31 05       	cpc	r19, r1
     718:	29 f0       	breq	.+10     	; 0x724 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     71a:	90 91 a0 00 	lds	r25, 0x00A0
     71e:	90 62       	ori	r25, 0x20	; 32
     720:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     724:	08 95       	ret

00000726 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	cd b7       	in	r28, 0x3d	; 61
     730:	de b7       	in	r29, 0x3e	; 62
     732:	28 97       	sbiw	r28, 0x08	; 8
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	f8 94       	cli
     738:	de bf       	out	0x3e, r29	; 62
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     73e:	80 91 6f 01 	lds	r24, 0x016F
     742:	85 30       	cpi	r24, 0x05	; 5
     744:	09 f4       	brne	.+2      	; 0x748 <USB_Host_ProcessNextHostState+0x22>
     746:	99 c0       	rjmp	.+306    	; 0x87a <USB_Host_ProcessNextHostState+0x154>
     748:	86 30       	cpi	r24, 0x06	; 6
     74a:	68 f4       	brcc	.+26     	; 0x766 <USB_Host_ProcessNextHostState+0x40>
     74c:	82 30       	cpi	r24, 0x02	; 2
     74e:	c1 f1       	breq	.+112    	; 0x7c0 <USB_Host_ProcessNextHostState+0x9a>
     750:	83 30       	cpi	r24, 0x03	; 3
     752:	18 f4       	brcc	.+6      	; 0x75a <USB_Host_ProcessNextHostState+0x34>
     754:	88 23       	and	r24, r24
     756:	a1 f0       	breq	.+40     	; 0x780 <USB_Host_ProcessNextHostState+0x5a>
     758:	04 c1       	rjmp	.+520    	; 0x962 <USB_Host_ProcessNextHostState+0x23c>
     75a:	83 30       	cpi	r24, 0x03	; 3
     75c:	d9 f1       	breq	.+118    	; 0x7d4 <USB_Host_ProcessNextHostState+0xae>
     75e:	84 30       	cpi	r24, 0x04	; 4
     760:	09 f0       	breq	.+2      	; 0x764 <USB_Host_ProcessNextHostState+0x3e>
     762:	ff c0       	rjmp	.+510    	; 0x962 <USB_Host_ProcessNextHostState+0x23c>
     764:	62 c0       	rjmp	.+196    	; 0x82a <USB_Host_ProcessNextHostState+0x104>
     766:	87 30       	cpi	r24, 0x07	; 7
     768:	09 f4       	brne	.+2      	; 0x76c <USB_Host_ProcessNextHostState+0x46>
     76a:	9e c0       	rjmp	.+316    	; 0x8a8 <USB_Host_ProcessNextHostState+0x182>
     76c:	87 30       	cpi	r24, 0x07	; 7
     76e:	08 f4       	brcc	.+2      	; 0x772 <USB_Host_ProcessNextHostState+0x4c>
     770:	8f c0       	rjmp	.+286    	; 0x890 <USB_Host_ProcessNextHostState+0x16a>
     772:	88 30       	cpi	r24, 0x08	; 8
     774:	09 f4       	brne	.+2      	; 0x778 <USB_Host_ProcessNextHostState+0x52>
     776:	b8 c0       	rjmp	.+368    	; 0x8e8 <USB_Host_ProcessNextHostState+0x1c2>
     778:	89 30       	cpi	r24, 0x09	; 9
     77a:	09 f0       	breq	.+2      	; 0x77e <USB_Host_ProcessNextHostState+0x58>
     77c:	f2 c0       	rjmp	.+484    	; 0x962 <USB_Host_ProcessNextHostState+0x23c>
     77e:	d9 c0       	rjmp	.+434    	; 0x932 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     780:	00 91 62 01 	lds	r16, 0x0162
     784:	10 91 63 01 	lds	r17, 0x0163
     788:	01 15       	cp	r16, r1
     78a:	11 05       	cpc	r17, r1
     78c:	09 f4       	brne	.+2      	; 0x790 <USB_Host_ProcessNextHostState+0x6a>
     78e:	e9 c0       	rjmp	.+466    	; 0x962 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	74 df       	rcall	.-280    	; 0x67c <USB_Host_WaitMS>
     794:	68 2f       	mov	r22, r24
     796:	88 23       	and	r24, r24
     798:	31 f0       	breq	.+12     	; 0x7a6 <USB_Host_ProcessNextHostState+0x80>
     79a:	80 91 64 01 	lds	r24, 0x0164
				{
					USB_HostState = PostWaitState;
     79e:	80 93 6f 01 	sts	0x016F, r24
     7a2:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     7a4:	d2 c0       	rjmp	.+420    	; 0x94a <USB_Host_ProcessNextHostState+0x224>
					break;
     7a6:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
     7a8:	10 40       	sbci	r17, 0x00	; 0
     7aa:	10 93 63 01 	sts	0x0163, r17
     7ae:	00 93 62 01 	sts	0x0162, r16
     7b2:	01 15       	cp	r16, r1
     7b4:	11 05       	cpc	r17, r1
     7b6:	09 f0       	breq	.+2      	; 0x7ba <USB_Host_ProcessNextHostState+0x94>
     7b8:	d4 c0       	rjmp	.+424    	; 0x962 <USB_Host_ProcessNextHostState+0x23c>
     7ba:	80 91 64 01 	lds	r24, 0x0164
				  USB_HostState = PostWaitState;
     7be:	07 c0       	rjmp	.+14     	; 0x7ce <USB_Host_ProcessNextHostState+0xa8>
     7c0:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     7c2:	93 e0       	ldi	r25, 0x03	; 3
     7c4:	90 93 63 01 	sts	0x0163, r25
     7c8:	80 93 62 01 	sts	0x0162, r24
     7cc:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     7ce:	80 93 6f 01 	sts	0x016F, r24
     7d2:	c7 c0       	rjmp	.+398    	; 0x962 <USB_Host_ProcessNextHostState+0x23c>
			break;
     7d4:	80 91 62 01 	lds	r24, 0x0162
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     7d8:	90 91 63 01 	lds	r25, 0x0163
     7dc:	9c 01       	movw	r18, r24
     7de:	21 50       	subi	r18, 0x01	; 1
     7e0:	30 40       	sbci	r19, 0x00	; 0
     7e2:	30 93 63 01 	sts	0x0163, r19
     7e6:	20 93 62 01 	sts	0x0162, r18
     7ea:	00 97       	sbiw	r24, 0x00	; 0
     7ec:	39 f0       	breq	.+14     	; 0x7fc <USB_Host_ProcessNextHostState+0xd6>
     7ee:	8f ec       	ldi	r24, 0xCF	; 207
     7f0:	97 e0       	ldi	r25, 0x07	; 7
     7f2:	01 97       	sbiw	r24, 0x01	; 1
     7f4:	f1 f7       	brne	.-4      	; 0x7f2 <USB_Host_ProcessNextHostState+0xcc>
     7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <USB_Host_ProcessNextHostState+0xd2>
     7f8:	00 00       	nop
     7fa:	b3 c0       	rjmp	.+358    	; 0x962 <USB_Host_ProcessNextHostState+0x23c>
     7fc:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     7fe:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     802:	80 61       	ori	r24, 0x10	; 16
     804:	80 93 d8 00 	sts	0x00D8, r24
     808:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     80c:	8b 7f       	andi	r24, 0xFB	; 251
     80e:	80 93 dd 00 	sts	0x00DD, r24
     812:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     816:	80 61       	ori	r24, 0x10	; 16
     818:	80 93 d7 00 	sts	0x00D7, r24
     81c:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     820:	82 60       	ori	r24, 0x02	; 2
     822:	80 93 dd 00 	sts	0x00DD, r24
     826:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     828:	d2 cf       	rjmp	.-92     	; 0x7ce <USB_Host_ProcessNextHostState+0xa8>
     82a:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     82e:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     830:	98 c0       	rjmp	.+304    	; 0x962 <USB_Host_ProcessNextHostState+0x23c>
     832:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     836:	8e 7f       	andi	r24, 0xFE	; 254
     838:	80 93 9f 00 	sts	0x009F, r24
     83c:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     840:	8d 7f       	andi	r24, 0xFD	; 253
     842:	80 93 9f 00 	sts	0x009F, r24
     846:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     84a:	8d 7f       	andi	r24, 0xFD	; 253
     84c:	80 93 df 00 	sts	0x00DF, r24
     850:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     854:	82 60       	ori	r24, 0x02	; 2
     856:	80 93 de 00 	sts	0x00DE, r24
     85a:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     85e:	81 60       	ori	r24, 0x01	; 1
     860:	80 93 9e 00 	sts	0x009E, r24
     864:	66 d1       	rcall	.+716    	; 0xb32 <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     866:	10 92 6f 01 	sts	0x016F, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     86a:	84 e6       	ldi	r24, 0x64	; 100
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	90 93 63 01 	sts	0x0163, r25
     872:	80 93 62 01 	sts	0x0162, r24
     876:	85 e0       	ldi	r24, 0x05	; 5
     878:	59 c0       	rjmp	.+178    	; 0x92c <USB_Host_ProcessNextHostState+0x206>
     87a:	aa de       	rcall	.-684    	; 0x5d0 <USB_Host_ResetDevice>
     87c:	10 92 6f 01 	sts	0x016F, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     880:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	90 93 63 01 	sts	0x0163, r25
     888:	80 93 62 01 	sts	0x0162, r24
     88c:	86 e0       	ldi	r24, 0x06	; 6
     88e:	4e c0       	rjmp	.+156    	; 0x92c <USB_Host_ProcessNextHostState+0x206>
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     896:	20 e4       	ldi	r18, 0x40	; 64
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	01 e0       	ldi	r16, 0x01	; 1
     89c:	c4 d0       	rcall	.+392    	; 0xa26 <Pipe_ConfigurePipe>
     89e:	88 23       	and	r24, r24
     8a0:	09 f4       	brne	.+2      	; 0x8a4 <USB_Host_ProcessNextHostState+0x17e>
     8a2:	4f c0       	rjmp	.+158    	; 0x942 <USB_Host_ProcessNextHostState+0x21c>
     8a4:	87 e0       	ldi	r24, 0x07	; 7
     8a6:	93 cf       	rjmp	.-218    	; 0x7ce <USB_Host_ProcessNextHostState+0xa8>
     8a8:	a7 e6       	ldi	r26, 0x67	; 103
     8aa:	b1 e0       	ldi	r27, 0x01	; 1
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     8ac:	e8 e3       	ldi	r30, 0x38	; 56
     8ae:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     8b0:	88 e0       	ldi	r24, 0x08	; 8
     8b2:	01 90       	ld	r0, Z+
     8b4:	0d 92       	st	X+, r0
     8b6:	81 50       	subi	r24, 0x01	; 1
     8b8:	e1 f7       	brne	.-8      	; 0x8b2 <USB_Host_ProcessNextHostState+0x18c>
     8ba:	10 92 a7 00 	sts	0x00A7, r1
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     8c2:	56 d3       	rcall	.+1708   	; 0xf70 <USB_Host_SendControlRequest>
     8c4:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     8c6:	88 23       	and	r24, r24
     8c8:	09 f0       	breq	.+2      	; 0x8cc <USB_Host_ProcessNextHostState+0x1a6>
     8ca:	3e c0       	rjmp	.+124    	; 0x948 <USB_Host_ProcessNextHostState+0x222>
     8cc:	88 85       	ldd	r24, Y+8	; 0x08
     8ce:	80 93 48 01 	sts	0x0148, r24
     8d2:	7e de       	rcall	.-772    	; 0x5d0 <USB_Host_ResetDevice>
     8d4:	10 92 6f 01 	sts	0x016F, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     8d8:	88 ec       	ldi	r24, 0xC8	; 200
     8da:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
     8dc:	90 93 63 01 	sts	0x0163, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     8e0:	80 93 62 01 	sts	0x0162, r24
     8e4:	88 e0       	ldi	r24, 0x08	; 8
     8e6:	22 c0       	rjmp	.+68     	; 0x92c <USB_Host_ProcessNextHostState+0x206>
     8e8:	20 91 48 01 	lds	r18, 0x0148
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	40 e0       	ldi	r20, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     8f4:	01 e0       	ldi	r16, 0x01	; 1
     8f6:	97 d0       	rcall	.+302    	; 0xa26 <Pipe_ConfigurePipe>
     8f8:	88 23       	and	r24, r24
     8fa:	19 f1       	breq	.+70     	; 0x942 <USB_Host_ProcessNextHostState+0x21c>
     8fc:	a7 e6       	ldi	r26, 0x67	; 103
     8fe:	b1 e0       	ldi	r27, 0x01	; 1
     900:	e0 e4       	ldi	r30, 0x40	; 64
     902:	f1 e0       	ldi	r31, 0x01	; 1
     904:	88 e0       	ldi	r24, 0x08	; 8
     906:	01 90       	ld	r0, Z+
     908:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     90a:	81 50       	subi	r24, 0x01	; 1
     90c:	e1 f7       	brne	.-8      	; 0x906 <USB_Host_ProcessNextHostState+0x1e0>
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	2e d3       	rcall	.+1628   	; 0xf70 <USB_Host_SendControlRequest>
     914:	68 2f       	mov	r22, r24
     916:	88 23       	and	r24, r24
     918:	b9 f4       	brne	.+46     	; 0x948 <USB_Host_ProcessNextHostState+0x222>
     91a:	10 92 6f 01 	sts	0x016F, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     91e:	84 e6       	ldi	r24, 0x64	; 100
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	90 93 63 01 	sts	0x0163, r25
     926:	80 93 62 01 	sts	0x0162, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     92a:	89 e0       	ldi	r24, 0x09	; 9
     92c:	80 93 64 01 	sts	0x0164, r24
     930:	18 c0       	rjmp	.+48     	; 0x962 <USB_Host_ProcessNextHostState+0x23c>
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	80 93 a1 00 	sts	0x00A1, r24
     938:	8a e0       	ldi	r24, 0x0A	; 10
     93a:	80 93 6f 01 	sts	0x016F, r24
     93e:	af dd       	rcall	.-1186   	; 0x49e <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     940:	10 c0       	rjmp	.+32     	; 0x962 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	84 e0       	ldi	r24, 0x04	; 4
     946:	01 c0       	rjmp	.+2      	; 0x94a <USB_Host_ProcessNextHostState+0x224>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     948:	83 e0       	ldi	r24, 0x03	; 3
     94a:	90 91 6f 01 	lds	r25, 0x016F

			EVENT_USB_Host_DeviceEnumerationComplete();
     94e:	91 30       	cpi	r25, 0x01	; 1
     950:	41 f0       	breq	.+16     	; 0x962 <USB_Host_ProcessNextHostState+0x23c>
			break;
     952:	16 de       	rcall	.-980    	; 0x580 <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     954:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     958:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     95a:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     95e:	99 dd       	rcall	.-1230   	; 0x492 <EVENT_USB_Host_DeviceUnattached>
     960:	42 d1       	rcall	.+644    	; 0xbe6 <USB_ResetInterface>
     962:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     968:	de bf       	out	0x3e, r29	; 62
     96a:	0f be       	out	0x3f, r0	; 63
     96c:	cd bf       	out	0x3d, r28	; 61
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16

		USB_ResetInterface();
     976:	08 95       	ret

00000978 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     978:	af 92       	push	r10
     97a:	bf 92       	push	r11
     97c:	cf 92       	push	r12
     97e:	df 92       	push	r13
     980:	ff 92       	push	r15
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	5c 01       	movw	r10, r24
     98c:	eb 01       	movw	r28, r22
     98e:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     990:	80 91 aa 00 	lds	r24, 0x00AA
     994:	8f 7c       	andi	r24, 0xCF	; 207
     996:	80 62       	ori	r24, 0x20	; 32
     998:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     99c:	de d0       	rcall	.+444    	; 0xb5a <Pipe_WaitUntilReady>
     99e:	f8 2e       	mov	r15, r24
     9a0:	88 23       	and	r24, r24
     9a2:	b1 f5       	brne	.+108    	; 0xa10 <Pipe_Write_Stream_LE+0x98>
     9a4:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     9a6:	d1 04       	cpc	r13, r1
     9a8:	41 f0       	breq	.+16     	; 0x9ba <Pipe_Write_Stream_LE+0x42>
     9aa:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     9ac:	00 81       	ld	r16, Z
     9ae:	11 81       	ldd	r17, Z+1	; 0x01
     9b0:	c0 1b       	sub	r28, r16
     9b2:	d1 0b       	sbc	r29, r17
     9b4:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     9b6:	1b 1d       	adc	r17, r11
     9b8:	01 c0       	rjmp	.+2      	; 0x9bc <Pipe_Write_Stream_LE+0x44>
     9ba:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     9bc:	aa 24       	eor	r10, r10
     9be:	bb 24       	eor	r11, r11
     9c0:	23 c0       	rjmp	.+70     	; 0xa08 <Pipe_Write_Stream_LE+0x90>
     9c2:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     9c6:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     9c8:	16 c0       	rjmp	.+44     	; 0x9f6 <Pipe_Write_Stream_LE+0x7e>
     9ca:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     9ce:	8b 77       	andi	r24, 0x7B	; 123
     9d0:	80 93 a6 00 	sts	0x00A6, r24
     9d4:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     9d6:	d1 04       	cpc	r13, r1
     9d8:	51 f0       	breq	.+20     	; 0x9ee <Pipe_Write_Stream_LE+0x76>
     9da:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     9dc:	80 81       	ld	r24, Z
     9de:	91 81       	ldd	r25, Z+1	; 0x01
     9e0:	8a 0d       	add	r24, r10
     9e2:	9b 1d       	adc	r25, r11
     9e4:	91 83       	std	Z+1, r25	; 0x01
     9e6:	80 83       	st	Z, r24
     9e8:	44 e0       	ldi	r20, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     9ea:	f4 2e       	mov	r15, r20
     9ec:	11 c0       	rjmp	.+34     	; 0xa10 <Pipe_Write_Stream_LE+0x98>
     9ee:	b5 d0       	rcall	.+362    	; 0xb5a <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     9f0:	88 23       	and	r24, r24
     9f2:	51 f0       	breq	.+20     	; 0xa08 <Pipe_Write_Stream_LE+0x90>
     9f4:	0c c0       	rjmp	.+24     	; 0xa0e <Pipe_Write_Stream_LE+0x96>
     9f6:	f8 01       	movw	r30, r16
     9f8:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     9fa:	8f 01       	movw	r16, r30
     9fc:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     a00:	21 97       	sbiw	r28, 0x01	; 1
     a02:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     a04:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     a06:	b1 1c       	adc	r11, r1
     a08:	20 97       	sbiw	r28, 0x00	; 0
     a0a:	d9 f6       	brne	.-74     	; 0x9c2 <Pipe_Write_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     a0c:	01 c0       	rjmp	.+2      	; 0xa10 <Pipe_Write_Stream_LE+0x98>
     a0e:	f8 2e       	mov	r15, r24
     a10:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     a12:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     a14:	cf 91       	pop	r28
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	ff 90       	pop	r15
     a1c:	df 90       	pop	r13
     a1e:	cf 90       	pop	r12
     a20:	bf 90       	pop	r11
     a22:	af 90       	pop	r10
     a24:	08 95       	ret

00000a26 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     a26:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     a28:	58 2f       	mov	r21, r24
     a2a:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     a2c:	87 ff       	sbrs	r24, 7
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <Pipe_ConfigurePipe+0xe>
     a30:	80 e1       	ldi	r24, 0x10	; 16
     a32:	01 c0       	rjmp	.+2      	; 0xa36 <Pipe_ConfigurePipe+0x10>
     a34:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     a36:	57 30       	cpi	r21, 0x07	; 7
     a38:	08 f0       	brcs	.+2      	; 0xa3c <Pipe_ConfigurePipe+0x16>
     a3a:	57 c0       	rjmp	.+174    	; 0xaea <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     a3c:	66 23       	and	r22, r22
     a3e:	09 f4       	brne	.+2      	; 0xa42 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     a40:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     a42:	4f 70       	andi	r20, 0x0F	; 15
     a44:	62 95       	swap	r22
     a46:	66 0f       	add	r22, r22
     a48:	66 0f       	add	r22, r22
     a4a:	60 7c       	andi	r22, 0xC0	; 192
     a4c:	64 2b       	or	r22, r20
     a4e:	68 2b       	or	r22, r24
     a50:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     a52:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a54:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     a58:	45 17       	cp	r20, r21
     a5a:	a9 f4       	brne	.+42     	; 0xa86 <Pipe_ConfigurePipe+0x60>
     a5c:	04 c0       	rjmp	.+8      	; 0xa66 <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     a5e:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     a60:	88 0f       	add	r24, r24
     a62:	99 1f       	adc	r25, r25
     a64:	03 c0       	rjmp	.+6      	; 0xa6c <Pipe_ConfigurePipe+0x46>
     a66:	88 e0       	ldi	r24, 0x08	; 8
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     a6c:	82 17       	cp	r24, r18
     a6e:	93 07       	cpc	r25, r19
     a70:	10 f4       	brcc	.+4      	; 0xa76 <Pipe_ConfigurePipe+0x50>
     a72:	75 30       	cpi	r23, 0x05	; 5
     a74:	a1 f7       	brne	.-24     	; 0xa5e <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     a76:	87 2f       	mov	r24, r23
     a78:	82 95       	swap	r24
     a7a:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     a7c:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     a7e:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     a80:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     a82:	e0 e0       	ldi	r30, 0x00	; 0
     a84:	08 c0       	rjmp	.+16     	; 0xa96 <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     a86:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     a8a:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     a8e:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     a92:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     a96:	81 ff       	sbrs	r24, 1
     a98:	20 c0       	rjmp	.+64     	; 0xada <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a9a:	90 91 a9 00 	lds	r25, 0x00A9
     a9e:	9e 7f       	andi	r25, 0xFE	; 254
     aa0:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     aa4:	90 91 ab 00 	lds	r25, 0x00AB
     aa8:	9d 7f       	andi	r25, 0xFD	; 253
     aaa:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     aae:	90 91 a9 00 	lds	r25, 0x00A9
     ab2:	91 60       	ori	r25, 0x01	; 1
     ab4:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     ab8:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     abc:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     ac0:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     ac4:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     ac8:	80 91 a9 00 	lds	r24, 0x00A9
     acc:	80 62       	ori	r24, 0x20	; 32
     ace:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     ad2:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     ad6:	87 ff       	sbrs	r24, 7
     ad8:	08 c0       	rjmp	.+16     	; 0xaea <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     ada:	4f 5f       	subi	r20, 0xFF	; 255
     adc:	47 30       	cpi	r20, 0x07	; 7
     ade:	09 f0       	breq	.+2      	; 0xae2 <Pipe_ConfigurePipe+0xbc>
     ae0:	b9 cf       	rjmp	.-142    	; 0xa54 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ae2:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	01 c0       	rjmp	.+2      	; 0xaec <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     aea:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     aec:	0f 91       	pop	r16
     aee:	08 95       	ret

00000af0 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     af0:	ff 92       	push	r15
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
     afc:	ec 01       	movw	r28, r24
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     afe:	ff 24       	eor	r15, r15
     b00:	0d c0       	rjmp	.+26     	; 0xb1c <Pipe_ConfigurePipeTable+0x2c>
	{
		if (!(Table[i].Address))
     b02:	88 81       	ld	r24, Y
     b04:	88 23       	and	r24, r24
     b06:	41 f0       	breq	.+16     	; 0xb18 <Pipe_ConfigurePipeTable+0x28>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     b08:	29 81       	ldd	r18, Y+1	; 0x01
     b0a:	3a 81       	ldd	r19, Y+2	; 0x02
     b0c:	6c 81       	ldd	r22, Y+4	; 0x04
     b0e:	4b 81       	ldd	r20, Y+3	; 0x03
     b10:	0d 81       	ldd	r16, Y+5	; 0x05
     b12:	89 df       	rcall	.-238    	; 0xa26 <Pipe_ConfigurePipe>
     b14:	88 23       	and	r24, r24
     b16:	31 f0       	breq	.+12     	; 0xb24 <Pipe_ConfigurePipeTable+0x34>
     b18:	f3 94       	inc	r15
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     b1a:	26 96       	adiw	r28, 0x06	; 6
     b1c:	f1 16       	cp	r15, r17
     b1e:	89 f7       	brne	.-30     	; 0xb02 <Pipe_ConfigurePipeTable+0x12>
     b20:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}
	
	return true;
     b22:	01 c0       	rjmp	.+2      	; 0xb26 <Pipe_ConfigurePipeTable+0x36>
     b24:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
     b26:	df 91       	pop	r29
		}
	}
	
	return true;
}
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
     b2e:	ff 90       	pop	r15
     b30:	08 95       	ret

00000b32 <Pipe_ClearPipes>:
     b32:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     b3c:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     b40:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     b44:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b48:	90 91 a9 00 	lds	r25, 0x00A9
     b4c:	9e 7f       	andi	r25, 0xFE	; 254
     b4e:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	87 30       	cpi	r24, 0x07	; 7
     b56:	81 f7       	brne	.-32     	; 0xb38 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     b58:	08 95       	ret

00000b5a <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b5a:	80 91 a2 00 	lds	r24, 0x00A2
     b5e:	90 91 a3 00 	lds	r25, 0x00A3
     b62:	45 e6       	ldi	r20, 0x65	; 101
     b64:	01 c0       	rjmp	.+2      	; 0xb68 <Pipe_WaitUntilReady+0xe>
     b66:	c9 01       	movw	r24, r18
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b68:	20 91 aa 00 	lds	r18, 0x00AA
     b6c:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     b6e:	20 31       	cpi	r18, 0x10	; 16
     b70:	29 f4       	brne	.+10     	; 0xb7c <Pipe_WaitUntilReady+0x22>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     b72:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     b76:	20 ff       	sbrs	r18, 0
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <Pipe_WaitUntilReady+0x2a>
     b7a:	17 c0       	rjmp	.+46     	; 0xbaa <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     b7c:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     b80:	22 fd       	sbrc	r18, 2
     b82:	13 c0       	rjmp	.+38     	; 0xbaa <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b84:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b88:	21 fd       	sbrc	r18, 1
     b8a:	11 c0       	rjmp	.+34     	; 0xbae <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b8c:	20 91 6f 01 	lds	r18, 0x016F
     b90:	21 30       	cpi	r18, 0x01	; 1
     b92:	79 f0       	breq	.+30     	; 0xbb2 <Pipe_WaitUntilReady+0x58>
     b94:	20 91 a2 00 	lds	r18, 0x00A2
     b98:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b9c:	28 17       	cp	r18, r24
     b9e:	39 07       	cpc	r19, r25
     ba0:	19 f3       	breq	.-58     	; 0xb68 <Pipe_WaitUntilReady+0xe>
     ba2:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     ba4:	01 f7       	brne	.-64     	; 0xb66 <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_Timeout;
     ba6:	83 e0       	ldi	r24, 0x03	; 3
     ba8:	08 95       	ret
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     bb2:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     bb4:	08 95       	ret

00000bb6 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     bb6:	75 d0       	rcall	.+234    	; 0xca2 <USB_INT_DisableAllInterrupts>
     bb8:	7c d0       	rcall	.+248    	; 0xcb2 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bba:	e0 ee       	ldi	r30, 0xE0	; 224
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     bbe:	80 81       	ld	r24, Z
     bc0:	81 60       	ori	r24, 0x01	; 1
     bc2:	80 83       	st	Z, r24
     bc4:	e8 ed       	ldi	r30, 0xD8	; 216
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     bc8:	80 81       	ld	r24, Z
     bca:	8f 77       	andi	r24, 0x7F	; 127
     bcc:	80 83       	st	Z, r24
     bce:	19 bc       	out	0x29, r1	; 41
     bd0:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     bd2:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     bd4:	8c 91       	ld	r24, X
     bd6:	8e 7f       	andi	r24, 0xFE	; 254
     bd8:	8c 93       	st	X, r24
     bda:	80 81       	ld	r24, Z
     bdc:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     bde:	80 83       	st	Z, r24
     be0:	10 92 66 01 	sts	0x0166, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     be4:	08 95       	ret

00000be6 <USB_ResetInterface>:
     be6:	5d d0       	rcall	.+186    	; 0xca2 <USB_INT_DisableAllInterrupts>
}
     be8:	64 d0       	rcall	.+200    	; 0xcb2 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     bea:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     bee:	8f 77       	andi	r24, 0x7F	; 127
     bf0:	80 93 d8 00 	sts	0x00D8, r24
     bf4:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     bf8:	80 68       	ori	r24, 0x80	; 128
     bfa:	80 93 d8 00 	sts	0x00D8, r24
     bfe:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     c02:	8f 7d       	andi	r24, 0xDF	; 223
     c04:	80 93 d8 00 	sts	0x00D8, r24
     c08:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     c0c:	8f 77       	andi	r24, 0x7F	; 127
     c0e:	80 93 d7 00 	sts	0x00D7, r24
     c12:	8c e0       	ldi	r24, 0x0C	; 12
     c14:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c16:	8e e0       	ldi	r24, 0x0E	; 14
     c18:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c1a:	09 b4       	in	r0, 0x29	; 41
     c1c:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     c1e:	fd cf       	rjmp	.-6      	; 0xc1a <USB_ResetInterface+0x34>
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	80 93 6f 01 	sts	0x016F, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     c26:	10 92 65 01 	sts	0x0165, r1
	USB_Host_ConfigurationNumber = 0;
     c2a:	80 e4       	ldi	r24, 0x40	; 64
     c2c:	80 93 48 01 	sts	0x0148, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c30:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c34:	80 64       	ori	r24, 0x40	; 64
     c36:	80 93 d8 00 	sts	0x00D8, r24
     c3a:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c3e:	81 60       	ori	r24, 0x01	; 1
     c40:	80 93 dd 00 	sts	0x00DD, r24
     c44:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c48:	84 60       	ori	r24, 0x04	; 4
     c4a:	80 93 dd 00 	sts	0x00DD, r24
     c4e:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     c52:	8f 7e       	andi	r24, 0xEF	; 239
     c54:	80 93 d7 00 	sts	0x00D7, r24
     c58:	6f 9a       	sbi	0x0d, 7	; 13
     c5a:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     c5c:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     c60:	81 60       	ori	r24, 0x01	; 1
     c62:	80 93 de 00 	sts	0x00DE, r24
     c66:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     c6a:	84 60       	ori	r24, 0x04	; 4
     c6c:	80 93 de 00 	sts	0x00DE, r24
     c70:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c74:	8e 7f       	andi	r24, 0xFE	; 254
     c76:	80 93 e0 00 	sts	0x00E0, r24
     c7a:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     c7e:	80 61       	ori	r24, 0x10	; 16
     c80:	80 93 d8 00 	sts	0x00D8, r24
     c84:	08 95       	ret

00000c86 <USB_Init>:
     c86:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     c88:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     c8a:	80 81       	ld	r24, Z
     c8c:	8f 7e       	andi	r24, 0xEF	; 239
     c8e:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     c90:	e7 ed       	ldi	r30, 0xD7	; 215
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	81 60       	ori	r24, 0x01	; 1
     c98:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	80 93 66 01 	sts	0x0166, r24

	USB_ResetInterface();
     ca0:	a2 cf       	rjmp	.-188    	; 0xbe6 <USB_ResetInterface>

00000ca2 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     ca2:	e8 ed       	ldi	r30, 0xD8	; 216
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	8c 7f       	andi	r24, 0xFC	; 252
     caa:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     cac:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     cb0:	08 95       	ret

00000cb2 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     cb2:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     cb6:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     cba:	08 95       	ret

00000cbc <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     cbc:	1f 92       	push	r1
     cbe:	0f 92       	push	r0
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	0f 92       	push	r0
     cc4:	0b b6       	in	r0, 0x3b	; 59
     cc6:	0f 92       	push	r0
     cc8:	11 24       	eor	r1, r1
     cca:	2f 93       	push	r18
     ccc:	3f 93       	push	r19
     cce:	4f 93       	push	r20
     cd0:	5f 93       	push	r21
     cd2:	6f 93       	push	r22
     cd4:	7f 93       	push	r23
     cd6:	8f 93       	push	r24
     cd8:	9f 93       	push	r25
     cda:	af 93       	push	r26
     cdc:	bf 93       	push	r27
     cde:	ef 93       	push	r30
     ce0:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     ce2:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     ce6:	85 ff       	sbrs	r24, 5
     ce8:	0a c0       	rjmp	.+20     	; 0xcfe <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     cea:	80 91 a0 00 	lds	r24, 0x00A0
     cee:	85 ff       	sbrs	r24, 5
     cf0:	06 c0       	rjmp	.+12     	; 0xcfe <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     cf2:	80 91 9f 00 	lds	r24, 0x009F
     cf6:	8f 7d       	andi	r24, 0xDF	; 223
     cf8:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     cfc:	10 d1       	rcall	.+544    	; 0xf1e <USB_Event_Stub>
     cfe:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     d02:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     d04:	15 c0       	rjmp	.+42     	; 0xd30 <__vector_10+0x74>
     d06:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     d0a:	81 ff       	sbrs	r24, 1
     d0c:	11 c0       	rjmp	.+34     	; 0xd30 <__vector_10+0x74>
     d0e:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     d12:	8d 7f       	andi	r24, 0xFD	; 253
     d14:	80 93 9f 00 	sts	0x009F, r24
     d18:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     d1c:	8e 7f       	andi	r24, 0xFE	; 254
     d1e:	80 93 9f 00 	sts	0x009F, r24
     d22:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     d26:	8d 7f       	andi	r24, 0xFD	; 253
     d28:	80 93 a0 00 	sts	0x00A0, r24
     d2c:	b2 db       	rcall	.-2204   	; 0x492 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     d2e:	5b df       	rcall	.-330    	; 0xbe6 <USB_ResetInterface>
     d30:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     d34:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     d36:	15 c0       	rjmp	.+42     	; 0xd62 <__vector_10+0xa6>
     d38:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d3c:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     d3e:	11 c0       	rjmp	.+34     	; 0xd62 <__vector_10+0xa6>
     d40:	80 91 df 00 	lds	r24, 0x00DF
     d44:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     d46:	80 93 df 00 	sts	0x00DF, r24
     d4a:	77 98       	cbi	0x0e, 7	; 14
     d4c:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     d50:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d52:	80 93 dd 00 	sts	0x00DD, r24
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	f3 db       	rcall	.-2074   	; 0x540 <EVENT_USB_Host_HostError>
     d5a:	9b db       	rcall	.-2250   	; 0x492 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	80 93 6f 01 	sts	0x016F, r24
		EVENT_USB_Host_DeviceUnattached();
     d62:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     d66:	80 ff       	sbrs	r24, 0
     d68:	17 c0       	rjmp	.+46     	; 0xd98 <__vector_10+0xdc>
     d6a:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     d6e:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     d70:	13 c0       	rjmp	.+38     	; 0xd98 <__vector_10+0xdc>
     d72:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     d76:	8e 7f       	andi	r24, 0xFE	; 254
     d78:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     d7c:	80 91 de 00 	lds	r24, 0x00DE
     d80:	8e 7f       	andi	r24, 0xFE	; 254
     d82:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     d86:	7f db       	rcall	.-2306   	; 0x486 <EVENT_USB_Host_DeviceAttached>
     d88:	80 91 a0 00 	lds	r24, 0x00A0
     d8c:	82 60       	ori	r24, 0x02	; 2
     d8e:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     d92:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     d94:	80 93 6f 01 	sts	0x016F, r24
     d98:	80 91 df 00 	lds	r24, 0x00DF
     d9c:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     d9e:	0e c0       	rjmp	.+28     	; 0xdbc <__vector_10+0x100>
     da0:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     da4:	82 ff       	sbrs	r24, 2
     da6:	0a c0       	rjmp	.+20     	; 0xdbc <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     da8:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     dac:	8b 7f       	andi	r24, 0xFB	; 251
     dae:	80 93 df 00 	sts	0x00DF, r24
     db2:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	e4 db       	rcall	.-2104   	; 0x580 <EVENT_USB_Host_DeviceEnumerationFailed>
     db8:	6c db       	rcall	.-2344   	; 0x492 <EVENT_USB_Host_DeviceUnattached>
     dba:	15 df       	rcall	.-470    	; 0xbe6 <USB_ResetInterface>
     dbc:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     dbe:	ef 91       	pop	r30
     dc0:	bf 91       	pop	r27
     dc2:	af 91       	pop	r26
     dc4:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     dc6:	8f 91       	pop	r24
     dc8:	7f 91       	pop	r23

		USB_ResetInterface();
     dca:	6f 91       	pop	r22
     dcc:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     dce:	4f 91       	pop	r20
     dd0:	3f 91       	pop	r19
     dd2:	2f 91       	pop	r18
     dd4:	0f 90       	pop	r0
     dd6:	0b be       	out	0x3b, r0	; 59
     dd8:	0f 90       	pop	r0
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	0f 90       	pop	r0
     dde:	1f 90       	pop	r1
     de0:	18 95       	reti

00000de2 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     de2:	cf 92       	push	r12
     de4:	df 92       	push	r13
     de6:	ef 92       	push	r14
     de8:	ff 92       	push	r15
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	29 97       	sbiw	r28, 0x09	; 9
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	cd bf       	out	0x3d, r28	; 61
     e02:	6b 01       	movw	r12, r22
     e04:	8a 01       	movw	r16, r20
     e06:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e08:	90 e8       	ldi	r25, 0x80	; 128
     e0a:	90 93 67 01 	sts	0x0167, r25
     e0e:	96 e0       	ldi	r25, 0x06	; 6
     e10:	90 93 68 01 	sts	0x0168, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e1a:	90 93 6a 01 	sts	0x016A, r25
     e1e:	80 93 69 01 	sts	0x0169, r24
     e22:	10 92 6c 01 	sts	0x016C, r1
     e26:	10 92 6b 01 	sts	0x016B, r1
     e2a:	89 e0       	ldi	r24, 0x09	; 9
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	90 93 6e 01 	sts	0x016E, r25
     e32:	80 93 6d 01 	sts	0x016D, r24
     e36:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     e3a:	ce 01       	movw	r24, r28
     e3c:	01 96       	adiw	r24, 0x01	; 1
     e3e:	98 d0       	rcall	.+304    	; 0xf70 <USB_Host_SendControlRequest>
     e40:	88 23       	and	r24, r24
     e42:	b9 f4       	brne	.+46     	; 0xe72 <USB_Host_GetDeviceConfigDescriptor+0x90>
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     e46:	9c 81       	ldd	r25, Y+4	; 0x04
     e48:	f6 01       	movw	r30, r12
     e4a:	91 83       	std	Z+1, r25	; 0x01
     e4c:	80 83       	st	Z, r24
     e4e:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
     e50:	f9 06       	cpc	r15, r25
     e52:	70 f0       	brcs	.+28     	; 0xe70 <USB_Host_GetDeviceConfigDescriptor+0x8e>
     e54:	90 93 6e 01 	sts	0x016E, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     e58:	80 93 6d 01 	sts	0x016D, r24
     e5c:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     e5e:	88 d0       	rcall	.+272    	; 0xf70 <USB_Host_SendControlRequest>
     e60:	88 23       	and	r24, r24
     e62:	39 f4       	brne	.+14     	; 0xe72 <USB_Host_GetDeviceConfigDescriptor+0x90>
     e64:	f8 01       	movw	r30, r16
     e66:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     e68:	92 30       	cpi	r25, 0x02	; 2
     e6a:	19 f0       	breq	.+6      	; 0xe72 <USB_Host_GetDeviceConfigDescriptor+0x90>
     e6c:	86 e0       	ldi	r24, 0x06	; 6
     e6e:	01 c0       	rjmp	.+2      	; 0xe72 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     e70:	85 e0       	ldi	r24, 0x05	; 5
     e72:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     e74:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	ff 90       	pop	r15
     e88:	ef 90       	pop	r14
     e8a:	df 90       	pop	r13
     e8c:	cf 90       	pop	r12
     e8e:	08 95       	ret

00000e90 <USB_GetNextDescriptorComp>:
     e90:	af 92       	push	r10
     e92:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     e94:	cf 92       	push	r12
     e96:	df 92       	push	r13
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	7c 01       	movw	r14, r24
     ea6:	8b 01       	movw	r16, r22
     ea8:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     eaa:	28 c0       	rjmp	.+80     	; 0xefc <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     eac:	f8 01       	movw	r30, r16
     eae:	c0 80       	ld	r12, Z
     eb0:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     eb2:	f6 01       	movw	r30, r12
     eb4:	80 81       	ld	r24, Z
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	9e 01       	movw	r18, r28
     eba:	8c 17       	cp	r24, r28
     ebc:	9d 07       	cpc	r25, r29
     ebe:	08 f4       	brcc	.+2      	; 0xec2 <USB_GetNextDescriptorComp+0x32>
     ec0:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     ec2:	c6 01       	movw	r24, r12
     ec4:	82 0f       	add	r24, r18
     ec6:	93 1f       	adc	r25, r19
     ec8:	f8 01       	movw	r30, r16
     eca:	91 83       	std	Z+1, r25	; 0x01
     ecc:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
     ece:	f7 01       	movw	r30, r14
     ed0:	80 81       	ld	r24, Z
     ed2:	91 81       	ldd	r25, Z+1	; 0x01
     ed4:	82 1b       	sub	r24, r18
     ed6:	93 0b       	sbc	r25, r19
     ed8:	91 83       	std	Z+1, r25	; 0x01
     eda:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     edc:	f8 01       	movw	r30, r16
     ede:	80 81       	ld	r24, Z
     ee0:	91 81       	ldd	r25, Z+1	; 0x01
     ee2:	f5 01       	movw	r30, r10
     ee4:	09 95       	icall
     ee6:	82 30       	cpi	r24, 0x02	; 2
     ee8:	49 f0       	breq	.+18     	; 0xefc <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	69 f4       	brne	.+26     	; 0xf08 <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
     eee:	f8 01       	movw	r30, r16
     ef0:	d1 82       	std	Z+1, r13	; 0x01
     ef2:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
     ef4:	f7 01       	movw	r30, r14
     ef6:	d1 83       	std	Z+1, r29	; 0x01
     ef8:	c0 83       	st	Z, r28
     efa:	06 c0       	rjmp	.+12     	; 0xf08 <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     efc:	f7 01       	movw	r30, r14
     efe:	c0 81       	ld	r28, Z
     f00:	d1 81       	ldd	r29, Z+1	; 0x01
     f02:	20 97       	sbiw	r28, 0x00	; 0
     f04:	99 f6       	brne	.-90     	; 0xeac <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     f06:	82 e0       	ldi	r24, 0x02	; 2
}
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	df 90       	pop	r13
     f16:	cf 90       	pop	r12
     f18:	bf 90       	pop	r11
     f1a:	af 90       	pop	r10
     f1c:	08 95       	ret

00000f1e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     f1e:	08 95       	ret

00000f20 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f28:	c9 ee       	ldi	r28, 0xE9	; 233
     f2a:	d3 e0       	ldi	r29, 0x03	; 3
     f2c:	06 c0       	rjmp	.+12     	; 0xf3a <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	a5 db       	rcall	.-2230   	; 0x67c <USB_Host_WaitMS>
     f32:	88 23       	and	r24, r24
     f34:	c9 f4       	brne	.+50     	; 0xf68 <USB_Host_WaitForIOS+0x48>
     f36:	21 97       	sbiw	r28, 0x01	; 1
     f38:	b1 f0       	breq	.+44     	; 0xf66 <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f3a:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f3c:	29 f4       	brne	.+10     	; 0xf48 <USB_Host_WaitForIOS+0x28>
     f3e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f42:	83 ff       	sbrs	r24, 3
     f44:	f4 cf       	rjmp	.-24     	; 0xf2e <USB_Host_WaitForIOS+0xe>
     f46:	0d c0       	rjmp	.+26     	; 0xf62 <USB_Host_WaitForIOS+0x42>
     f48:	11 30       	cpi	r17, 0x01	; 1
     f4a:	29 f4       	brne	.+10     	; 0xf56 <USB_Host_WaitForIOS+0x36>
     f4c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f50:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     f52:	ed cf       	rjmp	.-38     	; 0xf2e <USB_Host_WaitForIOS+0xe>
     f54:	06 c0       	rjmp	.+12     	; 0xf62 <USB_Host_WaitForIOS+0x42>
     f56:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f58:	51 f7       	brne	.-44     	; 0xf2e <USB_Host_WaitForIOS+0xe>
     f5a:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f5e:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     f60:	e6 cf       	rjmp	.-52     	; 0xf2e <USB_Host_WaitForIOS+0xe>
     f62:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     f64:	01 c0       	rjmp	.+2      	; 0xf68 <USB_Host_WaitForIOS+0x48>
     f66:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     f68:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	08 95       	ret

00000f70 <USB_Host_SendControlRequest>:
     f70:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     f72:	ff 92       	push	r15
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f7e:	e0 90 9e 00 	lds	r14, 0x009E
     f82:	ff 24       	eor	r15, r15
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	e8 22       	and	r14, r24
     f88:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     f8a:	00 91 6d 01 	lds	r16, 0x016D
     f8e:	10 91 6e 01 	lds	r17, 0x016E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f92:	80 91 9e 00 	lds	r24, 0x009E
     f96:	81 60       	ori	r24, 0x01	; 1
     f98:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	6e db       	rcall	.-2340   	; 0x67c <USB_Host_WaitMS>
     fa0:	88 23       	and	r24, r24
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <USB_Host_SendControlRequest+0x36>
     fa4:	ca c0       	rjmp	.+404    	; 0x113a <USB_Host_SendControlRequest+0x1ca>
     fa6:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     faa:	8f 7c       	andi	r24, 0xCF	; 207
     fac:	80 93 aa 00 	sts	0x00AA, r24
     fb0:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     fb4:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
     fb8:	8f 7e       	andi	r24, 0xEF	; 239
     fba:	80 93 a6 00 	sts	0x00A6, r24
     fbe:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fc2:	8f 7b       	andi	r24, 0xBF	; 191
     fc4:	80 93 a9 00 	sts	0x00A9, r24
     fc8:	88 e0       	ldi	r24, 0x08	; 8
     fca:	e7 e6       	ldi	r30, 0x67	; 103
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
     fcc:	f1 e0       	ldi	r31, 0x01	; 1
     fce:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     fd0:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     fd4:	81 50       	subi	r24, 0x01	; 1
     fd6:	d9 f7       	brne	.-10     	; 0xfce <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     fd8:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     fdc:	87 77       	andi	r24, 0x77	; 119
     fde:	80 93 a6 00 	sts	0x00A6, r24
     fe2:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     fe4:	9d df       	rcall	.-198    	; 0xf20 <USB_Host_WaitForIOS>
     fe6:	88 23       	and	r24, r24
     fe8:	09 f0       	breq	.+2      	; 0xfec <USB_Host_SendControlRequest+0x7c>
     fea:	a7 c0       	rjmp	.+334    	; 0x113a <USB_Host_SendControlRequest+0x1ca>
     fec:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ff0:	80 64       	ori	r24, 0x40	; 64
     ff2:	80 93 a9 00 	sts	0x00A9, r24
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	41 db       	rcall	.-2430   	; 0x67c <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ffa:	88 23       	and	r24, r24
     ffc:	09 f0       	breq	.+2      	; 0x1000 <USB_Host_SendControlRequest+0x90>
     ffe:	9d c0       	rjmp	.+314    	; 0x113a <USB_Host_SendControlRequest+0x1ca>
    1000:	80 91 67 01 	lds	r24, 0x0167
    1004:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1006:	4f c0       	rjmp	.+158    	; 0x10a6 <USB_Host_SendControlRequest+0x136>
    1008:	80 91 aa 00 	lds	r24, 0x00AA
    100c:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    100e:	80 61       	ori	r24, 0x10	; 16
    1010:	80 93 aa 00 	sts	0x00AA, r24
    1014:	20 97       	sbiw	r28, 0x00	; 0
    1016:	61 f5       	brne	.+88     	; 0x1070 <USB_Host_SendControlRequest+0x100>
    1018:	2e c0       	rjmp	.+92     	; 0x1076 <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    101a:	80 91 a9 00 	lds	r24, 0x00A9
    101e:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1020:	80 93 a9 00 	sts	0x00A9, r24
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	7c df       	rcall	.-264    	; 0xf20 <USB_Host_WaitForIOS>
    1028:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    102a:	09 f0       	breq	.+2      	; 0x102e <USB_Host_SendControlRequest+0xbe>
    102c:	86 c0       	rjmp	.+268    	; 0x113a <USB_Host_SendControlRequest+0x1ca>
    102e:	80 91 f6 00 	lds	r24, 0x00F6
    1032:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	41 f4       	brne	.+16     	; 0x104a <USB_Host_SendControlRequest+0xda>
    103a:	00 e0       	ldi	r16, 0x00	; 0
    103c:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    103e:	05 c0       	rjmp	.+10     	; 0x104a <USB_Host_SendControlRequest+0xda>
    1040:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
    1044:	89 93       	st	Y+, r24
    1046:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1048:	10 40       	sbci	r17, 0x00	; 0
    104a:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
    104e:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	19 f0       	breq	.+6      	; 0x105c <USB_Host_SendControlRequest+0xec>
    1056:	01 15       	cp	r16, r1
    1058:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    105a:	91 f7       	brne	.-28     	; 0x1040 <USB_Host_SendControlRequest+0xd0>
    105c:	80 91 a9 00 	lds	r24, 0x00A9
    1060:	80 64       	ori	r24, 0x40	; 64
    1062:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1066:	80 91 a6 00 	lds	r24, 0x00A6
    106a:	8e 77       	andi	r24, 0x7E	; 126
    106c:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1070:	01 15       	cp	r16, r1
    1072:	11 05       	cpc	r17, r1
    1074:	91 f6       	brne	.-92     	; 0x101a <USB_Host_SendControlRequest+0xaa>
    1076:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    107a:	8f 7c       	andi	r24, 0xCF	; 207
    107c:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    107e:	80 93 aa 00 	sts	0x00AA, r24
    1082:	80 91 a9 00 	lds	r24, 0x00A9
    1086:	8f 7b       	andi	r24, 0xBF	; 191
    1088:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    108c:	82 e0       	ldi	r24, 0x02	; 2
    108e:	48 df       	rcall	.-368    	; 0xf20 <USB_Host_WaitForIOS>
    1090:	88 23       	and	r24, r24
    1092:	09 f0       	breq	.+2      	; 0x1096 <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1094:	52 c0       	rjmp	.+164    	; 0x113a <USB_Host_SendControlRequest+0x1ca>
    1096:	80 91 a6 00 	lds	r24, 0x00A6
    109a:	8b 77       	andi	r24, 0x7B	; 123
    109c:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10a0:	82 e0       	ldi	r24, 0x02	; 2
    10a2:	3e df       	rcall	.-388    	; 0xf20 <USB_Host_WaitForIOS>
    10a4:	4a c0       	rjmp	.+148    	; 0x113a <USB_Host_SendControlRequest+0x1ca>
    10a6:	20 97       	sbiw	r28, 0x00	; 0
    10a8:	a1 f1       	breq	.+104    	; 0x1112 <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10aa:	80 91 aa 00 	lds	r24, 0x00AA
    10ae:	8f 7c       	andi	r24, 0xCF	; 207
    10b0:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    10b2:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10b6:	80 91 a9 00 	lds	r24, 0x00A9
    10ba:	8f 7b       	andi	r24, 0xBF	; 191
    10bc:	80 93 a9 00 	sts	0x00A9, r24
    10c0:	1c c0       	rjmp	.+56     	; 0x10fa <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10c2:	2e df       	rcall	.-420    	; 0xf20 <USB_Host_WaitForIOS>
    10c4:	88 23       	and	r24, r24
    10c6:	c9 f5       	brne	.+114    	; 0x113a <USB_Host_SendControlRequest+0x1ca>
    10c8:	fe 01       	movw	r30, r28
    10ca:	07 c0       	rjmp	.+14     	; 0x10da <USB_Host_SendControlRequest+0x16a>
    10cc:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10ce:	ef 01       	movw	r28, r30
    10d0:	80 93 af 00 	sts	0x00AF, r24
    10d4:	01 50       	subi	r16, 0x01	; 1
    10d6:	10 40       	sbci	r17, 0x00	; 0
    10d8:	59 f0       	breq	.+22     	; 0x10f0 <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    10da:	ef 01       	movw	r28, r30
    10dc:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    10e0:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    10e4:	80 91 48 01 	lds	r24, 0x0148
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    10e8:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10ea:	28 17       	cp	r18, r24
    10ec:	39 07       	cpc	r19, r25
    10ee:	70 f3       	brcs	.-36     	; 0x10cc <USB_Host_SendControlRequest+0x15c>
    10f0:	80 91 a6 00 	lds	r24, 0x00A6
    10f4:	8b 77       	andi	r24, 0x7B	; 123
    10f6:	80 93 a6 00 	sts	0x00A6, r24
    10fa:	82 e0       	ldi	r24, 0x02	; 2
    10fc:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10fe:	11 05       	cpc	r17, r1
    1100:	01 f7       	brne	.-64     	; 0x10c2 <USB_Host_SendControlRequest+0x152>
    1102:	0e df       	rcall	.-484    	; 0xf20 <USB_Host_WaitForIOS>
    1104:	88 23       	and	r24, r24
    1106:	c9 f4       	brne	.+50     	; 0x113a <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1108:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    110c:	80 64       	ori	r24, 0x40	; 64
    110e:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1112:	80 91 aa 00 	lds	r24, 0x00AA
    1116:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1118:	80 61       	ori	r24, 0x10	; 16
    111a:	80 93 aa 00 	sts	0x00AA, r24
    111e:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1122:	8f 7b       	andi	r24, 0xBF	; 191
    1124:	80 93 a9 00 	sts	0x00A9, r24
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	fa de       	rcall	.-524    	; 0xf20 <USB_Host_WaitForIOS>
    112c:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    112e:	29 f4       	brne	.+10     	; 0x113a <USB_Host_SendControlRequest+0x1ca>
    1130:	90 91 a6 00 	lds	r25, 0x00A6
    1134:	9e 77       	andi	r25, 0x7E	; 126
    1136:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    113a:	90 91 a9 00 	lds	r25, 0x00A9
    113e:	90 64       	ori	r25, 0x40	; 64
    1140:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1144:	e1 14       	cp	r14, r1
    1146:	f1 04       	cpc	r15, r1
    1148:	29 f4       	brne	.+10     	; 0x1154 <USB_Host_SendControlRequest+0x1e4>
    114a:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    114e:	9e 7f       	andi	r25, 0xFE	; 254
    1150:	90 93 9e 00 	sts	0x009E, r25
    1154:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1156:	90 93 a8 00 	sts	0x00A8, r25
    115a:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	08 95       	ret

0000116c <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    116c:	cf 93       	push	r28
    116e:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1170:	10 92 67 01 	sts	0x0167, r1
    1174:	89 e0       	ldi	r24, 0x09	; 9
    1176:	80 93 68 01 	sts	0x0168, r24
    117a:	c0 93 69 01 	sts	0x0169, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    117e:	10 92 6a 01 	sts	0x016A, r1
    1182:	10 92 6c 01 	sts	0x016C, r1
    1186:	10 92 6b 01 	sts	0x016B, r1
    118a:	10 92 6e 01 	sts	0x016E, r1
    118e:	10 92 6d 01 	sts	0x016D, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1192:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	ea de       	rcall	.-556    	; 0xf70 <USB_Host_SendControlRequest>
    119c:	88 23       	and	r24, r24
    119e:	49 f4       	brne	.+18     	; 0x11b2 <USB_Host_SetDeviceConfiguration+0x46>
    11a0:	c0 93 65 01 	sts	0x0165, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    11a4:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    11a6:	11 f0       	breq	.+4      	; 0x11ac <USB_Host_SetDeviceConfiguration+0x40>
    11a8:	9b e0       	ldi	r25, 0x0B	; 11
    11aa:	01 c0       	rjmp	.+2      	; 0x11ae <USB_Host_SetDeviceConfiguration+0x42>
    11ac:	9a e0       	ldi	r25, 0x0A	; 10
    11ae:	90 93 6f 01 	sts	0x016F, r25
    11b2:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    11b4:	08 95       	ret

000011b6 <USB_Host_SetInterfaceAltSetting>:
    11b6:	e7 e6       	ldi	r30, 0x67	; 103
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    11b8:	f1 e0       	ldi	r31, 0x01	; 1
    11ba:	91 e0       	ldi	r25, 0x01	; 1
    11bc:	90 93 67 01 	sts	0x0167, r25
    11c0:	9b e0       	ldi	r25, 0x0B	; 11
    11c2:	90 93 68 01 	sts	0x0168, r25
    11c6:	60 93 69 01 	sts	0x0169, r22
    11ca:	13 82       	std	Z+3, r1	; 0x03
    11cc:	80 93 6b 01 	sts	0x016B, r24
    11d0:	15 82       	std	Z+5, r1	; 0x05
    11d2:	10 92 6e 01 	sts	0x016E, r1
    11d6:	10 92 6d 01 	sts	0x016D, r1
    11da:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	c6 ce       	rjmp	.-628    	; 0xf70 <USB_Host_SendControlRequest>

000011e4 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    11e4:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    11e6:	c0 91 a7 00 	lds	r28, 0x00A7
    11ea:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    11ec:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    11f0:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    11f4:	98 da       	rcall	.-2768   	; 0x726 <USB_Host_ProcessNextHostState>
    11f6:	c0 93 a7 00 	sts	0x00A7, r28
    11fa:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    11fc:	08 95       	ret

000011fe <DCOMP_PRNT_Host_NextPRNTInterface>:

	return PRNT_ENUMERROR_NoError;
}

static uint8_t DCOMP_PRNT_Host_NextPRNTInterface(void* CurrentDescriptor)
{
    11fe:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1200:	81 81       	ldd	r24, Z+1	; 0x01
    1202:	84 30       	cpi	r24, 0x04	; 4
    1204:	49 f4       	brne	.+18     	; 0x1218 <DCOMP_PRNT_Host_NextPRNTInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == PRNT_CSCP_PrinterClass)    &&
    1206:	85 81       	ldd	r24, Z+5	; 0x05
    1208:	87 30       	cpi	r24, 0x07	; 7
    120a:	31 f4       	brne	.+12     	; 0x1218 <DCOMP_PRNT_Host_NextPRNTInterface+0x1a>
    120c:	86 81       	ldd	r24, Z+6	; 0x06
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	19 f4       	brne	.+6      	; 0x1218 <DCOMP_PRNT_Host_NextPRNTInterface+0x1a>
		    (Interface->SubClass == PRNT_CSCP_PrinterSubclass) &&
    1212:	87 81       	ldd	r24, Z+7	; 0x07
    1214:	82 30       	cpi	r24, 0x02	; 2
    1216:	11 f0       	breq	.+4      	; 0x121c <DCOMP_PRNT_Host_NextPRNTInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1218:	82 e0       	ldi	r24, 0x02	; 2
    121a:	08 95       	ret

		if ((Interface->Class    == PRNT_CSCP_PrinterClass)    &&
		    (Interface->SubClass == PRNT_CSCP_PrinterSubclass) &&
		    (Interface->Protocol == PRNT_CSCP_BidirectionalProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    121c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    121e:	08 95       	ret

00001220 <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint>:

static uint8_t DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint(void* CurrentDescriptor)
{
    1220:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1222:	81 81       	ldd	r24, Z+1	; 0x01
    1224:	85 30       	cpi	r24, 0x05	; 5
    1226:	29 f4       	brne	.+10     	; 0x1232 <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
    1228:	83 81       	ldd	r24, Z+3	; 0x03
    122a:	83 70       	andi	r24, 0x03	; 3

		if (EndpointType == EP_TYPE_BULK)
    122c:	82 30       	cpi	r24, 0x02	; 2
    122e:	19 f4       	brne	.+6      	; 0x1236 <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint+0x16>
    1230:	04 c0       	rjmp	.+8      	; 0x123a <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint+0x1a>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1232:	84 30       	cpi	r24, 0x04	; 4
    1234:	21 f0       	breq	.+8      	; 0x123e <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint+0x1e>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1236:	82 e0       	ldi	r24, 0x02	; 2
    1238:	08 95       	ret
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (EndpointType == EP_TYPE_BULK)
		  return DESCRIPTOR_SEARCH_Found;
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    123e:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1240:	08 95       	ret

00001242 <PRNT_Host_ConfigurePipes>:
#include "PrinterClassHost.h"

uint8_t PRNT_Host_ConfigurePipes(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo,
                                 uint16_t ConfigDescriptorSize,
							     void* ConfigDescriptorData)
{
    1242:	af 92       	push	r10
    1244:	bf 92       	push	r11
    1246:	cf 92       	push	r12
    1248:	df 92       	push	r13
    124a:	ef 92       	push	r14
    124c:	ff 92       	push	r15
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	00 d0       	rcall	.+0      	; 0x1258 <PRNT_Host_ConfigurePipes+0x16>
    1258:	00 d0       	rcall	.+0      	; 0x125a <PRNT_Host_ConfigurePipes+0x18>
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	8c 01       	movw	r16, r24
    1260:	7a 83       	std	Y+2, r23	; 0x02
    1262:	69 83       	std	Y+1, r22	; 0x01
    1264:	5c 83       	std	Y+4, r21	; 0x04
    1266:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint   = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint  = NULL;
	USB_Descriptor_Interface_t* PrinterInterface = NULL;

	memset(&PRNTInterfaceInfo->State, 0x00, sizeof(PRNTInterfaceInfo->State));
    1268:	0c 96       	adiw	r24, 0x0c	; 12
    126a:	fc 01       	movw	r30, r24
    126c:	83 e0       	ldi	r24, 0x03	; 3
    126e:	df 01       	movw	r26, r30
    1270:	1d 92       	st	X+, r1
    1272:	8a 95       	dec	r24
    1274:	e9 f7       	brne	.-6      	; 0x1270 <PRNT_Host_ConfigurePipes+0x2e>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1276:	eb 81       	ldd	r30, Y+3	; 0x03
    1278:	fc 81       	ldd	r31, Y+4	; 0x04
    127a:	81 81       	ldd	r24, Z+1	; 0x01
    127c:	82 30       	cpi	r24, 0x02	; 2
    127e:	09 f0       	breq	.+2      	; 0x1282 <PRNT_Host_ConfigurePipes+0x40>
    1280:	64 c0       	rjmp	.+200    	; 0x134a <PRNT_Host_ConfigurePipes+0x108>
    1282:	aa 24       	eor	r10, r10
    1284:	bb 24       	eor	r11, r11
    1286:	cc 24       	eor	r12, r12
    1288:	dd 24       	eor	r13, r13
    128a:	ee 24       	eor	r14, r14
    128c:	ff 24       	eor	r15, r15
	  return PRNT_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(PrinterInterface) ||
    128e:	a1 14       	cp	r10, r1
    1290:	b1 04       	cpc	r11, r1
    1292:	51 f0       	breq	.+20     	; 0x12a8 <PRNT_Host_ConfigurePipes+0x66>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1294:	ce 01       	movw	r24, r28
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	be 01       	movw	r22, r28
    129a:	6d 5f       	subi	r22, 0xFD	; 253
    129c:	7f 4f       	sbci	r23, 0xFF	; 255
    129e:	40 e1       	ldi	r20, 0x10	; 16
    12a0:	59 e0       	ldi	r21, 0x09	; 9
    12a2:	f6 dd       	rcall	.-1044   	; 0xe90 <USB_GetNextDescriptorComp>
    12a4:	88 23       	and	r24, r24
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return PRNT_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(PrinterInterface) ||
    12a6:	71 f0       	breq	.+28     	; 0x12c4 <PRNT_Host_ConfigurePipes+0x82>
    12a8:	ce 01       	movw	r24, r28
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    12aa:	01 96       	adiw	r24, 0x01	; 1
    12ac:	be 01       	movw	r22, r28
    12ae:	6d 5f       	subi	r22, 0xFD	; 253
    12b0:	7f 4f       	sbci	r23, 0xFF	; 255
    12b2:	4f ef       	ldi	r20, 0xFF	; 255
    12b4:	58 e0       	ldi	r21, 0x08	; 8
    12b6:	ec dd       	rcall	.-1064   	; 0xe90 <USB_GetNextDescriptorComp>
    12b8:	88 23       	and	r24, r24
    12ba:	09 f0       	breq	.+2      	; 0x12be <PRNT_Host_ConfigurePipes+0x7c>
    12bc:	48 c0       	rjmp	.+144    	; 0x134e <PRNT_Host_ConfigurePipes+0x10c>
    12be:	ab 80       	ldd	r10, Y+3	; 0x03
    12c0:	bc 80       	ldd	r11, Y+4	; 0x04
			                              DCOMP_PRNT_Host_NextPRNTInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return PRNT_ENUMERROR_NoCompatibleInterfaceFound;
			}

			PrinterInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    12c2:	e1 cf       	rjmp	.-62     	; 0x1286 <PRNT_Host_ConfigurePipes+0x44>
    12c4:	eb 81       	ldd	r30, Y+3	; 0x03
    12c6:	fc 81       	ldd	r31, Y+4	; 0x04
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    12c8:	82 81       	ldd	r24, Z+2	; 0x02
    12ca:	87 ff       	sbrs	r24, 7

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <PRNT_Host_ConfigurePipes+0x90>
    12ce:	7f 01       	movw	r14, r30
    12d0:	01 c0       	rjmp	.+2      	; 0x12d4 <PRNT_Host_ConfigurePipes+0x92>
		  DataINEndpoint  = EndpointData;
    12d2:	6f 01       	movw	r12, r30
    12d4:	e1 14       	cp	r14, r1
		else
		  DataOUTEndpoint = EndpointData;
    12d6:	f1 04       	cpc	r15, r1
	memset(&PRNTInterfaceInfo->State, 0x00, sizeof(PRNTInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return PRNT_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    12d8:	d1 f2       	breq	.-76     	; 0x128e <PRNT_Host_ConfigurePipes+0x4c>
    12da:	c1 14       	cp	r12, r1
    12dc:	d1 04       	cpc	r13, r1
    12de:	b9 f2       	breq	.-82     	; 0x128e <PRNT_Host_ConfigurePipes+0x4c>
    12e0:	f7 01       	movw	r30, r14
    12e2:	84 81       	ldd	r24, Z+4	; 0x04
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	PRNTInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    12e4:	95 81       	ldd	r25, Z+5	; 0x05
    12e6:	d8 01       	movw	r26, r16
    12e8:	12 96       	adiw	r26, 0x02	; 2
    12ea:	9c 93       	st	X, r25
    12ec:	8e 93       	st	-X, r24
    12ee:	11 97       	sbiw	r26, 0x01	; 1
    12f0:	82 81       	ldd	r24, Z+2	; 0x02
    12f2:	13 96       	adiw	r26, 0x03	; 3
	PRNTInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    12f4:	8c 93       	st	X, r24
    12f6:	13 97       	sbiw	r26, 0x03	; 3
    12f8:	22 e0       	ldi	r18, 0x02	; 2
    12fa:	14 96       	adiw	r26, 0x04	; 4
	PRNTInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
    12fc:	2c 93       	st	X, r18
    12fe:	14 97       	sbiw	r26, 0x04	; 4
    1300:	f6 01       	movw	r30, r12
    1302:	84 81       	ldd	r24, Z+4	; 0x04

	PRNTInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1304:	95 81       	ldd	r25, Z+5	; 0x05
    1306:	18 96       	adiw	r26, 0x08	; 8
    1308:	9c 93       	st	X, r25
    130a:	8e 93       	st	-X, r24
    130c:	17 97       	sbiw	r26, 0x07	; 7
    130e:	82 81       	ldd	r24, Z+2	; 0x02
    1310:	19 96       	adiw	r26, 0x09	; 9
	PRNTInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1312:	8c 93       	st	X, r24
    1314:	19 97       	sbiw	r26, 0x09	; 9
    1316:	1a 96       	adiw	r26, 0x0a	; 10
    1318:	2c 93       	st	X, r18
	PRNTInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;
    131a:	c8 01       	movw	r24, r16
    131c:	61 e0       	ldi	r22, 0x01	; 1

	if (!(Pipe_ConfigurePipeTable(&PRNTInterfaceInfo->Config.DataINPipe, 1)))
    131e:	e8 db       	rcall	.-2096   	; 0xaf0 <Pipe_ConfigurePipeTable>
    1320:	88 23       	and	r24, r24
    1322:	b9 f0       	breq	.+46     	; 0x1352 <PRNT_Host_ConfigurePipes+0x110>
    1324:	c8 01       	movw	r24, r16
    1326:	06 96       	adiw	r24, 0x06	; 6
    1328:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Pipe_ConfigurePipeTable(&PRNTInterfaceInfo->Config.DataOUTPipe, 1)))
    132a:	e2 db       	rcall	.-2108   	; 0xaf0 <Pipe_ConfigurePipeTable>
    132c:	88 23       	and	r24, r24
    132e:	89 f0       	breq	.+34     	; 0x1352 <PRNT_Host_ConfigurePipes+0x110>
    1330:	d5 01       	movw	r26, r10
    1332:	12 96       	adiw	r26, 0x02	; 2
    1334:	8c 91       	ld	r24, X
    1336:	12 97       	sbiw	r26, 0x02	; 2
	  return false;

	PRNTInterfaceInfo->State.InterfaceNumber  = PrinterInterface->InterfaceNumber;
    1338:	f8 01       	movw	r30, r16
    133a:	85 87       	std	Z+13, r24	; 0x0d
    133c:	13 96       	adiw	r26, 0x03	; 3
    133e:	8c 91       	ld	r24, X
    1340:	13 97       	sbiw	r26, 0x03	; 3
    1342:	86 87       	std	Z+14, r24	; 0x0e
	PRNTInterfaceInfo->State.AlternateSetting = PrinterInterface->AlternateSetting;
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	84 87       	std	Z+12, r24	; 0x0c
    1348:	04 c0       	rjmp	.+8      	; 0x1352 <PRNT_Host_ConfigurePipes+0x110>
    134a:	81 e0       	ldi	r24, 0x01	; 1
	PRNTInterfaceInfo->State.IsActive = true;
    134c:	03 c0       	rjmp	.+6      	; 0x1354 <PRNT_Host_ConfigurePipes+0x112>
    134e:	82 e0       	ldi	r24, 0x02	; 2
    1350:	01 c0       	rjmp	.+2      	; 0x1354 <PRNT_Host_ConfigurePipes+0x112>
	USB_Descriptor_Interface_t* PrinterInterface = NULL;

	memset(&PRNTInterfaceInfo->State, 0x00, sizeof(PRNTInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return PRNT_ENUMERROR_InvalidConfigDescriptor;
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	0f 90       	pop	r0
		                              DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_PRNT_Host_NextPRNTInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return PRNT_ENUMERROR_NoCompatibleInterfaceFound;
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0

	if (!(Pipe_ConfigurePipeTable(&PRNTInterfaceInfo->Config.DataINPipe, 1)))
	  return false;

	if (!(Pipe_ConfigurePipeTable(&PRNTInterfaceInfo->Config.DataOUTPipe, 1)))
	  return false;
    135a:	0f 90       	pop	r0
	PRNTInterfaceInfo->State.InterfaceNumber  = PrinterInterface->InterfaceNumber;
	PRNTInterfaceInfo->State.AlternateSetting = PrinterInterface->AlternateSetting;
	PRNTInterfaceInfo->State.IsActive = true;

	return PRNT_ENUMERROR_NoError;
}
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	1f 91       	pop	r17
    1362:	0f 91       	pop	r16
    1364:	ff 90       	pop	r15
    1366:	ef 90       	pop	r14
    1368:	df 90       	pop	r13
    136a:	cf 90       	pop	r12
    136c:	bf 90       	pop	r11
    136e:	af 90       	pop	r10
    1370:	08 95       	ret

00001372 <PRNT_Host_SetBidirectionalMode>:
    1372:	fc 01       	movw	r30, r24
    1374:	66 85       	ldd	r22, Z+14	; 0x0e
    1376:	66 23       	and	r22, r22
    1378:	11 f0       	breq	.+4      	; 0x137e <PRNT_Host_SetBidirectionalMode+0xc>
{
	if (PRNTInterfaceInfo->State.AlternateSetting)
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_SetInterfaceAltSetting(PRNTInterfaceInfo->State.InterfaceNumber,
    137a:	85 85       	ldd	r24, Z+13	; 0x0d
    137c:	1c cf       	rjmp	.-456    	; 0x11b6 <USB_Host_SetInterfaceAltSetting>
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	08 95       	ret

00001382 <PRNT_Host_Flush>:
		{
			return ErrorCode;
		}
	}

	return HOST_SENDCONTROL_Successful;
    1382:	fc 01       	movw	r30, r24
}
    1384:	80 91 6f 01 	lds	r24, 0x016F
	return USB_Host_SendControlRequest(NULL);
}

uint8_t PRNT_Host_Flush(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
    1388:	8b 30       	cpi	r24, 0x0B	; 11
    138a:	51 f5       	brne	.+84     	; 0x13e0 <PRNT_Host_Flush+0x5e>
    138c:	84 85       	ldd	r24, Z+12	; 0x0c
    138e:	88 23       	and	r24, r24
    1390:	39 f1       	breq	.+78     	; 0x13e0 <PRNT_Host_Flush+0x5e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1392:	86 81       	ldd	r24, Z+6	; 0x06
    1394:	8f 70       	andi	r24, 0x0F	; 15
    1396:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    139a:	80 91 a9 00 	lds	r24, 0x00A9
    139e:	8f 7b       	andi	r24, 0xBF	; 191
    13a0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13a4:	80 91 f6 00 	lds	r24, 0x00F6
    13a8:	90 91 f7 00 	lds	r25, 0x00F7
	uint8_t ErrorCode;

	Pipe_SelectPipe(PRNTInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if (!(Pipe_BytesInPipe()))
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	d1 f0       	breq	.+52     	; 0x13e4 <PRNT_Host_Flush+0x62>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    13b0:	90 91 a6 00 	lds	r25, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    13b4:	80 91 a6 00 	lds	r24, 0x00A6
    13b8:	8b 77       	andi	r24, 0x7B	; 123
    13ba:	80 93 a6 00 	sts	0x00A6, r24

	bool BankFull = !(Pipe_IsReadWriteAllowed());

	Pipe_ClearOUT();

	if (BankFull)
    13be:	95 fd       	sbrc	r25, 5
    13c0:	08 c0       	rjmp	.+16     	; 0x13d2 <PRNT_Host_Flush+0x50>
	{
		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
    13c2:	cb db       	rcall	.-2154   	; 0xb5a <Pipe_WaitUntilReady>
    13c4:	88 23       	and	r24, r24
    13c6:	79 f4       	brne	.+30     	; 0x13e6 <PRNT_Host_Flush+0x64>
    13c8:	80 91 a6 00 	lds	r24, 0x00A6
    13cc:	8b 77       	andi	r24, 0x7B	; 123
    13ce:	80 93 a6 00 	sts	0x00A6, r24
    13d2:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13d6:	80 64       	ori	r24, 0x40	; 64
    13d8:	80 93 a9 00 	sts	0x00A9, r24
    13dc:	80 e0       	ldi	r24, 0x00	; 0
		Pipe_ClearOUT();
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
    13de:	08 95       	ret
    13e0:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t PRNT_Host_Flush(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    13e2:	08 95       	ret
    13e4:	80 e0       	ldi	r24, 0x00	; 0

	Pipe_SelectPipe(PRNTInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if (!(Pipe_BytesInPipe()))
	  return PIPE_READYWAIT_NoError;
    13e6:	08 95       	ret

000013e8 <PRNT_Host_USBTask>:
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
}
    13e8:	20 91 6f 01 	lds	r18, 0x016F
	return DESCRIPTOR_SEARCH_NotFound;
}

void PRNT_Host_USBTask(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
    13ec:	2b 30       	cpi	r18, 0x0B	; 11
    13ee:	29 f4       	brne	.+10     	; 0x13fa <PRNT_Host_USBTask+0x12>
    13f0:	fc 01       	movw	r30, r24
    13f2:	24 85       	ldd	r18, Z+12	; 0x0c
    13f4:	22 23       	and	r18, r18
    13f6:	09 f0       	breq	.+2      	; 0x13fa <PRNT_Host_USBTask+0x12>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	PRNT_Host_Flush(PRNTInterfaceInfo);
    13f8:	c4 cf       	rjmp	.-120    	; 0x1382 <PRNT_Host_Flush>
    13fa:	08 95       	ret

000013fc <PRNT_Host_SendData>:
    13fc:	fc 01       	movw	r30, r24
}

uint8_t PRNT_Host_SendData(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo,
                           const void* Buffer,
                           const uint16_t Length)
{
    13fe:	cb 01       	movw	r24, r22
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
    1400:	20 91 6f 01 	lds	r18, 0x016F
    1404:	2b 30       	cpi	r18, 0x0B	; 11
    1406:	f1 f4       	brne	.+60     	; 0x1444 <PRNT_Host_SendData+0x48>
    1408:	24 85       	ldd	r18, Z+12	; 0x0c
    140a:	22 23       	and	r18, r18
    140c:	e9 f0       	breq	.+58     	; 0x1448 <PRNT_Host_SendData+0x4c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    140e:	26 81       	ldd	r18, Z+6	; 0x06
    1410:	2f 70       	andi	r18, 0x0F	; 15
    1412:	20 93 a7 00 	sts	0x00A7, r18

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1416:	20 91 a9 00 	lds	r18, 0x00A9
    141a:	2f 7b       	andi	r18, 0xBF	; 191
    141c:	20 93 a9 00 	sts	0x00A9, r18
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(PRNTInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(Buffer, Length, NULL)) != PIPE_RWSTREAM_NoError)
    1420:	ba 01       	movw	r22, r20
    1422:	40 e0       	ldi	r20, 0x00	; 0
    1424:	50 e0       	ldi	r21, 0x00	; 0
    1426:	a8 da       	rcall	.-2736   	; 0x978 <Pipe_Write_Stream_LE>
    1428:	88 23       	and	r24, r24
    142a:	79 f4       	brne	.+30     	; 0x144a <PRNT_Host_SendData+0x4e>
    142c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1430:	8b 77       	andi	r24, 0x7B	; 123
    1432:	80 93 a6 00 	sts	0x00A6, r24
    1436:	91 db       	rcall	.-2270   	; 0xb5a <Pipe_WaitUntilReady>
	  return ErrorCode;

	Pipe_ClearOUT();

	ErrorCode = Pipe_WaitUntilReady();
    1438:	90 91 a9 00 	lds	r25, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    143c:	90 64       	ori	r25, 0x40	; 64
    143e:	90 93 a9 00 	sts	0x00A9, r25
    1442:	08 95       	ret
    1444:	82 e0       	ldi	r24, 0x02	; 2

	Pipe_Freeze();

	return ErrorCode;
    1446:	08 95       	ret
                           const uint16_t Length)
{
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    1448:	82 e0       	ldi	r24, 0x02	; 2
    144a:	08 95       	ret

0000144c <PRNT_Host_GetDeviceID>:
    144c:	cf 92       	push	r12
	ErrorCode = Pipe_WaitUntilReady();

	Pipe_Freeze();

	return ErrorCode;
}
    144e:	df 92       	push	r13
}

uint8_t PRNT_Host_GetDeviceID(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo,
                              char* const DeviceIDString,
                              const uint16_t BufferSize)
{
    1450:	ff 92       	push	r15
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	00 d0       	rcall	.+0      	; 0x145c <PRNT_Host_GetDeviceID+0x10>
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	6b 01       	movw	r12, r22
    1462:	8a 01       	movw	r16, r20
	uint8_t  ErrorCode;
	uint16_t DeviceIDStringLength = 0;
    1464:	1a 82       	std	Y+2, r1	; 0x02
    1466:	19 82       	std	Y+1, r1	; 0x01

	USB_ControlRequest = (USB_Request_Header_t)
    1468:	fc 01       	movw	r30, r24
    146a:	85 85       	ldd	r24, Z+13	; 0x0d
    146c:	91 ea       	ldi	r25, 0xA1	; 161
    146e:	90 93 67 01 	sts	0x0167, r25
    1472:	10 92 68 01 	sts	0x0168, r1
    1476:	10 92 6a 01 	sts	0x016A, r1
    147a:	10 92 69 01 	sts	0x0169, r1
    147e:	80 93 6b 01 	sts	0x016B, r24
    1482:	10 92 6c 01 	sts	0x016C, r1
    1486:	82 e0       	ldi	r24, 0x02	; 2
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	90 93 6e 01 	sts	0x016E, r25
    148e:	80 93 6d 01 	sts	0x016D, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1492:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(DeviceIDStringLength),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(&DeviceIDStringLength)) != HOST_SENDCONTROL_Successful)
    1496:	ce 01       	movw	r24, r28
    1498:	01 96       	adiw	r24, 0x01	; 1
    149a:	6a dd       	rcall	.-1324   	; 0xf70 <USB_Host_SendControlRequest>
    149c:	f8 2e       	mov	r15, r24
    149e:	88 23       	and	r24, r24
    14a0:	51 f5       	brne	.+84     	; 0x14f6 <PRNT_Host_GetDeviceID+0xaa>
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
	  return ErrorCode;

	if (!(DeviceIDStringLength))
    14a4:	9a 81       	ldd	r25, Y+2	; 0x02
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	11 f4       	brne	.+4      	; 0x14ae <PRNT_Host_GetDeviceID+0x62>
    14aa:	f6 01       	movw	r30, r12
	{
		DeviceIDString[0] = 0x00;
    14ac:	23 c0       	rjmp	.+70     	; 0x14f4 <PRNT_Host_GetDeviceID+0xa8>
    14ae:	29 2f       	mov	r18, r25

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
    14b0:	38 2f       	mov	r19, r24
    14b2:	3a 83       	std	Y+2, r19	; 0x02
		return HOST_SENDCONTROL_Successful;
	}

	DeviceIDStringLength = be16_to_cpu(DeviceIDStringLength);
    14b4:	29 83       	std	Y+1, r18	; 0x01
    14b6:	02 17       	cp	r16, r18

	if (DeviceIDStringLength > BufferSize)
    14b8:	13 07       	cpc	r17, r19
    14ba:	10 f4       	brcc	.+4      	; 0x14c0 <PRNT_Host_GetDeviceID+0x74>
    14bc:	1a 83       	std	Y+2, r17	; 0x02
	  DeviceIDStringLength = BufferSize;
    14be:	09 83       	std	Y+1, r16	; 0x01
    14c0:	89 81       	ldd	r24, Y+1	; 0x01

	USB_ControlRequest.wLength = DeviceIDStringLength;
    14c2:	9a 81       	ldd	r25, Y+2	; 0x02
    14c4:	90 93 6e 01 	sts	0x016E, r25
    14c8:	80 93 6d 01 	sts	0x016D, r24
    14cc:	c6 01       	movw	r24, r12

	if ((ErrorCode = USB_Host_SendControlRequest(DeviceIDString)) != HOST_SENDCONTROL_Successful)
    14ce:	50 dd       	rcall	.-1376   	; 0xf70 <USB_Host_SendControlRequest>
    14d0:	f8 2e       	mov	r15, r24
    14d2:	88 23       	and	r24, r24
    14d4:	81 f4       	brne	.+32     	; 0x14f6 <PRNT_Host_GetDeviceID+0xaa>
    14d6:	09 81       	ldd	r16, Y+1	; 0x01
    14d8:	1a 81       	ldd	r17, Y+2	; 0x02
	  return ErrorCode;

	memmove(&DeviceIDString[0], &DeviceIDString[2], DeviceIDStringLength - 2);
    14da:	b6 01       	movw	r22, r12
    14dc:	6e 5f       	subi	r22, 0xFE	; 254
    14de:	7f 4f       	sbci	r23, 0xFF	; 255
    14e0:	a8 01       	movw	r20, r16
    14e2:	42 50       	subi	r20, 0x02	; 2
    14e4:	50 40       	sbci	r21, 0x00	; 0
    14e6:	c6 01       	movw	r24, r12
    14e8:	52 d0       	rcall	.+164    	; 0x158e <memmove>
    14ea:	0c 0d       	add	r16, r12
    14ec:	1d 1d       	adc	r17, r13
    14ee:	02 50       	subi	r16, 0x02	; 2

	DeviceIDString[DeviceIDStringLength - 2] = 0x00;
    14f0:	10 40       	sbci	r17, 0x00	; 0
    14f2:	f8 01       	movw	r30, r16
    14f4:	10 82       	st	Z, r1
    14f6:	8f 2d       	mov	r24, r15
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0

	return HOST_SENDCONTROL_Successful;
}
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	ff 90       	pop	r15
    1506:	df 90       	pop	r13
    1508:	cf 90       	pop	r12
    150a:	08 95       	ret

0000150c <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    150c:	90 91 c8 00 	lds	r25, 0x00C8
    1510:	95 ff       	sbrs	r25, 5
    1512:	fc cf       	rjmp	.-8      	; 0x150c <Serial_putchar>
				UDR1 = DataByte;
    1514:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	08 95       	ret

0000151e <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    151e:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1522:	87 ff       	sbrs	r24, 7
    1524:	08 c0       	rjmp	.+16     	; 0x1536 <Serial_getchar+0x18>
    1526:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    152a:	87 ff       	sbrs	r24, 7
    152c:	07 c0       	rjmp	.+14     	; 0x153c <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    152e:	80 91 ce 00 	lds	r24, 0x00CE
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	08 95       	ret
	  return _FDEV_EOF;
    1536:	8e ef       	ldi	r24, 0xFE	; 254
    1538:	9f ef       	ldi	r25, 0xFF	; 255
    153a:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    153c:	8f ef       	ldi	r24, 0xFF	; 255
    153e:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1540:	08 95       	ret

00001542 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1542:	fc 01       	movw	r30, r24
	if (!(Stream))
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	51 f4       	brne	.+20     	; 0x155c <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1548:	e0 e7       	ldi	r30, 0x70	; 112
    154a:	f1 e0       	ldi	r31, 0x01	; 1
    154c:	f0 93 7f 01 	sts	0x017F, r31
    1550:	e0 93 7e 01 	sts	0x017E, r30
		stdout = Stream;
    1554:	f0 93 81 01 	sts	0x0181, r31
    1558:	e0 93 80 01 	sts	0x0180, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    155c:	8e e0       	ldi	r24, 0x0E	; 14
    155e:	df 01       	movw	r26, r30
    1560:	1d 92       	st	X+, r1
    1562:	8a 95       	dec	r24
    1564:	e9 f7       	brne	.-6      	; 0x1560 <Serial_CreateStream+0x1e>
    1566:	83 e0       	ldi	r24, 0x03	; 3
    1568:	83 83       	std	Z+3, r24	; 0x03
    156a:	86 e8       	ldi	r24, 0x86	; 134
    156c:	9a e0       	ldi	r25, 0x0A	; 10
    156e:	91 87       	std	Z+9, r25	; 0x09
    1570:	80 87       	std	Z+8, r24	; 0x08
    1572:	8f e8       	ldi	r24, 0x8F	; 143
    1574:	9a e0       	ldi	r25, 0x0A	; 10
    1576:	93 87       	std	Z+11, r25	; 0x0b
    1578:	82 87       	std	Z+10, r24	; 0x0a
}
    157a:	08 95       	ret

0000157c <memcpy>:
    157c:	fb 01       	movw	r30, r22
    157e:	dc 01       	movw	r26, r24
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <memcpy+0xa>
    1582:	01 90       	ld	r0, Z+
    1584:	0d 92       	st	X+, r0
    1586:	41 50       	subi	r20, 0x01	; 1
    1588:	50 40       	sbci	r21, 0x00	; 0
    158a:	d8 f7       	brcc	.-10     	; 0x1582 <memcpy+0x6>
    158c:	08 95       	ret

0000158e <memmove>:
    158e:	68 17       	cp	r22, r24
    1590:	79 07       	cpc	r23, r25
    1592:	68 f4       	brcc	.+26     	; 0x15ae <memmove+0x20>
    1594:	fb 01       	movw	r30, r22
    1596:	dc 01       	movw	r26, r24
    1598:	e4 0f       	add	r30, r20
    159a:	f5 1f       	adc	r31, r21
    159c:	a4 0f       	add	r26, r20
    159e:	b5 1f       	adc	r27, r21
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <memmove+0x18>
    15a2:	02 90       	ld	r0, -Z
    15a4:	0e 92       	st	-X, r0
    15a6:	41 50       	subi	r20, 0x01	; 1
    15a8:	50 40       	sbci	r21, 0x00	; 0
    15aa:	d8 f7       	brcc	.-10     	; 0x15a2 <memmove+0x14>
    15ac:	08 95       	ret
    15ae:	e6 cf       	rjmp	.-52     	; 0x157c <memcpy>

000015b0 <printf_P>:
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	fe 01       	movw	r30, r28
    15ba:	35 96       	adiw	r30, 0x05	; 5
    15bc:	61 91       	ld	r22, Z+
    15be:	71 91       	ld	r23, Z+
    15c0:	80 91 80 01 	lds	r24, 0x0180
    15c4:	90 91 81 01 	lds	r25, 0x0181
    15c8:	dc 01       	movw	r26, r24
    15ca:	13 96       	adiw	r26, 0x03	; 3
    15cc:	2c 91       	ld	r18, X
    15ce:	13 97       	sbiw	r26, 0x03	; 3
    15d0:	28 60       	ori	r18, 0x08	; 8
    15d2:	13 96       	adiw	r26, 0x03	; 3
    15d4:	2c 93       	st	X, r18
    15d6:	af 01       	movw	r20, r30
    15d8:	39 d0       	rcall	.+114    	; 0x164c <vfprintf>
    15da:	e0 91 80 01 	lds	r30, 0x0180
    15de:	f0 91 81 01 	lds	r31, 0x0181
    15e2:	23 81       	ldd	r18, Z+3	; 0x03
    15e4:	27 7f       	andi	r18, 0xF7	; 247
    15e6:	23 83       	std	Z+3, r18	; 0x03
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	08 95       	ret

000015ee <puts_P>:
    15ee:	0f 93       	push	r16
    15f0:	1f 93       	push	r17
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
    15f6:	8c 01       	movw	r16, r24
    15f8:	e0 91 80 01 	lds	r30, 0x0180
    15fc:	f0 91 81 01 	lds	r31, 0x0181
    1600:	83 81       	ldd	r24, Z+3	; 0x03
    1602:	81 ff       	sbrs	r24, 1
    1604:	1b c0       	rjmp	.+54     	; 0x163c <puts_P+0x4e>
    1606:	c0 e0       	ldi	r28, 0x00	; 0
    1608:	d0 e0       	ldi	r29, 0x00	; 0
    160a:	07 c0       	rjmp	.+14     	; 0x161a <puts_P+0x2c>
    160c:	09 95       	icall
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	11 f0       	breq	.+4      	; 0x1616 <puts_P+0x28>
    1612:	cf ef       	ldi	r28, 0xFF	; 255
    1614:	df ef       	ldi	r29, 0xFF	; 255
    1616:	0f 5f       	subi	r16, 0xFF	; 255
    1618:	1f 4f       	sbci	r17, 0xFF	; 255
    161a:	f8 01       	movw	r30, r16
    161c:	84 91       	lpm	r24, Z
    161e:	60 91 80 01 	lds	r22, 0x0180
    1622:	70 91 81 01 	lds	r23, 0x0181
    1626:	db 01       	movw	r26, r22
    1628:	18 96       	adiw	r26, 0x08	; 8
    162a:	ed 91       	ld	r30, X+
    162c:	fc 91       	ld	r31, X
    162e:	19 97       	sbiw	r26, 0x09	; 9
    1630:	88 23       	and	r24, r24
    1632:	61 f7       	brne	.-40     	; 0x160c <puts_P+0x1e>
    1634:	8a e0       	ldi	r24, 0x0A	; 10
    1636:	09 95       	icall
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	11 f0       	breq	.+4      	; 0x1640 <puts_P+0x52>
    163c:	cf ef       	ldi	r28, 0xFF	; 255
    163e:	df ef       	ldi	r29, 0xFF	; 255
    1640:	ce 01       	movw	r24, r28
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	08 95       	ret

0000164c <vfprintf>:
    164c:	2f 92       	push	r2
    164e:	3f 92       	push	r3
    1650:	4f 92       	push	r4
    1652:	5f 92       	push	r5
    1654:	6f 92       	push	r6
    1656:	7f 92       	push	r7
    1658:	8f 92       	push	r8
    165a:	9f 92       	push	r9
    165c:	af 92       	push	r10
    165e:	bf 92       	push	r11
    1660:	cf 92       	push	r12
    1662:	df 92       	push	r13
    1664:	ef 92       	push	r14
    1666:	ff 92       	push	r15
    1668:	0f 93       	push	r16
    166a:	1f 93       	push	r17
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	2d 97       	sbiw	r28, 0x0d	; 13
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	de bf       	out	0x3e, r29	; 62
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	cd bf       	out	0x3d, r28	; 61
    1680:	3c 01       	movw	r6, r24
    1682:	7d 87       	std	Y+13, r23	; 0x0d
    1684:	6c 87       	std	Y+12, r22	; 0x0c
    1686:	5a 01       	movw	r10, r20
    1688:	fc 01       	movw	r30, r24
    168a:	17 82       	std	Z+7, r1	; 0x07
    168c:	16 82       	std	Z+6, r1	; 0x06
    168e:	83 81       	ldd	r24, Z+3	; 0x03
    1690:	81 ff       	sbrs	r24, 1
    1692:	bb c1       	rjmp	.+886    	; 0x1a0a <vfprintf+0x3be>
    1694:	2e 01       	movw	r4, r28
    1696:	08 94       	sec
    1698:	41 1c       	adc	r4, r1
    169a:	51 1c       	adc	r5, r1
    169c:	f3 01       	movw	r30, r6
    169e:	93 81       	ldd	r25, Z+3	; 0x03
    16a0:	ec 85       	ldd	r30, Y+12	; 0x0c
    16a2:	fd 85       	ldd	r31, Y+13	; 0x0d
    16a4:	93 fd       	sbrc	r25, 3
    16a6:	85 91       	lpm	r24, Z+
    16a8:	93 ff       	sbrs	r25, 3
    16aa:	81 91       	ld	r24, Z+
    16ac:	fd 87       	std	Y+13, r31	; 0x0d
    16ae:	ec 87       	std	Y+12, r30	; 0x0c
    16b0:	88 23       	and	r24, r24
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <vfprintf+0x6a>
    16b4:	a6 c1       	rjmp	.+844    	; 0x1a02 <vfprintf+0x3b6>
    16b6:	85 32       	cpi	r24, 0x25	; 37
    16b8:	41 f4       	brne	.+16     	; 0x16ca <vfprintf+0x7e>
    16ba:	93 fd       	sbrc	r25, 3
    16bc:	85 91       	lpm	r24, Z+
    16be:	93 ff       	sbrs	r25, 3
    16c0:	81 91       	ld	r24, Z+
    16c2:	fd 87       	std	Y+13, r31	; 0x0d
    16c4:	ec 87       	std	Y+12, r30	; 0x0c
    16c6:	85 32       	cpi	r24, 0x25	; 37
    16c8:	21 f4       	brne	.+8      	; 0x16d2 <vfprintf+0x86>
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	b3 01       	movw	r22, r6
    16ce:	ce d1       	rcall	.+924    	; 0x1a6c <fputc>
    16d0:	e5 cf       	rjmp	.-54     	; 0x169c <vfprintf+0x50>
    16d2:	ff 24       	eor	r15, r15
    16d4:	ee 24       	eor	r14, r14
    16d6:	10 e0       	ldi	r17, 0x00	; 0
    16d8:	10 32       	cpi	r17, 0x20	; 32
    16da:	b0 f4       	brcc	.+44     	; 0x1708 <vfprintf+0xbc>
    16dc:	8b 32       	cpi	r24, 0x2B	; 43
    16de:	69 f0       	breq	.+26     	; 0x16fa <vfprintf+0xae>
    16e0:	8c 32       	cpi	r24, 0x2C	; 44
    16e2:	28 f4       	brcc	.+10     	; 0x16ee <vfprintf+0xa2>
    16e4:	80 32       	cpi	r24, 0x20	; 32
    16e6:	51 f0       	breq	.+20     	; 0x16fc <vfprintf+0xb0>
    16e8:	83 32       	cpi	r24, 0x23	; 35
    16ea:	71 f4       	brne	.+28     	; 0x1708 <vfprintf+0xbc>
    16ec:	0b c0       	rjmp	.+22     	; 0x1704 <vfprintf+0xb8>
    16ee:	8d 32       	cpi	r24, 0x2D	; 45
    16f0:	39 f0       	breq	.+14     	; 0x1700 <vfprintf+0xb4>
    16f2:	80 33       	cpi	r24, 0x30	; 48
    16f4:	49 f4       	brne	.+18     	; 0x1708 <vfprintf+0xbc>
    16f6:	11 60       	ori	r17, 0x01	; 1
    16f8:	2c c0       	rjmp	.+88     	; 0x1752 <vfprintf+0x106>
    16fa:	12 60       	ori	r17, 0x02	; 2
    16fc:	14 60       	ori	r17, 0x04	; 4
    16fe:	29 c0       	rjmp	.+82     	; 0x1752 <vfprintf+0x106>
    1700:	18 60       	ori	r17, 0x08	; 8
    1702:	27 c0       	rjmp	.+78     	; 0x1752 <vfprintf+0x106>
    1704:	10 61       	ori	r17, 0x10	; 16
    1706:	25 c0       	rjmp	.+74     	; 0x1752 <vfprintf+0x106>
    1708:	17 fd       	sbrc	r17, 7
    170a:	2e c0       	rjmp	.+92     	; 0x1768 <vfprintf+0x11c>
    170c:	28 2f       	mov	r18, r24
    170e:	20 53       	subi	r18, 0x30	; 48
    1710:	2a 30       	cpi	r18, 0x0A	; 10
    1712:	98 f4       	brcc	.+38     	; 0x173a <vfprintf+0xee>
    1714:	16 ff       	sbrs	r17, 6
    1716:	08 c0       	rjmp	.+16     	; 0x1728 <vfprintf+0xdc>
    1718:	8f 2d       	mov	r24, r15
    171a:	88 0f       	add	r24, r24
    171c:	f8 2e       	mov	r15, r24
    171e:	ff 0c       	add	r15, r15
    1720:	ff 0c       	add	r15, r15
    1722:	f8 0e       	add	r15, r24
    1724:	f2 0e       	add	r15, r18
    1726:	15 c0       	rjmp	.+42     	; 0x1752 <vfprintf+0x106>
    1728:	8e 2d       	mov	r24, r14
    172a:	88 0f       	add	r24, r24
    172c:	e8 2e       	mov	r14, r24
    172e:	ee 0c       	add	r14, r14
    1730:	ee 0c       	add	r14, r14
    1732:	e8 0e       	add	r14, r24
    1734:	e2 0e       	add	r14, r18
    1736:	10 62       	ori	r17, 0x20	; 32
    1738:	0c c0       	rjmp	.+24     	; 0x1752 <vfprintf+0x106>
    173a:	8e 32       	cpi	r24, 0x2E	; 46
    173c:	21 f4       	brne	.+8      	; 0x1746 <vfprintf+0xfa>
    173e:	16 fd       	sbrc	r17, 6
    1740:	60 c1       	rjmp	.+704    	; 0x1a02 <vfprintf+0x3b6>
    1742:	10 64       	ori	r17, 0x40	; 64
    1744:	06 c0       	rjmp	.+12     	; 0x1752 <vfprintf+0x106>
    1746:	8c 36       	cpi	r24, 0x6C	; 108
    1748:	11 f4       	brne	.+4      	; 0x174e <vfprintf+0x102>
    174a:	10 68       	ori	r17, 0x80	; 128
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <vfprintf+0x106>
    174e:	88 36       	cpi	r24, 0x68	; 104
    1750:	59 f4       	brne	.+22     	; 0x1768 <vfprintf+0x11c>
    1752:	ec 85       	ldd	r30, Y+12	; 0x0c
    1754:	fd 85       	ldd	r31, Y+13	; 0x0d
    1756:	93 fd       	sbrc	r25, 3
    1758:	85 91       	lpm	r24, Z+
    175a:	93 ff       	sbrs	r25, 3
    175c:	81 91       	ld	r24, Z+
    175e:	fd 87       	std	Y+13, r31	; 0x0d
    1760:	ec 87       	std	Y+12, r30	; 0x0c
    1762:	88 23       	and	r24, r24
    1764:	09 f0       	breq	.+2      	; 0x1768 <vfprintf+0x11c>
    1766:	b8 cf       	rjmp	.-144    	; 0x16d8 <vfprintf+0x8c>
    1768:	98 2f       	mov	r25, r24
    176a:	95 54       	subi	r25, 0x45	; 69
    176c:	93 30       	cpi	r25, 0x03	; 3
    176e:	18 f0       	brcs	.+6      	; 0x1776 <vfprintf+0x12a>
    1770:	90 52       	subi	r25, 0x20	; 32
    1772:	93 30       	cpi	r25, 0x03	; 3
    1774:	38 f4       	brcc	.+14     	; 0x1784 <vfprintf+0x138>
    1776:	24 e0       	ldi	r18, 0x04	; 4
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	a2 0e       	add	r10, r18
    177c:	b3 1e       	adc	r11, r19
    177e:	3f e3       	ldi	r19, 0x3F	; 63
    1780:	39 83       	std	Y+1, r19	; 0x01
    1782:	0f c0       	rjmp	.+30     	; 0x17a2 <vfprintf+0x156>
    1784:	83 36       	cpi	r24, 0x63	; 99
    1786:	31 f0       	breq	.+12     	; 0x1794 <vfprintf+0x148>
    1788:	83 37       	cpi	r24, 0x73	; 115
    178a:	81 f0       	breq	.+32     	; 0x17ac <vfprintf+0x160>
    178c:	83 35       	cpi	r24, 0x53	; 83
    178e:	09 f0       	breq	.+2      	; 0x1792 <vfprintf+0x146>
    1790:	56 c0       	rjmp	.+172    	; 0x183e <vfprintf+0x1f2>
    1792:	21 c0       	rjmp	.+66     	; 0x17d6 <vfprintf+0x18a>
    1794:	f5 01       	movw	r30, r10
    1796:	80 81       	ld	r24, Z
    1798:	89 83       	std	Y+1, r24	; 0x01
    179a:	22 e0       	ldi	r18, 0x02	; 2
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	a2 0e       	add	r10, r18
    17a0:	b3 1e       	adc	r11, r19
    17a2:	21 e0       	ldi	r18, 0x01	; 1
    17a4:	c2 2e       	mov	r12, r18
    17a6:	d1 2c       	mov	r13, r1
    17a8:	42 01       	movw	r8, r4
    17aa:	13 c0       	rjmp	.+38     	; 0x17d2 <vfprintf+0x186>
    17ac:	92 e0       	ldi	r25, 0x02	; 2
    17ae:	29 2e       	mov	r2, r25
    17b0:	31 2c       	mov	r3, r1
    17b2:	2a 0c       	add	r2, r10
    17b4:	3b 1c       	adc	r3, r11
    17b6:	f5 01       	movw	r30, r10
    17b8:	80 80       	ld	r8, Z
    17ba:	91 80       	ldd	r9, Z+1	; 0x01
    17bc:	16 ff       	sbrs	r17, 6
    17be:	03 c0       	rjmp	.+6      	; 0x17c6 <vfprintf+0x17a>
    17c0:	6f 2d       	mov	r22, r15
    17c2:	70 e0       	ldi	r23, 0x00	; 0
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <vfprintf+0x17e>
    17c6:	6f ef       	ldi	r22, 0xFF	; 255
    17c8:	7f ef       	ldi	r23, 0xFF	; 255
    17ca:	c4 01       	movw	r24, r8
    17cc:	44 d1       	rcall	.+648    	; 0x1a56 <strnlen>
    17ce:	6c 01       	movw	r12, r24
    17d0:	51 01       	movw	r10, r2
    17d2:	1f 77       	andi	r17, 0x7F	; 127
    17d4:	14 c0       	rjmp	.+40     	; 0x17fe <vfprintf+0x1b2>
    17d6:	82 e0       	ldi	r24, 0x02	; 2
    17d8:	28 2e       	mov	r2, r24
    17da:	31 2c       	mov	r3, r1
    17dc:	2a 0c       	add	r2, r10
    17de:	3b 1c       	adc	r3, r11
    17e0:	f5 01       	movw	r30, r10
    17e2:	80 80       	ld	r8, Z
    17e4:	91 80       	ldd	r9, Z+1	; 0x01
    17e6:	16 ff       	sbrs	r17, 6
    17e8:	03 c0       	rjmp	.+6      	; 0x17f0 <vfprintf+0x1a4>
    17ea:	6f 2d       	mov	r22, r15
    17ec:	70 e0       	ldi	r23, 0x00	; 0
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <vfprintf+0x1a8>
    17f0:	6f ef       	ldi	r22, 0xFF	; 255
    17f2:	7f ef       	ldi	r23, 0xFF	; 255
    17f4:	c4 01       	movw	r24, r8
    17f6:	24 d1       	rcall	.+584    	; 0x1a40 <strnlen_P>
    17f8:	6c 01       	movw	r12, r24
    17fa:	10 68       	ori	r17, 0x80	; 128
    17fc:	51 01       	movw	r10, r2
    17fe:	13 fd       	sbrc	r17, 3
    1800:	1a c0       	rjmp	.+52     	; 0x1836 <vfprintf+0x1ea>
    1802:	05 c0       	rjmp	.+10     	; 0x180e <vfprintf+0x1c2>
    1804:	80 e2       	ldi	r24, 0x20	; 32
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	b3 01       	movw	r22, r6
    180a:	30 d1       	rcall	.+608    	; 0x1a6c <fputc>
    180c:	ea 94       	dec	r14
    180e:	8e 2d       	mov	r24, r14
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	c8 16       	cp	r12, r24
    1814:	d9 06       	cpc	r13, r25
    1816:	b0 f3       	brcs	.-20     	; 0x1804 <vfprintf+0x1b8>
    1818:	0e c0       	rjmp	.+28     	; 0x1836 <vfprintf+0x1ea>
    181a:	f4 01       	movw	r30, r8
    181c:	17 fd       	sbrc	r17, 7
    181e:	85 91       	lpm	r24, Z+
    1820:	17 ff       	sbrs	r17, 7
    1822:	81 91       	ld	r24, Z+
    1824:	4f 01       	movw	r8, r30
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	b3 01       	movw	r22, r6
    182a:	20 d1       	rcall	.+576    	; 0x1a6c <fputc>
    182c:	e1 10       	cpse	r14, r1
    182e:	ea 94       	dec	r14
    1830:	08 94       	sec
    1832:	c1 08       	sbc	r12, r1
    1834:	d1 08       	sbc	r13, r1
    1836:	c1 14       	cp	r12, r1
    1838:	d1 04       	cpc	r13, r1
    183a:	79 f7       	brne	.-34     	; 0x181a <vfprintf+0x1ce>
    183c:	df c0       	rjmp	.+446    	; 0x19fc <vfprintf+0x3b0>
    183e:	84 36       	cpi	r24, 0x64	; 100
    1840:	11 f0       	breq	.+4      	; 0x1846 <vfprintf+0x1fa>
    1842:	89 36       	cpi	r24, 0x69	; 105
    1844:	49 f5       	brne	.+82     	; 0x1898 <vfprintf+0x24c>
    1846:	f5 01       	movw	r30, r10
    1848:	17 ff       	sbrs	r17, 7
    184a:	07 c0       	rjmp	.+14     	; 0x185a <vfprintf+0x20e>
    184c:	80 81       	ld	r24, Z
    184e:	91 81       	ldd	r25, Z+1	; 0x01
    1850:	a2 81       	ldd	r26, Z+2	; 0x02
    1852:	b3 81       	ldd	r27, Z+3	; 0x03
    1854:	24 e0       	ldi	r18, 0x04	; 4
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	08 c0       	rjmp	.+16     	; 0x186a <vfprintf+0x21e>
    185a:	80 81       	ld	r24, Z
    185c:	91 81       	ldd	r25, Z+1	; 0x01
    185e:	aa 27       	eor	r26, r26
    1860:	97 fd       	sbrc	r25, 7
    1862:	a0 95       	com	r26
    1864:	ba 2f       	mov	r27, r26
    1866:	22 e0       	ldi	r18, 0x02	; 2
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	a2 0e       	add	r10, r18
    186c:	b3 1e       	adc	r11, r19
    186e:	01 2f       	mov	r16, r17
    1870:	0f 76       	andi	r16, 0x6F	; 111
    1872:	b7 ff       	sbrs	r27, 7
    1874:	08 c0       	rjmp	.+16     	; 0x1886 <vfprintf+0x23a>
    1876:	b0 95       	com	r27
    1878:	a0 95       	com	r26
    187a:	90 95       	com	r25
    187c:	81 95       	neg	r24
    187e:	9f 4f       	sbci	r25, 0xFF	; 255
    1880:	af 4f       	sbci	r26, 0xFF	; 255
    1882:	bf 4f       	sbci	r27, 0xFF	; 255
    1884:	00 68       	ori	r16, 0x80	; 128
    1886:	bc 01       	movw	r22, r24
    1888:	cd 01       	movw	r24, r26
    188a:	a2 01       	movw	r20, r4
    188c:	2a e0       	ldi	r18, 0x0A	; 10
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	19 d1       	rcall	.+562    	; 0x1ac4 <__ultoa_invert>
    1892:	d8 2e       	mov	r13, r24
    1894:	d4 18       	sub	r13, r4
    1896:	3e c0       	rjmp	.+124    	; 0x1914 <vfprintf+0x2c8>
    1898:	85 37       	cpi	r24, 0x75	; 117
    189a:	21 f4       	brne	.+8      	; 0x18a4 <vfprintf+0x258>
    189c:	1f 7e       	andi	r17, 0xEF	; 239
    189e:	2a e0       	ldi	r18, 0x0A	; 10
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	20 c0       	rjmp	.+64     	; 0x18e4 <vfprintf+0x298>
    18a4:	19 7f       	andi	r17, 0xF9	; 249
    18a6:	8f 36       	cpi	r24, 0x6F	; 111
    18a8:	a9 f0       	breq	.+42     	; 0x18d4 <vfprintf+0x288>
    18aa:	80 37       	cpi	r24, 0x70	; 112
    18ac:	20 f4       	brcc	.+8      	; 0x18b6 <vfprintf+0x26a>
    18ae:	88 35       	cpi	r24, 0x58	; 88
    18b0:	09 f0       	breq	.+2      	; 0x18b4 <vfprintf+0x268>
    18b2:	a7 c0       	rjmp	.+334    	; 0x1a02 <vfprintf+0x3b6>
    18b4:	0b c0       	rjmp	.+22     	; 0x18cc <vfprintf+0x280>
    18b6:	80 37       	cpi	r24, 0x70	; 112
    18b8:	21 f0       	breq	.+8      	; 0x18c2 <vfprintf+0x276>
    18ba:	88 37       	cpi	r24, 0x78	; 120
    18bc:	09 f0       	breq	.+2      	; 0x18c0 <vfprintf+0x274>
    18be:	a1 c0       	rjmp	.+322    	; 0x1a02 <vfprintf+0x3b6>
    18c0:	01 c0       	rjmp	.+2      	; 0x18c4 <vfprintf+0x278>
    18c2:	10 61       	ori	r17, 0x10	; 16
    18c4:	14 ff       	sbrs	r17, 4
    18c6:	09 c0       	rjmp	.+18     	; 0x18da <vfprintf+0x28e>
    18c8:	14 60       	ori	r17, 0x04	; 4
    18ca:	07 c0       	rjmp	.+14     	; 0x18da <vfprintf+0x28e>
    18cc:	14 ff       	sbrs	r17, 4
    18ce:	08 c0       	rjmp	.+16     	; 0x18e0 <vfprintf+0x294>
    18d0:	16 60       	ori	r17, 0x06	; 6
    18d2:	06 c0       	rjmp	.+12     	; 0x18e0 <vfprintf+0x294>
    18d4:	28 e0       	ldi	r18, 0x08	; 8
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	05 c0       	rjmp	.+10     	; 0x18e4 <vfprintf+0x298>
    18da:	20 e1       	ldi	r18, 0x10	; 16
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <vfprintf+0x298>
    18e0:	20 e1       	ldi	r18, 0x10	; 16
    18e2:	32 e0       	ldi	r19, 0x02	; 2
    18e4:	f5 01       	movw	r30, r10
    18e6:	17 ff       	sbrs	r17, 7
    18e8:	07 c0       	rjmp	.+14     	; 0x18f8 <vfprintf+0x2ac>
    18ea:	60 81       	ld	r22, Z
    18ec:	71 81       	ldd	r23, Z+1	; 0x01
    18ee:	82 81       	ldd	r24, Z+2	; 0x02
    18f0:	93 81       	ldd	r25, Z+3	; 0x03
    18f2:	44 e0       	ldi	r20, 0x04	; 4
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	06 c0       	rjmp	.+12     	; 0x1904 <vfprintf+0x2b8>
    18f8:	60 81       	ld	r22, Z
    18fa:	71 81       	ldd	r23, Z+1	; 0x01
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	42 e0       	ldi	r20, 0x02	; 2
    1902:	50 e0       	ldi	r21, 0x00	; 0
    1904:	a4 0e       	add	r10, r20
    1906:	b5 1e       	adc	r11, r21
    1908:	a2 01       	movw	r20, r4
    190a:	dc d0       	rcall	.+440    	; 0x1ac4 <__ultoa_invert>
    190c:	d8 2e       	mov	r13, r24
    190e:	d4 18       	sub	r13, r4
    1910:	01 2f       	mov	r16, r17
    1912:	0f 77       	andi	r16, 0x7F	; 127
    1914:	06 ff       	sbrs	r16, 6
    1916:	09 c0       	rjmp	.+18     	; 0x192a <vfprintf+0x2de>
    1918:	0e 7f       	andi	r16, 0xFE	; 254
    191a:	df 14       	cp	r13, r15
    191c:	30 f4       	brcc	.+12     	; 0x192a <vfprintf+0x2de>
    191e:	04 ff       	sbrs	r16, 4
    1920:	06 c0       	rjmp	.+12     	; 0x192e <vfprintf+0x2e2>
    1922:	02 fd       	sbrc	r16, 2
    1924:	04 c0       	rjmp	.+8      	; 0x192e <vfprintf+0x2e2>
    1926:	0f 7e       	andi	r16, 0xEF	; 239
    1928:	02 c0       	rjmp	.+4      	; 0x192e <vfprintf+0x2e2>
    192a:	1d 2d       	mov	r17, r13
    192c:	01 c0       	rjmp	.+2      	; 0x1930 <vfprintf+0x2e4>
    192e:	1f 2d       	mov	r17, r15
    1930:	80 2f       	mov	r24, r16
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	04 ff       	sbrs	r16, 4
    1936:	0c c0       	rjmp	.+24     	; 0x1950 <vfprintf+0x304>
    1938:	fe 01       	movw	r30, r28
    193a:	ed 0d       	add	r30, r13
    193c:	f1 1d       	adc	r31, r1
    193e:	20 81       	ld	r18, Z
    1940:	20 33       	cpi	r18, 0x30	; 48
    1942:	11 f4       	brne	.+4      	; 0x1948 <vfprintf+0x2fc>
    1944:	09 7e       	andi	r16, 0xE9	; 233
    1946:	09 c0       	rjmp	.+18     	; 0x195a <vfprintf+0x30e>
    1948:	02 ff       	sbrs	r16, 2
    194a:	06 c0       	rjmp	.+12     	; 0x1958 <vfprintf+0x30c>
    194c:	1e 5f       	subi	r17, 0xFE	; 254
    194e:	05 c0       	rjmp	.+10     	; 0x195a <vfprintf+0x30e>
    1950:	86 78       	andi	r24, 0x86	; 134
    1952:	90 70       	andi	r25, 0x00	; 0
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	09 f0       	breq	.+2      	; 0x195a <vfprintf+0x30e>
    1958:	1f 5f       	subi	r17, 0xFF	; 255
    195a:	80 2e       	mov	r8, r16
    195c:	99 24       	eor	r9, r9
    195e:	03 fd       	sbrc	r16, 3
    1960:	11 c0       	rjmp	.+34     	; 0x1984 <vfprintf+0x338>
    1962:	00 ff       	sbrs	r16, 0
    1964:	0c c0       	rjmp	.+24     	; 0x197e <vfprintf+0x332>
    1966:	fd 2c       	mov	r15, r13
    1968:	1e 15       	cp	r17, r14
    196a:	48 f4       	brcc	.+18     	; 0x197e <vfprintf+0x332>
    196c:	fe 0c       	add	r15, r14
    196e:	f1 1a       	sub	r15, r17
    1970:	1e 2d       	mov	r17, r14
    1972:	05 c0       	rjmp	.+10     	; 0x197e <vfprintf+0x332>
    1974:	80 e2       	ldi	r24, 0x20	; 32
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	b3 01       	movw	r22, r6
    197a:	78 d0       	rcall	.+240    	; 0x1a6c <fputc>
    197c:	1f 5f       	subi	r17, 0xFF	; 255
    197e:	1e 15       	cp	r17, r14
    1980:	c8 f3       	brcs	.-14     	; 0x1974 <vfprintf+0x328>
    1982:	04 c0       	rjmp	.+8      	; 0x198c <vfprintf+0x340>
    1984:	1e 15       	cp	r17, r14
    1986:	10 f4       	brcc	.+4      	; 0x198c <vfprintf+0x340>
    1988:	e1 1a       	sub	r14, r17
    198a:	01 c0       	rjmp	.+2      	; 0x198e <vfprintf+0x342>
    198c:	ee 24       	eor	r14, r14
    198e:	84 fe       	sbrs	r8, 4
    1990:	0e c0       	rjmp	.+28     	; 0x19ae <vfprintf+0x362>
    1992:	80 e3       	ldi	r24, 0x30	; 48
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	b3 01       	movw	r22, r6
    1998:	69 d0       	rcall	.+210    	; 0x1a6c <fputc>
    199a:	82 fe       	sbrs	r8, 2
    199c:	1d c0       	rjmp	.+58     	; 0x19d8 <vfprintf+0x38c>
    199e:	81 fe       	sbrs	r8, 1
    19a0:	03 c0       	rjmp	.+6      	; 0x19a8 <vfprintf+0x35c>
    19a2:	88 e5       	ldi	r24, 0x58	; 88
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	10 c0       	rjmp	.+32     	; 0x19c8 <vfprintf+0x37c>
    19a8:	88 e7       	ldi	r24, 0x78	; 120
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	0d c0       	rjmp	.+26     	; 0x19c8 <vfprintf+0x37c>
    19ae:	c4 01       	movw	r24, r8
    19b0:	86 78       	andi	r24, 0x86	; 134
    19b2:	90 70       	andi	r25, 0x00	; 0
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	81 f0       	breq	.+32     	; 0x19d8 <vfprintf+0x38c>
    19b8:	81 fc       	sbrc	r8, 1
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <vfprintf+0x374>
    19bc:	80 e2       	ldi	r24, 0x20	; 32
    19be:	01 c0       	rjmp	.+2      	; 0x19c2 <vfprintf+0x376>
    19c0:	8b e2       	ldi	r24, 0x2B	; 43
    19c2:	07 fd       	sbrc	r16, 7
    19c4:	8d e2       	ldi	r24, 0x2D	; 45
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	b3 01       	movw	r22, r6
    19ca:	50 d0       	rcall	.+160    	; 0x1a6c <fputc>
    19cc:	05 c0       	rjmp	.+10     	; 0x19d8 <vfprintf+0x38c>
    19ce:	80 e3       	ldi	r24, 0x30	; 48
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	b3 01       	movw	r22, r6
    19d4:	4b d0       	rcall	.+150    	; 0x1a6c <fputc>
    19d6:	fa 94       	dec	r15
    19d8:	df 14       	cp	r13, r15
    19da:	c8 f3       	brcs	.-14     	; 0x19ce <vfprintf+0x382>
    19dc:	da 94       	dec	r13
    19de:	f2 01       	movw	r30, r4
    19e0:	ed 0d       	add	r30, r13
    19e2:	f1 1d       	adc	r31, r1
    19e4:	80 81       	ld	r24, Z
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	b3 01       	movw	r22, r6
    19ea:	40 d0       	rcall	.+128    	; 0x1a6c <fputc>
    19ec:	dd 20       	and	r13, r13
    19ee:	b1 f7       	brne	.-20     	; 0x19dc <vfprintf+0x390>
    19f0:	05 c0       	rjmp	.+10     	; 0x19fc <vfprintf+0x3b0>
    19f2:	80 e2       	ldi	r24, 0x20	; 32
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	b3 01       	movw	r22, r6
    19f8:	39 d0       	rcall	.+114    	; 0x1a6c <fputc>
    19fa:	ea 94       	dec	r14
    19fc:	ee 20       	and	r14, r14
    19fe:	c9 f7       	brne	.-14     	; 0x19f2 <vfprintf+0x3a6>
    1a00:	4d ce       	rjmp	.-870    	; 0x169c <vfprintf+0x50>
    1a02:	f3 01       	movw	r30, r6
    1a04:	86 81       	ldd	r24, Z+6	; 0x06
    1a06:	97 81       	ldd	r25, Z+7	; 0x07
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <vfprintf+0x3c2>
    1a0a:	8f ef       	ldi	r24, 0xFF	; 255
    1a0c:	9f ef       	ldi	r25, 0xFF	; 255
    1a0e:	2d 96       	adiw	r28, 0x0d	; 13
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	de bf       	out	0x3e, r29	; 62
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	cd bf       	out	0x3d, r28	; 61
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	1f 91       	pop	r17
    1a20:	0f 91       	pop	r16
    1a22:	ff 90       	pop	r15
    1a24:	ef 90       	pop	r14
    1a26:	df 90       	pop	r13
    1a28:	cf 90       	pop	r12
    1a2a:	bf 90       	pop	r11
    1a2c:	af 90       	pop	r10
    1a2e:	9f 90       	pop	r9
    1a30:	8f 90       	pop	r8
    1a32:	7f 90       	pop	r7
    1a34:	6f 90       	pop	r6
    1a36:	5f 90       	pop	r5
    1a38:	4f 90       	pop	r4
    1a3a:	3f 90       	pop	r3
    1a3c:	2f 90       	pop	r2
    1a3e:	08 95       	ret

00001a40 <strnlen_P>:
    1a40:	fc 01       	movw	r30, r24
    1a42:	05 90       	lpm	r0, Z+
    1a44:	61 50       	subi	r22, 0x01	; 1
    1a46:	70 40       	sbci	r23, 0x00	; 0
    1a48:	01 10       	cpse	r0, r1
    1a4a:	d8 f7       	brcc	.-10     	; 0x1a42 <strnlen_P+0x2>
    1a4c:	80 95       	com	r24
    1a4e:	90 95       	com	r25
    1a50:	8e 0f       	add	r24, r30
    1a52:	9f 1f       	adc	r25, r31
    1a54:	08 95       	ret

00001a56 <strnlen>:
    1a56:	fc 01       	movw	r30, r24
    1a58:	61 50       	subi	r22, 0x01	; 1
    1a5a:	70 40       	sbci	r23, 0x00	; 0
    1a5c:	01 90       	ld	r0, Z+
    1a5e:	01 10       	cpse	r0, r1
    1a60:	d8 f7       	brcc	.-10     	; 0x1a58 <strnlen+0x2>
    1a62:	80 95       	com	r24
    1a64:	90 95       	com	r25
    1a66:	8e 0f       	add	r24, r30
    1a68:	9f 1f       	adc	r25, r31
    1a6a:	08 95       	ret

00001a6c <fputc>:
    1a6c:	0f 93       	push	r16
    1a6e:	1f 93       	push	r17
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	8c 01       	movw	r16, r24
    1a76:	eb 01       	movw	r28, r22
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	81 ff       	sbrs	r24, 1
    1a7c:	1b c0       	rjmp	.+54     	; 0x1ab4 <fputc+0x48>
    1a7e:	82 ff       	sbrs	r24, 2
    1a80:	0d c0       	rjmp	.+26     	; 0x1a9c <fputc+0x30>
    1a82:	2e 81       	ldd	r18, Y+6	; 0x06
    1a84:	3f 81       	ldd	r19, Y+7	; 0x07
    1a86:	8c 81       	ldd	r24, Y+4	; 0x04
    1a88:	9d 81       	ldd	r25, Y+5	; 0x05
    1a8a:	28 17       	cp	r18, r24
    1a8c:	39 07       	cpc	r19, r25
    1a8e:	64 f4       	brge	.+24     	; 0x1aa8 <fputc+0x3c>
    1a90:	e8 81       	ld	r30, Y
    1a92:	f9 81       	ldd	r31, Y+1	; 0x01
    1a94:	01 93       	st	Z+, r16
    1a96:	f9 83       	std	Y+1, r31	; 0x01
    1a98:	e8 83       	st	Y, r30
    1a9a:	06 c0       	rjmp	.+12     	; 0x1aa8 <fputc+0x3c>
    1a9c:	e8 85       	ldd	r30, Y+8	; 0x08
    1a9e:	f9 85       	ldd	r31, Y+9	; 0x09
    1aa0:	80 2f       	mov	r24, r16
    1aa2:	09 95       	icall
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	31 f4       	brne	.+12     	; 0x1ab4 <fputc+0x48>
    1aa8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aaa:	9f 81       	ldd	r25, Y+7	; 0x07
    1aac:	01 96       	adiw	r24, 0x01	; 1
    1aae:	9f 83       	std	Y+7, r25	; 0x07
    1ab0:	8e 83       	std	Y+6, r24	; 0x06
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <fputc+0x4c>
    1ab4:	0f ef       	ldi	r16, 0xFF	; 255
    1ab6:	1f ef       	ldi	r17, 0xFF	; 255
    1ab8:	c8 01       	movw	r24, r16
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	1f 91       	pop	r17
    1ac0:	0f 91       	pop	r16
    1ac2:	08 95       	ret

00001ac4 <__ultoa_invert>:
    1ac4:	fa 01       	movw	r30, r20
    1ac6:	aa 27       	eor	r26, r26
    1ac8:	28 30       	cpi	r18, 0x08	; 8
    1aca:	51 f1       	breq	.+84     	; 0x1b20 <__ultoa_invert+0x5c>
    1acc:	20 31       	cpi	r18, 0x10	; 16
    1ace:	81 f1       	breq	.+96     	; 0x1b30 <__ultoa_invert+0x6c>
    1ad0:	e8 94       	clt
    1ad2:	6f 93       	push	r22
    1ad4:	6e 7f       	andi	r22, 0xFE	; 254
    1ad6:	6e 5f       	subi	r22, 0xFE	; 254
    1ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    1ada:	8f 4f       	sbci	r24, 0xFF	; 255
    1adc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ade:	af 4f       	sbci	r26, 0xFF	; 255
    1ae0:	b1 e0       	ldi	r27, 0x01	; 1
    1ae2:	3e d0       	rcall	.+124    	; 0x1b60 <__ultoa_invert+0x9c>
    1ae4:	b4 e0       	ldi	r27, 0x04	; 4
    1ae6:	3c d0       	rcall	.+120    	; 0x1b60 <__ultoa_invert+0x9c>
    1ae8:	67 0f       	add	r22, r23
    1aea:	78 1f       	adc	r23, r24
    1aec:	89 1f       	adc	r24, r25
    1aee:	9a 1f       	adc	r25, r26
    1af0:	a1 1d       	adc	r26, r1
    1af2:	68 0f       	add	r22, r24
    1af4:	79 1f       	adc	r23, r25
    1af6:	8a 1f       	adc	r24, r26
    1af8:	91 1d       	adc	r25, r1
    1afa:	a1 1d       	adc	r26, r1
    1afc:	6a 0f       	add	r22, r26
    1afe:	71 1d       	adc	r23, r1
    1b00:	81 1d       	adc	r24, r1
    1b02:	91 1d       	adc	r25, r1
    1b04:	a1 1d       	adc	r26, r1
    1b06:	20 d0       	rcall	.+64     	; 0x1b48 <__ultoa_invert+0x84>
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <__ultoa_invert+0x48>
    1b0a:	68 94       	set
    1b0c:	3f 91       	pop	r19
    1b0e:	2a e0       	ldi	r18, 0x0A	; 10
    1b10:	26 9f       	mul	r18, r22
    1b12:	11 24       	eor	r1, r1
    1b14:	30 19       	sub	r19, r0
    1b16:	30 5d       	subi	r19, 0xD0	; 208
    1b18:	31 93       	st	Z+, r19
    1b1a:	de f6       	brtc	.-74     	; 0x1ad2 <__ultoa_invert+0xe>
    1b1c:	cf 01       	movw	r24, r30
    1b1e:	08 95       	ret
    1b20:	46 2f       	mov	r20, r22
    1b22:	47 70       	andi	r20, 0x07	; 7
    1b24:	40 5d       	subi	r20, 0xD0	; 208
    1b26:	41 93       	st	Z+, r20
    1b28:	b3 e0       	ldi	r27, 0x03	; 3
    1b2a:	0f d0       	rcall	.+30     	; 0x1b4a <__ultoa_invert+0x86>
    1b2c:	c9 f7       	brne	.-14     	; 0x1b20 <__ultoa_invert+0x5c>
    1b2e:	f6 cf       	rjmp	.-20     	; 0x1b1c <__ultoa_invert+0x58>
    1b30:	46 2f       	mov	r20, r22
    1b32:	4f 70       	andi	r20, 0x0F	; 15
    1b34:	40 5d       	subi	r20, 0xD0	; 208
    1b36:	4a 33       	cpi	r20, 0x3A	; 58
    1b38:	18 f0       	brcs	.+6      	; 0x1b40 <__ultoa_invert+0x7c>
    1b3a:	49 5d       	subi	r20, 0xD9	; 217
    1b3c:	31 fd       	sbrc	r19, 1
    1b3e:	40 52       	subi	r20, 0x20	; 32
    1b40:	41 93       	st	Z+, r20
    1b42:	02 d0       	rcall	.+4      	; 0x1b48 <__ultoa_invert+0x84>
    1b44:	a9 f7       	brne	.-22     	; 0x1b30 <__ultoa_invert+0x6c>
    1b46:	ea cf       	rjmp	.-44     	; 0x1b1c <__ultoa_invert+0x58>
    1b48:	b4 e0       	ldi	r27, 0x04	; 4
    1b4a:	a6 95       	lsr	r26
    1b4c:	97 95       	ror	r25
    1b4e:	87 95       	ror	r24
    1b50:	77 95       	ror	r23
    1b52:	67 95       	ror	r22
    1b54:	ba 95       	dec	r27
    1b56:	c9 f7       	brne	.-14     	; 0x1b4a <__ultoa_invert+0x86>
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	61 05       	cpc	r22, r1
    1b5c:	71 05       	cpc	r23, r1
    1b5e:	08 95       	ret
    1b60:	9b 01       	movw	r18, r22
    1b62:	ac 01       	movw	r20, r24
    1b64:	0a 2e       	mov	r0, r26
    1b66:	06 94       	lsr	r0
    1b68:	57 95       	ror	r21
    1b6a:	47 95       	ror	r20
    1b6c:	37 95       	ror	r19
    1b6e:	27 95       	ror	r18
    1b70:	ba 95       	dec	r27
    1b72:	c9 f7       	brne	.-14     	; 0x1b66 <__ultoa_invert+0xa2>
    1b74:	62 0f       	add	r22, r18
    1b76:	73 1f       	adc	r23, r19
    1b78:	84 1f       	adc	r24, r20
    1b7a:	95 1f       	adc	r25, r21
    1b7c:	a0 1d       	adc	r26, r0
    1b7e:	08 95       	ret

00001b80 <_exit>:
    1b80:	f8 94       	cli

00001b82 <__stop_program>:
    1b82:	ff cf       	rjmp	.-2      	; 0x1b82 <__stop_program>
