
AudioOutputHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00001a64  00001af8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  0080013e  0080013e  00001b36  2**0
                  ALLOC
  3 .stab         00000f90  00000000  00000000  00001b38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000030d  00000000  00000000  00002ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000888  00000000  00000000  00002dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000da5c  00000000  00000000  00003660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003451  00000000  00000000  000110bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005d60  00000000  00000000  0001450d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001988  00000000  00000000  0001a270  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005164  00000000  00000000  0001bbf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000097c3  00000000  00000000  00020d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a20  00000000  00000000  0002a51f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2e c1       	rjmp	.+604    	; 0x25e <__ctors_end>
       2:	00 00       	nop
       4:	4b c1       	rjmp	.+662    	; 0x29c <__bad_interrupt>
       6:	00 00       	nop
       8:	49 c1       	rjmp	.+658    	; 0x29c <__bad_interrupt>
       a:	00 00       	nop
       c:	47 c1       	rjmp	.+654    	; 0x29c <__bad_interrupt>
       e:	00 00       	nop
      10:	45 c1       	rjmp	.+650    	; 0x29c <__bad_interrupt>
      12:	00 00       	nop
      14:	43 c1       	rjmp	.+646    	; 0x29c <__bad_interrupt>
      16:	00 00       	nop
      18:	41 c1       	rjmp	.+642    	; 0x29c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3f c1       	rjmp	.+638    	; 0x29c <__bad_interrupt>
      1e:	00 00       	nop
      20:	3d c1       	rjmp	.+634    	; 0x29c <__bad_interrupt>
      22:	00 00       	nop
      24:	3b c1       	rjmp	.+630    	; 0x29c <__bad_interrupt>
      26:	00 00       	nop
      28:	15 c6       	rjmp	.+3114   	; 0xc54 <__vector_10>
      2a:	00 00       	nop
      2c:	37 c1       	rjmp	.+622    	; 0x29c <__bad_interrupt>
      2e:	00 00       	nop
      30:	35 c1       	rjmp	.+618    	; 0x29c <__bad_interrupt>
      32:	00 00       	nop
      34:	33 c1       	rjmp	.+614    	; 0x29c <__bad_interrupt>
      36:	00 00       	nop
      38:	31 c1       	rjmp	.+610    	; 0x29c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2f c1       	rjmp	.+606    	; 0x29c <__bad_interrupt>
      3e:	00 00       	nop
      40:	2d c1       	rjmp	.+602    	; 0x29c <__bad_interrupt>
      42:	00 00       	nop
      44:	2b c1       	rjmp	.+598    	; 0x29c <__bad_interrupt>
      46:	00 00       	nop
      48:	29 c1       	rjmp	.+594    	; 0x29c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	27 c1       	rjmp	.+590    	; 0x29c <__bad_interrupt>
      4e:	00 00       	nop
      50:	25 c1       	rjmp	.+586    	; 0x29c <__bad_interrupt>
      52:	00 00       	nop
      54:	29 c1       	rjmp	.+594    	; 0x2a8 <__vector_21>
      56:	00 00       	nop
      58:	21 c1       	rjmp	.+578    	; 0x29c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1f c1       	rjmp	.+574    	; 0x29c <__bad_interrupt>
      5e:	00 00       	nop
      60:	1d c1       	rjmp	.+570    	; 0x29c <__bad_interrupt>
      62:	00 00       	nop
      64:	1b c1       	rjmp	.+566    	; 0x29c <__bad_interrupt>
      66:	00 00       	nop
      68:	19 c1       	rjmp	.+562    	; 0x29c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	17 c1       	rjmp	.+558    	; 0x29c <__bad_interrupt>
      6e:	00 00       	nop
      70:	15 c1       	rjmp	.+554    	; 0x29c <__bad_interrupt>
      72:	00 00       	nop
      74:	13 c1       	rjmp	.+550    	; 0x29c <__bad_interrupt>
      76:	00 00       	nop
      78:	11 c1       	rjmp	.+546    	; 0x29c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0f c1       	rjmp	.+542    	; 0x29c <__bad_interrupt>
      7e:	00 00       	nop
      80:	0d c1       	rjmp	.+538    	; 0x29c <__bad_interrupt>
      82:	00 00       	nop
      84:	0b c1       	rjmp	.+534    	; 0x29c <__bad_interrupt>
      86:	00 00       	nop
      88:	09 c1       	rjmp	.+530    	; 0x29c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	07 c1       	rjmp	.+526    	; 0x29c <__bad_interrupt>
      8e:	00 00       	nop
      90:	05 c1       	rjmp	.+522    	; 0x29c <__bad_interrupt>
      92:	00 00       	nop
      94:	03 c1       	rjmp	.+518    	; 0x29c <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4313>:
      98:	1b 5b 33 36 6d 41 75 64 69 6f 20 4f 75 74 70 75     .[36mAudio Outpu
      a8:	74 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     t Host Demo runn
      b8:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00                 ing....[37m.

000000c4 <__c.4331>:
      c4:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
      d4:	0d 0a 00                                            ...

000000d7 <__c.4336>:
      d7:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
      e7:	68 65 64 2e 0d 0a 00                                hed....

000000ee <__c.4343>:
      ee:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
      fe:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     10e:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

0000011b <__c.4345>:
     11b:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     12b:	4e 6f 74 20 61 20 56 61 6c 69 64 20 41 75 64 69     Not a Valid Audi
     13b:	6f 20 4f 75 74 70 75 74 20 44 65 76 69 63 65 2e     o Output Device.
     14b:	0d 0a 00                                            ...

0000014e <__c.4347>:
     14e:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     15e:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     16e:	6f 6e 2e 0d 0a 00                                   on....

00000174 <__c.4349>:
     174:	45 72 72 6f 72 20 45 6e 61 62 6c 69 6e 67 20 41     Error Enabling A
     184:	75 64 69 6f 20 53 74 72 65 61 6d 2e 0d 0a 00        udio Stream....

00000193 <__c.4352>:
     193:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 41 75     Error Setting Au
     1a3:	64 69 6f 20 53 61 6d 70 6c 69 6e 67 20 46 72 65     dio Sampling Fre
     1b3:	71 75 65 6e 63 79 2e 0d 0a 00                       quency....

000001bd <__c.4354>:
     1bd:	41 75 64 69 6f 20 44 65 76 69 63 65 20 45 6e 75     Audio Device Enu
     1cd:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

000001d8 <__c.4359>:
     1d8:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     1e8:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     1f8:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000207 <__c.4366>:
     207:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     217:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     227:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     237:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     247:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     257:	1b 5b 33 37 6d 00 00                                .[37m..

0000025e <__ctors_end>:
     25e:	11 24       	eor	r1, r1
     260:	1f be       	out	0x3f, r1	; 63
     262:	cf ef       	ldi	r28, 0xFF	; 255
     264:	d0 e2       	ldi	r29, 0x20	; 32
     266:	de bf       	out	0x3e, r29	; 62
     268:	cd bf       	out	0x3d, r28	; 61

0000026a <__do_copy_data>:
     26a:	11 e0       	ldi	r17, 0x01	; 1
     26c:	a0 e0       	ldi	r26, 0x00	; 0
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	e4 e6       	ldi	r30, 0x64	; 100
     272:	fa e1       	ldi	r31, 0x1A	; 26
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	0b bf       	out	0x3b, r16	; 59
     278:	02 c0       	rjmp	.+4      	; 0x27e <__do_copy_data+0x14>
     27a:	07 90       	elpm	r0, Z+
     27c:	0d 92       	st	X+, r0
     27e:	ae 33       	cpi	r26, 0x3E	; 62
     280:	b1 07       	cpc	r27, r17
     282:	d9 f7       	brne	.-10     	; 0x27a <__do_copy_data+0x10>
     284:	1b be       	out	0x3b, r1	; 59

00000286 <__do_clear_bss>:
     286:	11 e0       	ldi	r17, 0x01	; 1
     288:	ae e3       	ldi	r26, 0x3E	; 62
     28a:	b1 e0       	ldi	r27, 0x01	; 1
     28c:	01 c0       	rjmp	.+2      	; 0x290 <.do_clear_bss_start>

0000028e <.do_clear_bss_loop>:
     28e:	1d 92       	st	X+, r1

00000290 <.do_clear_bss_start>:
     290:	a3 36       	cpi	r26, 0x63	; 99
     292:	b1 07       	cpc	r27, r17
     294:	e1 f7       	brne	.-8      	; 0x28e <.do_clear_bss_loop>
     296:	e8 d0       	rcall	.+464    	; 0x468 <main>
     298:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <_exit>

0000029c <__bad_interrupt>:
     29c:	b1 ce       	rjmp	.-670    	; 0x0 <__vectors>

0000029e <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     29e:	9b b1       	in	r25, 0x0b	; 11
     2a0:	9f 70       	andi	r25, 0x0F	; 15
     2a2:	98 2b       	or	r25, r24
     2a4:	9b b9       	out	0x0b, r25	; 11
			}
     2a6:	08 95       	ret

000002a8 <__vector_21>:
	}
}

/** ISR to handle the reloading of the PWM timer with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
     2a8:	1f 92       	push	r1
     2aa:	0f 92       	push	r0
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	0f 92       	push	r0
     2b0:	0b b6       	in	r0, 0x3b	; 59
     2b2:	0f 92       	push	r0
     2b4:	11 24       	eor	r1, r1
     2b6:	1f 93       	push	r17
     2b8:	2f 93       	push	r18
     2ba:	3f 93       	push	r19
     2bc:	4f 93       	push	r20
     2be:	5f 93       	push	r21
     2c0:	6f 93       	push	r22
     2c2:	7f 93       	push	r23
     2c4:	8f 93       	push	r24
     2c6:	9f 93       	push	r25
     2c8:	af 93       	push	r26
     2ca:	bf 93       	push	r27
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	ef 93       	push	r30
     2d2:	ff 93       	push	r31
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     2d4:	80 91 a7 00 	lds	r24, 0x00A7
     2d8:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     2da:	90 91 aa 00 	lds	r25, 0x00AA
     2de:	90 ff       	sbrs	r25, 0
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <__vector_21+0x3e>
     2e2:	c0 e8       	ldi	r28, 0x80	; 128
     2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <__vector_21+0x40>
     2e6:	c0 e0       	ldi	r28, 0x00	; 0
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     2e8:	c8 2b       	or	r28, r24
			 */
			static inline bool Audio_Host_IsReadyForNextSample(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo)
			                                                   ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
			static inline bool Audio_Host_IsReadyForNextSample(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo)
			{
				if ((USB_HostState != HOST_STATE_Configured) || !(AudioInterfaceInfo->State.IsActive))
     2ea:	80 91 4e 01 	lds	r24, 0x014E
     2ee:	8b 30       	cpi	r24, 0x0B	; 11
     2f0:	09 f0       	breq	.+2      	; 0x2f4 <__vector_21+0x4c>
     2f2:	5c c0       	rjmp	.+184    	; 0x3ac <__vector_21+0x104>
     2f4:	80 91 0f 01 	lds	r24, 0x010F
     2f8:	88 23       	and	r24, r24
     2fa:	09 f4       	brne	.+2      	; 0x2fe <__vector_21+0x56>
     2fc:	57 c0       	rjmp	.+174    	; 0x3ac <__vector_21+0x104>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     2fe:	80 91 09 01 	lds	r24, 0x0109
     302:	8f 70       	andi	r24, 0x0F	; 15
     304:	80 93 a7 00 	sts	0x00A7, r24
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     308:	80 91 a6 00 	lds	r24, 0x00A6
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	/* Check that the USB bus is ready for the next sample to write */
	if (Audio_Host_IsReadyForNextSample(&Speaker_Audio_Interface))
     30c:	82 ff       	sbrs	r24, 2
     30e:	4e c0       	rjmp	.+156    	; 0x3ac <__vector_21+0x104>
		#if defined(USE_TEST_TONE)
			static uint8_t SquareWaveSampleCount;
			static int16_t CurrentWaveValue;

			/* In test tone mode, generate a square wave at 1/256 of the sample rate */
			if (SquareWaveSampleCount++ == 0xFF)
     310:	80 91 3e 01 	lds	r24, 0x013E
     314:	98 2f       	mov	r25, r24
     316:	9f 5f       	subi	r25, 0xFF	; 255
     318:	90 93 3e 01 	sts	0x013E, r25
     31c:	8f 3f       	cpi	r24, 0xFF	; 255
     31e:	51 f4       	brne	.+20     	; 0x334 <__vector_21+0x8c>
			  CurrentWaveValue ^= 0x8000;
     320:	80 91 3f 01 	lds	r24, 0x013F
     324:	90 91 40 01 	lds	r25, 0x0140
     328:	80 50       	subi	r24, 0x00	; 0
     32a:	90 48       	sbci	r25, 0x80	; 128
     32c:	90 93 40 01 	sts	0x0140, r25
     330:	80 93 3f 01 	sts	0x013F, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     334:	8c b1       	in	r24, 0x0c	; 12

			/* Only generate audio if the board button is being pressed */
			AudioSample = (Buttons_GetStatus() & BUTTONS_BUTTON1) ? CurrentWaveValue : 0;
     336:	82 fd       	sbrc	r24, 2
     338:	05 c0       	rjmp	.+10     	; 0x344 <__vector_21+0x9c>
     33a:	80 91 3f 01 	lds	r24, 0x013F
     33e:	90 91 40 01 	lds	r25, 0x0140
     342:	02 c0       	rjmp	.+4      	; 0x348 <__vector_21+0xa0>
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     348:	18 2f       	mov	r17, r24
     34a:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     34e:	d9 2f       	mov	r29, r25
     350:	90 93 af 00 	sts	0x00AF, r25
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     354:	80 91 a6 00 	lds	r24, 0x00A6
			{
				(void)AudioInterfaceInfo;

				Pipe_Write_16_LE(Sample);

				if (!(Pipe_IsReadWriteAllowed()))
     358:	85 fd       	sbrc	r24, 5
     35a:	10 c0       	rjmp	.+32     	; 0x37c <__vector_21+0xd4>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     35c:	80 91 a9 00 	lds	r24, 0x00A9
     360:	8f 7b       	andi	r24, 0xBF	; 191
     362:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     366:	80 91 a6 00 	lds	r24, 0x00A6
     36a:	8b 77       	andi	r24, 0x7B	; 123
     36c:	80 93 a6 00 	sts	0x00A6, r24
				{
					Pipe_Unfreeze();
					Pipe_ClearOUT();
					Pipe_WaitUntilReady();
     370:	c0 d3       	rcall	.+1920   	; 0xaf2 <Pipe_WaitUntilReady>
     372:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     376:	80 64       	ori	r24, 0x40	; 64
     378:	80 93 a9 00 	sts	0x00A9, r24
     37c:	10 93 af 00 	sts	0x00AF, r17
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     380:	d0 93 af 00 	sts	0x00AF, r29
				UPDATX = (Data >> 8);
     384:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     388:	85 fd       	sbrc	r24, 5
			{
				(void)AudioInterfaceInfo;

				Pipe_Write_16_LE(Sample);

				if (!(Pipe_IsReadWriteAllowed()))
     38a:	10 c0       	rjmp	.+32     	; 0x3ac <__vector_21+0x104>
     38c:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     390:	8f 7b       	andi	r24, 0xBF	; 191
     392:	80 93 a9 00 	sts	0x00A9, r24
     396:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     39a:	8b 77       	andi	r24, 0x7B	; 123
     39c:	80 93 a6 00 	sts	0x00A6, r24
     3a0:	a8 d3       	rcall	.+1872   	; 0xaf2 <Pipe_WaitUntilReady>
				{
					Pipe_Unfreeze();
					Pipe_ClearOUT();
					Pipe_WaitUntilReady();
     3a2:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     3a6:	80 64       	ori	r24, 0x40	; 64
     3a8:	80 93 a9 00 	sts	0x00A9, r24
     3ac:	cf 70       	andi	r28, 0x0F	; 15
     3ae:	c0 93 a7 00 	sts	0x00A7, r28
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     3b2:	ff 91       	pop	r31
     3b4:	ef 91       	pop	r30
		Audio_Host_WriteSample16(&Speaker_Audio_Interface, AudioSample);
		Audio_Host_WriteSample16(&Speaker_Audio_Interface, AudioSample);
	}

	Pipe_SelectPipe(PrevPipe);
}
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	bf 91       	pop	r27
     3bc:	af 91       	pop	r26
     3be:	9f 91       	pop	r25
     3c0:	8f 91       	pop	r24
     3c2:	7f 91       	pop	r23
     3c4:	6f 91       	pop	r22
     3c6:	5f 91       	pop	r21
     3c8:	4f 91       	pop	r20
     3ca:	3f 91       	pop	r19
     3cc:	2f 91       	pop	r18
     3ce:	1f 91       	pop	r17
     3d0:	0f 90       	pop	r0
     3d2:	0b be       	out	0x3b, r0	; 59
     3d4:	0f 90       	pop	r0
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	0f 90       	pop	r0
     3da:	1f 90       	pop	r1
     3dc:	18 95       	reti

000003de <SetupHardware>:
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     3e2:	84 b7       	in	r24, 0x34	; 52
     3e4:	87 7f       	andi	r24, 0xF7	; 247
     3e6:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     3e8:	28 e1       	ldi	r18, 0x18	; 24
     3ea:	0f b6       	in	r0, 0x3f	; 63
     3ec:	f8 94       	cli
     3ee:	20 93 60 00 	sts	0x0060, r18
     3f2:	10 92 60 00 	sts	0x0060, r1
     3f6:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	80 e8       	ldi	r24, 0x80	; 128
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	80 93 61 00 	sts	0x0061, r24
     404:	90 93 61 00 	sts	0x0061, r25
     408:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     40a:	83 e3       	ldi	r24, 0x33	; 51
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	90 93 cd 00 	sts	0x00CD, r25
     412:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     416:	86 e0       	ldi	r24, 0x06	; 6
     418:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     41c:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     420:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     424:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     426:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     428:	8a b1       	in	r24, 0x0a	; 10
     42a:	80 6f       	ori	r24, 0xF0	; 240
     42c:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     42e:	8b b1       	in	r24, 0x0b	; 11
     430:	8f 70       	andi	r24, 0x0F	; 15
     432:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     434:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     436:	72 9a       	sbi	0x0e, 2	; 14
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(const uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(const uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
     438:	ca e7       	ldi	r28, 0x7A	; 122
     43a:	d0 e0       	ldi	r29, 0x00	; 0
     43c:	85 ea       	ldi	r24, 0xA5	; 165
     43e:	88 83       	st	Y, r24
			 */
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__))
				DDRF  &= ~(1 << ChannelIndex);
     440:	82 98       	cbi	0x10, 2	; 16
				DIDR0 |=  (1 << ChannelIndex);
     442:	ee e7       	ldi	r30, 0x7E	; 126
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	84 60       	ori	r24, 0x04	; 4
     44a:	80 83       	st	Z, r24
	Serial_Init(9600, false);
	LEDs_Init();
	Buttons_Init();
	ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_32);
	ADC_SetupChannel(MIC_IN_ADC_CHANNEL);
	USB_Init();
     44c:	e8 d3       	rcall	.+2000   	; 0xc1e <USB_Init>
     44e:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 2b 0a 	call	0x1456	; 0x1456 <Serial_CreateStream>
     456:	82 e4       	ldi	r24, 0x42	; 66
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
     458:	80 93 7c 00 	sts	0x007C, r24
     45c:	88 81       	ld	r24, Y
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
				#endif

				ADCSRA |= (1 << ADSC);
     45e:	80 64       	ori	r24, 0x40	; 64
     460:	88 83       	st	Y, r24
     462:	df 91       	pop	r29
	
	/* Start the ADC conversion in free running mode */
	ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_GET_CHANNEL_MASK(MIC_IN_ADC_CHANNEL));	
}
     464:	cf 91       	pop	r28
     466:	08 95       	ret

00000468 <main>:
     468:	ba df       	rcall	.-140    	; 0x3de <SetupHardware>
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     46a:	88 e9       	ldi	r24, 0x98	; 152

	puts_P(PSTR(ESC_FG_CYAN "Audio Output Host Demo running.\r\n" ESC_FG_WHITE));
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <puts_P>
     472:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     474:	14 df       	rcall	.-472    	; 0x29e <LEDs_SetAllLEDs>
     476:	78 94       	sei
     478:	81 d6       	rcall	.+3330   	; 0x117c <USB_USBTask>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     47a:	fe cf       	rjmp	.-4      	; 0x478 <main+0x10>

0000047c <EVENT_USB_Host_DeviceAttached>:
	GlobalInterruptEnable();

	for (;;)
	{
		Audio_Host_USBTask(&Speaker_Audio_Interface);
		USB_USBTask();
     47c:	84 ec       	ldi	r24, 0xC4	; 196
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 67 0a 	call	0x14ce	; 0x14ce <puts_P>
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     484:	80 ea       	ldi	r24, 0xA0	; 160
     486:	0b cf       	rjmp	.-490    	; 0x29e <LEDs_SetAllLEDs>

00000488 <EVENT_USB_Host_DeviceUnattached>:
     488:	87 ed       	ldi	r24, 0xD7	; 215
}
     48a:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     48c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     490:	80 e1       	ldi	r24, 0x10	; 16
     492:	05 cf       	rjmp	.-502    	; 0x29e <LEDs_SetAllLEDs>

00000494 <EVENT_USB_Host_DeviceEnumerationComplete>:
     494:	ef 92       	push	r14
}
     496:	ff 92       	push	r15

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     498:	0f 93       	push	r16
     49a:	1f 93       	push	r17
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	cd b7       	in	r28, 0x3d	; 61
     4a2:	de b7       	in	r29, 0x3e	; 62
     4a4:	c5 50       	subi	r28, 0x05	; 5
     4a6:	d2 40       	sbci	r29, 0x02	; 2
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4b2:	80 ea       	ldi	r24, 0xA0	; 160
     4b4:	f4 de       	rcall	.-536    	; 0x29e <LEDs_SetAllLEDs>
     4b6:	81 e0       	ldi	r24, 0x01	; 1

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     4b8:	be 01       	movw	r22, r28
     4ba:	6f 5f       	subi	r22, 0xFF	; 255
     4bc:	7f 4f       	sbci	r23, 0xFF	; 255
     4be:	ae 01       	movw	r20, r28
     4c0:	4a 5f       	subi	r20, 0xFA	; 250
     4c2:	5f 4f       	sbci	r21, 0xFF	; 255
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	32 e0       	ldi	r19, 0x02	; 2
     4c8:	58 d4       	rcall	.+2224   	; 0xd7a <USB_Host_GetDeviceConfigDescriptor>
     4ca:	88 23       	and	r24, r24
     4cc:	19 f0       	breq	.+6      	; 0x4d4 <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
     4ce:	8e ee       	ldi	r24, 0xEE	; 238
     4d0:	90 e0       	ldi	r25, 0x00	; 0
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     4d2:	13 c0       	rjmp	.+38     	; 0x4fa <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
     4d4:	69 81       	ldd	r22, Y+1	; 0x01
     4d6:	7a 81       	ldd	r23, Y+2	; 0x02
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (Audio_Host_ConfigurePipes(&Speaker_Audio_Interface,
     4d8:	83 e0       	ldi	r24, 0x03	; 3
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	ae 01       	movw	r20, r28
     4de:	4a 5f       	subi	r20, 0xFA	; 250
     4e0:	5f 4f       	sbci	r21, 0xFF	; 255
     4e2:	8c d6       	rcall	.+3352   	; 0x11fc <Audio_Host_ConfigurePipes>
     4e4:	88 23       	and	r24, r24
     4e6:	19 f0       	breq	.+6      	; 0x4ee <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
     4e8:	8b e1       	ldi	r24, 0x1B	; 27
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	06 c0       	rjmp	.+12     	; 0x4fa <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
	                              ConfigDescriptorSize, ConfigDescriptorData) != AUDIO_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Audio Output Device.\r\n"));
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	09 d6       	rcall	.+3090   	; 0x1104 <USB_Host_SetDeviceConfiguration>
     4f2:	88 23       	and	r24, r24
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     4f4:	29 f0       	breq	.+10     	; 0x500 <EVENT_USB_Host_DeviceEnumerationComplete+0x6c>
     4f6:	8e e4       	ldi	r24, 0x4E	; 78
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	e9 d7       	rcall	.+4050   	; 0x14ce <puts_P>
     4fc:	80 e9       	ldi	r24, 0x90	; 144
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     4fe:	35 c0       	rjmp	.+106    	; 0x56a <EVENT_USB_Host_DeviceEnumerationComplete+0xd6>
     500:	83 e0       	ldi	r24, 0x03	; 3
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	61 e0       	ldi	r22, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     506:	4a d7       	rcall	.+3732   	; 0x139c <Audio_Host_StartStopStreaming>
     508:	88 23       	and	r24, r24
		return;
	}

	if (Audio_Host_StartStopStreaming(&Speaker_Audio_Interface, true) != HOST_SENDCONTROL_Successful)
     50a:	19 f0       	breq	.+6      	; 0x512 <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
     50c:	84 e7       	ldi	r24, 0x74	; 116
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	1b c0       	rjmp	.+54     	; 0x548 <EVENT_USB_Host_DeviceEnumerationComplete+0xb4>
     512:	de 01       	movw	r26, r28
     514:	13 96       	adiw	r26, 0x03	; 3
     516:	e0 e0       	ldi	r30, 0x00	; 0
	{
		puts_P(PSTR("Error Enabling Audio Stream.\r\n"));
     518:	f1 e0       	ldi	r31, 0x01	; 1
     51a:	83 e0       	ldi	r24, 0x03	; 3
     51c:	01 90       	ld	r0, Z+
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	USB_Audio_SampleFreq_t SampleRate = AUDIO_SAMPLE_FREQ(48000);
     51e:	0d 92       	st	X+, r0
     520:	81 50       	subi	r24, 0x01	; 1
     522:	e1 f7       	brne	.-8      	; 0x51c <EVENT_USB_Host_DeviceEnumerationComplete+0x88>
     524:	83 e0       	ldi	r24, 0x03	; 3
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	60 91 09 01 	lds	r22, 0x0109
     52c:	41 e0       	ldi	r20, 0x01	; 1
     52e:	21 e0       	ldi	r18, 0x01	; 1
	if (Audio_Host_GetSetEndpointProperty(&Speaker_Audio_Interface, Speaker_Audio_Interface.Config.DataOUTPipe.Address,
     530:	03 e0       	ldi	r16, 0x03	; 3
     532:	10 e0       	ldi	r17, 0x00	; 0
     534:	33 e0       	ldi	r19, 0x03	; 3
     536:	e3 2e       	mov	r14, r19
     538:	f1 2c       	mov	r15, r1
     53a:	ec 0e       	add	r14, r28
     53c:	fd 1e       	adc	r15, r29
     53e:	3b d7       	rcall	.+3702   	; 0x13b6 <Audio_Host_GetSetEndpointProperty>
     540:	88 23       	and	r24, r24
     542:	41 f0       	breq	.+16     	; 0x554 <EVENT_USB_Host_DeviceEnumerationComplete+0xc0>
     544:	83 e9       	ldi	r24, 0x93	; 147
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	c2 d7       	rcall	.+3972   	; 0x14ce <puts_P>
     54a:	80 e9       	ldi	r24, 0x90	; 144
     54c:	a8 de       	rcall	.-688    	; 0x29e <LEDs_SetAllLEDs>
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	d9 d5       	rcall	.+2994   	; 0x1104 <USB_Host_SetDeviceConfiguration>
	                                      AUDIO_REQ_SetCurrent, AUDIO_EPCONTROL_SamplingFreq,
	                                      sizeof(SampleRate), &SampleRate) != HOST_SENDCONTROL_Successful)
	{
		puts_P(PSTR("Error Setting Audio Sampling Frequency.\r\n"));
     552:	0c c0       	rjmp	.+24     	; 0x56c <EVENT_USB_Host_DeviceEnumerationComplete+0xd8>
     554:	82 e0       	ldi	r24, 0x02	; 2
     556:	80 93 6e 00 	sts	0x006E, r24
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     55a:	93 e1       	ldi	r25, 0x13	; 19
     55c:	97 bd       	out	0x27, r25	; 39
     55e:	84 bd       	out	0x24, r24	; 36
		USB_Host_SetDeviceConfiguration(0);
     560:	85 bd       	out	0x25, r24	; 37
     562:	8d eb       	ldi	r24, 0xBD	; 189
     564:	91 e0       	ldi	r25, 0x01	; 1
		return;
     566:	b3 d7       	rcall	.+3942   	; 0x14ce <puts_P>
	}

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
     568:	80 e6       	ldi	r24, 0x60	; 96
     56a:	99 de       	rcall	.-718    	; 0x29e <LEDs_SetAllLEDs>
     56c:	cb 5f       	subi	r28, 0xFB	; 251
	OCR0A   = ((F_CPU / 8 / 48000) - 1);
     56e:	dd 4f       	sbci	r29, 0xFD	; 253
     570:	0f b6       	in	r0, 0x3f	; 63
	TCCR0A  = (1 << WGM01);  // CTC mode
     572:	f8 94       	cli
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed
     574:	de bf       	out	0x3e, r29	; 62

	puts_P(PSTR("Audio Device Enumerated.\r\n"));
     576:	0f be       	out	0x3f, r0	; 63
     578:	cd bf       	out	0x3d, r28	; 61
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     57e:	1f 91       	pop	r17
     580:	0f 91       	pop	r16
     582:	ff 90       	pop	r15
}
     584:	ef 90       	pop	r14
     586:	08 95       	ret

00000588 <EVENT_USB_Host_HostError>:
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	0f 92       	push	r0
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
     592:	89 83       	std	Y+1, r24	; 0x01
     594:	dc d2       	rcall	.+1464   	; 0xb4e <USB_Disable>
     596:	00 d0       	rcall	.+0      	; 0x598 <EVENT_USB_Host_HostError+0x10>
     598:	00 d0       	rcall	.+0      	; 0x59a <EVENT_USB_Host_HostError+0x12>
     59a:	ed b7       	in	r30, 0x3d	; 61
     59c:	fe b7       	in	r31, 0x3e	; 62
     59e:	31 96       	adiw	r30, 0x01	; 1
/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     5a0:	28 ed       	ldi	r18, 0xD8	; 216
     5a2:	31 e0       	ldi	r19, 0x01	; 1
     5a4:	ad b7       	in	r26, 0x3d	; 61
     5a6:	be b7       	in	r27, 0x3e	; 62
     5a8:	12 96       	adiw	r26, 0x02	; 2
     5aa:	3c 93       	st	X, r19
     5ac:	2e 93       	st	-X, r18
     5ae:	11 97       	sbiw	r26, 0x01	; 1
     5b0:	89 81       	ldd	r24, Y+1	; 0x01
     5b2:	82 83       	std	Z+2, r24	; 0x02
     5b4:	13 82       	std	Z+3, r1	; 0x03
     5b6:	6c d7       	rcall	.+3800   	; 0x1490 <printf_P>
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	80 e9       	ldi	r24, 0x90	; 144
     5c2:	6d de       	rcall	.-806    	; 0x29e <LEDs_SetAllLEDs>
     5c4:	ff cf       	rjmp	.-2      	; 0x5c4 <EVENT_USB_Host_HostError+0x3c>

000005c6 <EVENT_USB_Host_DeviceEnumerationFailed>:
     5c6:	90 91 4e 01 	lds	r25, 0x014E
     5ca:	2d b7       	in	r18, 0x3d	; 61
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     5cc:	3e b7       	in	r19, 0x3e	; 62
     5ce:	28 50       	subi	r18, 0x08	; 8
     5d0:	30 40       	sbci	r19, 0x00	; 0
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	3e bf       	out	0x3e, r19	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	2d bf       	out	0x3d, r18	; 61
     5dc:	ed b7       	in	r30, 0x3d	; 61
     5de:	fe b7       	in	r31, 0x3e	; 62
     5e0:	31 96       	adiw	r30, 0x01	; 1
     5e2:	27 e0       	ldi	r18, 0x07	; 7
     5e4:	32 e0       	ldi	r19, 0x02	; 2
     5e6:	ad b7       	in	r26, 0x3d	; 61
     5e8:	be b7       	in	r27, 0x3e	; 62
     5ea:	12 96       	adiw	r26, 0x02	; 2
     5ec:	3c 93       	st	X, r19
     5ee:	2e 93       	st	-X, r18
     5f0:	11 97       	sbiw	r26, 0x01	; 1
     5f2:	82 83       	std	Z+2, r24	; 0x02
     5f4:	13 82       	std	Z+3, r1	; 0x03
     5f6:	64 83       	std	Z+4, r22	; 0x04
     5f8:	15 82       	std	Z+5, r1	; 0x05
     5fa:	96 83       	std	Z+6, r25	; 0x06
     5fc:	17 82       	std	Z+7, r1	; 0x07
     5fe:	48 d7       	rcall	.+3728   	; 0x1490 <printf_P>
     600:	2d b7       	in	r18, 0x3d	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     602:	3e b7       	in	r19, 0x3e	; 62
     604:	28 5f       	subi	r18, 0xF8	; 248
     606:	3f 4f       	sbci	r19, 0xFF	; 255
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	f8 94       	cli
     60c:	3e bf       	out	0x3e, r19	; 62
     60e:	0f be       	out	0x3f, r0	; 63
     610:	2d bf       	out	0x3d, r18	; 61
     612:	80 e9       	ldi	r24, 0x90	; 144
     614:	44 ce       	rjmp	.-888    	; 0x29e <LEDs_SetAllLEDs>

00000616 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     616:	80 91 9e 00 	lds	r24, 0x009E
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	81 70       	andi	r24, 0x01	; 1
     61e:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     620:	20 91 a0 00 	lds	r18, 0x00A0
     624:	2d 7f       	andi	r18, 0xFD	; 253
     626:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     62a:	20 91 9e 00 	lds	r18, 0x009E
     62e:	22 60       	ori	r18, 0x02	; 2
     630:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     634:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     638:	21 fd       	sbrc	r18, 1
     63a:	fc cf       	rjmp	.-8      	; 0x634 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     63c:	20 91 9e 00 	lds	r18, 0x009E
     640:	21 60       	ori	r18, 0x01	; 1
     642:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     646:	10 92 44 01 	sts	0x0144, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     64a:	20 91 a0 00 	lds	r18, 0x00A0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	20 72       	andi	r18, 0x20	; 32
     652:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     654:	40 91 a0 00 	lds	r20, 0x00A0
     658:	4f 7d       	andi	r20, 0xDF	; 223
     65a:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     65e:	40 91 9f 00 	lds	r20, 0x009F
     662:	4f 7d       	andi	r20, 0xDF	; 223
     664:	40 93 9f 00 	sts	0x009F, r20
     668:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     66a:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     66e:	55 ff       	sbrs	r21, 5
     670:	0b c0       	rjmp	.+22     	; 0x688 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     672:	40 91 9f 00 	lds	r20, 0x009F
     676:	4f 7d       	andi	r20, 0xDF	; 223
     678:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     67c:	40 91 9f 00 	lds	r20, 0x009F
     680:	4d 7f       	andi	r20, 0xFD	; 253
     682:	40 93 9f 00 	sts	0x009F, r20
     686:	08 c0       	rjmp	.+16     	; 0x698 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     688:	ef ec       	ldi	r30, 0xCF	; 207
     68a:	f7 e0       	ldi	r31, 0x07	; 7
     68c:	31 97       	sbiw	r30, 0x01	; 1
     68e:	f1 f7       	brne	.-4      	; 0x68c <USB_Host_ResetDevice+0x76>
     690:	00 c0       	rjmp	.+0      	; 0x692 <USB_Host_ResetDevice+0x7c>
     692:	00 00       	nop
     694:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     696:	49 f7       	brne	.-46     	; 0x66a <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     698:	21 15       	cp	r18, r1
     69a:	31 05       	cpc	r19, r1
     69c:	29 f0       	breq	.+10     	; 0x6a8 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     69e:	20 91 a0 00 	lds	r18, 0x00A0
     6a2:	20 62       	ori	r18, 0x20	; 32
     6a4:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     6a8:	00 97       	sbiw	r24, 0x00	; 0
     6aa:	29 f4       	brne	.+10     	; 0x6b6 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     6ac:	80 91 9e 00 	lds	r24, 0x009E
     6b0:	8e 7f       	andi	r24, 0xFE	; 254
     6b2:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     6b6:	80 91 a0 00 	lds	r24, 0x00A0
     6ba:	82 60       	ori	r24, 0x02	; 2
     6bc:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     6c0:	08 95       	ret

000006c2 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     6c2:	40 91 9e 00 	lds	r20, 0x009E
     6c6:	50 e0       	ldi	r21, 0x00	; 0
     6c8:	41 70       	andi	r20, 0x01	; 1
     6ca:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     6cc:	20 91 a0 00 	lds	r18, 0x00A0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	20 72       	andi	r18, 0x20	; 32
     6d4:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     6d6:	90 91 a0 00 	lds	r25, 0x00A0
     6da:	9f 7d       	andi	r25, 0xDF	; 223
     6dc:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6e0:	90 91 9f 00 	lds	r25, 0x009F
     6e4:	9f 7d       	andi	r25, 0xDF	; 223
     6e6:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6ea:	90 91 9e 00 	lds	r25, 0x009E
     6ee:	91 60       	ori	r25, 0x01	; 1
     6f0:	90 93 9e 00 	sts	0x009E, r25
     6f4:	26 c0       	rjmp	.+76     	; 0x742 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     6f6:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     6fa:	95 ff       	sbrs	r25, 5
     6fc:	06 c0       	rjmp	.+12     	; 0x70a <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6fe:	90 91 9f 00 	lds	r25, 0x009F
     702:	9f 7d       	andi	r25, 0xDF	; 223
     704:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     708:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     70a:	90 91 4e 01 	lds	r25, 0x014E
     70e:	91 30       	cpi	r25, 0x01	; 1
     710:	d9 f0       	breq	.+54     	; 0x748 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     712:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     716:	94 ff       	sbrs	r25, 4
     718:	09 c0       	rjmp	.+18     	; 0x72c <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     71a:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     71e:	80 91 a6 00 	lds	r24, 0x00A6
     722:	8f 7e       	andi	r24, 0xEF	; 239
     724:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     728:	82 e0       	ldi	r24, 0x02	; 2

			break;
     72a:	0f c0       	rjmp	.+30     	; 0x74a <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     72c:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     730:	91 ff       	sbrs	r25, 1
     732:	07 c0       	rjmp	.+14     	; 0x742 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     734:	80 91 a6 00 	lds	r24, 0x00A6
     738:	8d 7f       	andi	r24, 0xFD	; 253
     73a:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     73e:	83 e0       	ldi	r24, 0x03	; 3

			break;
     740:	04 c0       	rjmp	.+8      	; 0x74a <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     742:	88 23       	and	r24, r24
     744:	c1 f6       	brne	.-80     	; 0x6f6 <USB_Host_WaitMS+0x34>
     746:	01 c0       	rjmp	.+2      	; 0x74a <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     748:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     74a:	41 15       	cp	r20, r1
     74c:	51 05       	cpc	r21, r1
     74e:	29 f4       	brne	.+10     	; 0x75a <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     750:	90 91 9e 00 	lds	r25, 0x009E
     754:	9e 7f       	andi	r25, 0xFE	; 254
     756:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     75a:	21 15       	cp	r18, r1
     75c:	31 05       	cpc	r19, r1
     75e:	29 f0       	breq	.+10     	; 0x76a <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     760:	90 91 a0 00 	lds	r25, 0x00A0
     764:	90 62       	ori	r25, 0x20	; 32
     766:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     76a:	08 95       	ret

0000076c <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
     778:	28 97       	sbiw	r28, 0x08	; 8
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     784:	80 91 4e 01 	lds	r24, 0x014E
     788:	85 30       	cpi	r24, 0x05	; 5
     78a:	09 f4       	brne	.+2      	; 0x78e <USB_Host_ProcessNextHostState+0x22>
     78c:	99 c0       	rjmp	.+306    	; 0x8c0 <USB_Host_ProcessNextHostState+0x154>
     78e:	86 30       	cpi	r24, 0x06	; 6
     790:	68 f4       	brcc	.+26     	; 0x7ac <USB_Host_ProcessNextHostState+0x40>
     792:	82 30       	cpi	r24, 0x02	; 2
     794:	c1 f1       	breq	.+112    	; 0x806 <USB_Host_ProcessNextHostState+0x9a>
     796:	83 30       	cpi	r24, 0x03	; 3
     798:	18 f4       	brcc	.+6      	; 0x7a0 <USB_Host_ProcessNextHostState+0x34>
     79a:	88 23       	and	r24, r24
     79c:	a1 f0       	breq	.+40     	; 0x7c6 <USB_Host_ProcessNextHostState+0x5a>
     79e:	04 c1       	rjmp	.+520    	; 0x9a8 <USB_Host_ProcessNextHostState+0x23c>
     7a0:	83 30       	cpi	r24, 0x03	; 3
     7a2:	d9 f1       	breq	.+118    	; 0x81a <USB_Host_ProcessNextHostState+0xae>
     7a4:	84 30       	cpi	r24, 0x04	; 4
     7a6:	09 f0       	breq	.+2      	; 0x7aa <USB_Host_ProcessNextHostState+0x3e>
     7a8:	ff c0       	rjmp	.+510    	; 0x9a8 <USB_Host_ProcessNextHostState+0x23c>
     7aa:	62 c0       	rjmp	.+196    	; 0x870 <USB_Host_ProcessNextHostState+0x104>
     7ac:	87 30       	cpi	r24, 0x07	; 7
     7ae:	09 f4       	brne	.+2      	; 0x7b2 <USB_Host_ProcessNextHostState+0x46>
     7b0:	9e c0       	rjmp	.+316    	; 0x8ee <USB_Host_ProcessNextHostState+0x182>
     7b2:	87 30       	cpi	r24, 0x07	; 7
     7b4:	08 f4       	brcc	.+2      	; 0x7b8 <USB_Host_ProcessNextHostState+0x4c>
     7b6:	8f c0       	rjmp	.+286    	; 0x8d6 <USB_Host_ProcessNextHostState+0x16a>
     7b8:	88 30       	cpi	r24, 0x08	; 8
     7ba:	09 f4       	brne	.+2      	; 0x7be <USB_Host_ProcessNextHostState+0x52>
     7bc:	b8 c0       	rjmp	.+368    	; 0x92e <USB_Host_ProcessNextHostState+0x1c2>
     7be:	89 30       	cpi	r24, 0x09	; 9
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <USB_Host_ProcessNextHostState+0x58>
     7c2:	f2 c0       	rjmp	.+484    	; 0x9a8 <USB_Host_ProcessNextHostState+0x23c>
     7c4:	d9 c0       	rjmp	.+434    	; 0x978 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     7c6:	00 91 41 01 	lds	r16, 0x0141
     7ca:	10 91 42 01 	lds	r17, 0x0142
     7ce:	01 15       	cp	r16, r1
     7d0:	11 05       	cpc	r17, r1
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <USB_Host_ProcessNextHostState+0x6a>
     7d4:	e9 c0       	rjmp	.+466    	; 0x9a8 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	74 df       	rcall	.-280    	; 0x6c2 <USB_Host_WaitMS>
     7da:	68 2f       	mov	r22, r24
     7dc:	88 23       	and	r24, r24
     7de:	31 f0       	breq	.+12     	; 0x7ec <USB_Host_ProcessNextHostState+0x80>
     7e0:	80 91 43 01 	lds	r24, 0x0143
				{
					USB_HostState = PostWaitState;
     7e4:	80 93 4e 01 	sts	0x014E, r24
     7e8:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     7ea:	d2 c0       	rjmp	.+420    	; 0x990 <USB_Host_ProcessNextHostState+0x224>
					break;
     7ec:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
     7ee:	10 40       	sbci	r17, 0x00	; 0
     7f0:	10 93 42 01 	sts	0x0142, r17
     7f4:	00 93 41 01 	sts	0x0141, r16
     7f8:	01 15       	cp	r16, r1
     7fa:	11 05       	cpc	r17, r1
     7fc:	09 f0       	breq	.+2      	; 0x800 <USB_Host_ProcessNextHostState+0x94>
     7fe:	d4 c0       	rjmp	.+424    	; 0x9a8 <USB_Host_ProcessNextHostState+0x23c>
     800:	80 91 43 01 	lds	r24, 0x0143
				  USB_HostState = PostWaitState;
     804:	07 c0       	rjmp	.+14     	; 0x814 <USB_Host_ProcessNextHostState+0xa8>
     806:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     808:	93 e0       	ldi	r25, 0x03	; 3
     80a:	90 93 42 01 	sts	0x0142, r25
     80e:	80 93 41 01 	sts	0x0141, r24
     812:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     814:	80 93 4e 01 	sts	0x014E, r24
     818:	c7 c0       	rjmp	.+398    	; 0x9a8 <USB_Host_ProcessNextHostState+0x23c>
			break;
     81a:	80 91 41 01 	lds	r24, 0x0141
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     81e:	90 91 42 01 	lds	r25, 0x0142
     822:	9c 01       	movw	r18, r24
     824:	21 50       	subi	r18, 0x01	; 1
     826:	30 40       	sbci	r19, 0x00	; 0
     828:	30 93 42 01 	sts	0x0142, r19
     82c:	20 93 41 01 	sts	0x0141, r18
     830:	00 97       	sbiw	r24, 0x00	; 0
     832:	39 f0       	breq	.+14     	; 0x842 <USB_Host_ProcessNextHostState+0xd6>
     834:	8f ec       	ldi	r24, 0xCF	; 207
     836:	97 e0       	ldi	r25, 0x07	; 7
     838:	01 97       	sbiw	r24, 0x01	; 1
     83a:	f1 f7       	brne	.-4      	; 0x838 <USB_Host_ProcessNextHostState+0xcc>
     83c:	00 c0       	rjmp	.+0      	; 0x83e <USB_Host_ProcessNextHostState+0xd2>
     83e:	00 00       	nop
     840:	b3 c0       	rjmp	.+358    	; 0x9a8 <USB_Host_ProcessNextHostState+0x23c>
     842:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     844:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     848:	80 61       	ori	r24, 0x10	; 16
     84a:	80 93 d8 00 	sts	0x00D8, r24
     84e:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     852:	8b 7f       	andi	r24, 0xFB	; 251
     854:	80 93 dd 00 	sts	0x00DD, r24
     858:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     85c:	80 61       	ori	r24, 0x10	; 16
     85e:	80 93 d7 00 	sts	0x00D7, r24
     862:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     866:	82 60       	ori	r24, 0x02	; 2
     868:	80 93 dd 00 	sts	0x00DD, r24
     86c:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     86e:	d2 cf       	rjmp	.-92     	; 0x814 <USB_Host_ProcessNextHostState+0xa8>
     870:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     874:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     876:	98 c0       	rjmp	.+304    	; 0x9a8 <USB_Host_ProcessNextHostState+0x23c>
     878:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     87c:	8e 7f       	andi	r24, 0xFE	; 254
     87e:	80 93 9f 00 	sts	0x009F, r24
     882:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     886:	8d 7f       	andi	r24, 0xFD	; 253
     888:	80 93 9f 00 	sts	0x009F, r24
     88c:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     890:	8d 7f       	andi	r24, 0xFD	; 253
     892:	80 93 df 00 	sts	0x00DF, r24
     896:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     89a:	82 60       	ori	r24, 0x02	; 2
     89c:	80 93 de 00 	sts	0x00DE, r24
     8a0:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     8a4:	81 60       	ori	r24, 0x01	; 1
     8a6:	80 93 9e 00 	sts	0x009E, r24
     8aa:	0f d1       	rcall	.+542    	; 0xaca <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     8ac:	10 92 4e 01 	sts	0x014E, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     8b0:	84 e6       	ldi	r24, 0x64	; 100
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	90 93 42 01 	sts	0x0142, r25
     8b8:	80 93 41 01 	sts	0x0141, r24
     8bc:	85 e0       	ldi	r24, 0x05	; 5
     8be:	59 c0       	rjmp	.+178    	; 0x972 <USB_Host_ProcessNextHostState+0x206>
     8c0:	aa de       	rcall	.-684    	; 0x616 <USB_Host_ResetDevice>
     8c2:	10 92 4e 01 	sts	0x014E, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     8c6:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	90 93 42 01 	sts	0x0142, r25
     8ce:	80 93 41 01 	sts	0x0141, r24
     8d2:	86 e0       	ldi	r24, 0x06	; 6
     8d4:	4e c0       	rjmp	.+156    	; 0x972 <USB_Host_ProcessNextHostState+0x206>
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     8dc:	20 e4       	ldi	r18, 0x40	; 64
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	01 e0       	ldi	r16, 0x01	; 1
     8e2:	6d d0       	rcall	.+218    	; 0x9be <Pipe_ConfigurePipe>
     8e4:	88 23       	and	r24, r24
     8e6:	09 f4       	brne	.+2      	; 0x8ea <USB_Host_ProcessNextHostState+0x17e>
     8e8:	4f c0       	rjmp	.+158    	; 0x988 <USB_Host_ProcessNextHostState+0x21c>
     8ea:	87 e0       	ldi	r24, 0x07	; 7
     8ec:	93 cf       	rjmp	.-218    	; 0x814 <USB_Host_ProcessNextHostState+0xa8>
     8ee:	a6 e4       	ldi	r26, 0x46	; 70
     8f0:	b1 e0       	ldi	r27, 0x01	; 1
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     8f2:	e3 e1       	ldi	r30, 0x13	; 19
     8f4:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     8f6:	88 e0       	ldi	r24, 0x08	; 8
     8f8:	01 90       	ld	r0, Z+
     8fa:	0d 92       	st	X+, r0
     8fc:	81 50       	subi	r24, 0x01	; 1
     8fe:	e1 f7       	brne	.-8      	; 0x8f8 <USB_Host_ProcessNextHostState+0x18c>
     900:	10 92 a7 00 	sts	0x00A7, r1
     904:	ce 01       	movw	r24, r28
     906:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     908:	ff d2       	rcall	.+1534   	; 0xf08 <USB_Host_SendControlRequest>
     90a:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     90c:	88 23       	and	r24, r24
     90e:	09 f0       	breq	.+2      	; 0x912 <USB_Host_ProcessNextHostState+0x1a6>
     910:	3e c0       	rjmp	.+124    	; 0x98e <USB_Host_ProcessNextHostState+0x222>
     912:	88 85       	ldd	r24, Y+8	; 0x08
     914:	80 93 23 01 	sts	0x0123, r24
     918:	7e de       	rcall	.-772    	; 0x616 <USB_Host_ResetDevice>
     91a:	10 92 4e 01 	sts	0x014E, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     91e:	88 ec       	ldi	r24, 0xC8	; 200
     920:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
     922:	90 93 42 01 	sts	0x0142, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     926:	80 93 41 01 	sts	0x0141, r24
     92a:	88 e0       	ldi	r24, 0x08	; 8
     92c:	22 c0       	rjmp	.+68     	; 0x972 <USB_Host_ProcessNextHostState+0x206>
     92e:	20 91 23 01 	lds	r18, 0x0123
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     93a:	01 e0       	ldi	r16, 0x01	; 1
     93c:	40 d0       	rcall	.+128    	; 0x9be <Pipe_ConfigurePipe>
     93e:	88 23       	and	r24, r24
     940:	19 f1       	breq	.+70     	; 0x988 <USB_Host_ProcessNextHostState+0x21c>
     942:	a6 e4       	ldi	r26, 0x46	; 70
     944:	b1 e0       	ldi	r27, 0x01	; 1
     946:	eb e1       	ldi	r30, 0x1B	; 27
     948:	f1 e0       	ldi	r31, 0x01	; 1
     94a:	88 e0       	ldi	r24, 0x08	; 8
     94c:	01 90       	ld	r0, Z+
     94e:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     950:	81 50       	subi	r24, 0x01	; 1
     952:	e1 f7       	brne	.-8      	; 0x94c <USB_Host_ProcessNextHostState+0x1e0>
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	d7 d2       	rcall	.+1454   	; 0xf08 <USB_Host_SendControlRequest>
     95a:	68 2f       	mov	r22, r24
     95c:	88 23       	and	r24, r24
     95e:	b9 f4       	brne	.+46     	; 0x98e <USB_Host_ProcessNextHostState+0x222>
     960:	10 92 4e 01 	sts	0x014E, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     964:	84 e6       	ldi	r24, 0x64	; 100
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	90 93 42 01 	sts	0x0142, r25
     96c:	80 93 41 01 	sts	0x0141, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     970:	89 e0       	ldi	r24, 0x09	; 9
     972:	80 93 43 01 	sts	0x0143, r24
     976:	18 c0       	rjmp	.+48     	; 0x9a8 <USB_Host_ProcessNextHostState+0x23c>
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	80 93 a1 00 	sts	0x00A1, r24
     97e:	8a e0       	ldi	r24, 0x0A	; 10
     980:	80 93 4e 01 	sts	0x014E, r24
     984:	87 dd       	rcall	.-1266   	; 0x494 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     986:	10 c0       	rjmp	.+32     	; 0x9a8 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	84 e0       	ldi	r24, 0x04	; 4
     98c:	01 c0       	rjmp	.+2      	; 0x990 <USB_Host_ProcessNextHostState+0x224>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     98e:	83 e0       	ldi	r24, 0x03	; 3
     990:	90 91 4e 01 	lds	r25, 0x014E

			EVENT_USB_Host_DeviceEnumerationComplete();
     994:	91 30       	cpi	r25, 0x01	; 1
     996:	41 f0       	breq	.+16     	; 0x9a8 <USB_Host_ProcessNextHostState+0x23c>
			break;
     998:	16 de       	rcall	.-980    	; 0x5c6 <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     99a:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     99e:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     9a0:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     9a4:	71 dd       	rcall	.-1310   	; 0x488 <EVENT_USB_Host_DeviceUnattached>
     9a6:	eb d0       	rcall	.+470    	; 0xb7e <USB_ResetInterface>
     9a8:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16

		USB_ResetInterface();
     9bc:	08 95       	ret

000009be <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     9be:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     9c0:	58 2f       	mov	r21, r24
     9c2:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     9c4:	87 ff       	sbrs	r24, 7
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <Pipe_ConfigurePipe+0xe>
     9c8:	80 e1       	ldi	r24, 0x10	; 16
     9ca:	01 c0       	rjmp	.+2      	; 0x9ce <Pipe_ConfigurePipe+0x10>
     9cc:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     9ce:	57 30       	cpi	r21, 0x07	; 7
     9d0:	08 f0       	brcs	.+2      	; 0x9d4 <Pipe_ConfigurePipe+0x16>
     9d2:	57 c0       	rjmp	.+174    	; 0xa82 <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     9d4:	66 23       	and	r22, r22
     9d6:	09 f4       	brne	.+2      	; 0x9da <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     9d8:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     9da:	4f 70       	andi	r20, 0x0F	; 15
     9dc:	62 95       	swap	r22
     9de:	66 0f       	add	r22, r22
     9e0:	66 0f       	add	r22, r22
     9e2:	60 7c       	andi	r22, 0xC0	; 192
     9e4:	64 2b       	or	r22, r20
     9e6:	68 2b       	or	r22, r24
     9e8:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9ea:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     9ec:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     9f0:	45 17       	cp	r20, r21
     9f2:	a9 f4       	brne	.+42     	; 0xa1e <Pipe_ConfigurePipe+0x60>
     9f4:	04 c0       	rjmp	.+8      	; 0x9fe <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     9f6:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     9f8:	88 0f       	add	r24, r24
     9fa:	99 1f       	adc	r25, r25
     9fc:	03 c0       	rjmp	.+6      	; 0xa04 <Pipe_ConfigurePipe+0x46>
     9fe:	88 e0       	ldi	r24, 0x08	; 8
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     a04:	82 17       	cp	r24, r18
     a06:	93 07       	cpc	r25, r19
     a08:	10 f4       	brcc	.+4      	; 0xa0e <Pipe_ConfigurePipe+0x50>
     a0a:	75 30       	cpi	r23, 0x05	; 5
     a0c:	a1 f7       	brne	.-24     	; 0x9f6 <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     a0e:	87 2f       	mov	r24, r23
     a10:	82 95       	swap	r24
     a12:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     a14:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     a16:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     a18:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     a1a:	e0 e0       	ldi	r30, 0x00	; 0
     a1c:	08 c0       	rjmp	.+16     	; 0xa2e <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     a1e:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     a22:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     a26:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     a2a:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     a2e:	81 ff       	sbrs	r24, 1
     a30:	20 c0       	rjmp	.+64     	; 0xa72 <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a32:	90 91 a9 00 	lds	r25, 0x00A9
     a36:	9e 7f       	andi	r25, 0xFE	; 254
     a38:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     a3c:	90 91 ab 00 	lds	r25, 0x00AB
     a40:	9d 7f       	andi	r25, 0xFD	; 253
     a42:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     a46:	90 91 a9 00 	lds	r25, 0x00A9
     a4a:	91 60       	ori	r25, 0x01	; 1
     a4c:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     a50:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     a54:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     a58:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     a5c:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     a60:	80 91 a9 00 	lds	r24, 0x00A9
     a64:	80 62       	ori	r24, 0x20	; 32
     a66:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a6a:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     a6e:	87 ff       	sbrs	r24, 7
     a70:	08 c0       	rjmp	.+16     	; 0xa82 <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a72:	4f 5f       	subi	r20, 0xFF	; 255
     a74:	47 30       	cpi	r20, 0x07	; 7
     a76:	09 f0       	breq	.+2      	; 0xa7a <Pipe_ConfigurePipe+0xbc>
     a78:	b9 cf       	rjmp	.-142    	; 0x9ec <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a7a:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     a82:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     a84:	0f 91       	pop	r16
     a86:	08 95       	ret

00000a88 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
     a94:	ec 01       	movw	r28, r24
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     a96:	ff 24       	eor	r15, r15
     a98:	0d c0       	rjmp	.+26     	; 0xab4 <Pipe_ConfigurePipeTable+0x2c>
	{
		if (!(Table[i].Address))
     a9a:	88 81       	ld	r24, Y
     a9c:	88 23       	and	r24, r24
     a9e:	41 f0       	breq	.+16     	; 0xab0 <Pipe_ConfigurePipeTable+0x28>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     aa0:	29 81       	ldd	r18, Y+1	; 0x01
     aa2:	3a 81       	ldd	r19, Y+2	; 0x02
     aa4:	6c 81       	ldd	r22, Y+4	; 0x04
     aa6:	4b 81       	ldd	r20, Y+3	; 0x03
     aa8:	0d 81       	ldd	r16, Y+5	; 0x05
     aaa:	89 df       	rcall	.-238    	; 0x9be <Pipe_ConfigurePipe>
     aac:	88 23       	and	r24, r24
     aae:	31 f0       	breq	.+12     	; 0xabc <Pipe_ConfigurePipeTable+0x34>
     ab0:	f3 94       	inc	r15
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     ab2:	26 96       	adiw	r28, 0x06	; 6
     ab4:	f1 16       	cp	r15, r17
     ab6:	89 f7       	brne	.-30     	; 0xa9a <Pipe_ConfigurePipeTable+0x12>
     ab8:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}
	
	return true;
     aba:	01 c0       	rjmp	.+2      	; 0xabe <Pipe_ConfigurePipeTable+0x36>
     abc:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
     abe:	df 91       	pop	r29
		}
	}
	
	return true;
}
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	ff 90       	pop	r15
     ac8:	08 95       	ret

00000aca <Pipe_ClearPipes>:
     aca:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     ad4:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     ad8:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     adc:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     ae0:	90 91 a9 00 	lds	r25, 0x00A9
     ae4:	9e 7f       	andi	r25, 0xFE	; 254
     ae6:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     aea:	8f 5f       	subi	r24, 0xFF	; 255
     aec:	87 30       	cpi	r24, 0x07	; 7
     aee:	81 f7       	brne	.-32     	; 0xad0 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     af0:	08 95       	ret

00000af2 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     af2:	80 91 a2 00 	lds	r24, 0x00A2
     af6:	90 91 a3 00 	lds	r25, 0x00A3
     afa:	45 e6       	ldi	r20, 0x65	; 101
     afc:	01 c0       	rjmp	.+2      	; 0xb00 <Pipe_WaitUntilReady+0xe>
     afe:	c9 01       	movw	r24, r18
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b00:	20 91 aa 00 	lds	r18, 0x00AA
     b04:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     b06:	20 31       	cpi	r18, 0x10	; 16
     b08:	29 f4       	brne	.+10     	; 0xb14 <Pipe_WaitUntilReady+0x22>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     b0a:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     b0e:	20 ff       	sbrs	r18, 0
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <Pipe_WaitUntilReady+0x2a>
     b12:	17 c0       	rjmp	.+46     	; 0xb42 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     b14:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     b18:	22 fd       	sbrc	r18, 2
     b1a:	13 c0       	rjmp	.+38     	; 0xb42 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b1c:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b20:	21 fd       	sbrc	r18, 1
     b22:	11 c0       	rjmp	.+34     	; 0xb46 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b24:	20 91 4e 01 	lds	r18, 0x014E
     b28:	21 30       	cpi	r18, 0x01	; 1
     b2a:	79 f0       	breq	.+30     	; 0xb4a <Pipe_WaitUntilReady+0x58>
     b2c:	20 91 a2 00 	lds	r18, 0x00A2
     b30:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b34:	28 17       	cp	r18, r24
     b36:	39 07       	cpc	r19, r25
     b38:	19 f3       	breq	.-58     	; 0xb00 <Pipe_WaitUntilReady+0xe>
     b3a:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b3c:	01 f7       	brne	.-64     	; 0xafe <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_Timeout;
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	08 95       	ret
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     b4a:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     b4c:	08 95       	ret

00000b4e <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     b4e:	75 d0       	rcall	.+234    	; 0xc3a <USB_INT_DisableAllInterrupts>
     b50:	7c d0       	rcall	.+248    	; 0xc4a <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b52:	e0 ee       	ldi	r30, 0xE0	; 224
     b54:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     b56:	80 81       	ld	r24, Z
     b58:	81 60       	ori	r24, 0x01	; 1
     b5a:	80 83       	st	Z, r24
     b5c:	e8 ed       	ldi	r30, 0xD8	; 216
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     b60:	80 81       	ld	r24, Z
     b62:	8f 77       	andi	r24, 0x7F	; 127
     b64:	80 83       	st	Z, r24
     b66:	19 bc       	out	0x29, r1	; 41
     b68:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b6a:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     b6c:	8c 91       	ld	r24, X
     b6e:	8e 7f       	andi	r24, 0xFE	; 254
     b70:	8c 93       	st	X, r24
     b72:	80 81       	ld	r24, Z
     b74:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     b76:	80 83       	st	Z, r24
     b78:	10 92 45 01 	sts	0x0145, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     b7c:	08 95       	ret

00000b7e <USB_ResetInterface>:
     b7e:	5d d0       	rcall	.+186    	; 0xc3a <USB_INT_DisableAllInterrupts>
}
     b80:	64 d0       	rcall	.+200    	; 0xc4a <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     b82:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     b86:	8f 77       	andi	r24, 0x7F	; 127
     b88:	80 93 d8 00 	sts	0x00D8, r24
     b8c:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     b90:	80 68       	ori	r24, 0x80	; 128
     b92:	80 93 d8 00 	sts	0x00D8, r24
     b96:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     b9a:	8f 7d       	andi	r24, 0xDF	; 223
     b9c:	80 93 d8 00 	sts	0x00D8, r24
     ba0:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     ba4:	8f 77       	andi	r24, 0x7F	; 127
     ba6:	80 93 d7 00 	sts	0x00D7, r24
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     bae:	8e e0       	ldi	r24, 0x0E	; 14
     bb0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     bb2:	09 b4       	in	r0, 0x29	; 41
     bb4:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     bb6:	fd cf       	rjmp	.-6      	; 0xbb2 <USB_ResetInterface+0x34>
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	80 93 4e 01 	sts	0x014E, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     bbe:	10 92 44 01 	sts	0x0144, r1
	USB_Host_ConfigurationNumber = 0;
     bc2:	80 e4       	ldi	r24, 0x40	; 64
     bc4:	80 93 23 01 	sts	0x0123, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     bc8:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     bcc:	80 64       	ori	r24, 0x40	; 64
     bce:	80 93 d8 00 	sts	0x00D8, r24
     bd2:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     bd6:	81 60       	ori	r24, 0x01	; 1
     bd8:	80 93 dd 00 	sts	0x00DD, r24
     bdc:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     be0:	84 60       	ori	r24, 0x04	; 4
     be2:	80 93 dd 00 	sts	0x00DD, r24
     be6:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     bea:	8f 7e       	andi	r24, 0xEF	; 239
     bec:	80 93 d7 00 	sts	0x00D7, r24
     bf0:	6f 9a       	sbi	0x0d, 7	; 13
     bf2:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     bf4:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     bf8:	81 60       	ori	r24, 0x01	; 1
     bfa:	80 93 de 00 	sts	0x00DE, r24
     bfe:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     c02:	84 60       	ori	r24, 0x04	; 4
     c04:	80 93 de 00 	sts	0x00DE, r24
     c08:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c0c:	8e 7f       	andi	r24, 0xFE	; 254
     c0e:	80 93 e0 00 	sts	0x00E0, r24
     c12:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     c16:	80 61       	ori	r24, 0x10	; 16
     c18:	80 93 d8 00 	sts	0x00D8, r24
     c1c:	08 95       	ret

00000c1e <USB_Init>:
     c1e:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     c20:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     c22:	80 81       	ld	r24, Z
     c24:	8f 7e       	andi	r24, 0xEF	; 239
     c26:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     c28:	e7 ed       	ldi	r30, 0xD7	; 215
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	81 60       	ori	r24, 0x01	; 1
     c30:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	80 93 45 01 	sts	0x0145, r24

	USB_ResetInterface();
     c38:	a2 cf       	rjmp	.-188    	; 0xb7e <USB_ResetInterface>

00000c3a <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     c3a:	e8 ed       	ldi	r30, 0xD8	; 216
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	8c 7f       	andi	r24, 0xFC	; 252
     c42:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     c44:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     c48:	08 95       	ret

00000c4a <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     c4a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     c4e:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     c52:	08 95       	ret

00000c54 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c54:	1f 92       	push	r1
     c56:	0f 92       	push	r0
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	0f 92       	push	r0
     c5c:	0b b6       	in	r0, 0x3b	; 59
     c5e:	0f 92       	push	r0
     c60:	11 24       	eor	r1, r1
     c62:	2f 93       	push	r18
     c64:	3f 93       	push	r19
     c66:	4f 93       	push	r20
     c68:	5f 93       	push	r21
     c6a:	6f 93       	push	r22
     c6c:	7f 93       	push	r23
     c6e:	8f 93       	push	r24
     c70:	9f 93       	push	r25
     c72:	af 93       	push	r26
     c74:	bf 93       	push	r27
     c76:	ef 93       	push	r30
     c78:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c7a:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     c7e:	85 ff       	sbrs	r24, 5
     c80:	0a c0       	rjmp	.+20     	; 0xc96 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c82:	80 91 a0 00 	lds	r24, 0x00A0
     c86:	85 ff       	sbrs	r24, 5
     c88:	06 c0       	rjmp	.+12     	; 0xc96 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c8a:	80 91 9f 00 	lds	r24, 0x009F
     c8e:	8f 7d       	andi	r24, 0xDF	; 223
     c90:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     c94:	10 d1       	rcall	.+544    	; 0xeb6 <USB_Event_Stub>
     c96:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     c9a:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     c9c:	15 c0       	rjmp	.+42     	; 0xcc8 <__vector_10+0x74>
     c9e:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     ca2:	81 ff       	sbrs	r24, 1
     ca4:	11 c0       	rjmp	.+34     	; 0xcc8 <__vector_10+0x74>
     ca6:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     caa:	8d 7f       	andi	r24, 0xFD	; 253
     cac:	80 93 9f 00 	sts	0x009F, r24
     cb0:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     cb4:	8e 7f       	andi	r24, 0xFE	; 254
     cb6:	80 93 9f 00 	sts	0x009F, r24
     cba:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     cbe:	8d 7f       	andi	r24, 0xFD	; 253
     cc0:	80 93 a0 00 	sts	0x00A0, r24
     cc4:	e1 db       	rcall	.-2110   	; 0x488 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     cc6:	5b df       	rcall	.-330    	; 0xb7e <USB_ResetInterface>
     cc8:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     ccc:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     cce:	15 c0       	rjmp	.+42     	; 0xcfa <__vector_10+0xa6>
     cd0:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     cd4:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     cd6:	11 c0       	rjmp	.+34     	; 0xcfa <__vector_10+0xa6>
     cd8:	80 91 df 00 	lds	r24, 0x00DF
     cdc:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     cde:	80 93 df 00 	sts	0x00DF, r24
     ce2:	77 98       	cbi	0x0e, 7	; 14
     ce4:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     ce8:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     cea:	80 93 dd 00 	sts	0x00DD, r24
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	4b dc       	rcall	.-1898   	; 0x588 <EVENT_USB_Host_HostError>
     cf2:	ca db       	rcall	.-2156   	; 0x488 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	80 93 4e 01 	sts	0x014E, r24
		EVENT_USB_Host_DeviceUnattached();
     cfa:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     cfe:	80 ff       	sbrs	r24, 0
     d00:	17 c0       	rjmp	.+46     	; 0xd30 <__vector_10+0xdc>
     d02:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     d06:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     d08:	13 c0       	rjmp	.+38     	; 0xd30 <__vector_10+0xdc>
     d0a:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     d0e:	8e 7f       	andi	r24, 0xFE	; 254
     d10:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     d14:	80 91 de 00 	lds	r24, 0x00DE
     d18:	8e 7f       	andi	r24, 0xFE	; 254
     d1a:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     d1e:	ae db       	rcall	.-2212   	; 0x47c <EVENT_USB_Host_DeviceAttached>
     d20:	80 91 a0 00 	lds	r24, 0x00A0
     d24:	82 60       	ori	r24, 0x02	; 2
     d26:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     d2a:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     d2c:	80 93 4e 01 	sts	0x014E, r24
     d30:	80 91 df 00 	lds	r24, 0x00DF
     d34:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     d36:	0e c0       	rjmp	.+28     	; 0xd54 <__vector_10+0x100>
     d38:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     d3c:	82 ff       	sbrs	r24, 2
     d3e:	0a c0       	rjmp	.+20     	; 0xd54 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     d40:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     d44:	8b 7f       	andi	r24, 0xFB	; 251
     d46:	80 93 df 00 	sts	0x00DF, r24
     d4a:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	3b dc       	rcall	.-1930   	; 0x5c6 <EVENT_USB_Host_DeviceEnumerationFailed>
     d50:	9b db       	rcall	.-2250   	; 0x488 <EVENT_USB_Host_DeviceUnattached>
     d52:	15 df       	rcall	.-470    	; 0xb7e <USB_ResetInterface>
     d54:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     d56:	ef 91       	pop	r30
     d58:	bf 91       	pop	r27
     d5a:	af 91       	pop	r26
     d5c:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     d5e:	8f 91       	pop	r24
     d60:	7f 91       	pop	r23

		USB_ResetInterface();
     d62:	6f 91       	pop	r22
     d64:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d66:	4f 91       	pop	r20
     d68:	3f 91       	pop	r19
     d6a:	2f 91       	pop	r18
     d6c:	0f 90       	pop	r0
     d6e:	0b be       	out	0x3b, r0	; 59
     d70:	0f 90       	pop	r0
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	0f 90       	pop	r0
     d76:	1f 90       	pop	r1
     d78:	18 95       	reti

00000d7a <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     d7a:	cf 92       	push	r12
     d7c:	df 92       	push	r13
     d7e:	ef 92       	push	r14
     d80:	ff 92       	push	r15
     d82:	0f 93       	push	r16
     d84:	1f 93       	push	r17
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	29 97       	sbiw	r28, 0x09	; 9
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	f8 94       	cli
     d94:	de bf       	out	0x3e, r29	; 62
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	cd bf       	out	0x3d, r28	; 61
     d9a:	6b 01       	movw	r12, r22
     d9c:	8a 01       	movw	r16, r20
     d9e:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     da0:	90 e8       	ldi	r25, 0x80	; 128
     da2:	90 93 46 01 	sts	0x0146, r25
     da6:	96 e0       	ldi	r25, 0x06	; 6
     da8:	90 93 47 01 	sts	0x0147, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     db2:	90 93 49 01 	sts	0x0149, r25
     db6:	80 93 48 01 	sts	0x0148, r24
     dba:	10 92 4b 01 	sts	0x014B, r1
     dbe:	10 92 4a 01 	sts	0x014A, r1
     dc2:	89 e0       	ldi	r24, 0x09	; 9
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	90 93 4d 01 	sts	0x014D, r25
     dca:	80 93 4c 01 	sts	0x014C, r24
     dce:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     dd2:	ce 01       	movw	r24, r28
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	98 d0       	rcall	.+304    	; 0xf08 <USB_Host_SendControlRequest>
     dd8:	88 23       	and	r24, r24
     dda:	b9 f4       	brne	.+46     	; 0xe0a <USB_Host_GetDeviceConfigDescriptor+0x90>
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	f6 01       	movw	r30, r12
     de2:	91 83       	std	Z+1, r25	; 0x01
     de4:	80 83       	st	Z, r24
     de6:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
     de8:	f9 06       	cpc	r15, r25
     dea:	70 f0       	brcs	.+28     	; 0xe08 <USB_Host_GetDeviceConfigDescriptor+0x8e>
     dec:	90 93 4d 01 	sts	0x014D, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     df0:	80 93 4c 01 	sts	0x014C, r24
     df4:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     df6:	88 d0       	rcall	.+272    	; 0xf08 <USB_Host_SendControlRequest>
     df8:	88 23       	and	r24, r24
     dfa:	39 f4       	brne	.+14     	; 0xe0a <USB_Host_GetDeviceConfigDescriptor+0x90>
     dfc:	f8 01       	movw	r30, r16
     dfe:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     e00:	92 30       	cpi	r25, 0x02	; 2
     e02:	19 f0       	breq	.+6      	; 0xe0a <USB_Host_GetDeviceConfigDescriptor+0x90>
     e04:	86 e0       	ldi	r24, 0x06	; 6
     e06:	01 c0       	rjmp	.+2      	; 0xe0a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     e08:	85 e0       	ldi	r24, 0x05	; 5
     e0a:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     e0c:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     e0e:	f8 94       	cli
     e10:	de bf       	out	0x3e, r29	; 62
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	cd bf       	out	0x3d, r28	; 61
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	ff 90       	pop	r15
     e20:	ef 90       	pop	r14
     e22:	df 90       	pop	r13
     e24:	cf 90       	pop	r12
     e26:	08 95       	ret

00000e28 <USB_GetNextDescriptorComp>:
     e28:	af 92       	push	r10
     e2a:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     e2c:	cf 92       	push	r12
     e2e:	df 92       	push	r13
     e30:	ef 92       	push	r14
     e32:	ff 92       	push	r15
     e34:	0f 93       	push	r16
     e36:	1f 93       	push	r17
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	7c 01       	movw	r14, r24
     e3e:	8b 01       	movw	r16, r22
     e40:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     e42:	28 c0       	rjmp	.+80     	; 0xe94 <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     e44:	f8 01       	movw	r30, r16
     e46:	c0 80       	ld	r12, Z
     e48:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     e4a:	f6 01       	movw	r30, r12
     e4c:	80 81       	ld	r24, Z
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	9e 01       	movw	r18, r28
     e52:	8c 17       	cp	r24, r28
     e54:	9d 07       	cpc	r25, r29
     e56:	08 f4       	brcc	.+2      	; 0xe5a <USB_GetNextDescriptorComp+0x32>
     e58:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     e5a:	c6 01       	movw	r24, r12
     e5c:	82 0f       	add	r24, r18
     e5e:	93 1f       	adc	r25, r19
     e60:	f8 01       	movw	r30, r16
     e62:	91 83       	std	Z+1, r25	; 0x01
     e64:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
     e66:	f7 01       	movw	r30, r14
     e68:	80 81       	ld	r24, Z
     e6a:	91 81       	ldd	r25, Z+1	; 0x01
     e6c:	82 1b       	sub	r24, r18
     e6e:	93 0b       	sbc	r25, r19
     e70:	91 83       	std	Z+1, r25	; 0x01
     e72:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     e74:	f8 01       	movw	r30, r16
     e76:	80 81       	ld	r24, Z
     e78:	91 81       	ldd	r25, Z+1	; 0x01
     e7a:	f5 01       	movw	r30, r10
     e7c:	09 95       	icall
     e7e:	82 30       	cpi	r24, 0x02	; 2
     e80:	49 f0       	breq	.+18     	; 0xe94 <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	69 f4       	brne	.+26     	; 0xea0 <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
     e86:	f8 01       	movw	r30, r16
     e88:	d1 82       	std	Z+1, r13	; 0x01
     e8a:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
     e8c:	f7 01       	movw	r30, r14
     e8e:	d1 83       	std	Z+1, r29	; 0x01
     e90:	c0 83       	st	Z, r28
     e92:	06 c0       	rjmp	.+12     	; 0xea0 <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     e94:	f7 01       	movw	r30, r14
     e96:	c0 81       	ld	r28, Z
     e98:	d1 81       	ldd	r29, Z+1	; 0x01
     e9a:	20 97       	sbiw	r28, 0x00	; 0
     e9c:	99 f6       	brne	.-90     	; 0xe44 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     e9e:	82 e0       	ldi	r24, 0x02	; 2
}
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	1f 91       	pop	r17
     ea6:	0f 91       	pop	r16
     ea8:	ff 90       	pop	r15
     eaa:	ef 90       	pop	r14
     eac:	df 90       	pop	r13
     eae:	cf 90       	pop	r12
     eb0:	bf 90       	pop	r11
     eb2:	af 90       	pop	r10
     eb4:	08 95       	ret

00000eb6 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     eb6:	08 95       	ret

00000eb8 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     ec0:	c9 ee       	ldi	r28, 0xE9	; 233
     ec2:	d3 e0       	ldi	r29, 0x03	; 3
     ec4:	06 c0       	rjmp	.+12     	; 0xed2 <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	fc db       	rcall	.-2056   	; 0x6c2 <USB_Host_WaitMS>
     eca:	88 23       	and	r24, r24
     ecc:	c9 f4       	brne	.+50     	; 0xf00 <USB_Host_WaitForIOS+0x48>
     ece:	21 97       	sbiw	r28, 0x01	; 1
     ed0:	b1 f0       	breq	.+44     	; 0xefe <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     ed2:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     ed4:	29 f4       	brne	.+10     	; 0xee0 <USB_Host_WaitForIOS+0x28>
     ed6:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     eda:	83 ff       	sbrs	r24, 3
     edc:	f4 cf       	rjmp	.-24     	; 0xec6 <USB_Host_WaitForIOS+0xe>
     ede:	0d c0       	rjmp	.+26     	; 0xefa <USB_Host_WaitForIOS+0x42>
     ee0:	11 30       	cpi	r17, 0x01	; 1
     ee2:	29 f4       	brne	.+10     	; 0xeee <USB_Host_WaitForIOS+0x36>
     ee4:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     ee8:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     eea:	ed cf       	rjmp	.-38     	; 0xec6 <USB_Host_WaitForIOS+0xe>
     eec:	06 c0       	rjmp	.+12     	; 0xefa <USB_Host_WaitForIOS+0x42>
     eee:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     ef0:	51 f7       	brne	.-44     	; 0xec6 <USB_Host_WaitForIOS+0xe>
     ef2:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     ef6:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     ef8:	e6 cf       	rjmp	.-52     	; 0xec6 <USB_Host_WaitForIOS+0xe>
     efa:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     efc:	01 c0       	rjmp	.+2      	; 0xf00 <USB_Host_WaitForIOS+0x48>
     efe:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     f00:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	08 95       	ret

00000f08 <USB_Host_SendControlRequest>:
     f08:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     f0a:	ff 92       	push	r15
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f16:	e0 90 9e 00 	lds	r14, 0x009E
     f1a:	ff 24       	eor	r15, r15
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	e8 22       	and	r14, r24
     f20:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     f22:	00 91 4c 01 	lds	r16, 0x014C
     f26:	10 91 4d 01 	lds	r17, 0x014D
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f2a:	80 91 9e 00 	lds	r24, 0x009E
     f2e:	81 60       	ori	r24, 0x01	; 1
     f30:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	c5 db       	rcall	.-2166   	; 0x6c2 <USB_Host_WaitMS>
     f38:	88 23       	and	r24, r24
     f3a:	09 f0       	breq	.+2      	; 0xf3e <USB_Host_SendControlRequest+0x36>
     f3c:	ca c0       	rjmp	.+404    	; 0x10d2 <USB_Host_SendControlRequest+0x1ca>
     f3e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f42:	8f 7c       	andi	r24, 0xCF	; 207
     f44:	80 93 aa 00 	sts	0x00AA, r24
     f48:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     f4c:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
     f50:	8f 7e       	andi	r24, 0xEF	; 239
     f52:	80 93 a6 00 	sts	0x00A6, r24
     f56:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f5a:	8f 7b       	andi	r24, 0xBF	; 191
     f5c:	80 93 a9 00 	sts	0x00A9, r24
     f60:	88 e0       	ldi	r24, 0x08	; 8
     f62:	e6 e4       	ldi	r30, 0x46	; 70
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
     f64:	f1 e0       	ldi	r31, 0x01	; 1
     f66:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     f68:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     f6c:	81 50       	subi	r24, 0x01	; 1
     f6e:	d9 f7       	brne	.-10     	; 0xf66 <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     f70:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     f74:	87 77       	andi	r24, 0x77	; 119
     f76:	80 93 a6 00 	sts	0x00A6, r24
     f7a:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     f7c:	9d df       	rcall	.-198    	; 0xeb8 <USB_Host_WaitForIOS>
     f7e:	88 23       	and	r24, r24
     f80:	09 f0       	breq	.+2      	; 0xf84 <USB_Host_SendControlRequest+0x7c>
     f82:	a7 c0       	rjmp	.+334    	; 0x10d2 <USB_Host_SendControlRequest+0x1ca>
     f84:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f88:	80 64       	ori	r24, 0x40	; 64
     f8a:	80 93 a9 00 	sts	0x00A9, r24
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	98 db       	rcall	.-2256   	; 0x6c2 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f92:	88 23       	and	r24, r24
     f94:	09 f0       	breq	.+2      	; 0xf98 <USB_Host_SendControlRequest+0x90>
     f96:	9d c0       	rjmp	.+314    	; 0x10d2 <USB_Host_SendControlRequest+0x1ca>
     f98:	80 91 46 01 	lds	r24, 0x0146
     f9c:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     f9e:	4f c0       	rjmp	.+158    	; 0x103e <USB_Host_SendControlRequest+0x136>
     fa0:	80 91 aa 00 	lds	r24, 0x00AA
     fa4:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fa6:	80 61       	ori	r24, 0x10	; 16
     fa8:	80 93 aa 00 	sts	0x00AA, r24
     fac:	20 97       	sbiw	r28, 0x00	; 0
     fae:	61 f5       	brne	.+88     	; 0x1008 <USB_Host_SendControlRequest+0x100>
     fb0:	2e c0       	rjmp	.+92     	; 0x100e <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     fb2:	80 91 a9 00 	lds	r24, 0x00A9
     fb6:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fb8:	80 93 a9 00 	sts	0x00A9, r24
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	7c df       	rcall	.-264    	; 0xeb8 <USB_Host_WaitForIOS>
     fc0:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <USB_Host_SendControlRequest+0xbe>
     fc4:	86 c0       	rjmp	.+268    	; 0x10d2 <USB_Host_SendControlRequest+0x1ca>
     fc6:	80 91 f6 00 	lds	r24, 0x00F6
     fca:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	41 f4       	brne	.+16     	; 0xfe2 <USB_Host_SendControlRequest+0xda>
     fd2:	00 e0       	ldi	r16, 0x00	; 0
     fd4:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
     fd6:	05 c0       	rjmp	.+10     	; 0xfe2 <USB_Host_SendControlRequest+0xda>
     fd8:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
     fdc:	89 93       	st	Y+, r24
     fde:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     fe0:	10 40       	sbci	r17, 0x00	; 0
     fe2:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
     fe6:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	19 f0       	breq	.+6      	; 0xff4 <USB_Host_SendControlRequest+0xec>
     fee:	01 15       	cp	r16, r1
     ff0:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     ff2:	91 f7       	brne	.-28     	; 0xfd8 <USB_Host_SendControlRequest+0xd0>
     ff4:	80 91 a9 00 	lds	r24, 0x00A9
     ff8:	80 64       	ori	r24, 0x40	; 64
     ffa:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ffe:	80 91 a6 00 	lds	r24, 0x00A6
    1002:	8e 77       	andi	r24, 0x7E	; 126
    1004:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1008:	01 15       	cp	r16, r1
    100a:	11 05       	cpc	r17, r1
    100c:	91 f6       	brne	.-92     	; 0xfb2 <USB_Host_SendControlRequest+0xaa>
    100e:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1012:	8f 7c       	andi	r24, 0xCF	; 207
    1014:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1016:	80 93 aa 00 	sts	0x00AA, r24
    101a:	80 91 a9 00 	lds	r24, 0x00A9
    101e:	8f 7b       	andi	r24, 0xBF	; 191
    1020:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	48 df       	rcall	.-368    	; 0xeb8 <USB_Host_WaitForIOS>
    1028:	88 23       	and	r24, r24
    102a:	09 f0       	breq	.+2      	; 0x102e <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    102c:	52 c0       	rjmp	.+164    	; 0x10d2 <USB_Host_SendControlRequest+0x1ca>
    102e:	80 91 a6 00 	lds	r24, 0x00A6
    1032:	8b 77       	andi	r24, 0x7B	; 123
    1034:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1038:	82 e0       	ldi	r24, 0x02	; 2
    103a:	3e df       	rcall	.-388    	; 0xeb8 <USB_Host_WaitForIOS>
    103c:	4a c0       	rjmp	.+148    	; 0x10d2 <USB_Host_SendControlRequest+0x1ca>
    103e:	20 97       	sbiw	r28, 0x00	; 0
    1040:	a1 f1       	breq	.+104    	; 0x10aa <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1042:	80 91 aa 00 	lds	r24, 0x00AA
    1046:	8f 7c       	andi	r24, 0xCF	; 207
    1048:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    104a:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    104e:	80 91 a9 00 	lds	r24, 0x00A9
    1052:	8f 7b       	andi	r24, 0xBF	; 191
    1054:	80 93 a9 00 	sts	0x00A9, r24
    1058:	1c c0       	rjmp	.+56     	; 0x1092 <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    105a:	2e df       	rcall	.-420    	; 0xeb8 <USB_Host_WaitForIOS>
    105c:	88 23       	and	r24, r24
    105e:	c9 f5       	brne	.+114    	; 0x10d2 <USB_Host_SendControlRequest+0x1ca>
    1060:	fe 01       	movw	r30, r28
    1062:	07 c0       	rjmp	.+14     	; 0x1072 <USB_Host_SendControlRequest+0x16a>
    1064:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1066:	ef 01       	movw	r28, r30
    1068:	80 93 af 00 	sts	0x00AF, r24
    106c:	01 50       	subi	r16, 0x01	; 1
    106e:	10 40       	sbci	r17, 0x00	; 0
    1070:	59 f0       	breq	.+22     	; 0x1088 <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1072:	ef 01       	movw	r28, r30
    1074:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1078:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    107c:	80 91 23 01 	lds	r24, 0x0123
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1080:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1082:	28 17       	cp	r18, r24
    1084:	39 07       	cpc	r19, r25
    1086:	70 f3       	brcs	.-36     	; 0x1064 <USB_Host_SendControlRequest+0x15c>
    1088:	80 91 a6 00 	lds	r24, 0x00A6
    108c:	8b 77       	andi	r24, 0x7B	; 123
    108e:	80 93 a6 00 	sts	0x00A6, r24
    1092:	82 e0       	ldi	r24, 0x02	; 2
    1094:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1096:	11 05       	cpc	r17, r1
    1098:	01 f7       	brne	.-64     	; 0x105a <USB_Host_SendControlRequest+0x152>
    109a:	0e df       	rcall	.-484    	; 0xeb8 <USB_Host_WaitForIOS>
    109c:	88 23       	and	r24, r24
    109e:	c9 f4       	brne	.+50     	; 0x10d2 <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10a0:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    10a4:	80 64       	ori	r24, 0x40	; 64
    10a6:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10aa:	80 91 aa 00 	lds	r24, 0x00AA
    10ae:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10b0:	80 61       	ori	r24, 0x10	; 16
    10b2:	80 93 aa 00 	sts	0x00AA, r24
    10b6:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10ba:	8f 7b       	andi	r24, 0xBF	; 191
    10bc:	80 93 a9 00 	sts	0x00A9, r24
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	fa de       	rcall	.-524    	; 0xeb8 <USB_Host_WaitForIOS>
    10c4:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10c6:	29 f4       	brne	.+10     	; 0x10d2 <USB_Host_SendControlRequest+0x1ca>
    10c8:	90 91 a6 00 	lds	r25, 0x00A6
    10cc:	9e 77       	andi	r25, 0x7E	; 126
    10ce:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    10d2:	90 91 a9 00 	lds	r25, 0x00A9
    10d6:	90 64       	ori	r25, 0x40	; 64
    10d8:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10dc:	e1 14       	cp	r14, r1
    10de:	f1 04       	cpc	r15, r1
    10e0:	29 f4       	brne	.+10     	; 0x10ec <USB_Host_SendControlRequest+0x1e4>
    10e2:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10e6:	9e 7f       	andi	r25, 0xFE	; 254
    10e8:	90 93 9e 00 	sts	0x009E, r25
    10ec:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    10ee:	90 93 a8 00 	sts	0x00A8, r25
    10f2:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    10fe:	ff 90       	pop	r15
    1100:	ef 90       	pop	r14
    1102:	08 95       	ret

00001104 <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    1104:	cf 93       	push	r28
    1106:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1108:	10 92 46 01 	sts	0x0146, r1
    110c:	89 e0       	ldi	r24, 0x09	; 9
    110e:	80 93 47 01 	sts	0x0147, r24
    1112:	c0 93 48 01 	sts	0x0148, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1116:	10 92 49 01 	sts	0x0149, r1
    111a:	10 92 4b 01 	sts	0x014B, r1
    111e:	10 92 4a 01 	sts	0x014A, r1
    1122:	10 92 4d 01 	sts	0x014D, r1
    1126:	10 92 4c 01 	sts	0x014C, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    112a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	ea de       	rcall	.-556    	; 0xf08 <USB_Host_SendControlRequest>
    1134:	88 23       	and	r24, r24
    1136:	49 f4       	brne	.+18     	; 0x114a <USB_Host_SetDeviceConfiguration+0x46>
    1138:	c0 93 44 01 	sts	0x0144, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    113c:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    113e:	11 f0       	breq	.+4      	; 0x1144 <USB_Host_SetDeviceConfiguration+0x40>
    1140:	9b e0       	ldi	r25, 0x0B	; 11
    1142:	01 c0       	rjmp	.+2      	; 0x1146 <USB_Host_SetDeviceConfiguration+0x42>
    1144:	9a e0       	ldi	r25, 0x0A	; 10
    1146:	90 93 4e 01 	sts	0x014E, r25
    114a:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    114c:	08 95       	ret

0000114e <USB_Host_SetInterfaceAltSetting>:
    114e:	e6 e4       	ldi	r30, 0x46	; 70
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1150:	f1 e0       	ldi	r31, 0x01	; 1
    1152:	91 e0       	ldi	r25, 0x01	; 1
    1154:	90 93 46 01 	sts	0x0146, r25
    1158:	9b e0       	ldi	r25, 0x0B	; 11
    115a:	90 93 47 01 	sts	0x0147, r25
    115e:	60 93 48 01 	sts	0x0148, r22
    1162:	13 82       	std	Z+3, r1	; 0x03
    1164:	80 93 4a 01 	sts	0x014A, r24
    1168:	15 82       	std	Z+5, r1	; 0x05
    116a:	10 92 4d 01 	sts	0x014D, r1
    116e:	10 92 4c 01 	sts	0x014C, r1
    1172:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	c6 ce       	rjmp	.-628    	; 0xf08 <USB_Host_SendControlRequest>

0000117c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    117c:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    117e:	c0 91 a7 00 	lds	r28, 0x00A7
    1182:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1184:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1188:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    118c:	ef da       	rcall	.-2594   	; 0x76c <USB_Host_ProcessNextHostState>
    118e:	c0 93 a7 00 	sts	0x00A7, r28
    1192:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1194:	08 95       	ret

00001196 <DCOMP_Audio_Host_NextAudioControlInterface>:

	return AUDIO_ENUMERROR_NoError;
}

static uint8_t DCOMP_Audio_Host_NextAudioControlInterface(void* CurrentDescriptor)
{
    1196:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1198:	81 81       	ldd	r24, Z+1	; 0x01
    119a:	84 30       	cpi	r24, 0x04	; 4
    119c:	49 f4       	brne	.+18     	; 0x11b0 <DCOMP_Audio_Host_NextAudioControlInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
    119e:	85 81       	ldd	r24, Z+5	; 0x05
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	31 f4       	brne	.+12     	; 0x11b0 <DCOMP_Audio_Host_NextAudioControlInterface+0x1a>
    11a4:	86 81       	ldd	r24, Z+6	; 0x06
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	19 f4       	brne	.+6      	; 0x11b0 <DCOMP_Audio_Host_NextAudioControlInterface+0x1a>
		    (Interface->SubClass == AUDIO_CSCP_ControlSubclass) &&
    11aa:	87 81       	ldd	r24, Z+7	; 0x07
    11ac:	88 23       	and	r24, r24
    11ae:	11 f0       	breq	.+4      	; 0x11b4 <DCOMP_Audio_Host_NextAudioControlInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    11b0:	82 e0       	ldi	r24, 0x02	; 2
    11b2:	08 95       	ret

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
		    (Interface->SubClass == AUDIO_CSCP_ControlSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_ControlProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    11b4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    11b6:	08 95       	ret

000011b8 <DCOMP_Audio_Host_NextAudioStreamInterface>:

static uint8_t DCOMP_Audio_Host_NextAudioStreamInterface(void* CurrentDescriptor)
{
    11b8:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    11ba:	81 81       	ldd	r24, Z+1	; 0x01
    11bc:	84 30       	cpi	r24, 0x04	; 4
    11be:	49 f4       	brne	.+18     	; 0x11d2 <DCOMP_Audio_Host_NextAudioStreamInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
    11c0:	85 81       	ldd	r24, Z+5	; 0x05
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	31 f4       	brne	.+12     	; 0x11d2 <DCOMP_Audio_Host_NextAudioStreamInterface+0x1a>
    11c6:	86 81       	ldd	r24, Z+6	; 0x06
    11c8:	82 30       	cpi	r24, 0x02	; 2
    11ca:	19 f4       	brne	.+6      	; 0x11d2 <DCOMP_Audio_Host_NextAudioStreamInterface+0x1a>
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
    11cc:	87 81       	ldd	r24, Z+7	; 0x07
    11ce:	88 23       	and	r24, r24
    11d0:	11 f0       	breq	.+4      	; 0x11d6 <DCOMP_Audio_Host_NextAudioStreamInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    11d2:	82 e0       	ldi	r24, 0x02	; 2
    11d4:	08 95       	ret

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_StreamingProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    11d6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    11d8:	08 95       	ret

000011da <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint>:

static uint8_t DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint(void* CurrentDescriptor)
{
    11da:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    11dc:	81 81       	ldd	r24, Z+1	; 0x01
    11de:	85 30       	cpi	r24, 0x05	; 5
    11e0:	29 f4       	brne	.+10     	; 0x11ec <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
    11e2:	83 81       	ldd	r24, Z+3	; 0x03
    11e4:	83 70       	andi	r24, 0x03	; 3
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	19 f4       	brne	.+6      	; 0x11f0 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x16>
    11ea:	04 c0       	rjmp	.+8      	; 0x11f4 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x1a>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    11ec:	84 30       	cpi	r24, 0x04	; 4
    11ee:	21 f0       	breq	.+8      	; 0x11f8 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x1e>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    11f0:	82 e0       	ldi	r24, 0x02	; 2
    11f2:	08 95       	ret
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
		  return DESCRIPTOR_SEARCH_Found;
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    11f8:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    11fa:	08 95       	ret

000011fc <Audio_Host_ConfigurePipes>:
#include "AudioClassHost.h"

uint8_t Audio_Host_ConfigurePipes(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo,
                                  uint16_t ConfigDescriptorSize,
                                  void* ConfigDescriptorData)
{
    11fc:	8f 92       	push	r8
    11fe:	9f 92       	push	r9
    1200:	af 92       	push	r10
    1202:	bf 92       	push	r11
    1204:	cf 92       	push	r12
    1206:	df 92       	push	r13
    1208:	ef 92       	push	r14
    120a:	ff 92       	push	r15
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	00 d0       	rcall	.+0      	; 0x1216 <Audio_Host_ConfigurePipes+0x1a>
    1216:	00 d0       	rcall	.+0      	; 0x1218 <Audio_Host_ConfigurePipes+0x1c>
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	8c 01       	movw	r16, r24
    121e:	7a 83       	std	Y+2, r23	; 0x02
    1220:	69 83       	std	Y+1, r22	; 0x01
    1222:	fa 01       	movw	r30, r20
    1224:	5c 83       	std	Y+4, r21	; 0x04
    1226:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint          = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint         = NULL;
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;

	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));
    1228:	dc 01       	movw	r26, r24
    122a:	1c 96       	adiw	r26, 0x0c	; 12
    122c:	1d 92       	st	X+, r1
    122e:	1d 92       	st	X+, r1
    1230:	1d 92       	st	X+, r1
    1232:	1c 92       	st	X, r1
    1234:	1f 97       	sbiw	r26, 0x0f	; 15

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1236:	81 81       	ldd	r24, Z+1	; 0x01
    1238:	82 30       	cpi	r24, 0x02	; 2
    123a:	09 f0       	breq	.+2      	; 0x123e <Audio_Host_ConfigurePipes+0x42>
    123c:	8d c0       	rjmp	.+282    	; 0x1358 <Audio_Host_ConfigurePipes+0x15c>
    123e:	88 24       	eor	r8, r8
    1240:	99 24       	eor	r9, r9
    1242:	aa 24       	eor	r10, r10
    1244:	bb 24       	eor	r11, r11
    1246:	29 c0       	rjmp	.+82     	; 0x129a <Audio_Host_ConfigurePipes+0x9e>
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
	       (AudioInterfaceInfo->Config.DataOUTPipe.Address && !(DataOUTEndpoint)))
	{
		if (!(AudioControlInterface) ||
    1248:	a1 14       	cp	r10, r1
    124a:	b1 04       	cpc	r11, r1
    124c:	61 f0       	breq	.+24     	; 0x1266 <Audio_Host_ConfigurePipes+0x6a>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    124e:	ce 01       	movw	r24, r28
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	be 01       	movw	r22, r28
    1254:	6d 5f       	subi	r22, 0xFD	; 253
    1256:	7f 4f       	sbci	r23, 0xFF	; 255
    1258:	4d ee       	ldi	r20, 0xED	; 237
    125a:	58 e0       	ldi	r21, 0x08	; 8
    125c:	e5 dd       	rcall	.-1078   	; 0xe28 <USB_GetNextDescriptorComp>
    125e:	88 23       	and	r24, r24
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
	       (AudioInterfaceInfo->Config.DataOUTPipe.Address && !(DataOUTEndpoint)))
	{
		if (!(AudioControlInterface) ||
    1260:	09 f0       	breq	.+2      	; 0x1264 <Audio_Host_ConfigurePipes+0x68>
    1262:	90 c0       	rjmp	.+288    	; 0x1384 <Audio_Host_ConfigurePipes+0x188>
    1264:	1f c0       	rjmp	.+62     	; 0x12a4 <Audio_Host_ConfigurePipes+0xa8>
    1266:	ce 01       	movw	r24, r28
		{
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_Audio_Host_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1268:	01 96       	adiw	r24, 0x01	; 1
    126a:	be 01       	movw	r22, r28
    126c:	6d 5f       	subi	r22, 0xFD	; 253
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	4b ec       	ldi	r20, 0xCB	; 203
    1272:	58 e0       	ldi	r21, 0x08	; 8
    1274:	d9 dd       	rcall	.-1102   	; 0xe28 <USB_GetNextDescriptorComp>
    1276:	88 23       	and	r24, r24
    1278:	09 f0       	breq	.+2      	; 0x127c <Audio_Host_ConfigurePipes+0x80>
    127a:	70 c0       	rjmp	.+224    	; 0x135c <Audio_Host_ConfigurePipes+0x160>
    127c:	ab 80       	ldd	r10, Y+3	; 0x03
    127e:	bc 80       	ldd	r11, Y+4	; 0x04
				                              DCOMP_Audio_Host_NextAudioControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
				}

				AudioControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1280:	ce 01       	movw	r24, r28
    1282:	01 96       	adiw	r24, 0x01	; 1

				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1284:	be 01       	movw	r22, r28
    1286:	6d 5f       	subi	r22, 0xFD	; 253
    1288:	7f 4f       	sbci	r23, 0xFF	; 255
    128a:	4c ed       	ldi	r20, 0xDC	; 220
    128c:	58 e0       	ldi	r21, 0x08	; 8
    128e:	cc dd       	rcall	.-1128   	; 0xe28 <USB_GetNextDescriptorComp>
    1290:	88 23       	and	r24, r24
    1292:	09 f0       	breq	.+2      	; 0x1296 <Audio_Host_ConfigurePipes+0x9a>
    1294:	63 c0       	rjmp	.+198    	; 0x135c <Audio_Host_ConfigurePipes+0x160>
    1296:	8b 80       	ldd	r8, Y+3	; 0x03
    1298:	9c 80       	ldd	r9, Y+4	; 0x04
    129a:	cc 24       	eor	r12, r12
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
				}
			}

			AudioStreamingInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    129c:	dd 24       	eor	r13, r13
    129e:	ee 24       	eor	r14, r14

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    12a0:	ff 24       	eor	r15, r15
    12a2:	08 c0       	rjmp	.+16     	; 0x12b4 <Audio_Host_ConfigurePipes+0xb8>
				}
			}

			AudioStreamingInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

			DataINEndpoint  = NULL;
    12a4:	eb 81       	ldd	r30, Y+3	; 0x03
    12a6:	fc 81       	ldd	r31, Y+4	; 0x04
			DataOUTEndpoint = NULL;

			continue;
    12a8:	82 81       	ldd	r24, Z+2	; 0x02
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    12aa:	87 ff       	sbrs	r24, 7
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <Audio_Host_ConfigurePipes+0xb6>

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    12ae:	7f 01       	movw	r14, r30
    12b0:	01 c0       	rjmp	.+2      	; 0x12b4 <Audio_Host_ConfigurePipes+0xb8>
    12b2:	6f 01       	movw	r12, r30
		  DataINEndpoint  = EndpointData;
    12b4:	f8 01       	movw	r30, r16
    12b6:	80 81       	ld	r24, Z
		else
		  DataOUTEndpoint = EndpointData;
    12b8:	88 23       	and	r24, r24
	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
    12ba:	21 f0       	breq	.+8      	; 0x12c4 <Audio_Host_ConfigurePipes+0xc8>
    12bc:	e1 14       	cp	r14, r1
    12be:	f1 04       	cpc	r15, r1
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <Audio_Host_ConfigurePipes+0xc8>
    12c2:	c2 cf       	rjmp	.-124    	; 0x1248 <Audio_Host_ConfigurePipes+0x4c>
    12c4:	d8 01       	movw	r26, r16
    12c6:	16 96       	adiw	r26, 0x06	; 6
    12c8:	8c 91       	ld	r24, X
    12ca:	16 97       	sbiw	r26, 0x06	; 6
    12cc:	88 23       	and	r24, r24
    12ce:	21 f0       	breq	.+8      	; 0x12d8 <Audio_Host_ConfigurePipes+0xdc>
    12d0:	c1 14       	cp	r12, r1
    12d2:	d1 04       	cpc	r13, r1
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <Audio_Host_ConfigurePipes+0xdc>
	       (AudioInterfaceInfo->Config.DataOUTPipe.Address && !(DataOUTEndpoint)))
    12d6:	b8 cf       	rjmp	.-144    	; 0x1248 <Audio_Host_ConfigurePipes+0x4c>
    12d8:	f7 01       	movw	r30, r14
    12da:	84 81       	ldd	r24, Z+4	; 0x04
    12dc:	95 81       	ldd	r25, Z+5	; 0x05
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	AudioInterfaceInfo->Config.DataINPipe.Size   = le16_to_cpu(DataINEndpoint->EndpointSize);
    12de:	d8 01       	movw	r26, r16
    12e0:	12 96       	adiw	r26, 0x02	; 2
    12e2:	9c 93       	st	X, r25
    12e4:	8e 93       	st	-X, r24
    12e6:	11 97       	sbiw	r26, 0x01	; 1
    12e8:	82 81       	ldd	r24, Z+2	; 0x02
    12ea:	13 96       	adiw	r26, 0x03	; 3
    12ec:	8c 93       	st	X, r24
	AudioInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    12ee:	13 97       	sbiw	r26, 0x03	; 3
    12f0:	ee 24       	eor	r14, r14
    12f2:	e3 94       	inc	r14
    12f4:	14 96       	adiw	r26, 0x04	; 4
	AudioInterfaceInfo->Config.DataINPipe.Type   = EP_TYPE_ISOCHRONOUS;
    12f6:	ec 92       	st	X, r14
    12f8:	14 97       	sbiw	r26, 0x04	; 4
    12fa:	22 e0       	ldi	r18, 0x02	; 2
    12fc:	15 96       	adiw	r26, 0x05	; 5
    12fe:	2c 93       	st	X, r18
	AudioInterfaceInfo->Config.DataINPipe.Banks  = 2;
    1300:	15 97       	sbiw	r26, 0x05	; 5
    1302:	f6 01       	movw	r30, r12
    1304:	84 81       	ldd	r24, Z+4	; 0x04
    1306:	95 81       	ldd	r25, Z+5	; 0x05
	
	AudioInterfaceInfo->Config.DataOUTPipe.Size  = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1308:	18 96       	adiw	r26, 0x08	; 8
    130a:	9c 93       	st	X, r25
    130c:	8e 93       	st	-X, r24
    130e:	17 97       	sbiw	r26, 0x07	; 7
    1310:	82 81       	ldd	r24, Z+2	; 0x02
    1312:	19 96       	adiw	r26, 0x09	; 9
    1314:	8c 93       	st	X, r24
	AudioInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1316:	19 97       	sbiw	r26, 0x09	; 9
    1318:	1a 96       	adiw	r26, 0x0a	; 10
    131a:	ec 92       	st	X, r14
    131c:	1a 97       	sbiw	r26, 0x0a	; 10
	AudioInterfaceInfo->Config.DataOUTPipe.Type  = EP_TYPE_ISOCHRONOUS;
    131e:	1b 96       	adiw	r26, 0x0b	; 11
    1320:	2c 93       	st	X, r18
    1322:	c8 01       	movw	r24, r16
	AudioInterfaceInfo->Config.DataOUTPipe.Banks = 2;
    1324:	61 e0       	ldi	r22, 0x01	; 1
    1326:	b0 db       	rcall	.-2208   	; 0xa88 <Pipe_ConfigurePipeTable>
	
	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataINPipe, 1)))
    1328:	88 23       	and	r24, r24
    132a:	d1 f0       	breq	.+52     	; 0x1360 <Audio_Host_ConfigurePipes+0x164>
    132c:	c8 01       	movw	r24, r16
    132e:	06 96       	adiw	r24, 0x06	; 6
    1330:	61 e0       	ldi	r22, 0x01	; 1
    1332:	aa db       	rcall	.-2220   	; 0xa88 <Pipe_ConfigurePipeTable>
	  return false;
	
	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataOUTPipe, 1)))
    1334:	88 23       	and	r24, r24
    1336:	a1 f0       	breq	.+40     	; 0x1360 <Audio_Host_ConfigurePipes+0x164>
    1338:	d5 01       	movw	r26, r10
    133a:	12 96       	adiw	r26, 0x02	; 2
    133c:	8c 91       	ld	r24, X
    133e:	f8 01       	movw	r30, r16
    1340:	85 87       	std	Z+13, r24	; 0x0d
	  return false;

	AudioInterfaceInfo->State.ControlInterfaceNumber    = AudioControlInterface->InterfaceNumber;
    1342:	d4 01       	movw	r26, r8
    1344:	12 96       	adiw	r26, 0x02	; 2
    1346:	8c 91       	ld	r24, X
    1348:	12 97       	sbiw	r26, 0x02	; 2
    134a:	86 87       	std	Z+14, r24	; 0x0e
	AudioInterfaceInfo->State.StreamingInterfaceNumber  = AudioStreamingInterface->InterfaceNumber;
    134c:	13 96       	adiw	r26, 0x03	; 3
    134e:	8c 91       	ld	r24, X
    1350:	13 97       	sbiw	r26, 0x03	; 3
    1352:	87 87       	std	Z+15, r24	; 0x0f
    1354:	e4 86       	std	Z+12, r14	; 0x0c
	AudioInterfaceInfo->State.EnabledStreamingAltIndex  = AudioStreamingInterface->AlternateSetting;
    1356:	04 c0       	rjmp	.+8      	; 0x1360 <Audio_Host_ConfigurePipes+0x164>
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	03 c0       	rjmp	.+6      	; 0x1362 <Audio_Host_ConfigurePipes+0x166>
    135c:	82 e0       	ldi	r24, 0x02	; 2
	AudioInterfaceInfo->State.IsActive = true;
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <Audio_Host_ConfigurePipes+0x166>
    1360:	80 e0       	ldi	r24, 0x00	; 0
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;

	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
				AudioControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
				                              DCOMP_Audio_Host_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
	
	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataINPipe, 1)))
	  return false;
	
	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataOUTPipe, 1)))
	  return false;
    136a:	df 91       	pop	r29
	AudioInterfaceInfo->State.StreamingInterfaceNumber  = AudioStreamingInterface->InterfaceNumber;
	AudioInterfaceInfo->State.EnabledStreamingAltIndex  = AudioStreamingInterface->AlternateSetting;
	AudioInterfaceInfo->State.IsActive = true;

	return AUDIO_ENUMERROR_NoError;
}
    136c:	cf 91       	pop	r28
    136e:	1f 91       	pop	r17
    1370:	0f 91       	pop	r16
    1372:	ff 90       	pop	r15
    1374:	ef 90       	pop	r14
    1376:	df 90       	pop	r13
    1378:	cf 90       	pop	r12
    137a:	bf 90       	pop	r11
    137c:	af 90       	pop	r10
    137e:	9f 90       	pop	r9
    1380:	8f 90       	pop	r8
    1382:	08 95       	ret
    1384:	ce 01       	movw	r24, r28
    1386:	01 96       	adiw	r24, 0x01	; 1
    1388:	be 01       	movw	r22, r28
    138a:	6d 5f       	subi	r22, 0xFD	; 253
    138c:	7f 4f       	sbci	r23, 0xFF	; 255
		if (!(AudioControlInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    138e:	4c ed       	ldi	r20, 0xDC	; 220
    1390:	58 e0       	ldi	r21, 0x08	; 8
    1392:	4a dd       	rcall	.-1388   	; 0xe28 <USB_GetNextDescriptorComp>
    1394:	88 23       	and	r24, r24
    1396:	09 f0       	breq	.+2      	; 0x139a <Audio_Host_ConfigurePipes+0x19e>
    1398:	66 cf       	rjmp	.-308    	; 0x1266 <Audio_Host_ConfigurePipes+0x6a>
    139a:	7d cf       	rjmp	.-262    	; 0x1296 <Audio_Host_ConfigurePipes+0x9a>

0000139c <Audio_Host_StartStopStreaming>:
    139c:	fc 01       	movw	r30, r24
    139e:	84 85       	ldd	r24, Z+12	; 0x0c
	{
		if (!(AudioControlInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (!(AudioControlInterface) ||
    13a0:	88 23       	and	r24, r24
    13a2:	39 f0       	breq	.+14     	; 0x13b2 <Audio_Host_StartStopStreaming+0x16>
    13a4:	86 85       	ldd	r24, Z+14	; 0x0e
    13a6:	66 23       	and	r22, r22
			                          const bool EnableStreaming)
{
	if (!(AudioInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;

	return USB_Host_SetInterfaceAltSetting(AudioInterfaceInfo->State.StreamingInterfaceNumber,
    13a8:	11 f0       	breq	.+4      	; 0x13ae <Audio_Host_StartStopStreaming+0x12>
    13aa:	67 85       	ldd	r22, Z+15	; 0x0f
    13ac:	01 c0       	rjmp	.+2      	; 0x13b0 <Audio_Host_StartStopStreaming+0x14>
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	ce ce       	rjmp	.-612    	; 0x114e <USB_Host_SetInterfaceAltSetting>
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	08 95       	ret

000013b6 <Audio_Host_GetSetEndpointProperty>:

uint8_t Audio_Host_StartStopStreaming(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo,
			                          const bool EnableStreaming)
{
	if (!(AudioInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    13b6:	ef 92       	push	r14

	return USB_Host_SetInterfaceAltSetting(AudioInterfaceInfo->State.StreamingInterfaceNumber,
	                                       EnableStreaming ? AudioInterfaceInfo->State.EnabledStreamingAltIndex : 0);
}
    13b8:	ff 92       	push	r15
			                              const uint8_t DataPipeIndex,
			                              const uint8_t EndpointProperty,
			                              const uint8_t EndpointControl,
			                              const uint16_t DataLength,
			                              void* const Data)
{
    13ba:	0f 93       	push	r16
    13bc:	1f 93       	push	r17
	if (!(AudioInterfaceInfo->State.IsActive))
    13be:	fc 01       	movw	r30, r24
    13c0:	84 85       	ldd	r24, Z+12	; 0x0c
    13c2:	88 23       	and	r24, r24
    13c4:	39 f1       	breq	.+78     	; 0x1414 <Audio_Host_GetSetEndpointProperty+0x5e>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t RequestType;
	uint8_t EndpointAddress;

	if (EndpointProperty & 0x80)
    13c6:	47 ff       	sbrs	r20, 7
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <Audio_Host_GetSetEndpointProperty+0x18>
	  RequestType = (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT);
    13ca:	92 ea       	ldi	r25, 0xA2	; 162
    13cc:	01 c0       	rjmp	.+2      	; 0x13d0 <Audio_Host_GetSetEndpointProperty+0x1a>
	else
	  RequestType = (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT);
    13ce:	92 e2       	ldi	r25, 0x22	; 34
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13d0:	6f 70       	andi	r22, 0x0F	; 15
    13d2:	60 93 a7 00 	sts	0x00A7, r22
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    13d6:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
    13da:	53 2f       	mov	r21, r19
    13dc:	5f 70       	andi	r21, 0x0F	; 15
    13de:	30 ff       	sbrs	r19, 0
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <Audio_Host_GetSetEndpointProperty+0x30>
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	01 c0       	rjmp	.+2      	; 0x13e8 <Audio_Host_GetSetEndpointProperty+0x32>
    13e6:	80 e8       	ldi	r24, 0x80	; 128

	Pipe_SelectPipe(DataPipeIndex);
	EndpointAddress = Pipe_GetBoundEndpointAddress();

	USB_ControlRequest = (USB_Request_Header_t)
    13e8:	90 93 46 01 	sts	0x0146, r25
    13ec:	40 93 47 01 	sts	0x0147, r20
    13f0:	e8 e4       	ldi	r30, 0x48	; 72
    13f2:	f1 e0       	ldi	r31, 0x01	; 1
    13f4:	10 92 48 01 	sts	0x0148, r1
    13f8:	21 83       	std	Z+1, r18	; 0x01
    13fa:	85 2b       	or	r24, r21
    13fc:	80 93 4a 01 	sts	0x014A, r24
    1400:	13 82       	std	Z+3, r1	; 0x03
    1402:	10 93 4d 01 	sts	0x014D, r17
    1406:	00 93 4c 01 	sts	0x014C, r16
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    140a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = DataLength,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Data);
    140e:	c7 01       	movw	r24, r14
    1410:	7b dd       	rcall	.-1290   	; 0xf08 <USB_Host_SendControlRequest>
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <Audio_Host_GetSetEndpointProperty+0x60>
    1414:	81 e0       	ldi	r24, 0x01	; 1
			                              const uint8_t EndpointControl,
			                              const uint16_t DataLength,
			                              void* const Data)
{
	if (!(AudioInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1416:	1f 91       	pop	r17
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Data);
}
    1418:	0f 91       	pop	r16
    141a:	ff 90       	pop	r15
    141c:	ef 90       	pop	r14
    141e:	08 95       	ret

00001420 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1420:	90 91 c8 00 	lds	r25, 0x00C8
    1424:	95 ff       	sbrs	r25, 5
    1426:	fc cf       	rjmp	.-8      	; 0x1420 <Serial_putchar>
				UDR1 = DataByte;
    1428:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	08 95       	ret

00001432 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1432:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1436:	87 ff       	sbrs	r24, 7
    1438:	08 c0       	rjmp	.+16     	; 0x144a <Serial_getchar+0x18>
    143a:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    143e:	87 ff       	sbrs	r24, 7
    1440:	07 c0       	rjmp	.+14     	; 0x1450 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1442:	80 91 ce 00 	lds	r24, 0x00CE
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	08 95       	ret
	  return _FDEV_EOF;
    144a:	8e ef       	ldi	r24, 0xFE	; 254
    144c:	9f ef       	ldi	r25, 0xFF	; 255
    144e:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1450:	8f ef       	ldi	r24, 0xFF	; 255
    1452:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1454:	08 95       	ret

00001456 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1456:	fc 01       	movw	r30, r24
	if (!(Stream))
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	51 f4       	brne	.+20     	; 0x1470 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    145c:	ef e4       	ldi	r30, 0x4F	; 79
    145e:	f1 e0       	ldi	r31, 0x01	; 1
    1460:	f0 93 5e 01 	sts	0x015E, r31
    1464:	e0 93 5d 01 	sts	0x015D, r30
		stdout = Stream;
    1468:	f0 93 60 01 	sts	0x0160, r31
    146c:	e0 93 5f 01 	sts	0x015F, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1470:	8e e0       	ldi	r24, 0x0E	; 14
    1472:	df 01       	movw	r26, r30
    1474:	1d 92       	st	X+, r1
    1476:	8a 95       	dec	r24
    1478:	e9 f7       	brne	.-6      	; 0x1474 <Serial_CreateStream+0x1e>
    147a:	83 e0       	ldi	r24, 0x03	; 3
    147c:	83 83       	std	Z+3, r24	; 0x03
    147e:	80 e1       	ldi	r24, 0x10	; 16
    1480:	9a e0       	ldi	r25, 0x0A	; 10
    1482:	91 87       	std	Z+9, r25	; 0x09
    1484:	80 87       	std	Z+8, r24	; 0x08
    1486:	89 e1       	ldi	r24, 0x19	; 25
    1488:	9a e0       	ldi	r25, 0x0A	; 10
    148a:	93 87       	std	Z+11, r25	; 0x0b
    148c:	82 87       	std	Z+10, r24	; 0x0a
}
    148e:	08 95       	ret

00001490 <printf_P>:
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	fe 01       	movw	r30, r28
    149a:	35 96       	adiw	r30, 0x05	; 5
    149c:	61 91       	ld	r22, Z+
    149e:	71 91       	ld	r23, Z+
    14a0:	80 91 5f 01 	lds	r24, 0x015F
    14a4:	90 91 60 01 	lds	r25, 0x0160
    14a8:	dc 01       	movw	r26, r24
    14aa:	13 96       	adiw	r26, 0x03	; 3
    14ac:	2c 91       	ld	r18, X
    14ae:	13 97       	sbiw	r26, 0x03	; 3
    14b0:	28 60       	ori	r18, 0x08	; 8
    14b2:	13 96       	adiw	r26, 0x03	; 3
    14b4:	2c 93       	st	X, r18
    14b6:	af 01       	movw	r20, r30
    14b8:	39 d0       	rcall	.+114    	; 0x152c <vfprintf>
    14ba:	e0 91 5f 01 	lds	r30, 0x015F
    14be:	f0 91 60 01 	lds	r31, 0x0160
    14c2:	23 81       	ldd	r18, Z+3	; 0x03
    14c4:	27 7f       	andi	r18, 0xF7	; 247
    14c6:	23 83       	std	Z+3, r18	; 0x03
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	08 95       	ret

000014ce <puts_P>:
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	8c 01       	movw	r16, r24
    14d8:	e0 91 5f 01 	lds	r30, 0x015F
    14dc:	f0 91 60 01 	lds	r31, 0x0160
    14e0:	83 81       	ldd	r24, Z+3	; 0x03
    14e2:	81 ff       	sbrs	r24, 1
    14e4:	1b c0       	rjmp	.+54     	; 0x151c <puts_P+0x4e>
    14e6:	c0 e0       	ldi	r28, 0x00	; 0
    14e8:	d0 e0       	ldi	r29, 0x00	; 0
    14ea:	07 c0       	rjmp	.+14     	; 0x14fa <puts_P+0x2c>
    14ec:	09 95       	icall
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	11 f0       	breq	.+4      	; 0x14f6 <puts_P+0x28>
    14f2:	cf ef       	ldi	r28, 0xFF	; 255
    14f4:	df ef       	ldi	r29, 0xFF	; 255
    14f6:	0f 5f       	subi	r16, 0xFF	; 255
    14f8:	1f 4f       	sbci	r17, 0xFF	; 255
    14fa:	f8 01       	movw	r30, r16
    14fc:	84 91       	lpm	r24, Z
    14fe:	60 91 5f 01 	lds	r22, 0x015F
    1502:	70 91 60 01 	lds	r23, 0x0160
    1506:	db 01       	movw	r26, r22
    1508:	18 96       	adiw	r26, 0x08	; 8
    150a:	ed 91       	ld	r30, X+
    150c:	fc 91       	ld	r31, X
    150e:	19 97       	sbiw	r26, 0x09	; 9
    1510:	88 23       	and	r24, r24
    1512:	61 f7       	brne	.-40     	; 0x14ec <puts_P+0x1e>
    1514:	8a e0       	ldi	r24, 0x0A	; 10
    1516:	09 95       	icall
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	11 f0       	breq	.+4      	; 0x1520 <puts_P+0x52>
    151c:	cf ef       	ldi	r28, 0xFF	; 255
    151e:	df ef       	ldi	r29, 0xFF	; 255
    1520:	ce 01       	movw	r24, r28
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	08 95       	ret

0000152c <vfprintf>:
    152c:	2f 92       	push	r2
    152e:	3f 92       	push	r3
    1530:	4f 92       	push	r4
    1532:	5f 92       	push	r5
    1534:	6f 92       	push	r6
    1536:	7f 92       	push	r7
    1538:	8f 92       	push	r8
    153a:	9f 92       	push	r9
    153c:	af 92       	push	r10
    153e:	bf 92       	push	r11
    1540:	cf 92       	push	r12
    1542:	df 92       	push	r13
    1544:	ef 92       	push	r14
    1546:	ff 92       	push	r15
    1548:	0f 93       	push	r16
    154a:	1f 93       	push	r17
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	2d 97       	sbiw	r28, 0x0d	; 13
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	cd bf       	out	0x3d, r28	; 61
    1560:	3c 01       	movw	r6, r24
    1562:	7d 87       	std	Y+13, r23	; 0x0d
    1564:	6c 87       	std	Y+12, r22	; 0x0c
    1566:	5a 01       	movw	r10, r20
    1568:	fc 01       	movw	r30, r24
    156a:	17 82       	std	Z+7, r1	; 0x07
    156c:	16 82       	std	Z+6, r1	; 0x06
    156e:	83 81       	ldd	r24, Z+3	; 0x03
    1570:	81 ff       	sbrs	r24, 1
    1572:	bb c1       	rjmp	.+886    	; 0x18ea <vfprintf+0x3be>
    1574:	2e 01       	movw	r4, r28
    1576:	08 94       	sec
    1578:	41 1c       	adc	r4, r1
    157a:	51 1c       	adc	r5, r1
    157c:	f3 01       	movw	r30, r6
    157e:	93 81       	ldd	r25, Z+3	; 0x03
    1580:	ec 85       	ldd	r30, Y+12	; 0x0c
    1582:	fd 85       	ldd	r31, Y+13	; 0x0d
    1584:	93 fd       	sbrc	r25, 3
    1586:	85 91       	lpm	r24, Z+
    1588:	93 ff       	sbrs	r25, 3
    158a:	81 91       	ld	r24, Z+
    158c:	fd 87       	std	Y+13, r31	; 0x0d
    158e:	ec 87       	std	Y+12, r30	; 0x0c
    1590:	88 23       	and	r24, r24
    1592:	09 f4       	brne	.+2      	; 0x1596 <vfprintf+0x6a>
    1594:	a6 c1       	rjmp	.+844    	; 0x18e2 <vfprintf+0x3b6>
    1596:	85 32       	cpi	r24, 0x25	; 37
    1598:	41 f4       	brne	.+16     	; 0x15aa <vfprintf+0x7e>
    159a:	93 fd       	sbrc	r25, 3
    159c:	85 91       	lpm	r24, Z+
    159e:	93 ff       	sbrs	r25, 3
    15a0:	81 91       	ld	r24, Z+
    15a2:	fd 87       	std	Y+13, r31	; 0x0d
    15a4:	ec 87       	std	Y+12, r30	; 0x0c
    15a6:	85 32       	cpi	r24, 0x25	; 37
    15a8:	21 f4       	brne	.+8      	; 0x15b2 <vfprintf+0x86>
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	b3 01       	movw	r22, r6
    15ae:	ce d1       	rcall	.+924    	; 0x194c <fputc>
    15b0:	e5 cf       	rjmp	.-54     	; 0x157c <vfprintf+0x50>
    15b2:	ff 24       	eor	r15, r15
    15b4:	ee 24       	eor	r14, r14
    15b6:	10 e0       	ldi	r17, 0x00	; 0
    15b8:	10 32       	cpi	r17, 0x20	; 32
    15ba:	b0 f4       	brcc	.+44     	; 0x15e8 <vfprintf+0xbc>
    15bc:	8b 32       	cpi	r24, 0x2B	; 43
    15be:	69 f0       	breq	.+26     	; 0x15da <vfprintf+0xae>
    15c0:	8c 32       	cpi	r24, 0x2C	; 44
    15c2:	28 f4       	brcc	.+10     	; 0x15ce <vfprintf+0xa2>
    15c4:	80 32       	cpi	r24, 0x20	; 32
    15c6:	51 f0       	breq	.+20     	; 0x15dc <vfprintf+0xb0>
    15c8:	83 32       	cpi	r24, 0x23	; 35
    15ca:	71 f4       	brne	.+28     	; 0x15e8 <vfprintf+0xbc>
    15cc:	0b c0       	rjmp	.+22     	; 0x15e4 <vfprintf+0xb8>
    15ce:	8d 32       	cpi	r24, 0x2D	; 45
    15d0:	39 f0       	breq	.+14     	; 0x15e0 <vfprintf+0xb4>
    15d2:	80 33       	cpi	r24, 0x30	; 48
    15d4:	49 f4       	brne	.+18     	; 0x15e8 <vfprintf+0xbc>
    15d6:	11 60       	ori	r17, 0x01	; 1
    15d8:	2c c0       	rjmp	.+88     	; 0x1632 <vfprintf+0x106>
    15da:	12 60       	ori	r17, 0x02	; 2
    15dc:	14 60       	ori	r17, 0x04	; 4
    15de:	29 c0       	rjmp	.+82     	; 0x1632 <vfprintf+0x106>
    15e0:	18 60       	ori	r17, 0x08	; 8
    15e2:	27 c0       	rjmp	.+78     	; 0x1632 <vfprintf+0x106>
    15e4:	10 61       	ori	r17, 0x10	; 16
    15e6:	25 c0       	rjmp	.+74     	; 0x1632 <vfprintf+0x106>
    15e8:	17 fd       	sbrc	r17, 7
    15ea:	2e c0       	rjmp	.+92     	; 0x1648 <vfprintf+0x11c>
    15ec:	28 2f       	mov	r18, r24
    15ee:	20 53       	subi	r18, 0x30	; 48
    15f0:	2a 30       	cpi	r18, 0x0A	; 10
    15f2:	98 f4       	brcc	.+38     	; 0x161a <vfprintf+0xee>
    15f4:	16 ff       	sbrs	r17, 6
    15f6:	08 c0       	rjmp	.+16     	; 0x1608 <vfprintf+0xdc>
    15f8:	8f 2d       	mov	r24, r15
    15fa:	88 0f       	add	r24, r24
    15fc:	f8 2e       	mov	r15, r24
    15fe:	ff 0c       	add	r15, r15
    1600:	ff 0c       	add	r15, r15
    1602:	f8 0e       	add	r15, r24
    1604:	f2 0e       	add	r15, r18
    1606:	15 c0       	rjmp	.+42     	; 0x1632 <vfprintf+0x106>
    1608:	8e 2d       	mov	r24, r14
    160a:	88 0f       	add	r24, r24
    160c:	e8 2e       	mov	r14, r24
    160e:	ee 0c       	add	r14, r14
    1610:	ee 0c       	add	r14, r14
    1612:	e8 0e       	add	r14, r24
    1614:	e2 0e       	add	r14, r18
    1616:	10 62       	ori	r17, 0x20	; 32
    1618:	0c c0       	rjmp	.+24     	; 0x1632 <vfprintf+0x106>
    161a:	8e 32       	cpi	r24, 0x2E	; 46
    161c:	21 f4       	brne	.+8      	; 0x1626 <vfprintf+0xfa>
    161e:	16 fd       	sbrc	r17, 6
    1620:	60 c1       	rjmp	.+704    	; 0x18e2 <vfprintf+0x3b6>
    1622:	10 64       	ori	r17, 0x40	; 64
    1624:	06 c0       	rjmp	.+12     	; 0x1632 <vfprintf+0x106>
    1626:	8c 36       	cpi	r24, 0x6C	; 108
    1628:	11 f4       	brne	.+4      	; 0x162e <vfprintf+0x102>
    162a:	10 68       	ori	r17, 0x80	; 128
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <vfprintf+0x106>
    162e:	88 36       	cpi	r24, 0x68	; 104
    1630:	59 f4       	brne	.+22     	; 0x1648 <vfprintf+0x11c>
    1632:	ec 85       	ldd	r30, Y+12	; 0x0c
    1634:	fd 85       	ldd	r31, Y+13	; 0x0d
    1636:	93 fd       	sbrc	r25, 3
    1638:	85 91       	lpm	r24, Z+
    163a:	93 ff       	sbrs	r25, 3
    163c:	81 91       	ld	r24, Z+
    163e:	fd 87       	std	Y+13, r31	; 0x0d
    1640:	ec 87       	std	Y+12, r30	; 0x0c
    1642:	88 23       	and	r24, r24
    1644:	09 f0       	breq	.+2      	; 0x1648 <vfprintf+0x11c>
    1646:	b8 cf       	rjmp	.-144    	; 0x15b8 <vfprintf+0x8c>
    1648:	98 2f       	mov	r25, r24
    164a:	95 54       	subi	r25, 0x45	; 69
    164c:	93 30       	cpi	r25, 0x03	; 3
    164e:	18 f0       	brcs	.+6      	; 0x1656 <vfprintf+0x12a>
    1650:	90 52       	subi	r25, 0x20	; 32
    1652:	93 30       	cpi	r25, 0x03	; 3
    1654:	38 f4       	brcc	.+14     	; 0x1664 <vfprintf+0x138>
    1656:	24 e0       	ldi	r18, 0x04	; 4
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	a2 0e       	add	r10, r18
    165c:	b3 1e       	adc	r11, r19
    165e:	3f e3       	ldi	r19, 0x3F	; 63
    1660:	39 83       	std	Y+1, r19	; 0x01
    1662:	0f c0       	rjmp	.+30     	; 0x1682 <vfprintf+0x156>
    1664:	83 36       	cpi	r24, 0x63	; 99
    1666:	31 f0       	breq	.+12     	; 0x1674 <vfprintf+0x148>
    1668:	83 37       	cpi	r24, 0x73	; 115
    166a:	81 f0       	breq	.+32     	; 0x168c <vfprintf+0x160>
    166c:	83 35       	cpi	r24, 0x53	; 83
    166e:	09 f0       	breq	.+2      	; 0x1672 <vfprintf+0x146>
    1670:	56 c0       	rjmp	.+172    	; 0x171e <vfprintf+0x1f2>
    1672:	21 c0       	rjmp	.+66     	; 0x16b6 <vfprintf+0x18a>
    1674:	f5 01       	movw	r30, r10
    1676:	80 81       	ld	r24, Z
    1678:	89 83       	std	Y+1, r24	; 0x01
    167a:	22 e0       	ldi	r18, 0x02	; 2
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	a2 0e       	add	r10, r18
    1680:	b3 1e       	adc	r11, r19
    1682:	21 e0       	ldi	r18, 0x01	; 1
    1684:	c2 2e       	mov	r12, r18
    1686:	d1 2c       	mov	r13, r1
    1688:	42 01       	movw	r8, r4
    168a:	13 c0       	rjmp	.+38     	; 0x16b2 <vfprintf+0x186>
    168c:	92 e0       	ldi	r25, 0x02	; 2
    168e:	29 2e       	mov	r2, r25
    1690:	31 2c       	mov	r3, r1
    1692:	2a 0c       	add	r2, r10
    1694:	3b 1c       	adc	r3, r11
    1696:	f5 01       	movw	r30, r10
    1698:	80 80       	ld	r8, Z
    169a:	91 80       	ldd	r9, Z+1	; 0x01
    169c:	16 ff       	sbrs	r17, 6
    169e:	03 c0       	rjmp	.+6      	; 0x16a6 <vfprintf+0x17a>
    16a0:	6f 2d       	mov	r22, r15
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <vfprintf+0x17e>
    16a6:	6f ef       	ldi	r22, 0xFF	; 255
    16a8:	7f ef       	ldi	r23, 0xFF	; 255
    16aa:	c4 01       	movw	r24, r8
    16ac:	44 d1       	rcall	.+648    	; 0x1936 <strnlen>
    16ae:	6c 01       	movw	r12, r24
    16b0:	51 01       	movw	r10, r2
    16b2:	1f 77       	andi	r17, 0x7F	; 127
    16b4:	14 c0       	rjmp	.+40     	; 0x16de <vfprintf+0x1b2>
    16b6:	82 e0       	ldi	r24, 0x02	; 2
    16b8:	28 2e       	mov	r2, r24
    16ba:	31 2c       	mov	r3, r1
    16bc:	2a 0c       	add	r2, r10
    16be:	3b 1c       	adc	r3, r11
    16c0:	f5 01       	movw	r30, r10
    16c2:	80 80       	ld	r8, Z
    16c4:	91 80       	ldd	r9, Z+1	; 0x01
    16c6:	16 ff       	sbrs	r17, 6
    16c8:	03 c0       	rjmp	.+6      	; 0x16d0 <vfprintf+0x1a4>
    16ca:	6f 2d       	mov	r22, r15
    16cc:	70 e0       	ldi	r23, 0x00	; 0
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <vfprintf+0x1a8>
    16d0:	6f ef       	ldi	r22, 0xFF	; 255
    16d2:	7f ef       	ldi	r23, 0xFF	; 255
    16d4:	c4 01       	movw	r24, r8
    16d6:	24 d1       	rcall	.+584    	; 0x1920 <strnlen_P>
    16d8:	6c 01       	movw	r12, r24
    16da:	10 68       	ori	r17, 0x80	; 128
    16dc:	51 01       	movw	r10, r2
    16de:	13 fd       	sbrc	r17, 3
    16e0:	1a c0       	rjmp	.+52     	; 0x1716 <vfprintf+0x1ea>
    16e2:	05 c0       	rjmp	.+10     	; 0x16ee <vfprintf+0x1c2>
    16e4:	80 e2       	ldi	r24, 0x20	; 32
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	b3 01       	movw	r22, r6
    16ea:	30 d1       	rcall	.+608    	; 0x194c <fputc>
    16ec:	ea 94       	dec	r14
    16ee:	8e 2d       	mov	r24, r14
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	c8 16       	cp	r12, r24
    16f4:	d9 06       	cpc	r13, r25
    16f6:	b0 f3       	brcs	.-20     	; 0x16e4 <vfprintf+0x1b8>
    16f8:	0e c0       	rjmp	.+28     	; 0x1716 <vfprintf+0x1ea>
    16fa:	f4 01       	movw	r30, r8
    16fc:	17 fd       	sbrc	r17, 7
    16fe:	85 91       	lpm	r24, Z+
    1700:	17 ff       	sbrs	r17, 7
    1702:	81 91       	ld	r24, Z+
    1704:	4f 01       	movw	r8, r30
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	b3 01       	movw	r22, r6
    170a:	20 d1       	rcall	.+576    	; 0x194c <fputc>
    170c:	e1 10       	cpse	r14, r1
    170e:	ea 94       	dec	r14
    1710:	08 94       	sec
    1712:	c1 08       	sbc	r12, r1
    1714:	d1 08       	sbc	r13, r1
    1716:	c1 14       	cp	r12, r1
    1718:	d1 04       	cpc	r13, r1
    171a:	79 f7       	brne	.-34     	; 0x16fa <vfprintf+0x1ce>
    171c:	df c0       	rjmp	.+446    	; 0x18dc <vfprintf+0x3b0>
    171e:	84 36       	cpi	r24, 0x64	; 100
    1720:	11 f0       	breq	.+4      	; 0x1726 <vfprintf+0x1fa>
    1722:	89 36       	cpi	r24, 0x69	; 105
    1724:	49 f5       	brne	.+82     	; 0x1778 <vfprintf+0x24c>
    1726:	f5 01       	movw	r30, r10
    1728:	17 ff       	sbrs	r17, 7
    172a:	07 c0       	rjmp	.+14     	; 0x173a <vfprintf+0x20e>
    172c:	80 81       	ld	r24, Z
    172e:	91 81       	ldd	r25, Z+1	; 0x01
    1730:	a2 81       	ldd	r26, Z+2	; 0x02
    1732:	b3 81       	ldd	r27, Z+3	; 0x03
    1734:	24 e0       	ldi	r18, 0x04	; 4
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	08 c0       	rjmp	.+16     	; 0x174a <vfprintf+0x21e>
    173a:	80 81       	ld	r24, Z
    173c:	91 81       	ldd	r25, Z+1	; 0x01
    173e:	aa 27       	eor	r26, r26
    1740:	97 fd       	sbrc	r25, 7
    1742:	a0 95       	com	r26
    1744:	ba 2f       	mov	r27, r26
    1746:	22 e0       	ldi	r18, 0x02	; 2
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	a2 0e       	add	r10, r18
    174c:	b3 1e       	adc	r11, r19
    174e:	01 2f       	mov	r16, r17
    1750:	0f 76       	andi	r16, 0x6F	; 111
    1752:	b7 ff       	sbrs	r27, 7
    1754:	08 c0       	rjmp	.+16     	; 0x1766 <vfprintf+0x23a>
    1756:	b0 95       	com	r27
    1758:	a0 95       	com	r26
    175a:	90 95       	com	r25
    175c:	81 95       	neg	r24
    175e:	9f 4f       	sbci	r25, 0xFF	; 255
    1760:	af 4f       	sbci	r26, 0xFF	; 255
    1762:	bf 4f       	sbci	r27, 0xFF	; 255
    1764:	00 68       	ori	r16, 0x80	; 128
    1766:	bc 01       	movw	r22, r24
    1768:	cd 01       	movw	r24, r26
    176a:	a2 01       	movw	r20, r4
    176c:	2a e0       	ldi	r18, 0x0A	; 10
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	19 d1       	rcall	.+562    	; 0x19a4 <__ultoa_invert>
    1772:	d8 2e       	mov	r13, r24
    1774:	d4 18       	sub	r13, r4
    1776:	3e c0       	rjmp	.+124    	; 0x17f4 <vfprintf+0x2c8>
    1778:	85 37       	cpi	r24, 0x75	; 117
    177a:	21 f4       	brne	.+8      	; 0x1784 <vfprintf+0x258>
    177c:	1f 7e       	andi	r17, 0xEF	; 239
    177e:	2a e0       	ldi	r18, 0x0A	; 10
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	20 c0       	rjmp	.+64     	; 0x17c4 <vfprintf+0x298>
    1784:	19 7f       	andi	r17, 0xF9	; 249
    1786:	8f 36       	cpi	r24, 0x6F	; 111
    1788:	a9 f0       	breq	.+42     	; 0x17b4 <vfprintf+0x288>
    178a:	80 37       	cpi	r24, 0x70	; 112
    178c:	20 f4       	brcc	.+8      	; 0x1796 <vfprintf+0x26a>
    178e:	88 35       	cpi	r24, 0x58	; 88
    1790:	09 f0       	breq	.+2      	; 0x1794 <vfprintf+0x268>
    1792:	a7 c0       	rjmp	.+334    	; 0x18e2 <vfprintf+0x3b6>
    1794:	0b c0       	rjmp	.+22     	; 0x17ac <vfprintf+0x280>
    1796:	80 37       	cpi	r24, 0x70	; 112
    1798:	21 f0       	breq	.+8      	; 0x17a2 <vfprintf+0x276>
    179a:	88 37       	cpi	r24, 0x78	; 120
    179c:	09 f0       	breq	.+2      	; 0x17a0 <vfprintf+0x274>
    179e:	a1 c0       	rjmp	.+322    	; 0x18e2 <vfprintf+0x3b6>
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <vfprintf+0x278>
    17a2:	10 61       	ori	r17, 0x10	; 16
    17a4:	14 ff       	sbrs	r17, 4
    17a6:	09 c0       	rjmp	.+18     	; 0x17ba <vfprintf+0x28e>
    17a8:	14 60       	ori	r17, 0x04	; 4
    17aa:	07 c0       	rjmp	.+14     	; 0x17ba <vfprintf+0x28e>
    17ac:	14 ff       	sbrs	r17, 4
    17ae:	08 c0       	rjmp	.+16     	; 0x17c0 <vfprintf+0x294>
    17b0:	16 60       	ori	r17, 0x06	; 6
    17b2:	06 c0       	rjmp	.+12     	; 0x17c0 <vfprintf+0x294>
    17b4:	28 e0       	ldi	r18, 0x08	; 8
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	05 c0       	rjmp	.+10     	; 0x17c4 <vfprintf+0x298>
    17ba:	20 e1       	ldi	r18, 0x10	; 16
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <vfprintf+0x298>
    17c0:	20 e1       	ldi	r18, 0x10	; 16
    17c2:	32 e0       	ldi	r19, 0x02	; 2
    17c4:	f5 01       	movw	r30, r10
    17c6:	17 ff       	sbrs	r17, 7
    17c8:	07 c0       	rjmp	.+14     	; 0x17d8 <vfprintf+0x2ac>
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	44 e0       	ldi	r20, 0x04	; 4
    17d4:	50 e0       	ldi	r21, 0x00	; 0
    17d6:	06 c0       	rjmp	.+12     	; 0x17e4 <vfprintf+0x2b8>
    17d8:	60 81       	ld	r22, Z
    17da:	71 81       	ldd	r23, Z+1	; 0x01
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	42 e0       	ldi	r20, 0x02	; 2
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	a4 0e       	add	r10, r20
    17e6:	b5 1e       	adc	r11, r21
    17e8:	a2 01       	movw	r20, r4
    17ea:	dc d0       	rcall	.+440    	; 0x19a4 <__ultoa_invert>
    17ec:	d8 2e       	mov	r13, r24
    17ee:	d4 18       	sub	r13, r4
    17f0:	01 2f       	mov	r16, r17
    17f2:	0f 77       	andi	r16, 0x7F	; 127
    17f4:	06 ff       	sbrs	r16, 6
    17f6:	09 c0       	rjmp	.+18     	; 0x180a <vfprintf+0x2de>
    17f8:	0e 7f       	andi	r16, 0xFE	; 254
    17fa:	df 14       	cp	r13, r15
    17fc:	30 f4       	brcc	.+12     	; 0x180a <vfprintf+0x2de>
    17fe:	04 ff       	sbrs	r16, 4
    1800:	06 c0       	rjmp	.+12     	; 0x180e <vfprintf+0x2e2>
    1802:	02 fd       	sbrc	r16, 2
    1804:	04 c0       	rjmp	.+8      	; 0x180e <vfprintf+0x2e2>
    1806:	0f 7e       	andi	r16, 0xEF	; 239
    1808:	02 c0       	rjmp	.+4      	; 0x180e <vfprintf+0x2e2>
    180a:	1d 2d       	mov	r17, r13
    180c:	01 c0       	rjmp	.+2      	; 0x1810 <vfprintf+0x2e4>
    180e:	1f 2d       	mov	r17, r15
    1810:	80 2f       	mov	r24, r16
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	04 ff       	sbrs	r16, 4
    1816:	0c c0       	rjmp	.+24     	; 0x1830 <vfprintf+0x304>
    1818:	fe 01       	movw	r30, r28
    181a:	ed 0d       	add	r30, r13
    181c:	f1 1d       	adc	r31, r1
    181e:	20 81       	ld	r18, Z
    1820:	20 33       	cpi	r18, 0x30	; 48
    1822:	11 f4       	brne	.+4      	; 0x1828 <vfprintf+0x2fc>
    1824:	09 7e       	andi	r16, 0xE9	; 233
    1826:	09 c0       	rjmp	.+18     	; 0x183a <vfprintf+0x30e>
    1828:	02 ff       	sbrs	r16, 2
    182a:	06 c0       	rjmp	.+12     	; 0x1838 <vfprintf+0x30c>
    182c:	1e 5f       	subi	r17, 0xFE	; 254
    182e:	05 c0       	rjmp	.+10     	; 0x183a <vfprintf+0x30e>
    1830:	86 78       	andi	r24, 0x86	; 134
    1832:	90 70       	andi	r25, 0x00	; 0
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	09 f0       	breq	.+2      	; 0x183a <vfprintf+0x30e>
    1838:	1f 5f       	subi	r17, 0xFF	; 255
    183a:	80 2e       	mov	r8, r16
    183c:	99 24       	eor	r9, r9
    183e:	03 fd       	sbrc	r16, 3
    1840:	11 c0       	rjmp	.+34     	; 0x1864 <vfprintf+0x338>
    1842:	00 ff       	sbrs	r16, 0
    1844:	0c c0       	rjmp	.+24     	; 0x185e <vfprintf+0x332>
    1846:	fd 2c       	mov	r15, r13
    1848:	1e 15       	cp	r17, r14
    184a:	48 f4       	brcc	.+18     	; 0x185e <vfprintf+0x332>
    184c:	fe 0c       	add	r15, r14
    184e:	f1 1a       	sub	r15, r17
    1850:	1e 2d       	mov	r17, r14
    1852:	05 c0       	rjmp	.+10     	; 0x185e <vfprintf+0x332>
    1854:	80 e2       	ldi	r24, 0x20	; 32
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	b3 01       	movw	r22, r6
    185a:	78 d0       	rcall	.+240    	; 0x194c <fputc>
    185c:	1f 5f       	subi	r17, 0xFF	; 255
    185e:	1e 15       	cp	r17, r14
    1860:	c8 f3       	brcs	.-14     	; 0x1854 <vfprintf+0x328>
    1862:	04 c0       	rjmp	.+8      	; 0x186c <vfprintf+0x340>
    1864:	1e 15       	cp	r17, r14
    1866:	10 f4       	brcc	.+4      	; 0x186c <vfprintf+0x340>
    1868:	e1 1a       	sub	r14, r17
    186a:	01 c0       	rjmp	.+2      	; 0x186e <vfprintf+0x342>
    186c:	ee 24       	eor	r14, r14
    186e:	84 fe       	sbrs	r8, 4
    1870:	0e c0       	rjmp	.+28     	; 0x188e <vfprintf+0x362>
    1872:	80 e3       	ldi	r24, 0x30	; 48
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	b3 01       	movw	r22, r6
    1878:	69 d0       	rcall	.+210    	; 0x194c <fputc>
    187a:	82 fe       	sbrs	r8, 2
    187c:	1d c0       	rjmp	.+58     	; 0x18b8 <vfprintf+0x38c>
    187e:	81 fe       	sbrs	r8, 1
    1880:	03 c0       	rjmp	.+6      	; 0x1888 <vfprintf+0x35c>
    1882:	88 e5       	ldi	r24, 0x58	; 88
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	10 c0       	rjmp	.+32     	; 0x18a8 <vfprintf+0x37c>
    1888:	88 e7       	ldi	r24, 0x78	; 120
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	0d c0       	rjmp	.+26     	; 0x18a8 <vfprintf+0x37c>
    188e:	c4 01       	movw	r24, r8
    1890:	86 78       	andi	r24, 0x86	; 134
    1892:	90 70       	andi	r25, 0x00	; 0
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	81 f0       	breq	.+32     	; 0x18b8 <vfprintf+0x38c>
    1898:	81 fc       	sbrc	r8, 1
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <vfprintf+0x374>
    189c:	80 e2       	ldi	r24, 0x20	; 32
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <vfprintf+0x376>
    18a0:	8b e2       	ldi	r24, 0x2B	; 43
    18a2:	07 fd       	sbrc	r16, 7
    18a4:	8d e2       	ldi	r24, 0x2D	; 45
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	b3 01       	movw	r22, r6
    18aa:	50 d0       	rcall	.+160    	; 0x194c <fputc>
    18ac:	05 c0       	rjmp	.+10     	; 0x18b8 <vfprintf+0x38c>
    18ae:	80 e3       	ldi	r24, 0x30	; 48
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	b3 01       	movw	r22, r6
    18b4:	4b d0       	rcall	.+150    	; 0x194c <fputc>
    18b6:	fa 94       	dec	r15
    18b8:	df 14       	cp	r13, r15
    18ba:	c8 f3       	brcs	.-14     	; 0x18ae <vfprintf+0x382>
    18bc:	da 94       	dec	r13
    18be:	f2 01       	movw	r30, r4
    18c0:	ed 0d       	add	r30, r13
    18c2:	f1 1d       	adc	r31, r1
    18c4:	80 81       	ld	r24, Z
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	b3 01       	movw	r22, r6
    18ca:	40 d0       	rcall	.+128    	; 0x194c <fputc>
    18cc:	dd 20       	and	r13, r13
    18ce:	b1 f7       	brne	.-20     	; 0x18bc <vfprintf+0x390>
    18d0:	05 c0       	rjmp	.+10     	; 0x18dc <vfprintf+0x3b0>
    18d2:	80 e2       	ldi	r24, 0x20	; 32
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	b3 01       	movw	r22, r6
    18d8:	39 d0       	rcall	.+114    	; 0x194c <fputc>
    18da:	ea 94       	dec	r14
    18dc:	ee 20       	and	r14, r14
    18de:	c9 f7       	brne	.-14     	; 0x18d2 <vfprintf+0x3a6>
    18e0:	4d ce       	rjmp	.-870    	; 0x157c <vfprintf+0x50>
    18e2:	f3 01       	movw	r30, r6
    18e4:	86 81       	ldd	r24, Z+6	; 0x06
    18e6:	97 81       	ldd	r25, Z+7	; 0x07
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <vfprintf+0x3c2>
    18ea:	8f ef       	ldi	r24, 0xFF	; 255
    18ec:	9f ef       	ldi	r25, 0xFF	; 255
    18ee:	2d 96       	adiw	r28, 0x0d	; 13
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	df 91       	pop	r29
    18fc:	cf 91       	pop	r28
    18fe:	1f 91       	pop	r17
    1900:	0f 91       	pop	r16
    1902:	ff 90       	pop	r15
    1904:	ef 90       	pop	r14
    1906:	df 90       	pop	r13
    1908:	cf 90       	pop	r12
    190a:	bf 90       	pop	r11
    190c:	af 90       	pop	r10
    190e:	9f 90       	pop	r9
    1910:	8f 90       	pop	r8
    1912:	7f 90       	pop	r7
    1914:	6f 90       	pop	r6
    1916:	5f 90       	pop	r5
    1918:	4f 90       	pop	r4
    191a:	3f 90       	pop	r3
    191c:	2f 90       	pop	r2
    191e:	08 95       	ret

00001920 <strnlen_P>:
    1920:	fc 01       	movw	r30, r24
    1922:	05 90       	lpm	r0, Z+
    1924:	61 50       	subi	r22, 0x01	; 1
    1926:	70 40       	sbci	r23, 0x00	; 0
    1928:	01 10       	cpse	r0, r1
    192a:	d8 f7       	brcc	.-10     	; 0x1922 <strnlen_P+0x2>
    192c:	80 95       	com	r24
    192e:	90 95       	com	r25
    1930:	8e 0f       	add	r24, r30
    1932:	9f 1f       	adc	r25, r31
    1934:	08 95       	ret

00001936 <strnlen>:
    1936:	fc 01       	movw	r30, r24
    1938:	61 50       	subi	r22, 0x01	; 1
    193a:	70 40       	sbci	r23, 0x00	; 0
    193c:	01 90       	ld	r0, Z+
    193e:	01 10       	cpse	r0, r1
    1940:	d8 f7       	brcc	.-10     	; 0x1938 <strnlen+0x2>
    1942:	80 95       	com	r24
    1944:	90 95       	com	r25
    1946:	8e 0f       	add	r24, r30
    1948:	9f 1f       	adc	r25, r31
    194a:	08 95       	ret

0000194c <fputc>:
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	8c 01       	movw	r16, r24
    1956:	eb 01       	movw	r28, r22
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	81 ff       	sbrs	r24, 1
    195c:	1b c0       	rjmp	.+54     	; 0x1994 <fputc+0x48>
    195e:	82 ff       	sbrs	r24, 2
    1960:	0d c0       	rjmp	.+26     	; 0x197c <fputc+0x30>
    1962:	2e 81       	ldd	r18, Y+6	; 0x06
    1964:	3f 81       	ldd	r19, Y+7	; 0x07
    1966:	8c 81       	ldd	r24, Y+4	; 0x04
    1968:	9d 81       	ldd	r25, Y+5	; 0x05
    196a:	28 17       	cp	r18, r24
    196c:	39 07       	cpc	r19, r25
    196e:	64 f4       	brge	.+24     	; 0x1988 <fputc+0x3c>
    1970:	e8 81       	ld	r30, Y
    1972:	f9 81       	ldd	r31, Y+1	; 0x01
    1974:	01 93       	st	Z+, r16
    1976:	f9 83       	std	Y+1, r31	; 0x01
    1978:	e8 83       	st	Y, r30
    197a:	06 c0       	rjmp	.+12     	; 0x1988 <fputc+0x3c>
    197c:	e8 85       	ldd	r30, Y+8	; 0x08
    197e:	f9 85       	ldd	r31, Y+9	; 0x09
    1980:	80 2f       	mov	r24, r16
    1982:	09 95       	icall
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	31 f4       	brne	.+12     	; 0x1994 <fputc+0x48>
    1988:	8e 81       	ldd	r24, Y+6	; 0x06
    198a:	9f 81       	ldd	r25, Y+7	; 0x07
    198c:	01 96       	adiw	r24, 0x01	; 1
    198e:	9f 83       	std	Y+7, r25	; 0x07
    1990:	8e 83       	std	Y+6, r24	; 0x06
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <fputc+0x4c>
    1994:	0f ef       	ldi	r16, 0xFF	; 255
    1996:	1f ef       	ldi	r17, 0xFF	; 255
    1998:	c8 01       	movw	r24, r16
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	1f 91       	pop	r17
    19a0:	0f 91       	pop	r16
    19a2:	08 95       	ret

000019a4 <__ultoa_invert>:
    19a4:	fa 01       	movw	r30, r20
    19a6:	aa 27       	eor	r26, r26
    19a8:	28 30       	cpi	r18, 0x08	; 8
    19aa:	51 f1       	breq	.+84     	; 0x1a00 <__ultoa_invert+0x5c>
    19ac:	20 31       	cpi	r18, 0x10	; 16
    19ae:	81 f1       	breq	.+96     	; 0x1a10 <__ultoa_invert+0x6c>
    19b0:	e8 94       	clt
    19b2:	6f 93       	push	r22
    19b4:	6e 7f       	andi	r22, 0xFE	; 254
    19b6:	6e 5f       	subi	r22, 0xFE	; 254
    19b8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ba:	8f 4f       	sbci	r24, 0xFF	; 255
    19bc:	9f 4f       	sbci	r25, 0xFF	; 255
    19be:	af 4f       	sbci	r26, 0xFF	; 255
    19c0:	b1 e0       	ldi	r27, 0x01	; 1
    19c2:	3e d0       	rcall	.+124    	; 0x1a40 <__ultoa_invert+0x9c>
    19c4:	b4 e0       	ldi	r27, 0x04	; 4
    19c6:	3c d0       	rcall	.+120    	; 0x1a40 <__ultoa_invert+0x9c>
    19c8:	67 0f       	add	r22, r23
    19ca:	78 1f       	adc	r23, r24
    19cc:	89 1f       	adc	r24, r25
    19ce:	9a 1f       	adc	r25, r26
    19d0:	a1 1d       	adc	r26, r1
    19d2:	68 0f       	add	r22, r24
    19d4:	79 1f       	adc	r23, r25
    19d6:	8a 1f       	adc	r24, r26
    19d8:	91 1d       	adc	r25, r1
    19da:	a1 1d       	adc	r26, r1
    19dc:	6a 0f       	add	r22, r26
    19de:	71 1d       	adc	r23, r1
    19e0:	81 1d       	adc	r24, r1
    19e2:	91 1d       	adc	r25, r1
    19e4:	a1 1d       	adc	r26, r1
    19e6:	20 d0       	rcall	.+64     	; 0x1a28 <__ultoa_invert+0x84>
    19e8:	09 f4       	brne	.+2      	; 0x19ec <__ultoa_invert+0x48>
    19ea:	68 94       	set
    19ec:	3f 91       	pop	r19
    19ee:	2a e0       	ldi	r18, 0x0A	; 10
    19f0:	26 9f       	mul	r18, r22
    19f2:	11 24       	eor	r1, r1
    19f4:	30 19       	sub	r19, r0
    19f6:	30 5d       	subi	r19, 0xD0	; 208
    19f8:	31 93       	st	Z+, r19
    19fa:	de f6       	brtc	.-74     	; 0x19b2 <__ultoa_invert+0xe>
    19fc:	cf 01       	movw	r24, r30
    19fe:	08 95       	ret
    1a00:	46 2f       	mov	r20, r22
    1a02:	47 70       	andi	r20, 0x07	; 7
    1a04:	40 5d       	subi	r20, 0xD0	; 208
    1a06:	41 93       	st	Z+, r20
    1a08:	b3 e0       	ldi	r27, 0x03	; 3
    1a0a:	0f d0       	rcall	.+30     	; 0x1a2a <__ultoa_invert+0x86>
    1a0c:	c9 f7       	brne	.-14     	; 0x1a00 <__ultoa_invert+0x5c>
    1a0e:	f6 cf       	rjmp	.-20     	; 0x19fc <__ultoa_invert+0x58>
    1a10:	46 2f       	mov	r20, r22
    1a12:	4f 70       	andi	r20, 0x0F	; 15
    1a14:	40 5d       	subi	r20, 0xD0	; 208
    1a16:	4a 33       	cpi	r20, 0x3A	; 58
    1a18:	18 f0       	brcs	.+6      	; 0x1a20 <__ultoa_invert+0x7c>
    1a1a:	49 5d       	subi	r20, 0xD9	; 217
    1a1c:	31 fd       	sbrc	r19, 1
    1a1e:	40 52       	subi	r20, 0x20	; 32
    1a20:	41 93       	st	Z+, r20
    1a22:	02 d0       	rcall	.+4      	; 0x1a28 <__ultoa_invert+0x84>
    1a24:	a9 f7       	brne	.-22     	; 0x1a10 <__ultoa_invert+0x6c>
    1a26:	ea cf       	rjmp	.-44     	; 0x19fc <__ultoa_invert+0x58>
    1a28:	b4 e0       	ldi	r27, 0x04	; 4
    1a2a:	a6 95       	lsr	r26
    1a2c:	97 95       	ror	r25
    1a2e:	87 95       	ror	r24
    1a30:	77 95       	ror	r23
    1a32:	67 95       	ror	r22
    1a34:	ba 95       	dec	r27
    1a36:	c9 f7       	brne	.-14     	; 0x1a2a <__ultoa_invert+0x86>
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	61 05       	cpc	r22, r1
    1a3c:	71 05       	cpc	r23, r1
    1a3e:	08 95       	ret
    1a40:	9b 01       	movw	r18, r22
    1a42:	ac 01       	movw	r20, r24
    1a44:	0a 2e       	mov	r0, r26
    1a46:	06 94       	lsr	r0
    1a48:	57 95       	ror	r21
    1a4a:	47 95       	ror	r20
    1a4c:	37 95       	ror	r19
    1a4e:	27 95       	ror	r18
    1a50:	ba 95       	dec	r27
    1a52:	c9 f7       	brne	.-14     	; 0x1a46 <__ultoa_invert+0xa2>
    1a54:	62 0f       	add	r22, r18
    1a56:	73 1f       	adc	r23, r19
    1a58:	84 1f       	adc	r24, r20
    1a5a:	95 1f       	adc	r25, r21
    1a5c:	a0 1d       	adc	r26, r0
    1a5e:	08 95       	ret

00001a60 <_exit>:
    1a60:	f8 94       	cli

00001a62 <__stop_program>:
    1a62:	ff cf       	rjmp	.-2      	; 0x1a62 <__stop_program>
