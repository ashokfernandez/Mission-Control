
KeyboardHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00001ac2  00001b56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ac2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800142  00800142  00001b98  2**0
                  ALLOC
  3 .stab         00000f90  00000000  00000000  00001b98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000030d  00000000  00000000  00002b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000888  00000000  00000000  00002e38  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000db4d  00000000  00000000  000036c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003453  00000000  00000000  0001120d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005c83  00000000  00000000  00014660  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001920  00000000  00000000  0001a2e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004f93  00000000  00000000  0001bc04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009704  00000000  00000000  00020b97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a20  00000000  00000000  0002a29b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c1       	rjmp	.+548    	; 0x226 <__ctors_end>
       2:	00 00       	nop
       4:	2f c1       	rjmp	.+606    	; 0x264 <__bad_interrupt>
       6:	00 00       	nop
       8:	2d c1       	rjmp	.+602    	; 0x264 <__bad_interrupt>
       a:	00 00       	nop
       c:	2b c1       	rjmp	.+598    	; 0x264 <__bad_interrupt>
       e:	00 00       	nop
      10:	29 c1       	rjmp	.+594    	; 0x264 <__bad_interrupt>
      12:	00 00       	nop
      14:	27 c1       	rjmp	.+590    	; 0x264 <__bad_interrupt>
      16:	00 00       	nop
      18:	25 c1       	rjmp	.+586    	; 0x264 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	23 c1       	rjmp	.+582    	; 0x264 <__bad_interrupt>
      1e:	00 00       	nop
      20:	21 c1       	rjmp	.+578    	; 0x264 <__bad_interrupt>
      22:	00 00       	nop
      24:	1f c1       	rjmp	.+574    	; 0x264 <__bad_interrupt>
      26:	00 00       	nop
      28:	1c c6       	rjmp	.+3128   	; 0xc62 <__vector_10>
      2a:	00 00       	nop
      2c:	1b c1       	rjmp	.+566    	; 0x264 <__bad_interrupt>
      2e:	00 00       	nop
      30:	19 c1       	rjmp	.+562    	; 0x264 <__bad_interrupt>
      32:	00 00       	nop
      34:	17 c1       	rjmp	.+558    	; 0x264 <__bad_interrupt>
      36:	00 00       	nop
      38:	15 c1       	rjmp	.+554    	; 0x264 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	13 c1       	rjmp	.+550    	; 0x264 <__bad_interrupt>
      3e:	00 00       	nop
      40:	11 c1       	rjmp	.+546    	; 0x264 <__bad_interrupt>
      42:	00 00       	nop
      44:	0f c1       	rjmp	.+542    	; 0x264 <__bad_interrupt>
      46:	00 00       	nop
      48:	0d c1       	rjmp	.+538    	; 0x264 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0b c1       	rjmp	.+534    	; 0x264 <__bad_interrupt>
      4e:	00 00       	nop
      50:	09 c1       	rjmp	.+530    	; 0x264 <__bad_interrupt>
      52:	00 00       	nop
      54:	07 c1       	rjmp	.+526    	; 0x264 <__bad_interrupt>
      56:	00 00       	nop
      58:	05 c1       	rjmp	.+522    	; 0x264 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	03 c1       	rjmp	.+518    	; 0x264 <__bad_interrupt>
      5e:	00 00       	nop
      60:	01 c1       	rjmp	.+514    	; 0x264 <__bad_interrupt>
      62:	00 00       	nop
      64:	ff c0       	rjmp	.+510    	; 0x264 <__bad_interrupt>
      66:	00 00       	nop
      68:	fd c0       	rjmp	.+506    	; 0x264 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	fb c0       	rjmp	.+502    	; 0x264 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f9 c0       	rjmp	.+498    	; 0x264 <__bad_interrupt>
      72:	00 00       	nop
      74:	f7 c0       	rjmp	.+494    	; 0x264 <__bad_interrupt>
      76:	00 00       	nop
      78:	f5 c0       	rjmp	.+490    	; 0x264 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f3 c0       	rjmp	.+486    	; 0x264 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f1 c0       	rjmp	.+482    	; 0x264 <__bad_interrupt>
      82:	00 00       	nop
      84:	ef c0       	rjmp	.+478    	; 0x264 <__bad_interrupt>
      86:	00 00       	nop
      88:	ed c0       	rjmp	.+474    	; 0x264 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	eb c0       	rjmp	.+470    	; 0x264 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e9 c0       	rjmp	.+466    	; 0x264 <__bad_interrupt>
      92:	00 00       	nop
      94:	e7 c0       	rjmp	.+462    	; 0x264 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4262>:
      98:	1b 5b 33 36 6d 4b 65 79 62 6f 61 72 64 20 48 6f     .[36mKeyboard Ho
      a8:	73 74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e     st Demo running.
      b8:	0d 0a 1b 5b 33 37 6d 00                             ...[37m.

000000c0 <__c.4277>:
      c0:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
      d0:	0d 0a 00                                            ...

000000d3 <__c.4282>:
      d3:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
      e3:	68 65 64 2e 0d 0a 00                                hed....

000000ea <__c.4289>:
      ea:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
      fa:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     10a:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

00000117 <__c.4291>:
     117:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     127:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4b 65 79 62     Not a Valid Keyb
     137:	6f 61 72 64 2e 0d 0a 00                             oard....

0000013f <__c.4293>:
     13f:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     14f:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     15f:	6f 6e 2e 0d 0a 00                                   on....

00000165 <__c.4295>:
     165:	43 6f 75 6c 64 20 6e 6f 74 20 53 65 74 20 42 6f     Could not Set Bo
     175:	6f 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f 64 65     ot Protocol Mode
     185:	2e 0d 0a 00                                         ....

00000189 <__c.4297>:
     189:	4b 65 79 62 6f 61 72 64 20 45 6e 75 6d 65 72 61     Keyboard Enumera
     199:	74 65 64 2e 0d 0a 00                                ted....

000001a0 <__c.4302>:
     1a0:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     1b0:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     1c0:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

000001cf <__c.4309>:
     1cf:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     1df:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     1ef:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     1ff:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     20f:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     21f:	1b 5b 33 37 6d 00 00                                .[37m..

00000226 <__ctors_end>:
     226:	11 24       	eor	r1, r1
     228:	1f be       	out	0x3f, r1	; 63
     22a:	cf ef       	ldi	r28, 0xFF	; 255
     22c:	d0 e2       	ldi	r29, 0x20	; 32
     22e:	de bf       	out	0x3e, r29	; 62
     230:	cd bf       	out	0x3d, r28	; 61

00000232 <__do_copy_data>:
     232:	11 e0       	ldi	r17, 0x01	; 1
     234:	a0 e0       	ldi	r26, 0x00	; 0
     236:	b1 e0       	ldi	r27, 0x01	; 1
     238:	e2 ec       	ldi	r30, 0xC2	; 194
     23a:	fa e1       	ldi	r31, 0x1A	; 26
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0b bf       	out	0x3b, r16	; 59
     240:	02 c0       	rjmp	.+4      	; 0x246 <__do_copy_data+0x14>
     242:	07 90       	elpm	r0, Z+
     244:	0d 92       	st	X+, r0
     246:	a2 34       	cpi	r26, 0x42	; 66
     248:	b1 07       	cpc	r27, r17
     24a:	d9 f7       	brne	.-10     	; 0x242 <__do_copy_data+0x10>
     24c:	1b be       	out	0x3b, r1	; 59

0000024e <__do_clear_bss>:
     24e:	11 e0       	ldi	r17, 0x01	; 1
     250:	a2 e4       	ldi	r26, 0x42	; 66
     252:	b1 e0       	ldi	r27, 0x01	; 1
     254:	01 c0       	rjmp	.+2      	; 0x258 <.do_clear_bss_start>

00000256 <.do_clear_bss_loop>:
     256:	1d 92       	st	X+, r1

00000258 <.do_clear_bss_start>:
     258:	a4 36       	cpi	r26, 0x64	; 100
     25a:	b1 07       	cpc	r27, r17
     25c:	e1 f7       	brne	.-8      	; 0x256 <.do_clear_bss_loop>
     25e:	87 d0       	rcall	.+270    	; 0x36e <main>
     260:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <_exit>

00000264 <__bad_interrupt>:
     264:	cd ce       	rjmp	.-614    	; 0x0 <__vectors>

00000266 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     266:	9b b1       	in	r25, 0x0b	; 11
     268:	9f 70       	andi	r25, 0x0F	; 15
     26a:	98 2b       	or	r25, r24
     26c:	9b b9       	out	0x0b, r25	; 11
			}
     26e:	08 95       	ret

00000270 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     270:	84 b7       	in	r24, 0x34	; 52
     272:	87 7f       	andi	r24, 0xF7	; 247
     274:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     276:	28 e1       	ldi	r18, 0x18	; 24
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	20 93 60 00 	sts	0x0060, r18
     280:	10 92 60 00 	sts	0x0060, r1
     284:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	80 e8       	ldi	r24, 0x80	; 128
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	f8 94       	cli
     28e:	80 93 61 00 	sts	0x0061, r24
     292:	90 93 61 00 	sts	0x0061, r25
     296:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     298:	83 e3       	ldi	r24, 0x33	; 51
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	90 93 cd 00 	sts	0x00CD, r25
     2a0:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2a4:	86 e0       	ldi	r24, 0x06	; 6
     2a6:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2aa:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2ae:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     2b2:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2b4:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2b6:	8a b1       	in	r24, 0x0a	; 10
     2b8:	80 6f       	ori	r24, 0xF0	; 240
     2ba:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2bc:	8b b1       	in	r24, 0x0b	; 11
     2be:	8f 70       	andi	r24, 0x0F	; 15
     2c0:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     2c2:	b4 d4       	rcall	.+2408   	; 0xc2c <USB_Init>
     2c4:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <Serial_CreateStream>

000002cc <KeyboardHost_Task>:
     2cc:	cf 93       	push	r28
}
     2ce:	df 93       	push	r29

/** Task to manage an enumerated USB keyboard once connected, to display key state
 *  data as it is received.
 */
void KeyboardHost_Task(void)
{
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
     2d4:	28 97       	sbiw	r28, 0x08	; 8
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	f8 94       	cli
     2da:	de bf       	out	0x3e, r29	; 62
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	cd bf       	out	0x3d, r28	; 61
	if (USB_HostState != HOST_STATE_Configured)
     2e0:	80 91 4f 01 	lds	r24, 0x014F
     2e4:	8b 30       	cpi	r24, 0x0B	; 11
     2e6:	d1 f5       	brne	.+116    	; 0x35c <KeyboardHost_Task+0x90>
	  return;

	if (HID_Host_IsReportReceived(&Keyboard_HID_Interface))
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <HID_Host_IsReportReceived>
     2f0:	88 23       	and	r24, r24
     2f2:	a1 f1       	breq	.+104    	; 0x35c <KeyboardHost_Task+0x90>
	{
		USB_KeyboardReport_Data_t KeyboardReport;
		HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	be 01       	movw	r22, r28
     2fa:	6f 5f       	subi	r22, 0xFF	; 255
     2fc:	7f 4f       	sbci	r23, 0xFF	; 255
     2fe:	0e 94 b2 09 	call	0x1364	; 0x1364 <HID_Host_ReceiveReport>

		LEDs_ChangeLEDs(LEDS_LED1, (KeyboardReport.Modifier) ? LEDS_LED1 : 0);
     302:	89 81       	ldd	r24, Y+1	; 0x01
     304:	88 23       	and	r24, r24
     306:	11 f0       	breq	.+4      	; 0x30c <KeyboardHost_Task+0x40>
     308:	90 e1       	ldi	r25, 0x10	; 16
     30a:	01 c0       	rjmp	.+2      	; 0x30e <KeyboardHost_Task+0x42>
     30c:	90 e0       	ldi	r25, 0x00	; 0
			}

			static inline void LEDs_ChangeLEDs(const uint8_t LEDMask,
			                                   const uint8_t ActiveMask)
			{
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
     30e:	8b b1       	in	r24, 0x0b	; 11
     310:	8f 7e       	andi	r24, 0xEF	; 239
     312:	89 2b       	or	r24, r25
     314:	8b b9       	out	0x0b, r24	; 11

		uint8_t KeyCode = KeyboardReport.KeyCode[0];
     316:	8b 81       	ldd	r24, Y+3	; 0x03

		if (KeyCode)
     318:	88 23       	and	r24, r24
     31a:	01 f1       	breq	.+64     	; 0x35c <KeyboardHost_Task+0x90>
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PIND  = LEDMask;
     31c:	90 e2       	ldi	r25, 0x20	; 32
     31e:	99 b9       	out	0x09, r25	; 9
			char PressedKey = 0;

			LEDs_ToggleLEDs(LEDS_LED2);

			/* Retrieve pressed key character if alphanumeric */
			if ((KeyCode >= HID_KEYBOARD_SC_A) && (KeyCode <= HID_KEYBOARD_SC_Z))
     320:	98 2f       	mov	r25, r24
     322:	94 50       	subi	r25, 0x04	; 4
     324:	9a 31       	cpi	r25, 0x1A	; 26
     326:	10 f4       	brcc	.+4      	; 0x32c <KeyboardHost_Task+0x60>
			{
				PressedKey = (KeyCode - HID_KEYBOARD_SC_A) + 'A';
     328:	83 5c       	subi	r24, 0xC3	; 195
     32a:	11 c0       	rjmp	.+34     	; 0x34e <KeyboardHost_Task+0x82>
			}
			else if ((KeyCode >= HID_KEYBOARD_SC_1_AND_EXCLAMATION) &
     32c:	98 2f       	mov	r25, r24
     32e:	9e 51       	subi	r25, 0x1E	; 30
     330:	99 30       	cpi	r25, 0x09	; 9
     332:	10 f4       	brcc	.+4      	; 0x338 <KeyboardHost_Task+0x6c>
			         (KeyCode  < HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS))
			{
				PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
     334:	8d 5e       	subi	r24, 0xED	; 237
     336:	0b c0       	rjmp	.+22     	; 0x34e <KeyboardHost_Task+0x82>
			}
			else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
     338:	87 32       	cpi	r24, 0x27	; 39
     33a:	31 f0       	breq	.+12     	; 0x348 <KeyboardHost_Task+0x7c>
			{
				PressedKey = '0';
			}
			else if (KeyCode == HID_KEYBOARD_SC_SPACE)
     33c:	8c 32       	cpi	r24, 0x2C	; 44
     33e:	31 f0       	breq	.+12     	; 0x34c <KeyboardHost_Task+0x80>
			{
				PressedKey = ' ';
			}
			else if (KeyCode == HID_KEYBOARD_SC_ENTER)
     340:	88 32       	cpi	r24, 0x28	; 40
     342:	61 f4       	brne	.+24     	; 0x35c <KeyboardHost_Task+0x90>
			{
				PressedKey = '\n';
     344:	8a e0       	ldi	r24, 0x0A	; 10
     346:	03 c0       	rjmp	.+6      	; 0x34e <KeyboardHost_Task+0x82>
			{
				PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
			}
			else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
			{
				PressedKey = '0';
     348:	80 e3       	ldi	r24, 0x30	; 48
     34a:	01 c0       	rjmp	.+2      	; 0x34e <KeyboardHost_Task+0x82>
			}
			else if (KeyCode == HID_KEYBOARD_SC_SPACE)
			{
				PressedKey = ' ';
     34c:	80 e2       	ldi	r24, 0x20	; 32
			{
				PressedKey = '\n';
			}

			if (PressedKey)
			  putchar(PressedKey);
     34e:	60 91 60 01 	lds	r22, 0x0160
     352:	70 91 61 01 	lds	r23, 0x0161
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
		}
	}
}
     35c:	28 96       	adiw	r28, 0x08	; 8
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	f8 94       	cli
     362:	de bf       	out	0x3e, r29	; 62
     364:	0f be       	out	0x3f, r0	; 63
     366:	cd bf       	out	0x3d, r28	; 61
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	08 95       	ret

0000036e <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     36e:	80 df       	rcall	.-256    	; 0x270 <SetupHardware>
     370:	88 e9       	ldi	r24, 0x98	; 152

	puts_P(PSTR(ESC_FG_CYAN "Keyboard Host Demo running.\r\n" ESC_FG_WHITE));
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 c2 0a 	call	0x1584	; 0x1584 <puts_P>
     378:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     37a:	75 df       	rcall	.-278    	; 0x266 <LEDs_SetAllLEDs>
     37c:	78 94       	sei
     37e:	a6 df       	rcall	.-180    	; 0x2cc <KeyboardHost_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     380:	ed d6       	rcall	.+3546   	; 0x115c <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		KeyboardHost_Task();
     382:	fd cf       	rjmp	.-6      	; 0x37e <main+0x10>

00000384 <EVENT_USB_Host_DeviceAttached>:
     384:	80 ec       	ldi	r24, 0xC0	; 192

		HID_Host_USBTask(&Keyboard_HID_Interface);
		USB_USBTask();
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 c2 0a 	call	0x1584	; 0x1584 <puts_P>
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     38c:	80 ea       	ldi	r24, 0xA0	; 160
     38e:	6b cf       	rjmp	.-298    	; 0x266 <LEDs_SetAllLEDs>

00000390 <EVENT_USB_Host_DeviceUnattached>:
     390:	83 ed       	ldi	r24, 0xD3	; 211
}
     392:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     394:	0e 94 c2 0a 	call	0x1584	; 0x1584 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     398:	80 e1       	ldi	r24, 0x10	; 16
     39a:	65 cf       	rjmp	.-310    	; 0x266 <LEDs_SetAllLEDs>

0000039c <EVENT_USB_Host_DeviceEnumerationComplete>:
     39c:	cf 93       	push	r28
}
     39e:	df 93       	push	r29

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	c2 50       	subi	r28, 0x02	; 2
     3a6:	d2 40       	sbci	r29, 0x02	; 2
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     3b2:	80 ea       	ldi	r24, 0xA0	; 160
     3b4:	58 df       	rcall	.-336    	; 0x266 <LEDs_SetAllLEDs>
     3b6:	81 e0       	ldi	r24, 0x01	; 1

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     3b8:	be 01       	movw	r22, r28
     3ba:	6f 5f       	subi	r22, 0xFF	; 255
     3bc:	7f 4f       	sbci	r23, 0xFF	; 255
     3be:	ae 01       	movw	r20, r28
     3c0:	4d 5f       	subi	r20, 0xFD	; 253
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	20 e0       	ldi	r18, 0x00	; 0
     3c6:	32 e0       	ldi	r19, 0x02	; 2
     3c8:	df d4       	rcall	.+2494   	; 0xd88 <USB_Host_GetDeviceConfigDescriptor>
     3ca:	88 23       	and	r24, r24
     3cc:	19 f0       	breq	.+6      	; 0x3d4 <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
     3ce:	8a ee       	ldi	r24, 0xEA	; 234
     3d0:	90 e0       	ldi	r25, 0x00	; 0
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     3d2:	13 c0       	rjmp	.+38     	; 0x3fa <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
     3d4:	69 81       	ldd	r22, Y+1	; 0x01
     3d6:	7a 81       	ldd	r23, Y+2	; 0x02
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Keyboard_HID_Interface,
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	ae 01       	movw	r20, r28
     3de:	4d 5f       	subi	r20, 0xFD	; 253
     3e0:	5f 4f       	sbci	r21, 0xFF	; 255
     3e2:	f1 d6       	rcall	.+3554   	; 0x11c6 <HID_Host_ConfigurePipes>
     3e4:	88 23       	and	r24, r24
     3e6:	19 f0       	breq	.+6      	; 0x3ee <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
     3e8:	87 e1       	ldi	r24, 0x17	; 23
     3ea:	91 e0       	ldi	r25, 0x01	; 1
     3ec:	06 c0       	rjmp	.+12     	; 0x3fa <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Keyboard.\r\n"));
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	90 d6       	rcall	.+3360   	; 0x1112 <USB_Host_SetDeviceConfiguration>
     3f2:	88 23       	and	r24, r24
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     3f4:	31 f0       	breq	.+12     	; 0x402 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
     3f6:	8f e3       	ldi	r24, 0x3F	; 63
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	0e 94 c2 0a 	call	0x1584	; 0x1584 <puts_P>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     3fe:	80 e9       	ldi	r24, 0x90	; 144
     400:	14 c0       	rjmp	.+40     	; 0x42a <EVENT_USB_Host_DeviceEnumerationComplete+0x8e>
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     406:	0e 94 16 0a 	call	0x142c	; 0x142c <HID_Host_SetBootProtocol>
		return;
	}

	if (HID_Host_SetBootProtocol(&Keyboard_HID_Interface) != 0)
     40a:	88 23       	and	r24, r24
     40c:	49 f0       	breq	.+18     	; 0x420 <EVENT_USB_Host_DeviceEnumerationComplete+0x84>
     40e:	85 e6       	ldi	r24, 0x65	; 101
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 c2 0a 	call	0x1584	; 0x1584 <puts_P>
	{
		puts_P(PSTR("Could not Set Boot Protocol Mode.\r\n"));
     416:	80 e9       	ldi	r24, 0x90	; 144
     418:	26 df       	rcall	.-436    	; 0x266 <LEDs_SetAllLEDs>
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	7a d6       	rcall	.+3316   	; 0x1112 <USB_Host_SetDeviceConfiguration>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     41e:	06 c0       	rjmp	.+12     	; 0x42c <EVENT_USB_Host_DeviceEnumerationComplete+0x90>
     420:	89 e8       	ldi	r24, 0x89	; 137
     422:	91 e0       	ldi	r25, 0x01	; 1
		USB_Host_SetDeviceConfiguration(0);
     424:	0e 94 c2 0a 	call	0x1584	; 0x1584 <puts_P>
     428:	80 e6       	ldi	r24, 0x60	; 96
		return;
     42a:	1d df       	rcall	.-454    	; 0x266 <LEDs_SetAllLEDs>
	}

	puts_P(PSTR("Keyboard Enumerated.\r\n"));
     42c:	ce 5f       	subi	r28, 0xFE	; 254
     42e:	dd 4f       	sbci	r29, 0xFD	; 253
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	f8 94       	cli
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     434:	de bf       	out	0x3e, r29	; 62
     436:	0f be       	out	0x3f, r0	; 63
     438:	cd bf       	out	0x3d, r28	; 61
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <EVENT_USB_Host_HostError>:
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	0f 92       	push	r0
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
     44a:	89 83       	std	Y+1, r24	; 0x01
     44c:	87 d3       	rcall	.+1806   	; 0xb5c <USB_Disable>

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();
     44e:	00 d0       	rcall	.+0      	; 0x450 <EVENT_USB_Host_HostError+0x10>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     450:	00 d0       	rcall	.+0      	; 0x452 <EVENT_USB_Host_HostError+0x12>
     452:	ed b7       	in	r30, 0x3d	; 61
     454:	fe b7       	in	r31, 0x3e	; 62
     456:	31 96       	adiw	r30, 0x01	; 1
     458:	20 ea       	ldi	r18, 0xA0	; 160
     45a:	31 e0       	ldi	r19, 0x01	; 1
     45c:	ad b7       	in	r26, 0x3d	; 61
     45e:	be b7       	in	r27, 0x3e	; 62
     460:	12 96       	adiw	r26, 0x02	; 2
     462:	3c 93       	st	X, r19
     464:	2e 93       	st	-X, r18
     466:	11 97       	sbiw	r26, 0x01	; 1
     468:	89 81       	ldd	r24, Y+1	; 0x01
     46a:	82 83       	std	Z+2, r24	; 0x02
     46c:	13 82       	std	Z+3, r1	; 0x03
     46e:	0e 94 a3 0a 	call	0x1546	; 0x1546 <printf_P>
     472:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	80 e9       	ldi	r24, 0x90	; 144
     47c:	f4 de       	rcall	.-536    	; 0x266 <LEDs_SetAllLEDs>
     47e:	ff cf       	rjmp	.-2      	; 0x47e <EVENT_USB_Host_HostError+0x3e>

00000480 <EVENT_USB_Host_DeviceEnumerationFailed>:
     480:	90 91 4f 01 	lds	r25, 0x014F
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     484:	2d b7       	in	r18, 0x3d	; 61
     486:	3e b7       	in	r19, 0x3e	; 62
     488:	28 50       	subi	r18, 0x08	; 8
     48a:	30 40       	sbci	r19, 0x00	; 0
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	f8 94       	cli
     490:	3e bf       	out	0x3e, r19	; 62
     492:	0f be       	out	0x3f, r0	; 63
     494:	2d bf       	out	0x3d, r18	; 61
     496:	ed b7       	in	r30, 0x3d	; 61
     498:	fe b7       	in	r31, 0x3e	; 62
     49a:	31 96       	adiw	r30, 0x01	; 1
     49c:	2f ec       	ldi	r18, 0xCF	; 207
     49e:	31 e0       	ldi	r19, 0x01	; 1
     4a0:	ad b7       	in	r26, 0x3d	; 61
     4a2:	be b7       	in	r27, 0x3e	; 62
     4a4:	12 96       	adiw	r26, 0x02	; 2
     4a6:	3c 93       	st	X, r19
     4a8:	2e 93       	st	-X, r18
     4aa:	11 97       	sbiw	r26, 0x01	; 1
     4ac:	82 83       	std	Z+2, r24	; 0x02
     4ae:	13 82       	std	Z+3, r1	; 0x03
     4b0:	64 83       	std	Z+4, r22	; 0x04
     4b2:	15 82       	std	Z+5, r1	; 0x05
     4b4:	96 83       	std	Z+6, r25	; 0x06
     4b6:	17 82       	std	Z+7, r1	; 0x07
     4b8:	0e 94 a3 0a 	call	0x1546	; 0x1546 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4bc:	2d b7       	in	r18, 0x3d	; 61
     4be:	3e b7       	in	r19, 0x3e	; 62
     4c0:	28 5f       	subi	r18, 0xF8	; 248
     4c2:	3f 4f       	sbci	r19, 0xFF	; 255
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	3e bf       	out	0x3e, r19	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	2d bf       	out	0x3d, r18	; 61
     4ce:	80 e9       	ldi	r24, 0x90	; 144
     4d0:	ca ce       	rjmp	.-620    	; 0x266 <LEDs_SetAllLEDs>

000004d2 <USB_GetHIDReportSize>:
					for (uint8_t i = 0; i < UsageListSize; i++)
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4d2:	9c 01       	movw	r18, r24
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	44 0f       	add	r20, r20
     4dc:	55 1f       	adc	r21, r21
     4de:	42 0f       	add	r20, r18
     4e0:	53 1f       	adc	r21, r19
     4e2:	fa 01       	movw	r30, r20
     4e4:	e8 0f       	add	r30, r24
     4e6:	f9 1f       	adc	r31, r25
     4e8:	ef 56       	subi	r30, 0x6F	; 111
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     4ea:	fc 4f       	sbci	r31, 0xFC	; 252
     4ec:	a0 81       	ld	r26, Z
     4ee:	b1 81       	ldd	r27, Z+1	; 0x01
     4f0:	f9 01       	movw	r30, r18
     4f2:	e8 0f       	add	r30, r24
     4f4:	f9 1f       	adc	r31, r25
     4f6:	e0 57       	subi	r30, 0x70	; 112
     4f8:	fc 4f       	sbci	r31, 0xFC	; 252
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     4fa:	70 81       	ld	r23, Z
     4fc:	76 17       	cp	r23, r22
     4fe:	91 f4       	brne	.+36     	; 0x524 <USB_GetHIDReportSize+0x52>
     500:	cd 01       	movw	r24, r26
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     502:	87 70       	andi	r24, 0x07	; 7
     504:	90 70       	andi	r25, 0x00	; 0
     506:	21 e0       	ldi	r18, 0x01	; 1
				break;
     508:	30 e0       	ldi	r19, 0x00	; 0
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     50a:	00 97       	sbiw	r24, 0x00	; 0
     50c:	11 f4       	brne	.+4      	; 0x512 <USB_GetHIDReportSize+0x40>
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	cd 01       	movw	r24, r26
     514:	e3 e0       	ldi	r30, 0x03	; 3
     516:	96 95       	lsr	r25
     518:	87 95       	ror	r24
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     51a:	ea 95       	dec	r30
     51c:	e1 f7       	brne	.-8      	; 0x516 <USB_GetHIDReportSize+0x44>
					NewReportItem.CollectionPath = CurrCollectionPath;
     51e:	82 0f       	add	r24, r18
     520:	93 1f       	adc	r25, r19
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     522:	08 95       	ret
     524:	07 96       	adiw	r24, 0x07	; 7
     526:	86 34       	cpi	r24, 0x46	; 70
     528:	91 05       	cpc	r25, r1
     52a:	d9 f6       	brne	.-74     	; 0x4e2 <USB_GetHIDReportSize+0x10>

					if (UsageListSize)
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	90 e0       	ldi	r25, 0x00	; 0
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     530:	08 95       	ret

00000532 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     532:	80 91 9e 00 	lds	r24, 0x009E
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	81 70       	andi	r24, 0x01	; 1
     53a:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     53c:	20 91 a0 00 	lds	r18, 0x00A0
     540:	2d 7f       	andi	r18, 0xFD	; 253
     542:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     546:	20 91 9e 00 	lds	r18, 0x009E
     54a:	22 60       	ori	r18, 0x02	; 2
     54c:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     550:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     554:	21 fd       	sbrc	r18, 1
     556:	fc cf       	rjmp	.-8      	; 0x550 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     558:	20 91 9e 00 	lds	r18, 0x009E
     55c:	21 60       	ori	r18, 0x01	; 1
     55e:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     562:	10 92 45 01 	sts	0x0145, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     566:	20 91 a0 00 	lds	r18, 0x00A0
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	20 72       	andi	r18, 0x20	; 32
     56e:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     570:	40 91 a0 00 	lds	r20, 0x00A0
     574:	4f 7d       	andi	r20, 0xDF	; 223
     576:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     57a:	40 91 9f 00 	lds	r20, 0x009F
     57e:	4f 7d       	andi	r20, 0xDF	; 223
     580:	40 93 9f 00 	sts	0x009F, r20
     584:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     586:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     58a:	55 ff       	sbrs	r21, 5
     58c:	0b c0       	rjmp	.+22     	; 0x5a4 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     58e:	40 91 9f 00 	lds	r20, 0x009F
     592:	4f 7d       	andi	r20, 0xDF	; 223
     594:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     598:	40 91 9f 00 	lds	r20, 0x009F
     59c:	4d 7f       	andi	r20, 0xFD	; 253
     59e:	40 93 9f 00 	sts	0x009F, r20
     5a2:	08 c0       	rjmp	.+16     	; 0x5b4 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5a4:	ef ec       	ldi	r30, 0xCF	; 207
     5a6:	f7 e0       	ldi	r31, 0x07	; 7
     5a8:	31 97       	sbiw	r30, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <USB_Host_ResetDevice+0x76>
     5ac:	00 c0       	rjmp	.+0      	; 0x5ae <USB_Host_ResetDevice+0x7c>
     5ae:	00 00       	nop
     5b0:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     5b2:	49 f7       	brne	.-46     	; 0x586 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     5b4:	21 15       	cp	r18, r1
     5b6:	31 05       	cpc	r19, r1
     5b8:	29 f0       	breq	.+10     	; 0x5c4 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     5ba:	20 91 a0 00 	lds	r18, 0x00A0
     5be:	20 62       	ori	r18, 0x20	; 32
     5c0:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     5c4:	00 97       	sbiw	r24, 0x00	; 0
     5c6:	29 f4       	brne	.+10     	; 0x5d2 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     5c8:	80 91 9e 00 	lds	r24, 0x009E
     5cc:	8e 7f       	andi	r24, 0xFE	; 254
     5ce:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     5d2:	80 91 a0 00 	lds	r24, 0x00A0
     5d6:	82 60       	ori	r24, 0x02	; 2
     5d8:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     5dc:	08 95       	ret

000005de <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5de:	40 91 9e 00 	lds	r20, 0x009E
     5e2:	50 e0       	ldi	r21, 0x00	; 0
     5e4:	41 70       	andi	r20, 0x01	; 1
     5e6:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     5e8:	20 91 a0 00 	lds	r18, 0x00A0
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	20 72       	andi	r18, 0x20	; 32
     5f0:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     5f2:	90 91 a0 00 	lds	r25, 0x00A0
     5f6:	9f 7d       	andi	r25, 0xDF	; 223
     5f8:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     5fc:	90 91 9f 00 	lds	r25, 0x009F
     600:	9f 7d       	andi	r25, 0xDF	; 223
     602:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     606:	90 91 9e 00 	lds	r25, 0x009E
     60a:	91 60       	ori	r25, 0x01	; 1
     60c:	90 93 9e 00 	sts	0x009E, r25
     610:	26 c0       	rjmp	.+76     	; 0x65e <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     612:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     616:	95 ff       	sbrs	r25, 5
     618:	06 c0       	rjmp	.+12     	; 0x626 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     61a:	90 91 9f 00 	lds	r25, 0x009F
     61e:	9f 7d       	andi	r25, 0xDF	; 223
     620:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     624:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     626:	90 91 4f 01 	lds	r25, 0x014F
     62a:	91 30       	cpi	r25, 0x01	; 1
     62c:	d9 f0       	breq	.+54     	; 0x664 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     62e:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     632:	94 ff       	sbrs	r25, 4
     634:	09 c0       	rjmp	.+18     	; 0x648 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     636:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     63a:	80 91 a6 00 	lds	r24, 0x00A6
     63e:	8f 7e       	andi	r24, 0xEF	; 239
     640:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     644:	82 e0       	ldi	r24, 0x02	; 2

			break;
     646:	0f c0       	rjmp	.+30     	; 0x666 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     648:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     64c:	91 ff       	sbrs	r25, 1
     64e:	07 c0       	rjmp	.+14     	; 0x65e <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     650:	80 91 a6 00 	lds	r24, 0x00A6
     654:	8d 7f       	andi	r24, 0xFD	; 253
     656:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     65a:	83 e0       	ldi	r24, 0x03	; 3

			break;
     65c:	04 c0       	rjmp	.+8      	; 0x666 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     65e:	88 23       	and	r24, r24
     660:	c1 f6       	brne	.-80     	; 0x612 <USB_Host_WaitMS+0x34>
     662:	01 c0       	rjmp	.+2      	; 0x666 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     664:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     666:	41 15       	cp	r20, r1
     668:	51 05       	cpc	r21, r1
     66a:	29 f4       	brne	.+10     	; 0x676 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     66c:	90 91 9e 00 	lds	r25, 0x009E
     670:	9e 7f       	andi	r25, 0xFE	; 254
     672:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     676:	21 15       	cp	r18, r1
     678:	31 05       	cpc	r19, r1
     67a:	29 f0       	breq	.+10     	; 0x686 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     67c:	90 91 a0 00 	lds	r25, 0x00A0
     680:	90 62       	ori	r25, 0x20	; 32
     682:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     686:	08 95       	ret

00000688 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
     694:	28 97       	sbiw	r28, 0x08	; 8
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	f8 94       	cli
     69a:	de bf       	out	0x3e, r29	; 62
     69c:	0f be       	out	0x3f, r0	; 63
     69e:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     6a0:	80 91 4f 01 	lds	r24, 0x014F
     6a4:	85 30       	cpi	r24, 0x05	; 5
     6a6:	09 f4       	brne	.+2      	; 0x6aa <USB_Host_ProcessNextHostState+0x22>
     6a8:	99 c0       	rjmp	.+306    	; 0x7dc <USB_Host_ProcessNextHostState+0x154>
     6aa:	86 30       	cpi	r24, 0x06	; 6
     6ac:	68 f4       	brcc	.+26     	; 0x6c8 <USB_Host_ProcessNextHostState+0x40>
     6ae:	82 30       	cpi	r24, 0x02	; 2
     6b0:	c1 f1       	breq	.+112    	; 0x722 <USB_Host_ProcessNextHostState+0x9a>
     6b2:	83 30       	cpi	r24, 0x03	; 3
     6b4:	18 f4       	brcc	.+6      	; 0x6bc <USB_Host_ProcessNextHostState+0x34>
     6b6:	88 23       	and	r24, r24
     6b8:	a1 f0       	breq	.+40     	; 0x6e2 <USB_Host_ProcessNextHostState+0x5a>
     6ba:	04 c1       	rjmp	.+520    	; 0x8c4 <USB_Host_ProcessNextHostState+0x23c>
     6bc:	83 30       	cpi	r24, 0x03	; 3
     6be:	d9 f1       	breq	.+118    	; 0x736 <USB_Host_ProcessNextHostState+0xae>
     6c0:	84 30       	cpi	r24, 0x04	; 4
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <USB_Host_ProcessNextHostState+0x3e>
     6c4:	ff c0       	rjmp	.+510    	; 0x8c4 <USB_Host_ProcessNextHostState+0x23c>
     6c6:	62 c0       	rjmp	.+196    	; 0x78c <USB_Host_ProcessNextHostState+0x104>
     6c8:	87 30       	cpi	r24, 0x07	; 7
     6ca:	09 f4       	brne	.+2      	; 0x6ce <USB_Host_ProcessNextHostState+0x46>
     6cc:	9e c0       	rjmp	.+316    	; 0x80a <USB_Host_ProcessNextHostState+0x182>
     6ce:	87 30       	cpi	r24, 0x07	; 7
     6d0:	08 f4       	brcc	.+2      	; 0x6d4 <USB_Host_ProcessNextHostState+0x4c>
     6d2:	8f c0       	rjmp	.+286    	; 0x7f2 <USB_Host_ProcessNextHostState+0x16a>
     6d4:	88 30       	cpi	r24, 0x08	; 8
     6d6:	09 f4       	brne	.+2      	; 0x6da <USB_Host_ProcessNextHostState+0x52>
     6d8:	b8 c0       	rjmp	.+368    	; 0x84a <USB_Host_ProcessNextHostState+0x1c2>
     6da:	89 30       	cpi	r24, 0x09	; 9
     6dc:	09 f0       	breq	.+2      	; 0x6e0 <USB_Host_ProcessNextHostState+0x58>
     6de:	f2 c0       	rjmp	.+484    	; 0x8c4 <USB_Host_ProcessNextHostState+0x23c>
     6e0:	d9 c0       	rjmp	.+434    	; 0x894 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     6e2:	00 91 42 01 	lds	r16, 0x0142
     6e6:	10 91 43 01 	lds	r17, 0x0143
     6ea:	01 15       	cp	r16, r1
     6ec:	11 05       	cpc	r17, r1
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <USB_Host_ProcessNextHostState+0x6a>
     6f0:	e9 c0       	rjmp	.+466    	; 0x8c4 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	74 df       	rcall	.-280    	; 0x5de <USB_Host_WaitMS>
     6f6:	68 2f       	mov	r22, r24
     6f8:	88 23       	and	r24, r24
     6fa:	31 f0       	breq	.+12     	; 0x708 <USB_Host_ProcessNextHostState+0x80>
     6fc:	80 91 44 01 	lds	r24, 0x0144
				{
					USB_HostState = PostWaitState;
     700:	80 93 4f 01 	sts	0x014F, r24
     704:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     706:	d2 c0       	rjmp	.+420    	; 0x8ac <USB_Host_ProcessNextHostState+0x224>
					break;
     708:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
     70a:	10 40       	sbci	r17, 0x00	; 0
     70c:	10 93 43 01 	sts	0x0143, r17
     710:	00 93 42 01 	sts	0x0142, r16
     714:	01 15       	cp	r16, r1
     716:	11 05       	cpc	r17, r1
     718:	09 f0       	breq	.+2      	; 0x71c <USB_Host_ProcessNextHostState+0x94>
     71a:	d4 c0       	rjmp	.+424    	; 0x8c4 <USB_Host_ProcessNextHostState+0x23c>
     71c:	80 91 44 01 	lds	r24, 0x0144
				  USB_HostState = PostWaitState;
     720:	07 c0       	rjmp	.+14     	; 0x730 <USB_Host_ProcessNextHostState+0xa8>
     722:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     724:	93 e0       	ldi	r25, 0x03	; 3
     726:	90 93 43 01 	sts	0x0143, r25
     72a:	80 93 42 01 	sts	0x0142, r24
     72e:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     730:	80 93 4f 01 	sts	0x014F, r24
     734:	c7 c0       	rjmp	.+398    	; 0x8c4 <USB_Host_ProcessNextHostState+0x23c>
			break;
     736:	80 91 42 01 	lds	r24, 0x0142
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     73a:	90 91 43 01 	lds	r25, 0x0143
     73e:	9c 01       	movw	r18, r24
     740:	21 50       	subi	r18, 0x01	; 1
     742:	30 40       	sbci	r19, 0x00	; 0
     744:	30 93 43 01 	sts	0x0143, r19
     748:	20 93 42 01 	sts	0x0142, r18
     74c:	00 97       	sbiw	r24, 0x00	; 0
     74e:	39 f0       	breq	.+14     	; 0x75e <USB_Host_ProcessNextHostState+0xd6>
     750:	8f ec       	ldi	r24, 0xCF	; 207
     752:	97 e0       	ldi	r25, 0x07	; 7
     754:	01 97       	sbiw	r24, 0x01	; 1
     756:	f1 f7       	brne	.-4      	; 0x754 <USB_Host_ProcessNextHostState+0xcc>
     758:	00 c0       	rjmp	.+0      	; 0x75a <USB_Host_ProcessNextHostState+0xd2>
     75a:	00 00       	nop
     75c:	b3 c0       	rjmp	.+358    	; 0x8c4 <USB_Host_ProcessNextHostState+0x23c>
     75e:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     760:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     764:	80 61       	ori	r24, 0x10	; 16
     766:	80 93 d8 00 	sts	0x00D8, r24
     76a:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     76e:	8b 7f       	andi	r24, 0xFB	; 251
     770:	80 93 dd 00 	sts	0x00DD, r24
     774:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     778:	80 61       	ori	r24, 0x10	; 16
     77a:	80 93 d7 00 	sts	0x00D7, r24
     77e:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     782:	82 60       	ori	r24, 0x02	; 2
     784:	80 93 dd 00 	sts	0x00DD, r24
     788:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     78a:	d2 cf       	rjmp	.-92     	; 0x730 <USB_Host_ProcessNextHostState+0xa8>
     78c:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     790:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     792:	98 c0       	rjmp	.+304    	; 0x8c4 <USB_Host_ProcessNextHostState+0x23c>
     794:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     798:	8e 7f       	andi	r24, 0xFE	; 254
     79a:	80 93 9f 00 	sts	0x009F, r24
     79e:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     7a2:	8d 7f       	andi	r24, 0xFD	; 253
     7a4:	80 93 9f 00 	sts	0x009F, r24
     7a8:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     7ac:	8d 7f       	andi	r24, 0xFD	; 253
     7ae:	80 93 df 00 	sts	0x00DF, r24
     7b2:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     7b6:	82 60       	ori	r24, 0x02	; 2
     7b8:	80 93 de 00 	sts	0x00DE, r24
     7bc:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7c0:	81 60       	ori	r24, 0x01	; 1
     7c2:	80 93 9e 00 	sts	0x009E, r24
     7c6:	66 d1       	rcall	.+716    	; 0xa94 <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     7c8:	10 92 4f 01 	sts	0x014F, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     7cc:	84 e6       	ldi	r24, 0x64	; 100
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	90 93 43 01 	sts	0x0143, r25
     7d4:	80 93 42 01 	sts	0x0142, r24
     7d8:	85 e0       	ldi	r24, 0x05	; 5
     7da:	59 c0       	rjmp	.+178    	; 0x88e <USB_Host_ProcessNextHostState+0x206>
     7dc:	aa de       	rcall	.-684    	; 0x532 <USB_Host_ResetDevice>
     7de:	10 92 4f 01 	sts	0x014F, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     7e2:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	90 93 43 01 	sts	0x0143, r25
     7ea:	80 93 42 01 	sts	0x0142, r24
     7ee:	86 e0       	ldi	r24, 0x06	; 6
     7f0:	4e c0       	rjmp	.+156    	; 0x88e <USB_Host_ProcessNextHostState+0x206>
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     7f8:	20 e4       	ldi	r18, 0x40	; 64
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	01 e0       	ldi	r16, 0x01	; 1
     7fe:	c4 d0       	rcall	.+392    	; 0x988 <Pipe_ConfigurePipe>
     800:	88 23       	and	r24, r24
     802:	09 f4       	brne	.+2      	; 0x806 <USB_Host_ProcessNextHostState+0x17e>
     804:	4f c0       	rjmp	.+158    	; 0x8a4 <USB_Host_ProcessNextHostState+0x21c>
     806:	87 e0       	ldi	r24, 0x07	; 7
     808:	93 cf       	rjmp	.-218    	; 0x730 <USB_Host_ProcessNextHostState+0xa8>
     80a:	a7 e4       	ldi	r26, 0x47	; 71
     80c:	b1 e0       	ldi	r27, 0x01	; 1
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     80e:	e7 e1       	ldi	r30, 0x17	; 23
     810:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     812:	88 e0       	ldi	r24, 0x08	; 8
     814:	01 90       	ld	r0, Z+
     816:	0d 92       	st	X+, r0
     818:	81 50       	subi	r24, 0x01	; 1
     81a:	e1 f7       	brne	.-8      	; 0x814 <USB_Host_ProcessNextHostState+0x18c>
     81c:	10 92 a7 00 	sts	0x00A7, r1
     820:	ce 01       	movw	r24, r28
     822:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     824:	78 d3       	rcall	.+1776   	; 0xf16 <USB_Host_SendControlRequest>
     826:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     828:	88 23       	and	r24, r24
     82a:	09 f0       	breq	.+2      	; 0x82e <USB_Host_ProcessNextHostState+0x1a6>
     82c:	3e c0       	rjmp	.+124    	; 0x8aa <USB_Host_ProcessNextHostState+0x222>
     82e:	88 85       	ldd	r24, Y+8	; 0x08
     830:	80 93 27 01 	sts	0x0127, r24
     834:	7e de       	rcall	.-772    	; 0x532 <USB_Host_ResetDevice>
     836:	10 92 4f 01 	sts	0x014F, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     83a:	88 ec       	ldi	r24, 0xC8	; 200
     83c:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
     83e:	90 93 43 01 	sts	0x0143, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     842:	80 93 42 01 	sts	0x0142, r24
     846:	88 e0       	ldi	r24, 0x08	; 8
     848:	22 c0       	rjmp	.+68     	; 0x88e <USB_Host_ProcessNextHostState+0x206>
     84a:	20 91 27 01 	lds	r18, 0x0127
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	40 e0       	ldi	r20, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     856:	01 e0       	ldi	r16, 0x01	; 1
     858:	97 d0       	rcall	.+302    	; 0x988 <Pipe_ConfigurePipe>
     85a:	88 23       	and	r24, r24
     85c:	19 f1       	breq	.+70     	; 0x8a4 <USB_Host_ProcessNextHostState+0x21c>
     85e:	a7 e4       	ldi	r26, 0x47	; 71
     860:	b1 e0       	ldi	r27, 0x01	; 1
     862:	ef e1       	ldi	r30, 0x1F	; 31
     864:	f1 e0       	ldi	r31, 0x01	; 1
     866:	88 e0       	ldi	r24, 0x08	; 8
     868:	01 90       	ld	r0, Z+
     86a:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     86c:	81 50       	subi	r24, 0x01	; 1
     86e:	e1 f7       	brne	.-8      	; 0x868 <USB_Host_ProcessNextHostState+0x1e0>
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	50 d3       	rcall	.+1696   	; 0xf16 <USB_Host_SendControlRequest>
     876:	68 2f       	mov	r22, r24
     878:	88 23       	and	r24, r24
     87a:	b9 f4       	brne	.+46     	; 0x8aa <USB_Host_ProcessNextHostState+0x222>
     87c:	10 92 4f 01 	sts	0x014F, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     880:	84 e6       	ldi	r24, 0x64	; 100
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	90 93 43 01 	sts	0x0143, r25
     888:	80 93 42 01 	sts	0x0142, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     88c:	89 e0       	ldi	r24, 0x09	; 9
     88e:	80 93 44 01 	sts	0x0144, r24
     892:	18 c0       	rjmp	.+48     	; 0x8c4 <USB_Host_ProcessNextHostState+0x23c>
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	80 93 a1 00 	sts	0x00A1, r24
     89a:	8a e0       	ldi	r24, 0x0A	; 10
     89c:	80 93 4f 01 	sts	0x014F, r24
     8a0:	7d dd       	rcall	.-1286   	; 0x39c <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     8a2:	10 c0       	rjmp	.+32     	; 0x8c4 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     8a4:	60 e0       	ldi	r22, 0x00	; 0
     8a6:	84 e0       	ldi	r24, 0x04	; 4
     8a8:	01 c0       	rjmp	.+2      	; 0x8ac <USB_Host_ProcessNextHostState+0x224>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	90 91 4f 01 	lds	r25, 0x014F

			EVENT_USB_Host_DeviceEnumerationComplete();
     8b0:	91 30       	cpi	r25, 0x01	; 1
     8b2:	41 f0       	breq	.+16     	; 0x8c4 <USB_Host_ProcessNextHostState+0x23c>
			break;
     8b4:	e5 dd       	rcall	.-1078   	; 0x480 <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     8b6:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     8ba:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     8bc:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     8c0:	67 dd       	rcall	.-1330   	; 0x390 <EVENT_USB_Host_DeviceUnattached>
     8c2:	64 d1       	rcall	.+712    	; 0xb8c <USB_ResetInterface>
     8c4:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16

		USB_ResetInterface();
     8d8:	08 95       	ret

000008da <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     8da:	af 92       	push	r10
     8dc:	bf 92       	push	r11
     8de:	cf 92       	push	r12
     8e0:	df 92       	push	r13
     8e2:	ff 92       	push	r15
     8e4:	0f 93       	push	r16
     8e6:	1f 93       	push	r17
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	5c 01       	movw	r10, r24
     8ee:	eb 01       	movw	r28, r22
     8f0:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     8f2:	80 91 aa 00 	lds	r24, 0x00AA
     8f6:	8f 7c       	andi	r24, 0xCF	; 207
     8f8:	80 61       	ori	r24, 0x10	; 16
     8fa:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     8fe:	00 d1       	rcall	.+512    	; 0xb00 <Pipe_WaitUntilReady>
     900:	f8 2e       	mov	r15, r24
     902:	88 23       	and	r24, r24
     904:	b1 f5       	brne	.+108    	; 0x972 <Pipe_Read_Stream_LE+0x98>
     906:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     908:	d1 04       	cpc	r13, r1
     90a:	41 f0       	breq	.+16     	; 0x91c <Pipe_Read_Stream_LE+0x42>
     90c:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     90e:	00 81       	ld	r16, Z
     910:	11 81       	ldd	r17, Z+1	; 0x01
     912:	c0 1b       	sub	r28, r16
     914:	d1 0b       	sbc	r29, r17
     916:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     918:	1b 1d       	adc	r17, r11
     91a:	01 c0       	rjmp	.+2      	; 0x91e <Pipe_Read_Stream_LE+0x44>
     91c:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     91e:	aa 24       	eor	r10, r10
     920:	bb 24       	eor	r11, r11
     922:	23 c0       	rjmp	.+70     	; 0x96a <Pipe_Read_Stream_LE+0x90>
     924:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     928:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     92a:	16 c0       	rjmp	.+44     	; 0x958 <Pipe_Read_Stream_LE+0x7e>
     92c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     930:	8e 77       	andi	r24, 0x7E	; 126
     932:	80 93 a6 00 	sts	0x00A6, r24
     936:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     938:	d1 04       	cpc	r13, r1
     93a:	51 f0       	breq	.+20     	; 0x950 <Pipe_Read_Stream_LE+0x76>
     93c:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     93e:	80 81       	ld	r24, Z
     940:	91 81       	ldd	r25, Z+1	; 0x01
     942:	8a 0d       	add	r24, r10
     944:	9b 1d       	adc	r25, r11
     946:	91 83       	std	Z+1, r25	; 0x01
     948:	80 83       	st	Z, r24
     94a:	64 e0       	ldi	r22, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     94c:	f6 2e       	mov	r15, r22
     94e:	11 c0       	rjmp	.+34     	; 0x972 <Pipe_Read_Stream_LE+0x98>
     950:	d7 d0       	rcall	.+430    	; 0xb00 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     952:	88 23       	and	r24, r24
     954:	51 f0       	breq	.+20     	; 0x96a <Pipe_Read_Stream_LE+0x90>
     956:	0c c0       	rjmp	.+24     	; 0x970 <Pipe_Read_Stream_LE+0x96>
     958:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     95c:	f8 01       	movw	r30, r16
     95e:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     960:	8f 01       	movw	r16, r30
     962:	21 97       	sbiw	r28, 0x01	; 1
     964:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     966:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     968:	b1 1c       	adc	r11, r1
     96a:	20 97       	sbiw	r28, 0x00	; 0
     96c:	d9 f6       	brne	.-74     	; 0x924 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     96e:	01 c0       	rjmp	.+2      	; 0x972 <Pipe_Read_Stream_LE+0x98>
     970:	f8 2e       	mov	r15, r24
     972:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     974:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     976:	cf 91       	pop	r28
     978:	1f 91       	pop	r17
     97a:	0f 91       	pop	r16
     97c:	ff 90       	pop	r15
     97e:	df 90       	pop	r13
     980:	cf 90       	pop	r12
     982:	bf 90       	pop	r11
     984:	af 90       	pop	r10
     986:	08 95       	ret

00000988 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     988:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     98a:	58 2f       	mov	r21, r24
     98c:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     98e:	87 ff       	sbrs	r24, 7
     990:	02 c0       	rjmp	.+4      	; 0x996 <Pipe_ConfigurePipe+0xe>
     992:	80 e1       	ldi	r24, 0x10	; 16
     994:	01 c0       	rjmp	.+2      	; 0x998 <Pipe_ConfigurePipe+0x10>
     996:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     998:	57 30       	cpi	r21, 0x07	; 7
     99a:	08 f0       	brcs	.+2      	; 0x99e <Pipe_ConfigurePipe+0x16>
     99c:	57 c0       	rjmp	.+174    	; 0xa4c <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     99e:	66 23       	and	r22, r22
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     9a2:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     9a4:	4f 70       	andi	r20, 0x0F	; 15
     9a6:	62 95       	swap	r22
     9a8:	66 0f       	add	r22, r22
     9aa:	66 0f       	add	r22, r22
     9ac:	60 7c       	andi	r22, 0xC0	; 192
     9ae:	64 2b       	or	r22, r20
     9b0:	68 2b       	or	r22, r24
     9b2:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9b4:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     9b6:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     9ba:	45 17       	cp	r20, r21
     9bc:	a9 f4       	brne	.+42     	; 0x9e8 <Pipe_ConfigurePipe+0x60>
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     9c0:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	03 c0       	rjmp	.+6      	; 0x9ce <Pipe_ConfigurePipe+0x46>
     9c8:	88 e0       	ldi	r24, 0x08	; 8
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     9ce:	82 17       	cp	r24, r18
     9d0:	93 07       	cpc	r25, r19
     9d2:	10 f4       	brcc	.+4      	; 0x9d8 <Pipe_ConfigurePipe+0x50>
     9d4:	75 30       	cpi	r23, 0x05	; 5
     9d6:	a1 f7       	brne	.-24     	; 0x9c0 <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     9d8:	87 2f       	mov	r24, r23
     9da:	82 95       	swap	r24
     9dc:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9de:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     9e0:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     9e2:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     9e4:	e0 e0       	ldi	r30, 0x00	; 0
     9e6:	08 c0       	rjmp	.+16     	; 0x9f8 <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     9e8:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     9ec:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     9f0:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     9f4:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     9f8:	81 ff       	sbrs	r24, 1
     9fa:	20 c0       	rjmp	.+64     	; 0xa3c <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     9fc:	90 91 a9 00 	lds	r25, 0x00A9
     a00:	9e 7f       	andi	r25, 0xFE	; 254
     a02:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     a06:	90 91 ab 00 	lds	r25, 0x00AB
     a0a:	9d 7f       	andi	r25, 0xFD	; 253
     a0c:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     a10:	90 91 a9 00 	lds	r25, 0x00A9
     a14:	91 60       	ori	r25, 0x01	; 1
     a16:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     a1a:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     a1e:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     a22:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     a26:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     a2a:	80 91 a9 00 	lds	r24, 0x00A9
     a2e:	80 62       	ori	r24, 0x20	; 32
     a30:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a34:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     a38:	87 ff       	sbrs	r24, 7
     a3a:	08 c0       	rjmp	.+16     	; 0xa4c <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a3c:	4f 5f       	subi	r20, 0xFF	; 255
     a3e:	47 30       	cpi	r20, 0x07	; 7
     a40:	09 f0       	breq	.+2      	; 0xa44 <Pipe_ConfigurePipe+0xbc>
     a42:	b9 cf       	rjmp	.-142    	; 0x9b6 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a44:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	01 c0       	rjmp	.+2      	; 0xa4e <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     a4c:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     a4e:	0f 91       	pop	r16
     a50:	08 95       	ret

00000a52 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     a52:	ff 92       	push	r15
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
     a5e:	ec 01       	movw	r28, r24
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     a60:	ff 24       	eor	r15, r15
     a62:	0d c0       	rjmp	.+26     	; 0xa7e <Pipe_ConfigurePipeTable+0x2c>
	{
		if (!(Table[i].Address))
     a64:	88 81       	ld	r24, Y
     a66:	88 23       	and	r24, r24
     a68:	41 f0       	breq	.+16     	; 0xa7a <Pipe_ConfigurePipeTable+0x28>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     a6a:	29 81       	ldd	r18, Y+1	; 0x01
     a6c:	3a 81       	ldd	r19, Y+2	; 0x02
     a6e:	6c 81       	ldd	r22, Y+4	; 0x04
     a70:	4b 81       	ldd	r20, Y+3	; 0x03
     a72:	0d 81       	ldd	r16, Y+5	; 0x05
     a74:	89 df       	rcall	.-238    	; 0x988 <Pipe_ConfigurePipe>
     a76:	88 23       	and	r24, r24
     a78:	31 f0       	breq	.+12     	; 0xa86 <Pipe_ConfigurePipeTable+0x34>
     a7a:	f3 94       	inc	r15
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     a7c:	26 96       	adiw	r28, 0x06	; 6
     a7e:	f1 16       	cp	r15, r17
     a80:	89 f7       	brne	.-30     	; 0xa64 <Pipe_ConfigurePipeTable+0x12>
     a82:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}
	
	return true;
     a84:	01 c0       	rjmp	.+2      	; 0xa88 <Pipe_ConfigurePipeTable+0x36>
     a86:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
     a88:	df 91       	pop	r29
		}
	}
	
	return true;
}
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	ff 90       	pop	r15
     a92:	08 95       	ret

00000a94 <Pipe_ClearPipes>:
     a94:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     a9e:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     aa2:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     aa6:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     aaa:	90 91 a9 00 	lds	r25, 0x00A9
     aae:	9e 7f       	andi	r25, 0xFE	; 254
     ab0:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     ab4:	8f 5f       	subi	r24, 0xFF	; 255
     ab6:	87 30       	cpi	r24, 0x07	; 7
     ab8:	81 f7       	brne	.-32     	; 0xa9a <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     aba:	08 95       	ret

00000abc <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     abc:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     ac0:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     ac4:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ac6:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     aca:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     ace:	27 ff       	sbrs	r18, 7
     ad0:	0c c0       	rjmp	.+24     	; 0xaea <Pipe_IsEndpointBound+0x2e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     ad2:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     ad6:	53 2f       	mov	r21, r19
     ad8:	5f 70       	andi	r21, 0x0F	; 15
     ada:	30 ff       	sbrs	r19, 0
     adc:	02 c0       	rjmp	.+4      	; 0xae2 <Pipe_IsEndpointBound+0x26>
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	01 c0       	rjmp	.+2      	; 0xae4 <Pipe_IsEndpointBound+0x28>
     ae2:	20 e8       	ldi	r18, 0x80	; 128
     ae4:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     ae6:	28 17       	cp	r18, r24
     ae8:	49 f0       	breq	.+18     	; 0xafc <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     aea:	9f 5f       	subi	r25, 0xFF	; 255
     aec:	97 30       	cpi	r25, 0x07	; 7
     aee:	59 f7       	brne	.-42     	; 0xac6 <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     af0:	84 2f       	mov	r24, r20
     af2:	8f 70       	andi	r24, 0x0F	; 15
     af4:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     afc:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     afe:	08 95       	ret

00000b00 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b00:	80 91 a2 00 	lds	r24, 0x00A2
     b04:	90 91 a3 00 	lds	r25, 0x00A3
     b08:	45 e6       	ldi	r20, 0x65	; 101
     b0a:	01 c0       	rjmp	.+2      	; 0xb0e <Pipe_WaitUntilReady+0xe>
     b0c:	c9 01       	movw	r24, r18
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b0e:	20 91 aa 00 	lds	r18, 0x00AA
     b12:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     b14:	20 31       	cpi	r18, 0x10	; 16
     b16:	29 f4       	brne	.+10     	; 0xb22 <Pipe_WaitUntilReady+0x22>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     b18:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     b1c:	20 ff       	sbrs	r18, 0
     b1e:	05 c0       	rjmp	.+10     	; 0xb2a <Pipe_WaitUntilReady+0x2a>
     b20:	17 c0       	rjmp	.+46     	; 0xb50 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     b22:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     b26:	22 fd       	sbrc	r18, 2
     b28:	13 c0       	rjmp	.+38     	; 0xb50 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b2a:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b2e:	21 fd       	sbrc	r18, 1
     b30:	11 c0       	rjmp	.+34     	; 0xb54 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b32:	20 91 4f 01 	lds	r18, 0x014F
     b36:	21 30       	cpi	r18, 0x01	; 1
     b38:	79 f0       	breq	.+30     	; 0xb58 <Pipe_WaitUntilReady+0x58>
     b3a:	20 91 a2 00 	lds	r18, 0x00A2
     b3e:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b42:	28 17       	cp	r18, r24
     b44:	39 07       	cpc	r19, r25
     b46:	19 f3       	breq	.-58     	; 0xb0e <Pipe_WaitUntilReady+0xe>
     b48:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b4a:	01 f7       	brne	.-64     	; 0xb0c <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_Timeout;
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	08 95       	ret
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     b58:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     b5a:	08 95       	ret

00000b5c <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     b5c:	75 d0       	rcall	.+234    	; 0xc48 <USB_INT_DisableAllInterrupts>
     b5e:	7c d0       	rcall	.+248    	; 0xc58 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b60:	e0 ee       	ldi	r30, 0xE0	; 224
     b62:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     b64:	80 81       	ld	r24, Z
     b66:	81 60       	ori	r24, 0x01	; 1
     b68:	80 83       	st	Z, r24
     b6a:	e8 ed       	ldi	r30, 0xD8	; 216
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     b6e:	80 81       	ld	r24, Z
     b70:	8f 77       	andi	r24, 0x7F	; 127
     b72:	80 83       	st	Z, r24
     b74:	19 bc       	out	0x29, r1	; 41
     b76:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b78:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     b7a:	8c 91       	ld	r24, X
     b7c:	8e 7f       	andi	r24, 0xFE	; 254
     b7e:	8c 93       	st	X, r24
     b80:	80 81       	ld	r24, Z
     b82:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     b84:	80 83       	st	Z, r24
     b86:	10 92 46 01 	sts	0x0146, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     b8a:	08 95       	ret

00000b8c <USB_ResetInterface>:
     b8c:	5d d0       	rcall	.+186    	; 0xc48 <USB_INT_DisableAllInterrupts>
}
     b8e:	64 d0       	rcall	.+200    	; 0xc58 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     b90:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     b94:	8f 77       	andi	r24, 0x7F	; 127
     b96:	80 93 d8 00 	sts	0x00D8, r24
     b9a:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     b9e:	80 68       	ori	r24, 0x80	; 128
     ba0:	80 93 d8 00 	sts	0x00D8, r24
     ba4:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     ba8:	8f 7d       	andi	r24, 0xDF	; 223
     baa:	80 93 d8 00 	sts	0x00D8, r24
     bae:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     bb2:	8f 77       	andi	r24, 0x7F	; 127
     bb4:	80 93 d7 00 	sts	0x00D7, r24
     bb8:	8c e0       	ldi	r24, 0x0C	; 12
     bba:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     bbc:	8e e0       	ldi	r24, 0x0E	; 14
     bbe:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     bc0:	09 b4       	in	r0, 0x29	; 41
     bc2:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     bc4:	fd cf       	rjmp	.-6      	; 0xbc0 <USB_ResetInterface+0x34>
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	80 93 4f 01 	sts	0x014F, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     bcc:	10 92 45 01 	sts	0x0145, r1
	USB_Host_ConfigurationNumber = 0;
     bd0:	80 e4       	ldi	r24, 0x40	; 64
     bd2:	80 93 27 01 	sts	0x0127, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     bd6:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     bda:	80 64       	ori	r24, 0x40	; 64
     bdc:	80 93 d8 00 	sts	0x00D8, r24
     be0:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     be4:	81 60       	ori	r24, 0x01	; 1
     be6:	80 93 dd 00 	sts	0x00DD, r24
     bea:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     bee:	84 60       	ori	r24, 0x04	; 4
     bf0:	80 93 dd 00 	sts	0x00DD, r24
     bf4:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     bf8:	8f 7e       	andi	r24, 0xEF	; 239
     bfa:	80 93 d7 00 	sts	0x00D7, r24
     bfe:	6f 9a       	sbi	0x0d, 7	; 13
     c00:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     c02:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     c06:	81 60       	ori	r24, 0x01	; 1
     c08:	80 93 de 00 	sts	0x00DE, r24
     c0c:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     c10:	84 60       	ori	r24, 0x04	; 4
     c12:	80 93 de 00 	sts	0x00DE, r24
     c16:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c1a:	8e 7f       	andi	r24, 0xFE	; 254
     c1c:	80 93 e0 00 	sts	0x00E0, r24
     c20:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     c24:	80 61       	ori	r24, 0x10	; 16
     c26:	80 93 d8 00 	sts	0x00D8, r24
     c2a:	08 95       	ret

00000c2c <USB_Init>:
     c2c:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     c30:	80 81       	ld	r24, Z
     c32:	8f 7e       	andi	r24, 0xEF	; 239
     c34:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     c36:	e7 ed       	ldi	r30, 0xD7	; 215
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	81 60       	ori	r24, 0x01	; 1
     c3e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	80 93 46 01 	sts	0x0146, r24

	USB_ResetInterface();
     c46:	a2 cf       	rjmp	.-188    	; 0xb8c <USB_ResetInterface>

00000c48 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     c48:	e8 ed       	ldi	r30, 0xD8	; 216
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	8c 7f       	andi	r24, 0xFC	; 252
     c50:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     c52:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     c56:	08 95       	ret

00000c58 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     c58:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     c5c:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     c60:	08 95       	ret

00000c62 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c62:	1f 92       	push	r1
     c64:	0f 92       	push	r0
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	0f 92       	push	r0
     c6a:	0b b6       	in	r0, 0x3b	; 59
     c6c:	0f 92       	push	r0
     c6e:	11 24       	eor	r1, r1
     c70:	2f 93       	push	r18
     c72:	3f 93       	push	r19
     c74:	4f 93       	push	r20
     c76:	5f 93       	push	r21
     c78:	6f 93       	push	r22
     c7a:	7f 93       	push	r23
     c7c:	8f 93       	push	r24
     c7e:	9f 93       	push	r25
     c80:	af 93       	push	r26
     c82:	bf 93       	push	r27
     c84:	ef 93       	push	r30
     c86:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c88:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     c8c:	85 ff       	sbrs	r24, 5
     c8e:	0a c0       	rjmp	.+20     	; 0xca4 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c90:	80 91 a0 00 	lds	r24, 0x00A0
     c94:	85 ff       	sbrs	r24, 5
     c96:	06 c0       	rjmp	.+12     	; 0xca4 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c98:	80 91 9f 00 	lds	r24, 0x009F
     c9c:	8f 7d       	andi	r24, 0xDF	; 223
     c9e:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     ca2:	10 d1       	rcall	.+544    	; 0xec4 <USB_Event_Stub>
     ca4:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     ca8:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     caa:	15 c0       	rjmp	.+42     	; 0xcd6 <__vector_10+0x74>
     cac:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     cb0:	81 ff       	sbrs	r24, 1
     cb2:	11 c0       	rjmp	.+34     	; 0xcd6 <__vector_10+0x74>
     cb4:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     cb8:	8d 7f       	andi	r24, 0xFD	; 253
     cba:	80 93 9f 00 	sts	0x009F, r24
     cbe:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     cc2:	8e 7f       	andi	r24, 0xFE	; 254
     cc4:	80 93 9f 00 	sts	0x009F, r24
     cc8:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     ccc:	8d 7f       	andi	r24, 0xFD	; 253
     cce:	80 93 a0 00 	sts	0x00A0, r24
     cd2:	5e db       	rcall	.-2372   	; 0x390 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     cd4:	5b df       	rcall	.-330    	; 0xb8c <USB_ResetInterface>
     cd6:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     cda:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     cdc:	15 c0       	rjmp	.+42     	; 0xd08 <__vector_10+0xa6>
     cde:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     ce2:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     ce4:	11 c0       	rjmp	.+34     	; 0xd08 <__vector_10+0xa6>
     ce6:	80 91 df 00 	lds	r24, 0x00DF
     cea:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     cec:	80 93 df 00 	sts	0x00DF, r24
     cf0:	77 98       	cbi	0x0e, 7	; 14
     cf2:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     cf6:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     cf8:	80 93 dd 00 	sts	0x00DD, r24
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	a0 db       	rcall	.-2240   	; 0x440 <EVENT_USB_Host_HostError>
     d00:	47 db       	rcall	.-2418   	; 0x390 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	80 93 4f 01 	sts	0x014F, r24
		EVENT_USB_Host_DeviceUnattached();
     d08:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     d0c:	80 ff       	sbrs	r24, 0
     d0e:	17 c0       	rjmp	.+46     	; 0xd3e <__vector_10+0xdc>
     d10:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     d14:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     d16:	13 c0       	rjmp	.+38     	; 0xd3e <__vector_10+0xdc>
     d18:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     d1c:	8e 7f       	andi	r24, 0xFE	; 254
     d1e:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     d22:	80 91 de 00 	lds	r24, 0x00DE
     d26:	8e 7f       	andi	r24, 0xFE	; 254
     d28:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     d2c:	2b db       	rcall	.-2474   	; 0x384 <EVENT_USB_Host_DeviceAttached>
     d2e:	80 91 a0 00 	lds	r24, 0x00A0
     d32:	82 60       	ori	r24, 0x02	; 2
     d34:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     d38:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     d3a:	80 93 4f 01 	sts	0x014F, r24
     d3e:	80 91 df 00 	lds	r24, 0x00DF
     d42:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     d44:	0e c0       	rjmp	.+28     	; 0xd62 <__vector_10+0x100>
     d46:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     d4a:	82 ff       	sbrs	r24, 2
     d4c:	0a c0       	rjmp	.+20     	; 0xd62 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     d4e:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     d52:	8b 7f       	andi	r24, 0xFB	; 251
     d54:	80 93 df 00 	sts	0x00DF, r24
     d58:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	91 db       	rcall	.-2270   	; 0x480 <EVENT_USB_Host_DeviceEnumerationFailed>
     d5e:	18 db       	rcall	.-2512   	; 0x390 <EVENT_USB_Host_DeviceUnattached>
     d60:	15 df       	rcall	.-470    	; 0xb8c <USB_ResetInterface>
     d62:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     d64:	ef 91       	pop	r30
     d66:	bf 91       	pop	r27
     d68:	af 91       	pop	r26
     d6a:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     d6c:	8f 91       	pop	r24
     d6e:	7f 91       	pop	r23

		USB_ResetInterface();
     d70:	6f 91       	pop	r22
     d72:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d74:	4f 91       	pop	r20
     d76:	3f 91       	pop	r19
     d78:	2f 91       	pop	r18
     d7a:	0f 90       	pop	r0
     d7c:	0b be       	out	0x3b, r0	; 59
     d7e:	0f 90       	pop	r0
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	0f 90       	pop	r0
     d84:	1f 90       	pop	r1
     d86:	18 95       	reti

00000d88 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     d88:	cf 92       	push	r12
     d8a:	df 92       	push	r13
     d8c:	ef 92       	push	r14
     d8e:	ff 92       	push	r15
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	29 97       	sbiw	r28, 0x09	; 9
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	6b 01       	movw	r12, r22
     daa:	8a 01       	movw	r16, r20
     dac:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     dae:	90 e8       	ldi	r25, 0x80	; 128
     db0:	90 93 47 01 	sts	0x0147, r25
     db4:	96 e0       	ldi	r25, 0x06	; 6
     db6:	90 93 48 01 	sts	0x0148, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     dc0:	90 93 4a 01 	sts	0x014A, r25
     dc4:	80 93 49 01 	sts	0x0149, r24
     dc8:	10 92 4c 01 	sts	0x014C, r1
     dcc:	10 92 4b 01 	sts	0x014B, r1
     dd0:	89 e0       	ldi	r24, 0x09	; 9
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	90 93 4e 01 	sts	0x014E, r25
     dd8:	80 93 4d 01 	sts	0x014D, r24
     ddc:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     de0:	ce 01       	movw	r24, r28
     de2:	01 96       	adiw	r24, 0x01	; 1
     de4:	98 d0       	rcall	.+304    	; 0xf16 <USB_Host_SendControlRequest>
     de6:	88 23       	and	r24, r24
     de8:	b9 f4       	brne	.+46     	; 0xe18 <USB_Host_GetDeviceConfigDescriptor+0x90>
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     dec:	9c 81       	ldd	r25, Y+4	; 0x04
     dee:	f6 01       	movw	r30, r12
     df0:	91 83       	std	Z+1, r25	; 0x01
     df2:	80 83       	st	Z, r24
     df4:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
     df6:	f9 06       	cpc	r15, r25
     df8:	70 f0       	brcs	.+28     	; 0xe16 <USB_Host_GetDeviceConfigDescriptor+0x8e>
     dfa:	90 93 4e 01 	sts	0x014E, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     dfe:	80 93 4d 01 	sts	0x014D, r24
     e02:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     e04:	88 d0       	rcall	.+272    	; 0xf16 <USB_Host_SendControlRequest>
     e06:	88 23       	and	r24, r24
     e08:	39 f4       	brne	.+14     	; 0xe18 <USB_Host_GetDeviceConfigDescriptor+0x90>
     e0a:	f8 01       	movw	r30, r16
     e0c:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	19 f0       	breq	.+6      	; 0xe18 <USB_Host_GetDeviceConfigDescriptor+0x90>
     e12:	86 e0       	ldi	r24, 0x06	; 6
     e14:	01 c0       	rjmp	.+2      	; 0xe18 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     e16:	85 e0       	ldi	r24, 0x05	; 5
     e18:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     e1a:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	1f 91       	pop	r17
     e2a:	0f 91       	pop	r16
     e2c:	ff 90       	pop	r15
     e2e:	ef 90       	pop	r14
     e30:	df 90       	pop	r13
     e32:	cf 90       	pop	r12
     e34:	08 95       	ret

00000e36 <USB_GetNextDescriptorComp>:
     e36:	af 92       	push	r10
     e38:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     e3a:	cf 92       	push	r12
     e3c:	df 92       	push	r13
     e3e:	ef 92       	push	r14
     e40:	ff 92       	push	r15
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	7c 01       	movw	r14, r24
     e4c:	8b 01       	movw	r16, r22
     e4e:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     e50:	28 c0       	rjmp	.+80     	; 0xea2 <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     e52:	f8 01       	movw	r30, r16
     e54:	c0 80       	ld	r12, Z
     e56:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     e58:	f6 01       	movw	r30, r12
     e5a:	80 81       	ld	r24, Z
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	9e 01       	movw	r18, r28
     e60:	8c 17       	cp	r24, r28
     e62:	9d 07       	cpc	r25, r29
     e64:	08 f4       	brcc	.+2      	; 0xe68 <USB_GetNextDescriptorComp+0x32>
     e66:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     e68:	c6 01       	movw	r24, r12
     e6a:	82 0f       	add	r24, r18
     e6c:	93 1f       	adc	r25, r19
     e6e:	f8 01       	movw	r30, r16
     e70:	91 83       	std	Z+1, r25	; 0x01
     e72:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
     e74:	f7 01       	movw	r30, r14
     e76:	80 81       	ld	r24, Z
     e78:	91 81       	ldd	r25, Z+1	; 0x01
     e7a:	82 1b       	sub	r24, r18
     e7c:	93 0b       	sbc	r25, r19
     e7e:	91 83       	std	Z+1, r25	; 0x01
     e80:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     e82:	f8 01       	movw	r30, r16
     e84:	80 81       	ld	r24, Z
     e86:	91 81       	ldd	r25, Z+1	; 0x01
     e88:	f5 01       	movw	r30, r10
     e8a:	09 95       	icall
     e8c:	82 30       	cpi	r24, 0x02	; 2
     e8e:	49 f0       	breq	.+18     	; 0xea2 <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	69 f4       	brne	.+26     	; 0xeae <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
     e94:	f8 01       	movw	r30, r16
     e96:	d1 82       	std	Z+1, r13	; 0x01
     e98:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
     e9a:	f7 01       	movw	r30, r14
     e9c:	d1 83       	std	Z+1, r29	; 0x01
     e9e:	c0 83       	st	Z, r28
     ea0:	06 c0       	rjmp	.+12     	; 0xeae <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     ea2:	f7 01       	movw	r30, r14
     ea4:	c0 81       	ld	r28, Z
     ea6:	d1 81       	ldd	r29, Z+1	; 0x01
     ea8:	20 97       	sbiw	r28, 0x00	; 0
     eaa:	99 f6       	brne	.-90     	; 0xe52 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     eac:	82 e0       	ldi	r24, 0x02	; 2
}
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	ff 90       	pop	r15
     eb8:	ef 90       	pop	r14
     eba:	df 90       	pop	r13
     ebc:	cf 90       	pop	r12
     ebe:	bf 90       	pop	r11
     ec0:	af 90       	pop	r10
     ec2:	08 95       	ret

00000ec4 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     ec4:	08 95       	ret

00000ec6 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     ec6:	1f 93       	push	r17
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     ece:	c9 ee       	ldi	r28, 0xE9	; 233
     ed0:	d3 e0       	ldi	r29, 0x03	; 3
     ed2:	06 c0       	rjmp	.+12     	; 0xee0 <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	83 db       	rcall	.-2298   	; 0x5de <USB_Host_WaitMS>
     ed8:	88 23       	and	r24, r24
     eda:	c9 f4       	brne	.+50     	; 0xf0e <USB_Host_WaitForIOS+0x48>
     edc:	21 97       	sbiw	r28, 0x01	; 1
     ede:	b1 f0       	breq	.+44     	; 0xf0c <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     ee0:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     ee2:	29 f4       	brne	.+10     	; 0xeee <USB_Host_WaitForIOS+0x28>
     ee4:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     ee8:	83 ff       	sbrs	r24, 3
     eea:	f4 cf       	rjmp	.-24     	; 0xed4 <USB_Host_WaitForIOS+0xe>
     eec:	0d c0       	rjmp	.+26     	; 0xf08 <USB_Host_WaitForIOS+0x42>
     eee:	11 30       	cpi	r17, 0x01	; 1
     ef0:	29 f4       	brne	.+10     	; 0xefc <USB_Host_WaitForIOS+0x36>
     ef2:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     ef6:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     ef8:	ed cf       	rjmp	.-38     	; 0xed4 <USB_Host_WaitForIOS+0xe>
     efa:	06 c0       	rjmp	.+12     	; 0xf08 <USB_Host_WaitForIOS+0x42>
     efc:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     efe:	51 f7       	brne	.-44     	; 0xed4 <USB_Host_WaitForIOS+0xe>
     f00:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f04:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     f06:	e6 cf       	rjmp	.-52     	; 0xed4 <USB_Host_WaitForIOS+0xe>
     f08:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     f0a:	01 c0       	rjmp	.+2      	; 0xf0e <USB_Host_WaitForIOS+0x48>
     f0c:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     f0e:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
     f10:	cf 91       	pop	r28
     f12:	1f 91       	pop	r17
     f14:	08 95       	ret

00000f16 <USB_Host_SendControlRequest>:
     f16:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     f18:	ff 92       	push	r15
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f24:	e0 90 9e 00 	lds	r14, 0x009E
     f28:	ff 24       	eor	r15, r15
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	e8 22       	and	r14, r24
     f2e:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     f30:	00 91 4d 01 	lds	r16, 0x014D
     f34:	10 91 4e 01 	lds	r17, 0x014E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f38:	80 91 9e 00 	lds	r24, 0x009E
     f3c:	81 60       	ori	r24, 0x01	; 1
     f3e:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	4c db       	rcall	.-2408   	; 0x5de <USB_Host_WaitMS>
     f46:	88 23       	and	r24, r24
     f48:	09 f0       	breq	.+2      	; 0xf4c <USB_Host_SendControlRequest+0x36>
     f4a:	ca c0       	rjmp	.+404    	; 0x10e0 <USB_Host_SendControlRequest+0x1ca>
     f4c:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f50:	8f 7c       	andi	r24, 0xCF	; 207
     f52:	80 93 aa 00 	sts	0x00AA, r24
     f56:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     f5a:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
     f5e:	8f 7e       	andi	r24, 0xEF	; 239
     f60:	80 93 a6 00 	sts	0x00A6, r24
     f64:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f68:	8f 7b       	andi	r24, 0xBF	; 191
     f6a:	80 93 a9 00 	sts	0x00A9, r24
     f6e:	88 e0       	ldi	r24, 0x08	; 8
     f70:	e7 e4       	ldi	r30, 0x47	; 71
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
     f72:	f1 e0       	ldi	r31, 0x01	; 1
     f74:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     f76:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     f7a:	81 50       	subi	r24, 0x01	; 1
     f7c:	d9 f7       	brne	.-10     	; 0xf74 <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     f7e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     f82:	87 77       	andi	r24, 0x77	; 119
     f84:	80 93 a6 00 	sts	0x00A6, r24
     f88:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     f8a:	9d df       	rcall	.-198    	; 0xec6 <USB_Host_WaitForIOS>
     f8c:	88 23       	and	r24, r24
     f8e:	09 f0       	breq	.+2      	; 0xf92 <USB_Host_SendControlRequest+0x7c>
     f90:	a7 c0       	rjmp	.+334    	; 0x10e0 <USB_Host_SendControlRequest+0x1ca>
     f92:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f96:	80 64       	ori	r24, 0x40	; 64
     f98:	80 93 a9 00 	sts	0x00A9, r24
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	1f db       	rcall	.-2498   	; 0x5de <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fa0:	88 23       	and	r24, r24
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <USB_Host_SendControlRequest+0x90>
     fa4:	9d c0       	rjmp	.+314    	; 0x10e0 <USB_Host_SendControlRequest+0x1ca>
     fa6:	80 91 47 01 	lds	r24, 0x0147
     faa:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     fac:	4f c0       	rjmp	.+158    	; 0x104c <USB_Host_SendControlRequest+0x136>
     fae:	80 91 aa 00 	lds	r24, 0x00AA
     fb2:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fb4:	80 61       	ori	r24, 0x10	; 16
     fb6:	80 93 aa 00 	sts	0x00AA, r24
     fba:	20 97       	sbiw	r28, 0x00	; 0
     fbc:	61 f5       	brne	.+88     	; 0x1016 <USB_Host_SendControlRequest+0x100>
     fbe:	2e c0       	rjmp	.+92     	; 0x101c <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     fc0:	80 91 a9 00 	lds	r24, 0x00A9
     fc4:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fc6:	80 93 a9 00 	sts	0x00A9, r24
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	7c df       	rcall	.-264    	; 0xec6 <USB_Host_WaitForIOS>
     fce:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <USB_Host_SendControlRequest+0xbe>
     fd2:	86 c0       	rjmp	.+268    	; 0x10e0 <USB_Host_SendControlRequest+0x1ca>
     fd4:	80 91 f6 00 	lds	r24, 0x00F6
     fd8:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	41 f4       	brne	.+16     	; 0xff0 <USB_Host_SendControlRequest+0xda>
     fe0:	00 e0       	ldi	r16, 0x00	; 0
     fe2:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
     fe4:	05 c0       	rjmp	.+10     	; 0xff0 <USB_Host_SendControlRequest+0xda>
     fe6:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
     fea:	89 93       	st	Y+, r24
     fec:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     fee:	10 40       	sbci	r17, 0x00	; 0
     ff0:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
     ff4:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	19 f0       	breq	.+6      	; 0x1002 <USB_Host_SendControlRequest+0xec>
     ffc:	01 15       	cp	r16, r1
     ffe:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1000:	91 f7       	brne	.-28     	; 0xfe6 <USB_Host_SendControlRequest+0xd0>
    1002:	80 91 a9 00 	lds	r24, 0x00A9
    1006:	80 64       	ori	r24, 0x40	; 64
    1008:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    100c:	80 91 a6 00 	lds	r24, 0x00A6
    1010:	8e 77       	andi	r24, 0x7E	; 126
    1012:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1016:	01 15       	cp	r16, r1
    1018:	11 05       	cpc	r17, r1
    101a:	91 f6       	brne	.-92     	; 0xfc0 <USB_Host_SendControlRequest+0xaa>
    101c:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1020:	8f 7c       	andi	r24, 0xCF	; 207
    1022:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1024:	80 93 aa 00 	sts	0x00AA, r24
    1028:	80 91 a9 00 	lds	r24, 0x00A9
    102c:	8f 7b       	andi	r24, 0xBF	; 191
    102e:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1032:	82 e0       	ldi	r24, 0x02	; 2
    1034:	48 df       	rcall	.-368    	; 0xec6 <USB_Host_WaitForIOS>
    1036:	88 23       	and	r24, r24
    1038:	09 f0       	breq	.+2      	; 0x103c <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    103a:	52 c0       	rjmp	.+164    	; 0x10e0 <USB_Host_SendControlRequest+0x1ca>
    103c:	80 91 a6 00 	lds	r24, 0x00A6
    1040:	8b 77       	andi	r24, 0x7B	; 123
    1042:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1046:	82 e0       	ldi	r24, 0x02	; 2
    1048:	3e df       	rcall	.-388    	; 0xec6 <USB_Host_WaitForIOS>
    104a:	4a c0       	rjmp	.+148    	; 0x10e0 <USB_Host_SendControlRequest+0x1ca>
    104c:	20 97       	sbiw	r28, 0x00	; 0
    104e:	a1 f1       	breq	.+104    	; 0x10b8 <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1050:	80 91 aa 00 	lds	r24, 0x00AA
    1054:	8f 7c       	andi	r24, 0xCF	; 207
    1056:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1058:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    105c:	80 91 a9 00 	lds	r24, 0x00A9
    1060:	8f 7b       	andi	r24, 0xBF	; 191
    1062:	80 93 a9 00 	sts	0x00A9, r24
    1066:	1c c0       	rjmp	.+56     	; 0x10a0 <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1068:	2e df       	rcall	.-420    	; 0xec6 <USB_Host_WaitForIOS>
    106a:	88 23       	and	r24, r24
    106c:	c9 f5       	brne	.+114    	; 0x10e0 <USB_Host_SendControlRequest+0x1ca>
    106e:	fe 01       	movw	r30, r28
    1070:	07 c0       	rjmp	.+14     	; 0x1080 <USB_Host_SendControlRequest+0x16a>
    1072:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1074:	ef 01       	movw	r28, r30
    1076:	80 93 af 00 	sts	0x00AF, r24
    107a:	01 50       	subi	r16, 0x01	; 1
    107c:	10 40       	sbci	r17, 0x00	; 0
    107e:	59 f0       	breq	.+22     	; 0x1096 <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1080:	ef 01       	movw	r28, r30
    1082:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1086:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    108a:	80 91 27 01 	lds	r24, 0x0127
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    108e:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1090:	28 17       	cp	r18, r24
    1092:	39 07       	cpc	r19, r25
    1094:	70 f3       	brcs	.-36     	; 0x1072 <USB_Host_SendControlRequest+0x15c>
    1096:	80 91 a6 00 	lds	r24, 0x00A6
    109a:	8b 77       	andi	r24, 0x7B	; 123
    109c:	80 93 a6 00 	sts	0x00A6, r24
    10a0:	82 e0       	ldi	r24, 0x02	; 2
    10a2:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10a4:	11 05       	cpc	r17, r1
    10a6:	01 f7       	brne	.-64     	; 0x1068 <USB_Host_SendControlRequest+0x152>
    10a8:	0e df       	rcall	.-484    	; 0xec6 <USB_Host_WaitForIOS>
    10aa:	88 23       	and	r24, r24
    10ac:	c9 f4       	brne	.+50     	; 0x10e0 <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10ae:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    10b2:	80 64       	ori	r24, 0x40	; 64
    10b4:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10b8:	80 91 aa 00 	lds	r24, 0x00AA
    10bc:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10be:	80 61       	ori	r24, 0x10	; 16
    10c0:	80 93 aa 00 	sts	0x00AA, r24
    10c4:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10c8:	8f 7b       	andi	r24, 0xBF	; 191
    10ca:	80 93 a9 00 	sts	0x00A9, r24
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	fa de       	rcall	.-524    	; 0xec6 <USB_Host_WaitForIOS>
    10d2:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10d4:	29 f4       	brne	.+10     	; 0x10e0 <USB_Host_SendControlRequest+0x1ca>
    10d6:	90 91 a6 00 	lds	r25, 0x00A6
    10da:	9e 77       	andi	r25, 0x7E	; 126
    10dc:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    10e0:	90 91 a9 00 	lds	r25, 0x00A9
    10e4:	90 64       	ori	r25, 0x40	; 64
    10e6:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10ea:	e1 14       	cp	r14, r1
    10ec:	f1 04       	cpc	r15, r1
    10ee:	29 f4       	brne	.+10     	; 0x10fa <USB_Host_SendControlRequest+0x1e4>
    10f0:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10f4:	9e 7f       	andi	r25, 0xFE	; 254
    10f6:	90 93 9e 00 	sts	0x009E, r25
    10fa:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    10fc:	90 93 a8 00 	sts	0x00A8, r25
    1100:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    110c:	ff 90       	pop	r15
    110e:	ef 90       	pop	r14
    1110:	08 95       	ret

00001112 <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    1112:	cf 93       	push	r28
    1114:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1116:	10 92 47 01 	sts	0x0147, r1
    111a:	89 e0       	ldi	r24, 0x09	; 9
    111c:	80 93 48 01 	sts	0x0148, r24
    1120:	c0 93 49 01 	sts	0x0149, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1124:	10 92 4a 01 	sts	0x014A, r1
    1128:	10 92 4c 01 	sts	0x014C, r1
    112c:	10 92 4b 01 	sts	0x014B, r1
    1130:	10 92 4e 01 	sts	0x014E, r1
    1134:	10 92 4d 01 	sts	0x014D, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1138:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	ea de       	rcall	.-556    	; 0xf16 <USB_Host_SendControlRequest>
    1142:	88 23       	and	r24, r24
    1144:	49 f4       	brne	.+18     	; 0x1158 <USB_Host_SetDeviceConfiguration+0x46>
    1146:	c0 93 45 01 	sts	0x0145, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    114a:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    114c:	11 f0       	breq	.+4      	; 0x1152 <USB_Host_SetDeviceConfiguration+0x40>
    114e:	9b e0       	ldi	r25, 0x0B	; 11
    1150:	01 c0       	rjmp	.+2      	; 0x1154 <USB_Host_SetDeviceConfiguration+0x42>
    1152:	9a e0       	ldi	r25, 0x0A	; 10
    1154:	90 93 4f 01 	sts	0x014F, r25
    1158:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    115a:	08 95       	ret

0000115c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    115c:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    115e:	c0 91 a7 00 	lds	r28, 0x00A7
    1162:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1164:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1168:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    116c:	8d da       	rcall	.-2790   	; 0x688 <USB_Host_ProcessNextHostState>
    116e:	c0 93 a7 00 	sts	0x00A7, r28
    1172:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1174:	08 95       	ret

00001176 <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    1176:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1178:	81 81       	ldd	r24, Z+1	; 0x01
    117a:	84 30       	cpi	r24, 0x04	; 4
    117c:	19 f4       	brne	.+6      	; 0x1184 <DCOMP_HID_Host_NextHIDInterface+0xe>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    117e:	85 81       	ldd	r24, Z+5	; 0x05
    1180:	83 30       	cpi	r24, 0x03	; 3
    1182:	11 f0       	breq	.+4      	; 0x1188 <DCOMP_HID_Host_NextHIDInterface+0x12>
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1184:	82 e0       	ldi	r24, 0x02	; 2
    1186:	08 95       	ret
	if (Header->Type == DTYPE_Interface)
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
		  return DESCRIPTOR_SEARCH_Found;
    1188:	80 e0       	ldi	r24, 0x00	; 0
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    118a:	08 95       	ret

0000118c <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    118c:	fc 01       	movw	r30, r24
    118e:	81 81       	ldd	r24, Z+1	; 0x01
    1190:	81 32       	cpi	r24, 0x21	; 33
    1192:	21 f0       	breq	.+8      	; 0x119c <DCOMP_HID_Host_NextHIDDescriptor+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    1194:	84 30       	cpi	r24, 0x04	; 4
    1196:	21 f4       	brne	.+8      	; 0x11a0 <DCOMP_HID_Host_NextHIDDescriptor+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	08 95       	ret
static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
    11a0:	82 e0       	ldi	r24, 0x02	; 2
}
    11a2:	08 95       	ret

000011a4 <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    11a4:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    11a6:	81 81       	ldd	r24, Z+1	; 0x01
    11a8:	85 30       	cpi	r24, 0x05	; 5
    11aa:	29 f4       	brne	.+10     	; 0x11b6 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    11ac:	82 81       	ldd	r24, Z+2	; 0x02
    11ae:	86 dc       	rcall	.-1780   	; 0xabc <Pipe_IsEndpointBound>
    11b0:	88 23       	and	r24, r24
    11b2:	19 f4       	brne	.+6      	; 0x11ba <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x16>
    11b4:	04 c0       	rjmp	.+8      	; 0x11be <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1a>
    11b6:	84 30       	cpi	r24, 0x04	; 4
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    11b8:	21 f0       	breq	.+8      	; 0x11c2 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1e>
    11ba:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    11bc:	08 95       	ret
    11be:	80 e0       	ldi	r24, 0x00	; 0
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
    11c0:	08 95       	ret
    11c2:	81 e0       	ldi	r24, 0x01	; 1
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    11c4:	08 95       	ret

000011c6 <HID_Host_ConfigurePipes>:
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    11c6:	8f 92       	push	r8
#include "HIDClassHost.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    11c8:	9f 92       	push	r9
    11ca:	af 92       	push	r10
    11cc:	bf 92       	push	r11
    11ce:	cf 92       	push	r12
    11d0:	df 92       	push	r13
    11d2:	ef 92       	push	r14
    11d4:	ff 92       	push	r15
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <HID_Host_ConfigurePipes+0x1a>
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <HID_Host_ConfigurePipes+0x1c>
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	8c 01       	movw	r16, r24
    11e8:	7a 83       	std	Y+2, r23	; 0x02
    11ea:	69 83       	std	Y+1, r22	; 0x01
    11ec:	5c 83       	std	Y+4, r21	; 0x04
    11ee:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    11f0:	0f 96       	adiw	r24, 0x0f	; 15
    11f2:	fc 01       	movw	r30, r24
    11f4:	88 e0       	ldi	r24, 0x08	; 8
    11f6:	df 01       	movw	r26, r30
    11f8:	1d 92       	st	X+, r1
    11fa:	8a 95       	dec	r24
    11fc:	e9 f7       	brne	.-6      	; 0x11f8 <HID_Host_ConfigurePipes+0x32>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    11fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1200:	fc 81       	ldd	r31, Y+4	; 0x04
    1202:	81 81       	ldd	r24, Z+1	; 0x01
    1204:	82 30       	cpi	r24, 0x02	; 2
    1206:	09 f0       	breq	.+2      	; 0x120a <HID_Host_ConfigurePipes+0x44>
    1208:	97 c0       	rjmp	.+302    	; 0x1338 <HID_Host_ConfigurePipes+0x172>
    120a:	88 24       	eor	r8, r8
    120c:	99 24       	eor	r9, r9
    120e:	aa 24       	eor	r10, r10
    1210:	bb 24       	eor	r11, r11
    1212:	ee 24       	eor	r14, r14
    1214:	ff 24       	eor	r15, r15
    1216:	cc 24       	eor	r12, r12
    1218:	dd 24       	eor	r13, r13
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    121a:	a1 14       	cp	r10, r1
    121c:	b1 04       	cpc	r11, r1
    121e:	51 f0       	breq	.+20     	; 0x1234 <HID_Host_ConfigurePipes+0x6e>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1220:	ce 01       	movw	r24, r28
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	be 01       	movw	r22, r28
    1226:	6d 5f       	subi	r22, 0xFD	; 253
    1228:	7f 4f       	sbci	r23, 0xFF	; 255
    122a:	42 ed       	ldi	r20, 0xD2	; 210
    122c:	58 e0       	ldi	r21, 0x08	; 8
    122e:	03 de       	rcall	.-1018   	; 0xe36 <USB_GetNextDescriptorComp>
    1230:	88 23       	and	r24, r24
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1232:	51 f1       	breq	.+84     	; 0x1288 <HID_Host_ConfigurePipes+0xc2>
    1234:	c1 14       	cp	r12, r1
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint)
    1236:	d1 04       	cpc	r13, r1
    1238:	b9 f5       	brne	.+110    	; 0x12a8 <HID_Host_ConfigurePipes+0xe2>
    123a:	ce 01       	movw	r24, r28
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    123c:	01 96       	adiw	r24, 0x01	; 1
    123e:	be 01       	movw	r22, r28
    1240:	6d 5f       	subi	r22, 0xFD	; 253
    1242:	7f 4f       	sbci	r23, 0xFF	; 255
    1244:	4b eb       	ldi	r20, 0xBB	; 187
    1246:	58 e0       	ldi	r21, 0x08	; 8
    1248:	f6 dd       	rcall	.-1044   	; 0xe36 <USB_GetNextDescriptorComp>
    124a:	88 23       	and	r24, r24
    124c:	09 f0       	breq	.+2      	; 0x1250 <HID_Host_ConfigurePipes+0x8a>
    124e:	76 c0       	rjmp	.+236    	; 0x133c <HID_Host_ConfigurePipes+0x176>
    1250:	ab 80       	ldd	r10, Y+3	; 0x03
    1252:	bc 80       	ldd	r11, Y+4	; 0x04
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1254:	f8 01       	movw	r30, r16
    1256:	84 85       	ldd	r24, Z+12	; 0x0c
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1258:	88 23       	and	r24, r24
    125a:	31 f0       	breq	.+12     	; 0x1268 <HID_Host_ConfigurePipes+0xa2>
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    125c:	d5 01       	movw	r26, r10
    125e:	17 96       	adiw	r26, 0x07	; 7
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1260:	9c 91       	ld	r25, X
    1262:	17 97       	sbiw	r26, 0x07	; 7
    1264:	98 17       	cp	r25, r24
    1266:	49 f7       	brne	.-46     	; 0x123a <HID_Host_ConfigurePipes+0x74>
    1268:	ce 01       	movw	r24, r28
    126a:	01 96       	adiw	r24, 0x01	; 1
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    126c:	be 01       	movw	r22, r28
    126e:	6d 5f       	subi	r22, 0xFD	; 253
    1270:	7f 4f       	sbci	r23, 0xFF	; 255
    1272:	46 ec       	ldi	r20, 0xC6	; 198
    1274:	58 e0       	ldi	r21, 0x08	; 8
    1276:	df dd       	rcall	.-1090   	; 0xe36 <USB_GetNextDescriptorComp>
    1278:	88 23       	and	r24, r24
    127a:	09 f0       	breq	.+2      	; 0x127e <HID_Host_ConfigurePipes+0xb8>
    127c:	5f c0       	rjmp	.+190    	; 0x133c <HID_Host_ConfigurePipes+0x176>
    127e:	8b 80       	ldd	r8, Y+3	; 0x03
    1280:	9c 80       	ldd	r9, Y+4	; 0x04
    1282:	ee 24       	eor	r14, r14
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    1284:	ff 24       	eor	r15, r15
    1286:	c9 cf       	rjmp	.-110    	; 0x121a <HID_Host_ConfigurePipes+0x54>

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    1288:	eb 81       	ldd	r30, Y+3	; 0x03
    128a:	fc 81       	ldd	r31, Y+4	; 0x04
    128c:	82 81       	ldd	r24, Z+2	; 0x02

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    128e:	87 ff       	sbrs	r24, 7
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <HID_Host_ConfigurePipes+0xd0>

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1292:	6f 01       	movw	r12, r30
    1294:	01 c0       	rjmp	.+2      	; 0x1298 <HID_Host_ConfigurePipes+0xd2>
    1296:	7f 01       	movw	r14, r30
		  DataINEndpoint  = EndpointData;
    1298:	c1 14       	cp	r12, r1
    129a:	d1 04       	cpc	r13, r1
		else
		  DataOUTEndpoint = EndpointData;
    129c:	09 f4       	brne	.+2      	; 0x12a0 <HID_Host_ConfigurePipes+0xda>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    129e:	bd cf       	rjmp	.-134    	; 0x121a <HID_Host_ConfigurePipes+0x54>
    12a0:	e1 14       	cp	r14, r1
    12a2:	f1 04       	cpc	r15, r1
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <HID_Host_ConfigurePipes+0xe2>
    12a6:	b9 cf       	rjmp	.-142    	; 0x121a <HID_Host_ConfigurePipes+0x54>
    12a8:	f6 01       	movw	r30, r12
    12aa:	84 81       	ldd	r24, Z+4	; 0x04
    12ac:	95 81       	ldd	r25, Z+5	; 0x05
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	HIDInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    12ae:	d8 01       	movw	r26, r16
    12b0:	12 96       	adiw	r26, 0x02	; 2
    12b2:	9c 93       	st	X, r25
    12b4:	8e 93       	st	-X, r24
    12b6:	11 97       	sbiw	r26, 0x01	; 1
    12b8:	82 81       	ldd	r24, Z+2	; 0x02
    12ba:	13 96       	adiw	r26, 0x03	; 3
    12bc:	8c 93       	st	X, r24
	HIDInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    12be:	13 97       	sbiw	r26, 0x03	; 3
    12c0:	83 e0       	ldi	r24, 0x03	; 3
    12c2:	c8 2e       	mov	r12, r24
    12c4:	14 96       	adiw	r26, 0x04	; 4
	HIDInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_INTERRUPT;
    12c6:	cc 92       	st	X, r12
    12c8:	c8 01       	movw	r24, r16
    12ca:	61 e0       	ldi	r22, 0x01	; 1
    12cc:	c2 db       	rcall	.-2172   	; 0xa52 <Pipe_ConfigurePipeTable>

	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
    12ce:	88 23       	and	r24, r24
    12d0:	b9 f1       	breq	.+110    	; 0x1340 <HID_Host_ConfigurePipes+0x17a>
    12d2:	e1 14       	cp	r14, r1
    12d4:	f1 04       	cpc	r15, r1
    12d6:	a1 f0       	breq	.+40     	; 0x1300 <HID_Host_ConfigurePipes+0x13a>
    12d8:	f7 01       	movw	r30, r14
	  return false;

	if (DataOUTEndpoint)
    12da:	84 81       	ldd	r24, Z+4	; 0x04
    12dc:	95 81       	ldd	r25, Z+5	; 0x05
    12de:	d8 01       	movw	r26, r16
	{
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    12e0:	18 96       	adiw	r26, 0x08	; 8
    12e2:	9c 93       	st	X, r25
    12e4:	8e 93       	st	-X, r24
    12e6:	17 97       	sbiw	r26, 0x07	; 7
    12e8:	82 81       	ldd	r24, Z+2	; 0x02
    12ea:	19 96       	adiw	r26, 0x09	; 9
    12ec:	8c 93       	st	X, r24
    12ee:	19 97       	sbiw	r26, 0x09	; 9
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    12f0:	1a 96       	adiw	r26, 0x0a	; 10
    12f2:	cc 92       	st	X, r12
    12f4:	c8 01       	movw	r24, r16
    12f6:	06 96       	adiw	r24, 0x06	; 6
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;
    12f8:	61 e0       	ldi	r22, 0x01	; 1
    12fa:	ab db       	rcall	.-2218   	; 0xa52 <Pipe_ConfigurePipeTable>

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
    12fc:	88 23       	and	r24, r24
    12fe:	01 f1       	breq	.+64     	; 0x1340 <HID_Host_ConfigurePipes+0x17a>
    1300:	f5 01       	movw	r30, r10
    1302:	82 81       	ldd	r24, Z+2	; 0x02
    1304:	d8 01       	movw	r26, r16
    1306:	50 96       	adiw	r26, 0x10	; 16
    1308:	8c 93       	st	X, r24
		  return false;
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    130a:	50 97       	sbiw	r26, 0x10	; 16
    130c:	f4 01       	movw	r30, r8
    130e:	87 81       	ldd	r24, Z+7	; 0x07
    1310:	90 85       	ldd	r25, Z+8	; 0x08
    1312:	55 96       	adiw	r26, 0x15	; 21
    1314:	9c 93       	st	X, r25
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    1316:	8e 93       	st	-X, r24
    1318:	54 97       	sbiw	r26, 0x14	; 20
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	d5 01       	movw	r26, r10
    131e:	16 96       	adiw	r26, 0x06	; 6
    1320:	9c 91       	ld	r25, X
    1322:	16 97       	sbiw	r26, 0x06	; 6
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    1324:	99 23       	and	r25, r25
    1326:	09 f4       	brne	.+2      	; 0x132a <HID_Host_ConfigurePipes+0x164>
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	f8 01       	movw	r30, r16
    132c:	81 8b       	std	Z+17, r24	; 0x11
    132e:	88 e0       	ldi	r24, 0x08	; 8
    1330:	86 8b       	std	Z+22, r24	; 0x16
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	87 87       	std	Z+15, r24	; 0x0f
    1336:	04 c0       	rjmp	.+8      	; 0x1340 <HID_Host_ConfigurePipes+0x17a>
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	03 c0       	rjmp	.+6      	; 0x1342 <HID_Host_ConfigurePipes+0x17c>
	HIDInterfaceInfo->State.IsActive             = true;
    133c:	82 e0       	ldi	r24, 0x02	; 2
    133e:	01 c0       	rjmp	.+2      	; 0x1342 <HID_Host_ConfigurePipes+0x17c>
    1340:	80 e0       	ldi	r24, 0x00	; 0
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
		  return false;
    134a:	df 91       	pop	r29
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
	HIDInterfaceInfo->State.LargestReportSize    = 8;
	HIDInterfaceInfo->State.IsActive             = true;

	return HID_ENUMERROR_NoError;
}
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	ff 90       	pop	r15
    1354:	ef 90       	pop	r14
    1356:	df 90       	pop	r13
    1358:	cf 90       	pop	r12
    135a:	bf 90       	pop	r11
    135c:	af 90       	pop	r10
    135e:	9f 90       	pop	r9
    1360:	8f 90       	pop	r8
    1362:	08 95       	ret

00001364 <HID_Host_ReceiveReport>:
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	fc 01       	movw	r30, r24
    136a:	80 91 4f 01 	lds	r24, 0x014F
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    136e:	8b 30       	cpi	r24, 0x0B	; 11
    1370:	d9 f5       	brne	.+118    	; 0x13e8 <HID_Host_ReceiveReport+0x84>
    1372:	87 85       	ldd	r24, Z+15	; 0x0f
    1374:	88 23       	and	r24, r24
    1376:	c1 f1       	breq	.+112    	; 0x13e8 <HID_Host_ReceiveReport+0x84>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1378:	80 81       	ld	r24, Z
    137a:	8f 70       	andi	r24, 0x0F	; 15
    137c:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1380:	80 91 a9 00 	lds	r24, 0x00A9
    1384:	8f 7b       	andi	r24, 0xBF	; 191
    1386:	80 93 a9 00 	sts	0x00A9, r24

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    138a:	83 89       	ldd	r24, Z+19	; 0x13
    138c:	88 23       	and	r24, r24
    138e:	a9 f4       	brne	.+42     	; 0x13ba <HID_Host_ReceiveReport+0x56>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    1390:	a5 85       	ldd	r26, Z+13	; 0x0d
    1392:	b6 85       	ldd	r27, Z+14	; 0x0e
    1394:	a8 52       	subi	r26, 0x28	; 40
    1396:	bc 4f       	sbci	r27, 0xFC	; 252
    1398:	8c 91       	ld	r24, X
    139a:	88 23       	and	r24, r24
    139c:	29 f0       	breq	.+10     	; 0x13a8 <HID_Host_ReceiveReport+0x44>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    139e:	20 91 af 00 	lds	r18, 0x00AF
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
    13a2:	eb 01       	movw	r28, r22
    13a4:	29 93       	st	Y+, r18
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <HID_Host_ReceiveReport+0x48>

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    13a8:	eb 01       	movw	r28, r22

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
	{
		uint8_t ReportID = 0;
    13aa:	20 e0       	ldi	r18, 0x00	; 0
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    13ac:	85 85       	ldd	r24, Z+13	; 0x0d
    13ae:	96 85       	ldd	r25, Z+14	; 0x0e
    13b0:	62 2f       	mov	r22, r18
    13b2:	40 e0       	ldi	r20, 0x00	; 0
    13b4:	8e d8       	rcall	.-3812   	; 0x4d2 <USB_GetHIDReportSize>
    13b6:	9c 01       	movw	r18, r24
    13b8:	05 c0       	rjmp	.+10     	; 0x13c4 <HID_Host_ReceiveReport+0x60>
    13ba:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13be:	30 91 f7 00 	lds	r19, 0x00F7
    13c2:	eb 01       	movw	r28, r22

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    13c4:	ce 01       	movw	r24, r28
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NULL)) != PIPE_RWSTREAM_NoError)
    13c6:	b9 01       	movw	r22, r18
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	86 da       	rcall	.-2804   	; 0x8da <Pipe_Read_Stream_LE>
    13ce:	88 23       	and	r24, r24
    13d0:	61 f4       	brne	.+24     	; 0x13ea <HID_Host_ReceiveReport+0x86>
    13d2:	90 91 a6 00 	lds	r25, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    13d6:	9e 77       	andi	r25, 0x7E	; 126
    13d8:	90 93 a6 00 	sts	0x00A6, r25
    13dc:	90 91 a9 00 	lds	r25, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13e0:	90 64       	ori	r25, 0x40	; 64
    13e2:	90 93 a9 00 	sts	0x00A9, r25
    13e6:	01 c0       	rjmp	.+2      	; 0x13ea <HID_Host_ReceiveReport+0x86>
    13e8:	82 e0       	ldi	r24, 0x02	; 2
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    13ea:	df 91       	pop	r29

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    13ec:	cf 91       	pop	r28

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    13ee:	08 95       	ret

000013f0 <HID_Host_IsReportReceived>:
    13f0:	fc 01       	movw	r30, r24
    13f2:	80 91 4f 01 	lds	r24, 0x014F
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    13f6:	8b 30       	cpi	r24, 0x0B	; 11
    13f8:	a9 f4       	brne	.+42     	; 0x1424 <HID_Host_IsReportReceived+0x34>
    13fa:	87 85       	ldd	r24, Z+15	; 0x0f
    13fc:	88 23       	and	r24, r24
    13fe:	a1 f0       	breq	.+40     	; 0x1428 <HID_Host_IsReportReceived+0x38>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1400:	80 81       	ld	r24, Z
    1402:	8f 70       	andi	r24, 0x0F	; 15
    1404:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1408:	80 91 a9 00 	lds	r24, 0x00A9
    140c:	8f 7b       	andi	r24, 0xBF	; 191
    140e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1412:	80 91 a6 00 	lds	r24, 0x00A6
    1416:	81 70       	andi	r24, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1418:	90 91 a9 00 	lds	r25, 0x00A9
    141c:	90 64       	ori	r25, 0x40	; 64
    141e:	90 93 a9 00 	sts	0x00A9, r25

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    1422:	08 95       	ret
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return false;
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	08 95       	ret
    1428:	80 e0       	ldi	r24, 0x00	; 0
	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
}
    142a:	08 95       	ret

0000142c <HID_Host_SetBootProtocol>:

uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	ec 01       	movw	r28, r24
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
    1432:	89 89       	ldd	r24, Y+17	; 0x11
    1434:	88 23       	and	r24, r24
    1436:	f9 f0       	breq	.+62     	; 0x1476 <HID_Host_SetBootProtocol+0x4a>
	  return HID_ERROR_LOGICAL;

	USB_ControlRequest = (USB_Request_Header_t)
    1438:	88 89       	ldd	r24, Y+16	; 0x10
    143a:	91 e2       	ldi	r25, 0x21	; 33
    143c:	90 93 47 01 	sts	0x0147, r25
    1440:	9b e0       	ldi	r25, 0x0B	; 11
    1442:	90 93 48 01 	sts	0x0148, r25
    1446:	10 92 4a 01 	sts	0x014A, r1
    144a:	10 92 49 01 	sts	0x0149, r1
    144e:	80 93 4b 01 	sts	0x014B, r24
    1452:	10 92 4c 01 	sts	0x014C, r1
    1456:	10 92 4e 01 	sts	0x014E, r1
    145a:	10 92 4d 01 	sts	0x014D, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    145e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	57 dd       	rcall	.-1362   	; 0xf16 <USB_Host_SendControlRequest>
    1468:	88 23       	and	r24, r24
    146a:	31 f4       	brne	.+12     	; 0x1478 <HID_Host_SetBootProtocol+0x4c>
    146c:	98 e0       	ldi	r25, 0x08	; 8
	  return ErrorCode;

	HIDInterfaceInfo->State.LargestReportSize = 8;
    146e:	9e 8b       	std	Y+22, r25	; 0x16
    1470:	91 e0       	ldi	r25, 0x01	; 1
	HIDInterfaceInfo->State.UsingBootProtocol = true;
    1472:	9b 8b       	std	Y+19, r25	; 0x13
    1474:	01 c0       	rjmp	.+2      	; 0x1478 <HID_Host_SetBootProtocol+0x4c>

	return HOST_SENDCONTROL_Successful;
    1476:	80 e8       	ldi	r24, 0x80	; 128
uint8_t HID_Host_SetBootProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	if (!(HIDInterfaceInfo->State.SupportsBootProtocol))
	  return HID_ERROR_LOGICAL;
    1478:	df 91       	pop	r29

	HIDInterfaceInfo->State.LargestReportSize = 8;
	HIDInterfaceInfo->State.UsingBootProtocol = true;

	return HOST_SENDCONTROL_Successful;
}
    147a:	cf 91       	pop	r28
    147c:	08 95       	ret

0000147e <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    147e:	90 91 c8 00 	lds	r25, 0x00C8
    1482:	95 ff       	sbrs	r25, 5
    1484:	fc cf       	rjmp	.-8      	; 0x147e <Serial_putchar>
				UDR1 = DataByte;
    1486:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	08 95       	ret

00001490 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1490:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1494:	87 ff       	sbrs	r24, 7
    1496:	08 c0       	rjmp	.+16     	; 0x14a8 <Serial_getchar+0x18>
    1498:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    149c:	87 ff       	sbrs	r24, 7
    149e:	07 c0       	rjmp	.+14     	; 0x14ae <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    14a0:	80 91 ce 00 	lds	r24, 0x00CE
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	08 95       	ret
	  return _FDEV_EOF;
    14a8:	8e ef       	ldi	r24, 0xFE	; 254
    14aa:	9f ef       	ldi	r25, 0xFF	; 255
    14ac:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    14ae:	8f ef       	ldi	r24, 0xFF	; 255
    14b0:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    14b2:	08 95       	ret

000014b4 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    14b4:	fc 01       	movw	r30, r24
	if (!(Stream))
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	51 f4       	brne	.+20     	; 0x14ce <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    14ba:	e0 e5       	ldi	r30, 0x50	; 80
    14bc:	f1 e0       	ldi	r31, 0x01	; 1
    14be:	f0 93 5f 01 	sts	0x015F, r31
    14c2:	e0 93 5e 01 	sts	0x015E, r30
		stdout = Stream;
    14c6:	f0 93 61 01 	sts	0x0161, r31
    14ca:	e0 93 60 01 	sts	0x0160, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    14ce:	8e e0       	ldi	r24, 0x0E	; 14
    14d0:	df 01       	movw	r26, r30
    14d2:	1d 92       	st	X+, r1
    14d4:	8a 95       	dec	r24
    14d6:	e9 f7       	brne	.-6      	; 0x14d2 <Serial_CreateStream+0x1e>
    14d8:	83 e0       	ldi	r24, 0x03	; 3
    14da:	83 83       	std	Z+3, r24	; 0x03
    14dc:	8f e3       	ldi	r24, 0x3F	; 63
    14de:	9a e0       	ldi	r25, 0x0A	; 10
    14e0:	91 87       	std	Z+9, r25	; 0x09
    14e2:	80 87       	std	Z+8, r24	; 0x08
    14e4:	88 e4       	ldi	r24, 0x48	; 72
    14e6:	9a e0       	ldi	r25, 0x0A	; 10
    14e8:	93 87       	std	Z+11, r25	; 0x0b
    14ea:	82 87       	std	Z+10, r24	; 0x0a
}
    14ec:	08 95       	ret

000014ee <fputc>:
    14ee:	0f 93       	push	r16
    14f0:	1f 93       	push	r17
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	8c 01       	movw	r16, r24
    14f8:	eb 01       	movw	r28, r22
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	81 ff       	sbrs	r24, 1
    14fe:	1b c0       	rjmp	.+54     	; 0x1536 <fputc+0x48>
    1500:	82 ff       	sbrs	r24, 2
    1502:	0d c0       	rjmp	.+26     	; 0x151e <fputc+0x30>
    1504:	2e 81       	ldd	r18, Y+6	; 0x06
    1506:	3f 81       	ldd	r19, Y+7	; 0x07
    1508:	8c 81       	ldd	r24, Y+4	; 0x04
    150a:	9d 81       	ldd	r25, Y+5	; 0x05
    150c:	28 17       	cp	r18, r24
    150e:	39 07       	cpc	r19, r25
    1510:	64 f4       	brge	.+24     	; 0x152a <fputc+0x3c>
    1512:	e8 81       	ld	r30, Y
    1514:	f9 81       	ldd	r31, Y+1	; 0x01
    1516:	01 93       	st	Z+, r16
    1518:	f9 83       	std	Y+1, r31	; 0x01
    151a:	e8 83       	st	Y, r30
    151c:	06 c0       	rjmp	.+12     	; 0x152a <fputc+0x3c>
    151e:	e8 85       	ldd	r30, Y+8	; 0x08
    1520:	f9 85       	ldd	r31, Y+9	; 0x09
    1522:	80 2f       	mov	r24, r16
    1524:	09 95       	icall
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	31 f4       	brne	.+12     	; 0x1536 <fputc+0x48>
    152a:	8e 81       	ldd	r24, Y+6	; 0x06
    152c:	9f 81       	ldd	r25, Y+7	; 0x07
    152e:	01 96       	adiw	r24, 0x01	; 1
    1530:	9f 83       	std	Y+7, r25	; 0x07
    1532:	8e 83       	std	Y+6, r24	; 0x06
    1534:	02 c0       	rjmp	.+4      	; 0x153a <fputc+0x4c>
    1536:	0f ef       	ldi	r16, 0xFF	; 255
    1538:	1f ef       	ldi	r17, 0xFF	; 255
    153a:	c8 01       	movw	r24, r16
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	1f 91       	pop	r17
    1542:	0f 91       	pop	r16
    1544:	08 95       	ret

00001546 <printf_P>:
    1546:	cf 93       	push	r28
    1548:	df 93       	push	r29
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	fe 01       	movw	r30, r28
    1550:	35 96       	adiw	r30, 0x05	; 5
    1552:	61 91       	ld	r22, Z+
    1554:	71 91       	ld	r23, Z+
    1556:	80 91 60 01 	lds	r24, 0x0160
    155a:	90 91 61 01 	lds	r25, 0x0161
    155e:	dc 01       	movw	r26, r24
    1560:	13 96       	adiw	r26, 0x03	; 3
    1562:	2c 91       	ld	r18, X
    1564:	13 97       	sbiw	r26, 0x03	; 3
    1566:	28 60       	ori	r18, 0x08	; 8
    1568:	13 96       	adiw	r26, 0x03	; 3
    156a:	2c 93       	st	X, r18
    156c:	af 01       	movw	r20, r30
    156e:	39 d0       	rcall	.+114    	; 0x15e2 <vfprintf>
    1570:	e0 91 60 01 	lds	r30, 0x0160
    1574:	f0 91 61 01 	lds	r31, 0x0161
    1578:	23 81       	ldd	r18, Z+3	; 0x03
    157a:	27 7f       	andi	r18, 0xF7	; 247
    157c:	23 83       	std	Z+3, r18	; 0x03
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	08 95       	ret

00001584 <puts_P>:
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	8c 01       	movw	r16, r24
    158e:	e0 91 60 01 	lds	r30, 0x0160
    1592:	f0 91 61 01 	lds	r31, 0x0161
    1596:	83 81       	ldd	r24, Z+3	; 0x03
    1598:	81 ff       	sbrs	r24, 1
    159a:	1b c0       	rjmp	.+54     	; 0x15d2 <puts_P+0x4e>
    159c:	c0 e0       	ldi	r28, 0x00	; 0
    159e:	d0 e0       	ldi	r29, 0x00	; 0
    15a0:	07 c0       	rjmp	.+14     	; 0x15b0 <puts_P+0x2c>
    15a2:	09 95       	icall
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	11 f0       	breq	.+4      	; 0x15ac <puts_P+0x28>
    15a8:	cf ef       	ldi	r28, 0xFF	; 255
    15aa:	df ef       	ldi	r29, 0xFF	; 255
    15ac:	0f 5f       	subi	r16, 0xFF	; 255
    15ae:	1f 4f       	sbci	r17, 0xFF	; 255
    15b0:	f8 01       	movw	r30, r16
    15b2:	84 91       	lpm	r24, Z
    15b4:	60 91 60 01 	lds	r22, 0x0160
    15b8:	70 91 61 01 	lds	r23, 0x0161
    15bc:	db 01       	movw	r26, r22
    15be:	18 96       	adiw	r26, 0x08	; 8
    15c0:	ed 91       	ld	r30, X+
    15c2:	fc 91       	ld	r31, X
    15c4:	19 97       	sbiw	r26, 0x09	; 9
    15c6:	88 23       	and	r24, r24
    15c8:	61 f7       	brne	.-40     	; 0x15a2 <puts_P+0x1e>
    15ca:	8a e0       	ldi	r24, 0x0A	; 10
    15cc:	09 95       	icall
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	11 f0       	breq	.+4      	; 0x15d6 <puts_P+0x52>
    15d2:	cf ef       	ldi	r28, 0xFF	; 255
    15d4:	df ef       	ldi	r29, 0xFF	; 255
    15d6:	ce 01       	movw	r24, r28
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	1f 91       	pop	r17
    15de:	0f 91       	pop	r16
    15e0:	08 95       	ret

000015e2 <vfprintf>:
    15e2:	2f 92       	push	r2
    15e4:	3f 92       	push	r3
    15e6:	4f 92       	push	r4
    15e8:	5f 92       	push	r5
    15ea:	6f 92       	push	r6
    15ec:	7f 92       	push	r7
    15ee:	8f 92       	push	r8
    15f0:	9f 92       	push	r9
    15f2:	af 92       	push	r10
    15f4:	bf 92       	push	r11
    15f6:	cf 92       	push	r12
    15f8:	df 92       	push	r13
    15fa:	ef 92       	push	r14
    15fc:	ff 92       	push	r15
    15fe:	0f 93       	push	r16
    1600:	1f 93       	push	r17
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	2d 97       	sbiw	r28, 0x0d	; 13
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	3c 01       	movw	r6, r24
    1618:	7d 87       	std	Y+13, r23	; 0x0d
    161a:	6c 87       	std	Y+12, r22	; 0x0c
    161c:	5a 01       	movw	r10, r20
    161e:	fc 01       	movw	r30, r24
    1620:	17 82       	std	Z+7, r1	; 0x07
    1622:	16 82       	std	Z+6, r1	; 0x06
    1624:	83 81       	ldd	r24, Z+3	; 0x03
    1626:	81 ff       	sbrs	r24, 1
    1628:	bb c1       	rjmp	.+886    	; 0x19a0 <vfprintf+0x3be>
    162a:	2e 01       	movw	r4, r28
    162c:	08 94       	sec
    162e:	41 1c       	adc	r4, r1
    1630:	51 1c       	adc	r5, r1
    1632:	f3 01       	movw	r30, r6
    1634:	93 81       	ldd	r25, Z+3	; 0x03
    1636:	ec 85       	ldd	r30, Y+12	; 0x0c
    1638:	fd 85       	ldd	r31, Y+13	; 0x0d
    163a:	93 fd       	sbrc	r25, 3
    163c:	85 91       	lpm	r24, Z+
    163e:	93 ff       	sbrs	r25, 3
    1640:	81 91       	ld	r24, Z+
    1642:	fd 87       	std	Y+13, r31	; 0x0d
    1644:	ec 87       	std	Y+12, r30	; 0x0c
    1646:	88 23       	and	r24, r24
    1648:	09 f4       	brne	.+2      	; 0x164c <vfprintf+0x6a>
    164a:	a6 c1       	rjmp	.+844    	; 0x1998 <vfprintf+0x3b6>
    164c:	85 32       	cpi	r24, 0x25	; 37
    164e:	41 f4       	brne	.+16     	; 0x1660 <vfprintf+0x7e>
    1650:	93 fd       	sbrc	r25, 3
    1652:	85 91       	lpm	r24, Z+
    1654:	93 ff       	sbrs	r25, 3
    1656:	81 91       	ld	r24, Z+
    1658:	fd 87       	std	Y+13, r31	; 0x0d
    165a:	ec 87       	std	Y+12, r30	; 0x0c
    165c:	85 32       	cpi	r24, 0x25	; 37
    165e:	21 f4       	brne	.+8      	; 0x1668 <vfprintf+0x86>
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	b3 01       	movw	r22, r6
    1664:	44 df       	rcall	.-376    	; 0x14ee <fputc>
    1666:	e5 cf       	rjmp	.-54     	; 0x1632 <vfprintf+0x50>
    1668:	ff 24       	eor	r15, r15
    166a:	ee 24       	eor	r14, r14
    166c:	10 e0       	ldi	r17, 0x00	; 0
    166e:	10 32       	cpi	r17, 0x20	; 32
    1670:	b0 f4       	brcc	.+44     	; 0x169e <vfprintf+0xbc>
    1672:	8b 32       	cpi	r24, 0x2B	; 43
    1674:	69 f0       	breq	.+26     	; 0x1690 <vfprintf+0xae>
    1676:	8c 32       	cpi	r24, 0x2C	; 44
    1678:	28 f4       	brcc	.+10     	; 0x1684 <vfprintf+0xa2>
    167a:	80 32       	cpi	r24, 0x20	; 32
    167c:	51 f0       	breq	.+20     	; 0x1692 <vfprintf+0xb0>
    167e:	83 32       	cpi	r24, 0x23	; 35
    1680:	71 f4       	brne	.+28     	; 0x169e <vfprintf+0xbc>
    1682:	0b c0       	rjmp	.+22     	; 0x169a <vfprintf+0xb8>
    1684:	8d 32       	cpi	r24, 0x2D	; 45
    1686:	39 f0       	breq	.+14     	; 0x1696 <vfprintf+0xb4>
    1688:	80 33       	cpi	r24, 0x30	; 48
    168a:	49 f4       	brne	.+18     	; 0x169e <vfprintf+0xbc>
    168c:	11 60       	ori	r17, 0x01	; 1
    168e:	2c c0       	rjmp	.+88     	; 0x16e8 <vfprintf+0x106>
    1690:	12 60       	ori	r17, 0x02	; 2
    1692:	14 60       	ori	r17, 0x04	; 4
    1694:	29 c0       	rjmp	.+82     	; 0x16e8 <vfprintf+0x106>
    1696:	18 60       	ori	r17, 0x08	; 8
    1698:	27 c0       	rjmp	.+78     	; 0x16e8 <vfprintf+0x106>
    169a:	10 61       	ori	r17, 0x10	; 16
    169c:	25 c0       	rjmp	.+74     	; 0x16e8 <vfprintf+0x106>
    169e:	17 fd       	sbrc	r17, 7
    16a0:	2e c0       	rjmp	.+92     	; 0x16fe <vfprintf+0x11c>
    16a2:	28 2f       	mov	r18, r24
    16a4:	20 53       	subi	r18, 0x30	; 48
    16a6:	2a 30       	cpi	r18, 0x0A	; 10
    16a8:	98 f4       	brcc	.+38     	; 0x16d0 <vfprintf+0xee>
    16aa:	16 ff       	sbrs	r17, 6
    16ac:	08 c0       	rjmp	.+16     	; 0x16be <vfprintf+0xdc>
    16ae:	8f 2d       	mov	r24, r15
    16b0:	88 0f       	add	r24, r24
    16b2:	f8 2e       	mov	r15, r24
    16b4:	ff 0c       	add	r15, r15
    16b6:	ff 0c       	add	r15, r15
    16b8:	f8 0e       	add	r15, r24
    16ba:	f2 0e       	add	r15, r18
    16bc:	15 c0       	rjmp	.+42     	; 0x16e8 <vfprintf+0x106>
    16be:	8e 2d       	mov	r24, r14
    16c0:	88 0f       	add	r24, r24
    16c2:	e8 2e       	mov	r14, r24
    16c4:	ee 0c       	add	r14, r14
    16c6:	ee 0c       	add	r14, r14
    16c8:	e8 0e       	add	r14, r24
    16ca:	e2 0e       	add	r14, r18
    16cc:	10 62       	ori	r17, 0x20	; 32
    16ce:	0c c0       	rjmp	.+24     	; 0x16e8 <vfprintf+0x106>
    16d0:	8e 32       	cpi	r24, 0x2E	; 46
    16d2:	21 f4       	brne	.+8      	; 0x16dc <vfprintf+0xfa>
    16d4:	16 fd       	sbrc	r17, 6
    16d6:	60 c1       	rjmp	.+704    	; 0x1998 <vfprintf+0x3b6>
    16d8:	10 64       	ori	r17, 0x40	; 64
    16da:	06 c0       	rjmp	.+12     	; 0x16e8 <vfprintf+0x106>
    16dc:	8c 36       	cpi	r24, 0x6C	; 108
    16de:	11 f4       	brne	.+4      	; 0x16e4 <vfprintf+0x102>
    16e0:	10 68       	ori	r17, 0x80	; 128
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <vfprintf+0x106>
    16e4:	88 36       	cpi	r24, 0x68	; 104
    16e6:	59 f4       	brne	.+22     	; 0x16fe <vfprintf+0x11c>
    16e8:	ec 85       	ldd	r30, Y+12	; 0x0c
    16ea:	fd 85       	ldd	r31, Y+13	; 0x0d
    16ec:	93 fd       	sbrc	r25, 3
    16ee:	85 91       	lpm	r24, Z+
    16f0:	93 ff       	sbrs	r25, 3
    16f2:	81 91       	ld	r24, Z+
    16f4:	fd 87       	std	Y+13, r31	; 0x0d
    16f6:	ec 87       	std	Y+12, r30	; 0x0c
    16f8:	88 23       	and	r24, r24
    16fa:	09 f0       	breq	.+2      	; 0x16fe <vfprintf+0x11c>
    16fc:	b8 cf       	rjmp	.-144    	; 0x166e <vfprintf+0x8c>
    16fe:	98 2f       	mov	r25, r24
    1700:	95 54       	subi	r25, 0x45	; 69
    1702:	93 30       	cpi	r25, 0x03	; 3
    1704:	18 f0       	brcs	.+6      	; 0x170c <vfprintf+0x12a>
    1706:	90 52       	subi	r25, 0x20	; 32
    1708:	93 30       	cpi	r25, 0x03	; 3
    170a:	38 f4       	brcc	.+14     	; 0x171a <vfprintf+0x138>
    170c:	24 e0       	ldi	r18, 0x04	; 4
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	a2 0e       	add	r10, r18
    1712:	b3 1e       	adc	r11, r19
    1714:	3f e3       	ldi	r19, 0x3F	; 63
    1716:	39 83       	std	Y+1, r19	; 0x01
    1718:	0f c0       	rjmp	.+30     	; 0x1738 <vfprintf+0x156>
    171a:	83 36       	cpi	r24, 0x63	; 99
    171c:	31 f0       	breq	.+12     	; 0x172a <vfprintf+0x148>
    171e:	83 37       	cpi	r24, 0x73	; 115
    1720:	81 f0       	breq	.+32     	; 0x1742 <vfprintf+0x160>
    1722:	83 35       	cpi	r24, 0x53	; 83
    1724:	09 f0       	breq	.+2      	; 0x1728 <vfprintf+0x146>
    1726:	56 c0       	rjmp	.+172    	; 0x17d4 <vfprintf+0x1f2>
    1728:	21 c0       	rjmp	.+66     	; 0x176c <vfprintf+0x18a>
    172a:	f5 01       	movw	r30, r10
    172c:	80 81       	ld	r24, Z
    172e:	89 83       	std	Y+1, r24	; 0x01
    1730:	22 e0       	ldi	r18, 0x02	; 2
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	a2 0e       	add	r10, r18
    1736:	b3 1e       	adc	r11, r19
    1738:	21 e0       	ldi	r18, 0x01	; 1
    173a:	c2 2e       	mov	r12, r18
    173c:	d1 2c       	mov	r13, r1
    173e:	42 01       	movw	r8, r4
    1740:	13 c0       	rjmp	.+38     	; 0x1768 <vfprintf+0x186>
    1742:	92 e0       	ldi	r25, 0x02	; 2
    1744:	29 2e       	mov	r2, r25
    1746:	31 2c       	mov	r3, r1
    1748:	2a 0c       	add	r2, r10
    174a:	3b 1c       	adc	r3, r11
    174c:	f5 01       	movw	r30, r10
    174e:	80 80       	ld	r8, Z
    1750:	91 80       	ldd	r9, Z+1	; 0x01
    1752:	16 ff       	sbrs	r17, 6
    1754:	03 c0       	rjmp	.+6      	; 0x175c <vfprintf+0x17a>
    1756:	6f 2d       	mov	r22, r15
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <vfprintf+0x17e>
    175c:	6f ef       	ldi	r22, 0xFF	; 255
    175e:	7f ef       	ldi	r23, 0xFF	; 255
    1760:	c4 01       	movw	r24, r8
    1762:	44 d1       	rcall	.+648    	; 0x19ec <strnlen>
    1764:	6c 01       	movw	r12, r24
    1766:	51 01       	movw	r10, r2
    1768:	1f 77       	andi	r17, 0x7F	; 127
    176a:	14 c0       	rjmp	.+40     	; 0x1794 <vfprintf+0x1b2>
    176c:	82 e0       	ldi	r24, 0x02	; 2
    176e:	28 2e       	mov	r2, r24
    1770:	31 2c       	mov	r3, r1
    1772:	2a 0c       	add	r2, r10
    1774:	3b 1c       	adc	r3, r11
    1776:	f5 01       	movw	r30, r10
    1778:	80 80       	ld	r8, Z
    177a:	91 80       	ldd	r9, Z+1	; 0x01
    177c:	16 ff       	sbrs	r17, 6
    177e:	03 c0       	rjmp	.+6      	; 0x1786 <vfprintf+0x1a4>
    1780:	6f 2d       	mov	r22, r15
    1782:	70 e0       	ldi	r23, 0x00	; 0
    1784:	02 c0       	rjmp	.+4      	; 0x178a <vfprintf+0x1a8>
    1786:	6f ef       	ldi	r22, 0xFF	; 255
    1788:	7f ef       	ldi	r23, 0xFF	; 255
    178a:	c4 01       	movw	r24, r8
    178c:	24 d1       	rcall	.+584    	; 0x19d6 <strnlen_P>
    178e:	6c 01       	movw	r12, r24
    1790:	10 68       	ori	r17, 0x80	; 128
    1792:	51 01       	movw	r10, r2
    1794:	13 fd       	sbrc	r17, 3
    1796:	1a c0       	rjmp	.+52     	; 0x17cc <vfprintf+0x1ea>
    1798:	05 c0       	rjmp	.+10     	; 0x17a4 <vfprintf+0x1c2>
    179a:	80 e2       	ldi	r24, 0x20	; 32
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	b3 01       	movw	r22, r6
    17a0:	a6 de       	rcall	.-692    	; 0x14ee <fputc>
    17a2:	ea 94       	dec	r14
    17a4:	8e 2d       	mov	r24, r14
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	c8 16       	cp	r12, r24
    17aa:	d9 06       	cpc	r13, r25
    17ac:	b0 f3       	brcs	.-20     	; 0x179a <vfprintf+0x1b8>
    17ae:	0e c0       	rjmp	.+28     	; 0x17cc <vfprintf+0x1ea>
    17b0:	f4 01       	movw	r30, r8
    17b2:	17 fd       	sbrc	r17, 7
    17b4:	85 91       	lpm	r24, Z+
    17b6:	17 ff       	sbrs	r17, 7
    17b8:	81 91       	ld	r24, Z+
    17ba:	4f 01       	movw	r8, r30
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	b3 01       	movw	r22, r6
    17c0:	96 de       	rcall	.-724    	; 0x14ee <fputc>
    17c2:	e1 10       	cpse	r14, r1
    17c4:	ea 94       	dec	r14
    17c6:	08 94       	sec
    17c8:	c1 08       	sbc	r12, r1
    17ca:	d1 08       	sbc	r13, r1
    17cc:	c1 14       	cp	r12, r1
    17ce:	d1 04       	cpc	r13, r1
    17d0:	79 f7       	brne	.-34     	; 0x17b0 <vfprintf+0x1ce>
    17d2:	df c0       	rjmp	.+446    	; 0x1992 <vfprintf+0x3b0>
    17d4:	84 36       	cpi	r24, 0x64	; 100
    17d6:	11 f0       	breq	.+4      	; 0x17dc <vfprintf+0x1fa>
    17d8:	89 36       	cpi	r24, 0x69	; 105
    17da:	49 f5       	brne	.+82     	; 0x182e <vfprintf+0x24c>
    17dc:	f5 01       	movw	r30, r10
    17de:	17 ff       	sbrs	r17, 7
    17e0:	07 c0       	rjmp	.+14     	; 0x17f0 <vfprintf+0x20e>
    17e2:	80 81       	ld	r24, Z
    17e4:	91 81       	ldd	r25, Z+1	; 0x01
    17e6:	a2 81       	ldd	r26, Z+2	; 0x02
    17e8:	b3 81       	ldd	r27, Z+3	; 0x03
    17ea:	24 e0       	ldi	r18, 0x04	; 4
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	08 c0       	rjmp	.+16     	; 0x1800 <vfprintf+0x21e>
    17f0:	80 81       	ld	r24, Z
    17f2:	91 81       	ldd	r25, Z+1	; 0x01
    17f4:	aa 27       	eor	r26, r26
    17f6:	97 fd       	sbrc	r25, 7
    17f8:	a0 95       	com	r26
    17fa:	ba 2f       	mov	r27, r26
    17fc:	22 e0       	ldi	r18, 0x02	; 2
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	a2 0e       	add	r10, r18
    1802:	b3 1e       	adc	r11, r19
    1804:	01 2f       	mov	r16, r17
    1806:	0f 76       	andi	r16, 0x6F	; 111
    1808:	b7 ff       	sbrs	r27, 7
    180a:	08 c0       	rjmp	.+16     	; 0x181c <vfprintf+0x23a>
    180c:	b0 95       	com	r27
    180e:	a0 95       	com	r26
    1810:	90 95       	com	r25
    1812:	81 95       	neg	r24
    1814:	9f 4f       	sbci	r25, 0xFF	; 255
    1816:	af 4f       	sbci	r26, 0xFF	; 255
    1818:	bf 4f       	sbci	r27, 0xFF	; 255
    181a:	00 68       	ori	r16, 0x80	; 128
    181c:	bc 01       	movw	r22, r24
    181e:	cd 01       	movw	r24, r26
    1820:	a2 01       	movw	r20, r4
    1822:	2a e0       	ldi	r18, 0x0A	; 10
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	ed d0       	rcall	.+474    	; 0x1a02 <__ultoa_invert>
    1828:	d8 2e       	mov	r13, r24
    182a:	d4 18       	sub	r13, r4
    182c:	3e c0       	rjmp	.+124    	; 0x18aa <vfprintf+0x2c8>
    182e:	85 37       	cpi	r24, 0x75	; 117
    1830:	21 f4       	brne	.+8      	; 0x183a <vfprintf+0x258>
    1832:	1f 7e       	andi	r17, 0xEF	; 239
    1834:	2a e0       	ldi	r18, 0x0A	; 10
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	20 c0       	rjmp	.+64     	; 0x187a <vfprintf+0x298>
    183a:	19 7f       	andi	r17, 0xF9	; 249
    183c:	8f 36       	cpi	r24, 0x6F	; 111
    183e:	a9 f0       	breq	.+42     	; 0x186a <vfprintf+0x288>
    1840:	80 37       	cpi	r24, 0x70	; 112
    1842:	20 f4       	brcc	.+8      	; 0x184c <vfprintf+0x26a>
    1844:	88 35       	cpi	r24, 0x58	; 88
    1846:	09 f0       	breq	.+2      	; 0x184a <vfprintf+0x268>
    1848:	a7 c0       	rjmp	.+334    	; 0x1998 <vfprintf+0x3b6>
    184a:	0b c0       	rjmp	.+22     	; 0x1862 <vfprintf+0x280>
    184c:	80 37       	cpi	r24, 0x70	; 112
    184e:	21 f0       	breq	.+8      	; 0x1858 <vfprintf+0x276>
    1850:	88 37       	cpi	r24, 0x78	; 120
    1852:	09 f0       	breq	.+2      	; 0x1856 <vfprintf+0x274>
    1854:	a1 c0       	rjmp	.+322    	; 0x1998 <vfprintf+0x3b6>
    1856:	01 c0       	rjmp	.+2      	; 0x185a <vfprintf+0x278>
    1858:	10 61       	ori	r17, 0x10	; 16
    185a:	14 ff       	sbrs	r17, 4
    185c:	09 c0       	rjmp	.+18     	; 0x1870 <vfprintf+0x28e>
    185e:	14 60       	ori	r17, 0x04	; 4
    1860:	07 c0       	rjmp	.+14     	; 0x1870 <vfprintf+0x28e>
    1862:	14 ff       	sbrs	r17, 4
    1864:	08 c0       	rjmp	.+16     	; 0x1876 <vfprintf+0x294>
    1866:	16 60       	ori	r17, 0x06	; 6
    1868:	06 c0       	rjmp	.+12     	; 0x1876 <vfprintf+0x294>
    186a:	28 e0       	ldi	r18, 0x08	; 8
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	05 c0       	rjmp	.+10     	; 0x187a <vfprintf+0x298>
    1870:	20 e1       	ldi	r18, 0x10	; 16
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	02 c0       	rjmp	.+4      	; 0x187a <vfprintf+0x298>
    1876:	20 e1       	ldi	r18, 0x10	; 16
    1878:	32 e0       	ldi	r19, 0x02	; 2
    187a:	f5 01       	movw	r30, r10
    187c:	17 ff       	sbrs	r17, 7
    187e:	07 c0       	rjmp	.+14     	; 0x188e <vfprintf+0x2ac>
    1880:	60 81       	ld	r22, Z
    1882:	71 81       	ldd	r23, Z+1	; 0x01
    1884:	82 81       	ldd	r24, Z+2	; 0x02
    1886:	93 81       	ldd	r25, Z+3	; 0x03
    1888:	44 e0       	ldi	r20, 0x04	; 4
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	06 c0       	rjmp	.+12     	; 0x189a <vfprintf+0x2b8>
    188e:	60 81       	ld	r22, Z
    1890:	71 81       	ldd	r23, Z+1	; 0x01
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	42 e0       	ldi	r20, 0x02	; 2
    1898:	50 e0       	ldi	r21, 0x00	; 0
    189a:	a4 0e       	add	r10, r20
    189c:	b5 1e       	adc	r11, r21
    189e:	a2 01       	movw	r20, r4
    18a0:	b0 d0       	rcall	.+352    	; 0x1a02 <__ultoa_invert>
    18a2:	d8 2e       	mov	r13, r24
    18a4:	d4 18       	sub	r13, r4
    18a6:	01 2f       	mov	r16, r17
    18a8:	0f 77       	andi	r16, 0x7F	; 127
    18aa:	06 ff       	sbrs	r16, 6
    18ac:	09 c0       	rjmp	.+18     	; 0x18c0 <vfprintf+0x2de>
    18ae:	0e 7f       	andi	r16, 0xFE	; 254
    18b0:	df 14       	cp	r13, r15
    18b2:	30 f4       	brcc	.+12     	; 0x18c0 <vfprintf+0x2de>
    18b4:	04 ff       	sbrs	r16, 4
    18b6:	06 c0       	rjmp	.+12     	; 0x18c4 <vfprintf+0x2e2>
    18b8:	02 fd       	sbrc	r16, 2
    18ba:	04 c0       	rjmp	.+8      	; 0x18c4 <vfprintf+0x2e2>
    18bc:	0f 7e       	andi	r16, 0xEF	; 239
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <vfprintf+0x2e2>
    18c0:	1d 2d       	mov	r17, r13
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <vfprintf+0x2e4>
    18c4:	1f 2d       	mov	r17, r15
    18c6:	80 2f       	mov	r24, r16
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	04 ff       	sbrs	r16, 4
    18cc:	0c c0       	rjmp	.+24     	; 0x18e6 <vfprintf+0x304>
    18ce:	fe 01       	movw	r30, r28
    18d0:	ed 0d       	add	r30, r13
    18d2:	f1 1d       	adc	r31, r1
    18d4:	20 81       	ld	r18, Z
    18d6:	20 33       	cpi	r18, 0x30	; 48
    18d8:	11 f4       	brne	.+4      	; 0x18de <vfprintf+0x2fc>
    18da:	09 7e       	andi	r16, 0xE9	; 233
    18dc:	09 c0       	rjmp	.+18     	; 0x18f0 <vfprintf+0x30e>
    18de:	02 ff       	sbrs	r16, 2
    18e0:	06 c0       	rjmp	.+12     	; 0x18ee <vfprintf+0x30c>
    18e2:	1e 5f       	subi	r17, 0xFE	; 254
    18e4:	05 c0       	rjmp	.+10     	; 0x18f0 <vfprintf+0x30e>
    18e6:	86 78       	andi	r24, 0x86	; 134
    18e8:	90 70       	andi	r25, 0x00	; 0
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	09 f0       	breq	.+2      	; 0x18f0 <vfprintf+0x30e>
    18ee:	1f 5f       	subi	r17, 0xFF	; 255
    18f0:	80 2e       	mov	r8, r16
    18f2:	99 24       	eor	r9, r9
    18f4:	03 fd       	sbrc	r16, 3
    18f6:	11 c0       	rjmp	.+34     	; 0x191a <vfprintf+0x338>
    18f8:	00 ff       	sbrs	r16, 0
    18fa:	0c c0       	rjmp	.+24     	; 0x1914 <vfprintf+0x332>
    18fc:	fd 2c       	mov	r15, r13
    18fe:	1e 15       	cp	r17, r14
    1900:	48 f4       	brcc	.+18     	; 0x1914 <vfprintf+0x332>
    1902:	fe 0c       	add	r15, r14
    1904:	f1 1a       	sub	r15, r17
    1906:	1e 2d       	mov	r17, r14
    1908:	05 c0       	rjmp	.+10     	; 0x1914 <vfprintf+0x332>
    190a:	80 e2       	ldi	r24, 0x20	; 32
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	b3 01       	movw	r22, r6
    1910:	ee dd       	rcall	.-1060   	; 0x14ee <fputc>
    1912:	1f 5f       	subi	r17, 0xFF	; 255
    1914:	1e 15       	cp	r17, r14
    1916:	c8 f3       	brcs	.-14     	; 0x190a <vfprintf+0x328>
    1918:	04 c0       	rjmp	.+8      	; 0x1922 <vfprintf+0x340>
    191a:	1e 15       	cp	r17, r14
    191c:	10 f4       	brcc	.+4      	; 0x1922 <vfprintf+0x340>
    191e:	e1 1a       	sub	r14, r17
    1920:	01 c0       	rjmp	.+2      	; 0x1924 <vfprintf+0x342>
    1922:	ee 24       	eor	r14, r14
    1924:	84 fe       	sbrs	r8, 4
    1926:	0e c0       	rjmp	.+28     	; 0x1944 <vfprintf+0x362>
    1928:	80 e3       	ldi	r24, 0x30	; 48
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	b3 01       	movw	r22, r6
    192e:	df dd       	rcall	.-1090   	; 0x14ee <fputc>
    1930:	82 fe       	sbrs	r8, 2
    1932:	1d c0       	rjmp	.+58     	; 0x196e <vfprintf+0x38c>
    1934:	81 fe       	sbrs	r8, 1
    1936:	03 c0       	rjmp	.+6      	; 0x193e <vfprintf+0x35c>
    1938:	88 e5       	ldi	r24, 0x58	; 88
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	10 c0       	rjmp	.+32     	; 0x195e <vfprintf+0x37c>
    193e:	88 e7       	ldi	r24, 0x78	; 120
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	0d c0       	rjmp	.+26     	; 0x195e <vfprintf+0x37c>
    1944:	c4 01       	movw	r24, r8
    1946:	86 78       	andi	r24, 0x86	; 134
    1948:	90 70       	andi	r25, 0x00	; 0
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	81 f0       	breq	.+32     	; 0x196e <vfprintf+0x38c>
    194e:	81 fc       	sbrc	r8, 1
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <vfprintf+0x374>
    1952:	80 e2       	ldi	r24, 0x20	; 32
    1954:	01 c0       	rjmp	.+2      	; 0x1958 <vfprintf+0x376>
    1956:	8b e2       	ldi	r24, 0x2B	; 43
    1958:	07 fd       	sbrc	r16, 7
    195a:	8d e2       	ldi	r24, 0x2D	; 45
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	b3 01       	movw	r22, r6
    1960:	c6 dd       	rcall	.-1140   	; 0x14ee <fputc>
    1962:	05 c0       	rjmp	.+10     	; 0x196e <vfprintf+0x38c>
    1964:	80 e3       	ldi	r24, 0x30	; 48
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	b3 01       	movw	r22, r6
    196a:	c1 dd       	rcall	.-1150   	; 0x14ee <fputc>
    196c:	fa 94       	dec	r15
    196e:	df 14       	cp	r13, r15
    1970:	c8 f3       	brcs	.-14     	; 0x1964 <vfprintf+0x382>
    1972:	da 94       	dec	r13
    1974:	f2 01       	movw	r30, r4
    1976:	ed 0d       	add	r30, r13
    1978:	f1 1d       	adc	r31, r1
    197a:	80 81       	ld	r24, Z
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	b3 01       	movw	r22, r6
    1980:	b6 dd       	rcall	.-1172   	; 0x14ee <fputc>
    1982:	dd 20       	and	r13, r13
    1984:	b1 f7       	brne	.-20     	; 0x1972 <vfprintf+0x390>
    1986:	05 c0       	rjmp	.+10     	; 0x1992 <vfprintf+0x3b0>
    1988:	80 e2       	ldi	r24, 0x20	; 32
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	b3 01       	movw	r22, r6
    198e:	af dd       	rcall	.-1186   	; 0x14ee <fputc>
    1990:	ea 94       	dec	r14
    1992:	ee 20       	and	r14, r14
    1994:	c9 f7       	brne	.-14     	; 0x1988 <vfprintf+0x3a6>
    1996:	4d ce       	rjmp	.-870    	; 0x1632 <vfprintf+0x50>
    1998:	f3 01       	movw	r30, r6
    199a:	86 81       	ldd	r24, Z+6	; 0x06
    199c:	97 81       	ldd	r25, Z+7	; 0x07
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <vfprintf+0x3c2>
    19a0:	8f ef       	ldi	r24, 0xFF	; 255
    19a2:	9f ef       	ldi	r25, 0xFF	; 255
    19a4:	2d 96       	adiw	r28, 0x0d	; 13
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	f8 94       	cli
    19aa:	de bf       	out	0x3e, r29	; 62
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	cd bf       	out	0x3d, r28	; 61
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	1f 91       	pop	r17
    19b6:	0f 91       	pop	r16
    19b8:	ff 90       	pop	r15
    19ba:	ef 90       	pop	r14
    19bc:	df 90       	pop	r13
    19be:	cf 90       	pop	r12
    19c0:	bf 90       	pop	r11
    19c2:	af 90       	pop	r10
    19c4:	9f 90       	pop	r9
    19c6:	8f 90       	pop	r8
    19c8:	7f 90       	pop	r7
    19ca:	6f 90       	pop	r6
    19cc:	5f 90       	pop	r5
    19ce:	4f 90       	pop	r4
    19d0:	3f 90       	pop	r3
    19d2:	2f 90       	pop	r2
    19d4:	08 95       	ret

000019d6 <strnlen_P>:
    19d6:	fc 01       	movw	r30, r24
    19d8:	05 90       	lpm	r0, Z+
    19da:	61 50       	subi	r22, 0x01	; 1
    19dc:	70 40       	sbci	r23, 0x00	; 0
    19de:	01 10       	cpse	r0, r1
    19e0:	d8 f7       	brcc	.-10     	; 0x19d8 <strnlen_P+0x2>
    19e2:	80 95       	com	r24
    19e4:	90 95       	com	r25
    19e6:	8e 0f       	add	r24, r30
    19e8:	9f 1f       	adc	r25, r31
    19ea:	08 95       	ret

000019ec <strnlen>:
    19ec:	fc 01       	movw	r30, r24
    19ee:	61 50       	subi	r22, 0x01	; 1
    19f0:	70 40       	sbci	r23, 0x00	; 0
    19f2:	01 90       	ld	r0, Z+
    19f4:	01 10       	cpse	r0, r1
    19f6:	d8 f7       	brcc	.-10     	; 0x19ee <strnlen+0x2>
    19f8:	80 95       	com	r24
    19fa:	90 95       	com	r25
    19fc:	8e 0f       	add	r24, r30
    19fe:	9f 1f       	adc	r25, r31
    1a00:	08 95       	ret

00001a02 <__ultoa_invert>:
    1a02:	fa 01       	movw	r30, r20
    1a04:	aa 27       	eor	r26, r26
    1a06:	28 30       	cpi	r18, 0x08	; 8
    1a08:	51 f1       	breq	.+84     	; 0x1a5e <__ultoa_invert+0x5c>
    1a0a:	20 31       	cpi	r18, 0x10	; 16
    1a0c:	81 f1       	breq	.+96     	; 0x1a6e <__ultoa_invert+0x6c>
    1a0e:	e8 94       	clt
    1a10:	6f 93       	push	r22
    1a12:	6e 7f       	andi	r22, 0xFE	; 254
    1a14:	6e 5f       	subi	r22, 0xFE	; 254
    1a16:	7f 4f       	sbci	r23, 0xFF	; 255
    1a18:	8f 4f       	sbci	r24, 0xFF	; 255
    1a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1c:	af 4f       	sbci	r26, 0xFF	; 255
    1a1e:	b1 e0       	ldi	r27, 0x01	; 1
    1a20:	3e d0       	rcall	.+124    	; 0x1a9e <__ultoa_invert+0x9c>
    1a22:	b4 e0       	ldi	r27, 0x04	; 4
    1a24:	3c d0       	rcall	.+120    	; 0x1a9e <__ultoa_invert+0x9c>
    1a26:	67 0f       	add	r22, r23
    1a28:	78 1f       	adc	r23, r24
    1a2a:	89 1f       	adc	r24, r25
    1a2c:	9a 1f       	adc	r25, r26
    1a2e:	a1 1d       	adc	r26, r1
    1a30:	68 0f       	add	r22, r24
    1a32:	79 1f       	adc	r23, r25
    1a34:	8a 1f       	adc	r24, r26
    1a36:	91 1d       	adc	r25, r1
    1a38:	a1 1d       	adc	r26, r1
    1a3a:	6a 0f       	add	r22, r26
    1a3c:	71 1d       	adc	r23, r1
    1a3e:	81 1d       	adc	r24, r1
    1a40:	91 1d       	adc	r25, r1
    1a42:	a1 1d       	adc	r26, r1
    1a44:	20 d0       	rcall	.+64     	; 0x1a86 <__ultoa_invert+0x84>
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <__ultoa_invert+0x48>
    1a48:	68 94       	set
    1a4a:	3f 91       	pop	r19
    1a4c:	2a e0       	ldi	r18, 0x0A	; 10
    1a4e:	26 9f       	mul	r18, r22
    1a50:	11 24       	eor	r1, r1
    1a52:	30 19       	sub	r19, r0
    1a54:	30 5d       	subi	r19, 0xD0	; 208
    1a56:	31 93       	st	Z+, r19
    1a58:	de f6       	brtc	.-74     	; 0x1a10 <__ultoa_invert+0xe>
    1a5a:	cf 01       	movw	r24, r30
    1a5c:	08 95       	ret
    1a5e:	46 2f       	mov	r20, r22
    1a60:	47 70       	andi	r20, 0x07	; 7
    1a62:	40 5d       	subi	r20, 0xD0	; 208
    1a64:	41 93       	st	Z+, r20
    1a66:	b3 e0       	ldi	r27, 0x03	; 3
    1a68:	0f d0       	rcall	.+30     	; 0x1a88 <__ultoa_invert+0x86>
    1a6a:	c9 f7       	brne	.-14     	; 0x1a5e <__ultoa_invert+0x5c>
    1a6c:	f6 cf       	rjmp	.-20     	; 0x1a5a <__ultoa_invert+0x58>
    1a6e:	46 2f       	mov	r20, r22
    1a70:	4f 70       	andi	r20, 0x0F	; 15
    1a72:	40 5d       	subi	r20, 0xD0	; 208
    1a74:	4a 33       	cpi	r20, 0x3A	; 58
    1a76:	18 f0       	brcs	.+6      	; 0x1a7e <__ultoa_invert+0x7c>
    1a78:	49 5d       	subi	r20, 0xD9	; 217
    1a7a:	31 fd       	sbrc	r19, 1
    1a7c:	40 52       	subi	r20, 0x20	; 32
    1a7e:	41 93       	st	Z+, r20
    1a80:	02 d0       	rcall	.+4      	; 0x1a86 <__ultoa_invert+0x84>
    1a82:	a9 f7       	brne	.-22     	; 0x1a6e <__ultoa_invert+0x6c>
    1a84:	ea cf       	rjmp	.-44     	; 0x1a5a <__ultoa_invert+0x58>
    1a86:	b4 e0       	ldi	r27, 0x04	; 4
    1a88:	a6 95       	lsr	r26
    1a8a:	97 95       	ror	r25
    1a8c:	87 95       	ror	r24
    1a8e:	77 95       	ror	r23
    1a90:	67 95       	ror	r22
    1a92:	ba 95       	dec	r27
    1a94:	c9 f7       	brne	.-14     	; 0x1a88 <__ultoa_invert+0x86>
    1a96:	00 97       	sbiw	r24, 0x00	; 0
    1a98:	61 05       	cpc	r22, r1
    1a9a:	71 05       	cpc	r23, r1
    1a9c:	08 95       	ret
    1a9e:	9b 01       	movw	r18, r22
    1aa0:	ac 01       	movw	r20, r24
    1aa2:	0a 2e       	mov	r0, r26
    1aa4:	06 94       	lsr	r0
    1aa6:	57 95       	ror	r21
    1aa8:	47 95       	ror	r20
    1aaa:	37 95       	ror	r19
    1aac:	27 95       	ror	r18
    1aae:	ba 95       	dec	r27
    1ab0:	c9 f7       	brne	.-14     	; 0x1aa4 <__ultoa_invert+0xa2>
    1ab2:	62 0f       	add	r22, r18
    1ab4:	73 1f       	adc	r23, r19
    1ab6:	84 1f       	adc	r24, r20
    1ab8:	95 1f       	adc	r25, r21
    1aba:	a0 1d       	adc	r26, r0
    1abc:	08 95       	ret

00001abe <_exit>:
    1abe:	f8 94       	cli

00001ac0 <__stop_program>:
    1ac0:	ff cf       	rjmp	.-2      	; 0x1ac0 <__stop_program>
