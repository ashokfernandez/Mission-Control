
MouseHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  0000257a  0000260e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000257a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fb  00800142  00800142  00002650  2**0
                  ALLOC
  3 .stab         00000f90  00000000  00000000  00002650  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000030d  00000000  00000000  000035e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000890  00000000  00000000  000038f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000da9c  00000000  00000000  00004180  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003454  00000000  00000000  00011c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005cd6  00000000  00000000  00015070  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001974  00000000  00000000  0001ad48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004fa1  00000000  00000000  0001c6bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009885  00000000  00000000  0002165d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a70  00000000  00000000  0002aee2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c1       	rjmp	.+562    	; 0x234 <__ctors_end>
       2:	00 00       	nop
       4:	36 c1       	rjmp	.+620    	; 0x272 <__bad_interrupt>
       6:	00 00       	nop
       8:	34 c1       	rjmp	.+616    	; 0x272 <__bad_interrupt>
       a:	00 00       	nop
       c:	32 c1       	rjmp	.+612    	; 0x272 <__bad_interrupt>
       e:	00 00       	nop
      10:	30 c1       	rjmp	.+608    	; 0x272 <__bad_interrupt>
      12:	00 00       	nop
      14:	2e c1       	rjmp	.+604    	; 0x272 <__bad_interrupt>
      16:	00 00       	nop
      18:	2c c1       	rjmp	.+600    	; 0x272 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2a c1       	rjmp	.+596    	; 0x272 <__bad_interrupt>
      1e:	00 00       	nop
      20:	28 c1       	rjmp	.+592    	; 0x272 <__bad_interrupt>
      22:	00 00       	nop
      24:	26 c1       	rjmp	.+588    	; 0x272 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 0b 0b 	jmp	0x1616	; 0x1616 <__vector_10>
      2c:	22 c1       	rjmp	.+580    	; 0x272 <__bad_interrupt>
      2e:	00 00       	nop
      30:	20 c1       	rjmp	.+576    	; 0x272 <__bad_interrupt>
      32:	00 00       	nop
      34:	1e c1       	rjmp	.+572    	; 0x272 <__bad_interrupt>
      36:	00 00       	nop
      38:	1c c1       	rjmp	.+568    	; 0x272 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1a c1       	rjmp	.+564    	; 0x272 <__bad_interrupt>
      3e:	00 00       	nop
      40:	18 c1       	rjmp	.+560    	; 0x272 <__bad_interrupt>
      42:	00 00       	nop
      44:	16 c1       	rjmp	.+556    	; 0x272 <__bad_interrupt>
      46:	00 00       	nop
      48:	14 c1       	rjmp	.+552    	; 0x272 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	12 c1       	rjmp	.+548    	; 0x272 <__bad_interrupt>
      4e:	00 00       	nop
      50:	10 c1       	rjmp	.+544    	; 0x272 <__bad_interrupt>
      52:	00 00       	nop
      54:	0e c1       	rjmp	.+540    	; 0x272 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c c1       	rjmp	.+536    	; 0x272 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0a c1       	rjmp	.+532    	; 0x272 <__bad_interrupt>
      5e:	00 00       	nop
      60:	08 c1       	rjmp	.+528    	; 0x272 <__bad_interrupt>
      62:	00 00       	nop
      64:	06 c1       	rjmp	.+524    	; 0x272 <__bad_interrupt>
      66:	00 00       	nop
      68:	04 c1       	rjmp	.+520    	; 0x272 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	02 c1       	rjmp	.+516    	; 0x272 <__bad_interrupt>
      6e:	00 00       	nop
      70:	00 c1       	rjmp	.+512    	; 0x272 <__bad_interrupt>
      72:	00 00       	nop
      74:	fe c0       	rjmp	.+508    	; 0x272 <__bad_interrupt>
      76:	00 00       	nop
      78:	fc c0       	rjmp	.+504    	; 0x272 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fa c0       	rjmp	.+500    	; 0x272 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f8 c0       	rjmp	.+496    	; 0x272 <__bad_interrupt>
      82:	00 00       	nop
      84:	f6 c0       	rjmp	.+492    	; 0x272 <__bad_interrupt>
      86:	00 00       	nop
      88:	f4 c0       	rjmp	.+488    	; 0x272 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f2 c0       	rjmp	.+484    	; 0x272 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f0 c0       	rjmp	.+480    	; 0x272 <__bad_interrupt>
      92:	00 00       	nop
      94:	ee c0       	rjmp	.+476    	; 0x272 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4265>:
      98:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 6f 73 74 20     .[36mMouse Host 
      a8:	44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b     Demo running....
      b8:	5b 33 37 6d 00                                      [37m.

000000bd <__c.4287>:
      bd:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
      cd:	0d 0a 00                                            ...

000000d0 <__c.4292>:
      d0:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
      e0:	68 65 64 2e 0d 0a 00                                hed....

000000e7 <__c.4299>:
      e7:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
      f7:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     107:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

00000114 <__c.4301>:
     114:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     124:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4d 6f 75 73     Not a Valid Mous
     134:	65 2e 0d 0a 00                                      e....

00000139 <__c.4303>:
     139:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     149:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     159:	6f 6e 2e 0d 0a 00                                   on....

0000015f <__c.4305>:
     15f:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 52 65     Error Setting Re
     16f:	70 6f 72 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f     port Protocol Mo
     17f:	64 65 20 6f 72 20 4e 6f 74 20 61 20 56 61 6c 69     de or Not a Vali
     18f:	64 20 4d 6f 75 73 65 2e 0d 0a 00                    d Mouse....

0000019a <__c.4307>:
     19a:	4d 6f 75 73 65 20 45 6e 75 6d 65 72 61 74 65 64     Mouse Enumerated
     1aa:	2e 0d 0a 00                                         ....

000001ae <__c.4312>:
     1ae:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     1be:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     1ce:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

000001dd <__c.4319>:
     1dd:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     1ed:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     1fd:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     20d:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     21d:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     22d:	1b 5b 33 37 6d 00 00                                .[37m..

00000234 <__ctors_end>:
     234:	11 24       	eor	r1, r1
     236:	1f be       	out	0x3f, r1	; 63
     238:	cf ef       	ldi	r28, 0xFF	; 255
     23a:	d0 e2       	ldi	r29, 0x20	; 32
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	cd bf       	out	0x3d, r28	; 61

00000240 <__do_copy_data>:
     240:	11 e0       	ldi	r17, 0x01	; 1
     242:	a0 e0       	ldi	r26, 0x00	; 0
     244:	b1 e0       	ldi	r27, 0x01	; 1
     246:	ea e7       	ldi	r30, 0x7A	; 122
     248:	f5 e2       	ldi	r31, 0x25	; 37
     24a:	00 e0       	ldi	r16, 0x00	; 0
     24c:	0b bf       	out	0x3b, r16	; 59
     24e:	02 c0       	rjmp	.+4      	; 0x254 <__do_copy_data+0x14>
     250:	07 90       	elpm	r0, Z+
     252:	0d 92       	st	X+, r0
     254:	a2 34       	cpi	r26, 0x42	; 66
     256:	b1 07       	cpc	r27, r17
     258:	d9 f7       	brne	.-10     	; 0x250 <__do_copy_data+0x10>
     25a:	1b be       	out	0x3b, r1	; 59

0000025c <__do_clear_bss>:
     25c:	15 e0       	ldi	r17, 0x05	; 5
     25e:	a2 e4       	ldi	r26, 0x42	; 66
     260:	b1 e0       	ldi	r27, 0x01	; 1
     262:	01 c0       	rjmp	.+2      	; 0x266 <.do_clear_bss_start>

00000264 <.do_clear_bss_loop>:
     264:	1d 92       	st	X+, r1

00000266 <.do_clear_bss_start>:
     266:	ad 33       	cpi	r26, 0x3D	; 61
     268:	b1 07       	cpc	r27, r17
     26a:	e1 f7       	brne	.-8      	; 0x264 <.do_clear_bss_loop>
     26c:	11 d1       	rcall	.+546    	; 0x490 <main>
     26e:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <_exit>

00000272 <__bad_interrupt>:
     272:	c6 ce       	rjmp	.-628    	; 0x0 <__vectors>

00000274 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     274:	9b b1       	in	r25, 0x0b	; 11
     276:	9f 70       	andi	r25, 0x0F	; 15
     278:	98 2b       	or	r25, r24
     27a:	9b b9       	out	0x0b, r25	; 11
			}
     27c:	08 95       	ret

0000027e <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     27e:	84 b7       	in	r24, 0x34	; 52
     280:	87 7f       	andi	r24, 0xF7	; 247
     282:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     284:	28 e1       	ldi	r18, 0x18	; 24
     286:	0f b6       	in	r0, 0x3f	; 63
     288:	f8 94       	cli
     28a:	20 93 60 00 	sts	0x0060, r18
     28e:	10 92 60 00 	sts	0x0060, r1
     292:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	80 e8       	ldi	r24, 0x80	; 128
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	80 93 61 00 	sts	0x0061, r24
     2a0:	90 93 61 00 	sts	0x0061, r25
     2a4:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2a6:	83 e3       	ldi	r24, 0x33	; 51
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	90 93 cd 00 	sts	0x00CD, r25
     2ae:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2b2:	86 e0       	ldi	r24, 0x06	; 6
     2b4:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2b8:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2bc:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     2c0:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2c2:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2c4:	8a b1       	in	r24, 0x0a	; 10
     2c6:	80 6f       	ori	r24, 0xF0	; 240
     2c8:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2ca:	8b b1       	in	r24, 0x0b	; 11
     2cc:	8f 70       	andi	r24, 0x0F	; 15
     2ce:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     2d0:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <Serial_CreateStream>

000002dc <MouseHost_Task>:
}
     2dc:	4f 92       	push	r4

/** Task to manage an enumerated USB mouse once connected, to display movement
 *  data as it is received.
 */
void MouseHost_Task(void)
{
     2de:	5f 92       	push	r5
     2e0:	6f 92       	push	r6
     2e2:	7f 92       	push	r7
     2e4:	9f 92       	push	r9
     2e6:	af 92       	push	r10
     2e8:	bf 92       	push	r11
     2ea:	cf 92       	push	r12
     2ec:	df 92       	push	r13
     2ee:	ef 92       	push	r14
     2f0:	ff 92       	push	r15
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	0f 92       	push	r0
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
			}
		}

		LEDs_SetAllLEDs(LEDMask);
	}
}
     300:	4d b6       	in	r4, 0x3d	; 61
     302:	5e b6       	in	r5, 0x3e	; 62
/** Task to manage an enumerated USB mouse once connected, to display movement
 *  data as it is received.
 */
void MouseHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     304:	80 91 28 05 	lds	r24, 0x0528
     308:	8b 30       	cpi	r24, 0x0B	; 11
     30a:	09 f0       	breq	.+2      	; 0x30e <MouseHost_Task+0x32>
     30c:	ab c0       	rjmp	.+342    	; 0x464 <MouseHost_Task+0x188>
	  return;

	if (HID_Host_IsReportReceived(&Mouse_HID_Interface))
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <HID_Host_IsReportReceived>
     316:	88 23       	and	r24, r24
     318:	09 f4       	brne	.+2      	; 0x31c <MouseHost_Task+0x40>
     31a:	a4 c0       	rjmp	.+328    	; 0x464 <MouseHost_Task+0x188>
     31c:	ad b6       	in	r10, 0x3d	; 61
     31e:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t MouseReport[Mouse_HID_Interface.State.LargestReportSize];
     320:	80 91 16 01 	lds	r24, 0x0116
     324:	2d b7       	in	r18, 0x3d	; 61
     326:	3e b7       	in	r19, 0x3e	; 62
     328:	28 1b       	sub	r18, r24
     32a:	31 09       	sbc	r19, r1
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	3e bf       	out	0x3e, r19	; 62
     332:	0f be       	out	0x3f, r0	; 63
     334:	2d bf       	out	0x3d, r18	; 61
     336:	6d b7       	in	r22, 0x3d	; 61
     338:	7e b7       	in	r23, 0x3e	; 62
     33a:	6f 5f       	subi	r22, 0xFF	; 255
     33c:	7f 4f       	sbci	r23, 0xFF	; 255
		HID_Host_ReceiveReport(&Mouse_HID_Interface, &MouseReport);
     33e:	e6 2e       	mov	r14, r22
     340:	b7 2e       	mov	r11, r23
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <HID_Host_ReceiveReport>

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     34a:	ff 24       	eor	r15, r15
	if (HID_Host_IsReportReceived(&Mouse_HID_Interface))
	{
		uint8_t MouseReport[Mouse_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Mouse_HID_Interface, &MouseReport);

		uint8_t LEDMask = LEDS_NO_LEDS;
     34c:	20 e0       	ldi	r18, 0x00	; 0

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     34e:	8a e2       	ldi	r24, 0x2A	; 42
     350:	68 2e       	mov	r6, r24
     352:	71 2c       	mov	r7, r1
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
			         ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
			          (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
			{
				int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     354:	40 e1       	ldi	r20, 0x10	; 16
     356:	c4 2e       	mov	r12, r20
     358:	d1 2c       	mov	r13, r1
		uint8_t MouseReport[Mouse_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Mouse_HID_Interface, &MouseReport);

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     35a:	7b c0       	rjmp	.+246    	; 0x452 <MouseHost_Task+0x176>
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     35c:	8f 2d       	mov	r24, r15
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	86 9d       	mul	r24, r6
     362:	80 01       	movw	r16, r0
     364:	87 9d       	mul	r24, r7
     366:	10 0d       	add	r17, r0
     368:	96 9d       	mul	r25, r6
     36a:	10 0d       	add	r17, r0
     36c:	11 24       	eor	r1, r1
     36e:	0d 5b       	subi	r16, 0xBD	; 189
     370:	1e 4f       	sbci	r17, 0xFE	; 254

			/* Update the report item value if it is contained within the current report */
			if (!(USB_GetHIDReportItemInfo(MouseReport, ReportItem)))
     372:	8e 2d       	mov	r24, r14
     374:	9b 2d       	mov	r25, r11
     376:	b8 01       	movw	r22, r16
     378:	29 83       	std	Y+1, r18	; 0x01
     37a:	24 d5       	rcall	.+2632   	; 0xdc4 <USB_GetHIDReportItemInfo>
     37c:	29 81       	ldd	r18, Y+1	; 0x01
     37e:	88 23       	and	r24, r24
     380:	09 f4       	brne	.+2      	; 0x384 <MouseHost_Task+0xa8>
     382:	66 c0       	rjmp	.+204    	; 0x450 <MouseHost_Task+0x174>
     384:	f8 01       	movw	r30, r16
			  continue;

			/* Determine what report item is being tested, process updated value as needed */
			if ((ReportItem->Attributes.Usage.Page        == USAGE_PAGE_BUTTON) &&
     386:	81 85       	ldd	r24, Z+9	; 0x09
     388:	92 85       	ldd	r25, Z+10	; 0x0a
     38a:	89 30       	cpi	r24, 0x09	; 9
     38c:	91 05       	cpc	r25, r1
     38e:	71 f4       	brne	.+28     	; 0x3ac <MouseHost_Task+0xd0>
     390:	82 81       	ldd	r24, Z+2	; 0x02
     392:	88 23       	and	r24, r24
     394:	09 f0       	breq	.+2      	; 0x398 <MouseHost_Task+0xbc>
     396:	5c c0       	rjmp	.+184    	; 0x450 <MouseHost_Task+0x174>
     398:	82 a1       	lds	r24, 0x42
			    (ReportItem->ItemType                     == HID_REPORT_ITEM_In))
			{
				if (ReportItem->Value)
     39a:	93 a1       	lds	r25, 0x43
     39c:	a4 a1       	lds	r26, 0x44
     39e:	b5 a1       	lds	r27, 0x45
     3a0:	00 97       	sbiw	r24, 0x00	; 0
     3a2:	a1 05       	cpc	r26, r1
     3a4:	b1 05       	cpc	r27, r1
     3a6:	09 f0       	breq	.+2      	; 0x3aa <MouseHost_Task+0xce>
     3a8:	50 c0       	rjmp	.+160    	; 0x44a <MouseHost_Task+0x16e>
     3aa:	52 c0       	rjmp	.+164    	; 0x450 <MouseHost_Task+0x174>
     3ac:	81 30       	cpi	r24, 0x01	; 1
				  LEDMask = LEDS_ALL_LEDS;
			}
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     3ae:	91 05       	cpc	r25, r1
     3b0:	09 f0       	breq	.+2      	; 0x3b4 <MouseHost_Task+0xd8>
     3b2:	4e c0       	rjmp	.+156    	; 0x450 <MouseHost_Task+0x174>
     3b4:	f8 01       	movw	r30, r16
			         (ReportItem->Attributes.Usage.Usage  == USAGE_SCROLL_WHEEL)       &&
     3b6:	43 85       	ldd	r20, Z+11	; 0x0b
     3b8:	54 85       	ldd	r21, Z+12	; 0x0c
     3ba:	48 33       	cpi	r20, 0x38	; 56
			    (ReportItem->ItemType                     == HID_REPORT_ITEM_In))
			{
				if (ReportItem->Value)
				  LEDMask = LEDS_ALL_LEDS;
			}
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     3bc:	51 05       	cpc	r21, r1
     3be:	c9 f4       	brne	.+50     	; 0x3f2 <MouseHost_Task+0x116>
     3c0:	82 81       	ldd	r24, Z+2	; 0x02
			         (ReportItem->Attributes.Usage.Usage  == USAGE_SCROLL_WHEEL)       &&
     3c2:	88 23       	and	r24, r24
     3c4:	b1 f4       	brne	.+44     	; 0x3f2 <MouseHost_Task+0x116>
     3c6:	80 85       	ldd	r24, Z+8	; 0x08
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
			{
				int16_t WheelDelta = HID_ALIGN_DATA(ReportItem, int16_t);
     3c8:	a6 01       	movw	r20, r12
     3ca:	48 1b       	sub	r20, r24
     3cc:	51 09       	sbc	r21, r1
     3ce:	82 a1       	lds	r24, 0x42
     3d0:	93 a1       	lds	r25, 0x43
     3d2:	a4 a1       	lds	r26, 0x44
     3d4:	b5 a1       	lds	r27, 0x45
     3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <MouseHost_Task+0x104>
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	aa 1f       	adc	r26, r26
     3de:	bb 1f       	adc	r27, r27
     3e0:	4a 95       	dec	r20
     3e2:	d2 f7       	brpl	.-12     	; 0x3d8 <MouseHost_Task+0xfc>
     3e4:	00 97       	sbiw	r24, 0x00	; 0

				if (WheelDelta)
     3e6:	a1 f1       	breq	.+104    	; 0x450 <MouseHost_Task+0x174>
     3e8:	18 16       	cp	r1, r24
				  LEDMask = (LEDS_LED1 | LEDS_LED2 | ((WheelDelta > 0) ? LEDS_LED3 : LEDS_LED4));
     3ea:	19 06       	cpc	r1, r25
     3ec:	84 f5       	brge	.+96     	; 0x44e <MouseHost_Task+0x172>
     3ee:	20 eb       	ldi	r18, 0xB0	; 176
     3f0:	2f c0       	rjmp	.+94     	; 0x450 <MouseHost_Task+0x174>
     3f2:	ca 01       	movw	r24, r20
			}
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
			         ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
     3f4:	c0 97       	sbiw	r24, 0x30	; 48
     3f6:	82 30       	cpi	r24, 0x02	; 2
				int16_t WheelDelta = HID_ALIGN_DATA(ReportItem, int16_t);

				if (WheelDelta)
				  LEDMask = (LEDS_LED1 | LEDS_LED2 | ((WheelDelta > 0) ? LEDS_LED3 : LEDS_LED4));
			}
			else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     3f8:	91 05       	cpc	r25, r1
     3fa:	50 f5       	brcc	.+84     	; 0x450 <MouseHost_Task+0x174>
     3fc:	f8 01       	movw	r30, r16
			         ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
			          (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
     3fe:	82 81       	ldd	r24, Z+2	; 0x02
     400:	88 23       	and	r24, r24
     402:	31 f5       	brne	.+76     	; 0x450 <MouseHost_Task+0x174>
     404:	80 85       	ldd	r24, Z+8	; 0x08
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
			{
				int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     406:	b6 01       	movw	r22, r12
     408:	68 1b       	sub	r22, r24
     40a:	71 09       	sbc	r23, r1
     40c:	82 a1       	lds	r24, 0x42
     40e:	93 a1       	lds	r25, 0x43
     410:	a4 a1       	lds	r26, 0x44
     412:	b5 a1       	lds	r27, 0x45
     414:	04 c0       	rjmp	.+8      	; 0x41e <MouseHost_Task+0x142>
     416:	88 0f       	add	r24, r24
     418:	99 1f       	adc	r25, r25
     41a:	aa 1f       	adc	r26, r26
     41c:	bb 1f       	adc	r27, r27
     41e:	6a 95       	dec	r22
     420:	d2 f7       	brpl	.-12     	; 0x416 <MouseHost_Task+0x13a>
     422:	00 97       	sbiw	r24, 0x00	; 0

				if (DeltaMovement)
     424:	a9 f0       	breq	.+42     	; 0x450 <MouseHost_Task+0x174>
     426:	40 33       	cpi	r20, 0x30	; 48
				{
					if (ReportItem->Attributes.Usage.Usage == USAGE_X)
     428:	51 05       	cpc	r21, r1
     42a:	39 f4       	brne	.+14     	; 0x43a <MouseHost_Task+0x15e>
     42c:	18 16       	cp	r1, r24
					  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED1 : LEDS_LED2);
     42e:	19 06       	cpc	r1, r25
     430:	14 f4       	brge	.+4      	; 0x436 <MouseHost_Task+0x15a>
     432:	80 e1       	ldi	r24, 0x10	; 16
     434:	08 c0       	rjmp	.+16     	; 0x446 <MouseHost_Task+0x16a>
     436:	80 e2       	ldi	r24, 0x20	; 32
     438:	06 c0       	rjmp	.+12     	; 0x446 <MouseHost_Task+0x16a>
     43a:	18 16       	cp	r1, r24
					else
					  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
     43c:	19 06       	cpc	r1, r25
     43e:	14 f4       	brge	.+4      	; 0x444 <MouseHost_Task+0x168>
     440:	80 e8       	ldi	r24, 0x80	; 128
     442:	01 c0       	rjmp	.+2      	; 0x446 <MouseHost_Task+0x16a>
     444:	80 e4       	ldi	r24, 0x40	; 64
     446:	28 2b       	or	r18, r24
     448:	03 c0       	rjmp	.+6      	; 0x450 <MouseHost_Task+0x174>
     44a:	20 ef       	ldi	r18, 0xF0	; 240
			/* Determine what report item is being tested, process updated value as needed */
			if ((ReportItem->Attributes.Usage.Page        == USAGE_PAGE_BUTTON) &&
			    (ReportItem->ItemType                     == HID_REPORT_ITEM_In))
			{
				if (ReportItem->Value)
				  LEDMask = LEDS_ALL_LEDS;
     44c:	01 c0       	rjmp	.+2      	; 0x450 <MouseHost_Task+0x174>
     44e:	20 e7       	ldi	r18, 0x70	; 112
			         (ReportItem->ItemType                == HID_REPORT_ITEM_In))
			{
				int16_t WheelDelta = HID_ALIGN_DATA(ReportItem, int16_t);

				if (WheelDelta)
				  LEDMask = (LEDS_LED1 | LEDS_LED2 | ((WheelDelta > 0) ? LEDS_LED3 : LEDS_LED4));
     450:	f3 94       	inc	r15
		uint8_t MouseReport[Mouse_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Mouse_HID_Interface, &MouseReport);

		uint8_t LEDMask = LEDS_NO_LEDS;

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     452:	80 91 42 01 	lds	r24, 0x0142
     456:	f8 16       	cp	r15, r24
     458:	08 f4       	brcc	.+2      	; 0x45c <MouseHost_Task+0x180>
     45a:	80 cf       	rjmp	.-256    	; 0x35c <MouseHost_Task+0x80>
     45c:	82 2f       	mov	r24, r18
					  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
				}
			}
		}

		LEDs_SetAllLEDs(LEDMask);
     45e:	0a df       	rcall	.-492    	; 0x274 <LEDs_SetAllLEDs>
     460:	ad be       	out	0x3d, r10	; 61
     462:	9e be       	out	0x3e, r9	; 62
     464:	0f b6       	in	r0, 0x3f	; 63
     466:	f8 94       	cli
	}
}
     468:	5e be       	out	0x3e, r5	; 62
     46a:	0f be       	out	0x3f, r0	; 63
     46c:	4d be       	out	0x3d, r4	; 61
     46e:	0f 90       	pop	r0
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	1f 91       	pop	r17
     476:	0f 91       	pop	r16
     478:	ff 90       	pop	r15
     47a:	ef 90       	pop	r14
     47c:	df 90       	pop	r13
     47e:	cf 90       	pop	r12
     480:	bf 90       	pop	r11
     482:	af 90       	pop	r10
     484:	9f 90       	pop	r9
     486:	7f 90       	pop	r7
     488:	6f 90       	pop	r6
     48a:	5f 90       	pop	r5
     48c:	4f 90       	pop	r4
     48e:	08 95       	ret

00000490 <main>:
     490:	f6 de       	rcall	.-532    	; 0x27e <SetupHardware>
     492:	88 e9       	ldi	r24, 0x98	; 152
 */
int main(void)
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "Mouse Host Demo running.\r\n" ESC_FG_WHITE));
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <puts_P>
     49a:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     49c:	eb de       	rcall	.-554    	; 0x274 <LEDs_SetAllLEDs>
     49e:	78 94       	sei
     4a0:	1d df       	rcall	.-454    	; 0x2dc <MouseHost_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     4a2:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		MouseHost_Task();
     4a6:	fc cf       	rjmp	.-8      	; 0x4a0 <main+0x10>

000004a8 <EVENT_USB_Host_DeviceAttached>:

		HID_Host_USBTask(&Mouse_HID_Interface);
		USB_USBTask();
     4a8:	8d eb       	ldi	r24, 0xBD	; 189
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <puts_P>
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4b0:	80 ea       	ldi	r24, 0xA0	; 160
     4b2:	e0 ce       	rjmp	.-576    	; 0x274 <LEDs_SetAllLEDs>

000004b4 <EVENT_USB_Host_DeviceUnattached>:
     4b4:	80 ed       	ldi	r24, 0xD0	; 208
}
     4b6:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     4b8:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     4bc:	80 e1       	ldi	r24, 0x10	; 16
     4be:	da ce       	rjmp	.-588    	; 0x274 <LEDs_SetAllLEDs>

000004c0 <EVENT_USB_Host_DeviceEnumerationComplete>:
     4c0:	cf 93       	push	r28
}
     4c2:	df 93       	push	r29

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	c2 50       	subi	r28, 0x02	; 2
     4ca:	d2 40       	sbci	r29, 0x02	; 2
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	f8 94       	cli
     4d0:	de bf       	out	0x3e, r29	; 62
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4d6:	80 ea       	ldi	r24, 0xA0	; 160
     4d8:	cd de       	rcall	.-614    	; 0x274 <LEDs_SetAllLEDs>
     4da:	81 e0       	ldi	r24, 0x01	; 1

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     4dc:	be 01       	movw	r22, r28
     4de:	6f 5f       	subi	r22, 0xFF	; 255
     4e0:	7f 4f       	sbci	r23, 0xFF	; 255
     4e2:	ae 01       	movw	r20, r28
     4e4:	4d 5f       	subi	r20, 0xFD	; 253
     4e6:	5f 4f       	sbci	r21, 0xFF	; 255
     4e8:	20 e0       	ldi	r18, 0x00	; 0
     4ea:	32 e0       	ldi	r19, 0x02	; 2
     4ec:	0e 94 a4 0b 	call	0x1748	; 0x1748 <USB_Host_GetDeviceConfigDescriptor>
     4f0:	88 23       	and	r24, r24
     4f2:	19 f0       	breq	.+6      	; 0x4fa <EVENT_USB_Host_DeviceEnumerationComplete+0x3a>
     4f4:	87 ee       	ldi	r24, 0xE7	; 231
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	15 c0       	rjmp	.+42     	; 0x524 <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
     4fa:	69 81       	ldd	r22, Y+1	; 0x01
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Mouse_HID_Interface,
     4fc:	7a 81       	ldd	r23, Y+2	; 0x02
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	ae 01       	movw	r20, r28
     504:	4d 5f       	subi	r20, 0xFD	; 253
     506:	5f 4f       	sbci	r21, 0xFF	; 255
     508:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <HID_Host_ConfigurePipes>
     50c:	88 23       	and	r24, r24
     50e:	19 f0       	breq	.+6      	; 0x516 <EVENT_USB_Host_DeviceEnumerationComplete+0x56>
     510:	84 e1       	ldi	r24, 0x14	; 20
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Mouse.\r\n"));
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	07 c0       	rjmp	.+14     	; 0x524 <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
     516:	81 e0       	ldi	r24, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     518:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <USB_Host_SetDeviceConfiguration>
     51c:	88 23       	and	r24, r24
     51e:	31 f0       	breq	.+12     	; 0x52c <EVENT_USB_Host_DeviceEnumerationComplete+0x6c>
     520:	89 e3       	ldi	r24, 0x39	; 57
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <puts_P>
     528:	80 e9       	ldi	r24, 0x90	; 144
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     52a:	15 c0       	rjmp	.+42     	; 0x556 <EVENT_USB_Host_DeviceEnumerationComplete+0x96>
     52c:	80 e0       	ldi	r24, 0x00	; 0
		return;
	}

	if (HID_Host_SetReportProtocol(&Mouse_HID_Interface) != 0)
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <HID_Host_SetReportProtocol>
     534:	88 23       	and	r24, r24
     536:	51 f0       	breq	.+20     	; 0x54c <EVENT_USB_Host_DeviceEnumerationComplete+0x8c>
     538:	8f e5       	ldi	r24, 0x5F	; 95
	{
		puts_P(PSTR("Error Setting Report Protocol Mode or Not a Valid Mouse.\r\n"));
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <puts_P>
     540:	80 e9       	ldi	r24, 0x90	; 144
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     542:	98 de       	rcall	.-720    	; 0x274 <LEDs_SetAllLEDs>
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <USB_Host_SetDeviceConfiguration>
		USB_Host_SetDeviceConfiguration(0);
     54a:	06 c0       	rjmp	.+12     	; 0x558 <EVENT_USB_Host_DeviceEnumerationComplete+0x98>
     54c:	8a e9       	ldi	r24, 0x9A	; 154
		return;
     54e:	91 e0       	ldi	r25, 0x01	; 1
	}

	puts_P(PSTR("Mouse Enumerated.\r\n"));
     550:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <puts_P>
     554:	80 e6       	ldi	r24, 0x60	; 96
     556:	8e de       	rcall	.-740    	; 0x274 <LEDs_SetAllLEDs>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     558:	ce 5f       	subi	r28, 0xFE	; 254
     55a:	dd 4f       	sbci	r29, 0xFD	; 253
     55c:	0f b6       	in	r0, 0x3f	; 63
}
     55e:	f8 94       	cli
     560:	de bf       	out	0x3e, r29	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	cd bf       	out	0x3d, r28	; 61
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <EVENT_USB_Host_HostError>:
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	0f 92       	push	r0

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     576:	89 83       	std	Y+1, r24	; 0x01
     578:	cb d7       	rcall	.+3990   	; 0x1510 <USB_Disable>
     57a:	00 d0       	rcall	.+0      	; 0x57c <EVENT_USB_Host_HostError+0x10>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     57c:	00 d0       	rcall	.+0      	; 0x57e <EVENT_USB_Host_HostError+0x12>
     57e:	ed b7       	in	r30, 0x3d	; 61
     580:	fe b7       	in	r31, 0x3e	; 62
     582:	31 96       	adiw	r30, 0x01	; 1
     584:	2e ea       	ldi	r18, 0xAE	; 174
     586:	31 e0       	ldi	r19, 0x01	; 1
     588:	ad b7       	in	r26, 0x3d	; 61
     58a:	be b7       	in	r27, 0x3e	; 62
     58c:	12 96       	adiw	r26, 0x02	; 2
     58e:	3c 93       	st	X, r19
     590:	2e 93       	st	-X, r18
     592:	11 97       	sbiw	r26, 0x01	; 1
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	82 83       	std	Z+2, r24	; 0x02
     598:	13 82       	std	Z+3, r1	; 0x03
     59a:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <printf_P>
     59e:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	80 e9       	ldi	r24, 0x90	; 144
     5a8:	65 de       	rcall	.-822    	; 0x274 <LEDs_SetAllLEDs>
     5aa:	ff cf       	rjmp	.-2      	; 0x5aa <EVENT_USB_Host_HostError+0x3e>

000005ac <EVENT_USB_Host_DeviceEnumerationFailed>:
     5ac:	90 91 28 05 	lds	r25, 0x0528
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     5b0:	2d b7       	in	r18, 0x3d	; 61
     5b2:	3e b7       	in	r19, 0x3e	; 62
     5b4:	28 50       	subi	r18, 0x08	; 8
     5b6:	30 40       	sbci	r19, 0x00	; 0
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	3e bf       	out	0x3e, r19	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	2d bf       	out	0x3d, r18	; 61
     5c2:	ed b7       	in	r30, 0x3d	; 61
     5c4:	fe b7       	in	r31, 0x3e	; 62
     5c6:	31 96       	adiw	r30, 0x01	; 1
     5c8:	2d ed       	ldi	r18, 0xDD	; 221
     5ca:	31 e0       	ldi	r19, 0x01	; 1
     5cc:	ad b7       	in	r26, 0x3d	; 61
     5ce:	be b7       	in	r27, 0x3e	; 62
     5d0:	12 96       	adiw	r26, 0x02	; 2
     5d2:	3c 93       	st	X, r19
     5d4:	2e 93       	st	-X, r18
     5d6:	11 97       	sbiw	r26, 0x01	; 1
     5d8:	82 83       	std	Z+2, r24	; 0x02
     5da:	13 82       	std	Z+3, r1	; 0x03
     5dc:	64 83       	std	Z+4, r22	; 0x04
     5de:	15 82       	std	Z+5, r1	; 0x05
     5e0:	96 83       	std	Z+6, r25	; 0x06
     5e2:	17 82       	std	Z+7, r1	; 0x07
     5e4:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5e8:	2d b7       	in	r18, 0x3d	; 61
     5ea:	3e b7       	in	r19, 0x3e	; 62
     5ec:	28 5f       	subi	r18, 0xF8	; 248
     5ee:	3f 4f       	sbci	r19, 0xFF	; 255
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	f8 94       	cli
     5f4:	3e bf       	out	0x3e, r19	; 62
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	2d bf       	out	0x3d, r18	; 61
     5fa:	80 e9       	ldi	r24, 0x90	; 144
     5fc:	3b ce       	rjmp	.-906    	; 0x274 <LEDs_SetAllLEDs>

000005fe <CALLBACK_HIDParser_FilterHIDReportItem>:
     5fe:	dc 01       	movw	r26, r24
}
     600:	16 96       	adiw	r26, 0x06	; 6

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Mouse Usage is found - this prevents Joysticks, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a mouse by the demo
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     602:	ed 91       	ld	r30, X+
     604:	fc 91       	ld	r31, X
     606:	17 97       	sbiw	r26, 0x07	; 7
     608:	0d c0       	rjmp	.+26     	; 0x624 <CALLBACK_HIDParser_FilterHIDReportItem+0x26>
	{
		if ((CurrPath->Usage.Page  == USAGE_PAGE_GENERIC_DCTRL) &&
     60a:	81 81       	ldd	r24, Z+1	; 0x01
     60c:	92 81       	ldd	r25, Z+2	; 0x02
     60e:	81 30       	cpi	r24, 0x01	; 1
     610:	91 05       	cpc	r25, r1
     612:	29 f4       	brne	.+10     	; 0x61e <CALLBACK_HIDParser_FilterHIDReportItem+0x20>
     614:	83 81       	ldd	r24, Z+3	; 0x03
     616:	94 81       	ldd	r25, Z+4	; 0x04
     618:	82 30       	cpi	r24, 0x02	; 2
     61a:	91 05       	cpc	r25, r1
     61c:	39 f0       	breq	.+14     	; 0x62c <CALLBACK_HIDParser_FilterHIDReportItem+0x2e>

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Mouse Usage is found - this prevents Joysticks, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a mouse by the demo
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     61e:	05 80       	ldd	r0, Z+5	; 0x05
     620:	f6 81       	ldd	r31, Z+6	; 0x06
     622:	e0 2d       	mov	r30, r0
     624:	30 97       	sbiw	r30, 0x00	; 0
     626:	89 f7       	brne	.-30     	; 0x60a <CALLBACK_HIDParser_FilterHIDReportItem+0xc>
		}
	}

	/* If a collection with the mouse usage was not found, indicate that we are not interested in this item */
	if (!IsMouse)
	  return false;
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	08 95       	ret

	/* Check the attributes of the current item - see if we are interested in it or not;
	 * only store BUTTON and GENERIC_DESKTOP_CONTROL items into the Processed HID Report
	 * structure to save RAM and ignore the rest
	 */
	return ((CurrentItem->Attributes.Usage.Page == USAGE_PAGE_BUTTON) ||
     62c:	19 96       	adiw	r26, 0x09	; 9
     62e:	2d 91       	ld	r18, X+
     630:	3c 91       	ld	r19, X
     632:	1a 97       	sbiw	r26, 0x0a	; 10
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	29 30       	cpi	r18, 0x09	; 9
     63a:	31 05       	cpc	r19, r1
     63c:	31 f0       	breq	.+12     	; 0x64a <CALLBACK_HIDParser_FilterHIDReportItem+0x4c>
     63e:	21 30       	cpi	r18, 0x01	; 1
     640:	31 05       	cpc	r19, r1
     642:	19 f0       	breq	.+6      	; 0x64a <CALLBACK_HIDParser_FilterHIDReportItem+0x4c>
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	08 95       	ret
	        (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_GENERIC_DCTRL));
}
     64a:	08 95       	ret

0000064c <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
     64c:	2f 92       	push	r2
     64e:	3f 92       	push	r3
     650:	4f 92       	push	r4
     652:	5f 92       	push	r5
     654:	6f 92       	push	r6
     656:	7f 92       	push	r7
     658:	8f 92       	push	r8
     65a:	9f 92       	push	r9
     65c:	af 92       	push	r10
     65e:	bf 92       	push	r11
     660:	cf 92       	push	r12
     662:	df 92       	push	r13
     664:	ef 92       	push	r14
     666:	ff 92       	push	r15
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
     674:	cf 58       	subi	r28, 0x8F	; 143
     676:	d0 40       	sbci	r29, 0x00	; 0
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
     682:	5c 01       	movw	r10, r24
     684:	e7 96       	adiw	r28, 0x37	; 55
     686:	7f af       	sts	0x7f, r23
     688:	6e af       	sts	0x7e, r22
     68a:	e7 97       	sbiw	r28, 0x37	; 55
     68c:	ba 01       	movw	r22, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
     68e:	40 57       	subi	r20, 0x70	; 112
     690:	5c 4f       	sbci	r21, 0xFC	; 252
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
     692:	89 ed       	ldi	r24, 0xD9	; 217
     694:	93 e0       	ldi	r25, 0x03	; 3
     696:	db 01       	movw	r26, r22
     698:	fc 01       	movw	r30, r24
     69a:	1d 92       	st	X+, r1
     69c:	31 97       	sbiw	r30, 0x01	; 1
     69e:	e9 f7       	brne	.-6      	; 0x69a <USB_ProcessHIDReport+0x4e>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
     6a0:	de 01       	movw	r26, r28
     6a2:	db 96       	adiw	r26, 0x3b	; 59
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
     6a4:	8c e1       	ldi	r24, 0x1C	; 28
     6a6:	fd 01       	movw	r30, r26
     6a8:	11 92       	st	Z+, r1
     6aa:	8a 95       	dec	r24
     6ac:	e9 f7       	brne	.-6      	; 0x6a8 <USB_ProcessHIDReport+0x5c>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     6ae:	87 e0       	ldi	r24, 0x07	; 7
     6b0:	fa 01       	movw	r30, r20
     6b2:	11 92       	st	Z+, r1
     6b4:	8a 95       	dec	r24
     6b6:	e9 f7       	brne	.-6      	; 0x6b2 <USB_ProcessHIDReport+0x66>

	ParserData->TotalDeviceReports = 1;
     6b8:	fb 01       	movw	r30, r22
     6ba:	e1 57       	subi	r30, 0x71	; 113
     6bc:	fc 4f       	sbci	r31, 0xFC	; 252
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	80 83       	st	Z, r24
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
     6c2:	eb 96       	adiw	r28, 0x3b	; 59
     6c4:	1c ae       	sts	0xbc, r17
     6c6:	1d ae       	sts	0xbd, r17
     6c8:	1e ae       	sts	0xbe, r17
     6ca:	1f ae       	sts	0xbf, r17
     6cc:	eb 97       	sbiw	r28, 0x3b	; 59
     6ce:	44 24       	eor	r4, r4
     6d0:	55 24       	eor	r5, r5
     6d2:	32 01       	movw	r6, r4
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
     6d4:	30 e0       	ldi	r19, 0x00	; 0
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
     6d6:	88 24       	eor	r8, r8
     6d8:	99 24       	eor	r9, r9
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
     6da:	8d 01       	movw	r16, r26

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     6dc:	cb 01       	movw	r24, r22
     6de:	8a 52       	subi	r24, 0x2A	; 42
     6e0:	9c 4f       	sbci	r25, 0xFC	; 252
     6e2:	cf 57       	subi	r28, 0x7F	; 127
     6e4:	df 4f       	sbci	r29, 0xFF	; 255
     6e6:	99 83       	std	Y+1, r25	; 0x01
     6e8:	88 83       	st	Y, r24
     6ea:	c1 58       	subi	r28, 0x81	; 129
     6ec:	d0 40       	sbci	r29, 0x00	; 0
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     6ee:	e5 96       	adiw	r28, 0x35	; 53
     6f0:	bf af       	sts	0x7f, r27
     6f2:	ae af       	sts	0x7e, r26
     6f4:	e5 97       	sbiw	r28, 0x35	; 53

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     6f6:	db 01       	movw	r26, r22
     6f8:	a8 57       	subi	r26, 0x78	; 120
     6fa:	bc 4f       	sbci	r27, 0xFC	; 252
     6fc:	c9 57       	subi	r28, 0x79	; 121
     6fe:	df 4f       	sbci	r29, 0xFF	; 255
     700:	b9 83       	std	Y+1, r27	; 0x01
     702:	a8 83       	st	Y, r26
     704:	c7 58       	subi	r28, 0x87	; 135
     706:	d0 40       	sbci	r29, 0x00	; 0
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     708:	f8 01       	movw	r30, r16
     70a:	7c 96       	adiw	r30, 0x1c	; 28
     70c:	c7 57       	subi	r28, 0x77	; 119
     70e:	df 4f       	sbci	r29, 0xFF	; 255
     710:	f9 83       	std	Y+1, r31	; 0x01
     712:	e8 83       	st	Y, r30
     714:	c9 58       	subi	r28, 0x89	; 137
     716:	d0 40       	sbci	r29, 0x00	; 0
     718:	cb 01       	movw	r24, r22
     71a:	b5 01       	movw	r22, r10
     71c:	5c 01       	movw	r10, r24
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     71e:	18 c3       	rjmp	.+1584   	; 0xd50 <USB_ProcessHIDReport+0x704>
	{
		uint8_t  HIDReportItem  = *ReportData;
     720:	db 01       	movw	r26, r22
     722:	2c 91       	ld	r18, X
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
     724:	e7 96       	adiw	r28, 0x37	; 55
     726:	ee ad       	sts	0x6e, r30
     728:	ff ad       	sts	0x6f, r31
     72a:	e7 97       	sbiw	r28, 0x37	; 55
     72c:	31 97       	sbiw	r30, 0x01	; 1
     72e:	e7 96       	adiw	r28, 0x37	; 55
     730:	ff af       	sts	0x7f, r31
     732:	ee af       	sts	0x7e, r30
     734:	e7 97       	sbiw	r28, 0x37	; 55

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
     736:	82 2f       	mov	r24, r18
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	ed 96       	adiw	r28, 0x3d	; 61
     73c:	9f af       	sts	0x7f, r25
     73e:	8e af       	sts	0x7e, r24
     740:	ed 97       	sbiw	r28, 0x3d	; 61
     742:	83 70       	andi	r24, 0x03	; 3
     744:	90 70       	andi	r25, 0x00	; 0
     746:	82 30       	cpi	r24, 0x02	; 2
     748:	91 05       	cpc	r25, r1
     74a:	09 f4       	brne	.+2      	; 0x74e <USB_ProcessHIDReport+0x102>
     74c:	49 c0       	rjmp	.+146    	; 0x7e0 <USB_ProcessHIDReport+0x194>
     74e:	83 30       	cpi	r24, 0x03	; 3
     750:	91 05       	cpc	r25, r1
     752:	51 f0       	breq	.+20     	; 0x768 <USB_ProcessHIDReport+0x11c>
     754:	81 30       	cpi	r24, 0x01	; 1
     756:	91 05       	cpc	r25, r1
     758:	09 f4       	brne	.+2      	; 0x75c <USB_ProcessHIDReport+0x110>
     75a:	69 c0       	rjmp	.+210    	; 0x82e <USB_ProcessHIDReport+0x1e2>
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
     75c:	6f 5f       	subi	r22, 0xFF	; 255
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     760:	cc 24       	eor	r12, r12
     762:	dd 24       	eor	r13, r13
     764:	76 01       	movw	r14, r12
     766:	75 c0       	rjmp	.+234    	; 0x852 <USB_ProcessHIDReport+0x206>
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     768:	db 01       	movw	r26, r22
     76a:	14 96       	adiw	r26, 0x04	; 4
     76c:	8c 91       	ld	r24, X
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	a0 e0       	ldi	r26, 0x00	; 0
     772:	b0 e0       	ldi	r27, 0x00	; 0
     774:	f8 2e       	mov	r15, r24
     776:	ee 24       	eor	r14, r14
     778:	dd 24       	eor	r13, r13
     77a:	cc 24       	eor	r12, r12
     77c:	fb 01       	movw	r30, r22
     77e:	83 81       	ldd	r24, Z+3	; 0x03
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	a0 e0       	ldi	r26, 0x00	; 0
     784:	b0 e0       	ldi	r27, 0x00	; 0
     786:	dc 01       	movw	r26, r24
     788:	99 27       	eor	r25, r25
     78a:	88 27       	eor	r24, r24
     78c:	c8 2a       	or	r12, r24
     78e:	d9 2a       	or	r13, r25
     790:	ea 2a       	or	r14, r26
     792:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     794:	81 81       	ldd	r24, Z+1	; 0x01
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	a0 e0       	ldi	r26, 0x00	; 0
     79a:	b0 e0       	ldi	r27, 0x00	; 0
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     79c:	c8 2a       	or	r12, r24
     79e:	d9 2a       	or	r13, r25
     7a0:	ea 2a       	or	r14, r26
     7a2:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     7a4:	f2 81       	ldd	r31, Z+2	; 0x02
     7a6:	ef 96       	adiw	r28, 0x3f	; 63
     7a8:	ff af       	sts	0x7f, r31
     7aa:	ef 97       	sbiw	r28, 0x3f	; 63
     7ac:	ee 96       	adiw	r28, 0x3e	; 62
     7ae:	1f ae       	sts	0xbf, r17
     7b0:	ee 97       	sbiw	r28, 0x3e	; 62
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     7b2:	ef 96       	adiw	r28, 0x3f	; 63
     7b4:	ee ad       	sts	0x6e, r30
     7b6:	ff ad       	sts	0x6f, r31
     7b8:	ef 97       	sbiw	r28, 0x3f	; 63
     7ba:	cf 01       	movw	r24, r30
     7bc:	a0 e0       	ldi	r26, 0x00	; 0
     7be:	b0 e0       	ldi	r27, 0x00	; 0
     7c0:	c8 2a       	or	r12, r24
     7c2:	d9 2a       	or	r13, r25
     7c4:	ea 2a       	or	r14, r26
     7c6:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     7c8:	e7 96       	adiw	r28, 0x37	; 55
     7ca:	8e ad       	sts	0x6e, r24
     7cc:	9f ad       	sts	0x6f, r25
     7ce:	e7 97       	sbiw	r28, 0x37	; 55
     7d0:	04 97       	sbiw	r24, 0x04	; 4
     7d2:	e7 96       	adiw	r28, 0x37	; 55
     7d4:	9f af       	sts	0x7f, r25
     7d6:	8e af       	sts	0x7e, r24
     7d8:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 4;
     7da:	6b 5f       	subi	r22, 0xFB	; 251
     7dc:	7f 4f       	sbci	r23, 0xFF	; 255
				break;
     7de:	39 c0       	rjmp	.+114    	; 0x852 <USB_ProcessHIDReport+0x206>

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     7e0:	db 01       	movw	r26, r22
     7e2:	12 96       	adiw	r26, 0x02	; 2
     7e4:	bc 91       	ld	r27, X
     7e6:	c0 58       	subi	r28, 0x80	; 128
     7e8:	df 4f       	sbci	r29, 0xFF	; 255
     7ea:	b8 83       	st	Y, r27
     7ec:	c0 58       	subi	r28, 0x80	; 128
     7ee:	d0 40       	sbci	r29, 0x00	; 0
     7f0:	c1 58       	subi	r28, 0x81	; 129
     7f2:	df 4f       	sbci	r29, 0xFF	; 255
     7f4:	18 82       	st	Y, r1
     7f6:	cf 57       	subi	r28, 0x7F	; 127
     7f8:	d0 40       	sbci	r29, 0x00	; 0
     7fa:	fb 01       	movw	r30, r22
     7fc:	81 81       	ldd	r24, Z+1	; 0x01
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	c1 58       	subi	r28, 0x81	; 129
     802:	df 4f       	sbci	r29, 0xFF	; 255
     804:	a8 81       	ld	r26, Y
     806:	b9 81       	ldd	r27, Y+1	; 0x01
     808:	cf 57       	subi	r28, 0x7F	; 127
     80a:	d0 40       	sbci	r29, 0x00	; 0
     80c:	8a 2b       	or	r24, r26
     80e:	9b 2b       	or	r25, r27
     810:	6c 01       	movw	r12, r24
     812:	ee 24       	eor	r14, r14
     814:	ff 24       	eor	r15, r15
				ReportSize     -= 2;
     816:	e7 96       	adiw	r28, 0x37	; 55
     818:	ee ad       	sts	0x6e, r30
     81a:	ff ad       	sts	0x6f, r31
     81c:	e7 97       	sbiw	r28, 0x37	; 55
     81e:	32 97       	sbiw	r30, 0x02	; 2
     820:	e7 96       	adiw	r28, 0x37	; 55
     822:	ff af       	sts	0x7f, r31
     824:	ee af       	sts	0x7e, r30
     826:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 2;
     828:	6d 5f       	subi	r22, 0xFD	; 253
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
				break;
     82c:	12 c0       	rjmp	.+36     	; 0x852 <USB_ProcessHIDReport+0x206>

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     82e:	db 01       	movw	r26, r22
     830:	11 96       	adiw	r26, 0x01	; 1
     832:	cc 90       	ld	r12, X
     834:	11 97       	sbiw	r26, 0x01	; 1
     836:	dd 24       	eor	r13, r13
     838:	ee 24       	eor	r14, r14
     83a:	ff 24       	eor	r15, r15
				ReportSize     -= 1;
     83c:	e7 96       	adiw	r28, 0x37	; 55
     83e:	ee ad       	sts	0x6e, r30
     840:	ff ad       	sts	0x6f, r31
     842:	e7 97       	sbiw	r28, 0x37	; 55
     844:	31 97       	sbiw	r30, 0x01	; 1
     846:	e7 96       	adiw	r28, 0x37	; 55
     848:	ff af       	sts	0x7f, r31
     84a:	ee af       	sts	0x7e, r30
     84c:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 1;
     84e:	6e 5f       	subi	r22, 0xFE	; 254
     850:	7f 4f       	sbci	r23, 0xFF	; 255
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     852:	ed 96       	adiw	r28, 0x3d	; 61
     854:	8e ad       	sts	0x6e, r24
     856:	9f ad       	sts	0x6f, r25
     858:	ed 97       	sbiw	r28, 0x3d	; 61
     85a:	8c 7f       	andi	r24, 0xFC	; 252
     85c:	90 70       	andi	r25, 0x00	; 0
     85e:	84 36       	cpi	r24, 0x64	; 100
     860:	91 05       	cpc	r25, r1
     862:	09 f4       	brne	.+2      	; 0x866 <USB_ProcessHIDReport+0x21a>
     864:	b0 c0       	rjmp	.+352    	; 0x9c6 <USB_ProcessHIDReport+0x37a>
     866:	85 36       	cpi	r24, 0x65	; 101
     868:	91 05       	cpc	r25, r1
     86a:	8c f5       	brge	.+98     	; 0x8ce <USB_ProcessHIDReport+0x282>
     86c:	84 32       	cpi	r24, 0x24	; 36
     86e:	91 05       	cpc	r25, r1
     870:	09 f4       	brne	.+2      	; 0x874 <USB_ProcessHIDReport+0x228>
     872:	90 c0       	rjmp	.+288    	; 0x994 <USB_ProcessHIDReport+0x348>
     874:	85 32       	cpi	r24, 0x25	; 37
     876:	91 05       	cpc	r25, r1
     878:	ac f4       	brge	.+42     	; 0x8a4 <USB_ProcessHIDReport+0x258>
     87a:	88 30       	cpi	r24, 0x08	; 8
     87c:	91 05       	cpc	r25, r1
     87e:	09 f4       	brne	.+2      	; 0x882 <USB_ProcessHIDReport+0x236>
     880:	fb c0       	rjmp	.+502    	; 0xa78 <USB_ProcessHIDReport+0x42c>
     882:	89 30       	cpi	r24, 0x09	; 9
     884:	91 05       	cpc	r25, r1
     886:	2c f4       	brge	.+10     	; 0x892 <USB_ProcessHIDReport+0x246>
     888:	84 30       	cpi	r24, 0x04	; 4
     88a:	91 05       	cpc	r25, r1
     88c:	09 f0       	breq	.+2      	; 0x890 <USB_ProcessHIDReport+0x244>
     88e:	4e c2       	rjmp	.+1180   	; 0xd2c <USB_ProcessHIDReport+0x6e0>
     890:	75 c0       	rjmp	.+234    	; 0x97c <USB_ProcessHIDReport+0x330>
     892:	84 31       	cpi	r24, 0x14	; 20
     894:	91 05       	cpc	r25, r1
     896:	09 f4       	brne	.+2      	; 0x89a <USB_ProcessHIDReport+0x24e>
     898:	75 c0       	rjmp	.+234    	; 0x984 <USB_ProcessHIDReport+0x338>
     89a:	88 31       	cpi	r24, 0x18	; 24
     89c:	91 05       	cpc	r25, r1
     89e:	09 f0       	breq	.+2      	; 0x8a2 <USB_ProcessHIDReport+0x256>
     8a0:	45 c2       	rjmp	.+1162   	; 0xd2c <USB_ProcessHIDReport+0x6e0>
     8a2:	42 c2       	rjmp	.+1156   	; 0xd28 <USB_ProcessHIDReport+0x6dc>
     8a4:	84 33       	cpi	r24, 0x34	; 52
     8a6:	91 05       	cpc	r25, r1
     8a8:	09 f4       	brne	.+2      	; 0x8ac <USB_ProcessHIDReport+0x260>
     8aa:	7a c0       	rjmp	.+244    	; 0x9a0 <USB_ProcessHIDReport+0x354>
     8ac:	85 33       	cpi	r24, 0x35	; 53
     8ae:	91 05       	cpc	r25, r1
     8b0:	2c f4       	brge	.+10     	; 0x8bc <USB_ProcessHIDReport+0x270>
     8b2:	88 32       	cpi	r24, 0x28	; 40
     8b4:	91 05       	cpc	r25, r1
     8b6:	09 f0       	breq	.+2      	; 0x8ba <USB_ProcessHIDReport+0x26e>
     8b8:	39 c2       	rjmp	.+1138   	; 0xd2c <USB_ProcessHIDReport+0x6e0>
     8ba:	ef c0       	rjmp	.+478    	; 0xa9a <USB_ProcessHIDReport+0x44e>
     8bc:	84 34       	cpi	r24, 0x44	; 68
     8be:	91 05       	cpc	r25, r1
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <USB_ProcessHIDReport+0x278>
     8c2:	76 c0       	rjmp	.+236    	; 0x9b0 <USB_ProcessHIDReport+0x364>
     8c4:	84 35       	cpi	r24, 0x54	; 84
     8c6:	91 05       	cpc	r25, r1
     8c8:	09 f0       	breq	.+2      	; 0x8cc <USB_ProcessHIDReport+0x280>
     8ca:	30 c2       	rjmp	.+1120   	; 0xd2c <USB_ProcessHIDReport+0x6e0>
     8cc:	77 c0       	rjmp	.+238    	; 0x9bc <USB_ProcessHIDReport+0x370>
     8ce:	84 39       	cpi	r24, 0x94	; 148
     8d0:	91 05       	cpc	r25, r1
     8d2:	09 f4       	brne	.+2      	; 0x8d6 <USB_ProcessHIDReport+0x28a>
     8d4:	81 c0       	rjmp	.+258    	; 0x9d8 <USB_ProcessHIDReport+0x38c>
     8d6:	85 39       	cpi	r24, 0x95	; 149
     8d8:	91 05       	cpc	r25, r1
     8da:	ac f4       	brge	.+42     	; 0x906 <USB_ProcessHIDReport+0x2ba>
     8dc:	80 38       	cpi	r24, 0x80	; 128
     8de:	91 05       	cpc	r25, r1
     8e0:	09 f4       	brne	.+2      	; 0x8e4 <USB_ProcessHIDReport+0x298>
     8e2:	f8 c1       	rjmp	.+1008   	; 0xcd4 <USB_ProcessHIDReport+0x688>
     8e4:	81 38       	cpi	r24, 0x81	; 129
     8e6:	91 05       	cpc	r25, r1
     8e8:	2c f4       	brge	.+10     	; 0x8f4 <USB_ProcessHIDReport+0x2a8>
     8ea:	84 37       	cpi	r24, 0x74	; 116
     8ec:	91 05       	cpc	r25, r1
     8ee:	09 f0       	breq	.+2      	; 0x8f2 <USB_ProcessHIDReport+0x2a6>
     8f0:	1d c2       	rjmp	.+1082   	; 0xd2c <USB_ProcessHIDReport+0x6e0>
     8f2:	6f c0       	rjmp	.+222    	; 0x9d2 <USB_ProcessHIDReport+0x386>
     8f4:	84 38       	cpi	r24, 0x84	; 132
     8f6:	91 05       	cpc	r25, r1
     8f8:	09 f4       	brne	.+2      	; 0x8fc <USB_ProcessHIDReport+0x2b0>
     8fa:	71 c0       	rjmp	.+226    	; 0x9de <USB_ProcessHIDReport+0x392>
     8fc:	80 39       	cpi	r24, 0x90	; 144
     8fe:	91 05       	cpc	r25, r1
     900:	09 f0       	breq	.+2      	; 0x904 <USB_ProcessHIDReport+0x2b8>
     902:	14 c2       	rjmp	.+1064   	; 0xd2c <USB_ProcessHIDReport+0x6e0>
     904:	e7 c1       	rjmp	.+974    	; 0xcd4 <USB_ProcessHIDReport+0x688>
     906:	80 3b       	cpi	r24, 0xB0	; 176
     908:	91 05       	cpc	r25, r1
     90a:	09 f4       	brne	.+2      	; 0x90e <USB_ProcessHIDReport+0x2c2>
     90c:	e3 c1       	rjmp	.+966    	; 0xcd4 <USB_ProcessHIDReport+0x688>
     90e:	81 3b       	cpi	r24, 0xB1	; 177
     910:	91 05       	cpc	r25, r1
     912:	4c f4       	brge	.+18     	; 0x926 <USB_ProcessHIDReport+0x2da>
     914:	80 3a       	cpi	r24, 0xA0	; 160
     916:	91 05       	cpc	r25, r1
     918:	09 f4       	brne	.+2      	; 0x91c <USB_ProcessHIDReport+0x2d0>
     91a:	c6 c0       	rjmp	.+396    	; 0xaa8 <USB_ProcessHIDReport+0x45c>
     91c:	84 3a       	cpi	r24, 0xA4	; 164
     91e:	91 05       	cpc	r25, r1
     920:	09 f0       	breq	.+2      	; 0x924 <USB_ProcessHIDReport+0x2d8>
     922:	04 c2       	rjmp	.+1032   	; 0xd2c <USB_ProcessHIDReport+0x6e0>
     924:	08 c0       	rjmp	.+16     	; 0x936 <USB_ProcessHIDReport+0x2ea>
     926:	84 3b       	cpi	r24, 0xB4	; 180
     928:	91 05       	cpc	r25, r1
     92a:	e9 f0       	breq	.+58     	; 0x966 <USB_ProcessHIDReport+0x31a>
     92c:	80 3c       	cpi	r24, 0xC0	; 192
     92e:	91 05       	cpc	r25, r1
     930:	09 f0       	breq	.+2      	; 0x934 <USB_ProcessHIDReport+0x2e8>
     932:	fc c1       	rjmp	.+1016   	; 0xd2c <USB_ProcessHIDReport+0x6e0>
     934:	08 c1       	rjmp	.+528    	; 0xb46 <USB_ProcessHIDReport+0x4fa>
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     936:	c7 57       	subi	r28, 0x77	; 119
     938:	df 4f       	sbci	r29, 0xFF	; 255
     93a:	88 81       	ld	r24, Y
     93c:	99 81       	ldd	r25, Y+1	; 0x01
     93e:	c9 58       	subi	r28, 0x89	; 137
     940:	d0 40       	sbci	r29, 0x00	; 0
     942:	08 17       	cp	r16, r24
     944:	19 07       	cpc	r17, r25
     946:	09 f4       	brne	.+2      	; 0x94a <USB_ProcessHIDReport+0x2fe>
     948:	10 c2       	rjmp	.+1056   	; 0xd6a <USB_ProcessHIDReport+0x71e>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     94a:	ec e1       	ldi	r30, 0x1C	; 28
     94c:	ce 2e       	mov	r12, r30
     94e:	d1 2c       	mov	r13, r1
     950:	c0 0e       	add	r12, r16
     952:	d1 1e       	adc	r13, r17
     954:	d6 01       	movw	r26, r12
     956:	f8 01       	movw	r30, r16
     958:	8a e2       	ldi	r24, 0x2A	; 42
     95a:	01 90       	ld	r0, Z+
     95c:	0d 92       	st	X+, r0
     95e:	81 50       	subi	r24, 0x01	; 1
     960:	e1 f7       	brne	.-8      	; 0x95a <USB_ProcessHIDReport+0x30e>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     962:	86 01       	movw	r16, r12
				break;
     964:	e3 c1       	rjmp	.+966    	; 0xd2c <USB_ProcessHIDReport+0x6e0>
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     966:	e5 96       	adiw	r28, 0x35	; 53
     968:	ae ad       	sts	0x6e, r26
     96a:	bf ad       	sts	0x6f, r27
     96c:	e5 97       	sbiw	r28, 0x35	; 53
     96e:	0a 17       	cp	r16, r26
     970:	1b 07       	cpc	r17, r27
     972:	09 f4       	brne	.+2      	; 0x976 <USB_ProcessHIDReport+0x32a>
     974:	fc c1       	rjmp	.+1016   	; 0xd6e <USB_ProcessHIDReport+0x722>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     976:	0c 51       	subi	r16, 0x1C	; 28
     978:	10 40       	sbci	r17, 0x00	; 0
				break;
     97a:	d8 c1       	rjmp	.+944    	; 0xd2c <USB_ProcessHIDReport+0x6e0>
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     97c:	f8 01       	movw	r30, r16
     97e:	d2 82       	std	Z+2, r13	; 0x02
     980:	c1 82       	std	Z+1, r12	; 0x01
				break;
     982:	d4 c1       	rjmp	.+936    	; 0xd2c <USB_ProcessHIDReport+0x6e0>
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     984:	d8 01       	movw	r26, r16
     986:	1a 96       	adiw	r26, 0x0a	; 10
     988:	cd 92       	st	X+, r12
     98a:	dd 92       	st	X+, r13
     98c:	ed 92       	st	X+, r14
     98e:	fc 92       	st	X, r15
     990:	1d 97       	sbiw	r26, 0x0d	; 13
				break;
     992:	cc c1       	rjmp	.+920    	; 0xd2c <USB_ProcessHIDReport+0x6e0>
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     994:	f8 01       	movw	r30, r16
     996:	c6 86       	std	Z+14, r12	; 0x0e
     998:	d7 86       	std	Z+15, r13	; 0x0f
     99a:	e0 8a       	std	Z+16, r14	; 0x10
     99c:	f1 8a       	std	Z+17, r15	; 0x11
				break;
     99e:	c6 c1       	rjmp	.+908    	; 0xd2c <USB_ProcessHIDReport+0x6e0>
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     9a0:	d8 01       	movw	r26, r16
     9a2:	52 96       	adiw	r26, 0x12	; 18
     9a4:	cd 92       	st	X+, r12
     9a6:	dd 92       	st	X+, r13
     9a8:	ed 92       	st	X+, r14
     9aa:	fc 92       	st	X, r15
     9ac:	55 97       	sbiw	r26, 0x15	; 21
				break;
     9ae:	be c1       	rjmp	.+892    	; 0xd2c <USB_ProcessHIDReport+0x6e0>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     9b0:	f8 01       	movw	r30, r16
     9b2:	c6 8a       	std	Z+22, r12	; 0x16
     9b4:	d7 8a       	std	Z+23, r13	; 0x17
     9b6:	e0 8e       	std	Z+24, r14	; 0x18
     9b8:	f1 8e       	std	Z+25, r15	; 0x19
				break;
     9ba:	b8 c1       	rjmp	.+880    	; 0xd2c <USB_ProcessHIDReport+0x6e0>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     9bc:	d8 01       	movw	r26, r16
     9be:	19 96       	adiw	r26, 0x09	; 9
     9c0:	cc 92       	st	X, r12
     9c2:	19 97       	sbiw	r26, 0x09	; 9
				break;
     9c4:	b3 c1       	rjmp	.+870    	; 0xd2c <USB_ProcessHIDReport+0x6e0>
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     9c6:	f8 01       	movw	r30, r16
     9c8:	c5 82       	std	Z+5, r12	; 0x05
     9ca:	d6 82       	std	Z+6, r13	; 0x06
     9cc:	e7 82       	std	Z+7, r14	; 0x07
     9ce:	f0 86       	std	Z+8, r15	; 0x08
				break;
     9d0:	ad c1       	rjmp	.+858    	; 0xd2c <USB_ProcessHIDReport+0x6e0>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     9d2:	d8 01       	movw	r26, r16
     9d4:	cc 92       	st	X, r12
				break;
     9d6:	aa c1       	rjmp	.+852    	; 0xd2c <USB_ProcessHIDReport+0x6e0>
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     9d8:	f8 01       	movw	r30, r16
     9da:	c2 8e       	std	Z+26, r12	; 0x1a
				break;
     9dc:	a7 c1       	rjmp	.+846    	; 0xd2c <USB_ProcessHIDReport+0x6e0>
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     9de:	ac 2d       	mov	r26, r12
     9e0:	f8 01       	movw	r30, r16
     9e2:	c3 8e       	std	Z+27, r12	; 0x1b

				if (ParserData->UsingReportIDs)
     9e4:	f5 01       	movw	r30, r10
     9e6:	e8 52       	subi	r30, 0x28	; 40
     9e8:	fc 4f       	sbci	r31, 0xFC	; 252
     9ea:	80 81       	ld	r24, Z
     9ec:	88 23       	and	r24, r24
     9ee:	d1 f1       	breq	.+116    	; 0xa64 <USB_ProcessHIDReport+0x418>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     9f0:	f5 01       	movw	r30, r10
     9f2:	e1 57       	subi	r30, 0x71	; 113
     9f4:	fc 4f       	sbci	r31, 0xFC	; 252
     9f6:	90 81       	ld	r25, Z
     9f8:	a5 01       	movw	r20, r10
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	18 c0       	rjmp	.+48     	; 0xa2e <USB_ProcessHIDReport+0x3e2>
     9fe:	49 5f       	subi	r20, 0xF9	; 249
     a00:	5f 4f       	sbci	r21, 0xFF	; 255

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     a02:	fa 01       	movw	r30, r20
     a04:	e7 57       	subi	r30, 0x77	; 119
     a06:	fc 4f       	sbci	r31, 0xFC	; 252
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     a08:	80 81       	ld	r24, Z
     a0a:	8a 17       	cp	r24, r26
     a0c:	79 f4       	brne	.+30     	; 0xa2c <USB_ProcessHIDReport+0x3e0>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     a0e:	82 2f       	mov	r24, r18
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	ac 01       	movw	r20, r24
     a14:	23 e0       	ldi	r18, 0x03	; 3
     a16:	44 0f       	add	r20, r20
     a18:	55 1f       	adc	r21, r21
     a1a:	2a 95       	dec	r18
     a1c:	e1 f7       	brne	.-8      	; 0xa16 <USB_ProcessHIDReport+0x3ca>
     a1e:	48 1b       	sub	r20, r24
     a20:	59 0b       	sbc	r21, r25
     a22:	40 57       	subi	r20, 0x70	; 112
     a24:	5c 4f       	sbci	r21, 0xFC	; 252
     a26:	4a 0d       	add	r20, r10
     a28:	5b 1d       	adc	r21, r11
     a2a:	1c c0       	rjmp	.+56     	; 0xa64 <USB_ProcessHIDReport+0x418>

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     a2c:	2f 5f       	subi	r18, 0xFF	; 255
     a2e:	29 17       	cp	r18, r25
     a30:	31 f7       	brne	.-52     	; 0x9fe <USB_ProcessHIDReport+0x3b2>
     a32:	c4 c1       	rjmp	.+904    	; 0xdbc <USB_ProcessHIDReport+0x770>
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     a34:	82 2f       	mov	r24, r18
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	ac 01       	movw	r20, r24
     a3a:	b3 e0       	ldi	r27, 0x03	; 3
     a3c:	44 0f       	add	r20, r20
     a3e:	55 1f       	adc	r21, r21
     a40:	ba 95       	dec	r27
     a42:	e1 f7       	brne	.-8      	; 0xa3c <USB_ProcessHIDReport+0x3f0>
     a44:	48 1b       	sub	r20, r24
     a46:	59 0b       	sbc	r21, r25
     a48:	40 57       	subi	r20, 0x70	; 112
     a4a:	5c 4f       	sbci	r21, 0xFC	; 252
     a4c:	4a 0d       	add	r20, r10
     a4e:	5b 1d       	adc	r21, r11
     a50:	f5 01       	movw	r30, r10
     a52:	e1 57       	subi	r30, 0x71	; 113
     a54:	fc 4f       	sbci	r31, 0xFC	; 252
     a56:	2f 5f       	subi	r18, 0xFF	; 255
     a58:	20 83       	st	Z, r18
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     a5a:	87 e0       	ldi	r24, 0x07	; 7
     a5c:	da 01       	movw	r26, r20
     a5e:	1d 92       	st	X+, r1
     a60:	8a 95       	dec	r24
     a62:	e9 f7       	brne	.-6      	; 0xa5e <USB_ProcessHIDReport+0x412>
					}
				}

				ParserData->UsingReportIDs = true;
     a64:	f5 01       	movw	r30, r10
     a66:	e8 52       	subi	r30, 0x28	; 40
     a68:	fc 4f       	sbci	r31, 0xFC	; 252
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	80 83       	st	Z, r24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     a6e:	f8 01       	movw	r30, r16
     a70:	83 8d       	ldd	r24, Z+27	; 0x1b
     a72:	da 01       	movw	r26, r20
     a74:	8c 93       	st	X, r24
				break;
     a76:	5a c1       	rjmp	.+692    	; 0xd2c <USB_ProcessHIDReport+0x6e0>
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     a78:	38 30       	cpi	r19, 0x08	; 8
     a7a:	09 f4       	brne	.+2      	; 0xa7e <USB_ProcessHIDReport+0x432>
     a7c:	7a c1       	rjmp	.+756    	; 0xd72 <USB_ProcessHIDReport+0x726>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     a7e:	e3 2f       	mov	r30, r19
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	ee 0f       	add	r30, r30
     a84:	ff 1f       	adc	r31, r31
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	8c 0f       	add	r24, r28
     a8c:	9d 1f       	adc	r25, r29
     a8e:	e8 0f       	add	r30, r24
     a90:	f9 1f       	adc	r31, r25
     a92:	d1 82       	std	Z+1, r13	; 0x01
     a94:	c0 82       	st	Z, r12
     a96:	3f 5f       	subi	r19, 0xFF	; 255
				break;
     a98:	49 c1       	rjmp	.+658    	; 0xd2c <USB_ProcessHIDReport+0x6e0>
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     a9a:	eb 96       	adiw	r28, 0x3b	; 59
     a9c:	cc ae       	sts	0xbc, r28
     a9e:	dd ae       	sts	0xbd, r29
     aa0:	ee ae       	sts	0xbe, r30
     aa2:	ff ae       	sts	0xbf, r31
     aa4:	eb 97       	sbiw	r28, 0x3b	; 59
     aa6:	42 c1       	rjmp	.+644    	; 0xd2c <USB_ProcessHIDReport+0x6e0>
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     aa8:	81 14       	cp	r8, r1
     aaa:	91 04       	cpc	r9, r1
     aac:	39 f4       	brne	.+14     	; 0xabc <USB_ProcessHIDReport+0x470>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     aae:	e9 e4       	ldi	r30, 0x49	; 73
     ab0:	8e 2e       	mov	r8, r30
     ab2:	e3 e0       	ldi	r30, 0x03	; 3
     ab4:	9e 2e       	mov	r9, r30
     ab6:	8a 0c       	add	r8, r10
     ab8:	9b 1c       	adc	r9, r11
     aba:	16 c0       	rjmp	.+44     	; 0xae8 <USB_ProcessHIDReport+0x49c>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     abc:	f5 01       	movw	r30, r10
     abe:	e0 5b       	subi	r30, 0xB0	; 176
     ac0:	fc 4f       	sbci	r31, 0xFC	; 252

					while (CurrCollectionPath->Parent != NULL)
     ac2:	0b c0       	rjmp	.+22     	; 0xada <USB_ProcessHIDReport+0x48e>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     ac4:	c9 57       	subi	r28, 0x79	; 121
     ac6:	df 4f       	sbci	r29, 0xFF	; 255
     ac8:	a8 81       	ld	r26, Y
     aca:	b9 81       	ldd	r27, Y+1	; 0x01
     acc:	c7 58       	subi	r28, 0x87	; 135
     ace:	d0 40       	sbci	r29, 0x00	; 0
     ad0:	ea 17       	cp	r30, r26
     ad2:	fb 07       	cpc	r31, r27
     ad4:	09 f4       	brne	.+2      	; 0xad8 <USB_ProcessHIDReport+0x48c>
     ad6:	4f c1       	rjmp	.+670    	; 0xd76 <USB_ProcessHIDReport+0x72a>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     ad8:	37 96       	adiw	r30, 0x07	; 7
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     ada:	85 81       	ldd	r24, Z+5	; 0x05
     adc:	96 81       	ldd	r25, Z+6	; 0x06
     ade:	00 97       	sbiw	r24, 0x00	; 0
     ae0:	89 f7       	brne	.-30     	; 0xac4 <USB_ProcessHIDReport+0x478>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     ae2:	96 82       	std	Z+6, r9	; 0x06
     ae4:	85 82       	std	Z+5, r8	; 0x05
     ae6:	4f 01       	movw	r8, r30
				}

				CurrCollectionPath->Type       = ReportItemData;
     ae8:	f4 01       	movw	r30, r8
     aea:	c0 82       	st	Z, r12
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     aec:	d8 01       	movw	r26, r16
     aee:	11 96       	adiw	r26, 0x01	; 1
     af0:	8d 91       	ld	r24, X+
     af2:	9c 91       	ld	r25, X
     af4:	12 97       	sbiw	r26, 0x02	; 2
     af6:	92 83       	std	Z+2, r25	; 0x02
     af8:	81 83       	std	Z+1, r24	; 0x01

				if (UsageListSize)
     afa:	33 23       	and	r19, r19
     afc:	81 f0       	breq	.+32     	; 0xb1e <USB_ProcessHIDReport+0x4d2>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     afe:	89 81       	ldd	r24, Y+1	; 0x01
     b00:	9a 81       	ldd	r25, Y+2	; 0x02
     b02:	94 83       	std	Z+4, r25	; 0x04
     b04:	83 83       	std	Z+3, r24	; 0x03
     b06:	fe 01       	movw	r30, r28
     b08:	31 96       	adiw	r30, 0x01	; 1

					for (uint8_t i = 0; i < UsageListSize; i++)
     b0a:	80 e0       	ldi	r24, 0x00	; 0
					  UsageList[i] = UsageList[i + 1];
     b0c:	a2 81       	ldd	r26, Z+2	; 0x02
     b0e:	b3 81       	ldd	r27, Z+3	; 0x03
     b10:	a1 93       	st	Z+, r26
     b12:	b1 93       	st	Z+, r27

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     b14:	8f 5f       	subi	r24, 0xFF	; 255
     b16:	83 17       	cp	r24, r19
     b18:	c9 f7       	brne	.-14     	; 0xb0c <USB_ProcessHIDReport+0x4c0>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     b1a:	31 50       	subi	r19, 0x01	; 1
     b1c:	07 c1       	rjmp	.+526    	; 0xd2c <USB_ProcessHIDReport+0x6e0>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     b1e:	eb 96       	adiw	r28, 0x3b	; 59
     b20:	8c ad       	sts	0x6c, r24
     b22:	9d ad       	sts	0x6d, r25
     b24:	ae ad       	sts	0x6e, r26
     b26:	bf ad       	sts	0x6f, r27
     b28:	eb 97       	sbiw	r28, 0x3b	; 59
     b2a:	84 15       	cp	r24, r4
     b2c:	95 05       	cpc	r25, r5
     b2e:	a6 05       	cpc	r26, r6
     b30:	b7 05       	cpc	r27, r7
     b32:	08 f4       	brcc	.+2      	; 0xb36 <USB_ProcessHIDReport+0x4ea>
     b34:	fb c0       	rjmp	.+502    	; 0xd2c <USB_ProcessHIDReport+0x6e0>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     b36:	54 82       	std	Z+4, r5	; 0x04
     b38:	43 82       	std	Z+3, r4	; 0x03
     b3a:	08 94       	sec
     b3c:	41 1c       	adc	r4, r1
     b3e:	51 1c       	adc	r5, r1
     b40:	61 1c       	adc	r6, r1
     b42:	71 1c       	adc	r7, r1
     b44:	f3 c0       	rjmp	.+486    	; 0xd2c <USB_ProcessHIDReport+0x6e0>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     b46:	81 14       	cp	r8, r1
     b48:	91 04       	cpc	r9, r1
     b4a:	09 f4       	brne	.+2      	; 0xb4e <USB_ProcessHIDReport+0x502>
     b4c:	16 c1       	rjmp	.+556    	; 0xd7a <USB_ProcessHIDReport+0x72e>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     b4e:	f4 01       	movw	r30, r8
     b50:	85 80       	ldd	r8, Z+5	; 0x05
     b52:	96 80       	ldd	r9, Z+6	; 0x06
				break;
     b54:	eb c0       	rjmp	.+470    	; 0xd2c <USB_ProcessHIDReport+0x6e0>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     b56:	fe 01       	movw	r30, r28
     b58:	79 96       	adiw	r30, 0x19	; 25
     b5a:	d8 01       	movw	r26, r16
     b5c:	8a e1       	ldi	r24, 0x1A	; 26
     b5e:	0d 90       	ld	r0, X+
     b60:	01 92       	st	Z+, r0
     b62:	81 50       	subi	r24, 0x01	; 1
     b64:	e1 f7       	brne	.-8      	; 0xb5e <USB_ProcessHIDReport+0x512>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     b66:	dd 8a       	std	Y+21, r13	; 0x15
     b68:	cc 8a       	std	Y+20, r12	; 0x14
					NewReportItem.CollectionPath = CurrCollectionPath;
     b6a:	78 8f       	std	Y+24, r23	; 0x18
     b6c:	6f 8b       	std	Y+23, r22	; 0x17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     b6e:	d8 01       	movw	r26, r16
     b70:	5b 96       	adiw	r26, 0x1b	; 27
     b72:	8c 91       	ld	r24, X
     b74:	5b 97       	sbiw	r26, 0x1b	; 27
     b76:	8e 8b       	std	Y+22, r24	; 0x16

					if (UsageListSize)
     b78:	33 23       	and	r19, r19
     b7a:	81 f0       	breq	.+32     	; 0xb9c <USB_ProcessHIDReport+0x550>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	9a 81       	ldd	r25, Y+2	; 0x02
     b80:	9d 8f       	std	Y+29, r25	; 0x1d
     b82:	8c 8f       	std	Y+28, r24	; 0x1c
     b84:	fe 01       	movw	r30, r28
     b86:	31 96       	adiw	r30, 0x01	; 1

						for (uint8_t i = 0; i < UsageListSize; i++)
     b88:	80 e0       	ldi	r24, 0x00	; 0
						  UsageList[i] = UsageList[i + 1];
     b8a:	42 81       	ldd	r20, Z+2	; 0x02
     b8c:	53 81       	ldd	r21, Z+3	; 0x03
     b8e:	41 93       	st	Z+, r20
     b90:	51 93       	st	Z+, r21

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     b92:	8f 5f       	subi	r24, 0xFF	; 255
     b94:	83 17       	cp	r24, r19
     b96:	c9 f7       	brne	.-14     	; 0xb8a <USB_ProcessHIDReport+0x53e>
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     b98:	31 50       	subi	r19, 0x01	; 1
     b9a:	12 c0       	rjmp	.+36     	; 0xbc0 <USB_ProcessHIDReport+0x574>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     b9c:	eb 96       	adiw	r28, 0x3b	; 59
     b9e:	8c ad       	sts	0x6c, r24
     ba0:	9d ad       	sts	0x6d, r25
     ba2:	ae ad       	sts	0x6e, r26
     ba4:	bf ad       	sts	0x6f, r27
     ba6:	eb 97       	sbiw	r28, 0x3b	; 59
     ba8:	84 15       	cp	r24, r4
     baa:	95 05       	cpc	r25, r5
     bac:	a6 05       	cpc	r26, r6
     bae:	b7 05       	cpc	r27, r7
     bb0:	38 f0       	brcs	.+14     	; 0xbc0 <USB_ProcessHIDReport+0x574>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     bb2:	5d 8e       	std	Y+29, r5	; 0x1d
     bb4:	4c 8e       	std	Y+28, r4	; 0x1c
     bb6:	08 94       	sec
     bb8:	41 1c       	adc	r4, r1
     bba:	51 1c       	adc	r5, r1
     bbc:	61 1c       	adc	r6, r1
     bbe:	71 1c       	adc	r7, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     bc0:	90 e8       	ldi	r25, 0x80	; 128
     bc2:	29 16       	cp	r2, r25
     bc4:	11 f4       	brne	.+4      	; 0xbca <USB_ProcessHIDReport+0x57e>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     bc6:	1b 8a       	std	Y+19, r1	; 0x13
     bc8:	08 c0       	rjmp	.+16     	; 0xbda <USB_ProcessHIDReport+0x58e>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     bca:	a0 e9       	ldi	r26, 0x90	; 144
     bcc:	2a 16       	cp	r2, r26
     bce:	19 f4       	brne	.+6      	; 0xbd6 <USB_ProcessHIDReport+0x58a>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     bd0:	b1 e0       	ldi	r27, 0x01	; 1
     bd2:	bb 8b       	std	Y+19, r27	; 0x13
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <USB_ProcessHIDReport+0x58e>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     bd6:	e2 e0       	ldi	r30, 0x02	; 2
     bd8:	eb 8b       	std	Y+19, r30	; 0x13

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     bda:	eb 89       	ldd	r30, Y+19	; 0x13
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	ee 0f       	add	r30, r30
     be0:	ff 1f       	adc	r31, r31
     be2:	e8 0d       	add	r30, r8
     be4:	f9 1d       	adc	r31, r9
     be6:	81 81       	ldd	r24, Z+1	; 0x01
     be8:	92 81       	ldd	r25, Z+2	; 0x02
     bea:	9a 8b       	std	Y+18, r25	; 0x12
     bec:	89 8b       	std	Y+17, r24	; 0x11

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     bee:	d8 01       	movw	r26, r16
     bf0:	2c 91       	ld	r18, X
     bf2:	81 81       	ldd	r24, Z+1	; 0x01
     bf4:	92 81       	ldd	r25, Z+2	; 0x02
     bf6:	82 0f       	add	r24, r18
     bf8:	91 1d       	adc	r25, r1
     bfa:	92 83       	std	Z+2, r25	; 0x02
     bfc:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     bfe:	eb 89       	ldd	r30, Y+19	; 0x13
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	ee 0f       	add	r30, r30
     c04:	ff 1f       	adc	r31, r31
     c06:	e8 0d       	add	r30, r8
     c08:	f9 1d       	adc	r31, r9
     c0a:	cf 57       	subi	r28, 0x7F	; 127
     c0c:	df 4f       	sbci	r29, 0xFF	; 255
     c0e:	a8 81       	ld	r26, Y
     c10:	b9 81       	ldd	r27, Y+1	; 0x01
     c12:	c1 58       	subi	r28, 0x81	; 129
     c14:	d0 40       	sbci	r29, 0x00	; 0
     c16:	4d 91       	ld	r20, X+
     c18:	5c 91       	ld	r21, X
     c1a:	11 97       	sbiw	r26, 0x01	; 1
     c1c:	81 81       	ldd	r24, Z+1	; 0x01
     c1e:	92 81       	ldd	r25, Z+2	; 0x02
     c20:	84 17       	cp	r24, r20
     c22:	95 07       	cpc	r25, r21
     c24:	08 f4       	brcc	.+2      	; 0xc28 <USB_ProcessHIDReport+0x5dc>
     c26:	ca 01       	movw	r24, r20
     c28:	cf 57       	subi	r28, 0x7F	; 127
     c2a:	df 4f       	sbci	r29, 0xFF	; 255
     c2c:	e8 81       	ld	r30, Y
     c2e:	f9 81       	ldd	r31, Y+1	; 0x01
     c30:	c1 58       	subi	r28, 0x81	; 129
     c32:	d0 40       	sbci	r29, 0x00	; 0
     c34:	91 83       	std	Z+1, r25	; 0x01
     c36:	80 83       	st	Z, r24

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     c38:	d5 01       	movw	r26, r10
     c3a:	8c 91       	ld	r24, X
     c3c:	84 31       	cpi	r24, 0x14	; 20
     c3e:	09 f4       	brne	.+2      	; 0xc42 <USB_ProcessHIDReport+0x5f6>
     c40:	9e c0       	rjmp	.+316    	; 0xd7e <USB_ProcessHIDReport+0x732>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	4a e2       	ldi	r20, 0x2A	; 42
     c46:	50 e0       	ldi	r21, 0x00	; 0
     c48:	84 9f       	mul	r24, r20
     c4a:	f0 01       	movw	r30, r0
     c4c:	85 9f       	mul	r24, r21
     c4e:	f0 0d       	add	r31, r0
     c50:	94 9f       	mul	r25, r20
     c52:	f0 0d       	add	r31, r0
     c54:	11 24       	eor	r1, r1
     c56:	ea 0d       	add	r30, r10
     c58:	fb 1d       	adc	r31, r11
     c5a:	31 96       	adiw	r30, 0x01	; 1
     c5c:	de 01       	movw	r26, r28
     c5e:	51 96       	adiw	r26, 0x11	; 17
     c60:	8a e2       	ldi	r24, 0x2A	; 42
     c62:	0d 90       	ld	r0, X+
     c64:	01 92       	st	Z+, r0
     c66:	81 50       	subi	r24, 0x01	; 1
     c68:	e1 f7       	brne	.-8      	; 0xc62 <USB_ProcessHIDReport+0x616>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     c6a:	cd 57       	subi	r28, 0x7D	; 125
     c6c:	df 4f       	sbci	r29, 0xFF	; 255
     c6e:	88 81       	ld	r24, Y
     c70:	99 81       	ldd	r25, Y+1	; 0x01
     c72:	aa 81       	ldd	r26, Y+2	; 0x02
     c74:	bb 81       	ldd	r27, Y+3	; 0x03
     c76:	c3 58       	subi	r28, 0x83	; 131
     c78:	d0 40       	sbci	r29, 0x00	; 0
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	a1 05       	cpc	r26, r1
     c7e:	b1 05       	cpc	r27, r1
     c80:	39 f5       	brne	.+78     	; 0xcd0 <USB_ProcessHIDReport+0x684>
     c82:	ce 01       	movw	r24, r28
     c84:	41 96       	adiw	r24, 0x11	; 17
     c86:	c1 57       	subi	r28, 0x71	; 113
     c88:	df 4f       	sbci	r29, 0xFF	; 255
     c8a:	38 83       	st	Y, r19
     c8c:	cf 58       	subi	r28, 0x8F	; 143
     c8e:	d0 40       	sbci	r29, 0x00	; 0
     c90:	c3 57       	subi	r28, 0x73	; 115
     c92:	df 4f       	sbci	r29, 0xFF	; 255
     c94:	68 83       	st	Y, r22
     c96:	cd 58       	subi	r28, 0x8D	; 141
     c98:	d0 40       	sbci	r29, 0x00	; 0
     c9a:	c2 57       	subi	r28, 0x72	; 114
     c9c:	df 4f       	sbci	r29, 0xFF	; 255
     c9e:	78 83       	st	Y, r23
     ca0:	ce 58       	subi	r28, 0x8E	; 142
     ca2:	d0 40       	sbci	r29, 0x00	; 0
     ca4:	ac dc       	rcall	.-1704   	; 0x5fe <CALLBACK_HIDParser_FilterHIDReportItem>
     ca6:	c1 57       	subi	r28, 0x71	; 113
     ca8:	df 4f       	sbci	r29, 0xFF	; 255
     caa:	38 81       	ld	r19, Y
     cac:	cf 58       	subi	r28, 0x8F	; 143
     cae:	d0 40       	sbci	r29, 0x00	; 0
     cb0:	c3 57       	subi	r28, 0x73	; 115
     cb2:	df 4f       	sbci	r29, 0xFF	; 255
     cb4:	68 81       	ld	r22, Y
     cb6:	cd 58       	subi	r28, 0x8D	; 141
     cb8:	d0 40       	sbci	r29, 0x00	; 0
     cba:	c2 57       	subi	r28, 0x72	; 114
     cbc:	df 4f       	sbci	r29, 0xFF	; 255
     cbe:	78 81       	ld	r23, Y
     cc0:	ce 58       	subi	r28, 0x8E	; 142
     cc2:	d0 40       	sbci	r29, 0x00	; 0
     cc4:	88 23       	and	r24, r24
     cc6:	21 f0       	breq	.+8      	; 0xcd0 <USB_ProcessHIDReport+0x684>
     cc8:	d5 01       	movw	r26, r10
					  ParserData->TotalReportItems++;
     cca:	8c 91       	ld	r24, X
     ccc:	8f 5f       	subi	r24, 0xFF	; 255
     cce:	8c 93       	st	X, r24
     cd0:	33 94       	inc	r3
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     cd2:	1a c0       	rjmp	.+52     	; 0xd08 <USB_ProcessHIDReport+0x6bc>
     cd4:	33 24       	eor	r3, r3
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     cd6:	8c ef       	ldi	r24, 0xFC	; 252
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));
     cd8:	28 2e       	mov	r2, r24
     cda:	22 22       	and	r2, r18
     cdc:	d7 01       	movw	r26, r14
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     cde:	c6 01       	movw	r24, r12
     ce0:	81 70       	andi	r24, 0x01	; 1
     ce2:	90 70       	andi	r25, 0x00	; 0
     ce4:	a0 70       	andi	r26, 0x00	; 0
     ce6:	b0 70       	andi	r27, 0x00	; 0
     ce8:	cd 57       	subi	r28, 0x7D	; 125
     cea:	df 4f       	sbci	r29, 0xFF	; 255
     cec:	88 83       	st	Y, r24
     cee:	99 83       	std	Y+1, r25	; 0x01
     cf0:	aa 83       	std	Y+2, r26	; 0x02
     cf2:	bb 83       	std	Y+3, r27	; 0x03
     cf4:	c3 58       	subi	r28, 0x83	; 131
     cf6:	d0 40       	sbci	r29, 0x00	; 0
     cf8:	c5 57       	subi	r28, 0x75	; 117
     cfa:	df 4f       	sbci	r29, 0xFF	; 255
     cfc:	79 83       	std	Y+1, r23	; 0x01
     cfe:	68 83       	st	Y, r22
     d00:	cb 58       	subi	r28, 0x8B	; 139
     d02:	d0 40       	sbci	r29, 0x00	; 0
     d04:	b4 01       	movw	r22, r8
     d06:	4a 01       	movw	r8, r20
     d08:	d8 01       	movw	r26, r16
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     d0a:	5a 96       	adiw	r26, 0x1a	; 26
     d0c:	8c 91       	ld	r24, X
     d0e:	5a 97       	sbiw	r26, 0x1a	; 26
     d10:	38 16       	cp	r3, r24
     d12:	08 f4       	brcc	.+2      	; 0xd16 <USB_ProcessHIDReport+0x6ca>
     d14:	20 cf       	rjmp	.-448    	; 0xb56 <USB_ProcessHIDReport+0x50a>
     d16:	a4 01       	movw	r20, r8
     d18:	4b 01       	movw	r8, r22
     d1a:	c5 57       	subi	r28, 0x75	; 117
     d1c:	df 4f       	sbci	r29, 0xFF	; 255
     d1e:	68 81       	ld	r22, Y
     d20:	79 81       	ldd	r23, Y+1	; 0x01
     d22:	cb 58       	subi	r28, 0x8B	; 139
     d24:	d0 40       	sbci	r29, 0x00	; 0
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <USB_ProcessHIDReport+0x6e0>
     d28:	26 01       	movw	r4, r12
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     d2a:	37 01       	movw	r6, r14
     d2c:	ed 96       	adiw	r28, 0x3d	; 61
			
			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     d2e:	8e ad       	sts	0x6e, r24
     d30:	9f ad       	sts	0x6f, r25
     d32:	ed 97       	sbiw	r28, 0x3d	; 61
     d34:	8c 70       	andi	r24, 0x0C	; 12
     d36:	90 70       	andi	r25, 0x00	; 0
     d38:	00 97       	sbiw	r24, 0x00	; 0
     d3a:	51 f4       	brne	.+20     	; 0xd50 <USB_ProcessHIDReport+0x704>
     d3c:	eb 96       	adiw	r28, 0x3b	; 59
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     d3e:	1c ae       	sts	0xbc, r17
     d40:	1d ae       	sts	0xbd, r17
     d42:	1e ae       	sts	0xbe, r17
     d44:	1f ae       	sts	0xbf, r17
     d46:	eb 97       	sbiw	r28, 0x3b	; 59
     d48:	44 24       	eor	r4, r4
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     d4a:	55 24       	eor	r5, r5
     d4c:	32 01       	movw	r6, r4
     d4e:	30 e0       	ldi	r19, 0x00	; 0
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     d50:	e7 96       	adiw	r28, 0x37	; 55
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     d52:	ee ad       	sts	0x6e, r30
     d54:	ff ad       	sts	0x6f, r31
     d56:	e7 97       	sbiw	r28, 0x37	; 55
     d58:	30 97       	sbiw	r30, 0x00	; 0
     d5a:	09 f0       	breq	.+2      	; 0xd5e <USB_ProcessHIDReport+0x712>
     d5c:	e1 cc       	rjmp	.-1598   	; 0x720 <USB_ProcessHIDReport+0xd4>
     d5e:	d5 01       	movw	r26, r10
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     d60:	8c 91       	ld	r24, X
     d62:	88 23       	and	r24, r24
     d64:	71 f4       	brne	.+28     	; 0xd82 <USB_ProcessHIDReport+0x736>
     d66:	88 e0       	ldi	r24, 0x08	; 8
	  return HID_PARSE_NoUnfilteredReportItems;
     d68:	0f c0       	rjmp	.+30     	; 0xd88 <USB_ProcessHIDReport+0x73c>
     d6a:	81 e0       	ldi	r24, 0x01	; 1

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     d6c:	0d c0       	rjmp	.+26     	; 0xd88 <USB_ProcessHIDReport+0x73c>
     d6e:	82 e0       	ldi	r24, 0x02	; 2

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     d70:	0b c0       	rjmp	.+22     	; 0xd88 <USB_ProcessHIDReport+0x73c>
     d72:	86 e0       	ldi	r24, 0x06	; 6

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     d74:	09 c0       	rjmp	.+18     	; 0xd88 <USB_ProcessHIDReport+0x73c>
     d76:	85 e0       	ldi	r24, 0x05	; 5
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     d78:	07 c0       	rjmp	.+14     	; 0xd88 <USB_ProcessHIDReport+0x73c>
     d7a:	84 e0       	ldi	r24, 0x04	; 4
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     d7c:	05 c0       	rjmp	.+10     	; 0xd88 <USB_ProcessHIDReport+0x73c>
     d7e:	83 e0       	ldi	r24, 0x03	; 3
					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;
     d80:	03 c0       	rjmp	.+6      	; 0xd88 <USB_ProcessHIDReport+0x73c>
     d82:	80 e0       	ldi	r24, 0x00	; 0
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     d84:	01 c0       	rjmp	.+2      	; 0xd88 <USB_ProcessHIDReport+0x73c>
     d86:	87 e0       	ldi	r24, 0x07	; 7
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     d88:	c1 57       	subi	r28, 0x71	; 113

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     d8a:	df 4f       	sbci	r29, 0xFF	; 255
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	1f 91       	pop	r17
     d9c:	0f 91       	pop	r16
     d9e:	ff 90       	pop	r15
     da0:	ef 90       	pop	r14
     da2:	df 90       	pop	r13
     da4:	cf 90       	pop	r12
     da6:	bf 90       	pop	r11
     da8:	af 90       	pop	r10
     daa:	9f 90       	pop	r9
     dac:	8f 90       	pop	r8
     dae:	7f 90       	pop	r7
     db0:	6f 90       	pop	r6
     db2:	5f 90       	pop	r5
     db4:	4f 90       	pop	r4
     db6:	3f 90       	pop	r3
     db8:	2f 90       	pop	r2
     dba:	08 95       	ret
     dbc:	2a 30       	cpi	r18, 0x0A	; 10
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <USB_ProcessHIDReport+0x776>
     dc0:	39 ce       	rjmp	.-910    	; 0xa34 <USB_ProcessHIDReport+0x3e8>
     dc2:	e1 cf       	rjmp	.-62     	; 0xd86 <USB_ProcessHIDReport+0x73a>

00000dc4 <USB_GetHIDReportItemInfo>:
     dc4:	ef 92       	push	r14
	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
     dc6:	ff 92       	push	r15
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	8c 01       	movw	r16, r24
     dd2:	eb 01       	movw	r28, r22
	if (ReportItem == NULL)
     dd4:	20 97       	sbiw	r28, 0x00	; 0
     dd6:	09 f4       	brne	.+2      	; 0xdda <USB_GetHIDReportItemInfo+0x16>
     dd8:	4e c0       	rjmp	.+156    	; 0xe76 <USB_GetHIDReportItemInfo+0xb2>
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
     dda:	e8 85       	ldd	r30, Y+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
     ddc:	58 81       	ld	r21, Y
     dde:	49 81       	ldd	r20, Y+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
     de0:	8d 81       	ldd	r24, Y+5	; 0x05
     de2:	88 23       	and	r24, r24
     de4:	39 f0       	breq	.+14     	; 0xdf4 <USB_GetHIDReportItemInfo+0x30>
	{
		if (ReportItem->ReportID != ReportData[0])
     de6:	d8 01       	movw	r26, r16
     de8:	9c 91       	ld	r25, X
     dea:	89 17       	cp	r24, r25
     dec:	09 f0       	breq	.+2      	; 0xdf0 <USB_GetHIDReportItemInfo+0x2c>
     dee:	43 c0       	rjmp	.+134    	; 0xe76 <USB_GetHIDReportItemInfo+0xb2>
		  return false;

		ReportData++;
     df0:	0f 5f       	subi	r16, 0xFF	; 255
     df2:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	ReportItem->PreviousValue = ReportItem->Value;
     df4:	8a a1       	lds	r24, 0x4a
     df6:	9b a1       	lds	r25, 0x4b
     df8:	ac a1       	lds	r26, 0x4c
     dfa:	bd a1       	lds	r27, 0x4d
     dfc:	8e a3       	lds	r24, 0x5e
     dfe:	9f a3       	lds	r25, 0x5f
     e00:	a8 a7       	lds	r26, 0x78
     e02:	b9 a7       	lds	r27, 0x79
	ReportItem->Value = 0;
     e04:	1a a2       	lds	r17, 0x9a
     e06:	1b a2       	lds	r17, 0x9b
     e08:	1c a2       	lds	r17, 0x9c
     e0a:	1d a2       	lds	r17, 0x9d
{
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
     e0c:	25 2f       	mov	r18, r21
     e0e:	34 2f       	mov	r19, r20
	uint32_t BitMask      = (1 << 0);
     e10:	41 e0       	ldi	r20, 0x01	; 1
     e12:	50 e0       	ldi	r21, 0x00	; 0
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
     e18:	79 01       	movw	r14, r18
     e1a:	ee 0e       	add	r14, r30
     e1c:	f1 1c       	adc	r15, r1
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
     e1e:	26 c0       	rjmp	.+76     	; 0xe6c <USB_GetHIDReportItemInfo+0xa8>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
     e20:	f9 01       	movw	r30, r18
     e22:	93 e0       	ldi	r25, 0x03	; 3
     e24:	f6 95       	lsr	r31
     e26:	e7 95       	ror	r30
     e28:	9a 95       	dec	r25
     e2a:	e1 f7       	brne	.-8      	; 0xe24 <USB_GetHIDReportItemInfo+0x60>
     e2c:	e0 0f       	add	r30, r16
     e2e:	f1 1f       	adc	r31, r17
     e30:	e0 81       	ld	r30, Z
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	c9 01       	movw	r24, r18
     e36:	87 70       	andi	r24, 0x07	; 7
     e38:	90 70       	andi	r25, 0x00	; 0
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <USB_GetHIDReportItemInfo+0x7c>
     e3c:	f5 95       	asr	r31
     e3e:	e7 95       	ror	r30
     e40:	8a 95       	dec	r24
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <USB_GetHIDReportItemInfo+0x78>
     e44:	e0 ff       	sbrs	r30, 0
     e46:	0c c0       	rjmp	.+24     	; 0xe60 <USB_GetHIDReportItemInfo+0x9c>
		  ReportItem->Value |= BitMask;
     e48:	8a a1       	lds	r24, 0x4a
     e4a:	9b a1       	lds	r25, 0x4b
     e4c:	ac a1       	lds	r26, 0x4c
     e4e:	bd a1       	lds	r27, 0x4d
     e50:	84 2b       	or	r24, r20
     e52:	95 2b       	or	r25, r21
     e54:	a6 2b       	or	r26, r22
     e56:	b7 2b       	or	r27, r23
     e58:	8a a3       	lds	r24, 0x5a
     e5a:	9b a3       	lds	r25, 0x5b
     e5c:	ac a3       	lds	r26, 0x5c
     e5e:	bd a3       	lds	r27, 0x5d

		CurrentBit++;
     e60:	2f 5f       	subi	r18, 0xFF	; 255
     e62:	3f 4f       	sbci	r19, 0xFF	; 255
		BitMask <<= 1;
     e64:	44 0f       	add	r20, r20
     e66:	55 1f       	adc	r21, r21
     e68:	66 1f       	adc	r22, r22
     e6a:	77 1f       	adc	r23, r23
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
     e6c:	e2 16       	cp	r14, r18
     e6e:	f3 06       	cpc	r15, r19
     e70:	b9 f6       	brne	.-82     	; 0xe20 <USB_GetHIDReportItemInfo+0x5c>

		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	01 c0       	rjmp	.+2      	; 0xe78 <USB_GetHIDReportItemInfo+0xb4>
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
		  return false;
     e76:	80 e0       	ldi	r24, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	0f 91       	pop	r16
     e80:	ff 90       	pop	r15
     e82:	ef 90       	pop	r14
     e84:	08 95       	ret

00000e86 <USB_GetHIDReportSize>:
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
     e86:	9c 01       	movw	r18, r24
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
     e8c:	50 e0       	ldi	r21, 0x00	; 0
     e8e:	44 0f       	add	r20, r20
     e90:	55 1f       	adc	r21, r21
     e92:	42 0f       	add	r20, r18
     e94:	53 1f       	adc	r21, r19
     e96:	fa 01       	movw	r30, r20
     e98:	e8 0f       	add	r30, r24
     e9a:	f9 1f       	adc	r31, r25
     e9c:	ef 56       	subi	r30, 0x6F	; 111
     e9e:	fc 4f       	sbci	r31, 0xFC	; 252
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
     ea0:	a0 81       	ld	r26, Z
     ea2:	b1 81       	ldd	r27, Z+1	; 0x01
		CurrentBit++;
		BitMask <<= 1;
	}
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
     ea4:	f9 01       	movw	r30, r18
     ea6:	e8 0f       	add	r30, r24
     ea8:	f9 1f       	adc	r31, r25
     eaa:	e0 57       	subi	r30, 0x70	; 112
     eac:	fc 4f       	sbci	r31, 0xFC	; 252
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
     eae:	70 81       	ld	r23, Z
     eb0:	76 17       	cp	r23, r22
     eb2:	91 f4       	brne	.+36     	; 0xed8 <USB_GetHIDReportSize+0x52>
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
     eb4:	cd 01       	movw	r24, r26
     eb6:	87 70       	andi	r24, 0x07	; 7
     eb8:	90 70       	andi	r25, 0x00	; 0
     eba:	21 e0       	ldi	r18, 0x01	; 1
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	00 97       	sbiw	r24, 0x00	; 0
     ec0:	11 f4       	brne	.+4      	; 0xec6 <USB_GetHIDReportSize+0x40>
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	cd 01       	movw	r24, r26
     ec8:	e3 e0       	ldi	r30, 0x03	; 3
     eca:	96 95       	lsr	r25
     ecc:	87 95       	ror	r24
     ece:	ea 95       	dec	r30
     ed0:	e1 f7       	brne	.-8      	; 0xeca <USB_GetHIDReportSize+0x44>
     ed2:	82 0f       	add	r24, r18
     ed4:	93 1f       	adc	r25, r19
     ed6:	08 95       	ret
     ed8:	07 96       	adiw	r24, 0x07	; 7

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
     eda:	86 34       	cpi	r24, 0x46	; 70
     edc:	91 05       	cpc	r25, r1
     ede:	d9 f6       	brne	.-74     	; 0xe96 <USB_GetHIDReportSize+0x10>

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
}
     ee4:	08 95       	ret

00000ee6 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     ee6:	80 91 9e 00 	lds	r24, 0x009E
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	81 70       	andi	r24, 0x01	; 1
     eee:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     ef0:	20 91 a0 00 	lds	r18, 0x00A0
     ef4:	2d 7f       	andi	r18, 0xFD	; 253
     ef6:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     efa:	20 91 9e 00 	lds	r18, 0x009E
     efe:	22 60       	ori	r18, 0x02	; 2
     f00:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     f04:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     f08:	21 fd       	sbrc	r18, 1
     f0a:	fc cf       	rjmp	.-8      	; 0xf04 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f0c:	20 91 9e 00 	lds	r18, 0x009E
     f10:	21 60       	ori	r18, 0x01	; 1
     f12:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     f16:	10 92 1e 05 	sts	0x051E, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     f1a:	20 91 a0 00 	lds	r18, 0x00A0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	20 72       	andi	r18, 0x20	; 32
     f22:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     f24:	40 91 a0 00 	lds	r20, 0x00A0
     f28:	4f 7d       	andi	r20, 0xDF	; 223
     f2a:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     f2e:	40 91 9f 00 	lds	r20, 0x009F
     f32:	4f 7d       	andi	r20, 0xDF	; 223
     f34:	40 93 9f 00 	sts	0x009F, r20
     f38:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     f3a:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     f3e:	55 ff       	sbrs	r21, 5
     f40:	0b c0       	rjmp	.+22     	; 0xf58 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     f42:	40 91 9f 00 	lds	r20, 0x009F
     f46:	4f 7d       	andi	r20, 0xDF	; 223
     f48:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     f4c:	40 91 9f 00 	lds	r20, 0x009F
     f50:	4d 7f       	andi	r20, 0xFD	; 253
     f52:	40 93 9f 00 	sts	0x009F, r20
     f56:	08 c0       	rjmp	.+16     	; 0xf68 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f58:	ef ec       	ldi	r30, 0xCF	; 207
     f5a:	f7 e0       	ldi	r31, 0x07	; 7
     f5c:	31 97       	sbiw	r30, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <USB_Host_ResetDevice+0x76>
     f60:	00 c0       	rjmp	.+0      	; 0xf62 <USB_Host_ResetDevice+0x7c>
     f62:	00 00       	nop
     f64:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     f66:	49 f7       	brne	.-46     	; 0xf3a <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     f68:	21 15       	cp	r18, r1
     f6a:	31 05       	cpc	r19, r1
     f6c:	29 f0       	breq	.+10     	; 0xf78 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     f6e:	20 91 a0 00 	lds	r18, 0x00A0
     f72:	20 62       	ori	r18, 0x20	; 32
     f74:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	29 f4       	brne	.+10     	; 0xf86 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     f7c:	80 91 9e 00 	lds	r24, 0x009E
     f80:	8e 7f       	andi	r24, 0xFE	; 254
     f82:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     f86:	80 91 a0 00 	lds	r24, 0x00A0
     f8a:	82 60       	ori	r24, 0x02	; 2
     f8c:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     f90:	08 95       	ret

00000f92 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f92:	40 91 9e 00 	lds	r20, 0x009E
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	41 70       	andi	r20, 0x01	; 1
     f9a:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     f9c:	20 91 a0 00 	lds	r18, 0x00A0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	20 72       	andi	r18, 0x20	; 32
     fa4:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     fa6:	90 91 a0 00 	lds	r25, 0x00A0
     faa:	9f 7d       	andi	r25, 0xDF	; 223
     fac:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     fb0:	90 91 9f 00 	lds	r25, 0x009F
     fb4:	9f 7d       	andi	r25, 0xDF	; 223
     fb6:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     fba:	90 91 9e 00 	lds	r25, 0x009E
     fbe:	91 60       	ori	r25, 0x01	; 1
     fc0:	90 93 9e 00 	sts	0x009E, r25
     fc4:	26 c0       	rjmp	.+76     	; 0x1012 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     fc6:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     fca:	95 ff       	sbrs	r25, 5
     fcc:	06 c0       	rjmp	.+12     	; 0xfda <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     fce:	90 91 9f 00 	lds	r25, 0x009F
     fd2:	9f 7d       	andi	r25, 0xDF	; 223
     fd4:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     fd8:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     fda:	90 91 28 05 	lds	r25, 0x0528
     fde:	91 30       	cpi	r25, 0x01	; 1
     fe0:	d9 f0       	breq	.+54     	; 0x1018 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     fe2:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     fe6:	94 ff       	sbrs	r25, 4
     fe8:	09 c0       	rjmp	.+18     	; 0xffc <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     fea:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     fee:	80 91 a6 00 	lds	r24, 0x00A6
     ff2:	8f 7e       	andi	r24, 0xEF	; 239
     ff4:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     ff8:	82 e0       	ldi	r24, 0x02	; 2

			break;
     ffa:	0f c0       	rjmp	.+30     	; 0x101a <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     ffc:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
    1000:	91 ff       	sbrs	r25, 1
    1002:	07 c0       	rjmp	.+14     	; 0x1012 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
    1004:	80 91 a6 00 	lds	r24, 0x00A6
    1008:	8d 7f       	andi	r24, 0xFD	; 253
    100a:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
    100e:	83 e0       	ldi	r24, 0x03	; 3

			break;
    1010:	04 c0       	rjmp	.+8      	; 0x101a <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    1012:	88 23       	and	r24, r24
    1014:	c1 f6       	brne	.-80     	; 0xfc6 <USB_Host_WaitMS+0x34>
    1016:	01 c0       	rjmp	.+2      	; 0x101a <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
    1018:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
    101a:	41 15       	cp	r20, r1
    101c:	51 05       	cpc	r21, r1
    101e:	29 f4       	brne	.+10     	; 0x102a <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1020:	90 91 9e 00 	lds	r25, 0x009E
    1024:	9e 7f       	andi	r25, 0xFE	; 254
    1026:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
    102a:	21 15       	cp	r18, r1
    102c:	31 05       	cpc	r19, r1
    102e:	29 f0       	breq	.+10     	; 0x103a <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    1030:	90 91 a0 00 	lds	r25, 0x00A0
    1034:	90 62       	ori	r25, 0x20	; 32
    1036:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
    103a:	08 95       	ret

0000103c <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	28 97       	sbiw	r28, 0x08	; 8
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    1054:	80 91 28 05 	lds	r24, 0x0528
    1058:	85 30       	cpi	r24, 0x05	; 5
    105a:	09 f4       	brne	.+2      	; 0x105e <USB_Host_ProcessNextHostState+0x22>
    105c:	99 c0       	rjmp	.+306    	; 0x1190 <USB_Host_ProcessNextHostState+0x154>
    105e:	86 30       	cpi	r24, 0x06	; 6
    1060:	68 f4       	brcc	.+26     	; 0x107c <USB_Host_ProcessNextHostState+0x40>
    1062:	82 30       	cpi	r24, 0x02	; 2
    1064:	c1 f1       	breq	.+112    	; 0x10d6 <USB_Host_ProcessNextHostState+0x9a>
    1066:	83 30       	cpi	r24, 0x03	; 3
    1068:	18 f4       	brcc	.+6      	; 0x1070 <USB_Host_ProcessNextHostState+0x34>
    106a:	88 23       	and	r24, r24
    106c:	a1 f0       	breq	.+40     	; 0x1096 <USB_Host_ProcessNextHostState+0x5a>
    106e:	04 c1       	rjmp	.+520    	; 0x1278 <USB_Host_ProcessNextHostState+0x23c>
    1070:	83 30       	cpi	r24, 0x03	; 3
    1072:	d9 f1       	breq	.+118    	; 0x10ea <USB_Host_ProcessNextHostState+0xae>
    1074:	84 30       	cpi	r24, 0x04	; 4
    1076:	09 f0       	breq	.+2      	; 0x107a <USB_Host_ProcessNextHostState+0x3e>
    1078:	ff c0       	rjmp	.+510    	; 0x1278 <USB_Host_ProcessNextHostState+0x23c>
    107a:	62 c0       	rjmp	.+196    	; 0x1140 <USB_Host_ProcessNextHostState+0x104>
    107c:	87 30       	cpi	r24, 0x07	; 7
    107e:	09 f4       	brne	.+2      	; 0x1082 <USB_Host_ProcessNextHostState+0x46>
    1080:	9e c0       	rjmp	.+316    	; 0x11be <USB_Host_ProcessNextHostState+0x182>
    1082:	87 30       	cpi	r24, 0x07	; 7
    1084:	08 f4       	brcc	.+2      	; 0x1088 <USB_Host_ProcessNextHostState+0x4c>
    1086:	8f c0       	rjmp	.+286    	; 0x11a6 <USB_Host_ProcessNextHostState+0x16a>
    1088:	88 30       	cpi	r24, 0x08	; 8
    108a:	09 f4       	brne	.+2      	; 0x108e <USB_Host_ProcessNextHostState+0x52>
    108c:	b8 c0       	rjmp	.+368    	; 0x11fe <USB_Host_ProcessNextHostState+0x1c2>
    108e:	89 30       	cpi	r24, 0x09	; 9
    1090:	09 f0       	breq	.+2      	; 0x1094 <USB_Host_ProcessNextHostState+0x58>
    1092:	f2 c0       	rjmp	.+484    	; 0x1278 <USB_Host_ProcessNextHostState+0x23c>
    1094:	d9 c0       	rjmp	.+434    	; 0x1248 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    1096:	00 91 1b 05 	lds	r16, 0x051B
    109a:	10 91 1c 05 	lds	r17, 0x051C
    109e:	01 15       	cp	r16, r1
    10a0:	11 05       	cpc	r17, r1
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <USB_Host_ProcessNextHostState+0x6a>
    10a4:	e9 c0       	rjmp	.+466    	; 0x1278 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	74 df       	rcall	.-280    	; 0xf92 <USB_Host_WaitMS>
    10aa:	68 2f       	mov	r22, r24
    10ac:	88 23       	and	r24, r24
    10ae:	31 f0       	breq	.+12     	; 0x10bc <USB_Host_ProcessNextHostState+0x80>
    10b0:	80 91 1d 05 	lds	r24, 0x051D
				{
					USB_HostState = PostWaitState;
    10b4:	80 93 28 05 	sts	0x0528, r24
    10b8:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
    10ba:	d2 c0       	rjmp	.+420    	; 0x1260 <USB_Host_ProcessNextHostState+0x224>
					break;
    10bc:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
    10be:	10 40       	sbci	r17, 0x00	; 0
    10c0:	10 93 1c 05 	sts	0x051C, r17
    10c4:	00 93 1b 05 	sts	0x051B, r16
    10c8:	01 15       	cp	r16, r1
    10ca:	11 05       	cpc	r17, r1
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <USB_Host_ProcessNextHostState+0x94>
    10ce:	d4 c0       	rjmp	.+424    	; 0x1278 <USB_Host_ProcessNextHostState+0x23c>
    10d0:	80 91 1d 05 	lds	r24, 0x051D
				  USB_HostState = PostWaitState;
    10d4:	07 c0       	rjmp	.+14     	; 0x10e4 <USB_Host_ProcessNextHostState+0xa8>
    10d6:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    10d8:	93 e0       	ldi	r25, 0x03	; 3
    10da:	90 93 1c 05 	sts	0x051C, r25
    10de:	80 93 1b 05 	sts	0x051B, r24
    10e2:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    10e4:	80 93 28 05 	sts	0x0528, r24
    10e8:	c7 c0       	rjmp	.+398    	; 0x1278 <USB_Host_ProcessNextHostState+0x23c>
			break;
    10ea:	80 91 1b 05 	lds	r24, 0x051B
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    10ee:	90 91 1c 05 	lds	r25, 0x051C
    10f2:	9c 01       	movw	r18, r24
    10f4:	21 50       	subi	r18, 0x01	; 1
    10f6:	30 40       	sbci	r19, 0x00	; 0
    10f8:	30 93 1c 05 	sts	0x051C, r19
    10fc:	20 93 1b 05 	sts	0x051B, r18
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	39 f0       	breq	.+14     	; 0x1112 <USB_Host_ProcessNextHostState+0xd6>
    1104:	8f ec       	ldi	r24, 0xCF	; 207
    1106:	97 e0       	ldi	r25, 0x07	; 7
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	f1 f7       	brne	.-4      	; 0x1108 <USB_Host_ProcessNextHostState+0xcc>
    110c:	00 c0       	rjmp	.+0      	; 0x110e <USB_Host_ProcessNextHostState+0xd2>
    110e:	00 00       	nop
    1110:	b3 c0       	rjmp	.+358    	; 0x1278 <USB_Host_ProcessNextHostState+0x23c>
    1112:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    1114:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1118:	80 61       	ori	r24, 0x10	; 16
    111a:	80 93 d8 00 	sts	0x00D8, r24
    111e:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    1122:	8b 7f       	andi	r24, 0xFB	; 251
    1124:	80 93 dd 00 	sts	0x00DD, r24
    1128:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
    112c:	80 61       	ori	r24, 0x10	; 16
    112e:	80 93 d7 00 	sts	0x00D7, r24
    1132:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    1136:	82 60       	ori	r24, 0x02	; 2
    1138:	80 93 dd 00 	sts	0x00DD, r24
    113c:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    113e:	d2 cf       	rjmp	.-92     	; 0x10e4 <USB_Host_ProcessNextHostState+0xa8>
    1140:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    1144:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    1146:	98 c0       	rjmp	.+304    	; 0x1278 <USB_Host_ProcessNextHostState+0x23c>
    1148:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    114c:	8e 7f       	andi	r24, 0xFE	; 254
    114e:	80 93 9f 00 	sts	0x009F, r24
    1152:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1156:	8d 7f       	andi	r24, 0xFD	; 253
    1158:	80 93 9f 00 	sts	0x009F, r24
    115c:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1160:	8d 7f       	andi	r24, 0xFD	; 253
    1162:	80 93 df 00 	sts	0x00DF, r24
    1166:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    116a:	82 60       	ori	r24, 0x02	; 2
    116c:	80 93 de 00 	sts	0x00DE, r24
    1170:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1174:	81 60       	ori	r24, 0x01	; 1
    1176:	80 93 9e 00 	sts	0x009E, r24
    117a:	66 d1       	rcall	.+716    	; 0x1448 <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    117c:	10 92 28 05 	sts	0x0528, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    1180:	84 e6       	ldi	r24, 0x64	; 100
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	90 93 1c 05 	sts	0x051C, r25
    1188:	80 93 1b 05 	sts	0x051B, r24
    118c:	85 e0       	ldi	r24, 0x05	; 5
    118e:	59 c0       	rjmp	.+178    	; 0x1242 <USB_Host_ProcessNextHostState+0x206>
    1190:	aa de       	rcall	.-684    	; 0xee6 <USB_Host_ResetDevice>
    1192:	10 92 28 05 	sts	0x0528, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    1196:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	90 93 1c 05 	sts	0x051C, r25
    119e:	80 93 1b 05 	sts	0x051B, r24
    11a2:	86 e0       	ldi	r24, 0x06	; 6
    11a4:	4e c0       	rjmp	.+156    	; 0x1242 <USB_Host_ProcessNextHostState+0x206>
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    11ac:	20 e4       	ldi	r18, 0x40	; 64
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	01 e0       	ldi	r16, 0x01	; 1
    11b2:	c4 d0       	rcall	.+392    	; 0x133c <Pipe_ConfigurePipe>
    11b4:	88 23       	and	r24, r24
    11b6:	09 f4       	brne	.+2      	; 0x11ba <USB_Host_ProcessNextHostState+0x17e>
    11b8:	4f c0       	rjmp	.+158    	; 0x1258 <USB_Host_ProcessNextHostState+0x21c>
    11ba:	87 e0       	ldi	r24, 0x07	; 7
    11bc:	93 cf       	rjmp	.-218    	; 0x10e4 <USB_Host_ProcessNextHostState+0xa8>
    11be:	a0 e2       	ldi	r26, 0x20	; 32
    11c0:	b5 e0       	ldi	r27, 0x05	; 5
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    11c2:	e7 e1       	ldi	r30, 0x17	; 23
    11c4:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    11c6:	88 e0       	ldi	r24, 0x08	; 8
    11c8:	01 90       	ld	r0, Z+
    11ca:	0d 92       	st	X+, r0
    11cc:	81 50       	subi	r24, 0x01	; 1
    11ce:	e1 f7       	brne	.-8      	; 0x11c8 <USB_Host_ProcessNextHostState+0x18c>
    11d0:	10 92 a7 00 	sts	0x00A7, r1
    11d4:	ce 01       	movw	r24, r28
    11d6:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    11d8:	7e d3       	rcall	.+1788   	; 0x18d6 <USB_Host_SendControlRequest>
    11da:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    11dc:	88 23       	and	r24, r24
    11de:	09 f0       	breq	.+2      	; 0x11e2 <USB_Host_ProcessNextHostState+0x1a6>
    11e0:	3e c0       	rjmp	.+124    	; 0x125e <USB_Host_ProcessNextHostState+0x222>
    11e2:	88 85       	ldd	r24, Y+8	; 0x08
    11e4:	80 93 27 01 	sts	0x0127, r24
    11e8:	7e de       	rcall	.-772    	; 0xee6 <USB_Host_ResetDevice>
    11ea:	10 92 28 05 	sts	0x0528, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    11ee:	88 ec       	ldi	r24, 0xC8	; 200
    11f0:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
    11f2:	90 93 1c 05 	sts	0x051C, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    11f6:	80 93 1b 05 	sts	0x051B, r24
    11fa:	88 e0       	ldi	r24, 0x08	; 8
    11fc:	22 c0       	rjmp	.+68     	; 0x1242 <USB_Host_ProcessNextHostState+0x206>
    11fe:	20 91 27 01 	lds	r18, 0x0127
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    120a:	01 e0       	ldi	r16, 0x01	; 1
    120c:	97 d0       	rcall	.+302    	; 0x133c <Pipe_ConfigurePipe>
    120e:	88 23       	and	r24, r24
    1210:	19 f1       	breq	.+70     	; 0x1258 <USB_Host_ProcessNextHostState+0x21c>
    1212:	a0 e2       	ldi	r26, 0x20	; 32
    1214:	b5 e0       	ldi	r27, 0x05	; 5
    1216:	ef e1       	ldi	r30, 0x1F	; 31
    1218:	f1 e0       	ldi	r31, 0x01	; 1
    121a:	88 e0       	ldi	r24, 0x08	; 8
    121c:	01 90       	ld	r0, Z+
    121e:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    1220:	81 50       	subi	r24, 0x01	; 1
    1222:	e1 f7       	brne	.-8      	; 0x121c <USB_Host_ProcessNextHostState+0x1e0>
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	56 d3       	rcall	.+1708   	; 0x18d6 <USB_Host_SendControlRequest>
    122a:	68 2f       	mov	r22, r24
    122c:	88 23       	and	r24, r24
    122e:	b9 f4       	brne	.+46     	; 0x125e <USB_Host_ProcessNextHostState+0x222>
    1230:	10 92 28 05 	sts	0x0528, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1234:	84 e6       	ldi	r24, 0x64	; 100
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	90 93 1c 05 	sts	0x051C, r25
    123c:	80 93 1b 05 	sts	0x051B, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    1240:	89 e0       	ldi	r24, 0x09	; 9
    1242:	80 93 1d 05 	sts	0x051D, r24
    1246:	18 c0       	rjmp	.+48     	; 0x1278 <USB_Host_ProcessNextHostState+0x23c>
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	80 93 a1 00 	sts	0x00A1, r24
    124e:	8a e0       	ldi	r24, 0x0A	; 10
    1250:	80 93 28 05 	sts	0x0528, r24
    1254:	35 d9       	rcall	.-3478   	; 0x4c0 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
    1256:	10 c0       	rjmp	.+32     	; 0x1278 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    1258:	60 e0       	ldi	r22, 0x00	; 0
    125a:	84 e0       	ldi	r24, 0x04	; 4
    125c:	01 c0       	rjmp	.+2      	; 0x1260 <USB_Host_ProcessNextHostState+0x224>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    125e:	83 e0       	ldi	r24, 0x03	; 3
    1260:	90 91 28 05 	lds	r25, 0x0528

			EVENT_USB_Host_DeviceEnumerationComplete();
    1264:	91 30       	cpi	r25, 0x01	; 1
    1266:	41 f0       	breq	.+16     	; 0x1278 <USB_Host_ProcessNextHostState+0x23c>
			break;
    1268:	a1 d9       	rcall	.-3262   	; 0x5ac <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    126a:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    126e:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
    1270:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    1274:	1f d9       	rcall	.-3522   	; 0x4b4 <EVENT_USB_Host_DeviceUnattached>
    1276:	64 d1       	rcall	.+712    	; 0x1540 <USB_ResetInterface>
    1278:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16

		USB_ResetInterface();
    128c:	08 95       	ret

0000128e <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    128e:	af 92       	push	r10
    1290:	bf 92       	push	r11
    1292:	cf 92       	push	r12
    1294:	df 92       	push	r13
    1296:	ff 92       	push	r15
    1298:	0f 93       	push	r16
    129a:	1f 93       	push	r17
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	5c 01       	movw	r10, r24
    12a2:	eb 01       	movw	r28, r22
    12a4:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    12a6:	80 91 aa 00 	lds	r24, 0x00AA
    12aa:	8f 7c       	andi	r24, 0xCF	; 207
    12ac:	80 61       	ori	r24, 0x10	; 16
    12ae:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    12b2:	00 d1       	rcall	.+512    	; 0x14b4 <Pipe_WaitUntilReady>
    12b4:	f8 2e       	mov	r15, r24
    12b6:	88 23       	and	r24, r24
    12b8:	b1 f5       	brne	.+108    	; 0x1326 <Pipe_Read_Stream_LE+0x98>
    12ba:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    12bc:	d1 04       	cpc	r13, r1
    12be:	41 f0       	breq	.+16     	; 0x12d0 <Pipe_Read_Stream_LE+0x42>
    12c0:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
    12c2:	00 81       	ld	r16, Z
    12c4:	11 81       	ldd	r17, Z+1	; 0x01
    12c6:	c0 1b       	sub	r28, r16
    12c8:	d1 0b       	sbc	r29, r17
    12ca:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    12cc:	1b 1d       	adc	r17, r11
    12ce:	01 c0       	rjmp	.+2      	; 0x12d2 <Pipe_Read_Stream_LE+0x44>
    12d0:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    12d2:	aa 24       	eor	r10, r10
    12d4:	bb 24       	eor	r11, r11
    12d6:	23 c0       	rjmp	.+70     	; 0x131e <Pipe_Read_Stream_LE+0x90>
    12d8:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    12dc:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    12de:	16 c0       	rjmp	.+44     	; 0x130c <Pipe_Read_Stream_LE+0x7e>
    12e0:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    12e4:	8e 77       	andi	r24, 0x7E	; 126
    12e6:	80 93 a6 00 	sts	0x00A6, r24
    12ea:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    12ec:	d1 04       	cpc	r13, r1
    12ee:	51 f0       	breq	.+20     	; 0x1304 <Pipe_Read_Stream_LE+0x76>
    12f0:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
    12f2:	80 81       	ld	r24, Z
    12f4:	91 81       	ldd	r25, Z+1	; 0x01
    12f6:	8a 0d       	add	r24, r10
    12f8:	9b 1d       	adc	r25, r11
    12fa:	91 83       	std	Z+1, r25	; 0x01
    12fc:	80 83       	st	Z, r24
    12fe:	64 e0       	ldi	r22, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
    1300:	f6 2e       	mov	r15, r22
    1302:	11 c0       	rjmp	.+34     	; 0x1326 <Pipe_Read_Stream_LE+0x98>
    1304:	d7 d0       	rcall	.+430    	; 0x14b4 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1306:	88 23       	and	r24, r24
    1308:	51 f0       	breq	.+20     	; 0x131e <Pipe_Read_Stream_LE+0x90>
    130a:	0c c0       	rjmp	.+24     	; 0x1324 <Pipe_Read_Stream_LE+0x96>
    130c:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1310:	f8 01       	movw	r30, r16
    1312:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1314:	8f 01       	movw	r16, r30
    1316:	21 97       	sbiw	r28, 0x01	; 1
    1318:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    131a:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
    131c:	b1 1c       	adc	r11, r1
    131e:	20 97       	sbiw	r28, 0x00	; 0
    1320:	d9 f6       	brne	.-74     	; 0x12d8 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1322:	01 c0       	rjmp	.+2      	; 0x1326 <Pipe_Read_Stream_LE+0x98>
    1324:	f8 2e       	mov	r15, r24
    1326:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1328:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    132a:	cf 91       	pop	r28
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	ff 90       	pop	r15
    1332:	df 90       	pop	r13
    1334:	cf 90       	pop	r12
    1336:	bf 90       	pop	r11
    1338:	af 90       	pop	r10
    133a:	08 95       	ret

0000133c <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    133c:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    133e:	58 2f       	mov	r21, r24
    1340:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    1342:	87 ff       	sbrs	r24, 7
    1344:	02 c0       	rjmp	.+4      	; 0x134a <Pipe_ConfigurePipe+0xe>
    1346:	80 e1       	ldi	r24, 0x10	; 16
    1348:	01 c0       	rjmp	.+2      	; 0x134c <Pipe_ConfigurePipe+0x10>
    134a:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
    134c:	57 30       	cpi	r21, 0x07	; 7
    134e:	08 f0       	brcs	.+2      	; 0x1352 <Pipe_ConfigurePipe+0x16>
    1350:	57 c0       	rjmp	.+174    	; 0x1400 <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
    1352:	66 23       	and	r22, r22
    1354:	09 f4       	brne	.+2      	; 0x1358 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
    1356:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    1358:	4f 70       	andi	r20, 0x0F	; 15
    135a:	62 95       	swap	r22
    135c:	66 0f       	add	r22, r22
    135e:	66 0f       	add	r22, r22
    1360:	60 7c       	andi	r22, 0xC0	; 192
    1362:	64 2b       	or	r22, r20
    1364:	68 2b       	or	r22, r24
    1366:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    1368:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    136a:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    136e:	45 17       	cp	r20, r21
    1370:	a9 f4       	brne	.+42     	; 0x139c <Pipe_ConfigurePipe+0x60>
    1372:	04 c0       	rjmp	.+8      	; 0x137c <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    1374:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	03 c0       	rjmp	.+6      	; 0x1382 <Pipe_ConfigurePipe+0x46>
    137c:	88 e0       	ldi	r24, 0x08	; 8
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    1382:	82 17       	cp	r24, r18
    1384:	93 07       	cpc	r25, r19
    1386:	10 f4       	brcc	.+4      	; 0x138c <Pipe_ConfigurePipe+0x50>
    1388:	75 30       	cpi	r23, 0x05	; 5
    138a:	a1 f7       	brne	.-24     	; 0x1374 <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    138c:	87 2f       	mov	r24, r23
    138e:	82 95       	swap	r24
    1390:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    1392:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    1394:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    1396:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    1398:	e0 e0       	ldi	r30, 0x00	; 0
    139a:	08 c0       	rjmp	.+16     	; 0x13ac <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    139c:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    13a0:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    13a4:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
    13a8:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    13ac:	81 ff       	sbrs	r24, 1
    13ae:	20 c0       	rjmp	.+64     	; 0x13f0 <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    13b0:	90 91 a9 00 	lds	r25, 0x00A9
    13b4:	9e 7f       	andi	r25, 0xFE	; 254
    13b6:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    13ba:	90 91 ab 00 	lds	r25, 0x00AB
    13be:	9d 7f       	andi	r25, 0xFD	; 253
    13c0:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    13c4:	90 91 a9 00 	lds	r25, 0x00A9
    13c8:	91 60       	ori	r25, 0x01	; 1
    13ca:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    13ce:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    13d2:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    13d6:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
    13da:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    13de:	80 91 a9 00 	lds	r24, 0x00A9
    13e2:	80 62       	ori	r24, 0x20	; 32
    13e4:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    13e8:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    13ec:	87 ff       	sbrs	r24, 7
    13ee:	08 c0       	rjmp	.+16     	; 0x1400 <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    13f0:	4f 5f       	subi	r20, 0xFF	; 255
    13f2:	47 30       	cpi	r20, 0x07	; 7
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <Pipe_ConfigurePipe+0xbc>
    13f6:	b9 cf       	rjmp	.-142    	; 0x136a <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13f8:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	01 c0       	rjmp	.+2      	; 0x1402 <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
    1400:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    1402:	0f 91       	pop	r16
    1404:	08 95       	ret

00001406 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
    1406:	ff 92       	push	r15
    1408:	0f 93       	push	r16
    140a:	1f 93       	push	r17
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
    1412:	ec 01       	movw	r28, r24
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1414:	ff 24       	eor	r15, r15
    1416:	0d c0       	rjmp	.+26     	; 0x1432 <Pipe_ConfigurePipeTable+0x2c>
	{
		if (!(Table[i].Address))
    1418:	88 81       	ld	r24, Y
    141a:	88 23       	and	r24, r24
    141c:	41 f0       	breq	.+16     	; 0x142e <Pipe_ConfigurePipeTable+0x28>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
    141e:	29 81       	ldd	r18, Y+1	; 0x01
    1420:	3a 81       	ldd	r19, Y+2	; 0x02
    1422:	6c 81       	ldd	r22, Y+4	; 0x04
    1424:	4b 81       	ldd	r20, Y+3	; 0x03
    1426:	0d 81       	ldd	r16, Y+5	; 0x05
    1428:	89 df       	rcall	.-238    	; 0x133c <Pipe_ConfigurePipe>
    142a:	88 23       	and	r24, r24
    142c:	31 f0       	breq	.+12     	; 0x143a <Pipe_ConfigurePipeTable+0x34>
    142e:	f3 94       	inc	r15
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1430:	26 96       	adiw	r28, 0x06	; 6
    1432:	f1 16       	cp	r15, r17
    1434:	89 f7       	brne	.-30     	; 0x1418 <Pipe_ConfigurePipeTable+0x12>
    1436:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}
	
	return true;
    1438:	01 c0       	rjmp	.+2      	; 0x143c <Pipe_ConfigurePipeTable+0x36>
    143a:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
    143c:	df 91       	pop	r29
		}
	}
	
	return true;
}
    143e:	cf 91       	pop	r28
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	ff 90       	pop	r15
    1446:	08 95       	ret

00001448 <Pipe_ClearPipes>:
    1448:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    1452:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    1456:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    145a:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    145e:	90 91 a9 00 	lds	r25, 0x00A9
    1462:	9e 7f       	andi	r25, 0xFE	; 254
    1464:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1468:	8f 5f       	subi	r24, 0xFF	; 255
    146a:	87 30       	cpi	r24, 0x07	; 7
    146c:	81 f7       	brne	.-32     	; 0x144e <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    146e:	08 95       	ret

00001470 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1470:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1474:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1478:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    147a:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    147e:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
    1482:	27 ff       	sbrs	r18, 7
    1484:	0c c0       	rjmp	.+24     	; 0x149e <Pipe_IsEndpointBound+0x2e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    1486:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
    148a:	53 2f       	mov	r21, r19
    148c:	5f 70       	andi	r21, 0x0F	; 15
    148e:	30 ff       	sbrs	r19, 0
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <Pipe_IsEndpointBound+0x26>
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	01 c0       	rjmp	.+2      	; 0x1498 <Pipe_IsEndpointBound+0x28>
    1496:	20 e8       	ldi	r18, 0x80	; 128
    1498:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
    149a:	28 17       	cp	r18, r24
    149c:	49 f0       	breq	.+18     	; 0x14b0 <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    149e:	9f 5f       	subi	r25, 0xFF	; 255
    14a0:	97 30       	cpi	r25, 0x07	; 7
    14a2:	59 f7       	brne	.-42     	; 0x147a <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    14a4:	84 2f       	mov	r24, r20
    14a6:	8f 70       	andi	r24, 0x0F	; 15
    14a8:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
    14b2:	08 95       	ret

000014b4 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    14b4:	80 91 a2 00 	lds	r24, 0x00A2
    14b8:	90 91 a3 00 	lds	r25, 0x00A3
    14bc:	45 e6       	ldi	r20, 0x65	; 101
    14be:	01 c0       	rjmp	.+2      	; 0x14c2 <Pipe_WaitUntilReady+0xe>
    14c0:	c9 01       	movw	r24, r18
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    14c2:	20 91 aa 00 	lds	r18, 0x00AA
    14c6:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    14c8:	20 31       	cpi	r18, 0x10	; 16
    14ca:	29 f4       	brne	.+10     	; 0x14d6 <Pipe_WaitUntilReady+0x22>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    14cc:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    14d0:	20 ff       	sbrs	r18, 0
    14d2:	05 c0       	rjmp	.+10     	; 0x14de <Pipe_WaitUntilReady+0x2a>
    14d4:	17 c0       	rjmp	.+46     	; 0x1504 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    14d6:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    14da:	22 fd       	sbrc	r18, 2
    14dc:	13 c0       	rjmp	.+38     	; 0x1504 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    14de:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    14e2:	21 fd       	sbrc	r18, 1
    14e4:	11 c0       	rjmp	.+34     	; 0x1508 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    14e6:	20 91 28 05 	lds	r18, 0x0528
    14ea:	21 30       	cpi	r18, 0x01	; 1
    14ec:	79 f0       	breq	.+30     	; 0x150c <Pipe_WaitUntilReady+0x58>
    14ee:	20 91 a2 00 	lds	r18, 0x00A2
    14f2:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    14f6:	28 17       	cp	r18, r24
    14f8:	39 07       	cpc	r19, r25
    14fa:	19 f3       	breq	.-58     	; 0x14c2 <Pipe_WaitUntilReady+0xe>
    14fc:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    14fe:	01 f7       	brne	.-64     	; 0x14c0 <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_Timeout;
    1500:	83 e0       	ldi	r24, 0x03	; 3
    1502:	08 95       	ret
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    150c:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
    150e:	08 95       	ret

00001510 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1510:	75 d0       	rcall	.+234    	; 0x15fc <USB_INT_DisableAllInterrupts>
    1512:	7c d0       	rcall	.+248    	; 0x160c <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1514:	e0 ee       	ldi	r30, 0xE0	; 224
    1516:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1518:	80 81       	ld	r24, Z
    151a:	81 60       	ori	r24, 0x01	; 1
    151c:	80 83       	st	Z, r24
    151e:	e8 ed       	ldi	r30, 0xD8	; 216
    1520:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1522:	80 81       	ld	r24, Z
    1524:	8f 77       	andi	r24, 0x7F	; 127
    1526:	80 83       	st	Z, r24
    1528:	19 bc       	out	0x29, r1	; 41
    152a:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    152c:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    152e:	8c 91       	ld	r24, X
    1530:	8e 7f       	andi	r24, 0xFE	; 254
    1532:	8c 93       	st	X, r24
    1534:	80 81       	ld	r24, Z
    1536:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1538:	80 83       	st	Z, r24
    153a:	10 92 1f 05 	sts	0x051F, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    153e:	08 95       	ret

00001540 <USB_ResetInterface>:
    1540:	5d d0       	rcall	.+186    	; 0x15fc <USB_INT_DisableAllInterrupts>
}
    1542:	64 d0       	rcall	.+200    	; 0x160c <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    1544:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1548:	8f 77       	andi	r24, 0x7F	; 127
    154a:	80 93 d8 00 	sts	0x00D8, r24
    154e:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    1552:	80 68       	ori	r24, 0x80	; 128
    1554:	80 93 d8 00 	sts	0x00D8, r24
    1558:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    155c:	8f 7d       	andi	r24, 0xDF	; 223
    155e:	80 93 d8 00 	sts	0x00D8, r24
    1562:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    1566:	8f 77       	andi	r24, 0x7F	; 127
    1568:	80 93 d7 00 	sts	0x00D7, r24
    156c:	8c e0       	ldi	r24, 0x0C	; 12
    156e:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1570:	8e e0       	ldi	r24, 0x0E	; 14
    1572:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1574:	09 b4       	in	r0, 0x29	; 41
    1576:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1578:	fd cf       	rjmp	.-6      	; 0x1574 <USB_ResetInterface+0x34>
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	80 93 28 05 	sts	0x0528, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    1580:	10 92 1e 05 	sts	0x051E, r1
	USB_Host_ConfigurationNumber = 0;
    1584:	80 e4       	ldi	r24, 0x40	; 64
    1586:	80 93 27 01 	sts	0x0127, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    158a:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    158e:	80 64       	ori	r24, 0x40	; 64
    1590:	80 93 d8 00 	sts	0x00D8, r24
    1594:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1598:	81 60       	ori	r24, 0x01	; 1
    159a:	80 93 dd 00 	sts	0x00DD, r24
    159e:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    15a2:	84 60       	ori	r24, 0x04	; 4
    15a4:	80 93 dd 00 	sts	0x00DD, r24
    15a8:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
    15ac:	8f 7e       	andi	r24, 0xEF	; 239
    15ae:	80 93 d7 00 	sts	0x00D7, r24
    15b2:	6f 9a       	sbi	0x0d, 7	; 13
    15b4:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
    15b6:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    15ba:	81 60       	ori	r24, 0x01	; 1
    15bc:	80 93 de 00 	sts	0x00DE, r24
    15c0:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    15c4:	84 60       	ori	r24, 0x04	; 4
    15c6:	80 93 de 00 	sts	0x00DE, r24
    15ca:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    15ce:	8e 7f       	andi	r24, 0xFE	; 254
    15d0:	80 93 e0 00 	sts	0x00E0, r24
    15d4:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    15d8:	80 61       	ori	r24, 0x10	; 16
    15da:	80 93 d8 00 	sts	0x00D8, r24
    15de:	08 95       	ret

000015e0 <USB_Init>:
    15e0:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    15e4:	80 81       	ld	r24, Z
    15e6:	8f 7e       	andi	r24, 0xEF	; 239
    15e8:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    15ea:	e7 ed       	ldi	r30, 0xD7	; 215
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	81 60       	ori	r24, 0x01	; 1
    15f2:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	80 93 1f 05 	sts	0x051F, r24

	USB_ResetInterface();
    15fa:	a2 cf       	rjmp	.-188    	; 0x1540 <USB_ResetInterface>

000015fc <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    15fc:	e8 ed       	ldi	r30, 0xD8	; 216
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	8c 7f       	andi	r24, 0xFC	; 252
    1604:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    1606:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    160a:	08 95       	ret

0000160c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    160c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    1610:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    1614:	08 95       	ret

00001616 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1616:	1f 92       	push	r1
    1618:	0f 92       	push	r0
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	0f 92       	push	r0
    161e:	0b b6       	in	r0, 0x3b	; 59
    1620:	0f 92       	push	r0
    1622:	11 24       	eor	r1, r1
    1624:	2f 93       	push	r18
    1626:	3f 93       	push	r19
    1628:	4f 93       	push	r20
    162a:	5f 93       	push	r21
    162c:	6f 93       	push	r22
    162e:	7f 93       	push	r23
    1630:	8f 93       	push	r24
    1632:	9f 93       	push	r25
    1634:	af 93       	push	r26
    1636:	bf 93       	push	r27
    1638:	ef 93       	push	r30
    163a:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    163c:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    1640:	85 ff       	sbrs	r24, 5
    1642:	0a c0       	rjmp	.+20     	; 0x1658 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1644:	80 91 a0 00 	lds	r24, 0x00A0
    1648:	85 ff       	sbrs	r24, 5
    164a:	06 c0       	rjmp	.+12     	; 0x1658 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    164c:	80 91 9f 00 	lds	r24, 0x009F
    1650:	8f 7d       	andi	r24, 0xDF	; 223
    1652:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    1656:	16 d1       	rcall	.+556    	; 0x1884 <USB_Event_Stub>
    1658:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    165c:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    165e:	16 c0       	rjmp	.+44     	; 0x168c <__vector_10+0x76>
    1660:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    1664:	81 ff       	sbrs	r24, 1
    1666:	12 c0       	rjmp	.+36     	; 0x168c <__vector_10+0x76>
    1668:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    166c:	8d 7f       	andi	r24, 0xFD	; 253
    166e:	80 93 9f 00 	sts	0x009F, r24
    1672:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1676:	8e 7f       	andi	r24, 0xFE	; 254
    1678:	80 93 9f 00 	sts	0x009F, r24
    167c:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1680:	8d 7f       	andi	r24, 0xFD	; 253
    1682:	80 93 a0 00 	sts	0x00A0, r24
    1686:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    168a:	5a df       	rcall	.-332    	; 0x1540 <USB_ResetInterface>

		USB_ResetInterface();
    168c:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1690:	81 ff       	sbrs	r24, 1
    1692:	17 c0       	rjmp	.+46     	; 0x16c2 <__vector_10+0xac>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1694:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    1698:	81 ff       	sbrs	r24, 1
    169a:	13 c0       	rjmp	.+38     	; 0x16c2 <__vector_10+0xac>
    169c:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    16a0:	8d 7f       	andi	r24, 0xFD	; 253
    16a2:	80 93 df 00 	sts	0x00DF, r24
    16a6:	77 98       	cbi	0x0e, 7	; 14
    16a8:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    16ac:	81 60       	ori	r24, 0x01	; 1
    16ae:	80 93 dd 00 	sts	0x00DD, r24
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	0e 94 b6 02 	call	0x56c	; 0x56c <EVENT_USB_Host_HostError>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    16b8:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	80 93 28 05 	sts	0x0528, r24

		USB_HostState = HOST_STATE_Unattached;
    16c2:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    16c6:	80 ff       	sbrs	r24, 0
    16c8:	18 c0       	rjmp	.+48     	; 0x16fa <__vector_10+0xe4>
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    16ca:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    16ce:	80 ff       	sbrs	r24, 0
    16d0:	14 c0       	rjmp	.+40     	; 0x16fa <__vector_10+0xe4>
    16d2:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    16d6:	8e 7f       	andi	r24, 0xFE	; 254
    16d8:	80 93 df 00 	sts	0x00DF, r24
    16dc:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    16e0:	8e 7f       	andi	r24, 0xFE	; 254
    16e2:	80 93 de 00 	sts	0x00DE, r24
    16e6:	0e 94 54 02 	call	0x4a8	; 0x4a8 <EVENT_USB_Host_DeviceAttached>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    16ea:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    16ee:	82 60       	ori	r24, 0x02	; 2
    16f0:	80 93 a0 00 	sts	0x00A0, r24
    16f4:	82 e0       	ldi	r24, 0x02	; 2
    16f6:	80 93 28 05 	sts	0x0528, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    16fa:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    16fe:	82 ff       	sbrs	r24, 2
    1700:	10 c0       	rjmp	.+32     	; 0x1722 <__vector_10+0x10c>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1702:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1706:	82 ff       	sbrs	r24, 2
    1708:	0c c0       	rjmp	.+24     	; 0x1722 <__vector_10+0x10c>
    170a:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    170e:	8b 7f       	andi	r24, 0xFB	; 251
    1710:	80 93 df 00 	sts	0x00DF, r24
    1714:	82 e0       	ldi	r24, 0x02	; 2
    1716:	60 e0       	ldi	r22, 0x00	; 0
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1718:	0e 94 d6 02 	call	0x5ac	; 0x5ac <EVENT_USB_Host_DeviceEnumerationFailed>
    171c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    1720:	0f df       	rcall	.-482    	; 0x1540 <USB_ResetInterface>
    1722:	ff 91       	pop	r31

		USB_ResetInterface();
    1724:	ef 91       	pop	r30
    1726:	bf 91       	pop	r27
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1728:	af 91       	pop	r26
    172a:	9f 91       	pop	r25
    172c:	8f 91       	pop	r24
    172e:	7f 91       	pop	r23
    1730:	6f 91       	pop	r22
    1732:	5f 91       	pop	r21
    1734:	4f 91       	pop	r20
    1736:	3f 91       	pop	r19
    1738:	2f 91       	pop	r18
    173a:	0f 90       	pop	r0
    173c:	0b be       	out	0x3b, r0	; 59
    173e:	0f 90       	pop	r0
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	0f 90       	pop	r0
    1744:	1f 90       	pop	r1
    1746:	18 95       	reti

00001748 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1748:	cf 92       	push	r12
    174a:	df 92       	push	r13
    174c:	ef 92       	push	r14
    174e:	ff 92       	push	r15
    1750:	0f 93       	push	r16
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	29 97       	sbiw	r28, 0x09	; 9
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	6b 01       	movw	r12, r22
    176a:	8a 01       	movw	r16, r20
    176c:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    176e:	90 e8       	ldi	r25, 0x80	; 128
    1770:	90 93 20 05 	sts	0x0520, r25
    1774:	96 e0       	ldi	r25, 0x06	; 6
    1776:	90 93 21 05 	sts	0x0521, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1780:	90 93 23 05 	sts	0x0523, r25
    1784:	80 93 22 05 	sts	0x0522, r24
    1788:	10 92 25 05 	sts	0x0525, r1
    178c:	10 92 24 05 	sts	0x0524, r1
    1790:	89 e0       	ldi	r24, 0x09	; 9
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	90 93 27 05 	sts	0x0527, r25
    1798:	80 93 26 05 	sts	0x0526, r24
    179c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    17a0:	ce 01       	movw	r24, r28
    17a2:	01 96       	adiw	r24, 0x01	; 1
    17a4:	98 d0       	rcall	.+304    	; 0x18d6 <USB_Host_SendControlRequest>
    17a6:	88 23       	and	r24, r24
    17a8:	b9 f4       	brne	.+46     	; 0x17d8 <USB_Host_GetDeviceConfigDescriptor+0x90>
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    17ac:	9c 81       	ldd	r25, Y+4	; 0x04
    17ae:	f6 01       	movw	r30, r12
    17b0:	91 83       	std	Z+1, r25	; 0x01
    17b2:	80 83       	st	Z, r24
    17b4:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
    17b6:	f9 06       	cpc	r15, r25
    17b8:	70 f0       	brcs	.+28     	; 0x17d6 <USB_Host_GetDeviceConfigDescriptor+0x8e>
    17ba:	90 93 27 05 	sts	0x0527, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    17be:	80 93 26 05 	sts	0x0526, r24
    17c2:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    17c4:	88 d0       	rcall	.+272    	; 0x18d6 <USB_Host_SendControlRequest>
    17c6:	88 23       	and	r24, r24
    17c8:	39 f4       	brne	.+14     	; 0x17d8 <USB_Host_GetDeviceConfigDescriptor+0x90>
    17ca:	f8 01       	movw	r30, r16
    17cc:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    17ce:	92 30       	cpi	r25, 0x02	; 2
    17d0:	19 f0       	breq	.+6      	; 0x17d8 <USB_Host_GetDeviceConfigDescriptor+0x90>
    17d2:	86 e0       	ldi	r24, 0x06	; 6
    17d4:	01 c0       	rjmp	.+2      	; 0x17d8 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    17d6:	85 e0       	ldi	r24, 0x05	; 5
    17d8:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    17da:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    17dc:	f8 94       	cli
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	cd bf       	out	0x3d, r28	; 61
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	ff 90       	pop	r15
    17ee:	ef 90       	pop	r14
    17f0:	df 90       	pop	r13
    17f2:	cf 90       	pop	r12
    17f4:	08 95       	ret

000017f6 <USB_GetNextDescriptorComp>:
    17f6:	af 92       	push	r10
    17f8:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    17fa:	cf 92       	push	r12
    17fc:	df 92       	push	r13
    17fe:	ef 92       	push	r14
    1800:	ff 92       	push	r15
    1802:	0f 93       	push	r16
    1804:	1f 93       	push	r17
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	7c 01       	movw	r14, r24
    180c:	8b 01       	movw	r16, r22
    180e:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1810:	28 c0       	rjmp	.+80     	; 0x1862 <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1812:	f8 01       	movw	r30, r16
    1814:	c0 80       	ld	r12, Z
    1816:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1818:	f6 01       	movw	r30, r12
    181a:	80 81       	ld	r24, Z
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	9e 01       	movw	r18, r28
    1820:	8c 17       	cp	r24, r28
    1822:	9d 07       	cpc	r25, r29
    1824:	08 f4       	brcc	.+2      	; 0x1828 <USB_GetNextDescriptorComp+0x32>
    1826:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1828:	c6 01       	movw	r24, r12
    182a:	82 0f       	add	r24, r18
    182c:	93 1f       	adc	r25, r19
    182e:	f8 01       	movw	r30, r16
    1830:	91 83       	std	Z+1, r25	; 0x01
    1832:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
    1834:	f7 01       	movw	r30, r14
    1836:	80 81       	ld	r24, Z
    1838:	91 81       	ldd	r25, Z+1	; 0x01
    183a:	82 1b       	sub	r24, r18
    183c:	93 0b       	sbc	r25, r19
    183e:	91 83       	std	Z+1, r25	; 0x01
    1840:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1842:	f8 01       	movw	r30, r16
    1844:	80 81       	ld	r24, Z
    1846:	91 81       	ldd	r25, Z+1	; 0x01
    1848:	f5 01       	movw	r30, r10
    184a:	09 95       	icall
    184c:	82 30       	cpi	r24, 0x02	; 2
    184e:	49 f0       	breq	.+18     	; 0x1862 <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1850:	81 30       	cpi	r24, 0x01	; 1
    1852:	69 f4       	brne	.+26     	; 0x186e <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
    1854:	f8 01       	movw	r30, r16
    1856:	d1 82       	std	Z+1, r13	; 0x01
    1858:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
    185a:	f7 01       	movw	r30, r14
    185c:	d1 83       	std	Z+1, r29	; 0x01
    185e:	c0 83       	st	Z, r28
    1860:	06 c0       	rjmp	.+12     	; 0x186e <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1862:	f7 01       	movw	r30, r14
    1864:	c0 81       	ld	r28, Z
    1866:	d1 81       	ldd	r29, Z+1	; 0x01
    1868:	20 97       	sbiw	r28, 0x00	; 0
    186a:	99 f6       	brne	.-90     	; 0x1812 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    186c:	82 e0       	ldi	r24, 0x02	; 2
}
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	1f 91       	pop	r17
    1874:	0f 91       	pop	r16
    1876:	ff 90       	pop	r15
    1878:	ef 90       	pop	r14
    187a:	df 90       	pop	r13
    187c:	cf 90       	pop	r12
    187e:	bf 90       	pop	r11
    1880:	af 90       	pop	r10
    1882:	08 95       	ret

00001884 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1884:	08 95       	ret

00001886 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1886:	1f 93       	push	r17
    1888:	cf 93       	push	r28
    188a:	df 93       	push	r29
    188c:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    188e:	c9 ee       	ldi	r28, 0xE9	; 233
    1890:	d3 e0       	ldi	r29, 0x03	; 3
    1892:	06 c0       	rjmp	.+12     	; 0x18a0 <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	7d db       	rcall	.-2310   	; 0xf92 <USB_Host_WaitMS>
    1898:	88 23       	and	r24, r24
    189a:	c9 f4       	brne	.+50     	; 0x18ce <USB_Host_WaitForIOS+0x48>
    189c:	21 97       	sbiw	r28, 0x01	; 1
    189e:	b1 f0       	breq	.+44     	; 0x18cc <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    18a0:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    18a2:	29 f4       	brne	.+10     	; 0x18ae <USB_Host_WaitForIOS+0x28>
    18a4:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    18a8:	83 ff       	sbrs	r24, 3
    18aa:	f4 cf       	rjmp	.-24     	; 0x1894 <USB_Host_WaitForIOS+0xe>
    18ac:	0d c0       	rjmp	.+26     	; 0x18c8 <USB_Host_WaitForIOS+0x42>
    18ae:	11 30       	cpi	r17, 0x01	; 1
    18b0:	29 f4       	brne	.+10     	; 0x18bc <USB_Host_WaitForIOS+0x36>
    18b2:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    18b6:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    18b8:	ed cf       	rjmp	.-38     	; 0x1894 <USB_Host_WaitForIOS+0xe>
    18ba:	06 c0       	rjmp	.+12     	; 0x18c8 <USB_Host_WaitForIOS+0x42>
    18bc:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    18be:	51 f7       	brne	.-44     	; 0x1894 <USB_Host_WaitForIOS+0xe>
    18c0:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    18c4:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    18c6:	e6 cf       	rjmp	.-52     	; 0x1894 <USB_Host_WaitForIOS+0xe>
    18c8:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    18ca:	01 c0       	rjmp	.+2      	; 0x18ce <USB_Host_WaitForIOS+0x48>
    18cc:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    18ce:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
    18d0:	cf 91       	pop	r28
    18d2:	1f 91       	pop	r17
    18d4:	08 95       	ret

000018d6 <USB_Host_SendControlRequest>:
    18d6:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    18d8:	ff 92       	push	r15
    18da:	0f 93       	push	r16
    18dc:	1f 93       	push	r17
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
    18e2:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    18e4:	e0 90 9e 00 	lds	r14, 0x009E
    18e8:	ff 24       	eor	r15, r15
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	e8 22       	and	r14, r24
    18ee:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    18f0:	00 91 26 05 	lds	r16, 0x0526
    18f4:	10 91 27 05 	lds	r17, 0x0527
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    18f8:	80 91 9e 00 	lds	r24, 0x009E
    18fc:	81 60       	ori	r24, 0x01	; 1
    18fe:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	46 db       	rcall	.-2420   	; 0xf92 <USB_Host_WaitMS>
    1906:	88 23       	and	r24, r24
    1908:	09 f0       	breq	.+2      	; 0x190c <USB_Host_SendControlRequest+0x36>
    190a:	ca c0       	rjmp	.+404    	; 0x1aa0 <USB_Host_SendControlRequest+0x1ca>
    190c:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1910:	8f 7c       	andi	r24, 0xCF	; 207
    1912:	80 93 aa 00 	sts	0x00AA, r24
    1916:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    191a:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    191e:	8f 7e       	andi	r24, 0xEF	; 239
    1920:	80 93 a6 00 	sts	0x00A6, r24
    1924:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1928:	8f 7b       	andi	r24, 0xBF	; 191
    192a:	80 93 a9 00 	sts	0x00A9, r24
    192e:	88 e0       	ldi	r24, 0x08	; 8
    1930:	e0 e2       	ldi	r30, 0x20	; 32
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1932:	f5 e0       	ldi	r31, 0x05	; 5
    1934:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1936:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    193a:	81 50       	subi	r24, 0x01	; 1
    193c:	d9 f7       	brne	.-10     	; 0x1934 <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    193e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1942:	87 77       	andi	r24, 0x77	; 119
    1944:	80 93 a6 00 	sts	0x00A6, r24
    1948:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    194a:	9d df       	rcall	.-198    	; 0x1886 <USB_Host_WaitForIOS>
    194c:	88 23       	and	r24, r24
    194e:	09 f0       	breq	.+2      	; 0x1952 <USB_Host_SendControlRequest+0x7c>
    1950:	a7 c0       	rjmp	.+334    	; 0x1aa0 <USB_Host_SendControlRequest+0x1ca>
    1952:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1956:	80 64       	ori	r24, 0x40	; 64
    1958:	80 93 a9 00 	sts	0x00A9, r24
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	19 db       	rcall	.-2510   	; 0xf92 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1960:	88 23       	and	r24, r24
    1962:	09 f0       	breq	.+2      	; 0x1966 <USB_Host_SendControlRequest+0x90>
    1964:	9d c0       	rjmp	.+314    	; 0x1aa0 <USB_Host_SendControlRequest+0x1ca>
    1966:	80 91 20 05 	lds	r24, 0x0520
    196a:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    196c:	4f c0       	rjmp	.+158    	; 0x1a0c <USB_Host_SendControlRequest+0x136>
    196e:	80 91 aa 00 	lds	r24, 0x00AA
    1972:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1974:	80 61       	ori	r24, 0x10	; 16
    1976:	80 93 aa 00 	sts	0x00AA, r24
    197a:	20 97       	sbiw	r28, 0x00	; 0
    197c:	61 f5       	brne	.+88     	; 0x19d6 <USB_Host_SendControlRequest+0x100>
    197e:	2e c0       	rjmp	.+92     	; 0x19dc <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1980:	80 91 a9 00 	lds	r24, 0x00A9
    1984:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1986:	80 93 a9 00 	sts	0x00A9, r24
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	7c df       	rcall	.-264    	; 0x1886 <USB_Host_WaitForIOS>
    198e:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1990:	09 f0       	breq	.+2      	; 0x1994 <USB_Host_SendControlRequest+0xbe>
    1992:	86 c0       	rjmp	.+268    	; 0x1aa0 <USB_Host_SendControlRequest+0x1ca>
    1994:	80 91 f6 00 	lds	r24, 0x00F6
    1998:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	41 f4       	brne	.+16     	; 0x19b0 <USB_Host_SendControlRequest+0xda>
    19a0:	00 e0       	ldi	r16, 0x00	; 0
    19a2:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    19a4:	05 c0       	rjmp	.+10     	; 0x19b0 <USB_Host_SendControlRequest+0xda>
    19a6:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
    19aa:	89 93       	st	Y+, r24
    19ac:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    19ae:	10 40       	sbci	r17, 0x00	; 0
    19b0:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
    19b4:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	19 f0       	breq	.+6      	; 0x19c2 <USB_Host_SendControlRequest+0xec>
    19bc:	01 15       	cp	r16, r1
    19be:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    19c0:	91 f7       	brne	.-28     	; 0x19a6 <USB_Host_SendControlRequest+0xd0>
    19c2:	80 91 a9 00 	lds	r24, 0x00A9
    19c6:	80 64       	ori	r24, 0x40	; 64
    19c8:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    19cc:	80 91 a6 00 	lds	r24, 0x00A6
    19d0:	8e 77       	andi	r24, 0x7E	; 126
    19d2:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    19d6:	01 15       	cp	r16, r1
    19d8:	11 05       	cpc	r17, r1
    19da:	91 f6       	brne	.-92     	; 0x1980 <USB_Host_SendControlRequest+0xaa>
    19dc:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    19e0:	8f 7c       	andi	r24, 0xCF	; 207
    19e2:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    19e4:	80 93 aa 00 	sts	0x00AA, r24
    19e8:	80 91 a9 00 	lds	r24, 0x00A9
    19ec:	8f 7b       	andi	r24, 0xBF	; 191
    19ee:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    19f2:	82 e0       	ldi	r24, 0x02	; 2
    19f4:	48 df       	rcall	.-368    	; 0x1886 <USB_Host_WaitForIOS>
    19f6:	88 23       	and	r24, r24
    19f8:	09 f0       	breq	.+2      	; 0x19fc <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    19fa:	52 c0       	rjmp	.+164    	; 0x1aa0 <USB_Host_SendControlRequest+0x1ca>
    19fc:	80 91 a6 00 	lds	r24, 0x00A6
    1a00:	8b 77       	andi	r24, 0x7B	; 123
    1a02:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1a06:	82 e0       	ldi	r24, 0x02	; 2
    1a08:	3e df       	rcall	.-388    	; 0x1886 <USB_Host_WaitForIOS>
    1a0a:	4a c0       	rjmp	.+148    	; 0x1aa0 <USB_Host_SendControlRequest+0x1ca>
    1a0c:	20 97       	sbiw	r28, 0x00	; 0
    1a0e:	a1 f1       	breq	.+104    	; 0x1a78 <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a10:	80 91 aa 00 	lds	r24, 0x00AA
    1a14:	8f 7c       	andi	r24, 0xCF	; 207
    1a16:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1a18:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1a1c:	80 91 a9 00 	lds	r24, 0x00A9
    1a20:	8f 7b       	andi	r24, 0xBF	; 191
    1a22:	80 93 a9 00 	sts	0x00A9, r24
    1a26:	1c c0       	rjmp	.+56     	; 0x1a60 <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1a28:	2e df       	rcall	.-420    	; 0x1886 <USB_Host_WaitForIOS>
    1a2a:	88 23       	and	r24, r24
    1a2c:	c9 f5       	brne	.+114    	; 0x1aa0 <USB_Host_SendControlRequest+0x1ca>
    1a2e:	fe 01       	movw	r30, r28
    1a30:	07 c0       	rjmp	.+14     	; 0x1a40 <USB_Host_SendControlRequest+0x16a>
    1a32:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a34:	ef 01       	movw	r28, r30
    1a36:	80 93 af 00 	sts	0x00AF, r24
    1a3a:	01 50       	subi	r16, 0x01	; 1
    1a3c:	10 40       	sbci	r17, 0x00	; 0
    1a3e:	59 f0       	breq	.+22     	; 0x1a56 <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1a40:	ef 01       	movw	r28, r30
    1a42:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1a46:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    1a4a:	80 91 27 01 	lds	r24, 0x0127
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1a50:	28 17       	cp	r18, r24
    1a52:	39 07       	cpc	r19, r25
    1a54:	70 f3       	brcs	.-36     	; 0x1a32 <USB_Host_SendControlRequest+0x15c>
    1a56:	80 91 a6 00 	lds	r24, 0x00A6
    1a5a:	8b 77       	andi	r24, 0x7B	; 123
    1a5c:	80 93 a6 00 	sts	0x00A6, r24
    1a60:	82 e0       	ldi	r24, 0x02	; 2
    1a62:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1a64:	11 05       	cpc	r17, r1
    1a66:	01 f7       	brne	.-64     	; 0x1a28 <USB_Host_SendControlRequest+0x152>
    1a68:	0e df       	rcall	.-484    	; 0x1886 <USB_Host_WaitForIOS>
    1a6a:	88 23       	and	r24, r24
    1a6c:	c9 f4       	brne	.+50     	; 0x1aa0 <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a6e:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1a72:	80 64       	ori	r24, 0x40	; 64
    1a74:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a78:	80 91 aa 00 	lds	r24, 0x00AA
    1a7c:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1a7e:	80 61       	ori	r24, 0x10	; 16
    1a80:	80 93 aa 00 	sts	0x00AA, r24
    1a84:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1a88:	8f 7b       	andi	r24, 0xBF	; 191
    1a8a:	80 93 a9 00 	sts	0x00A9, r24
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	fa de       	rcall	.-524    	; 0x1886 <USB_Host_WaitForIOS>
    1a92:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1a94:	29 f4       	brne	.+10     	; 0x1aa0 <USB_Host_SendControlRequest+0x1ca>
    1a96:	90 91 a6 00 	lds	r25, 0x00A6
    1a9a:	9e 77       	andi	r25, 0x7E	; 126
    1a9c:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1aa0:	90 91 a9 00 	lds	r25, 0x00A9
    1aa4:	90 64       	ori	r25, 0x40	; 64
    1aa6:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1aaa:	e1 14       	cp	r14, r1
    1aac:	f1 04       	cpc	r15, r1
    1aae:	29 f4       	brne	.+10     	; 0x1aba <USB_Host_SendControlRequest+0x1e4>
    1ab0:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1ab4:	9e 7f       	andi	r25, 0xFE	; 254
    1ab6:	90 93 9e 00 	sts	0x009E, r25
    1aba:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1abc:	90 93 a8 00 	sts	0x00A8, r25
    1ac0:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	08 95       	ret

00001ad2 <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    1ad2:	cf 93       	push	r28
    1ad4:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1ad6:	10 92 20 05 	sts	0x0520, r1
    1ada:	89 e0       	ldi	r24, 0x09	; 9
    1adc:	80 93 21 05 	sts	0x0521, r24
    1ae0:	c0 93 22 05 	sts	0x0522, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1ae4:	10 92 23 05 	sts	0x0523, r1
    1ae8:	10 92 25 05 	sts	0x0525, r1
    1aec:	10 92 24 05 	sts	0x0524, r1
    1af0:	10 92 27 05 	sts	0x0527, r1
    1af4:	10 92 26 05 	sts	0x0526, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1af8:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	ea de       	rcall	.-556    	; 0x18d6 <USB_Host_SendControlRequest>
    1b02:	88 23       	and	r24, r24
    1b04:	49 f4       	brne	.+18     	; 0x1b18 <USB_Host_SetDeviceConfiguration+0x46>
    1b06:	c0 93 1e 05 	sts	0x051E, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1b0a:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1b0c:	11 f0       	breq	.+4      	; 0x1b12 <USB_Host_SetDeviceConfiguration+0x40>
    1b0e:	9b e0       	ldi	r25, 0x0B	; 11
    1b10:	01 c0       	rjmp	.+2      	; 0x1b14 <USB_Host_SetDeviceConfiguration+0x42>
    1b12:	9a e0       	ldi	r25, 0x0A	; 10
    1b14:	90 93 28 05 	sts	0x0528, r25
    1b18:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1b1a:	08 95       	ret

00001b1c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1b1c:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1b1e:	c0 91 a7 00 	lds	r28, 0x00A7
    1b22:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1b24:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1b28:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1b2c:	87 da       	rcall	.-2802   	; 0x103c <USB_Host_ProcessNextHostState>
    1b2e:	c0 93 a7 00 	sts	0x00A7, r28
    1b32:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1b34:	08 95       	ret

00001b36 <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    1b36:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1b38:	81 81       	ldd	r24, Z+1	; 0x01
    1b3a:	84 30       	cpi	r24, 0x04	; 4
    1b3c:	19 f4       	brne	.+6      	; 0x1b44 <DCOMP_HID_Host_NextHIDInterface+0xe>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    1b3e:	85 81       	ldd	r24, Z+5	; 0x05
    1b40:	83 30       	cpi	r24, 0x03	; 3
    1b42:	11 f0       	breq	.+4      	; 0x1b48 <DCOMP_HID_Host_NextHIDInterface+0x12>
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1b44:	82 e0       	ldi	r24, 0x02	; 2
    1b46:	08 95       	ret
	if (Header->Type == DTYPE_Interface)
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
		  return DESCRIPTOR_SEARCH_Found;
    1b48:	80 e0       	ldi	r24, 0x00	; 0
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1b4a:	08 95       	ret

00001b4c <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	81 81       	ldd	r24, Z+1	; 0x01
    1b50:	81 32       	cpi	r24, 0x21	; 33
    1b52:	21 f0       	breq	.+8      	; 0x1b5c <DCOMP_HID_Host_NextHIDDescriptor+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    1b54:	84 30       	cpi	r24, 0x04	; 4
    1b56:	21 f4       	brne	.+8      	; 0x1b60 <DCOMP_HID_Host_NextHIDDescriptor+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	08 95       	ret
static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
    1b60:	82 e0       	ldi	r24, 0x02	; 2
}
    1b62:	08 95       	ret

00001b64 <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    1b64:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1b66:	81 81       	ldd	r24, Z+1	; 0x01
    1b68:	85 30       	cpi	r24, 0x05	; 5
    1b6a:	29 f4       	brne	.+10     	; 0x1b76 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1b6c:	82 81       	ldd	r24, Z+2	; 0x02
    1b6e:	80 dc       	rcall	.-1792   	; 0x1470 <Pipe_IsEndpointBound>
    1b70:	88 23       	and	r24, r24
    1b72:	19 f4       	brne	.+6      	; 0x1b7a <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x16>
    1b74:	04 c0       	rjmp	.+8      	; 0x1b7e <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1a>
    1b76:	84 30       	cpi	r24, 0x04	; 4
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1b78:	21 f0       	breq	.+8      	; 0x1b82 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1e>
    1b7a:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1b7c:	08 95       	ret
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
    1b80:	08 95       	ret
    1b82:	81 e0       	ldi	r24, 0x01	; 1
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    1b84:	08 95       	ret

00001b86 <HID_Host_ConfigurePipes>:
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1b86:	8f 92       	push	r8
#include "HIDClassHost.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    1b88:	9f 92       	push	r9
    1b8a:	af 92       	push	r10
    1b8c:	bf 92       	push	r11
    1b8e:	cf 92       	push	r12
    1b90:	df 92       	push	r13
    1b92:	ef 92       	push	r14
    1b94:	ff 92       	push	r15
    1b96:	0f 93       	push	r16
    1b98:	1f 93       	push	r17
    1b9a:	cf 93       	push	r28
    1b9c:	df 93       	push	r29
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <HID_Host_ConfigurePipes+0x1a>
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <HID_Host_ConfigurePipes+0x1c>
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	8c 01       	movw	r16, r24
    1ba8:	7a 83       	std	Y+2, r23	; 0x02
    1baa:	69 83       	std	Y+1, r22	; 0x01
    1bac:	5c 83       	std	Y+4, r21	; 0x04
    1bae:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1bb0:	0f 96       	adiw	r24, 0x0f	; 15
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	88 e0       	ldi	r24, 0x08	; 8
    1bb6:	df 01       	movw	r26, r30
    1bb8:	1d 92       	st	X+, r1
    1bba:	8a 95       	dec	r24
    1bbc:	e9 f7       	brne	.-6      	; 0x1bb8 <HID_Host_ConfigurePipes+0x32>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1bbe:	eb 81       	ldd	r30, Y+3	; 0x03
    1bc0:	fc 81       	ldd	r31, Y+4	; 0x04
    1bc2:	81 81       	ldd	r24, Z+1	; 0x01
    1bc4:	82 30       	cpi	r24, 0x02	; 2
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <HID_Host_ConfigurePipes+0x44>
    1bc8:	97 c0       	rjmp	.+302    	; 0x1cf8 <HID_Host_ConfigurePipes+0x172>
    1bca:	88 24       	eor	r8, r8
    1bcc:	99 24       	eor	r9, r9
    1bce:	aa 24       	eor	r10, r10
    1bd0:	bb 24       	eor	r11, r11
    1bd2:	ee 24       	eor	r14, r14
    1bd4:	ff 24       	eor	r15, r15
    1bd6:	cc 24       	eor	r12, r12
    1bd8:	dd 24       	eor	r13, r13
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1bda:	a1 14       	cp	r10, r1
    1bdc:	b1 04       	cpc	r11, r1
    1bde:	51 f0       	breq	.+20     	; 0x1bf4 <HID_Host_ConfigurePipes+0x6e>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1be0:	ce 01       	movw	r24, r28
    1be2:	01 96       	adiw	r24, 0x01	; 1
    1be4:	be 01       	movw	r22, r28
    1be6:	6d 5f       	subi	r22, 0xFD	; 253
    1be8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bea:	42 eb       	ldi	r20, 0xB2	; 178
    1bec:	5d e0       	ldi	r21, 0x0D	; 13
    1bee:	03 de       	rcall	.-1018   	; 0x17f6 <USB_GetNextDescriptorComp>
    1bf0:	88 23       	and	r24, r24
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1bf2:	51 f1       	breq	.+84     	; 0x1c48 <HID_Host_ConfigurePipes+0xc2>
    1bf4:	c1 14       	cp	r12, r1
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint)
    1bf6:	d1 04       	cpc	r13, r1
    1bf8:	b9 f5       	brne	.+110    	; 0x1c68 <HID_Host_ConfigurePipes+0xe2>
    1bfa:	ce 01       	movw	r24, r28
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1bfc:	01 96       	adiw	r24, 0x01	; 1
    1bfe:	be 01       	movw	r22, r28
    1c00:	6d 5f       	subi	r22, 0xFD	; 253
    1c02:	7f 4f       	sbci	r23, 0xFF	; 255
    1c04:	4b e9       	ldi	r20, 0x9B	; 155
    1c06:	5d e0       	ldi	r21, 0x0D	; 13
    1c08:	f6 dd       	rcall	.-1044   	; 0x17f6 <USB_GetNextDescriptorComp>
    1c0a:	88 23       	and	r24, r24
    1c0c:	09 f0       	breq	.+2      	; 0x1c10 <HID_Host_ConfigurePipes+0x8a>
    1c0e:	76 c0       	rjmp	.+236    	; 0x1cfc <HID_Host_ConfigurePipes+0x176>
    1c10:	ab 80       	ldd	r10, Y+3	; 0x03
    1c12:	bc 80       	ldd	r11, Y+4	; 0x04
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1c14:	f8 01       	movw	r30, r16
    1c16:	84 85       	ldd	r24, Z+12	; 0x0c
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1c18:	88 23       	and	r24, r24
    1c1a:	31 f0       	breq	.+12     	; 0x1c28 <HID_Host_ConfigurePipes+0xa2>
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    1c1c:	d5 01       	movw	r26, r10
    1c1e:	17 96       	adiw	r26, 0x07	; 7
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1c20:	9c 91       	ld	r25, X
    1c22:	17 97       	sbiw	r26, 0x07	; 7
    1c24:	98 17       	cp	r25, r24
    1c26:	49 f7       	brne	.-46     	; 0x1bfa <HID_Host_ConfigurePipes+0x74>
    1c28:	ce 01       	movw	r24, r28
    1c2a:	01 96       	adiw	r24, 0x01	; 1
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1c2c:	be 01       	movw	r22, r28
    1c2e:	6d 5f       	subi	r22, 0xFD	; 253
    1c30:	7f 4f       	sbci	r23, 0xFF	; 255
    1c32:	46 ea       	ldi	r20, 0xA6	; 166
    1c34:	5d e0       	ldi	r21, 0x0D	; 13
    1c36:	df dd       	rcall	.-1090   	; 0x17f6 <USB_GetNextDescriptorComp>
    1c38:	88 23       	and	r24, r24
    1c3a:	09 f0       	breq	.+2      	; 0x1c3e <HID_Host_ConfigurePipes+0xb8>
    1c3c:	5f c0       	rjmp	.+190    	; 0x1cfc <HID_Host_ConfigurePipes+0x176>
    1c3e:	8b 80       	ldd	r8, Y+3	; 0x03
    1c40:	9c 80       	ldd	r9, Y+4	; 0x04
    1c42:	ee 24       	eor	r14, r14
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    1c44:	ff 24       	eor	r15, r15
    1c46:	c9 cf       	rjmp	.-110    	; 0x1bda <HID_Host_ConfigurePipes+0x54>

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    1c48:	eb 81       	ldd	r30, Y+3	; 0x03
    1c4a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c4c:	82 81       	ldd	r24, Z+2	; 0x02

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1c4e:	87 ff       	sbrs	r24, 7
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <HID_Host_ConfigurePipes+0xd0>

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1c52:	6f 01       	movw	r12, r30
    1c54:	01 c0       	rjmp	.+2      	; 0x1c58 <HID_Host_ConfigurePipes+0xd2>
    1c56:	7f 01       	movw	r14, r30
		  DataINEndpoint  = EndpointData;
    1c58:	c1 14       	cp	r12, r1
    1c5a:	d1 04       	cpc	r13, r1
		else
		  DataOUTEndpoint = EndpointData;
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <HID_Host_ConfigurePipes+0xda>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1c5e:	bd cf       	rjmp	.-134    	; 0x1bda <HID_Host_ConfigurePipes+0x54>
    1c60:	e1 14       	cp	r14, r1
    1c62:	f1 04       	cpc	r15, r1
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <HID_Host_ConfigurePipes+0xe2>
    1c66:	b9 cf       	rjmp	.-142    	; 0x1bda <HID_Host_ConfigurePipes+0x54>
    1c68:	f6 01       	movw	r30, r12
    1c6a:	84 81       	ldd	r24, Z+4	; 0x04
    1c6c:	95 81       	ldd	r25, Z+5	; 0x05
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	HIDInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    1c6e:	d8 01       	movw	r26, r16
    1c70:	12 96       	adiw	r26, 0x02	; 2
    1c72:	9c 93       	st	X, r25
    1c74:	8e 93       	st	-X, r24
    1c76:	11 97       	sbiw	r26, 0x01	; 1
    1c78:	82 81       	ldd	r24, Z+2	; 0x02
    1c7a:	13 96       	adiw	r26, 0x03	; 3
    1c7c:	8c 93       	st	X, r24
	HIDInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1c7e:	13 97       	sbiw	r26, 0x03	; 3
    1c80:	83 e0       	ldi	r24, 0x03	; 3
    1c82:	c8 2e       	mov	r12, r24
    1c84:	14 96       	adiw	r26, 0x04	; 4
	HIDInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_INTERRUPT;
    1c86:	cc 92       	st	X, r12
    1c88:	c8 01       	movw	r24, r16
    1c8a:	61 e0       	ldi	r22, 0x01	; 1
    1c8c:	bc db       	rcall	.-2184   	; 0x1406 <Pipe_ConfigurePipeTable>

	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
    1c8e:	88 23       	and	r24, r24
    1c90:	b9 f1       	breq	.+110    	; 0x1d00 <HID_Host_ConfigurePipes+0x17a>
    1c92:	e1 14       	cp	r14, r1
    1c94:	f1 04       	cpc	r15, r1
    1c96:	a1 f0       	breq	.+40     	; 0x1cc0 <HID_Host_ConfigurePipes+0x13a>
    1c98:	f7 01       	movw	r30, r14
	  return false;

	if (DataOUTEndpoint)
    1c9a:	84 81       	ldd	r24, Z+4	; 0x04
    1c9c:	95 81       	ldd	r25, Z+5	; 0x05
    1c9e:	d8 01       	movw	r26, r16
	{
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1ca0:	18 96       	adiw	r26, 0x08	; 8
    1ca2:	9c 93       	st	X, r25
    1ca4:	8e 93       	st	-X, r24
    1ca6:	17 97       	sbiw	r26, 0x07	; 7
    1ca8:	82 81       	ldd	r24, Z+2	; 0x02
    1caa:	19 96       	adiw	r26, 0x09	; 9
    1cac:	8c 93       	st	X, r24
    1cae:	19 97       	sbiw	r26, 0x09	; 9
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1cb0:	1a 96       	adiw	r26, 0x0a	; 10
    1cb2:	cc 92       	st	X, r12
    1cb4:	c8 01       	movw	r24, r16
    1cb6:	06 96       	adiw	r24, 0x06	; 6
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;
    1cb8:	61 e0       	ldi	r22, 0x01	; 1
    1cba:	a5 db       	rcall	.-2230   	; 0x1406 <Pipe_ConfigurePipeTable>

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
    1cbc:	88 23       	and	r24, r24
    1cbe:	01 f1       	breq	.+64     	; 0x1d00 <HID_Host_ConfigurePipes+0x17a>
    1cc0:	f5 01       	movw	r30, r10
    1cc2:	82 81       	ldd	r24, Z+2	; 0x02
    1cc4:	d8 01       	movw	r26, r16
    1cc6:	50 96       	adiw	r26, 0x10	; 16
    1cc8:	8c 93       	st	X, r24
		  return false;
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    1cca:	50 97       	sbiw	r26, 0x10	; 16
    1ccc:	f4 01       	movw	r30, r8
    1cce:	87 81       	ldd	r24, Z+7	; 0x07
    1cd0:	90 85       	ldd	r25, Z+8	; 0x08
    1cd2:	55 96       	adiw	r26, 0x15	; 21
    1cd4:	9c 93       	st	X, r25
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    1cd6:	8e 93       	st	-X, r24
    1cd8:	54 97       	sbiw	r26, 0x14	; 20
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	d5 01       	movw	r26, r10
    1cde:	16 96       	adiw	r26, 0x06	; 6
    1ce0:	9c 91       	ld	r25, X
    1ce2:	16 97       	sbiw	r26, 0x06	; 6
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    1ce4:	99 23       	and	r25, r25
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <HID_Host_ConfigurePipes+0x164>
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	f8 01       	movw	r30, r16
    1cec:	81 8b       	std	Z+17, r24	; 0x11
    1cee:	88 e0       	ldi	r24, 0x08	; 8
    1cf0:	86 8b       	std	Z+22, r24	; 0x16
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	87 87       	std	Z+15, r24	; 0x0f
    1cf6:	04 c0       	rjmp	.+8      	; 0x1d00 <HID_Host_ConfigurePipes+0x17a>
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	03 c0       	rjmp	.+6      	; 0x1d02 <HID_Host_ConfigurePipes+0x17c>
	HIDInterfaceInfo->State.IsActive             = true;
    1cfc:	82 e0       	ldi	r24, 0x02	; 2
    1cfe:	01 c0       	rjmp	.+2      	; 0x1d02 <HID_Host_ConfigurePipes+0x17c>
    1d00:	80 e0       	ldi	r24, 0x00	; 0
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
		  return false;
    1d0a:	df 91       	pop	r29
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
	HIDInterfaceInfo->State.LargestReportSize    = 8;
	HIDInterfaceInfo->State.IsActive             = true;

	return HID_ENUMERROR_NoError;
}
    1d0c:	cf 91       	pop	r28
    1d0e:	1f 91       	pop	r17
    1d10:	0f 91       	pop	r16
    1d12:	ff 90       	pop	r15
    1d14:	ef 90       	pop	r14
    1d16:	df 90       	pop	r13
    1d18:	cf 90       	pop	r12
    1d1a:	bf 90       	pop	r11
    1d1c:	af 90       	pop	r10
    1d1e:	9f 90       	pop	r9
    1d20:	8f 90       	pop	r8
    1d22:	08 95       	ret

00001d24 <HID_Host_ReceiveReport>:
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29
    1d28:	fc 01       	movw	r30, r24
    1d2a:	80 91 28 05 	lds	r24, 0x0528
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1d2e:	8b 30       	cpi	r24, 0x0B	; 11
    1d30:	d9 f5       	brne	.+118    	; 0x1da8 <HID_Host_ReceiveReport+0x84>
    1d32:	87 85       	ldd	r24, Z+15	; 0x0f
    1d34:	88 23       	and	r24, r24
    1d36:	c1 f1       	breq	.+112    	; 0x1da8 <HID_Host_ReceiveReport+0x84>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1d38:	80 81       	ld	r24, Z
    1d3a:	8f 70       	andi	r24, 0x0F	; 15
    1d3c:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1d40:	80 91 a9 00 	lds	r24, 0x00A9
    1d44:	8f 7b       	andi	r24, 0xBF	; 191
    1d46:	80 93 a9 00 	sts	0x00A9, r24

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    1d4a:	83 89       	ldd	r24, Z+19	; 0x13
    1d4c:	88 23       	and	r24, r24
    1d4e:	a9 f4       	brne	.+42     	; 0x1d7a <HID_Host_ReceiveReport+0x56>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    1d50:	a5 85       	ldd	r26, Z+13	; 0x0d
    1d52:	b6 85       	ldd	r27, Z+14	; 0x0e
    1d54:	a8 52       	subi	r26, 0x28	; 40
    1d56:	bc 4f       	sbci	r27, 0xFC	; 252
    1d58:	8c 91       	ld	r24, X
    1d5a:	88 23       	and	r24, r24
    1d5c:	29 f0       	breq	.+10     	; 0x1d68 <HID_Host_ReceiveReport+0x44>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1d5e:	20 91 af 00 	lds	r18, 0x00AF
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
    1d62:	eb 01       	movw	r28, r22
    1d64:	29 93       	st	Y+, r18
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <HID_Host_ReceiveReport+0x48>

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    1d68:	eb 01       	movw	r28, r22

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
	{
		uint8_t ReportID = 0;
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    1d6c:	85 85       	ldd	r24, Z+13	; 0x0d
    1d6e:	96 85       	ldd	r25, Z+14	; 0x0e
    1d70:	62 2f       	mov	r22, r18
    1d72:	40 e0       	ldi	r20, 0x00	; 0
    1d74:	88 d8       	rcall	.-3824   	; 0xe86 <USB_GetHIDReportSize>
    1d76:	9c 01       	movw	r18, r24
    1d78:	05 c0       	rjmp	.+10     	; 0x1d84 <HID_Host_ReceiveReport+0x60>
    1d7a:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1d7e:	30 91 f7 00 	lds	r19, 0x00F7
    1d82:	eb 01       	movw	r28, r22

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    1d84:	ce 01       	movw	r24, r28
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NULL)) != PIPE_RWSTREAM_NoError)
    1d86:	b9 01       	movw	r22, r18
    1d88:	40 e0       	ldi	r20, 0x00	; 0
    1d8a:	50 e0       	ldi	r21, 0x00	; 0
    1d8c:	80 da       	rcall	.-2816   	; 0x128e <Pipe_Read_Stream_LE>
    1d8e:	88 23       	and	r24, r24
    1d90:	61 f4       	brne	.+24     	; 0x1daa <HID_Host_ReceiveReport+0x86>
    1d92:	90 91 a6 00 	lds	r25, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1d96:	9e 77       	andi	r25, 0x7E	; 126
    1d98:	90 93 a6 00 	sts	0x00A6, r25
    1d9c:	90 91 a9 00 	lds	r25, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1da0:	90 64       	ori	r25, 0x40	; 64
    1da2:	90 93 a9 00 	sts	0x00A9, r25
    1da6:	01 c0       	rjmp	.+2      	; 0x1daa <HID_Host_ReceiveReport+0x86>
    1da8:	82 e0       	ldi	r24, 0x02	; 2
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    1daa:	df 91       	pop	r29

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    1dac:	cf 91       	pop	r28

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    1dae:	08 95       	ret

00001db0 <HID_Host_IsReportReceived>:
    1db0:	fc 01       	movw	r30, r24
    1db2:	80 91 28 05 	lds	r24, 0x0528
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1db6:	8b 30       	cpi	r24, 0x0B	; 11
    1db8:	a9 f4       	brne	.+42     	; 0x1de4 <HID_Host_IsReportReceived+0x34>
    1dba:	87 85       	ldd	r24, Z+15	; 0x0f
    1dbc:	88 23       	and	r24, r24
    1dbe:	a1 f0       	breq	.+40     	; 0x1de8 <HID_Host_IsReportReceived+0x38>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1dc0:	80 81       	ld	r24, Z
    1dc2:	8f 70       	andi	r24, 0x0F	; 15
    1dc4:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1dc8:	80 91 a9 00 	lds	r24, 0x00A9
    1dcc:	8f 7b       	andi	r24, 0xBF	; 191
    1dce:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1dd2:	80 91 a6 00 	lds	r24, 0x00A6
    1dd6:	81 70       	andi	r24, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1dd8:	90 91 a9 00 	lds	r25, 0x00A9
    1ddc:	90 64       	ori	r25, 0x40	; 64
    1dde:	90 93 a9 00 	sts	0x00A9, r25

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    1de2:	08 95       	ret
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return false;
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	08 95       	ret
    1de8:	80 e0       	ldi	r24, 0x00	; 0
	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
}
    1dea:	08 95       	ret

00001dec <HID_Host_SetReportProtocol>:
	return USB_Host_SendControlRequest(NULL);
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1dec:	af 92       	push	r10
    1dee:	bf 92       	push	r11
    1df0:	cf 92       	push	r12
    1df2:	df 92       	push	r13
    1df4:	ef 92       	push	r14
    1df6:	ff 92       	push	r15
    1df8:	0f 93       	push	r16
    1dfa:	1f 93       	push	r17
    1dfc:	cf 93       	push	r28
    1dfe:	df 93       	push	r29
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	8c 01       	movw	r16, r24

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1e06:	ad b6       	in	r10, 0x3d	; 61
    1e08:	be b6       	in	r11, 0x3e	; 62
#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	uint8_t HIDReportData[HIDInterfaceInfo->State.HIDReportSize];
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	54 96       	adiw	r26, 0x14	; 20
    1e0e:	4d 91       	ld	r20, X+
    1e10:	5c 91       	ld	r21, X
    1e12:	55 97       	sbiw	r26, 0x15	; 21
    1e14:	ed b7       	in	r30, 0x3d	; 61
    1e16:	fe b7       	in	r31, 0x3e	; 62
    1e18:	e4 1b       	sub	r30, r20
    1e1a:	f5 0b       	sbc	r31, r21
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	fe bf       	out	0x3e, r31	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	ed bf       	out	0x3d, r30	; 61
    1e26:	2d b7       	in	r18, 0x3d	; 61
    1e28:	3e b7       	in	r19, 0x3e	; 62
    1e2a:	2f 5f       	subi	r18, 0xFF	; 255
    1e2c:	3f 4f       	sbci	r19, 0xFF	; 255

	USB_ControlRequest = (USB_Request_Header_t)
    1e2e:	50 96       	adiw	r26, 0x10	; 16
    1e30:	6c 91       	ld	r22, X
    1e32:	81 e8       	ldi	r24, 0x81	; 129
    1e34:	80 93 20 05 	sts	0x0520, r24
    1e38:	86 e0       	ldi	r24, 0x06	; 6
    1e3a:	80 93 21 05 	sts	0x0521, r24
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	92 e2       	ldi	r25, 0x22	; 34
    1e42:	90 93 23 05 	sts	0x0523, r25
    1e46:	80 93 22 05 	sts	0x0522, r24
    1e4a:	74 e2       	ldi	r23, 0x24	; 36
    1e4c:	e7 2e       	mov	r14, r23
    1e4e:	75 e0       	ldi	r23, 0x05	; 5
    1e50:	f7 2e       	mov	r15, r23
    1e52:	60 93 24 05 	sts	0x0524, r22
    1e56:	d7 01       	movw	r26, r14
    1e58:	11 96       	adiw	r26, 0x01	; 1
    1e5a:	1c 92       	st	X, r1
    1e5c:	50 93 27 05 	sts	0x0527, r21
    1e60:	40 93 26 05 	sts	0x0526, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1e64:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = HIDInterfaceInfo->State.HIDReportSize,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(HIDReportData)) != HOST_SENDCONTROL_Successful)
    1e68:	d2 2e       	mov	r13, r18
    1e6a:	c3 2e       	mov	r12, r19
    1e6c:	c9 01       	movw	r24, r18
    1e6e:	33 dd       	rcall	.-1434   	; 0x18d6 <USB_Host_SendControlRequest>
    1e70:	88 23       	and	r24, r24
    1e72:	09 f0       	breq	.+2      	; 0x1e76 <HID_Host_SetReportProtocol+0x8a>
    1e74:	50 c0       	rjmp	.+160    	; 0x1f16 <HID_Host_SetReportProtocol+0x12a>
    1e76:	f8 01       	movw	r30, r16
	  return ErrorCode;

	if (HIDInterfaceInfo->State.UsingBootProtocol)
    1e78:	83 89       	ldd	r24, Z+19	; 0x13
    1e7a:	88 23       	and	r24, r24
    1e7c:	e9 f0       	breq	.+58     	; 0x1eb8 <HID_Host_SetReportProtocol+0xcc>
    1e7e:	20 89       	ldd	r18, Z+16	; 0x10
	{
		USB_ControlRequest = (USB_Request_Header_t)
    1e80:	81 e2       	ldi	r24, 0x21	; 33
    1e82:	80 93 20 05 	sts	0x0520, r24
    1e86:	8b e0       	ldi	r24, 0x0B	; 11
    1e88:	80 93 21 05 	sts	0x0521, r24
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	90 93 23 05 	sts	0x0523, r25
    1e94:	80 93 22 05 	sts	0x0522, r24
    1e98:	20 93 24 05 	sts	0x0524, r18
    1e9c:	d7 01       	movw	r26, r14
    1e9e:	11 96       	adiw	r26, 0x01	; 1
    1ea0:	1c 92       	st	X, r1
    1ea2:	10 92 27 05 	sts	0x0527, r1
    1ea6:	10 92 26 05 	sts	0x0526, r1
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
				.wValue        = 1,
				.wIndex        = HIDInterfaceInfo->State.InterfaceNumber,
				.wLength       = 0,
			};

		if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	13 dd       	rcall	.-1498   	; 0x18d6 <USB_Host_SendControlRequest>
    1eb0:	88 23       	and	r24, r24
    1eb2:	89 f5       	brne	.+98     	; 0x1f16 <HID_Host_SetReportProtocol+0x12a>
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	13 8a       	std	Z+19, r1	; 0x13
		  return ErrorCode;

		HIDInterfaceInfo->State.UsingBootProtocol = false;
    1eb8:	d8 01       	movw	r26, r16
    1eba:	1d 96       	adiw	r26, 0x0d	; 13
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
    1ebc:	4d 91       	ld	r20, X+
    1ebe:	5c 91       	ld	r21, X
    1ec0:	1e 97       	sbiw	r26, 0x0e	; 14
    1ec2:	41 15       	cp	r20, r1
    1ec4:	51 05       	cpc	r21, r1
    1ec6:	31 f1       	breq	.+76     	; 0x1f14 <HID_Host_SetReportProtocol+0x128>
    1ec8:	54 96       	adiw	r26, 0x14	; 20
    1eca:	6d 91       	ld	r22, X+
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_ProcessHIDReport(HIDReportData, HIDInterfaceInfo->State.HIDReportSize,
    1ecc:	7c 91       	ld	r23, X
    1ece:	55 97       	sbiw	r26, 0x15	; 21
    1ed0:	8d 2d       	mov	r24, r13
    1ed2:	9c 2d       	mov	r25, r12
    1ed4:	0e 94 26 03 	call	0x64c	; 0x64c <USB_ProcessHIDReport>
    1ed8:	88 23       	and	r24, r24
    1eda:	11 f0       	breq	.+4      	; 0x1ee0 <HID_Host_SetReportProtocol+0xf4>
    1edc:	80 68       	ori	r24, 0x80	; 128
    1ede:	1b c0       	rjmp	.+54     	; 0x1f16 <HID_Host_SetReportProtocol+0x12a>
	                                      HIDInterfaceInfo->Config.HIDParserData)) != HID_PARSE_Successful)
	{
		return HID_ERROR_LOGICAL | ErrorCode;
    1ee0:	d8 01       	movw	r26, r16
    1ee2:	1d 96       	adiw	r26, 0x0d	; 13
	}

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
    1ee4:	ed 91       	ld	r30, X+
    1ee6:	fc 91       	ld	r31, X
    1ee8:	1e 97       	sbiw	r26, 0x0e	; 14
    1eea:	ea 52       	subi	r30, 0x2A	; 42
    1eec:	fc 4f       	sbci	r31, 0xFC	; 252
    1eee:	20 81       	ld	r18, Z
    1ef0:	31 81       	ldd	r19, Z+1	; 0x01
    1ef2:	a9 01       	movw	r20, r18
    1ef4:	47 70       	andi	r20, 0x07	; 7
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);
    1ef6:	50 70       	andi	r21, 0x00	; 0
    1ef8:	91 e0       	ldi	r25, 0x01	; 1
    1efa:	41 15       	cp	r20, r1
    1efc:	51 05       	cpc	r21, r1
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <HID_Host_SetReportProtocol+0x116>
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	43 e0       	ldi	r20, 0x03	; 3
    1f04:	36 95       	lsr	r19
    1f06:	27 95       	ror	r18
    1f08:	4a 95       	dec	r20
    1f0a:	e1 f7       	brne	.-8      	; 0x1f04 <HID_Host_SetReportProtocol+0x118>
    1f0c:	29 0f       	add	r18, r25
    1f0e:	f8 01       	movw	r30, r16
    1f10:	26 8b       	std	Z+22, r18	; 0x16
    1f12:	01 c0       	rjmp	.+2      	; 0x1f16 <HID_Host_SetReportProtocol+0x12a>
    1f14:	80 e8       	ldi	r24, 0x80	; 128
    1f16:	0f b6       	in	r0, 0x3f	; 63

		HIDInterfaceInfo->State.UsingBootProtocol = false;
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
	  return HID_ERROR_LOGICAL;
    1f18:	f8 94       	cli

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1f1a:	be be       	out	0x3e, r11	; 62
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	ad be       	out	0x3d, r10	; 61
    1f20:	df 91       	pop	r29
    1f22:	cf 91       	pop	r28
    1f24:	1f 91       	pop	r17
    1f26:	0f 91       	pop	r16
    1f28:	ff 90       	pop	r15
    1f2a:	ef 90       	pop	r14
    1f2c:	df 90       	pop	r13
    1f2e:	cf 90       	pop	r12
    1f30:	bf 90       	pop	r11
    1f32:	af 90       	pop	r10
    1f34:	08 95       	ret

00001f36 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1f36:	90 91 c8 00 	lds	r25, 0x00C8
    1f3a:	95 ff       	sbrs	r25, 5
    1f3c:	fc cf       	rjmp	.-8      	; 0x1f36 <Serial_putchar>
				UDR1 = DataByte;
    1f3e:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	08 95       	ret

00001f48 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1f48:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1f4c:	87 ff       	sbrs	r24, 7
    1f4e:	08 c0       	rjmp	.+16     	; 0x1f60 <Serial_getchar+0x18>
    1f50:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1f54:	87 ff       	sbrs	r24, 7
    1f56:	07 c0       	rjmp	.+14     	; 0x1f66 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1f58:	80 91 ce 00 	lds	r24, 0x00CE
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	08 95       	ret
	  return _FDEV_EOF;
    1f60:	8e ef       	ldi	r24, 0xFE	; 254
    1f62:	9f ef       	ldi	r25, 0xFF	; 255
    1f64:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1f66:	8f ef       	ldi	r24, 0xFF	; 255
    1f68:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1f6a:	08 95       	ret

00001f6c <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1f6c:	fc 01       	movw	r30, r24
	if (!(Stream))
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	51 f4       	brne	.+20     	; 0x1f86 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1f72:	e9 e2       	ldi	r30, 0x29	; 41
    1f74:	f5 e0       	ldi	r31, 0x05	; 5
    1f76:	f0 93 38 05 	sts	0x0538, r31
    1f7a:	e0 93 37 05 	sts	0x0537, r30
		stdout = Stream;
    1f7e:	f0 93 3a 05 	sts	0x053A, r31
    1f82:	e0 93 39 05 	sts	0x0539, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1f86:	8e e0       	ldi	r24, 0x0E	; 14
    1f88:	df 01       	movw	r26, r30
    1f8a:	1d 92       	st	X+, r1
    1f8c:	8a 95       	dec	r24
    1f8e:	e9 f7       	brne	.-6      	; 0x1f8a <Serial_CreateStream+0x1e>
    1f90:	83 e0       	ldi	r24, 0x03	; 3
    1f92:	83 83       	std	Z+3, r24	; 0x03
    1f94:	8b e9       	ldi	r24, 0x9B	; 155
    1f96:	9f e0       	ldi	r25, 0x0F	; 15
    1f98:	91 87       	std	Z+9, r25	; 0x09
    1f9a:	80 87       	std	Z+8, r24	; 0x08
    1f9c:	84 ea       	ldi	r24, 0xA4	; 164
    1f9e:	9f e0       	ldi	r25, 0x0F	; 15
    1fa0:	93 87       	std	Z+11, r25	; 0x0b
    1fa2:	82 87       	std	Z+10, r24	; 0x0a
}
    1fa4:	08 95       	ret

00001fa6 <printf_P>:
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	fe 01       	movw	r30, r28
    1fb0:	35 96       	adiw	r30, 0x05	; 5
    1fb2:	61 91       	ld	r22, Z+
    1fb4:	71 91       	ld	r23, Z+
    1fb6:	80 91 39 05 	lds	r24, 0x0539
    1fba:	90 91 3a 05 	lds	r25, 0x053A
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	13 96       	adiw	r26, 0x03	; 3
    1fc2:	2c 91       	ld	r18, X
    1fc4:	13 97       	sbiw	r26, 0x03	; 3
    1fc6:	28 60       	ori	r18, 0x08	; 8
    1fc8:	13 96       	adiw	r26, 0x03	; 3
    1fca:	2c 93       	st	X, r18
    1fcc:	af 01       	movw	r20, r30
    1fce:	39 d0       	rcall	.+114    	; 0x2042 <vfprintf>
    1fd0:	e0 91 39 05 	lds	r30, 0x0539
    1fd4:	f0 91 3a 05 	lds	r31, 0x053A
    1fd8:	23 81       	ldd	r18, Z+3	; 0x03
    1fda:	27 7f       	andi	r18, 0xF7	; 247
    1fdc:	23 83       	std	Z+3, r18	; 0x03
    1fde:	df 91       	pop	r29
    1fe0:	cf 91       	pop	r28
    1fe2:	08 95       	ret

00001fe4 <puts_P>:
    1fe4:	0f 93       	push	r16
    1fe6:	1f 93       	push	r17
    1fe8:	cf 93       	push	r28
    1fea:	df 93       	push	r29
    1fec:	8c 01       	movw	r16, r24
    1fee:	e0 91 39 05 	lds	r30, 0x0539
    1ff2:	f0 91 3a 05 	lds	r31, 0x053A
    1ff6:	83 81       	ldd	r24, Z+3	; 0x03
    1ff8:	81 ff       	sbrs	r24, 1
    1ffa:	1b c0       	rjmp	.+54     	; 0x2032 <puts_P+0x4e>
    1ffc:	c0 e0       	ldi	r28, 0x00	; 0
    1ffe:	d0 e0       	ldi	r29, 0x00	; 0
    2000:	07 c0       	rjmp	.+14     	; 0x2010 <puts_P+0x2c>
    2002:	09 95       	icall
    2004:	00 97       	sbiw	r24, 0x00	; 0
    2006:	11 f0       	breq	.+4      	; 0x200c <puts_P+0x28>
    2008:	cf ef       	ldi	r28, 0xFF	; 255
    200a:	df ef       	ldi	r29, 0xFF	; 255
    200c:	0f 5f       	subi	r16, 0xFF	; 255
    200e:	1f 4f       	sbci	r17, 0xFF	; 255
    2010:	f8 01       	movw	r30, r16
    2012:	84 91       	lpm	r24, Z
    2014:	60 91 39 05 	lds	r22, 0x0539
    2018:	70 91 3a 05 	lds	r23, 0x053A
    201c:	db 01       	movw	r26, r22
    201e:	18 96       	adiw	r26, 0x08	; 8
    2020:	ed 91       	ld	r30, X+
    2022:	fc 91       	ld	r31, X
    2024:	19 97       	sbiw	r26, 0x09	; 9
    2026:	88 23       	and	r24, r24
    2028:	61 f7       	brne	.-40     	; 0x2002 <puts_P+0x1e>
    202a:	8a e0       	ldi	r24, 0x0A	; 10
    202c:	09 95       	icall
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	11 f0       	breq	.+4      	; 0x2036 <puts_P+0x52>
    2032:	cf ef       	ldi	r28, 0xFF	; 255
    2034:	df ef       	ldi	r29, 0xFF	; 255
    2036:	ce 01       	movw	r24, r28
    2038:	df 91       	pop	r29
    203a:	cf 91       	pop	r28
    203c:	1f 91       	pop	r17
    203e:	0f 91       	pop	r16
    2040:	08 95       	ret

00002042 <vfprintf>:
    2042:	2f 92       	push	r2
    2044:	3f 92       	push	r3
    2046:	4f 92       	push	r4
    2048:	5f 92       	push	r5
    204a:	6f 92       	push	r6
    204c:	7f 92       	push	r7
    204e:	8f 92       	push	r8
    2050:	9f 92       	push	r9
    2052:	af 92       	push	r10
    2054:	bf 92       	push	r11
    2056:	cf 92       	push	r12
    2058:	df 92       	push	r13
    205a:	ef 92       	push	r14
    205c:	ff 92       	push	r15
    205e:	0f 93       	push	r16
    2060:	1f 93       	push	r17
    2062:	cf 93       	push	r28
    2064:	df 93       	push	r29
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	2d 97       	sbiw	r28, 0x0d	; 13
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	de bf       	out	0x3e, r29	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	3c 01       	movw	r6, r24
    2078:	7d 87       	std	Y+13, r23	; 0x0d
    207a:	6c 87       	std	Y+12, r22	; 0x0c
    207c:	5a 01       	movw	r10, r20
    207e:	fc 01       	movw	r30, r24
    2080:	17 82       	std	Z+7, r1	; 0x07
    2082:	16 82       	std	Z+6, r1	; 0x06
    2084:	83 81       	ldd	r24, Z+3	; 0x03
    2086:	81 ff       	sbrs	r24, 1
    2088:	bb c1       	rjmp	.+886    	; 0x2400 <__stack+0x301>
    208a:	2e 01       	movw	r4, r28
    208c:	08 94       	sec
    208e:	41 1c       	adc	r4, r1
    2090:	51 1c       	adc	r5, r1
    2092:	f3 01       	movw	r30, r6
    2094:	93 81       	ldd	r25, Z+3	; 0x03
    2096:	ec 85       	ldd	r30, Y+12	; 0x0c
    2098:	fd 85       	ldd	r31, Y+13	; 0x0d
    209a:	93 fd       	sbrc	r25, 3
    209c:	85 91       	lpm	r24, Z+
    209e:	93 ff       	sbrs	r25, 3
    20a0:	81 91       	ld	r24, Z+
    20a2:	fd 87       	std	Y+13, r31	; 0x0d
    20a4:	ec 87       	std	Y+12, r30	; 0x0c
    20a6:	88 23       	and	r24, r24
    20a8:	09 f4       	brne	.+2      	; 0x20ac <vfprintf+0x6a>
    20aa:	a6 c1       	rjmp	.+844    	; 0x23f8 <__stack+0x2f9>
    20ac:	85 32       	cpi	r24, 0x25	; 37
    20ae:	41 f4       	brne	.+16     	; 0x20c0 <vfprintf+0x7e>
    20b0:	93 fd       	sbrc	r25, 3
    20b2:	85 91       	lpm	r24, Z+
    20b4:	93 ff       	sbrs	r25, 3
    20b6:	81 91       	ld	r24, Z+
    20b8:	fd 87       	std	Y+13, r31	; 0x0d
    20ba:	ec 87       	std	Y+12, r30	; 0x0c
    20bc:	85 32       	cpi	r24, 0x25	; 37
    20be:	21 f4       	brne	.+8      	; 0x20c8 <vfprintf+0x86>
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	b3 01       	movw	r22, r6
    20c4:	ce d1       	rcall	.+924    	; 0x2462 <fputc>
    20c6:	e5 cf       	rjmp	.-54     	; 0x2092 <vfprintf+0x50>
    20c8:	ff 24       	eor	r15, r15
    20ca:	ee 24       	eor	r14, r14
    20cc:	10 e0       	ldi	r17, 0x00	; 0
    20ce:	10 32       	cpi	r17, 0x20	; 32
    20d0:	b0 f4       	brcc	.+44     	; 0x20fe <vfprintf+0xbc>
    20d2:	8b 32       	cpi	r24, 0x2B	; 43
    20d4:	69 f0       	breq	.+26     	; 0x20f0 <vfprintf+0xae>
    20d6:	8c 32       	cpi	r24, 0x2C	; 44
    20d8:	28 f4       	brcc	.+10     	; 0x20e4 <vfprintf+0xa2>
    20da:	80 32       	cpi	r24, 0x20	; 32
    20dc:	51 f0       	breq	.+20     	; 0x20f2 <vfprintf+0xb0>
    20de:	83 32       	cpi	r24, 0x23	; 35
    20e0:	71 f4       	brne	.+28     	; 0x20fe <vfprintf+0xbc>
    20e2:	0b c0       	rjmp	.+22     	; 0x20fa <vfprintf+0xb8>
    20e4:	8d 32       	cpi	r24, 0x2D	; 45
    20e6:	39 f0       	breq	.+14     	; 0x20f6 <vfprintf+0xb4>
    20e8:	80 33       	cpi	r24, 0x30	; 48
    20ea:	49 f4       	brne	.+18     	; 0x20fe <vfprintf+0xbc>
    20ec:	11 60       	ori	r17, 0x01	; 1
    20ee:	2c c0       	rjmp	.+88     	; 0x2148 <__stack+0x49>
    20f0:	12 60       	ori	r17, 0x02	; 2
    20f2:	14 60       	ori	r17, 0x04	; 4
    20f4:	29 c0       	rjmp	.+82     	; 0x2148 <__stack+0x49>
    20f6:	18 60       	ori	r17, 0x08	; 8
    20f8:	27 c0       	rjmp	.+78     	; 0x2148 <__stack+0x49>
    20fa:	10 61       	ori	r17, 0x10	; 16
    20fc:	25 c0       	rjmp	.+74     	; 0x2148 <__stack+0x49>
    20fe:	17 fd       	sbrc	r17, 7
    2100:	2e c0       	rjmp	.+92     	; 0x215e <__stack+0x5f>
    2102:	28 2f       	mov	r18, r24
    2104:	20 53       	subi	r18, 0x30	; 48
    2106:	2a 30       	cpi	r18, 0x0A	; 10
    2108:	98 f4       	brcc	.+38     	; 0x2130 <__stack+0x31>
    210a:	16 ff       	sbrs	r17, 6
    210c:	08 c0       	rjmp	.+16     	; 0x211e <__stack+0x1f>
    210e:	8f 2d       	mov	r24, r15
    2110:	88 0f       	add	r24, r24
    2112:	f8 2e       	mov	r15, r24
    2114:	ff 0c       	add	r15, r15
    2116:	ff 0c       	add	r15, r15
    2118:	f8 0e       	add	r15, r24
    211a:	f2 0e       	add	r15, r18
    211c:	15 c0       	rjmp	.+42     	; 0x2148 <__stack+0x49>
    211e:	8e 2d       	mov	r24, r14
    2120:	88 0f       	add	r24, r24
    2122:	e8 2e       	mov	r14, r24
    2124:	ee 0c       	add	r14, r14
    2126:	ee 0c       	add	r14, r14
    2128:	e8 0e       	add	r14, r24
    212a:	e2 0e       	add	r14, r18
    212c:	10 62       	ori	r17, 0x20	; 32
    212e:	0c c0       	rjmp	.+24     	; 0x2148 <__stack+0x49>
    2130:	8e 32       	cpi	r24, 0x2E	; 46
    2132:	21 f4       	brne	.+8      	; 0x213c <__stack+0x3d>
    2134:	16 fd       	sbrc	r17, 6
    2136:	60 c1       	rjmp	.+704    	; 0x23f8 <__stack+0x2f9>
    2138:	10 64       	ori	r17, 0x40	; 64
    213a:	06 c0       	rjmp	.+12     	; 0x2148 <__stack+0x49>
    213c:	8c 36       	cpi	r24, 0x6C	; 108
    213e:	11 f4       	brne	.+4      	; 0x2144 <__stack+0x45>
    2140:	10 68       	ori	r17, 0x80	; 128
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <__stack+0x49>
    2144:	88 36       	cpi	r24, 0x68	; 104
    2146:	59 f4       	brne	.+22     	; 0x215e <__stack+0x5f>
    2148:	ec 85       	ldd	r30, Y+12	; 0x0c
    214a:	fd 85       	ldd	r31, Y+13	; 0x0d
    214c:	93 fd       	sbrc	r25, 3
    214e:	85 91       	lpm	r24, Z+
    2150:	93 ff       	sbrs	r25, 3
    2152:	81 91       	ld	r24, Z+
    2154:	fd 87       	std	Y+13, r31	; 0x0d
    2156:	ec 87       	std	Y+12, r30	; 0x0c
    2158:	88 23       	and	r24, r24
    215a:	09 f0       	breq	.+2      	; 0x215e <__stack+0x5f>
    215c:	b8 cf       	rjmp	.-144    	; 0x20ce <vfprintf+0x8c>
    215e:	98 2f       	mov	r25, r24
    2160:	95 54       	subi	r25, 0x45	; 69
    2162:	93 30       	cpi	r25, 0x03	; 3
    2164:	18 f0       	brcs	.+6      	; 0x216c <__stack+0x6d>
    2166:	90 52       	subi	r25, 0x20	; 32
    2168:	93 30       	cpi	r25, 0x03	; 3
    216a:	38 f4       	brcc	.+14     	; 0x217a <__stack+0x7b>
    216c:	24 e0       	ldi	r18, 0x04	; 4
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	a2 0e       	add	r10, r18
    2172:	b3 1e       	adc	r11, r19
    2174:	3f e3       	ldi	r19, 0x3F	; 63
    2176:	39 83       	std	Y+1, r19	; 0x01
    2178:	0f c0       	rjmp	.+30     	; 0x2198 <__stack+0x99>
    217a:	83 36       	cpi	r24, 0x63	; 99
    217c:	31 f0       	breq	.+12     	; 0x218a <__stack+0x8b>
    217e:	83 37       	cpi	r24, 0x73	; 115
    2180:	81 f0       	breq	.+32     	; 0x21a2 <__stack+0xa3>
    2182:	83 35       	cpi	r24, 0x53	; 83
    2184:	09 f0       	breq	.+2      	; 0x2188 <__stack+0x89>
    2186:	56 c0       	rjmp	.+172    	; 0x2234 <__stack+0x135>
    2188:	21 c0       	rjmp	.+66     	; 0x21cc <__stack+0xcd>
    218a:	f5 01       	movw	r30, r10
    218c:	80 81       	ld	r24, Z
    218e:	89 83       	std	Y+1, r24	; 0x01
    2190:	22 e0       	ldi	r18, 0x02	; 2
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	a2 0e       	add	r10, r18
    2196:	b3 1e       	adc	r11, r19
    2198:	21 e0       	ldi	r18, 0x01	; 1
    219a:	c2 2e       	mov	r12, r18
    219c:	d1 2c       	mov	r13, r1
    219e:	42 01       	movw	r8, r4
    21a0:	13 c0       	rjmp	.+38     	; 0x21c8 <__stack+0xc9>
    21a2:	92 e0       	ldi	r25, 0x02	; 2
    21a4:	29 2e       	mov	r2, r25
    21a6:	31 2c       	mov	r3, r1
    21a8:	2a 0c       	add	r2, r10
    21aa:	3b 1c       	adc	r3, r11
    21ac:	f5 01       	movw	r30, r10
    21ae:	80 80       	ld	r8, Z
    21b0:	91 80       	ldd	r9, Z+1	; 0x01
    21b2:	16 ff       	sbrs	r17, 6
    21b4:	03 c0       	rjmp	.+6      	; 0x21bc <__stack+0xbd>
    21b6:	6f 2d       	mov	r22, r15
    21b8:	70 e0       	ldi	r23, 0x00	; 0
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <__stack+0xc1>
    21bc:	6f ef       	ldi	r22, 0xFF	; 255
    21be:	7f ef       	ldi	r23, 0xFF	; 255
    21c0:	c4 01       	movw	r24, r8
    21c2:	44 d1       	rcall	.+648    	; 0x244c <strnlen>
    21c4:	6c 01       	movw	r12, r24
    21c6:	51 01       	movw	r10, r2
    21c8:	1f 77       	andi	r17, 0x7F	; 127
    21ca:	14 c0       	rjmp	.+40     	; 0x21f4 <__stack+0xf5>
    21cc:	82 e0       	ldi	r24, 0x02	; 2
    21ce:	28 2e       	mov	r2, r24
    21d0:	31 2c       	mov	r3, r1
    21d2:	2a 0c       	add	r2, r10
    21d4:	3b 1c       	adc	r3, r11
    21d6:	f5 01       	movw	r30, r10
    21d8:	80 80       	ld	r8, Z
    21da:	91 80       	ldd	r9, Z+1	; 0x01
    21dc:	16 ff       	sbrs	r17, 6
    21de:	03 c0       	rjmp	.+6      	; 0x21e6 <__stack+0xe7>
    21e0:	6f 2d       	mov	r22, r15
    21e2:	70 e0       	ldi	r23, 0x00	; 0
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <__stack+0xeb>
    21e6:	6f ef       	ldi	r22, 0xFF	; 255
    21e8:	7f ef       	ldi	r23, 0xFF	; 255
    21ea:	c4 01       	movw	r24, r8
    21ec:	24 d1       	rcall	.+584    	; 0x2436 <strnlen_P>
    21ee:	6c 01       	movw	r12, r24
    21f0:	10 68       	ori	r17, 0x80	; 128
    21f2:	51 01       	movw	r10, r2
    21f4:	13 fd       	sbrc	r17, 3
    21f6:	1a c0       	rjmp	.+52     	; 0x222c <__stack+0x12d>
    21f8:	05 c0       	rjmp	.+10     	; 0x2204 <__stack+0x105>
    21fa:	80 e2       	ldi	r24, 0x20	; 32
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	b3 01       	movw	r22, r6
    2200:	30 d1       	rcall	.+608    	; 0x2462 <fputc>
    2202:	ea 94       	dec	r14
    2204:	8e 2d       	mov	r24, r14
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	c8 16       	cp	r12, r24
    220a:	d9 06       	cpc	r13, r25
    220c:	b0 f3       	brcs	.-20     	; 0x21fa <__stack+0xfb>
    220e:	0e c0       	rjmp	.+28     	; 0x222c <__stack+0x12d>
    2210:	f4 01       	movw	r30, r8
    2212:	17 fd       	sbrc	r17, 7
    2214:	85 91       	lpm	r24, Z+
    2216:	17 ff       	sbrs	r17, 7
    2218:	81 91       	ld	r24, Z+
    221a:	4f 01       	movw	r8, r30
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	b3 01       	movw	r22, r6
    2220:	20 d1       	rcall	.+576    	; 0x2462 <fputc>
    2222:	e1 10       	cpse	r14, r1
    2224:	ea 94       	dec	r14
    2226:	08 94       	sec
    2228:	c1 08       	sbc	r12, r1
    222a:	d1 08       	sbc	r13, r1
    222c:	c1 14       	cp	r12, r1
    222e:	d1 04       	cpc	r13, r1
    2230:	79 f7       	brne	.-34     	; 0x2210 <__stack+0x111>
    2232:	df c0       	rjmp	.+446    	; 0x23f2 <__stack+0x2f3>
    2234:	84 36       	cpi	r24, 0x64	; 100
    2236:	11 f0       	breq	.+4      	; 0x223c <__stack+0x13d>
    2238:	89 36       	cpi	r24, 0x69	; 105
    223a:	49 f5       	brne	.+82     	; 0x228e <__stack+0x18f>
    223c:	f5 01       	movw	r30, r10
    223e:	17 ff       	sbrs	r17, 7
    2240:	07 c0       	rjmp	.+14     	; 0x2250 <__stack+0x151>
    2242:	80 81       	ld	r24, Z
    2244:	91 81       	ldd	r25, Z+1	; 0x01
    2246:	a2 81       	ldd	r26, Z+2	; 0x02
    2248:	b3 81       	ldd	r27, Z+3	; 0x03
    224a:	24 e0       	ldi	r18, 0x04	; 4
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	08 c0       	rjmp	.+16     	; 0x2260 <__stack+0x161>
    2250:	80 81       	ld	r24, Z
    2252:	91 81       	ldd	r25, Z+1	; 0x01
    2254:	aa 27       	eor	r26, r26
    2256:	97 fd       	sbrc	r25, 7
    2258:	a0 95       	com	r26
    225a:	ba 2f       	mov	r27, r26
    225c:	22 e0       	ldi	r18, 0x02	; 2
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	a2 0e       	add	r10, r18
    2262:	b3 1e       	adc	r11, r19
    2264:	01 2f       	mov	r16, r17
    2266:	0f 76       	andi	r16, 0x6F	; 111
    2268:	b7 ff       	sbrs	r27, 7
    226a:	08 c0       	rjmp	.+16     	; 0x227c <__stack+0x17d>
    226c:	b0 95       	com	r27
    226e:	a0 95       	com	r26
    2270:	90 95       	com	r25
    2272:	81 95       	neg	r24
    2274:	9f 4f       	sbci	r25, 0xFF	; 255
    2276:	af 4f       	sbci	r26, 0xFF	; 255
    2278:	bf 4f       	sbci	r27, 0xFF	; 255
    227a:	00 68       	ori	r16, 0x80	; 128
    227c:	bc 01       	movw	r22, r24
    227e:	cd 01       	movw	r24, r26
    2280:	a2 01       	movw	r20, r4
    2282:	2a e0       	ldi	r18, 0x0A	; 10
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	19 d1       	rcall	.+562    	; 0x24ba <__ultoa_invert>
    2288:	d8 2e       	mov	r13, r24
    228a:	d4 18       	sub	r13, r4
    228c:	3e c0       	rjmp	.+124    	; 0x230a <__stack+0x20b>
    228e:	85 37       	cpi	r24, 0x75	; 117
    2290:	21 f4       	brne	.+8      	; 0x229a <__stack+0x19b>
    2292:	1f 7e       	andi	r17, 0xEF	; 239
    2294:	2a e0       	ldi	r18, 0x0A	; 10
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	20 c0       	rjmp	.+64     	; 0x22da <__stack+0x1db>
    229a:	19 7f       	andi	r17, 0xF9	; 249
    229c:	8f 36       	cpi	r24, 0x6F	; 111
    229e:	a9 f0       	breq	.+42     	; 0x22ca <__stack+0x1cb>
    22a0:	80 37       	cpi	r24, 0x70	; 112
    22a2:	20 f4       	brcc	.+8      	; 0x22ac <__stack+0x1ad>
    22a4:	88 35       	cpi	r24, 0x58	; 88
    22a6:	09 f0       	breq	.+2      	; 0x22aa <__stack+0x1ab>
    22a8:	a7 c0       	rjmp	.+334    	; 0x23f8 <__stack+0x2f9>
    22aa:	0b c0       	rjmp	.+22     	; 0x22c2 <__stack+0x1c3>
    22ac:	80 37       	cpi	r24, 0x70	; 112
    22ae:	21 f0       	breq	.+8      	; 0x22b8 <__stack+0x1b9>
    22b0:	88 37       	cpi	r24, 0x78	; 120
    22b2:	09 f0       	breq	.+2      	; 0x22b6 <__stack+0x1b7>
    22b4:	a1 c0       	rjmp	.+322    	; 0x23f8 <__stack+0x2f9>
    22b6:	01 c0       	rjmp	.+2      	; 0x22ba <__stack+0x1bb>
    22b8:	10 61       	ori	r17, 0x10	; 16
    22ba:	14 ff       	sbrs	r17, 4
    22bc:	09 c0       	rjmp	.+18     	; 0x22d0 <__stack+0x1d1>
    22be:	14 60       	ori	r17, 0x04	; 4
    22c0:	07 c0       	rjmp	.+14     	; 0x22d0 <__stack+0x1d1>
    22c2:	14 ff       	sbrs	r17, 4
    22c4:	08 c0       	rjmp	.+16     	; 0x22d6 <__stack+0x1d7>
    22c6:	16 60       	ori	r17, 0x06	; 6
    22c8:	06 c0       	rjmp	.+12     	; 0x22d6 <__stack+0x1d7>
    22ca:	28 e0       	ldi	r18, 0x08	; 8
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	05 c0       	rjmp	.+10     	; 0x22da <__stack+0x1db>
    22d0:	20 e1       	ldi	r18, 0x10	; 16
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	02 c0       	rjmp	.+4      	; 0x22da <__stack+0x1db>
    22d6:	20 e1       	ldi	r18, 0x10	; 16
    22d8:	32 e0       	ldi	r19, 0x02	; 2
    22da:	f5 01       	movw	r30, r10
    22dc:	17 ff       	sbrs	r17, 7
    22de:	07 c0       	rjmp	.+14     	; 0x22ee <__stack+0x1ef>
    22e0:	60 81       	ld	r22, Z
    22e2:	71 81       	ldd	r23, Z+1	; 0x01
    22e4:	82 81       	ldd	r24, Z+2	; 0x02
    22e6:	93 81       	ldd	r25, Z+3	; 0x03
    22e8:	44 e0       	ldi	r20, 0x04	; 4
    22ea:	50 e0       	ldi	r21, 0x00	; 0
    22ec:	06 c0       	rjmp	.+12     	; 0x22fa <__stack+0x1fb>
    22ee:	60 81       	ld	r22, Z
    22f0:	71 81       	ldd	r23, Z+1	; 0x01
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	42 e0       	ldi	r20, 0x02	; 2
    22f8:	50 e0       	ldi	r21, 0x00	; 0
    22fa:	a4 0e       	add	r10, r20
    22fc:	b5 1e       	adc	r11, r21
    22fe:	a2 01       	movw	r20, r4
    2300:	dc d0       	rcall	.+440    	; 0x24ba <__ultoa_invert>
    2302:	d8 2e       	mov	r13, r24
    2304:	d4 18       	sub	r13, r4
    2306:	01 2f       	mov	r16, r17
    2308:	0f 77       	andi	r16, 0x7F	; 127
    230a:	06 ff       	sbrs	r16, 6
    230c:	09 c0       	rjmp	.+18     	; 0x2320 <__stack+0x221>
    230e:	0e 7f       	andi	r16, 0xFE	; 254
    2310:	df 14       	cp	r13, r15
    2312:	30 f4       	brcc	.+12     	; 0x2320 <__stack+0x221>
    2314:	04 ff       	sbrs	r16, 4
    2316:	06 c0       	rjmp	.+12     	; 0x2324 <__stack+0x225>
    2318:	02 fd       	sbrc	r16, 2
    231a:	04 c0       	rjmp	.+8      	; 0x2324 <__stack+0x225>
    231c:	0f 7e       	andi	r16, 0xEF	; 239
    231e:	02 c0       	rjmp	.+4      	; 0x2324 <__stack+0x225>
    2320:	1d 2d       	mov	r17, r13
    2322:	01 c0       	rjmp	.+2      	; 0x2326 <__stack+0x227>
    2324:	1f 2d       	mov	r17, r15
    2326:	80 2f       	mov	r24, r16
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	04 ff       	sbrs	r16, 4
    232c:	0c c0       	rjmp	.+24     	; 0x2346 <__stack+0x247>
    232e:	fe 01       	movw	r30, r28
    2330:	ed 0d       	add	r30, r13
    2332:	f1 1d       	adc	r31, r1
    2334:	20 81       	ld	r18, Z
    2336:	20 33       	cpi	r18, 0x30	; 48
    2338:	11 f4       	brne	.+4      	; 0x233e <__stack+0x23f>
    233a:	09 7e       	andi	r16, 0xE9	; 233
    233c:	09 c0       	rjmp	.+18     	; 0x2350 <__stack+0x251>
    233e:	02 ff       	sbrs	r16, 2
    2340:	06 c0       	rjmp	.+12     	; 0x234e <__stack+0x24f>
    2342:	1e 5f       	subi	r17, 0xFE	; 254
    2344:	05 c0       	rjmp	.+10     	; 0x2350 <__stack+0x251>
    2346:	86 78       	andi	r24, 0x86	; 134
    2348:	90 70       	andi	r25, 0x00	; 0
    234a:	00 97       	sbiw	r24, 0x00	; 0
    234c:	09 f0       	breq	.+2      	; 0x2350 <__stack+0x251>
    234e:	1f 5f       	subi	r17, 0xFF	; 255
    2350:	80 2e       	mov	r8, r16
    2352:	99 24       	eor	r9, r9
    2354:	03 fd       	sbrc	r16, 3
    2356:	11 c0       	rjmp	.+34     	; 0x237a <__stack+0x27b>
    2358:	00 ff       	sbrs	r16, 0
    235a:	0c c0       	rjmp	.+24     	; 0x2374 <__stack+0x275>
    235c:	fd 2c       	mov	r15, r13
    235e:	1e 15       	cp	r17, r14
    2360:	48 f4       	brcc	.+18     	; 0x2374 <__stack+0x275>
    2362:	fe 0c       	add	r15, r14
    2364:	f1 1a       	sub	r15, r17
    2366:	1e 2d       	mov	r17, r14
    2368:	05 c0       	rjmp	.+10     	; 0x2374 <__stack+0x275>
    236a:	80 e2       	ldi	r24, 0x20	; 32
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	b3 01       	movw	r22, r6
    2370:	78 d0       	rcall	.+240    	; 0x2462 <fputc>
    2372:	1f 5f       	subi	r17, 0xFF	; 255
    2374:	1e 15       	cp	r17, r14
    2376:	c8 f3       	brcs	.-14     	; 0x236a <__stack+0x26b>
    2378:	04 c0       	rjmp	.+8      	; 0x2382 <__stack+0x283>
    237a:	1e 15       	cp	r17, r14
    237c:	10 f4       	brcc	.+4      	; 0x2382 <__stack+0x283>
    237e:	e1 1a       	sub	r14, r17
    2380:	01 c0       	rjmp	.+2      	; 0x2384 <__stack+0x285>
    2382:	ee 24       	eor	r14, r14
    2384:	84 fe       	sbrs	r8, 4
    2386:	0e c0       	rjmp	.+28     	; 0x23a4 <__stack+0x2a5>
    2388:	80 e3       	ldi	r24, 0x30	; 48
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	b3 01       	movw	r22, r6
    238e:	69 d0       	rcall	.+210    	; 0x2462 <fputc>
    2390:	82 fe       	sbrs	r8, 2
    2392:	1d c0       	rjmp	.+58     	; 0x23ce <__stack+0x2cf>
    2394:	81 fe       	sbrs	r8, 1
    2396:	03 c0       	rjmp	.+6      	; 0x239e <__stack+0x29f>
    2398:	88 e5       	ldi	r24, 0x58	; 88
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	10 c0       	rjmp	.+32     	; 0x23be <__stack+0x2bf>
    239e:	88 e7       	ldi	r24, 0x78	; 120
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	0d c0       	rjmp	.+26     	; 0x23be <__stack+0x2bf>
    23a4:	c4 01       	movw	r24, r8
    23a6:	86 78       	andi	r24, 0x86	; 134
    23a8:	90 70       	andi	r25, 0x00	; 0
    23aa:	00 97       	sbiw	r24, 0x00	; 0
    23ac:	81 f0       	breq	.+32     	; 0x23ce <__stack+0x2cf>
    23ae:	81 fc       	sbrc	r8, 1
    23b0:	02 c0       	rjmp	.+4      	; 0x23b6 <__stack+0x2b7>
    23b2:	80 e2       	ldi	r24, 0x20	; 32
    23b4:	01 c0       	rjmp	.+2      	; 0x23b8 <__stack+0x2b9>
    23b6:	8b e2       	ldi	r24, 0x2B	; 43
    23b8:	07 fd       	sbrc	r16, 7
    23ba:	8d e2       	ldi	r24, 0x2D	; 45
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	b3 01       	movw	r22, r6
    23c0:	50 d0       	rcall	.+160    	; 0x2462 <fputc>
    23c2:	05 c0       	rjmp	.+10     	; 0x23ce <__stack+0x2cf>
    23c4:	80 e3       	ldi	r24, 0x30	; 48
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	b3 01       	movw	r22, r6
    23ca:	4b d0       	rcall	.+150    	; 0x2462 <fputc>
    23cc:	fa 94       	dec	r15
    23ce:	df 14       	cp	r13, r15
    23d0:	c8 f3       	brcs	.-14     	; 0x23c4 <__stack+0x2c5>
    23d2:	da 94       	dec	r13
    23d4:	f2 01       	movw	r30, r4
    23d6:	ed 0d       	add	r30, r13
    23d8:	f1 1d       	adc	r31, r1
    23da:	80 81       	ld	r24, Z
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	b3 01       	movw	r22, r6
    23e0:	40 d0       	rcall	.+128    	; 0x2462 <fputc>
    23e2:	dd 20       	and	r13, r13
    23e4:	b1 f7       	brne	.-20     	; 0x23d2 <__stack+0x2d3>
    23e6:	05 c0       	rjmp	.+10     	; 0x23f2 <__stack+0x2f3>
    23e8:	80 e2       	ldi	r24, 0x20	; 32
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	b3 01       	movw	r22, r6
    23ee:	39 d0       	rcall	.+114    	; 0x2462 <fputc>
    23f0:	ea 94       	dec	r14
    23f2:	ee 20       	and	r14, r14
    23f4:	c9 f7       	brne	.-14     	; 0x23e8 <__stack+0x2e9>
    23f6:	4d ce       	rjmp	.-870    	; 0x2092 <vfprintf+0x50>
    23f8:	f3 01       	movw	r30, r6
    23fa:	86 81       	ldd	r24, Z+6	; 0x06
    23fc:	97 81       	ldd	r25, Z+7	; 0x07
    23fe:	02 c0       	rjmp	.+4      	; 0x2404 <__stack+0x305>
    2400:	8f ef       	ldi	r24, 0xFF	; 255
    2402:	9f ef       	ldi	r25, 0xFF	; 255
    2404:	2d 96       	adiw	r28, 0x0d	; 13
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	df 91       	pop	r29
    2412:	cf 91       	pop	r28
    2414:	1f 91       	pop	r17
    2416:	0f 91       	pop	r16
    2418:	ff 90       	pop	r15
    241a:	ef 90       	pop	r14
    241c:	df 90       	pop	r13
    241e:	cf 90       	pop	r12
    2420:	bf 90       	pop	r11
    2422:	af 90       	pop	r10
    2424:	9f 90       	pop	r9
    2426:	8f 90       	pop	r8
    2428:	7f 90       	pop	r7
    242a:	6f 90       	pop	r6
    242c:	5f 90       	pop	r5
    242e:	4f 90       	pop	r4
    2430:	3f 90       	pop	r3
    2432:	2f 90       	pop	r2
    2434:	08 95       	ret

00002436 <strnlen_P>:
    2436:	fc 01       	movw	r30, r24
    2438:	05 90       	lpm	r0, Z+
    243a:	61 50       	subi	r22, 0x01	; 1
    243c:	70 40       	sbci	r23, 0x00	; 0
    243e:	01 10       	cpse	r0, r1
    2440:	d8 f7       	brcc	.-10     	; 0x2438 <strnlen_P+0x2>
    2442:	80 95       	com	r24
    2444:	90 95       	com	r25
    2446:	8e 0f       	add	r24, r30
    2448:	9f 1f       	adc	r25, r31
    244a:	08 95       	ret

0000244c <strnlen>:
    244c:	fc 01       	movw	r30, r24
    244e:	61 50       	subi	r22, 0x01	; 1
    2450:	70 40       	sbci	r23, 0x00	; 0
    2452:	01 90       	ld	r0, Z+
    2454:	01 10       	cpse	r0, r1
    2456:	d8 f7       	brcc	.-10     	; 0x244e <strnlen+0x2>
    2458:	80 95       	com	r24
    245a:	90 95       	com	r25
    245c:	8e 0f       	add	r24, r30
    245e:	9f 1f       	adc	r25, r31
    2460:	08 95       	ret

00002462 <fputc>:
    2462:	0f 93       	push	r16
    2464:	1f 93       	push	r17
    2466:	cf 93       	push	r28
    2468:	df 93       	push	r29
    246a:	8c 01       	movw	r16, r24
    246c:	eb 01       	movw	r28, r22
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	81 ff       	sbrs	r24, 1
    2472:	1b c0       	rjmp	.+54     	; 0x24aa <fputc+0x48>
    2474:	82 ff       	sbrs	r24, 2
    2476:	0d c0       	rjmp	.+26     	; 0x2492 <fputc+0x30>
    2478:	2e 81       	ldd	r18, Y+6	; 0x06
    247a:	3f 81       	ldd	r19, Y+7	; 0x07
    247c:	8c 81       	ldd	r24, Y+4	; 0x04
    247e:	9d 81       	ldd	r25, Y+5	; 0x05
    2480:	28 17       	cp	r18, r24
    2482:	39 07       	cpc	r19, r25
    2484:	64 f4       	brge	.+24     	; 0x249e <fputc+0x3c>
    2486:	e8 81       	ld	r30, Y
    2488:	f9 81       	ldd	r31, Y+1	; 0x01
    248a:	01 93       	st	Z+, r16
    248c:	f9 83       	std	Y+1, r31	; 0x01
    248e:	e8 83       	st	Y, r30
    2490:	06 c0       	rjmp	.+12     	; 0x249e <fputc+0x3c>
    2492:	e8 85       	ldd	r30, Y+8	; 0x08
    2494:	f9 85       	ldd	r31, Y+9	; 0x09
    2496:	80 2f       	mov	r24, r16
    2498:	09 95       	icall
    249a:	00 97       	sbiw	r24, 0x00	; 0
    249c:	31 f4       	brne	.+12     	; 0x24aa <fputc+0x48>
    249e:	8e 81       	ldd	r24, Y+6	; 0x06
    24a0:	9f 81       	ldd	r25, Y+7	; 0x07
    24a2:	01 96       	adiw	r24, 0x01	; 1
    24a4:	9f 83       	std	Y+7, r25	; 0x07
    24a6:	8e 83       	std	Y+6, r24	; 0x06
    24a8:	02 c0       	rjmp	.+4      	; 0x24ae <fputc+0x4c>
    24aa:	0f ef       	ldi	r16, 0xFF	; 255
    24ac:	1f ef       	ldi	r17, 0xFF	; 255
    24ae:	c8 01       	movw	r24, r16
    24b0:	df 91       	pop	r29
    24b2:	cf 91       	pop	r28
    24b4:	1f 91       	pop	r17
    24b6:	0f 91       	pop	r16
    24b8:	08 95       	ret

000024ba <__ultoa_invert>:
    24ba:	fa 01       	movw	r30, r20
    24bc:	aa 27       	eor	r26, r26
    24be:	28 30       	cpi	r18, 0x08	; 8
    24c0:	51 f1       	breq	.+84     	; 0x2516 <__ultoa_invert+0x5c>
    24c2:	20 31       	cpi	r18, 0x10	; 16
    24c4:	81 f1       	breq	.+96     	; 0x2526 <__ultoa_invert+0x6c>
    24c6:	e8 94       	clt
    24c8:	6f 93       	push	r22
    24ca:	6e 7f       	andi	r22, 0xFE	; 254
    24cc:	6e 5f       	subi	r22, 0xFE	; 254
    24ce:	7f 4f       	sbci	r23, 0xFF	; 255
    24d0:	8f 4f       	sbci	r24, 0xFF	; 255
    24d2:	9f 4f       	sbci	r25, 0xFF	; 255
    24d4:	af 4f       	sbci	r26, 0xFF	; 255
    24d6:	b1 e0       	ldi	r27, 0x01	; 1
    24d8:	3e d0       	rcall	.+124    	; 0x2556 <__ultoa_invert+0x9c>
    24da:	b4 e0       	ldi	r27, 0x04	; 4
    24dc:	3c d0       	rcall	.+120    	; 0x2556 <__ultoa_invert+0x9c>
    24de:	67 0f       	add	r22, r23
    24e0:	78 1f       	adc	r23, r24
    24e2:	89 1f       	adc	r24, r25
    24e4:	9a 1f       	adc	r25, r26
    24e6:	a1 1d       	adc	r26, r1
    24e8:	68 0f       	add	r22, r24
    24ea:	79 1f       	adc	r23, r25
    24ec:	8a 1f       	adc	r24, r26
    24ee:	91 1d       	adc	r25, r1
    24f0:	a1 1d       	adc	r26, r1
    24f2:	6a 0f       	add	r22, r26
    24f4:	71 1d       	adc	r23, r1
    24f6:	81 1d       	adc	r24, r1
    24f8:	91 1d       	adc	r25, r1
    24fa:	a1 1d       	adc	r26, r1
    24fc:	20 d0       	rcall	.+64     	; 0x253e <__ultoa_invert+0x84>
    24fe:	09 f4       	brne	.+2      	; 0x2502 <__ultoa_invert+0x48>
    2500:	68 94       	set
    2502:	3f 91       	pop	r19
    2504:	2a e0       	ldi	r18, 0x0A	; 10
    2506:	26 9f       	mul	r18, r22
    2508:	11 24       	eor	r1, r1
    250a:	30 19       	sub	r19, r0
    250c:	30 5d       	subi	r19, 0xD0	; 208
    250e:	31 93       	st	Z+, r19
    2510:	de f6       	brtc	.-74     	; 0x24c8 <__ultoa_invert+0xe>
    2512:	cf 01       	movw	r24, r30
    2514:	08 95       	ret
    2516:	46 2f       	mov	r20, r22
    2518:	47 70       	andi	r20, 0x07	; 7
    251a:	40 5d       	subi	r20, 0xD0	; 208
    251c:	41 93       	st	Z+, r20
    251e:	b3 e0       	ldi	r27, 0x03	; 3
    2520:	0f d0       	rcall	.+30     	; 0x2540 <__ultoa_invert+0x86>
    2522:	c9 f7       	brne	.-14     	; 0x2516 <__ultoa_invert+0x5c>
    2524:	f6 cf       	rjmp	.-20     	; 0x2512 <__ultoa_invert+0x58>
    2526:	46 2f       	mov	r20, r22
    2528:	4f 70       	andi	r20, 0x0F	; 15
    252a:	40 5d       	subi	r20, 0xD0	; 208
    252c:	4a 33       	cpi	r20, 0x3A	; 58
    252e:	18 f0       	brcs	.+6      	; 0x2536 <__ultoa_invert+0x7c>
    2530:	49 5d       	subi	r20, 0xD9	; 217
    2532:	31 fd       	sbrc	r19, 1
    2534:	40 52       	subi	r20, 0x20	; 32
    2536:	41 93       	st	Z+, r20
    2538:	02 d0       	rcall	.+4      	; 0x253e <__ultoa_invert+0x84>
    253a:	a9 f7       	brne	.-22     	; 0x2526 <__ultoa_invert+0x6c>
    253c:	ea cf       	rjmp	.-44     	; 0x2512 <__ultoa_invert+0x58>
    253e:	b4 e0       	ldi	r27, 0x04	; 4
    2540:	a6 95       	lsr	r26
    2542:	97 95       	ror	r25
    2544:	87 95       	ror	r24
    2546:	77 95       	ror	r23
    2548:	67 95       	ror	r22
    254a:	ba 95       	dec	r27
    254c:	c9 f7       	brne	.-14     	; 0x2540 <__ultoa_invert+0x86>
    254e:	00 97       	sbiw	r24, 0x00	; 0
    2550:	61 05       	cpc	r22, r1
    2552:	71 05       	cpc	r23, r1
    2554:	08 95       	ret
    2556:	9b 01       	movw	r18, r22
    2558:	ac 01       	movw	r20, r24
    255a:	0a 2e       	mov	r0, r26
    255c:	06 94       	lsr	r0
    255e:	57 95       	ror	r21
    2560:	47 95       	ror	r20
    2562:	37 95       	ror	r19
    2564:	27 95       	ror	r18
    2566:	ba 95       	dec	r27
    2568:	c9 f7       	brne	.-14     	; 0x255c <__ultoa_invert+0xa2>
    256a:	62 0f       	add	r22, r18
    256c:	73 1f       	adc	r23, r19
    256e:	84 1f       	adc	r24, r20
    2570:	95 1f       	adc	r25, r21
    2572:	a0 1d       	adc	r26, r0
    2574:	08 95       	ret

00002576 <_exit>:
    2576:	f8 94       	cli

00002578 <__stop_program>:
    2578:	ff cf       	rjmp	.-2      	; 0x2578 <__stop_program>
