
MIDIHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00001b9c  00001c30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800140  00800140  00001c70  2**0
                  ALLOC
  3 .stab         00000f90  00000000  00000000  00001c70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000030d  00000000  00000000  00002c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000890  00000000  00000000  00002f10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d764  00000000  00000000  000037a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033e8  00000000  00000000  00010f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005cd2  00000000  00000000  000142ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001958  00000000  00000000  00019fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004fbf  00000000  00000000  0001b918  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000976d  00000000  00000000  000208d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a28  00000000  00000000  0002a044  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1d c1       	rjmp	.+570    	; 0x23c <__ctors_end>
       2:	00 00       	nop
       4:	3a c1       	rjmp	.+628    	; 0x27a <__bad_interrupt>
       6:	00 00       	nop
       8:	38 c1       	rjmp	.+624    	; 0x27a <__bad_interrupt>
       a:	00 00       	nop
       c:	36 c1       	rjmp	.+620    	; 0x27a <__bad_interrupt>
       e:	00 00       	nop
      10:	34 c1       	rjmp	.+616    	; 0x27a <__bad_interrupt>
      12:	00 00       	nop
      14:	32 c1       	rjmp	.+612    	; 0x27a <__bad_interrupt>
      16:	00 00       	nop
      18:	30 c1       	rjmp	.+608    	; 0x27a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2e c1       	rjmp	.+604    	; 0x27a <__bad_interrupt>
      1e:	00 00       	nop
      20:	2c c1       	rjmp	.+600    	; 0x27a <__bad_interrupt>
      22:	00 00       	nop
      24:	2a c1       	rjmp	.+596    	; 0x27a <__bad_interrupt>
      26:	00 00       	nop
      28:	b3 c6       	rjmp	.+3430   	; 0xd90 <__vector_10>
      2a:	00 00       	nop
      2c:	26 c1       	rjmp	.+588    	; 0x27a <__bad_interrupt>
      2e:	00 00       	nop
      30:	24 c1       	rjmp	.+584    	; 0x27a <__bad_interrupt>
      32:	00 00       	nop
      34:	22 c1       	rjmp	.+580    	; 0x27a <__bad_interrupt>
      36:	00 00       	nop
      38:	20 c1       	rjmp	.+576    	; 0x27a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1e c1       	rjmp	.+572    	; 0x27a <__bad_interrupt>
      3e:	00 00       	nop
      40:	1c c1       	rjmp	.+568    	; 0x27a <__bad_interrupt>
      42:	00 00       	nop
      44:	1a c1       	rjmp	.+564    	; 0x27a <__bad_interrupt>
      46:	00 00       	nop
      48:	18 c1       	rjmp	.+560    	; 0x27a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	16 c1       	rjmp	.+556    	; 0x27a <__bad_interrupt>
      4e:	00 00       	nop
      50:	14 c1       	rjmp	.+552    	; 0x27a <__bad_interrupt>
      52:	00 00       	nop
      54:	12 c1       	rjmp	.+548    	; 0x27a <__bad_interrupt>
      56:	00 00       	nop
      58:	10 c1       	rjmp	.+544    	; 0x27a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0e c1       	rjmp	.+540    	; 0x27a <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c c1       	rjmp	.+536    	; 0x27a <__bad_interrupt>
      62:	00 00       	nop
      64:	0a c1       	rjmp	.+532    	; 0x27a <__bad_interrupt>
      66:	00 00       	nop
      68:	08 c1       	rjmp	.+528    	; 0x27a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	06 c1       	rjmp	.+524    	; 0x27a <__bad_interrupt>
      6e:	00 00       	nop
      70:	04 c1       	rjmp	.+520    	; 0x27a <__bad_interrupt>
      72:	00 00       	nop
      74:	02 c1       	rjmp	.+516    	; 0x27a <__bad_interrupt>
      76:	00 00       	nop
      78:	00 c1       	rjmp	.+512    	; 0x27a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fe c0       	rjmp	.+508    	; 0x27a <__bad_interrupt>
      7e:	00 00       	nop
      80:	fc c0       	rjmp	.+504    	; 0x27a <__bad_interrupt>
      82:	00 00       	nop
      84:	fa c0       	rjmp	.+500    	; 0x27a <__bad_interrupt>
      86:	00 00       	nop
      88:	f8 c0       	rjmp	.+496    	; 0x27a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f6 c0       	rjmp	.+492    	; 0x27a <__bad_interrupt>
      8e:	00 00       	nop
      90:	f4 c0       	rjmp	.+488    	; 0x27a <__bad_interrupt>
      92:	00 00       	nop
      94:	f2 c0       	rjmp	.+484    	; 0x27a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4286>:
      98:	1b 5b 33 36 6d 4d 49 44 49 20 48 6f 73 74 20 44     .[36mMIDI Host D
      a8:	65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b     emo running....[
      b8:	33 37 6d 00                                         37m.

000000bc <__c.4298>:
      bc:	4d 49 44 49 20 4e 6f 74 65 20 25 73 20 2d 20 43     MIDI Note %s - C
      cc:	68 61 6e 6e 65 6c 20 25 64 2c 20 50 69 74 63 68     hannel %d, Pitch
      dc:	20 25 64 2c 20 56 65 6c 6f 63 69 74 79 20 25 64      %d, Velocity %d
      ec:	0d 0a 00                                            ...

000000ef <__c.4317>:
      ef:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
      ff:	0d 0a 00                                            ...

00000102 <__c.4322>:
     102:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     112:	68 65 64 2e 0d 0a 00                                hed....

00000119 <__c.4329>:
     119:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     129:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     139:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

00000146 <__c.4331>:
     146:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     156:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4d 49 44 49     Not a Valid MIDI
     166:	20 43 6c 61 73 73 20 44 65 76 69 63 65 2e 0d 0a      Class Device...
     176:	00                                                  .

00000177 <__c.4333>:
     177:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     187:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     197:	6f 6e 2e 0d 0a 00                                   on....

0000019d <__c.4335>:
     19d:	4d 49 44 49 20 44 65 76 69 63 65 20 45 6e 75 6d     MIDI Device Enum
     1ad:	65 72 61 74 65 64 2e 0d 0a 00                       erated....

000001b7 <__c.4340>:
     1b7:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     1c7:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     1d7:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

000001e6 <__c.4347>:
     1e6:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     1f6:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     206:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     216:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     226:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     236:	1b 5b 33 37 6d 00                                   .[37m.

0000023c <__ctors_end>:
     23c:	11 24       	eor	r1, r1
     23e:	1f be       	out	0x3f, r1	; 63
     240:	cf ef       	ldi	r28, 0xFF	; 255
     242:	d0 e2       	ldi	r29, 0x20	; 32
     244:	de bf       	out	0x3e, r29	; 62
     246:	cd bf       	out	0x3d, r28	; 61

00000248 <__do_copy_data>:
     248:	11 e0       	ldi	r17, 0x01	; 1
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b1 e0       	ldi	r27, 0x01	; 1
     24e:	ec e9       	ldi	r30, 0x9C	; 156
     250:	fb e1       	ldi	r31, 0x1B	; 27
     252:	00 e0       	ldi	r16, 0x00	; 0
     254:	0b bf       	out	0x3b, r16	; 59
     256:	02 c0       	rjmp	.+4      	; 0x25c <__do_copy_data+0x14>
     258:	07 90       	elpm	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	a0 34       	cpi	r26, 0x40	; 64
     25e:	b1 07       	cpc	r27, r17
     260:	d9 f7       	brne	.-10     	; 0x258 <__do_copy_data+0x10>
     262:	1b be       	out	0x3b, r1	; 59

00000264 <__do_clear_bss>:
     264:	11 e0       	ldi	r17, 0x01	; 1
     266:	a0 e4       	ldi	r26, 0x40	; 64
     268:	b1 e0       	ldi	r27, 0x01	; 1
     26a:	01 c0       	rjmp	.+2      	; 0x26e <.do_clear_bss_start>

0000026c <.do_clear_bss_loop>:
     26c:	1d 92       	st	X+, r1

0000026e <.do_clear_bss_start>:
     26e:	a3 36       	cpi	r26, 0x63	; 99
     270:	b1 07       	cpc	r27, r17
     272:	e1 f7       	brne	.-8      	; 0x26c <.do_clear_bss_loop>
     274:	f8 d0       	rcall	.+496    	; 0x466 <main>
     276:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <_exit>

0000027a <__bad_interrupt>:
     27a:	c2 ce       	rjmp	.-636    	; 0x0 <__vectors>

0000027c <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     27c:	9b b1       	in	r25, 0x0b	; 11
     27e:	9f 70       	andi	r25, 0x0F	; 15
     280:	98 2b       	or	r25, r24
     282:	9b b9       	out	0x0b, r25	; 11
			}
     284:	08 95       	ret

00000286 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     286:	84 b7       	in	r24, 0x34	; 52
     288:	87 7f       	andi	r24, 0xF7	; 247
     28a:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     28c:	28 e1       	ldi	r18, 0x18	; 24
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	f8 94       	cli
     292:	20 93 60 00 	sts	0x0060, r18
     296:	10 92 60 00 	sts	0x0060, r1
     29a:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	80 e8       	ldi	r24, 0x80	; 128
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	f8 94       	cli
     2a4:	80 93 61 00 	sts	0x0061, r24
     2a8:	90 93 61 00 	sts	0x0061, r25
     2ac:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2ae:	83 e3       	ldi	r24, 0x33	; 51
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	90 93 cd 00 	sts	0x00CD, r25
     2b6:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2ba:	86 e0       	ldi	r24, 0x06	; 6
     2bc:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2c0:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2c4:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     2c8:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2ca:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2cc:	8a b1       	in	r24, 0x0a	; 10
     2ce:	80 6f       	ori	r24, 0xF0	; 240
     2d0:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2d2:	8b b1       	in	r24, 0x0b	; 11
     2d4:	8f 70       	andi	r24, 0x0F	; 15
     2d6:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     2d8:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     2da:	72 9a       	sbi	0x0e, 2	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
     2dc:	84 b1       	in	r24, 0x04	; 4
     2de:	8f 71       	andi	r24, 0x1F	; 31
     2e0:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
     2e2:	8d b1       	in	r24, 0x0d	; 13
     2e4:	8f 7c       	andi	r24, 0xCF	; 207
     2e6:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
     2e8:	85 b1       	in	r24, 0x05	; 5
     2ea:	80 6e       	ori	r24, 0xE0	; 224
     2ec:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
     2ee:	8e b1       	in	r24, 0x0e	; 14
     2f0:	80 63       	ori	r24, 0x30	; 48
     2f2:	8e b9       	out	0x0e, r24	; 14
	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	Buttons_Init();
	Joystick_Init();
	USB_Init();
     2f4:	32 d5       	rcall	.+2660   	; 0xd5a <USB_Init>
     2f6:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <Serial_CreateStream>

000002fe <CheckJoystickMovement>:
     2fe:	1f 93       	push	r17
}
     300:	cf 93       	push	r28

/** Checks for movement of the board's joystick, and sends corresponding MIDI note on/off
 *  messages to the host.
 */
void CheckJoystickMovement(void)
{
     302:	df 93       	push	r29
     304:	00 d0       	rcall	.+0      	; 0x306 <CheckJoystickMovement+0x8>
     306:	00 d0       	rcall	.+0      	; 0x308 <CheckJoystickMovement+0xa>
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     30c:	13 b1       	in	r17, 0x03	; 3
     30e:	8c b1       	in	r24, 0x0c	; 12
     310:	80 95       	com	r24
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	80 73       	andi	r24, 0x30	; 48
     316:	90 70       	andi	r25, 0x00	; 0
     318:	95 95       	asr	r25
     31a:	87 95       	ror	r24
     31c:	10 95       	com	r17
     31e:	10 7e       	andi	r17, 0xE0	; 224
     320:	18 2b       	or	r17, r24
	uint8_t MIDICommand = 0;
	uint8_t MIDIPitch;

	/* Get current joystick mask, XOR with previous to detect joystick changes */
	uint8_t JoystickStatus  = Joystick_GetStatus();
	uint8_t JoystickChanges = (JoystickStatus ^ PrevJoystickStatus);
     322:	20 91 40 01 	lds	r18, 0x0140
     326:	21 27       	eor	r18, r17
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     328:	8c b1       	in	r24, 0x0c	; 12

	/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
	uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));
     32a:	82 fd       	sbrc	r24, 2
     32c:	02 c0       	rjmp	.+4      	; 0x332 <CheckJoystickMovement+0x34>
     32e:	39 e0       	ldi	r19, 0x09	; 9
     330:	01 c0       	rjmp	.+2      	; 0x334 <CheckJoystickMovement+0x36>
     332:	30 e0       	ldi	r19, 0x00	; 0

	if (JoystickChanges & JOY_LEFT)
     334:	26 ff       	sbrs	r18, 6
     336:	04 c0       	rjmp	.+8      	; 0x340 <CheckJoystickMovement+0x42>
	{
		MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3C;
     338:	9c e3       	ldi	r25, 0x3C	; 60
	/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
	uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));

	if (JoystickChanges & JOY_LEFT)
	{
		MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     33a:	16 ff       	sbrs	r17, 6
     33c:	1a c0       	rjmp	.+52     	; 0x372 <CheckJoystickMovement+0x74>
     33e:	17 c0       	rjmp	.+46     	; 0x36e <CheckJoystickMovement+0x70>
		MIDIPitch   = 0x3C;
	}
	else if (JoystickChanges & JOY_UP)
     340:	27 ff       	sbrs	r18, 7
     342:	04 c0       	rjmp	.+8      	; 0x34c <CheckJoystickMovement+0x4e>
	{
		MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3D;
     344:	9d e3       	ldi	r25, 0x3D	; 61
		MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3C;
	}
	else if (JoystickChanges & JOY_UP)
	{
		MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     346:	17 ff       	sbrs	r17, 7
     348:	14 c0       	rjmp	.+40     	; 0x372 <CheckJoystickMovement+0x74>
     34a:	11 c0       	rjmp	.+34     	; 0x36e <CheckJoystickMovement+0x70>
		MIDIPitch   = 0x3D;
	}
	else if (JoystickChanges & JOY_RIGHT)
     34c:	23 ff       	sbrs	r18, 3
     34e:	04 c0       	rjmp	.+8      	; 0x358 <CheckJoystickMovement+0x5a>
	{
		MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3E;
     350:	9e e3       	ldi	r25, 0x3E	; 62
		MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3D;
	}
	else if (JoystickChanges & JOY_RIGHT)
	{
		MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     352:	13 ff       	sbrs	r17, 3
     354:	0e c0       	rjmp	.+28     	; 0x372 <CheckJoystickMovement+0x74>
     356:	0b c0       	rjmp	.+22     	; 0x36e <CheckJoystickMovement+0x70>
		MIDIPitch   = 0x3E;
	}
	else if (JoystickChanges & JOY_DOWN)
     358:	24 ff       	sbrs	r18, 4
     35a:	04 c0       	rjmp	.+8      	; 0x364 <CheckJoystickMovement+0x66>
	{
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3F;
     35c:	9f e3       	ldi	r25, 0x3F	; 63
		MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3E;
	}
	else if (JoystickChanges & JOY_DOWN)
	{
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     35e:	14 ff       	sbrs	r17, 4
     360:	08 c0       	rjmp	.+16     	; 0x372 <CheckJoystickMovement+0x74>
     362:	05 c0       	rjmp	.+10     	; 0x36e <CheckJoystickMovement+0x70>
		MIDIPitch   = 0x3F;
	}
	else if (JoystickChanges & JOY_PRESS)
     364:	25 ff       	sbrs	r18, 5
     366:	1a c0       	rjmp	.+52     	; 0x39c <CheckJoystickMovement+0x9e>
	{
		MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3B;
     368:	9b e3       	ldi	r25, 0x3B	; 59
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
		MIDIPitch   = 0x3F;
	}
	else if (JoystickChanges & JOY_PRESS)
	{
		MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     36a:	15 ff       	sbrs	r17, 5
     36c:	02 c0       	rjmp	.+4      	; 0x372 <CheckJoystickMovement+0x74>
     36e:	80 e9       	ldi	r24, 0x90	; 144
     370:	01 c0       	rjmp	.+2      	; 0x374 <CheckJoystickMovement+0x76>
     372:	80 e8       	ldi	r24, 0x80	; 128
		MIDIPitch   = 0x3B;
	}

	if (MIDICommand)
	{
		MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t)
     374:	28 2f       	mov	r18, r24
     376:	22 95       	swap	r18
     378:	2f 70       	andi	r18, 0x0F	; 15
     37a:	29 83       	std	Y+1, r18	; 0x01
     37c:	83 2b       	or	r24, r19
     37e:	8a 83       	std	Y+2, r24	; 0x02
     380:	9b 83       	std	Y+3, r25	; 0x03
     382:	80 e4       	ldi	r24, 0x40	; 64
     384:	8c 83       	std	Y+4, r24	; 0x04
				.Data1       = MIDICommand | Channel,
				.Data2       = MIDIPitch,
				.Data3       = MIDI_STANDARD_VELOCITY,
			};

		MIDI_Host_SendEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent);
     386:	87 e0       	ldi	r24, 0x07	; 7
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	be 01       	movw	r22, r28
     38c:	6f 5f       	subi	r22, 0xFF	; 255
     38e:	7f 4f       	sbci	r23, 0xFF	; 255
     390:	0e 94 43 0a 	call	0x1486	; 0x1486 <MIDI_Host_SendEventPacket>
		MIDI_Host_Flush(&Keyboard_MIDI_Interface);
     394:	87 e0       	ldi	r24, 0x07	; 7
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	0e 94 09 0a 	call	0x1412	; 0x1412 <MIDI_Host_Flush>
	}

	PrevJoystickStatus = JoystickStatus;
     39c:	10 93 40 01 	sts	0x0140, r17
}
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	08 95       	ret

000003b0 <JoystickHost_Task>:

/** Task to manage an enumerated USB MIDI device once connected, to display received
 *  note events from the host and send note changes in response to the board's joystick.
 */
void JoystickHost_Task(void)
{
     3b0:	0f 93       	push	r16
     3b2:	1f 93       	push	r17
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	00 d0       	rcall	.+0      	; 0x3ba <JoystickHost_Task+0xa>
     3ba:	00 d0       	rcall	.+0      	; 0x3bc <JoystickHost_Task+0xc>
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     3c0:	80 91 4e 01 	lds	r24, 0x014E
     3c4:	8b 30       	cpi	r24, 0x0B	; 11
     3c6:	09 f0       	breq	.+2      	; 0x3ca <JoystickHost_Task+0x1a>
     3c8:	45 c0       	rjmp	.+138    	; 0x454 <JoystickHost_Task+0xa4>
     3ca:	37 c0       	rjmp	.+110    	; 0x43a <JoystickHost_Task+0x8a>
	  return;

	MIDI_EventPacket_t MIDIEvent;
	while (MIDI_Host_ReceiveEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent))
	{
		bool NoteOnEvent  = (MIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_ON));
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
		bool NoteOffEvent = (MIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_OFF));

		/* Display note events from the host */
		if (NoteOnEvent || NoteOffEvent)
     3ce:	89 30       	cpi	r24, 0x09	; 9
     3d0:	29 f0       	breq	.+10     	; 0x3dc <JoystickHost_Task+0x2c>
     3d2:	88 30       	cpi	r24, 0x08	; 8
     3d4:	a1 f5       	brne	.+104    	; 0x43e <JoystickHost_Task+0x8e>
		{
			printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
     3d6:	83 e0       	ldi	r24, 0x03	; 3
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	02 c0       	rjmp	.+4      	; 0x3e0 <JoystickHost_Task+0x30>
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	2d b7       	in	r18, 0x3d	; 61
     3e2:	3e b7       	in	r19, 0x3e	; 62
     3e4:	2a 50       	subi	r18, 0x0A	; 10
     3e6:	30 40       	sbci	r19, 0x00	; 0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	3e bf       	out	0x3e, r19	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	2d bf       	out	0x3d, r18	; 61
     3f2:	ed b7       	in	r30, 0x3d	; 61
     3f4:	fe b7       	in	r31, 0x3e	; 62
     3f6:	31 96       	adiw	r30, 0x01	; 1
     3f8:	ad b7       	in	r26, 0x3d	; 61
     3fa:	be b7       	in	r27, 0x3e	; 62
     3fc:	12 96       	adiw	r26, 0x02	; 2
     3fe:	1c 93       	st	X, r17
     400:	0e 93       	st	-X, r16
     402:	11 97       	sbiw	r26, 0x01	; 1
     404:	93 83       	std	Z+3, r25	; 0x03
     406:	82 83       	std	Z+2, r24	; 0x02
																				   ((MIDIEvent.Data1 & 0x0F) + 1),
     408:	8a 81       	ldd	r24, Y+2	; 0x02
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	8f 70       	andi	r24, 0x0F	; 15
     40e:	90 70       	andi	r25, 0x00	; 0
		bool NoteOffEvent = (MIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_OFF));

		/* Display note events from the host */
		if (NoteOnEvent || NoteOffEvent)
		{
			printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	95 83       	std	Z+5, r25	; 0x05
     414:	84 83       	std	Z+4, r24	; 0x04
     416:	8b 81       	ldd	r24, Y+3	; 0x03
     418:	86 83       	std	Z+6, r24	; 0x06
     41a:	17 82       	std	Z+7, r1	; 0x07
     41c:	8c 81       	ldd	r24, Y+4	; 0x04
     41e:	80 87       	std	Z+8, r24	; 0x08
     420:	11 86       	std	Z+9, r1	; 0x09
     422:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <printf_P>
     426:	2d b7       	in	r18, 0x3d	; 61
     428:	3e b7       	in	r19, 0x3e	; 62
     42a:	26 5f       	subi	r18, 0xF6	; 246
     42c:	3f 4f       	sbci	r19, 0xFF	; 255
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	3e bf       	out	0x3e, r19	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	2d bf       	out	0x3d, r18	; 61
     438:	02 c0       	rjmp	.+4      	; 0x43e <JoystickHost_Task+0x8e>
     43a:	0c eb       	ldi	r16, 0xBC	; 188
     43c:	10 e0       	ldi	r17, 0x00	; 0
{
	if (USB_HostState != HOST_STATE_Configured)
	  return;

	MIDI_EventPacket_t MIDIEvent;
	while (MIDI_Host_ReceiveEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent))
     43e:	87 e0       	ldi	r24, 0x07	; 7
     440:	91 e0       	ldi	r25, 0x01	; 1
     442:	be 01       	movw	r22, r28
     444:	6f 5f       	subi	r22, 0xFF	; 255
     446:	7f 4f       	sbci	r23, 0xFF	; 255
     448:	0e 94 6f 0a 	call	0x14de	; 0x14de <MIDI_Host_ReceiveEventPacket>
     44c:	88 23       	and	r24, r24
     44e:	09 f0       	breq	.+2      	; 0x452 <JoystickHost_Task+0xa2>
     450:	bd cf       	rjmp	.-134    	; 0x3cc <JoystickHost_Task+0x1c>
																				   ((MIDIEvent.Data1 & 0x0F) + 1),
																				   MIDIEvent.Data2, MIDIEvent.Data3);
		}
	}

	CheckJoystickMovement();
     452:	55 df       	rcall	.-342    	; 0x2fe <CheckJoystickMovement>
     454:	0f 90       	pop	r0
}
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	08 95       	ret

00000466 <main>:
     466:	0f df       	rcall	.-482    	; 0x286 <SetupHardware>
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     468:	88 e9       	ldi	r24, 0x98	; 152

	puts_P(PSTR(ESC_FG_CYAN "MIDI Host Demo running.\r\n" ESC_FG_WHITE));
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 03 0b 	call	0x1606	; 0x1606 <puts_P>
     470:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     472:	04 df       	rcall	.-504    	; 0x27c <LEDs_SetAllLEDs>
     474:	78 94       	sei
     476:	9c df       	rcall	.-200    	; 0x3b0 <JoystickHost_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     478:	87 e0       	ldi	r24, 0x07	; 7
	GlobalInterruptEnable();

	for (;;)
	{
		JoystickHost_Task();
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	fa d7       	rcall	.+4084   	; 0x1472 <MIDI_Host_USBTask>

		MIDI_Host_USBTask(&Keyboard_MIDI_Interface);
     47e:	05 d7       	rcall	.+3594   	; 0x128a <USB_USBTask>
     480:	fa cf       	rjmp	.-12     	; 0x476 <main+0x10>

00000482 <EVENT_USB_Host_DeviceAttached>:
     482:	8f ee       	ldi	r24, 0xEF	; 239
     484:	90 e0       	ldi	r25, 0x00	; 0
		USB_USBTask();
     486:	0e 94 03 0b 	call	0x1606	; 0x1606 <puts_P>
     48a:	80 ea       	ldi	r24, 0xA0	; 160
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     48c:	f7 ce       	rjmp	.-530    	; 0x27c <LEDs_SetAllLEDs>

0000048e <EVENT_USB_Host_DeviceUnattached>:
     48e:	82 e0       	ldi	r24, 0x02	; 2
}
     490:	91 e0       	ldi	r25, 0x01	; 1
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     492:	0e 94 03 0b 	call	0x1606	; 0x1606 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     496:	80 e1       	ldi	r24, 0x10	; 16
     498:	f1 ce       	rjmp	.-542    	; 0x27c <LEDs_SetAllLEDs>

0000049a <EVENT_USB_Host_DeviceEnumerationComplete>:
     49a:	cf 93       	push	r28
}
     49c:	df 93       	push	r29

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	c2 50       	subi	r28, 0x02	; 2
     4a4:	d2 40       	sbci	r29, 0x02	; 2
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	f8 94       	cli
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	0f be       	out	0x3f, r0	; 63
     4ae:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     4b0:	80 ea       	ldi	r24, 0xA0	; 160
     4b2:	e4 de       	rcall	.-568    	; 0x27c <LEDs_SetAllLEDs>
     4b4:	81 e0       	ldi	r24, 0x01	; 1

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     4b6:	be 01       	movw	r22, r28
     4b8:	6f 5f       	subi	r22, 0xFF	; 255
     4ba:	7f 4f       	sbci	r23, 0xFF	; 255
     4bc:	ae 01       	movw	r20, r28
     4be:	4d 5f       	subi	r20, 0xFD	; 253
     4c0:	5f 4f       	sbci	r21, 0xFF	; 255
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	32 e0       	ldi	r19, 0x02	; 2
     4c6:	f7 d4       	rcall	.+2542   	; 0xeb6 <USB_Host_GetDeviceConfigDescriptor>
     4c8:	88 23       	and	r24, r24
     4ca:	19 f0       	breq	.+6      	; 0x4d2 <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
     4cc:	89 e1       	ldi	r24, 0x19	; 25
     4ce:	91 e0       	ldi	r25, 0x01	; 1
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     4d0:	13 c0       	rjmp	.+38     	; 0x4f8 <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
     4d2:	69 81       	ldd	r22, Y+1	; 0x01
     4d4:	7a 81       	ldd	r23, Y+2	; 0x02
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (MIDI_Host_ConfigurePipes(&Keyboard_MIDI_Interface,
     4d6:	87 e0       	ldi	r24, 0x07	; 7
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	ae 01       	movw	r20, r28
     4dc:	4d 5f       	subi	r20, 0xFD	; 253
     4de:	5f 4f       	sbci	r21, 0xFF	; 255
     4e0:	07 d7       	rcall	.+3598   	; 0x12f0 <MIDI_Host_ConfigurePipes>
     4e2:	88 23       	and	r24, r24
     4e4:	19 f0       	breq	.+6      	; 0x4ec <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
     4e6:	86 e4       	ldi	r24, 0x46	; 70
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	06 c0       	rjmp	.+12     	; 0x4f8 <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
	                             ConfigDescriptorSize, ConfigDescriptorData) != MIDI_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid MIDI Class Device.\r\n"));
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	a8 d6       	rcall	.+3408   	; 0x1240 <USB_Host_SetDeviceConfiguration>
     4f0:	88 23       	and	r24, r24
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     4f2:	31 f0       	breq	.+12     	; 0x500 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
     4f4:	87 e7       	ldi	r24, 0x77	; 119
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	0e 94 03 0b 	call	0x1606	; 0x1606 <puts_P>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     4fc:	80 e9       	ldi	r24, 0x90	; 144
     4fe:	05 c0       	rjmp	.+10     	; 0x50a <EVENT_USB_Host_DeviceEnumerationComplete+0x70>
     500:	8d e9       	ldi	r24, 0x9D	; 157
     502:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     504:	0e 94 03 0b 	call	0x1606	; 0x1606 <puts_P>
		return;
	}

	puts_P(PSTR("MIDI Device Enumerated.\r\n"));
     508:	80 e6       	ldi	r24, 0x60	; 96
     50a:	b8 de       	rcall	.-656    	; 0x27c <LEDs_SetAllLEDs>
     50c:	ce 5f       	subi	r28, 0xFE	; 254
     50e:	dd 4f       	sbci	r29, 0xFD	; 253
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	de bf       	out	0x3e, r29	; 62
}
     516:	0f be       	out	0x3f, r0	; 63
     518:	cd bf       	out	0x3d, r28	; 61
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	08 95       	ret

00000520 <EVENT_USB_Host_HostError>:
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	0f 92       	push	r0
     526:	cd b7       	in	r28, 0x3d	; 61
     528:	de b7       	in	r29, 0x3e	; 62

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();
     52a:	89 83       	std	Y+1, r24	; 0x01
     52c:	ae d3       	rcall	.+1884   	; 0xc8a <USB_Disable>
     52e:	00 d0       	rcall	.+0      	; 0x530 <EVENT_USB_Host_HostError+0x10>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     530:	00 d0       	rcall	.+0      	; 0x532 <EVENT_USB_Host_HostError+0x12>
     532:	ed b7       	in	r30, 0x3d	; 61
     534:	fe b7       	in	r31, 0x3e	; 62
     536:	31 96       	adiw	r30, 0x01	; 1
     538:	27 eb       	ldi	r18, 0xB7	; 183
     53a:	31 e0       	ldi	r19, 0x01	; 1
     53c:	ad b7       	in	r26, 0x3d	; 61
     53e:	be b7       	in	r27, 0x3e	; 62
     540:	12 96       	adiw	r26, 0x02	; 2
     542:	3c 93       	st	X, r19
     544:	2e 93       	st	-X, r18
     546:	11 97       	sbiw	r26, 0x01	; 1
     548:	89 81       	ldd	r24, Y+1	; 0x01
     54a:	82 83       	std	Z+2, r24	; 0x02
     54c:	13 82       	std	Z+3, r1	; 0x03
     54e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <printf_P>
     552:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	80 e9       	ldi	r24, 0x90	; 144
     55c:	8f de       	rcall	.-738    	; 0x27c <LEDs_SetAllLEDs>
     55e:	ff cf       	rjmp	.-2      	; 0x55e <EVENT_USB_Host_HostError+0x3e>

00000560 <EVENT_USB_Host_DeviceEnumerationFailed>:
     560:	90 91 4e 01 	lds	r25, 0x014E
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     564:	2d b7       	in	r18, 0x3d	; 61
     566:	3e b7       	in	r19, 0x3e	; 62
     568:	28 50       	subi	r18, 0x08	; 8
     56a:	30 40       	sbci	r19, 0x00	; 0
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	3e bf       	out	0x3e, r19	; 62
     572:	0f be       	out	0x3f, r0	; 63
     574:	2d bf       	out	0x3d, r18	; 61
     576:	ed b7       	in	r30, 0x3d	; 61
     578:	fe b7       	in	r31, 0x3e	; 62
     57a:	31 96       	adiw	r30, 0x01	; 1
     57c:	26 ee       	ldi	r18, 0xE6	; 230
     57e:	31 e0       	ldi	r19, 0x01	; 1
     580:	ad b7       	in	r26, 0x3d	; 61
     582:	be b7       	in	r27, 0x3e	; 62
     584:	12 96       	adiw	r26, 0x02	; 2
     586:	3c 93       	st	X, r19
     588:	2e 93       	st	-X, r18
     58a:	11 97       	sbiw	r26, 0x01	; 1
     58c:	82 83       	std	Z+2, r24	; 0x02
     58e:	13 82       	std	Z+3, r1	; 0x03
     590:	64 83       	std	Z+4, r22	; 0x04
     592:	15 82       	std	Z+5, r1	; 0x05
     594:	96 83       	std	Z+6, r25	; 0x06
     596:	17 82       	std	Z+7, r1	; 0x07
     598:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     59c:	2d b7       	in	r18, 0x3d	; 61
     59e:	3e b7       	in	r19, 0x3e	; 62
     5a0:	28 5f       	subi	r18, 0xF8	; 248
     5a2:	3f 4f       	sbci	r19, 0xFF	; 255
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	f8 94       	cli
     5a8:	3e bf       	out	0x3e, r19	; 62
     5aa:	0f be       	out	0x3f, r0	; 63
     5ac:	2d bf       	out	0x3d, r18	; 61
     5ae:	80 e9       	ldi	r24, 0x90	; 144
     5b0:	65 ce       	rjmp	.-822    	; 0x27c <LEDs_SetAllLEDs>

000005b2 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5b2:	80 91 9e 00 	lds	r24, 0x009E
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	81 70       	andi	r24, 0x01	; 1
     5ba:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     5bc:	20 91 a0 00 	lds	r18, 0x00A0
     5c0:	2d 7f       	andi	r18, 0xFD	; 253
     5c2:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     5c6:	20 91 9e 00 	lds	r18, 0x009E
     5ca:	22 60       	ori	r18, 0x02	; 2
     5cc:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     5d0:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     5d4:	21 fd       	sbrc	r18, 1
     5d6:	fc cf       	rjmp	.-8      	; 0x5d0 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     5d8:	20 91 9e 00 	lds	r18, 0x009E
     5dc:	21 60       	ori	r18, 0x01	; 1
     5de:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     5e2:	10 92 44 01 	sts	0x0144, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     5e6:	20 91 a0 00 	lds	r18, 0x00A0
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	20 72       	andi	r18, 0x20	; 32
     5ee:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     5f0:	40 91 a0 00 	lds	r20, 0x00A0
     5f4:	4f 7d       	andi	r20, 0xDF	; 223
     5f6:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     5fa:	40 91 9f 00 	lds	r20, 0x009F
     5fe:	4f 7d       	andi	r20, 0xDF	; 223
     600:	40 93 9f 00 	sts	0x009F, r20
     604:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     606:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     60a:	55 ff       	sbrs	r21, 5
     60c:	0b c0       	rjmp	.+22     	; 0x624 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     60e:	40 91 9f 00 	lds	r20, 0x009F
     612:	4f 7d       	andi	r20, 0xDF	; 223
     614:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     618:	40 91 9f 00 	lds	r20, 0x009F
     61c:	4d 7f       	andi	r20, 0xFD	; 253
     61e:	40 93 9f 00 	sts	0x009F, r20
     622:	08 c0       	rjmp	.+16     	; 0x634 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     624:	ef ec       	ldi	r30, 0xCF	; 207
     626:	f7 e0       	ldi	r31, 0x07	; 7
     628:	31 97       	sbiw	r30, 0x01	; 1
     62a:	f1 f7       	brne	.-4      	; 0x628 <USB_Host_ResetDevice+0x76>
     62c:	00 c0       	rjmp	.+0      	; 0x62e <USB_Host_ResetDevice+0x7c>
     62e:	00 00       	nop
     630:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     632:	49 f7       	brne	.-46     	; 0x606 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     634:	21 15       	cp	r18, r1
     636:	31 05       	cpc	r19, r1
     638:	29 f0       	breq	.+10     	; 0x644 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     63a:	20 91 a0 00 	lds	r18, 0x00A0
     63e:	20 62       	ori	r18, 0x20	; 32
     640:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     644:	00 97       	sbiw	r24, 0x00	; 0
     646:	29 f4       	brne	.+10     	; 0x652 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     648:	80 91 9e 00 	lds	r24, 0x009E
     64c:	8e 7f       	andi	r24, 0xFE	; 254
     64e:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     652:	80 91 a0 00 	lds	r24, 0x00A0
     656:	82 60       	ori	r24, 0x02	; 2
     658:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     65c:	08 95       	ret

0000065e <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     65e:	40 91 9e 00 	lds	r20, 0x009E
     662:	50 e0       	ldi	r21, 0x00	; 0
     664:	41 70       	andi	r20, 0x01	; 1
     666:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     668:	20 91 a0 00 	lds	r18, 0x00A0
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	20 72       	andi	r18, 0x20	; 32
     670:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     672:	90 91 a0 00 	lds	r25, 0x00A0
     676:	9f 7d       	andi	r25, 0xDF	; 223
     678:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     67c:	90 91 9f 00 	lds	r25, 0x009F
     680:	9f 7d       	andi	r25, 0xDF	; 223
     682:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     686:	90 91 9e 00 	lds	r25, 0x009E
     68a:	91 60       	ori	r25, 0x01	; 1
     68c:	90 93 9e 00 	sts	0x009E, r25
     690:	26 c0       	rjmp	.+76     	; 0x6de <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     692:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     696:	95 ff       	sbrs	r25, 5
     698:	06 c0       	rjmp	.+12     	; 0x6a6 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     69a:	90 91 9f 00 	lds	r25, 0x009F
     69e:	9f 7d       	andi	r25, 0xDF	; 223
     6a0:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     6a4:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     6a6:	90 91 4e 01 	lds	r25, 0x014E
     6aa:	91 30       	cpi	r25, 0x01	; 1
     6ac:	d9 f0       	breq	.+54     	; 0x6e4 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     6ae:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     6b2:	94 ff       	sbrs	r25, 4
     6b4:	09 c0       	rjmp	.+18     	; 0x6c8 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     6b6:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     6ba:	80 91 a6 00 	lds	r24, 0x00A6
     6be:	8f 7e       	andi	r24, 0xEF	; 239
     6c0:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     6c4:	82 e0       	ldi	r24, 0x02	; 2

			break;
     6c6:	0f c0       	rjmp	.+30     	; 0x6e6 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     6c8:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     6cc:	91 ff       	sbrs	r25, 1
     6ce:	07 c0       	rjmp	.+14     	; 0x6de <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     6d0:	80 91 a6 00 	lds	r24, 0x00A6
     6d4:	8d 7f       	andi	r24, 0xFD	; 253
     6d6:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     6da:	83 e0       	ldi	r24, 0x03	; 3

			break;
     6dc:	04 c0       	rjmp	.+8      	; 0x6e6 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     6de:	88 23       	and	r24, r24
     6e0:	c1 f6       	brne	.-80     	; 0x692 <USB_Host_WaitMS+0x34>
     6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     6e4:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     6e6:	41 15       	cp	r20, r1
     6e8:	51 05       	cpc	r21, r1
     6ea:	29 f4       	brne	.+10     	; 0x6f6 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     6ec:	90 91 9e 00 	lds	r25, 0x009E
     6f0:	9e 7f       	andi	r25, 0xFE	; 254
     6f2:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     6f6:	21 15       	cp	r18, r1
     6f8:	31 05       	cpc	r19, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     6fc:	90 91 a0 00 	lds	r25, 0x00A0
     700:	90 62       	ori	r25, 0x20	; 32
     702:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     706:	08 95       	ret

00000708 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	28 97       	sbiw	r28, 0x08	; 8
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     720:	80 91 4e 01 	lds	r24, 0x014E
     724:	85 30       	cpi	r24, 0x05	; 5
     726:	09 f4       	brne	.+2      	; 0x72a <USB_Host_ProcessNextHostState+0x22>
     728:	99 c0       	rjmp	.+306    	; 0x85c <USB_Host_ProcessNextHostState+0x154>
     72a:	86 30       	cpi	r24, 0x06	; 6
     72c:	68 f4       	brcc	.+26     	; 0x748 <USB_Host_ProcessNextHostState+0x40>
     72e:	82 30       	cpi	r24, 0x02	; 2
     730:	c1 f1       	breq	.+112    	; 0x7a2 <USB_Host_ProcessNextHostState+0x9a>
     732:	83 30       	cpi	r24, 0x03	; 3
     734:	18 f4       	brcc	.+6      	; 0x73c <USB_Host_ProcessNextHostState+0x34>
     736:	88 23       	and	r24, r24
     738:	a1 f0       	breq	.+40     	; 0x762 <USB_Host_ProcessNextHostState+0x5a>
     73a:	04 c1       	rjmp	.+520    	; 0x944 <USB_Host_ProcessNextHostState+0x23c>
     73c:	83 30       	cpi	r24, 0x03	; 3
     73e:	d9 f1       	breq	.+118    	; 0x7b6 <USB_Host_ProcessNextHostState+0xae>
     740:	84 30       	cpi	r24, 0x04	; 4
     742:	09 f0       	breq	.+2      	; 0x746 <USB_Host_ProcessNextHostState+0x3e>
     744:	ff c0       	rjmp	.+510    	; 0x944 <USB_Host_ProcessNextHostState+0x23c>
     746:	62 c0       	rjmp	.+196    	; 0x80c <USB_Host_ProcessNextHostState+0x104>
     748:	87 30       	cpi	r24, 0x07	; 7
     74a:	09 f4       	brne	.+2      	; 0x74e <USB_Host_ProcessNextHostState+0x46>
     74c:	9e c0       	rjmp	.+316    	; 0x88a <USB_Host_ProcessNextHostState+0x182>
     74e:	87 30       	cpi	r24, 0x07	; 7
     750:	08 f4       	brcc	.+2      	; 0x754 <USB_Host_ProcessNextHostState+0x4c>
     752:	8f c0       	rjmp	.+286    	; 0x872 <USB_Host_ProcessNextHostState+0x16a>
     754:	88 30       	cpi	r24, 0x08	; 8
     756:	09 f4       	brne	.+2      	; 0x75a <USB_Host_ProcessNextHostState+0x52>
     758:	b8 c0       	rjmp	.+368    	; 0x8ca <USB_Host_ProcessNextHostState+0x1c2>
     75a:	89 30       	cpi	r24, 0x09	; 9
     75c:	09 f0       	breq	.+2      	; 0x760 <USB_Host_ProcessNextHostState+0x58>
     75e:	f2 c0       	rjmp	.+484    	; 0x944 <USB_Host_ProcessNextHostState+0x23c>
     760:	d9 c0       	rjmp	.+434    	; 0x914 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     762:	00 91 41 01 	lds	r16, 0x0141
     766:	10 91 42 01 	lds	r17, 0x0142
     76a:	01 15       	cp	r16, r1
     76c:	11 05       	cpc	r17, r1
     76e:	09 f4       	brne	.+2      	; 0x772 <USB_Host_ProcessNextHostState+0x6a>
     770:	e9 c0       	rjmp	.+466    	; 0x944 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	74 df       	rcall	.-280    	; 0x65e <USB_Host_WaitMS>
     776:	68 2f       	mov	r22, r24
     778:	88 23       	and	r24, r24
     77a:	31 f0       	breq	.+12     	; 0x788 <USB_Host_ProcessNextHostState+0x80>
     77c:	80 91 43 01 	lds	r24, 0x0143
				{
					USB_HostState = PostWaitState;
     780:	80 93 4e 01 	sts	0x014E, r24
     784:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     786:	d2 c0       	rjmp	.+420    	; 0x92c <USB_Host_ProcessNextHostState+0x224>
					break;
     788:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
     78a:	10 40       	sbci	r17, 0x00	; 0
     78c:	10 93 42 01 	sts	0x0142, r17
     790:	00 93 41 01 	sts	0x0141, r16
     794:	01 15       	cp	r16, r1
     796:	11 05       	cpc	r17, r1
     798:	09 f0       	breq	.+2      	; 0x79c <USB_Host_ProcessNextHostState+0x94>
     79a:	d4 c0       	rjmp	.+424    	; 0x944 <USB_Host_ProcessNextHostState+0x23c>
     79c:	80 91 43 01 	lds	r24, 0x0143
				  USB_HostState = PostWaitState;
     7a0:	07 c0       	rjmp	.+14     	; 0x7b0 <USB_Host_ProcessNextHostState+0xa8>
     7a2:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     7a4:	93 e0       	ldi	r25, 0x03	; 3
     7a6:	90 93 42 01 	sts	0x0142, r25
     7aa:	80 93 41 01 	sts	0x0141, r24
     7ae:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     7b0:	80 93 4e 01 	sts	0x014E, r24
     7b4:	c7 c0       	rjmp	.+398    	; 0x944 <USB_Host_ProcessNextHostState+0x23c>
			break;
     7b6:	80 91 41 01 	lds	r24, 0x0141
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     7ba:	90 91 42 01 	lds	r25, 0x0142
     7be:	9c 01       	movw	r18, r24
     7c0:	21 50       	subi	r18, 0x01	; 1
     7c2:	30 40       	sbci	r19, 0x00	; 0
     7c4:	30 93 42 01 	sts	0x0142, r19
     7c8:	20 93 41 01 	sts	0x0141, r18
     7cc:	00 97       	sbiw	r24, 0x00	; 0
     7ce:	39 f0       	breq	.+14     	; 0x7de <USB_Host_ProcessNextHostState+0xd6>
     7d0:	8f ec       	ldi	r24, 0xCF	; 207
     7d2:	97 e0       	ldi	r25, 0x07	; 7
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	f1 f7       	brne	.-4      	; 0x7d4 <USB_Host_ProcessNextHostState+0xcc>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <USB_Host_ProcessNextHostState+0xd2>
     7da:	00 00       	nop
     7dc:	b3 c0       	rjmp	.+358    	; 0x944 <USB_Host_ProcessNextHostState+0x23c>
     7de:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     7e0:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     7e4:	80 61       	ori	r24, 0x10	; 16
     7e6:	80 93 d8 00 	sts	0x00D8, r24
     7ea:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     7ee:	8b 7f       	andi	r24, 0xFB	; 251
     7f0:	80 93 dd 00 	sts	0x00DD, r24
     7f4:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     7f8:	80 61       	ori	r24, 0x10	; 16
     7fa:	80 93 d7 00 	sts	0x00D7, r24
     7fe:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     802:	82 60       	ori	r24, 0x02	; 2
     804:	80 93 dd 00 	sts	0x00DD, r24
     808:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     80a:	d2 cf       	rjmp	.-92     	; 0x7b0 <USB_Host_ProcessNextHostState+0xa8>
     80c:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     810:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     812:	98 c0       	rjmp	.+304    	; 0x944 <USB_Host_ProcessNextHostState+0x23c>
     814:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     818:	8e 7f       	andi	r24, 0xFE	; 254
     81a:	80 93 9f 00 	sts	0x009F, r24
     81e:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     822:	8d 7f       	andi	r24, 0xFD	; 253
     824:	80 93 9f 00 	sts	0x009F, r24
     828:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     82c:	8d 7f       	andi	r24, 0xFD	; 253
     82e:	80 93 df 00 	sts	0x00DF, r24
     832:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     836:	82 60       	ori	r24, 0x02	; 2
     838:	80 93 de 00 	sts	0x00DE, r24
     83c:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     840:	81 60       	ori	r24, 0x01	; 1
     842:	80 93 9e 00 	sts	0x009E, r24
     846:	bd d1       	rcall	.+890    	; 0xbc2 <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     848:	10 92 4e 01 	sts	0x014E, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     84c:	84 e6       	ldi	r24, 0x64	; 100
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	90 93 42 01 	sts	0x0142, r25
     854:	80 93 41 01 	sts	0x0141, r24
     858:	85 e0       	ldi	r24, 0x05	; 5
     85a:	59 c0       	rjmp	.+178    	; 0x90e <USB_Host_ProcessNextHostState+0x206>
     85c:	aa de       	rcall	.-684    	; 0x5b2 <USB_Host_ResetDevice>
     85e:	10 92 4e 01 	sts	0x014E, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     862:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	90 93 42 01 	sts	0x0142, r25
     86a:	80 93 41 01 	sts	0x0141, r24
     86e:	86 e0       	ldi	r24, 0x06	; 6
     870:	4e c0       	rjmp	.+156    	; 0x90e <USB_Host_ProcessNextHostState+0x206>
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     878:	20 e4       	ldi	r18, 0x40	; 64
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	01 e0       	ldi	r16, 0x01	; 1
     87e:	1b d1       	rcall	.+566    	; 0xab6 <Pipe_ConfigurePipe>
     880:	88 23       	and	r24, r24
     882:	09 f4       	brne	.+2      	; 0x886 <USB_Host_ProcessNextHostState+0x17e>
     884:	4f c0       	rjmp	.+158    	; 0x924 <USB_Host_ProcessNextHostState+0x21c>
     886:	87 e0       	ldi	r24, 0x07	; 7
     888:	93 cf       	rjmp	.-218    	; 0x7b0 <USB_Host_ProcessNextHostState+0xa8>
     88a:	a6 e4       	ldi	r26, 0x46	; 70
     88c:	b1 e0       	ldi	r27, 0x01	; 1
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     88e:	e5 e1       	ldi	r30, 0x15	; 21
     890:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     892:	88 e0       	ldi	r24, 0x08	; 8
     894:	01 90       	ld	r0, Z+
     896:	0d 92       	st	X+, r0
     898:	81 50       	subi	r24, 0x01	; 1
     89a:	e1 f7       	brne	.-8      	; 0x894 <USB_Host_ProcessNextHostState+0x18c>
     89c:	10 92 a7 00 	sts	0x00A7, r1
     8a0:	ce 01       	movw	r24, r28
     8a2:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     8a4:	cf d3       	rcall	.+1950   	; 0x1044 <USB_Host_SendControlRequest>
     8a6:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     8a8:	88 23       	and	r24, r24
     8aa:	09 f0       	breq	.+2      	; 0x8ae <USB_Host_ProcessNextHostState+0x1a6>
     8ac:	3e c0       	rjmp	.+124    	; 0x92a <USB_Host_ProcessNextHostState+0x222>
     8ae:	88 85       	ldd	r24, Y+8	; 0x08
     8b0:	80 93 25 01 	sts	0x0125, r24
     8b4:	7e de       	rcall	.-772    	; 0x5b2 <USB_Host_ResetDevice>
     8b6:	10 92 4e 01 	sts	0x014E, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     8ba:	88 ec       	ldi	r24, 0xC8	; 200
     8bc:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
     8be:	90 93 42 01 	sts	0x0142, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     8c2:	80 93 41 01 	sts	0x0141, r24
     8c6:	88 e0       	ldi	r24, 0x08	; 8
     8c8:	22 c0       	rjmp	.+68     	; 0x90e <USB_Host_ProcessNextHostState+0x206>
     8ca:	20 91 25 01 	lds	r18, 0x0125
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     8d6:	01 e0       	ldi	r16, 0x01	; 1
     8d8:	ee d0       	rcall	.+476    	; 0xab6 <Pipe_ConfigurePipe>
     8da:	88 23       	and	r24, r24
     8dc:	19 f1       	breq	.+70     	; 0x924 <USB_Host_ProcessNextHostState+0x21c>
     8de:	a6 e4       	ldi	r26, 0x46	; 70
     8e0:	b1 e0       	ldi	r27, 0x01	; 1
     8e2:	ed e1       	ldi	r30, 0x1D	; 29
     8e4:	f1 e0       	ldi	r31, 0x01	; 1
     8e6:	88 e0       	ldi	r24, 0x08	; 8
     8e8:	01 90       	ld	r0, Z+
     8ea:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     8ec:	81 50       	subi	r24, 0x01	; 1
     8ee:	e1 f7       	brne	.-8      	; 0x8e8 <USB_Host_ProcessNextHostState+0x1e0>
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	a7 d3       	rcall	.+1870   	; 0x1044 <USB_Host_SendControlRequest>
     8f6:	68 2f       	mov	r22, r24
     8f8:	88 23       	and	r24, r24
     8fa:	b9 f4       	brne	.+46     	; 0x92a <USB_Host_ProcessNextHostState+0x222>
     8fc:	10 92 4e 01 	sts	0x014E, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     900:	84 e6       	ldi	r24, 0x64	; 100
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	90 93 42 01 	sts	0x0142, r25
     908:	80 93 41 01 	sts	0x0141, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     90c:	89 e0       	ldi	r24, 0x09	; 9
     90e:	80 93 43 01 	sts	0x0143, r24
     912:	18 c0       	rjmp	.+48     	; 0x944 <USB_Host_ProcessNextHostState+0x23c>
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	80 93 a1 00 	sts	0x00A1, r24
     91a:	8a e0       	ldi	r24, 0x0A	; 10
     91c:	80 93 4e 01 	sts	0x014E, r24
     920:	bc dd       	rcall	.-1160   	; 0x49a <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     922:	10 c0       	rjmp	.+32     	; 0x944 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	84 e0       	ldi	r24, 0x04	; 4
     928:	01 c0       	rjmp	.+2      	; 0x92c <USB_Host_ProcessNextHostState+0x224>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     92a:	83 e0       	ldi	r24, 0x03	; 3
     92c:	90 91 4e 01 	lds	r25, 0x014E

			EVENT_USB_Host_DeviceEnumerationComplete();
     930:	91 30       	cpi	r25, 0x01	; 1
     932:	41 f0       	breq	.+16     	; 0x944 <USB_Host_ProcessNextHostState+0x23c>
			break;
     934:	15 de       	rcall	.-982    	; 0x560 <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     936:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     93a:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     93c:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     940:	a6 dd       	rcall	.-1204   	; 0x48e <EVENT_USB_Host_DeviceUnattached>
     942:	bb d1       	rcall	.+886    	; 0xcba <USB_ResetInterface>
     944:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     94a:	de bf       	out	0x3e, r29	; 62
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	cd bf       	out	0x3d, r28	; 61
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     954:	1f 91       	pop	r17
     956:	0f 91       	pop	r16

		USB_ResetInterface();
     958:	08 95       	ret

0000095a <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     95a:	af 92       	push	r10
     95c:	bf 92       	push	r11
     95e:	cf 92       	push	r12
     960:	df 92       	push	r13
     962:	ff 92       	push	r15
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	5c 01       	movw	r10, r24
     96e:	eb 01       	movw	r28, r22
     970:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     972:	80 91 aa 00 	lds	r24, 0x00AA
     976:	8f 7c       	andi	r24, 0xCF	; 207
     978:	80 62       	ori	r24, 0x20	; 32
     97a:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     97e:	57 d1       	rcall	.+686    	; 0xc2e <Pipe_WaitUntilReady>
     980:	f8 2e       	mov	r15, r24
     982:	88 23       	and	r24, r24
     984:	b1 f5       	brne	.+108    	; 0x9f2 <Pipe_Write_Stream_LE+0x98>
     986:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     988:	d1 04       	cpc	r13, r1
     98a:	41 f0       	breq	.+16     	; 0x99c <Pipe_Write_Stream_LE+0x42>
     98c:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     98e:	00 81       	ld	r16, Z
     990:	11 81       	ldd	r17, Z+1	; 0x01
     992:	c0 1b       	sub	r28, r16
     994:	d1 0b       	sbc	r29, r17
     996:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     998:	1b 1d       	adc	r17, r11
     99a:	01 c0       	rjmp	.+2      	; 0x99e <Pipe_Write_Stream_LE+0x44>
     99c:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     99e:	aa 24       	eor	r10, r10
     9a0:	bb 24       	eor	r11, r11
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <Pipe_Write_Stream_LE+0x90>
     9a4:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     9a8:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     9aa:	16 c0       	rjmp	.+44     	; 0x9d8 <Pipe_Write_Stream_LE+0x7e>
     9ac:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     9b0:	8b 77       	andi	r24, 0x7B	; 123
     9b2:	80 93 a6 00 	sts	0x00A6, r24
     9b6:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     9b8:	d1 04       	cpc	r13, r1
     9ba:	51 f0       	breq	.+20     	; 0x9d0 <Pipe_Write_Stream_LE+0x76>
     9bc:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     9be:	80 81       	ld	r24, Z
     9c0:	91 81       	ldd	r25, Z+1	; 0x01
     9c2:	8a 0d       	add	r24, r10
     9c4:	9b 1d       	adc	r25, r11
     9c6:	91 83       	std	Z+1, r25	; 0x01
     9c8:	80 83       	st	Z, r24
     9ca:	44 e0       	ldi	r20, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     9cc:	f4 2e       	mov	r15, r20
     9ce:	11 c0       	rjmp	.+34     	; 0x9f2 <Pipe_Write_Stream_LE+0x98>
     9d0:	2e d1       	rcall	.+604    	; 0xc2e <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     9d2:	88 23       	and	r24, r24
     9d4:	51 f0       	breq	.+20     	; 0x9ea <Pipe_Write_Stream_LE+0x90>
     9d6:	0c c0       	rjmp	.+24     	; 0x9f0 <Pipe_Write_Stream_LE+0x96>
     9d8:	f8 01       	movw	r30, r16
     9da:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     9dc:	8f 01       	movw	r16, r30
     9de:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     9e2:	21 97       	sbiw	r28, 0x01	; 1
     9e4:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     9e6:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     9e8:	b1 1c       	adc	r11, r1
     9ea:	20 97       	sbiw	r28, 0x00	; 0
     9ec:	d9 f6       	brne	.-74     	; 0x9a4 <Pipe_Write_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <Pipe_Write_Stream_LE+0x98>
     9f0:	f8 2e       	mov	r15, r24
     9f2:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     9f4:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     9f6:	cf 91       	pop	r28
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	ff 90       	pop	r15
     9fe:	df 90       	pop	r13
     a00:	cf 90       	pop	r12
     a02:	bf 90       	pop	r11
     a04:	af 90       	pop	r10
     a06:	08 95       	ret

00000a08 <Pipe_Read_Stream_LE>:
     a08:	af 92       	push	r10
     a0a:	bf 92       	push	r11
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     a0c:	cf 92       	push	r12
     a0e:	df 92       	push	r13
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	5c 01       	movw	r10, r24
     a1c:	eb 01       	movw	r28, r22
     a1e:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     a20:	80 91 aa 00 	lds	r24, 0x00AA
     a24:	8f 7c       	andi	r24, 0xCF	; 207
     a26:	80 61       	ori	r24, 0x10	; 16
     a28:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     a2c:	00 d1       	rcall	.+512    	; 0xc2e <Pipe_WaitUntilReady>
     a2e:	f8 2e       	mov	r15, r24
     a30:	88 23       	and	r24, r24
     a32:	b1 f5       	brne	.+108    	; 0xaa0 <Pipe_Read_Stream_LE+0x98>
     a34:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     a36:	d1 04       	cpc	r13, r1
     a38:	41 f0       	breq	.+16     	; 0xa4a <Pipe_Read_Stream_LE+0x42>
     a3a:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     a3c:	00 81       	ld	r16, Z
     a3e:	11 81       	ldd	r17, Z+1	; 0x01
     a40:	c0 1b       	sub	r28, r16
     a42:	d1 0b       	sbc	r29, r17
     a44:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     a46:	1b 1d       	adc	r17, r11
     a48:	01 c0       	rjmp	.+2      	; 0xa4c <Pipe_Read_Stream_LE+0x44>
     a4a:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     a4c:	aa 24       	eor	r10, r10
     a4e:	bb 24       	eor	r11, r11
     a50:	23 c0       	rjmp	.+70     	; 0xa98 <Pipe_Read_Stream_LE+0x90>
     a52:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     a56:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     a58:	16 c0       	rjmp	.+44     	; 0xa86 <Pipe_Read_Stream_LE+0x7e>
     a5a:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     a5e:	8e 77       	andi	r24, 0x7E	; 126
     a60:	80 93 a6 00 	sts	0x00A6, r24
     a64:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     a66:	d1 04       	cpc	r13, r1
     a68:	51 f0       	breq	.+20     	; 0xa7e <Pipe_Read_Stream_LE+0x76>
     a6a:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     a6c:	80 81       	ld	r24, Z
     a6e:	91 81       	ldd	r25, Z+1	; 0x01
     a70:	8a 0d       	add	r24, r10
     a72:	9b 1d       	adc	r25, r11
     a74:	91 83       	std	Z+1, r25	; 0x01
     a76:	80 83       	st	Z, r24
     a78:	64 e0       	ldi	r22, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     a7a:	f6 2e       	mov	r15, r22
     a7c:	11 c0       	rjmp	.+34     	; 0xaa0 <Pipe_Read_Stream_LE+0x98>
     a7e:	d7 d0       	rcall	.+430    	; 0xc2e <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     a80:	88 23       	and	r24, r24
     a82:	51 f0       	breq	.+20     	; 0xa98 <Pipe_Read_Stream_LE+0x90>
     a84:	0c c0       	rjmp	.+24     	; 0xa9e <Pipe_Read_Stream_LE+0x96>
     a86:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     a8a:	f8 01       	movw	r30, r16
     a8c:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     a8e:	8f 01       	movw	r16, r30
     a90:	21 97       	sbiw	r28, 0x01	; 1
     a92:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     a94:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     a96:	b1 1c       	adc	r11, r1
     a98:	20 97       	sbiw	r28, 0x00	; 0
     a9a:	d9 f6       	brne	.-74     	; 0xa52 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <Pipe_Read_Stream_LE+0x98>
     a9e:	f8 2e       	mov	r15, r24
     aa0:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     aa2:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	ff 90       	pop	r15
     aac:	df 90       	pop	r13
     aae:	cf 90       	pop	r12
     ab0:	bf 90       	pop	r11
     ab2:	af 90       	pop	r10
     ab4:	08 95       	ret

00000ab6 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     ab6:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     ab8:	58 2f       	mov	r21, r24
     aba:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     abc:	87 ff       	sbrs	r24, 7
     abe:	02 c0       	rjmp	.+4      	; 0xac4 <Pipe_ConfigurePipe+0xe>
     ac0:	80 e1       	ldi	r24, 0x10	; 16
     ac2:	01 c0       	rjmp	.+2      	; 0xac6 <Pipe_ConfigurePipe+0x10>
     ac4:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     ac6:	57 30       	cpi	r21, 0x07	; 7
     ac8:	08 f0       	brcs	.+2      	; 0xacc <Pipe_ConfigurePipe+0x16>
     aca:	57 c0       	rjmp	.+174    	; 0xb7a <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     acc:	66 23       	and	r22, r22
     ace:	09 f4       	brne	.+2      	; 0xad2 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     ad0:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     ad2:	4f 70       	andi	r20, 0x0F	; 15
     ad4:	62 95       	swap	r22
     ad6:	66 0f       	add	r22, r22
     ad8:	66 0f       	add	r22, r22
     ada:	60 7c       	andi	r22, 0xC0	; 192
     adc:	64 2b       	or	r22, r20
     ade:	68 2b       	or	r22, r24
     ae0:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     ae2:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ae4:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     ae8:	45 17       	cp	r20, r21
     aea:	a9 f4       	brne	.+42     	; 0xb16 <Pipe_ConfigurePipe+0x60>
     aec:	04 c0       	rjmp	.+8      	; 0xaf6 <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     aee:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     af0:	88 0f       	add	r24, r24
     af2:	99 1f       	adc	r25, r25
     af4:	03 c0       	rjmp	.+6      	; 0xafc <Pipe_ConfigurePipe+0x46>
     af6:	88 e0       	ldi	r24, 0x08	; 8
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     afc:	82 17       	cp	r24, r18
     afe:	93 07       	cpc	r25, r19
     b00:	10 f4       	brcc	.+4      	; 0xb06 <Pipe_ConfigurePipe+0x50>
     b02:	75 30       	cpi	r23, 0x05	; 5
     b04:	a1 f7       	brne	.-24     	; 0xaee <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     b06:	87 2f       	mov	r24, r23
     b08:	82 95       	swap	r24
     b0a:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     b0c:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     b0e:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     b10:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     b12:	e0 e0       	ldi	r30, 0x00	; 0
     b14:	08 c0       	rjmp	.+16     	; 0xb26 <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     b16:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     b1a:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     b1e:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     b22:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     b26:	81 ff       	sbrs	r24, 1
     b28:	20 c0       	rjmp	.+64     	; 0xb6a <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b2a:	90 91 a9 00 	lds	r25, 0x00A9
     b2e:	9e 7f       	andi	r25, 0xFE	; 254
     b30:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     b34:	90 91 ab 00 	lds	r25, 0x00AB
     b38:	9d 7f       	andi	r25, 0xFD	; 253
     b3a:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     b3e:	90 91 a9 00 	lds	r25, 0x00A9
     b42:	91 60       	ori	r25, 0x01	; 1
     b44:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     b48:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     b4c:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     b50:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     b54:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     b58:	80 91 a9 00 	lds	r24, 0x00A9
     b5c:	80 62       	ori	r24, 0x20	; 32
     b5e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     b62:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     b66:	87 ff       	sbrs	r24, 7
     b68:	08 c0       	rjmp	.+16     	; 0xb7a <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     b6a:	4f 5f       	subi	r20, 0xFF	; 255
     b6c:	47 30       	cpi	r20, 0x07	; 7
     b6e:	09 f0       	breq	.+2      	; 0xb72 <Pipe_ConfigurePipe+0xbc>
     b70:	b9 cf       	rjmp	.-142    	; 0xae4 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b72:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	01 c0       	rjmp	.+2      	; 0xb7c <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     b7a:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     b7c:	0f 91       	pop	r16
     b7e:	08 95       	ret

00000b80 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     b80:	ff 92       	push	r15
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
     b8c:	ec 01       	movw	r28, r24
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     b8e:	ff 24       	eor	r15, r15
     b90:	0d c0       	rjmp	.+26     	; 0xbac <Pipe_ConfigurePipeTable+0x2c>
	{
		if (!(Table[i].Address))
     b92:	88 81       	ld	r24, Y
     b94:	88 23       	and	r24, r24
     b96:	41 f0       	breq	.+16     	; 0xba8 <Pipe_ConfigurePipeTable+0x28>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     b98:	29 81       	ldd	r18, Y+1	; 0x01
     b9a:	3a 81       	ldd	r19, Y+2	; 0x02
     b9c:	6c 81       	ldd	r22, Y+4	; 0x04
     b9e:	4b 81       	ldd	r20, Y+3	; 0x03
     ba0:	0d 81       	ldd	r16, Y+5	; 0x05
     ba2:	89 df       	rcall	.-238    	; 0xab6 <Pipe_ConfigurePipe>
     ba4:	88 23       	and	r24, r24
     ba6:	31 f0       	breq	.+12     	; 0xbb4 <Pipe_ConfigurePipeTable+0x34>
     ba8:	f3 94       	inc	r15
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     baa:	26 96       	adiw	r28, 0x06	; 6
     bac:	f1 16       	cp	r15, r17
     bae:	89 f7       	brne	.-30     	; 0xb92 <Pipe_ConfigurePipeTable+0x12>
     bb0:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}
	
	return true;
     bb2:	01 c0       	rjmp	.+2      	; 0xbb6 <Pipe_ConfigurePipeTable+0x36>
     bb4:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
     bb6:	df 91       	pop	r29
		}
	}
	
	return true;
}
     bb8:	cf 91       	pop	r28
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	ff 90       	pop	r15
     bc0:	08 95       	ret

00000bc2 <Pipe_ClearPipes>:
     bc2:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     bcc:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     bd0:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     bd4:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     bd8:	90 91 a9 00 	lds	r25, 0x00A9
     bdc:	9e 7f       	andi	r25, 0xFE	; 254
     bde:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     be2:	8f 5f       	subi	r24, 0xFF	; 255
     be4:	87 30       	cpi	r24, 0x07	; 7
     be6:	81 f7       	brne	.-32     	; 0xbc8 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     be8:	08 95       	ret

00000bea <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     bea:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     bee:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     bf2:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     bf4:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     bf8:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     bfc:	27 ff       	sbrs	r18, 7
     bfe:	0c c0       	rjmp	.+24     	; 0xc18 <Pipe_IsEndpointBound+0x2e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     c00:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     c04:	53 2f       	mov	r21, r19
     c06:	5f 70       	andi	r21, 0x0F	; 15
     c08:	30 ff       	sbrs	r19, 0
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <Pipe_IsEndpointBound+0x26>
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	01 c0       	rjmp	.+2      	; 0xc12 <Pipe_IsEndpointBound+0x28>
     c10:	20 e8       	ldi	r18, 0x80	; 128
     c12:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     c14:	28 17       	cp	r18, r24
     c16:	49 f0       	breq	.+18     	; 0xc2a <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c18:	9f 5f       	subi	r25, 0xFF	; 255
     c1a:	97 30       	cpi	r25, 0x07	; 7
     c1c:	59 f7       	brne	.-42     	; 0xbf4 <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c1e:	84 2f       	mov	r24, r20
     c20:	8f 70       	andi	r24, 0x0F	; 15
     c22:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     c2a:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     c2c:	08 95       	ret

00000c2e <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     c2e:	80 91 a2 00 	lds	r24, 0x00A2
     c32:	90 91 a3 00 	lds	r25, 0x00A3
     c36:	45 e6       	ldi	r20, 0x65	; 101
     c38:	01 c0       	rjmp	.+2      	; 0xc3c <Pipe_WaitUntilReady+0xe>
     c3a:	c9 01       	movw	r24, r18
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     c3c:	20 91 aa 00 	lds	r18, 0x00AA
     c40:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     c42:	20 31       	cpi	r18, 0x10	; 16
     c44:	29 f4       	brne	.+10     	; 0xc50 <Pipe_WaitUntilReady+0x22>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     c46:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     c4a:	20 ff       	sbrs	r18, 0
     c4c:	05 c0       	rjmp	.+10     	; 0xc58 <Pipe_WaitUntilReady+0x2a>
     c4e:	17 c0       	rjmp	.+46     	; 0xc7e <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     c50:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     c54:	22 fd       	sbrc	r18, 2
     c56:	13 c0       	rjmp	.+38     	; 0xc7e <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     c58:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     c5c:	21 fd       	sbrc	r18, 1
     c5e:	11 c0       	rjmp	.+34     	; 0xc82 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     c60:	20 91 4e 01 	lds	r18, 0x014E
     c64:	21 30       	cpi	r18, 0x01	; 1
     c66:	79 f0       	breq	.+30     	; 0xc86 <Pipe_WaitUntilReady+0x58>
     c68:	20 91 a2 00 	lds	r18, 0x00A2
     c6c:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     c70:	28 17       	cp	r18, r24
     c72:	39 07       	cpc	r19, r25
     c74:	19 f3       	breq	.-58     	; 0xc3c <Pipe_WaitUntilReady+0xe>
     c76:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     c78:	01 f7       	brne	.-64     	; 0xc3a <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_Timeout;
     c7a:	83 e0       	ldi	r24, 0x03	; 3
     c7c:	08 95       	ret
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     c86:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     c88:	08 95       	ret

00000c8a <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     c8a:	75 d0       	rcall	.+234    	; 0xd76 <USB_INT_DisableAllInterrupts>
     c8c:	7c d0       	rcall	.+248    	; 0xd86 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c8e:	e0 ee       	ldi	r30, 0xE0	; 224
     c90:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     c92:	80 81       	ld	r24, Z
     c94:	81 60       	ori	r24, 0x01	; 1
     c96:	80 83       	st	Z, r24
     c98:	e8 ed       	ldi	r30, 0xD8	; 216
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     c9c:	80 81       	ld	r24, Z
     c9e:	8f 77       	andi	r24, 0x7F	; 127
     ca0:	80 83       	st	Z, r24
     ca2:	19 bc       	out	0x29, r1	; 41
     ca4:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     ca6:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     ca8:	8c 91       	ld	r24, X
     caa:	8e 7f       	andi	r24, 0xFE	; 254
     cac:	8c 93       	st	X, r24
     cae:	80 81       	ld	r24, Z
     cb0:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     cb2:	80 83       	st	Z, r24
     cb4:	10 92 45 01 	sts	0x0145, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     cb8:	08 95       	ret

00000cba <USB_ResetInterface>:
     cba:	5d d0       	rcall	.+186    	; 0xd76 <USB_INT_DisableAllInterrupts>
}
     cbc:	64 d0       	rcall	.+200    	; 0xd86 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     cbe:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	80 93 d8 00 	sts	0x00D8, r24
     cc8:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     ccc:	80 68       	ori	r24, 0x80	; 128
     cce:	80 93 d8 00 	sts	0x00D8, r24
     cd2:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     cd6:	8f 7d       	andi	r24, 0xDF	; 223
     cd8:	80 93 d8 00 	sts	0x00D8, r24
     cdc:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     ce0:	8f 77       	andi	r24, 0x7F	; 127
     ce2:	80 93 d7 00 	sts	0x00D7, r24
     ce6:	8c e0       	ldi	r24, 0x0C	; 12
     ce8:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     cea:	8e e0       	ldi	r24, 0x0E	; 14
     cec:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     cee:	09 b4       	in	r0, 0x29	; 41
     cf0:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     cf2:	fd cf       	rjmp	.-6      	; 0xcee <USB_ResetInterface+0x34>
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	80 93 4e 01 	sts	0x014E, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     cfa:	10 92 44 01 	sts	0x0144, r1
	USB_Host_ConfigurationNumber = 0;
     cfe:	80 e4       	ldi	r24, 0x40	; 64
     d00:	80 93 25 01 	sts	0x0125, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     d04:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     d08:	80 64       	ori	r24, 0x40	; 64
     d0a:	80 93 d8 00 	sts	0x00D8, r24
     d0e:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d12:	81 60       	ori	r24, 0x01	; 1
     d14:	80 93 dd 00 	sts	0x00DD, r24
     d18:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     d1c:	84 60       	ori	r24, 0x04	; 4
     d1e:	80 93 dd 00 	sts	0x00DD, r24
     d22:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     d26:	8f 7e       	andi	r24, 0xEF	; 239
     d28:	80 93 d7 00 	sts	0x00D7, r24
     d2c:	6f 9a       	sbi	0x0d, 7	; 13
     d2e:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     d30:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     d34:	81 60       	ori	r24, 0x01	; 1
     d36:	80 93 de 00 	sts	0x00DE, r24
     d3a:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     d3e:	84 60       	ori	r24, 0x04	; 4
     d40:	80 93 de 00 	sts	0x00DE, r24
     d44:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     d48:	8e 7f       	andi	r24, 0xFE	; 254
     d4a:	80 93 e0 00 	sts	0x00E0, r24
     d4e:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     d52:	80 61       	ori	r24, 0x10	; 16
     d54:	80 93 d8 00 	sts	0x00D8, r24
     d58:	08 95       	ret

00000d5a <USB_Init>:
     d5a:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     d5e:	80 81       	ld	r24, Z
     d60:	8f 7e       	andi	r24, 0xEF	; 239
     d62:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     d64:	e7 ed       	ldi	r30, 0xD7	; 215
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	81 60       	ori	r24, 0x01	; 1
     d6c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	80 93 45 01 	sts	0x0145, r24

	USB_ResetInterface();
     d74:	a2 cf       	rjmp	.-188    	; 0xcba <USB_ResetInterface>

00000d76 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     d76:	e8 ed       	ldi	r30, 0xD8	; 216
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	8c 7f       	andi	r24, 0xFC	; 252
     d7e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     d80:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     d84:	08 95       	ret

00000d86 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     d86:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     d8a:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     d8e:	08 95       	ret

00000d90 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     d90:	1f 92       	push	r1
     d92:	0f 92       	push	r0
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	0f 92       	push	r0
     d98:	0b b6       	in	r0, 0x3b	; 59
     d9a:	0f 92       	push	r0
     d9c:	11 24       	eor	r1, r1
     d9e:	2f 93       	push	r18
     da0:	3f 93       	push	r19
     da2:	4f 93       	push	r20
     da4:	5f 93       	push	r21
     da6:	6f 93       	push	r22
     da8:	7f 93       	push	r23
     daa:	8f 93       	push	r24
     dac:	9f 93       	push	r25
     dae:	af 93       	push	r26
     db0:	bf 93       	push	r27
     db2:	ef 93       	push	r30
     db4:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     db6:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     dba:	85 ff       	sbrs	r24, 5
     dbc:	0a c0       	rjmp	.+20     	; 0xdd2 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     dbe:	80 91 a0 00 	lds	r24, 0x00A0
     dc2:	85 ff       	sbrs	r24, 5
     dc4:	06 c0       	rjmp	.+12     	; 0xdd2 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     dc6:	80 91 9f 00 	lds	r24, 0x009F
     dca:	8f 7d       	andi	r24, 0xDF	; 223
     dcc:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     dd0:	10 d1       	rcall	.+544    	; 0xff2 <USB_Event_Stub>
     dd2:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     dd6:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     dd8:	15 c0       	rjmp	.+42     	; 0xe04 <__vector_10+0x74>
     dda:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     dde:	81 ff       	sbrs	r24, 1
     de0:	11 c0       	rjmp	.+34     	; 0xe04 <__vector_10+0x74>
     de2:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     de6:	8d 7f       	andi	r24, 0xFD	; 253
     de8:	80 93 9f 00 	sts	0x009F, r24
     dec:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     df0:	8e 7f       	andi	r24, 0xFE	; 254
     df2:	80 93 9f 00 	sts	0x009F, r24
     df6:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     dfa:	8d 7f       	andi	r24, 0xFD	; 253
     dfc:	80 93 a0 00 	sts	0x00A0, r24
     e00:	46 db       	rcall	.-2420   	; 0x48e <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     e02:	5b df       	rcall	.-330    	; 0xcba <USB_ResetInterface>
     e04:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     e08:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     e0a:	15 c0       	rjmp	.+42     	; 0xe36 <__vector_10+0xa6>
     e0c:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     e10:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     e12:	11 c0       	rjmp	.+34     	; 0xe36 <__vector_10+0xa6>
     e14:	80 91 df 00 	lds	r24, 0x00DF
     e18:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     e1a:	80 93 df 00 	sts	0x00DF, r24
     e1e:	77 98       	cbi	0x0e, 7	; 14
     e20:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     e24:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e26:	80 93 dd 00 	sts	0x00DD, r24
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	79 db       	rcall	.-2318   	; 0x520 <EVENT_USB_Host_HostError>
     e2e:	2f db       	rcall	.-2466   	; 0x48e <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	80 93 4e 01 	sts	0x014E, r24
		EVENT_USB_Host_DeviceUnattached();
     e36:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     e3a:	80 ff       	sbrs	r24, 0
     e3c:	17 c0       	rjmp	.+46     	; 0xe6c <__vector_10+0xdc>
     e3e:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     e42:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     e44:	13 c0       	rjmp	.+38     	; 0xe6c <__vector_10+0xdc>
     e46:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     e4a:	8e 7f       	andi	r24, 0xFE	; 254
     e4c:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     e50:	80 91 de 00 	lds	r24, 0x00DE
     e54:	8e 7f       	andi	r24, 0xFE	; 254
     e56:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     e5a:	13 db       	rcall	.-2522   	; 0x482 <EVENT_USB_Host_DeviceAttached>
     e5c:	80 91 a0 00 	lds	r24, 0x00A0
     e60:	82 60       	ori	r24, 0x02	; 2
     e62:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     e66:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     e68:	80 93 4e 01 	sts	0x014E, r24
     e6c:	80 91 df 00 	lds	r24, 0x00DF
     e70:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     e72:	0e c0       	rjmp	.+28     	; 0xe90 <__vector_10+0x100>
     e74:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     e78:	82 ff       	sbrs	r24, 2
     e7a:	0a c0       	rjmp	.+20     	; 0xe90 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     e7c:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     e80:	8b 7f       	andi	r24, 0xFB	; 251
     e82:	80 93 df 00 	sts	0x00DF, r24
     e86:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	6a db       	rcall	.-2348   	; 0x560 <EVENT_USB_Host_DeviceEnumerationFailed>
     e8c:	00 db       	rcall	.-2560   	; 0x48e <EVENT_USB_Host_DeviceUnattached>
     e8e:	15 df       	rcall	.-470    	; 0xcba <USB_ResetInterface>
     e90:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     e92:	ef 91       	pop	r30
     e94:	bf 91       	pop	r27
     e96:	af 91       	pop	r26
     e98:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     e9a:	8f 91       	pop	r24
     e9c:	7f 91       	pop	r23

		USB_ResetInterface();
     e9e:	6f 91       	pop	r22
     ea0:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     ea2:	4f 91       	pop	r20
     ea4:	3f 91       	pop	r19
     ea6:	2f 91       	pop	r18
     ea8:	0f 90       	pop	r0
     eaa:	0b be       	out	0x3b, r0	; 59
     eac:	0f 90       	pop	r0
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	0f 90       	pop	r0
     eb2:	1f 90       	pop	r1
     eb4:	18 95       	reti

00000eb6 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     eb6:	cf 92       	push	r12
     eb8:	df 92       	push	r13
     eba:	ef 92       	push	r14
     ebc:	ff 92       	push	r15
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	29 97       	sbiw	r28, 0x09	; 9
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	cd bf       	out	0x3d, r28	; 61
     ed6:	6b 01       	movw	r12, r22
     ed8:	8a 01       	movw	r16, r20
     eda:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     edc:	90 e8       	ldi	r25, 0x80	; 128
     ede:	90 93 46 01 	sts	0x0146, r25
     ee2:	96 e0       	ldi	r25, 0x06	; 6
     ee4:	90 93 47 01 	sts	0x0147, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     eee:	90 93 49 01 	sts	0x0149, r25
     ef2:	80 93 48 01 	sts	0x0148, r24
     ef6:	10 92 4b 01 	sts	0x014B, r1
     efa:	10 92 4a 01 	sts	0x014A, r1
     efe:	89 e0       	ldi	r24, 0x09	; 9
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	90 93 4d 01 	sts	0x014D, r25
     f06:	80 93 4c 01 	sts	0x014C, r24
     f0a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     f0e:	ce 01       	movw	r24, r28
     f10:	01 96       	adiw	r24, 0x01	; 1
     f12:	98 d0       	rcall	.+304    	; 0x1044 <USB_Host_SendControlRequest>
     f14:	88 23       	and	r24, r24
     f16:	b9 f4       	brne	.+46     	; 0xf46 <USB_Host_GetDeviceConfigDescriptor+0x90>
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     f1a:	9c 81       	ldd	r25, Y+4	; 0x04
     f1c:	f6 01       	movw	r30, r12
     f1e:	91 83       	std	Z+1, r25	; 0x01
     f20:	80 83       	st	Z, r24
     f22:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
     f24:	f9 06       	cpc	r15, r25
     f26:	70 f0       	brcs	.+28     	; 0xf44 <USB_Host_GetDeviceConfigDescriptor+0x8e>
     f28:	90 93 4d 01 	sts	0x014D, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     f2c:	80 93 4c 01 	sts	0x014C, r24
     f30:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     f32:	88 d0       	rcall	.+272    	; 0x1044 <USB_Host_SendControlRequest>
     f34:	88 23       	and	r24, r24
     f36:	39 f4       	brne	.+14     	; 0xf46 <USB_Host_GetDeviceConfigDescriptor+0x90>
     f38:	f8 01       	movw	r30, r16
     f3a:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     f3c:	92 30       	cpi	r25, 0x02	; 2
     f3e:	19 f0       	breq	.+6      	; 0xf46 <USB_Host_GetDeviceConfigDescriptor+0x90>
     f40:	86 e0       	ldi	r24, 0x06	; 6
     f42:	01 c0       	rjmp	.+2      	; 0xf46 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     f44:	85 e0       	ldi	r24, 0x05	; 5
     f46:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     f48:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     f4a:	f8 94       	cli
     f4c:	de bf       	out	0x3e, r29	; 62
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	cd bf       	out	0x3d, r28	; 61
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	ff 90       	pop	r15
     f5c:	ef 90       	pop	r14
     f5e:	df 90       	pop	r13
     f60:	cf 90       	pop	r12
     f62:	08 95       	ret

00000f64 <USB_GetNextDescriptorComp>:
     f64:	af 92       	push	r10
     f66:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     f68:	cf 92       	push	r12
     f6a:	df 92       	push	r13
     f6c:	ef 92       	push	r14
     f6e:	ff 92       	push	r15
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	7c 01       	movw	r14, r24
     f7a:	8b 01       	movw	r16, r22
     f7c:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     f7e:	28 c0       	rjmp	.+80     	; 0xfd0 <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     f80:	f8 01       	movw	r30, r16
     f82:	c0 80       	ld	r12, Z
     f84:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     f86:	f6 01       	movw	r30, r12
     f88:	80 81       	ld	r24, Z
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	9e 01       	movw	r18, r28
     f8e:	8c 17       	cp	r24, r28
     f90:	9d 07       	cpc	r25, r29
     f92:	08 f4       	brcc	.+2      	; 0xf96 <USB_GetNextDescriptorComp+0x32>
     f94:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     f96:	c6 01       	movw	r24, r12
     f98:	82 0f       	add	r24, r18
     f9a:	93 1f       	adc	r25, r19
     f9c:	f8 01       	movw	r30, r16
     f9e:	91 83       	std	Z+1, r25	; 0x01
     fa0:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
     fa2:	f7 01       	movw	r30, r14
     fa4:	80 81       	ld	r24, Z
     fa6:	91 81       	ldd	r25, Z+1	; 0x01
     fa8:	82 1b       	sub	r24, r18
     faa:	93 0b       	sbc	r25, r19
     fac:	91 83       	std	Z+1, r25	; 0x01
     fae:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     fb0:	f8 01       	movw	r30, r16
     fb2:	80 81       	ld	r24, Z
     fb4:	91 81       	ldd	r25, Z+1	; 0x01
     fb6:	f5 01       	movw	r30, r10
     fb8:	09 95       	icall
     fba:	82 30       	cpi	r24, 0x02	; 2
     fbc:	49 f0       	breq	.+18     	; 0xfd0 <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	69 f4       	brne	.+26     	; 0xfdc <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
     fc2:	f8 01       	movw	r30, r16
     fc4:	d1 82       	std	Z+1, r13	; 0x01
     fc6:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
     fc8:	f7 01       	movw	r30, r14
     fca:	d1 83       	std	Z+1, r29	; 0x01
     fcc:	c0 83       	st	Z, r28
     fce:	06 c0       	rjmp	.+12     	; 0xfdc <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     fd0:	f7 01       	movw	r30, r14
     fd2:	c0 81       	ld	r28, Z
     fd4:	d1 81       	ldd	r29, Z+1	; 0x01
     fd6:	20 97       	sbiw	r28, 0x00	; 0
     fd8:	99 f6       	brne	.-90     	; 0xf80 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     fda:	82 e0       	ldi	r24, 0x02	; 2
}
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	ff 90       	pop	r15
     fe6:	ef 90       	pop	r14
     fe8:	df 90       	pop	r13
     fea:	cf 90       	pop	r12
     fec:	bf 90       	pop	r11
     fee:	af 90       	pop	r10
     ff0:	08 95       	ret

00000ff2 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     ff2:	08 95       	ret

00000ff4 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     ffc:	c9 ee       	ldi	r28, 0xE9	; 233
     ffe:	d3 e0       	ldi	r29, 0x03	; 3
    1000:	06 c0       	rjmp	.+12     	; 0x100e <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	2c db       	rcall	.-2472   	; 0x65e <USB_Host_WaitMS>
    1006:	88 23       	and	r24, r24
    1008:	c9 f4       	brne	.+50     	; 0x103c <USB_Host_WaitForIOS+0x48>
    100a:	21 97       	sbiw	r28, 0x01	; 1
    100c:	b1 f0       	breq	.+44     	; 0x103a <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    100e:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1010:	29 f4       	brne	.+10     	; 0x101c <USB_Host_WaitForIOS+0x28>
    1012:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1016:	83 ff       	sbrs	r24, 3
    1018:	f4 cf       	rjmp	.-24     	; 0x1002 <USB_Host_WaitForIOS+0xe>
    101a:	0d c0       	rjmp	.+26     	; 0x1036 <USB_Host_WaitForIOS+0x42>
    101c:	11 30       	cpi	r17, 0x01	; 1
    101e:	29 f4       	brne	.+10     	; 0x102a <USB_Host_WaitForIOS+0x36>
    1020:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1024:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1026:	ed cf       	rjmp	.-38     	; 0x1002 <USB_Host_WaitForIOS+0xe>
    1028:	06 c0       	rjmp	.+12     	; 0x1036 <USB_Host_WaitForIOS+0x42>
    102a:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    102c:	51 f7       	brne	.-44     	; 0x1002 <USB_Host_WaitForIOS+0xe>
    102e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1032:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1034:	e6 cf       	rjmp	.-52     	; 0x1002 <USB_Host_WaitForIOS+0xe>
    1036:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1038:	01 c0       	rjmp	.+2      	; 0x103c <USB_Host_WaitForIOS+0x48>
    103a:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    103c:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	08 95       	ret

00001044 <USB_Host_SendControlRequest>:
    1044:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1046:	ff 92       	push	r15
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1052:	e0 90 9e 00 	lds	r14, 0x009E
    1056:	ff 24       	eor	r15, r15
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	e8 22       	and	r14, r24
    105c:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    105e:	00 91 4c 01 	lds	r16, 0x014C
    1062:	10 91 4d 01 	lds	r17, 0x014D
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1066:	80 91 9e 00 	lds	r24, 0x009E
    106a:	81 60       	ori	r24, 0x01	; 1
    106c:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	f5 da       	rcall	.-2582   	; 0x65e <USB_Host_WaitMS>
    1074:	88 23       	and	r24, r24
    1076:	09 f0       	breq	.+2      	; 0x107a <USB_Host_SendControlRequest+0x36>
    1078:	ca c0       	rjmp	.+404    	; 0x120e <USB_Host_SendControlRequest+0x1ca>
    107a:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    107e:	8f 7c       	andi	r24, 0xCF	; 207
    1080:	80 93 aa 00 	sts	0x00AA, r24
    1084:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1088:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    108c:	8f 7e       	andi	r24, 0xEF	; 239
    108e:	80 93 a6 00 	sts	0x00A6, r24
    1092:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1096:	8f 7b       	andi	r24, 0xBF	; 191
    1098:	80 93 a9 00 	sts	0x00A9, r24
    109c:	88 e0       	ldi	r24, 0x08	; 8
    109e:	e6 e4       	ldi	r30, 0x46	; 70
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    10a0:	f1 e0       	ldi	r31, 0x01	; 1
    10a2:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    10a4:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    10a8:	81 50       	subi	r24, 0x01	; 1
    10aa:	d9 f7       	brne	.-10     	; 0x10a2 <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    10ac:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    10b0:	87 77       	andi	r24, 0x77	; 119
    10b2:	80 93 a6 00 	sts	0x00A6, r24
    10b6:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    10b8:	9d df       	rcall	.-198    	; 0xff4 <USB_Host_WaitForIOS>
    10ba:	88 23       	and	r24, r24
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <USB_Host_SendControlRequest+0x7c>
    10be:	a7 c0       	rjmp	.+334    	; 0x120e <USB_Host_SendControlRequest+0x1ca>
    10c0:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10c4:	80 64       	ori	r24, 0x40	; 64
    10c6:	80 93 a9 00 	sts	0x00A9, r24
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	c8 da       	rcall	.-2672   	; 0x65e <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10ce:	88 23       	and	r24, r24
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <USB_Host_SendControlRequest+0x90>
    10d2:	9d c0       	rjmp	.+314    	; 0x120e <USB_Host_SendControlRequest+0x1ca>
    10d4:	80 91 46 01 	lds	r24, 0x0146
    10d8:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    10da:	4f c0       	rjmp	.+158    	; 0x117a <USB_Host_SendControlRequest+0x136>
    10dc:	80 91 aa 00 	lds	r24, 0x00AA
    10e0:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10e2:	80 61       	ori	r24, 0x10	; 16
    10e4:	80 93 aa 00 	sts	0x00AA, r24
    10e8:	20 97       	sbiw	r28, 0x00	; 0
    10ea:	61 f5       	brne	.+88     	; 0x1144 <USB_Host_SendControlRequest+0x100>
    10ec:	2e c0       	rjmp	.+92     	; 0x114a <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    10ee:	80 91 a9 00 	lds	r24, 0x00A9
    10f2:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10f4:	80 93 a9 00 	sts	0x00A9, r24
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	7c df       	rcall	.-264    	; 0xff4 <USB_Host_WaitForIOS>
    10fc:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    10fe:	09 f0       	breq	.+2      	; 0x1102 <USB_Host_SendControlRequest+0xbe>
    1100:	86 c0       	rjmp	.+268    	; 0x120e <USB_Host_SendControlRequest+0x1ca>
    1102:	80 91 f6 00 	lds	r24, 0x00F6
    1106:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	41 f4       	brne	.+16     	; 0x111e <USB_Host_SendControlRequest+0xda>
    110e:	00 e0       	ldi	r16, 0x00	; 0
    1110:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1112:	05 c0       	rjmp	.+10     	; 0x111e <USB_Host_SendControlRequest+0xda>
    1114:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
    1118:	89 93       	st	Y+, r24
    111a:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    111c:	10 40       	sbci	r17, 0x00	; 0
    111e:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
    1122:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1126:	00 97       	sbiw	r24, 0x00	; 0
    1128:	19 f0       	breq	.+6      	; 0x1130 <USB_Host_SendControlRequest+0xec>
    112a:	01 15       	cp	r16, r1
    112c:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    112e:	91 f7       	brne	.-28     	; 0x1114 <USB_Host_SendControlRequest+0xd0>
    1130:	80 91 a9 00 	lds	r24, 0x00A9
    1134:	80 64       	ori	r24, 0x40	; 64
    1136:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    113a:	80 91 a6 00 	lds	r24, 0x00A6
    113e:	8e 77       	andi	r24, 0x7E	; 126
    1140:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1144:	01 15       	cp	r16, r1
    1146:	11 05       	cpc	r17, r1
    1148:	91 f6       	brne	.-92     	; 0x10ee <USB_Host_SendControlRequest+0xaa>
    114a:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    114e:	8f 7c       	andi	r24, 0xCF	; 207
    1150:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1152:	80 93 aa 00 	sts	0x00AA, r24
    1156:	80 91 a9 00 	lds	r24, 0x00A9
    115a:	8f 7b       	andi	r24, 0xBF	; 191
    115c:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1160:	82 e0       	ldi	r24, 0x02	; 2
    1162:	48 df       	rcall	.-368    	; 0xff4 <USB_Host_WaitForIOS>
    1164:	88 23       	and	r24, r24
    1166:	09 f0       	breq	.+2      	; 0x116a <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1168:	52 c0       	rjmp	.+164    	; 0x120e <USB_Host_SendControlRequest+0x1ca>
    116a:	80 91 a6 00 	lds	r24, 0x00A6
    116e:	8b 77       	andi	r24, 0x7B	; 123
    1170:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1174:	82 e0       	ldi	r24, 0x02	; 2
    1176:	3e df       	rcall	.-388    	; 0xff4 <USB_Host_WaitForIOS>
    1178:	4a c0       	rjmp	.+148    	; 0x120e <USB_Host_SendControlRequest+0x1ca>
    117a:	20 97       	sbiw	r28, 0x00	; 0
    117c:	a1 f1       	breq	.+104    	; 0x11e6 <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    117e:	80 91 aa 00 	lds	r24, 0x00AA
    1182:	8f 7c       	andi	r24, 0xCF	; 207
    1184:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1186:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    118a:	80 91 a9 00 	lds	r24, 0x00A9
    118e:	8f 7b       	andi	r24, 0xBF	; 191
    1190:	80 93 a9 00 	sts	0x00A9, r24
    1194:	1c c0       	rjmp	.+56     	; 0x11ce <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1196:	2e df       	rcall	.-420    	; 0xff4 <USB_Host_WaitForIOS>
    1198:	88 23       	and	r24, r24
    119a:	c9 f5       	brne	.+114    	; 0x120e <USB_Host_SendControlRequest+0x1ca>
    119c:	fe 01       	movw	r30, r28
    119e:	07 c0       	rjmp	.+14     	; 0x11ae <USB_Host_SendControlRequest+0x16a>
    11a0:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11a2:	ef 01       	movw	r28, r30
    11a4:	80 93 af 00 	sts	0x00AF, r24
    11a8:	01 50       	subi	r16, 0x01	; 1
    11aa:	10 40       	sbci	r17, 0x00	; 0
    11ac:	59 f0       	breq	.+22     	; 0x11c4 <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    11ae:	ef 01       	movw	r28, r30
    11b0:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    11b4:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    11b8:	80 91 25 01 	lds	r24, 0x0125
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    11bc:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11be:	28 17       	cp	r18, r24
    11c0:	39 07       	cpc	r19, r25
    11c2:	70 f3       	brcs	.-36     	; 0x11a0 <USB_Host_SendControlRequest+0x15c>
    11c4:	80 91 a6 00 	lds	r24, 0x00A6
    11c8:	8b 77       	andi	r24, 0x7B	; 123
    11ca:	80 93 a6 00 	sts	0x00A6, r24
    11ce:	82 e0       	ldi	r24, 0x02	; 2
    11d0:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    11d2:	11 05       	cpc	r17, r1
    11d4:	01 f7       	brne	.-64     	; 0x1196 <USB_Host_SendControlRequest+0x152>
    11d6:	0e df       	rcall	.-484    	; 0xff4 <USB_Host_WaitForIOS>
    11d8:	88 23       	and	r24, r24
    11da:	c9 f4       	brne	.+50     	; 0x120e <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11dc:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    11e0:	80 64       	ori	r24, 0x40	; 64
    11e2:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11e6:	80 91 aa 00 	lds	r24, 0x00AA
    11ea:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11ec:	80 61       	ori	r24, 0x10	; 16
    11ee:	80 93 aa 00 	sts	0x00AA, r24
    11f2:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11f6:	8f 7b       	andi	r24, 0xBF	; 191
    11f8:	80 93 a9 00 	sts	0x00A9, r24
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	fa de       	rcall	.-524    	; 0xff4 <USB_Host_WaitForIOS>
    1200:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1202:	29 f4       	brne	.+10     	; 0x120e <USB_Host_SendControlRequest+0x1ca>
    1204:	90 91 a6 00 	lds	r25, 0x00A6
    1208:	9e 77       	andi	r25, 0x7E	; 126
    120a:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    120e:	90 91 a9 00 	lds	r25, 0x00A9
    1212:	90 64       	ori	r25, 0x40	; 64
    1214:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1218:	e1 14       	cp	r14, r1
    121a:	f1 04       	cpc	r15, r1
    121c:	29 f4       	brne	.+10     	; 0x1228 <USB_Host_SendControlRequest+0x1e4>
    121e:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1222:	9e 7f       	andi	r25, 0xFE	; 254
    1224:	90 93 9e 00 	sts	0x009E, r25
    1228:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    122a:	90 93 a8 00 	sts	0x00A8, r25
    122e:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    123a:	ff 90       	pop	r15
    123c:	ef 90       	pop	r14
    123e:	08 95       	ret

00001240 <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    1240:	cf 93       	push	r28
    1242:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1244:	10 92 46 01 	sts	0x0146, r1
    1248:	89 e0       	ldi	r24, 0x09	; 9
    124a:	80 93 47 01 	sts	0x0147, r24
    124e:	c0 93 48 01 	sts	0x0148, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1252:	10 92 49 01 	sts	0x0149, r1
    1256:	10 92 4b 01 	sts	0x014B, r1
    125a:	10 92 4a 01 	sts	0x014A, r1
    125e:	10 92 4d 01 	sts	0x014D, r1
    1262:	10 92 4c 01 	sts	0x014C, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1266:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	ea de       	rcall	.-556    	; 0x1044 <USB_Host_SendControlRequest>
    1270:	88 23       	and	r24, r24
    1272:	49 f4       	brne	.+18     	; 0x1286 <USB_Host_SetDeviceConfiguration+0x46>
    1274:	c0 93 44 01 	sts	0x0144, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1278:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    127a:	11 f0       	breq	.+4      	; 0x1280 <USB_Host_SetDeviceConfiguration+0x40>
    127c:	9b e0       	ldi	r25, 0x0B	; 11
    127e:	01 c0       	rjmp	.+2      	; 0x1282 <USB_Host_SetDeviceConfiguration+0x42>
    1280:	9a e0       	ldi	r25, 0x0A	; 10
    1282:	90 93 4e 01 	sts	0x014E, r25
    1286:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1288:	08 95       	ret

0000128a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    128a:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    128c:	c0 91 a7 00 	lds	r28, 0x00A7
    1290:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1292:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1296:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    129a:	36 da       	rcall	.-2964   	; 0x708 <USB_Host_ProcessNextHostState>
    129c:	c0 93 a7 00 	sts	0x00A7, r28
    12a0:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    12a2:	08 95       	ret

000012a4 <DCOMP_MIDI_Host_NextMIDIStreamingInterface>:

	return MIDI_ENUMERROR_NoError;
}

static uint8_t DCOMP_MIDI_Host_NextMIDIStreamingInterface(void* const CurrentDescriptor)
{
    12a4:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    12a6:	81 81       	ldd	r24, Z+1	; 0x01
    12a8:	84 30       	cpi	r24, 0x04	; 4
    12aa:	49 f4       	brne	.+18     	; 0x12be <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass)            &&
    12ac:	85 81       	ldd	r24, Z+5	; 0x05
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	31 f4       	brne	.+12     	; 0x12be <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x1a>
    12b2:	86 81       	ldd	r24, Z+6	; 0x06
    12b4:	83 30       	cpi	r24, 0x03	; 3
    12b6:	19 f4       	brne	.+6      	; 0x12be <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x1a>
		    (Interface->SubClass == AUDIO_CSCP_MIDIStreamingSubclass) &&
    12b8:	87 81       	ldd	r24, Z+7	; 0x07
    12ba:	88 23       	and	r24, r24
    12bc:	11 f0       	breq	.+4      	; 0x12c2 <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    12be:	82 e0       	ldi	r24, 0x02	; 2
    12c0:	08 95       	ret

		if ((Interface->Class    == AUDIO_CSCP_AudioClass)            &&
		    (Interface->SubClass == AUDIO_CSCP_MIDIStreamingSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_StreamingProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    12c2:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    12c4:	08 95       	ret

000012c6 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint>:

static uint8_t DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint(void* const CurrentDescriptor)
{
    12c6:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    12c8:	81 81       	ldd	r24, Z+1	; 0x01
    12ca:	85 30       	cpi	r24, 0x05	; 5
    12cc:	49 f4       	brne	.+18     	; 0x12e0 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
    12ce:	83 81       	ldd	r24, Z+3	; 0x03
    12d0:	83 70       	andi	r24, 0x03	; 3

		if ((EndpointType == EP_TYPE_BULK) && !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    12d2:	82 30       	cpi	r24, 0x02	; 2
    12d4:	39 f4       	brne	.+14     	; 0x12e4 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x1e>
    12d6:	82 81       	ldd	r24, Z+2	; 0x02
    12d8:	88 dc       	rcall	.-1776   	; 0xbea <Pipe_IsEndpointBound>
    12da:	88 23       	and	r24, r24
    12dc:	19 f4       	brne	.+6      	; 0x12e4 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x1e>
    12de:	04 c0       	rjmp	.+8      	; 0x12e8 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x22>
    12e0:	84 30       	cpi	r24, 0x04	; 4
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    12e2:	21 f0       	breq	.+8      	; 0x12ec <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x26>
    12e4:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    12e6:	08 95       	ret
    12e8:	80 e0       	ldi	r24, 0x00	; 0
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if ((EndpointType == EP_TYPE_BULK) && !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
    12ea:	08 95       	ret
    12ec:	81 e0       	ldi	r24, 0x01	; 1
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    12ee:	08 95       	ret

000012f0 <MIDI_Host_ConfigurePipes>:
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    12f0:	af 92       	push	r10
#include "MIDIClassHost.h"

uint8_t MIDI_Host_ConfigurePipes(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                 uint16_t ConfigDescriptorSize,
                                 void* ConfigDescriptorData)
{
    12f2:	bf 92       	push	r11
    12f4:	cf 92       	push	r12
    12f6:	df 92       	push	r13
    12f8:	ef 92       	push	r14
    12fa:	ff 92       	push	r15
    12fc:	0f 93       	push	r16
    12fe:	1f 93       	push	r17
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	00 d0       	rcall	.+0      	; 0x1306 <MIDI_Host_ConfigurePipes+0x16>
    1306:	00 d0       	rcall	.+0      	; 0x1308 <MIDI_Host_ConfigurePipes+0x18>
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	8c 01       	movw	r16, r24
    130e:	7a 83       	std	Y+2, r23	; 0x02
    1310:	69 83       	std	Y+1, r22	; 0x01
    1312:	fa 01       	movw	r30, r20
    1314:	5c 83       	std	Y+4, r21	; 0x04
    1316:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* MIDIInterface   = NULL;

	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));
    1318:	dc 01       	movw	r26, r24
    131a:	1d 96       	adiw	r26, 0x0d	; 13
    131c:	1c 92       	st	X, r1
    131e:	1e 92       	st	-X, r1
    1320:	1c 97       	sbiw	r26, 0x0c	; 12

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1322:	81 81       	ldd	r24, Z+1	; 0x01
    1324:	82 30       	cpi	r24, 0x02	; 2
    1326:	09 f0       	breq	.+2      	; 0x132a <MIDI_Host_ConfigurePipes+0x3a>
    1328:	60 c0       	rjmp	.+192    	; 0x13ea <MIDI_Host_ConfigurePipes+0xfa>
    132a:	aa 24       	eor	r10, r10
    132c:	bb 24       	eor	r11, r11
    132e:	cc 24       	eor	r12, r12
    1330:	dd 24       	eor	r13, r13
    1332:	ee 24       	eor	r14, r14
    1334:	ff 24       	eor	r15, r15
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MIDIInterface) ||
    1336:	a1 14       	cp	r10, r1
    1338:	b1 04       	cpc	r11, r1
    133a:	51 f0       	breq	.+20     	; 0x1350 <MIDI_Host_ConfigurePipes+0x60>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    133c:	ce 01       	movw	r24, r28
    133e:	01 96       	adiw	r24, 0x01	; 1
    1340:	be 01       	movw	r22, r28
    1342:	6d 5f       	subi	r22, 0xFD	; 253
    1344:	7f 4f       	sbci	r23, 0xFF	; 255
    1346:	43 e6       	ldi	r20, 0x63	; 99
    1348:	59 e0       	ldi	r21, 0x09	; 9
    134a:	0c de       	rcall	.-1000   	; 0xf64 <USB_GetNextDescriptorComp>
    134c:	88 23       	and	r24, r24
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MIDIInterface) ||
    134e:	71 f0       	breq	.+28     	; 0x136c <MIDI_Host_ConfigurePipes+0x7c>
    1350:	ce 01       	movw	r24, r28
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1352:	01 96       	adiw	r24, 0x01	; 1
    1354:	be 01       	movw	r22, r28
    1356:	6d 5f       	subi	r22, 0xFD	; 253
    1358:	7f 4f       	sbci	r23, 0xFF	; 255
    135a:	42 e5       	ldi	r20, 0x52	; 82
    135c:	59 e0       	ldi	r21, 0x09	; 9
    135e:	02 de       	rcall	.-1020   	; 0xf64 <USB_GetNextDescriptorComp>
    1360:	88 23       	and	r24, r24
    1362:	09 f0       	breq	.+2      	; 0x1366 <MIDI_Host_ConfigurePipes+0x76>
    1364:	44 c0       	rjmp	.+136    	; 0x13ee <MIDI_Host_ConfigurePipes+0xfe>
    1366:	ab 80       	ldd	r10, Y+3	; 0x03
    1368:	bc 80       	ldd	r11, Y+4	; 0x04
			                              DCOMP_MIDI_Host_NextMIDIStreamingInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return MIDI_ENUMERROR_NoCompatibleInterfaceFound;
			}

			MIDIInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    136a:	e1 cf       	rjmp	.-62     	; 0x132e <MIDI_Host_ConfigurePipes+0x3e>
    136c:	eb 81       	ldd	r30, Y+3	; 0x03
    136e:	fc 81       	ldd	r31, Y+4	; 0x04
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1370:	82 81       	ldd	r24, Z+2	; 0x02
    1372:	87 ff       	sbrs	r24, 7

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1374:	02 c0       	rjmp	.+4      	; 0x137a <MIDI_Host_ConfigurePipes+0x8a>
    1376:	7f 01       	movw	r14, r30
    1378:	01 c0       	rjmp	.+2      	; 0x137c <MIDI_Host_ConfigurePipes+0x8c>
		  DataINEndpoint  = EndpointData;
    137a:	6f 01       	movw	r12, r30
    137c:	e1 14       	cp	r14, r1
		else
		  DataOUTEndpoint = EndpointData;
    137e:	f1 04       	cpc	r15, r1
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1380:	d1 f2       	breq	.-76     	; 0x1336 <MIDI_Host_ConfigurePipes+0x46>
    1382:	c1 14       	cp	r12, r1
    1384:	d1 04       	cpc	r13, r1
    1386:	b9 f2       	breq	.-82     	; 0x1336 <MIDI_Host_ConfigurePipes+0x46>
    1388:	f7 01       	movw	r30, r14
    138a:	84 81       	ldd	r24, Z+4	; 0x04
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	MIDIInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    138c:	95 81       	ldd	r25, Z+5	; 0x05
    138e:	d8 01       	movw	r26, r16
    1390:	12 96       	adiw	r26, 0x02	; 2
    1392:	9c 93       	st	X, r25
    1394:	8e 93       	st	-X, r24
    1396:	11 97       	sbiw	r26, 0x01	; 1
    1398:	82 81       	ldd	r24, Z+2	; 0x02
    139a:	13 96       	adiw	r26, 0x03	; 3
	MIDIInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    139c:	8c 93       	st	X, r24
    139e:	13 97       	sbiw	r26, 0x03	; 3
    13a0:	22 e0       	ldi	r18, 0x02	; 2
    13a2:	14 96       	adiw	r26, 0x04	; 4
	MIDIInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
    13a4:	2c 93       	st	X, r18
    13a6:	14 97       	sbiw	r26, 0x04	; 4
    13a8:	f6 01       	movw	r30, r12
    13aa:	84 81       	ldd	r24, Z+4	; 0x04
	
	MIDIInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    13ac:	95 81       	ldd	r25, Z+5	; 0x05
    13ae:	18 96       	adiw	r26, 0x08	; 8
    13b0:	9c 93       	st	X, r25
    13b2:	8e 93       	st	-X, r24
    13b4:	17 97       	sbiw	r26, 0x07	; 7
    13b6:	82 81       	ldd	r24, Z+2	; 0x02
    13b8:	19 96       	adiw	r26, 0x09	; 9
	MIDIInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    13ba:	8c 93       	st	X, r24
    13bc:	19 97       	sbiw	r26, 0x09	; 9
    13be:	1a 96       	adiw	r26, 0x0a	; 10
    13c0:	2c 93       	st	X, r18
	MIDIInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;
    13c2:	c8 01       	movw	r24, r16
    13c4:	61 e0       	ldi	r22, 0x01	; 1
	
	if (!(Pipe_ConfigurePipeTable(&MIDIInterfaceInfo->Config.DataINPipe, 1)))
    13c6:	dc db       	rcall	.-2120   	; 0xb80 <Pipe_ConfigurePipeTable>
    13c8:	88 23       	and	r24, r24
    13ca:	99 f0       	breq	.+38     	; 0x13f2 <MIDI_Host_ConfigurePipes+0x102>
    13cc:	c8 01       	movw	r24, r16
    13ce:	06 96       	adiw	r24, 0x06	; 6
    13d0:	61 e0       	ldi	r22, 0x01	; 1
	  return false;
	
	if (!(Pipe_ConfigurePipeTable(&MIDIInterfaceInfo->Config.DataOUTPipe, 1)))
    13d2:	d6 db       	rcall	.-2132   	; 0xb80 <Pipe_ConfigurePipeTable>
    13d4:	88 23       	and	r24, r24
    13d6:	69 f0       	breq	.+26     	; 0x13f2 <MIDI_Host_ConfigurePipes+0x102>
    13d8:	d5 01       	movw	r26, r10
    13da:	12 96       	adiw	r26, 0x02	; 2
    13dc:	8c 91       	ld	r24, X
    13de:	12 97       	sbiw	r26, 0x02	; 2
	  return false;	

	MIDIInterfaceInfo->State.InterfaceNumber = MIDIInterface->InterfaceNumber;
    13e0:	f8 01       	movw	r30, r16
    13e2:	85 87       	std	Z+13, r24	; 0x0d
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	84 87       	std	Z+12, r24	; 0x0c
    13e8:	04 c0       	rjmp	.+8      	; 0x13f2 <MIDI_Host_ConfigurePipes+0x102>
    13ea:	81 e0       	ldi	r24, 0x01	; 1
	MIDIInterfaceInfo->State.IsActive = true;
    13ec:	03 c0       	rjmp	.+6      	; 0x13f4 <MIDI_Host_ConfigurePipes+0x104>
    13ee:	82 e0       	ldi	r24, 0x02	; 2
    13f0:	01 c0       	rjmp	.+2      	; 0x13f4 <MIDI_Host_ConfigurePipes+0x104>
	USB_Descriptor_Interface_t* MIDIInterface   = NULL;

	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	0f 90       	pop	r0
		                              DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_MIDI_Host_NextMIDIStreamingInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return MIDI_ENUMERROR_NoCompatibleInterfaceFound;
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
	
	if (!(Pipe_ConfigurePipeTable(&MIDIInterfaceInfo->Config.DataINPipe, 1)))
	  return false;
	
	if (!(Pipe_ConfigurePipeTable(&MIDIInterfaceInfo->Config.DataOUTPipe, 1)))
	  return false;	
    13fa:	0f 90       	pop	r0

	MIDIInterfaceInfo->State.InterfaceNumber = MIDIInterface->InterfaceNumber;
	MIDIInterfaceInfo->State.IsActive = true;

	return MIDI_ENUMERROR_NoError;
}
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	ff 90       	pop	r15
    1406:	ef 90       	pop	r14
    1408:	df 90       	pop	r13
    140a:	cf 90       	pop	r12
    140c:	bf 90       	pop	r11
    140e:	af 90       	pop	r10
    1410:	08 95       	ret

00001412 <MIDI_Host_Flush>:
    1412:	fc 01       	movw	r30, r24
    1414:	80 91 4e 01 	lds	r24, 0x014E
    1418:	8b 30       	cpi	r24, 0x0B	; 11
	#endif
}

uint8_t MIDI_Host_Flush(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    141a:	39 f5       	brne	.+78     	; 0x146a <MIDI_Host_Flush+0x58>
    141c:	84 85       	ldd	r24, Z+12	; 0x0c
    141e:	88 23       	and	r24, r24
    1420:	31 f1       	breq	.+76     	; 0x146e <MIDI_Host_Flush+0x5c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1422:	86 81       	ldd	r24, Z+6	; 0x06
    1424:	8f 70       	andi	r24, 0x0F	; 15
    1426:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    142a:	80 91 a9 00 	lds	r24, 0x00A9
    142e:	8f 7b       	andi	r24, 0xBF	; 191
    1430:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1434:	80 91 f6 00 	lds	r24, 0x00F6
    1438:	90 91 f7 00 	lds	r25, 0x00F7
	uint8_t ErrorCode;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();
	
	if (Pipe_BytesInPipe())
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	71 f0       	breq	.+28     	; 0x145c <MIDI_Host_Flush+0x4a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1440:	80 91 a6 00 	lds	r24, 0x00A6
    1444:	8b 77       	andi	r24, 0x7B	; 123
    1446:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_ClearOUT();

		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
    144a:	f1 db       	rcall	.-2078   	; 0xc2e <Pipe_WaitUntilReady>
    144c:	88 23       	and	r24, r24
    144e:	31 f0       	breq	.+12     	; 0x145c <MIDI_Host_Flush+0x4a>
    1450:	90 91 a9 00 	lds	r25, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1454:	90 64       	ori	r25, 0x40	; 64
    1456:	90 93 a9 00 	sts	0x00A9, r25
    145a:	08 95       	ret
		{
			Pipe_Freeze();
			return ErrorCode;
    145c:	80 91 a9 00 	lds	r24, 0x00A9
    1460:	80 64       	ori	r24, 0x40	; 64
    1462:	80 93 a9 00 	sts	0x00A9, r24
    1466:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
    1468:	08 95       	ret
    146a:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t MIDI_Host_Flush(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    146c:	08 95       	ret
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	08 95       	ret

00001472 <MIDI_Host_USBTask>:
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
}
    1472:	20 91 4e 01 	lds	r18, 0x014E
	return DESCRIPTOR_SEARCH_NotFound;
}

void MIDI_Host_USBTask(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    1476:	2b 30       	cpi	r18, 0x0B	; 11
    1478:	29 f4       	brne	.+10     	; 0x1484 <MIDI_Host_USBTask+0x12>
    147a:	fc 01       	movw	r30, r24
    147c:	24 85       	ldd	r18, Z+12	; 0x0c
    147e:	22 23       	and	r18, r18
    1480:	09 f0       	breq	.+2      	; 0x1484 <MIDI_Host_USBTask+0x12>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	MIDI_Host_Flush(MIDIInterfaceInfo);
    1482:	c7 cf       	rjmp	.-114    	; 0x1412 <MIDI_Host_Flush>
    1484:	08 95       	ret

00001486 <MIDI_Host_SendEventPacket>:
    1486:	fc 01       	movw	r30, r24
	return PIPE_READYWAIT_NoError;
}

uint8_t MIDI_Host_SendEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                  MIDI_EventPacket_t* const Event)
{
    1488:	cb 01       	movw	r24, r22
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    148a:	20 91 4e 01 	lds	r18, 0x014E
    148e:	2b 30       	cpi	r18, 0x0B	; 11
    1490:	11 f5       	brne	.+68     	; 0x14d6 <MIDI_Host_SendEventPacket+0x50>
    1492:	24 85       	ldd	r18, Z+12	; 0x0c
    1494:	22 23       	and	r18, r18
    1496:	09 f1       	breq	.+66     	; 0x14da <MIDI_Host_SendEventPacket+0x54>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1498:	26 81       	ldd	r18, Z+6	; 0x06
    149a:	2f 70       	andi	r18, 0x0F	; 15
    149c:	20 93 a7 00 	sts	0x00A7, r18

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    14a0:	20 91 a9 00 	lds	r18, 0x00A9
    14a4:	2f 7b       	andi	r18, 0xBF	; 191
    14a6:	20 93 a9 00 	sts	0x00A9, r18
	uint8_t ErrorCode;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();
	
	if ((ErrorCode = Pipe_Write_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL)) != PIPE_RWSTREAM_NoError)
    14aa:	64 e0       	ldi	r22, 0x04	; 4
    14ac:	70 e0       	ldi	r23, 0x00	; 0
    14ae:	40 e0       	ldi	r20, 0x00	; 0
    14b0:	50 e0       	ldi	r21, 0x00	; 0
    14b2:	53 da       	rcall	.-2906   	; 0x95a <Pipe_Write_Stream_LE>
    14b4:	88 23       	and	r24, r24
    14b6:	49 f4       	brne	.+18     	; 0x14ca <MIDI_Host_SendEventPacket+0x44>
    14b8:	90 91 a6 00 	lds	r25, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    14bc:	95 fd       	sbrc	r25, 5
	{
		Pipe_Freeze();
		return ErrorCode;
	}

	if (!(Pipe_IsReadWriteAllowed()))
    14be:	05 c0       	rjmp	.+10     	; 0x14ca <MIDI_Host_SendEventPacket+0x44>
    14c0:	90 91 a6 00 	lds	r25, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    14c4:	9b 77       	andi	r25, 0x7B	; 123
    14c6:	90 93 a6 00 	sts	0x00A6, r25
    14ca:	90 91 a9 00 	lds	r25, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    14ce:	90 64       	ori	r25, 0x40	; 64
    14d0:	90 93 a9 00 	sts	0x00A9, r25
    14d4:	08 95       	ret
	  Pipe_ClearOUT();

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    14d6:	81 e0       	ldi	r24, 0x01	; 1

uint8_t MIDI_Host_SendEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                  MIDI_EventPacket_t* const Event)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    14d8:	08 95       	ret
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	08 95       	ret

000014de <MIDI_Host_ReceiveEventPacket>:
	  Pipe_ClearOUT();

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    14de:	fc 01       	movw	r30, r24

bool MIDI_Host_ReceiveEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                  MIDI_EventPacket_t* const Event)
{
    14e0:	cb 01       	movw	r24, r22
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    14e2:	20 91 4e 01 	lds	r18, 0x014E
    14e6:	2b 30       	cpi	r18, 0x0B	; 11
    14e8:	99 f5       	brne	.+102    	; 0x1550 <MIDI_Host_ReceiveEventPacket+0x72>
    14ea:	24 85       	ldd	r18, Z+12	; 0x0c
    14ec:	22 23       	and	r18, r18
    14ee:	91 f1       	breq	.+100    	; 0x1554 <MIDI_Host_ReceiveEventPacket+0x76>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    14f0:	20 81       	ld	r18, Z
    14f2:	2f 70       	andi	r18, 0x0F	; 15
    14f4:	20 93 a7 00 	sts	0x00A7, r18

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    14f8:	20 91 a9 00 	lds	r18, 0x00A9
    14fc:	2f 7b       	andi	r18, 0xBF	; 191
    14fe:	20 93 a9 00 	sts	0x00A9, r18
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1502:	20 91 a6 00 	lds	r18, 0x00A6
	bool DataReady = false;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    1506:	20 ff       	sbrs	r18, 0
    1508:	1c c0       	rjmp	.+56     	; 0x1542 <MIDI_Host_ReceiveEventPacket+0x64>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    150a:	20 91 f6 00 	lds	r18, 0x00F6
    150e:	30 91 f7 00 	lds	r19, 0x00F7
	{
		if (Pipe_BytesInPipe())
    1512:	21 15       	cp	r18, r1
    1514:	31 05       	cpc	r19, r1
    1516:	39 f0       	breq	.+14     	; 0x1526 <MIDI_Host_ReceiveEventPacket+0x48>
		{
			Pipe_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);
    1518:	64 e0       	ldi	r22, 0x04	; 4
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	40 e0       	ldi	r20, 0x00	; 0
    151e:	50 e0       	ldi	r21, 0x00	; 0
    1520:	73 da       	rcall	.-2842   	; 0xa08 <Pipe_Read_Stream_LE>
    1522:	81 e0       	ldi	r24, 0x01	; 1
			DataReady = true;
    1524:	01 c0       	rjmp	.+2      	; 0x1528 <MIDI_Host_ReceiveEventPacket+0x4a>
    1526:	80 e0       	ldi	r24, 0x00	; 0
                                  MIDI_EventPacket_t* const Event)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
	  
	bool DataReady = false;
    1528:	20 91 f6 00 	lds	r18, 0x00F6
    152c:	30 91 f7 00 	lds	r19, 0x00F7
    1530:	21 15       	cp	r18, r1
		{
			Pipe_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);
			DataReady = true;
		}

		if (!(Pipe_BytesInPipe()))
    1532:	31 05       	cpc	r19, r1
    1534:	39 f4       	brne	.+14     	; 0x1544 <MIDI_Host_ReceiveEventPacket+0x66>
    1536:	90 91 a6 00 	lds	r25, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    153a:	9e 77       	andi	r25, 0x7E	; 126
    153c:	90 93 a6 00 	sts	0x00A6, r25
    1540:	01 c0       	rjmp	.+2      	; 0x1544 <MIDI_Host_ReceiveEventPacket+0x66>
    1542:	80 e0       	ldi	r24, 0x00	; 0
                                  MIDI_EventPacket_t* const Event)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
	  
	bool DataReady = false;
    1544:	90 91 a9 00 	lds	r25, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1548:	90 64       	ori	r25, 0x40	; 64
    154a:	90 93 a9 00 	sts	0x00A9, r25
    154e:	08 95       	ret
		  Pipe_ClearIN();
	}
	
	Pipe_Freeze();
	
	return DataReady;
    1550:	81 e0       	ldi	r24, 0x01	; 1

bool MIDI_Host_ReceiveEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                  MIDI_EventPacket_t* const Event)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1552:	08 95       	ret
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	08 95       	ret

00001558 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1558:	90 91 c8 00 	lds	r25, 0x00C8
    155c:	95 ff       	sbrs	r25, 5
    155e:	fc cf       	rjmp	.-8      	; 0x1558 <Serial_putchar>
				UDR1 = DataByte;
    1560:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	08 95       	ret

0000156a <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    156a:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    156e:	87 ff       	sbrs	r24, 7
    1570:	08 c0       	rjmp	.+16     	; 0x1582 <Serial_getchar+0x18>
    1572:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1576:	87 ff       	sbrs	r24, 7
    1578:	07 c0       	rjmp	.+14     	; 0x1588 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    157a:	80 91 ce 00 	lds	r24, 0x00CE
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	08 95       	ret
	  return _FDEV_EOF;
    1582:	8e ef       	ldi	r24, 0xFE	; 254
    1584:	9f ef       	ldi	r25, 0xFF	; 255
    1586:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1588:	8f ef       	ldi	r24, 0xFF	; 255
    158a:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    158c:	08 95       	ret

0000158e <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    158e:	fc 01       	movw	r30, r24
	if (!(Stream))
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	51 f4       	brne	.+20     	; 0x15a8 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1594:	ef e4       	ldi	r30, 0x4F	; 79
    1596:	f1 e0       	ldi	r31, 0x01	; 1
    1598:	f0 93 5e 01 	sts	0x015E, r31
    159c:	e0 93 5d 01 	sts	0x015D, r30
		stdout = Stream;
    15a0:	f0 93 60 01 	sts	0x0160, r31
    15a4:	e0 93 5f 01 	sts	0x015F, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    15a8:	8e e0       	ldi	r24, 0x0E	; 14
    15aa:	df 01       	movw	r26, r30
    15ac:	1d 92       	st	X+, r1
    15ae:	8a 95       	dec	r24
    15b0:	e9 f7       	brne	.-6      	; 0x15ac <Serial_CreateStream+0x1e>
    15b2:	83 e0       	ldi	r24, 0x03	; 3
    15b4:	83 83       	std	Z+3, r24	; 0x03
    15b6:	8c ea       	ldi	r24, 0xAC	; 172
    15b8:	9a e0       	ldi	r25, 0x0A	; 10
    15ba:	91 87       	std	Z+9, r25	; 0x09
    15bc:	80 87       	std	Z+8, r24	; 0x08
    15be:	85 eb       	ldi	r24, 0xB5	; 181
    15c0:	9a e0       	ldi	r25, 0x0A	; 10
    15c2:	93 87       	std	Z+11, r25	; 0x0b
    15c4:	82 87       	std	Z+10, r24	; 0x0a
}
    15c6:	08 95       	ret

000015c8 <printf_P>:
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	fe 01       	movw	r30, r28
    15d2:	35 96       	adiw	r30, 0x05	; 5
    15d4:	61 91       	ld	r22, Z+
    15d6:	71 91       	ld	r23, Z+
    15d8:	80 91 5f 01 	lds	r24, 0x015F
    15dc:	90 91 60 01 	lds	r25, 0x0160
    15e0:	dc 01       	movw	r26, r24
    15e2:	13 96       	adiw	r26, 0x03	; 3
    15e4:	2c 91       	ld	r18, X
    15e6:	13 97       	sbiw	r26, 0x03	; 3
    15e8:	28 60       	ori	r18, 0x08	; 8
    15ea:	13 96       	adiw	r26, 0x03	; 3
    15ec:	2c 93       	st	X, r18
    15ee:	af 01       	movw	r20, r30
    15f0:	39 d0       	rcall	.+114    	; 0x1664 <vfprintf>
    15f2:	e0 91 5f 01 	lds	r30, 0x015F
    15f6:	f0 91 60 01 	lds	r31, 0x0160
    15fa:	23 81       	ldd	r18, Z+3	; 0x03
    15fc:	27 7f       	andi	r18, 0xF7	; 247
    15fe:	23 83       	std	Z+3, r18	; 0x03
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	08 95       	ret

00001606 <puts_P>:
    1606:	0f 93       	push	r16
    1608:	1f 93       	push	r17
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	8c 01       	movw	r16, r24
    1610:	e0 91 5f 01 	lds	r30, 0x015F
    1614:	f0 91 60 01 	lds	r31, 0x0160
    1618:	83 81       	ldd	r24, Z+3	; 0x03
    161a:	81 ff       	sbrs	r24, 1
    161c:	1b c0       	rjmp	.+54     	; 0x1654 <puts_P+0x4e>
    161e:	c0 e0       	ldi	r28, 0x00	; 0
    1620:	d0 e0       	ldi	r29, 0x00	; 0
    1622:	07 c0       	rjmp	.+14     	; 0x1632 <puts_P+0x2c>
    1624:	09 95       	icall
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	11 f0       	breq	.+4      	; 0x162e <puts_P+0x28>
    162a:	cf ef       	ldi	r28, 0xFF	; 255
    162c:	df ef       	ldi	r29, 0xFF	; 255
    162e:	0f 5f       	subi	r16, 0xFF	; 255
    1630:	1f 4f       	sbci	r17, 0xFF	; 255
    1632:	f8 01       	movw	r30, r16
    1634:	84 91       	lpm	r24, Z
    1636:	60 91 5f 01 	lds	r22, 0x015F
    163a:	70 91 60 01 	lds	r23, 0x0160
    163e:	db 01       	movw	r26, r22
    1640:	18 96       	adiw	r26, 0x08	; 8
    1642:	ed 91       	ld	r30, X+
    1644:	fc 91       	ld	r31, X
    1646:	19 97       	sbiw	r26, 0x09	; 9
    1648:	88 23       	and	r24, r24
    164a:	61 f7       	brne	.-40     	; 0x1624 <puts_P+0x1e>
    164c:	8a e0       	ldi	r24, 0x0A	; 10
    164e:	09 95       	icall
    1650:	00 97       	sbiw	r24, 0x00	; 0
    1652:	11 f0       	breq	.+4      	; 0x1658 <puts_P+0x52>
    1654:	cf ef       	ldi	r28, 0xFF	; 255
    1656:	df ef       	ldi	r29, 0xFF	; 255
    1658:	ce 01       	movw	r24, r28
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	1f 91       	pop	r17
    1660:	0f 91       	pop	r16
    1662:	08 95       	ret

00001664 <vfprintf>:
    1664:	2f 92       	push	r2
    1666:	3f 92       	push	r3
    1668:	4f 92       	push	r4
    166a:	5f 92       	push	r5
    166c:	6f 92       	push	r6
    166e:	7f 92       	push	r7
    1670:	8f 92       	push	r8
    1672:	9f 92       	push	r9
    1674:	af 92       	push	r10
    1676:	bf 92       	push	r11
    1678:	cf 92       	push	r12
    167a:	df 92       	push	r13
    167c:	ef 92       	push	r14
    167e:	ff 92       	push	r15
    1680:	0f 93       	push	r16
    1682:	1f 93       	push	r17
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	2d 97       	sbiw	r28, 0x0d	; 13
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	f8 94       	cli
    1692:	de bf       	out	0x3e, r29	; 62
    1694:	0f be       	out	0x3f, r0	; 63
    1696:	cd bf       	out	0x3d, r28	; 61
    1698:	3c 01       	movw	r6, r24
    169a:	7d 87       	std	Y+13, r23	; 0x0d
    169c:	6c 87       	std	Y+12, r22	; 0x0c
    169e:	5a 01       	movw	r10, r20
    16a0:	fc 01       	movw	r30, r24
    16a2:	17 82       	std	Z+7, r1	; 0x07
    16a4:	16 82       	std	Z+6, r1	; 0x06
    16a6:	83 81       	ldd	r24, Z+3	; 0x03
    16a8:	81 ff       	sbrs	r24, 1
    16aa:	bb c1       	rjmp	.+886    	; 0x1a22 <vfprintf+0x3be>
    16ac:	2e 01       	movw	r4, r28
    16ae:	08 94       	sec
    16b0:	41 1c       	adc	r4, r1
    16b2:	51 1c       	adc	r5, r1
    16b4:	f3 01       	movw	r30, r6
    16b6:	93 81       	ldd	r25, Z+3	; 0x03
    16b8:	ec 85       	ldd	r30, Y+12	; 0x0c
    16ba:	fd 85       	ldd	r31, Y+13	; 0x0d
    16bc:	93 fd       	sbrc	r25, 3
    16be:	85 91       	lpm	r24, Z+
    16c0:	93 ff       	sbrs	r25, 3
    16c2:	81 91       	ld	r24, Z+
    16c4:	fd 87       	std	Y+13, r31	; 0x0d
    16c6:	ec 87       	std	Y+12, r30	; 0x0c
    16c8:	88 23       	and	r24, r24
    16ca:	09 f4       	brne	.+2      	; 0x16ce <vfprintf+0x6a>
    16cc:	a6 c1       	rjmp	.+844    	; 0x1a1a <vfprintf+0x3b6>
    16ce:	85 32       	cpi	r24, 0x25	; 37
    16d0:	41 f4       	brne	.+16     	; 0x16e2 <vfprintf+0x7e>
    16d2:	93 fd       	sbrc	r25, 3
    16d4:	85 91       	lpm	r24, Z+
    16d6:	93 ff       	sbrs	r25, 3
    16d8:	81 91       	ld	r24, Z+
    16da:	fd 87       	std	Y+13, r31	; 0x0d
    16dc:	ec 87       	std	Y+12, r30	; 0x0c
    16de:	85 32       	cpi	r24, 0x25	; 37
    16e0:	21 f4       	brne	.+8      	; 0x16ea <vfprintf+0x86>
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	b3 01       	movw	r22, r6
    16e6:	ce d1       	rcall	.+924    	; 0x1a84 <fputc>
    16e8:	e5 cf       	rjmp	.-54     	; 0x16b4 <vfprintf+0x50>
    16ea:	ff 24       	eor	r15, r15
    16ec:	ee 24       	eor	r14, r14
    16ee:	10 e0       	ldi	r17, 0x00	; 0
    16f0:	10 32       	cpi	r17, 0x20	; 32
    16f2:	b0 f4       	brcc	.+44     	; 0x1720 <vfprintf+0xbc>
    16f4:	8b 32       	cpi	r24, 0x2B	; 43
    16f6:	69 f0       	breq	.+26     	; 0x1712 <vfprintf+0xae>
    16f8:	8c 32       	cpi	r24, 0x2C	; 44
    16fa:	28 f4       	brcc	.+10     	; 0x1706 <vfprintf+0xa2>
    16fc:	80 32       	cpi	r24, 0x20	; 32
    16fe:	51 f0       	breq	.+20     	; 0x1714 <vfprintf+0xb0>
    1700:	83 32       	cpi	r24, 0x23	; 35
    1702:	71 f4       	brne	.+28     	; 0x1720 <vfprintf+0xbc>
    1704:	0b c0       	rjmp	.+22     	; 0x171c <vfprintf+0xb8>
    1706:	8d 32       	cpi	r24, 0x2D	; 45
    1708:	39 f0       	breq	.+14     	; 0x1718 <vfprintf+0xb4>
    170a:	80 33       	cpi	r24, 0x30	; 48
    170c:	49 f4       	brne	.+18     	; 0x1720 <vfprintf+0xbc>
    170e:	11 60       	ori	r17, 0x01	; 1
    1710:	2c c0       	rjmp	.+88     	; 0x176a <vfprintf+0x106>
    1712:	12 60       	ori	r17, 0x02	; 2
    1714:	14 60       	ori	r17, 0x04	; 4
    1716:	29 c0       	rjmp	.+82     	; 0x176a <vfprintf+0x106>
    1718:	18 60       	ori	r17, 0x08	; 8
    171a:	27 c0       	rjmp	.+78     	; 0x176a <vfprintf+0x106>
    171c:	10 61       	ori	r17, 0x10	; 16
    171e:	25 c0       	rjmp	.+74     	; 0x176a <vfprintf+0x106>
    1720:	17 fd       	sbrc	r17, 7
    1722:	2e c0       	rjmp	.+92     	; 0x1780 <vfprintf+0x11c>
    1724:	28 2f       	mov	r18, r24
    1726:	20 53       	subi	r18, 0x30	; 48
    1728:	2a 30       	cpi	r18, 0x0A	; 10
    172a:	98 f4       	brcc	.+38     	; 0x1752 <vfprintf+0xee>
    172c:	16 ff       	sbrs	r17, 6
    172e:	08 c0       	rjmp	.+16     	; 0x1740 <vfprintf+0xdc>
    1730:	8f 2d       	mov	r24, r15
    1732:	88 0f       	add	r24, r24
    1734:	f8 2e       	mov	r15, r24
    1736:	ff 0c       	add	r15, r15
    1738:	ff 0c       	add	r15, r15
    173a:	f8 0e       	add	r15, r24
    173c:	f2 0e       	add	r15, r18
    173e:	15 c0       	rjmp	.+42     	; 0x176a <vfprintf+0x106>
    1740:	8e 2d       	mov	r24, r14
    1742:	88 0f       	add	r24, r24
    1744:	e8 2e       	mov	r14, r24
    1746:	ee 0c       	add	r14, r14
    1748:	ee 0c       	add	r14, r14
    174a:	e8 0e       	add	r14, r24
    174c:	e2 0e       	add	r14, r18
    174e:	10 62       	ori	r17, 0x20	; 32
    1750:	0c c0       	rjmp	.+24     	; 0x176a <vfprintf+0x106>
    1752:	8e 32       	cpi	r24, 0x2E	; 46
    1754:	21 f4       	brne	.+8      	; 0x175e <vfprintf+0xfa>
    1756:	16 fd       	sbrc	r17, 6
    1758:	60 c1       	rjmp	.+704    	; 0x1a1a <vfprintf+0x3b6>
    175a:	10 64       	ori	r17, 0x40	; 64
    175c:	06 c0       	rjmp	.+12     	; 0x176a <vfprintf+0x106>
    175e:	8c 36       	cpi	r24, 0x6C	; 108
    1760:	11 f4       	brne	.+4      	; 0x1766 <vfprintf+0x102>
    1762:	10 68       	ori	r17, 0x80	; 128
    1764:	02 c0       	rjmp	.+4      	; 0x176a <vfprintf+0x106>
    1766:	88 36       	cpi	r24, 0x68	; 104
    1768:	59 f4       	brne	.+22     	; 0x1780 <vfprintf+0x11c>
    176a:	ec 85       	ldd	r30, Y+12	; 0x0c
    176c:	fd 85       	ldd	r31, Y+13	; 0x0d
    176e:	93 fd       	sbrc	r25, 3
    1770:	85 91       	lpm	r24, Z+
    1772:	93 ff       	sbrs	r25, 3
    1774:	81 91       	ld	r24, Z+
    1776:	fd 87       	std	Y+13, r31	; 0x0d
    1778:	ec 87       	std	Y+12, r30	; 0x0c
    177a:	88 23       	and	r24, r24
    177c:	09 f0       	breq	.+2      	; 0x1780 <vfprintf+0x11c>
    177e:	b8 cf       	rjmp	.-144    	; 0x16f0 <vfprintf+0x8c>
    1780:	98 2f       	mov	r25, r24
    1782:	95 54       	subi	r25, 0x45	; 69
    1784:	93 30       	cpi	r25, 0x03	; 3
    1786:	18 f0       	brcs	.+6      	; 0x178e <vfprintf+0x12a>
    1788:	90 52       	subi	r25, 0x20	; 32
    178a:	93 30       	cpi	r25, 0x03	; 3
    178c:	38 f4       	brcc	.+14     	; 0x179c <vfprintf+0x138>
    178e:	24 e0       	ldi	r18, 0x04	; 4
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	a2 0e       	add	r10, r18
    1794:	b3 1e       	adc	r11, r19
    1796:	3f e3       	ldi	r19, 0x3F	; 63
    1798:	39 83       	std	Y+1, r19	; 0x01
    179a:	0f c0       	rjmp	.+30     	; 0x17ba <vfprintf+0x156>
    179c:	83 36       	cpi	r24, 0x63	; 99
    179e:	31 f0       	breq	.+12     	; 0x17ac <vfprintf+0x148>
    17a0:	83 37       	cpi	r24, 0x73	; 115
    17a2:	81 f0       	breq	.+32     	; 0x17c4 <vfprintf+0x160>
    17a4:	83 35       	cpi	r24, 0x53	; 83
    17a6:	09 f0       	breq	.+2      	; 0x17aa <vfprintf+0x146>
    17a8:	56 c0       	rjmp	.+172    	; 0x1856 <vfprintf+0x1f2>
    17aa:	21 c0       	rjmp	.+66     	; 0x17ee <vfprintf+0x18a>
    17ac:	f5 01       	movw	r30, r10
    17ae:	80 81       	ld	r24, Z
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	22 e0       	ldi	r18, 0x02	; 2
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	a2 0e       	add	r10, r18
    17b8:	b3 1e       	adc	r11, r19
    17ba:	21 e0       	ldi	r18, 0x01	; 1
    17bc:	c2 2e       	mov	r12, r18
    17be:	d1 2c       	mov	r13, r1
    17c0:	42 01       	movw	r8, r4
    17c2:	13 c0       	rjmp	.+38     	; 0x17ea <vfprintf+0x186>
    17c4:	92 e0       	ldi	r25, 0x02	; 2
    17c6:	29 2e       	mov	r2, r25
    17c8:	31 2c       	mov	r3, r1
    17ca:	2a 0c       	add	r2, r10
    17cc:	3b 1c       	adc	r3, r11
    17ce:	f5 01       	movw	r30, r10
    17d0:	80 80       	ld	r8, Z
    17d2:	91 80       	ldd	r9, Z+1	; 0x01
    17d4:	16 ff       	sbrs	r17, 6
    17d6:	03 c0       	rjmp	.+6      	; 0x17de <vfprintf+0x17a>
    17d8:	6f 2d       	mov	r22, r15
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <vfprintf+0x17e>
    17de:	6f ef       	ldi	r22, 0xFF	; 255
    17e0:	7f ef       	ldi	r23, 0xFF	; 255
    17e2:	c4 01       	movw	r24, r8
    17e4:	44 d1       	rcall	.+648    	; 0x1a6e <strnlen>
    17e6:	6c 01       	movw	r12, r24
    17e8:	51 01       	movw	r10, r2
    17ea:	1f 77       	andi	r17, 0x7F	; 127
    17ec:	14 c0       	rjmp	.+40     	; 0x1816 <vfprintf+0x1b2>
    17ee:	82 e0       	ldi	r24, 0x02	; 2
    17f0:	28 2e       	mov	r2, r24
    17f2:	31 2c       	mov	r3, r1
    17f4:	2a 0c       	add	r2, r10
    17f6:	3b 1c       	adc	r3, r11
    17f8:	f5 01       	movw	r30, r10
    17fa:	80 80       	ld	r8, Z
    17fc:	91 80       	ldd	r9, Z+1	; 0x01
    17fe:	16 ff       	sbrs	r17, 6
    1800:	03 c0       	rjmp	.+6      	; 0x1808 <vfprintf+0x1a4>
    1802:	6f 2d       	mov	r22, r15
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	02 c0       	rjmp	.+4      	; 0x180c <vfprintf+0x1a8>
    1808:	6f ef       	ldi	r22, 0xFF	; 255
    180a:	7f ef       	ldi	r23, 0xFF	; 255
    180c:	c4 01       	movw	r24, r8
    180e:	24 d1       	rcall	.+584    	; 0x1a58 <strnlen_P>
    1810:	6c 01       	movw	r12, r24
    1812:	10 68       	ori	r17, 0x80	; 128
    1814:	51 01       	movw	r10, r2
    1816:	13 fd       	sbrc	r17, 3
    1818:	1a c0       	rjmp	.+52     	; 0x184e <vfprintf+0x1ea>
    181a:	05 c0       	rjmp	.+10     	; 0x1826 <vfprintf+0x1c2>
    181c:	80 e2       	ldi	r24, 0x20	; 32
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	b3 01       	movw	r22, r6
    1822:	30 d1       	rcall	.+608    	; 0x1a84 <fputc>
    1824:	ea 94       	dec	r14
    1826:	8e 2d       	mov	r24, r14
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	c8 16       	cp	r12, r24
    182c:	d9 06       	cpc	r13, r25
    182e:	b0 f3       	brcs	.-20     	; 0x181c <vfprintf+0x1b8>
    1830:	0e c0       	rjmp	.+28     	; 0x184e <vfprintf+0x1ea>
    1832:	f4 01       	movw	r30, r8
    1834:	17 fd       	sbrc	r17, 7
    1836:	85 91       	lpm	r24, Z+
    1838:	17 ff       	sbrs	r17, 7
    183a:	81 91       	ld	r24, Z+
    183c:	4f 01       	movw	r8, r30
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	b3 01       	movw	r22, r6
    1842:	20 d1       	rcall	.+576    	; 0x1a84 <fputc>
    1844:	e1 10       	cpse	r14, r1
    1846:	ea 94       	dec	r14
    1848:	08 94       	sec
    184a:	c1 08       	sbc	r12, r1
    184c:	d1 08       	sbc	r13, r1
    184e:	c1 14       	cp	r12, r1
    1850:	d1 04       	cpc	r13, r1
    1852:	79 f7       	brne	.-34     	; 0x1832 <vfprintf+0x1ce>
    1854:	df c0       	rjmp	.+446    	; 0x1a14 <vfprintf+0x3b0>
    1856:	84 36       	cpi	r24, 0x64	; 100
    1858:	11 f0       	breq	.+4      	; 0x185e <vfprintf+0x1fa>
    185a:	89 36       	cpi	r24, 0x69	; 105
    185c:	49 f5       	brne	.+82     	; 0x18b0 <vfprintf+0x24c>
    185e:	f5 01       	movw	r30, r10
    1860:	17 ff       	sbrs	r17, 7
    1862:	07 c0       	rjmp	.+14     	; 0x1872 <vfprintf+0x20e>
    1864:	80 81       	ld	r24, Z
    1866:	91 81       	ldd	r25, Z+1	; 0x01
    1868:	a2 81       	ldd	r26, Z+2	; 0x02
    186a:	b3 81       	ldd	r27, Z+3	; 0x03
    186c:	24 e0       	ldi	r18, 0x04	; 4
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	08 c0       	rjmp	.+16     	; 0x1882 <vfprintf+0x21e>
    1872:	80 81       	ld	r24, Z
    1874:	91 81       	ldd	r25, Z+1	; 0x01
    1876:	aa 27       	eor	r26, r26
    1878:	97 fd       	sbrc	r25, 7
    187a:	a0 95       	com	r26
    187c:	ba 2f       	mov	r27, r26
    187e:	22 e0       	ldi	r18, 0x02	; 2
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	a2 0e       	add	r10, r18
    1884:	b3 1e       	adc	r11, r19
    1886:	01 2f       	mov	r16, r17
    1888:	0f 76       	andi	r16, 0x6F	; 111
    188a:	b7 ff       	sbrs	r27, 7
    188c:	08 c0       	rjmp	.+16     	; 0x189e <vfprintf+0x23a>
    188e:	b0 95       	com	r27
    1890:	a0 95       	com	r26
    1892:	90 95       	com	r25
    1894:	81 95       	neg	r24
    1896:	9f 4f       	sbci	r25, 0xFF	; 255
    1898:	af 4f       	sbci	r26, 0xFF	; 255
    189a:	bf 4f       	sbci	r27, 0xFF	; 255
    189c:	00 68       	ori	r16, 0x80	; 128
    189e:	bc 01       	movw	r22, r24
    18a0:	cd 01       	movw	r24, r26
    18a2:	a2 01       	movw	r20, r4
    18a4:	2a e0       	ldi	r18, 0x0A	; 10
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	19 d1       	rcall	.+562    	; 0x1adc <__ultoa_invert>
    18aa:	d8 2e       	mov	r13, r24
    18ac:	d4 18       	sub	r13, r4
    18ae:	3e c0       	rjmp	.+124    	; 0x192c <vfprintf+0x2c8>
    18b0:	85 37       	cpi	r24, 0x75	; 117
    18b2:	21 f4       	brne	.+8      	; 0x18bc <vfprintf+0x258>
    18b4:	1f 7e       	andi	r17, 0xEF	; 239
    18b6:	2a e0       	ldi	r18, 0x0A	; 10
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	20 c0       	rjmp	.+64     	; 0x18fc <vfprintf+0x298>
    18bc:	19 7f       	andi	r17, 0xF9	; 249
    18be:	8f 36       	cpi	r24, 0x6F	; 111
    18c0:	a9 f0       	breq	.+42     	; 0x18ec <vfprintf+0x288>
    18c2:	80 37       	cpi	r24, 0x70	; 112
    18c4:	20 f4       	brcc	.+8      	; 0x18ce <vfprintf+0x26a>
    18c6:	88 35       	cpi	r24, 0x58	; 88
    18c8:	09 f0       	breq	.+2      	; 0x18cc <vfprintf+0x268>
    18ca:	a7 c0       	rjmp	.+334    	; 0x1a1a <vfprintf+0x3b6>
    18cc:	0b c0       	rjmp	.+22     	; 0x18e4 <vfprintf+0x280>
    18ce:	80 37       	cpi	r24, 0x70	; 112
    18d0:	21 f0       	breq	.+8      	; 0x18da <vfprintf+0x276>
    18d2:	88 37       	cpi	r24, 0x78	; 120
    18d4:	09 f0       	breq	.+2      	; 0x18d8 <vfprintf+0x274>
    18d6:	a1 c0       	rjmp	.+322    	; 0x1a1a <vfprintf+0x3b6>
    18d8:	01 c0       	rjmp	.+2      	; 0x18dc <vfprintf+0x278>
    18da:	10 61       	ori	r17, 0x10	; 16
    18dc:	14 ff       	sbrs	r17, 4
    18de:	09 c0       	rjmp	.+18     	; 0x18f2 <vfprintf+0x28e>
    18e0:	14 60       	ori	r17, 0x04	; 4
    18e2:	07 c0       	rjmp	.+14     	; 0x18f2 <vfprintf+0x28e>
    18e4:	14 ff       	sbrs	r17, 4
    18e6:	08 c0       	rjmp	.+16     	; 0x18f8 <vfprintf+0x294>
    18e8:	16 60       	ori	r17, 0x06	; 6
    18ea:	06 c0       	rjmp	.+12     	; 0x18f8 <vfprintf+0x294>
    18ec:	28 e0       	ldi	r18, 0x08	; 8
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	05 c0       	rjmp	.+10     	; 0x18fc <vfprintf+0x298>
    18f2:	20 e1       	ldi	r18, 0x10	; 16
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <vfprintf+0x298>
    18f8:	20 e1       	ldi	r18, 0x10	; 16
    18fa:	32 e0       	ldi	r19, 0x02	; 2
    18fc:	f5 01       	movw	r30, r10
    18fe:	17 ff       	sbrs	r17, 7
    1900:	07 c0       	rjmp	.+14     	; 0x1910 <vfprintf+0x2ac>
    1902:	60 81       	ld	r22, Z
    1904:	71 81       	ldd	r23, Z+1	; 0x01
    1906:	82 81       	ldd	r24, Z+2	; 0x02
    1908:	93 81       	ldd	r25, Z+3	; 0x03
    190a:	44 e0       	ldi	r20, 0x04	; 4
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	06 c0       	rjmp	.+12     	; 0x191c <vfprintf+0x2b8>
    1910:	60 81       	ld	r22, Z
    1912:	71 81       	ldd	r23, Z+1	; 0x01
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	42 e0       	ldi	r20, 0x02	; 2
    191a:	50 e0       	ldi	r21, 0x00	; 0
    191c:	a4 0e       	add	r10, r20
    191e:	b5 1e       	adc	r11, r21
    1920:	a2 01       	movw	r20, r4
    1922:	dc d0       	rcall	.+440    	; 0x1adc <__ultoa_invert>
    1924:	d8 2e       	mov	r13, r24
    1926:	d4 18       	sub	r13, r4
    1928:	01 2f       	mov	r16, r17
    192a:	0f 77       	andi	r16, 0x7F	; 127
    192c:	06 ff       	sbrs	r16, 6
    192e:	09 c0       	rjmp	.+18     	; 0x1942 <vfprintf+0x2de>
    1930:	0e 7f       	andi	r16, 0xFE	; 254
    1932:	df 14       	cp	r13, r15
    1934:	30 f4       	brcc	.+12     	; 0x1942 <vfprintf+0x2de>
    1936:	04 ff       	sbrs	r16, 4
    1938:	06 c0       	rjmp	.+12     	; 0x1946 <vfprintf+0x2e2>
    193a:	02 fd       	sbrc	r16, 2
    193c:	04 c0       	rjmp	.+8      	; 0x1946 <vfprintf+0x2e2>
    193e:	0f 7e       	andi	r16, 0xEF	; 239
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <vfprintf+0x2e2>
    1942:	1d 2d       	mov	r17, r13
    1944:	01 c0       	rjmp	.+2      	; 0x1948 <vfprintf+0x2e4>
    1946:	1f 2d       	mov	r17, r15
    1948:	80 2f       	mov	r24, r16
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	04 ff       	sbrs	r16, 4
    194e:	0c c0       	rjmp	.+24     	; 0x1968 <vfprintf+0x304>
    1950:	fe 01       	movw	r30, r28
    1952:	ed 0d       	add	r30, r13
    1954:	f1 1d       	adc	r31, r1
    1956:	20 81       	ld	r18, Z
    1958:	20 33       	cpi	r18, 0x30	; 48
    195a:	11 f4       	brne	.+4      	; 0x1960 <vfprintf+0x2fc>
    195c:	09 7e       	andi	r16, 0xE9	; 233
    195e:	09 c0       	rjmp	.+18     	; 0x1972 <vfprintf+0x30e>
    1960:	02 ff       	sbrs	r16, 2
    1962:	06 c0       	rjmp	.+12     	; 0x1970 <vfprintf+0x30c>
    1964:	1e 5f       	subi	r17, 0xFE	; 254
    1966:	05 c0       	rjmp	.+10     	; 0x1972 <vfprintf+0x30e>
    1968:	86 78       	andi	r24, 0x86	; 134
    196a:	90 70       	andi	r25, 0x00	; 0
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	09 f0       	breq	.+2      	; 0x1972 <vfprintf+0x30e>
    1970:	1f 5f       	subi	r17, 0xFF	; 255
    1972:	80 2e       	mov	r8, r16
    1974:	99 24       	eor	r9, r9
    1976:	03 fd       	sbrc	r16, 3
    1978:	11 c0       	rjmp	.+34     	; 0x199c <vfprintf+0x338>
    197a:	00 ff       	sbrs	r16, 0
    197c:	0c c0       	rjmp	.+24     	; 0x1996 <vfprintf+0x332>
    197e:	fd 2c       	mov	r15, r13
    1980:	1e 15       	cp	r17, r14
    1982:	48 f4       	brcc	.+18     	; 0x1996 <vfprintf+0x332>
    1984:	fe 0c       	add	r15, r14
    1986:	f1 1a       	sub	r15, r17
    1988:	1e 2d       	mov	r17, r14
    198a:	05 c0       	rjmp	.+10     	; 0x1996 <vfprintf+0x332>
    198c:	80 e2       	ldi	r24, 0x20	; 32
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	b3 01       	movw	r22, r6
    1992:	78 d0       	rcall	.+240    	; 0x1a84 <fputc>
    1994:	1f 5f       	subi	r17, 0xFF	; 255
    1996:	1e 15       	cp	r17, r14
    1998:	c8 f3       	brcs	.-14     	; 0x198c <vfprintf+0x328>
    199a:	04 c0       	rjmp	.+8      	; 0x19a4 <vfprintf+0x340>
    199c:	1e 15       	cp	r17, r14
    199e:	10 f4       	brcc	.+4      	; 0x19a4 <vfprintf+0x340>
    19a0:	e1 1a       	sub	r14, r17
    19a2:	01 c0       	rjmp	.+2      	; 0x19a6 <vfprintf+0x342>
    19a4:	ee 24       	eor	r14, r14
    19a6:	84 fe       	sbrs	r8, 4
    19a8:	0e c0       	rjmp	.+28     	; 0x19c6 <vfprintf+0x362>
    19aa:	80 e3       	ldi	r24, 0x30	; 48
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	b3 01       	movw	r22, r6
    19b0:	69 d0       	rcall	.+210    	; 0x1a84 <fputc>
    19b2:	82 fe       	sbrs	r8, 2
    19b4:	1d c0       	rjmp	.+58     	; 0x19f0 <vfprintf+0x38c>
    19b6:	81 fe       	sbrs	r8, 1
    19b8:	03 c0       	rjmp	.+6      	; 0x19c0 <vfprintf+0x35c>
    19ba:	88 e5       	ldi	r24, 0x58	; 88
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	10 c0       	rjmp	.+32     	; 0x19e0 <vfprintf+0x37c>
    19c0:	88 e7       	ldi	r24, 0x78	; 120
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0d c0       	rjmp	.+26     	; 0x19e0 <vfprintf+0x37c>
    19c6:	c4 01       	movw	r24, r8
    19c8:	86 78       	andi	r24, 0x86	; 134
    19ca:	90 70       	andi	r25, 0x00	; 0
    19cc:	00 97       	sbiw	r24, 0x00	; 0
    19ce:	81 f0       	breq	.+32     	; 0x19f0 <vfprintf+0x38c>
    19d0:	81 fc       	sbrc	r8, 1
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <vfprintf+0x374>
    19d4:	80 e2       	ldi	r24, 0x20	; 32
    19d6:	01 c0       	rjmp	.+2      	; 0x19da <vfprintf+0x376>
    19d8:	8b e2       	ldi	r24, 0x2B	; 43
    19da:	07 fd       	sbrc	r16, 7
    19dc:	8d e2       	ldi	r24, 0x2D	; 45
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	b3 01       	movw	r22, r6
    19e2:	50 d0       	rcall	.+160    	; 0x1a84 <fputc>
    19e4:	05 c0       	rjmp	.+10     	; 0x19f0 <vfprintf+0x38c>
    19e6:	80 e3       	ldi	r24, 0x30	; 48
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	b3 01       	movw	r22, r6
    19ec:	4b d0       	rcall	.+150    	; 0x1a84 <fputc>
    19ee:	fa 94       	dec	r15
    19f0:	df 14       	cp	r13, r15
    19f2:	c8 f3       	brcs	.-14     	; 0x19e6 <vfprintf+0x382>
    19f4:	da 94       	dec	r13
    19f6:	f2 01       	movw	r30, r4
    19f8:	ed 0d       	add	r30, r13
    19fa:	f1 1d       	adc	r31, r1
    19fc:	80 81       	ld	r24, Z
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	b3 01       	movw	r22, r6
    1a02:	40 d0       	rcall	.+128    	; 0x1a84 <fputc>
    1a04:	dd 20       	and	r13, r13
    1a06:	b1 f7       	brne	.-20     	; 0x19f4 <vfprintf+0x390>
    1a08:	05 c0       	rjmp	.+10     	; 0x1a14 <vfprintf+0x3b0>
    1a0a:	80 e2       	ldi	r24, 0x20	; 32
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	b3 01       	movw	r22, r6
    1a10:	39 d0       	rcall	.+114    	; 0x1a84 <fputc>
    1a12:	ea 94       	dec	r14
    1a14:	ee 20       	and	r14, r14
    1a16:	c9 f7       	brne	.-14     	; 0x1a0a <vfprintf+0x3a6>
    1a18:	4d ce       	rjmp	.-870    	; 0x16b4 <vfprintf+0x50>
    1a1a:	f3 01       	movw	r30, r6
    1a1c:	86 81       	ldd	r24, Z+6	; 0x06
    1a1e:	97 81       	ldd	r25, Z+7	; 0x07
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <vfprintf+0x3c2>
    1a22:	8f ef       	ldi	r24, 0xFF	; 255
    1a24:	9f ef       	ldi	r25, 0xFF	; 255
    1a26:	2d 96       	adiw	r28, 0x0d	; 13
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	f8 94       	cli
    1a2c:	de bf       	out	0x3e, r29	; 62
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	cd bf       	out	0x3d, r28	; 61
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	ff 90       	pop	r15
    1a3c:	ef 90       	pop	r14
    1a3e:	df 90       	pop	r13
    1a40:	cf 90       	pop	r12
    1a42:	bf 90       	pop	r11
    1a44:	af 90       	pop	r10
    1a46:	9f 90       	pop	r9
    1a48:	8f 90       	pop	r8
    1a4a:	7f 90       	pop	r7
    1a4c:	6f 90       	pop	r6
    1a4e:	5f 90       	pop	r5
    1a50:	4f 90       	pop	r4
    1a52:	3f 90       	pop	r3
    1a54:	2f 90       	pop	r2
    1a56:	08 95       	ret

00001a58 <strnlen_P>:
    1a58:	fc 01       	movw	r30, r24
    1a5a:	05 90       	lpm	r0, Z+
    1a5c:	61 50       	subi	r22, 0x01	; 1
    1a5e:	70 40       	sbci	r23, 0x00	; 0
    1a60:	01 10       	cpse	r0, r1
    1a62:	d8 f7       	brcc	.-10     	; 0x1a5a <strnlen_P+0x2>
    1a64:	80 95       	com	r24
    1a66:	90 95       	com	r25
    1a68:	8e 0f       	add	r24, r30
    1a6a:	9f 1f       	adc	r25, r31
    1a6c:	08 95       	ret

00001a6e <strnlen>:
    1a6e:	fc 01       	movw	r30, r24
    1a70:	61 50       	subi	r22, 0x01	; 1
    1a72:	70 40       	sbci	r23, 0x00	; 0
    1a74:	01 90       	ld	r0, Z+
    1a76:	01 10       	cpse	r0, r1
    1a78:	d8 f7       	brcc	.-10     	; 0x1a70 <strnlen+0x2>
    1a7a:	80 95       	com	r24
    1a7c:	90 95       	com	r25
    1a7e:	8e 0f       	add	r24, r30
    1a80:	9f 1f       	adc	r25, r31
    1a82:	08 95       	ret

00001a84 <fputc>:
    1a84:	0f 93       	push	r16
    1a86:	1f 93       	push	r17
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	8c 01       	movw	r16, r24
    1a8e:	eb 01       	movw	r28, r22
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	81 ff       	sbrs	r24, 1
    1a94:	1b c0       	rjmp	.+54     	; 0x1acc <fputc+0x48>
    1a96:	82 ff       	sbrs	r24, 2
    1a98:	0d c0       	rjmp	.+26     	; 0x1ab4 <fputc+0x30>
    1a9a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a9c:	3f 81       	ldd	r19, Y+7	; 0x07
    1a9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa0:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa2:	28 17       	cp	r18, r24
    1aa4:	39 07       	cpc	r19, r25
    1aa6:	64 f4       	brge	.+24     	; 0x1ac0 <fputc+0x3c>
    1aa8:	e8 81       	ld	r30, Y
    1aaa:	f9 81       	ldd	r31, Y+1	; 0x01
    1aac:	01 93       	st	Z+, r16
    1aae:	f9 83       	std	Y+1, r31	; 0x01
    1ab0:	e8 83       	st	Y, r30
    1ab2:	06 c0       	rjmp	.+12     	; 0x1ac0 <fputc+0x3c>
    1ab4:	e8 85       	ldd	r30, Y+8	; 0x08
    1ab6:	f9 85       	ldd	r31, Y+9	; 0x09
    1ab8:	80 2f       	mov	r24, r16
    1aba:	09 95       	icall
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	31 f4       	brne	.+12     	; 0x1acc <fputc+0x48>
    1ac0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ac4:	01 96       	adiw	r24, 0x01	; 1
    1ac6:	9f 83       	std	Y+7, r25	; 0x07
    1ac8:	8e 83       	std	Y+6, r24	; 0x06
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <fputc+0x4c>
    1acc:	0f ef       	ldi	r16, 0xFF	; 255
    1ace:	1f ef       	ldi	r17, 0xFF	; 255
    1ad0:	c8 01       	movw	r24, r16
    1ad2:	df 91       	pop	r29
    1ad4:	cf 91       	pop	r28
    1ad6:	1f 91       	pop	r17
    1ad8:	0f 91       	pop	r16
    1ada:	08 95       	ret

00001adc <__ultoa_invert>:
    1adc:	fa 01       	movw	r30, r20
    1ade:	aa 27       	eor	r26, r26
    1ae0:	28 30       	cpi	r18, 0x08	; 8
    1ae2:	51 f1       	breq	.+84     	; 0x1b38 <__ultoa_invert+0x5c>
    1ae4:	20 31       	cpi	r18, 0x10	; 16
    1ae6:	81 f1       	breq	.+96     	; 0x1b48 <__ultoa_invert+0x6c>
    1ae8:	e8 94       	clt
    1aea:	6f 93       	push	r22
    1aec:	6e 7f       	andi	r22, 0xFE	; 254
    1aee:	6e 5f       	subi	r22, 0xFE	; 254
    1af0:	7f 4f       	sbci	r23, 0xFF	; 255
    1af2:	8f 4f       	sbci	r24, 0xFF	; 255
    1af4:	9f 4f       	sbci	r25, 0xFF	; 255
    1af6:	af 4f       	sbci	r26, 0xFF	; 255
    1af8:	b1 e0       	ldi	r27, 0x01	; 1
    1afa:	3e d0       	rcall	.+124    	; 0x1b78 <__ultoa_invert+0x9c>
    1afc:	b4 e0       	ldi	r27, 0x04	; 4
    1afe:	3c d0       	rcall	.+120    	; 0x1b78 <__ultoa_invert+0x9c>
    1b00:	67 0f       	add	r22, r23
    1b02:	78 1f       	adc	r23, r24
    1b04:	89 1f       	adc	r24, r25
    1b06:	9a 1f       	adc	r25, r26
    1b08:	a1 1d       	adc	r26, r1
    1b0a:	68 0f       	add	r22, r24
    1b0c:	79 1f       	adc	r23, r25
    1b0e:	8a 1f       	adc	r24, r26
    1b10:	91 1d       	adc	r25, r1
    1b12:	a1 1d       	adc	r26, r1
    1b14:	6a 0f       	add	r22, r26
    1b16:	71 1d       	adc	r23, r1
    1b18:	81 1d       	adc	r24, r1
    1b1a:	91 1d       	adc	r25, r1
    1b1c:	a1 1d       	adc	r26, r1
    1b1e:	20 d0       	rcall	.+64     	; 0x1b60 <__ultoa_invert+0x84>
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <__ultoa_invert+0x48>
    1b22:	68 94       	set
    1b24:	3f 91       	pop	r19
    1b26:	2a e0       	ldi	r18, 0x0A	; 10
    1b28:	26 9f       	mul	r18, r22
    1b2a:	11 24       	eor	r1, r1
    1b2c:	30 19       	sub	r19, r0
    1b2e:	30 5d       	subi	r19, 0xD0	; 208
    1b30:	31 93       	st	Z+, r19
    1b32:	de f6       	brtc	.-74     	; 0x1aea <__ultoa_invert+0xe>
    1b34:	cf 01       	movw	r24, r30
    1b36:	08 95       	ret
    1b38:	46 2f       	mov	r20, r22
    1b3a:	47 70       	andi	r20, 0x07	; 7
    1b3c:	40 5d       	subi	r20, 0xD0	; 208
    1b3e:	41 93       	st	Z+, r20
    1b40:	b3 e0       	ldi	r27, 0x03	; 3
    1b42:	0f d0       	rcall	.+30     	; 0x1b62 <__ultoa_invert+0x86>
    1b44:	c9 f7       	brne	.-14     	; 0x1b38 <__ultoa_invert+0x5c>
    1b46:	f6 cf       	rjmp	.-20     	; 0x1b34 <__ultoa_invert+0x58>
    1b48:	46 2f       	mov	r20, r22
    1b4a:	4f 70       	andi	r20, 0x0F	; 15
    1b4c:	40 5d       	subi	r20, 0xD0	; 208
    1b4e:	4a 33       	cpi	r20, 0x3A	; 58
    1b50:	18 f0       	brcs	.+6      	; 0x1b58 <__ultoa_invert+0x7c>
    1b52:	49 5d       	subi	r20, 0xD9	; 217
    1b54:	31 fd       	sbrc	r19, 1
    1b56:	40 52       	subi	r20, 0x20	; 32
    1b58:	41 93       	st	Z+, r20
    1b5a:	02 d0       	rcall	.+4      	; 0x1b60 <__ultoa_invert+0x84>
    1b5c:	a9 f7       	brne	.-22     	; 0x1b48 <__ultoa_invert+0x6c>
    1b5e:	ea cf       	rjmp	.-44     	; 0x1b34 <__ultoa_invert+0x58>
    1b60:	b4 e0       	ldi	r27, 0x04	; 4
    1b62:	a6 95       	lsr	r26
    1b64:	97 95       	ror	r25
    1b66:	87 95       	ror	r24
    1b68:	77 95       	ror	r23
    1b6a:	67 95       	ror	r22
    1b6c:	ba 95       	dec	r27
    1b6e:	c9 f7       	brne	.-14     	; 0x1b62 <__ultoa_invert+0x86>
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	61 05       	cpc	r22, r1
    1b74:	71 05       	cpc	r23, r1
    1b76:	08 95       	ret
    1b78:	9b 01       	movw	r18, r22
    1b7a:	ac 01       	movw	r20, r24
    1b7c:	0a 2e       	mov	r0, r26
    1b7e:	06 94       	lsr	r0
    1b80:	57 95       	ror	r21
    1b82:	47 95       	ror	r20
    1b84:	37 95       	ror	r19
    1b86:	27 95       	ror	r18
    1b88:	ba 95       	dec	r27
    1b8a:	c9 f7       	brne	.-14     	; 0x1b7e <__ultoa_invert+0xa2>
    1b8c:	62 0f       	add	r22, r18
    1b8e:	73 1f       	adc	r23, r19
    1b90:	84 1f       	adc	r24, r20
    1b92:	95 1f       	adc	r25, r21
    1b94:	a0 1d       	adc	r26, r0
    1b96:	08 95       	ret

00001b98 <_exit>:
    1b98:	f8 94       	cli

00001b9a <__stop_program>:
    1b9a:	ff cf       	rjmp	.-2      	; 0x1b9a <__stop_program>
