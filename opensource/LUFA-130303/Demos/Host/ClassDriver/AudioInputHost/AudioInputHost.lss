
AudioInputHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000019c0  00001a54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080013e  0080013e  00001a92  2**0
                  ALLOC
  3 .stab         00000f90  00000000  00000000  00001a94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000030d  00000000  00000000  00002a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000888  00000000  00000000  00002d38  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d98f  00000000  00000000  000035c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034ad  00000000  00000000  00010f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005d02  00000000  00000000  000143fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001970  00000000  00000000  0001a100  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000050e0  00000000  00000000  0001ba70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000097a8  00000000  00000000  00020b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a20  00000000  00000000  0002a2f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2d c1       	rjmp	.+602    	; 0x25c <__ctors_end>
       2:	00 00       	nop
       4:	4a c1       	rjmp	.+660    	; 0x29a <__bad_interrupt>
       6:	00 00       	nop
       8:	48 c1       	rjmp	.+656    	; 0x29a <__bad_interrupt>
       a:	00 00       	nop
       c:	46 c1       	rjmp	.+652    	; 0x29a <__bad_interrupt>
       e:	00 00       	nop
      10:	44 c1       	rjmp	.+648    	; 0x29a <__bad_interrupt>
      12:	00 00       	nop
      14:	42 c1       	rjmp	.+644    	; 0x29a <__bad_interrupt>
      16:	00 00       	nop
      18:	40 c1       	rjmp	.+640    	; 0x29a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3e c1       	rjmp	.+636    	; 0x29a <__bad_interrupt>
      1e:	00 00       	nop
      20:	3c c1       	rjmp	.+632    	; 0x29a <__bad_interrupt>
      22:	00 00       	nop
      24:	3a c1       	rjmp	.+628    	; 0x29a <__bad_interrupt>
      26:	00 00       	nop
      28:	c3 c5       	rjmp	.+2950   	; 0xbb0 <__vector_10>
      2a:	00 00       	nop
      2c:	36 c1       	rjmp	.+620    	; 0x29a <__bad_interrupt>
      2e:	00 00       	nop
      30:	34 c1       	rjmp	.+616    	; 0x29a <__bad_interrupt>
      32:	00 00       	nop
      34:	32 c1       	rjmp	.+612    	; 0x29a <__bad_interrupt>
      36:	00 00       	nop
      38:	30 c1       	rjmp	.+608    	; 0x29a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2e c1       	rjmp	.+604    	; 0x29a <__bad_interrupt>
      3e:	00 00       	nop
      40:	2c c1       	rjmp	.+600    	; 0x29a <__bad_interrupt>
      42:	00 00       	nop
      44:	2a c1       	rjmp	.+596    	; 0x29a <__bad_interrupt>
      46:	00 00       	nop
      48:	28 c1       	rjmp	.+592    	; 0x29a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	26 c1       	rjmp	.+588    	; 0x29a <__bad_interrupt>
      4e:	00 00       	nop
      50:	24 c1       	rjmp	.+584    	; 0x29a <__bad_interrupt>
      52:	00 00       	nop
      54:	28 c1       	rjmp	.+592    	; 0x2a6 <__vector_21>
      56:	00 00       	nop
      58:	20 c1       	rjmp	.+576    	; 0x29a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1e c1       	rjmp	.+572    	; 0x29a <__bad_interrupt>
      5e:	00 00       	nop
      60:	1c c1       	rjmp	.+568    	; 0x29a <__bad_interrupt>
      62:	00 00       	nop
      64:	1a c1       	rjmp	.+564    	; 0x29a <__bad_interrupt>
      66:	00 00       	nop
      68:	18 c1       	rjmp	.+560    	; 0x29a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	16 c1       	rjmp	.+556    	; 0x29a <__bad_interrupt>
      6e:	00 00       	nop
      70:	14 c1       	rjmp	.+552    	; 0x29a <__bad_interrupt>
      72:	00 00       	nop
      74:	12 c1       	rjmp	.+548    	; 0x29a <__bad_interrupt>
      76:	00 00       	nop
      78:	10 c1       	rjmp	.+544    	; 0x29a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0e c1       	rjmp	.+540    	; 0x29a <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c c1       	rjmp	.+536    	; 0x29a <__bad_interrupt>
      82:	00 00       	nop
      84:	0a c1       	rjmp	.+532    	; 0x29a <__bad_interrupt>
      86:	00 00       	nop
      88:	08 c1       	rjmp	.+528    	; 0x29a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	06 c1       	rjmp	.+524    	; 0x29a <__bad_interrupt>
      8e:	00 00       	nop
      90:	04 c1       	rjmp	.+520    	; 0x29a <__bad_interrupt>
      92:	00 00       	nop
      94:	02 c1       	rjmp	.+516    	; 0x29a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4260>:
      98:	1b 5b 33 36 6d 41 75 64 69 6f 20 49 6e 70 75 74     .[36mAudio Input
      a8:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
      b8:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00                    ng....[37m.

000000c3 <__c.4277>:
      c3:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
      d3:	0d 0a 00                                            ...

000000d6 <__c.4282>:
      d6:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
      e6:	68 65 64 2e 0d 0a 00                                hed....

000000ed <__c.4289>:
      ed:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
      fd:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     10d:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

0000011a <__c.4291>:
     11a:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     12a:	4e 6f 74 20 61 20 56 61 6c 69 64 20 41 75 64 69     Not a Valid Audi
     13a:	6f 20 49 6e 70 75 74 20 44 65 76 69 63 65 2e 0d     o Input Device..
     14a:	0a 00                                               ..

0000014c <__c.4293>:
     14c:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     15c:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     16c:	6f 6e 2e 0d 0a 00                                   on....

00000172 <__c.4295>:
     172:	45 72 72 6f 72 20 45 6e 61 62 6c 69 6e 67 20 41     Error Enabling A
     182:	75 64 69 6f 20 53 74 72 65 61 6d 2e 0d 0a 00        udio Stream....

00000191 <__c.4298>:
     191:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 41 75     Error Setting Au
     1a1:	64 69 6f 20 53 61 6d 70 6c 69 6e 67 20 46 72 65     dio Sampling Fre
     1b1:	71 75 65 6e 63 79 2e 0d 0a 00                       quency....

000001bb <__c.4300>:
     1bb:	41 75 64 69 6f 20 44 65 76 69 63 65 20 45 6e 75     Audio Device Enu
     1cb:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

000001d6 <__c.4305>:
     1d6:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     1e6:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     1f6:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000205 <__c.4312>:
     205:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     215:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     225:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     235:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     245:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     255:	1b 5b 33 37 6d 00 00                                .[37m..

0000025c <__ctors_end>:
     25c:	11 24       	eor	r1, r1
     25e:	1f be       	out	0x3f, r1	; 63
     260:	cf ef       	ldi	r28, 0xFF	; 255
     262:	d0 e2       	ldi	r29, 0x20	; 32
     264:	de bf       	out	0x3e, r29	; 62
     266:	cd bf       	out	0x3d, r28	; 61

00000268 <__do_copy_data>:
     268:	11 e0       	ldi	r17, 0x01	; 1
     26a:	a0 e0       	ldi	r26, 0x00	; 0
     26c:	b1 e0       	ldi	r27, 0x01	; 1
     26e:	e0 ec       	ldi	r30, 0xC0	; 192
     270:	f9 e1       	ldi	r31, 0x19	; 25
     272:	00 e0       	ldi	r16, 0x00	; 0
     274:	0b bf       	out	0x3b, r16	; 59
     276:	02 c0       	rjmp	.+4      	; 0x27c <__do_copy_data+0x14>
     278:	07 90       	elpm	r0, Z+
     27a:	0d 92       	st	X+, r0
     27c:	ae 33       	cpi	r26, 0x3E	; 62
     27e:	b1 07       	cpc	r27, r17
     280:	d9 f7       	brne	.-10     	; 0x278 <__do_copy_data+0x10>
     282:	1b be       	out	0x3b, r1	; 59

00000284 <__do_clear_bss>:
     284:	11 e0       	ldi	r17, 0x01	; 1
     286:	ae e3       	ldi	r26, 0x3E	; 62
     288:	b1 e0       	ldi	r27, 0x01	; 1
     28a:	01 c0       	rjmp	.+2      	; 0x28e <.do_clear_bss_start>

0000028c <.do_clear_bss_loop>:
     28c:	1d 92       	st	X+, r1

0000028e <.do_clear_bss_start>:
     28e:	a0 36       	cpi	r26, 0x60	; 96
     290:	b1 07       	cpc	r27, r17
     292:	e1 f7       	brne	.-8      	; 0x28c <.do_clear_bss_loop>
     294:	c0 d0       	rcall	.+384    	; 0x416 <main>
     296:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <_exit>

0000029a <__bad_interrupt>:
     29a:	b2 ce       	rjmp	.-668    	; 0x0 <__vectors>

0000029c <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     29c:	9b b1       	in	r25, 0x0b	; 11
     29e:	9f 70       	andi	r25, 0x0F	; 15
     2a0:	98 2b       	or	r25, r24
     2a2:	9b b9       	out	0x0b, r25	; 11
			}
     2a4:	08 95       	ret

000002a6 <__vector_21>:
	}
}

/** ISR to handle the reloading of the PWM timer with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
     2a6:	1f 92       	push	r1
     2a8:	0f 92       	push	r0
     2aa:	0f b6       	in	r0, 0x3f	; 63
     2ac:	0f 92       	push	r0
     2ae:	0b b6       	in	r0, 0x3b	; 59
     2b0:	0f 92       	push	r0
     2b2:	11 24       	eor	r1, r1
     2b4:	2f 93       	push	r18
     2b6:	3f 93       	push	r19
     2b8:	4f 93       	push	r20
     2ba:	5f 93       	push	r21
     2bc:	6f 93       	push	r22
     2be:	7f 93       	push	r23
     2c0:	8f 93       	push	r24
     2c2:	9f 93       	push	r25
     2c4:	af 93       	push	r26
     2c6:	bf 93       	push	r27
     2c8:	cf 93       	push	r28
     2ca:	ef 93       	push	r30
     2cc:	ff 93       	push	r31
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     2ce:	80 91 a7 00 	lds	r24, 0x00A7
     2d2:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     2d4:	90 91 aa 00 	lds	r25, 0x00AA
     2d8:	90 ff       	sbrs	r25, 0
     2da:	02 c0       	rjmp	.+4      	; 0x2e0 <__vector_21+0x3a>
     2dc:	c0 e8       	ldi	r28, 0x80	; 128
     2de:	01 c0       	rjmp	.+2      	; 0x2e2 <__vector_21+0x3c>
     2e0:	c0 e0       	ldi	r28, 0x00	; 0
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     2e2:	c8 2b       	or	r28, r24
			 */
			static inline bool Audio_Host_IsSampleReceived(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo)
			                                               ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
			static inline bool Audio_Host_IsSampleReceived(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo)
			{
				if ((USB_HostState != HOST_STATE_Configured) || !(AudioInterfaceInfo->State.IsActive))
     2e4:	80 91 4b 01 	lds	r24, 0x014B
     2e8:	8b 30       	cpi	r24, 0x0B	; 11
     2ea:	09 f0       	breq	.+2      	; 0x2ee <__vector_21+0x48>
     2ec:	50 c0       	rjmp	.+160    	; 0x38e <__vector_21+0xe8>
     2ee:	80 91 0f 01 	lds	r24, 0x010F
     2f2:	88 23       	and	r24, r24
     2f4:	09 f4       	brne	.+2      	; 0x2f8 <__vector_21+0x52>
     2f6:	4b c0       	rjmp	.+150    	; 0x38e <__vector_21+0xe8>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     2f8:	80 91 03 01 	lds	r24, 0x0103
     2fc:	8f 70       	andi	r24, 0x0F	; 15
     2fe:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     302:	80 91 a9 00 	lds	r24, 0x00A9
     306:	8f 7b       	andi	r24, 0xBF	; 191
     308:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     30c:	90 91 a6 00 	lds	r25, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     310:	80 91 a9 00 	lds	r24, 0x00A9
     314:	80 64       	ori	r24, 0x40	; 64
     316:	80 93 a9 00 	sts	0x00A9, r24
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	/* Check that the USB bus is ready for the next sample to read */
	if (Audio_Host_IsSampleReceived(&Microphone_Audio_Interface))
     31a:	90 ff       	sbrs	r25, 0
     31c:	38 c0       	rjmp	.+112    	; 0x38e <__vector_21+0xe8>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UPDATX;
     31e:	20 91 af 00 	lds	r18, 0x00AF
				Data.Bytes[1] = UPDATX;
     322:	80 91 af 00 	lds	r24, 0x00AF
			{
				int16_t Sample;

				(void)AudioInterfaceInfo;

				Sample = (int16_t)Pipe_Read_16_LE();
     326:	48 2f       	mov	r20, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     328:	80 91 f6 00 	lds	r24, 0x00F6
     32c:	90 91 f7 00 	lds	r25, 0x00F7

				if (!(Pipe_BytesInPipe()))
     330:	00 97       	sbiw	r24, 0x00	; 0
     332:	79 f4       	brne	.+30     	; 0x352 <__vector_21+0xac>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     334:	80 91 a9 00 	lds	r24, 0x00A9
     338:	8f 7b       	andi	r24, 0xBF	; 191
     33a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     33e:	80 91 a6 00 	lds	r24, 0x00A6
     342:	8e 77       	andi	r24, 0x7E	; 126
     344:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     348:	80 91 a9 00 	lds	r24, 0x00A9
     34c:	80 64       	ori	r24, 0x40	; 64
     34e:	80 93 a9 00 	sts	0x00A9, r24
	{
		/* Retrieve the signed 16-bit audio sample, convert to 8-bit */
		int8_t Sample_8Bit = (Audio_Host_ReadSample16(&Microphone_Audio_Interface) >> 8);

		/* Load the sample into the PWM timer channel */
		OCR3A = (Sample_8Bit ^ (1 << 7));
     352:	84 2f       	mov	r24, r20
     354:	99 27       	eor	r25, r25
     356:	87 fd       	sbrc	r24, 7
     358:	90 95       	com	r25
     35a:	20 e8       	ldi	r18, 0x80	; 128
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	82 27       	eor	r24, r18
     360:	93 27       	eor	r25, r19
     362:	90 93 99 00 	sts	0x0099, r25
     366:	80 93 98 00 	sts	0x0098, r24

		uint8_t LEDMask = LEDS_NO_LEDS;

		/* Turn on LEDs as the sample amplitude increases */
		if (Sample_8Bit > 16)
     36a:	41 31       	cpi	r20, 0x11	; 17
     36c:	44 f4       	brge	.+16     	; 0x37e <__vector_21+0xd8>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3 | LEDS_LED4);
		else if (Sample_8Bit > 8)
     36e:	49 30       	cpi	r20, 0x09	; 9
     370:	44 f4       	brge	.+16     	; 0x382 <__vector_21+0xdc>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3);
		else if (Sample_8Bit > 4)
     372:	45 30       	cpi	r20, 0x05	; 5
     374:	44 f4       	brge	.+16     	; 0x386 <__vector_21+0xe0>
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
		else if (Sample_8Bit > 2)
     376:	43 30       	cpi	r20, 0x03	; 3
     378:	44 f4       	brge	.+16     	; 0x38a <__vector_21+0xe4>
		int8_t Sample_8Bit = (Audio_Host_ReadSample16(&Microphone_Audio_Interface) >> 8);

		/* Load the sample into the PWM timer channel */
		OCR3A = (Sample_8Bit ^ (1 << 7));

		uint8_t LEDMask = LEDS_NO_LEDS;
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	07 c0       	rjmp	.+14     	; 0x38c <__vector_21+0xe6>

		/* Turn on LEDs as the sample amplitude increases */
		if (Sample_8Bit > 16)
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3 | LEDS_LED4);
     37e:	80 ef       	ldi	r24, 0xF0	; 240
     380:	05 c0       	rjmp	.+10     	; 0x38c <__vector_21+0xe6>
		else if (Sample_8Bit > 8)
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3);
     382:	80 eb       	ldi	r24, 0xB0	; 176
     384:	03 c0       	rjmp	.+6      	; 0x38c <__vector_21+0xe6>
		else if (Sample_8Bit > 4)
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
     386:	80 e3       	ldi	r24, 0x30	; 48
     388:	01 c0       	rjmp	.+2      	; 0x38c <__vector_21+0xe6>
		else if (Sample_8Bit > 2)
		  LEDMask = (LEDS_LED1);
     38a:	80 e1       	ldi	r24, 0x10	; 16

		LEDs_SetAllLEDs(LEDMask);
     38c:	87 df       	rcall	.-242    	; 0x29c <LEDs_SetAllLEDs>
     38e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     390:	c0 93 a7 00 	sts	0x00A7, r28
     394:	ff 91       	pop	r31
	}

	Pipe_SelectPipe(PrevPipe);
}
     396:	ef 91       	pop	r30
     398:	cf 91       	pop	r28
     39a:	bf 91       	pop	r27
     39c:	af 91       	pop	r26
     39e:	9f 91       	pop	r25
     3a0:	8f 91       	pop	r24
     3a2:	7f 91       	pop	r23
     3a4:	6f 91       	pop	r22
     3a6:	5f 91       	pop	r21
     3a8:	4f 91       	pop	r20
     3aa:	3f 91       	pop	r19
     3ac:	2f 91       	pop	r18
     3ae:	0f 90       	pop	r0
     3b0:	0b be       	out	0x3b, r0	; 59
     3b2:	0f 90       	pop	r0
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	0f 90       	pop	r0
     3b8:	1f 90       	pop	r1
     3ba:	18 95       	reti

000003bc <SetupHardware>:
     3bc:	84 b7       	in	r24, 0x34	; 52

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     3be:	87 7f       	andi	r24, 0xF7	; 247
     3c0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     3c2:	28 e1       	ldi	r18, 0x18	; 24
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	20 93 60 00 	sts	0x0060, r18
     3cc:	10 92 60 00 	sts	0x0060, r1
     3d0:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	80 e8       	ldi	r24, 0x80	; 128
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	80 93 61 00 	sts	0x0061, r24
     3de:	90 93 61 00 	sts	0x0061, r25
     3e2:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     3e4:	83 e3       	ldi	r24, 0x33	; 51
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	90 93 cd 00 	sts	0x00CD, r25
     3ec:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     3f0:	86 e0       	ldi	r24, 0x06	; 6
     3f2:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     3f6:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     3fa:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     3fe:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     400:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     402:	8a b1       	in	r24, 0x0a	; 10
     404:	80 6f       	ori	r24, 0xF0	; 240
     406:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     408:	8b b1       	in	r24, 0x0b	; 11
     40a:	8f 70       	andi	r24, 0x0F	; 15
     40c:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     40e:	b5 d3       	rcall	.+1898   	; 0xb7a <USB_Init>
     410:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	ce c7       	rjmp	.+3996   	; 0x13b2 <Serial_CreateStream>

00000416 <main>:
     416:	d2 df       	rcall	.-92     	; 0x3bc <SetupHardware>
     418:	88 e9       	ldi	r24, 0x98	; 152
}
     41a:	90 e0       	ldi	r25, 0x00	; 0
 */
int main(void)
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "Audio Input Host Demo running.\r\n" ESC_FG_WHITE));
     41c:	0e 94 15 0a 	call	0x142a	; 0x142a <puts_P>
     420:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     422:	3c df       	rcall	.-392    	; 0x29c <LEDs_SetAllLEDs>
     424:	78 94       	sei
     426:	58 d6       	rcall	.+3248   	; 0x10d8 <USB_USBTask>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     428:	fe cf       	rjmp	.-4      	; 0x426 <main+0x10>

0000042a <EVENT_USB_Host_DeviceAttached>:
	GlobalInterruptEnable();

	for (;;)
	{
		Audio_Host_USBTask(&Microphone_Audio_Interface);
		USB_USBTask();
     42a:	83 ec       	ldi	r24, 0xC3	; 195
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	fd d7       	rcall	.+4090   	; 0x142a <puts_P>
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     430:	80 ea       	ldi	r24, 0xA0	; 160
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     432:	34 cf       	rjmp	.-408    	; 0x29c <LEDs_SetAllLEDs>

00000434 <EVENT_USB_Host_DeviceUnattached>:
     434:	86 ed       	ldi	r24, 0xD6	; 214
     436:	90 e0       	ldi	r25, 0x00	; 0
}
     438:	f8 d7       	rcall	.+4080   	; 0x142a <puts_P>
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     43a:	80 e1       	ldi	r24, 0x10	; 16
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     43c:	2f cf       	rjmp	.-418    	; 0x29c <LEDs_SetAllLEDs>

0000043e <EVENT_USB_Host_DeviceEnumerationComplete>:
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
}
     442:	0f 93       	push	r16

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     444:	1f 93       	push	r17
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
     44e:	c5 50       	subi	r28, 0x05	; 5
     450:	d2 40       	sbci	r29, 0x02	; 2
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     45c:	80 ea       	ldi	r24, 0xA0	; 160
     45e:	1e df       	rcall	.-452    	; 0x29c <LEDs_SetAllLEDs>
     460:	81 e0       	ldi	r24, 0x01	; 1

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     462:	be 01       	movw	r22, r28
     464:	6f 5f       	subi	r22, 0xFF	; 255
     466:	7f 4f       	sbci	r23, 0xFF	; 255
     468:	ae 01       	movw	r20, r28
     46a:	4a 5f       	subi	r20, 0xFA	; 250
     46c:	5f 4f       	sbci	r21, 0xFF	; 255
     46e:	20 e0       	ldi	r18, 0x00	; 0
     470:	32 e0       	ldi	r19, 0x02	; 2
     472:	31 d4       	rcall	.+2146   	; 0xcd6 <USB_Host_GetDeviceConfigDescriptor>
     474:	88 23       	and	r24, r24
     476:	19 f0       	breq	.+6      	; 0x47e <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
     478:	8d ee       	ldi	r24, 0xED	; 237
     47a:	90 e0       	ldi	r25, 0x00	; 0
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     47c:	13 c0       	rjmp	.+38     	; 0x4a4 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
     47e:	69 81       	ldd	r22, Y+1	; 0x01
     480:	7a 81       	ldd	r23, Y+2	; 0x02
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (Audio_Host_ConfigurePipes(&Microphone_Audio_Interface,
     482:	83 e0       	ldi	r24, 0x03	; 3
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	ae 01       	movw	r20, r28
     488:	4a 5f       	subi	r20, 0xFA	; 250
     48a:	5f 4f       	sbci	r21, 0xFF	; 255
     48c:	65 d6       	rcall	.+3274   	; 0x1158 <Audio_Host_ConfigurePipes>
     48e:	88 23       	and	r24, r24
     490:	19 f0       	breq	.+6      	; 0x498 <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
     492:	8a e1       	ldi	r24, 0x1A	; 26
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	06 c0       	rjmp	.+12     	; 0x4a4 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
	                              ConfigDescriptorSize, ConfigDescriptorData) != AUDIO_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Audio Input Device.\r\n"));
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	e2 d5       	rcall	.+3012   	; 0x1060 <USB_Host_SetDeviceConfiguration>
     49c:	88 23       	and	r24, r24
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     49e:	29 f0       	breq	.+10     	; 0x4aa <EVENT_USB_Host_DeviceEnumerationComplete+0x6c>
     4a0:	8c e4       	ldi	r24, 0x4C	; 76
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	c2 d7       	rcall	.+3972   	; 0x142a <puts_P>
     4a6:	80 e9       	ldi	r24, 0x90	; 144
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     4a8:	3c c0       	rjmp	.+120    	; 0x522 <EVENT_USB_Host_DeviceEnumerationComplete+0xe4>
     4aa:	83 e0       	ldi	r24, 0x03	; 3
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	61 e0       	ldi	r22, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4b0:	23 d7       	rcall	.+3654   	; 0x12f8 <Audio_Host_StartStopStreaming>
     4b2:	88 23       	and	r24, r24
		return;
	}

	if (Audio_Host_StartStopStreaming(&Microphone_Audio_Interface, true) != HOST_SENDCONTROL_Successful)
     4b4:	19 f0       	breq	.+6      	; 0x4bc <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
     4b6:	82 e7       	ldi	r24, 0x72	; 114
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	1b c0       	rjmp	.+54     	; 0x4f2 <EVENT_USB_Host_DeviceEnumerationComplete+0xb4>
     4bc:	de 01       	movw	r26, r28
     4be:	13 96       	adiw	r26, 0x03	; 3
     4c0:	e0 e0       	ldi	r30, 0x00	; 0
	{
		puts_P(PSTR("Error Enabling Audio Stream.\r\n"));
     4c2:	f1 e0       	ldi	r31, 0x01	; 1
     4c4:	83 e0       	ldi	r24, 0x03	; 3
     4c6:	01 90       	ld	r0, Z+
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	USB_Audio_SampleFreq_t SampleRate = AUDIO_SAMPLE_FREQ(48000);
     4c8:	0d 92       	st	X+, r0
     4ca:	81 50       	subi	r24, 0x01	; 1
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <EVENT_USB_Host_DeviceEnumerationComplete+0x88>
     4ce:	83 e0       	ldi	r24, 0x03	; 3
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	60 91 03 01 	lds	r22, 0x0103
     4d6:	41 e0       	ldi	r20, 0x01	; 1
     4d8:	21 e0       	ldi	r18, 0x01	; 1
	if (Audio_Host_GetSetEndpointProperty(&Microphone_Audio_Interface, Microphone_Audio_Interface.Config.DataINPipe.Address,
     4da:	03 e0       	ldi	r16, 0x03	; 3
     4dc:	10 e0       	ldi	r17, 0x00	; 0
     4de:	33 e0       	ldi	r19, 0x03	; 3
     4e0:	e3 2e       	mov	r14, r19
     4e2:	f1 2c       	mov	r15, r1
     4e4:	ec 0e       	add	r14, r28
     4e6:	fd 1e       	adc	r15, r29
     4e8:	14 d7       	rcall	.+3624   	; 0x1312 <Audio_Host_GetSetEndpointProperty>
     4ea:	88 23       	and	r24, r24
     4ec:	41 f0       	breq	.+16     	; 0x4fe <EVENT_USB_Host_DeviceEnumerationComplete+0xc0>
     4ee:	81 e9       	ldi	r24, 0x91	; 145
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	9b d7       	rcall	.+3894   	; 0x142a <puts_P>
     4f4:	80 e9       	ldi	r24, 0x90	; 144
     4f6:	d2 de       	rcall	.-604    	; 0x29c <LEDs_SetAllLEDs>
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	b2 d5       	rcall	.+2916   	; 0x1060 <USB_Host_SetDeviceConfiguration>
	                                      AUDIO_REQ_SetCurrent, AUDIO_EPCONTROL_SamplingFreq,
	                                      sizeof(SampleRate), &SampleRate) != HOST_SENDCONTROL_Successful)
	{
		puts_P(PSTR("Error Setting Audio Sampling Frequency.\r\n"));
     4fc:	13 c0       	rjmp	.+38     	; 0x524 <EVENT_USB_Host_DeviceEnumerationComplete+0xe6>
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	80 93 6e 00 	sts	0x006E, r24
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     504:	93 e1       	ldi	r25, 0x13	; 19
     506:	97 bd       	out	0x27, r25	; 39
     508:	84 bd       	out	0x24, r24	; 36
		USB_Host_SetDeviceConfiguration(0);
     50a:	85 bd       	out	0x25, r24	; 37
     50c:	3e 9a       	sbi	0x07, 6	; 7
     50e:	81 ec       	ldi	r24, 0xC1	; 193
		return;
     510:	80 93 90 00 	sts	0x0090, r24
	}

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
     514:	89 e0       	ldi	r24, 0x09	; 9
     516:	80 93 91 00 	sts	0x0091, r24
	OCR0A   = ((F_CPU / 8 / 48000) - 1);
     51a:	8b eb       	ldi	r24, 0xBB	; 187
	TCCR0A  = (1 << WGM01);  // CTC mode
     51c:	91 e0       	ldi	r25, 0x01	; 1
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed
     51e:	85 d7       	rcall	.+3850   	; 0x142a <puts_P>

	/* Set speaker as output */
	DDRC   |= (1 << 6);
     520:	80 e6       	ldi	r24, 0x60	; 96

	/* PWM speaker timer initialization */
	TCCR3A  = ((1 << WGM30) | (1 << COM3A1) | (1 << COM3A0)); // Set on match, clear on TOP
     522:	bc de       	rcall	.-648    	; 0x29c <LEDs_SetAllLEDs>
     524:	cb 5f       	subi	r28, 0xFB	; 251
     526:	dd 4f       	sbci	r29, 0xFD	; 253
	TCCR3B  = ((1 << WGM32) | (1 << CS30));  // Fast 8-Bit PWM, F_CPU speed
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	f8 94       	cli
     52c:	de bf       	out	0x3e, r29	; 62

	puts_P(PSTR("Audio Device Enumerated.\r\n"));
     52e:	0f be       	out	0x3f, r0	; 63
     530:	cd bf       	out	0x3d, r28	; 61
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     536:	1f 91       	pop	r17
     538:	0f 91       	pop	r16
     53a:	ff 90       	pop	r15
}
     53c:	ef 90       	pop	r14
     53e:	08 95       	ret

00000540 <EVENT_USB_Host_HostError>:
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	0f 92       	push	r0
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	89 83       	std	Y+1, r24	; 0x01
     54c:	ae d2       	rcall	.+1372   	; 0xaaa <USB_Disable>
     54e:	00 d0       	rcall	.+0      	; 0x550 <EVENT_USB_Host_HostError+0x10>
     550:	00 d0       	rcall	.+0      	; 0x552 <EVENT_USB_Host_HostError+0x12>
     552:	ed b7       	in	r30, 0x3d	; 61
     554:	fe b7       	in	r31, 0x3e	; 62
     556:	31 96       	adiw	r30, 0x01	; 1
/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     558:	26 ed       	ldi	r18, 0xD6	; 214
     55a:	31 e0       	ldi	r19, 0x01	; 1
     55c:	ad b7       	in	r26, 0x3d	; 61
     55e:	be b7       	in	r27, 0x3e	; 62
     560:	12 96       	adiw	r26, 0x02	; 2
     562:	3c 93       	st	X, r19
     564:	2e 93       	st	-X, r18
     566:	11 97       	sbiw	r26, 0x01	; 1
     568:	89 81       	ldd	r24, Y+1	; 0x01
     56a:	82 83       	std	Z+2, r24	; 0x02
     56c:	13 82       	std	Z+3, r1	; 0x03
     56e:	3e d7       	rcall	.+3708   	; 0x13ec <printf_P>
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	80 e9       	ldi	r24, 0x90	; 144
     57a:	90 de       	rcall	.-736    	; 0x29c <LEDs_SetAllLEDs>
     57c:	ff cf       	rjmp	.-2      	; 0x57c <EVENT_USB_Host_HostError+0x3c>

0000057e <EVENT_USB_Host_DeviceEnumerationFailed>:
     57e:	90 91 4b 01 	lds	r25, 0x014B
     582:	2d b7       	in	r18, 0x3d	; 61
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     584:	3e b7       	in	r19, 0x3e	; 62
     586:	28 50       	subi	r18, 0x08	; 8
     588:	30 40       	sbci	r19, 0x00	; 0
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	f8 94       	cli
     58e:	3e bf       	out	0x3e, r19	; 62
     590:	0f be       	out	0x3f, r0	; 63
     592:	2d bf       	out	0x3d, r18	; 61
     594:	ed b7       	in	r30, 0x3d	; 61
     596:	fe b7       	in	r31, 0x3e	; 62
     598:	31 96       	adiw	r30, 0x01	; 1
     59a:	25 e0       	ldi	r18, 0x05	; 5
     59c:	32 e0       	ldi	r19, 0x02	; 2
     59e:	ad b7       	in	r26, 0x3d	; 61
     5a0:	be b7       	in	r27, 0x3e	; 62
     5a2:	12 96       	adiw	r26, 0x02	; 2
     5a4:	3c 93       	st	X, r19
     5a6:	2e 93       	st	-X, r18
     5a8:	11 97       	sbiw	r26, 0x01	; 1
     5aa:	82 83       	std	Z+2, r24	; 0x02
     5ac:	13 82       	std	Z+3, r1	; 0x03
     5ae:	64 83       	std	Z+4, r22	; 0x04
     5b0:	15 82       	std	Z+5, r1	; 0x05
     5b2:	96 83       	std	Z+6, r25	; 0x06
     5b4:	17 82       	std	Z+7, r1	; 0x07
     5b6:	1a d7       	rcall	.+3636   	; 0x13ec <printf_P>
     5b8:	2d b7       	in	r18, 0x3d	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5ba:	3e b7       	in	r19, 0x3e	; 62
     5bc:	28 5f       	subi	r18, 0xF8	; 248
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	3e bf       	out	0x3e, r19	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	2d bf       	out	0x3d, r18	; 61
     5ca:	80 e9       	ldi	r24, 0x90	; 144
     5cc:	67 ce       	rjmp	.-818    	; 0x29c <LEDs_SetAllLEDs>

000005ce <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5ce:	80 91 9e 00 	lds	r24, 0x009E
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	81 70       	andi	r24, 0x01	; 1
     5d6:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     5d8:	20 91 a0 00 	lds	r18, 0x00A0
     5dc:	2d 7f       	andi	r18, 0xFD	; 253
     5de:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     5e2:	20 91 9e 00 	lds	r18, 0x009E
     5e6:	22 60       	ori	r18, 0x02	; 2
     5e8:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     5ec:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     5f0:	21 fd       	sbrc	r18, 1
     5f2:	fc cf       	rjmp	.-8      	; 0x5ec <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     5f4:	20 91 9e 00 	lds	r18, 0x009E
     5f8:	21 60       	ori	r18, 0x01	; 1
     5fa:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     5fe:	10 92 41 01 	sts	0x0141, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     602:	20 91 a0 00 	lds	r18, 0x00A0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	20 72       	andi	r18, 0x20	; 32
     60a:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     60c:	40 91 a0 00 	lds	r20, 0x00A0
     610:	4f 7d       	andi	r20, 0xDF	; 223
     612:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     616:	40 91 9f 00 	lds	r20, 0x009F
     61a:	4f 7d       	andi	r20, 0xDF	; 223
     61c:	40 93 9f 00 	sts	0x009F, r20
     620:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     622:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     626:	55 ff       	sbrs	r21, 5
     628:	0b c0       	rjmp	.+22     	; 0x640 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     62a:	40 91 9f 00 	lds	r20, 0x009F
     62e:	4f 7d       	andi	r20, 0xDF	; 223
     630:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     634:	40 91 9f 00 	lds	r20, 0x009F
     638:	4d 7f       	andi	r20, 0xFD	; 253
     63a:	40 93 9f 00 	sts	0x009F, r20
     63e:	08 c0       	rjmp	.+16     	; 0x650 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     640:	ef ec       	ldi	r30, 0xCF	; 207
     642:	f7 e0       	ldi	r31, 0x07	; 7
     644:	31 97       	sbiw	r30, 0x01	; 1
     646:	f1 f7       	brne	.-4      	; 0x644 <USB_Host_ResetDevice+0x76>
     648:	00 c0       	rjmp	.+0      	; 0x64a <USB_Host_ResetDevice+0x7c>
     64a:	00 00       	nop
     64c:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     64e:	49 f7       	brne	.-46     	; 0x622 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     650:	21 15       	cp	r18, r1
     652:	31 05       	cpc	r19, r1
     654:	29 f0       	breq	.+10     	; 0x660 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     656:	20 91 a0 00 	lds	r18, 0x00A0
     65a:	20 62       	ori	r18, 0x20	; 32
     65c:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     660:	00 97       	sbiw	r24, 0x00	; 0
     662:	29 f4       	brne	.+10     	; 0x66e <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     664:	80 91 9e 00 	lds	r24, 0x009E
     668:	8e 7f       	andi	r24, 0xFE	; 254
     66a:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     66e:	80 91 a0 00 	lds	r24, 0x00A0
     672:	82 60       	ori	r24, 0x02	; 2
     674:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     678:	08 95       	ret

0000067a <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     67a:	40 91 9e 00 	lds	r20, 0x009E
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	41 70       	andi	r20, 0x01	; 1
     682:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     684:	20 91 a0 00 	lds	r18, 0x00A0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	20 72       	andi	r18, 0x20	; 32
     68c:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     68e:	90 91 a0 00 	lds	r25, 0x00A0
     692:	9f 7d       	andi	r25, 0xDF	; 223
     694:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     698:	90 91 9f 00 	lds	r25, 0x009F
     69c:	9f 7d       	andi	r25, 0xDF	; 223
     69e:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6a2:	90 91 9e 00 	lds	r25, 0x009E
     6a6:	91 60       	ori	r25, 0x01	; 1
     6a8:	90 93 9e 00 	sts	0x009E, r25
     6ac:	26 c0       	rjmp	.+76     	; 0x6fa <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     6ae:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     6b2:	95 ff       	sbrs	r25, 5
     6b4:	06 c0       	rjmp	.+12     	; 0x6c2 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6b6:	90 91 9f 00 	lds	r25, 0x009F
     6ba:	9f 7d       	andi	r25, 0xDF	; 223
     6bc:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     6c0:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     6c2:	90 91 4b 01 	lds	r25, 0x014B
     6c6:	91 30       	cpi	r25, 0x01	; 1
     6c8:	d9 f0       	breq	.+54     	; 0x700 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     6ca:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     6ce:	94 ff       	sbrs	r25, 4
     6d0:	09 c0       	rjmp	.+18     	; 0x6e4 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     6d2:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     6d6:	80 91 a6 00 	lds	r24, 0x00A6
     6da:	8f 7e       	andi	r24, 0xEF	; 239
     6dc:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     6e0:	82 e0       	ldi	r24, 0x02	; 2

			break;
     6e2:	0f c0       	rjmp	.+30     	; 0x702 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     6e4:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     6e8:	91 ff       	sbrs	r25, 1
     6ea:	07 c0       	rjmp	.+14     	; 0x6fa <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     6ec:	80 91 a6 00 	lds	r24, 0x00A6
     6f0:	8d 7f       	andi	r24, 0xFD	; 253
     6f2:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     6f6:	83 e0       	ldi	r24, 0x03	; 3

			break;
     6f8:	04 c0       	rjmp	.+8      	; 0x702 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     6fa:	88 23       	and	r24, r24
     6fc:	c1 f6       	brne	.-80     	; 0x6ae <USB_Host_WaitMS+0x34>
     6fe:	01 c0       	rjmp	.+2      	; 0x702 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     700:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     702:	41 15       	cp	r20, r1
     704:	51 05       	cpc	r21, r1
     706:	29 f4       	brne	.+10     	; 0x712 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     708:	90 91 9e 00 	lds	r25, 0x009E
     70c:	9e 7f       	andi	r25, 0xFE	; 254
     70e:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     712:	21 15       	cp	r18, r1
     714:	31 05       	cpc	r19, r1
     716:	29 f0       	breq	.+10     	; 0x722 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     718:	90 91 a0 00 	lds	r25, 0x00A0
     71c:	90 62       	ori	r25, 0x20	; 32
     71e:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     722:	08 95       	ret

00000724 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     724:	0f 93       	push	r16
     726:	1f 93       	push	r17
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	28 97       	sbiw	r28, 0x08	; 8
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	f8 94       	cli
     736:	de bf       	out	0x3e, r29	; 62
     738:	0f be       	out	0x3f, r0	; 63
     73a:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     73c:	80 91 4b 01 	lds	r24, 0x014B
     740:	85 30       	cpi	r24, 0x05	; 5
     742:	09 f4       	brne	.+2      	; 0x746 <USB_Host_ProcessNextHostState+0x22>
     744:	99 c0       	rjmp	.+306    	; 0x878 <USB_Host_ProcessNextHostState+0x154>
     746:	86 30       	cpi	r24, 0x06	; 6
     748:	68 f4       	brcc	.+26     	; 0x764 <USB_Host_ProcessNextHostState+0x40>
     74a:	82 30       	cpi	r24, 0x02	; 2
     74c:	c1 f1       	breq	.+112    	; 0x7be <USB_Host_ProcessNextHostState+0x9a>
     74e:	83 30       	cpi	r24, 0x03	; 3
     750:	18 f4       	brcc	.+6      	; 0x758 <USB_Host_ProcessNextHostState+0x34>
     752:	88 23       	and	r24, r24
     754:	a1 f0       	breq	.+40     	; 0x77e <USB_Host_ProcessNextHostState+0x5a>
     756:	04 c1       	rjmp	.+520    	; 0x960 <USB_Host_ProcessNextHostState+0x23c>
     758:	83 30       	cpi	r24, 0x03	; 3
     75a:	d9 f1       	breq	.+118    	; 0x7d2 <USB_Host_ProcessNextHostState+0xae>
     75c:	84 30       	cpi	r24, 0x04	; 4
     75e:	09 f0       	breq	.+2      	; 0x762 <USB_Host_ProcessNextHostState+0x3e>
     760:	ff c0       	rjmp	.+510    	; 0x960 <USB_Host_ProcessNextHostState+0x23c>
     762:	62 c0       	rjmp	.+196    	; 0x828 <USB_Host_ProcessNextHostState+0x104>
     764:	87 30       	cpi	r24, 0x07	; 7
     766:	09 f4       	brne	.+2      	; 0x76a <USB_Host_ProcessNextHostState+0x46>
     768:	9e c0       	rjmp	.+316    	; 0x8a6 <USB_Host_ProcessNextHostState+0x182>
     76a:	87 30       	cpi	r24, 0x07	; 7
     76c:	08 f4       	brcc	.+2      	; 0x770 <USB_Host_ProcessNextHostState+0x4c>
     76e:	8f c0       	rjmp	.+286    	; 0x88e <USB_Host_ProcessNextHostState+0x16a>
     770:	88 30       	cpi	r24, 0x08	; 8
     772:	09 f4       	brne	.+2      	; 0x776 <USB_Host_ProcessNextHostState+0x52>
     774:	b8 c0       	rjmp	.+368    	; 0x8e6 <USB_Host_ProcessNextHostState+0x1c2>
     776:	89 30       	cpi	r24, 0x09	; 9
     778:	09 f0       	breq	.+2      	; 0x77c <USB_Host_ProcessNextHostState+0x58>
     77a:	f2 c0       	rjmp	.+484    	; 0x960 <USB_Host_ProcessNextHostState+0x23c>
     77c:	d9 c0       	rjmp	.+434    	; 0x930 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     77e:	00 91 3e 01 	lds	r16, 0x013E
     782:	10 91 3f 01 	lds	r17, 0x013F
     786:	01 15       	cp	r16, r1
     788:	11 05       	cpc	r17, r1
     78a:	09 f4       	brne	.+2      	; 0x78e <USB_Host_ProcessNextHostState+0x6a>
     78c:	e9 c0       	rjmp	.+466    	; 0x960 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	74 df       	rcall	.-280    	; 0x67a <USB_Host_WaitMS>
     792:	68 2f       	mov	r22, r24
     794:	88 23       	and	r24, r24
     796:	31 f0       	breq	.+12     	; 0x7a4 <USB_Host_ProcessNextHostState+0x80>
     798:	80 91 40 01 	lds	r24, 0x0140
				{
					USB_HostState = PostWaitState;
     79c:	80 93 4b 01 	sts	0x014B, r24
     7a0:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     7a2:	d2 c0       	rjmp	.+420    	; 0x948 <USB_Host_ProcessNextHostState+0x224>
					break;
     7a4:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
     7a6:	10 40       	sbci	r17, 0x00	; 0
     7a8:	10 93 3f 01 	sts	0x013F, r17
     7ac:	00 93 3e 01 	sts	0x013E, r16
     7b0:	01 15       	cp	r16, r1
     7b2:	11 05       	cpc	r17, r1
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <USB_Host_ProcessNextHostState+0x94>
     7b6:	d4 c0       	rjmp	.+424    	; 0x960 <USB_Host_ProcessNextHostState+0x23c>
     7b8:	80 91 40 01 	lds	r24, 0x0140
				  USB_HostState = PostWaitState;
     7bc:	07 c0       	rjmp	.+14     	; 0x7cc <USB_Host_ProcessNextHostState+0xa8>
     7be:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     7c0:	93 e0       	ldi	r25, 0x03	; 3
     7c2:	90 93 3f 01 	sts	0x013F, r25
     7c6:	80 93 3e 01 	sts	0x013E, r24
     7ca:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     7cc:	80 93 4b 01 	sts	0x014B, r24
     7d0:	c7 c0       	rjmp	.+398    	; 0x960 <USB_Host_ProcessNextHostState+0x23c>
			break;
     7d2:	80 91 3e 01 	lds	r24, 0x013E
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     7d6:	90 91 3f 01 	lds	r25, 0x013F
     7da:	9c 01       	movw	r18, r24
     7dc:	21 50       	subi	r18, 0x01	; 1
     7de:	30 40       	sbci	r19, 0x00	; 0
     7e0:	30 93 3f 01 	sts	0x013F, r19
     7e4:	20 93 3e 01 	sts	0x013E, r18
     7e8:	00 97       	sbiw	r24, 0x00	; 0
     7ea:	39 f0       	breq	.+14     	; 0x7fa <USB_Host_ProcessNextHostState+0xd6>
     7ec:	8f ec       	ldi	r24, 0xCF	; 207
     7ee:	97 e0       	ldi	r25, 0x07	; 7
     7f0:	01 97       	sbiw	r24, 0x01	; 1
     7f2:	f1 f7       	brne	.-4      	; 0x7f0 <USB_Host_ProcessNextHostState+0xcc>
     7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <USB_Host_ProcessNextHostState+0xd2>
     7f6:	00 00       	nop
     7f8:	b3 c0       	rjmp	.+358    	; 0x960 <USB_Host_ProcessNextHostState+0x23c>
     7fa:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     7fc:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     800:	80 61       	ori	r24, 0x10	; 16
     802:	80 93 d8 00 	sts	0x00D8, r24
     806:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     80a:	8b 7f       	andi	r24, 0xFB	; 251
     80c:	80 93 dd 00 	sts	0x00DD, r24
     810:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     814:	80 61       	ori	r24, 0x10	; 16
     816:	80 93 d7 00 	sts	0x00D7, r24
     81a:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     81e:	82 60       	ori	r24, 0x02	; 2
     820:	80 93 dd 00 	sts	0x00DD, r24
     824:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     826:	d2 cf       	rjmp	.-92     	; 0x7cc <USB_Host_ProcessNextHostState+0xa8>
     828:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     82c:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     82e:	98 c0       	rjmp	.+304    	; 0x960 <USB_Host_ProcessNextHostState+0x23c>
     830:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     834:	8e 7f       	andi	r24, 0xFE	; 254
     836:	80 93 9f 00 	sts	0x009F, r24
     83a:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     83e:	8d 7f       	andi	r24, 0xFD	; 253
     840:	80 93 9f 00 	sts	0x009F, r24
     844:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     848:	8d 7f       	andi	r24, 0xFD	; 253
     84a:	80 93 df 00 	sts	0x00DF, r24
     84e:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     852:	82 60       	ori	r24, 0x02	; 2
     854:	80 93 de 00 	sts	0x00DE, r24
     858:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     85c:	81 60       	ori	r24, 0x01	; 1
     85e:	80 93 9e 00 	sts	0x009E, r24
     862:	0f d1       	rcall	.+542    	; 0xa82 <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     864:	10 92 4b 01 	sts	0x014B, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     868:	84 e6       	ldi	r24, 0x64	; 100
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	90 93 3f 01 	sts	0x013F, r25
     870:	80 93 3e 01 	sts	0x013E, r24
     874:	85 e0       	ldi	r24, 0x05	; 5
     876:	59 c0       	rjmp	.+178    	; 0x92a <USB_Host_ProcessNextHostState+0x206>
     878:	aa de       	rcall	.-684    	; 0x5ce <USB_Host_ResetDevice>
     87a:	10 92 4b 01 	sts	0x014B, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     87e:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	90 93 3f 01 	sts	0x013F, r25
     886:	80 93 3e 01 	sts	0x013E, r24
     88a:	86 e0       	ldi	r24, 0x06	; 6
     88c:	4e c0       	rjmp	.+156    	; 0x92a <USB_Host_ProcessNextHostState+0x206>
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     894:	20 e4       	ldi	r18, 0x40	; 64
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	01 e0       	ldi	r16, 0x01	; 1
     89a:	6d d0       	rcall	.+218    	; 0x976 <Pipe_ConfigurePipe>
     89c:	88 23       	and	r24, r24
     89e:	09 f4       	brne	.+2      	; 0x8a2 <USB_Host_ProcessNextHostState+0x17e>
     8a0:	4f c0       	rjmp	.+158    	; 0x940 <USB_Host_ProcessNextHostState+0x21c>
     8a2:	87 e0       	ldi	r24, 0x07	; 7
     8a4:	93 cf       	rjmp	.-218    	; 0x7cc <USB_Host_ProcessNextHostState+0xa8>
     8a6:	a3 e4       	ldi	r26, 0x43	; 67
     8a8:	b1 e0       	ldi	r27, 0x01	; 1
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     8aa:	e3 e1       	ldi	r30, 0x13	; 19
     8ac:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     8ae:	88 e0       	ldi	r24, 0x08	; 8
     8b0:	01 90       	ld	r0, Z+
     8b2:	0d 92       	st	X+, r0
     8b4:	81 50       	subi	r24, 0x01	; 1
     8b6:	e1 f7       	brne	.-8      	; 0x8b0 <USB_Host_ProcessNextHostState+0x18c>
     8b8:	10 92 a7 00 	sts	0x00A7, r1
     8bc:	ce 01       	movw	r24, r28
     8be:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     8c0:	d1 d2       	rcall	.+1442   	; 0xe64 <USB_Host_SendControlRequest>
     8c2:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     8c4:	88 23       	and	r24, r24
     8c6:	09 f0       	breq	.+2      	; 0x8ca <USB_Host_ProcessNextHostState+0x1a6>
     8c8:	3e c0       	rjmp	.+124    	; 0x946 <USB_Host_ProcessNextHostState+0x222>
     8ca:	88 85       	ldd	r24, Y+8	; 0x08
     8cc:	80 93 23 01 	sts	0x0123, r24
     8d0:	7e de       	rcall	.-772    	; 0x5ce <USB_Host_ResetDevice>
     8d2:	10 92 4b 01 	sts	0x014B, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     8d6:	88 ec       	ldi	r24, 0xC8	; 200
     8d8:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
     8da:	90 93 3f 01 	sts	0x013F, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     8de:	80 93 3e 01 	sts	0x013E, r24
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	22 c0       	rjmp	.+68     	; 0x92a <USB_Host_ProcessNextHostState+0x206>
     8e6:	20 91 23 01 	lds	r18, 0x0123
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	40 e0       	ldi	r20, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     8f2:	01 e0       	ldi	r16, 0x01	; 1
     8f4:	40 d0       	rcall	.+128    	; 0x976 <Pipe_ConfigurePipe>
     8f6:	88 23       	and	r24, r24
     8f8:	19 f1       	breq	.+70     	; 0x940 <USB_Host_ProcessNextHostState+0x21c>
     8fa:	a3 e4       	ldi	r26, 0x43	; 67
     8fc:	b1 e0       	ldi	r27, 0x01	; 1
     8fe:	eb e1       	ldi	r30, 0x1B	; 27
     900:	f1 e0       	ldi	r31, 0x01	; 1
     902:	88 e0       	ldi	r24, 0x08	; 8
     904:	01 90       	ld	r0, Z+
     906:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     908:	81 50       	subi	r24, 0x01	; 1
     90a:	e1 f7       	brne	.-8      	; 0x904 <USB_Host_ProcessNextHostState+0x1e0>
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	a9 d2       	rcall	.+1362   	; 0xe64 <USB_Host_SendControlRequest>
     912:	68 2f       	mov	r22, r24
     914:	88 23       	and	r24, r24
     916:	b9 f4       	brne	.+46     	; 0x946 <USB_Host_ProcessNextHostState+0x222>
     918:	10 92 4b 01 	sts	0x014B, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     91c:	84 e6       	ldi	r24, 0x64	; 100
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	90 93 3f 01 	sts	0x013F, r25
     924:	80 93 3e 01 	sts	0x013E, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     928:	89 e0       	ldi	r24, 0x09	; 9
     92a:	80 93 40 01 	sts	0x0140, r24
     92e:	18 c0       	rjmp	.+48     	; 0x960 <USB_Host_ProcessNextHostState+0x23c>
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	80 93 a1 00 	sts	0x00A1, r24
     936:	8a e0       	ldi	r24, 0x0A	; 10
     938:	80 93 4b 01 	sts	0x014B, r24
     93c:	80 dd       	rcall	.-1280   	; 0x43e <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     93e:	10 c0       	rjmp	.+32     	; 0x960 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	84 e0       	ldi	r24, 0x04	; 4
     944:	01 c0       	rjmp	.+2      	; 0x948 <USB_Host_ProcessNextHostState+0x224>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     946:	83 e0       	ldi	r24, 0x03	; 3
     948:	90 91 4b 01 	lds	r25, 0x014B

			EVENT_USB_Host_DeviceEnumerationComplete();
     94c:	91 30       	cpi	r25, 0x01	; 1
     94e:	41 f0       	breq	.+16     	; 0x960 <USB_Host_ProcessNextHostState+0x23c>
			break;
     950:	16 de       	rcall	.-980    	; 0x57e <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     952:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     956:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     958:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     95c:	6b dd       	rcall	.-1322   	; 0x434 <EVENT_USB_Host_DeviceUnattached>
     95e:	bd d0       	rcall	.+378    	; 0xada <USB_ResetInterface>
     960:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     962:	0f b6       	in	r0, 0x3f	; 63
     964:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     966:	de bf       	out	0x3e, r29	; 62
     968:	0f be       	out	0x3f, r0	; 63
     96a:	cd bf       	out	0x3d, r28	; 61
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16

		USB_ResetInterface();
     974:	08 95       	ret

00000976 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     976:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     978:	58 2f       	mov	r21, r24
     97a:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     97c:	87 ff       	sbrs	r24, 7
     97e:	02 c0       	rjmp	.+4      	; 0x984 <Pipe_ConfigurePipe+0xe>
     980:	80 e1       	ldi	r24, 0x10	; 16
     982:	01 c0       	rjmp	.+2      	; 0x986 <Pipe_ConfigurePipe+0x10>
     984:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     986:	57 30       	cpi	r21, 0x07	; 7
     988:	08 f0       	brcs	.+2      	; 0x98c <Pipe_ConfigurePipe+0x16>
     98a:	57 c0       	rjmp	.+174    	; 0xa3a <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     98c:	66 23       	and	r22, r22
     98e:	09 f4       	brne	.+2      	; 0x992 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     990:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     992:	4f 70       	andi	r20, 0x0F	; 15
     994:	62 95       	swap	r22
     996:	66 0f       	add	r22, r22
     998:	66 0f       	add	r22, r22
     99a:	60 7c       	andi	r22, 0xC0	; 192
     99c:	64 2b       	or	r22, r20
     99e:	68 2b       	or	r22, r24
     9a0:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9a2:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     9a4:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     9a8:	45 17       	cp	r20, r21
     9aa:	a9 f4       	brne	.+42     	; 0x9d6 <Pipe_ConfigurePipe+0x60>
     9ac:	04 c0       	rjmp	.+8      	; 0x9b6 <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     9ae:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     9b0:	88 0f       	add	r24, r24
     9b2:	99 1f       	adc	r25, r25
     9b4:	03 c0       	rjmp	.+6      	; 0x9bc <Pipe_ConfigurePipe+0x46>
     9b6:	88 e0       	ldi	r24, 0x08	; 8
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     9bc:	82 17       	cp	r24, r18
     9be:	93 07       	cpc	r25, r19
     9c0:	10 f4       	brcc	.+4      	; 0x9c6 <Pipe_ConfigurePipe+0x50>
     9c2:	75 30       	cpi	r23, 0x05	; 5
     9c4:	a1 f7       	brne	.-24     	; 0x9ae <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     9c6:	87 2f       	mov	r24, r23
     9c8:	82 95       	swap	r24
     9ca:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9cc:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     9ce:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     9d0:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     9d2:	e0 e0       	ldi	r30, 0x00	; 0
     9d4:	08 c0       	rjmp	.+16     	; 0x9e6 <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     9d6:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     9da:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     9de:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     9e2:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     9e6:	81 ff       	sbrs	r24, 1
     9e8:	20 c0       	rjmp	.+64     	; 0xa2a <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     9ea:	90 91 a9 00 	lds	r25, 0x00A9
     9ee:	9e 7f       	andi	r25, 0xFE	; 254
     9f0:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     9f4:	90 91 ab 00 	lds	r25, 0x00AB
     9f8:	9d 7f       	andi	r25, 0xFD	; 253
     9fa:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     9fe:	90 91 a9 00 	lds	r25, 0x00A9
     a02:	91 60       	ori	r25, 0x01	; 1
     a04:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     a08:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     a0c:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     a10:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     a14:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     a18:	80 91 a9 00 	lds	r24, 0x00A9
     a1c:	80 62       	ori	r24, 0x20	; 32
     a1e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a22:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     a26:	87 ff       	sbrs	r24, 7
     a28:	08 c0       	rjmp	.+16     	; 0xa3a <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a2a:	4f 5f       	subi	r20, 0xFF	; 255
     a2c:	47 30       	cpi	r20, 0x07	; 7
     a2e:	09 f0       	breq	.+2      	; 0xa32 <Pipe_ConfigurePipe+0xbc>
     a30:	b9 cf       	rjmp	.-142    	; 0x9a4 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a32:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	01 c0       	rjmp	.+2      	; 0xa3c <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     a3a:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     a3c:	0f 91       	pop	r16
     a3e:	08 95       	ret

00000a40 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     a40:	ff 92       	push	r15
     a42:	0f 93       	push	r16
     a44:	1f 93       	push	r17
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
     a4c:	ec 01       	movw	r28, r24
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     a4e:	ff 24       	eor	r15, r15
     a50:	0d c0       	rjmp	.+26     	; 0xa6c <Pipe_ConfigurePipeTable+0x2c>
	{
		if (!(Table[i].Address))
     a52:	88 81       	ld	r24, Y
     a54:	88 23       	and	r24, r24
     a56:	41 f0       	breq	.+16     	; 0xa68 <Pipe_ConfigurePipeTable+0x28>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     a58:	29 81       	ldd	r18, Y+1	; 0x01
     a5a:	3a 81       	ldd	r19, Y+2	; 0x02
     a5c:	6c 81       	ldd	r22, Y+4	; 0x04
     a5e:	4b 81       	ldd	r20, Y+3	; 0x03
     a60:	0d 81       	ldd	r16, Y+5	; 0x05
     a62:	89 df       	rcall	.-238    	; 0x976 <Pipe_ConfigurePipe>
     a64:	88 23       	and	r24, r24
     a66:	31 f0       	breq	.+12     	; 0xa74 <Pipe_ConfigurePipeTable+0x34>
     a68:	f3 94       	inc	r15
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     a6a:	26 96       	adiw	r28, 0x06	; 6
     a6c:	f1 16       	cp	r15, r17
     a6e:	89 f7       	brne	.-30     	; 0xa52 <Pipe_ConfigurePipeTable+0x12>
     a70:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}
	
	return true;
     a72:	01 c0       	rjmp	.+2      	; 0xa76 <Pipe_ConfigurePipeTable+0x36>
     a74:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
     a76:	df 91       	pop	r29
		}
	}
	
	return true;
}
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	08 95       	ret

00000a82 <Pipe_ClearPipes>:
     a82:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     a8c:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     a90:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     a94:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a98:	90 91 a9 00 	lds	r25, 0x00A9
     a9c:	9e 7f       	andi	r25, 0xFE	; 254
     a9e:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     aa2:	8f 5f       	subi	r24, 0xFF	; 255
     aa4:	87 30       	cpi	r24, 0x07	; 7
     aa6:	81 f7       	brne	.-32     	; 0xa88 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     aa8:	08 95       	ret

00000aaa <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     aaa:	75 d0       	rcall	.+234    	; 0xb96 <USB_INT_DisableAllInterrupts>
     aac:	7c d0       	rcall	.+248    	; 0xba6 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     aae:	e0 ee       	ldi	r30, 0xE0	; 224
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     ab2:	80 81       	ld	r24, Z
     ab4:	81 60       	ori	r24, 0x01	; 1
     ab6:	80 83       	st	Z, r24
     ab8:	e8 ed       	ldi	r30, 0xD8	; 216
     aba:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     abc:	80 81       	ld	r24, Z
     abe:	8f 77       	andi	r24, 0x7F	; 127
     ac0:	80 83       	st	Z, r24
     ac2:	19 bc       	out	0x29, r1	; 41
     ac4:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     ac6:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     ac8:	8c 91       	ld	r24, X
     aca:	8e 7f       	andi	r24, 0xFE	; 254
     acc:	8c 93       	st	X, r24
     ace:	80 81       	ld	r24, Z
     ad0:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     ad2:	80 83       	st	Z, r24
     ad4:	10 92 42 01 	sts	0x0142, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     ad8:	08 95       	ret

00000ada <USB_ResetInterface>:
     ada:	5d d0       	rcall	.+186    	; 0xb96 <USB_INT_DisableAllInterrupts>
}
     adc:	64 d0       	rcall	.+200    	; 0xba6 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     ade:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     ae2:	8f 77       	andi	r24, 0x7F	; 127
     ae4:	80 93 d8 00 	sts	0x00D8, r24
     ae8:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     aec:	80 68       	ori	r24, 0x80	; 128
     aee:	80 93 d8 00 	sts	0x00D8, r24
     af2:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     af6:	8f 7d       	andi	r24, 0xDF	; 223
     af8:	80 93 d8 00 	sts	0x00D8, r24
     afc:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     b00:	8f 77       	andi	r24, 0x7F	; 127
     b02:	80 93 d7 00 	sts	0x00D7, r24
     b06:	8c e0       	ldi	r24, 0x0C	; 12
     b08:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b0a:	8e e0       	ldi	r24, 0x0E	; 14
     b0c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b0e:	09 b4       	in	r0, 0x29	; 41
     b10:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     b12:	fd cf       	rjmp	.-6      	; 0xb0e <USB_ResetInterface+0x34>
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	80 93 4b 01 	sts	0x014B, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     b1a:	10 92 41 01 	sts	0x0141, r1
	USB_Host_ConfigurationNumber = 0;
     b1e:	80 e4       	ldi	r24, 0x40	; 64
     b20:	80 93 23 01 	sts	0x0123, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     b24:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     b28:	80 64       	ori	r24, 0x40	; 64
     b2a:	80 93 d8 00 	sts	0x00D8, r24
     b2e:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b32:	81 60       	ori	r24, 0x01	; 1
     b34:	80 93 dd 00 	sts	0x00DD, r24
     b38:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     b3c:	84 60       	ori	r24, 0x04	; 4
     b3e:	80 93 dd 00 	sts	0x00DD, r24
     b42:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     b46:	8f 7e       	andi	r24, 0xEF	; 239
     b48:	80 93 d7 00 	sts	0x00D7, r24
     b4c:	6f 9a       	sbi	0x0d, 7	; 13
     b4e:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     b50:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     b54:	81 60       	ori	r24, 0x01	; 1
     b56:	80 93 de 00 	sts	0x00DE, r24
     b5a:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     b5e:	84 60       	ori	r24, 0x04	; 4
     b60:	80 93 de 00 	sts	0x00DE, r24
     b64:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b68:	8e 7f       	andi	r24, 0xFE	; 254
     b6a:	80 93 e0 00 	sts	0x00E0, r24
     b6e:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     b72:	80 61       	ori	r24, 0x10	; 16
     b74:	80 93 d8 00 	sts	0x00D8, r24
     b78:	08 95       	ret

00000b7a <USB_Init>:
     b7a:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     b7e:	80 81       	ld	r24, Z
     b80:	8f 7e       	andi	r24, 0xEF	; 239
     b82:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     b84:	e7 ed       	ldi	r30, 0xD7	; 215
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	81 60       	ori	r24, 0x01	; 1
     b8c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	80 93 42 01 	sts	0x0142, r24

	USB_ResetInterface();
     b94:	a2 cf       	rjmp	.-188    	; 0xada <USB_ResetInterface>

00000b96 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     b96:	e8 ed       	ldi	r30, 0xD8	; 216
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	8c 7f       	andi	r24, 0xFC	; 252
     b9e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     ba0:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     ba4:	08 95       	ret

00000ba6 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     ba6:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     baa:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     bae:	08 95       	ret

00000bb0 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     bb0:	1f 92       	push	r1
     bb2:	0f 92       	push	r0
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	0f 92       	push	r0
     bb8:	0b b6       	in	r0, 0x3b	; 59
     bba:	0f 92       	push	r0
     bbc:	11 24       	eor	r1, r1
     bbe:	2f 93       	push	r18
     bc0:	3f 93       	push	r19
     bc2:	4f 93       	push	r20
     bc4:	5f 93       	push	r21
     bc6:	6f 93       	push	r22
     bc8:	7f 93       	push	r23
     bca:	8f 93       	push	r24
     bcc:	9f 93       	push	r25
     bce:	af 93       	push	r26
     bd0:	bf 93       	push	r27
     bd2:	ef 93       	push	r30
     bd4:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     bd6:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     bda:	85 ff       	sbrs	r24, 5
     bdc:	0a c0       	rjmp	.+20     	; 0xbf2 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     bde:	80 91 a0 00 	lds	r24, 0x00A0
     be2:	85 ff       	sbrs	r24, 5
     be4:	06 c0       	rjmp	.+12     	; 0xbf2 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     be6:	80 91 9f 00 	lds	r24, 0x009F
     bea:	8f 7d       	andi	r24, 0xDF	; 223
     bec:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     bf0:	10 d1       	rcall	.+544    	; 0xe12 <USB_Event_Stub>
     bf2:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     bf6:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     bf8:	15 c0       	rjmp	.+42     	; 0xc24 <__vector_10+0x74>
     bfa:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     bfe:	81 ff       	sbrs	r24, 1
     c00:	11 c0       	rjmp	.+34     	; 0xc24 <__vector_10+0x74>
     c02:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     c06:	8d 7f       	andi	r24, 0xFD	; 253
     c08:	80 93 9f 00 	sts	0x009F, r24
     c0c:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     c10:	8e 7f       	andi	r24, 0xFE	; 254
     c12:	80 93 9f 00 	sts	0x009F, r24
     c16:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     c1a:	8d 7f       	andi	r24, 0xFD	; 253
     c1c:	80 93 a0 00 	sts	0x00A0, r24
     c20:	09 dc       	rcall	.-2030   	; 0x434 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     c22:	5b df       	rcall	.-330    	; 0xada <USB_ResetInterface>
     c24:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     c28:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     c2a:	15 c0       	rjmp	.+42     	; 0xc56 <__vector_10+0xa6>
     c2c:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     c30:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     c32:	11 c0       	rjmp	.+34     	; 0xc56 <__vector_10+0xa6>
     c34:	80 91 df 00 	lds	r24, 0x00DF
     c38:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     c3a:	80 93 df 00 	sts	0x00DF, r24
     c3e:	77 98       	cbi	0x0e, 7	; 14
     c40:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     c44:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c46:	80 93 dd 00 	sts	0x00DD, r24
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	79 dc       	rcall	.-1806   	; 0x540 <EVENT_USB_Host_HostError>
     c4e:	f2 db       	rcall	.-2076   	; 0x434 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	80 93 4b 01 	sts	0x014B, r24
		EVENT_USB_Host_DeviceUnattached();
     c56:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     c5a:	80 ff       	sbrs	r24, 0
     c5c:	17 c0       	rjmp	.+46     	; 0xc8c <__vector_10+0xdc>
     c5e:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     c62:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     c64:	13 c0       	rjmp	.+38     	; 0xc8c <__vector_10+0xdc>
     c66:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     c6a:	8e 7f       	andi	r24, 0xFE	; 254
     c6c:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     c70:	80 91 de 00 	lds	r24, 0x00DE
     c74:	8e 7f       	andi	r24, 0xFE	; 254
     c76:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     c7a:	d7 db       	rcall	.-2130   	; 0x42a <EVENT_USB_Host_DeviceAttached>
     c7c:	80 91 a0 00 	lds	r24, 0x00A0
     c80:	82 60       	ori	r24, 0x02	; 2
     c82:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     c86:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     c88:	80 93 4b 01 	sts	0x014B, r24
     c8c:	80 91 df 00 	lds	r24, 0x00DF
     c90:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     c92:	0e c0       	rjmp	.+28     	; 0xcb0 <__vector_10+0x100>
     c94:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     c98:	82 ff       	sbrs	r24, 2
     c9a:	0a c0       	rjmp	.+20     	; 0xcb0 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     c9c:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     ca0:	8b 7f       	andi	r24, 0xFB	; 251
     ca2:	80 93 df 00 	sts	0x00DF, r24
     ca6:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	69 dc       	rcall	.-1838   	; 0x57e <EVENT_USB_Host_DeviceEnumerationFailed>
     cac:	c3 db       	rcall	.-2170   	; 0x434 <EVENT_USB_Host_DeviceUnattached>
     cae:	15 df       	rcall	.-470    	; 0xada <USB_ResetInterface>
     cb0:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     cb2:	ef 91       	pop	r30
     cb4:	bf 91       	pop	r27
     cb6:	af 91       	pop	r26
     cb8:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     cba:	8f 91       	pop	r24
     cbc:	7f 91       	pop	r23

		USB_ResetInterface();
     cbe:	6f 91       	pop	r22
     cc0:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     cc2:	4f 91       	pop	r20
     cc4:	3f 91       	pop	r19
     cc6:	2f 91       	pop	r18
     cc8:	0f 90       	pop	r0
     cca:	0b be       	out	0x3b, r0	; 59
     ccc:	0f 90       	pop	r0
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	0f 90       	pop	r0
     cd2:	1f 90       	pop	r1
     cd4:	18 95       	reti

00000cd6 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     cd6:	cf 92       	push	r12
     cd8:	df 92       	push	r13
     cda:	ef 92       	push	r14
     cdc:	ff 92       	push	r15
     cde:	0f 93       	push	r16
     ce0:	1f 93       	push	r17
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	29 97       	sbiw	r28, 0x09	; 9
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	6b 01       	movw	r12, r22
     cf8:	8a 01       	movw	r16, r20
     cfa:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     cfc:	90 e8       	ldi	r25, 0x80	; 128
     cfe:	90 93 43 01 	sts	0x0143, r25
     d02:	96 e0       	ldi	r25, 0x06	; 6
     d04:	90 93 44 01 	sts	0x0144, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     d0e:	90 93 46 01 	sts	0x0146, r25
     d12:	80 93 45 01 	sts	0x0145, r24
     d16:	10 92 48 01 	sts	0x0148, r1
     d1a:	10 92 47 01 	sts	0x0147, r1
     d1e:	89 e0       	ldi	r24, 0x09	; 9
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	90 93 4a 01 	sts	0x014A, r25
     d26:	80 93 49 01 	sts	0x0149, r24
     d2a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     d2e:	ce 01       	movw	r24, r28
     d30:	01 96       	adiw	r24, 0x01	; 1
     d32:	98 d0       	rcall	.+304    	; 0xe64 <USB_Host_SendControlRequest>
     d34:	88 23       	and	r24, r24
     d36:	b9 f4       	brne	.+46     	; 0xd66 <USB_Host_GetDeviceConfigDescriptor+0x90>
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     d3a:	9c 81       	ldd	r25, Y+4	; 0x04
     d3c:	f6 01       	movw	r30, r12
     d3e:	91 83       	std	Z+1, r25	; 0x01
     d40:	80 83       	st	Z, r24
     d42:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
     d44:	f9 06       	cpc	r15, r25
     d46:	70 f0       	brcs	.+28     	; 0xd64 <USB_Host_GetDeviceConfigDescriptor+0x8e>
     d48:	90 93 4a 01 	sts	0x014A, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     d4c:	80 93 49 01 	sts	0x0149, r24
     d50:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     d52:	88 d0       	rcall	.+272    	; 0xe64 <USB_Host_SendControlRequest>
     d54:	88 23       	and	r24, r24
     d56:	39 f4       	brne	.+14     	; 0xd66 <USB_Host_GetDeviceConfigDescriptor+0x90>
     d58:	f8 01       	movw	r30, r16
     d5a:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     d5c:	92 30       	cpi	r25, 0x02	; 2
     d5e:	19 f0       	breq	.+6      	; 0xd66 <USB_Host_GetDeviceConfigDescriptor+0x90>
     d60:	86 e0       	ldi	r24, 0x06	; 6
     d62:	01 c0       	rjmp	.+2      	; 0xd66 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     d64:	85 e0       	ldi	r24, 0x05	; 5
     d66:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     d68:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	ff 90       	pop	r15
     d7c:	ef 90       	pop	r14
     d7e:	df 90       	pop	r13
     d80:	cf 90       	pop	r12
     d82:	08 95       	ret

00000d84 <USB_GetNextDescriptorComp>:
     d84:	af 92       	push	r10
     d86:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     d88:	cf 92       	push	r12
     d8a:	df 92       	push	r13
     d8c:	ef 92       	push	r14
     d8e:	ff 92       	push	r15
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	7c 01       	movw	r14, r24
     d9a:	8b 01       	movw	r16, r22
     d9c:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     d9e:	28 c0       	rjmp	.+80     	; 0xdf0 <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     da0:	f8 01       	movw	r30, r16
     da2:	c0 80       	ld	r12, Z
     da4:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     da6:	f6 01       	movw	r30, r12
     da8:	80 81       	ld	r24, Z
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	9e 01       	movw	r18, r28
     dae:	8c 17       	cp	r24, r28
     db0:	9d 07       	cpc	r25, r29
     db2:	08 f4       	brcc	.+2      	; 0xdb6 <USB_GetNextDescriptorComp+0x32>
     db4:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     db6:	c6 01       	movw	r24, r12
     db8:	82 0f       	add	r24, r18
     dba:	93 1f       	adc	r25, r19
     dbc:	f8 01       	movw	r30, r16
     dbe:	91 83       	std	Z+1, r25	; 0x01
     dc0:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
     dc2:	f7 01       	movw	r30, r14
     dc4:	80 81       	ld	r24, Z
     dc6:	91 81       	ldd	r25, Z+1	; 0x01
     dc8:	82 1b       	sub	r24, r18
     dca:	93 0b       	sbc	r25, r19
     dcc:	91 83       	std	Z+1, r25	; 0x01
     dce:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     dd0:	f8 01       	movw	r30, r16
     dd2:	80 81       	ld	r24, Z
     dd4:	91 81       	ldd	r25, Z+1	; 0x01
     dd6:	f5 01       	movw	r30, r10
     dd8:	09 95       	icall
     dda:	82 30       	cpi	r24, 0x02	; 2
     ddc:	49 f0       	breq	.+18     	; 0xdf0 <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	69 f4       	brne	.+26     	; 0xdfc <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
     de2:	f8 01       	movw	r30, r16
     de4:	d1 82       	std	Z+1, r13	; 0x01
     de6:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
     de8:	f7 01       	movw	r30, r14
     dea:	d1 83       	std	Z+1, r29	; 0x01
     dec:	c0 83       	st	Z, r28
     dee:	06 c0       	rjmp	.+12     	; 0xdfc <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     df0:	f7 01       	movw	r30, r14
     df2:	c0 81       	ld	r28, Z
     df4:	d1 81       	ldd	r29, Z+1	; 0x01
     df6:	20 97       	sbiw	r28, 0x00	; 0
     df8:	99 f6       	brne	.-90     	; 0xda0 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     dfa:	82 e0       	ldi	r24, 0x02	; 2
}
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	ff 90       	pop	r15
     e06:	ef 90       	pop	r14
     e08:	df 90       	pop	r13
     e0a:	cf 90       	pop	r12
     e0c:	bf 90       	pop	r11
     e0e:	af 90       	pop	r10
     e10:	08 95       	ret

00000e12 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     e12:	08 95       	ret

00000e14 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e1c:	c9 ee       	ldi	r28, 0xE9	; 233
     e1e:	d3 e0       	ldi	r29, 0x03	; 3
     e20:	06 c0       	rjmp	.+12     	; 0xe2e <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	2a dc       	rcall	.-1964   	; 0x67a <USB_Host_WaitMS>
     e26:	88 23       	and	r24, r24
     e28:	c9 f4       	brne	.+50     	; 0xe5c <USB_Host_WaitForIOS+0x48>
     e2a:	21 97       	sbiw	r28, 0x01	; 1
     e2c:	b1 f0       	breq	.+44     	; 0xe5a <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     e2e:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e30:	29 f4       	brne	.+10     	; 0xe3c <USB_Host_WaitForIOS+0x28>
     e32:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     e36:	83 ff       	sbrs	r24, 3
     e38:	f4 cf       	rjmp	.-24     	; 0xe22 <USB_Host_WaitForIOS+0xe>
     e3a:	0d c0       	rjmp	.+26     	; 0xe56 <USB_Host_WaitForIOS+0x42>
     e3c:	11 30       	cpi	r17, 0x01	; 1
     e3e:	29 f4       	brne	.+10     	; 0xe4a <USB_Host_WaitForIOS+0x36>
     e40:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     e44:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     e46:	ed cf       	rjmp	.-38     	; 0xe22 <USB_Host_WaitForIOS+0xe>
     e48:	06 c0       	rjmp	.+12     	; 0xe56 <USB_Host_WaitForIOS+0x42>
     e4a:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e4c:	51 f7       	brne	.-44     	; 0xe22 <USB_Host_WaitForIOS+0xe>
     e4e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e52:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     e54:	e6 cf       	rjmp	.-52     	; 0xe22 <USB_Host_WaitForIOS+0xe>
     e56:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <USB_Host_WaitForIOS+0x48>
     e5a:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     e5c:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	08 95       	ret

00000e64 <USB_Host_SendControlRequest>:
     e64:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     e66:	ff 92       	push	r15
     e68:	0f 93       	push	r16
     e6a:	1f 93       	push	r17
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     e72:	e0 90 9e 00 	lds	r14, 0x009E
     e76:	ff 24       	eor	r15, r15
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	e8 22       	and	r14, r24
     e7c:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     e7e:	00 91 49 01 	lds	r16, 0x0149
     e82:	10 91 4a 01 	lds	r17, 0x014A
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e86:	80 91 9e 00 	lds	r24, 0x009E
     e8a:	81 60       	ori	r24, 0x01	; 1
     e8c:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	f3 db       	rcall	.-2074   	; 0x67a <USB_Host_WaitMS>
     e94:	88 23       	and	r24, r24
     e96:	09 f0       	breq	.+2      	; 0xe9a <USB_Host_SendControlRequest+0x36>
     e98:	ca c0       	rjmp	.+404    	; 0x102e <USB_Host_SendControlRequest+0x1ca>
     e9a:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e9e:	8f 7c       	andi	r24, 0xCF	; 207
     ea0:	80 93 aa 00 	sts	0x00AA, r24
     ea4:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     ea8:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
     eac:	8f 7e       	andi	r24, 0xEF	; 239
     eae:	80 93 a6 00 	sts	0x00A6, r24
     eb2:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     eb6:	8f 7b       	andi	r24, 0xBF	; 191
     eb8:	80 93 a9 00 	sts	0x00A9, r24
     ebc:	88 e0       	ldi	r24, 0x08	; 8
     ebe:	e3 e4       	ldi	r30, 0x43	; 67
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
     ec0:	f1 e0       	ldi	r31, 0x01	; 1
     ec2:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     ec4:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     ec8:	81 50       	subi	r24, 0x01	; 1
     eca:	d9 f7       	brne	.-10     	; 0xec2 <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     ecc:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     ed0:	87 77       	andi	r24, 0x77	; 119
     ed2:	80 93 a6 00 	sts	0x00A6, r24
     ed6:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     ed8:	9d df       	rcall	.-198    	; 0xe14 <USB_Host_WaitForIOS>
     eda:	88 23       	and	r24, r24
     edc:	09 f0       	breq	.+2      	; 0xee0 <USB_Host_SendControlRequest+0x7c>
     ede:	a7 c0       	rjmp	.+334    	; 0x102e <USB_Host_SendControlRequest+0x1ca>
     ee0:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ee4:	80 64       	ori	r24, 0x40	; 64
     ee6:	80 93 a9 00 	sts	0x00A9, r24
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	c6 db       	rcall	.-2164   	; 0x67a <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     eee:	88 23       	and	r24, r24
     ef0:	09 f0       	breq	.+2      	; 0xef4 <USB_Host_SendControlRequest+0x90>
     ef2:	9d c0       	rjmp	.+314    	; 0x102e <USB_Host_SendControlRequest+0x1ca>
     ef4:	80 91 43 01 	lds	r24, 0x0143
     ef8:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     efa:	4f c0       	rjmp	.+158    	; 0xf9a <USB_Host_SendControlRequest+0x136>
     efc:	80 91 aa 00 	lds	r24, 0x00AA
     f00:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f02:	80 61       	ori	r24, 0x10	; 16
     f04:	80 93 aa 00 	sts	0x00AA, r24
     f08:	20 97       	sbiw	r28, 0x00	; 0
     f0a:	61 f5       	brne	.+88     	; 0xf64 <USB_Host_SendControlRequest+0x100>
     f0c:	2e c0       	rjmp	.+92     	; 0xf6a <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     f0e:	80 91 a9 00 	lds	r24, 0x00A9
     f12:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f14:	80 93 a9 00 	sts	0x00A9, r24
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	7c df       	rcall	.-264    	; 0xe14 <USB_Host_WaitForIOS>
     f1c:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     f1e:	09 f0       	breq	.+2      	; 0xf22 <USB_Host_SendControlRequest+0xbe>
     f20:	86 c0       	rjmp	.+268    	; 0x102e <USB_Host_SendControlRequest+0x1ca>
     f22:	80 91 f6 00 	lds	r24, 0x00F6
     f26:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f2a:	00 97       	sbiw	r24, 0x00	; 0
     f2c:	41 f4       	brne	.+16     	; 0xf3e <USB_Host_SendControlRequest+0xda>
     f2e:	00 e0       	ldi	r16, 0x00	; 0
     f30:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
     f32:	05 c0       	rjmp	.+10     	; 0xf3e <USB_Host_SendControlRequest+0xda>
     f34:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
     f38:	89 93       	st	Y+, r24
     f3a:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     f3c:	10 40       	sbci	r17, 0x00	; 0
     f3e:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
     f42:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	19 f0       	breq	.+6      	; 0xf50 <USB_Host_SendControlRequest+0xec>
     f4a:	01 15       	cp	r16, r1
     f4c:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     f4e:	91 f7       	brne	.-28     	; 0xf34 <USB_Host_SendControlRequest+0xd0>
     f50:	80 91 a9 00 	lds	r24, 0x00A9
     f54:	80 64       	ori	r24, 0x40	; 64
     f56:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f5a:	80 91 a6 00 	lds	r24, 0x00A6
     f5e:	8e 77       	andi	r24, 0x7E	; 126
     f60:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     f64:	01 15       	cp	r16, r1
     f66:	11 05       	cpc	r17, r1
     f68:	91 f6       	brne	.-92     	; 0xf0e <USB_Host_SendControlRequest+0xaa>
     f6a:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     f6e:	8f 7c       	andi	r24, 0xCF	; 207
     f70:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f72:	80 93 aa 00 	sts	0x00AA, r24
     f76:	80 91 a9 00 	lds	r24, 0x00A9
     f7a:	8f 7b       	andi	r24, 0xBF	; 191
     f7c:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f80:	82 e0       	ldi	r24, 0x02	; 2
     f82:	48 df       	rcall	.-368    	; 0xe14 <USB_Host_WaitForIOS>
     f84:	88 23       	and	r24, r24
     f86:	09 f0       	breq	.+2      	; 0xf8a <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f88:	52 c0       	rjmp	.+164    	; 0x102e <USB_Host_SendControlRequest+0x1ca>
     f8a:	80 91 a6 00 	lds	r24, 0x00A6
     f8e:	8b 77       	andi	r24, 0x7B	; 123
     f90:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     f94:	82 e0       	ldi	r24, 0x02	; 2
     f96:	3e df       	rcall	.-388    	; 0xe14 <USB_Host_WaitForIOS>
     f98:	4a c0       	rjmp	.+148    	; 0x102e <USB_Host_SendControlRequest+0x1ca>
     f9a:	20 97       	sbiw	r28, 0x00	; 0
     f9c:	a1 f1       	breq	.+104    	; 0x1006 <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f9e:	80 91 aa 00 	lds	r24, 0x00AA
     fa2:	8f 7c       	andi	r24, 0xCF	; 207
     fa4:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
     fa6:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     faa:	80 91 a9 00 	lds	r24, 0x00A9
     fae:	8f 7b       	andi	r24, 0xBF	; 191
     fb0:	80 93 a9 00 	sts	0x00A9, r24
     fb4:	1c c0       	rjmp	.+56     	; 0xfee <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fb6:	2e df       	rcall	.-420    	; 0xe14 <USB_Host_WaitForIOS>
     fb8:	88 23       	and	r24, r24
     fba:	c9 f5       	brne	.+114    	; 0x102e <USB_Host_SendControlRequest+0x1ca>
     fbc:	fe 01       	movw	r30, r28
     fbe:	07 c0       	rjmp	.+14     	; 0xfce <USB_Host_SendControlRequest+0x16a>
     fc0:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fc2:	ef 01       	movw	r28, r30
     fc4:	80 93 af 00 	sts	0x00AF, r24
     fc8:	01 50       	subi	r16, 0x01	; 1
     fca:	10 40       	sbci	r17, 0x00	; 0
     fcc:	59 f0       	breq	.+22     	; 0xfe4 <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
     fce:	ef 01       	movw	r28, r30
     fd0:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     fd4:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
     fd8:	80 91 23 01 	lds	r24, 0x0123
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
     fdc:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     fde:	28 17       	cp	r18, r24
     fe0:	39 07       	cpc	r19, r25
     fe2:	70 f3       	brcs	.-36     	; 0xfc0 <USB_Host_SendControlRequest+0x15c>
     fe4:	80 91 a6 00 	lds	r24, 0x00A6
     fe8:	8b 77       	andi	r24, 0x7B	; 123
     fea:	80 93 a6 00 	sts	0x00A6, r24
     fee:	82 e0       	ldi	r24, 0x02	; 2
     ff0:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     ff2:	11 05       	cpc	r17, r1
     ff4:	01 f7       	brne	.-64     	; 0xfb6 <USB_Host_SendControlRequest+0x152>
     ff6:	0e df       	rcall	.-484    	; 0xe14 <USB_Host_WaitForIOS>
     ff8:	88 23       	and	r24, r24
     ffa:	c9 f4       	brne	.+50     	; 0x102e <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     ffc:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1000:	80 64       	ori	r24, 0x40	; 64
    1002:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1006:	80 91 aa 00 	lds	r24, 0x00AA
    100a:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    100c:	80 61       	ori	r24, 0x10	; 16
    100e:	80 93 aa 00 	sts	0x00AA, r24
    1012:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1016:	8f 7b       	andi	r24, 0xBF	; 191
    1018:	80 93 a9 00 	sts	0x00A9, r24
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	fa de       	rcall	.-524    	; 0xe14 <USB_Host_WaitForIOS>
    1020:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1022:	29 f4       	brne	.+10     	; 0x102e <USB_Host_SendControlRequest+0x1ca>
    1024:	90 91 a6 00 	lds	r25, 0x00A6
    1028:	9e 77       	andi	r25, 0x7E	; 126
    102a:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    102e:	90 91 a9 00 	lds	r25, 0x00A9
    1032:	90 64       	ori	r25, 0x40	; 64
    1034:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1038:	e1 14       	cp	r14, r1
    103a:	f1 04       	cpc	r15, r1
    103c:	29 f4       	brne	.+10     	; 0x1048 <USB_Host_SendControlRequest+0x1e4>
    103e:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1042:	9e 7f       	andi	r25, 0xFE	; 254
    1044:	90 93 9e 00 	sts	0x009E, r25
    1048:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    104a:	90 93 a8 00 	sts	0x00A8, r25
    104e:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    105a:	ff 90       	pop	r15
    105c:	ef 90       	pop	r14
    105e:	08 95       	ret

00001060 <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    1060:	cf 93       	push	r28
    1062:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1064:	10 92 43 01 	sts	0x0143, r1
    1068:	89 e0       	ldi	r24, 0x09	; 9
    106a:	80 93 44 01 	sts	0x0144, r24
    106e:	c0 93 45 01 	sts	0x0145, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1072:	10 92 46 01 	sts	0x0146, r1
    1076:	10 92 48 01 	sts	0x0148, r1
    107a:	10 92 47 01 	sts	0x0147, r1
    107e:	10 92 4a 01 	sts	0x014A, r1
    1082:	10 92 49 01 	sts	0x0149, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1086:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	ea de       	rcall	.-556    	; 0xe64 <USB_Host_SendControlRequest>
    1090:	88 23       	and	r24, r24
    1092:	49 f4       	brne	.+18     	; 0x10a6 <USB_Host_SetDeviceConfiguration+0x46>
    1094:	c0 93 41 01 	sts	0x0141, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1098:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    109a:	11 f0       	breq	.+4      	; 0x10a0 <USB_Host_SetDeviceConfiguration+0x40>
    109c:	9b e0       	ldi	r25, 0x0B	; 11
    109e:	01 c0       	rjmp	.+2      	; 0x10a2 <USB_Host_SetDeviceConfiguration+0x42>
    10a0:	9a e0       	ldi	r25, 0x0A	; 10
    10a2:	90 93 4b 01 	sts	0x014B, r25
    10a6:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    10a8:	08 95       	ret

000010aa <USB_Host_SetInterfaceAltSetting>:
    10aa:	e3 e4       	ldi	r30, 0x43	; 67
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    10ac:	f1 e0       	ldi	r31, 0x01	; 1
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	90 93 43 01 	sts	0x0143, r25
    10b4:	9b e0       	ldi	r25, 0x0B	; 11
    10b6:	90 93 44 01 	sts	0x0144, r25
    10ba:	60 93 45 01 	sts	0x0145, r22
    10be:	13 82       	std	Z+3, r1	; 0x03
    10c0:	80 93 47 01 	sts	0x0147, r24
    10c4:	15 82       	std	Z+5, r1	; 0x05
    10c6:	10 92 4a 01 	sts	0x014A, r1
    10ca:	10 92 49 01 	sts	0x0149, r1
    10ce:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	c6 ce       	rjmp	.-628    	; 0xe64 <USB_Host_SendControlRequest>

000010d8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    10d8:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    10da:	c0 91 a7 00 	lds	r28, 0x00A7
    10de:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    10e0:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    10e4:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    10e8:	1d db       	rcall	.-2502   	; 0x724 <USB_Host_ProcessNextHostState>
    10ea:	c0 93 a7 00 	sts	0x00A7, r28
    10ee:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    10f0:	08 95       	ret

000010f2 <DCOMP_Audio_Host_NextAudioControlInterface>:

	return AUDIO_ENUMERROR_NoError;
}

static uint8_t DCOMP_Audio_Host_NextAudioControlInterface(void* CurrentDescriptor)
{
    10f2:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    10f4:	81 81       	ldd	r24, Z+1	; 0x01
    10f6:	84 30       	cpi	r24, 0x04	; 4
    10f8:	49 f4       	brne	.+18     	; 0x110c <DCOMP_Audio_Host_NextAudioControlInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
    10fa:	85 81       	ldd	r24, Z+5	; 0x05
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	31 f4       	brne	.+12     	; 0x110c <DCOMP_Audio_Host_NextAudioControlInterface+0x1a>
    1100:	86 81       	ldd	r24, Z+6	; 0x06
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	19 f4       	brne	.+6      	; 0x110c <DCOMP_Audio_Host_NextAudioControlInterface+0x1a>
		    (Interface->SubClass == AUDIO_CSCP_ControlSubclass) &&
    1106:	87 81       	ldd	r24, Z+7	; 0x07
    1108:	88 23       	and	r24, r24
    110a:	11 f0       	breq	.+4      	; 0x1110 <DCOMP_Audio_Host_NextAudioControlInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    110c:	82 e0       	ldi	r24, 0x02	; 2
    110e:	08 95       	ret

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
		    (Interface->SubClass == AUDIO_CSCP_ControlSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_ControlProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    1110:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1112:	08 95       	ret

00001114 <DCOMP_Audio_Host_NextAudioStreamInterface>:

static uint8_t DCOMP_Audio_Host_NextAudioStreamInterface(void* CurrentDescriptor)
{
    1114:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1116:	81 81       	ldd	r24, Z+1	; 0x01
    1118:	84 30       	cpi	r24, 0x04	; 4
    111a:	49 f4       	brne	.+18     	; 0x112e <DCOMP_Audio_Host_NextAudioStreamInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
    111c:	85 81       	ldd	r24, Z+5	; 0x05
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	31 f4       	brne	.+12     	; 0x112e <DCOMP_Audio_Host_NextAudioStreamInterface+0x1a>
    1122:	86 81       	ldd	r24, Z+6	; 0x06
    1124:	82 30       	cpi	r24, 0x02	; 2
    1126:	19 f4       	brne	.+6      	; 0x112e <DCOMP_Audio_Host_NextAudioStreamInterface+0x1a>
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
    1128:	87 81       	ldd	r24, Z+7	; 0x07
    112a:	88 23       	and	r24, r24
    112c:	11 f0       	breq	.+4      	; 0x1132 <DCOMP_Audio_Host_NextAudioStreamInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    112e:	82 e0       	ldi	r24, 0x02	; 2
    1130:	08 95       	ret

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_StreamingProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    1132:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1134:	08 95       	ret

00001136 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint>:

static uint8_t DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint(void* CurrentDescriptor)
{
    1136:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1138:	81 81       	ldd	r24, Z+1	; 0x01
    113a:	85 30       	cpi	r24, 0x05	; 5
    113c:	29 f4       	brne	.+10     	; 0x1148 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
    113e:	83 81       	ldd	r24, Z+3	; 0x03
    1140:	83 70       	andi	r24, 0x03	; 3
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	19 f4       	brne	.+6      	; 0x114c <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x16>
    1146:	04 c0       	rjmp	.+8      	; 0x1150 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x1a>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1148:	84 30       	cpi	r24, 0x04	; 4
    114a:	21 f0       	breq	.+8      	; 0x1154 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x1e>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    114c:	82 e0       	ldi	r24, 0x02	; 2
    114e:	08 95       	ret
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
		  return DESCRIPTOR_SEARCH_Found;
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    1154:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1156:	08 95       	ret

00001158 <Audio_Host_ConfigurePipes>:
#include "AudioClassHost.h"

uint8_t Audio_Host_ConfigurePipes(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo,
                                  uint16_t ConfigDescriptorSize,
                                  void* ConfigDescriptorData)
{
    1158:	8f 92       	push	r8
    115a:	9f 92       	push	r9
    115c:	af 92       	push	r10
    115e:	bf 92       	push	r11
    1160:	cf 92       	push	r12
    1162:	df 92       	push	r13
    1164:	ef 92       	push	r14
    1166:	ff 92       	push	r15
    1168:	0f 93       	push	r16
    116a:	1f 93       	push	r17
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	00 d0       	rcall	.+0      	; 0x1172 <Audio_Host_ConfigurePipes+0x1a>
    1172:	00 d0       	rcall	.+0      	; 0x1174 <Audio_Host_ConfigurePipes+0x1c>
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	8c 01       	movw	r16, r24
    117a:	7a 83       	std	Y+2, r23	; 0x02
    117c:	69 83       	std	Y+1, r22	; 0x01
    117e:	fa 01       	movw	r30, r20
    1180:	5c 83       	std	Y+4, r21	; 0x04
    1182:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint          = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint         = NULL;
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;

	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));
    1184:	dc 01       	movw	r26, r24
    1186:	1c 96       	adiw	r26, 0x0c	; 12
    1188:	1d 92       	st	X+, r1
    118a:	1d 92       	st	X+, r1
    118c:	1d 92       	st	X+, r1
    118e:	1c 92       	st	X, r1
    1190:	1f 97       	sbiw	r26, 0x0f	; 15

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1192:	81 81       	ldd	r24, Z+1	; 0x01
    1194:	82 30       	cpi	r24, 0x02	; 2
    1196:	09 f0       	breq	.+2      	; 0x119a <Audio_Host_ConfigurePipes+0x42>
    1198:	8d c0       	rjmp	.+282    	; 0x12b4 <Audio_Host_ConfigurePipes+0x15c>
    119a:	88 24       	eor	r8, r8
    119c:	99 24       	eor	r9, r9
    119e:	aa 24       	eor	r10, r10
    11a0:	bb 24       	eor	r11, r11
    11a2:	29 c0       	rjmp	.+82     	; 0x11f6 <Audio_Host_ConfigurePipes+0x9e>
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
	       (AudioInterfaceInfo->Config.DataOUTPipe.Address && !(DataOUTEndpoint)))
	{
		if (!(AudioControlInterface) ||
    11a4:	a1 14       	cp	r10, r1
    11a6:	b1 04       	cpc	r11, r1
    11a8:	61 f0       	breq	.+24     	; 0x11c2 <Audio_Host_ConfigurePipes+0x6a>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    11aa:	ce 01       	movw	r24, r28
    11ac:	01 96       	adiw	r24, 0x01	; 1
    11ae:	be 01       	movw	r22, r28
    11b0:	6d 5f       	subi	r22, 0xFD	; 253
    11b2:	7f 4f       	sbci	r23, 0xFF	; 255
    11b4:	4b e9       	ldi	r20, 0x9B	; 155
    11b6:	58 e0       	ldi	r21, 0x08	; 8
    11b8:	e5 dd       	rcall	.-1078   	; 0xd84 <USB_GetNextDescriptorComp>
    11ba:	88 23       	and	r24, r24
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
	       (AudioInterfaceInfo->Config.DataOUTPipe.Address && !(DataOUTEndpoint)))
	{
		if (!(AudioControlInterface) ||
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <Audio_Host_ConfigurePipes+0x68>
    11be:	90 c0       	rjmp	.+288    	; 0x12e0 <Audio_Host_ConfigurePipes+0x188>
    11c0:	1f c0       	rjmp	.+62     	; 0x1200 <Audio_Host_ConfigurePipes+0xa8>
    11c2:	ce 01       	movw	r24, r28
		{
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_Audio_Host_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    11c4:	01 96       	adiw	r24, 0x01	; 1
    11c6:	be 01       	movw	r22, r28
    11c8:	6d 5f       	subi	r22, 0xFD	; 253
    11ca:	7f 4f       	sbci	r23, 0xFF	; 255
    11cc:	49 e7       	ldi	r20, 0x79	; 121
    11ce:	58 e0       	ldi	r21, 0x08	; 8
    11d0:	d9 dd       	rcall	.-1102   	; 0xd84 <USB_GetNextDescriptorComp>
    11d2:	88 23       	and	r24, r24
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <Audio_Host_ConfigurePipes+0x80>
    11d6:	70 c0       	rjmp	.+224    	; 0x12b8 <Audio_Host_ConfigurePipes+0x160>
    11d8:	ab 80       	ldd	r10, Y+3	; 0x03
    11da:	bc 80       	ldd	r11, Y+4	; 0x04
				                              DCOMP_Audio_Host_NextAudioControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
				}

				AudioControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    11dc:	ce 01       	movw	r24, r28
    11de:	01 96       	adiw	r24, 0x01	; 1

				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    11e0:	be 01       	movw	r22, r28
    11e2:	6d 5f       	subi	r22, 0xFD	; 253
    11e4:	7f 4f       	sbci	r23, 0xFF	; 255
    11e6:	4a e8       	ldi	r20, 0x8A	; 138
    11e8:	58 e0       	ldi	r21, 0x08	; 8
    11ea:	cc dd       	rcall	.-1128   	; 0xd84 <USB_GetNextDescriptorComp>
    11ec:	88 23       	and	r24, r24
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <Audio_Host_ConfigurePipes+0x9a>
    11f0:	63 c0       	rjmp	.+198    	; 0x12b8 <Audio_Host_ConfigurePipes+0x160>
    11f2:	8b 80       	ldd	r8, Y+3	; 0x03
    11f4:	9c 80       	ldd	r9, Y+4	; 0x04
    11f6:	cc 24       	eor	r12, r12
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
				}
			}

			AudioStreamingInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    11f8:	dd 24       	eor	r13, r13
    11fa:	ee 24       	eor	r14, r14

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    11fc:	ff 24       	eor	r15, r15
    11fe:	08 c0       	rjmp	.+16     	; 0x1210 <Audio_Host_ConfigurePipes+0xb8>
				}
			}

			AudioStreamingInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

			DataINEndpoint  = NULL;
    1200:	eb 81       	ldd	r30, Y+3	; 0x03
    1202:	fc 81       	ldd	r31, Y+4	; 0x04
			DataOUTEndpoint = NULL;

			continue;
    1204:	82 81       	ldd	r24, Z+2	; 0x02
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1206:	87 ff       	sbrs	r24, 7
    1208:	02 c0       	rjmp	.+4      	; 0x120e <Audio_Host_ConfigurePipes+0xb6>

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    120a:	7f 01       	movw	r14, r30
    120c:	01 c0       	rjmp	.+2      	; 0x1210 <Audio_Host_ConfigurePipes+0xb8>
    120e:	6f 01       	movw	r12, r30
		  DataINEndpoint  = EndpointData;
    1210:	f8 01       	movw	r30, r16
    1212:	80 81       	ld	r24, Z
		else
		  DataOUTEndpoint = EndpointData;
    1214:	88 23       	and	r24, r24
	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipe.Address  && !(DataINEndpoint)) ||
    1216:	21 f0       	breq	.+8      	; 0x1220 <Audio_Host_ConfigurePipes+0xc8>
    1218:	e1 14       	cp	r14, r1
    121a:	f1 04       	cpc	r15, r1
    121c:	09 f4       	brne	.+2      	; 0x1220 <Audio_Host_ConfigurePipes+0xc8>
    121e:	c2 cf       	rjmp	.-124    	; 0x11a4 <Audio_Host_ConfigurePipes+0x4c>
    1220:	d8 01       	movw	r26, r16
    1222:	16 96       	adiw	r26, 0x06	; 6
    1224:	8c 91       	ld	r24, X
    1226:	16 97       	sbiw	r26, 0x06	; 6
    1228:	88 23       	and	r24, r24
    122a:	21 f0       	breq	.+8      	; 0x1234 <Audio_Host_ConfigurePipes+0xdc>
    122c:	c1 14       	cp	r12, r1
    122e:	d1 04       	cpc	r13, r1
    1230:	09 f4       	brne	.+2      	; 0x1234 <Audio_Host_ConfigurePipes+0xdc>
	       (AudioInterfaceInfo->Config.DataOUTPipe.Address && !(DataOUTEndpoint)))
    1232:	b8 cf       	rjmp	.-144    	; 0x11a4 <Audio_Host_ConfigurePipes+0x4c>
    1234:	f7 01       	movw	r30, r14
    1236:	84 81       	ldd	r24, Z+4	; 0x04
    1238:	95 81       	ldd	r25, Z+5	; 0x05
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	AudioInterfaceInfo->Config.DataINPipe.Size   = le16_to_cpu(DataINEndpoint->EndpointSize);
    123a:	d8 01       	movw	r26, r16
    123c:	12 96       	adiw	r26, 0x02	; 2
    123e:	9c 93       	st	X, r25
    1240:	8e 93       	st	-X, r24
    1242:	11 97       	sbiw	r26, 0x01	; 1
    1244:	82 81       	ldd	r24, Z+2	; 0x02
    1246:	13 96       	adiw	r26, 0x03	; 3
    1248:	8c 93       	st	X, r24
	AudioInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    124a:	13 97       	sbiw	r26, 0x03	; 3
    124c:	ee 24       	eor	r14, r14
    124e:	e3 94       	inc	r14
    1250:	14 96       	adiw	r26, 0x04	; 4
	AudioInterfaceInfo->Config.DataINPipe.Type   = EP_TYPE_ISOCHRONOUS;
    1252:	ec 92       	st	X, r14
    1254:	14 97       	sbiw	r26, 0x04	; 4
    1256:	22 e0       	ldi	r18, 0x02	; 2
    1258:	15 96       	adiw	r26, 0x05	; 5
    125a:	2c 93       	st	X, r18
	AudioInterfaceInfo->Config.DataINPipe.Banks  = 2;
    125c:	15 97       	sbiw	r26, 0x05	; 5
    125e:	f6 01       	movw	r30, r12
    1260:	84 81       	ldd	r24, Z+4	; 0x04
    1262:	95 81       	ldd	r25, Z+5	; 0x05
	
	AudioInterfaceInfo->Config.DataOUTPipe.Size  = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1264:	18 96       	adiw	r26, 0x08	; 8
    1266:	9c 93       	st	X, r25
    1268:	8e 93       	st	-X, r24
    126a:	17 97       	sbiw	r26, 0x07	; 7
    126c:	82 81       	ldd	r24, Z+2	; 0x02
    126e:	19 96       	adiw	r26, 0x09	; 9
    1270:	8c 93       	st	X, r24
	AudioInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1272:	19 97       	sbiw	r26, 0x09	; 9
    1274:	1a 96       	adiw	r26, 0x0a	; 10
    1276:	ec 92       	st	X, r14
    1278:	1a 97       	sbiw	r26, 0x0a	; 10
	AudioInterfaceInfo->Config.DataOUTPipe.Type  = EP_TYPE_ISOCHRONOUS;
    127a:	1b 96       	adiw	r26, 0x0b	; 11
    127c:	2c 93       	st	X, r18
    127e:	c8 01       	movw	r24, r16
	AudioInterfaceInfo->Config.DataOUTPipe.Banks = 2;
    1280:	61 e0       	ldi	r22, 0x01	; 1
    1282:	de db       	rcall	.-2116   	; 0xa40 <Pipe_ConfigurePipeTable>
	
	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataINPipe, 1)))
    1284:	88 23       	and	r24, r24
    1286:	d1 f0       	breq	.+52     	; 0x12bc <Audio_Host_ConfigurePipes+0x164>
    1288:	c8 01       	movw	r24, r16
    128a:	06 96       	adiw	r24, 0x06	; 6
    128c:	61 e0       	ldi	r22, 0x01	; 1
    128e:	d8 db       	rcall	.-2128   	; 0xa40 <Pipe_ConfigurePipeTable>
	  return false;
	
	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataOUTPipe, 1)))
    1290:	88 23       	and	r24, r24
    1292:	a1 f0       	breq	.+40     	; 0x12bc <Audio_Host_ConfigurePipes+0x164>
    1294:	d5 01       	movw	r26, r10
    1296:	12 96       	adiw	r26, 0x02	; 2
    1298:	8c 91       	ld	r24, X
    129a:	f8 01       	movw	r30, r16
    129c:	85 87       	std	Z+13, r24	; 0x0d
	  return false;

	AudioInterfaceInfo->State.ControlInterfaceNumber    = AudioControlInterface->InterfaceNumber;
    129e:	d4 01       	movw	r26, r8
    12a0:	12 96       	adiw	r26, 0x02	; 2
    12a2:	8c 91       	ld	r24, X
    12a4:	12 97       	sbiw	r26, 0x02	; 2
    12a6:	86 87       	std	Z+14, r24	; 0x0e
	AudioInterfaceInfo->State.StreamingInterfaceNumber  = AudioStreamingInterface->InterfaceNumber;
    12a8:	13 96       	adiw	r26, 0x03	; 3
    12aa:	8c 91       	ld	r24, X
    12ac:	13 97       	sbiw	r26, 0x03	; 3
    12ae:	87 87       	std	Z+15, r24	; 0x0f
    12b0:	e4 86       	std	Z+12, r14	; 0x0c
	AudioInterfaceInfo->State.EnabledStreamingAltIndex  = AudioStreamingInterface->AlternateSetting;
    12b2:	04 c0       	rjmp	.+8      	; 0x12bc <Audio_Host_ConfigurePipes+0x164>
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	03 c0       	rjmp	.+6      	; 0x12be <Audio_Host_ConfigurePipes+0x166>
    12b8:	82 e0       	ldi	r24, 0x02	; 2
	AudioInterfaceInfo->State.IsActive = true;
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <Audio_Host_ConfigurePipes+0x166>
    12bc:	80 e0       	ldi	r24, 0x00	; 0
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;

	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
				AudioControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
				                              DCOMP_Audio_Host_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
	
	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataINPipe, 1)))
	  return false;
	
	if (!(Pipe_ConfigurePipeTable(&AudioInterfaceInfo->Config.DataOUTPipe, 1)))
	  return false;
    12c6:	df 91       	pop	r29
	AudioInterfaceInfo->State.StreamingInterfaceNumber  = AudioStreamingInterface->InterfaceNumber;
	AudioInterfaceInfo->State.EnabledStreamingAltIndex  = AudioStreamingInterface->AlternateSetting;
	AudioInterfaceInfo->State.IsActive = true;

	return AUDIO_ENUMERROR_NoError;
}
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	ff 90       	pop	r15
    12d0:	ef 90       	pop	r14
    12d2:	df 90       	pop	r13
    12d4:	cf 90       	pop	r12
    12d6:	bf 90       	pop	r11
    12d8:	af 90       	pop	r10
    12da:	9f 90       	pop	r9
    12dc:	8f 90       	pop	r8
    12de:	08 95       	ret
    12e0:	ce 01       	movw	r24, r28
    12e2:	01 96       	adiw	r24, 0x01	; 1
    12e4:	be 01       	movw	r22, r28
    12e6:	6d 5f       	subi	r22, 0xFD	; 253
    12e8:	7f 4f       	sbci	r23, 0xFF	; 255
		if (!(AudioControlInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    12ea:	4a e8       	ldi	r20, 0x8A	; 138
    12ec:	58 e0       	ldi	r21, 0x08	; 8
    12ee:	4a dd       	rcall	.-1388   	; 0xd84 <USB_GetNextDescriptorComp>
    12f0:	88 23       	and	r24, r24
    12f2:	09 f0       	breq	.+2      	; 0x12f6 <Audio_Host_ConfigurePipes+0x19e>
    12f4:	66 cf       	rjmp	.-308    	; 0x11c2 <Audio_Host_ConfigurePipes+0x6a>
    12f6:	7d cf       	rjmp	.-262    	; 0x11f2 <Audio_Host_ConfigurePipes+0x9a>

000012f8 <Audio_Host_StartStopStreaming>:
    12f8:	fc 01       	movw	r30, r24
    12fa:	84 85       	ldd	r24, Z+12	; 0x0c
	{
		if (!(AudioControlInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (!(AudioControlInterface) ||
    12fc:	88 23       	and	r24, r24
    12fe:	39 f0       	breq	.+14     	; 0x130e <Audio_Host_StartStopStreaming+0x16>
    1300:	86 85       	ldd	r24, Z+14	; 0x0e
    1302:	66 23       	and	r22, r22
			                          const bool EnableStreaming)
{
	if (!(AudioInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;

	return USB_Host_SetInterfaceAltSetting(AudioInterfaceInfo->State.StreamingInterfaceNumber,
    1304:	11 f0       	breq	.+4      	; 0x130a <Audio_Host_StartStopStreaming+0x12>
    1306:	67 85       	ldd	r22, Z+15	; 0x0f
    1308:	01 c0       	rjmp	.+2      	; 0x130c <Audio_Host_StartStopStreaming+0x14>
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	ce ce       	rjmp	.-612    	; 0x10aa <USB_Host_SetInterfaceAltSetting>
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	08 95       	ret

00001312 <Audio_Host_GetSetEndpointProperty>:

uint8_t Audio_Host_StartStopStreaming(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo,
			                          const bool EnableStreaming)
{
	if (!(AudioInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1312:	ef 92       	push	r14

	return USB_Host_SetInterfaceAltSetting(AudioInterfaceInfo->State.StreamingInterfaceNumber,
	                                       EnableStreaming ? AudioInterfaceInfo->State.EnabledStreamingAltIndex : 0);
}
    1314:	ff 92       	push	r15
			                              const uint8_t DataPipeIndex,
			                              const uint8_t EndpointProperty,
			                              const uint8_t EndpointControl,
			                              const uint16_t DataLength,
			                              void* const Data)
{
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
	if (!(AudioInterfaceInfo->State.IsActive))
    131a:	fc 01       	movw	r30, r24
    131c:	84 85       	ldd	r24, Z+12	; 0x0c
    131e:	88 23       	and	r24, r24
    1320:	39 f1       	breq	.+78     	; 0x1370 <Audio_Host_GetSetEndpointProperty+0x5e>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t RequestType;
	uint8_t EndpointAddress;

	if (EndpointProperty & 0x80)
    1322:	47 ff       	sbrs	r20, 7
    1324:	02 c0       	rjmp	.+4      	; 0x132a <Audio_Host_GetSetEndpointProperty+0x18>
	  RequestType = (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT);
    1326:	92 ea       	ldi	r25, 0xA2	; 162
    1328:	01 c0       	rjmp	.+2      	; 0x132c <Audio_Host_GetSetEndpointProperty+0x1a>
	else
	  RequestType = (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT);
    132a:	92 e2       	ldi	r25, 0x22	; 34
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    132c:	6f 70       	andi	r22, 0x0F	; 15
    132e:	60 93 a7 00 	sts	0x00A7, r22
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    1332:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
    1336:	53 2f       	mov	r21, r19
    1338:	5f 70       	andi	r21, 0x0F	; 15
    133a:	30 ff       	sbrs	r19, 0
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <Audio_Host_GetSetEndpointProperty+0x30>
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	01 c0       	rjmp	.+2      	; 0x1344 <Audio_Host_GetSetEndpointProperty+0x32>
    1342:	80 e8       	ldi	r24, 0x80	; 128

	Pipe_SelectPipe(DataPipeIndex);
	EndpointAddress = Pipe_GetBoundEndpointAddress();

	USB_ControlRequest = (USB_Request_Header_t)
    1344:	90 93 43 01 	sts	0x0143, r25
    1348:	40 93 44 01 	sts	0x0144, r20
    134c:	e5 e4       	ldi	r30, 0x45	; 69
    134e:	f1 e0       	ldi	r31, 0x01	; 1
    1350:	10 92 45 01 	sts	0x0145, r1
    1354:	21 83       	std	Z+1, r18	; 0x01
    1356:	85 2b       	or	r24, r21
    1358:	80 93 47 01 	sts	0x0147, r24
    135c:	13 82       	std	Z+3, r1	; 0x03
    135e:	10 93 4a 01 	sts	0x014A, r17
    1362:	00 93 49 01 	sts	0x0149, r16
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1366:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = DataLength,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Data);
    136a:	c7 01       	movw	r24, r14
    136c:	7b dd       	rcall	.-1290   	; 0xe64 <USB_Host_SendControlRequest>
    136e:	01 c0       	rjmp	.+2      	; 0x1372 <Audio_Host_GetSetEndpointProperty+0x60>
    1370:	81 e0       	ldi	r24, 0x01	; 1
			                              const uint8_t EndpointControl,
			                              const uint16_t DataLength,
			                              void* const Data)
{
	if (!(AudioInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1372:	1f 91       	pop	r17
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Data);
}
    1374:	0f 91       	pop	r16
    1376:	ff 90       	pop	r15
    1378:	ef 90       	pop	r14
    137a:	08 95       	ret

0000137c <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    137c:	90 91 c8 00 	lds	r25, 0x00C8
    1380:	95 ff       	sbrs	r25, 5
    1382:	fc cf       	rjmp	.-8      	; 0x137c <Serial_putchar>
				UDR1 = DataByte;
    1384:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	08 95       	ret

0000138e <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    138e:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1392:	87 ff       	sbrs	r24, 7
    1394:	08 c0       	rjmp	.+16     	; 0x13a6 <Serial_getchar+0x18>
    1396:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    139a:	87 ff       	sbrs	r24, 7
    139c:	07 c0       	rjmp	.+14     	; 0x13ac <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    139e:	80 91 ce 00 	lds	r24, 0x00CE
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	08 95       	ret
	  return _FDEV_EOF;
    13a6:	8e ef       	ldi	r24, 0xFE	; 254
    13a8:	9f ef       	ldi	r25, 0xFF	; 255
    13aa:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    13ac:	8f ef       	ldi	r24, 0xFF	; 255
    13ae:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    13b0:	08 95       	ret

000013b2 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    13b2:	fc 01       	movw	r30, r24
	if (!(Stream))
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	51 f4       	brne	.+20     	; 0x13cc <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    13b8:	ec e4       	ldi	r30, 0x4C	; 76
    13ba:	f1 e0       	ldi	r31, 0x01	; 1
    13bc:	f0 93 5b 01 	sts	0x015B, r31
    13c0:	e0 93 5a 01 	sts	0x015A, r30
		stdout = Stream;
    13c4:	f0 93 5d 01 	sts	0x015D, r31
    13c8:	e0 93 5c 01 	sts	0x015C, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    13cc:	8e e0       	ldi	r24, 0x0E	; 14
    13ce:	df 01       	movw	r26, r30
    13d0:	1d 92       	st	X+, r1
    13d2:	8a 95       	dec	r24
    13d4:	e9 f7       	brne	.-6      	; 0x13d0 <Serial_CreateStream+0x1e>
    13d6:	83 e0       	ldi	r24, 0x03	; 3
    13d8:	83 83       	std	Z+3, r24	; 0x03
    13da:	8e eb       	ldi	r24, 0xBE	; 190
    13dc:	99 e0       	ldi	r25, 0x09	; 9
    13de:	91 87       	std	Z+9, r25	; 0x09
    13e0:	80 87       	std	Z+8, r24	; 0x08
    13e2:	87 ec       	ldi	r24, 0xC7	; 199
    13e4:	99 e0       	ldi	r25, 0x09	; 9
    13e6:	93 87       	std	Z+11, r25	; 0x0b
    13e8:	82 87       	std	Z+10, r24	; 0x0a
}
    13ea:	08 95       	ret

000013ec <printf_P>:
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	fe 01       	movw	r30, r28
    13f6:	35 96       	adiw	r30, 0x05	; 5
    13f8:	61 91       	ld	r22, Z+
    13fa:	71 91       	ld	r23, Z+
    13fc:	80 91 5c 01 	lds	r24, 0x015C
    1400:	90 91 5d 01 	lds	r25, 0x015D
    1404:	dc 01       	movw	r26, r24
    1406:	13 96       	adiw	r26, 0x03	; 3
    1408:	2c 91       	ld	r18, X
    140a:	13 97       	sbiw	r26, 0x03	; 3
    140c:	28 60       	ori	r18, 0x08	; 8
    140e:	13 96       	adiw	r26, 0x03	; 3
    1410:	2c 93       	st	X, r18
    1412:	af 01       	movw	r20, r30
    1414:	39 d0       	rcall	.+114    	; 0x1488 <vfprintf>
    1416:	e0 91 5c 01 	lds	r30, 0x015C
    141a:	f0 91 5d 01 	lds	r31, 0x015D
    141e:	23 81       	ldd	r18, Z+3	; 0x03
    1420:	27 7f       	andi	r18, 0xF7	; 247
    1422:	23 83       	std	Z+3, r18	; 0x03
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	08 95       	ret

0000142a <puts_P>:
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	8c 01       	movw	r16, r24
    1434:	e0 91 5c 01 	lds	r30, 0x015C
    1438:	f0 91 5d 01 	lds	r31, 0x015D
    143c:	83 81       	ldd	r24, Z+3	; 0x03
    143e:	81 ff       	sbrs	r24, 1
    1440:	1b c0       	rjmp	.+54     	; 0x1478 <puts_P+0x4e>
    1442:	c0 e0       	ldi	r28, 0x00	; 0
    1444:	d0 e0       	ldi	r29, 0x00	; 0
    1446:	07 c0       	rjmp	.+14     	; 0x1456 <puts_P+0x2c>
    1448:	09 95       	icall
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	11 f0       	breq	.+4      	; 0x1452 <puts_P+0x28>
    144e:	cf ef       	ldi	r28, 0xFF	; 255
    1450:	df ef       	ldi	r29, 0xFF	; 255
    1452:	0f 5f       	subi	r16, 0xFF	; 255
    1454:	1f 4f       	sbci	r17, 0xFF	; 255
    1456:	f8 01       	movw	r30, r16
    1458:	84 91       	lpm	r24, Z
    145a:	60 91 5c 01 	lds	r22, 0x015C
    145e:	70 91 5d 01 	lds	r23, 0x015D
    1462:	db 01       	movw	r26, r22
    1464:	18 96       	adiw	r26, 0x08	; 8
    1466:	ed 91       	ld	r30, X+
    1468:	fc 91       	ld	r31, X
    146a:	19 97       	sbiw	r26, 0x09	; 9
    146c:	88 23       	and	r24, r24
    146e:	61 f7       	brne	.-40     	; 0x1448 <puts_P+0x1e>
    1470:	8a e0       	ldi	r24, 0x0A	; 10
    1472:	09 95       	icall
    1474:	00 97       	sbiw	r24, 0x00	; 0
    1476:	11 f0       	breq	.+4      	; 0x147c <puts_P+0x52>
    1478:	cf ef       	ldi	r28, 0xFF	; 255
    147a:	df ef       	ldi	r29, 0xFF	; 255
    147c:	ce 01       	movw	r24, r28
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	1f 91       	pop	r17
    1484:	0f 91       	pop	r16
    1486:	08 95       	ret

00001488 <vfprintf>:
    1488:	2f 92       	push	r2
    148a:	3f 92       	push	r3
    148c:	4f 92       	push	r4
    148e:	5f 92       	push	r5
    1490:	6f 92       	push	r6
    1492:	7f 92       	push	r7
    1494:	8f 92       	push	r8
    1496:	9f 92       	push	r9
    1498:	af 92       	push	r10
    149a:	bf 92       	push	r11
    149c:	cf 92       	push	r12
    149e:	df 92       	push	r13
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	2d 97       	sbiw	r28, 0x0d	; 13
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	f8 94       	cli
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	3c 01       	movw	r6, r24
    14be:	7d 87       	std	Y+13, r23	; 0x0d
    14c0:	6c 87       	std	Y+12, r22	; 0x0c
    14c2:	5a 01       	movw	r10, r20
    14c4:	fc 01       	movw	r30, r24
    14c6:	17 82       	std	Z+7, r1	; 0x07
    14c8:	16 82       	std	Z+6, r1	; 0x06
    14ca:	83 81       	ldd	r24, Z+3	; 0x03
    14cc:	81 ff       	sbrs	r24, 1
    14ce:	bb c1       	rjmp	.+886    	; 0x1846 <vfprintf+0x3be>
    14d0:	2e 01       	movw	r4, r28
    14d2:	08 94       	sec
    14d4:	41 1c       	adc	r4, r1
    14d6:	51 1c       	adc	r5, r1
    14d8:	f3 01       	movw	r30, r6
    14da:	93 81       	ldd	r25, Z+3	; 0x03
    14dc:	ec 85       	ldd	r30, Y+12	; 0x0c
    14de:	fd 85       	ldd	r31, Y+13	; 0x0d
    14e0:	93 fd       	sbrc	r25, 3
    14e2:	85 91       	lpm	r24, Z+
    14e4:	93 ff       	sbrs	r25, 3
    14e6:	81 91       	ld	r24, Z+
    14e8:	fd 87       	std	Y+13, r31	; 0x0d
    14ea:	ec 87       	std	Y+12, r30	; 0x0c
    14ec:	88 23       	and	r24, r24
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <vfprintf+0x6a>
    14f0:	a6 c1       	rjmp	.+844    	; 0x183e <vfprintf+0x3b6>
    14f2:	85 32       	cpi	r24, 0x25	; 37
    14f4:	41 f4       	brne	.+16     	; 0x1506 <vfprintf+0x7e>
    14f6:	93 fd       	sbrc	r25, 3
    14f8:	85 91       	lpm	r24, Z+
    14fa:	93 ff       	sbrs	r25, 3
    14fc:	81 91       	ld	r24, Z+
    14fe:	fd 87       	std	Y+13, r31	; 0x0d
    1500:	ec 87       	std	Y+12, r30	; 0x0c
    1502:	85 32       	cpi	r24, 0x25	; 37
    1504:	21 f4       	brne	.+8      	; 0x150e <vfprintf+0x86>
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	b3 01       	movw	r22, r6
    150a:	ce d1       	rcall	.+924    	; 0x18a8 <fputc>
    150c:	e5 cf       	rjmp	.-54     	; 0x14d8 <vfprintf+0x50>
    150e:	ff 24       	eor	r15, r15
    1510:	ee 24       	eor	r14, r14
    1512:	10 e0       	ldi	r17, 0x00	; 0
    1514:	10 32       	cpi	r17, 0x20	; 32
    1516:	b0 f4       	brcc	.+44     	; 0x1544 <vfprintf+0xbc>
    1518:	8b 32       	cpi	r24, 0x2B	; 43
    151a:	69 f0       	breq	.+26     	; 0x1536 <vfprintf+0xae>
    151c:	8c 32       	cpi	r24, 0x2C	; 44
    151e:	28 f4       	brcc	.+10     	; 0x152a <vfprintf+0xa2>
    1520:	80 32       	cpi	r24, 0x20	; 32
    1522:	51 f0       	breq	.+20     	; 0x1538 <vfprintf+0xb0>
    1524:	83 32       	cpi	r24, 0x23	; 35
    1526:	71 f4       	brne	.+28     	; 0x1544 <vfprintf+0xbc>
    1528:	0b c0       	rjmp	.+22     	; 0x1540 <vfprintf+0xb8>
    152a:	8d 32       	cpi	r24, 0x2D	; 45
    152c:	39 f0       	breq	.+14     	; 0x153c <vfprintf+0xb4>
    152e:	80 33       	cpi	r24, 0x30	; 48
    1530:	49 f4       	brne	.+18     	; 0x1544 <vfprintf+0xbc>
    1532:	11 60       	ori	r17, 0x01	; 1
    1534:	2c c0       	rjmp	.+88     	; 0x158e <vfprintf+0x106>
    1536:	12 60       	ori	r17, 0x02	; 2
    1538:	14 60       	ori	r17, 0x04	; 4
    153a:	29 c0       	rjmp	.+82     	; 0x158e <vfprintf+0x106>
    153c:	18 60       	ori	r17, 0x08	; 8
    153e:	27 c0       	rjmp	.+78     	; 0x158e <vfprintf+0x106>
    1540:	10 61       	ori	r17, 0x10	; 16
    1542:	25 c0       	rjmp	.+74     	; 0x158e <vfprintf+0x106>
    1544:	17 fd       	sbrc	r17, 7
    1546:	2e c0       	rjmp	.+92     	; 0x15a4 <vfprintf+0x11c>
    1548:	28 2f       	mov	r18, r24
    154a:	20 53       	subi	r18, 0x30	; 48
    154c:	2a 30       	cpi	r18, 0x0A	; 10
    154e:	98 f4       	brcc	.+38     	; 0x1576 <vfprintf+0xee>
    1550:	16 ff       	sbrs	r17, 6
    1552:	08 c0       	rjmp	.+16     	; 0x1564 <vfprintf+0xdc>
    1554:	8f 2d       	mov	r24, r15
    1556:	88 0f       	add	r24, r24
    1558:	f8 2e       	mov	r15, r24
    155a:	ff 0c       	add	r15, r15
    155c:	ff 0c       	add	r15, r15
    155e:	f8 0e       	add	r15, r24
    1560:	f2 0e       	add	r15, r18
    1562:	15 c0       	rjmp	.+42     	; 0x158e <vfprintf+0x106>
    1564:	8e 2d       	mov	r24, r14
    1566:	88 0f       	add	r24, r24
    1568:	e8 2e       	mov	r14, r24
    156a:	ee 0c       	add	r14, r14
    156c:	ee 0c       	add	r14, r14
    156e:	e8 0e       	add	r14, r24
    1570:	e2 0e       	add	r14, r18
    1572:	10 62       	ori	r17, 0x20	; 32
    1574:	0c c0       	rjmp	.+24     	; 0x158e <vfprintf+0x106>
    1576:	8e 32       	cpi	r24, 0x2E	; 46
    1578:	21 f4       	brne	.+8      	; 0x1582 <vfprintf+0xfa>
    157a:	16 fd       	sbrc	r17, 6
    157c:	60 c1       	rjmp	.+704    	; 0x183e <vfprintf+0x3b6>
    157e:	10 64       	ori	r17, 0x40	; 64
    1580:	06 c0       	rjmp	.+12     	; 0x158e <vfprintf+0x106>
    1582:	8c 36       	cpi	r24, 0x6C	; 108
    1584:	11 f4       	brne	.+4      	; 0x158a <vfprintf+0x102>
    1586:	10 68       	ori	r17, 0x80	; 128
    1588:	02 c0       	rjmp	.+4      	; 0x158e <vfprintf+0x106>
    158a:	88 36       	cpi	r24, 0x68	; 104
    158c:	59 f4       	brne	.+22     	; 0x15a4 <vfprintf+0x11c>
    158e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1590:	fd 85       	ldd	r31, Y+13	; 0x0d
    1592:	93 fd       	sbrc	r25, 3
    1594:	85 91       	lpm	r24, Z+
    1596:	93 ff       	sbrs	r25, 3
    1598:	81 91       	ld	r24, Z+
    159a:	fd 87       	std	Y+13, r31	; 0x0d
    159c:	ec 87       	std	Y+12, r30	; 0x0c
    159e:	88 23       	and	r24, r24
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <vfprintf+0x11c>
    15a2:	b8 cf       	rjmp	.-144    	; 0x1514 <vfprintf+0x8c>
    15a4:	98 2f       	mov	r25, r24
    15a6:	95 54       	subi	r25, 0x45	; 69
    15a8:	93 30       	cpi	r25, 0x03	; 3
    15aa:	18 f0       	brcs	.+6      	; 0x15b2 <vfprintf+0x12a>
    15ac:	90 52       	subi	r25, 0x20	; 32
    15ae:	93 30       	cpi	r25, 0x03	; 3
    15b0:	38 f4       	brcc	.+14     	; 0x15c0 <vfprintf+0x138>
    15b2:	24 e0       	ldi	r18, 0x04	; 4
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	a2 0e       	add	r10, r18
    15b8:	b3 1e       	adc	r11, r19
    15ba:	3f e3       	ldi	r19, 0x3F	; 63
    15bc:	39 83       	std	Y+1, r19	; 0x01
    15be:	0f c0       	rjmp	.+30     	; 0x15de <vfprintf+0x156>
    15c0:	83 36       	cpi	r24, 0x63	; 99
    15c2:	31 f0       	breq	.+12     	; 0x15d0 <vfprintf+0x148>
    15c4:	83 37       	cpi	r24, 0x73	; 115
    15c6:	81 f0       	breq	.+32     	; 0x15e8 <vfprintf+0x160>
    15c8:	83 35       	cpi	r24, 0x53	; 83
    15ca:	09 f0       	breq	.+2      	; 0x15ce <vfprintf+0x146>
    15cc:	56 c0       	rjmp	.+172    	; 0x167a <vfprintf+0x1f2>
    15ce:	21 c0       	rjmp	.+66     	; 0x1612 <vfprintf+0x18a>
    15d0:	f5 01       	movw	r30, r10
    15d2:	80 81       	ld	r24, Z
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	22 e0       	ldi	r18, 0x02	; 2
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	a2 0e       	add	r10, r18
    15dc:	b3 1e       	adc	r11, r19
    15de:	21 e0       	ldi	r18, 0x01	; 1
    15e0:	c2 2e       	mov	r12, r18
    15e2:	d1 2c       	mov	r13, r1
    15e4:	42 01       	movw	r8, r4
    15e6:	13 c0       	rjmp	.+38     	; 0x160e <vfprintf+0x186>
    15e8:	92 e0       	ldi	r25, 0x02	; 2
    15ea:	29 2e       	mov	r2, r25
    15ec:	31 2c       	mov	r3, r1
    15ee:	2a 0c       	add	r2, r10
    15f0:	3b 1c       	adc	r3, r11
    15f2:	f5 01       	movw	r30, r10
    15f4:	80 80       	ld	r8, Z
    15f6:	91 80       	ldd	r9, Z+1	; 0x01
    15f8:	16 ff       	sbrs	r17, 6
    15fa:	03 c0       	rjmp	.+6      	; 0x1602 <vfprintf+0x17a>
    15fc:	6f 2d       	mov	r22, r15
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <vfprintf+0x17e>
    1602:	6f ef       	ldi	r22, 0xFF	; 255
    1604:	7f ef       	ldi	r23, 0xFF	; 255
    1606:	c4 01       	movw	r24, r8
    1608:	44 d1       	rcall	.+648    	; 0x1892 <strnlen>
    160a:	6c 01       	movw	r12, r24
    160c:	51 01       	movw	r10, r2
    160e:	1f 77       	andi	r17, 0x7F	; 127
    1610:	14 c0       	rjmp	.+40     	; 0x163a <vfprintf+0x1b2>
    1612:	82 e0       	ldi	r24, 0x02	; 2
    1614:	28 2e       	mov	r2, r24
    1616:	31 2c       	mov	r3, r1
    1618:	2a 0c       	add	r2, r10
    161a:	3b 1c       	adc	r3, r11
    161c:	f5 01       	movw	r30, r10
    161e:	80 80       	ld	r8, Z
    1620:	91 80       	ldd	r9, Z+1	; 0x01
    1622:	16 ff       	sbrs	r17, 6
    1624:	03 c0       	rjmp	.+6      	; 0x162c <vfprintf+0x1a4>
    1626:	6f 2d       	mov	r22, r15
    1628:	70 e0       	ldi	r23, 0x00	; 0
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <vfprintf+0x1a8>
    162c:	6f ef       	ldi	r22, 0xFF	; 255
    162e:	7f ef       	ldi	r23, 0xFF	; 255
    1630:	c4 01       	movw	r24, r8
    1632:	24 d1       	rcall	.+584    	; 0x187c <strnlen_P>
    1634:	6c 01       	movw	r12, r24
    1636:	10 68       	ori	r17, 0x80	; 128
    1638:	51 01       	movw	r10, r2
    163a:	13 fd       	sbrc	r17, 3
    163c:	1a c0       	rjmp	.+52     	; 0x1672 <vfprintf+0x1ea>
    163e:	05 c0       	rjmp	.+10     	; 0x164a <vfprintf+0x1c2>
    1640:	80 e2       	ldi	r24, 0x20	; 32
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	b3 01       	movw	r22, r6
    1646:	30 d1       	rcall	.+608    	; 0x18a8 <fputc>
    1648:	ea 94       	dec	r14
    164a:	8e 2d       	mov	r24, r14
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	c8 16       	cp	r12, r24
    1650:	d9 06       	cpc	r13, r25
    1652:	b0 f3       	brcs	.-20     	; 0x1640 <vfprintf+0x1b8>
    1654:	0e c0       	rjmp	.+28     	; 0x1672 <vfprintf+0x1ea>
    1656:	f4 01       	movw	r30, r8
    1658:	17 fd       	sbrc	r17, 7
    165a:	85 91       	lpm	r24, Z+
    165c:	17 ff       	sbrs	r17, 7
    165e:	81 91       	ld	r24, Z+
    1660:	4f 01       	movw	r8, r30
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	b3 01       	movw	r22, r6
    1666:	20 d1       	rcall	.+576    	; 0x18a8 <fputc>
    1668:	e1 10       	cpse	r14, r1
    166a:	ea 94       	dec	r14
    166c:	08 94       	sec
    166e:	c1 08       	sbc	r12, r1
    1670:	d1 08       	sbc	r13, r1
    1672:	c1 14       	cp	r12, r1
    1674:	d1 04       	cpc	r13, r1
    1676:	79 f7       	brne	.-34     	; 0x1656 <vfprintf+0x1ce>
    1678:	df c0       	rjmp	.+446    	; 0x1838 <vfprintf+0x3b0>
    167a:	84 36       	cpi	r24, 0x64	; 100
    167c:	11 f0       	breq	.+4      	; 0x1682 <vfprintf+0x1fa>
    167e:	89 36       	cpi	r24, 0x69	; 105
    1680:	49 f5       	brne	.+82     	; 0x16d4 <vfprintf+0x24c>
    1682:	f5 01       	movw	r30, r10
    1684:	17 ff       	sbrs	r17, 7
    1686:	07 c0       	rjmp	.+14     	; 0x1696 <vfprintf+0x20e>
    1688:	80 81       	ld	r24, Z
    168a:	91 81       	ldd	r25, Z+1	; 0x01
    168c:	a2 81       	ldd	r26, Z+2	; 0x02
    168e:	b3 81       	ldd	r27, Z+3	; 0x03
    1690:	24 e0       	ldi	r18, 0x04	; 4
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	08 c0       	rjmp	.+16     	; 0x16a6 <vfprintf+0x21e>
    1696:	80 81       	ld	r24, Z
    1698:	91 81       	ldd	r25, Z+1	; 0x01
    169a:	aa 27       	eor	r26, r26
    169c:	97 fd       	sbrc	r25, 7
    169e:	a0 95       	com	r26
    16a0:	ba 2f       	mov	r27, r26
    16a2:	22 e0       	ldi	r18, 0x02	; 2
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	a2 0e       	add	r10, r18
    16a8:	b3 1e       	adc	r11, r19
    16aa:	01 2f       	mov	r16, r17
    16ac:	0f 76       	andi	r16, 0x6F	; 111
    16ae:	b7 ff       	sbrs	r27, 7
    16b0:	08 c0       	rjmp	.+16     	; 0x16c2 <vfprintf+0x23a>
    16b2:	b0 95       	com	r27
    16b4:	a0 95       	com	r26
    16b6:	90 95       	com	r25
    16b8:	81 95       	neg	r24
    16ba:	9f 4f       	sbci	r25, 0xFF	; 255
    16bc:	af 4f       	sbci	r26, 0xFF	; 255
    16be:	bf 4f       	sbci	r27, 0xFF	; 255
    16c0:	00 68       	ori	r16, 0x80	; 128
    16c2:	bc 01       	movw	r22, r24
    16c4:	cd 01       	movw	r24, r26
    16c6:	a2 01       	movw	r20, r4
    16c8:	2a e0       	ldi	r18, 0x0A	; 10
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	19 d1       	rcall	.+562    	; 0x1900 <__ultoa_invert>
    16ce:	d8 2e       	mov	r13, r24
    16d0:	d4 18       	sub	r13, r4
    16d2:	3e c0       	rjmp	.+124    	; 0x1750 <vfprintf+0x2c8>
    16d4:	85 37       	cpi	r24, 0x75	; 117
    16d6:	21 f4       	brne	.+8      	; 0x16e0 <vfprintf+0x258>
    16d8:	1f 7e       	andi	r17, 0xEF	; 239
    16da:	2a e0       	ldi	r18, 0x0A	; 10
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	20 c0       	rjmp	.+64     	; 0x1720 <vfprintf+0x298>
    16e0:	19 7f       	andi	r17, 0xF9	; 249
    16e2:	8f 36       	cpi	r24, 0x6F	; 111
    16e4:	a9 f0       	breq	.+42     	; 0x1710 <vfprintf+0x288>
    16e6:	80 37       	cpi	r24, 0x70	; 112
    16e8:	20 f4       	brcc	.+8      	; 0x16f2 <vfprintf+0x26a>
    16ea:	88 35       	cpi	r24, 0x58	; 88
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <vfprintf+0x268>
    16ee:	a7 c0       	rjmp	.+334    	; 0x183e <vfprintf+0x3b6>
    16f0:	0b c0       	rjmp	.+22     	; 0x1708 <vfprintf+0x280>
    16f2:	80 37       	cpi	r24, 0x70	; 112
    16f4:	21 f0       	breq	.+8      	; 0x16fe <vfprintf+0x276>
    16f6:	88 37       	cpi	r24, 0x78	; 120
    16f8:	09 f0       	breq	.+2      	; 0x16fc <vfprintf+0x274>
    16fa:	a1 c0       	rjmp	.+322    	; 0x183e <vfprintf+0x3b6>
    16fc:	01 c0       	rjmp	.+2      	; 0x1700 <vfprintf+0x278>
    16fe:	10 61       	ori	r17, 0x10	; 16
    1700:	14 ff       	sbrs	r17, 4
    1702:	09 c0       	rjmp	.+18     	; 0x1716 <vfprintf+0x28e>
    1704:	14 60       	ori	r17, 0x04	; 4
    1706:	07 c0       	rjmp	.+14     	; 0x1716 <vfprintf+0x28e>
    1708:	14 ff       	sbrs	r17, 4
    170a:	08 c0       	rjmp	.+16     	; 0x171c <vfprintf+0x294>
    170c:	16 60       	ori	r17, 0x06	; 6
    170e:	06 c0       	rjmp	.+12     	; 0x171c <vfprintf+0x294>
    1710:	28 e0       	ldi	r18, 0x08	; 8
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	05 c0       	rjmp	.+10     	; 0x1720 <vfprintf+0x298>
    1716:	20 e1       	ldi	r18, 0x10	; 16
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <vfprintf+0x298>
    171c:	20 e1       	ldi	r18, 0x10	; 16
    171e:	32 e0       	ldi	r19, 0x02	; 2
    1720:	f5 01       	movw	r30, r10
    1722:	17 ff       	sbrs	r17, 7
    1724:	07 c0       	rjmp	.+14     	; 0x1734 <vfprintf+0x2ac>
    1726:	60 81       	ld	r22, Z
    1728:	71 81       	ldd	r23, Z+1	; 0x01
    172a:	82 81       	ldd	r24, Z+2	; 0x02
    172c:	93 81       	ldd	r25, Z+3	; 0x03
    172e:	44 e0       	ldi	r20, 0x04	; 4
    1730:	50 e0       	ldi	r21, 0x00	; 0
    1732:	06 c0       	rjmp	.+12     	; 0x1740 <vfprintf+0x2b8>
    1734:	60 81       	ld	r22, Z
    1736:	71 81       	ldd	r23, Z+1	; 0x01
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	42 e0       	ldi	r20, 0x02	; 2
    173e:	50 e0       	ldi	r21, 0x00	; 0
    1740:	a4 0e       	add	r10, r20
    1742:	b5 1e       	adc	r11, r21
    1744:	a2 01       	movw	r20, r4
    1746:	dc d0       	rcall	.+440    	; 0x1900 <__ultoa_invert>
    1748:	d8 2e       	mov	r13, r24
    174a:	d4 18       	sub	r13, r4
    174c:	01 2f       	mov	r16, r17
    174e:	0f 77       	andi	r16, 0x7F	; 127
    1750:	06 ff       	sbrs	r16, 6
    1752:	09 c0       	rjmp	.+18     	; 0x1766 <vfprintf+0x2de>
    1754:	0e 7f       	andi	r16, 0xFE	; 254
    1756:	df 14       	cp	r13, r15
    1758:	30 f4       	brcc	.+12     	; 0x1766 <vfprintf+0x2de>
    175a:	04 ff       	sbrs	r16, 4
    175c:	06 c0       	rjmp	.+12     	; 0x176a <vfprintf+0x2e2>
    175e:	02 fd       	sbrc	r16, 2
    1760:	04 c0       	rjmp	.+8      	; 0x176a <vfprintf+0x2e2>
    1762:	0f 7e       	andi	r16, 0xEF	; 239
    1764:	02 c0       	rjmp	.+4      	; 0x176a <vfprintf+0x2e2>
    1766:	1d 2d       	mov	r17, r13
    1768:	01 c0       	rjmp	.+2      	; 0x176c <vfprintf+0x2e4>
    176a:	1f 2d       	mov	r17, r15
    176c:	80 2f       	mov	r24, r16
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	04 ff       	sbrs	r16, 4
    1772:	0c c0       	rjmp	.+24     	; 0x178c <vfprintf+0x304>
    1774:	fe 01       	movw	r30, r28
    1776:	ed 0d       	add	r30, r13
    1778:	f1 1d       	adc	r31, r1
    177a:	20 81       	ld	r18, Z
    177c:	20 33       	cpi	r18, 0x30	; 48
    177e:	11 f4       	brne	.+4      	; 0x1784 <vfprintf+0x2fc>
    1780:	09 7e       	andi	r16, 0xE9	; 233
    1782:	09 c0       	rjmp	.+18     	; 0x1796 <vfprintf+0x30e>
    1784:	02 ff       	sbrs	r16, 2
    1786:	06 c0       	rjmp	.+12     	; 0x1794 <vfprintf+0x30c>
    1788:	1e 5f       	subi	r17, 0xFE	; 254
    178a:	05 c0       	rjmp	.+10     	; 0x1796 <vfprintf+0x30e>
    178c:	86 78       	andi	r24, 0x86	; 134
    178e:	90 70       	andi	r25, 0x00	; 0
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	09 f0       	breq	.+2      	; 0x1796 <vfprintf+0x30e>
    1794:	1f 5f       	subi	r17, 0xFF	; 255
    1796:	80 2e       	mov	r8, r16
    1798:	99 24       	eor	r9, r9
    179a:	03 fd       	sbrc	r16, 3
    179c:	11 c0       	rjmp	.+34     	; 0x17c0 <vfprintf+0x338>
    179e:	00 ff       	sbrs	r16, 0
    17a0:	0c c0       	rjmp	.+24     	; 0x17ba <vfprintf+0x332>
    17a2:	fd 2c       	mov	r15, r13
    17a4:	1e 15       	cp	r17, r14
    17a6:	48 f4       	brcc	.+18     	; 0x17ba <vfprintf+0x332>
    17a8:	fe 0c       	add	r15, r14
    17aa:	f1 1a       	sub	r15, r17
    17ac:	1e 2d       	mov	r17, r14
    17ae:	05 c0       	rjmp	.+10     	; 0x17ba <vfprintf+0x332>
    17b0:	80 e2       	ldi	r24, 0x20	; 32
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	b3 01       	movw	r22, r6
    17b6:	78 d0       	rcall	.+240    	; 0x18a8 <fputc>
    17b8:	1f 5f       	subi	r17, 0xFF	; 255
    17ba:	1e 15       	cp	r17, r14
    17bc:	c8 f3       	brcs	.-14     	; 0x17b0 <vfprintf+0x328>
    17be:	04 c0       	rjmp	.+8      	; 0x17c8 <vfprintf+0x340>
    17c0:	1e 15       	cp	r17, r14
    17c2:	10 f4       	brcc	.+4      	; 0x17c8 <vfprintf+0x340>
    17c4:	e1 1a       	sub	r14, r17
    17c6:	01 c0       	rjmp	.+2      	; 0x17ca <vfprintf+0x342>
    17c8:	ee 24       	eor	r14, r14
    17ca:	84 fe       	sbrs	r8, 4
    17cc:	0e c0       	rjmp	.+28     	; 0x17ea <vfprintf+0x362>
    17ce:	80 e3       	ldi	r24, 0x30	; 48
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	b3 01       	movw	r22, r6
    17d4:	69 d0       	rcall	.+210    	; 0x18a8 <fputc>
    17d6:	82 fe       	sbrs	r8, 2
    17d8:	1d c0       	rjmp	.+58     	; 0x1814 <vfprintf+0x38c>
    17da:	81 fe       	sbrs	r8, 1
    17dc:	03 c0       	rjmp	.+6      	; 0x17e4 <vfprintf+0x35c>
    17de:	88 e5       	ldi	r24, 0x58	; 88
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	10 c0       	rjmp	.+32     	; 0x1804 <vfprintf+0x37c>
    17e4:	88 e7       	ldi	r24, 0x78	; 120
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	0d c0       	rjmp	.+26     	; 0x1804 <vfprintf+0x37c>
    17ea:	c4 01       	movw	r24, r8
    17ec:	86 78       	andi	r24, 0x86	; 134
    17ee:	90 70       	andi	r25, 0x00	; 0
    17f0:	00 97       	sbiw	r24, 0x00	; 0
    17f2:	81 f0       	breq	.+32     	; 0x1814 <vfprintf+0x38c>
    17f4:	81 fc       	sbrc	r8, 1
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <vfprintf+0x374>
    17f8:	80 e2       	ldi	r24, 0x20	; 32
    17fa:	01 c0       	rjmp	.+2      	; 0x17fe <vfprintf+0x376>
    17fc:	8b e2       	ldi	r24, 0x2B	; 43
    17fe:	07 fd       	sbrc	r16, 7
    1800:	8d e2       	ldi	r24, 0x2D	; 45
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	b3 01       	movw	r22, r6
    1806:	50 d0       	rcall	.+160    	; 0x18a8 <fputc>
    1808:	05 c0       	rjmp	.+10     	; 0x1814 <vfprintf+0x38c>
    180a:	80 e3       	ldi	r24, 0x30	; 48
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	b3 01       	movw	r22, r6
    1810:	4b d0       	rcall	.+150    	; 0x18a8 <fputc>
    1812:	fa 94       	dec	r15
    1814:	df 14       	cp	r13, r15
    1816:	c8 f3       	brcs	.-14     	; 0x180a <vfprintf+0x382>
    1818:	da 94       	dec	r13
    181a:	f2 01       	movw	r30, r4
    181c:	ed 0d       	add	r30, r13
    181e:	f1 1d       	adc	r31, r1
    1820:	80 81       	ld	r24, Z
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	b3 01       	movw	r22, r6
    1826:	40 d0       	rcall	.+128    	; 0x18a8 <fputc>
    1828:	dd 20       	and	r13, r13
    182a:	b1 f7       	brne	.-20     	; 0x1818 <vfprintf+0x390>
    182c:	05 c0       	rjmp	.+10     	; 0x1838 <vfprintf+0x3b0>
    182e:	80 e2       	ldi	r24, 0x20	; 32
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	b3 01       	movw	r22, r6
    1834:	39 d0       	rcall	.+114    	; 0x18a8 <fputc>
    1836:	ea 94       	dec	r14
    1838:	ee 20       	and	r14, r14
    183a:	c9 f7       	brne	.-14     	; 0x182e <vfprintf+0x3a6>
    183c:	4d ce       	rjmp	.-870    	; 0x14d8 <vfprintf+0x50>
    183e:	f3 01       	movw	r30, r6
    1840:	86 81       	ldd	r24, Z+6	; 0x06
    1842:	97 81       	ldd	r25, Z+7	; 0x07
    1844:	02 c0       	rjmp	.+4      	; 0x184a <vfprintf+0x3c2>
    1846:	8f ef       	ldi	r24, 0xFF	; 255
    1848:	9f ef       	ldi	r25, 0xFF	; 255
    184a:	2d 96       	adiw	r28, 0x0d	; 13
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	df 91       	pop	r29
    1858:	cf 91       	pop	r28
    185a:	1f 91       	pop	r17
    185c:	0f 91       	pop	r16
    185e:	ff 90       	pop	r15
    1860:	ef 90       	pop	r14
    1862:	df 90       	pop	r13
    1864:	cf 90       	pop	r12
    1866:	bf 90       	pop	r11
    1868:	af 90       	pop	r10
    186a:	9f 90       	pop	r9
    186c:	8f 90       	pop	r8
    186e:	7f 90       	pop	r7
    1870:	6f 90       	pop	r6
    1872:	5f 90       	pop	r5
    1874:	4f 90       	pop	r4
    1876:	3f 90       	pop	r3
    1878:	2f 90       	pop	r2
    187a:	08 95       	ret

0000187c <strnlen_P>:
    187c:	fc 01       	movw	r30, r24
    187e:	05 90       	lpm	r0, Z+
    1880:	61 50       	subi	r22, 0x01	; 1
    1882:	70 40       	sbci	r23, 0x00	; 0
    1884:	01 10       	cpse	r0, r1
    1886:	d8 f7       	brcc	.-10     	; 0x187e <strnlen_P+0x2>
    1888:	80 95       	com	r24
    188a:	90 95       	com	r25
    188c:	8e 0f       	add	r24, r30
    188e:	9f 1f       	adc	r25, r31
    1890:	08 95       	ret

00001892 <strnlen>:
    1892:	fc 01       	movw	r30, r24
    1894:	61 50       	subi	r22, 0x01	; 1
    1896:	70 40       	sbci	r23, 0x00	; 0
    1898:	01 90       	ld	r0, Z+
    189a:	01 10       	cpse	r0, r1
    189c:	d8 f7       	brcc	.-10     	; 0x1894 <strnlen+0x2>
    189e:	80 95       	com	r24
    18a0:	90 95       	com	r25
    18a2:	8e 0f       	add	r24, r30
    18a4:	9f 1f       	adc	r25, r31
    18a6:	08 95       	ret

000018a8 <fputc>:
    18a8:	0f 93       	push	r16
    18aa:	1f 93       	push	r17
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	8c 01       	movw	r16, r24
    18b2:	eb 01       	movw	r28, r22
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	81 ff       	sbrs	r24, 1
    18b8:	1b c0       	rjmp	.+54     	; 0x18f0 <fputc+0x48>
    18ba:	82 ff       	sbrs	r24, 2
    18bc:	0d c0       	rjmp	.+26     	; 0x18d8 <fputc+0x30>
    18be:	2e 81       	ldd	r18, Y+6	; 0x06
    18c0:	3f 81       	ldd	r19, Y+7	; 0x07
    18c2:	8c 81       	ldd	r24, Y+4	; 0x04
    18c4:	9d 81       	ldd	r25, Y+5	; 0x05
    18c6:	28 17       	cp	r18, r24
    18c8:	39 07       	cpc	r19, r25
    18ca:	64 f4       	brge	.+24     	; 0x18e4 <fputc+0x3c>
    18cc:	e8 81       	ld	r30, Y
    18ce:	f9 81       	ldd	r31, Y+1	; 0x01
    18d0:	01 93       	st	Z+, r16
    18d2:	f9 83       	std	Y+1, r31	; 0x01
    18d4:	e8 83       	st	Y, r30
    18d6:	06 c0       	rjmp	.+12     	; 0x18e4 <fputc+0x3c>
    18d8:	e8 85       	ldd	r30, Y+8	; 0x08
    18da:	f9 85       	ldd	r31, Y+9	; 0x09
    18dc:	80 2f       	mov	r24, r16
    18de:	09 95       	icall
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	31 f4       	brne	.+12     	; 0x18f0 <fputc+0x48>
    18e4:	8e 81       	ldd	r24, Y+6	; 0x06
    18e6:	9f 81       	ldd	r25, Y+7	; 0x07
    18e8:	01 96       	adiw	r24, 0x01	; 1
    18ea:	9f 83       	std	Y+7, r25	; 0x07
    18ec:	8e 83       	std	Y+6, r24	; 0x06
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <fputc+0x4c>
    18f0:	0f ef       	ldi	r16, 0xFF	; 255
    18f2:	1f ef       	ldi	r17, 0xFF	; 255
    18f4:	c8 01       	movw	r24, r16
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	1f 91       	pop	r17
    18fc:	0f 91       	pop	r16
    18fe:	08 95       	ret

00001900 <__ultoa_invert>:
    1900:	fa 01       	movw	r30, r20
    1902:	aa 27       	eor	r26, r26
    1904:	28 30       	cpi	r18, 0x08	; 8
    1906:	51 f1       	breq	.+84     	; 0x195c <__ultoa_invert+0x5c>
    1908:	20 31       	cpi	r18, 0x10	; 16
    190a:	81 f1       	breq	.+96     	; 0x196c <__ultoa_invert+0x6c>
    190c:	e8 94       	clt
    190e:	6f 93       	push	r22
    1910:	6e 7f       	andi	r22, 0xFE	; 254
    1912:	6e 5f       	subi	r22, 0xFE	; 254
    1914:	7f 4f       	sbci	r23, 0xFF	; 255
    1916:	8f 4f       	sbci	r24, 0xFF	; 255
    1918:	9f 4f       	sbci	r25, 0xFF	; 255
    191a:	af 4f       	sbci	r26, 0xFF	; 255
    191c:	b1 e0       	ldi	r27, 0x01	; 1
    191e:	3e d0       	rcall	.+124    	; 0x199c <__ultoa_invert+0x9c>
    1920:	b4 e0       	ldi	r27, 0x04	; 4
    1922:	3c d0       	rcall	.+120    	; 0x199c <__ultoa_invert+0x9c>
    1924:	67 0f       	add	r22, r23
    1926:	78 1f       	adc	r23, r24
    1928:	89 1f       	adc	r24, r25
    192a:	9a 1f       	adc	r25, r26
    192c:	a1 1d       	adc	r26, r1
    192e:	68 0f       	add	r22, r24
    1930:	79 1f       	adc	r23, r25
    1932:	8a 1f       	adc	r24, r26
    1934:	91 1d       	adc	r25, r1
    1936:	a1 1d       	adc	r26, r1
    1938:	6a 0f       	add	r22, r26
    193a:	71 1d       	adc	r23, r1
    193c:	81 1d       	adc	r24, r1
    193e:	91 1d       	adc	r25, r1
    1940:	a1 1d       	adc	r26, r1
    1942:	20 d0       	rcall	.+64     	; 0x1984 <__ultoa_invert+0x84>
    1944:	09 f4       	brne	.+2      	; 0x1948 <__ultoa_invert+0x48>
    1946:	68 94       	set
    1948:	3f 91       	pop	r19
    194a:	2a e0       	ldi	r18, 0x0A	; 10
    194c:	26 9f       	mul	r18, r22
    194e:	11 24       	eor	r1, r1
    1950:	30 19       	sub	r19, r0
    1952:	30 5d       	subi	r19, 0xD0	; 208
    1954:	31 93       	st	Z+, r19
    1956:	de f6       	brtc	.-74     	; 0x190e <__ultoa_invert+0xe>
    1958:	cf 01       	movw	r24, r30
    195a:	08 95       	ret
    195c:	46 2f       	mov	r20, r22
    195e:	47 70       	andi	r20, 0x07	; 7
    1960:	40 5d       	subi	r20, 0xD0	; 208
    1962:	41 93       	st	Z+, r20
    1964:	b3 e0       	ldi	r27, 0x03	; 3
    1966:	0f d0       	rcall	.+30     	; 0x1986 <__ultoa_invert+0x86>
    1968:	c9 f7       	brne	.-14     	; 0x195c <__ultoa_invert+0x5c>
    196a:	f6 cf       	rjmp	.-20     	; 0x1958 <__ultoa_invert+0x58>
    196c:	46 2f       	mov	r20, r22
    196e:	4f 70       	andi	r20, 0x0F	; 15
    1970:	40 5d       	subi	r20, 0xD0	; 208
    1972:	4a 33       	cpi	r20, 0x3A	; 58
    1974:	18 f0       	brcs	.+6      	; 0x197c <__ultoa_invert+0x7c>
    1976:	49 5d       	subi	r20, 0xD9	; 217
    1978:	31 fd       	sbrc	r19, 1
    197a:	40 52       	subi	r20, 0x20	; 32
    197c:	41 93       	st	Z+, r20
    197e:	02 d0       	rcall	.+4      	; 0x1984 <__ultoa_invert+0x84>
    1980:	a9 f7       	brne	.-22     	; 0x196c <__ultoa_invert+0x6c>
    1982:	ea cf       	rjmp	.-44     	; 0x1958 <__ultoa_invert+0x58>
    1984:	b4 e0       	ldi	r27, 0x04	; 4
    1986:	a6 95       	lsr	r26
    1988:	97 95       	ror	r25
    198a:	87 95       	ror	r24
    198c:	77 95       	ror	r23
    198e:	67 95       	ror	r22
    1990:	ba 95       	dec	r27
    1992:	c9 f7       	brne	.-14     	; 0x1986 <__ultoa_invert+0x86>
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	61 05       	cpc	r22, r1
    1998:	71 05       	cpc	r23, r1
    199a:	08 95       	ret
    199c:	9b 01       	movw	r18, r22
    199e:	ac 01       	movw	r20, r24
    19a0:	0a 2e       	mov	r0, r26
    19a2:	06 94       	lsr	r0
    19a4:	57 95       	ror	r21
    19a6:	47 95       	ror	r20
    19a8:	37 95       	ror	r19
    19aa:	27 95       	ror	r18
    19ac:	ba 95       	dec	r27
    19ae:	c9 f7       	brne	.-14     	; 0x19a2 <__ultoa_invert+0xa2>
    19b0:	62 0f       	add	r22, r18
    19b2:	73 1f       	adc	r23, r19
    19b4:	84 1f       	adc	r24, r20
    19b6:	95 1f       	adc	r25, r21
    19b8:	a0 1d       	adc	r26, r0
    19ba:	08 95       	ret

000019bc <_exit>:
    19bc:	f8 94       	cli

000019be <__stop_program>:
    19be:	ff cf       	rjmp	.-2      	; 0x19be <__stop_program>
