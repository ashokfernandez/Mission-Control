
KeyboardHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  000024d4  00002568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fb  00800142  00800142  000025aa  2**0
                  ALLOC
  3 .stab         00000f90  00000000  00000000  000025ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000030d  00000000  00000000  0000353c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000890  00000000  00000000  00003850  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000db79  00000000  00000000  000040e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034b8  00000000  00000000  00011c59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005cb3  00000000  00000000  00015111  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001964  00000000  00000000  0001adc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004fa9  00000000  00000000  0001c728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000097eb  00000000  00000000  000216d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a40  00000000  00000000  0002aebc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1f c1       	rjmp	.+574    	; 0x240 <__ctors_end>
       2:	00 00       	nop
       4:	3c c1       	rjmp	.+632    	; 0x27e <__bad_interrupt>
       6:	00 00       	nop
       8:	3a c1       	rjmp	.+628    	; 0x27e <__bad_interrupt>
       a:	00 00       	nop
       c:	38 c1       	rjmp	.+624    	; 0x27e <__bad_interrupt>
       e:	00 00       	nop
      10:	36 c1       	rjmp	.+620    	; 0x27e <__bad_interrupt>
      12:	00 00       	nop
      14:	34 c1       	rjmp	.+616    	; 0x27e <__bad_interrupt>
      16:	00 00       	nop
      18:	32 c1       	rjmp	.+612    	; 0x27e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	30 c1       	rjmp	.+608    	; 0x27e <__bad_interrupt>
      1e:	00 00       	nop
      20:	2e c1       	rjmp	.+604    	; 0x27e <__bad_interrupt>
      22:	00 00       	nop
      24:	2c c1       	rjmp	.+600    	; 0x27e <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <__vector_10>
      2c:	28 c1       	rjmp	.+592    	; 0x27e <__bad_interrupt>
      2e:	00 00       	nop
      30:	26 c1       	rjmp	.+588    	; 0x27e <__bad_interrupt>
      32:	00 00       	nop
      34:	24 c1       	rjmp	.+584    	; 0x27e <__bad_interrupt>
      36:	00 00       	nop
      38:	22 c1       	rjmp	.+580    	; 0x27e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	20 c1       	rjmp	.+576    	; 0x27e <__bad_interrupt>
      3e:	00 00       	nop
      40:	1e c1       	rjmp	.+572    	; 0x27e <__bad_interrupt>
      42:	00 00       	nop
      44:	1c c1       	rjmp	.+568    	; 0x27e <__bad_interrupt>
      46:	00 00       	nop
      48:	1a c1       	rjmp	.+564    	; 0x27e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	18 c1       	rjmp	.+560    	; 0x27e <__bad_interrupt>
      4e:	00 00       	nop
      50:	16 c1       	rjmp	.+556    	; 0x27e <__bad_interrupt>
      52:	00 00       	nop
      54:	14 c1       	rjmp	.+552    	; 0x27e <__bad_interrupt>
      56:	00 00       	nop
      58:	12 c1       	rjmp	.+548    	; 0x27e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	10 c1       	rjmp	.+544    	; 0x27e <__bad_interrupt>
      5e:	00 00       	nop
      60:	0e c1       	rjmp	.+540    	; 0x27e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c c1       	rjmp	.+536    	; 0x27e <__bad_interrupt>
      66:	00 00       	nop
      68:	0a c1       	rjmp	.+532    	; 0x27e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	08 c1       	rjmp	.+528    	; 0x27e <__bad_interrupt>
      6e:	00 00       	nop
      70:	06 c1       	rjmp	.+524    	; 0x27e <__bad_interrupt>
      72:	00 00       	nop
      74:	04 c1       	rjmp	.+520    	; 0x27e <__bad_interrupt>
      76:	00 00       	nop
      78:	02 c1       	rjmp	.+516    	; 0x27e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	00 c1       	rjmp	.+512    	; 0x27e <__bad_interrupt>
      7e:	00 00       	nop
      80:	fe c0       	rjmp	.+508    	; 0x27e <__bad_interrupt>
      82:	00 00       	nop
      84:	fc c0       	rjmp	.+504    	; 0x27e <__bad_interrupt>
      86:	00 00       	nop
      88:	fa c0       	rjmp	.+500    	; 0x27e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f8 c0       	rjmp	.+496    	; 0x27e <__bad_interrupt>
      8e:	00 00       	nop
      90:	f6 c0       	rjmp	.+492    	; 0x27e <__bad_interrupt>
      92:	00 00       	nop
      94:	f4 c0       	rjmp	.+488    	; 0x27e <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4265>:
      98:	1b 5b 33 36 6d 4b 65 79 62 6f 61 72 64 20 48 6f     .[36mKeyboard Ho
      a8:	73 74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e     st Demo running.
      b8:	0d 0a 1b 5b 33 37 6d 00                             ...[37m.

000000c0 <__c.4286>:
      c0:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
      d0:	0d 0a 00                                            ...

000000d3 <__c.4291>:
      d3:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
      e3:	68 65 64 2e 0d 0a 00                                hed....

000000ea <__c.4298>:
      ea:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
      fa:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     10a:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

00000117 <__c.4300>:
     117:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     127:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4b 65 79 62     Not a Valid Keyb
     137:	6f 61 72 64 2e 0d 0a 00                             oard....

0000013f <__c.4302>:
     13f:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     14f:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     15f:	6f 6e 2e 0d 0a 00                                   on....

00000165 <__c.4304>:
     165:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 52 65     Error Setting Re
     175:	70 6f 72 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f     port Protocol Mo
     185:	64 65 20 6f 72 20 4e 6f 74 20 61 20 56 61 6c 69     de or Not a Vali
     195:	64 20 4b 65 79 62 6f 61 72 64 2e 0d 0a 00           d Keyboard....

000001a3 <__c.4306>:
     1a3:	4b 65 79 62 6f 61 72 64 20 45 6e 75 6d 65 72 61     Keyboard Enumera
     1b3:	74 65 64 2e 0d 0a 00                                ted....

000001ba <__c.4311>:
     1ba:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     1ca:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     1da:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

000001e9 <__c.4318>:
     1e9:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     1f9:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     209:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     219:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     229:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     239:	1b 5b 33 37 6d 00 00                                .[37m..

00000240 <__ctors_end>:
     240:	11 24       	eor	r1, r1
     242:	1f be       	out	0x3f, r1	; 63
     244:	cf ef       	ldi	r28, 0xFF	; 255
     246:	d0 e2       	ldi	r29, 0x20	; 32
     248:	de bf       	out	0x3e, r29	; 62
     24a:	cd bf       	out	0x3d, r28	; 61

0000024c <__do_copy_data>:
     24c:	11 e0       	ldi	r17, 0x01	; 1
     24e:	a0 e0       	ldi	r26, 0x00	; 0
     250:	b1 e0       	ldi	r27, 0x01	; 1
     252:	e4 ed       	ldi	r30, 0xD4	; 212
     254:	f4 e2       	ldi	r31, 0x24	; 36
     256:	00 e0       	ldi	r16, 0x00	; 0
     258:	0b bf       	out	0x3b, r16	; 59
     25a:	02 c0       	rjmp	.+4      	; 0x260 <__do_copy_data+0x14>
     25c:	07 90       	elpm	r0, Z+
     25e:	0d 92       	st	X+, r0
     260:	a2 34       	cpi	r26, 0x42	; 66
     262:	b1 07       	cpc	r27, r17
     264:	d9 f7       	brne	.-10     	; 0x25c <__do_copy_data+0x10>
     266:	1b be       	out	0x3b, r1	; 59

00000268 <__do_clear_bss>:
     268:	15 e0       	ldi	r17, 0x05	; 5
     26a:	a2 e4       	ldi	r26, 0x42	; 66
     26c:	b1 e0       	ldi	r27, 0x01	; 1
     26e:	01 c0       	rjmp	.+2      	; 0x272 <.do_clear_bss_start>

00000270 <.do_clear_bss_loop>:
     270:	1d 92       	st	X+, r1

00000272 <.do_clear_bss_start>:
     272:	ad 33       	cpi	r26, 0x3D	; 61
     274:	b1 07       	cpc	r27, r17
     276:	e1 f7       	brne	.-8      	; 0x270 <.do_clear_bss_loop>
     278:	d5 d0       	rcall	.+426    	; 0x424 <main>
     27a:	0c 94 68 12 	jmp	0x24d0	; 0x24d0 <_exit>

0000027e <__bad_interrupt>:
     27e:	c0 ce       	rjmp	.-640    	; 0x0 <__vectors>

00000280 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     280:	9b b1       	in	r25, 0x0b	; 11
     282:	9f 70       	andi	r25, 0x0F	; 15
     284:	98 2b       	or	r25, r24
     286:	9b b9       	out	0x0b, r25	; 11
			}
     288:	08 95       	ret

0000028a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     28a:	84 b7       	in	r24, 0x34	; 52
     28c:	87 7f       	andi	r24, 0xF7	; 247
     28e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     290:	28 e1       	ldi	r18, 0x18	; 24
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	20 93 60 00 	sts	0x0060, r18
     29a:	10 92 60 00 	sts	0x0060, r1
     29e:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	80 e8       	ldi	r24, 0x80	; 128
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	f8 94       	cli
     2a8:	80 93 61 00 	sts	0x0061, r24
     2ac:	90 93 61 00 	sts	0x0061, r25
     2b0:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2b2:	83 e3       	ldi	r24, 0x33	; 51
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	90 93 cd 00 	sts	0x00CD, r25
     2ba:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2be:	86 e0       	ldi	r24, 0x06	; 6
     2c0:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2c4:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2c8:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     2cc:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2ce:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2d0:	8a b1       	in	r24, 0x0a	; 10
     2d2:	80 6f       	ori	r24, 0xF0	; 240
     2d4:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2d6:	8b b1       	in	r24, 0x0b	; 11
     2d8:	8f 70       	andi	r24, 0x0F	; 15
     2da:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     2dc:	0e 94 9d 0a 	call	0x153a	; 0x153a <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <Serial_CreateStream>

000002e8 <KeyboardHost_Task>:
}
     2e8:	6f 92       	push	r6

/** Task to manage an enumerated USB keyboard once connected, to display key state
 *  data as it is received.
 */
void KeyboardHost_Task(void)
{
     2ea:	7f 92       	push	r7
     2ec:	8f 92       	push	r8
     2ee:	9f 92       	push	r9
     2f0:	bf 92       	push	r11
     2f2:	cf 92       	push	r12
     2f4:	df 92       	push	r13
     2f6:	ef 92       	push	r14
     2f8:	ff 92       	push	r15
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	cd b7       	in	r28, 0x3d	; 61
     304:	de b7       	in	r29, 0x3e	; 62
				/* Once a scan-code is found, stop scanning through the report items */
				break;
			}
		}
	}
}
     306:	6d b6       	in	r6, 0x3d	; 61
     308:	7e b6       	in	r7, 0x3e	; 62
/** Task to manage an enumerated USB keyboard once connected, to display key state
 *  data as it is received.
 */
void KeyboardHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     30a:	80 91 28 05 	lds	r24, 0x0528
     30e:	8b 30       	cpi	r24, 0x0B	; 11
     310:	09 f0       	breq	.+2      	; 0x314 <KeyboardHost_Task+0x2c>
     312:	75 c0       	rjmp	.+234    	; 0x3fe <KeyboardHost_Task+0x116>
	  return;

	if (HID_Host_IsReportReceived(&Keyboard_HID_Interface))
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	91 e0       	ldi	r25, 0x01	; 1
     318:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <HID_Host_IsReportReceived>
     31c:	88 23       	and	r24, r24
     31e:	09 f4       	brne	.+2      	; 0x322 <KeyboardHost_Task+0x3a>
     320:	6e c0       	rjmp	.+220    	; 0x3fe <KeyboardHost_Task+0x116>
     322:	cd b6       	in	r12, 0x3d	; 61
     324:	be b6       	in	r11, 0x3e	; 62
	{
		uint8_t KeyboardReport[Keyboard_HID_Interface.State.LargestReportSize];
     326:	80 91 16 01 	lds	r24, 0x0116
     32a:	2d b7       	in	r18, 0x3d	; 61
     32c:	3e b7       	in	r19, 0x3e	; 62
     32e:	28 1b       	sub	r18, r24
     330:	31 09       	sbc	r19, r1
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	f8 94       	cli
     336:	3e bf       	out	0x3e, r19	; 62
     338:	0f be       	out	0x3f, r0	; 63
     33a:	2d bf       	out	0x3d, r18	; 61
     33c:	6d b7       	in	r22, 0x3d	; 61
     33e:	7e b7       	in	r23, 0x3e	; 62
     340:	6f 5f       	subi	r22, 0xFF	; 255
     342:	7f 4f       	sbci	r23, 0xFF	; 255
		HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);
     344:	e6 2e       	mov	r14, r22
     346:	d7 2e       	mov	r13, r23
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	91 e0       	ldi	r25, 0x01	; 1
     34c:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <HID_Host_ReceiveReport>

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     350:	ff 24       	eor	r15, r15
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     352:	8a e2       	ldi	r24, 0x2A	; 42
     354:	88 2e       	mov	r8, r24
     356:	91 2c       	mov	r9, r1
	if (HID_Host_IsReportReceived(&Keyboard_HID_Interface))
	{
		uint8_t KeyboardReport[Keyboard_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     358:	4b c0       	rjmp	.+150    	; 0x3f0 <KeyboardHost_Task+0x108>
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     35a:	8f 2d       	mov	r24, r15
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	88 9d       	mul	r24, r8
     360:	80 01       	movw	r16, r0
     362:	89 9d       	mul	r24, r9
     364:	10 0d       	add	r17, r0
     366:	98 9d       	mul	r25, r8
     368:	10 0d       	add	r17, r0
     36a:	11 24       	eor	r1, r1
     36c:	0d 5b       	subi	r16, 0xBD	; 189
     36e:	1e 4f       	sbci	r17, 0xFE	; 254

			/* Update the report item value if it is contained within the current report */
			if (!(USB_GetHIDReportItemInfo(KeyboardReport, ReportItem)))
     370:	8e 2d       	mov	r24, r14
     372:	9d 2d       	mov	r25, r13
     374:	b8 01       	movw	r22, r16
     376:	d3 d4       	rcall	.+2470   	; 0xd1e <USB_GetHIDReportItemInfo>
     378:	88 23       	and	r24, r24
     37a:	c9 f1       	breq	.+114    	; 0x3ee <KeyboardHost_Task+0x106>
     37c:	f8 01       	movw	r30, r16
			  continue;

			/* Determine what report item is being tested, process updated value as needed */
			if ((ReportItem->Attributes.Usage.Page      == USAGE_PAGE_KEYBOARD) &&
     37e:	81 85       	ldd	r24, Z+9	; 0x09
     380:	92 85       	ldd	r25, Z+10	; 0x0a
     382:	87 30       	cpi	r24, 0x07	; 7
     384:	91 05       	cpc	r25, r1
     386:	99 f5       	brne	.+102    	; 0x3ee <KeyboardHost_Task+0x106>
     388:	80 85       	ldd	r24, Z+8	; 0x08
     38a:	88 30       	cpi	r24, 0x08	; 8
     38c:	81 f5       	brne	.+96     	; 0x3ee <KeyboardHost_Task+0x106>
     38e:	86 89       	ldd	r24, Z+22	; 0x16
				(ReportItem->Attributes.BitSize         == 8)                   &&
     390:	97 89       	ldd	r25, Z+23	; 0x17
     392:	a0 8d       	ldd	r26, Z+24	; 0x18
     394:	b1 8d       	ldd	r27, Z+25	; 0x19
     396:	82 30       	cpi	r24, 0x02	; 2
     398:	91 05       	cpc	r25, r1
     39a:	a1 05       	cpc	r26, r1
     39c:	b1 05       	cpc	r27, r1
     39e:	38 f1       	brcs	.+78     	; 0x3ee <KeyboardHost_Task+0x106>
     3a0:	82 81       	ldd	r24, Z+2	; 0x02
				(ReportItem->Attributes.Logical.Maximum > 1)                    &&
     3a2:	88 23       	and	r24, r24
     3a4:	21 f5       	brne	.+72     	; 0x3ee <KeyboardHost_Task+0x106>
     3a6:	82 a1       	lds	r24, 0x42
				(ReportItem->ItemType                   == HID_REPORT_ITEM_In))
			{
				/* Key code is an unsigned char in length, cast to the appropriate type */
				uint8_t KeyCode = (uint8_t)ReportItem->Value;
     3a8:	88 23       	and	r24, r24

				/* If scan-code is non-zero, a key is being pressed */
				if (KeyCode)
     3aa:	39 f1       	breq	.+78     	; 0x3fa <KeyboardHost_Task+0x112>
     3ac:	90 e2       	ldi	r25, 0x20	; 32
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PIND  = LEDMask;
     3ae:	99 b9       	out	0x09, r25	; 9
     3b0:	98 2f       	mov	r25, r24
					LEDs_ToggleLEDs(LEDS_LED2);

					char PressedKey = 0;

					/* Convert scan-code to printable character if alphanumeric */
					if ((KeyCode >= HID_KEYBOARD_SC_A) && (KeyCode <= HID_KEYBOARD_SC_Z))
     3b2:	94 50       	subi	r25, 0x04	; 4
     3b4:	9a 31       	cpi	r25, 0x1A	; 26
     3b6:	10 f4       	brcc	.+4      	; 0x3bc <KeyboardHost_Task+0xd4>
     3b8:	83 5c       	subi	r24, 0xC3	; 195
					{
						PressedKey = (KeyCode - HID_KEYBOARD_SC_A) + 'A';
     3ba:	11 c0       	rjmp	.+34     	; 0x3de <KeyboardHost_Task+0xf6>
     3bc:	98 2f       	mov	r25, r24
					}
					else if ((KeyCode >= HID_KEYBOARD_SC_1_AND_EXCLAMATION) &
     3be:	9e 51       	subi	r25, 0x1E	; 30
     3c0:	99 30       	cpi	r25, 0x09	; 9
     3c2:	10 f4       	brcc	.+4      	; 0x3c8 <KeyboardHost_Task+0xe0>
     3c4:	8d 5e       	subi	r24, 0xED	; 237
							 (KeyCode  < HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS))
					{
						PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
     3c6:	0b c0       	rjmp	.+22     	; 0x3de <KeyboardHost_Task+0xf6>
     3c8:	87 32       	cpi	r24, 0x27	; 39
					}
					else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
     3ca:	31 f0       	breq	.+12     	; 0x3d8 <KeyboardHost_Task+0xf0>
     3cc:	8c 32       	cpi	r24, 0x2C	; 44
					{
						PressedKey = '0';
					}
					else if (KeyCode == HID_KEYBOARD_SC_SPACE)
     3ce:	31 f0       	breq	.+12     	; 0x3dc <KeyboardHost_Task+0xf4>
     3d0:	88 32       	cpi	r24, 0x28	; 40
					{
						PressedKey = ' ';
					}
					else if (KeyCode == HID_KEYBOARD_SC_ENTER)
     3d2:	99 f4       	brne	.+38     	; 0x3fa <KeyboardHost_Task+0x112>
     3d4:	8a e0       	ldi	r24, 0x0A	; 10
					{
						PressedKey = '\n';
     3d6:	03 c0       	rjmp	.+6      	; 0x3de <KeyboardHost_Task+0xf6>
     3d8:	80 e3       	ldi	r24, 0x30	; 48
					{
						PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
					}
					else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
					{
						PressedKey = '0';
     3da:	01 c0       	rjmp	.+2      	; 0x3de <KeyboardHost_Task+0xf6>
     3dc:	80 e2       	ldi	r24, 0x20	; 32
					}
					else if (KeyCode == HID_KEYBOARD_SC_SPACE)
					{
						PressedKey = ' ';
     3de:	60 91 39 05 	lds	r22, 0x0539
						PressedKey = '\n';
					}

					/* Print the pressed key character out through the serial port if valid */
					if (PressedKey)
					  putchar(PressedKey);
     3e2:	70 91 3a 05 	lds	r23, 0x053A
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <fputc>
     3ec:	06 c0       	rjmp	.+12     	; 0x3fa <KeyboardHost_Task+0x112>
     3ee:	f3 94       	inc	r15
	if (HID_Host_IsReportReceived(&Keyboard_HID_Interface))
	{
		uint8_t KeyboardReport[Keyboard_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     3f0:	80 91 42 01 	lds	r24, 0x0142
     3f4:	f8 16       	cp	r15, r24
     3f6:	08 f4       	brcc	.+2      	; 0x3fa <KeyboardHost_Task+0x112>
     3f8:	b0 cf       	rjmp	.-160    	; 0x35a <KeyboardHost_Task+0x72>
     3fa:	cd be       	out	0x3d, r12	; 61
     3fc:	be be       	out	0x3e, r11	; 62
     3fe:	0f b6       	in	r0, 0x3f	; 63
				/* Once a scan-code is found, stop scanning through the report items */
				break;
			}
		}
	}
}
     400:	f8 94       	cli
     402:	7e be       	out	0x3e, r7	; 62
     404:	0f be       	out	0x3f, r0	; 63
     406:	6d be       	out	0x3d, r6	; 61
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	1f 91       	pop	r17
     40e:	0f 91       	pop	r16
     410:	ff 90       	pop	r15
     412:	ef 90       	pop	r14
     414:	df 90       	pop	r13
     416:	cf 90       	pop	r12
     418:	bf 90       	pop	r11
     41a:	9f 90       	pop	r9
     41c:	8f 90       	pop	r8
     41e:	7f 90       	pop	r7
     420:	6f 90       	pop	r6
     422:	08 95       	ret

00000424 <main>:
     424:	32 df       	rcall	.-412    	; 0x28a <SetupHardware>
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     426:	88 e9       	ldi	r24, 0x98	; 152

	puts_P(PSTR(ESC_FG_CYAN "Keyboard Host Demo running.\r\n" ESC_FG_WHITE));
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <puts_P>
     42e:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     430:	27 df       	rcall	.-434    	; 0x280 <LEDs_SetAllLEDs>
     432:	78 94       	sei
     434:	59 df       	rcall	.-334    	; 0x2e8 <KeyboardHost_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     436:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		KeyboardHost_Task();
     43a:	fc cf       	rjmp	.-8      	; 0x434 <main+0x10>

0000043c <EVENT_USB_Host_DeviceAttached>:

		HID_Host_USBTask(&Keyboard_HID_Interface);
		USB_USBTask();
     43c:	80 ec       	ldi	r24, 0xC0	; 192
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <puts_P>
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     444:	80 ea       	ldi	r24, 0xA0	; 160
     446:	1c cf       	rjmp	.-456    	; 0x280 <LEDs_SetAllLEDs>

00000448 <EVENT_USB_Host_DeviceUnattached>:
     448:	83 ed       	ldi	r24, 0xD3	; 211
}
     44a:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     44c:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     450:	80 e1       	ldi	r24, 0x10	; 16
     452:	16 cf       	rjmp	.-468    	; 0x280 <LEDs_SetAllLEDs>

00000454 <EVENT_USB_Host_DeviceEnumerationComplete>:
     454:	cf 93       	push	r28
}
     456:	df 93       	push	r29

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
     45c:	c2 50       	subi	r28, 0x02	; 2
     45e:	d2 40       	sbci	r29, 0x02	; 2
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	f8 94       	cli
     464:	de bf       	out	0x3e, r29	; 62
     466:	0f be       	out	0x3f, r0	; 63
     468:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     46a:	80 ea       	ldi	r24, 0xA0	; 160
     46c:	09 df       	rcall	.-494    	; 0x280 <LEDs_SetAllLEDs>
     46e:	81 e0       	ldi	r24, 0x01	; 1

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     470:	be 01       	movw	r22, r28
     472:	6f 5f       	subi	r22, 0xFF	; 255
     474:	7f 4f       	sbci	r23, 0xFF	; 255
     476:	ae 01       	movw	r20, r28
     478:	4d 5f       	subi	r20, 0xFD	; 253
     47a:	5f 4f       	sbci	r21, 0xFF	; 255
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	32 e0       	ldi	r19, 0x02	; 2
     480:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <USB_Host_GetDeviceConfigDescriptor>
     484:	88 23       	and	r24, r24
     486:	19 f0       	breq	.+6      	; 0x48e <EVENT_USB_Host_DeviceEnumerationComplete+0x3a>
     488:	8a ee       	ldi	r24, 0xEA	; 234
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	15 c0       	rjmp	.+42     	; 0x4b8 <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
     48e:	69 81       	ldd	r22, Y+1	; 0x01
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Keyboard_HID_Interface,
     490:	7a 81       	ldd	r23, Y+2	; 0x02
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	ae 01       	movw	r20, r28
     498:	4d 5f       	subi	r20, 0xFD	; 253
     49a:	5f 4f       	sbci	r21, 0xFF	; 255
     49c:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <HID_Host_ConfigurePipes>
     4a0:	88 23       	and	r24, r24
     4a2:	19 f0       	breq	.+6      	; 0x4aa <EVENT_USB_Host_DeviceEnumerationComplete+0x56>
     4a4:	87 e1       	ldi	r24, 0x17	; 23
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Keyboard.\r\n"));
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	07 c0       	rjmp	.+14     	; 0x4b8 <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
     4aa:	81 e0       	ldi	r24, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     4ac:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <USB_Host_SetDeviceConfiguration>
     4b0:	88 23       	and	r24, r24
     4b2:	31 f0       	breq	.+12     	; 0x4c0 <EVENT_USB_Host_DeviceEnumerationComplete+0x6c>
     4b4:	8f e3       	ldi	r24, 0x3F	; 63
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <puts_P>
     4bc:	80 e9       	ldi	r24, 0x90	; 144
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4be:	15 c0       	rjmp	.+42     	; 0x4ea <EVENT_USB_Host_DeviceEnumerationComplete+0x96>
     4c0:	80 e0       	ldi	r24, 0x00	; 0
		return;
	}

	if (HID_Host_SetReportProtocol(&Keyboard_HID_Interface) != 0)
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <HID_Host_SetReportProtocol>
     4c8:	88 23       	and	r24, r24
     4ca:	51 f0       	breq	.+20     	; 0x4e0 <EVENT_USB_Host_DeviceEnumerationComplete+0x8c>
     4cc:	85 e6       	ldi	r24, 0x65	; 101
	{
		puts_P(PSTR("Error Setting Report Protocol Mode or Not a Valid Keyboard.\r\n"));
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <puts_P>
     4d4:	80 e9       	ldi	r24, 0x90	; 144
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4d6:	d4 de       	rcall	.-600    	; 0x280 <LEDs_SetAllLEDs>
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <USB_Host_SetDeviceConfiguration>
		USB_Host_SetDeviceConfiguration(0);
     4de:	06 c0       	rjmp	.+12     	; 0x4ec <EVENT_USB_Host_DeviceEnumerationComplete+0x98>
     4e0:	83 ea       	ldi	r24, 0xA3	; 163
		return;
     4e2:	91 e0       	ldi	r25, 0x01	; 1
	}

	puts_P(PSTR("Keyboard Enumerated.\r\n"));
     4e4:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <puts_P>
     4e8:	80 e6       	ldi	r24, 0x60	; 96
     4ea:	ca de       	rcall	.-620    	; 0x280 <LEDs_SetAllLEDs>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     4ec:	ce 5f       	subi	r28, 0xFE	; 254
     4ee:	dd 4f       	sbci	r29, 0xFD	; 253
     4f0:	0f b6       	in	r0, 0x3f	; 63
}
     4f2:	f8 94       	cli
     4f4:	de bf       	out	0x3e, r29	; 62
     4f6:	0f be       	out	0x3f, r0	; 63
     4f8:	cd bf       	out	0x3d, r28	; 61
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <EVENT_USB_Host_HostError>:
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	0f 92       	push	r0

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     50a:	89 83       	std	Y+1, r24	; 0x01
     50c:	ae d7       	rcall	.+3932   	; 0x146a <USB_Disable>
     50e:	00 d0       	rcall	.+0      	; 0x510 <EVENT_USB_Host_HostError+0x10>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     510:	00 d0       	rcall	.+0      	; 0x512 <EVENT_USB_Host_HostError+0x12>
     512:	ed b7       	in	r30, 0x3d	; 61
     514:	fe b7       	in	r31, 0x3e	; 62
     516:	31 96       	adiw	r30, 0x01	; 1
     518:	2a eb       	ldi	r18, 0xBA	; 186
     51a:	31 e0       	ldi	r19, 0x01	; 1
     51c:	ad b7       	in	r26, 0x3d	; 61
     51e:	be b7       	in	r27, 0x3e	; 62
     520:	12 96       	adiw	r26, 0x02	; 2
     522:	3c 93       	st	X, r19
     524:	2e 93       	st	-X, r18
     526:	11 97       	sbiw	r26, 0x01	; 1
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	82 83       	std	Z+2, r24	; 0x02
     52c:	13 82       	std	Z+3, r1	; 0x03
     52e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <printf_P>
     532:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	80 e9       	ldi	r24, 0x90	; 144
     53c:	a1 de       	rcall	.-702    	; 0x280 <LEDs_SetAllLEDs>
     53e:	ff cf       	rjmp	.-2      	; 0x53e <EVENT_USB_Host_HostError+0x3e>

00000540 <EVENT_USB_Host_DeviceEnumerationFailed>:
     540:	90 91 28 05 	lds	r25, 0x0528
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     544:	2d b7       	in	r18, 0x3d	; 61
     546:	3e b7       	in	r19, 0x3e	; 62
     548:	28 50       	subi	r18, 0x08	; 8
     54a:	30 40       	sbci	r19, 0x00	; 0
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	3e bf       	out	0x3e, r19	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	2d bf       	out	0x3d, r18	; 61
     556:	ed b7       	in	r30, 0x3d	; 61
     558:	fe b7       	in	r31, 0x3e	; 62
     55a:	31 96       	adiw	r30, 0x01	; 1
     55c:	29 ee       	ldi	r18, 0xE9	; 233
     55e:	31 e0       	ldi	r19, 0x01	; 1
     560:	ad b7       	in	r26, 0x3d	; 61
     562:	be b7       	in	r27, 0x3e	; 62
     564:	12 96       	adiw	r26, 0x02	; 2
     566:	3c 93       	st	X, r19
     568:	2e 93       	st	-X, r18
     56a:	11 97       	sbiw	r26, 0x01	; 1
     56c:	82 83       	std	Z+2, r24	; 0x02
     56e:	13 82       	std	Z+3, r1	; 0x03
     570:	64 83       	std	Z+4, r22	; 0x04
     572:	15 82       	std	Z+5, r1	; 0x05
     574:	96 83       	std	Z+6, r25	; 0x06
     576:	17 82       	std	Z+7, r1	; 0x07
     578:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     57c:	2d b7       	in	r18, 0x3d	; 61
     57e:	3e b7       	in	r19, 0x3e	; 62
     580:	28 5f       	subi	r18, 0xF8	; 248
     582:	3f 4f       	sbci	r19, 0xFF	; 255
     584:	0f b6       	in	r0, 0x3f	; 63
     586:	f8 94       	cli
     588:	3e bf       	out	0x3e, r19	; 62
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	2d bf       	out	0x3d, r18	; 61
     58e:	80 e9       	ldi	r24, 0x90	; 144
     590:	77 ce       	rjmp	.-786    	; 0x280 <LEDs_SetAllLEDs>

00000592 <CALLBACK_HIDParser_FilterHIDReportItem>:
     592:	41 e0       	ldi	r20, 0x01	; 1
}
     594:	fc 01       	movw	r30, r24
{
	/* Check the attributes of the current item - see if we are interested in it or not;
	 * only store KEYBOARD usage page items into the Processed HID Report structure to
	 * save RAM and ignore the rest
	 */
	return (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_KEYBOARD);
     596:	21 85       	ldd	r18, Z+9	; 0x09
     598:	32 85       	ldd	r19, Z+10	; 0x0a
     59a:	27 30       	cpi	r18, 0x07	; 7
     59c:	31 05       	cpc	r19, r1
     59e:	09 f0       	breq	.+2      	; 0x5a2 <CALLBACK_HIDParser_FilterHIDReportItem+0x10>
     5a0:	40 e0       	ldi	r20, 0x00	; 0
}
     5a2:	84 2f       	mov	r24, r20
     5a4:	08 95       	ret

000005a6 <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
     5a6:	2f 92       	push	r2
     5a8:	3f 92       	push	r3
     5aa:	4f 92       	push	r4
     5ac:	5f 92       	push	r5
     5ae:	6f 92       	push	r6
     5b0:	7f 92       	push	r7
     5b2:	8f 92       	push	r8
     5b4:	9f 92       	push	r9
     5b6:	af 92       	push	r10
     5b8:	bf 92       	push	r11
     5ba:	cf 92       	push	r12
     5bc:	df 92       	push	r13
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	cd b7       	in	r28, 0x3d	; 61
     5cc:	de b7       	in	r29, 0x3e	; 62
     5ce:	cf 58       	subi	r28, 0x8F	; 143
     5d0:	d0 40       	sbci	r29, 0x00	; 0
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	cd bf       	out	0x3d, r28	; 61
     5dc:	5c 01       	movw	r10, r24
     5de:	e7 96       	adiw	r28, 0x37	; 55
     5e0:	7f af       	sts	0x7f, r23
     5e2:	6e af       	sts	0x7e, r22
     5e4:	e7 97       	sbiw	r28, 0x37	; 55
     5e6:	ba 01       	movw	r22, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
     5e8:	40 57       	subi	r20, 0x70	; 112
     5ea:	5c 4f       	sbci	r21, 0xFC	; 252
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
     5ec:	89 ed       	ldi	r24, 0xD9	; 217
     5ee:	93 e0       	ldi	r25, 0x03	; 3
     5f0:	db 01       	movw	r26, r22
     5f2:	fc 01       	movw	r30, r24
     5f4:	1d 92       	st	X+, r1
     5f6:	31 97       	sbiw	r30, 0x01	; 1
     5f8:	e9 f7       	brne	.-6      	; 0x5f4 <USB_ProcessHIDReport+0x4e>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
     5fa:	de 01       	movw	r26, r28
     5fc:	db 96       	adiw	r26, 0x3b	; 59
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
     5fe:	8c e1       	ldi	r24, 0x1C	; 28
     600:	fd 01       	movw	r30, r26
     602:	11 92       	st	Z+, r1
     604:	8a 95       	dec	r24
     606:	e9 f7       	brne	.-6      	; 0x602 <USB_ProcessHIDReport+0x5c>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     608:	87 e0       	ldi	r24, 0x07	; 7
     60a:	fa 01       	movw	r30, r20
     60c:	11 92       	st	Z+, r1
     60e:	8a 95       	dec	r24
     610:	e9 f7       	brne	.-6      	; 0x60c <USB_ProcessHIDReport+0x66>

	ParserData->TotalDeviceReports = 1;
     612:	fb 01       	movw	r30, r22
     614:	e1 57       	subi	r30, 0x71	; 113
     616:	fc 4f       	sbci	r31, 0xFC	; 252
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	80 83       	st	Z, r24
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
     61c:	eb 96       	adiw	r28, 0x3b	; 59
     61e:	1c ae       	sts	0xbc, r17
     620:	1d ae       	sts	0xbd, r17
     622:	1e ae       	sts	0xbe, r17
     624:	1f ae       	sts	0xbf, r17
     626:	eb 97       	sbiw	r28, 0x3b	; 59
     628:	44 24       	eor	r4, r4
     62a:	55 24       	eor	r5, r5
     62c:	32 01       	movw	r6, r4
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
     62e:	30 e0       	ldi	r19, 0x00	; 0
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
     630:	88 24       	eor	r8, r8
     632:	99 24       	eor	r9, r9
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
     634:	8d 01       	movw	r16, r26

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     636:	cb 01       	movw	r24, r22
     638:	8a 52       	subi	r24, 0x2A	; 42
     63a:	9c 4f       	sbci	r25, 0xFC	; 252
     63c:	cf 57       	subi	r28, 0x7F	; 127
     63e:	df 4f       	sbci	r29, 0xFF	; 255
     640:	99 83       	std	Y+1, r25	; 0x01
     642:	88 83       	st	Y, r24
     644:	c1 58       	subi	r28, 0x81	; 129
     646:	d0 40       	sbci	r29, 0x00	; 0
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     648:	e5 96       	adiw	r28, 0x35	; 53
     64a:	bf af       	sts	0x7f, r27
     64c:	ae af       	sts	0x7e, r26
     64e:	e5 97       	sbiw	r28, 0x35	; 53

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     650:	db 01       	movw	r26, r22
     652:	a8 57       	subi	r26, 0x78	; 120
     654:	bc 4f       	sbci	r27, 0xFC	; 252
     656:	c9 57       	subi	r28, 0x79	; 121
     658:	df 4f       	sbci	r29, 0xFF	; 255
     65a:	b9 83       	std	Y+1, r27	; 0x01
     65c:	a8 83       	st	Y, r26
     65e:	c7 58       	subi	r28, 0x87	; 135
     660:	d0 40       	sbci	r29, 0x00	; 0
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     662:	f8 01       	movw	r30, r16
     664:	7c 96       	adiw	r30, 0x1c	; 28
     666:	c7 57       	subi	r28, 0x77	; 119
     668:	df 4f       	sbci	r29, 0xFF	; 255
     66a:	f9 83       	std	Y+1, r31	; 0x01
     66c:	e8 83       	st	Y, r30
     66e:	c9 58       	subi	r28, 0x89	; 137
     670:	d0 40       	sbci	r29, 0x00	; 0
     672:	cb 01       	movw	r24, r22
     674:	b5 01       	movw	r22, r10
     676:	5c 01       	movw	r10, r24
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     678:	18 c3       	rjmp	.+1584   	; 0xcaa <USB_ProcessHIDReport+0x704>
	{
		uint8_t  HIDReportItem  = *ReportData;
     67a:	db 01       	movw	r26, r22
     67c:	2c 91       	ld	r18, X
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
     67e:	e7 96       	adiw	r28, 0x37	; 55
     680:	ee ad       	sts	0x6e, r30
     682:	ff ad       	sts	0x6f, r31
     684:	e7 97       	sbiw	r28, 0x37	; 55
     686:	31 97       	sbiw	r30, 0x01	; 1
     688:	e7 96       	adiw	r28, 0x37	; 55
     68a:	ff af       	sts	0x7f, r31
     68c:	ee af       	sts	0x7e, r30
     68e:	e7 97       	sbiw	r28, 0x37	; 55

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
     690:	82 2f       	mov	r24, r18
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	ed 96       	adiw	r28, 0x3d	; 61
     696:	9f af       	sts	0x7f, r25
     698:	8e af       	sts	0x7e, r24
     69a:	ed 97       	sbiw	r28, 0x3d	; 61
     69c:	83 70       	andi	r24, 0x03	; 3
     69e:	90 70       	andi	r25, 0x00	; 0
     6a0:	82 30       	cpi	r24, 0x02	; 2
     6a2:	91 05       	cpc	r25, r1
     6a4:	09 f4       	brne	.+2      	; 0x6a8 <USB_ProcessHIDReport+0x102>
     6a6:	49 c0       	rjmp	.+146    	; 0x73a <USB_ProcessHIDReport+0x194>
     6a8:	83 30       	cpi	r24, 0x03	; 3
     6aa:	91 05       	cpc	r25, r1
     6ac:	51 f0       	breq	.+20     	; 0x6c2 <USB_ProcessHIDReport+0x11c>
     6ae:	81 30       	cpi	r24, 0x01	; 1
     6b0:	91 05       	cpc	r25, r1
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <USB_ProcessHIDReport+0x110>
     6b4:	69 c0       	rjmp	.+210    	; 0x788 <USB_ProcessHIDReport+0x1e2>
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
     6b6:	6f 5f       	subi	r22, 0xFF	; 255
     6b8:	7f 4f       	sbci	r23, 0xFF	; 255
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     6ba:	cc 24       	eor	r12, r12
     6bc:	dd 24       	eor	r13, r13
     6be:	76 01       	movw	r14, r12
     6c0:	75 c0       	rjmp	.+234    	; 0x7ac <USB_ProcessHIDReport+0x206>
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     6c2:	db 01       	movw	r26, r22
     6c4:	14 96       	adiw	r26, 0x04	; 4
     6c6:	8c 91       	ld	r24, X
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	a0 e0       	ldi	r26, 0x00	; 0
     6cc:	b0 e0       	ldi	r27, 0x00	; 0
     6ce:	f8 2e       	mov	r15, r24
     6d0:	ee 24       	eor	r14, r14
     6d2:	dd 24       	eor	r13, r13
     6d4:	cc 24       	eor	r12, r12
     6d6:	fb 01       	movw	r30, r22
     6d8:	83 81       	ldd	r24, Z+3	; 0x03
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	a0 e0       	ldi	r26, 0x00	; 0
     6de:	b0 e0       	ldi	r27, 0x00	; 0
     6e0:	dc 01       	movw	r26, r24
     6e2:	99 27       	eor	r25, r25
     6e4:	88 27       	eor	r24, r24
     6e6:	c8 2a       	or	r12, r24
     6e8:	d9 2a       	or	r13, r25
     6ea:	ea 2a       	or	r14, r26
     6ec:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     6ee:	81 81       	ldd	r24, Z+1	; 0x01
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	a0 e0       	ldi	r26, 0x00	; 0
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     6f6:	c8 2a       	or	r12, r24
     6f8:	d9 2a       	or	r13, r25
     6fa:	ea 2a       	or	r14, r26
     6fc:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     6fe:	f2 81       	ldd	r31, Z+2	; 0x02
     700:	ef 96       	adiw	r28, 0x3f	; 63
     702:	ff af       	sts	0x7f, r31
     704:	ef 97       	sbiw	r28, 0x3f	; 63
     706:	ee 96       	adiw	r28, 0x3e	; 62
     708:	1f ae       	sts	0xbf, r17
     70a:	ee 97       	sbiw	r28, 0x3e	; 62
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     70c:	ef 96       	adiw	r28, 0x3f	; 63
     70e:	ee ad       	sts	0x6e, r30
     710:	ff ad       	sts	0x6f, r31
     712:	ef 97       	sbiw	r28, 0x3f	; 63
     714:	cf 01       	movw	r24, r30
     716:	a0 e0       	ldi	r26, 0x00	; 0
     718:	b0 e0       	ldi	r27, 0x00	; 0
     71a:	c8 2a       	or	r12, r24
     71c:	d9 2a       	or	r13, r25
     71e:	ea 2a       	or	r14, r26
     720:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     722:	e7 96       	adiw	r28, 0x37	; 55
     724:	8e ad       	sts	0x6e, r24
     726:	9f ad       	sts	0x6f, r25
     728:	e7 97       	sbiw	r28, 0x37	; 55
     72a:	04 97       	sbiw	r24, 0x04	; 4
     72c:	e7 96       	adiw	r28, 0x37	; 55
     72e:	9f af       	sts	0x7f, r25
     730:	8e af       	sts	0x7e, r24
     732:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 4;
     734:	6b 5f       	subi	r22, 0xFB	; 251
     736:	7f 4f       	sbci	r23, 0xFF	; 255
				break;
     738:	39 c0       	rjmp	.+114    	; 0x7ac <USB_ProcessHIDReport+0x206>

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     73a:	db 01       	movw	r26, r22
     73c:	12 96       	adiw	r26, 0x02	; 2
     73e:	bc 91       	ld	r27, X
     740:	c0 58       	subi	r28, 0x80	; 128
     742:	df 4f       	sbci	r29, 0xFF	; 255
     744:	b8 83       	st	Y, r27
     746:	c0 58       	subi	r28, 0x80	; 128
     748:	d0 40       	sbci	r29, 0x00	; 0
     74a:	c1 58       	subi	r28, 0x81	; 129
     74c:	df 4f       	sbci	r29, 0xFF	; 255
     74e:	18 82       	st	Y, r1
     750:	cf 57       	subi	r28, 0x7F	; 127
     752:	d0 40       	sbci	r29, 0x00	; 0
     754:	fb 01       	movw	r30, r22
     756:	81 81       	ldd	r24, Z+1	; 0x01
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	c1 58       	subi	r28, 0x81	; 129
     75c:	df 4f       	sbci	r29, 0xFF	; 255
     75e:	a8 81       	ld	r26, Y
     760:	b9 81       	ldd	r27, Y+1	; 0x01
     762:	cf 57       	subi	r28, 0x7F	; 127
     764:	d0 40       	sbci	r29, 0x00	; 0
     766:	8a 2b       	or	r24, r26
     768:	9b 2b       	or	r25, r27
     76a:	6c 01       	movw	r12, r24
     76c:	ee 24       	eor	r14, r14
     76e:	ff 24       	eor	r15, r15
				ReportSize     -= 2;
     770:	e7 96       	adiw	r28, 0x37	; 55
     772:	ee ad       	sts	0x6e, r30
     774:	ff ad       	sts	0x6f, r31
     776:	e7 97       	sbiw	r28, 0x37	; 55
     778:	32 97       	sbiw	r30, 0x02	; 2
     77a:	e7 96       	adiw	r28, 0x37	; 55
     77c:	ff af       	sts	0x7f, r31
     77e:	ee af       	sts	0x7e, r30
     780:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 2;
     782:	6d 5f       	subi	r22, 0xFD	; 253
     784:	7f 4f       	sbci	r23, 0xFF	; 255
				break;
     786:	12 c0       	rjmp	.+36     	; 0x7ac <USB_ProcessHIDReport+0x206>

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     788:	db 01       	movw	r26, r22
     78a:	11 96       	adiw	r26, 0x01	; 1
     78c:	cc 90       	ld	r12, X
     78e:	11 97       	sbiw	r26, 0x01	; 1
     790:	dd 24       	eor	r13, r13
     792:	ee 24       	eor	r14, r14
     794:	ff 24       	eor	r15, r15
				ReportSize     -= 1;
     796:	e7 96       	adiw	r28, 0x37	; 55
     798:	ee ad       	sts	0x6e, r30
     79a:	ff ad       	sts	0x6f, r31
     79c:	e7 97       	sbiw	r28, 0x37	; 55
     79e:	31 97       	sbiw	r30, 0x01	; 1
     7a0:	e7 96       	adiw	r28, 0x37	; 55
     7a2:	ff af       	sts	0x7f, r31
     7a4:	ee af       	sts	0x7e, r30
     7a6:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 1;
     7a8:	6e 5f       	subi	r22, 0xFE	; 254
     7aa:	7f 4f       	sbci	r23, 0xFF	; 255
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     7ac:	ed 96       	adiw	r28, 0x3d	; 61
     7ae:	8e ad       	sts	0x6e, r24
     7b0:	9f ad       	sts	0x6f, r25
     7b2:	ed 97       	sbiw	r28, 0x3d	; 61
     7b4:	8c 7f       	andi	r24, 0xFC	; 252
     7b6:	90 70       	andi	r25, 0x00	; 0
     7b8:	84 36       	cpi	r24, 0x64	; 100
     7ba:	91 05       	cpc	r25, r1
     7bc:	09 f4       	brne	.+2      	; 0x7c0 <USB_ProcessHIDReport+0x21a>
     7be:	b0 c0       	rjmp	.+352    	; 0x920 <USB_ProcessHIDReport+0x37a>
     7c0:	85 36       	cpi	r24, 0x65	; 101
     7c2:	91 05       	cpc	r25, r1
     7c4:	8c f5       	brge	.+98     	; 0x828 <USB_ProcessHIDReport+0x282>
     7c6:	84 32       	cpi	r24, 0x24	; 36
     7c8:	91 05       	cpc	r25, r1
     7ca:	09 f4       	brne	.+2      	; 0x7ce <USB_ProcessHIDReport+0x228>
     7cc:	90 c0       	rjmp	.+288    	; 0x8ee <USB_ProcessHIDReport+0x348>
     7ce:	85 32       	cpi	r24, 0x25	; 37
     7d0:	91 05       	cpc	r25, r1
     7d2:	ac f4       	brge	.+42     	; 0x7fe <USB_ProcessHIDReport+0x258>
     7d4:	88 30       	cpi	r24, 0x08	; 8
     7d6:	91 05       	cpc	r25, r1
     7d8:	09 f4       	brne	.+2      	; 0x7dc <USB_ProcessHIDReport+0x236>
     7da:	fb c0       	rjmp	.+502    	; 0x9d2 <USB_ProcessHIDReport+0x42c>
     7dc:	89 30       	cpi	r24, 0x09	; 9
     7de:	91 05       	cpc	r25, r1
     7e0:	2c f4       	brge	.+10     	; 0x7ec <USB_ProcessHIDReport+0x246>
     7e2:	84 30       	cpi	r24, 0x04	; 4
     7e4:	91 05       	cpc	r25, r1
     7e6:	09 f0       	breq	.+2      	; 0x7ea <USB_ProcessHIDReport+0x244>
     7e8:	4e c2       	rjmp	.+1180   	; 0xc86 <USB_ProcessHIDReport+0x6e0>
     7ea:	75 c0       	rjmp	.+234    	; 0x8d6 <USB_ProcessHIDReport+0x330>
     7ec:	84 31       	cpi	r24, 0x14	; 20
     7ee:	91 05       	cpc	r25, r1
     7f0:	09 f4       	brne	.+2      	; 0x7f4 <USB_ProcessHIDReport+0x24e>
     7f2:	75 c0       	rjmp	.+234    	; 0x8de <USB_ProcessHIDReport+0x338>
     7f4:	88 31       	cpi	r24, 0x18	; 24
     7f6:	91 05       	cpc	r25, r1
     7f8:	09 f0       	breq	.+2      	; 0x7fc <USB_ProcessHIDReport+0x256>
     7fa:	45 c2       	rjmp	.+1162   	; 0xc86 <USB_ProcessHIDReport+0x6e0>
     7fc:	42 c2       	rjmp	.+1156   	; 0xc82 <USB_ProcessHIDReport+0x6dc>
     7fe:	84 33       	cpi	r24, 0x34	; 52
     800:	91 05       	cpc	r25, r1
     802:	09 f4       	brne	.+2      	; 0x806 <USB_ProcessHIDReport+0x260>
     804:	7a c0       	rjmp	.+244    	; 0x8fa <USB_ProcessHIDReport+0x354>
     806:	85 33       	cpi	r24, 0x35	; 53
     808:	91 05       	cpc	r25, r1
     80a:	2c f4       	brge	.+10     	; 0x816 <USB_ProcessHIDReport+0x270>
     80c:	88 32       	cpi	r24, 0x28	; 40
     80e:	91 05       	cpc	r25, r1
     810:	09 f0       	breq	.+2      	; 0x814 <USB_ProcessHIDReport+0x26e>
     812:	39 c2       	rjmp	.+1138   	; 0xc86 <USB_ProcessHIDReport+0x6e0>
     814:	ef c0       	rjmp	.+478    	; 0x9f4 <USB_ProcessHIDReport+0x44e>
     816:	84 34       	cpi	r24, 0x44	; 68
     818:	91 05       	cpc	r25, r1
     81a:	09 f4       	brne	.+2      	; 0x81e <USB_ProcessHIDReport+0x278>
     81c:	76 c0       	rjmp	.+236    	; 0x90a <USB_ProcessHIDReport+0x364>
     81e:	84 35       	cpi	r24, 0x54	; 84
     820:	91 05       	cpc	r25, r1
     822:	09 f0       	breq	.+2      	; 0x826 <USB_ProcessHIDReport+0x280>
     824:	30 c2       	rjmp	.+1120   	; 0xc86 <USB_ProcessHIDReport+0x6e0>
     826:	77 c0       	rjmp	.+238    	; 0x916 <USB_ProcessHIDReport+0x370>
     828:	84 39       	cpi	r24, 0x94	; 148
     82a:	91 05       	cpc	r25, r1
     82c:	09 f4       	brne	.+2      	; 0x830 <USB_ProcessHIDReport+0x28a>
     82e:	81 c0       	rjmp	.+258    	; 0x932 <USB_ProcessHIDReport+0x38c>
     830:	85 39       	cpi	r24, 0x95	; 149
     832:	91 05       	cpc	r25, r1
     834:	ac f4       	brge	.+42     	; 0x860 <USB_ProcessHIDReport+0x2ba>
     836:	80 38       	cpi	r24, 0x80	; 128
     838:	91 05       	cpc	r25, r1
     83a:	09 f4       	brne	.+2      	; 0x83e <USB_ProcessHIDReport+0x298>
     83c:	f8 c1       	rjmp	.+1008   	; 0xc2e <USB_ProcessHIDReport+0x688>
     83e:	81 38       	cpi	r24, 0x81	; 129
     840:	91 05       	cpc	r25, r1
     842:	2c f4       	brge	.+10     	; 0x84e <USB_ProcessHIDReport+0x2a8>
     844:	84 37       	cpi	r24, 0x74	; 116
     846:	91 05       	cpc	r25, r1
     848:	09 f0       	breq	.+2      	; 0x84c <USB_ProcessHIDReport+0x2a6>
     84a:	1d c2       	rjmp	.+1082   	; 0xc86 <USB_ProcessHIDReport+0x6e0>
     84c:	6f c0       	rjmp	.+222    	; 0x92c <USB_ProcessHIDReport+0x386>
     84e:	84 38       	cpi	r24, 0x84	; 132
     850:	91 05       	cpc	r25, r1
     852:	09 f4       	brne	.+2      	; 0x856 <USB_ProcessHIDReport+0x2b0>
     854:	71 c0       	rjmp	.+226    	; 0x938 <USB_ProcessHIDReport+0x392>
     856:	80 39       	cpi	r24, 0x90	; 144
     858:	91 05       	cpc	r25, r1
     85a:	09 f0       	breq	.+2      	; 0x85e <USB_ProcessHIDReport+0x2b8>
     85c:	14 c2       	rjmp	.+1064   	; 0xc86 <USB_ProcessHIDReport+0x6e0>
     85e:	e7 c1       	rjmp	.+974    	; 0xc2e <USB_ProcessHIDReport+0x688>
     860:	80 3b       	cpi	r24, 0xB0	; 176
     862:	91 05       	cpc	r25, r1
     864:	09 f4       	brne	.+2      	; 0x868 <USB_ProcessHIDReport+0x2c2>
     866:	e3 c1       	rjmp	.+966    	; 0xc2e <USB_ProcessHIDReport+0x688>
     868:	81 3b       	cpi	r24, 0xB1	; 177
     86a:	91 05       	cpc	r25, r1
     86c:	4c f4       	brge	.+18     	; 0x880 <USB_ProcessHIDReport+0x2da>
     86e:	80 3a       	cpi	r24, 0xA0	; 160
     870:	91 05       	cpc	r25, r1
     872:	09 f4       	brne	.+2      	; 0x876 <USB_ProcessHIDReport+0x2d0>
     874:	c6 c0       	rjmp	.+396    	; 0xa02 <USB_ProcessHIDReport+0x45c>
     876:	84 3a       	cpi	r24, 0xA4	; 164
     878:	91 05       	cpc	r25, r1
     87a:	09 f0       	breq	.+2      	; 0x87e <USB_ProcessHIDReport+0x2d8>
     87c:	04 c2       	rjmp	.+1032   	; 0xc86 <USB_ProcessHIDReport+0x6e0>
     87e:	08 c0       	rjmp	.+16     	; 0x890 <USB_ProcessHIDReport+0x2ea>
     880:	84 3b       	cpi	r24, 0xB4	; 180
     882:	91 05       	cpc	r25, r1
     884:	e9 f0       	breq	.+58     	; 0x8c0 <USB_ProcessHIDReport+0x31a>
     886:	80 3c       	cpi	r24, 0xC0	; 192
     888:	91 05       	cpc	r25, r1
     88a:	09 f0       	breq	.+2      	; 0x88e <USB_ProcessHIDReport+0x2e8>
     88c:	fc c1       	rjmp	.+1016   	; 0xc86 <USB_ProcessHIDReport+0x6e0>
     88e:	08 c1       	rjmp	.+528    	; 0xaa0 <USB_ProcessHIDReport+0x4fa>
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     890:	c7 57       	subi	r28, 0x77	; 119
     892:	df 4f       	sbci	r29, 0xFF	; 255
     894:	88 81       	ld	r24, Y
     896:	99 81       	ldd	r25, Y+1	; 0x01
     898:	c9 58       	subi	r28, 0x89	; 137
     89a:	d0 40       	sbci	r29, 0x00	; 0
     89c:	08 17       	cp	r16, r24
     89e:	19 07       	cpc	r17, r25
     8a0:	09 f4       	brne	.+2      	; 0x8a4 <USB_ProcessHIDReport+0x2fe>
     8a2:	10 c2       	rjmp	.+1056   	; 0xcc4 <USB_ProcessHIDReport+0x71e>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     8a4:	ec e1       	ldi	r30, 0x1C	; 28
     8a6:	ce 2e       	mov	r12, r30
     8a8:	d1 2c       	mov	r13, r1
     8aa:	c0 0e       	add	r12, r16
     8ac:	d1 1e       	adc	r13, r17
     8ae:	d6 01       	movw	r26, r12
     8b0:	f8 01       	movw	r30, r16
     8b2:	8a e2       	ldi	r24, 0x2A	; 42
     8b4:	01 90       	ld	r0, Z+
     8b6:	0d 92       	st	X+, r0
     8b8:	81 50       	subi	r24, 0x01	; 1
     8ba:	e1 f7       	brne	.-8      	; 0x8b4 <USB_ProcessHIDReport+0x30e>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     8bc:	86 01       	movw	r16, r12
				break;
     8be:	e3 c1       	rjmp	.+966    	; 0xc86 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     8c0:	e5 96       	adiw	r28, 0x35	; 53
     8c2:	ae ad       	sts	0x6e, r26
     8c4:	bf ad       	sts	0x6f, r27
     8c6:	e5 97       	sbiw	r28, 0x35	; 53
     8c8:	0a 17       	cp	r16, r26
     8ca:	1b 07       	cpc	r17, r27
     8cc:	09 f4       	brne	.+2      	; 0x8d0 <USB_ProcessHIDReport+0x32a>
     8ce:	fc c1       	rjmp	.+1016   	; 0xcc8 <USB_ProcessHIDReport+0x722>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     8d0:	0c 51       	subi	r16, 0x1C	; 28
     8d2:	10 40       	sbci	r17, 0x00	; 0
				break;
     8d4:	d8 c1       	rjmp	.+944    	; 0xc86 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     8d6:	f8 01       	movw	r30, r16
     8d8:	d2 82       	std	Z+2, r13	; 0x02
     8da:	c1 82       	std	Z+1, r12	; 0x01
				break;
     8dc:	d4 c1       	rjmp	.+936    	; 0xc86 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     8de:	d8 01       	movw	r26, r16
     8e0:	1a 96       	adiw	r26, 0x0a	; 10
     8e2:	cd 92       	st	X+, r12
     8e4:	dd 92       	st	X+, r13
     8e6:	ed 92       	st	X+, r14
     8e8:	fc 92       	st	X, r15
     8ea:	1d 97       	sbiw	r26, 0x0d	; 13
				break;
     8ec:	cc c1       	rjmp	.+920    	; 0xc86 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     8ee:	f8 01       	movw	r30, r16
     8f0:	c6 86       	std	Z+14, r12	; 0x0e
     8f2:	d7 86       	std	Z+15, r13	; 0x0f
     8f4:	e0 8a       	std	Z+16, r14	; 0x10
     8f6:	f1 8a       	std	Z+17, r15	; 0x11
				break;
     8f8:	c6 c1       	rjmp	.+908    	; 0xc86 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     8fa:	d8 01       	movw	r26, r16
     8fc:	52 96       	adiw	r26, 0x12	; 18
     8fe:	cd 92       	st	X+, r12
     900:	dd 92       	st	X+, r13
     902:	ed 92       	st	X+, r14
     904:	fc 92       	st	X, r15
     906:	55 97       	sbiw	r26, 0x15	; 21
				break;
     908:	be c1       	rjmp	.+892    	; 0xc86 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     90a:	f8 01       	movw	r30, r16
     90c:	c6 8a       	std	Z+22, r12	; 0x16
     90e:	d7 8a       	std	Z+23, r13	; 0x17
     910:	e0 8e       	std	Z+24, r14	; 0x18
     912:	f1 8e       	std	Z+25, r15	; 0x19
				break;
     914:	b8 c1       	rjmp	.+880    	; 0xc86 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     916:	d8 01       	movw	r26, r16
     918:	19 96       	adiw	r26, 0x09	; 9
     91a:	cc 92       	st	X, r12
     91c:	19 97       	sbiw	r26, 0x09	; 9
				break;
     91e:	b3 c1       	rjmp	.+870    	; 0xc86 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     920:	f8 01       	movw	r30, r16
     922:	c5 82       	std	Z+5, r12	; 0x05
     924:	d6 82       	std	Z+6, r13	; 0x06
     926:	e7 82       	std	Z+7, r14	; 0x07
     928:	f0 86       	std	Z+8, r15	; 0x08
				break;
     92a:	ad c1       	rjmp	.+858    	; 0xc86 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     92c:	d8 01       	movw	r26, r16
     92e:	cc 92       	st	X, r12
				break;
     930:	aa c1       	rjmp	.+852    	; 0xc86 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     932:	f8 01       	movw	r30, r16
     934:	c2 8e       	std	Z+26, r12	; 0x1a
				break;
     936:	a7 c1       	rjmp	.+846    	; 0xc86 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     938:	ac 2d       	mov	r26, r12
     93a:	f8 01       	movw	r30, r16
     93c:	c3 8e       	std	Z+27, r12	; 0x1b

				if (ParserData->UsingReportIDs)
     93e:	f5 01       	movw	r30, r10
     940:	e8 52       	subi	r30, 0x28	; 40
     942:	fc 4f       	sbci	r31, 0xFC	; 252
     944:	80 81       	ld	r24, Z
     946:	88 23       	and	r24, r24
     948:	d1 f1       	breq	.+116    	; 0x9be <USB_ProcessHIDReport+0x418>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     94a:	f5 01       	movw	r30, r10
     94c:	e1 57       	subi	r30, 0x71	; 113
     94e:	fc 4f       	sbci	r31, 0xFC	; 252
     950:	90 81       	ld	r25, Z
     952:	a5 01       	movw	r20, r10
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	18 c0       	rjmp	.+48     	; 0x988 <USB_ProcessHIDReport+0x3e2>
     958:	49 5f       	subi	r20, 0xF9	; 249
     95a:	5f 4f       	sbci	r21, 0xFF	; 255

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     95c:	fa 01       	movw	r30, r20
     95e:	e7 57       	subi	r30, 0x77	; 119
     960:	fc 4f       	sbci	r31, 0xFC	; 252
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     962:	80 81       	ld	r24, Z
     964:	8a 17       	cp	r24, r26
     966:	79 f4       	brne	.+30     	; 0x986 <USB_ProcessHIDReport+0x3e0>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     968:	82 2f       	mov	r24, r18
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	ac 01       	movw	r20, r24
     96e:	23 e0       	ldi	r18, 0x03	; 3
     970:	44 0f       	add	r20, r20
     972:	55 1f       	adc	r21, r21
     974:	2a 95       	dec	r18
     976:	e1 f7       	brne	.-8      	; 0x970 <USB_ProcessHIDReport+0x3ca>
     978:	48 1b       	sub	r20, r24
     97a:	59 0b       	sbc	r21, r25
     97c:	40 57       	subi	r20, 0x70	; 112
     97e:	5c 4f       	sbci	r21, 0xFC	; 252
     980:	4a 0d       	add	r20, r10
     982:	5b 1d       	adc	r21, r11
     984:	1c c0       	rjmp	.+56     	; 0x9be <USB_ProcessHIDReport+0x418>

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     986:	2f 5f       	subi	r18, 0xFF	; 255
     988:	29 17       	cp	r18, r25
     98a:	31 f7       	brne	.-52     	; 0x958 <USB_ProcessHIDReport+0x3b2>
     98c:	c4 c1       	rjmp	.+904    	; 0xd16 <USB_ProcessHIDReport+0x770>
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     98e:	82 2f       	mov	r24, r18
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	ac 01       	movw	r20, r24
     994:	b3 e0       	ldi	r27, 0x03	; 3
     996:	44 0f       	add	r20, r20
     998:	55 1f       	adc	r21, r21
     99a:	ba 95       	dec	r27
     99c:	e1 f7       	brne	.-8      	; 0x996 <USB_ProcessHIDReport+0x3f0>
     99e:	48 1b       	sub	r20, r24
     9a0:	59 0b       	sbc	r21, r25
     9a2:	40 57       	subi	r20, 0x70	; 112
     9a4:	5c 4f       	sbci	r21, 0xFC	; 252
     9a6:	4a 0d       	add	r20, r10
     9a8:	5b 1d       	adc	r21, r11
     9aa:	f5 01       	movw	r30, r10
     9ac:	e1 57       	subi	r30, 0x71	; 113
     9ae:	fc 4f       	sbci	r31, 0xFC	; 252
     9b0:	2f 5f       	subi	r18, 0xFF	; 255
     9b2:	20 83       	st	Z, r18
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     9b4:	87 e0       	ldi	r24, 0x07	; 7
     9b6:	da 01       	movw	r26, r20
     9b8:	1d 92       	st	X+, r1
     9ba:	8a 95       	dec	r24
     9bc:	e9 f7       	brne	.-6      	; 0x9b8 <USB_ProcessHIDReport+0x412>
					}
				}

				ParserData->UsingReportIDs = true;
     9be:	f5 01       	movw	r30, r10
     9c0:	e8 52       	subi	r30, 0x28	; 40
     9c2:	fc 4f       	sbci	r31, 0xFC	; 252
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	80 83       	st	Z, r24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     9c8:	f8 01       	movw	r30, r16
     9ca:	83 8d       	ldd	r24, Z+27	; 0x1b
     9cc:	da 01       	movw	r26, r20
     9ce:	8c 93       	st	X, r24
				break;
     9d0:	5a c1       	rjmp	.+692    	; 0xc86 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     9d2:	38 30       	cpi	r19, 0x08	; 8
     9d4:	09 f4       	brne	.+2      	; 0x9d8 <USB_ProcessHIDReport+0x432>
     9d6:	7a c1       	rjmp	.+756    	; 0xccc <USB_ProcessHIDReport+0x726>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     9d8:	e3 2f       	mov	r30, r19
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	ee 0f       	add	r30, r30
     9de:	ff 1f       	adc	r31, r31
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	8c 0f       	add	r24, r28
     9e6:	9d 1f       	adc	r25, r29
     9e8:	e8 0f       	add	r30, r24
     9ea:	f9 1f       	adc	r31, r25
     9ec:	d1 82       	std	Z+1, r13	; 0x01
     9ee:	c0 82       	st	Z, r12
     9f0:	3f 5f       	subi	r19, 0xFF	; 255
				break;
     9f2:	49 c1       	rjmp	.+658    	; 0xc86 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     9f4:	eb 96       	adiw	r28, 0x3b	; 59
     9f6:	cc ae       	sts	0xbc, r28
     9f8:	dd ae       	sts	0xbd, r29
     9fa:	ee ae       	sts	0xbe, r30
     9fc:	ff ae       	sts	0xbf, r31
     9fe:	eb 97       	sbiw	r28, 0x3b	; 59
     a00:	42 c1       	rjmp	.+644    	; 0xc86 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     a02:	81 14       	cp	r8, r1
     a04:	91 04       	cpc	r9, r1
     a06:	39 f4       	brne	.+14     	; 0xa16 <USB_ProcessHIDReport+0x470>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     a08:	e9 e4       	ldi	r30, 0x49	; 73
     a0a:	8e 2e       	mov	r8, r30
     a0c:	e3 e0       	ldi	r30, 0x03	; 3
     a0e:	9e 2e       	mov	r9, r30
     a10:	8a 0c       	add	r8, r10
     a12:	9b 1c       	adc	r9, r11
     a14:	16 c0       	rjmp	.+44     	; 0xa42 <USB_ProcessHIDReport+0x49c>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     a16:	f5 01       	movw	r30, r10
     a18:	e0 5b       	subi	r30, 0xB0	; 176
     a1a:	fc 4f       	sbci	r31, 0xFC	; 252

					while (CurrCollectionPath->Parent != NULL)
     a1c:	0b c0       	rjmp	.+22     	; 0xa34 <USB_ProcessHIDReport+0x48e>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     a1e:	c9 57       	subi	r28, 0x79	; 121
     a20:	df 4f       	sbci	r29, 0xFF	; 255
     a22:	a8 81       	ld	r26, Y
     a24:	b9 81       	ldd	r27, Y+1	; 0x01
     a26:	c7 58       	subi	r28, 0x87	; 135
     a28:	d0 40       	sbci	r29, 0x00	; 0
     a2a:	ea 17       	cp	r30, r26
     a2c:	fb 07       	cpc	r31, r27
     a2e:	09 f4       	brne	.+2      	; 0xa32 <USB_ProcessHIDReport+0x48c>
     a30:	4f c1       	rjmp	.+670    	; 0xcd0 <USB_ProcessHIDReport+0x72a>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     a32:	37 96       	adiw	r30, 0x07	; 7
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     a34:	85 81       	ldd	r24, Z+5	; 0x05
     a36:	96 81       	ldd	r25, Z+6	; 0x06
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	89 f7       	brne	.-30     	; 0xa1e <USB_ProcessHIDReport+0x478>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     a3c:	96 82       	std	Z+6, r9	; 0x06
     a3e:	85 82       	std	Z+5, r8	; 0x05
     a40:	4f 01       	movw	r8, r30
				}

				CurrCollectionPath->Type       = ReportItemData;
     a42:	f4 01       	movw	r30, r8
     a44:	c0 82       	st	Z, r12
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     a46:	d8 01       	movw	r26, r16
     a48:	11 96       	adiw	r26, 0x01	; 1
     a4a:	8d 91       	ld	r24, X+
     a4c:	9c 91       	ld	r25, X
     a4e:	12 97       	sbiw	r26, 0x02	; 2
     a50:	92 83       	std	Z+2, r25	; 0x02
     a52:	81 83       	std	Z+1, r24	; 0x01

				if (UsageListSize)
     a54:	33 23       	and	r19, r19
     a56:	81 f0       	breq	.+32     	; 0xa78 <USB_ProcessHIDReport+0x4d2>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     a58:	89 81       	ldd	r24, Y+1	; 0x01
     a5a:	9a 81       	ldd	r25, Y+2	; 0x02
     a5c:	94 83       	std	Z+4, r25	; 0x04
     a5e:	83 83       	std	Z+3, r24	; 0x03
     a60:	fe 01       	movw	r30, r28
     a62:	31 96       	adiw	r30, 0x01	; 1

					for (uint8_t i = 0; i < UsageListSize; i++)
     a64:	80 e0       	ldi	r24, 0x00	; 0
					  UsageList[i] = UsageList[i + 1];
     a66:	a2 81       	ldd	r26, Z+2	; 0x02
     a68:	b3 81       	ldd	r27, Z+3	; 0x03
     a6a:	a1 93       	st	Z+, r26
     a6c:	b1 93       	st	Z+, r27

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     a6e:	8f 5f       	subi	r24, 0xFF	; 255
     a70:	83 17       	cp	r24, r19
     a72:	c9 f7       	brne	.-14     	; 0xa66 <USB_ProcessHIDReport+0x4c0>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     a74:	31 50       	subi	r19, 0x01	; 1
     a76:	07 c1       	rjmp	.+526    	; 0xc86 <USB_ProcessHIDReport+0x6e0>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     a78:	eb 96       	adiw	r28, 0x3b	; 59
     a7a:	8c ad       	sts	0x6c, r24
     a7c:	9d ad       	sts	0x6d, r25
     a7e:	ae ad       	sts	0x6e, r26
     a80:	bf ad       	sts	0x6f, r27
     a82:	eb 97       	sbiw	r28, 0x3b	; 59
     a84:	84 15       	cp	r24, r4
     a86:	95 05       	cpc	r25, r5
     a88:	a6 05       	cpc	r26, r6
     a8a:	b7 05       	cpc	r27, r7
     a8c:	08 f4       	brcc	.+2      	; 0xa90 <USB_ProcessHIDReport+0x4ea>
     a8e:	fb c0       	rjmp	.+502    	; 0xc86 <USB_ProcessHIDReport+0x6e0>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     a90:	54 82       	std	Z+4, r5	; 0x04
     a92:	43 82       	std	Z+3, r4	; 0x03
     a94:	08 94       	sec
     a96:	41 1c       	adc	r4, r1
     a98:	51 1c       	adc	r5, r1
     a9a:	61 1c       	adc	r6, r1
     a9c:	71 1c       	adc	r7, r1
     a9e:	f3 c0       	rjmp	.+486    	; 0xc86 <USB_ProcessHIDReport+0x6e0>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     aa0:	81 14       	cp	r8, r1
     aa2:	91 04       	cpc	r9, r1
     aa4:	09 f4       	brne	.+2      	; 0xaa8 <USB_ProcessHIDReport+0x502>
     aa6:	16 c1       	rjmp	.+556    	; 0xcd4 <USB_ProcessHIDReport+0x72e>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     aa8:	f4 01       	movw	r30, r8
     aaa:	85 80       	ldd	r8, Z+5	; 0x05
     aac:	96 80       	ldd	r9, Z+6	; 0x06
				break;
     aae:	eb c0       	rjmp	.+470    	; 0xc86 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     ab0:	fe 01       	movw	r30, r28
     ab2:	79 96       	adiw	r30, 0x19	; 25
     ab4:	d8 01       	movw	r26, r16
     ab6:	8a e1       	ldi	r24, 0x1A	; 26
     ab8:	0d 90       	ld	r0, X+
     aba:	01 92       	st	Z+, r0
     abc:	81 50       	subi	r24, 0x01	; 1
     abe:	e1 f7       	brne	.-8      	; 0xab8 <USB_ProcessHIDReport+0x512>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     ac0:	dd 8a       	std	Y+21, r13	; 0x15
     ac2:	cc 8a       	std	Y+20, r12	; 0x14
					NewReportItem.CollectionPath = CurrCollectionPath;
     ac4:	78 8f       	std	Y+24, r23	; 0x18
     ac6:	6f 8b       	std	Y+23, r22	; 0x17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     ac8:	d8 01       	movw	r26, r16
     aca:	5b 96       	adiw	r26, 0x1b	; 27
     acc:	8c 91       	ld	r24, X
     ace:	5b 97       	sbiw	r26, 0x1b	; 27
     ad0:	8e 8b       	std	Y+22, r24	; 0x16

					if (UsageListSize)
     ad2:	33 23       	and	r19, r19
     ad4:	81 f0       	breq	.+32     	; 0xaf6 <USB_ProcessHIDReport+0x550>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
     ad8:	9a 81       	ldd	r25, Y+2	; 0x02
     ada:	9d 8f       	std	Y+29, r25	; 0x1d
     adc:	8c 8f       	std	Y+28, r24	; 0x1c
     ade:	fe 01       	movw	r30, r28
     ae0:	31 96       	adiw	r30, 0x01	; 1

						for (uint8_t i = 0; i < UsageListSize; i++)
     ae2:	80 e0       	ldi	r24, 0x00	; 0
						  UsageList[i] = UsageList[i + 1];
     ae4:	42 81       	ldd	r20, Z+2	; 0x02
     ae6:	53 81       	ldd	r21, Z+3	; 0x03
     ae8:	41 93       	st	Z+, r20
     aea:	51 93       	st	Z+, r21

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     aec:	8f 5f       	subi	r24, 0xFF	; 255
     aee:	83 17       	cp	r24, r19
     af0:	c9 f7       	brne	.-14     	; 0xae4 <USB_ProcessHIDReport+0x53e>
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     af2:	31 50       	subi	r19, 0x01	; 1
     af4:	12 c0       	rjmp	.+36     	; 0xb1a <USB_ProcessHIDReport+0x574>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     af6:	eb 96       	adiw	r28, 0x3b	; 59
     af8:	8c ad       	sts	0x6c, r24
     afa:	9d ad       	sts	0x6d, r25
     afc:	ae ad       	sts	0x6e, r26
     afe:	bf ad       	sts	0x6f, r27
     b00:	eb 97       	sbiw	r28, 0x3b	; 59
     b02:	84 15       	cp	r24, r4
     b04:	95 05       	cpc	r25, r5
     b06:	a6 05       	cpc	r26, r6
     b08:	b7 05       	cpc	r27, r7
     b0a:	38 f0       	brcs	.+14     	; 0xb1a <USB_ProcessHIDReport+0x574>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     b0c:	5d 8e       	std	Y+29, r5	; 0x1d
     b0e:	4c 8e       	std	Y+28, r4	; 0x1c
     b10:	08 94       	sec
     b12:	41 1c       	adc	r4, r1
     b14:	51 1c       	adc	r5, r1
     b16:	61 1c       	adc	r6, r1
     b18:	71 1c       	adc	r7, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     b1a:	90 e8       	ldi	r25, 0x80	; 128
     b1c:	29 16       	cp	r2, r25
     b1e:	11 f4       	brne	.+4      	; 0xb24 <USB_ProcessHIDReport+0x57e>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     b20:	1b 8a       	std	Y+19, r1	; 0x13
     b22:	08 c0       	rjmp	.+16     	; 0xb34 <USB_ProcessHIDReport+0x58e>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     b24:	a0 e9       	ldi	r26, 0x90	; 144
     b26:	2a 16       	cp	r2, r26
     b28:	19 f4       	brne	.+6      	; 0xb30 <USB_ProcessHIDReport+0x58a>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     b2a:	b1 e0       	ldi	r27, 0x01	; 1
     b2c:	bb 8b       	std	Y+19, r27	; 0x13
     b2e:	02 c0       	rjmp	.+4      	; 0xb34 <USB_ProcessHIDReport+0x58e>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     b30:	e2 e0       	ldi	r30, 0x02	; 2
     b32:	eb 8b       	std	Y+19, r30	; 0x13

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     b34:	eb 89       	ldd	r30, Y+19	; 0x13
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	ee 0f       	add	r30, r30
     b3a:	ff 1f       	adc	r31, r31
     b3c:	e8 0d       	add	r30, r8
     b3e:	f9 1d       	adc	r31, r9
     b40:	81 81       	ldd	r24, Z+1	; 0x01
     b42:	92 81       	ldd	r25, Z+2	; 0x02
     b44:	9a 8b       	std	Y+18, r25	; 0x12
     b46:	89 8b       	std	Y+17, r24	; 0x11

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     b48:	d8 01       	movw	r26, r16
     b4a:	2c 91       	ld	r18, X
     b4c:	81 81       	ldd	r24, Z+1	; 0x01
     b4e:	92 81       	ldd	r25, Z+2	; 0x02
     b50:	82 0f       	add	r24, r18
     b52:	91 1d       	adc	r25, r1
     b54:	92 83       	std	Z+2, r25	; 0x02
     b56:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     b58:	eb 89       	ldd	r30, Y+19	; 0x13
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	ee 0f       	add	r30, r30
     b5e:	ff 1f       	adc	r31, r31
     b60:	e8 0d       	add	r30, r8
     b62:	f9 1d       	adc	r31, r9
     b64:	cf 57       	subi	r28, 0x7F	; 127
     b66:	df 4f       	sbci	r29, 0xFF	; 255
     b68:	a8 81       	ld	r26, Y
     b6a:	b9 81       	ldd	r27, Y+1	; 0x01
     b6c:	c1 58       	subi	r28, 0x81	; 129
     b6e:	d0 40       	sbci	r29, 0x00	; 0
     b70:	4d 91       	ld	r20, X+
     b72:	5c 91       	ld	r21, X
     b74:	11 97       	sbiw	r26, 0x01	; 1
     b76:	81 81       	ldd	r24, Z+1	; 0x01
     b78:	92 81       	ldd	r25, Z+2	; 0x02
     b7a:	84 17       	cp	r24, r20
     b7c:	95 07       	cpc	r25, r21
     b7e:	08 f4       	brcc	.+2      	; 0xb82 <USB_ProcessHIDReport+0x5dc>
     b80:	ca 01       	movw	r24, r20
     b82:	cf 57       	subi	r28, 0x7F	; 127
     b84:	df 4f       	sbci	r29, 0xFF	; 255
     b86:	e8 81       	ld	r30, Y
     b88:	f9 81       	ldd	r31, Y+1	; 0x01
     b8a:	c1 58       	subi	r28, 0x81	; 129
     b8c:	d0 40       	sbci	r29, 0x00	; 0
     b8e:	91 83       	std	Z+1, r25	; 0x01
     b90:	80 83       	st	Z, r24

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     b92:	d5 01       	movw	r26, r10
     b94:	8c 91       	ld	r24, X
     b96:	84 31       	cpi	r24, 0x14	; 20
     b98:	09 f4       	brne	.+2      	; 0xb9c <USB_ProcessHIDReport+0x5f6>
     b9a:	9e c0       	rjmp	.+316    	; 0xcd8 <USB_ProcessHIDReport+0x732>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	4a e2       	ldi	r20, 0x2A	; 42
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	84 9f       	mul	r24, r20
     ba4:	f0 01       	movw	r30, r0
     ba6:	85 9f       	mul	r24, r21
     ba8:	f0 0d       	add	r31, r0
     baa:	94 9f       	mul	r25, r20
     bac:	f0 0d       	add	r31, r0
     bae:	11 24       	eor	r1, r1
     bb0:	ea 0d       	add	r30, r10
     bb2:	fb 1d       	adc	r31, r11
     bb4:	31 96       	adiw	r30, 0x01	; 1
     bb6:	de 01       	movw	r26, r28
     bb8:	51 96       	adiw	r26, 0x11	; 17
     bba:	8a e2       	ldi	r24, 0x2A	; 42
     bbc:	0d 90       	ld	r0, X+
     bbe:	01 92       	st	Z+, r0
     bc0:	81 50       	subi	r24, 0x01	; 1
     bc2:	e1 f7       	brne	.-8      	; 0xbbc <USB_ProcessHIDReport+0x616>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     bc4:	cd 57       	subi	r28, 0x7D	; 125
     bc6:	df 4f       	sbci	r29, 0xFF	; 255
     bc8:	88 81       	ld	r24, Y
     bca:	99 81       	ldd	r25, Y+1	; 0x01
     bcc:	aa 81       	ldd	r26, Y+2	; 0x02
     bce:	bb 81       	ldd	r27, Y+3	; 0x03
     bd0:	c3 58       	subi	r28, 0x83	; 131
     bd2:	d0 40       	sbci	r29, 0x00	; 0
     bd4:	00 97       	sbiw	r24, 0x00	; 0
     bd6:	a1 05       	cpc	r26, r1
     bd8:	b1 05       	cpc	r27, r1
     bda:	39 f5       	brne	.+78     	; 0xc2a <USB_ProcessHIDReport+0x684>
     bdc:	ce 01       	movw	r24, r28
     bde:	41 96       	adiw	r24, 0x11	; 17
     be0:	c1 57       	subi	r28, 0x71	; 113
     be2:	df 4f       	sbci	r29, 0xFF	; 255
     be4:	38 83       	st	Y, r19
     be6:	cf 58       	subi	r28, 0x8F	; 143
     be8:	d0 40       	sbci	r29, 0x00	; 0
     bea:	c3 57       	subi	r28, 0x73	; 115
     bec:	df 4f       	sbci	r29, 0xFF	; 255
     bee:	68 83       	st	Y, r22
     bf0:	cd 58       	subi	r28, 0x8D	; 141
     bf2:	d0 40       	sbci	r29, 0x00	; 0
     bf4:	c2 57       	subi	r28, 0x72	; 114
     bf6:	df 4f       	sbci	r29, 0xFF	; 255
     bf8:	78 83       	st	Y, r23
     bfa:	ce 58       	subi	r28, 0x8E	; 142
     bfc:	d0 40       	sbci	r29, 0x00	; 0
     bfe:	c9 dc       	rcall	.-1646   	; 0x592 <CALLBACK_HIDParser_FilterHIDReportItem>
     c00:	c1 57       	subi	r28, 0x71	; 113
     c02:	df 4f       	sbci	r29, 0xFF	; 255
     c04:	38 81       	ld	r19, Y
     c06:	cf 58       	subi	r28, 0x8F	; 143
     c08:	d0 40       	sbci	r29, 0x00	; 0
     c0a:	c3 57       	subi	r28, 0x73	; 115
     c0c:	df 4f       	sbci	r29, 0xFF	; 255
     c0e:	68 81       	ld	r22, Y
     c10:	cd 58       	subi	r28, 0x8D	; 141
     c12:	d0 40       	sbci	r29, 0x00	; 0
     c14:	c2 57       	subi	r28, 0x72	; 114
     c16:	df 4f       	sbci	r29, 0xFF	; 255
     c18:	78 81       	ld	r23, Y
     c1a:	ce 58       	subi	r28, 0x8E	; 142
     c1c:	d0 40       	sbci	r29, 0x00	; 0
     c1e:	88 23       	and	r24, r24
     c20:	21 f0       	breq	.+8      	; 0xc2a <USB_ProcessHIDReport+0x684>
     c22:	d5 01       	movw	r26, r10
					  ParserData->TotalReportItems++;
     c24:	8c 91       	ld	r24, X
     c26:	8f 5f       	subi	r24, 0xFF	; 255
     c28:	8c 93       	st	X, r24
     c2a:	33 94       	inc	r3
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     c2c:	1a c0       	rjmp	.+52     	; 0xc62 <USB_ProcessHIDReport+0x6bc>
     c2e:	33 24       	eor	r3, r3
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     c30:	8c ef       	ldi	r24, 0xFC	; 252
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));
     c32:	28 2e       	mov	r2, r24
     c34:	22 22       	and	r2, r18
     c36:	d7 01       	movw	r26, r14
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     c38:	c6 01       	movw	r24, r12
     c3a:	81 70       	andi	r24, 0x01	; 1
     c3c:	90 70       	andi	r25, 0x00	; 0
     c3e:	a0 70       	andi	r26, 0x00	; 0
     c40:	b0 70       	andi	r27, 0x00	; 0
     c42:	cd 57       	subi	r28, 0x7D	; 125
     c44:	df 4f       	sbci	r29, 0xFF	; 255
     c46:	88 83       	st	Y, r24
     c48:	99 83       	std	Y+1, r25	; 0x01
     c4a:	aa 83       	std	Y+2, r26	; 0x02
     c4c:	bb 83       	std	Y+3, r27	; 0x03
     c4e:	c3 58       	subi	r28, 0x83	; 131
     c50:	d0 40       	sbci	r29, 0x00	; 0
     c52:	c5 57       	subi	r28, 0x75	; 117
     c54:	df 4f       	sbci	r29, 0xFF	; 255
     c56:	79 83       	std	Y+1, r23	; 0x01
     c58:	68 83       	st	Y, r22
     c5a:	cb 58       	subi	r28, 0x8B	; 139
     c5c:	d0 40       	sbci	r29, 0x00	; 0
     c5e:	b4 01       	movw	r22, r8
     c60:	4a 01       	movw	r8, r20
     c62:	d8 01       	movw	r26, r16
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     c64:	5a 96       	adiw	r26, 0x1a	; 26
     c66:	8c 91       	ld	r24, X
     c68:	5a 97       	sbiw	r26, 0x1a	; 26
     c6a:	38 16       	cp	r3, r24
     c6c:	08 f4       	brcc	.+2      	; 0xc70 <USB_ProcessHIDReport+0x6ca>
     c6e:	20 cf       	rjmp	.-448    	; 0xab0 <USB_ProcessHIDReport+0x50a>
     c70:	a4 01       	movw	r20, r8
     c72:	4b 01       	movw	r8, r22
     c74:	c5 57       	subi	r28, 0x75	; 117
     c76:	df 4f       	sbci	r29, 0xFF	; 255
     c78:	68 81       	ld	r22, Y
     c7a:	79 81       	ldd	r23, Y+1	; 0x01
     c7c:	cb 58       	subi	r28, 0x8B	; 139
     c7e:	d0 40       	sbci	r29, 0x00	; 0
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <USB_ProcessHIDReport+0x6e0>
     c82:	26 01       	movw	r4, r12
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     c84:	37 01       	movw	r6, r14
     c86:	ed 96       	adiw	r28, 0x3d	; 61
			
			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     c88:	8e ad       	sts	0x6e, r24
     c8a:	9f ad       	sts	0x6f, r25
     c8c:	ed 97       	sbiw	r28, 0x3d	; 61
     c8e:	8c 70       	andi	r24, 0x0C	; 12
     c90:	90 70       	andi	r25, 0x00	; 0
     c92:	00 97       	sbiw	r24, 0x00	; 0
     c94:	51 f4       	brne	.+20     	; 0xcaa <USB_ProcessHIDReport+0x704>
     c96:	eb 96       	adiw	r28, 0x3b	; 59
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     c98:	1c ae       	sts	0xbc, r17
     c9a:	1d ae       	sts	0xbd, r17
     c9c:	1e ae       	sts	0xbe, r17
     c9e:	1f ae       	sts	0xbf, r17
     ca0:	eb 97       	sbiw	r28, 0x3b	; 59
     ca2:	44 24       	eor	r4, r4
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     ca4:	55 24       	eor	r5, r5
     ca6:	32 01       	movw	r6, r4
     ca8:	30 e0       	ldi	r19, 0x00	; 0
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     caa:	e7 96       	adiw	r28, 0x37	; 55
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     cac:	ee ad       	sts	0x6e, r30
     cae:	ff ad       	sts	0x6f, r31
     cb0:	e7 97       	sbiw	r28, 0x37	; 55
     cb2:	30 97       	sbiw	r30, 0x00	; 0
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <USB_ProcessHIDReport+0x712>
     cb6:	e1 cc       	rjmp	.-1598   	; 0x67a <USB_ProcessHIDReport+0xd4>
     cb8:	d5 01       	movw	r26, r10
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     cba:	8c 91       	ld	r24, X
     cbc:	88 23       	and	r24, r24
     cbe:	71 f4       	brne	.+28     	; 0xcdc <USB_ProcessHIDReport+0x736>
     cc0:	88 e0       	ldi	r24, 0x08	; 8
	  return HID_PARSE_NoUnfilteredReportItems;
     cc2:	0f c0       	rjmp	.+30     	; 0xce2 <USB_ProcessHIDReport+0x73c>
     cc4:	81 e0       	ldi	r24, 0x01	; 1

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     cc6:	0d c0       	rjmp	.+26     	; 0xce2 <USB_ProcessHIDReport+0x73c>
     cc8:	82 e0       	ldi	r24, 0x02	; 2

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     cca:	0b c0       	rjmp	.+22     	; 0xce2 <USB_ProcessHIDReport+0x73c>
     ccc:	86 e0       	ldi	r24, 0x06	; 6

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     cce:	09 c0       	rjmp	.+18     	; 0xce2 <USB_ProcessHIDReport+0x73c>
     cd0:	85 e0       	ldi	r24, 0x05	; 5
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     cd2:	07 c0       	rjmp	.+14     	; 0xce2 <USB_ProcessHIDReport+0x73c>
     cd4:	84 e0       	ldi	r24, 0x04	; 4
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     cd6:	05 c0       	rjmp	.+10     	; 0xce2 <USB_ProcessHIDReport+0x73c>
     cd8:	83 e0       	ldi	r24, 0x03	; 3
					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;
     cda:	03 c0       	rjmp	.+6      	; 0xce2 <USB_ProcessHIDReport+0x73c>
     cdc:	80 e0       	ldi	r24, 0x00	; 0
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     cde:	01 c0       	rjmp	.+2      	; 0xce2 <USB_ProcessHIDReport+0x73c>
     ce0:	87 e0       	ldi	r24, 0x07	; 7
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     ce2:	c1 57       	subi	r28, 0x71	; 113

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     ce4:	df 4f       	sbci	r29, 0xFF	; 255
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	1f 91       	pop	r17
     cf6:	0f 91       	pop	r16
     cf8:	ff 90       	pop	r15
     cfa:	ef 90       	pop	r14
     cfc:	df 90       	pop	r13
     cfe:	cf 90       	pop	r12
     d00:	bf 90       	pop	r11
     d02:	af 90       	pop	r10
     d04:	9f 90       	pop	r9
     d06:	8f 90       	pop	r8
     d08:	7f 90       	pop	r7
     d0a:	6f 90       	pop	r6
     d0c:	5f 90       	pop	r5
     d0e:	4f 90       	pop	r4
     d10:	3f 90       	pop	r3
     d12:	2f 90       	pop	r2
     d14:	08 95       	ret
     d16:	2a 30       	cpi	r18, 0x0A	; 10
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     d18:	09 f0       	breq	.+2      	; 0xd1c <USB_ProcessHIDReport+0x776>
     d1a:	39 ce       	rjmp	.-910    	; 0x98e <USB_ProcessHIDReport+0x3e8>
     d1c:	e1 cf       	rjmp	.-62     	; 0xce0 <USB_ProcessHIDReport+0x73a>

00000d1e <USB_GetHIDReportItemInfo>:
     d1e:	ef 92       	push	r14
	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
     d20:	ff 92       	push	r15
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	8c 01       	movw	r16, r24
     d2c:	eb 01       	movw	r28, r22
	if (ReportItem == NULL)
     d2e:	20 97       	sbiw	r28, 0x00	; 0
     d30:	09 f4       	brne	.+2      	; 0xd34 <USB_GetHIDReportItemInfo+0x16>
     d32:	4e c0       	rjmp	.+156    	; 0xdd0 <USB_GetHIDReportItemInfo+0xb2>
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
     d34:	e8 85       	ldd	r30, Y+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
     d36:	58 81       	ld	r21, Y
     d38:	49 81       	ldd	r20, Y+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
     d3a:	8d 81       	ldd	r24, Y+5	; 0x05
     d3c:	88 23       	and	r24, r24
     d3e:	39 f0       	breq	.+14     	; 0xd4e <USB_GetHIDReportItemInfo+0x30>
	{
		if (ReportItem->ReportID != ReportData[0])
     d40:	d8 01       	movw	r26, r16
     d42:	9c 91       	ld	r25, X
     d44:	89 17       	cp	r24, r25
     d46:	09 f0       	breq	.+2      	; 0xd4a <USB_GetHIDReportItemInfo+0x2c>
     d48:	43 c0       	rjmp	.+134    	; 0xdd0 <USB_GetHIDReportItemInfo+0xb2>
		  return false;

		ReportData++;
     d4a:	0f 5f       	subi	r16, 0xFF	; 255
     d4c:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	ReportItem->PreviousValue = ReportItem->Value;
     d4e:	8a a1       	lds	r24, 0x4a
     d50:	9b a1       	lds	r25, 0x4b
     d52:	ac a1       	lds	r26, 0x4c
     d54:	bd a1       	lds	r27, 0x4d
     d56:	8e a3       	lds	r24, 0x5e
     d58:	9f a3       	lds	r25, 0x5f
     d5a:	a8 a7       	lds	r26, 0x78
     d5c:	b9 a7       	lds	r27, 0x79
	ReportItem->Value = 0;
     d5e:	1a a2       	lds	r17, 0x9a
     d60:	1b a2       	lds	r17, 0x9b
     d62:	1c a2       	lds	r17, 0x9c
     d64:	1d a2       	lds	r17, 0x9d
{
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
     d66:	25 2f       	mov	r18, r21
     d68:	34 2f       	mov	r19, r20
	uint32_t BitMask      = (1 << 0);
     d6a:	41 e0       	ldi	r20, 0x01	; 1
     d6c:	50 e0       	ldi	r21, 0x00	; 0
     d6e:	60 e0       	ldi	r22, 0x00	; 0
     d70:	70 e0       	ldi	r23, 0x00	; 0
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
     d72:	79 01       	movw	r14, r18
     d74:	ee 0e       	add	r14, r30
     d76:	f1 1c       	adc	r15, r1
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
     d78:	26 c0       	rjmp	.+76     	; 0xdc6 <USB_GetHIDReportItemInfo+0xa8>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
     d7a:	f9 01       	movw	r30, r18
     d7c:	93 e0       	ldi	r25, 0x03	; 3
     d7e:	f6 95       	lsr	r31
     d80:	e7 95       	ror	r30
     d82:	9a 95       	dec	r25
     d84:	e1 f7       	brne	.-8      	; 0xd7e <USB_GetHIDReportItemInfo+0x60>
     d86:	e0 0f       	add	r30, r16
     d88:	f1 1f       	adc	r31, r17
     d8a:	e0 81       	ld	r30, Z
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	c9 01       	movw	r24, r18
     d90:	87 70       	andi	r24, 0x07	; 7
     d92:	90 70       	andi	r25, 0x00	; 0
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <USB_GetHIDReportItemInfo+0x7c>
     d96:	f5 95       	asr	r31
     d98:	e7 95       	ror	r30
     d9a:	8a 95       	dec	r24
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <USB_GetHIDReportItemInfo+0x78>
     d9e:	e0 ff       	sbrs	r30, 0
     da0:	0c c0       	rjmp	.+24     	; 0xdba <USB_GetHIDReportItemInfo+0x9c>
		  ReportItem->Value |= BitMask;
     da2:	8a a1       	lds	r24, 0x4a
     da4:	9b a1       	lds	r25, 0x4b
     da6:	ac a1       	lds	r26, 0x4c
     da8:	bd a1       	lds	r27, 0x4d
     daa:	84 2b       	or	r24, r20
     dac:	95 2b       	or	r25, r21
     dae:	a6 2b       	or	r26, r22
     db0:	b7 2b       	or	r27, r23
     db2:	8a a3       	lds	r24, 0x5a
     db4:	9b a3       	lds	r25, 0x5b
     db6:	ac a3       	lds	r26, 0x5c
     db8:	bd a3       	lds	r27, 0x5d

		CurrentBit++;
     dba:	2f 5f       	subi	r18, 0xFF	; 255
     dbc:	3f 4f       	sbci	r19, 0xFF	; 255
		BitMask <<= 1;
     dbe:	44 0f       	add	r20, r20
     dc0:	55 1f       	adc	r21, r21
     dc2:	66 1f       	adc	r22, r22
     dc4:	77 1f       	adc	r23, r23
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
     dc6:	e2 16       	cp	r14, r18
     dc8:	f3 06       	cpc	r15, r19
     dca:	b9 f6       	brne	.-82     	; 0xd7a <USB_GetHIDReportItemInfo+0x5c>

		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	01 c0       	rjmp	.+2      	; 0xdd2 <USB_GetHIDReportItemInfo+0xb4>
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
		  return false;
     dd0:	80 e0       	ldi	r24, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	1f 91       	pop	r17
     dd8:	0f 91       	pop	r16
     dda:	ff 90       	pop	r15
     ddc:	ef 90       	pop	r14
     dde:	08 95       	ret

00000de0 <USB_GetHIDReportSize>:
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
     de0:	9c 01       	movw	r18, r24
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
     de6:	50 e0       	ldi	r21, 0x00	; 0
     de8:	44 0f       	add	r20, r20
     dea:	55 1f       	adc	r21, r21
     dec:	42 0f       	add	r20, r18
     dee:	53 1f       	adc	r21, r19
     df0:	fa 01       	movw	r30, r20
     df2:	e8 0f       	add	r30, r24
     df4:	f9 1f       	adc	r31, r25
     df6:	ef 56       	subi	r30, 0x6F	; 111
     df8:	fc 4f       	sbci	r31, 0xFC	; 252
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
     dfa:	a0 81       	ld	r26, Z
     dfc:	b1 81       	ldd	r27, Z+1	; 0x01
		CurrentBit++;
		BitMask <<= 1;
	}
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
     dfe:	f9 01       	movw	r30, r18
     e00:	e8 0f       	add	r30, r24
     e02:	f9 1f       	adc	r31, r25
     e04:	e0 57       	subi	r30, 0x70	; 112
     e06:	fc 4f       	sbci	r31, 0xFC	; 252
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
     e08:	70 81       	ld	r23, Z
     e0a:	76 17       	cp	r23, r22
     e0c:	91 f4       	brne	.+36     	; 0xe32 <USB_GetHIDReportSize+0x52>
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
     e0e:	cd 01       	movw	r24, r26
     e10:	87 70       	andi	r24, 0x07	; 7
     e12:	90 70       	andi	r25, 0x00	; 0
     e14:	21 e0       	ldi	r18, 0x01	; 1
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	00 97       	sbiw	r24, 0x00	; 0
     e1a:	11 f4       	brne	.+4      	; 0xe20 <USB_GetHIDReportSize+0x40>
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	cd 01       	movw	r24, r26
     e22:	e3 e0       	ldi	r30, 0x03	; 3
     e24:	96 95       	lsr	r25
     e26:	87 95       	ror	r24
     e28:	ea 95       	dec	r30
     e2a:	e1 f7       	brne	.-8      	; 0xe24 <USB_GetHIDReportSize+0x44>
     e2c:	82 0f       	add	r24, r18
     e2e:	93 1f       	adc	r25, r19
     e30:	08 95       	ret
     e32:	07 96       	adiw	r24, 0x07	; 7

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
     e34:	86 34       	cpi	r24, 0x46	; 70
     e36:	91 05       	cpc	r25, r1
     e38:	d9 f6       	brne	.-74     	; 0xdf0 <USB_GetHIDReportSize+0x10>

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	90 e0       	ldi	r25, 0x00	; 0
}
     e3e:	08 95       	ret

00000e40 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     e40:	80 91 9e 00 	lds	r24, 0x009E
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	81 70       	andi	r24, 0x01	; 1
     e48:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     e4a:	20 91 a0 00 	lds	r18, 0x00A0
     e4e:	2d 7f       	andi	r18, 0xFD	; 253
     e50:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     e54:	20 91 9e 00 	lds	r18, 0x009E
     e58:	22 60       	ori	r18, 0x02	; 2
     e5a:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     e5e:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     e62:	21 fd       	sbrc	r18, 1
     e64:	fc cf       	rjmp	.-8      	; 0xe5e <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e66:	20 91 9e 00 	lds	r18, 0x009E
     e6a:	21 60       	ori	r18, 0x01	; 1
     e6c:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     e70:	10 92 1e 05 	sts	0x051E, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     e74:	20 91 a0 00 	lds	r18, 0x00A0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	20 72       	andi	r18, 0x20	; 32
     e7c:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     e7e:	40 91 a0 00 	lds	r20, 0x00A0
     e82:	4f 7d       	andi	r20, 0xDF	; 223
     e84:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     e88:	40 91 9f 00 	lds	r20, 0x009F
     e8c:	4f 7d       	andi	r20, 0xDF	; 223
     e8e:	40 93 9f 00 	sts	0x009F, r20
     e92:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     e94:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     e98:	55 ff       	sbrs	r21, 5
     e9a:	0b c0       	rjmp	.+22     	; 0xeb2 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     e9c:	40 91 9f 00 	lds	r20, 0x009F
     ea0:	4f 7d       	andi	r20, 0xDF	; 223
     ea2:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     ea6:	40 91 9f 00 	lds	r20, 0x009F
     eaa:	4d 7f       	andi	r20, 0xFD	; 253
     eac:	40 93 9f 00 	sts	0x009F, r20
     eb0:	08 c0       	rjmp	.+16     	; 0xec2 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     eb2:	ef ec       	ldi	r30, 0xCF	; 207
     eb4:	f7 e0       	ldi	r31, 0x07	; 7
     eb6:	31 97       	sbiw	r30, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <USB_Host_ResetDevice+0x76>
     eba:	00 c0       	rjmp	.+0      	; 0xebc <USB_Host_ResetDevice+0x7c>
     ebc:	00 00       	nop
     ebe:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     ec0:	49 f7       	brne	.-46     	; 0xe94 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     ec2:	21 15       	cp	r18, r1
     ec4:	31 05       	cpc	r19, r1
     ec6:	29 f0       	breq	.+10     	; 0xed2 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     ec8:	20 91 a0 00 	lds	r18, 0x00A0
     ecc:	20 62       	ori	r18, 0x20	; 32
     ece:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	29 f4       	brne	.+10     	; 0xee0 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     ed6:	80 91 9e 00 	lds	r24, 0x009E
     eda:	8e 7f       	andi	r24, 0xFE	; 254
     edc:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     ee0:	80 91 a0 00 	lds	r24, 0x00A0
     ee4:	82 60       	ori	r24, 0x02	; 2
     ee6:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     eea:	08 95       	ret

00000eec <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     eec:	40 91 9e 00 	lds	r20, 0x009E
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	41 70       	andi	r20, 0x01	; 1
     ef4:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     ef6:	20 91 a0 00 	lds	r18, 0x00A0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	20 72       	andi	r18, 0x20	; 32
     efe:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     f00:	90 91 a0 00 	lds	r25, 0x00A0
     f04:	9f 7d       	andi	r25, 0xDF	; 223
     f06:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     f0a:	90 91 9f 00 	lds	r25, 0x009F
     f0e:	9f 7d       	andi	r25, 0xDF	; 223
     f10:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f14:	90 91 9e 00 	lds	r25, 0x009E
     f18:	91 60       	ori	r25, 0x01	; 1
     f1a:	90 93 9e 00 	sts	0x009E, r25
     f1e:	26 c0       	rjmp	.+76     	; 0xf6c <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     f20:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     f24:	95 ff       	sbrs	r25, 5
     f26:	06 c0       	rjmp	.+12     	; 0xf34 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     f28:	90 91 9f 00 	lds	r25, 0x009F
     f2c:	9f 7d       	andi	r25, 0xDF	; 223
     f2e:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     f32:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     f34:	90 91 28 05 	lds	r25, 0x0528
     f38:	91 30       	cpi	r25, 0x01	; 1
     f3a:	d9 f0       	breq	.+54     	; 0xf72 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     f3c:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     f40:	94 ff       	sbrs	r25, 4
     f42:	09 c0       	rjmp	.+18     	; 0xf56 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     f44:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     f48:	80 91 a6 00 	lds	r24, 0x00A6
     f4c:	8f 7e       	andi	r24, 0xEF	; 239
     f4e:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     f52:	82 e0       	ldi	r24, 0x02	; 2

			break;
     f54:	0f c0       	rjmp	.+30     	; 0xf74 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     f56:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     f5a:	91 ff       	sbrs	r25, 1
     f5c:	07 c0       	rjmp	.+14     	; 0xf6c <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     f5e:	80 91 a6 00 	lds	r24, 0x00A6
     f62:	8d 7f       	andi	r24, 0xFD	; 253
     f64:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     f68:	83 e0       	ldi	r24, 0x03	; 3

			break;
     f6a:	04 c0       	rjmp	.+8      	; 0xf74 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     f6c:	88 23       	and	r24, r24
     f6e:	c1 f6       	brne	.-80     	; 0xf20 <USB_Host_WaitMS+0x34>
     f70:	01 c0       	rjmp	.+2      	; 0xf74 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     f72:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     f74:	41 15       	cp	r20, r1
     f76:	51 05       	cpc	r21, r1
     f78:	29 f4       	brne	.+10     	; 0xf84 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     f7a:	90 91 9e 00 	lds	r25, 0x009E
     f7e:	9e 7f       	andi	r25, 0xFE	; 254
     f80:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     f84:	21 15       	cp	r18, r1
     f86:	31 05       	cpc	r19, r1
     f88:	29 f0       	breq	.+10     	; 0xf94 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     f8a:	90 91 a0 00 	lds	r25, 0x00A0
     f8e:	90 62       	ori	r25, 0x20	; 32
     f90:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     f94:	08 95       	ret

00000f96 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	28 97       	sbiw	r28, 0x08	; 8
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     fae:	80 91 28 05 	lds	r24, 0x0528
     fb2:	85 30       	cpi	r24, 0x05	; 5
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <USB_Host_ProcessNextHostState+0x22>
     fb6:	99 c0       	rjmp	.+306    	; 0x10ea <USB_Host_ProcessNextHostState+0x154>
     fb8:	86 30       	cpi	r24, 0x06	; 6
     fba:	68 f4       	brcc	.+26     	; 0xfd6 <USB_Host_ProcessNextHostState+0x40>
     fbc:	82 30       	cpi	r24, 0x02	; 2
     fbe:	c1 f1       	breq	.+112    	; 0x1030 <USB_Host_ProcessNextHostState+0x9a>
     fc0:	83 30       	cpi	r24, 0x03	; 3
     fc2:	18 f4       	brcc	.+6      	; 0xfca <USB_Host_ProcessNextHostState+0x34>
     fc4:	88 23       	and	r24, r24
     fc6:	a1 f0       	breq	.+40     	; 0xff0 <USB_Host_ProcessNextHostState+0x5a>
     fc8:	04 c1       	rjmp	.+520    	; 0x11d2 <USB_Host_ProcessNextHostState+0x23c>
     fca:	83 30       	cpi	r24, 0x03	; 3
     fcc:	d9 f1       	breq	.+118    	; 0x1044 <USB_Host_ProcessNextHostState+0xae>
     fce:	84 30       	cpi	r24, 0x04	; 4
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <USB_Host_ProcessNextHostState+0x3e>
     fd2:	ff c0       	rjmp	.+510    	; 0x11d2 <USB_Host_ProcessNextHostState+0x23c>
     fd4:	62 c0       	rjmp	.+196    	; 0x109a <USB_Host_ProcessNextHostState+0x104>
     fd6:	87 30       	cpi	r24, 0x07	; 7
     fd8:	09 f4       	brne	.+2      	; 0xfdc <USB_Host_ProcessNextHostState+0x46>
     fda:	9e c0       	rjmp	.+316    	; 0x1118 <USB_Host_ProcessNextHostState+0x182>
     fdc:	87 30       	cpi	r24, 0x07	; 7
     fde:	08 f4       	brcc	.+2      	; 0xfe2 <USB_Host_ProcessNextHostState+0x4c>
     fe0:	8f c0       	rjmp	.+286    	; 0x1100 <USB_Host_ProcessNextHostState+0x16a>
     fe2:	88 30       	cpi	r24, 0x08	; 8
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <USB_Host_ProcessNextHostState+0x52>
     fe6:	b8 c0       	rjmp	.+368    	; 0x1158 <USB_Host_ProcessNextHostState+0x1c2>
     fe8:	89 30       	cpi	r24, 0x09	; 9
     fea:	09 f0       	breq	.+2      	; 0xfee <USB_Host_ProcessNextHostState+0x58>
     fec:	f2 c0       	rjmp	.+484    	; 0x11d2 <USB_Host_ProcessNextHostState+0x23c>
     fee:	d9 c0       	rjmp	.+434    	; 0x11a2 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     ff0:	00 91 1b 05 	lds	r16, 0x051B
     ff4:	10 91 1c 05 	lds	r17, 0x051C
     ff8:	01 15       	cp	r16, r1
     ffa:	11 05       	cpc	r17, r1
     ffc:	09 f4       	brne	.+2      	; 0x1000 <USB_Host_ProcessNextHostState+0x6a>
     ffe:	e9 c0       	rjmp	.+466    	; 0x11d2 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	74 df       	rcall	.-280    	; 0xeec <USB_Host_WaitMS>
    1004:	68 2f       	mov	r22, r24
    1006:	88 23       	and	r24, r24
    1008:	31 f0       	breq	.+12     	; 0x1016 <USB_Host_ProcessNextHostState+0x80>
    100a:	80 91 1d 05 	lds	r24, 0x051D
				{
					USB_HostState = PostWaitState;
    100e:	80 93 28 05 	sts	0x0528, r24
    1012:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
    1014:	d2 c0       	rjmp	.+420    	; 0x11ba <USB_Host_ProcessNextHostState+0x224>
					break;
    1016:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
    1018:	10 40       	sbci	r17, 0x00	; 0
    101a:	10 93 1c 05 	sts	0x051C, r17
    101e:	00 93 1b 05 	sts	0x051B, r16
    1022:	01 15       	cp	r16, r1
    1024:	11 05       	cpc	r17, r1
    1026:	09 f0       	breq	.+2      	; 0x102a <USB_Host_ProcessNextHostState+0x94>
    1028:	d4 c0       	rjmp	.+424    	; 0x11d2 <USB_Host_ProcessNextHostState+0x23c>
    102a:	80 91 1d 05 	lds	r24, 0x051D
				  USB_HostState = PostWaitState;
    102e:	07 c0       	rjmp	.+14     	; 0x103e <USB_Host_ProcessNextHostState+0xa8>
    1030:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    1032:	93 e0       	ldi	r25, 0x03	; 3
    1034:	90 93 1c 05 	sts	0x051C, r25
    1038:	80 93 1b 05 	sts	0x051B, r24
    103c:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    103e:	80 93 28 05 	sts	0x0528, r24
    1042:	c7 c0       	rjmp	.+398    	; 0x11d2 <USB_Host_ProcessNextHostState+0x23c>
			break;
    1044:	80 91 1b 05 	lds	r24, 0x051B
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    1048:	90 91 1c 05 	lds	r25, 0x051C
    104c:	9c 01       	movw	r18, r24
    104e:	21 50       	subi	r18, 0x01	; 1
    1050:	30 40       	sbci	r19, 0x00	; 0
    1052:	30 93 1c 05 	sts	0x051C, r19
    1056:	20 93 1b 05 	sts	0x051B, r18
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	39 f0       	breq	.+14     	; 0x106c <USB_Host_ProcessNextHostState+0xd6>
    105e:	8f ec       	ldi	r24, 0xCF	; 207
    1060:	97 e0       	ldi	r25, 0x07	; 7
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	f1 f7       	brne	.-4      	; 0x1062 <USB_Host_ProcessNextHostState+0xcc>
    1066:	00 c0       	rjmp	.+0      	; 0x1068 <USB_Host_ProcessNextHostState+0xd2>
    1068:	00 00       	nop
    106a:	b3 c0       	rjmp	.+358    	; 0x11d2 <USB_Host_ProcessNextHostState+0x23c>
    106c:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    106e:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1072:	80 61       	ori	r24, 0x10	; 16
    1074:	80 93 d8 00 	sts	0x00D8, r24
    1078:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    107c:	8b 7f       	andi	r24, 0xFB	; 251
    107e:	80 93 dd 00 	sts	0x00DD, r24
    1082:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
    1086:	80 61       	ori	r24, 0x10	; 16
    1088:	80 93 d7 00 	sts	0x00D7, r24
    108c:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    1090:	82 60       	ori	r24, 0x02	; 2
    1092:	80 93 dd 00 	sts	0x00DD, r24
    1096:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    1098:	d2 cf       	rjmp	.-92     	; 0x103e <USB_Host_ProcessNextHostState+0xa8>
    109a:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    109e:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    10a0:	98 c0       	rjmp	.+304    	; 0x11d2 <USB_Host_ProcessNextHostState+0x23c>
    10a2:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    10a6:	8e 7f       	andi	r24, 0xFE	; 254
    10a8:	80 93 9f 00 	sts	0x009F, r24
    10ac:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    10b0:	8d 7f       	andi	r24, 0xFD	; 253
    10b2:	80 93 9f 00 	sts	0x009F, r24
    10b6:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    10ba:	8d 7f       	andi	r24, 0xFD	; 253
    10bc:	80 93 df 00 	sts	0x00DF, r24
    10c0:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    10c4:	82 60       	ori	r24, 0x02	; 2
    10c6:	80 93 de 00 	sts	0x00DE, r24
    10ca:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    10ce:	81 60       	ori	r24, 0x01	; 1
    10d0:	80 93 9e 00 	sts	0x009E, r24
    10d4:	66 d1       	rcall	.+716    	; 0x13a2 <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    10d6:	10 92 28 05 	sts	0x0528, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    10da:	84 e6       	ldi	r24, 0x64	; 100
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	90 93 1c 05 	sts	0x051C, r25
    10e2:	80 93 1b 05 	sts	0x051B, r24
    10e6:	85 e0       	ldi	r24, 0x05	; 5
    10e8:	59 c0       	rjmp	.+178    	; 0x119c <USB_Host_ProcessNextHostState+0x206>
    10ea:	aa de       	rcall	.-684    	; 0xe40 <USB_Host_ResetDevice>
    10ec:	10 92 28 05 	sts	0x0528, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    10f0:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	90 93 1c 05 	sts	0x051C, r25
    10f8:	80 93 1b 05 	sts	0x051B, r24
    10fc:	86 e0       	ldi	r24, 0x06	; 6
    10fe:	4e c0       	rjmp	.+156    	; 0x119c <USB_Host_ProcessNextHostState+0x206>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    1106:	20 e4       	ldi	r18, 0x40	; 64
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	01 e0       	ldi	r16, 0x01	; 1
    110c:	c4 d0       	rcall	.+392    	; 0x1296 <Pipe_ConfigurePipe>
    110e:	88 23       	and	r24, r24
    1110:	09 f4       	brne	.+2      	; 0x1114 <USB_Host_ProcessNextHostState+0x17e>
    1112:	4f c0       	rjmp	.+158    	; 0x11b2 <USB_Host_ProcessNextHostState+0x21c>
    1114:	87 e0       	ldi	r24, 0x07	; 7
    1116:	93 cf       	rjmp	.-218    	; 0x103e <USB_Host_ProcessNextHostState+0xa8>
    1118:	a0 e2       	ldi	r26, 0x20	; 32
    111a:	b5 e0       	ldi	r27, 0x05	; 5
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    111c:	e7 e1       	ldi	r30, 0x17	; 23
    111e:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    1120:	88 e0       	ldi	r24, 0x08	; 8
    1122:	01 90       	ld	r0, Z+
    1124:	0d 92       	st	X+, r0
    1126:	81 50       	subi	r24, 0x01	; 1
    1128:	e1 f7       	brne	.-8      	; 0x1122 <USB_Host_ProcessNextHostState+0x18c>
    112a:	10 92 a7 00 	sts	0x00A7, r1
    112e:	ce 01       	movw	r24, r28
    1130:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1132:	7e d3       	rcall	.+1788   	; 0x1830 <USB_Host_SendControlRequest>
    1134:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    1136:	88 23       	and	r24, r24
    1138:	09 f0       	breq	.+2      	; 0x113c <USB_Host_ProcessNextHostState+0x1a6>
    113a:	3e c0       	rjmp	.+124    	; 0x11b8 <USB_Host_ProcessNextHostState+0x222>
    113c:	88 85       	ldd	r24, Y+8	; 0x08
    113e:	80 93 27 01 	sts	0x0127, r24
    1142:	7e de       	rcall	.-772    	; 0xe40 <USB_Host_ResetDevice>
    1144:	10 92 28 05 	sts	0x0528, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    1148:	88 ec       	ldi	r24, 0xC8	; 200
    114a:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
    114c:	90 93 1c 05 	sts	0x051C, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    1150:	80 93 1b 05 	sts	0x051B, r24
    1154:	88 e0       	ldi	r24, 0x08	; 8
    1156:	22 c0       	rjmp	.+68     	; 0x119c <USB_Host_ProcessNextHostState+0x206>
    1158:	20 91 27 01 	lds	r18, 0x0127
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	40 e0       	ldi	r20, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    1164:	01 e0       	ldi	r16, 0x01	; 1
    1166:	97 d0       	rcall	.+302    	; 0x1296 <Pipe_ConfigurePipe>
    1168:	88 23       	and	r24, r24
    116a:	19 f1       	breq	.+70     	; 0x11b2 <USB_Host_ProcessNextHostState+0x21c>
    116c:	a0 e2       	ldi	r26, 0x20	; 32
    116e:	b5 e0       	ldi	r27, 0x05	; 5
    1170:	ef e1       	ldi	r30, 0x1F	; 31
    1172:	f1 e0       	ldi	r31, 0x01	; 1
    1174:	88 e0       	ldi	r24, 0x08	; 8
    1176:	01 90       	ld	r0, Z+
    1178:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    117a:	81 50       	subi	r24, 0x01	; 1
    117c:	e1 f7       	brne	.-8      	; 0x1176 <USB_Host_ProcessNextHostState+0x1e0>
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	56 d3       	rcall	.+1708   	; 0x1830 <USB_Host_SendControlRequest>
    1184:	68 2f       	mov	r22, r24
    1186:	88 23       	and	r24, r24
    1188:	b9 f4       	brne	.+46     	; 0x11b8 <USB_Host_ProcessNextHostState+0x222>
    118a:	10 92 28 05 	sts	0x0528, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    118e:	84 e6       	ldi	r24, 0x64	; 100
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	90 93 1c 05 	sts	0x051C, r25
    1196:	80 93 1b 05 	sts	0x051B, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    119a:	89 e0       	ldi	r24, 0x09	; 9
    119c:	80 93 1d 05 	sts	0x051D, r24
    11a0:	18 c0       	rjmp	.+48     	; 0x11d2 <USB_Host_ProcessNextHostState+0x23c>
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	80 93 a1 00 	sts	0x00A1, r24
    11a8:	8a e0       	ldi	r24, 0x0A	; 10
    11aa:	80 93 28 05 	sts	0x0528, r24
    11ae:	52 d9       	rcall	.-3420   	; 0x454 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
    11b0:	10 c0       	rjmp	.+32     	; 0x11d2 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	84 e0       	ldi	r24, 0x04	; 4
    11b6:	01 c0       	rjmp	.+2      	; 0x11ba <USB_Host_ProcessNextHostState+0x224>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    11b8:	83 e0       	ldi	r24, 0x03	; 3
    11ba:	90 91 28 05 	lds	r25, 0x0528

			EVENT_USB_Host_DeviceEnumerationComplete();
    11be:	91 30       	cpi	r25, 0x01	; 1
    11c0:	41 f0       	breq	.+16     	; 0x11d2 <USB_Host_ProcessNextHostState+0x23c>
			break;
    11c2:	be d9       	rcall	.-3204   	; 0x540 <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    11c4:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    11c8:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
    11ca:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    11ce:	3c d9       	rcall	.-3464   	; 0x448 <EVENT_USB_Host_DeviceUnattached>
    11d0:	64 d1       	rcall	.+712    	; 0x149a <USB_ResetInterface>
    11d2:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16

		USB_ResetInterface();
    11e6:	08 95       	ret

000011e8 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    11e8:	af 92       	push	r10
    11ea:	bf 92       	push	r11
    11ec:	cf 92       	push	r12
    11ee:	df 92       	push	r13
    11f0:	ff 92       	push	r15
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	5c 01       	movw	r10, r24
    11fc:	eb 01       	movw	r28, r22
    11fe:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1200:	80 91 aa 00 	lds	r24, 0x00AA
    1204:	8f 7c       	andi	r24, 0xCF	; 207
    1206:	80 61       	ori	r24, 0x10	; 16
    1208:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    120c:	00 d1       	rcall	.+512    	; 0x140e <Pipe_WaitUntilReady>
    120e:	f8 2e       	mov	r15, r24
    1210:	88 23       	and	r24, r24
    1212:	b1 f5       	brne	.+108    	; 0x1280 <Pipe_Read_Stream_LE+0x98>
    1214:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1216:	d1 04       	cpc	r13, r1
    1218:	41 f0       	breq	.+16     	; 0x122a <Pipe_Read_Stream_LE+0x42>
    121a:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
    121c:	00 81       	ld	r16, Z
    121e:	11 81       	ldd	r17, Z+1	; 0x01
    1220:	c0 1b       	sub	r28, r16
    1222:	d1 0b       	sbc	r29, r17
    1224:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1226:	1b 1d       	adc	r17, r11
    1228:	01 c0       	rjmp	.+2      	; 0x122c <Pipe_Read_Stream_LE+0x44>
    122a:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    122c:	aa 24       	eor	r10, r10
    122e:	bb 24       	eor	r11, r11
    1230:	23 c0       	rjmp	.+70     	; 0x1278 <Pipe_Read_Stream_LE+0x90>
    1232:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1236:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1238:	16 c0       	rjmp	.+44     	; 0x1266 <Pipe_Read_Stream_LE+0x7e>
    123a:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    123e:	8e 77       	andi	r24, 0x7E	; 126
    1240:	80 93 a6 00 	sts	0x00A6, r24
    1244:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1246:	d1 04       	cpc	r13, r1
    1248:	51 f0       	breq	.+20     	; 0x125e <Pipe_Read_Stream_LE+0x76>
    124a:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
    124c:	80 81       	ld	r24, Z
    124e:	91 81       	ldd	r25, Z+1	; 0x01
    1250:	8a 0d       	add	r24, r10
    1252:	9b 1d       	adc	r25, r11
    1254:	91 83       	std	Z+1, r25	; 0x01
    1256:	80 83       	st	Z, r24
    1258:	64 e0       	ldi	r22, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
    125a:	f6 2e       	mov	r15, r22
    125c:	11 c0       	rjmp	.+34     	; 0x1280 <Pipe_Read_Stream_LE+0x98>
    125e:	d7 d0       	rcall	.+430    	; 0x140e <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1260:	88 23       	and	r24, r24
    1262:	51 f0       	breq	.+20     	; 0x1278 <Pipe_Read_Stream_LE+0x90>
    1264:	0c c0       	rjmp	.+24     	; 0x127e <Pipe_Read_Stream_LE+0x96>
    1266:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    126a:	f8 01       	movw	r30, r16
    126c:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    126e:	8f 01       	movw	r16, r30
    1270:	21 97       	sbiw	r28, 0x01	; 1
    1272:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1274:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
    1276:	b1 1c       	adc	r11, r1
    1278:	20 97       	sbiw	r28, 0x00	; 0
    127a:	d9 f6       	brne	.-74     	; 0x1232 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    127c:	01 c0       	rjmp	.+2      	; 0x1280 <Pipe_Read_Stream_LE+0x98>
    127e:	f8 2e       	mov	r15, r24
    1280:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1282:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
    128a:	ff 90       	pop	r15
    128c:	df 90       	pop	r13
    128e:	cf 90       	pop	r12
    1290:	bf 90       	pop	r11
    1292:	af 90       	pop	r10
    1294:	08 95       	ret

00001296 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    1296:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    1298:	58 2f       	mov	r21, r24
    129a:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    129c:	87 ff       	sbrs	r24, 7
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <Pipe_ConfigurePipe+0xe>
    12a0:	80 e1       	ldi	r24, 0x10	; 16
    12a2:	01 c0       	rjmp	.+2      	; 0x12a6 <Pipe_ConfigurePipe+0x10>
    12a4:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
    12a6:	57 30       	cpi	r21, 0x07	; 7
    12a8:	08 f0       	brcs	.+2      	; 0x12ac <Pipe_ConfigurePipe+0x16>
    12aa:	57 c0       	rjmp	.+174    	; 0x135a <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
    12ac:	66 23       	and	r22, r22
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
    12b0:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    12b2:	4f 70       	andi	r20, 0x0F	; 15
    12b4:	62 95       	swap	r22
    12b6:	66 0f       	add	r22, r22
    12b8:	66 0f       	add	r22, r22
    12ba:	60 7c       	andi	r22, 0xC0	; 192
    12bc:	64 2b       	or	r22, r20
    12be:	68 2b       	or	r22, r24
    12c0:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    12c2:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    12c4:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    12c8:	45 17       	cp	r20, r21
    12ca:	a9 f4       	brne	.+42     	; 0x12f6 <Pipe_ConfigurePipe+0x60>
    12cc:	04 c0       	rjmp	.+8      	; 0x12d6 <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    12ce:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	03 c0       	rjmp	.+6      	; 0x12dc <Pipe_ConfigurePipe+0x46>
    12d6:	88 e0       	ldi	r24, 0x08	; 8
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    12dc:	82 17       	cp	r24, r18
    12de:	93 07       	cpc	r25, r19
    12e0:	10 f4       	brcc	.+4      	; 0x12e6 <Pipe_ConfigurePipe+0x50>
    12e2:	75 30       	cpi	r23, 0x05	; 5
    12e4:	a1 f7       	brne	.-24     	; 0x12ce <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    12e6:	87 2f       	mov	r24, r23
    12e8:	82 95       	swap	r24
    12ea:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    12ec:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    12ee:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    12f0:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    12f2:	e0 e0       	ldi	r30, 0x00	; 0
    12f4:	08 c0       	rjmp	.+16     	; 0x1306 <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    12f6:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    12fa:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    12fe:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
    1302:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    1306:	81 ff       	sbrs	r24, 1
    1308:	20 c0       	rjmp	.+64     	; 0x134a <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    130a:	90 91 a9 00 	lds	r25, 0x00A9
    130e:	9e 7f       	andi	r25, 0xFE	; 254
    1310:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    1314:	90 91 ab 00 	lds	r25, 0x00AB
    1318:	9d 7f       	andi	r25, 0xFD	; 253
    131a:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    131e:	90 91 a9 00 	lds	r25, 0x00A9
    1322:	91 60       	ori	r25, 0x01	; 1
    1324:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    1328:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    132c:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    1330:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
    1334:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    1338:	80 91 a9 00 	lds	r24, 0x00A9
    133c:	80 62       	ori	r24, 0x20	; 32
    133e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1342:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    1346:	87 ff       	sbrs	r24, 7
    1348:	08 c0       	rjmp	.+16     	; 0x135a <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    134a:	4f 5f       	subi	r20, 0xFF	; 255
    134c:	47 30       	cpi	r20, 0x07	; 7
    134e:	09 f0       	breq	.+2      	; 0x1352 <Pipe_ConfigurePipe+0xbc>
    1350:	b9 cf       	rjmp	.-142    	; 0x12c4 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1352:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	01 c0       	rjmp	.+2      	; 0x135c <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
    135a:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    135c:	0f 91       	pop	r16
    135e:	08 95       	ret

00001360 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
    1360:	ff 92       	push	r15
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
    136c:	ec 01       	movw	r28, r24
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    136e:	ff 24       	eor	r15, r15
    1370:	0d c0       	rjmp	.+26     	; 0x138c <Pipe_ConfigurePipeTable+0x2c>
	{
		if (!(Table[i].Address))
    1372:	88 81       	ld	r24, Y
    1374:	88 23       	and	r24, r24
    1376:	41 f0       	breq	.+16     	; 0x1388 <Pipe_ConfigurePipeTable+0x28>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
    1378:	29 81       	ldd	r18, Y+1	; 0x01
    137a:	3a 81       	ldd	r19, Y+2	; 0x02
    137c:	6c 81       	ldd	r22, Y+4	; 0x04
    137e:	4b 81       	ldd	r20, Y+3	; 0x03
    1380:	0d 81       	ldd	r16, Y+5	; 0x05
    1382:	89 df       	rcall	.-238    	; 0x1296 <Pipe_ConfigurePipe>
    1384:	88 23       	and	r24, r24
    1386:	31 f0       	breq	.+12     	; 0x1394 <Pipe_ConfigurePipeTable+0x34>
    1388:	f3 94       	inc	r15
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    138a:	26 96       	adiw	r28, 0x06	; 6
    138c:	f1 16       	cp	r15, r17
    138e:	89 f7       	brne	.-30     	; 0x1372 <Pipe_ConfigurePipeTable+0x12>
    1390:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}
	
	return true;
    1392:	01 c0       	rjmp	.+2      	; 0x1396 <Pipe_ConfigurePipeTable+0x36>
    1394:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
    1396:	df 91       	pop	r29
		}
	}
	
	return true;
}
    1398:	cf 91       	pop	r28
    139a:	1f 91       	pop	r17
    139c:	0f 91       	pop	r16
    139e:	ff 90       	pop	r15
    13a0:	08 95       	ret

000013a2 <Pipe_ClearPipes>:
    13a2:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    13ac:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    13b0:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    13b4:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    13b8:	90 91 a9 00 	lds	r25, 0x00A9
    13bc:	9e 7f       	andi	r25, 0xFE	; 254
    13be:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    13c2:	8f 5f       	subi	r24, 0xFF	; 255
    13c4:	87 30       	cpi	r24, 0x07	; 7
    13c6:	81 f7       	brne	.-32     	; 0x13a8 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    13c8:	08 95       	ret

000013ca <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    13ca:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    13ce:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    13d2:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13d4:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    13d8:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
    13dc:	27 ff       	sbrs	r18, 7
    13de:	0c c0       	rjmp	.+24     	; 0x13f8 <Pipe_IsEndpointBound+0x2e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    13e0:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
    13e4:	53 2f       	mov	r21, r19
    13e6:	5f 70       	andi	r21, 0x0F	; 15
    13e8:	30 ff       	sbrs	r19, 0
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <Pipe_IsEndpointBound+0x26>
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	01 c0       	rjmp	.+2      	; 0x13f2 <Pipe_IsEndpointBound+0x28>
    13f0:	20 e8       	ldi	r18, 0x80	; 128
    13f2:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
    13f4:	28 17       	cp	r18, r24
    13f6:	49 f0       	breq	.+18     	; 0x140a <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    13f8:	9f 5f       	subi	r25, 0xFF	; 255
    13fa:	97 30       	cpi	r25, 0x07	; 7
    13fc:	59 f7       	brne	.-42     	; 0x13d4 <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13fe:	84 2f       	mov	r24, r20
    1400:	8f 70       	andi	r24, 0x0F	; 15
    1402:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
    140a:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
    140c:	08 95       	ret

0000140e <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    140e:	80 91 a2 00 	lds	r24, 0x00A2
    1412:	90 91 a3 00 	lds	r25, 0x00A3
    1416:	45 e6       	ldi	r20, 0x65	; 101
    1418:	01 c0       	rjmp	.+2      	; 0x141c <Pipe_WaitUntilReady+0xe>
    141a:	c9 01       	movw	r24, r18
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    141c:	20 91 aa 00 	lds	r18, 0x00AA
    1420:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1422:	20 31       	cpi	r18, 0x10	; 16
    1424:	29 f4       	brne	.+10     	; 0x1430 <Pipe_WaitUntilReady+0x22>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1426:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    142a:	20 ff       	sbrs	r18, 0
    142c:	05 c0       	rjmp	.+10     	; 0x1438 <Pipe_WaitUntilReady+0x2a>
    142e:	17 c0       	rjmp	.+46     	; 0x145e <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1430:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    1434:	22 fd       	sbrc	r18, 2
    1436:	13 c0       	rjmp	.+38     	; 0x145e <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1438:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    143c:	21 fd       	sbrc	r18, 1
    143e:	11 c0       	rjmp	.+34     	; 0x1462 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    1440:	20 91 28 05 	lds	r18, 0x0528
    1444:	21 30       	cpi	r18, 0x01	; 1
    1446:	79 f0       	breq	.+30     	; 0x1466 <Pipe_WaitUntilReady+0x58>
    1448:	20 91 a2 00 	lds	r18, 0x00A2
    144c:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1450:	28 17       	cp	r18, r24
    1452:	39 07       	cpc	r19, r25
    1454:	19 f3       	breq	.-58     	; 0x141c <Pipe_WaitUntilReady+0xe>
    1456:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1458:	01 f7       	brne	.-64     	; 0x141a <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_Timeout;
    145a:	83 e0       	ldi	r24, 0x03	; 3
    145c:	08 95       	ret
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    1466:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
    1468:	08 95       	ret

0000146a <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    146a:	75 d0       	rcall	.+234    	; 0x1556 <USB_INT_DisableAllInterrupts>
    146c:	7c d0       	rcall	.+248    	; 0x1566 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    146e:	e0 ee       	ldi	r30, 0xE0	; 224
    1470:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1472:	80 81       	ld	r24, Z
    1474:	81 60       	ori	r24, 0x01	; 1
    1476:	80 83       	st	Z, r24
    1478:	e8 ed       	ldi	r30, 0xD8	; 216
    147a:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    147c:	80 81       	ld	r24, Z
    147e:	8f 77       	andi	r24, 0x7F	; 127
    1480:	80 83       	st	Z, r24
    1482:	19 bc       	out	0x29, r1	; 41
    1484:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1486:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1488:	8c 91       	ld	r24, X
    148a:	8e 7f       	andi	r24, 0xFE	; 254
    148c:	8c 93       	st	X, r24
    148e:	80 81       	ld	r24, Z
    1490:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1492:	80 83       	st	Z, r24
    1494:	10 92 1f 05 	sts	0x051F, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1498:	08 95       	ret

0000149a <USB_ResetInterface>:
    149a:	5d d0       	rcall	.+186    	; 0x1556 <USB_INT_DisableAllInterrupts>
}
    149c:	64 d0       	rcall	.+200    	; 0x1566 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    149e:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    14a2:	8f 77       	andi	r24, 0x7F	; 127
    14a4:	80 93 d8 00 	sts	0x00D8, r24
    14a8:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    14ac:	80 68       	ori	r24, 0x80	; 128
    14ae:	80 93 d8 00 	sts	0x00D8, r24
    14b2:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    14b6:	8f 7d       	andi	r24, 0xDF	; 223
    14b8:	80 93 d8 00 	sts	0x00D8, r24
    14bc:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    14c0:	8f 77       	andi	r24, 0x7F	; 127
    14c2:	80 93 d7 00 	sts	0x00D7, r24
    14c6:	8c e0       	ldi	r24, 0x0C	; 12
    14c8:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    14ca:	8e e0       	ldi	r24, 0x0E	; 14
    14cc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    14ce:	09 b4       	in	r0, 0x29	; 41
    14d0:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    14d2:	fd cf       	rjmp	.-6      	; 0x14ce <USB_ResetInterface+0x34>
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	80 93 28 05 	sts	0x0528, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    14da:	10 92 1e 05 	sts	0x051E, r1
	USB_Host_ConfigurationNumber = 0;
    14de:	80 e4       	ldi	r24, 0x40	; 64
    14e0:	80 93 27 01 	sts	0x0127, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    14e4:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    14e8:	80 64       	ori	r24, 0x40	; 64
    14ea:	80 93 d8 00 	sts	0x00D8, r24
    14ee:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    14f2:	81 60       	ori	r24, 0x01	; 1
    14f4:	80 93 dd 00 	sts	0x00DD, r24
    14f8:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    14fc:	84 60       	ori	r24, 0x04	; 4
    14fe:	80 93 dd 00 	sts	0x00DD, r24
    1502:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
    1506:	8f 7e       	andi	r24, 0xEF	; 239
    1508:	80 93 d7 00 	sts	0x00D7, r24
    150c:	6f 9a       	sbi	0x0d, 7	; 13
    150e:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
    1510:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    1514:	81 60       	ori	r24, 0x01	; 1
    1516:	80 93 de 00 	sts	0x00DE, r24
    151a:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    151e:	84 60       	ori	r24, 0x04	; 4
    1520:	80 93 de 00 	sts	0x00DE, r24
    1524:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1528:	8e 7f       	andi	r24, 0xFE	; 254
    152a:	80 93 e0 00 	sts	0x00E0, r24
    152e:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1532:	80 61       	ori	r24, 0x10	; 16
    1534:	80 93 d8 00 	sts	0x00D8, r24
    1538:	08 95       	ret

0000153a <USB_Init>:
    153a:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    153c:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    153e:	80 81       	ld	r24, Z
    1540:	8f 7e       	andi	r24, 0xEF	; 239
    1542:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1544:	e7 ed       	ldi	r30, 0xD7	; 215
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	81 60       	ori	r24, 0x01	; 1
    154c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	80 93 1f 05 	sts	0x051F, r24

	USB_ResetInterface();
    1554:	a2 cf       	rjmp	.-188    	; 0x149a <USB_ResetInterface>

00001556 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1556:	e8 ed       	ldi	r30, 0xD8	; 216
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	8c 7f       	andi	r24, 0xFC	; 252
    155e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    1560:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    1564:	08 95       	ret

00001566 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1566:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    156a:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    156e:	08 95       	ret

00001570 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1570:	1f 92       	push	r1
    1572:	0f 92       	push	r0
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	0f 92       	push	r0
    1578:	0b b6       	in	r0, 0x3b	; 59
    157a:	0f 92       	push	r0
    157c:	11 24       	eor	r1, r1
    157e:	2f 93       	push	r18
    1580:	3f 93       	push	r19
    1582:	4f 93       	push	r20
    1584:	5f 93       	push	r21
    1586:	6f 93       	push	r22
    1588:	7f 93       	push	r23
    158a:	8f 93       	push	r24
    158c:	9f 93       	push	r25
    158e:	af 93       	push	r26
    1590:	bf 93       	push	r27
    1592:	ef 93       	push	r30
    1594:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1596:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    159a:	85 ff       	sbrs	r24, 5
    159c:	0a c0       	rjmp	.+20     	; 0x15b2 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    159e:	80 91 a0 00 	lds	r24, 0x00A0
    15a2:	85 ff       	sbrs	r24, 5
    15a4:	06 c0       	rjmp	.+12     	; 0x15b2 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    15a6:	80 91 9f 00 	lds	r24, 0x009F
    15aa:	8f 7d       	andi	r24, 0xDF	; 223
    15ac:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    15b0:	16 d1       	rcall	.+556    	; 0x17de <USB_Event_Stub>
    15b2:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    15b6:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    15b8:	16 c0       	rjmp	.+44     	; 0x15e6 <__vector_10+0x76>
    15ba:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    15be:	81 ff       	sbrs	r24, 1
    15c0:	12 c0       	rjmp	.+36     	; 0x15e6 <__vector_10+0x76>
    15c2:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    15c6:	8d 7f       	andi	r24, 0xFD	; 253
    15c8:	80 93 9f 00 	sts	0x009F, r24
    15cc:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    15d0:	8e 7f       	andi	r24, 0xFE	; 254
    15d2:	80 93 9f 00 	sts	0x009F, r24
    15d6:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    15da:	8d 7f       	andi	r24, 0xFD	; 253
    15dc:	80 93 a0 00 	sts	0x00A0, r24
    15e0:	0e 94 24 02 	call	0x448	; 0x448 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    15e4:	5a df       	rcall	.-332    	; 0x149a <USB_ResetInterface>

		USB_ResetInterface();
    15e6:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    15ea:	81 ff       	sbrs	r24, 1
    15ec:	17 c0       	rjmp	.+46     	; 0x161c <__vector_10+0xac>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    15ee:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    15f2:	81 ff       	sbrs	r24, 1
    15f4:	13 c0       	rjmp	.+38     	; 0x161c <__vector_10+0xac>
    15f6:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    15fa:	8d 7f       	andi	r24, 0xFD	; 253
    15fc:	80 93 df 00 	sts	0x00DF, r24
    1600:	77 98       	cbi	0x0e, 7	; 14
    1602:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1606:	81 60       	ori	r24, 0x01	; 1
    1608:	80 93 dd 00 	sts	0x00DD, r24
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	0e 94 80 02 	call	0x500	; 0x500 <EVENT_USB_Host_HostError>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1612:	0e 94 24 02 	call	0x448	; 0x448 <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	80 93 28 05 	sts	0x0528, r24

		USB_HostState = HOST_STATE_Unattached;
    161c:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1620:	80 ff       	sbrs	r24, 0
    1622:	18 c0       	rjmp	.+48     	; 0x1654 <__vector_10+0xe4>
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1624:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    1628:	80 ff       	sbrs	r24, 0
    162a:	14 c0       	rjmp	.+40     	; 0x1654 <__vector_10+0xe4>
    162c:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1630:	8e 7f       	andi	r24, 0xFE	; 254
    1632:	80 93 df 00 	sts	0x00DF, r24
    1636:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    163a:	8e 7f       	andi	r24, 0xFE	; 254
    163c:	80 93 de 00 	sts	0x00DE, r24
    1640:	0e 94 1e 02 	call	0x43c	; 0x43c <EVENT_USB_Host_DeviceAttached>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    1644:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1648:	82 60       	ori	r24, 0x02	; 2
    164a:	80 93 a0 00 	sts	0x00A0, r24
    164e:	82 e0       	ldi	r24, 0x02	; 2
    1650:	80 93 28 05 	sts	0x0528, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1654:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    1658:	82 ff       	sbrs	r24, 2
    165a:	10 c0       	rjmp	.+32     	; 0x167c <__vector_10+0x10c>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    165c:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1660:	82 ff       	sbrs	r24, 2
    1662:	0c c0       	rjmp	.+24     	; 0x167c <__vector_10+0x10c>
    1664:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    1668:	8b 7f       	andi	r24, 0xFB	; 251
    166a:	80 93 df 00 	sts	0x00DF, r24
    166e:	82 e0       	ldi	r24, 0x02	; 2
    1670:	60 e0       	ldi	r22, 0x00	; 0
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1672:	0e 94 a0 02 	call	0x540	; 0x540 <EVENT_USB_Host_DeviceEnumerationFailed>
    1676:	0e 94 24 02 	call	0x448	; 0x448 <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    167a:	0f df       	rcall	.-482    	; 0x149a <USB_ResetInterface>
    167c:	ff 91       	pop	r31

		USB_ResetInterface();
    167e:	ef 91       	pop	r30
    1680:	bf 91       	pop	r27
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1682:	af 91       	pop	r26
    1684:	9f 91       	pop	r25
    1686:	8f 91       	pop	r24
    1688:	7f 91       	pop	r23
    168a:	6f 91       	pop	r22
    168c:	5f 91       	pop	r21
    168e:	4f 91       	pop	r20
    1690:	3f 91       	pop	r19
    1692:	2f 91       	pop	r18
    1694:	0f 90       	pop	r0
    1696:	0b be       	out	0x3b, r0	; 59
    1698:	0f 90       	pop	r0
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	0f 90       	pop	r0
    169e:	1f 90       	pop	r1
    16a0:	18 95       	reti

000016a2 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    16a2:	cf 92       	push	r12
    16a4:	df 92       	push	r13
    16a6:	ef 92       	push	r14
    16a8:	ff 92       	push	r15
    16aa:	0f 93       	push	r16
    16ac:	1f 93       	push	r17
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	29 97       	sbiw	r28, 0x09	; 9
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	6b 01       	movw	r12, r22
    16c4:	8a 01       	movw	r16, r20
    16c6:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    16c8:	90 e8       	ldi	r25, 0x80	; 128
    16ca:	90 93 20 05 	sts	0x0520, r25
    16ce:	96 e0       	ldi	r25, 0x06	; 6
    16d0:	90 93 21 05 	sts	0x0521, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    16da:	90 93 23 05 	sts	0x0523, r25
    16de:	80 93 22 05 	sts	0x0522, r24
    16e2:	10 92 25 05 	sts	0x0525, r1
    16e6:	10 92 24 05 	sts	0x0524, r1
    16ea:	89 e0       	ldi	r24, 0x09	; 9
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	90 93 27 05 	sts	0x0527, r25
    16f2:	80 93 26 05 	sts	0x0526, r24
    16f6:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    16fa:	ce 01       	movw	r24, r28
    16fc:	01 96       	adiw	r24, 0x01	; 1
    16fe:	98 d0       	rcall	.+304    	; 0x1830 <USB_Host_SendControlRequest>
    1700:	88 23       	and	r24, r24
    1702:	b9 f4       	brne	.+46     	; 0x1732 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1706:	9c 81       	ldd	r25, Y+4	; 0x04
    1708:	f6 01       	movw	r30, r12
    170a:	91 83       	std	Z+1, r25	; 0x01
    170c:	80 83       	st	Z, r24
    170e:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
    1710:	f9 06       	cpc	r15, r25
    1712:	70 f0       	brcs	.+28     	; 0x1730 <USB_Host_GetDeviceConfigDescriptor+0x8e>
    1714:	90 93 27 05 	sts	0x0527, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1718:	80 93 26 05 	sts	0x0526, r24
    171c:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    171e:	88 d0       	rcall	.+272    	; 0x1830 <USB_Host_SendControlRequest>
    1720:	88 23       	and	r24, r24
    1722:	39 f4       	brne	.+14     	; 0x1732 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1724:	f8 01       	movw	r30, r16
    1726:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1728:	92 30       	cpi	r25, 0x02	; 2
    172a:	19 f0       	breq	.+6      	; 0x1732 <USB_Host_GetDeviceConfigDescriptor+0x90>
    172c:	86 e0       	ldi	r24, 0x06	; 6
    172e:	01 c0       	rjmp	.+2      	; 0x1732 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    1730:	85 e0       	ldi	r24, 0x05	; 5
    1732:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1734:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	1f 91       	pop	r17
    1744:	0f 91       	pop	r16
    1746:	ff 90       	pop	r15
    1748:	ef 90       	pop	r14
    174a:	df 90       	pop	r13
    174c:	cf 90       	pop	r12
    174e:	08 95       	ret

00001750 <USB_GetNextDescriptorComp>:
    1750:	af 92       	push	r10
    1752:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1754:	cf 92       	push	r12
    1756:	df 92       	push	r13
    1758:	ef 92       	push	r14
    175a:	ff 92       	push	r15
    175c:	0f 93       	push	r16
    175e:	1f 93       	push	r17
    1760:	cf 93       	push	r28
    1762:	df 93       	push	r29
    1764:	7c 01       	movw	r14, r24
    1766:	8b 01       	movw	r16, r22
    1768:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    176a:	28 c0       	rjmp	.+80     	; 0x17bc <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    176c:	f8 01       	movw	r30, r16
    176e:	c0 80       	ld	r12, Z
    1770:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1772:	f6 01       	movw	r30, r12
    1774:	80 81       	ld	r24, Z
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	9e 01       	movw	r18, r28
    177a:	8c 17       	cp	r24, r28
    177c:	9d 07       	cpc	r25, r29
    177e:	08 f4       	brcc	.+2      	; 0x1782 <USB_GetNextDescriptorComp+0x32>
    1780:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1782:	c6 01       	movw	r24, r12
    1784:	82 0f       	add	r24, r18
    1786:	93 1f       	adc	r25, r19
    1788:	f8 01       	movw	r30, r16
    178a:	91 83       	std	Z+1, r25	; 0x01
    178c:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
    178e:	f7 01       	movw	r30, r14
    1790:	80 81       	ld	r24, Z
    1792:	91 81       	ldd	r25, Z+1	; 0x01
    1794:	82 1b       	sub	r24, r18
    1796:	93 0b       	sbc	r25, r19
    1798:	91 83       	std	Z+1, r25	; 0x01
    179a:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    179c:	f8 01       	movw	r30, r16
    179e:	80 81       	ld	r24, Z
    17a0:	91 81       	ldd	r25, Z+1	; 0x01
    17a2:	f5 01       	movw	r30, r10
    17a4:	09 95       	icall
    17a6:	82 30       	cpi	r24, 0x02	; 2
    17a8:	49 f0       	breq	.+18     	; 0x17bc <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	69 f4       	brne	.+26     	; 0x17c8 <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
    17ae:	f8 01       	movw	r30, r16
    17b0:	d1 82       	std	Z+1, r13	; 0x01
    17b2:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
    17b4:	f7 01       	movw	r30, r14
    17b6:	d1 83       	std	Z+1, r29	; 0x01
    17b8:	c0 83       	st	Z, r28
    17ba:	06 c0       	rjmp	.+12     	; 0x17c8 <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    17bc:	f7 01       	movw	r30, r14
    17be:	c0 81       	ld	r28, Z
    17c0:	d1 81       	ldd	r29, Z+1	; 0x01
    17c2:	20 97       	sbiw	r28, 0x00	; 0
    17c4:	99 f6       	brne	.-90     	; 0x176c <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    17c6:	82 e0       	ldi	r24, 0x02	; 2
}
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	1f 91       	pop	r17
    17ce:	0f 91       	pop	r16
    17d0:	ff 90       	pop	r15
    17d2:	ef 90       	pop	r14
    17d4:	df 90       	pop	r13
    17d6:	cf 90       	pop	r12
    17d8:	bf 90       	pop	r11
    17da:	af 90       	pop	r10
    17dc:	08 95       	ret

000017de <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    17de:	08 95       	ret

000017e0 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    17e8:	c9 ee       	ldi	r28, 0xE9	; 233
    17ea:	d3 e0       	ldi	r29, 0x03	; 3
    17ec:	06 c0       	rjmp	.+12     	; 0x17fa <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	7d db       	rcall	.-2310   	; 0xeec <USB_Host_WaitMS>
    17f2:	88 23       	and	r24, r24
    17f4:	c9 f4       	brne	.+50     	; 0x1828 <USB_Host_WaitForIOS+0x48>
    17f6:	21 97       	sbiw	r28, 0x01	; 1
    17f8:	b1 f0       	breq	.+44     	; 0x1826 <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    17fa:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    17fc:	29 f4       	brne	.+10     	; 0x1808 <USB_Host_WaitForIOS+0x28>
    17fe:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1802:	83 ff       	sbrs	r24, 3
    1804:	f4 cf       	rjmp	.-24     	; 0x17ee <USB_Host_WaitForIOS+0xe>
    1806:	0d c0       	rjmp	.+26     	; 0x1822 <USB_Host_WaitForIOS+0x42>
    1808:	11 30       	cpi	r17, 0x01	; 1
    180a:	29 f4       	brne	.+10     	; 0x1816 <USB_Host_WaitForIOS+0x36>
    180c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1810:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1812:	ed cf       	rjmp	.-38     	; 0x17ee <USB_Host_WaitForIOS+0xe>
    1814:	06 c0       	rjmp	.+12     	; 0x1822 <USB_Host_WaitForIOS+0x42>
    1816:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1818:	51 f7       	brne	.-44     	; 0x17ee <USB_Host_WaitForIOS+0xe>
    181a:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    181e:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1820:	e6 cf       	rjmp	.-52     	; 0x17ee <USB_Host_WaitForIOS+0xe>
    1822:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1824:	01 c0       	rjmp	.+2      	; 0x1828 <USB_Host_WaitForIOS+0x48>
    1826:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1828:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
    182a:	cf 91       	pop	r28
    182c:	1f 91       	pop	r17
    182e:	08 95       	ret

00001830 <USB_Host_SendControlRequest>:
    1830:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1832:	ff 92       	push	r15
    1834:	0f 93       	push	r16
    1836:	1f 93       	push	r17
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    183e:	e0 90 9e 00 	lds	r14, 0x009E
    1842:	ff 24       	eor	r15, r15
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	e8 22       	and	r14, r24
    1848:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    184a:	00 91 26 05 	lds	r16, 0x0526
    184e:	10 91 27 05 	lds	r17, 0x0527
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1852:	80 91 9e 00 	lds	r24, 0x009E
    1856:	81 60       	ori	r24, 0x01	; 1
    1858:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	46 db       	rcall	.-2420   	; 0xeec <USB_Host_WaitMS>
    1860:	88 23       	and	r24, r24
    1862:	09 f0       	breq	.+2      	; 0x1866 <USB_Host_SendControlRequest+0x36>
    1864:	ca c0       	rjmp	.+404    	; 0x19fa <USB_Host_SendControlRequest+0x1ca>
    1866:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    186a:	8f 7c       	andi	r24, 0xCF	; 207
    186c:	80 93 aa 00 	sts	0x00AA, r24
    1870:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1874:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    1878:	8f 7e       	andi	r24, 0xEF	; 239
    187a:	80 93 a6 00 	sts	0x00A6, r24
    187e:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1882:	8f 7b       	andi	r24, 0xBF	; 191
    1884:	80 93 a9 00 	sts	0x00A9, r24
    1888:	88 e0       	ldi	r24, 0x08	; 8
    188a:	e0 e2       	ldi	r30, 0x20	; 32
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    188c:	f5 e0       	ldi	r31, 0x05	; 5
    188e:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1890:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1894:	81 50       	subi	r24, 0x01	; 1
    1896:	d9 f7       	brne	.-10     	; 0x188e <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1898:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    189c:	87 77       	andi	r24, 0x77	; 119
    189e:	80 93 a6 00 	sts	0x00A6, r24
    18a2:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    18a4:	9d df       	rcall	.-198    	; 0x17e0 <USB_Host_WaitForIOS>
    18a6:	88 23       	and	r24, r24
    18a8:	09 f0       	breq	.+2      	; 0x18ac <USB_Host_SendControlRequest+0x7c>
    18aa:	a7 c0       	rjmp	.+334    	; 0x19fa <USB_Host_SendControlRequest+0x1ca>
    18ac:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    18b0:	80 64       	ori	r24, 0x40	; 64
    18b2:	80 93 a9 00 	sts	0x00A9, r24
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	19 db       	rcall	.-2510   	; 0xeec <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    18ba:	88 23       	and	r24, r24
    18bc:	09 f0       	breq	.+2      	; 0x18c0 <USB_Host_SendControlRequest+0x90>
    18be:	9d c0       	rjmp	.+314    	; 0x19fa <USB_Host_SendControlRequest+0x1ca>
    18c0:	80 91 20 05 	lds	r24, 0x0520
    18c4:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    18c6:	4f c0       	rjmp	.+158    	; 0x1966 <USB_Host_SendControlRequest+0x136>
    18c8:	80 91 aa 00 	lds	r24, 0x00AA
    18cc:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    18ce:	80 61       	ori	r24, 0x10	; 16
    18d0:	80 93 aa 00 	sts	0x00AA, r24
    18d4:	20 97       	sbiw	r28, 0x00	; 0
    18d6:	61 f5       	brne	.+88     	; 0x1930 <USB_Host_SendControlRequest+0x100>
    18d8:	2e c0       	rjmp	.+92     	; 0x1936 <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    18da:	80 91 a9 00 	lds	r24, 0x00A9
    18de:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    18e0:	80 93 a9 00 	sts	0x00A9, r24
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	7c df       	rcall	.-264    	; 0x17e0 <USB_Host_WaitForIOS>
    18e8:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    18ea:	09 f0       	breq	.+2      	; 0x18ee <USB_Host_SendControlRequest+0xbe>
    18ec:	86 c0       	rjmp	.+268    	; 0x19fa <USB_Host_SendControlRequest+0x1ca>
    18ee:	80 91 f6 00 	lds	r24, 0x00F6
    18f2:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	41 f4       	brne	.+16     	; 0x190a <USB_Host_SendControlRequest+0xda>
    18fa:	00 e0       	ldi	r16, 0x00	; 0
    18fc:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    18fe:	05 c0       	rjmp	.+10     	; 0x190a <USB_Host_SendControlRequest+0xda>
    1900:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
    1904:	89 93       	st	Y+, r24
    1906:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1908:	10 40       	sbci	r17, 0x00	; 0
    190a:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
    190e:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	19 f0       	breq	.+6      	; 0x191c <USB_Host_SendControlRequest+0xec>
    1916:	01 15       	cp	r16, r1
    1918:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    191a:	91 f7       	brne	.-28     	; 0x1900 <USB_Host_SendControlRequest+0xd0>
    191c:	80 91 a9 00 	lds	r24, 0x00A9
    1920:	80 64       	ori	r24, 0x40	; 64
    1922:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1926:	80 91 a6 00 	lds	r24, 0x00A6
    192a:	8e 77       	andi	r24, 0x7E	; 126
    192c:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1930:	01 15       	cp	r16, r1
    1932:	11 05       	cpc	r17, r1
    1934:	91 f6       	brne	.-92     	; 0x18da <USB_Host_SendControlRequest+0xaa>
    1936:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    193a:	8f 7c       	andi	r24, 0xCF	; 207
    193c:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    193e:	80 93 aa 00 	sts	0x00AA, r24
    1942:	80 91 a9 00 	lds	r24, 0x00A9
    1946:	8f 7b       	andi	r24, 0xBF	; 191
    1948:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    194c:	82 e0       	ldi	r24, 0x02	; 2
    194e:	48 df       	rcall	.-368    	; 0x17e0 <USB_Host_WaitForIOS>
    1950:	88 23       	and	r24, r24
    1952:	09 f0       	breq	.+2      	; 0x1956 <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1954:	52 c0       	rjmp	.+164    	; 0x19fa <USB_Host_SendControlRequest+0x1ca>
    1956:	80 91 a6 00 	lds	r24, 0x00A6
    195a:	8b 77       	andi	r24, 0x7B	; 123
    195c:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1960:	82 e0       	ldi	r24, 0x02	; 2
    1962:	3e df       	rcall	.-388    	; 0x17e0 <USB_Host_WaitForIOS>
    1964:	4a c0       	rjmp	.+148    	; 0x19fa <USB_Host_SendControlRequest+0x1ca>
    1966:	20 97       	sbiw	r28, 0x00	; 0
    1968:	a1 f1       	breq	.+104    	; 0x19d2 <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    196a:	80 91 aa 00 	lds	r24, 0x00AA
    196e:	8f 7c       	andi	r24, 0xCF	; 207
    1970:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1972:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1976:	80 91 a9 00 	lds	r24, 0x00A9
    197a:	8f 7b       	andi	r24, 0xBF	; 191
    197c:	80 93 a9 00 	sts	0x00A9, r24
    1980:	1c c0       	rjmp	.+56     	; 0x19ba <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1982:	2e df       	rcall	.-420    	; 0x17e0 <USB_Host_WaitForIOS>
    1984:	88 23       	and	r24, r24
    1986:	c9 f5       	brne	.+114    	; 0x19fa <USB_Host_SendControlRequest+0x1ca>
    1988:	fe 01       	movw	r30, r28
    198a:	07 c0       	rjmp	.+14     	; 0x199a <USB_Host_SendControlRequest+0x16a>
    198c:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    198e:	ef 01       	movw	r28, r30
    1990:	80 93 af 00 	sts	0x00AF, r24
    1994:	01 50       	subi	r16, 0x01	; 1
    1996:	10 40       	sbci	r17, 0x00	; 0
    1998:	59 f0       	breq	.+22     	; 0x19b0 <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    199a:	ef 01       	movw	r28, r30
    199c:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    19a0:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    19a4:	80 91 27 01 	lds	r24, 0x0127
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    19a8:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    19aa:	28 17       	cp	r18, r24
    19ac:	39 07       	cpc	r19, r25
    19ae:	70 f3       	brcs	.-36     	; 0x198c <USB_Host_SendControlRequest+0x15c>
    19b0:	80 91 a6 00 	lds	r24, 0x00A6
    19b4:	8b 77       	andi	r24, 0x7B	; 123
    19b6:	80 93 a6 00 	sts	0x00A6, r24
    19ba:	82 e0       	ldi	r24, 0x02	; 2
    19bc:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    19be:	11 05       	cpc	r17, r1
    19c0:	01 f7       	brne	.-64     	; 0x1982 <USB_Host_SendControlRequest+0x152>
    19c2:	0e df       	rcall	.-484    	; 0x17e0 <USB_Host_WaitForIOS>
    19c4:	88 23       	and	r24, r24
    19c6:	c9 f4       	brne	.+50     	; 0x19fa <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    19c8:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    19cc:	80 64       	ori	r24, 0x40	; 64
    19ce:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    19d2:	80 91 aa 00 	lds	r24, 0x00AA
    19d6:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    19d8:	80 61       	ori	r24, 0x10	; 16
    19da:	80 93 aa 00 	sts	0x00AA, r24
    19de:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    19e2:	8f 7b       	andi	r24, 0xBF	; 191
    19e4:	80 93 a9 00 	sts	0x00A9, r24
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	fa de       	rcall	.-524    	; 0x17e0 <USB_Host_WaitForIOS>
    19ec:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    19ee:	29 f4       	brne	.+10     	; 0x19fa <USB_Host_SendControlRequest+0x1ca>
    19f0:	90 91 a6 00 	lds	r25, 0x00A6
    19f4:	9e 77       	andi	r25, 0x7E	; 126
    19f6:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    19fa:	90 91 a9 00 	lds	r25, 0x00A9
    19fe:	90 64       	ori	r25, 0x40	; 64
    1a00:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1a04:	e1 14       	cp	r14, r1
    1a06:	f1 04       	cpc	r15, r1
    1a08:	29 f4       	brne	.+10     	; 0x1a14 <USB_Host_SendControlRequest+0x1e4>
    1a0a:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1a0e:	9e 7f       	andi	r25, 0xFE	; 254
    1a10:	90 93 9e 00 	sts	0x009E, r25
    1a14:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1a16:	90 93 a8 00 	sts	0x00A8, r25
    1a1a:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	1f 91       	pop	r17
    1a24:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1a26:	ff 90       	pop	r15
    1a28:	ef 90       	pop	r14
    1a2a:	08 95       	ret

00001a2c <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    1a2c:	cf 93       	push	r28
    1a2e:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1a30:	10 92 20 05 	sts	0x0520, r1
    1a34:	89 e0       	ldi	r24, 0x09	; 9
    1a36:	80 93 21 05 	sts	0x0521, r24
    1a3a:	c0 93 22 05 	sts	0x0522, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1a3e:	10 92 23 05 	sts	0x0523, r1
    1a42:	10 92 25 05 	sts	0x0525, r1
    1a46:	10 92 24 05 	sts	0x0524, r1
    1a4a:	10 92 27 05 	sts	0x0527, r1
    1a4e:	10 92 26 05 	sts	0x0526, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1a52:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	ea de       	rcall	.-556    	; 0x1830 <USB_Host_SendControlRequest>
    1a5c:	88 23       	and	r24, r24
    1a5e:	49 f4       	brne	.+18     	; 0x1a72 <USB_Host_SetDeviceConfiguration+0x46>
    1a60:	c0 93 1e 05 	sts	0x051E, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1a64:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1a66:	11 f0       	breq	.+4      	; 0x1a6c <USB_Host_SetDeviceConfiguration+0x40>
    1a68:	9b e0       	ldi	r25, 0x0B	; 11
    1a6a:	01 c0       	rjmp	.+2      	; 0x1a6e <USB_Host_SetDeviceConfiguration+0x42>
    1a6c:	9a e0       	ldi	r25, 0x0A	; 10
    1a6e:	90 93 28 05 	sts	0x0528, r25
    1a72:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1a74:	08 95       	ret

00001a76 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1a76:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1a78:	c0 91 a7 00 	lds	r28, 0x00A7
    1a7c:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1a7e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1a82:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1a86:	87 da       	rcall	.-2802   	; 0xf96 <USB_Host_ProcessNextHostState>
    1a88:	c0 93 a7 00 	sts	0x00A7, r28
    1a8c:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1a8e:	08 95       	ret

00001a90 <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    1a90:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1a92:	81 81       	ldd	r24, Z+1	; 0x01
    1a94:	84 30       	cpi	r24, 0x04	; 4
    1a96:	19 f4       	brne	.+6      	; 0x1a9e <DCOMP_HID_Host_NextHIDInterface+0xe>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    1a98:	85 81       	ldd	r24, Z+5	; 0x05
    1a9a:	83 30       	cpi	r24, 0x03	; 3
    1a9c:	11 f0       	breq	.+4      	; 0x1aa2 <DCOMP_HID_Host_NextHIDInterface+0x12>
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1a9e:	82 e0       	ldi	r24, 0x02	; 2
    1aa0:	08 95       	ret
	if (Header->Type == DTYPE_Interface)
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
		  return DESCRIPTOR_SEARCH_Found;
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1aa4:	08 95       	ret

00001aa6 <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	81 81       	ldd	r24, Z+1	; 0x01
    1aaa:	81 32       	cpi	r24, 0x21	; 33
    1aac:	21 f0       	breq	.+8      	; 0x1ab6 <DCOMP_HID_Host_NextHIDDescriptor+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    1aae:	84 30       	cpi	r24, 0x04	; 4
    1ab0:	21 f4       	brne	.+8      	; 0x1aba <DCOMP_HID_Host_NextHIDDescriptor+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	08 95       	ret
static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
    1aba:	82 e0       	ldi	r24, 0x02	; 2
}
    1abc:	08 95       	ret

00001abe <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    1abe:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1ac0:	81 81       	ldd	r24, Z+1	; 0x01
    1ac2:	85 30       	cpi	r24, 0x05	; 5
    1ac4:	29 f4       	brne	.+10     	; 0x1ad0 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1ac6:	82 81       	ldd	r24, Z+2	; 0x02
    1ac8:	80 dc       	rcall	.-1792   	; 0x13ca <Pipe_IsEndpointBound>
    1aca:	88 23       	and	r24, r24
    1acc:	19 f4       	brne	.+6      	; 0x1ad4 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x16>
    1ace:	04 c0       	rjmp	.+8      	; 0x1ad8 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1a>
    1ad0:	84 30       	cpi	r24, 0x04	; 4
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1ad2:	21 f0       	breq	.+8      	; 0x1adc <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1e>
    1ad4:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1ad6:	08 95       	ret
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
    1ada:	08 95       	ret
    1adc:	81 e0       	ldi	r24, 0x01	; 1
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    1ade:	08 95       	ret

00001ae0 <HID_Host_ConfigurePipes>:
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1ae0:	8f 92       	push	r8
#include "HIDClassHost.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    1ae2:	9f 92       	push	r9
    1ae4:	af 92       	push	r10
    1ae6:	bf 92       	push	r11
    1ae8:	cf 92       	push	r12
    1aea:	df 92       	push	r13
    1aec:	ef 92       	push	r14
    1aee:	ff 92       	push	r15
    1af0:	0f 93       	push	r16
    1af2:	1f 93       	push	r17
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <HID_Host_ConfigurePipes+0x1a>
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <HID_Host_ConfigurePipes+0x1c>
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	8c 01       	movw	r16, r24
    1b02:	7a 83       	std	Y+2, r23	; 0x02
    1b04:	69 83       	std	Y+1, r22	; 0x01
    1b06:	5c 83       	std	Y+4, r21	; 0x04
    1b08:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1b0a:	0f 96       	adiw	r24, 0x0f	; 15
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	88 e0       	ldi	r24, 0x08	; 8
    1b10:	df 01       	movw	r26, r30
    1b12:	1d 92       	st	X+, r1
    1b14:	8a 95       	dec	r24
    1b16:	e9 f7       	brne	.-6      	; 0x1b12 <HID_Host_ConfigurePipes+0x32>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1b18:	eb 81       	ldd	r30, Y+3	; 0x03
    1b1a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b1c:	81 81       	ldd	r24, Z+1	; 0x01
    1b1e:	82 30       	cpi	r24, 0x02	; 2
    1b20:	09 f0       	breq	.+2      	; 0x1b24 <HID_Host_ConfigurePipes+0x44>
    1b22:	97 c0       	rjmp	.+302    	; 0x1c52 <HID_Host_ConfigurePipes+0x172>
    1b24:	88 24       	eor	r8, r8
    1b26:	99 24       	eor	r9, r9
    1b28:	aa 24       	eor	r10, r10
    1b2a:	bb 24       	eor	r11, r11
    1b2c:	ee 24       	eor	r14, r14
    1b2e:	ff 24       	eor	r15, r15
    1b30:	cc 24       	eor	r12, r12
    1b32:	dd 24       	eor	r13, r13
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1b34:	a1 14       	cp	r10, r1
    1b36:	b1 04       	cpc	r11, r1
    1b38:	51 f0       	breq	.+20     	; 0x1b4e <HID_Host_ConfigurePipes+0x6e>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	01 96       	adiw	r24, 0x01	; 1
    1b3e:	be 01       	movw	r22, r28
    1b40:	6d 5f       	subi	r22, 0xFD	; 253
    1b42:	7f 4f       	sbci	r23, 0xFF	; 255
    1b44:	4f e5       	ldi	r20, 0x5F	; 95
    1b46:	5d e0       	ldi	r21, 0x0D	; 13
    1b48:	03 de       	rcall	.-1018   	; 0x1750 <USB_GetNextDescriptorComp>
    1b4a:	88 23       	and	r24, r24
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1b4c:	51 f1       	breq	.+84     	; 0x1ba2 <HID_Host_ConfigurePipes+0xc2>
    1b4e:	c1 14       	cp	r12, r1
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint)
    1b50:	d1 04       	cpc	r13, r1
    1b52:	b9 f5       	brne	.+110    	; 0x1bc2 <HID_Host_ConfigurePipes+0xe2>
    1b54:	ce 01       	movw	r24, r28
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1b56:	01 96       	adiw	r24, 0x01	; 1
    1b58:	be 01       	movw	r22, r28
    1b5a:	6d 5f       	subi	r22, 0xFD	; 253
    1b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5e:	48 e4       	ldi	r20, 0x48	; 72
    1b60:	5d e0       	ldi	r21, 0x0D	; 13
    1b62:	f6 dd       	rcall	.-1044   	; 0x1750 <USB_GetNextDescriptorComp>
    1b64:	88 23       	and	r24, r24
    1b66:	09 f0       	breq	.+2      	; 0x1b6a <HID_Host_ConfigurePipes+0x8a>
    1b68:	76 c0       	rjmp	.+236    	; 0x1c56 <HID_Host_ConfigurePipes+0x176>
    1b6a:	ab 80       	ldd	r10, Y+3	; 0x03
    1b6c:	bc 80       	ldd	r11, Y+4	; 0x04
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1b6e:	f8 01       	movw	r30, r16
    1b70:	84 85       	ldd	r24, Z+12	; 0x0c
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1b72:	88 23       	and	r24, r24
    1b74:	31 f0       	breq	.+12     	; 0x1b82 <HID_Host_ConfigurePipes+0xa2>
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    1b76:	d5 01       	movw	r26, r10
    1b78:	17 96       	adiw	r26, 0x07	; 7
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1b7a:	9c 91       	ld	r25, X
    1b7c:	17 97       	sbiw	r26, 0x07	; 7
    1b7e:	98 17       	cp	r25, r24
    1b80:	49 f7       	brne	.-46     	; 0x1b54 <HID_Host_ConfigurePipes+0x74>
    1b82:	ce 01       	movw	r24, r28
    1b84:	01 96       	adiw	r24, 0x01	; 1
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1b86:	be 01       	movw	r22, r28
    1b88:	6d 5f       	subi	r22, 0xFD	; 253
    1b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8c:	43 e5       	ldi	r20, 0x53	; 83
    1b8e:	5d e0       	ldi	r21, 0x0D	; 13
    1b90:	df dd       	rcall	.-1090   	; 0x1750 <USB_GetNextDescriptorComp>
    1b92:	88 23       	and	r24, r24
    1b94:	09 f0       	breq	.+2      	; 0x1b98 <HID_Host_ConfigurePipes+0xb8>
    1b96:	5f c0       	rjmp	.+190    	; 0x1c56 <HID_Host_ConfigurePipes+0x176>
    1b98:	8b 80       	ldd	r8, Y+3	; 0x03
    1b9a:	9c 80       	ldd	r9, Y+4	; 0x04
    1b9c:	ee 24       	eor	r14, r14
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    1b9e:	ff 24       	eor	r15, r15
    1ba0:	c9 cf       	rjmp	.-110    	; 0x1b34 <HID_Host_ConfigurePipes+0x54>

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    1ba2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ba4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ba6:	82 81       	ldd	r24, Z+2	; 0x02

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1ba8:	87 ff       	sbrs	r24, 7
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <HID_Host_ConfigurePipes+0xd0>

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1bac:	6f 01       	movw	r12, r30
    1bae:	01 c0       	rjmp	.+2      	; 0x1bb2 <HID_Host_ConfigurePipes+0xd2>
    1bb0:	7f 01       	movw	r14, r30
		  DataINEndpoint  = EndpointData;
    1bb2:	c1 14       	cp	r12, r1
    1bb4:	d1 04       	cpc	r13, r1
		else
		  DataOUTEndpoint = EndpointData;
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <HID_Host_ConfigurePipes+0xda>
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1bb8:	bd cf       	rjmp	.-134    	; 0x1b34 <HID_Host_ConfigurePipes+0x54>
    1bba:	e1 14       	cp	r14, r1
    1bbc:	f1 04       	cpc	r15, r1
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <HID_Host_ConfigurePipes+0xe2>
    1bc0:	b9 cf       	rjmp	.-142    	; 0x1b34 <HID_Host_ConfigurePipes+0x54>
    1bc2:	f6 01       	movw	r30, r12
    1bc4:	84 81       	ldd	r24, Z+4	; 0x04
    1bc6:	95 81       	ldd	r25, Z+5	; 0x05
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	HIDInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    1bc8:	d8 01       	movw	r26, r16
    1bca:	12 96       	adiw	r26, 0x02	; 2
    1bcc:	9c 93       	st	X, r25
    1bce:	8e 93       	st	-X, r24
    1bd0:	11 97       	sbiw	r26, 0x01	; 1
    1bd2:	82 81       	ldd	r24, Z+2	; 0x02
    1bd4:	13 96       	adiw	r26, 0x03	; 3
    1bd6:	8c 93       	st	X, r24
	HIDInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1bd8:	13 97       	sbiw	r26, 0x03	; 3
    1bda:	83 e0       	ldi	r24, 0x03	; 3
    1bdc:	c8 2e       	mov	r12, r24
    1bde:	14 96       	adiw	r26, 0x04	; 4
	HIDInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_INTERRUPT;
    1be0:	cc 92       	st	X, r12
    1be2:	c8 01       	movw	r24, r16
    1be4:	61 e0       	ldi	r22, 0x01	; 1
    1be6:	bc db       	rcall	.-2184   	; 0x1360 <Pipe_ConfigurePipeTable>

	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
    1be8:	88 23       	and	r24, r24
    1bea:	b9 f1       	breq	.+110    	; 0x1c5a <HID_Host_ConfigurePipes+0x17a>
    1bec:	e1 14       	cp	r14, r1
    1bee:	f1 04       	cpc	r15, r1
    1bf0:	a1 f0       	breq	.+40     	; 0x1c1a <HID_Host_ConfigurePipes+0x13a>
    1bf2:	f7 01       	movw	r30, r14
	  return false;

	if (DataOUTEndpoint)
    1bf4:	84 81       	ldd	r24, Z+4	; 0x04
    1bf6:	95 81       	ldd	r25, Z+5	; 0x05
    1bf8:	d8 01       	movw	r26, r16
	{
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1bfa:	18 96       	adiw	r26, 0x08	; 8
    1bfc:	9c 93       	st	X, r25
    1bfe:	8e 93       	st	-X, r24
    1c00:	17 97       	sbiw	r26, 0x07	; 7
    1c02:	82 81       	ldd	r24, Z+2	; 0x02
    1c04:	19 96       	adiw	r26, 0x09	; 9
    1c06:	8c 93       	st	X, r24
    1c08:	19 97       	sbiw	r26, 0x09	; 9
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1c0a:	1a 96       	adiw	r26, 0x0a	; 10
    1c0c:	cc 92       	st	X, r12
    1c0e:	c8 01       	movw	r24, r16
    1c10:	06 96       	adiw	r24, 0x06	; 6
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;
    1c12:	61 e0       	ldi	r22, 0x01	; 1
    1c14:	a5 db       	rcall	.-2230   	; 0x1360 <Pipe_ConfigurePipeTable>

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
    1c16:	88 23       	and	r24, r24
    1c18:	01 f1       	breq	.+64     	; 0x1c5a <HID_Host_ConfigurePipes+0x17a>
    1c1a:	f5 01       	movw	r30, r10
    1c1c:	82 81       	ldd	r24, Z+2	; 0x02
    1c1e:	d8 01       	movw	r26, r16
    1c20:	50 96       	adiw	r26, 0x10	; 16
    1c22:	8c 93       	st	X, r24
		  return false;
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    1c24:	50 97       	sbiw	r26, 0x10	; 16
    1c26:	f4 01       	movw	r30, r8
    1c28:	87 81       	ldd	r24, Z+7	; 0x07
    1c2a:	90 85       	ldd	r25, Z+8	; 0x08
    1c2c:	55 96       	adiw	r26, 0x15	; 21
    1c2e:	9c 93       	st	X, r25
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    1c30:	8e 93       	st	-X, r24
    1c32:	54 97       	sbiw	r26, 0x14	; 20
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	d5 01       	movw	r26, r10
    1c38:	16 96       	adiw	r26, 0x06	; 6
    1c3a:	9c 91       	ld	r25, X
    1c3c:	16 97       	sbiw	r26, 0x06	; 6
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    1c3e:	99 23       	and	r25, r25
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <HID_Host_ConfigurePipes+0x164>
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	f8 01       	movw	r30, r16
    1c46:	81 8b       	std	Z+17, r24	; 0x11
    1c48:	88 e0       	ldi	r24, 0x08	; 8
    1c4a:	86 8b       	std	Z+22, r24	; 0x16
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	87 87       	std	Z+15, r24	; 0x0f
    1c50:	04 c0       	rjmp	.+8      	; 0x1c5a <HID_Host_ConfigurePipes+0x17a>
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	03 c0       	rjmp	.+6      	; 0x1c5c <HID_Host_ConfigurePipes+0x17c>
	HIDInterfaceInfo->State.IsActive             = true;
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	01 c0       	rjmp	.+2      	; 0x1c5c <HID_Host_ConfigurePipes+0x17c>
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
		  return false;
    1c64:	df 91       	pop	r29
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
	HIDInterfaceInfo->State.LargestReportSize    = 8;
	HIDInterfaceInfo->State.IsActive             = true;

	return HID_ENUMERROR_NoError;
}
    1c66:	cf 91       	pop	r28
    1c68:	1f 91       	pop	r17
    1c6a:	0f 91       	pop	r16
    1c6c:	ff 90       	pop	r15
    1c6e:	ef 90       	pop	r14
    1c70:	df 90       	pop	r13
    1c72:	cf 90       	pop	r12
    1c74:	bf 90       	pop	r11
    1c76:	af 90       	pop	r10
    1c78:	9f 90       	pop	r9
    1c7a:	8f 90       	pop	r8
    1c7c:	08 95       	ret

00001c7e <HID_Host_ReceiveReport>:
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	fc 01       	movw	r30, r24
    1c84:	80 91 28 05 	lds	r24, 0x0528
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1c88:	8b 30       	cpi	r24, 0x0B	; 11
    1c8a:	d9 f5       	brne	.+118    	; 0x1d02 <HID_Host_ReceiveReport+0x84>
    1c8c:	87 85       	ldd	r24, Z+15	; 0x0f
    1c8e:	88 23       	and	r24, r24
    1c90:	c1 f1       	breq	.+112    	; 0x1d02 <HID_Host_ReceiveReport+0x84>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1c92:	80 81       	ld	r24, Z
    1c94:	8f 70       	andi	r24, 0x0F	; 15
    1c96:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c9a:	80 91 a9 00 	lds	r24, 0x00A9
    1c9e:	8f 7b       	andi	r24, 0xBF	; 191
    1ca0:	80 93 a9 00 	sts	0x00A9, r24

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    1ca4:	83 89       	ldd	r24, Z+19	; 0x13
    1ca6:	88 23       	and	r24, r24
    1ca8:	a9 f4       	brne	.+42     	; 0x1cd4 <HID_Host_ReceiveReport+0x56>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    1caa:	a5 85       	ldd	r26, Z+13	; 0x0d
    1cac:	b6 85       	ldd	r27, Z+14	; 0x0e
    1cae:	a8 52       	subi	r26, 0x28	; 40
    1cb0:	bc 4f       	sbci	r27, 0xFC	; 252
    1cb2:	8c 91       	ld	r24, X
    1cb4:	88 23       	and	r24, r24
    1cb6:	29 f0       	breq	.+10     	; 0x1cc2 <HID_Host_ReceiveReport+0x44>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1cb8:	20 91 af 00 	lds	r18, 0x00AF
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
    1cbc:	eb 01       	movw	r28, r22
    1cbe:	29 93       	st	Y+, r18
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <HID_Host_ReceiveReport+0x48>

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    1cc2:	eb 01       	movw	r28, r22

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
	{
		uint8_t ReportID = 0;
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    1cc6:	85 85       	ldd	r24, Z+13	; 0x0d
    1cc8:	96 85       	ldd	r25, Z+14	; 0x0e
    1cca:	62 2f       	mov	r22, r18
    1ccc:	40 e0       	ldi	r20, 0x00	; 0
    1cce:	88 d8       	rcall	.-3824   	; 0xde0 <USB_GetHIDReportSize>
    1cd0:	9c 01       	movw	r18, r24
    1cd2:	05 c0       	rjmp	.+10     	; 0x1cde <HID_Host_ReceiveReport+0x60>
    1cd4:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1cd8:	30 91 f7 00 	lds	r19, 0x00F7
    1cdc:	eb 01       	movw	r28, r22

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    1cde:	ce 01       	movw	r24, r28
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NULL)) != PIPE_RWSTREAM_NoError)
    1ce0:	b9 01       	movw	r22, r18
    1ce2:	40 e0       	ldi	r20, 0x00	; 0
    1ce4:	50 e0       	ldi	r21, 0x00	; 0
    1ce6:	80 da       	rcall	.-2816   	; 0x11e8 <Pipe_Read_Stream_LE>
    1ce8:	88 23       	and	r24, r24
    1cea:	61 f4       	brne	.+24     	; 0x1d04 <HID_Host_ReceiveReport+0x86>
    1cec:	90 91 a6 00 	lds	r25, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1cf0:	9e 77       	andi	r25, 0x7E	; 126
    1cf2:	90 93 a6 00 	sts	0x00A6, r25
    1cf6:	90 91 a9 00 	lds	r25, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1cfa:	90 64       	ori	r25, 0x40	; 64
    1cfc:	90 93 a9 00 	sts	0x00A9, r25
    1d00:	01 c0       	rjmp	.+2      	; 0x1d04 <HID_Host_ReceiveReport+0x86>
    1d02:	82 e0       	ldi	r24, 0x02	; 2
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    1d04:	df 91       	pop	r29

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    1d06:	cf 91       	pop	r28

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    1d08:	08 95       	ret

00001d0a <HID_Host_IsReportReceived>:
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	80 91 28 05 	lds	r24, 0x0528
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1d10:	8b 30       	cpi	r24, 0x0B	; 11
    1d12:	a9 f4       	brne	.+42     	; 0x1d3e <HID_Host_IsReportReceived+0x34>
    1d14:	87 85       	ldd	r24, Z+15	; 0x0f
    1d16:	88 23       	and	r24, r24
    1d18:	a1 f0       	breq	.+40     	; 0x1d42 <HID_Host_IsReportReceived+0x38>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1d1a:	80 81       	ld	r24, Z
    1d1c:	8f 70       	andi	r24, 0x0F	; 15
    1d1e:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1d22:	80 91 a9 00 	lds	r24, 0x00A9
    1d26:	8f 7b       	andi	r24, 0xBF	; 191
    1d28:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1d2c:	80 91 a6 00 	lds	r24, 0x00A6
    1d30:	81 70       	andi	r24, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1d32:	90 91 a9 00 	lds	r25, 0x00A9
    1d36:	90 64       	ori	r25, 0x40	; 64
    1d38:	90 93 a9 00 	sts	0x00A9, r25

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    1d3c:	08 95       	ret
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
	  return false;
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	08 95       	ret
    1d42:	80 e0       	ldi	r24, 0x00	; 0
	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
}
    1d44:	08 95       	ret

00001d46 <HID_Host_SetReportProtocol>:
	return USB_Host_SendControlRequest(NULL);
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1d46:	af 92       	push	r10
    1d48:	bf 92       	push	r11
    1d4a:	cf 92       	push	r12
    1d4c:	df 92       	push	r13
    1d4e:	ef 92       	push	r14
    1d50:	ff 92       	push	r15
    1d52:	0f 93       	push	r16
    1d54:	1f 93       	push	r17
    1d56:	cf 93       	push	r28
    1d58:	df 93       	push	r29
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	8c 01       	movw	r16, r24

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1d60:	ad b6       	in	r10, 0x3d	; 61
    1d62:	be b6       	in	r11, 0x3e	; 62
#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	uint8_t HIDReportData[HIDInterfaceInfo->State.HIDReportSize];
    1d64:	dc 01       	movw	r26, r24
    1d66:	54 96       	adiw	r26, 0x14	; 20
    1d68:	4d 91       	ld	r20, X+
    1d6a:	5c 91       	ld	r21, X
    1d6c:	55 97       	sbiw	r26, 0x15	; 21
    1d6e:	ed b7       	in	r30, 0x3d	; 61
    1d70:	fe b7       	in	r31, 0x3e	; 62
    1d72:	e4 1b       	sub	r30, r20
    1d74:	f5 0b       	sbc	r31, r21
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	f8 94       	cli
    1d7a:	fe bf       	out	0x3e, r31	; 62
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	ed bf       	out	0x3d, r30	; 61
    1d80:	2d b7       	in	r18, 0x3d	; 61
    1d82:	3e b7       	in	r19, 0x3e	; 62
    1d84:	2f 5f       	subi	r18, 0xFF	; 255
    1d86:	3f 4f       	sbci	r19, 0xFF	; 255

	USB_ControlRequest = (USB_Request_Header_t)
    1d88:	50 96       	adiw	r26, 0x10	; 16
    1d8a:	6c 91       	ld	r22, X
    1d8c:	81 e8       	ldi	r24, 0x81	; 129
    1d8e:	80 93 20 05 	sts	0x0520, r24
    1d92:	86 e0       	ldi	r24, 0x06	; 6
    1d94:	80 93 21 05 	sts	0x0521, r24
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	92 e2       	ldi	r25, 0x22	; 34
    1d9c:	90 93 23 05 	sts	0x0523, r25
    1da0:	80 93 22 05 	sts	0x0522, r24
    1da4:	74 e2       	ldi	r23, 0x24	; 36
    1da6:	e7 2e       	mov	r14, r23
    1da8:	75 e0       	ldi	r23, 0x05	; 5
    1daa:	f7 2e       	mov	r15, r23
    1dac:	60 93 24 05 	sts	0x0524, r22
    1db0:	d7 01       	movw	r26, r14
    1db2:	11 96       	adiw	r26, 0x01	; 1
    1db4:	1c 92       	st	X, r1
    1db6:	50 93 27 05 	sts	0x0527, r21
    1dba:	40 93 26 05 	sts	0x0526, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1dbe:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = HIDInterfaceInfo->State.HIDReportSize,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(HIDReportData)) != HOST_SENDCONTROL_Successful)
    1dc2:	d2 2e       	mov	r13, r18
    1dc4:	c3 2e       	mov	r12, r19
    1dc6:	c9 01       	movw	r24, r18
    1dc8:	33 dd       	rcall	.-1434   	; 0x1830 <USB_Host_SendControlRequest>
    1dca:	88 23       	and	r24, r24
    1dcc:	09 f0       	breq	.+2      	; 0x1dd0 <HID_Host_SetReportProtocol+0x8a>
    1dce:	50 c0       	rjmp	.+160    	; 0x1e70 <HID_Host_SetReportProtocol+0x12a>
    1dd0:	f8 01       	movw	r30, r16
	  return ErrorCode;

	if (HIDInterfaceInfo->State.UsingBootProtocol)
    1dd2:	83 89       	ldd	r24, Z+19	; 0x13
    1dd4:	88 23       	and	r24, r24
    1dd6:	e9 f0       	breq	.+58     	; 0x1e12 <HID_Host_SetReportProtocol+0xcc>
    1dd8:	20 89       	ldd	r18, Z+16	; 0x10
	{
		USB_ControlRequest = (USB_Request_Header_t)
    1dda:	81 e2       	ldi	r24, 0x21	; 33
    1ddc:	80 93 20 05 	sts	0x0520, r24
    1de0:	8b e0       	ldi	r24, 0x0B	; 11
    1de2:	80 93 21 05 	sts	0x0521, r24
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	90 93 23 05 	sts	0x0523, r25
    1dee:	80 93 22 05 	sts	0x0522, r24
    1df2:	20 93 24 05 	sts	0x0524, r18
    1df6:	d7 01       	movw	r26, r14
    1df8:	11 96       	adiw	r26, 0x01	; 1
    1dfa:	1c 92       	st	X, r1
    1dfc:	10 92 27 05 	sts	0x0527, r1
    1e00:	10 92 26 05 	sts	0x0526, r1
    1e04:	80 e0       	ldi	r24, 0x00	; 0
				.wValue        = 1,
				.wIndex        = HIDInterfaceInfo->State.InterfaceNumber,
				.wLength       = 0,
			};

		if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	13 dd       	rcall	.-1498   	; 0x1830 <USB_Host_SendControlRequest>
    1e0a:	88 23       	and	r24, r24
    1e0c:	89 f5       	brne	.+98     	; 0x1e70 <HID_Host_SetReportProtocol+0x12a>
    1e0e:	f8 01       	movw	r30, r16
    1e10:	13 8a       	std	Z+19, r1	; 0x13
		  return ErrorCode;

		HIDInterfaceInfo->State.UsingBootProtocol = false;
    1e12:	d8 01       	movw	r26, r16
    1e14:	1d 96       	adiw	r26, 0x0d	; 13
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
    1e16:	4d 91       	ld	r20, X+
    1e18:	5c 91       	ld	r21, X
    1e1a:	1e 97       	sbiw	r26, 0x0e	; 14
    1e1c:	41 15       	cp	r20, r1
    1e1e:	51 05       	cpc	r21, r1
    1e20:	31 f1       	breq	.+76     	; 0x1e6e <HID_Host_SetReportProtocol+0x128>
    1e22:	54 96       	adiw	r26, 0x14	; 20
    1e24:	6d 91       	ld	r22, X+
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_ProcessHIDReport(HIDReportData, HIDInterfaceInfo->State.HIDReportSize,
    1e26:	7c 91       	ld	r23, X
    1e28:	55 97       	sbiw	r26, 0x15	; 21
    1e2a:	8d 2d       	mov	r24, r13
    1e2c:	9c 2d       	mov	r25, r12
    1e2e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <USB_ProcessHIDReport>
    1e32:	88 23       	and	r24, r24
    1e34:	11 f0       	breq	.+4      	; 0x1e3a <HID_Host_SetReportProtocol+0xf4>
    1e36:	80 68       	ori	r24, 0x80	; 128
    1e38:	1b c0       	rjmp	.+54     	; 0x1e70 <HID_Host_SetReportProtocol+0x12a>
	                                      HIDInterfaceInfo->Config.HIDParserData)) != HID_PARSE_Successful)
	{
		return HID_ERROR_LOGICAL | ErrorCode;
    1e3a:	d8 01       	movw	r26, r16
    1e3c:	1d 96       	adiw	r26, 0x0d	; 13
	}

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
    1e3e:	ed 91       	ld	r30, X+
    1e40:	fc 91       	ld	r31, X
    1e42:	1e 97       	sbiw	r26, 0x0e	; 14
    1e44:	ea 52       	subi	r30, 0x2A	; 42
    1e46:	fc 4f       	sbci	r31, 0xFC	; 252
    1e48:	20 81       	ld	r18, Z
    1e4a:	31 81       	ldd	r19, Z+1	; 0x01
    1e4c:	a9 01       	movw	r20, r18
    1e4e:	47 70       	andi	r20, 0x07	; 7
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);
    1e50:	50 70       	andi	r21, 0x00	; 0
    1e52:	91 e0       	ldi	r25, 0x01	; 1
    1e54:	41 15       	cp	r20, r1
    1e56:	51 05       	cpc	r21, r1
    1e58:	09 f4       	brne	.+2      	; 0x1e5c <HID_Host_SetReportProtocol+0x116>
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	43 e0       	ldi	r20, 0x03	; 3
    1e5e:	36 95       	lsr	r19
    1e60:	27 95       	ror	r18
    1e62:	4a 95       	dec	r20
    1e64:	e1 f7       	brne	.-8      	; 0x1e5e <HID_Host_SetReportProtocol+0x118>
    1e66:	29 0f       	add	r18, r25
    1e68:	f8 01       	movw	r30, r16
    1e6a:	26 8b       	std	Z+22, r18	; 0x16
    1e6c:	01 c0       	rjmp	.+2      	; 0x1e70 <HID_Host_SetReportProtocol+0x12a>
    1e6e:	80 e8       	ldi	r24, 0x80	; 128
    1e70:	0f b6       	in	r0, 0x3f	; 63

		HIDInterfaceInfo->State.UsingBootProtocol = false;
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
	  return HID_ERROR_LOGICAL;
    1e72:	f8 94       	cli

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1e74:	be be       	out	0x3e, r11	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	ad be       	out	0x3d, r10	; 61
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	1f 91       	pop	r17
    1e80:	0f 91       	pop	r16
    1e82:	ff 90       	pop	r15
    1e84:	ef 90       	pop	r14
    1e86:	df 90       	pop	r13
    1e88:	cf 90       	pop	r12
    1e8a:	bf 90       	pop	r11
    1e8c:	af 90       	pop	r10
    1e8e:	08 95       	ret

00001e90 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1e90:	90 91 c8 00 	lds	r25, 0x00C8
    1e94:	95 ff       	sbrs	r25, 5
    1e96:	fc cf       	rjmp	.-8      	; 0x1e90 <Serial_putchar>
				UDR1 = DataByte;
    1e98:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	08 95       	ret

00001ea2 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1ea2:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1ea6:	87 ff       	sbrs	r24, 7
    1ea8:	08 c0       	rjmp	.+16     	; 0x1eba <Serial_getchar+0x18>
    1eaa:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1eae:	87 ff       	sbrs	r24, 7
    1eb0:	07 c0       	rjmp	.+14     	; 0x1ec0 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1eb2:	80 91 ce 00 	lds	r24, 0x00CE
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	08 95       	ret
	  return _FDEV_EOF;
    1eba:	8e ef       	ldi	r24, 0xFE	; 254
    1ebc:	9f ef       	ldi	r25, 0xFF	; 255
    1ebe:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1ec0:	8f ef       	ldi	r24, 0xFF	; 255
    1ec2:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1ec4:	08 95       	ret

00001ec6 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1ec6:	fc 01       	movw	r30, r24
	if (!(Stream))
    1ec8:	00 97       	sbiw	r24, 0x00	; 0
    1eca:	51 f4       	brne	.+20     	; 0x1ee0 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1ecc:	e9 e2       	ldi	r30, 0x29	; 41
    1ece:	f5 e0       	ldi	r31, 0x05	; 5
    1ed0:	f0 93 38 05 	sts	0x0538, r31
    1ed4:	e0 93 37 05 	sts	0x0537, r30
		stdout = Stream;
    1ed8:	f0 93 3a 05 	sts	0x053A, r31
    1edc:	e0 93 39 05 	sts	0x0539, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1ee0:	8e e0       	ldi	r24, 0x0E	; 14
    1ee2:	df 01       	movw	r26, r30
    1ee4:	1d 92       	st	X+, r1
    1ee6:	8a 95       	dec	r24
    1ee8:	e9 f7       	brne	.-6      	; 0x1ee4 <Serial_CreateStream+0x1e>
    1eea:	83 e0       	ldi	r24, 0x03	; 3
    1eec:	83 83       	std	Z+3, r24	; 0x03
    1eee:	88 e4       	ldi	r24, 0x48	; 72
    1ef0:	9f e0       	ldi	r25, 0x0F	; 15
    1ef2:	91 87       	std	Z+9, r25	; 0x09
    1ef4:	80 87       	std	Z+8, r24	; 0x08
    1ef6:	81 e5       	ldi	r24, 0x51	; 81
    1ef8:	9f e0       	ldi	r25, 0x0F	; 15
    1efa:	93 87       	std	Z+11, r25	; 0x0b
    1efc:	82 87       	std	Z+10, r24	; 0x0a
}
    1efe:	08 95       	ret

00001f00 <fputc>:
    1f00:	0f 93       	push	r16
    1f02:	1f 93       	push	r17
    1f04:	cf 93       	push	r28
    1f06:	df 93       	push	r29
    1f08:	8c 01       	movw	r16, r24
    1f0a:	eb 01       	movw	r28, r22
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	81 ff       	sbrs	r24, 1
    1f10:	1b c0       	rjmp	.+54     	; 0x1f48 <fputc+0x48>
    1f12:	82 ff       	sbrs	r24, 2
    1f14:	0d c0       	rjmp	.+26     	; 0x1f30 <fputc+0x30>
    1f16:	2e 81       	ldd	r18, Y+6	; 0x06
    1f18:	3f 81       	ldd	r19, Y+7	; 0x07
    1f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1e:	28 17       	cp	r18, r24
    1f20:	39 07       	cpc	r19, r25
    1f22:	64 f4       	brge	.+24     	; 0x1f3c <fputc+0x3c>
    1f24:	e8 81       	ld	r30, Y
    1f26:	f9 81       	ldd	r31, Y+1	; 0x01
    1f28:	01 93       	st	Z+, r16
    1f2a:	f9 83       	std	Y+1, r31	; 0x01
    1f2c:	e8 83       	st	Y, r30
    1f2e:	06 c0       	rjmp	.+12     	; 0x1f3c <fputc+0x3c>
    1f30:	e8 85       	ldd	r30, Y+8	; 0x08
    1f32:	f9 85       	ldd	r31, Y+9	; 0x09
    1f34:	80 2f       	mov	r24, r16
    1f36:	09 95       	icall
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	31 f4       	brne	.+12     	; 0x1f48 <fputc+0x48>
    1f3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f40:	01 96       	adiw	r24, 0x01	; 1
    1f42:	9f 83       	std	Y+7, r25	; 0x07
    1f44:	8e 83       	std	Y+6, r24	; 0x06
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <fputc+0x4c>
    1f48:	0f ef       	ldi	r16, 0xFF	; 255
    1f4a:	1f ef       	ldi	r17, 0xFF	; 255
    1f4c:	c8 01       	movw	r24, r16
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	1f 91       	pop	r17
    1f54:	0f 91       	pop	r16
    1f56:	08 95       	ret

00001f58 <printf_P>:
    1f58:	cf 93       	push	r28
    1f5a:	df 93       	push	r29
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	fe 01       	movw	r30, r28
    1f62:	35 96       	adiw	r30, 0x05	; 5
    1f64:	61 91       	ld	r22, Z+
    1f66:	71 91       	ld	r23, Z+
    1f68:	80 91 39 05 	lds	r24, 0x0539
    1f6c:	90 91 3a 05 	lds	r25, 0x053A
    1f70:	dc 01       	movw	r26, r24
    1f72:	13 96       	adiw	r26, 0x03	; 3
    1f74:	2c 91       	ld	r18, X
    1f76:	13 97       	sbiw	r26, 0x03	; 3
    1f78:	28 60       	ori	r18, 0x08	; 8
    1f7a:	13 96       	adiw	r26, 0x03	; 3
    1f7c:	2c 93       	st	X, r18
    1f7e:	af 01       	movw	r20, r30
    1f80:	39 d0       	rcall	.+114    	; 0x1ff4 <vfprintf>
    1f82:	e0 91 39 05 	lds	r30, 0x0539
    1f86:	f0 91 3a 05 	lds	r31, 0x053A
    1f8a:	23 81       	ldd	r18, Z+3	; 0x03
    1f8c:	27 7f       	andi	r18, 0xF7	; 247
    1f8e:	23 83       	std	Z+3, r18	; 0x03
    1f90:	df 91       	pop	r29
    1f92:	cf 91       	pop	r28
    1f94:	08 95       	ret

00001f96 <puts_P>:
    1f96:	0f 93       	push	r16
    1f98:	1f 93       	push	r17
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	8c 01       	movw	r16, r24
    1fa0:	e0 91 39 05 	lds	r30, 0x0539
    1fa4:	f0 91 3a 05 	lds	r31, 0x053A
    1fa8:	83 81       	ldd	r24, Z+3	; 0x03
    1faa:	81 ff       	sbrs	r24, 1
    1fac:	1b c0       	rjmp	.+54     	; 0x1fe4 <puts_P+0x4e>
    1fae:	c0 e0       	ldi	r28, 0x00	; 0
    1fb0:	d0 e0       	ldi	r29, 0x00	; 0
    1fb2:	07 c0       	rjmp	.+14     	; 0x1fc2 <puts_P+0x2c>
    1fb4:	09 95       	icall
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	11 f0       	breq	.+4      	; 0x1fbe <puts_P+0x28>
    1fba:	cf ef       	ldi	r28, 0xFF	; 255
    1fbc:	df ef       	ldi	r29, 0xFF	; 255
    1fbe:	0f 5f       	subi	r16, 0xFF	; 255
    1fc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc2:	f8 01       	movw	r30, r16
    1fc4:	84 91       	lpm	r24, Z
    1fc6:	60 91 39 05 	lds	r22, 0x0539
    1fca:	70 91 3a 05 	lds	r23, 0x053A
    1fce:	db 01       	movw	r26, r22
    1fd0:	18 96       	adiw	r26, 0x08	; 8
    1fd2:	ed 91       	ld	r30, X+
    1fd4:	fc 91       	ld	r31, X
    1fd6:	19 97       	sbiw	r26, 0x09	; 9
    1fd8:	88 23       	and	r24, r24
    1fda:	61 f7       	brne	.-40     	; 0x1fb4 <puts_P+0x1e>
    1fdc:	8a e0       	ldi	r24, 0x0A	; 10
    1fde:	09 95       	icall
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	11 f0       	breq	.+4      	; 0x1fe8 <puts_P+0x52>
    1fe4:	cf ef       	ldi	r28, 0xFF	; 255
    1fe6:	df ef       	ldi	r29, 0xFF	; 255
    1fe8:	ce 01       	movw	r24, r28
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	08 95       	ret

00001ff4 <vfprintf>:
    1ff4:	2f 92       	push	r2
    1ff6:	3f 92       	push	r3
    1ff8:	4f 92       	push	r4
    1ffa:	5f 92       	push	r5
    1ffc:	6f 92       	push	r6
    1ffe:	7f 92       	push	r7
    2000:	8f 92       	push	r8
    2002:	9f 92       	push	r9
    2004:	af 92       	push	r10
    2006:	bf 92       	push	r11
    2008:	cf 92       	push	r12
    200a:	df 92       	push	r13
    200c:	ef 92       	push	r14
    200e:	ff 92       	push	r15
    2010:	0f 93       	push	r16
    2012:	1f 93       	push	r17
    2014:	cf 93       	push	r28
    2016:	df 93       	push	r29
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	2d 97       	sbiw	r28, 0x0d	; 13
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	3c 01       	movw	r6, r24
    202a:	7d 87       	std	Y+13, r23	; 0x0d
    202c:	6c 87       	std	Y+12, r22	; 0x0c
    202e:	5a 01       	movw	r10, r20
    2030:	fc 01       	movw	r30, r24
    2032:	17 82       	std	Z+7, r1	; 0x07
    2034:	16 82       	std	Z+6, r1	; 0x06
    2036:	83 81       	ldd	r24, Z+3	; 0x03
    2038:	81 ff       	sbrs	r24, 1
    203a:	bb c1       	rjmp	.+886    	; 0x23b2 <__stack+0x2b3>
    203c:	2e 01       	movw	r4, r28
    203e:	08 94       	sec
    2040:	41 1c       	adc	r4, r1
    2042:	51 1c       	adc	r5, r1
    2044:	f3 01       	movw	r30, r6
    2046:	93 81       	ldd	r25, Z+3	; 0x03
    2048:	ec 85       	ldd	r30, Y+12	; 0x0c
    204a:	fd 85       	ldd	r31, Y+13	; 0x0d
    204c:	93 fd       	sbrc	r25, 3
    204e:	85 91       	lpm	r24, Z+
    2050:	93 ff       	sbrs	r25, 3
    2052:	81 91       	ld	r24, Z+
    2054:	fd 87       	std	Y+13, r31	; 0x0d
    2056:	ec 87       	std	Y+12, r30	; 0x0c
    2058:	88 23       	and	r24, r24
    205a:	09 f4       	brne	.+2      	; 0x205e <vfprintf+0x6a>
    205c:	a6 c1       	rjmp	.+844    	; 0x23aa <__stack+0x2ab>
    205e:	85 32       	cpi	r24, 0x25	; 37
    2060:	41 f4       	brne	.+16     	; 0x2072 <vfprintf+0x7e>
    2062:	93 fd       	sbrc	r25, 3
    2064:	85 91       	lpm	r24, Z+
    2066:	93 ff       	sbrs	r25, 3
    2068:	81 91       	ld	r24, Z+
    206a:	fd 87       	std	Y+13, r31	; 0x0d
    206c:	ec 87       	std	Y+12, r30	; 0x0c
    206e:	85 32       	cpi	r24, 0x25	; 37
    2070:	21 f4       	brne	.+8      	; 0x207a <vfprintf+0x86>
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	b3 01       	movw	r22, r6
    2076:	44 df       	rcall	.-376    	; 0x1f00 <fputc>
    2078:	e5 cf       	rjmp	.-54     	; 0x2044 <vfprintf+0x50>
    207a:	ff 24       	eor	r15, r15
    207c:	ee 24       	eor	r14, r14
    207e:	10 e0       	ldi	r17, 0x00	; 0
    2080:	10 32       	cpi	r17, 0x20	; 32
    2082:	b0 f4       	brcc	.+44     	; 0x20b0 <vfprintf+0xbc>
    2084:	8b 32       	cpi	r24, 0x2B	; 43
    2086:	69 f0       	breq	.+26     	; 0x20a2 <vfprintf+0xae>
    2088:	8c 32       	cpi	r24, 0x2C	; 44
    208a:	28 f4       	brcc	.+10     	; 0x2096 <vfprintf+0xa2>
    208c:	80 32       	cpi	r24, 0x20	; 32
    208e:	51 f0       	breq	.+20     	; 0x20a4 <vfprintf+0xb0>
    2090:	83 32       	cpi	r24, 0x23	; 35
    2092:	71 f4       	brne	.+28     	; 0x20b0 <vfprintf+0xbc>
    2094:	0b c0       	rjmp	.+22     	; 0x20ac <vfprintf+0xb8>
    2096:	8d 32       	cpi	r24, 0x2D	; 45
    2098:	39 f0       	breq	.+14     	; 0x20a8 <vfprintf+0xb4>
    209a:	80 33       	cpi	r24, 0x30	; 48
    209c:	49 f4       	brne	.+18     	; 0x20b0 <vfprintf+0xbc>
    209e:	11 60       	ori	r17, 0x01	; 1
    20a0:	2c c0       	rjmp	.+88     	; 0x20fa <vfprintf+0x106>
    20a2:	12 60       	ori	r17, 0x02	; 2
    20a4:	14 60       	ori	r17, 0x04	; 4
    20a6:	29 c0       	rjmp	.+82     	; 0x20fa <vfprintf+0x106>
    20a8:	18 60       	ori	r17, 0x08	; 8
    20aa:	27 c0       	rjmp	.+78     	; 0x20fa <vfprintf+0x106>
    20ac:	10 61       	ori	r17, 0x10	; 16
    20ae:	25 c0       	rjmp	.+74     	; 0x20fa <vfprintf+0x106>
    20b0:	17 fd       	sbrc	r17, 7
    20b2:	2e c0       	rjmp	.+92     	; 0x2110 <__stack+0x11>
    20b4:	28 2f       	mov	r18, r24
    20b6:	20 53       	subi	r18, 0x30	; 48
    20b8:	2a 30       	cpi	r18, 0x0A	; 10
    20ba:	98 f4       	brcc	.+38     	; 0x20e2 <vfprintf+0xee>
    20bc:	16 ff       	sbrs	r17, 6
    20be:	08 c0       	rjmp	.+16     	; 0x20d0 <vfprintf+0xdc>
    20c0:	8f 2d       	mov	r24, r15
    20c2:	88 0f       	add	r24, r24
    20c4:	f8 2e       	mov	r15, r24
    20c6:	ff 0c       	add	r15, r15
    20c8:	ff 0c       	add	r15, r15
    20ca:	f8 0e       	add	r15, r24
    20cc:	f2 0e       	add	r15, r18
    20ce:	15 c0       	rjmp	.+42     	; 0x20fa <vfprintf+0x106>
    20d0:	8e 2d       	mov	r24, r14
    20d2:	88 0f       	add	r24, r24
    20d4:	e8 2e       	mov	r14, r24
    20d6:	ee 0c       	add	r14, r14
    20d8:	ee 0c       	add	r14, r14
    20da:	e8 0e       	add	r14, r24
    20dc:	e2 0e       	add	r14, r18
    20de:	10 62       	ori	r17, 0x20	; 32
    20e0:	0c c0       	rjmp	.+24     	; 0x20fa <vfprintf+0x106>
    20e2:	8e 32       	cpi	r24, 0x2E	; 46
    20e4:	21 f4       	brne	.+8      	; 0x20ee <vfprintf+0xfa>
    20e6:	16 fd       	sbrc	r17, 6
    20e8:	60 c1       	rjmp	.+704    	; 0x23aa <__stack+0x2ab>
    20ea:	10 64       	ori	r17, 0x40	; 64
    20ec:	06 c0       	rjmp	.+12     	; 0x20fa <vfprintf+0x106>
    20ee:	8c 36       	cpi	r24, 0x6C	; 108
    20f0:	11 f4       	brne	.+4      	; 0x20f6 <vfprintf+0x102>
    20f2:	10 68       	ori	r17, 0x80	; 128
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <vfprintf+0x106>
    20f6:	88 36       	cpi	r24, 0x68	; 104
    20f8:	59 f4       	brne	.+22     	; 0x2110 <__stack+0x11>
    20fa:	ec 85       	ldd	r30, Y+12	; 0x0c
    20fc:	fd 85       	ldd	r31, Y+13	; 0x0d
    20fe:	93 fd       	sbrc	r25, 3
    2100:	85 91       	lpm	r24, Z+
    2102:	93 ff       	sbrs	r25, 3
    2104:	81 91       	ld	r24, Z+
    2106:	fd 87       	std	Y+13, r31	; 0x0d
    2108:	ec 87       	std	Y+12, r30	; 0x0c
    210a:	88 23       	and	r24, r24
    210c:	09 f0       	breq	.+2      	; 0x2110 <__stack+0x11>
    210e:	b8 cf       	rjmp	.-144    	; 0x2080 <vfprintf+0x8c>
    2110:	98 2f       	mov	r25, r24
    2112:	95 54       	subi	r25, 0x45	; 69
    2114:	93 30       	cpi	r25, 0x03	; 3
    2116:	18 f0       	brcs	.+6      	; 0x211e <__stack+0x1f>
    2118:	90 52       	subi	r25, 0x20	; 32
    211a:	93 30       	cpi	r25, 0x03	; 3
    211c:	38 f4       	brcc	.+14     	; 0x212c <__stack+0x2d>
    211e:	24 e0       	ldi	r18, 0x04	; 4
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	a2 0e       	add	r10, r18
    2124:	b3 1e       	adc	r11, r19
    2126:	3f e3       	ldi	r19, 0x3F	; 63
    2128:	39 83       	std	Y+1, r19	; 0x01
    212a:	0f c0       	rjmp	.+30     	; 0x214a <__stack+0x4b>
    212c:	83 36       	cpi	r24, 0x63	; 99
    212e:	31 f0       	breq	.+12     	; 0x213c <__stack+0x3d>
    2130:	83 37       	cpi	r24, 0x73	; 115
    2132:	81 f0       	breq	.+32     	; 0x2154 <__stack+0x55>
    2134:	83 35       	cpi	r24, 0x53	; 83
    2136:	09 f0       	breq	.+2      	; 0x213a <__stack+0x3b>
    2138:	56 c0       	rjmp	.+172    	; 0x21e6 <__stack+0xe7>
    213a:	21 c0       	rjmp	.+66     	; 0x217e <__stack+0x7f>
    213c:	f5 01       	movw	r30, r10
    213e:	80 81       	ld	r24, Z
    2140:	89 83       	std	Y+1, r24	; 0x01
    2142:	22 e0       	ldi	r18, 0x02	; 2
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	a2 0e       	add	r10, r18
    2148:	b3 1e       	adc	r11, r19
    214a:	21 e0       	ldi	r18, 0x01	; 1
    214c:	c2 2e       	mov	r12, r18
    214e:	d1 2c       	mov	r13, r1
    2150:	42 01       	movw	r8, r4
    2152:	13 c0       	rjmp	.+38     	; 0x217a <__stack+0x7b>
    2154:	92 e0       	ldi	r25, 0x02	; 2
    2156:	29 2e       	mov	r2, r25
    2158:	31 2c       	mov	r3, r1
    215a:	2a 0c       	add	r2, r10
    215c:	3b 1c       	adc	r3, r11
    215e:	f5 01       	movw	r30, r10
    2160:	80 80       	ld	r8, Z
    2162:	91 80       	ldd	r9, Z+1	; 0x01
    2164:	16 ff       	sbrs	r17, 6
    2166:	03 c0       	rjmp	.+6      	; 0x216e <__stack+0x6f>
    2168:	6f 2d       	mov	r22, r15
    216a:	70 e0       	ldi	r23, 0x00	; 0
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <__stack+0x73>
    216e:	6f ef       	ldi	r22, 0xFF	; 255
    2170:	7f ef       	ldi	r23, 0xFF	; 255
    2172:	c4 01       	movw	r24, r8
    2174:	44 d1       	rcall	.+648    	; 0x23fe <strnlen>
    2176:	6c 01       	movw	r12, r24
    2178:	51 01       	movw	r10, r2
    217a:	1f 77       	andi	r17, 0x7F	; 127
    217c:	14 c0       	rjmp	.+40     	; 0x21a6 <__stack+0xa7>
    217e:	82 e0       	ldi	r24, 0x02	; 2
    2180:	28 2e       	mov	r2, r24
    2182:	31 2c       	mov	r3, r1
    2184:	2a 0c       	add	r2, r10
    2186:	3b 1c       	adc	r3, r11
    2188:	f5 01       	movw	r30, r10
    218a:	80 80       	ld	r8, Z
    218c:	91 80       	ldd	r9, Z+1	; 0x01
    218e:	16 ff       	sbrs	r17, 6
    2190:	03 c0       	rjmp	.+6      	; 0x2198 <__stack+0x99>
    2192:	6f 2d       	mov	r22, r15
    2194:	70 e0       	ldi	r23, 0x00	; 0
    2196:	02 c0       	rjmp	.+4      	; 0x219c <__stack+0x9d>
    2198:	6f ef       	ldi	r22, 0xFF	; 255
    219a:	7f ef       	ldi	r23, 0xFF	; 255
    219c:	c4 01       	movw	r24, r8
    219e:	24 d1       	rcall	.+584    	; 0x23e8 <strnlen_P>
    21a0:	6c 01       	movw	r12, r24
    21a2:	10 68       	ori	r17, 0x80	; 128
    21a4:	51 01       	movw	r10, r2
    21a6:	13 fd       	sbrc	r17, 3
    21a8:	1a c0       	rjmp	.+52     	; 0x21de <__stack+0xdf>
    21aa:	05 c0       	rjmp	.+10     	; 0x21b6 <__stack+0xb7>
    21ac:	80 e2       	ldi	r24, 0x20	; 32
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	b3 01       	movw	r22, r6
    21b2:	a6 de       	rcall	.-692    	; 0x1f00 <fputc>
    21b4:	ea 94       	dec	r14
    21b6:	8e 2d       	mov	r24, r14
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	c8 16       	cp	r12, r24
    21bc:	d9 06       	cpc	r13, r25
    21be:	b0 f3       	brcs	.-20     	; 0x21ac <__stack+0xad>
    21c0:	0e c0       	rjmp	.+28     	; 0x21de <__stack+0xdf>
    21c2:	f4 01       	movw	r30, r8
    21c4:	17 fd       	sbrc	r17, 7
    21c6:	85 91       	lpm	r24, Z+
    21c8:	17 ff       	sbrs	r17, 7
    21ca:	81 91       	ld	r24, Z+
    21cc:	4f 01       	movw	r8, r30
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	b3 01       	movw	r22, r6
    21d2:	96 de       	rcall	.-724    	; 0x1f00 <fputc>
    21d4:	e1 10       	cpse	r14, r1
    21d6:	ea 94       	dec	r14
    21d8:	08 94       	sec
    21da:	c1 08       	sbc	r12, r1
    21dc:	d1 08       	sbc	r13, r1
    21de:	c1 14       	cp	r12, r1
    21e0:	d1 04       	cpc	r13, r1
    21e2:	79 f7       	brne	.-34     	; 0x21c2 <__stack+0xc3>
    21e4:	df c0       	rjmp	.+446    	; 0x23a4 <__stack+0x2a5>
    21e6:	84 36       	cpi	r24, 0x64	; 100
    21e8:	11 f0       	breq	.+4      	; 0x21ee <__stack+0xef>
    21ea:	89 36       	cpi	r24, 0x69	; 105
    21ec:	49 f5       	brne	.+82     	; 0x2240 <__stack+0x141>
    21ee:	f5 01       	movw	r30, r10
    21f0:	17 ff       	sbrs	r17, 7
    21f2:	07 c0       	rjmp	.+14     	; 0x2202 <__stack+0x103>
    21f4:	80 81       	ld	r24, Z
    21f6:	91 81       	ldd	r25, Z+1	; 0x01
    21f8:	a2 81       	ldd	r26, Z+2	; 0x02
    21fa:	b3 81       	ldd	r27, Z+3	; 0x03
    21fc:	24 e0       	ldi	r18, 0x04	; 4
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	08 c0       	rjmp	.+16     	; 0x2212 <__stack+0x113>
    2202:	80 81       	ld	r24, Z
    2204:	91 81       	ldd	r25, Z+1	; 0x01
    2206:	aa 27       	eor	r26, r26
    2208:	97 fd       	sbrc	r25, 7
    220a:	a0 95       	com	r26
    220c:	ba 2f       	mov	r27, r26
    220e:	22 e0       	ldi	r18, 0x02	; 2
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	a2 0e       	add	r10, r18
    2214:	b3 1e       	adc	r11, r19
    2216:	01 2f       	mov	r16, r17
    2218:	0f 76       	andi	r16, 0x6F	; 111
    221a:	b7 ff       	sbrs	r27, 7
    221c:	08 c0       	rjmp	.+16     	; 0x222e <__stack+0x12f>
    221e:	b0 95       	com	r27
    2220:	a0 95       	com	r26
    2222:	90 95       	com	r25
    2224:	81 95       	neg	r24
    2226:	9f 4f       	sbci	r25, 0xFF	; 255
    2228:	af 4f       	sbci	r26, 0xFF	; 255
    222a:	bf 4f       	sbci	r27, 0xFF	; 255
    222c:	00 68       	ori	r16, 0x80	; 128
    222e:	bc 01       	movw	r22, r24
    2230:	cd 01       	movw	r24, r26
    2232:	a2 01       	movw	r20, r4
    2234:	2a e0       	ldi	r18, 0x0A	; 10
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	ed d0       	rcall	.+474    	; 0x2414 <__ultoa_invert>
    223a:	d8 2e       	mov	r13, r24
    223c:	d4 18       	sub	r13, r4
    223e:	3e c0       	rjmp	.+124    	; 0x22bc <__stack+0x1bd>
    2240:	85 37       	cpi	r24, 0x75	; 117
    2242:	21 f4       	brne	.+8      	; 0x224c <__stack+0x14d>
    2244:	1f 7e       	andi	r17, 0xEF	; 239
    2246:	2a e0       	ldi	r18, 0x0A	; 10
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	20 c0       	rjmp	.+64     	; 0x228c <__stack+0x18d>
    224c:	19 7f       	andi	r17, 0xF9	; 249
    224e:	8f 36       	cpi	r24, 0x6F	; 111
    2250:	a9 f0       	breq	.+42     	; 0x227c <__stack+0x17d>
    2252:	80 37       	cpi	r24, 0x70	; 112
    2254:	20 f4       	brcc	.+8      	; 0x225e <__stack+0x15f>
    2256:	88 35       	cpi	r24, 0x58	; 88
    2258:	09 f0       	breq	.+2      	; 0x225c <__stack+0x15d>
    225a:	a7 c0       	rjmp	.+334    	; 0x23aa <__stack+0x2ab>
    225c:	0b c0       	rjmp	.+22     	; 0x2274 <__stack+0x175>
    225e:	80 37       	cpi	r24, 0x70	; 112
    2260:	21 f0       	breq	.+8      	; 0x226a <__stack+0x16b>
    2262:	88 37       	cpi	r24, 0x78	; 120
    2264:	09 f0       	breq	.+2      	; 0x2268 <__stack+0x169>
    2266:	a1 c0       	rjmp	.+322    	; 0x23aa <__stack+0x2ab>
    2268:	01 c0       	rjmp	.+2      	; 0x226c <__stack+0x16d>
    226a:	10 61       	ori	r17, 0x10	; 16
    226c:	14 ff       	sbrs	r17, 4
    226e:	09 c0       	rjmp	.+18     	; 0x2282 <__stack+0x183>
    2270:	14 60       	ori	r17, 0x04	; 4
    2272:	07 c0       	rjmp	.+14     	; 0x2282 <__stack+0x183>
    2274:	14 ff       	sbrs	r17, 4
    2276:	08 c0       	rjmp	.+16     	; 0x2288 <__stack+0x189>
    2278:	16 60       	ori	r17, 0x06	; 6
    227a:	06 c0       	rjmp	.+12     	; 0x2288 <__stack+0x189>
    227c:	28 e0       	ldi	r18, 0x08	; 8
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	05 c0       	rjmp	.+10     	; 0x228c <__stack+0x18d>
    2282:	20 e1       	ldi	r18, 0x10	; 16
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	02 c0       	rjmp	.+4      	; 0x228c <__stack+0x18d>
    2288:	20 e1       	ldi	r18, 0x10	; 16
    228a:	32 e0       	ldi	r19, 0x02	; 2
    228c:	f5 01       	movw	r30, r10
    228e:	17 ff       	sbrs	r17, 7
    2290:	07 c0       	rjmp	.+14     	; 0x22a0 <__stack+0x1a1>
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	44 e0       	ldi	r20, 0x04	; 4
    229c:	50 e0       	ldi	r21, 0x00	; 0
    229e:	06 c0       	rjmp	.+12     	; 0x22ac <__stack+0x1ad>
    22a0:	60 81       	ld	r22, Z
    22a2:	71 81       	ldd	r23, Z+1	; 0x01
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	42 e0       	ldi	r20, 0x02	; 2
    22aa:	50 e0       	ldi	r21, 0x00	; 0
    22ac:	a4 0e       	add	r10, r20
    22ae:	b5 1e       	adc	r11, r21
    22b0:	a2 01       	movw	r20, r4
    22b2:	b0 d0       	rcall	.+352    	; 0x2414 <__ultoa_invert>
    22b4:	d8 2e       	mov	r13, r24
    22b6:	d4 18       	sub	r13, r4
    22b8:	01 2f       	mov	r16, r17
    22ba:	0f 77       	andi	r16, 0x7F	; 127
    22bc:	06 ff       	sbrs	r16, 6
    22be:	09 c0       	rjmp	.+18     	; 0x22d2 <__stack+0x1d3>
    22c0:	0e 7f       	andi	r16, 0xFE	; 254
    22c2:	df 14       	cp	r13, r15
    22c4:	30 f4       	brcc	.+12     	; 0x22d2 <__stack+0x1d3>
    22c6:	04 ff       	sbrs	r16, 4
    22c8:	06 c0       	rjmp	.+12     	; 0x22d6 <__stack+0x1d7>
    22ca:	02 fd       	sbrc	r16, 2
    22cc:	04 c0       	rjmp	.+8      	; 0x22d6 <__stack+0x1d7>
    22ce:	0f 7e       	andi	r16, 0xEF	; 239
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <__stack+0x1d7>
    22d2:	1d 2d       	mov	r17, r13
    22d4:	01 c0       	rjmp	.+2      	; 0x22d8 <__stack+0x1d9>
    22d6:	1f 2d       	mov	r17, r15
    22d8:	80 2f       	mov	r24, r16
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	04 ff       	sbrs	r16, 4
    22de:	0c c0       	rjmp	.+24     	; 0x22f8 <__stack+0x1f9>
    22e0:	fe 01       	movw	r30, r28
    22e2:	ed 0d       	add	r30, r13
    22e4:	f1 1d       	adc	r31, r1
    22e6:	20 81       	ld	r18, Z
    22e8:	20 33       	cpi	r18, 0x30	; 48
    22ea:	11 f4       	brne	.+4      	; 0x22f0 <__stack+0x1f1>
    22ec:	09 7e       	andi	r16, 0xE9	; 233
    22ee:	09 c0       	rjmp	.+18     	; 0x2302 <__stack+0x203>
    22f0:	02 ff       	sbrs	r16, 2
    22f2:	06 c0       	rjmp	.+12     	; 0x2300 <__stack+0x201>
    22f4:	1e 5f       	subi	r17, 0xFE	; 254
    22f6:	05 c0       	rjmp	.+10     	; 0x2302 <__stack+0x203>
    22f8:	86 78       	andi	r24, 0x86	; 134
    22fa:	90 70       	andi	r25, 0x00	; 0
    22fc:	00 97       	sbiw	r24, 0x00	; 0
    22fe:	09 f0       	breq	.+2      	; 0x2302 <__stack+0x203>
    2300:	1f 5f       	subi	r17, 0xFF	; 255
    2302:	80 2e       	mov	r8, r16
    2304:	99 24       	eor	r9, r9
    2306:	03 fd       	sbrc	r16, 3
    2308:	11 c0       	rjmp	.+34     	; 0x232c <__stack+0x22d>
    230a:	00 ff       	sbrs	r16, 0
    230c:	0c c0       	rjmp	.+24     	; 0x2326 <__stack+0x227>
    230e:	fd 2c       	mov	r15, r13
    2310:	1e 15       	cp	r17, r14
    2312:	48 f4       	brcc	.+18     	; 0x2326 <__stack+0x227>
    2314:	fe 0c       	add	r15, r14
    2316:	f1 1a       	sub	r15, r17
    2318:	1e 2d       	mov	r17, r14
    231a:	05 c0       	rjmp	.+10     	; 0x2326 <__stack+0x227>
    231c:	80 e2       	ldi	r24, 0x20	; 32
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	b3 01       	movw	r22, r6
    2322:	ee dd       	rcall	.-1060   	; 0x1f00 <fputc>
    2324:	1f 5f       	subi	r17, 0xFF	; 255
    2326:	1e 15       	cp	r17, r14
    2328:	c8 f3       	brcs	.-14     	; 0x231c <__stack+0x21d>
    232a:	04 c0       	rjmp	.+8      	; 0x2334 <__stack+0x235>
    232c:	1e 15       	cp	r17, r14
    232e:	10 f4       	brcc	.+4      	; 0x2334 <__stack+0x235>
    2330:	e1 1a       	sub	r14, r17
    2332:	01 c0       	rjmp	.+2      	; 0x2336 <__stack+0x237>
    2334:	ee 24       	eor	r14, r14
    2336:	84 fe       	sbrs	r8, 4
    2338:	0e c0       	rjmp	.+28     	; 0x2356 <__stack+0x257>
    233a:	80 e3       	ldi	r24, 0x30	; 48
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	b3 01       	movw	r22, r6
    2340:	df dd       	rcall	.-1090   	; 0x1f00 <fputc>
    2342:	82 fe       	sbrs	r8, 2
    2344:	1d c0       	rjmp	.+58     	; 0x2380 <__stack+0x281>
    2346:	81 fe       	sbrs	r8, 1
    2348:	03 c0       	rjmp	.+6      	; 0x2350 <__stack+0x251>
    234a:	88 e5       	ldi	r24, 0x58	; 88
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	10 c0       	rjmp	.+32     	; 0x2370 <__stack+0x271>
    2350:	88 e7       	ldi	r24, 0x78	; 120
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	0d c0       	rjmp	.+26     	; 0x2370 <__stack+0x271>
    2356:	c4 01       	movw	r24, r8
    2358:	86 78       	andi	r24, 0x86	; 134
    235a:	90 70       	andi	r25, 0x00	; 0
    235c:	00 97       	sbiw	r24, 0x00	; 0
    235e:	81 f0       	breq	.+32     	; 0x2380 <__stack+0x281>
    2360:	81 fc       	sbrc	r8, 1
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <__stack+0x269>
    2364:	80 e2       	ldi	r24, 0x20	; 32
    2366:	01 c0       	rjmp	.+2      	; 0x236a <__stack+0x26b>
    2368:	8b e2       	ldi	r24, 0x2B	; 43
    236a:	07 fd       	sbrc	r16, 7
    236c:	8d e2       	ldi	r24, 0x2D	; 45
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	b3 01       	movw	r22, r6
    2372:	c6 dd       	rcall	.-1140   	; 0x1f00 <fputc>
    2374:	05 c0       	rjmp	.+10     	; 0x2380 <__stack+0x281>
    2376:	80 e3       	ldi	r24, 0x30	; 48
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	b3 01       	movw	r22, r6
    237c:	c1 dd       	rcall	.-1150   	; 0x1f00 <fputc>
    237e:	fa 94       	dec	r15
    2380:	df 14       	cp	r13, r15
    2382:	c8 f3       	brcs	.-14     	; 0x2376 <__stack+0x277>
    2384:	da 94       	dec	r13
    2386:	f2 01       	movw	r30, r4
    2388:	ed 0d       	add	r30, r13
    238a:	f1 1d       	adc	r31, r1
    238c:	80 81       	ld	r24, Z
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	b3 01       	movw	r22, r6
    2392:	b6 dd       	rcall	.-1172   	; 0x1f00 <fputc>
    2394:	dd 20       	and	r13, r13
    2396:	b1 f7       	brne	.-20     	; 0x2384 <__stack+0x285>
    2398:	05 c0       	rjmp	.+10     	; 0x23a4 <__stack+0x2a5>
    239a:	80 e2       	ldi	r24, 0x20	; 32
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	b3 01       	movw	r22, r6
    23a0:	af dd       	rcall	.-1186   	; 0x1f00 <fputc>
    23a2:	ea 94       	dec	r14
    23a4:	ee 20       	and	r14, r14
    23a6:	c9 f7       	brne	.-14     	; 0x239a <__stack+0x29b>
    23a8:	4d ce       	rjmp	.-870    	; 0x2044 <vfprintf+0x50>
    23aa:	f3 01       	movw	r30, r6
    23ac:	86 81       	ldd	r24, Z+6	; 0x06
    23ae:	97 81       	ldd	r25, Z+7	; 0x07
    23b0:	02 c0       	rjmp	.+4      	; 0x23b6 <__stack+0x2b7>
    23b2:	8f ef       	ldi	r24, 0xFF	; 255
    23b4:	9f ef       	ldi	r25, 0xFF	; 255
    23b6:	2d 96       	adiw	r28, 0x0d	; 13
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	de bf       	out	0x3e, r29	; 62
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	cd bf       	out	0x3d, r28	; 61
    23c2:	df 91       	pop	r29
    23c4:	cf 91       	pop	r28
    23c6:	1f 91       	pop	r17
    23c8:	0f 91       	pop	r16
    23ca:	ff 90       	pop	r15
    23cc:	ef 90       	pop	r14
    23ce:	df 90       	pop	r13
    23d0:	cf 90       	pop	r12
    23d2:	bf 90       	pop	r11
    23d4:	af 90       	pop	r10
    23d6:	9f 90       	pop	r9
    23d8:	8f 90       	pop	r8
    23da:	7f 90       	pop	r7
    23dc:	6f 90       	pop	r6
    23de:	5f 90       	pop	r5
    23e0:	4f 90       	pop	r4
    23e2:	3f 90       	pop	r3
    23e4:	2f 90       	pop	r2
    23e6:	08 95       	ret

000023e8 <strnlen_P>:
    23e8:	fc 01       	movw	r30, r24
    23ea:	05 90       	lpm	r0, Z+
    23ec:	61 50       	subi	r22, 0x01	; 1
    23ee:	70 40       	sbci	r23, 0x00	; 0
    23f0:	01 10       	cpse	r0, r1
    23f2:	d8 f7       	brcc	.-10     	; 0x23ea <strnlen_P+0x2>
    23f4:	80 95       	com	r24
    23f6:	90 95       	com	r25
    23f8:	8e 0f       	add	r24, r30
    23fa:	9f 1f       	adc	r25, r31
    23fc:	08 95       	ret

000023fe <strnlen>:
    23fe:	fc 01       	movw	r30, r24
    2400:	61 50       	subi	r22, 0x01	; 1
    2402:	70 40       	sbci	r23, 0x00	; 0
    2404:	01 90       	ld	r0, Z+
    2406:	01 10       	cpse	r0, r1
    2408:	d8 f7       	brcc	.-10     	; 0x2400 <strnlen+0x2>
    240a:	80 95       	com	r24
    240c:	90 95       	com	r25
    240e:	8e 0f       	add	r24, r30
    2410:	9f 1f       	adc	r25, r31
    2412:	08 95       	ret

00002414 <__ultoa_invert>:
    2414:	fa 01       	movw	r30, r20
    2416:	aa 27       	eor	r26, r26
    2418:	28 30       	cpi	r18, 0x08	; 8
    241a:	51 f1       	breq	.+84     	; 0x2470 <__ultoa_invert+0x5c>
    241c:	20 31       	cpi	r18, 0x10	; 16
    241e:	81 f1       	breq	.+96     	; 0x2480 <__ultoa_invert+0x6c>
    2420:	e8 94       	clt
    2422:	6f 93       	push	r22
    2424:	6e 7f       	andi	r22, 0xFE	; 254
    2426:	6e 5f       	subi	r22, 0xFE	; 254
    2428:	7f 4f       	sbci	r23, 0xFF	; 255
    242a:	8f 4f       	sbci	r24, 0xFF	; 255
    242c:	9f 4f       	sbci	r25, 0xFF	; 255
    242e:	af 4f       	sbci	r26, 0xFF	; 255
    2430:	b1 e0       	ldi	r27, 0x01	; 1
    2432:	3e d0       	rcall	.+124    	; 0x24b0 <__ultoa_invert+0x9c>
    2434:	b4 e0       	ldi	r27, 0x04	; 4
    2436:	3c d0       	rcall	.+120    	; 0x24b0 <__ultoa_invert+0x9c>
    2438:	67 0f       	add	r22, r23
    243a:	78 1f       	adc	r23, r24
    243c:	89 1f       	adc	r24, r25
    243e:	9a 1f       	adc	r25, r26
    2440:	a1 1d       	adc	r26, r1
    2442:	68 0f       	add	r22, r24
    2444:	79 1f       	adc	r23, r25
    2446:	8a 1f       	adc	r24, r26
    2448:	91 1d       	adc	r25, r1
    244a:	a1 1d       	adc	r26, r1
    244c:	6a 0f       	add	r22, r26
    244e:	71 1d       	adc	r23, r1
    2450:	81 1d       	adc	r24, r1
    2452:	91 1d       	adc	r25, r1
    2454:	a1 1d       	adc	r26, r1
    2456:	20 d0       	rcall	.+64     	; 0x2498 <__ultoa_invert+0x84>
    2458:	09 f4       	brne	.+2      	; 0x245c <__ultoa_invert+0x48>
    245a:	68 94       	set
    245c:	3f 91       	pop	r19
    245e:	2a e0       	ldi	r18, 0x0A	; 10
    2460:	26 9f       	mul	r18, r22
    2462:	11 24       	eor	r1, r1
    2464:	30 19       	sub	r19, r0
    2466:	30 5d       	subi	r19, 0xD0	; 208
    2468:	31 93       	st	Z+, r19
    246a:	de f6       	brtc	.-74     	; 0x2422 <__ultoa_invert+0xe>
    246c:	cf 01       	movw	r24, r30
    246e:	08 95       	ret
    2470:	46 2f       	mov	r20, r22
    2472:	47 70       	andi	r20, 0x07	; 7
    2474:	40 5d       	subi	r20, 0xD0	; 208
    2476:	41 93       	st	Z+, r20
    2478:	b3 e0       	ldi	r27, 0x03	; 3
    247a:	0f d0       	rcall	.+30     	; 0x249a <__ultoa_invert+0x86>
    247c:	c9 f7       	brne	.-14     	; 0x2470 <__ultoa_invert+0x5c>
    247e:	f6 cf       	rjmp	.-20     	; 0x246c <__ultoa_invert+0x58>
    2480:	46 2f       	mov	r20, r22
    2482:	4f 70       	andi	r20, 0x0F	; 15
    2484:	40 5d       	subi	r20, 0xD0	; 208
    2486:	4a 33       	cpi	r20, 0x3A	; 58
    2488:	18 f0       	brcs	.+6      	; 0x2490 <__ultoa_invert+0x7c>
    248a:	49 5d       	subi	r20, 0xD9	; 217
    248c:	31 fd       	sbrc	r19, 1
    248e:	40 52       	subi	r20, 0x20	; 32
    2490:	41 93       	st	Z+, r20
    2492:	02 d0       	rcall	.+4      	; 0x2498 <__ultoa_invert+0x84>
    2494:	a9 f7       	brne	.-22     	; 0x2480 <__ultoa_invert+0x6c>
    2496:	ea cf       	rjmp	.-44     	; 0x246c <__ultoa_invert+0x58>
    2498:	b4 e0       	ldi	r27, 0x04	; 4
    249a:	a6 95       	lsr	r26
    249c:	97 95       	ror	r25
    249e:	87 95       	ror	r24
    24a0:	77 95       	ror	r23
    24a2:	67 95       	ror	r22
    24a4:	ba 95       	dec	r27
    24a6:	c9 f7       	brne	.-14     	; 0x249a <__ultoa_invert+0x86>
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	61 05       	cpc	r22, r1
    24ac:	71 05       	cpc	r23, r1
    24ae:	08 95       	ret
    24b0:	9b 01       	movw	r18, r22
    24b2:	ac 01       	movw	r20, r24
    24b4:	0a 2e       	mov	r0, r26
    24b6:	06 94       	lsr	r0
    24b8:	57 95       	ror	r21
    24ba:	47 95       	ror	r20
    24bc:	37 95       	ror	r19
    24be:	27 95       	ror	r18
    24c0:	ba 95       	dec	r27
    24c2:	c9 f7       	brne	.-14     	; 0x24b6 <__ultoa_invert+0xa2>
    24c4:	62 0f       	add	r22, r18
    24c6:	73 1f       	adc	r23, r19
    24c8:	84 1f       	adc	r24, r20
    24ca:	95 1f       	adc	r25, r21
    24cc:	a0 1d       	adc	r26, r0
    24ce:	08 95       	ret

000024d0 <_exit>:
    24d0:	f8 94       	cli

000024d2 <__stop_program>:
    24d2:	ff cf       	rjmp	.-2      	; 0x24d2 <__stop_program>
