
VirtualSerialHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00001b32  00001bc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080014a  0080014a  00001c10  2**0
                  ALLOC
  3 .stab         00000f90  00000000  00000000  00001c10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000030d  00000000  00000000  00002ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000888  00000000  00000000  00002eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d7de  00000000  00000000  00003738  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003409  00000000  00000000  00010f16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005c54  00000000  00000000  0001431f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001910  00000000  00000000  00019f74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004ffd  00000000  00000000  0001b884  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009644  00000000  00000000  00020881  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a20  00000000  00000000  00029ec5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	15 c1       	rjmp	.+554    	; 0x22c <__ctors_end>
       2:	00 00       	nop
       4:	32 c1       	rjmp	.+612    	; 0x26a <__bad_interrupt>
       6:	00 00       	nop
       8:	30 c1       	rjmp	.+608    	; 0x26a <__bad_interrupt>
       a:	00 00       	nop
       c:	2e c1       	rjmp	.+604    	; 0x26a <__bad_interrupt>
       e:	00 00       	nop
      10:	2c c1       	rjmp	.+600    	; 0x26a <__bad_interrupt>
      12:	00 00       	nop
      14:	2a c1       	rjmp	.+596    	; 0x26a <__bad_interrupt>
      16:	00 00       	nop
      18:	28 c1       	rjmp	.+592    	; 0x26a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	26 c1       	rjmp	.+588    	; 0x26a <__bad_interrupt>
      1e:	00 00       	nop
      20:	24 c1       	rjmp	.+584    	; 0x26a <__bad_interrupt>
      22:	00 00       	nop
      24:	22 c1       	rjmp	.+580    	; 0x26a <__bad_interrupt>
      26:	00 00       	nop
      28:	c5 c5       	rjmp	.+2954   	; 0xbb4 <__vector_10>
      2a:	00 00       	nop
      2c:	1e c1       	rjmp	.+572    	; 0x26a <__bad_interrupt>
      2e:	00 00       	nop
      30:	1c c1       	rjmp	.+568    	; 0x26a <__bad_interrupt>
      32:	00 00       	nop
      34:	1a c1       	rjmp	.+564    	; 0x26a <__bad_interrupt>
      36:	00 00       	nop
      38:	18 c1       	rjmp	.+560    	; 0x26a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	16 c1       	rjmp	.+556    	; 0x26a <__bad_interrupt>
      3e:	00 00       	nop
      40:	14 c1       	rjmp	.+552    	; 0x26a <__bad_interrupt>
      42:	00 00       	nop
      44:	12 c1       	rjmp	.+548    	; 0x26a <__bad_interrupt>
      46:	00 00       	nop
      48:	10 c1       	rjmp	.+544    	; 0x26a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0e c1       	rjmp	.+540    	; 0x26a <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c c1       	rjmp	.+536    	; 0x26a <__bad_interrupt>
      52:	00 00       	nop
      54:	0a c1       	rjmp	.+532    	; 0x26a <__bad_interrupt>
      56:	00 00       	nop
      58:	08 c1       	rjmp	.+528    	; 0x26a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	06 c1       	rjmp	.+524    	; 0x26a <__bad_interrupt>
      5e:	00 00       	nop
      60:	04 c1       	rjmp	.+520    	; 0x26a <__bad_interrupt>
      62:	00 00       	nop
      64:	02 c1       	rjmp	.+516    	; 0x26a <__bad_interrupt>
      66:	00 00       	nop
      68:	00 c1       	rjmp	.+512    	; 0x26a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	fe c0       	rjmp	.+508    	; 0x26a <__bad_interrupt>
      6e:	00 00       	nop
      70:	fc c0       	rjmp	.+504    	; 0x26a <__bad_interrupt>
      72:	00 00       	nop
      74:	fa c0       	rjmp	.+500    	; 0x26a <__bad_interrupt>
      76:	00 00       	nop
      78:	f8 c0       	rjmp	.+496    	; 0x26a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f6 c0       	rjmp	.+492    	; 0x26a <__bad_interrupt>
      7e:	00 00       	nop
      80:	f4 c0       	rjmp	.+488    	; 0x26a <__bad_interrupt>
      82:	00 00       	nop
      84:	f2 c0       	rjmp	.+484    	; 0x26a <__bad_interrupt>
      86:	00 00       	nop
      88:	f0 c0       	rjmp	.+480    	; 0x26a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ee c0       	rjmp	.+476    	; 0x26a <__bad_interrupt>
      8e:	00 00       	nop
      90:	ec c0       	rjmp	.+472    	; 0x26a <__bad_interrupt>
      92:	00 00       	nop
      94:	ea c0       	rjmp	.+468    	; 0x26a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4262>:
      98:	1b 5b 33 36 6d 43 44 43 20 48 6f 73 74 20 44 65     .[36mCDC Host De
      a8:	6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33     mo running....[3
      b8:	37 6d 00                                            7m.

000000bb <__c.4275>:
      bb:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
      cb:	0d 0a 00                                            ...

000000ce <__c.4280>:
      ce:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
      de:	68 65 64 2e 0d 0a 00                                hed....

000000e5 <__c.4287>:
      e5:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
      f5:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     105:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

00000112 <__c.4289>:
     112:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     122:	4e 6f 74 20 61 20 56 61 6c 69 64 20 43 44 43 20     Not a Valid CDC 
     132:	43 6c 61 73 73 20 44 65 76 69 63 65 2e 0d 0a 00     Class Device....

00000142 <__c.4291>:
     142:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     152:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     162:	6f 6e 2e 0d 0a 00                                   on....

00000168 <__c.4293>:
     168:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     178:	76 69 63 65 20 4c 69 6e 65 20 45 6e 63 6f 64 69     vice Line Encodi
     188:	6e 67 2e 0d 0a 00                                   ng....

0000018e <__c.4295>:
     18e:	43 44 43 20 44 65 76 69 63 65 20 45 6e 75 6d 65     CDC Device Enume
     19e:	72 61 74 65 64 2e 0d 0a 00                          rated....

000001a7 <__c.4300>:
     1a7:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     1b7:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     1c7:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

000001d6 <__c.4307>:
     1d6:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     1e6:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     1f6:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     206:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     216:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     226:	1b 5b 33 37 6d 00                                   .[37m.

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	d0 e2       	ldi	r29, 0x20	; 32
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61

00000238 <__do_copy_data>:
     238:	11 e0       	ldi	r17, 0x01	; 1
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	b1 e0       	ldi	r27, 0x01	; 1
     23e:	e2 e3       	ldi	r30, 0x32	; 50
     240:	fb e1       	ldi	r31, 0x1B	; 27
     242:	00 e0       	ldi	r16, 0x00	; 0
     244:	0b bf       	out	0x3b, r16	; 59
     246:	02 c0       	rjmp	.+4      	; 0x24c <__do_copy_data+0x14>
     248:	07 90       	elpm	r0, Z+
     24a:	0d 92       	st	X+, r0
     24c:	aa 34       	cpi	r26, 0x4A	; 74
     24e:	b1 07       	cpc	r27, r17
     250:	d9 f7       	brne	.-10     	; 0x248 <__do_copy_data+0x10>
     252:	1b be       	out	0x3b, r1	; 59

00000254 <__do_clear_bss>:
     254:	11 e0       	ldi	r17, 0x01	; 1
     256:	aa e4       	ldi	r26, 0x4A	; 74
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	01 c0       	rjmp	.+2      	; 0x25e <.do_clear_bss_start>

0000025c <.do_clear_bss_loop>:
     25c:	1d 92       	st	X+, r1

0000025e <.do_clear_bss_start>:
     25e:	ac 36       	cpi	r26, 0x6C	; 108
     260:	b1 07       	cpc	r27, r17
     262:	e1 f7       	brne	.-8      	; 0x25c <.do_clear_bss_loop>
     264:	4d d0       	rcall	.+154    	; 0x300 <main>
     266:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <_exit>

0000026a <__bad_interrupt>:
     26a:	ca ce       	rjmp	.-620    	; 0x0 <__vectors>

0000026c <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     26c:	9b b1       	in	r25, 0x0b	; 11
     26e:	9f 70       	andi	r25, 0x0F	; 15
     270:	98 2b       	or	r25, r24
     272:	9b b9       	out	0x0b, r25	; 11
			}
     274:	08 95       	ret

00000276 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     276:	84 b7       	in	r24, 0x34	; 52
     278:	87 7f       	andi	r24, 0xF7	; 247
     27a:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     27c:	28 e1       	ldi	r18, 0x18	; 24
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	f8 94       	cli
     282:	20 93 60 00 	sts	0x0060, r18
     286:	10 92 60 00 	sts	0x0060, r1
     28a:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	80 e8       	ldi	r24, 0x80	; 128
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	f8 94       	cli
     294:	80 93 61 00 	sts	0x0061, r24
     298:	90 93 61 00 	sts	0x0061, r25
     29c:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     29e:	83 e3       	ldi	r24, 0x33	; 51
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	90 93 cd 00 	sts	0x00CD, r25
     2a6:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2aa:	86 e0       	ldi	r24, 0x06	; 6
     2ac:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2b0:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2b4:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     2b8:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2ba:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2bc:	8a b1       	in	r24, 0x0a	; 10
     2be:	80 6f       	ori	r24, 0xF0	; 240
     2c0:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2c2:	8b b1       	in	r24, 0x0b	; 11
     2c4:	8f 70       	andi	r24, 0x0F	; 15
     2c6:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     2c8:	5a d4       	rcall	.+2228   	; 0xb7e <USB_Init>
     2ca:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <Serial_CreateStream>

000002d2 <CDCHost_Task>:
     2d2:	80 91 57 01 	lds	r24, 0x0157
/** Task to manage an enumerated USB CDC device once connected, to print received data
 *  from the device to the serial port.
 */
void CDCHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     2d6:	8b 30       	cpi	r24, 0x0B	; 11
     2d8:	91 f4       	brne	.+36     	; 0x2fe <CDCHost_Task+0x2c>
	  return;

	if (CDC_Host_BytesReceived(&VirtualSerial_CDC_Interface))
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <CDC_Host_BytesReceived>
     2e2:	00 97       	sbiw	r24, 0x00	; 0
     2e4:	61 f0       	breq	.+24     	; 0x2fe <CDCHost_Task+0x2c>
	{
		/* Echo received bytes from the attached device through the USART */
		int16_t ReceivedByte = CDC_Host_ReceiveByte(&VirtualSerial_CDC_Interface);
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	91 e0       	ldi	r25, 0x01	; 1
     2ea:	0e 94 b2 09 	call	0x1364	; 0x1364 <CDC_Host_ReceiveByte>
		if (!(ReceivedByte < 0))
     2ee:	97 fd       	sbrc	r25, 7
     2f0:	06 c0       	rjmp	.+12     	; 0x2fe <CDCHost_Task+0x2c>
		  putchar(ReceivedByte);
     2f2:	60 91 68 01 	lds	r22, 0x0168
     2f6:	70 91 69 01 	lds	r23, 0x0169
     2fa:	0c 94 af 0a 	jmp	0x155e	; 0x155e <fputc>
     2fe:	08 95       	ret

00000300 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     300:	ba df       	rcall	.-140    	; 0x276 <SetupHardware>
     302:	88 e9       	ldi	r24, 0x98	; 152

	puts_P(PSTR(ESC_FG_CYAN "CDC Host Demo running.\r\n" ESC_FG_WHITE));
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <puts_P>
     30a:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     30c:	af df       	rcall	.-162    	; 0x26c <LEDs_SetAllLEDs>
     30e:	78 94       	sei
     310:	e0 df       	rcall	.-64     	; 0x2d2 <CDCHost_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     312:	80 e0       	ldi	r24, 0x00	; 0
	GlobalInterruptEnable();

	for (;;)
	{
		CDCHost_Task();
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	0e 94 21 0a 	call	0x1442	; 0x1442 <CDC_Host_USBTask>

		CDC_Host_USBTask(&VirtualSerial_CDC_Interface);
     31a:	c9 d6       	rcall	.+3474   	; 0x10ae <USB_USBTask>
     31c:	f9 cf       	rjmp	.-14     	; 0x310 <main+0x10>

0000031e <EVENT_USB_Host_DeviceAttached>:
     31e:	8b eb       	ldi	r24, 0xBB	; 187
		USB_USBTask();
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <puts_P>
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     326:	80 ea       	ldi	r24, 0xA0	; 160
     328:	a1 cf       	rjmp	.-190    	; 0x26c <LEDs_SetAllLEDs>

0000032a <EVENT_USB_Host_DeviceUnattached>:
     32a:	8e ec       	ldi	r24, 0xCE	; 206
}
     32c:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     32e:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     332:	80 e1       	ldi	r24, 0x10	; 16
     334:	9b cf       	rjmp	.-202    	; 0x26c <LEDs_SetAllLEDs>

00000336 <EVENT_USB_Host_DeviceEnumerationComplete>:
     336:	cf 93       	push	r28
}
     338:	df 93       	push	r29

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
     33e:	c2 50       	subi	r28, 0x02	; 2
     340:	d2 40       	sbci	r29, 0x02	; 2
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	f8 94       	cli
     346:	de bf       	out	0x3e, r29	; 62
     348:	0f be       	out	0x3f, r0	; 63
     34a:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     34c:	80 ea       	ldi	r24, 0xA0	; 160
     34e:	8e df       	rcall	.-228    	; 0x26c <LEDs_SetAllLEDs>
     350:	81 e0       	ldi	r24, 0x01	; 1

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     352:	be 01       	movw	r22, r28
     354:	6f 5f       	subi	r22, 0xFF	; 255
     356:	7f 4f       	sbci	r23, 0xFF	; 255
     358:	ae 01       	movw	r20, r28
     35a:	4d 5f       	subi	r20, 0xFD	; 253
     35c:	5f 4f       	sbci	r21, 0xFF	; 255
     35e:	20 e0       	ldi	r18, 0x00	; 0
     360:	32 e0       	ldi	r19, 0x02	; 2
     362:	bb d4       	rcall	.+2422   	; 0xcda <USB_Host_GetDeviceConfigDescriptor>
     364:	88 23       	and	r24, r24
     366:	19 f0       	breq	.+6      	; 0x36e <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
     368:	85 ee       	ldi	r24, 0xE5	; 229
     36a:	90 e0       	ldi	r25, 0x00	; 0
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     36c:	2e c0       	rjmp	.+92     	; 0x3ca <EVENT_USB_Host_DeviceEnumerationComplete+0x94>
     36e:	69 81       	ldd	r22, Y+1	; 0x01
     370:	7a 81       	ldd	r23, Y+2	; 0x02
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (CDC_Host_ConfigurePipes(&VirtualSerial_CDC_Interface,
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	ae 01       	movw	r20, r28
     378:	4d 5f       	subi	r20, 0xFD	; 253
     37a:	5f 4f       	sbci	r21, 0xFF	; 255
     37c:	dd d6       	rcall	.+3514   	; 0x1138 <CDC_Host_ConfigurePipes>
     37e:	88 23       	and	r24, r24
     380:	19 f0       	breq	.+6      	; 0x388 <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
     382:	82 e1       	ldi	r24, 0x12	; 18
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	21 c0       	rjmp	.+66     	; 0x3ca <EVENT_USB_Host_DeviceEnumerationComplete+0x94>
	                            ConfigDescriptorSize, ConfigDescriptorData) != CDC_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid CDC Class Device.\r\n"));
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	6c d6       	rcall	.+3288   	; 0x1064 <USB_Host_SetDeviceConfiguration>
     38c:	88 23       	and	r24, r24
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     38e:	19 f0       	breq	.+6      	; 0x396 <EVENT_USB_Host_DeviceEnumerationComplete+0x60>
     390:	82 e4       	ldi	r24, 0x42	; 66
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	1a c0       	rjmp	.+52     	; 0x3ca <EVENT_USB_Host_DeviceEnumerationComplete+0x94>
     396:	80 e8       	ldi	r24, 0x80	; 128
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     398:	95 e2       	ldi	r25, 0x25	; 37
     39a:	a0 e0       	ldi	r26, 0x00	; 0
     39c:	b0 e0       	ldi	r27, 0x00	; 0
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}
	
	VirtualSerial_CDC_Interface.State.LineEncoding.BaudRateBPS = 9600;
     39e:	80 93 18 01 	sts	0x0118, r24
     3a2:	90 93 19 01 	sts	0x0119, r25
     3a6:	a0 93 1a 01 	sts	0x011A, r26
     3aa:	b0 93 1b 01 	sts	0x011B, r27
     3ae:	10 92 1c 01 	sts	0x011C, r1
     3b2:	10 92 1d 01 	sts	0x011D, r1
	VirtualSerial_CDC_Interface.State.LineEncoding.CharFormat  = CDC_LINEENCODING_OneStopBit;
     3b6:	88 e0       	ldi	r24, 0x08	; 8
     3b8:	80 93 1e 01 	sts	0x011E, r24
	VirtualSerial_CDC_Interface.State.LineEncoding.ParityType  = CDC_PARITY_None;
     3bc:	80 e0       	ldi	r24, 0x00	; 0
	VirtualSerial_CDC_Interface.State.LineEncoding.DataBits    = 8;
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	81 d7       	rcall	.+3842   	; 0x12c4 <CDC_Host_SetLineEncoding>
     3c2:	88 23       	and	r24, r24
	
	if (CDC_Host_SetLineEncoding(&VirtualSerial_CDC_Interface))
     3c4:	31 f0       	breq	.+12     	; 0x3d2 <EVENT_USB_Host_DeviceEnumerationComplete+0x9c>
     3c6:	88 e6       	ldi	r24, 0x68	; 104
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <puts_P>
     3ce:	80 e9       	ldi	r24, 0x90	; 144
	{
		puts_P(PSTR("Error Setting Device Line Encoding.\r\n"));
     3d0:	05 c0       	rjmp	.+10     	; 0x3dc <EVENT_USB_Host_DeviceEnumerationComplete+0xa6>
     3d2:	8e e8       	ldi	r24, 0x8E	; 142
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     3da:	80 e6       	ldi	r24, 0x60	; 96
		return;	
	}

	puts_P(PSTR("CDC Device Enumerated.\r\n"));
     3dc:	47 df       	rcall	.-370    	; 0x26c <LEDs_SetAllLEDs>
     3de:	ce 5f       	subi	r28, 0xFE	; 254
     3e0:	dd 4f       	sbci	r29, 0xFD	; 253
     3e2:	0f b6       	in	r0, 0x3f	; 63
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
}
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	08 95       	ret

000003f2 <EVENT_USB_Host_HostError>:
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	0f 92       	push	r0
     3f8:	cd b7       	in	r28, 0x3d	; 61
     3fa:	de b7       	in	r29, 0x3e	; 62
     3fc:	89 83       	std	Y+1, r24	; 0x01

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();
     3fe:	57 d3       	rcall	.+1710   	; 0xaae <USB_Disable>
     400:	00 d0       	rcall	.+0      	; 0x402 <EVENT_USB_Host_HostError+0x10>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     402:	00 d0       	rcall	.+0      	; 0x404 <EVENT_USB_Host_HostError+0x12>
     404:	ed b7       	in	r30, 0x3d	; 61
     406:	fe b7       	in	r31, 0x3e	; 62
     408:	31 96       	adiw	r30, 0x01	; 1
     40a:	27 ea       	ldi	r18, 0xA7	; 167
     40c:	31 e0       	ldi	r19, 0x01	; 1
     40e:	ad b7       	in	r26, 0x3d	; 61
     410:	be b7       	in	r27, 0x3e	; 62
     412:	12 96       	adiw	r26, 0x02	; 2
     414:	3c 93       	st	X, r19
     416:	2e 93       	st	-X, r18
     418:	11 97       	sbiw	r26, 0x01	; 1
     41a:	89 81       	ldd	r24, Y+1	; 0x01
     41c:	82 83       	std	Z+2, r24	; 0x02
     41e:	13 82       	std	Z+3, r1	; 0x03
     420:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <printf_P>
     424:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	80 e9       	ldi	r24, 0x90	; 144
     42e:	1e df       	rcall	.-452    	; 0x26c <LEDs_SetAllLEDs>
     430:	ff cf       	rjmp	.-2      	; 0x430 <EVENT_USB_Host_HostError+0x3e>

00000432 <EVENT_USB_Host_DeviceEnumerationFailed>:
     432:	90 91 57 01 	lds	r25, 0x0157
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     436:	2d b7       	in	r18, 0x3d	; 61
     438:	3e b7       	in	r19, 0x3e	; 62
     43a:	28 50       	subi	r18, 0x08	; 8
     43c:	30 40       	sbci	r19, 0x00	; 0
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	f8 94       	cli
     442:	3e bf       	out	0x3e, r19	; 62
     444:	0f be       	out	0x3f, r0	; 63
     446:	2d bf       	out	0x3d, r18	; 61
     448:	ed b7       	in	r30, 0x3d	; 61
     44a:	fe b7       	in	r31, 0x3e	; 62
     44c:	31 96       	adiw	r30, 0x01	; 1
     44e:	26 ed       	ldi	r18, 0xD6	; 214
     450:	31 e0       	ldi	r19, 0x01	; 1
     452:	ad b7       	in	r26, 0x3d	; 61
     454:	be b7       	in	r27, 0x3e	; 62
     456:	12 96       	adiw	r26, 0x02	; 2
     458:	3c 93       	st	X, r19
     45a:	2e 93       	st	-X, r18
     45c:	11 97       	sbiw	r26, 0x01	; 1
     45e:	82 83       	std	Z+2, r24	; 0x02
     460:	13 82       	std	Z+3, r1	; 0x03
     462:	64 83       	std	Z+4, r22	; 0x04
     464:	15 82       	std	Z+5, r1	; 0x05
     466:	96 83       	std	Z+6, r25	; 0x06
     468:	17 82       	std	Z+7, r1	; 0x07
     46a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     46e:	2d b7       	in	r18, 0x3d	; 61
     470:	3e b7       	in	r19, 0x3e	; 62
     472:	28 5f       	subi	r18, 0xF8	; 248
     474:	3f 4f       	sbci	r19, 0xFF	; 255
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	f8 94       	cli
     47a:	3e bf       	out	0x3e, r19	; 62
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	2d bf       	out	0x3d, r18	; 61
     480:	80 e9       	ldi	r24, 0x90	; 144
     482:	f4 ce       	rjmp	.-536    	; 0x26c <LEDs_SetAllLEDs>

00000484 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     484:	80 91 9e 00 	lds	r24, 0x009E
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	81 70       	andi	r24, 0x01	; 1
     48c:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     48e:	20 91 a0 00 	lds	r18, 0x00A0
     492:	2d 7f       	andi	r18, 0xFD	; 253
     494:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     498:	20 91 9e 00 	lds	r18, 0x009E
     49c:	22 60       	ori	r18, 0x02	; 2
     49e:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     4a2:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     4a6:	21 fd       	sbrc	r18, 1
     4a8:	fc cf       	rjmp	.-8      	; 0x4a2 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     4aa:	20 91 9e 00 	lds	r18, 0x009E
     4ae:	21 60       	ori	r18, 0x01	; 1
     4b0:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     4b4:	10 92 4d 01 	sts	0x014D, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     4b8:	20 91 a0 00 	lds	r18, 0x00A0
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	20 72       	andi	r18, 0x20	; 32
     4c0:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     4c2:	40 91 a0 00 	lds	r20, 0x00A0
     4c6:	4f 7d       	andi	r20, 0xDF	; 223
     4c8:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     4cc:	40 91 9f 00 	lds	r20, 0x009F
     4d0:	4f 7d       	andi	r20, 0xDF	; 223
     4d2:	40 93 9f 00 	sts	0x009F, r20
     4d6:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     4d8:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     4dc:	55 ff       	sbrs	r21, 5
     4de:	0b c0       	rjmp	.+22     	; 0x4f6 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     4e0:	40 91 9f 00 	lds	r20, 0x009F
     4e4:	4f 7d       	andi	r20, 0xDF	; 223
     4e6:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     4ea:	40 91 9f 00 	lds	r20, 0x009F
     4ee:	4d 7f       	andi	r20, 0xFD	; 253
     4f0:	40 93 9f 00 	sts	0x009F, r20
     4f4:	08 c0       	rjmp	.+16     	; 0x506 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4f6:	ef ec       	ldi	r30, 0xCF	; 207
     4f8:	f7 e0       	ldi	r31, 0x07	; 7
     4fa:	31 97       	sbiw	r30, 0x01	; 1
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <USB_Host_ResetDevice+0x76>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <USB_Host_ResetDevice+0x7c>
     500:	00 00       	nop
     502:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     504:	49 f7       	brne	.-46     	; 0x4d8 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     506:	21 15       	cp	r18, r1
     508:	31 05       	cpc	r19, r1
     50a:	29 f0       	breq	.+10     	; 0x516 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     50c:	20 91 a0 00 	lds	r18, 0x00A0
     510:	20 62       	ori	r18, 0x20	; 32
     512:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     516:	00 97       	sbiw	r24, 0x00	; 0
     518:	29 f4       	brne	.+10     	; 0x524 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     51a:	80 91 9e 00 	lds	r24, 0x009E
     51e:	8e 7f       	andi	r24, 0xFE	; 254
     520:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     524:	80 91 a0 00 	lds	r24, 0x00A0
     528:	82 60       	ori	r24, 0x02	; 2
     52a:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     52e:	08 95       	ret

00000530 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     530:	40 91 9e 00 	lds	r20, 0x009E
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	41 70       	andi	r20, 0x01	; 1
     538:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     53a:	20 91 a0 00 	lds	r18, 0x00A0
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	20 72       	andi	r18, 0x20	; 32
     542:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     544:	90 91 a0 00 	lds	r25, 0x00A0
     548:	9f 7d       	andi	r25, 0xDF	; 223
     54a:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     54e:	90 91 9f 00 	lds	r25, 0x009F
     552:	9f 7d       	andi	r25, 0xDF	; 223
     554:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     558:	90 91 9e 00 	lds	r25, 0x009E
     55c:	91 60       	ori	r25, 0x01	; 1
     55e:	90 93 9e 00 	sts	0x009E, r25
     562:	26 c0       	rjmp	.+76     	; 0x5b0 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     564:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     568:	95 ff       	sbrs	r25, 5
     56a:	06 c0       	rjmp	.+12     	; 0x578 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     56c:	90 91 9f 00 	lds	r25, 0x009F
     570:	9f 7d       	andi	r25, 0xDF	; 223
     572:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     576:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     578:	90 91 57 01 	lds	r25, 0x0157
     57c:	91 30       	cpi	r25, 0x01	; 1
     57e:	d9 f0       	breq	.+54     	; 0x5b6 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     580:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     584:	94 ff       	sbrs	r25, 4
     586:	09 c0       	rjmp	.+18     	; 0x59a <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     588:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     58c:	80 91 a6 00 	lds	r24, 0x00A6
     590:	8f 7e       	andi	r24, 0xEF	; 239
     592:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     596:	82 e0       	ldi	r24, 0x02	; 2

			break;
     598:	0f c0       	rjmp	.+30     	; 0x5b8 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     59a:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     59e:	91 ff       	sbrs	r25, 1
     5a0:	07 c0       	rjmp	.+14     	; 0x5b0 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     5a2:	80 91 a6 00 	lds	r24, 0x00A6
     5a6:	8d 7f       	andi	r24, 0xFD	; 253
     5a8:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     5ac:	83 e0       	ldi	r24, 0x03	; 3

			break;
     5ae:	04 c0       	rjmp	.+8      	; 0x5b8 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     5b0:	88 23       	and	r24, r24
     5b2:	c1 f6       	brne	.-80     	; 0x564 <USB_Host_WaitMS+0x34>
     5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     5b6:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     5b8:	41 15       	cp	r20, r1
     5ba:	51 05       	cpc	r21, r1
     5bc:	29 f4       	brne	.+10     	; 0x5c8 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     5be:	90 91 9e 00 	lds	r25, 0x009E
     5c2:	9e 7f       	andi	r25, 0xFE	; 254
     5c4:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     5c8:	21 15       	cp	r18, r1
     5ca:	31 05       	cpc	r19, r1
     5cc:	29 f0       	breq	.+10     	; 0x5d8 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     5ce:	90 91 a0 00 	lds	r25, 0x00A0
     5d2:	90 62       	ori	r25, 0x20	; 32
     5d4:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     5d8:	08 95       	ret

000005da <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	28 97       	sbiw	r28, 0x08	; 8
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     5f2:	80 91 57 01 	lds	r24, 0x0157
     5f6:	85 30       	cpi	r24, 0x05	; 5
     5f8:	09 f4       	brne	.+2      	; 0x5fc <USB_Host_ProcessNextHostState+0x22>
     5fa:	99 c0       	rjmp	.+306    	; 0x72e <USB_Host_ProcessNextHostState+0x154>
     5fc:	86 30       	cpi	r24, 0x06	; 6
     5fe:	68 f4       	brcc	.+26     	; 0x61a <USB_Host_ProcessNextHostState+0x40>
     600:	82 30       	cpi	r24, 0x02	; 2
     602:	c1 f1       	breq	.+112    	; 0x674 <USB_Host_ProcessNextHostState+0x9a>
     604:	83 30       	cpi	r24, 0x03	; 3
     606:	18 f4       	brcc	.+6      	; 0x60e <USB_Host_ProcessNextHostState+0x34>
     608:	88 23       	and	r24, r24
     60a:	a1 f0       	breq	.+40     	; 0x634 <USB_Host_ProcessNextHostState+0x5a>
     60c:	04 c1       	rjmp	.+520    	; 0x816 <USB_Host_ProcessNextHostState+0x23c>
     60e:	83 30       	cpi	r24, 0x03	; 3
     610:	d9 f1       	breq	.+118    	; 0x688 <USB_Host_ProcessNextHostState+0xae>
     612:	84 30       	cpi	r24, 0x04	; 4
     614:	09 f0       	breq	.+2      	; 0x618 <USB_Host_ProcessNextHostState+0x3e>
     616:	ff c0       	rjmp	.+510    	; 0x816 <USB_Host_ProcessNextHostState+0x23c>
     618:	62 c0       	rjmp	.+196    	; 0x6de <USB_Host_ProcessNextHostState+0x104>
     61a:	87 30       	cpi	r24, 0x07	; 7
     61c:	09 f4       	brne	.+2      	; 0x620 <USB_Host_ProcessNextHostState+0x46>
     61e:	9e c0       	rjmp	.+316    	; 0x75c <USB_Host_ProcessNextHostState+0x182>
     620:	87 30       	cpi	r24, 0x07	; 7
     622:	08 f4       	brcc	.+2      	; 0x626 <USB_Host_ProcessNextHostState+0x4c>
     624:	8f c0       	rjmp	.+286    	; 0x744 <USB_Host_ProcessNextHostState+0x16a>
     626:	88 30       	cpi	r24, 0x08	; 8
     628:	09 f4       	brne	.+2      	; 0x62c <USB_Host_ProcessNextHostState+0x52>
     62a:	b8 c0       	rjmp	.+368    	; 0x79c <USB_Host_ProcessNextHostState+0x1c2>
     62c:	89 30       	cpi	r24, 0x09	; 9
     62e:	09 f0       	breq	.+2      	; 0x632 <USB_Host_ProcessNextHostState+0x58>
     630:	f2 c0       	rjmp	.+484    	; 0x816 <USB_Host_ProcessNextHostState+0x23c>
     632:	d9 c0       	rjmp	.+434    	; 0x7e6 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     634:	00 91 4a 01 	lds	r16, 0x014A
     638:	10 91 4b 01 	lds	r17, 0x014B
     63c:	01 15       	cp	r16, r1
     63e:	11 05       	cpc	r17, r1
     640:	09 f4       	brne	.+2      	; 0x644 <USB_Host_ProcessNextHostState+0x6a>
     642:	e9 c0       	rjmp	.+466    	; 0x816 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	74 df       	rcall	.-280    	; 0x530 <USB_Host_WaitMS>
     648:	68 2f       	mov	r22, r24
     64a:	88 23       	and	r24, r24
     64c:	31 f0       	breq	.+12     	; 0x65a <USB_Host_ProcessNextHostState+0x80>
     64e:	80 91 4c 01 	lds	r24, 0x014C
				{
					USB_HostState = PostWaitState;
     652:	80 93 57 01 	sts	0x0157, r24
     656:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     658:	d2 c0       	rjmp	.+420    	; 0x7fe <USB_Host_ProcessNextHostState+0x224>
					break;
     65a:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
     65c:	10 40       	sbci	r17, 0x00	; 0
     65e:	10 93 4b 01 	sts	0x014B, r17
     662:	00 93 4a 01 	sts	0x014A, r16
     666:	01 15       	cp	r16, r1
     668:	11 05       	cpc	r17, r1
     66a:	09 f0       	breq	.+2      	; 0x66e <USB_Host_ProcessNextHostState+0x94>
     66c:	d4 c0       	rjmp	.+424    	; 0x816 <USB_Host_ProcessNextHostState+0x23c>
     66e:	80 91 4c 01 	lds	r24, 0x014C
				  USB_HostState = PostWaitState;
     672:	07 c0       	rjmp	.+14     	; 0x682 <USB_Host_ProcessNextHostState+0xa8>
     674:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     676:	93 e0       	ldi	r25, 0x03	; 3
     678:	90 93 4b 01 	sts	0x014B, r25
     67c:	80 93 4a 01 	sts	0x014A, r24
     680:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     682:	80 93 57 01 	sts	0x0157, r24
     686:	c7 c0       	rjmp	.+398    	; 0x816 <USB_Host_ProcessNextHostState+0x23c>
			break;
     688:	80 91 4a 01 	lds	r24, 0x014A
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     68c:	90 91 4b 01 	lds	r25, 0x014B
     690:	9c 01       	movw	r18, r24
     692:	21 50       	subi	r18, 0x01	; 1
     694:	30 40       	sbci	r19, 0x00	; 0
     696:	30 93 4b 01 	sts	0x014B, r19
     69a:	20 93 4a 01 	sts	0x014A, r18
     69e:	00 97       	sbiw	r24, 0x00	; 0
     6a0:	39 f0       	breq	.+14     	; 0x6b0 <USB_Host_ProcessNextHostState+0xd6>
     6a2:	8f ec       	ldi	r24, 0xCF	; 207
     6a4:	97 e0       	ldi	r25, 0x07	; 7
     6a6:	01 97       	sbiw	r24, 0x01	; 1
     6a8:	f1 f7       	brne	.-4      	; 0x6a6 <USB_Host_ProcessNextHostState+0xcc>
     6aa:	00 c0       	rjmp	.+0      	; 0x6ac <USB_Host_ProcessNextHostState+0xd2>
     6ac:	00 00       	nop
     6ae:	b3 c0       	rjmp	.+358    	; 0x816 <USB_Host_ProcessNextHostState+0x23c>
     6b0:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     6b2:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     6b6:	80 61       	ori	r24, 0x10	; 16
     6b8:	80 93 d8 00 	sts	0x00D8, r24
     6bc:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     6c0:	8b 7f       	andi	r24, 0xFB	; 251
     6c2:	80 93 dd 00 	sts	0x00DD, r24
     6c6:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     6ca:	80 61       	ori	r24, 0x10	; 16
     6cc:	80 93 d7 00 	sts	0x00D7, r24
     6d0:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     6d4:	82 60       	ori	r24, 0x02	; 2
     6d6:	80 93 dd 00 	sts	0x00DD, r24
     6da:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     6dc:	d2 cf       	rjmp	.-92     	; 0x682 <USB_Host_ProcessNextHostState+0xa8>
     6de:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     6e2:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     6e4:	98 c0       	rjmp	.+304    	; 0x816 <USB_Host_ProcessNextHostState+0x23c>
     6e6:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     6ea:	8e 7f       	andi	r24, 0xFE	; 254
     6ec:	80 93 9f 00 	sts	0x009F, r24
     6f0:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     6f4:	8d 7f       	andi	r24, 0xFD	; 253
     6f6:	80 93 9f 00 	sts	0x009F, r24
     6fa:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     6fe:	8d 7f       	andi	r24, 0xFD	; 253
     700:	80 93 df 00 	sts	0x00DF, r24
     704:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     708:	82 60       	ori	r24, 0x02	; 2
     70a:	80 93 de 00 	sts	0x00DE, r24
     70e:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     712:	81 60       	ori	r24, 0x01	; 1
     714:	80 93 9e 00 	sts	0x009E, r24
     718:	66 d1       	rcall	.+716    	; 0x9e6 <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     71a:	10 92 57 01 	sts	0x0157, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     71e:	84 e6       	ldi	r24, 0x64	; 100
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	90 93 4b 01 	sts	0x014B, r25
     726:	80 93 4a 01 	sts	0x014A, r24
     72a:	85 e0       	ldi	r24, 0x05	; 5
     72c:	59 c0       	rjmp	.+178    	; 0x7e0 <USB_Host_ProcessNextHostState+0x206>
     72e:	aa de       	rcall	.-684    	; 0x484 <USB_Host_ResetDevice>
     730:	10 92 57 01 	sts	0x0157, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     734:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	90 93 4b 01 	sts	0x014B, r25
     73c:	80 93 4a 01 	sts	0x014A, r24
     740:	86 e0       	ldi	r24, 0x06	; 6
     742:	4e c0       	rjmp	.+156    	; 0x7e0 <USB_Host_ProcessNextHostState+0x206>
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     74a:	20 e4       	ldi	r18, 0x40	; 64
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	01 e0       	ldi	r16, 0x01	; 1
     750:	c4 d0       	rcall	.+392    	; 0x8da <Pipe_ConfigurePipe>
     752:	88 23       	and	r24, r24
     754:	09 f4       	brne	.+2      	; 0x758 <USB_Host_ProcessNextHostState+0x17e>
     756:	4f c0       	rjmp	.+158    	; 0x7f6 <USB_Host_ProcessNextHostState+0x21c>
     758:	87 e0       	ldi	r24, 0x07	; 7
     75a:	93 cf       	rjmp	.-218    	; 0x682 <USB_Host_ProcessNextHostState+0xa8>
     75c:	af e4       	ldi	r26, 0x4F	; 79
     75e:	b1 e0       	ldi	r27, 0x01	; 1
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     760:	ef e1       	ldi	r30, 0x1F	; 31
     762:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     764:	88 e0       	ldi	r24, 0x08	; 8
     766:	01 90       	ld	r0, Z+
     768:	0d 92       	st	X+, r0
     76a:	81 50       	subi	r24, 0x01	; 1
     76c:	e1 f7       	brne	.-8      	; 0x766 <USB_Host_ProcessNextHostState+0x18c>
     76e:	10 92 a7 00 	sts	0x00A7, r1
     772:	ce 01       	movw	r24, r28
     774:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     776:	78 d3       	rcall	.+1776   	; 0xe68 <USB_Host_SendControlRequest>
     778:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     77a:	88 23       	and	r24, r24
     77c:	09 f0       	breq	.+2      	; 0x780 <USB_Host_ProcessNextHostState+0x1a6>
     77e:	3e c0       	rjmp	.+124    	; 0x7fc <USB_Host_ProcessNextHostState+0x222>
     780:	88 85       	ldd	r24, Y+8	; 0x08
     782:	80 93 2f 01 	sts	0x012F, r24
     786:	7e de       	rcall	.-772    	; 0x484 <USB_Host_ResetDevice>
     788:	10 92 57 01 	sts	0x0157, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     78c:	88 ec       	ldi	r24, 0xC8	; 200
     78e:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
     790:	90 93 4b 01 	sts	0x014B, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     794:	80 93 4a 01 	sts	0x014A, r24
     798:	88 e0       	ldi	r24, 0x08	; 8
     79a:	22 c0       	rjmp	.+68     	; 0x7e0 <USB_Host_ProcessNextHostState+0x206>
     79c:	20 91 2f 01 	lds	r18, 0x012F
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	40 e0       	ldi	r20, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     7a8:	01 e0       	ldi	r16, 0x01	; 1
     7aa:	97 d0       	rcall	.+302    	; 0x8da <Pipe_ConfigurePipe>
     7ac:	88 23       	and	r24, r24
     7ae:	19 f1       	breq	.+70     	; 0x7f6 <USB_Host_ProcessNextHostState+0x21c>
     7b0:	af e4       	ldi	r26, 0x4F	; 79
     7b2:	b1 e0       	ldi	r27, 0x01	; 1
     7b4:	e7 e2       	ldi	r30, 0x27	; 39
     7b6:	f1 e0       	ldi	r31, 0x01	; 1
     7b8:	88 e0       	ldi	r24, 0x08	; 8
     7ba:	01 90       	ld	r0, Z+
     7bc:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     7be:	81 50       	subi	r24, 0x01	; 1
     7c0:	e1 f7       	brne	.-8      	; 0x7ba <USB_Host_ProcessNextHostState+0x1e0>
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	50 d3       	rcall	.+1696   	; 0xe68 <USB_Host_SendControlRequest>
     7c8:	68 2f       	mov	r22, r24
     7ca:	88 23       	and	r24, r24
     7cc:	b9 f4       	brne	.+46     	; 0x7fc <USB_Host_ProcessNextHostState+0x222>
     7ce:	10 92 57 01 	sts	0x0157, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     7d2:	84 e6       	ldi	r24, 0x64	; 100
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	90 93 4b 01 	sts	0x014B, r25
     7da:	80 93 4a 01 	sts	0x014A, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     7de:	89 e0       	ldi	r24, 0x09	; 9
     7e0:	80 93 4c 01 	sts	0x014C, r24
     7e4:	18 c0       	rjmp	.+48     	; 0x816 <USB_Host_ProcessNextHostState+0x23c>
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	80 93 a1 00 	sts	0x00A1, r24
     7ec:	8a e0       	ldi	r24, 0x0A	; 10
     7ee:	80 93 57 01 	sts	0x0157, r24
     7f2:	a1 dd       	rcall	.-1214   	; 0x336 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     7f4:	10 c0       	rjmp	.+32     	; 0x816 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	84 e0       	ldi	r24, 0x04	; 4
     7fa:	01 c0       	rjmp	.+2      	; 0x7fe <USB_Host_ProcessNextHostState+0x224>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     7fc:	83 e0       	ldi	r24, 0x03	; 3
     7fe:	90 91 57 01 	lds	r25, 0x0157

			EVENT_USB_Host_DeviceEnumerationComplete();
     802:	91 30       	cpi	r25, 0x01	; 1
     804:	41 f0       	breq	.+16     	; 0x816 <USB_Host_ProcessNextHostState+0x23c>
			break;
     806:	15 de       	rcall	.-982    	; 0x432 <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     808:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     80c:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     80e:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     812:	8b dd       	rcall	.-1258   	; 0x32a <EVENT_USB_Host_DeviceUnattached>
     814:	64 d1       	rcall	.+712    	; 0xade <USB_ResetInterface>
     816:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16

		USB_ResetInterface();
     82a:	08 95       	ret

0000082c <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     82c:	af 92       	push	r10
     82e:	bf 92       	push	r11
     830:	cf 92       	push	r12
     832:	df 92       	push	r13
     834:	ff 92       	push	r15
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	5c 01       	movw	r10, r24
     840:	eb 01       	movw	r28, r22
     842:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     844:	80 91 aa 00 	lds	r24, 0x00AA
     848:	8f 7c       	andi	r24, 0xCF	; 207
     84a:	80 61       	ori	r24, 0x10	; 16
     84c:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     850:	00 d1       	rcall	.+512    	; 0xa52 <Pipe_WaitUntilReady>
     852:	f8 2e       	mov	r15, r24
     854:	88 23       	and	r24, r24
     856:	b1 f5       	brne	.+108    	; 0x8c4 <Pipe_Read_Stream_LE+0x98>
     858:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     85a:	d1 04       	cpc	r13, r1
     85c:	41 f0       	breq	.+16     	; 0x86e <Pipe_Read_Stream_LE+0x42>
     85e:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     860:	00 81       	ld	r16, Z
     862:	11 81       	ldd	r17, Z+1	; 0x01
     864:	c0 1b       	sub	r28, r16
     866:	d1 0b       	sbc	r29, r17
     868:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     86a:	1b 1d       	adc	r17, r11
     86c:	01 c0       	rjmp	.+2      	; 0x870 <Pipe_Read_Stream_LE+0x44>
     86e:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     870:	aa 24       	eor	r10, r10
     872:	bb 24       	eor	r11, r11
     874:	23 c0       	rjmp	.+70     	; 0x8bc <Pipe_Read_Stream_LE+0x90>
     876:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     87a:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     87c:	16 c0       	rjmp	.+44     	; 0x8aa <Pipe_Read_Stream_LE+0x7e>
     87e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     882:	8e 77       	andi	r24, 0x7E	; 126
     884:	80 93 a6 00 	sts	0x00A6, r24
     888:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     88a:	d1 04       	cpc	r13, r1
     88c:	51 f0       	breq	.+20     	; 0x8a2 <Pipe_Read_Stream_LE+0x76>
     88e:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     890:	80 81       	ld	r24, Z
     892:	91 81       	ldd	r25, Z+1	; 0x01
     894:	8a 0d       	add	r24, r10
     896:	9b 1d       	adc	r25, r11
     898:	91 83       	std	Z+1, r25	; 0x01
     89a:	80 83       	st	Z, r24
     89c:	64 e0       	ldi	r22, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     89e:	f6 2e       	mov	r15, r22
     8a0:	11 c0       	rjmp	.+34     	; 0x8c4 <Pipe_Read_Stream_LE+0x98>
     8a2:	d7 d0       	rcall	.+430    	; 0xa52 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     8a4:	88 23       	and	r24, r24
     8a6:	51 f0       	breq	.+20     	; 0x8bc <Pipe_Read_Stream_LE+0x90>
     8a8:	0c c0       	rjmp	.+24     	; 0x8c2 <Pipe_Read_Stream_LE+0x96>
     8aa:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     8ae:	f8 01       	movw	r30, r16
     8b0:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     8b2:	8f 01       	movw	r16, r30
     8b4:	21 97       	sbiw	r28, 0x01	; 1
     8b6:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     8b8:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     8ba:	b1 1c       	adc	r11, r1
     8bc:	20 97       	sbiw	r28, 0x00	; 0
     8be:	d9 f6       	brne	.-74     	; 0x876 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     8c0:	01 c0       	rjmp	.+2      	; 0x8c4 <Pipe_Read_Stream_LE+0x98>
     8c2:	f8 2e       	mov	r15, r24
     8c4:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     8c6:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     8c8:	cf 91       	pop	r28
     8ca:	1f 91       	pop	r17
     8cc:	0f 91       	pop	r16
     8ce:	ff 90       	pop	r15
     8d0:	df 90       	pop	r13
     8d2:	cf 90       	pop	r12
     8d4:	bf 90       	pop	r11
     8d6:	af 90       	pop	r10
     8d8:	08 95       	ret

000008da <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     8da:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     8dc:	58 2f       	mov	r21, r24
     8de:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     8e0:	87 ff       	sbrs	r24, 7
     8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <Pipe_ConfigurePipe+0xe>
     8e4:	80 e1       	ldi	r24, 0x10	; 16
     8e6:	01 c0       	rjmp	.+2      	; 0x8ea <Pipe_ConfigurePipe+0x10>
     8e8:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     8ea:	57 30       	cpi	r21, 0x07	; 7
     8ec:	08 f0       	brcs	.+2      	; 0x8f0 <Pipe_ConfigurePipe+0x16>
     8ee:	57 c0       	rjmp	.+174    	; 0x99e <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     8f0:	66 23       	and	r22, r22
     8f2:	09 f4       	brne	.+2      	; 0x8f6 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     8f4:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     8f6:	4f 70       	andi	r20, 0x0F	; 15
     8f8:	62 95       	swap	r22
     8fa:	66 0f       	add	r22, r22
     8fc:	66 0f       	add	r22, r22
     8fe:	60 7c       	andi	r22, 0xC0	; 192
     900:	64 2b       	or	r22, r20
     902:	68 2b       	or	r22, r24
     904:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     906:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     908:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     90c:	45 17       	cp	r20, r21
     90e:	a9 f4       	brne	.+42     	; 0x93a <Pipe_ConfigurePipe+0x60>
     910:	04 c0       	rjmp	.+8      	; 0x91a <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     912:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	03 c0       	rjmp	.+6      	; 0x920 <Pipe_ConfigurePipe+0x46>
     91a:	88 e0       	ldi	r24, 0x08	; 8
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     920:	82 17       	cp	r24, r18
     922:	93 07       	cpc	r25, r19
     924:	10 f4       	brcc	.+4      	; 0x92a <Pipe_ConfigurePipe+0x50>
     926:	75 30       	cpi	r23, 0x05	; 5
     928:	a1 f7       	brne	.-24     	; 0x912 <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     92a:	87 2f       	mov	r24, r23
     92c:	82 95       	swap	r24
     92e:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     930:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     932:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     934:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     936:	e0 e0       	ldi	r30, 0x00	; 0
     938:	08 c0       	rjmp	.+16     	; 0x94a <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     93a:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     93e:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     942:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     946:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     94a:	81 ff       	sbrs	r24, 1
     94c:	20 c0       	rjmp	.+64     	; 0x98e <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     94e:	90 91 a9 00 	lds	r25, 0x00A9
     952:	9e 7f       	andi	r25, 0xFE	; 254
     954:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     958:	90 91 ab 00 	lds	r25, 0x00AB
     95c:	9d 7f       	andi	r25, 0xFD	; 253
     95e:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     962:	90 91 a9 00 	lds	r25, 0x00A9
     966:	91 60       	ori	r25, 0x01	; 1
     968:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     96c:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     970:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     974:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     978:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     97c:	80 91 a9 00 	lds	r24, 0x00A9
     980:	80 62       	ori	r24, 0x20	; 32
     982:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     986:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     98a:	87 ff       	sbrs	r24, 7
     98c:	08 c0       	rjmp	.+16     	; 0x99e <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     98e:	4f 5f       	subi	r20, 0xFF	; 255
     990:	47 30       	cpi	r20, 0x07	; 7
     992:	09 f0       	breq	.+2      	; 0x996 <Pipe_ConfigurePipe+0xbc>
     994:	b9 cf       	rjmp	.-142    	; 0x908 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     996:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	01 c0       	rjmp	.+2      	; 0x9a0 <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     99e:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     9a0:	0f 91       	pop	r16
     9a2:	08 95       	ret

000009a4 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     9a4:	ff 92       	push	r15
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
     9b0:	ec 01       	movw	r28, r24
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     9b2:	ff 24       	eor	r15, r15
     9b4:	0d c0       	rjmp	.+26     	; 0x9d0 <Pipe_ConfigurePipeTable+0x2c>
	{
		if (!(Table[i].Address))
     9b6:	88 81       	ld	r24, Y
     9b8:	88 23       	and	r24, r24
     9ba:	41 f0       	breq	.+16     	; 0x9cc <Pipe_ConfigurePipeTable+0x28>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     9bc:	29 81       	ldd	r18, Y+1	; 0x01
     9be:	3a 81       	ldd	r19, Y+2	; 0x02
     9c0:	6c 81       	ldd	r22, Y+4	; 0x04
     9c2:	4b 81       	ldd	r20, Y+3	; 0x03
     9c4:	0d 81       	ldd	r16, Y+5	; 0x05
     9c6:	89 df       	rcall	.-238    	; 0x8da <Pipe_ConfigurePipe>
     9c8:	88 23       	and	r24, r24
     9ca:	31 f0       	breq	.+12     	; 0x9d8 <Pipe_ConfigurePipeTable+0x34>
     9cc:	f3 94       	inc	r15
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     9ce:	26 96       	adiw	r28, 0x06	; 6
     9d0:	f1 16       	cp	r15, r17
     9d2:	89 f7       	brne	.-30     	; 0x9b6 <Pipe_ConfigurePipeTable+0x12>
     9d4:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}
	
	return true;
     9d6:	01 c0       	rjmp	.+2      	; 0x9da <Pipe_ConfigurePipeTable+0x36>
     9d8:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
     9da:	df 91       	pop	r29
		}
	}
	
	return true;
}
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	ff 90       	pop	r15
     9e4:	08 95       	ret

000009e6 <Pipe_ClearPipes>:
     9e6:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     9f0:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     9f4:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     9f8:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     9fc:	90 91 a9 00 	lds	r25, 0x00A9
     a00:	9e 7f       	andi	r25, 0xFE	; 254
     a02:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a06:	8f 5f       	subi	r24, 0xFF	; 255
     a08:	87 30       	cpi	r24, 0x07	; 7
     a0a:	81 f7       	brne	.-32     	; 0x9ec <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     a0c:	08 95       	ret

00000a0e <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     a0e:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     a12:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a16:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a18:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a1c:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     a20:	27 ff       	sbrs	r18, 7
     a22:	0c c0       	rjmp	.+24     	; 0xa3c <Pipe_IsEndpointBound+0x2e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     a24:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     a28:	53 2f       	mov	r21, r19
     a2a:	5f 70       	andi	r21, 0x0F	; 15
     a2c:	30 ff       	sbrs	r19, 0
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <Pipe_IsEndpointBound+0x26>
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	01 c0       	rjmp	.+2      	; 0xa36 <Pipe_IsEndpointBound+0x28>
     a34:	20 e8       	ldi	r18, 0x80	; 128
     a36:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     a38:	28 17       	cp	r18, r24
     a3a:	49 f0       	breq	.+18     	; 0xa4e <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a3c:	9f 5f       	subi	r25, 0xFF	; 255
     a3e:	97 30       	cpi	r25, 0x07	; 7
     a40:	59 f7       	brne	.-42     	; 0xa18 <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a42:	84 2f       	mov	r24, r20
     a44:	8f 70       	andi	r24, 0x0F	; 15
     a46:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     a4e:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     a50:	08 95       	ret

00000a52 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     a52:	80 91 a2 00 	lds	r24, 0x00A2
     a56:	90 91 a3 00 	lds	r25, 0x00A3
     a5a:	45 e6       	ldi	r20, 0x65	; 101
     a5c:	01 c0       	rjmp	.+2      	; 0xa60 <Pipe_WaitUntilReady+0xe>
     a5e:	c9 01       	movw	r24, r18
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a60:	20 91 aa 00 	lds	r18, 0x00AA
     a64:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     a66:	20 31       	cpi	r18, 0x10	; 16
     a68:	29 f4       	brne	.+10     	; 0xa74 <Pipe_WaitUntilReady+0x22>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     a6a:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     a6e:	20 ff       	sbrs	r18, 0
     a70:	05 c0       	rjmp	.+10     	; 0xa7c <Pipe_WaitUntilReady+0x2a>
     a72:	17 c0       	rjmp	.+46     	; 0xaa2 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     a74:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     a78:	22 fd       	sbrc	r18, 2
     a7a:	13 c0       	rjmp	.+38     	; 0xaa2 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     a7c:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     a80:	21 fd       	sbrc	r18, 1
     a82:	11 c0       	rjmp	.+34     	; 0xaa6 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     a84:	20 91 57 01 	lds	r18, 0x0157
     a88:	21 30       	cpi	r18, 0x01	; 1
     a8a:	79 f0       	breq	.+30     	; 0xaaa <Pipe_WaitUntilReady+0x58>
     a8c:	20 91 a2 00 	lds	r18, 0x00A2
     a90:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     a94:	28 17       	cp	r18, r24
     a96:	39 07       	cpc	r19, r25
     a98:	19 f3       	breq	.-58     	; 0xa60 <Pipe_WaitUntilReady+0xe>
     a9a:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     a9c:	01 f7       	brne	.-64     	; 0xa5e <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_Timeout;
     a9e:	83 e0       	ldi	r24, 0x03	; 3
     aa0:	08 95       	ret
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     aaa:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     aac:	08 95       	ret

00000aae <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     aae:	75 d0       	rcall	.+234    	; 0xb9a <USB_INT_DisableAllInterrupts>
     ab0:	7c d0       	rcall	.+248    	; 0xbaa <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     ab2:	e0 ee       	ldi	r30, 0xE0	; 224
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     ab6:	80 81       	ld	r24, Z
     ab8:	81 60       	ori	r24, 0x01	; 1
     aba:	80 83       	st	Z, r24
     abc:	e8 ed       	ldi	r30, 0xD8	; 216
     abe:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     ac0:	80 81       	ld	r24, Z
     ac2:	8f 77       	andi	r24, 0x7F	; 127
     ac4:	80 83       	st	Z, r24
     ac6:	19 bc       	out	0x29, r1	; 41
     ac8:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     aca:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     acc:	8c 91       	ld	r24, X
     ace:	8e 7f       	andi	r24, 0xFE	; 254
     ad0:	8c 93       	st	X, r24
     ad2:	80 81       	ld	r24, Z
     ad4:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     ad6:	80 83       	st	Z, r24
     ad8:	10 92 4e 01 	sts	0x014E, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     adc:	08 95       	ret

00000ade <USB_ResetInterface>:
     ade:	5d d0       	rcall	.+186    	; 0xb9a <USB_INT_DisableAllInterrupts>
}
     ae0:	64 d0       	rcall	.+200    	; 0xbaa <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     ae2:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     ae6:	8f 77       	andi	r24, 0x7F	; 127
     ae8:	80 93 d8 00 	sts	0x00D8, r24
     aec:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     af0:	80 68       	ori	r24, 0x80	; 128
     af2:	80 93 d8 00 	sts	0x00D8, r24
     af6:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     afa:	8f 7d       	andi	r24, 0xDF	; 223
     afc:	80 93 d8 00 	sts	0x00D8, r24
     b00:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     b04:	8f 77       	andi	r24, 0x7F	; 127
     b06:	80 93 d7 00 	sts	0x00D7, r24
     b0a:	8c e0       	ldi	r24, 0x0C	; 12
     b0c:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b0e:	8e e0       	ldi	r24, 0x0E	; 14
     b10:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b12:	09 b4       	in	r0, 0x29	; 41
     b14:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     b16:	fd cf       	rjmp	.-6      	; 0xb12 <USB_ResetInterface+0x34>
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	80 93 57 01 	sts	0x0157, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     b1e:	10 92 4d 01 	sts	0x014D, r1
	USB_Host_ConfigurationNumber = 0;
     b22:	80 e4       	ldi	r24, 0x40	; 64
     b24:	80 93 2f 01 	sts	0x012F, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     b28:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     b2c:	80 64       	ori	r24, 0x40	; 64
     b2e:	80 93 d8 00 	sts	0x00D8, r24
     b32:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b36:	81 60       	ori	r24, 0x01	; 1
     b38:	80 93 dd 00 	sts	0x00DD, r24
     b3c:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     b40:	84 60       	ori	r24, 0x04	; 4
     b42:	80 93 dd 00 	sts	0x00DD, r24
     b46:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     b4a:	8f 7e       	andi	r24, 0xEF	; 239
     b4c:	80 93 d7 00 	sts	0x00D7, r24
     b50:	6f 9a       	sbi	0x0d, 7	; 13
     b52:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     b54:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     b58:	81 60       	ori	r24, 0x01	; 1
     b5a:	80 93 de 00 	sts	0x00DE, r24
     b5e:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     b62:	84 60       	ori	r24, 0x04	; 4
     b64:	80 93 de 00 	sts	0x00DE, r24
     b68:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b6c:	8e 7f       	andi	r24, 0xFE	; 254
     b6e:	80 93 e0 00 	sts	0x00E0, r24
     b72:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     b76:	80 61       	ori	r24, 0x10	; 16
     b78:	80 93 d8 00 	sts	0x00D8, r24
     b7c:	08 95       	ret

00000b7e <USB_Init>:
     b7e:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     b80:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     b82:	80 81       	ld	r24, Z
     b84:	8f 7e       	andi	r24, 0xEF	; 239
     b86:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     b88:	e7 ed       	ldi	r30, 0xD7	; 215
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	81 60       	ori	r24, 0x01	; 1
     b90:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	80 93 4e 01 	sts	0x014E, r24

	USB_ResetInterface();
     b98:	a2 cf       	rjmp	.-188    	; 0xade <USB_ResetInterface>

00000b9a <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     b9a:	e8 ed       	ldi	r30, 0xD8	; 216
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	8c 7f       	andi	r24, 0xFC	; 252
     ba2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     ba4:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     ba8:	08 95       	ret

00000baa <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     baa:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     bae:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     bb2:	08 95       	ret

00000bb4 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     bb4:	1f 92       	push	r1
     bb6:	0f 92       	push	r0
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	0f 92       	push	r0
     bbc:	0b b6       	in	r0, 0x3b	; 59
     bbe:	0f 92       	push	r0
     bc0:	11 24       	eor	r1, r1
     bc2:	2f 93       	push	r18
     bc4:	3f 93       	push	r19
     bc6:	4f 93       	push	r20
     bc8:	5f 93       	push	r21
     bca:	6f 93       	push	r22
     bcc:	7f 93       	push	r23
     bce:	8f 93       	push	r24
     bd0:	9f 93       	push	r25
     bd2:	af 93       	push	r26
     bd4:	bf 93       	push	r27
     bd6:	ef 93       	push	r30
     bd8:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     bda:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     bde:	85 ff       	sbrs	r24, 5
     be0:	0a c0       	rjmp	.+20     	; 0xbf6 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     be2:	80 91 a0 00 	lds	r24, 0x00A0
     be6:	85 ff       	sbrs	r24, 5
     be8:	06 c0       	rjmp	.+12     	; 0xbf6 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     bea:	80 91 9f 00 	lds	r24, 0x009F
     bee:	8f 7d       	andi	r24, 0xDF	; 223
     bf0:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     bf4:	10 d1       	rcall	.+544    	; 0xe16 <USB_Event_Stub>
     bf6:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     bfa:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     bfc:	15 c0       	rjmp	.+42     	; 0xc28 <__vector_10+0x74>
     bfe:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     c02:	81 ff       	sbrs	r24, 1
     c04:	11 c0       	rjmp	.+34     	; 0xc28 <__vector_10+0x74>
     c06:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     c0a:	8d 7f       	andi	r24, 0xFD	; 253
     c0c:	80 93 9f 00 	sts	0x009F, r24
     c10:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     c14:	8e 7f       	andi	r24, 0xFE	; 254
     c16:	80 93 9f 00 	sts	0x009F, r24
     c1a:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     c1e:	8d 7f       	andi	r24, 0xFD	; 253
     c20:	80 93 a0 00 	sts	0x00A0, r24
     c24:	82 db       	rcall	.-2300   	; 0x32a <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     c26:	5b df       	rcall	.-330    	; 0xade <USB_ResetInterface>
     c28:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     c2c:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     c2e:	15 c0       	rjmp	.+42     	; 0xc5a <__vector_10+0xa6>
     c30:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     c34:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     c36:	11 c0       	rjmp	.+34     	; 0xc5a <__vector_10+0xa6>
     c38:	80 91 df 00 	lds	r24, 0x00DF
     c3c:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     c3e:	80 93 df 00 	sts	0x00DF, r24
     c42:	77 98       	cbi	0x0e, 7	; 14
     c44:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     c48:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c4a:	80 93 dd 00 	sts	0x00DD, r24
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	d0 db       	rcall	.-2144   	; 0x3f2 <EVENT_USB_Host_HostError>
     c52:	6b db       	rcall	.-2346   	; 0x32a <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	80 93 57 01 	sts	0x0157, r24
		EVENT_USB_Host_DeviceUnattached();
     c5a:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     c5e:	80 ff       	sbrs	r24, 0
     c60:	17 c0       	rjmp	.+46     	; 0xc90 <__vector_10+0xdc>
     c62:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     c66:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     c68:	13 c0       	rjmp	.+38     	; 0xc90 <__vector_10+0xdc>
     c6a:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     c6e:	8e 7f       	andi	r24, 0xFE	; 254
     c70:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     c74:	80 91 de 00 	lds	r24, 0x00DE
     c78:	8e 7f       	andi	r24, 0xFE	; 254
     c7a:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     c7e:	4f db       	rcall	.-2402   	; 0x31e <EVENT_USB_Host_DeviceAttached>
     c80:	80 91 a0 00 	lds	r24, 0x00A0
     c84:	82 60       	ori	r24, 0x02	; 2
     c86:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     c8a:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     c8c:	80 93 57 01 	sts	0x0157, r24
     c90:	80 91 df 00 	lds	r24, 0x00DF
     c94:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     c96:	0e c0       	rjmp	.+28     	; 0xcb4 <__vector_10+0x100>
     c98:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     c9c:	82 ff       	sbrs	r24, 2
     c9e:	0a c0       	rjmp	.+20     	; 0xcb4 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     ca0:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     ca4:	8b 7f       	andi	r24, 0xFB	; 251
     ca6:	80 93 df 00 	sts	0x00DF, r24
     caa:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	c1 db       	rcall	.-2174   	; 0x432 <EVENT_USB_Host_DeviceEnumerationFailed>
     cb0:	3c db       	rcall	.-2440   	; 0x32a <EVENT_USB_Host_DeviceUnattached>
     cb2:	15 df       	rcall	.-470    	; 0xade <USB_ResetInterface>
     cb4:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     cb6:	ef 91       	pop	r30
     cb8:	bf 91       	pop	r27
     cba:	af 91       	pop	r26
     cbc:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     cbe:	8f 91       	pop	r24
     cc0:	7f 91       	pop	r23

		USB_ResetInterface();
     cc2:	6f 91       	pop	r22
     cc4:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     cc6:	4f 91       	pop	r20
     cc8:	3f 91       	pop	r19
     cca:	2f 91       	pop	r18
     ccc:	0f 90       	pop	r0
     cce:	0b be       	out	0x3b, r0	; 59
     cd0:	0f 90       	pop	r0
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	0f 90       	pop	r0
     cd6:	1f 90       	pop	r1
     cd8:	18 95       	reti

00000cda <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     cda:	cf 92       	push	r12
     cdc:	df 92       	push	r13
     cde:	ef 92       	push	r14
     ce0:	ff 92       	push	r15
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	29 97       	sbiw	r28, 0x09	; 9
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	6b 01       	movw	r12, r22
     cfc:	8a 01       	movw	r16, r20
     cfe:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     d00:	90 e8       	ldi	r25, 0x80	; 128
     d02:	90 93 4f 01 	sts	0x014F, r25
     d06:	96 e0       	ldi	r25, 0x06	; 6
     d08:	90 93 50 01 	sts	0x0150, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     d12:	90 93 52 01 	sts	0x0152, r25
     d16:	80 93 51 01 	sts	0x0151, r24
     d1a:	10 92 54 01 	sts	0x0154, r1
     d1e:	10 92 53 01 	sts	0x0153, r1
     d22:	89 e0       	ldi	r24, 0x09	; 9
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	90 93 56 01 	sts	0x0156, r25
     d2a:	80 93 55 01 	sts	0x0155, r24
     d2e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     d32:	ce 01       	movw	r24, r28
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	98 d0       	rcall	.+304    	; 0xe68 <USB_Host_SendControlRequest>
     d38:	88 23       	and	r24, r24
     d3a:	b9 f4       	brne	.+46     	; 0xd6a <USB_Host_GetDeviceConfigDescriptor+0x90>
     d3c:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     d3e:	9c 81       	ldd	r25, Y+4	; 0x04
     d40:	f6 01       	movw	r30, r12
     d42:	91 83       	std	Z+1, r25	; 0x01
     d44:	80 83       	st	Z, r24
     d46:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
     d48:	f9 06       	cpc	r15, r25
     d4a:	70 f0       	brcs	.+28     	; 0xd68 <USB_Host_GetDeviceConfigDescriptor+0x8e>
     d4c:	90 93 56 01 	sts	0x0156, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     d50:	80 93 55 01 	sts	0x0155, r24
     d54:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     d56:	88 d0       	rcall	.+272    	; 0xe68 <USB_Host_SendControlRequest>
     d58:	88 23       	and	r24, r24
     d5a:	39 f4       	brne	.+14     	; 0xd6a <USB_Host_GetDeviceConfigDescriptor+0x90>
     d5c:	f8 01       	movw	r30, r16
     d5e:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     d60:	92 30       	cpi	r25, 0x02	; 2
     d62:	19 f0       	breq	.+6      	; 0xd6a <USB_Host_GetDeviceConfigDescriptor+0x90>
     d64:	86 e0       	ldi	r24, 0x06	; 6
     d66:	01 c0       	rjmp	.+2      	; 0xd6a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     d68:	85 e0       	ldi	r24, 0x05	; 5
     d6a:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     d6c:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     d6e:	f8 94       	cli
     d70:	de bf       	out	0x3e, r29	; 62
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	cd bf       	out	0x3d, r28	; 61
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	cf 90       	pop	r12
     d86:	08 95       	ret

00000d88 <USB_GetNextDescriptorComp>:
     d88:	af 92       	push	r10
     d8a:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     d8c:	cf 92       	push	r12
     d8e:	df 92       	push	r13
     d90:	ef 92       	push	r14
     d92:	ff 92       	push	r15
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	7c 01       	movw	r14, r24
     d9e:	8b 01       	movw	r16, r22
     da0:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     da2:	28 c0       	rjmp	.+80     	; 0xdf4 <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     da4:	f8 01       	movw	r30, r16
     da6:	c0 80       	ld	r12, Z
     da8:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     daa:	f6 01       	movw	r30, r12
     dac:	80 81       	ld	r24, Z
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	9e 01       	movw	r18, r28
     db2:	8c 17       	cp	r24, r28
     db4:	9d 07       	cpc	r25, r29
     db6:	08 f4       	brcc	.+2      	; 0xdba <USB_GetNextDescriptorComp+0x32>
     db8:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     dba:	c6 01       	movw	r24, r12
     dbc:	82 0f       	add	r24, r18
     dbe:	93 1f       	adc	r25, r19
     dc0:	f8 01       	movw	r30, r16
     dc2:	91 83       	std	Z+1, r25	; 0x01
     dc4:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
     dc6:	f7 01       	movw	r30, r14
     dc8:	80 81       	ld	r24, Z
     dca:	91 81       	ldd	r25, Z+1	; 0x01
     dcc:	82 1b       	sub	r24, r18
     dce:	93 0b       	sbc	r25, r19
     dd0:	91 83       	std	Z+1, r25	; 0x01
     dd2:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     dd4:	f8 01       	movw	r30, r16
     dd6:	80 81       	ld	r24, Z
     dd8:	91 81       	ldd	r25, Z+1	; 0x01
     dda:	f5 01       	movw	r30, r10
     ddc:	09 95       	icall
     dde:	82 30       	cpi	r24, 0x02	; 2
     de0:	49 f0       	breq	.+18     	; 0xdf4 <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     de2:	81 30       	cpi	r24, 0x01	; 1
     de4:	69 f4       	brne	.+26     	; 0xe00 <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
     de6:	f8 01       	movw	r30, r16
     de8:	d1 82       	std	Z+1, r13	; 0x01
     dea:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
     dec:	f7 01       	movw	r30, r14
     dee:	d1 83       	std	Z+1, r29	; 0x01
     df0:	c0 83       	st	Z, r28
     df2:	06 c0       	rjmp	.+12     	; 0xe00 <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     df4:	f7 01       	movw	r30, r14
     df6:	c0 81       	ld	r28, Z
     df8:	d1 81       	ldd	r29, Z+1	; 0x01
     dfa:	20 97       	sbiw	r28, 0x00	; 0
     dfc:	99 f6       	brne	.-90     	; 0xda4 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     dfe:	82 e0       	ldi	r24, 0x02	; 2
}
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	ff 90       	pop	r15
     e0a:	ef 90       	pop	r14
     e0c:	df 90       	pop	r13
     e0e:	cf 90       	pop	r12
     e10:	bf 90       	pop	r11
     e12:	af 90       	pop	r10
     e14:	08 95       	ret

00000e16 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     e16:	08 95       	ret

00000e18 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     e18:	1f 93       	push	r17
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e20:	c9 ee       	ldi	r28, 0xE9	; 233
     e22:	d3 e0       	ldi	r29, 0x03	; 3
     e24:	06 c0       	rjmp	.+12     	; 0xe32 <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	83 db       	rcall	.-2298   	; 0x530 <USB_Host_WaitMS>
     e2a:	88 23       	and	r24, r24
     e2c:	c9 f4       	brne	.+50     	; 0xe60 <USB_Host_WaitForIOS+0x48>
     e2e:	21 97       	sbiw	r28, 0x01	; 1
     e30:	b1 f0       	breq	.+44     	; 0xe5e <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     e32:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e34:	29 f4       	brne	.+10     	; 0xe40 <USB_Host_WaitForIOS+0x28>
     e36:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     e3a:	83 ff       	sbrs	r24, 3
     e3c:	f4 cf       	rjmp	.-24     	; 0xe26 <USB_Host_WaitForIOS+0xe>
     e3e:	0d c0       	rjmp	.+26     	; 0xe5a <USB_Host_WaitForIOS+0x42>
     e40:	11 30       	cpi	r17, 0x01	; 1
     e42:	29 f4       	brne	.+10     	; 0xe4e <USB_Host_WaitForIOS+0x36>
     e44:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     e48:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     e4a:	ed cf       	rjmp	.-38     	; 0xe26 <USB_Host_WaitForIOS+0xe>
     e4c:	06 c0       	rjmp	.+12     	; 0xe5a <USB_Host_WaitForIOS+0x42>
     e4e:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e50:	51 f7       	brne	.-44     	; 0xe26 <USB_Host_WaitForIOS+0xe>
     e52:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e56:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     e58:	e6 cf       	rjmp	.-52     	; 0xe26 <USB_Host_WaitForIOS+0xe>
     e5a:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <USB_Host_WaitForIOS+0x48>
     e5e:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     e60:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
     e62:	cf 91       	pop	r28
     e64:	1f 91       	pop	r17
     e66:	08 95       	ret

00000e68 <USB_Host_SendControlRequest>:
     e68:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     e6a:	ff 92       	push	r15
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     e76:	e0 90 9e 00 	lds	r14, 0x009E
     e7a:	ff 24       	eor	r15, r15
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	e8 22       	and	r14, r24
     e80:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     e82:	00 91 55 01 	lds	r16, 0x0155
     e86:	10 91 56 01 	lds	r17, 0x0156
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e8a:	80 91 9e 00 	lds	r24, 0x009E
     e8e:	81 60       	ori	r24, 0x01	; 1
     e90:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	4c db       	rcall	.-2408   	; 0x530 <USB_Host_WaitMS>
     e98:	88 23       	and	r24, r24
     e9a:	09 f0       	breq	.+2      	; 0xe9e <USB_Host_SendControlRequest+0x36>
     e9c:	ca c0       	rjmp	.+404    	; 0x1032 <USB_Host_SendControlRequest+0x1ca>
     e9e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     ea2:	8f 7c       	andi	r24, 0xCF	; 207
     ea4:	80 93 aa 00 	sts	0x00AA, r24
     ea8:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     eac:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
     eb0:	8f 7e       	andi	r24, 0xEF	; 239
     eb2:	80 93 a6 00 	sts	0x00A6, r24
     eb6:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     eba:	8f 7b       	andi	r24, 0xBF	; 191
     ebc:	80 93 a9 00 	sts	0x00A9, r24
     ec0:	88 e0       	ldi	r24, 0x08	; 8
     ec2:	ef e4       	ldi	r30, 0x4F	; 79
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
     ec4:	f1 e0       	ldi	r31, 0x01	; 1
     ec6:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     ec8:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     ecc:	81 50       	subi	r24, 0x01	; 1
     ece:	d9 f7       	brne	.-10     	; 0xec6 <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     ed0:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     ed4:	87 77       	andi	r24, 0x77	; 119
     ed6:	80 93 a6 00 	sts	0x00A6, r24
     eda:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     edc:	9d df       	rcall	.-198    	; 0xe18 <USB_Host_WaitForIOS>
     ede:	88 23       	and	r24, r24
     ee0:	09 f0       	breq	.+2      	; 0xee4 <USB_Host_SendControlRequest+0x7c>
     ee2:	a7 c0       	rjmp	.+334    	; 0x1032 <USB_Host_SendControlRequest+0x1ca>
     ee4:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ee8:	80 64       	ori	r24, 0x40	; 64
     eea:	80 93 a9 00 	sts	0x00A9, r24
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	1f db       	rcall	.-2498   	; 0x530 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ef2:	88 23       	and	r24, r24
     ef4:	09 f0       	breq	.+2      	; 0xef8 <USB_Host_SendControlRequest+0x90>
     ef6:	9d c0       	rjmp	.+314    	; 0x1032 <USB_Host_SendControlRequest+0x1ca>
     ef8:	80 91 4f 01 	lds	r24, 0x014F
     efc:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     efe:	4f c0       	rjmp	.+158    	; 0xf9e <USB_Host_SendControlRequest+0x136>
     f00:	80 91 aa 00 	lds	r24, 0x00AA
     f04:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f06:	80 61       	ori	r24, 0x10	; 16
     f08:	80 93 aa 00 	sts	0x00AA, r24
     f0c:	20 97       	sbiw	r28, 0x00	; 0
     f0e:	61 f5       	brne	.+88     	; 0xf68 <USB_Host_SendControlRequest+0x100>
     f10:	2e c0       	rjmp	.+92     	; 0xf6e <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     f12:	80 91 a9 00 	lds	r24, 0x00A9
     f16:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f18:	80 93 a9 00 	sts	0x00A9, r24
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	7c df       	rcall	.-264    	; 0xe18 <USB_Host_WaitForIOS>
     f20:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     f22:	09 f0       	breq	.+2      	; 0xf26 <USB_Host_SendControlRequest+0xbe>
     f24:	86 c0       	rjmp	.+268    	; 0x1032 <USB_Host_SendControlRequest+0x1ca>
     f26:	80 91 f6 00 	lds	r24, 0x00F6
     f2a:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	41 f4       	brne	.+16     	; 0xf42 <USB_Host_SendControlRequest+0xda>
     f32:	00 e0       	ldi	r16, 0x00	; 0
     f34:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
     f36:	05 c0       	rjmp	.+10     	; 0xf42 <USB_Host_SendControlRequest+0xda>
     f38:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
     f3c:	89 93       	st	Y+, r24
     f3e:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     f40:	10 40       	sbci	r17, 0x00	; 0
     f42:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
     f46:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	19 f0       	breq	.+6      	; 0xf54 <USB_Host_SendControlRequest+0xec>
     f4e:	01 15       	cp	r16, r1
     f50:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     f52:	91 f7       	brne	.-28     	; 0xf38 <USB_Host_SendControlRequest+0xd0>
     f54:	80 91 a9 00 	lds	r24, 0x00A9
     f58:	80 64       	ori	r24, 0x40	; 64
     f5a:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f5e:	80 91 a6 00 	lds	r24, 0x00A6
     f62:	8e 77       	andi	r24, 0x7E	; 126
     f64:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     f68:	01 15       	cp	r16, r1
     f6a:	11 05       	cpc	r17, r1
     f6c:	91 f6       	brne	.-92     	; 0xf12 <USB_Host_SendControlRequest+0xaa>
     f6e:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     f72:	8f 7c       	andi	r24, 0xCF	; 207
     f74:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f76:	80 93 aa 00 	sts	0x00AA, r24
     f7a:	80 91 a9 00 	lds	r24, 0x00A9
     f7e:	8f 7b       	andi	r24, 0xBF	; 191
     f80:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f84:	82 e0       	ldi	r24, 0x02	; 2
     f86:	48 df       	rcall	.-368    	; 0xe18 <USB_Host_WaitForIOS>
     f88:	88 23       	and	r24, r24
     f8a:	09 f0       	breq	.+2      	; 0xf8e <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f8c:	52 c0       	rjmp	.+164    	; 0x1032 <USB_Host_SendControlRequest+0x1ca>
     f8e:	80 91 a6 00 	lds	r24, 0x00A6
     f92:	8b 77       	andi	r24, 0x7B	; 123
     f94:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     f98:	82 e0       	ldi	r24, 0x02	; 2
     f9a:	3e df       	rcall	.-388    	; 0xe18 <USB_Host_WaitForIOS>
     f9c:	4a c0       	rjmp	.+148    	; 0x1032 <USB_Host_SendControlRequest+0x1ca>
     f9e:	20 97       	sbiw	r28, 0x00	; 0
     fa0:	a1 f1       	breq	.+104    	; 0x100a <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fa2:	80 91 aa 00 	lds	r24, 0x00AA
     fa6:	8f 7c       	andi	r24, 0xCF	; 207
     fa8:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
     faa:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fae:	80 91 a9 00 	lds	r24, 0x00A9
     fb2:	8f 7b       	andi	r24, 0xBF	; 191
     fb4:	80 93 a9 00 	sts	0x00A9, r24
     fb8:	1c c0       	rjmp	.+56     	; 0xff2 <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fba:	2e df       	rcall	.-420    	; 0xe18 <USB_Host_WaitForIOS>
     fbc:	88 23       	and	r24, r24
     fbe:	c9 f5       	brne	.+114    	; 0x1032 <USB_Host_SendControlRequest+0x1ca>
     fc0:	fe 01       	movw	r30, r28
     fc2:	07 c0       	rjmp	.+14     	; 0xfd2 <USB_Host_SendControlRequest+0x16a>
     fc4:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fc6:	ef 01       	movw	r28, r30
     fc8:	80 93 af 00 	sts	0x00AF, r24
     fcc:	01 50       	subi	r16, 0x01	; 1
     fce:	10 40       	sbci	r17, 0x00	; 0
     fd0:	59 f0       	breq	.+22     	; 0xfe8 <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
     fd2:	ef 01       	movw	r28, r30
     fd4:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     fd8:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
     fdc:	80 91 2f 01 	lds	r24, 0x012F
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
     fe0:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     fe2:	28 17       	cp	r18, r24
     fe4:	39 07       	cpc	r19, r25
     fe6:	70 f3       	brcs	.-36     	; 0xfc4 <USB_Host_SendControlRequest+0x15c>
     fe8:	80 91 a6 00 	lds	r24, 0x00A6
     fec:	8b 77       	andi	r24, 0x7B	; 123
     fee:	80 93 a6 00 	sts	0x00A6, r24
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     ff6:	11 05       	cpc	r17, r1
     ff8:	01 f7       	brne	.-64     	; 0xfba <USB_Host_SendControlRequest+0x152>
     ffa:	0e df       	rcall	.-484    	; 0xe18 <USB_Host_WaitForIOS>
     ffc:	88 23       	and	r24, r24
     ffe:	c9 f4       	brne	.+50     	; 0x1032 <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1000:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1004:	80 64       	ori	r24, 0x40	; 64
    1006:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    100a:	80 91 aa 00 	lds	r24, 0x00AA
    100e:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1010:	80 61       	ori	r24, 0x10	; 16
    1012:	80 93 aa 00 	sts	0x00AA, r24
    1016:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    101a:	8f 7b       	andi	r24, 0xBF	; 191
    101c:	80 93 a9 00 	sts	0x00A9, r24
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	fa de       	rcall	.-524    	; 0xe18 <USB_Host_WaitForIOS>
    1024:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1026:	29 f4       	brne	.+10     	; 0x1032 <USB_Host_SendControlRequest+0x1ca>
    1028:	90 91 a6 00 	lds	r25, 0x00A6
    102c:	9e 77       	andi	r25, 0x7E	; 126
    102e:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1032:	90 91 a9 00 	lds	r25, 0x00A9
    1036:	90 64       	ori	r25, 0x40	; 64
    1038:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    103c:	e1 14       	cp	r14, r1
    103e:	f1 04       	cpc	r15, r1
    1040:	29 f4       	brne	.+10     	; 0x104c <USB_Host_SendControlRequest+0x1e4>
    1042:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1046:	9e 7f       	andi	r25, 0xFE	; 254
    1048:	90 93 9e 00 	sts	0x009E, r25
    104c:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    104e:	90 93 a8 00 	sts	0x00A8, r25
    1052:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    105e:	ff 90       	pop	r15
    1060:	ef 90       	pop	r14
    1062:	08 95       	ret

00001064 <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    1064:	cf 93       	push	r28
    1066:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1068:	10 92 4f 01 	sts	0x014F, r1
    106c:	89 e0       	ldi	r24, 0x09	; 9
    106e:	80 93 50 01 	sts	0x0150, r24
    1072:	c0 93 51 01 	sts	0x0151, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1076:	10 92 52 01 	sts	0x0152, r1
    107a:	10 92 54 01 	sts	0x0154, r1
    107e:	10 92 53 01 	sts	0x0153, r1
    1082:	10 92 56 01 	sts	0x0156, r1
    1086:	10 92 55 01 	sts	0x0155, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    108a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	ea de       	rcall	.-556    	; 0xe68 <USB_Host_SendControlRequest>
    1094:	88 23       	and	r24, r24
    1096:	49 f4       	brne	.+18     	; 0x10aa <USB_Host_SetDeviceConfiguration+0x46>
    1098:	c0 93 4d 01 	sts	0x014D, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    109c:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    109e:	11 f0       	breq	.+4      	; 0x10a4 <USB_Host_SetDeviceConfiguration+0x40>
    10a0:	9b e0       	ldi	r25, 0x0B	; 11
    10a2:	01 c0       	rjmp	.+2      	; 0x10a6 <USB_Host_SetDeviceConfiguration+0x42>
    10a4:	9a e0       	ldi	r25, 0x0A	; 10
    10a6:	90 93 57 01 	sts	0x0157, r25
    10aa:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    10ac:	08 95       	ret

000010ae <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    10ae:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    10b0:	c0 91 a7 00 	lds	r28, 0x00A7
    10b4:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    10b6:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    10ba:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    10be:	8d da       	rcall	.-2790   	; 0x5da <USB_Host_ProcessNextHostState>
    10c0:	c0 93 a7 00 	sts	0x00A7, r28
    10c4:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    10c6:	08 95       	ret

000010c8 <DCOMP_CDC_Host_NextCDCControlInterface>:

	return CDC_ENUMERROR_NoError;
}

static uint8_t DCOMP_CDC_Host_NextCDCControlInterface(void* const CurrentDescriptor)
{
    10c8:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    10ca:	81 81       	ldd	r24, Z+1	; 0x01
    10cc:	84 30       	cpi	r24, 0x04	; 4
    10ce:	49 f4       	brne	.+18     	; 0x10e2 <DCOMP_CDC_Host_NextCDCControlInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
    10d0:	85 81       	ldd	r24, Z+5	; 0x05
    10d2:	82 30       	cpi	r24, 0x02	; 2
    10d4:	31 f4       	brne	.+12     	; 0x10e2 <DCOMP_CDC_Host_NextCDCControlInterface+0x1a>
    10d6:	86 81       	ldd	r24, Z+6	; 0x06
    10d8:	82 30       	cpi	r24, 0x02	; 2
    10da:	19 f4       	brne	.+6      	; 0x10e2 <DCOMP_CDC_Host_NextCDCControlInterface+0x1a>
		    (Interface->SubClass == CDC_CSCP_ACMSubclass) &&
    10dc:	87 81       	ldd	r24, Z+7	; 0x07
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	11 f0       	breq	.+4      	; 0x10e6 <DCOMP_CDC_Host_NextCDCControlInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    10e2:	82 e0       	ldi	r24, 0x02	; 2
    10e4:	08 95       	ret

		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
		    (Interface->SubClass == CDC_CSCP_ACMSubclass) &&
		    (Interface->Protocol == CDC_CSCP_ATCommandProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    10e6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    10e8:	08 95       	ret

000010ea <DCOMP_CDC_Host_NextCDCDataInterface>:

static uint8_t DCOMP_CDC_Host_NextCDCDataInterface(void* const CurrentDescriptor)
{
    10ea:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    10ec:	81 81       	ldd	r24, Z+1	; 0x01
    10ee:	84 30       	cpi	r24, 0x04	; 4
    10f0:	49 f4       	brne	.+18     	; 0x1104 <DCOMP_CDC_Host_NextCDCDataInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
    10f2:	85 81       	ldd	r24, Z+5	; 0x05
    10f4:	8a 30       	cpi	r24, 0x0A	; 10
    10f6:	31 f4       	brne	.+12     	; 0x1104 <DCOMP_CDC_Host_NextCDCDataInterface+0x1a>
    10f8:	86 81       	ldd	r24, Z+6	; 0x06
    10fa:	88 23       	and	r24, r24
    10fc:	19 f4       	brne	.+6      	; 0x1104 <DCOMP_CDC_Host_NextCDCDataInterface+0x1a>
		    (Interface->SubClass == CDC_CSCP_NoDataSubclass) &&
    10fe:	87 81       	ldd	r24, Z+7	; 0x07
    1100:	88 23       	and	r24, r24
    1102:	11 f0       	breq	.+4      	; 0x1108 <DCOMP_CDC_Host_NextCDCDataInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1104:	82 e0       	ldi	r24, 0x02	; 2
    1106:	08 95       	ret

		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
		    (Interface->SubClass == CDC_CSCP_NoDataSubclass) &&
		    (Interface->Protocol == CDC_CSCP_NoDataProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    1108:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    110a:	08 95       	ret

0000110c <DCOMP_CDC_Host_NextCDCInterfaceEndpoint>:

static uint8_t DCOMP_CDC_Host_NextCDCInterfaceEndpoint(void* const CurrentDescriptor)
{
    110c:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    110e:	81 81       	ldd	r24, Z+1	; 0x01
    1110:	85 30       	cpi	r24, 0x05	; 5
    1112:	51 f4       	brne	.+20     	; 0x1128 <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x1c>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
    1114:	83 81       	ldd	r24, Z+3	; 0x03
    1116:	83 70       	andi	r24, 0x03	; 3

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    1118:	82 50       	subi	r24, 0x02	; 2
    111a:	82 30       	cpi	r24, 0x02	; 2
    111c:	38 f4       	brcc	.+14     	; 0x112c <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x20>
		    !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    111e:	82 81       	ldd	r24, Z+2	; 0x02
    1120:	76 dc       	rcall	.-1812   	; 0xa0e <Pipe_IsEndpointBound>
    1122:	88 23       	and	r24, r24
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    1124:	19 f4       	brne	.+6      	; 0x112c <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x20>
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x24>
    1128:	84 30       	cpi	r24, 0x04	; 4
		    !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    112a:	21 f0       	breq	.+8      	; 0x1134 <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x28>
    112c:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    112e:	08 95       	ret
    1130:	80 e0       	ldi	r24, 0x00	; 0
		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
		    !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		{
			return DESCRIPTOR_SEARCH_Found;
    1132:	08 95       	ret
    1134:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    1136:	08 95       	ret

00001138 <CDC_Host_ConfigurePipes>:
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1138:	8f 92       	push	r8
#include "CDCClassHost.h"

uint8_t CDC_Host_ConfigurePipes(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    113a:	9f 92       	push	r9
    113c:	af 92       	push	r10
    113e:	bf 92       	push	r11
    1140:	cf 92       	push	r12
    1142:	df 92       	push	r13
    1144:	ef 92       	push	r14
    1146:	ff 92       	push	r15
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	00 d0       	rcall	.+0      	; 0x1152 <CDC_Host_ConfigurePipes+0x1a>
    1152:	00 d0       	rcall	.+0      	; 0x1154 <CDC_Host_ConfigurePipes+0x1c>
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	8c 01       	movw	r16, r24
    115a:	7a 83       	std	Y+2, r23	; 0x02
    115c:	69 83       	std	Y+1, r22	; 0x01
    115e:	5c 83       	std	Y+4, r21	; 0x04
    1160:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint = NULL;
	USB_Descriptor_Interface_t* CDCControlInterface  = NULL;

	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    1162:	42 96       	adiw	r24, 0x12	; 18
    1164:	fc 01       	movw	r30, r24
    1166:	8d e0       	ldi	r24, 0x0D	; 13
    1168:	df 01       	movw	r26, r30
    116a:	1d 92       	st	X+, r1
    116c:	8a 95       	dec	r24
    116e:	e9 f7       	brne	.-6      	; 0x116a <CDC_Host_ConfigurePipes+0x32>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1170:	eb 81       	ldd	r30, Y+3	; 0x03
    1172:	fc 81       	ldd	r31, Y+4	; 0x04
    1174:	81 81       	ldd	r24, Z+1	; 0x01
    1176:	82 30       	cpi	r24, 0x02	; 2
    1178:	09 f0       	breq	.+2      	; 0x117c <CDC_Host_ConfigurePipes+0x44>
    117a:	8e c0       	rjmp	.+284    	; 0x1298 <CDC_Host_ConfigurePipes+0x160>
    117c:	88 24       	eor	r8, r8
    117e:	99 24       	eor	r9, r9
    1180:	aa 24       	eor	r10, r10
    1182:	bb 24       	eor	r11, r11
    1184:	cc 24       	eor	r12, r12
    1186:	dd 24       	eor	r13, r13
    1188:	ee 24       	eor	r14, r14
    118a:	ff 24       	eor	r15, r15
	  return CDC_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(CDCControlInterface) ||
    118c:	81 14       	cp	r8, r1
    118e:	91 04       	cpc	r9, r1
    1190:	51 f0       	breq	.+20     	; 0x11a6 <CDC_Host_ConfigurePipes+0x6e>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1192:	ce 01       	movw	r24, r28
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	be 01       	movw	r22, r28
    1198:	6d 5f       	subi	r22, 0xFD	; 253
    119a:	7f 4f       	sbci	r23, 0xFF	; 255
    119c:	46 e8       	ldi	r20, 0x86	; 134
    119e:	58 e0       	ldi	r21, 0x08	; 8
    11a0:	f3 dd       	rcall	.-1050   	; 0xd88 <USB_GetNextDescriptorComp>
    11a2:	88 23       	and	r24, r24
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return CDC_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(CDCControlInterface) ||
    11a4:	c1 f0       	breq	.+48     	; 0x11d6 <CDC_Host_ConfigurePipes+0x9e>
    11a6:	ce 01       	movw	r24, r28
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_CDC_Host_NextCDCInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (NotificationEndpoint)
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	be 01       	movw	r22, r28
    11ac:	6d 5f       	subi	r22, 0xFD	; 253
    11ae:	7f 4f       	sbci	r23, 0xFF	; 255
    11b0:	a1 14       	cp	r10, r1
	{
		if (!(CDCControlInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_CDC_Host_NextCDCInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (NotificationEndpoint)
    11b2:	b1 04       	cpc	r11, r1
    11b4:	39 f0       	breq	.+14     	; 0x11c4 <CDC_Host_ConfigurePipes+0x8c>
    11b6:	45 e7       	ldi	r20, 0x75	; 117
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    11b8:	58 e0       	ldi	r21, 0x08	; 8
    11ba:	e6 dd       	rcall	.-1076   	; 0xd88 <USB_GetNextDescriptorComp>
    11bc:	88 23       	and	r24, r24
    11be:	09 f0       	breq	.+2      	; 0x11c2 <CDC_Host_ConfigurePipes+0x8a>
    11c0:	6d c0       	rjmp	.+218    	; 0x129c <CDC_Host_ConfigurePipes+0x164>
    11c2:	e0 cf       	rjmp	.-64     	; 0x1184 <CDC_Host_ConfigurePipes+0x4c>
    11c4:	44 e6       	ldi	r20, 0x64	; 100
    11c6:	58 e0       	ldi	r21, 0x08	; 8
				DataINEndpoint  = NULL;
				DataOUTEndpoint = NULL;
			}
			else
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    11c8:	df dd       	rcall	.-1090   	; 0xd88 <USB_GetNextDescriptorComp>
    11ca:	88 23       	and	r24, r24
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <CDC_Host_ConfigurePipes+0x98>
    11ce:	66 c0       	rjmp	.+204    	; 0x129c <CDC_Host_ConfigurePipes+0x164>
    11d0:	8b 80       	ldd	r8, Y+3	; 0x03
    11d2:	9c 80       	ldd	r9, Y+4	; 0x04
    11d4:	0e c0       	rjmp	.+28     	; 0x11f2 <CDC_Host_ConfigurePipes+0xba>
				                              DCOMP_CDC_Host_NextCDCControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return CDC_ENUMERROR_NoCompatibleInterfaceFound;
				}

				CDCControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    11d6:	eb 81       	ldd	r30, Y+3	; 0x03
    11d8:	fc 81       	ldd	r31, Y+4	; 0x04
    11da:	82 81       	ldd	r24, Z+2	; 0x02
			}

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    11dc:	87 ff       	sbrs	r24, 7
    11de:	06 c0       	rjmp	.+12     	; 0x11ec <CDC_Host_ConfigurePipes+0xb4>

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    11e0:	83 81       	ldd	r24, Z+3	; 0x03
    11e2:	83 70       	andi	r24, 0x03	; 3
    11e4:	83 30       	cpi	r24, 0x03	; 3
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
    11e6:	21 f4       	brne	.+8      	; 0x11f0 <CDC_Host_ConfigurePipes+0xb8>
    11e8:	5f 01       	movw	r10, r30
    11ea:	03 c0       	rjmp	.+6      	; 0x11f2 <CDC_Host_ConfigurePipes+0xba>
    11ec:	6f 01       	movw	r12, r30
			  NotificationEndpoint = EndpointData;
    11ee:	01 c0       	rjmp	.+2      	; 0x11f2 <CDC_Host_ConfigurePipes+0xba>
    11f0:	7f 01       	movw	r14, r30
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
    11f2:	e1 14       	cp	r14, r1
    11f4:	f1 04       	cpc	r15, r1
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  NotificationEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
    11f6:	51 f2       	breq	.-108    	; 0x118c <CDC_Host_ConfigurePipes+0x54>
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return CDC_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
    11f8:	c1 14       	cp	r12, r1
    11fa:	d1 04       	cpc	r13, r1
    11fc:	39 f2       	breq	.-114    	; 0x118c <CDC_Host_ConfigurePipes+0x54>
    11fe:	a1 14       	cp	r10, r1
    1200:	b1 04       	cpc	r11, r1
    1202:	21 f2       	breq	.-120    	; 0x118c <CDC_Host_ConfigurePipes+0x54>
    1204:	f7 01       	movw	r30, r14
    1206:	84 81       	ldd	r24, Z+4	; 0x04
    1208:	95 81       	ldd	r25, Z+5	; 0x05
		{
			DataOUTEndpoint = EndpointData;
		}
	}

	CDCInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    120a:	d8 01       	movw	r26, r16
    120c:	12 96       	adiw	r26, 0x02	; 2
    120e:	9c 93       	st	X, r25
    1210:	8e 93       	st	-X, r24
    1212:	11 97       	sbiw	r26, 0x01	; 1
    1214:	82 81       	ldd	r24, Z+2	; 0x02
    1216:	13 96       	adiw	r26, 0x03	; 3
    1218:	8c 93       	st	X, r24
	CDCInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    121a:	13 97       	sbiw	r26, 0x03	; 3
    121c:	22 e0       	ldi	r18, 0x02	; 2
    121e:	14 96       	adiw	r26, 0x04	; 4
    1220:	2c 93       	st	X, r18
	CDCInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
    1222:	14 97       	sbiw	r26, 0x04	; 4
    1224:	f6 01       	movw	r30, r12
    1226:	84 81       	ldd	r24, Z+4	; 0x04
    1228:	95 81       	ldd	r25, Z+5	; 0x05

	CDCInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    122a:	18 96       	adiw	r26, 0x08	; 8
    122c:	9c 93       	st	X, r25
    122e:	8e 93       	st	-X, r24
    1230:	17 97       	sbiw	r26, 0x07	; 7
    1232:	82 81       	ldd	r24, Z+2	; 0x02
    1234:	19 96       	adiw	r26, 0x09	; 9
    1236:	8c 93       	st	X, r24
	CDCInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1238:	19 97       	sbiw	r26, 0x09	; 9
    123a:	1a 96       	adiw	r26, 0x0a	; 10
    123c:	2c 93       	st	X, r18
    123e:	d5 01       	movw	r26, r10
	CDCInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;
    1240:	14 96       	adiw	r26, 0x04	; 4
    1242:	8d 91       	ld	r24, X+

	CDCInterfaceInfo->Config.NotificationPipe.Size = le16_to_cpu(NotificationEndpoint->EndpointSize);
    1244:	9c 91       	ld	r25, X
    1246:	15 97       	sbiw	r26, 0x05	; 5
    1248:	f8 01       	movw	r30, r16
    124a:	96 87       	std	Z+14, r25	; 0x0e
    124c:	85 87       	std	Z+13, r24	; 0x0d
    124e:	12 96       	adiw	r26, 0x02	; 2
    1250:	8c 91       	ld	r24, X
    1252:	87 87       	std	Z+15, r24	; 0x0f
	CDCInterfaceInfo->Config.NotificationPipe.EndpointAddress = NotificationEndpoint->EndpointAddress;
    1254:	83 e0       	ldi	r24, 0x03	; 3
    1256:	80 8b       	std	Z+16, r24	; 0x10
    1258:	c8 01       	movw	r24, r16
	CDCInterfaceInfo->Config.NotificationPipe.Type = EP_TYPE_INTERRUPT;
    125a:	61 e0       	ldi	r22, 0x01	; 1
    125c:	a3 db       	rcall	.-2234   	; 0x9a4 <Pipe_ConfigurePipeTable>

	if (!(Pipe_ConfigurePipeTable(&CDCInterfaceInfo->Config.DataINPipe, 1)))
    125e:	88 23       	and	r24, r24
    1260:	f9 f0       	breq	.+62     	; 0x12a0 <CDC_Host_ConfigurePipes+0x168>
    1262:	c8 01       	movw	r24, r16
    1264:	06 96       	adiw	r24, 0x06	; 6
    1266:	61 e0       	ldi	r22, 0x01	; 1
    1268:	9d db       	rcall	.-2246   	; 0x9a4 <Pipe_ConfigurePipeTable>
	  return false;

	if (!(Pipe_ConfigurePipeTable(&CDCInterfaceInfo->Config.DataOUTPipe, 1)))
    126a:	88 23       	and	r24, r24
    126c:	c9 f0       	breq	.+50     	; 0x12a0 <CDC_Host_ConfigurePipes+0x168>
    126e:	c8 01       	movw	r24, r16
    1270:	0c 96       	adiw	r24, 0x0c	; 12
    1272:	61 e0       	ldi	r22, 0x01	; 1
    1274:	97 db       	rcall	.-2258   	; 0x9a4 <Pipe_ConfigurePipeTable>
    1276:	88 23       	and	r24, r24
	  return false;

	if (!(Pipe_ConfigurePipeTable(&CDCInterfaceInfo->Config.NotificationPipe, 1)))
    1278:	99 f0       	breq	.+38     	; 0x12a0 <CDC_Host_ConfigurePipes+0x168>
    127a:	d4 01       	movw	r26, r8
    127c:	12 96       	adiw	r26, 0x02	; 2
    127e:	8c 91       	ld	r24, X
    1280:	12 97       	sbiw	r26, 0x02	; 2
    1282:	f8 01       	movw	r30, r16
    1284:	83 8b       	std	Z+19, r24	; 0x13
	  return false;

	CDCInterfaceInfo->State.ControlInterfaceNumber = CDCControlInterface->InterfaceNumber;
    1286:	83 e0       	ldi	r24, 0x03	; 3
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	95 8b       	std	Z+21, r25	; 0x15
    128c:	84 8b       	std	Z+20, r24	; 0x14
    128e:	97 8b       	std	Z+23, r25	; 0x17
    1290:	86 8b       	std	Z+22, r24	; 0x16
	CDCInterfaceInfo->State.ControlLineStates.HostToDevice = (CDC_CONTROL_LINE_OUT_RTS | CDC_CONTROL_LINE_OUT_DTR);
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	82 8b       	std	Z+18, r24	; 0x12
    1296:	04 c0       	rjmp	.+8      	; 0x12a0 <CDC_Host_ConfigurePipes+0x168>
    1298:	81 e0       	ldi	r24, 0x01	; 1
	CDCInterfaceInfo->State.ControlLineStates.DeviceToHost = (CDC_CONTROL_LINE_IN_DCD  | CDC_CONTROL_LINE_IN_DSR);
    129a:	03 c0       	rjmp	.+6      	; 0x12a2 <CDC_Host_ConfigurePipes+0x16a>
    129c:	82 e0       	ldi	r24, 0x02	; 2
	CDCInterfaceInfo->State.IsActive = true;
    129e:	01 c0       	rjmp	.+2      	; 0x12a2 <CDC_Host_ConfigurePipes+0x16a>
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	0f 90       	pop	r0
	USB_Descriptor_Interface_t* CDCControlInterface  = NULL;

	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return CDC_ENUMERROR_InvalidConfigDescriptor;
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
			else
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
				                              DCOMP_CDC_Host_NextCDCControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return CDC_ENUMERROR_NoCompatibleInterfaceFound;
    12a8:	0f 90       	pop	r0
    12aa:	df 91       	pop	r29

	if (!(Pipe_ConfigurePipeTable(&CDCInterfaceInfo->Config.DataOUTPipe, 1)))
	  return false;

	if (!(Pipe_ConfigurePipeTable(&CDCInterfaceInfo->Config.NotificationPipe, 1)))
	  return false;
    12ac:	cf 91       	pop	r28
	CDCInterfaceInfo->State.ControlLineStates.HostToDevice = (CDC_CONTROL_LINE_OUT_RTS | CDC_CONTROL_LINE_OUT_DTR);
	CDCInterfaceInfo->State.ControlLineStates.DeviceToHost = (CDC_CONTROL_LINE_IN_DCD  | CDC_CONTROL_LINE_IN_DSR);
	CDCInterfaceInfo->State.IsActive = true;

	return CDC_ENUMERROR_NoError;
}
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	ff 90       	pop	r15
    12b4:	ef 90       	pop	r14
    12b6:	df 90       	pop	r13
    12b8:	cf 90       	pop	r12
    12ba:	bf 90       	pop	r11
    12bc:	af 90       	pop	r10
    12be:	9f 90       	pop	r9
    12c0:	8f 90       	pop	r8
    12c2:	08 95       	ret

000012c4 <CDC_Host_SetLineEncoding>:
    12c4:	fc 01       	movw	r30, r24
    12c6:	23 89       	ldd	r18, Z+19	; 0x13
    12c8:	31 e2       	ldi	r19, 0x21	; 33
    12ca:	30 93 4f 01 	sts	0x014F, r19
    12ce:	30 e2       	ldi	r19, 0x20	; 32
	#endif
}

uint8_t CDC_Host_SetLineEncoding(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
	USB_ControlRequest = (USB_Request_Header_t)
    12d0:	30 93 50 01 	sts	0x0150, r19
    12d4:	10 92 52 01 	sts	0x0152, r1
    12d8:	10 92 51 01 	sts	0x0151, r1
    12dc:	20 93 53 01 	sts	0x0153, r18
    12e0:	10 92 54 01 	sts	0x0154, r1
    12e4:	27 e0       	ldi	r18, 0x07	; 7
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	30 93 56 01 	sts	0x0156, r19
    12ec:	20 93 55 01 	sts	0x0155, r18
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    12f0:	10 92 a7 00 	sts	0x00A7, r1
		.wLength       = sizeof(CDCInterfaceInfo->State.LineEncoding),
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(&CDCInterfaceInfo->State.LineEncoding);
    12f4:	48 96       	adiw	r24, 0x18	; 24
    12f6:	b8 cd       	rjmp	.-1168   	; 0xe68 <USB_Host_SendControlRequest>

000012f8 <CDC_Host_BytesReceived>:
    12f8:	fc 01       	movw	r30, r24
}
    12fa:	80 91 57 01 	lds	r24, 0x0157
	return PIPE_READYWAIT_NoError;
}

uint16_t CDC_Host_BytesReceived(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
    12fe:	8b 30       	cpi	r24, 0x0B	; 11
    1300:	59 f5       	brne	.+86     	; 0x1358 <CDC_Host_BytesReceived+0x60>
    1302:	82 89       	ldd	r24, Z+18	; 0x12
    1304:	88 23       	and	r24, r24
    1306:	59 f1       	breq	.+86     	; 0x135e <CDC_Host_BytesReceived+0x66>
    1308:	80 81       	ld	r24, Z
    130a:	8f 70       	andi	r24, 0x0F	; 15
    130c:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1310:	80 91 a9 00 	lds	r24, 0x00A9
    1314:	8f 7b       	andi	r24, 0xBF	; 191
    1316:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    131a:	80 91 a6 00 	lds	r24, 0x00A6
	  return 0;

	Pipe_SelectPipe(CDCInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    131e:	80 ff       	sbrs	r24, 0
    1320:	16 c0       	rjmp	.+44     	; 0x134e <CDC_Host_BytesReceived+0x56>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1322:	80 91 f6 00 	lds	r24, 0x00F6
    1326:	90 91 f7 00 	lds	r25, 0x00F7
	{
		if (!(Pipe_BytesInPipe()))
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	31 f4       	brne	.+12     	; 0x133a <CDC_Host_BytesReceived+0x42>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    132e:	80 91 a6 00 	lds	r24, 0x00A6
    1332:	8e 77       	andi	r24, 0x7E	; 126
    1334:	80 93 a6 00 	sts	0x00A6, r24
    1338:	0a c0       	rjmp	.+20     	; 0x134e <CDC_Host_BytesReceived+0x56>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    133a:	80 91 a9 00 	lds	r24, 0x00A9
    133e:	80 64       	ori	r24, 0x40	; 64
    1340:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1344:	80 91 f6 00 	lds	r24, 0x00F6
    1348:	90 91 f7 00 	lds	r25, 0x00F7
			return 0;
		}
		else
		{
			Pipe_Freeze();
			return Pipe_BytesInPipe();
    134c:	08 95       	ret

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    134e:	80 91 a9 00 	lds	r24, 0x00A9
    1352:	80 64       	ori	r24, 0x40	; 64
    1354:	80 93 a9 00 	sts	0x00A9, r24
}

uint16_t CDC_Host_BytesReceived(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
	  return 0;
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	08 95       	ret
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
	{
		Pipe_Freeze();

		return 0;
	}
}
    1362:	08 95       	ret

00001364 <CDC_Host_ReceiveByte>:

int16_t CDC_Host_ReceiveByte(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
    1364:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
    1366:	80 91 57 01 	lds	r24, 0x0157
    136a:	8b 30       	cpi	r24, 0x0B	; 11
    136c:	89 f5       	brne	.+98     	; 0x13d0 <CDC_Host_ReceiveByte+0x6c>
    136e:	82 89       	ldd	r24, Z+18	; 0x12
    1370:	88 23       	and	r24, r24
    1372:	89 f1       	breq	.+98     	; 0x13d6 <CDC_Host_ReceiveByte+0x72>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1374:	80 81       	ld	r24, Z
    1376:	8f 70       	andi	r24, 0x0F	; 15
    1378:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    137c:	80 91 a9 00 	lds	r24, 0x00A9
    1380:	8f 7b       	andi	r24, 0xBF	; 191
    1382:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1386:	80 91 a6 00 	lds	r24, 0x00A6
	int16_t ReceivedByte = -1;

	Pipe_SelectPipe(CDCInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    138a:	80 ff       	sbrs	r24, 0
    138c:	19 c0       	rjmp	.+50     	; 0x13c0 <CDC_Host_ReceiveByte+0x5c>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    138e:	80 91 f6 00 	lds	r24, 0x00F6
    1392:	90 91 f7 00 	lds	r25, 0x00F7
	{
		if (Pipe_BytesInPipe())
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	21 f0       	breq	.+8      	; 0x13a2 <CDC_Host_ReceiveByte+0x3e>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    139a:	80 91 af 00 	lds	r24, 0x00AF
		  ReceivedByte = Pipe_Read_8();
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <CDC_Host_ReceiveByte+0x42>
int16_t CDC_Host_ReceiveByte(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
	  return -1;

	int16_t ReceivedByte = -1;
    13a2:	8f ef       	ldi	r24, 0xFF	; 255
    13a4:	9f ef       	ldi	r25, 0xFF	; 255
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13a6:	20 91 f6 00 	lds	r18, 0x00F6
    13aa:	30 91 f7 00 	lds	r19, 0x00F7
	if (Pipe_IsINReceived())
	{
		if (Pipe_BytesInPipe())
		  ReceivedByte = Pipe_Read_8();

		if (!(Pipe_BytesInPipe()))
    13ae:	21 15       	cp	r18, r1
    13b0:	31 05       	cpc	r19, r1
    13b2:	41 f4       	brne	.+16     	; 0x13c4 <CDC_Host_ReceiveByte+0x60>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    13b4:	20 91 a6 00 	lds	r18, 0x00A6
    13b8:	2e 77       	andi	r18, 0x7E	; 126
    13ba:	20 93 a6 00 	sts	0x00A6, r18
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <CDC_Host_ReceiveByte+0x60>
int16_t CDC_Host_ReceiveByte(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
	  return -1;

	int16_t ReceivedByte = -1;
    13c0:	8f ef       	ldi	r24, 0xFF	; 255
    13c2:	9f ef       	ldi	r25, 0xFF	; 255

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13c4:	20 91 a9 00 	lds	r18, 0x00A9
    13c8:	20 64       	ori	r18, 0x40	; 64
    13ca:	20 93 a9 00 	sts	0x00A9, r18
		  Pipe_ClearIN();
	}

	Pipe_Freeze();

	return ReceivedByte;
    13ce:	08 95       	ret
}

int16_t CDC_Host_ReceiveByte(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
	  return -1;
    13d0:	8f ef       	ldi	r24, 0xFF	; 255
    13d2:	9f ef       	ldi	r25, 0xFF	; 255
    13d4:	08 95       	ret
    13d6:	8f ef       	ldi	r24, 0xFF	; 255
    13d8:	9f ef       	ldi	r25, 0xFF	; 255
	}

	Pipe_Freeze();

	return ReceivedByte;
}
    13da:	08 95       	ret

000013dc <CDC_Host_Flush>:

uint8_t CDC_Host_Flush(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
    13dc:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
    13de:	80 91 57 01 	lds	r24, 0x0157
    13e2:	8b 30       	cpi	r24, 0x0B	; 11
    13e4:	51 f5       	brne	.+84     	; 0x143a <CDC_Host_Flush+0x5e>
    13e6:	82 89       	ldd	r24, Z+18	; 0x12
    13e8:	88 23       	and	r24, r24
    13ea:	39 f1       	breq	.+78     	; 0x143a <CDC_Host_Flush+0x5e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13ec:	86 81       	ldd	r24, Z+6	; 0x06
    13ee:	8f 70       	andi	r24, 0x0F	; 15
    13f0:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13f4:	80 91 a9 00 	lds	r24, 0x00A9
    13f8:	8f 7b       	andi	r24, 0xBF	; 191
    13fa:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13fe:	80 91 f6 00 	lds	r24, 0x00F6
    1402:	90 91 f7 00 	lds	r25, 0x00F7
	uint8_t ErrorCode;

	Pipe_SelectPipe(CDCInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if (!(Pipe_BytesInPipe()))
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	d1 f0       	breq	.+52     	; 0x143e <CDC_Host_Flush+0x62>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    140a:	90 91 a6 00 	lds	r25, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    140e:	80 91 a6 00 	lds	r24, 0x00A6
    1412:	8b 77       	andi	r24, 0x7B	; 123
    1414:	80 93 a6 00 	sts	0x00A6, r24

	bool BankFull = !(Pipe_IsReadWriteAllowed());

	Pipe_ClearOUT();

	if (BankFull)
    1418:	95 fd       	sbrc	r25, 5
    141a:	08 c0       	rjmp	.+16     	; 0x142c <CDC_Host_Flush+0x50>
	{
		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
    141c:	1a db       	rcall	.-2508   	; 0xa52 <Pipe_WaitUntilReady>
    141e:	88 23       	and	r24, r24
    1420:	79 f4       	brne	.+30     	; 0x1440 <CDC_Host_Flush+0x64>
    1422:	80 91 a6 00 	lds	r24, 0x00A6
    1426:	8b 77       	andi	r24, 0x7B	; 123
    1428:	80 93 a6 00 	sts	0x00A6, r24
    142c:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1430:	80 64       	ori	r24, 0x40	; 64
    1432:	80 93 a9 00 	sts	0x00A9, r24
    1436:	80 e0       	ldi	r24, 0x00	; 0
		Pipe_ClearOUT();
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
    1438:	08 95       	ret
    143a:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Host_Flush(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    143c:	08 95       	ret
    143e:	80 e0       	ldi	r24, 0x00	; 0

	Pipe_SelectPipe(CDCInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if (!(Pipe_BytesInPipe()))
	  return PIPE_READYWAIT_NoError;
    1440:	08 95       	ret

00001442 <CDC_Host_USBTask>:
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
}
    1442:	0f 93       	push	r16

	return DESCRIPTOR_SEARCH_NotFound;
}

void CDC_Host_USBTask(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
    1444:	1f 93       	push	r17
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	28 97       	sbiw	r28, 0x08	; 8
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
    145c:	80 91 57 01 	lds	r24, 0x0157
    1460:	8b 30       	cpi	r24, 0x0B	; 11
    1462:	c9 f5       	brne	.+114    	; 0x14d6 <CDC_Host_USBTask+0x94>
    1464:	f8 01       	movw	r30, r16
    1466:	82 89       	ldd	r24, Z+18	; 0x12
    1468:	88 23       	and	r24, r24
    146a:	a9 f1       	breq	.+106    	; 0x14d6 <CDC_Host_USBTask+0x94>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    146c:	84 85       	ldd	r24, Z+12	; 0x0c
    146e:	8f 70       	andi	r24, 0x0F	; 15
    1470:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1474:	80 91 a9 00 	lds	r24, 0x00A9
    1478:	8f 7b       	andi	r24, 0xBF	; 191
    147a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    147e:	80 91 a6 00 	lds	r24, 0x00A6
	  return;

	Pipe_SelectPipe(CDCInterfaceInfo->Config.NotificationPipe.Address);
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    1482:	80 ff       	sbrs	r24, 0
    1484:	21 c0       	rjmp	.+66     	; 0x14c8 <CDC_Host_USBTask+0x86>
	{
		USB_Request_Header_t Notification;
		Pipe_Read_Stream_LE(&Notification, sizeof(USB_Request_Header_t), NULL);
    1486:	ce 01       	movw	r24, r28
    1488:	01 96       	adiw	r24, 0x01	; 1
    148a:	68 e0       	ldi	r22, 0x08	; 8
    148c:	70 e0       	ldi	r23, 0x00	; 0
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	cc d9       	rcall	.-3176   	; 0x82c <Pipe_Read_Stream_LE>
    1494:	8a 81       	ldd	r24, Y+2	; 0x02

		if ((Notification.bRequest      == CDC_NOTIF_SerialState) &&
    1496:	80 32       	cpi	r24, 0x20	; 32
    1498:	91 f4       	brne	.+36     	; 0x14be <CDC_Host_USBTask+0x7c>
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	81 3a       	cpi	r24, 0xA1	; 161
    149e:	79 f4       	brne	.+30     	; 0x14be <CDC_Host_USBTask+0x7c>
    14a0:	c8 01       	movw	r24, r16
		    (Notification.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)))
		{
			Pipe_Read_Stream_LE(&CDCInterfaceInfo->State.ControlLineStates.DeviceToHost,
    14a2:	46 96       	adiw	r24, 0x16	; 22
    14a4:	62 e0       	ldi	r22, 0x02	; 2
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	bf d9       	rcall	.-3202   	; 0x82c <Pipe_Read_Stream_LE>
    14ae:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    14b2:	8e 77       	andi	r24, 0x7E	; 126
    14b4:	80 93 a6 00 	sts	0x00A6, r24
    14b8:	c8 01       	movw	r24, r16
    14ba:	18 d0       	rcall	.+48     	; 0x14ec <CDC_Host_Event_Stub>
			                    sizeof(CDCInterfaceInfo->State.ControlLineStates.DeviceToHost),
			                    NULL);

			Pipe_ClearIN();

			EVENT_CDC_Host_ControLineStateChanged(CDCInterfaceInfo);
    14bc:	05 c0       	rjmp	.+10     	; 0x14c8 <CDC_Host_USBTask+0x86>
    14be:	80 91 a6 00 	lds	r24, 0x00A6
    14c2:	8e 77       	andi	r24, 0x7E	; 126
    14c4:	80 93 a6 00 	sts	0x00A6, r24
    14c8:	80 91 a9 00 	lds	r24, 0x00A9
    14cc:	80 64       	ori	r24, 0x40	; 64

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    14ce:	80 93 a9 00 	sts	0x00A9, r24
    14d2:	c8 01       	movw	r24, r16
    14d4:	83 df       	rcall	.-250    	; 0x13dc <CDC_Host_Flush>
    14d6:	28 96       	adiw	r28, 0x08	; 8
	}

	Pipe_Freeze();

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Host_Flush(CDCInterfaceInfo);
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
	#endif
}
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	08 95       	ret

000014ec <CDC_Host_Event_Stub>:
    14ec:	08 95       	ret

000014ee <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    14ee:	90 91 c8 00 	lds	r25, 0x00C8
    14f2:	95 ff       	sbrs	r25, 5
    14f4:	fc cf       	rjmp	.-8      	; 0x14ee <Serial_putchar>
				UDR1 = DataByte;
    14f6:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	08 95       	ret

00001500 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1500:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1504:	87 ff       	sbrs	r24, 7
    1506:	08 c0       	rjmp	.+16     	; 0x1518 <Serial_getchar+0x18>
    1508:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    150c:	87 ff       	sbrs	r24, 7
    150e:	07 c0       	rjmp	.+14     	; 0x151e <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1510:	80 91 ce 00 	lds	r24, 0x00CE
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	08 95       	ret
	  return _FDEV_EOF;
    1518:	8e ef       	ldi	r24, 0xFE	; 254
    151a:	9f ef       	ldi	r25, 0xFF	; 255
    151c:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    151e:	8f ef       	ldi	r24, 0xFF	; 255
    1520:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1522:	08 95       	ret

00001524 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1524:	fc 01       	movw	r30, r24
	if (!(Stream))
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	51 f4       	brne	.+20     	; 0x153e <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    152a:	e8 e5       	ldi	r30, 0x58	; 88
    152c:	f1 e0       	ldi	r31, 0x01	; 1
    152e:	f0 93 67 01 	sts	0x0167, r31
    1532:	e0 93 66 01 	sts	0x0166, r30
		stdout = Stream;
    1536:	f0 93 69 01 	sts	0x0169, r31
    153a:	e0 93 68 01 	sts	0x0168, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    153e:	8e e0       	ldi	r24, 0x0E	; 14
    1540:	df 01       	movw	r26, r30
    1542:	1d 92       	st	X+, r1
    1544:	8a 95       	dec	r24
    1546:	e9 f7       	brne	.-6      	; 0x1542 <Serial_CreateStream+0x1e>
    1548:	83 e0       	ldi	r24, 0x03	; 3
    154a:	83 83       	std	Z+3, r24	; 0x03
    154c:	87 e7       	ldi	r24, 0x77	; 119
    154e:	9a e0       	ldi	r25, 0x0A	; 10
    1550:	91 87       	std	Z+9, r25	; 0x09
    1552:	80 87       	std	Z+8, r24	; 0x08
    1554:	80 e8       	ldi	r24, 0x80	; 128
    1556:	9a e0       	ldi	r25, 0x0A	; 10
    1558:	93 87       	std	Z+11, r25	; 0x0b
    155a:	82 87       	std	Z+10, r24	; 0x0a
}
    155c:	08 95       	ret

0000155e <fputc>:
    155e:	0f 93       	push	r16
    1560:	1f 93       	push	r17
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	8c 01       	movw	r16, r24
    1568:	eb 01       	movw	r28, r22
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	81 ff       	sbrs	r24, 1
    156e:	1b c0       	rjmp	.+54     	; 0x15a6 <fputc+0x48>
    1570:	82 ff       	sbrs	r24, 2
    1572:	0d c0       	rjmp	.+26     	; 0x158e <fputc+0x30>
    1574:	2e 81       	ldd	r18, Y+6	; 0x06
    1576:	3f 81       	ldd	r19, Y+7	; 0x07
    1578:	8c 81       	ldd	r24, Y+4	; 0x04
    157a:	9d 81       	ldd	r25, Y+5	; 0x05
    157c:	28 17       	cp	r18, r24
    157e:	39 07       	cpc	r19, r25
    1580:	64 f4       	brge	.+24     	; 0x159a <fputc+0x3c>
    1582:	e8 81       	ld	r30, Y
    1584:	f9 81       	ldd	r31, Y+1	; 0x01
    1586:	01 93       	st	Z+, r16
    1588:	f9 83       	std	Y+1, r31	; 0x01
    158a:	e8 83       	st	Y, r30
    158c:	06 c0       	rjmp	.+12     	; 0x159a <fputc+0x3c>
    158e:	e8 85       	ldd	r30, Y+8	; 0x08
    1590:	f9 85       	ldd	r31, Y+9	; 0x09
    1592:	80 2f       	mov	r24, r16
    1594:	09 95       	icall
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	31 f4       	brne	.+12     	; 0x15a6 <fputc+0x48>
    159a:	8e 81       	ldd	r24, Y+6	; 0x06
    159c:	9f 81       	ldd	r25, Y+7	; 0x07
    159e:	01 96       	adiw	r24, 0x01	; 1
    15a0:	9f 83       	std	Y+7, r25	; 0x07
    15a2:	8e 83       	std	Y+6, r24	; 0x06
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <fputc+0x4c>
    15a6:	0f ef       	ldi	r16, 0xFF	; 255
    15a8:	1f ef       	ldi	r17, 0xFF	; 255
    15aa:	c8 01       	movw	r24, r16
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	1f 91       	pop	r17
    15b2:	0f 91       	pop	r16
    15b4:	08 95       	ret

000015b6 <printf_P>:
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	fe 01       	movw	r30, r28
    15c0:	35 96       	adiw	r30, 0x05	; 5
    15c2:	61 91       	ld	r22, Z+
    15c4:	71 91       	ld	r23, Z+
    15c6:	80 91 68 01 	lds	r24, 0x0168
    15ca:	90 91 69 01 	lds	r25, 0x0169
    15ce:	dc 01       	movw	r26, r24
    15d0:	13 96       	adiw	r26, 0x03	; 3
    15d2:	2c 91       	ld	r18, X
    15d4:	13 97       	sbiw	r26, 0x03	; 3
    15d6:	28 60       	ori	r18, 0x08	; 8
    15d8:	13 96       	adiw	r26, 0x03	; 3
    15da:	2c 93       	st	X, r18
    15dc:	af 01       	movw	r20, r30
    15de:	39 d0       	rcall	.+114    	; 0x1652 <vfprintf>
    15e0:	e0 91 68 01 	lds	r30, 0x0168
    15e4:	f0 91 69 01 	lds	r31, 0x0169
    15e8:	23 81       	ldd	r18, Z+3	; 0x03
    15ea:	27 7f       	andi	r18, 0xF7	; 247
    15ec:	23 83       	std	Z+3, r18	; 0x03
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	08 95       	ret

000015f4 <puts_P>:
    15f4:	0f 93       	push	r16
    15f6:	1f 93       	push	r17
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	8c 01       	movw	r16, r24
    15fe:	e0 91 68 01 	lds	r30, 0x0168
    1602:	f0 91 69 01 	lds	r31, 0x0169
    1606:	83 81       	ldd	r24, Z+3	; 0x03
    1608:	81 ff       	sbrs	r24, 1
    160a:	1b c0       	rjmp	.+54     	; 0x1642 <puts_P+0x4e>
    160c:	c0 e0       	ldi	r28, 0x00	; 0
    160e:	d0 e0       	ldi	r29, 0x00	; 0
    1610:	07 c0       	rjmp	.+14     	; 0x1620 <puts_P+0x2c>
    1612:	09 95       	icall
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	11 f0       	breq	.+4      	; 0x161c <puts_P+0x28>
    1618:	cf ef       	ldi	r28, 0xFF	; 255
    161a:	df ef       	ldi	r29, 0xFF	; 255
    161c:	0f 5f       	subi	r16, 0xFF	; 255
    161e:	1f 4f       	sbci	r17, 0xFF	; 255
    1620:	f8 01       	movw	r30, r16
    1622:	84 91       	lpm	r24, Z
    1624:	60 91 68 01 	lds	r22, 0x0168
    1628:	70 91 69 01 	lds	r23, 0x0169
    162c:	db 01       	movw	r26, r22
    162e:	18 96       	adiw	r26, 0x08	; 8
    1630:	ed 91       	ld	r30, X+
    1632:	fc 91       	ld	r31, X
    1634:	19 97       	sbiw	r26, 0x09	; 9
    1636:	88 23       	and	r24, r24
    1638:	61 f7       	brne	.-40     	; 0x1612 <puts_P+0x1e>
    163a:	8a e0       	ldi	r24, 0x0A	; 10
    163c:	09 95       	icall
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	11 f0       	breq	.+4      	; 0x1646 <puts_P+0x52>
    1642:	cf ef       	ldi	r28, 0xFF	; 255
    1644:	df ef       	ldi	r29, 0xFF	; 255
    1646:	ce 01       	movw	r24, r28
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	1f 91       	pop	r17
    164e:	0f 91       	pop	r16
    1650:	08 95       	ret

00001652 <vfprintf>:
    1652:	2f 92       	push	r2
    1654:	3f 92       	push	r3
    1656:	4f 92       	push	r4
    1658:	5f 92       	push	r5
    165a:	6f 92       	push	r6
    165c:	7f 92       	push	r7
    165e:	8f 92       	push	r8
    1660:	9f 92       	push	r9
    1662:	af 92       	push	r10
    1664:	bf 92       	push	r11
    1666:	cf 92       	push	r12
    1668:	df 92       	push	r13
    166a:	ef 92       	push	r14
    166c:	ff 92       	push	r15
    166e:	0f 93       	push	r16
    1670:	1f 93       	push	r17
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	2d 97       	sbiw	r28, 0x0d	; 13
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
    1686:	3c 01       	movw	r6, r24
    1688:	7d 87       	std	Y+13, r23	; 0x0d
    168a:	6c 87       	std	Y+12, r22	; 0x0c
    168c:	5a 01       	movw	r10, r20
    168e:	fc 01       	movw	r30, r24
    1690:	17 82       	std	Z+7, r1	; 0x07
    1692:	16 82       	std	Z+6, r1	; 0x06
    1694:	83 81       	ldd	r24, Z+3	; 0x03
    1696:	81 ff       	sbrs	r24, 1
    1698:	bb c1       	rjmp	.+886    	; 0x1a10 <vfprintf+0x3be>
    169a:	2e 01       	movw	r4, r28
    169c:	08 94       	sec
    169e:	41 1c       	adc	r4, r1
    16a0:	51 1c       	adc	r5, r1
    16a2:	f3 01       	movw	r30, r6
    16a4:	93 81       	ldd	r25, Z+3	; 0x03
    16a6:	ec 85       	ldd	r30, Y+12	; 0x0c
    16a8:	fd 85       	ldd	r31, Y+13	; 0x0d
    16aa:	93 fd       	sbrc	r25, 3
    16ac:	85 91       	lpm	r24, Z+
    16ae:	93 ff       	sbrs	r25, 3
    16b0:	81 91       	ld	r24, Z+
    16b2:	fd 87       	std	Y+13, r31	; 0x0d
    16b4:	ec 87       	std	Y+12, r30	; 0x0c
    16b6:	88 23       	and	r24, r24
    16b8:	09 f4       	brne	.+2      	; 0x16bc <vfprintf+0x6a>
    16ba:	a6 c1       	rjmp	.+844    	; 0x1a08 <vfprintf+0x3b6>
    16bc:	85 32       	cpi	r24, 0x25	; 37
    16be:	41 f4       	brne	.+16     	; 0x16d0 <vfprintf+0x7e>
    16c0:	93 fd       	sbrc	r25, 3
    16c2:	85 91       	lpm	r24, Z+
    16c4:	93 ff       	sbrs	r25, 3
    16c6:	81 91       	ld	r24, Z+
    16c8:	fd 87       	std	Y+13, r31	; 0x0d
    16ca:	ec 87       	std	Y+12, r30	; 0x0c
    16cc:	85 32       	cpi	r24, 0x25	; 37
    16ce:	21 f4       	brne	.+8      	; 0x16d8 <vfprintf+0x86>
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	b3 01       	movw	r22, r6
    16d4:	44 df       	rcall	.-376    	; 0x155e <fputc>
    16d6:	e5 cf       	rjmp	.-54     	; 0x16a2 <vfprintf+0x50>
    16d8:	ff 24       	eor	r15, r15
    16da:	ee 24       	eor	r14, r14
    16dc:	10 e0       	ldi	r17, 0x00	; 0
    16de:	10 32       	cpi	r17, 0x20	; 32
    16e0:	b0 f4       	brcc	.+44     	; 0x170e <vfprintf+0xbc>
    16e2:	8b 32       	cpi	r24, 0x2B	; 43
    16e4:	69 f0       	breq	.+26     	; 0x1700 <vfprintf+0xae>
    16e6:	8c 32       	cpi	r24, 0x2C	; 44
    16e8:	28 f4       	brcc	.+10     	; 0x16f4 <vfprintf+0xa2>
    16ea:	80 32       	cpi	r24, 0x20	; 32
    16ec:	51 f0       	breq	.+20     	; 0x1702 <vfprintf+0xb0>
    16ee:	83 32       	cpi	r24, 0x23	; 35
    16f0:	71 f4       	brne	.+28     	; 0x170e <vfprintf+0xbc>
    16f2:	0b c0       	rjmp	.+22     	; 0x170a <vfprintf+0xb8>
    16f4:	8d 32       	cpi	r24, 0x2D	; 45
    16f6:	39 f0       	breq	.+14     	; 0x1706 <vfprintf+0xb4>
    16f8:	80 33       	cpi	r24, 0x30	; 48
    16fa:	49 f4       	brne	.+18     	; 0x170e <vfprintf+0xbc>
    16fc:	11 60       	ori	r17, 0x01	; 1
    16fe:	2c c0       	rjmp	.+88     	; 0x1758 <vfprintf+0x106>
    1700:	12 60       	ori	r17, 0x02	; 2
    1702:	14 60       	ori	r17, 0x04	; 4
    1704:	29 c0       	rjmp	.+82     	; 0x1758 <vfprintf+0x106>
    1706:	18 60       	ori	r17, 0x08	; 8
    1708:	27 c0       	rjmp	.+78     	; 0x1758 <vfprintf+0x106>
    170a:	10 61       	ori	r17, 0x10	; 16
    170c:	25 c0       	rjmp	.+74     	; 0x1758 <vfprintf+0x106>
    170e:	17 fd       	sbrc	r17, 7
    1710:	2e c0       	rjmp	.+92     	; 0x176e <vfprintf+0x11c>
    1712:	28 2f       	mov	r18, r24
    1714:	20 53       	subi	r18, 0x30	; 48
    1716:	2a 30       	cpi	r18, 0x0A	; 10
    1718:	98 f4       	brcc	.+38     	; 0x1740 <vfprintf+0xee>
    171a:	16 ff       	sbrs	r17, 6
    171c:	08 c0       	rjmp	.+16     	; 0x172e <vfprintf+0xdc>
    171e:	8f 2d       	mov	r24, r15
    1720:	88 0f       	add	r24, r24
    1722:	f8 2e       	mov	r15, r24
    1724:	ff 0c       	add	r15, r15
    1726:	ff 0c       	add	r15, r15
    1728:	f8 0e       	add	r15, r24
    172a:	f2 0e       	add	r15, r18
    172c:	15 c0       	rjmp	.+42     	; 0x1758 <vfprintf+0x106>
    172e:	8e 2d       	mov	r24, r14
    1730:	88 0f       	add	r24, r24
    1732:	e8 2e       	mov	r14, r24
    1734:	ee 0c       	add	r14, r14
    1736:	ee 0c       	add	r14, r14
    1738:	e8 0e       	add	r14, r24
    173a:	e2 0e       	add	r14, r18
    173c:	10 62       	ori	r17, 0x20	; 32
    173e:	0c c0       	rjmp	.+24     	; 0x1758 <vfprintf+0x106>
    1740:	8e 32       	cpi	r24, 0x2E	; 46
    1742:	21 f4       	brne	.+8      	; 0x174c <vfprintf+0xfa>
    1744:	16 fd       	sbrc	r17, 6
    1746:	60 c1       	rjmp	.+704    	; 0x1a08 <vfprintf+0x3b6>
    1748:	10 64       	ori	r17, 0x40	; 64
    174a:	06 c0       	rjmp	.+12     	; 0x1758 <vfprintf+0x106>
    174c:	8c 36       	cpi	r24, 0x6C	; 108
    174e:	11 f4       	brne	.+4      	; 0x1754 <vfprintf+0x102>
    1750:	10 68       	ori	r17, 0x80	; 128
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <vfprintf+0x106>
    1754:	88 36       	cpi	r24, 0x68	; 104
    1756:	59 f4       	brne	.+22     	; 0x176e <vfprintf+0x11c>
    1758:	ec 85       	ldd	r30, Y+12	; 0x0c
    175a:	fd 85       	ldd	r31, Y+13	; 0x0d
    175c:	93 fd       	sbrc	r25, 3
    175e:	85 91       	lpm	r24, Z+
    1760:	93 ff       	sbrs	r25, 3
    1762:	81 91       	ld	r24, Z+
    1764:	fd 87       	std	Y+13, r31	; 0x0d
    1766:	ec 87       	std	Y+12, r30	; 0x0c
    1768:	88 23       	and	r24, r24
    176a:	09 f0       	breq	.+2      	; 0x176e <vfprintf+0x11c>
    176c:	b8 cf       	rjmp	.-144    	; 0x16de <vfprintf+0x8c>
    176e:	98 2f       	mov	r25, r24
    1770:	95 54       	subi	r25, 0x45	; 69
    1772:	93 30       	cpi	r25, 0x03	; 3
    1774:	18 f0       	brcs	.+6      	; 0x177c <vfprintf+0x12a>
    1776:	90 52       	subi	r25, 0x20	; 32
    1778:	93 30       	cpi	r25, 0x03	; 3
    177a:	38 f4       	brcc	.+14     	; 0x178a <vfprintf+0x138>
    177c:	24 e0       	ldi	r18, 0x04	; 4
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	a2 0e       	add	r10, r18
    1782:	b3 1e       	adc	r11, r19
    1784:	3f e3       	ldi	r19, 0x3F	; 63
    1786:	39 83       	std	Y+1, r19	; 0x01
    1788:	0f c0       	rjmp	.+30     	; 0x17a8 <vfprintf+0x156>
    178a:	83 36       	cpi	r24, 0x63	; 99
    178c:	31 f0       	breq	.+12     	; 0x179a <vfprintf+0x148>
    178e:	83 37       	cpi	r24, 0x73	; 115
    1790:	81 f0       	breq	.+32     	; 0x17b2 <vfprintf+0x160>
    1792:	83 35       	cpi	r24, 0x53	; 83
    1794:	09 f0       	breq	.+2      	; 0x1798 <vfprintf+0x146>
    1796:	56 c0       	rjmp	.+172    	; 0x1844 <vfprintf+0x1f2>
    1798:	21 c0       	rjmp	.+66     	; 0x17dc <vfprintf+0x18a>
    179a:	f5 01       	movw	r30, r10
    179c:	80 81       	ld	r24, Z
    179e:	89 83       	std	Y+1, r24	; 0x01
    17a0:	22 e0       	ldi	r18, 0x02	; 2
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	a2 0e       	add	r10, r18
    17a6:	b3 1e       	adc	r11, r19
    17a8:	21 e0       	ldi	r18, 0x01	; 1
    17aa:	c2 2e       	mov	r12, r18
    17ac:	d1 2c       	mov	r13, r1
    17ae:	42 01       	movw	r8, r4
    17b0:	13 c0       	rjmp	.+38     	; 0x17d8 <vfprintf+0x186>
    17b2:	92 e0       	ldi	r25, 0x02	; 2
    17b4:	29 2e       	mov	r2, r25
    17b6:	31 2c       	mov	r3, r1
    17b8:	2a 0c       	add	r2, r10
    17ba:	3b 1c       	adc	r3, r11
    17bc:	f5 01       	movw	r30, r10
    17be:	80 80       	ld	r8, Z
    17c0:	91 80       	ldd	r9, Z+1	; 0x01
    17c2:	16 ff       	sbrs	r17, 6
    17c4:	03 c0       	rjmp	.+6      	; 0x17cc <vfprintf+0x17a>
    17c6:	6f 2d       	mov	r22, r15
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <vfprintf+0x17e>
    17cc:	6f ef       	ldi	r22, 0xFF	; 255
    17ce:	7f ef       	ldi	r23, 0xFF	; 255
    17d0:	c4 01       	movw	r24, r8
    17d2:	44 d1       	rcall	.+648    	; 0x1a5c <strnlen>
    17d4:	6c 01       	movw	r12, r24
    17d6:	51 01       	movw	r10, r2
    17d8:	1f 77       	andi	r17, 0x7F	; 127
    17da:	14 c0       	rjmp	.+40     	; 0x1804 <vfprintf+0x1b2>
    17dc:	82 e0       	ldi	r24, 0x02	; 2
    17de:	28 2e       	mov	r2, r24
    17e0:	31 2c       	mov	r3, r1
    17e2:	2a 0c       	add	r2, r10
    17e4:	3b 1c       	adc	r3, r11
    17e6:	f5 01       	movw	r30, r10
    17e8:	80 80       	ld	r8, Z
    17ea:	91 80       	ldd	r9, Z+1	; 0x01
    17ec:	16 ff       	sbrs	r17, 6
    17ee:	03 c0       	rjmp	.+6      	; 0x17f6 <vfprintf+0x1a4>
    17f0:	6f 2d       	mov	r22, r15
    17f2:	70 e0       	ldi	r23, 0x00	; 0
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <vfprintf+0x1a8>
    17f6:	6f ef       	ldi	r22, 0xFF	; 255
    17f8:	7f ef       	ldi	r23, 0xFF	; 255
    17fa:	c4 01       	movw	r24, r8
    17fc:	24 d1       	rcall	.+584    	; 0x1a46 <strnlen_P>
    17fe:	6c 01       	movw	r12, r24
    1800:	10 68       	ori	r17, 0x80	; 128
    1802:	51 01       	movw	r10, r2
    1804:	13 fd       	sbrc	r17, 3
    1806:	1a c0       	rjmp	.+52     	; 0x183c <vfprintf+0x1ea>
    1808:	05 c0       	rjmp	.+10     	; 0x1814 <vfprintf+0x1c2>
    180a:	80 e2       	ldi	r24, 0x20	; 32
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	b3 01       	movw	r22, r6
    1810:	a6 de       	rcall	.-692    	; 0x155e <fputc>
    1812:	ea 94       	dec	r14
    1814:	8e 2d       	mov	r24, r14
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	c8 16       	cp	r12, r24
    181a:	d9 06       	cpc	r13, r25
    181c:	b0 f3       	brcs	.-20     	; 0x180a <vfprintf+0x1b8>
    181e:	0e c0       	rjmp	.+28     	; 0x183c <vfprintf+0x1ea>
    1820:	f4 01       	movw	r30, r8
    1822:	17 fd       	sbrc	r17, 7
    1824:	85 91       	lpm	r24, Z+
    1826:	17 ff       	sbrs	r17, 7
    1828:	81 91       	ld	r24, Z+
    182a:	4f 01       	movw	r8, r30
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	b3 01       	movw	r22, r6
    1830:	96 de       	rcall	.-724    	; 0x155e <fputc>
    1832:	e1 10       	cpse	r14, r1
    1834:	ea 94       	dec	r14
    1836:	08 94       	sec
    1838:	c1 08       	sbc	r12, r1
    183a:	d1 08       	sbc	r13, r1
    183c:	c1 14       	cp	r12, r1
    183e:	d1 04       	cpc	r13, r1
    1840:	79 f7       	brne	.-34     	; 0x1820 <vfprintf+0x1ce>
    1842:	df c0       	rjmp	.+446    	; 0x1a02 <vfprintf+0x3b0>
    1844:	84 36       	cpi	r24, 0x64	; 100
    1846:	11 f0       	breq	.+4      	; 0x184c <vfprintf+0x1fa>
    1848:	89 36       	cpi	r24, 0x69	; 105
    184a:	49 f5       	brne	.+82     	; 0x189e <vfprintf+0x24c>
    184c:	f5 01       	movw	r30, r10
    184e:	17 ff       	sbrs	r17, 7
    1850:	07 c0       	rjmp	.+14     	; 0x1860 <vfprintf+0x20e>
    1852:	80 81       	ld	r24, Z
    1854:	91 81       	ldd	r25, Z+1	; 0x01
    1856:	a2 81       	ldd	r26, Z+2	; 0x02
    1858:	b3 81       	ldd	r27, Z+3	; 0x03
    185a:	24 e0       	ldi	r18, 0x04	; 4
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	08 c0       	rjmp	.+16     	; 0x1870 <vfprintf+0x21e>
    1860:	80 81       	ld	r24, Z
    1862:	91 81       	ldd	r25, Z+1	; 0x01
    1864:	aa 27       	eor	r26, r26
    1866:	97 fd       	sbrc	r25, 7
    1868:	a0 95       	com	r26
    186a:	ba 2f       	mov	r27, r26
    186c:	22 e0       	ldi	r18, 0x02	; 2
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	a2 0e       	add	r10, r18
    1872:	b3 1e       	adc	r11, r19
    1874:	01 2f       	mov	r16, r17
    1876:	0f 76       	andi	r16, 0x6F	; 111
    1878:	b7 ff       	sbrs	r27, 7
    187a:	08 c0       	rjmp	.+16     	; 0x188c <vfprintf+0x23a>
    187c:	b0 95       	com	r27
    187e:	a0 95       	com	r26
    1880:	90 95       	com	r25
    1882:	81 95       	neg	r24
    1884:	9f 4f       	sbci	r25, 0xFF	; 255
    1886:	af 4f       	sbci	r26, 0xFF	; 255
    1888:	bf 4f       	sbci	r27, 0xFF	; 255
    188a:	00 68       	ori	r16, 0x80	; 128
    188c:	bc 01       	movw	r22, r24
    188e:	cd 01       	movw	r24, r26
    1890:	a2 01       	movw	r20, r4
    1892:	2a e0       	ldi	r18, 0x0A	; 10
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	ed d0       	rcall	.+474    	; 0x1a72 <__ultoa_invert>
    1898:	d8 2e       	mov	r13, r24
    189a:	d4 18       	sub	r13, r4
    189c:	3e c0       	rjmp	.+124    	; 0x191a <vfprintf+0x2c8>
    189e:	85 37       	cpi	r24, 0x75	; 117
    18a0:	21 f4       	brne	.+8      	; 0x18aa <vfprintf+0x258>
    18a2:	1f 7e       	andi	r17, 0xEF	; 239
    18a4:	2a e0       	ldi	r18, 0x0A	; 10
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	20 c0       	rjmp	.+64     	; 0x18ea <vfprintf+0x298>
    18aa:	19 7f       	andi	r17, 0xF9	; 249
    18ac:	8f 36       	cpi	r24, 0x6F	; 111
    18ae:	a9 f0       	breq	.+42     	; 0x18da <vfprintf+0x288>
    18b0:	80 37       	cpi	r24, 0x70	; 112
    18b2:	20 f4       	brcc	.+8      	; 0x18bc <vfprintf+0x26a>
    18b4:	88 35       	cpi	r24, 0x58	; 88
    18b6:	09 f0       	breq	.+2      	; 0x18ba <vfprintf+0x268>
    18b8:	a7 c0       	rjmp	.+334    	; 0x1a08 <vfprintf+0x3b6>
    18ba:	0b c0       	rjmp	.+22     	; 0x18d2 <vfprintf+0x280>
    18bc:	80 37       	cpi	r24, 0x70	; 112
    18be:	21 f0       	breq	.+8      	; 0x18c8 <vfprintf+0x276>
    18c0:	88 37       	cpi	r24, 0x78	; 120
    18c2:	09 f0       	breq	.+2      	; 0x18c6 <vfprintf+0x274>
    18c4:	a1 c0       	rjmp	.+322    	; 0x1a08 <vfprintf+0x3b6>
    18c6:	01 c0       	rjmp	.+2      	; 0x18ca <vfprintf+0x278>
    18c8:	10 61       	ori	r17, 0x10	; 16
    18ca:	14 ff       	sbrs	r17, 4
    18cc:	09 c0       	rjmp	.+18     	; 0x18e0 <vfprintf+0x28e>
    18ce:	14 60       	ori	r17, 0x04	; 4
    18d0:	07 c0       	rjmp	.+14     	; 0x18e0 <vfprintf+0x28e>
    18d2:	14 ff       	sbrs	r17, 4
    18d4:	08 c0       	rjmp	.+16     	; 0x18e6 <vfprintf+0x294>
    18d6:	16 60       	ori	r17, 0x06	; 6
    18d8:	06 c0       	rjmp	.+12     	; 0x18e6 <vfprintf+0x294>
    18da:	28 e0       	ldi	r18, 0x08	; 8
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	05 c0       	rjmp	.+10     	; 0x18ea <vfprintf+0x298>
    18e0:	20 e1       	ldi	r18, 0x10	; 16
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <vfprintf+0x298>
    18e6:	20 e1       	ldi	r18, 0x10	; 16
    18e8:	32 e0       	ldi	r19, 0x02	; 2
    18ea:	f5 01       	movw	r30, r10
    18ec:	17 ff       	sbrs	r17, 7
    18ee:	07 c0       	rjmp	.+14     	; 0x18fe <vfprintf+0x2ac>
    18f0:	60 81       	ld	r22, Z
    18f2:	71 81       	ldd	r23, Z+1	; 0x01
    18f4:	82 81       	ldd	r24, Z+2	; 0x02
    18f6:	93 81       	ldd	r25, Z+3	; 0x03
    18f8:	44 e0       	ldi	r20, 0x04	; 4
    18fa:	50 e0       	ldi	r21, 0x00	; 0
    18fc:	06 c0       	rjmp	.+12     	; 0x190a <vfprintf+0x2b8>
    18fe:	60 81       	ld	r22, Z
    1900:	71 81       	ldd	r23, Z+1	; 0x01
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	42 e0       	ldi	r20, 0x02	; 2
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	a4 0e       	add	r10, r20
    190c:	b5 1e       	adc	r11, r21
    190e:	a2 01       	movw	r20, r4
    1910:	b0 d0       	rcall	.+352    	; 0x1a72 <__ultoa_invert>
    1912:	d8 2e       	mov	r13, r24
    1914:	d4 18       	sub	r13, r4
    1916:	01 2f       	mov	r16, r17
    1918:	0f 77       	andi	r16, 0x7F	; 127
    191a:	06 ff       	sbrs	r16, 6
    191c:	09 c0       	rjmp	.+18     	; 0x1930 <vfprintf+0x2de>
    191e:	0e 7f       	andi	r16, 0xFE	; 254
    1920:	df 14       	cp	r13, r15
    1922:	30 f4       	brcc	.+12     	; 0x1930 <vfprintf+0x2de>
    1924:	04 ff       	sbrs	r16, 4
    1926:	06 c0       	rjmp	.+12     	; 0x1934 <vfprintf+0x2e2>
    1928:	02 fd       	sbrc	r16, 2
    192a:	04 c0       	rjmp	.+8      	; 0x1934 <vfprintf+0x2e2>
    192c:	0f 7e       	andi	r16, 0xEF	; 239
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <vfprintf+0x2e2>
    1930:	1d 2d       	mov	r17, r13
    1932:	01 c0       	rjmp	.+2      	; 0x1936 <vfprintf+0x2e4>
    1934:	1f 2d       	mov	r17, r15
    1936:	80 2f       	mov	r24, r16
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	04 ff       	sbrs	r16, 4
    193c:	0c c0       	rjmp	.+24     	; 0x1956 <vfprintf+0x304>
    193e:	fe 01       	movw	r30, r28
    1940:	ed 0d       	add	r30, r13
    1942:	f1 1d       	adc	r31, r1
    1944:	20 81       	ld	r18, Z
    1946:	20 33       	cpi	r18, 0x30	; 48
    1948:	11 f4       	brne	.+4      	; 0x194e <vfprintf+0x2fc>
    194a:	09 7e       	andi	r16, 0xE9	; 233
    194c:	09 c0       	rjmp	.+18     	; 0x1960 <vfprintf+0x30e>
    194e:	02 ff       	sbrs	r16, 2
    1950:	06 c0       	rjmp	.+12     	; 0x195e <vfprintf+0x30c>
    1952:	1e 5f       	subi	r17, 0xFE	; 254
    1954:	05 c0       	rjmp	.+10     	; 0x1960 <vfprintf+0x30e>
    1956:	86 78       	andi	r24, 0x86	; 134
    1958:	90 70       	andi	r25, 0x00	; 0
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	09 f0       	breq	.+2      	; 0x1960 <vfprintf+0x30e>
    195e:	1f 5f       	subi	r17, 0xFF	; 255
    1960:	80 2e       	mov	r8, r16
    1962:	99 24       	eor	r9, r9
    1964:	03 fd       	sbrc	r16, 3
    1966:	11 c0       	rjmp	.+34     	; 0x198a <vfprintf+0x338>
    1968:	00 ff       	sbrs	r16, 0
    196a:	0c c0       	rjmp	.+24     	; 0x1984 <vfprintf+0x332>
    196c:	fd 2c       	mov	r15, r13
    196e:	1e 15       	cp	r17, r14
    1970:	48 f4       	brcc	.+18     	; 0x1984 <vfprintf+0x332>
    1972:	fe 0c       	add	r15, r14
    1974:	f1 1a       	sub	r15, r17
    1976:	1e 2d       	mov	r17, r14
    1978:	05 c0       	rjmp	.+10     	; 0x1984 <vfprintf+0x332>
    197a:	80 e2       	ldi	r24, 0x20	; 32
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	b3 01       	movw	r22, r6
    1980:	ee dd       	rcall	.-1060   	; 0x155e <fputc>
    1982:	1f 5f       	subi	r17, 0xFF	; 255
    1984:	1e 15       	cp	r17, r14
    1986:	c8 f3       	brcs	.-14     	; 0x197a <vfprintf+0x328>
    1988:	04 c0       	rjmp	.+8      	; 0x1992 <vfprintf+0x340>
    198a:	1e 15       	cp	r17, r14
    198c:	10 f4       	brcc	.+4      	; 0x1992 <vfprintf+0x340>
    198e:	e1 1a       	sub	r14, r17
    1990:	01 c0       	rjmp	.+2      	; 0x1994 <vfprintf+0x342>
    1992:	ee 24       	eor	r14, r14
    1994:	84 fe       	sbrs	r8, 4
    1996:	0e c0       	rjmp	.+28     	; 0x19b4 <vfprintf+0x362>
    1998:	80 e3       	ldi	r24, 0x30	; 48
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	b3 01       	movw	r22, r6
    199e:	df dd       	rcall	.-1090   	; 0x155e <fputc>
    19a0:	82 fe       	sbrs	r8, 2
    19a2:	1d c0       	rjmp	.+58     	; 0x19de <vfprintf+0x38c>
    19a4:	81 fe       	sbrs	r8, 1
    19a6:	03 c0       	rjmp	.+6      	; 0x19ae <vfprintf+0x35c>
    19a8:	88 e5       	ldi	r24, 0x58	; 88
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	10 c0       	rjmp	.+32     	; 0x19ce <vfprintf+0x37c>
    19ae:	88 e7       	ldi	r24, 0x78	; 120
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	0d c0       	rjmp	.+26     	; 0x19ce <vfprintf+0x37c>
    19b4:	c4 01       	movw	r24, r8
    19b6:	86 78       	andi	r24, 0x86	; 134
    19b8:	90 70       	andi	r25, 0x00	; 0
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	81 f0       	breq	.+32     	; 0x19de <vfprintf+0x38c>
    19be:	81 fc       	sbrc	r8, 1
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <vfprintf+0x374>
    19c2:	80 e2       	ldi	r24, 0x20	; 32
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <vfprintf+0x376>
    19c6:	8b e2       	ldi	r24, 0x2B	; 43
    19c8:	07 fd       	sbrc	r16, 7
    19ca:	8d e2       	ldi	r24, 0x2D	; 45
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	b3 01       	movw	r22, r6
    19d0:	c6 dd       	rcall	.-1140   	; 0x155e <fputc>
    19d2:	05 c0       	rjmp	.+10     	; 0x19de <vfprintf+0x38c>
    19d4:	80 e3       	ldi	r24, 0x30	; 48
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	b3 01       	movw	r22, r6
    19da:	c1 dd       	rcall	.-1150   	; 0x155e <fputc>
    19dc:	fa 94       	dec	r15
    19de:	df 14       	cp	r13, r15
    19e0:	c8 f3       	brcs	.-14     	; 0x19d4 <vfprintf+0x382>
    19e2:	da 94       	dec	r13
    19e4:	f2 01       	movw	r30, r4
    19e6:	ed 0d       	add	r30, r13
    19e8:	f1 1d       	adc	r31, r1
    19ea:	80 81       	ld	r24, Z
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	b3 01       	movw	r22, r6
    19f0:	b6 dd       	rcall	.-1172   	; 0x155e <fputc>
    19f2:	dd 20       	and	r13, r13
    19f4:	b1 f7       	brne	.-20     	; 0x19e2 <vfprintf+0x390>
    19f6:	05 c0       	rjmp	.+10     	; 0x1a02 <vfprintf+0x3b0>
    19f8:	80 e2       	ldi	r24, 0x20	; 32
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	b3 01       	movw	r22, r6
    19fe:	af dd       	rcall	.-1186   	; 0x155e <fputc>
    1a00:	ea 94       	dec	r14
    1a02:	ee 20       	and	r14, r14
    1a04:	c9 f7       	brne	.-14     	; 0x19f8 <vfprintf+0x3a6>
    1a06:	4d ce       	rjmp	.-870    	; 0x16a2 <vfprintf+0x50>
    1a08:	f3 01       	movw	r30, r6
    1a0a:	86 81       	ldd	r24, Z+6	; 0x06
    1a0c:	97 81       	ldd	r25, Z+7	; 0x07
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <vfprintf+0x3c2>
    1a10:	8f ef       	ldi	r24, 0xFF	; 255
    1a12:	9f ef       	ldi	r25, 0xFF	; 255
    1a14:	2d 96       	adiw	r28, 0x0d	; 13
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	1f 91       	pop	r17
    1a26:	0f 91       	pop	r16
    1a28:	ff 90       	pop	r15
    1a2a:	ef 90       	pop	r14
    1a2c:	df 90       	pop	r13
    1a2e:	cf 90       	pop	r12
    1a30:	bf 90       	pop	r11
    1a32:	af 90       	pop	r10
    1a34:	9f 90       	pop	r9
    1a36:	8f 90       	pop	r8
    1a38:	7f 90       	pop	r7
    1a3a:	6f 90       	pop	r6
    1a3c:	5f 90       	pop	r5
    1a3e:	4f 90       	pop	r4
    1a40:	3f 90       	pop	r3
    1a42:	2f 90       	pop	r2
    1a44:	08 95       	ret

00001a46 <strnlen_P>:
    1a46:	fc 01       	movw	r30, r24
    1a48:	05 90       	lpm	r0, Z+
    1a4a:	61 50       	subi	r22, 0x01	; 1
    1a4c:	70 40       	sbci	r23, 0x00	; 0
    1a4e:	01 10       	cpse	r0, r1
    1a50:	d8 f7       	brcc	.-10     	; 0x1a48 <strnlen_P+0x2>
    1a52:	80 95       	com	r24
    1a54:	90 95       	com	r25
    1a56:	8e 0f       	add	r24, r30
    1a58:	9f 1f       	adc	r25, r31
    1a5a:	08 95       	ret

00001a5c <strnlen>:
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	61 50       	subi	r22, 0x01	; 1
    1a60:	70 40       	sbci	r23, 0x00	; 0
    1a62:	01 90       	ld	r0, Z+
    1a64:	01 10       	cpse	r0, r1
    1a66:	d8 f7       	brcc	.-10     	; 0x1a5e <strnlen+0x2>
    1a68:	80 95       	com	r24
    1a6a:	90 95       	com	r25
    1a6c:	8e 0f       	add	r24, r30
    1a6e:	9f 1f       	adc	r25, r31
    1a70:	08 95       	ret

00001a72 <__ultoa_invert>:
    1a72:	fa 01       	movw	r30, r20
    1a74:	aa 27       	eor	r26, r26
    1a76:	28 30       	cpi	r18, 0x08	; 8
    1a78:	51 f1       	breq	.+84     	; 0x1ace <__ultoa_invert+0x5c>
    1a7a:	20 31       	cpi	r18, 0x10	; 16
    1a7c:	81 f1       	breq	.+96     	; 0x1ade <__ultoa_invert+0x6c>
    1a7e:	e8 94       	clt
    1a80:	6f 93       	push	r22
    1a82:	6e 7f       	andi	r22, 0xFE	; 254
    1a84:	6e 5f       	subi	r22, 0xFE	; 254
    1a86:	7f 4f       	sbci	r23, 0xFF	; 255
    1a88:	8f 4f       	sbci	r24, 0xFF	; 255
    1a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8c:	af 4f       	sbci	r26, 0xFF	; 255
    1a8e:	b1 e0       	ldi	r27, 0x01	; 1
    1a90:	3e d0       	rcall	.+124    	; 0x1b0e <__ultoa_invert+0x9c>
    1a92:	b4 e0       	ldi	r27, 0x04	; 4
    1a94:	3c d0       	rcall	.+120    	; 0x1b0e <__ultoa_invert+0x9c>
    1a96:	67 0f       	add	r22, r23
    1a98:	78 1f       	adc	r23, r24
    1a9a:	89 1f       	adc	r24, r25
    1a9c:	9a 1f       	adc	r25, r26
    1a9e:	a1 1d       	adc	r26, r1
    1aa0:	68 0f       	add	r22, r24
    1aa2:	79 1f       	adc	r23, r25
    1aa4:	8a 1f       	adc	r24, r26
    1aa6:	91 1d       	adc	r25, r1
    1aa8:	a1 1d       	adc	r26, r1
    1aaa:	6a 0f       	add	r22, r26
    1aac:	71 1d       	adc	r23, r1
    1aae:	81 1d       	adc	r24, r1
    1ab0:	91 1d       	adc	r25, r1
    1ab2:	a1 1d       	adc	r26, r1
    1ab4:	20 d0       	rcall	.+64     	; 0x1af6 <__ultoa_invert+0x84>
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <__ultoa_invert+0x48>
    1ab8:	68 94       	set
    1aba:	3f 91       	pop	r19
    1abc:	2a e0       	ldi	r18, 0x0A	; 10
    1abe:	26 9f       	mul	r18, r22
    1ac0:	11 24       	eor	r1, r1
    1ac2:	30 19       	sub	r19, r0
    1ac4:	30 5d       	subi	r19, 0xD0	; 208
    1ac6:	31 93       	st	Z+, r19
    1ac8:	de f6       	brtc	.-74     	; 0x1a80 <__ultoa_invert+0xe>
    1aca:	cf 01       	movw	r24, r30
    1acc:	08 95       	ret
    1ace:	46 2f       	mov	r20, r22
    1ad0:	47 70       	andi	r20, 0x07	; 7
    1ad2:	40 5d       	subi	r20, 0xD0	; 208
    1ad4:	41 93       	st	Z+, r20
    1ad6:	b3 e0       	ldi	r27, 0x03	; 3
    1ad8:	0f d0       	rcall	.+30     	; 0x1af8 <__ultoa_invert+0x86>
    1ada:	c9 f7       	brne	.-14     	; 0x1ace <__ultoa_invert+0x5c>
    1adc:	f6 cf       	rjmp	.-20     	; 0x1aca <__ultoa_invert+0x58>
    1ade:	46 2f       	mov	r20, r22
    1ae0:	4f 70       	andi	r20, 0x0F	; 15
    1ae2:	40 5d       	subi	r20, 0xD0	; 208
    1ae4:	4a 33       	cpi	r20, 0x3A	; 58
    1ae6:	18 f0       	brcs	.+6      	; 0x1aee <__ultoa_invert+0x7c>
    1ae8:	49 5d       	subi	r20, 0xD9	; 217
    1aea:	31 fd       	sbrc	r19, 1
    1aec:	40 52       	subi	r20, 0x20	; 32
    1aee:	41 93       	st	Z+, r20
    1af0:	02 d0       	rcall	.+4      	; 0x1af6 <__ultoa_invert+0x84>
    1af2:	a9 f7       	brne	.-22     	; 0x1ade <__ultoa_invert+0x6c>
    1af4:	ea cf       	rjmp	.-44     	; 0x1aca <__ultoa_invert+0x58>
    1af6:	b4 e0       	ldi	r27, 0x04	; 4
    1af8:	a6 95       	lsr	r26
    1afa:	97 95       	ror	r25
    1afc:	87 95       	ror	r24
    1afe:	77 95       	ror	r23
    1b00:	67 95       	ror	r22
    1b02:	ba 95       	dec	r27
    1b04:	c9 f7       	brne	.-14     	; 0x1af8 <__ultoa_invert+0x86>
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	61 05       	cpc	r22, r1
    1b0a:	71 05       	cpc	r23, r1
    1b0c:	08 95       	ret
    1b0e:	9b 01       	movw	r18, r22
    1b10:	ac 01       	movw	r20, r24
    1b12:	0a 2e       	mov	r0, r26
    1b14:	06 94       	lsr	r0
    1b16:	57 95       	ror	r21
    1b18:	47 95       	ror	r20
    1b1a:	37 95       	ror	r19
    1b1c:	27 95       	ror	r18
    1b1e:	ba 95       	dec	r27
    1b20:	c9 f7       	brne	.-14     	; 0x1b14 <__ultoa_invert+0xa2>
    1b22:	62 0f       	add	r22, r18
    1b24:	73 1f       	adc	r23, r19
    1b26:	84 1f       	adc	r24, r20
    1b28:	95 1f       	adc	r25, r21
    1b2a:	a0 1d       	adc	r26, r0
    1b2c:	08 95       	ret

00001b2e <_exit>:
    1b2e:	f8 94       	cli

00001b30 <__stop_program>:
    1b30:	ff cf       	rjmp	.-2      	; 0x1b30 <__stop_program>
