
StillImageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00001ea4  00001f38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ea4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800144  00800144  00001f7c  2**0
                  ALLOC
  3 .stab         00000f90  00000000  00000000  00001f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000030d  00000000  00000000  00002f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000888  00000000  00000000  00003220  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d65d  00000000  00000000  00003aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000338f  00000000  00000000  00011105  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005c49  00000000  00000000  00014494  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001910  00000000  00000000  0001a0e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004f2c  00000000  00000000  0001b9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000962c  00000000  00000000  0002091c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a20  00000000  00000000  00029f48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	64 c1       	rjmp	.+712    	; 0x2ca <__ctors_end>
       2:	00 00       	nop
       4:	81 c1       	rjmp	.+770    	; 0x308 <__bad_interrupt>
       6:	00 00       	nop
       8:	7f c1       	rjmp	.+766    	; 0x308 <__bad_interrupt>
       a:	00 00       	nop
       c:	7d c1       	rjmp	.+762    	; 0x308 <__bad_interrupt>
       e:	00 00       	nop
      10:	7b c1       	rjmp	.+758    	; 0x308 <__bad_interrupt>
      12:	00 00       	nop
      14:	79 c1       	rjmp	.+754    	; 0x308 <__bad_interrupt>
      16:	00 00       	nop
      18:	77 c1       	rjmp	.+750    	; 0x308 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	75 c1       	rjmp	.+746    	; 0x308 <__bad_interrupt>
      1e:	00 00       	nop
      20:	73 c1       	rjmp	.+742    	; 0x308 <__bad_interrupt>
      22:	00 00       	nop
      24:	71 c1       	rjmp	.+738    	; 0x308 <__bad_interrupt>
      26:	00 00       	nop
      28:	76 c6       	rjmp	.+3308   	; 0xd16 <__vector_10>
      2a:	00 00       	nop
      2c:	6d c1       	rjmp	.+730    	; 0x308 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6b c1       	rjmp	.+726    	; 0x308 <__bad_interrupt>
      32:	00 00       	nop
      34:	69 c1       	rjmp	.+722    	; 0x308 <__bad_interrupt>
      36:	00 00       	nop
      38:	67 c1       	rjmp	.+718    	; 0x308 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	65 c1       	rjmp	.+714    	; 0x308 <__bad_interrupt>
      3e:	00 00       	nop
      40:	63 c1       	rjmp	.+710    	; 0x308 <__bad_interrupt>
      42:	00 00       	nop
      44:	61 c1       	rjmp	.+706    	; 0x308 <__bad_interrupt>
      46:	00 00       	nop
      48:	5f c1       	rjmp	.+702    	; 0x308 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5d c1       	rjmp	.+698    	; 0x308 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5b c1       	rjmp	.+694    	; 0x308 <__bad_interrupt>
      52:	00 00       	nop
      54:	59 c1       	rjmp	.+690    	; 0x308 <__bad_interrupt>
      56:	00 00       	nop
      58:	57 c1       	rjmp	.+686    	; 0x308 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	55 c1       	rjmp	.+682    	; 0x308 <__bad_interrupt>
      5e:	00 00       	nop
      60:	53 c1       	rjmp	.+678    	; 0x308 <__bad_interrupt>
      62:	00 00       	nop
      64:	51 c1       	rjmp	.+674    	; 0x308 <__bad_interrupt>
      66:	00 00       	nop
      68:	4f c1       	rjmp	.+670    	; 0x308 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4d c1       	rjmp	.+666    	; 0x308 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4b c1       	rjmp	.+662    	; 0x308 <__bad_interrupt>
      72:	00 00       	nop
      74:	49 c1       	rjmp	.+658    	; 0x308 <__bad_interrupt>
      76:	00 00       	nop
      78:	47 c1       	rjmp	.+654    	; 0x308 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	45 c1       	rjmp	.+650    	; 0x308 <__bad_interrupt>
      7e:	00 00       	nop
      80:	43 c1       	rjmp	.+646    	; 0x308 <__bad_interrupt>
      82:	00 00       	nop
      84:	41 c1       	rjmp	.+642    	; 0x308 <__bad_interrupt>
      86:	00 00       	nop
      88:	3f c1       	rjmp	.+638    	; 0x308 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3d c1       	rjmp	.+634    	; 0x308 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3b c1       	rjmp	.+630    	; 0x308 <__bad_interrupt>
      92:	00 00       	nop
      94:	39 c1       	rjmp	.+626    	; 0x308 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4262>:
      98:	1b 5b 33 36 6d 53 74 69 6c 6c 20 49 6d 61 67 65     .[36mStill Image
      a8:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
      b8:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00                    ng....[37m.

000000c3 <__c.4271>:
      c3:	4f 70 65 6e 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Opening Session.
      d3:	2e 2e 0d 0a 00                                      .....

000000d8 <__c.4273>:
      d8:	43 6f 75 6c 64 20 6e 6f 74 20 6f 70 65 6e 20 50     Could not open P
      e8:	49 4d 41 20 73 65 73 73 69 6f 6e 2e 0d 0a 00        IMA session....

000000f7 <__c.4275>:
      f7:	54 75 72 6e 69 6e 67 20 6f 66 66 20 44 65 76 69     Turning off Devi
     107:	63 65 2e 2e 2e 0d 0a 00                             ce......

0000010f <__c.4277>:
     10f:	43 6f 75 6c 64 20 6e 6f 74 20 74 75 72 6e 20 6f     Could not turn o
     11f:	66 66 20 64 65 76 69 63 65 2e 0d 0a 00              ff device....

0000012c <__c.4279>:
     12c:	44 65 76 69 63 65 20 4f 66 66 2e 0d 0a 00           Device Off....

0000013a <__c.4281>:
     13a:	43 6c 6f 73 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Closing Session.
     14a:	2e 2e 0d 0a 00                                      .....

0000014f <__c.4283>:
     14f:	43 6f 75 6c 64 20 6e 6f 74 20 63 6c 6f 73 65 20     Could not close 
     15f:	50 49 4d 41 20 73 65 73 73 69 6f 6e 2e 0d 0a 00     PIMA session....

0000016f <__c.4288>:
     16f:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     17f:	0d 0a 00                                            ...

00000182 <__c.4293>:
     182:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     192:	68 65 64 2e 0d 0a 00                                hed....

00000199 <__c.4300>:
     199:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1a9:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1b9:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001c6 <__c.4302>:
     1c6:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1d6:	4e 6f 74 20 61 20 56 61 6c 69 64 20 53 74 69 6c     Not a Valid Stil
     1e6:	6c 20 49 6d 61 67 65 20 43 6c 61 73 73 20 44 65     l Image Class De
     1f6:	76 69 63 65 2e 0d 0a 00                             vice....

000001fe <__c.4304>:
     1fe:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     20e:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     21e:	6f 6e 2e 0d 0a 00                                   on....

00000224 <__c.4306>:
     224:	53 74 69 6c 6c 20 49 6d 61 67 65 20 44 65 76 69     Still Image Devi
     234:	63 65 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d 0a     ce Enumerated...
     244:	00                                                  .

00000245 <__c.4311>:
     245:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     255:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     265:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000274 <__c.4318>:
     274:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     284:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     294:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     2a4:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     2b4:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     2c4:	1b 5b 33 37 6d 00                                   .[37m.

000002ca <__ctors_end>:
     2ca:	11 24       	eor	r1, r1
     2cc:	1f be       	out	0x3f, r1	; 63
     2ce:	cf ef       	ldi	r28, 0xFF	; 255
     2d0:	d0 e2       	ldi	r29, 0x20	; 32
     2d2:	de bf       	out	0x3e, r29	; 62
     2d4:	cd bf       	out	0x3d, r28	; 61

000002d6 <__do_copy_data>:
     2d6:	11 e0       	ldi	r17, 0x01	; 1
     2d8:	a0 e0       	ldi	r26, 0x00	; 0
     2da:	b1 e0       	ldi	r27, 0x01	; 1
     2dc:	e4 ea       	ldi	r30, 0xA4	; 164
     2de:	fe e1       	ldi	r31, 0x1E	; 30
     2e0:	00 e0       	ldi	r16, 0x00	; 0
     2e2:	0b bf       	out	0x3b, r16	; 59
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <__do_copy_data+0x14>
     2e6:	07 90       	elpm	r0, Z+
     2e8:	0d 92       	st	X+, r0
     2ea:	a4 34       	cpi	r26, 0x44	; 68
     2ec:	b1 07       	cpc	r27, r17
     2ee:	d9 f7       	brne	.-10     	; 0x2e6 <__do_copy_data+0x10>
     2f0:	1b be       	out	0x3b, r1	; 59

000002f2 <__do_clear_bss>:
     2f2:	11 e0       	ldi	r17, 0x01	; 1
     2f4:	a4 e4       	ldi	r26, 0x44	; 68
     2f6:	b1 e0       	ldi	r27, 0x01	; 1
     2f8:	01 c0       	rjmp	.+2      	; 0x2fc <.do_clear_bss_start>

000002fa <.do_clear_bss_loop>:
     2fa:	1d 92       	st	X+, r1

000002fc <.do_clear_bss_start>:
     2fc:	a6 36       	cpi	r26, 0x66	; 102
     2fe:	b1 07       	cpc	r27, r17
     300:	e1 f7       	brne	.-8      	; 0x2fa <.do_clear_bss_loop>
     302:	77 d0       	rcall	.+238    	; 0x3f2 <main>
     304:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <_exit>

00000308 <__bad_interrupt>:
     308:	7b ce       	rjmp	.-778    	; 0x0 <__vectors>

0000030a <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     30a:	9b b1       	in	r25, 0x0b	; 11
     30c:	9f 70       	andi	r25, 0x0F	; 15
     30e:	98 2b       	or	r25, r24
     310:	9b b9       	out	0x0b, r25	; 11
			}
     312:	08 95       	ret

00000314 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     314:	84 b7       	in	r24, 0x34	; 52
     316:	87 7f       	andi	r24, 0xF7	; 247
     318:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     31a:	28 e1       	ldi	r18, 0x18	; 24
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	20 93 60 00 	sts	0x0060, r18
     324:	10 92 60 00 	sts	0x0060, r1
     328:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	80 e8       	ldi	r24, 0x80	; 128
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	80 93 61 00 	sts	0x0061, r24
     336:	90 93 61 00 	sts	0x0061, r25
     33a:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     33c:	83 e3       	ldi	r24, 0x33	; 51
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	90 93 cd 00 	sts	0x00CD, r25
     344:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     348:	86 e0       	ldi	r24, 0x06	; 6
     34a:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     34e:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     352:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     356:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     358:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     35a:	8a b1       	in	r24, 0x0a	; 10
     35c:	80 6f       	ori	r24, 0xF0	; 240
     35e:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     360:	8b b1       	in	r24, 0x0b	; 11
     362:	8f 70       	andi	r24, 0x0F	; 15
     364:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     366:	bc d4       	rcall	.+2424   	; 0xce0 <USB_Init>
     368:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0c 94 42 0c 	jmp	0x1884	; 0x1884 <Serial_CreateStream>

00000370 <StillImageHost_Task>:
     370:	80 91 51 01 	lds	r24, 0x0151
/** Task to manage an enumerated USB Still Image device once connected, to manage a
 *  new PIMA session in order to send commands to the attached device.
 */
void StillImageHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     374:	8b 30       	cpi	r24, 0x0B	; 11
     376:	09 f0       	breq	.+2      	; 0x37a <StillImageHost_Task+0xa>
     378:	3b c0       	rjmp	.+118    	; 0x3f0 <StillImageHost_Task+0x80>
	  return;

	puts_P(PSTR("Opening Session...\r\n"));
     37a:	83 ec       	ldi	r24, 0xC3	; 195
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 87 0c 	call	0x190e	; 0x190e <puts_P>

	if (SI_Host_OpenSession(&DigitalCamera_SI_Interface) != PIPE_RWSTREAM_NoError)
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <SI_Host_OpenSession>
     38a:	88 23       	and	r24, r24
     38c:	19 f0       	breq	.+6      	; 0x394 <StillImageHost_Task+0x24>
	{
		puts_P(PSTR("Could not open PIMA session.\r\n"));
     38e:	88 ed       	ldi	r24, 0xD8	; 216
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	26 c0       	rjmp	.+76     	; 0x3e0 <StillImageHost_Task+0x70>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Turning off Device...\r\n"));
     394:	87 ef       	ldi	r24, 0xF7	; 247
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 87 0c 	call	0x190e	; 0x190e <puts_P>

	SI_Host_SendCommand(&DigitalCamera_SI_Interface, 0x1013, 0, NULL);
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	63 e1       	ldi	r22, 0x13	; 19
     3a2:	70 e1       	ldi	r23, 0x10	; 16
     3a4:	40 e0       	ldi	r20, 0x00	; 0
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	0e 94 ab 0b 	call	0x1756	; 0x1756 <SI_Host_SendCommand>
	if (SI_Host_ReceiveResponse(&DigitalCamera_SI_Interface))
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <SI_Host_ReceiveResponse>
     3b6:	88 23       	and	r24, r24
     3b8:	19 f0       	breq	.+6      	; 0x3c0 <StillImageHost_Task+0x50>
	{
		puts_P(PSTR("Could not turn off device.\r\n"));
     3ba:	8f e0       	ldi	r24, 0x0F	; 15
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	10 c0       	rjmp	.+32     	; 0x3e0 <StillImageHost_Task+0x70>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Device Off.\r\n"));
     3c0:	8c e2       	ldi	r24, 0x2C	; 44
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	0e 94 87 0c 	call	0x190e	; 0x190e <puts_P>

	puts_P(PSTR("Closing Session...\r\n"));
     3c8:	8a e3       	ldi	r24, 0x3A	; 58
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	0e 94 87 0c 	call	0x190e	; 0x190e <puts_P>

	if (SI_Host_CloseSession(&DigitalCamera_SI_Interface) != PIPE_RWSTREAM_NoError)
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	91 e0       	ldi	r25, 0x01	; 1
     3d4:	0e 94 4a 0b 	call	0x1694	; 0x1694 <SI_Host_CloseSession>
     3d8:	88 23       	and	r24, r24
     3da:	31 f0       	breq	.+12     	; 0x3e8 <StillImageHost_Task+0x78>
	{
		puts_P(PSTR("Could not close PIMA session.\r\n"));
     3dc:	8f e4       	ldi	r24, 0x4F	; 79
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	0e 94 87 0c 	call	0x190e	; 0x190e <puts_P>
		USB_Host_SetDeviceConfiguration(0);
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	ef c6       	rjmp	.+3550   	; 0x11c6 <USB_Host_SetDeviceConfiguration>
     3e8:	80 e6       	ldi	r24, 0x60	; 96
		return;
     3ea:	8f df       	rcall	.-226    	; 0x30a <LEDs_SetAllLEDs>
	}

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	eb c6       	rjmp	.+3542   	; 0x11c6 <USB_Host_SetDeviceConfiguration>
     3f0:	08 95       	ret

000003f2 <main>:
	USB_Host_SetDeviceConfiguration(0);
     3f2:	90 df       	rcall	.-224    	; 0x314 <SetupHardware>
     3f4:	88 e9       	ldi	r24, 0x98	; 152
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0e 94 87 0c 	call	0x190e	; 0x190e <puts_P>
 */
int main(void)
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "Still Image Host Demo running.\r\n" ESC_FG_WHITE));
     3fc:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3fe:	85 df       	rcall	.-246    	; 0x30a <LEDs_SetAllLEDs>
     400:	78 94       	sei
     402:	b6 df       	rcall	.-148    	; 0x370 <StillImageHost_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     404:	1c d7       	rcall	.+3640   	; 0x123e <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		StillImageHost_Task();
     406:	fd cf       	rjmp	.-6      	; 0x402 <main+0x10>

00000408 <EVENT_USB_Host_DeviceAttached>:
     408:	8f e6       	ldi	r24, 0x6F	; 111

		SI_Host_USBTask(&DigitalCamera_SI_Interface);
		USB_USBTask();
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	0e 94 87 0c 	call	0x190e	; 0x190e <puts_P>
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     410:	80 ea       	ldi	r24, 0xA0	; 160
     412:	7b cf       	rjmp	.-266    	; 0x30a <LEDs_SetAllLEDs>

00000414 <EVENT_USB_Host_DeviceUnattached>:
     414:	82 e8       	ldi	r24, 0x82	; 130
}
     416:	91 e0       	ldi	r25, 0x01	; 1
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     418:	0e 94 87 0c 	call	0x190e	; 0x190e <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     41c:	80 e1       	ldi	r24, 0x10	; 16
     41e:	75 cf       	rjmp	.-278    	; 0x30a <LEDs_SetAllLEDs>

00000420 <EVENT_USB_Host_DeviceEnumerationComplete>:
     420:	cf 93       	push	r28
}
     422:	df 93       	push	r29

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     424:	cd b7       	in	r28, 0x3d	; 61
     426:	de b7       	in	r29, 0x3e	; 62
     428:	c2 50       	subi	r28, 0x02	; 2
     42a:	d2 40       	sbci	r29, 0x02	; 2
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	de bf       	out	0x3e, r29	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     436:	80 ea       	ldi	r24, 0xA0	; 160
     438:	68 df       	rcall	.-304    	; 0x30a <LEDs_SetAllLEDs>
     43a:	81 e0       	ldi	r24, 0x01	; 1

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     43c:	be 01       	movw	r22, r28
     43e:	6f 5f       	subi	r22, 0xFF	; 255
     440:	7f 4f       	sbci	r23, 0xFF	; 255
     442:	ae 01       	movw	r20, r28
     444:	4d 5f       	subi	r20, 0xFD	; 253
     446:	5f 4f       	sbci	r21, 0xFF	; 255
     448:	20 e0       	ldi	r18, 0x00	; 0
     44a:	32 e0       	ldi	r19, 0x02	; 2
     44c:	f7 d4       	rcall	.+2542   	; 0xe3c <USB_Host_GetDeviceConfigDescriptor>
     44e:	88 23       	and	r24, r24
     450:	19 f0       	breq	.+6      	; 0x458 <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
     452:	89 e9       	ldi	r24, 0x99	; 153
     454:	91 e0       	ldi	r25, 0x01	; 1
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     456:	13 c0       	rjmp	.+38     	; 0x47e <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
     458:	69 81       	ldd	r22, Y+1	; 0x01
     45a:	7a 81       	ldd	r23, Y+2	; 0x02
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (SI_Host_ConfigurePipes(&DigitalCamera_SI_Interface,
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	ae 01       	movw	r20, r28
     462:	4d 5f       	subi	r20, 0xFD	; 253
     464:	5f 4f       	sbci	r21, 0xFF	; 255
     466:	1f d7       	rcall	.+3646   	; 0x12a6 <SI_Host_ConfigurePipes>
     468:	88 23       	and	r24, r24
     46a:	19 f0       	breq	.+6      	; 0x472 <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
     46c:	86 ec       	ldi	r24, 0xC6	; 198
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	06 c0       	rjmp	.+12     	; 0x47e <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
	                           ConfigDescriptorSize, ConfigDescriptorData) != SI_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Still Image Class Device.\r\n"));
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	a8 d6       	rcall	.+3408   	; 0x11c6 <USB_Host_SetDeviceConfiguration>
     476:	88 23       	and	r24, r24
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     478:	31 f0       	breq	.+12     	; 0x486 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
     47a:	8e ef       	ldi	r24, 0xFE	; 254
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0e 94 87 0c 	call	0x190e	; 0x190e <puts_P>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     482:	80 e9       	ldi	r24, 0x90	; 144
     484:	05 c0       	rjmp	.+10     	; 0x490 <EVENT_USB_Host_DeviceEnumerationComplete+0x70>
     486:	84 e2       	ldi	r24, 0x24	; 36
     488:	92 e0       	ldi	r25, 0x02	; 2
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     48a:	0e 94 87 0c 	call	0x190e	; 0x190e <puts_P>
		return;
	}

	puts_P(PSTR("Still Image Device Enumerated.\r\n"));
     48e:	80 e6       	ldi	r24, 0x60	; 96
     490:	3c df       	rcall	.-392    	; 0x30a <LEDs_SetAllLEDs>
     492:	ce 5f       	subi	r28, 0xFE	; 254
     494:	dd 4f       	sbci	r29, 0xFD	; 253
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	f8 94       	cli
     49a:	de bf       	out	0x3e, r29	; 62
}
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	cd bf       	out	0x3d, r28	; 61
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	08 95       	ret

000004a6 <EVENT_USB_Host_HostError>:
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	0f 92       	push	r0
     4ac:	cd b7       	in	r28, 0x3d	; 61
     4ae:	de b7       	in	r29, 0x3e	; 62

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();
     4b0:	89 83       	std	Y+1, r24	; 0x01
     4b2:	ae d3       	rcall	.+1884   	; 0xc10 <USB_Disable>
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <EVENT_USB_Host_HostError+0x10>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     4b6:	00 d0       	rcall	.+0      	; 0x4b8 <EVENT_USB_Host_HostError+0x12>
     4b8:	ed b7       	in	r30, 0x3d	; 61
     4ba:	fe b7       	in	r31, 0x3e	; 62
     4bc:	31 96       	adiw	r30, 0x01	; 1
     4be:	25 e4       	ldi	r18, 0x45	; 69
     4c0:	32 e0       	ldi	r19, 0x02	; 2
     4c2:	ad b7       	in	r26, 0x3d	; 61
     4c4:	be b7       	in	r27, 0x3e	; 62
     4c6:	12 96       	adiw	r26, 0x02	; 2
     4c8:	3c 93       	st	X, r19
     4ca:	2e 93       	st	-X, r18
     4cc:	11 97       	sbiw	r26, 0x01	; 1
     4ce:	89 81       	ldd	r24, Y+1	; 0x01
     4d0:	82 83       	std	Z+2, r24	; 0x02
     4d2:	13 82       	std	Z+3, r1	; 0x03
     4d4:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <printf_P>
     4d8:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	80 e9       	ldi	r24, 0x90	; 144
     4e2:	13 df       	rcall	.-474    	; 0x30a <LEDs_SetAllLEDs>
     4e4:	ff cf       	rjmp	.-2      	; 0x4e4 <EVENT_USB_Host_HostError+0x3e>

000004e6 <EVENT_USB_Host_DeviceEnumerationFailed>:
     4e6:	90 91 51 01 	lds	r25, 0x0151
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4ea:	2d b7       	in	r18, 0x3d	; 61
     4ec:	3e b7       	in	r19, 0x3e	; 62
     4ee:	28 50       	subi	r18, 0x08	; 8
     4f0:	30 40       	sbci	r19, 0x00	; 0
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	3e bf       	out	0x3e, r19	; 62
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	2d bf       	out	0x3d, r18	; 61
     4fc:	ed b7       	in	r30, 0x3d	; 61
     4fe:	fe b7       	in	r31, 0x3e	; 62
     500:	31 96       	adiw	r30, 0x01	; 1
     502:	24 e7       	ldi	r18, 0x74	; 116
     504:	32 e0       	ldi	r19, 0x02	; 2
     506:	ad b7       	in	r26, 0x3d	; 61
     508:	be b7       	in	r27, 0x3e	; 62
     50a:	12 96       	adiw	r26, 0x02	; 2
     50c:	3c 93       	st	X, r19
     50e:	2e 93       	st	-X, r18
     510:	11 97       	sbiw	r26, 0x01	; 1
     512:	82 83       	std	Z+2, r24	; 0x02
     514:	13 82       	std	Z+3, r1	; 0x03
     516:	64 83       	std	Z+4, r22	; 0x04
     518:	15 82       	std	Z+5, r1	; 0x05
     51a:	96 83       	std	Z+6, r25	; 0x06
     51c:	17 82       	std	Z+7, r1	; 0x07
     51e:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     522:	2d b7       	in	r18, 0x3d	; 61
     524:	3e b7       	in	r19, 0x3e	; 62
     526:	28 5f       	subi	r18, 0xF8	; 248
     528:	3f 4f       	sbci	r19, 0xFF	; 255
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	f8 94       	cli
     52e:	3e bf       	out	0x3e, r19	; 62
     530:	0f be       	out	0x3f, r0	; 63
     532:	2d bf       	out	0x3d, r18	; 61
     534:	80 e9       	ldi	r24, 0x90	; 144
     536:	e9 ce       	rjmp	.-558    	; 0x30a <LEDs_SetAllLEDs>

00000538 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     538:	80 91 9e 00 	lds	r24, 0x009E
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	81 70       	andi	r24, 0x01	; 1
     540:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     542:	20 91 a0 00 	lds	r18, 0x00A0
     546:	2d 7f       	andi	r18, 0xFD	; 253
     548:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     54c:	20 91 9e 00 	lds	r18, 0x009E
     550:	22 60       	ori	r18, 0x02	; 2
     552:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     556:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     55a:	21 fd       	sbrc	r18, 1
     55c:	fc cf       	rjmp	.-8      	; 0x556 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     55e:	20 91 9e 00 	lds	r18, 0x009E
     562:	21 60       	ori	r18, 0x01	; 1
     564:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     568:	10 92 47 01 	sts	0x0147, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     56c:	20 91 a0 00 	lds	r18, 0x00A0
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	20 72       	andi	r18, 0x20	; 32
     574:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     576:	40 91 a0 00 	lds	r20, 0x00A0
     57a:	4f 7d       	andi	r20, 0xDF	; 223
     57c:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     580:	40 91 9f 00 	lds	r20, 0x009F
     584:	4f 7d       	andi	r20, 0xDF	; 223
     586:	40 93 9f 00 	sts	0x009F, r20
     58a:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     58c:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     590:	55 ff       	sbrs	r21, 5
     592:	0b c0       	rjmp	.+22     	; 0x5aa <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     594:	40 91 9f 00 	lds	r20, 0x009F
     598:	4f 7d       	andi	r20, 0xDF	; 223
     59a:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     59e:	40 91 9f 00 	lds	r20, 0x009F
     5a2:	4d 7f       	andi	r20, 0xFD	; 253
     5a4:	40 93 9f 00 	sts	0x009F, r20
     5a8:	08 c0       	rjmp	.+16     	; 0x5ba <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5aa:	ef ec       	ldi	r30, 0xCF	; 207
     5ac:	f7 e0       	ldi	r31, 0x07	; 7
     5ae:	31 97       	sbiw	r30, 0x01	; 1
     5b0:	f1 f7       	brne	.-4      	; 0x5ae <USB_Host_ResetDevice+0x76>
     5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <USB_Host_ResetDevice+0x7c>
     5b4:	00 00       	nop
     5b6:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     5b8:	49 f7       	brne	.-46     	; 0x58c <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     5ba:	21 15       	cp	r18, r1
     5bc:	31 05       	cpc	r19, r1
     5be:	29 f0       	breq	.+10     	; 0x5ca <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     5c0:	20 91 a0 00 	lds	r18, 0x00A0
     5c4:	20 62       	ori	r18, 0x20	; 32
     5c6:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     5ca:	00 97       	sbiw	r24, 0x00	; 0
     5cc:	29 f4       	brne	.+10     	; 0x5d8 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     5ce:	80 91 9e 00 	lds	r24, 0x009E
     5d2:	8e 7f       	andi	r24, 0xFE	; 254
     5d4:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     5d8:	80 91 a0 00 	lds	r24, 0x00A0
     5dc:	82 60       	ori	r24, 0x02	; 2
     5de:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     5e2:	08 95       	ret

000005e4 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5e4:	40 91 9e 00 	lds	r20, 0x009E
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	41 70       	andi	r20, 0x01	; 1
     5ec:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     5ee:	20 91 a0 00 	lds	r18, 0x00A0
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	20 72       	andi	r18, 0x20	; 32
     5f6:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     5f8:	90 91 a0 00 	lds	r25, 0x00A0
     5fc:	9f 7d       	andi	r25, 0xDF	; 223
     5fe:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     602:	90 91 9f 00 	lds	r25, 0x009F
     606:	9f 7d       	andi	r25, 0xDF	; 223
     608:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     60c:	90 91 9e 00 	lds	r25, 0x009E
     610:	91 60       	ori	r25, 0x01	; 1
     612:	90 93 9e 00 	sts	0x009E, r25
     616:	26 c0       	rjmp	.+76     	; 0x664 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     618:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     61c:	95 ff       	sbrs	r25, 5
     61e:	06 c0       	rjmp	.+12     	; 0x62c <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     620:	90 91 9f 00 	lds	r25, 0x009F
     624:	9f 7d       	andi	r25, 0xDF	; 223
     626:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     62a:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     62c:	90 91 51 01 	lds	r25, 0x0151
     630:	91 30       	cpi	r25, 0x01	; 1
     632:	d9 f0       	breq	.+54     	; 0x66a <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     634:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     638:	94 ff       	sbrs	r25, 4
     63a:	09 c0       	rjmp	.+18     	; 0x64e <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     63c:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     640:	80 91 a6 00 	lds	r24, 0x00A6
     644:	8f 7e       	andi	r24, 0xEF	; 239
     646:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     64a:	82 e0       	ldi	r24, 0x02	; 2

			break;
     64c:	0f c0       	rjmp	.+30     	; 0x66c <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     64e:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     652:	91 ff       	sbrs	r25, 1
     654:	07 c0       	rjmp	.+14     	; 0x664 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     656:	80 91 a6 00 	lds	r24, 0x00A6
     65a:	8d 7f       	andi	r24, 0xFD	; 253
     65c:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     660:	83 e0       	ldi	r24, 0x03	; 3

			break;
     662:	04 c0       	rjmp	.+8      	; 0x66c <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     664:	88 23       	and	r24, r24
     666:	c1 f6       	brne	.-80     	; 0x618 <USB_Host_WaitMS+0x34>
     668:	01 c0       	rjmp	.+2      	; 0x66c <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     66a:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     66c:	41 15       	cp	r20, r1
     66e:	51 05       	cpc	r21, r1
     670:	29 f4       	brne	.+10     	; 0x67c <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     672:	90 91 9e 00 	lds	r25, 0x009E
     676:	9e 7f       	andi	r25, 0xFE	; 254
     678:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     67c:	21 15       	cp	r18, r1
     67e:	31 05       	cpc	r19, r1
     680:	29 f0       	breq	.+10     	; 0x68c <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     682:	90 91 a0 00 	lds	r25, 0x00A0
     686:	90 62       	ori	r25, 0x20	; 32
     688:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     68c:	08 95       	ret

0000068e <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	28 97       	sbiw	r28, 0x08	; 8
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     6a6:	80 91 51 01 	lds	r24, 0x0151
     6aa:	85 30       	cpi	r24, 0x05	; 5
     6ac:	09 f4       	brne	.+2      	; 0x6b0 <USB_Host_ProcessNextHostState+0x22>
     6ae:	99 c0       	rjmp	.+306    	; 0x7e2 <USB_Host_ProcessNextHostState+0x154>
     6b0:	86 30       	cpi	r24, 0x06	; 6
     6b2:	68 f4       	brcc	.+26     	; 0x6ce <USB_Host_ProcessNextHostState+0x40>
     6b4:	82 30       	cpi	r24, 0x02	; 2
     6b6:	c1 f1       	breq	.+112    	; 0x728 <USB_Host_ProcessNextHostState+0x9a>
     6b8:	83 30       	cpi	r24, 0x03	; 3
     6ba:	18 f4       	brcc	.+6      	; 0x6c2 <USB_Host_ProcessNextHostState+0x34>
     6bc:	88 23       	and	r24, r24
     6be:	a1 f0       	breq	.+40     	; 0x6e8 <USB_Host_ProcessNextHostState+0x5a>
     6c0:	04 c1       	rjmp	.+520    	; 0x8ca <USB_Host_ProcessNextHostState+0x23c>
     6c2:	83 30       	cpi	r24, 0x03	; 3
     6c4:	d9 f1       	breq	.+118    	; 0x73c <USB_Host_ProcessNextHostState+0xae>
     6c6:	84 30       	cpi	r24, 0x04	; 4
     6c8:	09 f0       	breq	.+2      	; 0x6cc <USB_Host_ProcessNextHostState+0x3e>
     6ca:	ff c0       	rjmp	.+510    	; 0x8ca <USB_Host_ProcessNextHostState+0x23c>
     6cc:	62 c0       	rjmp	.+196    	; 0x792 <USB_Host_ProcessNextHostState+0x104>
     6ce:	87 30       	cpi	r24, 0x07	; 7
     6d0:	09 f4       	brne	.+2      	; 0x6d4 <USB_Host_ProcessNextHostState+0x46>
     6d2:	9e c0       	rjmp	.+316    	; 0x810 <USB_Host_ProcessNextHostState+0x182>
     6d4:	87 30       	cpi	r24, 0x07	; 7
     6d6:	08 f4       	brcc	.+2      	; 0x6da <USB_Host_ProcessNextHostState+0x4c>
     6d8:	8f c0       	rjmp	.+286    	; 0x7f8 <USB_Host_ProcessNextHostState+0x16a>
     6da:	88 30       	cpi	r24, 0x08	; 8
     6dc:	09 f4       	brne	.+2      	; 0x6e0 <USB_Host_ProcessNextHostState+0x52>
     6de:	b8 c0       	rjmp	.+368    	; 0x850 <USB_Host_ProcessNextHostState+0x1c2>
     6e0:	89 30       	cpi	r24, 0x09	; 9
     6e2:	09 f0       	breq	.+2      	; 0x6e6 <USB_Host_ProcessNextHostState+0x58>
     6e4:	f2 c0       	rjmp	.+484    	; 0x8ca <USB_Host_ProcessNextHostState+0x23c>
     6e6:	d9 c0       	rjmp	.+434    	; 0x89a <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     6e8:	00 91 44 01 	lds	r16, 0x0144
     6ec:	10 91 45 01 	lds	r17, 0x0145
     6f0:	01 15       	cp	r16, r1
     6f2:	11 05       	cpc	r17, r1
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <USB_Host_ProcessNextHostState+0x6a>
     6f6:	e9 c0       	rjmp	.+466    	; 0x8ca <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	74 df       	rcall	.-280    	; 0x5e4 <USB_Host_WaitMS>
     6fc:	68 2f       	mov	r22, r24
     6fe:	88 23       	and	r24, r24
     700:	31 f0       	breq	.+12     	; 0x70e <USB_Host_ProcessNextHostState+0x80>
     702:	80 91 46 01 	lds	r24, 0x0146
				{
					USB_HostState = PostWaitState;
     706:	80 93 51 01 	sts	0x0151, r24
     70a:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     70c:	d2 c0       	rjmp	.+420    	; 0x8b2 <USB_Host_ProcessNextHostState+0x224>
					break;
     70e:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
     710:	10 40       	sbci	r17, 0x00	; 0
     712:	10 93 45 01 	sts	0x0145, r17
     716:	00 93 44 01 	sts	0x0144, r16
     71a:	01 15       	cp	r16, r1
     71c:	11 05       	cpc	r17, r1
     71e:	09 f0       	breq	.+2      	; 0x722 <USB_Host_ProcessNextHostState+0x94>
     720:	d4 c0       	rjmp	.+424    	; 0x8ca <USB_Host_ProcessNextHostState+0x23c>
     722:	80 91 46 01 	lds	r24, 0x0146
				  USB_HostState = PostWaitState;
     726:	07 c0       	rjmp	.+14     	; 0x736 <USB_Host_ProcessNextHostState+0xa8>
     728:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     72a:	93 e0       	ldi	r25, 0x03	; 3
     72c:	90 93 45 01 	sts	0x0145, r25
     730:	80 93 44 01 	sts	0x0144, r24
     734:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     736:	80 93 51 01 	sts	0x0151, r24
     73a:	c7 c0       	rjmp	.+398    	; 0x8ca <USB_Host_ProcessNextHostState+0x23c>
			break;
     73c:	80 91 44 01 	lds	r24, 0x0144
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     740:	90 91 45 01 	lds	r25, 0x0145
     744:	9c 01       	movw	r18, r24
     746:	21 50       	subi	r18, 0x01	; 1
     748:	30 40       	sbci	r19, 0x00	; 0
     74a:	30 93 45 01 	sts	0x0145, r19
     74e:	20 93 44 01 	sts	0x0144, r18
     752:	00 97       	sbiw	r24, 0x00	; 0
     754:	39 f0       	breq	.+14     	; 0x764 <USB_Host_ProcessNextHostState+0xd6>
     756:	8f ec       	ldi	r24, 0xCF	; 207
     758:	97 e0       	ldi	r25, 0x07	; 7
     75a:	01 97       	sbiw	r24, 0x01	; 1
     75c:	f1 f7       	brne	.-4      	; 0x75a <USB_Host_ProcessNextHostState+0xcc>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <USB_Host_ProcessNextHostState+0xd2>
     760:	00 00       	nop
     762:	b3 c0       	rjmp	.+358    	; 0x8ca <USB_Host_ProcessNextHostState+0x23c>
     764:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     766:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     76a:	80 61       	ori	r24, 0x10	; 16
     76c:	80 93 d8 00 	sts	0x00D8, r24
     770:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     774:	8b 7f       	andi	r24, 0xFB	; 251
     776:	80 93 dd 00 	sts	0x00DD, r24
     77a:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     77e:	80 61       	ori	r24, 0x10	; 16
     780:	80 93 d7 00 	sts	0x00D7, r24
     784:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     788:	82 60       	ori	r24, 0x02	; 2
     78a:	80 93 dd 00 	sts	0x00DD, r24
     78e:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     790:	d2 cf       	rjmp	.-92     	; 0x736 <USB_Host_ProcessNextHostState+0xa8>
     792:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     796:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     798:	98 c0       	rjmp	.+304    	; 0x8ca <USB_Host_ProcessNextHostState+0x23c>
     79a:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     79e:	8e 7f       	andi	r24, 0xFE	; 254
     7a0:	80 93 9f 00 	sts	0x009F, r24
     7a4:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     7a8:	8d 7f       	andi	r24, 0xFD	; 253
     7aa:	80 93 9f 00 	sts	0x009F, r24
     7ae:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     7b2:	8d 7f       	andi	r24, 0xFD	; 253
     7b4:	80 93 df 00 	sts	0x00DF, r24
     7b8:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     7bc:	82 60       	ori	r24, 0x02	; 2
     7be:	80 93 de 00 	sts	0x00DE, r24
     7c2:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7c6:	81 60       	ori	r24, 0x01	; 1
     7c8:	80 93 9e 00 	sts	0x009E, r24
     7cc:	bd d1       	rcall	.+890    	; 0xb48 <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     7ce:	10 92 51 01 	sts	0x0151, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     7d2:	84 e6       	ldi	r24, 0x64	; 100
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	90 93 45 01 	sts	0x0145, r25
     7da:	80 93 44 01 	sts	0x0144, r24
     7de:	85 e0       	ldi	r24, 0x05	; 5
     7e0:	59 c0       	rjmp	.+178    	; 0x894 <USB_Host_ProcessNextHostState+0x206>
     7e2:	aa de       	rcall	.-684    	; 0x538 <USB_Host_ResetDevice>
     7e4:	10 92 51 01 	sts	0x0151, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     7e8:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	90 93 45 01 	sts	0x0145, r25
     7f0:	80 93 44 01 	sts	0x0144, r24
     7f4:	86 e0       	ldi	r24, 0x06	; 6
     7f6:	4e c0       	rjmp	.+156    	; 0x894 <USB_Host_ProcessNextHostState+0x206>
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     7fe:	20 e4       	ldi	r18, 0x40	; 64
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	01 e0       	ldi	r16, 0x01	; 1
     804:	1b d1       	rcall	.+566    	; 0xa3c <Pipe_ConfigurePipe>
     806:	88 23       	and	r24, r24
     808:	09 f4       	brne	.+2      	; 0x80c <USB_Host_ProcessNextHostState+0x17e>
     80a:	4f c0       	rjmp	.+158    	; 0x8aa <USB_Host_ProcessNextHostState+0x21c>
     80c:	87 e0       	ldi	r24, 0x07	; 7
     80e:	93 cf       	rjmp	.-218    	; 0x736 <USB_Host_ProcessNextHostState+0xa8>
     810:	a9 e4       	ldi	r26, 0x49	; 73
     812:	b1 e0       	ldi	r27, 0x01	; 1
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     814:	e9 e1       	ldi	r30, 0x19	; 25
     816:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     818:	88 e0       	ldi	r24, 0x08	; 8
     81a:	01 90       	ld	r0, Z+
     81c:	0d 92       	st	X+, r0
     81e:	81 50       	subi	r24, 0x01	; 1
     820:	e1 f7       	brne	.-8      	; 0x81a <USB_Host_ProcessNextHostState+0x18c>
     822:	10 92 a7 00 	sts	0x00A7, r1
     826:	ce 01       	movw	r24, r28
     828:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     82a:	cf d3       	rcall	.+1950   	; 0xfca <USB_Host_SendControlRequest>
     82c:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     82e:	88 23       	and	r24, r24
     830:	09 f0       	breq	.+2      	; 0x834 <USB_Host_ProcessNextHostState+0x1a6>
     832:	3e c0       	rjmp	.+124    	; 0x8b0 <USB_Host_ProcessNextHostState+0x222>
     834:	88 85       	ldd	r24, Y+8	; 0x08
     836:	80 93 29 01 	sts	0x0129, r24
     83a:	7e de       	rcall	.-772    	; 0x538 <USB_Host_ResetDevice>
     83c:	10 92 51 01 	sts	0x0151, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     840:	88 ec       	ldi	r24, 0xC8	; 200
     842:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
     844:	90 93 45 01 	sts	0x0145, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     848:	80 93 44 01 	sts	0x0144, r24
     84c:	88 e0       	ldi	r24, 0x08	; 8
     84e:	22 c0       	rjmp	.+68     	; 0x894 <USB_Host_ProcessNextHostState+0x206>
     850:	20 91 29 01 	lds	r18, 0x0129
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     85c:	01 e0       	ldi	r16, 0x01	; 1
     85e:	ee d0       	rcall	.+476    	; 0xa3c <Pipe_ConfigurePipe>
     860:	88 23       	and	r24, r24
     862:	19 f1       	breq	.+70     	; 0x8aa <USB_Host_ProcessNextHostState+0x21c>
     864:	a9 e4       	ldi	r26, 0x49	; 73
     866:	b1 e0       	ldi	r27, 0x01	; 1
     868:	e1 e2       	ldi	r30, 0x21	; 33
     86a:	f1 e0       	ldi	r31, 0x01	; 1
     86c:	88 e0       	ldi	r24, 0x08	; 8
     86e:	01 90       	ld	r0, Z+
     870:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     872:	81 50       	subi	r24, 0x01	; 1
     874:	e1 f7       	brne	.-8      	; 0x86e <USB_Host_ProcessNextHostState+0x1e0>
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	a7 d3       	rcall	.+1870   	; 0xfca <USB_Host_SendControlRequest>
     87c:	68 2f       	mov	r22, r24
     87e:	88 23       	and	r24, r24
     880:	b9 f4       	brne	.+46     	; 0x8b0 <USB_Host_ProcessNextHostState+0x222>
     882:	10 92 51 01 	sts	0x0151, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     886:	84 e6       	ldi	r24, 0x64	; 100
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	90 93 45 01 	sts	0x0145, r25
     88e:	80 93 44 01 	sts	0x0144, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     892:	89 e0       	ldi	r24, 0x09	; 9
     894:	80 93 46 01 	sts	0x0146, r24
     898:	18 c0       	rjmp	.+48     	; 0x8ca <USB_Host_ProcessNextHostState+0x23c>
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	80 93 a1 00 	sts	0x00A1, r24
     8a0:	8a e0       	ldi	r24, 0x0A	; 10
     8a2:	80 93 51 01 	sts	0x0151, r24
     8a6:	bc dd       	rcall	.-1160   	; 0x420 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     8a8:	10 c0       	rjmp	.+32     	; 0x8ca <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	84 e0       	ldi	r24, 0x04	; 4
     8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <USB_Host_ProcessNextHostState+0x224>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     8b0:	83 e0       	ldi	r24, 0x03	; 3
     8b2:	90 91 51 01 	lds	r25, 0x0151

			EVENT_USB_Host_DeviceEnumerationComplete();
     8b6:	91 30       	cpi	r25, 0x01	; 1
     8b8:	41 f0       	breq	.+16     	; 0x8ca <USB_Host_ProcessNextHostState+0x23c>
			break;
     8ba:	15 de       	rcall	.-982    	; 0x4e6 <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     8bc:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     8c0:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     8c2:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     8c6:	a6 dd       	rcall	.-1204   	; 0x414 <EVENT_USB_Host_DeviceUnattached>
     8c8:	bb d1       	rcall	.+886    	; 0xc40 <USB_ResetInterface>
     8ca:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     8cc:	0f b6       	in	r0, 0x3f	; 63
     8ce:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     8d0:	de bf       	out	0x3e, r29	; 62
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	cd bf       	out	0x3d, r28	; 61
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16

		USB_ResetInterface();
     8de:	08 95       	ret

000008e0 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     8e0:	af 92       	push	r10
     8e2:	bf 92       	push	r11
     8e4:	cf 92       	push	r12
     8e6:	df 92       	push	r13
     8e8:	ff 92       	push	r15
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	5c 01       	movw	r10, r24
     8f4:	eb 01       	movw	r28, r22
     8f6:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     8f8:	80 91 aa 00 	lds	r24, 0x00AA
     8fc:	8f 7c       	andi	r24, 0xCF	; 207
     8fe:	80 62       	ori	r24, 0x20	; 32
     900:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     904:	57 d1       	rcall	.+686    	; 0xbb4 <Pipe_WaitUntilReady>
     906:	f8 2e       	mov	r15, r24
     908:	88 23       	and	r24, r24
     90a:	b1 f5       	brne	.+108    	; 0x978 <Pipe_Write_Stream_LE+0x98>
     90c:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     90e:	d1 04       	cpc	r13, r1
     910:	41 f0       	breq	.+16     	; 0x922 <Pipe_Write_Stream_LE+0x42>
     912:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     914:	00 81       	ld	r16, Z
     916:	11 81       	ldd	r17, Z+1	; 0x01
     918:	c0 1b       	sub	r28, r16
     91a:	d1 0b       	sbc	r29, r17
     91c:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     91e:	1b 1d       	adc	r17, r11
     920:	01 c0       	rjmp	.+2      	; 0x924 <Pipe_Write_Stream_LE+0x44>
     922:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     924:	aa 24       	eor	r10, r10
     926:	bb 24       	eor	r11, r11
     928:	23 c0       	rjmp	.+70     	; 0x970 <Pipe_Write_Stream_LE+0x90>
     92a:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     92e:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     930:	16 c0       	rjmp	.+44     	; 0x95e <Pipe_Write_Stream_LE+0x7e>
     932:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     936:	8b 77       	andi	r24, 0x7B	; 123
     938:	80 93 a6 00 	sts	0x00A6, r24
     93c:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     93e:	d1 04       	cpc	r13, r1
     940:	51 f0       	breq	.+20     	; 0x956 <Pipe_Write_Stream_LE+0x76>
     942:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     944:	80 81       	ld	r24, Z
     946:	91 81       	ldd	r25, Z+1	; 0x01
     948:	8a 0d       	add	r24, r10
     94a:	9b 1d       	adc	r25, r11
     94c:	91 83       	std	Z+1, r25	; 0x01
     94e:	80 83       	st	Z, r24
     950:	44 e0       	ldi	r20, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     952:	f4 2e       	mov	r15, r20
     954:	11 c0       	rjmp	.+34     	; 0x978 <Pipe_Write_Stream_LE+0x98>
     956:	2e d1       	rcall	.+604    	; 0xbb4 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     958:	88 23       	and	r24, r24
     95a:	51 f0       	breq	.+20     	; 0x970 <Pipe_Write_Stream_LE+0x90>
     95c:	0c c0       	rjmp	.+24     	; 0x976 <Pipe_Write_Stream_LE+0x96>
     95e:	f8 01       	movw	r30, r16
     960:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     962:	8f 01       	movw	r16, r30
     964:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     968:	21 97       	sbiw	r28, 0x01	; 1
     96a:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     96c:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     96e:	b1 1c       	adc	r11, r1
     970:	20 97       	sbiw	r28, 0x00	; 0
     972:	d9 f6       	brne	.-74     	; 0x92a <Pipe_Write_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     974:	01 c0       	rjmp	.+2      	; 0x978 <Pipe_Write_Stream_LE+0x98>
     976:	f8 2e       	mov	r15, r24
     978:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     97a:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	ff 90       	pop	r15
     984:	df 90       	pop	r13
     986:	cf 90       	pop	r12
     988:	bf 90       	pop	r11
     98a:	af 90       	pop	r10
     98c:	08 95       	ret

0000098e <Pipe_Read_Stream_LE>:
     98e:	af 92       	push	r10
     990:	bf 92       	push	r11
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     992:	cf 92       	push	r12
     994:	df 92       	push	r13
     996:	ff 92       	push	r15
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	5c 01       	movw	r10, r24
     9a2:	eb 01       	movw	r28, r22
     9a4:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     9a6:	80 91 aa 00 	lds	r24, 0x00AA
     9aa:	8f 7c       	andi	r24, 0xCF	; 207
     9ac:	80 61       	ori	r24, 0x10	; 16
     9ae:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     9b2:	00 d1       	rcall	.+512    	; 0xbb4 <Pipe_WaitUntilReady>
     9b4:	f8 2e       	mov	r15, r24
     9b6:	88 23       	and	r24, r24
     9b8:	b1 f5       	brne	.+108    	; 0xa26 <Pipe_Read_Stream_LE+0x98>
     9ba:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     9bc:	d1 04       	cpc	r13, r1
     9be:	41 f0       	breq	.+16     	; 0x9d0 <Pipe_Read_Stream_LE+0x42>
     9c0:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     9c2:	00 81       	ld	r16, Z
     9c4:	11 81       	ldd	r17, Z+1	; 0x01
     9c6:	c0 1b       	sub	r28, r16
     9c8:	d1 0b       	sbc	r29, r17
     9ca:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     9cc:	1b 1d       	adc	r17, r11
     9ce:	01 c0       	rjmp	.+2      	; 0x9d2 <Pipe_Read_Stream_LE+0x44>
     9d0:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     9d2:	aa 24       	eor	r10, r10
     9d4:	bb 24       	eor	r11, r11
     9d6:	23 c0       	rjmp	.+70     	; 0xa1e <Pipe_Read_Stream_LE+0x90>
     9d8:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     9dc:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     9de:	16 c0       	rjmp	.+44     	; 0xa0c <Pipe_Read_Stream_LE+0x7e>
     9e0:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     9e4:	8e 77       	andi	r24, 0x7E	; 126
     9e6:	80 93 a6 00 	sts	0x00A6, r24
     9ea:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     9ec:	d1 04       	cpc	r13, r1
     9ee:	51 f0       	breq	.+20     	; 0xa04 <Pipe_Read_Stream_LE+0x76>
     9f0:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     9f2:	80 81       	ld	r24, Z
     9f4:	91 81       	ldd	r25, Z+1	; 0x01
     9f6:	8a 0d       	add	r24, r10
     9f8:	9b 1d       	adc	r25, r11
     9fa:	91 83       	std	Z+1, r25	; 0x01
     9fc:	80 83       	st	Z, r24
     9fe:	64 e0       	ldi	r22, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     a00:	f6 2e       	mov	r15, r22
     a02:	11 c0       	rjmp	.+34     	; 0xa26 <Pipe_Read_Stream_LE+0x98>
     a04:	d7 d0       	rcall	.+430    	; 0xbb4 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     a06:	88 23       	and	r24, r24
     a08:	51 f0       	breq	.+20     	; 0xa1e <Pipe_Read_Stream_LE+0x90>
     a0a:	0c c0       	rjmp	.+24     	; 0xa24 <Pipe_Read_Stream_LE+0x96>
     a0c:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     a10:	f8 01       	movw	r30, r16
     a12:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     a14:	8f 01       	movw	r16, r30
     a16:	21 97       	sbiw	r28, 0x01	; 1
     a18:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     a1a:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     a1c:	b1 1c       	adc	r11, r1
     a1e:	20 97       	sbiw	r28, 0x00	; 0
     a20:	d9 f6       	brne	.-74     	; 0x9d8 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     a22:	01 c0       	rjmp	.+2      	; 0xa26 <Pipe_Read_Stream_LE+0x98>
     a24:	f8 2e       	mov	r15, r24
     a26:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     a28:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	ff 90       	pop	r15
     a32:	df 90       	pop	r13
     a34:	cf 90       	pop	r12
     a36:	bf 90       	pop	r11
     a38:	af 90       	pop	r10
     a3a:	08 95       	ret

00000a3c <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     a3c:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     a3e:	58 2f       	mov	r21, r24
     a40:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     a42:	87 ff       	sbrs	r24, 7
     a44:	02 c0       	rjmp	.+4      	; 0xa4a <Pipe_ConfigurePipe+0xe>
     a46:	80 e1       	ldi	r24, 0x10	; 16
     a48:	01 c0       	rjmp	.+2      	; 0xa4c <Pipe_ConfigurePipe+0x10>
     a4a:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     a4c:	57 30       	cpi	r21, 0x07	; 7
     a4e:	08 f0       	brcs	.+2      	; 0xa52 <Pipe_ConfigurePipe+0x16>
     a50:	57 c0       	rjmp	.+174    	; 0xb00 <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     a52:	66 23       	and	r22, r22
     a54:	09 f4       	brne	.+2      	; 0xa58 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     a56:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     a58:	4f 70       	andi	r20, 0x0F	; 15
     a5a:	62 95       	swap	r22
     a5c:	66 0f       	add	r22, r22
     a5e:	66 0f       	add	r22, r22
     a60:	60 7c       	andi	r22, 0xC0	; 192
     a62:	64 2b       	or	r22, r20
     a64:	68 2b       	or	r22, r24
     a66:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     a68:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a6a:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     a6e:	45 17       	cp	r20, r21
     a70:	a9 f4       	brne	.+42     	; 0xa9c <Pipe_ConfigurePipe+0x60>
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     a74:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     a76:	88 0f       	add	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	03 c0       	rjmp	.+6      	; 0xa82 <Pipe_ConfigurePipe+0x46>
     a7c:	88 e0       	ldi	r24, 0x08	; 8
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     a82:	82 17       	cp	r24, r18
     a84:	93 07       	cpc	r25, r19
     a86:	10 f4       	brcc	.+4      	; 0xa8c <Pipe_ConfigurePipe+0x50>
     a88:	75 30       	cpi	r23, 0x05	; 5
     a8a:	a1 f7       	brne	.-24     	; 0xa74 <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     a8c:	87 2f       	mov	r24, r23
     a8e:	82 95       	swap	r24
     a90:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     a92:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     a94:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     a96:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     a98:	e0 e0       	ldi	r30, 0x00	; 0
     a9a:	08 c0       	rjmp	.+16     	; 0xaac <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     a9c:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     aa0:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     aa4:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     aa8:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     aac:	81 ff       	sbrs	r24, 1
     aae:	20 c0       	rjmp	.+64     	; 0xaf0 <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     ab0:	90 91 a9 00 	lds	r25, 0x00A9
     ab4:	9e 7f       	andi	r25, 0xFE	; 254
     ab6:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     aba:	90 91 ab 00 	lds	r25, 0x00AB
     abe:	9d 7f       	andi	r25, 0xFD	; 253
     ac0:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     ac4:	90 91 a9 00 	lds	r25, 0x00A9
     ac8:	91 60       	ori	r25, 0x01	; 1
     aca:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     ace:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     ad2:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     ad6:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     ada:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     ade:	80 91 a9 00 	lds	r24, 0x00A9
     ae2:	80 62       	ori	r24, 0x20	; 32
     ae4:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     ae8:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     aec:	87 ff       	sbrs	r24, 7
     aee:	08 c0       	rjmp	.+16     	; 0xb00 <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     af0:	4f 5f       	subi	r20, 0xFF	; 255
     af2:	47 30       	cpi	r20, 0x07	; 7
     af4:	09 f0       	breq	.+2      	; 0xaf8 <Pipe_ConfigurePipe+0xbc>
     af6:	b9 cf       	rjmp	.-142    	; 0xa6a <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     af8:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	01 c0       	rjmp	.+2      	; 0xb02 <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     b00:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     b02:	0f 91       	pop	r16
     b04:	08 95       	ret

00000b06 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
     b12:	ec 01       	movw	r28, r24
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     b14:	ff 24       	eor	r15, r15
     b16:	0d c0       	rjmp	.+26     	; 0xb32 <Pipe_ConfigurePipeTable+0x2c>
	{
		if (!(Table[i].Address))
     b18:	88 81       	ld	r24, Y
     b1a:	88 23       	and	r24, r24
     b1c:	41 f0       	breq	.+16     	; 0xb2e <Pipe_ConfigurePipeTable+0x28>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     b1e:	29 81       	ldd	r18, Y+1	; 0x01
     b20:	3a 81       	ldd	r19, Y+2	; 0x02
     b22:	6c 81       	ldd	r22, Y+4	; 0x04
     b24:	4b 81       	ldd	r20, Y+3	; 0x03
     b26:	0d 81       	ldd	r16, Y+5	; 0x05
     b28:	89 df       	rcall	.-238    	; 0xa3c <Pipe_ConfigurePipe>
     b2a:	88 23       	and	r24, r24
     b2c:	31 f0       	breq	.+12     	; 0xb3a <Pipe_ConfigurePipeTable+0x34>
     b2e:	f3 94       	inc	r15
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     b30:	26 96       	adiw	r28, 0x06	; 6
     b32:	f1 16       	cp	r15, r17
     b34:	89 f7       	brne	.-30     	; 0xb18 <Pipe_ConfigurePipeTable+0x12>
     b36:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}
	
	return true;
     b38:	01 c0       	rjmp	.+2      	; 0xb3c <Pipe_ConfigurePipeTable+0x36>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
     b3c:	df 91       	pop	r29
		}
	}
	
	return true;
}
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	ff 90       	pop	r15
     b46:	08 95       	ret

00000b48 <Pipe_ClearPipes>:
     b48:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     b52:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     b56:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     b5a:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b5e:	90 91 a9 00 	lds	r25, 0x00A9
     b62:	9e 7f       	andi	r25, 0xFE	; 254
     b64:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b68:	8f 5f       	subi	r24, 0xFF	; 255
     b6a:	87 30       	cpi	r24, 0x07	; 7
     b6c:	81 f7       	brne	.-32     	; 0xb4e <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     b6e:	08 95       	ret

00000b70 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     b70:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     b74:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b78:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b7a:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     b7e:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     b82:	27 ff       	sbrs	r18, 7
     b84:	0c c0       	rjmp	.+24     	; 0xb9e <Pipe_IsEndpointBound+0x2e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     b86:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     b8a:	53 2f       	mov	r21, r19
     b8c:	5f 70       	andi	r21, 0x0F	; 15
     b8e:	30 ff       	sbrs	r19, 0
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <Pipe_IsEndpointBound+0x26>
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <Pipe_IsEndpointBound+0x28>
     b96:	20 e8       	ldi	r18, 0x80	; 128
     b98:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     b9a:	28 17       	cp	r18, r24
     b9c:	49 f0       	breq	.+18     	; 0xbb0 <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b9e:	9f 5f       	subi	r25, 0xFF	; 255
     ba0:	97 30       	cpi	r25, 0x07	; 7
     ba2:	59 f7       	brne	.-42     	; 0xb7a <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ba4:	84 2f       	mov	r24, r20
     ba6:	8f 70       	andi	r24, 0x0F	; 15
     ba8:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     bb2:	08 95       	ret

00000bb4 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     bb4:	80 91 a2 00 	lds	r24, 0x00A2
     bb8:	90 91 a3 00 	lds	r25, 0x00A3
     bbc:	45 e6       	ldi	r20, 0x65	; 101
     bbe:	01 c0       	rjmp	.+2      	; 0xbc2 <Pipe_WaitUntilReady+0xe>
     bc0:	c9 01       	movw	r24, r18
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     bc2:	20 91 aa 00 	lds	r18, 0x00AA
     bc6:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     bc8:	20 31       	cpi	r18, 0x10	; 16
     bca:	29 f4       	brne	.+10     	; 0xbd6 <Pipe_WaitUntilReady+0x22>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     bcc:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     bd0:	20 ff       	sbrs	r18, 0
     bd2:	05 c0       	rjmp	.+10     	; 0xbde <Pipe_WaitUntilReady+0x2a>
     bd4:	17 c0       	rjmp	.+46     	; 0xc04 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     bd6:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     bda:	22 fd       	sbrc	r18, 2
     bdc:	13 c0       	rjmp	.+38     	; 0xc04 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     bde:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     be2:	21 fd       	sbrc	r18, 1
     be4:	11 c0       	rjmp	.+34     	; 0xc08 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     be6:	20 91 51 01 	lds	r18, 0x0151
     bea:	21 30       	cpi	r18, 0x01	; 1
     bec:	79 f0       	breq	.+30     	; 0xc0c <Pipe_WaitUntilReady+0x58>
     bee:	20 91 a2 00 	lds	r18, 0x00A2
     bf2:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     bf6:	28 17       	cp	r18, r24
     bf8:	39 07       	cpc	r19, r25
     bfa:	19 f3       	breq	.-58     	; 0xbc2 <Pipe_WaitUntilReady+0xe>
     bfc:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     bfe:	01 f7       	brne	.-64     	; 0xbc0 <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_Timeout;
     c00:	83 e0       	ldi	r24, 0x03	; 3
     c02:	08 95       	ret
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     c0c:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     c0e:	08 95       	ret

00000c10 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     c10:	75 d0       	rcall	.+234    	; 0xcfc <USB_INT_DisableAllInterrupts>
     c12:	7c d0       	rcall	.+248    	; 0xd0c <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c14:	e0 ee       	ldi	r30, 0xE0	; 224
     c16:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     c18:	80 81       	ld	r24, Z
     c1a:	81 60       	ori	r24, 0x01	; 1
     c1c:	80 83       	st	Z, r24
     c1e:	e8 ed       	ldi	r30, 0xD8	; 216
     c20:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     c22:	80 81       	ld	r24, Z
     c24:	8f 77       	andi	r24, 0x7F	; 127
     c26:	80 83       	st	Z, r24
     c28:	19 bc       	out	0x29, r1	; 41
     c2a:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c2c:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     c2e:	8c 91       	ld	r24, X
     c30:	8e 7f       	andi	r24, 0xFE	; 254
     c32:	8c 93       	st	X, r24
     c34:	80 81       	ld	r24, Z
     c36:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     c38:	80 83       	st	Z, r24
     c3a:	10 92 48 01 	sts	0x0148, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     c3e:	08 95       	ret

00000c40 <USB_ResetInterface>:
     c40:	5d d0       	rcall	.+186    	; 0xcfc <USB_INT_DisableAllInterrupts>
}
     c42:	64 d0       	rcall	.+200    	; 0xd0c <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     c44:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     c48:	8f 77       	andi	r24, 0x7F	; 127
     c4a:	80 93 d8 00 	sts	0x00D8, r24
     c4e:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     c52:	80 68       	ori	r24, 0x80	; 128
     c54:	80 93 d8 00 	sts	0x00D8, r24
     c58:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     c5c:	8f 7d       	andi	r24, 0xDF	; 223
     c5e:	80 93 d8 00 	sts	0x00D8, r24
     c62:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	80 93 d7 00 	sts	0x00D7, r24
     c6c:	8c e0       	ldi	r24, 0x0C	; 12
     c6e:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c70:	8e e0       	ldi	r24, 0x0E	; 14
     c72:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c74:	09 b4       	in	r0, 0x29	; 41
     c76:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     c78:	fd cf       	rjmp	.-6      	; 0xc74 <USB_ResetInterface+0x34>
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	80 93 51 01 	sts	0x0151, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     c80:	10 92 47 01 	sts	0x0147, r1
	USB_Host_ConfigurationNumber = 0;
     c84:	80 e4       	ldi	r24, 0x40	; 64
     c86:	80 93 29 01 	sts	0x0129, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c8a:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c8e:	80 64       	ori	r24, 0x40	; 64
     c90:	80 93 d8 00 	sts	0x00D8, r24
     c94:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c98:	81 60       	ori	r24, 0x01	; 1
     c9a:	80 93 dd 00 	sts	0x00DD, r24
     c9e:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     ca2:	84 60       	ori	r24, 0x04	; 4
     ca4:	80 93 dd 00 	sts	0x00DD, r24
     ca8:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     cac:	8f 7e       	andi	r24, 0xEF	; 239
     cae:	80 93 d7 00 	sts	0x00D7, r24
     cb2:	6f 9a       	sbi	0x0d, 7	; 13
     cb4:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     cb6:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     cba:	81 60       	ori	r24, 0x01	; 1
     cbc:	80 93 de 00 	sts	0x00DE, r24
     cc0:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     cc4:	84 60       	ori	r24, 0x04	; 4
     cc6:	80 93 de 00 	sts	0x00DE, r24
     cca:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     cce:	8e 7f       	andi	r24, 0xFE	; 254
     cd0:	80 93 e0 00 	sts	0x00E0, r24
     cd4:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     cd8:	80 61       	ori	r24, 0x10	; 16
     cda:	80 93 d8 00 	sts	0x00D8, r24
     cde:	08 95       	ret

00000ce0 <USB_Init>:
     ce0:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     ce4:	80 81       	ld	r24, Z
     ce6:	8f 7e       	andi	r24, 0xEF	; 239
     ce8:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     cea:	e7 ed       	ldi	r30, 0xD7	; 215
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	81 60       	ori	r24, 0x01	; 1
     cf2:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	80 93 48 01 	sts	0x0148, r24

	USB_ResetInterface();
     cfa:	a2 cf       	rjmp	.-188    	; 0xc40 <USB_ResetInterface>

00000cfc <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     cfc:	e8 ed       	ldi	r30, 0xD8	; 216
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	8c 7f       	andi	r24, 0xFC	; 252
     d04:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     d06:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     d0a:	08 95       	ret

00000d0c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     d0c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     d10:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     d14:	08 95       	ret

00000d16 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     d16:	1f 92       	push	r1
     d18:	0f 92       	push	r0
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	0f 92       	push	r0
     d1e:	0b b6       	in	r0, 0x3b	; 59
     d20:	0f 92       	push	r0
     d22:	11 24       	eor	r1, r1
     d24:	2f 93       	push	r18
     d26:	3f 93       	push	r19
     d28:	4f 93       	push	r20
     d2a:	5f 93       	push	r21
     d2c:	6f 93       	push	r22
     d2e:	7f 93       	push	r23
     d30:	8f 93       	push	r24
     d32:	9f 93       	push	r25
     d34:	af 93       	push	r26
     d36:	bf 93       	push	r27
     d38:	ef 93       	push	r30
     d3a:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     d3c:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     d40:	85 ff       	sbrs	r24, 5
     d42:	0a c0       	rjmp	.+20     	; 0xd58 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     d44:	80 91 a0 00 	lds	r24, 0x00A0
     d48:	85 ff       	sbrs	r24, 5
     d4a:	06 c0       	rjmp	.+12     	; 0xd58 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     d4c:	80 91 9f 00 	lds	r24, 0x009F
     d50:	8f 7d       	andi	r24, 0xDF	; 223
     d52:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     d56:	10 d1       	rcall	.+544    	; 0xf78 <USB_Event_Stub>
     d58:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     d5c:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     d5e:	15 c0       	rjmp	.+42     	; 0xd8a <__vector_10+0x74>
     d60:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     d64:	81 ff       	sbrs	r24, 1
     d66:	11 c0       	rjmp	.+34     	; 0xd8a <__vector_10+0x74>
     d68:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     d6c:	8d 7f       	andi	r24, 0xFD	; 253
     d6e:	80 93 9f 00 	sts	0x009F, r24
     d72:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     d76:	8e 7f       	andi	r24, 0xFE	; 254
     d78:	80 93 9f 00 	sts	0x009F, r24
     d7c:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     d80:	8d 7f       	andi	r24, 0xFD	; 253
     d82:	80 93 a0 00 	sts	0x00A0, r24
     d86:	46 db       	rcall	.-2420   	; 0x414 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     d88:	5b df       	rcall	.-330    	; 0xc40 <USB_ResetInterface>
     d8a:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     d8e:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     d90:	15 c0       	rjmp	.+42     	; 0xdbc <__vector_10+0xa6>
     d92:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d96:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     d98:	11 c0       	rjmp	.+34     	; 0xdbc <__vector_10+0xa6>
     d9a:	80 91 df 00 	lds	r24, 0x00DF
     d9e:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     da0:	80 93 df 00 	sts	0x00DF, r24
     da4:	77 98       	cbi	0x0e, 7	; 14
     da6:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     daa:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     dac:	80 93 dd 00 	sts	0x00DD, r24
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	79 db       	rcall	.-2318   	; 0x4a6 <EVENT_USB_Host_HostError>
     db4:	2f db       	rcall	.-2466   	; 0x414 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	80 93 51 01 	sts	0x0151, r24
		EVENT_USB_Host_DeviceUnattached();
     dbc:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     dc0:	80 ff       	sbrs	r24, 0
     dc2:	17 c0       	rjmp	.+46     	; 0xdf2 <__vector_10+0xdc>
     dc4:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     dc8:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     dca:	13 c0       	rjmp	.+38     	; 0xdf2 <__vector_10+0xdc>
     dcc:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     dd0:	8e 7f       	andi	r24, 0xFE	; 254
     dd2:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     dd6:	80 91 de 00 	lds	r24, 0x00DE
     dda:	8e 7f       	andi	r24, 0xFE	; 254
     ddc:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     de0:	13 db       	rcall	.-2522   	; 0x408 <EVENT_USB_Host_DeviceAttached>
     de2:	80 91 a0 00 	lds	r24, 0x00A0
     de6:	82 60       	ori	r24, 0x02	; 2
     de8:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     dec:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     dee:	80 93 51 01 	sts	0x0151, r24
     df2:	80 91 df 00 	lds	r24, 0x00DF
     df6:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     df8:	0e c0       	rjmp	.+28     	; 0xe16 <__vector_10+0x100>
     dfa:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     dfe:	82 ff       	sbrs	r24, 2
     e00:	0a c0       	rjmp	.+20     	; 0xe16 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     e02:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     e06:	8b 7f       	andi	r24, 0xFB	; 251
     e08:	80 93 df 00 	sts	0x00DF, r24
     e0c:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	6a db       	rcall	.-2348   	; 0x4e6 <EVENT_USB_Host_DeviceEnumerationFailed>
     e12:	00 db       	rcall	.-2560   	; 0x414 <EVENT_USB_Host_DeviceUnattached>
     e14:	15 df       	rcall	.-470    	; 0xc40 <USB_ResetInterface>
     e16:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     e18:	ef 91       	pop	r30
     e1a:	bf 91       	pop	r27
     e1c:	af 91       	pop	r26
     e1e:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     e20:	8f 91       	pop	r24
     e22:	7f 91       	pop	r23

		USB_ResetInterface();
     e24:	6f 91       	pop	r22
     e26:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     e28:	4f 91       	pop	r20
     e2a:	3f 91       	pop	r19
     e2c:	2f 91       	pop	r18
     e2e:	0f 90       	pop	r0
     e30:	0b be       	out	0x3b, r0	; 59
     e32:	0f 90       	pop	r0
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	0f 90       	pop	r0
     e38:	1f 90       	pop	r1
     e3a:	18 95       	reti

00000e3c <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     e3c:	cf 92       	push	r12
     e3e:	df 92       	push	r13
     e40:	ef 92       	push	r14
     e42:	ff 92       	push	r15
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	29 97       	sbiw	r28, 0x09	; 9
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	6b 01       	movw	r12, r22
     e5e:	8a 01       	movw	r16, r20
     e60:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e62:	90 e8       	ldi	r25, 0x80	; 128
     e64:	90 93 49 01 	sts	0x0149, r25
     e68:	96 e0       	ldi	r25, 0x06	; 6
     e6a:	90 93 4a 01 	sts	0x014A, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	01 97       	sbiw	r24, 0x01	; 1
     e72:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e74:	90 93 4c 01 	sts	0x014C, r25
     e78:	80 93 4b 01 	sts	0x014B, r24
     e7c:	10 92 4e 01 	sts	0x014E, r1
     e80:	10 92 4d 01 	sts	0x014D, r1
     e84:	89 e0       	ldi	r24, 0x09	; 9
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	90 93 50 01 	sts	0x0150, r25
     e8c:	80 93 4f 01 	sts	0x014F, r24
     e90:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     e94:	ce 01       	movw	r24, r28
     e96:	01 96       	adiw	r24, 0x01	; 1
     e98:	98 d0       	rcall	.+304    	; 0xfca <USB_Host_SendControlRequest>
     e9a:	88 23       	and	r24, r24
     e9c:	b9 f4       	brne	.+46     	; 0xecc <USB_Host_GetDeviceConfigDescriptor+0x90>
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     ea0:	9c 81       	ldd	r25, Y+4	; 0x04
     ea2:	f6 01       	movw	r30, r12
     ea4:	91 83       	std	Z+1, r25	; 0x01
     ea6:	80 83       	st	Z, r24
     ea8:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
     eaa:	f9 06       	cpc	r15, r25
     eac:	70 f0       	brcs	.+28     	; 0xeca <USB_Host_GetDeviceConfigDescriptor+0x8e>
     eae:	90 93 50 01 	sts	0x0150, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     eb2:	80 93 4f 01 	sts	0x014F, r24
     eb6:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     eb8:	88 d0       	rcall	.+272    	; 0xfca <USB_Host_SendControlRequest>
     eba:	88 23       	and	r24, r24
     ebc:	39 f4       	brne	.+14     	; 0xecc <USB_Host_GetDeviceConfigDescriptor+0x90>
     ebe:	f8 01       	movw	r30, r16
     ec0:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     ec2:	92 30       	cpi	r25, 0x02	; 2
     ec4:	19 f0       	breq	.+6      	; 0xecc <USB_Host_GetDeviceConfigDescriptor+0x90>
     ec6:	86 e0       	ldi	r24, 0x06	; 6
     ec8:	01 c0       	rjmp	.+2      	; 0xecc <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     eca:	85 e0       	ldi	r24, 0x05	; 5
     ecc:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     ece:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	ff 90       	pop	r15
     ee2:	ef 90       	pop	r14
     ee4:	df 90       	pop	r13
     ee6:	cf 90       	pop	r12
     ee8:	08 95       	ret

00000eea <USB_GetNextDescriptorComp>:
     eea:	af 92       	push	r10
     eec:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     eee:	cf 92       	push	r12
     ef0:	df 92       	push	r13
     ef2:	ef 92       	push	r14
     ef4:	ff 92       	push	r15
     ef6:	0f 93       	push	r16
     ef8:	1f 93       	push	r17
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	7c 01       	movw	r14, r24
     f00:	8b 01       	movw	r16, r22
     f02:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     f04:	28 c0       	rjmp	.+80     	; 0xf56 <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     f06:	f8 01       	movw	r30, r16
     f08:	c0 80       	ld	r12, Z
     f0a:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     f0c:	f6 01       	movw	r30, r12
     f0e:	80 81       	ld	r24, Z
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	9e 01       	movw	r18, r28
     f14:	8c 17       	cp	r24, r28
     f16:	9d 07       	cpc	r25, r29
     f18:	08 f4       	brcc	.+2      	; 0xf1c <USB_GetNextDescriptorComp+0x32>
     f1a:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     f1c:	c6 01       	movw	r24, r12
     f1e:	82 0f       	add	r24, r18
     f20:	93 1f       	adc	r25, r19
     f22:	f8 01       	movw	r30, r16
     f24:	91 83       	std	Z+1, r25	; 0x01
     f26:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
     f28:	f7 01       	movw	r30, r14
     f2a:	80 81       	ld	r24, Z
     f2c:	91 81       	ldd	r25, Z+1	; 0x01
     f2e:	82 1b       	sub	r24, r18
     f30:	93 0b       	sbc	r25, r19
     f32:	91 83       	std	Z+1, r25	; 0x01
     f34:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     f36:	f8 01       	movw	r30, r16
     f38:	80 81       	ld	r24, Z
     f3a:	91 81       	ldd	r25, Z+1	; 0x01
     f3c:	f5 01       	movw	r30, r10
     f3e:	09 95       	icall
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	49 f0       	breq	.+18     	; 0xf56 <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     f44:	81 30       	cpi	r24, 0x01	; 1
     f46:	69 f4       	brne	.+26     	; 0xf62 <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
     f48:	f8 01       	movw	r30, r16
     f4a:	d1 82       	std	Z+1, r13	; 0x01
     f4c:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
     f4e:	f7 01       	movw	r30, r14
     f50:	d1 83       	std	Z+1, r29	; 0x01
     f52:	c0 83       	st	Z, r28
     f54:	06 c0       	rjmp	.+12     	; 0xf62 <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     f56:	f7 01       	movw	r30, r14
     f58:	c0 81       	ld	r28, Z
     f5a:	d1 81       	ldd	r29, Z+1	; 0x01
     f5c:	20 97       	sbiw	r28, 0x00	; 0
     f5e:	99 f6       	brne	.-90     	; 0xf06 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     f60:	82 e0       	ldi	r24, 0x02	; 2
}
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	1f 91       	pop	r17
     f68:	0f 91       	pop	r16
     f6a:	ff 90       	pop	r15
     f6c:	ef 90       	pop	r14
     f6e:	df 90       	pop	r13
     f70:	cf 90       	pop	r12
     f72:	bf 90       	pop	r11
     f74:	af 90       	pop	r10
     f76:	08 95       	ret

00000f78 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     f78:	08 95       	ret

00000f7a <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     f7a:	1f 93       	push	r17
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f82:	c9 ee       	ldi	r28, 0xE9	; 233
     f84:	d3 e0       	ldi	r29, 0x03	; 3
     f86:	06 c0       	rjmp	.+12     	; 0xf94 <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	2c db       	rcall	.-2472   	; 0x5e4 <USB_Host_WaitMS>
     f8c:	88 23       	and	r24, r24
     f8e:	c9 f4       	brne	.+50     	; 0xfc2 <USB_Host_WaitForIOS+0x48>
     f90:	21 97       	sbiw	r28, 0x01	; 1
     f92:	b1 f0       	breq	.+44     	; 0xfc0 <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f94:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f96:	29 f4       	brne	.+10     	; 0xfa2 <USB_Host_WaitForIOS+0x28>
     f98:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f9c:	83 ff       	sbrs	r24, 3
     f9e:	f4 cf       	rjmp	.-24     	; 0xf88 <USB_Host_WaitForIOS+0xe>
     fa0:	0d c0       	rjmp	.+26     	; 0xfbc <USB_Host_WaitForIOS+0x42>
     fa2:	11 30       	cpi	r17, 0x01	; 1
     fa4:	29 f4       	brne	.+10     	; 0xfb0 <USB_Host_WaitForIOS+0x36>
     fa6:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     faa:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     fac:	ed cf       	rjmp	.-38     	; 0xf88 <USB_Host_WaitForIOS+0xe>
     fae:	06 c0       	rjmp	.+12     	; 0xfbc <USB_Host_WaitForIOS+0x42>
     fb0:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     fb2:	51 f7       	brne	.-44     	; 0xf88 <USB_Host_WaitForIOS+0xe>
     fb4:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     fb8:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     fba:	e6 cf       	rjmp	.-52     	; 0xf88 <USB_Host_WaitForIOS+0xe>
     fbc:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     fbe:	01 c0       	rjmp	.+2      	; 0xfc2 <USB_Host_WaitForIOS+0x48>
     fc0:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     fc2:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
     fc4:	cf 91       	pop	r28
     fc6:	1f 91       	pop	r17
     fc8:	08 95       	ret

00000fca <USB_Host_SendControlRequest>:
     fca:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     fcc:	ff 92       	push	r15
     fce:	0f 93       	push	r16
     fd0:	1f 93       	push	r17
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     fd8:	e0 90 9e 00 	lds	r14, 0x009E
     fdc:	ff 24       	eor	r15, r15
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	e8 22       	and	r14, r24
     fe2:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     fe4:	00 91 4f 01 	lds	r16, 0x014F
     fe8:	10 91 50 01 	lds	r17, 0x0150
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     fec:	80 91 9e 00 	lds	r24, 0x009E
     ff0:	81 60       	ori	r24, 0x01	; 1
     ff2:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	f5 da       	rcall	.-2582   	; 0x5e4 <USB_Host_WaitMS>
     ffa:	88 23       	and	r24, r24
     ffc:	09 f0       	breq	.+2      	; 0x1000 <USB_Host_SendControlRequest+0x36>
     ffe:	ca c0       	rjmp	.+404    	; 0x1194 <USB_Host_SendControlRequest+0x1ca>
    1000:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1004:	8f 7c       	andi	r24, 0xCF	; 207
    1006:	80 93 aa 00 	sts	0x00AA, r24
    100a:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    100e:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    1012:	8f 7e       	andi	r24, 0xEF	; 239
    1014:	80 93 a6 00 	sts	0x00A6, r24
    1018:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    101c:	8f 7b       	andi	r24, 0xBF	; 191
    101e:	80 93 a9 00 	sts	0x00A9, r24
    1022:	88 e0       	ldi	r24, 0x08	; 8
    1024:	e9 e4       	ldi	r30, 0x49	; 73
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1026:	f1 e0       	ldi	r31, 0x01	; 1
    1028:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    102a:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    102e:	81 50       	subi	r24, 0x01	; 1
    1030:	d9 f7       	brne	.-10     	; 0x1028 <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1032:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1036:	87 77       	andi	r24, 0x77	; 119
    1038:	80 93 a6 00 	sts	0x00A6, r24
    103c:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    103e:	9d df       	rcall	.-198    	; 0xf7a <USB_Host_WaitForIOS>
    1040:	88 23       	and	r24, r24
    1042:	09 f0       	breq	.+2      	; 0x1046 <USB_Host_SendControlRequest+0x7c>
    1044:	a7 c0       	rjmp	.+334    	; 0x1194 <USB_Host_SendControlRequest+0x1ca>
    1046:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    104a:	80 64       	ori	r24, 0x40	; 64
    104c:	80 93 a9 00 	sts	0x00A9, r24
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	c8 da       	rcall	.-2672   	; 0x5e4 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1054:	88 23       	and	r24, r24
    1056:	09 f0       	breq	.+2      	; 0x105a <USB_Host_SendControlRequest+0x90>
    1058:	9d c0       	rjmp	.+314    	; 0x1194 <USB_Host_SendControlRequest+0x1ca>
    105a:	80 91 49 01 	lds	r24, 0x0149
    105e:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1060:	4f c0       	rjmp	.+158    	; 0x1100 <USB_Host_SendControlRequest+0x136>
    1062:	80 91 aa 00 	lds	r24, 0x00AA
    1066:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1068:	80 61       	ori	r24, 0x10	; 16
    106a:	80 93 aa 00 	sts	0x00AA, r24
    106e:	20 97       	sbiw	r28, 0x00	; 0
    1070:	61 f5       	brne	.+88     	; 0x10ca <USB_Host_SendControlRequest+0x100>
    1072:	2e c0       	rjmp	.+92     	; 0x10d0 <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1074:	80 91 a9 00 	lds	r24, 0x00A9
    1078:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    107a:	80 93 a9 00 	sts	0x00A9, r24
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	7c df       	rcall	.-264    	; 0xf7a <USB_Host_WaitForIOS>
    1082:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1084:	09 f0       	breq	.+2      	; 0x1088 <USB_Host_SendControlRequest+0xbe>
    1086:	86 c0       	rjmp	.+268    	; 0x1194 <USB_Host_SendControlRequest+0x1ca>
    1088:	80 91 f6 00 	lds	r24, 0x00F6
    108c:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	41 f4       	brne	.+16     	; 0x10a4 <USB_Host_SendControlRequest+0xda>
    1094:	00 e0       	ldi	r16, 0x00	; 0
    1096:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1098:	05 c0       	rjmp	.+10     	; 0x10a4 <USB_Host_SendControlRequest+0xda>
    109a:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
    109e:	89 93       	st	Y+, r24
    10a0:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    10a2:	10 40       	sbci	r17, 0x00	; 0
    10a4:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
    10a8:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	19 f0       	breq	.+6      	; 0x10b6 <USB_Host_SendControlRequest+0xec>
    10b0:	01 15       	cp	r16, r1
    10b2:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    10b4:	91 f7       	brne	.-28     	; 0x109a <USB_Host_SendControlRequest+0xd0>
    10b6:	80 91 a9 00 	lds	r24, 0x00A9
    10ba:	80 64       	ori	r24, 0x40	; 64
    10bc:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10c0:	80 91 a6 00 	lds	r24, 0x00A6
    10c4:	8e 77       	andi	r24, 0x7E	; 126
    10c6:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10ca:	01 15       	cp	r16, r1
    10cc:	11 05       	cpc	r17, r1
    10ce:	91 f6       	brne	.-92     	; 0x1074 <USB_Host_SendControlRequest+0xaa>
    10d0:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    10d4:	8f 7c       	andi	r24, 0xCF	; 207
    10d6:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10d8:	80 93 aa 00 	sts	0x00AA, r24
    10dc:	80 91 a9 00 	lds	r24, 0x00A9
    10e0:	8f 7b       	andi	r24, 0xBF	; 191
    10e2:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10e6:	82 e0       	ldi	r24, 0x02	; 2
    10e8:	48 df       	rcall	.-368    	; 0xf7a <USB_Host_WaitForIOS>
    10ea:	88 23       	and	r24, r24
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10ee:	52 c0       	rjmp	.+164    	; 0x1194 <USB_Host_SendControlRequest+0x1ca>
    10f0:	80 91 a6 00 	lds	r24, 0x00A6
    10f4:	8b 77       	andi	r24, 0x7B	; 123
    10f6:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10fa:	82 e0       	ldi	r24, 0x02	; 2
    10fc:	3e df       	rcall	.-388    	; 0xf7a <USB_Host_WaitForIOS>
    10fe:	4a c0       	rjmp	.+148    	; 0x1194 <USB_Host_SendControlRequest+0x1ca>
    1100:	20 97       	sbiw	r28, 0x00	; 0
    1102:	a1 f1       	breq	.+104    	; 0x116c <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1104:	80 91 aa 00 	lds	r24, 0x00AA
    1108:	8f 7c       	andi	r24, 0xCF	; 207
    110a:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    110c:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1110:	80 91 a9 00 	lds	r24, 0x00A9
    1114:	8f 7b       	andi	r24, 0xBF	; 191
    1116:	80 93 a9 00 	sts	0x00A9, r24
    111a:	1c c0       	rjmp	.+56     	; 0x1154 <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    111c:	2e df       	rcall	.-420    	; 0xf7a <USB_Host_WaitForIOS>
    111e:	88 23       	and	r24, r24
    1120:	c9 f5       	brne	.+114    	; 0x1194 <USB_Host_SendControlRequest+0x1ca>
    1122:	fe 01       	movw	r30, r28
    1124:	07 c0       	rjmp	.+14     	; 0x1134 <USB_Host_SendControlRequest+0x16a>
    1126:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1128:	ef 01       	movw	r28, r30
    112a:	80 93 af 00 	sts	0x00AF, r24
    112e:	01 50       	subi	r16, 0x01	; 1
    1130:	10 40       	sbci	r17, 0x00	; 0
    1132:	59 f0       	breq	.+22     	; 0x114a <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1134:	ef 01       	movw	r28, r30
    1136:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    113a:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    113e:	80 91 29 01 	lds	r24, 0x0129
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1142:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1144:	28 17       	cp	r18, r24
    1146:	39 07       	cpc	r19, r25
    1148:	70 f3       	brcs	.-36     	; 0x1126 <USB_Host_SendControlRequest+0x15c>
    114a:	80 91 a6 00 	lds	r24, 0x00A6
    114e:	8b 77       	andi	r24, 0x7B	; 123
    1150:	80 93 a6 00 	sts	0x00A6, r24
    1154:	82 e0       	ldi	r24, 0x02	; 2
    1156:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1158:	11 05       	cpc	r17, r1
    115a:	01 f7       	brne	.-64     	; 0x111c <USB_Host_SendControlRequest+0x152>
    115c:	0e df       	rcall	.-484    	; 0xf7a <USB_Host_WaitForIOS>
    115e:	88 23       	and	r24, r24
    1160:	c9 f4       	brne	.+50     	; 0x1194 <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1162:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1166:	80 64       	ori	r24, 0x40	; 64
    1168:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    116c:	80 91 aa 00 	lds	r24, 0x00AA
    1170:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1172:	80 61       	ori	r24, 0x10	; 16
    1174:	80 93 aa 00 	sts	0x00AA, r24
    1178:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    117c:	8f 7b       	andi	r24, 0xBF	; 191
    117e:	80 93 a9 00 	sts	0x00A9, r24
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	fa de       	rcall	.-524    	; 0xf7a <USB_Host_WaitForIOS>
    1186:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1188:	29 f4       	brne	.+10     	; 0x1194 <USB_Host_SendControlRequest+0x1ca>
    118a:	90 91 a6 00 	lds	r25, 0x00A6
    118e:	9e 77       	andi	r25, 0x7E	; 126
    1190:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1194:	90 91 a9 00 	lds	r25, 0x00A9
    1198:	90 64       	ori	r25, 0x40	; 64
    119a:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    119e:	e1 14       	cp	r14, r1
    11a0:	f1 04       	cpc	r15, r1
    11a2:	29 f4       	brne	.+10     	; 0x11ae <USB_Host_SendControlRequest+0x1e4>
    11a4:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11a8:	9e 7f       	andi	r25, 0xFE	; 254
    11aa:	90 93 9e 00 	sts	0x009E, r25
    11ae:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    11b0:	90 93 a8 00 	sts	0x00A8, r25
    11b4:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    11c0:	ff 90       	pop	r15
    11c2:	ef 90       	pop	r14
    11c4:	08 95       	ret

000011c6 <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    11c6:	cf 93       	push	r28
    11c8:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    11ca:	10 92 49 01 	sts	0x0149, r1
    11ce:	89 e0       	ldi	r24, 0x09	; 9
    11d0:	80 93 4a 01 	sts	0x014A, r24
    11d4:	c0 93 4b 01 	sts	0x014B, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    11d8:	10 92 4c 01 	sts	0x014C, r1
    11dc:	10 92 4e 01 	sts	0x014E, r1
    11e0:	10 92 4d 01 	sts	0x014D, r1
    11e4:	10 92 50 01 	sts	0x0150, r1
    11e8:	10 92 4f 01 	sts	0x014F, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    11ec:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	ea de       	rcall	.-556    	; 0xfca <USB_Host_SendControlRequest>
    11f6:	88 23       	and	r24, r24
    11f8:	49 f4       	brne	.+18     	; 0x120c <USB_Host_SetDeviceConfiguration+0x46>
    11fa:	c0 93 47 01 	sts	0x0147, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    11fe:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1200:	11 f0       	breq	.+4      	; 0x1206 <USB_Host_SetDeviceConfiguration+0x40>
    1202:	9b e0       	ldi	r25, 0x0B	; 11
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <USB_Host_SetDeviceConfiguration+0x42>
    1206:	9a e0       	ldi	r25, 0x0A	; 10
    1208:	90 93 51 01 	sts	0x0151, r25
    120c:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    120e:	08 95       	ret

00001210 <USB_Host_ClearEndpointStall>:
    1210:	92 e0       	ldi	r25, 0x02	; 2
	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1212:	90 93 49 01 	sts	0x0149, r25
    1216:	91 e0       	ldi	r25, 0x01	; 1
    1218:	90 93 4a 01 	sts	0x014A, r25
    121c:	10 92 4c 01 	sts	0x014C, r1
    1220:	10 92 4b 01 	sts	0x014B, r1
    1224:	80 93 4d 01 	sts	0x014D, r24
    1228:	10 92 4e 01 	sts	0x014E, r1
    122c:	10 92 50 01 	sts	0x0150, r1
    1230:	10 92 4f 01 	sts	0x014F, r1
    1234:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	c6 ce       	rjmp	.-628    	; 0xfca <USB_Host_SendControlRequest>

0000123e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    123e:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1240:	c0 91 a7 00 	lds	r28, 0x00A7
    1244:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1246:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    124a:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    124e:	1f da       	rcall	.-3010   	; 0x68e <USB_Host_ProcessNextHostState>
    1250:	c0 93 a7 00 	sts	0x00A7, r28
    1254:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1256:	08 95       	ret

00001258 <DCOMP_SI_Host_NextSIInterface>:

	return SI_ENUMERROR_NoError;
}

uint8_t DCOMP_SI_Host_NextSIInterface(void* const CurrentDescriptor)
{
    1258:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    125a:	81 81       	ldd	r24, Z+1	; 0x01
    125c:	84 30       	cpi	r24, 0x04	; 4
    125e:	49 f4       	brne	.+18     	; 0x1272 <DCOMP_SI_Host_NextSIInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == SI_CSCP_StillImageClass)    &&
    1260:	85 81       	ldd	r24, Z+5	; 0x05
    1262:	86 30       	cpi	r24, 0x06	; 6
    1264:	31 f4       	brne	.+12     	; 0x1272 <DCOMP_SI_Host_NextSIInterface+0x1a>
    1266:	86 81       	ldd	r24, Z+6	; 0x06
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	19 f4       	brne	.+6      	; 0x1272 <DCOMP_SI_Host_NextSIInterface+0x1a>
		    (Interface->SubClass == SI_CSCP_StillImageSubclass) &&
    126c:	87 81       	ldd	r24, Z+7	; 0x07
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	11 f0       	breq	.+4      	; 0x1276 <DCOMP_SI_Host_NextSIInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1272:	82 e0       	ldi	r24, 0x02	; 2
    1274:	08 95       	ret

		if ((Interface->Class    == SI_CSCP_StillImageClass)    &&
		    (Interface->SubClass == SI_CSCP_StillImageSubclass) &&
		    (Interface->Protocol == SI_CSCP_BulkOnlyProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    1276:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1278:	08 95       	ret

0000127a <DCOMP_SI_Host_NextSIInterfaceEndpoint>:

uint8_t DCOMP_SI_Host_NextSIInterfaceEndpoint(void* const CurrentDescriptor)
{
    127a:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    127c:	81 81       	ldd	r24, Z+1	; 0x01
    127e:	85 30       	cpi	r24, 0x05	; 5
    1280:	51 f4       	brne	.+20     	; 0x1296 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x1c>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
    1282:	83 81       	ldd	r24, Z+3	; 0x03
    1284:	83 70       	andi	r24, 0x03	; 3

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    1286:	82 50       	subi	r24, 0x02	; 2
    1288:	82 30       	cpi	r24, 0x02	; 2
    128a:	38 f4       	brcc	.+14     	; 0x129a <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x20>
		    (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
    128c:	82 81       	ldd	r24, Z+2	; 0x02
    128e:	70 dc       	rcall	.-1824   	; 0xb70 <Pipe_IsEndpointBound>
    1290:	88 23       	and	r24, r24
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    1292:	19 f4       	brne	.+6      	; 0x129a <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x20>
    1294:	04 c0       	rjmp	.+8      	; 0x129e <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x24>
    1296:	84 30       	cpi	r24, 0x04	; 4
		    (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    1298:	21 f0       	breq	.+8      	; 0x12a2 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x28>
    129a:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    129c:	08 95       	ret
    129e:	80 e0       	ldi	r24, 0x00	; 0
		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
		    (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		{
			return DESCRIPTOR_SEARCH_Found;
    12a0:	08 95       	ret
    12a2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    12a4:	08 95       	ret

000012a6 <SI_Host_ConfigurePipes>:
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    12a6:	8f 92       	push	r8
#include "StillImageClassHost.h"

uint8_t SI_Host_ConfigurePipes(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                               uint16_t ConfigDescriptorSize,
                               void* ConfigDescriptorData)
{
    12a8:	9f 92       	push	r9
    12aa:	af 92       	push	r10
    12ac:	bf 92       	push	r11
    12ae:	cf 92       	push	r12
    12b0:	df 92       	push	r13
    12b2:	ef 92       	push	r14
    12b4:	ff 92       	push	r15
    12b6:	0f 93       	push	r16
    12b8:	1f 93       	push	r17
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <SI_Host_ConfigurePipes+0x1a>
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <SI_Host_ConfigurePipes+0x1c>
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	8c 01       	movw	r16, r24
    12c8:	7a 83       	std	Y+2, r23	; 0x02
    12ca:	69 83       	std	Y+1, r22	; 0x01
    12cc:	5c 83       	std	Y+4, r21	; 0x04
    12ce:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint     = NULL;
	USB_Descriptor_Endpoint_t*  EventsEndpoint      = NULL;
	USB_Descriptor_Interface_t* StillImageInterface = NULL;

	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));
    12d0:	42 96       	adiw	r24, 0x12	; 18
    12d2:	fc 01       	movw	r30, r24
    12d4:	87 e0       	ldi	r24, 0x07	; 7
    12d6:	df 01       	movw	r26, r30
    12d8:	1d 92       	st	X+, r1
    12da:	8a 95       	dec	r24
    12dc:	e9 f7       	brne	.-6      	; 0x12d8 <SI_Host_ConfigurePipes+0x32>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    12de:	eb 81       	ldd	r30, Y+3	; 0x03
    12e0:	fc 81       	ldd	r31, Y+4	; 0x04
    12e2:	81 81       	ldd	r24, Z+1	; 0x01
    12e4:	82 30       	cpi	r24, 0x02	; 2
    12e6:	09 f0       	breq	.+2      	; 0x12ea <SI_Host_ConfigurePipes+0x44>
    12e8:	7e c0       	rjmp	.+252    	; 0x13e6 <SI_Host_ConfigurePipes+0x140>
    12ea:	88 24       	eor	r8, r8
    12ec:	99 24       	eor	r9, r9
    12ee:	aa 24       	eor	r10, r10
    12f0:	bb 24       	eor	r11, r11
    12f2:	cc 24       	eor	r12, r12
    12f4:	dd 24       	eor	r13, r13
    12f6:	ee 24       	eor	r14, r14
    12f8:	ff 24       	eor	r15, r15
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
	{
		if (!(StillImageInterface) ||
    12fa:	81 14       	cp	r8, r1
    12fc:	91 04       	cpc	r9, r1
    12fe:	51 f0       	breq	.+20     	; 0x1314 <SI_Host_ConfigurePipes+0x6e>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1300:	ce 01       	movw	r24, r28
    1302:	01 96       	adiw	r24, 0x01	; 1
    1304:	be 01       	movw	r22, r28
    1306:	6d 5f       	subi	r22, 0xFD	; 253
    1308:	7f 4f       	sbci	r23, 0xFF	; 255
    130a:	4d e3       	ldi	r20, 0x3D	; 61
    130c:	59 e0       	ldi	r21, 0x09	; 9
    130e:	ed dd       	rcall	.-1062   	; 0xeea <USB_GetNextDescriptorComp>
    1310:	88 23       	and	r24, r24
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
	{
		if (!(StillImageInterface) ||
    1312:	71 f0       	breq	.+28     	; 0x1330 <SI_Host_ConfigurePipes+0x8a>
    1314:	ce 01       	movw	r24, r28
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_SI_Host_NextSIInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1316:	01 96       	adiw	r24, 0x01	; 1
    1318:	be 01       	movw	r22, r28
    131a:	6d 5f       	subi	r22, 0xFD	; 253
    131c:	7f 4f       	sbci	r23, 0xFF	; 255
    131e:	4c e2       	ldi	r20, 0x2C	; 44
    1320:	59 e0       	ldi	r21, 0x09	; 9
    1322:	e3 dd       	rcall	.-1082   	; 0xeea <USB_GetNextDescriptorComp>
    1324:	88 23       	and	r24, r24
    1326:	09 f0       	breq	.+2      	; 0x132a <SI_Host_ConfigurePipes+0x84>
    1328:	60 c0       	rjmp	.+192    	; 0x13ea <SI_Host_ConfigurePipes+0x144>
    132a:	8b 80       	ldd	r8, Y+3	; 0x03
    132c:	9c 80       	ldd	r9, Y+4	; 0x04
			                              DCOMP_SI_Host_NextSIInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return SI_ENUMERROR_NoCompatibleInterfaceFound;
			}

			StillImageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    132e:	df cf       	rjmp	.-66     	; 0x12ee <SI_Host_ConfigurePipes+0x48>
    1330:	eb 81       	ldd	r30, Y+3	; 0x03
    1332:	fc 81       	ldd	r31, Y+4	; 0x04
			EventsEndpoint  = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1334:	82 81       	ldd	r24, Z+2	; 0x02
    1336:	87 ff       	sbrs	r24, 7

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1338:	06 c0       	rjmp	.+12     	; 0x1346 <SI_Host_ConfigurePipes+0xa0>
    133a:	83 81       	ldd	r24, Z+3	; 0x03
    133c:	83 70       	andi	r24, 0x03	; 3
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
    133e:	83 30       	cpi	r24, 0x03	; 3
    1340:	21 f4       	brne	.+8      	; 0x134a <SI_Host_ConfigurePipes+0xa4>
    1342:	5f 01       	movw	r10, r30
    1344:	03 c0       	rjmp	.+6      	; 0x134c <SI_Host_ConfigurePipes+0xa6>
			  EventsEndpoint = EndpointData;
    1346:	6f 01       	movw	r12, r30
    1348:	01 c0       	rjmp	.+2      	; 0x134c <SI_Host_ConfigurePipes+0xa6>
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
    134a:	7f 01       	movw	r14, r30
    134c:	e1 14       	cp	r14, r1
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  EventsEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
    134e:	f1 04       	cpc	r15, r1
	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
    1350:	a1 f2       	breq	.-88     	; 0x12fa <SI_Host_ConfigurePipes+0x54>
    1352:	c1 14       	cp	r12, r1
    1354:	d1 04       	cpc	r13, r1
    1356:	89 f2       	breq	.-94     	; 0x12fa <SI_Host_ConfigurePipes+0x54>
    1358:	a1 14       	cp	r10, r1
    135a:	b1 04       	cpc	r11, r1
    135c:	71 f2       	breq	.-100    	; 0x12fa <SI_Host_ConfigurePipes+0x54>
    135e:	f7 01       	movw	r30, r14
    1360:	84 81       	ldd	r24, Z+4	; 0x04
		{
			DataOUTEndpoint = EndpointData;
		}
	}

	SIInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    1362:	95 81       	ldd	r25, Z+5	; 0x05
    1364:	d8 01       	movw	r26, r16
    1366:	12 96       	adiw	r26, 0x02	; 2
    1368:	9c 93       	st	X, r25
    136a:	8e 93       	st	-X, r24
    136c:	11 97       	sbiw	r26, 0x01	; 1
    136e:	82 81       	ldd	r24, Z+2	; 0x02
    1370:	13 96       	adiw	r26, 0x03	; 3
	SIInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1372:	8c 93       	st	X, r24
    1374:	13 97       	sbiw	r26, 0x03	; 3
    1376:	22 e0       	ldi	r18, 0x02	; 2
    1378:	14 96       	adiw	r26, 0x04	; 4
	SIInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
    137a:	2c 93       	st	X, r18
    137c:	14 97       	sbiw	r26, 0x04	; 4
    137e:	f6 01       	movw	r30, r12
    1380:	84 81       	ldd	r24, Z+4	; 0x04

	SIInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1382:	95 81       	ldd	r25, Z+5	; 0x05
    1384:	18 96       	adiw	r26, 0x08	; 8
    1386:	9c 93       	st	X, r25
    1388:	8e 93       	st	-X, r24
    138a:	17 97       	sbiw	r26, 0x07	; 7
    138c:	82 81       	ldd	r24, Z+2	; 0x02
    138e:	19 96       	adiw	r26, 0x09	; 9
	SIInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1390:	8c 93       	st	X, r24
    1392:	19 97       	sbiw	r26, 0x09	; 9
    1394:	1a 96       	adiw	r26, 0x0a	; 10
    1396:	2c 93       	st	X, r18
	SIInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;
    1398:	d5 01       	movw	r26, r10
    139a:	14 96       	adiw	r26, 0x04	; 4

	SIInterfaceInfo->Config.EventsPipe.Size = le16_to_cpu(EventsEndpoint->EndpointSize);
    139c:	8d 91       	ld	r24, X+
    139e:	9c 91       	ld	r25, X
    13a0:	15 97       	sbiw	r26, 0x05	; 5
    13a2:	f8 01       	movw	r30, r16
    13a4:	96 87       	std	Z+14, r25	; 0x0e
    13a6:	85 87       	std	Z+13, r24	; 0x0d
    13a8:	12 96       	adiw	r26, 0x02	; 2
    13aa:	8c 91       	ld	r24, X
	SIInterfaceInfo->Config.EventsPipe.EndpointAddress = EventsEndpoint->EndpointAddress;
    13ac:	87 87       	std	Z+15, r24	; 0x0f
    13ae:	83 e0       	ldi	r24, 0x03	; 3
    13b0:	80 8b       	std	Z+16, r24	; 0x10
	SIInterfaceInfo->Config.EventsPipe.Type = EP_TYPE_INTERRUPT;
    13b2:	c8 01       	movw	r24, r16
    13b4:	61 e0       	ldi	r22, 0x01	; 1

	if (!(Pipe_ConfigurePipeTable(&SIInterfaceInfo->Config.DataINPipe, 1)))
    13b6:	a7 db       	rcall	.-2226   	; 0xb06 <Pipe_ConfigurePipeTable>
    13b8:	88 23       	and	r24, r24
    13ba:	c9 f0       	breq	.+50     	; 0x13ee <SI_Host_ConfigurePipes+0x148>
    13bc:	c8 01       	movw	r24, r16
    13be:	06 96       	adiw	r24, 0x06	; 6
    13c0:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Pipe_ConfigurePipeTable(&SIInterfaceInfo->Config.DataOUTPipe, 1)))
    13c2:	a1 db       	rcall	.-2238   	; 0xb06 <Pipe_ConfigurePipeTable>
    13c4:	88 23       	and	r24, r24
    13c6:	99 f0       	breq	.+38     	; 0x13ee <SI_Host_ConfigurePipes+0x148>
    13c8:	c8 01       	movw	r24, r16
    13ca:	0c 96       	adiw	r24, 0x0c	; 12
    13cc:	61 e0       	ldi	r22, 0x01	; 1
    13ce:	9b db       	rcall	.-2250   	; 0xb06 <Pipe_ConfigurePipeTable>
	  return false;

	if (!(Pipe_ConfigurePipeTable(&SIInterfaceInfo->Config.EventsPipe, 1)))
    13d0:	88 23       	and	r24, r24
    13d2:	69 f0       	breq	.+26     	; 0x13ee <SI_Host_ConfigurePipes+0x148>
    13d4:	d4 01       	movw	r26, r8
    13d6:	12 96       	adiw	r26, 0x02	; 2
    13d8:	8c 91       	ld	r24, X
    13da:	12 97       	sbiw	r26, 0x02	; 2
    13dc:	f8 01       	movw	r30, r16
	  return false;

	SIInterfaceInfo->State.InterfaceNumber = StillImageInterface->InterfaceNumber;
    13de:	83 8b       	std	Z+19, r24	; 0x13
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	82 8b       	std	Z+18, r24	; 0x12
    13e4:	04 c0       	rjmp	.+8      	; 0x13ee <SI_Host_ConfigurePipes+0x148>
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	03 c0       	rjmp	.+6      	; 0x13f0 <SI_Host_ConfigurePipes+0x14a>
	SIInterfaceInfo->State.IsActive = true;
    13ea:	82 e0       	ldi	r24, 0x02	; 2
    13ec:	01 c0       	rjmp	.+2      	; 0x13f0 <SI_Host_ConfigurePipes+0x14a>
    13ee:	80 e0       	ldi	r24, 0x00	; 0
	USB_Descriptor_Interface_t* StillImageInterface = NULL;

	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
		                              DCOMP_SI_Host_NextSIInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_SI_Host_NextSIInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return SI_ENUMERROR_NoCompatibleInterfaceFound;
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0

	if (!(Pipe_ConfigurePipeTable(&SIInterfaceInfo->Config.DataOUTPipe, 1)))
	  return false;

	if (!(Pipe_ConfigurePipeTable(&SIInterfaceInfo->Config.EventsPipe, 1)))
	  return false;
    13f8:	df 91       	pop	r29

	SIInterfaceInfo->State.InterfaceNumber = StillImageInterface->InterfaceNumber;
	SIInterfaceInfo->State.IsActive = true;

	return SI_ENUMERROR_NoError;
}
    13fa:	cf 91       	pop	r28
    13fc:	1f 91       	pop	r17
    13fe:	0f 91       	pop	r16
    1400:	ff 90       	pop	r15
    1402:	ef 90       	pop	r14
    1404:	df 90       	pop	r13
    1406:	cf 90       	pop	r12
    1408:	bf 90       	pop	r11
    140a:	af 90       	pop	r10
    140c:	9f 90       	pop	r9
    140e:	8f 90       	pop	r8
    1410:	08 95       	ret

00001412 <SI_Host_SendBlockHeader>:
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	fc 01       	movw	r30, r24
    141a:	eb 01       	movw	r28, r22
uint8_t SI_Host_SendBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                PIMA_Container_t* const PIMAHeader)
{
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    141c:	80 91 51 01 	lds	r24, 0x0151
    1420:	8b 30       	cpi	r24, 0x0B	; 11
    1422:	09 f0       	breq	.+2      	; 0x1426 <SI_Host_SendBlockHeader+0x14>
    1424:	3d c0       	rjmp	.+122    	; 0x14a0 <SI_Host_SendBlockHeader+0x8e>
    1426:	82 89       	ldd	r24, Z+18	; 0x12
    1428:	88 23       	and	r24, r24
    142a:	d1 f1       	breq	.+116    	; 0x14a0 <SI_Host_SendBlockHeader+0x8e>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	if (SIInterfaceInfo->State.IsSessionOpen)
    142c:	84 89       	ldd	r24, Z+20	; 0x14
    142e:	88 23       	and	r24, r24
    1430:	79 f0       	breq	.+30     	; 0x1450 <SI_Host_SendBlockHeader+0x3e>
	  PIMAHeader->TransactionID = cpu_to_le32(SIInterfaceInfo->State.TransactionID++);
    1432:	85 89       	ldd	r24, Z+21	; 0x15
    1434:	96 89       	ldd	r25, Z+22	; 0x16
    1436:	a7 89       	ldd	r26, Z+23	; 0x17
    1438:	b0 8d       	ldd	r27, Z+24	; 0x18
    143a:	88 87       	std	Y+8, r24	; 0x08
    143c:	99 87       	std	Y+9, r25	; 0x09
    143e:	aa 87       	std	Y+10, r26	; 0x0a
    1440:	bb 87       	std	Y+11, r27	; 0x0b
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	a1 1d       	adc	r26, r1
    1446:	b1 1d       	adc	r27, r1
    1448:	85 8b       	std	Z+21, r24	; 0x15
    144a:	96 8b       	std	Z+22, r25	; 0x16
    144c:	a7 8b       	std	Z+23, r26	; 0x17
    144e:	b0 8f       	std	Z+24, r27	; 0x18
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1450:	86 81       	ldd	r24, Z+6	; 0x06
    1452:	8f 70       	andi	r24, 0x0F	; 15
    1454:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1458:	80 91 a9 00 	lds	r24, 0x00A9
    145c:	8f 7b       	andi	r24, 0xBF	; 191
    145e:	80 93 a9 00 	sts	0x00A9, r24

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(PIMAHeader, PIMA_COMMAND_SIZE(0), NULL)) != PIPE_RWSTREAM_NoError)
    1462:	ce 01       	movw	r24, r28
    1464:	6c e0       	ldi	r22, 0x0C	; 12
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	40 e0       	ldi	r20, 0x00	; 0
    146a:	50 e0       	ldi	r21, 0x00	; 0
    146c:	39 da       	rcall	.-2958   	; 0x8e0 <Pipe_Write_Stream_LE>
    146e:	18 2f       	mov	r17, r24
    1470:	88 23       	and	r24, r24
    1472:	c9 f4       	brne	.+50     	; 0x14a6 <SI_Host_SendBlockHeader+0x94>
    1474:	68 81       	ld	r22, Y
	  return ErrorCode;

	uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));
    1476:	6c 50       	subi	r22, 0x0C	; 12
    1478:	41 f0       	breq	.+16     	; 0x148a <SI_Host_SendBlockHeader+0x78>

	if (ParamBytes)
    147a:	ce 01       	movw	r24, r28
	{
		if ((ErrorCode = Pipe_Write_Stream_LE(&PIMAHeader->Params, ParamBytes, NULL)) != PIPE_RWSTREAM_NoError)
    147c:	0c 96       	adiw	r24, 0x0c	; 12
    147e:	70 e0       	ldi	r23, 0x00	; 0
    1480:	40 e0       	ldi	r20, 0x00	; 0
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	2d da       	rcall	.-2982   	; 0x8e0 <Pipe_Write_Stream_LE>
    1486:	88 23       	and	r24, r24
    1488:	69 f4       	brne	.+26     	; 0x14a4 <SI_Host_SendBlockHeader+0x92>
    148a:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    148e:	8b 77       	andi	r24, 0x7B	; 123
    1490:	80 93 a6 00 	sts	0x00A6, r24
    1494:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1498:	80 64       	ori	r24, 0x40	; 64
    149a:	80 93 a9 00 	sts	0x00A9, r24
    149e:	03 c0       	rjmp	.+6      	; 0x14a6 <SI_Host_SendBlockHeader+0x94>
    14a0:	12 e0       	ldi	r17, 0x02	; 2
	}

	Pipe_ClearOUT();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    14a2:	01 c0       	rjmp	.+2      	; 0x14a6 <SI_Host_SendBlockHeader+0x94>
                                PIMA_Container_t* const PIMAHeader)
{
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    14a4:	18 2f       	mov	r17, r24
    14a6:	81 2f       	mov	r24, r17

	uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));

	if (ParamBytes)
	{
		if ((ErrorCode = Pipe_Write_Stream_LE(&PIMAHeader->Params, ParamBytes, NULL)) != PIPE_RWSTREAM_NoError)
    14a8:	df 91       	pop	r29

	Pipe_ClearOUT();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	08 95       	ret

000014b0 <SI_Host_ReceiveBlockHeader>:
    14b0:	cf 93       	push	r28
    14b2:	df 93       	push	r29

uint8_t SI_Host_ReceiveBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                   PIMA_Container_t* const PIMAHeader)
{
    14b4:	fc 01       	movw	r30, r24
    14b6:	eb 01       	movw	r28, r22
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    14b8:	40 91 a2 00 	lds	r20, 0x00A2
    14bc:	50 91 a3 00 	lds	r21, 0x00A3
	uint16_t TimeoutMSRem        = SI_COMMAND_DATA_TIMEOUT_MS;
	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    14c0:	80 91 51 01 	lds	r24, 0x0151
    14c4:	8b 30       	cpi	r24, 0x0B	; 11
    14c6:	09 f0       	breq	.+2      	; 0x14ca <SI_Host_ReceiveBlockHeader+0x1a>
    14c8:	79 c0       	rjmp	.+242    	; 0x15bc <SI_Host_ReceiveBlockHeader+0x10c>
    14ca:	82 89       	ldd	r24, Z+18	; 0x12
    14cc:	88 23       	and	r24, r24
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <SI_Host_ReceiveBlockHeader+0x22>
    14d0:	75 c0       	rjmp	.+234    	; 0x15bc <SI_Host_ReceiveBlockHeader+0x10c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    14d2:	80 81       	ld	r24, Z
    14d4:	8f 70       	andi	r24, 0x0F	; 15
    14d6:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    14da:	80 91 a9 00 	lds	r24, 0x00A9
    14de:	8f 7b       	andi	r24, 0xBF	; 191
    14e0:	80 93 a9 00 	sts	0x00A9, r24
}

uint8_t SI_Host_ReceiveBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                   PIMA_Container_t* const PIMAHeader)
{
	uint16_t TimeoutMSRem        = SI_COMMAND_DATA_TIMEOUT_MS;
    14e4:	20 e1       	ldi	r18, 0x10	; 16
    14e6:	37 e2       	ldi	r19, 0x27	; 39
    14e8:	43 c0       	rjmp	.+134    	; 0x1570 <SI_Host_ReceiveBlockHeader+0xc0>
    14ea:	80 91 a2 00 	lds	r24, 0x00A2
    14ee:	90 91 a3 00 	lds	r25, 0x00A3

	while (!(Pipe_IsINReceived()))
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    14f2:	84 17       	cp	r24, r20
    14f4:	95 07       	cpc	r25, r21
    14f6:	39 f0       	breq	.+14     	; 0x1506 <SI_Host_ReceiveBlockHeader+0x56>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    14f8:	21 15       	cp	r18, r1
    14fa:	31 05       	cpc	r19, r1
    14fc:	09 f4       	brne	.+2      	; 0x1500 <SI_Host_ReceiveBlockHeader+0x50>
    14fe:	5c c0       	rjmp	.+184    	; 0x15b8 <SI_Host_ReceiveBlockHeader+0x108>
    1500:	21 50       	subi	r18, 0x01	; 1
    1502:	30 40       	sbci	r19, 0x00	; 0
    1504:	ac 01       	movw	r20, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1506:	80 91 a9 00 	lds	r24, 0x00A9
    150a:	80 64       	ori	r24, 0x40	; 64
    150c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1510:	86 81       	ldd	r24, Z+6	; 0x06
    1512:	8f 70       	andi	r24, 0x0F	; 15
    1514:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1518:	80 91 a9 00 	lds	r24, 0x00A9
    151c:	8f 7b       	andi	r24, 0xBF	; 191
    151e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1522:	80 91 a6 00 	lds	r24, 0x00A6

		Pipe_Freeze();
		Pipe_SelectPipe(SIInterfaceInfo->Config.DataOUTPipe.Address);
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    1526:	81 fd       	sbrc	r24, 1
    1528:	12 c0       	rjmp	.+36     	; 0x154e <SI_Host_ReceiveBlockHeader+0x9e>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    152a:	80 91 a9 00 	lds	r24, 0x00A9
    152e:	80 64       	ori	r24, 0x40	; 64
    1530:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1534:	80 81       	ld	r24, Z
    1536:	8f 70       	andi	r24, 0x0F	; 15
    1538:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    153c:	80 91 a9 00 	lds	r24, 0x00A9
    1540:	8f 7b       	andi	r24, 0xBF	; 191
    1542:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1546:	80 91 a6 00 	lds	r24, 0x00A6

		Pipe_Freeze();
		Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipe.Address);
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    154a:	81 ff       	sbrs	r24, 1
    154c:	0d c0       	rjmp	.+26     	; 0x1568 <SI_Host_ReceiveBlockHeader+0xb8>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    154e:	90 91 aa 00 	lds	r25, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
    1552:	29 2f       	mov	r18, r25
    1554:	2f 70       	andi	r18, 0x0F	; 15
    1556:	90 ff       	sbrs	r25, 0
    1558:	02 c0       	rjmp	.+4      	; 0x155e <SI_Host_ReceiveBlockHeader+0xae>
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	01 c0       	rjmp	.+2      	; 0x1560 <SI_Host_ReceiveBlockHeader+0xb0>
    155e:	80 e8       	ldi	r24, 0x80	; 128
		{
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
    1560:	82 2b       	or	r24, r18
    1562:	56 de       	rcall	.-852    	; 0x1210 <USB_Host_ClearEndpointStall>
    1564:	81 e0       	ldi	r24, 0x01	; 1
			return PIPE_RWSTREAM_PipeStalled;
    1566:	2b c0       	rjmp	.+86     	; 0x15be <SI_Host_ReceiveBlockHeader+0x10e>
    1568:	80 91 51 01 	lds	r24, 0x0151
		}

		if (USB_HostState == HOST_STATE_Unattached)
    156c:	81 30       	cpi	r24, 0x01	; 1
    156e:	31 f1       	breq	.+76     	; 0x15bc <SI_Host_ReceiveBlockHeader+0x10c>
    1570:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1574:	80 ff       	sbrs	r24, 0
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	while (!(Pipe_IsINReceived()))
    1576:	b9 cf       	rjmp	.-142    	; 0x14ea <SI_Host_ReceiveBlockHeader+0x3a>
    1578:	ce 01       	movw	r24, r28

		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
	}

	Pipe_Read_Stream_LE(PIMAHeader, PIMA_COMMAND_SIZE(0), NULL);
    157a:	6c e0       	ldi	r22, 0x0C	; 12
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	40 e0       	ldi	r20, 0x00	; 0
    1580:	50 e0       	ldi	r21, 0x00	; 0
    1582:	05 da       	rcall	.-3062   	; 0x98e <Pipe_Read_Stream_LE>
    1584:	8c 81       	ldd	r24, Y+4	; 0x04
    1586:	9d 81       	ldd	r25, Y+5	; 0x05

	if (PIMAHeader->Type == CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock))
    1588:	83 30       	cpi	r24, 0x03	; 3
    158a:	91 05       	cpc	r25, r1
    158c:	71 f4       	brne	.+28     	; 0x15aa <SI_Host_ReceiveBlockHeader+0xfa>
    158e:	68 81       	ld	r22, Y
    1590:	6c 50       	subi	r22, 0x0C	; 12
	{
		uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));
    1592:	31 f0       	breq	.+12     	; 0x15a0 <SI_Host_ReceiveBlockHeader+0xf0>
    1594:	ce 01       	movw	r24, r28

		if (ParamBytes)
    1596:	0c 96       	adiw	r24, 0x0c	; 12
		  Pipe_Read_Stream_LE(&PIMAHeader->Params, ParamBytes, NULL);
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	40 e0       	ldi	r20, 0x00	; 0
    159c:	50 e0       	ldi	r21, 0x00	; 0
    159e:	f7 d9       	rcall	.-3090   	; 0x98e <Pipe_Read_Stream_LE>
    15a0:	80 91 a6 00 	lds	r24, 0x00A6
    15a4:	8e 77       	andi	r24, 0x7E	; 126
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    15a6:	80 93 a6 00 	sts	0x00A6, r24
    15aa:	80 91 a9 00 	lds	r24, 0x00A9
    15ae:	80 64       	ori	r24, 0x40	; 64

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    15b0:	80 93 a9 00 	sts	0x00A9, r24
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	03 c0       	rjmp	.+6      	; 0x15be <SI_Host_ReceiveBlockHeader+0x10e>
    15b8:	83 e0       	ldi	r24, 0x03	; 3
		Pipe_ClearIN();
	}

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    15ba:	01 c0       	rjmp	.+2      	; 0x15be <SI_Host_ReceiveBlockHeader+0x10e>
    15bc:	82 e0       	ldi	r24, 0x02	; 2
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_RWSTREAM_Timeout;
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
			return PIPE_RWSTREAM_PipeStalled;
		}

		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
    15c2:	08 95       	ret

000015c4 <SI_Host_OpenSession>:
	}

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    15c4:	ef 92       	push	r14
    15c6:	ff 92       	push	r15
    15c8:	0f 93       	push	r16

	return ErrorCode;
}

uint8_t SI_Host_OpenSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	68 97       	sbiw	r28, 0x18	; 24
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    15e2:	80 91 51 01 	lds	r24, 0x0151
    15e6:	8b 30       	cpi	r24, 0x0B	; 11
    15e8:	09 f0       	breq	.+2      	; 0x15ec <SI_Host_OpenSession+0x28>
    15ea:	44 c0       	rjmp	.+136    	; 0x1674 <SI_Host_OpenSession+0xb0>
    15ec:	f8 01       	movw	r30, r16
    15ee:	82 89       	ldd	r24, Z+18	; 0x12
    15f0:	88 23       	and	r24, r24
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <SI_Host_OpenSession+0x32>
    15f4:	3f c0       	rjmp	.+126    	; 0x1674 <SI_Host_OpenSession+0xb0>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	SIInterfaceInfo->State.TransactionID = 0;
    15f6:	15 8a       	std	Z+21, r1	; 0x15
    15f8:	16 8a       	std	Z+22, r1	; 0x16
    15fa:	17 8a       	std	Z+23, r1	; 0x17
    15fc:	10 8e       	std	Z+24, r1	; 0x18
	SIInterfaceInfo->State.IsSessionOpen = false;
    15fe:	14 8a       	std	Z+20, r1	; 0x14

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    1600:	7e 01       	movw	r14, r28
    1602:	08 94       	sec
    1604:	e1 1c       	adc	r14, r1
    1606:	f1 1c       	adc	r15, r1
    1608:	88 e1       	ldi	r24, 0x18	; 24
    160a:	f7 01       	movw	r30, r14
    160c:	11 92       	st	Z+, r1
    160e:	8a 95       	dec	r24
    1610:	e9 f7       	brne	.-6      	; 0x160c <SI_Host_OpenSession+0x48>
    1612:	80 e1       	ldi	r24, 0x10	; 16
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	a0 e0       	ldi	r26, 0x00	; 0
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	9a 83       	std	Y+2, r25	; 0x02
    161e:	ab 83       	std	Y+3, r26	; 0x03
    1620:	bc 83       	std	Y+4, r27	; 0x04
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	9e 83       	std	Y+6, r25	; 0x06
    1628:	8d 83       	std	Y+5, r24	; 0x05
    162a:	82 e0       	ldi	r24, 0x02	; 2
    162c:	90 e1       	ldi	r25, 0x10	; 16
    162e:	98 87       	std	Y+8, r25	; 0x08
    1630:	8f 83       	std	Y+7, r24	; 0x07
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	a0 e0       	ldi	r26, 0x00	; 0
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	8d 87       	std	Y+13, r24	; 0x0d
    163c:	9e 87       	std	Y+14, r25	; 0x0e
    163e:	af 87       	std	Y+15, r26	; 0x0f
    1640:	b8 8b       	std	Y+16, r27	; 0x10
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = CPU_TO_LE16(0x1002),
			.Params        = {CPU_TO_LE32(1)},
		};

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    1642:	c8 01       	movw	r24, r16
    1644:	b7 01       	movw	r22, r14
    1646:	e5 de       	rcall	.-566    	; 0x1412 <SI_Host_SendBlockHeader>
    1648:	88 23       	and	r24, r24
    164a:	b9 f4       	brne	.+46     	; 0x167a <SI_Host_OpenSession+0xb6>
    164c:	c8 01       	movw	r24, r16
	  return ErrorCode;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    164e:	b7 01       	movw	r22, r14
    1650:	2f df       	rcall	.-418    	; 0x14b0 <SI_Host_ReceiveBlockHeader>
    1652:	88 23       	and	r24, r24
    1654:	91 f4       	brne	.+36     	; 0x167a <SI_Host_OpenSession+0xb6>
    1656:	2d 81       	ldd	r18, Y+5	; 0x05
    1658:	3e 81       	ldd	r19, Y+6	; 0x06
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
    165a:	23 30       	cpi	r18, 0x03	; 3
    165c:	31 05       	cpc	r19, r1
    165e:	61 f4       	brne	.+24     	; 0x1678 <SI_Host_OpenSession+0xb4>
    1660:	2f 81       	ldd	r18, Y+7	; 0x07
    1662:	38 85       	ldd	r19, Y+8	; 0x08
    1664:	f0 e2       	ldi	r31, 0x20	; 32
    1666:	21 30       	cpi	r18, 0x01	; 1
    1668:	3f 07       	cpc	r19, r31
    166a:	31 f4       	brne	.+12     	; 0x1678 <SI_Host_OpenSession+0xb4>
    166c:	91 e0       	ldi	r25, 0x01	; 1
    166e:	f8 01       	movw	r30, r16
	  return SI_ERROR_LOGICAL_CMD_FAILED;

	SIInterfaceInfo->State.IsSessionOpen = true;
    1670:	94 8b       	std	Z+20, r25	; 0x14
    1672:	03 c0       	rjmp	.+6      	; 0x167a <SI_Host_OpenSession+0xb6>
    1674:	82 e0       	ldi	r24, 0x02	; 2

	return PIPE_RWSTREAM_NoError;
    1676:	01 c0       	rjmp	.+2      	; 0x167a <SI_Host_OpenSession+0xb6>
}

uint8_t SI_Host_OpenSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    1678:	80 e8       	ldi	r24, 0x80	; 128
    167a:	68 96       	adiw	r28, 0x18	; 24

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
	  return SI_ERROR_LOGICAL_CMD_FAILED;
    167c:	0f b6       	in	r0, 0x3f	; 63

	SIInterfaceInfo->State.IsSessionOpen = true;

	return PIPE_RWSTREAM_NoError;
}
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	1f 91       	pop	r17
    168c:	0f 91       	pop	r16
    168e:	ff 90       	pop	r15
    1690:	ef 90       	pop	r14
    1692:	08 95       	ret

00001694 <SI_Host_CloseSession>:
    1694:	ef 92       	push	r14
    1696:	ff 92       	push	r15

uint8_t SI_Host_CloseSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    1698:	0f 93       	push	r16
    169a:	1f 93       	push	r17
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	68 97       	sbiw	r28, 0x18	; 24
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	de bf       	out	0x3e, r29	; 62
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	cd bf       	out	0x3d, r28	; 61
    16b0:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    16b2:	80 91 51 01 	lds	r24, 0x0151
    16b6:	8b 30       	cpi	r24, 0x0B	; 11
    16b8:	09 f0       	breq	.+2      	; 0x16bc <SI_Host_CloseSession+0x28>
    16ba:	3d c0       	rjmp	.+122    	; 0x1736 <SI_Host_CloseSession+0xa2>
    16bc:	f8 01       	movw	r30, r16
    16be:	82 89       	ldd	r24, Z+18	; 0x12
    16c0:	88 23       	and	r24, r24
    16c2:	c9 f1       	breq	.+114    	; 0x1736 <SI_Host_CloseSession+0xa2>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    16c4:	7e 01       	movw	r14, r28
    16c6:	08 94       	sec
    16c8:	e1 1c       	adc	r14, r1
    16ca:	f1 1c       	adc	r15, r1
    16cc:	88 e1       	ldi	r24, 0x18	; 24
    16ce:	f7 01       	movw	r30, r14
    16d0:	11 92       	st	Z+, r1
    16d2:	8a 95       	dec	r24
    16d4:	e9 f7       	brne	.-6      	; 0x16d0 <SI_Host_CloseSession+0x3c>
    16d6:	80 e1       	ldi	r24, 0x10	; 16
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	a0 e0       	ldi	r26, 0x00	; 0
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	9a 83       	std	Y+2, r25	; 0x02
    16e2:	ab 83       	std	Y+3, r26	; 0x03
    16e4:	bc 83       	std	Y+4, r27	; 0x04
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	9e 83       	std	Y+6, r25	; 0x06
    16ec:	8d 83       	std	Y+5, r24	; 0x05
    16ee:	83 e0       	ldi	r24, 0x03	; 3
    16f0:	90 e1       	ldi	r25, 0x10	; 16
    16f2:	98 87       	std	Y+8, r25	; 0x08
    16f4:	8f 83       	std	Y+7, r24	; 0x07
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	a0 e0       	ldi	r26, 0x00	; 0
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	8d 87       	std	Y+13, r24	; 0x0d
    1700:	9e 87       	std	Y+14, r25	; 0x0e
    1702:	af 87       	std	Y+15, r26	; 0x0f
    1704:	b8 8b       	std	Y+16, r27	; 0x10
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = CPU_TO_LE16(0x1003),
			.Params        = {CPU_TO_LE32(1)},
		};

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    1706:	c8 01       	movw	r24, r16
    1708:	b7 01       	movw	r22, r14
    170a:	83 de       	rcall	.-762    	; 0x1412 <SI_Host_SendBlockHeader>
    170c:	88 23       	and	r24, r24
    170e:	b1 f4       	brne	.+44     	; 0x173c <SI_Host_CloseSession+0xa8>
    1710:	c8 01       	movw	r24, r16
	  return ErrorCode;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    1712:	b7 01       	movw	r22, r14
    1714:	cd de       	rcall	.-614    	; 0x14b0 <SI_Host_ReceiveBlockHeader>
    1716:	88 23       	and	r24, r24
    1718:	89 f4       	brne	.+34     	; 0x173c <SI_Host_CloseSession+0xa8>
    171a:	f8 01       	movw	r30, r16
    171c:	14 8a       	std	Z+20, r1	; 0x14
	  return ErrorCode;

	SIInterfaceInfo->State.IsSessionOpen = false;
    171e:	2d 81       	ldd	r18, Y+5	; 0x05
    1720:	3e 81       	ldd	r19, Y+6	; 0x06

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
    1722:	23 30       	cpi	r18, 0x03	; 3
    1724:	31 05       	cpc	r19, r1
    1726:	49 f4       	brne	.+18     	; 0x173a <SI_Host_CloseSession+0xa6>
    1728:	2f 81       	ldd	r18, Y+7	; 0x07
    172a:	38 85       	ldd	r19, Y+8	; 0x08
    172c:	f0 e2       	ldi	r31, 0x20	; 32
    172e:	21 30       	cpi	r18, 0x01	; 1
    1730:	3f 07       	cpc	r19, r31
    1732:	19 f4       	brne	.+6      	; 0x173a <SI_Host_CloseSession+0xa6>
    1734:	03 c0       	rjmp	.+6      	; 0x173c <SI_Host_CloseSession+0xa8>
    1736:	82 e0       	ldi	r24, 0x02	; 2
    1738:	01 c0       	rjmp	.+2      	; 0x173c <SI_Host_CloseSession+0xa8>
}

uint8_t SI_Host_CloseSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    173a:	80 e8       	ldi	r24, 0x80	; 128
    173c:	68 96       	adiw	r28, 0x18	; 24
	  return ErrorCode;

	SIInterfaceInfo->State.IsSessionOpen = false;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
	  return SI_ERROR_LOGICAL_CMD_FAILED;
    173e:	0f b6       	in	r0, 0x3f	; 63

	return PIPE_RWSTREAM_NoError;
}
    1740:	f8 94       	cli
    1742:	de bf       	out	0x3e, r29	; 62
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	cd bf       	out	0x3d, r28	; 61
    1748:	df 91       	pop	r29
    174a:	cf 91       	pop	r28
    174c:	1f 91       	pop	r17
    174e:	0f 91       	pop	r16
    1750:	ff 90       	pop	r15
    1752:	ef 90       	pop	r14
    1754:	08 95       	ret

00001756 <SI_Host_SendCommand>:
    1756:	ef 92       	push	r14
    1758:	ff 92       	push	r15

uint8_t SI_Host_SendCommand(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                            const uint16_t Operation,
                            const uint8_t TotalParams,
                            uint32_t* const Params)
{
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	68 97       	sbiw	r28, 0x18	; 24
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	7c 01       	movw	r14, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    1774:	80 91 51 01 	lds	r24, 0x0151
    1778:	8b 30       	cpi	r24, 0x0B	; 11
    177a:	59 f5       	brne	.+86     	; 0x17d2 <SI_Host_SendCommand+0x7c>
    177c:	f7 01       	movw	r30, r14
    177e:	82 89       	ldd	r24, Z+18	; 0x12
    1780:	88 23       	and	r24, r24
    1782:	39 f1       	breq	.+78     	; 0x17d2 <SI_Host_SendCommand+0x7c>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    1784:	8e 01       	movw	r16, r28
    1786:	0f 5f       	subi	r16, 0xFF	; 255
    1788:	1f 4f       	sbci	r17, 0xFF	; 255
    178a:	88 e1       	ldi	r24, 0x18	; 24
    178c:	f8 01       	movw	r30, r16
    178e:	11 92       	st	Z+, r1
    1790:	8a 95       	dec	r24
    1792:	e9 f7       	brne	.-6      	; 0x178e <SI_Host_SendCommand+0x38>
		{
			.DataLength    = cpu_to_le32(PIMA_COMMAND_SIZE(TotalParams)),
    1794:	50 e0       	ldi	r21, 0x00	; 0
    1796:	ca 01       	movw	r24, r20
    1798:	03 96       	adiw	r24, 0x03	; 3
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	88 0f       	add	r24, r24
    17a0:	99 1f       	adc	r25, r25
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    17a2:	a0 e0       	ldi	r26, 0x00	; 0
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	9a 83       	std	Y+2, r25	; 0x02
    17aa:	ab 83       	std	Y+3, r26	; 0x03
    17ac:	bc 83       	std	Y+4, r27	; 0x04
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	9e 83       	std	Y+6, r25	; 0x06
    17b4:	8d 83       	std	Y+5, r24	; 0x05
    17b6:	78 87       	std	Y+8, r23	; 0x08
    17b8:	6f 83       	std	Y+7, r22	; 0x07
			.DataLength    = cpu_to_le32(PIMA_COMMAND_SIZE(TotalParams)),
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = cpu_to_le16(Operation),
		};

	memcpy(&PIMABlock.Params, Params, sizeof(uint32_t) * TotalParams);
    17ba:	ce 01       	movw	r24, r28
    17bc:	0d 96       	adiw	r24, 0x0d	; 13
    17be:	44 0f       	add	r20, r20
    17c0:	55 1f       	adc	r21, r21
    17c2:	44 0f       	add	r20, r20
    17c4:	55 1f       	adc	r21, r21
    17c6:	b9 01       	movw	r22, r18
    17c8:	7a d0       	rcall	.+244    	; 0x18be <memcpy>
    17ca:	c7 01       	movw	r24, r14

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    17cc:	b8 01       	movw	r22, r16
    17ce:	21 de       	rcall	.-958    	; 0x1412 <SI_Host_SendBlockHeader>
    17d0:	01 c0       	rjmp	.+2      	; 0x17d4 <SI_Host_SendCommand+0x7e>
    17d2:	82 e0       	ldi	r24, 0x02	; 2
    17d4:	68 96       	adiw	r28, 0x18	; 24
                            const uint16_t Operation,
                            const uint8_t TotalParams,
                            uint32_t* const Params)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    17d6:	0f b6       	in	r0, 0x3f	; 63

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    17d8:	f8 94       	cli
    17da:	de bf       	out	0x3e, r29	; 62
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	cd bf       	out	0x3d, r28	; 61
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	1f 91       	pop	r17
    17e6:	0f 91       	pop	r16
    17e8:	ff 90       	pop	r15
    17ea:	ef 90       	pop	r14
    17ec:	08 95       	ret

000017ee <SI_Host_ReceiveResponse>:
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29

uint8_t SI_Host_ReceiveResponse(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	68 97       	sbiw	r28, 0x18	; 24
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	cd bf       	out	0x3d, r28	; 61
	uint8_t ErrorCode;
	PIMA_Container_t PIMABlock;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    1802:	20 91 51 01 	lds	r18, 0x0151
    1806:	2b 30       	cpi	r18, 0x0B	; 11
    1808:	b1 f4       	brne	.+44     	; 0x1836 <SI_Host_ReceiveResponse+0x48>
    180a:	fc 01       	movw	r30, r24
    180c:	22 89       	ldd	r18, Z+18	; 0x12
    180e:	22 23       	and	r18, r18
    1810:	91 f0       	breq	.+36     	; 0x1836 <SI_Host_ReceiveResponse+0x48>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    1812:	be 01       	movw	r22, r28
    1814:	6f 5f       	subi	r22, 0xFF	; 255
    1816:	7f 4f       	sbci	r23, 0xFF	; 255
    1818:	4b de       	rcall	.-874    	; 0x14b0 <SI_Host_ReceiveBlockHeader>
    181a:	88 23       	and	r24, r24
    181c:	79 f4       	brne	.+30     	; 0x183c <SI_Host_ReceiveResponse+0x4e>
    181e:	2d 81       	ldd	r18, Y+5	; 0x05
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
    1820:	3e 81       	ldd	r19, Y+6	; 0x06
    1822:	23 30       	cpi	r18, 0x03	; 3
    1824:	31 05       	cpc	r19, r1
    1826:	49 f4       	brne	.+18     	; 0x183a <SI_Host_ReceiveResponse+0x4c>
    1828:	2f 81       	ldd	r18, Y+7	; 0x07
    182a:	38 85       	ldd	r19, Y+8	; 0x08
    182c:	f0 e2       	ldi	r31, 0x20	; 32
    182e:	21 30       	cpi	r18, 0x01	; 1
    1830:	3f 07       	cpc	r19, r31
    1832:	19 f4       	brne	.+6      	; 0x183a <SI_Host_ReceiveResponse+0x4c>
    1834:	03 c0       	rjmp	.+6      	; 0x183c <SI_Host_ReceiveResponse+0x4e>
    1836:	82 e0       	ldi	r24, 0x02	; 2
{
	uint8_t ErrorCode;
	PIMA_Container_t PIMABlock;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    1838:	01 c0       	rjmp	.+2      	; 0x183c <SI_Host_ReceiveResponse+0x4e>
    183a:	80 e8       	ldi	r24, 0x80	; 128

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
	  return SI_ERROR_LOGICAL_CMD_FAILED;
    183c:	68 96       	adiw	r28, 0x18	; 24

	return PIPE_RWSTREAM_NoError;
}
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	cd bf       	out	0x3d, r28	; 61
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	08 95       	ret

0000184e <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    184e:	90 91 c8 00 	lds	r25, 0x00C8
    1852:	95 ff       	sbrs	r25, 5
    1854:	fc cf       	rjmp	.-8      	; 0x184e <Serial_putchar>
				UDR1 = DataByte;
    1856:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	08 95       	ret

00001860 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1860:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1864:	87 ff       	sbrs	r24, 7
    1866:	08 c0       	rjmp	.+16     	; 0x1878 <Serial_getchar+0x18>
    1868:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    186c:	87 ff       	sbrs	r24, 7
    186e:	07 c0       	rjmp	.+14     	; 0x187e <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1870:	80 91 ce 00 	lds	r24, 0x00CE
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	08 95       	ret
	  return _FDEV_EOF;
    1878:	8e ef       	ldi	r24, 0xFE	; 254
    187a:	9f ef       	ldi	r25, 0xFF	; 255
    187c:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    187e:	8f ef       	ldi	r24, 0xFF	; 255
    1880:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1882:	08 95       	ret

00001884 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1884:	fc 01       	movw	r30, r24
	if (!(Stream))
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	51 f4       	brne	.+20     	; 0x189e <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    188a:	e2 e5       	ldi	r30, 0x52	; 82
    188c:	f1 e0       	ldi	r31, 0x01	; 1
    188e:	f0 93 61 01 	sts	0x0161, r31
    1892:	e0 93 60 01 	sts	0x0160, r30
		stdout = Stream;
    1896:	f0 93 63 01 	sts	0x0163, r31
    189a:	e0 93 62 01 	sts	0x0162, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    189e:	8e e0       	ldi	r24, 0x0E	; 14
    18a0:	df 01       	movw	r26, r30
    18a2:	1d 92       	st	X+, r1
    18a4:	8a 95       	dec	r24
    18a6:	e9 f7       	brne	.-6      	; 0x18a2 <Serial_CreateStream+0x1e>
    18a8:	83 e0       	ldi	r24, 0x03	; 3
    18aa:	83 83       	std	Z+3, r24	; 0x03
    18ac:	87 e2       	ldi	r24, 0x27	; 39
    18ae:	9c e0       	ldi	r25, 0x0C	; 12
    18b0:	91 87       	std	Z+9, r25	; 0x09
    18b2:	80 87       	std	Z+8, r24	; 0x08
    18b4:	80 e3       	ldi	r24, 0x30	; 48
    18b6:	9c e0       	ldi	r25, 0x0C	; 12
    18b8:	93 87       	std	Z+11, r25	; 0x0b
    18ba:	82 87       	std	Z+10, r24	; 0x0a
}
    18bc:	08 95       	ret

000018be <memcpy>:
    18be:	fb 01       	movw	r30, r22
    18c0:	dc 01       	movw	r26, r24
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <memcpy+0xa>
    18c4:	01 90       	ld	r0, Z+
    18c6:	0d 92       	st	X+, r0
    18c8:	41 50       	subi	r20, 0x01	; 1
    18ca:	50 40       	sbci	r21, 0x00	; 0
    18cc:	d8 f7       	brcc	.-10     	; 0x18c4 <memcpy+0x6>
    18ce:	08 95       	ret

000018d0 <printf_P>:
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
    18d8:	fe 01       	movw	r30, r28
    18da:	35 96       	adiw	r30, 0x05	; 5
    18dc:	61 91       	ld	r22, Z+
    18de:	71 91       	ld	r23, Z+
    18e0:	80 91 62 01 	lds	r24, 0x0162
    18e4:	90 91 63 01 	lds	r25, 0x0163
    18e8:	dc 01       	movw	r26, r24
    18ea:	13 96       	adiw	r26, 0x03	; 3
    18ec:	2c 91       	ld	r18, X
    18ee:	13 97       	sbiw	r26, 0x03	; 3
    18f0:	28 60       	ori	r18, 0x08	; 8
    18f2:	13 96       	adiw	r26, 0x03	; 3
    18f4:	2c 93       	st	X, r18
    18f6:	af 01       	movw	r20, r30
    18f8:	39 d0       	rcall	.+114    	; 0x196c <vfprintf>
    18fa:	e0 91 62 01 	lds	r30, 0x0162
    18fe:	f0 91 63 01 	lds	r31, 0x0163
    1902:	23 81       	ldd	r18, Z+3	; 0x03
    1904:	27 7f       	andi	r18, 0xF7	; 247
    1906:	23 83       	std	Z+3, r18	; 0x03
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
    190c:	08 95       	ret

0000190e <puts_P>:
    190e:	0f 93       	push	r16
    1910:	1f 93       	push	r17
    1912:	cf 93       	push	r28
    1914:	df 93       	push	r29
    1916:	8c 01       	movw	r16, r24
    1918:	e0 91 62 01 	lds	r30, 0x0162
    191c:	f0 91 63 01 	lds	r31, 0x0163
    1920:	83 81       	ldd	r24, Z+3	; 0x03
    1922:	81 ff       	sbrs	r24, 1
    1924:	1b c0       	rjmp	.+54     	; 0x195c <puts_P+0x4e>
    1926:	c0 e0       	ldi	r28, 0x00	; 0
    1928:	d0 e0       	ldi	r29, 0x00	; 0
    192a:	07 c0       	rjmp	.+14     	; 0x193a <puts_P+0x2c>
    192c:	09 95       	icall
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	11 f0       	breq	.+4      	; 0x1936 <puts_P+0x28>
    1932:	cf ef       	ldi	r28, 0xFF	; 255
    1934:	df ef       	ldi	r29, 0xFF	; 255
    1936:	0f 5f       	subi	r16, 0xFF	; 255
    1938:	1f 4f       	sbci	r17, 0xFF	; 255
    193a:	f8 01       	movw	r30, r16
    193c:	84 91       	lpm	r24, Z
    193e:	60 91 62 01 	lds	r22, 0x0162
    1942:	70 91 63 01 	lds	r23, 0x0163
    1946:	db 01       	movw	r26, r22
    1948:	18 96       	adiw	r26, 0x08	; 8
    194a:	ed 91       	ld	r30, X+
    194c:	fc 91       	ld	r31, X
    194e:	19 97       	sbiw	r26, 0x09	; 9
    1950:	88 23       	and	r24, r24
    1952:	61 f7       	brne	.-40     	; 0x192c <puts_P+0x1e>
    1954:	8a e0       	ldi	r24, 0x0A	; 10
    1956:	09 95       	icall
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	11 f0       	breq	.+4      	; 0x1960 <puts_P+0x52>
    195c:	cf ef       	ldi	r28, 0xFF	; 255
    195e:	df ef       	ldi	r29, 0xFF	; 255
    1960:	ce 01       	movw	r24, r28
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	08 95       	ret

0000196c <vfprintf>:
    196c:	2f 92       	push	r2
    196e:	3f 92       	push	r3
    1970:	4f 92       	push	r4
    1972:	5f 92       	push	r5
    1974:	6f 92       	push	r6
    1976:	7f 92       	push	r7
    1978:	8f 92       	push	r8
    197a:	9f 92       	push	r9
    197c:	af 92       	push	r10
    197e:	bf 92       	push	r11
    1980:	cf 92       	push	r12
    1982:	df 92       	push	r13
    1984:	ef 92       	push	r14
    1986:	ff 92       	push	r15
    1988:	0f 93       	push	r16
    198a:	1f 93       	push	r17
    198c:	cf 93       	push	r28
    198e:	df 93       	push	r29
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	2d 97       	sbiw	r28, 0x0d	; 13
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	3c 01       	movw	r6, r24
    19a2:	7d 87       	std	Y+13, r23	; 0x0d
    19a4:	6c 87       	std	Y+12, r22	; 0x0c
    19a6:	5a 01       	movw	r10, r20
    19a8:	fc 01       	movw	r30, r24
    19aa:	17 82       	std	Z+7, r1	; 0x07
    19ac:	16 82       	std	Z+6, r1	; 0x06
    19ae:	83 81       	ldd	r24, Z+3	; 0x03
    19b0:	81 ff       	sbrs	r24, 1
    19b2:	bb c1       	rjmp	.+886    	; 0x1d2a <vfprintf+0x3be>
    19b4:	2e 01       	movw	r4, r28
    19b6:	08 94       	sec
    19b8:	41 1c       	adc	r4, r1
    19ba:	51 1c       	adc	r5, r1
    19bc:	f3 01       	movw	r30, r6
    19be:	93 81       	ldd	r25, Z+3	; 0x03
    19c0:	ec 85       	ldd	r30, Y+12	; 0x0c
    19c2:	fd 85       	ldd	r31, Y+13	; 0x0d
    19c4:	93 fd       	sbrc	r25, 3
    19c6:	85 91       	lpm	r24, Z+
    19c8:	93 ff       	sbrs	r25, 3
    19ca:	81 91       	ld	r24, Z+
    19cc:	fd 87       	std	Y+13, r31	; 0x0d
    19ce:	ec 87       	std	Y+12, r30	; 0x0c
    19d0:	88 23       	and	r24, r24
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <vfprintf+0x6a>
    19d4:	a6 c1       	rjmp	.+844    	; 0x1d22 <vfprintf+0x3b6>
    19d6:	85 32       	cpi	r24, 0x25	; 37
    19d8:	41 f4       	brne	.+16     	; 0x19ea <vfprintf+0x7e>
    19da:	93 fd       	sbrc	r25, 3
    19dc:	85 91       	lpm	r24, Z+
    19de:	93 ff       	sbrs	r25, 3
    19e0:	81 91       	ld	r24, Z+
    19e2:	fd 87       	std	Y+13, r31	; 0x0d
    19e4:	ec 87       	std	Y+12, r30	; 0x0c
    19e6:	85 32       	cpi	r24, 0x25	; 37
    19e8:	21 f4       	brne	.+8      	; 0x19f2 <vfprintf+0x86>
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	b3 01       	movw	r22, r6
    19ee:	ce d1       	rcall	.+924    	; 0x1d8c <fputc>
    19f0:	e5 cf       	rjmp	.-54     	; 0x19bc <vfprintf+0x50>
    19f2:	ff 24       	eor	r15, r15
    19f4:	ee 24       	eor	r14, r14
    19f6:	10 e0       	ldi	r17, 0x00	; 0
    19f8:	10 32       	cpi	r17, 0x20	; 32
    19fa:	b0 f4       	brcc	.+44     	; 0x1a28 <vfprintf+0xbc>
    19fc:	8b 32       	cpi	r24, 0x2B	; 43
    19fe:	69 f0       	breq	.+26     	; 0x1a1a <vfprintf+0xae>
    1a00:	8c 32       	cpi	r24, 0x2C	; 44
    1a02:	28 f4       	brcc	.+10     	; 0x1a0e <vfprintf+0xa2>
    1a04:	80 32       	cpi	r24, 0x20	; 32
    1a06:	51 f0       	breq	.+20     	; 0x1a1c <vfprintf+0xb0>
    1a08:	83 32       	cpi	r24, 0x23	; 35
    1a0a:	71 f4       	brne	.+28     	; 0x1a28 <vfprintf+0xbc>
    1a0c:	0b c0       	rjmp	.+22     	; 0x1a24 <vfprintf+0xb8>
    1a0e:	8d 32       	cpi	r24, 0x2D	; 45
    1a10:	39 f0       	breq	.+14     	; 0x1a20 <vfprintf+0xb4>
    1a12:	80 33       	cpi	r24, 0x30	; 48
    1a14:	49 f4       	brne	.+18     	; 0x1a28 <vfprintf+0xbc>
    1a16:	11 60       	ori	r17, 0x01	; 1
    1a18:	2c c0       	rjmp	.+88     	; 0x1a72 <vfprintf+0x106>
    1a1a:	12 60       	ori	r17, 0x02	; 2
    1a1c:	14 60       	ori	r17, 0x04	; 4
    1a1e:	29 c0       	rjmp	.+82     	; 0x1a72 <vfprintf+0x106>
    1a20:	18 60       	ori	r17, 0x08	; 8
    1a22:	27 c0       	rjmp	.+78     	; 0x1a72 <vfprintf+0x106>
    1a24:	10 61       	ori	r17, 0x10	; 16
    1a26:	25 c0       	rjmp	.+74     	; 0x1a72 <vfprintf+0x106>
    1a28:	17 fd       	sbrc	r17, 7
    1a2a:	2e c0       	rjmp	.+92     	; 0x1a88 <vfprintf+0x11c>
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	20 53       	subi	r18, 0x30	; 48
    1a30:	2a 30       	cpi	r18, 0x0A	; 10
    1a32:	98 f4       	brcc	.+38     	; 0x1a5a <vfprintf+0xee>
    1a34:	16 ff       	sbrs	r17, 6
    1a36:	08 c0       	rjmp	.+16     	; 0x1a48 <vfprintf+0xdc>
    1a38:	8f 2d       	mov	r24, r15
    1a3a:	88 0f       	add	r24, r24
    1a3c:	f8 2e       	mov	r15, r24
    1a3e:	ff 0c       	add	r15, r15
    1a40:	ff 0c       	add	r15, r15
    1a42:	f8 0e       	add	r15, r24
    1a44:	f2 0e       	add	r15, r18
    1a46:	15 c0       	rjmp	.+42     	; 0x1a72 <vfprintf+0x106>
    1a48:	8e 2d       	mov	r24, r14
    1a4a:	88 0f       	add	r24, r24
    1a4c:	e8 2e       	mov	r14, r24
    1a4e:	ee 0c       	add	r14, r14
    1a50:	ee 0c       	add	r14, r14
    1a52:	e8 0e       	add	r14, r24
    1a54:	e2 0e       	add	r14, r18
    1a56:	10 62       	ori	r17, 0x20	; 32
    1a58:	0c c0       	rjmp	.+24     	; 0x1a72 <vfprintf+0x106>
    1a5a:	8e 32       	cpi	r24, 0x2E	; 46
    1a5c:	21 f4       	brne	.+8      	; 0x1a66 <vfprintf+0xfa>
    1a5e:	16 fd       	sbrc	r17, 6
    1a60:	60 c1       	rjmp	.+704    	; 0x1d22 <vfprintf+0x3b6>
    1a62:	10 64       	ori	r17, 0x40	; 64
    1a64:	06 c0       	rjmp	.+12     	; 0x1a72 <vfprintf+0x106>
    1a66:	8c 36       	cpi	r24, 0x6C	; 108
    1a68:	11 f4       	brne	.+4      	; 0x1a6e <vfprintf+0x102>
    1a6a:	10 68       	ori	r17, 0x80	; 128
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <vfprintf+0x106>
    1a6e:	88 36       	cpi	r24, 0x68	; 104
    1a70:	59 f4       	brne	.+22     	; 0x1a88 <vfprintf+0x11c>
    1a72:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a74:	fd 85       	ldd	r31, Y+13	; 0x0d
    1a76:	93 fd       	sbrc	r25, 3
    1a78:	85 91       	lpm	r24, Z+
    1a7a:	93 ff       	sbrs	r25, 3
    1a7c:	81 91       	ld	r24, Z+
    1a7e:	fd 87       	std	Y+13, r31	; 0x0d
    1a80:	ec 87       	std	Y+12, r30	; 0x0c
    1a82:	88 23       	and	r24, r24
    1a84:	09 f0       	breq	.+2      	; 0x1a88 <vfprintf+0x11c>
    1a86:	b8 cf       	rjmp	.-144    	; 0x19f8 <vfprintf+0x8c>
    1a88:	98 2f       	mov	r25, r24
    1a8a:	95 54       	subi	r25, 0x45	; 69
    1a8c:	93 30       	cpi	r25, 0x03	; 3
    1a8e:	18 f0       	brcs	.+6      	; 0x1a96 <vfprintf+0x12a>
    1a90:	90 52       	subi	r25, 0x20	; 32
    1a92:	93 30       	cpi	r25, 0x03	; 3
    1a94:	38 f4       	brcc	.+14     	; 0x1aa4 <vfprintf+0x138>
    1a96:	24 e0       	ldi	r18, 0x04	; 4
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	a2 0e       	add	r10, r18
    1a9c:	b3 1e       	adc	r11, r19
    1a9e:	3f e3       	ldi	r19, 0x3F	; 63
    1aa0:	39 83       	std	Y+1, r19	; 0x01
    1aa2:	0f c0       	rjmp	.+30     	; 0x1ac2 <vfprintf+0x156>
    1aa4:	83 36       	cpi	r24, 0x63	; 99
    1aa6:	31 f0       	breq	.+12     	; 0x1ab4 <vfprintf+0x148>
    1aa8:	83 37       	cpi	r24, 0x73	; 115
    1aaa:	81 f0       	breq	.+32     	; 0x1acc <vfprintf+0x160>
    1aac:	83 35       	cpi	r24, 0x53	; 83
    1aae:	09 f0       	breq	.+2      	; 0x1ab2 <vfprintf+0x146>
    1ab0:	56 c0       	rjmp	.+172    	; 0x1b5e <vfprintf+0x1f2>
    1ab2:	21 c0       	rjmp	.+66     	; 0x1af6 <vfprintf+0x18a>
    1ab4:	f5 01       	movw	r30, r10
    1ab6:	80 81       	ld	r24, Z
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	22 e0       	ldi	r18, 0x02	; 2
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	a2 0e       	add	r10, r18
    1ac0:	b3 1e       	adc	r11, r19
    1ac2:	21 e0       	ldi	r18, 0x01	; 1
    1ac4:	c2 2e       	mov	r12, r18
    1ac6:	d1 2c       	mov	r13, r1
    1ac8:	42 01       	movw	r8, r4
    1aca:	13 c0       	rjmp	.+38     	; 0x1af2 <vfprintf+0x186>
    1acc:	92 e0       	ldi	r25, 0x02	; 2
    1ace:	29 2e       	mov	r2, r25
    1ad0:	31 2c       	mov	r3, r1
    1ad2:	2a 0c       	add	r2, r10
    1ad4:	3b 1c       	adc	r3, r11
    1ad6:	f5 01       	movw	r30, r10
    1ad8:	80 80       	ld	r8, Z
    1ada:	91 80       	ldd	r9, Z+1	; 0x01
    1adc:	16 ff       	sbrs	r17, 6
    1ade:	03 c0       	rjmp	.+6      	; 0x1ae6 <vfprintf+0x17a>
    1ae0:	6f 2d       	mov	r22, r15
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <vfprintf+0x17e>
    1ae6:	6f ef       	ldi	r22, 0xFF	; 255
    1ae8:	7f ef       	ldi	r23, 0xFF	; 255
    1aea:	c4 01       	movw	r24, r8
    1aec:	44 d1       	rcall	.+648    	; 0x1d76 <strnlen>
    1aee:	6c 01       	movw	r12, r24
    1af0:	51 01       	movw	r10, r2
    1af2:	1f 77       	andi	r17, 0x7F	; 127
    1af4:	14 c0       	rjmp	.+40     	; 0x1b1e <vfprintf+0x1b2>
    1af6:	82 e0       	ldi	r24, 0x02	; 2
    1af8:	28 2e       	mov	r2, r24
    1afa:	31 2c       	mov	r3, r1
    1afc:	2a 0c       	add	r2, r10
    1afe:	3b 1c       	adc	r3, r11
    1b00:	f5 01       	movw	r30, r10
    1b02:	80 80       	ld	r8, Z
    1b04:	91 80       	ldd	r9, Z+1	; 0x01
    1b06:	16 ff       	sbrs	r17, 6
    1b08:	03 c0       	rjmp	.+6      	; 0x1b10 <vfprintf+0x1a4>
    1b0a:	6f 2d       	mov	r22, r15
    1b0c:	70 e0       	ldi	r23, 0x00	; 0
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <vfprintf+0x1a8>
    1b10:	6f ef       	ldi	r22, 0xFF	; 255
    1b12:	7f ef       	ldi	r23, 0xFF	; 255
    1b14:	c4 01       	movw	r24, r8
    1b16:	24 d1       	rcall	.+584    	; 0x1d60 <strnlen_P>
    1b18:	6c 01       	movw	r12, r24
    1b1a:	10 68       	ori	r17, 0x80	; 128
    1b1c:	51 01       	movw	r10, r2
    1b1e:	13 fd       	sbrc	r17, 3
    1b20:	1a c0       	rjmp	.+52     	; 0x1b56 <vfprintf+0x1ea>
    1b22:	05 c0       	rjmp	.+10     	; 0x1b2e <vfprintf+0x1c2>
    1b24:	80 e2       	ldi	r24, 0x20	; 32
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	b3 01       	movw	r22, r6
    1b2a:	30 d1       	rcall	.+608    	; 0x1d8c <fputc>
    1b2c:	ea 94       	dec	r14
    1b2e:	8e 2d       	mov	r24, r14
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	c8 16       	cp	r12, r24
    1b34:	d9 06       	cpc	r13, r25
    1b36:	b0 f3       	brcs	.-20     	; 0x1b24 <vfprintf+0x1b8>
    1b38:	0e c0       	rjmp	.+28     	; 0x1b56 <vfprintf+0x1ea>
    1b3a:	f4 01       	movw	r30, r8
    1b3c:	17 fd       	sbrc	r17, 7
    1b3e:	85 91       	lpm	r24, Z+
    1b40:	17 ff       	sbrs	r17, 7
    1b42:	81 91       	ld	r24, Z+
    1b44:	4f 01       	movw	r8, r30
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	b3 01       	movw	r22, r6
    1b4a:	20 d1       	rcall	.+576    	; 0x1d8c <fputc>
    1b4c:	e1 10       	cpse	r14, r1
    1b4e:	ea 94       	dec	r14
    1b50:	08 94       	sec
    1b52:	c1 08       	sbc	r12, r1
    1b54:	d1 08       	sbc	r13, r1
    1b56:	c1 14       	cp	r12, r1
    1b58:	d1 04       	cpc	r13, r1
    1b5a:	79 f7       	brne	.-34     	; 0x1b3a <vfprintf+0x1ce>
    1b5c:	df c0       	rjmp	.+446    	; 0x1d1c <vfprintf+0x3b0>
    1b5e:	84 36       	cpi	r24, 0x64	; 100
    1b60:	11 f0       	breq	.+4      	; 0x1b66 <vfprintf+0x1fa>
    1b62:	89 36       	cpi	r24, 0x69	; 105
    1b64:	49 f5       	brne	.+82     	; 0x1bb8 <vfprintf+0x24c>
    1b66:	f5 01       	movw	r30, r10
    1b68:	17 ff       	sbrs	r17, 7
    1b6a:	07 c0       	rjmp	.+14     	; 0x1b7a <vfprintf+0x20e>
    1b6c:	80 81       	ld	r24, Z
    1b6e:	91 81       	ldd	r25, Z+1	; 0x01
    1b70:	a2 81       	ldd	r26, Z+2	; 0x02
    1b72:	b3 81       	ldd	r27, Z+3	; 0x03
    1b74:	24 e0       	ldi	r18, 0x04	; 4
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	08 c0       	rjmp	.+16     	; 0x1b8a <vfprintf+0x21e>
    1b7a:	80 81       	ld	r24, Z
    1b7c:	91 81       	ldd	r25, Z+1	; 0x01
    1b7e:	aa 27       	eor	r26, r26
    1b80:	97 fd       	sbrc	r25, 7
    1b82:	a0 95       	com	r26
    1b84:	ba 2f       	mov	r27, r26
    1b86:	22 e0       	ldi	r18, 0x02	; 2
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	a2 0e       	add	r10, r18
    1b8c:	b3 1e       	adc	r11, r19
    1b8e:	01 2f       	mov	r16, r17
    1b90:	0f 76       	andi	r16, 0x6F	; 111
    1b92:	b7 ff       	sbrs	r27, 7
    1b94:	08 c0       	rjmp	.+16     	; 0x1ba6 <vfprintf+0x23a>
    1b96:	b0 95       	com	r27
    1b98:	a0 95       	com	r26
    1b9a:	90 95       	com	r25
    1b9c:	81 95       	neg	r24
    1b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba0:	af 4f       	sbci	r26, 0xFF	; 255
    1ba2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba4:	00 68       	ori	r16, 0x80	; 128
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	cd 01       	movw	r24, r26
    1baa:	a2 01       	movw	r20, r4
    1bac:	2a e0       	ldi	r18, 0x0A	; 10
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	19 d1       	rcall	.+562    	; 0x1de4 <__ultoa_invert>
    1bb2:	d8 2e       	mov	r13, r24
    1bb4:	d4 18       	sub	r13, r4
    1bb6:	3e c0       	rjmp	.+124    	; 0x1c34 <vfprintf+0x2c8>
    1bb8:	85 37       	cpi	r24, 0x75	; 117
    1bba:	21 f4       	brne	.+8      	; 0x1bc4 <vfprintf+0x258>
    1bbc:	1f 7e       	andi	r17, 0xEF	; 239
    1bbe:	2a e0       	ldi	r18, 0x0A	; 10
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	20 c0       	rjmp	.+64     	; 0x1c04 <vfprintf+0x298>
    1bc4:	19 7f       	andi	r17, 0xF9	; 249
    1bc6:	8f 36       	cpi	r24, 0x6F	; 111
    1bc8:	a9 f0       	breq	.+42     	; 0x1bf4 <vfprintf+0x288>
    1bca:	80 37       	cpi	r24, 0x70	; 112
    1bcc:	20 f4       	brcc	.+8      	; 0x1bd6 <vfprintf+0x26a>
    1bce:	88 35       	cpi	r24, 0x58	; 88
    1bd0:	09 f0       	breq	.+2      	; 0x1bd4 <vfprintf+0x268>
    1bd2:	a7 c0       	rjmp	.+334    	; 0x1d22 <vfprintf+0x3b6>
    1bd4:	0b c0       	rjmp	.+22     	; 0x1bec <vfprintf+0x280>
    1bd6:	80 37       	cpi	r24, 0x70	; 112
    1bd8:	21 f0       	breq	.+8      	; 0x1be2 <vfprintf+0x276>
    1bda:	88 37       	cpi	r24, 0x78	; 120
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <vfprintf+0x274>
    1bde:	a1 c0       	rjmp	.+322    	; 0x1d22 <vfprintf+0x3b6>
    1be0:	01 c0       	rjmp	.+2      	; 0x1be4 <vfprintf+0x278>
    1be2:	10 61       	ori	r17, 0x10	; 16
    1be4:	14 ff       	sbrs	r17, 4
    1be6:	09 c0       	rjmp	.+18     	; 0x1bfa <vfprintf+0x28e>
    1be8:	14 60       	ori	r17, 0x04	; 4
    1bea:	07 c0       	rjmp	.+14     	; 0x1bfa <vfprintf+0x28e>
    1bec:	14 ff       	sbrs	r17, 4
    1bee:	08 c0       	rjmp	.+16     	; 0x1c00 <vfprintf+0x294>
    1bf0:	16 60       	ori	r17, 0x06	; 6
    1bf2:	06 c0       	rjmp	.+12     	; 0x1c00 <vfprintf+0x294>
    1bf4:	28 e0       	ldi	r18, 0x08	; 8
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	05 c0       	rjmp	.+10     	; 0x1c04 <vfprintf+0x298>
    1bfa:	20 e1       	ldi	r18, 0x10	; 16
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <vfprintf+0x298>
    1c00:	20 e1       	ldi	r18, 0x10	; 16
    1c02:	32 e0       	ldi	r19, 0x02	; 2
    1c04:	f5 01       	movw	r30, r10
    1c06:	17 ff       	sbrs	r17, 7
    1c08:	07 c0       	rjmp	.+14     	; 0x1c18 <vfprintf+0x2ac>
    1c0a:	60 81       	ld	r22, Z
    1c0c:	71 81       	ldd	r23, Z+1	; 0x01
    1c0e:	82 81       	ldd	r24, Z+2	; 0x02
    1c10:	93 81       	ldd	r25, Z+3	; 0x03
    1c12:	44 e0       	ldi	r20, 0x04	; 4
    1c14:	50 e0       	ldi	r21, 0x00	; 0
    1c16:	06 c0       	rjmp	.+12     	; 0x1c24 <vfprintf+0x2b8>
    1c18:	60 81       	ld	r22, Z
    1c1a:	71 81       	ldd	r23, Z+1	; 0x01
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	42 e0       	ldi	r20, 0x02	; 2
    1c22:	50 e0       	ldi	r21, 0x00	; 0
    1c24:	a4 0e       	add	r10, r20
    1c26:	b5 1e       	adc	r11, r21
    1c28:	a2 01       	movw	r20, r4
    1c2a:	dc d0       	rcall	.+440    	; 0x1de4 <__ultoa_invert>
    1c2c:	d8 2e       	mov	r13, r24
    1c2e:	d4 18       	sub	r13, r4
    1c30:	01 2f       	mov	r16, r17
    1c32:	0f 77       	andi	r16, 0x7F	; 127
    1c34:	06 ff       	sbrs	r16, 6
    1c36:	09 c0       	rjmp	.+18     	; 0x1c4a <vfprintf+0x2de>
    1c38:	0e 7f       	andi	r16, 0xFE	; 254
    1c3a:	df 14       	cp	r13, r15
    1c3c:	30 f4       	brcc	.+12     	; 0x1c4a <vfprintf+0x2de>
    1c3e:	04 ff       	sbrs	r16, 4
    1c40:	06 c0       	rjmp	.+12     	; 0x1c4e <vfprintf+0x2e2>
    1c42:	02 fd       	sbrc	r16, 2
    1c44:	04 c0       	rjmp	.+8      	; 0x1c4e <vfprintf+0x2e2>
    1c46:	0f 7e       	andi	r16, 0xEF	; 239
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <vfprintf+0x2e2>
    1c4a:	1d 2d       	mov	r17, r13
    1c4c:	01 c0       	rjmp	.+2      	; 0x1c50 <vfprintf+0x2e4>
    1c4e:	1f 2d       	mov	r17, r15
    1c50:	80 2f       	mov	r24, r16
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	04 ff       	sbrs	r16, 4
    1c56:	0c c0       	rjmp	.+24     	; 0x1c70 <vfprintf+0x304>
    1c58:	fe 01       	movw	r30, r28
    1c5a:	ed 0d       	add	r30, r13
    1c5c:	f1 1d       	adc	r31, r1
    1c5e:	20 81       	ld	r18, Z
    1c60:	20 33       	cpi	r18, 0x30	; 48
    1c62:	11 f4       	brne	.+4      	; 0x1c68 <vfprintf+0x2fc>
    1c64:	09 7e       	andi	r16, 0xE9	; 233
    1c66:	09 c0       	rjmp	.+18     	; 0x1c7a <vfprintf+0x30e>
    1c68:	02 ff       	sbrs	r16, 2
    1c6a:	06 c0       	rjmp	.+12     	; 0x1c78 <vfprintf+0x30c>
    1c6c:	1e 5f       	subi	r17, 0xFE	; 254
    1c6e:	05 c0       	rjmp	.+10     	; 0x1c7a <vfprintf+0x30e>
    1c70:	86 78       	andi	r24, 0x86	; 134
    1c72:	90 70       	andi	r25, 0x00	; 0
    1c74:	00 97       	sbiw	r24, 0x00	; 0
    1c76:	09 f0       	breq	.+2      	; 0x1c7a <vfprintf+0x30e>
    1c78:	1f 5f       	subi	r17, 0xFF	; 255
    1c7a:	80 2e       	mov	r8, r16
    1c7c:	99 24       	eor	r9, r9
    1c7e:	03 fd       	sbrc	r16, 3
    1c80:	11 c0       	rjmp	.+34     	; 0x1ca4 <vfprintf+0x338>
    1c82:	00 ff       	sbrs	r16, 0
    1c84:	0c c0       	rjmp	.+24     	; 0x1c9e <vfprintf+0x332>
    1c86:	fd 2c       	mov	r15, r13
    1c88:	1e 15       	cp	r17, r14
    1c8a:	48 f4       	brcc	.+18     	; 0x1c9e <vfprintf+0x332>
    1c8c:	fe 0c       	add	r15, r14
    1c8e:	f1 1a       	sub	r15, r17
    1c90:	1e 2d       	mov	r17, r14
    1c92:	05 c0       	rjmp	.+10     	; 0x1c9e <vfprintf+0x332>
    1c94:	80 e2       	ldi	r24, 0x20	; 32
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	b3 01       	movw	r22, r6
    1c9a:	78 d0       	rcall	.+240    	; 0x1d8c <fputc>
    1c9c:	1f 5f       	subi	r17, 0xFF	; 255
    1c9e:	1e 15       	cp	r17, r14
    1ca0:	c8 f3       	brcs	.-14     	; 0x1c94 <vfprintf+0x328>
    1ca2:	04 c0       	rjmp	.+8      	; 0x1cac <vfprintf+0x340>
    1ca4:	1e 15       	cp	r17, r14
    1ca6:	10 f4       	brcc	.+4      	; 0x1cac <vfprintf+0x340>
    1ca8:	e1 1a       	sub	r14, r17
    1caa:	01 c0       	rjmp	.+2      	; 0x1cae <vfprintf+0x342>
    1cac:	ee 24       	eor	r14, r14
    1cae:	84 fe       	sbrs	r8, 4
    1cb0:	0e c0       	rjmp	.+28     	; 0x1cce <vfprintf+0x362>
    1cb2:	80 e3       	ldi	r24, 0x30	; 48
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	b3 01       	movw	r22, r6
    1cb8:	69 d0       	rcall	.+210    	; 0x1d8c <fputc>
    1cba:	82 fe       	sbrs	r8, 2
    1cbc:	1d c0       	rjmp	.+58     	; 0x1cf8 <vfprintf+0x38c>
    1cbe:	81 fe       	sbrs	r8, 1
    1cc0:	03 c0       	rjmp	.+6      	; 0x1cc8 <vfprintf+0x35c>
    1cc2:	88 e5       	ldi	r24, 0x58	; 88
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	10 c0       	rjmp	.+32     	; 0x1ce8 <vfprintf+0x37c>
    1cc8:	88 e7       	ldi	r24, 0x78	; 120
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	0d c0       	rjmp	.+26     	; 0x1ce8 <vfprintf+0x37c>
    1cce:	c4 01       	movw	r24, r8
    1cd0:	86 78       	andi	r24, 0x86	; 134
    1cd2:	90 70       	andi	r25, 0x00	; 0
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	81 f0       	breq	.+32     	; 0x1cf8 <vfprintf+0x38c>
    1cd8:	81 fc       	sbrc	r8, 1
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <vfprintf+0x374>
    1cdc:	80 e2       	ldi	r24, 0x20	; 32
    1cde:	01 c0       	rjmp	.+2      	; 0x1ce2 <vfprintf+0x376>
    1ce0:	8b e2       	ldi	r24, 0x2B	; 43
    1ce2:	07 fd       	sbrc	r16, 7
    1ce4:	8d e2       	ldi	r24, 0x2D	; 45
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	b3 01       	movw	r22, r6
    1cea:	50 d0       	rcall	.+160    	; 0x1d8c <fputc>
    1cec:	05 c0       	rjmp	.+10     	; 0x1cf8 <vfprintf+0x38c>
    1cee:	80 e3       	ldi	r24, 0x30	; 48
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	b3 01       	movw	r22, r6
    1cf4:	4b d0       	rcall	.+150    	; 0x1d8c <fputc>
    1cf6:	fa 94       	dec	r15
    1cf8:	df 14       	cp	r13, r15
    1cfa:	c8 f3       	brcs	.-14     	; 0x1cee <vfprintf+0x382>
    1cfc:	da 94       	dec	r13
    1cfe:	f2 01       	movw	r30, r4
    1d00:	ed 0d       	add	r30, r13
    1d02:	f1 1d       	adc	r31, r1
    1d04:	80 81       	ld	r24, Z
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	b3 01       	movw	r22, r6
    1d0a:	40 d0       	rcall	.+128    	; 0x1d8c <fputc>
    1d0c:	dd 20       	and	r13, r13
    1d0e:	b1 f7       	brne	.-20     	; 0x1cfc <vfprintf+0x390>
    1d10:	05 c0       	rjmp	.+10     	; 0x1d1c <vfprintf+0x3b0>
    1d12:	80 e2       	ldi	r24, 0x20	; 32
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	b3 01       	movw	r22, r6
    1d18:	39 d0       	rcall	.+114    	; 0x1d8c <fputc>
    1d1a:	ea 94       	dec	r14
    1d1c:	ee 20       	and	r14, r14
    1d1e:	c9 f7       	brne	.-14     	; 0x1d12 <vfprintf+0x3a6>
    1d20:	4d ce       	rjmp	.-870    	; 0x19bc <vfprintf+0x50>
    1d22:	f3 01       	movw	r30, r6
    1d24:	86 81       	ldd	r24, Z+6	; 0x06
    1d26:	97 81       	ldd	r25, Z+7	; 0x07
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <vfprintf+0x3c2>
    1d2a:	8f ef       	ldi	r24, 0xFF	; 255
    1d2c:	9f ef       	ldi	r25, 0xFF	; 255
    1d2e:	2d 96       	adiw	r28, 0x0d	; 13
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	1f 91       	pop	r17
    1d40:	0f 91       	pop	r16
    1d42:	ff 90       	pop	r15
    1d44:	ef 90       	pop	r14
    1d46:	df 90       	pop	r13
    1d48:	cf 90       	pop	r12
    1d4a:	bf 90       	pop	r11
    1d4c:	af 90       	pop	r10
    1d4e:	9f 90       	pop	r9
    1d50:	8f 90       	pop	r8
    1d52:	7f 90       	pop	r7
    1d54:	6f 90       	pop	r6
    1d56:	5f 90       	pop	r5
    1d58:	4f 90       	pop	r4
    1d5a:	3f 90       	pop	r3
    1d5c:	2f 90       	pop	r2
    1d5e:	08 95       	ret

00001d60 <strnlen_P>:
    1d60:	fc 01       	movw	r30, r24
    1d62:	05 90       	lpm	r0, Z+
    1d64:	61 50       	subi	r22, 0x01	; 1
    1d66:	70 40       	sbci	r23, 0x00	; 0
    1d68:	01 10       	cpse	r0, r1
    1d6a:	d8 f7       	brcc	.-10     	; 0x1d62 <strnlen_P+0x2>
    1d6c:	80 95       	com	r24
    1d6e:	90 95       	com	r25
    1d70:	8e 0f       	add	r24, r30
    1d72:	9f 1f       	adc	r25, r31
    1d74:	08 95       	ret

00001d76 <strnlen>:
    1d76:	fc 01       	movw	r30, r24
    1d78:	61 50       	subi	r22, 0x01	; 1
    1d7a:	70 40       	sbci	r23, 0x00	; 0
    1d7c:	01 90       	ld	r0, Z+
    1d7e:	01 10       	cpse	r0, r1
    1d80:	d8 f7       	brcc	.-10     	; 0x1d78 <strnlen+0x2>
    1d82:	80 95       	com	r24
    1d84:	90 95       	com	r25
    1d86:	8e 0f       	add	r24, r30
    1d88:	9f 1f       	adc	r25, r31
    1d8a:	08 95       	ret

00001d8c <fputc>:
    1d8c:	0f 93       	push	r16
    1d8e:	1f 93       	push	r17
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
    1d94:	8c 01       	movw	r16, r24
    1d96:	eb 01       	movw	r28, r22
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	81 ff       	sbrs	r24, 1
    1d9c:	1b c0       	rjmp	.+54     	; 0x1dd4 <fputc+0x48>
    1d9e:	82 ff       	sbrs	r24, 2
    1da0:	0d c0       	rjmp	.+26     	; 0x1dbc <fputc+0x30>
    1da2:	2e 81       	ldd	r18, Y+6	; 0x06
    1da4:	3f 81       	ldd	r19, Y+7	; 0x07
    1da6:	8c 81       	ldd	r24, Y+4	; 0x04
    1da8:	9d 81       	ldd	r25, Y+5	; 0x05
    1daa:	28 17       	cp	r18, r24
    1dac:	39 07       	cpc	r19, r25
    1dae:	64 f4       	brge	.+24     	; 0x1dc8 <fputc+0x3c>
    1db0:	e8 81       	ld	r30, Y
    1db2:	f9 81       	ldd	r31, Y+1	; 0x01
    1db4:	01 93       	st	Z+, r16
    1db6:	f9 83       	std	Y+1, r31	; 0x01
    1db8:	e8 83       	st	Y, r30
    1dba:	06 c0       	rjmp	.+12     	; 0x1dc8 <fputc+0x3c>
    1dbc:	e8 85       	ldd	r30, Y+8	; 0x08
    1dbe:	f9 85       	ldd	r31, Y+9	; 0x09
    1dc0:	80 2f       	mov	r24, r16
    1dc2:	09 95       	icall
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	31 f4       	brne	.+12     	; 0x1dd4 <fputc+0x48>
    1dc8:	8e 81       	ldd	r24, Y+6	; 0x06
    1dca:	9f 81       	ldd	r25, Y+7	; 0x07
    1dcc:	01 96       	adiw	r24, 0x01	; 1
    1dce:	9f 83       	std	Y+7, r25	; 0x07
    1dd0:	8e 83       	std	Y+6, r24	; 0x06
    1dd2:	02 c0       	rjmp	.+4      	; 0x1dd8 <fputc+0x4c>
    1dd4:	0f ef       	ldi	r16, 0xFF	; 255
    1dd6:	1f ef       	ldi	r17, 0xFF	; 255
    1dd8:	c8 01       	movw	r24, r16
    1dda:	df 91       	pop	r29
    1ddc:	cf 91       	pop	r28
    1dde:	1f 91       	pop	r17
    1de0:	0f 91       	pop	r16
    1de2:	08 95       	ret

00001de4 <__ultoa_invert>:
    1de4:	fa 01       	movw	r30, r20
    1de6:	aa 27       	eor	r26, r26
    1de8:	28 30       	cpi	r18, 0x08	; 8
    1dea:	51 f1       	breq	.+84     	; 0x1e40 <__ultoa_invert+0x5c>
    1dec:	20 31       	cpi	r18, 0x10	; 16
    1dee:	81 f1       	breq	.+96     	; 0x1e50 <__ultoa_invert+0x6c>
    1df0:	e8 94       	clt
    1df2:	6f 93       	push	r22
    1df4:	6e 7f       	andi	r22, 0xFE	; 254
    1df6:	6e 5f       	subi	r22, 0xFE	; 254
    1df8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfa:	8f 4f       	sbci	r24, 0xFF	; 255
    1dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dfe:	af 4f       	sbci	r26, 0xFF	; 255
    1e00:	b1 e0       	ldi	r27, 0x01	; 1
    1e02:	3e d0       	rcall	.+124    	; 0x1e80 <__ultoa_invert+0x9c>
    1e04:	b4 e0       	ldi	r27, 0x04	; 4
    1e06:	3c d0       	rcall	.+120    	; 0x1e80 <__ultoa_invert+0x9c>
    1e08:	67 0f       	add	r22, r23
    1e0a:	78 1f       	adc	r23, r24
    1e0c:	89 1f       	adc	r24, r25
    1e0e:	9a 1f       	adc	r25, r26
    1e10:	a1 1d       	adc	r26, r1
    1e12:	68 0f       	add	r22, r24
    1e14:	79 1f       	adc	r23, r25
    1e16:	8a 1f       	adc	r24, r26
    1e18:	91 1d       	adc	r25, r1
    1e1a:	a1 1d       	adc	r26, r1
    1e1c:	6a 0f       	add	r22, r26
    1e1e:	71 1d       	adc	r23, r1
    1e20:	81 1d       	adc	r24, r1
    1e22:	91 1d       	adc	r25, r1
    1e24:	a1 1d       	adc	r26, r1
    1e26:	20 d0       	rcall	.+64     	; 0x1e68 <__ultoa_invert+0x84>
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <__ultoa_invert+0x48>
    1e2a:	68 94       	set
    1e2c:	3f 91       	pop	r19
    1e2e:	2a e0       	ldi	r18, 0x0A	; 10
    1e30:	26 9f       	mul	r18, r22
    1e32:	11 24       	eor	r1, r1
    1e34:	30 19       	sub	r19, r0
    1e36:	30 5d       	subi	r19, 0xD0	; 208
    1e38:	31 93       	st	Z+, r19
    1e3a:	de f6       	brtc	.-74     	; 0x1df2 <__ultoa_invert+0xe>
    1e3c:	cf 01       	movw	r24, r30
    1e3e:	08 95       	ret
    1e40:	46 2f       	mov	r20, r22
    1e42:	47 70       	andi	r20, 0x07	; 7
    1e44:	40 5d       	subi	r20, 0xD0	; 208
    1e46:	41 93       	st	Z+, r20
    1e48:	b3 e0       	ldi	r27, 0x03	; 3
    1e4a:	0f d0       	rcall	.+30     	; 0x1e6a <__ultoa_invert+0x86>
    1e4c:	c9 f7       	brne	.-14     	; 0x1e40 <__ultoa_invert+0x5c>
    1e4e:	f6 cf       	rjmp	.-20     	; 0x1e3c <__ultoa_invert+0x58>
    1e50:	46 2f       	mov	r20, r22
    1e52:	4f 70       	andi	r20, 0x0F	; 15
    1e54:	40 5d       	subi	r20, 0xD0	; 208
    1e56:	4a 33       	cpi	r20, 0x3A	; 58
    1e58:	18 f0       	brcs	.+6      	; 0x1e60 <__ultoa_invert+0x7c>
    1e5a:	49 5d       	subi	r20, 0xD9	; 217
    1e5c:	31 fd       	sbrc	r19, 1
    1e5e:	40 52       	subi	r20, 0x20	; 32
    1e60:	41 93       	st	Z+, r20
    1e62:	02 d0       	rcall	.+4      	; 0x1e68 <__ultoa_invert+0x84>
    1e64:	a9 f7       	brne	.-22     	; 0x1e50 <__ultoa_invert+0x6c>
    1e66:	ea cf       	rjmp	.-44     	; 0x1e3c <__ultoa_invert+0x58>
    1e68:	b4 e0       	ldi	r27, 0x04	; 4
    1e6a:	a6 95       	lsr	r26
    1e6c:	97 95       	ror	r25
    1e6e:	87 95       	ror	r24
    1e70:	77 95       	ror	r23
    1e72:	67 95       	ror	r22
    1e74:	ba 95       	dec	r27
    1e76:	c9 f7       	brne	.-14     	; 0x1e6a <__ultoa_invert+0x86>
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	61 05       	cpc	r22, r1
    1e7c:	71 05       	cpc	r23, r1
    1e7e:	08 95       	ret
    1e80:	9b 01       	movw	r18, r22
    1e82:	ac 01       	movw	r20, r24
    1e84:	0a 2e       	mov	r0, r26
    1e86:	06 94       	lsr	r0
    1e88:	57 95       	ror	r21
    1e8a:	47 95       	ror	r20
    1e8c:	37 95       	ror	r19
    1e8e:	27 95       	ror	r18
    1e90:	ba 95       	dec	r27
    1e92:	c9 f7       	brne	.-14     	; 0x1e86 <__ultoa_invert+0xa2>
    1e94:	62 0f       	add	r22, r18
    1e96:	73 1f       	adc	r23, r19
    1e98:	84 1f       	adc	r24, r20
    1e9a:	95 1f       	adc	r25, r21
    1e9c:	a0 1d       	adc	r26, r0
    1e9e:	08 95       	ret

00001ea0 <_exit>:
    1ea0:	f8 94       	cli

00001ea2 <__stop_program>:
    1ea2:	ff cf       	rjmp	.-2      	; 0x1ea2 <__stop_program>
