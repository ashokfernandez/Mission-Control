
RNDISEthernetHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  000020d6  0000216a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000422  00800152  00800152  000021bc  2**0
                  ALLOC
  3 .stab         00000f90  00000000  00000000  000021bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000030d  00000000  00000000  0000314c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000008a8  00000000  00000000  00003460  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d869  00000000  00000000  00003d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000349e  00000000  00000000  00011571  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005cd5  00000000  00000000  00014a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001994  00000000  00000000  0001a6e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004f4f  00000000  00000000  0001c078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000973b  00000000  00000000  00020fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a30  00000000  00000000  0002a702  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	65 c1       	rjmp	.+714    	; 0x2cc <__ctors_end>
       2:	00 00       	nop
       4:	82 c1       	rjmp	.+772    	; 0x30a <__bad_interrupt>
       6:	00 00       	nop
       8:	80 c1       	rjmp	.+768    	; 0x30a <__bad_interrupt>
       a:	00 00       	nop
       c:	7e c1       	rjmp	.+764    	; 0x30a <__bad_interrupt>
       e:	00 00       	nop
      10:	7c c1       	rjmp	.+760    	; 0x30a <__bad_interrupt>
      12:	00 00       	nop
      14:	7a c1       	rjmp	.+756    	; 0x30a <__bad_interrupt>
      16:	00 00       	nop
      18:	78 c1       	rjmp	.+752    	; 0x30a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	76 c1       	rjmp	.+748    	; 0x30a <__bad_interrupt>
      1e:	00 00       	nop
      20:	74 c1       	rjmp	.+744    	; 0x30a <__bad_interrupt>
      22:	00 00       	nop
      24:	72 c1       	rjmp	.+740    	; 0x30a <__bad_interrupt>
      26:	00 00       	nop
      28:	15 c7       	rjmp	.+3626   	; 0xe54 <__vector_10>
      2a:	00 00       	nop
      2c:	6e c1       	rjmp	.+732    	; 0x30a <__bad_interrupt>
      2e:	00 00       	nop
      30:	6c c1       	rjmp	.+728    	; 0x30a <__bad_interrupt>
      32:	00 00       	nop
      34:	6a c1       	rjmp	.+724    	; 0x30a <__bad_interrupt>
      36:	00 00       	nop
      38:	68 c1       	rjmp	.+720    	; 0x30a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	66 c1       	rjmp	.+716    	; 0x30a <__bad_interrupt>
      3e:	00 00       	nop
      40:	64 c1       	rjmp	.+712    	; 0x30a <__bad_interrupt>
      42:	00 00       	nop
      44:	62 c1       	rjmp	.+708    	; 0x30a <__bad_interrupt>
      46:	00 00       	nop
      48:	60 c1       	rjmp	.+704    	; 0x30a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5e c1       	rjmp	.+700    	; 0x30a <__bad_interrupt>
      4e:	00 00       	nop
      50:	5c c1       	rjmp	.+696    	; 0x30a <__bad_interrupt>
      52:	00 00       	nop
      54:	5a c1       	rjmp	.+692    	; 0x30a <__bad_interrupt>
      56:	00 00       	nop
      58:	58 c1       	rjmp	.+688    	; 0x30a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	56 c1       	rjmp	.+684    	; 0x30a <__bad_interrupt>
      5e:	00 00       	nop
      60:	54 c1       	rjmp	.+680    	; 0x30a <__bad_interrupt>
      62:	00 00       	nop
      64:	52 c1       	rjmp	.+676    	; 0x30a <__bad_interrupt>
      66:	00 00       	nop
      68:	50 c1       	rjmp	.+672    	; 0x30a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4e c1       	rjmp	.+668    	; 0x30a <__bad_interrupt>
      6e:	00 00       	nop
      70:	4c c1       	rjmp	.+664    	; 0x30a <__bad_interrupt>
      72:	00 00       	nop
      74:	4a c1       	rjmp	.+660    	; 0x30a <__bad_interrupt>
      76:	00 00       	nop
      78:	48 c1       	rjmp	.+656    	; 0x30a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	46 c1       	rjmp	.+652    	; 0x30a <__bad_interrupt>
      7e:	00 00       	nop
      80:	44 c1       	rjmp	.+648    	; 0x30a <__bad_interrupt>
      82:	00 00       	nop
      84:	42 c1       	rjmp	.+644    	; 0x30a <__bad_interrupt>
      86:	00 00       	nop
      88:	40 c1       	rjmp	.+640    	; 0x30a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3e c1       	rjmp	.+636    	; 0x30a <__bad_interrupt>
      8e:	00 00       	nop
      90:	3c c1       	rjmp	.+632    	; 0x30a <__bad_interrupt>
      92:	00 00       	nop
      94:	3a c1       	rjmp	.+628    	; 0x30a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4263>:
      98:	1b 5b 33 36 6d 52 4e 44 49 53 20 48 6f 73 74 20     .[36mRNDIS Host 
      a8:	44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b     Demo running....
      b8:	5b 33 37 6d 00                                      [37m.

000000bd <__c.4270>:
      bd:	2a 2a 2a 50 41 43 4b 45 54 20 28 53 69 7a 65 20     ***PACKET (Size 
      cd:	25 64 29 2a 2a 2a 0d 0a 00                          %d)***...

000000d6 <__c.4276>:
      d6:	0d 0a 0d 0a 00                                      .....

000000db <__c.4284>:
      db:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
      eb:	0d 0a 00                                            ...

000000ee <__c.4289>:
      ee:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
      fe:	68 65 64 2e 0d 0a 00                                hed....

00000105 <__c.4296>:
     105:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     115:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     125:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

00000132 <__c.4298>:
     132:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     142:	4e 6f 74 20 61 20 56 61 6c 69 64 20 52 4e 44 49     Not a Valid RNDI
     152:	53 20 43 6c 61 73 73 20 44 65 76 69 63 65 2e 0d     S Class Device..
     162:	0a 00                                               ..

00000164 <__c.4300>:
     164:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     174:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     184:	6f 6e 2e 0d 0a 00                                   on....

0000018a <__c.4302>:
     18a:	45 72 72 6f 72 20 49 6e 69 74 69 61 6c 69 7a 69     Error Initializi
     19a:	6e 67 20 44 65 76 69 63 65 2e 0d 0a 00              ng Device....

000001a7 <__c.4304>:
     1a7:	44 65 76 69 63 65 20 4d 61 78 20 54 72 61 6e 73     Device Max Trans
     1b7:	66 65 72 20 53 69 7a 65 3a 20 25 6c 75 20 62 79     fer Size: %lu by
     1c7:	74 65 73 2e 0d 0a 00                                tes....

000001ce <__c.4307>:
     1ce:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     1de:	76 69 63 65 20 50 61 63 6b 65 74 20 46 69 6c 74     vice Packet Filt
     1ee:	65 72 2e 0d 0a 00                                   er....

000001f4 <__c.4310>:
     1f4:	45 72 72 6f 72 20 47 65 74 74 69 6e 67 20 56 65     Error Getting Ve
     204:	6e 64 6f 72 20 49 44 2e 0d 0a 00                    ndor ID....

0000020f <__c.4312>:
     20f:	44 65 76 69 63 65 20 56 65 6e 64 6f 72 20 49 44     Device Vendor ID
     21f:	3a 20 30 78 25 30 38 6c 58 0d 0a 00                 : 0x%08lX...

0000022b <__c.4314>:
     22b:	52 4e 44 49 53 20 44 65 76 69 63 65 20 45 6e 75     RNDIS Device Enu
     23b:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

00000246 <__c.4319>:
     246:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     256:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     266:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000275 <__c.4326>:
     275:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     285:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     295:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     2a5:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     2b5:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     2c5:	1b 5b 33 37 6d 00 00                                .[37m..

000002cc <__ctors_end>:
     2cc:	11 24       	eor	r1, r1
     2ce:	1f be       	out	0x3f, r1	; 63
     2d0:	cf ef       	ldi	r28, 0xFF	; 255
     2d2:	d0 e2       	ldi	r29, 0x20	; 32
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	cd bf       	out	0x3d, r28	; 61

000002d8 <__do_copy_data>:
     2d8:	11 e0       	ldi	r17, 0x01	; 1
     2da:	a0 e0       	ldi	r26, 0x00	; 0
     2dc:	b1 e0       	ldi	r27, 0x01	; 1
     2de:	e6 ed       	ldi	r30, 0xD6	; 214
     2e0:	f0 e2       	ldi	r31, 0x20	; 32
     2e2:	00 e0       	ldi	r16, 0x00	; 0
     2e4:	0b bf       	out	0x3b, r16	; 59
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <__do_copy_data+0x14>
     2e8:	07 90       	elpm	r0, Z+
     2ea:	0d 92       	st	X+, r0
     2ec:	a2 35       	cpi	r26, 0x52	; 82
     2ee:	b1 07       	cpc	r27, r17
     2f0:	d9 f7       	brne	.-10     	; 0x2e8 <__do_copy_data+0x10>
     2f2:	1b be       	out	0x3b, r1	; 59

000002f4 <__do_clear_bss>:
     2f4:	15 e0       	ldi	r17, 0x05	; 5
     2f6:	a2 e5       	ldi	r26, 0x52	; 82
     2f8:	b1 e0       	ldi	r27, 0x01	; 1
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <.do_clear_bss_start>

000002fc <.do_clear_bss_loop>:
     2fc:	1d 92       	st	X+, r1

000002fe <.do_clear_bss_start>:
     2fe:	a4 37       	cpi	r26, 0x74	; 116
     300:	b1 07       	cpc	r27, r17
     302:	e1 f7       	brne	.-8      	; 0x2fc <.do_clear_bss_loop>
     304:	a8 d0       	rcall	.+336    	; 0x456 <main>
     306:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <_exit>

0000030a <__bad_interrupt>:
     30a:	7a ce       	rjmp	.-780    	; 0x0 <__vectors>

0000030c <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     30c:	9b b1       	in	r25, 0x0b	; 11
     30e:	9f 70       	andi	r25, 0x0F	; 15
     310:	98 2b       	or	r25, r24
     312:	9b b9       	out	0x0b, r25	; 11
			}
     314:	08 95       	ret

00000316 <RNDISHost_Task>:

/** Task to manage an enumerated USB RNDIS device once connected, to display device
 *  received data packets.
 */
void RNDISHost_Task(void)
{
     316:	cf 92       	push	r12
     318:	df 92       	push	r13
     31a:	ef 92       	push	r14
     31c:	ff 92       	push	r15
     31e:	0f 93       	push	r16
     320:	1f 93       	push	r17
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	00 d0       	rcall	.+0      	; 0x328 <RNDISHost_Task+0x12>
     328:	cd b7       	in	r28, 0x3d	; 61
     32a:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     32c:	80 91 5f 05 	lds	r24, 0x055F
     330:	8b 30       	cpi	r24, 0x0B	; 11
     332:	09 f0       	breq	.+2      	; 0x336 <RNDISHost_Task+0x20>
     334:	57 c0       	rjmp	.+174    	; 0x3e4 <RNDISHost_Task+0xce>
	  return;

	if (RNDIS_Host_IsPacketReceived(&Ethernet_RNDIS_Interface))
     336:	88 e0       	ldi	r24, 0x08	; 8
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	0e 94 99 0c 	call	0x1932	; 0x1932 <RNDIS_Host_IsPacketReceived>
     33e:	88 23       	and	r24, r24
     340:	09 f4       	brne	.+2      	; 0x344 <RNDISHost_Task+0x2e>
     342:	50 c0       	rjmp	.+160    	; 0x3e4 <RNDISHost_Task+0xce>
	{
		LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     344:	80 e2       	ldi	r24, 0x20	; 32
     346:	e2 df       	rcall	.-60     	; 0x30c <LEDs_SetAllLEDs>
     348:	88 e0       	ldi	r24, 0x08	; 8

		uint16_t PacketLength;
		RNDIS_Host_ReadPacket(&Ethernet_RNDIS_Interface, &PacketBuffer, &PacketLength);
     34a:	91 e0       	ldi	r25, 0x01	; 1
     34c:	62 e5       	ldi	r22, 0x52	; 82
     34e:	71 e0       	ldi	r23, 0x01	; 1
     350:	ae 01       	movw	r20, r28
     352:	4f 5f       	subi	r20, 0xFF	; 255
     354:	5f 4f       	sbci	r21, 0xFF	; 255
     356:	0e 94 b7 0c 	call	0x196e	; 0x196e <RNDIS_Host_ReadPacket>
     35a:	00 d0       	rcall	.+0      	; 0x35c <RNDISHost_Task+0x46>

		printf_P(PSTR("***PACKET (Size %d)***\r\n"), PacketLength);
     35c:	00 d0       	rcall	.+0      	; 0x35e <RNDISHost_Task+0x48>
     35e:	8d eb       	ldi	r24, 0xBD	; 189
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	ed b7       	in	r30, 0x3d	; 61
     364:	fe b7       	in	r31, 0x3e	; 62
     366:	92 83       	std	Z+2, r25	; 0x02
     368:	81 83       	std	Z+1, r24	; 0x01
     36a:	89 81       	ldd	r24, Y+1	; 0x01
     36c:	9a 81       	ldd	r25, Y+2	; 0x02
     36e:	94 83       	std	Z+4, r25	; 0x04
     370:	83 83       	std	Z+3, r24	; 0x03
     372:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <printf_P>
     376:	82 e5       	ldi	r24, 0x52	; 82
     378:	e8 2e       	mov	r14, r24
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	f8 2e       	mov	r15, r24
     37e:	0f 90       	pop	r0

		for (uint16_t i = 0; i < PacketLength; i++)
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	00 e0       	ldi	r16, 0x00	; 0
     388:	10 e0       	ldi	r17, 0x00	; 0
     38a:	90 e0       	ldi	r25, 0x00	; 0
		  printf("0x%02x ", PacketBuffer[i]);
     38c:	c9 2e       	mov	r12, r25
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	d9 2e       	mov	r13, r25
     392:	16 c0       	rjmp	.+44     	; 0x3c0 <RNDISHost_Task+0xaa>
		uint16_t PacketLength;
		RNDIS_Host_ReadPacket(&Ethernet_RNDIS_Interface, &PacketBuffer, &PacketLength);

		printf_P(PSTR("***PACKET (Size %d)***\r\n"), PacketLength);

		for (uint16_t i = 0; i < PacketLength; i++)
     394:	f7 01       	movw	r30, r14
		  printf("0x%02x ", PacketBuffer[i]);
     396:	81 91       	ld	r24, Z+
     398:	7f 01       	movw	r14, r30
     39a:	00 d0       	rcall	.+0      	; 0x39c <RNDISHost_Task+0x86>
     39c:	00 d0       	rcall	.+0      	; 0x39e <RNDISHost_Task+0x88>
     39e:	ed b7       	in	r30, 0x3d	; 61
     3a0:	fe b7       	in	r31, 0x3e	; 62
     3a2:	d2 82       	std	Z+2, r13	; 0x02
     3a4:	c1 82       	std	Z+1, r12	; 0x01
     3a6:	99 27       	eor	r25, r25
     3a8:	87 fd       	sbrc	r24, 7
     3aa:	90 95       	com	r25
     3ac:	94 83       	std	Z+4, r25	; 0x04
     3ae:	83 83       	std	Z+3, r24	; 0x03
     3b0:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <printf>
     3b4:	0f 5f       	subi	r16, 0xFF	; 255
		uint16_t PacketLength;
		RNDIS_Host_ReadPacket(&Ethernet_RNDIS_Interface, &PacketBuffer, &PacketLength);

		printf_P(PSTR("***PACKET (Size %d)***\r\n"), PacketLength);

		for (uint16_t i = 0; i < PacketLength; i++)
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	9a 81       	ldd	r25, Y+2	; 0x02
     3c4:	08 17       	cp	r16, r24
     3c6:	19 07       	cpc	r17, r25
     3c8:	28 f3       	brcs	.-54     	; 0x394 <RNDISHost_Task+0x7e>
     3ca:	00 d0       	rcall	.+0      	; 0x3cc <RNDISHost_Task+0xb6>
		  printf("0x%02x ", PacketBuffer[i]);

		printf_P(PSTR("\r\n\r\n"));
     3cc:	86 ed       	ldi	r24, 0xD6	; 214
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	ed b7       	in	r30, 0x3d	; 61
     3d2:	fe b7       	in	r31, 0x3e	; 62
     3d4:	92 83       	std	Z+2, r25	; 0x02
     3d6:	81 83       	std	Z+1, r24	; 0x01
     3d8:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <printf_P>
     3dc:	0f 90       	pop	r0

		LEDs_SetAllLEDs(LEDMASK_USB_READY);
     3de:	0f 90       	pop	r0
     3e0:	80 e6       	ldi	r24, 0x60	; 96
     3e2:	94 df       	rcall	.-216    	; 0x30c <LEDs_SetAllLEDs>
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
	}
}
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
     3f0:	ff 90       	pop	r15
     3f2:	ef 90       	pop	r14
     3f4:	df 90       	pop	r13
     3f6:	cf 90       	pop	r12
     3f8:	08 95       	ret

000003fa <SetupHardware>:
     3fa:	84 b7       	in	r24, 0x34	; 52
     3fc:	87 7f       	andi	r24, 0xF7	; 247

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     3fe:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     400:	28 e1       	ldi	r18, 0x18	; 24
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	f8 94       	cli
     406:	20 93 60 00 	sts	0x0060, r18
     40a:	10 92 60 00 	sts	0x0060, r1
     40e:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	80 e8       	ldi	r24, 0x80	; 128
     414:	0f b6       	in	r0, 0x3f	; 63
     416:	f8 94       	cli
     418:	80 93 61 00 	sts	0x0061, r24
     41c:	90 93 61 00 	sts	0x0061, r25
     420:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     422:	83 e3       	ldi	r24, 0x33	; 51
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	90 93 cd 00 	sts	0x00CD, r25
     42a:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     42e:	86 e0       	ldi	r24, 0x06	; 6
     430:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     434:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     438:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     43c:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     43e:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     440:	8a b1       	in	r24, 0x0a	; 10
     442:	80 6f       	ori	r24, 0xF0	; 240
     444:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     446:	8b b1       	in	r24, 0x0b	; 11
     448:	8f 70       	andi	r24, 0x0F	; 15
     44a:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     44c:	e8 d4       	rcall	.+2512   	; 0xe1e <USB_Init>
     44e:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <Serial_CreateStream>

00000456 <main>:
     456:	d1 df       	rcall	.-94     	; 0x3fa <SetupHardware>
}
     458:	88 e9       	ldi	r24, 0x98	; 152
 */
int main(void)
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "RNDIS Host Demo running.\r\n" ESC_FG_WHITE));
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <puts_P>
     460:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     462:	54 df       	rcall	.-344    	; 0x30c <LEDs_SetAllLEDs>
     464:	78 94       	sei
     466:	57 df       	rcall	.-338    	; 0x316 <RNDISHost_Task>
	sei();
     468:	72 d7       	rcall	.+3812   	; 0x134e <USB_USBTask>

	for (;;)
	{
		RNDISHost_Task();
     46a:	fd cf       	rjmp	.-6      	; 0x466 <main+0x10>

0000046c <EVENT_USB_Host_DeviceAttached>:
     46c:	8b ed       	ldi	r24, 0xDB	; 219

		RNDIS_Host_USBTask(&Ethernet_RNDIS_Interface);
		USB_USBTask();
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <puts_P>
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     474:	80 ea       	ldi	r24, 0xA0	; 160
     476:	4a cf       	rjmp	.-364    	; 0x30c <LEDs_SetAllLEDs>

00000478 <EVENT_USB_Host_DeviceUnattached>:
     478:	8e ee       	ldi	r24, 0xEE	; 238
}
     47a:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     47c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     480:	80 e1       	ldi	r24, 0x10	; 16
     482:	44 cf       	rjmp	.-376    	; 0x30c <LEDs_SetAllLEDs>

00000484 <EVENT_USB_Host_DeviceEnumerationComplete>:
     484:	0f 93       	push	r16
}
     486:	1f 93       	push	r17

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	cd b7       	in	r28, 0x3d	; 61
     48e:	de b7       	in	r29, 0x3e	; 62
     490:	ca 50       	subi	r28, 0x0A	; 10
     492:	d2 40       	sbci	r29, 0x02	; 2
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	f8 94       	cli
     498:	de bf       	out	0x3e, r29	; 62
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     49e:	80 ea       	ldi	r24, 0xA0	; 160
     4a0:	35 df       	rcall	.-406    	; 0x30c <LEDs_SetAllLEDs>
     4a2:	81 e0       	ldi	r24, 0x01	; 1

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     4a4:	be 01       	movw	r22, r28
     4a6:	6f 5f       	subi	r22, 0xFF	; 255
     4a8:	7f 4f       	sbci	r23, 0xFF	; 255
     4aa:	ae 01       	movw	r20, r28
     4ac:	45 5f       	subi	r20, 0xF5	; 245
     4ae:	5f 4f       	sbci	r21, 0xFF	; 255
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	32 e0       	ldi	r19, 0x02	; 2
     4b4:	62 d5       	rcall	.+2756   	; 0xf7a <USB_Host_GetDeviceConfigDescriptor>
     4b6:	88 23       	and	r24, r24
     4b8:	19 f0       	breq	.+6      	; 0x4c0 <EVENT_USB_Host_DeviceEnumerationComplete+0x3c>
     4ba:	85 e0       	ldi	r24, 0x05	; 5
     4bc:	91 e0       	ldi	r25, 0x01	; 1
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     4be:	13 c0       	rjmp	.+38     	; 0x4e6 <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
     4c0:	69 81       	ldd	r22, Y+1	; 0x01
     4c2:	7a 81       	ldd	r23, Y+2	; 0x02
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (RNDIS_Host_ConfigurePipes(&Ethernet_RNDIS_Interface,
     4c4:	88 e0       	ldi	r24, 0x08	; 8
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	ae 01       	movw	r20, r28
     4ca:	45 5f       	subi	r20, 0xF5	; 245
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	b3 d7       	rcall	.+3942   	; 0x1436 <RNDIS_Host_ConfigurePipes>
     4d0:	88 23       	and	r24, r24
     4d2:	19 f0       	breq	.+6      	; 0x4da <EVENT_USB_Host_DeviceEnumerationComplete+0x56>
     4d4:	82 e3       	ldi	r24, 0x32	; 50
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	06 c0       	rjmp	.+12     	; 0x4e6 <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
	                              ConfigDescriptorSize, ConfigDescriptorData) != RNDIS_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid RNDIS Class Device.\r\n"));
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	13 d7       	rcall	.+3622   	; 0x1304 <USB_Host_SetDeviceConfiguration>
     4de:	88 23       	and	r24, r24
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     4e0:	31 f0       	breq	.+12     	; 0x4ee <EVENT_USB_Host_DeviceEnumerationComplete+0x6a>
     4e2:	84 e6       	ldi	r24, 0x64	; 100
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <puts_P>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     4ea:	80 e9       	ldi	r24, 0x90	; 144
     4ec:	7a c0       	rjmp	.+244    	; 0x5e2 <EVENT_USB_Host_DeviceEnumerationComplete+0x15e>
     4ee:	88 e0       	ldi	r24, 0x08	; 8
     4f0:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4f2:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <RNDIS_Host_InitializeDevice>
		return;
	}

	if (RNDIS_Host_InitializeDevice(&Ethernet_RNDIS_Interface) != HOST_SENDCONTROL_Successful)
     4f6:	88 23       	and	r24, r24
     4f8:	19 f0       	breq	.+6      	; 0x500 <EVENT_USB_Host_DeviceEnumerationComplete+0x7c>
     4fa:	8a e8       	ldi	r24, 0x8A	; 138
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	4a c0       	rjmp	.+148    	; 0x594 <EVENT_USB_Host_DeviceEnumerationComplete+0x110>
     500:	00 d0       	rcall	.+0      	; 0x502 <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
	{
		puts_P(PSTR("Error Initializing Device.\r\n"));
     502:	00 d0       	rcall	.+0      	; 0x504 <EVENT_USB_Host_DeviceEnumerationComplete+0x80>
     504:	00 d0       	rcall	.+0      	; 0x506 <EVENT_USB_Host_DeviceEnumerationComplete+0x82>
     506:	87 ea       	ldi	r24, 0xA7	; 167
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	printf_P(PSTR("Device Max Transfer Size: %lu bytes.\r\n"), Ethernet_RNDIS_Interface.State.DeviceMaxPacketSize);
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	ed b7       	in	r30, 0x3d	; 61
     50c:	fe b7       	in	r31, 0x3e	; 62
     50e:	92 83       	std	Z+2, r25	; 0x02
     510:	81 83       	std	Z+1, r24	; 0x01
     512:	80 91 20 01 	lds	r24, 0x0120
     516:	90 91 21 01 	lds	r25, 0x0121
     51a:	a0 91 22 01 	lds	r26, 0x0122
     51e:	b0 91 23 01 	lds	r27, 0x0123
     522:	83 83       	std	Z+3, r24	; 0x03
     524:	94 83       	std	Z+4, r25	; 0x04
     526:	a5 83       	std	Z+5, r26	; 0x05
     528:	b6 83       	std	Z+6, r27	; 0x06
     52a:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <printf_P>
     52e:	8d e0       	ldi	r24, 0x0D	; 13
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0

	uint32_t PacketFilter = (REMOTE_NDIS_PACKET_DIRECTED | REMOTE_NDIS_PACKET_BROADCAST | REMOTE_NDIS_PACKET_ALL_MULTICAST);
     536:	8f 83       	std	Y+7, r24	; 0x07
     538:	98 87       	std	Y+8, r25	; 0x08
     53a:	a9 87       	std	Y+9, r26	; 0x09
     53c:	ba 87       	std	Y+10, r27	; 0x0a
     53e:	8d b7       	in	r24, 0x3d	; 61
     540:	9e b7       	in	r25, 0x3e	; 62
     542:	06 96       	adiw	r24, 0x06	; 6
     544:	0f b6       	in	r0, 0x3f	; 63
	if (RNDIS_Host_SetRNDISProperty(&Ethernet_RNDIS_Interface, OID_GEN_CURRENT_PACKET_FILTER,
     546:	f8 94       	cli
     548:	9e bf       	out	0x3e, r25	; 62
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	8d bf       	out	0x3d, r24	; 61
     54e:	88 e0       	ldi	r24, 0x08	; 8
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	4e e0       	ldi	r20, 0x0E	; 14
     554:	51 e0       	ldi	r21, 0x01	; 1
     556:	61 e0       	ldi	r22, 0x01	; 1
     558:	70 e0       	ldi	r23, 0x00	; 0
     55a:	9e 01       	movw	r18, r28
     55c:	29 5f       	subi	r18, 0xF9	; 249
     55e:	3f 4f       	sbci	r19, 0xFF	; 255
     560:	04 e0       	ldi	r16, 0x04	; 4
     562:	10 e0       	ldi	r17, 0x00	; 0
     564:	0e 94 4f 0b 	call	0x169e	; 0x169e <RNDIS_Host_SetRNDISProperty>
     568:	88 23       	and	r24, r24
     56a:	19 f0       	breq	.+6      	; 0x572 <EVENT_USB_Host_DeviceEnumerationComplete+0xee>
     56c:	8e ec       	ldi	r24, 0xCE	; 206
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	11 c0       	rjmp	.+34     	; 0x594 <EVENT_USB_Host_DeviceEnumerationComplete+0x110>
     572:	88 e0       	ldi	r24, 0x08	; 8
	                                &PacketFilter, sizeof(PacketFilter)) != HOST_SENDCONTROL_Successful)
	{
		puts_P(PSTR("Error Setting Device Packet Filter.\r\n"));
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	4c e0       	ldi	r20, 0x0C	; 12
     578:	51 e0       	ldi	r21, 0x01	; 1
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	uint32_t VendorID;
	if (RNDIS_Host_QueryRNDISProperty(&Ethernet_RNDIS_Interface, OID_GEN_VENDOR_ID,
     57a:	61 e0       	ldi	r22, 0x01	; 1
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	9e 01       	movw	r18, r28
     580:	2d 5f       	subi	r18, 0xFD	; 253
     582:	3f 4f       	sbci	r19, 0xFF	; 255
     584:	04 e0       	ldi	r16, 0x04	; 4
     586:	10 e0       	ldi	r17, 0x00	; 0
     588:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <RNDIS_Host_QueryRNDISProperty>
     58c:	88 23       	and	r24, r24
     58e:	49 f0       	breq	.+18     	; 0x5a2 <EVENT_USB_Host_DeviceEnumerationComplete+0x11e>
     590:	84 ef       	ldi	r24, 0xF4	; 244
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <puts_P>
	                                  &VendorID, sizeof(VendorID)) != HOST_SENDCONTROL_Successful)
	{
		puts_P(PSTR("Error Getting Vendor ID.\r\n"));
     598:	80 e9       	ldi	r24, 0x90	; 144
     59a:	b8 de       	rcall	.-656    	; 0x30c <LEDs_SetAllLEDs>
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	b2 d6       	rcall	.+3428   	; 0x1304 <USB_Host_SetDeviceConfiguration>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5a0:	21 c0       	rjmp	.+66     	; 0x5e4 <EVENT_USB_Host_DeviceEnumerationComplete+0x160>
     5a2:	00 d0       	rcall	.+0      	; 0x5a4 <EVENT_USB_Host_DeviceEnumerationComplete+0x120>
     5a4:	00 d0       	rcall	.+0      	; 0x5a6 <EVENT_USB_Host_DeviceEnumerationComplete+0x122>
		USB_Host_SetDeviceConfiguration(0);
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <EVENT_USB_Host_DeviceEnumerationComplete+0x124>
     5a8:	8f e0       	ldi	r24, 0x0F	; 15
     5aa:	92 e0       	ldi	r25, 0x02	; 2
		return;
     5ac:	ed b7       	in	r30, 0x3d	; 61
	}

	printf_P(PSTR("Device Vendor ID: 0x%08lX\r\n"), VendorID);
     5ae:	fe b7       	in	r31, 0x3e	; 62
     5b0:	92 83       	std	Z+2, r25	; 0x02
     5b2:	81 83       	std	Z+1, r24	; 0x01
     5b4:	8b 81       	ldd	r24, Y+3	; 0x03
     5b6:	9c 81       	ldd	r25, Y+4	; 0x04
     5b8:	ad 81       	ldd	r26, Y+5	; 0x05
     5ba:	be 81       	ldd	r27, Y+6	; 0x06
     5bc:	83 83       	std	Z+3, r24	; 0x03
     5be:	94 83       	std	Z+4, r25	; 0x04
     5c0:	a5 83       	std	Z+5, r26	; 0x05
     5c2:	b6 83       	std	Z+6, r27	; 0x06
     5c4:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <printf_P>
     5c8:	8d b7       	in	r24, 0x3d	; 61
     5ca:	9e b7       	in	r25, 0x3e	; 62
     5cc:	06 96       	adiw	r24, 0x06	; 6
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	9e bf       	out	0x3e, r25	; 62

	puts_P(PSTR("RNDIS Device Enumerated.\r\n"));
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	8d bf       	out	0x3d, r24	; 61
     5d8:	8b e2       	ldi	r24, 0x2B	; 43
     5da:	92 e0       	ldi	r25, 0x02	; 2
     5dc:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <puts_P>
     5e0:	80 e6       	ldi	r24, 0x60	; 96
     5e2:	94 de       	rcall	.-728    	; 0x30c <LEDs_SetAllLEDs>
     5e4:	c6 5f       	subi	r28, 0xF6	; 246
     5e6:	dd 4f       	sbci	r29, 0xFD	; 253
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	cd bf       	out	0x3d, r28	; 61
}
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	08 95       	ret

000005fc <EVENT_USB_Host_HostError>:
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	0f 92       	push	r0
     602:	cd b7       	in	r28, 0x3d	; 61
     604:	de b7       	in	r29, 0x3e	; 62
     606:	89 83       	std	Y+1, r24	; 0x01
     608:	a2 d3       	rcall	.+1860   	; 0xd4e <USB_Disable>

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();
     60a:	00 d0       	rcall	.+0      	; 0x60c <EVENT_USB_Host_HostError+0x10>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     60c:	00 d0       	rcall	.+0      	; 0x60e <EVENT_USB_Host_HostError+0x12>
     60e:	ed b7       	in	r30, 0x3d	; 61
     610:	fe b7       	in	r31, 0x3e	; 62
     612:	31 96       	adiw	r30, 0x01	; 1
     614:	26 e4       	ldi	r18, 0x46	; 70
     616:	32 e0       	ldi	r19, 0x02	; 2
     618:	ad b7       	in	r26, 0x3d	; 61
     61a:	be b7       	in	r27, 0x3e	; 62
     61c:	12 96       	adiw	r26, 0x02	; 2
     61e:	3c 93       	st	X, r19
     620:	2e 93       	st	-X, r18
     622:	11 97       	sbiw	r26, 0x01	; 1
     624:	89 81       	ldd	r24, Y+1	; 0x01
     626:	82 83       	std	Z+2, r24	; 0x02
     628:	13 82       	std	Z+3, r1	; 0x03
     62a:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <printf_P>
     62e:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     630:	0f 90       	pop	r0
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
     636:	80 e9       	ldi	r24, 0x90	; 144
     638:	69 de       	rcall	.-814    	; 0x30c <LEDs_SetAllLEDs>
     63a:	ff cf       	rjmp	.-2      	; 0x63a <EVENT_USB_Host_HostError+0x3e>

0000063c <EVENT_USB_Host_DeviceEnumerationFailed>:
     63c:	90 91 5f 05 	lds	r25, 0x055F
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     640:	2d b7       	in	r18, 0x3d	; 61
     642:	3e b7       	in	r19, 0x3e	; 62
     644:	28 50       	subi	r18, 0x08	; 8
     646:	30 40       	sbci	r19, 0x00	; 0
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	f8 94       	cli
     64c:	3e bf       	out	0x3e, r19	; 62
     64e:	0f be       	out	0x3f, r0	; 63
     650:	2d bf       	out	0x3d, r18	; 61
     652:	ed b7       	in	r30, 0x3d	; 61
     654:	fe b7       	in	r31, 0x3e	; 62
     656:	31 96       	adiw	r30, 0x01	; 1
     658:	25 e7       	ldi	r18, 0x75	; 117
     65a:	32 e0       	ldi	r19, 0x02	; 2
     65c:	ad b7       	in	r26, 0x3d	; 61
     65e:	be b7       	in	r27, 0x3e	; 62
     660:	12 96       	adiw	r26, 0x02	; 2
     662:	3c 93       	st	X, r19
     664:	2e 93       	st	-X, r18
     666:	11 97       	sbiw	r26, 0x01	; 1
     668:	82 83       	std	Z+2, r24	; 0x02
     66a:	13 82       	std	Z+3, r1	; 0x03
     66c:	64 83       	std	Z+4, r22	; 0x04
     66e:	15 82       	std	Z+5, r1	; 0x05
     670:	96 83       	std	Z+6, r25	; 0x06
     672:	17 82       	std	Z+7, r1	; 0x07
     674:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     678:	2d b7       	in	r18, 0x3d	; 61
     67a:	3e b7       	in	r19, 0x3e	; 62
     67c:	28 5f       	subi	r18, 0xF8	; 248
     67e:	3f 4f       	sbci	r19, 0xFF	; 255
     680:	0f b6       	in	r0, 0x3f	; 63
     682:	f8 94       	cli
     684:	3e bf       	out	0x3e, r19	; 62
     686:	0f be       	out	0x3f, r0	; 63
     688:	2d bf       	out	0x3d, r18	; 61
     68a:	80 e9       	ldi	r24, 0x90	; 144
     68c:	3f ce       	rjmp	.-898    	; 0x30c <LEDs_SetAllLEDs>

0000068e <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     68e:	80 91 9e 00 	lds	r24, 0x009E
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	81 70       	andi	r24, 0x01	; 1
     696:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     698:	20 91 a0 00 	lds	r18, 0x00A0
     69c:	2d 7f       	andi	r18, 0xFD	; 253
     69e:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     6a2:	20 91 9e 00 	lds	r18, 0x009E
     6a6:	22 60       	ori	r18, 0x02	; 2
     6a8:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     6ac:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     6b0:	21 fd       	sbrc	r18, 1
     6b2:	fc cf       	rjmp	.-8      	; 0x6ac <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6b4:	20 91 9e 00 	lds	r18, 0x009E
     6b8:	21 60       	ori	r18, 0x01	; 1
     6ba:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     6be:	10 92 55 05 	sts	0x0555, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     6c2:	20 91 a0 00 	lds	r18, 0x00A0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	20 72       	andi	r18, 0x20	; 32
     6ca:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     6cc:	40 91 a0 00 	lds	r20, 0x00A0
     6d0:	4f 7d       	andi	r20, 0xDF	; 223
     6d2:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6d6:	40 91 9f 00 	lds	r20, 0x009F
     6da:	4f 7d       	andi	r20, 0xDF	; 223
     6dc:	40 93 9f 00 	sts	0x009F, r20
     6e0:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     6e2:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     6e6:	55 ff       	sbrs	r21, 5
     6e8:	0b c0       	rjmp	.+22     	; 0x700 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6ea:	40 91 9f 00 	lds	r20, 0x009F
     6ee:	4f 7d       	andi	r20, 0xDF	; 223
     6f0:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     6f4:	40 91 9f 00 	lds	r20, 0x009F
     6f8:	4d 7f       	andi	r20, 0xFD	; 253
     6fa:	40 93 9f 00 	sts	0x009F, r20
     6fe:	08 c0       	rjmp	.+16     	; 0x710 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     700:	ef ec       	ldi	r30, 0xCF	; 207
     702:	f7 e0       	ldi	r31, 0x07	; 7
     704:	31 97       	sbiw	r30, 0x01	; 1
     706:	f1 f7       	brne	.-4      	; 0x704 <USB_Host_ResetDevice+0x76>
     708:	00 c0       	rjmp	.+0      	; 0x70a <USB_Host_ResetDevice+0x7c>
     70a:	00 00       	nop
     70c:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     70e:	49 f7       	brne	.-46     	; 0x6e2 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     710:	21 15       	cp	r18, r1
     712:	31 05       	cpc	r19, r1
     714:	29 f0       	breq	.+10     	; 0x720 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     716:	20 91 a0 00 	lds	r18, 0x00A0
     71a:	20 62       	ori	r18, 0x20	; 32
     71c:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     720:	00 97       	sbiw	r24, 0x00	; 0
     722:	29 f4       	brne	.+10     	; 0x72e <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     724:	80 91 9e 00 	lds	r24, 0x009E
     728:	8e 7f       	andi	r24, 0xFE	; 254
     72a:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     72e:	80 91 a0 00 	lds	r24, 0x00A0
     732:	82 60       	ori	r24, 0x02	; 2
     734:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     738:	08 95       	ret

0000073a <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     73a:	40 91 9e 00 	lds	r20, 0x009E
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	41 70       	andi	r20, 0x01	; 1
     742:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     744:	20 91 a0 00 	lds	r18, 0x00A0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	20 72       	andi	r18, 0x20	; 32
     74c:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     74e:	90 91 a0 00 	lds	r25, 0x00A0
     752:	9f 7d       	andi	r25, 0xDF	; 223
     754:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     758:	90 91 9f 00 	lds	r25, 0x009F
     75c:	9f 7d       	andi	r25, 0xDF	; 223
     75e:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     762:	90 91 9e 00 	lds	r25, 0x009E
     766:	91 60       	ori	r25, 0x01	; 1
     768:	90 93 9e 00 	sts	0x009E, r25
     76c:	26 c0       	rjmp	.+76     	; 0x7ba <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     76e:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     772:	95 ff       	sbrs	r25, 5
     774:	06 c0       	rjmp	.+12     	; 0x782 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     776:	90 91 9f 00 	lds	r25, 0x009F
     77a:	9f 7d       	andi	r25, 0xDF	; 223
     77c:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     780:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     782:	90 91 5f 05 	lds	r25, 0x055F
     786:	91 30       	cpi	r25, 0x01	; 1
     788:	d9 f0       	breq	.+54     	; 0x7c0 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     78a:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     78e:	94 ff       	sbrs	r25, 4
     790:	09 c0       	rjmp	.+18     	; 0x7a4 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     792:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     796:	80 91 a6 00 	lds	r24, 0x00A6
     79a:	8f 7e       	andi	r24, 0xEF	; 239
     79c:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     7a0:	82 e0       	ldi	r24, 0x02	; 2

			break;
     7a2:	0f c0       	rjmp	.+30     	; 0x7c2 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     7a4:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     7a8:	91 ff       	sbrs	r25, 1
     7aa:	07 c0       	rjmp	.+14     	; 0x7ba <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     7ac:	80 91 a6 00 	lds	r24, 0x00A6
     7b0:	8d 7f       	andi	r24, 0xFD	; 253
     7b2:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     7b6:	83 e0       	ldi	r24, 0x03	; 3

			break;
     7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     7ba:	88 23       	and	r24, r24
     7bc:	c1 f6       	brne	.-80     	; 0x76e <USB_Host_WaitMS+0x34>
     7be:	01 c0       	rjmp	.+2      	; 0x7c2 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     7c0:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     7c2:	41 15       	cp	r20, r1
     7c4:	51 05       	cpc	r21, r1
     7c6:	29 f4       	brne	.+10     	; 0x7d2 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     7c8:	90 91 9e 00 	lds	r25, 0x009E
     7cc:	9e 7f       	andi	r25, 0xFE	; 254
     7ce:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     7d2:	21 15       	cp	r18, r1
     7d4:	31 05       	cpc	r19, r1
     7d6:	29 f0       	breq	.+10     	; 0x7e2 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     7d8:	90 91 a0 00 	lds	r25, 0x00A0
     7dc:	90 62       	ori	r25, 0x20	; 32
     7de:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     7e2:	08 95       	ret

000007e4 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
     7f0:	28 97       	sbiw	r28, 0x08	; 8
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	f8 94       	cli
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     7fc:	80 91 5f 05 	lds	r24, 0x055F
     800:	85 30       	cpi	r24, 0x05	; 5
     802:	09 f4       	brne	.+2      	; 0x806 <USB_Host_ProcessNextHostState+0x22>
     804:	99 c0       	rjmp	.+306    	; 0x938 <USB_Host_ProcessNextHostState+0x154>
     806:	86 30       	cpi	r24, 0x06	; 6
     808:	68 f4       	brcc	.+26     	; 0x824 <USB_Host_ProcessNextHostState+0x40>
     80a:	82 30       	cpi	r24, 0x02	; 2
     80c:	c1 f1       	breq	.+112    	; 0x87e <USB_Host_ProcessNextHostState+0x9a>
     80e:	83 30       	cpi	r24, 0x03	; 3
     810:	18 f4       	brcc	.+6      	; 0x818 <USB_Host_ProcessNextHostState+0x34>
     812:	88 23       	and	r24, r24
     814:	a1 f0       	breq	.+40     	; 0x83e <USB_Host_ProcessNextHostState+0x5a>
     816:	04 c1       	rjmp	.+520    	; 0xa20 <USB_Host_ProcessNextHostState+0x23c>
     818:	83 30       	cpi	r24, 0x03	; 3
     81a:	d9 f1       	breq	.+118    	; 0x892 <USB_Host_ProcessNextHostState+0xae>
     81c:	84 30       	cpi	r24, 0x04	; 4
     81e:	09 f0       	breq	.+2      	; 0x822 <USB_Host_ProcessNextHostState+0x3e>
     820:	ff c0       	rjmp	.+510    	; 0xa20 <USB_Host_ProcessNextHostState+0x23c>
     822:	62 c0       	rjmp	.+196    	; 0x8e8 <USB_Host_ProcessNextHostState+0x104>
     824:	87 30       	cpi	r24, 0x07	; 7
     826:	09 f4       	brne	.+2      	; 0x82a <USB_Host_ProcessNextHostState+0x46>
     828:	9e c0       	rjmp	.+316    	; 0x966 <USB_Host_ProcessNextHostState+0x182>
     82a:	87 30       	cpi	r24, 0x07	; 7
     82c:	08 f4       	brcc	.+2      	; 0x830 <USB_Host_ProcessNextHostState+0x4c>
     82e:	8f c0       	rjmp	.+286    	; 0x94e <USB_Host_ProcessNextHostState+0x16a>
     830:	88 30       	cpi	r24, 0x08	; 8
     832:	09 f4       	brne	.+2      	; 0x836 <USB_Host_ProcessNextHostState+0x52>
     834:	b8 c0       	rjmp	.+368    	; 0x9a6 <USB_Host_ProcessNextHostState+0x1c2>
     836:	89 30       	cpi	r24, 0x09	; 9
     838:	09 f0       	breq	.+2      	; 0x83c <USB_Host_ProcessNextHostState+0x58>
     83a:	f2 c0       	rjmp	.+484    	; 0xa20 <USB_Host_ProcessNextHostState+0x23c>
     83c:	d9 c0       	rjmp	.+434    	; 0x9f0 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     83e:	00 91 52 05 	lds	r16, 0x0552
     842:	10 91 53 05 	lds	r17, 0x0553
     846:	01 15       	cp	r16, r1
     848:	11 05       	cpc	r17, r1
     84a:	09 f4       	brne	.+2      	; 0x84e <USB_Host_ProcessNextHostState+0x6a>
     84c:	e9 c0       	rjmp	.+466    	; 0xa20 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	74 df       	rcall	.-280    	; 0x73a <USB_Host_WaitMS>
     852:	68 2f       	mov	r22, r24
     854:	88 23       	and	r24, r24
     856:	31 f0       	breq	.+12     	; 0x864 <USB_Host_ProcessNextHostState+0x80>
     858:	80 91 54 05 	lds	r24, 0x0554
				{
					USB_HostState = PostWaitState;
     85c:	80 93 5f 05 	sts	0x055F, r24
     860:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     862:	d2 c0       	rjmp	.+420    	; 0xa08 <USB_Host_ProcessNextHostState+0x224>
					break;
     864:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
     866:	10 40       	sbci	r17, 0x00	; 0
     868:	10 93 53 05 	sts	0x0553, r17
     86c:	00 93 52 05 	sts	0x0552, r16
     870:	01 15       	cp	r16, r1
     872:	11 05       	cpc	r17, r1
     874:	09 f0       	breq	.+2      	; 0x878 <USB_Host_ProcessNextHostState+0x94>
     876:	d4 c0       	rjmp	.+424    	; 0xa20 <USB_Host_ProcessNextHostState+0x23c>
     878:	80 91 54 05 	lds	r24, 0x0554
				  USB_HostState = PostWaitState;
     87c:	07 c0       	rjmp	.+14     	; 0x88c <USB_Host_ProcessNextHostState+0xa8>
     87e:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     880:	93 e0       	ldi	r25, 0x03	; 3
     882:	90 93 53 05 	sts	0x0553, r25
     886:	80 93 52 05 	sts	0x0552, r24
     88a:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     88c:	80 93 5f 05 	sts	0x055F, r24
     890:	c7 c0       	rjmp	.+398    	; 0xa20 <USB_Host_ProcessNextHostState+0x23c>
			break;
     892:	80 91 52 05 	lds	r24, 0x0552
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     896:	90 91 53 05 	lds	r25, 0x0553
     89a:	9c 01       	movw	r18, r24
     89c:	21 50       	subi	r18, 0x01	; 1
     89e:	30 40       	sbci	r19, 0x00	; 0
     8a0:	30 93 53 05 	sts	0x0553, r19
     8a4:	20 93 52 05 	sts	0x0552, r18
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	39 f0       	breq	.+14     	; 0x8ba <USB_Host_ProcessNextHostState+0xd6>
     8ac:	8f ec       	ldi	r24, 0xCF	; 207
     8ae:	97 e0       	ldi	r25, 0x07	; 7
     8b0:	01 97       	sbiw	r24, 0x01	; 1
     8b2:	f1 f7       	brne	.-4      	; 0x8b0 <USB_Host_ProcessNextHostState+0xcc>
     8b4:	00 c0       	rjmp	.+0      	; 0x8b6 <USB_Host_ProcessNextHostState+0xd2>
     8b6:	00 00       	nop
     8b8:	b3 c0       	rjmp	.+358    	; 0xa20 <USB_Host_ProcessNextHostState+0x23c>
     8ba:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     8bc:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     8c0:	80 61       	ori	r24, 0x10	; 16
     8c2:	80 93 d8 00 	sts	0x00D8, r24
     8c6:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     8ca:	8b 7f       	andi	r24, 0xFB	; 251
     8cc:	80 93 dd 00 	sts	0x00DD, r24
     8d0:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     8d4:	80 61       	ori	r24, 0x10	; 16
     8d6:	80 93 d7 00 	sts	0x00D7, r24
     8da:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     8de:	82 60       	ori	r24, 0x02	; 2
     8e0:	80 93 dd 00 	sts	0x00DD, r24
     8e4:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     8e6:	d2 cf       	rjmp	.-92     	; 0x88c <USB_Host_ProcessNextHostState+0xa8>
     8e8:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     8ec:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     8ee:	98 c0       	rjmp	.+304    	; 0xa20 <USB_Host_ProcessNextHostState+0x23c>
     8f0:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     8f4:	8e 7f       	andi	r24, 0xFE	; 254
     8f6:	80 93 9f 00 	sts	0x009F, r24
     8fa:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     8fe:	8d 7f       	andi	r24, 0xFD	; 253
     900:	80 93 9f 00 	sts	0x009F, r24
     904:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     908:	8d 7f       	andi	r24, 0xFD	; 253
     90a:	80 93 df 00 	sts	0x00DF, r24
     90e:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     912:	82 60       	ori	r24, 0x02	; 2
     914:	80 93 de 00 	sts	0x00DE, r24
     918:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     91c:	81 60       	ori	r24, 0x01	; 1
     91e:	80 93 9e 00 	sts	0x009E, r24
     922:	b1 d1       	rcall	.+866    	; 0xc86 <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     924:	10 92 5f 05 	sts	0x055F, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     928:	84 e6       	ldi	r24, 0x64	; 100
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	90 93 53 05 	sts	0x0553, r25
     930:	80 93 52 05 	sts	0x0552, r24
     934:	85 e0       	ldi	r24, 0x05	; 5
     936:	59 c0       	rjmp	.+178    	; 0x9ea <USB_Host_ProcessNextHostState+0x206>
     938:	aa de       	rcall	.-684    	; 0x68e <USB_Host_ResetDevice>
     93a:	10 92 5f 05 	sts	0x055F, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     93e:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	90 93 53 05 	sts	0x0553, r25
     946:	80 93 52 05 	sts	0x0552, r24
     94a:	86 e0       	ldi	r24, 0x06	; 6
     94c:	4e c0       	rjmp	.+156    	; 0x9ea <USB_Host_ProcessNextHostState+0x206>
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     954:	20 e4       	ldi	r18, 0x40	; 64
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	01 e0       	ldi	r16, 0x01	; 1
     95a:	0f d1       	rcall	.+542    	; 0xb7a <Pipe_ConfigurePipe>
     95c:	88 23       	and	r24, r24
     95e:	09 f4       	brne	.+2      	; 0x962 <USB_Host_ProcessNextHostState+0x17e>
     960:	4f c0       	rjmp	.+158    	; 0xa00 <USB_Host_ProcessNextHostState+0x21c>
     962:	87 e0       	ldi	r24, 0x07	; 7
     964:	93 cf       	rjmp	.-218    	; 0x88c <USB_Host_ProcessNextHostState+0xa8>
     966:	a7 e5       	ldi	r26, 0x57	; 87
     968:	b5 e0       	ldi	r27, 0x05	; 5
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     96a:	e8 e2       	ldi	r30, 0x28	; 40
     96c:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     96e:	88 e0       	ldi	r24, 0x08	; 8
     970:	01 90       	ld	r0, Z+
     972:	0d 92       	st	X+, r0
     974:	81 50       	subi	r24, 0x01	; 1
     976:	e1 f7       	brne	.-8      	; 0x970 <USB_Host_ProcessNextHostState+0x18c>
     978:	10 92 a7 00 	sts	0x00A7, r1
     97c:	ce 01       	movw	r24, r28
     97e:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     980:	c3 d3       	rcall	.+1926   	; 0x1108 <USB_Host_SendControlRequest>
     982:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     984:	88 23       	and	r24, r24
     986:	09 f0       	breq	.+2      	; 0x98a <USB_Host_ProcessNextHostState+0x1a6>
     988:	3e c0       	rjmp	.+124    	; 0xa06 <USB_Host_ProcessNextHostState+0x222>
     98a:	88 85       	ldd	r24, Y+8	; 0x08
     98c:	80 93 38 01 	sts	0x0138, r24
     990:	7e de       	rcall	.-772    	; 0x68e <USB_Host_ResetDevice>
     992:	10 92 5f 05 	sts	0x055F, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     996:	88 ec       	ldi	r24, 0xC8	; 200
     998:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
     99a:	90 93 53 05 	sts	0x0553, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     99e:	80 93 52 05 	sts	0x0552, r24
     9a2:	88 e0       	ldi	r24, 0x08	; 8
     9a4:	22 c0       	rjmp	.+68     	; 0x9ea <USB_Host_ProcessNextHostState+0x206>
     9a6:	20 91 38 01 	lds	r18, 0x0138
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	40 e0       	ldi	r20, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     9b2:	01 e0       	ldi	r16, 0x01	; 1
     9b4:	e2 d0       	rcall	.+452    	; 0xb7a <Pipe_ConfigurePipe>
     9b6:	88 23       	and	r24, r24
     9b8:	19 f1       	breq	.+70     	; 0xa00 <USB_Host_ProcessNextHostState+0x21c>
     9ba:	a7 e5       	ldi	r26, 0x57	; 87
     9bc:	b5 e0       	ldi	r27, 0x05	; 5
     9be:	e0 e3       	ldi	r30, 0x30	; 48
     9c0:	f1 e0       	ldi	r31, 0x01	; 1
     9c2:	88 e0       	ldi	r24, 0x08	; 8
     9c4:	01 90       	ld	r0, Z+
     9c6:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     9c8:	81 50       	subi	r24, 0x01	; 1
     9ca:	e1 f7       	brne	.-8      	; 0x9c4 <USB_Host_ProcessNextHostState+0x1e0>
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	9b d3       	rcall	.+1846   	; 0x1108 <USB_Host_SendControlRequest>
     9d2:	68 2f       	mov	r22, r24
     9d4:	88 23       	and	r24, r24
     9d6:	b9 f4       	brne	.+46     	; 0xa06 <USB_Host_ProcessNextHostState+0x222>
     9d8:	10 92 5f 05 	sts	0x055F, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     9dc:	84 e6       	ldi	r24, 0x64	; 100
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	90 93 53 05 	sts	0x0553, r25
     9e4:	80 93 52 05 	sts	0x0552, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     9e8:	89 e0       	ldi	r24, 0x09	; 9
     9ea:	80 93 54 05 	sts	0x0554, r24
     9ee:	18 c0       	rjmp	.+48     	; 0xa20 <USB_Host_ProcessNextHostState+0x23c>
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	80 93 a1 00 	sts	0x00A1, r24
     9f6:	8a e0       	ldi	r24, 0x0A	; 10
     9f8:	80 93 5f 05 	sts	0x055F, r24
     9fc:	43 dd       	rcall	.-1402   	; 0x484 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     9fe:	10 c0       	rjmp	.+32     	; 0xa20 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	84 e0       	ldi	r24, 0x04	; 4
     a04:	01 c0       	rjmp	.+2      	; 0xa08 <USB_Host_ProcessNextHostState+0x224>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     a06:	83 e0       	ldi	r24, 0x03	; 3
     a08:	90 91 5f 05 	lds	r25, 0x055F

			EVENT_USB_Host_DeviceEnumerationComplete();
     a0c:	91 30       	cpi	r25, 0x01	; 1
     a0e:	41 f0       	breq	.+16     	; 0xa20 <USB_Host_ProcessNextHostState+0x23c>
			break;
     a10:	15 de       	rcall	.-982    	; 0x63c <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     a12:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     a16:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     a18:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     a1c:	2d dd       	rcall	.-1446   	; 0x478 <EVENT_USB_Host_DeviceUnattached>
     a1e:	af d1       	rcall	.+862    	; 0xd7e <USB_ResetInterface>
     a20:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a26:	de bf       	out	0x3e, r29	; 62
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	cd bf       	out	0x3d, r28	; 61
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     a30:	1f 91       	pop	r17
     a32:	0f 91       	pop	r16

		USB_ResetInterface();
     a34:	08 95       	ret

00000a36 <Pipe_Discard_Stream>:

#include "PipeStream_AVR8.h"

uint8_t Pipe_Discard_Stream(uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     a36:	df 92       	push	r13
     a38:	ef 92       	push	r14
     a3a:	ff 92       	push	r15
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	ec 01       	movw	r28, r24
     a46:	8b 01       	movw	r16, r22
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     a48:	80 91 aa 00 	lds	r24, 0x00AA
     a4c:	8f 7c       	andi	r24, 0xCF	; 207
     a4e:	80 61       	ori	r24, 0x10	; 16
     a50:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	Pipe_SetPipeToken(PIPE_TOKEN_IN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     a54:	4e d1       	rcall	.+668    	; 0xcf2 <Pipe_WaitUntilReady>
     a56:	d8 2e       	mov	r13, r24
     a58:	88 23       	and	r24, r24
     a5a:	79 f5       	brne	.+94     	; 0xaba <Pipe_Discard_Stream+0x84>
     a5c:	01 15       	cp	r16, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     a5e:	11 05       	cpc	r17, r1
     a60:	29 f0       	breq	.+10     	; 0xa6c <Pipe_Discard_Stream+0x36>
     a62:	f8 01       	movw	r30, r16
	  Length -= *BytesProcessed;
     a64:	20 81       	ld	r18, Z
     a66:	31 81       	ldd	r19, Z+1	; 0x01
     a68:	c2 1b       	sub	r28, r18
     a6a:	d3 0b       	sbc	r29, r19
     a6c:	ee 24       	eor	r14, r14

#include "PipeStream_AVR8.h"

uint8_t Pipe_Discard_Stream(uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     a6e:	ff 24       	eor	r15, r15
     a70:	20 c0       	rjmp	.+64     	; 0xab2 <Pipe_Discard_Stream+0x7c>
     a72:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     a76:	85 fd       	sbrc	r24, 5
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     a78:	16 c0       	rjmp	.+44     	; 0xaa6 <Pipe_Discard_Stream+0x70>
     a7a:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     a7e:	8e 77       	andi	r24, 0x7E	; 126
     a80:	80 93 a6 00 	sts	0x00A6, r24
     a84:	01 15       	cp	r16, r1
		{
			Pipe_ClearIN();
				
			if (BytesProcessed != NULL)
     a86:	11 05       	cpc	r17, r1
     a88:	51 f0       	breq	.+20     	; 0xa9e <Pipe_Discard_Stream+0x68>
     a8a:	f8 01       	movw	r30, r16
			{
				*BytesProcessed += BytesInTransfer;
     a8c:	80 81       	ld	r24, Z
     a8e:	91 81       	ldd	r25, Z+1	; 0x01
     a90:	8e 0d       	add	r24, r14
     a92:	9f 1d       	adc	r25, r15
     a94:	91 83       	std	Z+1, r25	; 0x01
     a96:	80 83       	st	Z, r24
     a98:	24 e0       	ldi	r18, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     a9a:	d2 2e       	mov	r13, r18
     a9c:	0e c0       	rjmp	.+28     	; 0xaba <Pipe_Discard_Stream+0x84>
     a9e:	29 d1       	rcall	.+594    	; 0xcf2 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     aa0:	88 23       	and	r24, r24
     aa2:	39 f0       	breq	.+14     	; 0xab2 <Pipe_Discard_Stream+0x7c>
     aa4:	09 c0       	rjmp	.+18     	; 0xab8 <Pipe_Discard_Stream+0x82>
     aa6:	80 91 af 00 	lds	r24, 0x00AF
			static inline void Pipe_Discard_8(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Discard_8(void)
			{
				uint8_t Dummy;

				Dummy = UPDATX;
     aaa:	21 97       	sbiw	r28, 0x01	; 1
     aac:	08 94       	sec
		}
		else
		{
			Pipe_Discard_8();
			
			Length--;
     aae:	e1 1c       	adc	r14, r1
			BytesInTransfer++;
     ab0:	f1 1c       	adc	r15, r1
     ab2:	20 97       	sbiw	r28, 0x00	; 0
     ab4:	f1 f6       	brne	.-68     	; 0xa72 <Pipe_Discard_Stream+0x3c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
     ab6:	01 c0       	rjmp	.+2      	; 0xaba <Pipe_Discard_Stream+0x84>
     ab8:	d8 2e       	mov	r13, r24
     aba:	8d 2d       	mov	r24, r13
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     abc:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	df 90       	pop	r13
     aca:	08 95       	ret

00000acc <Pipe_Read_Stream_LE>:
     acc:	af 92       	push	r10
     ace:	bf 92       	push	r11
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     ad0:	cf 92       	push	r12
     ad2:	df 92       	push	r13
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	5c 01       	movw	r10, r24
     ae0:	eb 01       	movw	r28, r22
     ae2:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     ae4:	80 91 aa 00 	lds	r24, 0x00AA
     ae8:	8f 7c       	andi	r24, 0xCF	; 207
     aea:	80 61       	ori	r24, 0x10	; 16
     aec:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     af0:	00 d1       	rcall	.+512    	; 0xcf2 <Pipe_WaitUntilReady>
     af2:	f8 2e       	mov	r15, r24
     af4:	88 23       	and	r24, r24
     af6:	b1 f5       	brne	.+108    	; 0xb64 <Pipe_Read_Stream_LE+0x98>
     af8:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     afa:	d1 04       	cpc	r13, r1
     afc:	41 f0       	breq	.+16     	; 0xb0e <Pipe_Read_Stream_LE+0x42>
     afe:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     b00:	00 81       	ld	r16, Z
     b02:	11 81       	ldd	r17, Z+1	; 0x01
     b04:	c0 1b       	sub	r28, r16
     b06:	d1 0b       	sbc	r29, r17
     b08:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     b0a:	1b 1d       	adc	r17, r11
     b0c:	01 c0       	rjmp	.+2      	; 0xb10 <Pipe_Read_Stream_LE+0x44>
     b0e:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     b10:	aa 24       	eor	r10, r10
     b12:	bb 24       	eor	r11, r11
     b14:	23 c0       	rjmp	.+70     	; 0xb5c <Pipe_Read_Stream_LE+0x90>
     b16:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     b1a:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     b1c:	16 c0       	rjmp	.+44     	; 0xb4a <Pipe_Read_Stream_LE+0x7e>
     b1e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     b22:	8e 77       	andi	r24, 0x7E	; 126
     b24:	80 93 a6 00 	sts	0x00A6, r24
     b28:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     b2a:	d1 04       	cpc	r13, r1
     b2c:	51 f0       	breq	.+20     	; 0xb42 <Pipe_Read_Stream_LE+0x76>
     b2e:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     b30:	80 81       	ld	r24, Z
     b32:	91 81       	ldd	r25, Z+1	; 0x01
     b34:	8a 0d       	add	r24, r10
     b36:	9b 1d       	adc	r25, r11
     b38:	91 83       	std	Z+1, r25	; 0x01
     b3a:	80 83       	st	Z, r24
     b3c:	64 e0       	ldi	r22, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     b3e:	f6 2e       	mov	r15, r22
     b40:	11 c0       	rjmp	.+34     	; 0xb64 <Pipe_Read_Stream_LE+0x98>
     b42:	d7 d0       	rcall	.+430    	; 0xcf2 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     b44:	88 23       	and	r24, r24
     b46:	51 f0       	breq	.+20     	; 0xb5c <Pipe_Read_Stream_LE+0x90>
     b48:	0c c0       	rjmp	.+24     	; 0xb62 <Pipe_Read_Stream_LE+0x96>
     b4a:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     b4e:	f8 01       	movw	r30, r16
     b50:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     b52:	8f 01       	movw	r16, r30
     b54:	21 97       	sbiw	r28, 0x01	; 1
     b56:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     b58:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     b5a:	b1 1c       	adc	r11, r1
     b5c:	20 97       	sbiw	r28, 0x00	; 0
     b5e:	d9 f6       	brne	.-74     	; 0xb16 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     b60:	01 c0       	rjmp	.+2      	; 0xb64 <Pipe_Read_Stream_LE+0x98>
     b62:	f8 2e       	mov	r15, r24
     b64:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     b66:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     b68:	cf 91       	pop	r28
     b6a:	1f 91       	pop	r17
     b6c:	0f 91       	pop	r16
     b6e:	ff 90       	pop	r15
     b70:	df 90       	pop	r13
     b72:	cf 90       	pop	r12
     b74:	bf 90       	pop	r11
     b76:	af 90       	pop	r10
     b78:	08 95       	ret

00000b7a <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     b7a:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     b7c:	58 2f       	mov	r21, r24
     b7e:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     b80:	87 ff       	sbrs	r24, 7
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <Pipe_ConfigurePipe+0xe>
     b84:	80 e1       	ldi	r24, 0x10	; 16
     b86:	01 c0       	rjmp	.+2      	; 0xb8a <Pipe_ConfigurePipe+0x10>
     b88:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     b8a:	57 30       	cpi	r21, 0x07	; 7
     b8c:	08 f0       	brcs	.+2      	; 0xb90 <Pipe_ConfigurePipe+0x16>
     b8e:	57 c0       	rjmp	.+174    	; 0xc3e <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     b90:	66 23       	and	r22, r22
     b92:	09 f4       	brne	.+2      	; 0xb96 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     b94:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     b96:	4f 70       	andi	r20, 0x0F	; 15
     b98:	62 95       	swap	r22
     b9a:	66 0f       	add	r22, r22
     b9c:	66 0f       	add	r22, r22
     b9e:	60 7c       	andi	r22, 0xC0	; 192
     ba0:	64 2b       	or	r22, r20
     ba2:	68 2b       	or	r22, r24
     ba4:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     ba6:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ba8:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     bac:	45 17       	cp	r20, r21
     bae:	a9 f4       	brne	.+42     	; 0xbda <Pipe_ConfigurePipe+0x60>
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     bb2:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     bb4:	88 0f       	add	r24, r24
     bb6:	99 1f       	adc	r25, r25
     bb8:	03 c0       	rjmp	.+6      	; 0xbc0 <Pipe_ConfigurePipe+0x46>
     bba:	88 e0       	ldi	r24, 0x08	; 8
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     bc0:	82 17       	cp	r24, r18
     bc2:	93 07       	cpc	r25, r19
     bc4:	10 f4       	brcc	.+4      	; 0xbca <Pipe_ConfigurePipe+0x50>
     bc6:	75 30       	cpi	r23, 0x05	; 5
     bc8:	a1 f7       	brne	.-24     	; 0xbb2 <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     bca:	87 2f       	mov	r24, r23
     bcc:	82 95       	swap	r24
     bce:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     bd0:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     bd2:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     bd4:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     bd6:	e0 e0       	ldi	r30, 0x00	; 0
     bd8:	08 c0       	rjmp	.+16     	; 0xbea <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     bda:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     bde:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     be2:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     be6:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     bea:	81 ff       	sbrs	r24, 1
     bec:	20 c0       	rjmp	.+64     	; 0xc2e <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     bee:	90 91 a9 00 	lds	r25, 0x00A9
     bf2:	9e 7f       	andi	r25, 0xFE	; 254
     bf4:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     bf8:	90 91 ab 00 	lds	r25, 0x00AB
     bfc:	9d 7f       	andi	r25, 0xFD	; 253
     bfe:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     c02:	90 91 a9 00 	lds	r25, 0x00A9
     c06:	91 60       	ori	r25, 0x01	; 1
     c08:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     c0c:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     c10:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     c14:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     c18:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     c1c:	80 91 a9 00 	lds	r24, 0x00A9
     c20:	80 62       	ori	r24, 0x20	; 32
     c22:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     c26:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     c2a:	87 ff       	sbrs	r24, 7
     c2c:	08 c0       	rjmp	.+16     	; 0xc3e <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     c2e:	4f 5f       	subi	r20, 0xFF	; 255
     c30:	47 30       	cpi	r20, 0x07	; 7
     c32:	09 f0       	breq	.+2      	; 0xc36 <Pipe_ConfigurePipe+0xbc>
     c34:	b9 cf       	rjmp	.-142    	; 0xba8 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c36:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	01 c0       	rjmp	.+2      	; 0xc40 <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     c3e:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     c40:	0f 91       	pop	r16
     c42:	08 95       	ret

00000c44 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     c44:	ff 92       	push	r15
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
     c50:	ec 01       	movw	r28, r24
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     c52:	ff 24       	eor	r15, r15
     c54:	0d c0       	rjmp	.+26     	; 0xc70 <Pipe_ConfigurePipeTable+0x2c>
	{
		if (!(Table[i].Address))
     c56:	88 81       	ld	r24, Y
     c58:	88 23       	and	r24, r24
     c5a:	41 f0       	breq	.+16     	; 0xc6c <Pipe_ConfigurePipeTable+0x28>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     c5c:	29 81       	ldd	r18, Y+1	; 0x01
     c5e:	3a 81       	ldd	r19, Y+2	; 0x02
     c60:	6c 81       	ldd	r22, Y+4	; 0x04
     c62:	4b 81       	ldd	r20, Y+3	; 0x03
     c64:	0d 81       	ldd	r16, Y+5	; 0x05
     c66:	89 df       	rcall	.-238    	; 0xb7a <Pipe_ConfigurePipe>
     c68:	88 23       	and	r24, r24
     c6a:	31 f0       	breq	.+12     	; 0xc78 <Pipe_ConfigurePipeTable+0x34>
     c6c:	f3 94       	inc	r15
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     c6e:	26 96       	adiw	r28, 0x06	; 6
     c70:	f1 16       	cp	r15, r17
     c72:	89 f7       	brne	.-30     	; 0xc56 <Pipe_ConfigurePipeTable+0x12>
     c74:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}
	
	return true;
     c76:	01 c0       	rjmp	.+2      	; 0xc7a <Pipe_ConfigurePipeTable+0x36>
     c78:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
     c7a:	df 91       	pop	r29
		}
	}
	
	return true;
}
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	ff 90       	pop	r15
     c84:	08 95       	ret

00000c86 <Pipe_ClearPipes>:
     c86:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     c90:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     c94:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     c98:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     c9c:	90 91 a9 00 	lds	r25, 0x00A9
     ca0:	9e 7f       	andi	r25, 0xFE	; 254
     ca2:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     ca6:	8f 5f       	subi	r24, 0xFF	; 255
     ca8:	87 30       	cpi	r24, 0x07	; 7
     caa:	81 f7       	brne	.-32     	; 0xc8c <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     cac:	08 95       	ret

00000cae <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     cae:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     cb2:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     cb6:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     cb8:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     cbc:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     cc0:	27 ff       	sbrs	r18, 7
     cc2:	0c c0       	rjmp	.+24     	; 0xcdc <Pipe_IsEndpointBound+0x2e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     cc4:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     cc8:	53 2f       	mov	r21, r19
     cca:	5f 70       	andi	r21, 0x0F	; 15
     ccc:	30 ff       	sbrs	r19, 0
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <Pipe_IsEndpointBound+0x26>
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	01 c0       	rjmp	.+2      	; 0xcd6 <Pipe_IsEndpointBound+0x28>
     cd4:	20 e8       	ldi	r18, 0x80	; 128
     cd6:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     cd8:	28 17       	cp	r18, r24
     cda:	49 f0       	breq	.+18     	; 0xcee <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     cdc:	9f 5f       	subi	r25, 0xFF	; 255
     cde:	97 30       	cpi	r25, 0x07	; 7
     ce0:	59 f7       	brne	.-42     	; 0xcb8 <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ce2:	84 2f       	mov	r24, r20
     ce4:	8f 70       	andi	r24, 0x0F	; 15
     ce6:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     cee:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     cf0:	08 95       	ret

00000cf2 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     cf2:	80 91 a2 00 	lds	r24, 0x00A2
     cf6:	90 91 a3 00 	lds	r25, 0x00A3
     cfa:	45 e6       	ldi	r20, 0x65	; 101
     cfc:	01 c0       	rjmp	.+2      	; 0xd00 <Pipe_WaitUntilReady+0xe>
     cfe:	c9 01       	movw	r24, r18
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     d00:	20 91 aa 00 	lds	r18, 0x00AA
     d04:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     d06:	20 31       	cpi	r18, 0x10	; 16
     d08:	29 f4       	brne	.+10     	; 0xd14 <Pipe_WaitUntilReady+0x22>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     d0a:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     d0e:	20 ff       	sbrs	r18, 0
     d10:	05 c0       	rjmp	.+10     	; 0xd1c <Pipe_WaitUntilReady+0x2a>
     d12:	17 c0       	rjmp	.+46     	; 0xd42 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     d14:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     d18:	22 fd       	sbrc	r18, 2
     d1a:	13 c0       	rjmp	.+38     	; 0xd42 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     d1c:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     d20:	21 fd       	sbrc	r18, 1
     d22:	11 c0       	rjmp	.+34     	; 0xd46 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     d24:	20 91 5f 05 	lds	r18, 0x055F
     d28:	21 30       	cpi	r18, 0x01	; 1
     d2a:	79 f0       	breq	.+30     	; 0xd4a <Pipe_WaitUntilReady+0x58>
     d2c:	20 91 a2 00 	lds	r18, 0x00A2
     d30:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     d34:	28 17       	cp	r18, r24
     d36:	39 07       	cpc	r19, r25
     d38:	19 f3       	breq	.-58     	; 0xd00 <Pipe_WaitUntilReady+0xe>
     d3a:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     d3c:	01 f7       	brne	.-64     	; 0xcfe <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_Timeout;
     d3e:	83 e0       	ldi	r24, 0x03	; 3
     d40:	08 95       	ret
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     d4a:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     d4c:	08 95       	ret

00000d4e <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     d4e:	75 d0       	rcall	.+234    	; 0xe3a <USB_INT_DisableAllInterrupts>
     d50:	7c d0       	rcall	.+248    	; 0xe4a <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     d52:	e0 ee       	ldi	r30, 0xE0	; 224
     d54:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     d56:	80 81       	ld	r24, Z
     d58:	81 60       	ori	r24, 0x01	; 1
     d5a:	80 83       	st	Z, r24
     d5c:	e8 ed       	ldi	r30, 0xD8	; 216
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     d60:	80 81       	ld	r24, Z
     d62:	8f 77       	andi	r24, 0x7F	; 127
     d64:	80 83       	st	Z, r24
     d66:	19 bc       	out	0x29, r1	; 41
     d68:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     d6a:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     d6c:	8c 91       	ld	r24, X
     d6e:	8e 7f       	andi	r24, 0xFE	; 254
     d70:	8c 93       	st	X, r24
     d72:	80 81       	ld	r24, Z
     d74:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     d76:	80 83       	st	Z, r24
     d78:	10 92 56 05 	sts	0x0556, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     d7c:	08 95       	ret

00000d7e <USB_ResetInterface>:
     d7e:	5d d0       	rcall	.+186    	; 0xe3a <USB_INT_DisableAllInterrupts>
}
     d80:	64 d0       	rcall	.+200    	; 0xe4a <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     d82:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     d86:	8f 77       	andi	r24, 0x7F	; 127
     d88:	80 93 d8 00 	sts	0x00D8, r24
     d8c:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     d90:	80 68       	ori	r24, 0x80	; 128
     d92:	80 93 d8 00 	sts	0x00D8, r24
     d96:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     d9a:	8f 7d       	andi	r24, 0xDF	; 223
     d9c:	80 93 d8 00 	sts	0x00D8, r24
     da0:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     da4:	8f 77       	andi	r24, 0x7F	; 127
     da6:	80 93 d7 00 	sts	0x00D7, r24
     daa:	8c e0       	ldi	r24, 0x0C	; 12
     dac:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     dae:	8e e0       	ldi	r24, 0x0E	; 14
     db0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     db2:	09 b4       	in	r0, 0x29	; 41
     db4:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     db6:	fd cf       	rjmp	.-6      	; 0xdb2 <USB_ResetInterface+0x34>
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	80 93 5f 05 	sts	0x055F, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     dbe:	10 92 55 05 	sts	0x0555, r1
	USB_Host_ConfigurationNumber = 0;
     dc2:	80 e4       	ldi	r24, 0x40	; 64
     dc4:	80 93 38 01 	sts	0x0138, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     dc8:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     dcc:	80 64       	ori	r24, 0x40	; 64
     dce:	80 93 d8 00 	sts	0x00D8, r24
     dd2:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     dd6:	81 60       	ori	r24, 0x01	; 1
     dd8:	80 93 dd 00 	sts	0x00DD, r24
     ddc:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     de0:	84 60       	ori	r24, 0x04	; 4
     de2:	80 93 dd 00 	sts	0x00DD, r24
     de6:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     dea:	8f 7e       	andi	r24, 0xEF	; 239
     dec:	80 93 d7 00 	sts	0x00D7, r24
     df0:	6f 9a       	sbi	0x0d, 7	; 13
     df2:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     df4:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     df8:	81 60       	ori	r24, 0x01	; 1
     dfa:	80 93 de 00 	sts	0x00DE, r24
     dfe:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     e02:	84 60       	ori	r24, 0x04	; 4
     e04:	80 93 de 00 	sts	0x00DE, r24
     e08:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     e0c:	8e 7f       	andi	r24, 0xFE	; 254
     e0e:	80 93 e0 00 	sts	0x00E0, r24
     e12:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     e16:	80 61       	ori	r24, 0x10	; 16
     e18:	80 93 d8 00 	sts	0x00D8, r24
     e1c:	08 95       	ret

00000e1e <USB_Init>:
     e1e:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     e20:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     e22:	80 81       	ld	r24, Z
     e24:	8f 7e       	andi	r24, 0xEF	; 239
     e26:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     e28:	e7 ed       	ldi	r30, 0xD7	; 215
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	81 60       	ori	r24, 0x01	; 1
     e30:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	80 93 56 05 	sts	0x0556, r24

	USB_ResetInterface();
     e38:	a2 cf       	rjmp	.-188    	; 0xd7e <USB_ResetInterface>

00000e3a <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     e3a:	e8 ed       	ldi	r30, 0xD8	; 216
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8c 7f       	andi	r24, 0xFC	; 252
     e42:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     e44:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     e48:	08 95       	ret

00000e4a <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     e4a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     e4e:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     e52:	08 95       	ret

00000e54 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     e54:	1f 92       	push	r1
     e56:	0f 92       	push	r0
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	0f 92       	push	r0
     e5c:	0b b6       	in	r0, 0x3b	; 59
     e5e:	0f 92       	push	r0
     e60:	11 24       	eor	r1, r1
     e62:	2f 93       	push	r18
     e64:	3f 93       	push	r19
     e66:	4f 93       	push	r20
     e68:	5f 93       	push	r21
     e6a:	6f 93       	push	r22
     e6c:	7f 93       	push	r23
     e6e:	8f 93       	push	r24
     e70:	9f 93       	push	r25
     e72:	af 93       	push	r26
     e74:	bf 93       	push	r27
     e76:	ef 93       	push	r30
     e78:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     e7a:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     e7e:	85 ff       	sbrs	r24, 5
     e80:	0a c0       	rjmp	.+20     	; 0xe96 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     e82:	80 91 a0 00 	lds	r24, 0x00A0
     e86:	85 ff       	sbrs	r24, 5
     e88:	06 c0       	rjmp	.+12     	; 0xe96 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     e8a:	80 91 9f 00 	lds	r24, 0x009F
     e8e:	8f 7d       	andi	r24, 0xDF	; 223
     e90:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     e94:	10 d1       	rcall	.+544    	; 0x10b6 <USB_Event_Stub>
     e96:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     e9a:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     e9c:	15 c0       	rjmp	.+42     	; 0xec8 <__vector_10+0x74>
     e9e:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     ea2:	81 ff       	sbrs	r24, 1
     ea4:	11 c0       	rjmp	.+34     	; 0xec8 <__vector_10+0x74>
     ea6:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     eaa:	8d 7f       	andi	r24, 0xFD	; 253
     eac:	80 93 9f 00 	sts	0x009F, r24
     eb0:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     eb4:	8e 7f       	andi	r24, 0xFE	; 254
     eb6:	80 93 9f 00 	sts	0x009F, r24
     eba:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     ebe:	8d 7f       	andi	r24, 0xFD	; 253
     ec0:	80 93 a0 00 	sts	0x00A0, r24
     ec4:	d9 da       	rcall	.-2638   	; 0x478 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     ec6:	5b df       	rcall	.-330    	; 0xd7e <USB_ResetInterface>
     ec8:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     ecc:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     ece:	15 c0       	rjmp	.+42     	; 0xefa <__vector_10+0xa6>
     ed0:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     ed4:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     ed6:	11 c0       	rjmp	.+34     	; 0xefa <__vector_10+0xa6>
     ed8:	80 91 df 00 	lds	r24, 0x00DF
     edc:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     ede:	80 93 df 00 	sts	0x00DF, r24
     ee2:	77 98       	cbi	0x0e, 7	; 14
     ee4:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     ee8:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     eea:	80 93 dd 00 	sts	0x00DD, r24
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	85 db       	rcall	.-2294   	; 0x5fc <EVENT_USB_Host_HostError>
     ef2:	c2 da       	rcall	.-2684   	; 0x478 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	80 93 5f 05 	sts	0x055F, r24
		EVENT_USB_Host_DeviceUnattached();
     efa:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     efe:	80 ff       	sbrs	r24, 0
     f00:	17 c0       	rjmp	.+46     	; 0xf30 <__vector_10+0xdc>
     f02:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     f06:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     f08:	13 c0       	rjmp	.+38     	; 0xf30 <__vector_10+0xdc>
     f0a:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     f0e:	8e 7f       	andi	r24, 0xFE	; 254
     f10:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     f14:	80 91 de 00 	lds	r24, 0x00DE
     f18:	8e 7f       	andi	r24, 0xFE	; 254
     f1a:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     f1e:	a6 da       	rcall	.-2740   	; 0x46c <EVENT_USB_Host_DeviceAttached>
     f20:	80 91 a0 00 	lds	r24, 0x00A0
     f24:	82 60       	ori	r24, 0x02	; 2
     f26:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     f2a:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     f2c:	80 93 5f 05 	sts	0x055F, r24
     f30:	80 91 df 00 	lds	r24, 0x00DF
     f34:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     f36:	0e c0       	rjmp	.+28     	; 0xf54 <__vector_10+0x100>
     f38:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     f3c:	82 ff       	sbrs	r24, 2
     f3e:	0a c0       	rjmp	.+20     	; 0xf54 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     f40:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     f44:	8b 7f       	andi	r24, 0xFB	; 251
     f46:	80 93 df 00 	sts	0x00DF, r24
     f4a:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	76 db       	rcall	.-2324   	; 0x63c <EVENT_USB_Host_DeviceEnumerationFailed>
     f50:	93 da       	rcall	.-2778   	; 0x478 <EVENT_USB_Host_DeviceUnattached>
     f52:	15 df       	rcall	.-470    	; 0xd7e <USB_ResetInterface>
     f54:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     f56:	ef 91       	pop	r30
     f58:	bf 91       	pop	r27
     f5a:	af 91       	pop	r26
     f5c:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     f5e:	8f 91       	pop	r24
     f60:	7f 91       	pop	r23

		USB_ResetInterface();
     f62:	6f 91       	pop	r22
     f64:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     f66:	4f 91       	pop	r20
     f68:	3f 91       	pop	r19
     f6a:	2f 91       	pop	r18
     f6c:	0f 90       	pop	r0
     f6e:	0b be       	out	0x3b, r0	; 59
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	0f 90       	pop	r0
     f76:	1f 90       	pop	r1
     f78:	18 95       	reti

00000f7a <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     f7a:	cf 92       	push	r12
     f7c:	df 92       	push	r13
     f7e:	ef 92       	push	r14
     f80:	ff 92       	push	r15
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	29 97       	sbiw	r28, 0x09	; 9
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	6b 01       	movw	r12, r22
     f9c:	8a 01       	movw	r16, r20
     f9e:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     fa0:	90 e8       	ldi	r25, 0x80	; 128
     fa2:	90 93 57 05 	sts	0x0557, r25
     fa6:	96 e0       	ldi	r25, 0x06	; 6
     fa8:	90 93 58 05 	sts	0x0558, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     fb2:	90 93 5a 05 	sts	0x055A, r25
     fb6:	80 93 59 05 	sts	0x0559, r24
     fba:	10 92 5c 05 	sts	0x055C, r1
     fbe:	10 92 5b 05 	sts	0x055B, r1
     fc2:	89 e0       	ldi	r24, 0x09	; 9
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	90 93 5e 05 	sts	0x055E, r25
     fca:	80 93 5d 05 	sts	0x055D, r24
     fce:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     fd2:	ce 01       	movw	r24, r28
     fd4:	01 96       	adiw	r24, 0x01	; 1
     fd6:	98 d0       	rcall	.+304    	; 0x1108 <USB_Host_SendControlRequest>
     fd8:	88 23       	and	r24, r24
     fda:	b9 f4       	brne	.+46     	; 0x100a <USB_Host_GetDeviceConfigDescriptor+0x90>
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     fde:	9c 81       	ldd	r25, Y+4	; 0x04
     fe0:	f6 01       	movw	r30, r12
     fe2:	91 83       	std	Z+1, r25	; 0x01
     fe4:	80 83       	st	Z, r24
     fe6:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
     fe8:	f9 06       	cpc	r15, r25
     fea:	70 f0       	brcs	.+28     	; 0x1008 <USB_Host_GetDeviceConfigDescriptor+0x8e>
     fec:	90 93 5e 05 	sts	0x055E, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     ff0:	80 93 5d 05 	sts	0x055D, r24
     ff4:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     ff6:	88 d0       	rcall	.+272    	; 0x1108 <USB_Host_SendControlRequest>
     ff8:	88 23       	and	r24, r24
     ffa:	39 f4       	brne	.+14     	; 0x100a <USB_Host_GetDeviceConfigDescriptor+0x90>
     ffc:	f8 01       	movw	r30, r16
     ffe:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1000:	92 30       	cpi	r25, 0x02	; 2
    1002:	19 f0       	breq	.+6      	; 0x100a <USB_Host_GetDeviceConfigDescriptor+0x90>
    1004:	86 e0       	ldi	r24, 0x06	; 6
    1006:	01 c0       	rjmp	.+2      	; 0x100a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    1008:	85 e0       	ldi	r24, 0x05	; 5
    100a:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    100c:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    100e:	f8 94       	cli
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	cd bf       	out	0x3d, r28	; 61
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	1f 91       	pop	r17
    101c:	0f 91       	pop	r16
    101e:	ff 90       	pop	r15
    1020:	ef 90       	pop	r14
    1022:	df 90       	pop	r13
    1024:	cf 90       	pop	r12
    1026:	08 95       	ret

00001028 <USB_GetNextDescriptorComp>:
    1028:	af 92       	push	r10
    102a:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    102c:	cf 92       	push	r12
    102e:	df 92       	push	r13
    1030:	ef 92       	push	r14
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	7c 01       	movw	r14, r24
    103e:	8b 01       	movw	r16, r22
    1040:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1042:	28 c0       	rjmp	.+80     	; 0x1094 <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1044:	f8 01       	movw	r30, r16
    1046:	c0 80       	ld	r12, Z
    1048:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    104a:	f6 01       	movw	r30, r12
    104c:	80 81       	ld	r24, Z
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	9e 01       	movw	r18, r28
    1052:	8c 17       	cp	r24, r28
    1054:	9d 07       	cpc	r25, r29
    1056:	08 f4       	brcc	.+2      	; 0x105a <USB_GetNextDescriptorComp+0x32>
    1058:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    105a:	c6 01       	movw	r24, r12
    105c:	82 0f       	add	r24, r18
    105e:	93 1f       	adc	r25, r19
    1060:	f8 01       	movw	r30, r16
    1062:	91 83       	std	Z+1, r25	; 0x01
    1064:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
    1066:	f7 01       	movw	r30, r14
    1068:	80 81       	ld	r24, Z
    106a:	91 81       	ldd	r25, Z+1	; 0x01
    106c:	82 1b       	sub	r24, r18
    106e:	93 0b       	sbc	r25, r19
    1070:	91 83       	std	Z+1, r25	; 0x01
    1072:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1074:	f8 01       	movw	r30, r16
    1076:	80 81       	ld	r24, Z
    1078:	91 81       	ldd	r25, Z+1	; 0x01
    107a:	f5 01       	movw	r30, r10
    107c:	09 95       	icall
    107e:	82 30       	cpi	r24, 0x02	; 2
    1080:	49 f0       	breq	.+18     	; 0x1094 <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	69 f4       	brne	.+26     	; 0x10a0 <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
    1086:	f8 01       	movw	r30, r16
    1088:	d1 82       	std	Z+1, r13	; 0x01
    108a:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
    108c:	f7 01       	movw	r30, r14
    108e:	d1 83       	std	Z+1, r29	; 0x01
    1090:	c0 83       	st	Z, r28
    1092:	06 c0       	rjmp	.+12     	; 0x10a0 <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1094:	f7 01       	movw	r30, r14
    1096:	c0 81       	ld	r28, Z
    1098:	d1 81       	ldd	r29, Z+1	; 0x01
    109a:	20 97       	sbiw	r28, 0x00	; 0
    109c:	99 f6       	brne	.-90     	; 0x1044 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    109e:	82 e0       	ldi	r24, 0x02	; 2
}
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	1f 91       	pop	r17
    10a6:	0f 91       	pop	r16
    10a8:	ff 90       	pop	r15
    10aa:	ef 90       	pop	r14
    10ac:	df 90       	pop	r13
    10ae:	cf 90       	pop	r12
    10b0:	bf 90       	pop	r11
    10b2:	af 90       	pop	r10
    10b4:	08 95       	ret

000010b6 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    10b6:	08 95       	ret

000010b8 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    10b8:	1f 93       	push	r17
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    10c0:	c9 ee       	ldi	r28, 0xE9	; 233
    10c2:	d3 e0       	ldi	r29, 0x03	; 3
    10c4:	06 c0       	rjmp	.+12     	; 0x10d2 <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	38 db       	rcall	.-2448   	; 0x73a <USB_Host_WaitMS>
    10ca:	88 23       	and	r24, r24
    10cc:	c9 f4       	brne	.+50     	; 0x1100 <USB_Host_WaitForIOS+0x48>
    10ce:	21 97       	sbiw	r28, 0x01	; 1
    10d0:	b1 f0       	breq	.+44     	; 0x10fe <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    10d2:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    10d4:	29 f4       	brne	.+10     	; 0x10e0 <USB_Host_WaitForIOS+0x28>
    10d6:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    10da:	83 ff       	sbrs	r24, 3
    10dc:	f4 cf       	rjmp	.-24     	; 0x10c6 <USB_Host_WaitForIOS+0xe>
    10de:	0d c0       	rjmp	.+26     	; 0x10fa <USB_Host_WaitForIOS+0x42>
    10e0:	11 30       	cpi	r17, 0x01	; 1
    10e2:	29 f4       	brne	.+10     	; 0x10ee <USB_Host_WaitForIOS+0x36>
    10e4:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    10e8:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    10ea:	ed cf       	rjmp	.-38     	; 0x10c6 <USB_Host_WaitForIOS+0xe>
    10ec:	06 c0       	rjmp	.+12     	; 0x10fa <USB_Host_WaitForIOS+0x42>
    10ee:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    10f0:	51 f7       	brne	.-44     	; 0x10c6 <USB_Host_WaitForIOS+0xe>
    10f2:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    10f6:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    10f8:	e6 cf       	rjmp	.-52     	; 0x10c6 <USB_Host_WaitForIOS+0xe>
    10fa:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <USB_Host_WaitForIOS+0x48>
    10fe:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1100:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
    1106:	08 95       	ret

00001108 <USB_Host_SendControlRequest>:
    1108:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    110a:	ff 92       	push	r15
    110c:	0f 93       	push	r16
    110e:	1f 93       	push	r17
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1116:	e0 90 9e 00 	lds	r14, 0x009E
    111a:	ff 24       	eor	r15, r15
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	e8 22       	and	r14, r24
    1120:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1122:	00 91 5d 05 	lds	r16, 0x055D
    1126:	10 91 5e 05 	lds	r17, 0x055E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    112a:	80 91 9e 00 	lds	r24, 0x009E
    112e:	81 60       	ori	r24, 0x01	; 1
    1130:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	01 db       	rcall	.-2558   	; 0x73a <USB_Host_WaitMS>
    1138:	88 23       	and	r24, r24
    113a:	09 f0       	breq	.+2      	; 0x113e <USB_Host_SendControlRequest+0x36>
    113c:	ca c0       	rjmp	.+404    	; 0x12d2 <USB_Host_SendControlRequest+0x1ca>
    113e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1142:	8f 7c       	andi	r24, 0xCF	; 207
    1144:	80 93 aa 00 	sts	0x00AA, r24
    1148:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    114c:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    1150:	8f 7e       	andi	r24, 0xEF	; 239
    1152:	80 93 a6 00 	sts	0x00A6, r24
    1156:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    115a:	8f 7b       	andi	r24, 0xBF	; 191
    115c:	80 93 a9 00 	sts	0x00A9, r24
    1160:	88 e0       	ldi	r24, 0x08	; 8
    1162:	e7 e5       	ldi	r30, 0x57	; 87
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1164:	f5 e0       	ldi	r31, 0x05	; 5
    1166:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1168:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    116c:	81 50       	subi	r24, 0x01	; 1
    116e:	d9 f7       	brne	.-10     	; 0x1166 <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1170:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1174:	87 77       	andi	r24, 0x77	; 119
    1176:	80 93 a6 00 	sts	0x00A6, r24
    117a:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    117c:	9d df       	rcall	.-198    	; 0x10b8 <USB_Host_WaitForIOS>
    117e:	88 23       	and	r24, r24
    1180:	09 f0       	breq	.+2      	; 0x1184 <USB_Host_SendControlRequest+0x7c>
    1182:	a7 c0       	rjmp	.+334    	; 0x12d2 <USB_Host_SendControlRequest+0x1ca>
    1184:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1188:	80 64       	ori	r24, 0x40	; 64
    118a:	80 93 a9 00 	sts	0x00A9, r24
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	d4 da       	rcall	.-2648   	; 0x73a <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1192:	88 23       	and	r24, r24
    1194:	09 f0       	breq	.+2      	; 0x1198 <USB_Host_SendControlRequest+0x90>
    1196:	9d c0       	rjmp	.+314    	; 0x12d2 <USB_Host_SendControlRequest+0x1ca>
    1198:	80 91 57 05 	lds	r24, 0x0557
    119c:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    119e:	4f c0       	rjmp	.+158    	; 0x123e <USB_Host_SendControlRequest+0x136>
    11a0:	80 91 aa 00 	lds	r24, 0x00AA
    11a4:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11a6:	80 61       	ori	r24, 0x10	; 16
    11a8:	80 93 aa 00 	sts	0x00AA, r24
    11ac:	20 97       	sbiw	r28, 0x00	; 0
    11ae:	61 f5       	brne	.+88     	; 0x1208 <USB_Host_SendControlRequest+0x100>
    11b0:	2e c0       	rjmp	.+92     	; 0x120e <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    11b2:	80 91 a9 00 	lds	r24, 0x00A9
    11b6:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11b8:	80 93 a9 00 	sts	0x00A9, r24
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	7c df       	rcall	.-264    	; 0x10b8 <USB_Host_WaitForIOS>
    11c0:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    11c2:	09 f0       	breq	.+2      	; 0x11c6 <USB_Host_SendControlRequest+0xbe>
    11c4:	86 c0       	rjmp	.+268    	; 0x12d2 <USB_Host_SendControlRequest+0x1ca>
    11c6:	80 91 f6 00 	lds	r24, 0x00F6
    11ca:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11ce:	00 97       	sbiw	r24, 0x00	; 0
    11d0:	41 f4       	brne	.+16     	; 0x11e2 <USB_Host_SendControlRequest+0xda>
    11d2:	00 e0       	ldi	r16, 0x00	; 0
    11d4:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    11d6:	05 c0       	rjmp	.+10     	; 0x11e2 <USB_Host_SendControlRequest+0xda>
    11d8:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
    11dc:	89 93       	st	Y+, r24
    11de:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    11e0:	10 40       	sbci	r17, 0x00	; 0
    11e2:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
    11e6:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11ea:	00 97       	sbiw	r24, 0x00	; 0
    11ec:	19 f0       	breq	.+6      	; 0x11f4 <USB_Host_SendControlRequest+0xec>
    11ee:	01 15       	cp	r16, r1
    11f0:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    11f2:	91 f7       	brne	.-28     	; 0x11d8 <USB_Host_SendControlRequest+0xd0>
    11f4:	80 91 a9 00 	lds	r24, 0x00A9
    11f8:	80 64       	ori	r24, 0x40	; 64
    11fa:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11fe:	80 91 a6 00 	lds	r24, 0x00A6
    1202:	8e 77       	andi	r24, 0x7E	; 126
    1204:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1208:	01 15       	cp	r16, r1
    120a:	11 05       	cpc	r17, r1
    120c:	91 f6       	brne	.-92     	; 0x11b2 <USB_Host_SendControlRequest+0xaa>
    120e:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1212:	8f 7c       	andi	r24, 0xCF	; 207
    1214:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1216:	80 93 aa 00 	sts	0x00AA, r24
    121a:	80 91 a9 00 	lds	r24, 0x00A9
    121e:	8f 7b       	andi	r24, 0xBF	; 191
    1220:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1224:	82 e0       	ldi	r24, 0x02	; 2
    1226:	48 df       	rcall	.-368    	; 0x10b8 <USB_Host_WaitForIOS>
    1228:	88 23       	and	r24, r24
    122a:	09 f0       	breq	.+2      	; 0x122e <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    122c:	52 c0       	rjmp	.+164    	; 0x12d2 <USB_Host_SendControlRequest+0x1ca>
    122e:	80 91 a6 00 	lds	r24, 0x00A6
    1232:	8b 77       	andi	r24, 0x7B	; 123
    1234:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1238:	82 e0       	ldi	r24, 0x02	; 2
    123a:	3e df       	rcall	.-388    	; 0x10b8 <USB_Host_WaitForIOS>
    123c:	4a c0       	rjmp	.+148    	; 0x12d2 <USB_Host_SendControlRequest+0x1ca>
    123e:	20 97       	sbiw	r28, 0x00	; 0
    1240:	a1 f1       	breq	.+104    	; 0x12aa <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1242:	80 91 aa 00 	lds	r24, 0x00AA
    1246:	8f 7c       	andi	r24, 0xCF	; 207
    1248:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    124a:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    124e:	80 91 a9 00 	lds	r24, 0x00A9
    1252:	8f 7b       	andi	r24, 0xBF	; 191
    1254:	80 93 a9 00 	sts	0x00A9, r24
    1258:	1c c0       	rjmp	.+56     	; 0x1292 <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    125a:	2e df       	rcall	.-420    	; 0x10b8 <USB_Host_WaitForIOS>
    125c:	88 23       	and	r24, r24
    125e:	c9 f5       	brne	.+114    	; 0x12d2 <USB_Host_SendControlRequest+0x1ca>
    1260:	fe 01       	movw	r30, r28
    1262:	07 c0       	rjmp	.+14     	; 0x1272 <USB_Host_SendControlRequest+0x16a>
    1264:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1266:	ef 01       	movw	r28, r30
    1268:	80 93 af 00 	sts	0x00AF, r24
    126c:	01 50       	subi	r16, 0x01	; 1
    126e:	10 40       	sbci	r17, 0x00	; 0
    1270:	59 f0       	breq	.+22     	; 0x1288 <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1272:	ef 01       	movw	r28, r30
    1274:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1278:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    127c:	80 91 38 01 	lds	r24, 0x0138
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1280:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1282:	28 17       	cp	r18, r24
    1284:	39 07       	cpc	r19, r25
    1286:	70 f3       	brcs	.-36     	; 0x1264 <USB_Host_SendControlRequest+0x15c>
    1288:	80 91 a6 00 	lds	r24, 0x00A6
    128c:	8b 77       	andi	r24, 0x7B	; 123
    128e:	80 93 a6 00 	sts	0x00A6, r24
    1292:	82 e0       	ldi	r24, 0x02	; 2
    1294:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1296:	11 05       	cpc	r17, r1
    1298:	01 f7       	brne	.-64     	; 0x125a <USB_Host_SendControlRequest+0x152>
    129a:	0e df       	rcall	.-484    	; 0x10b8 <USB_Host_WaitForIOS>
    129c:	88 23       	and	r24, r24
    129e:	c9 f4       	brne	.+50     	; 0x12d2 <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    12a0:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    12a4:	80 64       	ori	r24, 0x40	; 64
    12a6:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    12aa:	80 91 aa 00 	lds	r24, 0x00AA
    12ae:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    12b0:	80 61       	ori	r24, 0x10	; 16
    12b2:	80 93 aa 00 	sts	0x00AA, r24
    12b6:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    12ba:	8f 7b       	andi	r24, 0xBF	; 191
    12bc:	80 93 a9 00 	sts	0x00A9, r24
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	fa de       	rcall	.-524    	; 0x10b8 <USB_Host_WaitForIOS>
    12c4:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12c6:	29 f4       	brne	.+10     	; 0x12d2 <USB_Host_SendControlRequest+0x1ca>
    12c8:	90 91 a6 00 	lds	r25, 0x00A6
    12cc:	9e 77       	andi	r25, 0x7E	; 126
    12ce:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    12d2:	90 91 a9 00 	lds	r25, 0x00A9
    12d6:	90 64       	ori	r25, 0x40	; 64
    12d8:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    12dc:	e1 14       	cp	r14, r1
    12de:	f1 04       	cpc	r15, r1
    12e0:	29 f4       	brne	.+10     	; 0x12ec <USB_Host_SendControlRequest+0x1e4>
    12e2:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    12e6:	9e 7f       	andi	r25, 0xFE	; 254
    12e8:	90 93 9e 00 	sts	0x009E, r25
    12ec:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    12ee:	90 93 a8 00 	sts	0x00A8, r25
    12f2:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    12fe:	ff 90       	pop	r15
    1300:	ef 90       	pop	r14
    1302:	08 95       	ret

00001304 <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    1304:	cf 93       	push	r28
    1306:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1308:	10 92 57 05 	sts	0x0557, r1
    130c:	89 e0       	ldi	r24, 0x09	; 9
    130e:	80 93 58 05 	sts	0x0558, r24
    1312:	c0 93 59 05 	sts	0x0559, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1316:	10 92 5a 05 	sts	0x055A, r1
    131a:	10 92 5c 05 	sts	0x055C, r1
    131e:	10 92 5b 05 	sts	0x055B, r1
    1322:	10 92 5e 05 	sts	0x055E, r1
    1326:	10 92 5d 05 	sts	0x055D, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    132a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	ea de       	rcall	.-556    	; 0x1108 <USB_Host_SendControlRequest>
    1334:	88 23       	and	r24, r24
    1336:	49 f4       	brne	.+18     	; 0x134a <USB_Host_SetDeviceConfiguration+0x46>
    1338:	c0 93 55 05 	sts	0x0555, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    133c:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    133e:	11 f0       	breq	.+4      	; 0x1344 <USB_Host_SetDeviceConfiguration+0x40>
    1340:	9b e0       	ldi	r25, 0x0B	; 11
    1342:	01 c0       	rjmp	.+2      	; 0x1346 <USB_Host_SetDeviceConfiguration+0x42>
    1344:	9a e0       	ldi	r25, 0x0A	; 10
    1346:	90 93 5f 05 	sts	0x055F, r25
    134a:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    134c:	08 95       	ret

0000134e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    134e:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1350:	c0 91 a7 00 	lds	r28, 0x00A7
    1354:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1356:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    135a:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    135e:	42 da       	rcall	.-2940   	; 0x7e4 <USB_Host_ProcessNextHostState>
    1360:	c0 93 a7 00 	sts	0x00A7, r28
    1364:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1366:	08 95       	ret

00001368 <DCOMP_RNDIS_Host_NextRNDISControlInterface>:

	return RNDIS_ENUMERROR_NoError;
}

static uint8_t DCOMP_RNDIS_Host_NextRNDISControlInterface(void* const CurrentDescriptor)
{
    1368:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    136a:	81 81       	ldd	r24, Z+1	; 0x01
    136c:	84 30       	cpi	r24, 0x04	; 4
    136e:	49 f4       	brne	.+18     	; 0x1382 <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
    1370:	85 81       	ldd	r24, Z+5	; 0x05
    1372:	82 30       	cpi	r24, 0x02	; 2
    1374:	31 f4       	brne	.+12     	; 0x1382 <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1a>
    1376:	86 81       	ldd	r24, Z+6	; 0x06
    1378:	82 30       	cpi	r24, 0x02	; 2
    137a:	19 f4       	brne	.+6      	; 0x1382 <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1a>
		    (Interface->SubClass == CDC_CSCP_ACMSubclass) &&
    137c:	87 81       	ldd	r24, Z+7	; 0x07
    137e:	8f 3f       	cpi	r24, 0xFF	; 255
    1380:	11 f0       	breq	.+4      	; 0x1386 <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1382:	82 e0       	ldi	r24, 0x02	; 2
    1384:	08 95       	ret

		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
		    (Interface->SubClass == CDC_CSCP_ACMSubclass) &&
		    (Interface->Protocol == CDC_CSCP_VendorSpecificProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    1386:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1388:	08 95       	ret

0000138a <DCOMP_RNDIS_Host_NextRNDISDataInterface>:

static uint8_t DCOMP_RNDIS_Host_NextRNDISDataInterface(void* const CurrentDescriptor)
{
    138a:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    138c:	81 81       	ldd	r24, Z+1	; 0x01
    138e:	84 30       	cpi	r24, 0x04	; 4
    1390:	49 f4       	brne	.+18     	; 0x13a4 <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor,
		                                                         USB_Descriptor_Interface_t);

		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
    1392:	85 81       	ldd	r24, Z+5	; 0x05
    1394:	8a 30       	cpi	r24, 0x0A	; 10
    1396:	31 f4       	brne	.+12     	; 0x13a4 <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x1a>
    1398:	86 81       	ldd	r24, Z+6	; 0x06
    139a:	88 23       	and	r24, r24
    139c:	19 f4       	brne	.+6      	; 0x13a4 <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x1a>
		    (Interface->SubClass == CDC_CSCP_NoDataSubclass) &&
    139e:	87 81       	ldd	r24, Z+7	; 0x07
    13a0:	88 23       	and	r24, r24
    13a2:	11 f0       	breq	.+4      	; 0x13a8 <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    13a4:	82 e0       	ldi	r24, 0x02	; 2
    13a6:	08 95       	ret

		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
		    (Interface->SubClass == CDC_CSCP_NoDataSubclass) &&
		    (Interface->Protocol == CDC_CSCP_NoDataProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    13a8:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    13aa:	08 95       	ret

000013ac <RNDIS_SendEncapsulatedCommand>:

static uint8_t RNDIS_SendEncapsulatedCommand(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                             void* Buffer,
                                             const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
    13ac:	fc 01       	movw	r30, r24
    13ae:	87 89       	ldd	r24, Z+23	; 0x17
    13b0:	91 e2       	ldi	r25, 0x21	; 33
    13b2:	90 93 57 05 	sts	0x0557, r25
    13b6:	10 92 58 05 	sts	0x0558, r1
    13ba:	10 92 5a 05 	sts	0x055A, r1
    13be:	10 92 59 05 	sts	0x0559, r1
    13c2:	80 93 5b 05 	sts	0x055B, r24
    13c6:	10 92 5c 05 	sts	0x055C, r1
    13ca:	50 93 5e 05 	sts	0x055E, r21
    13ce:	40 93 5d 05 	sts	0x055D, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13d2:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = Length,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
    13d6:	cb 01       	movw	r24, r22
    13d8:	97 ce       	rjmp	.-722    	; 0x1108 <USB_Host_SendControlRequest>

000013da <RNDIS_GetEncapsulatedResponse>:
    13da:	fc 01       	movw	r30, r24
}
    13dc:	87 89       	ldd	r24, Z+23	; 0x17

static uint8_t RNDIS_GetEncapsulatedResponse(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                             void* Buffer,
                                             const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
    13de:	91 ea       	ldi	r25, 0xA1	; 161
    13e0:	90 93 57 05 	sts	0x0557, r25
    13e4:	91 e0       	ldi	r25, 0x01	; 1
    13e6:	90 93 58 05 	sts	0x0558, r25
    13ea:	10 92 5a 05 	sts	0x055A, r1
    13ee:	10 92 59 05 	sts	0x0559, r1
    13f2:	80 93 5b 05 	sts	0x055B, r24
    13f6:	10 92 5c 05 	sts	0x055C, r1
    13fa:	50 93 5e 05 	sts	0x055E, r21
    13fe:	40 93 5d 05 	sts	0x055D, r20
    1402:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = Length,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
    1406:	cb 01       	movw	r24, r22
    1408:	7f ce       	rjmp	.-770    	; 0x1108 <USB_Host_SendControlRequest>

0000140a <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint>:
    140a:	fc 01       	movw	r30, r24
}
    140c:	81 81       	ldd	r24, Z+1	; 0x01

static uint8_t DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    140e:	85 30       	cpi	r24, 0x05	; 5
    1410:	51 f4       	brne	.+20     	; 0x1426 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x1c>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
    1412:	83 81       	ldd	r24, Z+3	; 0x03
    1414:	83 70       	andi	r24, 0x03	; 3

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    1416:	82 50       	subi	r24, 0x02	; 2
    1418:	82 30       	cpi	r24, 0x02	; 2
    141a:	38 f4       	brcc	.+14     	; 0x142a <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x20>
		    !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    141c:	82 81       	ldd	r24, Z+2	; 0x02
    141e:	47 dc       	rcall	.-1906   	; 0xcae <Pipe_IsEndpointBound>
    1420:	88 23       	and	r24, r24
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    1422:	19 f4       	brne	.+6      	; 0x142a <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x20>
    1424:	04 c0       	rjmp	.+8      	; 0x142e <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x24>
    1426:	84 30       	cpi	r24, 0x04	; 4
		    !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    1428:	21 f0       	breq	.+8      	; 0x1432 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x28>
    142a:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    142c:	08 95       	ret
    142e:	80 e0       	ldi	r24, 0x00	; 0
		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
		    !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		{
			return DESCRIPTOR_SEARCH_Found;
    1430:	08 95       	ret
    1432:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    1434:	08 95       	ret

00001436 <RNDIS_Host_ConfigurePipes>:
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1436:	8f 92       	push	r8
#include "RNDISClassHost.h"

uint8_t RNDIS_Host_ConfigurePipes(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                  uint16_t ConfigDescriptorSize,
                                  void* ConfigDescriptorData)
{
    1438:	9f 92       	push	r9
    143a:	af 92       	push	r10
    143c:	bf 92       	push	r11
    143e:	cf 92       	push	r12
    1440:	df 92       	push	r13
    1442:	ef 92       	push	r14
    1444:	ff 92       	push	r15
    1446:	0f 93       	push	r16
    1448:	1f 93       	push	r17
    144a:	cf 93       	push	r28
    144c:	df 93       	push	r29
    144e:	00 d0       	rcall	.+0      	; 0x1450 <RNDIS_Host_ConfigurePipes+0x1a>
    1450:	00 d0       	rcall	.+0      	; 0x1452 <RNDIS_Host_ConfigurePipes+0x1c>
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	8c 01       	movw	r16, r24
    1458:	7a 83       	std	Y+2, r23	; 0x02
    145a:	69 83       	std	Y+1, r22	; 0x01
    145c:	5c 83       	std	Y+4, r21	; 0x04
    145e:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint        = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint  = NULL;
	USB_Descriptor_Interface_t* RNDISControlInterface = NULL;

	memset(&RNDISInterfaceInfo->State, 0x00, sizeof(RNDISInterfaceInfo->State));
    1460:	46 96       	adiw	r24, 0x16	; 22
    1462:	fc 01       	movw	r30, r24
    1464:	8a e0       	ldi	r24, 0x0A	; 10
    1466:	df 01       	movw	r26, r30
    1468:	1d 92       	st	X+, r1
    146a:	8a 95       	dec	r24
    146c:	e9 f7       	brne	.-6      	; 0x1468 <RNDIS_Host_ConfigurePipes+0x32>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    146e:	8b 80       	ldd	r8, Y+3	; 0x03
    1470:	9c 80       	ldd	r9, Y+4	; 0x04
    1472:	f4 01       	movw	r30, r8
    1474:	81 81       	ldd	r24, Z+1	; 0x01
    1476:	82 30       	cpi	r24, 0x02	; 2
    1478:	09 f0       	breq	.+2      	; 0x147c <RNDIS_Host_ConfigurePipes+0x46>
    147a:	85 c0       	rjmp	.+266    	; 0x1586 <RNDIS_Host_ConfigurePipes+0x150>
    147c:	aa 24       	eor	r10, r10
    147e:	bb 24       	eor	r11, r11
    1480:	cc 24       	eor	r12, r12
    1482:	dd 24       	eor	r13, r13
    1484:	ee 24       	eor	r14, r14
    1486:	ff 24       	eor	r15, r15

	RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(RNDISControlInterface) ||
    1488:	81 14       	cp	r8, r1
    148a:	91 04       	cpc	r9, r1
    148c:	51 f0       	breq	.+20     	; 0x14a2 <RNDIS_Host_ConfigurePipes+0x6c>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    148e:	ce 01       	movw	r24, r28
    1490:	01 96       	adiw	r24, 0x01	; 1
    1492:	be 01       	movw	r22, r28
    1494:	6d 5f       	subi	r22, 0xFD	; 253
    1496:	7f 4f       	sbci	r23, 0xFF	; 255
    1498:	45 e0       	ldi	r20, 0x05	; 5
    149a:	5a e0       	ldi	r21, 0x0A	; 10
    149c:	c5 dd       	rcall	.-1142   	; 0x1028 <USB_GetNextDescriptorComp>
    149e:	88 23       	and	r24, r24

	RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(RNDISControlInterface) ||
    14a0:	c1 f0       	breq	.+48     	; 0x14d2 <RNDIS_Host_ConfigurePipes+0x9c>
    14a2:	ce 01       	movw	r24, r28
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (NotificationEndpoint)
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    14a4:	01 96       	adiw	r24, 0x01	; 1
    14a6:	be 01       	movw	r22, r28
    14a8:	6d 5f       	subi	r22, 0xFD	; 253
    14aa:	7f 4f       	sbci	r23, 0xFF	; 255
    14ac:	a1 14       	cp	r10, r1
	{
		if (!(RNDISControlInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (NotificationEndpoint)
    14ae:	b1 04       	cpc	r11, r1
    14b0:	39 f0       	breq	.+14     	; 0x14c0 <RNDIS_Host_ConfigurePipes+0x8a>
    14b2:	45 ec       	ldi	r20, 0xC5	; 197
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    14b4:	59 e0       	ldi	r21, 0x09	; 9
    14b6:	b8 dd       	rcall	.-1168   	; 0x1028 <USB_GetNextDescriptorComp>
    14b8:	88 23       	and	r24, r24
    14ba:	09 f0       	breq	.+2      	; 0x14be <RNDIS_Host_ConfigurePipes+0x88>
    14bc:	66 c0       	rjmp	.+204    	; 0x158a <RNDIS_Host_ConfigurePipes+0x154>
    14be:	e0 cf       	rjmp	.-64     	; 0x1480 <RNDIS_Host_ConfigurePipes+0x4a>
    14c0:	44 eb       	ldi	r20, 0xB4	; 180
    14c2:	59 e0       	ldi	r21, 0x09	; 9
				DataINEndpoint  = NULL;
				DataOUTEndpoint = NULL;
			}
			else
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    14c4:	b1 dd       	rcall	.-1182   	; 0x1028 <USB_GetNextDescriptorComp>
    14c6:	88 23       	and	r24, r24
    14c8:	09 f0       	breq	.+2      	; 0x14cc <RNDIS_Host_ConfigurePipes+0x96>
    14ca:	5f c0       	rjmp	.+190    	; 0x158a <RNDIS_Host_ConfigurePipes+0x154>
    14cc:	8b 80       	ldd	r8, Y+3	; 0x03
    14ce:	9c 80       	ldd	r9, Y+4	; 0x04
    14d0:	0e c0       	rjmp	.+28     	; 0x14ee <RNDIS_Host_ConfigurePipes+0xb8>
											  DCOMP_RNDIS_Host_NextRNDISControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return RNDIS_ENUMERROR_NoCompatibleInterfaceFound;
				}

				RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    14d2:	eb 81       	ldd	r30, Y+3	; 0x03
    14d4:	fc 81       	ldd	r31, Y+4	; 0x04
    14d6:	82 81       	ldd	r24, Z+2	; 0x02
			}

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    14d8:	87 ff       	sbrs	r24, 7
    14da:	06 c0       	rjmp	.+12     	; 0x14e8 <RNDIS_Host_ConfigurePipes+0xb2>

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    14dc:	83 81       	ldd	r24, Z+3	; 0x03
    14de:	83 70       	andi	r24, 0x03	; 3
    14e0:	83 30       	cpi	r24, 0x03	; 3
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
    14e2:	21 f4       	brne	.+8      	; 0x14ec <RNDIS_Host_ConfigurePipes+0xb6>
    14e4:	5f 01       	movw	r10, r30
    14e6:	03 c0       	rjmp	.+6      	; 0x14ee <RNDIS_Host_ConfigurePipes+0xb8>
    14e8:	6f 01       	movw	r12, r30
			  NotificationEndpoint = EndpointData;
    14ea:	01 c0       	rjmp	.+2      	; 0x14ee <RNDIS_Host_ConfigurePipes+0xb8>
    14ec:	7f 01       	movw	r14, r30
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
    14ee:	e1 14       	cp	r14, r1
    14f0:	f1 04       	cpc	r15, r1
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  NotificationEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
    14f2:	51 f2       	breq	.-108    	; 0x1488 <RNDIS_Host_ConfigurePipes+0x52>
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return RNDIS_ENUMERROR_InvalidConfigDescriptor;

	RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
    14f4:	c1 14       	cp	r12, r1
    14f6:	d1 04       	cpc	r13, r1
    14f8:	39 f2       	breq	.-114    	; 0x1488 <RNDIS_Host_ConfigurePipes+0x52>
    14fa:	a1 14       	cp	r10, r1
    14fc:	b1 04       	cpc	r11, r1
    14fe:	21 f2       	breq	.-120    	; 0x1488 <RNDIS_Host_ConfigurePipes+0x52>
    1500:	d7 01       	movw	r26, r14
    1502:	14 96       	adiw	r26, 0x04	; 4
    1504:	8d 91       	ld	r24, X+
		{
			DataOUTEndpoint = EndpointData;
		}
	}

	RNDISInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    1506:	9c 91       	ld	r25, X
    1508:	15 97       	sbiw	r26, 0x05	; 5
    150a:	f8 01       	movw	r30, r16
    150c:	92 83       	std	Z+2, r25	; 0x02
    150e:	81 83       	std	Z+1, r24	; 0x01
    1510:	12 96       	adiw	r26, 0x02	; 2
    1512:	8c 91       	ld	r24, X
    1514:	83 83       	std	Z+3, r24	; 0x03
	RNDISInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1516:	22 e0       	ldi	r18, 0x02	; 2
    1518:	24 83       	std	Z+4, r18	; 0x04
    151a:	d6 01       	movw	r26, r12
	RNDISInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
    151c:	14 96       	adiw	r26, 0x04	; 4
    151e:	8d 91       	ld	r24, X+
	
	RNDISInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1520:	9c 91       	ld	r25, X
    1522:	15 97       	sbiw	r26, 0x05	; 5
    1524:	90 87       	std	Z+8, r25	; 0x08
    1526:	87 83       	std	Z+7, r24	; 0x07
    1528:	12 96       	adiw	r26, 0x02	; 2
    152a:	8c 91       	ld	r24, X
    152c:	81 87       	std	Z+9, r24	; 0x09
	RNDISInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    152e:	22 87       	std	Z+10, r18	; 0x0a
    1530:	f5 01       	movw	r30, r10
    1532:	84 81       	ldd	r24, Z+4	; 0x04
	RNDISInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;
    1534:	95 81       	ldd	r25, Z+5	; 0x05
	
	RNDISInterfaceInfo->Config.NotificationPipe.Size = le16_to_cpu(NotificationEndpoint->EndpointSize);
    1536:	d8 01       	movw	r26, r16
    1538:	1e 96       	adiw	r26, 0x0e	; 14
    153a:	9c 93       	st	X, r25
    153c:	8e 93       	st	-X, r24
    153e:	1d 97       	sbiw	r26, 0x0d	; 13
    1540:	82 81       	ldd	r24, Z+2	; 0x02
    1542:	1f 96       	adiw	r26, 0x0f	; 15
    1544:	8c 93       	st	X, r24
	RNDISInterfaceInfo->Config.NotificationPipe.EndpointAddress = NotificationEndpoint->EndpointAddress;
    1546:	1f 97       	sbiw	r26, 0x0f	; 15
    1548:	83 e0       	ldi	r24, 0x03	; 3
    154a:	50 96       	adiw	r26, 0x10	; 16
    154c:	8c 93       	st	X, r24
	RNDISInterfaceInfo->Config.NotificationPipe.Type = EP_TYPE_INTERRUPT;
    154e:	c8 01       	movw	r24, r16
    1550:	61 e0       	ldi	r22, 0x01	; 1
    1552:	78 db       	rcall	.-2320   	; 0xc44 <Pipe_ConfigurePipeTable>

	if (!(Pipe_ConfigurePipeTable(&RNDISInterfaceInfo->Config.DataINPipe, 1)))
    1554:	88 23       	and	r24, r24
    1556:	d9 f0       	breq	.+54     	; 0x158e <RNDIS_Host_ConfigurePipes+0x158>
    1558:	c8 01       	movw	r24, r16
    155a:	06 96       	adiw	r24, 0x06	; 6
    155c:	61 e0       	ldi	r22, 0x01	; 1
    155e:	72 db       	rcall	.-2332   	; 0xc44 <Pipe_ConfigurePipeTable>
	  return false;
	
	if (!(Pipe_ConfigurePipeTable(&RNDISInterfaceInfo->Config.DataOUTPipe, 1)))
    1560:	88 23       	and	r24, r24
    1562:	a9 f0       	breq	.+42     	; 0x158e <RNDIS_Host_ConfigurePipes+0x158>
    1564:	c8 01       	movw	r24, r16
    1566:	0c 96       	adiw	r24, 0x0c	; 12
    1568:	61 e0       	ldi	r22, 0x01	; 1
    156a:	6c db       	rcall	.-2344   	; 0xc44 <Pipe_ConfigurePipeTable>
    156c:	88 23       	and	r24, r24
	  return false;

	if (!(Pipe_ConfigurePipeTable(&RNDISInterfaceInfo->Config.NotificationPipe, 1)))
    156e:	79 f0       	breq	.+30     	; 0x158e <RNDIS_Host_ConfigurePipes+0x158>
    1570:	f4 01       	movw	r30, r8
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	d8 01       	movw	r26, r16
    1576:	57 96       	adiw	r26, 0x17	; 23
    1578:	8c 93       	st	X, r24
    157a:	57 97       	sbiw	r26, 0x17	; 23
	  return false;

	RNDISInterfaceInfo->State.ControlInterfaceNumber = RNDISControlInterface->InterfaceNumber;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	56 96       	adiw	r26, 0x16	; 22
    1580:	8c 93       	st	X, r24
    1582:	56 97       	sbiw	r26, 0x16	; 22
    1584:	04 c0       	rjmp	.+8      	; 0x158e <RNDIS_Host_ConfigurePipes+0x158>
    1586:	81 e0       	ldi	r24, 0x01	; 1
	RNDISInterfaceInfo->State.IsActive = true;
    1588:	03 c0       	rjmp	.+6      	; 0x1590 <RNDIS_Host_ConfigurePipes+0x15a>
    158a:	82 e0       	ldi	r24, 0x02	; 2
    158c:	01 c0       	rjmp	.+2      	; 0x1590 <RNDIS_Host_ConfigurePipes+0x15a>
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	0f 90       	pop	r0
	USB_Descriptor_Interface_t* RNDISControlInterface = NULL;

	memset(&RNDISInterfaceInfo->State, 0x00, sizeof(RNDISInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return RNDIS_ENUMERROR_InvalidConfigDescriptor;
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
			else
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
											  DCOMP_RNDIS_Host_NextRNDISControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return RNDIS_ENUMERROR_NoCompatibleInterfaceFound;
    1596:	0f 90       	pop	r0
    1598:	df 91       	pop	r29
	
	if (!(Pipe_ConfigurePipeTable(&RNDISInterfaceInfo->Config.DataOUTPipe, 1)))
	  return false;

	if (!(Pipe_ConfigurePipeTable(&RNDISInterfaceInfo->Config.NotificationPipe, 1)))
	  return false;
    159a:	cf 91       	pop	r28

	RNDISInterfaceInfo->State.ControlInterfaceNumber = RNDISControlInterface->InterfaceNumber;
	RNDISInterfaceInfo->State.IsActive = true;

	return RNDIS_ENUMERROR_NoError;
}
    159c:	1f 91       	pop	r17
    159e:	0f 91       	pop	r16
    15a0:	ff 90       	pop	r15
    15a2:	ef 90       	pop	r14
    15a4:	df 90       	pop	r13
    15a6:	cf 90       	pop	r12
    15a8:	bf 90       	pop	r11
    15aa:	af 90       	pop	r10
    15ac:	9f 90       	pop	r9
    15ae:	8f 90       	pop	r8
    15b0:	08 95       	ret

000015b2 <RNDIS_Host_InitializeDevice>:
    15b2:	0f 93       	push	r16
    15b4:	1f 93       	push	r17
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62

	return HOST_SENDCONTROL_Successful;
}

uint8_t RNDIS_Host_InitializeDevice(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo)
{
    15be:	cc 54       	subi	r28, 0x4C	; 76
    15c0:	d0 40       	sbci	r29, 0x00	; 0
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	8c 01       	movw	r16, r24
	uint8_t ErrorCode;

	RNDIS_Initialize_Message_t  InitMessage;
	RNDIS_Initialize_Complete_t InitMessageResponse;

	InitMessage.MessageType     = CPU_TO_LE32(REMOTE_NDIS_INITIALIZE_MSG);
    15ce:	82 e0       	ldi	r24, 0x02	; 2
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	a0 e0       	ldi	r26, 0x00	; 0
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	9a 83       	std	Y+2, r25	; 0x02
    15da:	ab 83       	std	Y+3, r26	; 0x03
    15dc:	bc 83       	std	Y+4, r27	; 0x04
	InitMessage.MessageLength   = CPU_TO_LE32(sizeof(RNDIS_Initialize_Message_t));
    15de:	88 e1       	ldi	r24, 0x18	; 24
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	a0 e0       	ldi	r26, 0x00	; 0
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	8d 83       	std	Y+5, r24	; 0x05
    15e8:	9e 83       	std	Y+6, r25	; 0x06
    15ea:	af 83       	std	Y+7, r26	; 0x07
    15ec:	b8 87       	std	Y+8, r27	; 0x08
	InitMessage.RequestId       = cpu_to_le32(RNDISInterfaceInfo->State.RequestID++);
    15ee:	f8 01       	movw	r30, r16
    15f0:	84 8d       	ldd	r24, Z+28	; 0x1c
    15f2:	95 8d       	ldd	r25, Z+29	; 0x1d
    15f4:	a6 8d       	ldd	r26, Z+30	; 0x1e
    15f6:	b7 8d       	ldd	r27, Z+31	; 0x1f
    15f8:	89 87       	std	Y+9, r24	; 0x09
    15fa:	9a 87       	std	Y+10, r25	; 0x0a
    15fc:	ab 87       	std	Y+11, r26	; 0x0b
    15fe:	bc 87       	std	Y+12, r27	; 0x0c
    1600:	01 96       	adiw	r24, 0x01	; 1
    1602:	a1 1d       	adc	r26, r1
    1604:	b1 1d       	adc	r27, r1
    1606:	84 8f       	std	Z+28, r24	; 0x1c
    1608:	95 8f       	std	Z+29, r25	; 0x1d
    160a:	a6 8f       	std	Z+30, r26	; 0x1e
    160c:	b7 8f       	std	Z+31, r27	; 0x1f

	InitMessage.MajorVersion    = CPU_TO_LE32(REMOTE_NDIS_VERSION_MAJOR);
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	a0 e0       	ldi	r26, 0x00	; 0
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	8d 87       	std	Y+13, r24	; 0x0d
    1618:	9e 87       	std	Y+14, r25	; 0x0e
    161a:	af 87       	std	Y+15, r26	; 0x0f
    161c:	b8 8b       	std	Y+16, r27	; 0x10
	InitMessage.MinorVersion    = CPU_TO_LE32(REMOTE_NDIS_VERSION_MINOR);
    161e:	19 8a       	std	Y+17, r1	; 0x11
    1620:	1a 8a       	std	Y+18, r1	; 0x12
    1622:	1b 8a       	std	Y+19, r1	; 0x13
    1624:	1c 8a       	std	Y+20, r1	; 0x14
	InitMessage.MaxTransferSize = cpu_to_le32(RNDISInterfaceInfo->Config.HostMaxPacketSize);
    1626:	82 89       	ldd	r24, Z+18	; 0x12
    1628:	93 89       	ldd	r25, Z+19	; 0x13
    162a:	a4 89       	ldd	r26, Z+20	; 0x14
    162c:	b5 89       	ldd	r27, Z+21	; 0x15
    162e:	8d 8b       	std	Y+21, r24	; 0x15
    1630:	9e 8b       	std	Y+22, r25	; 0x16
    1632:	af 8b       	std	Y+23, r26	; 0x17
    1634:	b8 8f       	std	Y+24, r27	; 0x18

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(RNDISInterfaceInfo, &InitMessage,
    1636:	c8 01       	movw	r24, r16
    1638:	be 01       	movw	r22, r28
    163a:	6f 5f       	subi	r22, 0xFF	; 255
    163c:	7f 4f       	sbci	r23, 0xFF	; 255
    163e:	48 e1       	ldi	r20, 0x18	; 24
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	b4 de       	rcall	.-664    	; 0x13ac <RNDIS_SendEncapsulatedCommand>
    1644:	88 23       	and	r24, r24
    1646:	f9 f4       	brne	.+62     	; 0x1686 <RNDIS_Host_InitializeDevice+0xd4>
    1648:	c8 01       	movw	r24, r16
	                                               sizeof(RNDIS_Initialize_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(RNDISInterfaceInfo, &InitMessageResponse,
    164a:	be 01       	movw	r22, r28
    164c:	67 5e       	subi	r22, 0xE7	; 231
    164e:	7f 4f       	sbci	r23, 0xFF	; 255
    1650:	44 e3       	ldi	r20, 0x34	; 52
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	c2 de       	rcall	.-636    	; 0x13da <RNDIS_GetEncapsulatedResponse>
    1656:	88 23       	and	r24, r24
    1658:	b1 f4       	brne	.+44     	; 0x1686 <RNDIS_Host_InitializeDevice+0xd4>
    165a:	4d a1       	lds	r20, 0x4d
    165c:	5e a1       	lds	r21, 0x4e
	                                               sizeof(RNDIS_Initialize_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (InitMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
    165e:	6f a1       	lds	r22, 0x4f
    1660:	78 a5       	lds	r23, 0x68
    1662:	41 15       	cp	r20, r1
    1664:	51 05       	cpc	r21, r1
    1666:	61 05       	cpc	r22, r1
    1668:	71 05       	cpc	r23, r1
    166a:	61 f4       	brne	.+24     	; 0x1684 <RNDIS_Host_InitializeDevice+0xd2>
    166c:	21 96       	adiw	r28, 0x01	; 1
    166e:	4c ad       	sts	0x6c, r20
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	RNDISInterfaceInfo->State.DeviceMaxPacketSize = le32_to_cpu(InitMessageResponse.MaxTransferSize);
    1670:	5d ad       	sts	0x6d, r21
    1672:	6e ad       	sts	0x6e, r22
    1674:	7f ad       	sts	0x6f, r23
    1676:	21 97       	sbiw	r28, 0x01	; 1
    1678:	f8 01       	movw	r30, r16
    167a:	40 8f       	std	Z+24, r20	; 0x18
    167c:	51 8f       	std	Z+25, r21	; 0x19
    167e:	62 8f       	std	Z+26, r22	; 0x1a
    1680:	73 8f       	std	Z+27, r23	; 0x1b
    1682:	01 c0       	rjmp	.+2      	; 0x1686 <RNDIS_Host_InitializeDevice+0xd4>
    1684:	80 e8       	ldi	r24, 0x80	; 128

	return HOST_SENDCONTROL_Successful;
    1686:	c4 5b       	subi	r28, 0xB4	; 180
	{
		return ErrorCode;
	}

	if (InitMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;
    1688:	df 4f       	sbci	r29, 0xFF	; 255

	RNDISInterfaceInfo->State.DeviceMaxPacketSize = le32_to_cpu(InitMessageResponse.MaxTransferSize);

	return HOST_SENDCONTROL_Successful;
}
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61
    1694:	df 91       	pop	r29
    1696:	cf 91       	pop	r28
    1698:	1f 91       	pop	r17
    169a:	0f 91       	pop	r16
    169c:	08 95       	ret

0000169e <RNDIS_Host_SetRNDISProperty>:
    169e:	4f 92       	push	r4
    16a0:	5f 92       	push	r5

uint8_t RNDIS_Host_SetRNDISProperty(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                    const uint32_t Oid,
                                    void* Buffer,
                                    const uint16_t Length)
{
    16a2:	6f 92       	push	r6
    16a4:	7f 92       	push	r7
    16a6:	8f 92       	push	r8
    16a8:	9f 92       	push	r9
    16aa:	af 92       	push	r10
    16ac:	bf 92       	push	r11
    16ae:	cf 92       	push	r12
    16b0:	df 92       	push	r13
    16b2:	ef 92       	push	r14
    16b4:	ff 92       	push	r15
    16b6:	0f 93       	push	r16
    16b8:	1f 93       	push	r17
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	60 97       	sbiw	r28, 0x10	; 16
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	de bf       	out	0x3e, r29	; 62
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	7c 01       	movw	r14, r24
    16d0:	48 01       	movw	r8, r16

	if (SetMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	return HOST_SENDCONTROL_Successful;
}
    16d2:	ad b6       	in	r10, 0x3d	; 61
    16d4:	be b6       	in	r11, 0x3e	; 62

	struct
	{
		RNDIS_Set_Message_t SetMessage;
		uint8_t             ContiguousBuffer[Length];
	} SetMessageData;
    16d6:	ec e1       	ldi	r30, 0x1C	; 28
    16d8:	ce 2e       	mov	r12, r30
    16da:	d1 2c       	mov	r13, r1
    16dc:	c0 0e       	add	r12, r16
    16de:	d1 1e       	adc	r13, r17
    16e0:	8d b7       	in	r24, 0x3d	; 61
    16e2:	9e b7       	in	r25, 0x3e	; 62
    16e4:	8c 19       	sub	r24, r12
    16e6:	9d 09       	sbc	r25, r13
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	9e bf       	out	0x3e, r25	; 62
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	8d bf       	out	0x3d, r24	; 61
    16f2:	0d b7       	in	r16, 0x3d	; 61
    16f4:	1e b7       	in	r17, 0x3e	; 62
    16f6:	0f 5f       	subi	r16, 0xFF	; 255
    16f8:	1f 4f       	sbci	r17, 0xFF	; 255

	RNDIS_Set_Complete_t SetMessageResponse;

	SetMessageData.SetMessage.MessageType    = CPU_TO_LE32(REMOTE_NDIS_SET_MSG);
    16fa:	f5 e0       	ldi	r31, 0x05	; 5
    16fc:	4f 2e       	mov	r4, r31
    16fe:	51 2c       	mov	r5, r1
    1700:	61 2c       	mov	r6, r1
    1702:	71 2c       	mov	r7, r1
    1704:	ad b7       	in	r26, 0x3d	; 61
    1706:	be b7       	in	r27, 0x3e	; 62
    1708:	11 96       	adiw	r26, 0x01	; 1
    170a:	4d 92       	st	X+, r4
    170c:	5d 92       	st	X+, r5
    170e:	6d 92       	st	X+, r6
    1710:	7c 92       	st	X, r7
    1712:	14 97       	sbiw	r26, 0x04	; 4
	SetMessageData.SetMessage.MessageLength  = cpu_to_le32(sizeof(RNDIS_Set_Message_t) + Length);
    1714:	26 01       	movw	r4, r12
    1716:	66 24       	eor	r6, r6
    1718:	77 24       	eor	r7, r7
    171a:	f8 01       	movw	r30, r16
    171c:	44 82       	std	Z+4, r4	; 0x04
    171e:	55 82       	std	Z+5, r5	; 0x05
    1720:	66 82       	std	Z+6, r6	; 0x06
    1722:	77 82       	std	Z+7, r7	; 0x07
	SetMessageData.SetMessage.RequestId      = cpu_to_le32(RNDISInterfaceInfo->State.RequestID++);
    1724:	f7 01       	movw	r30, r14
    1726:	84 8d       	ldd	r24, Z+28	; 0x1c
    1728:	95 8d       	ldd	r25, Z+29	; 0x1d
    172a:	a6 8d       	ldd	r26, Z+30	; 0x1e
    172c:	b7 8d       	ldd	r27, Z+31	; 0x1f
    172e:	f8 01       	movw	r30, r16
    1730:	80 87       	std	Z+8, r24	; 0x08
    1732:	91 87       	std	Z+9, r25	; 0x09
    1734:	a2 87       	std	Z+10, r26	; 0x0a
    1736:	b3 87       	std	Z+11, r27	; 0x0b
    1738:	01 96       	adiw	r24, 0x01	; 1
    173a:	a1 1d       	adc	r26, r1
    173c:	b1 1d       	adc	r27, r1
    173e:	f7 01       	movw	r30, r14
    1740:	84 8f       	std	Z+28, r24	; 0x1c
    1742:	95 8f       	std	Z+29, r25	; 0x1d
    1744:	a6 8f       	std	Z+30, r26	; 0x1e
    1746:	b7 8f       	std	Z+31, r27	; 0x1f

	SetMessageData.SetMessage.Oid            = cpu_to_le32(Oid);
    1748:	d8 01       	movw	r26, r16
    174a:	1c 96       	adiw	r26, 0x0c	; 12
    174c:	4d 93       	st	X+, r20
    174e:	5d 93       	st	X+, r21
    1750:	6d 93       	st	X+, r22
    1752:	7c 93       	st	X, r23
    1754:	1f 97       	sbiw	r26, 0x0f	; 15
	SetMessageData.SetMessage.InformationBufferLength = cpu_to_le32(Length);
    1756:	c4 01       	movw	r24, r8
    1758:	a0 e0       	ldi	r26, 0x00	; 0
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	f8 01       	movw	r30, r16
    175e:	80 8b       	std	Z+16, r24	; 0x10
    1760:	91 8b       	std	Z+17, r25	; 0x11
    1762:	a2 8b       	std	Z+18, r26	; 0x12
    1764:	b3 8b       	std	Z+19, r27	; 0x13
	SetMessageData.SetMessage.InformationBufferOffset = CPU_TO_LE32(sizeof(RNDIS_Set_Message_t) - sizeof(RNDIS_Message_Header_t));
    1766:	84 e1       	ldi	r24, 0x14	; 20
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	a0 e0       	ldi	r26, 0x00	; 0
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	84 8b       	std	Z+20, r24	; 0x14
    1770:	95 8b       	std	Z+21, r25	; 0x15
    1772:	a6 8b       	std	Z+22, r26	; 0x16
    1774:	b7 8b       	std	Z+23, r27	; 0x17
	SetMessageData.SetMessage.DeviceVcHandle = CPU_TO_LE32(0);
    1776:	10 8e       	std	Z+24, r1	; 0x18
    1778:	11 8e       	std	Z+25, r1	; 0x19
    177a:	12 8e       	std	Z+26, r1	; 0x1a
    177c:	13 8e       	std	Z+27, r1	; 0x1b

	memcpy(&SetMessageData.ContiguousBuffer, Buffer, Length);
    177e:	8d b7       	in	r24, 0x3d	; 61
    1780:	9e b7       	in	r25, 0x3e	; 62
    1782:	4d 96       	adiw	r24, 0x1d	; 29
    1784:	b9 01       	movw	r22, r18
    1786:	a4 01       	movw	r20, r8
    1788:	a2 d1       	rcall	.+836    	; 0x1ace <memcpy>
    178a:	c7 01       	movw	r24, r14

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(RNDISInterfaceInfo, &SetMessageData,
    178c:	b8 01       	movw	r22, r16
    178e:	a6 01       	movw	r20, r12
    1790:	0d de       	rcall	.-998    	; 0x13ac <RNDIS_SendEncapsulatedCommand>
    1792:	88 23       	and	r24, r24
    1794:	99 f4       	brne	.+38     	; 0x17bc <RNDIS_Host_SetRNDISProperty+0x11e>
    1796:	c7 01       	movw	r24, r14
    1798:	be 01       	movw	r22, r28
	                                               (sizeof(RNDIS_Set_Message_t) + Length))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(RNDISInterfaceInfo, &SetMessageResponse,
    179a:	6f 5f       	subi	r22, 0xFF	; 255
    179c:	7f 4f       	sbci	r23, 0xFF	; 255
    179e:	40 e1       	ldi	r20, 0x10	; 16
    17a0:	50 e0       	ldi	r21, 0x00	; 0
    17a2:	1b de       	rcall	.-970    	; 0x13da <RNDIS_GetEncapsulatedResponse>
    17a4:	88 23       	and	r24, r24
    17a6:	51 f4       	brne	.+20     	; 0x17bc <RNDIS_Host_SetRNDISProperty+0x11e>
    17a8:	4d 85       	ldd	r20, Y+13	; 0x0d
    17aa:	5e 85       	ldd	r21, Y+14	; 0x0e
    17ac:	6f 85       	ldd	r22, Y+15	; 0x0f
	                                               sizeof(RNDIS_Set_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (SetMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
    17ae:	78 89       	ldd	r23, Y+16	; 0x10
    17b0:	41 15       	cp	r20, r1
    17b2:	51 05       	cpc	r21, r1
    17b4:	61 05       	cpc	r22, r1
    17b6:	71 05       	cpc	r23, r1
    17b8:	09 f0       	breq	.+2      	; 0x17bc <RNDIS_Host_SetRNDISProperty+0x11e>
    17ba:	80 e8       	ldi	r24, 0x80	; 128
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;
    17c0:	be be       	out	0x3e, r11	; 62

	return HOST_SENDCONTROL_Successful;
}
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	ad be       	out	0x3d, r10	; 61
    17c6:	60 96       	adiw	r28, 0x10	; 16
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	1f 91       	pop	r17
    17d8:	0f 91       	pop	r16
    17da:	ff 90       	pop	r15
    17dc:	ef 90       	pop	r14
    17de:	df 90       	pop	r13
    17e0:	cf 90       	pop	r12
    17e2:	bf 90       	pop	r11
    17e4:	af 90       	pop	r10
    17e6:	9f 90       	pop	r9
    17e8:	8f 90       	pop	r8
    17ea:	7f 90       	pop	r7
    17ec:	6f 90       	pop	r6
    17ee:	5f 90       	pop	r5
    17f0:	4f 90       	pop	r4
    17f2:	08 95       	ret

000017f4 <RNDIS_Host_QueryRNDISProperty>:
    17f4:	4f 92       	push	r4
    17f6:	5f 92       	push	r5
    17f8:	6f 92       	push	r6

uint8_t RNDIS_Host_QueryRNDISProperty(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                      const uint32_t Oid,
                                      void* Buffer,
                                      const uint16_t MaxLength)
{
    17fa:	7f 92       	push	r7
    17fc:	8f 92       	push	r8
    17fe:	9f 92       	push	r9
    1800:	af 92       	push	r10
    1802:	bf 92       	push	r11
    1804:	cf 92       	push	r12
    1806:	df 92       	push	r13
    1808:	ef 92       	push	r14
    180a:	ff 92       	push	r15
    180c:	0f 93       	push	r16
    180e:	1f 93       	push	r17
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	6c 97       	sbiw	r28, 0x1c	; 28
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	7c 01       	movw	r14, r24
    1826:	49 01       	movw	r8, r18
    1828:	68 01       	movw	r12, r16
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);

	return HOST_SENDCONTROL_Successful;
}
    182a:	4d b6       	in	r4, 0x3d	; 61
    182c:	5e b6       	in	r5, 0x3e	; 62

	struct
	{
		RNDIS_Query_Complete_t QueryMessageResponse;
		uint8_t                ContiguousBuffer[MaxLength];
	} QueryMessageResponseData;
    182e:	a8 e1       	ldi	r26, 0x18	; 24
    1830:	6a 2e       	mov	r6, r26
    1832:	71 2c       	mov	r7, r1
    1834:	60 0e       	add	r6, r16
    1836:	71 1e       	adc	r7, r17
    1838:	8d b7       	in	r24, 0x3d	; 61
    183a:	9e b7       	in	r25, 0x3e	; 62
    183c:	86 19       	sub	r24, r6
    183e:	97 09       	sbc	r25, r7
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	9e bf       	out	0x3e, r25	; 62
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	8d bf       	out	0x3d, r24	; 61
    184a:	ad b6       	in	r10, 0x3d	; 61
    184c:	be b6       	in	r11, 0x3e	; 62
    184e:	08 94       	sec
    1850:	a1 1c       	adc	r10, r1
    1852:	b1 1c       	adc	r11, r1

	QueryMessage.MessageType    = CPU_TO_LE32(REMOTE_NDIS_QUERY_MSG);
    1854:	84 e0       	ldi	r24, 0x04	; 4
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	a0 e0       	ldi	r26, 0x00	; 0
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	89 83       	std	Y+1, r24	; 0x01
    185e:	9a 83       	std	Y+2, r25	; 0x02
    1860:	ab 83       	std	Y+3, r26	; 0x03
    1862:	bc 83       	std	Y+4, r27	; 0x04
	QueryMessage.MessageLength  = CPU_TO_LE32(sizeof(RNDIS_Query_Message_t));
    1864:	8c e1       	ldi	r24, 0x1C	; 28
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	a0 e0       	ldi	r26, 0x00	; 0
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	8d 83       	std	Y+5, r24	; 0x05
    186e:	9e 83       	std	Y+6, r25	; 0x06
    1870:	af 83       	std	Y+7, r26	; 0x07
    1872:	b8 87       	std	Y+8, r27	; 0x08
	QueryMessage.RequestId      = cpu_to_le32(RNDISInterfaceInfo->State.RequestID++);
    1874:	f7 01       	movw	r30, r14
    1876:	84 8d       	ldd	r24, Z+28	; 0x1c
    1878:	95 8d       	ldd	r25, Z+29	; 0x1d
    187a:	a6 8d       	ldd	r26, Z+30	; 0x1e
    187c:	b7 8d       	ldd	r27, Z+31	; 0x1f
    187e:	89 87       	std	Y+9, r24	; 0x09
    1880:	9a 87       	std	Y+10, r25	; 0x0a
    1882:	ab 87       	std	Y+11, r26	; 0x0b
    1884:	bc 87       	std	Y+12, r27	; 0x0c
    1886:	01 96       	adiw	r24, 0x01	; 1
    1888:	a1 1d       	adc	r26, r1
    188a:	b1 1d       	adc	r27, r1
    188c:	84 8f       	std	Z+28, r24	; 0x1c
    188e:	95 8f       	std	Z+29, r25	; 0x1d
    1890:	a6 8f       	std	Z+30, r26	; 0x1e
    1892:	b7 8f       	std	Z+31, r27	; 0x1f

	QueryMessage.Oid            = cpu_to_le32(Oid);
    1894:	4d 87       	std	Y+13, r20	; 0x0d
    1896:	5e 87       	std	Y+14, r21	; 0x0e
    1898:	6f 87       	std	Y+15, r22	; 0x0f
    189a:	78 8b       	std	Y+16, r23	; 0x10
	QueryMessage.InformationBufferLength = CPU_TO_LE32(0);
    189c:	19 8a       	std	Y+17, r1	; 0x11
    189e:	1a 8a       	std	Y+18, r1	; 0x12
    18a0:	1b 8a       	std	Y+19, r1	; 0x13
    18a2:	1c 8a       	std	Y+20, r1	; 0x14
	QueryMessage.InformationBufferOffset = CPU_TO_LE32(0);
    18a4:	1d 8a       	std	Y+21, r1	; 0x15
    18a6:	1e 8a       	std	Y+22, r1	; 0x16
    18a8:	1f 8a       	std	Y+23, r1	; 0x17
    18aa:	18 8e       	std	Y+24, r1	; 0x18
	QueryMessage.DeviceVcHandle = CPU_TO_LE32(0);
    18ac:	19 8e       	std	Y+25, r1	; 0x19
    18ae:	1a 8e       	std	Y+26, r1	; 0x1a
    18b0:	1b 8e       	std	Y+27, r1	; 0x1b
    18b2:	1c 8e       	std	Y+28, r1	; 0x1c

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(RNDISInterfaceInfo, &QueryMessage,
    18b4:	c7 01       	movw	r24, r14
    18b6:	be 01       	movw	r22, r28
    18b8:	6f 5f       	subi	r22, 0xFF	; 255
    18ba:	7f 4f       	sbci	r23, 0xFF	; 255
    18bc:	4c e1       	ldi	r20, 0x1C	; 28
    18be:	50 e0       	ldi	r21, 0x00	; 0
    18c0:	75 dd       	rcall	.-1302   	; 0x13ac <RNDIS_SendEncapsulatedCommand>
    18c2:	18 2f       	mov	r17, r24
    18c4:	88 23       	and	r24, r24
    18c6:	c1 f4       	brne	.+48     	; 0x18f8 <RNDIS_Host_QueryRNDISProperty+0x104>
    18c8:	c7 01       	movw	r24, r14
	                                               sizeof(RNDIS_Query_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(RNDISInterfaceInfo, &QueryMessageResponseData,
    18ca:	b5 01       	movw	r22, r10
    18cc:	a3 01       	movw	r20, r6
    18ce:	85 dd       	rcall	.-1270   	; 0x13da <RNDIS_GetEncapsulatedResponse>
    18d0:	18 2f       	mov	r17, r24
    18d2:	88 23       	and	r24, r24
    18d4:	89 f4       	brne	.+34     	; 0x18f8 <RNDIS_Host_QueryRNDISProperty+0x104>
    18d6:	f5 01       	movw	r30, r10
    18d8:	84 85       	ldd	r24, Z+12	; 0x0c
	                                               sizeof(QueryMessageResponseData))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (QueryMessageResponseData.QueryMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
    18da:	95 85       	ldd	r25, Z+13	; 0x0d
    18dc:	a6 85       	ldd	r26, Z+14	; 0x0e
    18de:	b7 85       	ldd	r27, Z+15	; 0x0f
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	a1 05       	cpc	r26, r1
    18e4:	b1 05       	cpc	r27, r1
    18e6:	39 f4       	brne	.+14     	; 0x18f6 <RNDIS_Host_QueryRNDISProperty+0x102>
    18e8:	b5 01       	movw	r22, r10
    18ea:	68 5e       	subi	r22, 0xE8	; 232
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);
    18ec:	7f 4f       	sbci	r23, 0xFF	; 255
    18ee:	c4 01       	movw	r24, r8
    18f0:	a6 01       	movw	r20, r12
    18f2:	ed d0       	rcall	.+474    	; 0x1ace <memcpy>
    18f4:	01 c0       	rjmp	.+2      	; 0x18f8 <RNDIS_Host_QueryRNDISProperty+0x104>
    18f6:	10 e8       	ldi	r17, 0x80	; 128
    18f8:	81 2f       	mov	r24, r17
    18fa:	0f b6       	in	r0, 0x3f	; 63
	{
		return ErrorCode;
	}

	if (QueryMessageResponseData.QueryMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;
    18fc:	f8 94       	cli

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);

	return HOST_SENDCONTROL_Successful;
}
    18fe:	5e be       	out	0x3e, r5	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	4d be       	out	0x3d, r4	; 61
    1904:	6c 96       	adiw	r28, 0x1c	; 28
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	de bf       	out	0x3e, r29	; 62
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	cd bf       	out	0x3d, r28	; 61
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	1f 91       	pop	r17
    1916:	0f 91       	pop	r16
    1918:	ff 90       	pop	r15
    191a:	ef 90       	pop	r14
    191c:	df 90       	pop	r13
    191e:	cf 90       	pop	r12
    1920:	bf 90       	pop	r11
    1922:	af 90       	pop	r10
    1924:	9f 90       	pop	r9
    1926:	8f 90       	pop	r8
    1928:	7f 90       	pop	r7
    192a:	6f 90       	pop	r6
    192c:	5f 90       	pop	r5
    192e:	4f 90       	pop	r4
    1930:	08 95       	ret

00001932 <RNDIS_Host_IsPacketReceived>:
    1932:	fc 01       	movw	r30, r24
    1934:	80 91 5f 05 	lds	r24, 0x055F

bool RNDIS_Host_IsPacketReceived(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo)
{
	bool PacketWaiting;

	if ((USB_HostState != HOST_STATE_Configured) || !(RNDISInterfaceInfo->State.IsActive))
    1938:	8b 30       	cpi	r24, 0x0B	; 11
    193a:	a9 f4       	brne	.+42     	; 0x1966 <RNDIS_Host_IsPacketReceived+0x34>
    193c:	86 89       	ldd	r24, Z+22	; 0x16
    193e:	88 23       	and	r24, r24
    1940:	a1 f0       	breq	.+40     	; 0x196a <RNDIS_Host_IsPacketReceived+0x38>
    1942:	80 81       	ld	r24, Z
    1944:	8f 70       	andi	r24, 0x0F	; 15
    1946:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    194a:	80 91 a9 00 	lds	r24, 0x00A9
    194e:	8f 7b       	andi	r24, 0xBF	; 191
    1950:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1954:	80 91 a6 00 	lds	r24, 0x00A6
    1958:	81 70       	andi	r24, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    195a:	90 91 a9 00 	lds	r25, 0x00A9
    195e:	90 64       	ori	r25, 0x40	; 64
    1960:	90 93 a9 00 	sts	0x00A9, r25

	Pipe_Unfreeze();
	PacketWaiting = Pipe_IsINReceived();
	Pipe_Freeze();

	return PacketWaiting;
    1964:	08 95       	ret
bool RNDIS_Host_IsPacketReceived(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo)
{
	bool PacketWaiting;

	if ((USB_HostState != HOST_STATE_Configured) || !(RNDISInterfaceInfo->State.IsActive))
	  return false;
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	08 95       	ret
    196a:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_Unfreeze();
	PacketWaiting = Pipe_IsINReceived();
	Pipe_Freeze();

	return PacketWaiting;
}
    196c:	08 95       	ret

0000196e <RNDIS_Host_ReadPacket>:

uint8_t RNDIS_Host_ReadPacket(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                              void* Buffer,
                              uint16_t* const PacketLength)
{
    196e:	cf 92       	push	r12
    1970:	df 92       	push	r13
    1972:	ef 92       	push	r14
    1974:	ff 92       	push	r15
    1976:	1f 93       	push	r17
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	ac 97       	sbiw	r28, 0x2c	; 44
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	fc 01       	movw	r30, r24
    198e:	6b 01       	movw	r12, r22
    1990:	7a 01       	movw	r14, r20
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(RNDISInterfaceInfo->State.IsActive))
    1992:	80 91 5f 05 	lds	r24, 0x055F
    1996:	8b 30       	cpi	r24, 0x0B	; 11
    1998:	09 f0       	breq	.+2      	; 0x199c <RNDIS_Host_ReadPacket+0x2e>
    199a:	51 c0       	rjmp	.+162    	; 0x1a3e <RNDIS_Host_ReadPacket+0xd0>
    199c:	86 89       	ldd	r24, Z+22	; 0x16
    199e:	88 23       	and	r24, r24
    19a0:	09 f4       	brne	.+2      	; 0x19a4 <RNDIS_Host_ReadPacket+0x36>
    19a2:	4d c0       	rjmp	.+154    	; 0x1a3e <RNDIS_Host_ReadPacket+0xd0>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    19a4:	80 81       	ld	r24, Z
    19a6:	8f 70       	andi	r24, 0x0F	; 15
    19a8:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    19ac:	80 91 a9 00 	lds	r24, 0x00A9
    19b0:	8f 7b       	andi	r24, 0xBF	; 191
    19b2:	80 93 a9 00 	sts	0x00A9, r24
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    19b6:	80 91 a6 00 	lds	r24, 0x00A6
	  return PIPE_READYWAIT_DeviceDisconnected;

	Pipe_SelectPipe(RNDISInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if (!(Pipe_IsReadWriteAllowed()))
    19ba:	85 fd       	sbrc	r24, 5
    19bc:	13 c0       	rjmp	.+38     	; 0x19e4 <RNDIS_Host_ReadPacket+0x76>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    19be:	80 91 a6 00 	lds	r24, 0x00A6
	{
		if (Pipe_IsINReceived())
    19c2:	80 ff       	sbrs	r24, 0
    19c4:	05 c0       	rjmp	.+10     	; 0x19d0 <RNDIS_Host_ReadPacket+0x62>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    19c6:	80 91 a6 00 	lds	r24, 0x00A6
    19ca:	8e 77       	andi	r24, 0x7E	; 126
    19cc:	80 93 a6 00 	sts	0x00A6, r24
		  Pipe_ClearIN();

		*PacketLength = 0;
    19d0:	f7 01       	movw	r30, r14
    19d2:	11 82       	std	Z+1, r1	; 0x01
    19d4:	10 82       	st	Z, r1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    19d6:	80 91 a9 00 	lds	r24, 0x00A9
    19da:	80 64       	ori	r24, 0x40	; 64
    19dc:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Freeze();
		return PIPE_RWSTREAM_NoError;
    19e0:	10 e0       	ldi	r17, 0x00	; 0
    19e2:	2e c0       	rjmp	.+92     	; 0x1a40 <RNDIS_Host_ReadPacket+0xd2>
	}

	RNDIS_Packet_Message_t DeviceMessage;

	if ((ErrorCode = Pipe_Read_Stream_LE(&DeviceMessage, sizeof(RNDIS_Packet_Message_t),
    19e4:	ce 01       	movw	r24, r28
    19e6:	01 96       	adiw	r24, 0x01	; 1
    19e8:	6c e2       	ldi	r22, 0x2C	; 44
    19ea:	70 e0       	ldi	r23, 0x00	; 0
    19ec:	40 e0       	ldi	r20, 0x00	; 0
    19ee:	50 e0       	ldi	r21, 0x00	; 0
    19f0:	6d d8       	rcall	.-3878   	; 0xacc <Pipe_Read_Stream_LE>
    19f2:	18 2f       	mov	r17, r24
    19f4:	88 23       	and	r24, r24
    19f6:	21 f5       	brne	.+72     	; 0x1a40 <RNDIS_Host_ReadPacket+0xd2>
    19f8:	8d 85       	ldd	r24, Y+13	; 0x0d
	                                     NULL)) != PIPE_RWSTREAM_NoError)
	{
		return ErrorCode;
	}

	*PacketLength = (uint16_t)le32_to_cpu(DeviceMessage.DataLength);
    19fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    19fc:	f7 01       	movw	r30, r14
    19fe:	91 83       	std	Z+1, r25	; 0x01
    1a00:	80 83       	st	Z, r24
    1a02:	89 85       	ldd	r24, Y+9	; 0x09

	Pipe_Discard_Stream(le32_to_cpu(DeviceMessage.DataOffset) -
    1a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a06:	84 97       	sbiw	r24, 0x24	; 36
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	70 e0       	ldi	r23, 0x00	; 0
    1a0c:	14 d8       	rcall	.-4056   	; 0xa36 <Pipe_Discard_Stream>
    1a0e:	f7 01       	movw	r30, r14
    1a10:	60 81       	ld	r22, Z
	                    (sizeof(RNDIS_Packet_Message_t) - sizeof(RNDIS_Message_Header_t)),
	                    NULL);

	Pipe_Read_Stream_LE(Buffer, *PacketLength, NULL);
    1a12:	71 81       	ldd	r23, Z+1	; 0x01
    1a14:	c6 01       	movw	r24, r12
    1a16:	40 e0       	ldi	r20, 0x00	; 0
    1a18:	50 e0       	ldi	r21, 0x00	; 0
    1a1a:	58 d8       	rcall	.-3920   	; 0xacc <Pipe_Read_Stream_LE>
    1a1c:	80 91 f6 00 	lds	r24, 0x00F6
    1a20:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	29 f4       	brne	.+10     	; 0x1a32 <RNDIS_Host_ReadPacket+0xc4>
    1a28:	80 91 a6 00 	lds	r24, 0x00A6

	if (!(Pipe_BytesInPipe()))
    1a2c:	8e 77       	andi	r24, 0x7E	; 126
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1a2e:	80 93 a6 00 	sts	0x00A6, r24
    1a32:	80 91 a9 00 	lds	r24, 0x00A9
    1a36:	80 64       	ori	r24, 0x40	; 64

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1a38:	80 93 a9 00 	sts	0x00A9, r24
    1a3c:	01 c0       	rjmp	.+2      	; 0x1a40 <RNDIS_Host_ReadPacket+0xd2>
    1a3e:	12 e0       	ldi	r17, 0x02	; 2
    1a40:	81 2f       	mov	r24, r17
	  Pipe_ClearIN();

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    1a42:	ac 96       	adiw	r28, 0x2c	; 44
                              uint16_t* const PacketLength)
{
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(RNDISInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    1a44:	0f b6       	in	r0, 0x3f	; 63
	  Pipe_ClearIN();

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	1f 91       	pop	r17
    1a54:	ff 90       	pop	r15
    1a56:	ef 90       	pop	r14
    1a58:	df 90       	pop	r13
    1a5a:	cf 90       	pop	r12
    1a5c:	08 95       	ret

00001a5e <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1a5e:	90 91 c8 00 	lds	r25, 0x00C8
    1a62:	95 ff       	sbrs	r25, 5
    1a64:	fc cf       	rjmp	.-8      	; 0x1a5e <Serial_putchar>
				UDR1 = DataByte;
    1a66:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	08 95       	ret

00001a70 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1a70:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1a74:	87 ff       	sbrs	r24, 7
    1a76:	08 c0       	rjmp	.+16     	; 0x1a88 <Serial_getchar+0x18>
    1a78:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1a7c:	87 ff       	sbrs	r24, 7
    1a7e:	07 c0       	rjmp	.+14     	; 0x1a8e <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1a80:	80 91 ce 00 	lds	r24, 0x00CE
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	08 95       	ret
	  return _FDEV_EOF;
    1a88:	8e ef       	ldi	r24, 0xFE	; 254
    1a8a:	9f ef       	ldi	r25, 0xFF	; 255
    1a8c:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1a8e:	8f ef       	ldi	r24, 0xFF	; 255
    1a90:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1a92:	08 95       	ret

00001a94 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1a94:	fc 01       	movw	r30, r24
	if (!(Stream))
    1a96:	00 97       	sbiw	r24, 0x00	; 0
    1a98:	51 f4       	brne	.+20     	; 0x1aae <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1a9a:	e0 e6       	ldi	r30, 0x60	; 96
    1a9c:	f5 e0       	ldi	r31, 0x05	; 5
    1a9e:	f0 93 6f 05 	sts	0x056F, r31
    1aa2:	e0 93 6e 05 	sts	0x056E, r30
		stdout = Stream;
    1aa6:	f0 93 71 05 	sts	0x0571, r31
    1aaa:	e0 93 70 05 	sts	0x0570, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1aae:	8e e0       	ldi	r24, 0x0E	; 14
    1ab0:	df 01       	movw	r26, r30
    1ab2:	1d 92       	st	X+, r1
    1ab4:	8a 95       	dec	r24
    1ab6:	e9 f7       	brne	.-6      	; 0x1ab2 <Serial_CreateStream+0x1e>
    1ab8:	83 e0       	ldi	r24, 0x03	; 3
    1aba:	83 83       	std	Z+3, r24	; 0x03
    1abc:	8f e2       	ldi	r24, 0x2F	; 47
    1abe:	9d e0       	ldi	r25, 0x0D	; 13
    1ac0:	91 87       	std	Z+9, r25	; 0x09
    1ac2:	80 87       	std	Z+8, r24	; 0x08
    1ac4:	88 e3       	ldi	r24, 0x38	; 56
    1ac6:	9d e0       	ldi	r25, 0x0D	; 13
    1ac8:	93 87       	std	Z+11, r25	; 0x0b
    1aca:	82 87       	std	Z+10, r24	; 0x0a
}
    1acc:	08 95       	ret

00001ace <memcpy>:
    1ace:	fb 01       	movw	r30, r22
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <memcpy+0xa>
    1ad4:	01 90       	ld	r0, Z+
    1ad6:	0d 92       	st	X+, r0
    1ad8:	41 50       	subi	r20, 0x01	; 1
    1ada:	50 40       	sbci	r21, 0x00	; 0
    1adc:	d8 f7       	brcc	.-10     	; 0x1ad4 <memcpy+0x6>
    1ade:	08 95       	ret

00001ae0 <printf>:
    1ae0:	cf 93       	push	r28
    1ae2:	df 93       	push	r29
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	fe 01       	movw	r30, r28
    1aea:	35 96       	adiw	r30, 0x05	; 5
    1aec:	61 91       	ld	r22, Z+
    1aee:	71 91       	ld	r23, Z+
    1af0:	80 91 70 05 	lds	r24, 0x0570
    1af4:	90 91 71 05 	lds	r25, 0x0571
    1af8:	af 01       	movw	r20, r30
    1afa:	51 d0       	rcall	.+162    	; 0x1b9e <vfprintf>
    1afc:	df 91       	pop	r29
    1afe:	cf 91       	pop	r28
    1b00:	08 95       	ret

00001b02 <printf_P>:
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	35 96       	adiw	r30, 0x05	; 5
    1b0e:	61 91       	ld	r22, Z+
    1b10:	71 91       	ld	r23, Z+
    1b12:	80 91 70 05 	lds	r24, 0x0570
    1b16:	90 91 71 05 	lds	r25, 0x0571
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	13 96       	adiw	r26, 0x03	; 3
    1b1e:	2c 91       	ld	r18, X
    1b20:	13 97       	sbiw	r26, 0x03	; 3
    1b22:	28 60       	ori	r18, 0x08	; 8
    1b24:	13 96       	adiw	r26, 0x03	; 3
    1b26:	2c 93       	st	X, r18
    1b28:	af 01       	movw	r20, r30
    1b2a:	39 d0       	rcall	.+114    	; 0x1b9e <vfprintf>
    1b2c:	e0 91 70 05 	lds	r30, 0x0570
    1b30:	f0 91 71 05 	lds	r31, 0x0571
    1b34:	23 81       	ldd	r18, Z+3	; 0x03
    1b36:	27 7f       	andi	r18, 0xF7	; 247
    1b38:	23 83       	std	Z+3, r18	; 0x03
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	08 95       	ret

00001b40 <puts_P>:
    1b40:	0f 93       	push	r16
    1b42:	1f 93       	push	r17
    1b44:	cf 93       	push	r28
    1b46:	df 93       	push	r29
    1b48:	8c 01       	movw	r16, r24
    1b4a:	e0 91 70 05 	lds	r30, 0x0570
    1b4e:	f0 91 71 05 	lds	r31, 0x0571
    1b52:	83 81       	ldd	r24, Z+3	; 0x03
    1b54:	81 ff       	sbrs	r24, 1
    1b56:	1b c0       	rjmp	.+54     	; 0x1b8e <puts_P+0x4e>
    1b58:	c0 e0       	ldi	r28, 0x00	; 0
    1b5a:	d0 e0       	ldi	r29, 0x00	; 0
    1b5c:	07 c0       	rjmp	.+14     	; 0x1b6c <puts_P+0x2c>
    1b5e:	09 95       	icall
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	11 f0       	breq	.+4      	; 0x1b68 <puts_P+0x28>
    1b64:	cf ef       	ldi	r28, 0xFF	; 255
    1b66:	df ef       	ldi	r29, 0xFF	; 255
    1b68:	0f 5f       	subi	r16, 0xFF	; 255
    1b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6c:	f8 01       	movw	r30, r16
    1b6e:	84 91       	lpm	r24, Z
    1b70:	60 91 70 05 	lds	r22, 0x0570
    1b74:	70 91 71 05 	lds	r23, 0x0571
    1b78:	db 01       	movw	r26, r22
    1b7a:	18 96       	adiw	r26, 0x08	; 8
    1b7c:	ed 91       	ld	r30, X+
    1b7e:	fc 91       	ld	r31, X
    1b80:	19 97       	sbiw	r26, 0x09	; 9
    1b82:	88 23       	and	r24, r24
    1b84:	61 f7       	brne	.-40     	; 0x1b5e <puts_P+0x1e>
    1b86:	8a e0       	ldi	r24, 0x0A	; 10
    1b88:	09 95       	icall
    1b8a:	00 97       	sbiw	r24, 0x00	; 0
    1b8c:	11 f0       	breq	.+4      	; 0x1b92 <puts_P+0x52>
    1b8e:	cf ef       	ldi	r28, 0xFF	; 255
    1b90:	df ef       	ldi	r29, 0xFF	; 255
    1b92:	ce 01       	movw	r24, r28
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	1f 91       	pop	r17
    1b9a:	0f 91       	pop	r16
    1b9c:	08 95       	ret

00001b9e <vfprintf>:
    1b9e:	2f 92       	push	r2
    1ba0:	3f 92       	push	r3
    1ba2:	4f 92       	push	r4
    1ba4:	5f 92       	push	r5
    1ba6:	6f 92       	push	r6
    1ba8:	7f 92       	push	r7
    1baa:	8f 92       	push	r8
    1bac:	9f 92       	push	r9
    1bae:	af 92       	push	r10
    1bb0:	bf 92       	push	r11
    1bb2:	cf 92       	push	r12
    1bb4:	df 92       	push	r13
    1bb6:	ef 92       	push	r14
    1bb8:	ff 92       	push	r15
    1bba:	0f 93       	push	r16
    1bbc:	1f 93       	push	r17
    1bbe:	cf 93       	push	r28
    1bc0:	df 93       	push	r29
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	2d 97       	sbiw	r28, 0x0d	; 13
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	3c 01       	movw	r6, r24
    1bd4:	7d 87       	std	Y+13, r23	; 0x0d
    1bd6:	6c 87       	std	Y+12, r22	; 0x0c
    1bd8:	5a 01       	movw	r10, r20
    1bda:	fc 01       	movw	r30, r24
    1bdc:	17 82       	std	Z+7, r1	; 0x07
    1bde:	16 82       	std	Z+6, r1	; 0x06
    1be0:	83 81       	ldd	r24, Z+3	; 0x03
    1be2:	81 ff       	sbrs	r24, 1
    1be4:	bb c1       	rjmp	.+886    	; 0x1f5c <vfprintf+0x3be>
    1be6:	2e 01       	movw	r4, r28
    1be8:	08 94       	sec
    1bea:	41 1c       	adc	r4, r1
    1bec:	51 1c       	adc	r5, r1
    1bee:	f3 01       	movw	r30, r6
    1bf0:	93 81       	ldd	r25, Z+3	; 0x03
    1bf2:	ec 85       	ldd	r30, Y+12	; 0x0c
    1bf4:	fd 85       	ldd	r31, Y+13	; 0x0d
    1bf6:	93 fd       	sbrc	r25, 3
    1bf8:	85 91       	lpm	r24, Z+
    1bfa:	93 ff       	sbrs	r25, 3
    1bfc:	81 91       	ld	r24, Z+
    1bfe:	fd 87       	std	Y+13, r31	; 0x0d
    1c00:	ec 87       	std	Y+12, r30	; 0x0c
    1c02:	88 23       	and	r24, r24
    1c04:	09 f4       	brne	.+2      	; 0x1c08 <vfprintf+0x6a>
    1c06:	a6 c1       	rjmp	.+844    	; 0x1f54 <vfprintf+0x3b6>
    1c08:	85 32       	cpi	r24, 0x25	; 37
    1c0a:	41 f4       	brne	.+16     	; 0x1c1c <vfprintf+0x7e>
    1c0c:	93 fd       	sbrc	r25, 3
    1c0e:	85 91       	lpm	r24, Z+
    1c10:	93 ff       	sbrs	r25, 3
    1c12:	81 91       	ld	r24, Z+
    1c14:	fd 87       	std	Y+13, r31	; 0x0d
    1c16:	ec 87       	std	Y+12, r30	; 0x0c
    1c18:	85 32       	cpi	r24, 0x25	; 37
    1c1a:	21 f4       	brne	.+8      	; 0x1c24 <vfprintf+0x86>
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	b3 01       	movw	r22, r6
    1c20:	ce d1       	rcall	.+924    	; 0x1fbe <fputc>
    1c22:	e5 cf       	rjmp	.-54     	; 0x1bee <vfprintf+0x50>
    1c24:	ff 24       	eor	r15, r15
    1c26:	ee 24       	eor	r14, r14
    1c28:	10 e0       	ldi	r17, 0x00	; 0
    1c2a:	10 32       	cpi	r17, 0x20	; 32
    1c2c:	b0 f4       	brcc	.+44     	; 0x1c5a <vfprintf+0xbc>
    1c2e:	8b 32       	cpi	r24, 0x2B	; 43
    1c30:	69 f0       	breq	.+26     	; 0x1c4c <vfprintf+0xae>
    1c32:	8c 32       	cpi	r24, 0x2C	; 44
    1c34:	28 f4       	brcc	.+10     	; 0x1c40 <vfprintf+0xa2>
    1c36:	80 32       	cpi	r24, 0x20	; 32
    1c38:	51 f0       	breq	.+20     	; 0x1c4e <vfprintf+0xb0>
    1c3a:	83 32       	cpi	r24, 0x23	; 35
    1c3c:	71 f4       	brne	.+28     	; 0x1c5a <vfprintf+0xbc>
    1c3e:	0b c0       	rjmp	.+22     	; 0x1c56 <vfprintf+0xb8>
    1c40:	8d 32       	cpi	r24, 0x2D	; 45
    1c42:	39 f0       	breq	.+14     	; 0x1c52 <vfprintf+0xb4>
    1c44:	80 33       	cpi	r24, 0x30	; 48
    1c46:	49 f4       	brne	.+18     	; 0x1c5a <vfprintf+0xbc>
    1c48:	11 60       	ori	r17, 0x01	; 1
    1c4a:	2c c0       	rjmp	.+88     	; 0x1ca4 <vfprintf+0x106>
    1c4c:	12 60       	ori	r17, 0x02	; 2
    1c4e:	14 60       	ori	r17, 0x04	; 4
    1c50:	29 c0       	rjmp	.+82     	; 0x1ca4 <vfprintf+0x106>
    1c52:	18 60       	ori	r17, 0x08	; 8
    1c54:	27 c0       	rjmp	.+78     	; 0x1ca4 <vfprintf+0x106>
    1c56:	10 61       	ori	r17, 0x10	; 16
    1c58:	25 c0       	rjmp	.+74     	; 0x1ca4 <vfprintf+0x106>
    1c5a:	17 fd       	sbrc	r17, 7
    1c5c:	2e c0       	rjmp	.+92     	; 0x1cba <vfprintf+0x11c>
    1c5e:	28 2f       	mov	r18, r24
    1c60:	20 53       	subi	r18, 0x30	; 48
    1c62:	2a 30       	cpi	r18, 0x0A	; 10
    1c64:	98 f4       	brcc	.+38     	; 0x1c8c <vfprintf+0xee>
    1c66:	16 ff       	sbrs	r17, 6
    1c68:	08 c0       	rjmp	.+16     	; 0x1c7a <vfprintf+0xdc>
    1c6a:	8f 2d       	mov	r24, r15
    1c6c:	88 0f       	add	r24, r24
    1c6e:	f8 2e       	mov	r15, r24
    1c70:	ff 0c       	add	r15, r15
    1c72:	ff 0c       	add	r15, r15
    1c74:	f8 0e       	add	r15, r24
    1c76:	f2 0e       	add	r15, r18
    1c78:	15 c0       	rjmp	.+42     	; 0x1ca4 <vfprintf+0x106>
    1c7a:	8e 2d       	mov	r24, r14
    1c7c:	88 0f       	add	r24, r24
    1c7e:	e8 2e       	mov	r14, r24
    1c80:	ee 0c       	add	r14, r14
    1c82:	ee 0c       	add	r14, r14
    1c84:	e8 0e       	add	r14, r24
    1c86:	e2 0e       	add	r14, r18
    1c88:	10 62       	ori	r17, 0x20	; 32
    1c8a:	0c c0       	rjmp	.+24     	; 0x1ca4 <vfprintf+0x106>
    1c8c:	8e 32       	cpi	r24, 0x2E	; 46
    1c8e:	21 f4       	brne	.+8      	; 0x1c98 <vfprintf+0xfa>
    1c90:	16 fd       	sbrc	r17, 6
    1c92:	60 c1       	rjmp	.+704    	; 0x1f54 <vfprintf+0x3b6>
    1c94:	10 64       	ori	r17, 0x40	; 64
    1c96:	06 c0       	rjmp	.+12     	; 0x1ca4 <vfprintf+0x106>
    1c98:	8c 36       	cpi	r24, 0x6C	; 108
    1c9a:	11 f4       	brne	.+4      	; 0x1ca0 <vfprintf+0x102>
    1c9c:	10 68       	ori	r17, 0x80	; 128
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <vfprintf+0x106>
    1ca0:	88 36       	cpi	r24, 0x68	; 104
    1ca2:	59 f4       	brne	.+22     	; 0x1cba <vfprintf+0x11c>
    1ca4:	ec 85       	ldd	r30, Y+12	; 0x0c
    1ca6:	fd 85       	ldd	r31, Y+13	; 0x0d
    1ca8:	93 fd       	sbrc	r25, 3
    1caa:	85 91       	lpm	r24, Z+
    1cac:	93 ff       	sbrs	r25, 3
    1cae:	81 91       	ld	r24, Z+
    1cb0:	fd 87       	std	Y+13, r31	; 0x0d
    1cb2:	ec 87       	std	Y+12, r30	; 0x0c
    1cb4:	88 23       	and	r24, r24
    1cb6:	09 f0       	breq	.+2      	; 0x1cba <vfprintf+0x11c>
    1cb8:	b8 cf       	rjmp	.-144    	; 0x1c2a <vfprintf+0x8c>
    1cba:	98 2f       	mov	r25, r24
    1cbc:	95 54       	subi	r25, 0x45	; 69
    1cbe:	93 30       	cpi	r25, 0x03	; 3
    1cc0:	18 f0       	brcs	.+6      	; 0x1cc8 <vfprintf+0x12a>
    1cc2:	90 52       	subi	r25, 0x20	; 32
    1cc4:	93 30       	cpi	r25, 0x03	; 3
    1cc6:	38 f4       	brcc	.+14     	; 0x1cd6 <vfprintf+0x138>
    1cc8:	24 e0       	ldi	r18, 0x04	; 4
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	a2 0e       	add	r10, r18
    1cce:	b3 1e       	adc	r11, r19
    1cd0:	3f e3       	ldi	r19, 0x3F	; 63
    1cd2:	39 83       	std	Y+1, r19	; 0x01
    1cd4:	0f c0       	rjmp	.+30     	; 0x1cf4 <vfprintf+0x156>
    1cd6:	83 36       	cpi	r24, 0x63	; 99
    1cd8:	31 f0       	breq	.+12     	; 0x1ce6 <vfprintf+0x148>
    1cda:	83 37       	cpi	r24, 0x73	; 115
    1cdc:	81 f0       	breq	.+32     	; 0x1cfe <vfprintf+0x160>
    1cde:	83 35       	cpi	r24, 0x53	; 83
    1ce0:	09 f0       	breq	.+2      	; 0x1ce4 <vfprintf+0x146>
    1ce2:	56 c0       	rjmp	.+172    	; 0x1d90 <vfprintf+0x1f2>
    1ce4:	21 c0       	rjmp	.+66     	; 0x1d28 <vfprintf+0x18a>
    1ce6:	f5 01       	movw	r30, r10
    1ce8:	80 81       	ld	r24, Z
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	22 e0       	ldi	r18, 0x02	; 2
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	a2 0e       	add	r10, r18
    1cf2:	b3 1e       	adc	r11, r19
    1cf4:	21 e0       	ldi	r18, 0x01	; 1
    1cf6:	c2 2e       	mov	r12, r18
    1cf8:	d1 2c       	mov	r13, r1
    1cfa:	42 01       	movw	r8, r4
    1cfc:	13 c0       	rjmp	.+38     	; 0x1d24 <vfprintf+0x186>
    1cfe:	92 e0       	ldi	r25, 0x02	; 2
    1d00:	29 2e       	mov	r2, r25
    1d02:	31 2c       	mov	r3, r1
    1d04:	2a 0c       	add	r2, r10
    1d06:	3b 1c       	adc	r3, r11
    1d08:	f5 01       	movw	r30, r10
    1d0a:	80 80       	ld	r8, Z
    1d0c:	91 80       	ldd	r9, Z+1	; 0x01
    1d0e:	16 ff       	sbrs	r17, 6
    1d10:	03 c0       	rjmp	.+6      	; 0x1d18 <vfprintf+0x17a>
    1d12:	6f 2d       	mov	r22, r15
    1d14:	70 e0       	ldi	r23, 0x00	; 0
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <vfprintf+0x17e>
    1d18:	6f ef       	ldi	r22, 0xFF	; 255
    1d1a:	7f ef       	ldi	r23, 0xFF	; 255
    1d1c:	c4 01       	movw	r24, r8
    1d1e:	44 d1       	rcall	.+648    	; 0x1fa8 <strnlen>
    1d20:	6c 01       	movw	r12, r24
    1d22:	51 01       	movw	r10, r2
    1d24:	1f 77       	andi	r17, 0x7F	; 127
    1d26:	14 c0       	rjmp	.+40     	; 0x1d50 <vfprintf+0x1b2>
    1d28:	82 e0       	ldi	r24, 0x02	; 2
    1d2a:	28 2e       	mov	r2, r24
    1d2c:	31 2c       	mov	r3, r1
    1d2e:	2a 0c       	add	r2, r10
    1d30:	3b 1c       	adc	r3, r11
    1d32:	f5 01       	movw	r30, r10
    1d34:	80 80       	ld	r8, Z
    1d36:	91 80       	ldd	r9, Z+1	; 0x01
    1d38:	16 ff       	sbrs	r17, 6
    1d3a:	03 c0       	rjmp	.+6      	; 0x1d42 <vfprintf+0x1a4>
    1d3c:	6f 2d       	mov	r22, r15
    1d3e:	70 e0       	ldi	r23, 0x00	; 0
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <vfprintf+0x1a8>
    1d42:	6f ef       	ldi	r22, 0xFF	; 255
    1d44:	7f ef       	ldi	r23, 0xFF	; 255
    1d46:	c4 01       	movw	r24, r8
    1d48:	24 d1       	rcall	.+584    	; 0x1f92 <strnlen_P>
    1d4a:	6c 01       	movw	r12, r24
    1d4c:	10 68       	ori	r17, 0x80	; 128
    1d4e:	51 01       	movw	r10, r2
    1d50:	13 fd       	sbrc	r17, 3
    1d52:	1a c0       	rjmp	.+52     	; 0x1d88 <vfprintf+0x1ea>
    1d54:	05 c0       	rjmp	.+10     	; 0x1d60 <vfprintf+0x1c2>
    1d56:	80 e2       	ldi	r24, 0x20	; 32
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	b3 01       	movw	r22, r6
    1d5c:	30 d1       	rcall	.+608    	; 0x1fbe <fputc>
    1d5e:	ea 94       	dec	r14
    1d60:	8e 2d       	mov	r24, r14
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	c8 16       	cp	r12, r24
    1d66:	d9 06       	cpc	r13, r25
    1d68:	b0 f3       	brcs	.-20     	; 0x1d56 <vfprintf+0x1b8>
    1d6a:	0e c0       	rjmp	.+28     	; 0x1d88 <vfprintf+0x1ea>
    1d6c:	f4 01       	movw	r30, r8
    1d6e:	17 fd       	sbrc	r17, 7
    1d70:	85 91       	lpm	r24, Z+
    1d72:	17 ff       	sbrs	r17, 7
    1d74:	81 91       	ld	r24, Z+
    1d76:	4f 01       	movw	r8, r30
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	b3 01       	movw	r22, r6
    1d7c:	20 d1       	rcall	.+576    	; 0x1fbe <fputc>
    1d7e:	e1 10       	cpse	r14, r1
    1d80:	ea 94       	dec	r14
    1d82:	08 94       	sec
    1d84:	c1 08       	sbc	r12, r1
    1d86:	d1 08       	sbc	r13, r1
    1d88:	c1 14       	cp	r12, r1
    1d8a:	d1 04       	cpc	r13, r1
    1d8c:	79 f7       	brne	.-34     	; 0x1d6c <vfprintf+0x1ce>
    1d8e:	df c0       	rjmp	.+446    	; 0x1f4e <vfprintf+0x3b0>
    1d90:	84 36       	cpi	r24, 0x64	; 100
    1d92:	11 f0       	breq	.+4      	; 0x1d98 <vfprintf+0x1fa>
    1d94:	89 36       	cpi	r24, 0x69	; 105
    1d96:	49 f5       	brne	.+82     	; 0x1dea <vfprintf+0x24c>
    1d98:	f5 01       	movw	r30, r10
    1d9a:	17 ff       	sbrs	r17, 7
    1d9c:	07 c0       	rjmp	.+14     	; 0x1dac <vfprintf+0x20e>
    1d9e:	80 81       	ld	r24, Z
    1da0:	91 81       	ldd	r25, Z+1	; 0x01
    1da2:	a2 81       	ldd	r26, Z+2	; 0x02
    1da4:	b3 81       	ldd	r27, Z+3	; 0x03
    1da6:	24 e0       	ldi	r18, 0x04	; 4
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	08 c0       	rjmp	.+16     	; 0x1dbc <vfprintf+0x21e>
    1dac:	80 81       	ld	r24, Z
    1dae:	91 81       	ldd	r25, Z+1	; 0x01
    1db0:	aa 27       	eor	r26, r26
    1db2:	97 fd       	sbrc	r25, 7
    1db4:	a0 95       	com	r26
    1db6:	ba 2f       	mov	r27, r26
    1db8:	22 e0       	ldi	r18, 0x02	; 2
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	a2 0e       	add	r10, r18
    1dbe:	b3 1e       	adc	r11, r19
    1dc0:	01 2f       	mov	r16, r17
    1dc2:	0f 76       	andi	r16, 0x6F	; 111
    1dc4:	b7 ff       	sbrs	r27, 7
    1dc6:	08 c0       	rjmp	.+16     	; 0x1dd8 <vfprintf+0x23a>
    1dc8:	b0 95       	com	r27
    1dca:	a0 95       	com	r26
    1dcc:	90 95       	com	r25
    1dce:	81 95       	neg	r24
    1dd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd2:	af 4f       	sbci	r26, 0xFF	; 255
    1dd4:	bf 4f       	sbci	r27, 0xFF	; 255
    1dd6:	00 68       	ori	r16, 0x80	; 128
    1dd8:	bc 01       	movw	r22, r24
    1dda:	cd 01       	movw	r24, r26
    1ddc:	a2 01       	movw	r20, r4
    1dde:	2a e0       	ldi	r18, 0x0A	; 10
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	19 d1       	rcall	.+562    	; 0x2016 <__ultoa_invert>
    1de4:	d8 2e       	mov	r13, r24
    1de6:	d4 18       	sub	r13, r4
    1de8:	3e c0       	rjmp	.+124    	; 0x1e66 <vfprintf+0x2c8>
    1dea:	85 37       	cpi	r24, 0x75	; 117
    1dec:	21 f4       	brne	.+8      	; 0x1df6 <vfprintf+0x258>
    1dee:	1f 7e       	andi	r17, 0xEF	; 239
    1df0:	2a e0       	ldi	r18, 0x0A	; 10
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	20 c0       	rjmp	.+64     	; 0x1e36 <vfprintf+0x298>
    1df6:	19 7f       	andi	r17, 0xF9	; 249
    1df8:	8f 36       	cpi	r24, 0x6F	; 111
    1dfa:	a9 f0       	breq	.+42     	; 0x1e26 <vfprintf+0x288>
    1dfc:	80 37       	cpi	r24, 0x70	; 112
    1dfe:	20 f4       	brcc	.+8      	; 0x1e08 <vfprintf+0x26a>
    1e00:	88 35       	cpi	r24, 0x58	; 88
    1e02:	09 f0       	breq	.+2      	; 0x1e06 <vfprintf+0x268>
    1e04:	a7 c0       	rjmp	.+334    	; 0x1f54 <vfprintf+0x3b6>
    1e06:	0b c0       	rjmp	.+22     	; 0x1e1e <vfprintf+0x280>
    1e08:	80 37       	cpi	r24, 0x70	; 112
    1e0a:	21 f0       	breq	.+8      	; 0x1e14 <vfprintf+0x276>
    1e0c:	88 37       	cpi	r24, 0x78	; 120
    1e0e:	09 f0       	breq	.+2      	; 0x1e12 <vfprintf+0x274>
    1e10:	a1 c0       	rjmp	.+322    	; 0x1f54 <vfprintf+0x3b6>
    1e12:	01 c0       	rjmp	.+2      	; 0x1e16 <vfprintf+0x278>
    1e14:	10 61       	ori	r17, 0x10	; 16
    1e16:	14 ff       	sbrs	r17, 4
    1e18:	09 c0       	rjmp	.+18     	; 0x1e2c <vfprintf+0x28e>
    1e1a:	14 60       	ori	r17, 0x04	; 4
    1e1c:	07 c0       	rjmp	.+14     	; 0x1e2c <vfprintf+0x28e>
    1e1e:	14 ff       	sbrs	r17, 4
    1e20:	08 c0       	rjmp	.+16     	; 0x1e32 <vfprintf+0x294>
    1e22:	16 60       	ori	r17, 0x06	; 6
    1e24:	06 c0       	rjmp	.+12     	; 0x1e32 <vfprintf+0x294>
    1e26:	28 e0       	ldi	r18, 0x08	; 8
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	05 c0       	rjmp	.+10     	; 0x1e36 <vfprintf+0x298>
    1e2c:	20 e1       	ldi	r18, 0x10	; 16
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <vfprintf+0x298>
    1e32:	20 e1       	ldi	r18, 0x10	; 16
    1e34:	32 e0       	ldi	r19, 0x02	; 2
    1e36:	f5 01       	movw	r30, r10
    1e38:	17 ff       	sbrs	r17, 7
    1e3a:	07 c0       	rjmp	.+14     	; 0x1e4a <vfprintf+0x2ac>
    1e3c:	60 81       	ld	r22, Z
    1e3e:	71 81       	ldd	r23, Z+1	; 0x01
    1e40:	82 81       	ldd	r24, Z+2	; 0x02
    1e42:	93 81       	ldd	r25, Z+3	; 0x03
    1e44:	44 e0       	ldi	r20, 0x04	; 4
    1e46:	50 e0       	ldi	r21, 0x00	; 0
    1e48:	06 c0       	rjmp	.+12     	; 0x1e56 <vfprintf+0x2b8>
    1e4a:	60 81       	ld	r22, Z
    1e4c:	71 81       	ldd	r23, Z+1	; 0x01
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	42 e0       	ldi	r20, 0x02	; 2
    1e54:	50 e0       	ldi	r21, 0x00	; 0
    1e56:	a4 0e       	add	r10, r20
    1e58:	b5 1e       	adc	r11, r21
    1e5a:	a2 01       	movw	r20, r4
    1e5c:	dc d0       	rcall	.+440    	; 0x2016 <__ultoa_invert>
    1e5e:	d8 2e       	mov	r13, r24
    1e60:	d4 18       	sub	r13, r4
    1e62:	01 2f       	mov	r16, r17
    1e64:	0f 77       	andi	r16, 0x7F	; 127
    1e66:	06 ff       	sbrs	r16, 6
    1e68:	09 c0       	rjmp	.+18     	; 0x1e7c <vfprintf+0x2de>
    1e6a:	0e 7f       	andi	r16, 0xFE	; 254
    1e6c:	df 14       	cp	r13, r15
    1e6e:	30 f4       	brcc	.+12     	; 0x1e7c <vfprintf+0x2de>
    1e70:	04 ff       	sbrs	r16, 4
    1e72:	06 c0       	rjmp	.+12     	; 0x1e80 <vfprintf+0x2e2>
    1e74:	02 fd       	sbrc	r16, 2
    1e76:	04 c0       	rjmp	.+8      	; 0x1e80 <vfprintf+0x2e2>
    1e78:	0f 7e       	andi	r16, 0xEF	; 239
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <vfprintf+0x2e2>
    1e7c:	1d 2d       	mov	r17, r13
    1e7e:	01 c0       	rjmp	.+2      	; 0x1e82 <vfprintf+0x2e4>
    1e80:	1f 2d       	mov	r17, r15
    1e82:	80 2f       	mov	r24, r16
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	04 ff       	sbrs	r16, 4
    1e88:	0c c0       	rjmp	.+24     	; 0x1ea2 <vfprintf+0x304>
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	ed 0d       	add	r30, r13
    1e8e:	f1 1d       	adc	r31, r1
    1e90:	20 81       	ld	r18, Z
    1e92:	20 33       	cpi	r18, 0x30	; 48
    1e94:	11 f4       	brne	.+4      	; 0x1e9a <vfprintf+0x2fc>
    1e96:	09 7e       	andi	r16, 0xE9	; 233
    1e98:	09 c0       	rjmp	.+18     	; 0x1eac <vfprintf+0x30e>
    1e9a:	02 ff       	sbrs	r16, 2
    1e9c:	06 c0       	rjmp	.+12     	; 0x1eaa <vfprintf+0x30c>
    1e9e:	1e 5f       	subi	r17, 0xFE	; 254
    1ea0:	05 c0       	rjmp	.+10     	; 0x1eac <vfprintf+0x30e>
    1ea2:	86 78       	andi	r24, 0x86	; 134
    1ea4:	90 70       	andi	r25, 0x00	; 0
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <vfprintf+0x30e>
    1eaa:	1f 5f       	subi	r17, 0xFF	; 255
    1eac:	80 2e       	mov	r8, r16
    1eae:	99 24       	eor	r9, r9
    1eb0:	03 fd       	sbrc	r16, 3
    1eb2:	11 c0       	rjmp	.+34     	; 0x1ed6 <vfprintf+0x338>
    1eb4:	00 ff       	sbrs	r16, 0
    1eb6:	0c c0       	rjmp	.+24     	; 0x1ed0 <vfprintf+0x332>
    1eb8:	fd 2c       	mov	r15, r13
    1eba:	1e 15       	cp	r17, r14
    1ebc:	48 f4       	brcc	.+18     	; 0x1ed0 <vfprintf+0x332>
    1ebe:	fe 0c       	add	r15, r14
    1ec0:	f1 1a       	sub	r15, r17
    1ec2:	1e 2d       	mov	r17, r14
    1ec4:	05 c0       	rjmp	.+10     	; 0x1ed0 <vfprintf+0x332>
    1ec6:	80 e2       	ldi	r24, 0x20	; 32
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	b3 01       	movw	r22, r6
    1ecc:	78 d0       	rcall	.+240    	; 0x1fbe <fputc>
    1ece:	1f 5f       	subi	r17, 0xFF	; 255
    1ed0:	1e 15       	cp	r17, r14
    1ed2:	c8 f3       	brcs	.-14     	; 0x1ec6 <vfprintf+0x328>
    1ed4:	04 c0       	rjmp	.+8      	; 0x1ede <vfprintf+0x340>
    1ed6:	1e 15       	cp	r17, r14
    1ed8:	10 f4       	brcc	.+4      	; 0x1ede <vfprintf+0x340>
    1eda:	e1 1a       	sub	r14, r17
    1edc:	01 c0       	rjmp	.+2      	; 0x1ee0 <vfprintf+0x342>
    1ede:	ee 24       	eor	r14, r14
    1ee0:	84 fe       	sbrs	r8, 4
    1ee2:	0e c0       	rjmp	.+28     	; 0x1f00 <vfprintf+0x362>
    1ee4:	80 e3       	ldi	r24, 0x30	; 48
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	b3 01       	movw	r22, r6
    1eea:	69 d0       	rcall	.+210    	; 0x1fbe <fputc>
    1eec:	82 fe       	sbrs	r8, 2
    1eee:	1d c0       	rjmp	.+58     	; 0x1f2a <vfprintf+0x38c>
    1ef0:	81 fe       	sbrs	r8, 1
    1ef2:	03 c0       	rjmp	.+6      	; 0x1efa <vfprintf+0x35c>
    1ef4:	88 e5       	ldi	r24, 0x58	; 88
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	10 c0       	rjmp	.+32     	; 0x1f1a <vfprintf+0x37c>
    1efa:	88 e7       	ldi	r24, 0x78	; 120
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	0d c0       	rjmp	.+26     	; 0x1f1a <vfprintf+0x37c>
    1f00:	c4 01       	movw	r24, r8
    1f02:	86 78       	andi	r24, 0x86	; 134
    1f04:	90 70       	andi	r25, 0x00	; 0
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	81 f0       	breq	.+32     	; 0x1f2a <vfprintf+0x38c>
    1f0a:	81 fc       	sbrc	r8, 1
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <vfprintf+0x374>
    1f0e:	80 e2       	ldi	r24, 0x20	; 32
    1f10:	01 c0       	rjmp	.+2      	; 0x1f14 <vfprintf+0x376>
    1f12:	8b e2       	ldi	r24, 0x2B	; 43
    1f14:	07 fd       	sbrc	r16, 7
    1f16:	8d e2       	ldi	r24, 0x2D	; 45
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	b3 01       	movw	r22, r6
    1f1c:	50 d0       	rcall	.+160    	; 0x1fbe <fputc>
    1f1e:	05 c0       	rjmp	.+10     	; 0x1f2a <vfprintf+0x38c>
    1f20:	80 e3       	ldi	r24, 0x30	; 48
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	b3 01       	movw	r22, r6
    1f26:	4b d0       	rcall	.+150    	; 0x1fbe <fputc>
    1f28:	fa 94       	dec	r15
    1f2a:	df 14       	cp	r13, r15
    1f2c:	c8 f3       	brcs	.-14     	; 0x1f20 <vfprintf+0x382>
    1f2e:	da 94       	dec	r13
    1f30:	f2 01       	movw	r30, r4
    1f32:	ed 0d       	add	r30, r13
    1f34:	f1 1d       	adc	r31, r1
    1f36:	80 81       	ld	r24, Z
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	b3 01       	movw	r22, r6
    1f3c:	40 d0       	rcall	.+128    	; 0x1fbe <fputc>
    1f3e:	dd 20       	and	r13, r13
    1f40:	b1 f7       	brne	.-20     	; 0x1f2e <vfprintf+0x390>
    1f42:	05 c0       	rjmp	.+10     	; 0x1f4e <vfprintf+0x3b0>
    1f44:	80 e2       	ldi	r24, 0x20	; 32
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	b3 01       	movw	r22, r6
    1f4a:	39 d0       	rcall	.+114    	; 0x1fbe <fputc>
    1f4c:	ea 94       	dec	r14
    1f4e:	ee 20       	and	r14, r14
    1f50:	c9 f7       	brne	.-14     	; 0x1f44 <vfprintf+0x3a6>
    1f52:	4d ce       	rjmp	.-870    	; 0x1bee <vfprintf+0x50>
    1f54:	f3 01       	movw	r30, r6
    1f56:	86 81       	ldd	r24, Z+6	; 0x06
    1f58:	97 81       	ldd	r25, Z+7	; 0x07
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <vfprintf+0x3c2>
    1f5c:	8f ef       	ldi	r24, 0xFF	; 255
    1f5e:	9f ef       	ldi	r25, 0xFF	; 255
    1f60:	2d 96       	adiw	r28, 0x0d	; 13
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	de bf       	out	0x3e, r29	; 62
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	cd bf       	out	0x3d, r28	; 61
    1f6c:	df 91       	pop	r29
    1f6e:	cf 91       	pop	r28
    1f70:	1f 91       	pop	r17
    1f72:	0f 91       	pop	r16
    1f74:	ff 90       	pop	r15
    1f76:	ef 90       	pop	r14
    1f78:	df 90       	pop	r13
    1f7a:	cf 90       	pop	r12
    1f7c:	bf 90       	pop	r11
    1f7e:	af 90       	pop	r10
    1f80:	9f 90       	pop	r9
    1f82:	8f 90       	pop	r8
    1f84:	7f 90       	pop	r7
    1f86:	6f 90       	pop	r6
    1f88:	5f 90       	pop	r5
    1f8a:	4f 90       	pop	r4
    1f8c:	3f 90       	pop	r3
    1f8e:	2f 90       	pop	r2
    1f90:	08 95       	ret

00001f92 <strnlen_P>:
    1f92:	fc 01       	movw	r30, r24
    1f94:	05 90       	lpm	r0, Z+
    1f96:	61 50       	subi	r22, 0x01	; 1
    1f98:	70 40       	sbci	r23, 0x00	; 0
    1f9a:	01 10       	cpse	r0, r1
    1f9c:	d8 f7       	brcc	.-10     	; 0x1f94 <strnlen_P+0x2>
    1f9e:	80 95       	com	r24
    1fa0:	90 95       	com	r25
    1fa2:	8e 0f       	add	r24, r30
    1fa4:	9f 1f       	adc	r25, r31
    1fa6:	08 95       	ret

00001fa8 <strnlen>:
    1fa8:	fc 01       	movw	r30, r24
    1faa:	61 50       	subi	r22, 0x01	; 1
    1fac:	70 40       	sbci	r23, 0x00	; 0
    1fae:	01 90       	ld	r0, Z+
    1fb0:	01 10       	cpse	r0, r1
    1fb2:	d8 f7       	brcc	.-10     	; 0x1faa <strnlen+0x2>
    1fb4:	80 95       	com	r24
    1fb6:	90 95       	com	r25
    1fb8:	8e 0f       	add	r24, r30
    1fba:	9f 1f       	adc	r25, r31
    1fbc:	08 95       	ret

00001fbe <fputc>:
    1fbe:	0f 93       	push	r16
    1fc0:	1f 93       	push	r17
    1fc2:	cf 93       	push	r28
    1fc4:	df 93       	push	r29
    1fc6:	8c 01       	movw	r16, r24
    1fc8:	eb 01       	movw	r28, r22
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	81 ff       	sbrs	r24, 1
    1fce:	1b c0       	rjmp	.+54     	; 0x2006 <fputc+0x48>
    1fd0:	82 ff       	sbrs	r24, 2
    1fd2:	0d c0       	rjmp	.+26     	; 0x1fee <fputc+0x30>
    1fd4:	2e 81       	ldd	r18, Y+6	; 0x06
    1fd6:	3f 81       	ldd	r19, Y+7	; 0x07
    1fd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fda:	9d 81       	ldd	r25, Y+5	; 0x05
    1fdc:	28 17       	cp	r18, r24
    1fde:	39 07       	cpc	r19, r25
    1fe0:	64 f4       	brge	.+24     	; 0x1ffa <fputc+0x3c>
    1fe2:	e8 81       	ld	r30, Y
    1fe4:	f9 81       	ldd	r31, Y+1	; 0x01
    1fe6:	01 93       	st	Z+, r16
    1fe8:	f9 83       	std	Y+1, r31	; 0x01
    1fea:	e8 83       	st	Y, r30
    1fec:	06 c0       	rjmp	.+12     	; 0x1ffa <fputc+0x3c>
    1fee:	e8 85       	ldd	r30, Y+8	; 0x08
    1ff0:	f9 85       	ldd	r31, Y+9	; 0x09
    1ff2:	80 2f       	mov	r24, r16
    1ff4:	09 95       	icall
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	31 f4       	brne	.+12     	; 0x2006 <fputc+0x48>
    1ffa:	8e 81       	ldd	r24, Y+6	; 0x06
    1ffc:	9f 81       	ldd	r25, Y+7	; 0x07
    1ffe:	01 96       	adiw	r24, 0x01	; 1
    2000:	9f 83       	std	Y+7, r25	; 0x07
    2002:	8e 83       	std	Y+6, r24	; 0x06
    2004:	02 c0       	rjmp	.+4      	; 0x200a <fputc+0x4c>
    2006:	0f ef       	ldi	r16, 0xFF	; 255
    2008:	1f ef       	ldi	r17, 0xFF	; 255
    200a:	c8 01       	movw	r24, r16
    200c:	df 91       	pop	r29
    200e:	cf 91       	pop	r28
    2010:	1f 91       	pop	r17
    2012:	0f 91       	pop	r16
    2014:	08 95       	ret

00002016 <__ultoa_invert>:
    2016:	fa 01       	movw	r30, r20
    2018:	aa 27       	eor	r26, r26
    201a:	28 30       	cpi	r18, 0x08	; 8
    201c:	51 f1       	breq	.+84     	; 0x2072 <__ultoa_invert+0x5c>
    201e:	20 31       	cpi	r18, 0x10	; 16
    2020:	81 f1       	breq	.+96     	; 0x2082 <__ultoa_invert+0x6c>
    2022:	e8 94       	clt
    2024:	6f 93       	push	r22
    2026:	6e 7f       	andi	r22, 0xFE	; 254
    2028:	6e 5f       	subi	r22, 0xFE	; 254
    202a:	7f 4f       	sbci	r23, 0xFF	; 255
    202c:	8f 4f       	sbci	r24, 0xFF	; 255
    202e:	9f 4f       	sbci	r25, 0xFF	; 255
    2030:	af 4f       	sbci	r26, 0xFF	; 255
    2032:	b1 e0       	ldi	r27, 0x01	; 1
    2034:	3e d0       	rcall	.+124    	; 0x20b2 <__ultoa_invert+0x9c>
    2036:	b4 e0       	ldi	r27, 0x04	; 4
    2038:	3c d0       	rcall	.+120    	; 0x20b2 <__ultoa_invert+0x9c>
    203a:	67 0f       	add	r22, r23
    203c:	78 1f       	adc	r23, r24
    203e:	89 1f       	adc	r24, r25
    2040:	9a 1f       	adc	r25, r26
    2042:	a1 1d       	adc	r26, r1
    2044:	68 0f       	add	r22, r24
    2046:	79 1f       	adc	r23, r25
    2048:	8a 1f       	adc	r24, r26
    204a:	91 1d       	adc	r25, r1
    204c:	a1 1d       	adc	r26, r1
    204e:	6a 0f       	add	r22, r26
    2050:	71 1d       	adc	r23, r1
    2052:	81 1d       	adc	r24, r1
    2054:	91 1d       	adc	r25, r1
    2056:	a1 1d       	adc	r26, r1
    2058:	20 d0       	rcall	.+64     	; 0x209a <__ultoa_invert+0x84>
    205a:	09 f4       	brne	.+2      	; 0x205e <__ultoa_invert+0x48>
    205c:	68 94       	set
    205e:	3f 91       	pop	r19
    2060:	2a e0       	ldi	r18, 0x0A	; 10
    2062:	26 9f       	mul	r18, r22
    2064:	11 24       	eor	r1, r1
    2066:	30 19       	sub	r19, r0
    2068:	30 5d       	subi	r19, 0xD0	; 208
    206a:	31 93       	st	Z+, r19
    206c:	de f6       	brtc	.-74     	; 0x2024 <__ultoa_invert+0xe>
    206e:	cf 01       	movw	r24, r30
    2070:	08 95       	ret
    2072:	46 2f       	mov	r20, r22
    2074:	47 70       	andi	r20, 0x07	; 7
    2076:	40 5d       	subi	r20, 0xD0	; 208
    2078:	41 93       	st	Z+, r20
    207a:	b3 e0       	ldi	r27, 0x03	; 3
    207c:	0f d0       	rcall	.+30     	; 0x209c <__ultoa_invert+0x86>
    207e:	c9 f7       	brne	.-14     	; 0x2072 <__ultoa_invert+0x5c>
    2080:	f6 cf       	rjmp	.-20     	; 0x206e <__ultoa_invert+0x58>
    2082:	46 2f       	mov	r20, r22
    2084:	4f 70       	andi	r20, 0x0F	; 15
    2086:	40 5d       	subi	r20, 0xD0	; 208
    2088:	4a 33       	cpi	r20, 0x3A	; 58
    208a:	18 f0       	brcs	.+6      	; 0x2092 <__ultoa_invert+0x7c>
    208c:	49 5d       	subi	r20, 0xD9	; 217
    208e:	31 fd       	sbrc	r19, 1
    2090:	40 52       	subi	r20, 0x20	; 32
    2092:	41 93       	st	Z+, r20
    2094:	02 d0       	rcall	.+4      	; 0x209a <__ultoa_invert+0x84>
    2096:	a9 f7       	brne	.-22     	; 0x2082 <__ultoa_invert+0x6c>
    2098:	ea cf       	rjmp	.-44     	; 0x206e <__ultoa_invert+0x58>
    209a:	b4 e0       	ldi	r27, 0x04	; 4
    209c:	a6 95       	lsr	r26
    209e:	97 95       	ror	r25
    20a0:	87 95       	ror	r24
    20a2:	77 95       	ror	r23
    20a4:	67 95       	ror	r22
    20a6:	ba 95       	dec	r27
    20a8:	c9 f7       	brne	.-14     	; 0x209c <__ultoa_invert+0x86>
    20aa:	00 97       	sbiw	r24, 0x00	; 0
    20ac:	61 05       	cpc	r22, r1
    20ae:	71 05       	cpc	r23, r1
    20b0:	08 95       	ret
    20b2:	9b 01       	movw	r18, r22
    20b4:	ac 01       	movw	r20, r24
    20b6:	0a 2e       	mov	r0, r26
    20b8:	06 94       	lsr	r0
    20ba:	57 95       	ror	r21
    20bc:	47 95       	ror	r20
    20be:	37 95       	ror	r19
    20c0:	27 95       	ror	r18
    20c2:	ba 95       	dec	r27
    20c4:	c9 f7       	brne	.-14     	; 0x20b8 <__ultoa_invert+0xa2>
    20c6:	62 0f       	add	r22, r18
    20c8:	73 1f       	adc	r23, r19
    20ca:	84 1f       	adc	r24, r20
    20cc:	95 1f       	adc	r25, r21
    20ce:	a0 1d       	adc	r26, r0
    20d0:	08 95       	ret

000020d2 <_exit>:
    20d2:	f8 94       	cli

000020d4 <__stop_program>:
    20d4:	ff cf       	rjmp	.-2      	; 0x20d4 <__stop_program>
