
MassStorageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  000025f2  00002686  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080013c  0080013c  000026c2  2**0
                  ALLOC
  3 .stab         0000108c  00000000  00000000  000026c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000003c2  00000000  00000000  00003750  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000888  00000000  00000000  00003b18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000db3d  00000000  00000000  000043a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034b5  00000000  00000000  00011edd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005cba  00000000  00000000  00015392  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001994  00000000  00000000  0001b04c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004f52  00000000  00000000  0001c9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009830  00000000  00000000  00021932  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a68  00000000  00000000  0002b162  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	06 c2       	rjmp	.+1036   	; 0x40e <__ctors_end>
       2:	00 00       	nop
       4:	23 c2       	rjmp	.+1094   	; 0x44c <__bad_interrupt>
       6:	00 00       	nop
       8:	21 c2       	rjmp	.+1090   	; 0x44c <__bad_interrupt>
       a:	00 00       	nop
       c:	1f c2       	rjmp	.+1086   	; 0x44c <__bad_interrupt>
       e:	00 00       	nop
      10:	1d c2       	rjmp	.+1082   	; 0x44c <__bad_interrupt>
      12:	00 00       	nop
      14:	1b c2       	rjmp	.+1078   	; 0x44c <__bad_interrupt>
      16:	00 00       	nop
      18:	19 c2       	rjmp	.+1074   	; 0x44c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	17 c2       	rjmp	.+1070   	; 0x44c <__bad_interrupt>
      1e:	00 00       	nop
      20:	15 c2       	rjmp	.+1066   	; 0x44c <__bad_interrupt>
      22:	00 00       	nop
      24:	13 c2       	rjmp	.+1062   	; 0x44c <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <__vector_10>
      2c:	0f c2       	rjmp	.+1054   	; 0x44c <__bad_interrupt>
      2e:	00 00       	nop
      30:	0d c2       	rjmp	.+1050   	; 0x44c <__bad_interrupt>
      32:	00 00       	nop
      34:	0b c2       	rjmp	.+1046   	; 0x44c <__bad_interrupt>
      36:	00 00       	nop
      38:	09 c2       	rjmp	.+1042   	; 0x44c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	07 c2       	rjmp	.+1038   	; 0x44c <__bad_interrupt>
      3e:	00 00       	nop
      40:	05 c2       	rjmp	.+1034   	; 0x44c <__bad_interrupt>
      42:	00 00       	nop
      44:	03 c2       	rjmp	.+1030   	; 0x44c <__bad_interrupt>
      46:	00 00       	nop
      48:	01 c2       	rjmp	.+1026   	; 0x44c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ff c1       	rjmp	.+1022   	; 0x44c <__bad_interrupt>
      4e:	00 00       	nop
      50:	fd c1       	rjmp	.+1018   	; 0x44c <__bad_interrupt>
      52:	00 00       	nop
      54:	fb c1       	rjmp	.+1014   	; 0x44c <__bad_interrupt>
      56:	00 00       	nop
      58:	f9 c1       	rjmp	.+1010   	; 0x44c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f7 c1       	rjmp	.+1006   	; 0x44c <__bad_interrupt>
      5e:	00 00       	nop
      60:	f5 c1       	rjmp	.+1002   	; 0x44c <__bad_interrupt>
      62:	00 00       	nop
      64:	f3 c1       	rjmp	.+998    	; 0x44c <__bad_interrupt>
      66:	00 00       	nop
      68:	f1 c1       	rjmp	.+994    	; 0x44c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ef c1       	rjmp	.+990    	; 0x44c <__bad_interrupt>
      6e:	00 00       	nop
      70:	ed c1       	rjmp	.+986    	; 0x44c <__bad_interrupt>
      72:	00 00       	nop
      74:	eb c1       	rjmp	.+982    	; 0x44c <__bad_interrupt>
      76:	00 00       	nop
      78:	e9 c1       	rjmp	.+978    	; 0x44c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e7 c1       	rjmp	.+974    	; 0x44c <__bad_interrupt>
      7e:	00 00       	nop
      80:	e5 c1       	rjmp	.+970    	; 0x44c <__bad_interrupt>
      82:	00 00       	nop
      84:	e3 c1       	rjmp	.+966    	; 0x44c <__bad_interrupt>
      86:	00 00       	nop
      88:	e1 c1       	rjmp	.+962    	; 0x44c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	df c1       	rjmp	.+958    	; 0x44c <__bad_interrupt>
      8e:	00 00       	nop
      90:	dd c1       	rjmp	.+954    	; 0x44c <__bad_interrupt>
      92:	00 00       	nop
      94:	db c1       	rjmp	.+950    	; 0x44c <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4294>:
      98:	1b 5b 33 36 6d 4d 61 73 73 20 53 74 6f 72 61 67     .[36mMass Storag
      a8:	65 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     e Host Demo runn
      b8:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00                 ing....[37m.

000000c4 <__c.4303>:
      c4:	57 61 69 74 69 6e 67 20 75 6e 74 69 6c 20 72 65     Waiting until re
      d4:	61 64 79 2e 2e 2e 0d 0a 00                          ady......

000000dd <__c.4307>:
      dd:	45 72 72 6f 72 20 77 61 69 74 69 6e 67 20 66 6f     Error waiting fo
      ed:	72 20 64 65 76 69 63 65 20 74 6f 20 62 65 20 72     r device to be r
      fd:	65 61 64 79 2e 0d 0a 00                             eady....

00000105 <__c.4310>:
     105:	52 65 74 72 69 65 76 69 6e 67 20 43 61 70 61 63     Retrieving Capac
     115:	69 74 79 2e 2e 2e 0d 0a 00                          ity......

0000011e <__c.4313>:
     11e:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
     12e:	20 64 65 76 69 63 65 20 63 61 70 61 63 69 74 79      device capacity
     13e:	2e 0d 0a 00                                         ....

00000142 <__c.4315>:
     142:	25 6c 75 20 62 6c 6f 63 6b 73 20 6f 66 20 25 6c     %lu blocks of %l
     152:	75 20 62 79 74 65 73 2e 0d 0a 00                    u bytes....

0000015d <__c.4318>:
     15d:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 64 65     Error reading de
     16d:	76 69 63 65 20 62 6c 6f 63 6b 2e 0d 0a 00           vice block....

0000017b <__c.4320>:
     17b:	0d 0a 43 6f 6e 74 65 6e 74 73 20 6f 66 20 66 69     ..Contents of fi
     18b:	72 73 74 20 62 6c 6f 63 6b 3a 0d 0a 00              rst block:...

00000198 <__c.4326>:
     198:	25 2e 32 58 20 00                                   %.2X .

0000019e <__c.4331>:
     19e:	20 20 20 20 00                                          .

000001a3 <__c.4338>:
     1a3:	0d 0a 00                                            ...

000001a6 <__c.4346>:
     1a6:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     1b6:	0d 0a 00                                            ...

000001b9 <__c.4351>:
     1b9:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1c9:	68 65 64 2e 0d 0a 00                                hed....

000001d0 <__c.4358>:
     1d0:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1e0:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1f0:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001fd <__c.4360>:
     1fd:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     20d:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4d 61 73 73     Not a Valid Mass
     21d:	20 53 74 6f 72 61 67 65 20 44 65 76 69 63 65 2e      Storage Device.
     22d:	0d 0a 00                                            ...

00000230 <__c.4362>:
     230:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     240:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     250:	6f 6e 2e 0d 0a 00                                   on....

00000256 <__c.4365>:
     256:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
     266:	20 6d 61 78 20 4c 55 4e 20 69 6e 64 65 78 2e 0d      max LUN index..
     276:	0a 00                                               ..

00000278 <__c.4367>:
     278:	54 6f 74 61 6c 20 4c 55 4e 73 3a 20 25 64 20 2d     Total LUNs: %d -
     288:	20 55 73 69 6e 67 20 66 69 72 73 74 20 4c 55 4e      Using first LUN
     298:	20 69 6e 20 64 65 76 69 63 65 2e 0d 0a 00            in device....

000002a6 <__c.4369>:
     2a6:	45 72 72 6f 72 20 72 65 73 65 74 74 69 6e 67 20     Error resetting 
     2b6:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 69 6e 74     Mass Storage int
     2c6:	65 72 66 61 63 65 2e 0d 0a 00                       erface....

000002d0 <__c.4372>:
     2d0:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
     2e0:	20 64 65 76 69 63 65 20 73 65 6e 73 65 2e 0d 0a      device sense...
     2f0:	00                                                  .

000002f1 <__c.4374>:
     2f1:	45 72 72 6f 72 20 73 65 74 74 69 6e 67 20 50 72     Error setting Pr
     301:	65 76 65 6e 74 20 44 65 76 69 63 65 20 52 65 6d     event Device Rem
     311:	6f 76 61 6c 20 62 69 74 2e 0d 0a 00                 oval bit....

0000031d <__c.4377>:
     31d:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
     32d:	20 64 65 76 69 63 65 20 49 6e 71 75 69 72 79 20      device Inquiry 
     33d:	64 61 74 61 2e 0d 0a 00                             data....

00000345 <__c.4379>:
     345:	56 65 6e 64 6f 72 20 22 25 2e 38 73 22 2c 20 50     Vendor "%.8s", P
     355:	72 6f 64 75 63 74 20 22 25 2e 31 36 73 22 0d 0a     roduct "%.16s"..
     365:	00                                                  .

00000366 <__c.4381>:
     366:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 44 65 76     Mass Storage Dev
     376:	69 63 65 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d     ice Enumerated..
     386:	0a 00                                               ..

00000388 <__c.4386>:
     388:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     398:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     3a8:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

000003b7 <__c.4393>:
     3b7:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     3c7:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     3d7:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     3e7:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     3f7:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     407:	1b 5b 33 37 6d 00 00                                .[37m..

0000040e <__ctors_end>:
     40e:	11 24       	eor	r1, r1
     410:	1f be       	out	0x3f, r1	; 63
     412:	cf ef       	ldi	r28, 0xFF	; 255
     414:	d0 e2       	ldi	r29, 0x20	; 32
     416:	de bf       	out	0x3e, r29	; 62
     418:	cd bf       	out	0x3d, r28	; 61

0000041a <__do_copy_data>:
     41a:	11 e0       	ldi	r17, 0x01	; 1
     41c:	a0 e0       	ldi	r26, 0x00	; 0
     41e:	b1 e0       	ldi	r27, 0x01	; 1
     420:	e2 ef       	ldi	r30, 0xF2	; 242
     422:	f5 e2       	ldi	r31, 0x25	; 37
     424:	00 e0       	ldi	r16, 0x00	; 0
     426:	0b bf       	out	0x3b, r16	; 59
     428:	02 c0       	rjmp	.+4      	; 0x42e <__do_copy_data+0x14>
     42a:	07 90       	elpm	r0, Z+
     42c:	0d 92       	st	X+, r0
     42e:	ac 33       	cpi	r26, 0x3C	; 60
     430:	b1 07       	cpc	r27, r17
     432:	d9 f7       	brne	.-10     	; 0x42a <__do_copy_data+0x10>
     434:	1b be       	out	0x3b, r1	; 59

00000436 <__do_clear_bss>:
     436:	11 e0       	ldi	r17, 0x01	; 1
     438:	ac e3       	ldi	r26, 0x3C	; 60
     43a:	b1 e0       	ldi	r27, 0x01	; 1
     43c:	01 c0       	rjmp	.+2      	; 0x440 <.do_clear_bss_start>

0000043e <.do_clear_bss_loop>:
     43e:	1d 92       	st	X+, r1

00000440 <.do_clear_bss_start>:
     440:	ae 35       	cpi	r26, 0x5E	; 94
     442:	b1 07       	cpc	r27, r17
     444:	e1 f7       	brne	.-8      	; 0x43e <.do_clear_bss_loop>
     446:	7a d1       	rcall	.+756    	; 0x73c <main>
     448:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <_exit>

0000044c <__bad_interrupt>:
     44c:	d9 cd       	rjmp	.-1102   	; 0x0 <__vectors>

0000044e <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     44e:	9b b1       	in	r25, 0x0b	; 11
     450:	9f 70       	andi	r25, 0x0F	; 15
     452:	98 2b       	or	r25, r24
     454:	9b b9       	out	0x0b, r25	; 11
			}
     456:	08 95       	ret

00000458 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     458:	84 b7       	in	r24, 0x34	; 52
     45a:	87 7f       	andi	r24, 0xF7	; 247
     45c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     45e:	28 e1       	ldi	r18, 0x18	; 24
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	f8 94       	cli
     464:	20 93 60 00 	sts	0x0060, r18
     468:	10 92 60 00 	sts	0x0060, r1
     46c:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	80 e8       	ldi	r24, 0x80	; 128
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	f8 94       	cli
     476:	80 93 61 00 	sts	0x0061, r24
     47a:	90 93 61 00 	sts	0x0061, r25
     47e:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     480:	83 e3       	ldi	r24, 0x33	; 51
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	90 93 cd 00 	sts	0x00CD, r25
     488:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     48c:	86 e0       	ldi	r24, 0x06	; 6
     48e:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     492:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     496:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     49a:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     49c:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     49e:	8a b1       	in	r24, 0x0a	; 10
     4a0:	80 6f       	ori	r24, 0xF0	; 240
     4a2:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     4a4:	8b b1       	in	r24, 0x0b	; 11
     4a6:	8f 70       	andi	r24, 0x0F	; 15
     4a8:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     4aa:	38 d6       	rcall	.+3184   	; 0x111c <USB_Init>
     4ac:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	0c 94 c8 0f 	jmp	0x1f90	; 0x1f90 <Serial_CreateStream>

000004b4 <MassStorageHost_Task>:
     4b4:	2f 92       	push	r2
}
     4b6:	3f 92       	push	r3

/** Task to manage an enumerated USB Mass Storage device once connected, to print out
 *  data from the device.
 */
void MassStorageHost_Task(void)
{
     4b8:	4f 92       	push	r4
     4ba:	5f 92       	push	r5
     4bc:	6f 92       	push	r6
     4be:	7f 92       	push	r7
     4c0:	8f 92       	push	r8
     4c2:	9f 92       	push	r9
     4c4:	af 92       	push	r10
     4c6:	bf 92       	push	r11
     4c8:	cf 92       	push	r12
     4ca:	df 92       	push	r13
     4cc:	ef 92       	push	r14
     4ce:	ff 92       	push	r15
     4d0:	0f 93       	push	r16
     4d2:	1f 93       	push	r17
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	cd b7       	in	r28, 0x3d	; 61
     4da:	de b7       	in	r29, 0x3e	; 62
     4dc:	2a 97       	sbiw	r28, 0x0a	; 10
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	f8 94       	cli
     4e2:	de bf       	out	0x3e, r29	; 62
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	cd bf       	out	0x3d, r28	; 61
		printf_P(PSTR("\r\n"));
	}

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
}
     4e8:	2d b7       	in	r18, 0x3d	; 61
     4ea:	3e b7       	in	r19, 0x3e	; 62
     4ec:	3a 87       	std	Y+10, r19	; 0x0a
     4ee:	29 87       	std	Y+9, r18	; 0x09
/** Task to manage an enumerated USB Mass Storage device once connected, to print out
 *  data from the device.
 */
void MassStorageHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     4f0:	80 91 49 01 	lds	r24, 0x0149
     4f4:	8b 30       	cpi	r24, 0x0B	; 11
     4f6:	09 f0       	breq	.+2      	; 0x4fa <MassStorageHost_Task+0x46>
     4f8:	01 c1       	rjmp	.+514    	; 0x6fc <MassStorageHost_Task+0x248>
	  return;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     4fa:	80 e2       	ldi	r24, 0x20	; 32
     4fc:	a8 df       	rcall	.-176    	; 0x44e <LEDs_SetAllLEDs>
     4fe:	84 ec       	ldi	r24, 0xC4	; 196

	puts_P(PSTR("Waiting until ready...\r\n"));
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 57 10 	call	0x20ae	; 0x20ae <puts_P>
     506:	80 e0       	ldi	r24, 0x00	; 0

	for (;;)
	{
		uint8_t ErrorCode = MS_Host_TestUnitReady(&FlashDisk_MS_Interface, 0);
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	60 e0       	ldi	r22, 0x00	; 0
     50c:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <MS_Host_TestUnitReady>
     510:	88 23       	and	r24, r24

		if (!(ErrorCode))
     512:	29 f0       	breq	.+10     	; 0x51e <MassStorageHost_Task+0x6a>
     514:	80 38       	cpi	r24, 0x80	; 128
		  break;

		/* Check if an error other than a logical command error (device busy) received */
		if (ErrorCode != MS_ERROR_LOGICAL_CMD_FAILED)
     516:	b9 f3       	breq	.-18     	; 0x506 <MassStorageHost_Task+0x52>
     518:	8d ed       	ldi	r24, 0xDD	; 221
		{
			puts_P(PSTR("Error waiting for device to be ready.\r\n"));
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	10 c0       	rjmp	.+32     	; 0x53e <MassStorageHost_Task+0x8a>
     51e:	85 e0       	ldi	r24, 0x05	; 5
			USB_Host_SetDeviceConfiguration(0);
			return;
		}
	}

	puts_P(PSTR("Retrieving Capacity...\r\n"));
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	0e 94 57 10 	call	0x20ae	; 0x20ae <puts_P>
     526:	80 e0       	ldi	r24, 0x00	; 0

	SCSI_Capacity_t DiskCapacity;
	if (MS_Host_ReadDeviceCapacity(&FlashDisk_MS_Interface, 0, &DiskCapacity))
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	ae 01       	movw	r20, r28
     52e:	4f 5f       	subi	r20, 0xFF	; 255
     530:	5f 4f       	sbci	r21, 0xFF	; 255
     532:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <MS_Host_ReadDeviceCapacity>
     536:	88 23       	and	r24, r24
     538:	51 f0       	breq	.+20     	; 0x54e <MassStorageHost_Task+0x9a>
     53a:	8e e1       	ldi	r24, 0x1E	; 30
	{
		puts_P(PSTR("Error retrieving device capacity.\r\n"));
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	0e 94 57 10 	call	0x20ae	; 0x20ae <puts_P>
     542:	80 e9       	ldi	r24, 0x90	; 144
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     544:	84 df       	rcall	.-248    	; 0x44e <LEDs_SetAllLEDs>
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	0e 94 01 0b 	call	0x1602	; 0x1602 <USB_Host_SetDeviceConfiguration>
		USB_Host_SetDeviceConfiguration(0);
     54c:	d7 c0       	rjmp	.+430    	; 0x6fc <MassStorageHost_Task+0x248>
     54e:	8d b7       	in	r24, 0x3d	; 61
		return;
     550:	9e b7       	in	r25, 0x3e	; 62
	}

	printf_P(PSTR("%lu blocks of %lu bytes.\r\n"), DiskCapacity.Blocks, DiskCapacity.BlockSize);
     552:	0a 97       	sbiw	r24, 0x0a	; 10
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	9e bf       	out	0x3e, r25	; 62
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	8d bf       	out	0x3d, r24	; 61
     55e:	ed b7       	in	r30, 0x3d	; 61
     560:	fe b7       	in	r31, 0x3e	; 62
     562:	31 96       	adiw	r30, 0x01	; 1
     564:	82 e4       	ldi	r24, 0x42	; 66
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	ad b7       	in	r26, 0x3d	; 61
     56a:	be b7       	in	r27, 0x3e	; 62
     56c:	12 96       	adiw	r26, 0x02	; 2
     56e:	9c 93       	st	X, r25
     570:	8e 93       	st	-X, r24
     572:	11 97       	sbiw	r26, 0x01	; 1
     574:	89 81       	ldd	r24, Y+1	; 0x01
     576:	9a 81       	ldd	r25, Y+2	; 0x02
     578:	ab 81       	ldd	r26, Y+3	; 0x03
     57a:	bc 81       	ldd	r27, Y+4	; 0x04
     57c:	82 83       	std	Z+2, r24	; 0x02
     57e:	93 83       	std	Z+3, r25	; 0x03
     580:	a4 83       	std	Z+4, r26	; 0x04
     582:	b5 83       	std	Z+5, r27	; 0x05
     584:	8d 81       	ldd	r24, Y+5	; 0x05
     586:	9e 81       	ldd	r25, Y+6	; 0x06
     588:	af 81       	ldd	r26, Y+7	; 0x07
     58a:	b8 85       	ldd	r27, Y+8	; 0x08
     58c:	86 83       	std	Z+6, r24	; 0x06
     58e:	97 83       	std	Z+7, r25	; 0x07
     590:	a0 87       	std	Z+8, r26	; 0x08
     592:	b1 87       	std	Z+9, r27	; 0x09
     594:	0e 94 38 10 	call	0x2070	; 0x2070 <printf_P>
     598:	8d 81       	ldd	r24, Y+5	; 0x05
     59a:	9e 81       	ldd	r25, Y+6	; 0x06

	uint8_t BlockBuffer[DiskCapacity.BlockSize];
     59c:	af 81       	ldd	r26, Y+7	; 0x07
     59e:	b8 85       	ldd	r27, Y+8	; 0x08
     5a0:	ed b7       	in	r30, 0x3d	; 61
     5a2:	fe b7       	in	r31, 0x3e	; 62
     5a4:	3a 96       	adiw	r30, 0x0a	; 10
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	fe bf       	out	0x3e, r31	; 62
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	ed bf       	out	0x3d, r30	; 61
     5b0:	1e 2f       	mov	r17, r30
     5b2:	af 2e       	mov	r10, r31
     5b4:	9d b6       	in	r9, 0x3d	; 61
     5b6:	8e b6       	in	r8, 0x3e	; 62
     5b8:	2d b7       	in	r18, 0x3d	; 61
     5ba:	3e b7       	in	r19, 0x3e	; 62
     5bc:	28 1b       	sub	r18, r24
     5be:	39 0b       	sbc	r19, r25
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	3e bf       	out	0x3e, r19	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	2d bf       	out	0x3d, r18	; 61
     5ca:	6d b6       	in	r6, 0x3d	; 61
     5cc:	7e b6       	in	r7, 0x3e	; 62
     5ce:	08 94       	sec
     5d0:	61 1c       	adc	r6, r1
     5d2:	71 1c       	adc	r7, r1
     5d4:	ed 80       	ldd	r14, Y+5	; 0x05
     5d6:	fe 80       	ldd	r15, Y+6	; 0x06

	if (MS_Host_ReadDeviceBlocks(&FlashDisk_MS_Interface, 0, 0x00000000, 1, DiskCapacity.BlockSize, BlockBuffer))
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	60 e0       	ldi	r22, 0x00	; 0
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	a9 01       	movw	r20, r18
     5e4:	01 e0       	ldi	r16, 0x01	; 1
     5e6:	63 01       	movw	r12, r6
     5e8:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <MS_Host_ReadDeviceBlocks>
     5ec:	88 23       	and	r24, r24
     5ee:	61 f0       	breq	.+24     	; 0x608 <MassStorageHost_Task+0x154>
     5f0:	8d e5       	ldi	r24, 0x5D	; 93
     5f2:	91 e0       	ldi	r25, 0x01	; 1
	{
		puts_P(PSTR("Error reading device block.\r\n"));
     5f4:	0e 94 57 10 	call	0x20ae	; 0x20ae <puts_P>
     5f8:	80 e9       	ldi	r24, 0x90	; 144
     5fa:	29 df       	rcall	.-430    	; 0x44e <LEDs_SetAllLEDs>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	0e 94 01 0b 	call	0x1602	; 0x1602 <USB_Host_SetDeviceConfiguration>
		USB_Host_SetDeviceConfiguration(0);
     602:	1d bf       	out	0x3d, r17	; 61
     604:	ae be       	out	0x3e, r10	; 62
     606:	7a c0       	rjmp	.+244    	; 0x6fc <MassStorageHost_Task+0x248>
     608:	8b e7       	ldi	r24, 0x7B	; 123
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	0e 94 57 10 	call	0x20ae	; 0x20ae <puts_P>
		return;
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));
     610:	aa 24       	eor	r10, r10
     612:	bb 24       	eor	r11, r11
     614:	48 e9       	ldi	r20, 0x98	; 152

	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
     616:	44 2e       	mov	r4, r20
     618:	41 e0       	ldi	r20, 0x01	; 1

		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
			printf_P(PSTR("%.2X "), CurrByte);
     61a:	54 2e       	mov	r5, r20
     61c:	5e e9       	ldi	r21, 0x9E	; 158
     61e:	25 2e       	mov	r2, r21
     620:	51 e0       	ldi	r21, 0x01	; 1
		}

		printf_P(PSTR("    "));
     622:	35 2e       	mov	r3, r21
     624:	51 c0       	rjmp	.+162    	; 0x6c8 <MassStorageHost_Task+0x214>
     626:	65 01       	movw	r12, r10
     628:	34 e0       	ldi	r19, 0x04	; 4
		return;
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));

	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
     62a:	cc 0c       	add	r12, r12
	{
		uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];
     62c:	dd 1c       	adc	r13, r13
     62e:	3a 95       	dec	r19
     630:	e1 f7       	brne	.-8      	; 0x62a <MassStorageHost_Task+0x176>
     632:	c6 0c       	add	r12, r6
     634:	d7 1c       	adc	r13, r7
     636:	76 01       	movw	r14, r12
     638:	00 e0       	ldi	r16, 0x00	; 0
     63a:	d7 01       	movw	r26, r14
     63c:	8d 91       	ld	r24, X+

		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     63e:	7d 01       	movw	r14, r26
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
     640:	00 d0       	rcall	.+0      	; 0x642 <MassStorageHost_Task+0x18e>
     642:	00 d0       	rcall	.+0      	; 0x644 <MassStorageHost_Task+0x190>
     644:	ed b7       	in	r30, 0x3d	; 61
			printf_P(PSTR("%.2X "), CurrByte);
     646:	fe b7       	in	r31, 0x3e	; 62
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	ad b7       	in	r26, 0x3d	; 61
     64c:	be b7       	in	r27, 0x3e	; 62
     64e:	12 96       	adiw	r26, 0x02	; 2
     650:	5c 92       	st	X, r5
     652:	4e 92       	st	-X, r4
     654:	11 97       	sbiw	r26, 0x01	; 1
     656:	82 83       	std	Z+2, r24	; 0x02
     658:	13 82       	std	Z+3, r1	; 0x03
     65a:	0e 94 38 10 	call	0x2070	; 0x2070 <printf_P>
     65e:	0f 5f       	subi	r16, 0xFF	; 255
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
	{
		uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];

		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	00 31       	cpi	r16, 0x10	; 16
     66a:	39 f7       	brne	.-50     	; 0x63a <MassStorageHost_Task+0x186>
     66c:	00 d0       	rcall	.+0      	; 0x66e <MassStorageHost_Task+0x1ba>
     66e:	ed b7       	in	r30, 0x3d	; 61
     670:	fe b7       	in	r31, 0x3e	; 62
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
			printf_P(PSTR("%.2X "), CurrByte);
		}

		printf_P(PSTR("    "));
     672:	32 82       	std	Z+2, r3	; 0x02
     674:	21 82       	std	Z+1, r2	; 0x01
     676:	0e 94 38 10 	call	0x2070	; 0x2070 <printf_P>
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	ee 24       	eor	r14, r14
     680:	d6 01       	movw	r26, r12
     682:	0d 91       	ld	r16, X+

		/* Print out the 16 bytes of the chunk in ASCII format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     684:	6d 01       	movw	r12, r26
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
     686:	10 e0       	ldi	r17, 0x00	; 0
     688:	c8 01       	movw	r24, r16
     68a:	0e 94 06 10 	call	0x200c	; 0x200c <isprint>
			putchar(isprint(CurrByte) ? CurrByte : '.');
     68e:	00 97       	sbiw	r24, 0x00	; 0
     690:	11 f4       	brne	.+4      	; 0x696 <MassStorageHost_Task+0x1e2>
     692:	0e e2       	ldi	r16, 0x2E	; 46
     694:	10 e0       	ldi	r17, 0x00	; 0
     696:	60 91 5a 01 	lds	r22, 0x015A
     69a:	70 91 5b 01 	lds	r23, 0x015B
     69e:	c8 01       	movw	r24, r16
     6a0:	0e 94 0c 10 	call	0x2018	; 0x2018 <fputc>
     6a4:	e3 94       	inc	r14
     6a6:	b0 e1       	ldi	r27, 0x10	; 16
     6a8:	eb 16       	cp	r14, r27
		}

		printf_P(PSTR("    "));

		/* Print out the 16 bytes of the chunk in ASCII format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     6aa:	51 f7       	brne	.-44     	; 0x680 <MassStorageHost_Task+0x1cc>
     6ac:	00 d0       	rcall	.+0      	; 0x6ae <MassStorageHost_Task+0x1fa>
     6ae:	23 ea       	ldi	r18, 0xA3	; 163
     6b0:	31 e0       	ldi	r19, 0x01	; 1
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
			putchar(isprint(CurrByte) ? CurrByte : '.');
		}

		printf_P(PSTR("\r\n"));
     6b2:	ed b7       	in	r30, 0x3d	; 61
     6b4:	fe b7       	in	r31, 0x3e	; 62
     6b6:	32 83       	std	Z+2, r19	; 0x02
     6b8:	21 83       	std	Z+1, r18	; 0x01
     6ba:	0e 94 38 10 	call	0x2070	; 0x2070 <printf_P>
     6be:	08 94       	sec
     6c0:	a1 1c       	adc	r10, r1
     6c2:	b1 1c       	adc	r11, r1
		return;
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));

	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	a5 01       	movw	r20, r10
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	8d 81       	ldd	r24, Y+5	; 0x05
     6d0:	9e 81       	ldd	r25, Y+6	; 0x06
     6d2:	af 81       	ldd	r26, Y+7	; 0x07
     6d4:	b8 85       	ldd	r27, Y+8	; 0x08
     6d6:	24 e0       	ldi	r18, 0x04	; 4
     6d8:	b6 95       	lsr	r27
     6da:	a7 95       	ror	r26
     6dc:	97 95       	ror	r25
     6de:	87 95       	ror	r24
     6e0:	2a 95       	dec	r18
     6e2:	d1 f7       	brne	.-12     	; 0x6d8 <MassStorageHost_Task+0x224>
     6e4:	48 17       	cp	r20, r24
     6e6:	59 07       	cpc	r21, r25
     6e8:	6a 07       	cpc	r22, r26
     6ea:	7b 07       	cpc	r23, r27
     6ec:	08 f4       	brcc	.+2      	; 0x6f0 <MassStorageHost_Task+0x23c>
     6ee:	9b cf       	rjmp	.-202    	; 0x626 <MassStorageHost_Task+0x172>
     6f0:	80 e6       	ldi	r24, 0x60	; 96
     6f2:	ad de       	rcall	.-678    	; 0x44e <LEDs_SetAllLEDs>
     6f4:	80 e0       	ldi	r24, 0x00	; 0
		}

		printf_P(PSTR("\r\n"));
	}

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     6f6:	85 d7       	rcall	.+3850   	; 0x1602 <USB_Host_SetDeviceConfiguration>
     6f8:	9d be       	out	0x3d, r9	; 61
     6fa:	8e be       	out	0x3e, r8	; 62
	USB_Host_SetDeviceConfiguration(0);
     6fc:	89 85       	ldd	r24, Y+9	; 0x09
     6fe:	9a 85       	ldd	r25, Y+10	; 0x0a
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	f8 94       	cli
     704:	9e bf       	out	0x3e, r25	; 62
}
     706:	0f be       	out	0x3f, r0	; 63
     708:	8d bf       	out	0x3d, r24	; 61
     70a:	2a 96       	adiw	r28, 0x0a	; 10
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	f8 94       	cli
     710:	de bf       	out	0x3e, r29	; 62
     712:	0f be       	out	0x3f, r0	; 63
     714:	cd bf       	out	0x3d, r28	; 61
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	ff 90       	pop	r15
     720:	ef 90       	pop	r14
     722:	df 90       	pop	r13
     724:	cf 90       	pop	r12
     726:	bf 90       	pop	r11
     728:	af 90       	pop	r10
     72a:	9f 90       	pop	r9
     72c:	8f 90       	pop	r8
     72e:	7f 90       	pop	r7
     730:	6f 90       	pop	r6
     732:	5f 90       	pop	r5
     734:	4f 90       	pop	r4
     736:	3f 90       	pop	r3
     738:	2f 90       	pop	r2
     73a:	08 95       	ret

0000073c <main>:
     73c:	8d de       	rcall	.-742    	; 0x458 <SetupHardware>
     73e:	88 e9       	ldi	r24, 0x98	; 152
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 57 10 	call	0x20ae	; 0x20ae <puts_P>
 */
int main(void)
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "Mass Storage Host Demo running.\r\n" ESC_FG_WHITE));
     746:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     748:	82 de       	rcall	.-764    	; 0x44e <LEDs_SetAllLEDs>
     74a:	78 94       	sei
     74c:	b3 de       	rcall	.-666    	; 0x4b4 <MassStorageHost_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     74e:	95 d7       	rcall	.+3882   	; 0x167a <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		MassStorageHost_Task();
     750:	fd cf       	rjmp	.-6      	; 0x74c <main+0x10>

00000752 <EVENT_USB_Host_DeviceAttached>:
     752:	86 ea       	ldi	r24, 0xA6	; 166

		MS_Host_USBTask(&FlashDisk_MS_Interface);
		USB_USBTask();
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	0e 94 57 10 	call	0x20ae	; 0x20ae <puts_P>
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     75a:	80 ea       	ldi	r24, 0xA0	; 160
     75c:	78 ce       	rjmp	.-784    	; 0x44e <LEDs_SetAllLEDs>

0000075e <EVENT_USB_Host_DeviceUnattached>:
     75e:	89 eb       	ldi	r24, 0xB9	; 185
}
     760:	91 e0       	ldi	r25, 0x01	; 1
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     762:	0e 94 57 10 	call	0x20ae	; 0x20ae <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     766:	80 e1       	ldi	r24, 0x10	; 16
     768:	72 ce       	rjmp	.-796    	; 0x44e <LEDs_SetAllLEDs>

0000076a <EVENT_USB_Host_DeviceEnumerationComplete>:
     76a:	cf 93       	push	r28
}
     76c:	df 93       	push	r29

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
     772:	c9 53       	subi	r28, 0x39	; 57
     774:	d2 40       	sbci	r29, 0x02	; 2
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	de bf       	out	0x3e, r29	; 62
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     780:	80 ea       	ldi	r24, 0xA0	; 160
     782:	65 de       	rcall	.-822    	; 0x44e <LEDs_SetAllLEDs>
     784:	81 e0       	ldi	r24, 0x01	; 1

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     786:	be 01       	movw	r22, r28
     788:	6e 5f       	subi	r22, 0xFE	; 254
     78a:	7f 4f       	sbci	r23, 0xFF	; 255
     78c:	ae 01       	movw	r20, r28
     78e:	46 5c       	subi	r20, 0xC6	; 198
     790:	5f 4f       	sbci	r21, 0xFF	; 255
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	32 e0       	ldi	r19, 0x02	; 2
     796:	70 d5       	rcall	.+2784   	; 0x1278 <USB_Host_GetDeviceConfigDescriptor>
     798:	88 23       	and	r24, r24
     79a:	19 f0       	breq	.+6      	; 0x7a2 <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
     79c:	80 ed       	ldi	r24, 0xD0	; 208
     79e:	91 e0       	ldi	r25, 0x01	; 1
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     7a0:	14 c0       	rjmp	.+40     	; 0x7ca <EVENT_USB_Host_DeviceEnumerationComplete+0x60>
     7a2:	6a 81       	ldd	r22, Y+2	; 0x02
     7a4:	7b 81       	ldd	r23, Y+3	; 0x03
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (MS_Host_ConfigurePipes(&FlashDisk_MS_Interface,
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	ae 01       	movw	r20, r28
     7ac:	46 5c       	subi	r20, 0xC6	; 198
     7ae:	5f 4f       	sbci	r21, 0xFF	; 255
     7b0:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <MS_Host_ConfigurePipes>
     7b4:	88 23       	and	r24, r24
     7b6:	19 f0       	breq	.+6      	; 0x7be <EVENT_USB_Host_DeviceEnumerationComplete+0x54>
     7b8:	8d ef       	ldi	r24, 0xFD	; 253
     7ba:	91 e0       	ldi	r25, 0x01	; 1
	                           ConfigDescriptorSize, ConfigDescriptorData) != MS_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Mass Storage Device.\r\n"));
     7bc:	06 c0       	rjmp	.+12     	; 0x7ca <EVENT_USB_Host_DeviceEnumerationComplete+0x60>
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	20 d7       	rcall	.+3648   	; 0x1602 <USB_Host_SetDeviceConfiguration>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     7c2:	88 23       	and	r24, r24
     7c4:	31 f0       	breq	.+12     	; 0x7d2 <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
     7c6:	80 e3       	ldi	r24, 0x30	; 48
     7c8:	92 e0       	ldi	r25, 0x02	; 2
     7ca:	0e 94 57 10 	call	0x20ae	; 0x20ae <puts_P>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     7ce:	80 e9       	ldi	r24, 0x90	; 144
     7d0:	7c c0       	rjmp	.+248    	; 0x8ca <EVENT_USB_Host_DeviceEnumerationComplete+0x160>
     7d2:	80 e0       	ldi	r24, 0x00	; 0
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	be 01       	movw	r22, r28
		return;
	}

	uint8_t MaxLUNIndex;
	if (MS_Host_GetMaxLUN(&FlashDisk_MS_Interface, &MaxLUNIndex))
     7d8:	6f 5f       	subi	r22, 0xFF	; 255
     7da:	7f 4f       	sbci	r23, 0xFF	; 255
     7dc:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <MS_Host_GetMaxLUN>
     7e0:	88 23       	and	r24, r24
     7e2:	19 f0       	breq	.+6      	; 0x7ea <EVENT_USB_Host_DeviceEnumerationComplete+0x80>
     7e4:	86 e5       	ldi	r24, 0x56	; 86
     7e6:	92 e0       	ldi	r25, 0x02	; 2
     7e8:	44 c0       	rjmp	.+136    	; 0x872 <EVENT_USB_Host_DeviceEnumerationComplete+0x108>
	{
		puts_P(PSTR("Error retrieving max LUN index.\r\n"));
     7ea:	00 d0       	rcall	.+0      	; 0x7ec <EVENT_USB_Host_DeviceEnumerationComplete+0x82>
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <EVENT_USB_Host_DeviceEnumerationComplete+0x84>
     7ee:	88 e7       	ldi	r24, 0x78	; 120
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	printf_P(PSTR("Total LUNs: %d - Using first LUN in device.\r\n"), (MaxLUNIndex + 1));
     7f0:	92 e0       	ldi	r25, 0x02	; 2
     7f2:	ad b7       	in	r26, 0x3d	; 61
     7f4:	be b7       	in	r27, 0x3e	; 62
     7f6:	12 96       	adiw	r26, 0x02	; 2
     7f8:	9c 93       	st	X, r25
     7fa:	8e 93       	st	-X, r24
     7fc:	11 97       	sbiw	r26, 0x01	; 1
     7fe:	89 81       	ldd	r24, Y+1	; 0x01
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	14 96       	adiw	r26, 0x04	; 4
     806:	9c 93       	st	X, r25
     808:	8e 93       	st	-X, r24
     80a:	13 97       	sbiw	r26, 0x03	; 3
     80c:	0e 94 38 10 	call	0x2070	; 0x2070 <printf_P>
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0

	if (MS_Host_ResetMSInterface(&FlashDisk_MS_Interface))
     816:	0f 90       	pop	r0
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <MS_Host_ResetMSInterface>
     820:	88 23       	and	r24, r24
     822:	19 f0       	breq	.+6      	; 0x82a <EVENT_USB_Host_DeviceEnumerationComplete+0xc0>
     824:	86 ea       	ldi	r24, 0xA6	; 166
     826:	92 e0       	ldi	r25, 0x02	; 2
     828:	24 c0       	rjmp	.+72     	; 0x872 <EVENT_USB_Host_DeviceEnumerationComplete+0x108>
	{
		puts_P(PSTR("Error resetting Mass Storage interface.\r\n"));
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	60 e0       	ldi	r22, 0x00	; 0
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	SCSI_Request_Sense_Response_t SenseData;
	if (MS_Host_RequestSense(&FlashDisk_MS_Interface, 0, &SenseData) != 0)
     830:	ae 01       	movw	r20, r28
     832:	4c 5f       	subi	r20, 0xFC	; 252
     834:	5f 4f       	sbci	r21, 0xFF	; 255
     836:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <MS_Host_RequestSense>
     83a:	88 23       	and	r24, r24
     83c:	19 f0       	breq	.+6      	; 0x844 <EVENT_USB_Host_DeviceEnumerationComplete+0xda>
     83e:	80 ed       	ldi	r24, 0xD0	; 208
     840:	92 e0       	ldi	r25, 0x02	; 2
     842:	17 c0       	rjmp	.+46     	; 0x872 <EVENT_USB_Host_DeviceEnumerationComplete+0x108>
	{
		puts_P(PSTR("Error retrieving device sense.\r\n"));
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	60 e0       	ldi	r22, 0x00	; 0
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	if (MS_Host_PreventAllowMediumRemoval(&FlashDisk_MS_Interface, 0, true))
     84a:	41 e0       	ldi	r20, 0x01	; 1
     84c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <MS_Host_PreventAllowMediumRemoval>
     850:	88 23       	and	r24, r24
     852:	19 f0       	breq	.+6      	; 0x85a <EVENT_USB_Host_DeviceEnumerationComplete+0xf0>
     854:	81 ef       	ldi	r24, 0xF1	; 241
     856:	92 e0       	ldi	r25, 0x02	; 2
     858:	0c c0       	rjmp	.+24     	; 0x872 <EVENT_USB_Host_DeviceEnumerationComplete+0x108>
	{
		puts_P(PSTR("Error setting Prevent Device Removal bit.\r\n"));
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	60 e0       	ldi	r22, 0x00	; 0
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	SCSI_Inquiry_Response_t InquiryData;
	if (MS_Host_GetInquiryData(&FlashDisk_MS_Interface, 0, &InquiryData))
     860:	ae 01       	movw	r20, r28
     862:	4a 5e       	subi	r20, 0xEA	; 234
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <MS_Host_GetInquiryData>
     86a:	88 23       	and	r24, r24
     86c:	49 f0       	breq	.+18     	; 0x880 <EVENT_USB_Host_DeviceEnumerationComplete+0x116>
     86e:	8d e1       	ldi	r24, 0x1D	; 29
     870:	93 e0       	ldi	r25, 0x03	; 3
     872:	0e 94 57 10 	call	0x20ae	; 0x20ae <puts_P>
	{
		puts_P(PSTR("Error retrieving device Inquiry data.\r\n"));
     876:	80 e9       	ldi	r24, 0x90	; 144
     878:	ea dd       	rcall	.-1068   	; 0x44e <LEDs_SetAllLEDs>
     87a:	80 e0       	ldi	r24, 0x00	; 0
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     87c:	c2 d6       	rcall	.+3460   	; 0x1602 <USB_Host_SetDeviceConfiguration>
     87e:	26 c0       	rjmp	.+76     	; 0x8cc <EVENT_USB_Host_DeviceEnumerationComplete+0x162>
     880:	00 d0       	rcall	.+0      	; 0x882 <EVENT_USB_Host_DeviceEnumerationComplete+0x118>
		USB_Host_SetDeviceConfiguration(0);
     882:	00 d0       	rcall	.+0      	; 0x884 <EVENT_USB_Host_DeviceEnumerationComplete+0x11a>
     884:	00 d0       	rcall	.+0      	; 0x886 <EVENT_USB_Host_DeviceEnumerationComplete+0x11c>
     886:	ed b7       	in	r30, 0x3d	; 61
		return;
     888:	fe b7       	in	r31, 0x3e	; 62
	}

	printf_P(PSTR("Vendor \"%.8s\", Product \"%.16s\"\r\n"), InquiryData.VendorID, InquiryData.ProductID);
     88a:	31 96       	adiw	r30, 0x01	; 1
     88c:	85 e4       	ldi	r24, 0x45	; 69
     88e:	93 e0       	ldi	r25, 0x03	; 3
     890:	ad b7       	in	r26, 0x3d	; 61
     892:	be b7       	in	r27, 0x3e	; 62
     894:	12 96       	adiw	r26, 0x02	; 2
     896:	9c 93       	st	X, r25
     898:	8e 93       	st	-X, r24
     89a:	11 97       	sbiw	r26, 0x01	; 1
     89c:	ce 01       	movw	r24, r28
     89e:	4e 96       	adiw	r24, 0x1e	; 30
     8a0:	93 83       	std	Z+3, r25	; 0x03
     8a2:	82 83       	std	Z+2, r24	; 0x02
     8a4:	ce 01       	movw	r24, r28
     8a6:	86 96       	adiw	r24, 0x26	; 38
     8a8:	95 83       	std	Z+5, r25	; 0x05
     8aa:	84 83       	std	Z+4, r24	; 0x04
     8ac:	0e 94 38 10 	call	0x2070	; 0x2070 <printf_P>
     8b0:	ed b7       	in	r30, 0x3d	; 61
     8b2:	fe b7       	in	r31, 0x3e	; 62
     8b4:	36 96       	adiw	r30, 0x06	; 6
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli

	puts_P(PSTR("Mass Storage Device Enumerated.\r\n"));
     8ba:	fe bf       	out	0x3e, r31	; 62
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	ed bf       	out	0x3d, r30	; 61
     8c0:	86 e6       	ldi	r24, 0x66	; 102
     8c2:	93 e0       	ldi	r25, 0x03	; 3
     8c4:	0e 94 57 10 	call	0x20ae	; 0x20ae <puts_P>
     8c8:	80 e6       	ldi	r24, 0x60	; 96
     8ca:	c1 dd       	rcall	.-1150   	; 0x44e <LEDs_SetAllLEDs>
     8cc:	c7 5c       	subi	r28, 0xC7	; 199
     8ce:	dd 4f       	sbci	r29, 0xFD	; 253
     8d0:	0f b6       	in	r0, 0x3f	; 63
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     8d2:	f8 94       	cli
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	0f be       	out	0x3f, r0	; 63
}
     8d8:	cd bf       	out	0x3d, r28	; 61
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	08 95       	ret

000008e0 <EVENT_USB_Host_HostError>:
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	0f 92       	push	r0
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	89 83       	std	Y+1, r24	; 0x01

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();
     8ec:	af d3       	rcall	.+1886   	; 0x104c <USB_Disable>
     8ee:	00 d0       	rcall	.+0      	; 0x8f0 <EVENT_USB_Host_HostError+0x10>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     8f0:	00 d0       	rcall	.+0      	; 0x8f2 <EVENT_USB_Host_HostError+0x12>
     8f2:	ed b7       	in	r30, 0x3d	; 61
     8f4:	fe b7       	in	r31, 0x3e	; 62
     8f6:	31 96       	adiw	r30, 0x01	; 1
     8f8:	28 e8       	ldi	r18, 0x88	; 136
     8fa:	33 e0       	ldi	r19, 0x03	; 3
     8fc:	ad b7       	in	r26, 0x3d	; 61
     8fe:	be b7       	in	r27, 0x3e	; 62
     900:	12 96       	adiw	r26, 0x02	; 2
     902:	3c 93       	st	X, r19
     904:	2e 93       	st	-X, r18
     906:	11 97       	sbiw	r26, 0x01	; 1
     908:	89 81       	ldd	r24, Y+1	; 0x01
     90a:	82 83       	std	Z+2, r24	; 0x02
     90c:	13 82       	std	Z+3, r1	; 0x03
     90e:	0e 94 38 10 	call	0x2070	; 0x2070 <printf_P>
     912:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	80 e9       	ldi	r24, 0x90	; 144
     91c:	98 dd       	rcall	.-1232   	; 0x44e <LEDs_SetAllLEDs>
     91e:	ff cf       	rjmp	.-2      	; 0x91e <EVENT_USB_Host_HostError+0x3e>

00000920 <EVENT_USB_Host_DeviceEnumerationFailed>:
     920:	90 91 49 01 	lds	r25, 0x0149
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     924:	2d b7       	in	r18, 0x3d	; 61
     926:	3e b7       	in	r19, 0x3e	; 62
     928:	28 50       	subi	r18, 0x08	; 8
     92a:	30 40       	sbci	r19, 0x00	; 0
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	f8 94       	cli
     930:	3e bf       	out	0x3e, r19	; 62
     932:	0f be       	out	0x3f, r0	; 63
     934:	2d bf       	out	0x3d, r18	; 61
     936:	ed b7       	in	r30, 0x3d	; 61
     938:	fe b7       	in	r31, 0x3e	; 62
     93a:	31 96       	adiw	r30, 0x01	; 1
     93c:	27 eb       	ldi	r18, 0xB7	; 183
     93e:	33 e0       	ldi	r19, 0x03	; 3
     940:	ad b7       	in	r26, 0x3d	; 61
     942:	be b7       	in	r27, 0x3e	; 62
     944:	12 96       	adiw	r26, 0x02	; 2
     946:	3c 93       	st	X, r19
     948:	2e 93       	st	-X, r18
     94a:	11 97       	sbiw	r26, 0x01	; 1
     94c:	82 83       	std	Z+2, r24	; 0x02
     94e:	13 82       	std	Z+3, r1	; 0x03
     950:	64 83       	std	Z+4, r22	; 0x04
     952:	15 82       	std	Z+5, r1	; 0x05
     954:	96 83       	std	Z+6, r25	; 0x06
     956:	17 82       	std	Z+7, r1	; 0x07
     958:	0e 94 38 10 	call	0x2070	; 0x2070 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     95c:	2d b7       	in	r18, 0x3d	; 61
     95e:	3e b7       	in	r19, 0x3e	; 62
     960:	28 5f       	subi	r18, 0xF8	; 248
     962:	3f 4f       	sbci	r19, 0xFF	; 255
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	f8 94       	cli
     968:	3e bf       	out	0x3e, r19	; 62
     96a:	0f be       	out	0x3f, r0	; 63
     96c:	2d bf       	out	0x3d, r18	; 61
     96e:	80 e9       	ldi	r24, 0x90	; 144
     970:	6e cd       	rjmp	.-1316   	; 0x44e <LEDs_SetAllLEDs>

00000972 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     972:	80 91 9e 00 	lds	r24, 0x009E
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	81 70       	andi	r24, 0x01	; 1
     97a:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     97c:	20 91 a0 00 	lds	r18, 0x00A0
     980:	2d 7f       	andi	r18, 0xFD	; 253
     982:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     986:	20 91 9e 00 	lds	r18, 0x009E
     98a:	22 60       	ori	r18, 0x02	; 2
     98c:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     990:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     994:	21 fd       	sbrc	r18, 1
     996:	fc cf       	rjmp	.-8      	; 0x990 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     998:	20 91 9e 00 	lds	r18, 0x009E
     99c:	21 60       	ori	r18, 0x01	; 1
     99e:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     9a2:	10 92 3f 01 	sts	0x013F, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     9a6:	20 91 a0 00 	lds	r18, 0x00A0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	20 72       	andi	r18, 0x20	; 32
     9ae:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     9b0:	40 91 a0 00 	lds	r20, 0x00A0
     9b4:	4f 7d       	andi	r20, 0xDF	; 223
     9b6:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     9ba:	40 91 9f 00 	lds	r20, 0x009F
     9be:	4f 7d       	andi	r20, 0xDF	; 223
     9c0:	40 93 9f 00 	sts	0x009F, r20
     9c4:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     9c6:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     9ca:	55 ff       	sbrs	r21, 5
     9cc:	0b c0       	rjmp	.+22     	; 0x9e4 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     9ce:	40 91 9f 00 	lds	r20, 0x009F
     9d2:	4f 7d       	andi	r20, 0xDF	; 223
     9d4:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     9d8:	40 91 9f 00 	lds	r20, 0x009F
     9dc:	4d 7f       	andi	r20, 0xFD	; 253
     9de:	40 93 9f 00 	sts	0x009F, r20
     9e2:	08 c0       	rjmp	.+16     	; 0x9f4 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9e4:	ef ec       	ldi	r30, 0xCF	; 207
     9e6:	f7 e0       	ldi	r31, 0x07	; 7
     9e8:	31 97       	sbiw	r30, 0x01	; 1
     9ea:	f1 f7       	brne	.-4      	; 0x9e8 <USB_Host_ResetDevice+0x76>
     9ec:	00 c0       	rjmp	.+0      	; 0x9ee <USB_Host_ResetDevice+0x7c>
     9ee:	00 00       	nop
     9f0:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     9f2:	49 f7       	brne	.-46     	; 0x9c6 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     9f4:	21 15       	cp	r18, r1
     9f6:	31 05       	cpc	r19, r1
     9f8:	29 f0       	breq	.+10     	; 0xa04 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     9fa:	20 91 a0 00 	lds	r18, 0x00A0
     9fe:	20 62       	ori	r18, 0x20	; 32
     a00:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     a04:	00 97       	sbiw	r24, 0x00	; 0
     a06:	29 f4       	brne	.+10     	; 0xa12 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     a08:	80 91 9e 00 	lds	r24, 0x009E
     a0c:	8e 7f       	andi	r24, 0xFE	; 254
     a0e:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     a12:	80 91 a0 00 	lds	r24, 0x00A0
     a16:	82 60       	ori	r24, 0x02	; 2
     a18:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     a1c:	08 95       	ret

00000a1e <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     a1e:	40 91 9e 00 	lds	r20, 0x009E
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	41 70       	andi	r20, 0x01	; 1
     a26:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     a28:	20 91 a0 00 	lds	r18, 0x00A0
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	20 72       	andi	r18, 0x20	; 32
     a30:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     a32:	90 91 a0 00 	lds	r25, 0x00A0
     a36:	9f 7d       	andi	r25, 0xDF	; 223
     a38:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     a3c:	90 91 9f 00 	lds	r25, 0x009F
     a40:	9f 7d       	andi	r25, 0xDF	; 223
     a42:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a46:	90 91 9e 00 	lds	r25, 0x009E
     a4a:	91 60       	ori	r25, 0x01	; 1
     a4c:	90 93 9e 00 	sts	0x009E, r25
     a50:	26 c0       	rjmp	.+76     	; 0xa9e <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     a52:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     a56:	95 ff       	sbrs	r25, 5
     a58:	06 c0       	rjmp	.+12     	; 0xa66 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     a5a:	90 91 9f 00 	lds	r25, 0x009F
     a5e:	9f 7d       	andi	r25, 0xDF	; 223
     a60:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     a64:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     a66:	90 91 49 01 	lds	r25, 0x0149
     a6a:	91 30       	cpi	r25, 0x01	; 1
     a6c:	d9 f0       	breq	.+54     	; 0xaa4 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     a6e:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     a72:	94 ff       	sbrs	r25, 4
     a74:	09 c0       	rjmp	.+18     	; 0xa88 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     a76:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     a7a:	80 91 a6 00 	lds	r24, 0x00A6
     a7e:	8f 7e       	andi	r24, 0xEF	; 239
     a80:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     a84:	82 e0       	ldi	r24, 0x02	; 2

			break;
     a86:	0f c0       	rjmp	.+30     	; 0xaa6 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     a88:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     a8c:	91 ff       	sbrs	r25, 1
     a8e:	07 c0       	rjmp	.+14     	; 0xa9e <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     a90:	80 91 a6 00 	lds	r24, 0x00A6
     a94:	8d 7f       	andi	r24, 0xFD	; 253
     a96:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     a9a:	83 e0       	ldi	r24, 0x03	; 3

			break;
     a9c:	04 c0       	rjmp	.+8      	; 0xaa6 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     a9e:	88 23       	and	r24, r24
     aa0:	c1 f6       	brne	.-80     	; 0xa52 <USB_Host_WaitMS+0x34>
     aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     aa4:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     aa6:	41 15       	cp	r20, r1
     aa8:	51 05       	cpc	r21, r1
     aaa:	29 f4       	brne	.+10     	; 0xab6 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     aac:	90 91 9e 00 	lds	r25, 0x009E
     ab0:	9e 7f       	andi	r25, 0xFE	; 254
     ab2:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     ab6:	21 15       	cp	r18, r1
     ab8:	31 05       	cpc	r19, r1
     aba:	29 f0       	breq	.+10     	; 0xac6 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     abc:	90 91 a0 00 	lds	r25, 0x00A0
     ac0:	90 62       	ori	r25, 0x20	; 32
     ac2:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     ac6:	08 95       	ret

00000ac8 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
     ad4:	28 97       	sbiw	r28, 0x08	; 8
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	f8 94       	cli
     ada:	de bf       	out	0x3e, r29	; 62
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     ae0:	80 91 49 01 	lds	r24, 0x0149
     ae4:	85 30       	cpi	r24, 0x05	; 5
     ae6:	09 f4       	brne	.+2      	; 0xaea <USB_Host_ProcessNextHostState+0x22>
     ae8:	99 c0       	rjmp	.+306    	; 0xc1c <USB_Host_ProcessNextHostState+0x154>
     aea:	86 30       	cpi	r24, 0x06	; 6
     aec:	68 f4       	brcc	.+26     	; 0xb08 <USB_Host_ProcessNextHostState+0x40>
     aee:	82 30       	cpi	r24, 0x02	; 2
     af0:	c1 f1       	breq	.+112    	; 0xb62 <USB_Host_ProcessNextHostState+0x9a>
     af2:	83 30       	cpi	r24, 0x03	; 3
     af4:	18 f4       	brcc	.+6      	; 0xafc <USB_Host_ProcessNextHostState+0x34>
     af6:	88 23       	and	r24, r24
     af8:	a1 f0       	breq	.+40     	; 0xb22 <USB_Host_ProcessNextHostState+0x5a>
     afa:	04 c1       	rjmp	.+520    	; 0xd04 <USB_Host_ProcessNextHostState+0x23c>
     afc:	83 30       	cpi	r24, 0x03	; 3
     afe:	d9 f1       	breq	.+118    	; 0xb76 <USB_Host_ProcessNextHostState+0xae>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f0       	breq	.+2      	; 0xb06 <USB_Host_ProcessNextHostState+0x3e>
     b04:	ff c0       	rjmp	.+510    	; 0xd04 <USB_Host_ProcessNextHostState+0x23c>
     b06:	62 c0       	rjmp	.+196    	; 0xbcc <USB_Host_ProcessNextHostState+0x104>
     b08:	87 30       	cpi	r24, 0x07	; 7
     b0a:	09 f4       	brne	.+2      	; 0xb0e <USB_Host_ProcessNextHostState+0x46>
     b0c:	9e c0       	rjmp	.+316    	; 0xc4a <USB_Host_ProcessNextHostState+0x182>
     b0e:	87 30       	cpi	r24, 0x07	; 7
     b10:	08 f4       	brcc	.+2      	; 0xb14 <USB_Host_ProcessNextHostState+0x4c>
     b12:	8f c0       	rjmp	.+286    	; 0xc32 <USB_Host_ProcessNextHostState+0x16a>
     b14:	88 30       	cpi	r24, 0x08	; 8
     b16:	09 f4       	brne	.+2      	; 0xb1a <USB_Host_ProcessNextHostState+0x52>
     b18:	b8 c0       	rjmp	.+368    	; 0xc8a <USB_Host_ProcessNextHostState+0x1c2>
     b1a:	89 30       	cpi	r24, 0x09	; 9
     b1c:	09 f0       	breq	.+2      	; 0xb20 <USB_Host_ProcessNextHostState+0x58>
     b1e:	f2 c0       	rjmp	.+484    	; 0xd04 <USB_Host_ProcessNextHostState+0x23c>
     b20:	d9 c0       	rjmp	.+434    	; 0xcd4 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     b22:	00 91 3c 01 	lds	r16, 0x013C
     b26:	10 91 3d 01 	lds	r17, 0x013D
     b2a:	01 15       	cp	r16, r1
     b2c:	11 05       	cpc	r17, r1
     b2e:	09 f4       	brne	.+2      	; 0xb32 <USB_Host_ProcessNextHostState+0x6a>
     b30:	e9 c0       	rjmp	.+466    	; 0xd04 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	74 df       	rcall	.-280    	; 0xa1e <USB_Host_WaitMS>
     b36:	68 2f       	mov	r22, r24
     b38:	88 23       	and	r24, r24
     b3a:	31 f0       	breq	.+12     	; 0xb48 <USB_Host_ProcessNextHostState+0x80>
     b3c:	80 91 3e 01 	lds	r24, 0x013E
				{
					USB_HostState = PostWaitState;
     b40:	80 93 49 01 	sts	0x0149, r24
     b44:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     b46:	d2 c0       	rjmp	.+420    	; 0xcec <USB_Host_ProcessNextHostState+0x224>
					break;
     b48:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
     b4a:	10 40       	sbci	r17, 0x00	; 0
     b4c:	10 93 3d 01 	sts	0x013D, r17
     b50:	00 93 3c 01 	sts	0x013C, r16
     b54:	01 15       	cp	r16, r1
     b56:	11 05       	cpc	r17, r1
     b58:	09 f0       	breq	.+2      	; 0xb5c <USB_Host_ProcessNextHostState+0x94>
     b5a:	d4 c0       	rjmp	.+424    	; 0xd04 <USB_Host_ProcessNextHostState+0x23c>
     b5c:	80 91 3e 01 	lds	r24, 0x013E
				  USB_HostState = PostWaitState;
     b60:	07 c0       	rjmp	.+14     	; 0xb70 <USB_Host_ProcessNextHostState+0xa8>
     b62:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     b64:	93 e0       	ldi	r25, 0x03	; 3
     b66:	90 93 3d 01 	sts	0x013D, r25
     b6a:	80 93 3c 01 	sts	0x013C, r24
     b6e:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     b70:	80 93 49 01 	sts	0x0149, r24
     b74:	c7 c0       	rjmp	.+398    	; 0xd04 <USB_Host_ProcessNextHostState+0x23c>
			break;
     b76:	80 91 3c 01 	lds	r24, 0x013C
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     b7a:	90 91 3d 01 	lds	r25, 0x013D
     b7e:	9c 01       	movw	r18, r24
     b80:	21 50       	subi	r18, 0x01	; 1
     b82:	30 40       	sbci	r19, 0x00	; 0
     b84:	30 93 3d 01 	sts	0x013D, r19
     b88:	20 93 3c 01 	sts	0x013C, r18
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	39 f0       	breq	.+14     	; 0xb9e <USB_Host_ProcessNextHostState+0xd6>
     b90:	8f ec       	ldi	r24, 0xCF	; 207
     b92:	97 e0       	ldi	r25, 0x07	; 7
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	f1 f7       	brne	.-4      	; 0xb94 <USB_Host_ProcessNextHostState+0xcc>
     b98:	00 c0       	rjmp	.+0      	; 0xb9a <USB_Host_ProcessNextHostState+0xd2>
     b9a:	00 00       	nop
     b9c:	b3 c0       	rjmp	.+358    	; 0xd04 <USB_Host_ProcessNextHostState+0x23c>
     b9e:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     ba0:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     ba4:	80 61       	ori	r24, 0x10	; 16
     ba6:	80 93 d8 00 	sts	0x00D8, r24
     baa:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     bae:	8b 7f       	andi	r24, 0xFB	; 251
     bb0:	80 93 dd 00 	sts	0x00DD, r24
     bb4:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     bb8:	80 61       	ori	r24, 0x10	; 16
     bba:	80 93 d7 00 	sts	0x00D7, r24
     bbe:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     bc2:	82 60       	ori	r24, 0x02	; 2
     bc4:	80 93 dd 00 	sts	0x00DD, r24
     bc8:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     bca:	d2 cf       	rjmp	.-92     	; 0xb70 <USB_Host_ProcessNextHostState+0xa8>
     bcc:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     bd0:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     bd2:	98 c0       	rjmp	.+304    	; 0xd04 <USB_Host_ProcessNextHostState+0x23c>
     bd4:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     bd8:	8e 7f       	andi	r24, 0xFE	; 254
     bda:	80 93 9f 00 	sts	0x009F, r24
     bde:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     be2:	8d 7f       	andi	r24, 0xFD	; 253
     be4:	80 93 9f 00 	sts	0x009F, r24
     be8:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     bec:	8d 7f       	andi	r24, 0xFD	; 253
     bee:	80 93 df 00 	sts	0x00DF, r24
     bf2:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     bf6:	82 60       	ori	r24, 0x02	; 2
     bf8:	80 93 de 00 	sts	0x00DE, r24
     bfc:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     c00:	81 60       	ori	r24, 0x01	; 1
     c02:	80 93 9e 00 	sts	0x009E, r24
     c06:	bd d1       	rcall	.+890    	; 0xf82 <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     c08:	10 92 49 01 	sts	0x0149, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     c0c:	84 e6       	ldi	r24, 0x64	; 100
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	90 93 3d 01 	sts	0x013D, r25
     c14:	80 93 3c 01 	sts	0x013C, r24
     c18:	85 e0       	ldi	r24, 0x05	; 5
     c1a:	59 c0       	rjmp	.+178    	; 0xcce <USB_Host_ProcessNextHostState+0x206>
     c1c:	aa de       	rcall	.-684    	; 0x972 <USB_Host_ResetDevice>
     c1e:	10 92 49 01 	sts	0x0149, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     c22:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	90 93 3d 01 	sts	0x013D, r25
     c2a:	80 93 3c 01 	sts	0x013C, r24
     c2e:	86 e0       	ldi	r24, 0x06	; 6
     c30:	4e c0       	rjmp	.+156    	; 0xcce <USB_Host_ProcessNextHostState+0x206>
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     c38:	20 e4       	ldi	r18, 0x40	; 64
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	01 e0       	ldi	r16, 0x01	; 1
     c3e:	1b d1       	rcall	.+566    	; 0xe76 <Pipe_ConfigurePipe>
     c40:	88 23       	and	r24, r24
     c42:	09 f4       	brne	.+2      	; 0xc46 <USB_Host_ProcessNextHostState+0x17e>
     c44:	4f c0       	rjmp	.+158    	; 0xce4 <USB_Host_ProcessNextHostState+0x21c>
     c46:	87 e0       	ldi	r24, 0x07	; 7
     c48:	93 cf       	rjmp	.-218    	; 0xb70 <USB_Host_ProcessNextHostState+0xa8>
     c4a:	a1 e4       	ldi	r26, 0x41	; 65
     c4c:	b1 e0       	ldi	r27, 0x01	; 1
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     c4e:	e2 e1       	ldi	r30, 0x12	; 18
     c50:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     c52:	88 e0       	ldi	r24, 0x08	; 8
     c54:	01 90       	ld	r0, Z+
     c56:	0d 92       	st	X+, r0
     c58:	81 50       	subi	r24, 0x01	; 1
     c5a:	e1 f7       	brne	.-8      	; 0xc54 <USB_Host_ProcessNextHostState+0x18c>
     c5c:	10 92 a7 00 	sts	0x00A7, r1
     c60:	ce 01       	movw	r24, r28
     c62:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c64:	d0 d3       	rcall	.+1952   	; 0x1406 <USB_Host_SendControlRequest>
     c66:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     c68:	88 23       	and	r24, r24
     c6a:	09 f0       	breq	.+2      	; 0xc6e <USB_Host_ProcessNextHostState+0x1a6>
     c6c:	3e c0       	rjmp	.+124    	; 0xcea <USB_Host_ProcessNextHostState+0x222>
     c6e:	88 85       	ldd	r24, Y+8	; 0x08
     c70:	80 93 22 01 	sts	0x0122, r24
     c74:	7e de       	rcall	.-772    	; 0x972 <USB_Host_ResetDevice>
     c76:	10 92 49 01 	sts	0x0149, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     c7a:	88 ec       	ldi	r24, 0xC8	; 200
     c7c:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
     c7e:	90 93 3d 01 	sts	0x013D, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     c82:	80 93 3c 01 	sts	0x013C, r24
     c86:	88 e0       	ldi	r24, 0x08	; 8
     c88:	22 c0       	rjmp	.+68     	; 0xcce <USB_Host_ProcessNextHostState+0x206>
     c8a:	20 91 22 01 	lds	r18, 0x0122
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     c96:	01 e0       	ldi	r16, 0x01	; 1
     c98:	ee d0       	rcall	.+476    	; 0xe76 <Pipe_ConfigurePipe>
     c9a:	88 23       	and	r24, r24
     c9c:	19 f1       	breq	.+70     	; 0xce4 <USB_Host_ProcessNextHostState+0x21c>
     c9e:	a1 e4       	ldi	r26, 0x41	; 65
     ca0:	b1 e0       	ldi	r27, 0x01	; 1
     ca2:	ea e1       	ldi	r30, 0x1A	; 26
     ca4:	f1 e0       	ldi	r31, 0x01	; 1
     ca6:	88 e0       	ldi	r24, 0x08	; 8
     ca8:	01 90       	ld	r0, Z+
     caa:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     cac:	81 50       	subi	r24, 0x01	; 1
     cae:	e1 f7       	brne	.-8      	; 0xca8 <USB_Host_ProcessNextHostState+0x1e0>
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	a8 d3       	rcall	.+1872   	; 0x1406 <USB_Host_SendControlRequest>
     cb6:	68 2f       	mov	r22, r24
     cb8:	88 23       	and	r24, r24
     cba:	b9 f4       	brne	.+46     	; 0xcea <USB_Host_ProcessNextHostState+0x222>
     cbc:	10 92 49 01 	sts	0x0149, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     cc0:	84 e6       	ldi	r24, 0x64	; 100
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	90 93 3d 01 	sts	0x013D, r25
     cc8:	80 93 3c 01 	sts	0x013C, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     ccc:	89 e0       	ldi	r24, 0x09	; 9
     cce:	80 93 3e 01 	sts	0x013E, r24
     cd2:	18 c0       	rjmp	.+48     	; 0xd04 <USB_Host_ProcessNextHostState+0x23c>
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	80 93 a1 00 	sts	0x00A1, r24
     cda:	8a e0       	ldi	r24, 0x0A	; 10
     cdc:	80 93 49 01 	sts	0x0149, r24
     ce0:	44 dd       	rcall	.-1400   	; 0x76a <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     ce2:	10 c0       	rjmp	.+32     	; 0xd04 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	84 e0       	ldi	r24, 0x04	; 4
     ce8:	01 c0       	rjmp	.+2      	; 0xcec <USB_Host_ProcessNextHostState+0x224>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     cea:	83 e0       	ldi	r24, 0x03	; 3
     cec:	90 91 49 01 	lds	r25, 0x0149

			EVENT_USB_Host_DeviceEnumerationComplete();
     cf0:	91 30       	cpi	r25, 0x01	; 1
     cf2:	41 f0       	breq	.+16     	; 0xd04 <USB_Host_ProcessNextHostState+0x23c>
			break;
     cf4:	15 de       	rcall	.-982    	; 0x920 <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     cf6:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     cfa:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     cfc:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     d00:	2e dd       	rcall	.-1444   	; 0x75e <EVENT_USB_Host_DeviceUnattached>
     d02:	bc d1       	rcall	.+888    	; 0x107c <USB_ResetInterface>
     d04:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d0a:	de bf       	out	0x3e, r29	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	cd bf       	out	0x3d, r28	; 61
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     d14:	1f 91       	pop	r17
     d16:	0f 91       	pop	r16

		USB_ResetInterface();
     d18:	08 95       	ret

00000d1a <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d1a:	af 92       	push	r10
     d1c:	bf 92       	push	r11
     d1e:	cf 92       	push	r12
     d20:	df 92       	push	r13
     d22:	ff 92       	push	r15
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	5c 01       	movw	r10, r24
     d2e:	eb 01       	movw	r28, r22
     d30:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     d32:	80 91 aa 00 	lds	r24, 0x00AA
     d36:	8f 7c       	andi	r24, 0xCF	; 207
     d38:	80 62       	ori	r24, 0x20	; 32
     d3a:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     d3e:	57 d1       	rcall	.+686    	; 0xfee <Pipe_WaitUntilReady>
     d40:	f8 2e       	mov	r15, r24
     d42:	88 23       	and	r24, r24
     d44:	b1 f5       	brne	.+108    	; 0xdb2 <Pipe_Write_Stream_LE+0x98>
     d46:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d48:	d1 04       	cpc	r13, r1
     d4a:	41 f0       	breq	.+16     	; 0xd5c <Pipe_Write_Stream_LE+0x42>
     d4c:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     d4e:	00 81       	ld	r16, Z
     d50:	11 81       	ldd	r17, Z+1	; 0x01
     d52:	c0 1b       	sub	r28, r16
     d54:	d1 0b       	sbc	r29, r17
     d56:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d58:	1b 1d       	adc	r17, r11
     d5a:	01 c0       	rjmp	.+2      	; 0xd5e <Pipe_Write_Stream_LE+0x44>
     d5c:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d5e:	aa 24       	eor	r10, r10
     d60:	bb 24       	eor	r11, r11
     d62:	23 c0       	rjmp	.+70     	; 0xdaa <Pipe_Write_Stream_LE+0x90>
     d64:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     d68:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     d6a:	16 c0       	rjmp	.+44     	; 0xd98 <Pipe_Write_Stream_LE+0x7e>
     d6c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     d70:	8b 77       	andi	r24, 0x7B	; 123
     d72:	80 93 a6 00 	sts	0x00A6, r24
     d76:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     d78:	d1 04       	cpc	r13, r1
     d7a:	51 f0       	breq	.+20     	; 0xd90 <Pipe_Write_Stream_LE+0x76>
     d7c:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     d7e:	80 81       	ld	r24, Z
     d80:	91 81       	ldd	r25, Z+1	; 0x01
     d82:	8a 0d       	add	r24, r10
     d84:	9b 1d       	adc	r25, r11
     d86:	91 83       	std	Z+1, r25	; 0x01
     d88:	80 83       	st	Z, r24
     d8a:	44 e0       	ldi	r20, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     d8c:	f4 2e       	mov	r15, r20
     d8e:	11 c0       	rjmp	.+34     	; 0xdb2 <Pipe_Write_Stream_LE+0x98>
     d90:	2e d1       	rcall	.+604    	; 0xfee <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     d92:	88 23       	and	r24, r24
     d94:	51 f0       	breq	.+20     	; 0xdaa <Pipe_Write_Stream_LE+0x90>
     d96:	0c c0       	rjmp	.+24     	; 0xdb0 <Pipe_Write_Stream_LE+0x96>
     d98:	f8 01       	movw	r30, r16
     d9a:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     d9c:	8f 01       	movw	r16, r30
     d9e:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     da2:	21 97       	sbiw	r28, 0x01	; 1
     da4:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     da6:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     da8:	b1 1c       	adc	r11, r1
     daa:	20 97       	sbiw	r28, 0x00	; 0
     dac:	d9 f6       	brne	.-74     	; 0xd64 <Pipe_Write_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     dae:	01 c0       	rjmp	.+2      	; 0xdb2 <Pipe_Write_Stream_LE+0x98>
     db0:	f8 2e       	mov	r15, r24
     db2:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     db4:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	ff 90       	pop	r15
     dbe:	df 90       	pop	r13
     dc0:	cf 90       	pop	r12
     dc2:	bf 90       	pop	r11
     dc4:	af 90       	pop	r10
     dc6:	08 95       	ret

00000dc8 <Pipe_Read_Stream_LE>:
     dc8:	af 92       	push	r10
     dca:	bf 92       	push	r11
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     dcc:	cf 92       	push	r12
     dce:	df 92       	push	r13
     dd0:	ff 92       	push	r15
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	5c 01       	movw	r10, r24
     ddc:	eb 01       	movw	r28, r22
     dde:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     de0:	80 91 aa 00 	lds	r24, 0x00AA
     de4:	8f 7c       	andi	r24, 0xCF	; 207
     de6:	80 61       	ori	r24, 0x10	; 16
     de8:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     dec:	00 d1       	rcall	.+512    	; 0xfee <Pipe_WaitUntilReady>
     dee:	f8 2e       	mov	r15, r24
     df0:	88 23       	and	r24, r24
     df2:	b1 f5       	brne	.+108    	; 0xe60 <Pipe_Read_Stream_LE+0x98>
     df4:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     df6:	d1 04       	cpc	r13, r1
     df8:	41 f0       	breq	.+16     	; 0xe0a <Pipe_Read_Stream_LE+0x42>
     dfa:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     dfc:	00 81       	ld	r16, Z
     dfe:	11 81       	ldd	r17, Z+1	; 0x01
     e00:	c0 1b       	sub	r28, r16
     e02:	d1 0b       	sbc	r29, r17
     e04:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     e06:	1b 1d       	adc	r17, r11
     e08:	01 c0       	rjmp	.+2      	; 0xe0c <Pipe_Read_Stream_LE+0x44>
     e0a:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e0c:	aa 24       	eor	r10, r10
     e0e:	bb 24       	eor	r11, r11
     e10:	23 c0       	rjmp	.+70     	; 0xe58 <Pipe_Read_Stream_LE+0x90>
     e12:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     e16:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     e18:	16 c0       	rjmp	.+44     	; 0xe46 <Pipe_Read_Stream_LE+0x7e>
     e1a:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     e1e:	8e 77       	andi	r24, 0x7E	; 126
     e20:	80 93 a6 00 	sts	0x00A6, r24
     e24:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     e26:	d1 04       	cpc	r13, r1
     e28:	51 f0       	breq	.+20     	; 0xe3e <Pipe_Read_Stream_LE+0x76>
     e2a:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     e2c:	80 81       	ld	r24, Z
     e2e:	91 81       	ldd	r25, Z+1	; 0x01
     e30:	8a 0d       	add	r24, r10
     e32:	9b 1d       	adc	r25, r11
     e34:	91 83       	std	Z+1, r25	; 0x01
     e36:	80 83       	st	Z, r24
     e38:	64 e0       	ldi	r22, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     e3a:	f6 2e       	mov	r15, r22
     e3c:	11 c0       	rjmp	.+34     	; 0xe60 <Pipe_Read_Stream_LE+0x98>
     e3e:	d7 d0       	rcall	.+430    	; 0xfee <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     e40:	88 23       	and	r24, r24
     e42:	51 f0       	breq	.+20     	; 0xe58 <Pipe_Read_Stream_LE+0x90>
     e44:	0c c0       	rjmp	.+24     	; 0xe5e <Pipe_Read_Stream_LE+0x96>
     e46:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     e4a:	f8 01       	movw	r30, r16
     e4c:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     e4e:	8f 01       	movw	r16, r30
     e50:	21 97       	sbiw	r28, 0x01	; 1
     e52:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     e54:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     e56:	b1 1c       	adc	r11, r1
     e58:	20 97       	sbiw	r28, 0x00	; 0
     e5a:	d9 f6       	brne	.-74     	; 0xe12 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <Pipe_Read_Stream_LE+0x98>
     e5e:	f8 2e       	mov	r15, r24
     e60:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     e62:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     e64:	cf 91       	pop	r28
     e66:	1f 91       	pop	r17
     e68:	0f 91       	pop	r16
     e6a:	ff 90       	pop	r15
     e6c:	df 90       	pop	r13
     e6e:	cf 90       	pop	r12
     e70:	bf 90       	pop	r11
     e72:	af 90       	pop	r10
     e74:	08 95       	ret

00000e76 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     e76:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     e78:	58 2f       	mov	r21, r24
     e7a:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     e7c:	87 ff       	sbrs	r24, 7
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <Pipe_ConfigurePipe+0xe>
     e80:	80 e1       	ldi	r24, 0x10	; 16
     e82:	01 c0       	rjmp	.+2      	; 0xe86 <Pipe_ConfigurePipe+0x10>
     e84:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     e86:	57 30       	cpi	r21, 0x07	; 7
     e88:	08 f0       	brcs	.+2      	; 0xe8c <Pipe_ConfigurePipe+0x16>
     e8a:	57 c0       	rjmp	.+174    	; 0xf3a <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     e8c:	66 23       	and	r22, r22
     e8e:	09 f4       	brne	.+2      	; 0xe92 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     e90:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     e92:	4f 70       	andi	r20, 0x0F	; 15
     e94:	62 95       	swap	r22
     e96:	66 0f       	add	r22, r22
     e98:	66 0f       	add	r22, r22
     e9a:	60 7c       	andi	r22, 0xC0	; 192
     e9c:	64 2b       	or	r22, r20
     e9e:	68 2b       	or	r22, r24
     ea0:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     ea2:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ea4:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     ea8:	45 17       	cp	r20, r21
     eaa:	a9 f4       	brne	.+42     	; 0xed6 <Pipe_ConfigurePipe+0x60>
     eac:	04 c0       	rjmp	.+8      	; 0xeb6 <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     eae:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	03 c0       	rjmp	.+6      	; 0xebc <Pipe_ConfigurePipe+0x46>
     eb6:	88 e0       	ldi	r24, 0x08	; 8
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     ebc:	82 17       	cp	r24, r18
     ebe:	93 07       	cpc	r25, r19
     ec0:	10 f4       	brcc	.+4      	; 0xec6 <Pipe_ConfigurePipe+0x50>
     ec2:	75 30       	cpi	r23, 0x05	; 5
     ec4:	a1 f7       	brne	.-24     	; 0xeae <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     ec6:	87 2f       	mov	r24, r23
     ec8:	82 95       	swap	r24
     eca:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     ecc:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     ece:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     ed0:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     ed2:	e0 e0       	ldi	r30, 0x00	; 0
     ed4:	08 c0       	rjmp	.+16     	; 0xee6 <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     ed6:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     eda:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     ede:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     ee2:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     ee6:	81 ff       	sbrs	r24, 1
     ee8:	20 c0       	rjmp	.+64     	; 0xf2a <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     eea:	90 91 a9 00 	lds	r25, 0x00A9
     eee:	9e 7f       	andi	r25, 0xFE	; 254
     ef0:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     ef4:	90 91 ab 00 	lds	r25, 0x00AB
     ef8:	9d 7f       	andi	r25, 0xFD	; 253
     efa:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     efe:	90 91 a9 00 	lds	r25, 0x00A9
     f02:	91 60       	ori	r25, 0x01	; 1
     f04:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     f08:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     f0c:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     f10:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     f14:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     f18:	80 91 a9 00 	lds	r24, 0x00A9
     f1c:	80 62       	ori	r24, 0x20	; 32
     f1e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     f22:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     f26:	87 ff       	sbrs	r24, 7
     f28:	08 c0       	rjmp	.+16     	; 0xf3a <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     f2a:	4f 5f       	subi	r20, 0xFF	; 255
     f2c:	47 30       	cpi	r20, 0x07	; 7
     f2e:	09 f0       	breq	.+2      	; 0xf32 <Pipe_ConfigurePipe+0xbc>
     f30:	b9 cf       	rjmp	.-142    	; 0xea4 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     f32:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	01 c0       	rjmp	.+2      	; 0xf3c <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     f3a:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     f3c:	0f 91       	pop	r16
     f3e:	08 95       	ret

00000f40 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
     f4c:	ec 01       	movw	r28, r24
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     f4e:	ff 24       	eor	r15, r15
     f50:	0d c0       	rjmp	.+26     	; 0xf6c <Pipe_ConfigurePipeTable+0x2c>
	{
		if (!(Table[i].Address))
     f52:	88 81       	ld	r24, Y
     f54:	88 23       	and	r24, r24
     f56:	41 f0       	breq	.+16     	; 0xf68 <Pipe_ConfigurePipeTable+0x28>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     f58:	29 81       	ldd	r18, Y+1	; 0x01
     f5a:	3a 81       	ldd	r19, Y+2	; 0x02
     f5c:	6c 81       	ldd	r22, Y+4	; 0x04
     f5e:	4b 81       	ldd	r20, Y+3	; 0x03
     f60:	0d 81       	ldd	r16, Y+5	; 0x05
     f62:	89 df       	rcall	.-238    	; 0xe76 <Pipe_ConfigurePipe>
     f64:	88 23       	and	r24, r24
     f66:	31 f0       	breq	.+12     	; 0xf74 <Pipe_ConfigurePipeTable+0x34>
     f68:	f3 94       	inc	r15
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     f6a:	26 96       	adiw	r28, 0x06	; 6
     f6c:	f1 16       	cp	r15, r17
     f6e:	89 f7       	brne	.-30     	; 0xf52 <Pipe_ConfigurePipeTable+0x12>
     f70:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}
	
	return true;
     f72:	01 c0       	rjmp	.+2      	; 0xf76 <Pipe_ConfigurePipeTable+0x36>
     f74:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
     f76:	df 91       	pop	r29
		}
	}
	
	return true;
}
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	08 95       	ret

00000f82 <Pipe_ClearPipes>:
     f82:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     f8c:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     f90:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     f94:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     f98:	90 91 a9 00 	lds	r25, 0x00A9
     f9c:	9e 7f       	andi	r25, 0xFE	; 254
     f9e:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     fa2:	8f 5f       	subi	r24, 0xFF	; 255
     fa4:	87 30       	cpi	r24, 0x07	; 7
     fa6:	81 f7       	brne	.-32     	; 0xf88 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     fa8:	08 95       	ret

00000faa <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     faa:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     fae:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     fb2:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     fb4:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     fb8:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     fbc:	27 ff       	sbrs	r18, 7
     fbe:	0c c0       	rjmp	.+24     	; 0xfd8 <Pipe_IsEndpointBound+0x2e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     fc0:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     fc4:	53 2f       	mov	r21, r19
     fc6:	5f 70       	andi	r21, 0x0F	; 15
     fc8:	30 ff       	sbrs	r19, 0
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <Pipe_IsEndpointBound+0x26>
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	01 c0       	rjmp	.+2      	; 0xfd2 <Pipe_IsEndpointBound+0x28>
     fd0:	20 e8       	ldi	r18, 0x80	; 128
     fd2:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     fd4:	28 17       	cp	r18, r24
     fd6:	49 f0       	breq	.+18     	; 0xfea <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     fd8:	9f 5f       	subi	r25, 0xFF	; 255
     fda:	97 30       	cpi	r25, 0x07	; 7
     fdc:	59 f7       	brne	.-42     	; 0xfb4 <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     fde:	84 2f       	mov	r24, r20
     fe0:	8f 70       	andi	r24, 0x0F	; 15
     fe2:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     fea:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     fec:	08 95       	ret

00000fee <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     fee:	20 91 a2 00 	lds	r18, 0x00A2
     ff2:	30 91 a3 00 	lds	r19, 0x00A3
     ff6:	89 e8       	ldi	r24, 0x89	; 137
     ff8:	93 e1       	ldi	r25, 0x13	; 19
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <Pipe_WaitUntilReady+0x10>
     ffc:	9a 01       	movw	r18, r20
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     ffe:	40 91 aa 00 	lds	r20, 0x00AA
    1002:	40 73       	andi	r20, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1004:	40 31       	cpi	r20, 0x10	; 16
    1006:	29 f4       	brne	.+10     	; 0x1012 <Pipe_WaitUntilReady+0x24>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1008:	40 91 a6 00 	lds	r20, 0x00A6
		{
			if (Pipe_IsINReceived())
    100c:	40 ff       	sbrs	r20, 0
    100e:	05 c0       	rjmp	.+10     	; 0x101a <Pipe_WaitUntilReady+0x2c>
    1010:	17 c0       	rjmp	.+46     	; 0x1040 <Pipe_WaitUntilReady+0x52>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1012:	40 91 a6 00 	lds	r20, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    1016:	42 fd       	sbrc	r20, 2
    1018:	13 c0       	rjmp	.+38     	; 0x1040 <Pipe_WaitUntilReady+0x52>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    101a:	40 91 a6 00 	lds	r20, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    101e:	41 fd       	sbrc	r20, 1
    1020:	11 c0       	rjmp	.+34     	; 0x1044 <Pipe_WaitUntilReady+0x56>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    1022:	40 91 49 01 	lds	r20, 0x0149
    1026:	41 30       	cpi	r20, 0x01	; 1
    1028:	79 f0       	breq	.+30     	; 0x1048 <Pipe_WaitUntilReady+0x5a>
    102a:	40 91 a2 00 	lds	r20, 0x00A2
    102e:	50 91 a3 00 	lds	r21, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1032:	42 17       	cp	r20, r18
    1034:	53 07       	cpc	r21, r19
    1036:	19 f3       	breq	.-58     	; 0xffe <Pipe_WaitUntilReady+0x10>
    1038:	01 97       	sbiw	r24, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    103a:	01 f7       	brne	.-64     	; 0xffc <Pipe_WaitUntilReady+0xe>
			  return PIPE_READYWAIT_Timeout;
    103c:	83 e0       	ldi	r24, 0x03	; 3
    103e:	08 95       	ret
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    1048:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
    104a:	08 95       	ret

0000104c <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    104c:	75 d0       	rcall	.+234    	; 0x1138 <USB_INT_DisableAllInterrupts>
    104e:	7c d0       	rcall	.+248    	; 0x1148 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1050:	e0 ee       	ldi	r30, 0xE0	; 224
    1052:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1054:	80 81       	ld	r24, Z
    1056:	81 60       	ori	r24, 0x01	; 1
    1058:	80 83       	st	Z, r24
    105a:	e8 ed       	ldi	r30, 0xD8	; 216
    105c:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    105e:	80 81       	ld	r24, Z
    1060:	8f 77       	andi	r24, 0x7F	; 127
    1062:	80 83       	st	Z, r24
    1064:	19 bc       	out	0x29, r1	; 41
    1066:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1068:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    106a:	8c 91       	ld	r24, X
    106c:	8e 7f       	andi	r24, 0xFE	; 254
    106e:	8c 93       	st	X, r24
    1070:	80 81       	ld	r24, Z
    1072:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1074:	80 83       	st	Z, r24
    1076:	10 92 40 01 	sts	0x0140, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    107a:	08 95       	ret

0000107c <USB_ResetInterface>:
    107c:	5d d0       	rcall	.+186    	; 0x1138 <USB_INT_DisableAllInterrupts>
}
    107e:	64 d0       	rcall	.+200    	; 0x1148 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    1080:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1084:	8f 77       	andi	r24, 0x7F	; 127
    1086:	80 93 d8 00 	sts	0x00D8, r24
    108a:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    108e:	80 68       	ori	r24, 0x80	; 128
    1090:	80 93 d8 00 	sts	0x00D8, r24
    1094:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1098:	8f 7d       	andi	r24, 0xDF	; 223
    109a:	80 93 d8 00 	sts	0x00D8, r24
    109e:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    10a2:	8f 77       	andi	r24, 0x7F	; 127
    10a4:	80 93 d7 00 	sts	0x00D7, r24
    10a8:	8c e0       	ldi	r24, 0x0C	; 12
    10aa:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    10ac:	8e e0       	ldi	r24, 0x0E	; 14
    10ae:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    10b0:	09 b4       	in	r0, 0x29	; 41
    10b2:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    10b4:	fd cf       	rjmp	.-6      	; 0x10b0 <USB_ResetInterface+0x34>
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	80 93 49 01 	sts	0x0149, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    10bc:	10 92 3f 01 	sts	0x013F, r1
	USB_Host_ConfigurationNumber = 0;
    10c0:	80 e4       	ldi	r24, 0x40	; 64
    10c2:	80 93 22 01 	sts	0x0122, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    10c6:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    10ca:	80 64       	ori	r24, 0x40	; 64
    10cc:	80 93 d8 00 	sts	0x00D8, r24
    10d0:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    10d4:	81 60       	ori	r24, 0x01	; 1
    10d6:	80 93 dd 00 	sts	0x00DD, r24
    10da:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    10de:	84 60       	ori	r24, 0x04	; 4
    10e0:	80 93 dd 00 	sts	0x00DD, r24
    10e4:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
    10e8:	8f 7e       	andi	r24, 0xEF	; 239
    10ea:	80 93 d7 00 	sts	0x00D7, r24
    10ee:	6f 9a       	sbi	0x0d, 7	; 13
    10f0:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
    10f2:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    10f6:	81 60       	ori	r24, 0x01	; 1
    10f8:	80 93 de 00 	sts	0x00DE, r24
    10fc:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1100:	84 60       	ori	r24, 0x04	; 4
    1102:	80 93 de 00 	sts	0x00DE, r24
    1106:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    110a:	8e 7f       	andi	r24, 0xFE	; 254
    110c:	80 93 e0 00 	sts	0x00E0, r24
    1110:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1114:	80 61       	ori	r24, 0x10	; 16
    1116:	80 93 d8 00 	sts	0x00D8, r24
    111a:	08 95       	ret

0000111c <USB_Init>:
    111c:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    111e:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1120:	80 81       	ld	r24, Z
    1122:	8f 7e       	andi	r24, 0xEF	; 239
    1124:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1126:	e7 ed       	ldi	r30, 0xD7	; 215
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	81 60       	ori	r24, 0x01	; 1
    112e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	80 93 40 01 	sts	0x0140, r24

	USB_ResetInterface();
    1136:	a2 cf       	rjmp	.-188    	; 0x107c <USB_ResetInterface>

00001138 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1138:	e8 ed       	ldi	r30, 0xD8	; 216
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	8c 7f       	andi	r24, 0xFC	; 252
    1140:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    1142:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    1146:	08 95       	ret

00001148 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1148:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    114c:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    1150:	08 95       	ret

00001152 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1152:	1f 92       	push	r1
    1154:	0f 92       	push	r0
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	0f 92       	push	r0
    115a:	0b b6       	in	r0, 0x3b	; 59
    115c:	0f 92       	push	r0
    115e:	11 24       	eor	r1, r1
    1160:	2f 93       	push	r18
    1162:	3f 93       	push	r19
    1164:	4f 93       	push	r20
    1166:	5f 93       	push	r21
    1168:	6f 93       	push	r22
    116a:	7f 93       	push	r23
    116c:	8f 93       	push	r24
    116e:	9f 93       	push	r25
    1170:	af 93       	push	r26
    1172:	bf 93       	push	r27
    1174:	ef 93       	push	r30
    1176:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1178:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    117c:	85 ff       	sbrs	r24, 5
    117e:	0a c0       	rjmp	.+20     	; 0x1194 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1180:	80 91 a0 00 	lds	r24, 0x00A0
    1184:	85 ff       	sbrs	r24, 5
    1186:	06 c0       	rjmp	.+12     	; 0x1194 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1188:	80 91 9f 00 	lds	r24, 0x009F
    118c:	8f 7d       	andi	r24, 0xDF	; 223
    118e:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    1192:	10 d1       	rcall	.+544    	; 0x13b4 <USB_Event_Stub>
    1194:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    1198:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    119a:	15 c0       	rjmp	.+42     	; 0x11c6 <__vector_10+0x74>
    119c:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    11a0:	81 ff       	sbrs	r24, 1
    11a2:	11 c0       	rjmp	.+34     	; 0x11c6 <__vector_10+0x74>
    11a4:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    11a8:	8d 7f       	andi	r24, 0xFD	; 253
    11aa:	80 93 9f 00 	sts	0x009F, r24
    11ae:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    11b2:	8e 7f       	andi	r24, 0xFE	; 254
    11b4:	80 93 9f 00 	sts	0x009F, r24
    11b8:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    11bc:	8d 7f       	andi	r24, 0xFD	; 253
    11be:	80 93 a0 00 	sts	0x00A0, r24
    11c2:	cd da       	rcall	.-2662   	; 0x75e <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    11c4:	5b df       	rcall	.-330    	; 0x107c <USB_ResetInterface>
    11c6:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
    11ca:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    11cc:	15 c0       	rjmp	.+42     	; 0x11f8 <__vector_10+0xa6>
    11ce:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    11d2:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    11d4:	11 c0       	rjmp	.+34     	; 0x11f8 <__vector_10+0xa6>
    11d6:	80 91 df 00 	lds	r24, 0x00DF
    11da:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    11dc:	80 93 df 00 	sts	0x00DF, r24
    11e0:	77 98       	cbi	0x0e, 7	; 14
    11e2:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    11e6:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    11e8:	80 93 dd 00 	sts	0x00DD, r24
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	78 db       	rcall	.-2320   	; 0x8e0 <EVENT_USB_Host_HostError>
    11f0:	b6 da       	rcall	.-2708   	; 0x75e <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	80 93 49 01 	sts	0x0149, r24
		EVENT_USB_Host_DeviceUnattached();
    11f8:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
    11fc:	80 ff       	sbrs	r24, 0
    11fe:	17 c0       	rjmp	.+46     	; 0x122e <__vector_10+0xdc>
    1200:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1204:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1206:	13 c0       	rjmp	.+38     	; 0x122e <__vector_10+0xdc>
    1208:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    120c:	8e 7f       	andi	r24, 0xFE	; 254
    120e:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1212:	80 91 de 00 	lds	r24, 0x00DE
    1216:	8e 7f       	andi	r24, 0xFE	; 254
    1218:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    121c:	9a da       	rcall	.-2764   	; 0x752 <EVENT_USB_Host_DeviceAttached>
    121e:	80 91 a0 00 	lds	r24, 0x00A0
    1222:	82 60       	ori	r24, 0x02	; 2
    1224:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    1228:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    122a:	80 93 49 01 	sts	0x0149, r24
    122e:	80 91 df 00 	lds	r24, 0x00DF
    1232:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1234:	0e c0       	rjmp	.+28     	; 0x1252 <__vector_10+0x100>
    1236:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    123a:	82 ff       	sbrs	r24, 2
    123c:	0a c0       	rjmp	.+20     	; 0x1252 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    123e:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1242:	8b 7f       	andi	r24, 0xFB	; 251
    1244:	80 93 df 00 	sts	0x00DF, r24
    1248:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	69 db       	rcall	.-2350   	; 0x920 <EVENT_USB_Host_DeviceEnumerationFailed>
    124e:	87 da       	rcall	.-2802   	; 0x75e <EVENT_USB_Host_DeviceUnattached>
    1250:	15 df       	rcall	.-470    	; 0x107c <USB_ResetInterface>
    1252:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1254:	ef 91       	pop	r30
    1256:	bf 91       	pop	r27
    1258:	af 91       	pop	r26
    125a:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
    125c:	8f 91       	pop	r24
    125e:	7f 91       	pop	r23

		USB_ResetInterface();
    1260:	6f 91       	pop	r22
    1262:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1264:	4f 91       	pop	r20
    1266:	3f 91       	pop	r19
    1268:	2f 91       	pop	r18
    126a:	0f 90       	pop	r0
    126c:	0b be       	out	0x3b, r0	; 59
    126e:	0f 90       	pop	r0
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	0f 90       	pop	r0
    1274:	1f 90       	pop	r1
    1276:	18 95       	reti

00001278 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1278:	cf 92       	push	r12
    127a:	df 92       	push	r13
    127c:	ef 92       	push	r14
    127e:	ff 92       	push	r15
    1280:	0f 93       	push	r16
    1282:	1f 93       	push	r17
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	29 97       	sbiw	r28, 0x09	; 9
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	6b 01       	movw	r12, r22
    129a:	8a 01       	movw	r16, r20
    129c:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    129e:	90 e8       	ldi	r25, 0x80	; 128
    12a0:	90 93 41 01 	sts	0x0141, r25
    12a4:	96 e0       	ldi	r25, 0x06	; 6
    12a6:	90 93 42 01 	sts	0x0142, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    12b0:	90 93 44 01 	sts	0x0144, r25
    12b4:	80 93 43 01 	sts	0x0143, r24
    12b8:	10 92 46 01 	sts	0x0146, r1
    12bc:	10 92 45 01 	sts	0x0145, r1
    12c0:	89 e0       	ldi	r24, 0x09	; 9
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	90 93 48 01 	sts	0x0148, r25
    12c8:	80 93 47 01 	sts	0x0147, r24
    12cc:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    12d0:	ce 01       	movw	r24, r28
    12d2:	01 96       	adiw	r24, 0x01	; 1
    12d4:	98 d0       	rcall	.+304    	; 0x1406 <USB_Host_SendControlRequest>
    12d6:	88 23       	and	r24, r24
    12d8:	b9 f4       	brne	.+46     	; 0x1308 <USB_Host_GetDeviceConfigDescriptor+0x90>
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	f6 01       	movw	r30, r12
    12e0:	91 83       	std	Z+1, r25	; 0x01
    12e2:	80 83       	st	Z, r24
    12e4:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
    12e6:	f9 06       	cpc	r15, r25
    12e8:	70 f0       	brcs	.+28     	; 0x1306 <USB_Host_GetDeviceConfigDescriptor+0x8e>
    12ea:	90 93 48 01 	sts	0x0148, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    12ee:	80 93 47 01 	sts	0x0147, r24
    12f2:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    12f4:	88 d0       	rcall	.+272    	; 0x1406 <USB_Host_SendControlRequest>
    12f6:	88 23       	and	r24, r24
    12f8:	39 f4       	brne	.+14     	; 0x1308 <USB_Host_GetDeviceConfigDescriptor+0x90>
    12fa:	f8 01       	movw	r30, r16
    12fc:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    12fe:	92 30       	cpi	r25, 0x02	; 2
    1300:	19 f0       	breq	.+6      	; 0x1308 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1302:	86 e0       	ldi	r24, 0x06	; 6
    1304:	01 c0       	rjmp	.+2      	; 0x1308 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    1306:	85 e0       	ldi	r24, 0x05	; 5
    1308:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    130a:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	1f 91       	pop	r17
    131a:	0f 91       	pop	r16
    131c:	ff 90       	pop	r15
    131e:	ef 90       	pop	r14
    1320:	df 90       	pop	r13
    1322:	cf 90       	pop	r12
    1324:	08 95       	ret

00001326 <USB_GetNextDescriptorComp>:
    1326:	af 92       	push	r10
    1328:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    132a:	cf 92       	push	r12
    132c:	df 92       	push	r13
    132e:	ef 92       	push	r14
    1330:	ff 92       	push	r15
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	7c 01       	movw	r14, r24
    133c:	8b 01       	movw	r16, r22
    133e:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1340:	28 c0       	rjmp	.+80     	; 0x1392 <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1342:	f8 01       	movw	r30, r16
    1344:	c0 80       	ld	r12, Z
    1346:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1348:	f6 01       	movw	r30, r12
    134a:	80 81       	ld	r24, Z
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	9e 01       	movw	r18, r28
    1350:	8c 17       	cp	r24, r28
    1352:	9d 07       	cpc	r25, r29
    1354:	08 f4       	brcc	.+2      	; 0x1358 <USB_GetNextDescriptorComp+0x32>
    1356:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1358:	c6 01       	movw	r24, r12
    135a:	82 0f       	add	r24, r18
    135c:	93 1f       	adc	r25, r19
    135e:	f8 01       	movw	r30, r16
    1360:	91 83       	std	Z+1, r25	; 0x01
    1362:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
    1364:	f7 01       	movw	r30, r14
    1366:	80 81       	ld	r24, Z
    1368:	91 81       	ldd	r25, Z+1	; 0x01
    136a:	82 1b       	sub	r24, r18
    136c:	93 0b       	sbc	r25, r19
    136e:	91 83       	std	Z+1, r25	; 0x01
    1370:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1372:	f8 01       	movw	r30, r16
    1374:	80 81       	ld	r24, Z
    1376:	91 81       	ldd	r25, Z+1	; 0x01
    1378:	f5 01       	movw	r30, r10
    137a:	09 95       	icall
    137c:	82 30       	cpi	r24, 0x02	; 2
    137e:	49 f0       	breq	.+18     	; 0x1392 <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	69 f4       	brne	.+26     	; 0x139e <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
    1384:	f8 01       	movw	r30, r16
    1386:	d1 82       	std	Z+1, r13	; 0x01
    1388:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
    138a:	f7 01       	movw	r30, r14
    138c:	d1 83       	std	Z+1, r29	; 0x01
    138e:	c0 83       	st	Z, r28
    1390:	06 c0       	rjmp	.+12     	; 0x139e <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1392:	f7 01       	movw	r30, r14
    1394:	c0 81       	ld	r28, Z
    1396:	d1 81       	ldd	r29, Z+1	; 0x01
    1398:	20 97       	sbiw	r28, 0x00	; 0
    139a:	99 f6       	brne	.-90     	; 0x1342 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    139c:	82 e0       	ldi	r24, 0x02	; 2
}
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	ff 90       	pop	r15
    13a8:	ef 90       	pop	r14
    13aa:	df 90       	pop	r13
    13ac:	cf 90       	pop	r12
    13ae:	bf 90       	pop	r11
    13b0:	af 90       	pop	r10
    13b2:	08 95       	ret

000013b4 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    13b4:	08 95       	ret

000013b6 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    13be:	c9 ee       	ldi	r28, 0xE9	; 233
    13c0:	d3 e0       	ldi	r29, 0x03	; 3
    13c2:	06 c0       	rjmp	.+12     	; 0x13d0 <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	2b db       	rcall	.-2474   	; 0xa1e <USB_Host_WaitMS>
    13c8:	88 23       	and	r24, r24
    13ca:	c9 f4       	brne	.+50     	; 0x13fe <USB_Host_WaitForIOS+0x48>
    13cc:	21 97       	sbiw	r28, 0x01	; 1
    13ce:	b1 f0       	breq	.+44     	; 0x13fc <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    13d0:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    13d2:	29 f4       	brne	.+10     	; 0x13de <USB_Host_WaitForIOS+0x28>
    13d4:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    13d8:	83 ff       	sbrs	r24, 3
    13da:	f4 cf       	rjmp	.-24     	; 0x13c4 <USB_Host_WaitForIOS+0xe>
    13dc:	0d c0       	rjmp	.+26     	; 0x13f8 <USB_Host_WaitForIOS+0x42>
    13de:	11 30       	cpi	r17, 0x01	; 1
    13e0:	29 f4       	brne	.+10     	; 0x13ec <USB_Host_WaitForIOS+0x36>
    13e2:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    13e6:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    13e8:	ed cf       	rjmp	.-38     	; 0x13c4 <USB_Host_WaitForIOS+0xe>
    13ea:	06 c0       	rjmp	.+12     	; 0x13f8 <USB_Host_WaitForIOS+0x42>
    13ec:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    13ee:	51 f7       	brne	.-44     	; 0x13c4 <USB_Host_WaitForIOS+0xe>
    13f0:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    13f4:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    13f6:	e6 cf       	rjmp	.-52     	; 0x13c4 <USB_Host_WaitForIOS+0xe>
    13f8:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    13fa:	01 c0       	rjmp	.+2      	; 0x13fe <USB_Host_WaitForIOS+0x48>
    13fc:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    13fe:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
    1400:	cf 91       	pop	r28
    1402:	1f 91       	pop	r17
    1404:	08 95       	ret

00001406 <USB_Host_SendControlRequest>:
    1406:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1408:	ff 92       	push	r15
    140a:	0f 93       	push	r16
    140c:	1f 93       	push	r17
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1414:	e0 90 9e 00 	lds	r14, 0x009E
    1418:	ff 24       	eor	r15, r15
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	e8 22       	and	r14, r24
    141e:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1420:	00 91 47 01 	lds	r16, 0x0147
    1424:	10 91 48 01 	lds	r17, 0x0148
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1428:	80 91 9e 00 	lds	r24, 0x009E
    142c:	81 60       	ori	r24, 0x01	; 1
    142e:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	f4 da       	rcall	.-2584   	; 0xa1e <USB_Host_WaitMS>
    1436:	88 23       	and	r24, r24
    1438:	09 f0       	breq	.+2      	; 0x143c <USB_Host_SendControlRequest+0x36>
    143a:	ca c0       	rjmp	.+404    	; 0x15d0 <USB_Host_SendControlRequest+0x1ca>
    143c:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1440:	8f 7c       	andi	r24, 0xCF	; 207
    1442:	80 93 aa 00 	sts	0x00AA, r24
    1446:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    144a:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    144e:	8f 7e       	andi	r24, 0xEF	; 239
    1450:	80 93 a6 00 	sts	0x00A6, r24
    1454:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1458:	8f 7b       	andi	r24, 0xBF	; 191
    145a:	80 93 a9 00 	sts	0x00A9, r24
    145e:	88 e0       	ldi	r24, 0x08	; 8
    1460:	e1 e4       	ldi	r30, 0x41	; 65
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1462:	f1 e0       	ldi	r31, 0x01	; 1
    1464:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1466:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    146a:	81 50       	subi	r24, 0x01	; 1
    146c:	d9 f7       	brne	.-10     	; 0x1464 <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    146e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1472:	87 77       	andi	r24, 0x77	; 119
    1474:	80 93 a6 00 	sts	0x00A6, r24
    1478:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    147a:	9d df       	rcall	.-198    	; 0x13b6 <USB_Host_WaitForIOS>
    147c:	88 23       	and	r24, r24
    147e:	09 f0       	breq	.+2      	; 0x1482 <USB_Host_SendControlRequest+0x7c>
    1480:	a7 c0       	rjmp	.+334    	; 0x15d0 <USB_Host_SendControlRequest+0x1ca>
    1482:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1486:	80 64       	ori	r24, 0x40	; 64
    1488:	80 93 a9 00 	sts	0x00A9, r24
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	c7 da       	rcall	.-2674   	; 0xa1e <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1490:	88 23       	and	r24, r24
    1492:	09 f0       	breq	.+2      	; 0x1496 <USB_Host_SendControlRequest+0x90>
    1494:	9d c0       	rjmp	.+314    	; 0x15d0 <USB_Host_SendControlRequest+0x1ca>
    1496:	80 91 41 01 	lds	r24, 0x0141
    149a:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    149c:	4f c0       	rjmp	.+158    	; 0x153c <USB_Host_SendControlRequest+0x136>
    149e:	80 91 aa 00 	lds	r24, 0x00AA
    14a2:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    14a4:	80 61       	ori	r24, 0x10	; 16
    14a6:	80 93 aa 00 	sts	0x00AA, r24
    14aa:	20 97       	sbiw	r28, 0x00	; 0
    14ac:	61 f5       	brne	.+88     	; 0x1506 <USB_Host_SendControlRequest+0x100>
    14ae:	2e c0       	rjmp	.+92     	; 0x150c <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    14b0:	80 91 a9 00 	lds	r24, 0x00A9
    14b4:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    14b6:	80 93 a9 00 	sts	0x00A9, r24
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	7c df       	rcall	.-264    	; 0x13b6 <USB_Host_WaitForIOS>
    14be:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <USB_Host_SendControlRequest+0xbe>
    14c2:	86 c0       	rjmp	.+268    	; 0x15d0 <USB_Host_SendControlRequest+0x1ca>
    14c4:	80 91 f6 00 	lds	r24, 0x00F6
    14c8:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	41 f4       	brne	.+16     	; 0x14e0 <USB_Host_SendControlRequest+0xda>
    14d0:	00 e0       	ldi	r16, 0x00	; 0
    14d2:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    14d4:	05 c0       	rjmp	.+10     	; 0x14e0 <USB_Host_SendControlRequest+0xda>
    14d6:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
    14da:	89 93       	st	Y+, r24
    14dc:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    14de:	10 40       	sbci	r17, 0x00	; 0
    14e0:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
    14e4:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	19 f0       	breq	.+6      	; 0x14f2 <USB_Host_SendControlRequest+0xec>
    14ec:	01 15       	cp	r16, r1
    14ee:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    14f0:	91 f7       	brne	.-28     	; 0x14d6 <USB_Host_SendControlRequest+0xd0>
    14f2:	80 91 a9 00 	lds	r24, 0x00A9
    14f6:	80 64       	ori	r24, 0x40	; 64
    14f8:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    14fc:	80 91 a6 00 	lds	r24, 0x00A6
    1500:	8e 77       	andi	r24, 0x7E	; 126
    1502:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1506:	01 15       	cp	r16, r1
    1508:	11 05       	cpc	r17, r1
    150a:	91 f6       	brne	.-92     	; 0x14b0 <USB_Host_SendControlRequest+0xaa>
    150c:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1510:	8f 7c       	andi	r24, 0xCF	; 207
    1512:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1514:	80 93 aa 00 	sts	0x00AA, r24
    1518:	80 91 a9 00 	lds	r24, 0x00A9
    151c:	8f 7b       	andi	r24, 0xBF	; 191
    151e:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1522:	82 e0       	ldi	r24, 0x02	; 2
    1524:	48 df       	rcall	.-368    	; 0x13b6 <USB_Host_WaitForIOS>
    1526:	88 23       	and	r24, r24
    1528:	09 f0       	breq	.+2      	; 0x152c <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    152a:	52 c0       	rjmp	.+164    	; 0x15d0 <USB_Host_SendControlRequest+0x1ca>
    152c:	80 91 a6 00 	lds	r24, 0x00A6
    1530:	8b 77       	andi	r24, 0x7B	; 123
    1532:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1536:	82 e0       	ldi	r24, 0x02	; 2
    1538:	3e df       	rcall	.-388    	; 0x13b6 <USB_Host_WaitForIOS>
    153a:	4a c0       	rjmp	.+148    	; 0x15d0 <USB_Host_SendControlRequest+0x1ca>
    153c:	20 97       	sbiw	r28, 0x00	; 0
    153e:	a1 f1       	breq	.+104    	; 0x15a8 <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1540:	80 91 aa 00 	lds	r24, 0x00AA
    1544:	8f 7c       	andi	r24, 0xCF	; 207
    1546:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1548:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    154c:	80 91 a9 00 	lds	r24, 0x00A9
    1550:	8f 7b       	andi	r24, 0xBF	; 191
    1552:	80 93 a9 00 	sts	0x00A9, r24
    1556:	1c c0       	rjmp	.+56     	; 0x1590 <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1558:	2e df       	rcall	.-420    	; 0x13b6 <USB_Host_WaitForIOS>
    155a:	88 23       	and	r24, r24
    155c:	c9 f5       	brne	.+114    	; 0x15d0 <USB_Host_SendControlRequest+0x1ca>
    155e:	fe 01       	movw	r30, r28
    1560:	07 c0       	rjmp	.+14     	; 0x1570 <USB_Host_SendControlRequest+0x16a>
    1562:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1564:	ef 01       	movw	r28, r30
    1566:	80 93 af 00 	sts	0x00AF, r24
    156a:	01 50       	subi	r16, 0x01	; 1
    156c:	10 40       	sbci	r17, 0x00	; 0
    156e:	59 f0       	breq	.+22     	; 0x1586 <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1570:	ef 01       	movw	r28, r30
    1572:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1576:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    157a:	80 91 22 01 	lds	r24, 0x0122
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    157e:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1580:	28 17       	cp	r18, r24
    1582:	39 07       	cpc	r19, r25
    1584:	70 f3       	brcs	.-36     	; 0x1562 <USB_Host_SendControlRequest+0x15c>
    1586:	80 91 a6 00 	lds	r24, 0x00A6
    158a:	8b 77       	andi	r24, 0x7B	; 123
    158c:	80 93 a6 00 	sts	0x00A6, r24
    1590:	82 e0       	ldi	r24, 0x02	; 2
    1592:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1594:	11 05       	cpc	r17, r1
    1596:	01 f7       	brne	.-64     	; 0x1558 <USB_Host_SendControlRequest+0x152>
    1598:	0e df       	rcall	.-484    	; 0x13b6 <USB_Host_WaitForIOS>
    159a:	88 23       	and	r24, r24
    159c:	c9 f4       	brne	.+50     	; 0x15d0 <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    159e:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    15a2:	80 64       	ori	r24, 0x40	; 64
    15a4:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    15a8:	80 91 aa 00 	lds	r24, 0x00AA
    15ac:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    15ae:	80 61       	ori	r24, 0x10	; 16
    15b0:	80 93 aa 00 	sts	0x00AA, r24
    15b4:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    15b8:	8f 7b       	andi	r24, 0xBF	; 191
    15ba:	80 93 a9 00 	sts	0x00A9, r24
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	fa de       	rcall	.-524    	; 0x13b6 <USB_Host_WaitForIOS>
    15c2:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    15c4:	29 f4       	brne	.+10     	; 0x15d0 <USB_Host_SendControlRequest+0x1ca>
    15c6:	90 91 a6 00 	lds	r25, 0x00A6
    15ca:	9e 77       	andi	r25, 0x7E	; 126
    15cc:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    15d0:	90 91 a9 00 	lds	r25, 0x00A9
    15d4:	90 64       	ori	r25, 0x40	; 64
    15d6:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    15da:	e1 14       	cp	r14, r1
    15dc:	f1 04       	cpc	r15, r1
    15de:	29 f4       	brne	.+10     	; 0x15ea <USB_Host_SendControlRequest+0x1e4>
    15e0:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    15e4:	9e 7f       	andi	r25, 0xFE	; 254
    15e6:	90 93 9e 00 	sts	0x009E, r25
    15ea:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    15ec:	90 93 a8 00 	sts	0x00A8, r25
    15f0:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	1f 91       	pop	r17
    15fa:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    15fc:	ff 90       	pop	r15
    15fe:	ef 90       	pop	r14
    1600:	08 95       	ret

00001602 <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    1602:	cf 93       	push	r28
    1604:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1606:	10 92 41 01 	sts	0x0141, r1
    160a:	89 e0       	ldi	r24, 0x09	; 9
    160c:	80 93 42 01 	sts	0x0142, r24
    1610:	c0 93 43 01 	sts	0x0143, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1614:	10 92 44 01 	sts	0x0144, r1
    1618:	10 92 46 01 	sts	0x0146, r1
    161c:	10 92 45 01 	sts	0x0145, r1
    1620:	10 92 48 01 	sts	0x0148, r1
    1624:	10 92 47 01 	sts	0x0147, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1628:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	ea de       	rcall	.-556    	; 0x1406 <USB_Host_SendControlRequest>
    1632:	88 23       	and	r24, r24
    1634:	49 f4       	brne	.+18     	; 0x1648 <USB_Host_SetDeviceConfiguration+0x46>
    1636:	c0 93 3f 01 	sts	0x013F, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    163a:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    163c:	11 f0       	breq	.+4      	; 0x1642 <USB_Host_SetDeviceConfiguration+0x40>
    163e:	9b e0       	ldi	r25, 0x0B	; 11
    1640:	01 c0       	rjmp	.+2      	; 0x1644 <USB_Host_SetDeviceConfiguration+0x42>
    1642:	9a e0       	ldi	r25, 0x0A	; 10
    1644:	90 93 49 01 	sts	0x0149, r25
    1648:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    164a:	08 95       	ret

0000164c <USB_Host_ClearEndpointStall>:
    164c:	92 e0       	ldi	r25, 0x02	; 2
	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    164e:	90 93 41 01 	sts	0x0141, r25
    1652:	91 e0       	ldi	r25, 0x01	; 1
    1654:	90 93 42 01 	sts	0x0142, r25
    1658:	10 92 44 01 	sts	0x0144, r1
    165c:	10 92 43 01 	sts	0x0143, r1
    1660:	80 93 45 01 	sts	0x0145, r24
    1664:	10 92 46 01 	sts	0x0146, r1
    1668:	10 92 48 01 	sts	0x0148, r1
    166c:	10 92 47 01 	sts	0x0147, r1
    1670:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	c6 ce       	rjmp	.-628    	; 0x1406 <USB_Host_SendControlRequest>

0000167a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    167a:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    167c:	c0 91 a7 00 	lds	r28, 0x00A7
    1680:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1682:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1686:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    168a:	1e da       	rcall	.-3012   	; 0xac8 <USB_Host_ProcessNextHostState>
    168c:	c0 93 a7 00 	sts	0x00A7, r28
    1690:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1692:	08 95       	ret

00001694 <DCOMP_MS_Host_NextMSInterface>:

	return MS_ENUMERROR_NoError;
}

static uint8_t DCOMP_MS_Host_NextMSInterface(void* const CurrentDescriptor)
{
    1694:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1696:	81 81       	ldd	r24, Z+1	; 0x01
    1698:	84 30       	cpi	r24, 0x04	; 4
    169a:	49 f4       	brne	.+18     	; 0x16ae <DCOMP_MS_Host_NextMSInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == MS_CSCP_MassStorageClass)        &&
    169c:	85 81       	ldd	r24, Z+5	; 0x05
    169e:	88 30       	cpi	r24, 0x08	; 8
    16a0:	31 f4       	brne	.+12     	; 0x16ae <DCOMP_MS_Host_NextMSInterface+0x1a>
    16a2:	86 81       	ldd	r24, Z+6	; 0x06
    16a4:	86 30       	cpi	r24, 0x06	; 6
    16a6:	19 f4       	brne	.+6      	; 0x16ae <DCOMP_MS_Host_NextMSInterface+0x1a>
		    (Interface->SubClass == MS_CSCP_SCSITransparentSubclass) &&
    16a8:	87 81       	ldd	r24, Z+7	; 0x07
    16aa:	80 35       	cpi	r24, 0x50	; 80
    16ac:	11 f0       	breq	.+4      	; 0x16b2 <DCOMP_MS_Host_NextMSInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    16ae:	82 e0       	ldi	r24, 0x02	; 2
    16b0:	08 95       	ret

		if ((Interface->Class    == MS_CSCP_MassStorageClass)        &&
		    (Interface->SubClass == MS_CSCP_SCSITransparentSubclass) &&
		    (Interface->Protocol == MS_CSCP_BulkOnlyTransportProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    16b2:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    16b4:	08 95       	ret

000016b6 <MS_Host_WaitForDataReceived>:
	MS_CommandStatusWrapper_t SCSIStatusBlock;
	return MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSIStatusBlock);
}

static uint8_t MS_Host_WaitForDataReceived(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo)
{
    16b6:	fc 01       	movw	r30, r24
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    16b8:	40 91 a2 00 	lds	r20, 0x00A2
    16bc:	50 91 a3 00 	lds	r21, 0x00A3
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    16c0:	80 81       	ld	r24, Z
    16c2:	8f 70       	andi	r24, 0x0F	; 15
    16c4:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    16c8:	80 91 a9 00 	lds	r24, 0x00A9
    16cc:	8f 7b       	andi	r24, 0xBF	; 191
    16ce:	80 93 a9 00 	sts	0x00A9, r24
	uint16_t TimeoutMSRem        = MS_COMMAND_DATA_TIMEOUT_MS;
    16d2:	20 e1       	ldi	r18, 0x10	; 16
    16d4:	37 e2       	ldi	r19, 0x27	; 39
    16d6:	43 c0       	rjmp	.+134    	; 0x175e <MS_Host_WaitForDataReceived+0xa8>
    16d8:	80 91 a2 00 	lds	r24, 0x00A2
    16dc:	90 91 a3 00 	lds	r25, 0x00A3

	while (!(Pipe_IsINReceived()))
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    16e0:	84 17       	cp	r24, r20
    16e2:	95 07       	cpc	r25, r21
    16e4:	39 f0       	breq	.+14     	; 0x16f4 <MS_Host_WaitForDataReceived+0x3e>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    16e6:	21 15       	cp	r18, r1
    16e8:	31 05       	cpc	r19, r1
    16ea:	09 f4       	brne	.+2      	; 0x16ee <MS_Host_WaitForDataReceived+0x38>
    16ec:	50 c0       	rjmp	.+160    	; 0x178e <MS_Host_WaitForDataReceived+0xd8>
    16ee:	21 50       	subi	r18, 0x01	; 1
    16f0:	30 40       	sbci	r19, 0x00	; 0
    16f2:	ac 01       	movw	r20, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    16f4:	80 91 a9 00 	lds	r24, 0x00A9
    16f8:	80 64       	ori	r24, 0x40	; 64
    16fa:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    16fe:	86 81       	ldd	r24, Z+6	; 0x06
    1700:	8f 70       	andi	r24, 0x0F	; 15
    1702:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1706:	80 91 a9 00 	lds	r24, 0x00A9
    170a:	8f 7b       	andi	r24, 0xBF	; 191
    170c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1710:	80 91 a6 00 	lds	r24, 0x00A6

		Pipe_Freeze();
		Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipe.Address);
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    1714:	81 fd       	sbrc	r24, 1
    1716:	12 c0       	rjmp	.+36     	; 0x173c <MS_Host_WaitForDataReceived+0x86>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1718:	80 91 a9 00 	lds	r24, 0x00A9
    171c:	80 64       	ori	r24, 0x40	; 64
    171e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1722:	80 81       	ld	r24, Z
    1724:	8f 70       	andi	r24, 0x0F	; 15
    1726:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    172a:	80 91 a9 00 	lds	r24, 0x00A9
    172e:	8f 7b       	andi	r24, 0xBF	; 191
    1730:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1734:	80 91 a6 00 	lds	r24, 0x00A6

		Pipe_Freeze();
		Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipe.Address);
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    1738:	81 ff       	sbrs	r24, 1
    173a:	0d c0       	rjmp	.+26     	; 0x1756 <MS_Host_WaitForDataReceived+0xa0>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    173c:	90 91 aa 00 	lds	r25, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
    1740:	29 2f       	mov	r18, r25
    1742:	2f 70       	andi	r18, 0x0F	; 15
    1744:	90 ff       	sbrs	r25, 0
    1746:	02 c0       	rjmp	.+4      	; 0x174c <MS_Host_WaitForDataReceived+0x96>
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	01 c0       	rjmp	.+2      	; 0x174e <MS_Host_WaitForDataReceived+0x98>
    174c:	80 e8       	ldi	r24, 0x80	; 128
		{
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
    174e:	82 2b       	or	r24, r18
    1750:	7d df       	rcall	.-262    	; 0x164c <USB_Host_ClearEndpointStall>
    1752:	81 e0       	ldi	r24, 0x01	; 1
			return PIPE_RWSTREAM_PipeStalled;
    1754:	08 95       	ret
    1756:	80 91 49 01 	lds	r24, 0x0149
		}

		if (USB_HostState == HOST_STATE_Unattached)
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	d1 f0       	breq	.+52     	; 0x1792 <MS_Host_WaitForDataReceived+0xdc>
    175e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1762:	80 ff       	sbrs	r24, 0
	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	while (!(Pipe_IsINReceived()))
    1764:	b9 cf       	rjmp	.-142    	; 0x16d8 <MS_Host_WaitForDataReceived+0x22>
    1766:	80 81       	ld	r24, Z
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1768:	8f 70       	andi	r24, 0x0F	; 15
    176a:	80 93 a7 00 	sts	0x00A7, r24
    176e:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1772:	80 64       	ori	r24, 0x40	; 64
    1774:	80 93 a9 00 	sts	0x00A9, r24
    1778:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    177a:	8f 70       	andi	r24, 0x0F	; 15
    177c:	80 93 a7 00 	sts	0x00A7, r24
    1780:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1784:	80 64       	ori	r24, 0x40	; 64
    1786:	80 93 a9 00 	sts	0x00A9, r24
    178a:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_Freeze();

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    178c:	08 95       	ret
    178e:	83 e0       	ldi	r24, 0x03	; 3
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_RWSTREAM_Timeout;
    1790:	08 95       	ret
    1792:	82 e0       	ldi	r24, 0x02	; 2
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
			return PIPE_RWSTREAM_PipeStalled;
		}

		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
    1794:	08 95       	ret

00001796 <MS_Host_SendCommand>:

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    1796:	cf 92       	push	r12
}

static uint8_t MS_Host_SendCommand(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                   MS_CommandBlockWrapper_t* const SCSICommandBlock,
                                   const void* const BufferPtr)
{
    1798:	df 92       	push	r13
    179a:	ef 92       	push	r14
    179c:	ff 92       	push	r15
    179e:	0f 93       	push	r16
    17a0:	1f 93       	push	r17
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	2f 97       	sbiw	r28, 0x0f	; 15
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	cd bf       	out	0x3d, r28	; 61
    17b6:	8c 01       	movw	r16, r24
    17b8:	7b 01       	movw	r14, r22
    17ba:	6a 01       	movw	r12, r20
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	if (++MSInterfaceInfo->State.TransactionTag == 0xFFFFFFFF)
    17bc:	fc 01       	movw	r30, r24
    17be:	86 85       	ldd	r24, Z+14	; 0x0e
    17c0:	97 85       	ldd	r25, Z+15	; 0x0f
    17c2:	a0 89       	ldd	r26, Z+16	; 0x10
    17c4:	b1 89       	ldd	r27, Z+17	; 0x11
    17c6:	01 96       	adiw	r24, 0x01	; 1
    17c8:	a1 1d       	adc	r26, r1
    17ca:	b1 1d       	adc	r27, r1
    17cc:	86 87       	std	Z+14, r24	; 0x0e
    17ce:	97 87       	std	Z+15, r25	; 0x0f
    17d0:	a0 8b       	std	Z+16, r26	; 0x10
    17d2:	b1 8b       	std	Z+17, r27	; 0x11
    17d4:	8f 3f       	cpi	r24, 0xFF	; 255
    17d6:	ff ef       	ldi	r31, 0xFF	; 255
    17d8:	9f 07       	cpc	r25, r31
    17da:	ff ef       	ldi	r31, 0xFF	; 255
    17dc:	af 07       	cpc	r26, r31
    17de:	ff ef       	ldi	r31, 0xFF	; 255
    17e0:	bf 07       	cpc	r27, r31
    17e2:	49 f4       	brne	.+18     	; 0x17f6 <MS_Host_SendCommand+0x60>
	  MSInterfaceInfo->State.TransactionTag = 1;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	a0 e0       	ldi	r26, 0x00	; 0
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	f8 01       	movw	r30, r16
    17ee:	86 87       	std	Z+14, r24	; 0x0e
    17f0:	97 87       	std	Z+15, r25	; 0x0f
    17f2:	a0 8b       	std	Z+16, r26	; 0x10
    17f4:	b1 8b       	std	Z+17, r27	; 0x11

	SCSICommandBlock->Signature = CPU_TO_LE32(MS_CBW_SIGNATURE);
    17f6:	85 e5       	ldi	r24, 0x55	; 85
    17f8:	93 e5       	ldi	r25, 0x53	; 83
    17fa:	a2 e4       	ldi	r26, 0x42	; 66
    17fc:	b3 e4       	ldi	r27, 0x43	; 67
    17fe:	f7 01       	movw	r30, r14
    1800:	80 83       	st	Z, r24
    1802:	91 83       	std	Z+1, r25	; 0x01
    1804:	a2 83       	std	Z+2, r26	; 0x02
    1806:	b3 83       	std	Z+3, r27	; 0x03
	SCSICommandBlock->Tag       = cpu_to_le32(MSInterfaceInfo->State.TransactionTag);
    1808:	f8 01       	movw	r30, r16
    180a:	86 85       	ldd	r24, Z+14	; 0x0e
    180c:	97 85       	ldd	r25, Z+15	; 0x0f
    180e:	a0 89       	ldd	r26, Z+16	; 0x10
    1810:	b1 89       	ldd	r27, Z+17	; 0x11
    1812:	f7 01       	movw	r30, r14
    1814:	84 83       	std	Z+4, r24	; 0x04
    1816:	95 83       	std	Z+5, r25	; 0x05
    1818:	a6 83       	std	Z+6, r26	; 0x06
    181a:	b7 83       	std	Z+7, r27	; 0x07
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    181c:	f8 01       	movw	r30, r16
    181e:	86 81       	ldd	r24, Z+6	; 0x06
    1820:	8f 70       	andi	r24, 0x0F	; 15
    1822:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1826:	80 91 a9 00 	lds	r24, 0x00A9
    182a:	8f 7b       	andi	r24, 0xBF	; 191
    182c:	80 93 a9 00 	sts	0x00A9, r24

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(SCSICommandBlock, sizeof(MS_CommandBlockWrapper_t),
    1830:	c7 01       	movw	r24, r14
    1832:	6f e1       	ldi	r22, 0x1F	; 31
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	40 e0       	ldi	r20, 0x00	; 0
    1838:	50 e0       	ldi	r21, 0x00	; 0
    183a:	6f da       	rcall	.-2850   	; 0xd1a <Pipe_Write_Stream_LE>
    183c:	88 23       	and	r24, r24
    183e:	09 f0       	breq	.+2      	; 0x1842 <MS_Host_SendCommand+0xac>
    1840:	8b c0       	rjmp	.+278    	; 0x1958 <MS_Host_SendCommand+0x1c2>
    1842:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1846:	8b 77       	andi	r24, 0x7B	; 123
    1848:	80 93 a6 00 	sts	0x00A6, r24
    184c:	d0 db       	rcall	.-2144   	; 0xfee <Pipe_WaitUntilReady>
	{
		return ErrorCode;
	}

	Pipe_ClearOUT();
	Pipe_WaitUntilReady();
    184e:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1852:	80 64       	ori	r24, 0x40	; 64
    1854:	80 93 a9 00 	sts	0x00A9, r24
    1858:	c1 14       	cp	r12, r1
    185a:	d1 04       	cpc	r13, r1

	Pipe_Freeze();

	if (BufferPtr != NULL)
    185c:	09 f4       	brne	.+2      	; 0x1860 <MS_Host_SendCommand+0xca>
    185e:	58 c0       	rjmp	.+176    	; 0x1910 <MS_Host_SendCommand+0x17a>
    1860:	f7 01       	movw	r30, r14
    1862:	60 85       	ldd	r22, Z+8	; 0x08
static uint8_t MS_Host_SendReceiveData(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                       MS_CommandBlockWrapper_t* const SCSICommandBlock,
                                       void* BufferPtr)
{
	uint8_t  ErrorCode = PIPE_RWSTREAM_NoError;
	uint16_t BytesRem  = le32_to_cpu(SCSICommandBlock->DataTransferLength);
    1864:	71 85       	ldd	r23, Z+9	; 0x09
    1866:	84 85       	ldd	r24, Z+12	; 0x0c
    1868:	87 ff       	sbrs	r24, 7

	if (SCSICommandBlock->Flags & MS_COMMAND_DIR_DATA_IN)
    186a:	24 c0       	rjmp	.+72     	; 0x18b4 <MS_Host_SendCommand+0x11e>
    186c:	c8 01       	movw	r24, r16
    186e:	6e 87       	std	Y+14, r22	; 0x0e
	{
		if ((ErrorCode = MS_Host_WaitForDataReceived(MSInterfaceInfo)) != PIPE_RWSTREAM_NoError)
    1870:	7f 87       	std	Y+15, r23	; 0x0f
    1872:	21 df       	rcall	.-446    	; 0x16b6 <MS_Host_WaitForDataReceived>
    1874:	6e 85       	ldd	r22, Y+14	; 0x0e
    1876:	7f 85       	ldd	r23, Y+15	; 0x0f
    1878:	88 23       	and	r24, r24
    187a:	31 f0       	breq	.+12     	; 0x1888 <MS_Host_SendCommand+0xf2>
    187c:	90 91 a9 00 	lds	r25, 0x00A9
    1880:	90 64       	ori	r25, 0x40	; 64
    1882:	90 93 a9 00 	sts	0x00A9, r25
    1886:	3a c0       	rjmp	.+116    	; 0x18fc <MS_Host_SendCommand+0x166>
    1888:	f8 01       	movw	r30, r16
    188a:	80 81       	ld	r24, Z
    188c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    188e:	80 93 a7 00 	sts	0x00A7, r24
    1892:	80 91 a9 00 	lds	r24, 0x00A9
    1896:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1898:	80 93 a9 00 	sts	0x00A9, r24
    189c:	c6 01       	movw	r24, r12
    189e:	40 e0       	ldi	r20, 0x00	; 0
    18a0:	50 e0       	ldi	r21, 0x00	; 0
		}

		Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipe.Address);
		Pipe_Unfreeze();

		if ((ErrorCode = Pipe_Read_Stream_LE(BufferPtr, BytesRem, NULL)) != PIPE_RWSTREAM_NoError)
    18a2:	92 da       	rcall	.-2780   	; 0xdc8 <Pipe_Read_Stream_LE>
    18a4:	88 23       	and	r24, r24
    18a6:	51 f5       	brne	.+84     	; 0x18fc <MS_Host_SendCommand+0x166>
    18a8:	80 91 a6 00 	lds	r24, 0x00A6
    18ac:	8e 77       	andi	r24, 0x7E	; 126
    18ae:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    18b2:	1e c0       	rjmp	.+60     	; 0x18f0 <MS_Host_SendCommand+0x15a>
    18b4:	f8 01       	movw	r30, r16
    18b6:	86 81       	ldd	r24, Z+6	; 0x06
    18b8:	8f 70       	andi	r24, 0x0F	; 15
    18ba:	80 93 a7 00 	sts	0x00A7, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    18be:	80 91 a9 00 	lds	r24, 0x00A9
    18c2:	8f 7b       	andi	r24, 0xBF	; 191
    18c4:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    18c8:	c6 01       	movw	r24, r12
    18ca:	40 e0       	ldi	r20, 0x00	; 0
    18cc:	50 e0       	ldi	r21, 0x00	; 0
    18ce:	25 da       	rcall	.-2998   	; 0xd1a <Pipe_Write_Stream_LE>
	else
	{
		Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipe.Address);
		Pipe_Unfreeze();

		if ((ErrorCode = Pipe_Write_Stream_LE(BufferPtr, BytesRem, NULL)) != PIPE_RWSTREAM_NoError)
    18d0:	88 23       	and	r24, r24
    18d2:	a1 f4       	brne	.+40     	; 0x18fc <MS_Host_SendCommand+0x166>
    18d4:	80 91 a6 00 	lds	r24, 0x00A6
    18d8:	8b 77       	andi	r24, 0x7B	; 123
    18da:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    18de:	04 c0       	rjmp	.+8      	; 0x18e8 <MS_Host_SendCommand+0x152>
    18e0:	80 91 49 01 	lds	r24, 0x0149
    18e4:	81 30       	cpi	r24, 0x01	; 1
    18e6:	69 f0       	breq	.+26     	; 0x1902 <MS_Host_SendCommand+0x16c>
    18e8:	80 91 a6 00 	lds	r24, 0x00A6

		Pipe_ClearOUT();

		while (!(Pipe_IsOUTReady()))
		{
			if (USB_HostState == HOST_STATE_Unattached)
    18ec:	82 ff       	sbrs	r24, 2
    18ee:	f8 cf       	rjmp	.-16     	; 0x18e0 <MS_Host_SendCommand+0x14a>
    18f0:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    18f4:	80 64       	ori	r24, 0x40	; 64
		if ((ErrorCode = Pipe_Write_Stream_LE(BufferPtr, BytesRem, NULL)) != PIPE_RWSTREAM_NoError)
		  return ErrorCode;

		Pipe_ClearOUT();

		while (!(Pipe_IsOUTReady()))
    18f6:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    18fa:	0a c0       	rjmp	.+20     	; 0x1910 <MS_Host_SendCommand+0x17a>
    18fc:	82 30       	cpi	r24, 0x02	; 2
    18fe:	10 f4       	brcc	.+4      	; 0x1904 <MS_Host_SendCommand+0x16e>
    1900:	07 c0       	rjmp	.+14     	; 0x1910 <MS_Host_SendCommand+0x17a>
    1902:	82 e0       	ldi	r24, 0x02	; 2
    1904:	90 91 a9 00 	lds	r25, 0x00A9

	if (BufferPtr != NULL)
	{
		ErrorCode = MS_Host_SendReceiveData(MSInterfaceInfo, SCSICommandBlock, (void*)BufferPtr);

		if ((ErrorCode != PIPE_RWSTREAM_NoError) && (ErrorCode != PIPE_RWSTREAM_PipeStalled))
    1908:	90 64       	ori	r25, 0x40	; 64
    190a:	90 93 a9 00 	sts	0x00A9, r25
    190e:	24 c0       	rjmp	.+72     	; 0x1958 <MS_Host_SendCommand+0x1c2>
    1910:	c8 01       	movw	r24, r16
    1912:	d1 de       	rcall	.-606    	; 0x16b6 <MS_Host_WaitForDataReceived>
    1914:	88 23       	and	r24, r24
    1916:	01 f5       	brne	.+64     	; 0x1958 <MS_Host_SendCommand+0x1c2>
		{
			Pipe_Freeze();
			return ErrorCode;
    1918:	f8 01       	movw	r30, r16
static uint8_t MS_Host_GetReturnedStatus(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                         MS_CommandStatusWrapper_t* const SCSICommandStatus)
{
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	if ((ErrorCode = MS_Host_WaitForDataReceived(MSInterfaceInfo)) != PIPE_RWSTREAM_NoError)
    191a:	80 81       	ld	r24, Z
    191c:	8f 70       	andi	r24, 0x0F	; 15
    191e:	80 93 a7 00 	sts	0x00A7, r24
    1922:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1926:	8f 7b       	andi	r24, 0xBF	; 191
    1928:	80 93 a9 00 	sts	0x00A9, r24
    192c:	ce 01       	movw	r24, r28

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    192e:	01 96       	adiw	r24, 0x01	; 1
    1930:	6d e0       	ldi	r22, 0x0D	; 13
    1932:	70 e0       	ldi	r23, 0x00	; 0
    1934:	40 e0       	ldi	r20, 0x00	; 0
    1936:	50 e0       	ldi	r21, 0x00	; 0
	  return ErrorCode;

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Read_Stream_LE(SCSICommandStatus, sizeof(MS_CommandStatusWrapper_t),
    1938:	47 da       	rcall	.-2930   	; 0xdc8 <Pipe_Read_Stream_LE>
    193a:	88 23       	and	r24, r24
    193c:	69 f4       	brne	.+26     	; 0x1958 <MS_Host_SendCommand+0x1c2>
    193e:	90 91 a6 00 	lds	r25, 0x00A6
    1942:	9e 77       	andi	r25, 0x7E	; 126
    1944:	90 93 a6 00 	sts	0x00A6, r25
    1948:	90 91 a9 00 	lds	r25, 0x00A9
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    194c:	90 64       	ori	r25, 0x40	; 64
    194e:	90 93 a9 00 	sts	0x00A9, r25
    1952:	9d 85       	ldd	r25, Y+13	; 0x0d
    1954:	91 11       	cpse	r25, r1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1956:	80 e8       	ldi	r24, 0x80	; 128
    1958:	2f 96       	adiw	r28, 0x0f	; 15
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
	}

	Pipe_ClearIN();
	Pipe_Freeze();

	if (SCSICommandStatus->Status != MS_SCSI_COMMAND_Pass)
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
	  ErrorCode = MS_ERROR_LOGICAL_CMD_FAILED;
    1964:	df 91       	pop	r29
		}
	}

	MS_CommandStatusWrapper_t SCSIStatusBlock;
	return MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSIStatusBlock);
}
    1966:	cf 91       	pop	r28
    1968:	1f 91       	pop	r17
    196a:	0f 91       	pop	r16
    196c:	ff 90       	pop	r15
    196e:	ef 90       	pop	r14
    1970:	df 90       	pop	r13
    1972:	cf 90       	pop	r12
    1974:	08 95       	ret

00001976 <DCOMP_MS_Host_NextMSInterfaceEndpoint>:
    1976:	fc 01       	movw	r30, r24
    1978:	81 81       	ldd	r24, Z+1	; 0x01
    197a:	85 30       	cpi	r24, 0x05	; 5
    197c:	49 f4       	brne	.+18     	; 0x1990 <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x1a>
    197e:	83 81       	ldd	r24, Z+3	; 0x03
    1980:	83 70       	andi	r24, 0x03	; 3
    1982:	82 30       	cpi	r24, 0x02	; 2
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if ((EndpointType == EP_TYPE_BULK) && (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
    1984:	39 f4       	brne	.+14     	; 0x1994 <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x1e>
    1986:	82 81       	ldd	r24, Z+2	; 0x02
    1988:	10 db       	rcall	.-2528   	; 0xfaa <Pipe_IsEndpointBound>
    198a:	88 23       	and	r24, r24
    198c:	19 f4       	brne	.+6      	; 0x1994 <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x1e>
    198e:	04 c0       	rjmp	.+8      	; 0x1998 <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x22>
    1990:	84 30       	cpi	r24, 0x04	; 4
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    1992:	21 f0       	breq	.+8      	; 0x199c <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x26>
    1994:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1996:	08 95       	ret
    1998:	80 e0       	ldi	r24, 0x00	; 0

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if ((EndpointType == EP_TYPE_BULK) && (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		{
			return DESCRIPTOR_SEARCH_Found;
    199a:	08 95       	ret
    199c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    199e:	08 95       	ret

000019a0 <MS_Host_ConfigurePipes>:
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    19a0:	af 92       	push	r10
#include "MassStorageClassHost.h"

uint8_t MS_Host_ConfigurePipes(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                               uint16_t ConfigDescriptorSize,
							   void* ConfigDescriptorData)
{
    19a2:	bf 92       	push	r11
    19a4:	cf 92       	push	r12
    19a6:	df 92       	push	r13
    19a8:	ef 92       	push	r14
    19aa:	ff 92       	push	r15
    19ac:	0f 93       	push	r16
    19ae:	1f 93       	push	r17
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
    19b4:	00 d0       	rcall	.+0      	; 0x19b6 <MS_Host_ConfigurePipes+0x16>
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <MS_Host_ConfigurePipes+0x18>
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	8c 01       	movw	r16, r24
    19be:	7a 83       	std	Y+2, r23	; 0x02
    19c0:	69 83       	std	Y+1, r22	; 0x01
    19c2:	5c 83       	std	Y+4, r21	; 0x04
    19c4:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint      = NULL;
	USB_Descriptor_Interface_t* MassStorageInterface = NULL;

	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    19c6:	0c 96       	adiw	r24, 0x0c	; 12
    19c8:	fc 01       	movw	r30, r24
    19ca:	86 e0       	ldi	r24, 0x06	; 6
    19cc:	df 01       	movw	r26, r30
    19ce:	1d 92       	st	X+, r1
    19d0:	8a 95       	dec	r24
    19d2:	e9 f7       	brne	.-6      	; 0x19ce <MS_Host_ConfigurePipes+0x2e>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    19d4:	eb 81       	ldd	r30, Y+3	; 0x03
    19d6:	fc 81       	ldd	r31, Y+4	; 0x04
    19d8:	81 81       	ldd	r24, Z+1	; 0x01
    19da:	82 30       	cpi	r24, 0x02	; 2
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <MS_Host_ConfigurePipes+0x40>
    19de:	60 c0       	rjmp	.+192    	; 0x1aa0 <MS_Host_ConfigurePipes+0x100>
    19e0:	aa 24       	eor	r10, r10
    19e2:	bb 24       	eor	r11, r11
    19e4:	cc 24       	eor	r12, r12
    19e6:	dd 24       	eor	r13, r13
    19e8:	ee 24       	eor	r14, r14
    19ea:	ff 24       	eor	r15, r15
	  return MS_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MassStorageInterface) ||
    19ec:	a1 14       	cp	r10, r1
    19ee:	b1 04       	cpc	r11, r1
    19f0:	51 f0       	breq	.+20     	; 0x1a06 <MS_Host_ConfigurePipes+0x66>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    19f2:	ce 01       	movw	r24, r28
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	be 01       	movw	r22, r28
    19f8:	6d 5f       	subi	r22, 0xFD	; 253
    19fa:	7f 4f       	sbci	r23, 0xFF	; 255
    19fc:	4b eb       	ldi	r20, 0xBB	; 187
    19fe:	5c e0       	ldi	r21, 0x0C	; 12
    1a00:	92 dc       	rcall	.-1756   	; 0x1326 <USB_GetNextDescriptorComp>
    1a02:	88 23       	and	r24, r24
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MS_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MassStorageInterface) ||
    1a04:	71 f0       	breq	.+28     	; 0x1a22 <MS_Host_ConfigurePipes+0x82>
    1a06:	ce 01       	movw	r24, r28
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_MS_Host_NextMSInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1a08:	01 96       	adiw	r24, 0x01	; 1
    1a0a:	be 01       	movw	r22, r28
    1a0c:	6d 5f       	subi	r22, 0xFD	; 253
    1a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a10:	4a e4       	ldi	r20, 0x4A	; 74
    1a12:	5b e0       	ldi	r21, 0x0B	; 11
    1a14:	88 dc       	rcall	.-1776   	; 0x1326 <USB_GetNextDescriptorComp>
    1a16:	88 23       	and	r24, r24
    1a18:	09 f0       	breq	.+2      	; 0x1a1c <MS_Host_ConfigurePipes+0x7c>
    1a1a:	44 c0       	rjmp	.+136    	; 0x1aa4 <MS_Host_ConfigurePipes+0x104>
    1a1c:	ab 80       	ldd	r10, Y+3	; 0x03
    1a1e:	bc 80       	ldd	r11, Y+4	; 0x04
			                              DCOMP_MS_Host_NextMSInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return MS_ENUMERROR_NoCompatibleInterfaceFound;
			}

			MassStorageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1a20:	e1 cf       	rjmp	.-62     	; 0x19e4 <MS_Host_ConfigurePipes+0x44>
    1a22:	eb 81       	ldd	r30, Y+3	; 0x03
    1a24:	fc 81       	ldd	r31, Y+4	; 0x04
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1a26:	82 81       	ldd	r24, Z+2	; 0x02
    1a28:	87 ff       	sbrs	r24, 7

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <MS_Host_ConfigurePipes+0x90>
    1a2c:	7f 01       	movw	r14, r30
    1a2e:	01 c0       	rjmp	.+2      	; 0x1a32 <MS_Host_ConfigurePipes+0x92>
		  DataINEndpoint  = EndpointData;
    1a30:	6f 01       	movw	r12, r30
    1a32:	e1 14       	cp	r14, r1
		else
		  DataOUTEndpoint = EndpointData;
    1a34:	f1 04       	cpc	r15, r1
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MS_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1a36:	d1 f2       	breq	.-76     	; 0x19ec <MS_Host_ConfigurePipes+0x4c>
    1a38:	c1 14       	cp	r12, r1
    1a3a:	d1 04       	cpc	r13, r1
    1a3c:	b9 f2       	breq	.-82     	; 0x19ec <MS_Host_ConfigurePipes+0x4c>
    1a3e:	f7 01       	movw	r30, r14
    1a40:	84 81       	ldd	r24, Z+4	; 0x04
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	MSInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    1a42:	95 81       	ldd	r25, Z+5	; 0x05
    1a44:	d8 01       	movw	r26, r16
    1a46:	12 96       	adiw	r26, 0x02	; 2
    1a48:	9c 93       	st	X, r25
    1a4a:	8e 93       	st	-X, r24
    1a4c:	11 97       	sbiw	r26, 0x01	; 1
    1a4e:	82 81       	ldd	r24, Z+2	; 0x02
    1a50:	13 96       	adiw	r26, 0x03	; 3
	MSInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1a52:	8c 93       	st	X, r24
    1a54:	13 97       	sbiw	r26, 0x03	; 3
    1a56:	22 e0       	ldi	r18, 0x02	; 2
    1a58:	14 96       	adiw	r26, 0x04	; 4
	MSInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
    1a5a:	2c 93       	st	X, r18
    1a5c:	14 97       	sbiw	r26, 0x04	; 4
    1a5e:	f6 01       	movw	r30, r12
    1a60:	84 81       	ldd	r24, Z+4	; 0x04
	
	MSInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1a62:	95 81       	ldd	r25, Z+5	; 0x05
    1a64:	18 96       	adiw	r26, 0x08	; 8
    1a66:	9c 93       	st	X, r25
    1a68:	8e 93       	st	-X, r24
    1a6a:	17 97       	sbiw	r26, 0x07	; 7
    1a6c:	82 81       	ldd	r24, Z+2	; 0x02
    1a6e:	19 96       	adiw	r26, 0x09	; 9
	MSInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1a70:	8c 93       	st	X, r24
    1a72:	19 97       	sbiw	r26, 0x09	; 9
    1a74:	1a 96       	adiw	r26, 0x0a	; 10
    1a76:	2c 93       	st	X, r18
	MSInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;
    1a78:	c8 01       	movw	r24, r16
    1a7a:	61 e0       	ldi	r22, 0x01	; 1
	
	if (!(Pipe_ConfigurePipeTable(&MSInterfaceInfo->Config.DataINPipe, 1)))
    1a7c:	61 da       	rcall	.-2878   	; 0xf40 <Pipe_ConfigurePipeTable>
    1a7e:	88 23       	and	r24, r24
    1a80:	99 f0       	breq	.+38     	; 0x1aa8 <MS_Host_ConfigurePipes+0x108>
    1a82:	c8 01       	movw	r24, r16
    1a84:	06 96       	adiw	r24, 0x06	; 6
    1a86:	61 e0       	ldi	r22, 0x01	; 1
	  return false;
	
	if (!(Pipe_ConfigurePipeTable(&MSInterfaceInfo->Config.DataOUTPipe, 1)))
    1a88:	5b da       	rcall	.-2890   	; 0xf40 <Pipe_ConfigurePipeTable>
    1a8a:	88 23       	and	r24, r24
    1a8c:	69 f0       	breq	.+26     	; 0x1aa8 <MS_Host_ConfigurePipes+0x108>
    1a8e:	d5 01       	movw	r26, r10
    1a90:	12 96       	adiw	r26, 0x02	; 2
    1a92:	8c 91       	ld	r24, X
    1a94:	12 97       	sbiw	r26, 0x02	; 2
	  return false;

	MSInterfaceInfo->State.InterfaceNumber = MassStorageInterface->InterfaceNumber;
    1a96:	f8 01       	movw	r30, r16
    1a98:	85 87       	std	Z+13, r24	; 0x0d
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	84 87       	std	Z+12, r24	; 0x0c
    1a9e:	04 c0       	rjmp	.+8      	; 0x1aa8 <MS_Host_ConfigurePipes+0x108>
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
	MSInterfaceInfo->State.IsActive = true;
    1aa2:	03 c0       	rjmp	.+6      	; 0x1aaa <MS_Host_ConfigurePipes+0x10a>
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	01 c0       	rjmp	.+2      	; 0x1aaa <MS_Host_ConfigurePipes+0x10a>
	USB_Descriptor_Interface_t* MassStorageInterface = NULL;

	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MS_ENUMERROR_InvalidConfigDescriptor;
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	0f 90       	pop	r0
		                              DCOMP_MS_Host_NextMSInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_MS_Host_NextMSInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return MS_ENUMERROR_NoCompatibleInterfaceFound;
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
	
	if (!(Pipe_ConfigurePipeTable(&MSInterfaceInfo->Config.DataINPipe, 1)))
	  return false;
	
	if (!(Pipe_ConfigurePipeTable(&MSInterfaceInfo->Config.DataOUTPipe, 1)))
	  return false;
    1ab0:	0f 90       	pop	r0

	MSInterfaceInfo->State.InterfaceNumber = MassStorageInterface->InterfaceNumber;
	MSInterfaceInfo->State.IsActive = true;

	return MS_ENUMERROR_NoError;
}
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	1f 91       	pop	r17
    1ab8:	0f 91       	pop	r16
    1aba:	ff 90       	pop	r15
    1abc:	ef 90       	pop	r14
    1abe:	df 90       	pop	r13
    1ac0:	cf 90       	pop	r12
    1ac2:	bf 90       	pop	r11
    1ac4:	af 90       	pop	r10
    1ac6:	08 95       	ret

00001ac8 <MS_Host_ResetMSInterface>:
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	ec 01       	movw	r28, r24
    1ace:	8d 85       	ldd	r24, Y+13	; 0x0d

uint8_t MS_Host_ResetMSInterface(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1ad0:	91 e2       	ldi	r25, 0x21	; 33
    1ad2:	90 93 41 01 	sts	0x0141, r25
    1ad6:	9f ef       	ldi	r25, 0xFF	; 255
    1ad8:	90 93 42 01 	sts	0x0142, r25
    1adc:	10 92 44 01 	sts	0x0144, r1
    1ae0:	10 92 43 01 	sts	0x0143, r1
    1ae4:	80 93 45 01 	sts	0x0145, r24
    1ae8:	10 92 46 01 	sts	0x0146, r1
    1aec:	10 92 48 01 	sts	0x0148, r1
    1af0:	10 92 47 01 	sts	0x0147, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1af4:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	84 dc       	rcall	.-1784   	; 0x1406 <USB_Host_SendControlRequest>
    1afe:	88 23       	and	r24, r24
    1b00:	01 f5       	brne	.+64     	; 0x1b42 <MS_Host_ResetMSInterface+0x7a>
    1b02:	88 81       	ld	r24, Y
    1b04:	8f 70       	andi	r24, 0x0F	; 15
    1b06:	80 93 a7 00 	sts	0x00A7, r24
    1b0a:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    1b0e:	29 2f       	mov	r18, r25
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
    1b10:	2f 70       	andi	r18, 0x0F	; 15
    1b12:	90 ff       	sbrs	r25, 0
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <MS_Host_ResetMSInterface+0x52>
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	01 c0       	rjmp	.+2      	; 0x1b1c <MS_Host_ResetMSInterface+0x54>
    1b1a:	80 e8       	ldi	r24, 0x80	; 128
    1b1c:	82 2b       	or	r24, r18
	  return ErrorCode;

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipe.Address);

	if ((ErrorCode = USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress())) != HOST_SENDCONTROL_Successful)
    1b1e:	96 dd       	rcall	.-1236   	; 0x164c <USB_Host_ClearEndpointStall>
    1b20:	88 23       	and	r24, r24
    1b22:	79 f4       	brne	.+30     	; 0x1b42 <MS_Host_ResetMSInterface+0x7a>
    1b24:	8e 81       	ldd	r24, Y+6	; 0x06
    1b26:	8f 70       	andi	r24, 0x0F	; 15
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1b28:	80 93 a7 00 	sts	0x00A7, r24
    1b2c:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    1b30:	29 2f       	mov	r18, r25
    1b32:	2f 70       	andi	r18, 0x0F	; 15
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
    1b34:	90 ff       	sbrs	r25, 0
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <MS_Host_ResetMSInterface+0x74>
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	01 c0       	rjmp	.+2      	; 0x1b3e <MS_Host_ResetMSInterface+0x76>
    1b3c:	80 e8       	ldi	r24, 0x80	; 128
    1b3e:	82 2b       	or	r24, r18
    1b40:	85 dd       	rcall	.-1270   	; 0x164c <USB_Host_ClearEndpointStall>
	  return ErrorCode;

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipe.Address);

	if ((ErrorCode = USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress())) != HOST_SENDCONTROL_Successful)
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	08 95       	ret

00001b48 <MS_Host_GetMaxLUN>:
	  return ErrorCode;

	return HOST_SENDCONTROL_Successful;
}
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	eb 01       	movw	r28, r22
uint8_t MS_Host_GetMaxLUN(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                          uint8_t* const MaxLUNIndex)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1b4e:	fc 01       	movw	r30, r24
    1b50:	85 85       	ldd	r24, Z+13	; 0x0d
    1b52:	91 ea       	ldi	r25, 0xA1	; 161
    1b54:	90 93 41 01 	sts	0x0141, r25
    1b58:	9e ef       	ldi	r25, 0xFE	; 254
    1b5a:	90 93 42 01 	sts	0x0142, r25
    1b5e:	10 92 44 01 	sts	0x0144, r1
    1b62:	10 92 43 01 	sts	0x0143, r1
    1b66:	80 93 45 01 	sts	0x0145, r24
    1b6a:	10 92 46 01 	sts	0x0146, r1
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	90 93 48 01 	sts	0x0148, r25
    1b76:	80 93 47 01 	sts	0x0147, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1b7a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 1,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(MaxLUNIndex)) == HOST_SENDCONTROL_SetupStalled)
    1b7e:	cb 01       	movw	r24, r22
    1b80:	42 dc       	rcall	.-1916   	; 0x1406 <USB_Host_SendControlRequest>
    1b82:	83 30       	cpi	r24, 0x03	; 3
    1b84:	11 f4       	brne	.+4      	; 0x1b8a <MS_Host_GetMaxLUN+0x42>
    1b86:	18 82       	st	Y, r1
	{
		*MaxLUNIndex = 0;
    1b88:	80 e0       	ldi	r24, 0x00	; 0
		ErrorCode    = HOST_SENDCONTROL_Successful;
    1b8a:	df 91       	pop	r29
	}

	return ErrorCode;
}
    1b8c:	cf 91       	pop	r28
    1b8e:	08 95       	ret

00001b90 <MS_Host_GetInquiryData>:
    1b90:	1f 93       	push	r17

uint8_t MS_Host_GetInquiryData(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                               const uint8_t LUNIndex,
                               SCSI_Inquiry_Response_t* const InquiryData)
{
    1b92:	cf 93       	push	r28
    1b94:	df 93       	push	r29
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	6f 97       	sbiw	r28, 0x1f	; 31
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	16 2f       	mov	r17, r22
    1ba8:	9a 01       	movw	r18, r20
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1baa:	40 91 49 01 	lds	r20, 0x0149
    1bae:	4b 30       	cpi	r20, 0x0B	; 11
    1bb0:	11 f5       	brne	.+68     	; 0x1bf6 <MS_Host_GetInquiryData+0x66>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	1c 96       	adiw	r26, 0x0c	; 12
    1bb6:	4c 91       	ld	r20, X
    1bb8:	1c 97       	sbiw	r26, 0x0c	; 12
    1bba:	44 23       	and	r20, r20
    1bbc:	e1 f0       	breq	.+56     	; 0x1bf6 <MS_Host_GetInquiryData+0x66>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	31 96       	adiw	r30, 0x01	; 1
    1bc2:	4f e1       	ldi	r20, 0x1F	; 31
    1bc4:	df 01       	movw	r26, r30
    1bc6:	1d 92       	st	X+, r1
    1bc8:	4a 95       	dec	r20
    1bca:	e9 f7       	brne	.-6      	; 0x1bc6 <MS_Host_GetInquiryData+0x36>
    1bcc:	44 e2       	ldi	r20, 0x24	; 36
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	60 e0       	ldi	r22, 0x00	; 0
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	49 87       	std	Y+9, r20	; 0x09
    1bd6:	5a 87       	std	Y+10, r21	; 0x0a
    1bd8:	6b 87       	std	Y+11, r22	; 0x0b
    1bda:	7c 87       	std	Y+12, r23	; 0x0c
    1bdc:	40 e8       	ldi	r20, 0x80	; 128
    1bde:	4d 87       	std	Y+13, r20	; 0x0d
    1be0:	1e 87       	std	Y+14, r17	; 0x0e
    1be2:	46 e0       	ldi	r20, 0x06	; 6
    1be4:	4f 87       	std	Y+15, r20	; 0x0f
    1be6:	42 e1       	ldi	r20, 0x12	; 18
    1be8:	48 8b       	std	Y+16, r20	; 0x10
    1bea:	44 e2       	ldi	r20, 0x24	; 36
    1bec:	4c 8b       	std	Y+20, r20	; 0x14
					sizeof(SCSI_Inquiry_Response_t), // Allocation Length
					0x00                             // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, InquiryData);
    1bee:	bf 01       	movw	r22, r30
    1bf0:	a9 01       	movw	r20, r18
    1bf2:	d1 dd       	rcall	.-1118   	; 0x1796 <MS_Host_SendCommand>
    1bf4:	01 c0       	rjmp	.+2      	; 0x1bf8 <MS_Host_GetInquiryData+0x68>
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
uint8_t MS_Host_GetInquiryData(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                               const uint8_t LUNIndex,
                               SCSI_Inquiry_Response_t* const InquiryData)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1bf8:	6f 96       	adiw	r28, 0x1f	; 31
					0x00                             // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, InquiryData);
}
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	df 91       	pop	r29
    1c06:	cf 91       	pop	r28
    1c08:	1f 91       	pop	r17
    1c0a:	08 95       	ret

00001c0c <MS_Host_TestUnitReady>:
    1c0c:	cf 93       	push	r28

uint8_t MS_Host_TestUnitReady(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                              const uint8_t LUNIndex)
{
    1c0e:	df 93       	push	r29
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	6f 97       	sbiw	r28, 0x1f	; 31
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	de bf       	out	0x3e, r29	; 62
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	cd bf       	out	0x3d, r28	; 61
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1c20:	20 91 49 01 	lds	r18, 0x0149
    1c24:	2b 30       	cpi	r18, 0x0B	; 11
    1c26:	b9 f4       	brne	.+46     	; 0x1c56 <MS_Host_TestUnitReady+0x4a>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	1c 96       	adiw	r26, 0x0c	; 12
    1c2c:	2c 91       	ld	r18, X
    1c2e:	1c 97       	sbiw	r26, 0x0c	; 12
    1c30:	22 23       	and	r18, r18
    1c32:	89 f0       	breq	.+34     	; 0x1c56 <MS_Host_TestUnitReady+0x4a>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1c34:	fe 01       	movw	r30, r28
    1c36:	31 96       	adiw	r30, 0x01	; 1
    1c38:	2f e1       	ldi	r18, 0x1F	; 31
    1c3a:	df 01       	movw	r26, r30
    1c3c:	1d 92       	st	X+, r1
    1c3e:	2a 95       	dec	r18
    1c40:	e9 f7       	brne	.-6      	; 0x1c3c <MS_Host_TestUnitReady+0x30>
    1c42:	20 e8       	ldi	r18, 0x80	; 128
    1c44:	2d 87       	std	Y+13, r18	; 0x0d
    1c46:	6e 87       	std	Y+14, r22	; 0x0e
    1c48:	26 e0       	ldi	r18, 0x06	; 6
    1c4a:	2f 87       	std	Y+15, r18	; 0x0f
					0x00,                   // Reserved
					0x00                    // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, NULL);
    1c4c:	bf 01       	movw	r22, r30
    1c4e:	40 e0       	ldi	r20, 0x00	; 0
    1c50:	50 e0       	ldi	r21, 0x00	; 0
    1c52:	a1 dd       	rcall	.-1214   	; 0x1796 <MS_Host_SendCommand>
    1c54:	01 c0       	rjmp	.+2      	; 0x1c58 <MS_Host_TestUnitReady+0x4c>
    1c56:	81 e0       	ldi	r24, 0x01	; 1

uint8_t MS_Host_TestUnitReady(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                              const uint8_t LUNIndex)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1c58:	6f 96       	adiw	r28, 0x1f	; 31
					0x00                    // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, NULL);
}
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	df 91       	pop	r29
    1c66:	cf 91       	pop	r28
    1c68:	08 95       	ret

00001c6a <MS_Host_ReadDeviceCapacity>:
    1c6a:	df 92       	push	r13

uint8_t MS_Host_ReadDeviceCapacity(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                   const uint8_t LUNIndex,
                                   SCSI_Capacity_t* const DeviceCapacity)
{
    1c6c:	ef 92       	push	r14
    1c6e:	ff 92       	push	r15
    1c70:	0f 93       	push	r16
    1c72:	1f 93       	push	r17
    1c74:	cf 93       	push	r28
    1c76:	df 93       	push	r29
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	6f 97       	sbiw	r28, 0x1f	; 31
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	de bf       	out	0x3e, r29	; 62
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	cd bf       	out	0x3d, r28	; 61
    1c88:	26 2f       	mov	r18, r22
    1c8a:	7a 01       	movw	r14, r20
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1c8c:	30 91 49 01 	lds	r19, 0x0149
    1c90:	3b 30       	cpi	r19, 0x0B	; 11
    1c92:	09 f0       	breq	.+2      	; 0x1c96 <MS_Host_ReadDeviceCapacity+0x2c>
    1c94:	7e c0       	rjmp	.+252    	; 0x1d92 <MS_Host_ReadDeviceCapacity+0x128>
    1c96:	dc 01       	movw	r26, r24
    1c98:	1c 96       	adiw	r26, 0x0c	; 12
    1c9a:	3c 91       	ld	r19, X
    1c9c:	1c 97       	sbiw	r26, 0x0c	; 12
    1c9e:	33 23       	and	r19, r19
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <MS_Host_ReadDeviceCapacity+0x3a>
    1ca2:	77 c0       	rjmp	.+238    	; 0x1d92 <MS_Host_ReadDeviceCapacity+0x128>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t ErrorCode;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	31 96       	adiw	r30, 0x01	; 1
    1ca8:	3f e1       	ldi	r19, 0x1F	; 31
    1caa:	df 01       	movw	r26, r30
    1cac:	1d 92       	st	X+, r1
    1cae:	3a 95       	dec	r19
    1cb0:	e9 f7       	brne	.-6      	; 0x1cac <MS_Host_ReadDeviceCapacity+0x42>
    1cb2:	48 e0       	ldi	r20, 0x08	; 8
    1cb4:	50 e0       	ldi	r21, 0x00	; 0
    1cb6:	60 e0       	ldi	r22, 0x00	; 0
    1cb8:	70 e0       	ldi	r23, 0x00	; 0
    1cba:	49 87       	std	Y+9, r20	; 0x09
    1cbc:	5a 87       	std	Y+10, r21	; 0x0a
    1cbe:	6b 87       	std	Y+11, r22	; 0x0b
    1cc0:	7c 87       	std	Y+12, r23	; 0x0c
    1cc2:	30 e8       	ldi	r19, 0x80	; 128
    1cc4:	3d 87       	std	Y+13, r19	; 0x0d
    1cc6:	2e 87       	std	Y+14, r18	; 0x0e
    1cc8:	2a e0       	ldi	r18, 0x0A	; 10
    1cca:	2f 87       	std	Y+15, r18	; 0x0f
    1ccc:	25 e2       	ldi	r18, 0x25	; 37
    1cce:	28 8b       	std	Y+16, r18	; 0x10
					0x00,                   // Partial Medium Indicator
					0x00                    // Unused (control)
				}
		};

	if ((ErrorCode = MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, DeviceCapacity)) != PIPE_RWSTREAM_NoError)
    1cd0:	bf 01       	movw	r22, r30
    1cd2:	a7 01       	movw	r20, r14
    1cd4:	60 dd       	rcall	.-1344   	; 0x1796 <MS_Host_SendCommand>
    1cd6:	d8 2e       	mov	r13, r24
    1cd8:	88 23       	and	r24, r24
    1cda:	09 f0       	breq	.+2      	; 0x1cde <MS_Host_ReadDeviceCapacity+0x74>
    1cdc:	5c c0       	rjmp	.+184    	; 0x1d96 <MS_Host_ReadDeviceCapacity+0x12c>
    1cde:	f7 01       	movw	r30, r14
	  return ErrorCode;

	DeviceCapacity->Blocks    = BE32_TO_CPU(DeviceCapacity->Blocks);
    1ce0:	00 81       	ld	r16, Z
    1ce2:	11 81       	ldd	r17, Z+1	; 0x01
    1ce4:	22 81       	ldd	r18, Z+2	; 0x02
    1ce6:	33 81       	ldd	r19, Z+3	; 0x03
    1ce8:	b0 2f       	mov	r27, r16
    1cea:	aa 27       	eor	r26, r26
    1cec:	99 27       	eor	r25, r25
    1cee:	88 27       	eor	r24, r24
    1cf0:	43 2f       	mov	r20, r19
    1cf2:	55 27       	eor	r21, r21
    1cf4:	66 27       	eor	r22, r22
    1cf6:	77 27       	eor	r23, r23
    1cf8:	84 2b       	or	r24, r20
    1cfa:	95 2b       	or	r25, r21
    1cfc:	a6 2b       	or	r26, r22
    1cfe:	b7 2b       	or	r27, r23
    1d00:	b9 01       	movw	r22, r18
    1d02:	a8 01       	movw	r20, r16
    1d04:	40 70       	andi	r20, 0x00	; 0
    1d06:	50 70       	andi	r21, 0x00	; 0
    1d08:	70 70       	andi	r23, 0x00	; 0
    1d0a:	45 2f       	mov	r20, r21
    1d0c:	56 2f       	mov	r21, r22
    1d0e:	67 2f       	mov	r22, r23
    1d10:	77 27       	eor	r23, r23
    1d12:	84 2b       	or	r24, r20
    1d14:	95 2b       	or	r25, r21
    1d16:	a6 2b       	or	r26, r22
    1d18:	b7 2b       	or	r27, r23
    1d1a:	00 70       	andi	r16, 0x00	; 0
    1d1c:	20 70       	andi	r18, 0x00	; 0
    1d1e:	30 70       	andi	r19, 0x00	; 0
    1d20:	32 2f       	mov	r19, r18
    1d22:	21 2f       	mov	r18, r17
    1d24:	10 2f       	mov	r17, r16
    1d26:	00 27       	eor	r16, r16
    1d28:	80 2b       	or	r24, r16
    1d2a:	91 2b       	or	r25, r17
    1d2c:	a2 2b       	or	r26, r18
    1d2e:	b3 2b       	or	r27, r19
    1d30:	80 83       	st	Z, r24
    1d32:	91 83       	std	Z+1, r25	; 0x01
    1d34:	a2 83       	std	Z+2, r26	; 0x02
    1d36:	b3 83       	std	Z+3, r27	; 0x03
    1d38:	04 81       	ldd	r16, Z+4	; 0x04
	DeviceCapacity->BlockSize = BE32_TO_CPU(DeviceCapacity->BlockSize);
    1d3a:	15 81       	ldd	r17, Z+5	; 0x05
    1d3c:	26 81       	ldd	r18, Z+6	; 0x06
    1d3e:	37 81       	ldd	r19, Z+7	; 0x07
    1d40:	b0 2f       	mov	r27, r16
    1d42:	aa 27       	eor	r26, r26
    1d44:	99 27       	eor	r25, r25
    1d46:	88 27       	eor	r24, r24
    1d48:	43 2f       	mov	r20, r19
    1d4a:	55 27       	eor	r21, r21
    1d4c:	66 27       	eor	r22, r22
    1d4e:	77 27       	eor	r23, r23
    1d50:	84 2b       	or	r24, r20
    1d52:	95 2b       	or	r25, r21
    1d54:	a6 2b       	or	r26, r22
    1d56:	b7 2b       	or	r27, r23
    1d58:	b9 01       	movw	r22, r18
    1d5a:	a8 01       	movw	r20, r16
    1d5c:	40 70       	andi	r20, 0x00	; 0
    1d5e:	50 70       	andi	r21, 0x00	; 0
    1d60:	70 70       	andi	r23, 0x00	; 0
    1d62:	45 2f       	mov	r20, r21
    1d64:	56 2f       	mov	r21, r22
    1d66:	67 2f       	mov	r22, r23
    1d68:	77 27       	eor	r23, r23
    1d6a:	84 2b       	or	r24, r20
    1d6c:	95 2b       	or	r25, r21
    1d6e:	a6 2b       	or	r26, r22
    1d70:	b7 2b       	or	r27, r23
    1d72:	00 70       	andi	r16, 0x00	; 0
    1d74:	20 70       	andi	r18, 0x00	; 0
    1d76:	30 70       	andi	r19, 0x00	; 0
    1d78:	32 2f       	mov	r19, r18
    1d7a:	21 2f       	mov	r18, r17
    1d7c:	10 2f       	mov	r17, r16
    1d7e:	00 27       	eor	r16, r16
    1d80:	80 2b       	or	r24, r16
    1d82:	91 2b       	or	r25, r17
    1d84:	a2 2b       	or	r26, r18
    1d86:	b3 2b       	or	r27, r19
    1d88:	84 83       	std	Z+4, r24	; 0x04
    1d8a:	95 83       	std	Z+5, r25	; 0x05
    1d8c:	a6 83       	std	Z+6, r26	; 0x06
    1d8e:	b7 83       	std	Z+7, r27	; 0x07
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <MS_Host_ReadDeviceCapacity+0x12c>

	return PIPE_RWSTREAM_NoError;
    1d92:	dd 24       	eor	r13, r13
uint8_t MS_Host_ReadDeviceCapacity(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                   const uint8_t LUNIndex,
                                   SCSI_Capacity_t* const DeviceCapacity)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1d94:	d3 94       	inc	r13
    1d96:	8d 2d       	mov	r24, r13

	DeviceCapacity->Blocks    = BE32_TO_CPU(DeviceCapacity->Blocks);
	DeviceCapacity->BlockSize = BE32_TO_CPU(DeviceCapacity->BlockSize);

	return PIPE_RWSTREAM_NoError;
}
    1d98:	6f 96       	adiw	r28, 0x1f	; 31
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	ff 90       	pop	r15
    1dae:	ef 90       	pop	r14
    1db0:	df 90       	pop	r13
    1db2:	08 95       	ret

00001db4 <MS_Host_RequestSense>:
    1db4:	1f 93       	push	r17

uint8_t MS_Host_RequestSense(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                             const uint8_t LUNIndex,
                             SCSI_Request_Sense_Response_t* const SenseData)
{
    1db6:	cf 93       	push	r28
    1db8:	df 93       	push	r29
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
    1dbe:	6f 97       	sbiw	r28, 0x1f	; 31
    1dc0:	0f b6       	in	r0, 0x3f	; 63
    1dc2:	f8 94       	cli
    1dc4:	de bf       	out	0x3e, r29	; 62
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	cd bf       	out	0x3d, r28	; 61
    1dca:	16 2f       	mov	r17, r22
    1dcc:	9a 01       	movw	r18, r20
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1dce:	40 91 49 01 	lds	r20, 0x0149
    1dd2:	4b 30       	cpi	r20, 0x0B	; 11
    1dd4:	11 f5       	brne	.+68     	; 0x1e1a <MS_Host_RequestSense+0x66>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	1c 96       	adiw	r26, 0x0c	; 12
    1dda:	4c 91       	ld	r20, X
    1ddc:	1c 97       	sbiw	r26, 0x0c	; 12
    1dde:	44 23       	and	r20, r20
    1de0:	e1 f0       	breq	.+56     	; 0x1e1a <MS_Host_RequestSense+0x66>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1de2:	fe 01       	movw	r30, r28
    1de4:	31 96       	adiw	r30, 0x01	; 1
    1de6:	4f e1       	ldi	r20, 0x1F	; 31
    1de8:	df 01       	movw	r26, r30
    1dea:	1d 92       	st	X+, r1
    1dec:	4a 95       	dec	r20
    1dee:	e9 f7       	brne	.-6      	; 0x1dea <MS_Host_RequestSense+0x36>
    1df0:	42 e1       	ldi	r20, 0x12	; 18
    1df2:	50 e0       	ldi	r21, 0x00	; 0
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	70 e0       	ldi	r23, 0x00	; 0
    1df8:	49 87       	std	Y+9, r20	; 0x09
    1dfa:	5a 87       	std	Y+10, r21	; 0x0a
    1dfc:	6b 87       	std	Y+11, r22	; 0x0b
    1dfe:	7c 87       	std	Y+12, r23	; 0x0c
    1e00:	40 e8       	ldi	r20, 0x80	; 128
    1e02:	4d 87       	std	Y+13, r20	; 0x0d
    1e04:	1e 87       	std	Y+14, r17	; 0x0e
    1e06:	46 e0       	ldi	r20, 0x06	; 6
    1e08:	4f 87       	std	Y+15, r20	; 0x0f
    1e0a:	43 e0       	ldi	r20, 0x03	; 3
    1e0c:	48 8b       	std	Y+16, r20	; 0x10
    1e0e:	42 e1       	ldi	r20, 0x12	; 18
    1e10:	4c 8b       	std	Y+20, r20	; 0x14
					sizeof(SCSI_Request_Sense_Response_t), // Allocation Length
					0x00                                   // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, SenseData);
    1e12:	bf 01       	movw	r22, r30
    1e14:	a9 01       	movw	r20, r18
    1e16:	bf dc       	rcall	.-1666   	; 0x1796 <MS_Host_SendCommand>
    1e18:	01 c0       	rjmp	.+2      	; 0x1e1c <MS_Host_RequestSense+0x68>
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
uint8_t MS_Host_RequestSense(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                             const uint8_t LUNIndex,
                             SCSI_Request_Sense_Response_t* const SenseData)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1e1c:	6f 96       	adiw	r28, 0x1f	; 31
					0x00                                   // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, SenseData);
}
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61
    1e28:	df 91       	pop	r29
    1e2a:	cf 91       	pop	r28
    1e2c:	1f 91       	pop	r17
    1e2e:	08 95       	ret

00001e30 <MS_Host_PreventAllowMediumRemoval>:
    1e30:	cf 93       	push	r28

uint8_t MS_Host_PreventAllowMediumRemoval(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                          const uint8_t LUNIndex,
                                          const bool PreventRemoval)
{
    1e32:	df 93       	push	r29
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    1e38:	6f 97       	sbiw	r28, 0x1f	; 31
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	cd bf       	out	0x3d, r28	; 61
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1e44:	20 91 49 01 	lds	r18, 0x0149
    1e48:	2b 30       	cpi	r18, 0x0B	; 11
    1e4a:	c1 f4       	brne	.+48     	; 0x1e7c <MS_Host_PreventAllowMediumRemoval+0x4c>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	1c 96       	adiw	r26, 0x0c	; 12
    1e50:	2c 91       	ld	r18, X
    1e52:	1c 97       	sbiw	r26, 0x0c	; 12
    1e54:	22 23       	and	r18, r18
    1e56:	91 f0       	breq	.+36     	; 0x1e7c <MS_Host_PreventAllowMediumRemoval+0x4c>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1e58:	fe 01       	movw	r30, r28
    1e5a:	31 96       	adiw	r30, 0x01	; 1
    1e5c:	2f e1       	ldi	r18, 0x1F	; 31
    1e5e:	df 01       	movw	r26, r30
    1e60:	1d 92       	st	X+, r1
    1e62:	2a 95       	dec	r18
    1e64:	e9 f7       	brne	.-6      	; 0x1e60 <MS_Host_PreventAllowMediumRemoval+0x30>
    1e66:	6e 87       	std	Y+14, r22	; 0x0e
    1e68:	26 e0       	ldi	r18, 0x06	; 6
    1e6a:	2f 87       	std	Y+15, r18	; 0x0f
    1e6c:	2e e1       	ldi	r18, 0x1E	; 30
    1e6e:	28 8b       	std	Y+16, r18	; 0x10
    1e70:	4b 8b       	std	Y+19, r20	; 0x13
					0x00,                   // Reserved
					0x00                    // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, NULL);
    1e72:	bf 01       	movw	r22, r30
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	50 e0       	ldi	r21, 0x00	; 0
    1e78:	8e dc       	rcall	.-1764   	; 0x1796 <MS_Host_SendCommand>
    1e7a:	01 c0       	rjmp	.+2      	; 0x1e7e <MS_Host_PreventAllowMediumRemoval+0x4e>
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
uint8_t MS_Host_PreventAllowMediumRemoval(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                          const uint8_t LUNIndex,
                                          const bool PreventRemoval)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1e7e:	6f 96       	adiw	r28, 0x1f	; 31
					0x00                    // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, NULL);
}
    1e80:	0f b6       	in	r0, 0x3f	; 63
    1e82:	f8 94       	cli
    1e84:	de bf       	out	0x3e, r29	; 62
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	cd bf       	out	0x3d, r28	; 61
    1e8a:	df 91       	pop	r29
    1e8c:	cf 91       	pop	r28
    1e8e:	08 95       	ret

00001e90 <MS_Host_ReadDeviceBlocks>:
    1e90:	4f 92       	push	r4
                                 const uint8_t LUNIndex,
                                 const uint32_t BlockAddress,
                                 const uint8_t Blocks,
                                 const uint16_t BlockSize,
                                 void* BlockBuffer)
{
    1e92:	5f 92       	push	r5
    1e94:	6f 92       	push	r6
    1e96:	7f 92       	push	r7
    1e98:	8f 92       	push	r8
    1e9a:	9f 92       	push	r9
    1e9c:	af 92       	push	r10
    1e9e:	bf 92       	push	r11
    1ea0:	cf 92       	push	r12
    1ea2:	df 92       	push	r13
    1ea4:	ef 92       	push	r14
    1ea6:	ff 92       	push	r15
    1ea8:	0f 93       	push	r16
    1eaa:	1f 93       	push	r17
    1eac:	cf 93       	push	r28
    1eae:	df 93       	push	r29
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	6f 97       	sbiw	r28, 0x1f	; 31
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	3c 01       	movw	r6, r24
    1ec2:	16 2f       	mov	r17, r22
    1ec4:	49 01       	movw	r8, r18
    1ec6:	5a 01       	movw	r10, r20
    1ec8:	26 01       	movw	r4, r12
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1eca:	80 91 49 01 	lds	r24, 0x0149
    1ece:	8b 30       	cpi	r24, 0x0B	; 11
    1ed0:	61 f5       	brne	.+88     	; 0x1f2a <MS_Host_ReadDeviceBlocks+0x9a>
    1ed2:	f3 01       	movw	r30, r6
    1ed4:	84 85       	ldd	r24, Z+12	; 0x0c
    1ed6:	88 23       	and	r24, r24
    1ed8:	41 f1       	breq	.+80     	; 0x1f2a <MS_Host_ReadDeviceBlocks+0x9a>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1eda:	6e 01       	movw	r12, r28
    1edc:	08 94       	sec
    1ede:	c1 1c       	adc	r12, r1
    1ee0:	d1 1c       	adc	r13, r1
    1ee2:	8f e1       	ldi	r24, 0x1F	; 31
    1ee4:	f6 01       	movw	r30, r12
    1ee6:	11 92       	st	Z+, r1
    1ee8:	8a 95       	dec	r24
    1eea:	e9 f7       	brne	.-6      	; 0x1ee6 <MS_Host_ReadDeviceBlocks+0x56>
		{
			.DataTransferLength = cpu_to_le32((uint32_t)Blocks * BlockSize),
    1eec:	b7 01       	movw	r22, r14
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	20 2f       	mov	r18, r16
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e0       	ldi	r20, 0x00	; 0
    1ef8:	50 e0       	ldi	r21, 0x00	; 0
    1efa:	67 d0       	rcall	.+206    	; 0x1fca <__mulsi3>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	89 87       	std	Y+9, r24	; 0x09
                                 void* BlockBuffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;

	MS_CommandBlockWrapper_t SCSICommandBlock = (MS_CommandBlockWrapper_t)
    1f02:	9a 87       	std	Y+10, r25	; 0x0a
    1f04:	ab 87       	std	Y+11, r26	; 0x0b
    1f06:	bc 87       	std	Y+12, r27	; 0x0c
    1f08:	80 e8       	ldi	r24, 0x80	; 128
    1f0a:	8d 87       	std	Y+13, r24	; 0x0d
    1f0c:	1e 87       	std	Y+14, r17	; 0x0e
    1f0e:	8a e0       	ldi	r24, 0x0A	; 10
    1f10:	8f 87       	std	Y+15, r24	; 0x0f
    1f12:	88 e2       	ldi	r24, 0x28	; 40
    1f14:	88 8b       	std	Y+16, r24	; 0x10
    1f16:	ba 8a       	std	Y+18, r11	; 0x12
    1f18:	ab 8a       	std	Y+19, r10	; 0x13
    1f1a:	9c 8a       	std	Y+20, r9	; 0x14
    1f1c:	8d 8a       	std	Y+21, r8	; 0x15
    1f1e:	08 8f       	std	Y+24, r16	; 0x18
    1f20:	c3 01       	movw	r24, r6
					Blocks,                 // LSB of Total Blocks to Read
					0x00                    // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, BlockBuffer);
    1f22:	b6 01       	movw	r22, r12
    1f24:	a2 01       	movw	r20, r4
    1f26:	37 dc       	rcall	.-1938   	; 0x1796 <MS_Host_SendCommand>
    1f28:	01 c0       	rjmp	.+2      	; 0x1f2c <MS_Host_ReadDeviceBlocks+0x9c>
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	6f 96       	adiw	r28, 0x1f	; 31
                                 const uint8_t Blocks,
                                 const uint16_t BlockSize,
                                 void* BlockBuffer)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
	  return HOST_SENDCONTROL_DeviceDisconnected;
    1f2e:	0f b6       	in	r0, 0x3f	; 63
					0x00                    // Unused (control)
				}
		};

	return MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, BlockBuffer);
}
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
    1f38:	df 91       	pop	r29
    1f3a:	cf 91       	pop	r28
    1f3c:	1f 91       	pop	r17
    1f3e:	0f 91       	pop	r16
    1f40:	ff 90       	pop	r15
    1f42:	ef 90       	pop	r14
    1f44:	df 90       	pop	r13
    1f46:	cf 90       	pop	r12
    1f48:	bf 90       	pop	r11
    1f4a:	af 90       	pop	r10
    1f4c:	9f 90       	pop	r9
    1f4e:	8f 90       	pop	r8
    1f50:	7f 90       	pop	r7
    1f52:	6f 90       	pop	r6
    1f54:	5f 90       	pop	r5
    1f56:	4f 90       	pop	r4
    1f58:	08 95       	ret

00001f5a <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1f5a:	90 91 c8 00 	lds	r25, 0x00C8
    1f5e:	95 ff       	sbrs	r25, 5
    1f60:	fc cf       	rjmp	.-8      	; 0x1f5a <Serial_putchar>
				UDR1 = DataByte;
    1f62:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	08 95       	ret

00001f6c <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1f6c:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1f70:	87 ff       	sbrs	r24, 7
    1f72:	08 c0       	rjmp	.+16     	; 0x1f84 <Serial_getchar+0x18>
    1f74:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1f78:	87 ff       	sbrs	r24, 7
    1f7a:	07 c0       	rjmp	.+14     	; 0x1f8a <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1f7c:	80 91 ce 00 	lds	r24, 0x00CE
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	08 95       	ret
	  return _FDEV_EOF;
    1f84:	8e ef       	ldi	r24, 0xFE	; 254
    1f86:	9f ef       	ldi	r25, 0xFF	; 255
    1f88:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1f8a:	8f ef       	ldi	r24, 0xFF	; 255
    1f8c:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1f8e:	08 95       	ret

00001f90 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1f90:	fc 01       	movw	r30, r24
	if (!(Stream))
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	51 f4       	brne	.+20     	; 0x1faa <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1f96:	ea e4       	ldi	r30, 0x4A	; 74
    1f98:	f1 e0       	ldi	r31, 0x01	; 1
    1f9a:	f0 93 59 01 	sts	0x0159, r31
    1f9e:	e0 93 58 01 	sts	0x0158, r30
		stdout = Stream;
    1fa2:	f0 93 5b 01 	sts	0x015B, r31
    1fa6:	e0 93 5a 01 	sts	0x015A, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1faa:	8e e0       	ldi	r24, 0x0E	; 14
    1fac:	df 01       	movw	r26, r30
    1fae:	1d 92       	st	X+, r1
    1fb0:	8a 95       	dec	r24
    1fb2:	e9 f7       	brne	.-6      	; 0x1fae <Serial_CreateStream+0x1e>
    1fb4:	83 e0       	ldi	r24, 0x03	; 3
    1fb6:	83 83       	std	Z+3, r24	; 0x03
    1fb8:	8d ea       	ldi	r24, 0xAD	; 173
    1fba:	9f e0       	ldi	r25, 0x0F	; 15
    1fbc:	91 87       	std	Z+9, r25	; 0x09
    1fbe:	80 87       	std	Z+8, r24	; 0x08
    1fc0:	86 eb       	ldi	r24, 0xB6	; 182
    1fc2:	9f e0       	ldi	r25, 0x0F	; 15
    1fc4:	93 87       	std	Z+11, r25	; 0x0b
    1fc6:	82 87       	std	Z+10, r24	; 0x0a
}
    1fc8:	08 95       	ret

00001fca <__mulsi3>:
    1fca:	62 9f       	mul	r22, r18
    1fcc:	d0 01       	movw	r26, r0
    1fce:	73 9f       	mul	r23, r19
    1fd0:	f0 01       	movw	r30, r0
    1fd2:	82 9f       	mul	r24, r18
    1fd4:	e0 0d       	add	r30, r0
    1fd6:	f1 1d       	adc	r31, r1
    1fd8:	64 9f       	mul	r22, r20
    1fda:	e0 0d       	add	r30, r0
    1fdc:	f1 1d       	adc	r31, r1
    1fde:	92 9f       	mul	r25, r18
    1fe0:	f0 0d       	add	r31, r0
    1fe2:	83 9f       	mul	r24, r19
    1fe4:	f0 0d       	add	r31, r0
    1fe6:	74 9f       	mul	r23, r20
    1fe8:	f0 0d       	add	r31, r0
    1fea:	65 9f       	mul	r22, r21
    1fec:	f0 0d       	add	r31, r0
    1fee:	99 27       	eor	r25, r25
    1ff0:	72 9f       	mul	r23, r18
    1ff2:	b0 0d       	add	r27, r0
    1ff4:	e1 1d       	adc	r30, r1
    1ff6:	f9 1f       	adc	r31, r25
    1ff8:	63 9f       	mul	r22, r19
    1ffa:	b0 0d       	add	r27, r0
    1ffc:	e1 1d       	adc	r30, r1
    1ffe:	f9 1f       	adc	r31, r25
    2000:	bd 01       	movw	r22, r26
    2002:	cf 01       	movw	r24, r30
    2004:	11 24       	eor	r1, r1
    2006:	08 95       	ret

00002008 <isgraph>:
    2008:	80 32       	cpi	r24, 0x20	; 32
    200a:	09 f0       	breq	.+2      	; 0x200e <isprint+0x2>

0000200c <isprint>:
    200c:	91 11       	cpse	r25, r1
    200e:	78 c2       	rjmp	.+1264   	; 0x2500 <__ctype_isfalse>
    2010:	80 52       	subi	r24, 0x20	; 32
    2012:	8f 55       	subi	r24, 0x5F	; 95
    2014:	e0 f7       	brcc	.-8      	; 0x200e <isprint+0x2>
    2016:	08 95       	ret

00002018 <fputc>:
    2018:	0f 93       	push	r16
    201a:	1f 93       	push	r17
    201c:	cf 93       	push	r28
    201e:	df 93       	push	r29
    2020:	8c 01       	movw	r16, r24
    2022:	eb 01       	movw	r28, r22
    2024:	8b 81       	ldd	r24, Y+3	; 0x03
    2026:	81 ff       	sbrs	r24, 1
    2028:	1b c0       	rjmp	.+54     	; 0x2060 <fputc+0x48>
    202a:	82 ff       	sbrs	r24, 2
    202c:	0d c0       	rjmp	.+26     	; 0x2048 <fputc+0x30>
    202e:	2e 81       	ldd	r18, Y+6	; 0x06
    2030:	3f 81       	ldd	r19, Y+7	; 0x07
    2032:	8c 81       	ldd	r24, Y+4	; 0x04
    2034:	9d 81       	ldd	r25, Y+5	; 0x05
    2036:	28 17       	cp	r18, r24
    2038:	39 07       	cpc	r19, r25
    203a:	64 f4       	brge	.+24     	; 0x2054 <fputc+0x3c>
    203c:	e8 81       	ld	r30, Y
    203e:	f9 81       	ldd	r31, Y+1	; 0x01
    2040:	01 93       	st	Z+, r16
    2042:	f9 83       	std	Y+1, r31	; 0x01
    2044:	e8 83       	st	Y, r30
    2046:	06 c0       	rjmp	.+12     	; 0x2054 <fputc+0x3c>
    2048:	e8 85       	ldd	r30, Y+8	; 0x08
    204a:	f9 85       	ldd	r31, Y+9	; 0x09
    204c:	80 2f       	mov	r24, r16
    204e:	09 95       	icall
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	31 f4       	brne	.+12     	; 0x2060 <fputc+0x48>
    2054:	8e 81       	ldd	r24, Y+6	; 0x06
    2056:	9f 81       	ldd	r25, Y+7	; 0x07
    2058:	01 96       	adiw	r24, 0x01	; 1
    205a:	9f 83       	std	Y+7, r25	; 0x07
    205c:	8e 83       	std	Y+6, r24	; 0x06
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <fputc+0x4c>
    2060:	0f ef       	ldi	r16, 0xFF	; 255
    2062:	1f ef       	ldi	r17, 0xFF	; 255
    2064:	c8 01       	movw	r24, r16
    2066:	df 91       	pop	r29
    2068:	cf 91       	pop	r28
    206a:	1f 91       	pop	r17
    206c:	0f 91       	pop	r16
    206e:	08 95       	ret

00002070 <printf_P>:
    2070:	cf 93       	push	r28
    2072:	df 93       	push	r29
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	fe 01       	movw	r30, r28
    207a:	35 96       	adiw	r30, 0x05	; 5
    207c:	61 91       	ld	r22, Z+
    207e:	71 91       	ld	r23, Z+
    2080:	80 91 5a 01 	lds	r24, 0x015A
    2084:	90 91 5b 01 	lds	r25, 0x015B
    2088:	dc 01       	movw	r26, r24
    208a:	13 96       	adiw	r26, 0x03	; 3
    208c:	2c 91       	ld	r18, X
    208e:	13 97       	sbiw	r26, 0x03	; 3
    2090:	28 60       	ori	r18, 0x08	; 8
    2092:	13 96       	adiw	r26, 0x03	; 3
    2094:	2c 93       	st	X, r18
    2096:	af 01       	movw	r20, r30
    2098:	39 d0       	rcall	.+114    	; 0x210c <vfprintf>
    209a:	e0 91 5a 01 	lds	r30, 0x015A
    209e:	f0 91 5b 01 	lds	r31, 0x015B
    20a2:	23 81       	ldd	r18, Z+3	; 0x03
    20a4:	27 7f       	andi	r18, 0xF7	; 247
    20a6:	23 83       	std	Z+3, r18	; 0x03
    20a8:	df 91       	pop	r29
    20aa:	cf 91       	pop	r28
    20ac:	08 95       	ret

000020ae <puts_P>:
    20ae:	0f 93       	push	r16
    20b0:	1f 93       	push	r17
    20b2:	cf 93       	push	r28
    20b4:	df 93       	push	r29
    20b6:	8c 01       	movw	r16, r24
    20b8:	e0 91 5a 01 	lds	r30, 0x015A
    20bc:	f0 91 5b 01 	lds	r31, 0x015B
    20c0:	83 81       	ldd	r24, Z+3	; 0x03
    20c2:	81 ff       	sbrs	r24, 1
    20c4:	1b c0       	rjmp	.+54     	; 0x20fc <puts_P+0x4e>
    20c6:	c0 e0       	ldi	r28, 0x00	; 0
    20c8:	d0 e0       	ldi	r29, 0x00	; 0
    20ca:	07 c0       	rjmp	.+14     	; 0x20da <puts_P+0x2c>
    20cc:	09 95       	icall
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	11 f0       	breq	.+4      	; 0x20d6 <puts_P+0x28>
    20d2:	cf ef       	ldi	r28, 0xFF	; 255
    20d4:	df ef       	ldi	r29, 0xFF	; 255
    20d6:	0f 5f       	subi	r16, 0xFF	; 255
    20d8:	1f 4f       	sbci	r17, 0xFF	; 255
    20da:	f8 01       	movw	r30, r16
    20dc:	84 91       	lpm	r24, Z
    20de:	60 91 5a 01 	lds	r22, 0x015A
    20e2:	70 91 5b 01 	lds	r23, 0x015B
    20e6:	db 01       	movw	r26, r22
    20e8:	18 96       	adiw	r26, 0x08	; 8
    20ea:	ed 91       	ld	r30, X+
    20ec:	fc 91       	ld	r31, X
    20ee:	19 97       	sbiw	r26, 0x09	; 9
    20f0:	88 23       	and	r24, r24
    20f2:	61 f7       	brne	.-40     	; 0x20cc <puts_P+0x1e>
    20f4:	8a e0       	ldi	r24, 0x0A	; 10
    20f6:	09 95       	icall
    20f8:	00 97       	sbiw	r24, 0x00	; 0
    20fa:	11 f0       	breq	.+4      	; 0x2100 <__stack+0x1>
    20fc:	cf ef       	ldi	r28, 0xFF	; 255
    20fe:	df ef       	ldi	r29, 0xFF	; 255
    2100:	ce 01       	movw	r24, r28
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	08 95       	ret

0000210c <vfprintf>:
    210c:	2f 92       	push	r2
    210e:	3f 92       	push	r3
    2110:	4f 92       	push	r4
    2112:	5f 92       	push	r5
    2114:	6f 92       	push	r6
    2116:	7f 92       	push	r7
    2118:	8f 92       	push	r8
    211a:	9f 92       	push	r9
    211c:	af 92       	push	r10
    211e:	bf 92       	push	r11
    2120:	cf 92       	push	r12
    2122:	df 92       	push	r13
    2124:	ef 92       	push	r14
    2126:	ff 92       	push	r15
    2128:	0f 93       	push	r16
    212a:	1f 93       	push	r17
    212c:	cf 93       	push	r28
    212e:	df 93       	push	r29
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	2d 97       	sbiw	r28, 0x0d	; 13
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	3c 01       	movw	r6, r24
    2142:	7d 87       	std	Y+13, r23	; 0x0d
    2144:	6c 87       	std	Y+12, r22	; 0x0c
    2146:	5a 01       	movw	r10, r20
    2148:	fc 01       	movw	r30, r24
    214a:	17 82       	std	Z+7, r1	; 0x07
    214c:	16 82       	std	Z+6, r1	; 0x06
    214e:	83 81       	ldd	r24, Z+3	; 0x03
    2150:	81 ff       	sbrs	r24, 1
    2152:	bb c1       	rjmp	.+886    	; 0x24ca <vfprintf+0x3be>
    2154:	2e 01       	movw	r4, r28
    2156:	08 94       	sec
    2158:	41 1c       	adc	r4, r1
    215a:	51 1c       	adc	r5, r1
    215c:	f3 01       	movw	r30, r6
    215e:	93 81       	ldd	r25, Z+3	; 0x03
    2160:	ec 85       	ldd	r30, Y+12	; 0x0c
    2162:	fd 85       	ldd	r31, Y+13	; 0x0d
    2164:	93 fd       	sbrc	r25, 3
    2166:	85 91       	lpm	r24, Z+
    2168:	93 ff       	sbrs	r25, 3
    216a:	81 91       	ld	r24, Z+
    216c:	fd 87       	std	Y+13, r31	; 0x0d
    216e:	ec 87       	std	Y+12, r30	; 0x0c
    2170:	88 23       	and	r24, r24
    2172:	09 f4       	brne	.+2      	; 0x2176 <vfprintf+0x6a>
    2174:	a6 c1       	rjmp	.+844    	; 0x24c2 <vfprintf+0x3b6>
    2176:	85 32       	cpi	r24, 0x25	; 37
    2178:	41 f4       	brne	.+16     	; 0x218a <vfprintf+0x7e>
    217a:	93 fd       	sbrc	r25, 3
    217c:	85 91       	lpm	r24, Z+
    217e:	93 ff       	sbrs	r25, 3
    2180:	81 91       	ld	r24, Z+
    2182:	fd 87       	std	Y+13, r31	; 0x0d
    2184:	ec 87       	std	Y+12, r30	; 0x0c
    2186:	85 32       	cpi	r24, 0x25	; 37
    2188:	21 f4       	brne	.+8      	; 0x2192 <vfprintf+0x86>
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	b3 01       	movw	r22, r6
    218e:	44 df       	rcall	.-376    	; 0x2018 <fputc>
    2190:	e5 cf       	rjmp	.-54     	; 0x215c <vfprintf+0x50>
    2192:	ff 24       	eor	r15, r15
    2194:	ee 24       	eor	r14, r14
    2196:	10 e0       	ldi	r17, 0x00	; 0
    2198:	10 32       	cpi	r17, 0x20	; 32
    219a:	b0 f4       	brcc	.+44     	; 0x21c8 <vfprintf+0xbc>
    219c:	8b 32       	cpi	r24, 0x2B	; 43
    219e:	69 f0       	breq	.+26     	; 0x21ba <vfprintf+0xae>
    21a0:	8c 32       	cpi	r24, 0x2C	; 44
    21a2:	28 f4       	brcc	.+10     	; 0x21ae <vfprintf+0xa2>
    21a4:	80 32       	cpi	r24, 0x20	; 32
    21a6:	51 f0       	breq	.+20     	; 0x21bc <vfprintf+0xb0>
    21a8:	83 32       	cpi	r24, 0x23	; 35
    21aa:	71 f4       	brne	.+28     	; 0x21c8 <vfprintf+0xbc>
    21ac:	0b c0       	rjmp	.+22     	; 0x21c4 <vfprintf+0xb8>
    21ae:	8d 32       	cpi	r24, 0x2D	; 45
    21b0:	39 f0       	breq	.+14     	; 0x21c0 <vfprintf+0xb4>
    21b2:	80 33       	cpi	r24, 0x30	; 48
    21b4:	49 f4       	brne	.+18     	; 0x21c8 <vfprintf+0xbc>
    21b6:	11 60       	ori	r17, 0x01	; 1
    21b8:	2c c0       	rjmp	.+88     	; 0x2212 <vfprintf+0x106>
    21ba:	12 60       	ori	r17, 0x02	; 2
    21bc:	14 60       	ori	r17, 0x04	; 4
    21be:	29 c0       	rjmp	.+82     	; 0x2212 <vfprintf+0x106>
    21c0:	18 60       	ori	r17, 0x08	; 8
    21c2:	27 c0       	rjmp	.+78     	; 0x2212 <vfprintf+0x106>
    21c4:	10 61       	ori	r17, 0x10	; 16
    21c6:	25 c0       	rjmp	.+74     	; 0x2212 <vfprintf+0x106>
    21c8:	17 fd       	sbrc	r17, 7
    21ca:	2e c0       	rjmp	.+92     	; 0x2228 <vfprintf+0x11c>
    21cc:	28 2f       	mov	r18, r24
    21ce:	20 53       	subi	r18, 0x30	; 48
    21d0:	2a 30       	cpi	r18, 0x0A	; 10
    21d2:	98 f4       	brcc	.+38     	; 0x21fa <vfprintf+0xee>
    21d4:	16 ff       	sbrs	r17, 6
    21d6:	08 c0       	rjmp	.+16     	; 0x21e8 <vfprintf+0xdc>
    21d8:	8f 2d       	mov	r24, r15
    21da:	88 0f       	add	r24, r24
    21dc:	f8 2e       	mov	r15, r24
    21de:	ff 0c       	add	r15, r15
    21e0:	ff 0c       	add	r15, r15
    21e2:	f8 0e       	add	r15, r24
    21e4:	f2 0e       	add	r15, r18
    21e6:	15 c0       	rjmp	.+42     	; 0x2212 <vfprintf+0x106>
    21e8:	8e 2d       	mov	r24, r14
    21ea:	88 0f       	add	r24, r24
    21ec:	e8 2e       	mov	r14, r24
    21ee:	ee 0c       	add	r14, r14
    21f0:	ee 0c       	add	r14, r14
    21f2:	e8 0e       	add	r14, r24
    21f4:	e2 0e       	add	r14, r18
    21f6:	10 62       	ori	r17, 0x20	; 32
    21f8:	0c c0       	rjmp	.+24     	; 0x2212 <vfprintf+0x106>
    21fa:	8e 32       	cpi	r24, 0x2E	; 46
    21fc:	21 f4       	brne	.+8      	; 0x2206 <vfprintf+0xfa>
    21fe:	16 fd       	sbrc	r17, 6
    2200:	60 c1       	rjmp	.+704    	; 0x24c2 <vfprintf+0x3b6>
    2202:	10 64       	ori	r17, 0x40	; 64
    2204:	06 c0       	rjmp	.+12     	; 0x2212 <vfprintf+0x106>
    2206:	8c 36       	cpi	r24, 0x6C	; 108
    2208:	11 f4       	brne	.+4      	; 0x220e <vfprintf+0x102>
    220a:	10 68       	ori	r17, 0x80	; 128
    220c:	02 c0       	rjmp	.+4      	; 0x2212 <vfprintf+0x106>
    220e:	88 36       	cpi	r24, 0x68	; 104
    2210:	59 f4       	brne	.+22     	; 0x2228 <vfprintf+0x11c>
    2212:	ec 85       	ldd	r30, Y+12	; 0x0c
    2214:	fd 85       	ldd	r31, Y+13	; 0x0d
    2216:	93 fd       	sbrc	r25, 3
    2218:	85 91       	lpm	r24, Z+
    221a:	93 ff       	sbrs	r25, 3
    221c:	81 91       	ld	r24, Z+
    221e:	fd 87       	std	Y+13, r31	; 0x0d
    2220:	ec 87       	std	Y+12, r30	; 0x0c
    2222:	88 23       	and	r24, r24
    2224:	09 f0       	breq	.+2      	; 0x2228 <vfprintf+0x11c>
    2226:	b8 cf       	rjmp	.-144    	; 0x2198 <vfprintf+0x8c>
    2228:	98 2f       	mov	r25, r24
    222a:	95 54       	subi	r25, 0x45	; 69
    222c:	93 30       	cpi	r25, 0x03	; 3
    222e:	18 f0       	brcs	.+6      	; 0x2236 <vfprintf+0x12a>
    2230:	90 52       	subi	r25, 0x20	; 32
    2232:	93 30       	cpi	r25, 0x03	; 3
    2234:	38 f4       	brcc	.+14     	; 0x2244 <vfprintf+0x138>
    2236:	24 e0       	ldi	r18, 0x04	; 4
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	a2 0e       	add	r10, r18
    223c:	b3 1e       	adc	r11, r19
    223e:	3f e3       	ldi	r19, 0x3F	; 63
    2240:	39 83       	std	Y+1, r19	; 0x01
    2242:	0f c0       	rjmp	.+30     	; 0x2262 <vfprintf+0x156>
    2244:	83 36       	cpi	r24, 0x63	; 99
    2246:	31 f0       	breq	.+12     	; 0x2254 <vfprintf+0x148>
    2248:	83 37       	cpi	r24, 0x73	; 115
    224a:	81 f0       	breq	.+32     	; 0x226c <vfprintf+0x160>
    224c:	83 35       	cpi	r24, 0x53	; 83
    224e:	09 f0       	breq	.+2      	; 0x2252 <vfprintf+0x146>
    2250:	56 c0       	rjmp	.+172    	; 0x22fe <vfprintf+0x1f2>
    2252:	21 c0       	rjmp	.+66     	; 0x2296 <vfprintf+0x18a>
    2254:	f5 01       	movw	r30, r10
    2256:	80 81       	ld	r24, Z
    2258:	89 83       	std	Y+1, r24	; 0x01
    225a:	22 e0       	ldi	r18, 0x02	; 2
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	a2 0e       	add	r10, r18
    2260:	b3 1e       	adc	r11, r19
    2262:	21 e0       	ldi	r18, 0x01	; 1
    2264:	c2 2e       	mov	r12, r18
    2266:	d1 2c       	mov	r13, r1
    2268:	42 01       	movw	r8, r4
    226a:	13 c0       	rjmp	.+38     	; 0x2292 <vfprintf+0x186>
    226c:	92 e0       	ldi	r25, 0x02	; 2
    226e:	29 2e       	mov	r2, r25
    2270:	31 2c       	mov	r3, r1
    2272:	2a 0c       	add	r2, r10
    2274:	3b 1c       	adc	r3, r11
    2276:	f5 01       	movw	r30, r10
    2278:	80 80       	ld	r8, Z
    227a:	91 80       	ldd	r9, Z+1	; 0x01
    227c:	16 ff       	sbrs	r17, 6
    227e:	03 c0       	rjmp	.+6      	; 0x2286 <vfprintf+0x17a>
    2280:	6f 2d       	mov	r22, r15
    2282:	70 e0       	ldi	r23, 0x00	; 0
    2284:	02 c0       	rjmp	.+4      	; 0x228a <vfprintf+0x17e>
    2286:	6f ef       	ldi	r22, 0xFF	; 255
    2288:	7f ef       	ldi	r23, 0xFF	; 255
    228a:	c4 01       	movw	r24, r8
    228c:	47 d1       	rcall	.+654    	; 0x251c <strnlen>
    228e:	6c 01       	movw	r12, r24
    2290:	51 01       	movw	r10, r2
    2292:	1f 77       	andi	r17, 0x7F	; 127
    2294:	14 c0       	rjmp	.+40     	; 0x22be <vfprintf+0x1b2>
    2296:	82 e0       	ldi	r24, 0x02	; 2
    2298:	28 2e       	mov	r2, r24
    229a:	31 2c       	mov	r3, r1
    229c:	2a 0c       	add	r2, r10
    229e:	3b 1c       	adc	r3, r11
    22a0:	f5 01       	movw	r30, r10
    22a2:	80 80       	ld	r8, Z
    22a4:	91 80       	ldd	r9, Z+1	; 0x01
    22a6:	16 ff       	sbrs	r17, 6
    22a8:	03 c0       	rjmp	.+6      	; 0x22b0 <vfprintf+0x1a4>
    22aa:	6f 2d       	mov	r22, r15
    22ac:	70 e0       	ldi	r23, 0x00	; 0
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <vfprintf+0x1a8>
    22b0:	6f ef       	ldi	r22, 0xFF	; 255
    22b2:	7f ef       	ldi	r23, 0xFF	; 255
    22b4:	c4 01       	movw	r24, r8
    22b6:	27 d1       	rcall	.+590    	; 0x2506 <strnlen_P>
    22b8:	6c 01       	movw	r12, r24
    22ba:	10 68       	ori	r17, 0x80	; 128
    22bc:	51 01       	movw	r10, r2
    22be:	13 fd       	sbrc	r17, 3
    22c0:	1a c0       	rjmp	.+52     	; 0x22f6 <vfprintf+0x1ea>
    22c2:	05 c0       	rjmp	.+10     	; 0x22ce <vfprintf+0x1c2>
    22c4:	80 e2       	ldi	r24, 0x20	; 32
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	b3 01       	movw	r22, r6
    22ca:	a6 de       	rcall	.-692    	; 0x2018 <fputc>
    22cc:	ea 94       	dec	r14
    22ce:	8e 2d       	mov	r24, r14
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	c8 16       	cp	r12, r24
    22d4:	d9 06       	cpc	r13, r25
    22d6:	b0 f3       	brcs	.-20     	; 0x22c4 <vfprintf+0x1b8>
    22d8:	0e c0       	rjmp	.+28     	; 0x22f6 <vfprintf+0x1ea>
    22da:	f4 01       	movw	r30, r8
    22dc:	17 fd       	sbrc	r17, 7
    22de:	85 91       	lpm	r24, Z+
    22e0:	17 ff       	sbrs	r17, 7
    22e2:	81 91       	ld	r24, Z+
    22e4:	4f 01       	movw	r8, r30
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	b3 01       	movw	r22, r6
    22ea:	96 de       	rcall	.-724    	; 0x2018 <fputc>
    22ec:	e1 10       	cpse	r14, r1
    22ee:	ea 94       	dec	r14
    22f0:	08 94       	sec
    22f2:	c1 08       	sbc	r12, r1
    22f4:	d1 08       	sbc	r13, r1
    22f6:	c1 14       	cp	r12, r1
    22f8:	d1 04       	cpc	r13, r1
    22fa:	79 f7       	brne	.-34     	; 0x22da <vfprintf+0x1ce>
    22fc:	df c0       	rjmp	.+446    	; 0x24bc <vfprintf+0x3b0>
    22fe:	84 36       	cpi	r24, 0x64	; 100
    2300:	11 f0       	breq	.+4      	; 0x2306 <vfprintf+0x1fa>
    2302:	89 36       	cpi	r24, 0x69	; 105
    2304:	49 f5       	brne	.+82     	; 0x2358 <vfprintf+0x24c>
    2306:	f5 01       	movw	r30, r10
    2308:	17 ff       	sbrs	r17, 7
    230a:	07 c0       	rjmp	.+14     	; 0x231a <vfprintf+0x20e>
    230c:	80 81       	ld	r24, Z
    230e:	91 81       	ldd	r25, Z+1	; 0x01
    2310:	a2 81       	ldd	r26, Z+2	; 0x02
    2312:	b3 81       	ldd	r27, Z+3	; 0x03
    2314:	24 e0       	ldi	r18, 0x04	; 4
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	08 c0       	rjmp	.+16     	; 0x232a <vfprintf+0x21e>
    231a:	80 81       	ld	r24, Z
    231c:	91 81       	ldd	r25, Z+1	; 0x01
    231e:	aa 27       	eor	r26, r26
    2320:	97 fd       	sbrc	r25, 7
    2322:	a0 95       	com	r26
    2324:	ba 2f       	mov	r27, r26
    2326:	22 e0       	ldi	r18, 0x02	; 2
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	a2 0e       	add	r10, r18
    232c:	b3 1e       	adc	r11, r19
    232e:	01 2f       	mov	r16, r17
    2330:	0f 76       	andi	r16, 0x6F	; 111
    2332:	b7 ff       	sbrs	r27, 7
    2334:	08 c0       	rjmp	.+16     	; 0x2346 <vfprintf+0x23a>
    2336:	b0 95       	com	r27
    2338:	a0 95       	com	r26
    233a:	90 95       	com	r25
    233c:	81 95       	neg	r24
    233e:	9f 4f       	sbci	r25, 0xFF	; 255
    2340:	af 4f       	sbci	r26, 0xFF	; 255
    2342:	bf 4f       	sbci	r27, 0xFF	; 255
    2344:	00 68       	ori	r16, 0x80	; 128
    2346:	bc 01       	movw	r22, r24
    2348:	cd 01       	movw	r24, r26
    234a:	a2 01       	movw	r20, r4
    234c:	2a e0       	ldi	r18, 0x0A	; 10
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	f0 d0       	rcall	.+480    	; 0x2532 <__ultoa_invert>
    2352:	d8 2e       	mov	r13, r24
    2354:	d4 18       	sub	r13, r4
    2356:	3e c0       	rjmp	.+124    	; 0x23d4 <vfprintf+0x2c8>
    2358:	85 37       	cpi	r24, 0x75	; 117
    235a:	21 f4       	brne	.+8      	; 0x2364 <vfprintf+0x258>
    235c:	1f 7e       	andi	r17, 0xEF	; 239
    235e:	2a e0       	ldi	r18, 0x0A	; 10
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	20 c0       	rjmp	.+64     	; 0x23a4 <vfprintf+0x298>
    2364:	19 7f       	andi	r17, 0xF9	; 249
    2366:	8f 36       	cpi	r24, 0x6F	; 111
    2368:	a9 f0       	breq	.+42     	; 0x2394 <vfprintf+0x288>
    236a:	80 37       	cpi	r24, 0x70	; 112
    236c:	20 f4       	brcc	.+8      	; 0x2376 <vfprintf+0x26a>
    236e:	88 35       	cpi	r24, 0x58	; 88
    2370:	09 f0       	breq	.+2      	; 0x2374 <vfprintf+0x268>
    2372:	a7 c0       	rjmp	.+334    	; 0x24c2 <vfprintf+0x3b6>
    2374:	0b c0       	rjmp	.+22     	; 0x238c <vfprintf+0x280>
    2376:	80 37       	cpi	r24, 0x70	; 112
    2378:	21 f0       	breq	.+8      	; 0x2382 <vfprintf+0x276>
    237a:	88 37       	cpi	r24, 0x78	; 120
    237c:	09 f0       	breq	.+2      	; 0x2380 <vfprintf+0x274>
    237e:	a1 c0       	rjmp	.+322    	; 0x24c2 <vfprintf+0x3b6>
    2380:	01 c0       	rjmp	.+2      	; 0x2384 <vfprintf+0x278>
    2382:	10 61       	ori	r17, 0x10	; 16
    2384:	14 ff       	sbrs	r17, 4
    2386:	09 c0       	rjmp	.+18     	; 0x239a <vfprintf+0x28e>
    2388:	14 60       	ori	r17, 0x04	; 4
    238a:	07 c0       	rjmp	.+14     	; 0x239a <vfprintf+0x28e>
    238c:	14 ff       	sbrs	r17, 4
    238e:	08 c0       	rjmp	.+16     	; 0x23a0 <vfprintf+0x294>
    2390:	16 60       	ori	r17, 0x06	; 6
    2392:	06 c0       	rjmp	.+12     	; 0x23a0 <vfprintf+0x294>
    2394:	28 e0       	ldi	r18, 0x08	; 8
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	05 c0       	rjmp	.+10     	; 0x23a4 <vfprintf+0x298>
    239a:	20 e1       	ldi	r18, 0x10	; 16
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	02 c0       	rjmp	.+4      	; 0x23a4 <vfprintf+0x298>
    23a0:	20 e1       	ldi	r18, 0x10	; 16
    23a2:	32 e0       	ldi	r19, 0x02	; 2
    23a4:	f5 01       	movw	r30, r10
    23a6:	17 ff       	sbrs	r17, 7
    23a8:	07 c0       	rjmp	.+14     	; 0x23b8 <vfprintf+0x2ac>
    23aa:	60 81       	ld	r22, Z
    23ac:	71 81       	ldd	r23, Z+1	; 0x01
    23ae:	82 81       	ldd	r24, Z+2	; 0x02
    23b0:	93 81       	ldd	r25, Z+3	; 0x03
    23b2:	44 e0       	ldi	r20, 0x04	; 4
    23b4:	50 e0       	ldi	r21, 0x00	; 0
    23b6:	06 c0       	rjmp	.+12     	; 0x23c4 <vfprintf+0x2b8>
    23b8:	60 81       	ld	r22, Z
    23ba:	71 81       	ldd	r23, Z+1	; 0x01
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	42 e0       	ldi	r20, 0x02	; 2
    23c2:	50 e0       	ldi	r21, 0x00	; 0
    23c4:	a4 0e       	add	r10, r20
    23c6:	b5 1e       	adc	r11, r21
    23c8:	a2 01       	movw	r20, r4
    23ca:	b3 d0       	rcall	.+358    	; 0x2532 <__ultoa_invert>
    23cc:	d8 2e       	mov	r13, r24
    23ce:	d4 18       	sub	r13, r4
    23d0:	01 2f       	mov	r16, r17
    23d2:	0f 77       	andi	r16, 0x7F	; 127
    23d4:	06 ff       	sbrs	r16, 6
    23d6:	09 c0       	rjmp	.+18     	; 0x23ea <vfprintf+0x2de>
    23d8:	0e 7f       	andi	r16, 0xFE	; 254
    23da:	df 14       	cp	r13, r15
    23dc:	30 f4       	brcc	.+12     	; 0x23ea <vfprintf+0x2de>
    23de:	04 ff       	sbrs	r16, 4
    23e0:	06 c0       	rjmp	.+12     	; 0x23ee <vfprintf+0x2e2>
    23e2:	02 fd       	sbrc	r16, 2
    23e4:	04 c0       	rjmp	.+8      	; 0x23ee <vfprintf+0x2e2>
    23e6:	0f 7e       	andi	r16, 0xEF	; 239
    23e8:	02 c0       	rjmp	.+4      	; 0x23ee <vfprintf+0x2e2>
    23ea:	1d 2d       	mov	r17, r13
    23ec:	01 c0       	rjmp	.+2      	; 0x23f0 <vfprintf+0x2e4>
    23ee:	1f 2d       	mov	r17, r15
    23f0:	80 2f       	mov	r24, r16
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	04 ff       	sbrs	r16, 4
    23f6:	0c c0       	rjmp	.+24     	; 0x2410 <vfprintf+0x304>
    23f8:	fe 01       	movw	r30, r28
    23fa:	ed 0d       	add	r30, r13
    23fc:	f1 1d       	adc	r31, r1
    23fe:	20 81       	ld	r18, Z
    2400:	20 33       	cpi	r18, 0x30	; 48
    2402:	11 f4       	brne	.+4      	; 0x2408 <vfprintf+0x2fc>
    2404:	09 7e       	andi	r16, 0xE9	; 233
    2406:	09 c0       	rjmp	.+18     	; 0x241a <vfprintf+0x30e>
    2408:	02 ff       	sbrs	r16, 2
    240a:	06 c0       	rjmp	.+12     	; 0x2418 <vfprintf+0x30c>
    240c:	1e 5f       	subi	r17, 0xFE	; 254
    240e:	05 c0       	rjmp	.+10     	; 0x241a <vfprintf+0x30e>
    2410:	86 78       	andi	r24, 0x86	; 134
    2412:	90 70       	andi	r25, 0x00	; 0
    2414:	00 97       	sbiw	r24, 0x00	; 0
    2416:	09 f0       	breq	.+2      	; 0x241a <vfprintf+0x30e>
    2418:	1f 5f       	subi	r17, 0xFF	; 255
    241a:	80 2e       	mov	r8, r16
    241c:	99 24       	eor	r9, r9
    241e:	03 fd       	sbrc	r16, 3
    2420:	11 c0       	rjmp	.+34     	; 0x2444 <vfprintf+0x338>
    2422:	00 ff       	sbrs	r16, 0
    2424:	0c c0       	rjmp	.+24     	; 0x243e <vfprintf+0x332>
    2426:	fd 2c       	mov	r15, r13
    2428:	1e 15       	cp	r17, r14
    242a:	48 f4       	brcc	.+18     	; 0x243e <vfprintf+0x332>
    242c:	fe 0c       	add	r15, r14
    242e:	f1 1a       	sub	r15, r17
    2430:	1e 2d       	mov	r17, r14
    2432:	05 c0       	rjmp	.+10     	; 0x243e <vfprintf+0x332>
    2434:	80 e2       	ldi	r24, 0x20	; 32
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	b3 01       	movw	r22, r6
    243a:	ee dd       	rcall	.-1060   	; 0x2018 <fputc>
    243c:	1f 5f       	subi	r17, 0xFF	; 255
    243e:	1e 15       	cp	r17, r14
    2440:	c8 f3       	brcs	.-14     	; 0x2434 <vfprintf+0x328>
    2442:	04 c0       	rjmp	.+8      	; 0x244c <vfprintf+0x340>
    2444:	1e 15       	cp	r17, r14
    2446:	10 f4       	brcc	.+4      	; 0x244c <vfprintf+0x340>
    2448:	e1 1a       	sub	r14, r17
    244a:	01 c0       	rjmp	.+2      	; 0x244e <vfprintf+0x342>
    244c:	ee 24       	eor	r14, r14
    244e:	84 fe       	sbrs	r8, 4
    2450:	0e c0       	rjmp	.+28     	; 0x246e <vfprintf+0x362>
    2452:	80 e3       	ldi	r24, 0x30	; 48
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	b3 01       	movw	r22, r6
    2458:	df dd       	rcall	.-1090   	; 0x2018 <fputc>
    245a:	82 fe       	sbrs	r8, 2
    245c:	1d c0       	rjmp	.+58     	; 0x2498 <vfprintf+0x38c>
    245e:	81 fe       	sbrs	r8, 1
    2460:	03 c0       	rjmp	.+6      	; 0x2468 <vfprintf+0x35c>
    2462:	88 e5       	ldi	r24, 0x58	; 88
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	10 c0       	rjmp	.+32     	; 0x2488 <vfprintf+0x37c>
    2468:	88 e7       	ldi	r24, 0x78	; 120
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	0d c0       	rjmp	.+26     	; 0x2488 <vfprintf+0x37c>
    246e:	c4 01       	movw	r24, r8
    2470:	86 78       	andi	r24, 0x86	; 134
    2472:	90 70       	andi	r25, 0x00	; 0
    2474:	00 97       	sbiw	r24, 0x00	; 0
    2476:	81 f0       	breq	.+32     	; 0x2498 <vfprintf+0x38c>
    2478:	81 fc       	sbrc	r8, 1
    247a:	02 c0       	rjmp	.+4      	; 0x2480 <vfprintf+0x374>
    247c:	80 e2       	ldi	r24, 0x20	; 32
    247e:	01 c0       	rjmp	.+2      	; 0x2482 <vfprintf+0x376>
    2480:	8b e2       	ldi	r24, 0x2B	; 43
    2482:	07 fd       	sbrc	r16, 7
    2484:	8d e2       	ldi	r24, 0x2D	; 45
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	b3 01       	movw	r22, r6
    248a:	c6 dd       	rcall	.-1140   	; 0x2018 <fputc>
    248c:	05 c0       	rjmp	.+10     	; 0x2498 <vfprintf+0x38c>
    248e:	80 e3       	ldi	r24, 0x30	; 48
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	b3 01       	movw	r22, r6
    2494:	c1 dd       	rcall	.-1150   	; 0x2018 <fputc>
    2496:	fa 94       	dec	r15
    2498:	df 14       	cp	r13, r15
    249a:	c8 f3       	brcs	.-14     	; 0x248e <vfprintf+0x382>
    249c:	da 94       	dec	r13
    249e:	f2 01       	movw	r30, r4
    24a0:	ed 0d       	add	r30, r13
    24a2:	f1 1d       	adc	r31, r1
    24a4:	80 81       	ld	r24, Z
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	b3 01       	movw	r22, r6
    24aa:	b6 dd       	rcall	.-1172   	; 0x2018 <fputc>
    24ac:	dd 20       	and	r13, r13
    24ae:	b1 f7       	brne	.-20     	; 0x249c <vfprintf+0x390>
    24b0:	05 c0       	rjmp	.+10     	; 0x24bc <vfprintf+0x3b0>
    24b2:	80 e2       	ldi	r24, 0x20	; 32
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	b3 01       	movw	r22, r6
    24b8:	af dd       	rcall	.-1186   	; 0x2018 <fputc>
    24ba:	ea 94       	dec	r14
    24bc:	ee 20       	and	r14, r14
    24be:	c9 f7       	brne	.-14     	; 0x24b2 <vfprintf+0x3a6>
    24c0:	4d ce       	rjmp	.-870    	; 0x215c <vfprintf+0x50>
    24c2:	f3 01       	movw	r30, r6
    24c4:	86 81       	ldd	r24, Z+6	; 0x06
    24c6:	97 81       	ldd	r25, Z+7	; 0x07
    24c8:	02 c0       	rjmp	.+4      	; 0x24ce <vfprintf+0x3c2>
    24ca:	8f ef       	ldi	r24, 0xFF	; 255
    24cc:	9f ef       	ldi	r25, 0xFF	; 255
    24ce:	2d 96       	adiw	r28, 0x0d	; 13
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	de bf       	out	0x3e, r29	; 62
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	df 91       	pop	r29
    24dc:	cf 91       	pop	r28
    24de:	1f 91       	pop	r17
    24e0:	0f 91       	pop	r16
    24e2:	ff 90       	pop	r15
    24e4:	ef 90       	pop	r14
    24e6:	df 90       	pop	r13
    24e8:	cf 90       	pop	r12
    24ea:	bf 90       	pop	r11
    24ec:	af 90       	pop	r10
    24ee:	9f 90       	pop	r9
    24f0:	8f 90       	pop	r8
    24f2:	7f 90       	pop	r7
    24f4:	6f 90       	pop	r6
    24f6:	5f 90       	pop	r5
    24f8:	4f 90       	pop	r4
    24fa:	3f 90       	pop	r3
    24fc:	2f 90       	pop	r2
    24fe:	08 95       	ret

00002500 <__ctype_isfalse>:
    2500:	99 27       	eor	r25, r25
    2502:	88 27       	eor	r24, r24

00002504 <__ctype_istrue>:
    2504:	08 95       	ret

00002506 <strnlen_P>:
    2506:	fc 01       	movw	r30, r24
    2508:	05 90       	lpm	r0, Z+
    250a:	61 50       	subi	r22, 0x01	; 1
    250c:	70 40       	sbci	r23, 0x00	; 0
    250e:	01 10       	cpse	r0, r1
    2510:	d8 f7       	brcc	.-10     	; 0x2508 <strnlen_P+0x2>
    2512:	80 95       	com	r24
    2514:	90 95       	com	r25
    2516:	8e 0f       	add	r24, r30
    2518:	9f 1f       	adc	r25, r31
    251a:	08 95       	ret

0000251c <strnlen>:
    251c:	fc 01       	movw	r30, r24
    251e:	61 50       	subi	r22, 0x01	; 1
    2520:	70 40       	sbci	r23, 0x00	; 0
    2522:	01 90       	ld	r0, Z+
    2524:	01 10       	cpse	r0, r1
    2526:	d8 f7       	brcc	.-10     	; 0x251e <strnlen+0x2>
    2528:	80 95       	com	r24
    252a:	90 95       	com	r25
    252c:	8e 0f       	add	r24, r30
    252e:	9f 1f       	adc	r25, r31
    2530:	08 95       	ret

00002532 <__ultoa_invert>:
    2532:	fa 01       	movw	r30, r20
    2534:	aa 27       	eor	r26, r26
    2536:	28 30       	cpi	r18, 0x08	; 8
    2538:	51 f1       	breq	.+84     	; 0x258e <__ultoa_invert+0x5c>
    253a:	20 31       	cpi	r18, 0x10	; 16
    253c:	81 f1       	breq	.+96     	; 0x259e <__ultoa_invert+0x6c>
    253e:	e8 94       	clt
    2540:	6f 93       	push	r22
    2542:	6e 7f       	andi	r22, 0xFE	; 254
    2544:	6e 5f       	subi	r22, 0xFE	; 254
    2546:	7f 4f       	sbci	r23, 0xFF	; 255
    2548:	8f 4f       	sbci	r24, 0xFF	; 255
    254a:	9f 4f       	sbci	r25, 0xFF	; 255
    254c:	af 4f       	sbci	r26, 0xFF	; 255
    254e:	b1 e0       	ldi	r27, 0x01	; 1
    2550:	3e d0       	rcall	.+124    	; 0x25ce <__ultoa_invert+0x9c>
    2552:	b4 e0       	ldi	r27, 0x04	; 4
    2554:	3c d0       	rcall	.+120    	; 0x25ce <__ultoa_invert+0x9c>
    2556:	67 0f       	add	r22, r23
    2558:	78 1f       	adc	r23, r24
    255a:	89 1f       	adc	r24, r25
    255c:	9a 1f       	adc	r25, r26
    255e:	a1 1d       	adc	r26, r1
    2560:	68 0f       	add	r22, r24
    2562:	79 1f       	adc	r23, r25
    2564:	8a 1f       	adc	r24, r26
    2566:	91 1d       	adc	r25, r1
    2568:	a1 1d       	adc	r26, r1
    256a:	6a 0f       	add	r22, r26
    256c:	71 1d       	adc	r23, r1
    256e:	81 1d       	adc	r24, r1
    2570:	91 1d       	adc	r25, r1
    2572:	a1 1d       	adc	r26, r1
    2574:	20 d0       	rcall	.+64     	; 0x25b6 <__ultoa_invert+0x84>
    2576:	09 f4       	brne	.+2      	; 0x257a <__ultoa_invert+0x48>
    2578:	68 94       	set
    257a:	3f 91       	pop	r19
    257c:	2a e0       	ldi	r18, 0x0A	; 10
    257e:	26 9f       	mul	r18, r22
    2580:	11 24       	eor	r1, r1
    2582:	30 19       	sub	r19, r0
    2584:	30 5d       	subi	r19, 0xD0	; 208
    2586:	31 93       	st	Z+, r19
    2588:	de f6       	brtc	.-74     	; 0x2540 <__ultoa_invert+0xe>
    258a:	cf 01       	movw	r24, r30
    258c:	08 95       	ret
    258e:	46 2f       	mov	r20, r22
    2590:	47 70       	andi	r20, 0x07	; 7
    2592:	40 5d       	subi	r20, 0xD0	; 208
    2594:	41 93       	st	Z+, r20
    2596:	b3 e0       	ldi	r27, 0x03	; 3
    2598:	0f d0       	rcall	.+30     	; 0x25b8 <__ultoa_invert+0x86>
    259a:	c9 f7       	brne	.-14     	; 0x258e <__ultoa_invert+0x5c>
    259c:	f6 cf       	rjmp	.-20     	; 0x258a <__ultoa_invert+0x58>
    259e:	46 2f       	mov	r20, r22
    25a0:	4f 70       	andi	r20, 0x0F	; 15
    25a2:	40 5d       	subi	r20, 0xD0	; 208
    25a4:	4a 33       	cpi	r20, 0x3A	; 58
    25a6:	18 f0       	brcs	.+6      	; 0x25ae <__ultoa_invert+0x7c>
    25a8:	49 5d       	subi	r20, 0xD9	; 217
    25aa:	31 fd       	sbrc	r19, 1
    25ac:	40 52       	subi	r20, 0x20	; 32
    25ae:	41 93       	st	Z+, r20
    25b0:	02 d0       	rcall	.+4      	; 0x25b6 <__ultoa_invert+0x84>
    25b2:	a9 f7       	brne	.-22     	; 0x259e <__ultoa_invert+0x6c>
    25b4:	ea cf       	rjmp	.-44     	; 0x258a <__ultoa_invert+0x58>
    25b6:	b4 e0       	ldi	r27, 0x04	; 4
    25b8:	a6 95       	lsr	r26
    25ba:	97 95       	ror	r25
    25bc:	87 95       	ror	r24
    25be:	77 95       	ror	r23
    25c0:	67 95       	ror	r22
    25c2:	ba 95       	dec	r27
    25c4:	c9 f7       	brne	.-14     	; 0x25b8 <__ultoa_invert+0x86>
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	61 05       	cpc	r22, r1
    25ca:	71 05       	cpc	r23, r1
    25cc:	08 95       	ret
    25ce:	9b 01       	movw	r18, r22
    25d0:	ac 01       	movw	r20, r24
    25d2:	0a 2e       	mov	r0, r26
    25d4:	06 94       	lsr	r0
    25d6:	57 95       	ror	r21
    25d8:	47 95       	ror	r20
    25da:	37 95       	ror	r19
    25dc:	27 95       	ror	r18
    25de:	ba 95       	dec	r27
    25e0:	c9 f7       	brne	.-14     	; 0x25d4 <__ultoa_invert+0xa2>
    25e2:	62 0f       	add	r22, r18
    25e4:	73 1f       	adc	r23, r19
    25e6:	84 1f       	adc	r24, r20
    25e8:	95 1f       	adc	r25, r21
    25ea:	a0 1d       	adc	r26, r0
    25ec:	08 95       	ret

000025ee <_exit>:
    25ee:	f8 94       	cli

000025f0 <__stop_program>:
    25f0:	ff cf       	rjmp	.-2      	; 0x25f0 <__stop_program>
