
AndroidAccessoryHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  00001af8  00001b8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001af8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800190  00800190  00001c1c  2**0
                  ALLOC
  3 .stab         00000f90  00000000  00000000  00001c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000030d  00000000  00000000  00002bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000888  00000000  00000000  00002ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d8c8  00000000  00000000  00003748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000343d  00000000  00000000  00011010  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005c71  00000000  00000000  0001444d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001910  00000000  00000000  0001a0c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004f42  00000000  00000000  0001b9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009644  00000000  00000000  00020912  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a20  00000000  00000000  00029f56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c1       	rjmp	.+650    	; 0x28c <__ctors_end>
       2:	00 00       	nop
       4:	62 c1       	rjmp	.+708    	; 0x2ca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c1       	rjmp	.+704    	; 0x2ca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c1       	rjmp	.+700    	; 0x2ca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c1       	rjmp	.+696    	; 0x2ca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c1       	rjmp	.+692    	; 0x2ca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c1       	rjmp	.+688    	; 0x2ca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c1       	rjmp	.+684    	; 0x2ca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c1       	rjmp	.+680    	; 0x2ca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c1       	rjmp	.+676    	; 0x2ca <__bad_interrupt>
      26:	00 00       	nop
      28:	a6 c5       	rjmp	.+2892   	; 0xb76 <__vector_10>
      2a:	00 00       	nop
      2c:	4e c1       	rjmp	.+668    	; 0x2ca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c1       	rjmp	.+664    	; 0x2ca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c1       	rjmp	.+660    	; 0x2ca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c1       	rjmp	.+656    	; 0x2ca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c1       	rjmp	.+652    	; 0x2ca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c1       	rjmp	.+648    	; 0x2ca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c1       	rjmp	.+644    	; 0x2ca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c1       	rjmp	.+640    	; 0x2ca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3e c1       	rjmp	.+636    	; 0x2ca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c1       	rjmp	.+632    	; 0x2ca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c1       	rjmp	.+628    	; 0x2ca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c1       	rjmp	.+624    	; 0x2ca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c1       	rjmp	.+620    	; 0x2ca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c1       	rjmp	.+616    	; 0x2ca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c1       	rjmp	.+612    	; 0x2ca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c1       	rjmp	.+608    	; 0x2ca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c1       	rjmp	.+604    	; 0x2ca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c1       	rjmp	.+600    	; 0x2ca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c1       	rjmp	.+596    	; 0x2ca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c1       	rjmp	.+592    	; 0x2ca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c1       	rjmp	.+588    	; 0x2ca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c1       	rjmp	.+584    	; 0x2ca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c1       	rjmp	.+580    	; 0x2ca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c1       	rjmp	.+576    	; 0x2ca <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1e c1       	rjmp	.+572    	; 0x2ca <__bad_interrupt>
      8e:	00 00       	nop
      90:	1c c1       	rjmp	.+568    	; 0x2ca <__bad_interrupt>
      92:	00 00       	nop
      94:	1a c1       	rjmp	.+564    	; 0x2ca <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4262>:
      98:	1b 5b 33 36 6d 41 6e 64 72 6f 69 64 20 41 63 63     .[36mAndroid Acc
      a8:	65 73 73 6f 72 79 20 48 6f 73 74 20 44 65 6d 6f     essory Host Demo
      b8:	20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33 37 6d      running....[37m
      c8:	00                                                  .

000000c9 <__c.4275>:
      c9:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
      d9:	0d 0a 00                                            ...

000000dc <__c.4280>:
      dc:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
      ec:	68 65 64 2e 0d 0a 00                                hed....

000000f3 <__c.4286>:
      f3:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     103:	20 44 65 76 69 63 65 20 44 65 73 63 72 69 70 74      Device Descript
     113:	6f 72 2e 0d 0a 00                                   or....

00000119 <__c.4289>:
     119:	4e 6f 74 20 61 6e 20 41 6e 64 72 6f 69 64 20 64     Not an Android d
     129:	65 76 69 63 65 2e 0d 0a 00                          evice....

00000132 <__c.4291>:
     132:	4e 6f 74 20 69 6e 20 41 63 63 65 73 73 6f 72 79     Not in Accessory
     142:	20 6d 6f 64 65 2c 20 73 77 69 74 63 68 69 6e 67      mode, switching
     152:	2e 2e 2e 0d 0a 00                                   ......

00000158 <__c.4295>:
     158:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     168:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     178:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

00000185 <__c.4297>:
     185:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     195:	4e 6f 74 20 61 20 56 61 6c 69 64 20 41 6e 64 72     Not a Valid Andr
     1a5:	6f 69 64 20 41 63 63 65 73 73 6f 72 79 20 43 6c     oid Accessory Cl
     1b5:	61 73 73 20 44 65 76 69 63 65 2e 0d 0a 00           ass Device....

000001c3 <__c.4299>:
     1c3:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     1d3:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     1e3:	6f 6e 2e 0d 0a 00                                   on....

000001e9 <__c.4301>:
     1e9:	41 6e 64 72 6f 69 64 20 44 65 76 69 63 65 20 45     Android Device E
     1f9:	6e 75 6d 65 72 61 74 65 64 2e 0d 0a 00              numerated....

00000206 <__c.4306>:
     206:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     216:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     226:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000235 <__c.4313>:
     235:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     245:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     255:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     265:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     275:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     285:	1b 5b 33 37 6d 00 00                                .[37m..

0000028c <__ctors_end>:
     28c:	11 24       	eor	r1, r1
     28e:	1f be       	out	0x3f, r1	; 63
     290:	cf ef       	ldi	r28, 0xFF	; 255
     292:	d0 e2       	ldi	r29, 0x20	; 32
     294:	de bf       	out	0x3e, r29	; 62
     296:	cd bf       	out	0x3d, r28	; 61

00000298 <__do_copy_data>:
     298:	11 e0       	ldi	r17, 0x01	; 1
     29a:	a0 e0       	ldi	r26, 0x00	; 0
     29c:	b1 e0       	ldi	r27, 0x01	; 1
     29e:	e8 ef       	ldi	r30, 0xF8	; 248
     2a0:	fa e1       	ldi	r31, 0x1A	; 26
     2a2:	00 e0       	ldi	r16, 0x00	; 0
     2a4:	0b bf       	out	0x3b, r16	; 59
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <__do_copy_data+0x14>
     2a8:	07 90       	elpm	r0, Z+
     2aa:	0d 92       	st	X+, r0
     2ac:	a0 39       	cpi	r26, 0x90	; 144
     2ae:	b1 07       	cpc	r27, r17
     2b0:	d9 f7       	brne	.-10     	; 0x2a8 <__do_copy_data+0x10>
     2b2:	1b be       	out	0x3b, r1	; 59

000002b4 <__do_clear_bss>:
     2b4:	11 e0       	ldi	r17, 0x01	; 1
     2b6:	a0 e9       	ldi	r26, 0x90	; 144
     2b8:	b1 e0       	ldi	r27, 0x01	; 1
     2ba:	01 c0       	rjmp	.+2      	; 0x2be <.do_clear_bss_start>

000002bc <.do_clear_bss_loop>:
     2bc:	1d 92       	st	X+, r1

000002be <.do_clear_bss_start>:
     2be:	a2 3b       	cpi	r26, 0xB2	; 178
     2c0:	b1 07       	cpc	r27, r17
     2c2:	e1 f7       	brne	.-8      	; 0x2bc <.do_clear_bss_loop>
     2c4:	4d d0       	rcall	.+154    	; 0x360 <main>
     2c6:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <_exit>

000002ca <__bad_interrupt>:
     2ca:	9a ce       	rjmp	.-716    	; 0x0 <__vectors>

000002cc <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2cc:	9b b1       	in	r25, 0x0b	; 11
     2ce:	9f 70       	andi	r25, 0x0F	; 15
     2d0:	98 2b       	or	r25, r24
     2d2:	9b b9       	out	0x0b, r25	; 11
			}
     2d4:	08 95       	ret

000002d6 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2d6:	84 b7       	in	r24, 0x34	; 52
     2d8:	87 7f       	andi	r24, 0xF7	; 247
     2da:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2dc:	28 e1       	ldi	r18, 0x18	; 24
     2de:	0f b6       	in	r0, 0x3f	; 63
     2e0:	f8 94       	cli
     2e2:	20 93 60 00 	sts	0x0060, r18
     2e6:	10 92 60 00 	sts	0x0060, r1
     2ea:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	80 e8       	ldi	r24, 0x80	; 128
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	80 93 61 00 	sts	0x0061, r24
     2f8:	90 93 61 00 	sts	0x0061, r25
     2fc:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2fe:	83 e3       	ldi	r24, 0x33	; 51
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	90 93 cd 00 	sts	0x00CD, r25
     306:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     30a:	86 e0       	ldi	r24, 0x06	; 6
     30c:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     310:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     314:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     318:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     31a:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     31c:	8a b1       	in	r24, 0x0a	; 10
     31e:	80 6f       	ori	r24, 0xF0	; 240
     320:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     322:	8b b1       	in	r24, 0x0b	; 11
     324:	8f 70       	andi	r24, 0x0F	; 15
     326:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     328:	0b d4       	rcall	.+2070   	; 0xb40 <USB_Init>
     32a:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <Serial_CreateStream>

00000332 <AOAHost_Task>:
     332:	80 91 9d 01 	lds	r24, 0x019D
/** Task to manage an enumerated USB Android Accessory device once connected, to print received data
 *  from the device to the serial port.
 */
void AOAHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     336:	8b 30       	cpi	r24, 0x0B	; 11
     338:	91 f4       	brne	.+36     	; 0x35e <AOAHost_Task+0x2c>
	  return;

	if (AOA_Host_BytesReceived(&AndroidDevice_AOA_Interface))
     33a:	8b e4       	ldi	r24, 0x4B	; 75
     33c:	91 e0       	ldi	r25, 0x01	; 1
     33e:	0e 94 ab 09 	call	0x1356	; 0x1356 <AOA_Host_BytesReceived>
     342:	00 97       	sbiw	r24, 0x00	; 0
     344:	61 f0       	breq	.+24     	; 0x35e <AOAHost_Task+0x2c>
	{
		/* Echo received bytes from the attached device through the USART */
		int16_t ReceivedByte = AOA_Host_ReceiveByte(&AndroidDevice_AOA_Interface);
     346:	8b e4       	ldi	r24, 0x4B	; 75
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <AOA_Host_ReceiveByte>
		if (!(ReceivedByte < 0))
     34e:	97 fd       	sbrc	r25, 7
     350:	06 c0       	rjmp	.+12     	; 0x35e <AOAHost_Task+0x2c>
		  putchar(ReceivedByte);
     352:	60 91 ae 01 	lds	r22, 0x01AE
     356:	70 91 af 01 	lds	r23, 0x01AF
     35a:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <fputc>
     35e:	08 95       	ret

00000360 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     360:	ba df       	rcall	.-140    	; 0x2d6 <SetupHardware>
     362:	88 e9       	ldi	r24, 0x98	; 152
	
	puts_P(PSTR(ESC_FG_CYAN "Android Accessory Host Demo running.\r\n" ESC_FG_WHITE));
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <puts_P>
     36a:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     36c:	af df       	rcall	.-162    	; 0x2cc <LEDs_SetAllLEDs>
     36e:	78 94       	sei
     370:	e0 df       	rcall	.-64     	; 0x332 <AOAHost_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     372:	8b e4       	ldi	r24, 0x4B	; 75
	GlobalInterruptEnable();

	for (;;)
	{
		AOAHost_Task();
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <AOA_Host_USBTask>

		AOA_Host_USBTask(&AndroidDevice_AOA_Interface);
     37a:	96 d6       	rcall	.+3372   	; 0x10a8 <USB_USBTask>
     37c:	f9 cf       	rjmp	.-14     	; 0x370 <main+0x10>

0000037e <EVENT_USB_Host_DeviceAttached>:
     37e:	89 ec       	ldi	r24, 0xC9	; 201
		USB_USBTask();
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <puts_P>
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     386:	80 ea       	ldi	r24, 0xA0	; 160
     388:	a1 cf       	rjmp	.-190    	; 0x2cc <LEDs_SetAllLEDs>

0000038a <EVENT_USB_Host_DeviceUnattached>:
     38a:	8c ed       	ldi	r24, 0xDC	; 220
}
     38c:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     38e:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     392:	80 e1       	ldi	r24, 0x10	; 16
     394:	9b cf       	rjmp	.-202    	; 0x2cc <LEDs_SetAllLEDs>

00000396 <EVENT_USB_Host_DeviceEnumerationComplete>:
     396:	cf 93       	push	r28
}
     398:	df 93       	push	r29

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
     39e:	c5 51       	subi	r28, 0x15	; 21
     3a0:	d2 40       	sbci	r29, 0x02	; 2
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     3ac:	80 ea       	ldi	r24, 0xA0	; 160
     3ae:	8e df       	rcall	.-228    	; 0x2cc <LEDs_SetAllLEDs>
     3b0:	81 e0       	ldi	r24, 0x01	; 1
			 *  \return A value from the \ref USB_Host_SendControlErrorCodes_t enum to indicate the result.
			 */
			static inline uint8_t USB_Host_GetDeviceDescriptor(USB_Descriptor_Device_t* const DeviceDescriptorPtr) ATTR_NON_NULL_PTR_ARG(1);
			static inline uint8_t USB_Host_GetDeviceDescriptor(USB_Descriptor_Device_t* const DeviceDescriptorPtr)
			{
				return USB_Host_GetDescriptor(DTYPE_Device, 0, DeviceDescriptorPtr, sizeof(USB_Descriptor_Device_t));
     3b2:	60 e0       	ldi	r22, 0x00	; 0
     3b4:	ae 01       	movw	r20, r28
     3b6:	4c 5f       	subi	r20, 0xFC	; 252
     3b8:	5f 4f       	sbci	r21, 0xFF	; 255
     3ba:	22 e1       	ldi	r18, 0x12	; 18
     3bc:	59 d6       	rcall	.+3250   	; 0x1070 <USB_Host_GetDescriptor>
     3be:	88 23       	and	r24, r24
     3c0:	19 f0       	breq	.+6      	; 0x3c8 <EVENT_USB_Host_DeviceEnumerationComplete+0x32>

	USB_Descriptor_Device_t DeviceDescriptor;

	if (USB_Host_GetDeviceDescriptor(&DeviceDescriptor) != HOST_SENDCONTROL_Successful)
     3c2:	83 ef       	ldi	r24, 0xF3	; 243
     3c4:	90 e0       	ldi	r25, 0x00	; 0
	{
		puts_P(PSTR("Error Retrieving Device Descriptor.\r\n"));
     3c6:	3b c0       	rjmp	.+118    	; 0x43e <EVENT_USB_Host_DeviceEnumerationComplete+0xa8>
     3c8:	8b e4       	ldi	r24, 0x4B	; 75
     3ca:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;	
	}

	bool NeedModeSwitch;
	if (!(AOA_Host_ValidateAccessoryDevice(&AndroidDevice_AOA_Interface, &DeviceDescriptor, &NeedModeSwitch)))
     3cc:	be 01       	movw	r22, r28
     3ce:	6c 5f       	subi	r22, 0xFC	; 252
     3d0:	7f 4f       	sbci	r23, 0xFF	; 255
     3d2:	ae 01       	movw	r20, r28
     3d4:	4f 5f       	subi	r20, 0xFF	; 255
     3d6:	5f 4f       	sbci	r21, 0xFF	; 255
     3d8:	9a d6       	rcall	.+3380   	; 0x110e <AOA_Host_ValidateAccessoryDevice>
     3da:	88 23       	and	r24, r24
     3dc:	19 f4       	brne	.+6      	; 0x3e4 <EVENT_USB_Host_DeviceEnumerationComplete+0x4e>
     3de:	89 e1       	ldi	r24, 0x19	; 25
     3e0:	91 e0       	ldi	r25, 0x01	; 1
     3e2:	2d c0       	rjmp	.+90     	; 0x43e <EVENT_USB_Host_DeviceEnumerationComplete+0xa8>
	{
		puts_P(PSTR("Not an Android device.\r\n"));
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	88 23       	and	r24, r24
     3e8:	41 f0       	breq	.+16     	; 0x3fa <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}
	
	if (NeedModeSwitch)
     3ea:	82 e3       	ldi	r24, 0x32	; 50
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <puts_P>
	{
		puts_P(PSTR("Not in Accessory mode, switching...\r\n"));
     3f2:	8b e4       	ldi	r24, 0x4B	; 75
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	3d d7       	rcall	.+3706   	; 0x1272 <AOA_Host_StartAccessoryMode>
		AOA_Host_StartAccessoryMode(&AndroidDevice_AOA_Interface);
     3f8:	2c c0       	rjmp	.+88     	; 0x452 <EVENT_USB_Host_DeviceEnumerationComplete+0xbc>
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	be 01       	movw	r22, r28
     3fe:	6e 5f       	subi	r22, 0xFE	; 254
		return;
     400:	7f 4f       	sbci	r23, 0xFF	; 255
	}

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     402:	ae 01       	movw	r20, r28
     404:	4a 5e       	subi	r20, 0xEA	; 234
     406:	5f 4f       	sbci	r21, 0xFF	; 255
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	32 e0       	ldi	r19, 0x02	; 2
     40c:	47 d4       	rcall	.+2190   	; 0xc9c <USB_Host_GetDeviceConfigDescriptor>
     40e:	88 23       	and	r24, r24
     410:	19 f0       	breq	.+6      	; 0x418 <EVENT_USB_Host_DeviceEnumerationComplete+0x82>
     412:	88 e5       	ldi	r24, 0x58	; 88
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	13 c0       	rjmp	.+38     	; 0x43e <EVENT_USB_Host_DeviceEnumerationComplete+0xa8>
     418:	6a 81       	ldd	r22, Y+2	; 0x02
     41a:	7b 81       	ldd	r23, Y+3	; 0x03
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     41c:	8b e4       	ldi	r24, 0x4B	; 75
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	ae 01       	movw	r20, r28
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (AOA_Host_ConfigurePipes(&AndroidDevice_AOA_Interface,
     422:	4a 5e       	subi	r20, 0xEA	; 234
     424:	5f 4f       	sbci	r21, 0xFF	; 255
     426:	86 d6       	rcall	.+3340   	; 0x1134 <AOA_Host_ConfigurePipes>
     428:	88 23       	and	r24, r24
     42a:	19 f0       	breq	.+6      	; 0x432 <EVENT_USB_Host_DeviceEnumerationComplete+0x9c>
     42c:	85 e8       	ldi	r24, 0x85	; 133
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	06 c0       	rjmp	.+12     	; 0x43e <EVENT_USB_Host_DeviceEnumerationComplete+0xa8>
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	f8 d5       	rcall	.+3056   	; 0x1026 <USB_Host_SetDeviceConfiguration>
     436:	88 23       	and	r24, r24
	                            ConfigDescriptorSize, ConfigDescriptorData) != AOA_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Android Accessory Class Device.\r\n"));
     438:	31 f0       	breq	.+12     	; 0x446 <EVENT_USB_Host_DeviceEnumerationComplete+0xb0>
     43a:	83 ec       	ldi	r24, 0xC3	; 195
     43c:	91 e0       	ldi	r25, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     43e:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <puts_P>
     442:	80 e9       	ldi	r24, 0x90	; 144
     444:	05 c0       	rjmp	.+10     	; 0x450 <EVENT_USB_Host_DeviceEnumerationComplete+0xba>
     446:	89 ee       	ldi	r24, 0xE9	; 233
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <puts_P>
     44e:	80 e6       	ldi	r24, 0x60	; 96
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     450:	3d df       	rcall	.-390    	; 0x2cc <LEDs_SetAllLEDs>
     452:	cb 5e       	subi	r28, 0xEB	; 235
		return;
	}

	puts_P(PSTR("Android Device Enumerated.\r\n"));
     454:	dd 4f       	sbci	r29, 0xFD	; 253
     456:	0f b6       	in	r0, 0x3f	; 63
     458:	f8 94       	cli
     45a:	de bf       	out	0x3e, r29	; 62
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	cd bf       	out	0x3d, r28	; 61
     460:	df 91       	pop	r29
}
     462:	cf 91       	pop	r28
     464:	08 95       	ret

00000466 <EVENT_USB_Host_HostError>:
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	0f 92       	push	r0
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
     470:	89 83       	std	Y+1, r24	; 0x01
     472:	fe d2       	rcall	.+1532   	; 0xa70 <USB_Disable>
     474:	00 d0       	rcall	.+0      	; 0x476 <EVENT_USB_Host_HostError+0x10>
/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     476:	00 d0       	rcall	.+0      	; 0x478 <EVENT_USB_Host_HostError+0x12>
     478:	ed b7       	in	r30, 0x3d	; 61
     47a:	fe b7       	in	r31, 0x3e	; 62
     47c:	31 96       	adiw	r30, 0x01	; 1
     47e:	26 e0       	ldi	r18, 0x06	; 6
     480:	32 e0       	ldi	r19, 0x02	; 2
     482:	ad b7       	in	r26, 0x3d	; 61
     484:	be b7       	in	r27, 0x3e	; 62
     486:	12 96       	adiw	r26, 0x02	; 2
     488:	3c 93       	st	X, r19
     48a:	2e 93       	st	-X, r18
     48c:	11 97       	sbiw	r26, 0x01	; 1
     48e:	89 81       	ldd	r24, Y+1	; 0x01
     490:	82 83       	std	Z+2, r24	; 0x02
     492:	13 82       	std	Z+3, r1	; 0x03
     494:	0e 94 be 0a 	call	0x157c	; 0x157c <printf_P>
     498:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	80 e9       	ldi	r24, 0x90	; 144
     4a2:	14 df       	rcall	.-472    	; 0x2cc <LEDs_SetAllLEDs>
     4a4:	ff cf       	rjmp	.-2      	; 0x4a4 <EVENT_USB_Host_HostError+0x3e>

000004a6 <EVENT_USB_Host_DeviceEnumerationFailed>:
     4a6:	90 91 9d 01 	lds	r25, 0x019D
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4aa:	2d b7       	in	r18, 0x3d	; 61
     4ac:	3e b7       	in	r19, 0x3e	; 62
     4ae:	28 50       	subi	r18, 0x08	; 8
     4b0:	30 40       	sbci	r19, 0x00	; 0
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	3e bf       	out	0x3e, r19	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	2d bf       	out	0x3d, r18	; 61
     4bc:	ed b7       	in	r30, 0x3d	; 61
     4be:	fe b7       	in	r31, 0x3e	; 62
     4c0:	31 96       	adiw	r30, 0x01	; 1
     4c2:	25 e3       	ldi	r18, 0x35	; 53
     4c4:	32 e0       	ldi	r19, 0x02	; 2
     4c6:	ad b7       	in	r26, 0x3d	; 61
     4c8:	be b7       	in	r27, 0x3e	; 62
     4ca:	12 96       	adiw	r26, 0x02	; 2
     4cc:	3c 93       	st	X, r19
     4ce:	2e 93       	st	-X, r18
     4d0:	11 97       	sbiw	r26, 0x01	; 1
     4d2:	82 83       	std	Z+2, r24	; 0x02
     4d4:	13 82       	std	Z+3, r1	; 0x03
     4d6:	64 83       	std	Z+4, r22	; 0x04
     4d8:	15 82       	std	Z+5, r1	; 0x05
     4da:	96 83       	std	Z+6, r25	; 0x06
     4dc:	17 82       	std	Z+7, r1	; 0x07
     4de:	0e 94 be 0a 	call	0x157c	; 0x157c <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4e2:	2d b7       	in	r18, 0x3d	; 61
     4e4:	3e b7       	in	r19, 0x3e	; 62
     4e6:	28 5f       	subi	r18, 0xF8	; 248
     4e8:	3f 4f       	sbci	r19, 0xFF	; 255
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	3e bf       	out	0x3e, r19	; 62
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	2d bf       	out	0x3d, r18	; 61
     4f4:	80 e9       	ldi	r24, 0x90	; 144
     4f6:	ea ce       	rjmp	.-556    	; 0x2cc <LEDs_SetAllLEDs>

000004f8 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     4f8:	80 91 9e 00 	lds	r24, 0x009E
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	81 70       	andi	r24, 0x01	; 1
     500:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     502:	20 91 a0 00 	lds	r18, 0x00A0
     506:	2d 7f       	andi	r18, 0xFD	; 253
     508:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     50c:	20 91 9e 00 	lds	r18, 0x009E
     510:	22 60       	ori	r18, 0x02	; 2
     512:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     516:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     51a:	21 fd       	sbrc	r18, 1
     51c:	fc cf       	rjmp	.-8      	; 0x516 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     51e:	20 91 9e 00 	lds	r18, 0x009E
     522:	21 60       	ori	r18, 0x01	; 1
     524:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     528:	10 92 93 01 	sts	0x0193, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     52c:	20 91 a0 00 	lds	r18, 0x00A0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	20 72       	andi	r18, 0x20	; 32
     534:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     536:	40 91 a0 00 	lds	r20, 0x00A0
     53a:	4f 7d       	andi	r20, 0xDF	; 223
     53c:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     540:	40 91 9f 00 	lds	r20, 0x009F
     544:	4f 7d       	andi	r20, 0xDF	; 223
     546:	40 93 9f 00 	sts	0x009F, r20
     54a:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     54c:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     550:	55 ff       	sbrs	r21, 5
     552:	0b c0       	rjmp	.+22     	; 0x56a <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     554:	40 91 9f 00 	lds	r20, 0x009F
     558:	4f 7d       	andi	r20, 0xDF	; 223
     55a:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     55e:	40 91 9f 00 	lds	r20, 0x009F
     562:	4d 7f       	andi	r20, 0xFD	; 253
     564:	40 93 9f 00 	sts	0x009F, r20
     568:	08 c0       	rjmp	.+16     	; 0x57a <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     56a:	ef ec       	ldi	r30, 0xCF	; 207
     56c:	f7 e0       	ldi	r31, 0x07	; 7
     56e:	31 97       	sbiw	r30, 0x01	; 1
     570:	f1 f7       	brne	.-4      	; 0x56e <USB_Host_ResetDevice+0x76>
     572:	00 c0       	rjmp	.+0      	; 0x574 <USB_Host_ResetDevice+0x7c>
     574:	00 00       	nop
     576:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     578:	49 f7       	brne	.-46     	; 0x54c <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     57a:	21 15       	cp	r18, r1
     57c:	31 05       	cpc	r19, r1
     57e:	29 f0       	breq	.+10     	; 0x58a <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     580:	20 91 a0 00 	lds	r18, 0x00A0
     584:	20 62       	ori	r18, 0x20	; 32
     586:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     58a:	00 97       	sbiw	r24, 0x00	; 0
     58c:	29 f4       	brne	.+10     	; 0x598 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     58e:	80 91 9e 00 	lds	r24, 0x009E
     592:	8e 7f       	andi	r24, 0xFE	; 254
     594:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     598:	80 91 a0 00 	lds	r24, 0x00A0
     59c:	82 60       	ori	r24, 0x02	; 2
     59e:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     5a2:	08 95       	ret

000005a4 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5a4:	40 91 9e 00 	lds	r20, 0x009E
     5a8:	50 e0       	ldi	r21, 0x00	; 0
     5aa:	41 70       	andi	r20, 0x01	; 1
     5ac:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     5ae:	20 91 a0 00 	lds	r18, 0x00A0
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	20 72       	andi	r18, 0x20	; 32
     5b6:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     5b8:	90 91 a0 00 	lds	r25, 0x00A0
     5bc:	9f 7d       	andi	r25, 0xDF	; 223
     5be:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     5c2:	90 91 9f 00 	lds	r25, 0x009F
     5c6:	9f 7d       	andi	r25, 0xDF	; 223
     5c8:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     5cc:	90 91 9e 00 	lds	r25, 0x009E
     5d0:	91 60       	ori	r25, 0x01	; 1
     5d2:	90 93 9e 00 	sts	0x009E, r25
     5d6:	26 c0       	rjmp	.+76     	; 0x624 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     5d8:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     5dc:	95 ff       	sbrs	r25, 5
     5de:	06 c0       	rjmp	.+12     	; 0x5ec <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     5e0:	90 91 9f 00 	lds	r25, 0x009F
     5e4:	9f 7d       	andi	r25, 0xDF	; 223
     5e6:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     5ea:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     5ec:	90 91 9d 01 	lds	r25, 0x019D
     5f0:	91 30       	cpi	r25, 0x01	; 1
     5f2:	d9 f0       	breq	.+54     	; 0x62a <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     5f4:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     5f8:	94 ff       	sbrs	r25, 4
     5fa:	09 c0       	rjmp	.+18     	; 0x60e <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     5fc:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     600:	80 91 a6 00 	lds	r24, 0x00A6
     604:	8f 7e       	andi	r24, 0xEF	; 239
     606:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     60a:	82 e0       	ldi	r24, 0x02	; 2

			break;
     60c:	0f c0       	rjmp	.+30     	; 0x62c <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     60e:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     612:	91 ff       	sbrs	r25, 1
     614:	07 c0       	rjmp	.+14     	; 0x624 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     616:	80 91 a6 00 	lds	r24, 0x00A6
     61a:	8d 7f       	andi	r24, 0xFD	; 253
     61c:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     620:	83 e0       	ldi	r24, 0x03	; 3

			break;
     622:	04 c0       	rjmp	.+8      	; 0x62c <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     624:	88 23       	and	r24, r24
     626:	c1 f6       	brne	.-80     	; 0x5d8 <USB_Host_WaitMS+0x34>
     628:	01 c0       	rjmp	.+2      	; 0x62c <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     62a:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     62c:	41 15       	cp	r20, r1
     62e:	51 05       	cpc	r21, r1
     630:	29 f4       	brne	.+10     	; 0x63c <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     632:	90 91 9e 00 	lds	r25, 0x009E
     636:	9e 7f       	andi	r25, 0xFE	; 254
     638:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     63c:	21 15       	cp	r18, r1
     63e:	31 05       	cpc	r19, r1
     640:	29 f0       	breq	.+10     	; 0x64c <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     642:	90 91 a0 00 	lds	r25, 0x00A0
     646:	90 62       	ori	r25, 0x20	; 32
     648:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     64c:	08 95       	ret

0000064e <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
     65a:	28 97       	sbiw	r28, 0x08	; 8
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	de bf       	out	0x3e, r29	; 62
     662:	0f be       	out	0x3f, r0	; 63
     664:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     666:	80 91 9d 01 	lds	r24, 0x019D
     66a:	85 30       	cpi	r24, 0x05	; 5
     66c:	09 f4       	brne	.+2      	; 0x670 <USB_Host_ProcessNextHostState+0x22>
     66e:	97 c0       	rjmp	.+302    	; 0x79e <USB_Host_ProcessNextHostState+0x150>
     670:	86 30       	cpi	r24, 0x06	; 6
     672:	68 f4       	brcc	.+26     	; 0x68e <USB_Host_ProcessNextHostState+0x40>
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	c1 f1       	breq	.+112    	; 0x6e8 <USB_Host_ProcessNextHostState+0x9a>
     678:	83 30       	cpi	r24, 0x03	; 3
     67a:	18 f4       	brcc	.+6      	; 0x682 <USB_Host_ProcessNextHostState+0x34>
     67c:	88 23       	and	r24, r24
     67e:	a1 f0       	breq	.+40     	; 0x6a8 <USB_Host_ProcessNextHostState+0x5a>
     680:	02 c1       	rjmp	.+516    	; 0x886 <USB_Host_ProcessNextHostState+0x238>
     682:	83 30       	cpi	r24, 0x03	; 3
     684:	c9 f1       	breq	.+114    	; 0x6f8 <USB_Host_ProcessNextHostState+0xaa>
     686:	84 30       	cpi	r24, 0x04	; 4
     688:	09 f0       	breq	.+2      	; 0x68c <USB_Host_ProcessNextHostState+0x3e>
     68a:	fd c0       	rjmp	.+506    	; 0x886 <USB_Host_ProcessNextHostState+0x238>
     68c:	60 c0       	rjmp	.+192    	; 0x74e <USB_Host_ProcessNextHostState+0x100>
     68e:	87 30       	cpi	r24, 0x07	; 7
     690:	09 f4       	brne	.+2      	; 0x694 <USB_Host_ProcessNextHostState+0x46>
     692:	9c c0       	rjmp	.+312    	; 0x7cc <USB_Host_ProcessNextHostState+0x17e>
     694:	87 30       	cpi	r24, 0x07	; 7
     696:	08 f4       	brcc	.+2      	; 0x69a <USB_Host_ProcessNextHostState+0x4c>
     698:	8d c0       	rjmp	.+282    	; 0x7b4 <USB_Host_ProcessNextHostState+0x166>
     69a:	88 30       	cpi	r24, 0x08	; 8
     69c:	09 f4       	brne	.+2      	; 0x6a0 <USB_Host_ProcessNextHostState+0x52>
     69e:	b6 c0       	rjmp	.+364    	; 0x80c <USB_Host_ProcessNextHostState+0x1be>
     6a0:	89 30       	cpi	r24, 0x09	; 9
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <USB_Host_ProcessNextHostState+0x58>
     6a4:	f0 c0       	rjmp	.+480    	; 0x886 <USB_Host_ProcessNextHostState+0x238>
     6a6:	d7 c0       	rjmp	.+430    	; 0x856 <USB_Host_ProcessNextHostState+0x208>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     6a8:	00 91 90 01 	lds	r16, 0x0190
     6ac:	10 91 91 01 	lds	r17, 0x0191
     6b0:	01 15       	cp	r16, r1
     6b2:	11 05       	cpc	r17, r1
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <USB_Host_ProcessNextHostState+0x6a>
     6b6:	e7 c0       	rjmp	.+462    	; 0x886 <USB_Host_ProcessNextHostState+0x238>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	74 df       	rcall	.-280    	; 0x5a4 <USB_Host_WaitMS>
     6bc:	68 2f       	mov	r22, r24
     6be:	88 23       	and	r24, r24
     6c0:	31 f0       	breq	.+12     	; 0x6ce <USB_Host_ProcessNextHostState+0x80>
     6c2:	80 91 92 01 	lds	r24, 0x0192
				{
					USB_HostState = PostWaitState;
     6c6:	80 93 9d 01 	sts	0x019D, r24
     6ca:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     6cc:	d0 c0       	rjmp	.+416    	; 0x86e <USB_Host_ProcessNextHostState+0x220>
					break;
     6ce:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
     6d0:	10 40       	sbci	r17, 0x00	; 0
     6d2:	10 93 91 01 	sts	0x0191, r17
     6d6:	00 93 90 01 	sts	0x0190, r16
     6da:	01 15       	cp	r16, r1
     6dc:	11 05       	cpc	r17, r1
     6de:	09 f0       	breq	.+2      	; 0x6e2 <USB_Host_ProcessNextHostState+0x94>
     6e0:	d2 c0       	rjmp	.+420    	; 0x886 <USB_Host_ProcessNextHostState+0x238>
     6e2:	80 91 92 01 	lds	r24, 0x0192
				  USB_HostState = PostWaitState;
     6e6:	05 c0       	rjmp	.+10     	; 0x6f2 <USB_Host_ProcessNextHostState+0xa4>
     6e8:	10 92 91 01 	sts	0x0191, r1
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     6ec:	10 92 90 01 	sts	0x0190, r1
     6f0:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     6f2:	80 93 9d 01 	sts	0x019D, r24
     6f6:	c7 c0       	rjmp	.+398    	; 0x886 <USB_Host_ProcessNextHostState+0x238>
			break;
     6f8:	80 91 90 01 	lds	r24, 0x0190
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     6fc:	90 91 91 01 	lds	r25, 0x0191
     700:	9c 01       	movw	r18, r24
     702:	21 50       	subi	r18, 0x01	; 1
     704:	30 40       	sbci	r19, 0x00	; 0
     706:	30 93 91 01 	sts	0x0191, r19
     70a:	20 93 90 01 	sts	0x0190, r18
     70e:	00 97       	sbiw	r24, 0x00	; 0
     710:	39 f0       	breq	.+14     	; 0x720 <USB_Host_ProcessNextHostState+0xd2>
     712:	8f ec       	ldi	r24, 0xCF	; 207
     714:	97 e0       	ldi	r25, 0x07	; 7
     716:	01 97       	sbiw	r24, 0x01	; 1
     718:	f1 f7       	brne	.-4      	; 0x716 <USB_Host_ProcessNextHostState+0xc8>
     71a:	00 c0       	rjmp	.+0      	; 0x71c <USB_Host_ProcessNextHostState+0xce>
     71c:	00 00       	nop
     71e:	b3 c0       	rjmp	.+358    	; 0x886 <USB_Host_ProcessNextHostState+0x238>
     720:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     722:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     726:	80 61       	ori	r24, 0x10	; 16
     728:	80 93 d8 00 	sts	0x00D8, r24
     72c:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     730:	8b 7f       	andi	r24, 0xFB	; 251
     732:	80 93 dd 00 	sts	0x00DD, r24
     736:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     73a:	80 61       	ori	r24, 0x10	; 16
     73c:	80 93 d7 00 	sts	0x00D7, r24
     740:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     744:	82 60       	ori	r24, 0x02	; 2
     746:	80 93 dd 00 	sts	0x00DD, r24
     74a:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     74c:	d2 cf       	rjmp	.-92     	; 0x6f2 <USB_Host_ProcessNextHostState+0xa4>
     74e:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     752:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     754:	98 c0       	rjmp	.+304    	; 0x886 <USB_Host_ProcessNextHostState+0x238>
     756:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     75a:	8e 7f       	andi	r24, 0xFE	; 254
     75c:	80 93 9f 00 	sts	0x009F, r24
     760:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     764:	8d 7f       	andi	r24, 0xFD	; 253
     766:	80 93 9f 00 	sts	0x009F, r24
     76a:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     76e:	8d 7f       	andi	r24, 0xFD	; 253
     770:	80 93 df 00 	sts	0x00DF, r24
     774:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     778:	82 60       	ori	r24, 0x02	; 2
     77a:	80 93 de 00 	sts	0x00DE, r24
     77e:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     782:	81 60       	ori	r24, 0x01	; 1
     784:	80 93 9e 00 	sts	0x009E, r24
     788:	0f d1       	rcall	.+542    	; 0x9a8 <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     78a:	10 92 9d 01 	sts	0x019D, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     78e:	84 e6       	ldi	r24, 0x64	; 100
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	90 93 91 01 	sts	0x0191, r25
     796:	80 93 90 01 	sts	0x0190, r24
     79a:	85 e0       	ldi	r24, 0x05	; 5
     79c:	59 c0       	rjmp	.+178    	; 0x850 <USB_Host_ProcessNextHostState+0x202>
     79e:	ac de       	rcall	.-680    	; 0x4f8 <USB_Host_ResetDevice>
     7a0:	10 92 9d 01 	sts	0x019D, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     7a4:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	90 93 91 01 	sts	0x0191, r25
     7ac:	80 93 90 01 	sts	0x0190, r24
     7b0:	86 e0       	ldi	r24, 0x06	; 6
     7b2:	4e c0       	rjmp	.+156    	; 0x850 <USB_Host_ProcessNextHostState+0x202>
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     7ba:	20 e4       	ldi	r18, 0x40	; 64
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	01 e0       	ldi	r16, 0x01	; 1
     7c0:	6d d0       	rcall	.+218    	; 0x89c <Pipe_ConfigurePipe>
     7c2:	88 23       	and	r24, r24
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <USB_Host_ProcessNextHostState+0x17a>
     7c6:	4f c0       	rjmp	.+158    	; 0x866 <USB_Host_ProcessNextHostState+0x218>
     7c8:	87 e0       	ldi	r24, 0x07	; 7
     7ca:	93 cf       	rjmp	.-218    	; 0x6f2 <USB_Host_ProcessNextHostState+0xa4>
     7cc:	a5 e9       	ldi	r26, 0x95	; 149
     7ce:	b1 e0       	ldi	r27, 0x01	; 1
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     7d0:	e5 e6       	ldi	r30, 0x65	; 101
     7d2:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     7d4:	88 e0       	ldi	r24, 0x08	; 8
     7d6:	01 90       	ld	r0, Z+
     7d8:	0d 92       	st	X+, r0
     7da:	81 50       	subi	r24, 0x01	; 1
     7dc:	e1 f7       	brne	.-8      	; 0x7d6 <USB_Host_ProcessNextHostState+0x188>
     7de:	10 92 a7 00 	sts	0x00A7, r1
     7e2:	ce 01       	movw	r24, r28
     7e4:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     7e6:	21 d3       	rcall	.+1602   	; 0xe2a <USB_Host_SendControlRequest>
     7e8:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     7ea:	88 23       	and	r24, r24
     7ec:	09 f0       	breq	.+2      	; 0x7f0 <USB_Host_ProcessNextHostState+0x1a2>
     7ee:	3e c0       	rjmp	.+124    	; 0x86c <USB_Host_ProcessNextHostState+0x21e>
     7f0:	88 85       	ldd	r24, Y+8	; 0x08
     7f2:	80 93 75 01 	sts	0x0175, r24
     7f6:	80 de       	rcall	.-768    	; 0x4f8 <USB_Host_ResetDevice>
     7f8:	10 92 9d 01 	sts	0x019D, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     7fc:	88 ec       	ldi	r24, 0xC8	; 200
     7fe:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
     800:	90 93 91 01 	sts	0x0191, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     804:	80 93 90 01 	sts	0x0190, r24
     808:	88 e0       	ldi	r24, 0x08	; 8
     80a:	22 c0       	rjmp	.+68     	; 0x850 <USB_Host_ProcessNextHostState+0x202>
     80c:	20 91 75 01 	lds	r18, 0x0175
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     818:	01 e0       	ldi	r16, 0x01	; 1
     81a:	40 d0       	rcall	.+128    	; 0x89c <Pipe_ConfigurePipe>
     81c:	88 23       	and	r24, r24
     81e:	19 f1       	breq	.+70     	; 0x866 <USB_Host_ProcessNextHostState+0x218>
     820:	a5 e9       	ldi	r26, 0x95	; 149
     822:	b1 e0       	ldi	r27, 0x01	; 1
     824:	ed e6       	ldi	r30, 0x6D	; 109
     826:	f1 e0       	ldi	r31, 0x01	; 1
     828:	88 e0       	ldi	r24, 0x08	; 8
     82a:	01 90       	ld	r0, Z+
     82c:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     82e:	81 50       	subi	r24, 0x01	; 1
     830:	e1 f7       	brne	.-8      	; 0x82a <USB_Host_ProcessNextHostState+0x1dc>
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	f9 d2       	rcall	.+1522   	; 0xe2a <USB_Host_SendControlRequest>
     838:	68 2f       	mov	r22, r24
     83a:	88 23       	and	r24, r24
     83c:	b9 f4       	brne	.+46     	; 0x86c <USB_Host_ProcessNextHostState+0x21e>
     83e:	10 92 9d 01 	sts	0x019D, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     842:	84 e6       	ldi	r24, 0x64	; 100
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	90 93 91 01 	sts	0x0191, r25
     84a:	80 93 90 01 	sts	0x0190, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     84e:	89 e0       	ldi	r24, 0x09	; 9
     850:	80 93 92 01 	sts	0x0192, r24
     854:	18 c0       	rjmp	.+48     	; 0x886 <USB_Host_ProcessNextHostState+0x238>
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	80 93 a1 00 	sts	0x00A1, r24
     85c:	8a e0       	ldi	r24, 0x0A	; 10
     85e:	80 93 9d 01 	sts	0x019D, r24
     862:	99 dd       	rcall	.-1230   	; 0x396 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     864:	10 c0       	rjmp	.+32     	; 0x886 <USB_Host_ProcessNextHostState+0x238>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	84 e0       	ldi	r24, 0x04	; 4
     86a:	01 c0       	rjmp	.+2      	; 0x86e <USB_Host_ProcessNextHostState+0x220>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     86c:	83 e0       	ldi	r24, 0x03	; 3
     86e:	90 91 9d 01 	lds	r25, 0x019D

			EVENT_USB_Host_DeviceEnumerationComplete();
     872:	91 30       	cpi	r25, 0x01	; 1
     874:	41 f0       	breq	.+16     	; 0x886 <USB_Host_ProcessNextHostState+0x238>
			break;
     876:	17 de       	rcall	.-978    	; 0x4a6 <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     878:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     87c:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     87e:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     882:	83 dd       	rcall	.-1274   	; 0x38a <EVENT_USB_Host_DeviceUnattached>
     884:	0d d1       	rcall	.+538    	; 0xaa0 <USB_ResetInterface>
     886:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     88c:	de bf       	out	0x3e, r29	; 62
     88e:	0f be       	out	0x3f, r0	; 63
     890:	cd bf       	out	0x3d, r28	; 61
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     896:	1f 91       	pop	r17
     898:	0f 91       	pop	r16

		USB_ResetInterface();
     89a:	08 95       	ret

0000089c <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     89c:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     89e:	58 2f       	mov	r21, r24
     8a0:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     8a2:	87 ff       	sbrs	r24, 7
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <Pipe_ConfigurePipe+0xe>
     8a6:	80 e1       	ldi	r24, 0x10	; 16
     8a8:	01 c0       	rjmp	.+2      	; 0x8ac <Pipe_ConfigurePipe+0x10>
     8aa:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     8ac:	57 30       	cpi	r21, 0x07	; 7
     8ae:	08 f0       	brcs	.+2      	; 0x8b2 <Pipe_ConfigurePipe+0x16>
     8b0:	57 c0       	rjmp	.+174    	; 0x960 <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     8b2:	66 23       	and	r22, r22
     8b4:	09 f4       	brne	.+2      	; 0x8b8 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     8b6:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     8b8:	4f 70       	andi	r20, 0x0F	; 15
     8ba:	62 95       	swap	r22
     8bc:	66 0f       	add	r22, r22
     8be:	66 0f       	add	r22, r22
     8c0:	60 7c       	andi	r22, 0xC0	; 192
     8c2:	64 2b       	or	r22, r20
     8c4:	68 2b       	or	r22, r24
     8c6:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     8c8:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     8ca:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     8ce:	45 17       	cp	r20, r21
     8d0:	a9 f4       	brne	.+42     	; 0x8fc <Pipe_ConfigurePipe+0x60>
     8d2:	04 c0       	rjmp	.+8      	; 0x8dc <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     8d4:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     8d6:	88 0f       	add	r24, r24
     8d8:	99 1f       	adc	r25, r25
     8da:	03 c0       	rjmp	.+6      	; 0x8e2 <Pipe_ConfigurePipe+0x46>
     8dc:	88 e0       	ldi	r24, 0x08	; 8
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     8e2:	82 17       	cp	r24, r18
     8e4:	93 07       	cpc	r25, r19
     8e6:	10 f4       	brcc	.+4      	; 0x8ec <Pipe_ConfigurePipe+0x50>
     8e8:	75 30       	cpi	r23, 0x05	; 5
     8ea:	a1 f7       	brne	.-24     	; 0x8d4 <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     8ec:	87 2f       	mov	r24, r23
     8ee:	82 95       	swap	r24
     8f0:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     8f2:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     8f4:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     8f6:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     8f8:	e0 e0       	ldi	r30, 0x00	; 0
     8fa:	08 c0       	rjmp	.+16     	; 0x90c <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     8fc:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     900:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     904:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     908:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     90c:	81 ff       	sbrs	r24, 1
     90e:	20 c0       	rjmp	.+64     	; 0x950 <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     910:	90 91 a9 00 	lds	r25, 0x00A9
     914:	9e 7f       	andi	r25, 0xFE	; 254
     916:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     91a:	90 91 ab 00 	lds	r25, 0x00AB
     91e:	9d 7f       	andi	r25, 0xFD	; 253
     920:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     924:	90 91 a9 00 	lds	r25, 0x00A9
     928:	91 60       	ori	r25, 0x01	; 1
     92a:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     92e:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     932:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     936:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     93a:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     93e:	80 91 a9 00 	lds	r24, 0x00A9
     942:	80 62       	ori	r24, 0x20	; 32
     944:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     948:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     94c:	87 ff       	sbrs	r24, 7
     94e:	08 c0       	rjmp	.+16     	; 0x960 <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     950:	4f 5f       	subi	r20, 0xFF	; 255
     952:	47 30       	cpi	r20, 0x07	; 7
     954:	09 f0       	breq	.+2      	; 0x958 <Pipe_ConfigurePipe+0xbc>
     956:	b9 cf       	rjmp	.-142    	; 0x8ca <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     958:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	01 c0       	rjmp	.+2      	; 0x962 <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     960:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     962:	0f 91       	pop	r16
     964:	08 95       	ret

00000966 <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
     966:	ff 92       	push	r15
     968:	0f 93       	push	r16
     96a:	1f 93       	push	r17
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
     972:	ec 01       	movw	r28, r24
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     974:	ff 24       	eor	r15, r15
     976:	0d c0       	rjmp	.+26     	; 0x992 <Pipe_ConfigurePipeTable+0x2c>
	{
		if (!(Table[i].Address))
     978:	88 81       	ld	r24, Y
     97a:	88 23       	and	r24, r24
     97c:	41 f0       	breq	.+16     	; 0x98e <Pipe_ConfigurePipeTable+0x28>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
     97e:	29 81       	ldd	r18, Y+1	; 0x01
     980:	3a 81       	ldd	r19, Y+2	; 0x02
     982:	6c 81       	ldd	r22, Y+4	; 0x04
     984:	4b 81       	ldd	r20, Y+3	; 0x03
     986:	0d 81       	ldd	r16, Y+5	; 0x05
     988:	89 df       	rcall	.-238    	; 0x89c <Pipe_ConfigurePipe>
     98a:	88 23       	and	r24, r24
     98c:	31 f0       	breq	.+12     	; 0x99a <Pipe_ConfigurePipeTable+0x34>
     98e:	f3 94       	inc	r15
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     990:	26 96       	adiw	r28, 0x06	; 6
     992:	f1 16       	cp	r15, r17
     994:	89 f7       	brne	.-30     	; 0x978 <Pipe_ConfigurePipeTable+0x12>
     996:	81 e0       	ldi	r24, 0x01	; 1
		{
			return false;
		}
	}
	
	return true;
     998:	01 c0       	rjmp	.+2      	; 0x99c <Pipe_ConfigurePipeTable+0x36>
     99a:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
     99c:	df 91       	pop	r29
		}
	}
	
	return true;
}
     99e:	cf 91       	pop	r28
     9a0:	1f 91       	pop	r17
     9a2:	0f 91       	pop	r16
     9a4:	ff 90       	pop	r15
     9a6:	08 95       	ret

000009a8 <Pipe_ClearPipes>:
     9a8:	10 92 f8 00 	sts	0x00F8, r1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     9b2:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     9b6:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     9ba:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     9be:	90 91 a9 00 	lds	r25, 0x00A9
     9c2:	9e 7f       	andi	r25, 0xFE	; 254
     9c4:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9c8:	8f 5f       	subi	r24, 0xFF	; 255
     9ca:	87 30       	cpi	r24, 0x07	; 7
     9cc:	81 f7       	brne	.-32     	; 0x9ae <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     9ce:	08 95       	ret

000009d0 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     9d0:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     9d4:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9d8:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     9da:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9de:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     9e2:	27 ff       	sbrs	r18, 7
     9e4:	0c c0       	rjmp	.+24     	; 0x9fe <Pipe_IsEndpointBound+0x2e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     9e6:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     9ea:	53 2f       	mov	r21, r19
     9ec:	5f 70       	andi	r21, 0x0F	; 15
     9ee:	30 ff       	sbrs	r19, 0
     9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <Pipe_IsEndpointBound+0x26>
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	01 c0       	rjmp	.+2      	; 0x9f8 <Pipe_IsEndpointBound+0x28>
     9f6:	20 e8       	ldi	r18, 0x80	; 128
     9f8:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     9fa:	28 17       	cp	r18, r24
     9fc:	49 f0       	breq	.+18     	; 0xa10 <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9fe:	9f 5f       	subi	r25, 0xFF	; 255
     a00:	97 30       	cpi	r25, 0x07	; 7
     a02:	59 f7       	brne	.-42     	; 0x9da <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a04:	84 2f       	mov	r24, r20
     a06:	8f 70       	andi	r24, 0x0F	; 15
     a08:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     a10:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     a12:	08 95       	ret

00000a14 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     a14:	80 91 a2 00 	lds	r24, 0x00A2
     a18:	90 91 a3 00 	lds	r25, 0x00A3
     a1c:	45 e6       	ldi	r20, 0x65	; 101
     a1e:	01 c0       	rjmp	.+2      	; 0xa22 <Pipe_WaitUntilReady+0xe>
     a20:	c9 01       	movw	r24, r18
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a22:	20 91 aa 00 	lds	r18, 0x00AA
     a26:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     a28:	20 31       	cpi	r18, 0x10	; 16
     a2a:	29 f4       	brne	.+10     	; 0xa36 <Pipe_WaitUntilReady+0x22>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     a2c:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     a30:	20 ff       	sbrs	r18, 0
     a32:	05 c0       	rjmp	.+10     	; 0xa3e <Pipe_WaitUntilReady+0x2a>
     a34:	17 c0       	rjmp	.+46     	; 0xa64 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     a36:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     a3a:	22 fd       	sbrc	r18, 2
     a3c:	13 c0       	rjmp	.+38     	; 0xa64 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     a3e:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     a42:	21 fd       	sbrc	r18, 1
     a44:	11 c0       	rjmp	.+34     	; 0xa68 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     a46:	20 91 9d 01 	lds	r18, 0x019D
     a4a:	21 30       	cpi	r18, 0x01	; 1
     a4c:	79 f0       	breq	.+30     	; 0xa6c <Pipe_WaitUntilReady+0x58>
     a4e:	20 91 a2 00 	lds	r18, 0x00A2
     a52:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     a56:	28 17       	cp	r18, r24
     a58:	39 07       	cpc	r19, r25
     a5a:	19 f3       	breq	.-58     	; 0xa22 <Pipe_WaitUntilReady+0xe>
     a5c:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     a5e:	01 f7       	brne	.-64     	; 0xa20 <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_Timeout;
     a60:	83 e0       	ldi	r24, 0x03	; 3
     a62:	08 95       	ret
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     a6c:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     a6e:	08 95       	ret

00000a70 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     a70:	75 d0       	rcall	.+234    	; 0xb5c <USB_INT_DisableAllInterrupts>
     a72:	7c d0       	rcall	.+248    	; 0xb6c <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a74:	e0 ee       	ldi	r30, 0xE0	; 224
     a76:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     a78:	80 81       	ld	r24, Z
     a7a:	81 60       	ori	r24, 0x01	; 1
     a7c:	80 83       	st	Z, r24
     a7e:	e8 ed       	ldi	r30, 0xD8	; 216
     a80:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     a82:	80 81       	ld	r24, Z
     a84:	8f 77       	andi	r24, 0x7F	; 127
     a86:	80 83       	st	Z, r24
     a88:	19 bc       	out	0x29, r1	; 41
     a8a:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a8c:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     a8e:	8c 91       	ld	r24, X
     a90:	8e 7f       	andi	r24, 0xFE	; 254
     a92:	8c 93       	st	X, r24
     a94:	80 81       	ld	r24, Z
     a96:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     a98:	80 83       	st	Z, r24
     a9a:	10 92 94 01 	sts	0x0194, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     a9e:	08 95       	ret

00000aa0 <USB_ResetInterface>:
     aa0:	5d d0       	rcall	.+186    	; 0xb5c <USB_INT_DisableAllInterrupts>
}
     aa2:	64 d0       	rcall	.+200    	; 0xb6c <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     aa4:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     aa8:	8f 77       	andi	r24, 0x7F	; 127
     aaa:	80 93 d8 00 	sts	0x00D8, r24
     aae:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     ab2:	80 68       	ori	r24, 0x80	; 128
     ab4:	80 93 d8 00 	sts	0x00D8, r24
     ab8:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     abc:	8f 7d       	andi	r24, 0xDF	; 223
     abe:	80 93 d8 00 	sts	0x00D8, r24
     ac2:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     ac6:	8f 77       	andi	r24, 0x7F	; 127
     ac8:	80 93 d7 00 	sts	0x00D7, r24
     acc:	8c e0       	ldi	r24, 0x0C	; 12
     ace:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     ad0:	8e e0       	ldi	r24, 0x0E	; 14
     ad2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ad4:	09 b4       	in	r0, 0x29	; 41
     ad6:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     ad8:	fd cf       	rjmp	.-6      	; 0xad4 <USB_ResetInterface+0x34>
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	80 93 9d 01 	sts	0x019D, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     ae0:	10 92 93 01 	sts	0x0193, r1
	USB_Host_ConfigurationNumber = 0;
     ae4:	80 e4       	ldi	r24, 0x40	; 64
     ae6:	80 93 75 01 	sts	0x0175, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     aea:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     aee:	80 64       	ori	r24, 0x40	; 64
     af0:	80 93 d8 00 	sts	0x00D8, r24
     af4:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     af8:	81 60       	ori	r24, 0x01	; 1
     afa:	80 93 dd 00 	sts	0x00DD, r24
     afe:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     b02:	84 60       	ori	r24, 0x04	; 4
     b04:	80 93 dd 00 	sts	0x00DD, r24
     b08:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     b0c:	8f 7e       	andi	r24, 0xEF	; 239
     b0e:	80 93 d7 00 	sts	0x00D7, r24
     b12:	6f 9a       	sbi	0x0d, 7	; 13
     b14:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     b16:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     b1a:	81 60       	ori	r24, 0x01	; 1
     b1c:	80 93 de 00 	sts	0x00DE, r24
     b20:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     b24:	84 60       	ori	r24, 0x04	; 4
     b26:	80 93 de 00 	sts	0x00DE, r24
     b2a:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b2e:	8e 7f       	andi	r24, 0xFE	; 254
     b30:	80 93 e0 00 	sts	0x00E0, r24
     b34:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     b38:	80 61       	ori	r24, 0x10	; 16
     b3a:	80 93 d8 00 	sts	0x00D8, r24
     b3e:	08 95       	ret

00000b40 <USB_Init>:
     b40:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     b42:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     b44:	80 81       	ld	r24, Z
     b46:	8f 7e       	andi	r24, 0xEF	; 239
     b48:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     b4a:	e7 ed       	ldi	r30, 0xD7	; 215
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 81       	ld	r24, Z
     b50:	81 60       	ori	r24, 0x01	; 1
     b52:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	80 93 94 01 	sts	0x0194, r24

	USB_ResetInterface();
     b5a:	a2 cf       	rjmp	.-188    	; 0xaa0 <USB_ResetInterface>

00000b5c <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     b5c:	e8 ed       	ldi	r30, 0xD8	; 216
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	8c 7f       	andi	r24, 0xFC	; 252
     b64:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     b66:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     b6a:	08 95       	ret

00000b6c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     b6c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     b70:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     b74:	08 95       	ret

00000b76 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     b76:	1f 92       	push	r1
     b78:	0f 92       	push	r0
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	0f 92       	push	r0
     b7e:	0b b6       	in	r0, 0x3b	; 59
     b80:	0f 92       	push	r0
     b82:	11 24       	eor	r1, r1
     b84:	2f 93       	push	r18
     b86:	3f 93       	push	r19
     b88:	4f 93       	push	r20
     b8a:	5f 93       	push	r21
     b8c:	6f 93       	push	r22
     b8e:	7f 93       	push	r23
     b90:	8f 93       	push	r24
     b92:	9f 93       	push	r25
     b94:	af 93       	push	r26
     b96:	bf 93       	push	r27
     b98:	ef 93       	push	r30
     b9a:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     b9c:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     ba0:	85 ff       	sbrs	r24, 5
     ba2:	0a c0       	rjmp	.+20     	; 0xbb8 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     ba4:	80 91 a0 00 	lds	r24, 0x00A0
     ba8:	85 ff       	sbrs	r24, 5
     baa:	06 c0       	rjmp	.+12     	; 0xbb8 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     bac:	80 91 9f 00 	lds	r24, 0x009F
     bb0:	8f 7d       	andi	r24, 0xDF	; 223
     bb2:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     bb6:	10 d1       	rcall	.+544    	; 0xdd8 <USB_Event_Stub>
     bb8:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     bbc:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     bbe:	15 c0       	rjmp	.+42     	; 0xbea <__vector_10+0x74>
     bc0:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     bc4:	81 ff       	sbrs	r24, 1
     bc6:	11 c0       	rjmp	.+34     	; 0xbea <__vector_10+0x74>
     bc8:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     bcc:	8d 7f       	andi	r24, 0xFD	; 253
     bce:	80 93 9f 00 	sts	0x009F, r24
     bd2:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     bd6:	8e 7f       	andi	r24, 0xFE	; 254
     bd8:	80 93 9f 00 	sts	0x009F, r24
     bdc:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     be0:	8d 7f       	andi	r24, 0xFD	; 253
     be2:	80 93 a0 00 	sts	0x00A0, r24
     be6:	d1 db       	rcall	.-2142   	; 0x38a <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     be8:	5b df       	rcall	.-330    	; 0xaa0 <USB_ResetInterface>
     bea:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     bee:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     bf0:	15 c0       	rjmp	.+42     	; 0xc1c <__vector_10+0xa6>
     bf2:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     bf6:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     bf8:	11 c0       	rjmp	.+34     	; 0xc1c <__vector_10+0xa6>
     bfa:	80 91 df 00 	lds	r24, 0x00DF
     bfe:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     c00:	80 93 df 00 	sts	0x00DF, r24
     c04:	77 98       	cbi	0x0e, 7	; 14
     c06:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     c0a:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c0c:	80 93 dd 00 	sts	0x00DD, r24
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	29 dc       	rcall	.-1966   	; 0x466 <EVENT_USB_Host_HostError>
     c14:	ba db       	rcall	.-2188   	; 0x38a <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	80 93 9d 01 	sts	0x019D, r24
		EVENT_USB_Host_DeviceUnattached();
     c1c:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     c20:	80 ff       	sbrs	r24, 0
     c22:	17 c0       	rjmp	.+46     	; 0xc52 <__vector_10+0xdc>
     c24:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     c28:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     c2a:	13 c0       	rjmp	.+38     	; 0xc52 <__vector_10+0xdc>
     c2c:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     c30:	8e 7f       	andi	r24, 0xFE	; 254
     c32:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     c36:	80 91 de 00 	lds	r24, 0x00DE
     c3a:	8e 7f       	andi	r24, 0xFE	; 254
     c3c:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     c40:	9e db       	rcall	.-2244   	; 0x37e <EVENT_USB_Host_DeviceAttached>
     c42:	80 91 a0 00 	lds	r24, 0x00A0
     c46:	82 60       	ori	r24, 0x02	; 2
     c48:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     c4c:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     c4e:	80 93 9d 01 	sts	0x019D, r24
     c52:	80 91 df 00 	lds	r24, 0x00DF
     c56:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     c58:	0e c0       	rjmp	.+28     	; 0xc76 <__vector_10+0x100>
     c5a:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     c5e:	82 ff       	sbrs	r24, 2
     c60:	0a c0       	rjmp	.+20     	; 0xc76 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     c62:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     c66:	8b 7f       	andi	r24, 0xFB	; 251
     c68:	80 93 df 00 	sts	0x00DF, r24
     c6c:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	1a dc       	rcall	.-1996   	; 0x4a6 <EVENT_USB_Host_DeviceEnumerationFailed>
     c72:	8b db       	rcall	.-2282   	; 0x38a <EVENT_USB_Host_DeviceUnattached>
     c74:	15 df       	rcall	.-470    	; 0xaa0 <USB_ResetInterface>
     c76:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     c78:	ef 91       	pop	r30
     c7a:	bf 91       	pop	r27
     c7c:	af 91       	pop	r26
     c7e:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     c80:	8f 91       	pop	r24
     c82:	7f 91       	pop	r23

		USB_ResetInterface();
     c84:	6f 91       	pop	r22
     c86:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c88:	4f 91       	pop	r20
     c8a:	3f 91       	pop	r19
     c8c:	2f 91       	pop	r18
     c8e:	0f 90       	pop	r0
     c90:	0b be       	out	0x3b, r0	; 59
     c92:	0f 90       	pop	r0
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	0f 90       	pop	r0
     c98:	1f 90       	pop	r1
     c9a:	18 95       	reti

00000c9c <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     c9c:	cf 92       	push	r12
     c9e:	df 92       	push	r13
     ca0:	ef 92       	push	r14
     ca2:	ff 92       	push	r15
     ca4:	0f 93       	push	r16
     ca6:	1f 93       	push	r17
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	29 97       	sbiw	r28, 0x09	; 9
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	f8 94       	cli
     cb6:	de bf       	out	0x3e, r29	; 62
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	cd bf       	out	0x3d, r28	; 61
     cbc:	6b 01       	movw	r12, r22
     cbe:	8a 01       	movw	r16, r20
     cc0:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     cc2:	90 e8       	ldi	r25, 0x80	; 128
     cc4:	90 93 95 01 	sts	0x0195, r25
     cc8:	96 e0       	ldi	r25, 0x06	; 6
     cca:	90 93 96 01 	sts	0x0196, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     cd4:	90 93 98 01 	sts	0x0198, r25
     cd8:	80 93 97 01 	sts	0x0197, r24
     cdc:	10 92 9a 01 	sts	0x019A, r1
     ce0:	10 92 99 01 	sts	0x0199, r1
     ce4:	89 e0       	ldi	r24, 0x09	; 9
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	90 93 9c 01 	sts	0x019C, r25
     cec:	80 93 9b 01 	sts	0x019B, r24
     cf0:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     cf4:	ce 01       	movw	r24, r28
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	98 d0       	rcall	.+304    	; 0xe2a <USB_Host_SendControlRequest>
     cfa:	88 23       	and	r24, r24
     cfc:	b9 f4       	brne	.+46     	; 0xd2c <USB_Host_GetDeviceConfigDescriptor+0x90>
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     d00:	9c 81       	ldd	r25, Y+4	; 0x04
     d02:	f6 01       	movw	r30, r12
     d04:	91 83       	std	Z+1, r25	; 0x01
     d06:	80 83       	st	Z, r24
     d08:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
     d0a:	f9 06       	cpc	r15, r25
     d0c:	70 f0       	brcs	.+28     	; 0xd2a <USB_Host_GetDeviceConfigDescriptor+0x8e>
     d0e:	90 93 9c 01 	sts	0x019C, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     d12:	80 93 9b 01 	sts	0x019B, r24
     d16:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     d18:	88 d0       	rcall	.+272    	; 0xe2a <USB_Host_SendControlRequest>
     d1a:	88 23       	and	r24, r24
     d1c:	39 f4       	brne	.+14     	; 0xd2c <USB_Host_GetDeviceConfigDescriptor+0x90>
     d1e:	f8 01       	movw	r30, r16
     d20:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     d22:	92 30       	cpi	r25, 0x02	; 2
     d24:	19 f0       	breq	.+6      	; 0xd2c <USB_Host_GetDeviceConfigDescriptor+0x90>
     d26:	86 e0       	ldi	r24, 0x06	; 6
     d28:	01 c0       	rjmp	.+2      	; 0xd2c <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     d2a:	85 e0       	ldi	r24, 0x05	; 5
     d2c:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     d2e:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     d30:	f8 94       	cli
     d32:	de bf       	out	0x3e, r29	; 62
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	cd bf       	out	0x3d, r28	; 61
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	cf 90       	pop	r12
     d48:	08 95       	ret

00000d4a <USB_GetNextDescriptorComp>:
     d4a:	af 92       	push	r10
     d4c:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     d4e:	cf 92       	push	r12
     d50:	df 92       	push	r13
     d52:	ef 92       	push	r14
     d54:	ff 92       	push	r15
     d56:	0f 93       	push	r16
     d58:	1f 93       	push	r17
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	7c 01       	movw	r14, r24
     d60:	8b 01       	movw	r16, r22
     d62:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     d64:	28 c0       	rjmp	.+80     	; 0xdb6 <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     d66:	f8 01       	movw	r30, r16
     d68:	c0 80       	ld	r12, Z
     d6a:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     d6c:	f6 01       	movw	r30, r12
     d6e:	80 81       	ld	r24, Z
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	9e 01       	movw	r18, r28
     d74:	8c 17       	cp	r24, r28
     d76:	9d 07       	cpc	r25, r29
     d78:	08 f4       	brcc	.+2      	; 0xd7c <USB_GetNextDescriptorComp+0x32>
     d7a:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     d7c:	c6 01       	movw	r24, r12
     d7e:	82 0f       	add	r24, r18
     d80:	93 1f       	adc	r25, r19
     d82:	f8 01       	movw	r30, r16
     d84:	91 83       	std	Z+1, r25	; 0x01
     d86:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
     d88:	f7 01       	movw	r30, r14
     d8a:	80 81       	ld	r24, Z
     d8c:	91 81       	ldd	r25, Z+1	; 0x01
     d8e:	82 1b       	sub	r24, r18
     d90:	93 0b       	sbc	r25, r19
     d92:	91 83       	std	Z+1, r25	; 0x01
     d94:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     d96:	f8 01       	movw	r30, r16
     d98:	80 81       	ld	r24, Z
     d9a:	91 81       	ldd	r25, Z+1	; 0x01
     d9c:	f5 01       	movw	r30, r10
     d9e:	09 95       	icall
     da0:	82 30       	cpi	r24, 0x02	; 2
     da2:	49 f0       	breq	.+18     	; 0xdb6 <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	69 f4       	brne	.+26     	; 0xdc2 <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
     da8:	f8 01       	movw	r30, r16
     daa:	d1 82       	std	Z+1, r13	; 0x01
     dac:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
     dae:	f7 01       	movw	r30, r14
     db0:	d1 83       	std	Z+1, r29	; 0x01
     db2:	c0 83       	st	Z, r28
     db4:	06 c0       	rjmp	.+12     	; 0xdc2 <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     db6:	f7 01       	movw	r30, r14
     db8:	c0 81       	ld	r28, Z
     dba:	d1 81       	ldd	r29, Z+1	; 0x01
     dbc:	20 97       	sbiw	r28, 0x00	; 0
     dbe:	99 f6       	brne	.-90     	; 0xd66 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     dc0:	82 e0       	ldi	r24, 0x02	; 2
}
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	1f 91       	pop	r17
     dc8:	0f 91       	pop	r16
     dca:	ff 90       	pop	r15
     dcc:	ef 90       	pop	r14
     dce:	df 90       	pop	r13
     dd0:	cf 90       	pop	r12
     dd2:	bf 90       	pop	r11
     dd4:	af 90       	pop	r10
     dd6:	08 95       	ret

00000dd8 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     dd8:	08 95       	ret

00000dda <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     dda:	1f 93       	push	r17
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     de2:	c9 ee       	ldi	r28, 0xE9	; 233
     de4:	d3 e0       	ldi	r29, 0x03	; 3
     de6:	06 c0       	rjmp	.+12     	; 0xdf4 <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	dc db       	rcall	.-2120   	; 0x5a4 <USB_Host_WaitMS>
     dec:	88 23       	and	r24, r24
     dee:	c9 f4       	brne	.+50     	; 0xe22 <USB_Host_WaitForIOS+0x48>
     df0:	21 97       	sbiw	r28, 0x01	; 1
     df2:	b1 f0       	breq	.+44     	; 0xe20 <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     df4:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     df6:	29 f4       	brne	.+10     	; 0xe02 <USB_Host_WaitForIOS+0x28>
     df8:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     dfc:	83 ff       	sbrs	r24, 3
     dfe:	f4 cf       	rjmp	.-24     	; 0xde8 <USB_Host_WaitForIOS+0xe>
     e00:	0d c0       	rjmp	.+26     	; 0xe1c <USB_Host_WaitForIOS+0x42>
     e02:	11 30       	cpi	r17, 0x01	; 1
     e04:	29 f4       	brne	.+10     	; 0xe10 <USB_Host_WaitForIOS+0x36>
     e06:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     e0a:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     e0c:	ed cf       	rjmp	.-38     	; 0xde8 <USB_Host_WaitForIOS+0xe>
     e0e:	06 c0       	rjmp	.+12     	; 0xe1c <USB_Host_WaitForIOS+0x42>
     e10:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e12:	51 f7       	brne	.-44     	; 0xde8 <USB_Host_WaitForIOS+0xe>
     e14:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e18:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     e1a:	e6 cf       	rjmp	.-52     	; 0xde8 <USB_Host_WaitForIOS+0xe>
     e1c:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     e1e:	01 c0       	rjmp	.+2      	; 0xe22 <USB_Host_WaitForIOS+0x48>
     e20:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     e22:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
     e24:	cf 91       	pop	r28
     e26:	1f 91       	pop	r17
     e28:	08 95       	ret

00000e2a <USB_Host_SendControlRequest>:
     e2a:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     e2c:	ff 92       	push	r15
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     e38:	e0 90 9e 00 	lds	r14, 0x009E
     e3c:	ff 24       	eor	r15, r15
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	e8 22       	and	r14, r24
     e42:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     e44:	00 91 9b 01 	lds	r16, 0x019B
     e48:	10 91 9c 01 	lds	r17, 0x019C
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e4c:	80 91 9e 00 	lds	r24, 0x009E
     e50:	81 60       	ori	r24, 0x01	; 1
     e52:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	a5 db       	rcall	.-2230   	; 0x5a4 <USB_Host_WaitMS>
     e5a:	88 23       	and	r24, r24
     e5c:	09 f0       	breq	.+2      	; 0xe60 <USB_Host_SendControlRequest+0x36>
     e5e:	ca c0       	rjmp	.+404    	; 0xff4 <USB_Host_SendControlRequest+0x1ca>
     e60:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e64:	8f 7c       	andi	r24, 0xCF	; 207
     e66:	80 93 aa 00 	sts	0x00AA, r24
     e6a:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     e6e:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
     e72:	8f 7e       	andi	r24, 0xEF	; 239
     e74:	80 93 a6 00 	sts	0x00A6, r24
     e78:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e7c:	8f 7b       	andi	r24, 0xBF	; 191
     e7e:	80 93 a9 00 	sts	0x00A9, r24
     e82:	88 e0       	ldi	r24, 0x08	; 8
     e84:	e5 e9       	ldi	r30, 0x95	; 149
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
     e86:	f1 e0       	ldi	r31, 0x01	; 1
     e88:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     e8a:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     e8e:	81 50       	subi	r24, 0x01	; 1
     e90:	d9 f7       	brne	.-10     	; 0xe88 <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     e92:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     e96:	87 77       	andi	r24, 0x77	; 119
     e98:	80 93 a6 00 	sts	0x00A6, r24
     e9c:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     e9e:	9d df       	rcall	.-198    	; 0xdda <USB_Host_WaitForIOS>
     ea0:	88 23       	and	r24, r24
     ea2:	09 f0       	breq	.+2      	; 0xea6 <USB_Host_SendControlRequest+0x7c>
     ea4:	a7 c0       	rjmp	.+334    	; 0xff4 <USB_Host_SendControlRequest+0x1ca>
     ea6:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     eaa:	80 64       	ori	r24, 0x40	; 64
     eac:	80 93 a9 00 	sts	0x00A9, r24
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	78 db       	rcall	.-2320   	; 0x5a4 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     eb4:	88 23       	and	r24, r24
     eb6:	09 f0       	breq	.+2      	; 0xeba <USB_Host_SendControlRequest+0x90>
     eb8:	9d c0       	rjmp	.+314    	; 0xff4 <USB_Host_SendControlRequest+0x1ca>
     eba:	80 91 95 01 	lds	r24, 0x0195
     ebe:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     ec0:	4f c0       	rjmp	.+158    	; 0xf60 <USB_Host_SendControlRequest+0x136>
     ec2:	80 91 aa 00 	lds	r24, 0x00AA
     ec6:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     ec8:	80 61       	ori	r24, 0x10	; 16
     eca:	80 93 aa 00 	sts	0x00AA, r24
     ece:	20 97       	sbiw	r28, 0x00	; 0
     ed0:	61 f5       	brne	.+88     	; 0xf2a <USB_Host_SendControlRequest+0x100>
     ed2:	2e c0       	rjmp	.+92     	; 0xf30 <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     ed4:	80 91 a9 00 	lds	r24, 0x00A9
     ed8:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     eda:	80 93 a9 00 	sts	0x00A9, r24
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	7c df       	rcall	.-264    	; 0xdda <USB_Host_WaitForIOS>
     ee2:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     ee4:	09 f0       	breq	.+2      	; 0xee8 <USB_Host_SendControlRequest+0xbe>
     ee6:	86 c0       	rjmp	.+268    	; 0xff4 <USB_Host_SendControlRequest+0x1ca>
     ee8:	80 91 f6 00 	lds	r24, 0x00F6
     eec:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	41 f4       	brne	.+16     	; 0xf04 <USB_Host_SendControlRequest+0xda>
     ef4:	00 e0       	ldi	r16, 0x00	; 0
     ef6:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
     ef8:	05 c0       	rjmp	.+10     	; 0xf04 <USB_Host_SendControlRequest+0xda>
     efa:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
     efe:	89 93       	st	Y+, r24
     f00:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     f02:	10 40       	sbci	r17, 0x00	; 0
     f04:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
     f08:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f0c:	00 97       	sbiw	r24, 0x00	; 0
     f0e:	19 f0       	breq	.+6      	; 0xf16 <USB_Host_SendControlRequest+0xec>
     f10:	01 15       	cp	r16, r1
     f12:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     f14:	91 f7       	brne	.-28     	; 0xefa <USB_Host_SendControlRequest+0xd0>
     f16:	80 91 a9 00 	lds	r24, 0x00A9
     f1a:	80 64       	ori	r24, 0x40	; 64
     f1c:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f20:	80 91 a6 00 	lds	r24, 0x00A6
     f24:	8e 77       	andi	r24, 0x7E	; 126
     f26:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     f2a:	01 15       	cp	r16, r1
     f2c:	11 05       	cpc	r17, r1
     f2e:	91 f6       	brne	.-92     	; 0xed4 <USB_Host_SendControlRequest+0xaa>
     f30:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     f34:	8f 7c       	andi	r24, 0xCF	; 207
     f36:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f38:	80 93 aa 00 	sts	0x00AA, r24
     f3c:	80 91 a9 00 	lds	r24, 0x00A9
     f40:	8f 7b       	andi	r24, 0xBF	; 191
     f42:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f46:	82 e0       	ldi	r24, 0x02	; 2
     f48:	48 df       	rcall	.-368    	; 0xdda <USB_Host_WaitForIOS>
     f4a:	88 23       	and	r24, r24
     f4c:	09 f0       	breq	.+2      	; 0xf50 <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f4e:	52 c0       	rjmp	.+164    	; 0xff4 <USB_Host_SendControlRequest+0x1ca>
     f50:	80 91 a6 00 	lds	r24, 0x00A6
     f54:	8b 77       	andi	r24, 0x7B	; 123
     f56:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     f5a:	82 e0       	ldi	r24, 0x02	; 2
     f5c:	3e df       	rcall	.-388    	; 0xdda <USB_Host_WaitForIOS>
     f5e:	4a c0       	rjmp	.+148    	; 0xff4 <USB_Host_SendControlRequest+0x1ca>
     f60:	20 97       	sbiw	r28, 0x00	; 0
     f62:	a1 f1       	breq	.+104    	; 0xfcc <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f64:	80 91 aa 00 	lds	r24, 0x00AA
     f68:	8f 7c       	andi	r24, 0xCF	; 207
     f6a:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
     f6c:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f70:	80 91 a9 00 	lds	r24, 0x00A9
     f74:	8f 7b       	andi	r24, 0xBF	; 191
     f76:	80 93 a9 00 	sts	0x00A9, r24
     f7a:	1c c0       	rjmp	.+56     	; 0xfb4 <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f7c:	2e df       	rcall	.-420    	; 0xdda <USB_Host_WaitForIOS>
     f7e:	88 23       	and	r24, r24
     f80:	c9 f5       	brne	.+114    	; 0xff4 <USB_Host_SendControlRequest+0x1ca>
     f82:	fe 01       	movw	r30, r28
     f84:	07 c0       	rjmp	.+14     	; 0xf94 <USB_Host_SendControlRequest+0x16a>
     f86:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f88:	ef 01       	movw	r28, r30
     f8a:	80 93 af 00 	sts	0x00AF, r24
     f8e:	01 50       	subi	r16, 0x01	; 1
     f90:	10 40       	sbci	r17, 0x00	; 0
     f92:	59 f0       	breq	.+22     	; 0xfaa <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
     f94:	ef 01       	movw	r28, r30
     f96:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     f9a:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
     f9e:	80 91 75 01 	lds	r24, 0x0175
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
     fa2:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     fa4:	28 17       	cp	r18, r24
     fa6:	39 07       	cpc	r19, r25
     fa8:	70 f3       	brcs	.-36     	; 0xf86 <USB_Host_SendControlRequest+0x15c>
     faa:	80 91 a6 00 	lds	r24, 0x00A6
     fae:	8b 77       	andi	r24, 0x7B	; 123
     fb0:	80 93 a6 00 	sts	0x00A6, r24
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     fb8:	11 05       	cpc	r17, r1
     fba:	01 f7       	brne	.-64     	; 0xf7c <USB_Host_SendControlRequest+0x152>
     fbc:	0e df       	rcall	.-484    	; 0xdda <USB_Host_WaitForIOS>
     fbe:	88 23       	and	r24, r24
     fc0:	c9 f4       	brne	.+50     	; 0xff4 <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fc2:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
     fc6:	80 64       	ori	r24, 0x40	; 64
     fc8:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fcc:	80 91 aa 00 	lds	r24, 0x00AA
     fd0:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fd2:	80 61       	ori	r24, 0x10	; 16
     fd4:	80 93 aa 00 	sts	0x00AA, r24
     fd8:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fdc:	8f 7b       	andi	r24, 0xBF	; 191
     fde:	80 93 a9 00 	sts	0x00A9, r24
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	fa de       	rcall	.-524    	; 0xdda <USB_Host_WaitForIOS>
     fe6:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fe8:	29 f4       	brne	.+10     	; 0xff4 <USB_Host_SendControlRequest+0x1ca>
     fea:	90 91 a6 00 	lds	r25, 0x00A6
     fee:	9e 77       	andi	r25, 0x7E	; 126
     ff0:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     ff4:	90 91 a9 00 	lds	r25, 0x00A9
     ff8:	90 64       	ori	r25, 0x40	; 64
     ffa:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     ffe:	e1 14       	cp	r14, r1
    1000:	f1 04       	cpc	r15, r1
    1002:	29 f4       	brne	.+10     	; 0x100e <USB_Host_SendControlRequest+0x1e4>
    1004:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1008:	9e 7f       	andi	r25, 0xFE	; 254
    100a:	90 93 9e 00 	sts	0x009E, r25
    100e:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1010:	90 93 a8 00 	sts	0x00A8, r25
    1014:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	1f 91       	pop	r17
    101e:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1020:	ff 90       	pop	r15
    1022:	ef 90       	pop	r14
    1024:	08 95       	ret

00001026 <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    1026:	cf 93       	push	r28
    1028:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    102a:	10 92 95 01 	sts	0x0195, r1
    102e:	89 e0       	ldi	r24, 0x09	; 9
    1030:	80 93 96 01 	sts	0x0196, r24
    1034:	c0 93 97 01 	sts	0x0197, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1038:	10 92 98 01 	sts	0x0198, r1
    103c:	10 92 9a 01 	sts	0x019A, r1
    1040:	10 92 99 01 	sts	0x0199, r1
    1044:	10 92 9c 01 	sts	0x019C, r1
    1048:	10 92 9b 01 	sts	0x019B, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    104c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	ea de       	rcall	.-556    	; 0xe2a <USB_Host_SendControlRequest>
    1056:	88 23       	and	r24, r24
    1058:	49 f4       	brne	.+18     	; 0x106c <USB_Host_SetDeviceConfiguration+0x46>
    105a:	c0 93 93 01 	sts	0x0193, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    105e:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1060:	11 f0       	breq	.+4      	; 0x1066 <USB_Host_SetDeviceConfiguration+0x40>
    1062:	9b e0       	ldi	r25, 0x0B	; 11
    1064:	01 c0       	rjmp	.+2      	; 0x1068 <USB_Host_SetDeviceConfiguration+0x42>
    1066:	9a e0       	ldi	r25, 0x0A	; 10
    1068:	90 93 9d 01 	sts	0x019D, r25
    106c:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    106e:	08 95       	ret

00001070 <USB_Host_GetDescriptor>:
    1070:	fa 01       	movw	r30, r20
uint8_t USB_Host_GetDescriptor(const uint8_t Type,
                               const uint8_t Index,
                               void* const Buffer,
                               const uint8_t BufferLength)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1072:	90 e8       	ldi	r25, 0x80	; 128
    1074:	90 93 95 01 	sts	0x0195, r25
    1078:	96 e0       	ldi	r25, 0x06	; 6
    107a:	90 93 96 01 	sts	0x0196, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = (((uint16_t)Type << 8) | Index),
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	58 2f       	mov	r21, r24
    1082:	40 e0       	ldi	r20, 0x00	; 0
    1084:	64 2b       	or	r22, r20
    1086:	75 2b       	or	r23, r21
uint8_t USB_Host_GetDescriptor(const uint8_t Type,
                               const uint8_t Index,
                               void* const Buffer,
                               const uint8_t BufferLength)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1088:	70 93 98 01 	sts	0x0198, r23
    108c:	60 93 97 01 	sts	0x0197, r22
    1090:	10 92 9a 01 	sts	0x019A, r1
    1094:	10 92 99 01 	sts	0x0199, r1
    1098:	20 93 9b 01 	sts	0x019B, r18
    109c:	10 92 9c 01 	sts	0x019C, r1
    10a0:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = BufferLength,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
    10a4:	cf 01       	movw	r24, r30
    10a6:	c1 ce       	rjmp	.-638    	; 0xe2a <USB_Host_SendControlRequest>

000010a8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    10a8:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    10aa:	c0 91 a7 00 	lds	r28, 0x00A7
    10ae:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    10b0:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    10b4:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    10b8:	ca da       	rcall	.-2668   	; 0x64e <USB_Host_ProcessNextHostState>
    10ba:	c0 93 a7 00 	sts	0x00A7, r28
    10be:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    10c0:	08 95       	ret

000010c2 <DCOMP_AOA_Host_NextAndroidAccessoryInterface>:

	return AOA_ENUMERROR_NoError;
}

static uint8_t DCOMP_AOA_Host_NextAndroidAccessoryInterface(void* const CurrentDescriptor)
{
    10c2:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    10c4:	81 81       	ldd	r24, Z+1	; 0x01
    10c6:	84 30       	cpi	r24, 0x04	; 4
    10c8:	49 f4       	brne	.+18     	; 0x10dc <DCOMP_AOA_Host_NextAndroidAccessoryInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AOA_CSCP_AOADataClass)    &&
    10ca:	85 81       	ldd	r24, Z+5	; 0x05
    10cc:	8f 3f       	cpi	r24, 0xFF	; 255
    10ce:	31 f4       	brne	.+12     	; 0x10dc <DCOMP_AOA_Host_NextAndroidAccessoryInterface+0x1a>
    10d0:	86 81       	ldd	r24, Z+6	; 0x06
    10d2:	8f 3f       	cpi	r24, 0xFF	; 255
    10d4:	19 f4       	brne	.+6      	; 0x10dc <DCOMP_AOA_Host_NextAndroidAccessoryInterface+0x1a>
		    (Interface->SubClass == AOA_CSCP_AOADataSubclass) &&
    10d6:	87 81       	ldd	r24, Z+7	; 0x07
    10d8:	88 23       	and	r24, r24
    10da:	11 f0       	breq	.+4      	; 0x10e0 <DCOMP_AOA_Host_NextAndroidAccessoryInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    10dc:	82 e0       	ldi	r24, 0x02	; 2
    10de:	08 95       	ret

		if ((Interface->Class    == AOA_CSCP_AOADataClass)    &&
		    (Interface->SubClass == AOA_CSCP_AOADataSubclass) &&
		    (Interface->Protocol == AOA_CSCP_AOADataProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    10e0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    10e2:	08 95       	ret

000010e4 <DCOMP_AOA_Host_NextInterfaceBulkEndpoint>:

static uint8_t DCOMP_AOA_Host_NextInterfaceBulkEndpoint(void* const CurrentDescriptor)
{
    10e4:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    10e6:	81 81       	ldd	r24, Z+1	; 0x01
    10e8:	85 30       	cpi	r24, 0x05	; 5
    10ea:	49 f4       	brne	.+18     	; 0x10fe <DCOMP_AOA_Host_NextInterfaceBulkEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
    10ec:	83 81       	ldd	r24, Z+3	; 0x03
    10ee:	83 70       	andi	r24, 0x03	; 3

		if ((EndpointType == EP_TYPE_BULK) && (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
    10f0:	82 30       	cpi	r24, 0x02	; 2
    10f2:	39 f4       	brne	.+14     	; 0x1102 <DCOMP_AOA_Host_NextInterfaceBulkEndpoint+0x1e>
    10f4:	82 81       	ldd	r24, Z+2	; 0x02
    10f6:	6c dc       	rcall	.-1832   	; 0x9d0 <Pipe_IsEndpointBound>
    10f8:	88 23       	and	r24, r24
    10fa:	19 f4       	brne	.+6      	; 0x1102 <DCOMP_AOA_Host_NextInterfaceBulkEndpoint+0x1e>
    10fc:	04 c0       	rjmp	.+8      	; 0x1106 <DCOMP_AOA_Host_NextInterfaceBulkEndpoint+0x22>
    10fe:	84 30       	cpi	r24, 0x04	; 4
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1100:	21 f0       	breq	.+8      	; 0x110a <DCOMP_AOA_Host_NextInterfaceBulkEndpoint+0x26>
    1102:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1104:	08 95       	ret
    1106:	80 e0       	ldi	r24, 0x00	; 0
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if ((EndpointType == EP_TYPE_BULK) && (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		  return DESCRIPTOR_SEARCH_Found;
    1108:	08 95       	ret
    110a:	81 e0       	ldi	r24, 0x01	; 1
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    110c:	08 95       	ret

0000110e <AOA_Host_ValidateAccessoryDevice>:
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    110e:	fb 01       	movw	r30, r22
                                      const USB_Descriptor_Device_t* const DeviceDescriptor,
                                      bool* const NeedModeSwitch)
{
	(void)AOAInterfaceInfo;

	if (DeviceDescriptor->Header.Type != DTYPE_Device)
    1110:	81 81       	ldd	r24, Z+1	; 0x01
    1112:	81 30       	cpi	r24, 0x01	; 1
    1114:	69 f4       	brne	.+26     	; 0x1130 <AOA_Host_ValidateAccessoryDevice+0x22>
	  return false;

	*NeedModeSwitch = ((DeviceDescriptor->ProductID != ANDROID_ACCESSORY_PRODUCT_ID) &&
    1116:	82 85       	ldd	r24, Z+10	; 0x0a
    1118:	93 85       	ldd	r25, Z+11	; 0x0b
    111a:	80 50       	subi	r24, 0x00	; 0
    111c:	9d 42       	sbci	r25, 0x2D	; 45
    111e:	21 e0       	ldi	r18, 0x01	; 1
    1120:	82 30       	cpi	r24, 0x02	; 2
    1122:	91 05       	cpc	r25, r1
    1124:	08 f4       	brcc	.+2      	; 0x1128 <AOA_Host_ValidateAccessoryDevice+0x1a>
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	fa 01       	movw	r30, r20
    112a:	20 83       	st	Z, r18
	                   (DeviceDescriptor->ProductID != ANDROID_ACCESSORY_ADB_PRODUCT_ID));

	return true;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	08 95       	ret
                                      bool* const NeedModeSwitch)
{
	(void)AOAInterfaceInfo;

	if (DeviceDescriptor->Header.Type != DTYPE_Device)
	  return false;
    1130:	80 e0       	ldi	r24, 0x00	; 0

	*NeedModeSwitch = ((DeviceDescriptor->ProductID != ANDROID_ACCESSORY_PRODUCT_ID) &&
	                   (DeviceDescriptor->ProductID != ANDROID_ACCESSORY_ADB_PRODUCT_ID));

	return true;
}
    1132:	08 95       	ret

00001134 <AOA_Host_ConfigurePipes>:

uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    1134:	4f 92       	push	r4
    1136:	5f 92       	push	r5
    1138:	7f 92       	push	r7
    113a:	8f 92       	push	r8
    113c:	9f 92       	push	r9
    113e:	af 92       	push	r10
    1140:	bf 92       	push	r11
    1142:	cf 92       	push	r12
    1144:	df 92       	push	r13
    1146:	ef 92       	push	r14
    1148:	ff 92       	push	r15
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	00 d0       	rcall	.+0      	; 0x1154 <AOA_Host_ConfigurePipes+0x20>
    1154:	00 d0       	rcall	.+0      	; 0x1156 <AOA_Host_ConfigurePipes+0x22>
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	8c 01       	movw	r16, r24
    115c:	7a 83       	std	Y+2, r23	; 0x02
    115e:	69 83       	std	Y+1, r22	; 0x01
    1160:	fa 01       	movw	r30, r20
    1162:	5c 83       	std	Y+4, r21	; 0x04
    1164:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* AOAInterface    = NULL;

	memset(&AOAInterfaceInfo->State, 0x00, sizeof(AOAInterfaceInfo->State));
    1166:	dc 01       	movw	r26, r24
    1168:	59 96       	adiw	r26, 0x19	; 25
    116a:	1c 92       	st	X, r1
    116c:	1e 92       	st	-X, r1
    116e:	58 97       	sbiw	r26, 0x18	; 24

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1170:	81 81       	ldd	r24, Z+1	; 0x01
    1172:	82 30       	cpi	r24, 0x02	; 2
    1174:	09 f0       	breq	.+2      	; 0x1178 <AOA_Host_ConfigurePipes+0x44>
    1176:	64 c0       	rjmp	.+200    	; 0x1240 <AOA_Host_ConfigurePipes+0x10c>
	  return AOA_ENUMERROR_InvalidConfigDescriptor;

	if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1178:	83 e0       	ldi	r24, 0x03	; 3
    117a:	a8 2e       	mov	r10, r24
    117c:	b1 2c       	mov	r11, r1
    117e:	ac 0e       	add	r10, r28
    1180:	bd 1e       	adc	r11, r29
    1182:	4e 01       	movw	r8, r28
    1184:	08 94       	sec
    1186:	81 1c       	adc	r8, r1
    1188:	91 1c       	adc	r9, r1
    118a:	c4 01       	movw	r24, r8
    118c:	b5 01       	movw	r22, r10
    118e:	41 e6       	ldi	r20, 0x61	; 97
    1190:	58 e0       	ldi	r21, 0x08	; 8
    1192:	db dd       	rcall	.-1098   	; 0xd4a <USB_GetNextDescriptorComp>
    1194:	88 23       	and	r24, r24
    1196:	09 f0       	breq	.+2      	; 0x119a <AOA_Host_ConfigurePipes+0x66>
    1198:	55 c0       	rjmp	.+170    	; 0x1244 <AOA_Host_ConfigurePipes+0x110>
    119a:	4b 80       	ldd	r4, Y+3	; 0x03
	                              DCOMP_AOA_Host_NextAndroidAccessoryInterface) != DESCRIPTOR_SEARCH_COMP_Found)
	{
		return AOA_ENUMERROR_NoCompatibleInterfaceFound;
	}

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    119c:	5c 80       	ldd	r5, Y+4	; 0x04
    119e:	cc 24       	eor	r12, r12
uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
    11a0:	dd 24       	eor	r13, r13
    11a2:	ee 24       	eor	r14, r14

uint8_t AOA_Host_ConfigurePipes(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
    11a4:	ff 24       	eor	r15, r15
    11a6:	7a 2c       	mov	r7, r10

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    11a8:	a9 2c       	mov	r10, r9
    11aa:	88 2d       	mov	r24, r8
    11ac:	9a 2d       	mov	r25, r10
    11ae:	67 2d       	mov	r22, r7
    11b0:	7b 2d       	mov	r23, r11
    11b2:	42 e7       	ldi	r20, 0x72	; 114
    11b4:	58 e0       	ldi	r21, 0x08	; 8
    11b6:	c9 dd       	rcall	.-1134   	; 0xd4a <USB_GetNextDescriptorComp>
    11b8:	88 23       	and	r24, r24
    11ba:	09 f0       	breq	.+2      	; 0x11be <AOA_Host_ConfigurePipes+0x8a>
    11bc:	43 c0       	rjmp	.+134    	; 0x1244 <AOA_Host_ConfigurePipes+0x110>
    11be:	eb 81       	ldd	r30, Y+3	; 0x03
    11c0:	fc 81       	ldd	r31, Y+4	; 0x04
		                              DCOMP_AOA_Host_NextInterfaceBulkEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			return AOA_ENUMERROR_NoCompatibleInterfaceFound;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    11c2:	82 81       	ldd	r24, Z+2	; 0x02
    11c4:	87 ff       	sbrs	r24, 7

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <AOA_Host_ConfigurePipes+0x98>
    11c8:	7f 01       	movw	r14, r30
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <AOA_Host_ConfigurePipes+0x9a>
		  DataINEndpoint  = EndpointData;
    11cc:	6f 01       	movw	r12, r30
    11ce:	e1 14       	cp	r14, r1
		else
		  DataOUTEndpoint = EndpointData;
    11d0:	f1 04       	cpc	r15, r1
		return AOA_ENUMERROR_NoCompatibleInterfaceFound;
	}

	AOAInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    11d2:	59 f3       	breq	.-42     	; 0x11aa <AOA_Host_ConfigurePipes+0x76>
    11d4:	c1 14       	cp	r12, r1
    11d6:	d1 04       	cpc	r13, r1
    11d8:	41 f3       	breq	.-48     	; 0x11aa <AOA_Host_ConfigurePipes+0x76>
    11da:	f7 01       	movw	r30, r14
    11dc:	84 81       	ldd	r24, Z+4	; 0x04
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	AOAInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    11de:	95 81       	ldd	r25, Z+5	; 0x05
    11e0:	d8 01       	movw	r26, r16
    11e2:	12 96       	adiw	r26, 0x02	; 2
    11e4:	9c 93       	st	X, r25
    11e6:	8e 93       	st	-X, r24
    11e8:	11 97       	sbiw	r26, 0x01	; 1
    11ea:	82 81       	ldd	r24, Z+2	; 0x02
    11ec:	13 96       	adiw	r26, 0x03	; 3
	AOAInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    11ee:	8c 93       	st	X, r24
    11f0:	13 97       	sbiw	r26, 0x03	; 3
    11f2:	22 e0       	ldi	r18, 0x02	; 2
    11f4:	14 96       	adiw	r26, 0x04	; 4
	AOAInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_BULK;
    11f6:	2c 93       	st	X, r18
    11f8:	14 97       	sbiw	r26, 0x04	; 4
    11fa:	f6 01       	movw	r30, r12
    11fc:	84 81       	ldd	r24, Z+4	; 0x04

	AOAInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    11fe:	95 81       	ldd	r25, Z+5	; 0x05
    1200:	18 96       	adiw	r26, 0x08	; 8
    1202:	9c 93       	st	X, r25
    1204:	8e 93       	st	-X, r24
    1206:	17 97       	sbiw	r26, 0x07	; 7
    1208:	82 81       	ldd	r24, Z+2	; 0x02
    120a:	19 96       	adiw	r26, 0x09	; 9
	AOAInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    120c:	8c 93       	st	X, r24
    120e:	19 97       	sbiw	r26, 0x09	; 9
    1210:	1a 96       	adiw	r26, 0x0a	; 10
    1212:	2c 93       	st	X, r18
	AOAInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_BULK;
    1214:	c8 01       	movw	r24, r16
    1216:	61 e0       	ldi	r22, 0x01	; 1

	if (!(Pipe_ConfigurePipeTable(&AOAInterfaceInfo->Config.DataINPipe, 1)))
    1218:	a6 db       	rcall	.-2228   	; 0x966 <Pipe_ConfigurePipeTable>
    121a:	88 23       	and	r24, r24
    121c:	a9 f0       	breq	.+42     	; 0x1248 <AOA_Host_ConfigurePipes+0x114>
    121e:	c8 01       	movw	r24, r16
    1220:	06 96       	adiw	r24, 0x06	; 6
    1222:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Pipe_ConfigurePipeTable(&AOAInterfaceInfo->Config.DataOUTPipe, 1)))
    1224:	a0 db       	rcall	.-2240   	; 0x966 <Pipe_ConfigurePipeTable>
    1226:	88 23       	and	r24, r24
    1228:	79 f0       	breq	.+30     	; 0x1248 <AOA_Host_ConfigurePipes+0x114>
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	d8 01       	movw	r26, r16
    122e:	58 96       	adiw	r26, 0x18	; 24
    1230:	8c 93       	st	X, r24
	  return false;

	AOAInterfaceInfo->State.IsActive        = true;
    1232:	58 97       	sbiw	r26, 0x18	; 24
    1234:	f2 01       	movw	r30, r4
    1236:	82 81       	ldd	r24, Z+2	; 0x02
    1238:	59 96       	adiw	r26, 0x19	; 25
    123a:	8c 93       	st	X, r24
	AOAInterfaceInfo->State.InterfaceNumber = AOAInterface->InterfaceNumber;
    123c:	59 97       	sbiw	r26, 0x19	; 25
    123e:	04 c0       	rjmp	.+8      	; 0x1248 <AOA_Host_ConfigurePipes+0x114>
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	03 c0       	rjmp	.+6      	; 0x124a <AOA_Host_ConfigurePipes+0x116>
    1244:	82 e0       	ldi	r24, 0x02	; 2
    1246:	01 c0       	rjmp	.+2      	; 0x124a <AOA_Host_ConfigurePipes+0x116>
	USB_Descriptor_Interface_t* AOAInterface    = NULL;

	memset(&AOAInterfaceInfo->State, 0x00, sizeof(AOAInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AOA_ENUMERROR_InvalidConfigDescriptor;
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	0f 90       	pop	r0
	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_AOA_Host_NextInterfaceBulkEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			return AOA_ENUMERROR_NoCompatibleInterfaceFound;
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0

	if (!(Pipe_ConfigurePipeTable(&AOAInterfaceInfo->Config.DataINPipe, 1)))
	  return false;

	if (!(Pipe_ConfigurePipeTable(&AOAInterfaceInfo->Config.DataOUTPipe, 1)))
	  return false;
    1250:	0f 90       	pop	r0

	AOAInterfaceInfo->State.IsActive        = true;
	AOAInterfaceInfo->State.InterfaceNumber = AOAInterface->InterfaceNumber;

	return AOA_ENUMERROR_NoError;
}
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	ff 90       	pop	r15
    125c:	ef 90       	pop	r14
    125e:	df 90       	pop	r13
    1260:	cf 90       	pop	r12
    1262:	bf 90       	pop	r11
    1264:	af 90       	pop	r10
    1266:	9f 90       	pop	r9
    1268:	8f 90       	pop	r8
    126a:	7f 90       	pop	r7
    126c:	5f 90       	pop	r5
    126e:	4f 90       	pop	r4
    1270:	08 95       	ret

00001272 <AOA_Host_StartAccessoryMode>:
    1272:	cf 92       	push	r12
    1274:	df 92       	push	r13
    1276:	ef 92       	push	r14
    1278:	ff 92       	push	r15
	AOA_Host_Flush(AOAInterfaceInfo);
	#endif
}

uint8_t AOA_Host_StartAccessoryMode(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	00 d0       	rcall	.+0      	; 0x1284 <AOA_Host_StartAccessoryMode+0x12>
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	d8 2e       	mov	r13, r24
    128a:	09 2f       	mov	r16, r25
	return USB_Host_SendControlRequest(NULL);
}

static uint8_t AOA_Host_GetAccessoryProtocol(uint16_t* const Protocol)
{
	USB_ControlRequest = (USB_Request_Header_t)
    128c:	a5 e9       	ldi	r26, 0x95	; 149
    128e:	b1 e0       	ldi	r27, 0x01	; 1
    1290:	ef e7       	ldi	r30, 0x7F	; 127
    1292:	f1 e0       	ldi	r31, 0x01	; 1
    1294:	88 e0       	ldi	r24, 0x08	; 8
    1296:	01 90       	ld	r0, Z+
    1298:	0d 92       	st	X+, r0
    129a:	81 50       	subi	r24, 0x01	; 1
    129c:	e1 f7       	brne	.-8      	; 0x1296 <AOA_Host_StartAccessoryMode+0x24>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    129e:	10 92 a7 00 	sts	0x00A7, r1
		.wIndex        = 0,
		.wLength       = sizeof(uint16_t),
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest(Protocol);
    12a2:	ce 01       	movw	r24, r28
    12a4:	01 96       	adiw	r24, 0x01	; 1
    12a6:	c1 dd       	rcall	.-1150   	; 0xe2a <USB_Host_SendControlRequest>
    12a8:	88 23       	and	r24, r24
uint8_t AOA_Host_StartAccessoryMode(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	uint8_t ErrorCode;

	uint16_t AccessoryProtocol;
	if ((ErrorCode = AOA_Host_GetAccessoryProtocol(&AccessoryProtocol)) != HOST_WAITERROR_Successful)
    12aa:	09 f0       	breq	.+2      	; 0x12ae <AOA_Host_StartAccessoryMode+0x3c>
    12ac:	49 c0       	rjmp	.+146    	; 0x1340 <AOA_Host_StartAccessoryMode+0xce>
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
	  return ErrorCode;

	if (AccessoryProtocol != CPU_TO_LE16(AOA_PROTOCOL_AccessoryV1))
    12b0:	9a 81       	ldd	r25, Y+2	; 0x02
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	91 05       	cpc	r25, r1
    12b6:	09 f0       	breq	.+2      	; 0x12ba <AOA_Host_StartAccessoryMode+0x48>
    12b8:	42 c0       	rjmp	.+132    	; 0x133e <AOA_Host_StartAccessoryMode+0xcc>
    12ba:	ed 2c       	mov	r14, r13
    12bc:	f0 2e       	mov	r15, r16
    12be:	00 e0       	ldi	r16, 0x00	; 0
    12c0:	10 e0       	ldi	r17, 0x00	; 0
    12c2:	90 e4       	ldi	r25, 0x40	; 64
	const char* String = AOAInterfaceInfo->Config.PropertyStrings[StringIndex];

	if (String == NULL)
	  String = "";

	USB_ControlRequest = (USB_Request_Header_t)
    12c4:	d9 2e       	mov	r13, r25
    12c6:	24 e3       	ldi	r18, 0x34	; 52
    12c8:	c2 2e       	mov	r12, r18
    12ca:	f7 01       	movw	r30, r14
}

static uint8_t AOA_Host_SendPropertyString(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo,
                                           const uint8_t StringIndex)
{
	const char* String = AOAInterfaceInfo->Config.PropertyStrings[StringIndex];
    12cc:	84 85       	ldd	r24, Z+12	; 0x0c
    12ce:	95 85       	ldd	r25, Z+13	; 0x0d
    12d0:	00 97       	sbiw	r24, 0x00	; 0

	if (String == NULL)
    12d2:	11 f4       	brne	.+4      	; 0x12d8 <AOA_Host_StartAccessoryMode+0x66>
    12d4:	8e e7       	ldi	r24, 0x7E	; 126
	  String = "";
    12d6:	91 e0       	ldi	r25, 0x01	; 1
    12d8:	fc 01       	movw	r30, r24
	{
		.bmRequestType = (REQDIR_HOSTTODEVICE | REQTYPE_VENDOR | REQREC_DEVICE),
		.bRequest      = AOA_REQ_SendString,
		.wValue        = 0,
		.wIndex        = StringIndex,
		.wLength       = (strlen(String) + 1),
    12da:	01 90       	ld	r0, Z+
    12dc:	00 20       	and	r0, r0
    12de:	e9 f7       	brne	.-6      	; 0x12da <AOA_Host_StartAccessoryMode+0x68>
    12e0:	d0 92 95 01 	sts	0x0195, r13
	const char* String = AOAInterfaceInfo->Config.PropertyStrings[StringIndex];

	if (String == NULL)
	  String = "";

	USB_ControlRequest = (USB_Request_Header_t)
    12e4:	c0 92 96 01 	sts	0x0196, r12
    12e8:	10 92 98 01 	sts	0x0198, r1
    12ec:	10 92 97 01 	sts	0x0197, r1
    12f0:	10 93 9a 01 	sts	0x019A, r17
    12f4:	00 93 99 01 	sts	0x0199, r16
    12f8:	e8 1b       	sub	r30, r24
	{
		.bmRequestType = (REQDIR_HOSTTODEVICE | REQTYPE_VENDOR | REQREC_DEVICE),
		.bRequest      = AOA_REQ_SendString,
		.wValue        = 0,
		.wIndex        = StringIndex,
		.wLength       = (strlen(String) + 1),
    12fa:	f9 0b       	sbc	r31, r25
    12fc:	f0 93 9c 01 	sts	0x019C, r31
	const char* String = AOAInterfaceInfo->Config.PropertyStrings[StringIndex];

	if (String == NULL)
	  String = "";

	USB_ControlRequest = (USB_Request_Header_t)
    1300:	e0 93 9b 01 	sts	0x019B, r30
    1304:	10 92 a7 00 	sts	0x00A7, r1
    1308:	90 dd       	rcall	.-1248   	; 0xe2a <USB_Host_SendControlRequest>
		.wIndex        = StringIndex,
		.wLength       = (strlen(String) + 1),
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest((char*)String);
    130a:	88 23       	and	r24, r24
    130c:	c9 f4       	brne	.+50     	; 0x1340 <AOA_Host_StartAccessoryMode+0xce>
	if (AccessoryProtocol != CPU_TO_LE16(AOA_PROTOCOL_AccessoryV1))
	  return AOA_ERROR_LOGICAL_CMD_FAILED;

	for (uint8_t PropertyIndex = 0; PropertyIndex < AOA_STRING_TOTAL_STRINGS; PropertyIndex++)
	{
		if ((ErrorCode = AOA_Host_SendPropertyString(AOAInterfaceInfo, PropertyIndex)) != HOST_WAITERROR_Successful)
    130e:	0f 5f       	subi	r16, 0xFF	; 255
    1310:	1f 4f       	sbci	r17, 0xFF	; 255
    1312:	82 e0       	ldi	r24, 0x02	; 2
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	e8 0e       	add	r14, r24
    1318:	f9 1e       	adc	r15, r25
    131a:	06 30       	cpi	r16, 0x06	; 6
    131c:	11 05       	cpc	r17, r1
	  return ErrorCode;

	if (AccessoryProtocol != CPU_TO_LE16(AOA_PROTOCOL_AccessoryV1))
	  return AOA_ERROR_LOGICAL_CMD_FAILED;

	for (uint8_t PropertyIndex = 0; PropertyIndex < AOA_STRING_TOTAL_STRINGS; PropertyIndex++)
    131e:	a9 f6       	brne	.-86     	; 0x12ca <AOA_Host_StartAccessoryMode+0x58>
    1320:	a5 e9       	ldi	r26, 0x95	; 149
    1322:	b1 e0       	ldi	r27, 0x01	; 1
	{
		if ((ErrorCode = AOA_Host_SendPropertyString(AOAInterfaceInfo, PropertyIndex)) != HOST_WAITERROR_Successful)
		  return ErrorCode;
	}

	USB_ControlRequest = (USB_Request_Header_t)
    1324:	e7 e8       	ldi	r30, 0x87	; 135
    1326:	f1 e0       	ldi	r31, 0x01	; 1
    1328:	88 e0       	ldi	r24, 0x08	; 8
    132a:	01 90       	ld	r0, Z+
    132c:	0d 92       	st	X+, r0
    132e:	81 50       	subi	r24, 0x01	; 1
    1330:	e1 f7       	brne	.-8      	; 0x132a <AOA_Host_StartAccessoryMode+0xb8>
    1332:	10 92 a7 00 	sts	0x00A7, r1
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	90 e0       	ldi	r25, 0x00	; 0
		.wIndex        = 0,
		.wLength       = 0,
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest(NULL);
    133a:	77 dd       	rcall	.-1298   	; 0xe2a <USB_Host_SendControlRequest>
    133c:	01 c0       	rjmp	.+2      	; 0x1340 <AOA_Host_StartAccessoryMode+0xce>
    133e:	80 e8       	ldi	r24, 0x80	; 128
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
	uint16_t AccessoryProtocol;
	if ((ErrorCode = AOA_Host_GetAccessoryProtocol(&AccessoryProtocol)) != HOST_WAITERROR_Successful)
	  return ErrorCode;

	if (AccessoryProtocol != CPU_TO_LE16(AOA_PROTOCOL_AccessoryV1))
	  return AOA_ERROR_LOGICAL_CMD_FAILED;
    1344:	df 91       	pop	r29
		.wLength       = 0,
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest(NULL);
}
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	ff 90       	pop	r15
    134e:	ef 90       	pop	r14
    1350:	df 90       	pop	r13
    1352:	cf 90       	pop	r12
    1354:	08 95       	ret

00001356 <AOA_Host_BytesReceived>:
    1356:	fc 01       	movw	r30, r24
    1358:	80 91 9d 01 	lds	r24, 0x019D
	return PIPE_READYWAIT_NoError;
}

uint16_t AOA_Host_BytesReceived(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
    135c:	8b 30       	cpi	r24, 0x0B	; 11
    135e:	59 f5       	brne	.+86     	; 0x13b6 <AOA_Host_BytesReceived+0x60>
    1360:	80 8d       	ldd	r24, Z+24	; 0x18
    1362:	88 23       	and	r24, r24
    1364:	59 f1       	breq	.+86     	; 0x13bc <AOA_Host_BytesReceived+0x66>
    1366:	80 81       	ld	r24, Z
    1368:	8f 70       	andi	r24, 0x0F	; 15
    136a:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    136e:	80 91 a9 00 	lds	r24, 0x00A9
    1372:	8f 7b       	andi	r24, 0xBF	; 191
    1374:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1378:	80 91 a6 00 	lds	r24, 0x00A6
	  return 0;

	Pipe_SelectPipe(AOAInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    137c:	80 ff       	sbrs	r24, 0
    137e:	16 c0       	rjmp	.+44     	; 0x13ac <AOA_Host_BytesReceived+0x56>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1380:	80 91 f6 00 	lds	r24, 0x00F6
    1384:	90 91 f7 00 	lds	r25, 0x00F7
	{
		if (!(Pipe_BytesInPipe()))
    1388:	00 97       	sbiw	r24, 0x00	; 0
    138a:	31 f4       	brne	.+12     	; 0x1398 <AOA_Host_BytesReceived+0x42>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    138c:	80 91 a6 00 	lds	r24, 0x00A6
    1390:	8e 77       	andi	r24, 0x7E	; 126
    1392:	80 93 a6 00 	sts	0x00A6, r24
    1396:	0a c0       	rjmp	.+20     	; 0x13ac <AOA_Host_BytesReceived+0x56>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1398:	80 91 a9 00 	lds	r24, 0x00A9
    139c:	80 64       	ori	r24, 0x40	; 64
    139e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13a2:	80 91 f6 00 	lds	r24, 0x00F6
    13a6:	90 91 f7 00 	lds	r25, 0x00F7
			return 0;
		}
		else
		{
			Pipe_Freeze();
			return Pipe_BytesInPipe();
    13aa:	08 95       	ret

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13ac:	80 91 a9 00 	lds	r24, 0x00A9
    13b0:	80 64       	ori	r24, 0x40	; 64
    13b2:	80 93 a9 00 	sts	0x00A9, r24
}

uint16_t AOA_Host_BytesReceived(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
	  return 0;
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	08 95       	ret
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	90 e0       	ldi	r25, 0x00	; 0
	{
		Pipe_Freeze();

		return 0;
	}
}
    13c0:	08 95       	ret

000013c2 <AOA_Host_ReceiveByte>:

int16_t AOA_Host_ReceiveByte(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
    13c2:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
    13c4:	80 91 9d 01 	lds	r24, 0x019D
    13c8:	8b 30       	cpi	r24, 0x0B	; 11
    13ca:	89 f5       	brne	.+98     	; 0x142e <AOA_Host_ReceiveByte+0x6c>
    13cc:	80 8d       	ldd	r24, Z+24	; 0x18
    13ce:	88 23       	and	r24, r24
    13d0:	89 f1       	breq	.+98     	; 0x1434 <AOA_Host_ReceiveByte+0x72>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13d2:	80 81       	ld	r24, Z
    13d4:	8f 70       	andi	r24, 0x0F	; 15
    13d6:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13da:	80 91 a9 00 	lds	r24, 0x00A9
    13de:	8f 7b       	andi	r24, 0xBF	; 191
    13e0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    13e4:	80 91 a6 00 	lds	r24, 0x00A6
	int16_t ReceivedByte = -1;

	Pipe_SelectPipe(AOAInterfaceInfo->Config.DataINPipe.Address);
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    13e8:	80 ff       	sbrs	r24, 0
    13ea:	19 c0       	rjmp	.+50     	; 0x141e <AOA_Host_ReceiveByte+0x5c>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13ec:	80 91 f6 00 	lds	r24, 0x00F6
    13f0:	90 91 f7 00 	lds	r25, 0x00F7
	{
		if (Pipe_BytesInPipe())
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	21 f0       	breq	.+8      	; 0x1400 <AOA_Host_ReceiveByte+0x3e>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    13f8:	80 91 af 00 	lds	r24, 0x00AF
		  ReceivedByte = Pipe_Read_8();
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <AOA_Host_ReceiveByte+0x42>
int16_t AOA_Host_ReceiveByte(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
	  return -1;

	int16_t ReceivedByte = -1;
    1400:	8f ef       	ldi	r24, 0xFF	; 255
    1402:	9f ef       	ldi	r25, 0xFF	; 255
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1404:	20 91 f6 00 	lds	r18, 0x00F6
    1408:	30 91 f7 00 	lds	r19, 0x00F7
	if (Pipe_IsINReceived())
	{
		if (Pipe_BytesInPipe())
		  ReceivedByte = Pipe_Read_8();

		if (!(Pipe_BytesInPipe()))
    140c:	21 15       	cp	r18, r1
    140e:	31 05       	cpc	r19, r1
    1410:	41 f4       	brne	.+16     	; 0x1422 <AOA_Host_ReceiveByte+0x60>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1412:	20 91 a6 00 	lds	r18, 0x00A6
    1416:	2e 77       	andi	r18, 0x7E	; 126
    1418:	20 93 a6 00 	sts	0x00A6, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <AOA_Host_ReceiveByte+0x60>
int16_t AOA_Host_ReceiveByte(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
	  return -1;

	int16_t ReceivedByte = -1;
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	9f ef       	ldi	r25, 0xFF	; 255

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1422:	20 91 a9 00 	lds	r18, 0x00A9
    1426:	20 64       	ori	r18, 0x40	; 64
    1428:	20 93 a9 00 	sts	0x00A9, r18
		  Pipe_ClearIN();
	}

	Pipe_Freeze();

	return ReceivedByte;
    142c:	08 95       	ret
}

int16_t AOA_Host_ReceiveByte(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
	  return -1;
    142e:	8f ef       	ldi	r24, 0xFF	; 255
    1430:	9f ef       	ldi	r25, 0xFF	; 255
    1432:	08 95       	ret
    1434:	8f ef       	ldi	r24, 0xFF	; 255
    1436:	9f ef       	ldi	r25, 0xFF	; 255
	}

	Pipe_Freeze();

	return ReceivedByte;
}
    1438:	08 95       	ret

0000143a <AOA_Host_Flush>:

uint8_t AOA_Host_Flush(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
    143a:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
    143c:	80 91 9d 01 	lds	r24, 0x019D
    1440:	8b 30       	cpi	r24, 0x0B	; 11
    1442:	51 f5       	brne	.+84     	; 0x1498 <AOA_Host_Flush+0x5e>
    1444:	80 8d       	ldd	r24, Z+24	; 0x18
    1446:	88 23       	and	r24, r24
    1448:	39 f1       	breq	.+78     	; 0x1498 <AOA_Host_Flush+0x5e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    144a:	86 81       	ldd	r24, Z+6	; 0x06
    144c:	8f 70       	andi	r24, 0x0F	; 15
    144e:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1452:	80 91 a9 00 	lds	r24, 0x00A9
    1456:	8f 7b       	andi	r24, 0xBF	; 191
    1458:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    145c:	80 91 f6 00 	lds	r24, 0x00F6
    1460:	90 91 f7 00 	lds	r25, 0x00F7
	uint8_t ErrorCode;

	Pipe_SelectPipe(AOAInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if (!(Pipe_BytesInPipe()))
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	d1 f0       	breq	.+52     	; 0x149c <AOA_Host_Flush+0x62>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1468:	90 91 a6 00 	lds	r25, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    146c:	80 91 a6 00 	lds	r24, 0x00A6
    1470:	8b 77       	andi	r24, 0x7B	; 123
    1472:	80 93 a6 00 	sts	0x00A6, r24

	bool BankFull = !(Pipe_IsReadWriteAllowed());

	Pipe_ClearOUT();

	if (BankFull)
    1476:	95 fd       	sbrc	r25, 5
    1478:	08 c0       	rjmp	.+16     	; 0x148a <AOA_Host_Flush+0x50>
	{
		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
    147a:	cc da       	rcall	.-2664   	; 0xa14 <Pipe_WaitUntilReady>
    147c:	88 23       	and	r24, r24
    147e:	79 f4       	brne	.+30     	; 0x149e <AOA_Host_Flush+0x64>
    1480:	80 91 a6 00 	lds	r24, 0x00A6
    1484:	8b 77       	andi	r24, 0x7B	; 123
    1486:	80 93 a6 00 	sts	0x00A6, r24
    148a:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    148e:	80 64       	ori	r24, 0x40	; 64
    1490:	80 93 a9 00 	sts	0x00A9, r24
    1494:	80 e0       	ldi	r24, 0x00	; 0
		Pipe_ClearOUT();
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
    1496:	08 95       	ret
    1498:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t AOA_Host_Flush(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
	  return PIPE_READYWAIT_DeviceDisconnected;
    149a:	08 95       	ret
    149c:	80 e0       	ldi	r24, 0x00	; 0

	Pipe_SelectPipe(AOAInterfaceInfo->Config.DataOUTPipe.Address);
	Pipe_Unfreeze();

	if (!(Pipe_BytesInPipe()))
	  return PIPE_READYWAIT_NoError;
    149e:	08 95       	ret

000014a0 <AOA_Host_USBTask>:
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
}
    14a0:	20 91 9d 01 	lds	r18, 0x019D
	return DESCRIPTOR_SEARCH_NotFound;
}

void AOA_Host_USBTask(USB_ClassInfo_AOA_Host_t* const AOAInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(AOAInterfaceInfo->State.IsActive))
    14a4:	2b 30       	cpi	r18, 0x0B	; 11
    14a6:	29 f4       	brne	.+10     	; 0x14b2 <AOA_Host_USBTask+0x12>
    14a8:	fc 01       	movw	r30, r24
    14aa:	20 8d       	ldd	r18, Z+24	; 0x18
    14ac:	22 23       	and	r18, r18
    14ae:	09 f0       	breq	.+2      	; 0x14b2 <AOA_Host_USBTask+0x12>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	AOA_Host_Flush(AOAInterfaceInfo);
    14b0:	c4 cf       	rjmp	.-120    	; 0x143a <AOA_Host_Flush>
    14b2:	08 95       	ret

000014b4 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    14b4:	90 91 c8 00 	lds	r25, 0x00C8
    14b8:	95 ff       	sbrs	r25, 5
    14ba:	fc cf       	rjmp	.-8      	; 0x14b4 <Serial_putchar>
				UDR1 = DataByte;
    14bc:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	08 95       	ret

000014c6 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    14c6:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    14ca:	87 ff       	sbrs	r24, 7
    14cc:	08 c0       	rjmp	.+16     	; 0x14de <Serial_getchar+0x18>
    14ce:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    14d2:	87 ff       	sbrs	r24, 7
    14d4:	07 c0       	rjmp	.+14     	; 0x14e4 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    14d6:	80 91 ce 00 	lds	r24, 0x00CE
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	08 95       	ret
	  return _FDEV_EOF;
    14de:	8e ef       	ldi	r24, 0xFE	; 254
    14e0:	9f ef       	ldi	r25, 0xFF	; 255
    14e2:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    14e4:	8f ef       	ldi	r24, 0xFF	; 255
    14e6:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    14e8:	08 95       	ret

000014ea <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    14ea:	fc 01       	movw	r30, r24
	if (!(Stream))
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	51 f4       	brne	.+20     	; 0x1504 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    14f0:	ee e9       	ldi	r30, 0x9E	; 158
    14f2:	f1 e0       	ldi	r31, 0x01	; 1
    14f4:	f0 93 ad 01 	sts	0x01AD, r31
    14f8:	e0 93 ac 01 	sts	0x01AC, r30
		stdout = Stream;
    14fc:	f0 93 af 01 	sts	0x01AF, r31
    1500:	e0 93 ae 01 	sts	0x01AE, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1504:	8e e0       	ldi	r24, 0x0E	; 14
    1506:	df 01       	movw	r26, r30
    1508:	1d 92       	st	X+, r1
    150a:	8a 95       	dec	r24
    150c:	e9 f7       	brne	.-6      	; 0x1508 <Serial_CreateStream+0x1e>
    150e:	83 e0       	ldi	r24, 0x03	; 3
    1510:	83 83       	std	Z+3, r24	; 0x03
    1512:	8a e5       	ldi	r24, 0x5A	; 90
    1514:	9a e0       	ldi	r25, 0x0A	; 10
    1516:	91 87       	std	Z+9, r25	; 0x09
    1518:	80 87       	std	Z+8, r24	; 0x08
    151a:	83 e6       	ldi	r24, 0x63	; 99
    151c:	9a e0       	ldi	r25, 0x0A	; 10
    151e:	93 87       	std	Z+11, r25	; 0x0b
    1520:	82 87       	std	Z+10, r24	; 0x0a
}
    1522:	08 95       	ret

00001524 <fputc>:
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	8c 01       	movw	r16, r24
    152e:	eb 01       	movw	r28, r22
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	81 ff       	sbrs	r24, 1
    1534:	1b c0       	rjmp	.+54     	; 0x156c <fputc+0x48>
    1536:	82 ff       	sbrs	r24, 2
    1538:	0d c0       	rjmp	.+26     	; 0x1554 <fputc+0x30>
    153a:	2e 81       	ldd	r18, Y+6	; 0x06
    153c:	3f 81       	ldd	r19, Y+7	; 0x07
    153e:	8c 81       	ldd	r24, Y+4	; 0x04
    1540:	9d 81       	ldd	r25, Y+5	; 0x05
    1542:	28 17       	cp	r18, r24
    1544:	39 07       	cpc	r19, r25
    1546:	64 f4       	brge	.+24     	; 0x1560 <fputc+0x3c>
    1548:	e8 81       	ld	r30, Y
    154a:	f9 81       	ldd	r31, Y+1	; 0x01
    154c:	01 93       	st	Z+, r16
    154e:	f9 83       	std	Y+1, r31	; 0x01
    1550:	e8 83       	st	Y, r30
    1552:	06 c0       	rjmp	.+12     	; 0x1560 <fputc+0x3c>
    1554:	e8 85       	ldd	r30, Y+8	; 0x08
    1556:	f9 85       	ldd	r31, Y+9	; 0x09
    1558:	80 2f       	mov	r24, r16
    155a:	09 95       	icall
    155c:	00 97       	sbiw	r24, 0x00	; 0
    155e:	31 f4       	brne	.+12     	; 0x156c <fputc+0x48>
    1560:	8e 81       	ldd	r24, Y+6	; 0x06
    1562:	9f 81       	ldd	r25, Y+7	; 0x07
    1564:	01 96       	adiw	r24, 0x01	; 1
    1566:	9f 83       	std	Y+7, r25	; 0x07
    1568:	8e 83       	std	Y+6, r24	; 0x06
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <fputc+0x4c>
    156c:	0f ef       	ldi	r16, 0xFF	; 255
    156e:	1f ef       	ldi	r17, 0xFF	; 255
    1570:	c8 01       	movw	r24, r16
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	1f 91       	pop	r17
    1578:	0f 91       	pop	r16
    157a:	08 95       	ret

0000157c <printf_P>:
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	fe 01       	movw	r30, r28
    1586:	35 96       	adiw	r30, 0x05	; 5
    1588:	61 91       	ld	r22, Z+
    158a:	71 91       	ld	r23, Z+
    158c:	80 91 ae 01 	lds	r24, 0x01AE
    1590:	90 91 af 01 	lds	r25, 0x01AF
    1594:	dc 01       	movw	r26, r24
    1596:	13 96       	adiw	r26, 0x03	; 3
    1598:	2c 91       	ld	r18, X
    159a:	13 97       	sbiw	r26, 0x03	; 3
    159c:	28 60       	ori	r18, 0x08	; 8
    159e:	13 96       	adiw	r26, 0x03	; 3
    15a0:	2c 93       	st	X, r18
    15a2:	af 01       	movw	r20, r30
    15a4:	39 d0       	rcall	.+114    	; 0x1618 <vfprintf>
    15a6:	e0 91 ae 01 	lds	r30, 0x01AE
    15aa:	f0 91 af 01 	lds	r31, 0x01AF
    15ae:	23 81       	ldd	r18, Z+3	; 0x03
    15b0:	27 7f       	andi	r18, 0xF7	; 247
    15b2:	23 83       	std	Z+3, r18	; 0x03
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	08 95       	ret

000015ba <puts_P>:
    15ba:	0f 93       	push	r16
    15bc:	1f 93       	push	r17
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	8c 01       	movw	r16, r24
    15c4:	e0 91 ae 01 	lds	r30, 0x01AE
    15c8:	f0 91 af 01 	lds	r31, 0x01AF
    15cc:	83 81       	ldd	r24, Z+3	; 0x03
    15ce:	81 ff       	sbrs	r24, 1
    15d0:	1b c0       	rjmp	.+54     	; 0x1608 <puts_P+0x4e>
    15d2:	c0 e0       	ldi	r28, 0x00	; 0
    15d4:	d0 e0       	ldi	r29, 0x00	; 0
    15d6:	07 c0       	rjmp	.+14     	; 0x15e6 <puts_P+0x2c>
    15d8:	09 95       	icall
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	11 f0       	breq	.+4      	; 0x15e2 <puts_P+0x28>
    15de:	cf ef       	ldi	r28, 0xFF	; 255
    15e0:	df ef       	ldi	r29, 0xFF	; 255
    15e2:	0f 5f       	subi	r16, 0xFF	; 255
    15e4:	1f 4f       	sbci	r17, 0xFF	; 255
    15e6:	f8 01       	movw	r30, r16
    15e8:	84 91       	lpm	r24, Z
    15ea:	60 91 ae 01 	lds	r22, 0x01AE
    15ee:	70 91 af 01 	lds	r23, 0x01AF
    15f2:	db 01       	movw	r26, r22
    15f4:	18 96       	adiw	r26, 0x08	; 8
    15f6:	ed 91       	ld	r30, X+
    15f8:	fc 91       	ld	r31, X
    15fa:	19 97       	sbiw	r26, 0x09	; 9
    15fc:	88 23       	and	r24, r24
    15fe:	61 f7       	brne	.-40     	; 0x15d8 <puts_P+0x1e>
    1600:	8a e0       	ldi	r24, 0x0A	; 10
    1602:	09 95       	icall
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	11 f0       	breq	.+4      	; 0x160c <puts_P+0x52>
    1608:	cf ef       	ldi	r28, 0xFF	; 255
    160a:	df ef       	ldi	r29, 0xFF	; 255
    160c:	ce 01       	movw	r24, r28
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	08 95       	ret

00001618 <vfprintf>:
    1618:	2f 92       	push	r2
    161a:	3f 92       	push	r3
    161c:	4f 92       	push	r4
    161e:	5f 92       	push	r5
    1620:	6f 92       	push	r6
    1622:	7f 92       	push	r7
    1624:	8f 92       	push	r8
    1626:	9f 92       	push	r9
    1628:	af 92       	push	r10
    162a:	bf 92       	push	r11
    162c:	cf 92       	push	r12
    162e:	df 92       	push	r13
    1630:	ef 92       	push	r14
    1632:	ff 92       	push	r15
    1634:	0f 93       	push	r16
    1636:	1f 93       	push	r17
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	2d 97       	sbiw	r28, 0x0d	; 13
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	f8 94       	cli
    1646:	de bf       	out	0x3e, r29	; 62
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	cd bf       	out	0x3d, r28	; 61
    164c:	3c 01       	movw	r6, r24
    164e:	7d 87       	std	Y+13, r23	; 0x0d
    1650:	6c 87       	std	Y+12, r22	; 0x0c
    1652:	5a 01       	movw	r10, r20
    1654:	fc 01       	movw	r30, r24
    1656:	17 82       	std	Z+7, r1	; 0x07
    1658:	16 82       	std	Z+6, r1	; 0x06
    165a:	83 81       	ldd	r24, Z+3	; 0x03
    165c:	81 ff       	sbrs	r24, 1
    165e:	bb c1       	rjmp	.+886    	; 0x19d6 <vfprintf+0x3be>
    1660:	2e 01       	movw	r4, r28
    1662:	08 94       	sec
    1664:	41 1c       	adc	r4, r1
    1666:	51 1c       	adc	r5, r1
    1668:	f3 01       	movw	r30, r6
    166a:	93 81       	ldd	r25, Z+3	; 0x03
    166c:	ec 85       	ldd	r30, Y+12	; 0x0c
    166e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1670:	93 fd       	sbrc	r25, 3
    1672:	85 91       	lpm	r24, Z+
    1674:	93 ff       	sbrs	r25, 3
    1676:	81 91       	ld	r24, Z+
    1678:	fd 87       	std	Y+13, r31	; 0x0d
    167a:	ec 87       	std	Y+12, r30	; 0x0c
    167c:	88 23       	and	r24, r24
    167e:	09 f4       	brne	.+2      	; 0x1682 <vfprintf+0x6a>
    1680:	a6 c1       	rjmp	.+844    	; 0x19ce <vfprintf+0x3b6>
    1682:	85 32       	cpi	r24, 0x25	; 37
    1684:	41 f4       	brne	.+16     	; 0x1696 <vfprintf+0x7e>
    1686:	93 fd       	sbrc	r25, 3
    1688:	85 91       	lpm	r24, Z+
    168a:	93 ff       	sbrs	r25, 3
    168c:	81 91       	ld	r24, Z+
    168e:	fd 87       	std	Y+13, r31	; 0x0d
    1690:	ec 87       	std	Y+12, r30	; 0x0c
    1692:	85 32       	cpi	r24, 0x25	; 37
    1694:	21 f4       	brne	.+8      	; 0x169e <vfprintf+0x86>
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	b3 01       	movw	r22, r6
    169a:	44 df       	rcall	.-376    	; 0x1524 <fputc>
    169c:	e5 cf       	rjmp	.-54     	; 0x1668 <vfprintf+0x50>
    169e:	ff 24       	eor	r15, r15
    16a0:	ee 24       	eor	r14, r14
    16a2:	10 e0       	ldi	r17, 0x00	; 0
    16a4:	10 32       	cpi	r17, 0x20	; 32
    16a6:	b0 f4       	brcc	.+44     	; 0x16d4 <vfprintf+0xbc>
    16a8:	8b 32       	cpi	r24, 0x2B	; 43
    16aa:	69 f0       	breq	.+26     	; 0x16c6 <vfprintf+0xae>
    16ac:	8c 32       	cpi	r24, 0x2C	; 44
    16ae:	28 f4       	brcc	.+10     	; 0x16ba <vfprintf+0xa2>
    16b0:	80 32       	cpi	r24, 0x20	; 32
    16b2:	51 f0       	breq	.+20     	; 0x16c8 <vfprintf+0xb0>
    16b4:	83 32       	cpi	r24, 0x23	; 35
    16b6:	71 f4       	brne	.+28     	; 0x16d4 <vfprintf+0xbc>
    16b8:	0b c0       	rjmp	.+22     	; 0x16d0 <vfprintf+0xb8>
    16ba:	8d 32       	cpi	r24, 0x2D	; 45
    16bc:	39 f0       	breq	.+14     	; 0x16cc <vfprintf+0xb4>
    16be:	80 33       	cpi	r24, 0x30	; 48
    16c0:	49 f4       	brne	.+18     	; 0x16d4 <vfprintf+0xbc>
    16c2:	11 60       	ori	r17, 0x01	; 1
    16c4:	2c c0       	rjmp	.+88     	; 0x171e <vfprintf+0x106>
    16c6:	12 60       	ori	r17, 0x02	; 2
    16c8:	14 60       	ori	r17, 0x04	; 4
    16ca:	29 c0       	rjmp	.+82     	; 0x171e <vfprintf+0x106>
    16cc:	18 60       	ori	r17, 0x08	; 8
    16ce:	27 c0       	rjmp	.+78     	; 0x171e <vfprintf+0x106>
    16d0:	10 61       	ori	r17, 0x10	; 16
    16d2:	25 c0       	rjmp	.+74     	; 0x171e <vfprintf+0x106>
    16d4:	17 fd       	sbrc	r17, 7
    16d6:	2e c0       	rjmp	.+92     	; 0x1734 <vfprintf+0x11c>
    16d8:	28 2f       	mov	r18, r24
    16da:	20 53       	subi	r18, 0x30	; 48
    16dc:	2a 30       	cpi	r18, 0x0A	; 10
    16de:	98 f4       	brcc	.+38     	; 0x1706 <vfprintf+0xee>
    16e0:	16 ff       	sbrs	r17, 6
    16e2:	08 c0       	rjmp	.+16     	; 0x16f4 <vfprintf+0xdc>
    16e4:	8f 2d       	mov	r24, r15
    16e6:	88 0f       	add	r24, r24
    16e8:	f8 2e       	mov	r15, r24
    16ea:	ff 0c       	add	r15, r15
    16ec:	ff 0c       	add	r15, r15
    16ee:	f8 0e       	add	r15, r24
    16f0:	f2 0e       	add	r15, r18
    16f2:	15 c0       	rjmp	.+42     	; 0x171e <vfprintf+0x106>
    16f4:	8e 2d       	mov	r24, r14
    16f6:	88 0f       	add	r24, r24
    16f8:	e8 2e       	mov	r14, r24
    16fa:	ee 0c       	add	r14, r14
    16fc:	ee 0c       	add	r14, r14
    16fe:	e8 0e       	add	r14, r24
    1700:	e2 0e       	add	r14, r18
    1702:	10 62       	ori	r17, 0x20	; 32
    1704:	0c c0       	rjmp	.+24     	; 0x171e <vfprintf+0x106>
    1706:	8e 32       	cpi	r24, 0x2E	; 46
    1708:	21 f4       	brne	.+8      	; 0x1712 <vfprintf+0xfa>
    170a:	16 fd       	sbrc	r17, 6
    170c:	60 c1       	rjmp	.+704    	; 0x19ce <vfprintf+0x3b6>
    170e:	10 64       	ori	r17, 0x40	; 64
    1710:	06 c0       	rjmp	.+12     	; 0x171e <vfprintf+0x106>
    1712:	8c 36       	cpi	r24, 0x6C	; 108
    1714:	11 f4       	brne	.+4      	; 0x171a <vfprintf+0x102>
    1716:	10 68       	ori	r17, 0x80	; 128
    1718:	02 c0       	rjmp	.+4      	; 0x171e <vfprintf+0x106>
    171a:	88 36       	cpi	r24, 0x68	; 104
    171c:	59 f4       	brne	.+22     	; 0x1734 <vfprintf+0x11c>
    171e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1720:	fd 85       	ldd	r31, Y+13	; 0x0d
    1722:	93 fd       	sbrc	r25, 3
    1724:	85 91       	lpm	r24, Z+
    1726:	93 ff       	sbrs	r25, 3
    1728:	81 91       	ld	r24, Z+
    172a:	fd 87       	std	Y+13, r31	; 0x0d
    172c:	ec 87       	std	Y+12, r30	; 0x0c
    172e:	88 23       	and	r24, r24
    1730:	09 f0       	breq	.+2      	; 0x1734 <vfprintf+0x11c>
    1732:	b8 cf       	rjmp	.-144    	; 0x16a4 <vfprintf+0x8c>
    1734:	98 2f       	mov	r25, r24
    1736:	95 54       	subi	r25, 0x45	; 69
    1738:	93 30       	cpi	r25, 0x03	; 3
    173a:	18 f0       	brcs	.+6      	; 0x1742 <vfprintf+0x12a>
    173c:	90 52       	subi	r25, 0x20	; 32
    173e:	93 30       	cpi	r25, 0x03	; 3
    1740:	38 f4       	brcc	.+14     	; 0x1750 <vfprintf+0x138>
    1742:	24 e0       	ldi	r18, 0x04	; 4
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	a2 0e       	add	r10, r18
    1748:	b3 1e       	adc	r11, r19
    174a:	3f e3       	ldi	r19, 0x3F	; 63
    174c:	39 83       	std	Y+1, r19	; 0x01
    174e:	0f c0       	rjmp	.+30     	; 0x176e <vfprintf+0x156>
    1750:	83 36       	cpi	r24, 0x63	; 99
    1752:	31 f0       	breq	.+12     	; 0x1760 <vfprintf+0x148>
    1754:	83 37       	cpi	r24, 0x73	; 115
    1756:	81 f0       	breq	.+32     	; 0x1778 <vfprintf+0x160>
    1758:	83 35       	cpi	r24, 0x53	; 83
    175a:	09 f0       	breq	.+2      	; 0x175e <vfprintf+0x146>
    175c:	56 c0       	rjmp	.+172    	; 0x180a <vfprintf+0x1f2>
    175e:	21 c0       	rjmp	.+66     	; 0x17a2 <vfprintf+0x18a>
    1760:	f5 01       	movw	r30, r10
    1762:	80 81       	ld	r24, Z
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	22 e0       	ldi	r18, 0x02	; 2
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	a2 0e       	add	r10, r18
    176c:	b3 1e       	adc	r11, r19
    176e:	21 e0       	ldi	r18, 0x01	; 1
    1770:	c2 2e       	mov	r12, r18
    1772:	d1 2c       	mov	r13, r1
    1774:	42 01       	movw	r8, r4
    1776:	13 c0       	rjmp	.+38     	; 0x179e <vfprintf+0x186>
    1778:	92 e0       	ldi	r25, 0x02	; 2
    177a:	29 2e       	mov	r2, r25
    177c:	31 2c       	mov	r3, r1
    177e:	2a 0c       	add	r2, r10
    1780:	3b 1c       	adc	r3, r11
    1782:	f5 01       	movw	r30, r10
    1784:	80 80       	ld	r8, Z
    1786:	91 80       	ldd	r9, Z+1	; 0x01
    1788:	16 ff       	sbrs	r17, 6
    178a:	03 c0       	rjmp	.+6      	; 0x1792 <vfprintf+0x17a>
    178c:	6f 2d       	mov	r22, r15
    178e:	70 e0       	ldi	r23, 0x00	; 0
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <vfprintf+0x17e>
    1792:	6f ef       	ldi	r22, 0xFF	; 255
    1794:	7f ef       	ldi	r23, 0xFF	; 255
    1796:	c4 01       	movw	r24, r8
    1798:	44 d1       	rcall	.+648    	; 0x1a22 <strnlen>
    179a:	6c 01       	movw	r12, r24
    179c:	51 01       	movw	r10, r2
    179e:	1f 77       	andi	r17, 0x7F	; 127
    17a0:	14 c0       	rjmp	.+40     	; 0x17ca <vfprintf+0x1b2>
    17a2:	82 e0       	ldi	r24, 0x02	; 2
    17a4:	28 2e       	mov	r2, r24
    17a6:	31 2c       	mov	r3, r1
    17a8:	2a 0c       	add	r2, r10
    17aa:	3b 1c       	adc	r3, r11
    17ac:	f5 01       	movw	r30, r10
    17ae:	80 80       	ld	r8, Z
    17b0:	91 80       	ldd	r9, Z+1	; 0x01
    17b2:	16 ff       	sbrs	r17, 6
    17b4:	03 c0       	rjmp	.+6      	; 0x17bc <vfprintf+0x1a4>
    17b6:	6f 2d       	mov	r22, r15
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <vfprintf+0x1a8>
    17bc:	6f ef       	ldi	r22, 0xFF	; 255
    17be:	7f ef       	ldi	r23, 0xFF	; 255
    17c0:	c4 01       	movw	r24, r8
    17c2:	24 d1       	rcall	.+584    	; 0x1a0c <strnlen_P>
    17c4:	6c 01       	movw	r12, r24
    17c6:	10 68       	ori	r17, 0x80	; 128
    17c8:	51 01       	movw	r10, r2
    17ca:	13 fd       	sbrc	r17, 3
    17cc:	1a c0       	rjmp	.+52     	; 0x1802 <vfprintf+0x1ea>
    17ce:	05 c0       	rjmp	.+10     	; 0x17da <vfprintf+0x1c2>
    17d0:	80 e2       	ldi	r24, 0x20	; 32
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	b3 01       	movw	r22, r6
    17d6:	a6 de       	rcall	.-692    	; 0x1524 <fputc>
    17d8:	ea 94       	dec	r14
    17da:	8e 2d       	mov	r24, r14
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	c8 16       	cp	r12, r24
    17e0:	d9 06       	cpc	r13, r25
    17e2:	b0 f3       	brcs	.-20     	; 0x17d0 <vfprintf+0x1b8>
    17e4:	0e c0       	rjmp	.+28     	; 0x1802 <vfprintf+0x1ea>
    17e6:	f4 01       	movw	r30, r8
    17e8:	17 fd       	sbrc	r17, 7
    17ea:	85 91       	lpm	r24, Z+
    17ec:	17 ff       	sbrs	r17, 7
    17ee:	81 91       	ld	r24, Z+
    17f0:	4f 01       	movw	r8, r30
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	b3 01       	movw	r22, r6
    17f6:	96 de       	rcall	.-724    	; 0x1524 <fputc>
    17f8:	e1 10       	cpse	r14, r1
    17fa:	ea 94       	dec	r14
    17fc:	08 94       	sec
    17fe:	c1 08       	sbc	r12, r1
    1800:	d1 08       	sbc	r13, r1
    1802:	c1 14       	cp	r12, r1
    1804:	d1 04       	cpc	r13, r1
    1806:	79 f7       	brne	.-34     	; 0x17e6 <vfprintf+0x1ce>
    1808:	df c0       	rjmp	.+446    	; 0x19c8 <vfprintf+0x3b0>
    180a:	84 36       	cpi	r24, 0x64	; 100
    180c:	11 f0       	breq	.+4      	; 0x1812 <vfprintf+0x1fa>
    180e:	89 36       	cpi	r24, 0x69	; 105
    1810:	49 f5       	brne	.+82     	; 0x1864 <vfprintf+0x24c>
    1812:	f5 01       	movw	r30, r10
    1814:	17 ff       	sbrs	r17, 7
    1816:	07 c0       	rjmp	.+14     	; 0x1826 <vfprintf+0x20e>
    1818:	80 81       	ld	r24, Z
    181a:	91 81       	ldd	r25, Z+1	; 0x01
    181c:	a2 81       	ldd	r26, Z+2	; 0x02
    181e:	b3 81       	ldd	r27, Z+3	; 0x03
    1820:	24 e0       	ldi	r18, 0x04	; 4
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	08 c0       	rjmp	.+16     	; 0x1836 <vfprintf+0x21e>
    1826:	80 81       	ld	r24, Z
    1828:	91 81       	ldd	r25, Z+1	; 0x01
    182a:	aa 27       	eor	r26, r26
    182c:	97 fd       	sbrc	r25, 7
    182e:	a0 95       	com	r26
    1830:	ba 2f       	mov	r27, r26
    1832:	22 e0       	ldi	r18, 0x02	; 2
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	a2 0e       	add	r10, r18
    1838:	b3 1e       	adc	r11, r19
    183a:	01 2f       	mov	r16, r17
    183c:	0f 76       	andi	r16, 0x6F	; 111
    183e:	b7 ff       	sbrs	r27, 7
    1840:	08 c0       	rjmp	.+16     	; 0x1852 <vfprintf+0x23a>
    1842:	b0 95       	com	r27
    1844:	a0 95       	com	r26
    1846:	90 95       	com	r25
    1848:	81 95       	neg	r24
    184a:	9f 4f       	sbci	r25, 0xFF	; 255
    184c:	af 4f       	sbci	r26, 0xFF	; 255
    184e:	bf 4f       	sbci	r27, 0xFF	; 255
    1850:	00 68       	ori	r16, 0x80	; 128
    1852:	bc 01       	movw	r22, r24
    1854:	cd 01       	movw	r24, r26
    1856:	a2 01       	movw	r20, r4
    1858:	2a e0       	ldi	r18, 0x0A	; 10
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	ed d0       	rcall	.+474    	; 0x1a38 <__ultoa_invert>
    185e:	d8 2e       	mov	r13, r24
    1860:	d4 18       	sub	r13, r4
    1862:	3e c0       	rjmp	.+124    	; 0x18e0 <vfprintf+0x2c8>
    1864:	85 37       	cpi	r24, 0x75	; 117
    1866:	21 f4       	brne	.+8      	; 0x1870 <vfprintf+0x258>
    1868:	1f 7e       	andi	r17, 0xEF	; 239
    186a:	2a e0       	ldi	r18, 0x0A	; 10
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	20 c0       	rjmp	.+64     	; 0x18b0 <vfprintf+0x298>
    1870:	19 7f       	andi	r17, 0xF9	; 249
    1872:	8f 36       	cpi	r24, 0x6F	; 111
    1874:	a9 f0       	breq	.+42     	; 0x18a0 <vfprintf+0x288>
    1876:	80 37       	cpi	r24, 0x70	; 112
    1878:	20 f4       	brcc	.+8      	; 0x1882 <vfprintf+0x26a>
    187a:	88 35       	cpi	r24, 0x58	; 88
    187c:	09 f0       	breq	.+2      	; 0x1880 <vfprintf+0x268>
    187e:	a7 c0       	rjmp	.+334    	; 0x19ce <vfprintf+0x3b6>
    1880:	0b c0       	rjmp	.+22     	; 0x1898 <vfprintf+0x280>
    1882:	80 37       	cpi	r24, 0x70	; 112
    1884:	21 f0       	breq	.+8      	; 0x188e <vfprintf+0x276>
    1886:	88 37       	cpi	r24, 0x78	; 120
    1888:	09 f0       	breq	.+2      	; 0x188c <vfprintf+0x274>
    188a:	a1 c0       	rjmp	.+322    	; 0x19ce <vfprintf+0x3b6>
    188c:	01 c0       	rjmp	.+2      	; 0x1890 <vfprintf+0x278>
    188e:	10 61       	ori	r17, 0x10	; 16
    1890:	14 ff       	sbrs	r17, 4
    1892:	09 c0       	rjmp	.+18     	; 0x18a6 <vfprintf+0x28e>
    1894:	14 60       	ori	r17, 0x04	; 4
    1896:	07 c0       	rjmp	.+14     	; 0x18a6 <vfprintf+0x28e>
    1898:	14 ff       	sbrs	r17, 4
    189a:	08 c0       	rjmp	.+16     	; 0x18ac <vfprintf+0x294>
    189c:	16 60       	ori	r17, 0x06	; 6
    189e:	06 c0       	rjmp	.+12     	; 0x18ac <vfprintf+0x294>
    18a0:	28 e0       	ldi	r18, 0x08	; 8
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	05 c0       	rjmp	.+10     	; 0x18b0 <vfprintf+0x298>
    18a6:	20 e1       	ldi	r18, 0x10	; 16
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <vfprintf+0x298>
    18ac:	20 e1       	ldi	r18, 0x10	; 16
    18ae:	32 e0       	ldi	r19, 0x02	; 2
    18b0:	f5 01       	movw	r30, r10
    18b2:	17 ff       	sbrs	r17, 7
    18b4:	07 c0       	rjmp	.+14     	; 0x18c4 <vfprintf+0x2ac>
    18b6:	60 81       	ld	r22, Z
    18b8:	71 81       	ldd	r23, Z+1	; 0x01
    18ba:	82 81       	ldd	r24, Z+2	; 0x02
    18bc:	93 81       	ldd	r25, Z+3	; 0x03
    18be:	44 e0       	ldi	r20, 0x04	; 4
    18c0:	50 e0       	ldi	r21, 0x00	; 0
    18c2:	06 c0       	rjmp	.+12     	; 0x18d0 <vfprintf+0x2b8>
    18c4:	60 81       	ld	r22, Z
    18c6:	71 81       	ldd	r23, Z+1	; 0x01
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	42 e0       	ldi	r20, 0x02	; 2
    18ce:	50 e0       	ldi	r21, 0x00	; 0
    18d0:	a4 0e       	add	r10, r20
    18d2:	b5 1e       	adc	r11, r21
    18d4:	a2 01       	movw	r20, r4
    18d6:	b0 d0       	rcall	.+352    	; 0x1a38 <__ultoa_invert>
    18d8:	d8 2e       	mov	r13, r24
    18da:	d4 18       	sub	r13, r4
    18dc:	01 2f       	mov	r16, r17
    18de:	0f 77       	andi	r16, 0x7F	; 127
    18e0:	06 ff       	sbrs	r16, 6
    18e2:	09 c0       	rjmp	.+18     	; 0x18f6 <vfprintf+0x2de>
    18e4:	0e 7f       	andi	r16, 0xFE	; 254
    18e6:	df 14       	cp	r13, r15
    18e8:	30 f4       	brcc	.+12     	; 0x18f6 <vfprintf+0x2de>
    18ea:	04 ff       	sbrs	r16, 4
    18ec:	06 c0       	rjmp	.+12     	; 0x18fa <vfprintf+0x2e2>
    18ee:	02 fd       	sbrc	r16, 2
    18f0:	04 c0       	rjmp	.+8      	; 0x18fa <vfprintf+0x2e2>
    18f2:	0f 7e       	andi	r16, 0xEF	; 239
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <vfprintf+0x2e2>
    18f6:	1d 2d       	mov	r17, r13
    18f8:	01 c0       	rjmp	.+2      	; 0x18fc <vfprintf+0x2e4>
    18fa:	1f 2d       	mov	r17, r15
    18fc:	80 2f       	mov	r24, r16
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	04 ff       	sbrs	r16, 4
    1902:	0c c0       	rjmp	.+24     	; 0x191c <vfprintf+0x304>
    1904:	fe 01       	movw	r30, r28
    1906:	ed 0d       	add	r30, r13
    1908:	f1 1d       	adc	r31, r1
    190a:	20 81       	ld	r18, Z
    190c:	20 33       	cpi	r18, 0x30	; 48
    190e:	11 f4       	brne	.+4      	; 0x1914 <vfprintf+0x2fc>
    1910:	09 7e       	andi	r16, 0xE9	; 233
    1912:	09 c0       	rjmp	.+18     	; 0x1926 <vfprintf+0x30e>
    1914:	02 ff       	sbrs	r16, 2
    1916:	06 c0       	rjmp	.+12     	; 0x1924 <vfprintf+0x30c>
    1918:	1e 5f       	subi	r17, 0xFE	; 254
    191a:	05 c0       	rjmp	.+10     	; 0x1926 <vfprintf+0x30e>
    191c:	86 78       	andi	r24, 0x86	; 134
    191e:	90 70       	andi	r25, 0x00	; 0
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	09 f0       	breq	.+2      	; 0x1926 <vfprintf+0x30e>
    1924:	1f 5f       	subi	r17, 0xFF	; 255
    1926:	80 2e       	mov	r8, r16
    1928:	99 24       	eor	r9, r9
    192a:	03 fd       	sbrc	r16, 3
    192c:	11 c0       	rjmp	.+34     	; 0x1950 <vfprintf+0x338>
    192e:	00 ff       	sbrs	r16, 0
    1930:	0c c0       	rjmp	.+24     	; 0x194a <vfprintf+0x332>
    1932:	fd 2c       	mov	r15, r13
    1934:	1e 15       	cp	r17, r14
    1936:	48 f4       	brcc	.+18     	; 0x194a <vfprintf+0x332>
    1938:	fe 0c       	add	r15, r14
    193a:	f1 1a       	sub	r15, r17
    193c:	1e 2d       	mov	r17, r14
    193e:	05 c0       	rjmp	.+10     	; 0x194a <vfprintf+0x332>
    1940:	80 e2       	ldi	r24, 0x20	; 32
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	b3 01       	movw	r22, r6
    1946:	ee dd       	rcall	.-1060   	; 0x1524 <fputc>
    1948:	1f 5f       	subi	r17, 0xFF	; 255
    194a:	1e 15       	cp	r17, r14
    194c:	c8 f3       	brcs	.-14     	; 0x1940 <vfprintf+0x328>
    194e:	04 c0       	rjmp	.+8      	; 0x1958 <vfprintf+0x340>
    1950:	1e 15       	cp	r17, r14
    1952:	10 f4       	brcc	.+4      	; 0x1958 <vfprintf+0x340>
    1954:	e1 1a       	sub	r14, r17
    1956:	01 c0       	rjmp	.+2      	; 0x195a <vfprintf+0x342>
    1958:	ee 24       	eor	r14, r14
    195a:	84 fe       	sbrs	r8, 4
    195c:	0e c0       	rjmp	.+28     	; 0x197a <vfprintf+0x362>
    195e:	80 e3       	ldi	r24, 0x30	; 48
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	b3 01       	movw	r22, r6
    1964:	df dd       	rcall	.-1090   	; 0x1524 <fputc>
    1966:	82 fe       	sbrs	r8, 2
    1968:	1d c0       	rjmp	.+58     	; 0x19a4 <vfprintf+0x38c>
    196a:	81 fe       	sbrs	r8, 1
    196c:	03 c0       	rjmp	.+6      	; 0x1974 <vfprintf+0x35c>
    196e:	88 e5       	ldi	r24, 0x58	; 88
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	10 c0       	rjmp	.+32     	; 0x1994 <vfprintf+0x37c>
    1974:	88 e7       	ldi	r24, 0x78	; 120
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	0d c0       	rjmp	.+26     	; 0x1994 <vfprintf+0x37c>
    197a:	c4 01       	movw	r24, r8
    197c:	86 78       	andi	r24, 0x86	; 134
    197e:	90 70       	andi	r25, 0x00	; 0
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	81 f0       	breq	.+32     	; 0x19a4 <vfprintf+0x38c>
    1984:	81 fc       	sbrc	r8, 1
    1986:	02 c0       	rjmp	.+4      	; 0x198c <vfprintf+0x374>
    1988:	80 e2       	ldi	r24, 0x20	; 32
    198a:	01 c0       	rjmp	.+2      	; 0x198e <vfprintf+0x376>
    198c:	8b e2       	ldi	r24, 0x2B	; 43
    198e:	07 fd       	sbrc	r16, 7
    1990:	8d e2       	ldi	r24, 0x2D	; 45
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	b3 01       	movw	r22, r6
    1996:	c6 dd       	rcall	.-1140   	; 0x1524 <fputc>
    1998:	05 c0       	rjmp	.+10     	; 0x19a4 <vfprintf+0x38c>
    199a:	80 e3       	ldi	r24, 0x30	; 48
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	b3 01       	movw	r22, r6
    19a0:	c1 dd       	rcall	.-1150   	; 0x1524 <fputc>
    19a2:	fa 94       	dec	r15
    19a4:	df 14       	cp	r13, r15
    19a6:	c8 f3       	brcs	.-14     	; 0x199a <vfprintf+0x382>
    19a8:	da 94       	dec	r13
    19aa:	f2 01       	movw	r30, r4
    19ac:	ed 0d       	add	r30, r13
    19ae:	f1 1d       	adc	r31, r1
    19b0:	80 81       	ld	r24, Z
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	b3 01       	movw	r22, r6
    19b6:	b6 dd       	rcall	.-1172   	; 0x1524 <fputc>
    19b8:	dd 20       	and	r13, r13
    19ba:	b1 f7       	brne	.-20     	; 0x19a8 <vfprintf+0x390>
    19bc:	05 c0       	rjmp	.+10     	; 0x19c8 <vfprintf+0x3b0>
    19be:	80 e2       	ldi	r24, 0x20	; 32
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	b3 01       	movw	r22, r6
    19c4:	af dd       	rcall	.-1186   	; 0x1524 <fputc>
    19c6:	ea 94       	dec	r14
    19c8:	ee 20       	and	r14, r14
    19ca:	c9 f7       	brne	.-14     	; 0x19be <vfprintf+0x3a6>
    19cc:	4d ce       	rjmp	.-870    	; 0x1668 <vfprintf+0x50>
    19ce:	f3 01       	movw	r30, r6
    19d0:	86 81       	ldd	r24, Z+6	; 0x06
    19d2:	97 81       	ldd	r25, Z+7	; 0x07
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <vfprintf+0x3c2>
    19d6:	8f ef       	ldi	r24, 0xFF	; 255
    19d8:	9f ef       	ldi	r25, 0xFF	; 255
    19da:	2d 96       	adiw	r28, 0x0d	; 13
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
    19e6:	df 91       	pop	r29
    19e8:	cf 91       	pop	r28
    19ea:	1f 91       	pop	r17
    19ec:	0f 91       	pop	r16
    19ee:	ff 90       	pop	r15
    19f0:	ef 90       	pop	r14
    19f2:	df 90       	pop	r13
    19f4:	cf 90       	pop	r12
    19f6:	bf 90       	pop	r11
    19f8:	af 90       	pop	r10
    19fa:	9f 90       	pop	r9
    19fc:	8f 90       	pop	r8
    19fe:	7f 90       	pop	r7
    1a00:	6f 90       	pop	r6
    1a02:	5f 90       	pop	r5
    1a04:	4f 90       	pop	r4
    1a06:	3f 90       	pop	r3
    1a08:	2f 90       	pop	r2
    1a0a:	08 95       	ret

00001a0c <strnlen_P>:
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	05 90       	lpm	r0, Z+
    1a10:	61 50       	subi	r22, 0x01	; 1
    1a12:	70 40       	sbci	r23, 0x00	; 0
    1a14:	01 10       	cpse	r0, r1
    1a16:	d8 f7       	brcc	.-10     	; 0x1a0e <strnlen_P+0x2>
    1a18:	80 95       	com	r24
    1a1a:	90 95       	com	r25
    1a1c:	8e 0f       	add	r24, r30
    1a1e:	9f 1f       	adc	r25, r31
    1a20:	08 95       	ret

00001a22 <strnlen>:
    1a22:	fc 01       	movw	r30, r24
    1a24:	61 50       	subi	r22, 0x01	; 1
    1a26:	70 40       	sbci	r23, 0x00	; 0
    1a28:	01 90       	ld	r0, Z+
    1a2a:	01 10       	cpse	r0, r1
    1a2c:	d8 f7       	brcc	.-10     	; 0x1a24 <strnlen+0x2>
    1a2e:	80 95       	com	r24
    1a30:	90 95       	com	r25
    1a32:	8e 0f       	add	r24, r30
    1a34:	9f 1f       	adc	r25, r31
    1a36:	08 95       	ret

00001a38 <__ultoa_invert>:
    1a38:	fa 01       	movw	r30, r20
    1a3a:	aa 27       	eor	r26, r26
    1a3c:	28 30       	cpi	r18, 0x08	; 8
    1a3e:	51 f1       	breq	.+84     	; 0x1a94 <__ultoa_invert+0x5c>
    1a40:	20 31       	cpi	r18, 0x10	; 16
    1a42:	81 f1       	breq	.+96     	; 0x1aa4 <__ultoa_invert+0x6c>
    1a44:	e8 94       	clt
    1a46:	6f 93       	push	r22
    1a48:	6e 7f       	andi	r22, 0xFE	; 254
    1a4a:	6e 5f       	subi	r22, 0xFE	; 254
    1a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a50:	9f 4f       	sbci	r25, 0xFF	; 255
    1a52:	af 4f       	sbci	r26, 0xFF	; 255
    1a54:	b1 e0       	ldi	r27, 0x01	; 1
    1a56:	3e d0       	rcall	.+124    	; 0x1ad4 <__ultoa_invert+0x9c>
    1a58:	b4 e0       	ldi	r27, 0x04	; 4
    1a5a:	3c d0       	rcall	.+120    	; 0x1ad4 <__ultoa_invert+0x9c>
    1a5c:	67 0f       	add	r22, r23
    1a5e:	78 1f       	adc	r23, r24
    1a60:	89 1f       	adc	r24, r25
    1a62:	9a 1f       	adc	r25, r26
    1a64:	a1 1d       	adc	r26, r1
    1a66:	68 0f       	add	r22, r24
    1a68:	79 1f       	adc	r23, r25
    1a6a:	8a 1f       	adc	r24, r26
    1a6c:	91 1d       	adc	r25, r1
    1a6e:	a1 1d       	adc	r26, r1
    1a70:	6a 0f       	add	r22, r26
    1a72:	71 1d       	adc	r23, r1
    1a74:	81 1d       	adc	r24, r1
    1a76:	91 1d       	adc	r25, r1
    1a78:	a1 1d       	adc	r26, r1
    1a7a:	20 d0       	rcall	.+64     	; 0x1abc <__ultoa_invert+0x84>
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <__ultoa_invert+0x48>
    1a7e:	68 94       	set
    1a80:	3f 91       	pop	r19
    1a82:	2a e0       	ldi	r18, 0x0A	; 10
    1a84:	26 9f       	mul	r18, r22
    1a86:	11 24       	eor	r1, r1
    1a88:	30 19       	sub	r19, r0
    1a8a:	30 5d       	subi	r19, 0xD0	; 208
    1a8c:	31 93       	st	Z+, r19
    1a8e:	de f6       	brtc	.-74     	; 0x1a46 <__ultoa_invert+0xe>
    1a90:	cf 01       	movw	r24, r30
    1a92:	08 95       	ret
    1a94:	46 2f       	mov	r20, r22
    1a96:	47 70       	andi	r20, 0x07	; 7
    1a98:	40 5d       	subi	r20, 0xD0	; 208
    1a9a:	41 93       	st	Z+, r20
    1a9c:	b3 e0       	ldi	r27, 0x03	; 3
    1a9e:	0f d0       	rcall	.+30     	; 0x1abe <__ultoa_invert+0x86>
    1aa0:	c9 f7       	brne	.-14     	; 0x1a94 <__ultoa_invert+0x5c>
    1aa2:	f6 cf       	rjmp	.-20     	; 0x1a90 <__ultoa_invert+0x58>
    1aa4:	46 2f       	mov	r20, r22
    1aa6:	4f 70       	andi	r20, 0x0F	; 15
    1aa8:	40 5d       	subi	r20, 0xD0	; 208
    1aaa:	4a 33       	cpi	r20, 0x3A	; 58
    1aac:	18 f0       	brcs	.+6      	; 0x1ab4 <__ultoa_invert+0x7c>
    1aae:	49 5d       	subi	r20, 0xD9	; 217
    1ab0:	31 fd       	sbrc	r19, 1
    1ab2:	40 52       	subi	r20, 0x20	; 32
    1ab4:	41 93       	st	Z+, r20
    1ab6:	02 d0       	rcall	.+4      	; 0x1abc <__ultoa_invert+0x84>
    1ab8:	a9 f7       	brne	.-22     	; 0x1aa4 <__ultoa_invert+0x6c>
    1aba:	ea cf       	rjmp	.-44     	; 0x1a90 <__ultoa_invert+0x58>
    1abc:	b4 e0       	ldi	r27, 0x04	; 4
    1abe:	a6 95       	lsr	r26
    1ac0:	97 95       	ror	r25
    1ac2:	87 95       	ror	r24
    1ac4:	77 95       	ror	r23
    1ac6:	67 95       	ror	r22
    1ac8:	ba 95       	dec	r27
    1aca:	c9 f7       	brne	.-14     	; 0x1abe <__ultoa_invert+0x86>
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	61 05       	cpc	r22, r1
    1ad0:	71 05       	cpc	r23, r1
    1ad2:	08 95       	ret
    1ad4:	9b 01       	movw	r18, r22
    1ad6:	ac 01       	movw	r20, r24
    1ad8:	0a 2e       	mov	r0, r26
    1ada:	06 94       	lsr	r0
    1adc:	57 95       	ror	r21
    1ade:	47 95       	ror	r20
    1ae0:	37 95       	ror	r19
    1ae2:	27 95       	ror	r18
    1ae4:	ba 95       	dec	r27
    1ae6:	c9 f7       	brne	.-14     	; 0x1ada <__ultoa_invert+0xa2>
    1ae8:	62 0f       	add	r22, r18
    1aea:	73 1f       	adc	r23, r19
    1aec:	84 1f       	adc	r24, r20
    1aee:	95 1f       	adc	r25, r21
    1af0:	a0 1d       	adc	r26, r0
    1af2:	08 95       	ret

00001af4 <_exit>:
    1af4:	f8 94       	cli

00001af6 <__stop_program>:
    1af6:	ff cf       	rjmp	.-2      	; 0x1af6 <__stop_program>
