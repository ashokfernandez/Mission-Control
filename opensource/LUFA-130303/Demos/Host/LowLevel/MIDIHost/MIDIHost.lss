
MIDIHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001a38  00001acc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800120  00800120  00001aec  2**0
                  ALLOC
  3 .stab         00000e28  00000000  00000000  00001aec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000256  00000000  00000000  00002914  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000428  00000000  00000000  00002b70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005908  00000000  00000000  00002f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001bc8  00000000  00000000  000088a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d04  00000000  00000000  0000a468  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b10  00000000  00000000  0000d16c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000269c  00000000  00000000  0000dc7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003f78  00000000  00000000  00010318  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000430  00000000  00000000  00014290  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	40 c1       	rjmp	.+640    	; 0x282 <__ctors_end>
       2:	00 00       	nop
       4:	5d c1       	rjmp	.+698    	; 0x2c0 <__bad_interrupt>
       6:	00 00       	nop
       8:	5b c1       	rjmp	.+694    	; 0x2c0 <__bad_interrupt>
       a:	00 00       	nop
       c:	59 c1       	rjmp	.+690    	; 0x2c0 <__bad_interrupt>
       e:	00 00       	nop
      10:	57 c1       	rjmp	.+686    	; 0x2c0 <__bad_interrupt>
      12:	00 00       	nop
      14:	55 c1       	rjmp	.+682    	; 0x2c0 <__bad_interrupt>
      16:	00 00       	nop
      18:	53 c1       	rjmp	.+678    	; 0x2c0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	51 c1       	rjmp	.+674    	; 0x2c0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	4f c1       	rjmp	.+670    	; 0x2c0 <__bad_interrupt>
      22:	00 00       	nop
      24:	4d c1       	rjmp	.+666    	; 0x2c0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c7       	rjmp	.+3766   	; 0xee0 <__vector_10>
      2a:	00 00       	nop
      2c:	49 c1       	rjmp	.+658    	; 0x2c0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	47 c1       	rjmp	.+654    	; 0x2c0 <__bad_interrupt>
      32:	00 00       	nop
      34:	45 c1       	rjmp	.+650    	; 0x2c0 <__bad_interrupt>
      36:	00 00       	nop
      38:	43 c1       	rjmp	.+646    	; 0x2c0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	41 c1       	rjmp	.+642    	; 0x2c0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3f c1       	rjmp	.+638    	; 0x2c0 <__bad_interrupt>
      42:	00 00       	nop
      44:	3d c1       	rjmp	.+634    	; 0x2c0 <__bad_interrupt>
      46:	00 00       	nop
      48:	3b c1       	rjmp	.+630    	; 0x2c0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	39 c1       	rjmp	.+626    	; 0x2c0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	37 c1       	rjmp	.+622    	; 0x2c0 <__bad_interrupt>
      52:	00 00       	nop
      54:	35 c1       	rjmp	.+618    	; 0x2c0 <__bad_interrupt>
      56:	00 00       	nop
      58:	33 c1       	rjmp	.+614    	; 0x2c0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	31 c1       	rjmp	.+610    	; 0x2c0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2f c1       	rjmp	.+606    	; 0x2c0 <__bad_interrupt>
      62:	00 00       	nop
      64:	2d c1       	rjmp	.+602    	; 0x2c0 <__bad_interrupt>
      66:	00 00       	nop
      68:	2b c1       	rjmp	.+598    	; 0x2c0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	29 c1       	rjmp	.+594    	; 0x2c0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	27 c1       	rjmp	.+590    	; 0x2c0 <__bad_interrupt>
      72:	00 00       	nop
      74:	25 c1       	rjmp	.+586    	; 0x2c0 <__bad_interrupt>
      76:	00 00       	nop
      78:	23 c1       	rjmp	.+582    	; 0x2c0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	21 c1       	rjmp	.+578    	; 0x2c0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	1f c1       	rjmp	.+574    	; 0x2c0 <__bad_interrupt>
      82:	00 00       	nop
      84:	1d c1       	rjmp	.+570    	; 0x2c0 <__bad_interrupt>
      86:	00 00       	nop
      88:	1b c1       	rjmp	.+566    	; 0x2c0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	19 c1       	rjmp	.+562    	; 0x2c0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	17 c1       	rjmp	.+558    	; 0x2c0 <__bad_interrupt>
      92:	00 00       	nop
      94:	15 c1       	rjmp	.+554    	; 0x2c0 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4295>:
      98:	1b 5b 33 36 6d 4d 49 44 49 20 48 6f 73 74 20 44     .[36mMIDI Host D
      a8:	65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b     emo running....[
      b8:	33 37 6d 00                                         37m.

000000bc <__c.4304>:
      bc:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
      cc:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

000000d9 <__c.4309>:
      d9:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
      e9:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
      f9:	00                                                  .

000000fa <__c.4314>:
      fa:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     10a:	61 74 61 2e 0d 0a 00                                ata....

00000111 <__c.4317>:
     111:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     121:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     131:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

0000013b <__c.4319>:
     13b:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     14b:	69 63 65 2e 0d 0a 00                                ice....

00000152 <__c.4321>:
     152:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     162:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000016c <__c.4323>:
     16c:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     17c:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     18c:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     19c:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1ac:	37 6d 00                                            7m.

000001af <__c.4325>:
     1af:	4d 49 44 49 20 44 65 76 69 63 65 20 45 6e 75 6d     MIDI Device Enum
     1bf:	65 72 61 74 65 64 2e 0d 0a 00                       erated....

000001c9 <__c.4330>:
     1c9:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     1d9:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     1e9:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

000001f8 <__c.4337>:
     1f8:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     208:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     218:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     228:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     238:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     248:	1b 5b 33 37 6d 00                                   .[37m.

0000024e <__c.4345>:
     24e:	4d 49 44 49 20 4e 6f 74 65 20 25 73 20 2d 20 43     MIDI Note %s - C
     25e:	68 61 6e 6e 65 6c 20 25 64 2c 20 50 69 74 63 68     hannel %d, Pitch
     26e:	20 25 64 2c 20 56 65 6c 6f 63 69 74 79 20 25 64      %d, Velocity %d
     27e:	0d 0a 00 00                                         ....

00000282 <__ctors_end>:
     282:	11 24       	eor	r1, r1
     284:	1f be       	out	0x3f, r1	; 63
     286:	cf ef       	ldi	r28, 0xFF	; 255
     288:	d0 e2       	ldi	r29, 0x20	; 32
     28a:	de bf       	out	0x3e, r29	; 62
     28c:	cd bf       	out	0x3d, r28	; 61

0000028e <__do_copy_data>:
     28e:	11 e0       	ldi	r17, 0x01	; 1
     290:	a0 e0       	ldi	r26, 0x00	; 0
     292:	b1 e0       	ldi	r27, 0x01	; 1
     294:	e8 e3       	ldi	r30, 0x38	; 56
     296:	fa e1       	ldi	r31, 0x1A	; 26
     298:	00 e0       	ldi	r16, 0x00	; 0
     29a:	0b bf       	out	0x3b, r16	; 59
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <__do_copy_data+0x14>
     29e:	07 90       	elpm	r0, Z+
     2a0:	0d 92       	st	X+, r0
     2a2:	a0 32       	cpi	r26, 0x20	; 32
     2a4:	b1 07       	cpc	r27, r17
     2a6:	d9 f7       	brne	.-10     	; 0x29e <__do_copy_data+0x10>
     2a8:	1b be       	out	0x3b, r1	; 59

000002aa <__do_clear_bss>:
     2aa:	11 e0       	ldi	r17, 0x01	; 1
     2ac:	a0 e2       	ldi	r26, 0x20	; 32
     2ae:	b1 e0       	ldi	r27, 0x01	; 1
     2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <.do_clear_bss_start>

000002b2 <.do_clear_bss_loop>:
     2b2:	1d 92       	st	X+, r1

000002b4 <.do_clear_bss_start>:
     2b4:	a3 34       	cpi	r26, 0x43	; 67
     2b6:	b1 07       	cpc	r27, r17
     2b8:	e1 f7       	brne	.-8      	; 0x2b2 <.do_clear_bss_loop>
     2ba:	b7 d1       	rcall	.+878    	; 0x62a <main>
     2bc:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <_exit>

000002c0 <__bad_interrupt>:
     2c0:	9f ce       	rjmp	.-706    	; 0x0 <__vectors>

000002c2 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2c2:	9b b1       	in	r25, 0x0b	; 11
     2c4:	9f 70       	andi	r25, 0x0F	; 15
     2c6:	98 2b       	or	r25, r24
     2c8:	9b b9       	out	0x0b, r25	; 11
			}
     2ca:	08 95       	ret

000002cc <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2cc:	84 b7       	in	r24, 0x34	; 52
     2ce:	87 7f       	andi	r24, 0xF7	; 247
     2d0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2d2:	28 e1       	ldi	r18, 0x18	; 24
     2d4:	0f b6       	in	r0, 0x3f	; 63
     2d6:	f8 94       	cli
     2d8:	20 93 60 00 	sts	0x0060, r18
     2dc:	10 92 60 00 	sts	0x0060, r1
     2e0:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	80 e8       	ldi	r24, 0x80	; 128
     2e6:	0f b6       	in	r0, 0x3f	; 63
     2e8:	f8 94       	cli
     2ea:	80 93 61 00 	sts	0x0061, r24
     2ee:	90 93 61 00 	sts	0x0061, r25
     2f2:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2f4:	83 e3       	ldi	r24, 0x33	; 51
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	90 93 cd 00 	sts	0x00CD, r25
     2fc:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     300:	86 e0       	ldi	r24, 0x06	; 6
     302:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     306:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     30a:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     30e:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     310:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     312:	8a b1       	in	r24, 0x0a	; 10
     314:	80 6f       	ori	r24, 0xF0	; 240
     316:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     318:	8b b1       	in	r24, 0x0b	; 11
     31a:	8f 70       	andi	r24, 0x0F	; 15
     31c:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     31e:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     320:	72 9a       	sbi	0x0e, 2	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
     322:	84 b1       	in	r24, 0x04	; 4
     324:	8f 71       	andi	r24, 0x1F	; 31
     326:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
     328:	8d b1       	in	r24, 0x0d	; 13
     32a:	8f 7c       	andi	r24, 0xCF	; 207
     32c:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
     32e:	85 b1       	in	r24, 0x05	; 5
     330:	80 6e       	ori	r24, 0xE0	; 224
     332:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
     334:	8e b1       	in	r24, 0x0e	; 14
     336:	80 63       	ori	r24, 0x30	; 48
     338:	8e b9       	out	0x0e, r24	; 14
	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	Buttons_Init();
	Joystick_Init();
	USB_Init();
     33a:	b7 d5       	rcall	.+2926   	; 0xeaa <USB_Init>
     33c:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0c 94 15 0a 	jmp	0x142a	; 0x142a <Serial_CreateStream>

00000344 <EVENT_USB_Host_DeviceAttached>:
     344:	8c eb       	ldi	r24, 0xBC	; 188
}
     346:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     348:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     34c:	80 ea       	ldi	r24, 0xA0	; 160
     34e:	b9 cf       	rjmp	.-142    	; 0x2c2 <LEDs_SetAllLEDs>

00000350 <EVENT_USB_Host_DeviceUnattached>:
     350:	89 ed       	ldi	r24, 0xD9	; 217
}
     352:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     354:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     358:	80 e1       	ldi	r24, 0x10	; 16
     35a:	b3 cf       	rjmp	.-154    	; 0x2c2 <LEDs_SetAllLEDs>

0000035c <EVENT_USB_Host_DeviceEnumerationComplete>:
     35c:	cf 93       	push	r28
}
     35e:	8a ef       	ldi	r24, 0xFA	; 250
/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	puts_P(PSTR("Getting Config Data.\r\n"));
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     366:	8d d1       	rcall	.+794    	; 0x682 <ProcessConfigurationDescriptor>
     368:	c8 2f       	mov	r28, r24
     36a:	88 23       	and	r24, r24
     36c:	01 f1       	breq	.+64     	; 0x3ae <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
     36e:	81 30       	cpi	r24, 0x01	; 1
	{
		if (ErrorCode == ControlError)
     370:	19 f4       	brne	.+6      	; 0x378 <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
     372:	81 e1       	ldi	r24, 0x11	; 17
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	02 c0       	rjmp	.+4      	; 0x37c <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
     378:	8b e3       	ldi	r24, 0x3B	; 59
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     37a:	91 e0       	ldi	r25, 0x01	; 1
     37c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <puts_P>
     380:	00 d0       	rcall	.+0      	; 0x382 <EVENT_USB_Host_DeviceEnumerationComplete+0x26>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     382:	00 d0       	rcall	.+0      	; 0x384 <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
     384:	ed b7       	in	r30, 0x3d	; 61
     386:	fe b7       	in	r31, 0x3e	; 62
     388:	31 96       	adiw	r30, 0x01	; 1
     38a:	22 e5       	ldi	r18, 0x52	; 82
     38c:	31 e0       	ldi	r19, 0x01	; 1
     38e:	ad b7       	in	r26, 0x3d	; 61
     390:	be b7       	in	r27, 0x3e	; 62
     392:	12 96       	adiw	r26, 0x02	; 2
     394:	3c 93       	st	X, r19
     396:	2e 93       	st	-X, r18
     398:	11 97       	sbiw	r26, 0x01	; 1
     39a:	c2 83       	std	Z+2, r28	; 0x02
     39c:	13 82       	std	Z+3, r1	; 0x03
     39e:	0e 94 32 0a 	call	0x1464	; 0x1464 <printf_P>
     3a2:	0f 90       	pop	r0

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	80 e9       	ldi	r24, 0x90	; 144
     3ac:	18 c0       	rjmp	.+48     	; 0x3de <EVENT_USB_Host_DeviceEnumerationComplete+0x82>
     3ae:	81 e0       	ldi	r24, 0x01	; 1
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     3b0:	ef d7       	rcall	.+4062   	; 0x1390 <USB_Host_SetDeviceConfiguration>
     3b2:	88 23       	and	r24, r24
     3b4:	79 f0       	breq	.+30     	; 0x3d4 <EVENT_USB_Host_DeviceEnumerationComplete+0x78>
     3b6:	00 d0       	rcall	.+0      	; 0x3b8 <EVENT_USB_Host_DeviceEnumerationComplete+0x5c>
     3b8:	00 d0       	rcall	.+0      	; 0x3ba <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     3ba:	ed b7       	in	r30, 0x3d	; 61
     3bc:	fe b7       	in	r31, 0x3e	; 62
     3be:	31 96       	adiw	r30, 0x01	; 1
     3c0:	2c e6       	ldi	r18, 0x6C	; 108
     3c2:	31 e0       	ldi	r19, 0x01	; 1
     3c4:	ad b7       	in	r26, 0x3d	; 61
     3c6:	be b7       	in	r27, 0x3e	; 62
     3c8:	12 96       	adiw	r26, 0x02	; 2
     3ca:	3c 93       	st	X, r19
     3cc:	2e 93       	st	-X, r18
     3ce:	11 97       	sbiw	r26, 0x01	; 1
     3d0:	82 83       	std	Z+2, r24	; 0x02
     3d2:	e4 cf       	rjmp	.-56     	; 0x39c <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
     3d4:	8f ea       	ldi	r24, 0xAF	; 175
     3d6:	91 e0       	ldi	r25, 0x01	; 1

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("MIDI Device Enumerated.\r\n"));
     3d8:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <puts_P>
     3dc:	80 e6       	ldi	r24, 0x60	; 96
     3de:	71 df       	rcall	.-286    	; 0x2c2 <LEDs_SetAllLEDs>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <EVENT_USB_Host_HostError>:
     3e4:	cf 93       	push	r28
}
     3e6:	df 93       	push	r29
     3e8:	0f 92       	push	r0

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     3ee:	89 83       	std	Y+1, r24	; 0x01
     3f0:	f4 d4       	rcall	.+2536   	; 0xdda <USB_Disable>
     3f2:	00 d0       	rcall	.+0      	; 0x3f4 <EVENT_USB_Host_HostError+0x10>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     3f4:	00 d0       	rcall	.+0      	; 0x3f6 <EVENT_USB_Host_HostError+0x12>
     3f6:	ed b7       	in	r30, 0x3d	; 61
     3f8:	fe b7       	in	r31, 0x3e	; 62
     3fa:	31 96       	adiw	r30, 0x01	; 1
     3fc:	29 ec       	ldi	r18, 0xC9	; 201
     3fe:	31 e0       	ldi	r19, 0x01	; 1
     400:	ad b7       	in	r26, 0x3d	; 61
     402:	be b7       	in	r27, 0x3e	; 62
     404:	12 96       	adiw	r26, 0x02	; 2
     406:	3c 93       	st	X, r19
     408:	2e 93       	st	-X, r18
     40a:	11 97       	sbiw	r26, 0x01	; 1
     40c:	89 81       	ldd	r24, Y+1	; 0x01
     40e:	82 83       	std	Z+2, r24	; 0x02
     410:	13 82       	std	Z+3, r1	; 0x03
     412:	0e 94 32 0a 	call	0x1464	; 0x1464 <printf_P>
     416:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	80 e9       	ldi	r24, 0x90	; 144
     420:	50 df       	rcall	.-352    	; 0x2c2 <LEDs_SetAllLEDs>
     422:	ff cf       	rjmp	.-2      	; 0x422 <EVENT_USB_Host_HostError+0x3e>

00000424 <EVENT_USB_Host_DeviceEnumerationFailed>:
     424:	90 91 2e 01 	lds	r25, 0x012E
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     428:	2d b7       	in	r18, 0x3d	; 61
     42a:	3e b7       	in	r19, 0x3e	; 62
     42c:	28 50       	subi	r18, 0x08	; 8
     42e:	30 40       	sbci	r19, 0x00	; 0
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	f8 94       	cli
     434:	3e bf       	out	0x3e, r19	; 62
     436:	0f be       	out	0x3f, r0	; 63
     438:	2d bf       	out	0x3d, r18	; 61
     43a:	ed b7       	in	r30, 0x3d	; 61
     43c:	fe b7       	in	r31, 0x3e	; 62
     43e:	31 96       	adiw	r30, 0x01	; 1
     440:	28 ef       	ldi	r18, 0xF8	; 248
     442:	31 e0       	ldi	r19, 0x01	; 1
     444:	ad b7       	in	r26, 0x3d	; 61
     446:	be b7       	in	r27, 0x3e	; 62
     448:	12 96       	adiw	r26, 0x02	; 2
     44a:	3c 93       	st	X, r19
     44c:	2e 93       	st	-X, r18
     44e:	11 97       	sbiw	r26, 0x01	; 1
     450:	82 83       	std	Z+2, r24	; 0x02
     452:	13 82       	std	Z+3, r1	; 0x03
     454:	64 83       	std	Z+4, r22	; 0x04
     456:	15 82       	std	Z+5, r1	; 0x05
     458:	96 83       	std	Z+6, r25	; 0x06
     45a:	17 82       	std	Z+7, r1	; 0x07
     45c:	0e 94 32 0a 	call	0x1464	; 0x1464 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     460:	2d b7       	in	r18, 0x3d	; 61
     462:	3e b7       	in	r19, 0x3e	; 62
     464:	28 5f       	subi	r18, 0xF8	; 248
     466:	3f 4f       	sbci	r19, 0xFF	; 255
     468:	0f b6       	in	r0, 0x3f	; 63
     46a:	f8 94       	cli
     46c:	3e bf       	out	0x3e, r19	; 62
     46e:	0f be       	out	0x3f, r0	; 63
     470:	2d bf       	out	0x3d, r18	; 61
     472:	80 e9       	ldi	r24, 0x90	; 144
     474:	26 cf       	rjmp	.-436    	; 0x2c2 <LEDs_SetAllLEDs>

00000476 <MIDIHost_Task>:
     476:	1f 93       	push	r17
}
     478:	cf 93       	push	r28

/** Task to read in note on/off messages from the attached MIDI device and print it to the serial port.
 *  When the board joystick or buttons are pressed, note on/off messages are sent to the attached device.
 */
void MIDIHost_Task(void)
{
     47a:	df 93       	push	r29
     47c:	00 d0       	rcall	.+0      	; 0x47e <MIDIHost_Task+0x8>
     47e:	00 d0       	rcall	.+0      	; 0x480 <MIDIHost_Task+0xa>
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     484:	80 91 2e 01 	lds	r24, 0x012E
     488:	8b 30       	cpi	r24, 0x0B	; 11
     48a:	09 f0       	breq	.+2      	; 0x48e <MIDIHost_Task+0x18>
     48c:	c6 c0       	rjmp	.+396    	; 0x61a <MIDIHost_Task+0x1a4>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     494:	80 91 a9 00 	lds	r24, 0x00A9
     498:	8f 7b       	andi	r24, 0xBF	; 191
     49a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     49e:	80 91 a6 00 	lds	r24, 0x00A6
	  return;

	Pipe_SelectPipe(MIDI_DATA_IN_PIPE);
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
     4a2:	80 ff       	sbrs	r24, 0
     4a4:	49 c0       	rjmp	.+146    	; 0x538 <MIDIHost_Task+0xc2>
	{
		MIDI_EventPacket_t MIDIEvent;

		Pipe_Read_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
     4a6:	ce 01       	movw	r24, r28
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	64 e0       	ldi	r22, 0x04	; 4
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	40 e0       	ldi	r20, 0x00	; 0
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	95 d3       	rcall	.+1834   	; 0xbde <Pipe_Read_Stream_LE>
     4b4:	80 91 f6 00 	lds	r24, 0x00F6
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     4b8:	90 91 f7 00 	lds	r25, 0x00F7
     4bc:	00 97       	sbiw	r24, 0x00	; 0

		if (!(Pipe_BytesInPipe()))
     4be:	29 f4       	brne	.+10     	; 0x4ca <MIDIHost_Task+0x54>
     4c0:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     4c4:	8e 77       	andi	r24, 0x7E	; 126
     4c6:	80 93 a6 00 	sts	0x00A6, r24
     4ca:	89 81       	ldd	r24, Y+1	; 0x01
		  Pipe_ClearIN();

		bool NoteOnEvent  = (MIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_ON));
     4cc:	89 30       	cpi	r24, 0x09	; 9
		bool NoteOffEvent = (MIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_OFF));

		if (NoteOnEvent || NoteOffEvent)
     4ce:	29 f0       	breq	.+10     	; 0x4da <MIDIHost_Task+0x64>
     4d0:	88 30       	cpi	r24, 0x08	; 8
     4d2:	91 f5       	brne	.+100    	; 0x538 <MIDIHost_Task+0xc2>
     4d4:	83 e0       	ldi	r24, 0x03	; 3
		{
			printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <MIDIHost_Task+0x68>
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	2d b7       	in	r18, 0x3d	; 61
     4e0:	3e b7       	in	r19, 0x3e	; 62
     4e2:	2a 50       	subi	r18, 0x0A	; 10
     4e4:	30 40       	sbci	r19, 0x00	; 0
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	3e bf       	out	0x3e, r19	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	2d bf       	out	0x3d, r18	; 61
     4f0:	ed b7       	in	r30, 0x3d	; 61
     4f2:	fe b7       	in	r31, 0x3e	; 62
     4f4:	31 96       	adiw	r30, 0x01	; 1
     4f6:	2e e4       	ldi	r18, 0x4E	; 78
     4f8:	32 e0       	ldi	r19, 0x02	; 2
     4fa:	ad b7       	in	r26, 0x3d	; 61
     4fc:	be b7       	in	r27, 0x3e	; 62
     4fe:	12 96       	adiw	r26, 0x02	; 2
     500:	3c 93       	st	X, r19
     502:	2e 93       	st	-X, r18
     504:	11 97       	sbiw	r26, 0x01	; 1
     506:	93 83       	std	Z+3, r25	; 0x03
     508:	82 83       	std	Z+2, r24	; 0x02
     50a:	8a 81       	ldd	r24, Y+2	; 0x02
																				   ((MIDIEvent.Data1 & 0x0F) + 1),
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	8f 70       	andi	r24, 0x0F	; 15
     510:	90 70       	andi	r25, 0x00	; 0
     512:	01 96       	adiw	r24, 0x01	; 1
		bool NoteOnEvent  = (MIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_ON));
		bool NoteOffEvent = (MIDIEvent.Event == MIDI_EVENT(0, MIDI_COMMAND_NOTE_OFF));

		if (NoteOnEvent || NoteOffEvent)
		{
			printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
     514:	95 83       	std	Z+5, r25	; 0x05
     516:	84 83       	std	Z+4, r24	; 0x04
     518:	8b 81       	ldd	r24, Y+3	; 0x03
     51a:	86 83       	std	Z+6, r24	; 0x06
     51c:	17 82       	std	Z+7, r1	; 0x07
     51e:	8c 81       	ldd	r24, Y+4	; 0x04
     520:	80 87       	std	Z+8, r24	; 0x08
     522:	11 86       	std	Z+9, r1	; 0x09
     524:	9f d7       	rcall	.+3902   	; 0x1464 <printf_P>
     526:	2d b7       	in	r18, 0x3d	; 61
     528:	3e b7       	in	r19, 0x3e	; 62
     52a:	26 5f       	subi	r18, 0xF6	; 246
     52c:	3f 4f       	sbci	r19, 0xFF	; 255
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	f8 94       	cli
     532:	3e bf       	out	0x3e, r19	; 62
     534:	0f be       	out	0x3f, r0	; 63
     536:	2d bf       	out	0x3d, r18	; 61
     538:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     53c:	80 64       	ori	r24, 0x40	; 64
     53e:	80 93 a9 00 	sts	0x00A9, r24
     542:	82 e0       	ldi	r24, 0x02	; 2
     544:	80 93 a7 00 	sts	0x00A7, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     548:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     54c:	8f 7b       	andi	r24, 0xBF	; 191
     54e:	80 93 a9 00 	sts	0x00A9, r24
     552:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     556:	82 ff       	sbrs	r24, 2
     558:	60 c0       	rjmp	.+192    	; 0x61a <MIDIHost_Task+0x1a4>
	Pipe_Freeze();

	Pipe_SelectPipe(MIDI_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	if (Pipe_IsOUTReady())
     55a:	13 b1       	in	r17, 0x03	; 3
     55c:	8c b1       	in	r24, 0x0c	; 12
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     55e:	80 95       	com	r24
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	80 73       	andi	r24, 0x30	; 48
     564:	90 70       	andi	r25, 0x00	; 0
     566:	95 95       	asr	r25
     568:	87 95       	ror	r24
     56a:	10 95       	com	r17
     56c:	10 7e       	andi	r17, 0xE0	; 224
     56e:	18 2b       	or	r17, r24
     570:	90 91 20 01 	lds	r25, 0x0120
		uint8_t MIDICommand = 0;
		uint8_t MIDIPitch;

		static uint8_t PrevJoystickStatus;
		uint8_t JoystickStatus  = Joystick_GetStatus();
		uint8_t JoystickChanges = (JoystickStatus ^ PrevJoystickStatus);
     574:	91 27       	eor	r25, r17
     576:	8c b1       	in	r24, 0x0c	; 12
     578:	82 fd       	sbrc	r24, 2
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     57a:	02 c0       	rjmp	.+4      	; 0x580 <MIDIHost_Task+0x10a>

		/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
		uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));
     57c:	39 e0       	ldi	r19, 0x09	; 9
     57e:	01 c0       	rjmp	.+2      	; 0x582 <MIDIHost_Task+0x10c>
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	29 2f       	mov	r18, r25
     584:	96 ff       	sbrs	r25, 6

		if (JoystickChanges & JOY_LEFT)
     586:	04 c0       	rjmp	.+8      	; 0x590 <MIDIHost_Task+0x11a>
     588:	16 ff       	sbrs	r17, 6
     58a:	04 c0       	rjmp	.+8      	; 0x594 <MIDIHost_Task+0x11e>
		{
			MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     58c:	80 e9       	ldi	r24, 0x90	; 144
     58e:	03 c0       	rjmp	.+6      	; 0x596 <MIDIHost_Task+0x120>
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	01 c0       	rjmp	.+2      	; 0x596 <MIDIHost_Task+0x120>
	Pipe_SelectPipe(MIDI_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	if (Pipe_IsOUTReady())
	{
		uint8_t MIDICommand = 0;
     594:	80 e8       	ldi	r24, 0x80	; 128
     596:	97 ff       	sbrs	r25, 7
		/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
		uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));

		if (JoystickChanges & JOY_LEFT)
		{
			MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     598:	05 c0       	rjmp	.+10     	; 0x5a4 <MIDIHost_Task+0x12e>
			MIDIPitch   = 0x3C;
		}

		if (JoystickChanges & JOY_UP)
     59a:	9d e3       	ldi	r25, 0x3D	; 61
     59c:	17 ff       	sbrs	r17, 7
		{
			MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
			MIDIPitch   = 0x3D;
     59e:	04 c0       	rjmp	.+8      	; 0x5a8 <MIDIHost_Task+0x132>
			MIDIPitch   = 0x3C;
		}

		if (JoystickChanges & JOY_UP)
		{
			MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     5a0:	80 e9       	ldi	r24, 0x90	; 144
     5a2:	03 c0       	rjmp	.+6      	; 0x5aa <MIDIHost_Task+0x134>
     5a4:	9c e3       	ldi	r25, 0x3C	; 60
     5a6:	01 c0       	rjmp	.+2      	; 0x5aa <MIDIHost_Task+0x134>
		{
			MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
			MIDIPitch   = 0x3C;
		}

		if (JoystickChanges & JOY_UP)
     5a8:	80 e8       	ldi	r24, 0x80	; 128
     5aa:	23 ff       	sbrs	r18, 3
		{
			MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     5ac:	06 c0       	rjmp	.+12     	; 0x5ba <MIDIHost_Task+0x144>
			MIDIPitch   = 0x3D;
		}

		if (JoystickChanges & JOY_RIGHT)
     5ae:	9e e3       	ldi	r25, 0x3E	; 62
     5b0:	13 ff       	sbrs	r17, 3
		{
			MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
			MIDIPitch   = 0x3E;
     5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <MIDIHost_Task+0x142>
			MIDIPitch   = 0x3D;
		}

		if (JoystickChanges & JOY_RIGHT)
		{
			MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     5b4:	80 e9       	ldi	r24, 0x90	; 144
     5b6:	01 c0       	rjmp	.+2      	; 0x5ba <MIDIHost_Task+0x144>
     5b8:	80 e8       	ldi	r24, 0x80	; 128
     5ba:	24 ff       	sbrs	r18, 4
     5bc:	06 c0       	rjmp	.+12     	; 0x5ca <MIDIHost_Task+0x154>
			MIDIPitch   = 0x3E;
		}

		if (JoystickChanges & JOY_DOWN)
     5be:	9f e3       	ldi	r25, 0x3F	; 63
     5c0:	14 ff       	sbrs	r17, 4
		{
			MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
			MIDIPitch   = 0x3F;
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <MIDIHost_Task+0x152>
			MIDIPitch   = 0x3E;
		}

		if (JoystickChanges & JOY_DOWN)
		{
			MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     5c4:	80 e9       	ldi	r24, 0x90	; 144
     5c6:	01 c0       	rjmp	.+2      	; 0x5ca <MIDIHost_Task+0x154>
     5c8:	80 e8       	ldi	r24, 0x80	; 128
     5ca:	25 ff       	sbrs	r18, 5
     5cc:	04 c0       	rjmp	.+8      	; 0x5d6 <MIDIHost_Task+0x160>
			MIDIPitch   = 0x3F;
		}

		if (JoystickChanges & JOY_PRESS)
     5ce:	15 ff       	sbrs	r17, 5
     5d0:	21 c0       	rjmp	.+66     	; 0x614 <MIDIHost_Task+0x19e>
		{
			MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     5d2:	80 e9       	ldi	r24, 0x90	; 144
     5d4:	20 c0       	rjmp	.+64     	; 0x616 <MIDIHost_Task+0x1a0>
     5d6:	88 23       	and	r24, r24
     5d8:	a9 f0       	breq	.+42     	; 0x604 <MIDIHost_Task+0x18e>
			MIDIPitch   = 0x3B;
		}

		/* Check if a MIDI command is to be sent */
		if (MIDICommand)
     5da:	28 2f       	mov	r18, r24
     5dc:	22 95       	swap	r18
		{
			MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t)
     5de:	2f 70       	andi	r18, 0x0F	; 15
     5e0:	29 83       	std	Y+1, r18	; 0x01
     5e2:	83 2b       	or	r24, r19
     5e4:	8a 83       	std	Y+2, r24	; 0x02
     5e6:	9b 83       	std	Y+3, r25	; 0x03
     5e8:	80 e4       	ldi	r24, 0x40	; 64
     5ea:	8c 83       	std	Y+4, r24	; 0x04
     5ec:	ce 01       	movw	r24, r28
     5ee:	01 96       	adiw	r24, 0x01	; 1
					.Data2       = MIDIPitch,
					.Data3       = MIDI_STANDARD_VELOCITY,
				};

			/* Write the MIDI event packet to the pipe */
			Pipe_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
     5f0:	64 e0       	ldi	r22, 0x04	; 4
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	40 e0       	ldi	r20, 0x00	; 0
     5f6:	50 e0       	ldi	r21, 0x00	; 0
     5f8:	9b d2       	rcall	.+1334   	; 0xb30 <Pipe_Write_Stream_LE>
     5fa:	80 91 a6 00 	lds	r24, 0x00A6
     5fe:	8b 77       	andi	r24, 0x7B	; 123
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     600:	80 93 a6 00 	sts	0x00A6, r24
     604:	80 91 a9 00 	lds	r24, 0x00A9
     608:	80 64       	ori	r24, 0x40	; 64

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     60a:	80 93 a9 00 	sts	0x00A9, r24
     60e:	10 93 20 01 	sts	0x0120, r17
     612:	03 c0       	rjmp	.+6      	; 0x61a <MIDIHost_Task+0x1a4>
		}

		Pipe_Freeze();

		/* Save previous joystick value for next joystick change detection */
		PrevJoystickStatus = JoystickStatus;
     614:	80 e8       	ldi	r24, 0x80	; 128
     616:	9b e3       	ldi	r25, 0x3B	; 59
     618:	e0 cf       	rjmp	.-64     	; 0x5da <MIDIHost_Task+0x164>
			MIDIPitch   = 0x3F;
		}

		if (JoystickChanges & JOY_PRESS)
		{
			MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     61a:	0f 90       	pop	r0
			MIDIPitch   = 0x3E;
		}

		if (JoystickChanges & JOY_DOWN)
		{
			MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
		Pipe_Freeze();

		/* Save previous joystick value for next joystick change detection */
		PrevJoystickStatus = JoystickStatus;
	}
}
     620:	0f 90       	pop	r0
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	1f 91       	pop	r17
     628:	08 95       	ret

0000062a <main>:
     62a:	50 de       	rcall	.-864    	; 0x2cc <SetupHardware>
     62c:	88 e9       	ldi	r24, 0x98	; 152
     62e:	90 e0       	ldi	r25, 0x00	; 0
 */
int main(void)
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "MIDI Host Demo running.\r\n" ESC_FG_WHITE));
     630:	38 d7       	rcall	.+3696   	; 0x14a2 <puts_P>
     632:	80 e1       	ldi	r24, 0x10	; 16
     634:	46 de       	rcall	.-884    	; 0x2c2 <LEDs_SetAllLEDs>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     636:	78 94       	sei
     638:	1e df       	rcall	.-452    	; 0x476 <MIDIHost_Task>
     63a:	cf d6       	rcall	.+3486   	; 0x13da <USB_USBTask>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     63c:	fd cf       	rjmp	.-6      	; 0x638 <main+0xe>

0000063e <DComp_NextMIDIStreamingInterface>:
 *  This comparator searches for the next Interface descriptor of the correct MIDI Streaming Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMIDIStreamingInterface(void* CurrentDescriptor)
{
     63e:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     640:	81 81       	ldd	r24, Z+1	; 0x01
     642:	84 30       	cpi	r24, 0x04	; 4
     644:	49 f4       	brne	.+18     	; 0x658 <DComp_NextMIDIStreamingInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the MIDI descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == AUDIO_CSCP_AudioClass)            &&
     646:	85 81       	ldd	r24, Z+5	; 0x05
     648:	81 30       	cpi	r24, 0x01	; 1
     64a:	31 f4       	brne	.+12     	; 0x658 <DComp_NextMIDIStreamingInterface+0x1a>
     64c:	86 81       	ldd	r24, Z+6	; 0x06
     64e:	83 30       	cpi	r24, 0x03	; 3
     650:	19 f4       	brne	.+6      	; 0x658 <DComp_NextMIDIStreamingInterface+0x1a>
		    (Interface->SubClass == AUDIO_CSCP_MIDIStreamingSubclass) &&
     652:	87 81       	ldd	r24, Z+7	; 0x07
     654:	88 23       	and	r24, r24
     656:	11 f0       	breq	.+4      	; 0x65c <DComp_NextMIDIStreamingInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     658:	82 e0       	ldi	r24, 0x02	; 2
     65a:	08 95       	ret
		/* Check the MIDI descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == AUDIO_CSCP_AudioClass)            &&
		    (Interface->SubClass == AUDIO_CSCP_MIDIStreamingSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_StreamingProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     65c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     65e:	08 95       	ret

00000660 <DComp_NextMIDIStreamingDataEndpoint>:
 *  another interface descriptor is found before the required endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMIDIStreamingDataEndpoint(void* CurrentDescriptor)
{
     660:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     662:	81 81       	ldd	r24, Z+1	; 0x01
     664:	85 30       	cpi	r24, 0x05	; 5
     666:	29 f4       	brne	.+10     	; 0x672 <DComp_NextMIDIStreamingDataEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
     668:	83 81       	ldd	r24, Z+3	; 0x03
     66a:	83 70       	andi	r24, 0x03	; 3
     66c:	82 30       	cpi	r24, 0x02	; 2
     66e:	19 f4       	brne	.+6      	; 0x676 <DComp_NextMIDIStreamingDataEndpoint+0x16>
     670:	04 c0       	rjmp	.+8      	; 0x67a <DComp_NextMIDIStreamingDataEndpoint+0x1a>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     672:	84 30       	cpi	r24, 0x04	; 4
     674:	21 f0       	breq	.+8      	; 0x67e <DComp_NextMIDIStreamingDataEndpoint+0x1e>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
     676:	82 e0       	ldi	r24, 0x02	; 2
     678:	08 95       	ret
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
		  return DESCRIPTOR_SEARCH_Found;
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
     67e:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     680:	08 95       	ret

00000682 <ProcessConfigurationDescriptor>:
 *  This routine searches for a MIDI interface descriptor pair containing bulk data IN and OUT endpoints.
 *
 *  \return An error code from the \ref MIDIHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     682:	af 92       	push	r10
     684:	bf 92       	push	r11
     686:	cf 92       	push	r12
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	c4 50       	subi	r28, 0x04	; 4
     69c:	d2 40       	sbci	r29, 0x02	; 2
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     6a8:	ae 01       	movw	r20, r28
     6aa:	4b 5f       	subi	r20, 0xFB	; 251
     6ac:	5f 4f       	sbci	r21, 0xFF	; 255
     6ae:	5c 83       	std	Y+4, r21	; 0x04
     6b0:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Interface_t* MIDIInterface   = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	6e 01       	movw	r12, r28
     6b6:	08 94       	sec
     6b8:	c1 1c       	adc	r12, r1
     6ba:	d1 1c       	adc	r13, r1
     6bc:	b6 01       	movw	r22, r12
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	32 e0       	ldi	r19, 0x02	; 2
     6c2:	a1 d4       	rcall	.+2370   	; 0x1006 <USB_Host_GetDeviceConfigDescriptor>
     6c4:	85 30       	cpi	r24, 0x05	; 5
     6c6:	09 f4       	brne	.+2      	; 0x6ca <ProcessConfigurationDescriptor+0x48>
     6c8:	4a c0       	rjmp	.+148    	; 0x75e <ProcessConfigurationDescriptor+0xdc>
     6ca:	86 30       	cpi	r24, 0x06	; 6
     6cc:	19 f0       	breq	.+6      	; 0x6d4 <ProcessConfigurationDescriptor+0x52>
     6ce:	88 23       	and	r24, r24
     6d0:	29 f0       	breq	.+10     	; 0x6dc <ProcessConfigurationDescriptor+0x5a>
     6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <ProcessConfigurationDescriptor+0x56>
     6d4:	83 e0       	ldi	r24, 0x03	; 3
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     6d6:	46 c0       	rjmp	.+140    	; 0x764 <ProcessConfigurationDescriptor+0xe2>
     6d8:	81 e0       	ldi	r24, 0x01	; 1
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     6da:	44 c0       	rjmp	.+136    	; 0x764 <ProcessConfigurationDescriptor+0xe2>
     6dc:	ee 24       	eor	r14, r14
	USB_Descriptor_Interface_t* MIDIInterface   = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     6de:	ff 24       	eor	r15, r15
     6e0:	00 e0       	ldi	r16, 0x00	; 0
     6e2:	10 e0       	ldi	r17, 0x00	; 0
     6e4:	aa 24       	eor	r10, r10
     6e6:	bb 24       	eor	r11, r11
     6e8:	a1 14       	cp	r10, r1
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MIDIInterface) ||
     6ea:	b1 04       	cpc	r11, r1
     6ec:	49 f0       	breq	.+18     	; 0x700 <ProcessConfigurationDescriptor+0x7e>
     6ee:	c6 01       	movw	r24, r12
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     6f0:	be 01       	movw	r22, r28
     6f2:	6d 5f       	subi	r22, 0xFD	; 253
     6f4:	7f 4f       	sbci	r23, 0xFF	; 255
     6f6:	40 e3       	ldi	r20, 0x30	; 48
     6f8:	53 e0       	ldi	r21, 0x03	; 3
     6fa:	dc d4       	rcall	.+2488   	; 0x10b4 <USB_GetNextDescriptorComp>
     6fc:	88 23       	and	r24, r24
     6fe:	81 f0       	breq	.+32     	; 0x720 <ProcessConfigurationDescriptor+0x9e>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MIDIInterface) ||
     700:	c6 01       	movw	r24, r12
     702:	be 01       	movw	r22, r28
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextMIDIStreamingDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Mass Storage interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     704:	6d 5f       	subi	r22, 0xFD	; 253
     706:	7f 4f       	sbci	r23, 0xFF	; 255
     708:	4f e1       	ldi	r20, 0x1F	; 31
     70a:	53 e0       	ldi	r21, 0x03	; 3
     70c:	d3 d4       	rcall	.+2470   	; 0x10b4 <USB_GetNextDescriptorComp>
     70e:	88 23       	and	r24, r24
     710:	41 f5       	brne	.+80     	; 0x762 <ProcessConfigurationDescriptor+0xe0>
     712:	ab 80       	ldd	r10, Y+3	; 0x03
     714:	bc 80       	ldd	r11, Y+4	; 0x04
     716:	ee 24       	eor	r14, r14
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			MIDIInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     718:	ff 24       	eor	r15, r15
     71a:	00 e0       	ldi	r16, 0x00	; 0

			/* Clear any found endpoints */
			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
     71c:	10 e0       	ldi	r17, 0x00	; 0
     71e:	e4 cf       	rjmp	.-56     	; 0x6e8 <ProcessConfigurationDescriptor+0x66>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			MIDIInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     720:	eb 81       	ldd	r30, Y+3	; 0x03
     722:	fc 81       	ldd	r31, Y+4	; 0x04
     724:	82 81       	ldd	r24, Z+2	; 0x02
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     726:	87 ff       	sbrs	r24, 7
     728:	02 c0       	rjmp	.+4      	; 0x72e <ProcessConfigurationDescriptor+0xac>

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     72a:	8f 01       	movw	r16, r30
     72c:	01 c0       	rjmp	.+2      	; 0x730 <ProcessConfigurationDescriptor+0xae>
     72e:	7f 01       	movw	r14, r30
		  DataINEndpoint  = EndpointData;
     730:	01 15       	cp	r16, r1
     732:	11 05       	cpc	r17, r1
		else
		  DataOUTEndpoint = EndpointData;
     734:	c9 f2       	breq	.-78     	; 0x6e8 <ProcessConfigurationDescriptor+0x66>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     736:	e1 14       	cp	r14, r1
     738:	f1 04       	cpc	r15, r1
     73a:	b1 f2       	breq	.-84     	; 0x6e8 <ProcessConfigurationDescriptor+0x66>
     73c:	f8 01       	movw	r30, r16
     73e:	24 81       	ldd	r18, Z+4	; 0x04
     740:	35 81       	ldd	r19, Z+5	; 0x05
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Configure the MIDI data IN pipe */
	Pipe_ConfigurePipe(MIDI_DATA_IN_PIPE, EP_TYPE_BULK, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     742:	81 e8       	ldi	r24, 0x81	; 129
     744:	62 e0       	ldi	r22, 0x02	; 2
     746:	42 81       	ldd	r20, Z+2	; 0x02
     748:	01 e0       	ldi	r16, 0x01	; 1
     74a:	a0 d2       	rcall	.+1344   	; 0xc8c <Pipe_ConfigurePipe>
     74c:	f7 01       	movw	r30, r14
     74e:	24 81       	ldd	r18, Z+4	; 0x04
     750:	35 81       	ldd	r19, Z+5	; 0x05
     752:	82 e0       	ldi	r24, 0x02	; 2

	/* Configure the MIDI data OUT pipe */
	Pipe_ConfigurePipe(MIDI_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);
     754:	62 e0       	ldi	r22, 0x02	; 2
     756:	42 81       	ldd	r20, Z+2	; 0x02
     758:	99 d2       	rcall	.+1330   	; 0xc8c <Pipe_ConfigurePipe>
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	03 c0       	rjmp	.+6      	; 0x764 <ProcessConfigurationDescriptor+0xe2>
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	01 c0       	rjmp	.+2      	; 0x764 <ProcessConfigurationDescriptor+0xe2>
     762:	84 e0       	ldi	r24, 0x04	; 4

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     764:	cc 5f       	subi	r28, 0xFC	; 252
     766:	dd 4f       	sbci	r29, 0xFD	; 253
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	f8 94       	cli
			/* Get the next Mass Storage interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextMIDIStreamingInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     76c:	de bf       	out	0x3e, r29	; 62
	/* Configure the MIDI data OUT pipe */
	Pipe_ConfigurePipe(MIDI_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     76e:	0f be       	out	0x3f, r0	; 63
     770:	cd bf       	out	0x3d, r28	; 61
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	ff 90       	pop	r15
     77c:	ef 90       	pop	r14
     77e:	df 90       	pop	r13
     780:	cf 90       	pop	r12
     782:	bf 90       	pop	r11
     784:	af 90       	pop	r10
     786:	08 95       	ret

00000788 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     788:	80 91 9e 00 	lds	r24, 0x009E
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	81 70       	andi	r24, 0x01	; 1
     790:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     792:	20 91 a0 00 	lds	r18, 0x00A0
     796:	2d 7f       	andi	r18, 0xFD	; 253
     798:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     79c:	20 91 9e 00 	lds	r18, 0x009E
     7a0:	22 60       	ori	r18, 0x02	; 2
     7a2:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     7a6:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     7aa:	21 fd       	sbrc	r18, 1
     7ac:	fc cf       	rjmp	.-8      	; 0x7a6 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7ae:	20 91 9e 00 	lds	r18, 0x009E
     7b2:	21 60       	ori	r18, 0x01	; 1
     7b4:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     7b8:	10 92 24 01 	sts	0x0124, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     7bc:	20 91 a0 00 	lds	r18, 0x00A0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	20 72       	andi	r18, 0x20	; 32
     7c4:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     7c6:	40 91 a0 00 	lds	r20, 0x00A0
     7ca:	4f 7d       	andi	r20, 0xDF	; 223
     7cc:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7d0:	40 91 9f 00 	lds	r20, 0x009F
     7d4:	4f 7d       	andi	r20, 0xDF	; 223
     7d6:	40 93 9f 00 	sts	0x009F, r20
     7da:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     7dc:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     7e0:	55 ff       	sbrs	r21, 5
     7e2:	0b c0       	rjmp	.+22     	; 0x7fa <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7e4:	40 91 9f 00 	lds	r20, 0x009F
     7e8:	4f 7d       	andi	r20, 0xDF	; 223
     7ea:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     7ee:	40 91 9f 00 	lds	r20, 0x009F
     7f2:	4d 7f       	andi	r20, 0xFD	; 253
     7f4:	40 93 9f 00 	sts	0x009F, r20
     7f8:	08 c0       	rjmp	.+16     	; 0x80a <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7fa:	ef ec       	ldi	r30, 0xCF	; 207
     7fc:	f7 e0       	ldi	r31, 0x07	; 7
     7fe:	31 97       	sbiw	r30, 0x01	; 1
     800:	f1 f7       	brne	.-4      	; 0x7fe <USB_Host_ResetDevice+0x76>
     802:	00 c0       	rjmp	.+0      	; 0x804 <USB_Host_ResetDevice+0x7c>
     804:	00 00       	nop
     806:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     808:	49 f7       	brne	.-46     	; 0x7dc <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     80a:	21 15       	cp	r18, r1
     80c:	31 05       	cpc	r19, r1
     80e:	29 f0       	breq	.+10     	; 0x81a <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     810:	20 91 a0 00 	lds	r18, 0x00A0
     814:	20 62       	ori	r18, 0x20	; 32
     816:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     81a:	00 97       	sbiw	r24, 0x00	; 0
     81c:	29 f4       	brne	.+10     	; 0x828 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     81e:	80 91 9e 00 	lds	r24, 0x009E
     822:	8e 7f       	andi	r24, 0xFE	; 254
     824:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     828:	80 91 a0 00 	lds	r24, 0x00A0
     82c:	82 60       	ori	r24, 0x02	; 2
     82e:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     832:	08 95       	ret

00000834 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     834:	40 91 9e 00 	lds	r20, 0x009E
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	41 70       	andi	r20, 0x01	; 1
     83c:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     83e:	20 91 a0 00 	lds	r18, 0x00A0
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	20 72       	andi	r18, 0x20	; 32
     846:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     848:	90 91 a0 00 	lds	r25, 0x00A0
     84c:	9f 7d       	andi	r25, 0xDF	; 223
     84e:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     852:	90 91 9f 00 	lds	r25, 0x009F
     856:	9f 7d       	andi	r25, 0xDF	; 223
     858:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     85c:	90 91 9e 00 	lds	r25, 0x009E
     860:	91 60       	ori	r25, 0x01	; 1
     862:	90 93 9e 00 	sts	0x009E, r25
     866:	26 c0       	rjmp	.+76     	; 0x8b4 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     868:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     86c:	95 ff       	sbrs	r25, 5
     86e:	06 c0       	rjmp	.+12     	; 0x87c <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     870:	90 91 9f 00 	lds	r25, 0x009F
     874:	9f 7d       	andi	r25, 0xDF	; 223
     876:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     87a:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     87c:	90 91 2e 01 	lds	r25, 0x012E
     880:	91 30       	cpi	r25, 0x01	; 1
     882:	d9 f0       	breq	.+54     	; 0x8ba <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     884:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     888:	94 ff       	sbrs	r25, 4
     88a:	09 c0       	rjmp	.+18     	; 0x89e <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     88c:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     890:	80 91 a6 00 	lds	r24, 0x00A6
     894:	8f 7e       	andi	r24, 0xEF	; 239
     896:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     89a:	82 e0       	ldi	r24, 0x02	; 2

			break;
     89c:	0f c0       	rjmp	.+30     	; 0x8bc <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     89e:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     8a2:	91 ff       	sbrs	r25, 1
     8a4:	07 c0       	rjmp	.+14     	; 0x8b4 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     8a6:	80 91 a6 00 	lds	r24, 0x00A6
     8aa:	8d 7f       	andi	r24, 0xFD	; 253
     8ac:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     8b0:	83 e0       	ldi	r24, 0x03	; 3

			break;
     8b2:	04 c0       	rjmp	.+8      	; 0x8bc <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     8b4:	88 23       	and	r24, r24
     8b6:	c1 f6       	brne	.-80     	; 0x868 <USB_Host_WaitMS+0x34>
     8b8:	01 c0       	rjmp	.+2      	; 0x8bc <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     8ba:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     8bc:	41 15       	cp	r20, r1
     8be:	51 05       	cpc	r21, r1
     8c0:	29 f4       	brne	.+10     	; 0x8cc <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     8c2:	90 91 9e 00 	lds	r25, 0x009E
     8c6:	9e 7f       	andi	r25, 0xFE	; 254
     8c8:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     8cc:	21 15       	cp	r18, r1
     8ce:	31 05       	cpc	r19, r1
     8d0:	29 f0       	breq	.+10     	; 0x8dc <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     8d2:	90 91 a0 00 	lds	r25, 0x00A0
     8d6:	90 62       	ori	r25, 0x20	; 32
     8d8:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     8dc:	08 95       	ret

000008de <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	28 97       	sbiw	r28, 0x08	; 8
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	f8 94       	cli
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     8f6:	80 91 2e 01 	lds	r24, 0x012E
     8fa:	85 30       	cpi	r24, 0x05	; 5
     8fc:	09 f4       	brne	.+2      	; 0x900 <USB_Host_ProcessNextHostState+0x22>
     8fe:	99 c0       	rjmp	.+306    	; 0xa32 <USB_Host_ProcessNextHostState+0x154>
     900:	86 30       	cpi	r24, 0x06	; 6
     902:	68 f4       	brcc	.+26     	; 0x91e <USB_Host_ProcessNextHostState+0x40>
     904:	82 30       	cpi	r24, 0x02	; 2
     906:	c1 f1       	breq	.+112    	; 0x978 <USB_Host_ProcessNextHostState+0x9a>
     908:	83 30       	cpi	r24, 0x03	; 3
     90a:	18 f4       	brcc	.+6      	; 0x912 <USB_Host_ProcessNextHostState+0x34>
     90c:	88 23       	and	r24, r24
     90e:	a1 f0       	breq	.+40     	; 0x938 <USB_Host_ProcessNextHostState+0x5a>
     910:	04 c1       	rjmp	.+520    	; 0xb1a <USB_Host_ProcessNextHostState+0x23c>
     912:	83 30       	cpi	r24, 0x03	; 3
     914:	d9 f1       	breq	.+118    	; 0x98c <USB_Host_ProcessNextHostState+0xae>
     916:	84 30       	cpi	r24, 0x04	; 4
     918:	09 f0       	breq	.+2      	; 0x91c <USB_Host_ProcessNextHostState+0x3e>
     91a:	ff c0       	rjmp	.+510    	; 0xb1a <USB_Host_ProcessNextHostState+0x23c>
     91c:	62 c0       	rjmp	.+196    	; 0x9e2 <USB_Host_ProcessNextHostState+0x104>
     91e:	87 30       	cpi	r24, 0x07	; 7
     920:	09 f4       	brne	.+2      	; 0x924 <USB_Host_ProcessNextHostState+0x46>
     922:	9e c0       	rjmp	.+316    	; 0xa60 <USB_Host_ProcessNextHostState+0x182>
     924:	87 30       	cpi	r24, 0x07	; 7
     926:	08 f4       	brcc	.+2      	; 0x92a <USB_Host_ProcessNextHostState+0x4c>
     928:	8f c0       	rjmp	.+286    	; 0xa48 <USB_Host_ProcessNextHostState+0x16a>
     92a:	88 30       	cpi	r24, 0x08	; 8
     92c:	09 f4       	brne	.+2      	; 0x930 <USB_Host_ProcessNextHostState+0x52>
     92e:	b8 c0       	rjmp	.+368    	; 0xaa0 <USB_Host_ProcessNextHostState+0x1c2>
     930:	89 30       	cpi	r24, 0x09	; 9
     932:	09 f0       	breq	.+2      	; 0x936 <USB_Host_ProcessNextHostState+0x58>
     934:	f2 c0       	rjmp	.+484    	; 0xb1a <USB_Host_ProcessNextHostState+0x23c>
     936:	d9 c0       	rjmp	.+434    	; 0xaea <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     938:	00 91 21 01 	lds	r16, 0x0121
     93c:	10 91 22 01 	lds	r17, 0x0122
     940:	01 15       	cp	r16, r1
     942:	11 05       	cpc	r17, r1
     944:	09 f4       	brne	.+2      	; 0x948 <USB_Host_ProcessNextHostState+0x6a>
     946:	e9 c0       	rjmp	.+466    	; 0xb1a <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	74 df       	rcall	.-280    	; 0x834 <USB_Host_WaitMS>
     94c:	68 2f       	mov	r22, r24
     94e:	88 23       	and	r24, r24
     950:	31 f0       	breq	.+12     	; 0x95e <USB_Host_ProcessNextHostState+0x80>
     952:	80 91 23 01 	lds	r24, 0x0123
				{
					USB_HostState = PostWaitState;
     956:	80 93 2e 01 	sts	0x012E, r24
     95a:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     95c:	d2 c0       	rjmp	.+420    	; 0xb02 <USB_Host_ProcessNextHostState+0x224>
					break;
     95e:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
     960:	10 40       	sbci	r17, 0x00	; 0
     962:	10 93 22 01 	sts	0x0122, r17
     966:	00 93 21 01 	sts	0x0121, r16
     96a:	01 15       	cp	r16, r1
     96c:	11 05       	cpc	r17, r1
     96e:	09 f0       	breq	.+2      	; 0x972 <USB_Host_ProcessNextHostState+0x94>
     970:	d4 c0       	rjmp	.+424    	; 0xb1a <USB_Host_ProcessNextHostState+0x23c>
     972:	80 91 23 01 	lds	r24, 0x0123
				  USB_HostState = PostWaitState;
     976:	07 c0       	rjmp	.+14     	; 0x986 <USB_Host_ProcessNextHostState+0xa8>
     978:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     97a:	93 e0       	ldi	r25, 0x03	; 3
     97c:	90 93 22 01 	sts	0x0122, r25
     980:	80 93 21 01 	sts	0x0121, r24
     984:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     986:	80 93 2e 01 	sts	0x012E, r24
     98a:	c7 c0       	rjmp	.+398    	; 0xb1a <USB_Host_ProcessNextHostState+0x23c>
			break;
     98c:	80 91 21 01 	lds	r24, 0x0121
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     990:	90 91 22 01 	lds	r25, 0x0122
     994:	9c 01       	movw	r18, r24
     996:	21 50       	subi	r18, 0x01	; 1
     998:	30 40       	sbci	r19, 0x00	; 0
     99a:	30 93 22 01 	sts	0x0122, r19
     99e:	20 93 21 01 	sts	0x0121, r18
     9a2:	00 97       	sbiw	r24, 0x00	; 0
     9a4:	39 f0       	breq	.+14     	; 0x9b4 <USB_Host_ProcessNextHostState+0xd6>
     9a6:	8f ec       	ldi	r24, 0xCF	; 207
     9a8:	97 e0       	ldi	r25, 0x07	; 7
     9aa:	01 97       	sbiw	r24, 0x01	; 1
     9ac:	f1 f7       	brne	.-4      	; 0x9aa <USB_Host_ProcessNextHostState+0xcc>
     9ae:	00 c0       	rjmp	.+0      	; 0x9b0 <USB_Host_ProcessNextHostState+0xd2>
     9b0:	00 00       	nop
     9b2:	b3 c0       	rjmp	.+358    	; 0xb1a <USB_Host_ProcessNextHostState+0x23c>
     9b4:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     9b6:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     9ba:	80 61       	ori	r24, 0x10	; 16
     9bc:	80 93 d8 00 	sts	0x00D8, r24
     9c0:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     9c4:	8b 7f       	andi	r24, 0xFB	; 251
     9c6:	80 93 dd 00 	sts	0x00DD, r24
     9ca:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     9ce:	80 61       	ori	r24, 0x10	; 16
     9d0:	80 93 d7 00 	sts	0x00D7, r24
     9d4:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     9d8:	82 60       	ori	r24, 0x02	; 2
     9da:	80 93 dd 00 	sts	0x00DD, r24
     9de:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     9e0:	d2 cf       	rjmp	.-92     	; 0x986 <USB_Host_ProcessNextHostState+0xa8>
     9e2:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     9e6:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     9e8:	98 c0       	rjmp	.+304    	; 0xb1a <USB_Host_ProcessNextHostState+0x23c>
     9ea:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     9ee:	8e 7f       	andi	r24, 0xFE	; 254
     9f0:	80 93 9f 00 	sts	0x009F, r24
     9f4:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     9f8:	8d 7f       	andi	r24, 0xFD	; 253
     9fa:	80 93 9f 00 	sts	0x009F, r24
     9fe:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     a02:	8d 7f       	andi	r24, 0xFD	; 253
     a04:	80 93 df 00 	sts	0x00DF, r24
     a08:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     a0c:	82 60       	ori	r24, 0x02	; 2
     a0e:	80 93 de 00 	sts	0x00DE, r24
     a12:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a16:	81 60       	ori	r24, 0x01	; 1
     a18:	80 93 9e 00 	sts	0x009E, r24
     a1c:	9c d1       	rcall	.+824    	; 0xd56 <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     a1e:	10 92 2e 01 	sts	0x012E, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     a22:	84 e6       	ldi	r24, 0x64	; 100
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	90 93 22 01 	sts	0x0122, r25
     a2a:	80 93 21 01 	sts	0x0121, r24
     a2e:	85 e0       	ldi	r24, 0x05	; 5
     a30:	59 c0       	rjmp	.+178    	; 0xae4 <USB_Host_ProcessNextHostState+0x206>
     a32:	aa de       	rcall	.-684    	; 0x788 <USB_Host_ResetDevice>
     a34:	10 92 2e 01 	sts	0x012E, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     a38:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	90 93 22 01 	sts	0x0122, r25
     a40:	80 93 21 01 	sts	0x0121, r24
     a44:	86 e0       	ldi	r24, 0x06	; 6
     a46:	4e c0       	rjmp	.+156    	; 0xae4 <USB_Host_ProcessNextHostState+0x206>
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     a4e:	20 e4       	ldi	r18, 0x40	; 64
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	01 e0       	ldi	r16, 0x01	; 1
     a54:	1b d1       	rcall	.+566    	; 0xc8c <Pipe_ConfigurePipe>
     a56:	88 23       	and	r24, r24
     a58:	09 f4       	brne	.+2      	; 0xa5c <USB_Host_ProcessNextHostState+0x17e>
     a5a:	4f c0       	rjmp	.+158    	; 0xafa <USB_Host_ProcessNextHostState+0x21c>
     a5c:	87 e0       	ldi	r24, 0x07	; 7
     a5e:	93 cf       	rjmp	.-218    	; 0x986 <USB_Host_ProcessNextHostState+0xa8>
     a60:	a6 e2       	ldi	r26, 0x26	; 38
     a62:	b1 e0       	ldi	r27, 0x01	; 1
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     a64:	e7 e0       	ldi	r30, 0x07	; 7
     a66:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     a68:	88 e0       	ldi	r24, 0x08	; 8
     a6a:	01 90       	ld	r0, Z+
     a6c:	0d 92       	st	X+, r0
     a6e:	81 50       	subi	r24, 0x01	; 1
     a70:	e1 f7       	brne	.-8      	; 0xa6a <USB_Host_ProcessNextHostState+0x18c>
     a72:	10 92 a7 00 	sts	0x00A7, r1
     a76:	ce 01       	movw	r24, r28
     a78:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a7a:	8c d3       	rcall	.+1816   	; 0x1194 <USB_Host_SendControlRequest>
     a7c:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     a7e:	88 23       	and	r24, r24
     a80:	09 f0       	breq	.+2      	; 0xa84 <USB_Host_ProcessNextHostState+0x1a6>
     a82:	3e c0       	rjmp	.+124    	; 0xb00 <USB_Host_ProcessNextHostState+0x222>
     a84:	88 85       	ldd	r24, Y+8	; 0x08
     a86:	80 93 17 01 	sts	0x0117, r24
     a8a:	7e de       	rcall	.-772    	; 0x788 <USB_Host_ResetDevice>
     a8c:	10 92 2e 01 	sts	0x012E, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     a90:	88 ec       	ldi	r24, 0xC8	; 200
     a92:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
     a94:	90 93 22 01 	sts	0x0122, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     a98:	80 93 21 01 	sts	0x0121, r24
     a9c:	88 e0       	ldi	r24, 0x08	; 8
     a9e:	22 c0       	rjmp	.+68     	; 0xae4 <USB_Host_ProcessNextHostState+0x206>
     aa0:	20 91 17 01 	lds	r18, 0x0117
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     aac:	01 e0       	ldi	r16, 0x01	; 1
     aae:	ee d0       	rcall	.+476    	; 0xc8c <Pipe_ConfigurePipe>
     ab0:	88 23       	and	r24, r24
     ab2:	19 f1       	breq	.+70     	; 0xafa <USB_Host_ProcessNextHostState+0x21c>
     ab4:	a6 e2       	ldi	r26, 0x26	; 38
     ab6:	b1 e0       	ldi	r27, 0x01	; 1
     ab8:	ef e0       	ldi	r30, 0x0F	; 15
     aba:	f1 e0       	ldi	r31, 0x01	; 1
     abc:	88 e0       	ldi	r24, 0x08	; 8
     abe:	01 90       	ld	r0, Z+
     ac0:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     ac2:	81 50       	subi	r24, 0x01	; 1
     ac4:	e1 f7       	brne	.-8      	; 0xabe <USB_Host_ProcessNextHostState+0x1e0>
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	64 d3       	rcall	.+1736   	; 0x1194 <USB_Host_SendControlRequest>
     acc:	68 2f       	mov	r22, r24
     ace:	88 23       	and	r24, r24
     ad0:	b9 f4       	brne	.+46     	; 0xb00 <USB_Host_ProcessNextHostState+0x222>
     ad2:	10 92 2e 01 	sts	0x012E, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     ad6:	84 e6       	ldi	r24, 0x64	; 100
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	90 93 22 01 	sts	0x0122, r25
     ade:	80 93 21 01 	sts	0x0121, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     ae2:	89 e0       	ldi	r24, 0x09	; 9
     ae4:	80 93 23 01 	sts	0x0123, r24
     ae8:	18 c0       	rjmp	.+48     	; 0xb1a <USB_Host_ProcessNextHostState+0x23c>
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	80 93 a1 00 	sts	0x00A1, r24
     af0:	8a e0       	ldi	r24, 0x0A	; 10
     af2:	80 93 2e 01 	sts	0x012E, r24
     af6:	32 dc       	rcall	.-1948   	; 0x35c <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     af8:	10 c0       	rjmp	.+32     	; 0xb1a <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	84 e0       	ldi	r24, 0x04	; 4
     afe:	01 c0       	rjmp	.+2      	; 0xb02 <USB_Host_ProcessNextHostState+0x224>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     b00:	83 e0       	ldi	r24, 0x03	; 3
     b02:	90 91 2e 01 	lds	r25, 0x012E

			EVENT_USB_Host_DeviceEnumerationComplete();
     b06:	91 30       	cpi	r25, 0x01	; 1
     b08:	41 f0       	breq	.+16     	; 0xb1a <USB_Host_ProcessNextHostState+0x23c>
			break;
     b0a:	8c dc       	rcall	.-1768   	; 0x424 <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     b0c:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     b10:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     b12:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     b16:	1c dc       	rcall	.-1992   	; 0x350 <EVENT_USB_Host_DeviceUnattached>
     b18:	78 d1       	rcall	.+752    	; 0xe0a <USB_ResetInterface>
     b1a:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b20:	de bf       	out	0x3e, r29	; 62
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	cd bf       	out	0x3d, r28	; 61
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16

		USB_ResetInterface();
     b2e:	08 95       	ret

00000b30 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     b30:	af 92       	push	r10
     b32:	bf 92       	push	r11
     b34:	cf 92       	push	r12
     b36:	df 92       	push	r13
     b38:	ff 92       	push	r15
     b3a:	0f 93       	push	r16
     b3c:	1f 93       	push	r17
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	5c 01       	movw	r10, r24
     b44:	eb 01       	movw	r28, r22
     b46:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     b48:	80 91 aa 00 	lds	r24, 0x00AA
     b4c:	8f 7c       	andi	r24, 0xCF	; 207
     b4e:	80 62       	ori	r24, 0x20	; 32
     b50:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     b54:	14 d1       	rcall	.+552    	; 0xd7e <Pipe_WaitUntilReady>
     b56:	f8 2e       	mov	r15, r24
     b58:	88 23       	and	r24, r24
     b5a:	b1 f5       	brne	.+108    	; 0xbc8 <Pipe_Write_Stream_LE+0x98>
     b5c:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     b5e:	d1 04       	cpc	r13, r1
     b60:	41 f0       	breq	.+16     	; 0xb72 <Pipe_Write_Stream_LE+0x42>
     b62:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     b64:	00 81       	ld	r16, Z
     b66:	11 81       	ldd	r17, Z+1	; 0x01
     b68:	c0 1b       	sub	r28, r16
     b6a:	d1 0b       	sbc	r29, r17
     b6c:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     b6e:	1b 1d       	adc	r17, r11
     b70:	01 c0       	rjmp	.+2      	; 0xb74 <Pipe_Write_Stream_LE+0x44>
     b72:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     b74:	aa 24       	eor	r10, r10
     b76:	bb 24       	eor	r11, r11
     b78:	23 c0       	rjmp	.+70     	; 0xbc0 <Pipe_Write_Stream_LE+0x90>
     b7a:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     b7e:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     b80:	16 c0       	rjmp	.+44     	; 0xbae <Pipe_Write_Stream_LE+0x7e>
     b82:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     b86:	8b 77       	andi	r24, 0x7B	; 123
     b88:	80 93 a6 00 	sts	0x00A6, r24
     b8c:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     b8e:	d1 04       	cpc	r13, r1
     b90:	51 f0       	breq	.+20     	; 0xba6 <Pipe_Write_Stream_LE+0x76>
     b92:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     b94:	80 81       	ld	r24, Z
     b96:	91 81       	ldd	r25, Z+1	; 0x01
     b98:	8a 0d       	add	r24, r10
     b9a:	9b 1d       	adc	r25, r11
     b9c:	91 83       	std	Z+1, r25	; 0x01
     b9e:	80 83       	st	Z, r24
     ba0:	44 e0       	ldi	r20, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     ba2:	f4 2e       	mov	r15, r20
     ba4:	11 c0       	rjmp	.+34     	; 0xbc8 <Pipe_Write_Stream_LE+0x98>
     ba6:	eb d0       	rcall	.+470    	; 0xd7e <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     ba8:	88 23       	and	r24, r24
     baa:	51 f0       	breq	.+20     	; 0xbc0 <Pipe_Write_Stream_LE+0x90>
     bac:	0c c0       	rjmp	.+24     	; 0xbc6 <Pipe_Write_Stream_LE+0x96>
     bae:	f8 01       	movw	r30, r16
     bb0:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     bb2:	8f 01       	movw	r16, r30
     bb4:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     bb8:	21 97       	sbiw	r28, 0x01	; 1
     bba:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     bbc:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     bbe:	b1 1c       	adc	r11, r1
     bc0:	20 97       	sbiw	r28, 0x00	; 0
     bc2:	d9 f6       	brne	.-74     	; 0xb7a <Pipe_Write_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     bc4:	01 c0       	rjmp	.+2      	; 0xbc8 <Pipe_Write_Stream_LE+0x98>
     bc6:	f8 2e       	mov	r15, r24
     bc8:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     bca:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     bcc:	cf 91       	pop	r28
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	ff 90       	pop	r15
     bd4:	df 90       	pop	r13
     bd6:	cf 90       	pop	r12
     bd8:	bf 90       	pop	r11
     bda:	af 90       	pop	r10
     bdc:	08 95       	ret

00000bde <Pipe_Read_Stream_LE>:
     bde:	af 92       	push	r10
     be0:	bf 92       	push	r11
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     be2:	cf 92       	push	r12
     be4:	df 92       	push	r13
     be6:	ff 92       	push	r15
     be8:	0f 93       	push	r16
     bea:	1f 93       	push	r17
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	5c 01       	movw	r10, r24
     bf2:	eb 01       	movw	r28, r22
     bf4:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     bf6:	80 91 aa 00 	lds	r24, 0x00AA
     bfa:	8f 7c       	andi	r24, 0xCF	; 207
     bfc:	80 61       	ori	r24, 0x10	; 16
     bfe:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     c02:	bd d0       	rcall	.+378    	; 0xd7e <Pipe_WaitUntilReady>
     c04:	f8 2e       	mov	r15, r24
     c06:	88 23       	and	r24, r24
     c08:	b1 f5       	brne	.+108    	; 0xc76 <Pipe_Read_Stream_LE+0x98>
     c0a:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     c0c:	d1 04       	cpc	r13, r1
     c0e:	41 f0       	breq	.+16     	; 0xc20 <Pipe_Read_Stream_LE+0x42>
     c10:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     c12:	00 81       	ld	r16, Z
     c14:	11 81       	ldd	r17, Z+1	; 0x01
     c16:	c0 1b       	sub	r28, r16
     c18:	d1 0b       	sbc	r29, r17
     c1a:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     c1c:	1b 1d       	adc	r17, r11
     c1e:	01 c0       	rjmp	.+2      	; 0xc22 <Pipe_Read_Stream_LE+0x44>
     c20:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     c22:	aa 24       	eor	r10, r10
     c24:	bb 24       	eor	r11, r11
     c26:	23 c0       	rjmp	.+70     	; 0xc6e <Pipe_Read_Stream_LE+0x90>
     c28:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     c2c:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     c2e:	16 c0       	rjmp	.+44     	; 0xc5c <Pipe_Read_Stream_LE+0x7e>
     c30:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     c34:	8e 77       	andi	r24, 0x7E	; 126
     c36:	80 93 a6 00 	sts	0x00A6, r24
     c3a:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     c3c:	d1 04       	cpc	r13, r1
     c3e:	51 f0       	breq	.+20     	; 0xc54 <Pipe_Read_Stream_LE+0x76>
     c40:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     c42:	80 81       	ld	r24, Z
     c44:	91 81       	ldd	r25, Z+1	; 0x01
     c46:	8a 0d       	add	r24, r10
     c48:	9b 1d       	adc	r25, r11
     c4a:	91 83       	std	Z+1, r25	; 0x01
     c4c:	80 83       	st	Z, r24
     c4e:	64 e0       	ldi	r22, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     c50:	f6 2e       	mov	r15, r22
     c52:	11 c0       	rjmp	.+34     	; 0xc76 <Pipe_Read_Stream_LE+0x98>
     c54:	94 d0       	rcall	.+296    	; 0xd7e <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     c56:	88 23       	and	r24, r24
     c58:	51 f0       	breq	.+20     	; 0xc6e <Pipe_Read_Stream_LE+0x90>
     c5a:	0c c0       	rjmp	.+24     	; 0xc74 <Pipe_Read_Stream_LE+0x96>
     c5c:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     c60:	f8 01       	movw	r30, r16
     c62:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     c64:	8f 01       	movw	r16, r30
     c66:	21 97       	sbiw	r28, 0x01	; 1
     c68:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     c6a:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     c6c:	b1 1c       	adc	r11, r1
     c6e:	20 97       	sbiw	r28, 0x00	; 0
     c70:	d9 f6       	brne	.-74     	; 0xc28 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     c72:	01 c0       	rjmp	.+2      	; 0xc76 <Pipe_Read_Stream_LE+0x98>
     c74:	f8 2e       	mov	r15, r24
     c76:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     c78:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     c7a:	cf 91       	pop	r28
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	df 90       	pop	r13
     c84:	cf 90       	pop	r12
     c86:	bf 90       	pop	r11
     c88:	af 90       	pop	r10
     c8a:	08 95       	ret

00000c8c <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     c8c:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     c8e:	58 2f       	mov	r21, r24
     c90:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     c92:	87 ff       	sbrs	r24, 7
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <Pipe_ConfigurePipe+0xe>
     c96:	80 e1       	ldi	r24, 0x10	; 16
     c98:	01 c0       	rjmp	.+2      	; 0xc9c <Pipe_ConfigurePipe+0x10>
     c9a:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     c9c:	57 30       	cpi	r21, 0x07	; 7
     c9e:	08 f0       	brcs	.+2      	; 0xca2 <Pipe_ConfigurePipe+0x16>
     ca0:	57 c0       	rjmp	.+174    	; 0xd50 <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     ca2:	66 23       	and	r22, r22
     ca4:	09 f4       	brne	.+2      	; 0xca8 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     ca6:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     ca8:	4f 70       	andi	r20, 0x0F	; 15
     caa:	62 95       	swap	r22
     cac:	66 0f       	add	r22, r22
     cae:	66 0f       	add	r22, r22
     cb0:	60 7c       	andi	r22, 0xC0	; 192
     cb2:	64 2b       	or	r22, r20
     cb4:	68 2b       	or	r22, r24
     cb6:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     cb8:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     cba:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     cbe:	45 17       	cp	r20, r21
     cc0:	a9 f4       	brne	.+42     	; 0xcec <Pipe_ConfigurePipe+0x60>
     cc2:	04 c0       	rjmp	.+8      	; 0xccc <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     cc4:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	03 c0       	rjmp	.+6      	; 0xcd2 <Pipe_ConfigurePipe+0x46>
     ccc:	88 e0       	ldi	r24, 0x08	; 8
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     cd2:	82 17       	cp	r24, r18
     cd4:	93 07       	cpc	r25, r19
     cd6:	10 f4       	brcc	.+4      	; 0xcdc <Pipe_ConfigurePipe+0x50>
     cd8:	75 30       	cpi	r23, 0x05	; 5
     cda:	a1 f7       	brne	.-24     	; 0xcc4 <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     cdc:	87 2f       	mov	r24, r23
     cde:	82 95       	swap	r24
     ce0:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     ce2:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     ce4:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     ce6:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     ce8:	e0 e0       	ldi	r30, 0x00	; 0
     cea:	08 c0       	rjmp	.+16     	; 0xcfc <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     cec:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     cf0:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     cf4:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     cf8:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     cfc:	81 ff       	sbrs	r24, 1
     cfe:	20 c0       	rjmp	.+64     	; 0xd40 <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     d00:	90 91 a9 00 	lds	r25, 0x00A9
     d04:	9e 7f       	andi	r25, 0xFE	; 254
     d06:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     d0a:	90 91 ab 00 	lds	r25, 0x00AB
     d0e:	9d 7f       	andi	r25, 0xFD	; 253
     d10:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     d14:	90 91 a9 00 	lds	r25, 0x00A9
     d18:	91 60       	ori	r25, 0x01	; 1
     d1a:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     d1e:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     d22:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     d26:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     d2a:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     d2e:	80 91 a9 00 	lds	r24, 0x00A9
     d32:	80 62       	ori	r24, 0x20	; 32
     d34:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     d38:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     d3c:	87 ff       	sbrs	r24, 7
     d3e:	08 c0       	rjmp	.+16     	; 0xd50 <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     d40:	4f 5f       	subi	r20, 0xFF	; 255
     d42:	47 30       	cpi	r20, 0x07	; 7
     d44:	09 f0       	breq	.+2      	; 0xd48 <Pipe_ConfigurePipe+0xbc>
     d46:	b9 cf       	rjmp	.-142    	; 0xcba <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     d48:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	01 c0       	rjmp	.+2      	; 0xd52 <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     d50:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     d52:	0f 91       	pop	r16
     d54:	08 95       	ret

00000d56 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     d56:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     d60:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     d64:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     d68:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     d6c:	90 91 a9 00 	lds	r25, 0x00A9
     d70:	9e 7f       	andi	r25, 0xFE	; 254
     d72:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     d76:	8f 5f       	subi	r24, 0xFF	; 255
     d78:	87 30       	cpi	r24, 0x07	; 7
     d7a:	81 f7       	brne	.-32     	; 0xd5c <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     d7c:	08 95       	ret

00000d7e <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     d7e:	80 91 a2 00 	lds	r24, 0x00A2
     d82:	90 91 a3 00 	lds	r25, 0x00A3
     d86:	45 e6       	ldi	r20, 0x65	; 101
     d88:	01 c0       	rjmp	.+2      	; 0xd8c <Pipe_WaitUntilReady+0xe>
     d8a:	c9 01       	movw	r24, r18
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     d8c:	20 91 aa 00 	lds	r18, 0x00AA
     d90:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     d92:	20 31       	cpi	r18, 0x10	; 16
     d94:	29 f4       	brne	.+10     	; 0xda0 <Pipe_WaitUntilReady+0x22>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     d96:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     d9a:	20 ff       	sbrs	r18, 0
     d9c:	05 c0       	rjmp	.+10     	; 0xda8 <Pipe_WaitUntilReady+0x2a>
     d9e:	17 c0       	rjmp	.+46     	; 0xdce <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     da0:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     da4:	22 fd       	sbrc	r18, 2
     da6:	13 c0       	rjmp	.+38     	; 0xdce <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     da8:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     dac:	21 fd       	sbrc	r18, 1
     dae:	11 c0       	rjmp	.+34     	; 0xdd2 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     db0:	20 91 2e 01 	lds	r18, 0x012E
     db4:	21 30       	cpi	r18, 0x01	; 1
     db6:	79 f0       	breq	.+30     	; 0xdd6 <Pipe_WaitUntilReady+0x58>
     db8:	20 91 a2 00 	lds	r18, 0x00A2
     dbc:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     dc0:	28 17       	cp	r18, r24
     dc2:	39 07       	cpc	r19, r25
     dc4:	19 f3       	breq	.-58     	; 0xd8c <Pipe_WaitUntilReady+0xe>
     dc6:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     dc8:	01 f7       	brne	.-64     	; 0xd8a <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_Timeout;
     dca:	83 e0       	ldi	r24, 0x03	; 3
     dcc:	08 95       	ret
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     dd6:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     dd8:	08 95       	ret

00000dda <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     dda:	75 d0       	rcall	.+234    	; 0xec6 <USB_INT_DisableAllInterrupts>
     ddc:	7c d0       	rcall	.+248    	; 0xed6 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     dde:	e0 ee       	ldi	r30, 0xE0	; 224
     de0:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     de2:	80 81       	ld	r24, Z
     de4:	81 60       	ori	r24, 0x01	; 1
     de6:	80 83       	st	Z, r24
     de8:	e8 ed       	ldi	r30, 0xD8	; 216
     dea:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     dec:	80 81       	ld	r24, Z
     dee:	8f 77       	andi	r24, 0x7F	; 127
     df0:	80 83       	st	Z, r24
     df2:	19 bc       	out	0x29, r1	; 41
     df4:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     df6:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     df8:	8c 91       	ld	r24, X
     dfa:	8e 7f       	andi	r24, 0xFE	; 254
     dfc:	8c 93       	st	X, r24
     dfe:	80 81       	ld	r24, Z
     e00:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     e02:	80 83       	st	Z, r24
     e04:	10 92 25 01 	sts	0x0125, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     e08:	08 95       	ret

00000e0a <USB_ResetInterface>:
     e0a:	5d d0       	rcall	.+186    	; 0xec6 <USB_INT_DisableAllInterrupts>
}
     e0c:	64 d0       	rcall	.+200    	; 0xed6 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     e0e:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     e12:	8f 77       	andi	r24, 0x7F	; 127
     e14:	80 93 d8 00 	sts	0x00D8, r24
     e18:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     e1c:	80 68       	ori	r24, 0x80	; 128
     e1e:	80 93 d8 00 	sts	0x00D8, r24
     e22:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     e26:	8f 7d       	andi	r24, 0xDF	; 223
     e28:	80 93 d8 00 	sts	0x00D8, r24
     e2c:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     e30:	8f 77       	andi	r24, 0x7F	; 127
     e32:	80 93 d7 00 	sts	0x00D7, r24
     e36:	8c e0       	ldi	r24, 0x0C	; 12
     e38:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     e3a:	8e e0       	ldi	r24, 0x0E	; 14
     e3c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     e3e:	09 b4       	in	r0, 0x29	; 41
     e40:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     e42:	fd cf       	rjmp	.-6      	; 0xe3e <USB_ResetInterface+0x34>
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	80 93 2e 01 	sts	0x012E, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     e4a:	10 92 24 01 	sts	0x0124, r1
	USB_Host_ConfigurationNumber = 0;
     e4e:	80 e4       	ldi	r24, 0x40	; 64
     e50:	80 93 17 01 	sts	0x0117, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     e54:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     e58:	80 64       	ori	r24, 0x40	; 64
     e5a:	80 93 d8 00 	sts	0x00D8, r24
     e5e:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e62:	81 60       	ori	r24, 0x01	; 1
     e64:	80 93 dd 00 	sts	0x00DD, r24
     e68:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     e6c:	84 60       	ori	r24, 0x04	; 4
     e6e:	80 93 dd 00 	sts	0x00DD, r24
     e72:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     e76:	8f 7e       	andi	r24, 0xEF	; 239
     e78:	80 93 d7 00 	sts	0x00D7, r24
     e7c:	6f 9a       	sbi	0x0d, 7	; 13
     e7e:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     e80:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     e84:	81 60       	ori	r24, 0x01	; 1
     e86:	80 93 de 00 	sts	0x00DE, r24
     e8a:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     e8e:	84 60       	ori	r24, 0x04	; 4
     e90:	80 93 de 00 	sts	0x00DE, r24
     e94:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     e98:	8e 7f       	andi	r24, 0xFE	; 254
     e9a:	80 93 e0 00 	sts	0x00E0, r24
     e9e:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     ea2:	80 61       	ori	r24, 0x10	; 16
     ea4:	80 93 d8 00 	sts	0x00D8, r24
     ea8:	08 95       	ret

00000eaa <USB_Init>:
     eaa:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     eac:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     eae:	80 81       	ld	r24, Z
     eb0:	8f 7e       	andi	r24, 0xEF	; 239
     eb2:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     eb4:	e7 ed       	ldi	r30, 0xD7	; 215
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	81 60       	ori	r24, 0x01	; 1
     ebc:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	80 93 25 01 	sts	0x0125, r24

	USB_ResetInterface();
     ec4:	a2 cf       	rjmp	.-188    	; 0xe0a <USB_ResetInterface>

00000ec6 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     ec6:	e8 ed       	ldi	r30, 0xD8	; 216
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	8c 7f       	andi	r24, 0xFC	; 252
     ece:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     ed0:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     ed4:	08 95       	ret

00000ed6 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     ed6:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     eda:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     ede:	08 95       	ret

00000ee0 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     ee0:	1f 92       	push	r1
     ee2:	0f 92       	push	r0
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	0f 92       	push	r0
     ee8:	0b b6       	in	r0, 0x3b	; 59
     eea:	0f 92       	push	r0
     eec:	11 24       	eor	r1, r1
     eee:	2f 93       	push	r18
     ef0:	3f 93       	push	r19
     ef2:	4f 93       	push	r20
     ef4:	5f 93       	push	r21
     ef6:	6f 93       	push	r22
     ef8:	7f 93       	push	r23
     efa:	8f 93       	push	r24
     efc:	9f 93       	push	r25
     efe:	af 93       	push	r26
     f00:	bf 93       	push	r27
     f02:	ef 93       	push	r30
     f04:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     f06:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     f0a:	85 ff       	sbrs	r24, 5
     f0c:	0a c0       	rjmp	.+20     	; 0xf22 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     f0e:	80 91 a0 00 	lds	r24, 0x00A0
     f12:	85 ff       	sbrs	r24, 5
     f14:	06 c0       	rjmp	.+12     	; 0xf22 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     f16:	80 91 9f 00 	lds	r24, 0x009F
     f1a:	8f 7d       	andi	r24, 0xDF	; 223
     f1c:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     f20:	10 d1       	rcall	.+544    	; 0x1142 <USB_Event_Stub>
     f22:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     f26:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     f28:	15 c0       	rjmp	.+42     	; 0xf54 <__vector_10+0x74>
     f2a:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     f2e:	81 ff       	sbrs	r24, 1
     f30:	11 c0       	rjmp	.+34     	; 0xf54 <__vector_10+0x74>
     f32:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     f36:	8d 7f       	andi	r24, 0xFD	; 253
     f38:	80 93 9f 00 	sts	0x009F, r24
     f3c:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     f40:	8e 7f       	andi	r24, 0xFE	; 254
     f42:	80 93 9f 00 	sts	0x009F, r24
     f46:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     f4a:	8d 7f       	andi	r24, 0xFD	; 253
     f4c:	80 93 a0 00 	sts	0x00A0, r24
     f50:	ff d9       	rcall	.-3074   	; 0x350 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     f52:	5b df       	rcall	.-330    	; 0xe0a <USB_ResetInterface>
     f54:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     f58:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     f5a:	15 c0       	rjmp	.+42     	; 0xf86 <__vector_10+0xa6>
     f5c:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     f60:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     f62:	11 c0       	rjmp	.+34     	; 0xf86 <__vector_10+0xa6>
     f64:	80 91 df 00 	lds	r24, 0x00DF
     f68:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     f6a:	80 93 df 00 	sts	0x00DF, r24
     f6e:	77 98       	cbi	0x0e, 7	; 14
     f70:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     f74:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     f76:	80 93 dd 00 	sts	0x00DD, r24
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	33 da       	rcall	.-2970   	; 0x3e4 <EVENT_USB_Host_HostError>
     f7e:	e8 d9       	rcall	.-3120   	; 0x350 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	80 93 2e 01 	sts	0x012E, r24
		EVENT_USB_Host_DeviceUnattached();
     f86:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     f8a:	80 ff       	sbrs	r24, 0
     f8c:	17 c0       	rjmp	.+46     	; 0xfbc <__vector_10+0xdc>
     f8e:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     f92:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     f94:	13 c0       	rjmp	.+38     	; 0xfbc <__vector_10+0xdc>
     f96:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     f9a:	8e 7f       	andi	r24, 0xFE	; 254
     f9c:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     fa0:	80 91 de 00 	lds	r24, 0x00DE
     fa4:	8e 7f       	andi	r24, 0xFE	; 254
     fa6:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     faa:	cc d9       	rcall	.-3176   	; 0x344 <EVENT_USB_Host_DeviceAttached>
     fac:	80 91 a0 00 	lds	r24, 0x00A0
     fb0:	82 60       	ori	r24, 0x02	; 2
     fb2:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     fb6:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     fb8:	80 93 2e 01 	sts	0x012E, r24
     fbc:	80 91 df 00 	lds	r24, 0x00DF
     fc0:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     fc2:	0e c0       	rjmp	.+28     	; 0xfe0 <__vector_10+0x100>
     fc4:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     fc8:	82 ff       	sbrs	r24, 2
     fca:	0a c0       	rjmp	.+20     	; 0xfe0 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     fcc:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     fd0:	8b 7f       	andi	r24, 0xFB	; 251
     fd2:	80 93 df 00 	sts	0x00DF, r24
     fd6:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     fd8:	60 e0       	ldi	r22, 0x00	; 0
     fda:	24 da       	rcall	.-3000   	; 0x424 <EVENT_USB_Host_DeviceEnumerationFailed>
     fdc:	b9 d9       	rcall	.-3214   	; 0x350 <EVENT_USB_Host_DeviceUnattached>
     fde:	15 df       	rcall	.-470    	; 0xe0a <USB_ResetInterface>
     fe0:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     fe2:	ef 91       	pop	r30
     fe4:	bf 91       	pop	r27
     fe6:	af 91       	pop	r26
     fe8:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     fea:	8f 91       	pop	r24
     fec:	7f 91       	pop	r23

		USB_ResetInterface();
     fee:	6f 91       	pop	r22
     ff0:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     ff2:	4f 91       	pop	r20
     ff4:	3f 91       	pop	r19
     ff6:	2f 91       	pop	r18
     ff8:	0f 90       	pop	r0
     ffa:	0b be       	out	0x3b, r0	; 59
     ffc:	0f 90       	pop	r0
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	0f 90       	pop	r0
    1002:	1f 90       	pop	r1
    1004:	18 95       	reti

00001006 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1006:	cf 92       	push	r12
    1008:	df 92       	push	r13
    100a:	ef 92       	push	r14
    100c:	ff 92       	push	r15
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	29 97       	sbiw	r28, 0x09	; 9
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	6b 01       	movw	r12, r22
    1028:	8a 01       	movw	r16, r20
    102a:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    102c:	90 e8       	ldi	r25, 0x80	; 128
    102e:	90 93 26 01 	sts	0x0126, r25
    1032:	96 e0       	ldi	r25, 0x06	; 6
    1034:	90 93 27 01 	sts	0x0127, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    103e:	90 93 29 01 	sts	0x0129, r25
    1042:	80 93 28 01 	sts	0x0128, r24
    1046:	10 92 2b 01 	sts	0x012B, r1
    104a:	10 92 2a 01 	sts	0x012A, r1
    104e:	89 e0       	ldi	r24, 0x09	; 9
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	90 93 2d 01 	sts	0x012D, r25
    1056:	80 93 2c 01 	sts	0x012C, r24
    105a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    105e:	ce 01       	movw	r24, r28
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	98 d0       	rcall	.+304    	; 0x1194 <USB_Host_SendControlRequest>
    1064:	88 23       	and	r24, r24
    1066:	b9 f4       	brne	.+46     	; 0x1096 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    106a:	9c 81       	ldd	r25, Y+4	; 0x04
    106c:	f6 01       	movw	r30, r12
    106e:	91 83       	std	Z+1, r25	; 0x01
    1070:	80 83       	st	Z, r24
    1072:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
    1074:	f9 06       	cpc	r15, r25
    1076:	70 f0       	brcs	.+28     	; 0x1094 <USB_Host_GetDeviceConfigDescriptor+0x8e>
    1078:	90 93 2d 01 	sts	0x012D, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    107c:	80 93 2c 01 	sts	0x012C, r24
    1080:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1082:	88 d0       	rcall	.+272    	; 0x1194 <USB_Host_SendControlRequest>
    1084:	88 23       	and	r24, r24
    1086:	39 f4       	brne	.+14     	; 0x1096 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1088:	f8 01       	movw	r30, r16
    108a:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    108c:	92 30       	cpi	r25, 0x02	; 2
    108e:	19 f0       	breq	.+6      	; 0x1096 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1090:	86 e0       	ldi	r24, 0x06	; 6
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    1094:	85 e0       	ldi	r24, 0x05	; 5
    1096:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1098:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	ff 90       	pop	r15
    10ac:	ef 90       	pop	r14
    10ae:	df 90       	pop	r13
    10b0:	cf 90       	pop	r12
    10b2:	08 95       	ret

000010b4 <USB_GetNextDescriptorComp>:
    10b4:	af 92       	push	r10
    10b6:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    10b8:	cf 92       	push	r12
    10ba:	df 92       	push	r13
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	7c 01       	movw	r14, r24
    10ca:	8b 01       	movw	r16, r22
    10cc:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    10ce:	28 c0       	rjmp	.+80     	; 0x1120 <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    10d0:	f8 01       	movw	r30, r16
    10d2:	c0 80       	ld	r12, Z
    10d4:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    10d6:	f6 01       	movw	r30, r12
    10d8:	80 81       	ld	r24, Z
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	9e 01       	movw	r18, r28
    10de:	8c 17       	cp	r24, r28
    10e0:	9d 07       	cpc	r25, r29
    10e2:	08 f4       	brcc	.+2      	; 0x10e6 <USB_GetNextDescriptorComp+0x32>
    10e4:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    10e6:	c6 01       	movw	r24, r12
    10e8:	82 0f       	add	r24, r18
    10ea:	93 1f       	adc	r25, r19
    10ec:	f8 01       	movw	r30, r16
    10ee:	91 83       	std	Z+1, r25	; 0x01
    10f0:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
    10f2:	f7 01       	movw	r30, r14
    10f4:	80 81       	ld	r24, Z
    10f6:	91 81       	ldd	r25, Z+1	; 0x01
    10f8:	82 1b       	sub	r24, r18
    10fa:	93 0b       	sbc	r25, r19
    10fc:	91 83       	std	Z+1, r25	; 0x01
    10fe:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1100:	f8 01       	movw	r30, r16
    1102:	80 81       	ld	r24, Z
    1104:	91 81       	ldd	r25, Z+1	; 0x01
    1106:	f5 01       	movw	r30, r10
    1108:	09 95       	icall
    110a:	82 30       	cpi	r24, 0x02	; 2
    110c:	49 f0       	breq	.+18     	; 0x1120 <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	69 f4       	brne	.+26     	; 0x112c <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
    1112:	f8 01       	movw	r30, r16
    1114:	d1 82       	std	Z+1, r13	; 0x01
    1116:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
    1118:	f7 01       	movw	r30, r14
    111a:	d1 83       	std	Z+1, r29	; 0x01
    111c:	c0 83       	st	Z, r28
    111e:	06 c0       	rjmp	.+12     	; 0x112c <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1120:	f7 01       	movw	r30, r14
    1122:	c0 81       	ld	r28, Z
    1124:	d1 81       	ldd	r29, Z+1	; 0x01
    1126:	20 97       	sbiw	r28, 0x00	; 0
    1128:	99 f6       	brne	.-90     	; 0x10d0 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    112a:	82 e0       	ldi	r24, 0x02	; 2
}
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	cf 90       	pop	r12
    113c:	bf 90       	pop	r11
    113e:	af 90       	pop	r10
    1140:	08 95       	ret

00001142 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1142:	08 95       	ret

00001144 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    114c:	c9 ee       	ldi	r28, 0xE9	; 233
    114e:	d3 e0       	ldi	r29, 0x03	; 3
    1150:	06 c0       	rjmp	.+12     	; 0x115e <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	6f db       	rcall	.-2338   	; 0x834 <USB_Host_WaitMS>
    1156:	88 23       	and	r24, r24
    1158:	c9 f4       	brne	.+50     	; 0x118c <USB_Host_WaitForIOS+0x48>
    115a:	21 97       	sbiw	r28, 0x01	; 1
    115c:	b1 f0       	breq	.+44     	; 0x118a <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    115e:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1160:	29 f4       	brne	.+10     	; 0x116c <USB_Host_WaitForIOS+0x28>
    1162:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1166:	83 ff       	sbrs	r24, 3
    1168:	f4 cf       	rjmp	.-24     	; 0x1152 <USB_Host_WaitForIOS+0xe>
    116a:	0d c0       	rjmp	.+26     	; 0x1186 <USB_Host_WaitForIOS+0x42>
    116c:	11 30       	cpi	r17, 0x01	; 1
    116e:	29 f4       	brne	.+10     	; 0x117a <USB_Host_WaitForIOS+0x36>
    1170:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1174:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1176:	ed cf       	rjmp	.-38     	; 0x1152 <USB_Host_WaitForIOS+0xe>
    1178:	06 c0       	rjmp	.+12     	; 0x1186 <USB_Host_WaitForIOS+0x42>
    117a:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    117c:	51 f7       	brne	.-44     	; 0x1152 <USB_Host_WaitForIOS+0xe>
    117e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1182:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1184:	e6 cf       	rjmp	.-52     	; 0x1152 <USB_Host_WaitForIOS+0xe>
    1186:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1188:	01 c0       	rjmp	.+2      	; 0x118c <USB_Host_WaitForIOS+0x48>
    118a:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    118c:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
    118e:	cf 91       	pop	r28
    1190:	1f 91       	pop	r17
    1192:	08 95       	ret

00001194 <USB_Host_SendControlRequest>:
    1194:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1196:	ff 92       	push	r15
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    11a2:	e0 90 9e 00 	lds	r14, 0x009E
    11a6:	ff 24       	eor	r15, r15
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	e8 22       	and	r14, r24
    11ac:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    11ae:	00 91 2c 01 	lds	r16, 0x012C
    11b2:	10 91 2d 01 	lds	r17, 0x012D
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    11b6:	80 91 9e 00 	lds	r24, 0x009E
    11ba:	81 60       	ori	r24, 0x01	; 1
    11bc:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	38 db       	rcall	.-2448   	; 0x834 <USB_Host_WaitMS>
    11c4:	88 23       	and	r24, r24
    11c6:	09 f0       	breq	.+2      	; 0x11ca <USB_Host_SendControlRequest+0x36>
    11c8:	ca c0       	rjmp	.+404    	; 0x135e <USB_Host_SendControlRequest+0x1ca>
    11ca:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11ce:	8f 7c       	andi	r24, 0xCF	; 207
    11d0:	80 93 aa 00 	sts	0x00AA, r24
    11d4:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    11d8:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    11dc:	8f 7e       	andi	r24, 0xEF	; 239
    11de:	80 93 a6 00 	sts	0x00A6, r24
    11e2:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11e6:	8f 7b       	andi	r24, 0xBF	; 191
    11e8:	80 93 a9 00 	sts	0x00A9, r24
    11ec:	88 e0       	ldi	r24, 0x08	; 8
    11ee:	e6 e2       	ldi	r30, 0x26	; 38
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    11f0:	f1 e0       	ldi	r31, 0x01	; 1
    11f2:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    11f4:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    11f8:	81 50       	subi	r24, 0x01	; 1
    11fa:	d9 f7       	brne	.-10     	; 0x11f2 <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    11fc:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1200:	87 77       	andi	r24, 0x77	; 119
    1202:	80 93 a6 00 	sts	0x00A6, r24
    1206:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1208:	9d df       	rcall	.-198    	; 0x1144 <USB_Host_WaitForIOS>
    120a:	88 23       	and	r24, r24
    120c:	09 f0       	breq	.+2      	; 0x1210 <USB_Host_SendControlRequest+0x7c>
    120e:	a7 c0       	rjmp	.+334    	; 0x135e <USB_Host_SendControlRequest+0x1ca>
    1210:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1214:	80 64       	ori	r24, 0x40	; 64
    1216:	80 93 a9 00 	sts	0x00A9, r24
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	0b db       	rcall	.-2538   	; 0x834 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    121e:	88 23       	and	r24, r24
    1220:	09 f0       	breq	.+2      	; 0x1224 <USB_Host_SendControlRequest+0x90>
    1222:	9d c0       	rjmp	.+314    	; 0x135e <USB_Host_SendControlRequest+0x1ca>
    1224:	80 91 26 01 	lds	r24, 0x0126
    1228:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    122a:	4f c0       	rjmp	.+158    	; 0x12ca <USB_Host_SendControlRequest+0x136>
    122c:	80 91 aa 00 	lds	r24, 0x00AA
    1230:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1232:	80 61       	ori	r24, 0x10	; 16
    1234:	80 93 aa 00 	sts	0x00AA, r24
    1238:	20 97       	sbiw	r28, 0x00	; 0
    123a:	61 f5       	brne	.+88     	; 0x1294 <USB_Host_SendControlRequest+0x100>
    123c:	2e c0       	rjmp	.+92     	; 0x129a <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    123e:	80 91 a9 00 	lds	r24, 0x00A9
    1242:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1244:	80 93 a9 00 	sts	0x00A9, r24
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	7c df       	rcall	.-264    	; 0x1144 <USB_Host_WaitForIOS>
    124c:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    124e:	09 f0       	breq	.+2      	; 0x1252 <USB_Host_SendControlRequest+0xbe>
    1250:	86 c0       	rjmp	.+268    	; 0x135e <USB_Host_SendControlRequest+0x1ca>
    1252:	80 91 f6 00 	lds	r24, 0x00F6
    1256:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	41 f4       	brne	.+16     	; 0x126e <USB_Host_SendControlRequest+0xda>
    125e:	00 e0       	ldi	r16, 0x00	; 0
    1260:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1262:	05 c0       	rjmp	.+10     	; 0x126e <USB_Host_SendControlRequest+0xda>
    1264:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
    1268:	89 93       	st	Y+, r24
    126a:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    126c:	10 40       	sbci	r17, 0x00	; 0
    126e:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
    1272:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	19 f0       	breq	.+6      	; 0x1280 <USB_Host_SendControlRequest+0xec>
    127a:	01 15       	cp	r16, r1
    127c:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    127e:	91 f7       	brne	.-28     	; 0x1264 <USB_Host_SendControlRequest+0xd0>
    1280:	80 91 a9 00 	lds	r24, 0x00A9
    1284:	80 64       	ori	r24, 0x40	; 64
    1286:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    128a:	80 91 a6 00 	lds	r24, 0x00A6
    128e:	8e 77       	andi	r24, 0x7E	; 126
    1290:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1294:	01 15       	cp	r16, r1
    1296:	11 05       	cpc	r17, r1
    1298:	91 f6       	brne	.-92     	; 0x123e <USB_Host_SendControlRequest+0xaa>
    129a:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    129e:	8f 7c       	andi	r24, 0xCF	; 207
    12a0:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    12a2:	80 93 aa 00 	sts	0x00AA, r24
    12a6:	80 91 a9 00 	lds	r24, 0x00A9
    12aa:	8f 7b       	andi	r24, 0xBF	; 191
    12ac:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12b0:	82 e0       	ldi	r24, 0x02	; 2
    12b2:	48 df       	rcall	.-368    	; 0x1144 <USB_Host_WaitForIOS>
    12b4:	88 23       	and	r24, r24
    12b6:	09 f0       	breq	.+2      	; 0x12ba <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    12b8:	52 c0       	rjmp	.+164    	; 0x135e <USB_Host_SendControlRequest+0x1ca>
    12ba:	80 91 a6 00 	lds	r24, 0x00A6
    12be:	8b 77       	andi	r24, 0x7B	; 123
    12c0:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    12c4:	82 e0       	ldi	r24, 0x02	; 2
    12c6:	3e df       	rcall	.-388    	; 0x1144 <USB_Host_WaitForIOS>
    12c8:	4a c0       	rjmp	.+148    	; 0x135e <USB_Host_SendControlRequest+0x1ca>
    12ca:	20 97       	sbiw	r28, 0x00	; 0
    12cc:	a1 f1       	breq	.+104    	; 0x1336 <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    12ce:	80 91 aa 00 	lds	r24, 0x00AA
    12d2:	8f 7c       	andi	r24, 0xCF	; 207
    12d4:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    12d6:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    12da:	80 91 a9 00 	lds	r24, 0x00A9
    12de:	8f 7b       	andi	r24, 0xBF	; 191
    12e0:	80 93 a9 00 	sts	0x00A9, r24
    12e4:	1c c0       	rjmp	.+56     	; 0x131e <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12e6:	2e df       	rcall	.-420    	; 0x1144 <USB_Host_WaitForIOS>
    12e8:	88 23       	and	r24, r24
    12ea:	c9 f5       	brne	.+114    	; 0x135e <USB_Host_SendControlRequest+0x1ca>
    12ec:	fe 01       	movw	r30, r28
    12ee:	07 c0       	rjmp	.+14     	; 0x12fe <USB_Host_SendControlRequest+0x16a>
    12f0:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    12f2:	ef 01       	movw	r28, r30
    12f4:	80 93 af 00 	sts	0x00AF, r24
    12f8:	01 50       	subi	r16, 0x01	; 1
    12fa:	10 40       	sbci	r17, 0x00	; 0
    12fc:	59 f0       	breq	.+22     	; 0x1314 <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    12fe:	ef 01       	movw	r28, r30
    1300:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1304:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    1308:	80 91 17 01 	lds	r24, 0x0117
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    130c:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    130e:	28 17       	cp	r18, r24
    1310:	39 07       	cpc	r19, r25
    1312:	70 f3       	brcs	.-36     	; 0x12f0 <USB_Host_SendControlRequest+0x15c>
    1314:	80 91 a6 00 	lds	r24, 0x00A6
    1318:	8b 77       	andi	r24, 0x7B	; 123
    131a:	80 93 a6 00 	sts	0x00A6, r24
    131e:	82 e0       	ldi	r24, 0x02	; 2
    1320:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1322:	11 05       	cpc	r17, r1
    1324:	01 f7       	brne	.-64     	; 0x12e6 <USB_Host_SendControlRequest+0x152>
    1326:	0e df       	rcall	.-484    	; 0x1144 <USB_Host_WaitForIOS>
    1328:	88 23       	and	r24, r24
    132a:	c9 f4       	brne	.+50     	; 0x135e <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    132c:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1330:	80 64       	ori	r24, 0x40	; 64
    1332:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1336:	80 91 aa 00 	lds	r24, 0x00AA
    133a:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    133c:	80 61       	ori	r24, 0x10	; 16
    133e:	80 93 aa 00 	sts	0x00AA, r24
    1342:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1346:	8f 7b       	andi	r24, 0xBF	; 191
    1348:	80 93 a9 00 	sts	0x00A9, r24
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	fa de       	rcall	.-524    	; 0x1144 <USB_Host_WaitForIOS>
    1350:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1352:	29 f4       	brne	.+10     	; 0x135e <USB_Host_SendControlRequest+0x1ca>
    1354:	90 91 a6 00 	lds	r25, 0x00A6
    1358:	9e 77       	andi	r25, 0x7E	; 126
    135a:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    135e:	90 91 a9 00 	lds	r25, 0x00A9
    1362:	90 64       	ori	r25, 0x40	; 64
    1364:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1368:	e1 14       	cp	r14, r1
    136a:	f1 04       	cpc	r15, r1
    136c:	29 f4       	brne	.+10     	; 0x1378 <USB_Host_SendControlRequest+0x1e4>
    136e:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1372:	9e 7f       	andi	r25, 0xFE	; 254
    1374:	90 93 9e 00 	sts	0x009E, r25
    1378:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    137a:	90 93 a8 00 	sts	0x00A8, r25
    137e:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    138a:	ff 90       	pop	r15
    138c:	ef 90       	pop	r14
    138e:	08 95       	ret

00001390 <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    1390:	cf 93       	push	r28
    1392:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1394:	10 92 26 01 	sts	0x0126, r1
    1398:	89 e0       	ldi	r24, 0x09	; 9
    139a:	80 93 27 01 	sts	0x0127, r24
    139e:	c0 93 28 01 	sts	0x0128, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    13a2:	10 92 29 01 	sts	0x0129, r1
    13a6:	10 92 2b 01 	sts	0x012B, r1
    13aa:	10 92 2a 01 	sts	0x012A, r1
    13ae:	10 92 2d 01 	sts	0x012D, r1
    13b2:	10 92 2c 01 	sts	0x012C, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13b6:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	ea de       	rcall	.-556    	; 0x1194 <USB_Host_SendControlRequest>
    13c0:	88 23       	and	r24, r24
    13c2:	49 f4       	brne	.+18     	; 0x13d6 <USB_Host_SetDeviceConfiguration+0x46>
    13c4:	c0 93 24 01 	sts	0x0124, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    13c8:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    13ca:	11 f0       	breq	.+4      	; 0x13d0 <USB_Host_SetDeviceConfiguration+0x40>
    13cc:	9b e0       	ldi	r25, 0x0B	; 11
    13ce:	01 c0       	rjmp	.+2      	; 0x13d2 <USB_Host_SetDeviceConfiguration+0x42>
    13d0:	9a e0       	ldi	r25, 0x0A	; 10
    13d2:	90 93 2e 01 	sts	0x012E, r25
    13d6:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    13d8:	08 95       	ret

000013da <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    13da:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    13dc:	c0 91 a7 00 	lds	r28, 0x00A7
    13e0:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    13e2:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13e6:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    13ea:	79 da       	rcall	.-2830   	; 0x8de <USB_Host_ProcessNextHostState>
    13ec:	c0 93 a7 00 	sts	0x00A7, r28
    13f0:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    13f2:	08 95       	ret

000013f4 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    13f4:	90 91 c8 00 	lds	r25, 0x00C8
    13f8:	95 ff       	sbrs	r25, 5
    13fa:	fc cf       	rjmp	.-8      	; 0x13f4 <Serial_putchar>
				UDR1 = DataByte;
    13fc:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	08 95       	ret

00001406 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1406:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    140a:	87 ff       	sbrs	r24, 7
    140c:	08 c0       	rjmp	.+16     	; 0x141e <Serial_getchar+0x18>
    140e:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1412:	87 ff       	sbrs	r24, 7
    1414:	07 c0       	rjmp	.+14     	; 0x1424 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1416:	80 91 ce 00 	lds	r24, 0x00CE
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	08 95       	ret
	  return _FDEV_EOF;
    141e:	8e ef       	ldi	r24, 0xFE	; 254
    1420:	9f ef       	ldi	r25, 0xFF	; 255
    1422:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1424:	8f ef       	ldi	r24, 0xFF	; 255
    1426:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1428:	08 95       	ret

0000142a <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    142a:	fc 01       	movw	r30, r24
	if (!(Stream))
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	51 f4       	brne	.+20     	; 0x1444 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1430:	ef e2       	ldi	r30, 0x2F	; 47
    1432:	f1 e0       	ldi	r31, 0x01	; 1
    1434:	f0 93 3e 01 	sts	0x013E, r31
    1438:	e0 93 3d 01 	sts	0x013D, r30
		stdout = Stream;
    143c:	f0 93 40 01 	sts	0x0140, r31
    1440:	e0 93 3f 01 	sts	0x013F, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1444:	8e e0       	ldi	r24, 0x0E	; 14
    1446:	df 01       	movw	r26, r30
    1448:	1d 92       	st	X+, r1
    144a:	8a 95       	dec	r24
    144c:	e9 f7       	brne	.-6      	; 0x1448 <Serial_CreateStream+0x1e>
    144e:	83 e0       	ldi	r24, 0x03	; 3
    1450:	83 83       	std	Z+3, r24	; 0x03
    1452:	8a ef       	ldi	r24, 0xFA	; 250
    1454:	99 e0       	ldi	r25, 0x09	; 9
    1456:	91 87       	std	Z+9, r25	; 0x09
    1458:	80 87       	std	Z+8, r24	; 0x08
    145a:	83 e0       	ldi	r24, 0x03	; 3
    145c:	9a e0       	ldi	r25, 0x0A	; 10
    145e:	93 87       	std	Z+11, r25	; 0x0b
    1460:	82 87       	std	Z+10, r24	; 0x0a
}
    1462:	08 95       	ret

00001464 <printf_P>:
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	fe 01       	movw	r30, r28
    146e:	35 96       	adiw	r30, 0x05	; 5
    1470:	61 91       	ld	r22, Z+
    1472:	71 91       	ld	r23, Z+
    1474:	80 91 3f 01 	lds	r24, 0x013F
    1478:	90 91 40 01 	lds	r25, 0x0140
    147c:	dc 01       	movw	r26, r24
    147e:	13 96       	adiw	r26, 0x03	; 3
    1480:	2c 91       	ld	r18, X
    1482:	13 97       	sbiw	r26, 0x03	; 3
    1484:	28 60       	ori	r18, 0x08	; 8
    1486:	13 96       	adiw	r26, 0x03	; 3
    1488:	2c 93       	st	X, r18
    148a:	af 01       	movw	r20, r30
    148c:	39 d0       	rcall	.+114    	; 0x1500 <vfprintf>
    148e:	e0 91 3f 01 	lds	r30, 0x013F
    1492:	f0 91 40 01 	lds	r31, 0x0140
    1496:	23 81       	ldd	r18, Z+3	; 0x03
    1498:	27 7f       	andi	r18, 0xF7	; 247
    149a:	23 83       	std	Z+3, r18	; 0x03
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	08 95       	ret

000014a2 <puts_P>:
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	8c 01       	movw	r16, r24
    14ac:	e0 91 3f 01 	lds	r30, 0x013F
    14b0:	f0 91 40 01 	lds	r31, 0x0140
    14b4:	83 81       	ldd	r24, Z+3	; 0x03
    14b6:	81 ff       	sbrs	r24, 1
    14b8:	1b c0       	rjmp	.+54     	; 0x14f0 <puts_P+0x4e>
    14ba:	c0 e0       	ldi	r28, 0x00	; 0
    14bc:	d0 e0       	ldi	r29, 0x00	; 0
    14be:	07 c0       	rjmp	.+14     	; 0x14ce <puts_P+0x2c>
    14c0:	09 95       	icall
    14c2:	00 97       	sbiw	r24, 0x00	; 0
    14c4:	11 f0       	breq	.+4      	; 0x14ca <puts_P+0x28>
    14c6:	cf ef       	ldi	r28, 0xFF	; 255
    14c8:	df ef       	ldi	r29, 0xFF	; 255
    14ca:	0f 5f       	subi	r16, 0xFF	; 255
    14cc:	1f 4f       	sbci	r17, 0xFF	; 255
    14ce:	f8 01       	movw	r30, r16
    14d0:	84 91       	lpm	r24, Z
    14d2:	60 91 3f 01 	lds	r22, 0x013F
    14d6:	70 91 40 01 	lds	r23, 0x0140
    14da:	db 01       	movw	r26, r22
    14dc:	18 96       	adiw	r26, 0x08	; 8
    14de:	ed 91       	ld	r30, X+
    14e0:	fc 91       	ld	r31, X
    14e2:	19 97       	sbiw	r26, 0x09	; 9
    14e4:	88 23       	and	r24, r24
    14e6:	61 f7       	brne	.-40     	; 0x14c0 <puts_P+0x1e>
    14e8:	8a e0       	ldi	r24, 0x0A	; 10
    14ea:	09 95       	icall
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	11 f0       	breq	.+4      	; 0x14f4 <puts_P+0x52>
    14f0:	cf ef       	ldi	r28, 0xFF	; 255
    14f2:	df ef       	ldi	r29, 0xFF	; 255
    14f4:	ce 01       	movw	r24, r28
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	1f 91       	pop	r17
    14fc:	0f 91       	pop	r16
    14fe:	08 95       	ret

00001500 <vfprintf>:
    1500:	2f 92       	push	r2
    1502:	3f 92       	push	r3
    1504:	4f 92       	push	r4
    1506:	5f 92       	push	r5
    1508:	6f 92       	push	r6
    150a:	7f 92       	push	r7
    150c:	8f 92       	push	r8
    150e:	9f 92       	push	r9
    1510:	af 92       	push	r10
    1512:	bf 92       	push	r11
    1514:	cf 92       	push	r12
    1516:	df 92       	push	r13
    1518:	ef 92       	push	r14
    151a:	ff 92       	push	r15
    151c:	0f 93       	push	r16
    151e:	1f 93       	push	r17
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	2d 97       	sbiw	r28, 0x0d	; 13
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	3c 01       	movw	r6, r24
    1536:	7d 87       	std	Y+13, r23	; 0x0d
    1538:	6c 87       	std	Y+12, r22	; 0x0c
    153a:	5a 01       	movw	r10, r20
    153c:	fc 01       	movw	r30, r24
    153e:	17 82       	std	Z+7, r1	; 0x07
    1540:	16 82       	std	Z+6, r1	; 0x06
    1542:	83 81       	ldd	r24, Z+3	; 0x03
    1544:	81 ff       	sbrs	r24, 1
    1546:	bb c1       	rjmp	.+886    	; 0x18be <vfprintf+0x3be>
    1548:	2e 01       	movw	r4, r28
    154a:	08 94       	sec
    154c:	41 1c       	adc	r4, r1
    154e:	51 1c       	adc	r5, r1
    1550:	f3 01       	movw	r30, r6
    1552:	93 81       	ldd	r25, Z+3	; 0x03
    1554:	ec 85       	ldd	r30, Y+12	; 0x0c
    1556:	fd 85       	ldd	r31, Y+13	; 0x0d
    1558:	93 fd       	sbrc	r25, 3
    155a:	85 91       	lpm	r24, Z+
    155c:	93 ff       	sbrs	r25, 3
    155e:	81 91       	ld	r24, Z+
    1560:	fd 87       	std	Y+13, r31	; 0x0d
    1562:	ec 87       	std	Y+12, r30	; 0x0c
    1564:	88 23       	and	r24, r24
    1566:	09 f4       	brne	.+2      	; 0x156a <vfprintf+0x6a>
    1568:	a6 c1       	rjmp	.+844    	; 0x18b6 <vfprintf+0x3b6>
    156a:	85 32       	cpi	r24, 0x25	; 37
    156c:	41 f4       	brne	.+16     	; 0x157e <vfprintf+0x7e>
    156e:	93 fd       	sbrc	r25, 3
    1570:	85 91       	lpm	r24, Z+
    1572:	93 ff       	sbrs	r25, 3
    1574:	81 91       	ld	r24, Z+
    1576:	fd 87       	std	Y+13, r31	; 0x0d
    1578:	ec 87       	std	Y+12, r30	; 0x0c
    157a:	85 32       	cpi	r24, 0x25	; 37
    157c:	21 f4       	brne	.+8      	; 0x1586 <vfprintf+0x86>
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	b3 01       	movw	r22, r6
    1582:	ce d1       	rcall	.+924    	; 0x1920 <fputc>
    1584:	e5 cf       	rjmp	.-54     	; 0x1550 <vfprintf+0x50>
    1586:	ff 24       	eor	r15, r15
    1588:	ee 24       	eor	r14, r14
    158a:	10 e0       	ldi	r17, 0x00	; 0
    158c:	10 32       	cpi	r17, 0x20	; 32
    158e:	b0 f4       	brcc	.+44     	; 0x15bc <vfprintf+0xbc>
    1590:	8b 32       	cpi	r24, 0x2B	; 43
    1592:	69 f0       	breq	.+26     	; 0x15ae <vfprintf+0xae>
    1594:	8c 32       	cpi	r24, 0x2C	; 44
    1596:	28 f4       	brcc	.+10     	; 0x15a2 <vfprintf+0xa2>
    1598:	80 32       	cpi	r24, 0x20	; 32
    159a:	51 f0       	breq	.+20     	; 0x15b0 <vfprintf+0xb0>
    159c:	83 32       	cpi	r24, 0x23	; 35
    159e:	71 f4       	brne	.+28     	; 0x15bc <vfprintf+0xbc>
    15a0:	0b c0       	rjmp	.+22     	; 0x15b8 <vfprintf+0xb8>
    15a2:	8d 32       	cpi	r24, 0x2D	; 45
    15a4:	39 f0       	breq	.+14     	; 0x15b4 <vfprintf+0xb4>
    15a6:	80 33       	cpi	r24, 0x30	; 48
    15a8:	49 f4       	brne	.+18     	; 0x15bc <vfprintf+0xbc>
    15aa:	11 60       	ori	r17, 0x01	; 1
    15ac:	2c c0       	rjmp	.+88     	; 0x1606 <vfprintf+0x106>
    15ae:	12 60       	ori	r17, 0x02	; 2
    15b0:	14 60       	ori	r17, 0x04	; 4
    15b2:	29 c0       	rjmp	.+82     	; 0x1606 <vfprintf+0x106>
    15b4:	18 60       	ori	r17, 0x08	; 8
    15b6:	27 c0       	rjmp	.+78     	; 0x1606 <vfprintf+0x106>
    15b8:	10 61       	ori	r17, 0x10	; 16
    15ba:	25 c0       	rjmp	.+74     	; 0x1606 <vfprintf+0x106>
    15bc:	17 fd       	sbrc	r17, 7
    15be:	2e c0       	rjmp	.+92     	; 0x161c <vfprintf+0x11c>
    15c0:	28 2f       	mov	r18, r24
    15c2:	20 53       	subi	r18, 0x30	; 48
    15c4:	2a 30       	cpi	r18, 0x0A	; 10
    15c6:	98 f4       	brcc	.+38     	; 0x15ee <vfprintf+0xee>
    15c8:	16 ff       	sbrs	r17, 6
    15ca:	08 c0       	rjmp	.+16     	; 0x15dc <vfprintf+0xdc>
    15cc:	8f 2d       	mov	r24, r15
    15ce:	88 0f       	add	r24, r24
    15d0:	f8 2e       	mov	r15, r24
    15d2:	ff 0c       	add	r15, r15
    15d4:	ff 0c       	add	r15, r15
    15d6:	f8 0e       	add	r15, r24
    15d8:	f2 0e       	add	r15, r18
    15da:	15 c0       	rjmp	.+42     	; 0x1606 <vfprintf+0x106>
    15dc:	8e 2d       	mov	r24, r14
    15de:	88 0f       	add	r24, r24
    15e0:	e8 2e       	mov	r14, r24
    15e2:	ee 0c       	add	r14, r14
    15e4:	ee 0c       	add	r14, r14
    15e6:	e8 0e       	add	r14, r24
    15e8:	e2 0e       	add	r14, r18
    15ea:	10 62       	ori	r17, 0x20	; 32
    15ec:	0c c0       	rjmp	.+24     	; 0x1606 <vfprintf+0x106>
    15ee:	8e 32       	cpi	r24, 0x2E	; 46
    15f0:	21 f4       	brne	.+8      	; 0x15fa <vfprintf+0xfa>
    15f2:	16 fd       	sbrc	r17, 6
    15f4:	60 c1       	rjmp	.+704    	; 0x18b6 <vfprintf+0x3b6>
    15f6:	10 64       	ori	r17, 0x40	; 64
    15f8:	06 c0       	rjmp	.+12     	; 0x1606 <vfprintf+0x106>
    15fa:	8c 36       	cpi	r24, 0x6C	; 108
    15fc:	11 f4       	brne	.+4      	; 0x1602 <vfprintf+0x102>
    15fe:	10 68       	ori	r17, 0x80	; 128
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <vfprintf+0x106>
    1602:	88 36       	cpi	r24, 0x68	; 104
    1604:	59 f4       	brne	.+22     	; 0x161c <vfprintf+0x11c>
    1606:	ec 85       	ldd	r30, Y+12	; 0x0c
    1608:	fd 85       	ldd	r31, Y+13	; 0x0d
    160a:	93 fd       	sbrc	r25, 3
    160c:	85 91       	lpm	r24, Z+
    160e:	93 ff       	sbrs	r25, 3
    1610:	81 91       	ld	r24, Z+
    1612:	fd 87       	std	Y+13, r31	; 0x0d
    1614:	ec 87       	std	Y+12, r30	; 0x0c
    1616:	88 23       	and	r24, r24
    1618:	09 f0       	breq	.+2      	; 0x161c <vfprintf+0x11c>
    161a:	b8 cf       	rjmp	.-144    	; 0x158c <vfprintf+0x8c>
    161c:	98 2f       	mov	r25, r24
    161e:	95 54       	subi	r25, 0x45	; 69
    1620:	93 30       	cpi	r25, 0x03	; 3
    1622:	18 f0       	brcs	.+6      	; 0x162a <vfprintf+0x12a>
    1624:	90 52       	subi	r25, 0x20	; 32
    1626:	93 30       	cpi	r25, 0x03	; 3
    1628:	38 f4       	brcc	.+14     	; 0x1638 <vfprintf+0x138>
    162a:	24 e0       	ldi	r18, 0x04	; 4
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	a2 0e       	add	r10, r18
    1630:	b3 1e       	adc	r11, r19
    1632:	3f e3       	ldi	r19, 0x3F	; 63
    1634:	39 83       	std	Y+1, r19	; 0x01
    1636:	0f c0       	rjmp	.+30     	; 0x1656 <vfprintf+0x156>
    1638:	83 36       	cpi	r24, 0x63	; 99
    163a:	31 f0       	breq	.+12     	; 0x1648 <vfprintf+0x148>
    163c:	83 37       	cpi	r24, 0x73	; 115
    163e:	81 f0       	breq	.+32     	; 0x1660 <vfprintf+0x160>
    1640:	83 35       	cpi	r24, 0x53	; 83
    1642:	09 f0       	breq	.+2      	; 0x1646 <vfprintf+0x146>
    1644:	56 c0       	rjmp	.+172    	; 0x16f2 <vfprintf+0x1f2>
    1646:	21 c0       	rjmp	.+66     	; 0x168a <vfprintf+0x18a>
    1648:	f5 01       	movw	r30, r10
    164a:	80 81       	ld	r24, Z
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	22 e0       	ldi	r18, 0x02	; 2
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	a2 0e       	add	r10, r18
    1654:	b3 1e       	adc	r11, r19
    1656:	21 e0       	ldi	r18, 0x01	; 1
    1658:	c2 2e       	mov	r12, r18
    165a:	d1 2c       	mov	r13, r1
    165c:	42 01       	movw	r8, r4
    165e:	13 c0       	rjmp	.+38     	; 0x1686 <vfprintf+0x186>
    1660:	92 e0       	ldi	r25, 0x02	; 2
    1662:	29 2e       	mov	r2, r25
    1664:	31 2c       	mov	r3, r1
    1666:	2a 0c       	add	r2, r10
    1668:	3b 1c       	adc	r3, r11
    166a:	f5 01       	movw	r30, r10
    166c:	80 80       	ld	r8, Z
    166e:	91 80       	ldd	r9, Z+1	; 0x01
    1670:	16 ff       	sbrs	r17, 6
    1672:	03 c0       	rjmp	.+6      	; 0x167a <vfprintf+0x17a>
    1674:	6f 2d       	mov	r22, r15
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	02 c0       	rjmp	.+4      	; 0x167e <vfprintf+0x17e>
    167a:	6f ef       	ldi	r22, 0xFF	; 255
    167c:	7f ef       	ldi	r23, 0xFF	; 255
    167e:	c4 01       	movw	r24, r8
    1680:	44 d1       	rcall	.+648    	; 0x190a <strnlen>
    1682:	6c 01       	movw	r12, r24
    1684:	51 01       	movw	r10, r2
    1686:	1f 77       	andi	r17, 0x7F	; 127
    1688:	14 c0       	rjmp	.+40     	; 0x16b2 <vfprintf+0x1b2>
    168a:	82 e0       	ldi	r24, 0x02	; 2
    168c:	28 2e       	mov	r2, r24
    168e:	31 2c       	mov	r3, r1
    1690:	2a 0c       	add	r2, r10
    1692:	3b 1c       	adc	r3, r11
    1694:	f5 01       	movw	r30, r10
    1696:	80 80       	ld	r8, Z
    1698:	91 80       	ldd	r9, Z+1	; 0x01
    169a:	16 ff       	sbrs	r17, 6
    169c:	03 c0       	rjmp	.+6      	; 0x16a4 <vfprintf+0x1a4>
    169e:	6f 2d       	mov	r22, r15
    16a0:	70 e0       	ldi	r23, 0x00	; 0
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <vfprintf+0x1a8>
    16a4:	6f ef       	ldi	r22, 0xFF	; 255
    16a6:	7f ef       	ldi	r23, 0xFF	; 255
    16a8:	c4 01       	movw	r24, r8
    16aa:	24 d1       	rcall	.+584    	; 0x18f4 <strnlen_P>
    16ac:	6c 01       	movw	r12, r24
    16ae:	10 68       	ori	r17, 0x80	; 128
    16b0:	51 01       	movw	r10, r2
    16b2:	13 fd       	sbrc	r17, 3
    16b4:	1a c0       	rjmp	.+52     	; 0x16ea <vfprintf+0x1ea>
    16b6:	05 c0       	rjmp	.+10     	; 0x16c2 <vfprintf+0x1c2>
    16b8:	80 e2       	ldi	r24, 0x20	; 32
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	b3 01       	movw	r22, r6
    16be:	30 d1       	rcall	.+608    	; 0x1920 <fputc>
    16c0:	ea 94       	dec	r14
    16c2:	8e 2d       	mov	r24, r14
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	c8 16       	cp	r12, r24
    16c8:	d9 06       	cpc	r13, r25
    16ca:	b0 f3       	brcs	.-20     	; 0x16b8 <vfprintf+0x1b8>
    16cc:	0e c0       	rjmp	.+28     	; 0x16ea <vfprintf+0x1ea>
    16ce:	f4 01       	movw	r30, r8
    16d0:	17 fd       	sbrc	r17, 7
    16d2:	85 91       	lpm	r24, Z+
    16d4:	17 ff       	sbrs	r17, 7
    16d6:	81 91       	ld	r24, Z+
    16d8:	4f 01       	movw	r8, r30
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	b3 01       	movw	r22, r6
    16de:	20 d1       	rcall	.+576    	; 0x1920 <fputc>
    16e0:	e1 10       	cpse	r14, r1
    16e2:	ea 94       	dec	r14
    16e4:	08 94       	sec
    16e6:	c1 08       	sbc	r12, r1
    16e8:	d1 08       	sbc	r13, r1
    16ea:	c1 14       	cp	r12, r1
    16ec:	d1 04       	cpc	r13, r1
    16ee:	79 f7       	brne	.-34     	; 0x16ce <vfprintf+0x1ce>
    16f0:	df c0       	rjmp	.+446    	; 0x18b0 <vfprintf+0x3b0>
    16f2:	84 36       	cpi	r24, 0x64	; 100
    16f4:	11 f0       	breq	.+4      	; 0x16fa <vfprintf+0x1fa>
    16f6:	89 36       	cpi	r24, 0x69	; 105
    16f8:	49 f5       	brne	.+82     	; 0x174c <vfprintf+0x24c>
    16fa:	f5 01       	movw	r30, r10
    16fc:	17 ff       	sbrs	r17, 7
    16fe:	07 c0       	rjmp	.+14     	; 0x170e <vfprintf+0x20e>
    1700:	80 81       	ld	r24, Z
    1702:	91 81       	ldd	r25, Z+1	; 0x01
    1704:	a2 81       	ldd	r26, Z+2	; 0x02
    1706:	b3 81       	ldd	r27, Z+3	; 0x03
    1708:	24 e0       	ldi	r18, 0x04	; 4
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	08 c0       	rjmp	.+16     	; 0x171e <vfprintf+0x21e>
    170e:	80 81       	ld	r24, Z
    1710:	91 81       	ldd	r25, Z+1	; 0x01
    1712:	aa 27       	eor	r26, r26
    1714:	97 fd       	sbrc	r25, 7
    1716:	a0 95       	com	r26
    1718:	ba 2f       	mov	r27, r26
    171a:	22 e0       	ldi	r18, 0x02	; 2
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	a2 0e       	add	r10, r18
    1720:	b3 1e       	adc	r11, r19
    1722:	01 2f       	mov	r16, r17
    1724:	0f 76       	andi	r16, 0x6F	; 111
    1726:	b7 ff       	sbrs	r27, 7
    1728:	08 c0       	rjmp	.+16     	; 0x173a <vfprintf+0x23a>
    172a:	b0 95       	com	r27
    172c:	a0 95       	com	r26
    172e:	90 95       	com	r25
    1730:	81 95       	neg	r24
    1732:	9f 4f       	sbci	r25, 0xFF	; 255
    1734:	af 4f       	sbci	r26, 0xFF	; 255
    1736:	bf 4f       	sbci	r27, 0xFF	; 255
    1738:	00 68       	ori	r16, 0x80	; 128
    173a:	bc 01       	movw	r22, r24
    173c:	cd 01       	movw	r24, r26
    173e:	a2 01       	movw	r20, r4
    1740:	2a e0       	ldi	r18, 0x0A	; 10
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	19 d1       	rcall	.+562    	; 0x1978 <__ultoa_invert>
    1746:	d8 2e       	mov	r13, r24
    1748:	d4 18       	sub	r13, r4
    174a:	3e c0       	rjmp	.+124    	; 0x17c8 <vfprintf+0x2c8>
    174c:	85 37       	cpi	r24, 0x75	; 117
    174e:	21 f4       	brne	.+8      	; 0x1758 <vfprintf+0x258>
    1750:	1f 7e       	andi	r17, 0xEF	; 239
    1752:	2a e0       	ldi	r18, 0x0A	; 10
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	20 c0       	rjmp	.+64     	; 0x1798 <vfprintf+0x298>
    1758:	19 7f       	andi	r17, 0xF9	; 249
    175a:	8f 36       	cpi	r24, 0x6F	; 111
    175c:	a9 f0       	breq	.+42     	; 0x1788 <vfprintf+0x288>
    175e:	80 37       	cpi	r24, 0x70	; 112
    1760:	20 f4       	brcc	.+8      	; 0x176a <vfprintf+0x26a>
    1762:	88 35       	cpi	r24, 0x58	; 88
    1764:	09 f0       	breq	.+2      	; 0x1768 <vfprintf+0x268>
    1766:	a7 c0       	rjmp	.+334    	; 0x18b6 <vfprintf+0x3b6>
    1768:	0b c0       	rjmp	.+22     	; 0x1780 <vfprintf+0x280>
    176a:	80 37       	cpi	r24, 0x70	; 112
    176c:	21 f0       	breq	.+8      	; 0x1776 <vfprintf+0x276>
    176e:	88 37       	cpi	r24, 0x78	; 120
    1770:	09 f0       	breq	.+2      	; 0x1774 <vfprintf+0x274>
    1772:	a1 c0       	rjmp	.+322    	; 0x18b6 <vfprintf+0x3b6>
    1774:	01 c0       	rjmp	.+2      	; 0x1778 <vfprintf+0x278>
    1776:	10 61       	ori	r17, 0x10	; 16
    1778:	14 ff       	sbrs	r17, 4
    177a:	09 c0       	rjmp	.+18     	; 0x178e <vfprintf+0x28e>
    177c:	14 60       	ori	r17, 0x04	; 4
    177e:	07 c0       	rjmp	.+14     	; 0x178e <vfprintf+0x28e>
    1780:	14 ff       	sbrs	r17, 4
    1782:	08 c0       	rjmp	.+16     	; 0x1794 <vfprintf+0x294>
    1784:	16 60       	ori	r17, 0x06	; 6
    1786:	06 c0       	rjmp	.+12     	; 0x1794 <vfprintf+0x294>
    1788:	28 e0       	ldi	r18, 0x08	; 8
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	05 c0       	rjmp	.+10     	; 0x1798 <vfprintf+0x298>
    178e:	20 e1       	ldi	r18, 0x10	; 16
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <vfprintf+0x298>
    1794:	20 e1       	ldi	r18, 0x10	; 16
    1796:	32 e0       	ldi	r19, 0x02	; 2
    1798:	f5 01       	movw	r30, r10
    179a:	17 ff       	sbrs	r17, 7
    179c:	07 c0       	rjmp	.+14     	; 0x17ac <vfprintf+0x2ac>
    179e:	60 81       	ld	r22, Z
    17a0:	71 81       	ldd	r23, Z+1	; 0x01
    17a2:	82 81       	ldd	r24, Z+2	; 0x02
    17a4:	93 81       	ldd	r25, Z+3	; 0x03
    17a6:	44 e0       	ldi	r20, 0x04	; 4
    17a8:	50 e0       	ldi	r21, 0x00	; 0
    17aa:	06 c0       	rjmp	.+12     	; 0x17b8 <vfprintf+0x2b8>
    17ac:	60 81       	ld	r22, Z
    17ae:	71 81       	ldd	r23, Z+1	; 0x01
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	42 e0       	ldi	r20, 0x02	; 2
    17b6:	50 e0       	ldi	r21, 0x00	; 0
    17b8:	a4 0e       	add	r10, r20
    17ba:	b5 1e       	adc	r11, r21
    17bc:	a2 01       	movw	r20, r4
    17be:	dc d0       	rcall	.+440    	; 0x1978 <__ultoa_invert>
    17c0:	d8 2e       	mov	r13, r24
    17c2:	d4 18       	sub	r13, r4
    17c4:	01 2f       	mov	r16, r17
    17c6:	0f 77       	andi	r16, 0x7F	; 127
    17c8:	06 ff       	sbrs	r16, 6
    17ca:	09 c0       	rjmp	.+18     	; 0x17de <vfprintf+0x2de>
    17cc:	0e 7f       	andi	r16, 0xFE	; 254
    17ce:	df 14       	cp	r13, r15
    17d0:	30 f4       	brcc	.+12     	; 0x17de <vfprintf+0x2de>
    17d2:	04 ff       	sbrs	r16, 4
    17d4:	06 c0       	rjmp	.+12     	; 0x17e2 <vfprintf+0x2e2>
    17d6:	02 fd       	sbrc	r16, 2
    17d8:	04 c0       	rjmp	.+8      	; 0x17e2 <vfprintf+0x2e2>
    17da:	0f 7e       	andi	r16, 0xEF	; 239
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <vfprintf+0x2e2>
    17de:	1d 2d       	mov	r17, r13
    17e0:	01 c0       	rjmp	.+2      	; 0x17e4 <vfprintf+0x2e4>
    17e2:	1f 2d       	mov	r17, r15
    17e4:	80 2f       	mov	r24, r16
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	04 ff       	sbrs	r16, 4
    17ea:	0c c0       	rjmp	.+24     	; 0x1804 <vfprintf+0x304>
    17ec:	fe 01       	movw	r30, r28
    17ee:	ed 0d       	add	r30, r13
    17f0:	f1 1d       	adc	r31, r1
    17f2:	20 81       	ld	r18, Z
    17f4:	20 33       	cpi	r18, 0x30	; 48
    17f6:	11 f4       	brne	.+4      	; 0x17fc <vfprintf+0x2fc>
    17f8:	09 7e       	andi	r16, 0xE9	; 233
    17fa:	09 c0       	rjmp	.+18     	; 0x180e <vfprintf+0x30e>
    17fc:	02 ff       	sbrs	r16, 2
    17fe:	06 c0       	rjmp	.+12     	; 0x180c <vfprintf+0x30c>
    1800:	1e 5f       	subi	r17, 0xFE	; 254
    1802:	05 c0       	rjmp	.+10     	; 0x180e <vfprintf+0x30e>
    1804:	86 78       	andi	r24, 0x86	; 134
    1806:	90 70       	andi	r25, 0x00	; 0
    1808:	00 97       	sbiw	r24, 0x00	; 0
    180a:	09 f0       	breq	.+2      	; 0x180e <vfprintf+0x30e>
    180c:	1f 5f       	subi	r17, 0xFF	; 255
    180e:	80 2e       	mov	r8, r16
    1810:	99 24       	eor	r9, r9
    1812:	03 fd       	sbrc	r16, 3
    1814:	11 c0       	rjmp	.+34     	; 0x1838 <vfprintf+0x338>
    1816:	00 ff       	sbrs	r16, 0
    1818:	0c c0       	rjmp	.+24     	; 0x1832 <vfprintf+0x332>
    181a:	fd 2c       	mov	r15, r13
    181c:	1e 15       	cp	r17, r14
    181e:	48 f4       	brcc	.+18     	; 0x1832 <vfprintf+0x332>
    1820:	fe 0c       	add	r15, r14
    1822:	f1 1a       	sub	r15, r17
    1824:	1e 2d       	mov	r17, r14
    1826:	05 c0       	rjmp	.+10     	; 0x1832 <vfprintf+0x332>
    1828:	80 e2       	ldi	r24, 0x20	; 32
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	b3 01       	movw	r22, r6
    182e:	78 d0       	rcall	.+240    	; 0x1920 <fputc>
    1830:	1f 5f       	subi	r17, 0xFF	; 255
    1832:	1e 15       	cp	r17, r14
    1834:	c8 f3       	brcs	.-14     	; 0x1828 <vfprintf+0x328>
    1836:	04 c0       	rjmp	.+8      	; 0x1840 <vfprintf+0x340>
    1838:	1e 15       	cp	r17, r14
    183a:	10 f4       	brcc	.+4      	; 0x1840 <vfprintf+0x340>
    183c:	e1 1a       	sub	r14, r17
    183e:	01 c0       	rjmp	.+2      	; 0x1842 <vfprintf+0x342>
    1840:	ee 24       	eor	r14, r14
    1842:	84 fe       	sbrs	r8, 4
    1844:	0e c0       	rjmp	.+28     	; 0x1862 <vfprintf+0x362>
    1846:	80 e3       	ldi	r24, 0x30	; 48
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	b3 01       	movw	r22, r6
    184c:	69 d0       	rcall	.+210    	; 0x1920 <fputc>
    184e:	82 fe       	sbrs	r8, 2
    1850:	1d c0       	rjmp	.+58     	; 0x188c <vfprintf+0x38c>
    1852:	81 fe       	sbrs	r8, 1
    1854:	03 c0       	rjmp	.+6      	; 0x185c <vfprintf+0x35c>
    1856:	88 e5       	ldi	r24, 0x58	; 88
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	10 c0       	rjmp	.+32     	; 0x187c <vfprintf+0x37c>
    185c:	88 e7       	ldi	r24, 0x78	; 120
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0d c0       	rjmp	.+26     	; 0x187c <vfprintf+0x37c>
    1862:	c4 01       	movw	r24, r8
    1864:	86 78       	andi	r24, 0x86	; 134
    1866:	90 70       	andi	r25, 0x00	; 0
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	81 f0       	breq	.+32     	; 0x188c <vfprintf+0x38c>
    186c:	81 fc       	sbrc	r8, 1
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <vfprintf+0x374>
    1870:	80 e2       	ldi	r24, 0x20	; 32
    1872:	01 c0       	rjmp	.+2      	; 0x1876 <vfprintf+0x376>
    1874:	8b e2       	ldi	r24, 0x2B	; 43
    1876:	07 fd       	sbrc	r16, 7
    1878:	8d e2       	ldi	r24, 0x2D	; 45
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	b3 01       	movw	r22, r6
    187e:	50 d0       	rcall	.+160    	; 0x1920 <fputc>
    1880:	05 c0       	rjmp	.+10     	; 0x188c <vfprintf+0x38c>
    1882:	80 e3       	ldi	r24, 0x30	; 48
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	b3 01       	movw	r22, r6
    1888:	4b d0       	rcall	.+150    	; 0x1920 <fputc>
    188a:	fa 94       	dec	r15
    188c:	df 14       	cp	r13, r15
    188e:	c8 f3       	brcs	.-14     	; 0x1882 <vfprintf+0x382>
    1890:	da 94       	dec	r13
    1892:	f2 01       	movw	r30, r4
    1894:	ed 0d       	add	r30, r13
    1896:	f1 1d       	adc	r31, r1
    1898:	80 81       	ld	r24, Z
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	b3 01       	movw	r22, r6
    189e:	40 d0       	rcall	.+128    	; 0x1920 <fputc>
    18a0:	dd 20       	and	r13, r13
    18a2:	b1 f7       	brne	.-20     	; 0x1890 <vfprintf+0x390>
    18a4:	05 c0       	rjmp	.+10     	; 0x18b0 <vfprintf+0x3b0>
    18a6:	80 e2       	ldi	r24, 0x20	; 32
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	b3 01       	movw	r22, r6
    18ac:	39 d0       	rcall	.+114    	; 0x1920 <fputc>
    18ae:	ea 94       	dec	r14
    18b0:	ee 20       	and	r14, r14
    18b2:	c9 f7       	brne	.-14     	; 0x18a6 <vfprintf+0x3a6>
    18b4:	4d ce       	rjmp	.-870    	; 0x1550 <vfprintf+0x50>
    18b6:	f3 01       	movw	r30, r6
    18b8:	86 81       	ldd	r24, Z+6	; 0x06
    18ba:	97 81       	ldd	r25, Z+7	; 0x07
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <vfprintf+0x3c2>
    18be:	8f ef       	ldi	r24, 0xFF	; 255
    18c0:	9f ef       	ldi	r25, 0xFF	; 255
    18c2:	2d 96       	adiw	r28, 0x0d	; 13
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	cd bf       	out	0x3d, r28	; 61
    18ce:	df 91       	pop	r29
    18d0:	cf 91       	pop	r28
    18d2:	1f 91       	pop	r17
    18d4:	0f 91       	pop	r16
    18d6:	ff 90       	pop	r15
    18d8:	ef 90       	pop	r14
    18da:	df 90       	pop	r13
    18dc:	cf 90       	pop	r12
    18de:	bf 90       	pop	r11
    18e0:	af 90       	pop	r10
    18e2:	9f 90       	pop	r9
    18e4:	8f 90       	pop	r8
    18e6:	7f 90       	pop	r7
    18e8:	6f 90       	pop	r6
    18ea:	5f 90       	pop	r5
    18ec:	4f 90       	pop	r4
    18ee:	3f 90       	pop	r3
    18f0:	2f 90       	pop	r2
    18f2:	08 95       	ret

000018f4 <strnlen_P>:
    18f4:	fc 01       	movw	r30, r24
    18f6:	05 90       	lpm	r0, Z+
    18f8:	61 50       	subi	r22, 0x01	; 1
    18fa:	70 40       	sbci	r23, 0x00	; 0
    18fc:	01 10       	cpse	r0, r1
    18fe:	d8 f7       	brcc	.-10     	; 0x18f6 <strnlen_P+0x2>
    1900:	80 95       	com	r24
    1902:	90 95       	com	r25
    1904:	8e 0f       	add	r24, r30
    1906:	9f 1f       	adc	r25, r31
    1908:	08 95       	ret

0000190a <strnlen>:
    190a:	fc 01       	movw	r30, r24
    190c:	61 50       	subi	r22, 0x01	; 1
    190e:	70 40       	sbci	r23, 0x00	; 0
    1910:	01 90       	ld	r0, Z+
    1912:	01 10       	cpse	r0, r1
    1914:	d8 f7       	brcc	.-10     	; 0x190c <strnlen+0x2>
    1916:	80 95       	com	r24
    1918:	90 95       	com	r25
    191a:	8e 0f       	add	r24, r30
    191c:	9f 1f       	adc	r25, r31
    191e:	08 95       	ret

00001920 <fputc>:
    1920:	0f 93       	push	r16
    1922:	1f 93       	push	r17
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	8c 01       	movw	r16, r24
    192a:	eb 01       	movw	r28, r22
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	81 ff       	sbrs	r24, 1
    1930:	1b c0       	rjmp	.+54     	; 0x1968 <fputc+0x48>
    1932:	82 ff       	sbrs	r24, 2
    1934:	0d c0       	rjmp	.+26     	; 0x1950 <fputc+0x30>
    1936:	2e 81       	ldd	r18, Y+6	; 0x06
    1938:	3f 81       	ldd	r19, Y+7	; 0x07
    193a:	8c 81       	ldd	r24, Y+4	; 0x04
    193c:	9d 81       	ldd	r25, Y+5	; 0x05
    193e:	28 17       	cp	r18, r24
    1940:	39 07       	cpc	r19, r25
    1942:	64 f4       	brge	.+24     	; 0x195c <fputc+0x3c>
    1944:	e8 81       	ld	r30, Y
    1946:	f9 81       	ldd	r31, Y+1	; 0x01
    1948:	01 93       	st	Z+, r16
    194a:	f9 83       	std	Y+1, r31	; 0x01
    194c:	e8 83       	st	Y, r30
    194e:	06 c0       	rjmp	.+12     	; 0x195c <fputc+0x3c>
    1950:	e8 85       	ldd	r30, Y+8	; 0x08
    1952:	f9 85       	ldd	r31, Y+9	; 0x09
    1954:	80 2f       	mov	r24, r16
    1956:	09 95       	icall
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	31 f4       	brne	.+12     	; 0x1968 <fputc+0x48>
    195c:	8e 81       	ldd	r24, Y+6	; 0x06
    195e:	9f 81       	ldd	r25, Y+7	; 0x07
    1960:	01 96       	adiw	r24, 0x01	; 1
    1962:	9f 83       	std	Y+7, r25	; 0x07
    1964:	8e 83       	std	Y+6, r24	; 0x06
    1966:	02 c0       	rjmp	.+4      	; 0x196c <fputc+0x4c>
    1968:	0f ef       	ldi	r16, 0xFF	; 255
    196a:	1f ef       	ldi	r17, 0xFF	; 255
    196c:	c8 01       	movw	r24, r16
    196e:	df 91       	pop	r29
    1970:	cf 91       	pop	r28
    1972:	1f 91       	pop	r17
    1974:	0f 91       	pop	r16
    1976:	08 95       	ret

00001978 <__ultoa_invert>:
    1978:	fa 01       	movw	r30, r20
    197a:	aa 27       	eor	r26, r26
    197c:	28 30       	cpi	r18, 0x08	; 8
    197e:	51 f1       	breq	.+84     	; 0x19d4 <__ultoa_invert+0x5c>
    1980:	20 31       	cpi	r18, 0x10	; 16
    1982:	81 f1       	breq	.+96     	; 0x19e4 <__ultoa_invert+0x6c>
    1984:	e8 94       	clt
    1986:	6f 93       	push	r22
    1988:	6e 7f       	andi	r22, 0xFE	; 254
    198a:	6e 5f       	subi	r22, 0xFE	; 254
    198c:	7f 4f       	sbci	r23, 0xFF	; 255
    198e:	8f 4f       	sbci	r24, 0xFF	; 255
    1990:	9f 4f       	sbci	r25, 0xFF	; 255
    1992:	af 4f       	sbci	r26, 0xFF	; 255
    1994:	b1 e0       	ldi	r27, 0x01	; 1
    1996:	3e d0       	rcall	.+124    	; 0x1a14 <__ultoa_invert+0x9c>
    1998:	b4 e0       	ldi	r27, 0x04	; 4
    199a:	3c d0       	rcall	.+120    	; 0x1a14 <__ultoa_invert+0x9c>
    199c:	67 0f       	add	r22, r23
    199e:	78 1f       	adc	r23, r24
    19a0:	89 1f       	adc	r24, r25
    19a2:	9a 1f       	adc	r25, r26
    19a4:	a1 1d       	adc	r26, r1
    19a6:	68 0f       	add	r22, r24
    19a8:	79 1f       	adc	r23, r25
    19aa:	8a 1f       	adc	r24, r26
    19ac:	91 1d       	adc	r25, r1
    19ae:	a1 1d       	adc	r26, r1
    19b0:	6a 0f       	add	r22, r26
    19b2:	71 1d       	adc	r23, r1
    19b4:	81 1d       	adc	r24, r1
    19b6:	91 1d       	adc	r25, r1
    19b8:	a1 1d       	adc	r26, r1
    19ba:	20 d0       	rcall	.+64     	; 0x19fc <__ultoa_invert+0x84>
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <__ultoa_invert+0x48>
    19be:	68 94       	set
    19c0:	3f 91       	pop	r19
    19c2:	2a e0       	ldi	r18, 0x0A	; 10
    19c4:	26 9f       	mul	r18, r22
    19c6:	11 24       	eor	r1, r1
    19c8:	30 19       	sub	r19, r0
    19ca:	30 5d       	subi	r19, 0xD0	; 208
    19cc:	31 93       	st	Z+, r19
    19ce:	de f6       	brtc	.-74     	; 0x1986 <__ultoa_invert+0xe>
    19d0:	cf 01       	movw	r24, r30
    19d2:	08 95       	ret
    19d4:	46 2f       	mov	r20, r22
    19d6:	47 70       	andi	r20, 0x07	; 7
    19d8:	40 5d       	subi	r20, 0xD0	; 208
    19da:	41 93       	st	Z+, r20
    19dc:	b3 e0       	ldi	r27, 0x03	; 3
    19de:	0f d0       	rcall	.+30     	; 0x19fe <__ultoa_invert+0x86>
    19e0:	c9 f7       	brne	.-14     	; 0x19d4 <__ultoa_invert+0x5c>
    19e2:	f6 cf       	rjmp	.-20     	; 0x19d0 <__ultoa_invert+0x58>
    19e4:	46 2f       	mov	r20, r22
    19e6:	4f 70       	andi	r20, 0x0F	; 15
    19e8:	40 5d       	subi	r20, 0xD0	; 208
    19ea:	4a 33       	cpi	r20, 0x3A	; 58
    19ec:	18 f0       	brcs	.+6      	; 0x19f4 <__ultoa_invert+0x7c>
    19ee:	49 5d       	subi	r20, 0xD9	; 217
    19f0:	31 fd       	sbrc	r19, 1
    19f2:	40 52       	subi	r20, 0x20	; 32
    19f4:	41 93       	st	Z+, r20
    19f6:	02 d0       	rcall	.+4      	; 0x19fc <__ultoa_invert+0x84>
    19f8:	a9 f7       	brne	.-22     	; 0x19e4 <__ultoa_invert+0x6c>
    19fa:	ea cf       	rjmp	.-44     	; 0x19d0 <__ultoa_invert+0x58>
    19fc:	b4 e0       	ldi	r27, 0x04	; 4
    19fe:	a6 95       	lsr	r26
    1a00:	97 95       	ror	r25
    1a02:	87 95       	ror	r24
    1a04:	77 95       	ror	r23
    1a06:	67 95       	ror	r22
    1a08:	ba 95       	dec	r27
    1a0a:	c9 f7       	brne	.-14     	; 0x19fe <__ultoa_invert+0x86>
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	61 05       	cpc	r22, r1
    1a10:	71 05       	cpc	r23, r1
    1a12:	08 95       	ret
    1a14:	9b 01       	movw	r18, r22
    1a16:	ac 01       	movw	r20, r24
    1a18:	0a 2e       	mov	r0, r26
    1a1a:	06 94       	lsr	r0
    1a1c:	57 95       	ror	r21
    1a1e:	47 95       	ror	r20
    1a20:	37 95       	ror	r19
    1a22:	27 95       	ror	r18
    1a24:	ba 95       	dec	r27
    1a26:	c9 f7       	brne	.-14     	; 0x1a1a <__ultoa_invert+0xa2>
    1a28:	62 0f       	add	r22, r18
    1a2a:	73 1f       	adc	r23, r19
    1a2c:	84 1f       	adc	r24, r20
    1a2e:	95 1f       	adc	r25, r21
    1a30:	a0 1d       	adc	r26, r0
    1a32:	08 95       	ret

00001a34 <_exit>:
    1a34:	f8 94       	cli

00001a36 <__stop_program>:
    1a36:	ff cf       	rjmp	.-2      	; 0x1a36 <__stop_program>
