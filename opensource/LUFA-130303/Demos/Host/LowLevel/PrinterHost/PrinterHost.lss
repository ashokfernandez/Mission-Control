
PrinterHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00001b96  00001c2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800142  00800142  00001c6c  2**0
                  ALLOC
  3 .stab         00000f90  00000000  00000000  00001c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000030d  00000000  00000000  00002bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000460  00000000  00000000  00002f10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005b9f  00000000  00000000  00003370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d56  00000000  00000000  00008f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002eeb  00000000  00000000  0000ac65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bbc  00000000  00000000  0000db50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000275d  00000000  00000000  0000e70c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004052  00000000  00000000  00010e69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000458  00000000  00000000  00014ebb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c1       	rjmp	.+868    	; 0x366 <__ctors_end>
       2:	00 00       	nop
       4:	cf c1       	rjmp	.+926    	; 0x3a4 <__bad_interrupt>
       6:	00 00       	nop
       8:	cd c1       	rjmp	.+922    	; 0x3a4 <__bad_interrupt>
       a:	00 00       	nop
       c:	cb c1       	rjmp	.+918    	; 0x3a4 <__bad_interrupt>
       e:	00 00       	nop
      10:	c9 c1       	rjmp	.+914    	; 0x3a4 <__bad_interrupt>
      12:	00 00       	nop
      14:	c7 c1       	rjmp	.+910    	; 0x3a4 <__bad_interrupt>
      16:	00 00       	nop
      18:	c5 c1       	rjmp	.+906    	; 0x3a4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c3 c1       	rjmp	.+902    	; 0x3a4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c1 c1       	rjmp	.+898    	; 0x3a4 <__bad_interrupt>
      22:	00 00       	nop
      24:	bf c1       	rjmp	.+894    	; 0x3a4 <__bad_interrupt>
      26:	00 00       	nop
      28:	d9 c7       	rjmp	.+4018   	; 0xfdc <__vector_10>
      2a:	00 00       	nop
      2c:	bb c1       	rjmp	.+886    	; 0x3a4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b9 c1       	rjmp	.+882    	; 0x3a4 <__bad_interrupt>
      32:	00 00       	nop
      34:	b7 c1       	rjmp	.+878    	; 0x3a4 <__bad_interrupt>
      36:	00 00       	nop
      38:	b5 c1       	rjmp	.+874    	; 0x3a4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b3 c1       	rjmp	.+870    	; 0x3a4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b1 c1       	rjmp	.+866    	; 0x3a4 <__bad_interrupt>
      42:	00 00       	nop
      44:	af c1       	rjmp	.+862    	; 0x3a4 <__bad_interrupt>
      46:	00 00       	nop
      48:	ad c1       	rjmp	.+858    	; 0x3a4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ab c1       	rjmp	.+854    	; 0x3a4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a9 c1       	rjmp	.+850    	; 0x3a4 <__bad_interrupt>
      52:	00 00       	nop
      54:	a7 c1       	rjmp	.+846    	; 0x3a4 <__bad_interrupt>
      56:	00 00       	nop
      58:	a5 c1       	rjmp	.+842    	; 0x3a4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a3 c1       	rjmp	.+838    	; 0x3a4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a1 c1       	rjmp	.+834    	; 0x3a4 <__bad_interrupt>
      62:	00 00       	nop
      64:	9f c1       	rjmp	.+830    	; 0x3a4 <__bad_interrupt>
      66:	00 00       	nop
      68:	9d c1       	rjmp	.+826    	; 0x3a4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9b c1       	rjmp	.+822    	; 0x3a4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	99 c1       	rjmp	.+818    	; 0x3a4 <__bad_interrupt>
      72:	00 00       	nop
      74:	97 c1       	rjmp	.+814    	; 0x3a4 <__bad_interrupt>
      76:	00 00       	nop
      78:	95 c1       	rjmp	.+810    	; 0x3a4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	93 c1       	rjmp	.+806    	; 0x3a4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	91 c1       	rjmp	.+802    	; 0x3a4 <__bad_interrupt>
      82:	00 00       	nop
      84:	8f c1       	rjmp	.+798    	; 0x3a4 <__bad_interrupt>
      86:	00 00       	nop
      88:	8d c1       	rjmp	.+794    	; 0x3a4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8b c1       	rjmp	.+790    	; 0x3a4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	89 c1       	rjmp	.+786    	; 0x3a4 <__bad_interrupt>
      92:	00 00       	nop
      94:	87 c1       	rjmp	.+782    	; 0x3a4 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4286>:
      98:	1b 5b 33 36 6d 50 72 69 6e 74 65 72 20 48 6f 73     .[36mPrinter Hos
      a8:	74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d     t Demo running..
      b8:	0a 1b 5b 33 37 6d 00                                ..[37m.

000000bf <__c.4295>:
      bf:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
      cf:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

000000dc <__c.4300>:
      dc:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
      ec:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
      fc:	00                                                  .

000000fd <__c.4305>:
      fd:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     10d:	61 74 61 2e 0d 0a 00                                ata....

00000114 <__c.4308>:
     114:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     124:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     134:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

0000013e <__c.4310>:
     13e:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     14e:	69 63 65 2e 0d 0a 00                                ice....

00000155 <__c.4312>:
     155:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     165:	25 64 0d 0a 00                                      %d...

0000016a <__c.4314>:
     16a:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     17a:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     18a:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     19a:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1aa:	37 6d 00                                            7m.

000001ad <__c.4316>:
     1ad:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1bd:	6f 72 20 28 53 65 74 20 49 6e 74 65 72 66 61 63     or (Set Interfac
     1cd:	65 29 2e 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     e)... -- Error C
     1dd:	6f 64 65 3a 20 25 64 0d 0a 1b 5b 33 37 6d 00        ode: %d...[37m.

000001ec <__c.4318>:
     1ec:	52 65 74 72 69 65 76 69 6e 67 20 44 65 76 69 63     Retrieving Devic
     1fc:	65 20 49 44 2e 2e 2e 0d 0a 00                       e ID......

00000206 <__c.4321>:
     206:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     216:	6f 72 20 28 47 65 74 20 44 65 76 69 63 65 20 49     or (Get Device I
     226:	44 29 2e 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     D)... -- Error C
     236:	6f 64 65 3a 20 25 64 0d 0a 1b 5b 33 37 6d 00        ode: %d...[37m.

00000245 <__c.4323>:
     245:	50 72 69 6e 74 65 72 20 44 65 76 69 63 65 20 49     Printer Device I
     255:	44 3a 20 25 73 0d 0a 00                             D: %s...

0000025d <__c.4325>:
     25d:	50 72 69 6e 74 65 72 20 45 6e 75 6d 65 72 61 74     Printer Enumerat
     26d:	65 64 2e 0d 0a 00                                   ed....

00000273 <__c.4330>:
     273:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     283:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     293:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

000002a2 <__c.4337>:
     2a2:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     2b2:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     2c2:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     2d2:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     2e2:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     2f2:	1b 5b 33 37 6d 00                                   .[37m.

000002f8 <__c.4345>:
     2f8:	53 65 6e 64 69 6e 67 20 54 65 73 74 20 50 61 67     Sending Test Pag
     308:	65 20 28 25 64 20 62 79 74 65 73 29 2e 2e 2e 0d     e (%d bytes)....
     318:	0a 00                                               ..

0000031a <__c.4347>:
     31a:	1b 5b 33 31 6d 45 72 72 6f 72 20 53 65 6e 64 69     .[31mError Sendi
     32a:	6e 67 20 54 65 73 74 20 50 61 67 65 2e 0d 0a 20     ng Test Page... 
     33a:	2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25     -- Error Code: %
     34a:	64 0d 0a 1b 5b 33 37 6d 00                          d...[37m.

00000353 <__c.4349>:
     353:	54 65 73 74 20 50 61 67 65 20 53 65 6e 74 2e 0d     Test Page Sent..
     363:	0a 00 00                                            ...

00000366 <__ctors_end>:
     366:	11 24       	eor	r1, r1
     368:	1f be       	out	0x3f, r1	; 63
     36a:	cf ef       	ldi	r28, 0xFF	; 255
     36c:	d0 e2       	ldi	r29, 0x20	; 32
     36e:	de bf       	out	0x3e, r29	; 62
     370:	cd bf       	out	0x3d, r28	; 61

00000372 <__do_copy_data>:
     372:	11 e0       	ldi	r17, 0x01	; 1
     374:	a0 e0       	ldi	r26, 0x00	; 0
     376:	b1 e0       	ldi	r27, 0x01	; 1
     378:	e6 e9       	ldi	r30, 0x96	; 150
     37a:	fb e1       	ldi	r31, 0x1B	; 27
     37c:	00 e0       	ldi	r16, 0x00	; 0
     37e:	0b bf       	out	0x3b, r16	; 59
     380:	02 c0       	rjmp	.+4      	; 0x386 <__do_copy_data+0x14>
     382:	07 90       	elpm	r0, Z+
     384:	0d 92       	st	X+, r0
     386:	a2 34       	cpi	r26, 0x42	; 66
     388:	b1 07       	cpc	r27, r17
     38a:	d9 f7       	brne	.-10     	; 0x382 <__do_copy_data+0x10>
     38c:	1b be       	out	0x3b, r1	; 59

0000038e <__do_clear_bss>:
     38e:	11 e0       	ldi	r17, 0x01	; 1
     390:	a2 e4       	ldi	r26, 0x42	; 66
     392:	b1 e0       	ldi	r27, 0x01	; 1
     394:	01 c0       	rjmp	.+2      	; 0x398 <.do_clear_bss_start>

00000396 <.do_clear_bss_loop>:
     396:	1d 92       	st	X+, r1

00000398 <.do_clear_bss_start>:
     398:	a6 36       	cpi	r26, 0x66	; 102
     39a:	b1 07       	cpc	r27, r17
     39c:	e1 f7       	brne	.-8      	; 0x396 <.do_clear_bss_loop>
     39e:	96 d1       	rcall	.+812    	; 0x6cc <main>
     3a0:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <_exit>

000003a4 <__bad_interrupt>:
     3a4:	2d ce       	rjmp	.-934    	; 0x0 <__vectors>

000003a6 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     3a6:	9b b1       	in	r25, 0x0b	; 11
     3a8:	9f 70       	andi	r25, 0x0F	; 15
     3aa:	98 2b       	or	r25, r24
     3ac:	9b b9       	out	0x0b, r25	; 11
			}
     3ae:	08 95       	ret

000003b0 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     3b0:	84 b7       	in	r24, 0x34	; 52
     3b2:	87 7f       	andi	r24, 0xF7	; 247
     3b4:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     3b6:	28 e1       	ldi	r18, 0x18	; 24
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	20 93 60 00 	sts	0x0060, r18
     3c0:	10 92 60 00 	sts	0x0060, r1
     3c4:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	80 e8       	ldi	r24, 0x80	; 128
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	80 93 61 00 	sts	0x0061, r24
     3d2:	90 93 61 00 	sts	0x0061, r25
     3d6:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     3d8:	83 e3       	ldi	r24, 0x33	; 51
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	90 93 cd 00 	sts	0x00CD, r25
     3e0:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     3e4:	86 e0       	ldi	r24, 0x06	; 6
     3e6:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     3ea:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     3ee:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     3f2:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     3f4:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     3f6:	8a b1       	in	r24, 0x0a	; 10
     3f8:	80 6f       	ori	r24, 0xF0	; 240
     3fa:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     3fc:	8b b1       	in	r24, 0x0b	; 11
     3fe:	8f 70       	andi	r24, 0x0F	; 15
     400:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     402:	d1 d5       	rcall	.+2978   	; 0xfa6 <USB_Init>
     404:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <Serial_CreateStream>

0000040c <EVENT_USB_Host_DeviceAttached>:
     40c:	8f eb       	ldi	r24, 0xBF	; 191
}
     40e:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     410:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     414:	80 ea       	ldi	r24, 0xA0	; 160
     416:	c7 cf       	rjmp	.-114    	; 0x3a6 <LEDs_SetAllLEDs>

00000418 <EVENT_USB_Host_DeviceUnattached>:
     418:	8c ed       	ldi	r24, 0xDC	; 220
}
     41a:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     41c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     420:	80 e1       	ldi	r24, 0x10	; 16
     422:	c1 cf       	rjmp	.-126    	; 0x3a6 <LEDs_SetAllLEDs>

00000424 <EVENT_USB_Host_DeviceEnumerationComplete>:
     424:	0f 93       	push	r16
}
     426:	1f 93       	push	r17

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
     430:	cc 52       	subi	r28, 0x2C	; 44
     432:	d1 40       	sbci	r29, 0x01	; 1
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	f8 94       	cli
     438:	de bf       	out	0x3e, r29	; 62
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	cd bf       	out	0x3d, r28	; 61
	puts_P(PSTR("Getting Config Data.\r\n"));
     43e:	8d ef       	ldi	r24, 0xFD	; 253
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     446:	6e d1       	rcall	.+732    	; 0x724 <ProcessConfigurationDescriptor>
     448:	08 2f       	mov	r16, r24
     44a:	88 23       	and	r24, r24
     44c:	01 f1       	breq	.+64     	; 0x48e <EVENT_USB_Host_DeviceEnumerationComplete+0x6a>
     44e:	81 30       	cpi	r24, 0x01	; 1
	{
		if (ErrorCode == ControlError)
     450:	19 f4       	brne	.+6      	; 0x458 <EVENT_USB_Host_DeviceEnumerationComplete+0x34>
     452:	84 e1       	ldi	r24, 0x14	; 20
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	02 c0       	rjmp	.+4      	; 0x45c <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
     458:	8e e3       	ldi	r24, 0x3E	; 62
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <puts_P>
     460:	00 d0       	rcall	.+0      	; 0x462 <EVENT_USB_Host_DeviceEnumerationComplete+0x3e>

		printf_P(PSTR(" -- Error Code: %d\r\n"), ErrorCode);
     462:	00 d0       	rcall	.+0      	; 0x464 <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
     464:	ed b7       	in	r30, 0x3d	; 61
     466:	fe b7       	in	r31, 0x3e	; 62
     468:	31 96       	adiw	r30, 0x01	; 1
     46a:	25 e5       	ldi	r18, 0x55	; 85
     46c:	31 e0       	ldi	r19, 0x01	; 1
     46e:	ad b7       	in	r26, 0x3d	; 61
     470:	be b7       	in	r27, 0x3e	; 62
     472:	12 96       	adiw	r26, 0x02	; 2
     474:	3c 93       	st	X, r19
     476:	2e 93       	st	-X, r18
     478:	11 97       	sbiw	r26, 0x01	; 1
     47a:	02 83       	std	Z+2, r16	; 0x02
     47c:	13 82       	std	Z+3, r1	; 0x03
     47e:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <printf_P>
     482:	0f 90       	pop	r0

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	80 e9       	ldi	r24, 0x90	; 144
     48c:	61 c0       	rjmp	.+194    	; 0x550 <EVENT_USB_Host_DeviceEnumerationComplete+0x12c>
     48e:	81 e0       	ldi	r24, 0x01	; 1
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     490:	fd d7       	rcall	.+4090   	; 0x148c <USB_Host_SetDeviceConfiguration>
     492:	88 23       	and	r24, r24
     494:	79 f0       	breq	.+30     	; 0x4b4 <EVENT_USB_Host_DeviceEnumerationComplete+0x90>
     496:	00 d0       	rcall	.+0      	; 0x498 <EVENT_USB_Host_DeviceEnumerationComplete+0x74>
     498:	00 d0       	rcall	.+0      	; 0x49a <EVENT_USB_Host_DeviceEnumerationComplete+0x76>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     49a:	ed b7       	in	r30, 0x3d	; 61
     49c:	fe b7       	in	r31, 0x3e	; 62
     49e:	31 96       	adiw	r30, 0x01	; 1
     4a0:	2a e6       	ldi	r18, 0x6A	; 106
     4a2:	31 e0       	ldi	r19, 0x01	; 1
     4a4:	ad b7       	in	r26, 0x3d	; 61
     4a6:	be b7       	in	r27, 0x3e	; 62
     4a8:	12 96       	adiw	r26, 0x02	; 2
     4aa:	3c 93       	st	X, r19
     4ac:	2e 93       	st	-X, r18
     4ae:	11 97       	sbiw	r26, 0x01	; 1
     4b0:	82 83       	std	Z+2, r24	; 0x02
     4b2:	e4 cf       	rjmp	.-56     	; 0x47c <EVENT_USB_Host_DeviceEnumerationComplete+0x58>
     4b4:	60 91 45 01 	lds	r22, 0x0145
		return;
	}

	/* Some printers use alternate settings to determine the communication protocol used - if so, send a SetInterface
	 * request to switch to the interface alternate setting with the Bidirectional protocol */
	if (PrinterAltSetting)
     4b8:	66 23       	and	r22, r22
     4ba:	71 f0       	breq	.+28     	; 0x4d8 <EVENT_USB_Host_DeviceEnumerationComplete+0xb4>
     4bc:	80 91 46 01 	lds	r24, 0x0146
	{
		if ((ErrorCode = USB_Host_SetInterfaceAltSetting(PrinterInterfaceNumber, PrinterAltSetting)) != HOST_SENDCONTROL_Successful)
     4c0:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <USB_Host_SetInterfaceAltSetting>
     4c4:	88 23       	and	r24, r24
     4c6:	41 f0       	breq	.+16     	; 0x4d8 <EVENT_USB_Host_DeviceEnumerationComplete+0xb4>
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <EVENT_USB_Host_DeviceEnumerationComplete+0xa6>
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <EVENT_USB_Host_DeviceEnumerationComplete+0xa8>
		{
			printf_P(PSTR(ESC_FG_RED "Control Error (Set Interface).\r\n"
     4cc:	ed b7       	in	r30, 0x3d	; 61
     4ce:	fe b7       	in	r31, 0x3e	; 62
     4d0:	31 96       	adiw	r30, 0x01	; 1
     4d2:	2d ea       	ldi	r18, 0xAD	; 173
     4d4:	31 e0       	ldi	r19, 0x01	; 1
     4d6:	14 c0       	rjmp	.+40     	; 0x500 <EVENT_USB_Host_DeviceEnumerationComplete+0xdc>
     4d8:	8c ee       	ldi	r24, 0xEC	; 236
     4da:	91 e0       	ldi	r25, 0x01	; 1
			USB_Host_SetDeviceConfiguration(0);
			return;
		}
	}

	puts_P(PSTR("Retrieving Device ID...\r\n"));
     4dc:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <puts_P>
     4e0:	8e 01       	movw	r16, r28
     4e2:	0f 5f       	subi	r16, 0xFF	; 255

	char DeviceIDString[300];
	if ((ErrorCode = Printer_GetDeviceID(DeviceIDString, sizeof(DeviceIDString))) != HOST_SENDCONTROL_Successful)
     4e4:	1f 4f       	sbci	r17, 0xFF	; 255
     4e6:	c8 01       	movw	r24, r16
     4e8:	6c e2       	ldi	r22, 0x2C	; 44
     4ea:	71 e0       	ldi	r23, 0x01	; 1
     4ec:	c2 d1       	rcall	.+900    	; 0x872 <Printer_GetDeviceID>
     4ee:	88 23       	and	r24, r24
     4f0:	d1 f0       	breq	.+52     	; 0x526 <EVENT_USB_Host_DeviceEnumerationComplete+0x102>
     4f2:	00 d0       	rcall	.+0      	; 0x4f4 <EVENT_USB_Host_DeviceEnumerationComplete+0xd0>
     4f4:	00 d0       	rcall	.+0      	; 0x4f6 <EVENT_USB_Host_DeviceEnumerationComplete+0xd2>
     4f6:	ed b7       	in	r30, 0x3d	; 61
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Get Device ID).\r\n"
     4f8:	fe b7       	in	r31, 0x3e	; 62
     4fa:	31 96       	adiw	r30, 0x01	; 1
     4fc:	26 e0       	ldi	r18, 0x06	; 6
     4fe:	32 e0       	ldi	r19, 0x02	; 2
     500:	ad b7       	in	r26, 0x3d	; 61
     502:	be b7       	in	r27, 0x3e	; 62
     504:	12 96       	adiw	r26, 0x02	; 2
     506:	3c 93       	st	X, r19
     508:	2e 93       	st	-X, r18
     50a:	11 97       	sbiw	r26, 0x01	; 1
     50c:	82 83       	std	Z+2, r24	; 0x02
     50e:	13 82       	std	Z+3, r1	; 0x03
     510:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <printf_P>
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     51a:	0f 90       	pop	r0
     51c:	80 e9       	ldi	r24, 0x90	; 144
     51e:	43 df       	rcall	.-378    	; 0x3a6 <LEDs_SetAllLEDs>
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	b4 d7       	rcall	.+3944   	; 0x148c <USB_Host_SetDeviceConfiguration>
     524:	16 c0       	rjmp	.+44     	; 0x552 <EVENT_USB_Host_DeviceEnumerationComplete+0x12e>
     526:	00 d0       	rcall	.+0      	; 0x528 <EVENT_USB_Host_DeviceEnumerationComplete+0x104>
		USB_Host_SetDeviceConfiguration(0);
     528:	00 d0       	rcall	.+0      	; 0x52a <EVENT_USB_Host_DeviceEnumerationComplete+0x106>
     52a:	85 e4       	ldi	r24, 0x45	; 69
     52c:	92 e0       	ldi	r25, 0x02	; 2
		return;
     52e:	ed b7       	in	r30, 0x3d	; 61
	}

	printf_P(PSTR("Printer Device ID: %s\r\n"), DeviceIDString);
     530:	fe b7       	in	r31, 0x3e	; 62
     532:	92 83       	std	Z+2, r25	; 0x02
     534:	81 83       	std	Z+1, r24	; 0x01
     536:	14 83       	std	Z+4, r17	; 0x04
     538:	03 83       	std	Z+3, r16	; 0x03
     53a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <printf_P>
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	8d e5       	ldi	r24, 0x5D	; 93

	puts_P(PSTR("Printer Enumerated.\r\n"));
     548:	92 e0       	ldi	r25, 0x02	; 2
     54a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <puts_P>
     54e:	80 e6       	ldi	r24, 0x60	; 96
     550:	2a df       	rcall	.-428    	; 0x3a6 <LEDs_SetAllLEDs>
     552:	c4 5d       	subi	r28, 0xD4	; 212
     554:	de 4f       	sbci	r29, 0xFE	; 254
     556:	0f b6       	in	r0, 0x3f	; 63
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
}
     55e:	cd bf       	out	0x3d, r28	; 61
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	08 95       	ret

0000056a <EVENT_USB_Host_HostError>:
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	0f 92       	push	r0
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	89 83       	std	Y+1, r24	; 0x01

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();
     576:	af d4       	rcall	.+2398   	; 0xed6 <USB_Disable>
     578:	00 d0       	rcall	.+0      	; 0x57a <EVENT_USB_Host_HostError+0x10>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     57a:	00 d0       	rcall	.+0      	; 0x57c <EVENT_USB_Host_HostError+0x12>
     57c:	ed b7       	in	r30, 0x3d	; 61
     57e:	fe b7       	in	r31, 0x3e	; 62
     580:	31 96       	adiw	r30, 0x01	; 1
     582:	23 e7       	ldi	r18, 0x73	; 115
     584:	32 e0       	ldi	r19, 0x02	; 2
     586:	ad b7       	in	r26, 0x3d	; 61
     588:	be b7       	in	r27, 0x3e	; 62
     58a:	12 96       	adiw	r26, 0x02	; 2
     58c:	3c 93       	st	X, r19
     58e:	2e 93       	st	-X, r18
     590:	11 97       	sbiw	r26, 0x01	; 1
     592:	89 81       	ldd	r24, Y+1	; 0x01
     594:	82 83       	std	Z+2, r24	; 0x02
     596:	13 82       	std	Z+3, r1	; 0x03
     598:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <printf_P>
     59c:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	80 e9       	ldi	r24, 0x90	; 144
     5a6:	ff de       	rcall	.-514    	; 0x3a6 <LEDs_SetAllLEDs>
     5a8:	ff cf       	rjmp	.-2      	; 0x5a8 <EVENT_USB_Host_HostError+0x3e>

000005aa <EVENT_USB_Host_DeviceEnumerationFailed>:
     5aa:	90 91 51 01 	lds	r25, 0x0151
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     5ae:	2d b7       	in	r18, 0x3d	; 61
     5b0:	3e b7       	in	r19, 0x3e	; 62
     5b2:	28 50       	subi	r18, 0x08	; 8
     5b4:	30 40       	sbci	r19, 0x00	; 0
     5b6:	0f b6       	in	r0, 0x3f	; 63
     5b8:	f8 94       	cli
     5ba:	3e bf       	out	0x3e, r19	; 62
     5bc:	0f be       	out	0x3f, r0	; 63
     5be:	2d bf       	out	0x3d, r18	; 61
     5c0:	ed b7       	in	r30, 0x3d	; 61
     5c2:	fe b7       	in	r31, 0x3e	; 62
     5c4:	31 96       	adiw	r30, 0x01	; 1
     5c6:	22 ea       	ldi	r18, 0xA2	; 162
     5c8:	32 e0       	ldi	r19, 0x02	; 2
     5ca:	ad b7       	in	r26, 0x3d	; 61
     5cc:	be b7       	in	r27, 0x3e	; 62
     5ce:	12 96       	adiw	r26, 0x02	; 2
     5d0:	3c 93       	st	X, r19
     5d2:	2e 93       	st	-X, r18
     5d4:	11 97       	sbiw	r26, 0x01	; 1
     5d6:	82 83       	std	Z+2, r24	; 0x02
     5d8:	13 82       	std	Z+3, r1	; 0x03
     5da:	64 83       	std	Z+4, r22	; 0x04
     5dc:	15 82       	std	Z+5, r1	; 0x05
     5de:	96 83       	std	Z+6, r25	; 0x06
     5e0:	17 82       	std	Z+7, r1	; 0x07
     5e2:	e6 d7       	rcall	.+4044   	; 0x15b0 <printf_P>
     5e4:	2d b7       	in	r18, 0x3d	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5e6:	3e b7       	in	r19, 0x3e	; 62
     5e8:	28 5f       	subi	r18, 0xF8	; 248
     5ea:	3f 4f       	sbci	r19, 0xFF	; 255
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	3e bf       	out	0x3e, r19	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	2d bf       	out	0x3d, r18	; 61
     5f6:	80 e9       	ldi	r24, 0x90	; 144
     5f8:	d6 ce       	rjmp	.-596    	; 0x3a6 <LEDs_SetAllLEDs>

000005fa <PrinterHost_Task>:
     5fa:	ef 92       	push	r14
     5fc:	ff 92       	push	r15
}
     5fe:	0f 93       	push	r16

/** Task to manage an enumerated USB printer once connected, to display device
 *  information and print a test PCL page.
 */
void PrinterHost_Task(void)
{
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	a9 97       	sbiw	r28, 0x29	; 41
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
	if (USB_HostState != HOST_STATE_Configured)
     616:	80 91 51 01 	lds	r24, 0x0151
     61a:	8b 30       	cpi	r24, 0x0B	; 11
     61c:	09 f0       	breq	.+2      	; 0x620 <PrinterHost_Task+0x26>
     61e:	49 c0       	rjmp	.+146    	; 0x6b2 <PrinterHost_Task+0xb8>
	  return;

	uint8_t ErrorCode;

	/* Indicate device busy via the status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     620:	80 e2       	ldi	r24, 0x20	; 32
     622:	c1 de       	rcall	.-638    	; 0x3a6 <LEDs_SetAllLEDs>
     624:	de 01       	movw	r26, r28

	char  TestPageData[]    = "\033%-12345X\033E" "LUFA PCL Test Page" "\033E\033%-12345X";
     626:	11 96       	adiw	r26, 0x01	; 1
     628:	e0 e0       	ldi	r30, 0x00	; 0
     62a:	f1 e0       	ldi	r31, 0x01	; 1
     62c:	89 e2       	ldi	r24, 0x29	; 41
     62e:	01 90       	ld	r0, Z+
     630:	0d 92       	st	X+, r0
     632:	81 50       	subi	r24, 0x01	; 1
     634:	e1 f7       	brne	.-8      	; 0x62e <PrinterHost_Task+0x34>
     636:	7e 01       	movw	r14, r28
	uint16_t TestPageLength = strlen(TestPageData);
     638:	08 94       	sec
     63a:	e1 1c       	adc	r14, r1
     63c:	f1 1c       	adc	r15, r1
     63e:	d7 01       	movw	r26, r14
     640:	0d 90       	ld	r0, X+
     642:	00 20       	and	r0, r0
     644:	e9 f7       	brne	.-6      	; 0x640 <PrinterHost_Task+0x46>
     646:	8d 01       	movw	r16, r26
     648:	01 50       	subi	r16, 0x01	; 1
     64a:	10 40       	sbci	r17, 0x00	; 0
     64c:	0e 19       	sub	r16, r14
     64e:	1f 09       	sbc	r17, r15
     650:	00 d0       	rcall	.+0      	; 0x652 <PrinterHost_Task+0x58>

	printf_P(PSTR("Sending Test Page (%d bytes)...\r\n"), TestPageLength);
     652:	00 d0       	rcall	.+0      	; 0x654 <PrinterHost_Task+0x5a>
     654:	88 ef       	ldi	r24, 0xF8	; 248
     656:	92 e0       	ldi	r25, 0x02	; 2
     658:	ed b7       	in	r30, 0x3d	; 61
     65a:	fe b7       	in	r31, 0x3e	; 62
     65c:	92 83       	std	Z+2, r25	; 0x02
     65e:	81 83       	std	Z+1, r24	; 0x01
     660:	14 83       	std	Z+4, r17	; 0x04
     662:	03 83       	std	Z+3, r16	; 0x03
     664:	a5 d7       	rcall	.+3914   	; 0x15b0 <printf_P>
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0

	/* Send the test page to the attached printer */
	if ((ErrorCode = Printer_SendData(&TestPageData, TestPageLength)) != PIPE_RWSTREAM_NoError)
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	e2 d0       	rcall	.+452    	; 0x838 <Printer_SendData>
     674:	88 23       	and	r24, r24
     676:	b1 f0       	breq	.+44     	; 0x6a4 <PrinterHost_Task+0xaa>
     678:	00 d0       	rcall	.+0      	; 0x67a <PrinterHost_Task+0x80>
     67a:	00 d0       	rcall	.+0      	; 0x67c <PrinterHost_Task+0x82>
     67c:	ed b7       	in	r30, 0x3d	; 61
	{
		printf_P(PSTR(ESC_FG_RED "Error Sending Test Page.\r\n"
     67e:	fe b7       	in	r31, 0x3e	; 62
     680:	31 96       	adiw	r30, 0x01	; 1
     682:	2a e1       	ldi	r18, 0x1A	; 26
     684:	33 e0       	ldi	r19, 0x03	; 3
     686:	ad b7       	in	r26, 0x3d	; 61
     688:	be b7       	in	r27, 0x3e	; 62
     68a:	12 96       	adiw	r26, 0x02	; 2
     68c:	3c 93       	st	X, r19
     68e:	2e 93       	st	-X, r18
     690:	11 97       	sbiw	r26, 0x01	; 1
     692:	82 83       	std	Z+2, r24	; 0x02
     694:	13 82       	std	Z+3, r1	; 0x03
     696:	8c d7       	rcall	.+3864   	; 0x15b0 <printf_P>
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     6a0:	80 e9       	ldi	r24, 0x90	; 144
     6a2:	04 c0       	rjmp	.+8      	; 0x6ac <PrinterHost_Task+0xb2>
     6a4:	83 e5       	ldi	r24, 0x53	; 83
     6a6:	93 e0       	ldi	r25, 0x03	; 3
     6a8:	a2 d7       	rcall	.+3908   	; 0x15ee <puts_P>
     6aa:	80 e6       	ldi	r24, 0x60	; 96
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Test Page Sent.\r\n"));
     6ac:	7c de       	rcall	.-776    	; 0x3a6 <LEDs_SetAllLEDs>
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	ed d6       	rcall	.+3546   	; 0x148c <USB_Host_SetDeviceConfiguration>
     6b2:	a9 96       	adiw	r28, 0x29	; 41

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	f8 94       	cli
     6b8:	de bf       	out	0x3e, r29	; 62
	USB_Host_SetDeviceConfiguration(0);
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	cd bf       	out	0x3d, r28	; 61
     6be:	df 91       	pop	r29
}
     6c0:	cf 91       	pop	r28
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	08 95       	ret

000006cc <main>:
     6cc:	71 de       	rcall	.-798    	; 0x3b0 <SetupHardware>
     6ce:	88 e9       	ldi	r24, 0x98	; 152
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	8d d7       	rcall	.+3866   	; 0x15ee <puts_P>
     6d4:	80 e1       	ldi	r24, 0x10	; 16
     6d6:	67 de       	rcall	.-818    	; 0x3a6 <LEDs_SetAllLEDs>
     6d8:	78 94       	sei
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "Printer Host Demo running.\r\n" ESC_FG_WHITE));

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     6da:	8f df       	rcall	.-226    	; 0x5fa <PrinterHost_Task>
     6dc:	13 d7       	rcall	.+3622   	; 0x1504 <USB_USBTask>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     6de:	fd cf       	rjmp	.-6      	; 0x6da <main+0xe>

000006e0 <DComp_NextBidirectionalPrinterInterface>:
 *  aborting the search if the end of the descriptors is found.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextBidirectionalPrinterInterface(void* CurrentDescriptor)
{
     6e0:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     6e2:	81 81       	ldd	r24, Z+1	; 0x01
     6e4:	84 30       	cpi	r24, 0x04	; 4
     6e6:	49 f4       	brne	.+18     	; 0x6fa <DComp_NextBidirectionalPrinterInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the descriptor class, subclass and protocol, break out if correct value interface found */
		if ((Interface->Class    == PRNT_CSCP_PrinterClass)    &&
     6e8:	85 81       	ldd	r24, Z+5	; 0x05
     6ea:	87 30       	cpi	r24, 0x07	; 7
     6ec:	31 f4       	brne	.+12     	; 0x6fa <DComp_NextBidirectionalPrinterInterface+0x1a>
     6ee:	86 81       	ldd	r24, Z+6	; 0x06
     6f0:	81 30       	cpi	r24, 0x01	; 1
     6f2:	19 f4       	brne	.+6      	; 0x6fa <DComp_NextBidirectionalPrinterInterface+0x1a>
		    (Interface->SubClass == PRNT_CSCP_PrinterSubclass) &&
     6f4:	87 81       	ldd	r24, Z+7	; 0x07
     6f6:	82 30       	cpi	r24, 0x02	; 2
     6f8:	11 f0       	breq	.+4      	; 0x6fe <DComp_NextBidirectionalPrinterInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     6fa:	82 e0       	ldi	r24, 0x02	; 2
     6fc:	08 95       	ret
		/* Check the descriptor class, subclass and protocol, break out if correct value interface found */
		if ((Interface->Class    == PRNT_CSCP_PrinterClass)    &&
		    (Interface->SubClass == PRNT_CSCP_PrinterSubclass) &&
			(Interface->Protocol == PRNT_CSCP_BidirectionalProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     6fe:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     700:	08 95       	ret

00000702 <DComp_NextPrinterInterfaceBulkDataEndpoint>:
 *  search if another interface descriptor is found before the next endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextPrinterInterfaceBulkDataEndpoint(void* CurrentDescriptor)
{
     702:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     704:	81 81       	ldd	r24, Z+1	; 0x01
     706:	85 30       	cpi	r24, 0x05	; 5
     708:	29 f4       	brne	.+10     	; 0x714 <DComp_NextPrinterInterfaceBulkDataEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
     70a:	83 81       	ldd	r24, Z+3	; 0x03
     70c:	83 70       	andi	r24, 0x03	; 3
     70e:	82 30       	cpi	r24, 0x02	; 2
     710:	19 f4       	brne	.+6      	; 0x718 <DComp_NextPrinterInterfaceBulkDataEndpoint+0x16>
     712:	04 c0       	rjmp	.+8      	; 0x71c <DComp_NextPrinterInterfaceBulkDataEndpoint+0x1a>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     714:	84 30       	cpi	r24, 0x04	; 4
     716:	21 f0       	breq	.+8      	; 0x720 <DComp_NextPrinterInterfaceBulkDataEndpoint+0x1e>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	08 95       	ret
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
		  return DESCRIPTOR_SEARCH_Found;
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
     720:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     722:	08 95       	ret

00000724 <ProcessConfigurationDescriptor>:
 *  This routine searches for a bidirectional Printer interface descriptor containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref PrinterHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     724:	af 92       	push	r10
     726:	bf 92       	push	r11
     728:	cf 92       	push	r12
     72a:	df 92       	push	r13
     72c:	ef 92       	push	r14
     72e:	ff 92       	push	r15
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	c4 50       	subi	r28, 0x04	; 4
     73e:	d2 40       	sbci	r29, 0x02	; 2
     740:	0f b6       	in	r0, 0x3f	; 63
     742:	f8 94       	cli
     744:	de bf       	out	0x3e, r29	; 62
     746:	0f be       	out	0x3f, r0	; 63
     748:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     74a:	ae 01       	movw	r20, r28
     74c:	4b 5f       	subi	r20, 0xFB	; 251
     74e:	5f 4f       	sbci	r21, 0xFF	; 255
     750:	5c 83       	std	Y+4, r21	; 0x04
     752:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Interface_t* PrinterInterface = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint   = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint  = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	5e 01       	movw	r10, r28
     758:	08 94       	sec
     75a:	a1 1c       	adc	r10, r1
     75c:	b1 1c       	adc	r11, r1
     75e:	b5 01       	movw	r22, r10
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	32 e0       	ldi	r19, 0x02	; 2
     764:	ce d4       	rcall	.+2460   	; 0x1102 <USB_Host_GetDeviceConfigDescriptor>
     766:	85 30       	cpi	r24, 0x05	; 5
     768:	09 f4       	brne	.+2      	; 0x76c <ProcessConfigurationDescriptor+0x48>
     76a:	51 c0       	rjmp	.+162    	; 0x80e <ProcessConfigurationDescriptor+0xea>
     76c:	86 30       	cpi	r24, 0x06	; 6
     76e:	19 f0       	breq	.+6      	; 0x776 <ProcessConfigurationDescriptor+0x52>
     770:	88 23       	and	r24, r24
     772:	29 f0       	breq	.+10     	; 0x77e <ProcessConfigurationDescriptor+0x5a>
     774:	02 c0       	rjmp	.+4      	; 0x77a <ProcessConfigurationDescriptor+0x56>
     776:	83 e0       	ldi	r24, 0x03	; 3
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     778:	4d c0       	rjmp	.+154    	; 0x814 <ProcessConfigurationDescriptor+0xf0>
     77a:	81 e0       	ldi	r24, 0x01	; 1
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     77c:	4b c0       	rjmp	.+150    	; 0x814 <ProcessConfigurationDescriptor+0xf0>
     77e:	cc 24       	eor	r12, r12
	USB_Descriptor_Interface_t* PrinterInterface = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint   = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint  = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     780:	dd 24       	eor	r13, r13
     782:	ee 24       	eor	r14, r14
     784:	ff 24       	eor	r15, r15
     786:	00 e0       	ldi	r16, 0x00	; 0
     788:	10 e0       	ldi	r17, 0x00	; 0
     78a:	01 15       	cp	r16, r1
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(PrinterInterface) ||
     78c:	11 05       	cpc	r17, r1
     78e:	49 f0       	breq	.+18     	; 0x7a2 <ProcessConfigurationDescriptor+0x7e>
     790:	c5 01       	movw	r24, r10
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     792:	be 01       	movw	r22, r28
     794:	6d 5f       	subi	r22, 0xFD	; 253
     796:	7f 4f       	sbci	r23, 0xFF	; 255
     798:	41 e8       	ldi	r20, 0x81	; 129
     79a:	53 e0       	ldi	r21, 0x03	; 3
     79c:	09 d5       	rcall	.+2578   	; 0x11b0 <USB_GetNextDescriptorComp>
     79e:	88 23       	and	r24, r24
     7a0:	81 f0       	breq	.+32     	; 0x7c2 <ProcessConfigurationDescriptor+0x9e>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(PrinterInterface) ||
     7a2:	c5 01       	movw	r24, r10
     7a4:	be 01       	movw	r22, r28
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextPrinterInterfaceBulkDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Printer interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     7a6:	6d 5f       	subi	r22, 0xFD	; 253
     7a8:	7f 4f       	sbci	r23, 0xFF	; 255
     7aa:	40 e7       	ldi	r20, 0x70	; 112
     7ac:	53 e0       	ldi	r21, 0x03	; 3
     7ae:	00 d5       	rcall	.+2560   	; 0x11b0 <USB_GetNextDescriptorComp>
     7b0:	88 23       	and	r24, r24
     7b2:	79 f5       	brne	.+94     	; 0x812 <ProcessConfigurationDescriptor+0xee>
     7b4:	0b 81       	ldd	r16, Y+3	; 0x03
     7b6:	1c 81       	ldd	r17, Y+4	; 0x04
     7b8:	cc 24       	eor	r12, r12
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			PrinterInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     7ba:	dd 24       	eor	r13, r13
     7bc:	ee 24       	eor	r14, r14

			/* Clear any found endpoints */
			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
     7be:	ff 24       	eor	r15, r15
     7c0:	e4 cf       	rjmp	.-56     	; 0x78a <ProcessConfigurationDescriptor+0x66>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			PrinterInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     7c2:	eb 81       	ldd	r30, Y+3	; 0x03
     7c4:	fc 81       	ldd	r31, Y+4	; 0x04
     7c6:	82 81       	ldd	r24, Z+2	; 0x02
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     7c8:	87 ff       	sbrs	r24, 7
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <ProcessConfigurationDescriptor+0xac>

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     7cc:	7f 01       	movw	r14, r30
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <ProcessConfigurationDescriptor+0xae>
     7d0:	6f 01       	movw	r12, r30
		  DataINEndpoint  = EndpointData;
     7d2:	e1 14       	cp	r14, r1
     7d4:	f1 04       	cpc	r15, r1
		else
		  DataOUTEndpoint = EndpointData;
     7d6:	c9 f2       	breq	.-78     	; 0x78a <ProcessConfigurationDescriptor+0x66>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     7d8:	c1 14       	cp	r12, r1
     7da:	d1 04       	cpc	r13, r1
     7dc:	b1 f2       	breq	.-84     	; 0x78a <ProcessConfigurationDescriptor+0x66>
     7de:	f8 01       	movw	r30, r16
     7e0:	82 81       	ldd	r24, Z+2	; 0x02
     7e2:	80 93 46 01 	sts	0x0146, r24
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Save Printer interface details for later use */
	PrinterInterfaceNumber = PrinterInterface->InterfaceNumber;
     7e6:	83 81       	ldd	r24, Z+3	; 0x03
     7e8:	80 93 45 01 	sts	0x0145, r24
	PrinterAltSetting      = PrinterInterface->AlternateSetting;
     7ec:	f7 01       	movw	r30, r14
     7ee:	24 81       	ldd	r18, Z+4	; 0x04
     7f0:	35 81       	ldd	r19, Z+5	; 0x05

	/* Configure the Printer data IN pipe */
	Pipe_ConfigurePipe(PRINTER_DATA_IN_PIPE, EP_TYPE_BULK, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     7f2:	81 e8       	ldi	r24, 0x81	; 129
     7f4:	62 e0       	ldi	r22, 0x02	; 2
     7f6:	42 81       	ldd	r20, Z+2	; 0x02
     7f8:	01 e0       	ldi	r16, 0x01	; 1
     7fa:	c6 d2       	rcall	.+1420   	; 0xd88 <Pipe_ConfigurePipe>
     7fc:	f6 01       	movw	r30, r12
     7fe:	24 81       	ldd	r18, Z+4	; 0x04
     800:	35 81       	ldd	r19, Z+5	; 0x05
     802:	82 e0       	ldi	r24, 0x02	; 2

	/* Configure the Printer data OUT pipe */
	Pipe_ConfigurePipe(PRINTER_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);
     804:	62 e0       	ldi	r22, 0x02	; 2
     806:	42 81       	ldd	r20, Z+2	; 0x02
     808:	bf d2       	rcall	.+1406   	; 0xd88 <Pipe_ConfigurePipe>
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	03 c0       	rjmp	.+6      	; 0x814 <ProcessConfigurationDescriptor+0xf0>
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	01 c0       	rjmp	.+2      	; 0x814 <ProcessConfigurationDescriptor+0xf0>
     812:	84 e0       	ldi	r24, 0x04	; 4

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     814:	cc 5f       	subi	r28, 0xFC	; 252
     816:	dd 4f       	sbci	r29, 0xFD	; 253
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
			/* Get the next Printer interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextBidirectionalPrinterInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     81c:	de bf       	out	0x3e, r29	; 62
	/* Configure the Printer data OUT pipe */
	Pipe_ConfigurePipe(PRINTER_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	ff 90       	pop	r15
     82c:	ef 90       	pop	r14
     82e:	df 90       	pop	r13
     830:	cf 90       	pop	r12
     832:	bf 90       	pop	r11
     834:	af 90       	pop	r10
     836:	08 95       	ret

00000838 <Printer_SendData>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
uint8_t Printer_SendData(const void* const PrinterCommands,
                         const uint16_t CommandSize)
{
     838:	cf 93       	push	r28
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     83a:	22 e0       	ldi	r18, 0x02	; 2
     83c:	20 93 a7 00 	sts	0x00A7, r18

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     840:	20 91 a9 00 	lds	r18, 0x00A9
     844:	2f 7b       	andi	r18, 0xBF	; 191
     846:	20 93 a9 00 	sts	0x00A9, r18
	uint8_t ErrorCode;

	Pipe_SelectPipe(PRINTER_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(PrinterCommands, CommandSize, NULL)) != PIPE_RWSTREAM_NoError)
     84a:	40 e0       	ldi	r20, 0x00	; 0
     84c:	50 e0       	ldi	r21, 0x00	; 0
     84e:	45 d2       	rcall	.+1162   	; 0xcda <Pipe_Write_Stream_LE>
     850:	c8 2f       	mov	r28, r24
     852:	88 23       	and	r24, r24
     854:	59 f4       	brne	.+22     	; 0x86c <Printer_SendData+0x34>
     856:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     85a:	8b 77       	andi	r24, 0x7B	; 123
     85c:	80 93 a6 00 	sts	0x00A6, r24
     860:	0c d3       	rcall	.+1560   	; 0xe7a <Pipe_WaitUntilReady>
	  return ErrorCode;

	Pipe_ClearOUT();

	Pipe_WaitUntilReady();
     862:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     866:	80 64       	ori	r24, 0x40	; 64
     868:	80 93 a9 00 	sts	0x00A9, r24
     86c:	8c 2f       	mov	r24, r28
     86e:	cf 91       	pop	r28

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
     870:	08 95       	ret

00000872 <Printer_GetDeviceID>:
     872:	cf 92       	push	r12
     874:	df 92       	push	r13
 *
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum
 */
uint8_t Printer_GetDeviceID(char* DeviceIDString,
                            const uint16_t BufferSize)
{
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	00 d0       	rcall	.+0      	; 0x882 <Printer_GetDeviceID+0x10>
     882:	cd b7       	in	r28, 0x3d	; 61
     884:	de b7       	in	r29, 0x3e	; 62
     886:	6c 01       	movw	r12, r24
     888:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t DeviceIDStringLength = 0;
     88a:	1a 82       	std	Y+2, r1	; 0x02
     88c:	19 82       	std	Y+1, r1	; 0x01

	USB_ControlRequest = (USB_Request_Header_t)
     88e:	80 91 46 01 	lds	r24, 0x0146
     892:	91 ea       	ldi	r25, 0xA1	; 161
     894:	90 93 49 01 	sts	0x0149, r25
     898:	10 92 4a 01 	sts	0x014A, r1
     89c:	10 92 4c 01 	sts	0x014C, r1
     8a0:	10 92 4b 01 	sts	0x014B, r1
     8a4:	80 93 4d 01 	sts	0x014D, r24
     8a8:	10 92 4e 01 	sts	0x014E, r1
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	90 93 50 01 	sts	0x0150, r25
     8b4:	80 93 4f 01 	sts	0x014F, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     8b8:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(DeviceIDStringLength),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(&DeviceIDStringLength)) != HOST_SENDCONTROL_Successful)
     8bc:	ce 01       	movw	r24, r28
     8be:	01 96       	adiw	r24, 0x01	; 1
     8c0:	e7 d4       	rcall	.+2510   	; 0x1290 <USB_Host_SendControlRequest>
     8c2:	f8 2e       	mov	r15, r24
     8c4:	88 23       	and	r24, r24
     8c6:	51 f5       	brne	.+84     	; 0x91c <Printer_GetDeviceID+0xaa>
     8c8:	89 81       	ldd	r24, Y+1	; 0x01
	  return ErrorCode;

	if (!(DeviceIDStringLength))
     8ca:	9a 81       	ldd	r25, Y+2	; 0x02
     8cc:	00 97       	sbiw	r24, 0x00	; 0
     8ce:	11 f4       	brne	.+4      	; 0x8d4 <Printer_GetDeviceID+0x62>
     8d0:	f6 01       	movw	r30, r12
	{
		DeviceIDString[0] = 0x00;
     8d2:	23 c0       	rjmp	.+70     	; 0x91a <Printer_GetDeviceID+0xa8>
     8d4:	29 2f       	mov	r18, r25

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     8d6:	38 2f       	mov	r19, r24
     8d8:	3a 83       	std	Y+2, r19	; 0x02
		return HOST_SENDCONTROL_Successful;
	}

	DeviceIDStringLength = SwapEndian_16(DeviceIDStringLength);
     8da:	29 83       	std	Y+1, r18	; 0x01
     8dc:	02 17       	cp	r16, r18

	if (DeviceIDStringLength > BufferSize)
     8de:	13 07       	cpc	r17, r19
     8e0:	10 f4       	brcc	.+4      	; 0x8e6 <Printer_GetDeviceID+0x74>
     8e2:	1a 83       	std	Y+2, r17	; 0x02
	  DeviceIDStringLength = BufferSize;
     8e4:	09 83       	std	Y+1, r16	; 0x01
     8e6:	89 81       	ldd	r24, Y+1	; 0x01

	USB_ControlRequest.wLength = DeviceIDStringLength;
     8e8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ea:	90 93 50 01 	sts	0x0150, r25
     8ee:	80 93 4f 01 	sts	0x014F, r24
     8f2:	c6 01       	movw	r24, r12

	if ((ErrorCode = USB_Host_SendControlRequest(DeviceIDString)) != HOST_SENDCONTROL_Successful)
     8f4:	cd d4       	rcall	.+2458   	; 0x1290 <USB_Host_SendControlRequest>
     8f6:	f8 2e       	mov	r15, r24
     8f8:	88 23       	and	r24, r24
     8fa:	81 f4       	brne	.+32     	; 0x91c <Printer_GetDeviceID+0xaa>
     8fc:	09 81       	ldd	r16, Y+1	; 0x01
     8fe:	1a 81       	ldd	r17, Y+2	; 0x02
	  return ErrorCode;

	/* Move string back two characters to remove the string length value from the start of the array */
	memmove(&DeviceIDString[0], &DeviceIDString[2], DeviceIDStringLength - 2);
     900:	b6 01       	movw	r22, r12
     902:	6e 5f       	subi	r22, 0xFE	; 254
     904:	7f 4f       	sbci	r23, 0xFF	; 255
     906:	a8 01       	movw	r20, r16
     908:	42 50       	subi	r20, 0x02	; 2
     90a:	50 40       	sbci	r21, 0x00	; 0
     90c:	c6 01       	movw	r24, r12
     90e:	3f d6       	rcall	.+3198   	; 0x158e <memmove>
     910:	0c 0d       	add	r16, r12
     912:	1d 1d       	adc	r17, r13
     914:	02 50       	subi	r16, 0x02	; 2

	DeviceIDString[DeviceIDStringLength - 2] = 0x00;
     916:	10 40       	sbci	r17, 0x00	; 0
     918:	f8 01       	movw	r30, r16
     91a:	10 82       	st	Z, r1
     91c:	8f 2d       	mov	r24, r15
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0

	return HOST_SENDCONTROL_Successful;
}
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	ff 90       	pop	r15
     92c:	df 90       	pop	r13
     92e:	cf 90       	pop	r12
     930:	08 95       	ret

00000932 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     932:	80 91 9e 00 	lds	r24, 0x009E
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	81 70       	andi	r24, 0x01	; 1
     93a:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     93c:	20 91 a0 00 	lds	r18, 0x00A0
     940:	2d 7f       	andi	r18, 0xFD	; 253
     942:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     946:	20 91 9e 00 	lds	r18, 0x009E
     94a:	22 60       	ori	r18, 0x02	; 2
     94c:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     950:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     954:	21 fd       	sbrc	r18, 1
     956:	fc cf       	rjmp	.-8      	; 0x950 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     958:	20 91 9e 00 	lds	r18, 0x009E
     95c:	21 60       	ori	r18, 0x01	; 1
     95e:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     962:	10 92 47 01 	sts	0x0147, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     966:	20 91 a0 00 	lds	r18, 0x00A0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	20 72       	andi	r18, 0x20	; 32
     96e:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     970:	40 91 a0 00 	lds	r20, 0x00A0
     974:	4f 7d       	andi	r20, 0xDF	; 223
     976:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     97a:	40 91 9f 00 	lds	r20, 0x009F
     97e:	4f 7d       	andi	r20, 0xDF	; 223
     980:	40 93 9f 00 	sts	0x009F, r20
     984:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     986:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     98a:	55 ff       	sbrs	r21, 5
     98c:	0b c0       	rjmp	.+22     	; 0x9a4 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     98e:	40 91 9f 00 	lds	r20, 0x009F
     992:	4f 7d       	andi	r20, 0xDF	; 223
     994:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     998:	40 91 9f 00 	lds	r20, 0x009F
     99c:	4d 7f       	andi	r20, 0xFD	; 253
     99e:	40 93 9f 00 	sts	0x009F, r20
     9a2:	08 c0       	rjmp	.+16     	; 0x9b4 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9a4:	ef ec       	ldi	r30, 0xCF	; 207
     9a6:	f7 e0       	ldi	r31, 0x07	; 7
     9a8:	31 97       	sbiw	r30, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <USB_Host_ResetDevice+0x76>
     9ac:	00 c0       	rjmp	.+0      	; 0x9ae <USB_Host_ResetDevice+0x7c>
     9ae:	00 00       	nop
     9b0:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     9b2:	49 f7       	brne	.-46     	; 0x986 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     9b4:	21 15       	cp	r18, r1
     9b6:	31 05       	cpc	r19, r1
     9b8:	29 f0       	breq	.+10     	; 0x9c4 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     9ba:	20 91 a0 00 	lds	r18, 0x00A0
     9be:	20 62       	ori	r18, 0x20	; 32
     9c0:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     9c4:	00 97       	sbiw	r24, 0x00	; 0
     9c6:	29 f4       	brne	.+10     	; 0x9d2 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     9c8:	80 91 9e 00 	lds	r24, 0x009E
     9cc:	8e 7f       	andi	r24, 0xFE	; 254
     9ce:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     9d2:	80 91 a0 00 	lds	r24, 0x00A0
     9d6:	82 60       	ori	r24, 0x02	; 2
     9d8:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     9dc:	08 95       	ret

000009de <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     9de:	40 91 9e 00 	lds	r20, 0x009E
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	41 70       	andi	r20, 0x01	; 1
     9e6:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     9e8:	20 91 a0 00 	lds	r18, 0x00A0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	20 72       	andi	r18, 0x20	; 32
     9f0:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     9f2:	90 91 a0 00 	lds	r25, 0x00A0
     9f6:	9f 7d       	andi	r25, 0xDF	; 223
     9f8:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     9fc:	90 91 9f 00 	lds	r25, 0x009F
     a00:	9f 7d       	andi	r25, 0xDF	; 223
     a02:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a06:	90 91 9e 00 	lds	r25, 0x009E
     a0a:	91 60       	ori	r25, 0x01	; 1
     a0c:	90 93 9e 00 	sts	0x009E, r25
     a10:	26 c0       	rjmp	.+76     	; 0xa5e <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     a12:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     a16:	95 ff       	sbrs	r25, 5
     a18:	06 c0       	rjmp	.+12     	; 0xa26 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     a1a:	90 91 9f 00 	lds	r25, 0x009F
     a1e:	9f 7d       	andi	r25, 0xDF	; 223
     a20:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     a24:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     a26:	90 91 51 01 	lds	r25, 0x0151
     a2a:	91 30       	cpi	r25, 0x01	; 1
     a2c:	d9 f0       	breq	.+54     	; 0xa64 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     a2e:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     a32:	94 ff       	sbrs	r25, 4
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     a36:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     a3a:	80 91 a6 00 	lds	r24, 0x00A6
     a3e:	8f 7e       	andi	r24, 0xEF	; 239
     a40:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     a44:	82 e0       	ldi	r24, 0x02	; 2

			break;
     a46:	0f c0       	rjmp	.+30     	; 0xa66 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     a48:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     a4c:	91 ff       	sbrs	r25, 1
     a4e:	07 c0       	rjmp	.+14     	; 0xa5e <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     a50:	80 91 a6 00 	lds	r24, 0x00A6
     a54:	8d 7f       	andi	r24, 0xFD	; 253
     a56:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     a5a:	83 e0       	ldi	r24, 0x03	; 3

			break;
     a5c:	04 c0       	rjmp	.+8      	; 0xa66 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     a5e:	88 23       	and	r24, r24
     a60:	c1 f6       	brne	.-80     	; 0xa12 <USB_Host_WaitMS+0x34>
     a62:	01 c0       	rjmp	.+2      	; 0xa66 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     a64:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     a66:	41 15       	cp	r20, r1
     a68:	51 05       	cpc	r21, r1
     a6a:	29 f4       	brne	.+10     	; 0xa76 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     a6c:	90 91 9e 00 	lds	r25, 0x009E
     a70:	9e 7f       	andi	r25, 0xFE	; 254
     a72:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     a76:	21 15       	cp	r18, r1
     a78:	31 05       	cpc	r19, r1
     a7a:	29 f0       	breq	.+10     	; 0xa86 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     a7c:	90 91 a0 00 	lds	r25, 0x00A0
     a80:	90 62       	ori	r25, 0x20	; 32
     a82:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     a86:	08 95       	ret

00000a88 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
     a94:	28 97       	sbiw	r28, 0x08	; 8
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	f8 94       	cli
     a9a:	de bf       	out	0x3e, r29	; 62
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     aa0:	80 91 51 01 	lds	r24, 0x0151
     aa4:	85 30       	cpi	r24, 0x05	; 5
     aa6:	09 f4       	brne	.+2      	; 0xaaa <USB_Host_ProcessNextHostState+0x22>
     aa8:	99 c0       	rjmp	.+306    	; 0xbdc <USB_Host_ProcessNextHostState+0x154>
     aaa:	86 30       	cpi	r24, 0x06	; 6
     aac:	68 f4       	brcc	.+26     	; 0xac8 <USB_Host_ProcessNextHostState+0x40>
     aae:	82 30       	cpi	r24, 0x02	; 2
     ab0:	c1 f1       	breq	.+112    	; 0xb22 <USB_Host_ProcessNextHostState+0x9a>
     ab2:	83 30       	cpi	r24, 0x03	; 3
     ab4:	18 f4       	brcc	.+6      	; 0xabc <USB_Host_ProcessNextHostState+0x34>
     ab6:	88 23       	and	r24, r24
     ab8:	a1 f0       	breq	.+40     	; 0xae2 <USB_Host_ProcessNextHostState+0x5a>
     aba:	04 c1       	rjmp	.+520    	; 0xcc4 <USB_Host_ProcessNextHostState+0x23c>
     abc:	83 30       	cpi	r24, 0x03	; 3
     abe:	d9 f1       	breq	.+118    	; 0xb36 <USB_Host_ProcessNextHostState+0xae>
     ac0:	84 30       	cpi	r24, 0x04	; 4
     ac2:	09 f0       	breq	.+2      	; 0xac6 <USB_Host_ProcessNextHostState+0x3e>
     ac4:	ff c0       	rjmp	.+510    	; 0xcc4 <USB_Host_ProcessNextHostState+0x23c>
     ac6:	62 c0       	rjmp	.+196    	; 0xb8c <USB_Host_ProcessNextHostState+0x104>
     ac8:	87 30       	cpi	r24, 0x07	; 7
     aca:	09 f4       	brne	.+2      	; 0xace <USB_Host_ProcessNextHostState+0x46>
     acc:	9e c0       	rjmp	.+316    	; 0xc0a <USB_Host_ProcessNextHostState+0x182>
     ace:	87 30       	cpi	r24, 0x07	; 7
     ad0:	08 f4       	brcc	.+2      	; 0xad4 <USB_Host_ProcessNextHostState+0x4c>
     ad2:	8f c0       	rjmp	.+286    	; 0xbf2 <USB_Host_ProcessNextHostState+0x16a>
     ad4:	88 30       	cpi	r24, 0x08	; 8
     ad6:	09 f4       	brne	.+2      	; 0xada <USB_Host_ProcessNextHostState+0x52>
     ad8:	b8 c0       	rjmp	.+368    	; 0xc4a <USB_Host_ProcessNextHostState+0x1c2>
     ada:	89 30       	cpi	r24, 0x09	; 9
     adc:	09 f0       	breq	.+2      	; 0xae0 <USB_Host_ProcessNextHostState+0x58>
     ade:	f2 c0       	rjmp	.+484    	; 0xcc4 <USB_Host_ProcessNextHostState+0x23c>
     ae0:	d9 c0       	rjmp	.+434    	; 0xc94 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     ae2:	00 91 42 01 	lds	r16, 0x0142
     ae6:	10 91 43 01 	lds	r17, 0x0143
     aea:	01 15       	cp	r16, r1
     aec:	11 05       	cpc	r17, r1
     aee:	09 f4       	brne	.+2      	; 0xaf2 <USB_Host_ProcessNextHostState+0x6a>
     af0:	e9 c0       	rjmp	.+466    	; 0xcc4 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	74 df       	rcall	.-280    	; 0x9de <USB_Host_WaitMS>
     af6:	68 2f       	mov	r22, r24
     af8:	88 23       	and	r24, r24
     afa:	31 f0       	breq	.+12     	; 0xb08 <USB_Host_ProcessNextHostState+0x80>
     afc:	80 91 44 01 	lds	r24, 0x0144
				{
					USB_HostState = PostWaitState;
     b00:	80 93 51 01 	sts	0x0151, r24
     b04:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     b06:	d2 c0       	rjmp	.+420    	; 0xcac <USB_Host_ProcessNextHostState+0x224>
					break;
     b08:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
     b0a:	10 40       	sbci	r17, 0x00	; 0
     b0c:	10 93 43 01 	sts	0x0143, r17
     b10:	00 93 42 01 	sts	0x0142, r16
     b14:	01 15       	cp	r16, r1
     b16:	11 05       	cpc	r17, r1
     b18:	09 f0       	breq	.+2      	; 0xb1c <USB_Host_ProcessNextHostState+0x94>
     b1a:	d4 c0       	rjmp	.+424    	; 0xcc4 <USB_Host_ProcessNextHostState+0x23c>
     b1c:	80 91 44 01 	lds	r24, 0x0144
				  USB_HostState = PostWaitState;
     b20:	07 c0       	rjmp	.+14     	; 0xb30 <USB_Host_ProcessNextHostState+0xa8>
     b22:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     b24:	93 e0       	ldi	r25, 0x03	; 3
     b26:	90 93 43 01 	sts	0x0143, r25
     b2a:	80 93 42 01 	sts	0x0142, r24
     b2e:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     b30:	80 93 51 01 	sts	0x0151, r24
     b34:	c7 c0       	rjmp	.+398    	; 0xcc4 <USB_Host_ProcessNextHostState+0x23c>
			break;
     b36:	80 91 42 01 	lds	r24, 0x0142
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     b3a:	90 91 43 01 	lds	r25, 0x0143
     b3e:	9c 01       	movw	r18, r24
     b40:	21 50       	subi	r18, 0x01	; 1
     b42:	30 40       	sbci	r19, 0x00	; 0
     b44:	30 93 43 01 	sts	0x0143, r19
     b48:	20 93 42 01 	sts	0x0142, r18
     b4c:	00 97       	sbiw	r24, 0x00	; 0
     b4e:	39 f0       	breq	.+14     	; 0xb5e <USB_Host_ProcessNextHostState+0xd6>
     b50:	8f ec       	ldi	r24, 0xCF	; 207
     b52:	97 e0       	ldi	r25, 0x07	; 7
     b54:	01 97       	sbiw	r24, 0x01	; 1
     b56:	f1 f7       	brne	.-4      	; 0xb54 <USB_Host_ProcessNextHostState+0xcc>
     b58:	00 c0       	rjmp	.+0      	; 0xb5a <USB_Host_ProcessNextHostState+0xd2>
     b5a:	00 00       	nop
     b5c:	b3 c0       	rjmp	.+358    	; 0xcc4 <USB_Host_ProcessNextHostState+0x23c>
     b5e:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     b60:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     b64:	80 61       	ori	r24, 0x10	; 16
     b66:	80 93 d8 00 	sts	0x00D8, r24
     b6a:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     b6e:	8b 7f       	andi	r24, 0xFB	; 251
     b70:	80 93 dd 00 	sts	0x00DD, r24
     b74:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     b78:	80 61       	ori	r24, 0x10	; 16
     b7a:	80 93 d7 00 	sts	0x00D7, r24
     b7e:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     b82:	82 60       	ori	r24, 0x02	; 2
     b84:	80 93 dd 00 	sts	0x00DD, r24
     b88:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     b8a:	d2 cf       	rjmp	.-92     	; 0xb30 <USB_Host_ProcessNextHostState+0xa8>
     b8c:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     b90:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     b92:	98 c0       	rjmp	.+304    	; 0xcc4 <USB_Host_ProcessNextHostState+0x23c>
     b94:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     b98:	8e 7f       	andi	r24, 0xFE	; 254
     b9a:	80 93 9f 00 	sts	0x009F, r24
     b9e:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     ba2:	8d 7f       	andi	r24, 0xFD	; 253
     ba4:	80 93 9f 00 	sts	0x009F, r24
     ba8:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     bac:	8d 7f       	andi	r24, 0xFD	; 253
     bae:	80 93 df 00 	sts	0x00DF, r24
     bb2:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     bb6:	82 60       	ori	r24, 0x02	; 2
     bb8:	80 93 de 00 	sts	0x00DE, r24
     bbc:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     bc0:	81 60       	ori	r24, 0x01	; 1
     bc2:	80 93 9e 00 	sts	0x009E, r24
     bc6:	45 d1       	rcall	.+650    	; 0xe52 <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     bc8:	10 92 51 01 	sts	0x0151, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     bcc:	84 e6       	ldi	r24, 0x64	; 100
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	90 93 43 01 	sts	0x0143, r25
     bd4:	80 93 42 01 	sts	0x0142, r24
     bd8:	85 e0       	ldi	r24, 0x05	; 5
     bda:	59 c0       	rjmp	.+178    	; 0xc8e <USB_Host_ProcessNextHostState+0x206>
     bdc:	aa de       	rcall	.-684    	; 0x932 <USB_Host_ResetDevice>
     bde:	10 92 51 01 	sts	0x0151, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     be2:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	90 93 43 01 	sts	0x0143, r25
     bea:	80 93 42 01 	sts	0x0142, r24
     bee:	86 e0       	ldi	r24, 0x06	; 6
     bf0:	4e c0       	rjmp	.+156    	; 0xc8e <USB_Host_ProcessNextHostState+0x206>
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     bf8:	20 e4       	ldi	r18, 0x40	; 64
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	01 e0       	ldi	r16, 0x01	; 1
     bfe:	c4 d0       	rcall	.+392    	; 0xd88 <Pipe_ConfigurePipe>
     c00:	88 23       	and	r24, r24
     c02:	09 f4       	brne	.+2      	; 0xc06 <USB_Host_ProcessNextHostState+0x17e>
     c04:	4f c0       	rjmp	.+158    	; 0xca4 <USB_Host_ProcessNextHostState+0x21c>
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	93 cf       	rjmp	.-218    	; 0xb30 <USB_Host_ProcessNextHostState+0xa8>
     c0a:	a9 e4       	ldi	r26, 0x49	; 73
     c0c:	b1 e0       	ldi	r27, 0x01	; 1
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     c0e:	e9 e2       	ldi	r30, 0x29	; 41
     c10:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     c12:	88 e0       	ldi	r24, 0x08	; 8
     c14:	01 90       	ld	r0, Z+
     c16:	0d 92       	st	X+, r0
     c18:	81 50       	subi	r24, 0x01	; 1
     c1a:	e1 f7       	brne	.-8      	; 0xc14 <USB_Host_ProcessNextHostState+0x18c>
     c1c:	10 92 a7 00 	sts	0x00A7, r1
     c20:	ce 01       	movw	r24, r28
     c22:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c24:	35 d3       	rcall	.+1642   	; 0x1290 <USB_Host_SendControlRequest>
     c26:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     c28:	88 23       	and	r24, r24
     c2a:	09 f0       	breq	.+2      	; 0xc2e <USB_Host_ProcessNextHostState+0x1a6>
     c2c:	3e c0       	rjmp	.+124    	; 0xcaa <USB_Host_ProcessNextHostState+0x222>
     c2e:	88 85       	ldd	r24, Y+8	; 0x08
     c30:	80 93 39 01 	sts	0x0139, r24
     c34:	7e de       	rcall	.-772    	; 0x932 <USB_Host_ResetDevice>
     c36:	10 92 51 01 	sts	0x0151, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     c3a:	88 ec       	ldi	r24, 0xC8	; 200
     c3c:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
     c3e:	90 93 43 01 	sts	0x0143, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     c42:	80 93 42 01 	sts	0x0142, r24
     c46:	88 e0       	ldi	r24, 0x08	; 8
     c48:	22 c0       	rjmp	.+68     	; 0xc8e <USB_Host_ProcessNextHostState+0x206>
     c4a:	20 91 39 01 	lds	r18, 0x0139
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     c56:	01 e0       	ldi	r16, 0x01	; 1
     c58:	97 d0       	rcall	.+302    	; 0xd88 <Pipe_ConfigurePipe>
     c5a:	88 23       	and	r24, r24
     c5c:	19 f1       	breq	.+70     	; 0xca4 <USB_Host_ProcessNextHostState+0x21c>
     c5e:	a9 e4       	ldi	r26, 0x49	; 73
     c60:	b1 e0       	ldi	r27, 0x01	; 1
     c62:	e1 e3       	ldi	r30, 0x31	; 49
     c64:	f1 e0       	ldi	r31, 0x01	; 1
     c66:	88 e0       	ldi	r24, 0x08	; 8
     c68:	01 90       	ld	r0, Z+
     c6a:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     c6c:	81 50       	subi	r24, 0x01	; 1
     c6e:	e1 f7       	brne	.-8      	; 0xc68 <USB_Host_ProcessNextHostState+0x1e0>
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0d d3       	rcall	.+1562   	; 0x1290 <USB_Host_SendControlRequest>
     c76:	68 2f       	mov	r22, r24
     c78:	88 23       	and	r24, r24
     c7a:	b9 f4       	brne	.+46     	; 0xcaa <USB_Host_ProcessNextHostState+0x222>
     c7c:	10 92 51 01 	sts	0x0151, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     c80:	84 e6       	ldi	r24, 0x64	; 100
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	90 93 43 01 	sts	0x0143, r25
     c88:	80 93 42 01 	sts	0x0142, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     c8c:	89 e0       	ldi	r24, 0x09	; 9
     c8e:	80 93 44 01 	sts	0x0144, r24
     c92:	18 c0       	rjmp	.+48     	; 0xcc4 <USB_Host_ProcessNextHostState+0x23c>
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	80 93 a1 00 	sts	0x00A1, r24
     c9a:	8a e0       	ldi	r24, 0x0A	; 10
     c9c:	80 93 51 01 	sts	0x0151, r24
     ca0:	c1 db       	rcall	.-2174   	; 0x424 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     ca2:	10 c0       	rjmp	.+32     	; 0xcc4 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	84 e0       	ldi	r24, 0x04	; 4
     ca8:	01 c0       	rjmp	.+2      	; 0xcac <USB_Host_ProcessNextHostState+0x224>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     caa:	83 e0       	ldi	r24, 0x03	; 3
     cac:	90 91 51 01 	lds	r25, 0x0151

			EVENT_USB_Host_DeviceEnumerationComplete();
     cb0:	91 30       	cpi	r25, 0x01	; 1
     cb2:	41 f0       	breq	.+16     	; 0xcc4 <USB_Host_ProcessNextHostState+0x23c>
			break;
     cb4:	7a dc       	rcall	.-1804   	; 0x5aa <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     cb6:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     cba:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     cbc:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     cc0:	ab db       	rcall	.-2218   	; 0x418 <EVENT_USB_Host_DeviceUnattached>
     cc2:	21 d1       	rcall	.+578    	; 0xf06 <USB_ResetInterface>
     cc4:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     cd4:	1f 91       	pop	r17
     cd6:	0f 91       	pop	r16

		USB_ResetInterface();
     cd8:	08 95       	ret

00000cda <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     cda:	af 92       	push	r10
     cdc:	bf 92       	push	r11
     cde:	cf 92       	push	r12
     ce0:	df 92       	push	r13
     ce2:	ff 92       	push	r15
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	5c 01       	movw	r10, r24
     cee:	eb 01       	movw	r28, r22
     cf0:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     cf2:	80 91 aa 00 	lds	r24, 0x00AA
     cf6:	8f 7c       	andi	r24, 0xCF	; 207
     cf8:	80 62       	ori	r24, 0x20	; 32
     cfa:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     cfe:	bd d0       	rcall	.+378    	; 0xe7a <Pipe_WaitUntilReady>
     d00:	f8 2e       	mov	r15, r24
     d02:	88 23       	and	r24, r24
     d04:	b1 f5       	brne	.+108    	; 0xd72 <Pipe_Write_Stream_LE+0x98>
     d06:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d08:	d1 04       	cpc	r13, r1
     d0a:	41 f0       	breq	.+16     	; 0xd1c <Pipe_Write_Stream_LE+0x42>
     d0c:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     d0e:	00 81       	ld	r16, Z
     d10:	11 81       	ldd	r17, Z+1	; 0x01
     d12:	c0 1b       	sub	r28, r16
     d14:	d1 0b       	sbc	r29, r17
     d16:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d18:	1b 1d       	adc	r17, r11
     d1a:	01 c0       	rjmp	.+2      	; 0xd1e <Pipe_Write_Stream_LE+0x44>
     d1c:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d1e:	aa 24       	eor	r10, r10
     d20:	bb 24       	eor	r11, r11
     d22:	23 c0       	rjmp	.+70     	; 0xd6a <Pipe_Write_Stream_LE+0x90>
     d24:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     d28:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     d2a:	16 c0       	rjmp	.+44     	; 0xd58 <Pipe_Write_Stream_LE+0x7e>
     d2c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     d30:	8b 77       	andi	r24, 0x7B	; 123
     d32:	80 93 a6 00 	sts	0x00A6, r24
     d36:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     d38:	d1 04       	cpc	r13, r1
     d3a:	51 f0       	breq	.+20     	; 0xd50 <Pipe_Write_Stream_LE+0x76>
     d3c:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     d3e:	80 81       	ld	r24, Z
     d40:	91 81       	ldd	r25, Z+1	; 0x01
     d42:	8a 0d       	add	r24, r10
     d44:	9b 1d       	adc	r25, r11
     d46:	91 83       	std	Z+1, r25	; 0x01
     d48:	80 83       	st	Z, r24
     d4a:	44 e0       	ldi	r20, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     d4c:	f4 2e       	mov	r15, r20
     d4e:	11 c0       	rjmp	.+34     	; 0xd72 <Pipe_Write_Stream_LE+0x98>
     d50:	94 d0       	rcall	.+296    	; 0xe7a <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     d52:	88 23       	and	r24, r24
     d54:	51 f0       	breq	.+20     	; 0xd6a <Pipe_Write_Stream_LE+0x90>
     d56:	0c c0       	rjmp	.+24     	; 0xd70 <Pipe_Write_Stream_LE+0x96>
     d58:	f8 01       	movw	r30, r16
     d5a:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     d5c:	8f 01       	movw	r16, r30
     d5e:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     d62:	21 97       	sbiw	r28, 0x01	; 1
     d64:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     d66:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     d68:	b1 1c       	adc	r11, r1
     d6a:	20 97       	sbiw	r28, 0x00	; 0
     d6c:	d9 f6       	brne	.-74     	; 0xd24 <Pipe_Write_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     d6e:	01 c0       	rjmp	.+2      	; 0xd72 <Pipe_Write_Stream_LE+0x98>
     d70:	f8 2e       	mov	r15, r24
     d72:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     d74:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	ff 90       	pop	r15
     d7e:	df 90       	pop	r13
     d80:	cf 90       	pop	r12
     d82:	bf 90       	pop	r11
     d84:	af 90       	pop	r10
     d86:	08 95       	ret

00000d88 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     d88:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     d8a:	58 2f       	mov	r21, r24
     d8c:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     d8e:	87 ff       	sbrs	r24, 7
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <Pipe_ConfigurePipe+0xe>
     d92:	80 e1       	ldi	r24, 0x10	; 16
     d94:	01 c0       	rjmp	.+2      	; 0xd98 <Pipe_ConfigurePipe+0x10>
     d96:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     d98:	57 30       	cpi	r21, 0x07	; 7
     d9a:	08 f0       	brcs	.+2      	; 0xd9e <Pipe_ConfigurePipe+0x16>
     d9c:	57 c0       	rjmp	.+174    	; 0xe4c <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     d9e:	66 23       	and	r22, r22
     da0:	09 f4       	brne	.+2      	; 0xda4 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     da2:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     da4:	4f 70       	andi	r20, 0x0F	; 15
     da6:	62 95       	swap	r22
     da8:	66 0f       	add	r22, r22
     daa:	66 0f       	add	r22, r22
     dac:	60 7c       	andi	r22, 0xC0	; 192
     dae:	64 2b       	or	r22, r20
     db0:	68 2b       	or	r22, r24
     db2:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     db4:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     db6:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     dba:	45 17       	cp	r20, r21
     dbc:	a9 f4       	brne	.+42     	; 0xde8 <Pipe_ConfigurePipe+0x60>
     dbe:	04 c0       	rjmp	.+8      	; 0xdc8 <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     dc0:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	03 c0       	rjmp	.+6      	; 0xdce <Pipe_ConfigurePipe+0x46>
     dc8:	88 e0       	ldi	r24, 0x08	; 8
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     dce:	82 17       	cp	r24, r18
     dd0:	93 07       	cpc	r25, r19
     dd2:	10 f4       	brcc	.+4      	; 0xdd8 <Pipe_ConfigurePipe+0x50>
     dd4:	75 30       	cpi	r23, 0x05	; 5
     dd6:	a1 f7       	brne	.-24     	; 0xdc0 <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     dd8:	87 2f       	mov	r24, r23
     dda:	82 95       	swap	r24
     ddc:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     dde:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     de0:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     de2:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     de4:	e0 e0       	ldi	r30, 0x00	; 0
     de6:	08 c0       	rjmp	.+16     	; 0xdf8 <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     de8:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     dec:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     df0:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     df4:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     df8:	81 ff       	sbrs	r24, 1
     dfa:	20 c0       	rjmp	.+64     	; 0xe3c <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     dfc:	90 91 a9 00 	lds	r25, 0x00A9
     e00:	9e 7f       	andi	r25, 0xFE	; 254
     e02:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     e06:	90 91 ab 00 	lds	r25, 0x00AB
     e0a:	9d 7f       	andi	r25, 0xFD	; 253
     e0c:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     e10:	90 91 a9 00 	lds	r25, 0x00A9
     e14:	91 60       	ori	r25, 0x01	; 1
     e16:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     e1a:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     e1e:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     e22:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     e26:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     e2a:	80 91 a9 00 	lds	r24, 0x00A9
     e2e:	80 62       	ori	r24, 0x20	; 32
     e30:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     e34:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     e38:	87 ff       	sbrs	r24, 7
     e3a:	08 c0       	rjmp	.+16     	; 0xe4c <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     e3c:	4f 5f       	subi	r20, 0xFF	; 255
     e3e:	47 30       	cpi	r20, 0x07	; 7
     e40:	09 f0       	breq	.+2      	; 0xe44 <Pipe_ConfigurePipe+0xbc>
     e42:	b9 cf       	rjmp	.-142    	; 0xdb6 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     e44:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	01 c0       	rjmp	.+2      	; 0xe4e <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     e4c:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     e4e:	0f 91       	pop	r16
     e50:	08 95       	ret

00000e52 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     e52:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     e5c:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     e60:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     e64:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     e68:	90 91 a9 00 	lds	r25, 0x00A9
     e6c:	9e 7f       	andi	r25, 0xFE	; 254
     e6e:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     e72:	8f 5f       	subi	r24, 0xFF	; 255
     e74:	87 30       	cpi	r24, 0x07	; 7
     e76:	81 f7       	brne	.-32     	; 0xe58 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     e78:	08 95       	ret

00000e7a <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     e7a:	80 91 a2 00 	lds	r24, 0x00A2
     e7e:	90 91 a3 00 	lds	r25, 0x00A3
     e82:	45 e6       	ldi	r20, 0x65	; 101
     e84:	01 c0       	rjmp	.+2      	; 0xe88 <Pipe_WaitUntilReady+0xe>
     e86:	c9 01       	movw	r24, r18
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     e88:	20 91 aa 00 	lds	r18, 0x00AA
     e8c:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     e8e:	20 31       	cpi	r18, 0x10	; 16
     e90:	29 f4       	brne	.+10     	; 0xe9c <Pipe_WaitUntilReady+0x22>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     e92:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     e96:	20 ff       	sbrs	r18, 0
     e98:	05 c0       	rjmp	.+10     	; 0xea4 <Pipe_WaitUntilReady+0x2a>
     e9a:	17 c0       	rjmp	.+46     	; 0xeca <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e9c:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     ea0:	22 fd       	sbrc	r18, 2
     ea2:	13 c0       	rjmp	.+38     	; 0xeca <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     ea4:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     ea8:	21 fd       	sbrc	r18, 1
     eaa:	11 c0       	rjmp	.+34     	; 0xece <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     eac:	20 91 51 01 	lds	r18, 0x0151
     eb0:	21 30       	cpi	r18, 0x01	; 1
     eb2:	79 f0       	breq	.+30     	; 0xed2 <Pipe_WaitUntilReady+0x58>
     eb4:	20 91 a2 00 	lds	r18, 0x00A2
     eb8:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     ebc:	28 17       	cp	r18, r24
     ebe:	39 07       	cpc	r19, r25
     ec0:	19 f3       	breq	.-58     	; 0xe88 <Pipe_WaitUntilReady+0xe>
     ec2:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     ec4:	01 f7       	brne	.-64     	; 0xe86 <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_Timeout;
     ec6:	83 e0       	ldi	r24, 0x03	; 3
     ec8:	08 95       	ret
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     ed2:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     ed4:	08 95       	ret

00000ed6 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     ed6:	75 d0       	rcall	.+234    	; 0xfc2 <USB_INT_DisableAllInterrupts>
     ed8:	7c d0       	rcall	.+248    	; 0xfd2 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     eda:	e0 ee       	ldi	r30, 0xE0	; 224
     edc:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     ede:	80 81       	ld	r24, Z
     ee0:	81 60       	ori	r24, 0x01	; 1
     ee2:	80 83       	st	Z, r24
     ee4:	e8 ed       	ldi	r30, 0xD8	; 216
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     ee8:	80 81       	ld	r24, Z
     eea:	8f 77       	andi	r24, 0x7F	; 127
     eec:	80 83       	st	Z, r24
     eee:	19 bc       	out	0x29, r1	; 41
     ef0:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     ef2:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     ef4:	8c 91       	ld	r24, X
     ef6:	8e 7f       	andi	r24, 0xFE	; 254
     ef8:	8c 93       	st	X, r24
     efa:	80 81       	ld	r24, Z
     efc:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     efe:	80 83       	st	Z, r24
     f00:	10 92 48 01 	sts	0x0148, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     f04:	08 95       	ret

00000f06 <USB_ResetInterface>:
     f06:	5d d0       	rcall	.+186    	; 0xfc2 <USB_INT_DisableAllInterrupts>
}
     f08:	64 d0       	rcall	.+200    	; 0xfd2 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     f0a:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     f0e:	8f 77       	andi	r24, 0x7F	; 127
     f10:	80 93 d8 00 	sts	0x00D8, r24
     f14:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     f18:	80 68       	ori	r24, 0x80	; 128
     f1a:	80 93 d8 00 	sts	0x00D8, r24
     f1e:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     f22:	8f 7d       	andi	r24, 0xDF	; 223
     f24:	80 93 d8 00 	sts	0x00D8, r24
     f28:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     f2c:	8f 77       	andi	r24, 0x7F	; 127
     f2e:	80 93 d7 00 	sts	0x00D7, r24
     f32:	8c e0       	ldi	r24, 0x0C	; 12
     f34:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     f36:	8e e0       	ldi	r24, 0x0E	; 14
     f38:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     f3a:	09 b4       	in	r0, 0x29	; 41
     f3c:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     f3e:	fd cf       	rjmp	.-6      	; 0xf3a <USB_ResetInterface+0x34>
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	80 93 51 01 	sts	0x0151, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     f46:	10 92 47 01 	sts	0x0147, r1
	USB_Host_ConfigurationNumber = 0;
     f4a:	80 e4       	ldi	r24, 0x40	; 64
     f4c:	80 93 39 01 	sts	0x0139, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     f50:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     f54:	80 64       	ori	r24, 0x40	; 64
     f56:	80 93 d8 00 	sts	0x00D8, r24
     f5a:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     f5e:	81 60       	ori	r24, 0x01	; 1
     f60:	80 93 dd 00 	sts	0x00DD, r24
     f64:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     f68:	84 60       	ori	r24, 0x04	; 4
     f6a:	80 93 dd 00 	sts	0x00DD, r24
     f6e:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     f72:	8f 7e       	andi	r24, 0xEF	; 239
     f74:	80 93 d7 00 	sts	0x00D7, r24
     f78:	6f 9a       	sbi	0x0d, 7	; 13
     f7a:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     f7c:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     f80:	81 60       	ori	r24, 0x01	; 1
     f82:	80 93 de 00 	sts	0x00DE, r24
     f86:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     f8a:	84 60       	ori	r24, 0x04	; 4
     f8c:	80 93 de 00 	sts	0x00DE, r24
     f90:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     f94:	8e 7f       	andi	r24, 0xFE	; 254
     f96:	80 93 e0 00 	sts	0x00E0, r24
     f9a:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     f9e:	80 61       	ori	r24, 0x10	; 16
     fa0:	80 93 d8 00 	sts	0x00D8, r24
     fa4:	08 95       	ret

00000fa6 <USB_Init>:
     fa6:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     faa:	80 81       	ld	r24, Z
     fac:	8f 7e       	andi	r24, 0xEF	; 239
     fae:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     fb0:	e7 ed       	ldi	r30, 0xD7	; 215
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	81 60       	ori	r24, 0x01	; 1
     fb8:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	80 93 48 01 	sts	0x0148, r24

	USB_ResetInterface();
     fc0:	a2 cf       	rjmp	.-188    	; 0xf06 <USB_ResetInterface>

00000fc2 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     fc2:	e8 ed       	ldi	r30, 0xD8	; 216
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	8c 7f       	andi	r24, 0xFC	; 252
     fca:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     fcc:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     fd0:	08 95       	ret

00000fd2 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     fd2:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     fd6:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     fda:	08 95       	ret

00000fdc <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     fdc:	1f 92       	push	r1
     fde:	0f 92       	push	r0
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	0f 92       	push	r0
     fe4:	0b b6       	in	r0, 0x3b	; 59
     fe6:	0f 92       	push	r0
     fe8:	11 24       	eor	r1, r1
     fea:	2f 93       	push	r18
     fec:	3f 93       	push	r19
     fee:	4f 93       	push	r20
     ff0:	5f 93       	push	r21
     ff2:	6f 93       	push	r22
     ff4:	7f 93       	push	r23
     ff6:	8f 93       	push	r24
     ff8:	9f 93       	push	r25
     ffa:	af 93       	push	r26
     ffc:	bf 93       	push	r27
     ffe:	ef 93       	push	r30
    1000:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1002:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    1006:	85 ff       	sbrs	r24, 5
    1008:	0a c0       	rjmp	.+20     	; 0x101e <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    100a:	80 91 a0 00 	lds	r24, 0x00A0
    100e:	85 ff       	sbrs	r24, 5
    1010:	06 c0       	rjmp	.+12     	; 0x101e <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1012:	80 91 9f 00 	lds	r24, 0x009F
    1016:	8f 7d       	andi	r24, 0xDF	; 223
    1018:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    101c:	10 d1       	rcall	.+544    	; 0x123e <USB_Event_Stub>
    101e:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    1022:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    1024:	15 c0       	rjmp	.+42     	; 0x1050 <__vector_10+0x74>
    1026:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    102a:	81 ff       	sbrs	r24, 1
    102c:	11 c0       	rjmp	.+34     	; 0x1050 <__vector_10+0x74>
    102e:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1032:	8d 7f       	andi	r24, 0xFD	; 253
    1034:	80 93 9f 00 	sts	0x009F, r24
    1038:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    103c:	8e 7f       	andi	r24, 0xFE	; 254
    103e:	80 93 9f 00 	sts	0x009F, r24
    1042:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1046:	8d 7f       	andi	r24, 0xFD	; 253
    1048:	80 93 a0 00 	sts	0x00A0, r24
    104c:	e5 d9       	rcall	.-3126   	; 0x418 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    104e:	5b df       	rcall	.-330    	; 0xf06 <USB_ResetInterface>
    1050:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
    1054:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1056:	15 c0       	rjmp	.+42     	; 0x1082 <__vector_10+0xa6>
    1058:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    105c:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    105e:	11 c0       	rjmp	.+34     	; 0x1082 <__vector_10+0xa6>
    1060:	80 91 df 00 	lds	r24, 0x00DF
    1064:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1066:	80 93 df 00 	sts	0x00DF, r24
    106a:	77 98       	cbi	0x0e, 7	; 14
    106c:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    1070:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1072:	80 93 dd 00 	sts	0x00DD, r24
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	78 da       	rcall	.-2832   	; 0x56a <EVENT_USB_Host_HostError>
    107a:	ce d9       	rcall	.-3172   	; 0x418 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	80 93 51 01 	sts	0x0151, r24
		EVENT_USB_Host_DeviceUnattached();
    1082:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
    1086:	80 ff       	sbrs	r24, 0
    1088:	17 c0       	rjmp	.+46     	; 0x10b8 <__vector_10+0xdc>
    108a:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    108e:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1090:	13 c0       	rjmp	.+38     	; 0x10b8 <__vector_10+0xdc>
    1092:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    1096:	8e 7f       	andi	r24, 0xFE	; 254
    1098:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    109c:	80 91 de 00 	lds	r24, 0x00DE
    10a0:	8e 7f       	andi	r24, 0xFE	; 254
    10a2:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    10a6:	b2 d9       	rcall	.-3228   	; 0x40c <EVENT_USB_Host_DeviceAttached>
    10a8:	80 91 a0 00 	lds	r24, 0x00A0
    10ac:	82 60       	ori	r24, 0x02	; 2
    10ae:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    10b2:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    10b4:	80 93 51 01 	sts	0x0151, r24
    10b8:	80 91 df 00 	lds	r24, 0x00DF
    10bc:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    10be:	0e c0       	rjmp	.+28     	; 0x10dc <__vector_10+0x100>
    10c0:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    10c4:	82 ff       	sbrs	r24, 2
    10c6:	0a c0       	rjmp	.+20     	; 0x10dc <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    10c8:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    10cc:	8b 7f       	andi	r24, 0xFB	; 251
    10ce:	80 93 df 00 	sts	0x00DF, r24
    10d2:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	69 da       	rcall	.-2862   	; 0x5aa <EVENT_USB_Host_DeviceEnumerationFailed>
    10d8:	9f d9       	rcall	.-3266   	; 0x418 <EVENT_USB_Host_DeviceUnattached>
    10da:	15 df       	rcall	.-470    	; 0xf06 <USB_ResetInterface>
    10dc:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    10de:	ef 91       	pop	r30
    10e0:	bf 91       	pop	r27
    10e2:	af 91       	pop	r26
    10e4:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
    10e6:	8f 91       	pop	r24
    10e8:	7f 91       	pop	r23

		USB_ResetInterface();
    10ea:	6f 91       	pop	r22
    10ec:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    10ee:	4f 91       	pop	r20
    10f0:	3f 91       	pop	r19
    10f2:	2f 91       	pop	r18
    10f4:	0f 90       	pop	r0
    10f6:	0b be       	out	0x3b, r0	; 59
    10f8:	0f 90       	pop	r0
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	0f 90       	pop	r0
    10fe:	1f 90       	pop	r1
    1100:	18 95       	reti

00001102 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1102:	cf 92       	push	r12
    1104:	df 92       	push	r13
    1106:	ef 92       	push	r14
    1108:	ff 92       	push	r15
    110a:	0f 93       	push	r16
    110c:	1f 93       	push	r17
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	29 97       	sbiw	r28, 0x09	; 9
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	6b 01       	movw	r12, r22
    1124:	8a 01       	movw	r16, r20
    1126:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1128:	90 e8       	ldi	r25, 0x80	; 128
    112a:	90 93 49 01 	sts	0x0149, r25
    112e:	96 e0       	ldi	r25, 0x06	; 6
    1130:	90 93 4a 01 	sts	0x014A, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    113a:	90 93 4c 01 	sts	0x014C, r25
    113e:	80 93 4b 01 	sts	0x014B, r24
    1142:	10 92 4e 01 	sts	0x014E, r1
    1146:	10 92 4d 01 	sts	0x014D, r1
    114a:	89 e0       	ldi	r24, 0x09	; 9
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	90 93 50 01 	sts	0x0150, r25
    1152:	80 93 4f 01 	sts	0x014F, r24
    1156:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    115a:	ce 01       	movw	r24, r28
    115c:	01 96       	adiw	r24, 0x01	; 1
    115e:	98 d0       	rcall	.+304    	; 0x1290 <USB_Host_SendControlRequest>
    1160:	88 23       	and	r24, r24
    1162:	b9 f4       	brne	.+46     	; 0x1192 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1166:	9c 81       	ldd	r25, Y+4	; 0x04
    1168:	f6 01       	movw	r30, r12
    116a:	91 83       	std	Z+1, r25	; 0x01
    116c:	80 83       	st	Z, r24
    116e:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
    1170:	f9 06       	cpc	r15, r25
    1172:	70 f0       	brcs	.+28     	; 0x1190 <USB_Host_GetDeviceConfigDescriptor+0x8e>
    1174:	90 93 50 01 	sts	0x0150, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1178:	80 93 4f 01 	sts	0x014F, r24
    117c:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    117e:	88 d0       	rcall	.+272    	; 0x1290 <USB_Host_SendControlRequest>
    1180:	88 23       	and	r24, r24
    1182:	39 f4       	brne	.+14     	; 0x1192 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1184:	f8 01       	movw	r30, r16
    1186:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1188:	92 30       	cpi	r25, 0x02	; 2
    118a:	19 f0       	breq	.+6      	; 0x1192 <USB_Host_GetDeviceConfigDescriptor+0x90>
    118c:	86 e0       	ldi	r24, 0x06	; 6
    118e:	01 c0       	rjmp	.+2      	; 0x1192 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    1190:	85 e0       	ldi	r24, 0x05	; 5
    1192:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1194:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	ff 90       	pop	r15
    11a8:	ef 90       	pop	r14
    11aa:	df 90       	pop	r13
    11ac:	cf 90       	pop	r12
    11ae:	08 95       	ret

000011b0 <USB_GetNextDescriptorComp>:
    11b0:	af 92       	push	r10
    11b2:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    11b4:	cf 92       	push	r12
    11b6:	df 92       	push	r13
    11b8:	ef 92       	push	r14
    11ba:	ff 92       	push	r15
    11bc:	0f 93       	push	r16
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	7c 01       	movw	r14, r24
    11c6:	8b 01       	movw	r16, r22
    11c8:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    11ca:	28 c0       	rjmp	.+80     	; 0x121c <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    11cc:	f8 01       	movw	r30, r16
    11ce:	c0 80       	ld	r12, Z
    11d0:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    11d2:	f6 01       	movw	r30, r12
    11d4:	80 81       	ld	r24, Z
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	9e 01       	movw	r18, r28
    11da:	8c 17       	cp	r24, r28
    11dc:	9d 07       	cpc	r25, r29
    11de:	08 f4       	brcc	.+2      	; 0x11e2 <USB_GetNextDescriptorComp+0x32>
    11e0:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    11e2:	c6 01       	movw	r24, r12
    11e4:	82 0f       	add	r24, r18
    11e6:	93 1f       	adc	r25, r19
    11e8:	f8 01       	movw	r30, r16
    11ea:	91 83       	std	Z+1, r25	; 0x01
    11ec:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
    11ee:	f7 01       	movw	r30, r14
    11f0:	80 81       	ld	r24, Z
    11f2:	91 81       	ldd	r25, Z+1	; 0x01
    11f4:	82 1b       	sub	r24, r18
    11f6:	93 0b       	sbc	r25, r19
    11f8:	91 83       	std	Z+1, r25	; 0x01
    11fa:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    11fc:	f8 01       	movw	r30, r16
    11fe:	80 81       	ld	r24, Z
    1200:	91 81       	ldd	r25, Z+1	; 0x01
    1202:	f5 01       	movw	r30, r10
    1204:	09 95       	icall
    1206:	82 30       	cpi	r24, 0x02	; 2
    1208:	49 f0       	breq	.+18     	; 0x121c <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	69 f4       	brne	.+26     	; 0x1228 <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
    120e:	f8 01       	movw	r30, r16
    1210:	d1 82       	std	Z+1, r13	; 0x01
    1212:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
    1214:	f7 01       	movw	r30, r14
    1216:	d1 83       	std	Z+1, r29	; 0x01
    1218:	c0 83       	st	Z, r28
    121a:	06 c0       	rjmp	.+12     	; 0x1228 <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    121c:	f7 01       	movw	r30, r14
    121e:	c0 81       	ld	r28, Z
    1220:	d1 81       	ldd	r29, Z+1	; 0x01
    1222:	20 97       	sbiw	r28, 0x00	; 0
    1224:	99 f6       	brne	.-90     	; 0x11cc <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1226:	82 e0       	ldi	r24, 0x02	; 2
}
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	ff 90       	pop	r15
    1232:	ef 90       	pop	r14
    1234:	df 90       	pop	r13
    1236:	cf 90       	pop	r12
    1238:	bf 90       	pop	r11
    123a:	af 90       	pop	r10
    123c:	08 95       	ret

0000123e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    123e:	08 95       	ret

00001240 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1248:	c9 ee       	ldi	r28, 0xE9	; 233
    124a:	d3 e0       	ldi	r29, 0x03	; 3
    124c:	06 c0       	rjmp	.+12     	; 0x125a <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	c6 db       	rcall	.-2164   	; 0x9de <USB_Host_WaitMS>
    1252:	88 23       	and	r24, r24
    1254:	c9 f4       	brne	.+50     	; 0x1288 <USB_Host_WaitForIOS+0x48>
    1256:	21 97       	sbiw	r28, 0x01	; 1
    1258:	b1 f0       	breq	.+44     	; 0x1286 <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    125a:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    125c:	29 f4       	brne	.+10     	; 0x1268 <USB_Host_WaitForIOS+0x28>
    125e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1262:	83 ff       	sbrs	r24, 3
    1264:	f4 cf       	rjmp	.-24     	; 0x124e <USB_Host_WaitForIOS+0xe>
    1266:	0d c0       	rjmp	.+26     	; 0x1282 <USB_Host_WaitForIOS+0x42>
    1268:	11 30       	cpi	r17, 0x01	; 1
    126a:	29 f4       	brne	.+10     	; 0x1276 <USB_Host_WaitForIOS+0x36>
    126c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1270:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1272:	ed cf       	rjmp	.-38     	; 0x124e <USB_Host_WaitForIOS+0xe>
    1274:	06 c0       	rjmp	.+12     	; 0x1282 <USB_Host_WaitForIOS+0x42>
    1276:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1278:	51 f7       	brne	.-44     	; 0x124e <USB_Host_WaitForIOS+0xe>
    127a:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    127e:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1280:	e6 cf       	rjmp	.-52     	; 0x124e <USB_Host_WaitForIOS+0xe>
    1282:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1284:	01 c0       	rjmp	.+2      	; 0x1288 <USB_Host_WaitForIOS+0x48>
    1286:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1288:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	08 95       	ret

00001290 <USB_Host_SendControlRequest>:
    1290:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1292:	ff 92       	push	r15
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    129e:	e0 90 9e 00 	lds	r14, 0x009E
    12a2:	ff 24       	eor	r15, r15
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	e8 22       	and	r14, r24
    12a8:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    12aa:	00 91 4f 01 	lds	r16, 0x014F
    12ae:	10 91 50 01 	lds	r17, 0x0150
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    12b2:	80 91 9e 00 	lds	r24, 0x009E
    12b6:	81 60       	ori	r24, 0x01	; 1
    12b8:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	8f db       	rcall	.-2274   	; 0x9de <USB_Host_WaitMS>
    12c0:	88 23       	and	r24, r24
    12c2:	09 f0       	breq	.+2      	; 0x12c6 <USB_Host_SendControlRequest+0x36>
    12c4:	ca c0       	rjmp	.+404    	; 0x145a <USB_Host_SendControlRequest+0x1ca>
    12c6:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    12ca:	8f 7c       	andi	r24, 0xCF	; 207
    12cc:	80 93 aa 00 	sts	0x00AA, r24
    12d0:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    12d4:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    12d8:	8f 7e       	andi	r24, 0xEF	; 239
    12da:	80 93 a6 00 	sts	0x00A6, r24
    12de:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12e2:	8f 7b       	andi	r24, 0xBF	; 191
    12e4:	80 93 a9 00 	sts	0x00A9, r24
    12e8:	88 e0       	ldi	r24, 0x08	; 8
    12ea:	e9 e4       	ldi	r30, 0x49	; 73
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    12ec:	f1 e0       	ldi	r31, 0x01	; 1
    12ee:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    12f0:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    12f4:	81 50       	subi	r24, 0x01	; 1
    12f6:	d9 f7       	brne	.-10     	; 0x12ee <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    12f8:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    12fc:	87 77       	andi	r24, 0x77	; 119
    12fe:	80 93 a6 00 	sts	0x00A6, r24
    1302:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1304:	9d df       	rcall	.-198    	; 0x1240 <USB_Host_WaitForIOS>
    1306:	88 23       	and	r24, r24
    1308:	09 f0       	breq	.+2      	; 0x130c <USB_Host_SendControlRequest+0x7c>
    130a:	a7 c0       	rjmp	.+334    	; 0x145a <USB_Host_SendControlRequest+0x1ca>
    130c:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1310:	80 64       	ori	r24, 0x40	; 64
    1312:	80 93 a9 00 	sts	0x00A9, r24
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	62 db       	rcall	.-2364   	; 0x9de <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    131a:	88 23       	and	r24, r24
    131c:	09 f0       	breq	.+2      	; 0x1320 <USB_Host_SendControlRequest+0x90>
    131e:	9d c0       	rjmp	.+314    	; 0x145a <USB_Host_SendControlRequest+0x1ca>
    1320:	80 91 49 01 	lds	r24, 0x0149
    1324:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1326:	4f c0       	rjmp	.+158    	; 0x13c6 <USB_Host_SendControlRequest+0x136>
    1328:	80 91 aa 00 	lds	r24, 0x00AA
    132c:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    132e:	80 61       	ori	r24, 0x10	; 16
    1330:	80 93 aa 00 	sts	0x00AA, r24
    1334:	20 97       	sbiw	r28, 0x00	; 0
    1336:	61 f5       	brne	.+88     	; 0x1390 <USB_Host_SendControlRequest+0x100>
    1338:	2e c0       	rjmp	.+92     	; 0x1396 <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    133a:	80 91 a9 00 	lds	r24, 0x00A9
    133e:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1340:	80 93 a9 00 	sts	0x00A9, r24
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	7c df       	rcall	.-264    	; 0x1240 <USB_Host_WaitForIOS>
    1348:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    134a:	09 f0       	breq	.+2      	; 0x134e <USB_Host_SendControlRequest+0xbe>
    134c:	86 c0       	rjmp	.+268    	; 0x145a <USB_Host_SendControlRequest+0x1ca>
    134e:	80 91 f6 00 	lds	r24, 0x00F6
    1352:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	41 f4       	brne	.+16     	; 0x136a <USB_Host_SendControlRequest+0xda>
    135a:	00 e0       	ldi	r16, 0x00	; 0
    135c:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    135e:	05 c0       	rjmp	.+10     	; 0x136a <USB_Host_SendControlRequest+0xda>
    1360:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
    1364:	89 93       	st	Y+, r24
    1366:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1368:	10 40       	sbci	r17, 0x00	; 0
    136a:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
    136e:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	19 f0       	breq	.+6      	; 0x137c <USB_Host_SendControlRequest+0xec>
    1376:	01 15       	cp	r16, r1
    1378:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    137a:	91 f7       	brne	.-28     	; 0x1360 <USB_Host_SendControlRequest+0xd0>
    137c:	80 91 a9 00 	lds	r24, 0x00A9
    1380:	80 64       	ori	r24, 0x40	; 64
    1382:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1386:	80 91 a6 00 	lds	r24, 0x00A6
    138a:	8e 77       	andi	r24, 0x7E	; 126
    138c:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1390:	01 15       	cp	r16, r1
    1392:	11 05       	cpc	r17, r1
    1394:	91 f6       	brne	.-92     	; 0x133a <USB_Host_SendControlRequest+0xaa>
    1396:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    139a:	8f 7c       	andi	r24, 0xCF	; 207
    139c:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    139e:	80 93 aa 00 	sts	0x00AA, r24
    13a2:	80 91 a9 00 	lds	r24, 0x00A9
    13a6:	8f 7b       	andi	r24, 0xBF	; 191
    13a8:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13ac:	82 e0       	ldi	r24, 0x02	; 2
    13ae:	48 df       	rcall	.-368    	; 0x1240 <USB_Host_WaitForIOS>
    13b0:	88 23       	and	r24, r24
    13b2:	09 f0       	breq	.+2      	; 0x13b6 <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    13b4:	52 c0       	rjmp	.+164    	; 0x145a <USB_Host_SendControlRequest+0x1ca>
    13b6:	80 91 a6 00 	lds	r24, 0x00A6
    13ba:	8b 77       	andi	r24, 0x7B	; 123
    13bc:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    13c0:	82 e0       	ldi	r24, 0x02	; 2
    13c2:	3e df       	rcall	.-388    	; 0x1240 <USB_Host_WaitForIOS>
    13c4:	4a c0       	rjmp	.+148    	; 0x145a <USB_Host_SendControlRequest+0x1ca>
    13c6:	20 97       	sbiw	r28, 0x00	; 0
    13c8:	a1 f1       	breq	.+104    	; 0x1432 <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    13ca:	80 91 aa 00 	lds	r24, 0x00AA
    13ce:	8f 7c       	andi	r24, 0xCF	; 207
    13d0:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    13d2:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    13d6:	80 91 a9 00 	lds	r24, 0x00A9
    13da:	8f 7b       	andi	r24, 0xBF	; 191
    13dc:	80 93 a9 00 	sts	0x00A9, r24
    13e0:	1c c0       	rjmp	.+56     	; 0x141a <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13e2:	2e df       	rcall	.-420    	; 0x1240 <USB_Host_WaitForIOS>
    13e4:	88 23       	and	r24, r24
    13e6:	c9 f5       	brne	.+114    	; 0x145a <USB_Host_SendControlRequest+0x1ca>
    13e8:	fe 01       	movw	r30, r28
    13ea:	07 c0       	rjmp	.+14     	; 0x13fa <USB_Host_SendControlRequest+0x16a>
    13ec:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    13ee:	ef 01       	movw	r28, r30
    13f0:	80 93 af 00 	sts	0x00AF, r24
    13f4:	01 50       	subi	r16, 0x01	; 1
    13f6:	10 40       	sbci	r17, 0x00	; 0
    13f8:	59 f0       	breq	.+22     	; 0x1410 <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    13fa:	ef 01       	movw	r28, r30
    13fc:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1400:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    1404:	80 91 39 01 	lds	r24, 0x0139
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1408:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    140a:	28 17       	cp	r18, r24
    140c:	39 07       	cpc	r19, r25
    140e:	70 f3       	brcs	.-36     	; 0x13ec <USB_Host_SendControlRequest+0x15c>
    1410:	80 91 a6 00 	lds	r24, 0x00A6
    1414:	8b 77       	andi	r24, 0x7B	; 123
    1416:	80 93 a6 00 	sts	0x00A6, r24
    141a:	82 e0       	ldi	r24, 0x02	; 2
    141c:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    141e:	11 05       	cpc	r17, r1
    1420:	01 f7       	brne	.-64     	; 0x13e2 <USB_Host_SendControlRequest+0x152>
    1422:	0e df       	rcall	.-484    	; 0x1240 <USB_Host_WaitForIOS>
    1424:	88 23       	and	r24, r24
    1426:	c9 f4       	brne	.+50     	; 0x145a <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1428:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    142c:	80 64       	ori	r24, 0x40	; 64
    142e:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1432:	80 91 aa 00 	lds	r24, 0x00AA
    1436:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1438:	80 61       	ori	r24, 0x10	; 16
    143a:	80 93 aa 00 	sts	0x00AA, r24
    143e:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1442:	8f 7b       	andi	r24, 0xBF	; 191
    1444:	80 93 a9 00 	sts	0x00A9, r24
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	fa de       	rcall	.-524    	; 0x1240 <USB_Host_WaitForIOS>
    144c:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    144e:	29 f4       	brne	.+10     	; 0x145a <USB_Host_SendControlRequest+0x1ca>
    1450:	90 91 a6 00 	lds	r25, 0x00A6
    1454:	9e 77       	andi	r25, 0x7E	; 126
    1456:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    145a:	90 91 a9 00 	lds	r25, 0x00A9
    145e:	90 64       	ori	r25, 0x40	; 64
    1460:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1464:	e1 14       	cp	r14, r1
    1466:	f1 04       	cpc	r15, r1
    1468:	29 f4       	brne	.+10     	; 0x1474 <USB_Host_SendControlRequest+0x1e4>
    146a:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    146e:	9e 7f       	andi	r25, 0xFE	; 254
    1470:	90 93 9e 00 	sts	0x009E, r25
    1474:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1476:	90 93 a8 00 	sts	0x00A8, r25
    147a:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	1f 91       	pop	r17
    1484:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1486:	ff 90       	pop	r15
    1488:	ef 90       	pop	r14
    148a:	08 95       	ret

0000148c <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    148c:	cf 93       	push	r28
    148e:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1490:	10 92 49 01 	sts	0x0149, r1
    1494:	89 e0       	ldi	r24, 0x09	; 9
    1496:	80 93 4a 01 	sts	0x014A, r24
    149a:	c0 93 4b 01 	sts	0x014B, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    149e:	10 92 4c 01 	sts	0x014C, r1
    14a2:	10 92 4e 01 	sts	0x014E, r1
    14a6:	10 92 4d 01 	sts	0x014D, r1
    14aa:	10 92 50 01 	sts	0x0150, r1
    14ae:	10 92 4f 01 	sts	0x014F, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    14b2:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	ea de       	rcall	.-556    	; 0x1290 <USB_Host_SendControlRequest>
    14bc:	88 23       	and	r24, r24
    14be:	49 f4       	brne	.+18     	; 0x14d2 <USB_Host_SetDeviceConfiguration+0x46>
    14c0:	c0 93 47 01 	sts	0x0147, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    14c4:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    14c6:	11 f0       	breq	.+4      	; 0x14cc <USB_Host_SetDeviceConfiguration+0x40>
    14c8:	9b e0       	ldi	r25, 0x0B	; 11
    14ca:	01 c0       	rjmp	.+2      	; 0x14ce <USB_Host_SetDeviceConfiguration+0x42>
    14cc:	9a e0       	ldi	r25, 0x0A	; 10
    14ce:	90 93 51 01 	sts	0x0151, r25
    14d2:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    14d4:	08 95       	ret

000014d6 <USB_Host_SetInterfaceAltSetting>:
    14d6:	e9 e4       	ldi	r30, 0x49	; 73
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    14d8:	f1 e0       	ldi	r31, 0x01	; 1
    14da:	91 e0       	ldi	r25, 0x01	; 1
    14dc:	90 93 49 01 	sts	0x0149, r25
    14e0:	9b e0       	ldi	r25, 0x0B	; 11
    14e2:	90 93 4a 01 	sts	0x014A, r25
    14e6:	60 93 4b 01 	sts	0x014B, r22
    14ea:	13 82       	std	Z+3, r1	; 0x03
    14ec:	80 93 4d 01 	sts	0x014D, r24
    14f0:	15 82       	std	Z+5, r1	; 0x05
    14f2:	10 92 50 01 	sts	0x0150, r1
    14f6:	10 92 4f 01 	sts	0x014F, r1
    14fa:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	c6 ce       	rjmp	.-628    	; 0x1290 <USB_Host_SendControlRequest>

00001504 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1504:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1506:	c0 91 a7 00 	lds	r28, 0x00A7
    150a:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    150c:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1510:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1514:	b9 da       	rcall	.-2702   	; 0xa88 <USB_Host_ProcessNextHostState>
    1516:	c0 93 a7 00 	sts	0x00A7, r28
    151a:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    151c:	08 95       	ret

0000151e <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    151e:	90 91 c8 00 	lds	r25, 0x00C8
    1522:	95 ff       	sbrs	r25, 5
    1524:	fc cf       	rjmp	.-8      	; 0x151e <Serial_putchar>
				UDR1 = DataByte;
    1526:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	08 95       	ret

00001530 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1530:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1534:	87 ff       	sbrs	r24, 7
    1536:	08 c0       	rjmp	.+16     	; 0x1548 <Serial_getchar+0x18>
    1538:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    153c:	87 ff       	sbrs	r24, 7
    153e:	07 c0       	rjmp	.+14     	; 0x154e <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1540:	80 91 ce 00 	lds	r24, 0x00CE
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	08 95       	ret
	  return _FDEV_EOF;
    1548:	8e ef       	ldi	r24, 0xFE	; 254
    154a:	9f ef       	ldi	r25, 0xFF	; 255
    154c:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    154e:	8f ef       	ldi	r24, 0xFF	; 255
    1550:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1552:	08 95       	ret

00001554 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1554:	fc 01       	movw	r30, r24
	if (!(Stream))
    1556:	00 97       	sbiw	r24, 0x00	; 0
    1558:	51 f4       	brne	.+20     	; 0x156e <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    155a:	e2 e5       	ldi	r30, 0x52	; 82
    155c:	f1 e0       	ldi	r31, 0x01	; 1
    155e:	f0 93 61 01 	sts	0x0161, r31
    1562:	e0 93 60 01 	sts	0x0160, r30
		stdout = Stream;
    1566:	f0 93 63 01 	sts	0x0163, r31
    156a:	e0 93 62 01 	sts	0x0162, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    156e:	8e e0       	ldi	r24, 0x0E	; 14
    1570:	df 01       	movw	r26, r30
    1572:	1d 92       	st	X+, r1
    1574:	8a 95       	dec	r24
    1576:	e9 f7       	brne	.-6      	; 0x1572 <Serial_CreateStream+0x1e>
    1578:	83 e0       	ldi	r24, 0x03	; 3
    157a:	83 83       	std	Z+3, r24	; 0x03
    157c:	8f e8       	ldi	r24, 0x8F	; 143
    157e:	9a e0       	ldi	r25, 0x0A	; 10
    1580:	91 87       	std	Z+9, r25	; 0x09
    1582:	80 87       	std	Z+8, r24	; 0x08
    1584:	88 e9       	ldi	r24, 0x98	; 152
    1586:	9a e0       	ldi	r25, 0x0A	; 10
    1588:	93 87       	std	Z+11, r25	; 0x0b
    158a:	82 87       	std	Z+10, r24	; 0x0a
}
    158c:	08 95       	ret

0000158e <memmove>:
    158e:	68 17       	cp	r22, r24
    1590:	79 07       	cpc	r23, r25
    1592:	68 f4       	brcc	.+26     	; 0x15ae <memmove+0x20>
    1594:	fb 01       	movw	r30, r22
    1596:	dc 01       	movw	r26, r24
    1598:	e4 0f       	add	r30, r20
    159a:	f5 1f       	adc	r31, r21
    159c:	a4 0f       	add	r26, r20
    159e:	b5 1f       	adc	r27, r21
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <memmove+0x18>
    15a2:	02 90       	ld	r0, -Z
    15a4:	0e 92       	st	-X, r0
    15a6:	41 50       	subi	r20, 0x01	; 1
    15a8:	50 40       	sbci	r21, 0x00	; 0
    15aa:	d8 f7       	brcc	.-10     	; 0x15a2 <memmove+0x14>
    15ac:	08 95       	ret
    15ae:	53 c2       	rjmp	.+1190   	; 0x1a56 <memcpy>

000015b0 <printf_P>:
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	fe 01       	movw	r30, r28
    15ba:	35 96       	adiw	r30, 0x05	; 5
    15bc:	61 91       	ld	r22, Z+
    15be:	71 91       	ld	r23, Z+
    15c0:	80 91 62 01 	lds	r24, 0x0162
    15c4:	90 91 63 01 	lds	r25, 0x0163
    15c8:	dc 01       	movw	r26, r24
    15ca:	13 96       	adiw	r26, 0x03	; 3
    15cc:	2c 91       	ld	r18, X
    15ce:	13 97       	sbiw	r26, 0x03	; 3
    15d0:	28 60       	ori	r18, 0x08	; 8
    15d2:	13 96       	adiw	r26, 0x03	; 3
    15d4:	2c 93       	st	X, r18
    15d6:	af 01       	movw	r20, r30
    15d8:	39 d0       	rcall	.+114    	; 0x164c <vfprintf>
    15da:	e0 91 62 01 	lds	r30, 0x0162
    15de:	f0 91 63 01 	lds	r31, 0x0163
    15e2:	23 81       	ldd	r18, Z+3	; 0x03
    15e4:	27 7f       	andi	r18, 0xF7	; 247
    15e6:	23 83       	std	Z+3, r18	; 0x03
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	08 95       	ret

000015ee <puts_P>:
    15ee:	0f 93       	push	r16
    15f0:	1f 93       	push	r17
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
    15f6:	8c 01       	movw	r16, r24
    15f8:	e0 91 62 01 	lds	r30, 0x0162
    15fc:	f0 91 63 01 	lds	r31, 0x0163
    1600:	83 81       	ldd	r24, Z+3	; 0x03
    1602:	81 ff       	sbrs	r24, 1
    1604:	1b c0       	rjmp	.+54     	; 0x163c <puts_P+0x4e>
    1606:	c0 e0       	ldi	r28, 0x00	; 0
    1608:	d0 e0       	ldi	r29, 0x00	; 0
    160a:	07 c0       	rjmp	.+14     	; 0x161a <puts_P+0x2c>
    160c:	09 95       	icall
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	11 f0       	breq	.+4      	; 0x1616 <puts_P+0x28>
    1612:	cf ef       	ldi	r28, 0xFF	; 255
    1614:	df ef       	ldi	r29, 0xFF	; 255
    1616:	0f 5f       	subi	r16, 0xFF	; 255
    1618:	1f 4f       	sbci	r17, 0xFF	; 255
    161a:	f8 01       	movw	r30, r16
    161c:	84 91       	lpm	r24, Z
    161e:	60 91 62 01 	lds	r22, 0x0162
    1622:	70 91 63 01 	lds	r23, 0x0163
    1626:	db 01       	movw	r26, r22
    1628:	18 96       	adiw	r26, 0x08	; 8
    162a:	ed 91       	ld	r30, X+
    162c:	fc 91       	ld	r31, X
    162e:	19 97       	sbiw	r26, 0x09	; 9
    1630:	88 23       	and	r24, r24
    1632:	61 f7       	brne	.-40     	; 0x160c <puts_P+0x1e>
    1634:	8a e0       	ldi	r24, 0x0A	; 10
    1636:	09 95       	icall
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	11 f0       	breq	.+4      	; 0x1640 <puts_P+0x52>
    163c:	cf ef       	ldi	r28, 0xFF	; 255
    163e:	df ef       	ldi	r29, 0xFF	; 255
    1640:	ce 01       	movw	r24, r28
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	08 95       	ret

0000164c <vfprintf>:
    164c:	2f 92       	push	r2
    164e:	3f 92       	push	r3
    1650:	4f 92       	push	r4
    1652:	5f 92       	push	r5
    1654:	6f 92       	push	r6
    1656:	7f 92       	push	r7
    1658:	8f 92       	push	r8
    165a:	9f 92       	push	r9
    165c:	af 92       	push	r10
    165e:	bf 92       	push	r11
    1660:	cf 92       	push	r12
    1662:	df 92       	push	r13
    1664:	ef 92       	push	r14
    1666:	ff 92       	push	r15
    1668:	0f 93       	push	r16
    166a:	1f 93       	push	r17
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	2d 97       	sbiw	r28, 0x0d	; 13
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	de bf       	out	0x3e, r29	; 62
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	cd bf       	out	0x3d, r28	; 61
    1680:	3c 01       	movw	r6, r24
    1682:	7d 87       	std	Y+13, r23	; 0x0d
    1684:	6c 87       	std	Y+12, r22	; 0x0c
    1686:	5a 01       	movw	r10, r20
    1688:	fc 01       	movw	r30, r24
    168a:	17 82       	std	Z+7, r1	; 0x07
    168c:	16 82       	std	Z+6, r1	; 0x06
    168e:	83 81       	ldd	r24, Z+3	; 0x03
    1690:	81 ff       	sbrs	r24, 1
    1692:	bb c1       	rjmp	.+886    	; 0x1a0a <vfprintf+0x3be>
    1694:	2e 01       	movw	r4, r28
    1696:	08 94       	sec
    1698:	41 1c       	adc	r4, r1
    169a:	51 1c       	adc	r5, r1
    169c:	f3 01       	movw	r30, r6
    169e:	93 81       	ldd	r25, Z+3	; 0x03
    16a0:	ec 85       	ldd	r30, Y+12	; 0x0c
    16a2:	fd 85       	ldd	r31, Y+13	; 0x0d
    16a4:	93 fd       	sbrc	r25, 3
    16a6:	85 91       	lpm	r24, Z+
    16a8:	93 ff       	sbrs	r25, 3
    16aa:	81 91       	ld	r24, Z+
    16ac:	fd 87       	std	Y+13, r31	; 0x0d
    16ae:	ec 87       	std	Y+12, r30	; 0x0c
    16b0:	88 23       	and	r24, r24
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <vfprintf+0x6a>
    16b4:	a6 c1       	rjmp	.+844    	; 0x1a02 <vfprintf+0x3b6>
    16b6:	85 32       	cpi	r24, 0x25	; 37
    16b8:	41 f4       	brne	.+16     	; 0x16ca <vfprintf+0x7e>
    16ba:	93 fd       	sbrc	r25, 3
    16bc:	85 91       	lpm	r24, Z+
    16be:	93 ff       	sbrs	r25, 3
    16c0:	81 91       	ld	r24, Z+
    16c2:	fd 87       	std	Y+13, r31	; 0x0d
    16c4:	ec 87       	std	Y+12, r30	; 0x0c
    16c6:	85 32       	cpi	r24, 0x25	; 37
    16c8:	21 f4       	brne	.+8      	; 0x16d2 <vfprintf+0x86>
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	b3 01       	movw	r22, r6
    16ce:	d7 d1       	rcall	.+942    	; 0x1a7e <fputc>
    16d0:	e5 cf       	rjmp	.-54     	; 0x169c <vfprintf+0x50>
    16d2:	ff 24       	eor	r15, r15
    16d4:	ee 24       	eor	r14, r14
    16d6:	10 e0       	ldi	r17, 0x00	; 0
    16d8:	10 32       	cpi	r17, 0x20	; 32
    16da:	b0 f4       	brcc	.+44     	; 0x1708 <vfprintf+0xbc>
    16dc:	8b 32       	cpi	r24, 0x2B	; 43
    16de:	69 f0       	breq	.+26     	; 0x16fa <vfprintf+0xae>
    16e0:	8c 32       	cpi	r24, 0x2C	; 44
    16e2:	28 f4       	brcc	.+10     	; 0x16ee <vfprintf+0xa2>
    16e4:	80 32       	cpi	r24, 0x20	; 32
    16e6:	51 f0       	breq	.+20     	; 0x16fc <vfprintf+0xb0>
    16e8:	83 32       	cpi	r24, 0x23	; 35
    16ea:	71 f4       	brne	.+28     	; 0x1708 <vfprintf+0xbc>
    16ec:	0b c0       	rjmp	.+22     	; 0x1704 <vfprintf+0xb8>
    16ee:	8d 32       	cpi	r24, 0x2D	; 45
    16f0:	39 f0       	breq	.+14     	; 0x1700 <vfprintf+0xb4>
    16f2:	80 33       	cpi	r24, 0x30	; 48
    16f4:	49 f4       	brne	.+18     	; 0x1708 <vfprintf+0xbc>
    16f6:	11 60       	ori	r17, 0x01	; 1
    16f8:	2c c0       	rjmp	.+88     	; 0x1752 <vfprintf+0x106>
    16fa:	12 60       	ori	r17, 0x02	; 2
    16fc:	14 60       	ori	r17, 0x04	; 4
    16fe:	29 c0       	rjmp	.+82     	; 0x1752 <vfprintf+0x106>
    1700:	18 60       	ori	r17, 0x08	; 8
    1702:	27 c0       	rjmp	.+78     	; 0x1752 <vfprintf+0x106>
    1704:	10 61       	ori	r17, 0x10	; 16
    1706:	25 c0       	rjmp	.+74     	; 0x1752 <vfprintf+0x106>
    1708:	17 fd       	sbrc	r17, 7
    170a:	2e c0       	rjmp	.+92     	; 0x1768 <vfprintf+0x11c>
    170c:	28 2f       	mov	r18, r24
    170e:	20 53       	subi	r18, 0x30	; 48
    1710:	2a 30       	cpi	r18, 0x0A	; 10
    1712:	98 f4       	brcc	.+38     	; 0x173a <vfprintf+0xee>
    1714:	16 ff       	sbrs	r17, 6
    1716:	08 c0       	rjmp	.+16     	; 0x1728 <vfprintf+0xdc>
    1718:	8f 2d       	mov	r24, r15
    171a:	88 0f       	add	r24, r24
    171c:	f8 2e       	mov	r15, r24
    171e:	ff 0c       	add	r15, r15
    1720:	ff 0c       	add	r15, r15
    1722:	f8 0e       	add	r15, r24
    1724:	f2 0e       	add	r15, r18
    1726:	15 c0       	rjmp	.+42     	; 0x1752 <vfprintf+0x106>
    1728:	8e 2d       	mov	r24, r14
    172a:	88 0f       	add	r24, r24
    172c:	e8 2e       	mov	r14, r24
    172e:	ee 0c       	add	r14, r14
    1730:	ee 0c       	add	r14, r14
    1732:	e8 0e       	add	r14, r24
    1734:	e2 0e       	add	r14, r18
    1736:	10 62       	ori	r17, 0x20	; 32
    1738:	0c c0       	rjmp	.+24     	; 0x1752 <vfprintf+0x106>
    173a:	8e 32       	cpi	r24, 0x2E	; 46
    173c:	21 f4       	brne	.+8      	; 0x1746 <vfprintf+0xfa>
    173e:	16 fd       	sbrc	r17, 6
    1740:	60 c1       	rjmp	.+704    	; 0x1a02 <vfprintf+0x3b6>
    1742:	10 64       	ori	r17, 0x40	; 64
    1744:	06 c0       	rjmp	.+12     	; 0x1752 <vfprintf+0x106>
    1746:	8c 36       	cpi	r24, 0x6C	; 108
    1748:	11 f4       	brne	.+4      	; 0x174e <vfprintf+0x102>
    174a:	10 68       	ori	r17, 0x80	; 128
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <vfprintf+0x106>
    174e:	88 36       	cpi	r24, 0x68	; 104
    1750:	59 f4       	brne	.+22     	; 0x1768 <vfprintf+0x11c>
    1752:	ec 85       	ldd	r30, Y+12	; 0x0c
    1754:	fd 85       	ldd	r31, Y+13	; 0x0d
    1756:	93 fd       	sbrc	r25, 3
    1758:	85 91       	lpm	r24, Z+
    175a:	93 ff       	sbrs	r25, 3
    175c:	81 91       	ld	r24, Z+
    175e:	fd 87       	std	Y+13, r31	; 0x0d
    1760:	ec 87       	std	Y+12, r30	; 0x0c
    1762:	88 23       	and	r24, r24
    1764:	09 f0       	breq	.+2      	; 0x1768 <vfprintf+0x11c>
    1766:	b8 cf       	rjmp	.-144    	; 0x16d8 <vfprintf+0x8c>
    1768:	98 2f       	mov	r25, r24
    176a:	95 54       	subi	r25, 0x45	; 69
    176c:	93 30       	cpi	r25, 0x03	; 3
    176e:	18 f0       	brcs	.+6      	; 0x1776 <vfprintf+0x12a>
    1770:	90 52       	subi	r25, 0x20	; 32
    1772:	93 30       	cpi	r25, 0x03	; 3
    1774:	38 f4       	brcc	.+14     	; 0x1784 <vfprintf+0x138>
    1776:	24 e0       	ldi	r18, 0x04	; 4
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	a2 0e       	add	r10, r18
    177c:	b3 1e       	adc	r11, r19
    177e:	3f e3       	ldi	r19, 0x3F	; 63
    1780:	39 83       	std	Y+1, r19	; 0x01
    1782:	0f c0       	rjmp	.+30     	; 0x17a2 <vfprintf+0x156>
    1784:	83 36       	cpi	r24, 0x63	; 99
    1786:	31 f0       	breq	.+12     	; 0x1794 <vfprintf+0x148>
    1788:	83 37       	cpi	r24, 0x73	; 115
    178a:	81 f0       	breq	.+32     	; 0x17ac <vfprintf+0x160>
    178c:	83 35       	cpi	r24, 0x53	; 83
    178e:	09 f0       	breq	.+2      	; 0x1792 <vfprintf+0x146>
    1790:	56 c0       	rjmp	.+172    	; 0x183e <vfprintf+0x1f2>
    1792:	21 c0       	rjmp	.+66     	; 0x17d6 <vfprintf+0x18a>
    1794:	f5 01       	movw	r30, r10
    1796:	80 81       	ld	r24, Z
    1798:	89 83       	std	Y+1, r24	; 0x01
    179a:	22 e0       	ldi	r18, 0x02	; 2
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	a2 0e       	add	r10, r18
    17a0:	b3 1e       	adc	r11, r19
    17a2:	21 e0       	ldi	r18, 0x01	; 1
    17a4:	c2 2e       	mov	r12, r18
    17a6:	d1 2c       	mov	r13, r1
    17a8:	42 01       	movw	r8, r4
    17aa:	13 c0       	rjmp	.+38     	; 0x17d2 <vfprintf+0x186>
    17ac:	92 e0       	ldi	r25, 0x02	; 2
    17ae:	29 2e       	mov	r2, r25
    17b0:	31 2c       	mov	r3, r1
    17b2:	2a 0c       	add	r2, r10
    17b4:	3b 1c       	adc	r3, r11
    17b6:	f5 01       	movw	r30, r10
    17b8:	80 80       	ld	r8, Z
    17ba:	91 80       	ldd	r9, Z+1	; 0x01
    17bc:	16 ff       	sbrs	r17, 6
    17be:	03 c0       	rjmp	.+6      	; 0x17c6 <vfprintf+0x17a>
    17c0:	6f 2d       	mov	r22, r15
    17c2:	70 e0       	ldi	r23, 0x00	; 0
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <vfprintf+0x17e>
    17c6:	6f ef       	ldi	r22, 0xFF	; 255
    17c8:	7f ef       	ldi	r23, 0xFF	; 255
    17ca:	c4 01       	movw	r24, r8
    17cc:	4d d1       	rcall	.+666    	; 0x1a68 <strnlen>
    17ce:	6c 01       	movw	r12, r24
    17d0:	51 01       	movw	r10, r2
    17d2:	1f 77       	andi	r17, 0x7F	; 127
    17d4:	14 c0       	rjmp	.+40     	; 0x17fe <vfprintf+0x1b2>
    17d6:	82 e0       	ldi	r24, 0x02	; 2
    17d8:	28 2e       	mov	r2, r24
    17da:	31 2c       	mov	r3, r1
    17dc:	2a 0c       	add	r2, r10
    17de:	3b 1c       	adc	r3, r11
    17e0:	f5 01       	movw	r30, r10
    17e2:	80 80       	ld	r8, Z
    17e4:	91 80       	ldd	r9, Z+1	; 0x01
    17e6:	16 ff       	sbrs	r17, 6
    17e8:	03 c0       	rjmp	.+6      	; 0x17f0 <vfprintf+0x1a4>
    17ea:	6f 2d       	mov	r22, r15
    17ec:	70 e0       	ldi	r23, 0x00	; 0
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <vfprintf+0x1a8>
    17f0:	6f ef       	ldi	r22, 0xFF	; 255
    17f2:	7f ef       	ldi	r23, 0xFF	; 255
    17f4:	c4 01       	movw	r24, r8
    17f6:	24 d1       	rcall	.+584    	; 0x1a40 <strnlen_P>
    17f8:	6c 01       	movw	r12, r24
    17fa:	10 68       	ori	r17, 0x80	; 128
    17fc:	51 01       	movw	r10, r2
    17fe:	13 fd       	sbrc	r17, 3
    1800:	1a c0       	rjmp	.+52     	; 0x1836 <vfprintf+0x1ea>
    1802:	05 c0       	rjmp	.+10     	; 0x180e <vfprintf+0x1c2>
    1804:	80 e2       	ldi	r24, 0x20	; 32
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	b3 01       	movw	r22, r6
    180a:	39 d1       	rcall	.+626    	; 0x1a7e <fputc>
    180c:	ea 94       	dec	r14
    180e:	8e 2d       	mov	r24, r14
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	c8 16       	cp	r12, r24
    1814:	d9 06       	cpc	r13, r25
    1816:	b0 f3       	brcs	.-20     	; 0x1804 <vfprintf+0x1b8>
    1818:	0e c0       	rjmp	.+28     	; 0x1836 <vfprintf+0x1ea>
    181a:	f4 01       	movw	r30, r8
    181c:	17 fd       	sbrc	r17, 7
    181e:	85 91       	lpm	r24, Z+
    1820:	17 ff       	sbrs	r17, 7
    1822:	81 91       	ld	r24, Z+
    1824:	4f 01       	movw	r8, r30
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	b3 01       	movw	r22, r6
    182a:	29 d1       	rcall	.+594    	; 0x1a7e <fputc>
    182c:	e1 10       	cpse	r14, r1
    182e:	ea 94       	dec	r14
    1830:	08 94       	sec
    1832:	c1 08       	sbc	r12, r1
    1834:	d1 08       	sbc	r13, r1
    1836:	c1 14       	cp	r12, r1
    1838:	d1 04       	cpc	r13, r1
    183a:	79 f7       	brne	.-34     	; 0x181a <vfprintf+0x1ce>
    183c:	df c0       	rjmp	.+446    	; 0x19fc <vfprintf+0x3b0>
    183e:	84 36       	cpi	r24, 0x64	; 100
    1840:	11 f0       	breq	.+4      	; 0x1846 <vfprintf+0x1fa>
    1842:	89 36       	cpi	r24, 0x69	; 105
    1844:	49 f5       	brne	.+82     	; 0x1898 <vfprintf+0x24c>
    1846:	f5 01       	movw	r30, r10
    1848:	17 ff       	sbrs	r17, 7
    184a:	07 c0       	rjmp	.+14     	; 0x185a <vfprintf+0x20e>
    184c:	80 81       	ld	r24, Z
    184e:	91 81       	ldd	r25, Z+1	; 0x01
    1850:	a2 81       	ldd	r26, Z+2	; 0x02
    1852:	b3 81       	ldd	r27, Z+3	; 0x03
    1854:	24 e0       	ldi	r18, 0x04	; 4
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	08 c0       	rjmp	.+16     	; 0x186a <vfprintf+0x21e>
    185a:	80 81       	ld	r24, Z
    185c:	91 81       	ldd	r25, Z+1	; 0x01
    185e:	aa 27       	eor	r26, r26
    1860:	97 fd       	sbrc	r25, 7
    1862:	a0 95       	com	r26
    1864:	ba 2f       	mov	r27, r26
    1866:	22 e0       	ldi	r18, 0x02	; 2
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	a2 0e       	add	r10, r18
    186c:	b3 1e       	adc	r11, r19
    186e:	01 2f       	mov	r16, r17
    1870:	0f 76       	andi	r16, 0x6F	; 111
    1872:	b7 ff       	sbrs	r27, 7
    1874:	08 c0       	rjmp	.+16     	; 0x1886 <vfprintf+0x23a>
    1876:	b0 95       	com	r27
    1878:	a0 95       	com	r26
    187a:	90 95       	com	r25
    187c:	81 95       	neg	r24
    187e:	9f 4f       	sbci	r25, 0xFF	; 255
    1880:	af 4f       	sbci	r26, 0xFF	; 255
    1882:	bf 4f       	sbci	r27, 0xFF	; 255
    1884:	00 68       	ori	r16, 0x80	; 128
    1886:	bc 01       	movw	r22, r24
    1888:	cd 01       	movw	r24, r26
    188a:	a2 01       	movw	r20, r4
    188c:	2a e0       	ldi	r18, 0x0A	; 10
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	22 d1       	rcall	.+580    	; 0x1ad6 <__ultoa_invert>
    1892:	d8 2e       	mov	r13, r24
    1894:	d4 18       	sub	r13, r4
    1896:	3e c0       	rjmp	.+124    	; 0x1914 <vfprintf+0x2c8>
    1898:	85 37       	cpi	r24, 0x75	; 117
    189a:	21 f4       	brne	.+8      	; 0x18a4 <vfprintf+0x258>
    189c:	1f 7e       	andi	r17, 0xEF	; 239
    189e:	2a e0       	ldi	r18, 0x0A	; 10
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	20 c0       	rjmp	.+64     	; 0x18e4 <vfprintf+0x298>
    18a4:	19 7f       	andi	r17, 0xF9	; 249
    18a6:	8f 36       	cpi	r24, 0x6F	; 111
    18a8:	a9 f0       	breq	.+42     	; 0x18d4 <vfprintf+0x288>
    18aa:	80 37       	cpi	r24, 0x70	; 112
    18ac:	20 f4       	brcc	.+8      	; 0x18b6 <vfprintf+0x26a>
    18ae:	88 35       	cpi	r24, 0x58	; 88
    18b0:	09 f0       	breq	.+2      	; 0x18b4 <vfprintf+0x268>
    18b2:	a7 c0       	rjmp	.+334    	; 0x1a02 <vfprintf+0x3b6>
    18b4:	0b c0       	rjmp	.+22     	; 0x18cc <vfprintf+0x280>
    18b6:	80 37       	cpi	r24, 0x70	; 112
    18b8:	21 f0       	breq	.+8      	; 0x18c2 <vfprintf+0x276>
    18ba:	88 37       	cpi	r24, 0x78	; 120
    18bc:	09 f0       	breq	.+2      	; 0x18c0 <vfprintf+0x274>
    18be:	a1 c0       	rjmp	.+322    	; 0x1a02 <vfprintf+0x3b6>
    18c0:	01 c0       	rjmp	.+2      	; 0x18c4 <vfprintf+0x278>
    18c2:	10 61       	ori	r17, 0x10	; 16
    18c4:	14 ff       	sbrs	r17, 4
    18c6:	09 c0       	rjmp	.+18     	; 0x18da <vfprintf+0x28e>
    18c8:	14 60       	ori	r17, 0x04	; 4
    18ca:	07 c0       	rjmp	.+14     	; 0x18da <vfprintf+0x28e>
    18cc:	14 ff       	sbrs	r17, 4
    18ce:	08 c0       	rjmp	.+16     	; 0x18e0 <vfprintf+0x294>
    18d0:	16 60       	ori	r17, 0x06	; 6
    18d2:	06 c0       	rjmp	.+12     	; 0x18e0 <vfprintf+0x294>
    18d4:	28 e0       	ldi	r18, 0x08	; 8
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	05 c0       	rjmp	.+10     	; 0x18e4 <vfprintf+0x298>
    18da:	20 e1       	ldi	r18, 0x10	; 16
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <vfprintf+0x298>
    18e0:	20 e1       	ldi	r18, 0x10	; 16
    18e2:	32 e0       	ldi	r19, 0x02	; 2
    18e4:	f5 01       	movw	r30, r10
    18e6:	17 ff       	sbrs	r17, 7
    18e8:	07 c0       	rjmp	.+14     	; 0x18f8 <vfprintf+0x2ac>
    18ea:	60 81       	ld	r22, Z
    18ec:	71 81       	ldd	r23, Z+1	; 0x01
    18ee:	82 81       	ldd	r24, Z+2	; 0x02
    18f0:	93 81       	ldd	r25, Z+3	; 0x03
    18f2:	44 e0       	ldi	r20, 0x04	; 4
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	06 c0       	rjmp	.+12     	; 0x1904 <vfprintf+0x2b8>
    18f8:	60 81       	ld	r22, Z
    18fa:	71 81       	ldd	r23, Z+1	; 0x01
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	42 e0       	ldi	r20, 0x02	; 2
    1902:	50 e0       	ldi	r21, 0x00	; 0
    1904:	a4 0e       	add	r10, r20
    1906:	b5 1e       	adc	r11, r21
    1908:	a2 01       	movw	r20, r4
    190a:	e5 d0       	rcall	.+458    	; 0x1ad6 <__ultoa_invert>
    190c:	d8 2e       	mov	r13, r24
    190e:	d4 18       	sub	r13, r4
    1910:	01 2f       	mov	r16, r17
    1912:	0f 77       	andi	r16, 0x7F	; 127
    1914:	06 ff       	sbrs	r16, 6
    1916:	09 c0       	rjmp	.+18     	; 0x192a <vfprintf+0x2de>
    1918:	0e 7f       	andi	r16, 0xFE	; 254
    191a:	df 14       	cp	r13, r15
    191c:	30 f4       	brcc	.+12     	; 0x192a <vfprintf+0x2de>
    191e:	04 ff       	sbrs	r16, 4
    1920:	06 c0       	rjmp	.+12     	; 0x192e <vfprintf+0x2e2>
    1922:	02 fd       	sbrc	r16, 2
    1924:	04 c0       	rjmp	.+8      	; 0x192e <vfprintf+0x2e2>
    1926:	0f 7e       	andi	r16, 0xEF	; 239
    1928:	02 c0       	rjmp	.+4      	; 0x192e <vfprintf+0x2e2>
    192a:	1d 2d       	mov	r17, r13
    192c:	01 c0       	rjmp	.+2      	; 0x1930 <vfprintf+0x2e4>
    192e:	1f 2d       	mov	r17, r15
    1930:	80 2f       	mov	r24, r16
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	04 ff       	sbrs	r16, 4
    1936:	0c c0       	rjmp	.+24     	; 0x1950 <vfprintf+0x304>
    1938:	fe 01       	movw	r30, r28
    193a:	ed 0d       	add	r30, r13
    193c:	f1 1d       	adc	r31, r1
    193e:	20 81       	ld	r18, Z
    1940:	20 33       	cpi	r18, 0x30	; 48
    1942:	11 f4       	brne	.+4      	; 0x1948 <vfprintf+0x2fc>
    1944:	09 7e       	andi	r16, 0xE9	; 233
    1946:	09 c0       	rjmp	.+18     	; 0x195a <vfprintf+0x30e>
    1948:	02 ff       	sbrs	r16, 2
    194a:	06 c0       	rjmp	.+12     	; 0x1958 <vfprintf+0x30c>
    194c:	1e 5f       	subi	r17, 0xFE	; 254
    194e:	05 c0       	rjmp	.+10     	; 0x195a <vfprintf+0x30e>
    1950:	86 78       	andi	r24, 0x86	; 134
    1952:	90 70       	andi	r25, 0x00	; 0
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	09 f0       	breq	.+2      	; 0x195a <vfprintf+0x30e>
    1958:	1f 5f       	subi	r17, 0xFF	; 255
    195a:	80 2e       	mov	r8, r16
    195c:	99 24       	eor	r9, r9
    195e:	03 fd       	sbrc	r16, 3
    1960:	11 c0       	rjmp	.+34     	; 0x1984 <vfprintf+0x338>
    1962:	00 ff       	sbrs	r16, 0
    1964:	0c c0       	rjmp	.+24     	; 0x197e <vfprintf+0x332>
    1966:	fd 2c       	mov	r15, r13
    1968:	1e 15       	cp	r17, r14
    196a:	48 f4       	brcc	.+18     	; 0x197e <vfprintf+0x332>
    196c:	fe 0c       	add	r15, r14
    196e:	f1 1a       	sub	r15, r17
    1970:	1e 2d       	mov	r17, r14
    1972:	05 c0       	rjmp	.+10     	; 0x197e <vfprintf+0x332>
    1974:	80 e2       	ldi	r24, 0x20	; 32
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	b3 01       	movw	r22, r6
    197a:	81 d0       	rcall	.+258    	; 0x1a7e <fputc>
    197c:	1f 5f       	subi	r17, 0xFF	; 255
    197e:	1e 15       	cp	r17, r14
    1980:	c8 f3       	brcs	.-14     	; 0x1974 <vfprintf+0x328>
    1982:	04 c0       	rjmp	.+8      	; 0x198c <vfprintf+0x340>
    1984:	1e 15       	cp	r17, r14
    1986:	10 f4       	brcc	.+4      	; 0x198c <vfprintf+0x340>
    1988:	e1 1a       	sub	r14, r17
    198a:	01 c0       	rjmp	.+2      	; 0x198e <vfprintf+0x342>
    198c:	ee 24       	eor	r14, r14
    198e:	84 fe       	sbrs	r8, 4
    1990:	0e c0       	rjmp	.+28     	; 0x19ae <vfprintf+0x362>
    1992:	80 e3       	ldi	r24, 0x30	; 48
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	b3 01       	movw	r22, r6
    1998:	72 d0       	rcall	.+228    	; 0x1a7e <fputc>
    199a:	82 fe       	sbrs	r8, 2
    199c:	1d c0       	rjmp	.+58     	; 0x19d8 <vfprintf+0x38c>
    199e:	81 fe       	sbrs	r8, 1
    19a0:	03 c0       	rjmp	.+6      	; 0x19a8 <vfprintf+0x35c>
    19a2:	88 e5       	ldi	r24, 0x58	; 88
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	10 c0       	rjmp	.+32     	; 0x19c8 <vfprintf+0x37c>
    19a8:	88 e7       	ldi	r24, 0x78	; 120
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	0d c0       	rjmp	.+26     	; 0x19c8 <vfprintf+0x37c>
    19ae:	c4 01       	movw	r24, r8
    19b0:	86 78       	andi	r24, 0x86	; 134
    19b2:	90 70       	andi	r25, 0x00	; 0
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	81 f0       	breq	.+32     	; 0x19d8 <vfprintf+0x38c>
    19b8:	81 fc       	sbrc	r8, 1
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <vfprintf+0x374>
    19bc:	80 e2       	ldi	r24, 0x20	; 32
    19be:	01 c0       	rjmp	.+2      	; 0x19c2 <vfprintf+0x376>
    19c0:	8b e2       	ldi	r24, 0x2B	; 43
    19c2:	07 fd       	sbrc	r16, 7
    19c4:	8d e2       	ldi	r24, 0x2D	; 45
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	b3 01       	movw	r22, r6
    19ca:	59 d0       	rcall	.+178    	; 0x1a7e <fputc>
    19cc:	05 c0       	rjmp	.+10     	; 0x19d8 <vfprintf+0x38c>
    19ce:	80 e3       	ldi	r24, 0x30	; 48
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	b3 01       	movw	r22, r6
    19d4:	54 d0       	rcall	.+168    	; 0x1a7e <fputc>
    19d6:	fa 94       	dec	r15
    19d8:	df 14       	cp	r13, r15
    19da:	c8 f3       	brcs	.-14     	; 0x19ce <vfprintf+0x382>
    19dc:	da 94       	dec	r13
    19de:	f2 01       	movw	r30, r4
    19e0:	ed 0d       	add	r30, r13
    19e2:	f1 1d       	adc	r31, r1
    19e4:	80 81       	ld	r24, Z
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	b3 01       	movw	r22, r6
    19ea:	49 d0       	rcall	.+146    	; 0x1a7e <fputc>
    19ec:	dd 20       	and	r13, r13
    19ee:	b1 f7       	brne	.-20     	; 0x19dc <vfprintf+0x390>
    19f0:	05 c0       	rjmp	.+10     	; 0x19fc <vfprintf+0x3b0>
    19f2:	80 e2       	ldi	r24, 0x20	; 32
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	b3 01       	movw	r22, r6
    19f8:	42 d0       	rcall	.+132    	; 0x1a7e <fputc>
    19fa:	ea 94       	dec	r14
    19fc:	ee 20       	and	r14, r14
    19fe:	c9 f7       	brne	.-14     	; 0x19f2 <vfprintf+0x3a6>
    1a00:	4d ce       	rjmp	.-870    	; 0x169c <vfprintf+0x50>
    1a02:	f3 01       	movw	r30, r6
    1a04:	86 81       	ldd	r24, Z+6	; 0x06
    1a06:	97 81       	ldd	r25, Z+7	; 0x07
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <vfprintf+0x3c2>
    1a0a:	8f ef       	ldi	r24, 0xFF	; 255
    1a0c:	9f ef       	ldi	r25, 0xFF	; 255
    1a0e:	2d 96       	adiw	r28, 0x0d	; 13
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	de bf       	out	0x3e, r29	; 62
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	cd bf       	out	0x3d, r28	; 61
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	1f 91       	pop	r17
    1a20:	0f 91       	pop	r16
    1a22:	ff 90       	pop	r15
    1a24:	ef 90       	pop	r14
    1a26:	df 90       	pop	r13
    1a28:	cf 90       	pop	r12
    1a2a:	bf 90       	pop	r11
    1a2c:	af 90       	pop	r10
    1a2e:	9f 90       	pop	r9
    1a30:	8f 90       	pop	r8
    1a32:	7f 90       	pop	r7
    1a34:	6f 90       	pop	r6
    1a36:	5f 90       	pop	r5
    1a38:	4f 90       	pop	r4
    1a3a:	3f 90       	pop	r3
    1a3c:	2f 90       	pop	r2
    1a3e:	08 95       	ret

00001a40 <strnlen_P>:
    1a40:	fc 01       	movw	r30, r24
    1a42:	05 90       	lpm	r0, Z+
    1a44:	61 50       	subi	r22, 0x01	; 1
    1a46:	70 40       	sbci	r23, 0x00	; 0
    1a48:	01 10       	cpse	r0, r1
    1a4a:	d8 f7       	brcc	.-10     	; 0x1a42 <strnlen_P+0x2>
    1a4c:	80 95       	com	r24
    1a4e:	90 95       	com	r25
    1a50:	8e 0f       	add	r24, r30
    1a52:	9f 1f       	adc	r25, r31
    1a54:	08 95       	ret

00001a56 <memcpy>:
    1a56:	fb 01       	movw	r30, r22
    1a58:	dc 01       	movw	r26, r24
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <memcpy+0xa>
    1a5c:	01 90       	ld	r0, Z+
    1a5e:	0d 92       	st	X+, r0
    1a60:	41 50       	subi	r20, 0x01	; 1
    1a62:	50 40       	sbci	r21, 0x00	; 0
    1a64:	d8 f7       	brcc	.-10     	; 0x1a5c <memcpy+0x6>
    1a66:	08 95       	ret

00001a68 <strnlen>:
    1a68:	fc 01       	movw	r30, r24
    1a6a:	61 50       	subi	r22, 0x01	; 1
    1a6c:	70 40       	sbci	r23, 0x00	; 0
    1a6e:	01 90       	ld	r0, Z+
    1a70:	01 10       	cpse	r0, r1
    1a72:	d8 f7       	brcc	.-10     	; 0x1a6a <strnlen+0x2>
    1a74:	80 95       	com	r24
    1a76:	90 95       	com	r25
    1a78:	8e 0f       	add	r24, r30
    1a7a:	9f 1f       	adc	r25, r31
    1a7c:	08 95       	ret

00001a7e <fputc>:
    1a7e:	0f 93       	push	r16
    1a80:	1f 93       	push	r17
    1a82:	cf 93       	push	r28
    1a84:	df 93       	push	r29
    1a86:	8c 01       	movw	r16, r24
    1a88:	eb 01       	movw	r28, r22
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	81 ff       	sbrs	r24, 1
    1a8e:	1b c0       	rjmp	.+54     	; 0x1ac6 <fputc+0x48>
    1a90:	82 ff       	sbrs	r24, 2
    1a92:	0d c0       	rjmp	.+26     	; 0x1aae <fputc+0x30>
    1a94:	2e 81       	ldd	r18, Y+6	; 0x06
    1a96:	3f 81       	ldd	r19, Y+7	; 0x07
    1a98:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9c:	28 17       	cp	r18, r24
    1a9e:	39 07       	cpc	r19, r25
    1aa0:	64 f4       	brge	.+24     	; 0x1aba <fputc+0x3c>
    1aa2:	e8 81       	ld	r30, Y
    1aa4:	f9 81       	ldd	r31, Y+1	; 0x01
    1aa6:	01 93       	st	Z+, r16
    1aa8:	f9 83       	std	Y+1, r31	; 0x01
    1aaa:	e8 83       	st	Y, r30
    1aac:	06 c0       	rjmp	.+12     	; 0x1aba <fputc+0x3c>
    1aae:	e8 85       	ldd	r30, Y+8	; 0x08
    1ab0:	f9 85       	ldd	r31, Y+9	; 0x09
    1ab2:	80 2f       	mov	r24, r16
    1ab4:	09 95       	icall
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	31 f4       	brne	.+12     	; 0x1ac6 <fputc+0x48>
    1aba:	8e 81       	ldd	r24, Y+6	; 0x06
    1abc:	9f 81       	ldd	r25, Y+7	; 0x07
    1abe:	01 96       	adiw	r24, 0x01	; 1
    1ac0:	9f 83       	std	Y+7, r25	; 0x07
    1ac2:	8e 83       	std	Y+6, r24	; 0x06
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <fputc+0x4c>
    1ac6:	0f ef       	ldi	r16, 0xFF	; 255
    1ac8:	1f ef       	ldi	r17, 0xFF	; 255
    1aca:	c8 01       	movw	r24, r16
    1acc:	df 91       	pop	r29
    1ace:	cf 91       	pop	r28
    1ad0:	1f 91       	pop	r17
    1ad2:	0f 91       	pop	r16
    1ad4:	08 95       	ret

00001ad6 <__ultoa_invert>:
    1ad6:	fa 01       	movw	r30, r20
    1ad8:	aa 27       	eor	r26, r26
    1ada:	28 30       	cpi	r18, 0x08	; 8
    1adc:	51 f1       	breq	.+84     	; 0x1b32 <__ultoa_invert+0x5c>
    1ade:	20 31       	cpi	r18, 0x10	; 16
    1ae0:	81 f1       	breq	.+96     	; 0x1b42 <__ultoa_invert+0x6c>
    1ae2:	e8 94       	clt
    1ae4:	6f 93       	push	r22
    1ae6:	6e 7f       	andi	r22, 0xFE	; 254
    1ae8:	6e 5f       	subi	r22, 0xFE	; 254
    1aea:	7f 4f       	sbci	r23, 0xFF	; 255
    1aec:	8f 4f       	sbci	r24, 0xFF	; 255
    1aee:	9f 4f       	sbci	r25, 0xFF	; 255
    1af0:	af 4f       	sbci	r26, 0xFF	; 255
    1af2:	b1 e0       	ldi	r27, 0x01	; 1
    1af4:	3e d0       	rcall	.+124    	; 0x1b72 <__ultoa_invert+0x9c>
    1af6:	b4 e0       	ldi	r27, 0x04	; 4
    1af8:	3c d0       	rcall	.+120    	; 0x1b72 <__ultoa_invert+0x9c>
    1afa:	67 0f       	add	r22, r23
    1afc:	78 1f       	adc	r23, r24
    1afe:	89 1f       	adc	r24, r25
    1b00:	9a 1f       	adc	r25, r26
    1b02:	a1 1d       	adc	r26, r1
    1b04:	68 0f       	add	r22, r24
    1b06:	79 1f       	adc	r23, r25
    1b08:	8a 1f       	adc	r24, r26
    1b0a:	91 1d       	adc	r25, r1
    1b0c:	a1 1d       	adc	r26, r1
    1b0e:	6a 0f       	add	r22, r26
    1b10:	71 1d       	adc	r23, r1
    1b12:	81 1d       	adc	r24, r1
    1b14:	91 1d       	adc	r25, r1
    1b16:	a1 1d       	adc	r26, r1
    1b18:	20 d0       	rcall	.+64     	; 0x1b5a <__ultoa_invert+0x84>
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <__ultoa_invert+0x48>
    1b1c:	68 94       	set
    1b1e:	3f 91       	pop	r19
    1b20:	2a e0       	ldi	r18, 0x0A	; 10
    1b22:	26 9f       	mul	r18, r22
    1b24:	11 24       	eor	r1, r1
    1b26:	30 19       	sub	r19, r0
    1b28:	30 5d       	subi	r19, 0xD0	; 208
    1b2a:	31 93       	st	Z+, r19
    1b2c:	de f6       	brtc	.-74     	; 0x1ae4 <__ultoa_invert+0xe>
    1b2e:	cf 01       	movw	r24, r30
    1b30:	08 95       	ret
    1b32:	46 2f       	mov	r20, r22
    1b34:	47 70       	andi	r20, 0x07	; 7
    1b36:	40 5d       	subi	r20, 0xD0	; 208
    1b38:	41 93       	st	Z+, r20
    1b3a:	b3 e0       	ldi	r27, 0x03	; 3
    1b3c:	0f d0       	rcall	.+30     	; 0x1b5c <__ultoa_invert+0x86>
    1b3e:	c9 f7       	brne	.-14     	; 0x1b32 <__ultoa_invert+0x5c>
    1b40:	f6 cf       	rjmp	.-20     	; 0x1b2e <__ultoa_invert+0x58>
    1b42:	46 2f       	mov	r20, r22
    1b44:	4f 70       	andi	r20, 0x0F	; 15
    1b46:	40 5d       	subi	r20, 0xD0	; 208
    1b48:	4a 33       	cpi	r20, 0x3A	; 58
    1b4a:	18 f0       	brcs	.+6      	; 0x1b52 <__ultoa_invert+0x7c>
    1b4c:	49 5d       	subi	r20, 0xD9	; 217
    1b4e:	31 fd       	sbrc	r19, 1
    1b50:	40 52       	subi	r20, 0x20	; 32
    1b52:	41 93       	st	Z+, r20
    1b54:	02 d0       	rcall	.+4      	; 0x1b5a <__ultoa_invert+0x84>
    1b56:	a9 f7       	brne	.-22     	; 0x1b42 <__ultoa_invert+0x6c>
    1b58:	ea cf       	rjmp	.-44     	; 0x1b2e <__ultoa_invert+0x58>
    1b5a:	b4 e0       	ldi	r27, 0x04	; 4
    1b5c:	a6 95       	lsr	r26
    1b5e:	97 95       	ror	r25
    1b60:	87 95       	ror	r24
    1b62:	77 95       	ror	r23
    1b64:	67 95       	ror	r22
    1b66:	ba 95       	dec	r27
    1b68:	c9 f7       	brne	.-14     	; 0x1b5c <__ultoa_invert+0x86>
    1b6a:	00 97       	sbiw	r24, 0x00	; 0
    1b6c:	61 05       	cpc	r22, r1
    1b6e:	71 05       	cpc	r23, r1
    1b70:	08 95       	ret
    1b72:	9b 01       	movw	r18, r22
    1b74:	ac 01       	movw	r20, r24
    1b76:	0a 2e       	mov	r0, r26
    1b78:	06 94       	lsr	r0
    1b7a:	57 95       	ror	r21
    1b7c:	47 95       	ror	r20
    1b7e:	37 95       	ror	r19
    1b80:	27 95       	ror	r18
    1b82:	ba 95       	dec	r27
    1b84:	c9 f7       	brne	.-14     	; 0x1b78 <__ultoa_invert+0xa2>
    1b86:	62 0f       	add	r22, r18
    1b88:	73 1f       	adc	r23, r19
    1b8a:	84 1f       	adc	r24, r20
    1b8c:	95 1f       	adc	r25, r21
    1b8e:	a0 1d       	adc	r26, r0
    1b90:	08 95       	ret

00001b92 <_exit>:
    1b92:	f8 94       	cli

00001b94 <__stop_program>:
    1b94:	ff cf       	rjmp	.-2      	; 0x1b94 <__stop_program>
