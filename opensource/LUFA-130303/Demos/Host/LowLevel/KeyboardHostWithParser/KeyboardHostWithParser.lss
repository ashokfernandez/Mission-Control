
KeyboardHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00002320  000023b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002320  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fd  0080011a  0080011a  000023ce  2**0
                  ALLOC
  3 .stab         00000e28  00000000  00000000  000023d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000256  00000000  00000000  000031f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000460  00000000  00000000  00003450  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000636b  00000000  00000000  000038b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e59  00000000  00000000  00009c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002fa2  00000000  00000000  0000ba74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bd0  00000000  00000000  0000ea18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002820  00000000  00000000  0000f5e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004159  00000000  00000000  00011e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000470  00000000  00000000  00015f61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	69 c1       	rjmp	.+722    	; 0x2d4 <__ctors_end>
       2:	00 00       	nop
       4:	86 c1       	rjmp	.+780    	; 0x312 <__bad_interrupt>
       6:	00 00       	nop
       8:	84 c1       	rjmp	.+776    	; 0x312 <__bad_interrupt>
       a:	00 00       	nop
       c:	82 c1       	rjmp	.+772    	; 0x312 <__bad_interrupt>
       e:	00 00       	nop
      10:	80 c1       	rjmp	.+768    	; 0x312 <__bad_interrupt>
      12:	00 00       	nop
      14:	7e c1       	rjmp	.+764    	; 0x312 <__bad_interrupt>
      16:	00 00       	nop
      18:	7c c1       	rjmp	.+760    	; 0x312 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7a c1       	rjmp	.+756    	; 0x312 <__bad_interrupt>
      1e:	00 00       	nop
      20:	78 c1       	rjmp	.+752    	; 0x312 <__bad_interrupt>
      22:	00 00       	nop
      24:	76 c1       	rjmp	.+748    	; 0x312 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__vector_10>
      2c:	72 c1       	rjmp	.+740    	; 0x312 <__bad_interrupt>
      2e:	00 00       	nop
      30:	70 c1       	rjmp	.+736    	; 0x312 <__bad_interrupt>
      32:	00 00       	nop
      34:	6e c1       	rjmp	.+732    	; 0x312 <__bad_interrupt>
      36:	00 00       	nop
      38:	6c c1       	rjmp	.+728    	; 0x312 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6a c1       	rjmp	.+724    	; 0x312 <__bad_interrupt>
      3e:	00 00       	nop
      40:	68 c1       	rjmp	.+720    	; 0x312 <__bad_interrupt>
      42:	00 00       	nop
      44:	66 c1       	rjmp	.+716    	; 0x312 <__bad_interrupt>
      46:	00 00       	nop
      48:	64 c1       	rjmp	.+712    	; 0x312 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	62 c1       	rjmp	.+708    	; 0x312 <__bad_interrupt>
      4e:	00 00       	nop
      50:	60 c1       	rjmp	.+704    	; 0x312 <__bad_interrupt>
      52:	00 00       	nop
      54:	5e c1       	rjmp	.+700    	; 0x312 <__bad_interrupt>
      56:	00 00       	nop
      58:	5c c1       	rjmp	.+696    	; 0x312 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5a c1       	rjmp	.+692    	; 0x312 <__bad_interrupt>
      5e:	00 00       	nop
      60:	58 c1       	rjmp	.+688    	; 0x312 <__bad_interrupt>
      62:	00 00       	nop
      64:	56 c1       	rjmp	.+684    	; 0x312 <__bad_interrupt>
      66:	00 00       	nop
      68:	54 c1       	rjmp	.+680    	; 0x312 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	52 c1       	rjmp	.+676    	; 0x312 <__bad_interrupt>
      6e:	00 00       	nop
      70:	50 c1       	rjmp	.+672    	; 0x312 <__bad_interrupt>
      72:	00 00       	nop
      74:	4e c1       	rjmp	.+668    	; 0x312 <__bad_interrupt>
      76:	00 00       	nop
      78:	4c c1       	rjmp	.+664    	; 0x312 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4a c1       	rjmp	.+660    	; 0x312 <__bad_interrupt>
      7e:	00 00       	nop
      80:	48 c1       	rjmp	.+656    	; 0x312 <__bad_interrupt>
      82:	00 00       	nop
      84:	46 c1       	rjmp	.+652    	; 0x312 <__bad_interrupt>
      86:	00 00       	nop
      88:	44 c1       	rjmp	.+648    	; 0x312 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	42 c1       	rjmp	.+644    	; 0x312 <__bad_interrupt>
      8e:	00 00       	nop
      90:	40 c1       	rjmp	.+640    	; 0x312 <__bad_interrupt>
      92:	00 00       	nop
      94:	3e c1       	rjmp	.+636    	; 0x312 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4287>:
      98:	1b 5b 33 36 6d 4b 65 79 62 6f 61 72 64 20 48 49     .[36mKeyboard HI
      a8:	44 20 50 61 72 73 65 72 20 48 6f 73 74 20 44 65     D Parser Host De
      b8:	6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33     mo running....[3
      c8:	37 6d 00                                            7m.

000000cb <__c.4296>:
      cb:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
      db:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

000000e8 <__c.4301>:
      e8:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
      f8:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     108:	00                                                  .

00000109 <__c.4306>:
     109:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     119:	61 74 61 2e 0d 0a 00                                ata....

00000120 <__c.4309>:
     120:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     130:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     140:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

0000014a <__c.4311>:
     14a:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     15a:	69 63 65 2e 0d 0a 00                                ice....

00000161 <__c.4313>:
     161:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     171:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000017b <__c.4315>:
     17b:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     18b:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     19b:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000001a5 <__c.4317>:
     1a5:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     1b5:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000001bf <__c.4319>:
     1bf:	50 72 6f 63 65 73 73 69 6e 67 20 48 49 44 20 52     Processing HID R
     1cf:	65 70 6f 72 74 20 28 53 69 7a 65 20 25 64 20 42     eport (Size %d B
     1df:	79 74 65 73 29 2e 0d 0a 00                          ytes)....

000001e8 <__c.4321>:
     1e8:	1b 5b 33 31 6d 52 65 70 6f 72 74 20 50 61 72 73     .[31mReport Pars
     1f8:	65 20 45 72 72 6f 72 2e 0d 0a 00                    e Error....

00000203 <__c.4323>:
     203:	4e 6f 74 20 61 20 76 61 6c 69 64 20 4b 65 79 62     Not a valid Keyb
     213:	6f 61 72 64 2e 1b 5b 33 37 6d 00                    oard..[37m.

0000021e <__c.4325>:
     21e:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     22e:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

00000238 <__c.4327>:
     238:	4b 65 79 62 6f 61 72 64 20 45 6e 75 6d 65 72 61     Keyboard Enumera
     248:	74 65 64 2e 0d 0a 00                                ted....

0000024f <__c.4332>:
     24f:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     25f:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     26f:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000027e <__c.4339>:
     27e:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     28e:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     29e:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     2ae:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     2be:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     2ce:	1b 5b 33 37 6d 00                                   .[37m.

000002d4 <__ctors_end>:
     2d4:	11 24       	eor	r1, r1
     2d6:	1f be       	out	0x3f, r1	; 63
     2d8:	cf ef       	ldi	r28, 0xFF	; 255
     2da:	d0 e2       	ldi	r29, 0x20	; 32
     2dc:	de bf       	out	0x3e, r29	; 62
     2de:	cd bf       	out	0x3d, r28	; 61

000002e0 <__do_copy_data>:
     2e0:	11 e0       	ldi	r17, 0x01	; 1
     2e2:	a0 e0       	ldi	r26, 0x00	; 0
     2e4:	b1 e0       	ldi	r27, 0x01	; 1
     2e6:	e0 e2       	ldi	r30, 0x20	; 32
     2e8:	f3 e2       	ldi	r31, 0x23	; 35
     2ea:	00 e0       	ldi	r16, 0x00	; 0
     2ec:	0b bf       	out	0x3b, r16	; 59
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <__do_copy_data+0x14>
     2f0:	07 90       	elpm	r0, Z+
     2f2:	0d 92       	st	X+, r0
     2f4:	aa 31       	cpi	r26, 0x1A	; 26
     2f6:	b1 07       	cpc	r27, r17
     2f8:	d9 f7       	brne	.-10     	; 0x2f0 <__do_copy_data+0x10>
     2fa:	1b be       	out	0x3b, r1	; 59

000002fc <__do_clear_bss>:
     2fc:	15 e0       	ldi	r17, 0x05	; 5
     2fe:	aa e1       	ldi	r26, 0x1A	; 26
     300:	b1 e0       	ldi	r27, 0x01	; 1
     302:	01 c0       	rjmp	.+2      	; 0x306 <.do_clear_bss_start>

00000304 <.do_clear_bss_loop>:
     304:	1d 92       	st	X+, r1

00000306 <.do_clear_bss_start>:
     306:	a7 31       	cpi	r26, 0x17	; 23
     308:	b1 07       	cpc	r27, r17
     30a:	e1 f7       	brne	.-8      	; 0x304 <.do_clear_bss_loop>
     30c:	c9 d1       	rcall	.+914    	; 0x6a0 <main>
     30e:	0c 94 8e 11 	jmp	0x231c	; 0x231c <_exit>

00000312 <__bad_interrupt>:
     312:	76 ce       	rjmp	.-788    	; 0x0 <__vectors>

00000314 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     314:	9b b1       	in	r25, 0x0b	; 11
     316:	9f 70       	andi	r25, 0x0F	; 15
     318:	98 2b       	or	r25, r24
     31a:	9b b9       	out	0x0b, r25	; 11
			}
     31c:	08 95       	ret

0000031e <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     31e:	84 b7       	in	r24, 0x34	; 52
     320:	87 7f       	andi	r24, 0xF7	; 247
     322:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     324:	28 e1       	ldi	r18, 0x18	; 24
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	f8 94       	cli
     32a:	20 93 60 00 	sts	0x0060, r18
     32e:	10 92 60 00 	sts	0x0060, r1
     332:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	80 e8       	ldi	r24, 0x80	; 128
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	f8 94       	cli
     33c:	80 93 61 00 	sts	0x0061, r24
     340:	90 93 61 00 	sts	0x0061, r25
     344:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     346:	83 e3       	ldi	r24, 0x33	; 51
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	90 93 cd 00 	sts	0x00CD, r25
     34e:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     352:	86 e0       	ldi	r24, 0x06	; 6
     354:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     358:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     35c:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     360:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     362:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     364:	8a b1       	in	r24, 0x0a	; 10
     366:	80 6f       	ori	r24, 0xF0	; 240
     368:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     36a:	8b b1       	in	r24, 0x0b	; 11
     36c:	8f 70       	andi	r24, 0x0F	; 15
     36e:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     370:	0e 94 c3 0b 	call	0x1786	; 0x1786 <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0c 94 89 0e 	jmp	0x1d12	; 0x1d12 <Serial_CreateStream>

0000037c <EVENT_USB_Host_DeviceAttached>:
}
     37c:	8b ec       	ldi	r24, 0xCB	; 203
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     384:	80 ea       	ldi	r24, 0xA0	; 160
     386:	c6 cf       	rjmp	.-116    	; 0x314 <LEDs_SetAllLEDs>

00000388 <EVENT_USB_Host_DeviceUnattached>:
     388:	88 ee       	ldi	r24, 0xE8	; 232
}
     38a:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     38c:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     390:	80 e1       	ldi	r24, 0x10	; 16
     392:	c0 cf       	rjmp	.-128    	; 0x314 <LEDs_SetAllLEDs>

00000394 <EVENT_USB_Host_DeviceEnumerationComplete>:
     394:	cf 93       	push	r28
}
     396:	89 e0       	ldi	r24, 0x09	; 9
/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	puts_P(PSTR("Getting Config Data.\r\n"));
     398:	91 e0       	ldi	r25, 0x01	; 1
     39a:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     39e:	af d1       	rcall	.+862    	; 0x6fe <ProcessConfigurationDescriptor>
     3a0:	c8 2f       	mov	r28, r24
     3a2:	88 23       	and	r24, r24
     3a4:	01 f1       	breq	.+64     	; 0x3e6 <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
     3a6:	81 30       	cpi	r24, 0x01	; 1
	{
		if (ErrorCode == ControlError)
     3a8:	19 f4       	brne	.+6      	; 0x3b0 <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
     3aa:	80 e2       	ldi	r24, 0x20	; 32
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
     3b0:	8a e4       	ldi	r24, 0x4A	; 74
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     3b2:	91 e0       	ldi	r25, 0x01	; 1
     3b4:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <puts_P>
     3b8:	00 d0       	rcall	.+0      	; 0x3ba <EVENT_USB_Host_DeviceEnumerationComplete+0x26>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     3ba:	00 d0       	rcall	.+0      	; 0x3bc <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
     3bc:	ed b7       	in	r30, 0x3d	; 61
     3be:	fe b7       	in	r31, 0x3e	; 62
     3c0:	31 96       	adiw	r30, 0x01	; 1
     3c2:	21 e6       	ldi	r18, 0x61	; 97
     3c4:	31 e0       	ldi	r19, 0x01	; 1
     3c6:	ad b7       	in	r26, 0x3d	; 61
     3c8:	be b7       	in	r27, 0x3e	; 62
     3ca:	12 96       	adiw	r26, 0x02	; 2
     3cc:	3c 93       	st	X, r19
     3ce:	2e 93       	st	-X, r18
     3d0:	11 97       	sbiw	r26, 0x01	; 1
     3d2:	c2 83       	std	Z+2, r28	; 0x02
     3d4:	13 82       	std	Z+3, r1	; 0x03
     3d6:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <printf_P>
     3da:	0f 90       	pop	r0

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     3dc:	0f 90       	pop	r0
     3de:	0f 90       	pop	r0
     3e0:	0f 90       	pop	r0
     3e2:	80 e9       	ldi	r24, 0x90	; 144
     3e4:	57 c0       	rjmp	.+174    	; 0x494 <EVENT_USB_Host_DeviceEnumerationComplete+0x100>
     3e6:	81 e0       	ldi	r24, 0x01	; 1
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     3e8:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <USB_Host_SetDeviceConfiguration>
     3ec:	c8 2f       	mov	r28, r24
     3ee:	88 23       	and	r24, r24
     3f0:	61 f0       	breq	.+24     	; 0x40a <EVENT_USB_Host_DeviceEnumerationComplete+0x76>
     3f2:	8b e7       	ldi	r24, 0x7B	; 123

	{
		puts_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"));
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <puts_P>
     3fa:	00 d0       	rcall	.+0      	; 0x3fc <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     3fc:	00 d0       	rcall	.+0      	; 0x3fe <EVENT_USB_Host_DeviceEnumerationComplete+0x6a>
     3fe:	ed b7       	in	r30, 0x3d	; 61
     400:	fe b7       	in	r31, 0x3e	; 62
     402:	31 96       	adiw	r30, 0x01	; 1
     404:	25 ea       	ldi	r18, 0xA5	; 165
     406:	31 e0       	ldi	r19, 0x01	; 1
     408:	de cf       	rjmp	.-68     	; 0x3c6 <EVENT_USB_Host_DeviceEnumerationComplete+0x32>
     40a:	00 d0       	rcall	.+0      	; 0x40c <EVENT_USB_Host_DeviceEnumerationComplete+0x78>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	printf_P(PSTR("Processing HID Report (Size %d Bytes).\r\n"), HIDReportSize);
     40c:	00 d0       	rcall	.+0      	; 0x40e <EVENT_USB_Host_DeviceEnumerationComplete+0x7a>
     40e:	8f eb       	ldi	r24, 0xBF	; 191
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	ed b7       	in	r30, 0x3d	; 61
     414:	fe b7       	in	r31, 0x3e	; 62
     416:	92 83       	std	Z+2, r25	; 0x02
     418:	81 83       	std	Z+1, r24	; 0x01
     41a:	80 91 f6 04 	lds	r24, 0x04F6
     41e:	90 91 f7 04 	lds	r25, 0x04F7
     422:	94 83       	std	Z+4, r25	; 0x04
     424:	83 83       	std	Z+3, r24	; 0x03
     426:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <printf_P>
     42a:	0f 90       	pop	r0

	/* Get and process the device's first HID report descriptor */
	if ((ErrorCode = GetHIDReportData()) != ParseSuccessful)
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	f5 d1       	rcall	.+1002   	; 0x81e <GetHIDReportData>
     434:	c8 2f       	mov	r28, r24
     436:	88 23       	and	r24, r24
     438:	41 f1       	breq	.+80     	; 0x48a <EVENT_USB_Host_DeviceEnumerationComplete+0xf6>
     43a:	88 ee       	ldi	r24, 0xE8	; 232
     43c:	91 e0       	ldi	r25, 0x01	; 1
	{
		puts_P(PSTR(ESC_FG_RED "Report Parse Error.\r\n"));
     43e:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <puts_P>
     442:	80 91 1d 01 	lds	r24, 0x011D

		if (!(HIDReportInfo.TotalReportItems))
     446:	88 23       	and	r24, r24
     448:	29 f4       	brne	.+10     	; 0x454 <EVENT_USB_Host_DeviceEnumerationComplete+0xc0>
     44a:	83 e0       	ldi	r24, 0x03	; 3
     44c:	92 e0       	ldi	r25, 0x02	; 2
			puts_P(PSTR("Not a valid Keyboard." ESC_FG_WHITE));
     44e:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <puts_P>
     452:	15 c0       	rjmp	.+42     	; 0x47e <EVENT_USB_Host_DeviceEnumerationComplete+0xea>
     454:	00 d0       	rcall	.+0      	; 0x456 <EVENT_USB_Host_DeviceEnumerationComplete+0xc2>
     456:	00 d0       	rcall	.+0      	; 0x458 <EVENT_USB_Host_DeviceEnumerationComplete+0xc4>
		else
			printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     458:	ed b7       	in	r30, 0x3d	; 61
     45a:	fe b7       	in	r31, 0x3e	; 62
     45c:	31 96       	adiw	r30, 0x01	; 1
     45e:	2e e1       	ldi	r18, 0x1E	; 30
     460:	32 e0       	ldi	r19, 0x02	; 2
     462:	ad b7       	in	r26, 0x3d	; 61
     464:	be b7       	in	r27, 0x3e	; 62
     466:	12 96       	adiw	r26, 0x02	; 2
     468:	3c 93       	st	X, r19
     46a:	2e 93       	st	-X, r18
     46c:	11 97       	sbiw	r26, 0x01	; 1
     46e:	c2 83       	std	Z+2, r28	; 0x02
     470:	13 82       	std	Z+3, r1	; 0x03
     472:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <printf_P>
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	80 e9       	ldi	r24, 0x90	; 144
     480:	49 df       	rcall	.-366    	; 0x314 <LEDs_SetAllLEDs>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <USB_Host_SetDeviceConfiguration>
		USB_Host_SetDeviceConfiguration(0);
     488:	06 c0       	rjmp	.+12     	; 0x496 <EVENT_USB_Host_DeviceEnumerationComplete+0x102>
     48a:	88 e3       	ldi	r24, 0x38	; 56
     48c:	92 e0       	ldi	r25, 0x02	; 2
		return;
     48e:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <puts_P>
	}

	puts_P(PSTR("Keyboard Enumerated.\r\n"));
     492:	80 e6       	ldi	r24, 0x60	; 96
     494:	3f df       	rcall	.-386    	; 0x314 <LEDs_SetAllLEDs>
     496:	cf 91       	pop	r28
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     498:	08 95       	ret

0000049a <EVENT_USB_Host_HostError>:
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
}
     49e:	0f 92       	push	r0
     4a0:	cd b7       	in	r28, 0x3d	; 61

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     4a2:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     4a4:	89 83       	std	Y+1, r24	; 0x01
     4a6:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     4aa:	00 d0       	rcall	.+0      	; 0x4ac <EVENT_USB_Host_HostError+0x12>
     4ac:	00 d0       	rcall	.+0      	; 0x4ae <EVENT_USB_Host_HostError+0x14>
     4ae:	ed b7       	in	r30, 0x3d	; 61
     4b0:	fe b7       	in	r31, 0x3e	; 62
     4b2:	31 96       	adiw	r30, 0x01	; 1
     4b4:	2f e4       	ldi	r18, 0x4F	; 79
     4b6:	32 e0       	ldi	r19, 0x02	; 2
     4b8:	ad b7       	in	r26, 0x3d	; 61
     4ba:	be b7       	in	r27, 0x3e	; 62
     4bc:	12 96       	adiw	r26, 0x02	; 2
     4be:	3c 93       	st	X, r19
     4c0:	2e 93       	st	-X, r18
     4c2:	11 97       	sbiw	r26, 0x01	; 1
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	82 83       	std	Z+2, r24	; 0x02
     4c8:	13 82       	std	Z+3, r1	; 0x03
     4ca:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	80 e9       	ldi	r24, 0x90	; 144
     4d8:	1d df       	rcall	.-454    	; 0x314 <LEDs_SetAllLEDs>
     4da:	ff cf       	rjmp	.-2      	; 0x4da <EVENT_USB_Host_HostError+0x40>

000004dc <EVENT_USB_Host_DeviceEnumerationFailed>:
     4dc:	90 91 02 05 	lds	r25, 0x0502
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4e0:	2d b7       	in	r18, 0x3d	; 61
     4e2:	3e b7       	in	r19, 0x3e	; 62
     4e4:	28 50       	subi	r18, 0x08	; 8
     4e6:	30 40       	sbci	r19, 0x00	; 0
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	3e bf       	out	0x3e, r19	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	2d bf       	out	0x3d, r18	; 61
     4f2:	ed b7       	in	r30, 0x3d	; 61
     4f4:	fe b7       	in	r31, 0x3e	; 62
     4f6:	31 96       	adiw	r30, 0x01	; 1
     4f8:	2e e7       	ldi	r18, 0x7E	; 126
     4fa:	32 e0       	ldi	r19, 0x02	; 2
     4fc:	ad b7       	in	r26, 0x3d	; 61
     4fe:	be b7       	in	r27, 0x3e	; 62
     500:	12 96       	adiw	r26, 0x02	; 2
     502:	3c 93       	st	X, r19
     504:	2e 93       	st	-X, r18
     506:	11 97       	sbiw	r26, 0x01	; 1
     508:	82 83       	std	Z+2, r24	; 0x02
     50a:	13 82       	std	Z+3, r1	; 0x03
     50c:	64 83       	std	Z+4, r22	; 0x04
     50e:	15 82       	std	Z+5, r1	; 0x05
     510:	96 83       	std	Z+6, r25	; 0x06
     512:	17 82       	std	Z+7, r1	; 0x07
     514:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     518:	2d b7       	in	r18, 0x3d	; 61
     51a:	3e b7       	in	r19, 0x3e	; 62
     51c:	28 5f       	subi	r18, 0xF8	; 248
     51e:	3f 4f       	sbci	r19, 0xFF	; 255
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	f8 94       	cli
     524:	3e bf       	out	0x3e, r19	; 62
     526:	0f be       	out	0x3f, r0	; 63
     528:	2d bf       	out	0x3d, r18	; 61
     52a:	80 e9       	ldi	r24, 0x90	; 144
     52c:	f3 ce       	rjmp	.-538    	; 0x314 <LEDs_SetAllLEDs>

0000052e <ProcessKeyboardReport>:
     52e:	cf 92       	push	r12
}
     530:	df 92       	push	r13
 *  as required and prints pressed characters to the serial port. Each time a key is typed, a board LED is toggled.
 *
 *  \param[in] KeyboardReport  Pointer to a HID report from an attached keyboard device
 */
void ProcessKeyboardReport(uint8_t* KeyboardReport)
{
     532:	ef 92       	push	r14
     534:	ff 92       	push	r15
     536:	1f 93       	push	r17
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	7c 01       	movw	r14, r24
	/* Check each HID report item in turn, looking for keyboard scan code reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     53e:	10 e0       	ldi	r17, 0x00	; 0
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     540:	2a e2       	ldi	r18, 0x2A	; 42
     542:	c2 2e       	mov	r12, r18
     544:	d1 2c       	mov	r13, r1
 *  \param[in] KeyboardReport  Pointer to a HID report from an attached keyboard device
 */
void ProcessKeyboardReport(uint8_t* KeyboardReport)
{
	/* Check each HID report item in turn, looking for keyboard scan code reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     546:	49 c0       	rjmp	.+146    	; 0x5da <ProcessKeyboardReport+0xac>
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     548:	81 2f       	mov	r24, r17
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	8c 9d       	mul	r24, r12
     54e:	e0 01       	movw	r28, r0
     550:	8d 9d       	mul	r24, r13
     552:	d0 0d       	add	r29, r0
     554:	9c 9d       	mul	r25, r12
     556:	d0 0d       	add	r29, r0
     558:	11 24       	eor	r1, r1
     55a:	c2 5e       	subi	r28, 0xE2	; 226
     55c:	de 4f       	sbci	r29, 0xFE	; 254

		/* Check if the current report item is a keyboard scan-code */
		if ((ReportItem->Attributes.Usage.Page      == USAGE_PAGE_KEYBOARD) &&
     55e:	89 85       	ldd	r24, Y+9	; 0x09
     560:	9a 85       	ldd	r25, Y+10	; 0x0a
     562:	87 30       	cpi	r24, 0x07	; 7
     564:	91 05       	cpc	r25, r1
     566:	c1 f5       	brne	.+112    	; 0x5d8 <ProcessKeyboardReport+0xaa>
     568:	88 85       	ldd	r24, Y+8	; 0x08
     56a:	88 30       	cpi	r24, 0x08	; 8
     56c:	a9 f5       	brne	.+106    	; 0x5d8 <ProcessKeyboardReport+0xaa>
			(ReportItem->Attributes.BitSize         == 8)                   &&
     56e:	8e 89       	ldd	r24, Y+22	; 0x16
     570:	9f 89       	ldd	r25, Y+23	; 0x17
     572:	a8 8d       	ldd	r26, Y+24	; 0x18
     574:	b9 8d       	ldd	r27, Y+25	; 0x19
     576:	82 30       	cpi	r24, 0x02	; 2
     578:	91 05       	cpc	r25, r1
     57a:	a1 05       	cpc	r26, r1
     57c:	b1 05       	cpc	r27, r1
     57e:	60 f1       	brcs	.+88     	; 0x5d8 <ProcessKeyboardReport+0xaa>
			(ReportItem->Attributes.Logical.Maximum > 1)                    &&
     580:	8a 81       	ldd	r24, Y+2	; 0x02
     582:	88 23       	and	r24, r24
     584:	49 f5       	brne	.+82     	; 0x5d8 <ProcessKeyboardReport+0xaa>
			(ReportItem->ItemType                   == HID_REPORT_ITEM_In))
		{
			/* Retrieve the keyboard scan-code from the report data retrieved from the device */
			bool FoundData = USB_GetHIDReportItemInfo(KeyboardReport, ReportItem);
     586:	c7 01       	movw	r24, r14
     588:	be 01       	movw	r22, r28
     58a:	60 d5       	rcall	.+2752   	; 0x104c <USB_GetHIDReportItemInfo>
     58c:	88 23       	and	r24, r24

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
     58e:	21 f1       	breq	.+72     	; 0x5d8 <ProcessKeyboardReport+0xaa>
     590:	8a a1       	lds	r24, 0x4a
			  continue;

			/* Key code is an unsigned char in length, cast to the appropriate type */
			uint8_t KeyCode = (uint8_t)ReportItem->Value;
     592:	88 23       	and	r24, r24

			/* If scan-code is non-zero, a key is being pressed */
			if (KeyCode)
     594:	39 f1       	breq	.+78     	; 0x5e4 <ProcessKeyboardReport+0xb6>
     596:	90 e2       	ldi	r25, 0x20	; 32
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PIND  = LEDMask;
     598:	99 b9       	out	0x09, r25	; 9
     59a:	98 2f       	mov	r25, r24
				LEDs_ToggleLEDs(LEDS_LED2);

				char PressedKey = 0;

				/* Retrieve pressed key character if alphanumeric */
				if ((KeyCode >= HID_KEYBOARD_SC_A) && (KeyCode <= HID_KEYBOARD_SC_Z))
     59c:	94 50       	subi	r25, 0x04	; 4
     59e:	9a 31       	cpi	r25, 0x1A	; 26
     5a0:	10 f4       	brcc	.+4      	; 0x5a6 <ProcessKeyboardReport+0x78>
     5a2:	83 5c       	subi	r24, 0xC3	; 195
				{
					PressedKey = (KeyCode - HID_KEYBOARD_SC_A) + 'A';
     5a4:	11 c0       	rjmp	.+34     	; 0x5c8 <ProcessKeyboardReport+0x9a>
     5a6:	98 2f       	mov	r25, r24
				}
				else if ((KeyCode >= HID_KEYBOARD_SC_1_AND_EXCLAMATION) &
     5a8:	9e 51       	subi	r25, 0x1E	; 30
     5aa:	99 30       	cpi	r25, 0x09	; 9
     5ac:	10 f4       	brcc	.+4      	; 0x5b2 <ProcessKeyboardReport+0x84>
     5ae:	8d 5e       	subi	r24, 0xED	; 237
						 (KeyCode  < HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS))
				{
					PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
     5b0:	0b c0       	rjmp	.+22     	; 0x5c8 <ProcessKeyboardReport+0x9a>
     5b2:	87 32       	cpi	r24, 0x27	; 39
				}
				else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
     5b4:	31 f0       	breq	.+12     	; 0x5c2 <ProcessKeyboardReport+0x94>
     5b6:	8c 32       	cpi	r24, 0x2C	; 44
				{
					PressedKey = '0';
				}
				else if (KeyCode == HID_KEYBOARD_SC_SPACE)
     5b8:	31 f0       	breq	.+12     	; 0x5c6 <ProcessKeyboardReport+0x98>
     5ba:	88 32       	cpi	r24, 0x28	; 40
				{
					PressedKey = ' ';
				}
				else if (KeyCode == HID_KEYBOARD_SC_ENTER)
     5bc:	99 f4       	brne	.+38     	; 0x5e4 <ProcessKeyboardReport+0xb6>
     5be:	8a e0       	ldi	r24, 0x0A	; 10
				{
					PressedKey = '\n';
     5c0:	03 c0       	rjmp	.+6      	; 0x5c8 <ProcessKeyboardReport+0x9a>
     5c2:	80 e3       	ldi	r24, 0x30	; 48
				{
					PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
				}
				else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
				{
					PressedKey = '0';
     5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <ProcessKeyboardReport+0x9a>
     5c6:	80 e2       	ldi	r24, 0x20	; 32
				}
				else if (KeyCode == HID_KEYBOARD_SC_SPACE)
				{
					PressedKey = ' ';
     5c8:	60 91 13 05 	lds	r22, 0x0513
					PressedKey = '\n';
				}

				/* Print the pressed key character out through the serial port if valid */
				if (PressedKey)
				  putchar(PressedKey);
     5cc:	70 91 14 05 	lds	r23, 0x0514
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <fputc>
     5d6:	06 c0       	rjmp	.+12     	; 0x5e4 <ProcessKeyboardReport+0xb6>
     5d8:	1f 5f       	subi	r17, 0xFF	; 255
 *  \param[in] KeyboardReport  Pointer to a HID report from an attached keyboard device
 */
void ProcessKeyboardReport(uint8_t* KeyboardReport)
{
	/* Check each HID report item in turn, looking for keyboard scan code reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     5da:	80 91 1d 01 	lds	r24, 0x011D
     5de:	18 17       	cp	r17, r24
     5e0:	08 f4       	brcc	.+2      	; 0x5e4 <ProcessKeyboardReport+0xb6>
     5e2:	b2 cf       	rjmp	.-156    	; 0x548 <ProcessKeyboardReport+0x1a>
     5e4:	df 91       	pop	r29

			/* Once a scan-code is found, stop scanning through the report items */
			break;
		}
	}
}
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	ff 90       	pop	r15
     5ec:	ef 90       	pop	r14
     5ee:	df 90       	pop	r13
     5f0:	cf 90       	pop	r12
     5f2:	08 95       	ret

000005f4 <KeyboardHost_Task>:
     5f4:	cf 92       	push	r12

/** Task to read in and processes the next report from the attached device, displaying the report
 *  contents on the board LEDs and via the serial port.
 */
void KeyboardHost_Task(void)
{
     5f6:	df 92       	push	r13
     5f8:	ef 92       	push	r14
     5fa:	ff 92       	push	r15
     5fc:	0f 93       	push	r16
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	cd b7       	in	r28, 0x3d	; 61
     606:	de b7       	in	r29, 0x3e	; 62
		Pipe_ClearIN();
	}

	/* Freeze keyboard data pipe */
	Pipe_Freeze();
}
     608:	cd b6       	in	r12, 0x3d	; 61
     60a:	de b6       	in	r13, 0x3e	; 62
/** Task to read in and processes the next report from the attached device, displaying the report
 *  contents on the board LEDs and via the serial port.
 */
void KeyboardHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     60c:	80 91 02 05 	lds	r24, 0x0502
     610:	8b 30       	cpi	r24, 0x0B	; 11
     612:	c1 f5       	brne	.+112    	; 0x684 <KeyboardHost_Task+0x90>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     61a:	80 91 a9 00 	lds	r24, 0x00A9
     61e:	8f 7b       	andi	r24, 0xBF	; 191
     620:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     624:	80 91 a6 00 	lds	r24, 0x00A6
	/* Select and unfreeze keyboard data pipe */
	Pipe_SelectPipe(KEYBOARD_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (Pipe_IsINReceived())
     628:	80 ff       	sbrs	r24, 0
     62a:	27 c0       	rjmp	.+78     	; 0x67a <KeyboardHost_Task+0x86>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     62c:	80 91 a6 00 	lds	r24, 0x00A6
	{
		/* Check if data has been received from the attached keyboard */
		if (Pipe_IsReadWriteAllowed())
     630:	85 ff       	sbrs	r24, 5
     632:	1e c0       	rjmp	.+60     	; 0x670 <KeyboardHost_Task+0x7c>
     634:	ee b6       	in	r14, 0x3e	; 62
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     636:	80 91 f6 00 	lds	r24, 0x00F6
     63a:	90 91 f7 00 	lds	r25, 0x00F7
		{
			/* Create buffer big enough for the report */
			uint8_t KeyboardReport[Pipe_BytesInPipe()];
     63e:	2d b7       	in	r18, 0x3d	; 61
     640:	3e b7       	in	r19, 0x3e	; 62
     642:	28 1b       	sub	r18, r24
     644:	39 0b       	sbc	r19, r25
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	f8 94       	cli
     64a:	3e bf       	out	0x3e, r19	; 62
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	2d bf       	out	0x3d, r18	; 61
     650:	0d b7       	in	r16, 0x3d	; 61
     652:	1e b7       	in	r17, 0x3e	; 62
     654:	0f 5f       	subi	r16, 0xFF	; 255
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	60 91 f6 00 	lds	r22, 0x00F6
     65c:	70 91 f7 00 	lds	r23, 0x00F7

			/* Load in the keyboard report */
			Pipe_Read_Stream_LE(KeyboardReport, Pipe_BytesInPipe(), NULL);
     660:	c8 01       	movw	r24, r16
     662:	40 e0       	ldi	r20, 0x00	; 0
     664:	50 e0       	ldi	r21, 0x00	; 0
     666:	29 d7       	rcall	.+3666   	; 0x14ba <Pipe_Read_Stream_LE>
     668:	c8 01       	movw	r24, r16

			/* Process the read in keyboard report from the device */
			ProcessKeyboardReport(KeyboardReport);
     66a:	61 df       	rcall	.-318    	; 0x52e <ProcessKeyboardReport>
     66c:	cd be       	out	0x3d, r12	; 61
     66e:	ee be       	out	0x3e, r14	; 62
     670:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     674:	8e 77       	andi	r24, 0x7E	; 126
     676:	80 93 a6 00 	sts	0x00A6, r24
     67a:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     67e:	80 64       	ori	r24, 0x40	; 64
     680:	80 93 a9 00 	sts	0x00A9, r24
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	f8 94       	cli
		Pipe_ClearIN();
	}

	/* Freeze keyboard data pipe */
	Pipe_Freeze();
}
     688:	de be       	out	0x3e, r13	; 62
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	cd be       	out	0x3d, r12	; 61
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	ff 90       	pop	r15
     698:	ef 90       	pop	r14
     69a:	df 90       	pop	r13
     69c:	cf 90       	pop	r12
     69e:	08 95       	ret

000006a0 <main>:
     6a0:	3e de       	rcall	.-900    	; 0x31e <SetupHardware>
     6a2:	88 e9       	ldi	r24, 0x98	; 152
 */
int main(void)
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "Keyboard HID Parser Host Demo running.\r\n" ESC_FG_WHITE));
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <puts_P>
     6aa:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     6ac:	33 de       	rcall	.-922    	; 0x314 <LEDs_SetAllLEDs>
     6ae:	78 94       	sei
     6b0:	a1 df       	rcall	.-190    	; 0x5f4 <KeyboardHost_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     6b2:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		KeyboardHost_Task();
     6b6:	fc cf       	rjmp	.-8      	; 0x6b0 <main+0x10>

000006b8 <DComp_NextKeyboardInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Keyboard HID Class and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextKeyboardInterface(void* CurrentDescriptor)
{
     6b8:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     6ba:	81 81       	ldd	r24, Z+1	; 0x01
     6bc:	84 30       	cpi	r24, 0x04	; 4
     6be:	19 f4       	brne	.+6      	; 0x6c6 <DComp_NextKeyboardInterface+0xe>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class, break out if correct class interface found */
		if (Interface->Class == HID_CSCP_HIDClass)
     6c0:	85 81       	ldd	r24, Z+5	; 0x05
     6c2:	83 30       	cpi	r24, 0x03	; 3
     6c4:	11 f0       	breq	.+4      	; 0x6ca <DComp_NextKeyboardInterface+0x12>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     6c6:	82 e0       	ldi	r24, 0x02	; 2
     6c8:	08 95       	ret
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class, break out if correct class interface found */
		if (Interface->Class == HID_CSCP_HIDClass)
		{
			return DESCRIPTOR_SEARCH_Found;
     6ca:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     6cc:	08 95       	ret

000006ce <DComp_NextKeyboardInterfaceDataEndpoint>:
 */
uint8_t DComp_NextKeyboardInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     6ce:	fc 01       	movw	r30, r24
     6d0:	81 81       	ldd	r24, Z+1	; 0x01
     6d2:	85 30       	cpi	r24, 0x05	; 5
     6d4:	21 f0       	breq	.+8      	; 0x6de <DComp_NextKeyboardInterfaceDataEndpoint+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
     6d6:	84 30       	cpi	r24, 0x04	; 4
     6d8:	21 f4       	brne	.+8      	; 0x6e2 <DComp_NextKeyboardInterfaceDataEndpoint+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	08 95       	ret
uint8_t DComp_NextKeyboardInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
	  return DESCRIPTOR_SEARCH_Found;
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
     6e2:	82 e0       	ldi	r24, 0x02	; 2
}
     6e4:	08 95       	ret

000006e6 <DComp_NextHID>:
 */
uint8_t DComp_NextHID(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
     6e6:	fc 01       	movw	r30, r24
     6e8:	81 81       	ldd	r24, Z+1	; 0x01
     6ea:	81 32       	cpi	r24, 0x21	; 33
     6ec:	21 f0       	breq	.+8      	; 0x6f6 <DComp_NextHID+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
     6ee:	84 30       	cpi	r24, 0x04	; 4
     6f0:	21 f4       	brne	.+8      	; 0x6fa <DComp_NextHID+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	08 95       	ret
uint8_t DComp_NextHID(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
     6fa:	82 e0       	ldi	r24, 0x02	; 2
}
     6fc:	08 95       	ret

000006fe <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint and HID descriptor.
 *
 *  \return An error code from the \ref KeyboardHostWithParser_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     6fe:	af 92       	push	r10
     700:	bf 92       	push	r11
     702:	cf 92       	push	r12
     704:	df 92       	push	r13
     706:	ef 92       	push	r14
     708:	ff 92       	push	r15
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
     716:	c4 50       	subi	r28, 0x04	; 4
     718:	d2 40       	sbci	r29, 0x02	; 2
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	de bf       	out	0x3e, r29	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     724:	ae 01       	movw	r20, r28
     726:	4b 5f       	subi	r20, 0xFB	; 251
     728:	5f 4f       	sbci	r21, 0xFF	; 255
     72a:	5c 83       	std	Y+4, r21	; 0x04
     72c:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	8e 01       	movw	r16, r28
     732:	0f 5f       	subi	r16, 0xFF	; 255
     734:	1f 4f       	sbci	r17, 0xFF	; 255
     736:	b8 01       	movw	r22, r16
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	32 e0       	ldi	r19, 0x02	; 2
     73c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <USB_Host_GetDeviceConfigDescriptor>
     740:	85 30       	cpi	r24, 0x05	; 5
     742:	09 f4       	brne	.+2      	; 0x746 <ProcessConfigurationDescriptor+0x48>
     744:	54 c0       	rjmp	.+168    	; 0x7ee <ProcessConfigurationDescriptor+0xf0>
     746:	86 30       	cpi	r24, 0x06	; 6
     748:	19 f0       	breq	.+6      	; 0x750 <ProcessConfigurationDescriptor+0x52>
     74a:	88 23       	and	r24, r24
     74c:	41 f0       	breq	.+16     	; 0x75e <ProcessConfigurationDescriptor+0x60>
     74e:	02 c0       	rjmp	.+4      	; 0x754 <ProcessConfigurationDescriptor+0x56>
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     750:	83 e0       	ldi	r24, 0x03	; 3
     752:	50 c0       	rjmp	.+160    	; 0x7f4 <ProcessConfigurationDescriptor+0xf6>
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	4e c0       	rjmp	.+156    	; 0x7f4 <ProcessConfigurationDescriptor+0xf6>
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint and HID descriptor.
 *
 *  \return An error code from the \ref KeyboardHostWithParser_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     758:	c9 2e       	mov	r12, r25
     75a:	d8 2e       	mov	r13, r24
     75c:	04 c0       	rjmp	.+8      	; 0x766 <ProcessConfigurationDescriptor+0x68>
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     75e:	cc 24       	eor	r12, r12
     760:	dd 24       	eor	r13, r13
     762:	aa 24       	eor	r10, r10
     764:	bb 24       	eor	r11, r11
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     766:	a1 14       	cp	r10, r1
     768:	b1 04       	cpc	r11, r1
     76a:	51 f0       	breq	.+20     	; 0x780 <ProcessConfigurationDescriptor+0x82>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     76c:	c8 01       	movw	r24, r16
     76e:	be 01       	movw	r22, r28
     770:	6d 5f       	subi	r22, 0xFD	; 253
     772:	7f 4f       	sbci	r23, 0xFF	; 255
     774:	47 e6       	ldi	r20, 0x67	; 103
     776:	53 e0       	ldi	r21, 0x03	; 3
     778:	0e 94 ce 0c 	call	0x199c	; 0x199c <USB_GetNextDescriptorComp>
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     77c:	88 23       	and	r24, r24
     77e:	c9 f0       	breq	.+50     	; 0x7b2 <ProcessConfigurationDescriptor+0xb4>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextKeyboardInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     780:	c8 01       	movw	r24, r16
     782:	be 01       	movw	r22, r28
     784:	6d 5f       	subi	r22, 0xFD	; 253
     786:	7f 4f       	sbci	r23, 0xFF	; 255
     788:	4c e5       	ldi	r20, 0x5C	; 92
     78a:	53 e0       	ldi	r21, 0x03	; 3
     78c:	0e 94 ce 0c 	call	0x199c	; 0x199c <USB_GetNextDescriptorComp>
     790:	88 23       	and	r24, r24
     792:	79 f5       	brne	.+94     	; 0x7f2 <ProcessConfigurationDescriptor+0xf4>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     794:	ab 80       	ldd	r10, Y+3	; 0x03
     796:	bc 80       	ldd	r11, Y+4	; 0x04

			/* Get the HID descriptor from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     798:	c8 01       	movw	r24, r16
     79a:	be 01       	movw	r22, r28
     79c:	6d 5f       	subi	r22, 0xFD	; 253
     79e:	7f 4f       	sbci	r23, 0xFF	; 255
     7a0:	43 e7       	ldi	r20, 0x73	; 115
     7a2:	53 e0       	ldi	r21, 0x03	; 3
     7a4:	0e 94 ce 0c 	call	0x199c	; 0x199c <USB_GetNextDescriptorComp>
     7a8:	88 23       	and	r24, r24
     7aa:	19 f5       	brne	.+70     	; 0x7f2 <ProcessConfigurationDescriptor+0xf4>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the HID descriptor for later use */
			HIDDescriptor = DESCRIPTOR_PCAST(CurrConfigLocation, USB_HID_Descriptor_HID_t);
     7ac:	cb 80       	ldd	r12, Y+3	; 0x03
     7ae:	dc 80       	ldd	r13, Y+4	; 0x04

			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
     7b0:	33 c0       	rjmp	.+102    	; 0x818 <ProcessConfigurationDescriptor+0x11a>
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     7b2:	eb 80       	ldd	r14, Y+3	; 0x03
     7b4:	fc 80       	ldd	r15, Y+4	; 0x04

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     7b6:	f7 01       	movw	r30, r14
     7b8:	42 81       	ldd	r20, Z+2	; 0x02
     7ba:	47 ff       	sbrs	r20, 7
     7bc:	2d c0       	rjmp	.+90     	; 0x818 <ProcessConfigurationDescriptor+0x11a>
     7be:	9c 2d       	mov	r25, r12
     7c0:	8d 2d       	mov	r24, r13
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint))
     7c2:	e1 14       	cp	r14, r1
     7c4:	f1 04       	cpc	r15, r1
     7c6:	41 f2       	breq	.-112    	; 0x758 <ProcessConfigurationDescriptor+0x5a>
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		  DataINEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(KEYBOARD_DATA_IN_PIPE, EP_TYPE_INTERRUPT, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     7c8:	24 81       	ldd	r18, Z+4	; 0x04
     7ca:	35 81       	ldd	r19, Z+5	; 0x05
     7cc:	81 e8       	ldi	r24, 0x81	; 129
     7ce:	63 e0       	ldi	r22, 0x03	; 3
     7d0:	01 e0       	ldi	r16, 0x01	; 1
     7d2:	ca d6       	rcall	.+3476   	; 0x1568 <Pipe_ConfigurePipe>
     7d4:	f7 01       	movw	r30, r14
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     7d6:	86 81       	ldd	r24, Z+6	; 0x06
     7d8:	80 93 ad 00 	sts	0x00AD, r24
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     7dc:	f6 01       	movw	r30, r12

	/* Get the HID report size from the HID report descriptor */
	HIDReportSize = HIDDescriptor->HIDReportLength;
     7de:	87 81       	ldd	r24, Z+7	; 0x07
     7e0:	90 85       	ldd	r25, Z+8	; 0x08
     7e2:	90 93 f7 04 	sts	0x04F7, r25
     7e6:	80 93 f6 04 	sts	0x04F6, r24
     7ea:	80 e0       	ldi	r24, 0x00	; 0

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     7ec:	03 c0       	rjmp	.+6      	; 0x7f4 <ProcessConfigurationDescriptor+0xf6>
     7ee:	82 e0       	ldi	r24, 0x02	; 2
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     7f0:	01 c0       	rjmp	.+2      	; 0x7f4 <ProcessConfigurationDescriptor+0xf6>
     7f2:	84 e0       	ldi	r24, 0x04	; 4
			/* Get the HID descriptor from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextHID) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     7f4:	cc 5f       	subi	r28, 0xFC	; 252
	/* Get the HID report size from the HID report descriptor */
	HIDReportSize = HIDDescriptor->HIDReportLength;

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     7f6:	dd 4f       	sbci	r29, 0xFD	; 253
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	f8 94       	cli
     7fc:	de bf       	out	0x3e, r29	; 62
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	cd bf       	out	0x3d, r28	; 61
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	ff 90       	pop	r15
     80c:	ef 90       	pop	r14
     80e:	df 90       	pop	r13
     810:	cf 90       	pop	r12
     812:	bf 90       	pop	r11
     814:	af 90       	pop	r10
     816:	08 95       	ret
     818:	9c 2d       	mov	r25, r12
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint and HID descriptor.
 *
 *  \return An error code from the \ref KeyboardHostWithParser_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     81a:	8d 2d       	mov	r24, r13
     81c:	9d cf       	rjmp	.-198    	; 0x758 <ProcessConfigurationDescriptor+0x5a>

0000081e <GetHIDReportData>:
 *  structures via the HID parser routines in the LUFA library.
 *
 *  \return A value from the \ref KeyboardHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
     81e:	ef 92       	push	r14
     820:	ff 92       	push	r15
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
	  return ParseError;

	return ParseSuccessful;
}
     82e:	ed b6       	in	r14, 0x3d	; 61
     830:	fe b6       	in	r15, 0x3e	; 62
 *  \return A value from the \ref KeyboardHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
	/* Create a buffer big enough to hold the entire returned HID report */
	uint8_t HIDReportData[HIDReportSize];
     832:	80 91 f6 04 	lds	r24, 0x04F6
     836:	90 91 f7 04 	lds	r25, 0x04F7
     83a:	2d b7       	in	r18, 0x3d	; 61
     83c:	3e b7       	in	r19, 0x3e	; 62
     83e:	28 1b       	sub	r18, r24
     840:	39 0b       	sbc	r19, r25
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	f8 94       	cli
     846:	3e bf       	out	0x3e, r19	; 62
     848:	0f be       	out	0x3f, r0	; 63
     84a:	2d bf       	out	0x3d, r18	; 61
     84c:	0d b7       	in	r16, 0x3d	; 61
     84e:	1e b7       	in	r17, 0x3e	; 62
     850:	0f 5f       	subi	r16, 0xFF	; 255
     852:	1f 4f       	sbci	r17, 0xFF	; 255

	USB_ControlRequest = (USB_Request_Header_t)
     854:	21 e8       	ldi	r18, 0x81	; 129
     856:	20 93 fa 04 	sts	0x04FA, r18
     85a:	26 e0       	ldi	r18, 0x06	; 6
     85c:	20 93 fb 04 	sts	0x04FB, r18
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	32 e2       	ldi	r19, 0x22	; 34
     864:	30 93 fd 04 	sts	0x04FD, r19
     868:	20 93 fc 04 	sts	0x04FC, r18
     86c:	10 92 ff 04 	sts	0x04FF, r1
     870:	10 92 fe 04 	sts	0x04FE, r1
     874:	90 93 01 05 	sts	0x0501, r25
     878:	80 93 00 05 	sts	0x0500, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     87c:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send control request to retrieve the HID report from the attached device */
	if (USB_Host_SendControlRequest(HIDReportData) != HOST_SENDCONTROL_Successful)
     880:	c8 01       	movw	r24, r16
     882:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <USB_Host_SendControlRequest>
     886:	88 23       	and	r24, r24
     888:	61 f4       	brne	.+24     	; 0x8a2 <GetHIDReportData+0x84>
	  return ParseControlError;

	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
     88a:	60 91 f6 04 	lds	r22, 0x04F6
     88e:	70 91 f7 04 	lds	r23, 0x04F7
     892:	c8 01       	movw	r24, r16
     894:	4d e1       	ldi	r20, 0x1D	; 29
     896:	51 e0       	ldi	r21, 0x01	; 1
     898:	1d d0       	rcall	.+58     	; 0x8d4 <USB_ProcessHIDReport>
     89a:	88 23       	and	r24, r24
     89c:	21 f0       	breq	.+8      	; 0x8a6 <GetHIDReportData+0x88>
     89e:	81 e0       	ldi	r24, 0x01	; 1
	  return ParseError;
     8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <GetHIDReportData+0x8a>
     8a2:	82 e0       	ldi	r24, 0x02	; 2
	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send control request to retrieve the HID report from the attached device */
	if (USB_Host_SendControlRequest(HIDReportData) != HOST_SENDCONTROL_Successful)
	  return ParseControlError;
     8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <GetHIDReportData+0x8a>
     8a6:	80 e0       	ldi	r24, 0x00	; 0

	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
	  return ParseError;

	return ParseSuccessful;
     8a8:	0f b6       	in	r0, 0x3f	; 63
}
     8aa:	f8 94       	cli
     8ac:	fe be       	out	0x3e, r15	; 62
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	ed be       	out	0x3d, r14	; 61
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	ff 90       	pop	r15
     8bc:	ef 90       	pop	r14
     8be:	08 95       	ret

000008c0 <CALLBACK_HIDParser_FilterHIDReportItem>:
     8c0:	41 e0       	ldi	r20, 0x01	; 1
{
	/* Check the attributes of the current item - see if we are interested in it or not;
	 * only store KEYBOARD usage page items into the Processed HID Report structure to
	 * save RAM and ignore the rest
	 */
	return (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_KEYBOARD);
     8c2:	fc 01       	movw	r30, r24
     8c4:	21 85       	ldd	r18, Z+9	; 0x09
     8c6:	32 85       	ldd	r19, Z+10	; 0x0a
     8c8:	27 30       	cpi	r18, 0x07	; 7
     8ca:	31 05       	cpc	r19, r1
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <CALLBACK_HIDParser_FilterHIDReportItem+0x10>
     8ce:	40 e0       	ldi	r20, 0x00	; 0
}
     8d0:	84 2f       	mov	r24, r20
     8d2:	08 95       	ret

000008d4 <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
     8d4:	2f 92       	push	r2
     8d6:	3f 92       	push	r3
     8d8:	4f 92       	push	r4
     8da:	5f 92       	push	r5
     8dc:	6f 92       	push	r6
     8de:	7f 92       	push	r7
     8e0:	8f 92       	push	r8
     8e2:	9f 92       	push	r9
     8e4:	af 92       	push	r10
     8e6:	bf 92       	push	r11
     8e8:	cf 92       	push	r12
     8ea:	df 92       	push	r13
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
     8fc:	cf 58       	subi	r28, 0x8F	; 143
     8fe:	d0 40       	sbci	r29, 0x00	; 0
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	f8 94       	cli
     904:	de bf       	out	0x3e, r29	; 62
     906:	0f be       	out	0x3f, r0	; 63
     908:	cd bf       	out	0x3d, r28	; 61
     90a:	5c 01       	movw	r10, r24
     90c:	e7 96       	adiw	r28, 0x37	; 55
     90e:	7f af       	sts	0x7f, r23
     910:	6e af       	sts	0x7e, r22
     912:	e7 97       	sbiw	r28, 0x37	; 55
     914:	ba 01       	movw	r22, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
     916:	40 57       	subi	r20, 0x70	; 112
     918:	5c 4f       	sbci	r21, 0xFC	; 252
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
     91a:	89 ed       	ldi	r24, 0xD9	; 217
     91c:	93 e0       	ldi	r25, 0x03	; 3
     91e:	db 01       	movw	r26, r22
     920:	fc 01       	movw	r30, r24
     922:	1d 92       	st	X+, r1
     924:	31 97       	sbiw	r30, 0x01	; 1
     926:	e9 f7       	brne	.-6      	; 0x922 <USB_ProcessHIDReport+0x4e>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
     928:	de 01       	movw	r26, r28
     92a:	db 96       	adiw	r26, 0x3b	; 59
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
     92c:	8c e1       	ldi	r24, 0x1C	; 28
     92e:	fd 01       	movw	r30, r26
     930:	11 92       	st	Z+, r1
     932:	8a 95       	dec	r24
     934:	e9 f7       	brne	.-6      	; 0x930 <USB_ProcessHIDReport+0x5c>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     936:	87 e0       	ldi	r24, 0x07	; 7
     938:	fa 01       	movw	r30, r20
     93a:	11 92       	st	Z+, r1
     93c:	8a 95       	dec	r24
     93e:	e9 f7       	brne	.-6      	; 0x93a <USB_ProcessHIDReport+0x66>

	ParserData->TotalDeviceReports = 1;
     940:	fb 01       	movw	r30, r22
     942:	e1 57       	subi	r30, 0x71	; 113
     944:	fc 4f       	sbci	r31, 0xFC	; 252
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	80 83       	st	Z, r24
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
     94a:	eb 96       	adiw	r28, 0x3b	; 59
     94c:	1c ae       	sts	0xbc, r17
     94e:	1d ae       	sts	0xbd, r17
     950:	1e ae       	sts	0xbe, r17
     952:	1f ae       	sts	0xbf, r17
     954:	eb 97       	sbiw	r28, 0x3b	; 59
     956:	44 24       	eor	r4, r4
     958:	55 24       	eor	r5, r5
     95a:	32 01       	movw	r6, r4
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
     95c:	30 e0       	ldi	r19, 0x00	; 0
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
     95e:	88 24       	eor	r8, r8
     960:	99 24       	eor	r9, r9
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
     962:	8d 01       	movw	r16, r26

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     964:	cb 01       	movw	r24, r22
     966:	8a 52       	subi	r24, 0x2A	; 42
     968:	9c 4f       	sbci	r25, 0xFC	; 252
     96a:	cf 57       	subi	r28, 0x7F	; 127
     96c:	df 4f       	sbci	r29, 0xFF	; 255
     96e:	99 83       	std	Y+1, r25	; 0x01
     970:	88 83       	st	Y, r24
     972:	c1 58       	subi	r28, 0x81	; 129
     974:	d0 40       	sbci	r29, 0x00	; 0
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     976:	e5 96       	adiw	r28, 0x35	; 53
     978:	bf af       	sts	0x7f, r27
     97a:	ae af       	sts	0x7e, r26
     97c:	e5 97       	sbiw	r28, 0x35	; 53

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     97e:	db 01       	movw	r26, r22
     980:	a8 57       	subi	r26, 0x78	; 120
     982:	bc 4f       	sbci	r27, 0xFC	; 252
     984:	c9 57       	subi	r28, 0x79	; 121
     986:	df 4f       	sbci	r29, 0xFF	; 255
     988:	b9 83       	std	Y+1, r27	; 0x01
     98a:	a8 83       	st	Y, r26
     98c:	c7 58       	subi	r28, 0x87	; 135
     98e:	d0 40       	sbci	r29, 0x00	; 0
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     990:	f8 01       	movw	r30, r16
     992:	7c 96       	adiw	r30, 0x1c	; 28
     994:	c7 57       	subi	r28, 0x77	; 119
     996:	df 4f       	sbci	r29, 0xFF	; 255
     998:	f9 83       	std	Y+1, r31	; 0x01
     99a:	e8 83       	st	Y, r30
     99c:	c9 58       	subi	r28, 0x89	; 137
     99e:	d0 40       	sbci	r29, 0x00	; 0
     9a0:	cb 01       	movw	r24, r22
     9a2:	b5 01       	movw	r22, r10
     9a4:	5c 01       	movw	r10, r24
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     9a6:	18 c3       	rjmp	.+1584   	; 0xfd8 <USB_ProcessHIDReport+0x704>
	{
		uint8_t  HIDReportItem  = *ReportData;
     9a8:	db 01       	movw	r26, r22
     9aa:	2c 91       	ld	r18, X
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
     9ac:	e7 96       	adiw	r28, 0x37	; 55
     9ae:	ee ad       	sts	0x6e, r30
     9b0:	ff ad       	sts	0x6f, r31
     9b2:	e7 97       	sbiw	r28, 0x37	; 55
     9b4:	31 97       	sbiw	r30, 0x01	; 1
     9b6:	e7 96       	adiw	r28, 0x37	; 55
     9b8:	ff af       	sts	0x7f, r31
     9ba:	ee af       	sts	0x7e, r30
     9bc:	e7 97       	sbiw	r28, 0x37	; 55

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
     9be:	82 2f       	mov	r24, r18
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	ed 96       	adiw	r28, 0x3d	; 61
     9c4:	9f af       	sts	0x7f, r25
     9c6:	8e af       	sts	0x7e, r24
     9c8:	ed 97       	sbiw	r28, 0x3d	; 61
     9ca:	83 70       	andi	r24, 0x03	; 3
     9cc:	90 70       	andi	r25, 0x00	; 0
     9ce:	82 30       	cpi	r24, 0x02	; 2
     9d0:	91 05       	cpc	r25, r1
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <USB_ProcessHIDReport+0x102>
     9d4:	49 c0       	rjmp	.+146    	; 0xa68 <USB_ProcessHIDReport+0x194>
     9d6:	83 30       	cpi	r24, 0x03	; 3
     9d8:	91 05       	cpc	r25, r1
     9da:	51 f0       	breq	.+20     	; 0x9f0 <USB_ProcessHIDReport+0x11c>
     9dc:	81 30       	cpi	r24, 0x01	; 1
     9de:	91 05       	cpc	r25, r1
     9e0:	09 f4       	brne	.+2      	; 0x9e4 <USB_ProcessHIDReport+0x110>
     9e2:	69 c0       	rjmp	.+210    	; 0xab6 <USB_ProcessHIDReport+0x1e2>
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
     9e4:	6f 5f       	subi	r22, 0xFF	; 255
     9e6:	7f 4f       	sbci	r23, 0xFF	; 255
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     9e8:	cc 24       	eor	r12, r12
     9ea:	dd 24       	eor	r13, r13
     9ec:	76 01       	movw	r14, r12
     9ee:	75 c0       	rjmp	.+234    	; 0xada <USB_ProcessHIDReport+0x206>
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     9f0:	db 01       	movw	r26, r22
     9f2:	14 96       	adiw	r26, 0x04	; 4
     9f4:	8c 91       	ld	r24, X
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	a0 e0       	ldi	r26, 0x00	; 0
     9fa:	b0 e0       	ldi	r27, 0x00	; 0
     9fc:	f8 2e       	mov	r15, r24
     9fe:	ee 24       	eor	r14, r14
     a00:	dd 24       	eor	r13, r13
     a02:	cc 24       	eor	r12, r12
     a04:	fb 01       	movw	r30, r22
     a06:	83 81       	ldd	r24, Z+3	; 0x03
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	a0 e0       	ldi	r26, 0x00	; 0
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	dc 01       	movw	r26, r24
     a10:	99 27       	eor	r25, r25
     a12:	88 27       	eor	r24, r24
     a14:	c8 2a       	or	r12, r24
     a16:	d9 2a       	or	r13, r25
     a18:	ea 2a       	or	r14, r26
     a1a:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     a1c:	81 81       	ldd	r24, Z+1	; 0x01
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     a24:	c8 2a       	or	r12, r24
     a26:	d9 2a       	or	r13, r25
     a28:	ea 2a       	or	r14, r26
     a2a:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     a2c:	f2 81       	ldd	r31, Z+2	; 0x02
     a2e:	ef 96       	adiw	r28, 0x3f	; 63
     a30:	ff af       	sts	0x7f, r31
     a32:	ef 97       	sbiw	r28, 0x3f	; 63
     a34:	ee 96       	adiw	r28, 0x3e	; 62
     a36:	1f ae       	sts	0xbf, r17
     a38:	ee 97       	sbiw	r28, 0x3e	; 62
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     a3a:	ef 96       	adiw	r28, 0x3f	; 63
     a3c:	ee ad       	sts	0x6e, r30
     a3e:	ff ad       	sts	0x6f, r31
     a40:	ef 97       	sbiw	r28, 0x3f	; 63
     a42:	cf 01       	movw	r24, r30
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	c8 2a       	or	r12, r24
     a4a:	d9 2a       	or	r13, r25
     a4c:	ea 2a       	or	r14, r26
     a4e:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     a50:	e7 96       	adiw	r28, 0x37	; 55
     a52:	8e ad       	sts	0x6e, r24
     a54:	9f ad       	sts	0x6f, r25
     a56:	e7 97       	sbiw	r28, 0x37	; 55
     a58:	04 97       	sbiw	r24, 0x04	; 4
     a5a:	e7 96       	adiw	r28, 0x37	; 55
     a5c:	9f af       	sts	0x7f, r25
     a5e:	8e af       	sts	0x7e, r24
     a60:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 4;
     a62:	6b 5f       	subi	r22, 0xFB	; 251
     a64:	7f 4f       	sbci	r23, 0xFF	; 255
				break;
     a66:	39 c0       	rjmp	.+114    	; 0xada <USB_ProcessHIDReport+0x206>

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     a68:	db 01       	movw	r26, r22
     a6a:	12 96       	adiw	r26, 0x02	; 2
     a6c:	bc 91       	ld	r27, X
     a6e:	c0 58       	subi	r28, 0x80	; 128
     a70:	df 4f       	sbci	r29, 0xFF	; 255
     a72:	b8 83       	st	Y, r27
     a74:	c0 58       	subi	r28, 0x80	; 128
     a76:	d0 40       	sbci	r29, 0x00	; 0
     a78:	c1 58       	subi	r28, 0x81	; 129
     a7a:	df 4f       	sbci	r29, 0xFF	; 255
     a7c:	18 82       	st	Y, r1
     a7e:	cf 57       	subi	r28, 0x7F	; 127
     a80:	d0 40       	sbci	r29, 0x00	; 0
     a82:	fb 01       	movw	r30, r22
     a84:	81 81       	ldd	r24, Z+1	; 0x01
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	c1 58       	subi	r28, 0x81	; 129
     a8a:	df 4f       	sbci	r29, 0xFF	; 255
     a8c:	a8 81       	ld	r26, Y
     a8e:	b9 81       	ldd	r27, Y+1	; 0x01
     a90:	cf 57       	subi	r28, 0x7F	; 127
     a92:	d0 40       	sbci	r29, 0x00	; 0
     a94:	8a 2b       	or	r24, r26
     a96:	9b 2b       	or	r25, r27
     a98:	6c 01       	movw	r12, r24
     a9a:	ee 24       	eor	r14, r14
     a9c:	ff 24       	eor	r15, r15
				ReportSize     -= 2;
     a9e:	e7 96       	adiw	r28, 0x37	; 55
     aa0:	ee ad       	sts	0x6e, r30
     aa2:	ff ad       	sts	0x6f, r31
     aa4:	e7 97       	sbiw	r28, 0x37	; 55
     aa6:	32 97       	sbiw	r30, 0x02	; 2
     aa8:	e7 96       	adiw	r28, 0x37	; 55
     aaa:	ff af       	sts	0x7f, r31
     aac:	ee af       	sts	0x7e, r30
     aae:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 2;
     ab0:	6d 5f       	subi	r22, 0xFD	; 253
     ab2:	7f 4f       	sbci	r23, 0xFF	; 255
				break;
     ab4:	12 c0       	rjmp	.+36     	; 0xada <USB_ProcessHIDReport+0x206>

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     ab6:	db 01       	movw	r26, r22
     ab8:	11 96       	adiw	r26, 0x01	; 1
     aba:	cc 90       	ld	r12, X
     abc:	11 97       	sbiw	r26, 0x01	; 1
     abe:	dd 24       	eor	r13, r13
     ac0:	ee 24       	eor	r14, r14
     ac2:	ff 24       	eor	r15, r15
				ReportSize     -= 1;
     ac4:	e7 96       	adiw	r28, 0x37	; 55
     ac6:	ee ad       	sts	0x6e, r30
     ac8:	ff ad       	sts	0x6f, r31
     aca:	e7 97       	sbiw	r28, 0x37	; 55
     acc:	31 97       	sbiw	r30, 0x01	; 1
     ace:	e7 96       	adiw	r28, 0x37	; 55
     ad0:	ff af       	sts	0x7f, r31
     ad2:	ee af       	sts	0x7e, r30
     ad4:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 1;
     ad6:	6e 5f       	subi	r22, 0xFE	; 254
     ad8:	7f 4f       	sbci	r23, 0xFF	; 255
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     ada:	ed 96       	adiw	r28, 0x3d	; 61
     adc:	8e ad       	sts	0x6e, r24
     ade:	9f ad       	sts	0x6f, r25
     ae0:	ed 97       	sbiw	r28, 0x3d	; 61
     ae2:	8c 7f       	andi	r24, 0xFC	; 252
     ae4:	90 70       	andi	r25, 0x00	; 0
     ae6:	84 36       	cpi	r24, 0x64	; 100
     ae8:	91 05       	cpc	r25, r1
     aea:	09 f4       	brne	.+2      	; 0xaee <USB_ProcessHIDReport+0x21a>
     aec:	b0 c0       	rjmp	.+352    	; 0xc4e <USB_ProcessHIDReport+0x37a>
     aee:	85 36       	cpi	r24, 0x65	; 101
     af0:	91 05       	cpc	r25, r1
     af2:	8c f5       	brge	.+98     	; 0xb56 <USB_ProcessHIDReport+0x282>
     af4:	84 32       	cpi	r24, 0x24	; 36
     af6:	91 05       	cpc	r25, r1
     af8:	09 f4       	brne	.+2      	; 0xafc <USB_ProcessHIDReport+0x228>
     afa:	90 c0       	rjmp	.+288    	; 0xc1c <USB_ProcessHIDReport+0x348>
     afc:	85 32       	cpi	r24, 0x25	; 37
     afe:	91 05       	cpc	r25, r1
     b00:	ac f4       	brge	.+42     	; 0xb2c <USB_ProcessHIDReport+0x258>
     b02:	88 30       	cpi	r24, 0x08	; 8
     b04:	91 05       	cpc	r25, r1
     b06:	09 f4       	brne	.+2      	; 0xb0a <USB_ProcessHIDReport+0x236>
     b08:	fb c0       	rjmp	.+502    	; 0xd00 <USB_ProcessHIDReport+0x42c>
     b0a:	89 30       	cpi	r24, 0x09	; 9
     b0c:	91 05       	cpc	r25, r1
     b0e:	2c f4       	brge	.+10     	; 0xb1a <USB_ProcessHIDReport+0x246>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	91 05       	cpc	r25, r1
     b14:	09 f0       	breq	.+2      	; 0xb18 <USB_ProcessHIDReport+0x244>
     b16:	4e c2       	rjmp	.+1180   	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
     b18:	75 c0       	rjmp	.+234    	; 0xc04 <USB_ProcessHIDReport+0x330>
     b1a:	84 31       	cpi	r24, 0x14	; 20
     b1c:	91 05       	cpc	r25, r1
     b1e:	09 f4       	brne	.+2      	; 0xb22 <USB_ProcessHIDReport+0x24e>
     b20:	75 c0       	rjmp	.+234    	; 0xc0c <USB_ProcessHIDReport+0x338>
     b22:	88 31       	cpi	r24, 0x18	; 24
     b24:	91 05       	cpc	r25, r1
     b26:	09 f0       	breq	.+2      	; 0xb2a <USB_ProcessHIDReport+0x256>
     b28:	45 c2       	rjmp	.+1162   	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
     b2a:	42 c2       	rjmp	.+1156   	; 0xfb0 <USB_ProcessHIDReport+0x6dc>
     b2c:	84 33       	cpi	r24, 0x34	; 52
     b2e:	91 05       	cpc	r25, r1
     b30:	09 f4       	brne	.+2      	; 0xb34 <USB_ProcessHIDReport+0x260>
     b32:	7a c0       	rjmp	.+244    	; 0xc28 <USB_ProcessHIDReport+0x354>
     b34:	85 33       	cpi	r24, 0x35	; 53
     b36:	91 05       	cpc	r25, r1
     b38:	2c f4       	brge	.+10     	; 0xb44 <USB_ProcessHIDReport+0x270>
     b3a:	88 32       	cpi	r24, 0x28	; 40
     b3c:	91 05       	cpc	r25, r1
     b3e:	09 f0       	breq	.+2      	; 0xb42 <USB_ProcessHIDReport+0x26e>
     b40:	39 c2       	rjmp	.+1138   	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
     b42:	ef c0       	rjmp	.+478    	; 0xd22 <USB_ProcessHIDReport+0x44e>
     b44:	84 34       	cpi	r24, 0x44	; 68
     b46:	91 05       	cpc	r25, r1
     b48:	09 f4       	brne	.+2      	; 0xb4c <USB_ProcessHIDReport+0x278>
     b4a:	76 c0       	rjmp	.+236    	; 0xc38 <USB_ProcessHIDReport+0x364>
     b4c:	84 35       	cpi	r24, 0x54	; 84
     b4e:	91 05       	cpc	r25, r1
     b50:	09 f0       	breq	.+2      	; 0xb54 <USB_ProcessHIDReport+0x280>
     b52:	30 c2       	rjmp	.+1120   	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
     b54:	77 c0       	rjmp	.+238    	; 0xc44 <USB_ProcessHIDReport+0x370>
     b56:	84 39       	cpi	r24, 0x94	; 148
     b58:	91 05       	cpc	r25, r1
     b5a:	09 f4       	brne	.+2      	; 0xb5e <USB_ProcessHIDReport+0x28a>
     b5c:	81 c0       	rjmp	.+258    	; 0xc60 <USB_ProcessHIDReport+0x38c>
     b5e:	85 39       	cpi	r24, 0x95	; 149
     b60:	91 05       	cpc	r25, r1
     b62:	ac f4       	brge	.+42     	; 0xb8e <USB_ProcessHIDReport+0x2ba>
     b64:	80 38       	cpi	r24, 0x80	; 128
     b66:	91 05       	cpc	r25, r1
     b68:	09 f4       	brne	.+2      	; 0xb6c <USB_ProcessHIDReport+0x298>
     b6a:	f8 c1       	rjmp	.+1008   	; 0xf5c <USB_ProcessHIDReport+0x688>
     b6c:	81 38       	cpi	r24, 0x81	; 129
     b6e:	91 05       	cpc	r25, r1
     b70:	2c f4       	brge	.+10     	; 0xb7c <USB_ProcessHIDReport+0x2a8>
     b72:	84 37       	cpi	r24, 0x74	; 116
     b74:	91 05       	cpc	r25, r1
     b76:	09 f0       	breq	.+2      	; 0xb7a <USB_ProcessHIDReport+0x2a6>
     b78:	1d c2       	rjmp	.+1082   	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
     b7a:	6f c0       	rjmp	.+222    	; 0xc5a <USB_ProcessHIDReport+0x386>
     b7c:	84 38       	cpi	r24, 0x84	; 132
     b7e:	91 05       	cpc	r25, r1
     b80:	09 f4       	brne	.+2      	; 0xb84 <USB_ProcessHIDReport+0x2b0>
     b82:	71 c0       	rjmp	.+226    	; 0xc66 <USB_ProcessHIDReport+0x392>
     b84:	80 39       	cpi	r24, 0x90	; 144
     b86:	91 05       	cpc	r25, r1
     b88:	09 f0       	breq	.+2      	; 0xb8c <USB_ProcessHIDReport+0x2b8>
     b8a:	14 c2       	rjmp	.+1064   	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
     b8c:	e7 c1       	rjmp	.+974    	; 0xf5c <USB_ProcessHIDReport+0x688>
     b8e:	80 3b       	cpi	r24, 0xB0	; 176
     b90:	91 05       	cpc	r25, r1
     b92:	09 f4       	brne	.+2      	; 0xb96 <USB_ProcessHIDReport+0x2c2>
     b94:	e3 c1       	rjmp	.+966    	; 0xf5c <USB_ProcessHIDReport+0x688>
     b96:	81 3b       	cpi	r24, 0xB1	; 177
     b98:	91 05       	cpc	r25, r1
     b9a:	4c f4       	brge	.+18     	; 0xbae <USB_ProcessHIDReport+0x2da>
     b9c:	80 3a       	cpi	r24, 0xA0	; 160
     b9e:	91 05       	cpc	r25, r1
     ba0:	09 f4       	brne	.+2      	; 0xba4 <USB_ProcessHIDReport+0x2d0>
     ba2:	c6 c0       	rjmp	.+396    	; 0xd30 <USB_ProcessHIDReport+0x45c>
     ba4:	84 3a       	cpi	r24, 0xA4	; 164
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f0       	breq	.+2      	; 0xbac <USB_ProcessHIDReport+0x2d8>
     baa:	04 c2       	rjmp	.+1032   	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
     bac:	08 c0       	rjmp	.+16     	; 0xbbe <USB_ProcessHIDReport+0x2ea>
     bae:	84 3b       	cpi	r24, 0xB4	; 180
     bb0:	91 05       	cpc	r25, r1
     bb2:	e9 f0       	breq	.+58     	; 0xbee <USB_ProcessHIDReport+0x31a>
     bb4:	80 3c       	cpi	r24, 0xC0	; 192
     bb6:	91 05       	cpc	r25, r1
     bb8:	09 f0       	breq	.+2      	; 0xbbc <USB_ProcessHIDReport+0x2e8>
     bba:	fc c1       	rjmp	.+1016   	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
     bbc:	08 c1       	rjmp	.+528    	; 0xdce <USB_ProcessHIDReport+0x4fa>
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     bbe:	c7 57       	subi	r28, 0x77	; 119
     bc0:	df 4f       	sbci	r29, 0xFF	; 255
     bc2:	88 81       	ld	r24, Y
     bc4:	99 81       	ldd	r25, Y+1	; 0x01
     bc6:	c9 58       	subi	r28, 0x89	; 137
     bc8:	d0 40       	sbci	r29, 0x00	; 0
     bca:	08 17       	cp	r16, r24
     bcc:	19 07       	cpc	r17, r25
     bce:	09 f4       	brne	.+2      	; 0xbd2 <USB_ProcessHIDReport+0x2fe>
     bd0:	10 c2       	rjmp	.+1056   	; 0xff2 <USB_ProcessHIDReport+0x71e>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     bd2:	ec e1       	ldi	r30, 0x1C	; 28
     bd4:	ce 2e       	mov	r12, r30
     bd6:	d1 2c       	mov	r13, r1
     bd8:	c0 0e       	add	r12, r16
     bda:	d1 1e       	adc	r13, r17
     bdc:	d6 01       	movw	r26, r12
     bde:	f8 01       	movw	r30, r16
     be0:	8a e2       	ldi	r24, 0x2A	; 42
     be2:	01 90       	ld	r0, Z+
     be4:	0d 92       	st	X+, r0
     be6:	81 50       	subi	r24, 0x01	; 1
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <USB_ProcessHIDReport+0x30e>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     bea:	86 01       	movw	r16, r12
				break;
     bec:	e3 c1       	rjmp	.+966    	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     bee:	e5 96       	adiw	r28, 0x35	; 53
     bf0:	ae ad       	sts	0x6e, r26
     bf2:	bf ad       	sts	0x6f, r27
     bf4:	e5 97       	sbiw	r28, 0x35	; 53
     bf6:	0a 17       	cp	r16, r26
     bf8:	1b 07       	cpc	r17, r27
     bfa:	09 f4       	brne	.+2      	; 0xbfe <USB_ProcessHIDReport+0x32a>
     bfc:	fc c1       	rjmp	.+1016   	; 0xff6 <USB_ProcessHIDReport+0x722>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     bfe:	0c 51       	subi	r16, 0x1C	; 28
     c00:	10 40       	sbci	r17, 0x00	; 0
				break;
     c02:	d8 c1       	rjmp	.+944    	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     c04:	f8 01       	movw	r30, r16
     c06:	d2 82       	std	Z+2, r13	; 0x02
     c08:	c1 82       	std	Z+1, r12	; 0x01
				break;
     c0a:	d4 c1       	rjmp	.+936    	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     c0c:	d8 01       	movw	r26, r16
     c0e:	1a 96       	adiw	r26, 0x0a	; 10
     c10:	cd 92       	st	X+, r12
     c12:	dd 92       	st	X+, r13
     c14:	ed 92       	st	X+, r14
     c16:	fc 92       	st	X, r15
     c18:	1d 97       	sbiw	r26, 0x0d	; 13
				break;
     c1a:	cc c1       	rjmp	.+920    	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     c1c:	f8 01       	movw	r30, r16
     c1e:	c6 86       	std	Z+14, r12	; 0x0e
     c20:	d7 86       	std	Z+15, r13	; 0x0f
     c22:	e0 8a       	std	Z+16, r14	; 0x10
     c24:	f1 8a       	std	Z+17, r15	; 0x11
				break;
     c26:	c6 c1       	rjmp	.+908    	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     c28:	d8 01       	movw	r26, r16
     c2a:	52 96       	adiw	r26, 0x12	; 18
     c2c:	cd 92       	st	X+, r12
     c2e:	dd 92       	st	X+, r13
     c30:	ed 92       	st	X+, r14
     c32:	fc 92       	st	X, r15
     c34:	55 97       	sbiw	r26, 0x15	; 21
				break;
     c36:	be c1       	rjmp	.+892    	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     c38:	f8 01       	movw	r30, r16
     c3a:	c6 8a       	std	Z+22, r12	; 0x16
     c3c:	d7 8a       	std	Z+23, r13	; 0x17
     c3e:	e0 8e       	std	Z+24, r14	; 0x18
     c40:	f1 8e       	std	Z+25, r15	; 0x19
				break;
     c42:	b8 c1       	rjmp	.+880    	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     c44:	d8 01       	movw	r26, r16
     c46:	19 96       	adiw	r26, 0x09	; 9
     c48:	cc 92       	st	X, r12
     c4a:	19 97       	sbiw	r26, 0x09	; 9
				break;
     c4c:	b3 c1       	rjmp	.+870    	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     c4e:	f8 01       	movw	r30, r16
     c50:	c5 82       	std	Z+5, r12	; 0x05
     c52:	d6 82       	std	Z+6, r13	; 0x06
     c54:	e7 82       	std	Z+7, r14	; 0x07
     c56:	f0 86       	std	Z+8, r15	; 0x08
				break;
     c58:	ad c1       	rjmp	.+858    	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     c5a:	d8 01       	movw	r26, r16
     c5c:	cc 92       	st	X, r12
				break;
     c5e:	aa c1       	rjmp	.+852    	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     c60:	f8 01       	movw	r30, r16
     c62:	c2 8e       	std	Z+26, r12	; 0x1a
				break;
     c64:	a7 c1       	rjmp	.+846    	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     c66:	ac 2d       	mov	r26, r12
     c68:	f8 01       	movw	r30, r16
     c6a:	c3 8e       	std	Z+27, r12	; 0x1b

				if (ParserData->UsingReportIDs)
     c6c:	f5 01       	movw	r30, r10
     c6e:	e8 52       	subi	r30, 0x28	; 40
     c70:	fc 4f       	sbci	r31, 0xFC	; 252
     c72:	80 81       	ld	r24, Z
     c74:	88 23       	and	r24, r24
     c76:	d1 f1       	breq	.+116    	; 0xcec <USB_ProcessHIDReport+0x418>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     c78:	f5 01       	movw	r30, r10
     c7a:	e1 57       	subi	r30, 0x71	; 113
     c7c:	fc 4f       	sbci	r31, 0xFC	; 252
     c7e:	90 81       	ld	r25, Z
     c80:	a5 01       	movw	r20, r10
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	18 c0       	rjmp	.+48     	; 0xcb6 <USB_ProcessHIDReport+0x3e2>
     c86:	49 5f       	subi	r20, 0xF9	; 249
     c88:	5f 4f       	sbci	r21, 0xFF	; 255

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     c8a:	fa 01       	movw	r30, r20
     c8c:	e7 57       	subi	r30, 0x77	; 119
     c8e:	fc 4f       	sbci	r31, 0xFC	; 252
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     c90:	80 81       	ld	r24, Z
     c92:	8a 17       	cp	r24, r26
     c94:	79 f4       	brne	.+30     	; 0xcb4 <USB_ProcessHIDReport+0x3e0>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     c96:	82 2f       	mov	r24, r18
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	ac 01       	movw	r20, r24
     c9c:	23 e0       	ldi	r18, 0x03	; 3
     c9e:	44 0f       	add	r20, r20
     ca0:	55 1f       	adc	r21, r21
     ca2:	2a 95       	dec	r18
     ca4:	e1 f7       	brne	.-8      	; 0xc9e <USB_ProcessHIDReport+0x3ca>
     ca6:	48 1b       	sub	r20, r24
     ca8:	59 0b       	sbc	r21, r25
     caa:	40 57       	subi	r20, 0x70	; 112
     cac:	5c 4f       	sbci	r21, 0xFC	; 252
     cae:	4a 0d       	add	r20, r10
     cb0:	5b 1d       	adc	r21, r11
     cb2:	1c c0       	rjmp	.+56     	; 0xcec <USB_ProcessHIDReport+0x418>

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     cb4:	2f 5f       	subi	r18, 0xFF	; 255
     cb6:	29 17       	cp	r18, r25
     cb8:	31 f7       	brne	.-52     	; 0xc86 <USB_ProcessHIDReport+0x3b2>
     cba:	c4 c1       	rjmp	.+904    	; 0x1044 <USB_ProcessHIDReport+0x770>
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     cbc:	82 2f       	mov	r24, r18
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	ac 01       	movw	r20, r24
     cc2:	b3 e0       	ldi	r27, 0x03	; 3
     cc4:	44 0f       	add	r20, r20
     cc6:	55 1f       	adc	r21, r21
     cc8:	ba 95       	dec	r27
     cca:	e1 f7       	brne	.-8      	; 0xcc4 <USB_ProcessHIDReport+0x3f0>
     ccc:	48 1b       	sub	r20, r24
     cce:	59 0b       	sbc	r21, r25
     cd0:	40 57       	subi	r20, 0x70	; 112
     cd2:	5c 4f       	sbci	r21, 0xFC	; 252
     cd4:	4a 0d       	add	r20, r10
     cd6:	5b 1d       	adc	r21, r11
     cd8:	f5 01       	movw	r30, r10
     cda:	e1 57       	subi	r30, 0x71	; 113
     cdc:	fc 4f       	sbci	r31, 0xFC	; 252
     cde:	2f 5f       	subi	r18, 0xFF	; 255
     ce0:	20 83       	st	Z, r18
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     ce2:	87 e0       	ldi	r24, 0x07	; 7
     ce4:	da 01       	movw	r26, r20
     ce6:	1d 92       	st	X+, r1
     ce8:	8a 95       	dec	r24
     cea:	e9 f7       	brne	.-6      	; 0xce6 <USB_ProcessHIDReport+0x412>
					}
				}

				ParserData->UsingReportIDs = true;
     cec:	f5 01       	movw	r30, r10
     cee:	e8 52       	subi	r30, 0x28	; 40
     cf0:	fc 4f       	sbci	r31, 0xFC	; 252
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	80 83       	st	Z, r24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     cf6:	f8 01       	movw	r30, r16
     cf8:	83 8d       	ldd	r24, Z+27	; 0x1b
     cfa:	da 01       	movw	r26, r20
     cfc:	8c 93       	st	X, r24
				break;
     cfe:	5a c1       	rjmp	.+692    	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     d00:	38 30       	cpi	r19, 0x08	; 8
     d02:	09 f4       	brne	.+2      	; 0xd06 <USB_ProcessHIDReport+0x432>
     d04:	7a c1       	rjmp	.+756    	; 0xffa <USB_ProcessHIDReport+0x726>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     d06:	e3 2f       	mov	r30, r19
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	ee 0f       	add	r30, r30
     d0c:	ff 1f       	adc	r31, r31
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	8c 0f       	add	r24, r28
     d14:	9d 1f       	adc	r25, r29
     d16:	e8 0f       	add	r30, r24
     d18:	f9 1f       	adc	r31, r25
     d1a:	d1 82       	std	Z+1, r13	; 0x01
     d1c:	c0 82       	st	Z, r12
     d1e:	3f 5f       	subi	r19, 0xFF	; 255
				break;
     d20:	49 c1       	rjmp	.+658    	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     d22:	eb 96       	adiw	r28, 0x3b	; 59
     d24:	cc ae       	sts	0xbc, r28
     d26:	dd ae       	sts	0xbd, r29
     d28:	ee ae       	sts	0xbe, r30
     d2a:	ff ae       	sts	0xbf, r31
     d2c:	eb 97       	sbiw	r28, 0x3b	; 59
     d2e:	42 c1       	rjmp	.+644    	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     d30:	81 14       	cp	r8, r1
     d32:	91 04       	cpc	r9, r1
     d34:	39 f4       	brne	.+14     	; 0xd44 <USB_ProcessHIDReport+0x470>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     d36:	e9 e4       	ldi	r30, 0x49	; 73
     d38:	8e 2e       	mov	r8, r30
     d3a:	e3 e0       	ldi	r30, 0x03	; 3
     d3c:	9e 2e       	mov	r9, r30
     d3e:	8a 0c       	add	r8, r10
     d40:	9b 1c       	adc	r9, r11
     d42:	16 c0       	rjmp	.+44     	; 0xd70 <USB_ProcessHIDReport+0x49c>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     d44:	f5 01       	movw	r30, r10
     d46:	e0 5b       	subi	r30, 0xB0	; 176
     d48:	fc 4f       	sbci	r31, 0xFC	; 252

					while (CurrCollectionPath->Parent != NULL)
     d4a:	0b c0       	rjmp	.+22     	; 0xd62 <USB_ProcessHIDReport+0x48e>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     d4c:	c9 57       	subi	r28, 0x79	; 121
     d4e:	df 4f       	sbci	r29, 0xFF	; 255
     d50:	a8 81       	ld	r26, Y
     d52:	b9 81       	ldd	r27, Y+1	; 0x01
     d54:	c7 58       	subi	r28, 0x87	; 135
     d56:	d0 40       	sbci	r29, 0x00	; 0
     d58:	ea 17       	cp	r30, r26
     d5a:	fb 07       	cpc	r31, r27
     d5c:	09 f4       	brne	.+2      	; 0xd60 <USB_ProcessHIDReport+0x48c>
     d5e:	4f c1       	rjmp	.+670    	; 0xffe <USB_ProcessHIDReport+0x72a>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     d60:	37 96       	adiw	r30, 0x07	; 7
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     d62:	85 81       	ldd	r24, Z+5	; 0x05
     d64:	96 81       	ldd	r25, Z+6	; 0x06
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	89 f7       	brne	.-30     	; 0xd4c <USB_ProcessHIDReport+0x478>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     d6a:	96 82       	std	Z+6, r9	; 0x06
     d6c:	85 82       	std	Z+5, r8	; 0x05
     d6e:	4f 01       	movw	r8, r30
				}

				CurrCollectionPath->Type       = ReportItemData;
     d70:	f4 01       	movw	r30, r8
     d72:	c0 82       	st	Z, r12
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     d74:	d8 01       	movw	r26, r16
     d76:	11 96       	adiw	r26, 0x01	; 1
     d78:	8d 91       	ld	r24, X+
     d7a:	9c 91       	ld	r25, X
     d7c:	12 97       	sbiw	r26, 0x02	; 2
     d7e:	92 83       	std	Z+2, r25	; 0x02
     d80:	81 83       	std	Z+1, r24	; 0x01

				if (UsageListSize)
     d82:	33 23       	and	r19, r19
     d84:	81 f0       	breq	.+32     	; 0xda6 <USB_ProcessHIDReport+0x4d2>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	94 83       	std	Z+4, r25	; 0x04
     d8c:	83 83       	std	Z+3, r24	; 0x03
     d8e:	fe 01       	movw	r30, r28
     d90:	31 96       	adiw	r30, 0x01	; 1

					for (uint8_t i = 0; i < UsageListSize; i++)
     d92:	80 e0       	ldi	r24, 0x00	; 0
					  UsageList[i] = UsageList[i + 1];
     d94:	a2 81       	ldd	r26, Z+2	; 0x02
     d96:	b3 81       	ldd	r27, Z+3	; 0x03
     d98:	a1 93       	st	Z+, r26
     d9a:	b1 93       	st	Z+, r27

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     d9c:	8f 5f       	subi	r24, 0xFF	; 255
     d9e:	83 17       	cp	r24, r19
     da0:	c9 f7       	brne	.-14     	; 0xd94 <USB_ProcessHIDReport+0x4c0>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     da2:	31 50       	subi	r19, 0x01	; 1
     da4:	07 c1       	rjmp	.+526    	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     da6:	eb 96       	adiw	r28, 0x3b	; 59
     da8:	8c ad       	sts	0x6c, r24
     daa:	9d ad       	sts	0x6d, r25
     dac:	ae ad       	sts	0x6e, r26
     dae:	bf ad       	sts	0x6f, r27
     db0:	eb 97       	sbiw	r28, 0x3b	; 59
     db2:	84 15       	cp	r24, r4
     db4:	95 05       	cpc	r25, r5
     db6:	a6 05       	cpc	r26, r6
     db8:	b7 05       	cpc	r27, r7
     dba:	08 f4       	brcc	.+2      	; 0xdbe <USB_ProcessHIDReport+0x4ea>
     dbc:	fb c0       	rjmp	.+502    	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     dbe:	54 82       	std	Z+4, r5	; 0x04
     dc0:	43 82       	std	Z+3, r4	; 0x03
     dc2:	08 94       	sec
     dc4:	41 1c       	adc	r4, r1
     dc6:	51 1c       	adc	r5, r1
     dc8:	61 1c       	adc	r6, r1
     dca:	71 1c       	adc	r7, r1
     dcc:	f3 c0       	rjmp	.+486    	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     dce:	81 14       	cp	r8, r1
     dd0:	91 04       	cpc	r9, r1
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <USB_ProcessHIDReport+0x502>
     dd4:	16 c1       	rjmp	.+556    	; 0x1002 <USB_ProcessHIDReport+0x72e>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     dd6:	f4 01       	movw	r30, r8
     dd8:	85 80       	ldd	r8, Z+5	; 0x05
     dda:	96 80       	ldd	r9, Z+6	; 0x06
				break;
     ddc:	eb c0       	rjmp	.+470    	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     dde:	fe 01       	movw	r30, r28
     de0:	79 96       	adiw	r30, 0x19	; 25
     de2:	d8 01       	movw	r26, r16
     de4:	8a e1       	ldi	r24, 0x1A	; 26
     de6:	0d 90       	ld	r0, X+
     de8:	01 92       	st	Z+, r0
     dea:	81 50       	subi	r24, 0x01	; 1
     dec:	e1 f7       	brne	.-8      	; 0xde6 <USB_ProcessHIDReport+0x512>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     dee:	dd 8a       	std	Y+21, r13	; 0x15
     df0:	cc 8a       	std	Y+20, r12	; 0x14
					NewReportItem.CollectionPath = CurrCollectionPath;
     df2:	78 8f       	std	Y+24, r23	; 0x18
     df4:	6f 8b       	std	Y+23, r22	; 0x17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     df6:	d8 01       	movw	r26, r16
     df8:	5b 96       	adiw	r26, 0x1b	; 27
     dfa:	8c 91       	ld	r24, X
     dfc:	5b 97       	sbiw	r26, 0x1b	; 27
     dfe:	8e 8b       	std	Y+22, r24	; 0x16

					if (UsageListSize)
     e00:	33 23       	and	r19, r19
     e02:	81 f0       	breq	.+32     	; 0xe24 <USB_ProcessHIDReport+0x550>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	9a 81       	ldd	r25, Y+2	; 0x02
     e08:	9d 8f       	std	Y+29, r25	; 0x1d
     e0a:	8c 8f       	std	Y+28, r24	; 0x1c
     e0c:	fe 01       	movw	r30, r28
     e0e:	31 96       	adiw	r30, 0x01	; 1

						for (uint8_t i = 0; i < UsageListSize; i++)
     e10:	80 e0       	ldi	r24, 0x00	; 0
						  UsageList[i] = UsageList[i + 1];
     e12:	42 81       	ldd	r20, Z+2	; 0x02
     e14:	53 81       	ldd	r21, Z+3	; 0x03
     e16:	41 93       	st	Z+, r20
     e18:	51 93       	st	Z+, r21

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     e1a:	8f 5f       	subi	r24, 0xFF	; 255
     e1c:	83 17       	cp	r24, r19
     e1e:	c9 f7       	brne	.-14     	; 0xe12 <USB_ProcessHIDReport+0x53e>
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     e20:	31 50       	subi	r19, 0x01	; 1
     e22:	12 c0       	rjmp	.+36     	; 0xe48 <USB_ProcessHIDReport+0x574>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     e24:	eb 96       	adiw	r28, 0x3b	; 59
     e26:	8c ad       	sts	0x6c, r24
     e28:	9d ad       	sts	0x6d, r25
     e2a:	ae ad       	sts	0x6e, r26
     e2c:	bf ad       	sts	0x6f, r27
     e2e:	eb 97       	sbiw	r28, 0x3b	; 59
     e30:	84 15       	cp	r24, r4
     e32:	95 05       	cpc	r25, r5
     e34:	a6 05       	cpc	r26, r6
     e36:	b7 05       	cpc	r27, r7
     e38:	38 f0       	brcs	.+14     	; 0xe48 <USB_ProcessHIDReport+0x574>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     e3a:	5d 8e       	std	Y+29, r5	; 0x1d
     e3c:	4c 8e       	std	Y+28, r4	; 0x1c
     e3e:	08 94       	sec
     e40:	41 1c       	adc	r4, r1
     e42:	51 1c       	adc	r5, r1
     e44:	61 1c       	adc	r6, r1
     e46:	71 1c       	adc	r7, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     e48:	90 e8       	ldi	r25, 0x80	; 128
     e4a:	29 16       	cp	r2, r25
     e4c:	11 f4       	brne	.+4      	; 0xe52 <USB_ProcessHIDReport+0x57e>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     e4e:	1b 8a       	std	Y+19, r1	; 0x13
     e50:	08 c0       	rjmp	.+16     	; 0xe62 <USB_ProcessHIDReport+0x58e>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     e52:	a0 e9       	ldi	r26, 0x90	; 144
     e54:	2a 16       	cp	r2, r26
     e56:	19 f4       	brne	.+6      	; 0xe5e <USB_ProcessHIDReport+0x58a>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     e58:	b1 e0       	ldi	r27, 0x01	; 1
     e5a:	bb 8b       	std	Y+19, r27	; 0x13
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <USB_ProcessHIDReport+0x58e>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     e5e:	e2 e0       	ldi	r30, 0x02	; 2
     e60:	eb 8b       	std	Y+19, r30	; 0x13

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     e62:	eb 89       	ldd	r30, Y+19	; 0x13
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	ee 0f       	add	r30, r30
     e68:	ff 1f       	adc	r31, r31
     e6a:	e8 0d       	add	r30, r8
     e6c:	f9 1d       	adc	r31, r9
     e6e:	81 81       	ldd	r24, Z+1	; 0x01
     e70:	92 81       	ldd	r25, Z+2	; 0x02
     e72:	9a 8b       	std	Y+18, r25	; 0x12
     e74:	89 8b       	std	Y+17, r24	; 0x11

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     e76:	d8 01       	movw	r26, r16
     e78:	2c 91       	ld	r18, X
     e7a:	81 81       	ldd	r24, Z+1	; 0x01
     e7c:	92 81       	ldd	r25, Z+2	; 0x02
     e7e:	82 0f       	add	r24, r18
     e80:	91 1d       	adc	r25, r1
     e82:	92 83       	std	Z+2, r25	; 0x02
     e84:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     e86:	eb 89       	ldd	r30, Y+19	; 0x13
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	ee 0f       	add	r30, r30
     e8c:	ff 1f       	adc	r31, r31
     e8e:	e8 0d       	add	r30, r8
     e90:	f9 1d       	adc	r31, r9
     e92:	cf 57       	subi	r28, 0x7F	; 127
     e94:	df 4f       	sbci	r29, 0xFF	; 255
     e96:	a8 81       	ld	r26, Y
     e98:	b9 81       	ldd	r27, Y+1	; 0x01
     e9a:	c1 58       	subi	r28, 0x81	; 129
     e9c:	d0 40       	sbci	r29, 0x00	; 0
     e9e:	4d 91       	ld	r20, X+
     ea0:	5c 91       	ld	r21, X
     ea2:	11 97       	sbiw	r26, 0x01	; 1
     ea4:	81 81       	ldd	r24, Z+1	; 0x01
     ea6:	92 81       	ldd	r25, Z+2	; 0x02
     ea8:	84 17       	cp	r24, r20
     eaa:	95 07       	cpc	r25, r21
     eac:	08 f4       	brcc	.+2      	; 0xeb0 <USB_ProcessHIDReport+0x5dc>
     eae:	ca 01       	movw	r24, r20
     eb0:	cf 57       	subi	r28, 0x7F	; 127
     eb2:	df 4f       	sbci	r29, 0xFF	; 255
     eb4:	e8 81       	ld	r30, Y
     eb6:	f9 81       	ldd	r31, Y+1	; 0x01
     eb8:	c1 58       	subi	r28, 0x81	; 129
     eba:	d0 40       	sbci	r29, 0x00	; 0
     ebc:	91 83       	std	Z+1, r25	; 0x01
     ebe:	80 83       	st	Z, r24

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     ec0:	d5 01       	movw	r26, r10
     ec2:	8c 91       	ld	r24, X
     ec4:	84 31       	cpi	r24, 0x14	; 20
     ec6:	09 f4       	brne	.+2      	; 0xeca <USB_ProcessHIDReport+0x5f6>
     ec8:	9e c0       	rjmp	.+316    	; 0x1006 <USB_ProcessHIDReport+0x732>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	4a e2       	ldi	r20, 0x2A	; 42
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	84 9f       	mul	r24, r20
     ed2:	f0 01       	movw	r30, r0
     ed4:	85 9f       	mul	r24, r21
     ed6:	f0 0d       	add	r31, r0
     ed8:	94 9f       	mul	r25, r20
     eda:	f0 0d       	add	r31, r0
     edc:	11 24       	eor	r1, r1
     ede:	ea 0d       	add	r30, r10
     ee0:	fb 1d       	adc	r31, r11
     ee2:	31 96       	adiw	r30, 0x01	; 1
     ee4:	de 01       	movw	r26, r28
     ee6:	51 96       	adiw	r26, 0x11	; 17
     ee8:	8a e2       	ldi	r24, 0x2A	; 42
     eea:	0d 90       	ld	r0, X+
     eec:	01 92       	st	Z+, r0
     eee:	81 50       	subi	r24, 0x01	; 1
     ef0:	e1 f7       	brne	.-8      	; 0xeea <USB_ProcessHIDReport+0x616>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     ef2:	cd 57       	subi	r28, 0x7D	; 125
     ef4:	df 4f       	sbci	r29, 0xFF	; 255
     ef6:	88 81       	ld	r24, Y
     ef8:	99 81       	ldd	r25, Y+1	; 0x01
     efa:	aa 81       	ldd	r26, Y+2	; 0x02
     efc:	bb 81       	ldd	r27, Y+3	; 0x03
     efe:	c3 58       	subi	r28, 0x83	; 131
     f00:	d0 40       	sbci	r29, 0x00	; 0
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	a1 05       	cpc	r26, r1
     f06:	b1 05       	cpc	r27, r1
     f08:	39 f5       	brne	.+78     	; 0xf58 <USB_ProcessHIDReport+0x684>
     f0a:	ce 01       	movw	r24, r28
     f0c:	41 96       	adiw	r24, 0x11	; 17
     f0e:	c1 57       	subi	r28, 0x71	; 113
     f10:	df 4f       	sbci	r29, 0xFF	; 255
     f12:	38 83       	st	Y, r19
     f14:	cf 58       	subi	r28, 0x8F	; 143
     f16:	d0 40       	sbci	r29, 0x00	; 0
     f18:	c3 57       	subi	r28, 0x73	; 115
     f1a:	df 4f       	sbci	r29, 0xFF	; 255
     f1c:	68 83       	st	Y, r22
     f1e:	cd 58       	subi	r28, 0x8D	; 141
     f20:	d0 40       	sbci	r29, 0x00	; 0
     f22:	c2 57       	subi	r28, 0x72	; 114
     f24:	df 4f       	sbci	r29, 0xFF	; 255
     f26:	78 83       	st	Y, r23
     f28:	ce 58       	subi	r28, 0x8E	; 142
     f2a:	d0 40       	sbci	r29, 0x00	; 0
     f2c:	c9 dc       	rcall	.-1646   	; 0x8c0 <CALLBACK_HIDParser_FilterHIDReportItem>
     f2e:	c1 57       	subi	r28, 0x71	; 113
     f30:	df 4f       	sbci	r29, 0xFF	; 255
     f32:	38 81       	ld	r19, Y
     f34:	cf 58       	subi	r28, 0x8F	; 143
     f36:	d0 40       	sbci	r29, 0x00	; 0
     f38:	c3 57       	subi	r28, 0x73	; 115
     f3a:	df 4f       	sbci	r29, 0xFF	; 255
     f3c:	68 81       	ld	r22, Y
     f3e:	cd 58       	subi	r28, 0x8D	; 141
     f40:	d0 40       	sbci	r29, 0x00	; 0
     f42:	c2 57       	subi	r28, 0x72	; 114
     f44:	df 4f       	sbci	r29, 0xFF	; 255
     f46:	78 81       	ld	r23, Y
     f48:	ce 58       	subi	r28, 0x8E	; 142
     f4a:	d0 40       	sbci	r29, 0x00	; 0
     f4c:	88 23       	and	r24, r24
     f4e:	21 f0       	breq	.+8      	; 0xf58 <USB_ProcessHIDReport+0x684>
     f50:	d5 01       	movw	r26, r10
					  ParserData->TotalReportItems++;
     f52:	8c 91       	ld	r24, X
     f54:	8f 5f       	subi	r24, 0xFF	; 255
     f56:	8c 93       	st	X, r24
     f58:	33 94       	inc	r3
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     f5a:	1a c0       	rjmp	.+52     	; 0xf90 <USB_ProcessHIDReport+0x6bc>
     f5c:	33 24       	eor	r3, r3
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     f5e:	8c ef       	ldi	r24, 0xFC	; 252
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));
     f60:	28 2e       	mov	r2, r24
     f62:	22 22       	and	r2, r18
     f64:	d7 01       	movw	r26, r14
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     f66:	c6 01       	movw	r24, r12
     f68:	81 70       	andi	r24, 0x01	; 1
     f6a:	90 70       	andi	r25, 0x00	; 0
     f6c:	a0 70       	andi	r26, 0x00	; 0
     f6e:	b0 70       	andi	r27, 0x00	; 0
     f70:	cd 57       	subi	r28, 0x7D	; 125
     f72:	df 4f       	sbci	r29, 0xFF	; 255
     f74:	88 83       	st	Y, r24
     f76:	99 83       	std	Y+1, r25	; 0x01
     f78:	aa 83       	std	Y+2, r26	; 0x02
     f7a:	bb 83       	std	Y+3, r27	; 0x03
     f7c:	c3 58       	subi	r28, 0x83	; 131
     f7e:	d0 40       	sbci	r29, 0x00	; 0
     f80:	c5 57       	subi	r28, 0x75	; 117
     f82:	df 4f       	sbci	r29, 0xFF	; 255
     f84:	79 83       	std	Y+1, r23	; 0x01
     f86:	68 83       	st	Y, r22
     f88:	cb 58       	subi	r28, 0x8B	; 139
     f8a:	d0 40       	sbci	r29, 0x00	; 0
     f8c:	b4 01       	movw	r22, r8
     f8e:	4a 01       	movw	r8, r20
     f90:	d8 01       	movw	r26, r16
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     f92:	5a 96       	adiw	r26, 0x1a	; 26
     f94:	8c 91       	ld	r24, X
     f96:	5a 97       	sbiw	r26, 0x1a	; 26
     f98:	38 16       	cp	r3, r24
     f9a:	08 f4       	brcc	.+2      	; 0xf9e <USB_ProcessHIDReport+0x6ca>
     f9c:	20 cf       	rjmp	.-448    	; 0xdde <USB_ProcessHIDReport+0x50a>
     f9e:	a4 01       	movw	r20, r8
     fa0:	4b 01       	movw	r8, r22
     fa2:	c5 57       	subi	r28, 0x75	; 117
     fa4:	df 4f       	sbci	r29, 0xFF	; 255
     fa6:	68 81       	ld	r22, Y
     fa8:	79 81       	ldd	r23, Y+1	; 0x01
     faa:	cb 58       	subi	r28, 0x8B	; 139
     fac:	d0 40       	sbci	r29, 0x00	; 0
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <USB_ProcessHIDReport+0x6e0>
     fb0:	26 01       	movw	r4, r12
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     fb2:	37 01       	movw	r6, r14
     fb4:	ed 96       	adiw	r28, 0x3d	; 61
			
			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     fb6:	8e ad       	sts	0x6e, r24
     fb8:	9f ad       	sts	0x6f, r25
     fba:	ed 97       	sbiw	r28, 0x3d	; 61
     fbc:	8c 70       	andi	r24, 0x0C	; 12
     fbe:	90 70       	andi	r25, 0x00	; 0
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	51 f4       	brne	.+20     	; 0xfd8 <USB_ProcessHIDReport+0x704>
     fc4:	eb 96       	adiw	r28, 0x3b	; 59
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     fc6:	1c ae       	sts	0xbc, r17
     fc8:	1d ae       	sts	0xbd, r17
     fca:	1e ae       	sts	0xbe, r17
     fcc:	1f ae       	sts	0xbf, r17
     fce:	eb 97       	sbiw	r28, 0x3b	; 59
     fd0:	44 24       	eor	r4, r4
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     fd2:	55 24       	eor	r5, r5
     fd4:	32 01       	movw	r6, r4
     fd6:	30 e0       	ldi	r19, 0x00	; 0
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     fd8:	e7 96       	adiw	r28, 0x37	; 55
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     fda:	ee ad       	sts	0x6e, r30
     fdc:	ff ad       	sts	0x6f, r31
     fde:	e7 97       	sbiw	r28, 0x37	; 55
     fe0:	30 97       	sbiw	r30, 0x00	; 0
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <USB_ProcessHIDReport+0x712>
     fe4:	e1 cc       	rjmp	.-1598   	; 0x9a8 <USB_ProcessHIDReport+0xd4>
     fe6:	d5 01       	movw	r26, r10
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     fe8:	8c 91       	ld	r24, X
     fea:	88 23       	and	r24, r24
     fec:	71 f4       	brne	.+28     	; 0x100a <USB_ProcessHIDReport+0x736>
     fee:	88 e0       	ldi	r24, 0x08	; 8
	  return HID_PARSE_NoUnfilteredReportItems;
     ff0:	0f c0       	rjmp	.+30     	; 0x1010 <USB_ProcessHIDReport+0x73c>
     ff2:	81 e0       	ldi	r24, 0x01	; 1

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     ff4:	0d c0       	rjmp	.+26     	; 0x1010 <USB_ProcessHIDReport+0x73c>
     ff6:	82 e0       	ldi	r24, 0x02	; 2

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     ff8:	0b c0       	rjmp	.+22     	; 0x1010 <USB_ProcessHIDReport+0x73c>
     ffa:	86 e0       	ldi	r24, 0x06	; 6

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     ffc:	09 c0       	rjmp	.+18     	; 0x1010 <USB_ProcessHIDReport+0x73c>
     ffe:	85 e0       	ldi	r24, 0x05	; 5
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
    1000:	07 c0       	rjmp	.+14     	; 0x1010 <USB_ProcessHIDReport+0x73c>
    1002:	84 e0       	ldi	r24, 0x04	; 4
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
    1004:	05 c0       	rjmp	.+10     	; 0x1010 <USB_ProcessHIDReport+0x73c>
    1006:	83 e0       	ldi	r24, 0x03	; 3
					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;
    1008:	03 c0       	rjmp	.+6      	; 0x1010 <USB_ProcessHIDReport+0x73c>
    100a:	80 e0       	ldi	r24, 0x00	; 0
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
    100c:	01 c0       	rjmp	.+2      	; 0x1010 <USB_ProcessHIDReport+0x73c>
    100e:	87 e0       	ldi	r24, 0x07	; 7
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
    1010:	c1 57       	subi	r28, 0x71	; 113

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
    1012:	df 4f       	sbci	r29, 0xFF	; 255
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	ff 90       	pop	r15
    1028:	ef 90       	pop	r14
    102a:	df 90       	pop	r13
    102c:	cf 90       	pop	r12
    102e:	bf 90       	pop	r11
    1030:	af 90       	pop	r10
    1032:	9f 90       	pop	r9
    1034:	8f 90       	pop	r8
    1036:	7f 90       	pop	r7
    1038:	6f 90       	pop	r6
    103a:	5f 90       	pop	r5
    103c:	4f 90       	pop	r4
    103e:	3f 90       	pop	r3
    1040:	2f 90       	pop	r2
    1042:	08 95       	ret
    1044:	2a 30       	cpi	r18, 0x0A	; 10
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
    1046:	09 f0       	breq	.+2      	; 0x104a <USB_ProcessHIDReport+0x776>
    1048:	39 ce       	rjmp	.-910    	; 0xcbc <USB_ProcessHIDReport+0x3e8>
    104a:	e1 cf       	rjmp	.-62     	; 0x100e <USB_ProcessHIDReport+0x73a>

0000104c <USB_GetHIDReportItemInfo>:
    104c:	ef 92       	push	r14
	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
    104e:	ff 92       	push	r15
    1050:	0f 93       	push	r16
    1052:	1f 93       	push	r17
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	8c 01       	movw	r16, r24
    105a:	eb 01       	movw	r28, r22
	if (ReportItem == NULL)
    105c:	20 97       	sbiw	r28, 0x00	; 0
    105e:	09 f4       	brne	.+2      	; 0x1062 <USB_GetHIDReportItemInfo+0x16>
    1060:	4e c0       	rjmp	.+156    	; 0x10fe <USB_GetHIDReportItemInfo+0xb2>
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    1062:	e8 85       	ldd	r30, Y+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
    1064:	58 81       	ld	r21, Y
    1066:	49 81       	ldd	r20, Y+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
    1068:	8d 81       	ldd	r24, Y+5	; 0x05
    106a:	88 23       	and	r24, r24
    106c:	39 f0       	breq	.+14     	; 0x107c <USB_GetHIDReportItemInfo+0x30>
	{
		if (ReportItem->ReportID != ReportData[0])
    106e:	d8 01       	movw	r26, r16
    1070:	9c 91       	ld	r25, X
    1072:	89 17       	cp	r24, r25
    1074:	09 f0       	breq	.+2      	; 0x1078 <USB_GetHIDReportItemInfo+0x2c>
    1076:	43 c0       	rjmp	.+134    	; 0x10fe <USB_GetHIDReportItemInfo+0xb2>
		  return false;

		ReportData++;
    1078:	0f 5f       	subi	r16, 0xFF	; 255
    107a:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	ReportItem->PreviousValue = ReportItem->Value;
    107c:	8a a1       	lds	r24, 0x4a
    107e:	9b a1       	lds	r25, 0x4b
    1080:	ac a1       	lds	r26, 0x4c
    1082:	bd a1       	lds	r27, 0x4d
    1084:	8e a3       	lds	r24, 0x5e
    1086:	9f a3       	lds	r25, 0x5f
    1088:	a8 a7       	lds	r26, 0x78
    108a:	b9 a7       	lds	r27, 0x79
	ReportItem->Value = 0;
    108c:	1a a2       	lds	r17, 0x9a
    108e:	1b a2       	lds	r17, 0x9b
    1090:	1c a2       	lds	r17, 0x9c
    1092:	1d a2       	lds	r17, 0x9d
{
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
    1094:	25 2f       	mov	r18, r21
    1096:	34 2f       	mov	r19, r20
	uint32_t BitMask      = (1 << 0);
    1098:	41 e0       	ldi	r20, 0x01	; 1
    109a:	50 e0       	ldi	r21, 0x00	; 0
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	70 e0       	ldi	r23, 0x00	; 0
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
    10a0:	79 01       	movw	r14, r18
    10a2:	ee 0e       	add	r14, r30
    10a4:	f1 1c       	adc	r15, r1
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
    10a6:	26 c0       	rjmp	.+76     	; 0x10f4 <USB_GetHIDReportItemInfo+0xa8>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
    10a8:	f9 01       	movw	r30, r18
    10aa:	93 e0       	ldi	r25, 0x03	; 3
    10ac:	f6 95       	lsr	r31
    10ae:	e7 95       	ror	r30
    10b0:	9a 95       	dec	r25
    10b2:	e1 f7       	brne	.-8      	; 0x10ac <USB_GetHIDReportItemInfo+0x60>
    10b4:	e0 0f       	add	r30, r16
    10b6:	f1 1f       	adc	r31, r17
    10b8:	e0 81       	ld	r30, Z
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	c9 01       	movw	r24, r18
    10be:	87 70       	andi	r24, 0x07	; 7
    10c0:	90 70       	andi	r25, 0x00	; 0
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <USB_GetHIDReportItemInfo+0x7c>
    10c4:	f5 95       	asr	r31
    10c6:	e7 95       	ror	r30
    10c8:	8a 95       	dec	r24
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <USB_GetHIDReportItemInfo+0x78>
    10cc:	e0 ff       	sbrs	r30, 0
    10ce:	0c c0       	rjmp	.+24     	; 0x10e8 <USB_GetHIDReportItemInfo+0x9c>
		  ReportItem->Value |= BitMask;
    10d0:	8a a1       	lds	r24, 0x4a
    10d2:	9b a1       	lds	r25, 0x4b
    10d4:	ac a1       	lds	r26, 0x4c
    10d6:	bd a1       	lds	r27, 0x4d
    10d8:	84 2b       	or	r24, r20
    10da:	95 2b       	or	r25, r21
    10dc:	a6 2b       	or	r26, r22
    10de:	b7 2b       	or	r27, r23
    10e0:	8a a3       	lds	r24, 0x5a
    10e2:	9b a3       	lds	r25, 0x5b
    10e4:	ac a3       	lds	r26, 0x5c
    10e6:	bd a3       	lds	r27, 0x5d

		CurrentBit++;
    10e8:	2f 5f       	subi	r18, 0xFF	; 255
    10ea:	3f 4f       	sbci	r19, 0xFF	; 255
		BitMask <<= 1;
    10ec:	44 0f       	add	r20, r20
    10ee:	55 1f       	adc	r21, r21
    10f0:	66 1f       	adc	r22, r22
    10f2:	77 1f       	adc	r23, r23
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
    10f4:	e2 16       	cp	r14, r18
    10f6:	f3 06       	cpc	r15, r19
    10f8:	b9 f6       	brne	.-82     	; 0x10a8 <USB_GetHIDReportItemInfo+0x5c>

		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <USB_GetHIDReportItemInfo+0xb4>
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
		  return false;
    10fe:	80 e0       	ldi	r24, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	ff 90       	pop	r15
    110a:	ef 90       	pop	r14
    110c:	08 95       	ret

0000110e <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    110e:	80 91 9e 00 	lds	r24, 0x009E
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	81 70       	andi	r24, 0x01	; 1
    1116:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1118:	20 91 a0 00 	lds	r18, 0x00A0
    111c:	2d 7f       	andi	r18, 0xFD	; 253
    111e:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
    1122:	20 91 9e 00 	lds	r18, 0x009E
    1126:	22 60       	ori	r18, 0x02	; 2
    1128:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
    112c:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
    1130:	21 fd       	sbrc	r18, 1
    1132:	fc cf       	rjmp	.-8      	; 0x112c <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1134:	20 91 9e 00 	lds	r18, 0x009E
    1138:	21 60       	ori	r18, 0x01	; 1
    113a:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
    113e:	10 92 f8 04 	sts	0x04F8, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1142:	20 91 a0 00 	lds	r18, 0x00A0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	20 72       	andi	r18, 0x20	; 32
    114a:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    114c:	40 91 a0 00 	lds	r20, 0x00A0
    1150:	4f 7d       	andi	r20, 0xDF	; 223
    1152:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1156:	40 91 9f 00 	lds	r20, 0x009F
    115a:	4f 7d       	andi	r20, 0xDF	; 223
    115c:	40 93 9f 00 	sts	0x009F, r20
    1160:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1162:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    1166:	55 ff       	sbrs	r21, 5
    1168:	0b c0       	rjmp	.+22     	; 0x1180 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    116a:	40 91 9f 00 	lds	r20, 0x009F
    116e:	4f 7d       	andi	r20, 0xDF	; 223
    1170:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1174:	40 91 9f 00 	lds	r20, 0x009F
    1178:	4d 7f       	andi	r20, 0xFD	; 253
    117a:	40 93 9f 00 	sts	0x009F, r20
    117e:	08 c0       	rjmp	.+16     	; 0x1190 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1180:	ef ec       	ldi	r30, 0xCF	; 207
    1182:	f7 e0       	ldi	r31, 0x07	; 7
    1184:	31 97       	sbiw	r30, 0x01	; 1
    1186:	f1 f7       	brne	.-4      	; 0x1184 <USB_Host_ResetDevice+0x76>
    1188:	00 c0       	rjmp	.+0      	; 0x118a <USB_Host_ResetDevice+0x7c>
    118a:	00 00       	nop
    118c:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
    118e:	49 f7       	brne	.-46     	; 0x1162 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
    1190:	21 15       	cp	r18, r1
    1192:	31 05       	cpc	r19, r1
    1194:	29 f0       	breq	.+10     	; 0x11a0 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    1196:	20 91 a0 00 	lds	r18, 0x00A0
    119a:	20 62       	ori	r18, 0x20	; 32
    119c:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	29 f4       	brne	.+10     	; 0x11ae <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    11a4:	80 91 9e 00 	lds	r24, 0x009E
    11a8:	8e 7f       	andi	r24, 0xFE	; 254
    11aa:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    11ae:	80 91 a0 00 	lds	r24, 0x00A0
    11b2:	82 60       	ori	r24, 0x02	; 2
    11b4:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
    11b8:	08 95       	ret

000011ba <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    11ba:	40 91 9e 00 	lds	r20, 0x009E
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	41 70       	andi	r20, 0x01	; 1
    11c2:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    11c4:	20 91 a0 00 	lds	r18, 0x00A0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	20 72       	andi	r18, 0x20	; 32
    11cc:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    11ce:	90 91 a0 00 	lds	r25, 0x00A0
    11d2:	9f 7d       	andi	r25, 0xDF	; 223
    11d4:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    11d8:	90 91 9f 00 	lds	r25, 0x009F
    11dc:	9f 7d       	andi	r25, 0xDF	; 223
    11de:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    11e2:	90 91 9e 00 	lds	r25, 0x009E
    11e6:	91 60       	ori	r25, 0x01	; 1
    11e8:	90 93 9e 00 	sts	0x009E, r25
    11ec:	26 c0       	rjmp	.+76     	; 0x123a <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    11ee:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    11f2:	95 ff       	sbrs	r25, 5
    11f4:	06 c0       	rjmp	.+12     	; 0x1202 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    11f6:	90 91 9f 00 	lds	r25, 0x009F
    11fa:	9f 7d       	andi	r25, 0xDF	; 223
    11fc:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
    1200:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
    1202:	90 91 02 05 	lds	r25, 0x0502
    1206:	91 30       	cpi	r25, 0x01	; 1
    1208:	d9 f0       	breq	.+54     	; 0x1240 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
    120a:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
    120e:	94 ff       	sbrs	r25, 4
    1210:	09 c0       	rjmp	.+18     	; 0x1224 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1212:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1216:	80 91 a6 00 	lds	r24, 0x00A6
    121a:	8f 7e       	andi	r24, 0xEF	; 239
    121c:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
    1220:	82 e0       	ldi	r24, 0x02	; 2

			break;
    1222:	0f c0       	rjmp	.+30     	; 0x1242 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1224:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
    1228:	91 ff       	sbrs	r25, 1
    122a:	07 c0       	rjmp	.+14     	; 0x123a <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
    122c:	80 91 a6 00 	lds	r24, 0x00A6
    1230:	8d 7f       	andi	r24, 0xFD	; 253
    1232:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
    1236:	83 e0       	ldi	r24, 0x03	; 3

			break;
    1238:	04 c0       	rjmp	.+8      	; 0x1242 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    123a:	88 23       	and	r24, r24
    123c:	c1 f6       	brne	.-80     	; 0x11ee <USB_Host_WaitMS+0x34>
    123e:	01 c0       	rjmp	.+2      	; 0x1242 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
    1240:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
    1242:	41 15       	cp	r20, r1
    1244:	51 05       	cpc	r21, r1
    1246:	29 f4       	brne	.+10     	; 0x1252 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1248:	90 91 9e 00 	lds	r25, 0x009E
    124c:	9e 7f       	andi	r25, 0xFE	; 254
    124e:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
    1252:	21 15       	cp	r18, r1
    1254:	31 05       	cpc	r19, r1
    1256:	29 f0       	breq	.+10     	; 0x1262 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    1258:	90 91 a0 00 	lds	r25, 0x00A0
    125c:	90 62       	ori	r25, 0x20	; 32
    125e:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
    1262:	08 95       	ret

00001264 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
    1264:	0f 93       	push	r16
    1266:	1f 93       	push	r17
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	28 97       	sbiw	r28, 0x08	; 8
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	de bf       	out	0x3e, r29	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    127c:	80 91 02 05 	lds	r24, 0x0502
    1280:	85 30       	cpi	r24, 0x05	; 5
    1282:	09 f4       	brne	.+2      	; 0x1286 <USB_Host_ProcessNextHostState+0x22>
    1284:	99 c0       	rjmp	.+306    	; 0x13b8 <USB_Host_ProcessNextHostState+0x154>
    1286:	86 30       	cpi	r24, 0x06	; 6
    1288:	68 f4       	brcc	.+26     	; 0x12a4 <USB_Host_ProcessNextHostState+0x40>
    128a:	82 30       	cpi	r24, 0x02	; 2
    128c:	c1 f1       	breq	.+112    	; 0x12fe <USB_Host_ProcessNextHostState+0x9a>
    128e:	83 30       	cpi	r24, 0x03	; 3
    1290:	18 f4       	brcc	.+6      	; 0x1298 <USB_Host_ProcessNextHostState+0x34>
    1292:	88 23       	and	r24, r24
    1294:	a1 f0       	breq	.+40     	; 0x12be <USB_Host_ProcessNextHostState+0x5a>
    1296:	06 c1       	rjmp	.+524    	; 0x14a4 <USB_Host_ProcessNextHostState+0x240>
    1298:	83 30       	cpi	r24, 0x03	; 3
    129a:	d9 f1       	breq	.+118    	; 0x1312 <USB_Host_ProcessNextHostState+0xae>
    129c:	84 30       	cpi	r24, 0x04	; 4
    129e:	09 f0       	breq	.+2      	; 0x12a2 <USB_Host_ProcessNextHostState+0x3e>
    12a0:	01 c1       	rjmp	.+514    	; 0x14a4 <USB_Host_ProcessNextHostState+0x240>
    12a2:	62 c0       	rjmp	.+196    	; 0x1368 <USB_Host_ProcessNextHostState+0x104>
    12a4:	87 30       	cpi	r24, 0x07	; 7
    12a6:	09 f4       	brne	.+2      	; 0x12aa <USB_Host_ProcessNextHostState+0x46>
    12a8:	9e c0       	rjmp	.+316    	; 0x13e6 <USB_Host_ProcessNextHostState+0x182>
    12aa:	87 30       	cpi	r24, 0x07	; 7
    12ac:	08 f4       	brcc	.+2      	; 0x12b0 <USB_Host_ProcessNextHostState+0x4c>
    12ae:	8f c0       	rjmp	.+286    	; 0x13ce <USB_Host_ProcessNextHostState+0x16a>
    12b0:	88 30       	cpi	r24, 0x08	; 8
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <USB_Host_ProcessNextHostState+0x52>
    12b4:	b8 c0       	rjmp	.+368    	; 0x1426 <USB_Host_ProcessNextHostState+0x1c2>
    12b6:	89 30       	cpi	r24, 0x09	; 9
    12b8:	09 f0       	breq	.+2      	; 0x12bc <USB_Host_ProcessNextHostState+0x58>
    12ba:	f4 c0       	rjmp	.+488    	; 0x14a4 <USB_Host_ProcessNextHostState+0x240>
    12bc:	d9 c0       	rjmp	.+434    	; 0x1470 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    12be:	00 91 1a 01 	lds	r16, 0x011A
    12c2:	10 91 1b 01 	lds	r17, 0x011B
    12c6:	01 15       	cp	r16, r1
    12c8:	11 05       	cpc	r17, r1
    12ca:	09 f4       	brne	.+2      	; 0x12ce <USB_Host_ProcessNextHostState+0x6a>
    12cc:	eb c0       	rjmp	.+470    	; 0x14a4 <USB_Host_ProcessNextHostState+0x240>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	74 df       	rcall	.-280    	; 0x11ba <USB_Host_WaitMS>
    12d2:	68 2f       	mov	r22, r24
    12d4:	88 23       	and	r24, r24
    12d6:	31 f0       	breq	.+12     	; 0x12e4 <USB_Host_ProcessNextHostState+0x80>
    12d8:	80 91 1c 01 	lds	r24, 0x011C
				{
					USB_HostState = PostWaitState;
    12dc:	80 93 02 05 	sts	0x0502, r24
    12e0:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
    12e2:	d3 c0       	rjmp	.+422    	; 0x148a <USB_Host_ProcessNextHostState+0x226>
					break;
    12e4:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
    12e6:	10 40       	sbci	r17, 0x00	; 0
    12e8:	10 93 1b 01 	sts	0x011B, r17
    12ec:	00 93 1a 01 	sts	0x011A, r16
    12f0:	01 15       	cp	r16, r1
    12f2:	11 05       	cpc	r17, r1
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <USB_Host_ProcessNextHostState+0x94>
    12f6:	d6 c0       	rjmp	.+428    	; 0x14a4 <USB_Host_ProcessNextHostState+0x240>
    12f8:	80 91 1c 01 	lds	r24, 0x011C
				  USB_HostState = PostWaitState;
    12fc:	07 c0       	rjmp	.+14     	; 0x130c <USB_Host_ProcessNextHostState+0xa8>
    12fe:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    1300:	93 e0       	ldi	r25, 0x03	; 3
    1302:	90 93 1b 01 	sts	0x011B, r25
    1306:	80 93 1a 01 	sts	0x011A, r24
    130a:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    130c:	80 93 02 05 	sts	0x0502, r24
    1310:	c9 c0       	rjmp	.+402    	; 0x14a4 <USB_Host_ProcessNextHostState+0x240>
			break;
    1312:	80 91 1a 01 	lds	r24, 0x011A
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    1316:	90 91 1b 01 	lds	r25, 0x011B
    131a:	9c 01       	movw	r18, r24
    131c:	21 50       	subi	r18, 0x01	; 1
    131e:	30 40       	sbci	r19, 0x00	; 0
    1320:	30 93 1b 01 	sts	0x011B, r19
    1324:	20 93 1a 01 	sts	0x011A, r18
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	39 f0       	breq	.+14     	; 0x133a <USB_Host_ProcessNextHostState+0xd6>
    132c:	8f ec       	ldi	r24, 0xCF	; 207
    132e:	97 e0       	ldi	r25, 0x07	; 7
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	f1 f7       	brne	.-4      	; 0x1330 <USB_Host_ProcessNextHostState+0xcc>
    1334:	00 c0       	rjmp	.+0      	; 0x1336 <USB_Host_ProcessNextHostState+0xd2>
    1336:	00 00       	nop
    1338:	b5 c0       	rjmp	.+362    	; 0x14a4 <USB_Host_ProcessNextHostState+0x240>
    133a:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    133c:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1340:	80 61       	ori	r24, 0x10	; 16
    1342:	80 93 d8 00 	sts	0x00D8, r24
    1346:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    134a:	8b 7f       	andi	r24, 0xFB	; 251
    134c:	80 93 dd 00 	sts	0x00DD, r24
    1350:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
    1354:	80 61       	ori	r24, 0x10	; 16
    1356:	80 93 d7 00 	sts	0x00D7, r24
    135a:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    135e:	82 60       	ori	r24, 0x02	; 2
    1360:	80 93 dd 00 	sts	0x00DD, r24
    1364:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    1366:	d2 cf       	rjmp	.-92     	; 0x130c <USB_Host_ProcessNextHostState+0xa8>
    1368:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    136c:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    136e:	9a c0       	rjmp	.+308    	; 0x14a4 <USB_Host_ProcessNextHostState+0x240>
    1370:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1374:	8e 7f       	andi	r24, 0xFE	; 254
    1376:	80 93 9f 00 	sts	0x009F, r24
    137a:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    137e:	8d 7f       	andi	r24, 0xFD	; 253
    1380:	80 93 9f 00 	sts	0x009F, r24
    1384:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1388:	8d 7f       	andi	r24, 0xFD	; 253
    138a:	80 93 df 00 	sts	0x00DF, r24
    138e:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    1392:	82 60       	ori	r24, 0x02	; 2
    1394:	80 93 de 00 	sts	0x00DE, r24
    1398:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    139c:	81 60       	ori	r24, 0x01	; 1
    139e:	80 93 9e 00 	sts	0x009E, r24
    13a2:	47 d1       	rcall	.+654    	; 0x1632 <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    13a4:	10 92 02 05 	sts	0x0502, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    13a8:	84 e6       	ldi	r24, 0x64	; 100
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	90 93 1b 01 	sts	0x011B, r25
    13b0:	80 93 1a 01 	sts	0x011A, r24
    13b4:	85 e0       	ldi	r24, 0x05	; 5
    13b6:	59 c0       	rjmp	.+178    	; 0x146a <USB_Host_ProcessNextHostState+0x206>
    13b8:	aa de       	rcall	.-684    	; 0x110e <USB_Host_ResetDevice>
    13ba:	10 92 02 05 	sts	0x0502, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    13be:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	90 93 1b 01 	sts	0x011B, r25
    13c6:	80 93 1a 01 	sts	0x011A, r24
    13ca:	86 e0       	ldi	r24, 0x06	; 6
    13cc:	4e c0       	rjmp	.+156    	; 0x146a <USB_Host_ProcessNextHostState+0x206>
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    13d4:	20 e4       	ldi	r18, 0x40	; 64
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	01 e0       	ldi	r16, 0x01	; 1
    13da:	c6 d0       	rcall	.+396    	; 0x1568 <Pipe_ConfigurePipe>
    13dc:	88 23       	and	r24, r24
    13de:	09 f4       	brne	.+2      	; 0x13e2 <USB_Host_ProcessNextHostState+0x17e>
    13e0:	50 c0       	rjmp	.+160    	; 0x1482 <USB_Host_ProcessNextHostState+0x21e>
    13e2:	87 e0       	ldi	r24, 0x07	; 7
    13e4:	93 cf       	rjmp	.-218    	; 0x130c <USB_Host_ProcessNextHostState+0xa8>
    13e6:	aa ef       	ldi	r26, 0xFA	; 250
    13e8:	b4 e0       	ldi	r27, 0x04	; 4
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    13ea:	e0 e0       	ldi	r30, 0x00	; 0
    13ec:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    13ee:	88 e0       	ldi	r24, 0x08	; 8
    13f0:	01 90       	ld	r0, Z+
    13f2:	0d 92       	st	X+, r0
    13f4:	81 50       	subi	r24, 0x01	; 1
    13f6:	e1 f7       	brne	.-8      	; 0x13f0 <USB_Host_ProcessNextHostState+0x18c>
    13f8:	10 92 a7 00 	sts	0x00A7, r1
    13fc:	ce 01       	movw	r24, r28
    13fe:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1400:	3d d3       	rcall	.+1658   	; 0x1a7c <USB_Host_SendControlRequest>
    1402:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    1404:	88 23       	and	r24, r24
    1406:	09 f0       	breq	.+2      	; 0x140a <USB_Host_ProcessNextHostState+0x1a6>
    1408:	3f c0       	rjmp	.+126    	; 0x1488 <USB_Host_ProcessNextHostState+0x224>
    140a:	88 85       	ldd	r24, Y+8	; 0x08
    140c:	80 93 10 01 	sts	0x0110, r24
    1410:	7e de       	rcall	.-772    	; 0x110e <USB_Host_ResetDevice>
    1412:	10 92 02 05 	sts	0x0502, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    1416:	88 ec       	ldi	r24, 0xC8	; 200
    1418:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
    141a:	90 93 1b 01 	sts	0x011B, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    141e:	80 93 1a 01 	sts	0x011A, r24
    1422:	88 e0       	ldi	r24, 0x08	; 8
    1424:	22 c0       	rjmp	.+68     	; 0x146a <USB_Host_ProcessNextHostState+0x206>
    1426:	20 91 10 01 	lds	r18, 0x0110
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	40 e0       	ldi	r20, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    1432:	01 e0       	ldi	r16, 0x01	; 1
    1434:	99 d0       	rcall	.+306    	; 0x1568 <Pipe_ConfigurePipe>
    1436:	88 23       	and	r24, r24
    1438:	21 f1       	breq	.+72     	; 0x1482 <USB_Host_ProcessNextHostState+0x21e>
    143a:	aa ef       	ldi	r26, 0xFA	; 250
    143c:	b4 e0       	ldi	r27, 0x04	; 4
    143e:	e8 e0       	ldi	r30, 0x08	; 8
    1440:	f1 e0       	ldi	r31, 0x01	; 1
    1442:	88 e0       	ldi	r24, 0x08	; 8
    1444:	01 90       	ld	r0, Z+
    1446:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    1448:	81 50       	subi	r24, 0x01	; 1
    144a:	e1 f7       	brne	.-8      	; 0x1444 <USB_Host_ProcessNextHostState+0x1e0>
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	15 d3       	rcall	.+1578   	; 0x1a7c <USB_Host_SendControlRequest>
    1452:	68 2f       	mov	r22, r24
    1454:	88 23       	and	r24, r24
    1456:	c1 f4       	brne	.+48     	; 0x1488 <USB_Host_ProcessNextHostState+0x224>
    1458:	10 92 02 05 	sts	0x0502, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    145c:	84 e6       	ldi	r24, 0x64	; 100
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	90 93 1b 01 	sts	0x011B, r25
    1464:	80 93 1a 01 	sts	0x011A, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    1468:	89 e0       	ldi	r24, 0x09	; 9
    146a:	80 93 1c 01 	sts	0x011C, r24
    146e:	1a c0       	rjmp	.+52     	; 0x14a4 <USB_Host_ProcessNextHostState+0x240>
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	80 93 a1 00 	sts	0x00A1, r24
    1476:	8a e0       	ldi	r24, 0x0A	; 10
    1478:	80 93 02 05 	sts	0x0502, r24
    147c:	0e 94 ca 01 	call	0x394	; 0x394 <EVENT_USB_Host_DeviceEnumerationComplete>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    1480:	11 c0       	rjmp	.+34     	; 0x14a4 <USB_Host_ProcessNextHostState+0x240>
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	84 e0       	ldi	r24, 0x04	; 4
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    1486:	01 c0       	rjmp	.+2      	; 0x148a <USB_Host_ProcessNextHostState+0x226>
    1488:	83 e0       	ldi	r24, 0x03	; 3
    148a:	90 91 02 05 	lds	r25, 0x0502

			EVENT_USB_Host_DeviceEnumerationComplete();
    148e:	91 30       	cpi	r25, 0x01	; 1
			break;
    1490:	49 f0       	breq	.+18     	; 0x14a4 <USB_Host_ProcessNextHostState+0x240>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    1492:	24 d8       	rcall	.-4024   	; 0x4dc <EVENT_USB_Host_DeviceEnumerationFailed>
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    1494:	80 91 dd 00 	lds	r24, 0x00DD
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
    1498:	81 60       	ori	r24, 0x01	; 1

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    149a:	80 93 dd 00 	sts	0x00DD, r24
    149e:	0e 94 c4 01 	call	0x388	; 0x388 <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    14a2:	21 d1       	rcall	.+578    	; 0x16e6 <USB_ResetInterface>
    14a4:	28 96       	adiw	r28, 0x08	; 8
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28

		USB_ResetInterface();
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
	}
}
    14b8:	08 95       	ret

000014ba <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    14ba:	af 92       	push	r10
    14bc:	bf 92       	push	r11
    14be:	cf 92       	push	r12
    14c0:	df 92       	push	r13
    14c2:	ff 92       	push	r15
    14c4:	0f 93       	push	r16
    14c6:	1f 93       	push	r17
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	5c 01       	movw	r10, r24
    14ce:	eb 01       	movw	r28, r22
    14d0:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    14d2:	80 91 aa 00 	lds	r24, 0x00AA
    14d6:	8f 7c       	andi	r24, 0xCF	; 207
    14d8:	80 61       	ori	r24, 0x10	; 16
    14da:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    14de:	bd d0       	rcall	.+378    	; 0x165a <Pipe_WaitUntilReady>
    14e0:	f8 2e       	mov	r15, r24
    14e2:	88 23       	and	r24, r24
    14e4:	b1 f5       	brne	.+108    	; 0x1552 <Pipe_Read_Stream_LE+0x98>
    14e6:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    14e8:	d1 04       	cpc	r13, r1
    14ea:	41 f0       	breq	.+16     	; 0x14fc <Pipe_Read_Stream_LE+0x42>
    14ec:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
    14ee:	00 81       	ld	r16, Z
    14f0:	11 81       	ldd	r17, Z+1	; 0x01
    14f2:	c0 1b       	sub	r28, r16
    14f4:	d1 0b       	sbc	r29, r17
    14f6:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    14f8:	1b 1d       	adc	r17, r11
    14fa:	01 c0       	rjmp	.+2      	; 0x14fe <Pipe_Read_Stream_LE+0x44>
    14fc:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    14fe:	aa 24       	eor	r10, r10
    1500:	bb 24       	eor	r11, r11
    1502:	23 c0       	rjmp	.+70     	; 0x154a <Pipe_Read_Stream_LE+0x90>
    1504:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1508:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    150a:	16 c0       	rjmp	.+44     	; 0x1538 <Pipe_Read_Stream_LE+0x7e>
    150c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1510:	8e 77       	andi	r24, 0x7E	; 126
    1512:	80 93 a6 00 	sts	0x00A6, r24
    1516:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1518:	d1 04       	cpc	r13, r1
    151a:	51 f0       	breq	.+20     	; 0x1530 <Pipe_Read_Stream_LE+0x76>
    151c:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
    151e:	80 81       	ld	r24, Z
    1520:	91 81       	ldd	r25, Z+1	; 0x01
    1522:	8a 0d       	add	r24, r10
    1524:	9b 1d       	adc	r25, r11
    1526:	91 83       	std	Z+1, r25	; 0x01
    1528:	80 83       	st	Z, r24
    152a:	64 e0       	ldi	r22, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
    152c:	f6 2e       	mov	r15, r22
    152e:	11 c0       	rjmp	.+34     	; 0x1552 <Pipe_Read_Stream_LE+0x98>
    1530:	94 d0       	rcall	.+296    	; 0x165a <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1532:	88 23       	and	r24, r24
    1534:	51 f0       	breq	.+20     	; 0x154a <Pipe_Read_Stream_LE+0x90>
    1536:	0c c0       	rjmp	.+24     	; 0x1550 <Pipe_Read_Stream_LE+0x96>
    1538:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    153c:	f8 01       	movw	r30, r16
    153e:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1540:	8f 01       	movw	r16, r30
    1542:	21 97       	sbiw	r28, 0x01	; 1
    1544:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1546:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
    1548:	b1 1c       	adc	r11, r1
    154a:	20 97       	sbiw	r28, 0x00	; 0
    154c:	d9 f6       	brne	.-74     	; 0x1504 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <Pipe_Read_Stream_LE+0x98>
    1550:	f8 2e       	mov	r15, r24
    1552:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1554:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	ff 90       	pop	r15
    155e:	df 90       	pop	r13
    1560:	cf 90       	pop	r12
    1562:	bf 90       	pop	r11
    1564:	af 90       	pop	r10
    1566:	08 95       	ret

00001568 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    1568:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    156a:	58 2f       	mov	r21, r24
    156c:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    156e:	87 ff       	sbrs	r24, 7
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <Pipe_ConfigurePipe+0xe>
    1572:	80 e1       	ldi	r24, 0x10	; 16
    1574:	01 c0       	rjmp	.+2      	; 0x1578 <Pipe_ConfigurePipe+0x10>
    1576:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
    1578:	57 30       	cpi	r21, 0x07	; 7
    157a:	08 f0       	brcs	.+2      	; 0x157e <Pipe_ConfigurePipe+0x16>
    157c:	57 c0       	rjmp	.+174    	; 0x162c <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
    157e:	66 23       	and	r22, r22
    1580:	09 f4       	brne	.+2      	; 0x1584 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
    1582:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    1584:	4f 70       	andi	r20, 0x0F	; 15
    1586:	62 95       	swap	r22
    1588:	66 0f       	add	r22, r22
    158a:	66 0f       	add	r22, r22
    158c:	60 7c       	andi	r22, 0xC0	; 192
    158e:	64 2b       	or	r22, r20
    1590:	68 2b       	or	r22, r24
    1592:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    1594:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1596:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    159a:	45 17       	cp	r20, r21
    159c:	a9 f4       	brne	.+42     	; 0x15c8 <Pipe_ConfigurePipe+0x60>
    159e:	04 c0       	rjmp	.+8      	; 0x15a8 <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    15a0:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
    15a2:	88 0f       	add	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	03 c0       	rjmp	.+6      	; 0x15ae <Pipe_ConfigurePipe+0x46>
    15a8:	88 e0       	ldi	r24, 0x08	; 8
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    15ae:	82 17       	cp	r24, r18
    15b0:	93 07       	cpc	r25, r19
    15b2:	10 f4       	brcc	.+4      	; 0x15b8 <Pipe_ConfigurePipe+0x50>
    15b4:	75 30       	cpi	r23, 0x05	; 5
    15b6:	a1 f7       	brne	.-24     	; 0x15a0 <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    15b8:	87 2f       	mov	r24, r23
    15ba:	82 95       	swap	r24
    15bc:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    15be:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    15c0:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    15c2:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    15c4:	e0 e0       	ldi	r30, 0x00	; 0
    15c6:	08 c0       	rjmp	.+16     	; 0x15d8 <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    15c8:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    15cc:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    15d0:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
    15d4:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    15d8:	81 ff       	sbrs	r24, 1
    15da:	20 c0       	rjmp	.+64     	; 0x161c <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    15dc:	90 91 a9 00 	lds	r25, 0x00A9
    15e0:	9e 7f       	andi	r25, 0xFE	; 254
    15e2:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    15e6:	90 91 ab 00 	lds	r25, 0x00AB
    15ea:	9d 7f       	andi	r25, 0xFD	; 253
    15ec:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    15f0:	90 91 a9 00 	lds	r25, 0x00A9
    15f4:	91 60       	ori	r25, 0x01	; 1
    15f6:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    15fa:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    15fe:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    1602:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
    1606:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    160a:	80 91 a9 00 	lds	r24, 0x00A9
    160e:	80 62       	ori	r24, 0x20	; 32
    1610:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1614:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    1618:	87 ff       	sbrs	r24, 7
    161a:	08 c0       	rjmp	.+16     	; 0x162c <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    161c:	4f 5f       	subi	r20, 0xFF	; 255
    161e:	47 30       	cpi	r20, 0x07	; 7
    1620:	09 f0       	breq	.+2      	; 0x1624 <Pipe_ConfigurePipe+0xbc>
    1622:	b9 cf       	rjmp	.-142    	; 0x1596 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1624:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	01 c0       	rjmp	.+2      	; 0x162e <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
    162c:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    162e:	0f 91       	pop	r16
    1630:	08 95       	ret

00001632 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    1632:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    163c:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    1640:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    1644:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1648:	90 91 a9 00 	lds	r25, 0x00A9
    164c:	9e 7f       	andi	r25, 0xFE	; 254
    164e:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1652:	8f 5f       	subi	r24, 0xFF	; 255
    1654:	87 30       	cpi	r24, 0x07	; 7
    1656:	81 f7       	brne	.-32     	; 0x1638 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    1658:	08 95       	ret

0000165a <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    165a:	80 91 a2 00 	lds	r24, 0x00A2
    165e:	90 91 a3 00 	lds	r25, 0x00A3
    1662:	45 e6       	ldi	r20, 0x65	; 101
    1664:	01 c0       	rjmp	.+2      	; 0x1668 <Pipe_WaitUntilReady+0xe>
    1666:	c9 01       	movw	r24, r18
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    1668:	20 91 aa 00 	lds	r18, 0x00AA
    166c:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    166e:	20 31       	cpi	r18, 0x10	; 16
    1670:	29 f4       	brne	.+10     	; 0x167c <Pipe_WaitUntilReady+0x22>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1672:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    1676:	20 ff       	sbrs	r18, 0
    1678:	05 c0       	rjmp	.+10     	; 0x1684 <Pipe_WaitUntilReady+0x2a>
    167a:	17 c0       	rjmp	.+46     	; 0x16aa <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    167c:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    1680:	22 fd       	sbrc	r18, 2
    1682:	13 c0       	rjmp	.+38     	; 0x16aa <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1684:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    1688:	21 fd       	sbrc	r18, 1
    168a:	11 c0       	rjmp	.+34     	; 0x16ae <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    168c:	20 91 02 05 	lds	r18, 0x0502
    1690:	21 30       	cpi	r18, 0x01	; 1
    1692:	79 f0       	breq	.+30     	; 0x16b2 <Pipe_WaitUntilReady+0x58>
    1694:	20 91 a2 00 	lds	r18, 0x00A2
    1698:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    169c:	28 17       	cp	r18, r24
    169e:	39 07       	cpc	r19, r25
    16a0:	19 f3       	breq	.-58     	; 0x1668 <Pipe_WaitUntilReady+0xe>
    16a2:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    16a4:	01 f7       	brne	.-64     	; 0x1666 <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_Timeout;
    16a6:	83 e0       	ldi	r24, 0x03	; 3
    16a8:	08 95       	ret
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    16b2:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
    16b4:	08 95       	ret

000016b6 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    16b6:	75 d0       	rcall	.+234    	; 0x17a2 <USB_INT_DisableAllInterrupts>
    16b8:	7c d0       	rcall	.+248    	; 0x17b2 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    16ba:	e0 ee       	ldi	r30, 0xE0	; 224
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    16be:	80 81       	ld	r24, Z
    16c0:	81 60       	ori	r24, 0x01	; 1
    16c2:	80 83       	st	Z, r24
    16c4:	e8 ed       	ldi	r30, 0xD8	; 216
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    16c8:	80 81       	ld	r24, Z
    16ca:	8f 77       	andi	r24, 0x7F	; 127
    16cc:	80 83       	st	Z, r24
    16ce:	19 bc       	out	0x29, r1	; 41
    16d0:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    16d2:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    16d4:	8c 91       	ld	r24, X
    16d6:	8e 7f       	andi	r24, 0xFE	; 254
    16d8:	8c 93       	st	X, r24
    16da:	80 81       	ld	r24, Z
    16dc:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    16de:	80 83       	st	Z, r24
    16e0:	10 92 f9 04 	sts	0x04F9, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    16e4:	08 95       	ret

000016e6 <USB_ResetInterface>:
    16e6:	5d d0       	rcall	.+186    	; 0x17a2 <USB_INT_DisableAllInterrupts>
}
    16e8:	64 d0       	rcall	.+200    	; 0x17b2 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    16ea:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    16ee:	8f 77       	andi	r24, 0x7F	; 127
    16f0:	80 93 d8 00 	sts	0x00D8, r24
    16f4:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    16f8:	80 68       	ori	r24, 0x80	; 128
    16fa:	80 93 d8 00 	sts	0x00D8, r24
    16fe:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1702:	8f 7d       	andi	r24, 0xDF	; 223
    1704:	80 93 d8 00 	sts	0x00D8, r24
    1708:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    170c:	8f 77       	andi	r24, 0x7F	; 127
    170e:	80 93 d7 00 	sts	0x00D7, r24
    1712:	8c e0       	ldi	r24, 0x0C	; 12
    1714:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1716:	8e e0       	ldi	r24, 0x0E	; 14
    1718:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    171a:	09 b4       	in	r0, 0x29	; 41
    171c:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    171e:	fd cf       	rjmp	.-6      	; 0x171a <USB_ResetInterface+0x34>
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	80 93 02 05 	sts	0x0502, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    1726:	10 92 f8 04 	sts	0x04F8, r1
	USB_Host_ConfigurationNumber = 0;
    172a:	80 e4       	ldi	r24, 0x40	; 64
    172c:	80 93 10 01 	sts	0x0110, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    1730:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    1734:	80 64       	ori	r24, 0x40	; 64
    1736:	80 93 d8 00 	sts	0x00D8, r24
    173a:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    173e:	81 60       	ori	r24, 0x01	; 1
    1740:	80 93 dd 00 	sts	0x00DD, r24
    1744:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    1748:	84 60       	ori	r24, 0x04	; 4
    174a:	80 93 dd 00 	sts	0x00DD, r24
    174e:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
    1752:	8f 7e       	andi	r24, 0xEF	; 239
    1754:	80 93 d7 00 	sts	0x00D7, r24
    1758:	6f 9a       	sbi	0x0d, 7	; 13
    175a:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
    175c:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    1760:	81 60       	ori	r24, 0x01	; 1
    1762:	80 93 de 00 	sts	0x00DE, r24
    1766:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    176a:	84 60       	ori	r24, 0x04	; 4
    176c:	80 93 de 00 	sts	0x00DE, r24
    1770:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1774:	8e 7f       	andi	r24, 0xFE	; 254
    1776:	80 93 e0 00 	sts	0x00E0, r24
    177a:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    177e:	80 61       	ori	r24, 0x10	; 16
    1780:	80 93 d8 00 	sts	0x00D8, r24
    1784:	08 95       	ret

00001786 <USB_Init>:
    1786:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1788:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    178a:	80 81       	ld	r24, Z
    178c:	8f 7e       	andi	r24, 0xEF	; 239
    178e:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1790:	e7 ed       	ldi	r30, 0xD7	; 215
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	81 60       	ori	r24, 0x01	; 1
    1798:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	80 93 f9 04 	sts	0x04F9, r24

	USB_ResetInterface();
    17a0:	a2 cf       	rjmp	.-188    	; 0x16e6 <USB_ResetInterface>

000017a2 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    17a2:	e8 ed       	ldi	r30, 0xD8	; 216
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	8c 7f       	andi	r24, 0xFC	; 252
    17aa:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    17ac:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    17b0:	08 95       	ret

000017b2 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    17b2:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    17b6:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    17ba:	08 95       	ret

000017bc <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    17bc:	1f 92       	push	r1
    17be:	0f 92       	push	r0
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	0f 92       	push	r0
    17c4:	0b b6       	in	r0, 0x3b	; 59
    17c6:	0f 92       	push	r0
    17c8:	11 24       	eor	r1, r1
    17ca:	2f 93       	push	r18
    17cc:	3f 93       	push	r19
    17ce:	4f 93       	push	r20
    17d0:	5f 93       	push	r21
    17d2:	6f 93       	push	r22
    17d4:	7f 93       	push	r23
    17d6:	8f 93       	push	r24
    17d8:	9f 93       	push	r25
    17da:	af 93       	push	r26
    17dc:	bf 93       	push	r27
    17de:	ef 93       	push	r30
    17e0:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    17e2:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    17e6:	85 ff       	sbrs	r24, 5
    17e8:	0a c0       	rjmp	.+20     	; 0x17fe <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    17ea:	80 91 a0 00 	lds	r24, 0x00A0
    17ee:	85 ff       	sbrs	r24, 5
    17f0:	06 c0       	rjmp	.+12     	; 0x17fe <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    17f2:	80 91 9f 00 	lds	r24, 0x009F
    17f6:	8f 7d       	andi	r24, 0xDF	; 223
    17f8:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    17fc:	16 d1       	rcall	.+556    	; 0x1a2a <USB_Event_Stub>
    17fe:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    1802:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    1804:	16 c0       	rjmp	.+44     	; 0x1832 <__vector_10+0x76>
    1806:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    180a:	81 ff       	sbrs	r24, 1
    180c:	12 c0       	rjmp	.+36     	; 0x1832 <__vector_10+0x76>
    180e:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1812:	8d 7f       	andi	r24, 0xFD	; 253
    1814:	80 93 9f 00 	sts	0x009F, r24
    1818:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    181c:	8e 7f       	andi	r24, 0xFE	; 254
    181e:	80 93 9f 00 	sts	0x009F, r24
    1822:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1826:	8d 7f       	andi	r24, 0xFD	; 253
    1828:	80 93 a0 00 	sts	0x00A0, r24
    182c:	0e 94 c4 01 	call	0x388	; 0x388 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    1830:	5a df       	rcall	.-332    	; 0x16e6 <USB_ResetInterface>

		USB_ResetInterface();
    1832:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1836:	81 ff       	sbrs	r24, 1
    1838:	17 c0       	rjmp	.+46     	; 0x1868 <__vector_10+0xac>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    183a:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    183e:	81 ff       	sbrs	r24, 1
    1840:	13 c0       	rjmp	.+38     	; 0x1868 <__vector_10+0xac>
    1842:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1846:	8d 7f       	andi	r24, 0xFD	; 253
    1848:	80 93 df 00 	sts	0x00DF, r24
    184c:	77 98       	cbi	0x0e, 7	; 14
    184e:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1852:	81 60       	ori	r24, 0x01	; 1
    1854:	80 93 dd 00 	sts	0x00DD, r24
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	0e 94 4d 02 	call	0x49a	; 0x49a <EVENT_USB_Host_HostError>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    185e:	0e 94 c4 01 	call	0x388	; 0x388 <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	80 93 02 05 	sts	0x0502, r24

		USB_HostState = HOST_STATE_Unattached;
    1868:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    186c:	80 ff       	sbrs	r24, 0
    186e:	18 c0       	rjmp	.+48     	; 0x18a0 <__vector_10+0xe4>
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1870:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    1874:	80 ff       	sbrs	r24, 0
    1876:	14 c0       	rjmp	.+40     	; 0x18a0 <__vector_10+0xe4>
    1878:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    187c:	8e 7f       	andi	r24, 0xFE	; 254
    187e:	80 93 df 00 	sts	0x00DF, r24
    1882:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    1886:	8e 7f       	andi	r24, 0xFE	; 254
    1888:	80 93 de 00 	sts	0x00DE, r24
    188c:	0e 94 be 01 	call	0x37c	; 0x37c <EVENT_USB_Host_DeviceAttached>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    1890:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1894:	82 60       	ori	r24, 0x02	; 2
    1896:	80 93 a0 00 	sts	0x00A0, r24
    189a:	82 e0       	ldi	r24, 0x02	; 2
    189c:	80 93 02 05 	sts	0x0502, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    18a0:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    18a4:	82 ff       	sbrs	r24, 2
    18a6:	10 c0       	rjmp	.+32     	; 0x18c8 <__vector_10+0x10c>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    18a8:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    18ac:	82 ff       	sbrs	r24, 2
    18ae:	0c c0       	rjmp	.+24     	; 0x18c8 <__vector_10+0x10c>
    18b0:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    18b4:	8b 7f       	andi	r24, 0xFB	; 251
    18b6:	80 93 df 00 	sts	0x00DF, r24
    18ba:	82 e0       	ldi	r24, 0x02	; 2
    18bc:	60 e0       	ldi	r22, 0x00	; 0
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    18be:	0e 94 6e 02 	call	0x4dc	; 0x4dc <EVENT_USB_Host_DeviceEnumerationFailed>
    18c2:	0e 94 c4 01 	call	0x388	; 0x388 <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    18c6:	0f df       	rcall	.-482    	; 0x16e6 <USB_ResetInterface>
    18c8:	ff 91       	pop	r31

		USB_ResetInterface();
    18ca:	ef 91       	pop	r30
    18cc:	bf 91       	pop	r27
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    18ce:	af 91       	pop	r26
    18d0:	9f 91       	pop	r25
    18d2:	8f 91       	pop	r24
    18d4:	7f 91       	pop	r23
    18d6:	6f 91       	pop	r22
    18d8:	5f 91       	pop	r21
    18da:	4f 91       	pop	r20
    18dc:	3f 91       	pop	r19
    18de:	2f 91       	pop	r18
    18e0:	0f 90       	pop	r0
    18e2:	0b be       	out	0x3b, r0	; 59
    18e4:	0f 90       	pop	r0
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	0f 90       	pop	r0
    18ea:	1f 90       	pop	r1
    18ec:	18 95       	reti

000018ee <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    18ee:	cf 92       	push	r12
    18f0:	df 92       	push	r13
    18f2:	ef 92       	push	r14
    18f4:	ff 92       	push	r15
    18f6:	0f 93       	push	r16
    18f8:	1f 93       	push	r17
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	29 97       	sbiw	r28, 0x09	; 9
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	de bf       	out	0x3e, r29	; 62
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	cd bf       	out	0x3d, r28	; 61
    190e:	6b 01       	movw	r12, r22
    1910:	8a 01       	movw	r16, r20
    1912:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1914:	90 e8       	ldi	r25, 0x80	; 128
    1916:	90 93 fa 04 	sts	0x04FA, r25
    191a:	96 e0       	ldi	r25, 0x06	; 6
    191c:	90 93 fb 04 	sts	0x04FB, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1926:	90 93 fd 04 	sts	0x04FD, r25
    192a:	80 93 fc 04 	sts	0x04FC, r24
    192e:	10 92 ff 04 	sts	0x04FF, r1
    1932:	10 92 fe 04 	sts	0x04FE, r1
    1936:	89 e0       	ldi	r24, 0x09	; 9
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	90 93 01 05 	sts	0x0501, r25
    193e:	80 93 00 05 	sts	0x0500, r24
    1942:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1946:	ce 01       	movw	r24, r28
    1948:	01 96       	adiw	r24, 0x01	; 1
    194a:	98 d0       	rcall	.+304    	; 0x1a7c <USB_Host_SendControlRequest>
    194c:	88 23       	and	r24, r24
    194e:	b9 f4       	brne	.+46     	; 0x197e <USB_Host_GetDeviceConfigDescriptor+0x90>
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1952:	9c 81       	ldd	r25, Y+4	; 0x04
    1954:	f6 01       	movw	r30, r12
    1956:	91 83       	std	Z+1, r25	; 0x01
    1958:	80 83       	st	Z, r24
    195a:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
    195c:	f9 06       	cpc	r15, r25
    195e:	70 f0       	brcs	.+28     	; 0x197c <USB_Host_GetDeviceConfigDescriptor+0x8e>
    1960:	90 93 01 05 	sts	0x0501, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1964:	80 93 00 05 	sts	0x0500, r24
    1968:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    196a:	88 d0       	rcall	.+272    	; 0x1a7c <USB_Host_SendControlRequest>
    196c:	88 23       	and	r24, r24
    196e:	39 f4       	brne	.+14     	; 0x197e <USB_Host_GetDeviceConfigDescriptor+0x90>
    1970:	f8 01       	movw	r30, r16
    1972:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1974:	92 30       	cpi	r25, 0x02	; 2
    1976:	19 f0       	breq	.+6      	; 0x197e <USB_Host_GetDeviceConfigDescriptor+0x90>
    1978:	86 e0       	ldi	r24, 0x06	; 6
    197a:	01 c0       	rjmp	.+2      	; 0x197e <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    197c:	85 e0       	ldi	r24, 0x05	; 5
    197e:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1980:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1982:	f8 94       	cli
    1984:	de bf       	out	0x3e, r29	; 62
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	cd bf       	out	0x3d, r28	; 61
    198a:	df 91       	pop	r29
    198c:	cf 91       	pop	r28
    198e:	1f 91       	pop	r17
    1990:	0f 91       	pop	r16
    1992:	ff 90       	pop	r15
    1994:	ef 90       	pop	r14
    1996:	df 90       	pop	r13
    1998:	cf 90       	pop	r12
    199a:	08 95       	ret

0000199c <USB_GetNextDescriptorComp>:
    199c:	af 92       	push	r10
    199e:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    19a0:	cf 92       	push	r12
    19a2:	df 92       	push	r13
    19a4:	ef 92       	push	r14
    19a6:	ff 92       	push	r15
    19a8:	0f 93       	push	r16
    19aa:	1f 93       	push	r17
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	7c 01       	movw	r14, r24
    19b2:	8b 01       	movw	r16, r22
    19b4:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    19b6:	28 c0       	rjmp	.+80     	; 0x1a08 <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    19b8:	f8 01       	movw	r30, r16
    19ba:	c0 80       	ld	r12, Z
    19bc:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    19be:	f6 01       	movw	r30, r12
    19c0:	80 81       	ld	r24, Z
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	9e 01       	movw	r18, r28
    19c6:	8c 17       	cp	r24, r28
    19c8:	9d 07       	cpc	r25, r29
    19ca:	08 f4       	brcc	.+2      	; 0x19ce <USB_GetNextDescriptorComp+0x32>
    19cc:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    19ce:	c6 01       	movw	r24, r12
    19d0:	82 0f       	add	r24, r18
    19d2:	93 1f       	adc	r25, r19
    19d4:	f8 01       	movw	r30, r16
    19d6:	91 83       	std	Z+1, r25	; 0x01
    19d8:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
    19da:	f7 01       	movw	r30, r14
    19dc:	80 81       	ld	r24, Z
    19de:	91 81       	ldd	r25, Z+1	; 0x01
    19e0:	82 1b       	sub	r24, r18
    19e2:	93 0b       	sbc	r25, r19
    19e4:	91 83       	std	Z+1, r25	; 0x01
    19e6:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    19e8:	f8 01       	movw	r30, r16
    19ea:	80 81       	ld	r24, Z
    19ec:	91 81       	ldd	r25, Z+1	; 0x01
    19ee:	f5 01       	movw	r30, r10
    19f0:	09 95       	icall
    19f2:	82 30       	cpi	r24, 0x02	; 2
    19f4:	49 f0       	breq	.+18     	; 0x1a08 <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    19f6:	81 30       	cpi	r24, 0x01	; 1
    19f8:	69 f4       	brne	.+26     	; 0x1a14 <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
    19fa:	f8 01       	movw	r30, r16
    19fc:	d1 82       	std	Z+1, r13	; 0x01
    19fe:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
    1a00:	f7 01       	movw	r30, r14
    1a02:	d1 83       	std	Z+1, r29	; 0x01
    1a04:	c0 83       	st	Z, r28
    1a06:	06 c0       	rjmp	.+12     	; 0x1a14 <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1a08:	f7 01       	movw	r30, r14
    1a0a:	c0 81       	ld	r28, Z
    1a0c:	d1 81       	ldd	r29, Z+1	; 0x01
    1a0e:	20 97       	sbiw	r28, 0x00	; 0
    1a10:	99 f6       	brne	.-90     	; 0x19b8 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1a12:	82 e0       	ldi	r24, 0x02	; 2
}
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	ff 90       	pop	r15
    1a1e:	ef 90       	pop	r14
    1a20:	df 90       	pop	r13
    1a22:	cf 90       	pop	r12
    1a24:	bf 90       	pop	r11
    1a26:	af 90       	pop	r10
    1a28:	08 95       	ret

00001a2a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1a2a:	08 95       	ret

00001a2c <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1a2c:	1f 93       	push	r17
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1a34:	c9 ee       	ldi	r28, 0xE9	; 233
    1a36:	d3 e0       	ldi	r29, 0x03	; 3
    1a38:	06 c0       	rjmp	.+12     	; 0x1a46 <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	be db       	rcall	.-2180   	; 0x11ba <USB_Host_WaitMS>
    1a3e:	88 23       	and	r24, r24
    1a40:	c9 f4       	brne	.+50     	; 0x1a74 <USB_Host_WaitForIOS+0x48>
    1a42:	21 97       	sbiw	r28, 0x01	; 1
    1a44:	b1 f0       	breq	.+44     	; 0x1a72 <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1a46:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1a48:	29 f4       	brne	.+10     	; 0x1a54 <USB_Host_WaitForIOS+0x28>
    1a4a:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1a4e:	83 ff       	sbrs	r24, 3
    1a50:	f4 cf       	rjmp	.-24     	; 0x1a3a <USB_Host_WaitForIOS+0xe>
    1a52:	0d c0       	rjmp	.+26     	; 0x1a6e <USB_Host_WaitForIOS+0x42>
    1a54:	11 30       	cpi	r17, 0x01	; 1
    1a56:	29 f4       	brne	.+10     	; 0x1a62 <USB_Host_WaitForIOS+0x36>
    1a58:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1a5c:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1a5e:	ed cf       	rjmp	.-38     	; 0x1a3a <USB_Host_WaitForIOS+0xe>
    1a60:	06 c0       	rjmp	.+12     	; 0x1a6e <USB_Host_WaitForIOS+0x42>
    1a62:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1a64:	51 f7       	brne	.-44     	; 0x1a3a <USB_Host_WaitForIOS+0xe>
    1a66:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1a6a:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1a6c:	e6 cf       	rjmp	.-52     	; 0x1a3a <USB_Host_WaitForIOS+0xe>
    1a6e:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1a70:	01 c0       	rjmp	.+2      	; 0x1a74 <USB_Host_WaitForIOS+0x48>
    1a72:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1a74:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
    1a76:	cf 91       	pop	r28
    1a78:	1f 91       	pop	r17
    1a7a:	08 95       	ret

00001a7c <USB_Host_SendControlRequest>:
    1a7c:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1a7e:	ff 92       	push	r15
    1a80:	0f 93       	push	r16
    1a82:	1f 93       	push	r17
    1a84:	cf 93       	push	r28
    1a86:	df 93       	push	r29
    1a88:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1a8a:	e0 90 9e 00 	lds	r14, 0x009E
    1a8e:	ff 24       	eor	r15, r15
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	e8 22       	and	r14, r24
    1a94:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1a96:	00 91 00 05 	lds	r16, 0x0500
    1a9a:	10 91 01 05 	lds	r17, 0x0501
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1a9e:	80 91 9e 00 	lds	r24, 0x009E
    1aa2:	81 60       	ori	r24, 0x01	; 1
    1aa4:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	87 db       	rcall	.-2290   	; 0x11ba <USB_Host_WaitMS>
    1aac:	88 23       	and	r24, r24
    1aae:	09 f0       	breq	.+2      	; 0x1ab2 <USB_Host_SendControlRequest+0x36>
    1ab0:	ca c0       	rjmp	.+404    	; 0x1c46 <USB_Host_SendControlRequest+0x1ca>
    1ab2:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1ab6:	8f 7c       	andi	r24, 0xCF	; 207
    1ab8:	80 93 aa 00 	sts	0x00AA, r24
    1abc:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1ac0:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    1ac4:	8f 7e       	andi	r24, 0xEF	; 239
    1ac6:	80 93 a6 00 	sts	0x00A6, r24
    1aca:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1ace:	8f 7b       	andi	r24, 0xBF	; 191
    1ad0:	80 93 a9 00 	sts	0x00A9, r24
    1ad4:	88 e0       	ldi	r24, 0x08	; 8
    1ad6:	ea ef       	ldi	r30, 0xFA	; 250
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1ad8:	f4 e0       	ldi	r31, 0x04	; 4
    1ada:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1adc:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1ae0:	81 50       	subi	r24, 0x01	; 1
    1ae2:	d9 f7       	brne	.-10     	; 0x1ada <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1ae4:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1ae8:	87 77       	andi	r24, 0x77	; 119
    1aea:	80 93 a6 00 	sts	0x00A6, r24
    1aee:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1af0:	9d df       	rcall	.-198    	; 0x1a2c <USB_Host_WaitForIOS>
    1af2:	88 23       	and	r24, r24
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <USB_Host_SendControlRequest+0x7c>
    1af6:	a7 c0       	rjmp	.+334    	; 0x1c46 <USB_Host_SendControlRequest+0x1ca>
    1af8:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1afc:	80 64       	ori	r24, 0x40	; 64
    1afe:	80 93 a9 00 	sts	0x00A9, r24
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	5a db       	rcall	.-2380   	; 0x11ba <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1b06:	88 23       	and	r24, r24
    1b08:	09 f0       	breq	.+2      	; 0x1b0c <USB_Host_SendControlRequest+0x90>
    1b0a:	9d c0       	rjmp	.+314    	; 0x1c46 <USB_Host_SendControlRequest+0x1ca>
    1b0c:	80 91 fa 04 	lds	r24, 0x04FA
    1b10:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1b12:	4f c0       	rjmp	.+158    	; 0x1bb2 <USB_Host_SendControlRequest+0x136>
    1b14:	80 91 aa 00 	lds	r24, 0x00AA
    1b18:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1b1a:	80 61       	ori	r24, 0x10	; 16
    1b1c:	80 93 aa 00 	sts	0x00AA, r24
    1b20:	20 97       	sbiw	r28, 0x00	; 0
    1b22:	61 f5       	brne	.+88     	; 0x1b7c <USB_Host_SendControlRequest+0x100>
    1b24:	2e c0       	rjmp	.+92     	; 0x1b82 <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1b26:	80 91 a9 00 	lds	r24, 0x00A9
    1b2a:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1b2c:	80 93 a9 00 	sts	0x00A9, r24
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	7c df       	rcall	.-264    	; 0x1a2c <USB_Host_WaitForIOS>
    1b34:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1b36:	09 f0       	breq	.+2      	; 0x1b3a <USB_Host_SendControlRequest+0xbe>
    1b38:	86 c0       	rjmp	.+268    	; 0x1c46 <USB_Host_SendControlRequest+0x1ca>
    1b3a:	80 91 f6 00 	lds	r24, 0x00F6
    1b3e:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	41 f4       	brne	.+16     	; 0x1b56 <USB_Host_SendControlRequest+0xda>
    1b46:	00 e0       	ldi	r16, 0x00	; 0
    1b48:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1b4a:	05 c0       	rjmp	.+10     	; 0x1b56 <USB_Host_SendControlRequest+0xda>
    1b4c:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
    1b50:	89 93       	st	Y+, r24
    1b52:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1b54:	10 40       	sbci	r17, 0x00	; 0
    1b56:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
    1b5a:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	19 f0       	breq	.+6      	; 0x1b68 <USB_Host_SendControlRequest+0xec>
    1b62:	01 15       	cp	r16, r1
    1b64:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1b66:	91 f7       	brne	.-28     	; 0x1b4c <USB_Host_SendControlRequest+0xd0>
    1b68:	80 91 a9 00 	lds	r24, 0x00A9
    1b6c:	80 64       	ori	r24, 0x40	; 64
    1b6e:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1b72:	80 91 a6 00 	lds	r24, 0x00A6
    1b76:	8e 77       	andi	r24, 0x7E	; 126
    1b78:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1b7c:	01 15       	cp	r16, r1
    1b7e:	11 05       	cpc	r17, r1
    1b80:	91 f6       	brne	.-92     	; 0x1b26 <USB_Host_SendControlRequest+0xaa>
    1b82:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1b86:	8f 7c       	andi	r24, 0xCF	; 207
    1b88:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1b8a:	80 93 aa 00 	sts	0x00AA, r24
    1b8e:	80 91 a9 00 	lds	r24, 0x00A9
    1b92:	8f 7b       	andi	r24, 0xBF	; 191
    1b94:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1b98:	82 e0       	ldi	r24, 0x02	; 2
    1b9a:	48 df       	rcall	.-368    	; 0x1a2c <USB_Host_WaitForIOS>
    1b9c:	88 23       	and	r24, r24
    1b9e:	09 f0       	breq	.+2      	; 0x1ba2 <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1ba0:	52 c0       	rjmp	.+164    	; 0x1c46 <USB_Host_SendControlRequest+0x1ca>
    1ba2:	80 91 a6 00 	lds	r24, 0x00A6
    1ba6:	8b 77       	andi	r24, 0x7B	; 123
    1ba8:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1bac:	82 e0       	ldi	r24, 0x02	; 2
    1bae:	3e df       	rcall	.-388    	; 0x1a2c <USB_Host_WaitForIOS>
    1bb0:	4a c0       	rjmp	.+148    	; 0x1c46 <USB_Host_SendControlRequest+0x1ca>
    1bb2:	20 97       	sbiw	r28, 0x00	; 0
    1bb4:	a1 f1       	breq	.+104    	; 0x1c1e <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1bb6:	80 91 aa 00 	lds	r24, 0x00AA
    1bba:	8f 7c       	andi	r24, 0xCF	; 207
    1bbc:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1bbe:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1bc2:	80 91 a9 00 	lds	r24, 0x00A9
    1bc6:	8f 7b       	andi	r24, 0xBF	; 191
    1bc8:	80 93 a9 00 	sts	0x00A9, r24
    1bcc:	1c c0       	rjmp	.+56     	; 0x1c06 <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1bce:	2e df       	rcall	.-420    	; 0x1a2c <USB_Host_WaitForIOS>
    1bd0:	88 23       	and	r24, r24
    1bd2:	c9 f5       	brne	.+114    	; 0x1c46 <USB_Host_SendControlRequest+0x1ca>
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	07 c0       	rjmp	.+14     	; 0x1be6 <USB_Host_SendControlRequest+0x16a>
    1bd8:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1bda:	ef 01       	movw	r28, r30
    1bdc:	80 93 af 00 	sts	0x00AF, r24
    1be0:	01 50       	subi	r16, 0x01	; 1
    1be2:	10 40       	sbci	r17, 0x00	; 0
    1be4:	59 f0       	breq	.+22     	; 0x1bfc <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1be6:	ef 01       	movw	r28, r30
    1be8:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1bec:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    1bf0:	80 91 10 01 	lds	r24, 0x0110
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1bf6:	28 17       	cp	r18, r24
    1bf8:	39 07       	cpc	r19, r25
    1bfa:	70 f3       	brcs	.-36     	; 0x1bd8 <USB_Host_SendControlRequest+0x15c>
    1bfc:	80 91 a6 00 	lds	r24, 0x00A6
    1c00:	8b 77       	andi	r24, 0x7B	; 123
    1c02:	80 93 a6 00 	sts	0x00A6, r24
    1c06:	82 e0       	ldi	r24, 0x02	; 2
    1c08:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1c0a:	11 05       	cpc	r17, r1
    1c0c:	01 f7       	brne	.-64     	; 0x1bce <USB_Host_SendControlRequest+0x152>
    1c0e:	0e df       	rcall	.-484    	; 0x1a2c <USB_Host_WaitForIOS>
    1c10:	88 23       	and	r24, r24
    1c12:	c9 f4       	brne	.+50     	; 0x1c46 <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1c14:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1c18:	80 64       	ori	r24, 0x40	; 64
    1c1a:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1c1e:	80 91 aa 00 	lds	r24, 0x00AA
    1c22:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1c24:	80 61       	ori	r24, 0x10	; 16
    1c26:	80 93 aa 00 	sts	0x00AA, r24
    1c2a:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1c2e:	8f 7b       	andi	r24, 0xBF	; 191
    1c30:	80 93 a9 00 	sts	0x00A9, r24
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	fa de       	rcall	.-524    	; 0x1a2c <USB_Host_WaitForIOS>
    1c38:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c3a:	29 f4       	brne	.+10     	; 0x1c46 <USB_Host_SendControlRequest+0x1ca>
    1c3c:	90 91 a6 00 	lds	r25, 0x00A6
    1c40:	9e 77       	andi	r25, 0x7E	; 126
    1c42:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1c46:	90 91 a9 00 	lds	r25, 0x00A9
    1c4a:	90 64       	ori	r25, 0x40	; 64
    1c4c:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1c50:	e1 14       	cp	r14, r1
    1c52:	f1 04       	cpc	r15, r1
    1c54:	29 f4       	brne	.+10     	; 0x1c60 <USB_Host_SendControlRequest+0x1e4>
    1c56:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1c5a:	9e 7f       	andi	r25, 0xFE	; 254
    1c5c:	90 93 9e 00 	sts	0x009E, r25
    1c60:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1c62:	90 93 a8 00 	sts	0x00A8, r25
    1c66:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	1f 91       	pop	r17
    1c70:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1c72:	ff 90       	pop	r15
    1c74:	ef 90       	pop	r14
    1c76:	08 95       	ret

00001c78 <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    1c78:	cf 93       	push	r28
    1c7a:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1c7c:	10 92 fa 04 	sts	0x04FA, r1
    1c80:	89 e0       	ldi	r24, 0x09	; 9
    1c82:	80 93 fb 04 	sts	0x04FB, r24
    1c86:	c0 93 fc 04 	sts	0x04FC, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1c8a:	10 92 fd 04 	sts	0x04FD, r1
    1c8e:	10 92 ff 04 	sts	0x04FF, r1
    1c92:	10 92 fe 04 	sts	0x04FE, r1
    1c96:	10 92 01 05 	sts	0x0501, r1
    1c9a:	10 92 00 05 	sts	0x0500, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1c9e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	ea de       	rcall	.-556    	; 0x1a7c <USB_Host_SendControlRequest>
    1ca8:	88 23       	and	r24, r24
    1caa:	49 f4       	brne	.+18     	; 0x1cbe <USB_Host_SetDeviceConfiguration+0x46>
    1cac:	c0 93 f8 04 	sts	0x04F8, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1cb0:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1cb2:	11 f0       	breq	.+4      	; 0x1cb8 <USB_Host_SetDeviceConfiguration+0x40>
    1cb4:	9b e0       	ldi	r25, 0x0B	; 11
    1cb6:	01 c0       	rjmp	.+2      	; 0x1cba <USB_Host_SetDeviceConfiguration+0x42>
    1cb8:	9a e0       	ldi	r25, 0x0A	; 10
    1cba:	90 93 02 05 	sts	0x0502, r25
    1cbe:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1cc0:	08 95       	ret

00001cc2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1cc2:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1cc4:	c0 91 a7 00 	lds	r28, 0x00A7
    1cc8:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1cca:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1cce:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1cd2:	c8 da       	rcall	.-2672   	; 0x1264 <USB_Host_ProcessNextHostState>
    1cd4:	c0 93 a7 00 	sts	0x00A7, r28
    1cd8:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1cda:	08 95       	ret

00001cdc <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1cdc:	90 91 c8 00 	lds	r25, 0x00C8
    1ce0:	95 ff       	sbrs	r25, 5
    1ce2:	fc cf       	rjmp	.-8      	; 0x1cdc <Serial_putchar>
				UDR1 = DataByte;
    1ce4:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	08 95       	ret

00001cee <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1cee:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1cf2:	87 ff       	sbrs	r24, 7
    1cf4:	08 c0       	rjmp	.+16     	; 0x1d06 <Serial_getchar+0x18>
    1cf6:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1cfa:	87 ff       	sbrs	r24, 7
    1cfc:	07 c0       	rjmp	.+14     	; 0x1d0c <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1cfe:	80 91 ce 00 	lds	r24, 0x00CE
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	08 95       	ret
	  return _FDEV_EOF;
    1d06:	8e ef       	ldi	r24, 0xFE	; 254
    1d08:	9f ef       	ldi	r25, 0xFF	; 255
    1d0a:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1d0c:	8f ef       	ldi	r24, 0xFF	; 255
    1d0e:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1d10:	08 95       	ret

00001d12 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1d12:	fc 01       	movw	r30, r24
	if (!(Stream))
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	51 f4       	brne	.+20     	; 0x1d2c <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1d18:	e3 e0       	ldi	r30, 0x03	; 3
    1d1a:	f5 e0       	ldi	r31, 0x05	; 5
    1d1c:	f0 93 12 05 	sts	0x0512, r31
    1d20:	e0 93 11 05 	sts	0x0511, r30
		stdout = Stream;
    1d24:	f0 93 14 05 	sts	0x0514, r31
    1d28:	e0 93 13 05 	sts	0x0513, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1d2c:	8e e0       	ldi	r24, 0x0E	; 14
    1d2e:	df 01       	movw	r26, r30
    1d30:	1d 92       	st	X+, r1
    1d32:	8a 95       	dec	r24
    1d34:	e9 f7       	brne	.-6      	; 0x1d30 <Serial_CreateStream+0x1e>
    1d36:	83 e0       	ldi	r24, 0x03	; 3
    1d38:	83 83       	std	Z+3, r24	; 0x03
    1d3a:	8e e6       	ldi	r24, 0x6E	; 110
    1d3c:	9e e0       	ldi	r25, 0x0E	; 14
    1d3e:	91 87       	std	Z+9, r25	; 0x09
    1d40:	80 87       	std	Z+8, r24	; 0x08
    1d42:	87 e7       	ldi	r24, 0x77	; 119
    1d44:	9e e0       	ldi	r25, 0x0E	; 14
    1d46:	93 87       	std	Z+11, r25	; 0x0b
    1d48:	82 87       	std	Z+10, r24	; 0x0a
}
    1d4a:	08 95       	ret

00001d4c <fputc>:
    1d4c:	0f 93       	push	r16
    1d4e:	1f 93       	push	r17
    1d50:	cf 93       	push	r28
    1d52:	df 93       	push	r29
    1d54:	8c 01       	movw	r16, r24
    1d56:	eb 01       	movw	r28, r22
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	81 ff       	sbrs	r24, 1
    1d5c:	1b c0       	rjmp	.+54     	; 0x1d94 <fputc+0x48>
    1d5e:	82 ff       	sbrs	r24, 2
    1d60:	0d c0       	rjmp	.+26     	; 0x1d7c <fputc+0x30>
    1d62:	2e 81       	ldd	r18, Y+6	; 0x06
    1d64:	3f 81       	ldd	r19, Y+7	; 0x07
    1d66:	8c 81       	ldd	r24, Y+4	; 0x04
    1d68:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6a:	28 17       	cp	r18, r24
    1d6c:	39 07       	cpc	r19, r25
    1d6e:	64 f4       	brge	.+24     	; 0x1d88 <fputc+0x3c>
    1d70:	e8 81       	ld	r30, Y
    1d72:	f9 81       	ldd	r31, Y+1	; 0x01
    1d74:	01 93       	st	Z+, r16
    1d76:	f9 83       	std	Y+1, r31	; 0x01
    1d78:	e8 83       	st	Y, r30
    1d7a:	06 c0       	rjmp	.+12     	; 0x1d88 <fputc+0x3c>
    1d7c:	e8 85       	ldd	r30, Y+8	; 0x08
    1d7e:	f9 85       	ldd	r31, Y+9	; 0x09
    1d80:	80 2f       	mov	r24, r16
    1d82:	09 95       	icall
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	31 f4       	brne	.+12     	; 0x1d94 <fputc+0x48>
    1d88:	8e 81       	ldd	r24, Y+6	; 0x06
    1d8a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d8c:	01 96       	adiw	r24, 0x01	; 1
    1d8e:	9f 83       	std	Y+7, r25	; 0x07
    1d90:	8e 83       	std	Y+6, r24	; 0x06
    1d92:	02 c0       	rjmp	.+4      	; 0x1d98 <fputc+0x4c>
    1d94:	0f ef       	ldi	r16, 0xFF	; 255
    1d96:	1f ef       	ldi	r17, 0xFF	; 255
    1d98:	c8 01       	movw	r24, r16
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	1f 91       	pop	r17
    1da0:	0f 91       	pop	r16
    1da2:	08 95       	ret

00001da4 <printf_P>:
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	fe 01       	movw	r30, r28
    1dae:	35 96       	adiw	r30, 0x05	; 5
    1db0:	61 91       	ld	r22, Z+
    1db2:	71 91       	ld	r23, Z+
    1db4:	80 91 13 05 	lds	r24, 0x0513
    1db8:	90 91 14 05 	lds	r25, 0x0514
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	13 96       	adiw	r26, 0x03	; 3
    1dc0:	2c 91       	ld	r18, X
    1dc2:	13 97       	sbiw	r26, 0x03	; 3
    1dc4:	28 60       	ori	r18, 0x08	; 8
    1dc6:	13 96       	adiw	r26, 0x03	; 3
    1dc8:	2c 93       	st	X, r18
    1dca:	af 01       	movw	r20, r30
    1dcc:	39 d0       	rcall	.+114    	; 0x1e40 <vfprintf>
    1dce:	e0 91 13 05 	lds	r30, 0x0513
    1dd2:	f0 91 14 05 	lds	r31, 0x0514
    1dd6:	23 81       	ldd	r18, Z+3	; 0x03
    1dd8:	27 7f       	andi	r18, 0xF7	; 247
    1dda:	23 83       	std	Z+3, r18	; 0x03
    1ddc:	df 91       	pop	r29
    1dde:	cf 91       	pop	r28
    1de0:	08 95       	ret

00001de2 <puts_P>:
    1de2:	0f 93       	push	r16
    1de4:	1f 93       	push	r17
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
    1dea:	8c 01       	movw	r16, r24
    1dec:	e0 91 13 05 	lds	r30, 0x0513
    1df0:	f0 91 14 05 	lds	r31, 0x0514
    1df4:	83 81       	ldd	r24, Z+3	; 0x03
    1df6:	81 ff       	sbrs	r24, 1
    1df8:	1b c0       	rjmp	.+54     	; 0x1e30 <puts_P+0x4e>
    1dfa:	c0 e0       	ldi	r28, 0x00	; 0
    1dfc:	d0 e0       	ldi	r29, 0x00	; 0
    1dfe:	07 c0       	rjmp	.+14     	; 0x1e0e <puts_P+0x2c>
    1e00:	09 95       	icall
    1e02:	00 97       	sbiw	r24, 0x00	; 0
    1e04:	11 f0       	breq	.+4      	; 0x1e0a <puts_P+0x28>
    1e06:	cf ef       	ldi	r28, 0xFF	; 255
    1e08:	df ef       	ldi	r29, 0xFF	; 255
    1e0a:	0f 5f       	subi	r16, 0xFF	; 255
    1e0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0e:	f8 01       	movw	r30, r16
    1e10:	84 91       	lpm	r24, Z
    1e12:	60 91 13 05 	lds	r22, 0x0513
    1e16:	70 91 14 05 	lds	r23, 0x0514
    1e1a:	db 01       	movw	r26, r22
    1e1c:	18 96       	adiw	r26, 0x08	; 8
    1e1e:	ed 91       	ld	r30, X+
    1e20:	fc 91       	ld	r31, X
    1e22:	19 97       	sbiw	r26, 0x09	; 9
    1e24:	88 23       	and	r24, r24
    1e26:	61 f7       	brne	.-40     	; 0x1e00 <puts_P+0x1e>
    1e28:	8a e0       	ldi	r24, 0x0A	; 10
    1e2a:	09 95       	icall
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	11 f0       	breq	.+4      	; 0x1e34 <puts_P+0x52>
    1e30:	cf ef       	ldi	r28, 0xFF	; 255
    1e32:	df ef       	ldi	r29, 0xFF	; 255
    1e34:	ce 01       	movw	r24, r28
    1e36:	df 91       	pop	r29
    1e38:	cf 91       	pop	r28
    1e3a:	1f 91       	pop	r17
    1e3c:	0f 91       	pop	r16
    1e3e:	08 95       	ret

00001e40 <vfprintf>:
    1e40:	2f 92       	push	r2
    1e42:	3f 92       	push	r3
    1e44:	4f 92       	push	r4
    1e46:	5f 92       	push	r5
    1e48:	6f 92       	push	r6
    1e4a:	7f 92       	push	r7
    1e4c:	8f 92       	push	r8
    1e4e:	9f 92       	push	r9
    1e50:	af 92       	push	r10
    1e52:	bf 92       	push	r11
    1e54:	cf 92       	push	r12
    1e56:	df 92       	push	r13
    1e58:	ef 92       	push	r14
    1e5a:	ff 92       	push	r15
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	2d 97       	sbiw	r28, 0x0d	; 13
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	de bf       	out	0x3e, r29	; 62
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	cd bf       	out	0x3d, r28	; 61
    1e74:	3c 01       	movw	r6, r24
    1e76:	7d 87       	std	Y+13, r23	; 0x0d
    1e78:	6c 87       	std	Y+12, r22	; 0x0c
    1e7a:	5a 01       	movw	r10, r20
    1e7c:	fc 01       	movw	r30, r24
    1e7e:	17 82       	std	Z+7, r1	; 0x07
    1e80:	16 82       	std	Z+6, r1	; 0x06
    1e82:	83 81       	ldd	r24, Z+3	; 0x03
    1e84:	81 ff       	sbrs	r24, 1
    1e86:	bb c1       	rjmp	.+886    	; 0x21fe <__stack+0xff>
    1e88:	2e 01       	movw	r4, r28
    1e8a:	08 94       	sec
    1e8c:	41 1c       	adc	r4, r1
    1e8e:	51 1c       	adc	r5, r1
    1e90:	f3 01       	movw	r30, r6
    1e92:	93 81       	ldd	r25, Z+3	; 0x03
    1e94:	ec 85       	ldd	r30, Y+12	; 0x0c
    1e96:	fd 85       	ldd	r31, Y+13	; 0x0d
    1e98:	93 fd       	sbrc	r25, 3
    1e9a:	85 91       	lpm	r24, Z+
    1e9c:	93 ff       	sbrs	r25, 3
    1e9e:	81 91       	ld	r24, Z+
    1ea0:	fd 87       	std	Y+13, r31	; 0x0d
    1ea2:	ec 87       	std	Y+12, r30	; 0x0c
    1ea4:	88 23       	and	r24, r24
    1ea6:	09 f4       	brne	.+2      	; 0x1eaa <vfprintf+0x6a>
    1ea8:	a6 c1       	rjmp	.+844    	; 0x21f6 <__stack+0xf7>
    1eaa:	85 32       	cpi	r24, 0x25	; 37
    1eac:	41 f4       	brne	.+16     	; 0x1ebe <vfprintf+0x7e>
    1eae:	93 fd       	sbrc	r25, 3
    1eb0:	85 91       	lpm	r24, Z+
    1eb2:	93 ff       	sbrs	r25, 3
    1eb4:	81 91       	ld	r24, Z+
    1eb6:	fd 87       	std	Y+13, r31	; 0x0d
    1eb8:	ec 87       	std	Y+12, r30	; 0x0c
    1eba:	85 32       	cpi	r24, 0x25	; 37
    1ebc:	21 f4       	brne	.+8      	; 0x1ec6 <vfprintf+0x86>
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	b3 01       	movw	r22, r6
    1ec2:	44 df       	rcall	.-376    	; 0x1d4c <fputc>
    1ec4:	e5 cf       	rjmp	.-54     	; 0x1e90 <vfprintf+0x50>
    1ec6:	ff 24       	eor	r15, r15
    1ec8:	ee 24       	eor	r14, r14
    1eca:	10 e0       	ldi	r17, 0x00	; 0
    1ecc:	10 32       	cpi	r17, 0x20	; 32
    1ece:	b0 f4       	brcc	.+44     	; 0x1efc <vfprintf+0xbc>
    1ed0:	8b 32       	cpi	r24, 0x2B	; 43
    1ed2:	69 f0       	breq	.+26     	; 0x1eee <vfprintf+0xae>
    1ed4:	8c 32       	cpi	r24, 0x2C	; 44
    1ed6:	28 f4       	brcc	.+10     	; 0x1ee2 <vfprintf+0xa2>
    1ed8:	80 32       	cpi	r24, 0x20	; 32
    1eda:	51 f0       	breq	.+20     	; 0x1ef0 <vfprintf+0xb0>
    1edc:	83 32       	cpi	r24, 0x23	; 35
    1ede:	71 f4       	brne	.+28     	; 0x1efc <vfprintf+0xbc>
    1ee0:	0b c0       	rjmp	.+22     	; 0x1ef8 <vfprintf+0xb8>
    1ee2:	8d 32       	cpi	r24, 0x2D	; 45
    1ee4:	39 f0       	breq	.+14     	; 0x1ef4 <vfprintf+0xb4>
    1ee6:	80 33       	cpi	r24, 0x30	; 48
    1ee8:	49 f4       	brne	.+18     	; 0x1efc <vfprintf+0xbc>
    1eea:	11 60       	ori	r17, 0x01	; 1
    1eec:	2c c0       	rjmp	.+88     	; 0x1f46 <vfprintf+0x106>
    1eee:	12 60       	ori	r17, 0x02	; 2
    1ef0:	14 60       	ori	r17, 0x04	; 4
    1ef2:	29 c0       	rjmp	.+82     	; 0x1f46 <vfprintf+0x106>
    1ef4:	18 60       	ori	r17, 0x08	; 8
    1ef6:	27 c0       	rjmp	.+78     	; 0x1f46 <vfprintf+0x106>
    1ef8:	10 61       	ori	r17, 0x10	; 16
    1efa:	25 c0       	rjmp	.+74     	; 0x1f46 <vfprintf+0x106>
    1efc:	17 fd       	sbrc	r17, 7
    1efe:	2e c0       	rjmp	.+92     	; 0x1f5c <vfprintf+0x11c>
    1f00:	28 2f       	mov	r18, r24
    1f02:	20 53       	subi	r18, 0x30	; 48
    1f04:	2a 30       	cpi	r18, 0x0A	; 10
    1f06:	98 f4       	brcc	.+38     	; 0x1f2e <vfprintf+0xee>
    1f08:	16 ff       	sbrs	r17, 6
    1f0a:	08 c0       	rjmp	.+16     	; 0x1f1c <vfprintf+0xdc>
    1f0c:	8f 2d       	mov	r24, r15
    1f0e:	88 0f       	add	r24, r24
    1f10:	f8 2e       	mov	r15, r24
    1f12:	ff 0c       	add	r15, r15
    1f14:	ff 0c       	add	r15, r15
    1f16:	f8 0e       	add	r15, r24
    1f18:	f2 0e       	add	r15, r18
    1f1a:	15 c0       	rjmp	.+42     	; 0x1f46 <vfprintf+0x106>
    1f1c:	8e 2d       	mov	r24, r14
    1f1e:	88 0f       	add	r24, r24
    1f20:	e8 2e       	mov	r14, r24
    1f22:	ee 0c       	add	r14, r14
    1f24:	ee 0c       	add	r14, r14
    1f26:	e8 0e       	add	r14, r24
    1f28:	e2 0e       	add	r14, r18
    1f2a:	10 62       	ori	r17, 0x20	; 32
    1f2c:	0c c0       	rjmp	.+24     	; 0x1f46 <vfprintf+0x106>
    1f2e:	8e 32       	cpi	r24, 0x2E	; 46
    1f30:	21 f4       	brne	.+8      	; 0x1f3a <vfprintf+0xfa>
    1f32:	16 fd       	sbrc	r17, 6
    1f34:	60 c1       	rjmp	.+704    	; 0x21f6 <__stack+0xf7>
    1f36:	10 64       	ori	r17, 0x40	; 64
    1f38:	06 c0       	rjmp	.+12     	; 0x1f46 <vfprintf+0x106>
    1f3a:	8c 36       	cpi	r24, 0x6C	; 108
    1f3c:	11 f4       	brne	.+4      	; 0x1f42 <vfprintf+0x102>
    1f3e:	10 68       	ori	r17, 0x80	; 128
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <vfprintf+0x106>
    1f42:	88 36       	cpi	r24, 0x68	; 104
    1f44:	59 f4       	brne	.+22     	; 0x1f5c <vfprintf+0x11c>
    1f46:	ec 85       	ldd	r30, Y+12	; 0x0c
    1f48:	fd 85       	ldd	r31, Y+13	; 0x0d
    1f4a:	93 fd       	sbrc	r25, 3
    1f4c:	85 91       	lpm	r24, Z+
    1f4e:	93 ff       	sbrs	r25, 3
    1f50:	81 91       	ld	r24, Z+
    1f52:	fd 87       	std	Y+13, r31	; 0x0d
    1f54:	ec 87       	std	Y+12, r30	; 0x0c
    1f56:	88 23       	and	r24, r24
    1f58:	09 f0       	breq	.+2      	; 0x1f5c <vfprintf+0x11c>
    1f5a:	b8 cf       	rjmp	.-144    	; 0x1ecc <vfprintf+0x8c>
    1f5c:	98 2f       	mov	r25, r24
    1f5e:	95 54       	subi	r25, 0x45	; 69
    1f60:	93 30       	cpi	r25, 0x03	; 3
    1f62:	18 f0       	brcs	.+6      	; 0x1f6a <vfprintf+0x12a>
    1f64:	90 52       	subi	r25, 0x20	; 32
    1f66:	93 30       	cpi	r25, 0x03	; 3
    1f68:	38 f4       	brcc	.+14     	; 0x1f78 <vfprintf+0x138>
    1f6a:	24 e0       	ldi	r18, 0x04	; 4
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	a2 0e       	add	r10, r18
    1f70:	b3 1e       	adc	r11, r19
    1f72:	3f e3       	ldi	r19, 0x3F	; 63
    1f74:	39 83       	std	Y+1, r19	; 0x01
    1f76:	0f c0       	rjmp	.+30     	; 0x1f96 <vfprintf+0x156>
    1f78:	83 36       	cpi	r24, 0x63	; 99
    1f7a:	31 f0       	breq	.+12     	; 0x1f88 <vfprintf+0x148>
    1f7c:	83 37       	cpi	r24, 0x73	; 115
    1f7e:	81 f0       	breq	.+32     	; 0x1fa0 <vfprintf+0x160>
    1f80:	83 35       	cpi	r24, 0x53	; 83
    1f82:	09 f0       	breq	.+2      	; 0x1f86 <vfprintf+0x146>
    1f84:	56 c0       	rjmp	.+172    	; 0x2032 <vfprintf+0x1f2>
    1f86:	21 c0       	rjmp	.+66     	; 0x1fca <vfprintf+0x18a>
    1f88:	f5 01       	movw	r30, r10
    1f8a:	80 81       	ld	r24, Z
    1f8c:	89 83       	std	Y+1, r24	; 0x01
    1f8e:	22 e0       	ldi	r18, 0x02	; 2
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	a2 0e       	add	r10, r18
    1f94:	b3 1e       	adc	r11, r19
    1f96:	21 e0       	ldi	r18, 0x01	; 1
    1f98:	c2 2e       	mov	r12, r18
    1f9a:	d1 2c       	mov	r13, r1
    1f9c:	42 01       	movw	r8, r4
    1f9e:	13 c0       	rjmp	.+38     	; 0x1fc6 <vfprintf+0x186>
    1fa0:	92 e0       	ldi	r25, 0x02	; 2
    1fa2:	29 2e       	mov	r2, r25
    1fa4:	31 2c       	mov	r3, r1
    1fa6:	2a 0c       	add	r2, r10
    1fa8:	3b 1c       	adc	r3, r11
    1faa:	f5 01       	movw	r30, r10
    1fac:	80 80       	ld	r8, Z
    1fae:	91 80       	ldd	r9, Z+1	; 0x01
    1fb0:	16 ff       	sbrs	r17, 6
    1fb2:	03 c0       	rjmp	.+6      	; 0x1fba <vfprintf+0x17a>
    1fb4:	6f 2d       	mov	r22, r15
    1fb6:	70 e0       	ldi	r23, 0x00	; 0
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <vfprintf+0x17e>
    1fba:	6f ef       	ldi	r22, 0xFF	; 255
    1fbc:	7f ef       	ldi	r23, 0xFF	; 255
    1fbe:	c4 01       	movw	r24, r8
    1fc0:	44 d1       	rcall	.+648    	; 0x224a <strnlen>
    1fc2:	6c 01       	movw	r12, r24
    1fc4:	51 01       	movw	r10, r2
    1fc6:	1f 77       	andi	r17, 0x7F	; 127
    1fc8:	14 c0       	rjmp	.+40     	; 0x1ff2 <vfprintf+0x1b2>
    1fca:	82 e0       	ldi	r24, 0x02	; 2
    1fcc:	28 2e       	mov	r2, r24
    1fce:	31 2c       	mov	r3, r1
    1fd0:	2a 0c       	add	r2, r10
    1fd2:	3b 1c       	adc	r3, r11
    1fd4:	f5 01       	movw	r30, r10
    1fd6:	80 80       	ld	r8, Z
    1fd8:	91 80       	ldd	r9, Z+1	; 0x01
    1fda:	16 ff       	sbrs	r17, 6
    1fdc:	03 c0       	rjmp	.+6      	; 0x1fe4 <vfprintf+0x1a4>
    1fde:	6f 2d       	mov	r22, r15
    1fe0:	70 e0       	ldi	r23, 0x00	; 0
    1fe2:	02 c0       	rjmp	.+4      	; 0x1fe8 <vfprintf+0x1a8>
    1fe4:	6f ef       	ldi	r22, 0xFF	; 255
    1fe6:	7f ef       	ldi	r23, 0xFF	; 255
    1fe8:	c4 01       	movw	r24, r8
    1fea:	24 d1       	rcall	.+584    	; 0x2234 <strnlen_P>
    1fec:	6c 01       	movw	r12, r24
    1fee:	10 68       	ori	r17, 0x80	; 128
    1ff0:	51 01       	movw	r10, r2
    1ff2:	13 fd       	sbrc	r17, 3
    1ff4:	1a c0       	rjmp	.+52     	; 0x202a <vfprintf+0x1ea>
    1ff6:	05 c0       	rjmp	.+10     	; 0x2002 <vfprintf+0x1c2>
    1ff8:	80 e2       	ldi	r24, 0x20	; 32
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	b3 01       	movw	r22, r6
    1ffe:	a6 de       	rcall	.-692    	; 0x1d4c <fputc>
    2000:	ea 94       	dec	r14
    2002:	8e 2d       	mov	r24, r14
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	c8 16       	cp	r12, r24
    2008:	d9 06       	cpc	r13, r25
    200a:	b0 f3       	brcs	.-20     	; 0x1ff8 <vfprintf+0x1b8>
    200c:	0e c0       	rjmp	.+28     	; 0x202a <vfprintf+0x1ea>
    200e:	f4 01       	movw	r30, r8
    2010:	17 fd       	sbrc	r17, 7
    2012:	85 91       	lpm	r24, Z+
    2014:	17 ff       	sbrs	r17, 7
    2016:	81 91       	ld	r24, Z+
    2018:	4f 01       	movw	r8, r30
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	b3 01       	movw	r22, r6
    201e:	96 de       	rcall	.-724    	; 0x1d4c <fputc>
    2020:	e1 10       	cpse	r14, r1
    2022:	ea 94       	dec	r14
    2024:	08 94       	sec
    2026:	c1 08       	sbc	r12, r1
    2028:	d1 08       	sbc	r13, r1
    202a:	c1 14       	cp	r12, r1
    202c:	d1 04       	cpc	r13, r1
    202e:	79 f7       	brne	.-34     	; 0x200e <vfprintf+0x1ce>
    2030:	df c0       	rjmp	.+446    	; 0x21f0 <__stack+0xf1>
    2032:	84 36       	cpi	r24, 0x64	; 100
    2034:	11 f0       	breq	.+4      	; 0x203a <vfprintf+0x1fa>
    2036:	89 36       	cpi	r24, 0x69	; 105
    2038:	49 f5       	brne	.+82     	; 0x208c <vfprintf+0x24c>
    203a:	f5 01       	movw	r30, r10
    203c:	17 ff       	sbrs	r17, 7
    203e:	07 c0       	rjmp	.+14     	; 0x204e <vfprintf+0x20e>
    2040:	80 81       	ld	r24, Z
    2042:	91 81       	ldd	r25, Z+1	; 0x01
    2044:	a2 81       	ldd	r26, Z+2	; 0x02
    2046:	b3 81       	ldd	r27, Z+3	; 0x03
    2048:	24 e0       	ldi	r18, 0x04	; 4
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	08 c0       	rjmp	.+16     	; 0x205e <vfprintf+0x21e>
    204e:	80 81       	ld	r24, Z
    2050:	91 81       	ldd	r25, Z+1	; 0x01
    2052:	aa 27       	eor	r26, r26
    2054:	97 fd       	sbrc	r25, 7
    2056:	a0 95       	com	r26
    2058:	ba 2f       	mov	r27, r26
    205a:	22 e0       	ldi	r18, 0x02	; 2
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	a2 0e       	add	r10, r18
    2060:	b3 1e       	adc	r11, r19
    2062:	01 2f       	mov	r16, r17
    2064:	0f 76       	andi	r16, 0x6F	; 111
    2066:	b7 ff       	sbrs	r27, 7
    2068:	08 c0       	rjmp	.+16     	; 0x207a <vfprintf+0x23a>
    206a:	b0 95       	com	r27
    206c:	a0 95       	com	r26
    206e:	90 95       	com	r25
    2070:	81 95       	neg	r24
    2072:	9f 4f       	sbci	r25, 0xFF	; 255
    2074:	af 4f       	sbci	r26, 0xFF	; 255
    2076:	bf 4f       	sbci	r27, 0xFF	; 255
    2078:	00 68       	ori	r16, 0x80	; 128
    207a:	bc 01       	movw	r22, r24
    207c:	cd 01       	movw	r24, r26
    207e:	a2 01       	movw	r20, r4
    2080:	2a e0       	ldi	r18, 0x0A	; 10
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	ed d0       	rcall	.+474    	; 0x2260 <__ultoa_invert>
    2086:	d8 2e       	mov	r13, r24
    2088:	d4 18       	sub	r13, r4
    208a:	3e c0       	rjmp	.+124    	; 0x2108 <__stack+0x9>
    208c:	85 37       	cpi	r24, 0x75	; 117
    208e:	21 f4       	brne	.+8      	; 0x2098 <vfprintf+0x258>
    2090:	1f 7e       	andi	r17, 0xEF	; 239
    2092:	2a e0       	ldi	r18, 0x0A	; 10
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	20 c0       	rjmp	.+64     	; 0x20d8 <vfprintf+0x298>
    2098:	19 7f       	andi	r17, 0xF9	; 249
    209a:	8f 36       	cpi	r24, 0x6F	; 111
    209c:	a9 f0       	breq	.+42     	; 0x20c8 <vfprintf+0x288>
    209e:	80 37       	cpi	r24, 0x70	; 112
    20a0:	20 f4       	brcc	.+8      	; 0x20aa <vfprintf+0x26a>
    20a2:	88 35       	cpi	r24, 0x58	; 88
    20a4:	09 f0       	breq	.+2      	; 0x20a8 <vfprintf+0x268>
    20a6:	a7 c0       	rjmp	.+334    	; 0x21f6 <__stack+0xf7>
    20a8:	0b c0       	rjmp	.+22     	; 0x20c0 <vfprintf+0x280>
    20aa:	80 37       	cpi	r24, 0x70	; 112
    20ac:	21 f0       	breq	.+8      	; 0x20b6 <vfprintf+0x276>
    20ae:	88 37       	cpi	r24, 0x78	; 120
    20b0:	09 f0       	breq	.+2      	; 0x20b4 <vfprintf+0x274>
    20b2:	a1 c0       	rjmp	.+322    	; 0x21f6 <__stack+0xf7>
    20b4:	01 c0       	rjmp	.+2      	; 0x20b8 <vfprintf+0x278>
    20b6:	10 61       	ori	r17, 0x10	; 16
    20b8:	14 ff       	sbrs	r17, 4
    20ba:	09 c0       	rjmp	.+18     	; 0x20ce <vfprintf+0x28e>
    20bc:	14 60       	ori	r17, 0x04	; 4
    20be:	07 c0       	rjmp	.+14     	; 0x20ce <vfprintf+0x28e>
    20c0:	14 ff       	sbrs	r17, 4
    20c2:	08 c0       	rjmp	.+16     	; 0x20d4 <vfprintf+0x294>
    20c4:	16 60       	ori	r17, 0x06	; 6
    20c6:	06 c0       	rjmp	.+12     	; 0x20d4 <vfprintf+0x294>
    20c8:	28 e0       	ldi	r18, 0x08	; 8
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	05 c0       	rjmp	.+10     	; 0x20d8 <vfprintf+0x298>
    20ce:	20 e1       	ldi	r18, 0x10	; 16
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <vfprintf+0x298>
    20d4:	20 e1       	ldi	r18, 0x10	; 16
    20d6:	32 e0       	ldi	r19, 0x02	; 2
    20d8:	f5 01       	movw	r30, r10
    20da:	17 ff       	sbrs	r17, 7
    20dc:	07 c0       	rjmp	.+14     	; 0x20ec <vfprintf+0x2ac>
    20de:	60 81       	ld	r22, Z
    20e0:	71 81       	ldd	r23, Z+1	; 0x01
    20e2:	82 81       	ldd	r24, Z+2	; 0x02
    20e4:	93 81       	ldd	r25, Z+3	; 0x03
    20e6:	44 e0       	ldi	r20, 0x04	; 4
    20e8:	50 e0       	ldi	r21, 0x00	; 0
    20ea:	06 c0       	rjmp	.+12     	; 0x20f8 <vfprintf+0x2b8>
    20ec:	60 81       	ld	r22, Z
    20ee:	71 81       	ldd	r23, Z+1	; 0x01
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	42 e0       	ldi	r20, 0x02	; 2
    20f6:	50 e0       	ldi	r21, 0x00	; 0
    20f8:	a4 0e       	add	r10, r20
    20fa:	b5 1e       	adc	r11, r21
    20fc:	a2 01       	movw	r20, r4
    20fe:	b0 d0       	rcall	.+352    	; 0x2260 <__ultoa_invert>
    2100:	d8 2e       	mov	r13, r24
    2102:	d4 18       	sub	r13, r4
    2104:	01 2f       	mov	r16, r17
    2106:	0f 77       	andi	r16, 0x7F	; 127
    2108:	06 ff       	sbrs	r16, 6
    210a:	09 c0       	rjmp	.+18     	; 0x211e <__stack+0x1f>
    210c:	0e 7f       	andi	r16, 0xFE	; 254
    210e:	df 14       	cp	r13, r15
    2110:	30 f4       	brcc	.+12     	; 0x211e <__stack+0x1f>
    2112:	04 ff       	sbrs	r16, 4
    2114:	06 c0       	rjmp	.+12     	; 0x2122 <__stack+0x23>
    2116:	02 fd       	sbrc	r16, 2
    2118:	04 c0       	rjmp	.+8      	; 0x2122 <__stack+0x23>
    211a:	0f 7e       	andi	r16, 0xEF	; 239
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <__stack+0x23>
    211e:	1d 2d       	mov	r17, r13
    2120:	01 c0       	rjmp	.+2      	; 0x2124 <__stack+0x25>
    2122:	1f 2d       	mov	r17, r15
    2124:	80 2f       	mov	r24, r16
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	04 ff       	sbrs	r16, 4
    212a:	0c c0       	rjmp	.+24     	; 0x2144 <__stack+0x45>
    212c:	fe 01       	movw	r30, r28
    212e:	ed 0d       	add	r30, r13
    2130:	f1 1d       	adc	r31, r1
    2132:	20 81       	ld	r18, Z
    2134:	20 33       	cpi	r18, 0x30	; 48
    2136:	11 f4       	brne	.+4      	; 0x213c <__stack+0x3d>
    2138:	09 7e       	andi	r16, 0xE9	; 233
    213a:	09 c0       	rjmp	.+18     	; 0x214e <__stack+0x4f>
    213c:	02 ff       	sbrs	r16, 2
    213e:	06 c0       	rjmp	.+12     	; 0x214c <__stack+0x4d>
    2140:	1e 5f       	subi	r17, 0xFE	; 254
    2142:	05 c0       	rjmp	.+10     	; 0x214e <__stack+0x4f>
    2144:	86 78       	andi	r24, 0x86	; 134
    2146:	90 70       	andi	r25, 0x00	; 0
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	09 f0       	breq	.+2      	; 0x214e <__stack+0x4f>
    214c:	1f 5f       	subi	r17, 0xFF	; 255
    214e:	80 2e       	mov	r8, r16
    2150:	99 24       	eor	r9, r9
    2152:	03 fd       	sbrc	r16, 3
    2154:	11 c0       	rjmp	.+34     	; 0x2178 <__stack+0x79>
    2156:	00 ff       	sbrs	r16, 0
    2158:	0c c0       	rjmp	.+24     	; 0x2172 <__stack+0x73>
    215a:	fd 2c       	mov	r15, r13
    215c:	1e 15       	cp	r17, r14
    215e:	48 f4       	brcc	.+18     	; 0x2172 <__stack+0x73>
    2160:	fe 0c       	add	r15, r14
    2162:	f1 1a       	sub	r15, r17
    2164:	1e 2d       	mov	r17, r14
    2166:	05 c0       	rjmp	.+10     	; 0x2172 <__stack+0x73>
    2168:	80 e2       	ldi	r24, 0x20	; 32
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	b3 01       	movw	r22, r6
    216e:	ee dd       	rcall	.-1060   	; 0x1d4c <fputc>
    2170:	1f 5f       	subi	r17, 0xFF	; 255
    2172:	1e 15       	cp	r17, r14
    2174:	c8 f3       	brcs	.-14     	; 0x2168 <__stack+0x69>
    2176:	04 c0       	rjmp	.+8      	; 0x2180 <__stack+0x81>
    2178:	1e 15       	cp	r17, r14
    217a:	10 f4       	brcc	.+4      	; 0x2180 <__stack+0x81>
    217c:	e1 1a       	sub	r14, r17
    217e:	01 c0       	rjmp	.+2      	; 0x2182 <__stack+0x83>
    2180:	ee 24       	eor	r14, r14
    2182:	84 fe       	sbrs	r8, 4
    2184:	0e c0       	rjmp	.+28     	; 0x21a2 <__stack+0xa3>
    2186:	80 e3       	ldi	r24, 0x30	; 48
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	b3 01       	movw	r22, r6
    218c:	df dd       	rcall	.-1090   	; 0x1d4c <fputc>
    218e:	82 fe       	sbrs	r8, 2
    2190:	1d c0       	rjmp	.+58     	; 0x21cc <__stack+0xcd>
    2192:	81 fe       	sbrs	r8, 1
    2194:	03 c0       	rjmp	.+6      	; 0x219c <__stack+0x9d>
    2196:	88 e5       	ldi	r24, 0x58	; 88
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	10 c0       	rjmp	.+32     	; 0x21bc <__stack+0xbd>
    219c:	88 e7       	ldi	r24, 0x78	; 120
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	0d c0       	rjmp	.+26     	; 0x21bc <__stack+0xbd>
    21a2:	c4 01       	movw	r24, r8
    21a4:	86 78       	andi	r24, 0x86	; 134
    21a6:	90 70       	andi	r25, 0x00	; 0
    21a8:	00 97       	sbiw	r24, 0x00	; 0
    21aa:	81 f0       	breq	.+32     	; 0x21cc <__stack+0xcd>
    21ac:	81 fc       	sbrc	r8, 1
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <__stack+0xb5>
    21b0:	80 e2       	ldi	r24, 0x20	; 32
    21b2:	01 c0       	rjmp	.+2      	; 0x21b6 <__stack+0xb7>
    21b4:	8b e2       	ldi	r24, 0x2B	; 43
    21b6:	07 fd       	sbrc	r16, 7
    21b8:	8d e2       	ldi	r24, 0x2D	; 45
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	b3 01       	movw	r22, r6
    21be:	c6 dd       	rcall	.-1140   	; 0x1d4c <fputc>
    21c0:	05 c0       	rjmp	.+10     	; 0x21cc <__stack+0xcd>
    21c2:	80 e3       	ldi	r24, 0x30	; 48
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	b3 01       	movw	r22, r6
    21c8:	c1 dd       	rcall	.-1150   	; 0x1d4c <fputc>
    21ca:	fa 94       	dec	r15
    21cc:	df 14       	cp	r13, r15
    21ce:	c8 f3       	brcs	.-14     	; 0x21c2 <__stack+0xc3>
    21d0:	da 94       	dec	r13
    21d2:	f2 01       	movw	r30, r4
    21d4:	ed 0d       	add	r30, r13
    21d6:	f1 1d       	adc	r31, r1
    21d8:	80 81       	ld	r24, Z
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	b3 01       	movw	r22, r6
    21de:	b6 dd       	rcall	.-1172   	; 0x1d4c <fputc>
    21e0:	dd 20       	and	r13, r13
    21e2:	b1 f7       	brne	.-20     	; 0x21d0 <__stack+0xd1>
    21e4:	05 c0       	rjmp	.+10     	; 0x21f0 <__stack+0xf1>
    21e6:	80 e2       	ldi	r24, 0x20	; 32
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	b3 01       	movw	r22, r6
    21ec:	af dd       	rcall	.-1186   	; 0x1d4c <fputc>
    21ee:	ea 94       	dec	r14
    21f0:	ee 20       	and	r14, r14
    21f2:	c9 f7       	brne	.-14     	; 0x21e6 <__stack+0xe7>
    21f4:	4d ce       	rjmp	.-870    	; 0x1e90 <vfprintf+0x50>
    21f6:	f3 01       	movw	r30, r6
    21f8:	86 81       	ldd	r24, Z+6	; 0x06
    21fa:	97 81       	ldd	r25, Z+7	; 0x07
    21fc:	02 c0       	rjmp	.+4      	; 0x2202 <__stack+0x103>
    21fe:	8f ef       	ldi	r24, 0xFF	; 255
    2200:	9f ef       	ldi	r25, 0xFF	; 255
    2202:	2d 96       	adiw	r28, 0x0d	; 13
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	f8 94       	cli
    2208:	de bf       	out	0x3e, r29	; 62
    220a:	0f be       	out	0x3f, r0	; 63
    220c:	cd bf       	out	0x3d, r28	; 61
    220e:	df 91       	pop	r29
    2210:	cf 91       	pop	r28
    2212:	1f 91       	pop	r17
    2214:	0f 91       	pop	r16
    2216:	ff 90       	pop	r15
    2218:	ef 90       	pop	r14
    221a:	df 90       	pop	r13
    221c:	cf 90       	pop	r12
    221e:	bf 90       	pop	r11
    2220:	af 90       	pop	r10
    2222:	9f 90       	pop	r9
    2224:	8f 90       	pop	r8
    2226:	7f 90       	pop	r7
    2228:	6f 90       	pop	r6
    222a:	5f 90       	pop	r5
    222c:	4f 90       	pop	r4
    222e:	3f 90       	pop	r3
    2230:	2f 90       	pop	r2
    2232:	08 95       	ret

00002234 <strnlen_P>:
    2234:	fc 01       	movw	r30, r24
    2236:	05 90       	lpm	r0, Z+
    2238:	61 50       	subi	r22, 0x01	; 1
    223a:	70 40       	sbci	r23, 0x00	; 0
    223c:	01 10       	cpse	r0, r1
    223e:	d8 f7       	brcc	.-10     	; 0x2236 <strnlen_P+0x2>
    2240:	80 95       	com	r24
    2242:	90 95       	com	r25
    2244:	8e 0f       	add	r24, r30
    2246:	9f 1f       	adc	r25, r31
    2248:	08 95       	ret

0000224a <strnlen>:
    224a:	fc 01       	movw	r30, r24
    224c:	61 50       	subi	r22, 0x01	; 1
    224e:	70 40       	sbci	r23, 0x00	; 0
    2250:	01 90       	ld	r0, Z+
    2252:	01 10       	cpse	r0, r1
    2254:	d8 f7       	brcc	.-10     	; 0x224c <strnlen+0x2>
    2256:	80 95       	com	r24
    2258:	90 95       	com	r25
    225a:	8e 0f       	add	r24, r30
    225c:	9f 1f       	adc	r25, r31
    225e:	08 95       	ret

00002260 <__ultoa_invert>:
    2260:	fa 01       	movw	r30, r20
    2262:	aa 27       	eor	r26, r26
    2264:	28 30       	cpi	r18, 0x08	; 8
    2266:	51 f1       	breq	.+84     	; 0x22bc <__ultoa_invert+0x5c>
    2268:	20 31       	cpi	r18, 0x10	; 16
    226a:	81 f1       	breq	.+96     	; 0x22cc <__ultoa_invert+0x6c>
    226c:	e8 94       	clt
    226e:	6f 93       	push	r22
    2270:	6e 7f       	andi	r22, 0xFE	; 254
    2272:	6e 5f       	subi	r22, 0xFE	; 254
    2274:	7f 4f       	sbci	r23, 0xFF	; 255
    2276:	8f 4f       	sbci	r24, 0xFF	; 255
    2278:	9f 4f       	sbci	r25, 0xFF	; 255
    227a:	af 4f       	sbci	r26, 0xFF	; 255
    227c:	b1 e0       	ldi	r27, 0x01	; 1
    227e:	3e d0       	rcall	.+124    	; 0x22fc <__ultoa_invert+0x9c>
    2280:	b4 e0       	ldi	r27, 0x04	; 4
    2282:	3c d0       	rcall	.+120    	; 0x22fc <__ultoa_invert+0x9c>
    2284:	67 0f       	add	r22, r23
    2286:	78 1f       	adc	r23, r24
    2288:	89 1f       	adc	r24, r25
    228a:	9a 1f       	adc	r25, r26
    228c:	a1 1d       	adc	r26, r1
    228e:	68 0f       	add	r22, r24
    2290:	79 1f       	adc	r23, r25
    2292:	8a 1f       	adc	r24, r26
    2294:	91 1d       	adc	r25, r1
    2296:	a1 1d       	adc	r26, r1
    2298:	6a 0f       	add	r22, r26
    229a:	71 1d       	adc	r23, r1
    229c:	81 1d       	adc	r24, r1
    229e:	91 1d       	adc	r25, r1
    22a0:	a1 1d       	adc	r26, r1
    22a2:	20 d0       	rcall	.+64     	; 0x22e4 <__ultoa_invert+0x84>
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <__ultoa_invert+0x48>
    22a6:	68 94       	set
    22a8:	3f 91       	pop	r19
    22aa:	2a e0       	ldi	r18, 0x0A	; 10
    22ac:	26 9f       	mul	r18, r22
    22ae:	11 24       	eor	r1, r1
    22b0:	30 19       	sub	r19, r0
    22b2:	30 5d       	subi	r19, 0xD0	; 208
    22b4:	31 93       	st	Z+, r19
    22b6:	de f6       	brtc	.-74     	; 0x226e <__ultoa_invert+0xe>
    22b8:	cf 01       	movw	r24, r30
    22ba:	08 95       	ret
    22bc:	46 2f       	mov	r20, r22
    22be:	47 70       	andi	r20, 0x07	; 7
    22c0:	40 5d       	subi	r20, 0xD0	; 208
    22c2:	41 93       	st	Z+, r20
    22c4:	b3 e0       	ldi	r27, 0x03	; 3
    22c6:	0f d0       	rcall	.+30     	; 0x22e6 <__ultoa_invert+0x86>
    22c8:	c9 f7       	brne	.-14     	; 0x22bc <__ultoa_invert+0x5c>
    22ca:	f6 cf       	rjmp	.-20     	; 0x22b8 <__ultoa_invert+0x58>
    22cc:	46 2f       	mov	r20, r22
    22ce:	4f 70       	andi	r20, 0x0F	; 15
    22d0:	40 5d       	subi	r20, 0xD0	; 208
    22d2:	4a 33       	cpi	r20, 0x3A	; 58
    22d4:	18 f0       	brcs	.+6      	; 0x22dc <__ultoa_invert+0x7c>
    22d6:	49 5d       	subi	r20, 0xD9	; 217
    22d8:	31 fd       	sbrc	r19, 1
    22da:	40 52       	subi	r20, 0x20	; 32
    22dc:	41 93       	st	Z+, r20
    22de:	02 d0       	rcall	.+4      	; 0x22e4 <__ultoa_invert+0x84>
    22e0:	a9 f7       	brne	.-22     	; 0x22cc <__ultoa_invert+0x6c>
    22e2:	ea cf       	rjmp	.-44     	; 0x22b8 <__ultoa_invert+0x58>
    22e4:	b4 e0       	ldi	r27, 0x04	; 4
    22e6:	a6 95       	lsr	r26
    22e8:	97 95       	ror	r25
    22ea:	87 95       	ror	r24
    22ec:	77 95       	ror	r23
    22ee:	67 95       	ror	r22
    22f0:	ba 95       	dec	r27
    22f2:	c9 f7       	brne	.-14     	; 0x22e6 <__ultoa_invert+0x86>
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	61 05       	cpc	r22, r1
    22f8:	71 05       	cpc	r23, r1
    22fa:	08 95       	ret
    22fc:	9b 01       	movw	r18, r22
    22fe:	ac 01       	movw	r20, r24
    2300:	0a 2e       	mov	r0, r26
    2302:	06 94       	lsr	r0
    2304:	57 95       	ror	r21
    2306:	47 95       	ror	r20
    2308:	37 95       	ror	r19
    230a:	27 95       	ror	r18
    230c:	ba 95       	dec	r27
    230e:	c9 f7       	brne	.-14     	; 0x2302 <__ultoa_invert+0xa2>
    2310:	62 0f       	add	r22, r18
    2312:	73 1f       	adc	r23, r19
    2314:	84 1f       	adc	r24, r20
    2316:	95 1f       	adc	r25, r21
    2318:	a0 1d       	adc	r26, r0
    231a:	08 95       	ret

0000231c <_exit>:
    231c:	f8 94       	cli

0000231e <__stop_program>:
    231e:	ff cf       	rjmp	.-2      	; 0x231e <__stop_program>
