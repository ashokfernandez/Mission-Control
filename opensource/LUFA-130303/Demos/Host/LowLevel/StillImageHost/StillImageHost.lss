
StillImageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00001f22  00001fb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006a  0080011a  0080011a  00001fd0  2**0
                  ALLOC
  3 .stab         00000e28  00000000  00000000  00001fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000256  00000000  00000000  00002df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000480  00000000  00000000  00003050  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005ff3  00000000  00000000  000034d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e1a  00000000  00000000  000094c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000030d8  00000000  00000000  0000b2dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c30  00000000  00000000  0000e3b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000028af  00000000  00000000  0000efe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000043f5  00000000  00000000  00011897  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004c0  00000000  00000000  00015c8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9f c1       	rjmp	.+830    	; 0x340 <__ctors_end>
       2:	00 00       	nop
       4:	bc c1       	rjmp	.+888    	; 0x37e <__bad_interrupt>
       6:	00 00       	nop
       8:	ba c1       	rjmp	.+884    	; 0x37e <__bad_interrupt>
       a:	00 00       	nop
       c:	b8 c1       	rjmp	.+880    	; 0x37e <__bad_interrupt>
       e:	00 00       	nop
      10:	b6 c1       	rjmp	.+876    	; 0x37e <__bad_interrupt>
      12:	00 00       	nop
      14:	b4 c1       	rjmp	.+872    	; 0x37e <__bad_interrupt>
      16:	00 00       	nop
      18:	b2 c1       	rjmp	.+868    	; 0x37e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b0 c1       	rjmp	.+864    	; 0x37e <__bad_interrupt>
      1e:	00 00       	nop
      20:	ae c1       	rjmp	.+860    	; 0x37e <__bad_interrupt>
      22:	00 00       	nop
      24:	ac c1       	rjmp	.+856    	; 0x37e <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <__vector_10>
      2c:	a8 c1       	rjmp	.+848    	; 0x37e <__bad_interrupt>
      2e:	00 00       	nop
      30:	a6 c1       	rjmp	.+844    	; 0x37e <__bad_interrupt>
      32:	00 00       	nop
      34:	a4 c1       	rjmp	.+840    	; 0x37e <__bad_interrupt>
      36:	00 00       	nop
      38:	a2 c1       	rjmp	.+836    	; 0x37e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a0 c1       	rjmp	.+832    	; 0x37e <__bad_interrupt>
      3e:	00 00       	nop
      40:	9e c1       	rjmp	.+828    	; 0x37e <__bad_interrupt>
      42:	00 00       	nop
      44:	9c c1       	rjmp	.+824    	; 0x37e <__bad_interrupt>
      46:	00 00       	nop
      48:	9a c1       	rjmp	.+820    	; 0x37e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	98 c1       	rjmp	.+816    	; 0x37e <__bad_interrupt>
      4e:	00 00       	nop
      50:	96 c1       	rjmp	.+812    	; 0x37e <__bad_interrupt>
      52:	00 00       	nop
      54:	94 c1       	rjmp	.+808    	; 0x37e <__bad_interrupt>
      56:	00 00       	nop
      58:	92 c1       	rjmp	.+804    	; 0x37e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	90 c1       	rjmp	.+800    	; 0x37e <__bad_interrupt>
      5e:	00 00       	nop
      60:	8e c1       	rjmp	.+796    	; 0x37e <__bad_interrupt>
      62:	00 00       	nop
      64:	8c c1       	rjmp	.+792    	; 0x37e <__bad_interrupt>
      66:	00 00       	nop
      68:	8a c1       	rjmp	.+788    	; 0x37e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	88 c1       	rjmp	.+784    	; 0x37e <__bad_interrupt>
      6e:	00 00       	nop
      70:	86 c1       	rjmp	.+780    	; 0x37e <__bad_interrupt>
      72:	00 00       	nop
      74:	84 c1       	rjmp	.+776    	; 0x37e <__bad_interrupt>
      76:	00 00       	nop
      78:	82 c1       	rjmp	.+772    	; 0x37e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	80 c1       	rjmp	.+768    	; 0x37e <__bad_interrupt>
      7e:	00 00       	nop
      80:	7e c1       	rjmp	.+764    	; 0x37e <__bad_interrupt>
      82:	00 00       	nop
      84:	7c c1       	rjmp	.+760    	; 0x37e <__bad_interrupt>
      86:	00 00       	nop
      88:	7a c1       	rjmp	.+756    	; 0x37e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	78 c1       	rjmp	.+752    	; 0x37e <__bad_interrupt>
      8e:	00 00       	nop
      90:	76 c1       	rjmp	.+748    	; 0x37e <__bad_interrupt>
      92:	00 00       	nop
      94:	74 c1       	rjmp	.+744    	; 0x37e <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4296>:
      98:	1b 5b 33 36 6d 53 74 69 6c 6c 20 49 6d 61 67 65     .[36mStill Image
      a8:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
      b8:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00                    ng....[37m.

000000c3 <__c.4305>:
      c3:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
      d3:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

000000e0 <__c.4310>:
      e0:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
      f0:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     100:	00                                                  .

00000101 <__c.4315>:
     101:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     111:	61 74 61 2e 0d 0a 00                                ata....

00000118 <__c.4318>:
     118:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     128:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     138:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000142 <__c.4320>:
     142:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     152:	69 63 65 2e 0d 0a 00                                ice....

00000159 <__c.4322>:
     159:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     169:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

00000173 <__c.4324>:
     173:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     183:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     193:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1a3:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1b3:	37 6d 00                                            7m.

000001b6 <__c.4326>:
     1b6:	53 74 69 6c 6c 20 49 6d 61 67 65 20 44 65 76 69     Still Image Devi
     1c6:	63 65 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d 0a     ce Enumerated...
     1d6:	00                                                  .

000001d7 <__c.4331>:
     1d7:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     1e7:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     1f7:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000206 <__c.4338>:
     206:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     216:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     226:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     236:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     246:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     256:	1b 5b 33 37 6d 00                                   .[37m.

0000025c <__c.4344>:
     25c:	52 65 74 72 69 65 76 69 6e 67 20 44 65 76 69 63     Retrieving Devic
     26c:	65 20 49 6e 66 6f 2e 2e 2e 0d 0a 00                 e Info......

00000278 <__c.4351>:
     278:	20 20 20 4d 61 6e 75 66 61 63 74 75 72 65 72 3a        Manufacturer:
     288:	20 25 73 0d 0a 00                                    %s...

0000028e <__c.4354>:
     28e:	20 20 20 4d 6f 64 65 6c 3a 20 25 73 0d 0a 00           Model: %s...

0000029d <__c.4357>:
     29d:	20 20 20 44 65 76 69 63 65 20 56 65 72 73 69 6f        Device Versio
     2ad:	6e 3a 20 25 73 0d 0a 00                             n: %s...

000002b5 <__c.4359>:
     2b5:	4f 70 65 6e 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Opening Session.
     2c5:	2e 2e 0d 0a 00                                      .....

000002ca <__c.4362>:
     2ca:	43 6c 6f 73 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Closing Session.
     2da:	2e 2e 0d 0a 00                                      .....

000002df <__c.4365>:
     2df:	44 6f 6e 65 2e 0d 0a 00                             Done....

000002e7 <__c.4384>:
     2e7:	1b 5b 33 31 6d 43 6f 6d 6d 61 6e 64 20 45 72 72     .[31mCommand Err
     2f7:	6f 72 20 28 25 53 29 2e 0d 0a 20 2d 2d 20 45 72     or (%S)... -- Er
     307:	72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 1b 5b 33     ror Code %d...[3
     317:	37 6d 00                                            7m.

0000031a <__c.4380>:
     31a:	52 65 73 70 6f 6e 73 65 20 43 6f 64 65 20 21 3d     Response Code !=
     32a:	20 4f 4b 00                                          OK.

0000032e <__c.4382>:
     32e:	54 72 61 6e 73 61 63 74 69 6f 6e 20 46 61 69 6c     Transaction Fail
     33e:	00 00                                               ..

00000340 <__ctors_end>:
     340:	11 24       	eor	r1, r1
     342:	1f be       	out	0x3f, r1	; 63
     344:	cf ef       	ldi	r28, 0xFF	; 255
     346:	d0 e2       	ldi	r29, 0x20	; 32
     348:	de bf       	out	0x3e, r29	; 62
     34a:	cd bf       	out	0x3d, r28	; 61

0000034c <__do_copy_data>:
     34c:	11 e0       	ldi	r17, 0x01	; 1
     34e:	a0 e0       	ldi	r26, 0x00	; 0
     350:	b1 e0       	ldi	r27, 0x01	; 1
     352:	e2 e2       	ldi	r30, 0x22	; 34
     354:	ff e1       	ldi	r31, 0x1F	; 31
     356:	00 e0       	ldi	r16, 0x00	; 0
     358:	0b bf       	out	0x3b, r16	; 59
     35a:	02 c0       	rjmp	.+4      	; 0x360 <__do_copy_data+0x14>
     35c:	07 90       	elpm	r0, Z+
     35e:	0d 92       	st	X+, r0
     360:	aa 31       	cpi	r26, 0x1A	; 26
     362:	b1 07       	cpc	r27, r17
     364:	d9 f7       	brne	.-10     	; 0x35c <__do_copy_data+0x10>
     366:	1b be       	out	0x3b, r1	; 59

00000368 <__do_clear_bss>:
     368:	11 e0       	ldi	r17, 0x01	; 1
     36a:	aa e1       	ldi	r26, 0x1A	; 26
     36c:	b1 e0       	ldi	r27, 0x01	; 1
     36e:	01 c0       	rjmp	.+2      	; 0x372 <.do_clear_bss_start>

00000370 <.do_clear_bss_loop>:
     370:	1d 92       	st	X+, r1

00000372 <.do_clear_bss_start>:
     372:	a4 38       	cpi	r26, 0x84	; 132
     374:	b1 07       	cpc	r27, r17
     376:	e1 f7       	brne	.-8      	; 0x370 <.do_clear_bss_loop>
     378:	dd d2       	rcall	.+1466   	; 0x934 <main>
     37a:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <_exit>

0000037e <__bad_interrupt>:
     37e:	40 ce       	rjmp	.-896    	; 0x0 <__vectors>

00000380 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     380:	9b b1       	in	r25, 0x0b	; 11
     382:	9f 70       	andi	r25, 0x0F	; 15
     384:	98 2b       	or	r25, r24
     386:	9b b9       	out	0x0b, r25	; 11
			}
     388:	08 95       	ret

0000038a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     38a:	84 b7       	in	r24, 0x34	; 52
     38c:	87 7f       	andi	r24, 0xF7	; 247
     38e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     390:	28 e1       	ldi	r18, 0x18	; 24
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	f8 94       	cli
     396:	20 93 60 00 	sts	0x0060, r18
     39a:	10 92 60 00 	sts	0x0060, r1
     39e:	0f be       	out	0x3f, r0	; 63

	/* Disable Clock Division */
	CLKPR = (1 << CLKPCE);
     3a0:	e1 e6       	ldi	r30, 0x61	; 97
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 e8       	ldi	r24, 0x80	; 128
     3a6:	80 83       	st	Z, r24
	CLKPR = 0;
     3a8:	10 82       	st	Z, r1
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     3aa:	83 e3       	ldi	r24, 0x33	; 51
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	90 93 cd 00 	sts	0x00CD, r25
     3b2:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     3b6:	86 e0       	ldi	r24, 0x06	; 6
     3b8:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     3bc:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     3c0:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     3c4:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     3c6:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     3c8:	8a b1       	in	r24, 0x0a	; 10
     3ca:	80 6f       	ori	r24, 0xF0	; 240
     3cc:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     3ce:	8b b1       	in	r24, 0x0b	; 11
     3d0:	8f 70       	andi	r24, 0x0F	; 15
     3d2:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     3d4:	c4 d7       	rcall	.+3976   	; 0x135e <USB_Init>
     3d6:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0c 94 8a 0c 	jmp	0x1914	; 0x1914 <Serial_CreateStream>

000003de <EVENT_USB_Host_DeviceAttached>:
     3de:	83 ec       	ldi	r24, 0xC3	; 195
}
     3e0:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     3e2:	0e 94 c6 0c 	call	0x198c	; 0x198c <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     3e6:	80 ea       	ldi	r24, 0xA0	; 160
     3e8:	cb cf       	rjmp	.-106    	; 0x380 <LEDs_SetAllLEDs>

000003ea <EVENT_USB_Host_DeviceUnattached>:
     3ea:	80 ee       	ldi	r24, 0xE0	; 224
}
     3ec:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     3ee:	0e 94 c6 0c 	call	0x198c	; 0x198c <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3f2:	80 e1       	ldi	r24, 0x10	; 16
     3f4:	c5 cf       	rjmp	.-118    	; 0x380 <LEDs_SetAllLEDs>

000003f6 <EVENT_USB_Host_DeviceEnumerationComplete>:
     3f6:	cf 93       	push	r28
}
     3f8:	81 e0       	ldi	r24, 0x01	; 1
/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	puts_P(PSTR("Getting Config Data.\r\n"));
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	0e 94 c6 0c 	call	0x198c	; 0x198c <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     400:	ca d2       	rcall	.+1428   	; 0x996 <ProcessConfigurationDescriptor>
     402:	c8 2f       	mov	r28, r24
     404:	88 23       	and	r24, r24
     406:	01 f1       	breq	.+64     	; 0x448 <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
     408:	81 30       	cpi	r24, 0x01	; 1
	{
		if (ErrorCode == ControlError)
     40a:	19 f4       	brne	.+6      	; 0x412 <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
     40c:	88 e1       	ldi	r24, 0x18	; 24
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	02 c0       	rjmp	.+4      	; 0x416 <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
     412:	82 e4       	ldi	r24, 0x42	; 66
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	0e 94 c6 0c 	call	0x198c	; 0x198c <puts_P>
     41a:	00 d0       	rcall	.+0      	; 0x41c <EVENT_USB_Host_DeviceEnumerationComplete+0x26>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     41c:	00 d0       	rcall	.+0      	; 0x41e <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
     41e:	ed b7       	in	r30, 0x3d	; 61
     420:	fe b7       	in	r31, 0x3e	; 62
     422:	31 96       	adiw	r30, 0x01	; 1
     424:	29 e5       	ldi	r18, 0x59	; 89
     426:	31 e0       	ldi	r19, 0x01	; 1
     428:	ad b7       	in	r26, 0x3d	; 61
     42a:	be b7       	in	r27, 0x3e	; 62
     42c:	12 96       	adiw	r26, 0x02	; 2
     42e:	3c 93       	st	X, r19
     430:	2e 93       	st	-X, r18
     432:	11 97       	sbiw	r26, 0x01	; 1
     434:	c2 83       	std	Z+2, r28	; 0x02
     436:	13 82       	std	Z+3, r1	; 0x03
     438:	0e 94 a7 0c 	call	0x194e	; 0x194e <printf_P>
     43c:	0f 90       	pop	r0

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	80 e9       	ldi	r24, 0x90	; 144
     446:	19 c0       	rjmp	.+50     	; 0x47a <EVENT_USB_Host_DeviceEnumerationComplete+0x84>
     448:	81 e0       	ldi	r24, 0x01	; 1
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     44a:	0e 94 26 0c 	call	0x184c	; 0x184c <USB_Host_SetDeviceConfiguration>
     44e:	88 23       	and	r24, r24
     450:	79 f0       	breq	.+30     	; 0x470 <EVENT_USB_Host_DeviceEnumerationComplete+0x7a>
     452:	00 d0       	rcall	.+0      	; 0x454 <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     454:	00 d0       	rcall	.+0      	; 0x456 <EVENT_USB_Host_DeviceEnumerationComplete+0x60>
     456:	ed b7       	in	r30, 0x3d	; 61
     458:	fe b7       	in	r31, 0x3e	; 62
     45a:	31 96       	adiw	r30, 0x01	; 1
     45c:	23 e7       	ldi	r18, 0x73	; 115
     45e:	31 e0       	ldi	r19, 0x01	; 1
     460:	ad b7       	in	r26, 0x3d	; 61
     462:	be b7       	in	r27, 0x3e	; 62
     464:	12 96       	adiw	r26, 0x02	; 2
     466:	3c 93       	st	X, r19
     468:	2e 93       	st	-X, r18
     46a:	11 97       	sbiw	r26, 0x01	; 1
     46c:	82 83       	std	Z+2, r24	; 0x02
     46e:	e3 cf       	rjmp	.-58     	; 0x436 <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
     470:	86 eb       	ldi	r24, 0xB6	; 182

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("Still Image Device Enumerated.\r\n"));
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	0e 94 c6 0c 	call	0x198c	; 0x198c <puts_P>
     478:	80 e6       	ldi	r24, 0x60	; 96
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     47a:	82 df       	rcall	.-252    	; 0x380 <LEDs_SetAllLEDs>
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <EVENT_USB_Host_HostError>:
}
     480:	cf 93       	push	r28
     482:	df 93       	push	r29

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     484:	0f 92       	push	r0
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     48a:	89 83       	std	Y+1, r24	; 0x01
     48c:	00 d7       	rcall	.+3584   	; 0x128e <USB_Disable>
     48e:	00 d0       	rcall	.+0      	; 0x490 <EVENT_USB_Host_HostError+0x10>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     490:	00 d0       	rcall	.+0      	; 0x492 <EVENT_USB_Host_HostError+0x12>
     492:	ed b7       	in	r30, 0x3d	; 61
     494:	fe b7       	in	r31, 0x3e	; 62
     496:	31 96       	adiw	r30, 0x01	; 1
     498:	27 ed       	ldi	r18, 0xD7	; 215
     49a:	31 e0       	ldi	r19, 0x01	; 1
     49c:	ad b7       	in	r26, 0x3d	; 61
     49e:	be b7       	in	r27, 0x3e	; 62
     4a0:	12 96       	adiw	r26, 0x02	; 2
     4a2:	3c 93       	st	X, r19
     4a4:	2e 93       	st	-X, r18
     4a6:	11 97       	sbiw	r26, 0x01	; 1
     4a8:	89 81       	ldd	r24, Y+1	; 0x01
     4aa:	82 83       	std	Z+2, r24	; 0x02
     4ac:	13 82       	std	Z+3, r1	; 0x03
     4ae:	0e 94 a7 0c 	call	0x194e	; 0x194e <printf_P>
     4b2:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	80 e9       	ldi	r24, 0x90	; 144
     4bc:	61 df       	rcall	.-318    	; 0x380 <LEDs_SetAllLEDs>
     4be:	ff cf       	rjmp	.-2      	; 0x4be <EVENT_USB_Host_HostError+0x3e>

000004c0 <EVENT_USB_Host_DeviceEnumerationFailed>:
     4c0:	90 91 6f 01 	lds	r25, 0x016F
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4c4:	2d b7       	in	r18, 0x3d	; 61
     4c6:	3e b7       	in	r19, 0x3e	; 62
     4c8:	28 50       	subi	r18, 0x08	; 8
     4ca:	30 40       	sbci	r19, 0x00	; 0
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	f8 94       	cli
     4d0:	3e bf       	out	0x3e, r19	; 62
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	2d bf       	out	0x3d, r18	; 61
     4d6:	ed b7       	in	r30, 0x3d	; 61
     4d8:	fe b7       	in	r31, 0x3e	; 62
     4da:	31 96       	adiw	r30, 0x01	; 1
     4dc:	26 e0       	ldi	r18, 0x06	; 6
     4de:	32 e0       	ldi	r19, 0x02	; 2
     4e0:	ad b7       	in	r26, 0x3d	; 61
     4e2:	be b7       	in	r27, 0x3e	; 62
     4e4:	12 96       	adiw	r26, 0x02	; 2
     4e6:	3c 93       	st	X, r19
     4e8:	2e 93       	st	-X, r18
     4ea:	11 97       	sbiw	r26, 0x01	; 1
     4ec:	82 83       	std	Z+2, r24	; 0x02
     4ee:	13 82       	std	Z+3, r1	; 0x03
     4f0:	64 83       	std	Z+4, r22	; 0x04
     4f2:	15 82       	std	Z+5, r1	; 0x05
     4f4:	96 83       	std	Z+6, r25	; 0x06
     4f6:	17 82       	std	Z+7, r1	; 0x07
     4f8:	0e 94 a7 0c 	call	0x194e	; 0x194e <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4fc:	2d b7       	in	r18, 0x3d	; 61
     4fe:	3e b7       	in	r19, 0x3e	; 62
     500:	28 5f       	subi	r18, 0xF8	; 248
     502:	3f 4f       	sbci	r19, 0xFF	; 255
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	f8 94       	cli
     508:	3e bf       	out	0x3e, r19	; 62
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	2d bf       	out	0x3d, r18	; 61
     50e:	80 e9       	ldi	r24, 0x90	; 144
     510:	37 cf       	rjmp	.-402    	; 0x380 <LEDs_SetAllLEDs>

00000512 <UnicodeToASCII>:
     512:	fc 01       	movw	r30, r24
}
     514:	91 91       	ld	r25, Z+
{
	/* Get the number of characters in the string, skip to the start of the string data */
	uint8_t CharactersRemaining = *(UnicodeString++);

	/* Loop through the entire unicode string */
	while (CharactersRemaining--)
     516:	89 2f       	mov	r24, r25
     518:	db 01       	movw	r26, r22
     51a:	04 c0       	rjmp	.+8      	; 0x524 <UnicodeToASCII+0x12>
	{
		/* Load in the next unicode character (only the lower byte, as only Unicode coded ASCII is supported) */
		*(Buffer++) = *UnicodeString;
     51c:	20 81       	ld	r18, Z
     51e:	2d 93       	st	X+, r18

		/* Jump to the next unicode character */
		UnicodeString += 2;
     520:	32 96       	adiw	r30, 0x02	; 2
     522:	81 50       	subi	r24, 0x01	; 1
{
	/* Get the number of characters in the string, skip to the start of the string data */
	uint8_t CharactersRemaining = *(UnicodeString++);

	/* Loop through the entire unicode string */
	while (CharactersRemaining--)
     524:	88 23       	and	r24, r24
     526:	d1 f7       	brne	.-12     	; 0x51c <UnicodeToASCII+0xa>
		/* Jump to the next unicode character */
		UnicodeString += 2;
	}

	/* Null terminate the string */
	*Buffer = 0;
     528:	69 0f       	add	r22, r25
     52a:	71 1d       	adc	r23, r1
     52c:	fb 01       	movw	r30, r22
     52e:	10 82       	st	Z, r1
}
     530:	08 95       	ret

00000532 <ShowCommandError>:
 *  \param[in] ResponseCodeError  Indicates if the error is due to a command failed indication from the device, or a communication failure
 */
void ShowCommandError(uint8_t ErrorCode,
                      bool ResponseCodeError)
{
	const char* FailureType = ((ResponseCodeError) ? PSTR("Response Code != OK") : PSTR("Transaction Fail"));
     532:	66 23       	and	r22, r22
     534:	19 f0       	breq	.+6      	; 0x53c <ShowCommandError+0xa>
     536:	2a e1       	ldi	r18, 0x1A	; 26
     538:	33 e0       	ldi	r19, 0x03	; 3
     53a:	02 c0       	rjmp	.+4      	; 0x540 <ShowCommandError+0xe>
     53c:	2e e2       	ldi	r18, 0x2E	; 46
     53e:	33 e0       	ldi	r19, 0x03	; 3

	printf_P(PSTR(ESC_FG_RED "Command Error (%S).\r\n"
     540:	00 d0       	rcall	.+0      	; 0x542 <ShowCommandError+0x10>
     542:	00 d0       	rcall	.+0      	; 0x544 <ShowCommandError+0x12>
     544:	00 d0       	rcall	.+0      	; 0x546 <ShowCommandError+0x14>
     546:	ed b7       	in	r30, 0x3d	; 61
     548:	fe b7       	in	r31, 0x3e	; 62
     54a:	31 96       	adiw	r30, 0x01	; 1
     54c:	47 ee       	ldi	r20, 0xE7	; 231
     54e:	52 e0       	ldi	r21, 0x02	; 2
     550:	ad b7       	in	r26, 0x3d	; 61
     552:	be b7       	in	r27, 0x3e	; 62
     554:	12 96       	adiw	r26, 0x02	; 2
     556:	5c 93       	st	X, r21
     558:	4e 93       	st	-X, r20
     55a:	11 97       	sbiw	r26, 0x01	; 1
     55c:	33 83       	std	Z+3, r19	; 0x03
     55e:	22 83       	std	Z+2, r18	; 0x02
     560:	84 83       	std	Z+4, r24	; 0x04
     562:	15 82       	std	Z+5, r1	; 0x05
     564:	0e 94 a7 0c 	call	0x194e	; 0x194e <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), FailureType, ErrorCode);

	/* Indicate error via status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     568:	8d b7       	in	r24, 0x3d	; 61
     56a:	9e b7       	in	r25, 0x3e	; 62
     56c:	06 96       	adiw	r24, 0x06	; 6
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	f8 94       	cli
     572:	9e bf       	out	0x3e, r25	; 62
     574:	0f be       	out	0x3f, r0	; 63
     576:	8d bf       	out	0x3d, r24	; 61
     578:	80 e9       	ldi	r24, 0x90	; 144
     57a:	02 cf       	rjmp	.-508    	; 0x380 <LEDs_SetAllLEDs>

0000057c <StillImageHost_Task>:
     57c:	2f 92       	push	r2
}
     57e:	3f 92       	push	r3

/** Task to print device information through the serial port, and open/close a test PIMA session with the
 *  attached Still Image device.
 */
void StillImageHost_Task(void)
{
     580:	5f 92       	push	r5
     582:	6f 92       	push	r6
     584:	7f 92       	push	r7
     586:	8f 92       	push	r8
     588:	9f 92       	push	r9
     58a:	af 92       	push	r10
     58c:	bf 92       	push	r11
     58e:	cf 92       	push	r12
     590:	df 92       	push	r13
     592:	ef 92       	push	r14
     594:	ff 92       	push	r15
     596:	0f 93       	push	r16
     598:	1f 93       	push	r17
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	00 d0       	rcall	.+0      	; 0x5a0 <StillImageHost_Task+0x24>
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
	puts_P(PSTR("Done.\r\n"));

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
}
     5a4:	2d b7       	in	r18, 0x3d	; 61
     5a6:	3e b7       	in	r19, 0x3e	; 62
     5a8:	3a 83       	std	Y+2, r19	; 0x02
     5aa:	29 83       	std	Y+1, r18	; 0x01

/** Task to print device information through the serial port, and open/close a test PIMA session with the
 *  attached Still Image device.
 */
void StillImageHost_Task(void)
{
     5ac:	6d b6       	in	r6, 0x3d	; 61
     5ae:	5e b6       	in	r5, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     5b0:	80 91 6f 01 	lds	r24, 0x016F
     5b4:	8b 30       	cpi	r24, 0x0B	; 11
     5b6:	09 f0       	breq	.+2      	; 0x5ba <StillImageHost_Task+0x3e>
     5b8:	a0 c1       	rjmp	.+832    	; 0x8fa <StillImageHost_Task+0x37e>
	  return;

	uint8_t ErrorCode;

	/* Indicate device busy via the status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     5ba:	80 e2       	ldi	r24, 0x20	; 32
     5bc:	e1 de       	rcall	.-574    	; 0x380 <LEDs_SetAllLEDs>
     5be:	8c e5       	ldi	r24, 0x5C	; 92

	puts_P(PSTR("Retrieving Device Info...\r\n"));
     5c0:	92 e0       	ldi	r25, 0x02	; 2
     5c2:	0e 94 c6 0c 	call	0x198c	; 0x198c <puts_P>
     5c6:	58 e1       	ldi	r21, 0x18	; 24

	PIMA_SendBlock = (PIMA_Container_t)
     5c8:	75 2e       	mov	r7, r21
     5ca:	65 e3       	ldi	r22, 0x35	; 53
     5cc:	26 2e       	mov	r2, r22
     5ce:	61 e0       	ldi	r22, 0x01	; 1
     5d0:	36 2e       	mov	r3, r22
     5d2:	d1 01       	movw	r26, r2
     5d4:	e7 2d       	mov	r30, r7
     5d6:	1d 92       	st	X+, r1
     5d8:	ea 95       	dec	r30
     5da:	e9 f7       	brne	.-6      	; 0x5d6 <StillImageHost_Task+0x5a>
     5dc:	8c e0       	ldi	r24, 0x0C	; 12
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	a0 e0       	ldi	r26, 0x00	; 0
     5e2:	b0 e0       	ldi	r27, 0x00	; 0
     5e4:	80 93 35 01 	sts	0x0135, r24
     5e8:	90 93 36 01 	sts	0x0136, r25
     5ec:	a0 93 37 01 	sts	0x0137, r26
     5f0:	b0 93 38 01 	sts	0x0138, r27
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	90 93 3a 01 	sts	0x013A, r25
     5fc:	80 93 39 01 	sts	0x0139, r24
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	90 e1       	ldi	r25, 0x10	; 16
     604:	90 93 3c 01 	sts	0x013C, r25
     608:	80 93 3b 01 	sts	0x013B, r24
     60c:	60 d2       	rcall	.+1216   	; 0xace <SImage_SendBlockHeader>
			.TransactionID = 0x00000000,
			.Params        = {},
		};

	/* Send the GETDEVICEINFO block */
	SImage_SendBlockHeader();
     60e:	8a d2       	rcall	.+1300   	; 0xb24 <SImage_ReceiveBlockHeader>
     610:	88 23       	and	r24, r24

	/* Receive the response data block */
	if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     612:	09 f0       	breq	.+2      	; 0x616 <StillImageHost_Task+0x9a>
     614:	55 c1       	rjmp	.+682    	; 0x8c0 <StillImageHost_Task+0x344>
     616:	60 91 4d 01 	lds	r22, 0x014D
     61a:	70 91 4e 01 	lds	r23, 0x014E
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Calculate the size of the returned device info data structure */
	uint16_t DeviceInfoSize = (PIMA_ReceivedBlock.DataLength - PIMA_COMMAND_SIZE(0));
     61e:	6c 50       	subi	r22, 0x0C	; 12
     620:	70 40       	sbci	r23, 0x00	; 0
     622:	2d b7       	in	r18, 0x3d	; 61
     624:	3e b7       	in	r19, 0x3e	; 62
     626:	26 1b       	sub	r18, r22

	/* Create a buffer large enough to hold the entire device info */
	uint8_t DeviceInfo[DeviceInfoSize];
     628:	37 0b       	sbc	r19, r23
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	f8 94       	cli
     62e:	3e bf       	out	0x3e, r19	; 62
     630:	0f be       	out	0x3f, r0	; 63
     632:	2d bf       	out	0x3d, r18	; 61
     634:	0d b7       	in	r16, 0x3d	; 61
     636:	1e b7       	in	r17, 0x3e	; 62
     638:	0f 5f       	subi	r16, 0xFF	; 255
     63a:	1f 4f       	sbci	r17, 0xFF	; 255
     63c:	c8 01       	movw	r24, r16
     63e:	eb d2       	rcall	.+1494   	; 0xc16 <SImage_ReadData>
     640:	80 91 a6 00 	lds	r24, 0x00A6

	/* Read in the data block data (containing device info) */
	SImage_ReadData(DeviceInfo, DeviceInfoSize);
     644:	8e 77       	andi	r24, 0x7E	; 126
     646:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     64a:	d8 01       	movw	r26, r16
     64c:	18 96       	adiw	r26, 0x08	; 8
     64e:	ec 91       	ld	r30, X
     650:	f0 e0       	ldi	r31, 0x00	; 0
	/* Create a pointer for walking through the info dataset */
	uint8_t* DeviceInfoPos = DeviceInfo;

	/* Skip over the data before the unicode device information strings */
	DeviceInfoPos +=  8;                                          // Skip to VendorExtensionDesc String
	DeviceInfoPos += (1 + UNICODE_STRING_LENGTH(*DeviceInfoPos)); // Skip over VendorExtensionDesc String
     652:	ee 0f       	add	r30, r30
     654:	ff 1f       	adc	r31, r31
     656:	e0 0f       	add	r30, r16
     658:	f1 1f       	adc	r31, r17
     65a:	39 96       	adiw	r30, 0x09	; 9
     65c:	a2 81       	ldd	r26, Z+2	; 0x02
     65e:	b3 81       	ldd	r27, Z+3	; 0x03
     660:	aa 0f       	add	r26, r26
     662:	bb 1f       	adc	r27, r27
	DeviceInfoPos +=  2;                                          // Skip over FunctionalMode
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Supported Operations Array
     664:	ae 0f       	add	r26, r30
     666:	bf 1f       	adc	r27, r31
     668:	16 96       	adiw	r26, 0x06	; 6
     66a:	ed 91       	ld	r30, X+
     66c:	fc 91       	ld	r31, X
     66e:	11 97       	sbiw	r26, 0x01	; 1
     670:	ee 0f       	add	r30, r30
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Supported Events Array
     672:	ff 1f       	adc	r31, r31
     674:	34 96       	adiw	r30, 0x04	; 4
     676:	ea 0f       	add	r30, r26
     678:	fb 1f       	adc	r31, r27
     67a:	a0 81       	ld	r26, Z
     67c:	b1 81       	ldd	r27, Z+1	; 0x01
     67e:	aa 0f       	add	r26, r26
     680:	bb 1f       	adc	r27, r27
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Supported Device Properties Array
     682:	14 96       	adiw	r26, 0x04	; 4
     684:	ae 0f       	add	r26, r30
     686:	bf 1f       	adc	r27, r31
     688:	ed 91       	ld	r30, X+
     68a:	fc 91       	ld	r31, X
     68c:	11 97       	sbiw	r26, 0x01	; 1
     68e:	ee 0f       	add	r30, r30
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Capture Formats Array
     690:	ff 1f       	adc	r31, r31
     692:	34 96       	adiw	r30, 0x04	; 4
     694:	ea 0f       	add	r30, r26
     696:	fb 1f       	adc	r31, r27
     698:	e0 80       	ld	r14, Z
     69a:	f1 80       	ldd	r15, Z+1	; 0x01
     69c:	ee 0c       	add	r14, r14
     69e:	ff 1c       	adc	r15, r15
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Image Formats Array
     6a0:	24 e0       	ldi	r18, 0x04	; 4
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	e2 0e       	add	r14, r18
     6a6:	f3 1e       	adc	r15, r19
     6a8:	ee 0e       	add	r14, r30
     6aa:	ff 1e       	adc	r15, r31
     6ac:	d7 01       	movw	r26, r14
     6ae:	8c 91       	ld	r24, X
     6b0:	ed b7       	in	r30, 0x3d	; 61
     6b2:	fe b7       	in	r31, 0x3e	; 62

	/* Extract and convert the Manufacturer Unicode string to ASCII and print it through the USART */
	char Manufacturer[*DeviceInfoPos];
     6b4:	e8 1b       	sub	r30, r24
     6b6:	f1 09       	sbc	r31, r1
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	fe bf       	out	0x3e, r31	; 62
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	ed bf       	out	0x3d, r30	; 61
     6c2:	0d b7       	in	r16, 0x3d	; 61
     6c4:	1e b7       	in	r17, 0x3e	; 62
     6c6:	0f 5f       	subi	r16, 0xFF	; 255
     6c8:	1f 4f       	sbci	r17, 0xFF	; 255
     6ca:	c7 01       	movw	r24, r14
     6cc:	b8 01       	movw	r22, r16
     6ce:	21 df       	rcall	.-446    	; 0x512 <UnicodeToASCII>
     6d0:	00 d0       	rcall	.+0      	; 0x6d2 <StillImageHost_Task+0x156>
	UnicodeToASCII(DeviceInfoPos, Manufacturer);
     6d2:	00 d0       	rcall	.+0      	; 0x6d4 <StillImageHost_Task+0x158>
     6d4:	ed b7       	in	r30, 0x3d	; 61
     6d6:	fe b7       	in	r31, 0x3e	; 62
     6d8:	31 96       	adiw	r30, 0x01	; 1
	printf_P(PSTR("   Manufacturer: %s\r\n"), Manufacturer);
     6da:	88 e7       	ldi	r24, 0x78	; 120
     6dc:	92 e0       	ldi	r25, 0x02	; 2
     6de:	ad b7       	in	r26, 0x3d	; 61
     6e0:	be b7       	in	r27, 0x3e	; 62
     6e2:	12 96       	adiw	r26, 0x02	; 2
     6e4:	9c 93       	st	X, r25
     6e6:	8e 93       	st	-X, r24
     6e8:	11 97       	sbiw	r26, 0x01	; 1
     6ea:	02 83       	std	Z+2, r16	; 0x02
     6ec:	13 83       	std	Z+3, r17	; 0x03
     6ee:	0e 94 a7 0c 	call	0x194e	; 0x194e <printf_P>
     6f2:	f7 01       	movw	r30, r14
     6f4:	c0 80       	ld	r12, Z
     6f6:	dd 24       	eor	r13, r13
     6f8:	cc 0c       	add	r12, r12
     6fa:	dd 1c       	adc	r13, r13

	DeviceInfoPos += 1 + UNICODE_STRING_LENGTH(*DeviceInfoPos);   // Skip over Manufacturer String
     6fc:	08 94       	sec
     6fe:	c1 1c       	adc	r12, r1
     700:	d1 1c       	adc	r13, r1
     702:	ce 0c       	add	r12, r14
     704:	df 1c       	adc	r13, r15
     706:	d6 01       	movw	r26, r12
     708:	8c 91       	ld	r24, X
     70a:	0f 90       	pop	r0
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0

	/* Extract and convert the Model Unicode string to ASCII and print it through the USART */
	char Model[*DeviceInfoPos];
     710:	0f 90       	pop	r0
     712:	ed b7       	in	r30, 0x3d	; 61
     714:	fe b7       	in	r31, 0x3e	; 62
     716:	e8 1b       	sub	r30, r24
     718:	f1 09       	sbc	r31, r1
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	fe bf       	out	0x3e, r31	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	ed bf       	out	0x3d, r30	; 61
     724:	0d b7       	in	r16, 0x3d	; 61
     726:	1e b7       	in	r17, 0x3e	; 62
     728:	0f 5f       	subi	r16, 0xFF	; 255
     72a:	1f 4f       	sbci	r17, 0xFF	; 255
     72c:	c6 01       	movw	r24, r12
     72e:	b8 01       	movw	r22, r16
     730:	f0 de       	rcall	.-544    	; 0x512 <UnicodeToASCII>
     732:	00 d0       	rcall	.+0      	; 0x734 <StillImageHost_Task+0x1b8>
     734:	00 d0       	rcall	.+0      	; 0x736 <StillImageHost_Task+0x1ba>
	UnicodeToASCII(DeviceInfoPos, Model);
     736:	ed b7       	in	r30, 0x3d	; 61
     738:	fe b7       	in	r31, 0x3e	; 62
     73a:	31 96       	adiw	r30, 0x01	; 1
     73c:	8e e8       	ldi	r24, 0x8E	; 142
	printf_P(PSTR("   Model: %s\r\n"), Model);
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	ad b7       	in	r26, 0x3d	; 61
     742:	be b7       	in	r27, 0x3e	; 62
     744:	12 96       	adiw	r26, 0x02	; 2
     746:	9c 93       	st	X, r25
     748:	8e 93       	st	-X, r24
     74a:	11 97       	sbiw	r26, 0x01	; 1
     74c:	02 83       	std	Z+2, r16	; 0x02
     74e:	13 83       	std	Z+3, r17	; 0x03
     750:	0e 94 a7 0c 	call	0x194e	; 0x194e <printf_P>
     754:	f6 01       	movw	r30, r12
     756:	80 81       	ld	r24, Z
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	88 0f       	add	r24, r24
     75c:	99 1f       	adc	r25, r25
     75e:	01 96       	adiw	r24, 0x01	; 1

	DeviceInfoPos += 1 + UNICODE_STRING_LENGTH(*DeviceInfoPos);   // Skip over Model String
     760:	8c 0d       	add	r24, r12
     762:	9d 1d       	adc	r25, r13
     764:	dc 01       	movw	r26, r24
     766:	2c 91       	ld	r18, X
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0

	/* Extract and convert the Device Version Unicode string to ASCII and print it through the USART */
	char DeviceVersion[*DeviceInfoPos];
     770:	ed b7       	in	r30, 0x3d	; 61
     772:	fe b7       	in	r31, 0x3e	; 62
     774:	e2 1b       	sub	r30, r18
     776:	f1 09       	sbc	r31, r1
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	fe bf       	out	0x3e, r31	; 62
     77e:	0f be       	out	0x3f, r0	; 63
     780:	ed bf       	out	0x3d, r30	; 61
     782:	0d b7       	in	r16, 0x3d	; 61
     784:	1e b7       	in	r17, 0x3e	; 62
     786:	0f 5f       	subi	r16, 0xFF	; 255
     788:	1f 4f       	sbci	r17, 0xFF	; 255
     78a:	b8 01       	movw	r22, r16
     78c:	c2 de       	rcall	.-636    	; 0x512 <UnicodeToASCII>
     78e:	00 d0       	rcall	.+0      	; 0x790 <StillImageHost_Task+0x214>
     790:	00 d0       	rcall	.+0      	; 0x792 <StillImageHost_Task+0x216>
     792:	ed b7       	in	r30, 0x3d	; 61
     794:	fe b7       	in	r31, 0x3e	; 62
	UnicodeToASCII(DeviceInfoPos, DeviceVersion);
     796:	31 96       	adiw	r30, 0x01	; 1
     798:	8d e9       	ldi	r24, 0x9D	; 157
     79a:	92 e0       	ldi	r25, 0x02	; 2
	printf_P(PSTR("   Device Version: %s\r\n"), DeviceVersion);
     79c:	ad b7       	in	r26, 0x3d	; 61
     79e:	be b7       	in	r27, 0x3e	; 62
     7a0:	12 96       	adiw	r26, 0x02	; 2
     7a2:	9c 93       	st	X, r25
     7a4:	8e 93       	st	-X, r24
     7a6:	11 97       	sbiw	r26, 0x01	; 1
     7a8:	02 83       	std	Z+2, r16	; 0x02
     7aa:	13 83       	std	Z+3, r17	; 0x03
     7ac:	0e 94 a7 0c 	call	0x194e	; 0x194e <printf_P>
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	b5 d1       	rcall	.+874    	; 0xb24 <SImage_ReceiveBlockHeader>
     7ba:	88 23       	and	r24, r24
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <StillImageHost_Task+0x244>

	/* Receive the final response block from the device */
	if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     7be:	80 c0       	rjmp	.+256    	; 0x8c0 <StillImageHost_Task+0x344>
     7c0:	80 91 51 01 	lds	r24, 0x0151
     7c4:	90 91 52 01 	lds	r25, 0x0152
     7c8:	83 30       	cpi	r24, 0x03	; 3
     7ca:	91 05       	cpc	r25, r1
     7cc:	09 f0       	breq	.+2      	; 0x7d0 <StillImageHost_Task+0x254>
     7ce:	88 c0       	rjmp	.+272    	; 0x8e0 <StillImageHost_Task+0x364>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Verify that the command completed successfully */
	if ((PIMA_ReceivedBlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMA_ReceivedBlock.Code != PIMA_RESPONSE_OK))
     7d0:	00 91 53 01 	lds	r16, 0x0153
     7d4:	10 91 54 01 	lds	r17, 0x0154
     7d8:	01 30       	cpi	r16, 0x01	; 1
     7da:	11 05       	cpc	r17, r1
     7dc:	09 f0       	breq	.+2      	; 0x7e0 <StillImageHost_Task+0x264>
     7de:	80 c0       	rjmp	.+256    	; 0x8e0 <StillImageHost_Task+0x364>
     7e0:	85 eb       	ldi	r24, 0xB5	; 181
     7e2:	92 e0       	ldi	r25, 0x02	; 2
     7e4:	0e 94 c6 0c 	call	0x198c	; 0x198c <puts_P>
     7e8:	f1 01       	movw	r30, r2
     7ea:	27 2d       	mov	r18, r7
     7ec:	11 92       	st	Z+, r1
     7ee:	2a 95       	dec	r18
		ShowCommandError(PIMA_ReceivedBlock.Code, true);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Opening Session...\r\n"));
     7f0:	e9 f7       	brne	.-6      	; 0x7ec <StillImageHost_Task+0x270>
     7f2:	80 e1       	ldi	r24, 0x10	; 16
     7f4:	88 2e       	mov	r8, r24
     7f6:	91 2c       	mov	r9, r1

	PIMA_SendBlock = (PIMA_Container_t)
     7f8:	a1 2c       	mov	r10, r1
     7fa:	b1 2c       	mov	r11, r1
     7fc:	80 92 35 01 	sts	0x0135, r8
     800:	90 92 36 01 	sts	0x0136, r9
     804:	a0 92 37 01 	sts	0x0137, r10
     808:	b0 92 38 01 	sts	0x0138, r11
     80c:	10 93 3a 01 	sts	0x013A, r17
     810:	00 93 39 01 	sts	0x0139, r16
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	90 e1       	ldi	r25, 0x10	; 16
     818:	90 93 3c 01 	sts	0x013C, r25
     81c:	80 93 3b 01 	sts	0x013B, r24
     820:	21 e0       	ldi	r18, 0x01	; 1
     822:	c2 2e       	mov	r12, r18
     824:	d1 2c       	mov	r13, r1
     826:	e1 2c       	mov	r14, r1
     828:	f1 2c       	mov	r15, r1
     82a:	c0 92 41 01 	sts	0x0141, r12
     82e:	d0 92 42 01 	sts	0x0142, r13
     832:	e0 92 43 01 	sts	0x0143, r14
     836:	f0 92 44 01 	sts	0x0144, r15
     83a:	49 d1       	rcall	.+658    	; 0xace <SImage_SendBlockHeader>
     83c:	73 d1       	rcall	.+742    	; 0xb24 <SImage_ReceiveBlockHeader>
     83e:	88 23       	and	r24, r24
     840:	09 f0       	breq	.+2      	; 0x844 <StillImageHost_Task+0x2c8>
     842:	3e c0       	rjmp	.+124    	; 0x8c0 <StillImageHost_Task+0x344>
     844:	80 91 51 01 	lds	r24, 0x0151
     848:	90 91 52 01 	lds	r25, 0x0152
			.TransactionID = 0x00000000,
			.Params        = {0x00000001},
		};

	/* Send the OPENSESSION block, open a session with an ID of 0x0001 */
	SImage_SendBlockHeader();
     84c:	83 30       	cpi	r24, 0x03	; 3

	/* Receive the response block from the device */
	if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     84e:	91 05       	cpc	r25, r1
     850:	09 f0       	breq	.+2      	; 0x854 <StillImageHost_Task+0x2d8>
     852:	46 c0       	rjmp	.+140    	; 0x8e0 <StillImageHost_Task+0x364>
     854:	00 91 53 01 	lds	r16, 0x0153
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Verify that the command completed successfully */
	if ((PIMA_ReceivedBlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMA_ReceivedBlock.Code != PIMA_RESPONSE_OK))
     858:	10 91 54 01 	lds	r17, 0x0154
     85c:	01 30       	cpi	r16, 0x01	; 1
     85e:	11 05       	cpc	r17, r1
     860:	09 f0       	breq	.+2      	; 0x864 <StillImageHost_Task+0x2e8>
     862:	3e c0       	rjmp	.+124    	; 0x8e0 <StillImageHost_Task+0x364>
     864:	8a ec       	ldi	r24, 0xCA	; 202
     866:	92 e0       	ldi	r25, 0x02	; 2
     868:	0e 94 c6 0c 	call	0x198c	; 0x198c <puts_P>
     86c:	d1 01       	movw	r26, r2
     86e:	1d 92       	st	X+, r1
     870:	7a 94       	dec	r7
     872:	e9 f7       	brne	.-6      	; 0x86e <StillImageHost_Task+0x2f2>
     874:	80 92 35 01 	sts	0x0135, r8
		ShowCommandError(PIMA_ReceivedBlock.Code, true);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Closing Session...\r\n"));
     878:	90 92 36 01 	sts	0x0136, r9
     87c:	a0 92 37 01 	sts	0x0137, r10

	PIMA_SendBlock = (PIMA_Container_t)
     880:	b0 92 38 01 	sts	0x0138, r11
     884:	10 93 3a 01 	sts	0x013A, r17
     888:	00 93 39 01 	sts	0x0139, r16
     88c:	83 e0       	ldi	r24, 0x03	; 3
     88e:	90 e1       	ldi	r25, 0x10	; 16
     890:	90 93 3c 01 	sts	0x013C, r25
     894:	80 93 3b 01 	sts	0x013B, r24
     898:	c0 92 3d 01 	sts	0x013D, r12
     89c:	d0 92 3e 01 	sts	0x013E, r13
     8a0:	e0 92 3f 01 	sts	0x013F, r14
     8a4:	f0 92 40 01 	sts	0x0140, r15
     8a8:	c0 92 41 01 	sts	0x0141, r12
     8ac:	d0 92 42 01 	sts	0x0142, r13
     8b0:	e0 92 43 01 	sts	0x0143, r14
     8b4:	f0 92 44 01 	sts	0x0144, r15
     8b8:	0a d1       	rcall	.+532    	; 0xace <SImage_SendBlockHeader>
     8ba:	34 d1       	rcall	.+616    	; 0xb24 <SImage_ReceiveBlockHeader>
     8bc:	88 23       	and	r24, r24
     8be:	11 f0       	breq	.+4      	; 0x8c4 <StillImageHost_Task+0x348>
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	11 c0       	rjmp	.+34     	; 0x8e6 <StillImageHost_Task+0x36a>
     8c4:	80 91 51 01 	lds	r24, 0x0151
     8c8:	90 91 52 01 	lds	r25, 0x0152
			.TransactionID = 0x00000001,
			.Params        = {0x00000001},
		};

	/* Send the CLOSESESSION block, close the session with an ID of 0x0001 */
	SImage_SendBlockHeader();
     8cc:	83 30       	cpi	r24, 0x03	; 3
     8ce:	91 05       	cpc	r25, r1

	/* Receive the response block from the device */
	if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     8d0:	39 f4       	brne	.+14     	; 0x8e0 <StillImageHost_Task+0x364>
     8d2:	80 91 53 01 	lds	r24, 0x0153
     8d6:	90 91 54 01 	lds	r25, 0x0154
	{
		ShowCommandError(ErrorCode, false);
     8da:	81 30       	cpi	r24, 0x01	; 1
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Verify that the command completed successfully */
	if ((PIMA_ReceivedBlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMA_ReceivedBlock.Code != PIMA_RESPONSE_OK))
     8dc:	91 05       	cpc	r25, r1
     8de:	29 f0       	breq	.+10     	; 0x8ea <StillImageHost_Task+0x36e>
     8e0:	80 91 53 01 	lds	r24, 0x0153
     8e4:	61 e0       	ldi	r22, 0x01	; 1
     8e6:	25 de       	rcall	.-950    	; 0x532 <ShowCommandError>
     8e8:	06 c0       	rjmp	.+12     	; 0x8f6 <StillImageHost_Task+0x37a>
     8ea:	8f ed       	ldi	r24, 0xDF	; 223
     8ec:	92 e0       	ldi	r25, 0x02	; 2
     8ee:	0e 94 c6 0c 	call	0x198c	; 0x198c <puts_P>
     8f2:	80 e6       	ldi	r24, 0x60	; 96
     8f4:	45 dd       	rcall	.-1398   	; 0x380 <LEDs_SetAllLEDs>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
	{
		ShowCommandError(PIMA_ReceivedBlock.Code, true);
     8f8:	a9 d7       	rcall	.+3922   	; 0x184c <USB_Host_SetDeviceConfiguration>
     8fa:	6d be       	out	0x3d, r6	; 61
     8fc:	5e be       	out	0x3e, r5	; 62
     8fe:	29 81       	ldd	r18, Y+1	; 0x01
     900:	3a 81       	ldd	r19, Y+2	; 0x02
     902:	0f b6       	in	r0, 0x3f	; 63
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Done.\r\n"));
     904:	f8 94       	cli
     906:	3e bf       	out	0x3e, r19	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	2d bf       	out	0x3d, r18	; 61

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	df 91       	pop	r29
	USB_Host_SetDeviceConfiguration(0);
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	ff 90       	pop	r15
     91a:	ef 90       	pop	r14
}
     91c:	df 90       	pop	r13
     91e:	cf 90       	pop	r12
     920:	bf 90       	pop	r11
     922:	af 90       	pop	r10
     924:	9f 90       	pop	r9
     926:	8f 90       	pop	r8
     928:	7f 90       	pop	r7
     92a:	6f 90       	pop	r6
     92c:	5f 90       	pop	r5
     92e:	3f 90       	pop	r3
     930:	2f 90       	pop	r2
     932:	08 95       	ret

00000934 <main>:
     934:	2a dd       	rcall	.-1452   	; 0x38a <SetupHardware>
     936:	88 e9       	ldi	r24, 0x98	; 152
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 c6 0c 	call	0x198c	; 0x198c <puts_P>
     93e:	80 e1       	ldi	r24, 0x10	; 16
     940:	1f dd       	rcall	.-1474   	; 0x380 <LEDs_SetAllLEDs>
     942:	78 94       	sei
     944:	1b de       	rcall	.-970    	; 0x57c <StillImageHost_Task>
     946:	be d7       	rcall	.+3964   	; 0x18c4 <USB_USBTask>
     948:	fd cf       	rjmp	.-6      	; 0x944 <main+0x10>

0000094a <DComp_NextStillImageInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Still Image Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextStillImageInterface(void* CurrentDescriptor)
{
     94a:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     94c:	81 81       	ldd	r24, Z+1	; 0x01
     94e:	84 30       	cpi	r24, 0x04	; 4
     950:	49 f4       	brne	.+18     	; 0x964 <DComp_NextStillImageInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the descriptor class, subclass and protocol, break out if correct interface found */
		if ((Interface->Class    == SI_CSCP_StillImageClass)    &&
     952:	85 81       	ldd	r24, Z+5	; 0x05
     954:	86 30       	cpi	r24, 0x06	; 6
     956:	31 f4       	brne	.+12     	; 0x964 <DComp_NextStillImageInterface+0x1a>
     958:	86 81       	ldd	r24, Z+6	; 0x06
     95a:	81 30       	cpi	r24, 0x01	; 1
     95c:	19 f4       	brne	.+6      	; 0x964 <DComp_NextStillImageInterface+0x1a>
		    (Interface->SubClass == SI_CSCP_StillImageSubclass) &&
     95e:	87 81       	ldd	r24, Z+7	; 0x07
     960:	81 30       	cpi	r24, 0x01	; 1
     962:	11 f0       	breq	.+4      	; 0x968 <DComp_NextStillImageInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     964:	82 e0       	ldi	r24, 0x02	; 2
     966:	08 95       	ret
		/* Check the descriptor class, subclass and protocol, break out if correct interface found */
		if ((Interface->Class    == SI_CSCP_StillImageClass)    &&
		    (Interface->SubClass == SI_CSCP_StillImageSubclass) &&
		    (Interface->Protocol == SI_CSCP_BulkOnlyProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     968:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     96a:	08 95       	ret

0000096c <DComp_NextStillImageInterfaceDataEndpoint>:
 *  search if another interface descriptor is found before the next endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextStillImageInterfaceDataEndpoint(void* CurrentDescriptor)
{
     96c:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     96e:	81 81       	ldd	r24, Z+1	; 0x01
     970:	85 30       	cpi	r24, 0x05	; 5
     972:	49 f4       	brne	.+18     	; 0x986 <DComp_NextStillImageInterfaceDataEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK or INTERRUPT type endpoint found */
		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) ||
     974:	83 81       	ldd	r24, Z+3	; 0x03
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	83 70       	andi	r24, 0x03	; 3
     97a:	90 70       	andi	r25, 0x00	; 0
     97c:	02 97       	sbiw	r24, 0x02	; 2
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	91 05       	cpc	r25, r1
     982:	18 f4       	brcc	.+6      	; 0x98a <DComp_NextStillImageInterfaceDataEndpoint+0x1e>
     984:	04 c0       	rjmp	.+8      	; 0x98e <DComp_NextStillImageInterfaceDataEndpoint+0x22>
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
     986:	84 30       	cpi	r24, 0x04	; 4
     988:	21 f0       	breq	.+8      	; 0x992 <DComp_NextStillImageInterfaceDataEndpoint+0x26>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	08 95       	ret

		/* Check the endpoint type, break out if correct BULK or INTERRUPT type endpoint found */
		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) ||
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	08 95       	ret
		}
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
     992:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     994:	08 95       	ret

00000996 <ProcessConfigurationDescriptor>:
 *  This routine searches for a SI interface descriptor containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref StillImageHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     996:	8f 92       	push	r8
     998:	9f 92       	push	r9
     99a:	af 92       	push	r10
     99c:	bf 92       	push	r11
     99e:	cf 92       	push	r12
     9a0:	df 92       	push	r13
     9a2:	ef 92       	push	r14
     9a4:	ff 92       	push	r15
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	cd b7       	in	r28, 0x3d	; 61
     9b0:	de b7       	in	r29, 0x3e	; 62
     9b2:	c4 50       	subi	r28, 0x04	; 4
     9b4:	d2 40       	sbci	r29, 0x02	; 2
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	f8 94       	cli
     9ba:	de bf       	out	0x3e, r29	; 62
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     9c0:	ae 01       	movw	r20, r28
     9c2:	4b 5f       	subi	r20, 0xFB	; 251
     9c4:	5f 4f       	sbci	r21, 0xFF	; 255
     9c6:	5c 83       	std	Y+4, r21	; 0x04
     9c8:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint     = NULL;
	USB_Descriptor_Endpoint_t*  EventsEndpoint      = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	5e 01       	movw	r10, r28
     9ce:	08 94       	sec
     9d0:	a1 1c       	adc	r10, r1
     9d2:	b1 1c       	adc	r11, r1
     9d4:	b5 01       	movw	r22, r10
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	32 e0       	ldi	r19, 0x02	; 2
     9da:	73 d5       	rcall	.+2790   	; 0x14c2 <USB_Host_GetDeviceConfigDescriptor>
     9dc:	85 30       	cpi	r24, 0x05	; 5
     9de:	09 f4       	brne	.+2      	; 0x9e2 <ProcessConfigurationDescriptor+0x4c>
     9e0:	5f c0       	rjmp	.+190    	; 0xaa0 <ProcessConfigurationDescriptor+0x10a>
     9e2:	86 30       	cpi	r24, 0x06	; 6
     9e4:	19 f0       	breq	.+6      	; 0x9ec <ProcessConfigurationDescriptor+0x56>
     9e6:	88 23       	and	r24, r24
     9e8:	29 f0       	breq	.+10     	; 0x9f4 <ProcessConfigurationDescriptor+0x5e>
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <ProcessConfigurationDescriptor+0x5a>
     9ec:	83 e0       	ldi	r24, 0x03	; 3
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     9ee:	5b c0       	rjmp	.+182    	; 0xaa6 <ProcessConfigurationDescriptor+0x110>
     9f0:	81 e0       	ldi	r24, 0x01	; 1
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     9f2:	59 c0       	rjmp	.+178    	; 0xaa6 <ProcessConfigurationDescriptor+0x110>
     9f4:	cc 24       	eor	r12, r12
	USB_Descriptor_Endpoint_t*  DataINEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint     = NULL;
	USB_Descriptor_Endpoint_t*  EventsEndpoint      = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     9f6:	dd 24       	eor	r13, r13
     9f8:	ee 24       	eor	r14, r14
     9fa:	ff 24       	eor	r15, r15
     9fc:	00 e0       	ldi	r16, 0x00	; 0
     9fe:	10 e0       	ldi	r17, 0x00	; 0
     a00:	88 24       	eor	r8, r8
     a02:	99 24       	eor	r9, r9
     a04:	81 14       	cp	r8, r1
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(StillImageInterface) ||
     a06:	91 04       	cpc	r9, r1
     a08:	49 f0       	breq	.+18     	; 0xa1c <ProcessConfigurationDescriptor+0x86>
     a0a:	c5 01       	movw	r24, r10
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     a0c:	be 01       	movw	r22, r28
     a0e:	6d 5f       	subi	r22, 0xFD	; 253
     a10:	7f 4f       	sbci	r23, 0xFF	; 255
     a12:	46 eb       	ldi	r20, 0xB6	; 182
     a14:	54 e0       	ldi	r21, 0x04	; 4
     a16:	ac d5       	rcall	.+2904   	; 0x1570 <USB_GetNextDescriptorComp>
     a18:	88 23       	and	r24, r24
     a1a:	91 f0       	breq	.+36     	; 0xa40 <ProcessConfigurationDescriptor+0xaa>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(StillImageInterface) ||
     a1c:	c5 01       	movw	r24, r10
     a1e:	be 01       	movw	r22, r28
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextStillImageInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Still Image interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     a20:	6d 5f       	subi	r22, 0xFD	; 253
     a22:	7f 4f       	sbci	r23, 0xFF	; 255
     a24:	45 ea       	ldi	r20, 0xA5	; 165
     a26:	54 e0       	ldi	r21, 0x04	; 4
     a28:	a3 d5       	rcall	.+2886   	; 0x1570 <USB_GetNextDescriptorComp>
     a2a:	88 23       	and	r24, r24
     a2c:	d9 f5       	brne	.+118    	; 0xaa4 <ProcessConfigurationDescriptor+0x10e>
     a2e:	8b 80       	ldd	r8, Y+3	; 0x03
     a30:	9c 80       	ldd	r9, Y+4	; 0x04
     a32:	cc 24       	eor	r12, r12
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			StillImageInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     a34:	dd 24       	eor	r13, r13
     a36:	ee 24       	eor	r14, r14

			/* Clear any found endpoints */
			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
			EventsEndpoint  = NULL;
     a38:	ff 24       	eor	r15, r15
     a3a:	00 e0       	ldi	r16, 0x00	; 0
			/* Save the interface in case we need to refer back to it later */
			StillImageInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);

			/* Clear any found endpoints */
			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
     a3c:	10 e0       	ldi	r17, 0x00	; 0
     a3e:	e2 cf       	rjmp	.-60     	; 0xa04 <ProcessConfigurationDescriptor+0x6e>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			StillImageInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     a40:	eb 81       	ldd	r30, Y+3	; 0x03
     a42:	fc 81       	ldd	r31, Y+4	; 0x04
     a44:	82 81       	ldd	r24, Z+2	; 0x02
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     a46:	87 ff       	sbrs	r24, 7
     a48:	06 c0       	rjmp	.+12     	; 0xa56 <ProcessConfigurationDescriptor+0xc0>

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     a4a:	83 81       	ldd	r24, Z+3	; 0x03
     a4c:	83 70       	andi	r24, 0x03	; 3
     a4e:	83 30       	cpi	r24, 0x03	; 3
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
     a50:	21 f4       	brne	.+8      	; 0xa5a <ProcessConfigurationDescriptor+0xc4>
     a52:	6f 01       	movw	r12, r30
     a54:	03 c0       	rjmp	.+6      	; 0xa5c <ProcessConfigurationDescriptor+0xc6>
     a56:	7f 01       	movw	r14, r30
			  EventsEndpoint = EndpointData;
     a58:	01 c0       	rjmp	.+2      	; 0xa5c <ProcessConfigurationDescriptor+0xc6>
     a5a:	8f 01       	movw	r16, r30
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
     a5c:	01 15       	cp	r16, r1
     a5e:	11 05       	cpc	r17, r1
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  EventsEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
     a60:	89 f2       	breq	.-94     	; 0xa04 <ProcessConfigurationDescriptor+0x6e>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	71 f2       	breq	.-100    	; 0xa04 <ProcessConfigurationDescriptor+0x6e>
     a68:	f8 01       	movw	r30, r16
     a6a:	24 81       	ldd	r18, Z+4	; 0x04
     a6c:	35 81       	ldd	r19, Z+5	; 0x05
			DataOUTEndpoint = EndpointData;
		}
	}

	/* Configure the Still Image data IN pipe */
	Pipe_ConfigurePipe(SIMAGE_DATA_IN_PIPE, EP_TYPE_BULK, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     a6e:	81 e8       	ldi	r24, 0x81	; 129
     a70:	62 e0       	ldi	r22, 0x02	; 2
     a72:	42 81       	ldd	r20, Z+2	; 0x02
     a74:	01 e0       	ldi	r16, 0x01	; 1
     a76:	64 d3       	rcall	.+1736   	; 0x1140 <Pipe_ConfigurePipe>
     a78:	f7 01       	movw	r30, r14
     a7a:	24 81       	ldd	r18, Z+4	; 0x04
     a7c:	35 81       	ldd	r19, Z+5	; 0x05
     a7e:	82 e0       	ldi	r24, 0x02	; 2

	/* Configure the Still Image data OUT pipe */
	Pipe_ConfigurePipe(SIMAGE_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);
     a80:	62 e0       	ldi	r22, 0x02	; 2
     a82:	42 81       	ldd	r20, Z+2	; 0x02
     a84:	5d d3       	rcall	.+1722   	; 0x1140 <Pipe_ConfigurePipe>
     a86:	f6 01       	movw	r30, r12
     a88:	24 81       	ldd	r18, Z+4	; 0x04
     a8a:	35 81       	ldd	r19, Z+5	; 0x05
     a8c:	83 e8       	ldi	r24, 0x83	; 131
     a8e:	63 e0       	ldi	r22, 0x03	; 3

	/* Configure the Still Image events pipe */
	Pipe_ConfigurePipe(SIMAGE_EVENTS_PIPE, EP_TYPE_INTERRUPT, EventsEndpoint->EndpointAddress, EventsEndpoint->EndpointSize, 1);
     a90:	42 81       	ldd	r20, Z+2	; 0x02
     a92:	56 d3       	rcall	.+1708   	; 0x1140 <Pipe_ConfigurePipe>
     a94:	f6 01       	movw	r30, r12
     a96:	86 81       	ldd	r24, Z+6	; 0x06
     a98:	80 93 ad 00 	sts	0x00AD, r24
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	03 c0       	rjmp	.+6      	; 0xaa6 <ProcessConfigurationDescriptor+0x110>
	Pipe_SetInterruptPeriod(EventsEndpoint->PollingIntervalMS);
     aa0:	82 e0       	ldi	r24, 0x02	; 2
     aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <ProcessConfigurationDescriptor+0x110>
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     aa4:	84 e0       	ldi	r24, 0x04	; 4
     aa6:	cc 5f       	subi	r28, 0xFC	; 252

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     aa8:	dd 4f       	sbci	r29, 0xFD	; 253
     aaa:	0f b6       	in	r0, 0x3f	; 63
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     aac:	f8 94       	cli
     aae:	de bf       	out	0x3e, r29	; 62
			/* Get the next Still Image interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextStillImageInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     ab0:	0f be       	out	0x3f, r0	; 63
	Pipe_ConfigurePipe(SIMAGE_EVENTS_PIPE, EP_TYPE_INTERRUPT, EventsEndpoint->EndpointAddress, EventsEndpoint->EndpointSize, 1);
	Pipe_SetInterruptPeriod(EventsEndpoint->PollingIntervalMS);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ff 90       	pop	r15
     abe:	ef 90       	pop	r14
     ac0:	df 90       	pop	r13
     ac2:	cf 90       	pop	r12
     ac4:	bf 90       	pop	r11
     ac6:	af 90       	pop	r10
     ac8:	9f 90       	pop	r9
     aca:	8f 90       	pop	r8
     acc:	08 95       	ret

00000ace <SImage_SendBlockHeader>:
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ace:	82 e0       	ldi	r24, 0x02	; 2
     ad0:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ad4:	80 91 a9 00 	lds	r24, 0x00A9
     ad8:	8f 7b       	andi	r24, 0xBF	; 191
     ada:	80 93 a9 00 	sts	0x00A9, r24
	/* Unfreeze the data OUT pipe ready for data transmission */
	Pipe_SelectPipe(SIMAGE_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	/* Write the PIMA block to the data OUT pipe */
	Pipe_Write_Stream_LE(&PIMA_SendBlock, PIMA_COMMAND_SIZE(0), NULL);
     ade:	85 e3       	ldi	r24, 0x35	; 53
     ae0:	91 e0       	ldi	r25, 0x01	; 1
     ae2:	6c e0       	ldi	r22, 0x0C	; 12
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	40 e0       	ldi	r20, 0x00	; 0
     ae8:	50 e0       	ldi	r21, 0x00	; 0
     aea:	7c d2       	rcall	.+1272   	; 0xfe4 <Pipe_Write_Stream_LE>
     aec:	80 91 39 01 	lds	r24, 0x0139

	/* If the block type is a command, send its parameters (if any) */
	if (PIMA_SendBlock.Type == PIMA_CONTAINER_CommandBlock)
     af0:	90 91 3a 01 	lds	r25, 0x013A
     af4:	81 30       	cpi	r24, 0x01	; 1
     af6:	91 05       	cpc	r25, r1
     af8:	79 f4       	brne	.+30     	; 0xb18 <SImage_SendBlockHeader+0x4a>
     afa:	60 91 35 01 	lds	r22, 0x0135
	{
		/* Determine the size of the parameters in the block via the data length attribute */
		uint8_t ParamBytes = (PIMA_SendBlock.DataLength - PIMA_COMMAND_SIZE(0));
     afe:	6c 50       	subi	r22, 0x0C	; 12
     b00:	31 f0       	breq	.+12     	; 0xb0e <SImage_SendBlockHeader+0x40>

		/* Check if any parameters in the command block */
		if (ParamBytes)
     b02:	81 e4       	ldi	r24, 0x41	; 65
		{
			/* Write the PIMA parameters to the data OUT pipe */
			Pipe_Write_Stream_LE(&PIMA_SendBlock.Params, ParamBytes, NULL);
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	50 e0       	ldi	r21, 0x00	; 0
     b0c:	6b d2       	rcall	.+1238   	; 0xfe4 <Pipe_Write_Stream_LE>
     b0e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     b12:	8b 77       	andi	r24, 0x7B	; 123
     b14:	80 93 a6 00 	sts	0x00A6, r24
     b18:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     b1c:	80 64       	ori	r24, 0x40	; 64
     b1e:	80 93 a9 00 	sts	0x00A9, r24
     b22:	08 95       	ret

00000b24 <SImage_ReceiveBlockHeader>:
     b24:	20 91 a2 00 	lds	r18, 0x00A2
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b28:	30 91 a3 00 	lds	r19, 0x00A3
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     b32:	80 91 a9 00 	lds	r24, 0x00A9
     b36:	8f 7b       	andi	r24, 0xBF	; 191
     b38:	80 93 a9 00 	sts	0x00A9, r24
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
uint8_t SImage_ReceiveBlockHeader(void)
{
	uint16_t TimeoutMSRem        = COMMAND_DATA_TIMEOUT_MS;
     b3c:	80 e1       	ldi	r24, 0x10	; 16
     b3e:	97 e2       	ldi	r25, 0x27	; 39
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b40:	72 e0       	ldi	r23, 0x02	; 2
     b42:	61 e0       	ldi	r22, 0x01	; 1
     b44:	3c c0       	rjmp	.+120    	; 0xbbe <SImage_ReceiveBlockHeader+0x9a>
     b46:	40 91 a2 00 	lds	r20, 0x00A2
     b4a:	50 91 a3 00 	lds	r21, 0x00A3
	while (!(Pipe_IsINReceived()))
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		/* Check to see if a new frame has been issued (1ms elapsed) */
		if (CurrentFrameNumber != PreviousFrameNumber)
     b4e:	42 17       	cp	r20, r18
     b50:	53 07       	cpc	r21, r19
     b52:	21 f0       	breq	.+8      	; 0xb5c <SImage_ReceiveBlockHeader+0x38>
		{
			/* Save the new frame number and decrement the timeout period */
			PreviousFrameNumber = CurrentFrameNumber;
			TimeoutMSRem--;
     b54:	01 97       	sbiw	r24, 0x01	; 1

			/* Check to see if the timeout period for the command has elapsed */
			if (!(TimeoutMSRem))
     b56:	09 f4       	brne	.+2      	; 0xb5a <SImage_ReceiveBlockHeader+0x36>
     b58:	5a c0       	rjmp	.+180    	; 0xc0e <SImage_ReceiveBlockHeader+0xea>
     b5a:	9a 01       	movw	r18, r20

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     b5c:	40 91 a9 00 	lds	r20, 0x00A9
     b60:	40 64       	ori	r20, 0x40	; 64
     b62:	40 93 a9 00 	sts	0x00A9, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b66:	70 93 a7 00 	sts	0x00A7, r23

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     b6a:	40 91 a9 00 	lds	r20, 0x00A9
     b6e:	4f 7b       	andi	r20, 0xBF	; 191
     b70:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b74:	40 91 a6 00 	lds	r20, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(SIMAGE_DATA_OUT_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     b78:	41 fd       	sbrc	r20, 1
     b7a:	10 c0       	rjmp	.+32     	; 0xb9c <SImage_ReceiveBlockHeader+0x78>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     b7c:	40 91 a9 00 	lds	r20, 0x00A9
     b80:	40 64       	ori	r20, 0x40	; 64
     b82:	40 93 a9 00 	sts	0x00A9, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b86:	60 93 a7 00 	sts	0x00A7, r22

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     b8a:	40 91 a9 00 	lds	r20, 0x00A9
     b8e:	4f 7b       	andi	r20, 0xBF	; 191
     b90:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b94:	40 91 a6 00 	lds	r20, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(SIMAGE_DATA_IN_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     b98:	41 ff       	sbrs	r20, 1
     b9a:	0d c0       	rjmp	.+26     	; 0xbb6 <SImage_ReceiveBlockHeader+0x92>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     b9c:	90 91 aa 00 	lds	r25, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     ba0:	29 2f       	mov	r18, r25
     ba2:	2f 70       	andi	r18, 0x0F	; 15
     ba4:	90 ff       	sbrs	r25, 0
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <SImage_ReceiveBlockHeader+0x88>
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	01 c0       	rjmp	.+2      	; 0xbae <SImage_ReceiveBlockHeader+0x8a>
     bac:	80 e8       	ldi	r24, 0x80	; 128
		{
			/* Clear the stall condition on the IN pipe */
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
     bae:	82 2b       	or	r24, r18
     bb0:	72 d6       	rcall	.+3300   	; 0x1896 <USB_Host_ClearEndpointStall>
     bb2:	81 e0       	ldi	r24, 0x01	; 1

			/* Return error code */
			return PIPE_RWSTREAM_PipeStalled;
     bb4:	08 95       	ret
     bb6:	40 91 6f 01 	lds	r20, 0x016F
		}

		/* Check to see if the device was disconnected, if so exit function */
		if (USB_HostState == HOST_STATE_Unattached)
     bba:	41 30       	cpi	r20, 0x01	; 1
     bbc:	51 f1       	breq	.+84     	; 0xc12 <SImage_ReceiveBlockHeader+0xee>
     bbe:	40 91 a6 00 	lds	r20, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     bc2:	40 ff       	sbrs	r20, 0
	/* Unfreeze the data IN pipe */
	Pipe_SelectPipe(SIMAGE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Wait until data received on the IN pipe */
	while (!(Pipe_IsINReceived()))
     bc4:	c0 cf       	rjmp	.-128    	; 0xb46 <SImage_ReceiveBlockHeader+0x22>
     bc6:	8d e4       	ldi	r24, 0x4D	; 77
		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
	}

	/* Load in the response from the attached device */
	Pipe_Read_Stream_LE(&PIMA_ReceivedBlock, PIMA_COMMAND_SIZE(0), NULL);
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	6c e0       	ldi	r22, 0x0C	; 12
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	40 e0       	ldi	r20, 0x00	; 0
     bd0:	50 e0       	ldi	r21, 0x00	; 0
     bd2:	5f d2       	rcall	.+1214   	; 0x1092 <Pipe_Read_Stream_LE>
     bd4:	80 91 51 01 	lds	r24, 0x0151

	/* Check if the returned block type is a response block */
	if (PIMA_ReceivedBlock.Type == PIMA_CONTAINER_ResponseBlock)
     bd8:	90 91 52 01 	lds	r25, 0x0152
     bdc:	83 30       	cpi	r24, 0x03	; 3
     bde:	91 05       	cpc	r25, r1
     be0:	79 f4       	brne	.+30     	; 0xc00 <SImage_ReceiveBlockHeader+0xdc>
     be2:	60 91 4d 01 	lds	r22, 0x014D
	{
		/* Determine the size of the parameters in the block via the data length attribute */
		uint8_t ParamBytes = (PIMA_ReceivedBlock.DataLength - PIMA_COMMAND_SIZE(0));
     be6:	6c 50       	subi	r22, 0x0C	; 12
     be8:	31 f0       	breq	.+12     	; 0xbf6 <SImage_ReceiveBlockHeader+0xd2>
     bea:	89 e5       	ldi	r24, 0x59	; 89

		/* Check if the device has returned any parameters */
		if (ParamBytes)
     bec:	91 e0       	ldi	r25, 0x01	; 1
		{
			/* Read the PIMA parameters from the data IN pipe */
			Pipe_Read_Stream_LE(&PIMA_ReceivedBlock.Params, ParamBytes, NULL);
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	40 e0       	ldi	r20, 0x00	; 0
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	4e d2       	rcall	.+1180   	; 0x1092 <Pipe_Read_Stream_LE>
     bf6:	80 91 a6 00 	lds	r24, 0x00A6
     bfa:	8e 77       	andi	r24, 0x7E	; 126
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     bfc:	80 93 a6 00 	sts	0x00A6, r24
     c00:	80 91 a9 00 	lds	r24, 0x00A9
     c04:	80 64       	ori	r24, 0x40	; 64

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     c06:	80 93 a9 00 	sts	0x00A9, r24
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	08 95       	ret
     c0e:	83 e0       	ldi	r24, 0x03	; 3
	}

	/* Freeze the IN pipe after use */
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
     c10:	08 95       	ret
     c12:	82 e0       	ldi	r24, 0x02	; 2
			PreviousFrameNumber = CurrentFrameNumber;
			TimeoutMSRem--;

			/* Check to see if the timeout period for the command has elapsed */
			if (!(TimeoutMSRem))
			  return PIPE_RWSTREAM_Timeout;
     c14:	08 95       	ret

00000c16 <SImage_ReadData>:
     c16:	cf 93       	push	r28
			return PIPE_RWSTREAM_PipeStalled;
		}

		/* Check to see if the device was disconnected, if so exit function */
		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
     c18:	df 93       	push	r29

	/* Freeze the IN pipe after use */
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
     c1a:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c1c:	20 93 a7 00 	sts	0x00A7, r18

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     c20:	c9 ea       	ldi	r28, 0xA9	; 169
     c22:	d0 e0       	ldi	r29, 0x00	; 0
     c24:	28 81       	ld	r18, Y
     c26:	2f 7b       	andi	r18, 0xBF	; 191
     c28:	28 83       	st	Y, r18
	/* Unfreeze the data IN pipe */
	Pipe_SelectPipe(SIMAGE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Read in the data into the buffer */
	ErrorCode = Pipe_Read_Stream_LE(Buffer, Bytes, NULL);
     c2a:	40 e0       	ldi	r20, 0x00	; 0
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	31 d2       	rcall	.+1122   	; 0x1092 <Pipe_Read_Stream_LE>
     c30:	98 81       	ld	r25, Y

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     c32:	90 64       	ori	r25, 0x40	; 64
     c34:	98 83       	st	Y, r25
     c36:	df 91       	pop	r29

	/* Freeze the pipe again after use */
	Pipe_Freeze();

	return ErrorCode;
}
     c38:	cf 91       	pop	r28
     c3a:	08 95       	ret

00000c3c <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     c3c:	80 91 9e 00 	lds	r24, 0x009E
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	81 70       	andi	r24, 0x01	; 1
     c44:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     c46:	20 91 a0 00 	lds	r18, 0x00A0
     c4a:	2d 7f       	andi	r18, 0xFD	; 253
     c4c:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     c50:	20 91 9e 00 	lds	r18, 0x009E
     c54:	22 60       	ori	r18, 0x02	; 2
     c56:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     c5a:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     c5e:	21 fd       	sbrc	r18, 1
     c60:	fc cf       	rjmp	.-8      	; 0xc5a <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     c62:	20 91 9e 00 	lds	r18, 0x009E
     c66:	21 60       	ori	r18, 0x01	; 1
     c68:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     c6c:	10 92 65 01 	sts	0x0165, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c70:	20 91 a0 00 	lds	r18, 0x00A0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	20 72       	andi	r18, 0x20	; 32
     c78:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     c7a:	40 91 a0 00 	lds	r20, 0x00A0
     c7e:	4f 7d       	andi	r20, 0xDF	; 223
     c80:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c84:	40 91 9f 00 	lds	r20, 0x009F
     c88:	4f 7d       	andi	r20, 0xDF	; 223
     c8a:	40 93 9f 00 	sts	0x009F, r20
     c8e:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c90:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     c94:	55 ff       	sbrs	r21, 5
     c96:	0b c0       	rjmp	.+22     	; 0xcae <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c98:	40 91 9f 00 	lds	r20, 0x009F
     c9c:	4f 7d       	andi	r20, 0xDF	; 223
     c9e:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     ca2:	40 91 9f 00 	lds	r20, 0x009F
     ca6:	4d 7f       	andi	r20, 0xFD	; 253
     ca8:	40 93 9f 00 	sts	0x009F, r20
     cac:	08 c0       	rjmp	.+16     	; 0xcbe <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cae:	ef ec       	ldi	r30, 0xCF	; 207
     cb0:	f7 e0       	ldi	r31, 0x07	; 7
     cb2:	31 97       	sbiw	r30, 0x01	; 1
     cb4:	f1 f7       	brne	.-4      	; 0xcb2 <USB_Host_ResetDevice+0x76>
     cb6:	00 c0       	rjmp	.+0      	; 0xcb8 <USB_Host_ResetDevice+0x7c>
     cb8:	00 00       	nop
     cba:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     cbc:	49 f7       	brne	.-46     	; 0xc90 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     cbe:	21 15       	cp	r18, r1
     cc0:	31 05       	cpc	r19, r1
     cc2:	29 f0       	breq	.+10     	; 0xcce <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     cc4:	20 91 a0 00 	lds	r18, 0x00A0
     cc8:	20 62       	ori	r18, 0x20	; 32
     cca:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     cce:	00 97       	sbiw	r24, 0x00	; 0
     cd0:	29 f4       	brne	.+10     	; 0xcdc <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     cd2:	80 91 9e 00 	lds	r24, 0x009E
     cd6:	8e 7f       	andi	r24, 0xFE	; 254
     cd8:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     cdc:	80 91 a0 00 	lds	r24, 0x00A0
     ce0:	82 60       	ori	r24, 0x02	; 2
     ce2:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     ce6:	08 95       	ret

00000ce8 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     ce8:	40 91 9e 00 	lds	r20, 0x009E
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	41 70       	andi	r20, 0x01	; 1
     cf0:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     cf2:	20 91 a0 00 	lds	r18, 0x00A0
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	20 72       	andi	r18, 0x20	; 32
     cfa:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     cfc:	90 91 a0 00 	lds	r25, 0x00A0
     d00:	9f 7d       	andi	r25, 0xDF	; 223
     d02:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     d06:	90 91 9f 00 	lds	r25, 0x009F
     d0a:	9f 7d       	andi	r25, 0xDF	; 223
     d0c:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     d10:	90 91 9e 00 	lds	r25, 0x009E
     d14:	91 60       	ori	r25, 0x01	; 1
     d16:	90 93 9e 00 	sts	0x009E, r25
     d1a:	26 c0       	rjmp	.+76     	; 0xd68 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     d1c:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     d20:	95 ff       	sbrs	r25, 5
     d22:	06 c0       	rjmp	.+12     	; 0xd30 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     d24:	90 91 9f 00 	lds	r25, 0x009F
     d28:	9f 7d       	andi	r25, 0xDF	; 223
     d2a:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     d2e:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     d30:	90 91 6f 01 	lds	r25, 0x016F
     d34:	91 30       	cpi	r25, 0x01	; 1
     d36:	d9 f0       	breq	.+54     	; 0xd6e <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     d38:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     d3c:	94 ff       	sbrs	r25, 4
     d3e:	09 c0       	rjmp	.+18     	; 0xd52 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     d40:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     d44:	80 91 a6 00 	lds	r24, 0x00A6
     d48:	8f 7e       	andi	r24, 0xEF	; 239
     d4a:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     d4e:	82 e0       	ldi	r24, 0x02	; 2

			break;
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     d52:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     d56:	91 ff       	sbrs	r25, 1
     d58:	07 c0       	rjmp	.+14     	; 0xd68 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     d5a:	80 91 a6 00 	lds	r24, 0x00A6
     d5e:	8d 7f       	andi	r24, 0xFD	; 253
     d60:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     d64:	83 e0       	ldi	r24, 0x03	; 3

			break;
     d66:	04 c0       	rjmp	.+8      	; 0xd70 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     d68:	88 23       	and	r24, r24
     d6a:	c1 f6       	brne	.-80     	; 0xd1c <USB_Host_WaitMS+0x34>
     d6c:	01 c0       	rjmp	.+2      	; 0xd70 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     d6e:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     d70:	41 15       	cp	r20, r1
     d72:	51 05       	cpc	r21, r1
     d74:	29 f4       	brne	.+10     	; 0xd80 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     d76:	90 91 9e 00 	lds	r25, 0x009E
     d7a:	9e 7f       	andi	r25, 0xFE	; 254
     d7c:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     d80:	21 15       	cp	r18, r1
     d82:	31 05       	cpc	r19, r1
     d84:	29 f0       	breq	.+10     	; 0xd90 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     d86:	90 91 a0 00 	lds	r25, 0x00A0
     d8a:	90 62       	ori	r25, 0x20	; 32
     d8c:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     d90:	08 95       	ret

00000d92 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     d92:	0f 93       	push	r16
     d94:	1f 93       	push	r17
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	28 97       	sbiw	r28, 0x08	; 8
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     daa:	80 91 6f 01 	lds	r24, 0x016F
     dae:	85 30       	cpi	r24, 0x05	; 5
     db0:	09 f4       	brne	.+2      	; 0xdb4 <USB_Host_ProcessNextHostState+0x22>
     db2:	99 c0       	rjmp	.+306    	; 0xee6 <USB_Host_ProcessNextHostState+0x154>
     db4:	86 30       	cpi	r24, 0x06	; 6
     db6:	68 f4       	brcc	.+26     	; 0xdd2 <USB_Host_ProcessNextHostState+0x40>
     db8:	82 30       	cpi	r24, 0x02	; 2
     dba:	c1 f1       	breq	.+112    	; 0xe2c <USB_Host_ProcessNextHostState+0x9a>
     dbc:	83 30       	cpi	r24, 0x03	; 3
     dbe:	18 f4       	brcc	.+6      	; 0xdc6 <USB_Host_ProcessNextHostState+0x34>
     dc0:	88 23       	and	r24, r24
     dc2:	a1 f0       	breq	.+40     	; 0xdec <USB_Host_ProcessNextHostState+0x5a>
     dc4:	04 c1       	rjmp	.+520    	; 0xfce <USB_Host_ProcessNextHostState+0x23c>
     dc6:	83 30       	cpi	r24, 0x03	; 3
     dc8:	d9 f1       	breq	.+118    	; 0xe40 <USB_Host_ProcessNextHostState+0xae>
     dca:	84 30       	cpi	r24, 0x04	; 4
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <USB_Host_ProcessNextHostState+0x3e>
     dce:	ff c0       	rjmp	.+510    	; 0xfce <USB_Host_ProcessNextHostState+0x23c>
     dd0:	62 c0       	rjmp	.+196    	; 0xe96 <USB_Host_ProcessNextHostState+0x104>
     dd2:	87 30       	cpi	r24, 0x07	; 7
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <USB_Host_ProcessNextHostState+0x46>
     dd6:	9e c0       	rjmp	.+316    	; 0xf14 <USB_Host_ProcessNextHostState+0x182>
     dd8:	87 30       	cpi	r24, 0x07	; 7
     dda:	08 f4       	brcc	.+2      	; 0xdde <USB_Host_ProcessNextHostState+0x4c>
     ddc:	8f c0       	rjmp	.+286    	; 0xefc <USB_Host_ProcessNextHostState+0x16a>
     dde:	88 30       	cpi	r24, 0x08	; 8
     de0:	09 f4       	brne	.+2      	; 0xde4 <USB_Host_ProcessNextHostState+0x52>
     de2:	b8 c0       	rjmp	.+368    	; 0xf54 <USB_Host_ProcessNextHostState+0x1c2>
     de4:	89 30       	cpi	r24, 0x09	; 9
     de6:	09 f0       	breq	.+2      	; 0xdea <USB_Host_ProcessNextHostState+0x58>
     de8:	f2 c0       	rjmp	.+484    	; 0xfce <USB_Host_ProcessNextHostState+0x23c>
     dea:	d9 c0       	rjmp	.+434    	; 0xf9e <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     dec:	00 91 1a 01 	lds	r16, 0x011A
     df0:	10 91 1b 01 	lds	r17, 0x011B
     df4:	01 15       	cp	r16, r1
     df6:	11 05       	cpc	r17, r1
     df8:	09 f4       	brne	.+2      	; 0xdfc <USB_Host_ProcessNextHostState+0x6a>
     dfa:	e9 c0       	rjmp	.+466    	; 0xfce <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	74 df       	rcall	.-280    	; 0xce8 <USB_Host_WaitMS>
     e00:	68 2f       	mov	r22, r24
     e02:	88 23       	and	r24, r24
     e04:	31 f0       	breq	.+12     	; 0xe12 <USB_Host_ProcessNextHostState+0x80>
     e06:	80 91 1c 01 	lds	r24, 0x011C
				{
					USB_HostState = PostWaitState;
     e0a:	80 93 6f 01 	sts	0x016F, r24
     e0e:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     e10:	d2 c0       	rjmp	.+420    	; 0xfb6 <USB_Host_ProcessNextHostState+0x224>
					break;
     e12:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
     e14:	10 40       	sbci	r17, 0x00	; 0
     e16:	10 93 1b 01 	sts	0x011B, r17
     e1a:	00 93 1a 01 	sts	0x011A, r16
     e1e:	01 15       	cp	r16, r1
     e20:	11 05       	cpc	r17, r1
     e22:	09 f0       	breq	.+2      	; 0xe26 <USB_Host_ProcessNextHostState+0x94>
     e24:	d4 c0       	rjmp	.+424    	; 0xfce <USB_Host_ProcessNextHostState+0x23c>
     e26:	80 91 1c 01 	lds	r24, 0x011C
				  USB_HostState = PostWaitState;
     e2a:	07 c0       	rjmp	.+14     	; 0xe3a <USB_Host_ProcessNextHostState+0xa8>
     e2c:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     e2e:	93 e0       	ldi	r25, 0x03	; 3
     e30:	90 93 1b 01 	sts	0x011B, r25
     e34:	80 93 1a 01 	sts	0x011A, r24
     e38:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     e3a:	80 93 6f 01 	sts	0x016F, r24
     e3e:	c7 c0       	rjmp	.+398    	; 0xfce <USB_Host_ProcessNextHostState+0x23c>
			break;
     e40:	80 91 1a 01 	lds	r24, 0x011A
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     e44:	90 91 1b 01 	lds	r25, 0x011B
     e48:	9c 01       	movw	r18, r24
     e4a:	21 50       	subi	r18, 0x01	; 1
     e4c:	30 40       	sbci	r19, 0x00	; 0
     e4e:	30 93 1b 01 	sts	0x011B, r19
     e52:	20 93 1a 01 	sts	0x011A, r18
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	39 f0       	breq	.+14     	; 0xe68 <USB_Host_ProcessNextHostState+0xd6>
     e5a:	8f ec       	ldi	r24, 0xCF	; 207
     e5c:	97 e0       	ldi	r25, 0x07	; 7
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	f1 f7       	brne	.-4      	; 0xe5e <USB_Host_ProcessNextHostState+0xcc>
     e62:	00 c0       	rjmp	.+0      	; 0xe64 <USB_Host_ProcessNextHostState+0xd2>
     e64:	00 00       	nop
     e66:	b3 c0       	rjmp	.+358    	; 0xfce <USB_Host_ProcessNextHostState+0x23c>
     e68:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     e6a:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     e6e:	80 61       	ori	r24, 0x10	; 16
     e70:	80 93 d8 00 	sts	0x00D8, r24
     e74:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     e78:	8b 7f       	andi	r24, 0xFB	; 251
     e7a:	80 93 dd 00 	sts	0x00DD, r24
     e7e:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     e82:	80 61       	ori	r24, 0x10	; 16
     e84:	80 93 d7 00 	sts	0x00D7, r24
     e88:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     e8c:	82 60       	ori	r24, 0x02	; 2
     e8e:	80 93 dd 00 	sts	0x00DD, r24
     e92:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     e94:	d2 cf       	rjmp	.-92     	; 0xe3a <USB_Host_ProcessNextHostState+0xa8>
     e96:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     e9a:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     e9c:	98 c0       	rjmp	.+304    	; 0xfce <USB_Host_ProcessNextHostState+0x23c>
     e9e:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     ea2:	8e 7f       	andi	r24, 0xFE	; 254
     ea4:	80 93 9f 00 	sts	0x009F, r24
     ea8:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     eac:	8d 7f       	andi	r24, 0xFD	; 253
     eae:	80 93 9f 00 	sts	0x009F, r24
     eb2:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     eb6:	8d 7f       	andi	r24, 0xFD	; 253
     eb8:	80 93 df 00 	sts	0x00DF, r24
     ebc:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     ec0:	82 60       	ori	r24, 0x02	; 2
     ec2:	80 93 de 00 	sts	0x00DE, r24
     ec6:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     eca:	81 60       	ori	r24, 0x01	; 1
     ecc:	80 93 9e 00 	sts	0x009E, r24
     ed0:	9c d1       	rcall	.+824    	; 0x120a <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     ed2:	10 92 6f 01 	sts	0x016F, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     ed6:	84 e6       	ldi	r24, 0x64	; 100
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	90 93 1b 01 	sts	0x011B, r25
     ede:	80 93 1a 01 	sts	0x011A, r24
     ee2:	85 e0       	ldi	r24, 0x05	; 5
     ee4:	59 c0       	rjmp	.+178    	; 0xf98 <USB_Host_ProcessNextHostState+0x206>
     ee6:	aa de       	rcall	.-684    	; 0xc3c <USB_Host_ResetDevice>
     ee8:	10 92 6f 01 	sts	0x016F, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     eec:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	90 93 1b 01 	sts	0x011B, r25
     ef4:	80 93 1a 01 	sts	0x011A, r24
     ef8:	86 e0       	ldi	r24, 0x06	; 6
     efa:	4e c0       	rjmp	.+156    	; 0xf98 <USB_Host_ProcessNextHostState+0x206>
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     f02:	20 e4       	ldi	r18, 0x40	; 64
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	01 e0       	ldi	r16, 0x01	; 1
     f08:	1b d1       	rcall	.+566    	; 0x1140 <Pipe_ConfigurePipe>
     f0a:	88 23       	and	r24, r24
     f0c:	09 f4       	brne	.+2      	; 0xf10 <USB_Host_ProcessNextHostState+0x17e>
     f0e:	4f c0       	rjmp	.+158    	; 0xfae <USB_Host_ProcessNextHostState+0x21c>
     f10:	87 e0       	ldi	r24, 0x07	; 7
     f12:	93 cf       	rjmp	.-218    	; 0xe3a <USB_Host_ProcessNextHostState+0xa8>
     f14:	a7 e6       	ldi	r26, 0x67	; 103
     f16:	b1 e0       	ldi	r27, 0x01	; 1
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     f18:	e0 e0       	ldi	r30, 0x00	; 0
     f1a:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     f1c:	88 e0       	ldi	r24, 0x08	; 8
     f1e:	01 90       	ld	r0, Z+
     f20:	0d 92       	st	X+, r0
     f22:	81 50       	subi	r24, 0x01	; 1
     f24:	e1 f7       	brne	.-8      	; 0xf1e <USB_Host_ProcessNextHostState+0x18c>
     f26:	10 92 a7 00 	sts	0x00A7, r1
     f2a:	ce 01       	movw	r24, r28
     f2c:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     f2e:	90 d3       	rcall	.+1824   	; 0x1650 <USB_Host_SendControlRequest>
     f30:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     f32:	88 23       	and	r24, r24
     f34:	09 f0       	breq	.+2      	; 0xf38 <USB_Host_ProcessNextHostState+0x1a6>
     f36:	3e c0       	rjmp	.+124    	; 0xfb4 <USB_Host_ProcessNextHostState+0x222>
     f38:	88 85       	ldd	r24, Y+8	; 0x08
     f3a:	80 93 10 01 	sts	0x0110, r24
     f3e:	7e de       	rcall	.-772    	; 0xc3c <USB_Host_ResetDevice>
     f40:	10 92 6f 01 	sts	0x016F, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     f44:	88 ec       	ldi	r24, 0xC8	; 200
     f46:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
     f48:	90 93 1b 01 	sts	0x011B, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     f4c:	80 93 1a 01 	sts	0x011A, r24
     f50:	88 e0       	ldi	r24, 0x08	; 8
     f52:	22 c0       	rjmp	.+68     	; 0xf98 <USB_Host_ProcessNextHostState+0x206>
     f54:	20 91 10 01 	lds	r18, 0x0110
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	40 e0       	ldi	r20, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     f60:	01 e0       	ldi	r16, 0x01	; 1
     f62:	ee d0       	rcall	.+476    	; 0x1140 <Pipe_ConfigurePipe>
     f64:	88 23       	and	r24, r24
     f66:	19 f1       	breq	.+70     	; 0xfae <USB_Host_ProcessNextHostState+0x21c>
     f68:	a7 e6       	ldi	r26, 0x67	; 103
     f6a:	b1 e0       	ldi	r27, 0x01	; 1
     f6c:	e8 e0       	ldi	r30, 0x08	; 8
     f6e:	f1 e0       	ldi	r31, 0x01	; 1
     f70:	88 e0       	ldi	r24, 0x08	; 8
     f72:	01 90       	ld	r0, Z+
     f74:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     f76:	81 50       	subi	r24, 0x01	; 1
     f78:	e1 f7       	brne	.-8      	; 0xf72 <USB_Host_ProcessNextHostState+0x1e0>
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	68 d3       	rcall	.+1744   	; 0x1650 <USB_Host_SendControlRequest>
     f80:	68 2f       	mov	r22, r24
     f82:	88 23       	and	r24, r24
     f84:	b9 f4       	brne	.+46     	; 0xfb4 <USB_Host_ProcessNextHostState+0x222>
     f86:	10 92 6f 01 	sts	0x016F, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     f8a:	84 e6       	ldi	r24, 0x64	; 100
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	90 93 1b 01 	sts	0x011B, r25
     f92:	80 93 1a 01 	sts	0x011A, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     f96:	89 e0       	ldi	r24, 0x09	; 9
     f98:	80 93 1c 01 	sts	0x011C, r24
     f9c:	18 c0       	rjmp	.+48     	; 0xfce <USB_Host_ProcessNextHostState+0x23c>
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	80 93 a1 00 	sts	0x00A1, r24
     fa4:	8a e0       	ldi	r24, 0x0A	; 10
     fa6:	80 93 6f 01 	sts	0x016F, r24
     faa:	25 da       	rcall	.-2998   	; 0x3f6 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     fac:	10 c0       	rjmp	.+32     	; 0xfce <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     fae:	60 e0       	ldi	r22, 0x00	; 0
     fb0:	84 e0       	ldi	r24, 0x04	; 4
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <USB_Host_ProcessNextHostState+0x224>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     fb4:	83 e0       	ldi	r24, 0x03	; 3
     fb6:	90 91 6f 01 	lds	r25, 0x016F

			EVENT_USB_Host_DeviceEnumerationComplete();
     fba:	91 30       	cpi	r25, 0x01	; 1
     fbc:	41 f0       	breq	.+16     	; 0xfce <USB_Host_ProcessNextHostState+0x23c>
			break;
     fbe:	80 da       	rcall	.-2816   	; 0x4c0 <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     fc0:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     fc4:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     fc6:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     fca:	0f da       	rcall	.-3042   	; 0x3ea <EVENT_USB_Host_DeviceUnattached>
     fcc:	78 d1       	rcall	.+752    	; 0x12be <USB_ResetInterface>
     fce:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     fde:	1f 91       	pop	r17
     fe0:	0f 91       	pop	r16

		USB_ResetInterface();
     fe2:	08 95       	ret

00000fe4 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     fe4:	af 92       	push	r10
     fe6:	bf 92       	push	r11
     fe8:	cf 92       	push	r12
     fea:	df 92       	push	r13
     fec:	ff 92       	push	r15
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	5c 01       	movw	r10, r24
     ff8:	eb 01       	movw	r28, r22
     ffa:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     ffc:	80 91 aa 00 	lds	r24, 0x00AA
    1000:	8f 7c       	andi	r24, 0xCF	; 207
    1002:	80 62       	ori	r24, 0x20	; 32
    1004:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1008:	14 d1       	rcall	.+552    	; 0x1232 <Pipe_WaitUntilReady>
    100a:	f8 2e       	mov	r15, r24
    100c:	88 23       	and	r24, r24
    100e:	b1 f5       	brne	.+108    	; 0x107c <Pipe_Write_Stream_LE+0x98>
    1010:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1012:	d1 04       	cpc	r13, r1
    1014:	41 f0       	breq	.+16     	; 0x1026 <Pipe_Write_Stream_LE+0x42>
    1016:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
    1018:	00 81       	ld	r16, Z
    101a:	11 81       	ldd	r17, Z+1	; 0x01
    101c:	c0 1b       	sub	r28, r16
    101e:	d1 0b       	sbc	r29, r17
    1020:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1022:	1b 1d       	adc	r17, r11
    1024:	01 c0       	rjmp	.+2      	; 0x1028 <Pipe_Write_Stream_LE+0x44>
    1026:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1028:	aa 24       	eor	r10, r10
    102a:	bb 24       	eor	r11, r11
    102c:	23 c0       	rjmp	.+70     	; 0x1074 <Pipe_Write_Stream_LE+0x90>
    102e:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1032:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1034:	16 c0       	rjmp	.+44     	; 0x1062 <Pipe_Write_Stream_LE+0x7e>
    1036:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    103a:	8b 77       	andi	r24, 0x7B	; 123
    103c:	80 93 a6 00 	sts	0x00A6, r24
    1040:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1042:	d1 04       	cpc	r13, r1
    1044:	51 f0       	breq	.+20     	; 0x105a <Pipe_Write_Stream_LE+0x76>
    1046:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
    1048:	80 81       	ld	r24, Z
    104a:	91 81       	ldd	r25, Z+1	; 0x01
    104c:	8a 0d       	add	r24, r10
    104e:	9b 1d       	adc	r25, r11
    1050:	91 83       	std	Z+1, r25	; 0x01
    1052:	80 83       	st	Z, r24
    1054:	44 e0       	ldi	r20, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
    1056:	f4 2e       	mov	r15, r20
    1058:	11 c0       	rjmp	.+34     	; 0x107c <Pipe_Write_Stream_LE+0x98>
    105a:	eb d0       	rcall	.+470    	; 0x1232 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    105c:	88 23       	and	r24, r24
    105e:	51 f0       	breq	.+20     	; 0x1074 <Pipe_Write_Stream_LE+0x90>
    1060:	0c c0       	rjmp	.+24     	; 0x107a <Pipe_Write_Stream_LE+0x96>
    1062:	f8 01       	movw	r30, r16
    1064:	81 91       	ld	r24, Z+
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1066:	8f 01       	movw	r16, r30
    1068:	80 93 af 00 	sts	0x00AF, r24
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    106c:	21 97       	sbiw	r28, 0x01	; 1
    106e:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1070:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
    1072:	b1 1c       	adc	r11, r1
    1074:	20 97       	sbiw	r28, 0x00	; 0
    1076:	d9 f6       	brne	.-74     	; 0x102e <Pipe_Write_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1078:	01 c0       	rjmp	.+2      	; 0x107c <Pipe_Write_Stream_LE+0x98>
    107a:	f8 2e       	mov	r15, r24
    107c:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    107e:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	ff 90       	pop	r15
    1088:	df 90       	pop	r13
    108a:	cf 90       	pop	r12
    108c:	bf 90       	pop	r11
    108e:	af 90       	pop	r10
    1090:	08 95       	ret

00001092 <Pipe_Read_Stream_LE>:
    1092:	af 92       	push	r10
    1094:	bf 92       	push	r11
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1096:	cf 92       	push	r12
    1098:	df 92       	push	r13
    109a:	ff 92       	push	r15
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	5c 01       	movw	r10, r24
    10a6:	eb 01       	movw	r28, r22
    10a8:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10aa:	80 91 aa 00 	lds	r24, 0x00AA
    10ae:	8f 7c       	andi	r24, 0xCF	; 207
    10b0:	80 61       	ori	r24, 0x10	; 16
    10b2:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    10b6:	bd d0       	rcall	.+378    	; 0x1232 <Pipe_WaitUntilReady>
    10b8:	f8 2e       	mov	r15, r24
    10ba:	88 23       	and	r24, r24
    10bc:	b1 f5       	brne	.+108    	; 0x112a <Pipe_Read_Stream_LE+0x98>
    10be:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    10c0:	d1 04       	cpc	r13, r1
    10c2:	41 f0       	breq	.+16     	; 0x10d4 <Pipe_Read_Stream_LE+0x42>
    10c4:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
    10c6:	00 81       	ld	r16, Z
    10c8:	11 81       	ldd	r17, Z+1	; 0x01
    10ca:	c0 1b       	sub	r28, r16
    10cc:	d1 0b       	sbc	r29, r17
    10ce:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    10d0:	1b 1d       	adc	r17, r11
    10d2:	01 c0       	rjmp	.+2      	; 0x10d6 <Pipe_Read_Stream_LE+0x44>
    10d4:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    10d6:	aa 24       	eor	r10, r10
    10d8:	bb 24       	eor	r11, r11
    10da:	23 c0       	rjmp	.+70     	; 0x1122 <Pipe_Read_Stream_LE+0x90>
    10dc:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    10e0:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    10e2:	16 c0       	rjmp	.+44     	; 0x1110 <Pipe_Read_Stream_LE+0x7e>
    10e4:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10e8:	8e 77       	andi	r24, 0x7E	; 126
    10ea:	80 93 a6 00 	sts	0x00A6, r24
    10ee:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    10f0:	d1 04       	cpc	r13, r1
    10f2:	51 f0       	breq	.+20     	; 0x1108 <Pipe_Read_Stream_LE+0x76>
    10f4:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
    10f6:	80 81       	ld	r24, Z
    10f8:	91 81       	ldd	r25, Z+1	; 0x01
    10fa:	8a 0d       	add	r24, r10
    10fc:	9b 1d       	adc	r25, r11
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	80 83       	st	Z, r24
    1102:	64 e0       	ldi	r22, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
    1104:	f6 2e       	mov	r15, r22
    1106:	11 c0       	rjmp	.+34     	; 0x112a <Pipe_Read_Stream_LE+0x98>
    1108:	94 d0       	rcall	.+296    	; 0x1232 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    110a:	88 23       	and	r24, r24
    110c:	51 f0       	breq	.+20     	; 0x1122 <Pipe_Read_Stream_LE+0x90>
    110e:	0c c0       	rjmp	.+24     	; 0x1128 <Pipe_Read_Stream_LE+0x96>
    1110:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1114:	f8 01       	movw	r30, r16
    1116:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1118:	8f 01       	movw	r16, r30
    111a:	21 97       	sbiw	r28, 0x01	; 1
    111c:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    111e:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
    1120:	b1 1c       	adc	r11, r1
    1122:	20 97       	sbiw	r28, 0x00	; 0
    1124:	d9 f6       	brne	.-74     	; 0x10dc <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1126:	01 c0       	rjmp	.+2      	; 0x112a <Pipe_Read_Stream_LE+0x98>
    1128:	f8 2e       	mov	r15, r24
    112a:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    112c:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	df 90       	pop	r13
    1138:	cf 90       	pop	r12
    113a:	bf 90       	pop	r11
    113c:	af 90       	pop	r10
    113e:	08 95       	ret

00001140 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    1140:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    1142:	58 2f       	mov	r21, r24
    1144:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    1146:	87 ff       	sbrs	r24, 7
    1148:	02 c0       	rjmp	.+4      	; 0x114e <Pipe_ConfigurePipe+0xe>
    114a:	80 e1       	ldi	r24, 0x10	; 16
    114c:	01 c0       	rjmp	.+2      	; 0x1150 <Pipe_ConfigurePipe+0x10>
    114e:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
    1150:	57 30       	cpi	r21, 0x07	; 7
    1152:	08 f0       	brcs	.+2      	; 0x1156 <Pipe_ConfigurePipe+0x16>
    1154:	57 c0       	rjmp	.+174    	; 0x1204 <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
    1156:	66 23       	and	r22, r22
    1158:	09 f4       	brne	.+2      	; 0x115c <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
    115a:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    115c:	4f 70       	andi	r20, 0x0F	; 15
    115e:	62 95       	swap	r22
    1160:	66 0f       	add	r22, r22
    1162:	66 0f       	add	r22, r22
    1164:	60 7c       	andi	r22, 0xC0	; 192
    1166:	64 2b       	or	r22, r20
    1168:	68 2b       	or	r22, r24
    116a:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    116c:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    116e:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    1172:	45 17       	cp	r20, r21
    1174:	a9 f4       	brne	.+42     	; 0x11a0 <Pipe_ConfigurePipe+0x60>
    1176:	04 c0       	rjmp	.+8      	; 0x1180 <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    1178:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	03 c0       	rjmp	.+6      	; 0x1186 <Pipe_ConfigurePipe+0x46>
    1180:	88 e0       	ldi	r24, 0x08	; 8
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    1186:	82 17       	cp	r24, r18
    1188:	93 07       	cpc	r25, r19
    118a:	10 f4       	brcc	.+4      	; 0x1190 <Pipe_ConfigurePipe+0x50>
    118c:	75 30       	cpi	r23, 0x05	; 5
    118e:	a1 f7       	brne	.-24     	; 0x1178 <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    1190:	87 2f       	mov	r24, r23
    1192:	82 95       	swap	r24
    1194:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    1196:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    1198:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    119a:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    119c:	e0 e0       	ldi	r30, 0x00	; 0
    119e:	08 c0       	rjmp	.+16     	; 0x11b0 <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    11a0:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    11a4:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    11a8:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
    11ac:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    11b0:	81 ff       	sbrs	r24, 1
    11b2:	20 c0       	rjmp	.+64     	; 0x11f4 <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    11b4:	90 91 a9 00 	lds	r25, 0x00A9
    11b8:	9e 7f       	andi	r25, 0xFE	; 254
    11ba:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    11be:	90 91 ab 00 	lds	r25, 0x00AB
    11c2:	9d 7f       	andi	r25, 0xFD	; 253
    11c4:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    11c8:	90 91 a9 00 	lds	r25, 0x00A9
    11cc:	91 60       	ori	r25, 0x01	; 1
    11ce:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    11d2:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    11d6:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    11da:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
    11de:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    11e2:	80 91 a9 00 	lds	r24, 0x00A9
    11e6:	80 62       	ori	r24, 0x20	; 32
    11e8:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    11ec:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    11f0:	87 ff       	sbrs	r24, 7
    11f2:	08 c0       	rjmp	.+16     	; 0x1204 <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    11f4:	4f 5f       	subi	r20, 0xFF	; 255
    11f6:	47 30       	cpi	r20, 0x07	; 7
    11f8:	09 f0       	breq	.+2      	; 0x11fc <Pipe_ConfigurePipe+0xbc>
    11fa:	b9 cf       	rjmp	.-142    	; 0x116e <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    11fc:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	01 c0       	rjmp	.+2      	; 0x1206 <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
    1204:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    1206:	0f 91       	pop	r16
    1208:	08 95       	ret

0000120a <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    120a:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    1214:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    1218:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    121c:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1220:	90 91 a9 00 	lds	r25, 0x00A9
    1224:	9e 7f       	andi	r25, 0xFE	; 254
    1226:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    122a:	8f 5f       	subi	r24, 0xFF	; 255
    122c:	87 30       	cpi	r24, 0x07	; 7
    122e:	81 f7       	brne	.-32     	; 0x1210 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    1230:	08 95       	ret

00001232 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1232:	80 91 a2 00 	lds	r24, 0x00A2
    1236:	90 91 a3 00 	lds	r25, 0x00A3
    123a:	45 e6       	ldi	r20, 0x65	; 101
    123c:	01 c0       	rjmp	.+2      	; 0x1240 <Pipe_WaitUntilReady+0xe>
    123e:	c9 01       	movw	r24, r18
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    1240:	20 91 aa 00 	lds	r18, 0x00AA
    1244:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1246:	20 31       	cpi	r18, 0x10	; 16
    1248:	29 f4       	brne	.+10     	; 0x1254 <Pipe_WaitUntilReady+0x22>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    124a:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    124e:	20 ff       	sbrs	r18, 0
    1250:	05 c0       	rjmp	.+10     	; 0x125c <Pipe_WaitUntilReady+0x2a>
    1252:	17 c0       	rjmp	.+46     	; 0x1282 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1254:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    1258:	22 fd       	sbrc	r18, 2
    125a:	13 c0       	rjmp	.+38     	; 0x1282 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    125c:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    1260:	21 fd       	sbrc	r18, 1
    1262:	11 c0       	rjmp	.+34     	; 0x1286 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    1264:	20 91 6f 01 	lds	r18, 0x016F
    1268:	21 30       	cpi	r18, 0x01	; 1
    126a:	79 f0       	breq	.+30     	; 0x128a <Pipe_WaitUntilReady+0x58>
    126c:	20 91 a2 00 	lds	r18, 0x00A2
    1270:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1274:	28 17       	cp	r18, r24
    1276:	39 07       	cpc	r19, r25
    1278:	19 f3       	breq	.-58     	; 0x1240 <Pipe_WaitUntilReady+0xe>
    127a:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    127c:	01 f7       	brne	.-64     	; 0x123e <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_Timeout;
    127e:	83 e0       	ldi	r24, 0x03	; 3
    1280:	08 95       	ret
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    128a:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
    128c:	08 95       	ret

0000128e <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    128e:	75 d0       	rcall	.+234    	; 0x137a <USB_INT_DisableAllInterrupts>
    1290:	7c d0       	rcall	.+248    	; 0x138a <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1292:	e0 ee       	ldi	r30, 0xE0	; 224
    1294:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1296:	80 81       	ld	r24, Z
    1298:	81 60       	ori	r24, 0x01	; 1
    129a:	80 83       	st	Z, r24
    129c:	e8 ed       	ldi	r30, 0xD8	; 216
    129e:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    12a0:	80 81       	ld	r24, Z
    12a2:	8f 77       	andi	r24, 0x7F	; 127
    12a4:	80 83       	st	Z, r24
    12a6:	19 bc       	out	0x29, r1	; 41
    12a8:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    12aa:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    12ac:	8c 91       	ld	r24, X
    12ae:	8e 7f       	andi	r24, 0xFE	; 254
    12b0:	8c 93       	st	X, r24
    12b2:	80 81       	ld	r24, Z
    12b4:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    12b6:	80 83       	st	Z, r24
    12b8:	10 92 66 01 	sts	0x0166, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    12bc:	08 95       	ret

000012be <USB_ResetInterface>:
    12be:	5d d0       	rcall	.+186    	; 0x137a <USB_INT_DisableAllInterrupts>
}
    12c0:	64 d0       	rcall	.+200    	; 0x138a <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    12c2:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    12c6:	8f 77       	andi	r24, 0x7F	; 127
    12c8:	80 93 d8 00 	sts	0x00D8, r24
    12cc:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    12d0:	80 68       	ori	r24, 0x80	; 128
    12d2:	80 93 d8 00 	sts	0x00D8, r24
    12d6:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    12da:	8f 7d       	andi	r24, 0xDF	; 223
    12dc:	80 93 d8 00 	sts	0x00D8, r24
    12e0:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    12e4:	8f 77       	andi	r24, 0x7F	; 127
    12e6:	80 93 d7 00 	sts	0x00D7, r24
    12ea:	8c e0       	ldi	r24, 0x0C	; 12
    12ec:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    12ee:	8e e0       	ldi	r24, 0x0E	; 14
    12f0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    12f2:	09 b4       	in	r0, 0x29	; 41
    12f4:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    12f6:	fd cf       	rjmp	.-6      	; 0x12f2 <USB_ResetInterface+0x34>
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	80 93 6f 01 	sts	0x016F, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    12fe:	10 92 65 01 	sts	0x0165, r1
	USB_Host_ConfigurationNumber = 0;
    1302:	80 e4       	ldi	r24, 0x40	; 64
    1304:	80 93 10 01 	sts	0x0110, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    1308:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    130c:	80 64       	ori	r24, 0x40	; 64
    130e:	80 93 d8 00 	sts	0x00D8, r24
    1312:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1316:	81 60       	ori	r24, 0x01	; 1
    1318:	80 93 dd 00 	sts	0x00DD, r24
    131c:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    1320:	84 60       	ori	r24, 0x04	; 4
    1322:	80 93 dd 00 	sts	0x00DD, r24
    1326:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
    132a:	8f 7e       	andi	r24, 0xEF	; 239
    132c:	80 93 d7 00 	sts	0x00D7, r24
    1330:	6f 9a       	sbi	0x0d, 7	; 13
    1332:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
    1334:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    1338:	81 60       	ori	r24, 0x01	; 1
    133a:	80 93 de 00 	sts	0x00DE, r24
    133e:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1342:	84 60       	ori	r24, 0x04	; 4
    1344:	80 93 de 00 	sts	0x00DE, r24
    1348:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    134c:	8e 7f       	andi	r24, 0xFE	; 254
    134e:	80 93 e0 00 	sts	0x00E0, r24
    1352:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1356:	80 61       	ori	r24, 0x10	; 16
    1358:	80 93 d8 00 	sts	0x00D8, r24
    135c:	08 95       	ret

0000135e <USB_Init>:
    135e:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1360:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1362:	80 81       	ld	r24, Z
    1364:	8f 7e       	andi	r24, 0xEF	; 239
    1366:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1368:	e7 ed       	ldi	r30, 0xD7	; 215
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	81 60       	ori	r24, 0x01	; 1
    1370:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	80 93 66 01 	sts	0x0166, r24

	USB_ResetInterface();
    1378:	a2 cf       	rjmp	.-188    	; 0x12be <USB_ResetInterface>

0000137a <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    137a:	e8 ed       	ldi	r30, 0xD8	; 216
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	8c 7f       	andi	r24, 0xFC	; 252
    1382:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    1384:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    1388:	08 95       	ret

0000138a <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    138a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    138e:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    1392:	08 95       	ret

00001394 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1394:	1f 92       	push	r1
    1396:	0f 92       	push	r0
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	0f 92       	push	r0
    139c:	0b b6       	in	r0, 0x3b	; 59
    139e:	0f 92       	push	r0
    13a0:	11 24       	eor	r1, r1
    13a2:	2f 93       	push	r18
    13a4:	3f 93       	push	r19
    13a6:	4f 93       	push	r20
    13a8:	5f 93       	push	r21
    13aa:	6f 93       	push	r22
    13ac:	7f 93       	push	r23
    13ae:	8f 93       	push	r24
    13b0:	9f 93       	push	r25
    13b2:	af 93       	push	r26
    13b4:	bf 93       	push	r27
    13b6:	ef 93       	push	r30
    13b8:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    13ba:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    13be:	85 ff       	sbrs	r24, 5
    13c0:	0a c0       	rjmp	.+20     	; 0x13d6 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    13c2:	80 91 a0 00 	lds	r24, 0x00A0
    13c6:	85 ff       	sbrs	r24, 5
    13c8:	06 c0       	rjmp	.+12     	; 0x13d6 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    13ca:	80 91 9f 00 	lds	r24, 0x009F
    13ce:	8f 7d       	andi	r24, 0xDF	; 223
    13d0:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    13d4:	14 d1       	rcall	.+552    	; 0x15fe <USB_Event_Stub>
    13d6:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    13da:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    13dc:	16 c0       	rjmp	.+44     	; 0x140a <__vector_10+0x76>
    13de:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    13e2:	81 ff       	sbrs	r24, 1
    13e4:	12 c0       	rjmp	.+36     	; 0x140a <__vector_10+0x76>
    13e6:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    13ea:	8d 7f       	andi	r24, 0xFD	; 253
    13ec:	80 93 9f 00 	sts	0x009F, r24
    13f0:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    13f4:	8e 7f       	andi	r24, 0xFE	; 254
    13f6:	80 93 9f 00 	sts	0x009F, r24
    13fa:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    13fe:	8d 7f       	andi	r24, 0xFD	; 253
    1400:	80 93 a0 00 	sts	0x00A0, r24
    1404:	0e 94 f5 01 	call	0x3ea	; 0x3ea <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    1408:	5a df       	rcall	.-332    	; 0x12be <USB_ResetInterface>

		USB_ResetInterface();
    140a:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    140e:	81 ff       	sbrs	r24, 1
    1410:	16 c0       	rjmp	.+44     	; 0x143e <__vector_10+0xaa>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1412:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    1416:	81 ff       	sbrs	r24, 1
    1418:	12 c0       	rjmp	.+36     	; 0x143e <__vector_10+0xaa>
    141a:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    141e:	8d 7f       	andi	r24, 0xFD	; 253
    1420:	80 93 df 00 	sts	0x00DF, r24
    1424:	77 98       	cbi	0x0e, 7	; 14
    1426:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    142a:	81 60       	ori	r24, 0x01	; 1
    142c:	80 93 dd 00 	sts	0x00DD, r24
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	26 d8       	rcall	.-4020   	; 0x480 <EVENT_USB_Host_HostError>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1434:	0e 94 f5 01 	call	0x3ea	; 0x3ea <EVENT_USB_Host_DeviceUnattached>
    1438:	81 e0       	ldi	r24, 0x01	; 1
		EVENT_USB_Host_DeviceUnattached();
    143a:	80 93 6f 01 	sts	0x016F, r24

		USB_HostState = HOST_STATE_Unattached;
    143e:	80 91 df 00 	lds	r24, 0x00DF
    1442:	80 ff       	sbrs	r24, 0
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1444:	18 c0       	rjmp	.+48     	; 0x1476 <__vector_10+0xe2>
    1446:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    144a:	80 ff       	sbrs	r24, 0
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    144c:	14 c0       	rjmp	.+40     	; 0x1476 <__vector_10+0xe2>
    144e:	80 91 df 00 	lds	r24, 0x00DF
    1452:	8e 7f       	andi	r24, 0xFE	; 254
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1454:	80 93 df 00 	sts	0x00DF, r24
    1458:	80 91 de 00 	lds	r24, 0x00DE
    145c:	8e 7f       	andi	r24, 0xFE	; 254
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    145e:	80 93 de 00 	sts	0x00DE, r24
    1462:	0e 94 ef 01 	call	0x3de	; 0x3de <EVENT_USB_Host_DeviceAttached>
    1466:	80 91 a0 00 	lds	r24, 0x00A0
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    146a:	82 60       	ori	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    146c:	80 93 a0 00 	sts	0x00A0, r24
    1470:	82 e0       	ldi	r24, 0x02	; 2
    1472:	80 93 6f 01 	sts	0x016F, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1476:	80 91 df 00 	lds	r24, 0x00DF
    147a:	82 ff       	sbrs	r24, 2
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    147c:	0f c0       	rjmp	.+30     	; 0x149c <__vector_10+0x108>
    147e:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1482:	82 ff       	sbrs	r24, 2
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1484:	0b c0       	rjmp	.+22     	; 0x149c <__vector_10+0x108>
    1486:	80 91 df 00 	lds	r24, 0x00DF
    148a:	8b 7f       	andi	r24, 0xFB	; 251
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    148c:	80 93 df 00 	sts	0x00DF, r24
    1490:	82 e0       	ldi	r24, 0x02	; 2
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	15 d8       	rcall	.-4054   	; 0x4c0 <EVENT_USB_Host_DeviceEnumerationFailed>
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1496:	0e 94 f5 01 	call	0x3ea	; 0x3ea <EVENT_USB_Host_DeviceUnattached>
    149a:	11 df       	rcall	.-478    	; 0x12be <USB_ResetInterface>
    149c:	ff 91       	pop	r31
		EVENT_USB_Host_DeviceUnattached();
    149e:	ef 91       	pop	r30
    14a0:	bf 91       	pop	r27

		USB_ResetInterface();
    14a2:	af 91       	pop	r26
    14a4:	9f 91       	pop	r25
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    14a6:	8f 91       	pop	r24
    14a8:	7f 91       	pop	r23
    14aa:	6f 91       	pop	r22
    14ac:	5f 91       	pop	r21
    14ae:	4f 91       	pop	r20
    14b0:	3f 91       	pop	r19
    14b2:	2f 91       	pop	r18
    14b4:	0f 90       	pop	r0
    14b6:	0b be       	out	0x3b, r0	; 59
    14b8:	0f 90       	pop	r0
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	0f 90       	pop	r0
    14be:	1f 90       	pop	r1
    14c0:	18 95       	reti

000014c2 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    14c2:	cf 92       	push	r12
    14c4:	df 92       	push	r13
    14c6:	ef 92       	push	r14
    14c8:	ff 92       	push	r15
    14ca:	0f 93       	push	r16
    14cc:	1f 93       	push	r17
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	29 97       	sbiw	r28, 0x09	; 9
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	6b 01       	movw	r12, r22
    14e4:	8a 01       	movw	r16, r20
    14e6:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    14e8:	90 e8       	ldi	r25, 0x80	; 128
    14ea:	90 93 67 01 	sts	0x0167, r25
    14ee:	96 e0       	ldi	r25, 0x06	; 6
    14f0:	90 93 68 01 	sts	0x0168, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	01 97       	sbiw	r24, 0x01	; 1
    14f8:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    14fa:	90 93 6a 01 	sts	0x016A, r25
    14fe:	80 93 69 01 	sts	0x0169, r24
    1502:	10 92 6c 01 	sts	0x016C, r1
    1506:	10 92 6b 01 	sts	0x016B, r1
    150a:	89 e0       	ldi	r24, 0x09	; 9
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	90 93 6e 01 	sts	0x016E, r25
    1512:	80 93 6d 01 	sts	0x016D, r24
    1516:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    151a:	ce 01       	movw	r24, r28
    151c:	01 96       	adiw	r24, 0x01	; 1
    151e:	98 d0       	rcall	.+304    	; 0x1650 <USB_Host_SendControlRequest>
    1520:	88 23       	and	r24, r24
    1522:	b9 f4       	brne	.+46     	; 0x1552 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	f6 01       	movw	r30, r12
    152a:	91 83       	std	Z+1, r25	; 0x01
    152c:	80 83       	st	Z, r24
    152e:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
    1530:	f9 06       	cpc	r15, r25
    1532:	70 f0       	brcs	.+28     	; 0x1550 <USB_Host_GetDeviceConfigDescriptor+0x8e>
    1534:	90 93 6e 01 	sts	0x016E, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1538:	80 93 6d 01 	sts	0x016D, r24
    153c:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    153e:	88 d0       	rcall	.+272    	; 0x1650 <USB_Host_SendControlRequest>
    1540:	88 23       	and	r24, r24
    1542:	39 f4       	brne	.+14     	; 0x1552 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1544:	f8 01       	movw	r30, r16
    1546:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1548:	92 30       	cpi	r25, 0x02	; 2
    154a:	19 f0       	breq	.+6      	; 0x1552 <USB_Host_GetDeviceConfigDescriptor+0x90>
    154c:	86 e0       	ldi	r24, 0x06	; 6
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    1550:	85 e0       	ldi	r24, 0x05	; 5
    1552:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1554:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1556:	f8 94       	cli
    1558:	de bf       	out	0x3e, r29	; 62
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	ff 90       	pop	r15
    1568:	ef 90       	pop	r14
    156a:	df 90       	pop	r13
    156c:	cf 90       	pop	r12
    156e:	08 95       	ret

00001570 <USB_GetNextDescriptorComp>:
    1570:	af 92       	push	r10
    1572:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1574:	cf 92       	push	r12
    1576:	df 92       	push	r13
    1578:	ef 92       	push	r14
    157a:	ff 92       	push	r15
    157c:	0f 93       	push	r16
    157e:	1f 93       	push	r17
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	7c 01       	movw	r14, r24
    1586:	8b 01       	movw	r16, r22
    1588:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    158a:	28 c0       	rjmp	.+80     	; 0x15dc <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    158c:	f8 01       	movw	r30, r16
    158e:	c0 80       	ld	r12, Z
    1590:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1592:	f6 01       	movw	r30, r12
    1594:	80 81       	ld	r24, Z
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	9e 01       	movw	r18, r28
    159a:	8c 17       	cp	r24, r28
    159c:	9d 07       	cpc	r25, r29
    159e:	08 f4       	brcc	.+2      	; 0x15a2 <USB_GetNextDescriptorComp+0x32>
    15a0:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    15a2:	c6 01       	movw	r24, r12
    15a4:	82 0f       	add	r24, r18
    15a6:	93 1f       	adc	r25, r19
    15a8:	f8 01       	movw	r30, r16
    15aa:	91 83       	std	Z+1, r25	; 0x01
    15ac:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
    15ae:	f7 01       	movw	r30, r14
    15b0:	80 81       	ld	r24, Z
    15b2:	91 81       	ldd	r25, Z+1	; 0x01
    15b4:	82 1b       	sub	r24, r18
    15b6:	93 0b       	sbc	r25, r19
    15b8:	91 83       	std	Z+1, r25	; 0x01
    15ba:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    15bc:	f8 01       	movw	r30, r16
    15be:	80 81       	ld	r24, Z
    15c0:	91 81       	ldd	r25, Z+1	; 0x01
    15c2:	f5 01       	movw	r30, r10
    15c4:	09 95       	icall
    15c6:	82 30       	cpi	r24, 0x02	; 2
    15c8:	49 f0       	breq	.+18     	; 0x15dc <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    15ca:	81 30       	cpi	r24, 0x01	; 1
    15cc:	69 f4       	brne	.+26     	; 0x15e8 <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
    15ce:	f8 01       	movw	r30, r16
    15d0:	d1 82       	std	Z+1, r13	; 0x01
    15d2:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
    15d4:	f7 01       	movw	r30, r14
    15d6:	d1 83       	std	Z+1, r29	; 0x01
    15d8:	c0 83       	st	Z, r28
    15da:	06 c0       	rjmp	.+12     	; 0x15e8 <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    15dc:	f7 01       	movw	r30, r14
    15de:	c0 81       	ld	r28, Z
    15e0:	d1 81       	ldd	r29, Z+1	; 0x01
    15e2:	20 97       	sbiw	r28, 0x00	; 0
    15e4:	99 f6       	brne	.-90     	; 0x158c <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    15e6:	82 e0       	ldi	r24, 0x02	; 2
}
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	1f 91       	pop	r17
    15ee:	0f 91       	pop	r16
    15f0:	ff 90       	pop	r15
    15f2:	ef 90       	pop	r14
    15f4:	df 90       	pop	r13
    15f6:	cf 90       	pop	r12
    15f8:	bf 90       	pop	r11
    15fa:	af 90       	pop	r10
    15fc:	08 95       	ret

000015fe <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    15fe:	08 95       	ret

00001600 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1600:	1f 93       	push	r17
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1608:	c9 ee       	ldi	r28, 0xE9	; 233
    160a:	d3 e0       	ldi	r29, 0x03	; 3
    160c:	06 c0       	rjmp	.+12     	; 0x161a <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	6b db       	rcall	.-2346   	; 0xce8 <USB_Host_WaitMS>
    1612:	88 23       	and	r24, r24
    1614:	c9 f4       	brne	.+50     	; 0x1648 <USB_Host_WaitForIOS+0x48>
    1616:	21 97       	sbiw	r28, 0x01	; 1
    1618:	b1 f0       	breq	.+44     	; 0x1646 <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    161a:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    161c:	29 f4       	brne	.+10     	; 0x1628 <USB_Host_WaitForIOS+0x28>
    161e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1622:	83 ff       	sbrs	r24, 3
    1624:	f4 cf       	rjmp	.-24     	; 0x160e <USB_Host_WaitForIOS+0xe>
    1626:	0d c0       	rjmp	.+26     	; 0x1642 <USB_Host_WaitForIOS+0x42>
    1628:	11 30       	cpi	r17, 0x01	; 1
    162a:	29 f4       	brne	.+10     	; 0x1636 <USB_Host_WaitForIOS+0x36>
    162c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1630:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1632:	ed cf       	rjmp	.-38     	; 0x160e <USB_Host_WaitForIOS+0xe>
    1634:	06 c0       	rjmp	.+12     	; 0x1642 <USB_Host_WaitForIOS+0x42>
    1636:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1638:	51 f7       	brne	.-44     	; 0x160e <USB_Host_WaitForIOS+0xe>
    163a:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    163e:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1640:	e6 cf       	rjmp	.-52     	; 0x160e <USB_Host_WaitForIOS+0xe>
    1642:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1644:	01 c0       	rjmp	.+2      	; 0x1648 <USB_Host_WaitForIOS+0x48>
    1646:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1648:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
    164a:	cf 91       	pop	r28
    164c:	1f 91       	pop	r17
    164e:	08 95       	ret

00001650 <USB_Host_SendControlRequest>:
    1650:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1652:	ff 92       	push	r15
    1654:	0f 93       	push	r16
    1656:	1f 93       	push	r17
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    165e:	e0 90 9e 00 	lds	r14, 0x009E
    1662:	ff 24       	eor	r15, r15
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	e8 22       	and	r14, r24
    1668:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    166a:	00 91 6d 01 	lds	r16, 0x016D
    166e:	10 91 6e 01 	lds	r17, 0x016E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1672:	80 91 9e 00 	lds	r24, 0x009E
    1676:	81 60       	ori	r24, 0x01	; 1
    1678:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	34 db       	rcall	.-2456   	; 0xce8 <USB_Host_WaitMS>
    1680:	88 23       	and	r24, r24
    1682:	09 f0       	breq	.+2      	; 0x1686 <USB_Host_SendControlRequest+0x36>
    1684:	ca c0       	rjmp	.+404    	; 0x181a <USB_Host_SendControlRequest+0x1ca>
    1686:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    168a:	8f 7c       	andi	r24, 0xCF	; 207
    168c:	80 93 aa 00 	sts	0x00AA, r24
    1690:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1694:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    1698:	8f 7e       	andi	r24, 0xEF	; 239
    169a:	80 93 a6 00 	sts	0x00A6, r24
    169e:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    16a2:	8f 7b       	andi	r24, 0xBF	; 191
    16a4:	80 93 a9 00 	sts	0x00A9, r24
    16a8:	88 e0       	ldi	r24, 0x08	; 8
    16aa:	e7 e6       	ldi	r30, 0x67	; 103
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    16ac:	f1 e0       	ldi	r31, 0x01	; 1
    16ae:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    16b0:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    16b4:	81 50       	subi	r24, 0x01	; 1
    16b6:	d9 f7       	brne	.-10     	; 0x16ae <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    16b8:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    16bc:	87 77       	andi	r24, 0x77	; 119
    16be:	80 93 a6 00 	sts	0x00A6, r24
    16c2:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    16c4:	9d df       	rcall	.-198    	; 0x1600 <USB_Host_WaitForIOS>
    16c6:	88 23       	and	r24, r24
    16c8:	09 f0       	breq	.+2      	; 0x16cc <USB_Host_SendControlRequest+0x7c>
    16ca:	a7 c0       	rjmp	.+334    	; 0x181a <USB_Host_SendControlRequest+0x1ca>
    16cc:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    16d0:	80 64       	ori	r24, 0x40	; 64
    16d2:	80 93 a9 00 	sts	0x00A9, r24
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	07 db       	rcall	.-2546   	; 0xce8 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    16da:	88 23       	and	r24, r24
    16dc:	09 f0       	breq	.+2      	; 0x16e0 <USB_Host_SendControlRequest+0x90>
    16de:	9d c0       	rjmp	.+314    	; 0x181a <USB_Host_SendControlRequest+0x1ca>
    16e0:	80 91 67 01 	lds	r24, 0x0167
    16e4:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    16e6:	4f c0       	rjmp	.+158    	; 0x1786 <USB_Host_SendControlRequest+0x136>
    16e8:	80 91 aa 00 	lds	r24, 0x00AA
    16ec:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    16ee:	80 61       	ori	r24, 0x10	; 16
    16f0:	80 93 aa 00 	sts	0x00AA, r24
    16f4:	20 97       	sbiw	r28, 0x00	; 0
    16f6:	61 f5       	brne	.+88     	; 0x1750 <USB_Host_SendControlRequest+0x100>
    16f8:	2e c0       	rjmp	.+92     	; 0x1756 <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    16fa:	80 91 a9 00 	lds	r24, 0x00A9
    16fe:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1700:	80 93 a9 00 	sts	0x00A9, r24
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	7c df       	rcall	.-264    	; 0x1600 <USB_Host_WaitForIOS>
    1708:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    170a:	09 f0       	breq	.+2      	; 0x170e <USB_Host_SendControlRequest+0xbe>
    170c:	86 c0       	rjmp	.+268    	; 0x181a <USB_Host_SendControlRequest+0x1ca>
    170e:	80 91 f6 00 	lds	r24, 0x00F6
    1712:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	41 f4       	brne	.+16     	; 0x172a <USB_Host_SendControlRequest+0xda>
    171a:	00 e0       	ldi	r16, 0x00	; 0
    171c:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    171e:	05 c0       	rjmp	.+10     	; 0x172a <USB_Host_SendControlRequest+0xda>
    1720:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
    1724:	89 93       	st	Y+, r24
    1726:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1728:	10 40       	sbci	r17, 0x00	; 0
    172a:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
    172e:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	19 f0       	breq	.+6      	; 0x173c <USB_Host_SendControlRequest+0xec>
    1736:	01 15       	cp	r16, r1
    1738:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    173a:	91 f7       	brne	.-28     	; 0x1720 <USB_Host_SendControlRequest+0xd0>
    173c:	80 91 a9 00 	lds	r24, 0x00A9
    1740:	80 64       	ori	r24, 0x40	; 64
    1742:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1746:	80 91 a6 00 	lds	r24, 0x00A6
    174a:	8e 77       	andi	r24, 0x7E	; 126
    174c:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1750:	01 15       	cp	r16, r1
    1752:	11 05       	cpc	r17, r1
    1754:	91 f6       	brne	.-92     	; 0x16fa <USB_Host_SendControlRequest+0xaa>
    1756:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    175a:	8f 7c       	andi	r24, 0xCF	; 207
    175c:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    175e:	80 93 aa 00 	sts	0x00AA, r24
    1762:	80 91 a9 00 	lds	r24, 0x00A9
    1766:	8f 7b       	andi	r24, 0xBF	; 191
    1768:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    176c:	82 e0       	ldi	r24, 0x02	; 2
    176e:	48 df       	rcall	.-368    	; 0x1600 <USB_Host_WaitForIOS>
    1770:	88 23       	and	r24, r24
    1772:	09 f0       	breq	.+2      	; 0x1776 <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1774:	52 c0       	rjmp	.+164    	; 0x181a <USB_Host_SendControlRequest+0x1ca>
    1776:	80 91 a6 00 	lds	r24, 0x00A6
    177a:	8b 77       	andi	r24, 0x7B	; 123
    177c:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1780:	82 e0       	ldi	r24, 0x02	; 2
    1782:	3e df       	rcall	.-388    	; 0x1600 <USB_Host_WaitForIOS>
    1784:	4a c0       	rjmp	.+148    	; 0x181a <USB_Host_SendControlRequest+0x1ca>
    1786:	20 97       	sbiw	r28, 0x00	; 0
    1788:	a1 f1       	breq	.+104    	; 0x17f2 <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    178a:	80 91 aa 00 	lds	r24, 0x00AA
    178e:	8f 7c       	andi	r24, 0xCF	; 207
    1790:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1792:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1796:	80 91 a9 00 	lds	r24, 0x00A9
    179a:	8f 7b       	andi	r24, 0xBF	; 191
    179c:	80 93 a9 00 	sts	0x00A9, r24
    17a0:	1c c0       	rjmp	.+56     	; 0x17da <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    17a2:	2e df       	rcall	.-420    	; 0x1600 <USB_Host_WaitForIOS>
    17a4:	88 23       	and	r24, r24
    17a6:	c9 f5       	brne	.+114    	; 0x181a <USB_Host_SendControlRequest+0x1ca>
    17a8:	fe 01       	movw	r30, r28
    17aa:	07 c0       	rjmp	.+14     	; 0x17ba <USB_Host_SendControlRequest+0x16a>
    17ac:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    17ae:	ef 01       	movw	r28, r30
    17b0:	80 93 af 00 	sts	0x00AF, r24
    17b4:	01 50       	subi	r16, 0x01	; 1
    17b6:	10 40       	sbci	r17, 0x00	; 0
    17b8:	59 f0       	breq	.+22     	; 0x17d0 <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    17ba:	ef 01       	movw	r28, r30
    17bc:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    17c0:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    17c4:	80 91 10 01 	lds	r24, 0x0110
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    17c8:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    17ca:	28 17       	cp	r18, r24
    17cc:	39 07       	cpc	r19, r25
    17ce:	70 f3       	brcs	.-36     	; 0x17ac <USB_Host_SendControlRequest+0x15c>
    17d0:	80 91 a6 00 	lds	r24, 0x00A6
    17d4:	8b 77       	andi	r24, 0x7B	; 123
    17d6:	80 93 a6 00 	sts	0x00A6, r24
    17da:	82 e0       	ldi	r24, 0x02	; 2
    17dc:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    17de:	11 05       	cpc	r17, r1
    17e0:	01 f7       	brne	.-64     	; 0x17a2 <USB_Host_SendControlRequest+0x152>
    17e2:	0e df       	rcall	.-484    	; 0x1600 <USB_Host_WaitForIOS>
    17e4:	88 23       	and	r24, r24
    17e6:	c9 f4       	brne	.+50     	; 0x181a <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    17e8:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    17ec:	80 64       	ori	r24, 0x40	; 64
    17ee:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    17f2:	80 91 aa 00 	lds	r24, 0x00AA
    17f6:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    17f8:	80 61       	ori	r24, 0x10	; 16
    17fa:	80 93 aa 00 	sts	0x00AA, r24
    17fe:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1802:	8f 7b       	andi	r24, 0xBF	; 191
    1804:	80 93 a9 00 	sts	0x00A9, r24
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	fa de       	rcall	.-524    	; 0x1600 <USB_Host_WaitForIOS>
    180c:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    180e:	29 f4       	brne	.+10     	; 0x181a <USB_Host_SendControlRequest+0x1ca>
    1810:	90 91 a6 00 	lds	r25, 0x00A6
    1814:	9e 77       	andi	r25, 0x7E	; 126
    1816:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    181a:	90 91 a9 00 	lds	r25, 0x00A9
    181e:	90 64       	ori	r25, 0x40	; 64
    1820:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1824:	e1 14       	cp	r14, r1
    1826:	f1 04       	cpc	r15, r1
    1828:	29 f4       	brne	.+10     	; 0x1834 <USB_Host_SendControlRequest+0x1e4>
    182a:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    182e:	9e 7f       	andi	r25, 0xFE	; 254
    1830:	90 93 9e 00 	sts	0x009E, r25
    1834:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1836:	90 93 a8 00 	sts	0x00A8, r25
    183a:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	1f 91       	pop	r17
    1844:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1846:	ff 90       	pop	r15
    1848:	ef 90       	pop	r14
    184a:	08 95       	ret

0000184c <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    184c:	cf 93       	push	r28
    184e:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1850:	10 92 67 01 	sts	0x0167, r1
    1854:	89 e0       	ldi	r24, 0x09	; 9
    1856:	80 93 68 01 	sts	0x0168, r24
    185a:	c0 93 69 01 	sts	0x0169, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    185e:	10 92 6a 01 	sts	0x016A, r1
    1862:	10 92 6c 01 	sts	0x016C, r1
    1866:	10 92 6b 01 	sts	0x016B, r1
    186a:	10 92 6e 01 	sts	0x016E, r1
    186e:	10 92 6d 01 	sts	0x016D, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1872:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	ea de       	rcall	.-556    	; 0x1650 <USB_Host_SendControlRequest>
    187c:	88 23       	and	r24, r24
    187e:	49 f4       	brne	.+18     	; 0x1892 <USB_Host_SetDeviceConfiguration+0x46>
    1880:	c0 93 65 01 	sts	0x0165, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1884:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1886:	11 f0       	breq	.+4      	; 0x188c <USB_Host_SetDeviceConfiguration+0x40>
    1888:	9b e0       	ldi	r25, 0x0B	; 11
    188a:	01 c0       	rjmp	.+2      	; 0x188e <USB_Host_SetDeviceConfiguration+0x42>
    188c:	9a e0       	ldi	r25, 0x0A	; 10
    188e:	90 93 6f 01 	sts	0x016F, r25
    1892:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1894:	08 95       	ret

00001896 <USB_Host_ClearEndpointStall>:
    1896:	92 e0       	ldi	r25, 0x02	; 2
	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1898:	90 93 67 01 	sts	0x0167, r25
    189c:	91 e0       	ldi	r25, 0x01	; 1
    189e:	90 93 68 01 	sts	0x0168, r25
    18a2:	10 92 6a 01 	sts	0x016A, r1
    18a6:	10 92 69 01 	sts	0x0169, r1
    18aa:	80 93 6b 01 	sts	0x016B, r24
    18ae:	10 92 6c 01 	sts	0x016C, r1
    18b2:	10 92 6e 01 	sts	0x016E, r1
    18b6:	10 92 6d 01 	sts	0x016D, r1
    18ba:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	c6 ce       	rjmp	.-628    	; 0x1650 <USB_Host_SendControlRequest>

000018c4 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    18c4:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    18c6:	c0 91 a7 00 	lds	r28, 0x00A7
    18ca:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    18cc:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    18d0:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    18d4:	5e da       	rcall	.-2884   	; 0xd92 <USB_Host_ProcessNextHostState>
    18d6:	c0 93 a7 00 	sts	0x00A7, r28
    18da:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    18dc:	08 95       	ret

000018de <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    18de:	90 91 c8 00 	lds	r25, 0x00C8
    18e2:	95 ff       	sbrs	r25, 5
    18e4:	fc cf       	rjmp	.-8      	; 0x18de <Serial_putchar>
				UDR1 = DataByte;
    18e6:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	08 95       	ret

000018f0 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    18f0:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    18f4:	87 ff       	sbrs	r24, 7
    18f6:	08 c0       	rjmp	.+16     	; 0x1908 <Serial_getchar+0x18>
    18f8:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    18fc:	87 ff       	sbrs	r24, 7
    18fe:	07 c0       	rjmp	.+14     	; 0x190e <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1900:	80 91 ce 00 	lds	r24, 0x00CE
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	08 95       	ret
	  return _FDEV_EOF;
    1908:	8e ef       	ldi	r24, 0xFE	; 254
    190a:	9f ef       	ldi	r25, 0xFF	; 255
    190c:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    190e:	8f ef       	ldi	r24, 0xFF	; 255
    1910:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1912:	08 95       	ret

00001914 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1914:	fc 01       	movw	r30, r24
	if (!(Stream))
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	51 f4       	brne	.+20     	; 0x192e <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    191a:	e0 e7       	ldi	r30, 0x70	; 112
    191c:	f1 e0       	ldi	r31, 0x01	; 1
    191e:	f0 93 7f 01 	sts	0x017F, r31
    1922:	e0 93 7e 01 	sts	0x017E, r30
		stdout = Stream;
    1926:	f0 93 81 01 	sts	0x0181, r31
    192a:	e0 93 80 01 	sts	0x0180, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    192e:	8e e0       	ldi	r24, 0x0E	; 14
    1930:	df 01       	movw	r26, r30
    1932:	1d 92       	st	X+, r1
    1934:	8a 95       	dec	r24
    1936:	e9 f7       	brne	.-6      	; 0x1932 <Serial_CreateStream+0x1e>
    1938:	83 e0       	ldi	r24, 0x03	; 3
    193a:	83 83       	std	Z+3, r24	; 0x03
    193c:	8f e6       	ldi	r24, 0x6F	; 111
    193e:	9c e0       	ldi	r25, 0x0C	; 12
    1940:	91 87       	std	Z+9, r25	; 0x09
    1942:	80 87       	std	Z+8, r24	; 0x08
    1944:	88 e7       	ldi	r24, 0x78	; 120
    1946:	9c e0       	ldi	r25, 0x0C	; 12
    1948:	93 87       	std	Z+11, r25	; 0x0b
    194a:	82 87       	std	Z+10, r24	; 0x0a
}
    194c:	08 95       	ret

0000194e <printf_P>:
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	fe 01       	movw	r30, r28
    1958:	35 96       	adiw	r30, 0x05	; 5
    195a:	61 91       	ld	r22, Z+
    195c:	71 91       	ld	r23, Z+
    195e:	80 91 80 01 	lds	r24, 0x0180
    1962:	90 91 81 01 	lds	r25, 0x0181
    1966:	dc 01       	movw	r26, r24
    1968:	13 96       	adiw	r26, 0x03	; 3
    196a:	2c 91       	ld	r18, X
    196c:	13 97       	sbiw	r26, 0x03	; 3
    196e:	28 60       	ori	r18, 0x08	; 8
    1970:	13 96       	adiw	r26, 0x03	; 3
    1972:	2c 93       	st	X, r18
    1974:	af 01       	movw	r20, r30
    1976:	39 d0       	rcall	.+114    	; 0x19ea <vfprintf>
    1978:	e0 91 80 01 	lds	r30, 0x0180
    197c:	f0 91 81 01 	lds	r31, 0x0181
    1980:	23 81       	ldd	r18, Z+3	; 0x03
    1982:	27 7f       	andi	r18, 0xF7	; 247
    1984:	23 83       	std	Z+3, r18	; 0x03
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	08 95       	ret

0000198c <puts_P>:
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	8c 01       	movw	r16, r24
    1996:	e0 91 80 01 	lds	r30, 0x0180
    199a:	f0 91 81 01 	lds	r31, 0x0181
    199e:	83 81       	ldd	r24, Z+3	; 0x03
    19a0:	81 ff       	sbrs	r24, 1
    19a2:	1b c0       	rjmp	.+54     	; 0x19da <puts_P+0x4e>
    19a4:	c0 e0       	ldi	r28, 0x00	; 0
    19a6:	d0 e0       	ldi	r29, 0x00	; 0
    19a8:	07 c0       	rjmp	.+14     	; 0x19b8 <puts_P+0x2c>
    19aa:	09 95       	icall
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	11 f0       	breq	.+4      	; 0x19b4 <puts_P+0x28>
    19b0:	cf ef       	ldi	r28, 0xFF	; 255
    19b2:	df ef       	ldi	r29, 0xFF	; 255
    19b4:	0f 5f       	subi	r16, 0xFF	; 255
    19b6:	1f 4f       	sbci	r17, 0xFF	; 255
    19b8:	f8 01       	movw	r30, r16
    19ba:	84 91       	lpm	r24, Z
    19bc:	60 91 80 01 	lds	r22, 0x0180
    19c0:	70 91 81 01 	lds	r23, 0x0181
    19c4:	db 01       	movw	r26, r22
    19c6:	18 96       	adiw	r26, 0x08	; 8
    19c8:	ed 91       	ld	r30, X+
    19ca:	fc 91       	ld	r31, X
    19cc:	19 97       	sbiw	r26, 0x09	; 9
    19ce:	88 23       	and	r24, r24
    19d0:	61 f7       	brne	.-40     	; 0x19aa <puts_P+0x1e>
    19d2:	8a e0       	ldi	r24, 0x0A	; 10
    19d4:	09 95       	icall
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	11 f0       	breq	.+4      	; 0x19de <puts_P+0x52>
    19da:	cf ef       	ldi	r28, 0xFF	; 255
    19dc:	df ef       	ldi	r29, 0xFF	; 255
    19de:	ce 01       	movw	r24, r28
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	08 95       	ret

000019ea <vfprintf>:
    19ea:	2f 92       	push	r2
    19ec:	3f 92       	push	r3
    19ee:	4f 92       	push	r4
    19f0:	5f 92       	push	r5
    19f2:	6f 92       	push	r6
    19f4:	7f 92       	push	r7
    19f6:	8f 92       	push	r8
    19f8:	9f 92       	push	r9
    19fa:	af 92       	push	r10
    19fc:	bf 92       	push	r11
    19fe:	cf 92       	push	r12
    1a00:	df 92       	push	r13
    1a02:	ef 92       	push	r14
    1a04:	ff 92       	push	r15
    1a06:	0f 93       	push	r16
    1a08:	1f 93       	push	r17
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    1a12:	2d 97       	sbiw	r28, 0x0d	; 13
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	de bf       	out	0x3e, r29	; 62
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	3c 01       	movw	r6, r24
    1a20:	7d 87       	std	Y+13, r23	; 0x0d
    1a22:	6c 87       	std	Y+12, r22	; 0x0c
    1a24:	5a 01       	movw	r10, r20
    1a26:	fc 01       	movw	r30, r24
    1a28:	17 82       	std	Z+7, r1	; 0x07
    1a2a:	16 82       	std	Z+6, r1	; 0x06
    1a2c:	83 81       	ldd	r24, Z+3	; 0x03
    1a2e:	81 ff       	sbrs	r24, 1
    1a30:	bb c1       	rjmp	.+886    	; 0x1da8 <vfprintf+0x3be>
    1a32:	2e 01       	movw	r4, r28
    1a34:	08 94       	sec
    1a36:	41 1c       	adc	r4, r1
    1a38:	51 1c       	adc	r5, r1
    1a3a:	f3 01       	movw	r30, r6
    1a3c:	93 81       	ldd	r25, Z+3	; 0x03
    1a3e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a40:	fd 85       	ldd	r31, Y+13	; 0x0d
    1a42:	93 fd       	sbrc	r25, 3
    1a44:	85 91       	lpm	r24, Z+
    1a46:	93 ff       	sbrs	r25, 3
    1a48:	81 91       	ld	r24, Z+
    1a4a:	fd 87       	std	Y+13, r31	; 0x0d
    1a4c:	ec 87       	std	Y+12, r30	; 0x0c
    1a4e:	88 23       	and	r24, r24
    1a50:	09 f4       	brne	.+2      	; 0x1a54 <vfprintf+0x6a>
    1a52:	a6 c1       	rjmp	.+844    	; 0x1da0 <vfprintf+0x3b6>
    1a54:	85 32       	cpi	r24, 0x25	; 37
    1a56:	41 f4       	brne	.+16     	; 0x1a68 <vfprintf+0x7e>
    1a58:	93 fd       	sbrc	r25, 3
    1a5a:	85 91       	lpm	r24, Z+
    1a5c:	93 ff       	sbrs	r25, 3
    1a5e:	81 91       	ld	r24, Z+
    1a60:	fd 87       	std	Y+13, r31	; 0x0d
    1a62:	ec 87       	std	Y+12, r30	; 0x0c
    1a64:	85 32       	cpi	r24, 0x25	; 37
    1a66:	21 f4       	brne	.+8      	; 0x1a70 <vfprintf+0x86>
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	b3 01       	movw	r22, r6
    1a6c:	ce d1       	rcall	.+924    	; 0x1e0a <fputc>
    1a6e:	e5 cf       	rjmp	.-54     	; 0x1a3a <vfprintf+0x50>
    1a70:	ff 24       	eor	r15, r15
    1a72:	ee 24       	eor	r14, r14
    1a74:	10 e0       	ldi	r17, 0x00	; 0
    1a76:	10 32       	cpi	r17, 0x20	; 32
    1a78:	b0 f4       	brcc	.+44     	; 0x1aa6 <vfprintf+0xbc>
    1a7a:	8b 32       	cpi	r24, 0x2B	; 43
    1a7c:	69 f0       	breq	.+26     	; 0x1a98 <vfprintf+0xae>
    1a7e:	8c 32       	cpi	r24, 0x2C	; 44
    1a80:	28 f4       	brcc	.+10     	; 0x1a8c <vfprintf+0xa2>
    1a82:	80 32       	cpi	r24, 0x20	; 32
    1a84:	51 f0       	breq	.+20     	; 0x1a9a <vfprintf+0xb0>
    1a86:	83 32       	cpi	r24, 0x23	; 35
    1a88:	71 f4       	brne	.+28     	; 0x1aa6 <vfprintf+0xbc>
    1a8a:	0b c0       	rjmp	.+22     	; 0x1aa2 <vfprintf+0xb8>
    1a8c:	8d 32       	cpi	r24, 0x2D	; 45
    1a8e:	39 f0       	breq	.+14     	; 0x1a9e <vfprintf+0xb4>
    1a90:	80 33       	cpi	r24, 0x30	; 48
    1a92:	49 f4       	brne	.+18     	; 0x1aa6 <vfprintf+0xbc>
    1a94:	11 60       	ori	r17, 0x01	; 1
    1a96:	2c c0       	rjmp	.+88     	; 0x1af0 <vfprintf+0x106>
    1a98:	12 60       	ori	r17, 0x02	; 2
    1a9a:	14 60       	ori	r17, 0x04	; 4
    1a9c:	29 c0       	rjmp	.+82     	; 0x1af0 <vfprintf+0x106>
    1a9e:	18 60       	ori	r17, 0x08	; 8
    1aa0:	27 c0       	rjmp	.+78     	; 0x1af0 <vfprintf+0x106>
    1aa2:	10 61       	ori	r17, 0x10	; 16
    1aa4:	25 c0       	rjmp	.+74     	; 0x1af0 <vfprintf+0x106>
    1aa6:	17 fd       	sbrc	r17, 7
    1aa8:	2e c0       	rjmp	.+92     	; 0x1b06 <vfprintf+0x11c>
    1aaa:	28 2f       	mov	r18, r24
    1aac:	20 53       	subi	r18, 0x30	; 48
    1aae:	2a 30       	cpi	r18, 0x0A	; 10
    1ab0:	98 f4       	brcc	.+38     	; 0x1ad8 <vfprintf+0xee>
    1ab2:	16 ff       	sbrs	r17, 6
    1ab4:	08 c0       	rjmp	.+16     	; 0x1ac6 <vfprintf+0xdc>
    1ab6:	8f 2d       	mov	r24, r15
    1ab8:	88 0f       	add	r24, r24
    1aba:	f8 2e       	mov	r15, r24
    1abc:	ff 0c       	add	r15, r15
    1abe:	ff 0c       	add	r15, r15
    1ac0:	f8 0e       	add	r15, r24
    1ac2:	f2 0e       	add	r15, r18
    1ac4:	15 c0       	rjmp	.+42     	; 0x1af0 <vfprintf+0x106>
    1ac6:	8e 2d       	mov	r24, r14
    1ac8:	88 0f       	add	r24, r24
    1aca:	e8 2e       	mov	r14, r24
    1acc:	ee 0c       	add	r14, r14
    1ace:	ee 0c       	add	r14, r14
    1ad0:	e8 0e       	add	r14, r24
    1ad2:	e2 0e       	add	r14, r18
    1ad4:	10 62       	ori	r17, 0x20	; 32
    1ad6:	0c c0       	rjmp	.+24     	; 0x1af0 <vfprintf+0x106>
    1ad8:	8e 32       	cpi	r24, 0x2E	; 46
    1ada:	21 f4       	brne	.+8      	; 0x1ae4 <vfprintf+0xfa>
    1adc:	16 fd       	sbrc	r17, 6
    1ade:	60 c1       	rjmp	.+704    	; 0x1da0 <vfprintf+0x3b6>
    1ae0:	10 64       	ori	r17, 0x40	; 64
    1ae2:	06 c0       	rjmp	.+12     	; 0x1af0 <vfprintf+0x106>
    1ae4:	8c 36       	cpi	r24, 0x6C	; 108
    1ae6:	11 f4       	brne	.+4      	; 0x1aec <vfprintf+0x102>
    1ae8:	10 68       	ori	r17, 0x80	; 128
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <vfprintf+0x106>
    1aec:	88 36       	cpi	r24, 0x68	; 104
    1aee:	59 f4       	brne	.+22     	; 0x1b06 <vfprintf+0x11c>
    1af0:	ec 85       	ldd	r30, Y+12	; 0x0c
    1af2:	fd 85       	ldd	r31, Y+13	; 0x0d
    1af4:	93 fd       	sbrc	r25, 3
    1af6:	85 91       	lpm	r24, Z+
    1af8:	93 ff       	sbrs	r25, 3
    1afa:	81 91       	ld	r24, Z+
    1afc:	fd 87       	std	Y+13, r31	; 0x0d
    1afe:	ec 87       	std	Y+12, r30	; 0x0c
    1b00:	88 23       	and	r24, r24
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <vfprintf+0x11c>
    1b04:	b8 cf       	rjmp	.-144    	; 0x1a76 <vfprintf+0x8c>
    1b06:	98 2f       	mov	r25, r24
    1b08:	95 54       	subi	r25, 0x45	; 69
    1b0a:	93 30       	cpi	r25, 0x03	; 3
    1b0c:	18 f0       	brcs	.+6      	; 0x1b14 <vfprintf+0x12a>
    1b0e:	90 52       	subi	r25, 0x20	; 32
    1b10:	93 30       	cpi	r25, 0x03	; 3
    1b12:	38 f4       	brcc	.+14     	; 0x1b22 <vfprintf+0x138>
    1b14:	24 e0       	ldi	r18, 0x04	; 4
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	a2 0e       	add	r10, r18
    1b1a:	b3 1e       	adc	r11, r19
    1b1c:	3f e3       	ldi	r19, 0x3F	; 63
    1b1e:	39 83       	std	Y+1, r19	; 0x01
    1b20:	0f c0       	rjmp	.+30     	; 0x1b40 <vfprintf+0x156>
    1b22:	83 36       	cpi	r24, 0x63	; 99
    1b24:	31 f0       	breq	.+12     	; 0x1b32 <vfprintf+0x148>
    1b26:	83 37       	cpi	r24, 0x73	; 115
    1b28:	81 f0       	breq	.+32     	; 0x1b4a <vfprintf+0x160>
    1b2a:	83 35       	cpi	r24, 0x53	; 83
    1b2c:	09 f0       	breq	.+2      	; 0x1b30 <vfprintf+0x146>
    1b2e:	56 c0       	rjmp	.+172    	; 0x1bdc <vfprintf+0x1f2>
    1b30:	21 c0       	rjmp	.+66     	; 0x1b74 <vfprintf+0x18a>
    1b32:	f5 01       	movw	r30, r10
    1b34:	80 81       	ld	r24, Z
    1b36:	89 83       	std	Y+1, r24	; 0x01
    1b38:	22 e0       	ldi	r18, 0x02	; 2
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	a2 0e       	add	r10, r18
    1b3e:	b3 1e       	adc	r11, r19
    1b40:	21 e0       	ldi	r18, 0x01	; 1
    1b42:	c2 2e       	mov	r12, r18
    1b44:	d1 2c       	mov	r13, r1
    1b46:	42 01       	movw	r8, r4
    1b48:	13 c0       	rjmp	.+38     	; 0x1b70 <vfprintf+0x186>
    1b4a:	92 e0       	ldi	r25, 0x02	; 2
    1b4c:	29 2e       	mov	r2, r25
    1b4e:	31 2c       	mov	r3, r1
    1b50:	2a 0c       	add	r2, r10
    1b52:	3b 1c       	adc	r3, r11
    1b54:	f5 01       	movw	r30, r10
    1b56:	80 80       	ld	r8, Z
    1b58:	91 80       	ldd	r9, Z+1	; 0x01
    1b5a:	16 ff       	sbrs	r17, 6
    1b5c:	03 c0       	rjmp	.+6      	; 0x1b64 <vfprintf+0x17a>
    1b5e:	6f 2d       	mov	r22, r15
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <vfprintf+0x17e>
    1b64:	6f ef       	ldi	r22, 0xFF	; 255
    1b66:	7f ef       	ldi	r23, 0xFF	; 255
    1b68:	c4 01       	movw	r24, r8
    1b6a:	44 d1       	rcall	.+648    	; 0x1df4 <strnlen>
    1b6c:	6c 01       	movw	r12, r24
    1b6e:	51 01       	movw	r10, r2
    1b70:	1f 77       	andi	r17, 0x7F	; 127
    1b72:	14 c0       	rjmp	.+40     	; 0x1b9c <vfprintf+0x1b2>
    1b74:	82 e0       	ldi	r24, 0x02	; 2
    1b76:	28 2e       	mov	r2, r24
    1b78:	31 2c       	mov	r3, r1
    1b7a:	2a 0c       	add	r2, r10
    1b7c:	3b 1c       	adc	r3, r11
    1b7e:	f5 01       	movw	r30, r10
    1b80:	80 80       	ld	r8, Z
    1b82:	91 80       	ldd	r9, Z+1	; 0x01
    1b84:	16 ff       	sbrs	r17, 6
    1b86:	03 c0       	rjmp	.+6      	; 0x1b8e <vfprintf+0x1a4>
    1b88:	6f 2d       	mov	r22, r15
    1b8a:	70 e0       	ldi	r23, 0x00	; 0
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <vfprintf+0x1a8>
    1b8e:	6f ef       	ldi	r22, 0xFF	; 255
    1b90:	7f ef       	ldi	r23, 0xFF	; 255
    1b92:	c4 01       	movw	r24, r8
    1b94:	24 d1       	rcall	.+584    	; 0x1dde <strnlen_P>
    1b96:	6c 01       	movw	r12, r24
    1b98:	10 68       	ori	r17, 0x80	; 128
    1b9a:	51 01       	movw	r10, r2
    1b9c:	13 fd       	sbrc	r17, 3
    1b9e:	1a c0       	rjmp	.+52     	; 0x1bd4 <vfprintf+0x1ea>
    1ba0:	05 c0       	rjmp	.+10     	; 0x1bac <vfprintf+0x1c2>
    1ba2:	80 e2       	ldi	r24, 0x20	; 32
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	b3 01       	movw	r22, r6
    1ba8:	30 d1       	rcall	.+608    	; 0x1e0a <fputc>
    1baa:	ea 94       	dec	r14
    1bac:	8e 2d       	mov	r24, r14
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	c8 16       	cp	r12, r24
    1bb2:	d9 06       	cpc	r13, r25
    1bb4:	b0 f3       	brcs	.-20     	; 0x1ba2 <vfprintf+0x1b8>
    1bb6:	0e c0       	rjmp	.+28     	; 0x1bd4 <vfprintf+0x1ea>
    1bb8:	f4 01       	movw	r30, r8
    1bba:	17 fd       	sbrc	r17, 7
    1bbc:	85 91       	lpm	r24, Z+
    1bbe:	17 ff       	sbrs	r17, 7
    1bc0:	81 91       	ld	r24, Z+
    1bc2:	4f 01       	movw	r8, r30
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	b3 01       	movw	r22, r6
    1bc8:	20 d1       	rcall	.+576    	; 0x1e0a <fputc>
    1bca:	e1 10       	cpse	r14, r1
    1bcc:	ea 94       	dec	r14
    1bce:	08 94       	sec
    1bd0:	c1 08       	sbc	r12, r1
    1bd2:	d1 08       	sbc	r13, r1
    1bd4:	c1 14       	cp	r12, r1
    1bd6:	d1 04       	cpc	r13, r1
    1bd8:	79 f7       	brne	.-34     	; 0x1bb8 <vfprintf+0x1ce>
    1bda:	df c0       	rjmp	.+446    	; 0x1d9a <vfprintf+0x3b0>
    1bdc:	84 36       	cpi	r24, 0x64	; 100
    1bde:	11 f0       	breq	.+4      	; 0x1be4 <vfprintf+0x1fa>
    1be0:	89 36       	cpi	r24, 0x69	; 105
    1be2:	49 f5       	brne	.+82     	; 0x1c36 <vfprintf+0x24c>
    1be4:	f5 01       	movw	r30, r10
    1be6:	17 ff       	sbrs	r17, 7
    1be8:	07 c0       	rjmp	.+14     	; 0x1bf8 <vfprintf+0x20e>
    1bea:	80 81       	ld	r24, Z
    1bec:	91 81       	ldd	r25, Z+1	; 0x01
    1bee:	a2 81       	ldd	r26, Z+2	; 0x02
    1bf0:	b3 81       	ldd	r27, Z+3	; 0x03
    1bf2:	24 e0       	ldi	r18, 0x04	; 4
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	08 c0       	rjmp	.+16     	; 0x1c08 <vfprintf+0x21e>
    1bf8:	80 81       	ld	r24, Z
    1bfa:	91 81       	ldd	r25, Z+1	; 0x01
    1bfc:	aa 27       	eor	r26, r26
    1bfe:	97 fd       	sbrc	r25, 7
    1c00:	a0 95       	com	r26
    1c02:	ba 2f       	mov	r27, r26
    1c04:	22 e0       	ldi	r18, 0x02	; 2
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	a2 0e       	add	r10, r18
    1c0a:	b3 1e       	adc	r11, r19
    1c0c:	01 2f       	mov	r16, r17
    1c0e:	0f 76       	andi	r16, 0x6F	; 111
    1c10:	b7 ff       	sbrs	r27, 7
    1c12:	08 c0       	rjmp	.+16     	; 0x1c24 <vfprintf+0x23a>
    1c14:	b0 95       	com	r27
    1c16:	a0 95       	com	r26
    1c18:	90 95       	com	r25
    1c1a:	81 95       	neg	r24
    1c1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c1e:	af 4f       	sbci	r26, 0xFF	; 255
    1c20:	bf 4f       	sbci	r27, 0xFF	; 255
    1c22:	00 68       	ori	r16, 0x80	; 128
    1c24:	bc 01       	movw	r22, r24
    1c26:	cd 01       	movw	r24, r26
    1c28:	a2 01       	movw	r20, r4
    1c2a:	2a e0       	ldi	r18, 0x0A	; 10
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	19 d1       	rcall	.+562    	; 0x1e62 <__ultoa_invert>
    1c30:	d8 2e       	mov	r13, r24
    1c32:	d4 18       	sub	r13, r4
    1c34:	3e c0       	rjmp	.+124    	; 0x1cb2 <vfprintf+0x2c8>
    1c36:	85 37       	cpi	r24, 0x75	; 117
    1c38:	21 f4       	brne	.+8      	; 0x1c42 <vfprintf+0x258>
    1c3a:	1f 7e       	andi	r17, 0xEF	; 239
    1c3c:	2a e0       	ldi	r18, 0x0A	; 10
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	20 c0       	rjmp	.+64     	; 0x1c82 <vfprintf+0x298>
    1c42:	19 7f       	andi	r17, 0xF9	; 249
    1c44:	8f 36       	cpi	r24, 0x6F	; 111
    1c46:	a9 f0       	breq	.+42     	; 0x1c72 <vfprintf+0x288>
    1c48:	80 37       	cpi	r24, 0x70	; 112
    1c4a:	20 f4       	brcc	.+8      	; 0x1c54 <vfprintf+0x26a>
    1c4c:	88 35       	cpi	r24, 0x58	; 88
    1c4e:	09 f0       	breq	.+2      	; 0x1c52 <vfprintf+0x268>
    1c50:	a7 c0       	rjmp	.+334    	; 0x1da0 <vfprintf+0x3b6>
    1c52:	0b c0       	rjmp	.+22     	; 0x1c6a <vfprintf+0x280>
    1c54:	80 37       	cpi	r24, 0x70	; 112
    1c56:	21 f0       	breq	.+8      	; 0x1c60 <vfprintf+0x276>
    1c58:	88 37       	cpi	r24, 0x78	; 120
    1c5a:	09 f0       	breq	.+2      	; 0x1c5e <vfprintf+0x274>
    1c5c:	a1 c0       	rjmp	.+322    	; 0x1da0 <vfprintf+0x3b6>
    1c5e:	01 c0       	rjmp	.+2      	; 0x1c62 <vfprintf+0x278>
    1c60:	10 61       	ori	r17, 0x10	; 16
    1c62:	14 ff       	sbrs	r17, 4
    1c64:	09 c0       	rjmp	.+18     	; 0x1c78 <vfprintf+0x28e>
    1c66:	14 60       	ori	r17, 0x04	; 4
    1c68:	07 c0       	rjmp	.+14     	; 0x1c78 <vfprintf+0x28e>
    1c6a:	14 ff       	sbrs	r17, 4
    1c6c:	08 c0       	rjmp	.+16     	; 0x1c7e <vfprintf+0x294>
    1c6e:	16 60       	ori	r17, 0x06	; 6
    1c70:	06 c0       	rjmp	.+12     	; 0x1c7e <vfprintf+0x294>
    1c72:	28 e0       	ldi	r18, 0x08	; 8
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	05 c0       	rjmp	.+10     	; 0x1c82 <vfprintf+0x298>
    1c78:	20 e1       	ldi	r18, 0x10	; 16
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <vfprintf+0x298>
    1c7e:	20 e1       	ldi	r18, 0x10	; 16
    1c80:	32 e0       	ldi	r19, 0x02	; 2
    1c82:	f5 01       	movw	r30, r10
    1c84:	17 ff       	sbrs	r17, 7
    1c86:	07 c0       	rjmp	.+14     	; 0x1c96 <vfprintf+0x2ac>
    1c88:	60 81       	ld	r22, Z
    1c8a:	71 81       	ldd	r23, Z+1	; 0x01
    1c8c:	82 81       	ldd	r24, Z+2	; 0x02
    1c8e:	93 81       	ldd	r25, Z+3	; 0x03
    1c90:	44 e0       	ldi	r20, 0x04	; 4
    1c92:	50 e0       	ldi	r21, 0x00	; 0
    1c94:	06 c0       	rjmp	.+12     	; 0x1ca2 <vfprintf+0x2b8>
    1c96:	60 81       	ld	r22, Z
    1c98:	71 81       	ldd	r23, Z+1	; 0x01
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	42 e0       	ldi	r20, 0x02	; 2
    1ca0:	50 e0       	ldi	r21, 0x00	; 0
    1ca2:	a4 0e       	add	r10, r20
    1ca4:	b5 1e       	adc	r11, r21
    1ca6:	a2 01       	movw	r20, r4
    1ca8:	dc d0       	rcall	.+440    	; 0x1e62 <__ultoa_invert>
    1caa:	d8 2e       	mov	r13, r24
    1cac:	d4 18       	sub	r13, r4
    1cae:	01 2f       	mov	r16, r17
    1cb0:	0f 77       	andi	r16, 0x7F	; 127
    1cb2:	06 ff       	sbrs	r16, 6
    1cb4:	09 c0       	rjmp	.+18     	; 0x1cc8 <vfprintf+0x2de>
    1cb6:	0e 7f       	andi	r16, 0xFE	; 254
    1cb8:	df 14       	cp	r13, r15
    1cba:	30 f4       	brcc	.+12     	; 0x1cc8 <vfprintf+0x2de>
    1cbc:	04 ff       	sbrs	r16, 4
    1cbe:	06 c0       	rjmp	.+12     	; 0x1ccc <vfprintf+0x2e2>
    1cc0:	02 fd       	sbrc	r16, 2
    1cc2:	04 c0       	rjmp	.+8      	; 0x1ccc <vfprintf+0x2e2>
    1cc4:	0f 7e       	andi	r16, 0xEF	; 239
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <vfprintf+0x2e2>
    1cc8:	1d 2d       	mov	r17, r13
    1cca:	01 c0       	rjmp	.+2      	; 0x1cce <vfprintf+0x2e4>
    1ccc:	1f 2d       	mov	r17, r15
    1cce:	80 2f       	mov	r24, r16
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	04 ff       	sbrs	r16, 4
    1cd4:	0c c0       	rjmp	.+24     	; 0x1cee <vfprintf+0x304>
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	ed 0d       	add	r30, r13
    1cda:	f1 1d       	adc	r31, r1
    1cdc:	20 81       	ld	r18, Z
    1cde:	20 33       	cpi	r18, 0x30	; 48
    1ce0:	11 f4       	brne	.+4      	; 0x1ce6 <vfprintf+0x2fc>
    1ce2:	09 7e       	andi	r16, 0xE9	; 233
    1ce4:	09 c0       	rjmp	.+18     	; 0x1cf8 <vfprintf+0x30e>
    1ce6:	02 ff       	sbrs	r16, 2
    1ce8:	06 c0       	rjmp	.+12     	; 0x1cf6 <vfprintf+0x30c>
    1cea:	1e 5f       	subi	r17, 0xFE	; 254
    1cec:	05 c0       	rjmp	.+10     	; 0x1cf8 <vfprintf+0x30e>
    1cee:	86 78       	andi	r24, 0x86	; 134
    1cf0:	90 70       	andi	r25, 0x00	; 0
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	09 f0       	breq	.+2      	; 0x1cf8 <vfprintf+0x30e>
    1cf6:	1f 5f       	subi	r17, 0xFF	; 255
    1cf8:	80 2e       	mov	r8, r16
    1cfa:	99 24       	eor	r9, r9
    1cfc:	03 fd       	sbrc	r16, 3
    1cfe:	11 c0       	rjmp	.+34     	; 0x1d22 <vfprintf+0x338>
    1d00:	00 ff       	sbrs	r16, 0
    1d02:	0c c0       	rjmp	.+24     	; 0x1d1c <vfprintf+0x332>
    1d04:	fd 2c       	mov	r15, r13
    1d06:	1e 15       	cp	r17, r14
    1d08:	48 f4       	brcc	.+18     	; 0x1d1c <vfprintf+0x332>
    1d0a:	fe 0c       	add	r15, r14
    1d0c:	f1 1a       	sub	r15, r17
    1d0e:	1e 2d       	mov	r17, r14
    1d10:	05 c0       	rjmp	.+10     	; 0x1d1c <vfprintf+0x332>
    1d12:	80 e2       	ldi	r24, 0x20	; 32
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	b3 01       	movw	r22, r6
    1d18:	78 d0       	rcall	.+240    	; 0x1e0a <fputc>
    1d1a:	1f 5f       	subi	r17, 0xFF	; 255
    1d1c:	1e 15       	cp	r17, r14
    1d1e:	c8 f3       	brcs	.-14     	; 0x1d12 <vfprintf+0x328>
    1d20:	04 c0       	rjmp	.+8      	; 0x1d2a <vfprintf+0x340>
    1d22:	1e 15       	cp	r17, r14
    1d24:	10 f4       	brcc	.+4      	; 0x1d2a <vfprintf+0x340>
    1d26:	e1 1a       	sub	r14, r17
    1d28:	01 c0       	rjmp	.+2      	; 0x1d2c <vfprintf+0x342>
    1d2a:	ee 24       	eor	r14, r14
    1d2c:	84 fe       	sbrs	r8, 4
    1d2e:	0e c0       	rjmp	.+28     	; 0x1d4c <vfprintf+0x362>
    1d30:	80 e3       	ldi	r24, 0x30	; 48
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	b3 01       	movw	r22, r6
    1d36:	69 d0       	rcall	.+210    	; 0x1e0a <fputc>
    1d38:	82 fe       	sbrs	r8, 2
    1d3a:	1d c0       	rjmp	.+58     	; 0x1d76 <vfprintf+0x38c>
    1d3c:	81 fe       	sbrs	r8, 1
    1d3e:	03 c0       	rjmp	.+6      	; 0x1d46 <vfprintf+0x35c>
    1d40:	88 e5       	ldi	r24, 0x58	; 88
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	10 c0       	rjmp	.+32     	; 0x1d66 <vfprintf+0x37c>
    1d46:	88 e7       	ldi	r24, 0x78	; 120
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	0d c0       	rjmp	.+26     	; 0x1d66 <vfprintf+0x37c>
    1d4c:	c4 01       	movw	r24, r8
    1d4e:	86 78       	andi	r24, 0x86	; 134
    1d50:	90 70       	andi	r25, 0x00	; 0
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	81 f0       	breq	.+32     	; 0x1d76 <vfprintf+0x38c>
    1d56:	81 fc       	sbrc	r8, 1
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <vfprintf+0x374>
    1d5a:	80 e2       	ldi	r24, 0x20	; 32
    1d5c:	01 c0       	rjmp	.+2      	; 0x1d60 <vfprintf+0x376>
    1d5e:	8b e2       	ldi	r24, 0x2B	; 43
    1d60:	07 fd       	sbrc	r16, 7
    1d62:	8d e2       	ldi	r24, 0x2D	; 45
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	b3 01       	movw	r22, r6
    1d68:	50 d0       	rcall	.+160    	; 0x1e0a <fputc>
    1d6a:	05 c0       	rjmp	.+10     	; 0x1d76 <vfprintf+0x38c>
    1d6c:	80 e3       	ldi	r24, 0x30	; 48
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	b3 01       	movw	r22, r6
    1d72:	4b d0       	rcall	.+150    	; 0x1e0a <fputc>
    1d74:	fa 94       	dec	r15
    1d76:	df 14       	cp	r13, r15
    1d78:	c8 f3       	brcs	.-14     	; 0x1d6c <vfprintf+0x382>
    1d7a:	da 94       	dec	r13
    1d7c:	f2 01       	movw	r30, r4
    1d7e:	ed 0d       	add	r30, r13
    1d80:	f1 1d       	adc	r31, r1
    1d82:	80 81       	ld	r24, Z
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	b3 01       	movw	r22, r6
    1d88:	40 d0       	rcall	.+128    	; 0x1e0a <fputc>
    1d8a:	dd 20       	and	r13, r13
    1d8c:	b1 f7       	brne	.-20     	; 0x1d7a <vfprintf+0x390>
    1d8e:	05 c0       	rjmp	.+10     	; 0x1d9a <vfprintf+0x3b0>
    1d90:	80 e2       	ldi	r24, 0x20	; 32
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	b3 01       	movw	r22, r6
    1d96:	39 d0       	rcall	.+114    	; 0x1e0a <fputc>
    1d98:	ea 94       	dec	r14
    1d9a:	ee 20       	and	r14, r14
    1d9c:	c9 f7       	brne	.-14     	; 0x1d90 <vfprintf+0x3a6>
    1d9e:	4d ce       	rjmp	.-870    	; 0x1a3a <vfprintf+0x50>
    1da0:	f3 01       	movw	r30, r6
    1da2:	86 81       	ldd	r24, Z+6	; 0x06
    1da4:	97 81       	ldd	r25, Z+7	; 0x07
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <vfprintf+0x3c2>
    1da8:	8f ef       	ldi	r24, 0xFF	; 255
    1daa:	9f ef       	ldi	r25, 0xFF	; 255
    1dac:	2d 96       	adiw	r28, 0x0d	; 13
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	de bf       	out	0x3e, r29	; 62
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	cd bf       	out	0x3d, r28	; 61
    1db8:	df 91       	pop	r29
    1dba:	cf 91       	pop	r28
    1dbc:	1f 91       	pop	r17
    1dbe:	0f 91       	pop	r16
    1dc0:	ff 90       	pop	r15
    1dc2:	ef 90       	pop	r14
    1dc4:	df 90       	pop	r13
    1dc6:	cf 90       	pop	r12
    1dc8:	bf 90       	pop	r11
    1dca:	af 90       	pop	r10
    1dcc:	9f 90       	pop	r9
    1dce:	8f 90       	pop	r8
    1dd0:	7f 90       	pop	r7
    1dd2:	6f 90       	pop	r6
    1dd4:	5f 90       	pop	r5
    1dd6:	4f 90       	pop	r4
    1dd8:	3f 90       	pop	r3
    1dda:	2f 90       	pop	r2
    1ddc:	08 95       	ret

00001dde <strnlen_P>:
    1dde:	fc 01       	movw	r30, r24
    1de0:	05 90       	lpm	r0, Z+
    1de2:	61 50       	subi	r22, 0x01	; 1
    1de4:	70 40       	sbci	r23, 0x00	; 0
    1de6:	01 10       	cpse	r0, r1
    1de8:	d8 f7       	brcc	.-10     	; 0x1de0 <strnlen_P+0x2>
    1dea:	80 95       	com	r24
    1dec:	90 95       	com	r25
    1dee:	8e 0f       	add	r24, r30
    1df0:	9f 1f       	adc	r25, r31
    1df2:	08 95       	ret

00001df4 <strnlen>:
    1df4:	fc 01       	movw	r30, r24
    1df6:	61 50       	subi	r22, 0x01	; 1
    1df8:	70 40       	sbci	r23, 0x00	; 0
    1dfa:	01 90       	ld	r0, Z+
    1dfc:	01 10       	cpse	r0, r1
    1dfe:	d8 f7       	brcc	.-10     	; 0x1df6 <strnlen+0x2>
    1e00:	80 95       	com	r24
    1e02:	90 95       	com	r25
    1e04:	8e 0f       	add	r24, r30
    1e06:	9f 1f       	adc	r25, r31
    1e08:	08 95       	ret

00001e0a <fputc>:
    1e0a:	0f 93       	push	r16
    1e0c:	1f 93       	push	r17
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    1e12:	8c 01       	movw	r16, r24
    1e14:	eb 01       	movw	r28, r22
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	81 ff       	sbrs	r24, 1
    1e1a:	1b c0       	rjmp	.+54     	; 0x1e52 <fputc+0x48>
    1e1c:	82 ff       	sbrs	r24, 2
    1e1e:	0d c0       	rjmp	.+26     	; 0x1e3a <fputc+0x30>
    1e20:	2e 81       	ldd	r18, Y+6	; 0x06
    1e22:	3f 81       	ldd	r19, Y+7	; 0x07
    1e24:	8c 81       	ldd	r24, Y+4	; 0x04
    1e26:	9d 81       	ldd	r25, Y+5	; 0x05
    1e28:	28 17       	cp	r18, r24
    1e2a:	39 07       	cpc	r19, r25
    1e2c:	64 f4       	brge	.+24     	; 0x1e46 <fputc+0x3c>
    1e2e:	e8 81       	ld	r30, Y
    1e30:	f9 81       	ldd	r31, Y+1	; 0x01
    1e32:	01 93       	st	Z+, r16
    1e34:	f9 83       	std	Y+1, r31	; 0x01
    1e36:	e8 83       	st	Y, r30
    1e38:	06 c0       	rjmp	.+12     	; 0x1e46 <fputc+0x3c>
    1e3a:	e8 85       	ldd	r30, Y+8	; 0x08
    1e3c:	f9 85       	ldd	r31, Y+9	; 0x09
    1e3e:	80 2f       	mov	r24, r16
    1e40:	09 95       	icall
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	31 f4       	brne	.+12     	; 0x1e52 <fputc+0x48>
    1e46:	8e 81       	ldd	r24, Y+6	; 0x06
    1e48:	9f 81       	ldd	r25, Y+7	; 0x07
    1e4a:	01 96       	adiw	r24, 0x01	; 1
    1e4c:	9f 83       	std	Y+7, r25	; 0x07
    1e4e:	8e 83       	std	Y+6, r24	; 0x06
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <fputc+0x4c>
    1e52:	0f ef       	ldi	r16, 0xFF	; 255
    1e54:	1f ef       	ldi	r17, 0xFF	; 255
    1e56:	c8 01       	movw	r24, r16
    1e58:	df 91       	pop	r29
    1e5a:	cf 91       	pop	r28
    1e5c:	1f 91       	pop	r17
    1e5e:	0f 91       	pop	r16
    1e60:	08 95       	ret

00001e62 <__ultoa_invert>:
    1e62:	fa 01       	movw	r30, r20
    1e64:	aa 27       	eor	r26, r26
    1e66:	28 30       	cpi	r18, 0x08	; 8
    1e68:	51 f1       	breq	.+84     	; 0x1ebe <__ultoa_invert+0x5c>
    1e6a:	20 31       	cpi	r18, 0x10	; 16
    1e6c:	81 f1       	breq	.+96     	; 0x1ece <__ultoa_invert+0x6c>
    1e6e:	e8 94       	clt
    1e70:	6f 93       	push	r22
    1e72:	6e 7f       	andi	r22, 0xFE	; 254
    1e74:	6e 5f       	subi	r22, 0xFE	; 254
    1e76:	7f 4f       	sbci	r23, 0xFF	; 255
    1e78:	8f 4f       	sbci	r24, 0xFF	; 255
    1e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7c:	af 4f       	sbci	r26, 0xFF	; 255
    1e7e:	b1 e0       	ldi	r27, 0x01	; 1
    1e80:	3e d0       	rcall	.+124    	; 0x1efe <__ultoa_invert+0x9c>
    1e82:	b4 e0       	ldi	r27, 0x04	; 4
    1e84:	3c d0       	rcall	.+120    	; 0x1efe <__ultoa_invert+0x9c>
    1e86:	67 0f       	add	r22, r23
    1e88:	78 1f       	adc	r23, r24
    1e8a:	89 1f       	adc	r24, r25
    1e8c:	9a 1f       	adc	r25, r26
    1e8e:	a1 1d       	adc	r26, r1
    1e90:	68 0f       	add	r22, r24
    1e92:	79 1f       	adc	r23, r25
    1e94:	8a 1f       	adc	r24, r26
    1e96:	91 1d       	adc	r25, r1
    1e98:	a1 1d       	adc	r26, r1
    1e9a:	6a 0f       	add	r22, r26
    1e9c:	71 1d       	adc	r23, r1
    1e9e:	81 1d       	adc	r24, r1
    1ea0:	91 1d       	adc	r25, r1
    1ea2:	a1 1d       	adc	r26, r1
    1ea4:	20 d0       	rcall	.+64     	; 0x1ee6 <__ultoa_invert+0x84>
    1ea6:	09 f4       	brne	.+2      	; 0x1eaa <__ultoa_invert+0x48>
    1ea8:	68 94       	set
    1eaa:	3f 91       	pop	r19
    1eac:	2a e0       	ldi	r18, 0x0A	; 10
    1eae:	26 9f       	mul	r18, r22
    1eb0:	11 24       	eor	r1, r1
    1eb2:	30 19       	sub	r19, r0
    1eb4:	30 5d       	subi	r19, 0xD0	; 208
    1eb6:	31 93       	st	Z+, r19
    1eb8:	de f6       	brtc	.-74     	; 0x1e70 <__ultoa_invert+0xe>
    1eba:	cf 01       	movw	r24, r30
    1ebc:	08 95       	ret
    1ebe:	46 2f       	mov	r20, r22
    1ec0:	47 70       	andi	r20, 0x07	; 7
    1ec2:	40 5d       	subi	r20, 0xD0	; 208
    1ec4:	41 93       	st	Z+, r20
    1ec6:	b3 e0       	ldi	r27, 0x03	; 3
    1ec8:	0f d0       	rcall	.+30     	; 0x1ee8 <__ultoa_invert+0x86>
    1eca:	c9 f7       	brne	.-14     	; 0x1ebe <__ultoa_invert+0x5c>
    1ecc:	f6 cf       	rjmp	.-20     	; 0x1eba <__ultoa_invert+0x58>
    1ece:	46 2f       	mov	r20, r22
    1ed0:	4f 70       	andi	r20, 0x0F	; 15
    1ed2:	40 5d       	subi	r20, 0xD0	; 208
    1ed4:	4a 33       	cpi	r20, 0x3A	; 58
    1ed6:	18 f0       	brcs	.+6      	; 0x1ede <__ultoa_invert+0x7c>
    1ed8:	49 5d       	subi	r20, 0xD9	; 217
    1eda:	31 fd       	sbrc	r19, 1
    1edc:	40 52       	subi	r20, 0x20	; 32
    1ede:	41 93       	st	Z+, r20
    1ee0:	02 d0       	rcall	.+4      	; 0x1ee6 <__ultoa_invert+0x84>
    1ee2:	a9 f7       	brne	.-22     	; 0x1ece <__ultoa_invert+0x6c>
    1ee4:	ea cf       	rjmp	.-44     	; 0x1eba <__ultoa_invert+0x58>
    1ee6:	b4 e0       	ldi	r27, 0x04	; 4
    1ee8:	a6 95       	lsr	r26
    1eea:	97 95       	ror	r25
    1eec:	87 95       	ror	r24
    1eee:	77 95       	ror	r23
    1ef0:	67 95       	ror	r22
    1ef2:	ba 95       	dec	r27
    1ef4:	c9 f7       	brne	.-14     	; 0x1ee8 <__ultoa_invert+0x86>
    1ef6:	00 97       	sbiw	r24, 0x00	; 0
    1ef8:	61 05       	cpc	r22, r1
    1efa:	71 05       	cpc	r23, r1
    1efc:	08 95       	ret
    1efe:	9b 01       	movw	r18, r22
    1f00:	ac 01       	movw	r20, r24
    1f02:	0a 2e       	mov	r0, r26
    1f04:	06 94       	lsr	r0
    1f06:	57 95       	ror	r21
    1f08:	47 95       	ror	r20
    1f0a:	37 95       	ror	r19
    1f0c:	27 95       	ror	r18
    1f0e:	ba 95       	dec	r27
    1f10:	c9 f7       	brne	.-14     	; 0x1f04 <__ultoa_invert+0xa2>
    1f12:	62 0f       	add	r22, r18
    1f14:	73 1f       	adc	r23, r19
    1f16:	84 1f       	adc	r24, r20
    1f18:	95 1f       	adc	r25, r21
    1f1a:	a0 1d       	adc	r26, r0
    1f1c:	08 95       	ret

00001f1e <_exit>:
    1f1e:	f8 94       	cli

00001f20 <__stop_program>:
    1f20:	ff cf       	rjmp	.-2      	; 0x1f20 <__stop_program>
