
AudioOutputHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000192e  000019c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000192e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  0080011c  0080011c  000019de  2**0
                  ALLOC
  3 .stab         00000e28  00000000  00000000  000019e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000256  00000000  00000000  00002808  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000430  00000000  00000000  00002a60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005b20  00000000  00000000  00002e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c0b  00000000  00000000  000089b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d4a  00000000  00000000  0000a5bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b2c  00000000  00000000  0000d308  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000028d9  00000000  00000000  0000de34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003f8d  00000000  00000000  0001070d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000440  00000000  00000000  0001469a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	78 c1       	rjmp	.+752    	; 0x2f2 <__ctors_end>
       2:	00 00       	nop
       4:	95 c1       	rjmp	.+810    	; 0x330 <__bad_interrupt>
       6:	00 00       	nop
       8:	93 c1       	rjmp	.+806    	; 0x330 <__bad_interrupt>
       a:	00 00       	nop
       c:	91 c1       	rjmp	.+802    	; 0x330 <__bad_interrupt>
       e:	00 00       	nop
      10:	8f c1       	rjmp	.+798    	; 0x330 <__bad_interrupt>
      12:	00 00       	nop
      14:	8d c1       	rjmp	.+794    	; 0x330 <__bad_interrupt>
      16:	00 00       	nop
      18:	8b c1       	rjmp	.+790    	; 0x330 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	89 c1       	rjmp	.+786    	; 0x330 <__bad_interrupt>
      1e:	00 00       	nop
      20:	87 c1       	rjmp	.+782    	; 0x330 <__bad_interrupt>
      22:	00 00       	nop
      24:	85 c1       	rjmp	.+778    	; 0x330 <__bad_interrupt>
      26:	00 00       	nop
      28:	bf c6       	rjmp	.+3454   	; 0xda8 <__vector_10>
      2a:	00 00       	nop
      2c:	81 c1       	rjmp	.+770    	; 0x330 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7f c1       	rjmp	.+766    	; 0x330 <__bad_interrupt>
      32:	00 00       	nop
      34:	7d c1       	rjmp	.+762    	; 0x330 <__bad_interrupt>
      36:	00 00       	nop
      38:	7b c1       	rjmp	.+758    	; 0x330 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	79 c1       	rjmp	.+754    	; 0x330 <__bad_interrupt>
      3e:	00 00       	nop
      40:	77 c1       	rjmp	.+750    	; 0x330 <__bad_interrupt>
      42:	00 00       	nop
      44:	75 c1       	rjmp	.+746    	; 0x330 <__bad_interrupt>
      46:	00 00       	nop
      48:	73 c1       	rjmp	.+742    	; 0x330 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	71 c1       	rjmp	.+738    	; 0x330 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6f c1       	rjmp	.+734    	; 0x330 <__bad_interrupt>
      52:	00 00       	nop
      54:	b3 c2       	rjmp	.+1382   	; 0x5bc <__vector_21>
      56:	00 00       	nop
      58:	6b c1       	rjmp	.+726    	; 0x330 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	69 c1       	rjmp	.+722    	; 0x330 <__bad_interrupt>
      5e:	00 00       	nop
      60:	67 c1       	rjmp	.+718    	; 0x330 <__bad_interrupt>
      62:	00 00       	nop
      64:	65 c1       	rjmp	.+714    	; 0x330 <__bad_interrupt>
      66:	00 00       	nop
      68:	63 c1       	rjmp	.+710    	; 0x330 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	61 c1       	rjmp	.+706    	; 0x330 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5f c1       	rjmp	.+702    	; 0x330 <__bad_interrupt>
      72:	00 00       	nop
      74:	5d c1       	rjmp	.+698    	; 0x330 <__bad_interrupt>
      76:	00 00       	nop
      78:	5b c1       	rjmp	.+694    	; 0x330 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	59 c1       	rjmp	.+690    	; 0x330 <__bad_interrupt>
      7e:	00 00       	nop
      80:	57 c1       	rjmp	.+686    	; 0x330 <__bad_interrupt>
      82:	00 00       	nop
      84:	55 c1       	rjmp	.+682    	; 0x330 <__bad_interrupt>
      86:	00 00       	nop
      88:	53 c1       	rjmp	.+678    	; 0x330 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	51 c1       	rjmp	.+674    	; 0x330 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4f c1       	rjmp	.+670    	; 0x330 <__bad_interrupt>
      92:	00 00       	nop
      94:	4d c1       	rjmp	.+666    	; 0x330 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4329>:
      98:	1b 5b 33 36 6d 41 75 64 69 6f 20 4f 75 74 70 75     .[36mAudio Outpu
      a8:	74 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     t Host Demo runn
      b8:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00                 ing....[37m.

000000c4 <__c.4338>:
      c4:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
      d4:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

000000e1 <__c.4343>:
      e1:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
      f1:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

00000100 <__c.4348>:
     100:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     110:	61 74 61 2e 0d 0a 00                                ata....

00000117 <__c.4351>:
     117:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     127:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     137:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000141 <__c.4353>:
     141:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     151:	69 63 65 2e 0d 0a 00                                ice....

00000158 <__c.4355>:
     158:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     168:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

00000172 <__c.4357>:
     172:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     182:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     192:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1a2:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1b2:	37 6d 00                                            7m.

000001b5 <__c.4359>:
     1b5:	1b 5b 33 31 6d 43 6f 75 6c 64 20 6e 6f 74 20 73     .[31mCould not s
     1c5:	65 74 20 61 6c 74 65 72 6e 61 74 69 76 65 20 73     et alternative s
     1d5:	74 72 65 61 6d 69 6e 67 20 69 6e 74 65 72 66 61     treaming interfa
     1e5:	63 65 20 73 65 74 74 69 6e 67 2e 0d 0a 20 2d 2d     ce setting... --
     1f5:	20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25 64 0d      Error Code: %d.
     205:	0a 1b 5b 33 37 6d 00                                ..[37m.

0000020c <__c.4363>:
     20c:	1b 5b 33 31 6d 43 6f 75 6c 64 20 6e 6f 74 20 73     .[31mCould not s
     21c:	65 74 20 72 65 71 75 65 73 74 65 64 20 41 75 64     et requested Aud
     22c:	69 6f 20 73 61 6d 70 6c 65 20 72 61 74 65 2e 0d     io sample rate..
     23c:	0a 20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a     . -- Error Code:
     24c:	20 25 64 0d 0a 1b 5b 33 37 6d 00                     %d...[37m.

00000257 <__c.4365>:
     257:	53 70 65 61 6b 65 72 20 45 6e 75 6d 65 72 61 74     Speaker Enumerat
     267:	65 64 2e 0d 0a 00                                   ed....

0000026d <__c.4370>:
     26d:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     27d:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     28d:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000029c <__c.4377>:
     29c:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     2ac:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     2bc:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     2cc:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     2dc:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     2ec:	1b 5b 33 37 6d 00                                   .[37m.

000002f2 <__ctors_end>:
     2f2:	11 24       	eor	r1, r1
     2f4:	1f be       	out	0x3f, r1	; 63
     2f6:	cf ef       	ldi	r28, 0xFF	; 255
     2f8:	d0 e2       	ldi	r29, 0x20	; 32
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	cd bf       	out	0x3d, r28	; 61

000002fe <__do_copy_data>:
     2fe:	11 e0       	ldi	r17, 0x01	; 1
     300:	a0 e0       	ldi	r26, 0x00	; 0
     302:	b1 e0       	ldi	r27, 0x01	; 1
     304:	ee e2       	ldi	r30, 0x2E	; 46
     306:	f9 e1       	ldi	r31, 0x19	; 25
     308:	00 e0       	ldi	r16, 0x00	; 0
     30a:	0b bf       	out	0x3b, r16	; 59
     30c:	02 c0       	rjmp	.+4      	; 0x312 <__do_copy_data+0x14>
     30e:	07 90       	elpm	r0, Z+
     310:	0d 92       	st	X+, r0
     312:	ac 31       	cpi	r26, 0x1C	; 28
     314:	b1 07       	cpc	r27, r17
     316:	d9 f7       	brne	.-10     	; 0x30e <__do_copy_data+0x10>
     318:	1b be       	out	0x3b, r1	; 59

0000031a <__do_clear_bss>:
     31a:	11 e0       	ldi	r17, 0x01	; 1
     31c:	ac e1       	ldi	r26, 0x1C	; 28
     31e:	b1 e0       	ldi	r27, 0x01	; 1
     320:	01 c0       	rjmp	.+2      	; 0x324 <.do_clear_bss_start>

00000322 <.do_clear_bss_loop>:
     322:	1d 92       	st	X+, r1

00000324 <.do_clear_bss_start>:
     324:	a4 34       	cpi	r26, 0x44	; 68
     326:	b1 07       	cpc	r27, r17
     328:	e1 f7       	brne	.-8      	; 0x322 <.do_clear_bss_loop>
     32a:	4c d0       	rcall	.+152    	; 0x3c4 <main>
     32c:	0c 94 95 0c 	jmp	0x192a	; 0x192a <_exit>

00000330 <__bad_interrupt>:
     330:	67 ce       	rjmp	.-818    	; 0x0 <__vectors>

00000332 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     332:	9b b1       	in	r25, 0x0b	; 11
     334:	9f 70       	andi	r25, 0x0F	; 15
     336:	98 2b       	or	r25, r24
     338:	9b b9       	out	0x0b, r25	; 11
			}
     33a:	08 95       	ret

0000033c <SetupHardware>:
	}
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     340:	84 b7       	in	r24, 0x34	; 52
     342:	87 7f       	andi	r24, 0xF7	; 247
     344:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     346:	28 e1       	ldi	r18, 0x18	; 24
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	20 93 60 00 	sts	0x0060, r18
     350:	10 92 60 00 	sts	0x0060, r1
     354:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	80 e8       	ldi	r24, 0x80	; 128
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	f8 94       	cli
     35e:	80 93 61 00 	sts	0x0061, r24
     362:	90 93 61 00 	sts	0x0061, r25
     366:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     368:	83 e3       	ldi	r24, 0x33	; 51
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	90 93 cd 00 	sts	0x00CD, r25
     370:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     374:	86 e0       	ldi	r24, 0x06	; 6
     376:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     37a:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     37e:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     382:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     384:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     386:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     388:	72 9a       	sbi	0x0e, 2	; 14
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(const uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(const uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
     38a:	ca e7       	ldi	r28, 0x7A	; 122
     38c:	d0 e0       	ldi	r29, 0x00	; 0
     38e:	85 ea       	ldi	r24, 0xA5	; 165
     390:	88 83       	st	Y, r24
			 */
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__))
				DDRF  &= ~(1 << ChannelIndex);
     392:	82 98       	cbi	0x10, 2	; 16
				DIDR0 |=  (1 << ChannelIndex);
     394:	ee e7       	ldi	r30, 0x7E	; 126
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	80 81       	ld	r24, Z
     39a:	84 60       	ori	r24, 0x04	; 4
     39c:	80 83       	st	Z, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     39e:	8a b1       	in	r24, 0x0a	; 10
     3a0:	80 6f       	ori	r24, 0xF0	; 240
     3a2:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     3a4:	8b b1       	in	r24, 0x0b	; 11
     3a6:	8f 70       	andi	r24, 0x0F	; 15
     3a8:	8b b9       	out	0x0b, r24	; 11
	Serial_Init(9600, false);
	Buttons_Init();
	ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_32);
	ADC_SetupChannel(MIC_IN_ADC_CHANNEL);
	LEDs_Init();
	USB_Init();
     3aa:	e3 d4       	rcall	.+2502   	; 0xd72 <USB_Init>
     3ac:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	b7 d7       	rcall	.+3950   	; 0x1320 <Serial_CreateStream>
     3b2:	82 e4       	ldi	r24, 0x42	; 66
     3b4:	80 93 7c 00 	sts	0x007C, r24
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
     3b8:	88 81       	ld	r24, Y
     3ba:	80 64       	ori	r24, 0x40	; 64
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
				#endif

				ADCSRA |= (1 << ADSC);
     3bc:	88 83       	st	Y, r24
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28

	/* Start the ADC conversion in free running mode */
	ADC_StartReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_GET_CHANNEL_MASK(MIC_IN_ADC_CHANNEL));	
}
     3c2:	08 95       	ret

000003c4 <main>:
     3c4:	bb df       	rcall	.-138    	; 0x33c <SetupHardware>
     3c6:	88 e9       	ldi	r24, 0x98	; 152
 */
int main(void)
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "Audio Output Host Demo running.\r\n" ESC_FG_WHITE));
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	e6 d7       	rcall	.+4044   	; 0x1398 <puts_P>
     3cc:	80 e1       	ldi	r24, 0x10	; 16
     3ce:	b1 df       	rcall	.-158    	; 0x332 <LEDs_SetAllLEDs>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3d0:	78 94       	sei
     3d2:	7e d7       	rcall	.+3836   	; 0x12d0 <USB_USBTask>
     3d4:	fe cf       	rjmp	.-4      	; 0x3d2 <main+0xe>

000003d6 <EVENT_USB_Host_DeviceAttached>:
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     3d6:	84 ec       	ldi	r24, 0xC4	; 196
	GlobalInterruptEnable();

	for (;;)
	{
		USB_USBTask();
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	de d7       	rcall	.+4028   	; 0x1398 <puts_P>
     3dc:	80 ea       	ldi	r24, 0xA0	; 160
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     3de:	a9 cf       	rjmp	.-174    	; 0x332 <LEDs_SetAllLEDs>

000003e0 <EVENT_USB_Host_DeviceUnattached>:
     3e0:	81 ee       	ldi	r24, 0xE1	; 225
     3e2:	90 e0       	ldi	r25, 0x00	; 0
}
     3e4:	d9 d7       	rcall	.+4018   	; 0x1398 <puts_P>
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     3e6:	80 e1       	ldi	r24, 0x10	; 16
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3e8:	a4 cf       	rjmp	.-184    	; 0x332 <LEDs_SetAllLEDs>

000003ea <EVENT_USB_Host_DeviceEnumerationComplete>:
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
}
     3ee:	df 93       	push	r29

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     3f0:	00 d0       	rcall	.+0      	; 0x3f2 <EVENT_USB_Host_DeviceEnumerationComplete+0x8>
     3f2:	0f 92       	push	r0
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
	puts_P(PSTR("Getting Config Data.\r\n"));
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	cd d7       	rcall	.+3994   	; 0x1398 <puts_P>
     3fe:	6f d1       	rcall	.+734    	; 0x6de <ProcessConfigurationDescriptor>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     400:	18 2f       	mov	r17, r24
     402:	88 23       	and	r24, r24
     404:	f1 f0       	breq	.+60     	; 0x442 <EVENT_USB_Host_DeviceEnumerationComplete+0x58>
     406:	81 30       	cpi	r24, 0x01	; 1
     408:	19 f4       	brne	.+6      	; 0x410 <EVENT_USB_Host_DeviceEnumerationComplete+0x26>
	{
		if (ErrorCode == ControlError)
     40a:	87 e1       	ldi	r24, 0x17	; 23
     40c:	91 e0       	ldi	r25, 0x01	; 1
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     40e:	02 c0       	rjmp	.+4      	; 0x414 <EVENT_USB_Host_DeviceEnumerationComplete+0x2a>
     410:	81 e4       	ldi	r24, 0x41	; 65
     412:	91 e0       	ldi	r25, 0x01	; 1
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     414:	c1 d7       	rcall	.+3970   	; 0x1398 <puts_P>
     416:	00 d0       	rcall	.+0      	; 0x418 <EVENT_USB_Host_DeviceEnumerationComplete+0x2e>
     418:	00 d0       	rcall	.+0      	; 0x41a <EVENT_USB_Host_DeviceEnumerationComplete+0x30>
     41a:	ed b7       	in	r30, 0x3d	; 61

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     41c:	fe b7       	in	r31, 0x3e	; 62
     41e:	31 96       	adiw	r30, 0x01	; 1
     420:	28 e5       	ldi	r18, 0x58	; 88
     422:	31 e0       	ldi	r19, 0x01	; 1
     424:	ad b7       	in	r26, 0x3d	; 61
     426:	be b7       	in	r27, 0x3e	; 62
     428:	12 96       	adiw	r26, 0x02	; 2
     42a:	3c 93       	st	X, r19
     42c:	2e 93       	st	-X, r18
     42e:	11 97       	sbiw	r26, 0x01	; 1
     430:	12 83       	std	Z+2, r17	; 0x02
     432:	13 82       	std	Z+3, r1	; 0x03
     434:	92 d7       	rcall	.+3876   	; 0x135a <printf_P>
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     43e:	80 e9       	ldi	r24, 0x90	; 144
     440:	6e c0       	rjmp	.+220    	; 0x51e <EVENT_USB_Host_DeviceEnumerationComplete+0x134>
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	09 d7       	rcall	.+3602   	; 0x1258 <USB_Host_SetDeviceConfiguration>
     446:	88 23       	and	r24, r24
     448:	79 f0       	breq	.+30     	; 0x468 <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     44a:	00 d0       	rcall	.+0      	; 0x44c <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
     44c:	00 d0       	rcall	.+0      	; 0x44e <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
     44e:	ed b7       	in	r30, 0x3d	; 61
     450:	fe b7       	in	r31, 0x3e	; 62
     452:	31 96       	adiw	r30, 0x01	; 1
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     454:	22 e7       	ldi	r18, 0x72	; 114
     456:	31 e0       	ldi	r19, 0x01	; 1
     458:	ad b7       	in	r26, 0x3d	; 61
     45a:	be b7       	in	r27, 0x3e	; 62
     45c:	12 96       	adiw	r26, 0x02	; 2
     45e:	3c 93       	st	X, r19
     460:	2e 93       	st	-X, r18
     462:	11 97       	sbiw	r26, 0x01	; 1
     464:	82 83       	std	Z+2, r24	; 0x02
     466:	e5 cf       	rjmp	.-54     	; 0x432 <EVENT_USB_Host_DeviceEnumerationComplete+0x48>
     468:	80 91 21 01 	lds	r24, 0x0121
     46c:	60 91 20 01 	lds	r22, 0x0120
     470:	18 d7       	rcall	.+3632   	; 0x12a2 <USB_Host_SetInterfaceAltSetting>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if ((ErrorCode = USB_Host_SetInterfaceAltSetting(StreamingInterfaceIndex,
     472:	88 23       	and	r24, r24
     474:	41 f0       	breq	.+16     	; 0x486 <EVENT_USB_Host_DeviceEnumerationComplete+0x9c>
     476:	00 d0       	rcall	.+0      	; 0x478 <EVENT_USB_Host_DeviceEnumerationComplete+0x8e>
     478:	00 d0       	rcall	.+0      	; 0x47a <EVENT_USB_Host_DeviceEnumerationComplete+0x90>
     47a:	ed b7       	in	r30, 0x3d	; 61
     47c:	fe b7       	in	r31, 0x3e	; 62
     47e:	31 96       	adiw	r30, 0x01	; 1
     480:	25 eb       	ldi	r18, 0xB5	; 181
	                                                 StreamingInterfaceAltSetting)) != HOST_SENDCONTROL_Successful)
	{
		printf_P(PSTR(ESC_FG_RED "Could not set alternative streaming interface setting.\r\n"
     482:	31 e0       	ldi	r19, 0x01	; 1
     484:	2f c0       	rjmp	.+94     	; 0x4e4 <EVENT_USB_Host_DeviceEnumerationComplete+0xfa>
     486:	20 91 1f 01 	lds	r18, 0x011F
     48a:	82 e2       	ldi	r24, 0x22	; 34
     48c:	80 93 27 01 	sts	0x0127, r24
     490:	81 e0       	ldi	r24, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	USB_ControlRequest = (USB_Request_Header_t)
     492:	80 93 28 01 	sts	0x0128, r24
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	90 93 2a 01 	sts	0x012A, r25
     49e:	80 93 29 01 	sts	0x0129, r24
     4a2:	20 93 2b 01 	sts	0x012B, r18
     4a6:	10 92 2c 01 	sts	0x012C, r1
     4aa:	83 e0       	ldi	r24, 0x03	; 3
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	90 93 2e 01 	sts	0x012E, r25
     4b2:	80 93 2d 01 	sts	0x012D, r24
     4b6:	de 01       	movw	r26, r28
     4b8:	11 96       	adiw	r26, 0x01	; 1
     4ba:	e0 e0       	ldi	r30, 0x00	; 0
     4bc:	f1 e0       	ldi	r31, 0x01	; 1
     4be:	83 e0       	ldi	r24, 0x03	; 3
     4c0:	01 90       	ld	r0, Z+
			.wValue        = (AUDIO_EPCONTROL_SamplingFreq << 8),
			.wIndex        = StreamingEndpointAddress,
			.wLength       = sizeof(USB_Audio_SampleFreq_t),
		};

	USB_Audio_SampleFreq_t SampleRate = AUDIO_SAMPLE_FREQ(48000);
     4c2:	0d 92       	st	X+, r0
     4c4:	81 50       	subi	r24, 0x01	; 1
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <EVENT_USB_Host_DeviceEnumerationComplete+0xd6>
     4c8:	10 92 a7 00 	sts	0x00A7, r1
     4cc:	ce 01       	movw	r24, r28
     4ce:	01 96       	adiw	r24, 0x01	; 1
     4d0:	c5 d5       	rcall	.+2954   	; 0x105c <USB_Host_SendControlRequest>
     4d2:	88 23       	and	r24, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     4d4:	c9 f0       	breq	.+50     	; 0x508 <EVENT_USB_Host_DeviceEnumerationComplete+0x11e>
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <EVENT_USB_Host_DeviceEnumerationComplete+0xee>

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Set the sample rate on the streaming interface endpoint */
	if ((ErrorCode = USB_Host_SendControlRequest(&SampleRate)) != HOST_SENDCONTROL_Successful)
     4d8:	00 d0       	rcall	.+0      	; 0x4da <EVENT_USB_Host_DeviceEnumerationComplete+0xf0>
     4da:	ed b7       	in	r30, 0x3d	; 61
     4dc:	fe b7       	in	r31, 0x3e	; 62
     4de:	31 96       	adiw	r30, 0x01	; 1
     4e0:	2c e0       	ldi	r18, 0x0C	; 12
     4e2:	32 e0       	ldi	r19, 0x02	; 2
	{
		printf_P(PSTR(ESC_FG_RED "Could not set requested Audio sample rate.\r\n"
     4e4:	ad b7       	in	r26, 0x3d	; 61
     4e6:	be b7       	in	r27, 0x3e	; 62
     4e8:	12 96       	adiw	r26, 0x02	; 2
     4ea:	3c 93       	st	X, r19
     4ec:	2e 93       	st	-X, r18
     4ee:	11 97       	sbiw	r26, 0x01	; 1
     4f0:	82 83       	std	Z+2, r24	; 0x02
     4f2:	13 82       	std	Z+3, r1	; 0x03
     4f4:	32 d7       	rcall	.+3684   	; 0x135a <printf_P>
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	80 e9       	ldi	r24, 0x90	; 144
     500:	18 df       	rcall	.-464    	; 0x332 <LEDs_SetAllLEDs>
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	a9 d6       	rcall	.+3410   	; 0x1258 <USB_Host_SetDeviceConfiguration>
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     506:	0c c0       	rjmp	.+24     	; 0x520 <EVENT_USB_Host_DeviceEnumerationComplete+0x136>
     508:	82 e0       	ldi	r24, 0x02	; 2
     50a:	80 93 6e 00 	sts	0x006E, r24
     50e:	93 e1       	ldi	r25, 0x13	; 19
     510:	97 bd       	out	0x27, r25	; 39
     512:	84 bd       	out	0x24, r24	; 36
		USB_Host_SetDeviceConfiguration(0);
     514:	85 bd       	out	0x25, r24	; 37
     516:	87 e5       	ldi	r24, 0x57	; 87
     518:	92 e0       	ldi	r25, 0x02	; 2
		return;
     51a:	3e d7       	rcall	.+3708   	; 0x1398 <puts_P>
	}

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
     51c:	80 e6       	ldi	r24, 0x60	; 96
     51e:	09 df       	rcall	.-494    	; 0x332 <LEDs_SetAllLEDs>
     520:	0f 90       	pop	r0
	OCR0A   = ((F_CPU / 8 / 48000) - 1);
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
	TCCR0A  = (1 << WGM01);  // CTC mode
     526:	df 91       	pop	r29
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed
     528:	cf 91       	pop	r28

	puts_P(PSTR("Speaker Enumerated.\r\n"));
     52a:	1f 91       	pop	r17
     52c:	08 95       	ret

0000052e <EVENT_USB_Host_HostError>:
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     532:	0f 92       	push	r0
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
}
     538:	89 83       	std	Y+1, r24	; 0x01
     53a:	b3 d3       	rcall	.+1894   	; 0xca2 <USB_Disable>
     53c:	00 d0       	rcall	.+0      	; 0x53e <EVENT_USB_Host_HostError+0x10>
     53e:	00 d0       	rcall	.+0      	; 0x540 <EVENT_USB_Host_HostError+0x12>
     540:	ed b7       	in	r30, 0x3d	; 61
     542:	fe b7       	in	r31, 0x3e	; 62
     544:	31 96       	adiw	r30, 0x01	; 1
/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     546:	2d e6       	ldi	r18, 0x6D	; 109
     548:	32 e0       	ldi	r19, 0x02	; 2
     54a:	ad b7       	in	r26, 0x3d	; 61
     54c:	be b7       	in	r27, 0x3e	; 62
     54e:	12 96       	adiw	r26, 0x02	; 2
     550:	3c 93       	st	X, r19
     552:	2e 93       	st	-X, r18
     554:	11 97       	sbiw	r26, 0x01	; 1
     556:	89 81       	ldd	r24, Y+1	; 0x01
     558:	82 83       	std	Z+2, r24	; 0x02
     55a:	13 82       	std	Z+3, r1	; 0x03
     55c:	fe d6       	rcall	.+3580   	; 0x135a <printf_P>
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	80 e9       	ldi	r24, 0x90	; 144
     568:	e4 de       	rcall	.-568    	; 0x332 <LEDs_SetAllLEDs>
     56a:	ff cf       	rjmp	.-2      	; 0x56a <EVENT_USB_Host_HostError+0x3c>

0000056c <EVENT_USB_Host_DeviceEnumerationFailed>:
     56c:	90 91 2f 01 	lds	r25, 0x012F
     570:	2d b7       	in	r18, 0x3d	; 61
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     572:	3e b7       	in	r19, 0x3e	; 62
     574:	28 50       	subi	r18, 0x08	; 8
     576:	30 40       	sbci	r19, 0x00	; 0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	f8 94       	cli
     57c:	3e bf       	out	0x3e, r19	; 62
     57e:	0f be       	out	0x3f, r0	; 63
     580:	2d bf       	out	0x3d, r18	; 61
     582:	ed b7       	in	r30, 0x3d	; 61
     584:	fe b7       	in	r31, 0x3e	; 62
     586:	31 96       	adiw	r30, 0x01	; 1
     588:	2c e9       	ldi	r18, 0x9C	; 156
     58a:	32 e0       	ldi	r19, 0x02	; 2
     58c:	ad b7       	in	r26, 0x3d	; 61
     58e:	be b7       	in	r27, 0x3e	; 62
     590:	12 96       	adiw	r26, 0x02	; 2
     592:	3c 93       	st	X, r19
     594:	2e 93       	st	-X, r18
     596:	11 97       	sbiw	r26, 0x01	; 1
     598:	82 83       	std	Z+2, r24	; 0x02
     59a:	13 82       	std	Z+3, r1	; 0x03
     59c:	64 83       	std	Z+4, r22	; 0x04
     59e:	15 82       	std	Z+5, r1	; 0x05
     5a0:	96 83       	std	Z+6, r25	; 0x06
     5a2:	17 82       	std	Z+7, r1	; 0x07
     5a4:	da d6       	rcall	.+3508   	; 0x135a <printf_P>
     5a6:	2d b7       	in	r18, 0x3d	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5a8:	3e b7       	in	r19, 0x3e	; 62
     5aa:	28 5f       	subi	r18, 0xF8	; 248
     5ac:	3f 4f       	sbci	r19, 0xFF	; 255
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	f8 94       	cli
     5b2:	3e bf       	out	0x3e, r19	; 62
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	2d bf       	out	0x3d, r18	; 61
     5b8:	80 e9       	ldi	r24, 0x90	; 144
     5ba:	bb ce       	rjmp	.-650    	; 0x332 <LEDs_SetAllLEDs>

000005bc <__vector_21>:
     5bc:	1f 92       	push	r1
     5be:	0f 92       	push	r0
}
     5c0:	0f b6       	in	r0, 0x3f	; 63

/** ISR to handle the reloading of the endpoint with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
     5c2:	0f 92       	push	r0
     5c4:	11 24       	eor	r1, r1
     5c6:	2f 93       	push	r18
     5c8:	8f 93       	push	r24
     5ca:	9f 93       	push	r25
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     5cc:	80 91 a7 00 	lds	r24, 0x00A7
     5d0:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     5d2:	90 91 aa 00 	lds	r25, 0x00AA
     5d6:	90 ff       	sbrs	r25, 0
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <__vector_21+0x22>
     5da:	90 e8       	ldi	r25, 0x80	; 128
     5dc:	01 c0       	rjmp	.+2      	; 0x5e0 <__vector_21+0x24>
     5de:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     5e0:	29 2f       	mov	r18, r25
     5e2:	28 2b       	or	r18, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     5ea:	80 91 a9 00 	lds	r24, 0x00A9
     5ee:	8f 7b       	andi	r24, 0xBF	; 191
     5f0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     5f4:	80 91 a6 00 	lds	r24, 0x00A6

	Pipe_SelectPipe(AUDIO_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	/* Check if the current pipe can be written to (device ready for more data) */
	if (Pipe_IsOUTReady())
     5f8:	82 ff       	sbrs	r24, 2
     5fa:	2d c0       	rjmp	.+90     	; 0x656 <__vector_21+0x9a>
		#if defined(USE_TEST_TONE)
			static uint8_t SquareWaveSampleCount;
			static int16_t CurrentWaveValue;

			/* In test tone mode, generate a square wave at 1/256 of the sample rate */
			if (SquareWaveSampleCount++ == 0xFF)
     5fc:	90 91 1c 01 	lds	r25, 0x011C
     600:	89 2f       	mov	r24, r25
     602:	8f 5f       	subi	r24, 0xFF	; 255
     604:	80 93 1c 01 	sts	0x011C, r24
     608:	9f 3f       	cpi	r25, 0xFF	; 255
     60a:	51 f4       	brne	.+20     	; 0x620 <__vector_21+0x64>
			  CurrentWaveValue ^= 0x8000;
     60c:	80 91 1d 01 	lds	r24, 0x011D
     610:	90 91 1e 01 	lds	r25, 0x011E
     614:	80 50       	subi	r24, 0x00	; 0
     616:	90 48       	sbci	r25, 0x80	; 128
     618:	90 93 1e 01 	sts	0x011E, r25
     61c:	80 93 1d 01 	sts	0x011D, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     620:	8c b1       	in	r24, 0x0c	; 12

			/* Only generate audio if the board button is being pressed */
			AudioSample = (Buttons_GetStatus() & BUTTONS_BUTTON1) ? CurrentWaveValue : 0;
     622:	82 fd       	sbrc	r24, 2
     624:	05 c0       	rjmp	.+10     	; 0x630 <__vector_21+0x74>
     626:	80 91 1d 01 	lds	r24, 0x011D
     62a:	90 91 1e 01 	lds	r25, 0x011E
     62e:	02 c0       	rjmp	.+4      	; 0x634 <__vector_21+0x78>
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     634:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     638:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     63c:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     640:	90 93 af 00 	sts	0x00AF, r25
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     644:	80 91 a6 00 	lds	r24, 0x00A6
		#endif

		Pipe_Write_16_LE(AudioSample);
		Pipe_Write_16_LE(AudioSample);

		if (!(Pipe_IsReadWriteAllowed()))
     648:	85 fd       	sbrc	r24, 5
     64a:	05 c0       	rjmp	.+10     	; 0x656 <__vector_21+0x9a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     64c:	80 91 a6 00 	lds	r24, 0x00A6
     650:	8b 77       	andi	r24, 0x7B	; 123
     652:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     656:	80 91 a9 00 	lds	r24, 0x00A9
     65a:	80 64       	ori	r24, 0x40	; 64
     65c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     660:	82 2f       	mov	r24, r18
     662:	8f 70       	andi	r24, 0x0F	; 15
     664:	80 93 a7 00 	sts	0x00A7, r24
		  Pipe_ClearOUT();
	}

	Pipe_Freeze();
	Pipe_SelectPipe(PrevPipe);
}
     668:	9f 91       	pop	r25
     66a:	8f 91       	pop	r24
     66c:	2f 91       	pop	r18
     66e:	0f 90       	pop	r0
     670:	0f be       	out	0x3f, r0	; 63
     672:	0f 90       	pop	r0
     674:	1f 90       	pop	r1
     676:	18 95       	reti

00000678 <DComp_NextAudioControlInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Audio Control Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextAudioControlInterface(void* CurrentDescriptor)
{
     678:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     67a:	81 81       	ldd	r24, Z+1	; 0x01
     67c:	84 30       	cpi	r24, 0x04	; 4
     67e:	49 f4       	brne	.+18     	; 0x692 <DComp_NextAudioControlInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
     680:	85 81       	ldd	r24, Z+5	; 0x05
     682:	81 30       	cpi	r24, 0x01	; 1
     684:	31 f4       	brne	.+12     	; 0x692 <DComp_NextAudioControlInterface+0x1a>
     686:	86 81       	ldd	r24, Z+6	; 0x06
     688:	81 30       	cpi	r24, 0x01	; 1
     68a:	19 f4       	brne	.+6      	; 0x692 <DComp_NextAudioControlInterface+0x1a>
		    (Interface->SubClass == AUDIO_CSCP_ControlSubclass) &&
     68c:	87 81       	ldd	r24, Z+7	; 0x07
     68e:	88 23       	and	r24, r24
     690:	11 f0       	breq	.+4      	; 0x696 <DComp_NextAudioControlInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     692:	82 e0       	ldi	r24, 0x02	; 2
     694:	08 95       	ret

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
		    (Interface->SubClass == AUDIO_CSCP_ControlSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_ControlProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     696:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     698:	08 95       	ret

0000069a <DComp_NextAudioStreamInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Audio Streaming Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextAudioStreamInterface(void* CurrentDescriptor)
{
     69a:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     69c:	81 81       	ldd	r24, Z+1	; 0x01
     69e:	84 30       	cpi	r24, 0x04	; 4
     6a0:	49 f4       	brne	.+18     	; 0x6b4 <DComp_NextAudioStreamInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
     6a2:	85 81       	ldd	r24, Z+5	; 0x05
     6a4:	81 30       	cpi	r24, 0x01	; 1
     6a6:	31 f4       	brne	.+12     	; 0x6b4 <DComp_NextAudioStreamInterface+0x1a>
     6a8:	86 81       	ldd	r24, Z+6	; 0x06
     6aa:	82 30       	cpi	r24, 0x02	; 2
     6ac:	19 f4       	brne	.+6      	; 0x6b4 <DComp_NextAudioStreamInterface+0x1a>
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
     6ae:	87 81       	ldd	r24, Z+7	; 0x07
     6b0:	88 23       	and	r24, r24
     6b2:	11 f0       	breq	.+4      	; 0x6b8 <DComp_NextAudioStreamInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     6b4:	82 e0       	ldi	r24, 0x02	; 2
     6b6:	08 95       	ret

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_StreamingProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     6b8:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     6ba:	08 95       	ret

000006bc <DComp_NextAudioInterfaceDataEndpoint>:
 *  search if another interface descriptor is found before the next endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextAudioInterfaceDataEndpoint(void* CurrentDescriptor)
{
     6bc:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     6be:	81 81       	ldd	r24, Z+1	; 0x01
     6c0:	85 30       	cpi	r24, 0x05	; 5
     6c2:	29 f4       	brne	.+10     	; 0x6ce <DComp_NextAudioInterfaceDataEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
     6c4:	83 81       	ldd	r24, Z+3	; 0x03
     6c6:	83 70       	andi	r24, 0x03	; 3
     6c8:	81 30       	cpi	r24, 0x01	; 1
     6ca:	19 f4       	brne	.+6      	; 0x6d2 <DComp_NextAudioInterfaceDataEndpoint+0x16>
     6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <DComp_NextAudioInterfaceDataEndpoint+0x1a>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     6ce:	84 30       	cpi	r24, 0x04	; 4
     6d0:	21 f0       	breq	.+8      	; 0x6da <DComp_NextAudioInterfaceDataEndpoint+0x1e>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
     6d2:	82 e0       	ldi	r24, 0x02	; 2
     6d4:	08 95       	ret
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
		  return DESCRIPTOR_SEARCH_Found;
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
     6da:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     6dc:	08 95       	ret

000006de <ProcessConfigurationDescriptor>:
 *  This routine searches for a Streaming Audio interface descriptor containing a valid Isochronous audio endpoint.
 *
 *  \return An error code from the \ref AudioHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     6de:	cf 92       	push	r12
     6e0:	df 92       	push	r13
     6e2:	ef 92       	push	r14
     6e4:	ff 92       	push	r15
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
     6f2:	c4 50       	subi	r28, 0x04	; 4
     6f4:	d2 40       	sbci	r29, 0x02	; 2
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	f8 94       	cli
     6fa:	de bf       	out	0x3e, r29	; 62
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     700:	ae 01       	movw	r20, r28
     702:	4b 5f       	subi	r20, 0xFB	; 251
     704:	5f 4f       	sbci	r21, 0xFF	; 255
     706:	5c 83       	std	Y+4, r21	; 0x04
     708:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint         = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	7e 01       	movw	r14, r28
     70e:	08 94       	sec
     710:	e1 1c       	adc	r14, r1
     712:	f1 1c       	adc	r15, r1
     714:	b7 01       	movw	r22, r14
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	32 e0       	ldi	r19, 0x02	; 2
     71a:	d9 d3       	rcall	.+1970   	; 0xece <USB_Host_GetDeviceConfigDescriptor>
     71c:	85 30       	cpi	r24, 0x05	; 5
     71e:	09 f4       	brne	.+2      	; 0x722 <ProcessConfigurationDescriptor+0x44>
     720:	52 c0       	rjmp	.+164    	; 0x7c6 <ProcessConfigurationDescriptor+0xe8>
     722:	86 30       	cpi	r24, 0x06	; 6
     724:	19 f0       	breq	.+6      	; 0x72c <ProcessConfigurationDescriptor+0x4e>
     726:	88 23       	and	r24, r24
     728:	41 f0       	breq	.+16     	; 0x73a <ProcessConfigurationDescriptor+0x5c>
     72a:	02 c0       	rjmp	.+4      	; 0x730 <ProcessConfigurationDescriptor+0x52>
     72c:	83 e0       	ldi	r24, 0x03	; 3
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     72e:	4e c0       	rjmp	.+156    	; 0x7cc <ProcessConfigurationDescriptor+0xee>
     730:	81 e0       	ldi	r24, 0x01	; 1
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     732:	4c c0       	rjmp	.+152    	; 0x7cc <ProcessConfigurationDescriptor+0xee>
     734:	09 2f       	mov	r16, r25
 *  This routine searches for a Streaming Audio interface descriptor containing a valid Isochronous audio endpoint.
 *
 *  \return An error code from the \ref AudioHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     736:	18 2f       	mov	r17, r24
     738:	04 c0       	rjmp	.+8      	; 0x742 <ProcessConfigurationDescriptor+0x64>
     73a:	00 e0       	ldi	r16, 0x00	; 0
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint         = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     73c:	10 e0       	ldi	r17, 0x00	; 0
     73e:	cc 24       	eor	r12, r12
     740:	dd 24       	eor	r13, r13
     742:	c1 14       	cp	r12, r1
	}

	while (!(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(AudioControlInterface) ||
     744:	d1 04       	cpc	r13, r1
     746:	59 f0       	breq	.+22     	; 0x75e <ProcessConfigurationDescriptor+0x80>
     748:	c7 01       	movw	r24, r14
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     74a:	be 01       	movw	r22, r28
     74c:	6d 5f       	subi	r22, 0xFD	; 253
     74e:	7f 4f       	sbci	r23, 0xFF	; 255
     750:	4e e5       	ldi	r20, 0x5E	; 94
     752:	53 e0       	ldi	r21, 0x03	; 3
     754:	13 d4       	rcall	.+2086   	; 0xf7c <USB_GetNextDescriptorComp>
     756:	88 23       	and	r24, r24
     758:	09 f0       	breq	.+2      	; 0x75c <ProcessConfigurationDescriptor+0x7e>
	}

	while (!(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(AudioControlInterface) ||
     75a:	48 c0       	rjmp	.+144    	; 0x7ec <ProcessConfigurationDescriptor+0x10e>
     75c:	17 c0       	rjmp	.+46     	; 0x78c <ProcessConfigurationDescriptor+0xae>
     75e:	c7 01       	movw	r24, r14
     760:	be 01       	movw	r22, r28
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
				                          DComp_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Find a new Audio Control interface if the current one doesn't contain a compatible streaming interface */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     762:	6d 5f       	subi	r22, 0xFD	; 253
     764:	7f 4f       	sbci	r23, 0xFF	; 255
     766:	4c e3       	ldi	r20, 0x3C	; 60
     768:	53 e0       	ldi	r21, 0x03	; 3
     76a:	08 d4       	rcall	.+2064   	; 0xf7c <USB_GetNextDescriptorComp>
     76c:	88 23       	and	r24, r24
     76e:	69 f5       	brne	.+90     	; 0x7ca <ProcessConfigurationDescriptor+0xec>
     770:	cb 80       	ldd	r12, Y+3	; 0x03
     772:	dc 80       	ldd	r13, Y+4	; 0x04
     774:	c7 01       	movw	r24, r14
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Save the interface in case we need to refer back to it later */
				AudioControlInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     776:	be 01       	movw	r22, r28
     778:	6d 5f       	subi	r22, 0xFD	; 253

				/* Find the next Audio Streaming interface within that Audio Control interface */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	4d e4       	ldi	r20, 0x4D	; 77
     77e:	53 e0       	ldi	r21, 0x03	; 3
     780:	fd d3       	rcall	.+2042   	; 0xf7c <USB_GetNextDescriptorComp>
     782:	88 23       	and	r24, r24
     784:	11 f5       	brne	.+68     	; 0x7ca <ProcessConfigurationDescriptor+0xec>
     786:	0b 81       	ldd	r16, Y+3	; 0x03
     788:	1c 81       	ldd	r17, Y+4	; 0x04
     78a:	3b c0       	rjmp	.+118    	; 0x802 <ProcessConfigurationDescriptor+0x124>
     78c:	eb 81       	ldd	r30, Y+3	; 0x03
					return NoCompatibleInterfaceFound;
				}
			}

			/* Save the interface in case we need to refer back to it later */
			AudioStreamingInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     78e:	fc 81       	ldd	r31, Y+4	; 0x04
     790:	42 81       	ldd	r20, Z+2	; 0x02

			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
     792:	47 fd       	sbrc	r20, 7
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     794:	36 c0       	rjmp	.+108    	; 0x802 <ProcessConfigurationDescriptor+0x124>
     796:	90 2f       	mov	r25, r16

		/* Save the endpoint if it is an OUT type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_OUT)
     798:	81 2f       	mov	r24, r17
     79a:	30 97       	sbiw	r30, 0x00	; 0
     79c:	59 f2       	breq	.-106    	; 0x734 <ProcessConfigurationDescriptor+0x56>
     79e:	d8 01       	movw	r26, r16
     7a0:	12 96       	adiw	r26, 0x02	; 2
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataOUTEndpoint))
     7a2:	8c 91       	ld	r24, X
     7a4:	12 97       	sbiw	r26, 0x02	; 2
		/* Save the endpoint if it is an OUT type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_OUT)
		  DataOUTEndpoint = EndpointData;
	}

	StreamingInterfaceIndex      = AudioStreamingInterface->InterfaceNumber;
     7a6:	80 93 21 01 	sts	0x0121, r24
     7aa:	13 96       	adiw	r26, 0x03	; 3
     7ac:	8c 91       	ld	r24, X
     7ae:	80 93 20 01 	sts	0x0120, r24
	StreamingInterfaceAltSetting = AudioStreamingInterface->AlternateSetting;
     7b2:	40 93 1f 01 	sts	0x011F, r20
     7b6:	24 81       	ldd	r18, Z+4	; 0x04
     7b8:	35 81       	ldd	r19, Z+5	; 0x05
	StreamingEndpointAddress     = DataOUTEndpoint->EndpointAddress;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	61 e0       	ldi	r22, 0x01	; 1

	/* Configure the Audio data OUT pipe */
	Pipe_ConfigurePipe(AUDIO_DATA_OUT_PIPE, EP_TYPE_ISOCHRONOUS, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 2);
     7be:	02 e0       	ldi	r16, 0x02	; 2
     7c0:	f7 d1       	rcall	.+1006   	; 0xbb0 <Pipe_ConfigurePipe>
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	03 c0       	rjmp	.+6      	; 0x7cc <ProcessConfigurationDescriptor+0xee>
     7c6:	82 e0       	ldi	r24, 0x02	; 2
     7c8:	01 c0       	rjmp	.+2      	; 0x7cc <ProcessConfigurationDescriptor+0xee>
     7ca:	84 e0       	ldi	r24, 0x04	; 4

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     7cc:	cc 5f       	subi	r28, 0xFC	; 252
     7ce:	dd 4f       	sbci	r29, 0xFD	; 253
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	f8 94       	cli
				/* Find the next Audio Streaming interface within that Audio Control interface */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
				                              DComp_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
     7d4:	de bf       	out	0x3e, r29	; 62
	/* Configure the Audio data OUT pipe */
	Pipe_ConfigurePipe(AUDIO_DATA_OUT_PIPE, EP_TYPE_ISOCHRONOUS, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 2);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	cd bf       	out	0x3d, r28	; 61
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	ff 90       	pop	r15
     7e4:	ef 90       	pop	r14
     7e6:	df 90       	pop	r13
     7e8:	cf 90       	pop	r12
     7ea:	08 95       	ret
     7ec:	c7 01       	movw	r24, r14
     7ee:	be 01       	movw	r22, r28
     7f0:	6d 5f       	subi	r22, 0xFD	; 253
     7f2:	7f 4f       	sbci	r23, 0xFF	; 255
     7f4:	4d e4       	ldi	r20, 0x4D	; 77
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Check if we haven't found an Audio Control interface yet, or if we have run out of related Audio Streaming interfaces */
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     7f6:	53 e0       	ldi	r21, 0x03	; 3
     7f8:	c1 d3       	rcall	.+1922   	; 0xf7c <USB_GetNextDescriptorComp>
     7fa:	88 23       	and	r24, r24
     7fc:	09 f0       	breq	.+2      	; 0x800 <ProcessConfigurationDescriptor+0x122>
     7fe:	af cf       	rjmp	.-162    	; 0x75e <ProcessConfigurationDescriptor+0x80>
     800:	c2 cf       	rjmp	.-124    	; 0x786 <ProcessConfigurationDescriptor+0xa8>
     802:	90 2f       	mov	r25, r16
     804:	81 2f       	mov	r24, r17
		if (!(AudioControlInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Check if we haven't found an Audio Control interface yet, or if we have run out of related Audio Streaming interfaces */
			if (!(AudioControlInterface) ||
     806:	96 cf       	rjmp	.-212    	; 0x734 <ProcessConfigurationDescriptor+0x56>

00000808 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     808:	80 91 9e 00 	lds	r24, 0x009E
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	81 70       	andi	r24, 0x01	; 1
     810:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     812:	20 91 a0 00 	lds	r18, 0x00A0
     816:	2d 7f       	andi	r18, 0xFD	; 253
     818:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     81c:	20 91 9e 00 	lds	r18, 0x009E
     820:	22 60       	ori	r18, 0x02	; 2
     822:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     826:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     82a:	21 fd       	sbrc	r18, 1
     82c:	fc cf       	rjmp	.-8      	; 0x826 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     82e:	20 91 9e 00 	lds	r18, 0x009E
     832:	21 60       	ori	r18, 0x01	; 1
     834:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     838:	10 92 25 01 	sts	0x0125, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     83c:	20 91 a0 00 	lds	r18, 0x00A0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	20 72       	andi	r18, 0x20	; 32
     844:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     846:	40 91 a0 00 	lds	r20, 0x00A0
     84a:	4f 7d       	andi	r20, 0xDF	; 223
     84c:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     850:	40 91 9f 00 	lds	r20, 0x009F
     854:	4f 7d       	andi	r20, 0xDF	; 223
     856:	40 93 9f 00 	sts	0x009F, r20
     85a:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     85c:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     860:	55 ff       	sbrs	r21, 5
     862:	0b c0       	rjmp	.+22     	; 0x87a <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     864:	40 91 9f 00 	lds	r20, 0x009F
     868:	4f 7d       	andi	r20, 0xDF	; 223
     86a:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     86e:	40 91 9f 00 	lds	r20, 0x009F
     872:	4d 7f       	andi	r20, 0xFD	; 253
     874:	40 93 9f 00 	sts	0x009F, r20
     878:	08 c0       	rjmp	.+16     	; 0x88a <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     87a:	ef ec       	ldi	r30, 0xCF	; 207
     87c:	f7 e0       	ldi	r31, 0x07	; 7
     87e:	31 97       	sbiw	r30, 0x01	; 1
     880:	f1 f7       	brne	.-4      	; 0x87e <USB_Host_ResetDevice+0x76>
     882:	00 c0       	rjmp	.+0      	; 0x884 <USB_Host_ResetDevice+0x7c>
     884:	00 00       	nop
     886:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     888:	49 f7       	brne	.-46     	; 0x85c <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     88a:	21 15       	cp	r18, r1
     88c:	31 05       	cpc	r19, r1
     88e:	29 f0       	breq	.+10     	; 0x89a <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     890:	20 91 a0 00 	lds	r18, 0x00A0
     894:	20 62       	ori	r18, 0x20	; 32
     896:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     89a:	00 97       	sbiw	r24, 0x00	; 0
     89c:	29 f4       	brne	.+10     	; 0x8a8 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     89e:	80 91 9e 00 	lds	r24, 0x009E
     8a2:	8e 7f       	andi	r24, 0xFE	; 254
     8a4:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     8a8:	80 91 a0 00 	lds	r24, 0x00A0
     8ac:	82 60       	ori	r24, 0x02	; 2
     8ae:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     8b2:	08 95       	ret

000008b4 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     8b4:	40 91 9e 00 	lds	r20, 0x009E
     8b8:	50 e0       	ldi	r21, 0x00	; 0
     8ba:	41 70       	andi	r20, 0x01	; 1
     8bc:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     8be:	20 91 a0 00 	lds	r18, 0x00A0
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	20 72       	andi	r18, 0x20	; 32
     8c6:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     8c8:	90 91 a0 00 	lds	r25, 0x00A0
     8cc:	9f 7d       	andi	r25, 0xDF	; 223
     8ce:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     8d2:	90 91 9f 00 	lds	r25, 0x009F
     8d6:	9f 7d       	andi	r25, 0xDF	; 223
     8d8:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     8dc:	90 91 9e 00 	lds	r25, 0x009E
     8e0:	91 60       	ori	r25, 0x01	; 1
     8e2:	90 93 9e 00 	sts	0x009E, r25
     8e6:	26 c0       	rjmp	.+76     	; 0x934 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     8e8:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     8ec:	95 ff       	sbrs	r25, 5
     8ee:	06 c0       	rjmp	.+12     	; 0x8fc <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     8f0:	90 91 9f 00 	lds	r25, 0x009F
     8f4:	9f 7d       	andi	r25, 0xDF	; 223
     8f6:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     8fa:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     8fc:	90 91 2f 01 	lds	r25, 0x012F
     900:	91 30       	cpi	r25, 0x01	; 1
     902:	d9 f0       	breq	.+54     	; 0x93a <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     904:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     908:	94 ff       	sbrs	r25, 4
     90a:	09 c0       	rjmp	.+18     	; 0x91e <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     90c:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     910:	80 91 a6 00 	lds	r24, 0x00A6
     914:	8f 7e       	andi	r24, 0xEF	; 239
     916:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     91a:	82 e0       	ldi	r24, 0x02	; 2

			break;
     91c:	0f c0       	rjmp	.+30     	; 0x93c <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     91e:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     922:	91 ff       	sbrs	r25, 1
     924:	07 c0       	rjmp	.+14     	; 0x934 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     926:	80 91 a6 00 	lds	r24, 0x00A6
     92a:	8d 7f       	andi	r24, 0xFD	; 253
     92c:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     930:	83 e0       	ldi	r24, 0x03	; 3

			break;
     932:	04 c0       	rjmp	.+8      	; 0x93c <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     934:	88 23       	and	r24, r24
     936:	c1 f6       	brne	.-80     	; 0x8e8 <USB_Host_WaitMS+0x34>
     938:	01 c0       	rjmp	.+2      	; 0x93c <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     93a:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     93c:	41 15       	cp	r20, r1
     93e:	51 05       	cpc	r21, r1
     940:	29 f4       	brne	.+10     	; 0x94c <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     942:	90 91 9e 00 	lds	r25, 0x009E
     946:	9e 7f       	andi	r25, 0xFE	; 254
     948:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     94c:	21 15       	cp	r18, r1
     94e:	31 05       	cpc	r19, r1
     950:	29 f0       	breq	.+10     	; 0x95c <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     952:	90 91 a0 00 	lds	r25, 0x00A0
     956:	90 62       	ori	r25, 0x20	; 32
     958:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     95c:	08 95       	ret

0000095e <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     95e:	0f 93       	push	r16
     960:	1f 93       	push	r17
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
     96a:	28 97       	sbiw	r28, 0x08	; 8
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	de bf       	out	0x3e, r29	; 62
     972:	0f be       	out	0x3f, r0	; 63
     974:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     976:	80 91 2f 01 	lds	r24, 0x012F
     97a:	85 30       	cpi	r24, 0x05	; 5
     97c:	09 f4       	brne	.+2      	; 0x980 <USB_Host_ProcessNextHostState+0x22>
     97e:	99 c0       	rjmp	.+306    	; 0xab2 <USB_Host_ProcessNextHostState+0x154>
     980:	86 30       	cpi	r24, 0x06	; 6
     982:	68 f4       	brcc	.+26     	; 0x99e <USB_Host_ProcessNextHostState+0x40>
     984:	82 30       	cpi	r24, 0x02	; 2
     986:	c1 f1       	breq	.+112    	; 0x9f8 <USB_Host_ProcessNextHostState+0x9a>
     988:	83 30       	cpi	r24, 0x03	; 3
     98a:	18 f4       	brcc	.+6      	; 0x992 <USB_Host_ProcessNextHostState+0x34>
     98c:	88 23       	and	r24, r24
     98e:	a1 f0       	breq	.+40     	; 0x9b8 <USB_Host_ProcessNextHostState+0x5a>
     990:	04 c1       	rjmp	.+520    	; 0xb9a <USB_Host_ProcessNextHostState+0x23c>
     992:	83 30       	cpi	r24, 0x03	; 3
     994:	d9 f1       	breq	.+118    	; 0xa0c <USB_Host_ProcessNextHostState+0xae>
     996:	84 30       	cpi	r24, 0x04	; 4
     998:	09 f0       	breq	.+2      	; 0x99c <USB_Host_ProcessNextHostState+0x3e>
     99a:	ff c0       	rjmp	.+510    	; 0xb9a <USB_Host_ProcessNextHostState+0x23c>
     99c:	62 c0       	rjmp	.+196    	; 0xa62 <USB_Host_ProcessNextHostState+0x104>
     99e:	87 30       	cpi	r24, 0x07	; 7
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <USB_Host_ProcessNextHostState+0x46>
     9a2:	9e c0       	rjmp	.+316    	; 0xae0 <USB_Host_ProcessNextHostState+0x182>
     9a4:	87 30       	cpi	r24, 0x07	; 7
     9a6:	08 f4       	brcc	.+2      	; 0x9aa <USB_Host_ProcessNextHostState+0x4c>
     9a8:	8f c0       	rjmp	.+286    	; 0xac8 <USB_Host_ProcessNextHostState+0x16a>
     9aa:	88 30       	cpi	r24, 0x08	; 8
     9ac:	09 f4       	brne	.+2      	; 0x9b0 <USB_Host_ProcessNextHostState+0x52>
     9ae:	b8 c0       	rjmp	.+368    	; 0xb20 <USB_Host_ProcessNextHostState+0x1c2>
     9b0:	89 30       	cpi	r24, 0x09	; 9
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <USB_Host_ProcessNextHostState+0x58>
     9b4:	f2 c0       	rjmp	.+484    	; 0xb9a <USB_Host_ProcessNextHostState+0x23c>
     9b6:	d9 c0       	rjmp	.+434    	; 0xb6a <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     9b8:	00 91 22 01 	lds	r16, 0x0122
     9bc:	10 91 23 01 	lds	r17, 0x0123
     9c0:	01 15       	cp	r16, r1
     9c2:	11 05       	cpc	r17, r1
     9c4:	09 f4       	brne	.+2      	; 0x9c8 <USB_Host_ProcessNextHostState+0x6a>
     9c6:	e9 c0       	rjmp	.+466    	; 0xb9a <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	74 df       	rcall	.-280    	; 0x8b4 <USB_Host_WaitMS>
     9cc:	68 2f       	mov	r22, r24
     9ce:	88 23       	and	r24, r24
     9d0:	31 f0       	breq	.+12     	; 0x9de <USB_Host_ProcessNextHostState+0x80>
     9d2:	80 91 24 01 	lds	r24, 0x0124
				{
					USB_HostState = PostWaitState;
     9d6:	80 93 2f 01 	sts	0x012F, r24
     9da:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     9dc:	d2 c0       	rjmp	.+420    	; 0xb82 <USB_Host_ProcessNextHostState+0x224>
					break;
     9de:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
     9e0:	10 40       	sbci	r17, 0x00	; 0
     9e2:	10 93 23 01 	sts	0x0123, r17
     9e6:	00 93 22 01 	sts	0x0122, r16
     9ea:	01 15       	cp	r16, r1
     9ec:	11 05       	cpc	r17, r1
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <USB_Host_ProcessNextHostState+0x94>
     9f0:	d4 c0       	rjmp	.+424    	; 0xb9a <USB_Host_ProcessNextHostState+0x23c>
     9f2:	80 91 24 01 	lds	r24, 0x0124
				  USB_HostState = PostWaitState;
     9f6:	07 c0       	rjmp	.+14     	; 0xa06 <USB_Host_ProcessNextHostState+0xa8>
     9f8:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     9fa:	93 e0       	ldi	r25, 0x03	; 3
     9fc:	90 93 23 01 	sts	0x0123, r25
     a00:	80 93 22 01 	sts	0x0122, r24
     a04:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     a06:	80 93 2f 01 	sts	0x012F, r24
     a0a:	c7 c0       	rjmp	.+398    	; 0xb9a <USB_Host_ProcessNextHostState+0x23c>
			break;
     a0c:	80 91 22 01 	lds	r24, 0x0122
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     a10:	90 91 23 01 	lds	r25, 0x0123
     a14:	9c 01       	movw	r18, r24
     a16:	21 50       	subi	r18, 0x01	; 1
     a18:	30 40       	sbci	r19, 0x00	; 0
     a1a:	30 93 23 01 	sts	0x0123, r19
     a1e:	20 93 22 01 	sts	0x0122, r18
     a22:	00 97       	sbiw	r24, 0x00	; 0
     a24:	39 f0       	breq	.+14     	; 0xa34 <USB_Host_ProcessNextHostState+0xd6>
     a26:	8f ec       	ldi	r24, 0xCF	; 207
     a28:	97 e0       	ldi	r25, 0x07	; 7
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <USB_Host_ProcessNextHostState+0xcc>
     a2e:	00 c0       	rjmp	.+0      	; 0xa30 <USB_Host_ProcessNextHostState+0xd2>
     a30:	00 00       	nop
     a32:	b3 c0       	rjmp	.+358    	; 0xb9a <USB_Host_ProcessNextHostState+0x23c>
     a34:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     a36:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     a3a:	80 61       	ori	r24, 0x10	; 16
     a3c:	80 93 d8 00 	sts	0x00D8, r24
     a40:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     a44:	8b 7f       	andi	r24, 0xFB	; 251
     a46:	80 93 dd 00 	sts	0x00DD, r24
     a4a:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     a4e:	80 61       	ori	r24, 0x10	; 16
     a50:	80 93 d7 00 	sts	0x00D7, r24
     a54:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     a58:	82 60       	ori	r24, 0x02	; 2
     a5a:	80 93 dd 00 	sts	0x00DD, r24
     a5e:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     a60:	d2 cf       	rjmp	.-92     	; 0xa06 <USB_Host_ProcessNextHostState+0xa8>
     a62:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     a66:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     a68:	98 c0       	rjmp	.+304    	; 0xb9a <USB_Host_ProcessNextHostState+0x23c>
     a6a:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     a6e:	8e 7f       	andi	r24, 0xFE	; 254
     a70:	80 93 9f 00 	sts	0x009F, r24
     a74:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     a78:	8d 7f       	andi	r24, 0xFD	; 253
     a7a:	80 93 9f 00 	sts	0x009F, r24
     a7e:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     a82:	8d 7f       	andi	r24, 0xFD	; 253
     a84:	80 93 df 00 	sts	0x00DF, r24
     a88:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     a8c:	82 60       	ori	r24, 0x02	; 2
     a8e:	80 93 de 00 	sts	0x00DE, r24
     a92:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a96:	81 60       	ori	r24, 0x01	; 1
     a98:	80 93 9e 00 	sts	0x009E, r24
     a9c:	ee d0       	rcall	.+476    	; 0xc7a <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     a9e:	10 92 2f 01 	sts	0x012F, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     aa2:	84 e6       	ldi	r24, 0x64	; 100
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	90 93 23 01 	sts	0x0123, r25
     aaa:	80 93 22 01 	sts	0x0122, r24
     aae:	85 e0       	ldi	r24, 0x05	; 5
     ab0:	59 c0       	rjmp	.+178    	; 0xb64 <USB_Host_ProcessNextHostState+0x206>
     ab2:	aa de       	rcall	.-684    	; 0x808 <USB_Host_ResetDevice>
     ab4:	10 92 2f 01 	sts	0x012F, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     ab8:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	90 93 23 01 	sts	0x0123, r25
     ac0:	80 93 22 01 	sts	0x0122, r24
     ac4:	86 e0       	ldi	r24, 0x06	; 6
     ac6:	4e c0       	rjmp	.+156    	; 0xb64 <USB_Host_ProcessNextHostState+0x206>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     ace:	20 e4       	ldi	r18, 0x40	; 64
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	01 e0       	ldi	r16, 0x01	; 1
     ad4:	6d d0       	rcall	.+218    	; 0xbb0 <Pipe_ConfigurePipe>
     ad6:	88 23       	and	r24, r24
     ad8:	09 f4       	brne	.+2      	; 0xadc <USB_Host_ProcessNextHostState+0x17e>
     ada:	4f c0       	rjmp	.+158    	; 0xb7a <USB_Host_ProcessNextHostState+0x21c>
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	93 cf       	rjmp	.-218    	; 0xa06 <USB_Host_ProcessNextHostState+0xa8>
     ae0:	a7 e2       	ldi	r26, 0x27	; 39
     ae2:	b1 e0       	ldi	r27, 0x01	; 1
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     ae4:	e3 e0       	ldi	r30, 0x03	; 3
     ae6:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     ae8:	88 e0       	ldi	r24, 0x08	; 8
     aea:	01 90       	ld	r0, Z+
     aec:	0d 92       	st	X+, r0
     aee:	81 50       	subi	r24, 0x01	; 1
     af0:	e1 f7       	brne	.-8      	; 0xaea <USB_Host_ProcessNextHostState+0x18c>
     af2:	10 92 a7 00 	sts	0x00A7, r1
     af6:	ce 01       	movw	r24, r28
     af8:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     afa:	b0 d2       	rcall	.+1376   	; 0x105c <USB_Host_SendControlRequest>
     afc:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     afe:	88 23       	and	r24, r24
     b00:	09 f0       	breq	.+2      	; 0xb04 <USB_Host_ProcessNextHostState+0x1a6>
     b02:	3e c0       	rjmp	.+124    	; 0xb80 <USB_Host_ProcessNextHostState+0x222>
     b04:	88 85       	ldd	r24, Y+8	; 0x08
     b06:	80 93 13 01 	sts	0x0113, r24
     b0a:	7e de       	rcall	.-772    	; 0x808 <USB_Host_ResetDevice>
     b0c:	10 92 2f 01 	sts	0x012F, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     b10:	88 ec       	ldi	r24, 0xC8	; 200
     b12:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
     b14:	90 93 23 01 	sts	0x0123, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     b18:	80 93 22 01 	sts	0x0122, r24
     b1c:	88 e0       	ldi	r24, 0x08	; 8
     b1e:	22 c0       	rjmp	.+68     	; 0xb64 <USB_Host_ProcessNextHostState+0x206>
     b20:	20 91 13 01 	lds	r18, 0x0113
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	40 e0       	ldi	r20, 0x00	; 0
     b2a:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     b2c:	01 e0       	ldi	r16, 0x01	; 1
     b2e:	40 d0       	rcall	.+128    	; 0xbb0 <Pipe_ConfigurePipe>
     b30:	88 23       	and	r24, r24
     b32:	19 f1       	breq	.+70     	; 0xb7a <USB_Host_ProcessNextHostState+0x21c>
     b34:	a7 e2       	ldi	r26, 0x27	; 39
     b36:	b1 e0       	ldi	r27, 0x01	; 1
     b38:	eb e0       	ldi	r30, 0x0B	; 11
     b3a:	f1 e0       	ldi	r31, 0x01	; 1
     b3c:	88 e0       	ldi	r24, 0x08	; 8
     b3e:	01 90       	ld	r0, Z+
     b40:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     b42:	81 50       	subi	r24, 0x01	; 1
     b44:	e1 f7       	brne	.-8      	; 0xb3e <USB_Host_ProcessNextHostState+0x1e0>
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	88 d2       	rcall	.+1296   	; 0x105c <USB_Host_SendControlRequest>
     b4c:	68 2f       	mov	r22, r24
     b4e:	88 23       	and	r24, r24
     b50:	b9 f4       	brne	.+46     	; 0xb80 <USB_Host_ProcessNextHostState+0x222>
     b52:	10 92 2f 01 	sts	0x012F, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     b56:	84 e6       	ldi	r24, 0x64	; 100
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	90 93 23 01 	sts	0x0123, r25
     b5e:	80 93 22 01 	sts	0x0122, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     b62:	89 e0       	ldi	r24, 0x09	; 9
     b64:	80 93 24 01 	sts	0x0124, r24
     b68:	18 c0       	rjmp	.+48     	; 0xb9a <USB_Host_ProcessNextHostState+0x23c>
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	80 93 a1 00 	sts	0x00A1, r24
     b70:	8a e0       	ldi	r24, 0x0A	; 10
     b72:	80 93 2f 01 	sts	0x012F, r24
     b76:	39 dc       	rcall	.-1934   	; 0x3ea <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     b78:	10 c0       	rjmp	.+32     	; 0xb9a <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	84 e0       	ldi	r24, 0x04	; 4
     b7e:	01 c0       	rjmp	.+2      	; 0xb82 <USB_Host_ProcessNextHostState+0x224>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     b80:	83 e0       	ldi	r24, 0x03	; 3
     b82:	90 91 2f 01 	lds	r25, 0x012F

			EVENT_USB_Host_DeviceEnumerationComplete();
     b86:	91 30       	cpi	r25, 0x01	; 1
     b88:	41 f0       	breq	.+16     	; 0xb9a <USB_Host_ProcessNextHostState+0x23c>
			break;
     b8a:	f0 dc       	rcall	.-1568   	; 0x56c <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     b8c:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     b90:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     b92:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     b96:	24 dc       	rcall	.-1976   	; 0x3e0 <EVENT_USB_Host_DeviceUnattached>
     b98:	9c d0       	rcall	.+312    	; 0xcd2 <USB_ResetInterface>
     b9a:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     ba0:	de bf       	out	0x3e, r29	; 62
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	cd bf       	out	0x3d, r28	; 61
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     baa:	1f 91       	pop	r17
     bac:	0f 91       	pop	r16

		USB_ResetInterface();
     bae:	08 95       	ret

00000bb0 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     bb0:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     bb2:	58 2f       	mov	r21, r24
     bb4:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     bb6:	87 ff       	sbrs	r24, 7
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <Pipe_ConfigurePipe+0xe>
     bba:	80 e1       	ldi	r24, 0x10	; 16
     bbc:	01 c0       	rjmp	.+2      	; 0xbc0 <Pipe_ConfigurePipe+0x10>
     bbe:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     bc0:	57 30       	cpi	r21, 0x07	; 7
     bc2:	08 f0       	brcs	.+2      	; 0xbc6 <Pipe_ConfigurePipe+0x16>
     bc4:	57 c0       	rjmp	.+174    	; 0xc74 <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     bc6:	66 23       	and	r22, r22
     bc8:	09 f4       	brne	.+2      	; 0xbcc <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     bca:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     bcc:	4f 70       	andi	r20, 0x0F	; 15
     bce:	62 95       	swap	r22
     bd0:	66 0f       	add	r22, r22
     bd2:	66 0f       	add	r22, r22
     bd4:	60 7c       	andi	r22, 0xC0	; 192
     bd6:	64 2b       	or	r22, r20
     bd8:	68 2b       	or	r22, r24
     bda:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     bdc:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     bde:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     be2:	45 17       	cp	r20, r21
     be4:	a9 f4       	brne	.+42     	; 0xc10 <Pipe_ConfigurePipe+0x60>
     be6:	04 c0       	rjmp	.+8      	; 0xbf0 <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     be8:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	03 c0       	rjmp	.+6      	; 0xbf6 <Pipe_ConfigurePipe+0x46>
     bf0:	88 e0       	ldi	r24, 0x08	; 8
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     bf6:	82 17       	cp	r24, r18
     bf8:	93 07       	cpc	r25, r19
     bfa:	10 f4       	brcc	.+4      	; 0xc00 <Pipe_ConfigurePipe+0x50>
     bfc:	75 30       	cpi	r23, 0x05	; 5
     bfe:	a1 f7       	brne	.-24     	; 0xbe8 <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     c00:	87 2f       	mov	r24, r23
     c02:	82 95       	swap	r24
     c04:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     c06:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     c08:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     c0a:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     c0c:	e0 e0       	ldi	r30, 0x00	; 0
     c0e:	08 c0       	rjmp	.+16     	; 0xc20 <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     c10:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     c14:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     c18:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     c1c:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     c20:	81 ff       	sbrs	r24, 1
     c22:	20 c0       	rjmp	.+64     	; 0xc64 <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     c24:	90 91 a9 00 	lds	r25, 0x00A9
     c28:	9e 7f       	andi	r25, 0xFE	; 254
     c2a:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     c2e:	90 91 ab 00 	lds	r25, 0x00AB
     c32:	9d 7f       	andi	r25, 0xFD	; 253
     c34:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     c38:	90 91 a9 00 	lds	r25, 0x00A9
     c3c:	91 60       	ori	r25, 0x01	; 1
     c3e:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     c42:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     c46:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     c4a:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     c4e:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     c52:	80 91 a9 00 	lds	r24, 0x00A9
     c56:	80 62       	ori	r24, 0x20	; 32
     c58:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     c5c:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     c60:	87 ff       	sbrs	r24, 7
     c62:	08 c0       	rjmp	.+16     	; 0xc74 <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     c64:	4f 5f       	subi	r20, 0xFF	; 255
     c66:	47 30       	cpi	r20, 0x07	; 7
     c68:	09 f0       	breq	.+2      	; 0xc6c <Pipe_ConfigurePipe+0xbc>
     c6a:	b9 cf       	rjmp	.-142    	; 0xbde <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c6c:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	01 c0       	rjmp	.+2      	; 0xc76 <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     c74:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     c76:	0f 91       	pop	r16
     c78:	08 95       	ret

00000c7a <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     c7a:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     c84:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     c88:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     c8c:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     c90:	90 91 a9 00 	lds	r25, 0x00A9
     c94:	9e 7f       	andi	r25, 0xFE	; 254
     c96:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c9a:	8f 5f       	subi	r24, 0xFF	; 255
     c9c:	87 30       	cpi	r24, 0x07	; 7
     c9e:	81 f7       	brne	.-32     	; 0xc80 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     ca0:	08 95       	ret

00000ca2 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     ca2:	75 d0       	rcall	.+234    	; 0xd8e <USB_INT_DisableAllInterrupts>
     ca4:	7c d0       	rcall	.+248    	; 0xd9e <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     ca6:	e0 ee       	ldi	r30, 0xE0	; 224
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     caa:	80 81       	ld	r24, Z
     cac:	81 60       	ori	r24, 0x01	; 1
     cae:	80 83       	st	Z, r24
     cb0:	e8 ed       	ldi	r30, 0xD8	; 216
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     cb4:	80 81       	ld	r24, Z
     cb6:	8f 77       	andi	r24, 0x7F	; 127
     cb8:	80 83       	st	Z, r24
     cba:	19 bc       	out	0x29, r1	; 41
     cbc:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     cbe:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     cc0:	8c 91       	ld	r24, X
     cc2:	8e 7f       	andi	r24, 0xFE	; 254
     cc4:	8c 93       	st	X, r24
     cc6:	80 81       	ld	r24, Z
     cc8:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     cca:	80 83       	st	Z, r24
     ccc:	10 92 26 01 	sts	0x0126, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     cd0:	08 95       	ret

00000cd2 <USB_ResetInterface>:
     cd2:	5d d0       	rcall	.+186    	; 0xd8e <USB_INT_DisableAllInterrupts>
}
     cd4:	64 d0       	rcall	.+200    	; 0xd9e <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     cd6:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     cda:	8f 77       	andi	r24, 0x7F	; 127
     cdc:	80 93 d8 00 	sts	0x00D8, r24
     ce0:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     ce4:	80 68       	ori	r24, 0x80	; 128
     ce6:	80 93 d8 00 	sts	0x00D8, r24
     cea:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     cee:	8f 7d       	andi	r24, 0xDF	; 223
     cf0:	80 93 d8 00 	sts	0x00D8, r24
     cf4:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     cf8:	8f 77       	andi	r24, 0x7F	; 127
     cfa:	80 93 d7 00 	sts	0x00D7, r24
     cfe:	8c e0       	ldi	r24, 0x0C	; 12
     d00:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     d02:	8e e0       	ldi	r24, 0x0E	; 14
     d04:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     d06:	09 b4       	in	r0, 0x29	; 41
     d08:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     d0a:	fd cf       	rjmp	.-6      	; 0xd06 <USB_ResetInterface+0x34>
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	80 93 2f 01 	sts	0x012F, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     d12:	10 92 25 01 	sts	0x0125, r1
	USB_Host_ConfigurationNumber = 0;
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	80 93 13 01 	sts	0x0113, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     d1c:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     d20:	80 64       	ori	r24, 0x40	; 64
     d22:	80 93 d8 00 	sts	0x00D8, r24
     d26:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d2a:	81 60       	ori	r24, 0x01	; 1
     d2c:	80 93 dd 00 	sts	0x00DD, r24
     d30:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     d34:	84 60       	ori	r24, 0x04	; 4
     d36:	80 93 dd 00 	sts	0x00DD, r24
     d3a:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     d3e:	8f 7e       	andi	r24, 0xEF	; 239
     d40:	80 93 d7 00 	sts	0x00D7, r24
     d44:	6f 9a       	sbi	0x0d, 7	; 13
     d46:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     d48:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     d4c:	81 60       	ori	r24, 0x01	; 1
     d4e:	80 93 de 00 	sts	0x00DE, r24
     d52:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     d56:	84 60       	ori	r24, 0x04	; 4
     d58:	80 93 de 00 	sts	0x00DE, r24
     d5c:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     d60:	8e 7f       	andi	r24, 0xFE	; 254
     d62:	80 93 e0 00 	sts	0x00E0, r24
     d66:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     d6a:	80 61       	ori	r24, 0x10	; 16
     d6c:	80 93 d8 00 	sts	0x00D8, r24
     d70:	08 95       	ret

00000d72 <USB_Init>:
     d72:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     d74:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     d76:	80 81       	ld	r24, Z
     d78:	8f 7e       	andi	r24, 0xEF	; 239
     d7a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     d7c:	e7 ed       	ldi	r30, 0xD7	; 215
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	81 60       	ori	r24, 0x01	; 1
     d84:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	80 93 26 01 	sts	0x0126, r24

	USB_ResetInterface();
     d8c:	a2 cf       	rjmp	.-188    	; 0xcd2 <USB_ResetInterface>

00000d8e <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     d8e:	e8 ed       	ldi	r30, 0xD8	; 216
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	8c 7f       	andi	r24, 0xFC	; 252
     d96:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     d98:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     d9c:	08 95       	ret

00000d9e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     d9e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     da2:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     da6:	08 95       	ret

00000da8 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     da8:	1f 92       	push	r1
     daa:	0f 92       	push	r0
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	0f 92       	push	r0
     db0:	0b b6       	in	r0, 0x3b	; 59
     db2:	0f 92       	push	r0
     db4:	11 24       	eor	r1, r1
     db6:	2f 93       	push	r18
     db8:	3f 93       	push	r19
     dba:	4f 93       	push	r20
     dbc:	5f 93       	push	r21
     dbe:	6f 93       	push	r22
     dc0:	7f 93       	push	r23
     dc2:	8f 93       	push	r24
     dc4:	9f 93       	push	r25
     dc6:	af 93       	push	r26
     dc8:	bf 93       	push	r27
     dca:	ef 93       	push	r30
     dcc:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     dce:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     dd2:	85 ff       	sbrs	r24, 5
     dd4:	0a c0       	rjmp	.+20     	; 0xdea <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     dd6:	80 91 a0 00 	lds	r24, 0x00A0
     dda:	85 ff       	sbrs	r24, 5
     ddc:	06 c0       	rjmp	.+12     	; 0xdea <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     dde:	80 91 9f 00 	lds	r24, 0x009F
     de2:	8f 7d       	andi	r24, 0xDF	; 223
     de4:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     de8:	10 d1       	rcall	.+544    	; 0x100a <USB_Event_Stub>
     dea:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     dee:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     df0:	15 c0       	rjmp	.+42     	; 0xe1c <__vector_10+0x74>
     df2:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     df6:	81 ff       	sbrs	r24, 1
     df8:	11 c0       	rjmp	.+34     	; 0xe1c <__vector_10+0x74>
     dfa:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     dfe:	8d 7f       	andi	r24, 0xFD	; 253
     e00:	80 93 9f 00 	sts	0x009F, r24
     e04:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     e08:	8e 7f       	andi	r24, 0xFE	; 254
     e0a:	80 93 9f 00 	sts	0x009F, r24
     e0e:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     e12:	8d 7f       	andi	r24, 0xFD	; 253
     e14:	80 93 a0 00 	sts	0x00A0, r24
     e18:	e3 da       	rcall	.-2618   	; 0x3e0 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     e1a:	5b df       	rcall	.-330    	; 0xcd2 <USB_ResetInterface>
     e1c:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     e20:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     e22:	15 c0       	rjmp	.+42     	; 0xe4e <__vector_10+0xa6>
     e24:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     e28:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     e2a:	11 c0       	rjmp	.+34     	; 0xe4e <__vector_10+0xa6>
     e2c:	80 91 df 00 	lds	r24, 0x00DF
     e30:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     e32:	80 93 df 00 	sts	0x00DF, r24
     e36:	77 98       	cbi	0x0e, 7	; 14
     e38:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     e3c:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e3e:	80 93 dd 00 	sts	0x00DD, r24
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	74 db       	rcall	.-2328   	; 0x52e <EVENT_USB_Host_HostError>
     e46:	cc da       	rcall	.-2664   	; 0x3e0 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	80 93 2f 01 	sts	0x012F, r24
		EVENT_USB_Host_DeviceUnattached();
     e4e:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     e52:	80 ff       	sbrs	r24, 0
     e54:	17 c0       	rjmp	.+46     	; 0xe84 <__vector_10+0xdc>
     e56:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     e5a:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     e5c:	13 c0       	rjmp	.+38     	; 0xe84 <__vector_10+0xdc>
     e5e:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     e62:	8e 7f       	andi	r24, 0xFE	; 254
     e64:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     e68:	80 91 de 00 	lds	r24, 0x00DE
     e6c:	8e 7f       	andi	r24, 0xFE	; 254
     e6e:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     e72:	b1 da       	rcall	.-2718   	; 0x3d6 <EVENT_USB_Host_DeviceAttached>
     e74:	80 91 a0 00 	lds	r24, 0x00A0
     e78:	82 60       	ori	r24, 0x02	; 2
     e7a:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     e7e:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     e80:	80 93 2f 01 	sts	0x012F, r24
     e84:	80 91 df 00 	lds	r24, 0x00DF
     e88:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     e8a:	0e c0       	rjmp	.+28     	; 0xea8 <__vector_10+0x100>
     e8c:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     e90:	82 ff       	sbrs	r24, 2
     e92:	0a c0       	rjmp	.+20     	; 0xea8 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     e94:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     e98:	8b 7f       	andi	r24, 0xFB	; 251
     e9a:	80 93 df 00 	sts	0x00DF, r24
     e9e:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	64 db       	rcall	.-2360   	; 0x56c <EVENT_USB_Host_DeviceEnumerationFailed>
     ea4:	9d da       	rcall	.-2758   	; 0x3e0 <EVENT_USB_Host_DeviceUnattached>
     ea6:	15 df       	rcall	.-470    	; 0xcd2 <USB_ResetInterface>
     ea8:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     eaa:	ef 91       	pop	r30
     eac:	bf 91       	pop	r27
     eae:	af 91       	pop	r26
     eb0:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     eb2:	8f 91       	pop	r24
     eb4:	7f 91       	pop	r23

		USB_ResetInterface();
     eb6:	6f 91       	pop	r22
     eb8:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     eba:	4f 91       	pop	r20
     ebc:	3f 91       	pop	r19
     ebe:	2f 91       	pop	r18
     ec0:	0f 90       	pop	r0
     ec2:	0b be       	out	0x3b, r0	; 59
     ec4:	0f 90       	pop	r0
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	0f 90       	pop	r0
     eca:	1f 90       	pop	r1
     ecc:	18 95       	reti

00000ece <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     ece:	cf 92       	push	r12
     ed0:	df 92       	push	r13
     ed2:	ef 92       	push	r14
     ed4:	ff 92       	push	r15
     ed6:	0f 93       	push	r16
     ed8:	1f 93       	push	r17
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	29 97       	sbiw	r28, 0x09	; 9
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	6b 01       	movw	r12, r22
     ef0:	8a 01       	movw	r16, r20
     ef2:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     ef4:	90 e8       	ldi	r25, 0x80	; 128
     ef6:	90 93 27 01 	sts	0x0127, r25
     efa:	96 e0       	ldi	r25, 0x06	; 6
     efc:	90 93 28 01 	sts	0x0128, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	01 97       	sbiw	r24, 0x01	; 1
     f04:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f06:	90 93 2a 01 	sts	0x012A, r25
     f0a:	80 93 29 01 	sts	0x0129, r24
     f0e:	10 92 2c 01 	sts	0x012C, r1
     f12:	10 92 2b 01 	sts	0x012B, r1
     f16:	89 e0       	ldi	r24, 0x09	; 9
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	90 93 2e 01 	sts	0x012E, r25
     f1e:	80 93 2d 01 	sts	0x012D, r24
     f22:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     f26:	ce 01       	movw	r24, r28
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	98 d0       	rcall	.+304    	; 0x105c <USB_Host_SendControlRequest>
     f2c:	88 23       	and	r24, r24
     f2e:	b9 f4       	brne	.+46     	; 0xf5e <USB_Host_GetDeviceConfigDescriptor+0x90>
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     f32:	9c 81       	ldd	r25, Y+4	; 0x04
     f34:	f6 01       	movw	r30, r12
     f36:	91 83       	std	Z+1, r25	; 0x01
     f38:	80 83       	st	Z, r24
     f3a:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
     f3c:	f9 06       	cpc	r15, r25
     f3e:	70 f0       	brcs	.+28     	; 0xf5c <USB_Host_GetDeviceConfigDescriptor+0x8e>
     f40:	90 93 2e 01 	sts	0x012E, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     f44:	80 93 2d 01 	sts	0x012D, r24
     f48:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     f4a:	88 d0       	rcall	.+272    	; 0x105c <USB_Host_SendControlRequest>
     f4c:	88 23       	and	r24, r24
     f4e:	39 f4       	brne	.+14     	; 0xf5e <USB_Host_GetDeviceConfigDescriptor+0x90>
     f50:	f8 01       	movw	r30, r16
     f52:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     f54:	92 30       	cpi	r25, 0x02	; 2
     f56:	19 f0       	breq	.+6      	; 0xf5e <USB_Host_GetDeviceConfigDescriptor+0x90>
     f58:	86 e0       	ldi	r24, 0x06	; 6
     f5a:	01 c0       	rjmp	.+2      	; 0xf5e <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     f5c:	85 e0       	ldi	r24, 0x05	; 5
     f5e:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     f60:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	df 90       	pop	r13
     f78:	cf 90       	pop	r12
     f7a:	08 95       	ret

00000f7c <USB_GetNextDescriptorComp>:
     f7c:	af 92       	push	r10
     f7e:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     f80:	cf 92       	push	r12
     f82:	df 92       	push	r13
     f84:	ef 92       	push	r14
     f86:	ff 92       	push	r15
     f88:	0f 93       	push	r16
     f8a:	1f 93       	push	r17
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	7c 01       	movw	r14, r24
     f92:	8b 01       	movw	r16, r22
     f94:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     f96:	28 c0       	rjmp	.+80     	; 0xfe8 <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     f98:	f8 01       	movw	r30, r16
     f9a:	c0 80       	ld	r12, Z
     f9c:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     f9e:	f6 01       	movw	r30, r12
     fa0:	80 81       	ld	r24, Z
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	9e 01       	movw	r18, r28
     fa6:	8c 17       	cp	r24, r28
     fa8:	9d 07       	cpc	r25, r29
     faa:	08 f4       	brcc	.+2      	; 0xfae <USB_GetNextDescriptorComp+0x32>
     fac:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     fae:	c6 01       	movw	r24, r12
     fb0:	82 0f       	add	r24, r18
     fb2:	93 1f       	adc	r25, r19
     fb4:	f8 01       	movw	r30, r16
     fb6:	91 83       	std	Z+1, r25	; 0x01
     fb8:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
     fba:	f7 01       	movw	r30, r14
     fbc:	80 81       	ld	r24, Z
     fbe:	91 81       	ldd	r25, Z+1	; 0x01
     fc0:	82 1b       	sub	r24, r18
     fc2:	93 0b       	sbc	r25, r19
     fc4:	91 83       	std	Z+1, r25	; 0x01
     fc6:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     fc8:	f8 01       	movw	r30, r16
     fca:	80 81       	ld	r24, Z
     fcc:	91 81       	ldd	r25, Z+1	; 0x01
     fce:	f5 01       	movw	r30, r10
     fd0:	09 95       	icall
     fd2:	82 30       	cpi	r24, 0x02	; 2
     fd4:	49 f0       	breq	.+18     	; 0xfe8 <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	69 f4       	brne	.+26     	; 0xff4 <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
     fda:	f8 01       	movw	r30, r16
     fdc:	d1 82       	std	Z+1, r13	; 0x01
     fde:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
     fe0:	f7 01       	movw	r30, r14
     fe2:	d1 83       	std	Z+1, r29	; 0x01
     fe4:	c0 83       	st	Z, r28
     fe6:	06 c0       	rjmp	.+12     	; 0xff4 <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     fe8:	f7 01       	movw	r30, r14
     fea:	c0 81       	ld	r28, Z
     fec:	d1 81       	ldd	r29, Z+1	; 0x01
     fee:	20 97       	sbiw	r28, 0x00	; 0
     ff0:	99 f6       	brne	.-90     	; 0xf98 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     ff2:	82 e0       	ldi	r24, 0x02	; 2
}
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	ff 90       	pop	r15
     ffe:	ef 90       	pop	r14
    1000:	df 90       	pop	r13
    1002:	cf 90       	pop	r12
    1004:	bf 90       	pop	r11
    1006:	af 90       	pop	r10
    1008:	08 95       	ret

0000100a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    100a:	08 95       	ret

0000100c <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    100c:	1f 93       	push	r17
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1014:	c9 ee       	ldi	r28, 0xE9	; 233
    1016:	d3 e0       	ldi	r29, 0x03	; 3
    1018:	06 c0       	rjmp	.+12     	; 0x1026 <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	4b dc       	rcall	.-1898   	; 0x8b4 <USB_Host_WaitMS>
    101e:	88 23       	and	r24, r24
    1020:	c9 f4       	brne	.+50     	; 0x1054 <USB_Host_WaitForIOS+0x48>
    1022:	21 97       	sbiw	r28, 0x01	; 1
    1024:	b1 f0       	breq	.+44     	; 0x1052 <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1026:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1028:	29 f4       	brne	.+10     	; 0x1034 <USB_Host_WaitForIOS+0x28>
    102a:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    102e:	83 ff       	sbrs	r24, 3
    1030:	f4 cf       	rjmp	.-24     	; 0x101a <USB_Host_WaitForIOS+0xe>
    1032:	0d c0       	rjmp	.+26     	; 0x104e <USB_Host_WaitForIOS+0x42>
    1034:	11 30       	cpi	r17, 0x01	; 1
    1036:	29 f4       	brne	.+10     	; 0x1042 <USB_Host_WaitForIOS+0x36>
    1038:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    103c:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    103e:	ed cf       	rjmp	.-38     	; 0x101a <USB_Host_WaitForIOS+0xe>
    1040:	06 c0       	rjmp	.+12     	; 0x104e <USB_Host_WaitForIOS+0x42>
    1042:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1044:	51 f7       	brne	.-44     	; 0x101a <USB_Host_WaitForIOS+0xe>
    1046:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    104a:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    104c:	e6 cf       	rjmp	.-52     	; 0x101a <USB_Host_WaitForIOS+0xe>
    104e:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1050:	01 c0       	rjmp	.+2      	; 0x1054 <USB_Host_WaitForIOS+0x48>
    1052:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1054:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
    1056:	cf 91       	pop	r28
    1058:	1f 91       	pop	r17
    105a:	08 95       	ret

0000105c <USB_Host_SendControlRequest>:
    105c:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    105e:	ff 92       	push	r15
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    106a:	e0 90 9e 00 	lds	r14, 0x009E
    106e:	ff 24       	eor	r15, r15
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	e8 22       	and	r14, r24
    1074:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1076:	00 91 2d 01 	lds	r16, 0x012D
    107a:	10 91 2e 01 	lds	r17, 0x012E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    107e:	80 91 9e 00 	lds	r24, 0x009E
    1082:	81 60       	ori	r24, 0x01	; 1
    1084:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	14 dc       	rcall	.-2008   	; 0x8b4 <USB_Host_WaitMS>
    108c:	88 23       	and	r24, r24
    108e:	09 f0       	breq	.+2      	; 0x1092 <USB_Host_SendControlRequest+0x36>
    1090:	ca c0       	rjmp	.+404    	; 0x1226 <USB_Host_SendControlRequest+0x1ca>
    1092:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1096:	8f 7c       	andi	r24, 0xCF	; 207
    1098:	80 93 aa 00 	sts	0x00AA, r24
    109c:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    10a0:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    10a4:	8f 7e       	andi	r24, 0xEF	; 239
    10a6:	80 93 a6 00 	sts	0x00A6, r24
    10aa:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10ae:	8f 7b       	andi	r24, 0xBF	; 191
    10b0:	80 93 a9 00 	sts	0x00A9, r24
    10b4:	88 e0       	ldi	r24, 0x08	; 8
    10b6:	e7 e2       	ldi	r30, 0x27	; 39
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    10b8:	f1 e0       	ldi	r31, 0x01	; 1
    10ba:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    10bc:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    10c0:	81 50       	subi	r24, 0x01	; 1
    10c2:	d9 f7       	brne	.-10     	; 0x10ba <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    10c4:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    10c8:	87 77       	andi	r24, 0x77	; 119
    10ca:	80 93 a6 00 	sts	0x00A6, r24
    10ce:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    10d0:	9d df       	rcall	.-198    	; 0x100c <USB_Host_WaitForIOS>
    10d2:	88 23       	and	r24, r24
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <USB_Host_SendControlRequest+0x7c>
    10d6:	a7 c0       	rjmp	.+334    	; 0x1226 <USB_Host_SendControlRequest+0x1ca>
    10d8:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10dc:	80 64       	ori	r24, 0x40	; 64
    10de:	80 93 a9 00 	sts	0x00A9, r24
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	e7 db       	rcall	.-2098   	; 0x8b4 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10e6:	88 23       	and	r24, r24
    10e8:	09 f0       	breq	.+2      	; 0x10ec <USB_Host_SendControlRequest+0x90>
    10ea:	9d c0       	rjmp	.+314    	; 0x1226 <USB_Host_SendControlRequest+0x1ca>
    10ec:	80 91 27 01 	lds	r24, 0x0127
    10f0:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    10f2:	4f c0       	rjmp	.+158    	; 0x1192 <USB_Host_SendControlRequest+0x136>
    10f4:	80 91 aa 00 	lds	r24, 0x00AA
    10f8:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10fa:	80 61       	ori	r24, 0x10	; 16
    10fc:	80 93 aa 00 	sts	0x00AA, r24
    1100:	20 97       	sbiw	r28, 0x00	; 0
    1102:	61 f5       	brne	.+88     	; 0x115c <USB_Host_SendControlRequest+0x100>
    1104:	2e c0       	rjmp	.+92     	; 0x1162 <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1106:	80 91 a9 00 	lds	r24, 0x00A9
    110a:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    110c:	80 93 a9 00 	sts	0x00A9, r24
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	7c df       	rcall	.-264    	; 0x100c <USB_Host_WaitForIOS>
    1114:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1116:	09 f0       	breq	.+2      	; 0x111a <USB_Host_SendControlRequest+0xbe>
    1118:	86 c0       	rjmp	.+268    	; 0x1226 <USB_Host_SendControlRequest+0x1ca>
    111a:	80 91 f6 00 	lds	r24, 0x00F6
    111e:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1122:	00 97       	sbiw	r24, 0x00	; 0
    1124:	41 f4       	brne	.+16     	; 0x1136 <USB_Host_SendControlRequest+0xda>
    1126:	00 e0       	ldi	r16, 0x00	; 0
    1128:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    112a:	05 c0       	rjmp	.+10     	; 0x1136 <USB_Host_SendControlRequest+0xda>
    112c:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
    1130:	89 93       	st	Y+, r24
    1132:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1134:	10 40       	sbci	r17, 0x00	; 0
    1136:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
    113a:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	19 f0       	breq	.+6      	; 0x1148 <USB_Host_SendControlRequest+0xec>
    1142:	01 15       	cp	r16, r1
    1144:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1146:	91 f7       	brne	.-28     	; 0x112c <USB_Host_SendControlRequest+0xd0>
    1148:	80 91 a9 00 	lds	r24, 0x00A9
    114c:	80 64       	ori	r24, 0x40	; 64
    114e:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1152:	80 91 a6 00 	lds	r24, 0x00A6
    1156:	8e 77       	andi	r24, 0x7E	; 126
    1158:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    115c:	01 15       	cp	r16, r1
    115e:	11 05       	cpc	r17, r1
    1160:	91 f6       	brne	.-92     	; 0x1106 <USB_Host_SendControlRequest+0xaa>
    1162:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1166:	8f 7c       	andi	r24, 0xCF	; 207
    1168:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    116a:	80 93 aa 00 	sts	0x00AA, r24
    116e:	80 91 a9 00 	lds	r24, 0x00A9
    1172:	8f 7b       	andi	r24, 0xBF	; 191
    1174:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1178:	82 e0       	ldi	r24, 0x02	; 2
    117a:	48 df       	rcall	.-368    	; 0x100c <USB_Host_WaitForIOS>
    117c:	88 23       	and	r24, r24
    117e:	09 f0       	breq	.+2      	; 0x1182 <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1180:	52 c0       	rjmp	.+164    	; 0x1226 <USB_Host_SendControlRequest+0x1ca>
    1182:	80 91 a6 00 	lds	r24, 0x00A6
    1186:	8b 77       	andi	r24, 0x7B	; 123
    1188:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    118c:	82 e0       	ldi	r24, 0x02	; 2
    118e:	3e df       	rcall	.-388    	; 0x100c <USB_Host_WaitForIOS>
    1190:	4a c0       	rjmp	.+148    	; 0x1226 <USB_Host_SendControlRequest+0x1ca>
    1192:	20 97       	sbiw	r28, 0x00	; 0
    1194:	a1 f1       	breq	.+104    	; 0x11fe <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1196:	80 91 aa 00 	lds	r24, 0x00AA
    119a:	8f 7c       	andi	r24, 0xCF	; 207
    119c:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    119e:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11a2:	80 91 a9 00 	lds	r24, 0x00A9
    11a6:	8f 7b       	andi	r24, 0xBF	; 191
    11a8:	80 93 a9 00 	sts	0x00A9, r24
    11ac:	1c c0       	rjmp	.+56     	; 0x11e6 <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11ae:	2e df       	rcall	.-420    	; 0x100c <USB_Host_WaitForIOS>
    11b0:	88 23       	and	r24, r24
    11b2:	c9 f5       	brne	.+114    	; 0x1226 <USB_Host_SendControlRequest+0x1ca>
    11b4:	fe 01       	movw	r30, r28
    11b6:	07 c0       	rjmp	.+14     	; 0x11c6 <USB_Host_SendControlRequest+0x16a>
    11b8:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11ba:	ef 01       	movw	r28, r30
    11bc:	80 93 af 00 	sts	0x00AF, r24
    11c0:	01 50       	subi	r16, 0x01	; 1
    11c2:	10 40       	sbci	r17, 0x00	; 0
    11c4:	59 f0       	breq	.+22     	; 0x11dc <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    11c6:	ef 01       	movw	r28, r30
    11c8:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    11cc:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    11d0:	80 91 13 01 	lds	r24, 0x0113
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    11d4:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11d6:	28 17       	cp	r18, r24
    11d8:	39 07       	cpc	r19, r25
    11da:	70 f3       	brcs	.-36     	; 0x11b8 <USB_Host_SendControlRequest+0x15c>
    11dc:	80 91 a6 00 	lds	r24, 0x00A6
    11e0:	8b 77       	andi	r24, 0x7B	; 123
    11e2:	80 93 a6 00 	sts	0x00A6, r24
    11e6:	82 e0       	ldi	r24, 0x02	; 2
    11e8:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    11ea:	11 05       	cpc	r17, r1
    11ec:	01 f7       	brne	.-64     	; 0x11ae <USB_Host_SendControlRequest+0x152>
    11ee:	0e df       	rcall	.-484    	; 0x100c <USB_Host_WaitForIOS>
    11f0:	88 23       	and	r24, r24
    11f2:	c9 f4       	brne	.+50     	; 0x1226 <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11f4:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    11f8:	80 64       	ori	r24, 0x40	; 64
    11fa:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11fe:	80 91 aa 00 	lds	r24, 0x00AA
    1202:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1204:	80 61       	ori	r24, 0x10	; 16
    1206:	80 93 aa 00 	sts	0x00AA, r24
    120a:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    120e:	8f 7b       	andi	r24, 0xBF	; 191
    1210:	80 93 a9 00 	sts	0x00A9, r24
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	fa de       	rcall	.-524    	; 0x100c <USB_Host_WaitForIOS>
    1218:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    121a:	29 f4       	brne	.+10     	; 0x1226 <USB_Host_SendControlRequest+0x1ca>
    121c:	90 91 a6 00 	lds	r25, 0x00A6
    1220:	9e 77       	andi	r25, 0x7E	; 126
    1222:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1226:	90 91 a9 00 	lds	r25, 0x00A9
    122a:	90 64       	ori	r25, 0x40	; 64
    122c:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1230:	e1 14       	cp	r14, r1
    1232:	f1 04       	cpc	r15, r1
    1234:	29 f4       	brne	.+10     	; 0x1240 <USB_Host_SendControlRequest+0x1e4>
    1236:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    123a:	9e 7f       	andi	r25, 0xFE	; 254
    123c:	90 93 9e 00 	sts	0x009E, r25
    1240:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1242:	90 93 a8 00 	sts	0x00A8, r25
    1246:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	1f 91       	pop	r17
    1250:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1252:	ff 90       	pop	r15
    1254:	ef 90       	pop	r14
    1256:	08 95       	ret

00001258 <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    1258:	cf 93       	push	r28
    125a:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    125c:	10 92 27 01 	sts	0x0127, r1
    1260:	89 e0       	ldi	r24, 0x09	; 9
    1262:	80 93 28 01 	sts	0x0128, r24
    1266:	c0 93 29 01 	sts	0x0129, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    126a:	10 92 2a 01 	sts	0x012A, r1
    126e:	10 92 2c 01 	sts	0x012C, r1
    1272:	10 92 2b 01 	sts	0x012B, r1
    1276:	10 92 2e 01 	sts	0x012E, r1
    127a:	10 92 2d 01 	sts	0x012D, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    127e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	ea de       	rcall	.-556    	; 0x105c <USB_Host_SendControlRequest>
    1288:	88 23       	and	r24, r24
    128a:	49 f4       	brne	.+18     	; 0x129e <USB_Host_SetDeviceConfiguration+0x46>
    128c:	c0 93 25 01 	sts	0x0125, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1290:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1292:	11 f0       	breq	.+4      	; 0x1298 <USB_Host_SetDeviceConfiguration+0x40>
    1294:	9b e0       	ldi	r25, 0x0B	; 11
    1296:	01 c0       	rjmp	.+2      	; 0x129a <USB_Host_SetDeviceConfiguration+0x42>
    1298:	9a e0       	ldi	r25, 0x0A	; 10
    129a:	90 93 2f 01 	sts	0x012F, r25
    129e:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    12a0:	08 95       	ret

000012a2 <USB_Host_SetInterfaceAltSetting>:
    12a2:	e7 e2       	ldi	r30, 0x27	; 39
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    12a4:	f1 e0       	ldi	r31, 0x01	; 1
    12a6:	91 e0       	ldi	r25, 0x01	; 1
    12a8:	90 93 27 01 	sts	0x0127, r25
    12ac:	9b e0       	ldi	r25, 0x0B	; 11
    12ae:	90 93 28 01 	sts	0x0128, r25
    12b2:	60 93 29 01 	sts	0x0129, r22
    12b6:	13 82       	std	Z+3, r1	; 0x03
    12b8:	80 93 2b 01 	sts	0x012B, r24
    12bc:	15 82       	std	Z+5, r1	; 0x05
    12be:	10 92 2e 01 	sts	0x012E, r1
    12c2:	10 92 2d 01 	sts	0x012D, r1
    12c6:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	c6 ce       	rjmp	.-628    	; 0x105c <USB_Host_SendControlRequest>

000012d0 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    12d0:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    12d2:	c0 91 a7 00 	lds	r28, 0x00A7
    12d6:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    12d8:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    12dc:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    12e0:	3e db       	rcall	.-2436   	; 0x95e <USB_Host_ProcessNextHostState>
    12e2:	c0 93 a7 00 	sts	0x00A7, r28
    12e6:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    12e8:	08 95       	ret

000012ea <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    12ea:	90 91 c8 00 	lds	r25, 0x00C8
    12ee:	95 ff       	sbrs	r25, 5
    12f0:	fc cf       	rjmp	.-8      	; 0x12ea <Serial_putchar>
				UDR1 = DataByte;
    12f2:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	08 95       	ret

000012fc <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    12fc:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1300:	87 ff       	sbrs	r24, 7
    1302:	08 c0       	rjmp	.+16     	; 0x1314 <Serial_getchar+0x18>
    1304:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1308:	87 ff       	sbrs	r24, 7
    130a:	07 c0       	rjmp	.+14     	; 0x131a <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    130c:	80 91 ce 00 	lds	r24, 0x00CE
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	08 95       	ret
	  return _FDEV_EOF;
    1314:	8e ef       	ldi	r24, 0xFE	; 254
    1316:	9f ef       	ldi	r25, 0xFF	; 255
    1318:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    131a:	8f ef       	ldi	r24, 0xFF	; 255
    131c:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    131e:	08 95       	ret

00001320 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1320:	fc 01       	movw	r30, r24
	if (!(Stream))
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	51 f4       	brne	.+20     	; 0x133a <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1326:	e0 e3       	ldi	r30, 0x30	; 48
    1328:	f1 e0       	ldi	r31, 0x01	; 1
    132a:	f0 93 3f 01 	sts	0x013F, r31
    132e:	e0 93 3e 01 	sts	0x013E, r30
		stdout = Stream;
    1332:	f0 93 41 01 	sts	0x0141, r31
    1336:	e0 93 40 01 	sts	0x0140, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    133a:	8e e0       	ldi	r24, 0x0E	; 14
    133c:	df 01       	movw	r26, r30
    133e:	1d 92       	st	X+, r1
    1340:	8a 95       	dec	r24
    1342:	e9 f7       	brne	.-6      	; 0x133e <Serial_CreateStream+0x1e>
    1344:	83 e0       	ldi	r24, 0x03	; 3
    1346:	83 83       	std	Z+3, r24	; 0x03
    1348:	85 e7       	ldi	r24, 0x75	; 117
    134a:	99 e0       	ldi	r25, 0x09	; 9
    134c:	91 87       	std	Z+9, r25	; 0x09
    134e:	80 87       	std	Z+8, r24	; 0x08
    1350:	8e e7       	ldi	r24, 0x7E	; 126
    1352:	99 e0       	ldi	r25, 0x09	; 9
    1354:	93 87       	std	Z+11, r25	; 0x0b
    1356:	82 87       	std	Z+10, r24	; 0x0a
}
    1358:	08 95       	ret

0000135a <printf_P>:
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	fe 01       	movw	r30, r28
    1364:	35 96       	adiw	r30, 0x05	; 5
    1366:	61 91       	ld	r22, Z+
    1368:	71 91       	ld	r23, Z+
    136a:	80 91 40 01 	lds	r24, 0x0140
    136e:	90 91 41 01 	lds	r25, 0x0141
    1372:	dc 01       	movw	r26, r24
    1374:	13 96       	adiw	r26, 0x03	; 3
    1376:	2c 91       	ld	r18, X
    1378:	13 97       	sbiw	r26, 0x03	; 3
    137a:	28 60       	ori	r18, 0x08	; 8
    137c:	13 96       	adiw	r26, 0x03	; 3
    137e:	2c 93       	st	X, r18
    1380:	af 01       	movw	r20, r30
    1382:	39 d0       	rcall	.+114    	; 0x13f6 <vfprintf>
    1384:	e0 91 40 01 	lds	r30, 0x0140
    1388:	f0 91 41 01 	lds	r31, 0x0141
    138c:	23 81       	ldd	r18, Z+3	; 0x03
    138e:	27 7f       	andi	r18, 0xF7	; 247
    1390:	23 83       	std	Z+3, r18	; 0x03
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	08 95       	ret

00001398 <puts_P>:
    1398:	0f 93       	push	r16
    139a:	1f 93       	push	r17
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
    13a0:	8c 01       	movw	r16, r24
    13a2:	e0 91 40 01 	lds	r30, 0x0140
    13a6:	f0 91 41 01 	lds	r31, 0x0141
    13aa:	83 81       	ldd	r24, Z+3	; 0x03
    13ac:	81 ff       	sbrs	r24, 1
    13ae:	1b c0       	rjmp	.+54     	; 0x13e6 <puts_P+0x4e>
    13b0:	c0 e0       	ldi	r28, 0x00	; 0
    13b2:	d0 e0       	ldi	r29, 0x00	; 0
    13b4:	07 c0       	rjmp	.+14     	; 0x13c4 <puts_P+0x2c>
    13b6:	09 95       	icall
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	11 f0       	breq	.+4      	; 0x13c0 <puts_P+0x28>
    13bc:	cf ef       	ldi	r28, 0xFF	; 255
    13be:	df ef       	ldi	r29, 0xFF	; 255
    13c0:	0f 5f       	subi	r16, 0xFF	; 255
    13c2:	1f 4f       	sbci	r17, 0xFF	; 255
    13c4:	f8 01       	movw	r30, r16
    13c6:	84 91       	lpm	r24, Z
    13c8:	60 91 40 01 	lds	r22, 0x0140
    13cc:	70 91 41 01 	lds	r23, 0x0141
    13d0:	db 01       	movw	r26, r22
    13d2:	18 96       	adiw	r26, 0x08	; 8
    13d4:	ed 91       	ld	r30, X+
    13d6:	fc 91       	ld	r31, X
    13d8:	19 97       	sbiw	r26, 0x09	; 9
    13da:	88 23       	and	r24, r24
    13dc:	61 f7       	brne	.-40     	; 0x13b6 <puts_P+0x1e>
    13de:	8a e0       	ldi	r24, 0x0A	; 10
    13e0:	09 95       	icall
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	11 f0       	breq	.+4      	; 0x13ea <puts_P+0x52>
    13e6:	cf ef       	ldi	r28, 0xFF	; 255
    13e8:	df ef       	ldi	r29, 0xFF	; 255
    13ea:	ce 01       	movw	r24, r28
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	1f 91       	pop	r17
    13f2:	0f 91       	pop	r16
    13f4:	08 95       	ret

000013f6 <vfprintf>:
    13f6:	2f 92       	push	r2
    13f8:	3f 92       	push	r3
    13fa:	4f 92       	push	r4
    13fc:	5f 92       	push	r5
    13fe:	6f 92       	push	r6
    1400:	7f 92       	push	r7
    1402:	8f 92       	push	r8
    1404:	9f 92       	push	r9
    1406:	af 92       	push	r10
    1408:	bf 92       	push	r11
    140a:	cf 92       	push	r12
    140c:	df 92       	push	r13
    140e:	ef 92       	push	r14
    1410:	ff 92       	push	r15
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	2d 97       	sbiw	r28, 0x0d	; 13
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
    142a:	3c 01       	movw	r6, r24
    142c:	7d 87       	std	Y+13, r23	; 0x0d
    142e:	6c 87       	std	Y+12, r22	; 0x0c
    1430:	5a 01       	movw	r10, r20
    1432:	fc 01       	movw	r30, r24
    1434:	17 82       	std	Z+7, r1	; 0x07
    1436:	16 82       	std	Z+6, r1	; 0x06
    1438:	83 81       	ldd	r24, Z+3	; 0x03
    143a:	81 ff       	sbrs	r24, 1
    143c:	bb c1       	rjmp	.+886    	; 0x17b4 <vfprintf+0x3be>
    143e:	2e 01       	movw	r4, r28
    1440:	08 94       	sec
    1442:	41 1c       	adc	r4, r1
    1444:	51 1c       	adc	r5, r1
    1446:	f3 01       	movw	r30, r6
    1448:	93 81       	ldd	r25, Z+3	; 0x03
    144a:	ec 85       	ldd	r30, Y+12	; 0x0c
    144c:	fd 85       	ldd	r31, Y+13	; 0x0d
    144e:	93 fd       	sbrc	r25, 3
    1450:	85 91       	lpm	r24, Z+
    1452:	93 ff       	sbrs	r25, 3
    1454:	81 91       	ld	r24, Z+
    1456:	fd 87       	std	Y+13, r31	; 0x0d
    1458:	ec 87       	std	Y+12, r30	; 0x0c
    145a:	88 23       	and	r24, r24
    145c:	09 f4       	brne	.+2      	; 0x1460 <vfprintf+0x6a>
    145e:	a6 c1       	rjmp	.+844    	; 0x17ac <vfprintf+0x3b6>
    1460:	85 32       	cpi	r24, 0x25	; 37
    1462:	41 f4       	brne	.+16     	; 0x1474 <vfprintf+0x7e>
    1464:	93 fd       	sbrc	r25, 3
    1466:	85 91       	lpm	r24, Z+
    1468:	93 ff       	sbrs	r25, 3
    146a:	81 91       	ld	r24, Z+
    146c:	fd 87       	std	Y+13, r31	; 0x0d
    146e:	ec 87       	std	Y+12, r30	; 0x0c
    1470:	85 32       	cpi	r24, 0x25	; 37
    1472:	21 f4       	brne	.+8      	; 0x147c <vfprintf+0x86>
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	b3 01       	movw	r22, r6
    1478:	ce d1       	rcall	.+924    	; 0x1816 <fputc>
    147a:	e5 cf       	rjmp	.-54     	; 0x1446 <vfprintf+0x50>
    147c:	ff 24       	eor	r15, r15
    147e:	ee 24       	eor	r14, r14
    1480:	10 e0       	ldi	r17, 0x00	; 0
    1482:	10 32       	cpi	r17, 0x20	; 32
    1484:	b0 f4       	brcc	.+44     	; 0x14b2 <vfprintf+0xbc>
    1486:	8b 32       	cpi	r24, 0x2B	; 43
    1488:	69 f0       	breq	.+26     	; 0x14a4 <vfprintf+0xae>
    148a:	8c 32       	cpi	r24, 0x2C	; 44
    148c:	28 f4       	brcc	.+10     	; 0x1498 <vfprintf+0xa2>
    148e:	80 32       	cpi	r24, 0x20	; 32
    1490:	51 f0       	breq	.+20     	; 0x14a6 <vfprintf+0xb0>
    1492:	83 32       	cpi	r24, 0x23	; 35
    1494:	71 f4       	brne	.+28     	; 0x14b2 <vfprintf+0xbc>
    1496:	0b c0       	rjmp	.+22     	; 0x14ae <vfprintf+0xb8>
    1498:	8d 32       	cpi	r24, 0x2D	; 45
    149a:	39 f0       	breq	.+14     	; 0x14aa <vfprintf+0xb4>
    149c:	80 33       	cpi	r24, 0x30	; 48
    149e:	49 f4       	brne	.+18     	; 0x14b2 <vfprintf+0xbc>
    14a0:	11 60       	ori	r17, 0x01	; 1
    14a2:	2c c0       	rjmp	.+88     	; 0x14fc <vfprintf+0x106>
    14a4:	12 60       	ori	r17, 0x02	; 2
    14a6:	14 60       	ori	r17, 0x04	; 4
    14a8:	29 c0       	rjmp	.+82     	; 0x14fc <vfprintf+0x106>
    14aa:	18 60       	ori	r17, 0x08	; 8
    14ac:	27 c0       	rjmp	.+78     	; 0x14fc <vfprintf+0x106>
    14ae:	10 61       	ori	r17, 0x10	; 16
    14b0:	25 c0       	rjmp	.+74     	; 0x14fc <vfprintf+0x106>
    14b2:	17 fd       	sbrc	r17, 7
    14b4:	2e c0       	rjmp	.+92     	; 0x1512 <vfprintf+0x11c>
    14b6:	28 2f       	mov	r18, r24
    14b8:	20 53       	subi	r18, 0x30	; 48
    14ba:	2a 30       	cpi	r18, 0x0A	; 10
    14bc:	98 f4       	brcc	.+38     	; 0x14e4 <vfprintf+0xee>
    14be:	16 ff       	sbrs	r17, 6
    14c0:	08 c0       	rjmp	.+16     	; 0x14d2 <vfprintf+0xdc>
    14c2:	8f 2d       	mov	r24, r15
    14c4:	88 0f       	add	r24, r24
    14c6:	f8 2e       	mov	r15, r24
    14c8:	ff 0c       	add	r15, r15
    14ca:	ff 0c       	add	r15, r15
    14cc:	f8 0e       	add	r15, r24
    14ce:	f2 0e       	add	r15, r18
    14d0:	15 c0       	rjmp	.+42     	; 0x14fc <vfprintf+0x106>
    14d2:	8e 2d       	mov	r24, r14
    14d4:	88 0f       	add	r24, r24
    14d6:	e8 2e       	mov	r14, r24
    14d8:	ee 0c       	add	r14, r14
    14da:	ee 0c       	add	r14, r14
    14dc:	e8 0e       	add	r14, r24
    14de:	e2 0e       	add	r14, r18
    14e0:	10 62       	ori	r17, 0x20	; 32
    14e2:	0c c0       	rjmp	.+24     	; 0x14fc <vfprintf+0x106>
    14e4:	8e 32       	cpi	r24, 0x2E	; 46
    14e6:	21 f4       	brne	.+8      	; 0x14f0 <vfprintf+0xfa>
    14e8:	16 fd       	sbrc	r17, 6
    14ea:	60 c1       	rjmp	.+704    	; 0x17ac <vfprintf+0x3b6>
    14ec:	10 64       	ori	r17, 0x40	; 64
    14ee:	06 c0       	rjmp	.+12     	; 0x14fc <vfprintf+0x106>
    14f0:	8c 36       	cpi	r24, 0x6C	; 108
    14f2:	11 f4       	brne	.+4      	; 0x14f8 <vfprintf+0x102>
    14f4:	10 68       	ori	r17, 0x80	; 128
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <vfprintf+0x106>
    14f8:	88 36       	cpi	r24, 0x68	; 104
    14fa:	59 f4       	brne	.+22     	; 0x1512 <vfprintf+0x11c>
    14fc:	ec 85       	ldd	r30, Y+12	; 0x0c
    14fe:	fd 85       	ldd	r31, Y+13	; 0x0d
    1500:	93 fd       	sbrc	r25, 3
    1502:	85 91       	lpm	r24, Z+
    1504:	93 ff       	sbrs	r25, 3
    1506:	81 91       	ld	r24, Z+
    1508:	fd 87       	std	Y+13, r31	; 0x0d
    150a:	ec 87       	std	Y+12, r30	; 0x0c
    150c:	88 23       	and	r24, r24
    150e:	09 f0       	breq	.+2      	; 0x1512 <vfprintf+0x11c>
    1510:	b8 cf       	rjmp	.-144    	; 0x1482 <vfprintf+0x8c>
    1512:	98 2f       	mov	r25, r24
    1514:	95 54       	subi	r25, 0x45	; 69
    1516:	93 30       	cpi	r25, 0x03	; 3
    1518:	18 f0       	brcs	.+6      	; 0x1520 <vfprintf+0x12a>
    151a:	90 52       	subi	r25, 0x20	; 32
    151c:	93 30       	cpi	r25, 0x03	; 3
    151e:	38 f4       	brcc	.+14     	; 0x152e <vfprintf+0x138>
    1520:	24 e0       	ldi	r18, 0x04	; 4
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	a2 0e       	add	r10, r18
    1526:	b3 1e       	adc	r11, r19
    1528:	3f e3       	ldi	r19, 0x3F	; 63
    152a:	39 83       	std	Y+1, r19	; 0x01
    152c:	0f c0       	rjmp	.+30     	; 0x154c <vfprintf+0x156>
    152e:	83 36       	cpi	r24, 0x63	; 99
    1530:	31 f0       	breq	.+12     	; 0x153e <vfprintf+0x148>
    1532:	83 37       	cpi	r24, 0x73	; 115
    1534:	81 f0       	breq	.+32     	; 0x1556 <vfprintf+0x160>
    1536:	83 35       	cpi	r24, 0x53	; 83
    1538:	09 f0       	breq	.+2      	; 0x153c <vfprintf+0x146>
    153a:	56 c0       	rjmp	.+172    	; 0x15e8 <vfprintf+0x1f2>
    153c:	21 c0       	rjmp	.+66     	; 0x1580 <vfprintf+0x18a>
    153e:	f5 01       	movw	r30, r10
    1540:	80 81       	ld	r24, Z
    1542:	89 83       	std	Y+1, r24	; 0x01
    1544:	22 e0       	ldi	r18, 0x02	; 2
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	a2 0e       	add	r10, r18
    154a:	b3 1e       	adc	r11, r19
    154c:	21 e0       	ldi	r18, 0x01	; 1
    154e:	c2 2e       	mov	r12, r18
    1550:	d1 2c       	mov	r13, r1
    1552:	42 01       	movw	r8, r4
    1554:	13 c0       	rjmp	.+38     	; 0x157c <vfprintf+0x186>
    1556:	92 e0       	ldi	r25, 0x02	; 2
    1558:	29 2e       	mov	r2, r25
    155a:	31 2c       	mov	r3, r1
    155c:	2a 0c       	add	r2, r10
    155e:	3b 1c       	adc	r3, r11
    1560:	f5 01       	movw	r30, r10
    1562:	80 80       	ld	r8, Z
    1564:	91 80       	ldd	r9, Z+1	; 0x01
    1566:	16 ff       	sbrs	r17, 6
    1568:	03 c0       	rjmp	.+6      	; 0x1570 <vfprintf+0x17a>
    156a:	6f 2d       	mov	r22, r15
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <vfprintf+0x17e>
    1570:	6f ef       	ldi	r22, 0xFF	; 255
    1572:	7f ef       	ldi	r23, 0xFF	; 255
    1574:	c4 01       	movw	r24, r8
    1576:	44 d1       	rcall	.+648    	; 0x1800 <strnlen>
    1578:	6c 01       	movw	r12, r24
    157a:	51 01       	movw	r10, r2
    157c:	1f 77       	andi	r17, 0x7F	; 127
    157e:	14 c0       	rjmp	.+40     	; 0x15a8 <vfprintf+0x1b2>
    1580:	82 e0       	ldi	r24, 0x02	; 2
    1582:	28 2e       	mov	r2, r24
    1584:	31 2c       	mov	r3, r1
    1586:	2a 0c       	add	r2, r10
    1588:	3b 1c       	adc	r3, r11
    158a:	f5 01       	movw	r30, r10
    158c:	80 80       	ld	r8, Z
    158e:	91 80       	ldd	r9, Z+1	; 0x01
    1590:	16 ff       	sbrs	r17, 6
    1592:	03 c0       	rjmp	.+6      	; 0x159a <vfprintf+0x1a4>
    1594:	6f 2d       	mov	r22, r15
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	02 c0       	rjmp	.+4      	; 0x159e <vfprintf+0x1a8>
    159a:	6f ef       	ldi	r22, 0xFF	; 255
    159c:	7f ef       	ldi	r23, 0xFF	; 255
    159e:	c4 01       	movw	r24, r8
    15a0:	24 d1       	rcall	.+584    	; 0x17ea <strnlen_P>
    15a2:	6c 01       	movw	r12, r24
    15a4:	10 68       	ori	r17, 0x80	; 128
    15a6:	51 01       	movw	r10, r2
    15a8:	13 fd       	sbrc	r17, 3
    15aa:	1a c0       	rjmp	.+52     	; 0x15e0 <vfprintf+0x1ea>
    15ac:	05 c0       	rjmp	.+10     	; 0x15b8 <vfprintf+0x1c2>
    15ae:	80 e2       	ldi	r24, 0x20	; 32
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	b3 01       	movw	r22, r6
    15b4:	30 d1       	rcall	.+608    	; 0x1816 <fputc>
    15b6:	ea 94       	dec	r14
    15b8:	8e 2d       	mov	r24, r14
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	c8 16       	cp	r12, r24
    15be:	d9 06       	cpc	r13, r25
    15c0:	b0 f3       	brcs	.-20     	; 0x15ae <vfprintf+0x1b8>
    15c2:	0e c0       	rjmp	.+28     	; 0x15e0 <vfprintf+0x1ea>
    15c4:	f4 01       	movw	r30, r8
    15c6:	17 fd       	sbrc	r17, 7
    15c8:	85 91       	lpm	r24, Z+
    15ca:	17 ff       	sbrs	r17, 7
    15cc:	81 91       	ld	r24, Z+
    15ce:	4f 01       	movw	r8, r30
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	b3 01       	movw	r22, r6
    15d4:	20 d1       	rcall	.+576    	; 0x1816 <fputc>
    15d6:	e1 10       	cpse	r14, r1
    15d8:	ea 94       	dec	r14
    15da:	08 94       	sec
    15dc:	c1 08       	sbc	r12, r1
    15de:	d1 08       	sbc	r13, r1
    15e0:	c1 14       	cp	r12, r1
    15e2:	d1 04       	cpc	r13, r1
    15e4:	79 f7       	brne	.-34     	; 0x15c4 <vfprintf+0x1ce>
    15e6:	df c0       	rjmp	.+446    	; 0x17a6 <vfprintf+0x3b0>
    15e8:	84 36       	cpi	r24, 0x64	; 100
    15ea:	11 f0       	breq	.+4      	; 0x15f0 <vfprintf+0x1fa>
    15ec:	89 36       	cpi	r24, 0x69	; 105
    15ee:	49 f5       	brne	.+82     	; 0x1642 <vfprintf+0x24c>
    15f0:	f5 01       	movw	r30, r10
    15f2:	17 ff       	sbrs	r17, 7
    15f4:	07 c0       	rjmp	.+14     	; 0x1604 <vfprintf+0x20e>
    15f6:	80 81       	ld	r24, Z
    15f8:	91 81       	ldd	r25, Z+1	; 0x01
    15fa:	a2 81       	ldd	r26, Z+2	; 0x02
    15fc:	b3 81       	ldd	r27, Z+3	; 0x03
    15fe:	24 e0       	ldi	r18, 0x04	; 4
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	08 c0       	rjmp	.+16     	; 0x1614 <vfprintf+0x21e>
    1604:	80 81       	ld	r24, Z
    1606:	91 81       	ldd	r25, Z+1	; 0x01
    1608:	aa 27       	eor	r26, r26
    160a:	97 fd       	sbrc	r25, 7
    160c:	a0 95       	com	r26
    160e:	ba 2f       	mov	r27, r26
    1610:	22 e0       	ldi	r18, 0x02	; 2
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	a2 0e       	add	r10, r18
    1616:	b3 1e       	adc	r11, r19
    1618:	01 2f       	mov	r16, r17
    161a:	0f 76       	andi	r16, 0x6F	; 111
    161c:	b7 ff       	sbrs	r27, 7
    161e:	08 c0       	rjmp	.+16     	; 0x1630 <vfprintf+0x23a>
    1620:	b0 95       	com	r27
    1622:	a0 95       	com	r26
    1624:	90 95       	com	r25
    1626:	81 95       	neg	r24
    1628:	9f 4f       	sbci	r25, 0xFF	; 255
    162a:	af 4f       	sbci	r26, 0xFF	; 255
    162c:	bf 4f       	sbci	r27, 0xFF	; 255
    162e:	00 68       	ori	r16, 0x80	; 128
    1630:	bc 01       	movw	r22, r24
    1632:	cd 01       	movw	r24, r26
    1634:	a2 01       	movw	r20, r4
    1636:	2a e0       	ldi	r18, 0x0A	; 10
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	19 d1       	rcall	.+562    	; 0x186e <__ultoa_invert>
    163c:	d8 2e       	mov	r13, r24
    163e:	d4 18       	sub	r13, r4
    1640:	3e c0       	rjmp	.+124    	; 0x16be <vfprintf+0x2c8>
    1642:	85 37       	cpi	r24, 0x75	; 117
    1644:	21 f4       	brne	.+8      	; 0x164e <vfprintf+0x258>
    1646:	1f 7e       	andi	r17, 0xEF	; 239
    1648:	2a e0       	ldi	r18, 0x0A	; 10
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	20 c0       	rjmp	.+64     	; 0x168e <vfprintf+0x298>
    164e:	19 7f       	andi	r17, 0xF9	; 249
    1650:	8f 36       	cpi	r24, 0x6F	; 111
    1652:	a9 f0       	breq	.+42     	; 0x167e <vfprintf+0x288>
    1654:	80 37       	cpi	r24, 0x70	; 112
    1656:	20 f4       	brcc	.+8      	; 0x1660 <vfprintf+0x26a>
    1658:	88 35       	cpi	r24, 0x58	; 88
    165a:	09 f0       	breq	.+2      	; 0x165e <vfprintf+0x268>
    165c:	a7 c0       	rjmp	.+334    	; 0x17ac <vfprintf+0x3b6>
    165e:	0b c0       	rjmp	.+22     	; 0x1676 <vfprintf+0x280>
    1660:	80 37       	cpi	r24, 0x70	; 112
    1662:	21 f0       	breq	.+8      	; 0x166c <vfprintf+0x276>
    1664:	88 37       	cpi	r24, 0x78	; 120
    1666:	09 f0       	breq	.+2      	; 0x166a <vfprintf+0x274>
    1668:	a1 c0       	rjmp	.+322    	; 0x17ac <vfprintf+0x3b6>
    166a:	01 c0       	rjmp	.+2      	; 0x166e <vfprintf+0x278>
    166c:	10 61       	ori	r17, 0x10	; 16
    166e:	14 ff       	sbrs	r17, 4
    1670:	09 c0       	rjmp	.+18     	; 0x1684 <vfprintf+0x28e>
    1672:	14 60       	ori	r17, 0x04	; 4
    1674:	07 c0       	rjmp	.+14     	; 0x1684 <vfprintf+0x28e>
    1676:	14 ff       	sbrs	r17, 4
    1678:	08 c0       	rjmp	.+16     	; 0x168a <vfprintf+0x294>
    167a:	16 60       	ori	r17, 0x06	; 6
    167c:	06 c0       	rjmp	.+12     	; 0x168a <vfprintf+0x294>
    167e:	28 e0       	ldi	r18, 0x08	; 8
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	05 c0       	rjmp	.+10     	; 0x168e <vfprintf+0x298>
    1684:	20 e1       	ldi	r18, 0x10	; 16
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	02 c0       	rjmp	.+4      	; 0x168e <vfprintf+0x298>
    168a:	20 e1       	ldi	r18, 0x10	; 16
    168c:	32 e0       	ldi	r19, 0x02	; 2
    168e:	f5 01       	movw	r30, r10
    1690:	17 ff       	sbrs	r17, 7
    1692:	07 c0       	rjmp	.+14     	; 0x16a2 <vfprintf+0x2ac>
    1694:	60 81       	ld	r22, Z
    1696:	71 81       	ldd	r23, Z+1	; 0x01
    1698:	82 81       	ldd	r24, Z+2	; 0x02
    169a:	93 81       	ldd	r25, Z+3	; 0x03
    169c:	44 e0       	ldi	r20, 0x04	; 4
    169e:	50 e0       	ldi	r21, 0x00	; 0
    16a0:	06 c0       	rjmp	.+12     	; 0x16ae <vfprintf+0x2b8>
    16a2:	60 81       	ld	r22, Z
    16a4:	71 81       	ldd	r23, Z+1	; 0x01
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	42 e0       	ldi	r20, 0x02	; 2
    16ac:	50 e0       	ldi	r21, 0x00	; 0
    16ae:	a4 0e       	add	r10, r20
    16b0:	b5 1e       	adc	r11, r21
    16b2:	a2 01       	movw	r20, r4
    16b4:	dc d0       	rcall	.+440    	; 0x186e <__ultoa_invert>
    16b6:	d8 2e       	mov	r13, r24
    16b8:	d4 18       	sub	r13, r4
    16ba:	01 2f       	mov	r16, r17
    16bc:	0f 77       	andi	r16, 0x7F	; 127
    16be:	06 ff       	sbrs	r16, 6
    16c0:	09 c0       	rjmp	.+18     	; 0x16d4 <vfprintf+0x2de>
    16c2:	0e 7f       	andi	r16, 0xFE	; 254
    16c4:	df 14       	cp	r13, r15
    16c6:	30 f4       	brcc	.+12     	; 0x16d4 <vfprintf+0x2de>
    16c8:	04 ff       	sbrs	r16, 4
    16ca:	06 c0       	rjmp	.+12     	; 0x16d8 <vfprintf+0x2e2>
    16cc:	02 fd       	sbrc	r16, 2
    16ce:	04 c0       	rjmp	.+8      	; 0x16d8 <vfprintf+0x2e2>
    16d0:	0f 7e       	andi	r16, 0xEF	; 239
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <vfprintf+0x2e2>
    16d4:	1d 2d       	mov	r17, r13
    16d6:	01 c0       	rjmp	.+2      	; 0x16da <vfprintf+0x2e4>
    16d8:	1f 2d       	mov	r17, r15
    16da:	80 2f       	mov	r24, r16
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	04 ff       	sbrs	r16, 4
    16e0:	0c c0       	rjmp	.+24     	; 0x16fa <vfprintf+0x304>
    16e2:	fe 01       	movw	r30, r28
    16e4:	ed 0d       	add	r30, r13
    16e6:	f1 1d       	adc	r31, r1
    16e8:	20 81       	ld	r18, Z
    16ea:	20 33       	cpi	r18, 0x30	; 48
    16ec:	11 f4       	brne	.+4      	; 0x16f2 <vfprintf+0x2fc>
    16ee:	09 7e       	andi	r16, 0xE9	; 233
    16f0:	09 c0       	rjmp	.+18     	; 0x1704 <vfprintf+0x30e>
    16f2:	02 ff       	sbrs	r16, 2
    16f4:	06 c0       	rjmp	.+12     	; 0x1702 <vfprintf+0x30c>
    16f6:	1e 5f       	subi	r17, 0xFE	; 254
    16f8:	05 c0       	rjmp	.+10     	; 0x1704 <vfprintf+0x30e>
    16fa:	86 78       	andi	r24, 0x86	; 134
    16fc:	90 70       	andi	r25, 0x00	; 0
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	09 f0       	breq	.+2      	; 0x1704 <vfprintf+0x30e>
    1702:	1f 5f       	subi	r17, 0xFF	; 255
    1704:	80 2e       	mov	r8, r16
    1706:	99 24       	eor	r9, r9
    1708:	03 fd       	sbrc	r16, 3
    170a:	11 c0       	rjmp	.+34     	; 0x172e <vfprintf+0x338>
    170c:	00 ff       	sbrs	r16, 0
    170e:	0c c0       	rjmp	.+24     	; 0x1728 <vfprintf+0x332>
    1710:	fd 2c       	mov	r15, r13
    1712:	1e 15       	cp	r17, r14
    1714:	48 f4       	brcc	.+18     	; 0x1728 <vfprintf+0x332>
    1716:	fe 0c       	add	r15, r14
    1718:	f1 1a       	sub	r15, r17
    171a:	1e 2d       	mov	r17, r14
    171c:	05 c0       	rjmp	.+10     	; 0x1728 <vfprintf+0x332>
    171e:	80 e2       	ldi	r24, 0x20	; 32
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	b3 01       	movw	r22, r6
    1724:	78 d0       	rcall	.+240    	; 0x1816 <fputc>
    1726:	1f 5f       	subi	r17, 0xFF	; 255
    1728:	1e 15       	cp	r17, r14
    172a:	c8 f3       	brcs	.-14     	; 0x171e <vfprintf+0x328>
    172c:	04 c0       	rjmp	.+8      	; 0x1736 <vfprintf+0x340>
    172e:	1e 15       	cp	r17, r14
    1730:	10 f4       	brcc	.+4      	; 0x1736 <vfprintf+0x340>
    1732:	e1 1a       	sub	r14, r17
    1734:	01 c0       	rjmp	.+2      	; 0x1738 <vfprintf+0x342>
    1736:	ee 24       	eor	r14, r14
    1738:	84 fe       	sbrs	r8, 4
    173a:	0e c0       	rjmp	.+28     	; 0x1758 <vfprintf+0x362>
    173c:	80 e3       	ldi	r24, 0x30	; 48
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	b3 01       	movw	r22, r6
    1742:	69 d0       	rcall	.+210    	; 0x1816 <fputc>
    1744:	82 fe       	sbrs	r8, 2
    1746:	1d c0       	rjmp	.+58     	; 0x1782 <vfprintf+0x38c>
    1748:	81 fe       	sbrs	r8, 1
    174a:	03 c0       	rjmp	.+6      	; 0x1752 <vfprintf+0x35c>
    174c:	88 e5       	ldi	r24, 0x58	; 88
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	10 c0       	rjmp	.+32     	; 0x1772 <vfprintf+0x37c>
    1752:	88 e7       	ldi	r24, 0x78	; 120
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	0d c0       	rjmp	.+26     	; 0x1772 <vfprintf+0x37c>
    1758:	c4 01       	movw	r24, r8
    175a:	86 78       	andi	r24, 0x86	; 134
    175c:	90 70       	andi	r25, 0x00	; 0
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	81 f0       	breq	.+32     	; 0x1782 <vfprintf+0x38c>
    1762:	81 fc       	sbrc	r8, 1
    1764:	02 c0       	rjmp	.+4      	; 0x176a <vfprintf+0x374>
    1766:	80 e2       	ldi	r24, 0x20	; 32
    1768:	01 c0       	rjmp	.+2      	; 0x176c <vfprintf+0x376>
    176a:	8b e2       	ldi	r24, 0x2B	; 43
    176c:	07 fd       	sbrc	r16, 7
    176e:	8d e2       	ldi	r24, 0x2D	; 45
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	b3 01       	movw	r22, r6
    1774:	50 d0       	rcall	.+160    	; 0x1816 <fputc>
    1776:	05 c0       	rjmp	.+10     	; 0x1782 <vfprintf+0x38c>
    1778:	80 e3       	ldi	r24, 0x30	; 48
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	b3 01       	movw	r22, r6
    177e:	4b d0       	rcall	.+150    	; 0x1816 <fputc>
    1780:	fa 94       	dec	r15
    1782:	df 14       	cp	r13, r15
    1784:	c8 f3       	brcs	.-14     	; 0x1778 <vfprintf+0x382>
    1786:	da 94       	dec	r13
    1788:	f2 01       	movw	r30, r4
    178a:	ed 0d       	add	r30, r13
    178c:	f1 1d       	adc	r31, r1
    178e:	80 81       	ld	r24, Z
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	b3 01       	movw	r22, r6
    1794:	40 d0       	rcall	.+128    	; 0x1816 <fputc>
    1796:	dd 20       	and	r13, r13
    1798:	b1 f7       	brne	.-20     	; 0x1786 <vfprintf+0x390>
    179a:	05 c0       	rjmp	.+10     	; 0x17a6 <vfprintf+0x3b0>
    179c:	80 e2       	ldi	r24, 0x20	; 32
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	b3 01       	movw	r22, r6
    17a2:	39 d0       	rcall	.+114    	; 0x1816 <fputc>
    17a4:	ea 94       	dec	r14
    17a6:	ee 20       	and	r14, r14
    17a8:	c9 f7       	brne	.-14     	; 0x179c <vfprintf+0x3a6>
    17aa:	4d ce       	rjmp	.-870    	; 0x1446 <vfprintf+0x50>
    17ac:	f3 01       	movw	r30, r6
    17ae:	86 81       	ldd	r24, Z+6	; 0x06
    17b0:	97 81       	ldd	r25, Z+7	; 0x07
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <vfprintf+0x3c2>
    17b4:	8f ef       	ldi	r24, 0xFF	; 255
    17b6:	9f ef       	ldi	r25, 0xFF	; 255
    17b8:	2d 96       	adiw	r28, 0x0d	; 13
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	1f 91       	pop	r17
    17ca:	0f 91       	pop	r16
    17cc:	ff 90       	pop	r15
    17ce:	ef 90       	pop	r14
    17d0:	df 90       	pop	r13
    17d2:	cf 90       	pop	r12
    17d4:	bf 90       	pop	r11
    17d6:	af 90       	pop	r10
    17d8:	9f 90       	pop	r9
    17da:	8f 90       	pop	r8
    17dc:	7f 90       	pop	r7
    17de:	6f 90       	pop	r6
    17e0:	5f 90       	pop	r5
    17e2:	4f 90       	pop	r4
    17e4:	3f 90       	pop	r3
    17e6:	2f 90       	pop	r2
    17e8:	08 95       	ret

000017ea <strnlen_P>:
    17ea:	fc 01       	movw	r30, r24
    17ec:	05 90       	lpm	r0, Z+
    17ee:	61 50       	subi	r22, 0x01	; 1
    17f0:	70 40       	sbci	r23, 0x00	; 0
    17f2:	01 10       	cpse	r0, r1
    17f4:	d8 f7       	brcc	.-10     	; 0x17ec <strnlen_P+0x2>
    17f6:	80 95       	com	r24
    17f8:	90 95       	com	r25
    17fa:	8e 0f       	add	r24, r30
    17fc:	9f 1f       	adc	r25, r31
    17fe:	08 95       	ret

00001800 <strnlen>:
    1800:	fc 01       	movw	r30, r24
    1802:	61 50       	subi	r22, 0x01	; 1
    1804:	70 40       	sbci	r23, 0x00	; 0
    1806:	01 90       	ld	r0, Z+
    1808:	01 10       	cpse	r0, r1
    180a:	d8 f7       	brcc	.-10     	; 0x1802 <strnlen+0x2>
    180c:	80 95       	com	r24
    180e:	90 95       	com	r25
    1810:	8e 0f       	add	r24, r30
    1812:	9f 1f       	adc	r25, r31
    1814:	08 95       	ret

00001816 <fputc>:
    1816:	0f 93       	push	r16
    1818:	1f 93       	push	r17
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
    181e:	8c 01       	movw	r16, r24
    1820:	eb 01       	movw	r28, r22
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	81 ff       	sbrs	r24, 1
    1826:	1b c0       	rjmp	.+54     	; 0x185e <fputc+0x48>
    1828:	82 ff       	sbrs	r24, 2
    182a:	0d c0       	rjmp	.+26     	; 0x1846 <fputc+0x30>
    182c:	2e 81       	ldd	r18, Y+6	; 0x06
    182e:	3f 81       	ldd	r19, Y+7	; 0x07
    1830:	8c 81       	ldd	r24, Y+4	; 0x04
    1832:	9d 81       	ldd	r25, Y+5	; 0x05
    1834:	28 17       	cp	r18, r24
    1836:	39 07       	cpc	r19, r25
    1838:	64 f4       	brge	.+24     	; 0x1852 <fputc+0x3c>
    183a:	e8 81       	ld	r30, Y
    183c:	f9 81       	ldd	r31, Y+1	; 0x01
    183e:	01 93       	st	Z+, r16
    1840:	f9 83       	std	Y+1, r31	; 0x01
    1842:	e8 83       	st	Y, r30
    1844:	06 c0       	rjmp	.+12     	; 0x1852 <fputc+0x3c>
    1846:	e8 85       	ldd	r30, Y+8	; 0x08
    1848:	f9 85       	ldd	r31, Y+9	; 0x09
    184a:	80 2f       	mov	r24, r16
    184c:	09 95       	icall
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	31 f4       	brne	.+12     	; 0x185e <fputc+0x48>
    1852:	8e 81       	ldd	r24, Y+6	; 0x06
    1854:	9f 81       	ldd	r25, Y+7	; 0x07
    1856:	01 96       	adiw	r24, 0x01	; 1
    1858:	9f 83       	std	Y+7, r25	; 0x07
    185a:	8e 83       	std	Y+6, r24	; 0x06
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <fputc+0x4c>
    185e:	0f ef       	ldi	r16, 0xFF	; 255
    1860:	1f ef       	ldi	r17, 0xFF	; 255
    1862:	c8 01       	movw	r24, r16
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	1f 91       	pop	r17
    186a:	0f 91       	pop	r16
    186c:	08 95       	ret

0000186e <__ultoa_invert>:
    186e:	fa 01       	movw	r30, r20
    1870:	aa 27       	eor	r26, r26
    1872:	28 30       	cpi	r18, 0x08	; 8
    1874:	51 f1       	breq	.+84     	; 0x18ca <__ultoa_invert+0x5c>
    1876:	20 31       	cpi	r18, 0x10	; 16
    1878:	81 f1       	breq	.+96     	; 0x18da <__ultoa_invert+0x6c>
    187a:	e8 94       	clt
    187c:	6f 93       	push	r22
    187e:	6e 7f       	andi	r22, 0xFE	; 254
    1880:	6e 5f       	subi	r22, 0xFE	; 254
    1882:	7f 4f       	sbci	r23, 0xFF	; 255
    1884:	8f 4f       	sbci	r24, 0xFF	; 255
    1886:	9f 4f       	sbci	r25, 0xFF	; 255
    1888:	af 4f       	sbci	r26, 0xFF	; 255
    188a:	b1 e0       	ldi	r27, 0x01	; 1
    188c:	3e d0       	rcall	.+124    	; 0x190a <__ultoa_invert+0x9c>
    188e:	b4 e0       	ldi	r27, 0x04	; 4
    1890:	3c d0       	rcall	.+120    	; 0x190a <__ultoa_invert+0x9c>
    1892:	67 0f       	add	r22, r23
    1894:	78 1f       	adc	r23, r24
    1896:	89 1f       	adc	r24, r25
    1898:	9a 1f       	adc	r25, r26
    189a:	a1 1d       	adc	r26, r1
    189c:	68 0f       	add	r22, r24
    189e:	79 1f       	adc	r23, r25
    18a0:	8a 1f       	adc	r24, r26
    18a2:	91 1d       	adc	r25, r1
    18a4:	a1 1d       	adc	r26, r1
    18a6:	6a 0f       	add	r22, r26
    18a8:	71 1d       	adc	r23, r1
    18aa:	81 1d       	adc	r24, r1
    18ac:	91 1d       	adc	r25, r1
    18ae:	a1 1d       	adc	r26, r1
    18b0:	20 d0       	rcall	.+64     	; 0x18f2 <__ultoa_invert+0x84>
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <__ultoa_invert+0x48>
    18b4:	68 94       	set
    18b6:	3f 91       	pop	r19
    18b8:	2a e0       	ldi	r18, 0x0A	; 10
    18ba:	26 9f       	mul	r18, r22
    18bc:	11 24       	eor	r1, r1
    18be:	30 19       	sub	r19, r0
    18c0:	30 5d       	subi	r19, 0xD0	; 208
    18c2:	31 93       	st	Z+, r19
    18c4:	de f6       	brtc	.-74     	; 0x187c <__ultoa_invert+0xe>
    18c6:	cf 01       	movw	r24, r30
    18c8:	08 95       	ret
    18ca:	46 2f       	mov	r20, r22
    18cc:	47 70       	andi	r20, 0x07	; 7
    18ce:	40 5d       	subi	r20, 0xD0	; 208
    18d0:	41 93       	st	Z+, r20
    18d2:	b3 e0       	ldi	r27, 0x03	; 3
    18d4:	0f d0       	rcall	.+30     	; 0x18f4 <__ultoa_invert+0x86>
    18d6:	c9 f7       	brne	.-14     	; 0x18ca <__ultoa_invert+0x5c>
    18d8:	f6 cf       	rjmp	.-20     	; 0x18c6 <__ultoa_invert+0x58>
    18da:	46 2f       	mov	r20, r22
    18dc:	4f 70       	andi	r20, 0x0F	; 15
    18de:	40 5d       	subi	r20, 0xD0	; 208
    18e0:	4a 33       	cpi	r20, 0x3A	; 58
    18e2:	18 f0       	brcs	.+6      	; 0x18ea <__ultoa_invert+0x7c>
    18e4:	49 5d       	subi	r20, 0xD9	; 217
    18e6:	31 fd       	sbrc	r19, 1
    18e8:	40 52       	subi	r20, 0x20	; 32
    18ea:	41 93       	st	Z+, r20
    18ec:	02 d0       	rcall	.+4      	; 0x18f2 <__ultoa_invert+0x84>
    18ee:	a9 f7       	brne	.-22     	; 0x18da <__ultoa_invert+0x6c>
    18f0:	ea cf       	rjmp	.-44     	; 0x18c6 <__ultoa_invert+0x58>
    18f2:	b4 e0       	ldi	r27, 0x04	; 4
    18f4:	a6 95       	lsr	r26
    18f6:	97 95       	ror	r25
    18f8:	87 95       	ror	r24
    18fa:	77 95       	ror	r23
    18fc:	67 95       	ror	r22
    18fe:	ba 95       	dec	r27
    1900:	c9 f7       	brne	.-14     	; 0x18f4 <__ultoa_invert+0x86>
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	61 05       	cpc	r22, r1
    1906:	71 05       	cpc	r23, r1
    1908:	08 95       	ret
    190a:	9b 01       	movw	r18, r22
    190c:	ac 01       	movw	r20, r24
    190e:	0a 2e       	mov	r0, r26
    1910:	06 94       	lsr	r0
    1912:	57 95       	ror	r21
    1914:	47 95       	ror	r20
    1916:	37 95       	ror	r19
    1918:	27 95       	ror	r18
    191a:	ba 95       	dec	r27
    191c:	c9 f7       	brne	.-14     	; 0x1910 <__ultoa_invert+0xa2>
    191e:	62 0f       	add	r22, r18
    1920:	73 1f       	adc	r23, r19
    1922:	84 1f       	adc	r24, r20
    1924:	95 1f       	adc	r25, r21
    1926:	a0 1d       	adc	r26, r0
    1928:	08 95       	ret

0000192a <_exit>:
    192a:	f8 94       	cli

0000192c <__stop_program>:
    192c:	ff cf       	rjmp	.-2      	; 0x192c <__stop_program>
