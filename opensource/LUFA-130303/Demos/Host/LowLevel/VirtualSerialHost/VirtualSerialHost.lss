
VirtualSerialHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000019b4  00001a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800128  00800128  00001a70  2**0
                  ALLOC
  3 .stab         00000e28  00000000  00000000  00001a70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000256  00000000  00000000  00002898  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000430  00000000  00000000  00002af0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005b13  00000000  00000000  00002f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cac  00000000  00000000  00008a33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d5f  00000000  00000000  0000a6df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b50  00000000  00000000  0000d440  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002827  00000000  00000000  0000df90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003fd9  00000000  00000000  000107b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  00014790  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	47 c1       	rjmp	.+654    	; 0x290 <__ctors_end>
       2:	00 00       	nop
       4:	64 c1       	rjmp	.+712    	; 0x2ce <__bad_interrupt>
       6:	00 00       	nop
       8:	62 c1       	rjmp	.+708    	; 0x2ce <__bad_interrupt>
       a:	00 00       	nop
       c:	60 c1       	rjmp	.+704    	; 0x2ce <__bad_interrupt>
       e:	00 00       	nop
      10:	5e c1       	rjmp	.+700    	; 0x2ce <__bad_interrupt>
      12:	00 00       	nop
      14:	5c c1       	rjmp	.+696    	; 0x2ce <__bad_interrupt>
      16:	00 00       	nop
      18:	5a c1       	rjmp	.+692    	; 0x2ce <__bad_interrupt>
      1a:	00 00       	nop
      1c:	58 c1       	rjmp	.+688    	; 0x2ce <__bad_interrupt>
      1e:	00 00       	nop
      20:	56 c1       	rjmp	.+684    	; 0x2ce <__bad_interrupt>
      22:	00 00       	nop
      24:	54 c1       	rjmp	.+680    	; 0x2ce <__bad_interrupt>
      26:	00 00       	nop
      28:	19 c7       	rjmp	.+3634   	; 0xe5c <__vector_10>
      2a:	00 00       	nop
      2c:	50 c1       	rjmp	.+672    	; 0x2ce <__bad_interrupt>
      2e:	00 00       	nop
      30:	4e c1       	rjmp	.+668    	; 0x2ce <__bad_interrupt>
      32:	00 00       	nop
      34:	4c c1       	rjmp	.+664    	; 0x2ce <__bad_interrupt>
      36:	00 00       	nop
      38:	4a c1       	rjmp	.+660    	; 0x2ce <__bad_interrupt>
      3a:	00 00       	nop
      3c:	48 c1       	rjmp	.+656    	; 0x2ce <__bad_interrupt>
      3e:	00 00       	nop
      40:	46 c1       	rjmp	.+652    	; 0x2ce <__bad_interrupt>
      42:	00 00       	nop
      44:	44 c1       	rjmp	.+648    	; 0x2ce <__bad_interrupt>
      46:	00 00       	nop
      48:	42 c1       	rjmp	.+644    	; 0x2ce <__bad_interrupt>
      4a:	00 00       	nop
      4c:	40 c1       	rjmp	.+640    	; 0x2ce <__bad_interrupt>
      4e:	00 00       	nop
      50:	3e c1       	rjmp	.+636    	; 0x2ce <__bad_interrupt>
      52:	00 00       	nop
      54:	3c c1       	rjmp	.+632    	; 0x2ce <__bad_interrupt>
      56:	00 00       	nop
      58:	3a c1       	rjmp	.+628    	; 0x2ce <__bad_interrupt>
      5a:	00 00       	nop
      5c:	38 c1       	rjmp	.+624    	; 0x2ce <__bad_interrupt>
      5e:	00 00       	nop
      60:	36 c1       	rjmp	.+620    	; 0x2ce <__bad_interrupt>
      62:	00 00       	nop
      64:	34 c1       	rjmp	.+616    	; 0x2ce <__bad_interrupt>
      66:	00 00       	nop
      68:	32 c1       	rjmp	.+612    	; 0x2ce <__bad_interrupt>
      6a:	00 00       	nop
      6c:	30 c1       	rjmp	.+608    	; 0x2ce <__bad_interrupt>
      6e:	00 00       	nop
      70:	2e c1       	rjmp	.+604    	; 0x2ce <__bad_interrupt>
      72:	00 00       	nop
      74:	2c c1       	rjmp	.+600    	; 0x2ce <__bad_interrupt>
      76:	00 00       	nop
      78:	2a c1       	rjmp	.+596    	; 0x2ce <__bad_interrupt>
      7a:	00 00       	nop
      7c:	28 c1       	rjmp	.+592    	; 0x2ce <__bad_interrupt>
      7e:	00 00       	nop
      80:	26 c1       	rjmp	.+588    	; 0x2ce <__bad_interrupt>
      82:	00 00       	nop
      84:	24 c1       	rjmp	.+584    	; 0x2ce <__bad_interrupt>
      86:	00 00       	nop
      88:	22 c1       	rjmp	.+580    	; 0x2ce <__bad_interrupt>
      8a:	00 00       	nop
      8c:	20 c1       	rjmp	.+576    	; 0x2ce <__bad_interrupt>
      8e:	00 00       	nop
      90:	1e c1       	rjmp	.+572    	; 0x2ce <__bad_interrupt>
      92:	00 00       	nop
      94:	1c c1       	rjmp	.+568    	; 0x2ce <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4275>:
      98:	1b 5b 33 36 6d 43 44 43 20 48 6f 73 74 20 44 65     .[36mCDC Host De
      a8:	6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33     mo running....[3
      b8:	37 6d 00                                            7m.

000000bb <__c.4284>:
      bb:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
      cb:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

000000d8 <__c.4289>:
      d8:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
      e8:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
      f8:	00                                                  .

000000f9 <__c.4294>:
      f9:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     109:	61 74 61 2e 0d 0a 00                                ata....

00000110 <__c.4297>:
     110:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     120:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     130:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

0000013a <__c.4299>:
     13a:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     14a:	69 63 65 2e 0d 0a 00                                ice....

00000151 <__c.4301>:
     151:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     161:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000016b <__c.4303>:
     16b:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     17b:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     18b:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     19b:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1ab:	37 6d 00                                            7m.

000001ae <__c.4307>:
     1ae:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1be:	6f 72 20 28 53 65 74 20 4c 69 6e 65 20 45 6e 63     or (Set Line Enc
     1ce:	6f 64 69 6e 67 29 2e 0d 0a 20 2d 2d 20 45 72 72     oding)... -- Err
     1de:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1ee:	37 6d 00                                            7m.

000001f1 <__c.4309>:
     1f1:	43 44 43 20 44 65 76 69 63 65 20 45 6e 75 6d 65     CDC Device Enume
     201:	72 61 74 65 64 2e 0d 0a 00                          rated....

0000020a <__c.4314>:
     20a:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     21a:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     22a:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000239 <__c.4321>:
     239:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     249:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     259:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     269:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     279:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     289:	1b 5b 33 37 6d 00 00                                .[37m..

00000290 <__ctors_end>:
     290:	11 24       	eor	r1, r1
     292:	1f be       	out	0x3f, r1	; 63
     294:	cf ef       	ldi	r28, 0xFF	; 255
     296:	d0 e2       	ldi	r29, 0x20	; 32
     298:	de bf       	out	0x3e, r29	; 62
     29a:	cd bf       	out	0x3d, r28	; 61

0000029c <__do_copy_data>:
     29c:	11 e0       	ldi	r17, 0x01	; 1
     29e:	a0 e0       	ldi	r26, 0x00	; 0
     2a0:	b1 e0       	ldi	r27, 0x01	; 1
     2a2:	e4 eb       	ldi	r30, 0xB4	; 180
     2a4:	f9 e1       	ldi	r31, 0x19	; 25
     2a6:	00 e0       	ldi	r16, 0x00	; 0
     2a8:	0b bf       	out	0x3b, r16	; 59
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <__do_copy_data+0x14>
     2ac:	07 90       	elpm	r0, Z+
     2ae:	0d 92       	st	X+, r0
     2b0:	a8 32       	cpi	r26, 0x28	; 40
     2b2:	b1 07       	cpc	r27, r17
     2b4:	d9 f7       	brne	.-10     	; 0x2ac <__do_copy_data+0x10>
     2b6:	1b be       	out	0x3b, r1	; 59

000002b8 <__do_clear_bss>:
     2b8:	11 e0       	ldi	r17, 0x01	; 1
     2ba:	a8 e2       	ldi	r26, 0x28	; 40
     2bc:	b1 e0       	ldi	r27, 0x01	; 1
     2be:	01 c0       	rjmp	.+2      	; 0x2c2 <.do_clear_bss_start>

000002c0 <.do_clear_bss_loop>:
     2c0:	1d 92       	st	X+, r1

000002c2 <.do_clear_bss_start>:
     2c2:	aa 34       	cpi	r26, 0x4A	; 74
     2c4:	b1 07       	cpc	r27, r17
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <.do_clear_bss_loop>
     2c8:	8b d1       	rcall	.+790    	; 0x5e0 <main>
     2ca:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <_exit>

000002ce <__bad_interrupt>:
     2ce:	98 ce       	rjmp	.-720    	; 0x0 <__vectors>

000002d0 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2d0:	9b b1       	in	r25, 0x0b	; 11
     2d2:	9f 70       	andi	r25, 0x0F	; 15
     2d4:	98 2b       	or	r25, r24
     2d6:	9b b9       	out	0x0b, r25	; 11
			}
     2d8:	08 95       	ret

000002da <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2da:	84 b7       	in	r24, 0x34	; 52
     2dc:	87 7f       	andi	r24, 0xF7	; 247
     2de:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2e0:	28 e1       	ldi	r18, 0x18	; 24
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	20 93 60 00 	sts	0x0060, r18
     2ea:	10 92 60 00 	sts	0x0060, r1
     2ee:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	80 e8       	ldi	r24, 0x80	; 128
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	f8 94       	cli
     2f8:	80 93 61 00 	sts	0x0061, r24
     2fc:	90 93 61 00 	sts	0x0061, r25
     300:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     302:	83 e3       	ldi	r24, 0x33	; 51
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	90 93 cd 00 	sts	0x00CD, r25
     30a:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     30e:	86 e0       	ldi	r24, 0x06	; 6
     310:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     314:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     318:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     31c:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     31e:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     320:	8a b1       	in	r24, 0x0a	; 10
     322:	80 6f       	ori	r24, 0xF0	; 240
     324:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     326:	8b b1       	in	r24, 0x0b	; 11
     328:	8f 70       	andi	r24, 0x0F	; 15
     32a:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     32c:	7c d5       	rcall	.+2808   	; 0xe26 <USB_Init>
     32e:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <Serial_CreateStream>

00000336 <EVENT_USB_Host_DeviceAttached>:
     336:	8b eb       	ldi	r24, 0xBB	; 187
}
     338:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     33a:	0e 94 3b 0a 	call	0x1476	; 0x1476 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     33e:	80 ea       	ldi	r24, 0xA0	; 160
     340:	c7 cf       	rjmp	.-114    	; 0x2d0 <LEDs_SetAllLEDs>

00000342 <EVENT_USB_Host_DeviceUnattached>:
     342:	88 ed       	ldi	r24, 0xD8	; 216
}
     344:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     346:	0e 94 3b 0a 	call	0x1476	; 0x1476 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     34a:	80 e1       	ldi	r24, 0x10	; 16
     34c:	c1 cf       	rjmp	.-126    	; 0x2d0 <LEDs_SetAllLEDs>

0000034e <EVENT_USB_Host_DeviceEnumerationComplete>:
     34e:	1f 93       	push	r17
}
     350:	cf 93       	push	r28

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     352:	df 93       	push	r29
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
     358:	27 97       	sbiw	r28, 0x07	; 7
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	f8 94       	cli
     35e:	de bf       	out	0x3e, r29	; 62
     360:	0f be       	out	0x3f, r0	; 63
     362:	cd bf       	out	0x3d, r28	; 61
	puts_P(PSTR("Getting Config Data.\r\n"));
     364:	89 ef       	ldi	r24, 0xF9	; 249
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	0e 94 3b 0a 	call	0x1476	; 0x1476 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     36c:	7a d1       	rcall	.+756    	; 0x662 <ProcessConfigurationDescriptor>
     36e:	18 2f       	mov	r17, r24
     370:	88 23       	and	r24, r24
     372:	c9 f0       	breq	.+50     	; 0x3a6 <EVENT_USB_Host_DeviceEnumerationComplete+0x58>
     374:	81 30       	cpi	r24, 0x01	; 1
	{
		if (ErrorCode == ControlError)
     376:	19 f4       	brne	.+6      	; 0x37e <EVENT_USB_Host_DeviceEnumerationComplete+0x30>
     378:	80 e1       	ldi	r24, 0x10	; 16
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     37a:	91 e0       	ldi	r25, 0x01	; 1
     37c:	02 c0       	rjmp	.+4      	; 0x382 <EVENT_USB_Host_DeviceEnumerationComplete+0x34>
     37e:	8a e3       	ldi	r24, 0x3A	; 58
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	0e 94 3b 0a 	call	0x1476	; 0x1476 <puts_P>
     386:	00 d0       	rcall	.+0      	; 0x388 <EVENT_USB_Host_DeviceEnumerationComplete+0x3a>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     388:	00 d0       	rcall	.+0      	; 0x38a <EVENT_USB_Host_DeviceEnumerationComplete+0x3c>
     38a:	ed b7       	in	r30, 0x3d	; 61
     38c:	fe b7       	in	r31, 0x3e	; 62
     38e:	31 96       	adiw	r30, 0x01	; 1
     390:	21 e5       	ldi	r18, 0x51	; 81
     392:	31 e0       	ldi	r19, 0x01	; 1
     394:	ad b7       	in	r26, 0x3d	; 61
     396:	be b7       	in	r27, 0x3e	; 62
     398:	12 96       	adiw	r26, 0x02	; 2
     39a:	3c 93       	st	X, r19
     39c:	2e 93       	st	-X, r18
     39e:	11 97       	sbiw	r26, 0x01	; 1
     3a0:	12 83       	std	Z+2, r17	; 0x02
     3a2:	13 82       	std	Z+3, r1	; 0x03
     3a4:	36 c0       	rjmp	.+108    	; 0x412 <EVENT_USB_Host_DeviceEnumerationComplete+0xc4>
     3a6:	81 e0       	ldi	r24, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     3a8:	b1 d7       	rcall	.+3938   	; 0x130c <USB_Host_SetDeviceConfiguration>
     3aa:	88 23       	and	r24, r24
     3ac:	79 f0       	breq	.+30     	; 0x3cc <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
     3ae:	00 d0       	rcall	.+0      	; 0x3b0 <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
     3b0:	00 d0       	rcall	.+0      	; 0x3b2 <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     3b2:	ed b7       	in	r30, 0x3d	; 61
     3b4:	fe b7       	in	r31, 0x3e	; 62
     3b6:	31 96       	adiw	r30, 0x01	; 1
     3b8:	2b e6       	ldi	r18, 0x6B	; 107
     3ba:	31 e0       	ldi	r19, 0x01	; 1
     3bc:	ad b7       	in	r26, 0x3d	; 61
     3be:	be b7       	in	r27, 0x3e	; 62
     3c0:	12 96       	adiw	r26, 0x02	; 2
     3c2:	3c 93       	st	X, r19
     3c4:	2e 93       	st	-X, r18
     3c6:	11 97       	sbiw	r26, 0x01	; 1
     3c8:	82 83       	std	Z+2, r24	; 0x02
     3ca:	eb cf       	rjmp	.-42     	; 0x3a2 <EVENT_USB_Host_DeviceEnumerationComplete+0x54>
     3cc:	de 01       	movw	r26, r28
     3ce:	11 96       	adiw	r26, 0x01	; 1

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	CDC_LineEncoding_t LineEncoding = { .BaudRateBPS = 9600,
     3d0:	e0 e0       	ldi	r30, 0x00	; 0
     3d2:	f1 e0       	ldi	r31, 0x01	; 1
     3d4:	87 e0       	ldi	r24, 0x07	; 7
     3d6:	01 90       	ld	r0, Z+
     3d8:	0d 92       	st	X+, r0
     3da:	81 50       	subi	r24, 0x01	; 1
     3dc:	e1 f7       	brne	.-8      	; 0x3d6 <EVENT_USB_Host_DeviceEnumerationComplete+0x88>
     3de:	ad e2       	ldi	r26, 0x2D	; 45
     3e0:	b1 e0       	ldi	r27, 0x01	; 1
	                                    .CharFormat  = CDC_LINEENCODING_OneStopBit,
	                                    .ParityType  = CDC_PARITY_None,
	                                    .DataBits    = 8                            };

	USB_ControlRequest = (USB_Request_Header_t)
     3e2:	e7 e0       	ldi	r30, 0x07	; 7
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	88 e0       	ldi	r24, 0x08	; 8
     3e8:	01 90       	ld	r0, Z+
     3ea:	0d 92       	st	X+, r0
     3ec:	81 50       	subi	r24, 0x01	; 1
     3ee:	e1 f7       	brne	.-8      	; 0x3e8 <EVENT_USB_Host_DeviceEnumerationComplete+0x9a>
     3f0:	10 92 a7 00 	sts	0x00A7, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     3f4:	ce 01       	movw	r24, r28
     3f6:	01 96       	adiw	r24, 0x01	; 1
		.wLength       = sizeof(LineEncoding),
	};

	/* Set the Line Encoding of the CDC interface within the device, so that it is ready to accept data */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	if (USB_Host_SendControlRequest(&LineEncoding) != HOST_SENDCONTROL_Successful)
     3f8:	8b d6       	rcall	.+3350   	; 0x1110 <USB_Host_SendControlRequest>
     3fa:	88 23       	and	r24, r24
     3fc:	91 f0       	breq	.+36     	; 0x422 <EVENT_USB_Host_DeviceEnumerationComplete+0xd4>
     3fe:	00 d0       	rcall	.+0      	; 0x400 <EVENT_USB_Host_DeviceEnumerationComplete+0xb2>
     400:	00 d0       	rcall	.+0      	; 0x402 <EVENT_USB_Host_DeviceEnumerationComplete+0xb4>
     402:	8e ea       	ldi	r24, 0xAE	; 174
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Line Encoding).\r\n"
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	ed b7       	in	r30, 0x3d	; 61
     408:	fe b7       	in	r31, 0x3e	; 62
     40a:	92 83       	std	Z+2, r25	; 0x02
     40c:	81 83       	std	Z+1, r24	; 0x01
     40e:	14 82       	std	Z+4, r1	; 0x04
     410:	13 82       	std	Z+3, r1	; 0x03
     412:	0e 94 1c 0a 	call	0x1438	; 0x1438 <printf_P>
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     41c:	0f 90       	pop	r0
     41e:	80 e9       	ldi	r24, 0x90	; 144
     420:	05 c0       	rjmp	.+10     	; 0x42c <EVENT_USB_Host_DeviceEnumerationComplete+0xde>
     422:	81 ef       	ldi	r24, 0xF1	; 241
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	0e 94 3b 0a 	call	0x1476	; 0x1476 <puts_P>
		return;
	}

	puts_P(PSTR("CDC Device Enumerated.\r\n"));
     42a:	80 e6       	ldi	r24, 0x60	; 96
     42c:	51 df       	rcall	.-350    	; 0x2d0 <LEDs_SetAllLEDs>
     42e:	27 96       	adiw	r28, 0x07	; 7
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	f8 94       	cli
     434:	de bf       	out	0x3e, r29	; 62
}
     436:	0f be       	out	0x3f, r0	; 63
     438:	cd bf       	out	0x3d, r28	; 61
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	1f 91       	pop	r17
     440:	08 95       	ret

00000442 <EVENT_USB_Host_HostError>:
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	0f 92       	push	r0
     448:	cd b7       	in	r28, 0x3d	; 61

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     44a:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     44c:	89 83       	std	Y+1, r24	; 0x01
     44e:	83 d4       	rcall	.+2310   	; 0xd56 <USB_Disable>
     450:	00 d0       	rcall	.+0      	; 0x452 <EVENT_USB_Host_HostError+0x10>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     452:	00 d0       	rcall	.+0      	; 0x454 <EVENT_USB_Host_HostError+0x12>
     454:	ed b7       	in	r30, 0x3d	; 61
     456:	fe b7       	in	r31, 0x3e	; 62
     458:	31 96       	adiw	r30, 0x01	; 1
     45a:	2a e0       	ldi	r18, 0x0A	; 10
     45c:	32 e0       	ldi	r19, 0x02	; 2
     45e:	ad b7       	in	r26, 0x3d	; 61
     460:	be b7       	in	r27, 0x3e	; 62
     462:	12 96       	adiw	r26, 0x02	; 2
     464:	3c 93       	st	X, r19
     466:	2e 93       	st	-X, r18
     468:	11 97       	sbiw	r26, 0x01	; 1
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	82 83       	std	Z+2, r24	; 0x02
     46e:	13 82       	std	Z+3, r1	; 0x03
     470:	e3 d7       	rcall	.+4038   	; 0x1438 <printf_P>
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	80 e9       	ldi	r24, 0x90	; 144
     47c:	29 df       	rcall	.-430    	; 0x2d0 <LEDs_SetAllLEDs>
     47e:	ff cf       	rjmp	.-2      	; 0x47e <EVENT_USB_Host_HostError+0x3c>

00000480 <EVENT_USB_Host_DeviceEnumerationFailed>:
     480:	90 91 35 01 	lds	r25, 0x0135
     484:	2d b7       	in	r18, 0x3d	; 61
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     486:	3e b7       	in	r19, 0x3e	; 62
     488:	28 50       	subi	r18, 0x08	; 8
     48a:	30 40       	sbci	r19, 0x00	; 0
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	f8 94       	cli
     490:	3e bf       	out	0x3e, r19	; 62
     492:	0f be       	out	0x3f, r0	; 63
     494:	2d bf       	out	0x3d, r18	; 61
     496:	ed b7       	in	r30, 0x3d	; 61
     498:	fe b7       	in	r31, 0x3e	; 62
     49a:	31 96       	adiw	r30, 0x01	; 1
     49c:	29 e3       	ldi	r18, 0x39	; 57
     49e:	32 e0       	ldi	r19, 0x02	; 2
     4a0:	ad b7       	in	r26, 0x3d	; 61
     4a2:	be b7       	in	r27, 0x3e	; 62
     4a4:	12 96       	adiw	r26, 0x02	; 2
     4a6:	3c 93       	st	X, r19
     4a8:	2e 93       	st	-X, r18
     4aa:	11 97       	sbiw	r26, 0x01	; 1
     4ac:	82 83       	std	Z+2, r24	; 0x02
     4ae:	13 82       	std	Z+3, r1	; 0x03
     4b0:	64 83       	std	Z+4, r22	; 0x04
     4b2:	15 82       	std	Z+5, r1	; 0x05
     4b4:	96 83       	std	Z+6, r25	; 0x06
     4b6:	17 82       	std	Z+7, r1	; 0x07
     4b8:	bf d7       	rcall	.+3966   	; 0x1438 <printf_P>
     4ba:	2d b7       	in	r18, 0x3d	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4bc:	3e b7       	in	r19, 0x3e	; 62
     4be:	28 5f       	subi	r18, 0xF8	; 248
     4c0:	3f 4f       	sbci	r19, 0xFF	; 255
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	f8 94       	cli
     4c6:	3e bf       	out	0x3e, r19	; 62
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	2d bf       	out	0x3d, r18	; 61
     4cc:	80 e9       	ldi	r24, 0x90	; 144
     4ce:	00 cf       	rjmp	.-512    	; 0x2d0 <LEDs_SetAllLEDs>

000004d0 <CDCHost_Task>:
     4d0:	8f 92       	push	r8
     4d2:	9f 92       	push	r9
}
     4d4:	af 92       	push	r10

/** Task to read in data received from the attached CDC device and print it to the serial port.
 */
void CDCHost_Task(void)
{
     4d6:	bf 92       	push	r11
     4d8:	cf 92       	push	r12
     4da:	df 92       	push	r13
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
		Pipe_ClearIN();
	}

	/* Freeze notification IN pipe after use */
	Pipe_Freeze();
}
     4ec:	8d b6       	in	r8, 0x3d	; 61
     4ee:	9e b6       	in	r9, 0x3e	; 62

/** Task to read in data received from the attached CDC device and print it to the serial port.
 */
void CDCHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     4f0:	80 91 35 01 	lds	r24, 0x0135
     4f4:	8b 30       	cpi	r24, 0x0B	; 11
     4f6:	09 f0       	breq	.+2      	; 0x4fa <CDCHost_Task+0x2a>
     4f8:	61 c0       	rjmp	.+194    	; 0x5bc <CDCHost_Task+0xec>
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     500:	80 91 a9 00 	lds	r24, 0x00A9
     504:	8f 7b       	andi	r24, 0xBF	; 191
     506:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     50a:	80 91 a6 00 	lds	r24, 0x00A6
	/* Select the data IN pipe */
	Pipe_SelectPipe(CDC_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (Pipe_IsINReceived())
     50e:	80 ff       	sbrs	r24, 0
     510:	3a c0       	rjmp	.+116    	; 0x586 <CDCHost_Task+0xb6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     512:	80 91 a9 00 	lds	r24, 0x00A9
     516:	80 64       	ori	r24, 0x40	; 64
     518:	80 93 a9 00 	sts	0x00A9, r24
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     51c:	80 91 a6 00 	lds	r24, 0x00A6
	{
		/* Re-freeze IN pipe after the packet has been received */
		Pipe_Freeze();

		/* Check if data is in the pipe */
		if (Pipe_IsReadWriteAllowed())
     520:	85 ff       	sbrs	r24, 5
     522:	2c c0       	rjmp	.+88     	; 0x57c <CDCHost_Task+0xac>
     524:	bd b6       	in	r11, 0x3d	; 61
     526:	ae b6       	in	r10, 0x3e	; 62
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     528:	c0 90 f6 00 	lds	r12, 0x00F6
     52c:	d0 90 f7 00 	lds	r13, 0x00F7
		{
			/* Get the length of the pipe data, and create a new buffer to hold it */
			uint16_t BufferLength = Pipe_BytesInPipe();
			uint8_t  Buffer[BufferLength];
     530:	8d b7       	in	r24, 0x3d	; 61
     532:	9e b7       	in	r25, 0x3e	; 62
     534:	8c 19       	sub	r24, r12
     536:	9d 09       	sbc	r25, r13
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	f8 94       	cli
     53c:	9e bf       	out	0x3e, r25	; 62
     53e:	0f be       	out	0x3f, r0	; 63
     540:	8d bf       	out	0x3d, r24	; 61
     542:	0d b7       	in	r16, 0x3d	; 61
     544:	1e b7       	in	r17, 0x3e	; 62
     546:	0f 5f       	subi	r16, 0xFF	; 255
     548:	1f 4f       	sbci	r17, 0xFF	; 255

			/* Read in the pipe data to the temporary buffer */
			Pipe_Read_Stream_LE(Buffer, BufferLength, NULL);
     54a:	c8 01       	movw	r24, r16
     54c:	b6 01       	movw	r22, r12
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	50 e0       	ldi	r21, 0x00	; 0
     552:	03 d3       	rcall	.+1542   	; 0xb5a <Pipe_Read_Stream_LE>
     554:	78 01       	movw	r14, r16
     556:	00 e0       	ldi	r16, 0x00	; 0

			/* Print out the buffer contents to the USART */
			for (uint16_t BufferByte = 0; BufferByte < BufferLength; BufferByte++)
     558:	10 e0       	ldi	r17, 0x00	; 0
     55a:	0b c0       	rjmp	.+22     	; 0x572 <CDCHost_Task+0xa2>
     55c:	60 91 46 01 	lds	r22, 0x0146
			  putchar(Buffer[BufferByte]);
     560:	70 91 47 01 	lds	r23, 0x0147
     564:	f7 01       	movw	r30, r14
     566:	81 91       	ld	r24, Z+
     568:	7f 01       	movw	r14, r30
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	39 d7       	rcall	.+3698   	; 0x13e0 <fputc>
     56e:	0f 5f       	subi	r16, 0xFF	; 255
     570:	1f 4f       	sbci	r17, 0xFF	; 255

			/* Read in the pipe data to the temporary buffer */
			Pipe_Read_Stream_LE(Buffer, BufferLength, NULL);

			/* Print out the buffer contents to the USART */
			for (uint16_t BufferByte = 0; BufferByte < BufferLength; BufferByte++)
     572:	0c 15       	cp	r16, r12
     574:	1d 05       	cpc	r17, r13
     576:	91 f7       	brne	.-28     	; 0x55c <CDCHost_Task+0x8c>
     578:	bd be       	out	0x3d, r11	; 61
     57a:	ae be       	out	0x3e, r10	; 62
     57c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     580:	8e 77       	andi	r24, 0x7E	; 126
     582:	80 93 a6 00 	sts	0x00A6, r24
     586:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     58a:	80 64       	ori	r24, 0x40	; 64
     58c:	80 93 a9 00 	sts	0x00A9, r24
     590:	83 e0       	ldi	r24, 0x03	; 3
     592:	80 93 a7 00 	sts	0x00A7, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     596:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     59a:	8f 7b       	andi	r24, 0xBF	; 191
     59c:	80 93 a9 00 	sts	0x00A9, r24
     5a0:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     5a4:	80 ff       	sbrs	r24, 0
     5a6:	05 c0       	rjmp	.+10     	; 0x5b2 <CDCHost_Task+0xe2>
	/* Select and unfreeze the notification pipe */
	Pipe_SelectPipe(CDC_NOTIFICATION_PIPE);
	Pipe_Unfreeze();

	/* Check if a packet has been received */
	if (Pipe_IsINReceived())
     5a8:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     5ac:	8e 77       	andi	r24, 0x7E	; 126
     5ae:	80 93 a6 00 	sts	0x00A6, r24
     5b2:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     5b6:	80 64       	ori	r24, 0x40	; 64
     5b8:	80 93 a9 00 	sts	0x00A9, r24
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	f8 94       	cli
		Pipe_ClearIN();
	}

	/* Freeze notification IN pipe after use */
	Pipe_Freeze();
}
     5c0:	9e be       	out	0x3e, r9	; 62
     5c2:	0f be       	out	0x3f, r0	; 63
     5c4:	8d be       	out	0x3d, r8	; 61
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	ff 90       	pop	r15
     5d0:	ef 90       	pop	r14
     5d2:	df 90       	pop	r13
     5d4:	cf 90       	pop	r12
     5d6:	bf 90       	pop	r11
     5d8:	af 90       	pop	r10
     5da:	9f 90       	pop	r9
     5dc:	8f 90       	pop	r8
     5de:	08 95       	ret

000005e0 <main>:
     5e0:	7c de       	rcall	.-776    	; 0x2da <SetupHardware>
     5e2:	88 e9       	ldi	r24, 0x98	; 152
 */
int main(void)
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "CDC Host Demo running.\r\n" ESC_FG_WHITE));
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	47 d7       	rcall	.+3726   	; 0x1476 <puts_P>
     5e8:	80 e1       	ldi	r24, 0x10	; 16
     5ea:	72 de       	rcall	.-796    	; 0x2d0 <LEDs_SetAllLEDs>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     5ec:	78 94       	sei
     5ee:	70 df       	rcall	.-288    	; 0x4d0 <CDCHost_Task>
     5f0:	b2 d6       	rcall	.+3428   	; 0x1356 <USB_USBTask>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     5f2:	fd cf       	rjmp	.-6      	; 0x5ee <main+0xe>

000005f4 <DComp_NextCDCControlInterface>:
 *  This comparator searches for the next Interface descriptor of the correct CDC control Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCControlInterface(void* CurrentDescriptor)
{
     5f4:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     5f6:	81 81       	ldd	r24, Z+1	; 0x01
     5f8:	84 30       	cpi	r24, 0x04	; 4
     5fa:	49 f4       	brne	.+18     	; 0x60e <DComp_NextCDCControlInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct control interface found */
		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
     5fc:	85 81       	ldd	r24, Z+5	; 0x05
     5fe:	82 30       	cpi	r24, 0x02	; 2
     600:	31 f4       	brne	.+12     	; 0x60e <DComp_NextCDCControlInterface+0x1a>
     602:	86 81       	ldd	r24, Z+6	; 0x06
     604:	82 30       	cpi	r24, 0x02	; 2
     606:	19 f4       	brne	.+6      	; 0x60e <DComp_NextCDCControlInterface+0x1a>
		    (Interface->SubClass == CDC_CSCP_ACMSubclass) &&
     608:	87 81       	ldd	r24, Z+7	; 0x07
     60a:	81 30       	cpi	r24, 0x01	; 1
     60c:	11 f0       	breq	.+4      	; 0x612 <DComp_NextCDCControlInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     60e:	82 e0       	ldi	r24, 0x02	; 2
     610:	08 95       	ret
		/* Check the CDC descriptor class, subclass and protocol, break out if correct control interface found */
		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
		    (Interface->SubClass == CDC_CSCP_ACMSubclass) &&
		    (Interface->Protocol == CDC_CSCP_ATCommandProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     612:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     614:	08 95       	ret

00000616 <DComp_NextCDCDataInterface>:
 *  This comparator searches for the next Interface descriptor of the correct CDC data Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCDataInterface(void* CurrentDescriptor)
{
     616:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     618:	81 81       	ldd	r24, Z+1	; 0x01
     61a:	84 30       	cpi	r24, 0x04	; 4
     61c:	49 f4       	brne	.+18     	; 0x630 <DComp_NextCDCDataInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
     61e:	85 81       	ldd	r24, Z+5	; 0x05
     620:	8a 30       	cpi	r24, 0x0A	; 10
     622:	31 f4       	brne	.+12     	; 0x630 <DComp_NextCDCDataInterface+0x1a>
     624:	86 81       	ldd	r24, Z+6	; 0x06
     626:	88 23       	and	r24, r24
     628:	19 f4       	brne	.+6      	; 0x630 <DComp_NextCDCDataInterface+0x1a>
		    (Interface->SubClass == CDC_CSCP_NoDataSubclass) &&
     62a:	87 81       	ldd	r24, Z+7	; 0x07
     62c:	88 23       	and	r24, r24
     62e:	11 f0       	breq	.+4      	; 0x634 <DComp_NextCDCDataInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     630:	82 e0       	ldi	r24, 0x02	; 2
     632:	08 95       	ret
		/* Check the CDC descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
		    (Interface->SubClass == CDC_CSCP_NoDataSubclass) &&
		    (Interface->Protocol == CDC_CSCP_NoDataProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     634:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     636:	08 95       	ret

00000638 <DComp_NextCDCDataInterfaceEndpoint>:
 *  using a different comparator to determine if it is another CDC class interface).
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCDataInterfaceEndpoint(void* CurrentDescriptor)
{
     638:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     63a:	81 81       	ldd	r24, Z+1	; 0x01
     63c:	85 30       	cpi	r24, 0x05	; 5
     63e:	49 f4       	brne	.+18     	; 0x652 <DComp_NextCDCDataInterfaceEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) ||
     640:	83 81       	ldd	r24, Z+3	; 0x03
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	83 70       	andi	r24, 0x03	; 3
     646:	90 70       	andi	r25, 0x00	; 0
     648:	02 97       	sbiw	r24, 0x02	; 2
     64a:	82 30       	cpi	r24, 0x02	; 2
     64c:	91 05       	cpc	r25, r1
     64e:	18 f4       	brcc	.+6      	; 0x656 <DComp_NextCDCDataInterfaceEndpoint+0x1e>
     650:	04 c0       	rjmp	.+8      	; 0x65a <DComp_NextCDCDataInterfaceEndpoint+0x22>
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
     652:	84 30       	cpi	r24, 0x04	; 4
     654:	21 f0       	breq	.+8      	; 0x65e <DComp_NextCDCDataInterfaceEndpoint+0x26>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
     656:	82 e0       	ldi	r24, 0x02	; 2
     658:	08 95       	ret
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) ||
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	08 95       	ret
		}
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
     65e:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     660:	08 95       	ret

00000662 <ProcessConfigurationDescriptor>:
 *  This routine searches for a CDC interface descriptor containing bulk data IN and OUT endpoints, and an interrupt event endpoint.
 *
 *  \return An error code from the \ref CDCHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     662:	8f 92       	push	r8
     664:	9f 92       	push	r9
     666:	af 92       	push	r10
     668:	bf 92       	push	r11
     66a:	cf 92       	push	r12
     66c:	df 92       	push	r13
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	c4 50       	subi	r28, 0x04	; 4
     680:	d2 40       	sbci	r29, 0x02	; 2
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     68c:	ae 01       	movw	r20, r28
     68e:	4b 5f       	subi	r20, 0xFB	; 251
     690:	5f 4f       	sbci	r21, 0xFF	; 255
     692:	5c 83       	std	Y+4, r21	; 0x04
     694:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	7e 01       	movw	r14, r28
     69a:	08 94       	sec
     69c:	e1 1c       	adc	r14, r1
     69e:	f1 1c       	adc	r15, r1
     6a0:	b7 01       	movw	r22, r14
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	32 e0       	ldi	r19, 0x02	; 2
     6a6:	6d d4       	rcall	.+2266   	; 0xf82 <USB_Host_GetDeviceConfigDescriptor>
     6a8:	85 30       	cpi	r24, 0x05	; 5
     6aa:	09 f4       	brne	.+2      	; 0x6ae <ProcessConfigurationDescriptor+0x4c>
     6ac:	6b c0       	rjmp	.+214    	; 0x784 <ProcessConfigurationDescriptor+0x122>
     6ae:	86 30       	cpi	r24, 0x06	; 6
     6b0:	19 f0       	breq	.+6      	; 0x6b8 <ProcessConfigurationDescriptor+0x56>
     6b2:	88 23       	and	r24, r24
     6b4:	29 f0       	breq	.+10     	; 0x6c0 <ProcessConfigurationDescriptor+0x5e>
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <ProcessConfigurationDescriptor+0x5a>
     6b8:	83 e0       	ldi	r24, 0x03	; 3
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     6ba:	67 c0       	rjmp	.+206    	; 0x78a <ProcessConfigurationDescriptor+0x128>
     6bc:	81 e0       	ldi	r24, 0x01	; 1
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     6be:	65 c0       	rjmp	.+202    	; 0x78a <ProcessConfigurationDescriptor+0x128>
     6c0:	cc 24       	eor	r12, r12
	USB_Descriptor_Endpoint_t*  DataINEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     6c2:	dd 24       	eor	r13, r13
     6c4:	aa 24       	eor	r10, r10
     6c6:	bb 24       	eor	r11, r11
     6c8:	00 e0       	ldi	r16, 0x00	; 0
     6ca:	10 e0       	ldi	r17, 0x00	; 0
     6cc:	88 24       	eor	r8, r8
     6ce:	99 24       	eor	r9, r9
     6d0:	81 14       	cp	r8, r1
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(CDCControlInterface) ||
     6d2:	91 04       	cpc	r9, r1
     6d4:	49 f0       	breq	.+18     	; 0x6e8 <ProcessConfigurationDescriptor+0x86>
     6d6:	c7 01       	movw	r24, r14
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     6d8:	be 01       	movw	r22, r28
     6da:	6d 5f       	subi	r22, 0xFD	; 253
     6dc:	7f 4f       	sbci	r23, 0xFF	; 255
     6de:	4c e1       	ldi	r20, 0x1C	; 28
     6e0:	53 e0       	ldi	r21, 0x03	; 3
     6e2:	a6 d4       	rcall	.+2380   	; 0x1030 <USB_GetNextDescriptorComp>
     6e4:	88 23       	and	r24, r24
     6e6:	d1 f0       	breq	.+52     	; 0x71c <ProcessConfigurationDescriptor+0xba>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(CDCControlInterface) ||
     6e8:	c7 01       	movw	r24, r14
     6ea:	be 01       	movw	r22, r28
		{
			/* Check if we have already found the control interface's notification endpoint or not */
			if (NotificationEndpoint)
			{
				/* Get the next CDC data interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     6ec:	6d 5f       	subi	r22, 0xFD	; 253
     6ee:	7f 4f       	sbci	r23, 0xFF	; 255
     6f0:	c1 14       	cp	r12, r1
     6f2:	d1 04       	cpc	r13, r1
		if (!(CDCControlInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextCDCDataInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Check if we have already found the control interface's notification endpoint or not */
			if (NotificationEndpoint)
     6f4:	59 f0       	breq	.+22     	; 0x70c <ProcessConfigurationDescriptor+0xaa>
     6f6:	4b e0       	ldi	r20, 0x0B	; 11
     6f8:	53 e0       	ldi	r21, 0x03	; 3
			{
				/* Get the next CDC data interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     6fa:	9a d4       	rcall	.+2356   	; 0x1030 <USB_GetNextDescriptorComp>
     6fc:	88 23       	and	r24, r24
     6fe:	09 f0       	breq	.+2      	; 0x702 <ProcessConfigurationDescriptor+0xa0>
     700:	43 c0       	rjmp	.+134    	; 0x788 <ProcessConfigurationDescriptor+0x126>
     702:	aa 24       	eor	r10, r10
     704:	bb 24       	eor	r11, r11
     706:	00 e0       	ldi	r16, 0x00	; 0
					return NoCompatibleInterfaceFound;
				}

				/* Clear any found endpoints */
				DataINEndpoint       = NULL;
				DataOUTEndpoint      = NULL;
     708:	10 e0       	ldi	r17, 0x00	; 0
     70a:	e2 cf       	rjmp	.-60     	; 0x6d0 <ProcessConfigurationDescriptor+0x6e>
		{
			/* Check if we have already found the control interface's notification endpoint or not */
			if (NotificationEndpoint)
			{
				/* Get the next CDC data interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     70c:	4a ef       	ldi	r20, 0xFA	; 250
     70e:	52 e0       	ldi	r21, 0x02	; 2
     710:	8f d4       	rcall	.+2334   	; 0x1030 <USB_GetNextDescriptorComp>
				DataOUTEndpoint      = NULL;
			}
			else
			{
				/* Get the next CDC control interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     712:	88 23       	and	r24, r24
     714:	c9 f5       	brne	.+114    	; 0x788 <ProcessConfigurationDescriptor+0x126>
     716:	8b 80       	ldd	r8, Y+3	; 0x03
     718:	9c 80       	ldd	r9, Y+4	; 0x04
     71a:	0e c0       	rjmp	.+28     	; 0x738 <ProcessConfigurationDescriptor+0xd6>
     71c:	eb 81       	ldd	r30, Y+3	; 0x03
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Save the interface in case we need to refer back to it later */
				CDCControlInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     71e:	fc 81       	ldd	r31, Y+4	; 0x04
     720:	82 81       	ldd	r24, Z+2	; 0x02
     722:	87 ff       	sbrs	r24, 7
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     724:	06 c0       	rjmp	.+12     	; 0x732 <ProcessConfigurationDescriptor+0xd0>
     726:	83 81       	ldd	r24, Z+3	; 0x03

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     728:	83 70       	andi	r24, 0x03	; 3
     72a:	83 30       	cpi	r24, 0x03	; 3
     72c:	21 f4       	brne	.+8      	; 0x736 <ProcessConfigurationDescriptor+0xd4>
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
     72e:	6f 01       	movw	r12, r30
     730:	03 c0       	rjmp	.+6      	; 0x738 <ProcessConfigurationDescriptor+0xd6>
     732:	5f 01       	movw	r10, r30
     734:	01 c0       	rjmp	.+2      	; 0x738 <ProcessConfigurationDescriptor+0xd6>
			  NotificationEndpoint = EndpointData;
     736:	8f 01       	movw	r16, r30
     738:	01 15       	cp	r16, r1
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
     73a:	11 05       	cpc	r17, r1
     73c:	49 f2       	breq	.-110    	; 0x6d0 <ProcessConfigurationDescriptor+0x6e>
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  NotificationEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
     73e:	a1 14       	cp	r10, r1
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
     740:	b1 04       	cpc	r11, r1
     742:	31 f2       	breq	.-116    	; 0x6d0 <ProcessConfigurationDescriptor+0x6e>
     744:	c1 14       	cp	r12, r1
     746:	d1 04       	cpc	r13, r1
     748:	09 f4       	brne	.+2      	; 0x74c <ProcessConfigurationDescriptor+0xea>
     74a:	c2 cf       	rjmp	.-124    	; 0x6d0 <ProcessConfigurationDescriptor+0x6e>
     74c:	f8 01       	movw	r30, r16
     74e:	24 81       	ldd	r18, Z+4	; 0x04
     750:	35 81       	ldd	r19, Z+5	; 0x05
     752:	81 e8       	ldi	r24, 0x81	; 129
			DataOUTEndpoint = EndpointData;
		}
	}

	/* Configure the CDC data IN pipe */
	Pipe_ConfigurePipe(CDC_DATA_IN_PIPE, EP_TYPE_BULK, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     754:	62 e0       	ldi	r22, 0x02	; 2
     756:	42 81       	ldd	r20, Z+2	; 0x02
     758:	01 e0       	ldi	r16, 0x01	; 1
     75a:	56 d2       	rcall	.+1196   	; 0xc08 <Pipe_ConfigurePipe>
     75c:	f5 01       	movw	r30, r10
     75e:	24 81       	ldd	r18, Z+4	; 0x04
     760:	35 81       	ldd	r19, Z+5	; 0x05
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	62 e0       	ldi	r22, 0x02	; 2

	/* Configure the CDC data OUT pipe */
	Pipe_ConfigurePipe(CDC_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);
     766:	42 81       	ldd	r20, Z+2	; 0x02
     768:	4f d2       	rcall	.+1182   	; 0xc08 <Pipe_ConfigurePipe>
     76a:	f6 01       	movw	r30, r12
     76c:	24 81       	ldd	r18, Z+4	; 0x04
     76e:	35 81       	ldd	r19, Z+5	; 0x05
     770:	83 e8       	ldi	r24, 0x83	; 131
     772:	63 e0       	ldi	r22, 0x03	; 3
     774:	42 81       	ldd	r20, Z+2	; 0x02

	/* Configure the CDC notification pipe */
	Pipe_ConfigurePipe(CDC_NOTIFICATION_PIPE, EP_TYPE_INTERRUPT, NotificationEndpoint->EndpointAddress, NotificationEndpoint->EndpointSize, 1);
     776:	48 d2       	rcall	.+1168   	; 0xc08 <Pipe_ConfigurePipe>
     778:	f6 01       	movw	r30, r12
     77a:	86 81       	ldd	r24, Z+6	; 0x06
     77c:	80 93 ad 00 	sts	0x00AD, r24
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	03 c0       	rjmp	.+6      	; 0x78a <ProcessConfigurationDescriptor+0x128>
     784:	82 e0       	ldi	r24, 0x02	; 2
	Pipe_SetInterruptPeriod(NotificationEndpoint->PollingIntervalMS);
     786:	01 c0       	rjmp	.+2      	; 0x78a <ProcessConfigurationDescriptor+0x128>
     788:	84 e0       	ldi	r24, 0x04	; 4
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     78a:	cc 5f       	subi	r28, 0xFC	; 252
     78c:	dd 4f       	sbci	r29, 0xFD	; 253

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	f8 94       	cli
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     792:	de bf       	out	0x3e, r29	; 62
     794:	0f be       	out	0x3f, r0	; 63
				/* Get the next CDC control interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
											  DComp_NextCDCControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
     796:	cd bf       	out	0x3d, r28	; 61
	Pipe_ConfigurePipe(CDC_NOTIFICATION_PIPE, EP_TYPE_INTERRUPT, NotificationEndpoint->EndpointAddress, NotificationEndpoint->EndpointSize, 1);
	Pipe_SetInterruptPeriod(NotificationEndpoint->PollingIntervalMS);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
     7a6:	cf 90       	pop	r12
     7a8:	bf 90       	pop	r11
     7aa:	af 90       	pop	r10
     7ac:	9f 90       	pop	r9
     7ae:	8f 90       	pop	r8
     7b0:	08 95       	ret

000007b2 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     7b2:	80 91 9e 00 	lds	r24, 0x009E
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	81 70       	andi	r24, 0x01	; 1
     7ba:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     7bc:	20 91 a0 00 	lds	r18, 0x00A0
     7c0:	2d 7f       	andi	r18, 0xFD	; 253
     7c2:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     7c6:	20 91 9e 00 	lds	r18, 0x009E
     7ca:	22 60       	ori	r18, 0x02	; 2
     7cc:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     7d0:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     7d4:	21 fd       	sbrc	r18, 1
     7d6:	fc cf       	rjmp	.-8      	; 0x7d0 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7d8:	20 91 9e 00 	lds	r18, 0x009E
     7dc:	21 60       	ori	r18, 0x01	; 1
     7de:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     7e2:	10 92 2b 01 	sts	0x012B, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     7e6:	20 91 a0 00 	lds	r18, 0x00A0
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	20 72       	andi	r18, 0x20	; 32
     7ee:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     7f0:	40 91 a0 00 	lds	r20, 0x00A0
     7f4:	4f 7d       	andi	r20, 0xDF	; 223
     7f6:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7fa:	40 91 9f 00 	lds	r20, 0x009F
     7fe:	4f 7d       	andi	r20, 0xDF	; 223
     800:	40 93 9f 00 	sts	0x009F, r20
     804:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     806:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     80a:	55 ff       	sbrs	r21, 5
     80c:	0b c0       	rjmp	.+22     	; 0x824 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     80e:	40 91 9f 00 	lds	r20, 0x009F
     812:	4f 7d       	andi	r20, 0xDF	; 223
     814:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     818:	40 91 9f 00 	lds	r20, 0x009F
     81c:	4d 7f       	andi	r20, 0xFD	; 253
     81e:	40 93 9f 00 	sts	0x009F, r20
     822:	08 c0       	rjmp	.+16     	; 0x834 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     824:	ef ec       	ldi	r30, 0xCF	; 207
     826:	f7 e0       	ldi	r31, 0x07	; 7
     828:	31 97       	sbiw	r30, 0x01	; 1
     82a:	f1 f7       	brne	.-4      	; 0x828 <USB_Host_ResetDevice+0x76>
     82c:	00 c0       	rjmp	.+0      	; 0x82e <USB_Host_ResetDevice+0x7c>
     82e:	00 00       	nop
     830:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     832:	49 f7       	brne	.-46     	; 0x806 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     834:	21 15       	cp	r18, r1
     836:	31 05       	cpc	r19, r1
     838:	29 f0       	breq	.+10     	; 0x844 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     83a:	20 91 a0 00 	lds	r18, 0x00A0
     83e:	20 62       	ori	r18, 0x20	; 32
     840:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     844:	00 97       	sbiw	r24, 0x00	; 0
     846:	29 f4       	brne	.+10     	; 0x852 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     848:	80 91 9e 00 	lds	r24, 0x009E
     84c:	8e 7f       	andi	r24, 0xFE	; 254
     84e:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     852:	80 91 a0 00 	lds	r24, 0x00A0
     856:	82 60       	ori	r24, 0x02	; 2
     858:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     85c:	08 95       	ret

0000085e <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     85e:	40 91 9e 00 	lds	r20, 0x009E
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	41 70       	andi	r20, 0x01	; 1
     866:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     868:	20 91 a0 00 	lds	r18, 0x00A0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	20 72       	andi	r18, 0x20	; 32
     870:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     872:	90 91 a0 00 	lds	r25, 0x00A0
     876:	9f 7d       	andi	r25, 0xDF	; 223
     878:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     87c:	90 91 9f 00 	lds	r25, 0x009F
     880:	9f 7d       	andi	r25, 0xDF	; 223
     882:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     886:	90 91 9e 00 	lds	r25, 0x009E
     88a:	91 60       	ori	r25, 0x01	; 1
     88c:	90 93 9e 00 	sts	0x009E, r25
     890:	26 c0       	rjmp	.+76     	; 0x8de <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     892:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     896:	95 ff       	sbrs	r25, 5
     898:	06 c0       	rjmp	.+12     	; 0x8a6 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     89a:	90 91 9f 00 	lds	r25, 0x009F
     89e:	9f 7d       	andi	r25, 0xDF	; 223
     8a0:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     8a4:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     8a6:	90 91 35 01 	lds	r25, 0x0135
     8aa:	91 30       	cpi	r25, 0x01	; 1
     8ac:	d9 f0       	breq	.+54     	; 0x8e4 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     8ae:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     8b2:	94 ff       	sbrs	r25, 4
     8b4:	09 c0       	rjmp	.+18     	; 0x8c8 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     8b6:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     8ba:	80 91 a6 00 	lds	r24, 0x00A6
     8be:	8f 7e       	andi	r24, 0xEF	; 239
     8c0:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     8c4:	82 e0       	ldi	r24, 0x02	; 2

			break;
     8c6:	0f c0       	rjmp	.+30     	; 0x8e6 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     8c8:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     8cc:	91 ff       	sbrs	r25, 1
     8ce:	07 c0       	rjmp	.+14     	; 0x8de <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     8d0:	80 91 a6 00 	lds	r24, 0x00A6
     8d4:	8d 7f       	andi	r24, 0xFD	; 253
     8d6:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     8da:	83 e0       	ldi	r24, 0x03	; 3

			break;
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     8de:	88 23       	and	r24, r24
     8e0:	c1 f6       	brne	.-80     	; 0x892 <USB_Host_WaitMS+0x34>
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     8e4:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     8e6:	41 15       	cp	r20, r1
     8e8:	51 05       	cpc	r21, r1
     8ea:	29 f4       	brne	.+10     	; 0x8f6 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     8ec:	90 91 9e 00 	lds	r25, 0x009E
     8f0:	9e 7f       	andi	r25, 0xFE	; 254
     8f2:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     8f6:	21 15       	cp	r18, r1
     8f8:	31 05       	cpc	r19, r1
     8fa:	29 f0       	breq	.+10     	; 0x906 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     8fc:	90 91 a0 00 	lds	r25, 0x00A0
     900:	90 62       	ori	r25, 0x20	; 32
     902:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     906:	08 95       	ret

00000908 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	de b7       	in	r29, 0x3e	; 62
     914:	28 97       	sbiw	r28, 0x08	; 8
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     920:	80 91 35 01 	lds	r24, 0x0135
     924:	85 30       	cpi	r24, 0x05	; 5
     926:	09 f4       	brne	.+2      	; 0x92a <USB_Host_ProcessNextHostState+0x22>
     928:	99 c0       	rjmp	.+306    	; 0xa5c <USB_Host_ProcessNextHostState+0x154>
     92a:	86 30       	cpi	r24, 0x06	; 6
     92c:	68 f4       	brcc	.+26     	; 0x948 <USB_Host_ProcessNextHostState+0x40>
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	c1 f1       	breq	.+112    	; 0x9a2 <USB_Host_ProcessNextHostState+0x9a>
     932:	83 30       	cpi	r24, 0x03	; 3
     934:	18 f4       	brcc	.+6      	; 0x93c <USB_Host_ProcessNextHostState+0x34>
     936:	88 23       	and	r24, r24
     938:	a1 f0       	breq	.+40     	; 0x962 <USB_Host_ProcessNextHostState+0x5a>
     93a:	04 c1       	rjmp	.+520    	; 0xb44 <USB_Host_ProcessNextHostState+0x23c>
     93c:	83 30       	cpi	r24, 0x03	; 3
     93e:	d9 f1       	breq	.+118    	; 0x9b6 <USB_Host_ProcessNextHostState+0xae>
     940:	84 30       	cpi	r24, 0x04	; 4
     942:	09 f0       	breq	.+2      	; 0x946 <USB_Host_ProcessNextHostState+0x3e>
     944:	ff c0       	rjmp	.+510    	; 0xb44 <USB_Host_ProcessNextHostState+0x23c>
     946:	62 c0       	rjmp	.+196    	; 0xa0c <USB_Host_ProcessNextHostState+0x104>
     948:	87 30       	cpi	r24, 0x07	; 7
     94a:	09 f4       	brne	.+2      	; 0x94e <USB_Host_ProcessNextHostState+0x46>
     94c:	9e c0       	rjmp	.+316    	; 0xa8a <USB_Host_ProcessNextHostState+0x182>
     94e:	87 30       	cpi	r24, 0x07	; 7
     950:	08 f4       	brcc	.+2      	; 0x954 <USB_Host_ProcessNextHostState+0x4c>
     952:	8f c0       	rjmp	.+286    	; 0xa72 <USB_Host_ProcessNextHostState+0x16a>
     954:	88 30       	cpi	r24, 0x08	; 8
     956:	09 f4       	brne	.+2      	; 0x95a <USB_Host_ProcessNextHostState+0x52>
     958:	b8 c0       	rjmp	.+368    	; 0xaca <USB_Host_ProcessNextHostState+0x1c2>
     95a:	89 30       	cpi	r24, 0x09	; 9
     95c:	09 f0       	breq	.+2      	; 0x960 <USB_Host_ProcessNextHostState+0x58>
     95e:	f2 c0       	rjmp	.+484    	; 0xb44 <USB_Host_ProcessNextHostState+0x23c>
     960:	d9 c0       	rjmp	.+434    	; 0xb14 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     962:	00 91 28 01 	lds	r16, 0x0128
     966:	10 91 29 01 	lds	r17, 0x0129
     96a:	01 15       	cp	r16, r1
     96c:	11 05       	cpc	r17, r1
     96e:	09 f4       	brne	.+2      	; 0x972 <USB_Host_ProcessNextHostState+0x6a>
     970:	e9 c0       	rjmp	.+466    	; 0xb44 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	74 df       	rcall	.-280    	; 0x85e <USB_Host_WaitMS>
     976:	68 2f       	mov	r22, r24
     978:	88 23       	and	r24, r24
     97a:	31 f0       	breq	.+12     	; 0x988 <USB_Host_ProcessNextHostState+0x80>
     97c:	80 91 2a 01 	lds	r24, 0x012A
				{
					USB_HostState = PostWaitState;
     980:	80 93 35 01 	sts	0x0135, r24
     984:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     986:	d2 c0       	rjmp	.+420    	; 0xb2c <USB_Host_ProcessNextHostState+0x224>
					break;
     988:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
     98a:	10 40       	sbci	r17, 0x00	; 0
     98c:	10 93 29 01 	sts	0x0129, r17
     990:	00 93 28 01 	sts	0x0128, r16
     994:	01 15       	cp	r16, r1
     996:	11 05       	cpc	r17, r1
     998:	09 f0       	breq	.+2      	; 0x99c <USB_Host_ProcessNextHostState+0x94>
     99a:	d4 c0       	rjmp	.+424    	; 0xb44 <USB_Host_ProcessNextHostState+0x23c>
     99c:	80 91 2a 01 	lds	r24, 0x012A
				  USB_HostState = PostWaitState;
     9a0:	07 c0       	rjmp	.+14     	; 0x9b0 <USB_Host_ProcessNextHostState+0xa8>
     9a2:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     9a4:	93 e0       	ldi	r25, 0x03	; 3
     9a6:	90 93 29 01 	sts	0x0129, r25
     9aa:	80 93 28 01 	sts	0x0128, r24
     9ae:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     9b0:	80 93 35 01 	sts	0x0135, r24
     9b4:	c7 c0       	rjmp	.+398    	; 0xb44 <USB_Host_ProcessNextHostState+0x23c>
			break;
     9b6:	80 91 28 01 	lds	r24, 0x0128
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     9ba:	90 91 29 01 	lds	r25, 0x0129
     9be:	9c 01       	movw	r18, r24
     9c0:	21 50       	subi	r18, 0x01	; 1
     9c2:	30 40       	sbci	r19, 0x00	; 0
     9c4:	30 93 29 01 	sts	0x0129, r19
     9c8:	20 93 28 01 	sts	0x0128, r18
     9cc:	00 97       	sbiw	r24, 0x00	; 0
     9ce:	39 f0       	breq	.+14     	; 0x9de <USB_Host_ProcessNextHostState+0xd6>
     9d0:	8f ec       	ldi	r24, 0xCF	; 207
     9d2:	97 e0       	ldi	r25, 0x07	; 7
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	f1 f7       	brne	.-4      	; 0x9d4 <USB_Host_ProcessNextHostState+0xcc>
     9d8:	00 c0       	rjmp	.+0      	; 0x9da <USB_Host_ProcessNextHostState+0xd2>
     9da:	00 00       	nop
     9dc:	b3 c0       	rjmp	.+358    	; 0xb44 <USB_Host_ProcessNextHostState+0x23c>
     9de:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     9e0:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     9e4:	80 61       	ori	r24, 0x10	; 16
     9e6:	80 93 d8 00 	sts	0x00D8, r24
     9ea:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     9ee:	8b 7f       	andi	r24, 0xFB	; 251
     9f0:	80 93 dd 00 	sts	0x00DD, r24
     9f4:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     9f8:	80 61       	ori	r24, 0x10	; 16
     9fa:	80 93 d7 00 	sts	0x00D7, r24
     9fe:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     a02:	82 60       	ori	r24, 0x02	; 2
     a04:	80 93 dd 00 	sts	0x00DD, r24
     a08:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     a0a:	d2 cf       	rjmp	.-92     	; 0x9b0 <USB_Host_ProcessNextHostState+0xa8>
     a0c:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     a10:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     a12:	98 c0       	rjmp	.+304    	; 0xb44 <USB_Host_ProcessNextHostState+0x23c>
     a14:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     a18:	8e 7f       	andi	r24, 0xFE	; 254
     a1a:	80 93 9f 00 	sts	0x009F, r24
     a1e:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     a22:	8d 7f       	andi	r24, 0xFD	; 253
     a24:	80 93 9f 00 	sts	0x009F, r24
     a28:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     a2c:	8d 7f       	andi	r24, 0xFD	; 253
     a2e:	80 93 df 00 	sts	0x00DF, r24
     a32:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     a36:	82 60       	ori	r24, 0x02	; 2
     a38:	80 93 de 00 	sts	0x00DE, r24
     a3c:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a40:	81 60       	ori	r24, 0x01	; 1
     a42:	80 93 9e 00 	sts	0x009E, r24
     a46:	45 d1       	rcall	.+650    	; 0xcd2 <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     a48:	10 92 35 01 	sts	0x0135, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     a4c:	84 e6       	ldi	r24, 0x64	; 100
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	90 93 29 01 	sts	0x0129, r25
     a54:	80 93 28 01 	sts	0x0128, r24
     a58:	85 e0       	ldi	r24, 0x05	; 5
     a5a:	59 c0       	rjmp	.+178    	; 0xb0e <USB_Host_ProcessNextHostState+0x206>
     a5c:	aa de       	rcall	.-684    	; 0x7b2 <USB_Host_ResetDevice>
     a5e:	10 92 35 01 	sts	0x0135, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     a62:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	90 93 29 01 	sts	0x0129, r25
     a6a:	80 93 28 01 	sts	0x0128, r24
     a6e:	86 e0       	ldi	r24, 0x06	; 6
     a70:	4e c0       	rjmp	.+156    	; 0xb0e <USB_Host_ProcessNextHostState+0x206>
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     a78:	20 e4       	ldi	r18, 0x40	; 64
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	01 e0       	ldi	r16, 0x01	; 1
     a7e:	c4 d0       	rcall	.+392    	; 0xc08 <Pipe_ConfigurePipe>
     a80:	88 23       	and	r24, r24
     a82:	09 f4       	brne	.+2      	; 0xa86 <USB_Host_ProcessNextHostState+0x17e>
     a84:	4f c0       	rjmp	.+158    	; 0xb24 <USB_Host_ProcessNextHostState+0x21c>
     a86:	87 e0       	ldi	r24, 0x07	; 7
     a88:	93 cf       	rjmp	.-218    	; 0x9b0 <USB_Host_ProcessNextHostState+0xa8>
     a8a:	ad e2       	ldi	r26, 0x2D	; 45
     a8c:	b1 e0       	ldi	r27, 0x01	; 1
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     a8e:	ef e0       	ldi	r30, 0x0F	; 15
     a90:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     a92:	88 e0       	ldi	r24, 0x08	; 8
     a94:	01 90       	ld	r0, Z+
     a96:	0d 92       	st	X+, r0
     a98:	81 50       	subi	r24, 0x01	; 1
     a9a:	e1 f7       	brne	.-8      	; 0xa94 <USB_Host_ProcessNextHostState+0x18c>
     a9c:	10 92 a7 00 	sts	0x00A7, r1
     aa0:	ce 01       	movw	r24, r28
     aa2:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     aa4:	35 d3       	rcall	.+1642   	; 0x1110 <USB_Host_SendControlRequest>
     aa6:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     aa8:	88 23       	and	r24, r24
     aaa:	09 f0       	breq	.+2      	; 0xaae <USB_Host_ProcessNextHostState+0x1a6>
     aac:	3e c0       	rjmp	.+124    	; 0xb2a <USB_Host_ProcessNextHostState+0x222>
     aae:	88 85       	ldd	r24, Y+8	; 0x08
     ab0:	80 93 1f 01 	sts	0x011F, r24
     ab4:	7e de       	rcall	.-772    	; 0x7b2 <USB_Host_ResetDevice>
     ab6:	10 92 35 01 	sts	0x0135, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     aba:	88 ec       	ldi	r24, 0xC8	; 200
     abc:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
     abe:	90 93 29 01 	sts	0x0129, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     ac2:	80 93 28 01 	sts	0x0128, r24
     ac6:	88 e0       	ldi	r24, 0x08	; 8
     ac8:	22 c0       	rjmp	.+68     	; 0xb0e <USB_Host_ProcessNextHostState+0x206>
     aca:	20 91 1f 01 	lds	r18, 0x011F
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	40 e0       	ldi	r20, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     ad6:	01 e0       	ldi	r16, 0x01	; 1
     ad8:	97 d0       	rcall	.+302    	; 0xc08 <Pipe_ConfigurePipe>
     ada:	88 23       	and	r24, r24
     adc:	19 f1       	breq	.+70     	; 0xb24 <USB_Host_ProcessNextHostState+0x21c>
     ade:	ad e2       	ldi	r26, 0x2D	; 45
     ae0:	b1 e0       	ldi	r27, 0x01	; 1
     ae2:	e7 e1       	ldi	r30, 0x17	; 23
     ae4:	f1 e0       	ldi	r31, 0x01	; 1
     ae6:	88 e0       	ldi	r24, 0x08	; 8
     ae8:	01 90       	ld	r0, Z+
     aea:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     aec:	81 50       	subi	r24, 0x01	; 1
     aee:	e1 f7       	brne	.-8      	; 0xae8 <USB_Host_ProcessNextHostState+0x1e0>
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	0d d3       	rcall	.+1562   	; 0x1110 <USB_Host_SendControlRequest>
     af6:	68 2f       	mov	r22, r24
     af8:	88 23       	and	r24, r24
     afa:	b9 f4       	brne	.+46     	; 0xb2a <USB_Host_ProcessNextHostState+0x222>
     afc:	10 92 35 01 	sts	0x0135, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     b00:	84 e6       	ldi	r24, 0x64	; 100
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	90 93 29 01 	sts	0x0129, r25
     b08:	80 93 28 01 	sts	0x0128, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     b0c:	89 e0       	ldi	r24, 0x09	; 9
     b0e:	80 93 2a 01 	sts	0x012A, r24
     b12:	18 c0       	rjmp	.+48     	; 0xb44 <USB_Host_ProcessNextHostState+0x23c>
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	80 93 a1 00 	sts	0x00A1, r24
     b1a:	8a e0       	ldi	r24, 0x0A	; 10
     b1c:	80 93 35 01 	sts	0x0135, r24
     b20:	16 dc       	rcall	.-2004   	; 0x34e <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     b22:	10 c0       	rjmp	.+32     	; 0xb44 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	84 e0       	ldi	r24, 0x04	; 4
     b28:	01 c0       	rjmp	.+2      	; 0xb2c <USB_Host_ProcessNextHostState+0x224>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     b2a:	83 e0       	ldi	r24, 0x03	; 3
     b2c:	90 91 35 01 	lds	r25, 0x0135

			EVENT_USB_Host_DeviceEnumerationComplete();
     b30:	91 30       	cpi	r25, 0x01	; 1
     b32:	41 f0       	breq	.+16     	; 0xb44 <USB_Host_ProcessNextHostState+0x23c>
			break;
     b34:	a5 dc       	rcall	.-1718   	; 0x480 <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     b36:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     b3a:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     b3c:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     b40:	00 dc       	rcall	.-2048   	; 0x342 <EVENT_USB_Host_DeviceUnattached>
     b42:	21 d1       	rcall	.+578    	; 0xd86 <USB_ResetInterface>
     b44:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     b54:	1f 91       	pop	r17
     b56:	0f 91       	pop	r16

		USB_ResetInterface();
     b58:	08 95       	ret

00000b5a <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     b5a:	af 92       	push	r10
     b5c:	bf 92       	push	r11
     b5e:	cf 92       	push	r12
     b60:	df 92       	push	r13
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	5c 01       	movw	r10, r24
     b6e:	eb 01       	movw	r28, r22
     b70:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     b72:	80 91 aa 00 	lds	r24, 0x00AA
     b76:	8f 7c       	andi	r24, 0xCF	; 207
     b78:	80 61       	ori	r24, 0x10	; 16
     b7a:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     b7e:	bd d0       	rcall	.+378    	; 0xcfa <Pipe_WaitUntilReady>
     b80:	f8 2e       	mov	r15, r24
     b82:	88 23       	and	r24, r24
     b84:	b1 f5       	brne	.+108    	; 0xbf2 <Pipe_Read_Stream_LE+0x98>
     b86:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     b88:	d1 04       	cpc	r13, r1
     b8a:	41 f0       	breq	.+16     	; 0xb9c <Pipe_Read_Stream_LE+0x42>
     b8c:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     b8e:	00 81       	ld	r16, Z
     b90:	11 81       	ldd	r17, Z+1	; 0x01
     b92:	c0 1b       	sub	r28, r16
     b94:	d1 0b       	sbc	r29, r17
     b96:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     b98:	1b 1d       	adc	r17, r11
     b9a:	01 c0       	rjmp	.+2      	; 0xb9e <Pipe_Read_Stream_LE+0x44>
     b9c:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     b9e:	aa 24       	eor	r10, r10
     ba0:	bb 24       	eor	r11, r11
     ba2:	23 c0       	rjmp	.+70     	; 0xbea <Pipe_Read_Stream_LE+0x90>
     ba4:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     ba8:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     baa:	16 c0       	rjmp	.+44     	; 0xbd8 <Pipe_Read_Stream_LE+0x7e>
     bac:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     bb0:	8e 77       	andi	r24, 0x7E	; 126
     bb2:	80 93 a6 00 	sts	0x00A6, r24
     bb6:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     bb8:	d1 04       	cpc	r13, r1
     bba:	51 f0       	breq	.+20     	; 0xbd0 <Pipe_Read_Stream_LE+0x76>
     bbc:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     bbe:	80 81       	ld	r24, Z
     bc0:	91 81       	ldd	r25, Z+1	; 0x01
     bc2:	8a 0d       	add	r24, r10
     bc4:	9b 1d       	adc	r25, r11
     bc6:	91 83       	std	Z+1, r25	; 0x01
     bc8:	80 83       	st	Z, r24
     bca:	64 e0       	ldi	r22, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     bcc:	f6 2e       	mov	r15, r22
     bce:	11 c0       	rjmp	.+34     	; 0xbf2 <Pipe_Read_Stream_LE+0x98>
     bd0:	94 d0       	rcall	.+296    	; 0xcfa <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     bd2:	88 23       	and	r24, r24
     bd4:	51 f0       	breq	.+20     	; 0xbea <Pipe_Read_Stream_LE+0x90>
     bd6:	0c c0       	rjmp	.+24     	; 0xbf0 <Pipe_Read_Stream_LE+0x96>
     bd8:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     bdc:	f8 01       	movw	r30, r16
     bde:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     be0:	8f 01       	movw	r16, r30
     be2:	21 97       	sbiw	r28, 0x01	; 1
     be4:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     be6:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     be8:	b1 1c       	adc	r11, r1
     bea:	20 97       	sbiw	r28, 0x00	; 0
     bec:	d9 f6       	brne	.-74     	; 0xba4 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     bee:	01 c0       	rjmp	.+2      	; 0xbf2 <Pipe_Read_Stream_LE+0x98>
     bf0:	f8 2e       	mov	r15, r24
     bf2:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     bf4:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     bf6:	cf 91       	pop	r28
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	ff 90       	pop	r15
     bfe:	df 90       	pop	r13
     c00:	cf 90       	pop	r12
     c02:	bf 90       	pop	r11
     c04:	af 90       	pop	r10
     c06:	08 95       	ret

00000c08 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     c08:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     c0a:	58 2f       	mov	r21, r24
     c0c:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     c0e:	87 ff       	sbrs	r24, 7
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <Pipe_ConfigurePipe+0xe>
     c12:	80 e1       	ldi	r24, 0x10	; 16
     c14:	01 c0       	rjmp	.+2      	; 0xc18 <Pipe_ConfigurePipe+0x10>
     c16:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     c18:	57 30       	cpi	r21, 0x07	; 7
     c1a:	08 f0       	brcs	.+2      	; 0xc1e <Pipe_ConfigurePipe+0x16>
     c1c:	57 c0       	rjmp	.+174    	; 0xccc <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     c1e:	66 23       	and	r22, r22
     c20:	09 f4       	brne	.+2      	; 0xc24 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     c22:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     c24:	4f 70       	andi	r20, 0x0F	; 15
     c26:	62 95       	swap	r22
     c28:	66 0f       	add	r22, r22
     c2a:	66 0f       	add	r22, r22
     c2c:	60 7c       	andi	r22, 0xC0	; 192
     c2e:	64 2b       	or	r22, r20
     c30:	68 2b       	or	r22, r24
     c32:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     c34:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c36:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     c3a:	45 17       	cp	r20, r21
     c3c:	a9 f4       	brne	.+42     	; 0xc68 <Pipe_ConfigurePipe+0x60>
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     c40:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	03 c0       	rjmp	.+6      	; 0xc4e <Pipe_ConfigurePipe+0x46>
     c48:	88 e0       	ldi	r24, 0x08	; 8
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     c4e:	82 17       	cp	r24, r18
     c50:	93 07       	cpc	r25, r19
     c52:	10 f4       	brcc	.+4      	; 0xc58 <Pipe_ConfigurePipe+0x50>
     c54:	75 30       	cpi	r23, 0x05	; 5
     c56:	a1 f7       	brne	.-24     	; 0xc40 <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     c58:	87 2f       	mov	r24, r23
     c5a:	82 95       	swap	r24
     c5c:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     c5e:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     c60:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     c62:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     c64:	e0 e0       	ldi	r30, 0x00	; 0
     c66:	08 c0       	rjmp	.+16     	; 0xc78 <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     c68:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     c6c:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     c70:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     c74:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     c78:	81 ff       	sbrs	r24, 1
     c7a:	20 c0       	rjmp	.+64     	; 0xcbc <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     c7c:	90 91 a9 00 	lds	r25, 0x00A9
     c80:	9e 7f       	andi	r25, 0xFE	; 254
     c82:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     c86:	90 91 ab 00 	lds	r25, 0x00AB
     c8a:	9d 7f       	andi	r25, 0xFD	; 253
     c8c:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     c90:	90 91 a9 00 	lds	r25, 0x00A9
     c94:	91 60       	ori	r25, 0x01	; 1
     c96:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     c9a:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     c9e:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     ca2:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     ca6:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     caa:	80 91 a9 00 	lds	r24, 0x00A9
     cae:	80 62       	ori	r24, 0x20	; 32
     cb0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     cb4:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     cb8:	87 ff       	sbrs	r24, 7
     cba:	08 c0       	rjmp	.+16     	; 0xccc <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     cbc:	4f 5f       	subi	r20, 0xFF	; 255
     cbe:	47 30       	cpi	r20, 0x07	; 7
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <Pipe_ConfigurePipe+0xbc>
     cc2:	b9 cf       	rjmp	.-142    	; 0xc36 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     cc4:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	01 c0       	rjmp	.+2      	; 0xcce <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     ccc:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     cce:	0f 91       	pop	r16
     cd0:	08 95       	ret

00000cd2 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     cd2:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     cdc:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     ce0:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     ce4:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     ce8:	90 91 a9 00 	lds	r25, 0x00A9
     cec:	9e 7f       	andi	r25, 0xFE	; 254
     cee:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     cf2:	8f 5f       	subi	r24, 0xFF	; 255
     cf4:	87 30       	cpi	r24, 0x07	; 7
     cf6:	81 f7       	brne	.-32     	; 0xcd8 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     cf8:	08 95       	ret

00000cfa <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     cfa:	80 91 a2 00 	lds	r24, 0x00A2
     cfe:	90 91 a3 00 	lds	r25, 0x00A3
     d02:	45 e6       	ldi	r20, 0x65	; 101
     d04:	01 c0       	rjmp	.+2      	; 0xd08 <Pipe_WaitUntilReady+0xe>
     d06:	c9 01       	movw	r24, r18
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     d08:	20 91 aa 00 	lds	r18, 0x00AA
     d0c:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     d0e:	20 31       	cpi	r18, 0x10	; 16
     d10:	29 f4       	brne	.+10     	; 0xd1c <Pipe_WaitUntilReady+0x22>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     d12:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     d16:	20 ff       	sbrs	r18, 0
     d18:	05 c0       	rjmp	.+10     	; 0xd24 <Pipe_WaitUntilReady+0x2a>
     d1a:	17 c0       	rjmp	.+46     	; 0xd4a <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     d1c:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     d20:	22 fd       	sbrc	r18, 2
     d22:	13 c0       	rjmp	.+38     	; 0xd4a <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     d24:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     d28:	21 fd       	sbrc	r18, 1
     d2a:	11 c0       	rjmp	.+34     	; 0xd4e <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     d2c:	20 91 35 01 	lds	r18, 0x0135
     d30:	21 30       	cpi	r18, 0x01	; 1
     d32:	79 f0       	breq	.+30     	; 0xd52 <Pipe_WaitUntilReady+0x58>
     d34:	20 91 a2 00 	lds	r18, 0x00A2
     d38:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     d3c:	28 17       	cp	r18, r24
     d3e:	39 07       	cpc	r19, r25
     d40:	19 f3       	breq	.-58     	; 0xd08 <Pipe_WaitUntilReady+0xe>
     d42:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     d44:	01 f7       	brne	.-64     	; 0xd06 <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_Timeout;
     d46:	83 e0       	ldi	r24, 0x03	; 3
     d48:	08 95       	ret
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     d52:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     d54:	08 95       	ret

00000d56 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     d56:	75 d0       	rcall	.+234    	; 0xe42 <USB_INT_DisableAllInterrupts>
     d58:	7c d0       	rcall	.+248    	; 0xe52 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     d5a:	e0 ee       	ldi	r30, 0xE0	; 224
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     d5e:	80 81       	ld	r24, Z
     d60:	81 60       	ori	r24, 0x01	; 1
     d62:	80 83       	st	Z, r24
     d64:	e8 ed       	ldi	r30, 0xD8	; 216
     d66:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     d68:	80 81       	ld	r24, Z
     d6a:	8f 77       	andi	r24, 0x7F	; 127
     d6c:	80 83       	st	Z, r24
     d6e:	19 bc       	out	0x29, r1	; 41
     d70:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     d72:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     d74:	8c 91       	ld	r24, X
     d76:	8e 7f       	andi	r24, 0xFE	; 254
     d78:	8c 93       	st	X, r24
     d7a:	80 81       	ld	r24, Z
     d7c:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     d7e:	80 83       	st	Z, r24
     d80:	10 92 2c 01 	sts	0x012C, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     d84:	08 95       	ret

00000d86 <USB_ResetInterface>:
     d86:	5d d0       	rcall	.+186    	; 0xe42 <USB_INT_DisableAllInterrupts>
}
     d88:	64 d0       	rcall	.+200    	; 0xe52 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     d8a:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     d8e:	8f 77       	andi	r24, 0x7F	; 127
     d90:	80 93 d8 00 	sts	0x00D8, r24
     d94:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     d98:	80 68       	ori	r24, 0x80	; 128
     d9a:	80 93 d8 00 	sts	0x00D8, r24
     d9e:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     da2:	8f 7d       	andi	r24, 0xDF	; 223
     da4:	80 93 d8 00 	sts	0x00D8, r24
     da8:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     dac:	8f 77       	andi	r24, 0x7F	; 127
     dae:	80 93 d7 00 	sts	0x00D7, r24
     db2:	8c e0       	ldi	r24, 0x0C	; 12
     db4:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     db6:	8e e0       	ldi	r24, 0x0E	; 14
     db8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     dba:	09 b4       	in	r0, 0x29	; 41
     dbc:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     dbe:	fd cf       	rjmp	.-6      	; 0xdba <USB_ResetInterface+0x34>
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	80 93 35 01 	sts	0x0135, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     dc6:	10 92 2b 01 	sts	0x012B, r1
	USB_Host_ConfigurationNumber = 0;
     dca:	80 e4       	ldi	r24, 0x40	; 64
     dcc:	80 93 1f 01 	sts	0x011F, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     dd0:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     dd4:	80 64       	ori	r24, 0x40	; 64
     dd6:	80 93 d8 00 	sts	0x00D8, r24
     dda:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     dde:	81 60       	ori	r24, 0x01	; 1
     de0:	80 93 dd 00 	sts	0x00DD, r24
     de4:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     de8:	84 60       	ori	r24, 0x04	; 4
     dea:	80 93 dd 00 	sts	0x00DD, r24
     dee:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     df2:	8f 7e       	andi	r24, 0xEF	; 239
     df4:	80 93 d7 00 	sts	0x00D7, r24
     df8:	6f 9a       	sbi	0x0d, 7	; 13
     dfa:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     dfc:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     e00:	81 60       	ori	r24, 0x01	; 1
     e02:	80 93 de 00 	sts	0x00DE, r24
     e06:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     e0a:	84 60       	ori	r24, 0x04	; 4
     e0c:	80 93 de 00 	sts	0x00DE, r24
     e10:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     e14:	8e 7f       	andi	r24, 0xFE	; 254
     e16:	80 93 e0 00 	sts	0x00E0, r24
     e1a:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     e1e:	80 61       	ori	r24, 0x10	; 16
     e20:	80 93 d8 00 	sts	0x00D8, r24
     e24:	08 95       	ret

00000e26 <USB_Init>:
     e26:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     e28:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     e2a:	80 81       	ld	r24, Z
     e2c:	8f 7e       	andi	r24, 0xEF	; 239
     e2e:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     e30:	e7 ed       	ldi	r30, 0xD7	; 215
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	81 60       	ori	r24, 0x01	; 1
     e38:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	80 93 2c 01 	sts	0x012C, r24

	USB_ResetInterface();
     e40:	a2 cf       	rjmp	.-188    	; 0xd86 <USB_ResetInterface>

00000e42 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     e42:	e8 ed       	ldi	r30, 0xD8	; 216
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	8c 7f       	andi	r24, 0xFC	; 252
     e4a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     e4c:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     e50:	08 95       	ret

00000e52 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     e52:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     e56:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     e5a:	08 95       	ret

00000e5c <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     e5c:	1f 92       	push	r1
     e5e:	0f 92       	push	r0
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	0f 92       	push	r0
     e64:	0b b6       	in	r0, 0x3b	; 59
     e66:	0f 92       	push	r0
     e68:	11 24       	eor	r1, r1
     e6a:	2f 93       	push	r18
     e6c:	3f 93       	push	r19
     e6e:	4f 93       	push	r20
     e70:	5f 93       	push	r21
     e72:	6f 93       	push	r22
     e74:	7f 93       	push	r23
     e76:	8f 93       	push	r24
     e78:	9f 93       	push	r25
     e7a:	af 93       	push	r26
     e7c:	bf 93       	push	r27
     e7e:	ef 93       	push	r30
     e80:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     e82:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     e86:	85 ff       	sbrs	r24, 5
     e88:	0a c0       	rjmp	.+20     	; 0xe9e <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     e8a:	80 91 a0 00 	lds	r24, 0x00A0
     e8e:	85 ff       	sbrs	r24, 5
     e90:	06 c0       	rjmp	.+12     	; 0xe9e <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     e92:	80 91 9f 00 	lds	r24, 0x009F
     e96:	8f 7d       	andi	r24, 0xDF	; 223
     e98:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     e9c:	10 d1       	rcall	.+544    	; 0x10be <USB_Event_Stub>
     e9e:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     ea2:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     ea4:	15 c0       	rjmp	.+42     	; 0xed0 <__vector_10+0x74>
     ea6:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     eaa:	81 ff       	sbrs	r24, 1
     eac:	11 c0       	rjmp	.+34     	; 0xed0 <__vector_10+0x74>
     eae:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     eb2:	8d 7f       	andi	r24, 0xFD	; 253
     eb4:	80 93 9f 00 	sts	0x009F, r24
     eb8:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     ebc:	8e 7f       	andi	r24, 0xFE	; 254
     ebe:	80 93 9f 00 	sts	0x009F, r24
     ec2:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     ec6:	8d 7f       	andi	r24, 0xFD	; 253
     ec8:	80 93 a0 00 	sts	0x00A0, r24
     ecc:	3a da       	rcall	.-2956   	; 0x342 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     ece:	5b df       	rcall	.-330    	; 0xd86 <USB_ResetInterface>
     ed0:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     ed4:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     ed6:	15 c0       	rjmp	.+42     	; 0xf02 <__vector_10+0xa6>
     ed8:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     edc:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     ede:	11 c0       	rjmp	.+34     	; 0xf02 <__vector_10+0xa6>
     ee0:	80 91 df 00 	lds	r24, 0x00DF
     ee4:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     ee6:	80 93 df 00 	sts	0x00DF, r24
     eea:	77 98       	cbi	0x0e, 7	; 14
     eec:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     ef0:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     ef2:	80 93 dd 00 	sts	0x00DD, r24
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	a4 da       	rcall	.-2744   	; 0x442 <EVENT_USB_Host_HostError>
     efa:	23 da       	rcall	.-3002   	; 0x342 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	80 93 35 01 	sts	0x0135, r24
		EVENT_USB_Host_DeviceUnattached();
     f02:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     f06:	80 ff       	sbrs	r24, 0
     f08:	17 c0       	rjmp	.+46     	; 0xf38 <__vector_10+0xdc>
     f0a:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     f0e:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     f10:	13 c0       	rjmp	.+38     	; 0xf38 <__vector_10+0xdc>
     f12:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     f16:	8e 7f       	andi	r24, 0xFE	; 254
     f18:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     f1c:	80 91 de 00 	lds	r24, 0x00DE
     f20:	8e 7f       	andi	r24, 0xFE	; 254
     f22:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     f26:	07 da       	rcall	.-3058   	; 0x336 <EVENT_USB_Host_DeviceAttached>
     f28:	80 91 a0 00 	lds	r24, 0x00A0
     f2c:	82 60       	ori	r24, 0x02	; 2
     f2e:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     f32:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     f34:	80 93 35 01 	sts	0x0135, r24
     f38:	80 91 df 00 	lds	r24, 0x00DF
     f3c:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     f3e:	0e c0       	rjmp	.+28     	; 0xf5c <__vector_10+0x100>
     f40:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     f44:	82 ff       	sbrs	r24, 2
     f46:	0a c0       	rjmp	.+20     	; 0xf5c <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     f48:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     f4c:	8b 7f       	andi	r24, 0xFB	; 251
     f4e:	80 93 df 00 	sts	0x00DF, r24
     f52:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	94 da       	rcall	.-2776   	; 0x480 <EVENT_USB_Host_DeviceEnumerationFailed>
     f58:	f4 d9       	rcall	.-3096   	; 0x342 <EVENT_USB_Host_DeviceUnattached>
     f5a:	15 df       	rcall	.-470    	; 0xd86 <USB_ResetInterface>
     f5c:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     f5e:	ef 91       	pop	r30
     f60:	bf 91       	pop	r27
     f62:	af 91       	pop	r26
     f64:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     f66:	8f 91       	pop	r24
     f68:	7f 91       	pop	r23

		USB_ResetInterface();
     f6a:	6f 91       	pop	r22
     f6c:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     f6e:	4f 91       	pop	r20
     f70:	3f 91       	pop	r19
     f72:	2f 91       	pop	r18
     f74:	0f 90       	pop	r0
     f76:	0b be       	out	0x3b, r0	; 59
     f78:	0f 90       	pop	r0
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	0f 90       	pop	r0
     f7e:	1f 90       	pop	r1
     f80:	18 95       	reti

00000f82 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     f82:	cf 92       	push	r12
     f84:	df 92       	push	r13
     f86:	ef 92       	push	r14
     f88:	ff 92       	push	r15
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	29 97       	sbiw	r28, 0x09	; 9
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	6b 01       	movw	r12, r22
     fa4:	8a 01       	movw	r16, r20
     fa6:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     fa8:	90 e8       	ldi	r25, 0x80	; 128
     faa:	90 93 2d 01 	sts	0x012D, r25
     fae:	96 e0       	ldi	r25, 0x06	; 6
     fb0:	90 93 2e 01 	sts	0x012E, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     fba:	90 93 30 01 	sts	0x0130, r25
     fbe:	80 93 2f 01 	sts	0x012F, r24
     fc2:	10 92 32 01 	sts	0x0132, r1
     fc6:	10 92 31 01 	sts	0x0131, r1
     fca:	89 e0       	ldi	r24, 0x09	; 9
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	90 93 34 01 	sts	0x0134, r25
     fd2:	80 93 33 01 	sts	0x0133, r24
     fd6:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     fda:	ce 01       	movw	r24, r28
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	98 d0       	rcall	.+304    	; 0x1110 <USB_Host_SendControlRequest>
     fe0:	88 23       	and	r24, r24
     fe2:	b9 f4       	brne	.+46     	; 0x1012 <USB_Host_GetDeviceConfigDescriptor+0x90>
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     fe6:	9c 81       	ldd	r25, Y+4	; 0x04
     fe8:	f6 01       	movw	r30, r12
     fea:	91 83       	std	Z+1, r25	; 0x01
     fec:	80 83       	st	Z, r24
     fee:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
     ff0:	f9 06       	cpc	r15, r25
     ff2:	70 f0       	brcs	.+28     	; 0x1010 <USB_Host_GetDeviceConfigDescriptor+0x8e>
     ff4:	90 93 34 01 	sts	0x0134, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     ff8:	80 93 33 01 	sts	0x0133, r24
     ffc:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     ffe:	88 d0       	rcall	.+272    	; 0x1110 <USB_Host_SendControlRequest>
    1000:	88 23       	and	r24, r24
    1002:	39 f4       	brne	.+14     	; 0x1012 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1004:	f8 01       	movw	r30, r16
    1006:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1008:	92 30       	cpi	r25, 0x02	; 2
    100a:	19 f0       	breq	.+6      	; 0x1012 <USB_Host_GetDeviceConfigDescriptor+0x90>
    100c:	86 e0       	ldi	r24, 0x06	; 6
    100e:	01 c0       	rjmp	.+2      	; 0x1012 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    1010:	85 e0       	ldi	r24, 0x05	; 5
    1012:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1014:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	ff 90       	pop	r15
    1028:	ef 90       	pop	r14
    102a:	df 90       	pop	r13
    102c:	cf 90       	pop	r12
    102e:	08 95       	ret

00001030 <USB_GetNextDescriptorComp>:
    1030:	af 92       	push	r10
    1032:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1034:	cf 92       	push	r12
    1036:	df 92       	push	r13
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	7c 01       	movw	r14, r24
    1046:	8b 01       	movw	r16, r22
    1048:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    104a:	28 c0       	rjmp	.+80     	; 0x109c <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    104c:	f8 01       	movw	r30, r16
    104e:	c0 80       	ld	r12, Z
    1050:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1052:	f6 01       	movw	r30, r12
    1054:	80 81       	ld	r24, Z
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	9e 01       	movw	r18, r28
    105a:	8c 17       	cp	r24, r28
    105c:	9d 07       	cpc	r25, r29
    105e:	08 f4       	brcc	.+2      	; 0x1062 <USB_GetNextDescriptorComp+0x32>
    1060:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1062:	c6 01       	movw	r24, r12
    1064:	82 0f       	add	r24, r18
    1066:	93 1f       	adc	r25, r19
    1068:	f8 01       	movw	r30, r16
    106a:	91 83       	std	Z+1, r25	; 0x01
    106c:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
    106e:	f7 01       	movw	r30, r14
    1070:	80 81       	ld	r24, Z
    1072:	91 81       	ldd	r25, Z+1	; 0x01
    1074:	82 1b       	sub	r24, r18
    1076:	93 0b       	sbc	r25, r19
    1078:	91 83       	std	Z+1, r25	; 0x01
    107a:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    107c:	f8 01       	movw	r30, r16
    107e:	80 81       	ld	r24, Z
    1080:	91 81       	ldd	r25, Z+1	; 0x01
    1082:	f5 01       	movw	r30, r10
    1084:	09 95       	icall
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	49 f0       	breq	.+18     	; 0x109c <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	69 f4       	brne	.+26     	; 0x10a8 <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
    108e:	f8 01       	movw	r30, r16
    1090:	d1 82       	std	Z+1, r13	; 0x01
    1092:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
    1094:	f7 01       	movw	r30, r14
    1096:	d1 83       	std	Z+1, r29	; 0x01
    1098:	c0 83       	st	Z, r28
    109a:	06 c0       	rjmp	.+12     	; 0x10a8 <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    109c:	f7 01       	movw	r30, r14
    109e:	c0 81       	ld	r28, Z
    10a0:	d1 81       	ldd	r29, Z+1	; 0x01
    10a2:	20 97       	sbiw	r28, 0x00	; 0
    10a4:	99 f6       	brne	.-90     	; 0x104c <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    10a6:	82 e0       	ldi	r24, 0x02	; 2
}
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	ff 90       	pop	r15
    10b2:	ef 90       	pop	r14
    10b4:	df 90       	pop	r13
    10b6:	cf 90       	pop	r12
    10b8:	bf 90       	pop	r11
    10ba:	af 90       	pop	r10
    10bc:	08 95       	ret

000010be <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    10be:	08 95       	ret

000010c0 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    10c0:	1f 93       	push	r17
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    10c8:	c9 ee       	ldi	r28, 0xE9	; 233
    10ca:	d3 e0       	ldi	r29, 0x03	; 3
    10cc:	06 c0       	rjmp	.+12     	; 0x10da <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	c6 db       	rcall	.-2164   	; 0x85e <USB_Host_WaitMS>
    10d2:	88 23       	and	r24, r24
    10d4:	c9 f4       	brne	.+50     	; 0x1108 <USB_Host_WaitForIOS+0x48>
    10d6:	21 97       	sbiw	r28, 0x01	; 1
    10d8:	b1 f0       	breq	.+44     	; 0x1106 <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    10da:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    10dc:	29 f4       	brne	.+10     	; 0x10e8 <USB_Host_WaitForIOS+0x28>
    10de:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    10e2:	83 ff       	sbrs	r24, 3
    10e4:	f4 cf       	rjmp	.-24     	; 0x10ce <USB_Host_WaitForIOS+0xe>
    10e6:	0d c0       	rjmp	.+26     	; 0x1102 <USB_Host_WaitForIOS+0x42>
    10e8:	11 30       	cpi	r17, 0x01	; 1
    10ea:	29 f4       	brne	.+10     	; 0x10f6 <USB_Host_WaitForIOS+0x36>
    10ec:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    10f0:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    10f2:	ed cf       	rjmp	.-38     	; 0x10ce <USB_Host_WaitForIOS+0xe>
    10f4:	06 c0       	rjmp	.+12     	; 0x1102 <USB_Host_WaitForIOS+0x42>
    10f6:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    10f8:	51 f7       	brne	.-44     	; 0x10ce <USB_Host_WaitForIOS+0xe>
    10fa:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    10fe:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1100:	e6 cf       	rjmp	.-52     	; 0x10ce <USB_Host_WaitForIOS+0xe>
    1102:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1104:	01 c0       	rjmp	.+2      	; 0x1108 <USB_Host_WaitForIOS+0x48>
    1106:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1108:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
    110a:	cf 91       	pop	r28
    110c:	1f 91       	pop	r17
    110e:	08 95       	ret

00001110 <USB_Host_SendControlRequest>:
    1110:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1112:	ff 92       	push	r15
    1114:	0f 93       	push	r16
    1116:	1f 93       	push	r17
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    111e:	e0 90 9e 00 	lds	r14, 0x009E
    1122:	ff 24       	eor	r15, r15
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	e8 22       	and	r14, r24
    1128:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    112a:	00 91 33 01 	lds	r16, 0x0133
    112e:	10 91 34 01 	lds	r17, 0x0134
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1132:	80 91 9e 00 	lds	r24, 0x009E
    1136:	81 60       	ori	r24, 0x01	; 1
    1138:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	8f db       	rcall	.-2274   	; 0x85e <USB_Host_WaitMS>
    1140:	88 23       	and	r24, r24
    1142:	09 f0       	breq	.+2      	; 0x1146 <USB_Host_SendControlRequest+0x36>
    1144:	ca c0       	rjmp	.+404    	; 0x12da <USB_Host_SendControlRequest+0x1ca>
    1146:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    114a:	8f 7c       	andi	r24, 0xCF	; 207
    114c:	80 93 aa 00 	sts	0x00AA, r24
    1150:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1154:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    1158:	8f 7e       	andi	r24, 0xEF	; 239
    115a:	80 93 a6 00 	sts	0x00A6, r24
    115e:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1162:	8f 7b       	andi	r24, 0xBF	; 191
    1164:	80 93 a9 00 	sts	0x00A9, r24
    1168:	88 e0       	ldi	r24, 0x08	; 8
    116a:	ed e2       	ldi	r30, 0x2D	; 45
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    116c:	f1 e0       	ldi	r31, 0x01	; 1
    116e:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1170:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1174:	81 50       	subi	r24, 0x01	; 1
    1176:	d9 f7       	brne	.-10     	; 0x116e <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1178:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    117c:	87 77       	andi	r24, 0x77	; 119
    117e:	80 93 a6 00 	sts	0x00A6, r24
    1182:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1184:	9d df       	rcall	.-198    	; 0x10c0 <USB_Host_WaitForIOS>
    1186:	88 23       	and	r24, r24
    1188:	09 f0       	breq	.+2      	; 0x118c <USB_Host_SendControlRequest+0x7c>
    118a:	a7 c0       	rjmp	.+334    	; 0x12da <USB_Host_SendControlRequest+0x1ca>
    118c:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1190:	80 64       	ori	r24, 0x40	; 64
    1192:	80 93 a9 00 	sts	0x00A9, r24
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	62 db       	rcall	.-2364   	; 0x85e <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    119a:	88 23       	and	r24, r24
    119c:	09 f0       	breq	.+2      	; 0x11a0 <USB_Host_SendControlRequest+0x90>
    119e:	9d c0       	rjmp	.+314    	; 0x12da <USB_Host_SendControlRequest+0x1ca>
    11a0:	80 91 2d 01 	lds	r24, 0x012D
    11a4:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    11a6:	4f c0       	rjmp	.+158    	; 0x1246 <USB_Host_SendControlRequest+0x136>
    11a8:	80 91 aa 00 	lds	r24, 0x00AA
    11ac:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11ae:	80 61       	ori	r24, 0x10	; 16
    11b0:	80 93 aa 00 	sts	0x00AA, r24
    11b4:	20 97       	sbiw	r28, 0x00	; 0
    11b6:	61 f5       	brne	.+88     	; 0x1210 <USB_Host_SendControlRequest+0x100>
    11b8:	2e c0       	rjmp	.+92     	; 0x1216 <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    11ba:	80 91 a9 00 	lds	r24, 0x00A9
    11be:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11c0:	80 93 a9 00 	sts	0x00A9, r24
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	7c df       	rcall	.-264    	; 0x10c0 <USB_Host_WaitForIOS>
    11c8:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    11ca:	09 f0       	breq	.+2      	; 0x11ce <USB_Host_SendControlRequest+0xbe>
    11cc:	86 c0       	rjmp	.+268    	; 0x12da <USB_Host_SendControlRequest+0x1ca>
    11ce:	80 91 f6 00 	lds	r24, 0x00F6
    11d2:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	41 f4       	brne	.+16     	; 0x11ea <USB_Host_SendControlRequest+0xda>
    11da:	00 e0       	ldi	r16, 0x00	; 0
    11dc:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    11de:	05 c0       	rjmp	.+10     	; 0x11ea <USB_Host_SendControlRequest+0xda>
    11e0:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
    11e4:	89 93       	st	Y+, r24
    11e6:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    11e8:	10 40       	sbci	r17, 0x00	; 0
    11ea:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
    11ee:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	19 f0       	breq	.+6      	; 0x11fc <USB_Host_SendControlRequest+0xec>
    11f6:	01 15       	cp	r16, r1
    11f8:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    11fa:	91 f7       	brne	.-28     	; 0x11e0 <USB_Host_SendControlRequest+0xd0>
    11fc:	80 91 a9 00 	lds	r24, 0x00A9
    1200:	80 64       	ori	r24, 0x40	; 64
    1202:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1206:	80 91 a6 00 	lds	r24, 0x00A6
    120a:	8e 77       	andi	r24, 0x7E	; 126
    120c:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1210:	01 15       	cp	r16, r1
    1212:	11 05       	cpc	r17, r1
    1214:	91 f6       	brne	.-92     	; 0x11ba <USB_Host_SendControlRequest+0xaa>
    1216:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    121a:	8f 7c       	andi	r24, 0xCF	; 207
    121c:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    121e:	80 93 aa 00 	sts	0x00AA, r24
    1222:	80 91 a9 00 	lds	r24, 0x00A9
    1226:	8f 7b       	andi	r24, 0xBF	; 191
    1228:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    122c:	82 e0       	ldi	r24, 0x02	; 2
    122e:	48 df       	rcall	.-368    	; 0x10c0 <USB_Host_WaitForIOS>
    1230:	88 23       	and	r24, r24
    1232:	09 f0       	breq	.+2      	; 0x1236 <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1234:	52 c0       	rjmp	.+164    	; 0x12da <USB_Host_SendControlRequest+0x1ca>
    1236:	80 91 a6 00 	lds	r24, 0x00A6
    123a:	8b 77       	andi	r24, 0x7B	; 123
    123c:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1240:	82 e0       	ldi	r24, 0x02	; 2
    1242:	3e df       	rcall	.-388    	; 0x10c0 <USB_Host_WaitForIOS>
    1244:	4a c0       	rjmp	.+148    	; 0x12da <USB_Host_SendControlRequest+0x1ca>
    1246:	20 97       	sbiw	r28, 0x00	; 0
    1248:	a1 f1       	breq	.+104    	; 0x12b2 <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    124a:	80 91 aa 00 	lds	r24, 0x00AA
    124e:	8f 7c       	andi	r24, 0xCF	; 207
    1250:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1252:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1256:	80 91 a9 00 	lds	r24, 0x00A9
    125a:	8f 7b       	andi	r24, 0xBF	; 191
    125c:	80 93 a9 00 	sts	0x00A9, r24
    1260:	1c c0       	rjmp	.+56     	; 0x129a <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1262:	2e df       	rcall	.-420    	; 0x10c0 <USB_Host_WaitForIOS>
    1264:	88 23       	and	r24, r24
    1266:	c9 f5       	brne	.+114    	; 0x12da <USB_Host_SendControlRequest+0x1ca>
    1268:	fe 01       	movw	r30, r28
    126a:	07 c0       	rjmp	.+14     	; 0x127a <USB_Host_SendControlRequest+0x16a>
    126c:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    126e:	ef 01       	movw	r28, r30
    1270:	80 93 af 00 	sts	0x00AF, r24
    1274:	01 50       	subi	r16, 0x01	; 1
    1276:	10 40       	sbci	r17, 0x00	; 0
    1278:	59 f0       	breq	.+22     	; 0x1290 <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    127a:	ef 01       	movw	r28, r30
    127c:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1280:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    1284:	80 91 1f 01 	lds	r24, 0x011F
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1288:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    128a:	28 17       	cp	r18, r24
    128c:	39 07       	cpc	r19, r25
    128e:	70 f3       	brcs	.-36     	; 0x126c <USB_Host_SendControlRequest+0x15c>
    1290:	80 91 a6 00 	lds	r24, 0x00A6
    1294:	8b 77       	andi	r24, 0x7B	; 123
    1296:	80 93 a6 00 	sts	0x00A6, r24
    129a:	82 e0       	ldi	r24, 0x02	; 2
    129c:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    129e:	11 05       	cpc	r17, r1
    12a0:	01 f7       	brne	.-64     	; 0x1262 <USB_Host_SendControlRequest+0x152>
    12a2:	0e df       	rcall	.-484    	; 0x10c0 <USB_Host_WaitForIOS>
    12a4:	88 23       	and	r24, r24
    12a6:	c9 f4       	brne	.+50     	; 0x12da <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    12a8:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    12ac:	80 64       	ori	r24, 0x40	; 64
    12ae:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    12b2:	80 91 aa 00 	lds	r24, 0x00AA
    12b6:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    12b8:	80 61       	ori	r24, 0x10	; 16
    12ba:	80 93 aa 00 	sts	0x00AA, r24
    12be:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    12c2:	8f 7b       	andi	r24, 0xBF	; 191
    12c4:	80 93 a9 00 	sts	0x00A9, r24
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	fa de       	rcall	.-524    	; 0x10c0 <USB_Host_WaitForIOS>
    12cc:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12ce:	29 f4       	brne	.+10     	; 0x12da <USB_Host_SendControlRequest+0x1ca>
    12d0:	90 91 a6 00 	lds	r25, 0x00A6
    12d4:	9e 77       	andi	r25, 0x7E	; 126
    12d6:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    12da:	90 91 a9 00 	lds	r25, 0x00A9
    12de:	90 64       	ori	r25, 0x40	; 64
    12e0:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    12e4:	e1 14       	cp	r14, r1
    12e6:	f1 04       	cpc	r15, r1
    12e8:	29 f4       	brne	.+10     	; 0x12f4 <USB_Host_SendControlRequest+0x1e4>
    12ea:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    12ee:	9e 7f       	andi	r25, 0xFE	; 254
    12f0:	90 93 9e 00 	sts	0x009E, r25
    12f4:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    12f6:	90 93 a8 00 	sts	0x00A8, r25
    12fa:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	1f 91       	pop	r17
    1304:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1306:	ff 90       	pop	r15
    1308:	ef 90       	pop	r14
    130a:	08 95       	ret

0000130c <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    130c:	cf 93       	push	r28
    130e:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1310:	10 92 2d 01 	sts	0x012D, r1
    1314:	89 e0       	ldi	r24, 0x09	; 9
    1316:	80 93 2e 01 	sts	0x012E, r24
    131a:	c0 93 2f 01 	sts	0x012F, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    131e:	10 92 30 01 	sts	0x0130, r1
    1322:	10 92 32 01 	sts	0x0132, r1
    1326:	10 92 31 01 	sts	0x0131, r1
    132a:	10 92 34 01 	sts	0x0134, r1
    132e:	10 92 33 01 	sts	0x0133, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1332:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	ea de       	rcall	.-556    	; 0x1110 <USB_Host_SendControlRequest>
    133c:	88 23       	and	r24, r24
    133e:	49 f4       	brne	.+18     	; 0x1352 <USB_Host_SetDeviceConfiguration+0x46>
    1340:	c0 93 2b 01 	sts	0x012B, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1344:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1346:	11 f0       	breq	.+4      	; 0x134c <USB_Host_SetDeviceConfiguration+0x40>
    1348:	9b e0       	ldi	r25, 0x0B	; 11
    134a:	01 c0       	rjmp	.+2      	; 0x134e <USB_Host_SetDeviceConfiguration+0x42>
    134c:	9a e0       	ldi	r25, 0x0A	; 10
    134e:	90 93 35 01 	sts	0x0135, r25
    1352:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1354:	08 95       	ret

00001356 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1356:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1358:	c0 91 a7 00 	lds	r28, 0x00A7
    135c:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    135e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1362:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1366:	d0 da       	rcall	.-2656   	; 0x908 <USB_Host_ProcessNextHostState>
    1368:	c0 93 a7 00 	sts	0x00A7, r28
    136c:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    136e:	08 95       	ret

00001370 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1370:	90 91 c8 00 	lds	r25, 0x00C8
    1374:	95 ff       	sbrs	r25, 5
    1376:	fc cf       	rjmp	.-8      	; 0x1370 <Serial_putchar>
				UDR1 = DataByte;
    1378:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	08 95       	ret

00001382 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1382:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1386:	87 ff       	sbrs	r24, 7
    1388:	08 c0       	rjmp	.+16     	; 0x139a <Serial_getchar+0x18>
    138a:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    138e:	87 ff       	sbrs	r24, 7
    1390:	07 c0       	rjmp	.+14     	; 0x13a0 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1392:	80 91 ce 00 	lds	r24, 0x00CE
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	08 95       	ret
	  return _FDEV_EOF;
    139a:	8e ef       	ldi	r24, 0xFE	; 254
    139c:	9f ef       	ldi	r25, 0xFF	; 255
    139e:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    13a0:	8f ef       	ldi	r24, 0xFF	; 255
    13a2:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    13a4:	08 95       	ret

000013a6 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    13a6:	fc 01       	movw	r30, r24
	if (!(Stream))
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	51 f4       	brne	.+20     	; 0x13c0 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    13ac:	e6 e3       	ldi	r30, 0x36	; 54
    13ae:	f1 e0       	ldi	r31, 0x01	; 1
    13b0:	f0 93 45 01 	sts	0x0145, r31
    13b4:	e0 93 44 01 	sts	0x0144, r30
		stdout = Stream;
    13b8:	f0 93 47 01 	sts	0x0147, r31
    13bc:	e0 93 46 01 	sts	0x0146, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    13c0:	8e e0       	ldi	r24, 0x0E	; 14
    13c2:	df 01       	movw	r26, r30
    13c4:	1d 92       	st	X+, r1
    13c6:	8a 95       	dec	r24
    13c8:	e9 f7       	brne	.-6      	; 0x13c4 <Serial_CreateStream+0x1e>
    13ca:	83 e0       	ldi	r24, 0x03	; 3
    13cc:	83 83       	std	Z+3, r24	; 0x03
    13ce:	88 eb       	ldi	r24, 0xB8	; 184
    13d0:	99 e0       	ldi	r25, 0x09	; 9
    13d2:	91 87       	std	Z+9, r25	; 0x09
    13d4:	80 87       	std	Z+8, r24	; 0x08
    13d6:	81 ec       	ldi	r24, 0xC1	; 193
    13d8:	99 e0       	ldi	r25, 0x09	; 9
    13da:	93 87       	std	Z+11, r25	; 0x0b
    13dc:	82 87       	std	Z+10, r24	; 0x0a
}
    13de:	08 95       	ret

000013e0 <fputc>:
    13e0:	0f 93       	push	r16
    13e2:	1f 93       	push	r17
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	8c 01       	movw	r16, r24
    13ea:	eb 01       	movw	r28, r22
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	81 ff       	sbrs	r24, 1
    13f0:	1b c0       	rjmp	.+54     	; 0x1428 <fputc+0x48>
    13f2:	82 ff       	sbrs	r24, 2
    13f4:	0d c0       	rjmp	.+26     	; 0x1410 <fputc+0x30>
    13f6:	2e 81       	ldd	r18, Y+6	; 0x06
    13f8:	3f 81       	ldd	r19, Y+7	; 0x07
    13fa:	8c 81       	ldd	r24, Y+4	; 0x04
    13fc:	9d 81       	ldd	r25, Y+5	; 0x05
    13fe:	28 17       	cp	r18, r24
    1400:	39 07       	cpc	r19, r25
    1402:	64 f4       	brge	.+24     	; 0x141c <fputc+0x3c>
    1404:	e8 81       	ld	r30, Y
    1406:	f9 81       	ldd	r31, Y+1	; 0x01
    1408:	01 93       	st	Z+, r16
    140a:	f9 83       	std	Y+1, r31	; 0x01
    140c:	e8 83       	st	Y, r30
    140e:	06 c0       	rjmp	.+12     	; 0x141c <fputc+0x3c>
    1410:	e8 85       	ldd	r30, Y+8	; 0x08
    1412:	f9 85       	ldd	r31, Y+9	; 0x09
    1414:	80 2f       	mov	r24, r16
    1416:	09 95       	icall
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	31 f4       	brne	.+12     	; 0x1428 <fputc+0x48>
    141c:	8e 81       	ldd	r24, Y+6	; 0x06
    141e:	9f 81       	ldd	r25, Y+7	; 0x07
    1420:	01 96       	adiw	r24, 0x01	; 1
    1422:	9f 83       	std	Y+7, r25	; 0x07
    1424:	8e 83       	std	Y+6, r24	; 0x06
    1426:	02 c0       	rjmp	.+4      	; 0x142c <fputc+0x4c>
    1428:	0f ef       	ldi	r16, 0xFF	; 255
    142a:	1f ef       	ldi	r17, 0xFF	; 255
    142c:	c8 01       	movw	r24, r16
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	08 95       	ret

00001438 <printf_P>:
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	fe 01       	movw	r30, r28
    1442:	35 96       	adiw	r30, 0x05	; 5
    1444:	61 91       	ld	r22, Z+
    1446:	71 91       	ld	r23, Z+
    1448:	80 91 46 01 	lds	r24, 0x0146
    144c:	90 91 47 01 	lds	r25, 0x0147
    1450:	dc 01       	movw	r26, r24
    1452:	13 96       	adiw	r26, 0x03	; 3
    1454:	2c 91       	ld	r18, X
    1456:	13 97       	sbiw	r26, 0x03	; 3
    1458:	28 60       	ori	r18, 0x08	; 8
    145a:	13 96       	adiw	r26, 0x03	; 3
    145c:	2c 93       	st	X, r18
    145e:	af 01       	movw	r20, r30
    1460:	39 d0       	rcall	.+114    	; 0x14d4 <vfprintf>
    1462:	e0 91 46 01 	lds	r30, 0x0146
    1466:	f0 91 47 01 	lds	r31, 0x0147
    146a:	23 81       	ldd	r18, Z+3	; 0x03
    146c:	27 7f       	andi	r18, 0xF7	; 247
    146e:	23 83       	std	Z+3, r18	; 0x03
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	08 95       	ret

00001476 <puts_P>:
    1476:	0f 93       	push	r16
    1478:	1f 93       	push	r17
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	8c 01       	movw	r16, r24
    1480:	e0 91 46 01 	lds	r30, 0x0146
    1484:	f0 91 47 01 	lds	r31, 0x0147
    1488:	83 81       	ldd	r24, Z+3	; 0x03
    148a:	81 ff       	sbrs	r24, 1
    148c:	1b c0       	rjmp	.+54     	; 0x14c4 <puts_P+0x4e>
    148e:	c0 e0       	ldi	r28, 0x00	; 0
    1490:	d0 e0       	ldi	r29, 0x00	; 0
    1492:	07 c0       	rjmp	.+14     	; 0x14a2 <puts_P+0x2c>
    1494:	09 95       	icall
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	11 f0       	breq	.+4      	; 0x149e <puts_P+0x28>
    149a:	cf ef       	ldi	r28, 0xFF	; 255
    149c:	df ef       	ldi	r29, 0xFF	; 255
    149e:	0f 5f       	subi	r16, 0xFF	; 255
    14a0:	1f 4f       	sbci	r17, 0xFF	; 255
    14a2:	f8 01       	movw	r30, r16
    14a4:	84 91       	lpm	r24, Z
    14a6:	60 91 46 01 	lds	r22, 0x0146
    14aa:	70 91 47 01 	lds	r23, 0x0147
    14ae:	db 01       	movw	r26, r22
    14b0:	18 96       	adiw	r26, 0x08	; 8
    14b2:	ed 91       	ld	r30, X+
    14b4:	fc 91       	ld	r31, X
    14b6:	19 97       	sbiw	r26, 0x09	; 9
    14b8:	88 23       	and	r24, r24
    14ba:	61 f7       	brne	.-40     	; 0x1494 <puts_P+0x1e>
    14bc:	8a e0       	ldi	r24, 0x0A	; 10
    14be:	09 95       	icall
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	11 f0       	breq	.+4      	; 0x14c8 <puts_P+0x52>
    14c4:	cf ef       	ldi	r28, 0xFF	; 255
    14c6:	df ef       	ldi	r29, 0xFF	; 255
    14c8:	ce 01       	movw	r24, r28
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	08 95       	ret

000014d4 <vfprintf>:
    14d4:	2f 92       	push	r2
    14d6:	3f 92       	push	r3
    14d8:	4f 92       	push	r4
    14da:	5f 92       	push	r5
    14dc:	6f 92       	push	r6
    14de:	7f 92       	push	r7
    14e0:	8f 92       	push	r8
    14e2:	9f 92       	push	r9
    14e4:	af 92       	push	r10
    14e6:	bf 92       	push	r11
    14e8:	cf 92       	push	r12
    14ea:	df 92       	push	r13
    14ec:	ef 92       	push	r14
    14ee:	ff 92       	push	r15
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	2d 97       	sbiw	r28, 0x0d	; 13
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	cd bf       	out	0x3d, r28	; 61
    1508:	3c 01       	movw	r6, r24
    150a:	7d 87       	std	Y+13, r23	; 0x0d
    150c:	6c 87       	std	Y+12, r22	; 0x0c
    150e:	5a 01       	movw	r10, r20
    1510:	fc 01       	movw	r30, r24
    1512:	17 82       	std	Z+7, r1	; 0x07
    1514:	16 82       	std	Z+6, r1	; 0x06
    1516:	83 81       	ldd	r24, Z+3	; 0x03
    1518:	81 ff       	sbrs	r24, 1
    151a:	bb c1       	rjmp	.+886    	; 0x1892 <vfprintf+0x3be>
    151c:	2e 01       	movw	r4, r28
    151e:	08 94       	sec
    1520:	41 1c       	adc	r4, r1
    1522:	51 1c       	adc	r5, r1
    1524:	f3 01       	movw	r30, r6
    1526:	93 81       	ldd	r25, Z+3	; 0x03
    1528:	ec 85       	ldd	r30, Y+12	; 0x0c
    152a:	fd 85       	ldd	r31, Y+13	; 0x0d
    152c:	93 fd       	sbrc	r25, 3
    152e:	85 91       	lpm	r24, Z+
    1530:	93 ff       	sbrs	r25, 3
    1532:	81 91       	ld	r24, Z+
    1534:	fd 87       	std	Y+13, r31	; 0x0d
    1536:	ec 87       	std	Y+12, r30	; 0x0c
    1538:	88 23       	and	r24, r24
    153a:	09 f4       	brne	.+2      	; 0x153e <vfprintf+0x6a>
    153c:	a6 c1       	rjmp	.+844    	; 0x188a <vfprintf+0x3b6>
    153e:	85 32       	cpi	r24, 0x25	; 37
    1540:	41 f4       	brne	.+16     	; 0x1552 <vfprintf+0x7e>
    1542:	93 fd       	sbrc	r25, 3
    1544:	85 91       	lpm	r24, Z+
    1546:	93 ff       	sbrs	r25, 3
    1548:	81 91       	ld	r24, Z+
    154a:	fd 87       	std	Y+13, r31	; 0x0d
    154c:	ec 87       	std	Y+12, r30	; 0x0c
    154e:	85 32       	cpi	r24, 0x25	; 37
    1550:	21 f4       	brne	.+8      	; 0x155a <vfprintf+0x86>
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	b3 01       	movw	r22, r6
    1556:	44 df       	rcall	.-376    	; 0x13e0 <fputc>
    1558:	e5 cf       	rjmp	.-54     	; 0x1524 <vfprintf+0x50>
    155a:	ff 24       	eor	r15, r15
    155c:	ee 24       	eor	r14, r14
    155e:	10 e0       	ldi	r17, 0x00	; 0
    1560:	10 32       	cpi	r17, 0x20	; 32
    1562:	b0 f4       	brcc	.+44     	; 0x1590 <vfprintf+0xbc>
    1564:	8b 32       	cpi	r24, 0x2B	; 43
    1566:	69 f0       	breq	.+26     	; 0x1582 <vfprintf+0xae>
    1568:	8c 32       	cpi	r24, 0x2C	; 44
    156a:	28 f4       	brcc	.+10     	; 0x1576 <vfprintf+0xa2>
    156c:	80 32       	cpi	r24, 0x20	; 32
    156e:	51 f0       	breq	.+20     	; 0x1584 <vfprintf+0xb0>
    1570:	83 32       	cpi	r24, 0x23	; 35
    1572:	71 f4       	brne	.+28     	; 0x1590 <vfprintf+0xbc>
    1574:	0b c0       	rjmp	.+22     	; 0x158c <vfprintf+0xb8>
    1576:	8d 32       	cpi	r24, 0x2D	; 45
    1578:	39 f0       	breq	.+14     	; 0x1588 <vfprintf+0xb4>
    157a:	80 33       	cpi	r24, 0x30	; 48
    157c:	49 f4       	brne	.+18     	; 0x1590 <vfprintf+0xbc>
    157e:	11 60       	ori	r17, 0x01	; 1
    1580:	2c c0       	rjmp	.+88     	; 0x15da <vfprintf+0x106>
    1582:	12 60       	ori	r17, 0x02	; 2
    1584:	14 60       	ori	r17, 0x04	; 4
    1586:	29 c0       	rjmp	.+82     	; 0x15da <vfprintf+0x106>
    1588:	18 60       	ori	r17, 0x08	; 8
    158a:	27 c0       	rjmp	.+78     	; 0x15da <vfprintf+0x106>
    158c:	10 61       	ori	r17, 0x10	; 16
    158e:	25 c0       	rjmp	.+74     	; 0x15da <vfprintf+0x106>
    1590:	17 fd       	sbrc	r17, 7
    1592:	2e c0       	rjmp	.+92     	; 0x15f0 <vfprintf+0x11c>
    1594:	28 2f       	mov	r18, r24
    1596:	20 53       	subi	r18, 0x30	; 48
    1598:	2a 30       	cpi	r18, 0x0A	; 10
    159a:	98 f4       	brcc	.+38     	; 0x15c2 <vfprintf+0xee>
    159c:	16 ff       	sbrs	r17, 6
    159e:	08 c0       	rjmp	.+16     	; 0x15b0 <vfprintf+0xdc>
    15a0:	8f 2d       	mov	r24, r15
    15a2:	88 0f       	add	r24, r24
    15a4:	f8 2e       	mov	r15, r24
    15a6:	ff 0c       	add	r15, r15
    15a8:	ff 0c       	add	r15, r15
    15aa:	f8 0e       	add	r15, r24
    15ac:	f2 0e       	add	r15, r18
    15ae:	15 c0       	rjmp	.+42     	; 0x15da <vfprintf+0x106>
    15b0:	8e 2d       	mov	r24, r14
    15b2:	88 0f       	add	r24, r24
    15b4:	e8 2e       	mov	r14, r24
    15b6:	ee 0c       	add	r14, r14
    15b8:	ee 0c       	add	r14, r14
    15ba:	e8 0e       	add	r14, r24
    15bc:	e2 0e       	add	r14, r18
    15be:	10 62       	ori	r17, 0x20	; 32
    15c0:	0c c0       	rjmp	.+24     	; 0x15da <vfprintf+0x106>
    15c2:	8e 32       	cpi	r24, 0x2E	; 46
    15c4:	21 f4       	brne	.+8      	; 0x15ce <vfprintf+0xfa>
    15c6:	16 fd       	sbrc	r17, 6
    15c8:	60 c1       	rjmp	.+704    	; 0x188a <vfprintf+0x3b6>
    15ca:	10 64       	ori	r17, 0x40	; 64
    15cc:	06 c0       	rjmp	.+12     	; 0x15da <vfprintf+0x106>
    15ce:	8c 36       	cpi	r24, 0x6C	; 108
    15d0:	11 f4       	brne	.+4      	; 0x15d6 <vfprintf+0x102>
    15d2:	10 68       	ori	r17, 0x80	; 128
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <vfprintf+0x106>
    15d6:	88 36       	cpi	r24, 0x68	; 104
    15d8:	59 f4       	brne	.+22     	; 0x15f0 <vfprintf+0x11c>
    15da:	ec 85       	ldd	r30, Y+12	; 0x0c
    15dc:	fd 85       	ldd	r31, Y+13	; 0x0d
    15de:	93 fd       	sbrc	r25, 3
    15e0:	85 91       	lpm	r24, Z+
    15e2:	93 ff       	sbrs	r25, 3
    15e4:	81 91       	ld	r24, Z+
    15e6:	fd 87       	std	Y+13, r31	; 0x0d
    15e8:	ec 87       	std	Y+12, r30	; 0x0c
    15ea:	88 23       	and	r24, r24
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <vfprintf+0x11c>
    15ee:	b8 cf       	rjmp	.-144    	; 0x1560 <vfprintf+0x8c>
    15f0:	98 2f       	mov	r25, r24
    15f2:	95 54       	subi	r25, 0x45	; 69
    15f4:	93 30       	cpi	r25, 0x03	; 3
    15f6:	18 f0       	brcs	.+6      	; 0x15fe <vfprintf+0x12a>
    15f8:	90 52       	subi	r25, 0x20	; 32
    15fa:	93 30       	cpi	r25, 0x03	; 3
    15fc:	38 f4       	brcc	.+14     	; 0x160c <vfprintf+0x138>
    15fe:	24 e0       	ldi	r18, 0x04	; 4
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	a2 0e       	add	r10, r18
    1604:	b3 1e       	adc	r11, r19
    1606:	3f e3       	ldi	r19, 0x3F	; 63
    1608:	39 83       	std	Y+1, r19	; 0x01
    160a:	0f c0       	rjmp	.+30     	; 0x162a <vfprintf+0x156>
    160c:	83 36       	cpi	r24, 0x63	; 99
    160e:	31 f0       	breq	.+12     	; 0x161c <vfprintf+0x148>
    1610:	83 37       	cpi	r24, 0x73	; 115
    1612:	81 f0       	breq	.+32     	; 0x1634 <vfprintf+0x160>
    1614:	83 35       	cpi	r24, 0x53	; 83
    1616:	09 f0       	breq	.+2      	; 0x161a <vfprintf+0x146>
    1618:	56 c0       	rjmp	.+172    	; 0x16c6 <vfprintf+0x1f2>
    161a:	21 c0       	rjmp	.+66     	; 0x165e <vfprintf+0x18a>
    161c:	f5 01       	movw	r30, r10
    161e:	80 81       	ld	r24, Z
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	22 e0       	ldi	r18, 0x02	; 2
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	a2 0e       	add	r10, r18
    1628:	b3 1e       	adc	r11, r19
    162a:	21 e0       	ldi	r18, 0x01	; 1
    162c:	c2 2e       	mov	r12, r18
    162e:	d1 2c       	mov	r13, r1
    1630:	42 01       	movw	r8, r4
    1632:	13 c0       	rjmp	.+38     	; 0x165a <vfprintf+0x186>
    1634:	92 e0       	ldi	r25, 0x02	; 2
    1636:	29 2e       	mov	r2, r25
    1638:	31 2c       	mov	r3, r1
    163a:	2a 0c       	add	r2, r10
    163c:	3b 1c       	adc	r3, r11
    163e:	f5 01       	movw	r30, r10
    1640:	80 80       	ld	r8, Z
    1642:	91 80       	ldd	r9, Z+1	; 0x01
    1644:	16 ff       	sbrs	r17, 6
    1646:	03 c0       	rjmp	.+6      	; 0x164e <vfprintf+0x17a>
    1648:	6f 2d       	mov	r22, r15
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <vfprintf+0x17e>
    164e:	6f ef       	ldi	r22, 0xFF	; 255
    1650:	7f ef       	ldi	r23, 0xFF	; 255
    1652:	c4 01       	movw	r24, r8
    1654:	44 d1       	rcall	.+648    	; 0x18de <strnlen>
    1656:	6c 01       	movw	r12, r24
    1658:	51 01       	movw	r10, r2
    165a:	1f 77       	andi	r17, 0x7F	; 127
    165c:	14 c0       	rjmp	.+40     	; 0x1686 <vfprintf+0x1b2>
    165e:	82 e0       	ldi	r24, 0x02	; 2
    1660:	28 2e       	mov	r2, r24
    1662:	31 2c       	mov	r3, r1
    1664:	2a 0c       	add	r2, r10
    1666:	3b 1c       	adc	r3, r11
    1668:	f5 01       	movw	r30, r10
    166a:	80 80       	ld	r8, Z
    166c:	91 80       	ldd	r9, Z+1	; 0x01
    166e:	16 ff       	sbrs	r17, 6
    1670:	03 c0       	rjmp	.+6      	; 0x1678 <vfprintf+0x1a4>
    1672:	6f 2d       	mov	r22, r15
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	02 c0       	rjmp	.+4      	; 0x167c <vfprintf+0x1a8>
    1678:	6f ef       	ldi	r22, 0xFF	; 255
    167a:	7f ef       	ldi	r23, 0xFF	; 255
    167c:	c4 01       	movw	r24, r8
    167e:	24 d1       	rcall	.+584    	; 0x18c8 <strnlen_P>
    1680:	6c 01       	movw	r12, r24
    1682:	10 68       	ori	r17, 0x80	; 128
    1684:	51 01       	movw	r10, r2
    1686:	13 fd       	sbrc	r17, 3
    1688:	1a c0       	rjmp	.+52     	; 0x16be <vfprintf+0x1ea>
    168a:	05 c0       	rjmp	.+10     	; 0x1696 <vfprintf+0x1c2>
    168c:	80 e2       	ldi	r24, 0x20	; 32
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	b3 01       	movw	r22, r6
    1692:	a6 de       	rcall	.-692    	; 0x13e0 <fputc>
    1694:	ea 94       	dec	r14
    1696:	8e 2d       	mov	r24, r14
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	c8 16       	cp	r12, r24
    169c:	d9 06       	cpc	r13, r25
    169e:	b0 f3       	brcs	.-20     	; 0x168c <vfprintf+0x1b8>
    16a0:	0e c0       	rjmp	.+28     	; 0x16be <vfprintf+0x1ea>
    16a2:	f4 01       	movw	r30, r8
    16a4:	17 fd       	sbrc	r17, 7
    16a6:	85 91       	lpm	r24, Z+
    16a8:	17 ff       	sbrs	r17, 7
    16aa:	81 91       	ld	r24, Z+
    16ac:	4f 01       	movw	r8, r30
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	b3 01       	movw	r22, r6
    16b2:	96 de       	rcall	.-724    	; 0x13e0 <fputc>
    16b4:	e1 10       	cpse	r14, r1
    16b6:	ea 94       	dec	r14
    16b8:	08 94       	sec
    16ba:	c1 08       	sbc	r12, r1
    16bc:	d1 08       	sbc	r13, r1
    16be:	c1 14       	cp	r12, r1
    16c0:	d1 04       	cpc	r13, r1
    16c2:	79 f7       	brne	.-34     	; 0x16a2 <vfprintf+0x1ce>
    16c4:	df c0       	rjmp	.+446    	; 0x1884 <vfprintf+0x3b0>
    16c6:	84 36       	cpi	r24, 0x64	; 100
    16c8:	11 f0       	breq	.+4      	; 0x16ce <vfprintf+0x1fa>
    16ca:	89 36       	cpi	r24, 0x69	; 105
    16cc:	49 f5       	brne	.+82     	; 0x1720 <vfprintf+0x24c>
    16ce:	f5 01       	movw	r30, r10
    16d0:	17 ff       	sbrs	r17, 7
    16d2:	07 c0       	rjmp	.+14     	; 0x16e2 <vfprintf+0x20e>
    16d4:	80 81       	ld	r24, Z
    16d6:	91 81       	ldd	r25, Z+1	; 0x01
    16d8:	a2 81       	ldd	r26, Z+2	; 0x02
    16da:	b3 81       	ldd	r27, Z+3	; 0x03
    16dc:	24 e0       	ldi	r18, 0x04	; 4
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	08 c0       	rjmp	.+16     	; 0x16f2 <vfprintf+0x21e>
    16e2:	80 81       	ld	r24, Z
    16e4:	91 81       	ldd	r25, Z+1	; 0x01
    16e6:	aa 27       	eor	r26, r26
    16e8:	97 fd       	sbrc	r25, 7
    16ea:	a0 95       	com	r26
    16ec:	ba 2f       	mov	r27, r26
    16ee:	22 e0       	ldi	r18, 0x02	; 2
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	a2 0e       	add	r10, r18
    16f4:	b3 1e       	adc	r11, r19
    16f6:	01 2f       	mov	r16, r17
    16f8:	0f 76       	andi	r16, 0x6F	; 111
    16fa:	b7 ff       	sbrs	r27, 7
    16fc:	08 c0       	rjmp	.+16     	; 0x170e <vfprintf+0x23a>
    16fe:	b0 95       	com	r27
    1700:	a0 95       	com	r26
    1702:	90 95       	com	r25
    1704:	81 95       	neg	r24
    1706:	9f 4f       	sbci	r25, 0xFF	; 255
    1708:	af 4f       	sbci	r26, 0xFF	; 255
    170a:	bf 4f       	sbci	r27, 0xFF	; 255
    170c:	00 68       	ori	r16, 0x80	; 128
    170e:	bc 01       	movw	r22, r24
    1710:	cd 01       	movw	r24, r26
    1712:	a2 01       	movw	r20, r4
    1714:	2a e0       	ldi	r18, 0x0A	; 10
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	ed d0       	rcall	.+474    	; 0x18f4 <__ultoa_invert>
    171a:	d8 2e       	mov	r13, r24
    171c:	d4 18       	sub	r13, r4
    171e:	3e c0       	rjmp	.+124    	; 0x179c <vfprintf+0x2c8>
    1720:	85 37       	cpi	r24, 0x75	; 117
    1722:	21 f4       	brne	.+8      	; 0x172c <vfprintf+0x258>
    1724:	1f 7e       	andi	r17, 0xEF	; 239
    1726:	2a e0       	ldi	r18, 0x0A	; 10
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	20 c0       	rjmp	.+64     	; 0x176c <vfprintf+0x298>
    172c:	19 7f       	andi	r17, 0xF9	; 249
    172e:	8f 36       	cpi	r24, 0x6F	; 111
    1730:	a9 f0       	breq	.+42     	; 0x175c <vfprintf+0x288>
    1732:	80 37       	cpi	r24, 0x70	; 112
    1734:	20 f4       	brcc	.+8      	; 0x173e <vfprintf+0x26a>
    1736:	88 35       	cpi	r24, 0x58	; 88
    1738:	09 f0       	breq	.+2      	; 0x173c <vfprintf+0x268>
    173a:	a7 c0       	rjmp	.+334    	; 0x188a <vfprintf+0x3b6>
    173c:	0b c0       	rjmp	.+22     	; 0x1754 <vfprintf+0x280>
    173e:	80 37       	cpi	r24, 0x70	; 112
    1740:	21 f0       	breq	.+8      	; 0x174a <vfprintf+0x276>
    1742:	88 37       	cpi	r24, 0x78	; 120
    1744:	09 f0       	breq	.+2      	; 0x1748 <vfprintf+0x274>
    1746:	a1 c0       	rjmp	.+322    	; 0x188a <vfprintf+0x3b6>
    1748:	01 c0       	rjmp	.+2      	; 0x174c <vfprintf+0x278>
    174a:	10 61       	ori	r17, 0x10	; 16
    174c:	14 ff       	sbrs	r17, 4
    174e:	09 c0       	rjmp	.+18     	; 0x1762 <vfprintf+0x28e>
    1750:	14 60       	ori	r17, 0x04	; 4
    1752:	07 c0       	rjmp	.+14     	; 0x1762 <vfprintf+0x28e>
    1754:	14 ff       	sbrs	r17, 4
    1756:	08 c0       	rjmp	.+16     	; 0x1768 <vfprintf+0x294>
    1758:	16 60       	ori	r17, 0x06	; 6
    175a:	06 c0       	rjmp	.+12     	; 0x1768 <vfprintf+0x294>
    175c:	28 e0       	ldi	r18, 0x08	; 8
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	05 c0       	rjmp	.+10     	; 0x176c <vfprintf+0x298>
    1762:	20 e1       	ldi	r18, 0x10	; 16
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	02 c0       	rjmp	.+4      	; 0x176c <vfprintf+0x298>
    1768:	20 e1       	ldi	r18, 0x10	; 16
    176a:	32 e0       	ldi	r19, 0x02	; 2
    176c:	f5 01       	movw	r30, r10
    176e:	17 ff       	sbrs	r17, 7
    1770:	07 c0       	rjmp	.+14     	; 0x1780 <vfprintf+0x2ac>
    1772:	60 81       	ld	r22, Z
    1774:	71 81       	ldd	r23, Z+1	; 0x01
    1776:	82 81       	ldd	r24, Z+2	; 0x02
    1778:	93 81       	ldd	r25, Z+3	; 0x03
    177a:	44 e0       	ldi	r20, 0x04	; 4
    177c:	50 e0       	ldi	r21, 0x00	; 0
    177e:	06 c0       	rjmp	.+12     	; 0x178c <vfprintf+0x2b8>
    1780:	60 81       	ld	r22, Z
    1782:	71 81       	ldd	r23, Z+1	; 0x01
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	42 e0       	ldi	r20, 0x02	; 2
    178a:	50 e0       	ldi	r21, 0x00	; 0
    178c:	a4 0e       	add	r10, r20
    178e:	b5 1e       	adc	r11, r21
    1790:	a2 01       	movw	r20, r4
    1792:	b0 d0       	rcall	.+352    	; 0x18f4 <__ultoa_invert>
    1794:	d8 2e       	mov	r13, r24
    1796:	d4 18       	sub	r13, r4
    1798:	01 2f       	mov	r16, r17
    179a:	0f 77       	andi	r16, 0x7F	; 127
    179c:	06 ff       	sbrs	r16, 6
    179e:	09 c0       	rjmp	.+18     	; 0x17b2 <vfprintf+0x2de>
    17a0:	0e 7f       	andi	r16, 0xFE	; 254
    17a2:	df 14       	cp	r13, r15
    17a4:	30 f4       	brcc	.+12     	; 0x17b2 <vfprintf+0x2de>
    17a6:	04 ff       	sbrs	r16, 4
    17a8:	06 c0       	rjmp	.+12     	; 0x17b6 <vfprintf+0x2e2>
    17aa:	02 fd       	sbrc	r16, 2
    17ac:	04 c0       	rjmp	.+8      	; 0x17b6 <vfprintf+0x2e2>
    17ae:	0f 7e       	andi	r16, 0xEF	; 239
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <vfprintf+0x2e2>
    17b2:	1d 2d       	mov	r17, r13
    17b4:	01 c0       	rjmp	.+2      	; 0x17b8 <vfprintf+0x2e4>
    17b6:	1f 2d       	mov	r17, r15
    17b8:	80 2f       	mov	r24, r16
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	04 ff       	sbrs	r16, 4
    17be:	0c c0       	rjmp	.+24     	; 0x17d8 <vfprintf+0x304>
    17c0:	fe 01       	movw	r30, r28
    17c2:	ed 0d       	add	r30, r13
    17c4:	f1 1d       	adc	r31, r1
    17c6:	20 81       	ld	r18, Z
    17c8:	20 33       	cpi	r18, 0x30	; 48
    17ca:	11 f4       	brne	.+4      	; 0x17d0 <vfprintf+0x2fc>
    17cc:	09 7e       	andi	r16, 0xE9	; 233
    17ce:	09 c0       	rjmp	.+18     	; 0x17e2 <vfprintf+0x30e>
    17d0:	02 ff       	sbrs	r16, 2
    17d2:	06 c0       	rjmp	.+12     	; 0x17e0 <vfprintf+0x30c>
    17d4:	1e 5f       	subi	r17, 0xFE	; 254
    17d6:	05 c0       	rjmp	.+10     	; 0x17e2 <vfprintf+0x30e>
    17d8:	86 78       	andi	r24, 0x86	; 134
    17da:	90 70       	andi	r25, 0x00	; 0
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	09 f0       	breq	.+2      	; 0x17e2 <vfprintf+0x30e>
    17e0:	1f 5f       	subi	r17, 0xFF	; 255
    17e2:	80 2e       	mov	r8, r16
    17e4:	99 24       	eor	r9, r9
    17e6:	03 fd       	sbrc	r16, 3
    17e8:	11 c0       	rjmp	.+34     	; 0x180c <vfprintf+0x338>
    17ea:	00 ff       	sbrs	r16, 0
    17ec:	0c c0       	rjmp	.+24     	; 0x1806 <vfprintf+0x332>
    17ee:	fd 2c       	mov	r15, r13
    17f0:	1e 15       	cp	r17, r14
    17f2:	48 f4       	brcc	.+18     	; 0x1806 <vfprintf+0x332>
    17f4:	fe 0c       	add	r15, r14
    17f6:	f1 1a       	sub	r15, r17
    17f8:	1e 2d       	mov	r17, r14
    17fa:	05 c0       	rjmp	.+10     	; 0x1806 <vfprintf+0x332>
    17fc:	80 e2       	ldi	r24, 0x20	; 32
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	b3 01       	movw	r22, r6
    1802:	ee dd       	rcall	.-1060   	; 0x13e0 <fputc>
    1804:	1f 5f       	subi	r17, 0xFF	; 255
    1806:	1e 15       	cp	r17, r14
    1808:	c8 f3       	brcs	.-14     	; 0x17fc <vfprintf+0x328>
    180a:	04 c0       	rjmp	.+8      	; 0x1814 <vfprintf+0x340>
    180c:	1e 15       	cp	r17, r14
    180e:	10 f4       	brcc	.+4      	; 0x1814 <vfprintf+0x340>
    1810:	e1 1a       	sub	r14, r17
    1812:	01 c0       	rjmp	.+2      	; 0x1816 <vfprintf+0x342>
    1814:	ee 24       	eor	r14, r14
    1816:	84 fe       	sbrs	r8, 4
    1818:	0e c0       	rjmp	.+28     	; 0x1836 <vfprintf+0x362>
    181a:	80 e3       	ldi	r24, 0x30	; 48
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	b3 01       	movw	r22, r6
    1820:	df dd       	rcall	.-1090   	; 0x13e0 <fputc>
    1822:	82 fe       	sbrs	r8, 2
    1824:	1d c0       	rjmp	.+58     	; 0x1860 <vfprintf+0x38c>
    1826:	81 fe       	sbrs	r8, 1
    1828:	03 c0       	rjmp	.+6      	; 0x1830 <vfprintf+0x35c>
    182a:	88 e5       	ldi	r24, 0x58	; 88
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	10 c0       	rjmp	.+32     	; 0x1850 <vfprintf+0x37c>
    1830:	88 e7       	ldi	r24, 0x78	; 120
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	0d c0       	rjmp	.+26     	; 0x1850 <vfprintf+0x37c>
    1836:	c4 01       	movw	r24, r8
    1838:	86 78       	andi	r24, 0x86	; 134
    183a:	90 70       	andi	r25, 0x00	; 0
    183c:	00 97       	sbiw	r24, 0x00	; 0
    183e:	81 f0       	breq	.+32     	; 0x1860 <vfprintf+0x38c>
    1840:	81 fc       	sbrc	r8, 1
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <vfprintf+0x374>
    1844:	80 e2       	ldi	r24, 0x20	; 32
    1846:	01 c0       	rjmp	.+2      	; 0x184a <vfprintf+0x376>
    1848:	8b e2       	ldi	r24, 0x2B	; 43
    184a:	07 fd       	sbrc	r16, 7
    184c:	8d e2       	ldi	r24, 0x2D	; 45
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	b3 01       	movw	r22, r6
    1852:	c6 dd       	rcall	.-1140   	; 0x13e0 <fputc>
    1854:	05 c0       	rjmp	.+10     	; 0x1860 <vfprintf+0x38c>
    1856:	80 e3       	ldi	r24, 0x30	; 48
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	b3 01       	movw	r22, r6
    185c:	c1 dd       	rcall	.-1150   	; 0x13e0 <fputc>
    185e:	fa 94       	dec	r15
    1860:	df 14       	cp	r13, r15
    1862:	c8 f3       	brcs	.-14     	; 0x1856 <vfprintf+0x382>
    1864:	da 94       	dec	r13
    1866:	f2 01       	movw	r30, r4
    1868:	ed 0d       	add	r30, r13
    186a:	f1 1d       	adc	r31, r1
    186c:	80 81       	ld	r24, Z
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	b3 01       	movw	r22, r6
    1872:	b6 dd       	rcall	.-1172   	; 0x13e0 <fputc>
    1874:	dd 20       	and	r13, r13
    1876:	b1 f7       	brne	.-20     	; 0x1864 <vfprintf+0x390>
    1878:	05 c0       	rjmp	.+10     	; 0x1884 <vfprintf+0x3b0>
    187a:	80 e2       	ldi	r24, 0x20	; 32
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	b3 01       	movw	r22, r6
    1880:	af dd       	rcall	.-1186   	; 0x13e0 <fputc>
    1882:	ea 94       	dec	r14
    1884:	ee 20       	and	r14, r14
    1886:	c9 f7       	brne	.-14     	; 0x187a <vfprintf+0x3a6>
    1888:	4d ce       	rjmp	.-870    	; 0x1524 <vfprintf+0x50>
    188a:	f3 01       	movw	r30, r6
    188c:	86 81       	ldd	r24, Z+6	; 0x06
    188e:	97 81       	ldd	r25, Z+7	; 0x07
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <vfprintf+0x3c2>
    1892:	8f ef       	ldi	r24, 0xFF	; 255
    1894:	9f ef       	ldi	r25, 0xFF	; 255
    1896:	2d 96       	adiw	r28, 0x0d	; 13
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	1f 91       	pop	r17
    18a8:	0f 91       	pop	r16
    18aa:	ff 90       	pop	r15
    18ac:	ef 90       	pop	r14
    18ae:	df 90       	pop	r13
    18b0:	cf 90       	pop	r12
    18b2:	bf 90       	pop	r11
    18b4:	af 90       	pop	r10
    18b6:	9f 90       	pop	r9
    18b8:	8f 90       	pop	r8
    18ba:	7f 90       	pop	r7
    18bc:	6f 90       	pop	r6
    18be:	5f 90       	pop	r5
    18c0:	4f 90       	pop	r4
    18c2:	3f 90       	pop	r3
    18c4:	2f 90       	pop	r2
    18c6:	08 95       	ret

000018c8 <strnlen_P>:
    18c8:	fc 01       	movw	r30, r24
    18ca:	05 90       	lpm	r0, Z+
    18cc:	61 50       	subi	r22, 0x01	; 1
    18ce:	70 40       	sbci	r23, 0x00	; 0
    18d0:	01 10       	cpse	r0, r1
    18d2:	d8 f7       	brcc	.-10     	; 0x18ca <strnlen_P+0x2>
    18d4:	80 95       	com	r24
    18d6:	90 95       	com	r25
    18d8:	8e 0f       	add	r24, r30
    18da:	9f 1f       	adc	r25, r31
    18dc:	08 95       	ret

000018de <strnlen>:
    18de:	fc 01       	movw	r30, r24
    18e0:	61 50       	subi	r22, 0x01	; 1
    18e2:	70 40       	sbci	r23, 0x00	; 0
    18e4:	01 90       	ld	r0, Z+
    18e6:	01 10       	cpse	r0, r1
    18e8:	d8 f7       	brcc	.-10     	; 0x18e0 <strnlen+0x2>
    18ea:	80 95       	com	r24
    18ec:	90 95       	com	r25
    18ee:	8e 0f       	add	r24, r30
    18f0:	9f 1f       	adc	r25, r31
    18f2:	08 95       	ret

000018f4 <__ultoa_invert>:
    18f4:	fa 01       	movw	r30, r20
    18f6:	aa 27       	eor	r26, r26
    18f8:	28 30       	cpi	r18, 0x08	; 8
    18fa:	51 f1       	breq	.+84     	; 0x1950 <__ultoa_invert+0x5c>
    18fc:	20 31       	cpi	r18, 0x10	; 16
    18fe:	81 f1       	breq	.+96     	; 0x1960 <__ultoa_invert+0x6c>
    1900:	e8 94       	clt
    1902:	6f 93       	push	r22
    1904:	6e 7f       	andi	r22, 0xFE	; 254
    1906:	6e 5f       	subi	r22, 0xFE	; 254
    1908:	7f 4f       	sbci	r23, 0xFF	; 255
    190a:	8f 4f       	sbci	r24, 0xFF	; 255
    190c:	9f 4f       	sbci	r25, 0xFF	; 255
    190e:	af 4f       	sbci	r26, 0xFF	; 255
    1910:	b1 e0       	ldi	r27, 0x01	; 1
    1912:	3e d0       	rcall	.+124    	; 0x1990 <__ultoa_invert+0x9c>
    1914:	b4 e0       	ldi	r27, 0x04	; 4
    1916:	3c d0       	rcall	.+120    	; 0x1990 <__ultoa_invert+0x9c>
    1918:	67 0f       	add	r22, r23
    191a:	78 1f       	adc	r23, r24
    191c:	89 1f       	adc	r24, r25
    191e:	9a 1f       	adc	r25, r26
    1920:	a1 1d       	adc	r26, r1
    1922:	68 0f       	add	r22, r24
    1924:	79 1f       	adc	r23, r25
    1926:	8a 1f       	adc	r24, r26
    1928:	91 1d       	adc	r25, r1
    192a:	a1 1d       	adc	r26, r1
    192c:	6a 0f       	add	r22, r26
    192e:	71 1d       	adc	r23, r1
    1930:	81 1d       	adc	r24, r1
    1932:	91 1d       	adc	r25, r1
    1934:	a1 1d       	adc	r26, r1
    1936:	20 d0       	rcall	.+64     	; 0x1978 <__ultoa_invert+0x84>
    1938:	09 f4       	brne	.+2      	; 0x193c <__ultoa_invert+0x48>
    193a:	68 94       	set
    193c:	3f 91       	pop	r19
    193e:	2a e0       	ldi	r18, 0x0A	; 10
    1940:	26 9f       	mul	r18, r22
    1942:	11 24       	eor	r1, r1
    1944:	30 19       	sub	r19, r0
    1946:	30 5d       	subi	r19, 0xD0	; 208
    1948:	31 93       	st	Z+, r19
    194a:	de f6       	brtc	.-74     	; 0x1902 <__ultoa_invert+0xe>
    194c:	cf 01       	movw	r24, r30
    194e:	08 95       	ret
    1950:	46 2f       	mov	r20, r22
    1952:	47 70       	andi	r20, 0x07	; 7
    1954:	40 5d       	subi	r20, 0xD0	; 208
    1956:	41 93       	st	Z+, r20
    1958:	b3 e0       	ldi	r27, 0x03	; 3
    195a:	0f d0       	rcall	.+30     	; 0x197a <__ultoa_invert+0x86>
    195c:	c9 f7       	brne	.-14     	; 0x1950 <__ultoa_invert+0x5c>
    195e:	f6 cf       	rjmp	.-20     	; 0x194c <__ultoa_invert+0x58>
    1960:	46 2f       	mov	r20, r22
    1962:	4f 70       	andi	r20, 0x0F	; 15
    1964:	40 5d       	subi	r20, 0xD0	; 208
    1966:	4a 33       	cpi	r20, 0x3A	; 58
    1968:	18 f0       	brcs	.+6      	; 0x1970 <__ultoa_invert+0x7c>
    196a:	49 5d       	subi	r20, 0xD9	; 217
    196c:	31 fd       	sbrc	r19, 1
    196e:	40 52       	subi	r20, 0x20	; 32
    1970:	41 93       	st	Z+, r20
    1972:	02 d0       	rcall	.+4      	; 0x1978 <__ultoa_invert+0x84>
    1974:	a9 f7       	brne	.-22     	; 0x1960 <__ultoa_invert+0x6c>
    1976:	ea cf       	rjmp	.-44     	; 0x194c <__ultoa_invert+0x58>
    1978:	b4 e0       	ldi	r27, 0x04	; 4
    197a:	a6 95       	lsr	r26
    197c:	97 95       	ror	r25
    197e:	87 95       	ror	r24
    1980:	77 95       	ror	r23
    1982:	67 95       	ror	r22
    1984:	ba 95       	dec	r27
    1986:	c9 f7       	brne	.-14     	; 0x197a <__ultoa_invert+0x86>
    1988:	00 97       	sbiw	r24, 0x00	; 0
    198a:	61 05       	cpc	r22, r1
    198c:	71 05       	cpc	r23, r1
    198e:	08 95       	ret
    1990:	9b 01       	movw	r18, r22
    1992:	ac 01       	movw	r20, r24
    1994:	0a 2e       	mov	r0, r26
    1996:	06 94       	lsr	r0
    1998:	57 95       	ror	r21
    199a:	47 95       	ror	r20
    199c:	37 95       	ror	r19
    199e:	27 95       	ror	r18
    19a0:	ba 95       	dec	r27
    19a2:	c9 f7       	brne	.-14     	; 0x1996 <__ultoa_invert+0xa2>
    19a4:	62 0f       	add	r22, r18
    19a6:	73 1f       	adc	r23, r19
    19a8:	84 1f       	adc	r24, r20
    19aa:	95 1f       	adc	r25, r21
    19ac:	a0 1d       	adc	r26, r0
    19ae:	08 95       	ret

000019b0 <_exit>:
    19b0:	f8 94       	cli

000019b2 <__stop_program>:
    19b2:	ff cf       	rjmp	.-2      	; 0x19b2 <__stop_program>
