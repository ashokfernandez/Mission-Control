
AndroidAccessoryHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  00001a00  00001a94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080017a  0080017a  00001b0e  2**0
                  ALLOC
  3 .stab         00000e28  00000000  00000000  00001b10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000256  00000000  00000000  00002938  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000478  00000000  00000000  00002b90  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005d3e  00000000  00000000  00003008  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d97  00000000  00000000  00008d46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003084  00000000  00000000  0000aadd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b7c  00000000  00000000  0000db64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000028f7  00000000  00000000  0000e6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003f26  00000000  00000000  00010fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000460  00000000  00000000  00014efd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	af c1       	rjmp	.+862    	; 0x360 <__ctors_end>
       2:	00 00       	nop
       4:	cc c1       	rjmp	.+920    	; 0x39e <__bad_interrupt>
       6:	00 00       	nop
       8:	ca c1       	rjmp	.+916    	; 0x39e <__bad_interrupt>
       a:	00 00       	nop
       c:	c8 c1       	rjmp	.+912    	; 0x39e <__bad_interrupt>
       e:	00 00       	nop
      10:	c6 c1       	rjmp	.+908    	; 0x39e <__bad_interrupt>
      12:	00 00       	nop
      14:	c4 c1       	rjmp	.+904    	; 0x39e <__bad_interrupt>
      16:	00 00       	nop
      18:	c2 c1       	rjmp	.+900    	; 0x39e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c0 c1       	rjmp	.+896    	; 0x39e <__bad_interrupt>
      1e:	00 00       	nop
      20:	be c1       	rjmp	.+892    	; 0x39e <__bad_interrupt>
      22:	00 00       	nop
      24:	bc c1       	rjmp	.+888    	; 0x39e <__bad_interrupt>
      26:	00 00       	nop
      28:	23 c7       	rjmp	.+3654   	; 0xe70 <__vector_10>
      2a:	00 00       	nop
      2c:	b8 c1       	rjmp	.+880    	; 0x39e <__bad_interrupt>
      2e:	00 00       	nop
      30:	b6 c1       	rjmp	.+876    	; 0x39e <__bad_interrupt>
      32:	00 00       	nop
      34:	b4 c1       	rjmp	.+872    	; 0x39e <__bad_interrupt>
      36:	00 00       	nop
      38:	b2 c1       	rjmp	.+868    	; 0x39e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b0 c1       	rjmp	.+864    	; 0x39e <__bad_interrupt>
      3e:	00 00       	nop
      40:	ae c1       	rjmp	.+860    	; 0x39e <__bad_interrupt>
      42:	00 00       	nop
      44:	ac c1       	rjmp	.+856    	; 0x39e <__bad_interrupt>
      46:	00 00       	nop
      48:	aa c1       	rjmp	.+852    	; 0x39e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a8 c1       	rjmp	.+848    	; 0x39e <__bad_interrupt>
      4e:	00 00       	nop
      50:	a6 c1       	rjmp	.+844    	; 0x39e <__bad_interrupt>
      52:	00 00       	nop
      54:	a4 c1       	rjmp	.+840    	; 0x39e <__bad_interrupt>
      56:	00 00       	nop
      58:	a2 c1       	rjmp	.+836    	; 0x39e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a0 c1       	rjmp	.+832    	; 0x39e <__bad_interrupt>
      5e:	00 00       	nop
      60:	9e c1       	rjmp	.+828    	; 0x39e <__bad_interrupt>
      62:	00 00       	nop
      64:	9c c1       	rjmp	.+824    	; 0x39e <__bad_interrupt>
      66:	00 00       	nop
      68:	9a c1       	rjmp	.+820    	; 0x39e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	98 c1       	rjmp	.+816    	; 0x39e <__bad_interrupt>
      6e:	00 00       	nop
      70:	96 c1       	rjmp	.+812    	; 0x39e <__bad_interrupt>
      72:	00 00       	nop
      74:	94 c1       	rjmp	.+808    	; 0x39e <__bad_interrupt>
      76:	00 00       	nop
      78:	92 c1       	rjmp	.+804    	; 0x39e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	90 c1       	rjmp	.+800    	; 0x39e <__bad_interrupt>
      7e:	00 00       	nop
      80:	8e c1       	rjmp	.+796    	; 0x39e <__bad_interrupt>
      82:	00 00       	nop
      84:	8c c1       	rjmp	.+792    	; 0x39e <__bad_interrupt>
      86:	00 00       	nop
      88:	8a c1       	rjmp	.+788    	; 0x39e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	88 c1       	rjmp	.+784    	; 0x39e <__bad_interrupt>
      8e:	00 00       	nop
      90:	86 c1       	rjmp	.+780    	; 0x39e <__bad_interrupt>
      92:	00 00       	nop
      94:	84 c1       	rjmp	.+776    	; 0x39e <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4289>:
      98:	1b 5b 33 36 6d 41 6e 64 72 6f 69 64 20 41 63 63     .[36mAndroid Acc
      a8:	65 73 73 6f 72 79 20 48 6f 73 74 20 44 65 6d 6f     essory Host Demo
      b8:	20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33 37 6d      running....[37m
      c8:	00                                                  .

000000c9 <__c.4303>:
      c9:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
      d9:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

000000e6 <__c.4308>:
      e6:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
      f6:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     106:	00                                                  .

00000107 <__c.4313>:
     107:	47 65 74 74 69 6e 67 20 44 65 76 69 63 65 20 44     Getting Device D
     117:	61 74 61 2e 0d 0a 00                                ata....

0000011e <__c.4317>:
     11e:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     12e:	6f 72 20 28 47 65 74 20 44 65 76 69 63 65 29 2e     or (Get Device).
     13e:	0d 0a 00                                            ...

00000141 <__c.4319>:
     141:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     151:	69 63 65 2e 0d 0a 00                                ice....

00000158 <__c.4321>:
     158:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     168:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

00000172 <__c.4323>:
     172:	41 6e 64 72 6f 69 64 20 44 65 76 69 63 65 20 44     Android Device D
     182:	65 74 65 63 74 65 64 20 2d 20 25 73 41 63 63 65     etected - %sAcce
     192:	73 73 6f 72 79 20 6d 6f 64 65 2e 0d 0a 00           ssory mode....

000001a0 <__c.4326>:
     1a0:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1b0:	6f 72 20 28 47 65 74 20 50 72 6f 74 6f 63 6f 6c     or (Get Protocol
     1c0:	29 2e 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43 6f     )... -- Error Co
     1d0:	64 65 3a 20 25 64 0d 0a 1b 5b 33 37 6d 00           de: %d...[37m.

000001de <__c.4328>:
     1de:	1b 5b 33 31 6d 41 63 63 65 73 73 6f 72 79 20 4d     .[31mAccessory M
     1ee:	6f 64 65 20 4e 6f 74 20 53 75 70 70 6f 72 74 65     ode Not Supporte
     1fe:	64 2e 00                                            d..

00000201 <__c.4330>:
     201:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     211:	61 74 61 2e 0d 0a 00                                ata....

00000218 <__c.4332>:
     218:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     228:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     238:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000242 <__c.4334>:
     242:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     252:	69 63 65 2e 0d 0a 00                                ice....

00000259 <__c.4336>:
     259:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     269:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

00000273 <__c.4338>:
     273:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     283:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     293:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     2a3:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     2b3:	37 6d 00                                            7m.

000002b6 <__c.4340>:
     2b6:	41 63 63 65 73 73 6f 72 79 20 4d 6f 64 65 20 41     Accessory Mode A
     2c6:	6e 64 72 6f 69 64 20 45 6e 75 6d 65 72 61 74 65     ndroid Enumerate
     2d6:	64 2e 0d 0a 00                                      d....

000002db <__c.4345>:
     2db:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     2eb:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     2fb:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000030a <__c.4352>:
     30a:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     31a:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     32a:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     33a:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     34a:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     35a:	1b 5b 33 37 6d 00                                   .[37m.

00000360 <__ctors_end>:
     360:	11 24       	eor	r1, r1
     362:	1f be       	out	0x3f, r1	; 63
     364:	cf ef       	ldi	r28, 0xFF	; 255
     366:	d0 e2       	ldi	r29, 0x20	; 32
     368:	de bf       	out	0x3e, r29	; 62
     36a:	cd bf       	out	0x3d, r28	; 61

0000036c <__do_copy_data>:
     36c:	11 e0       	ldi	r17, 0x01	; 1
     36e:	a0 e0       	ldi	r26, 0x00	; 0
     370:	b1 e0       	ldi	r27, 0x01	; 1
     372:	e0 e0       	ldi	r30, 0x00	; 0
     374:	fa e1       	ldi	r31, 0x1A	; 26
     376:	00 e0       	ldi	r16, 0x00	; 0
     378:	0b bf       	out	0x3b, r16	; 59
     37a:	02 c0       	rjmp	.+4      	; 0x380 <__do_copy_data+0x14>
     37c:	07 90       	elpm	r0, Z+
     37e:	0d 92       	st	X+, r0
     380:	aa 37       	cpi	r26, 0x7A	; 122
     382:	b1 07       	cpc	r27, r17
     384:	d9 f7       	brne	.-10     	; 0x37c <__do_copy_data+0x10>
     386:	1b be       	out	0x3b, r1	; 59

00000388 <__do_clear_bss>:
     388:	11 e0       	ldi	r17, 0x01	; 1
     38a:	aa e7       	ldi	r26, 0x7A	; 122
     38c:	b1 e0       	ldi	r27, 0x01	; 1
     38e:	01 c0       	rjmp	.+2      	; 0x392 <.do_clear_bss_start>

00000390 <.do_clear_bss_loop>:
     390:	1d 92       	st	X+, r1

00000392 <.do_clear_bss_start>:
     392:	ac 39       	cpi	r26, 0x9C	; 156
     394:	b1 07       	cpc	r27, r17
     396:	e1 f7       	brne	.-8      	; 0x390 <.do_clear_bss_loop>
     398:	68 d0       	rcall	.+208    	; 0x46a <main>
     39a:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <_exit>

0000039e <__bad_interrupt>:
     39e:	30 ce       	rjmp	.-928    	; 0x0 <__vectors>

000003a0 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     3a0:	9b b1       	in	r25, 0x0b	; 11
     3a2:	9f 70       	andi	r25, 0x0F	; 15
     3a4:	98 2b       	or	r25, r24
     3a6:	9b b9       	out	0x0b, r25	; 11
			}
     3a8:	08 95       	ret

000003aa <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     3aa:	84 b7       	in	r24, 0x34	; 52
     3ac:	87 7f       	andi	r24, 0xF7	; 247
     3ae:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     3b0:	28 e1       	ldi	r18, 0x18	; 24
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	f8 94       	cli
     3b6:	20 93 60 00 	sts	0x0060, r18
     3ba:	10 92 60 00 	sts	0x0060, r1
     3be:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	80 e8       	ldi	r24, 0x80	; 128
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	80 93 61 00 	sts	0x0061, r24
     3cc:	90 93 61 00 	sts	0x0061, r25
     3d0:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     3d2:	83 e3       	ldi	r24, 0x33	; 51
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	90 93 cd 00 	sts	0x00CD, r25
     3da:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     3de:	86 e0       	ldi	r24, 0x06	; 6
     3e0:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     3e4:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     3e8:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     3ec:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     3ee:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     3f0:	8a b1       	in	r24, 0x0a	; 10
     3f2:	80 6f       	ori	r24, 0xF0	; 240
     3f4:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     3f6:	8b b1       	in	r24, 0x0b	; 11
     3f8:	8f 70       	andi	r24, 0x0F	; 15
     3fa:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     3fc:	1e d5       	rcall	.+2620   	; 0xe3a <USB_Init>
     3fe:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	f7 c7       	rjmp	.+4078   	; 0x13f2 <Serial_CreateStream>

00000404 <AndroidHost_Task>:
     404:	80 91 87 01 	lds	r24, 0x0187
}
     408:	8b 30       	cpi	r24, 0x0B	; 11

/** Task to set the configuration of the attached device after it has been enumerated. */
void AndroidHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     40a:	71 f5       	brne	.+92     	; 0x468 <AndroidHost_Task+0x64>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     412:	80 91 a9 00 	lds	r24, 0x00A9
     416:	8f 7b       	andi	r24, 0xBF	; 191
     418:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     41c:	80 91 a6 00 	lds	r24, 0x00A6
	/* Select the data IN pipe */
	Pipe_SelectPipe(ANDROID_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (Pipe_IsINReceived())
     420:	80 ff       	sbrs	r24, 0
     422:	1d c0       	rjmp	.+58     	; 0x45e <AndroidHost_Task+0x5a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     424:	80 91 a9 00 	lds	r24, 0x00A9
     428:	80 64       	ori	r24, 0x40	; 64
     42a:	80 93 a9 00 	sts	0x00A9, r24
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     42e:	80 91 a6 00 	lds	r24, 0x00A6
	{
		/* Re-freeze IN pipe after the packet has been received */
		Pipe_Freeze();

		/* Check if data is in the pipe */
		if (Pipe_IsReadWriteAllowed())
     432:	85 ff       	sbrs	r24, 5
     434:	0f c0       	rjmp	.+30     	; 0x454 <AndroidHost_Task+0x50>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     436:	90 91 af 00 	lds	r25, 0x00AF
		{
			uint8_t NextReceivedByte = Pipe_Read_8();
			uint8_t LEDMask          = LEDS_NO_LEDS;

			if (NextReceivedByte & 0x01)
     43a:	90 ff       	sbrs	r25, 0
     43c:	02 c0       	rjmp	.+4      	; 0x442 <AndroidHost_Task+0x3e>
			  LEDMask |= LEDS_LED1;
     43e:	80 e1       	ldi	r24, 0x10	; 16
     440:	01 c0       	rjmp	.+2      	; 0x444 <AndroidHost_Task+0x40>

		/* Check if data is in the pipe */
		if (Pipe_IsReadWriteAllowed())
		{
			uint8_t NextReceivedByte = Pipe_Read_8();
			uint8_t LEDMask          = LEDS_NO_LEDS;
     442:	80 e0       	ldi	r24, 0x00	; 0

			if (NextReceivedByte & 0x01)
			  LEDMask |= LEDS_LED1;

			if (NextReceivedByte & 0x02)
     444:	91 fd       	sbrc	r25, 1
			  LEDMask |= LEDS_LED2;
     446:	80 62       	ori	r24, 0x20	; 32

			if (NextReceivedByte & 0x04)
     448:	92 fd       	sbrc	r25, 2
			  LEDMask |= LEDS_LED3;
     44a:	80 68       	ori	r24, 0x80	; 128

			if (NextReceivedByte & 0x08)
     44c:	93 fd       	sbrc	r25, 3
			  LEDMask |= LEDS_LED4;
     44e:	80 64       	ori	r24, 0x40	; 64

			LEDs_SetAllLEDs(LEDMask);
     450:	a7 df       	rcall	.-178    	; 0x3a0 <LEDs_SetAllLEDs>
     452:	05 c0       	rjmp	.+10     	; 0x45e <AndroidHost_Task+0x5a>
     454:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     458:	8e 77       	andi	r24, 0x7E	; 126
     45a:	80 93 a6 00 	sts	0x00A6, r24
     45e:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     462:	80 64       	ori	r24, 0x40	; 64
     464:	80 93 a9 00 	sts	0x00A9, r24
     468:	08 95       	ret

0000046a <main>:
     46a:	9f df       	rcall	.-194    	; 0x3aa <SetupHardware>
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     46c:	88 e9       	ldi	r24, 0x98	; 152

	puts_P(PSTR(ESC_FG_CYAN "Android Accessory Host Demo running.\r\n" ESC_FG_WHITE));
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	fc d7       	rcall	.+4088   	; 0x146a <puts_P>
     472:	80 e1       	ldi	r24, 0x10	; 16
     474:	95 df       	rcall	.-214    	; 0x3a0 <LEDs_SetAllLEDs>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     476:	78 94       	sei
     478:	c5 df       	rcall	.-118    	; 0x404 <AndroidHost_Task>
     47a:	93 d7       	rcall	.+3878   	; 0x13a2 <USB_USBTask>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     47c:	fd cf       	rjmp	.-6      	; 0x478 <main+0xe>

0000047e <EVENT_USB_Host_DeviceAttached>:
	GlobalInterruptEnable();

	for (;;)
	{
		AndroidHost_Task();
     47e:	89 ec       	ldi	r24, 0xC9	; 201
     480:	90 e0       	ldi	r25, 0x00	; 0
		USB_USBTask();
     482:	f3 d7       	rcall	.+4070   	; 0x146a <puts_P>
     484:	80 ea       	ldi	r24, 0xA0	; 160
     486:	8c cf       	rjmp	.-232    	; 0x3a0 <LEDs_SetAllLEDs>

00000488 <EVENT_USB_Host_DeviceUnattached>:
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     488:	86 ee       	ldi	r24, 0xE6	; 230
     48a:	90 e0       	ldi	r25, 0x00	; 0
}
     48c:	ee d7       	rcall	.+4060   	; 0x146a <puts_P>
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     48e:	80 e1       	ldi	r24, 0x10	; 16
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     490:	87 cf       	rjmp	.-242    	; 0x3a0 <LEDs_SetAllLEDs>

00000492 <EVENT_USB_Host_DeviceEnumerationComplete>:
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
}
     496:	cf 93       	push	r28

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     498:	df 93       	push	r29
     49a:	00 d0       	rcall	.+0      	; 0x49c <EVENT_USB_Host_DeviceEnumerationComplete+0xa>
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
	puts_P(PSTR("Getting Device Data.\r\n"));
     4a0:	87 e0       	ldi	r24, 0x07	; 7
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	e2 d7       	rcall	.+4036   	; 0x146a <puts_P>
     4a6:	8e d1       	rcall	.+796    	; 0x7c4 <ProcessDeviceDescriptor>

	/* Get and process the configuration descriptor data */
	uint8_t ErrorCode = ProcessDeviceDescriptor();
     4a8:	18 2f       	mov	r17, r24
     4aa:	84 50       	subi	r24, 0x04	; 4
     4ac:	82 30       	cpi	r24, 0x02	; 2

	bool RequiresModeSwitch = (ErrorCode == NonAccessoryModeAndroidDevice);

	/* Error out if the device is not an Android device or an error occurred */
	if ((ErrorCode != AccessoryModeAndroidDevice) && (ErrorCode != NonAccessoryModeAndroidDevice))
     4ae:	80 f0       	brcs	.+32     	; 0x4d0 <EVENT_USB_Host_DeviceEnumerationComplete+0x3e>
     4b0:	11 30       	cpi	r17, 0x01	; 1
     4b2:	19 f4       	brne	.+6      	; 0x4ba <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
	{
		if (ErrorCode == ControlError)
     4b4:	8e e1       	ldi	r24, 0x1E	; 30
     4b6:	91 e0       	ldi	r25, 0x01	; 1
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Device).\r\n"));
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <EVENT_USB_Host_DeviceEnumerationComplete+0x2c>
     4ba:	81 e4       	ldi	r24, 0x41	; 65
     4bc:	91 e0       	ldi	r25, 0x01	; 1
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     4be:	d5 d7       	rcall	.+4010   	; 0x146a <puts_P>
     4c0:	00 d0       	rcall	.+0      	; 0x4c2 <EVENT_USB_Host_DeviceEnumerationComplete+0x30>
     4c2:	00 d0       	rcall	.+0      	; 0x4c4 <EVENT_USB_Host_DeviceEnumerationComplete+0x32>
     4c4:	ed b7       	in	r30, 0x3d	; 61

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     4c6:	fe b7       	in	r31, 0x3e	; 62
     4c8:	31 96       	adiw	r30, 0x01	; 1
     4ca:	28 e5       	ldi	r18, 0x58	; 88
     4cc:	31 e0       	ldi	r19, 0x01	; 1
     4ce:	60 c0       	rjmp	.+192    	; 0x590 <EVENT_USB_Host_DeviceEnumerationComplete+0xfe>
     4d0:	01 e0       	ldi	r16, 0x01	; 1
     4d2:	14 30       	cpi	r17, 0x04	; 4
     4d4:	21 f0       	breq	.+8      	; 0x4de <EVENT_USB_Host_DeviceEnumerationComplete+0x4c>
	puts_P(PSTR("Getting Device Data.\r\n"));

	/* Get and process the configuration descriptor data */
	uint8_t ErrorCode = ProcessDeviceDescriptor();

	bool RequiresModeSwitch = (ErrorCode == NonAccessoryModeAndroidDevice);
     4d6:	00 e0       	ldi	r16, 0x00	; 0
     4d8:	85 e0       	ldi	r24, 0x05	; 5
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <EVENT_USB_Host_DeviceEnumerationComplete+0x50>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	printf_P(PSTR("Android Device Detected - %sAccessory mode.\r\n"), (RequiresModeSwitch ? "Non-" : ""));
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	00 d0       	rcall	.+0      	; 0x4e4 <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <EVENT_USB_Host_DeviceEnumerationComplete+0x54>
     4e6:	22 e7       	ldi	r18, 0x72	; 114
     4e8:	31 e0       	ldi	r19, 0x01	; 1
     4ea:	ed b7       	in	r30, 0x3d	; 61
     4ec:	fe b7       	in	r31, 0x3e	; 62
     4ee:	32 83       	std	Z+2, r19	; 0x02
     4f0:	21 83       	std	Z+1, r18	; 0x01
     4f2:	94 83       	std	Z+4, r25	; 0x04
     4f4:	83 83       	std	Z+3, r24	; 0x03
     4f6:	9a d7       	rcall	.+3892   	; 0x142c <printf_P>
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0

	/* Check if a valid Android device was attached, but it is not current in Accessory mode */
	if (RequiresModeSwitch)
     500:	00 23       	and	r16, r16
     502:	81 f1       	breq	.+96     	; 0x564 <EVENT_USB_Host_DeviceEnumerationComplete+0xd2>
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	8a d1       	rcall	.+788    	; 0x81e <Android_GetAccessoryProtocol>
     50a:	88 23       	and	r24, r24
	{
		uint16_t AndroidProtocol;

		/* Fetch the version of the Android Accessory Protocol supported by the device */
		if ((ErrorCode = Android_GetAccessoryProtocol(&AndroidProtocol)) != HOST_SENDCONTROL_Successful)
     50c:	41 f0       	breq	.+16     	; 0x51e <EVENT_USB_Host_DeviceEnumerationComplete+0x8c>
     50e:	00 d0       	rcall	.+0      	; 0x510 <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
     510:	00 d0       	rcall	.+0      	; 0x512 <EVENT_USB_Host_DeviceEnumerationComplete+0x80>
     512:	ed b7       	in	r30, 0x3d	; 61
     514:	fe b7       	in	r31, 0x3e	; 62
     516:	31 96       	adiw	r30, 0x01	; 1
		{
			printf_P(PSTR(ESC_FG_RED "Control Error (Get Protocol).\r\n"
     518:	20 ea       	ldi	r18, 0xA0	; 160
     51a:	31 e0       	ldi	r19, 0x01	; 1
     51c:	53 c0       	rjmp	.+166    	; 0x5c4 <EVENT_USB_Host_DeviceEnumerationComplete+0x132>
     51e:	89 81       	ldd	r24, Y+1	; 0x01
     520:	9a 81       	ldd	r25, Y+2	; 0x02
     522:	81 30       	cpi	r24, 0x01	; 1
     524:	91 05       	cpc	r25, r1
     526:	21 f0       	breq	.+8      	; 0x530 <EVENT_USB_Host_DeviceEnumerationComplete+0x9e>
			LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
			return;
		}

		/* Validate the returned protocol version */
		if (AndroidProtocol != AOA_PROTOCOL_AccessoryV1)
     528:	8e ed       	ldi	r24, 0xDE	; 222
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	9e d7       	rcall	.+3900   	; 0x146a <puts_P>
     52e:	3d c0       	rjmp	.+122    	; 0x5aa <EVENT_USB_Host_DeviceEnumerationComplete+0x118>
     530:	80 e0       	ldi	r24, 0x00	; 0
		{
			puts_P(PSTR(ESC_FG_RED "Accessory Mode Not Supported."));
     532:	66 e0       	ldi	r22, 0x06	; 6
     534:	71 e0       	ldi	r23, 0x01	; 1
     536:	7f d1       	rcall	.+766    	; 0x836 <Android_SendString>
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	62 e1       	ldi	r22, 0x12	; 18
			LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
			return;
		}

		/* Send the device strings and start the Android Accessory Mode */
		Android_SendString(AOA_STRING_Manufacturer, "Dean Camera");
     53c:	71 e0       	ldi	r23, 0x01	; 1
     53e:	7b d1       	rcall	.+758    	; 0x836 <Android_SendString>
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	62 e1       	ldi	r22, 0x12	; 18
     544:	71 e0       	ldi	r23, 0x01	; 1
		Android_SendString(AOA_STRING_Model,        "LUFA Android Demo");
     546:	77 d1       	rcall	.+750    	; 0x836 <Android_SendString>
     548:	83 e0       	ldi	r24, 0x03	; 3
     54a:	64 e2       	ldi	r22, 0x24	; 36
     54c:	71 e0       	ldi	r23, 0x01	; 1
     54e:	73 d1       	rcall	.+742    	; 0x836 <Android_SendString>
		Android_SendString(AOA_STRING_Description,  "LUFA Android Demo");
     550:	84 e0       	ldi	r24, 0x04	; 4
     552:	68 e2       	ldi	r22, 0x28	; 40
     554:	71 e0       	ldi	r23, 0x01	; 1
     556:	6f d1       	rcall	.+734    	; 0x836 <Android_SendString>
     558:	85 e0       	ldi	r24, 0x05	; 5
		Android_SendString(AOA_STRING_Version,      "1.0");
     55a:	60 e4       	ldi	r22, 0x40	; 64
     55c:	71 e0       	ldi	r23, 0x01	; 1
     55e:	6b d1       	rcall	.+726    	; 0x836 <Android_SendString>
     560:	89 d1       	rcall	.+786    	; 0x874 <Android_StartAccessoryMode>
     562:	3d c0       	rjmp	.+122    	; 0x5de <EVENT_USB_Host_DeviceEnumerationComplete+0x14c>
		Android_SendString(AOA_STRING_URI,          "http://www.lufa-lib.org");
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	92 e0       	ldi	r25, 0x02	; 2
     568:	80 d7       	rcall	.+3840   	; 0x146a <puts_P>
     56a:	ad d0       	rcall	.+346    	; 0x6c6 <ProcessConfigurationDescriptor>
     56c:	18 2f       	mov	r17, r24
		Android_SendString(AOA_STRING_Serial,       "0000000012345678");
     56e:	88 23       	and	r24, r24
     570:	f1 f0       	breq	.+60     	; 0x5ae <EVENT_USB_Host_DeviceEnumerationComplete+0x11c>
     572:	81 30       	cpi	r24, 0x01	; 1
     574:	19 f4       	brne	.+6      	; 0x57c <EVENT_USB_Host_DeviceEnumerationComplete+0xea>
     576:	88 e1       	ldi	r24, 0x18	; 24

		Android_StartAccessoryMode();
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	02 c0       	rjmp	.+4      	; 0x580 <EVENT_USB_Host_DeviceEnumerationComplete+0xee>
		return;
     57c:	82 e4       	ldi	r24, 0x42	; 66
	}

	puts_P(PSTR("Getting Config Data.\r\n"));
     57e:	92 e0       	ldi	r25, 0x02	; 2
     580:	74 d7       	rcall	.+3816   	; 0x146a <puts_P>
     582:	00 d0       	rcall	.+0      	; 0x584 <EVENT_USB_Host_DeviceEnumerationComplete+0xf2>
     584:	00 d0       	rcall	.+0      	; 0x586 <EVENT_USB_Host_DeviceEnumerationComplete+0xf4>

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     586:	ed b7       	in	r30, 0x3d	; 61
     588:	fe b7       	in	r31, 0x3e	; 62
     58a:	31 96       	adiw	r30, 0x01	; 1
     58c:	29 e5       	ldi	r18, 0x59	; 89
     58e:	32 e0       	ldi	r19, 0x02	; 2
	{
		if (ErrorCode == ControlError)
     590:	ad b7       	in	r26, 0x3d	; 61
     592:	be b7       	in	r27, 0x3e	; 62
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     594:	12 96       	adiw	r26, 0x02	; 2
     596:	3c 93       	st	X, r19
     598:	2e 93       	st	-X, r18
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     59a:	11 97       	sbiw	r26, 0x01	; 1
     59c:	12 83       	std	Z+2, r17	; 0x02
     59e:	13 82       	std	Z+3, r1	; 0x03
     5a0:	45 d7       	rcall	.+3722   	; 0x142c <printf_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	80 e9       	ldi	r24, 0x90	; 144
     5ac:	17 c0       	rjmp	.+46     	; 0x5dc <EVENT_USB_Host_DeviceEnumerationComplete+0x14a>
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	b7 d6       	rcall	.+3438   	; 0x1320 <USB_Host_SetDeviceConfiguration>
     5b2:	88 23       	and	r24, r24
     5b4:	79 f0       	breq	.+30     	; 0x5d4 <EVENT_USB_Host_DeviceEnumerationComplete+0x142>
     5b6:	00 d0       	rcall	.+0      	; 0x5b8 <EVENT_USB_Host_DeviceEnumerationComplete+0x126>
     5b8:	00 d0       	rcall	.+0      	; 0x5ba <EVENT_USB_Host_DeviceEnumerationComplete+0x128>
     5ba:	ed b7       	in	r30, 0x3d	; 61
     5bc:	fe b7       	in	r31, 0x3e	; 62
     5be:	31 96       	adiw	r30, 0x01	; 1
     5c0:	23 e7       	ldi	r18, 0x73	; 115
     5c2:	32 e0       	ldi	r19, 0x02	; 2

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5c4:	ad b7       	in	r26, 0x3d	; 61
     5c6:	be b7       	in	r27, 0x3e	; 62
     5c8:	12 96       	adiw	r26, 0x02	; 2
     5ca:	3c 93       	st	X, r19
     5cc:	2e 93       	st	-X, r18
     5ce:	11 97       	sbiw	r26, 0x01	; 1
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     5d0:	82 83       	std	Z+2, r24	; 0x02
     5d2:	e5 cf       	rjmp	.-54     	; 0x59e <EVENT_USB_Host_DeviceEnumerationComplete+0x10c>
     5d4:	86 eb       	ldi	r24, 0xB6	; 182
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	48 d7       	rcall	.+3728   	; 0x146a <puts_P>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     5da:	80 e6       	ldi	r24, 0x60	; 96
     5dc:	e1 de       	rcall	.-574    	; 0x3a0 <LEDs_SetAllLEDs>
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	08 95       	ret

000005ec <EVENT_USB_Host_HostError>:
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	0f 92       	push	r0
     5f2:	cd b7       	in	r28, 0x3d	; 61
     5f4:	de b7       	in	r29, 0x3e	; 62
     5f6:	89 83       	std	Y+1, r24	; 0x01

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("Accessory Mode Android Enumerated.\r\n"));
     5f8:	b8 d3       	rcall	.+1904   	; 0xd6a <USB_Disable>
     5fa:	00 d0       	rcall	.+0      	; 0x5fc <EVENT_USB_Host_HostError+0x10>
     5fc:	00 d0       	rcall	.+0      	; 0x5fe <EVENT_USB_Host_HostError+0x12>
     5fe:	ed b7       	in	r30, 0x3d	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     600:	fe b7       	in	r31, 0x3e	; 62
     602:	31 96       	adiw	r30, 0x01	; 1
     604:	2b ed       	ldi	r18, 0xDB	; 219
}
     606:	32 e0       	ldi	r19, 0x02	; 2
     608:	ad b7       	in	r26, 0x3d	; 61
     60a:	be b7       	in	r27, 0x3e	; 62
     60c:	12 96       	adiw	r26, 0x02	; 2
     60e:	3c 93       	st	X, r19
     610:	2e 93       	st	-X, r18
     612:	11 97       	sbiw	r26, 0x01	; 1
/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     614:	89 81       	ldd	r24, Y+1	; 0x01
     616:	82 83       	std	Z+2, r24	; 0x02
     618:	13 82       	std	Z+3, r1	; 0x03
     61a:	08 d7       	rcall	.+3600   	; 0x142c <printf_P>
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
     624:	80 e9       	ldi	r24, 0x90	; 144
     626:	bc de       	rcall	.-648    	; 0x3a0 <LEDs_SetAllLEDs>
     628:	ff cf       	rjmp	.-2      	; 0x628 <EVENT_USB_Host_HostError+0x3c>

0000062a <EVENT_USB_Host_DeviceEnumerationFailed>:
     62a:	90 91 87 01 	lds	r25, 0x0187
     62e:	2d b7       	in	r18, 0x3d	; 61
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     630:	3e b7       	in	r19, 0x3e	; 62
     632:	28 50       	subi	r18, 0x08	; 8
     634:	30 40       	sbci	r19, 0x00	; 0
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	3e bf       	out	0x3e, r19	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	2d bf       	out	0x3d, r18	; 61
     640:	ed b7       	in	r30, 0x3d	; 61
     642:	fe b7       	in	r31, 0x3e	; 62
     644:	31 96       	adiw	r30, 0x01	; 1
     646:	2a e0       	ldi	r18, 0x0A	; 10
     648:	33 e0       	ldi	r19, 0x03	; 3
     64a:	ad b7       	in	r26, 0x3d	; 61
     64c:	be b7       	in	r27, 0x3e	; 62
     64e:	12 96       	adiw	r26, 0x02	; 2
     650:	3c 93       	st	X, r19
     652:	2e 93       	st	-X, r18
     654:	11 97       	sbiw	r26, 0x01	; 1
     656:	82 83       	std	Z+2, r24	; 0x02
     658:	13 82       	std	Z+3, r1	; 0x03
     65a:	64 83       	std	Z+4, r22	; 0x04
     65c:	15 82       	std	Z+5, r1	; 0x05
     65e:	96 83       	std	Z+6, r25	; 0x06
     660:	17 82       	std	Z+7, r1	; 0x07
     662:	e4 d6       	rcall	.+3528   	; 0x142c <printf_P>
     664:	2d b7       	in	r18, 0x3d	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     666:	3e b7       	in	r19, 0x3e	; 62
     668:	28 5f       	subi	r18, 0xF8	; 248
     66a:	3f 4f       	sbci	r19, 0xFF	; 255
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	3e bf       	out	0x3e, r19	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	2d bf       	out	0x3d, r18	; 61
     676:	80 e9       	ldi	r24, 0x90	; 144
     678:	93 ce       	rjmp	.-730    	; 0x3a0 <LEDs_SetAllLEDs>

0000067a <DCOMP_NextAndroidAccessoryInterface>:
 *  and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DCOMP_NextAndroidAccessoryInterface(void* const CurrentDescriptor)
{
     67a:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     67c:	81 81       	ldd	r24, Z+1	; 0x01
     67e:	84 30       	cpi	r24, 0x04	; 4
     680:	49 f4       	brne	.+18     	; 0x694 <DCOMP_NextAndroidAccessoryInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AOA_CSCP_AOADataClass)    &&
     682:	85 81       	ldd	r24, Z+5	; 0x05
     684:	8f 3f       	cpi	r24, 0xFF	; 255
     686:	31 f4       	brne	.+12     	; 0x694 <DCOMP_NextAndroidAccessoryInterface+0x1a>
     688:	86 81       	ldd	r24, Z+6	; 0x06
     68a:	8f 3f       	cpi	r24, 0xFF	; 255
     68c:	19 f4       	brne	.+6      	; 0x694 <DCOMP_NextAndroidAccessoryInterface+0x1a>
		    (Interface->SubClass == AOA_CSCP_AOADataSubclass) &&
     68e:	87 81       	ldd	r24, Z+7	; 0x07
     690:	88 23       	and	r24, r24
     692:	11 f0       	breq	.+4      	; 0x698 <DCOMP_NextAndroidAccessoryInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     694:	82 e0       	ldi	r24, 0x02	; 2
     696:	08 95       	ret

		if ((Interface->Class    == AOA_CSCP_AOADataClass)    &&
		    (Interface->SubClass == AOA_CSCP_AOADataSubclass) &&
		    (Interface->Protocol == AOA_CSCP_AOADataProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     698:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     69a:	08 95       	ret

0000069c <DCOMP_NextInterfaceBulkEndpoint>:
 *  search if another interface descriptor is found before the required endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DCOMP_NextInterfaceBulkEndpoint(void* const CurrentDescriptor)
{
     69c:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     69e:	81 81       	ldd	r24, Z+1	; 0x01
     6a0:	85 30       	cpi	r24, 0x05	; 5
     6a2:	49 f4       	brne	.+18     	; 0x6b6 <DCOMP_NextInterfaceBulkEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
     6a4:	83 81       	ldd	r24, Z+3	; 0x03
     6a6:	83 70       	andi	r24, 0x03	; 3

		if ((EndpointType == EP_TYPE_BULK) && (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
     6a8:	82 30       	cpi	r24, 0x02	; 2
     6aa:	39 f4       	brne	.+14     	; 0x6ba <DCOMP_NextInterfaceBulkEndpoint+0x1e>
     6ac:	82 81       	ldd	r24, Z+2	; 0x02
     6ae:	3b d3       	rcall	.+1654   	; 0xd26 <Pipe_IsEndpointBound>
     6b0:	88 23       	and	r24, r24
     6b2:	19 f4       	brne	.+6      	; 0x6ba <DCOMP_NextInterfaceBulkEndpoint+0x1e>
     6b4:	04 c0       	rjmp	.+8      	; 0x6be <DCOMP_NextInterfaceBulkEndpoint+0x22>
     6b6:	84 30       	cpi	r24, 0x04	; 4
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     6b8:	21 f0       	breq	.+8      	; 0x6c2 <DCOMP_NextInterfaceBulkEndpoint+0x26>
     6ba:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
     6bc:	08 95       	ret
     6be:	80 e0       	ldi	r24, 0x00	; 0
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if ((EndpointType == EP_TYPE_BULK) && (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		  return DESCRIPTOR_SEARCH_Found;
     6c0:	08 95       	ret
     6c2:	81 e0       	ldi	r24, 0x01	; 1
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
     6c4:	08 95       	ret

000006c6 <ProcessConfigurationDescriptor>:
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     6c6:	9f 92       	push	r9
 *  This routine searches for the first interface containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref AndroidHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     6c8:	af 92       	push	r10
     6ca:	bf 92       	push	r11
     6cc:	cf 92       	push	r12
     6ce:	df 92       	push	r13
     6d0:	ef 92       	push	r14
     6d2:	ff 92       	push	r15
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62
     6e0:	c4 50       	subi	r28, 0x04	; 4
     6e2:	d2 40       	sbci	r29, 0x02	; 2
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	f8 94       	cli
     6e8:	de bf       	out	0x3e, r29	; 62
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     6ee:	ae 01       	movw	r20, r28
     6f0:	4b 5f       	subi	r20, 0xFB	; 251
     6f2:	5f 4f       	sbci	r21, 0xFF	; 255
     6f4:	5c 83       	std	Y+4, r21	; 0x04
     6f6:	4b 83       	std	Y+3, r20	; 0x03

	USB_Descriptor_Endpoint_t* DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t* DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	7e 01       	movw	r14, r28
     6fc:	08 94       	sec
     6fe:	e1 1c       	adc	r14, r1
     700:	f1 1c       	adc	r15, r1
     702:	b7 01       	movw	r22, r14
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	32 e0       	ldi	r19, 0x02	; 2
     708:	46 d4       	rcall	.+2188   	; 0xf96 <USB_Host_GetDeviceConfigDescriptor>
     70a:	85 30       	cpi	r24, 0x05	; 5
     70c:	09 f4       	brne	.+2      	; 0x710 <ProcessConfigurationDescriptor+0x4a>
     70e:	44 c0       	rjmp	.+136    	; 0x798 <ProcessConfigurationDescriptor+0xd2>
     710:	86 30       	cpi	r24, 0x06	; 6
     712:	19 f0       	breq	.+6      	; 0x71a <ProcessConfigurationDescriptor+0x54>
     714:	88 23       	and	r24, r24
     716:	29 f0       	breq	.+10     	; 0x722 <ProcessConfigurationDescriptor+0x5c>
     718:	02 c0       	rjmp	.+4      	; 0x71e <ProcessConfigurationDescriptor+0x58>
     71a:	83 e0       	ldi	r24, 0x03	; 3
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     71c:	40 c0       	rjmp	.+128    	; 0x79e <ProcessConfigurationDescriptor+0xd8>
     71e:	81 e0       	ldi	r24, 0x01	; 1
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return DevControlError;
     720:	3e c0       	rjmp	.+124    	; 0x79e <ProcessConfigurationDescriptor+0xd8>
     722:	83 e0       	ldi	r24, 0x03	; 3
	}

	/* There should be only one compatible Android Accessory Mode interface in the device, attempt to find it */
	if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     724:	a8 2e       	mov	r10, r24
     726:	b1 2c       	mov	r11, r1
     728:	ac 0e       	add	r10, r28
     72a:	bd 1e       	adc	r11, r29
     72c:	c7 01       	movw	r24, r14
     72e:	b5 01       	movw	r22, r10
     730:	4d e3       	ldi	r20, 0x3D	; 61
     732:	53 e0       	ldi	r21, 0x03	; 3
     734:	87 d4       	rcall	.+2318   	; 0x1044 <USB_GetNextDescriptorComp>
     736:	88 23       	and	r24, r24
     738:	89 f5       	brne	.+98     	; 0x79c <ProcessConfigurationDescriptor+0xd6>
     73a:	cc 24       	eor	r12, r12
     73c:	dd 24       	eor	r13, r13
     73e:	00 e0       	ldi	r16, 0x00	; 0
     740:	10 e0       	ldi	r17, 0x00	; 0
     742:	9a 2c       	mov	r9, r10
     744:	ae 2c       	mov	r10, r14
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* Get the next Android Accessory Mode interface's data endpoint descriptor */
		if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     746:	ef 2c       	mov	r14, r15
     748:	8a 2d       	mov	r24, r10
     74a:	9e 2d       	mov	r25, r14
     74c:	69 2d       	mov	r22, r9
     74e:	7b 2d       	mov	r23, r11
     750:	4e e4       	ldi	r20, 0x4E	; 78
     752:	53 e0       	ldi	r21, 0x03	; 3
     754:	77 d4       	rcall	.+2286   	; 0x1044 <USB_GetNextDescriptorComp>
     756:	88 23       	and	r24, r24
     758:	09 f5       	brne	.+66     	; 0x79c <ProcessConfigurationDescriptor+0xd6>
     75a:	eb 81       	ldd	r30, Y+3	; 0x03
     75c:	fc 81       	ldd	r31, Y+4	; 0x04
     75e:	82 81       	ldd	r24, Z+2	; 0x02
			/* Data endpoints not found within the first Android Accessory device interface, error out */
			return NoCompatibleInterfaceFound;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     760:	87 ff       	sbrs	r24, 7
     762:	02 c0       	rjmp	.+4      	; 0x768 <ProcessConfigurationDescriptor+0xa2>

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     764:	8f 01       	movw	r16, r30
     766:	01 c0       	rjmp	.+2      	; 0x76a <ProcessConfigurationDescriptor+0xa4>
     768:	6f 01       	movw	r12, r30
		  DataINEndpoint  = EndpointData;
     76a:	01 15       	cp	r16, r1
     76c:	11 05       	cpc	r17, r1
		else
		  DataOUTEndpoint = EndpointData;
     76e:	61 f3       	breq	.-40     	; 0x748 <ProcessConfigurationDescriptor+0x82>
	                              DCOMP_NextAndroidAccessoryInterface) != DESCRIPTOR_SEARCH_COMP_Found)
	{
		return NoCompatibleInterfaceFound;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     770:	c1 14       	cp	r12, r1
     772:	d1 04       	cpc	r13, r1
     774:	49 f3       	breq	.-46     	; 0x748 <ProcessConfigurationDescriptor+0x82>
     776:	f8 01       	movw	r30, r16
     778:	24 81       	ldd	r18, Z+4	; 0x04
     77a:	35 81       	ldd	r19, Z+5	; 0x05
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Configure the Android Accessory data IN pipe */
	Pipe_ConfigurePipe(ANDROID_DATA_IN_PIPE, EP_TYPE_BULK, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     77c:	81 e8       	ldi	r24, 0x81	; 129
     77e:	62 e0       	ldi	r22, 0x02	; 2
     780:	42 81       	ldd	r20, Z+2	; 0x02
     782:	01 e0       	ldi	r16, 0x01	; 1
     784:	57 d2       	rcall	.+1198   	; 0xc34 <Pipe_ConfigurePipe>
     786:	f6 01       	movw	r30, r12
     788:	24 81       	ldd	r18, Z+4	; 0x04
     78a:	35 81       	ldd	r19, Z+5	; 0x05
     78c:	82 e0       	ldi	r24, 0x02	; 2

	/* Configure the Android Accessory data OUT pipe */
	Pipe_ConfigurePipe(ANDROID_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);
     78e:	62 e0       	ldi	r22, 0x02	; 2
     790:	42 81       	ldd	r20, Z+2	; 0x02
     792:	50 d2       	rcall	.+1184   	; 0xc34 <Pipe_ConfigurePipe>
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	03 c0       	rjmp	.+6      	; 0x79e <ProcessConfigurationDescriptor+0xd8>
     798:	82 e0       	ldi	r24, 0x02	; 2
     79a:	01 c0       	rjmp	.+2      	; 0x79e <ProcessConfigurationDescriptor+0xd8>
     79c:	84 e0       	ldi	r24, 0x04	; 4

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     79e:	cc 5f       	subi	r28, 0xFC	; 252
     7a0:	dd 4f       	sbci	r29, 0xFD	; 253
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     7a2:	0f b6       	in	r0, 0x3f	; 63
     7a4:	f8 94       	cli
		/* Get the next Android Accessory Mode interface's data endpoint descriptor */
		if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DCOMP_NextInterfaceBulkEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Data endpoints not found within the first Android Accessory device interface, error out */
			return NoCompatibleInterfaceFound;
     7a6:	de bf       	out	0x3e, r29	; 62
	/* Configure the Android Accessory data OUT pipe */
	Pipe_ConfigurePipe(ANDROID_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	cd bf       	out	0x3d, r28	; 61
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	1f 91       	pop	r17
     7b2:	0f 91       	pop	r16
     7b4:	ff 90       	pop	r15
     7b6:	ef 90       	pop	r14
     7b8:	df 90       	pop	r13
     7ba:	cf 90       	pop	r12
     7bc:	bf 90       	pop	r11
     7be:	af 90       	pop	r10
     7c0:	9f 90       	pop	r9
     7c2:	08 95       	ret

000007c4 <ProcessDeviceDescriptor>:
 *  This routine checks to ensure that the attached device's VID and PID matches Google's for Android devices.
 *
 *  \return An error code from the \ref AndroidHost_GetDeviceDescriptorDataCodes_t enum.
 */
uint8_t ProcessDeviceDescriptor(void)
{
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
     7cc:	62 97       	sbiw	r28, 0x12	; 18
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	f8 94       	cli
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	cd bf       	out	0x3d, r28	; 61
			 *  \return A value from the \ref USB_Host_SendControlErrorCodes_t enum to indicate the result.
			 */
			static inline uint8_t USB_Host_GetDeviceDescriptor(USB_Descriptor_Device_t* const DeviceDescriptorPtr) ATTR_NON_NULL_PTR_ARG(1);
			static inline uint8_t USB_Host_GetDeviceDescriptor(USB_Descriptor_Device_t* const DeviceDescriptorPtr)
			{
				return USB_Host_GetDescriptor(DTYPE_Device, 0, DeviceDescriptorPtr, sizeof(USB_Descriptor_Device_t));
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	ae 01       	movw	r20, r28
     7de:	4f 5f       	subi	r20, 0xFF	; 255
     7e0:	5f 4f       	sbci	r21, 0xFF	; 255
     7e2:	22 e1       	ldi	r18, 0x12	; 18
     7e4:	c2 d5       	rcall	.+2948   	; 0x136a <USB_Host_GetDescriptor>
     7e6:	88 23       	and	r24, r24
	USB_Descriptor_Device_t DeviceDescriptor;

	/* Send the request to retrieve the device descriptor */
	if (USB_Host_GetDeviceDescriptor(&DeviceDescriptor) != HOST_SENDCONTROL_Successful)
     7e8:	61 f4       	brne	.+24     	; 0x802 <ProcessDeviceDescriptor+0x3e>
     7ea:	8a 81       	ldd	r24, Y+2	; 0x02
	  return DevControlError;

	/* Validate returned data - ensure the returned data is a device descriptor */
	if (DeviceDescriptor.Header.Type != DTYPE_Device)
     7ec:	81 30       	cpi	r24, 0x01	; 1
     7ee:	59 f4       	brne	.+22     	; 0x806 <ProcessDeviceDescriptor+0x42>
     7f0:	8b 85       	ldd	r24, Y+11	; 0x0b
	  return InvalidDeviceDataReturned;

	/* Check the product ID to determine if the Android device is in accessory mode */
	if ((DeviceDescriptor.ProductID != ANDROID_ACCESSORY_PRODUCT_ID) &&
     7f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     7f4:	80 50       	subi	r24, 0x00	; 0
     7f6:	9d 42       	sbci	r25, 0x2D	; 45
     7f8:	82 30       	cpi	r24, 0x02	; 2
     7fa:	91 05       	cpc	r25, r1
     7fc:	30 f0       	brcs	.+12     	; 0x80a <ProcessDeviceDescriptor+0x46>
     7fe:	84 e0       	ldi	r24, 0x04	; 4
	    (DeviceDescriptor.ProductID != ANDROID_ACCESSORY_ADB_PRODUCT_ID))
	{
		return NonAccessoryModeAndroidDevice;
     800:	05 c0       	rjmp	.+10     	; 0x80c <ProcessDeviceDescriptor+0x48>
     802:	81 e0       	ldi	r24, 0x01	; 1
{
	USB_Descriptor_Device_t DeviceDescriptor;

	/* Send the request to retrieve the device descriptor */
	if (USB_Host_GetDeviceDescriptor(&DeviceDescriptor) != HOST_SENDCONTROL_Successful)
	  return DevControlError;
     804:	03 c0       	rjmp	.+6      	; 0x80c <ProcessDeviceDescriptor+0x48>
     806:	82 e0       	ldi	r24, 0x02	; 2

	/* Validate returned data - ensure the returned data is a device descriptor */
	if (DeviceDescriptor.Header.Type != DTYPE_Device)
	  return InvalidDeviceDataReturned;
     808:	01 c0       	rjmp	.+2      	; 0x80c <ProcessDeviceDescriptor+0x48>
     80a:	85 e0       	ldi	r24, 0x05	; 5
	    (DeviceDescriptor.ProductID != ANDROID_ACCESSORY_ADB_PRODUCT_ID))
	{
		return NonAccessoryModeAndroidDevice;
	}

	return AccessoryModeAndroidDevice;
     80c:	62 96       	adiw	r28, 0x12	; 18
}
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	f8 94       	cli
     812:	de bf       	out	0x3e, r29	; 62
     814:	0f be       	out	0x3f, r0	; 63
     816:	cd bf       	out	0x3d, r28	; 61
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	08 95       	ret

0000081e <Android_GetAccessoryProtocol>:

#include "AndroidAccessoryCommands.h"

uint8_t Android_GetAccessoryProtocol(uint16_t* const Protocol)
{
	USB_ControlRequest = (USB_Request_Header_t)
     81e:	af e7       	ldi	r26, 0x7F	; 127
     820:	b1 e0       	ldi	r27, 0x01	; 1
     822:	e1 e5       	ldi	r30, 0x51	; 81
     824:	f1 e0       	ldi	r31, 0x01	; 1
     826:	28 e0       	ldi	r18, 0x08	; 8
     828:	01 90       	ld	r0, Z+
     82a:	0d 92       	st	X+, r0
     82c:	21 50       	subi	r18, 0x01	; 1
     82e:	e1 f7       	brne	.-8      	; 0x828 <Android_GetAccessoryProtocol+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     830:	10 92 a7 00 	sts	0x00A7, r1
		.wIndex        = 0,
		.wLength       = sizeof(uint16_t),
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest(Protocol);
     834:	77 c4       	rjmp	.+2286   	; 0x1124 <USB_Host_SendControlRequest>

00000836 <Android_SendString>:
     836:	97 2f       	mov	r25, r23
}
     838:	e6 2f       	mov	r30, r22
	{
		.bmRequestType = (REQDIR_HOSTTODEVICE | REQTYPE_VENDOR | REQREC_DEVICE),
		.bRequest      = AOA_REQ_SendString,
		.wValue        = 0,
		.wIndex        = StringIndex,
		.wLength       = (strlen(String) + 1),
     83a:	f7 2f       	mov	r31, r23
     83c:	df 01       	movw	r26, r30
     83e:	0d 90       	ld	r0, X+
     840:	00 20       	and	r0, r0
     842:	e9 f7       	brne	.-6      	; 0x83e <Android_SendString+0x8>
}

uint8_t Android_SendString(const uint8_t StringIndex,
                           const char* const String)
{
	USB_ControlRequest = (USB_Request_Header_t)
     844:	20 e4       	ldi	r18, 0x40	; 64
     846:	20 93 7f 01 	sts	0x017F, r18
     84a:	24 e3       	ldi	r18, 0x34	; 52
     84c:	20 93 80 01 	sts	0x0180, r18
     850:	10 92 82 01 	sts	0x0182, r1
     854:	10 92 81 01 	sts	0x0181, r1
     858:	80 93 83 01 	sts	0x0183, r24
     85c:	10 92 84 01 	sts	0x0184, r1
	{
		.bmRequestType = (REQDIR_HOSTTODEVICE | REQTYPE_VENDOR | REQREC_DEVICE),
		.bRequest      = AOA_REQ_SendString,
		.wValue        = 0,
		.wIndex        = StringIndex,
		.wLength       = (strlen(String) + 1),
     860:	ae 1b       	sub	r26, r30
     862:	bf 0b       	sbc	r27, r31
}

uint8_t Android_SendString(const uint8_t StringIndex,
                           const char* const String)
{
	USB_ControlRequest = (USB_Request_Header_t)
     864:	b0 93 86 01 	sts	0x0186, r27
     868:	a0 93 85 01 	sts	0x0185, r26
     86c:	10 92 a7 00 	sts	0x00A7, r1
		.wIndex        = StringIndex,
		.wLength       = (strlen(String) + 1),
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest((char*)String);
     870:	86 2f       	mov	r24, r22
     872:	58 c4       	rjmp	.+2224   	; 0x1124 <USB_Host_SendControlRequest>

00000874 <Android_StartAccessoryMode>:
     874:	af e7       	ldi	r26, 0x7F	; 127
}
     876:	b1 e0       	ldi	r27, 0x01	; 1

uint8_t Android_StartAccessoryMode(void)
{
	USB_ControlRequest = (USB_Request_Header_t)
     878:	e9 e5       	ldi	r30, 0x59	; 89
     87a:	f1 e0       	ldi	r31, 0x01	; 1
     87c:	88 e0       	ldi	r24, 0x08	; 8
     87e:	01 90       	ld	r0, Z+
     880:	0d 92       	st	X+, r0
     882:	81 50       	subi	r24, 0x01	; 1
     884:	e1 f7       	brne	.-8      	; 0x87e <Android_StartAccessoryMode+0xa>
     886:	10 92 a7 00 	sts	0x00A7, r1
		.wIndex        = 0,
		.wLength       = 0,
	};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest(NULL);
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	4a c4       	rjmp	.+2196   	; 0x1124 <USB_Host_SendControlRequest>

00000890 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     890:	80 91 9e 00 	lds	r24, 0x009E
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	81 70       	andi	r24, 0x01	; 1
     898:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     89a:	20 91 a0 00 	lds	r18, 0x00A0
     89e:	2d 7f       	andi	r18, 0xFD	; 253
     8a0:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     8a4:	20 91 9e 00 	lds	r18, 0x009E
     8a8:	22 60       	ori	r18, 0x02	; 2
     8aa:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     8ae:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     8b2:	21 fd       	sbrc	r18, 1
     8b4:	fc cf       	rjmp	.-8      	; 0x8ae <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     8b6:	20 91 9e 00 	lds	r18, 0x009E
     8ba:	21 60       	ori	r18, 0x01	; 1
     8bc:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     8c0:	10 92 7d 01 	sts	0x017D, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     8c4:	20 91 a0 00 	lds	r18, 0x00A0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	20 72       	andi	r18, 0x20	; 32
     8cc:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     8ce:	40 91 a0 00 	lds	r20, 0x00A0
     8d2:	4f 7d       	andi	r20, 0xDF	; 223
     8d4:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     8d8:	40 91 9f 00 	lds	r20, 0x009F
     8dc:	4f 7d       	andi	r20, 0xDF	; 223
     8de:	40 93 9f 00 	sts	0x009F, r20
     8e2:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     8e4:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     8e8:	55 ff       	sbrs	r21, 5
     8ea:	0b c0       	rjmp	.+22     	; 0x902 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     8ec:	40 91 9f 00 	lds	r20, 0x009F
     8f0:	4f 7d       	andi	r20, 0xDF	; 223
     8f2:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     8f6:	40 91 9f 00 	lds	r20, 0x009F
     8fa:	4d 7f       	andi	r20, 0xFD	; 253
     8fc:	40 93 9f 00 	sts	0x009F, r20
     900:	08 c0       	rjmp	.+16     	; 0x912 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     902:	ef ec       	ldi	r30, 0xCF	; 207
     904:	f7 e0       	ldi	r31, 0x07	; 7
     906:	31 97       	sbiw	r30, 0x01	; 1
     908:	f1 f7       	brne	.-4      	; 0x906 <USB_Host_ResetDevice+0x76>
     90a:	00 c0       	rjmp	.+0      	; 0x90c <USB_Host_ResetDevice+0x7c>
     90c:	00 00       	nop
     90e:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     910:	49 f7       	brne	.-46     	; 0x8e4 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     912:	21 15       	cp	r18, r1
     914:	31 05       	cpc	r19, r1
     916:	29 f0       	breq	.+10     	; 0x922 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     918:	20 91 a0 00 	lds	r18, 0x00A0
     91c:	20 62       	ori	r18, 0x20	; 32
     91e:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     922:	00 97       	sbiw	r24, 0x00	; 0
     924:	29 f4       	brne	.+10     	; 0x930 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     926:	80 91 9e 00 	lds	r24, 0x009E
     92a:	8e 7f       	andi	r24, 0xFE	; 254
     92c:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     930:	80 91 a0 00 	lds	r24, 0x00A0
     934:	82 60       	ori	r24, 0x02	; 2
     936:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     93a:	08 95       	ret

0000093c <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     93c:	40 91 9e 00 	lds	r20, 0x009E
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	41 70       	andi	r20, 0x01	; 1
     944:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     946:	20 91 a0 00 	lds	r18, 0x00A0
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	20 72       	andi	r18, 0x20	; 32
     94e:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     950:	90 91 a0 00 	lds	r25, 0x00A0
     954:	9f 7d       	andi	r25, 0xDF	; 223
     956:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     95a:	90 91 9f 00 	lds	r25, 0x009F
     95e:	9f 7d       	andi	r25, 0xDF	; 223
     960:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     964:	90 91 9e 00 	lds	r25, 0x009E
     968:	91 60       	ori	r25, 0x01	; 1
     96a:	90 93 9e 00 	sts	0x009E, r25
     96e:	26 c0       	rjmp	.+76     	; 0x9bc <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     970:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     974:	95 ff       	sbrs	r25, 5
     976:	06 c0       	rjmp	.+12     	; 0x984 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     978:	90 91 9f 00 	lds	r25, 0x009F
     97c:	9f 7d       	andi	r25, 0xDF	; 223
     97e:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     982:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     984:	90 91 87 01 	lds	r25, 0x0187
     988:	91 30       	cpi	r25, 0x01	; 1
     98a:	d9 f0       	breq	.+54     	; 0x9c2 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     98c:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     990:	94 ff       	sbrs	r25, 4
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     994:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     998:	80 91 a6 00 	lds	r24, 0x00A6
     99c:	8f 7e       	andi	r24, 0xEF	; 239
     99e:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     9a2:	82 e0       	ldi	r24, 0x02	; 2

			break;
     9a4:	0f c0       	rjmp	.+30     	; 0x9c4 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     9a6:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     9aa:	91 ff       	sbrs	r25, 1
     9ac:	07 c0       	rjmp	.+14     	; 0x9bc <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     9ae:	80 91 a6 00 	lds	r24, 0x00A6
     9b2:	8d 7f       	andi	r24, 0xFD	; 253
     9b4:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     9b8:	83 e0       	ldi	r24, 0x03	; 3

			break;
     9ba:	04 c0       	rjmp	.+8      	; 0x9c4 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     9bc:	88 23       	and	r24, r24
     9be:	c1 f6       	brne	.-80     	; 0x970 <USB_Host_WaitMS+0x34>
     9c0:	01 c0       	rjmp	.+2      	; 0x9c4 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     9c2:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     9c4:	41 15       	cp	r20, r1
     9c6:	51 05       	cpc	r21, r1
     9c8:	29 f4       	brne	.+10     	; 0x9d4 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     9ca:	90 91 9e 00 	lds	r25, 0x009E
     9ce:	9e 7f       	andi	r25, 0xFE	; 254
     9d0:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     9d4:	21 15       	cp	r18, r1
     9d6:	31 05       	cpc	r19, r1
     9d8:	29 f0       	breq	.+10     	; 0x9e4 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     9da:	90 91 a0 00 	lds	r25, 0x00A0
     9de:	90 62       	ori	r25, 0x20	; 32
     9e0:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     9e4:	08 95       	ret

000009e6 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     9e6:	0f 93       	push	r16
     9e8:	1f 93       	push	r17
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
     9ee:	cd b7       	in	r28, 0x3d	; 61
     9f0:	de b7       	in	r29, 0x3e	; 62
     9f2:	28 97       	sbiw	r28, 0x08	; 8
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	f8 94       	cli
     9f8:	de bf       	out	0x3e, r29	; 62
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     9fe:	80 91 87 01 	lds	r24, 0x0187
     a02:	85 30       	cpi	r24, 0x05	; 5
     a04:	09 f4       	brne	.+2      	; 0xa08 <USB_Host_ProcessNextHostState+0x22>
     a06:	97 c0       	rjmp	.+302    	; 0xb36 <USB_Host_ProcessNextHostState+0x150>
     a08:	86 30       	cpi	r24, 0x06	; 6
     a0a:	68 f4       	brcc	.+26     	; 0xa26 <USB_Host_ProcessNextHostState+0x40>
     a0c:	82 30       	cpi	r24, 0x02	; 2
     a0e:	c1 f1       	breq	.+112    	; 0xa80 <USB_Host_ProcessNextHostState+0x9a>
     a10:	83 30       	cpi	r24, 0x03	; 3
     a12:	18 f4       	brcc	.+6      	; 0xa1a <USB_Host_ProcessNextHostState+0x34>
     a14:	88 23       	and	r24, r24
     a16:	a1 f0       	breq	.+40     	; 0xa40 <USB_Host_ProcessNextHostState+0x5a>
     a18:	02 c1       	rjmp	.+516    	; 0xc1e <USB_Host_ProcessNextHostState+0x238>
     a1a:	83 30       	cpi	r24, 0x03	; 3
     a1c:	c9 f1       	breq	.+114    	; 0xa90 <USB_Host_ProcessNextHostState+0xaa>
     a1e:	84 30       	cpi	r24, 0x04	; 4
     a20:	09 f0       	breq	.+2      	; 0xa24 <USB_Host_ProcessNextHostState+0x3e>
     a22:	fd c0       	rjmp	.+506    	; 0xc1e <USB_Host_ProcessNextHostState+0x238>
     a24:	60 c0       	rjmp	.+192    	; 0xae6 <USB_Host_ProcessNextHostState+0x100>
     a26:	87 30       	cpi	r24, 0x07	; 7
     a28:	09 f4       	brne	.+2      	; 0xa2c <USB_Host_ProcessNextHostState+0x46>
     a2a:	9c c0       	rjmp	.+312    	; 0xb64 <USB_Host_ProcessNextHostState+0x17e>
     a2c:	87 30       	cpi	r24, 0x07	; 7
     a2e:	08 f4       	brcc	.+2      	; 0xa32 <USB_Host_ProcessNextHostState+0x4c>
     a30:	8d c0       	rjmp	.+282    	; 0xb4c <USB_Host_ProcessNextHostState+0x166>
     a32:	88 30       	cpi	r24, 0x08	; 8
     a34:	09 f4       	brne	.+2      	; 0xa38 <USB_Host_ProcessNextHostState+0x52>
     a36:	b6 c0       	rjmp	.+364    	; 0xba4 <USB_Host_ProcessNextHostState+0x1be>
     a38:	89 30       	cpi	r24, 0x09	; 9
     a3a:	09 f0       	breq	.+2      	; 0xa3e <USB_Host_ProcessNextHostState+0x58>
     a3c:	f0 c0       	rjmp	.+480    	; 0xc1e <USB_Host_ProcessNextHostState+0x238>
     a3e:	d7 c0       	rjmp	.+430    	; 0xbee <USB_Host_ProcessNextHostState+0x208>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     a40:	00 91 7a 01 	lds	r16, 0x017A
     a44:	10 91 7b 01 	lds	r17, 0x017B
     a48:	01 15       	cp	r16, r1
     a4a:	11 05       	cpc	r17, r1
     a4c:	09 f4       	brne	.+2      	; 0xa50 <USB_Host_ProcessNextHostState+0x6a>
     a4e:	e7 c0       	rjmp	.+462    	; 0xc1e <USB_Host_ProcessNextHostState+0x238>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	74 df       	rcall	.-280    	; 0x93c <USB_Host_WaitMS>
     a54:	68 2f       	mov	r22, r24
     a56:	88 23       	and	r24, r24
     a58:	31 f0       	breq	.+12     	; 0xa66 <USB_Host_ProcessNextHostState+0x80>
     a5a:	80 91 7c 01 	lds	r24, 0x017C
				{
					USB_HostState = PostWaitState;
     a5e:	80 93 87 01 	sts	0x0187, r24
     a62:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     a64:	d0 c0       	rjmp	.+416    	; 0xc06 <USB_Host_ProcessNextHostState+0x220>
					break;
     a66:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
     a68:	10 40       	sbci	r17, 0x00	; 0
     a6a:	10 93 7b 01 	sts	0x017B, r17
     a6e:	00 93 7a 01 	sts	0x017A, r16
     a72:	01 15       	cp	r16, r1
     a74:	11 05       	cpc	r17, r1
     a76:	09 f0       	breq	.+2      	; 0xa7a <USB_Host_ProcessNextHostState+0x94>
     a78:	d2 c0       	rjmp	.+420    	; 0xc1e <USB_Host_ProcessNextHostState+0x238>
     a7a:	80 91 7c 01 	lds	r24, 0x017C
				  USB_HostState = PostWaitState;
     a7e:	05 c0       	rjmp	.+10     	; 0xa8a <USB_Host_ProcessNextHostState+0xa4>
     a80:	10 92 7b 01 	sts	0x017B, r1
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     a84:	10 92 7a 01 	sts	0x017A, r1
     a88:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     a8a:	80 93 87 01 	sts	0x0187, r24
     a8e:	c7 c0       	rjmp	.+398    	; 0xc1e <USB_Host_ProcessNextHostState+0x238>
			break;
     a90:	80 91 7a 01 	lds	r24, 0x017A
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     a94:	90 91 7b 01 	lds	r25, 0x017B
     a98:	9c 01       	movw	r18, r24
     a9a:	21 50       	subi	r18, 0x01	; 1
     a9c:	30 40       	sbci	r19, 0x00	; 0
     a9e:	30 93 7b 01 	sts	0x017B, r19
     aa2:	20 93 7a 01 	sts	0x017A, r18
     aa6:	00 97       	sbiw	r24, 0x00	; 0
     aa8:	39 f0       	breq	.+14     	; 0xab8 <USB_Host_ProcessNextHostState+0xd2>
     aaa:	8f ec       	ldi	r24, 0xCF	; 207
     aac:	97 e0       	ldi	r25, 0x07	; 7
     aae:	01 97       	sbiw	r24, 0x01	; 1
     ab0:	f1 f7       	brne	.-4      	; 0xaae <USB_Host_ProcessNextHostState+0xc8>
     ab2:	00 c0       	rjmp	.+0      	; 0xab4 <USB_Host_ProcessNextHostState+0xce>
     ab4:	00 00       	nop
     ab6:	b3 c0       	rjmp	.+358    	; 0xc1e <USB_Host_ProcessNextHostState+0x238>
     ab8:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     aba:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     abe:	80 61       	ori	r24, 0x10	; 16
     ac0:	80 93 d8 00 	sts	0x00D8, r24
     ac4:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     ac8:	8b 7f       	andi	r24, 0xFB	; 251
     aca:	80 93 dd 00 	sts	0x00DD, r24
     ace:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     ad2:	80 61       	ori	r24, 0x10	; 16
     ad4:	80 93 d7 00 	sts	0x00D7, r24
     ad8:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     adc:	82 60       	ori	r24, 0x02	; 2
     ade:	80 93 dd 00 	sts	0x00DD, r24
     ae2:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     ae4:	d2 cf       	rjmp	.-92     	; 0xa8a <USB_Host_ProcessNextHostState+0xa4>
     ae6:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     aea:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     aec:	98 c0       	rjmp	.+304    	; 0xc1e <USB_Host_ProcessNextHostState+0x238>
     aee:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     af2:	8e 7f       	andi	r24, 0xFE	; 254
     af4:	80 93 9f 00 	sts	0x009F, r24
     af8:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     afc:	8d 7f       	andi	r24, 0xFD	; 253
     afe:	80 93 9f 00 	sts	0x009F, r24
     b02:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     b06:	8d 7f       	andi	r24, 0xFD	; 253
     b08:	80 93 df 00 	sts	0x00DF, r24
     b0c:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     b10:	82 60       	ori	r24, 0x02	; 2
     b12:	80 93 de 00 	sts	0x00DE, r24
     b16:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     b1a:	81 60       	ori	r24, 0x01	; 1
     b1c:	80 93 9e 00 	sts	0x009E, r24
     b20:	ee d0       	rcall	.+476    	; 0xcfe <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     b22:	10 92 87 01 	sts	0x0187, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     b26:	84 e6       	ldi	r24, 0x64	; 100
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	90 93 7b 01 	sts	0x017B, r25
     b2e:	80 93 7a 01 	sts	0x017A, r24
     b32:	85 e0       	ldi	r24, 0x05	; 5
     b34:	59 c0       	rjmp	.+178    	; 0xbe8 <USB_Host_ProcessNextHostState+0x202>
     b36:	ac de       	rcall	.-680    	; 0x890 <USB_Host_ResetDevice>
     b38:	10 92 87 01 	sts	0x0187, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     b3c:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	90 93 7b 01 	sts	0x017B, r25
     b44:	80 93 7a 01 	sts	0x017A, r24
     b48:	86 e0       	ldi	r24, 0x06	; 6
     b4a:	4e c0       	rjmp	.+156    	; 0xbe8 <USB_Host_ProcessNextHostState+0x202>
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     b52:	20 e4       	ldi	r18, 0x40	; 64
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	01 e0       	ldi	r16, 0x01	; 1
     b58:	6d d0       	rcall	.+218    	; 0xc34 <Pipe_ConfigurePipe>
     b5a:	88 23       	and	r24, r24
     b5c:	09 f4       	brne	.+2      	; 0xb60 <USB_Host_ProcessNextHostState+0x17a>
     b5e:	4f c0       	rjmp	.+158    	; 0xbfe <USB_Host_ProcessNextHostState+0x218>
     b60:	87 e0       	ldi	r24, 0x07	; 7
     b62:	93 cf       	rjmp	.-218    	; 0xa8a <USB_Host_ProcessNextHostState+0xa4>
     b64:	af e7       	ldi	r26, 0x7F	; 127
     b66:	b1 e0       	ldi	r27, 0x01	; 1
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     b68:	e1 e6       	ldi	r30, 0x61	; 97
     b6a:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     b6c:	88 e0       	ldi	r24, 0x08	; 8
     b6e:	01 90       	ld	r0, Z+
     b70:	0d 92       	st	X+, r0
     b72:	81 50       	subi	r24, 0x01	; 1
     b74:	e1 f7       	brne	.-8      	; 0xb6e <USB_Host_ProcessNextHostState+0x188>
     b76:	10 92 a7 00 	sts	0x00A7, r1
     b7a:	ce 01       	movw	r24, r28
     b7c:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b7e:	d2 d2       	rcall	.+1444   	; 0x1124 <USB_Host_SendControlRequest>
     b80:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     b82:	88 23       	and	r24, r24
     b84:	09 f0       	breq	.+2      	; 0xb88 <USB_Host_ProcessNextHostState+0x1a2>
     b86:	3e c0       	rjmp	.+124    	; 0xc04 <USB_Host_ProcessNextHostState+0x21e>
     b88:	88 85       	ldd	r24, Y+8	; 0x08
     b8a:	80 93 71 01 	sts	0x0171, r24
     b8e:	80 de       	rcall	.-768    	; 0x890 <USB_Host_ResetDevice>
     b90:	10 92 87 01 	sts	0x0187, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     b94:	88 ec       	ldi	r24, 0xC8	; 200
     b96:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
     b98:	90 93 7b 01 	sts	0x017B, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     b9c:	80 93 7a 01 	sts	0x017A, r24
     ba0:	88 e0       	ldi	r24, 0x08	; 8
     ba2:	22 c0       	rjmp	.+68     	; 0xbe8 <USB_Host_ProcessNextHostState+0x202>
     ba4:	20 91 71 01 	lds	r18, 0x0171
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	40 e0       	ldi	r20, 0x00	; 0
     bae:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     bb0:	01 e0       	ldi	r16, 0x01	; 1
     bb2:	40 d0       	rcall	.+128    	; 0xc34 <Pipe_ConfigurePipe>
     bb4:	88 23       	and	r24, r24
     bb6:	19 f1       	breq	.+70     	; 0xbfe <USB_Host_ProcessNextHostState+0x218>
     bb8:	af e7       	ldi	r26, 0x7F	; 127
     bba:	b1 e0       	ldi	r27, 0x01	; 1
     bbc:	e9 e6       	ldi	r30, 0x69	; 105
     bbe:	f1 e0       	ldi	r31, 0x01	; 1
     bc0:	88 e0       	ldi	r24, 0x08	; 8
     bc2:	01 90       	ld	r0, Z+
     bc4:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     bc6:	81 50       	subi	r24, 0x01	; 1
     bc8:	e1 f7       	brne	.-8      	; 0xbc2 <USB_Host_ProcessNextHostState+0x1dc>
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	aa d2       	rcall	.+1364   	; 0x1124 <USB_Host_SendControlRequest>
     bd0:	68 2f       	mov	r22, r24
     bd2:	88 23       	and	r24, r24
     bd4:	b9 f4       	brne	.+46     	; 0xc04 <USB_Host_ProcessNextHostState+0x21e>
     bd6:	10 92 87 01 	sts	0x0187, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     bda:	84 e6       	ldi	r24, 0x64	; 100
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	90 93 7b 01 	sts	0x017B, r25
     be2:	80 93 7a 01 	sts	0x017A, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     be6:	89 e0       	ldi	r24, 0x09	; 9
     be8:	80 93 7c 01 	sts	0x017C, r24
     bec:	18 c0       	rjmp	.+48     	; 0xc1e <USB_Host_ProcessNextHostState+0x238>
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	80 93 a1 00 	sts	0x00A1, r24
     bf4:	8a e0       	ldi	r24, 0x0A	; 10
     bf6:	80 93 87 01 	sts	0x0187, r24
     bfa:	4b dc       	rcall	.-1898   	; 0x492 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     bfc:	10 c0       	rjmp	.+32     	; 0xc1e <USB_Host_ProcessNextHostState+0x238>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	84 e0       	ldi	r24, 0x04	; 4
     c02:	01 c0       	rjmp	.+2      	; 0xc06 <USB_Host_ProcessNextHostState+0x220>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     c04:	83 e0       	ldi	r24, 0x03	; 3
     c06:	90 91 87 01 	lds	r25, 0x0187

			EVENT_USB_Host_DeviceEnumerationComplete();
     c0a:	91 30       	cpi	r25, 0x01	; 1
     c0c:	41 f0       	breq	.+16     	; 0xc1e <USB_Host_ProcessNextHostState+0x238>
			break;
     c0e:	0d dd       	rcall	.-1510   	; 0x62a <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     c10:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     c14:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     c16:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     c1a:	36 dc       	rcall	.-1940   	; 0x488 <EVENT_USB_Host_DeviceUnattached>
     c1c:	be d0       	rcall	.+380    	; 0xd9a <USB_ResetInterface>
     c1e:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c24:	de bf       	out	0x3e, r29	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	cd bf       	out	0x3d, r28	; 61
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16

		USB_ResetInterface();
     c32:	08 95       	ret

00000c34 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     c34:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     c36:	58 2f       	mov	r21, r24
     c38:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     c3a:	87 ff       	sbrs	r24, 7
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <Pipe_ConfigurePipe+0xe>
     c3e:	80 e1       	ldi	r24, 0x10	; 16
     c40:	01 c0       	rjmp	.+2      	; 0xc44 <Pipe_ConfigurePipe+0x10>
     c42:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     c44:	57 30       	cpi	r21, 0x07	; 7
     c46:	08 f0       	brcs	.+2      	; 0xc4a <Pipe_ConfigurePipe+0x16>
     c48:	57 c0       	rjmp	.+174    	; 0xcf8 <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     c4a:	66 23       	and	r22, r22
     c4c:	09 f4       	brne	.+2      	; 0xc50 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     c4e:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     c50:	4f 70       	andi	r20, 0x0F	; 15
     c52:	62 95       	swap	r22
     c54:	66 0f       	add	r22, r22
     c56:	66 0f       	add	r22, r22
     c58:	60 7c       	andi	r22, 0xC0	; 192
     c5a:	64 2b       	or	r22, r20
     c5c:	68 2b       	or	r22, r24
     c5e:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     c60:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c62:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     c66:	45 17       	cp	r20, r21
     c68:	a9 f4       	brne	.+42     	; 0xc94 <Pipe_ConfigurePipe+0x60>
     c6a:	04 c0       	rjmp	.+8      	; 0xc74 <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     c6c:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	03 c0       	rjmp	.+6      	; 0xc7a <Pipe_ConfigurePipe+0x46>
     c74:	88 e0       	ldi	r24, 0x08	; 8
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	10 f4       	brcc	.+4      	; 0xc84 <Pipe_ConfigurePipe+0x50>
     c80:	75 30       	cpi	r23, 0x05	; 5
     c82:	a1 f7       	brne	.-24     	; 0xc6c <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     c84:	87 2f       	mov	r24, r23
     c86:	82 95       	swap	r24
     c88:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     c8a:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     c8c:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     c8e:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     c90:	e0 e0       	ldi	r30, 0x00	; 0
     c92:	08 c0       	rjmp	.+16     	; 0xca4 <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     c94:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     c98:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     c9c:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     ca0:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     ca4:	81 ff       	sbrs	r24, 1
     ca6:	20 c0       	rjmp	.+64     	; 0xce8 <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     ca8:	90 91 a9 00 	lds	r25, 0x00A9
     cac:	9e 7f       	andi	r25, 0xFE	; 254
     cae:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     cb2:	90 91 ab 00 	lds	r25, 0x00AB
     cb6:	9d 7f       	andi	r25, 0xFD	; 253
     cb8:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     cbc:	90 91 a9 00 	lds	r25, 0x00A9
     cc0:	91 60       	ori	r25, 0x01	; 1
     cc2:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     cc6:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     cca:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     cce:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     cd2:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     cd6:	80 91 a9 00 	lds	r24, 0x00A9
     cda:	80 62       	ori	r24, 0x20	; 32
     cdc:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     ce0:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     ce4:	87 ff       	sbrs	r24, 7
     ce6:	08 c0       	rjmp	.+16     	; 0xcf8 <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     ce8:	4f 5f       	subi	r20, 0xFF	; 255
     cea:	47 30       	cpi	r20, 0x07	; 7
     cec:	09 f0       	breq	.+2      	; 0xcf0 <Pipe_ConfigurePipe+0xbc>
     cee:	b9 cf       	rjmp	.-142    	; 0xc62 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     cf0:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	01 c0       	rjmp	.+2      	; 0xcfa <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     cf8:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     cfa:	0f 91       	pop	r16
     cfc:	08 95       	ret

00000cfe <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     cfe:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     d08:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     d0c:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     d10:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     d14:	90 91 a9 00 	lds	r25, 0x00A9
     d18:	9e 7f       	andi	r25, 0xFE	; 254
     d1a:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     d1e:	8f 5f       	subi	r24, 0xFF	; 255
     d20:	87 30       	cpi	r24, 0x07	; 7
     d22:	81 f7       	brne	.-32     	; 0xd04 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     d24:	08 95       	ret

00000d26 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     d26:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     d2a:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     d2e:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     d30:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     d34:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     d38:	27 ff       	sbrs	r18, 7
     d3a:	0c c0       	rjmp	.+24     	; 0xd54 <Pipe_IsEndpointBound+0x2e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
     d3c:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
     d40:	53 2f       	mov	r21, r19
     d42:	5f 70       	andi	r21, 0x0F	; 15
     d44:	30 ff       	sbrs	r19, 0
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <Pipe_IsEndpointBound+0x26>
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	01 c0       	rjmp	.+2      	; 0xd4e <Pipe_IsEndpointBound+0x28>
     d4c:	20 e8       	ldi	r18, 0x80	; 128
     d4e:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     d50:	28 17       	cp	r18, r24
     d52:	49 f0       	breq	.+18     	; 0xd66 <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     d54:	9f 5f       	subi	r25, 0xFF	; 255
     d56:	97 30       	cpi	r25, 0x07	; 7
     d58:	59 f7       	brne	.-42     	; 0xd30 <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     d5a:	84 2f       	mov	r24, r20
     d5c:	8f 70       	andi	r24, 0x0F	; 15
     d5e:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     d66:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     d68:	08 95       	ret

00000d6a <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     d6a:	75 d0       	rcall	.+234    	; 0xe56 <USB_INT_DisableAllInterrupts>
     d6c:	7c d0       	rcall	.+248    	; 0xe66 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     d6e:	e0 ee       	ldi	r30, 0xE0	; 224
     d70:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     d72:	80 81       	ld	r24, Z
     d74:	81 60       	ori	r24, 0x01	; 1
     d76:	80 83       	st	Z, r24
     d78:	e8 ed       	ldi	r30, 0xD8	; 216
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     d7c:	80 81       	ld	r24, Z
     d7e:	8f 77       	andi	r24, 0x7F	; 127
     d80:	80 83       	st	Z, r24
     d82:	19 bc       	out	0x29, r1	; 41
     d84:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     d86:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     d88:	8c 91       	ld	r24, X
     d8a:	8e 7f       	andi	r24, 0xFE	; 254
     d8c:	8c 93       	st	X, r24
     d8e:	80 81       	ld	r24, Z
     d90:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     d92:	80 83       	st	Z, r24
     d94:	10 92 7e 01 	sts	0x017E, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     d98:	08 95       	ret

00000d9a <USB_ResetInterface>:
     d9a:	5d d0       	rcall	.+186    	; 0xe56 <USB_INT_DisableAllInterrupts>
}
     d9c:	64 d0       	rcall	.+200    	; 0xe66 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     d9e:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     da2:	8f 77       	andi	r24, 0x7F	; 127
     da4:	80 93 d8 00 	sts	0x00D8, r24
     da8:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     dac:	80 68       	ori	r24, 0x80	; 128
     dae:	80 93 d8 00 	sts	0x00D8, r24
     db2:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     db6:	8f 7d       	andi	r24, 0xDF	; 223
     db8:	80 93 d8 00 	sts	0x00D8, r24
     dbc:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     dc0:	8f 77       	andi	r24, 0x7F	; 127
     dc2:	80 93 d7 00 	sts	0x00D7, r24
     dc6:	8c e0       	ldi	r24, 0x0C	; 12
     dc8:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     dca:	8e e0       	ldi	r24, 0x0E	; 14
     dcc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     dce:	09 b4       	in	r0, 0x29	; 41
     dd0:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     dd2:	fd cf       	rjmp	.-6      	; 0xdce <USB_ResetInterface+0x34>
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	80 93 87 01 	sts	0x0187, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     dda:	10 92 7d 01 	sts	0x017D, r1
	USB_Host_ConfigurationNumber = 0;
     dde:	80 e4       	ldi	r24, 0x40	; 64
     de0:	80 93 71 01 	sts	0x0171, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     de4:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     de8:	80 64       	ori	r24, 0x40	; 64
     dea:	80 93 d8 00 	sts	0x00D8, r24
     dee:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     df2:	81 60       	ori	r24, 0x01	; 1
     df4:	80 93 dd 00 	sts	0x00DD, r24
     df8:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     dfc:	84 60       	ori	r24, 0x04	; 4
     dfe:	80 93 dd 00 	sts	0x00DD, r24
     e02:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     e06:	8f 7e       	andi	r24, 0xEF	; 239
     e08:	80 93 d7 00 	sts	0x00D7, r24
     e0c:	6f 9a       	sbi	0x0d, 7	; 13
     e0e:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     e10:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     e14:	81 60       	ori	r24, 0x01	; 1
     e16:	80 93 de 00 	sts	0x00DE, r24
     e1a:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     e1e:	84 60       	ori	r24, 0x04	; 4
     e20:	80 93 de 00 	sts	0x00DE, r24
     e24:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     e28:	8e 7f       	andi	r24, 0xFE	; 254
     e2a:	80 93 e0 00 	sts	0x00E0, r24
     e2e:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     e32:	80 61       	ori	r24, 0x10	; 16
     e34:	80 93 d8 00 	sts	0x00D8, r24
     e38:	08 95       	ret

00000e3a <USB_Init>:
     e3a:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     e3e:	80 81       	ld	r24, Z
     e40:	8f 7e       	andi	r24, 0xEF	; 239
     e42:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     e44:	e7 ed       	ldi	r30, 0xD7	; 215
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	81 60       	ori	r24, 0x01	; 1
     e4c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	80 93 7e 01 	sts	0x017E, r24

	USB_ResetInterface();
     e54:	a2 cf       	rjmp	.-188    	; 0xd9a <USB_ResetInterface>

00000e56 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     e56:	e8 ed       	ldi	r30, 0xD8	; 216
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8c 7f       	andi	r24, 0xFC	; 252
     e5e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     e60:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     e64:	08 95       	ret

00000e66 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     e66:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     e6a:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     e6e:	08 95       	ret

00000e70 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     e70:	1f 92       	push	r1
     e72:	0f 92       	push	r0
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	0f 92       	push	r0
     e78:	0b b6       	in	r0, 0x3b	; 59
     e7a:	0f 92       	push	r0
     e7c:	11 24       	eor	r1, r1
     e7e:	2f 93       	push	r18
     e80:	3f 93       	push	r19
     e82:	4f 93       	push	r20
     e84:	5f 93       	push	r21
     e86:	6f 93       	push	r22
     e88:	7f 93       	push	r23
     e8a:	8f 93       	push	r24
     e8c:	9f 93       	push	r25
     e8e:	af 93       	push	r26
     e90:	bf 93       	push	r27
     e92:	ef 93       	push	r30
     e94:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     e96:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     e9a:	85 ff       	sbrs	r24, 5
     e9c:	0a c0       	rjmp	.+20     	; 0xeb2 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     e9e:	80 91 a0 00 	lds	r24, 0x00A0
     ea2:	85 ff       	sbrs	r24, 5
     ea4:	06 c0       	rjmp	.+12     	; 0xeb2 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ea6:	80 91 9f 00 	lds	r24, 0x009F
     eaa:	8f 7d       	andi	r24, 0xDF	; 223
     eac:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     eb0:	10 d1       	rcall	.+544    	; 0x10d2 <USB_Event_Stub>
     eb2:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     eb6:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     eb8:	15 c0       	rjmp	.+42     	; 0xee4 <__vector_10+0x74>
     eba:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     ebe:	81 ff       	sbrs	r24, 1
     ec0:	11 c0       	rjmp	.+34     	; 0xee4 <__vector_10+0x74>
     ec2:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     ec6:	8d 7f       	andi	r24, 0xFD	; 253
     ec8:	80 93 9f 00 	sts	0x009F, r24
     ecc:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     ed0:	8e 7f       	andi	r24, 0xFE	; 254
     ed2:	80 93 9f 00 	sts	0x009F, r24
     ed6:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     eda:	8d 7f       	andi	r24, 0xFD	; 253
     edc:	80 93 a0 00 	sts	0x00A0, r24
     ee0:	d3 da       	rcall	.-2650   	; 0x488 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     ee2:	5b df       	rcall	.-330    	; 0xd9a <USB_ResetInterface>
     ee4:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     ee8:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     eea:	15 c0       	rjmp	.+42     	; 0xf16 <__vector_10+0xa6>
     eec:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     ef0:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     ef2:	11 c0       	rjmp	.+34     	; 0xf16 <__vector_10+0xa6>
     ef4:	80 91 df 00 	lds	r24, 0x00DF
     ef8:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     efa:	80 93 df 00 	sts	0x00DF, r24
     efe:	77 98       	cbi	0x0e, 7	; 14
     f00:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     f04:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     f06:	80 93 dd 00 	sts	0x00DD, r24
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	6f db       	rcall	.-2338   	; 0x5ec <EVENT_USB_Host_HostError>
     f0e:	bc da       	rcall	.-2696   	; 0x488 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	80 93 87 01 	sts	0x0187, r24
		EVENT_USB_Host_DeviceUnattached();
     f16:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     f1a:	80 ff       	sbrs	r24, 0
     f1c:	17 c0       	rjmp	.+46     	; 0xf4c <__vector_10+0xdc>
     f1e:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     f22:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     f24:	13 c0       	rjmp	.+38     	; 0xf4c <__vector_10+0xdc>
     f26:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     f2a:	8e 7f       	andi	r24, 0xFE	; 254
     f2c:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     f30:	80 91 de 00 	lds	r24, 0x00DE
     f34:	8e 7f       	andi	r24, 0xFE	; 254
     f36:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     f3a:	a1 da       	rcall	.-2750   	; 0x47e <EVENT_USB_Host_DeviceAttached>
     f3c:	80 91 a0 00 	lds	r24, 0x00A0
     f40:	82 60       	ori	r24, 0x02	; 2
     f42:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     f46:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     f48:	80 93 87 01 	sts	0x0187, r24
     f4c:	80 91 df 00 	lds	r24, 0x00DF
     f50:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     f52:	0e c0       	rjmp	.+28     	; 0xf70 <__vector_10+0x100>
     f54:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     f58:	82 ff       	sbrs	r24, 2
     f5a:	0a c0       	rjmp	.+20     	; 0xf70 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     f5c:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     f60:	8b 7f       	andi	r24, 0xFB	; 251
     f62:	80 93 df 00 	sts	0x00DF, r24
     f66:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	5f db       	rcall	.-2370   	; 0x62a <EVENT_USB_Host_DeviceEnumerationFailed>
     f6c:	8d da       	rcall	.-2790   	; 0x488 <EVENT_USB_Host_DeviceUnattached>
     f6e:	15 df       	rcall	.-470    	; 0xd9a <USB_ResetInterface>
     f70:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     f72:	ef 91       	pop	r30
     f74:	bf 91       	pop	r27
     f76:	af 91       	pop	r26
     f78:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     f7a:	8f 91       	pop	r24
     f7c:	7f 91       	pop	r23

		USB_ResetInterface();
     f7e:	6f 91       	pop	r22
     f80:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     f82:	4f 91       	pop	r20
     f84:	3f 91       	pop	r19
     f86:	2f 91       	pop	r18
     f88:	0f 90       	pop	r0
     f8a:	0b be       	out	0x3b, r0	; 59
     f8c:	0f 90       	pop	r0
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	0f 90       	pop	r0
     f92:	1f 90       	pop	r1
     f94:	18 95       	reti

00000f96 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     f96:	cf 92       	push	r12
     f98:	df 92       	push	r13
     f9a:	ef 92       	push	r14
     f9c:	ff 92       	push	r15
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	29 97       	sbiw	r28, 0x09	; 9
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	cd bf       	out	0x3d, r28	; 61
     fb6:	6b 01       	movw	r12, r22
     fb8:	8a 01       	movw	r16, r20
     fba:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     fbc:	90 e8       	ldi	r25, 0x80	; 128
     fbe:	90 93 7f 01 	sts	0x017F, r25
     fc2:	96 e0       	ldi	r25, 0x06	; 6
     fc4:	90 93 80 01 	sts	0x0180, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     fce:	90 93 82 01 	sts	0x0182, r25
     fd2:	80 93 81 01 	sts	0x0181, r24
     fd6:	10 92 84 01 	sts	0x0184, r1
     fda:	10 92 83 01 	sts	0x0183, r1
     fde:	89 e0       	ldi	r24, 0x09	; 9
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	90 93 86 01 	sts	0x0186, r25
     fe6:	80 93 85 01 	sts	0x0185, r24
     fea:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     fee:	ce 01       	movw	r24, r28
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	98 d0       	rcall	.+304    	; 0x1124 <USB_Host_SendControlRequest>
     ff4:	88 23       	and	r24, r24
     ff6:	b9 f4       	brne	.+46     	; 0x1026 <USB_Host_GetDeviceConfigDescriptor+0x90>
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     ffa:	9c 81       	ldd	r25, Y+4	; 0x04
     ffc:	f6 01       	movw	r30, r12
     ffe:	91 83       	std	Z+1, r25	; 0x01
    1000:	80 83       	st	Z, r24
    1002:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
    1004:	f9 06       	cpc	r15, r25
    1006:	70 f0       	brcs	.+28     	; 0x1024 <USB_Host_GetDeviceConfigDescriptor+0x8e>
    1008:	90 93 86 01 	sts	0x0186, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    100c:	80 93 85 01 	sts	0x0185, r24
    1010:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1012:	88 d0       	rcall	.+272    	; 0x1124 <USB_Host_SendControlRequest>
    1014:	88 23       	and	r24, r24
    1016:	39 f4       	brne	.+14     	; 0x1026 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1018:	f8 01       	movw	r30, r16
    101a:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    101c:	92 30       	cpi	r25, 0x02	; 2
    101e:	19 f0       	breq	.+6      	; 0x1026 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1020:	86 e0       	ldi	r24, 0x06	; 6
    1022:	01 c0       	rjmp	.+2      	; 0x1026 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    1024:	85 e0       	ldi	r24, 0x05	; 5
    1026:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1028:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	ff 90       	pop	r15
    103c:	ef 90       	pop	r14
    103e:	df 90       	pop	r13
    1040:	cf 90       	pop	r12
    1042:	08 95       	ret

00001044 <USB_GetNextDescriptorComp>:
    1044:	af 92       	push	r10
    1046:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1048:	cf 92       	push	r12
    104a:	df 92       	push	r13
    104c:	ef 92       	push	r14
    104e:	ff 92       	push	r15
    1050:	0f 93       	push	r16
    1052:	1f 93       	push	r17
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	7c 01       	movw	r14, r24
    105a:	8b 01       	movw	r16, r22
    105c:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    105e:	28 c0       	rjmp	.+80     	; 0x10b0 <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1060:	f8 01       	movw	r30, r16
    1062:	c0 80       	ld	r12, Z
    1064:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1066:	f6 01       	movw	r30, r12
    1068:	80 81       	ld	r24, Z
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	9e 01       	movw	r18, r28
    106e:	8c 17       	cp	r24, r28
    1070:	9d 07       	cpc	r25, r29
    1072:	08 f4       	brcc	.+2      	; 0x1076 <USB_GetNextDescriptorComp+0x32>
    1074:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1076:	c6 01       	movw	r24, r12
    1078:	82 0f       	add	r24, r18
    107a:	93 1f       	adc	r25, r19
    107c:	f8 01       	movw	r30, r16
    107e:	91 83       	std	Z+1, r25	; 0x01
    1080:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
    1082:	f7 01       	movw	r30, r14
    1084:	80 81       	ld	r24, Z
    1086:	91 81       	ldd	r25, Z+1	; 0x01
    1088:	82 1b       	sub	r24, r18
    108a:	93 0b       	sbc	r25, r19
    108c:	91 83       	std	Z+1, r25	; 0x01
    108e:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1090:	f8 01       	movw	r30, r16
    1092:	80 81       	ld	r24, Z
    1094:	91 81       	ldd	r25, Z+1	; 0x01
    1096:	f5 01       	movw	r30, r10
    1098:	09 95       	icall
    109a:	82 30       	cpi	r24, 0x02	; 2
    109c:	49 f0       	breq	.+18     	; 0x10b0 <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    109e:	81 30       	cpi	r24, 0x01	; 1
    10a0:	69 f4       	brne	.+26     	; 0x10bc <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
    10a2:	f8 01       	movw	r30, r16
    10a4:	d1 82       	std	Z+1, r13	; 0x01
    10a6:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
    10a8:	f7 01       	movw	r30, r14
    10aa:	d1 83       	std	Z+1, r29	; 0x01
    10ac:	c0 83       	st	Z, r28
    10ae:	06 c0       	rjmp	.+12     	; 0x10bc <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    10b0:	f7 01       	movw	r30, r14
    10b2:	c0 81       	ld	r28, Z
    10b4:	d1 81       	ldd	r29, Z+1	; 0x01
    10b6:	20 97       	sbiw	r28, 0x00	; 0
    10b8:	99 f6       	brne	.-90     	; 0x1060 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    10ba:	82 e0       	ldi	r24, 0x02	; 2
}
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	ff 90       	pop	r15
    10c6:	ef 90       	pop	r14
    10c8:	df 90       	pop	r13
    10ca:	cf 90       	pop	r12
    10cc:	bf 90       	pop	r11
    10ce:	af 90       	pop	r10
    10d0:	08 95       	ret

000010d2 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    10d2:	08 95       	ret

000010d4 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    10d4:	1f 93       	push	r17
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    10dc:	c9 ee       	ldi	r28, 0xE9	; 233
    10de:	d3 e0       	ldi	r29, 0x03	; 3
    10e0:	06 c0       	rjmp	.+12     	; 0x10ee <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	2b dc       	rcall	.-1962   	; 0x93c <USB_Host_WaitMS>
    10e6:	88 23       	and	r24, r24
    10e8:	c9 f4       	brne	.+50     	; 0x111c <USB_Host_WaitForIOS+0x48>
    10ea:	21 97       	sbiw	r28, 0x01	; 1
    10ec:	b1 f0       	breq	.+44     	; 0x111a <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    10ee:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    10f0:	29 f4       	brne	.+10     	; 0x10fc <USB_Host_WaitForIOS+0x28>
    10f2:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    10f6:	83 ff       	sbrs	r24, 3
    10f8:	f4 cf       	rjmp	.-24     	; 0x10e2 <USB_Host_WaitForIOS+0xe>
    10fa:	0d c0       	rjmp	.+26     	; 0x1116 <USB_Host_WaitForIOS+0x42>
    10fc:	11 30       	cpi	r17, 0x01	; 1
    10fe:	29 f4       	brne	.+10     	; 0x110a <USB_Host_WaitForIOS+0x36>
    1100:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1104:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1106:	ed cf       	rjmp	.-38     	; 0x10e2 <USB_Host_WaitForIOS+0xe>
    1108:	06 c0       	rjmp	.+12     	; 0x1116 <USB_Host_WaitForIOS+0x42>
    110a:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    110c:	51 f7       	brne	.-44     	; 0x10e2 <USB_Host_WaitForIOS+0xe>
    110e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1112:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1114:	e6 cf       	rjmp	.-52     	; 0x10e2 <USB_Host_WaitForIOS+0xe>
    1116:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1118:	01 c0       	rjmp	.+2      	; 0x111c <USB_Host_WaitForIOS+0x48>
    111a:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    111c:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
    111e:	cf 91       	pop	r28
    1120:	1f 91       	pop	r17
    1122:	08 95       	ret

00001124 <USB_Host_SendControlRequest>:
    1124:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1126:	ff 92       	push	r15
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1132:	e0 90 9e 00 	lds	r14, 0x009E
    1136:	ff 24       	eor	r15, r15
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	e8 22       	and	r14, r24
    113c:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    113e:	00 91 85 01 	lds	r16, 0x0185
    1142:	10 91 86 01 	lds	r17, 0x0186
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1146:	80 91 9e 00 	lds	r24, 0x009E
    114a:	81 60       	ori	r24, 0x01	; 1
    114c:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	f4 db       	rcall	.-2072   	; 0x93c <USB_Host_WaitMS>
    1154:	88 23       	and	r24, r24
    1156:	09 f0       	breq	.+2      	; 0x115a <USB_Host_SendControlRequest+0x36>
    1158:	ca c0       	rjmp	.+404    	; 0x12ee <USB_Host_SendControlRequest+0x1ca>
    115a:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    115e:	8f 7c       	andi	r24, 0xCF	; 207
    1160:	80 93 aa 00 	sts	0x00AA, r24
    1164:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1168:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    116c:	8f 7e       	andi	r24, 0xEF	; 239
    116e:	80 93 a6 00 	sts	0x00A6, r24
    1172:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1176:	8f 7b       	andi	r24, 0xBF	; 191
    1178:	80 93 a9 00 	sts	0x00A9, r24
    117c:	88 e0       	ldi	r24, 0x08	; 8
    117e:	ef e7       	ldi	r30, 0x7F	; 127
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1180:	f1 e0       	ldi	r31, 0x01	; 1
    1182:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1184:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1188:	81 50       	subi	r24, 0x01	; 1
    118a:	d9 f7       	brne	.-10     	; 0x1182 <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    118c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1190:	87 77       	andi	r24, 0x77	; 119
    1192:	80 93 a6 00 	sts	0x00A6, r24
    1196:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1198:	9d df       	rcall	.-198    	; 0x10d4 <USB_Host_WaitForIOS>
    119a:	88 23       	and	r24, r24
    119c:	09 f0       	breq	.+2      	; 0x11a0 <USB_Host_SendControlRequest+0x7c>
    119e:	a7 c0       	rjmp	.+334    	; 0x12ee <USB_Host_SendControlRequest+0x1ca>
    11a0:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11a4:	80 64       	ori	r24, 0x40	; 64
    11a6:	80 93 a9 00 	sts	0x00A9, r24
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	c7 db       	rcall	.-2162   	; 0x93c <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    11ae:	88 23       	and	r24, r24
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <USB_Host_SendControlRequest+0x90>
    11b2:	9d c0       	rjmp	.+314    	; 0x12ee <USB_Host_SendControlRequest+0x1ca>
    11b4:	80 91 7f 01 	lds	r24, 0x017F
    11b8:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    11ba:	4f c0       	rjmp	.+158    	; 0x125a <USB_Host_SendControlRequest+0x136>
    11bc:	80 91 aa 00 	lds	r24, 0x00AA
    11c0:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11c2:	80 61       	ori	r24, 0x10	; 16
    11c4:	80 93 aa 00 	sts	0x00AA, r24
    11c8:	20 97       	sbiw	r28, 0x00	; 0
    11ca:	61 f5       	brne	.+88     	; 0x1224 <USB_Host_SendControlRequest+0x100>
    11cc:	2e c0       	rjmp	.+92     	; 0x122a <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    11ce:	80 91 a9 00 	lds	r24, 0x00A9
    11d2:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11d4:	80 93 a9 00 	sts	0x00A9, r24
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	7c df       	rcall	.-264    	; 0x10d4 <USB_Host_WaitForIOS>
    11dc:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    11de:	09 f0       	breq	.+2      	; 0x11e2 <USB_Host_SendControlRequest+0xbe>
    11e0:	86 c0       	rjmp	.+268    	; 0x12ee <USB_Host_SendControlRequest+0x1ca>
    11e2:	80 91 f6 00 	lds	r24, 0x00F6
    11e6:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11ea:	00 97       	sbiw	r24, 0x00	; 0
    11ec:	41 f4       	brne	.+16     	; 0x11fe <USB_Host_SendControlRequest+0xda>
    11ee:	00 e0       	ldi	r16, 0x00	; 0
    11f0:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    11f2:	05 c0       	rjmp	.+10     	; 0x11fe <USB_Host_SendControlRequest+0xda>
    11f4:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
    11f8:	89 93       	st	Y+, r24
    11fa:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    11fc:	10 40       	sbci	r17, 0x00	; 0
    11fe:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
    1202:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	19 f0       	breq	.+6      	; 0x1210 <USB_Host_SendControlRequest+0xec>
    120a:	01 15       	cp	r16, r1
    120c:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    120e:	91 f7       	brne	.-28     	; 0x11f4 <USB_Host_SendControlRequest+0xd0>
    1210:	80 91 a9 00 	lds	r24, 0x00A9
    1214:	80 64       	ori	r24, 0x40	; 64
    1216:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    121a:	80 91 a6 00 	lds	r24, 0x00A6
    121e:	8e 77       	andi	r24, 0x7E	; 126
    1220:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1224:	01 15       	cp	r16, r1
    1226:	11 05       	cpc	r17, r1
    1228:	91 f6       	brne	.-92     	; 0x11ce <USB_Host_SendControlRequest+0xaa>
    122a:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    122e:	8f 7c       	andi	r24, 0xCF	; 207
    1230:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1232:	80 93 aa 00 	sts	0x00AA, r24
    1236:	80 91 a9 00 	lds	r24, 0x00A9
    123a:	8f 7b       	andi	r24, 0xBF	; 191
    123c:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1240:	82 e0       	ldi	r24, 0x02	; 2
    1242:	48 df       	rcall	.-368    	; 0x10d4 <USB_Host_WaitForIOS>
    1244:	88 23       	and	r24, r24
    1246:	09 f0       	breq	.+2      	; 0x124a <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1248:	52 c0       	rjmp	.+164    	; 0x12ee <USB_Host_SendControlRequest+0x1ca>
    124a:	80 91 a6 00 	lds	r24, 0x00A6
    124e:	8b 77       	andi	r24, 0x7B	; 123
    1250:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1254:	82 e0       	ldi	r24, 0x02	; 2
    1256:	3e df       	rcall	.-388    	; 0x10d4 <USB_Host_WaitForIOS>
    1258:	4a c0       	rjmp	.+148    	; 0x12ee <USB_Host_SendControlRequest+0x1ca>
    125a:	20 97       	sbiw	r28, 0x00	; 0
    125c:	a1 f1       	breq	.+104    	; 0x12c6 <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    125e:	80 91 aa 00 	lds	r24, 0x00AA
    1262:	8f 7c       	andi	r24, 0xCF	; 207
    1264:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1266:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    126a:	80 91 a9 00 	lds	r24, 0x00A9
    126e:	8f 7b       	andi	r24, 0xBF	; 191
    1270:	80 93 a9 00 	sts	0x00A9, r24
    1274:	1c c0       	rjmp	.+56     	; 0x12ae <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1276:	2e df       	rcall	.-420    	; 0x10d4 <USB_Host_WaitForIOS>
    1278:	88 23       	and	r24, r24
    127a:	c9 f5       	brne	.+114    	; 0x12ee <USB_Host_SendControlRequest+0x1ca>
    127c:	fe 01       	movw	r30, r28
    127e:	07 c0       	rjmp	.+14     	; 0x128e <USB_Host_SendControlRequest+0x16a>
    1280:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1282:	ef 01       	movw	r28, r30
    1284:	80 93 af 00 	sts	0x00AF, r24
    1288:	01 50       	subi	r16, 0x01	; 1
    128a:	10 40       	sbci	r17, 0x00	; 0
    128c:	59 f0       	breq	.+22     	; 0x12a4 <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    128e:	ef 01       	movw	r28, r30
    1290:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1294:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    1298:	80 91 71 01 	lds	r24, 0x0171
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    129c:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    129e:	28 17       	cp	r18, r24
    12a0:	39 07       	cpc	r19, r25
    12a2:	70 f3       	brcs	.-36     	; 0x1280 <USB_Host_SendControlRequest+0x15c>
    12a4:	80 91 a6 00 	lds	r24, 0x00A6
    12a8:	8b 77       	andi	r24, 0x7B	; 123
    12aa:	80 93 a6 00 	sts	0x00A6, r24
    12ae:	82 e0       	ldi	r24, 0x02	; 2
    12b0:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    12b2:	11 05       	cpc	r17, r1
    12b4:	01 f7       	brne	.-64     	; 0x1276 <USB_Host_SendControlRequest+0x152>
    12b6:	0e df       	rcall	.-484    	; 0x10d4 <USB_Host_WaitForIOS>
    12b8:	88 23       	and	r24, r24
    12ba:	c9 f4       	brne	.+50     	; 0x12ee <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    12bc:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    12c0:	80 64       	ori	r24, 0x40	; 64
    12c2:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    12c6:	80 91 aa 00 	lds	r24, 0x00AA
    12ca:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    12cc:	80 61       	ori	r24, 0x10	; 16
    12ce:	80 93 aa 00 	sts	0x00AA, r24
    12d2:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    12d6:	8f 7b       	andi	r24, 0xBF	; 191
    12d8:	80 93 a9 00 	sts	0x00A9, r24
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	fa de       	rcall	.-524    	; 0x10d4 <USB_Host_WaitForIOS>
    12e0:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12e2:	29 f4       	brne	.+10     	; 0x12ee <USB_Host_SendControlRequest+0x1ca>
    12e4:	90 91 a6 00 	lds	r25, 0x00A6
    12e8:	9e 77       	andi	r25, 0x7E	; 126
    12ea:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    12ee:	90 91 a9 00 	lds	r25, 0x00A9
    12f2:	90 64       	ori	r25, 0x40	; 64
    12f4:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    12f8:	e1 14       	cp	r14, r1
    12fa:	f1 04       	cpc	r15, r1
    12fc:	29 f4       	brne	.+10     	; 0x1308 <USB_Host_SendControlRequest+0x1e4>
    12fe:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1302:	9e 7f       	andi	r25, 0xFE	; 254
    1304:	90 93 9e 00 	sts	0x009E, r25
    1308:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    130a:	90 93 a8 00 	sts	0x00A8, r25
    130e:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	1f 91       	pop	r17
    1318:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    131a:	ff 90       	pop	r15
    131c:	ef 90       	pop	r14
    131e:	08 95       	ret

00001320 <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    1320:	cf 93       	push	r28
    1322:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1324:	10 92 7f 01 	sts	0x017F, r1
    1328:	89 e0       	ldi	r24, 0x09	; 9
    132a:	80 93 80 01 	sts	0x0180, r24
    132e:	c0 93 81 01 	sts	0x0181, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1332:	10 92 82 01 	sts	0x0182, r1
    1336:	10 92 84 01 	sts	0x0184, r1
    133a:	10 92 83 01 	sts	0x0183, r1
    133e:	10 92 86 01 	sts	0x0186, r1
    1342:	10 92 85 01 	sts	0x0185, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1346:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	ea de       	rcall	.-556    	; 0x1124 <USB_Host_SendControlRequest>
    1350:	88 23       	and	r24, r24
    1352:	49 f4       	brne	.+18     	; 0x1366 <USB_Host_SetDeviceConfiguration+0x46>
    1354:	c0 93 7d 01 	sts	0x017D, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1358:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    135a:	11 f0       	breq	.+4      	; 0x1360 <USB_Host_SetDeviceConfiguration+0x40>
    135c:	9b e0       	ldi	r25, 0x0B	; 11
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <USB_Host_SetDeviceConfiguration+0x42>
    1360:	9a e0       	ldi	r25, 0x0A	; 10
    1362:	90 93 87 01 	sts	0x0187, r25
    1366:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1368:	08 95       	ret

0000136a <USB_Host_GetDescriptor>:
    136a:	fa 01       	movw	r30, r20
uint8_t USB_Host_GetDescriptor(const uint8_t Type,
                               const uint8_t Index,
                               void* const Buffer,
                               const uint8_t BufferLength)
{
	USB_ControlRequest = (USB_Request_Header_t)
    136c:	90 e8       	ldi	r25, 0x80	; 128
    136e:	90 93 7f 01 	sts	0x017F, r25
    1372:	96 e0       	ldi	r25, 0x06	; 6
    1374:	90 93 80 01 	sts	0x0180, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = (((uint16_t)Type << 8) | Index),
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	58 2f       	mov	r21, r24
    137c:	40 e0       	ldi	r20, 0x00	; 0
    137e:	64 2b       	or	r22, r20
    1380:	75 2b       	or	r23, r21
uint8_t USB_Host_GetDescriptor(const uint8_t Type,
                               const uint8_t Index,
                               void* const Buffer,
                               const uint8_t BufferLength)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1382:	70 93 82 01 	sts	0x0182, r23
    1386:	60 93 81 01 	sts	0x0181, r22
    138a:	10 92 84 01 	sts	0x0184, r1
    138e:	10 92 83 01 	sts	0x0183, r1
    1392:	20 93 85 01 	sts	0x0185, r18
    1396:	10 92 86 01 	sts	0x0186, r1
    139a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = BufferLength,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
    139e:	cf 01       	movw	r24, r30
    13a0:	c1 ce       	rjmp	.-638    	; 0x1124 <USB_Host_SendControlRequest>

000013a2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    13a2:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    13a4:	c0 91 a7 00 	lds	r28, 0x00A7
    13a8:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    13aa:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    13ae:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    13b2:	19 db       	rcall	.-2510   	; 0x9e6 <USB_Host_ProcessNextHostState>
    13b4:	c0 93 a7 00 	sts	0x00A7, r28
    13b8:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    13ba:	08 95       	ret

000013bc <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    13bc:	90 91 c8 00 	lds	r25, 0x00C8
    13c0:	95 ff       	sbrs	r25, 5
    13c2:	fc cf       	rjmp	.-8      	; 0x13bc <Serial_putchar>
				UDR1 = DataByte;
    13c4:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	08 95       	ret

000013ce <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    13ce:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    13d2:	87 ff       	sbrs	r24, 7
    13d4:	08 c0       	rjmp	.+16     	; 0x13e6 <Serial_getchar+0x18>
    13d6:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    13da:	87 ff       	sbrs	r24, 7
    13dc:	07 c0       	rjmp	.+14     	; 0x13ec <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    13de:	80 91 ce 00 	lds	r24, 0x00CE
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	08 95       	ret
	  return _FDEV_EOF;
    13e6:	8e ef       	ldi	r24, 0xFE	; 254
    13e8:	9f ef       	ldi	r25, 0xFF	; 255
    13ea:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    13ec:	8f ef       	ldi	r24, 0xFF	; 255
    13ee:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    13f0:	08 95       	ret

000013f2 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    13f2:	fc 01       	movw	r30, r24
	if (!(Stream))
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	51 f4       	brne	.+20     	; 0x140c <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    13f8:	e8 e8       	ldi	r30, 0x88	; 136
    13fa:	f1 e0       	ldi	r31, 0x01	; 1
    13fc:	f0 93 97 01 	sts	0x0197, r31
    1400:	e0 93 96 01 	sts	0x0196, r30
		stdout = Stream;
    1404:	f0 93 99 01 	sts	0x0199, r31
    1408:	e0 93 98 01 	sts	0x0198, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    140c:	8e e0       	ldi	r24, 0x0E	; 14
    140e:	df 01       	movw	r26, r30
    1410:	1d 92       	st	X+, r1
    1412:	8a 95       	dec	r24
    1414:	e9 f7       	brne	.-6      	; 0x1410 <Serial_CreateStream+0x1e>
    1416:	83 e0       	ldi	r24, 0x03	; 3
    1418:	83 83       	std	Z+3, r24	; 0x03
    141a:	8e ed       	ldi	r24, 0xDE	; 222
    141c:	99 e0       	ldi	r25, 0x09	; 9
    141e:	91 87       	std	Z+9, r25	; 0x09
    1420:	80 87       	std	Z+8, r24	; 0x08
    1422:	87 ee       	ldi	r24, 0xE7	; 231
    1424:	99 e0       	ldi	r25, 0x09	; 9
    1426:	93 87       	std	Z+11, r25	; 0x0b
    1428:	82 87       	std	Z+10, r24	; 0x0a
}
    142a:	08 95       	ret

0000142c <printf_P>:
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	fe 01       	movw	r30, r28
    1436:	35 96       	adiw	r30, 0x05	; 5
    1438:	61 91       	ld	r22, Z+
    143a:	71 91       	ld	r23, Z+
    143c:	80 91 98 01 	lds	r24, 0x0198
    1440:	90 91 99 01 	lds	r25, 0x0199
    1444:	dc 01       	movw	r26, r24
    1446:	13 96       	adiw	r26, 0x03	; 3
    1448:	2c 91       	ld	r18, X
    144a:	13 97       	sbiw	r26, 0x03	; 3
    144c:	28 60       	ori	r18, 0x08	; 8
    144e:	13 96       	adiw	r26, 0x03	; 3
    1450:	2c 93       	st	X, r18
    1452:	af 01       	movw	r20, r30
    1454:	39 d0       	rcall	.+114    	; 0x14c8 <vfprintf>
    1456:	e0 91 98 01 	lds	r30, 0x0198
    145a:	f0 91 99 01 	lds	r31, 0x0199
    145e:	23 81       	ldd	r18, Z+3	; 0x03
    1460:	27 7f       	andi	r18, 0xF7	; 247
    1462:	23 83       	std	Z+3, r18	; 0x03
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	08 95       	ret

0000146a <puts_P>:
    146a:	0f 93       	push	r16
    146c:	1f 93       	push	r17
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	8c 01       	movw	r16, r24
    1474:	e0 91 98 01 	lds	r30, 0x0198
    1478:	f0 91 99 01 	lds	r31, 0x0199
    147c:	83 81       	ldd	r24, Z+3	; 0x03
    147e:	81 ff       	sbrs	r24, 1
    1480:	1b c0       	rjmp	.+54     	; 0x14b8 <puts_P+0x4e>
    1482:	c0 e0       	ldi	r28, 0x00	; 0
    1484:	d0 e0       	ldi	r29, 0x00	; 0
    1486:	07 c0       	rjmp	.+14     	; 0x1496 <puts_P+0x2c>
    1488:	09 95       	icall
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	11 f0       	breq	.+4      	; 0x1492 <puts_P+0x28>
    148e:	cf ef       	ldi	r28, 0xFF	; 255
    1490:	df ef       	ldi	r29, 0xFF	; 255
    1492:	0f 5f       	subi	r16, 0xFF	; 255
    1494:	1f 4f       	sbci	r17, 0xFF	; 255
    1496:	f8 01       	movw	r30, r16
    1498:	84 91       	lpm	r24, Z
    149a:	60 91 98 01 	lds	r22, 0x0198
    149e:	70 91 99 01 	lds	r23, 0x0199
    14a2:	db 01       	movw	r26, r22
    14a4:	18 96       	adiw	r26, 0x08	; 8
    14a6:	ed 91       	ld	r30, X+
    14a8:	fc 91       	ld	r31, X
    14aa:	19 97       	sbiw	r26, 0x09	; 9
    14ac:	88 23       	and	r24, r24
    14ae:	61 f7       	brne	.-40     	; 0x1488 <puts_P+0x1e>
    14b0:	8a e0       	ldi	r24, 0x0A	; 10
    14b2:	09 95       	icall
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	11 f0       	breq	.+4      	; 0x14bc <puts_P+0x52>
    14b8:	cf ef       	ldi	r28, 0xFF	; 255
    14ba:	df ef       	ldi	r29, 0xFF	; 255
    14bc:	ce 01       	movw	r24, r28
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	08 95       	ret

000014c8 <vfprintf>:
    14c8:	2f 92       	push	r2
    14ca:	3f 92       	push	r3
    14cc:	4f 92       	push	r4
    14ce:	5f 92       	push	r5
    14d0:	6f 92       	push	r6
    14d2:	7f 92       	push	r7
    14d4:	8f 92       	push	r8
    14d6:	9f 92       	push	r9
    14d8:	af 92       	push	r10
    14da:	bf 92       	push	r11
    14dc:	cf 92       	push	r12
    14de:	df 92       	push	r13
    14e0:	ef 92       	push	r14
    14e2:	ff 92       	push	r15
    14e4:	0f 93       	push	r16
    14e6:	1f 93       	push	r17
    14e8:	cf 93       	push	r28
    14ea:	df 93       	push	r29
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	2d 97       	sbiw	r28, 0x0d	; 13
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	f8 94       	cli
    14f6:	de bf       	out	0x3e, r29	; 62
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	3c 01       	movw	r6, r24
    14fe:	7d 87       	std	Y+13, r23	; 0x0d
    1500:	6c 87       	std	Y+12, r22	; 0x0c
    1502:	5a 01       	movw	r10, r20
    1504:	fc 01       	movw	r30, r24
    1506:	17 82       	std	Z+7, r1	; 0x07
    1508:	16 82       	std	Z+6, r1	; 0x06
    150a:	83 81       	ldd	r24, Z+3	; 0x03
    150c:	81 ff       	sbrs	r24, 1
    150e:	bb c1       	rjmp	.+886    	; 0x1886 <vfprintf+0x3be>
    1510:	2e 01       	movw	r4, r28
    1512:	08 94       	sec
    1514:	41 1c       	adc	r4, r1
    1516:	51 1c       	adc	r5, r1
    1518:	f3 01       	movw	r30, r6
    151a:	93 81       	ldd	r25, Z+3	; 0x03
    151c:	ec 85       	ldd	r30, Y+12	; 0x0c
    151e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1520:	93 fd       	sbrc	r25, 3
    1522:	85 91       	lpm	r24, Z+
    1524:	93 ff       	sbrs	r25, 3
    1526:	81 91       	ld	r24, Z+
    1528:	fd 87       	std	Y+13, r31	; 0x0d
    152a:	ec 87       	std	Y+12, r30	; 0x0c
    152c:	88 23       	and	r24, r24
    152e:	09 f4       	brne	.+2      	; 0x1532 <vfprintf+0x6a>
    1530:	a6 c1       	rjmp	.+844    	; 0x187e <vfprintf+0x3b6>
    1532:	85 32       	cpi	r24, 0x25	; 37
    1534:	41 f4       	brne	.+16     	; 0x1546 <vfprintf+0x7e>
    1536:	93 fd       	sbrc	r25, 3
    1538:	85 91       	lpm	r24, Z+
    153a:	93 ff       	sbrs	r25, 3
    153c:	81 91       	ld	r24, Z+
    153e:	fd 87       	std	Y+13, r31	; 0x0d
    1540:	ec 87       	std	Y+12, r30	; 0x0c
    1542:	85 32       	cpi	r24, 0x25	; 37
    1544:	21 f4       	brne	.+8      	; 0x154e <vfprintf+0x86>
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	b3 01       	movw	r22, r6
    154a:	ce d1       	rcall	.+924    	; 0x18e8 <fputc>
    154c:	e5 cf       	rjmp	.-54     	; 0x1518 <vfprintf+0x50>
    154e:	ff 24       	eor	r15, r15
    1550:	ee 24       	eor	r14, r14
    1552:	10 e0       	ldi	r17, 0x00	; 0
    1554:	10 32       	cpi	r17, 0x20	; 32
    1556:	b0 f4       	brcc	.+44     	; 0x1584 <vfprintf+0xbc>
    1558:	8b 32       	cpi	r24, 0x2B	; 43
    155a:	69 f0       	breq	.+26     	; 0x1576 <vfprintf+0xae>
    155c:	8c 32       	cpi	r24, 0x2C	; 44
    155e:	28 f4       	brcc	.+10     	; 0x156a <vfprintf+0xa2>
    1560:	80 32       	cpi	r24, 0x20	; 32
    1562:	51 f0       	breq	.+20     	; 0x1578 <vfprintf+0xb0>
    1564:	83 32       	cpi	r24, 0x23	; 35
    1566:	71 f4       	brne	.+28     	; 0x1584 <vfprintf+0xbc>
    1568:	0b c0       	rjmp	.+22     	; 0x1580 <vfprintf+0xb8>
    156a:	8d 32       	cpi	r24, 0x2D	; 45
    156c:	39 f0       	breq	.+14     	; 0x157c <vfprintf+0xb4>
    156e:	80 33       	cpi	r24, 0x30	; 48
    1570:	49 f4       	brne	.+18     	; 0x1584 <vfprintf+0xbc>
    1572:	11 60       	ori	r17, 0x01	; 1
    1574:	2c c0       	rjmp	.+88     	; 0x15ce <vfprintf+0x106>
    1576:	12 60       	ori	r17, 0x02	; 2
    1578:	14 60       	ori	r17, 0x04	; 4
    157a:	29 c0       	rjmp	.+82     	; 0x15ce <vfprintf+0x106>
    157c:	18 60       	ori	r17, 0x08	; 8
    157e:	27 c0       	rjmp	.+78     	; 0x15ce <vfprintf+0x106>
    1580:	10 61       	ori	r17, 0x10	; 16
    1582:	25 c0       	rjmp	.+74     	; 0x15ce <vfprintf+0x106>
    1584:	17 fd       	sbrc	r17, 7
    1586:	2e c0       	rjmp	.+92     	; 0x15e4 <vfprintf+0x11c>
    1588:	28 2f       	mov	r18, r24
    158a:	20 53       	subi	r18, 0x30	; 48
    158c:	2a 30       	cpi	r18, 0x0A	; 10
    158e:	98 f4       	brcc	.+38     	; 0x15b6 <vfprintf+0xee>
    1590:	16 ff       	sbrs	r17, 6
    1592:	08 c0       	rjmp	.+16     	; 0x15a4 <vfprintf+0xdc>
    1594:	8f 2d       	mov	r24, r15
    1596:	88 0f       	add	r24, r24
    1598:	f8 2e       	mov	r15, r24
    159a:	ff 0c       	add	r15, r15
    159c:	ff 0c       	add	r15, r15
    159e:	f8 0e       	add	r15, r24
    15a0:	f2 0e       	add	r15, r18
    15a2:	15 c0       	rjmp	.+42     	; 0x15ce <vfprintf+0x106>
    15a4:	8e 2d       	mov	r24, r14
    15a6:	88 0f       	add	r24, r24
    15a8:	e8 2e       	mov	r14, r24
    15aa:	ee 0c       	add	r14, r14
    15ac:	ee 0c       	add	r14, r14
    15ae:	e8 0e       	add	r14, r24
    15b0:	e2 0e       	add	r14, r18
    15b2:	10 62       	ori	r17, 0x20	; 32
    15b4:	0c c0       	rjmp	.+24     	; 0x15ce <vfprintf+0x106>
    15b6:	8e 32       	cpi	r24, 0x2E	; 46
    15b8:	21 f4       	brne	.+8      	; 0x15c2 <vfprintf+0xfa>
    15ba:	16 fd       	sbrc	r17, 6
    15bc:	60 c1       	rjmp	.+704    	; 0x187e <vfprintf+0x3b6>
    15be:	10 64       	ori	r17, 0x40	; 64
    15c0:	06 c0       	rjmp	.+12     	; 0x15ce <vfprintf+0x106>
    15c2:	8c 36       	cpi	r24, 0x6C	; 108
    15c4:	11 f4       	brne	.+4      	; 0x15ca <vfprintf+0x102>
    15c6:	10 68       	ori	r17, 0x80	; 128
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <vfprintf+0x106>
    15ca:	88 36       	cpi	r24, 0x68	; 104
    15cc:	59 f4       	brne	.+22     	; 0x15e4 <vfprintf+0x11c>
    15ce:	ec 85       	ldd	r30, Y+12	; 0x0c
    15d0:	fd 85       	ldd	r31, Y+13	; 0x0d
    15d2:	93 fd       	sbrc	r25, 3
    15d4:	85 91       	lpm	r24, Z+
    15d6:	93 ff       	sbrs	r25, 3
    15d8:	81 91       	ld	r24, Z+
    15da:	fd 87       	std	Y+13, r31	; 0x0d
    15dc:	ec 87       	std	Y+12, r30	; 0x0c
    15de:	88 23       	and	r24, r24
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <vfprintf+0x11c>
    15e2:	b8 cf       	rjmp	.-144    	; 0x1554 <vfprintf+0x8c>
    15e4:	98 2f       	mov	r25, r24
    15e6:	95 54       	subi	r25, 0x45	; 69
    15e8:	93 30       	cpi	r25, 0x03	; 3
    15ea:	18 f0       	brcs	.+6      	; 0x15f2 <vfprintf+0x12a>
    15ec:	90 52       	subi	r25, 0x20	; 32
    15ee:	93 30       	cpi	r25, 0x03	; 3
    15f0:	38 f4       	brcc	.+14     	; 0x1600 <vfprintf+0x138>
    15f2:	24 e0       	ldi	r18, 0x04	; 4
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	a2 0e       	add	r10, r18
    15f8:	b3 1e       	adc	r11, r19
    15fa:	3f e3       	ldi	r19, 0x3F	; 63
    15fc:	39 83       	std	Y+1, r19	; 0x01
    15fe:	0f c0       	rjmp	.+30     	; 0x161e <vfprintf+0x156>
    1600:	83 36       	cpi	r24, 0x63	; 99
    1602:	31 f0       	breq	.+12     	; 0x1610 <vfprintf+0x148>
    1604:	83 37       	cpi	r24, 0x73	; 115
    1606:	81 f0       	breq	.+32     	; 0x1628 <vfprintf+0x160>
    1608:	83 35       	cpi	r24, 0x53	; 83
    160a:	09 f0       	breq	.+2      	; 0x160e <vfprintf+0x146>
    160c:	56 c0       	rjmp	.+172    	; 0x16ba <vfprintf+0x1f2>
    160e:	21 c0       	rjmp	.+66     	; 0x1652 <vfprintf+0x18a>
    1610:	f5 01       	movw	r30, r10
    1612:	80 81       	ld	r24, Z
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	22 e0       	ldi	r18, 0x02	; 2
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	a2 0e       	add	r10, r18
    161c:	b3 1e       	adc	r11, r19
    161e:	21 e0       	ldi	r18, 0x01	; 1
    1620:	c2 2e       	mov	r12, r18
    1622:	d1 2c       	mov	r13, r1
    1624:	42 01       	movw	r8, r4
    1626:	13 c0       	rjmp	.+38     	; 0x164e <vfprintf+0x186>
    1628:	92 e0       	ldi	r25, 0x02	; 2
    162a:	29 2e       	mov	r2, r25
    162c:	31 2c       	mov	r3, r1
    162e:	2a 0c       	add	r2, r10
    1630:	3b 1c       	adc	r3, r11
    1632:	f5 01       	movw	r30, r10
    1634:	80 80       	ld	r8, Z
    1636:	91 80       	ldd	r9, Z+1	; 0x01
    1638:	16 ff       	sbrs	r17, 6
    163a:	03 c0       	rjmp	.+6      	; 0x1642 <vfprintf+0x17a>
    163c:	6f 2d       	mov	r22, r15
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <vfprintf+0x17e>
    1642:	6f ef       	ldi	r22, 0xFF	; 255
    1644:	7f ef       	ldi	r23, 0xFF	; 255
    1646:	c4 01       	movw	r24, r8
    1648:	44 d1       	rcall	.+648    	; 0x18d2 <strnlen>
    164a:	6c 01       	movw	r12, r24
    164c:	51 01       	movw	r10, r2
    164e:	1f 77       	andi	r17, 0x7F	; 127
    1650:	14 c0       	rjmp	.+40     	; 0x167a <vfprintf+0x1b2>
    1652:	82 e0       	ldi	r24, 0x02	; 2
    1654:	28 2e       	mov	r2, r24
    1656:	31 2c       	mov	r3, r1
    1658:	2a 0c       	add	r2, r10
    165a:	3b 1c       	adc	r3, r11
    165c:	f5 01       	movw	r30, r10
    165e:	80 80       	ld	r8, Z
    1660:	91 80       	ldd	r9, Z+1	; 0x01
    1662:	16 ff       	sbrs	r17, 6
    1664:	03 c0       	rjmp	.+6      	; 0x166c <vfprintf+0x1a4>
    1666:	6f 2d       	mov	r22, r15
    1668:	70 e0       	ldi	r23, 0x00	; 0
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <vfprintf+0x1a8>
    166c:	6f ef       	ldi	r22, 0xFF	; 255
    166e:	7f ef       	ldi	r23, 0xFF	; 255
    1670:	c4 01       	movw	r24, r8
    1672:	24 d1       	rcall	.+584    	; 0x18bc <strnlen_P>
    1674:	6c 01       	movw	r12, r24
    1676:	10 68       	ori	r17, 0x80	; 128
    1678:	51 01       	movw	r10, r2
    167a:	13 fd       	sbrc	r17, 3
    167c:	1a c0       	rjmp	.+52     	; 0x16b2 <vfprintf+0x1ea>
    167e:	05 c0       	rjmp	.+10     	; 0x168a <vfprintf+0x1c2>
    1680:	80 e2       	ldi	r24, 0x20	; 32
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	b3 01       	movw	r22, r6
    1686:	30 d1       	rcall	.+608    	; 0x18e8 <fputc>
    1688:	ea 94       	dec	r14
    168a:	8e 2d       	mov	r24, r14
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	c8 16       	cp	r12, r24
    1690:	d9 06       	cpc	r13, r25
    1692:	b0 f3       	brcs	.-20     	; 0x1680 <vfprintf+0x1b8>
    1694:	0e c0       	rjmp	.+28     	; 0x16b2 <vfprintf+0x1ea>
    1696:	f4 01       	movw	r30, r8
    1698:	17 fd       	sbrc	r17, 7
    169a:	85 91       	lpm	r24, Z+
    169c:	17 ff       	sbrs	r17, 7
    169e:	81 91       	ld	r24, Z+
    16a0:	4f 01       	movw	r8, r30
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	b3 01       	movw	r22, r6
    16a6:	20 d1       	rcall	.+576    	; 0x18e8 <fputc>
    16a8:	e1 10       	cpse	r14, r1
    16aa:	ea 94       	dec	r14
    16ac:	08 94       	sec
    16ae:	c1 08       	sbc	r12, r1
    16b0:	d1 08       	sbc	r13, r1
    16b2:	c1 14       	cp	r12, r1
    16b4:	d1 04       	cpc	r13, r1
    16b6:	79 f7       	brne	.-34     	; 0x1696 <vfprintf+0x1ce>
    16b8:	df c0       	rjmp	.+446    	; 0x1878 <vfprintf+0x3b0>
    16ba:	84 36       	cpi	r24, 0x64	; 100
    16bc:	11 f0       	breq	.+4      	; 0x16c2 <vfprintf+0x1fa>
    16be:	89 36       	cpi	r24, 0x69	; 105
    16c0:	49 f5       	brne	.+82     	; 0x1714 <vfprintf+0x24c>
    16c2:	f5 01       	movw	r30, r10
    16c4:	17 ff       	sbrs	r17, 7
    16c6:	07 c0       	rjmp	.+14     	; 0x16d6 <vfprintf+0x20e>
    16c8:	80 81       	ld	r24, Z
    16ca:	91 81       	ldd	r25, Z+1	; 0x01
    16cc:	a2 81       	ldd	r26, Z+2	; 0x02
    16ce:	b3 81       	ldd	r27, Z+3	; 0x03
    16d0:	24 e0       	ldi	r18, 0x04	; 4
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	08 c0       	rjmp	.+16     	; 0x16e6 <vfprintf+0x21e>
    16d6:	80 81       	ld	r24, Z
    16d8:	91 81       	ldd	r25, Z+1	; 0x01
    16da:	aa 27       	eor	r26, r26
    16dc:	97 fd       	sbrc	r25, 7
    16de:	a0 95       	com	r26
    16e0:	ba 2f       	mov	r27, r26
    16e2:	22 e0       	ldi	r18, 0x02	; 2
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	a2 0e       	add	r10, r18
    16e8:	b3 1e       	adc	r11, r19
    16ea:	01 2f       	mov	r16, r17
    16ec:	0f 76       	andi	r16, 0x6F	; 111
    16ee:	b7 ff       	sbrs	r27, 7
    16f0:	08 c0       	rjmp	.+16     	; 0x1702 <vfprintf+0x23a>
    16f2:	b0 95       	com	r27
    16f4:	a0 95       	com	r26
    16f6:	90 95       	com	r25
    16f8:	81 95       	neg	r24
    16fa:	9f 4f       	sbci	r25, 0xFF	; 255
    16fc:	af 4f       	sbci	r26, 0xFF	; 255
    16fe:	bf 4f       	sbci	r27, 0xFF	; 255
    1700:	00 68       	ori	r16, 0x80	; 128
    1702:	bc 01       	movw	r22, r24
    1704:	cd 01       	movw	r24, r26
    1706:	a2 01       	movw	r20, r4
    1708:	2a e0       	ldi	r18, 0x0A	; 10
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	19 d1       	rcall	.+562    	; 0x1940 <__ultoa_invert>
    170e:	d8 2e       	mov	r13, r24
    1710:	d4 18       	sub	r13, r4
    1712:	3e c0       	rjmp	.+124    	; 0x1790 <vfprintf+0x2c8>
    1714:	85 37       	cpi	r24, 0x75	; 117
    1716:	21 f4       	brne	.+8      	; 0x1720 <vfprintf+0x258>
    1718:	1f 7e       	andi	r17, 0xEF	; 239
    171a:	2a e0       	ldi	r18, 0x0A	; 10
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	20 c0       	rjmp	.+64     	; 0x1760 <vfprintf+0x298>
    1720:	19 7f       	andi	r17, 0xF9	; 249
    1722:	8f 36       	cpi	r24, 0x6F	; 111
    1724:	a9 f0       	breq	.+42     	; 0x1750 <vfprintf+0x288>
    1726:	80 37       	cpi	r24, 0x70	; 112
    1728:	20 f4       	brcc	.+8      	; 0x1732 <vfprintf+0x26a>
    172a:	88 35       	cpi	r24, 0x58	; 88
    172c:	09 f0       	breq	.+2      	; 0x1730 <vfprintf+0x268>
    172e:	a7 c0       	rjmp	.+334    	; 0x187e <vfprintf+0x3b6>
    1730:	0b c0       	rjmp	.+22     	; 0x1748 <vfprintf+0x280>
    1732:	80 37       	cpi	r24, 0x70	; 112
    1734:	21 f0       	breq	.+8      	; 0x173e <vfprintf+0x276>
    1736:	88 37       	cpi	r24, 0x78	; 120
    1738:	09 f0       	breq	.+2      	; 0x173c <vfprintf+0x274>
    173a:	a1 c0       	rjmp	.+322    	; 0x187e <vfprintf+0x3b6>
    173c:	01 c0       	rjmp	.+2      	; 0x1740 <vfprintf+0x278>
    173e:	10 61       	ori	r17, 0x10	; 16
    1740:	14 ff       	sbrs	r17, 4
    1742:	09 c0       	rjmp	.+18     	; 0x1756 <vfprintf+0x28e>
    1744:	14 60       	ori	r17, 0x04	; 4
    1746:	07 c0       	rjmp	.+14     	; 0x1756 <vfprintf+0x28e>
    1748:	14 ff       	sbrs	r17, 4
    174a:	08 c0       	rjmp	.+16     	; 0x175c <vfprintf+0x294>
    174c:	16 60       	ori	r17, 0x06	; 6
    174e:	06 c0       	rjmp	.+12     	; 0x175c <vfprintf+0x294>
    1750:	28 e0       	ldi	r18, 0x08	; 8
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	05 c0       	rjmp	.+10     	; 0x1760 <vfprintf+0x298>
    1756:	20 e1       	ldi	r18, 0x10	; 16
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <vfprintf+0x298>
    175c:	20 e1       	ldi	r18, 0x10	; 16
    175e:	32 e0       	ldi	r19, 0x02	; 2
    1760:	f5 01       	movw	r30, r10
    1762:	17 ff       	sbrs	r17, 7
    1764:	07 c0       	rjmp	.+14     	; 0x1774 <vfprintf+0x2ac>
    1766:	60 81       	ld	r22, Z
    1768:	71 81       	ldd	r23, Z+1	; 0x01
    176a:	82 81       	ldd	r24, Z+2	; 0x02
    176c:	93 81       	ldd	r25, Z+3	; 0x03
    176e:	44 e0       	ldi	r20, 0x04	; 4
    1770:	50 e0       	ldi	r21, 0x00	; 0
    1772:	06 c0       	rjmp	.+12     	; 0x1780 <vfprintf+0x2b8>
    1774:	60 81       	ld	r22, Z
    1776:	71 81       	ldd	r23, Z+1	; 0x01
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	42 e0       	ldi	r20, 0x02	; 2
    177e:	50 e0       	ldi	r21, 0x00	; 0
    1780:	a4 0e       	add	r10, r20
    1782:	b5 1e       	adc	r11, r21
    1784:	a2 01       	movw	r20, r4
    1786:	dc d0       	rcall	.+440    	; 0x1940 <__ultoa_invert>
    1788:	d8 2e       	mov	r13, r24
    178a:	d4 18       	sub	r13, r4
    178c:	01 2f       	mov	r16, r17
    178e:	0f 77       	andi	r16, 0x7F	; 127
    1790:	06 ff       	sbrs	r16, 6
    1792:	09 c0       	rjmp	.+18     	; 0x17a6 <vfprintf+0x2de>
    1794:	0e 7f       	andi	r16, 0xFE	; 254
    1796:	df 14       	cp	r13, r15
    1798:	30 f4       	brcc	.+12     	; 0x17a6 <vfprintf+0x2de>
    179a:	04 ff       	sbrs	r16, 4
    179c:	06 c0       	rjmp	.+12     	; 0x17aa <vfprintf+0x2e2>
    179e:	02 fd       	sbrc	r16, 2
    17a0:	04 c0       	rjmp	.+8      	; 0x17aa <vfprintf+0x2e2>
    17a2:	0f 7e       	andi	r16, 0xEF	; 239
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <vfprintf+0x2e2>
    17a6:	1d 2d       	mov	r17, r13
    17a8:	01 c0       	rjmp	.+2      	; 0x17ac <vfprintf+0x2e4>
    17aa:	1f 2d       	mov	r17, r15
    17ac:	80 2f       	mov	r24, r16
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	04 ff       	sbrs	r16, 4
    17b2:	0c c0       	rjmp	.+24     	; 0x17cc <vfprintf+0x304>
    17b4:	fe 01       	movw	r30, r28
    17b6:	ed 0d       	add	r30, r13
    17b8:	f1 1d       	adc	r31, r1
    17ba:	20 81       	ld	r18, Z
    17bc:	20 33       	cpi	r18, 0x30	; 48
    17be:	11 f4       	brne	.+4      	; 0x17c4 <vfprintf+0x2fc>
    17c0:	09 7e       	andi	r16, 0xE9	; 233
    17c2:	09 c0       	rjmp	.+18     	; 0x17d6 <vfprintf+0x30e>
    17c4:	02 ff       	sbrs	r16, 2
    17c6:	06 c0       	rjmp	.+12     	; 0x17d4 <vfprintf+0x30c>
    17c8:	1e 5f       	subi	r17, 0xFE	; 254
    17ca:	05 c0       	rjmp	.+10     	; 0x17d6 <vfprintf+0x30e>
    17cc:	86 78       	andi	r24, 0x86	; 134
    17ce:	90 70       	andi	r25, 0x00	; 0
    17d0:	00 97       	sbiw	r24, 0x00	; 0
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <vfprintf+0x30e>
    17d4:	1f 5f       	subi	r17, 0xFF	; 255
    17d6:	80 2e       	mov	r8, r16
    17d8:	99 24       	eor	r9, r9
    17da:	03 fd       	sbrc	r16, 3
    17dc:	11 c0       	rjmp	.+34     	; 0x1800 <vfprintf+0x338>
    17de:	00 ff       	sbrs	r16, 0
    17e0:	0c c0       	rjmp	.+24     	; 0x17fa <vfprintf+0x332>
    17e2:	fd 2c       	mov	r15, r13
    17e4:	1e 15       	cp	r17, r14
    17e6:	48 f4       	brcc	.+18     	; 0x17fa <vfprintf+0x332>
    17e8:	fe 0c       	add	r15, r14
    17ea:	f1 1a       	sub	r15, r17
    17ec:	1e 2d       	mov	r17, r14
    17ee:	05 c0       	rjmp	.+10     	; 0x17fa <vfprintf+0x332>
    17f0:	80 e2       	ldi	r24, 0x20	; 32
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	b3 01       	movw	r22, r6
    17f6:	78 d0       	rcall	.+240    	; 0x18e8 <fputc>
    17f8:	1f 5f       	subi	r17, 0xFF	; 255
    17fa:	1e 15       	cp	r17, r14
    17fc:	c8 f3       	brcs	.-14     	; 0x17f0 <vfprintf+0x328>
    17fe:	04 c0       	rjmp	.+8      	; 0x1808 <vfprintf+0x340>
    1800:	1e 15       	cp	r17, r14
    1802:	10 f4       	brcc	.+4      	; 0x1808 <vfprintf+0x340>
    1804:	e1 1a       	sub	r14, r17
    1806:	01 c0       	rjmp	.+2      	; 0x180a <vfprintf+0x342>
    1808:	ee 24       	eor	r14, r14
    180a:	84 fe       	sbrs	r8, 4
    180c:	0e c0       	rjmp	.+28     	; 0x182a <vfprintf+0x362>
    180e:	80 e3       	ldi	r24, 0x30	; 48
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	b3 01       	movw	r22, r6
    1814:	69 d0       	rcall	.+210    	; 0x18e8 <fputc>
    1816:	82 fe       	sbrs	r8, 2
    1818:	1d c0       	rjmp	.+58     	; 0x1854 <vfprintf+0x38c>
    181a:	81 fe       	sbrs	r8, 1
    181c:	03 c0       	rjmp	.+6      	; 0x1824 <vfprintf+0x35c>
    181e:	88 e5       	ldi	r24, 0x58	; 88
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	10 c0       	rjmp	.+32     	; 0x1844 <vfprintf+0x37c>
    1824:	88 e7       	ldi	r24, 0x78	; 120
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	0d c0       	rjmp	.+26     	; 0x1844 <vfprintf+0x37c>
    182a:	c4 01       	movw	r24, r8
    182c:	86 78       	andi	r24, 0x86	; 134
    182e:	90 70       	andi	r25, 0x00	; 0
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	81 f0       	breq	.+32     	; 0x1854 <vfprintf+0x38c>
    1834:	81 fc       	sbrc	r8, 1
    1836:	02 c0       	rjmp	.+4      	; 0x183c <vfprintf+0x374>
    1838:	80 e2       	ldi	r24, 0x20	; 32
    183a:	01 c0       	rjmp	.+2      	; 0x183e <vfprintf+0x376>
    183c:	8b e2       	ldi	r24, 0x2B	; 43
    183e:	07 fd       	sbrc	r16, 7
    1840:	8d e2       	ldi	r24, 0x2D	; 45
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	b3 01       	movw	r22, r6
    1846:	50 d0       	rcall	.+160    	; 0x18e8 <fputc>
    1848:	05 c0       	rjmp	.+10     	; 0x1854 <vfprintf+0x38c>
    184a:	80 e3       	ldi	r24, 0x30	; 48
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	b3 01       	movw	r22, r6
    1850:	4b d0       	rcall	.+150    	; 0x18e8 <fputc>
    1852:	fa 94       	dec	r15
    1854:	df 14       	cp	r13, r15
    1856:	c8 f3       	brcs	.-14     	; 0x184a <vfprintf+0x382>
    1858:	da 94       	dec	r13
    185a:	f2 01       	movw	r30, r4
    185c:	ed 0d       	add	r30, r13
    185e:	f1 1d       	adc	r31, r1
    1860:	80 81       	ld	r24, Z
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	b3 01       	movw	r22, r6
    1866:	40 d0       	rcall	.+128    	; 0x18e8 <fputc>
    1868:	dd 20       	and	r13, r13
    186a:	b1 f7       	brne	.-20     	; 0x1858 <vfprintf+0x390>
    186c:	05 c0       	rjmp	.+10     	; 0x1878 <vfprintf+0x3b0>
    186e:	80 e2       	ldi	r24, 0x20	; 32
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	b3 01       	movw	r22, r6
    1874:	39 d0       	rcall	.+114    	; 0x18e8 <fputc>
    1876:	ea 94       	dec	r14
    1878:	ee 20       	and	r14, r14
    187a:	c9 f7       	brne	.-14     	; 0x186e <vfprintf+0x3a6>
    187c:	4d ce       	rjmp	.-870    	; 0x1518 <vfprintf+0x50>
    187e:	f3 01       	movw	r30, r6
    1880:	86 81       	ldd	r24, Z+6	; 0x06
    1882:	97 81       	ldd	r25, Z+7	; 0x07
    1884:	02 c0       	rjmp	.+4      	; 0x188a <vfprintf+0x3c2>
    1886:	8f ef       	ldi	r24, 0xFF	; 255
    1888:	9f ef       	ldi	r25, 0xFF	; 255
    188a:	2d 96       	adiw	r28, 0x0d	; 13
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	ff 90       	pop	r15
    18a0:	ef 90       	pop	r14
    18a2:	df 90       	pop	r13
    18a4:	cf 90       	pop	r12
    18a6:	bf 90       	pop	r11
    18a8:	af 90       	pop	r10
    18aa:	9f 90       	pop	r9
    18ac:	8f 90       	pop	r8
    18ae:	7f 90       	pop	r7
    18b0:	6f 90       	pop	r6
    18b2:	5f 90       	pop	r5
    18b4:	4f 90       	pop	r4
    18b6:	3f 90       	pop	r3
    18b8:	2f 90       	pop	r2
    18ba:	08 95       	ret

000018bc <strnlen_P>:
    18bc:	fc 01       	movw	r30, r24
    18be:	05 90       	lpm	r0, Z+
    18c0:	61 50       	subi	r22, 0x01	; 1
    18c2:	70 40       	sbci	r23, 0x00	; 0
    18c4:	01 10       	cpse	r0, r1
    18c6:	d8 f7       	brcc	.-10     	; 0x18be <strnlen_P+0x2>
    18c8:	80 95       	com	r24
    18ca:	90 95       	com	r25
    18cc:	8e 0f       	add	r24, r30
    18ce:	9f 1f       	adc	r25, r31
    18d0:	08 95       	ret

000018d2 <strnlen>:
    18d2:	fc 01       	movw	r30, r24
    18d4:	61 50       	subi	r22, 0x01	; 1
    18d6:	70 40       	sbci	r23, 0x00	; 0
    18d8:	01 90       	ld	r0, Z+
    18da:	01 10       	cpse	r0, r1
    18dc:	d8 f7       	brcc	.-10     	; 0x18d4 <strnlen+0x2>
    18de:	80 95       	com	r24
    18e0:	90 95       	com	r25
    18e2:	8e 0f       	add	r24, r30
    18e4:	9f 1f       	adc	r25, r31
    18e6:	08 95       	ret

000018e8 <fputc>:
    18e8:	0f 93       	push	r16
    18ea:	1f 93       	push	r17
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	8c 01       	movw	r16, r24
    18f2:	eb 01       	movw	r28, r22
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	81 ff       	sbrs	r24, 1
    18f8:	1b c0       	rjmp	.+54     	; 0x1930 <fputc+0x48>
    18fa:	82 ff       	sbrs	r24, 2
    18fc:	0d c0       	rjmp	.+26     	; 0x1918 <fputc+0x30>
    18fe:	2e 81       	ldd	r18, Y+6	; 0x06
    1900:	3f 81       	ldd	r19, Y+7	; 0x07
    1902:	8c 81       	ldd	r24, Y+4	; 0x04
    1904:	9d 81       	ldd	r25, Y+5	; 0x05
    1906:	28 17       	cp	r18, r24
    1908:	39 07       	cpc	r19, r25
    190a:	64 f4       	brge	.+24     	; 0x1924 <fputc+0x3c>
    190c:	e8 81       	ld	r30, Y
    190e:	f9 81       	ldd	r31, Y+1	; 0x01
    1910:	01 93       	st	Z+, r16
    1912:	f9 83       	std	Y+1, r31	; 0x01
    1914:	e8 83       	st	Y, r30
    1916:	06 c0       	rjmp	.+12     	; 0x1924 <fputc+0x3c>
    1918:	e8 85       	ldd	r30, Y+8	; 0x08
    191a:	f9 85       	ldd	r31, Y+9	; 0x09
    191c:	80 2f       	mov	r24, r16
    191e:	09 95       	icall
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	31 f4       	brne	.+12     	; 0x1930 <fputc+0x48>
    1924:	8e 81       	ldd	r24, Y+6	; 0x06
    1926:	9f 81       	ldd	r25, Y+7	; 0x07
    1928:	01 96       	adiw	r24, 0x01	; 1
    192a:	9f 83       	std	Y+7, r25	; 0x07
    192c:	8e 83       	std	Y+6, r24	; 0x06
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <fputc+0x4c>
    1930:	0f ef       	ldi	r16, 0xFF	; 255
    1932:	1f ef       	ldi	r17, 0xFF	; 255
    1934:	c8 01       	movw	r24, r16
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	1f 91       	pop	r17
    193c:	0f 91       	pop	r16
    193e:	08 95       	ret

00001940 <__ultoa_invert>:
    1940:	fa 01       	movw	r30, r20
    1942:	aa 27       	eor	r26, r26
    1944:	28 30       	cpi	r18, 0x08	; 8
    1946:	51 f1       	breq	.+84     	; 0x199c <__ultoa_invert+0x5c>
    1948:	20 31       	cpi	r18, 0x10	; 16
    194a:	81 f1       	breq	.+96     	; 0x19ac <__ultoa_invert+0x6c>
    194c:	e8 94       	clt
    194e:	6f 93       	push	r22
    1950:	6e 7f       	andi	r22, 0xFE	; 254
    1952:	6e 5f       	subi	r22, 0xFE	; 254
    1954:	7f 4f       	sbci	r23, 0xFF	; 255
    1956:	8f 4f       	sbci	r24, 0xFF	; 255
    1958:	9f 4f       	sbci	r25, 0xFF	; 255
    195a:	af 4f       	sbci	r26, 0xFF	; 255
    195c:	b1 e0       	ldi	r27, 0x01	; 1
    195e:	3e d0       	rcall	.+124    	; 0x19dc <__ultoa_invert+0x9c>
    1960:	b4 e0       	ldi	r27, 0x04	; 4
    1962:	3c d0       	rcall	.+120    	; 0x19dc <__ultoa_invert+0x9c>
    1964:	67 0f       	add	r22, r23
    1966:	78 1f       	adc	r23, r24
    1968:	89 1f       	adc	r24, r25
    196a:	9a 1f       	adc	r25, r26
    196c:	a1 1d       	adc	r26, r1
    196e:	68 0f       	add	r22, r24
    1970:	79 1f       	adc	r23, r25
    1972:	8a 1f       	adc	r24, r26
    1974:	91 1d       	adc	r25, r1
    1976:	a1 1d       	adc	r26, r1
    1978:	6a 0f       	add	r22, r26
    197a:	71 1d       	adc	r23, r1
    197c:	81 1d       	adc	r24, r1
    197e:	91 1d       	adc	r25, r1
    1980:	a1 1d       	adc	r26, r1
    1982:	20 d0       	rcall	.+64     	; 0x19c4 <__ultoa_invert+0x84>
    1984:	09 f4       	brne	.+2      	; 0x1988 <__ultoa_invert+0x48>
    1986:	68 94       	set
    1988:	3f 91       	pop	r19
    198a:	2a e0       	ldi	r18, 0x0A	; 10
    198c:	26 9f       	mul	r18, r22
    198e:	11 24       	eor	r1, r1
    1990:	30 19       	sub	r19, r0
    1992:	30 5d       	subi	r19, 0xD0	; 208
    1994:	31 93       	st	Z+, r19
    1996:	de f6       	brtc	.-74     	; 0x194e <__ultoa_invert+0xe>
    1998:	cf 01       	movw	r24, r30
    199a:	08 95       	ret
    199c:	46 2f       	mov	r20, r22
    199e:	47 70       	andi	r20, 0x07	; 7
    19a0:	40 5d       	subi	r20, 0xD0	; 208
    19a2:	41 93       	st	Z+, r20
    19a4:	b3 e0       	ldi	r27, 0x03	; 3
    19a6:	0f d0       	rcall	.+30     	; 0x19c6 <__ultoa_invert+0x86>
    19a8:	c9 f7       	brne	.-14     	; 0x199c <__ultoa_invert+0x5c>
    19aa:	f6 cf       	rjmp	.-20     	; 0x1998 <__ultoa_invert+0x58>
    19ac:	46 2f       	mov	r20, r22
    19ae:	4f 70       	andi	r20, 0x0F	; 15
    19b0:	40 5d       	subi	r20, 0xD0	; 208
    19b2:	4a 33       	cpi	r20, 0x3A	; 58
    19b4:	18 f0       	brcs	.+6      	; 0x19bc <__ultoa_invert+0x7c>
    19b6:	49 5d       	subi	r20, 0xD9	; 217
    19b8:	31 fd       	sbrc	r19, 1
    19ba:	40 52       	subi	r20, 0x20	; 32
    19bc:	41 93       	st	Z+, r20
    19be:	02 d0       	rcall	.+4      	; 0x19c4 <__ultoa_invert+0x84>
    19c0:	a9 f7       	brne	.-22     	; 0x19ac <__ultoa_invert+0x6c>
    19c2:	ea cf       	rjmp	.-44     	; 0x1998 <__ultoa_invert+0x58>
    19c4:	b4 e0       	ldi	r27, 0x04	; 4
    19c6:	a6 95       	lsr	r26
    19c8:	97 95       	ror	r25
    19ca:	87 95       	ror	r24
    19cc:	77 95       	ror	r23
    19ce:	67 95       	ror	r22
    19d0:	ba 95       	dec	r27
    19d2:	c9 f7       	brne	.-14     	; 0x19c6 <__ultoa_invert+0x86>
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	61 05       	cpc	r22, r1
    19d8:	71 05       	cpc	r23, r1
    19da:	08 95       	ret
    19dc:	9b 01       	movw	r18, r22
    19de:	ac 01       	movw	r20, r24
    19e0:	0a 2e       	mov	r0, r26
    19e2:	06 94       	lsr	r0
    19e4:	57 95       	ror	r21
    19e6:	47 95       	ror	r20
    19e8:	37 95       	ror	r19
    19ea:	27 95       	ror	r18
    19ec:	ba 95       	dec	r27
    19ee:	c9 f7       	brne	.-14     	; 0x19e2 <__ultoa_invert+0xa2>
    19f0:	62 0f       	add	r22, r18
    19f2:	73 1f       	adc	r23, r19
    19f4:	84 1f       	adc	r24, r20
    19f6:	95 1f       	adc	r25, r21
    19f8:	a0 1d       	adc	r26, r0
    19fa:	08 95       	ret

000019fc <_exit>:
    19fc:	f8 94       	cli

000019fe <__stop_program>:
    19fe:	ff cf       	rjmp	.-2      	; 0x19fe <__stop_program>
