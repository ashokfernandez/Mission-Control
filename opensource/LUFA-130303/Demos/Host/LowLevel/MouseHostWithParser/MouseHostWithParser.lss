
MouseHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000023d6  0000246a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fd  0080011a  0080011a  00002484  2**0
                  ALLOC
  3 .stab         00000e28  00000000  00000000  00002484  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000256  00000000  00000000  000032ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000460  00000000  00000000  00003508  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006290  00000000  00000000  00003968  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e2d  00000000  00000000  00009bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002fc8  00000000  00000000  0000ba25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000be0  00000000  00000000  0000e9f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000280f  00000000  00000000  0000f5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000041c8  00000000  00000000  00011ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a0  00000000  00000000  00015fa7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	63 c1       	rjmp	.+710    	; 0x2c8 <__ctors_end>
       2:	00 00       	nop
       4:	80 c1       	rjmp	.+768    	; 0x306 <__bad_interrupt>
       6:	00 00       	nop
       8:	7e c1       	rjmp	.+764    	; 0x306 <__bad_interrupt>
       a:	00 00       	nop
       c:	7c c1       	rjmp	.+760    	; 0x306 <__bad_interrupt>
       e:	00 00       	nop
      10:	7a c1       	rjmp	.+756    	; 0x306 <__bad_interrupt>
      12:	00 00       	nop
      14:	78 c1       	rjmp	.+752    	; 0x306 <__bad_interrupt>
      16:	00 00       	nop
      18:	76 c1       	rjmp	.+748    	; 0x306 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	74 c1       	rjmp	.+744    	; 0x306 <__bad_interrupt>
      1e:	00 00       	nop
      20:	72 c1       	rjmp	.+740    	; 0x306 <__bad_interrupt>
      22:	00 00       	nop
      24:	70 c1       	rjmp	.+736    	; 0x306 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 39 0c 	jmp	0x1872	; 0x1872 <__vector_10>
      2c:	6c c1       	rjmp	.+728    	; 0x306 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6a c1       	rjmp	.+724    	; 0x306 <__bad_interrupt>
      32:	00 00       	nop
      34:	68 c1       	rjmp	.+720    	; 0x306 <__bad_interrupt>
      36:	00 00       	nop
      38:	66 c1       	rjmp	.+716    	; 0x306 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	64 c1       	rjmp	.+712    	; 0x306 <__bad_interrupt>
      3e:	00 00       	nop
      40:	62 c1       	rjmp	.+708    	; 0x306 <__bad_interrupt>
      42:	00 00       	nop
      44:	60 c1       	rjmp	.+704    	; 0x306 <__bad_interrupt>
      46:	00 00       	nop
      48:	5e c1       	rjmp	.+700    	; 0x306 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5c c1       	rjmp	.+696    	; 0x306 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5a c1       	rjmp	.+692    	; 0x306 <__bad_interrupt>
      52:	00 00       	nop
      54:	58 c1       	rjmp	.+688    	; 0x306 <__bad_interrupt>
      56:	00 00       	nop
      58:	56 c1       	rjmp	.+684    	; 0x306 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	54 c1       	rjmp	.+680    	; 0x306 <__bad_interrupt>
      5e:	00 00       	nop
      60:	52 c1       	rjmp	.+676    	; 0x306 <__bad_interrupt>
      62:	00 00       	nop
      64:	50 c1       	rjmp	.+672    	; 0x306 <__bad_interrupt>
      66:	00 00       	nop
      68:	4e c1       	rjmp	.+668    	; 0x306 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4c c1       	rjmp	.+664    	; 0x306 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4a c1       	rjmp	.+660    	; 0x306 <__bad_interrupt>
      72:	00 00       	nop
      74:	48 c1       	rjmp	.+656    	; 0x306 <__bad_interrupt>
      76:	00 00       	nop
      78:	46 c1       	rjmp	.+652    	; 0x306 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	44 c1       	rjmp	.+648    	; 0x306 <__bad_interrupt>
      7e:	00 00       	nop
      80:	42 c1       	rjmp	.+644    	; 0x306 <__bad_interrupt>
      82:	00 00       	nop
      84:	40 c1       	rjmp	.+640    	; 0x306 <__bad_interrupt>
      86:	00 00       	nop
      88:	3e c1       	rjmp	.+636    	; 0x306 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3c c1       	rjmp	.+632    	; 0x306 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3a c1       	rjmp	.+628    	; 0x306 <__bad_interrupt>
      92:	00 00       	nop
      94:	38 c1       	rjmp	.+624    	; 0x306 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4287>:
      98:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 49 44 20 50     .[36mMouse HID P
      a8:	61 72 73 65 72 20 48 6f 73 74 20 44 65 6d 6f 20     arser Host Demo 
      b8:	72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00     running....[37m.

000000c8 <__c.4296>:
      c8:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
      d8:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

000000e5 <__c.4301>:
      e5:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
      f5:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

00000104 <__c.4306>:
     104:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     114:	61 74 61 2e 0d 0a 00                                ata....

0000011b <__c.4309>:
     11b:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     12b:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     13b:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000145 <__c.4311>:
     145:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     155:	69 63 65 2e 0d 0a 00                                ice....

0000015c <__c.4313>:
     15c:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     16c:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

00000176 <__c.4315>:
     176:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     186:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     196:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1a6:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1b6:	37 6d 00                                            7m.

000001b9 <__c.4317>:
     1b9:	50 72 6f 63 65 73 73 69 6e 67 20 48 49 44 20 52     Processing HID R
     1c9:	65 70 6f 72 74 20 28 53 69 7a 65 20 25 64 20 42     eport (Size %d B
     1d9:	79 74 65 73 29 2e 0d 0a 00                          ytes)....

000001e2 <__c.4319>:
     1e2:	1b 5b 33 31 6d 52 65 70 6f 72 74 20 50 61 72 73     .[31mReport Pars
     1f2:	65 20 45 72 72 6f 72 2e 0d 0a 00                    e Error....

000001fd <__c.4321>:
     1fd:	4e 6f 74 20 61 20 76 61 6c 69 64 20 4d 6f 75 73     Not a valid Mous
     20d:	65 2e 1b 5b 33 37 6d 00                             e..[37m.

00000215 <__c.4323>:
     215:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     225:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000022f <__c.4325>:
     22f:	4d 6f 75 73 65 20 45 6e 75 6d 65 72 61 74 65 64     Mouse Enumerated
     23f:	2e 0d 0a 00                                         ....

00000243 <__c.4330>:
     243:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     253:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     263:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000272 <__c.4337>:
     272:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     282:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     292:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     2a2:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     2b2:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     2c2:	1b 5b 33 37 6d 00                                   .[37m.

000002c8 <__ctors_end>:
     2c8:	11 24       	eor	r1, r1
     2ca:	1f be       	out	0x3f, r1	; 63
     2cc:	cf ef       	ldi	r28, 0xFF	; 255
     2ce:	d0 e2       	ldi	r29, 0x20	; 32
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	cd bf       	out	0x3d, r28	; 61

000002d4 <__do_copy_data>:
     2d4:	11 e0       	ldi	r17, 0x01	; 1
     2d6:	a0 e0       	ldi	r26, 0x00	; 0
     2d8:	b1 e0       	ldi	r27, 0x01	; 1
     2da:	e6 ed       	ldi	r30, 0xD6	; 214
     2dc:	f3 e2       	ldi	r31, 0x23	; 35
     2de:	00 e0       	ldi	r16, 0x00	; 0
     2e0:	0b bf       	out	0x3b, r16	; 59
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <__do_copy_data+0x14>
     2e4:	07 90       	elpm	r0, Z+
     2e6:	0d 92       	st	X+, r0
     2e8:	aa 31       	cpi	r26, 0x1A	; 26
     2ea:	b1 07       	cpc	r27, r17
     2ec:	d9 f7       	brne	.-10     	; 0x2e4 <__do_copy_data+0x10>
     2ee:	1b be       	out	0x3b, r1	; 59

000002f0 <__do_clear_bss>:
     2f0:	15 e0       	ldi	r17, 0x05	; 5
     2f2:	aa e1       	ldi	r26, 0x1A	; 26
     2f4:	b1 e0       	ldi	r27, 0x01	; 1
     2f6:	01 c0       	rjmp	.+2      	; 0x2fa <.do_clear_bss_start>

000002f8 <.do_clear_bss_loop>:
     2f8:	1d 92       	st	X+, r1

000002fa <.do_clear_bss_start>:
     2fa:	a7 31       	cpi	r26, 0x17	; 23
     2fc:	b1 07       	cpc	r27, r17
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <.do_clear_bss_loop>
     300:	10 d2       	rcall	.+1056   	; 0x722 <main>
     302:	0c 94 e9 11 	jmp	0x23d2	; 0x23d2 <_exit>

00000306 <__bad_interrupt>:
     306:	7c ce       	rjmp	.-776    	; 0x0 <__vectors>

00000308 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     308:	9b b1       	in	r25, 0x0b	; 11
     30a:	9f 70       	andi	r25, 0x0F	; 15
     30c:	98 2b       	or	r25, r24
     30e:	9b b9       	out	0x0b, r25	; 11
			}
     310:	08 95       	ret

00000312 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     312:	84 b7       	in	r24, 0x34	; 52
     314:	87 7f       	andi	r24, 0xF7	; 247
     316:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     318:	28 e1       	ldi	r18, 0x18	; 24
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	f8 94       	cli
     31e:	20 93 60 00 	sts	0x0060, r18
     322:	10 92 60 00 	sts	0x0060, r1
     326:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	80 e8       	ldi	r24, 0x80	; 128
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	80 93 61 00 	sts	0x0061, r24
     334:	90 93 61 00 	sts	0x0061, r25
     338:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     33a:	83 e3       	ldi	r24, 0x33	; 51
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	90 93 cd 00 	sts	0x00CD, r25
     342:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     346:	86 e0       	ldi	r24, 0x06	; 6
     348:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     34c:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     350:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     354:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     356:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     358:	8a b1       	in	r24, 0x0a	; 10
     35a:	80 6f       	ori	r24, 0xF0	; 240
     35c:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     35e:	8b b1       	in	r24, 0x0b	; 11
     360:	8f 70       	andi	r24, 0x0F	; 15
     362:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     364:	0e 94 1e 0c 	call	0x183c	; 0x183c <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <Serial_CreateStream>

00000370 <EVENT_USB_Host_DeviceAttached>:
}
     370:	88 ec       	ldi	r24, 0xC8	; 200
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     378:	80 ea       	ldi	r24, 0xA0	; 160
     37a:	c6 cf       	rjmp	.-116    	; 0x308 <LEDs_SetAllLEDs>

0000037c <EVENT_USB_Host_DeviceUnattached>:
     37c:	85 ee       	ldi	r24, 0xE5	; 229
}
     37e:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     380:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     384:	80 e1       	ldi	r24, 0x10	; 16
     386:	c0 cf       	rjmp	.-128    	; 0x308 <LEDs_SetAllLEDs>

00000388 <EVENT_USB_Host_DeviceEnumerationComplete>:
     388:	cf 93       	push	r28
}
     38a:	84 e0       	ldi	r24, 0x04	; 4
/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	puts_P(PSTR("Getting Config Data.\r\n"));
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     392:	f2 d1       	rcall	.+996    	; 0x778 <ProcessConfigurationDescriptor>
     394:	c8 2f       	mov	r28, r24
     396:	88 23       	and	r24, r24
     398:	01 f1       	breq	.+64     	; 0x3da <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
     39a:	81 30       	cpi	r24, 0x01	; 1
	{
		if (ErrorCode == ControlError)
     39c:	19 f4       	brne	.+6      	; 0x3a4 <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
     39e:	8b e1       	ldi	r24, 0x1B	; 27
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
     3a4:	85 e4       	ldi	r24, 0x45	; 69
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     3a6:	91 e0       	ldi	r25, 0x01	; 1
     3a8:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <puts_P>
     3ac:	00 d0       	rcall	.+0      	; 0x3ae <EVENT_USB_Host_DeviceEnumerationComplete+0x26>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     3ae:	00 d0       	rcall	.+0      	; 0x3b0 <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
     3b0:	ed b7       	in	r30, 0x3d	; 61
     3b2:	fe b7       	in	r31, 0x3e	; 62
     3b4:	31 96       	adiw	r30, 0x01	; 1
     3b6:	2c e5       	ldi	r18, 0x5C	; 92
     3b8:	31 e0       	ldi	r19, 0x01	; 1
     3ba:	ad b7       	in	r26, 0x3d	; 61
     3bc:	be b7       	in	r27, 0x3e	; 62
     3be:	12 96       	adiw	r26, 0x02	; 2
     3c0:	3c 93       	st	X, r19
     3c2:	2e 93       	st	-X, r18
     3c4:	11 97       	sbiw	r26, 0x01	; 1
     3c6:	c2 83       	std	Z+2, r28	; 0x02
     3c8:	13 82       	std	Z+3, r1	; 0x03
     3ca:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <printf_P>
     3ce:	0f 90       	pop	r0

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	80 e9       	ldi	r24, 0x90	; 144
     3d8:	59 c0       	rjmp	.+178    	; 0x48c <EVENT_USB_Host_DeviceEnumerationComplete+0x104>
     3da:	81 e0       	ldi	r24, 0x01	; 1
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     3dc:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <USB_Host_SetDeviceConfiguration>
     3e0:	88 23       	and	r24, r24
     3e2:	79 f0       	breq	.+30     	; 0x402 <EVENT_USB_Host_DeviceEnumerationComplete+0x7a>
     3e4:	00 d0       	rcall	.+0      	; 0x3e6 <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     3e6:	00 d0       	rcall	.+0      	; 0x3e8 <EVENT_USB_Host_DeviceEnumerationComplete+0x60>
     3e8:	ed b7       	in	r30, 0x3d	; 61
     3ea:	fe b7       	in	r31, 0x3e	; 62
     3ec:	31 96       	adiw	r30, 0x01	; 1
     3ee:	26 e7       	ldi	r18, 0x76	; 118
     3f0:	31 e0       	ldi	r19, 0x01	; 1
     3f2:	ad b7       	in	r26, 0x3d	; 61
     3f4:	be b7       	in	r27, 0x3e	; 62
     3f6:	12 96       	adiw	r26, 0x02	; 2
     3f8:	3c 93       	st	X, r19
     3fa:	2e 93       	st	-X, r18
     3fc:	11 97       	sbiw	r26, 0x01	; 1
     3fe:	82 83       	std	Z+2, r24	; 0x02
     400:	e3 cf       	rjmp	.-58     	; 0x3c8 <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
     402:	00 d0       	rcall	.+0      	; 0x404 <EVENT_USB_Host_DeviceEnumerationComplete+0x7c>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	printf_P(PSTR("Processing HID Report (Size %d Bytes).\r\n"), HIDReportSize);
     404:	00 d0       	rcall	.+0      	; 0x406 <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
     406:	89 eb       	ldi	r24, 0xB9	; 185
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	ed b7       	in	r30, 0x3d	; 61
     40c:	fe b7       	in	r31, 0x3e	; 62
     40e:	92 83       	std	Z+2, r25	; 0x02
     410:	81 83       	std	Z+1, r24	; 0x01
     412:	80 91 f6 04 	lds	r24, 0x04F6
     416:	90 91 f7 04 	lds	r25, 0x04F7
     41a:	94 83       	std	Z+4, r25	; 0x04
     41c:	83 83       	std	Z+3, r24	; 0x03
     41e:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <printf_P>
     422:	0f 90       	pop	r0

	/* Get and process the device's first HID report descriptor */
	if ((ErrorCode = GetHIDReportData()) != ParseSuccessful)
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	36 d2       	rcall	.+1132   	; 0x898 <GetHIDReportData>
     42c:	c8 2f       	mov	r28, r24
     42e:	88 23       	and	r24, r24
     430:	41 f1       	breq	.+80     	; 0x482 <EVENT_USB_Host_DeviceEnumerationComplete+0xfa>
     432:	82 ee       	ldi	r24, 0xE2	; 226
     434:	91 e0       	ldi	r25, 0x01	; 1
	{
		puts_P(PSTR(ESC_FG_RED "Report Parse Error.\r\n"));
     436:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <puts_P>
     43a:	80 91 1d 01 	lds	r24, 0x011D

		if (!(HIDReportInfo.TotalReportItems))
     43e:	88 23       	and	r24, r24
     440:	29 f4       	brne	.+10     	; 0x44c <EVENT_USB_Host_DeviceEnumerationComplete+0xc4>
     442:	8d ef       	ldi	r24, 0xFD	; 253
     444:	91 e0       	ldi	r25, 0x01	; 1
			puts_P(PSTR("Not a valid Mouse." ESC_FG_WHITE));
     446:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <puts_P>
     44a:	15 c0       	rjmp	.+42     	; 0x476 <EVENT_USB_Host_DeviceEnumerationComplete+0xee>
     44c:	00 d0       	rcall	.+0      	; 0x44e <EVENT_USB_Host_DeviceEnumerationComplete+0xc6>
     44e:	00 d0       	rcall	.+0      	; 0x450 <EVENT_USB_Host_DeviceEnumerationComplete+0xc8>
		else
			printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     450:	ed b7       	in	r30, 0x3d	; 61
     452:	fe b7       	in	r31, 0x3e	; 62
     454:	31 96       	adiw	r30, 0x01	; 1
     456:	25 e1       	ldi	r18, 0x15	; 21
     458:	32 e0       	ldi	r19, 0x02	; 2
     45a:	ad b7       	in	r26, 0x3d	; 61
     45c:	be b7       	in	r27, 0x3e	; 62
     45e:	12 96       	adiw	r26, 0x02	; 2
     460:	3c 93       	st	X, r19
     462:	2e 93       	st	-X, r18
     464:	11 97       	sbiw	r26, 0x01	; 1
     466:	c2 83       	std	Z+2, r28	; 0x02
     468:	13 82       	std	Z+3, r1	; 0x03
     46a:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <printf_P>
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	80 e9       	ldi	r24, 0x90	; 144
     478:	47 df       	rcall	.-370    	; 0x308 <LEDs_SetAllLEDs>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <USB_Host_SetDeviceConfiguration>
		USB_Host_SetDeviceConfiguration(0);
     480:	06 c0       	rjmp	.+12     	; 0x48e <EVENT_USB_Host_DeviceEnumerationComplete+0x106>
     482:	8f e2       	ldi	r24, 0x2F	; 47
     484:	92 e0       	ldi	r25, 0x02	; 2
		return;
     486:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <puts_P>
	}

	puts_P(PSTR("Mouse Enumerated.\r\n"));
     48a:	80 e6       	ldi	r24, 0x60	; 96
     48c:	3d df       	rcall	.-390    	; 0x308 <LEDs_SetAllLEDs>
     48e:	cf 91       	pop	r28
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     490:	08 95       	ret

00000492 <EVENT_USB_Host_HostError>:
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
}
     496:	0f 92       	push	r0
     498:	cd b7       	in	r28, 0x3d	; 61

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     49a:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     49c:	89 83       	std	Y+1, r24	; 0x01
     49e:	0e 94 b6 0b 	call	0x176c	; 0x176c <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     4a2:	00 d0       	rcall	.+0      	; 0x4a4 <EVENT_USB_Host_HostError+0x12>
     4a4:	00 d0       	rcall	.+0      	; 0x4a6 <EVENT_USB_Host_HostError+0x14>
     4a6:	ed b7       	in	r30, 0x3d	; 61
     4a8:	fe b7       	in	r31, 0x3e	; 62
     4aa:	31 96       	adiw	r30, 0x01	; 1
     4ac:	23 e4       	ldi	r18, 0x43	; 67
     4ae:	32 e0       	ldi	r19, 0x02	; 2
     4b0:	ad b7       	in	r26, 0x3d	; 61
     4b2:	be b7       	in	r27, 0x3e	; 62
     4b4:	12 96       	adiw	r26, 0x02	; 2
     4b6:	3c 93       	st	X, r19
     4b8:	2e 93       	st	-X, r18
     4ba:	11 97       	sbiw	r26, 0x01	; 1
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	82 83       	std	Z+2, r24	; 0x02
     4c0:	13 82       	std	Z+3, r1	; 0x03
     4c2:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	80 e9       	ldi	r24, 0x90	; 144
     4d0:	1b df       	rcall	.-458    	; 0x308 <LEDs_SetAllLEDs>
     4d2:	ff cf       	rjmp	.-2      	; 0x4d2 <EVENT_USB_Host_HostError+0x40>

000004d4 <EVENT_USB_Host_DeviceEnumerationFailed>:
     4d4:	90 91 02 05 	lds	r25, 0x0502
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4d8:	2d b7       	in	r18, 0x3d	; 61
     4da:	3e b7       	in	r19, 0x3e	; 62
     4dc:	28 50       	subi	r18, 0x08	; 8
     4de:	30 40       	sbci	r19, 0x00	; 0
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	f8 94       	cli
     4e4:	3e bf       	out	0x3e, r19	; 62
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	2d bf       	out	0x3d, r18	; 61
     4ea:	ed b7       	in	r30, 0x3d	; 61
     4ec:	fe b7       	in	r31, 0x3e	; 62
     4ee:	31 96       	adiw	r30, 0x01	; 1
     4f0:	22 e7       	ldi	r18, 0x72	; 114
     4f2:	32 e0       	ldi	r19, 0x02	; 2
     4f4:	ad b7       	in	r26, 0x3d	; 61
     4f6:	be b7       	in	r27, 0x3e	; 62
     4f8:	12 96       	adiw	r26, 0x02	; 2
     4fa:	3c 93       	st	X, r19
     4fc:	2e 93       	st	-X, r18
     4fe:	11 97       	sbiw	r26, 0x01	; 1
     500:	82 83       	std	Z+2, r24	; 0x02
     502:	13 82       	std	Z+3, r1	; 0x03
     504:	64 83       	std	Z+4, r22	; 0x04
     506:	15 82       	std	Z+5, r1	; 0x05
     508:	96 83       	std	Z+6, r25	; 0x06
     50a:	17 82       	std	Z+7, r1	; 0x07
     50c:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     510:	2d b7       	in	r18, 0x3d	; 61
     512:	3e b7       	in	r19, 0x3e	; 62
     514:	28 5f       	subi	r18, 0xF8	; 248
     516:	3f 4f       	sbci	r19, 0xFF	; 255
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	f8 94       	cli
     51c:	3e bf       	out	0x3e, r19	; 62
     51e:	0f be       	out	0x3f, r0	; 63
     520:	2d bf       	out	0x3d, r18	; 61
     522:	80 e9       	ldi	r24, 0x90	; 144
     524:	f1 ce       	rjmp	.-542    	; 0x308 <LEDs_SetAllLEDs>

00000526 <ProcessMouseReport>:
     526:	af 92       	push	r10
}
     528:	bf 92       	push	r11
 *  as required and displays movement and button presses on the board LEDs.
 *
 *  \param[in] MouseReport  Pointer to a HID report from an attached mouse device
 */
void ProcessMouseReport(uint8_t* MouseReport)
{
     52a:	cf 92       	push	r12
     52c:	df 92       	push	r13
     52e:	ef 92       	push	r14
     530:	ff 92       	push	r15
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	7c 01       	movw	r14, r24
	uint8_t LEDMask = LEDS_NO_LEDS;

	/* Check each HID report item in turn, looking for mouse X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     53c:	00 e0       	ldi	r16, 0x00	; 0
 *
 *  \param[in] MouseReport  Pointer to a HID report from an attached mouse device
 */
void ProcessMouseReport(uint8_t* MouseReport)
{
	uint8_t LEDMask = LEDS_NO_LEDS;
     53e:	10 e0       	ldi	r17, 0x00	; 0

	/* Check each HID report item in turn, looking for mouse X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     540:	2a e2       	ldi	r18, 0x2A	; 42
     542:	a2 2e       	mov	r10, r18
     544:	b1 2c       	mov	r11, r1

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
			  continue;

			int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     546:	30 e1       	ldi	r19, 0x10	; 16
     548:	c3 2e       	mov	r12, r19
     54a:	d1 2c       	mov	r13, r1
void ProcessMouseReport(uint8_t* MouseReport)
{
	uint8_t LEDMask = LEDS_NO_LEDS;

	/* Check each HID report item in turn, looking for mouse X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     54c:	82 c0       	rjmp	.+260    	; 0x652 <ProcessMouseReport+0x12c>
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     54e:	80 2f       	mov	r24, r16
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	8a 9d       	mul	r24, r10
     554:	e0 01       	movw	r28, r0
     556:	8b 9d       	mul	r24, r11
     558:	d0 0d       	add	r29, r0
     55a:	9a 9d       	mul	r25, r10
     55c:	d0 0d       	add	r29, r0
     55e:	11 24       	eor	r1, r1
     560:	c2 5e       	subi	r28, 0xE2	; 226
     562:	de 4f       	sbci	r29, 0xFE	; 254

		bool FoundData;

		if ((ReportItem->Attributes.Usage.Page        == USAGE_PAGE_BUTTON) &&
     564:	89 85       	ldd	r24, Y+9	; 0x09
     566:	9a 85       	ldd	r25, Y+10	; 0x0a
     568:	89 30       	cpi	r24, 0x09	; 9
     56a:	91 05       	cpc	r25, r1
     56c:	a1 f4       	brne	.+40     	; 0x596 <ProcessMouseReport+0x70>
     56e:	8a 81       	ldd	r24, Y+2	; 0x02
     570:	88 23       	and	r24, r24
     572:	09 f0       	breq	.+2      	; 0x576 <ProcessMouseReport+0x50>
     574:	6d c0       	rjmp	.+218    	; 0x650 <ProcessMouseReport+0x12a>
			(ReportItem->ItemType                     == HID_REPORT_ITEM_In))
		{
			/* Get the mouse button value */
			FoundData = USB_GetHIDReportItemInfo(MouseReport, ReportItem);
     576:	c7 01       	movw	r24, r14
     578:	be 01       	movw	r22, r28
     57a:	c2 d5       	rcall	.+2948   	; 0x1100 <USB_GetHIDReportItemInfo>
     57c:	88 23       	and	r24, r24

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
     57e:	09 f4       	brne	.+2      	; 0x582 <ProcessMouseReport+0x5c>
     580:	67 c0       	rjmp	.+206    	; 0x650 <ProcessMouseReport+0x12a>
     582:	8a a1       	lds	r24, 0x4a
			  continue;

			/* If button is pressed, all LEDs are turned on */
			if (ReportItem->Value)
     584:	9b a1       	lds	r25, 0x4b
     586:	ac a1       	lds	r26, 0x4c
     588:	bd a1       	lds	r27, 0x4d
     58a:	00 97       	sbiw	r24, 0x00	; 0
     58c:	a1 05       	cpc	r26, r1
     58e:	b1 05       	cpc	r27, r1
     590:	09 f0       	breq	.+2      	; 0x594 <ProcessMouseReport+0x6e>
     592:	5b c0       	rjmp	.+182    	; 0x64a <ProcessMouseReport+0x124>
     594:	5d c0       	rjmp	.+186    	; 0x650 <ProcessMouseReport+0x12a>
     596:	81 30       	cpi	r24, 0x01	; 1
			  LEDMask = LEDS_ALL_LEDS;
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     598:	91 05       	cpc	r25, r1
     59a:	09 f0       	breq	.+2      	; 0x59e <ProcessMouseReport+0x78>
     59c:	59 c0       	rjmp	.+178    	; 0x650 <ProcessMouseReport+0x12a>
     59e:	8b 85       	ldd	r24, Y+11	; 0x0b
				 (ReportItem->Attributes.Usage.Usage  == USAGE_SCROLL_WHEEL)       &&
     5a0:	9c 85       	ldd	r25, Y+12	; 0x0c
     5a2:	88 33       	cpi	r24, 0x38	; 56

			/* If button is pressed, all LEDs are turned on */
			if (ReportItem->Value)
			  LEDMask = LEDS_ALL_LEDS;
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     5a4:	91 05       	cpc	r25, r1
     5a6:	f9 f4       	brne	.+62     	; 0x5e6 <ProcessMouseReport+0xc0>
     5a8:	2a 81       	ldd	r18, Y+2	; 0x02
				 (ReportItem->Attributes.Usage.Usage  == USAGE_SCROLL_WHEEL)       &&
     5aa:	22 23       	and	r18, r18
     5ac:	e1 f4       	brne	.+56     	; 0x5e6 <ProcessMouseReport+0xc0>
     5ae:	c7 01       	movw	r24, r14
				 (ReportItem->ItemType                == HID_REPORT_ITEM_In))
		{
			/* Get the mouse wheel value if it is contained within the current
			 * report, if not, skip to the next item in the parser list
			 */
			if (!(USB_GetHIDReportItemInfo(MouseReport, ReportItem)))
     5b0:	be 01       	movw	r22, r28
     5b2:	a6 d5       	rcall	.+2892   	; 0x1100 <USB_GetHIDReportItemInfo>
     5b4:	88 23       	and	r24, r24
     5b6:	09 f4       	brne	.+2      	; 0x5ba <ProcessMouseReport+0x94>
     5b8:	4b c0       	rjmp	.+150    	; 0x650 <ProcessMouseReport+0x12a>
     5ba:	88 85       	ldd	r24, Y+8	; 0x08
     5bc:	96 01       	movw	r18, r12
			  continue;

			int16_t WheelDelta = HID_ALIGN_DATA(ReportItem, int16_t);
     5be:	28 1b       	sub	r18, r24
     5c0:	31 09       	sbc	r19, r1
     5c2:	8a a1       	lds	r24, 0x4a
     5c4:	9b a1       	lds	r25, 0x4b
     5c6:	ac a1       	lds	r26, 0x4c
     5c8:	bd a1       	lds	r27, 0x4d
     5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <ProcessMouseReport+0xae>
     5cc:	88 0f       	add	r24, r24
     5ce:	99 1f       	adc	r25, r25
     5d0:	aa 1f       	adc	r26, r26
     5d2:	bb 1f       	adc	r27, r27
     5d4:	2a 95       	dec	r18
     5d6:	d2 f7       	brpl	.-12     	; 0x5cc <ProcessMouseReport+0xa6>
     5d8:	00 97       	sbiw	r24, 0x00	; 0
     5da:	d1 f1       	breq	.+116    	; 0x650 <ProcessMouseReport+0x12a>

			if (WheelDelta)
     5dc:	18 16       	cp	r1, r24
     5de:	19 06       	cpc	r1, r25
			  LEDMask = (LEDS_LED1 | LEDS_LED2 | ((WheelDelta > 0) ? LEDS_LED3 : LEDS_LED4));
     5e0:	b4 f5       	brge	.+108    	; 0x64e <ProcessMouseReport+0x128>
     5e2:	10 eb       	ldi	r17, 0xB0	; 176
     5e4:	35 c0       	rjmp	.+106    	; 0x650 <ProcessMouseReport+0x12a>
     5e6:	c0 97       	sbiw	r24, 0x30	; 48
     5e8:	82 30       	cpi	r24, 0x02	; 2
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
				 ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
     5ea:	91 05       	cpc	r25, r1
			int16_t WheelDelta = HID_ALIGN_DATA(ReportItem, int16_t);

			if (WheelDelta)
			  LEDMask = (LEDS_LED1 | LEDS_LED2 | ((WheelDelta > 0) ? LEDS_LED3 : LEDS_LED4));
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     5ec:	88 f5       	brcc	.+98     	; 0x650 <ProcessMouseReport+0x12a>
     5ee:	8a 81       	ldd	r24, Y+2	; 0x02
     5f0:	88 23       	and	r24, r24
				 ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
				  (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
     5f2:	71 f5       	brne	.+92     	; 0x650 <ProcessMouseReport+0x12a>
     5f4:	c7 01       	movw	r24, r14
     5f6:	be 01       	movw	r22, r28
				 (ReportItem->ItemType                == HID_REPORT_ITEM_In))
		{
			/* Get the mouse relative position value */
			FoundData = USB_GetHIDReportItemInfo(MouseReport, ReportItem);
     5f8:	83 d5       	rcall	.+2822   	; 0x1100 <USB_GetHIDReportItemInfo>
     5fa:	88 23       	and	r24, r24
     5fc:	49 f1       	breq	.+82     	; 0x650 <ProcessMouseReport+0x12a>
     5fe:	88 85       	ldd	r24, Y+8	; 0x08

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
     600:	96 01       	movw	r18, r12
     602:	28 1b       	sub	r18, r24
			  continue;

			int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     604:	31 09       	sbc	r19, r1
     606:	8a a1       	lds	r24, 0x4a
     608:	9b a1       	lds	r25, 0x4b
     60a:	ac a1       	lds	r26, 0x4c
     60c:	bd a1       	lds	r27, 0x4d
     60e:	04 c0       	rjmp	.+8      	; 0x618 <ProcessMouseReport+0xf2>
     610:	88 0f       	add	r24, r24
     612:	99 1f       	adc	r25, r25
     614:	aa 1f       	adc	r26, r26
     616:	bb 1f       	adc	r27, r27
     618:	2a 95       	dec	r18
     61a:	d2 f7       	brpl	.-12     	; 0x610 <ProcessMouseReport+0xea>
     61c:	9c 01       	movw	r18, r24
     61e:	00 97       	sbiw	r24, 0x00	; 0
     620:	b9 f0       	breq	.+46     	; 0x650 <ProcessMouseReport+0x12a>
     622:	8b 85       	ldd	r24, Y+11	; 0x0b

			/* Check to see if a (non-zero) delta movement has been indicated */
			if (DeltaMovement)
     624:	9c 85       	ldd	r25, Y+12	; 0x0c
     626:	80 33       	cpi	r24, 0x30	; 48
			{
				/* Determine if the report is for the X or Y delta movement, light LEDs as appropriate */
				if (ReportItem->Attributes.Usage.Usage == USAGE_X)
     628:	91 05       	cpc	r25, r1
     62a:	39 f4       	brne	.+14     	; 0x63a <ProcessMouseReport+0x114>
     62c:	12 16       	cp	r1, r18
     62e:	13 06       	cpc	r1, r19
     630:	14 f4       	brge	.+4      	; 0x636 <ProcessMouseReport+0x110>
				  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED1 : LEDS_LED2);
     632:	80 e1       	ldi	r24, 0x10	; 16
     634:	08 c0       	rjmp	.+16     	; 0x646 <ProcessMouseReport+0x120>
     636:	80 e2       	ldi	r24, 0x20	; 32
     638:	06 c0       	rjmp	.+12     	; 0x646 <ProcessMouseReport+0x120>
     63a:	12 16       	cp	r1, r18
     63c:	13 06       	cpc	r1, r19
     63e:	14 f4       	brge	.+4      	; 0x644 <ProcessMouseReport+0x11e>
				else
				  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
     640:	80 e8       	ldi	r24, 0x80	; 128
     642:	01 c0       	rjmp	.+2      	; 0x646 <ProcessMouseReport+0x120>
     644:	80 e4       	ldi	r24, 0x40	; 64
     646:	18 2b       	or	r17, r24
     648:	03 c0       	rjmp	.+6      	; 0x650 <ProcessMouseReport+0x12a>
     64a:	10 ef       	ldi	r17, 0xF0	; 240
     64c:	01 c0       	rjmp	.+2      	; 0x650 <ProcessMouseReport+0x12a>
     64e:	10 e7       	ldi	r17, 0x70	; 112
			if (!(FoundData))
			  continue;

			/* If button is pressed, all LEDs are turned on */
			if (ReportItem->Value)
			  LEDMask = LEDS_ALL_LEDS;
     650:	0f 5f       	subi	r16, 0xFF	; 255
     652:	80 91 1d 01 	lds	r24, 0x011D
void ProcessMouseReport(uint8_t* MouseReport)
{
	uint8_t LEDMask = LEDS_NO_LEDS;

	/* Check each HID report item in turn, looking for mouse X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     656:	08 17       	cp	r16, r24
     658:	08 f4       	brcc	.+2      	; 0x65c <ProcessMouseReport+0x136>
     65a:	79 cf       	rjmp	.-270    	; 0x54e <ProcessMouseReport+0x28>
     65c:	81 2f       	mov	r24, r17
     65e:	54 de       	rcall	.-856    	; 0x308 <LEDs_SetAllLEDs>
     660:	df 91       	pop	r29
			}
		}
	}

	/* Display the button information on the board LEDs */
	LEDs_SetAllLEDs(LEDMask);
     662:	cf 91       	pop	r28
     664:	1f 91       	pop	r17
     666:	0f 91       	pop	r16
}
     668:	ff 90       	pop	r15
     66a:	ef 90       	pop	r14
     66c:	df 90       	pop	r13
     66e:	cf 90       	pop	r12
     670:	bf 90       	pop	r11
     672:	af 90       	pop	r10
     674:	08 95       	ret

00000676 <MouseHost_Task>:
     676:	cf 92       	push	r12
     678:	df 92       	push	r13
     67a:	ef 92       	push	r14
     67c:	ff 92       	push	r15

/** Task to read and process the HID report descriptor and HID reports from the device and display the
 *  results onto the board LEDs.
 */
void MouseHost_Task(void)
{
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
		Pipe_ClearIN();
	}

	/* Freeze mouse data pipe */
	Pipe_Freeze();
}
     68a:	cd b6       	in	r12, 0x3d	; 61
     68c:	de b6       	in	r13, 0x3e	; 62
/** Task to read and process the HID report descriptor and HID reports from the device and display the
 *  results onto the board LEDs.
 */
void MouseHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     68e:	80 91 02 05 	lds	r24, 0x0502
     692:	8b 30       	cpi	r24, 0x0B	; 11
     694:	c1 f5       	brne	.+112    	; 0x706 <MouseHost_Task+0x90>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     69c:	80 91 a9 00 	lds	r24, 0x00A9
     6a0:	8f 7b       	andi	r24, 0xBF	; 191
     6a2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     6a6:	80 91 a6 00 	lds	r24, 0x00A6
	/* Select and unfreeze mouse data pipe */
	Pipe_SelectPipe(MOUSE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (Pipe_IsINReceived())
     6aa:	80 ff       	sbrs	r24, 0
     6ac:	27 c0       	rjmp	.+78     	; 0x6fc <MouseHost_Task+0x86>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     6ae:	80 91 a6 00 	lds	r24, 0x00A6
	{
		/* Check if data has been received from the attached mouse */
		if (Pipe_IsReadWriteAllowed())
     6b2:	85 ff       	sbrs	r24, 5
     6b4:	1e c0       	rjmp	.+60     	; 0x6f2 <MouseHost_Task+0x7c>
     6b6:	ee b6       	in	r14, 0x3e	; 62
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     6b8:	80 91 f6 00 	lds	r24, 0x00F6
     6bc:	90 91 f7 00 	lds	r25, 0x00F7
		{
			/* Create buffer big enough for the report */
			uint8_t MouseReport[Pipe_BytesInPipe()];
     6c0:	2d b7       	in	r18, 0x3d	; 61
     6c2:	3e b7       	in	r19, 0x3e	; 62
     6c4:	28 1b       	sub	r18, r24
     6c6:	39 0b       	sbc	r19, r25
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	f8 94       	cli
     6cc:	3e bf       	out	0x3e, r19	; 62
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	2d bf       	out	0x3d, r18	; 61
     6d2:	0d b7       	in	r16, 0x3d	; 61
     6d4:	1e b7       	in	r17, 0x3e	; 62
     6d6:	0f 5f       	subi	r16, 0xFF	; 255
     6d8:	1f 4f       	sbci	r17, 0xFF	; 255
     6da:	60 91 f6 00 	lds	r22, 0x00F6
     6de:	70 91 f7 00 	lds	r23, 0x00F7

			/* Load in the mouse report */
			Pipe_Read_Stream_LE(MouseReport, Pipe_BytesInPipe(), NULL);
     6e2:	c8 01       	movw	r24, r16
     6e4:	40 e0       	ldi	r20, 0x00	; 0
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	43 d7       	rcall	.+3718   	; 0x1570 <Pipe_Read_Stream_LE>
     6ea:	c8 01       	movw	r24, r16

			/* Process the read in mouse report from the device */
			ProcessMouseReport(MouseReport);
     6ec:	1c df       	rcall	.-456    	; 0x526 <ProcessMouseReport>
     6ee:	cd be       	out	0x3d, r12	; 61
     6f0:	ee be       	out	0x3e, r14	; 62
     6f2:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     6f6:	8e 77       	andi	r24, 0x7E	; 126
     6f8:	80 93 a6 00 	sts	0x00A6, r24
     6fc:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     700:	80 64       	ori	r24, 0x40	; 64
     702:	80 93 a9 00 	sts	0x00A9, r24
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	f8 94       	cli
		Pipe_ClearIN();
	}

	/* Freeze mouse data pipe */
	Pipe_Freeze();
}
     70a:	de be       	out	0x3e, r13	; 62
     70c:	0f be       	out	0x3f, r0	; 63
     70e:	cd be       	out	0x3d, r12	; 61
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	0f 91       	pop	r16
     718:	ff 90       	pop	r15
     71a:	ef 90       	pop	r14
     71c:	df 90       	pop	r13
     71e:	cf 90       	pop	r12
     720:	08 95       	ret

00000722 <main>:
     722:	f7 dd       	rcall	.-1042   	; 0x312 <SetupHardware>
     724:	88 e9       	ldi	r24, 0x98	; 152
 */
int main(void)
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "Mouse HID Parser Host Demo running.\r\n" ESC_FG_WHITE));
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <puts_P>
     72c:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     72e:	ec dd       	rcall	.-1064   	; 0x308 <LEDs_SetAllLEDs>
     730:	78 94       	sei
     732:	a1 df       	rcall	.-190    	; 0x676 <MouseHost_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     734:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		MouseHost_Task();
     738:	fc cf       	rjmp	.-8      	; 0x732 <main+0x10>

0000073a <DComp_NextMouseInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Mouse HID Class and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMouseInterface(void* CurrentDescriptor)
{
     73a:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     73c:	81 81       	ldd	r24, Z+1	; 0x01
     73e:	84 30       	cpi	r24, 0x04	; 4
     740:	19 f4       	brne	.+6      	; 0x748 <DComp_NextMouseInterface+0xe>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class, break out if correct class interface found */
		if (Interface->Class == HID_CSCP_HIDClass)
     742:	85 81       	ldd	r24, Z+5	; 0x05
     744:	83 30       	cpi	r24, 0x03	; 3
     746:	11 f0       	breq	.+4      	; 0x74c <DComp_NextMouseInterface+0x12>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	08 95       	ret
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class, break out if correct class interface found */
		if (Interface->Class == HID_CSCP_HIDClass)
		{
			return DESCRIPTOR_SEARCH_Found;
     74c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     74e:	08 95       	ret

00000750 <DComp_NextMouseInterfaceDataEndpoint>:
 */
uint8_t DComp_NextMouseInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     750:	fc 01       	movw	r30, r24
     752:	81 81       	ldd	r24, Z+1	; 0x01
     754:	85 30       	cpi	r24, 0x05	; 5
     756:	21 f0       	breq	.+8      	; 0x760 <DComp_NextMouseInterfaceDataEndpoint+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
     758:	84 30       	cpi	r24, 0x04	; 4
     75a:	21 f4       	brne	.+8      	; 0x764 <DComp_NextMouseInterfaceDataEndpoint+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	08 95       	ret
uint8_t DComp_NextMouseInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
	  return DESCRIPTOR_SEARCH_Found;
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
     764:	82 e0       	ldi	r24, 0x02	; 2
}
     766:	08 95       	ret

00000768 <DComp_NextHID>:
 */
uint8_t DComp_NextHID(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
     768:	fc 01       	movw	r30, r24
     76a:	81 81       	ldd	r24, Z+1	; 0x01
     76c:	81 32       	cpi	r24, 0x21	; 33
     76e:	11 f4       	brne	.+4      	; 0x774 <DComp_NextHID+0xc>
	  return DESCRIPTOR_SEARCH_Found;
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	08 95       	ret
	else
	  return DESCRIPTOR_SEARCH_NotFound;
     774:	82 e0       	ldi	r24, 0x02	; 2
}
     776:	08 95       	ret

00000778 <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint and HID descriptor.
 *
 *  \return An error code from the \ref MouseHostWithParser_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     778:	af 92       	push	r10
     77a:	bf 92       	push	r11
     77c:	cf 92       	push	r12
     77e:	df 92       	push	r13
     780:	ef 92       	push	r14
     782:	ff 92       	push	r15
     784:	0f 93       	push	r16
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	cd b7       	in	r28, 0x3d	; 61
     78e:	de b7       	in	r29, 0x3e	; 62
     790:	c4 50       	subi	r28, 0x04	; 4
     792:	d2 40       	sbci	r29, 0x02	; 2
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	de bf       	out	0x3e, r29	; 62
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     79e:	ae 01       	movw	r20, r28
     7a0:	4b 5f       	subi	r20, 0xFB	; 251
     7a2:	5f 4f       	sbci	r21, 0xFF	; 255
     7a4:	5c 83       	std	Y+4, r21	; 0x04
     7a6:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5f       	subi	r16, 0xFF	; 255
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	b8 01       	movw	r22, r16
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	32 e0       	ldi	r19, 0x02	; 2
     7b6:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <USB_Host_GetDeviceConfigDescriptor>
     7ba:	85 30       	cpi	r24, 0x05	; 5
     7bc:	09 f4       	brne	.+2      	; 0x7c0 <ProcessConfigurationDescriptor+0x48>
     7be:	54 c0       	rjmp	.+168    	; 0x868 <ProcessConfigurationDescriptor+0xf0>
     7c0:	86 30       	cpi	r24, 0x06	; 6
     7c2:	19 f0       	breq	.+6      	; 0x7ca <ProcessConfigurationDescriptor+0x52>
     7c4:	88 23       	and	r24, r24
     7c6:	41 f0       	breq	.+16     	; 0x7d8 <ProcessConfigurationDescriptor+0x60>
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <ProcessConfigurationDescriptor+0x56>
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     7ca:	83 e0       	ldi	r24, 0x03	; 3
     7cc:	50 c0       	rjmp	.+160    	; 0x86e <ProcessConfigurationDescriptor+0xf6>
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	4e c0       	rjmp	.+156    	; 0x86e <ProcessConfigurationDescriptor+0xf6>
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint and HID descriptor.
 *
 *  \return An error code from the \ref MouseHostWithParser_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     7d2:	c9 2e       	mov	r12, r25
     7d4:	d8 2e       	mov	r13, r24
     7d6:	04 c0       	rjmp	.+8      	; 0x7e0 <ProcessConfigurationDescriptor+0x68>
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     7d8:	cc 24       	eor	r12, r12
     7da:	dd 24       	eor	r13, r13
     7dc:	aa 24       	eor	r10, r10
     7de:	bb 24       	eor	r11, r11
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     7e0:	a1 14       	cp	r10, r1
     7e2:	b1 04       	cpc	r11, r1
     7e4:	51 f0       	breq	.+20     	; 0x7fa <ProcessConfigurationDescriptor+0x82>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     7e6:	c8 01       	movw	r24, r16
     7e8:	be 01       	movw	r22, r28
     7ea:	6d 5f       	subi	r22, 0xFD	; 253
     7ec:	7f 4f       	sbci	r23, 0xFF	; 255
     7ee:	48 ea       	ldi	r20, 0xA8	; 168
     7f0:	53 e0       	ldi	r21, 0x03	; 3
     7f2:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <USB_GetNextDescriptorComp>
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     7f6:	88 23       	and	r24, r24
     7f8:	c9 f0       	breq	.+50     	; 0x82c <ProcessConfigurationDescriptor+0xb4>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextMouseInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     7fa:	c8 01       	movw	r24, r16
     7fc:	be 01       	movw	r22, r28
     7fe:	6d 5f       	subi	r22, 0xFD	; 253
     800:	7f 4f       	sbci	r23, 0xFF	; 255
     802:	4d e9       	ldi	r20, 0x9D	; 157
     804:	53 e0       	ldi	r21, 0x03	; 3
     806:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <USB_GetNextDescriptorComp>
     80a:	88 23       	and	r24, r24
     80c:	79 f5       	brne	.+94     	; 0x86c <ProcessConfigurationDescriptor+0xf4>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     80e:	ab 80       	ldd	r10, Y+3	; 0x03
     810:	bc 80       	ldd	r11, Y+4	; 0x04

			/* Get the HID descriptor from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     812:	c8 01       	movw	r24, r16
     814:	be 01       	movw	r22, r28
     816:	6d 5f       	subi	r22, 0xFD	; 253
     818:	7f 4f       	sbci	r23, 0xFF	; 255
     81a:	44 eb       	ldi	r20, 0xB4	; 180
     81c:	53 e0       	ldi	r21, 0x03	; 3
     81e:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <USB_GetNextDescriptorComp>
     822:	88 23       	and	r24, r24
     824:	19 f5       	brne	.+70     	; 0x86c <ProcessConfigurationDescriptor+0xf4>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the HID descriptor for later use */
			HIDDescriptor = DESCRIPTOR_PCAST(CurrConfigLocation, USB_HID_Descriptor_HID_t);
     826:	cb 80       	ldd	r12, Y+3	; 0x03
     828:	dc 80       	ldd	r13, Y+4	; 0x04

			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
     82a:	33 c0       	rjmp	.+102    	; 0x892 <ProcessConfigurationDescriptor+0x11a>
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     82c:	eb 80       	ldd	r14, Y+3	; 0x03
     82e:	fc 80       	ldd	r15, Y+4	; 0x04

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     830:	f7 01       	movw	r30, r14
     832:	42 81       	ldd	r20, Z+2	; 0x02
     834:	47 ff       	sbrs	r20, 7
     836:	2d c0       	rjmp	.+90     	; 0x892 <ProcessConfigurationDescriptor+0x11a>
     838:	9c 2d       	mov	r25, r12
     83a:	8d 2d       	mov	r24, r13
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint))
     83c:	e1 14       	cp	r14, r1
     83e:	f1 04       	cpc	r15, r1
     840:	41 f2       	breq	.-112    	; 0x7d2 <ProcessConfigurationDescriptor+0x5a>
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		  DataINEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(MOUSE_DATA_IN_PIPE, EP_TYPE_INTERRUPT, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     842:	24 81       	ldd	r18, Z+4	; 0x04
     844:	35 81       	ldd	r19, Z+5	; 0x05
     846:	81 e8       	ldi	r24, 0x81	; 129
     848:	63 e0       	ldi	r22, 0x03	; 3
     84a:	01 e0       	ldi	r16, 0x01	; 1
     84c:	e8 d6       	rcall	.+3536   	; 0x161e <Pipe_ConfigurePipe>
     84e:	f7 01       	movw	r30, r14
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     850:	86 81       	ldd	r24, Z+6	; 0x06
     852:	80 93 ad 00 	sts	0x00AD, r24
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     856:	f6 01       	movw	r30, r12

	/* Get the HID report size from the HID report descriptor */
	HIDReportSize = HIDDescriptor->HIDReportLength;
     858:	87 81       	ldd	r24, Z+7	; 0x07
     85a:	90 85       	ldd	r25, Z+8	; 0x08
     85c:	90 93 f7 04 	sts	0x04F7, r25
     860:	80 93 f6 04 	sts	0x04F6, r24
     864:	80 e0       	ldi	r24, 0x00	; 0

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     866:	03 c0       	rjmp	.+6      	; 0x86e <ProcessConfigurationDescriptor+0xf6>
     868:	82 e0       	ldi	r24, 0x02	; 2
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     86a:	01 c0       	rjmp	.+2      	; 0x86e <ProcessConfigurationDescriptor+0xf6>
     86c:	84 e0       	ldi	r24, 0x04	; 4
			/* Get the HID descriptor from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextHID) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     86e:	cc 5f       	subi	r28, 0xFC	; 252
	/* Get the HID report size from the HID report descriptor */
	HIDReportSize = HIDDescriptor->HIDReportLength;

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     870:	dd 4f       	sbci	r29, 0xFD	; 253
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	df 90       	pop	r13
     88a:	cf 90       	pop	r12
     88c:	bf 90       	pop	r11
     88e:	af 90       	pop	r10
     890:	08 95       	ret
     892:	9c 2d       	mov	r25, r12
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint and HID descriptor.
 *
 *  \return An error code from the \ref MouseHostWithParser_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     894:	8d 2d       	mov	r24, r13
     896:	9d cf       	rjmp	.-198    	; 0x7d2 <ProcessConfigurationDescriptor+0x5a>

00000898 <GetHIDReportData>:
 *  structures via the HID parser routines in the LUFA library.
 *
 *  \return  A value from the \ref MouseHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
     898:	ef 92       	push	r14
     89a:	ff 92       	push	r15
     89c:	0f 93       	push	r16
     89e:	1f 93       	push	r17
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
	  return ParseError;

	return ParseSuccessful;
}
     8a8:	ed b6       	in	r14, 0x3d	; 61
     8aa:	fe b6       	in	r15, 0x3e	; 62
 *  \return  A value from the \ref MouseHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
	/* Create a buffer big enough to hold the entire returned HID report */
	uint8_t HIDReportData[HIDReportSize];
     8ac:	80 91 f6 04 	lds	r24, 0x04F6
     8b0:	90 91 f7 04 	lds	r25, 0x04F7
     8b4:	2d b7       	in	r18, 0x3d	; 61
     8b6:	3e b7       	in	r19, 0x3e	; 62
     8b8:	28 1b       	sub	r18, r24
     8ba:	39 0b       	sbc	r19, r25
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	3e bf       	out	0x3e, r19	; 62
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	2d bf       	out	0x3d, r18	; 61
     8c6:	0d b7       	in	r16, 0x3d	; 61
     8c8:	1e b7       	in	r17, 0x3e	; 62
     8ca:	0f 5f       	subi	r16, 0xFF	; 255
     8cc:	1f 4f       	sbci	r17, 0xFF	; 255

	USB_ControlRequest = (USB_Request_Header_t)
     8ce:	21 e8       	ldi	r18, 0x81	; 129
     8d0:	20 93 fa 04 	sts	0x04FA, r18
     8d4:	26 e0       	ldi	r18, 0x06	; 6
     8d6:	20 93 fb 04 	sts	0x04FB, r18
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	32 e2       	ldi	r19, 0x22	; 34
     8de:	30 93 fd 04 	sts	0x04FD, r19
     8e2:	20 93 fc 04 	sts	0x04FC, r18
     8e6:	10 92 ff 04 	sts	0x04FF, r1
     8ea:	10 92 fe 04 	sts	0x04FE, r1
     8ee:	90 93 01 05 	sts	0x0501, r25
     8f2:	80 93 00 05 	sts	0x0500, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     8f6:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send control request to retrieve the HID report from the attached device */
	if (USB_Host_SendControlRequest(HIDReportData) != HOST_SENDCONTROL_Successful)
     8fa:	c8 01       	movw	r24, r16
     8fc:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <USB_Host_SendControlRequest>
     900:	88 23       	and	r24, r24
     902:	61 f4       	brne	.+24     	; 0x91c <GetHIDReportData+0x84>
	  return ParseControlError;

	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
     904:	60 91 f6 04 	lds	r22, 0x04F6
     908:	70 91 f7 04 	lds	r23, 0x04F7
     90c:	c8 01       	movw	r24, r16
     90e:	4d e1       	ldi	r20, 0x1D	; 29
     910:	51 e0       	ldi	r21, 0x01	; 1
     912:	3a d0       	rcall	.+116    	; 0x988 <USB_ProcessHIDReport>
     914:	88 23       	and	r24, r24
     916:	21 f0       	breq	.+8      	; 0x920 <GetHIDReportData+0x88>
     918:	81 e0       	ldi	r24, 0x01	; 1
	  return ParseError;
     91a:	03 c0       	rjmp	.+6      	; 0x922 <GetHIDReportData+0x8a>
     91c:	82 e0       	ldi	r24, 0x02	; 2
	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send control request to retrieve the HID report from the attached device */
	if (USB_Host_SendControlRequest(HIDReportData) != HOST_SENDCONTROL_Successful)
	  return ParseControlError;
     91e:	01 c0       	rjmp	.+2      	; 0x922 <GetHIDReportData+0x8a>
     920:	80 e0       	ldi	r24, 0x00	; 0

	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
	  return ParseError;

	return ParseSuccessful;
     922:	0f b6       	in	r0, 0x3f	; 63
}
     924:	f8 94       	cli
     926:	fe be       	out	0x3e, r15	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	ed be       	out	0x3d, r14	; 61
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	08 95       	ret

0000093a <CALLBACK_HIDParser_FilterHIDReportItem>:
     93a:	dc 01       	movw	r26, r24

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Mouse Usage is found - this prevents Joysticks, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a mouse
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     93c:	16 96       	adiw	r26, 0x06	; 6
     93e:	ed 91       	ld	r30, X+
     940:	fc 91       	ld	r31, X
     942:	17 97       	sbiw	r26, 0x07	; 7
     944:	0d c0       	rjmp	.+26     	; 0x960 <CALLBACK_HIDParser_FilterHIDReportItem+0x26>
	{
		if ((CurrPath->Usage.Page  == USAGE_PAGE_GENERIC_DCTRL) &&
     946:	81 81       	ldd	r24, Z+1	; 0x01
     948:	92 81       	ldd	r25, Z+2	; 0x02
     94a:	81 30       	cpi	r24, 0x01	; 1
     94c:	91 05       	cpc	r25, r1
     94e:	29 f4       	brne	.+10     	; 0x95a <CALLBACK_HIDParser_FilterHIDReportItem+0x20>
     950:	83 81       	ldd	r24, Z+3	; 0x03
     952:	94 81       	ldd	r25, Z+4	; 0x04
     954:	82 30       	cpi	r24, 0x02	; 2
     956:	91 05       	cpc	r25, r1
     958:	39 f0       	breq	.+14     	; 0x968 <CALLBACK_HIDParser_FilterHIDReportItem+0x2e>

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Mouse Usage is found - this prevents Joysticks, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a mouse
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     95a:	05 80       	ldd	r0, Z+5	; 0x05
     95c:	f6 81       	ldd	r31, Z+6	; 0x06
     95e:	e0 2d       	mov	r30, r0
     960:	30 97       	sbiw	r30, 0x00	; 0
     962:	89 f7       	brne	.-30     	; 0x946 <CALLBACK_HIDParser_FilterHIDReportItem+0xc>
		}
	}

	/* If a collection with the mouse usage was not found, indicate that we are not interested in this item */
	if (!IsMouse)
	  return false;
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	08 95       	ret

	/* Check the attributes of the current mouse item - see if we are interested in it or not;
	 * only store BUTTON and GENERIC_DESKTOP_CONTROL items into the Processed HID Report
	 * structure to save RAM and ignore the rest
	 */
	return ((CurrentItem->Attributes.Usage.Page == USAGE_PAGE_BUTTON) ||
     968:	19 96       	adiw	r26, 0x09	; 9
     96a:	2d 91       	ld	r18, X+
     96c:	3c 91       	ld	r19, X
     96e:	1a 97       	sbiw	r26, 0x0a	; 10
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	29 30       	cpi	r18, 0x09	; 9
     976:	31 05       	cpc	r19, r1
     978:	31 f0       	breq	.+12     	; 0x986 <CALLBACK_HIDParser_FilterHIDReportItem+0x4c>
     97a:	21 30       	cpi	r18, 0x01	; 1
     97c:	31 05       	cpc	r19, r1
     97e:	19 f0       	breq	.+6      	; 0x986 <CALLBACK_HIDParser_FilterHIDReportItem+0x4c>
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	08 95       	ret
	        (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_GENERIC_DCTRL));
}
     986:	08 95       	ret

00000988 <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
     988:	2f 92       	push	r2
     98a:	3f 92       	push	r3
     98c:	4f 92       	push	r4
     98e:	5f 92       	push	r5
     990:	6f 92       	push	r6
     992:	7f 92       	push	r7
     994:	8f 92       	push	r8
     996:	9f 92       	push	r9
     998:	af 92       	push	r10
     99a:	bf 92       	push	r11
     99c:	cf 92       	push	r12
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	cf 58       	subi	r28, 0x8F	; 143
     9b2:	d0 40       	sbci	r29, 0x00	; 0
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	f8 94       	cli
     9b8:	de bf       	out	0x3e, r29	; 62
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	cd bf       	out	0x3d, r28	; 61
     9be:	5c 01       	movw	r10, r24
     9c0:	e7 96       	adiw	r28, 0x37	; 55
     9c2:	7f af       	sts	0x7f, r23
     9c4:	6e af       	sts	0x7e, r22
     9c6:	e7 97       	sbiw	r28, 0x37	; 55
     9c8:	ba 01       	movw	r22, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
     9ca:	40 57       	subi	r20, 0x70	; 112
     9cc:	5c 4f       	sbci	r21, 0xFC	; 252
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
     9ce:	89 ed       	ldi	r24, 0xD9	; 217
     9d0:	93 e0       	ldi	r25, 0x03	; 3
     9d2:	db 01       	movw	r26, r22
     9d4:	fc 01       	movw	r30, r24
     9d6:	1d 92       	st	X+, r1
     9d8:	31 97       	sbiw	r30, 0x01	; 1
     9da:	e9 f7       	brne	.-6      	; 0x9d6 <USB_ProcessHIDReport+0x4e>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
     9dc:	de 01       	movw	r26, r28
     9de:	db 96       	adiw	r26, 0x3b	; 59
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
     9e0:	8c e1       	ldi	r24, 0x1C	; 28
     9e2:	fd 01       	movw	r30, r26
     9e4:	11 92       	st	Z+, r1
     9e6:	8a 95       	dec	r24
     9e8:	e9 f7       	brne	.-6      	; 0x9e4 <USB_ProcessHIDReport+0x5c>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     9ea:	87 e0       	ldi	r24, 0x07	; 7
     9ec:	fa 01       	movw	r30, r20
     9ee:	11 92       	st	Z+, r1
     9f0:	8a 95       	dec	r24
     9f2:	e9 f7       	brne	.-6      	; 0x9ee <USB_ProcessHIDReport+0x66>

	ParserData->TotalDeviceReports = 1;
     9f4:	fb 01       	movw	r30, r22
     9f6:	e1 57       	subi	r30, 0x71	; 113
     9f8:	fc 4f       	sbci	r31, 0xFC	; 252
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	80 83       	st	Z, r24
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
     9fe:	eb 96       	adiw	r28, 0x3b	; 59
     a00:	1c ae       	sts	0xbc, r17
     a02:	1d ae       	sts	0xbd, r17
     a04:	1e ae       	sts	0xbe, r17
     a06:	1f ae       	sts	0xbf, r17
     a08:	eb 97       	sbiw	r28, 0x3b	; 59
     a0a:	44 24       	eor	r4, r4
     a0c:	55 24       	eor	r5, r5
     a0e:	32 01       	movw	r6, r4
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
     a10:	30 e0       	ldi	r19, 0x00	; 0
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
     a12:	88 24       	eor	r8, r8
     a14:	99 24       	eor	r9, r9
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
     a16:	8d 01       	movw	r16, r26

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     a18:	cb 01       	movw	r24, r22
     a1a:	8a 52       	subi	r24, 0x2A	; 42
     a1c:	9c 4f       	sbci	r25, 0xFC	; 252
     a1e:	cf 57       	subi	r28, 0x7F	; 127
     a20:	df 4f       	sbci	r29, 0xFF	; 255
     a22:	99 83       	std	Y+1, r25	; 0x01
     a24:	88 83       	st	Y, r24
     a26:	c1 58       	subi	r28, 0x81	; 129
     a28:	d0 40       	sbci	r29, 0x00	; 0
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     a2a:	e5 96       	adiw	r28, 0x35	; 53
     a2c:	bf af       	sts	0x7f, r27
     a2e:	ae af       	sts	0x7e, r26
     a30:	e5 97       	sbiw	r28, 0x35	; 53

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     a32:	db 01       	movw	r26, r22
     a34:	a8 57       	subi	r26, 0x78	; 120
     a36:	bc 4f       	sbci	r27, 0xFC	; 252
     a38:	c9 57       	subi	r28, 0x79	; 121
     a3a:	df 4f       	sbci	r29, 0xFF	; 255
     a3c:	b9 83       	std	Y+1, r27	; 0x01
     a3e:	a8 83       	st	Y, r26
     a40:	c7 58       	subi	r28, 0x87	; 135
     a42:	d0 40       	sbci	r29, 0x00	; 0
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     a44:	f8 01       	movw	r30, r16
     a46:	7c 96       	adiw	r30, 0x1c	; 28
     a48:	c7 57       	subi	r28, 0x77	; 119
     a4a:	df 4f       	sbci	r29, 0xFF	; 255
     a4c:	f9 83       	std	Y+1, r31	; 0x01
     a4e:	e8 83       	st	Y, r30
     a50:	c9 58       	subi	r28, 0x89	; 137
     a52:	d0 40       	sbci	r29, 0x00	; 0
     a54:	cb 01       	movw	r24, r22
     a56:	b5 01       	movw	r22, r10
     a58:	5c 01       	movw	r10, r24
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     a5a:	18 c3       	rjmp	.+1584   	; 0x108c <USB_ProcessHIDReport+0x704>
	{
		uint8_t  HIDReportItem  = *ReportData;
     a5c:	db 01       	movw	r26, r22
     a5e:	2c 91       	ld	r18, X
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
     a60:	e7 96       	adiw	r28, 0x37	; 55
     a62:	ee ad       	sts	0x6e, r30
     a64:	ff ad       	sts	0x6f, r31
     a66:	e7 97       	sbiw	r28, 0x37	; 55
     a68:	31 97       	sbiw	r30, 0x01	; 1
     a6a:	e7 96       	adiw	r28, 0x37	; 55
     a6c:	ff af       	sts	0x7f, r31
     a6e:	ee af       	sts	0x7e, r30
     a70:	e7 97       	sbiw	r28, 0x37	; 55

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
     a72:	82 2f       	mov	r24, r18
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	ed 96       	adiw	r28, 0x3d	; 61
     a78:	9f af       	sts	0x7f, r25
     a7a:	8e af       	sts	0x7e, r24
     a7c:	ed 97       	sbiw	r28, 0x3d	; 61
     a7e:	83 70       	andi	r24, 0x03	; 3
     a80:	90 70       	andi	r25, 0x00	; 0
     a82:	82 30       	cpi	r24, 0x02	; 2
     a84:	91 05       	cpc	r25, r1
     a86:	09 f4       	brne	.+2      	; 0xa8a <USB_ProcessHIDReport+0x102>
     a88:	49 c0       	rjmp	.+146    	; 0xb1c <USB_ProcessHIDReport+0x194>
     a8a:	83 30       	cpi	r24, 0x03	; 3
     a8c:	91 05       	cpc	r25, r1
     a8e:	51 f0       	breq	.+20     	; 0xaa4 <USB_ProcessHIDReport+0x11c>
     a90:	81 30       	cpi	r24, 0x01	; 1
     a92:	91 05       	cpc	r25, r1
     a94:	09 f4       	brne	.+2      	; 0xa98 <USB_ProcessHIDReport+0x110>
     a96:	69 c0       	rjmp	.+210    	; 0xb6a <USB_ProcessHIDReport+0x1e2>
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
     a98:	6f 5f       	subi	r22, 0xFF	; 255
     a9a:	7f 4f       	sbci	r23, 0xFF	; 255
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
     a9c:	cc 24       	eor	r12, r12
     a9e:	dd 24       	eor	r13, r13
     aa0:	76 01       	movw	r14, r12
     aa2:	75 c0       	rjmp	.+234    	; 0xb8e <USB_ProcessHIDReport+0x206>
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     aa4:	db 01       	movw	r26, r22
     aa6:	14 96       	adiw	r26, 0x04	; 4
     aa8:	8c 91       	ld	r24, X
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	a0 e0       	ldi	r26, 0x00	; 0
     aae:	b0 e0       	ldi	r27, 0x00	; 0
     ab0:	f8 2e       	mov	r15, r24
     ab2:	ee 24       	eor	r14, r14
     ab4:	dd 24       	eor	r13, r13
     ab6:	cc 24       	eor	r12, r12
     ab8:	fb 01       	movw	r30, r22
     aba:	83 81       	ldd	r24, Z+3	; 0x03
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	a0 e0       	ldi	r26, 0x00	; 0
     ac0:	b0 e0       	ldi	r27, 0x00	; 0
     ac2:	dc 01       	movw	r26, r24
     ac4:	99 27       	eor	r25, r25
     ac6:	88 27       	eor	r24, r24
     ac8:	c8 2a       	or	r12, r24
     aca:	d9 2a       	or	r13, r25
     acc:	ea 2a       	or	r14, r26
     ace:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     ad8:	c8 2a       	or	r12, r24
     ada:	d9 2a       	or	r13, r25
     adc:	ea 2a       	or	r14, r26
     ade:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     ae0:	f2 81       	ldd	r31, Z+2	; 0x02
     ae2:	ef 96       	adiw	r28, 0x3f	; 63
     ae4:	ff af       	sts	0x7f, r31
     ae6:	ef 97       	sbiw	r28, 0x3f	; 63
     ae8:	ee 96       	adiw	r28, 0x3e	; 62
     aea:	1f ae       	sts	0xbf, r17
     aec:	ee 97       	sbiw	r28, 0x3e	; 62
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     aee:	ef 96       	adiw	r28, 0x3f	; 63
     af0:	ee ad       	sts	0x6e, r30
     af2:	ff ad       	sts	0x6f, r31
     af4:	ef 97       	sbiw	r28, 0x3f	; 63
     af6:	cf 01       	movw	r24, r30
     af8:	a0 e0       	ldi	r26, 0x00	; 0
     afa:	b0 e0       	ldi	r27, 0x00	; 0
     afc:	c8 2a       	or	r12, r24
     afe:	d9 2a       	or	r13, r25
     b00:	ea 2a       	or	r14, r26
     b02:	fb 2a       	or	r15, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     b04:	e7 96       	adiw	r28, 0x37	; 55
     b06:	8e ad       	sts	0x6e, r24
     b08:	9f ad       	sts	0x6f, r25
     b0a:	e7 97       	sbiw	r28, 0x37	; 55
     b0c:	04 97       	sbiw	r24, 0x04	; 4
     b0e:	e7 96       	adiw	r28, 0x37	; 55
     b10:	9f af       	sts	0x7f, r25
     b12:	8e af       	sts	0x7e, r24
     b14:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 4;
     b16:	6b 5f       	subi	r22, 0xFB	; 251
     b18:	7f 4f       	sbci	r23, 0xFF	; 255
				break;
     b1a:	39 c0       	rjmp	.+114    	; 0xb8e <USB_ProcessHIDReport+0x206>

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     b1c:	db 01       	movw	r26, r22
     b1e:	12 96       	adiw	r26, 0x02	; 2
     b20:	bc 91       	ld	r27, X
     b22:	c0 58       	subi	r28, 0x80	; 128
     b24:	df 4f       	sbci	r29, 0xFF	; 255
     b26:	b8 83       	st	Y, r27
     b28:	c0 58       	subi	r28, 0x80	; 128
     b2a:	d0 40       	sbci	r29, 0x00	; 0
     b2c:	c1 58       	subi	r28, 0x81	; 129
     b2e:	df 4f       	sbci	r29, 0xFF	; 255
     b30:	18 82       	st	Y, r1
     b32:	cf 57       	subi	r28, 0x7F	; 127
     b34:	d0 40       	sbci	r29, 0x00	; 0
     b36:	fb 01       	movw	r30, r22
     b38:	81 81       	ldd	r24, Z+1	; 0x01
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	c1 58       	subi	r28, 0x81	; 129
     b3e:	df 4f       	sbci	r29, 0xFF	; 255
     b40:	a8 81       	ld	r26, Y
     b42:	b9 81       	ldd	r27, Y+1	; 0x01
     b44:	cf 57       	subi	r28, 0x7F	; 127
     b46:	d0 40       	sbci	r29, 0x00	; 0
     b48:	8a 2b       	or	r24, r26
     b4a:	9b 2b       	or	r25, r27
     b4c:	6c 01       	movw	r12, r24
     b4e:	ee 24       	eor	r14, r14
     b50:	ff 24       	eor	r15, r15
				ReportSize     -= 2;
     b52:	e7 96       	adiw	r28, 0x37	; 55
     b54:	ee ad       	sts	0x6e, r30
     b56:	ff ad       	sts	0x6f, r31
     b58:	e7 97       	sbiw	r28, 0x37	; 55
     b5a:	32 97       	sbiw	r30, 0x02	; 2
     b5c:	e7 96       	adiw	r28, 0x37	; 55
     b5e:	ff af       	sts	0x7f, r31
     b60:	ee af       	sts	0x7e, r30
     b62:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 2;
     b64:	6d 5f       	subi	r22, 0xFD	; 253
     b66:	7f 4f       	sbci	r23, 0xFF	; 255
				break;
     b68:	12 c0       	rjmp	.+36     	; 0xb8e <USB_ProcessHIDReport+0x206>

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     b6a:	db 01       	movw	r26, r22
     b6c:	11 96       	adiw	r26, 0x01	; 1
     b6e:	cc 90       	ld	r12, X
     b70:	11 97       	sbiw	r26, 0x01	; 1
     b72:	dd 24       	eor	r13, r13
     b74:	ee 24       	eor	r14, r14
     b76:	ff 24       	eor	r15, r15
				ReportSize     -= 1;
     b78:	e7 96       	adiw	r28, 0x37	; 55
     b7a:	ee ad       	sts	0x6e, r30
     b7c:	ff ad       	sts	0x6f, r31
     b7e:	e7 97       	sbiw	r28, 0x37	; 55
     b80:	31 97       	sbiw	r30, 0x01	; 1
     b82:	e7 96       	adiw	r28, 0x37	; 55
     b84:	ff af       	sts	0x7f, r31
     b86:	ee af       	sts	0x7e, r30
     b88:	e7 97       	sbiw	r28, 0x37	; 55
				ReportData     += 1;
     b8a:	6e 5f       	subi	r22, 0xFE	; 254
     b8c:	7f 4f       	sbci	r23, 0xFF	; 255
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     b8e:	ed 96       	adiw	r28, 0x3d	; 61
     b90:	8e ad       	sts	0x6e, r24
     b92:	9f ad       	sts	0x6f, r25
     b94:	ed 97       	sbiw	r28, 0x3d	; 61
     b96:	8c 7f       	andi	r24, 0xFC	; 252
     b98:	90 70       	andi	r25, 0x00	; 0
     b9a:	84 36       	cpi	r24, 0x64	; 100
     b9c:	91 05       	cpc	r25, r1
     b9e:	09 f4       	brne	.+2      	; 0xba2 <USB_ProcessHIDReport+0x21a>
     ba0:	b0 c0       	rjmp	.+352    	; 0xd02 <USB_ProcessHIDReport+0x37a>
     ba2:	85 36       	cpi	r24, 0x65	; 101
     ba4:	91 05       	cpc	r25, r1
     ba6:	8c f5       	brge	.+98     	; 0xc0a <USB_ProcessHIDReport+0x282>
     ba8:	84 32       	cpi	r24, 0x24	; 36
     baa:	91 05       	cpc	r25, r1
     bac:	09 f4       	brne	.+2      	; 0xbb0 <USB_ProcessHIDReport+0x228>
     bae:	90 c0       	rjmp	.+288    	; 0xcd0 <USB_ProcessHIDReport+0x348>
     bb0:	85 32       	cpi	r24, 0x25	; 37
     bb2:	91 05       	cpc	r25, r1
     bb4:	ac f4       	brge	.+42     	; 0xbe0 <USB_ProcessHIDReport+0x258>
     bb6:	88 30       	cpi	r24, 0x08	; 8
     bb8:	91 05       	cpc	r25, r1
     bba:	09 f4       	brne	.+2      	; 0xbbe <USB_ProcessHIDReport+0x236>
     bbc:	fb c0       	rjmp	.+502    	; 0xdb4 <USB_ProcessHIDReport+0x42c>
     bbe:	89 30       	cpi	r24, 0x09	; 9
     bc0:	91 05       	cpc	r25, r1
     bc2:	2c f4       	brge	.+10     	; 0xbce <USB_ProcessHIDReport+0x246>
     bc4:	84 30       	cpi	r24, 0x04	; 4
     bc6:	91 05       	cpc	r25, r1
     bc8:	09 f0       	breq	.+2      	; 0xbcc <USB_ProcessHIDReport+0x244>
     bca:	4e c2       	rjmp	.+1180   	; 0x1068 <USB_ProcessHIDReport+0x6e0>
     bcc:	75 c0       	rjmp	.+234    	; 0xcb8 <USB_ProcessHIDReport+0x330>
     bce:	84 31       	cpi	r24, 0x14	; 20
     bd0:	91 05       	cpc	r25, r1
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <USB_ProcessHIDReport+0x24e>
     bd4:	75 c0       	rjmp	.+234    	; 0xcc0 <USB_ProcessHIDReport+0x338>
     bd6:	88 31       	cpi	r24, 0x18	; 24
     bd8:	91 05       	cpc	r25, r1
     bda:	09 f0       	breq	.+2      	; 0xbde <USB_ProcessHIDReport+0x256>
     bdc:	45 c2       	rjmp	.+1162   	; 0x1068 <USB_ProcessHIDReport+0x6e0>
     bde:	42 c2       	rjmp	.+1156   	; 0x1064 <USB_ProcessHIDReport+0x6dc>
     be0:	84 33       	cpi	r24, 0x34	; 52
     be2:	91 05       	cpc	r25, r1
     be4:	09 f4       	brne	.+2      	; 0xbe8 <USB_ProcessHIDReport+0x260>
     be6:	7a c0       	rjmp	.+244    	; 0xcdc <USB_ProcessHIDReport+0x354>
     be8:	85 33       	cpi	r24, 0x35	; 53
     bea:	91 05       	cpc	r25, r1
     bec:	2c f4       	brge	.+10     	; 0xbf8 <USB_ProcessHIDReport+0x270>
     bee:	88 32       	cpi	r24, 0x28	; 40
     bf0:	91 05       	cpc	r25, r1
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <USB_ProcessHIDReport+0x26e>
     bf4:	39 c2       	rjmp	.+1138   	; 0x1068 <USB_ProcessHIDReport+0x6e0>
     bf6:	ef c0       	rjmp	.+478    	; 0xdd6 <USB_ProcessHIDReport+0x44e>
     bf8:	84 34       	cpi	r24, 0x44	; 68
     bfa:	91 05       	cpc	r25, r1
     bfc:	09 f4       	brne	.+2      	; 0xc00 <USB_ProcessHIDReport+0x278>
     bfe:	76 c0       	rjmp	.+236    	; 0xcec <USB_ProcessHIDReport+0x364>
     c00:	84 35       	cpi	r24, 0x54	; 84
     c02:	91 05       	cpc	r25, r1
     c04:	09 f0       	breq	.+2      	; 0xc08 <USB_ProcessHIDReport+0x280>
     c06:	30 c2       	rjmp	.+1120   	; 0x1068 <USB_ProcessHIDReport+0x6e0>
     c08:	77 c0       	rjmp	.+238    	; 0xcf8 <USB_ProcessHIDReport+0x370>
     c0a:	84 39       	cpi	r24, 0x94	; 148
     c0c:	91 05       	cpc	r25, r1
     c0e:	09 f4       	brne	.+2      	; 0xc12 <USB_ProcessHIDReport+0x28a>
     c10:	81 c0       	rjmp	.+258    	; 0xd14 <USB_ProcessHIDReport+0x38c>
     c12:	85 39       	cpi	r24, 0x95	; 149
     c14:	91 05       	cpc	r25, r1
     c16:	ac f4       	brge	.+42     	; 0xc42 <USB_ProcessHIDReport+0x2ba>
     c18:	80 38       	cpi	r24, 0x80	; 128
     c1a:	91 05       	cpc	r25, r1
     c1c:	09 f4       	brne	.+2      	; 0xc20 <USB_ProcessHIDReport+0x298>
     c1e:	f8 c1       	rjmp	.+1008   	; 0x1010 <USB_ProcessHIDReport+0x688>
     c20:	81 38       	cpi	r24, 0x81	; 129
     c22:	91 05       	cpc	r25, r1
     c24:	2c f4       	brge	.+10     	; 0xc30 <USB_ProcessHIDReport+0x2a8>
     c26:	84 37       	cpi	r24, 0x74	; 116
     c28:	91 05       	cpc	r25, r1
     c2a:	09 f0       	breq	.+2      	; 0xc2e <USB_ProcessHIDReport+0x2a6>
     c2c:	1d c2       	rjmp	.+1082   	; 0x1068 <USB_ProcessHIDReport+0x6e0>
     c2e:	6f c0       	rjmp	.+222    	; 0xd0e <USB_ProcessHIDReport+0x386>
     c30:	84 38       	cpi	r24, 0x84	; 132
     c32:	91 05       	cpc	r25, r1
     c34:	09 f4       	brne	.+2      	; 0xc38 <USB_ProcessHIDReport+0x2b0>
     c36:	71 c0       	rjmp	.+226    	; 0xd1a <USB_ProcessHIDReport+0x392>
     c38:	80 39       	cpi	r24, 0x90	; 144
     c3a:	91 05       	cpc	r25, r1
     c3c:	09 f0       	breq	.+2      	; 0xc40 <USB_ProcessHIDReport+0x2b8>
     c3e:	14 c2       	rjmp	.+1064   	; 0x1068 <USB_ProcessHIDReport+0x6e0>
     c40:	e7 c1       	rjmp	.+974    	; 0x1010 <USB_ProcessHIDReport+0x688>
     c42:	80 3b       	cpi	r24, 0xB0	; 176
     c44:	91 05       	cpc	r25, r1
     c46:	09 f4       	brne	.+2      	; 0xc4a <USB_ProcessHIDReport+0x2c2>
     c48:	e3 c1       	rjmp	.+966    	; 0x1010 <USB_ProcessHIDReport+0x688>
     c4a:	81 3b       	cpi	r24, 0xB1	; 177
     c4c:	91 05       	cpc	r25, r1
     c4e:	4c f4       	brge	.+18     	; 0xc62 <USB_ProcessHIDReport+0x2da>
     c50:	80 3a       	cpi	r24, 0xA0	; 160
     c52:	91 05       	cpc	r25, r1
     c54:	09 f4       	brne	.+2      	; 0xc58 <USB_ProcessHIDReport+0x2d0>
     c56:	c6 c0       	rjmp	.+396    	; 0xde4 <USB_ProcessHIDReport+0x45c>
     c58:	84 3a       	cpi	r24, 0xA4	; 164
     c5a:	91 05       	cpc	r25, r1
     c5c:	09 f0       	breq	.+2      	; 0xc60 <USB_ProcessHIDReport+0x2d8>
     c5e:	04 c2       	rjmp	.+1032   	; 0x1068 <USB_ProcessHIDReport+0x6e0>
     c60:	08 c0       	rjmp	.+16     	; 0xc72 <USB_ProcessHIDReport+0x2ea>
     c62:	84 3b       	cpi	r24, 0xB4	; 180
     c64:	91 05       	cpc	r25, r1
     c66:	e9 f0       	breq	.+58     	; 0xca2 <USB_ProcessHIDReport+0x31a>
     c68:	80 3c       	cpi	r24, 0xC0	; 192
     c6a:	91 05       	cpc	r25, r1
     c6c:	09 f0       	breq	.+2      	; 0xc70 <USB_ProcessHIDReport+0x2e8>
     c6e:	fc c1       	rjmp	.+1016   	; 0x1068 <USB_ProcessHIDReport+0x6e0>
     c70:	08 c1       	rjmp	.+528    	; 0xe82 <USB_ProcessHIDReport+0x4fa>
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     c72:	c7 57       	subi	r28, 0x77	; 119
     c74:	df 4f       	sbci	r29, 0xFF	; 255
     c76:	88 81       	ld	r24, Y
     c78:	99 81       	ldd	r25, Y+1	; 0x01
     c7a:	c9 58       	subi	r28, 0x89	; 137
     c7c:	d0 40       	sbci	r29, 0x00	; 0
     c7e:	08 17       	cp	r16, r24
     c80:	19 07       	cpc	r17, r25
     c82:	09 f4       	brne	.+2      	; 0xc86 <USB_ProcessHIDReport+0x2fe>
     c84:	10 c2       	rjmp	.+1056   	; 0x10a6 <USB_ProcessHIDReport+0x71e>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     c86:	ec e1       	ldi	r30, 0x1C	; 28
     c88:	ce 2e       	mov	r12, r30
     c8a:	d1 2c       	mov	r13, r1
     c8c:	c0 0e       	add	r12, r16
     c8e:	d1 1e       	adc	r13, r17
     c90:	d6 01       	movw	r26, r12
     c92:	f8 01       	movw	r30, r16
     c94:	8a e2       	ldi	r24, 0x2A	; 42
     c96:	01 90       	ld	r0, Z+
     c98:	0d 92       	st	X+, r0
     c9a:	81 50       	subi	r24, 0x01	; 1
     c9c:	e1 f7       	brne	.-8      	; 0xc96 <USB_ProcessHIDReport+0x30e>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     c9e:	86 01       	movw	r16, r12
				break;
     ca0:	e3 c1       	rjmp	.+966    	; 0x1068 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     ca2:	e5 96       	adiw	r28, 0x35	; 53
     ca4:	ae ad       	sts	0x6e, r26
     ca6:	bf ad       	sts	0x6f, r27
     ca8:	e5 97       	sbiw	r28, 0x35	; 53
     caa:	0a 17       	cp	r16, r26
     cac:	1b 07       	cpc	r17, r27
     cae:	09 f4       	brne	.+2      	; 0xcb2 <USB_ProcessHIDReport+0x32a>
     cb0:	fc c1       	rjmp	.+1016   	; 0x10aa <USB_ProcessHIDReport+0x722>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     cb2:	0c 51       	subi	r16, 0x1C	; 28
     cb4:	10 40       	sbci	r17, 0x00	; 0
				break;
     cb6:	d8 c1       	rjmp	.+944    	; 0x1068 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     cb8:	f8 01       	movw	r30, r16
     cba:	d2 82       	std	Z+2, r13	; 0x02
     cbc:	c1 82       	std	Z+1, r12	; 0x01
				break;
     cbe:	d4 c1       	rjmp	.+936    	; 0x1068 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     cc0:	d8 01       	movw	r26, r16
     cc2:	1a 96       	adiw	r26, 0x0a	; 10
     cc4:	cd 92       	st	X+, r12
     cc6:	dd 92       	st	X+, r13
     cc8:	ed 92       	st	X+, r14
     cca:	fc 92       	st	X, r15
     ccc:	1d 97       	sbiw	r26, 0x0d	; 13
				break;
     cce:	cc c1       	rjmp	.+920    	; 0x1068 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     cd0:	f8 01       	movw	r30, r16
     cd2:	c6 86       	std	Z+14, r12	; 0x0e
     cd4:	d7 86       	std	Z+15, r13	; 0x0f
     cd6:	e0 8a       	std	Z+16, r14	; 0x10
     cd8:	f1 8a       	std	Z+17, r15	; 0x11
				break;
     cda:	c6 c1       	rjmp	.+908    	; 0x1068 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     cdc:	d8 01       	movw	r26, r16
     cde:	52 96       	adiw	r26, 0x12	; 18
     ce0:	cd 92       	st	X+, r12
     ce2:	dd 92       	st	X+, r13
     ce4:	ed 92       	st	X+, r14
     ce6:	fc 92       	st	X, r15
     ce8:	55 97       	sbiw	r26, 0x15	; 21
				break;
     cea:	be c1       	rjmp	.+892    	; 0x1068 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     cec:	f8 01       	movw	r30, r16
     cee:	c6 8a       	std	Z+22, r12	; 0x16
     cf0:	d7 8a       	std	Z+23, r13	; 0x17
     cf2:	e0 8e       	std	Z+24, r14	; 0x18
     cf4:	f1 8e       	std	Z+25, r15	; 0x19
				break;
     cf6:	b8 c1       	rjmp	.+880    	; 0x1068 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     cf8:	d8 01       	movw	r26, r16
     cfa:	19 96       	adiw	r26, 0x09	; 9
     cfc:	cc 92       	st	X, r12
     cfe:	19 97       	sbiw	r26, 0x09	; 9
				break;
     d00:	b3 c1       	rjmp	.+870    	; 0x1068 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     d02:	f8 01       	movw	r30, r16
     d04:	c5 82       	std	Z+5, r12	; 0x05
     d06:	d6 82       	std	Z+6, r13	; 0x06
     d08:	e7 82       	std	Z+7, r14	; 0x07
     d0a:	f0 86       	std	Z+8, r15	; 0x08
				break;
     d0c:	ad c1       	rjmp	.+858    	; 0x1068 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     d0e:	d8 01       	movw	r26, r16
     d10:	cc 92       	st	X, r12
				break;
     d12:	aa c1       	rjmp	.+852    	; 0x1068 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     d14:	f8 01       	movw	r30, r16
     d16:	c2 8e       	std	Z+26, r12	; 0x1a
				break;
     d18:	a7 c1       	rjmp	.+846    	; 0x1068 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     d1a:	ac 2d       	mov	r26, r12
     d1c:	f8 01       	movw	r30, r16
     d1e:	c3 8e       	std	Z+27, r12	; 0x1b

				if (ParserData->UsingReportIDs)
     d20:	f5 01       	movw	r30, r10
     d22:	e8 52       	subi	r30, 0x28	; 40
     d24:	fc 4f       	sbci	r31, 0xFC	; 252
     d26:	80 81       	ld	r24, Z
     d28:	88 23       	and	r24, r24
     d2a:	d1 f1       	breq	.+116    	; 0xda0 <USB_ProcessHIDReport+0x418>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     d2c:	f5 01       	movw	r30, r10
     d2e:	e1 57       	subi	r30, 0x71	; 113
     d30:	fc 4f       	sbci	r31, 0xFC	; 252
     d32:	90 81       	ld	r25, Z
     d34:	a5 01       	movw	r20, r10
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	18 c0       	rjmp	.+48     	; 0xd6a <USB_ProcessHIDReport+0x3e2>
     d3a:	49 5f       	subi	r20, 0xF9	; 249
     d3c:	5f 4f       	sbci	r21, 0xFF	; 255

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     d3e:	fa 01       	movw	r30, r20
     d40:	e7 57       	subi	r30, 0x77	; 119
     d42:	fc 4f       	sbci	r31, 0xFC	; 252
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     d44:	80 81       	ld	r24, Z
     d46:	8a 17       	cp	r24, r26
     d48:	79 f4       	brne	.+30     	; 0xd68 <USB_ProcessHIDReport+0x3e0>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     d4a:	82 2f       	mov	r24, r18
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	ac 01       	movw	r20, r24
     d50:	23 e0       	ldi	r18, 0x03	; 3
     d52:	44 0f       	add	r20, r20
     d54:	55 1f       	adc	r21, r21
     d56:	2a 95       	dec	r18
     d58:	e1 f7       	brne	.-8      	; 0xd52 <USB_ProcessHIDReport+0x3ca>
     d5a:	48 1b       	sub	r20, r24
     d5c:	59 0b       	sbc	r21, r25
     d5e:	40 57       	subi	r20, 0x70	; 112
     d60:	5c 4f       	sbci	r21, 0xFC	; 252
     d62:	4a 0d       	add	r20, r10
     d64:	5b 1d       	adc	r21, r11
     d66:	1c c0       	rjmp	.+56     	; 0xda0 <USB_ProcessHIDReport+0x418>

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     d68:	2f 5f       	subi	r18, 0xFF	; 255
     d6a:	29 17       	cp	r18, r25
     d6c:	31 f7       	brne	.-52     	; 0xd3a <USB_ProcessHIDReport+0x3b2>
     d6e:	c4 c1       	rjmp	.+904    	; 0x10f8 <USB_ProcessHIDReport+0x770>
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     d70:	82 2f       	mov	r24, r18
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	ac 01       	movw	r20, r24
     d76:	b3 e0       	ldi	r27, 0x03	; 3
     d78:	44 0f       	add	r20, r20
     d7a:	55 1f       	adc	r21, r21
     d7c:	ba 95       	dec	r27
     d7e:	e1 f7       	brne	.-8      	; 0xd78 <USB_ProcessHIDReport+0x3f0>
     d80:	48 1b       	sub	r20, r24
     d82:	59 0b       	sbc	r21, r25
     d84:	40 57       	subi	r20, 0x70	; 112
     d86:	5c 4f       	sbci	r21, 0xFC	; 252
     d88:	4a 0d       	add	r20, r10
     d8a:	5b 1d       	adc	r21, r11
     d8c:	f5 01       	movw	r30, r10
     d8e:	e1 57       	subi	r30, 0x71	; 113
     d90:	fc 4f       	sbci	r31, 0xFC	; 252
     d92:	2f 5f       	subi	r18, 0xFF	; 255
     d94:	20 83       	st	Z, r18
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     d96:	87 e0       	ldi	r24, 0x07	; 7
     d98:	da 01       	movw	r26, r20
     d9a:	1d 92       	st	X+, r1
     d9c:	8a 95       	dec	r24
     d9e:	e9 f7       	brne	.-6      	; 0xd9a <USB_ProcessHIDReport+0x412>
					}
				}

				ParserData->UsingReportIDs = true;
     da0:	f5 01       	movw	r30, r10
     da2:	e8 52       	subi	r30, 0x28	; 40
     da4:	fc 4f       	sbci	r31, 0xFC	; 252
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	80 83       	st	Z, r24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     daa:	f8 01       	movw	r30, r16
     dac:	83 8d       	ldd	r24, Z+27	; 0x1b
     dae:	da 01       	movw	r26, r20
     db0:	8c 93       	st	X, r24
				break;
     db2:	5a c1       	rjmp	.+692    	; 0x1068 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     db4:	38 30       	cpi	r19, 0x08	; 8
     db6:	09 f4       	brne	.+2      	; 0xdba <USB_ProcessHIDReport+0x432>
     db8:	7a c1       	rjmp	.+756    	; 0x10ae <USB_ProcessHIDReport+0x726>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     dba:	e3 2f       	mov	r30, r19
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	ee 0f       	add	r30, r30
     dc0:	ff 1f       	adc	r31, r31
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	8c 0f       	add	r24, r28
     dc8:	9d 1f       	adc	r25, r29
     dca:	e8 0f       	add	r30, r24
     dcc:	f9 1f       	adc	r31, r25
     dce:	d1 82       	std	Z+1, r13	; 0x01
     dd0:	c0 82       	st	Z, r12
     dd2:	3f 5f       	subi	r19, 0xFF	; 255
				break;
     dd4:	49 c1       	rjmp	.+658    	; 0x1068 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     dd6:	eb 96       	adiw	r28, 0x3b	; 59
     dd8:	cc ae       	sts	0xbc, r28
     dda:	dd ae       	sts	0xbd, r29
     ddc:	ee ae       	sts	0xbe, r30
     dde:	ff ae       	sts	0xbf, r31
     de0:	eb 97       	sbiw	r28, 0x3b	; 59
     de2:	42 c1       	rjmp	.+644    	; 0x1068 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     de4:	81 14       	cp	r8, r1
     de6:	91 04       	cpc	r9, r1
     de8:	39 f4       	brne	.+14     	; 0xdf8 <USB_ProcessHIDReport+0x470>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     dea:	e9 e4       	ldi	r30, 0x49	; 73
     dec:	8e 2e       	mov	r8, r30
     dee:	e3 e0       	ldi	r30, 0x03	; 3
     df0:	9e 2e       	mov	r9, r30
     df2:	8a 0c       	add	r8, r10
     df4:	9b 1c       	adc	r9, r11
     df6:	16 c0       	rjmp	.+44     	; 0xe24 <USB_ProcessHIDReport+0x49c>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     df8:	f5 01       	movw	r30, r10
     dfa:	e0 5b       	subi	r30, 0xB0	; 176
     dfc:	fc 4f       	sbci	r31, 0xFC	; 252

					while (CurrCollectionPath->Parent != NULL)
     dfe:	0b c0       	rjmp	.+22     	; 0xe16 <USB_ProcessHIDReport+0x48e>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     e00:	c9 57       	subi	r28, 0x79	; 121
     e02:	df 4f       	sbci	r29, 0xFF	; 255
     e04:	a8 81       	ld	r26, Y
     e06:	b9 81       	ldd	r27, Y+1	; 0x01
     e08:	c7 58       	subi	r28, 0x87	; 135
     e0a:	d0 40       	sbci	r29, 0x00	; 0
     e0c:	ea 17       	cp	r30, r26
     e0e:	fb 07       	cpc	r31, r27
     e10:	09 f4       	brne	.+2      	; 0xe14 <USB_ProcessHIDReport+0x48c>
     e12:	4f c1       	rjmp	.+670    	; 0x10b2 <USB_ProcessHIDReport+0x72a>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     e14:	37 96       	adiw	r30, 0x07	; 7
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     e16:	85 81       	ldd	r24, Z+5	; 0x05
     e18:	96 81       	ldd	r25, Z+6	; 0x06
     e1a:	00 97       	sbiw	r24, 0x00	; 0
     e1c:	89 f7       	brne	.-30     	; 0xe00 <USB_ProcessHIDReport+0x478>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     e1e:	96 82       	std	Z+6, r9	; 0x06
     e20:	85 82       	std	Z+5, r8	; 0x05
     e22:	4f 01       	movw	r8, r30
				}

				CurrCollectionPath->Type       = ReportItemData;
     e24:	f4 01       	movw	r30, r8
     e26:	c0 82       	st	Z, r12
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     e28:	d8 01       	movw	r26, r16
     e2a:	11 96       	adiw	r26, 0x01	; 1
     e2c:	8d 91       	ld	r24, X+
     e2e:	9c 91       	ld	r25, X
     e30:	12 97       	sbiw	r26, 0x02	; 2
     e32:	92 83       	std	Z+2, r25	; 0x02
     e34:	81 83       	std	Z+1, r24	; 0x01

				if (UsageListSize)
     e36:	33 23       	and	r19, r19
     e38:	81 f0       	breq	.+32     	; 0xe5a <USB_ProcessHIDReport+0x4d2>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	9a 81       	ldd	r25, Y+2	; 0x02
     e3e:	94 83       	std	Z+4, r25	; 0x04
     e40:	83 83       	std	Z+3, r24	; 0x03
     e42:	fe 01       	movw	r30, r28
     e44:	31 96       	adiw	r30, 0x01	; 1

					for (uint8_t i = 0; i < UsageListSize; i++)
     e46:	80 e0       	ldi	r24, 0x00	; 0
					  UsageList[i] = UsageList[i + 1];
     e48:	a2 81       	ldd	r26, Z+2	; 0x02
     e4a:	b3 81       	ldd	r27, Z+3	; 0x03
     e4c:	a1 93       	st	Z+, r26
     e4e:	b1 93       	st	Z+, r27

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     e50:	8f 5f       	subi	r24, 0xFF	; 255
     e52:	83 17       	cp	r24, r19
     e54:	c9 f7       	brne	.-14     	; 0xe48 <USB_ProcessHIDReport+0x4c0>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     e56:	31 50       	subi	r19, 0x01	; 1
     e58:	07 c1       	rjmp	.+526    	; 0x1068 <USB_ProcessHIDReport+0x6e0>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     e5a:	eb 96       	adiw	r28, 0x3b	; 59
     e5c:	8c ad       	sts	0x6c, r24
     e5e:	9d ad       	sts	0x6d, r25
     e60:	ae ad       	sts	0x6e, r26
     e62:	bf ad       	sts	0x6f, r27
     e64:	eb 97       	sbiw	r28, 0x3b	; 59
     e66:	84 15       	cp	r24, r4
     e68:	95 05       	cpc	r25, r5
     e6a:	a6 05       	cpc	r26, r6
     e6c:	b7 05       	cpc	r27, r7
     e6e:	08 f4       	brcc	.+2      	; 0xe72 <USB_ProcessHIDReport+0x4ea>
     e70:	fb c0       	rjmp	.+502    	; 0x1068 <USB_ProcessHIDReport+0x6e0>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     e72:	54 82       	std	Z+4, r5	; 0x04
     e74:	43 82       	std	Z+3, r4	; 0x03
     e76:	08 94       	sec
     e78:	41 1c       	adc	r4, r1
     e7a:	51 1c       	adc	r5, r1
     e7c:	61 1c       	adc	r6, r1
     e7e:	71 1c       	adc	r7, r1
     e80:	f3 c0       	rjmp	.+486    	; 0x1068 <USB_ProcessHIDReport+0x6e0>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     e82:	81 14       	cp	r8, r1
     e84:	91 04       	cpc	r9, r1
     e86:	09 f4       	brne	.+2      	; 0xe8a <USB_ProcessHIDReport+0x502>
     e88:	16 c1       	rjmp	.+556    	; 0x10b6 <USB_ProcessHIDReport+0x72e>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     e8a:	f4 01       	movw	r30, r8
     e8c:	85 80       	ldd	r8, Z+5	; 0x05
     e8e:	96 80       	ldd	r9, Z+6	; 0x06
				break;
     e90:	eb c0       	rjmp	.+470    	; 0x1068 <USB_ProcessHIDReport+0x6e0>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     e92:	fe 01       	movw	r30, r28
     e94:	79 96       	adiw	r30, 0x19	; 25
     e96:	d8 01       	movw	r26, r16
     e98:	8a e1       	ldi	r24, 0x1A	; 26
     e9a:	0d 90       	ld	r0, X+
     e9c:	01 92       	st	Z+, r0
     e9e:	81 50       	subi	r24, 0x01	; 1
     ea0:	e1 f7       	brne	.-8      	; 0xe9a <USB_ProcessHIDReport+0x512>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     ea2:	dd 8a       	std	Y+21, r13	; 0x15
     ea4:	cc 8a       	std	Y+20, r12	; 0x14
					NewReportItem.CollectionPath = CurrCollectionPath;
     ea6:	78 8f       	std	Y+24, r23	; 0x18
     ea8:	6f 8b       	std	Y+23, r22	; 0x17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     eaa:	d8 01       	movw	r26, r16
     eac:	5b 96       	adiw	r26, 0x1b	; 27
     eae:	8c 91       	ld	r24, X
     eb0:	5b 97       	sbiw	r26, 0x1b	; 27
     eb2:	8e 8b       	std	Y+22, r24	; 0x16

					if (UsageListSize)
     eb4:	33 23       	and	r19, r19
     eb6:	81 f0       	breq	.+32     	; 0xed8 <USB_ProcessHIDReport+0x550>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	9a 81       	ldd	r25, Y+2	; 0x02
     ebc:	9d 8f       	std	Y+29, r25	; 0x1d
     ebe:	8c 8f       	std	Y+28, r24	; 0x1c
     ec0:	fe 01       	movw	r30, r28
     ec2:	31 96       	adiw	r30, 0x01	; 1

						for (uint8_t i = 0; i < UsageListSize; i++)
     ec4:	80 e0       	ldi	r24, 0x00	; 0
						  UsageList[i] = UsageList[i + 1];
     ec6:	42 81       	ldd	r20, Z+2	; 0x02
     ec8:	53 81       	ldd	r21, Z+3	; 0x03
     eca:	41 93       	st	Z+, r20
     ecc:	51 93       	st	Z+, r21

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     ece:	8f 5f       	subi	r24, 0xFF	; 255
     ed0:	83 17       	cp	r24, r19
     ed2:	c9 f7       	brne	.-14     	; 0xec6 <USB_ProcessHIDReport+0x53e>
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     ed4:	31 50       	subi	r19, 0x01	; 1
     ed6:	12 c0       	rjmp	.+36     	; 0xefc <USB_ProcessHIDReport+0x574>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     ed8:	eb 96       	adiw	r28, 0x3b	; 59
     eda:	8c ad       	sts	0x6c, r24
     edc:	9d ad       	sts	0x6d, r25
     ede:	ae ad       	sts	0x6e, r26
     ee0:	bf ad       	sts	0x6f, r27
     ee2:	eb 97       	sbiw	r28, 0x3b	; 59
     ee4:	84 15       	cp	r24, r4
     ee6:	95 05       	cpc	r25, r5
     ee8:	a6 05       	cpc	r26, r6
     eea:	b7 05       	cpc	r27, r7
     eec:	38 f0       	brcs	.+14     	; 0xefc <USB_ProcessHIDReport+0x574>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     eee:	5d 8e       	std	Y+29, r5	; 0x1d
     ef0:	4c 8e       	std	Y+28, r4	; 0x1c
     ef2:	08 94       	sec
     ef4:	41 1c       	adc	r4, r1
     ef6:	51 1c       	adc	r5, r1
     ef8:	61 1c       	adc	r6, r1
     efa:	71 1c       	adc	r7, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     efc:	90 e8       	ldi	r25, 0x80	; 128
     efe:	29 16       	cp	r2, r25
     f00:	11 f4       	brne	.+4      	; 0xf06 <USB_ProcessHIDReport+0x57e>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     f02:	1b 8a       	std	Y+19, r1	; 0x13
     f04:	08 c0       	rjmp	.+16     	; 0xf16 <USB_ProcessHIDReport+0x58e>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     f06:	a0 e9       	ldi	r26, 0x90	; 144
     f08:	2a 16       	cp	r2, r26
     f0a:	19 f4       	brne	.+6      	; 0xf12 <USB_ProcessHIDReport+0x58a>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     f0c:	b1 e0       	ldi	r27, 0x01	; 1
     f0e:	bb 8b       	std	Y+19, r27	; 0x13
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <USB_ProcessHIDReport+0x58e>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     f12:	e2 e0       	ldi	r30, 0x02	; 2
     f14:	eb 8b       	std	Y+19, r30	; 0x13

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     f16:	eb 89       	ldd	r30, Y+19	; 0x13
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	ee 0f       	add	r30, r30
     f1c:	ff 1f       	adc	r31, r31
     f1e:	e8 0d       	add	r30, r8
     f20:	f9 1d       	adc	r31, r9
     f22:	81 81       	ldd	r24, Z+1	; 0x01
     f24:	92 81       	ldd	r25, Z+2	; 0x02
     f26:	9a 8b       	std	Y+18, r25	; 0x12
     f28:	89 8b       	std	Y+17, r24	; 0x11

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     f2a:	d8 01       	movw	r26, r16
     f2c:	2c 91       	ld	r18, X
     f2e:	81 81       	ldd	r24, Z+1	; 0x01
     f30:	92 81       	ldd	r25, Z+2	; 0x02
     f32:	82 0f       	add	r24, r18
     f34:	91 1d       	adc	r25, r1
     f36:	92 83       	std	Z+2, r25	; 0x02
     f38:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     f3a:	eb 89       	ldd	r30, Y+19	; 0x13
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	ee 0f       	add	r30, r30
     f40:	ff 1f       	adc	r31, r31
     f42:	e8 0d       	add	r30, r8
     f44:	f9 1d       	adc	r31, r9
     f46:	cf 57       	subi	r28, 0x7F	; 127
     f48:	df 4f       	sbci	r29, 0xFF	; 255
     f4a:	a8 81       	ld	r26, Y
     f4c:	b9 81       	ldd	r27, Y+1	; 0x01
     f4e:	c1 58       	subi	r28, 0x81	; 129
     f50:	d0 40       	sbci	r29, 0x00	; 0
     f52:	4d 91       	ld	r20, X+
     f54:	5c 91       	ld	r21, X
     f56:	11 97       	sbiw	r26, 0x01	; 1
     f58:	81 81       	ldd	r24, Z+1	; 0x01
     f5a:	92 81       	ldd	r25, Z+2	; 0x02
     f5c:	84 17       	cp	r24, r20
     f5e:	95 07       	cpc	r25, r21
     f60:	08 f4       	brcc	.+2      	; 0xf64 <USB_ProcessHIDReport+0x5dc>
     f62:	ca 01       	movw	r24, r20
     f64:	cf 57       	subi	r28, 0x7F	; 127
     f66:	df 4f       	sbci	r29, 0xFF	; 255
     f68:	e8 81       	ld	r30, Y
     f6a:	f9 81       	ldd	r31, Y+1	; 0x01
     f6c:	c1 58       	subi	r28, 0x81	; 129
     f6e:	d0 40       	sbci	r29, 0x00	; 0
     f70:	91 83       	std	Z+1, r25	; 0x01
     f72:	80 83       	st	Z, r24

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     f74:	d5 01       	movw	r26, r10
     f76:	8c 91       	ld	r24, X
     f78:	84 31       	cpi	r24, 0x14	; 20
     f7a:	09 f4       	brne	.+2      	; 0xf7e <USB_ProcessHIDReport+0x5f6>
     f7c:	9e c0       	rjmp	.+316    	; 0x10ba <USB_ProcessHIDReport+0x732>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	4a e2       	ldi	r20, 0x2A	; 42
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	84 9f       	mul	r24, r20
     f86:	f0 01       	movw	r30, r0
     f88:	85 9f       	mul	r24, r21
     f8a:	f0 0d       	add	r31, r0
     f8c:	94 9f       	mul	r25, r20
     f8e:	f0 0d       	add	r31, r0
     f90:	11 24       	eor	r1, r1
     f92:	ea 0d       	add	r30, r10
     f94:	fb 1d       	adc	r31, r11
     f96:	31 96       	adiw	r30, 0x01	; 1
     f98:	de 01       	movw	r26, r28
     f9a:	51 96       	adiw	r26, 0x11	; 17
     f9c:	8a e2       	ldi	r24, 0x2A	; 42
     f9e:	0d 90       	ld	r0, X+
     fa0:	01 92       	st	Z+, r0
     fa2:	81 50       	subi	r24, 0x01	; 1
     fa4:	e1 f7       	brne	.-8      	; 0xf9e <USB_ProcessHIDReport+0x616>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     fa6:	cd 57       	subi	r28, 0x7D	; 125
     fa8:	df 4f       	sbci	r29, 0xFF	; 255
     faa:	88 81       	ld	r24, Y
     fac:	99 81       	ldd	r25, Y+1	; 0x01
     fae:	aa 81       	ldd	r26, Y+2	; 0x02
     fb0:	bb 81       	ldd	r27, Y+3	; 0x03
     fb2:	c3 58       	subi	r28, 0x83	; 131
     fb4:	d0 40       	sbci	r29, 0x00	; 0
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	a1 05       	cpc	r26, r1
     fba:	b1 05       	cpc	r27, r1
     fbc:	39 f5       	brne	.+78     	; 0x100c <USB_ProcessHIDReport+0x684>
     fbe:	ce 01       	movw	r24, r28
     fc0:	41 96       	adiw	r24, 0x11	; 17
     fc2:	c1 57       	subi	r28, 0x71	; 113
     fc4:	df 4f       	sbci	r29, 0xFF	; 255
     fc6:	38 83       	st	Y, r19
     fc8:	cf 58       	subi	r28, 0x8F	; 143
     fca:	d0 40       	sbci	r29, 0x00	; 0
     fcc:	c3 57       	subi	r28, 0x73	; 115
     fce:	df 4f       	sbci	r29, 0xFF	; 255
     fd0:	68 83       	st	Y, r22
     fd2:	cd 58       	subi	r28, 0x8D	; 141
     fd4:	d0 40       	sbci	r29, 0x00	; 0
     fd6:	c2 57       	subi	r28, 0x72	; 114
     fd8:	df 4f       	sbci	r29, 0xFF	; 255
     fda:	78 83       	st	Y, r23
     fdc:	ce 58       	subi	r28, 0x8E	; 142
     fde:	d0 40       	sbci	r29, 0x00	; 0
     fe0:	ac dc       	rcall	.-1704   	; 0x93a <CALLBACK_HIDParser_FilterHIDReportItem>
     fe2:	c1 57       	subi	r28, 0x71	; 113
     fe4:	df 4f       	sbci	r29, 0xFF	; 255
     fe6:	38 81       	ld	r19, Y
     fe8:	cf 58       	subi	r28, 0x8F	; 143
     fea:	d0 40       	sbci	r29, 0x00	; 0
     fec:	c3 57       	subi	r28, 0x73	; 115
     fee:	df 4f       	sbci	r29, 0xFF	; 255
     ff0:	68 81       	ld	r22, Y
     ff2:	cd 58       	subi	r28, 0x8D	; 141
     ff4:	d0 40       	sbci	r29, 0x00	; 0
     ff6:	c2 57       	subi	r28, 0x72	; 114
     ff8:	df 4f       	sbci	r29, 0xFF	; 255
     ffa:	78 81       	ld	r23, Y
     ffc:	ce 58       	subi	r28, 0x8E	; 142
     ffe:	d0 40       	sbci	r29, 0x00	; 0
    1000:	88 23       	and	r24, r24
    1002:	21 f0       	breq	.+8      	; 0x100c <USB_ProcessHIDReport+0x684>
    1004:	d5 01       	movw	r26, r10
					  ParserData->TotalReportItems++;
    1006:	8c 91       	ld	r24, X
    1008:	8f 5f       	subi	r24, 0xFF	; 255
    100a:	8c 93       	st	X, r24
    100c:	33 94       	inc	r3
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
    100e:	1a c0       	rjmp	.+52     	; 0x1044 <USB_ProcessHIDReport+0x6bc>
    1010:	33 24       	eor	r3, r3
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    1012:	8c ef       	ldi	r24, 0xFC	; 252
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));
    1014:	28 2e       	mov	r2, r24
    1016:	22 22       	and	r2, r18
    1018:	d7 01       	movw	r26, r14
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    101a:	c6 01       	movw	r24, r12
    101c:	81 70       	andi	r24, 0x01	; 1
    101e:	90 70       	andi	r25, 0x00	; 0
    1020:	a0 70       	andi	r26, 0x00	; 0
    1022:	b0 70       	andi	r27, 0x00	; 0
    1024:	cd 57       	subi	r28, 0x7D	; 125
    1026:	df 4f       	sbci	r29, 0xFF	; 255
    1028:	88 83       	st	Y, r24
    102a:	99 83       	std	Y+1, r25	; 0x01
    102c:	aa 83       	std	Y+2, r26	; 0x02
    102e:	bb 83       	std	Y+3, r27	; 0x03
    1030:	c3 58       	subi	r28, 0x83	; 131
    1032:	d0 40       	sbci	r29, 0x00	; 0
    1034:	c5 57       	subi	r28, 0x75	; 117
    1036:	df 4f       	sbci	r29, 0xFF	; 255
    1038:	79 83       	std	Y+1, r23	; 0x01
    103a:	68 83       	st	Y, r22
    103c:	cb 58       	subi	r28, 0x8B	; 139
    103e:	d0 40       	sbci	r29, 0x00	; 0
    1040:	b4 01       	movw	r22, r8
    1042:	4a 01       	movw	r8, r20
    1044:	d8 01       	movw	r26, r16
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
    1046:	5a 96       	adiw	r26, 0x1a	; 26
    1048:	8c 91       	ld	r24, X
    104a:	5a 97       	sbiw	r26, 0x1a	; 26
    104c:	38 16       	cp	r3, r24
    104e:	08 f4       	brcc	.+2      	; 0x1052 <USB_ProcessHIDReport+0x6ca>
    1050:	20 cf       	rjmp	.-448    	; 0xe92 <USB_ProcessHIDReport+0x50a>
    1052:	a4 01       	movw	r20, r8
    1054:	4b 01       	movw	r8, r22
    1056:	c5 57       	subi	r28, 0x75	; 117
    1058:	df 4f       	sbci	r29, 0xFF	; 255
    105a:	68 81       	ld	r22, Y
    105c:	79 81       	ldd	r23, Y+1	; 0x01
    105e:	cb 58       	subi	r28, 0x8B	; 139
    1060:	d0 40       	sbci	r29, 0x00	; 0
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <USB_ProcessHIDReport+0x6e0>
    1064:	26 01       	movw	r4, r12
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    1066:	37 01       	movw	r6, r14
    1068:	ed 96       	adiw	r28, 0x3d	; 61
			
			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
    106a:	8e ad       	sts	0x6e, r24
    106c:	9f ad       	sts	0x6f, r25
    106e:	ed 97       	sbiw	r28, 0x3d	; 61
    1070:	8c 70       	andi	r24, 0x0C	; 12
    1072:	90 70       	andi	r25, 0x00	; 0
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	51 f4       	brne	.+20     	; 0x108c <USB_ProcessHIDReport+0x704>
    1078:	eb 96       	adiw	r28, 0x3b	; 59
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
    107a:	1c ae       	sts	0xbc, r17
    107c:	1d ae       	sts	0xbd, r17
    107e:	1e ae       	sts	0xbe, r17
    1080:	1f ae       	sts	0xbf, r17
    1082:	eb 97       	sbiw	r28, 0x3b	; 59
    1084:	44 24       	eor	r4, r4
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
    1086:	55 24       	eor	r5, r5
    1088:	32 01       	movw	r6, r4
    108a:	30 e0       	ldi	r19, 0x00	; 0
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
    108c:	e7 96       	adiw	r28, 0x37	; 55
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
    108e:	ee ad       	sts	0x6e, r30
    1090:	ff ad       	sts	0x6f, r31
    1092:	e7 97       	sbiw	r28, 0x37	; 55
    1094:	30 97       	sbiw	r30, 0x00	; 0
    1096:	09 f0       	breq	.+2      	; 0x109a <USB_ProcessHIDReport+0x712>
    1098:	e1 cc       	rjmp	.-1598   	; 0xa5c <USB_ProcessHIDReport+0xd4>
    109a:	d5 01       	movw	r26, r10
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
    109c:	8c 91       	ld	r24, X
    109e:	88 23       	and	r24, r24
    10a0:	71 f4       	brne	.+28     	; 0x10be <USB_ProcessHIDReport+0x736>
    10a2:	88 e0       	ldi	r24, 0x08	; 8
	  return HID_PARSE_NoUnfilteredReportItems;
    10a4:	0f c0       	rjmp	.+30     	; 0x10c4 <USB_ProcessHIDReport+0x73c>
    10a6:	81 e0       	ldi	r24, 0x01	; 1

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
    10a8:	0d c0       	rjmp	.+26     	; 0x10c4 <USB_ProcessHIDReport+0x73c>
    10aa:	82 e0       	ldi	r24, 0x02	; 2

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
    10ac:	0b c0       	rjmp	.+22     	; 0x10c4 <USB_ProcessHIDReport+0x73c>
    10ae:	86 e0       	ldi	r24, 0x06	; 6

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
    10b0:	09 c0       	rjmp	.+18     	; 0x10c4 <USB_ProcessHIDReport+0x73c>
    10b2:	85 e0       	ldi	r24, 0x05	; 5
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
    10b4:	07 c0       	rjmp	.+14     	; 0x10c4 <USB_ProcessHIDReport+0x73c>
    10b6:	84 e0       	ldi	r24, 0x04	; 4
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
    10b8:	05 c0       	rjmp	.+10     	; 0x10c4 <USB_ProcessHIDReport+0x73c>
    10ba:	83 e0       	ldi	r24, 0x03	; 3
					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;
    10bc:	03 c0       	rjmp	.+6      	; 0x10c4 <USB_ProcessHIDReport+0x73c>
    10be:	80 e0       	ldi	r24, 0x00	; 0
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
    10c0:	01 c0       	rjmp	.+2      	; 0x10c4 <USB_ProcessHIDReport+0x73c>
    10c2:	87 e0       	ldi	r24, 0x07	; 7
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
    10c4:	c1 57       	subi	r28, 0x71	; 113

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
    10c6:	df 4f       	sbci	r29, 0xFF	; 255
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	0f 91       	pop	r16
    10da:	ff 90       	pop	r15
    10dc:	ef 90       	pop	r14
    10de:	df 90       	pop	r13
    10e0:	cf 90       	pop	r12
    10e2:	bf 90       	pop	r11
    10e4:	af 90       	pop	r10
    10e6:	9f 90       	pop	r9
    10e8:	8f 90       	pop	r8
    10ea:	7f 90       	pop	r7
    10ec:	6f 90       	pop	r6
    10ee:	5f 90       	pop	r5
    10f0:	4f 90       	pop	r4
    10f2:	3f 90       	pop	r3
    10f4:	2f 90       	pop	r2
    10f6:	08 95       	ret
    10f8:	2a 30       	cpi	r18, 0x0A	; 10
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
    10fa:	09 f0       	breq	.+2      	; 0x10fe <USB_ProcessHIDReport+0x776>
    10fc:	39 ce       	rjmp	.-910    	; 0xd70 <USB_ProcessHIDReport+0x3e8>
    10fe:	e1 cf       	rjmp	.-62     	; 0x10c2 <USB_ProcessHIDReport+0x73a>

00001100 <USB_GetHIDReportItemInfo>:
    1100:	ef 92       	push	r14
	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
    1102:	ff 92       	push	r15
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	8c 01       	movw	r16, r24
    110e:	eb 01       	movw	r28, r22
	if (ReportItem == NULL)
    1110:	20 97       	sbiw	r28, 0x00	; 0
    1112:	09 f4       	brne	.+2      	; 0x1116 <USB_GetHIDReportItemInfo+0x16>
    1114:	4e c0       	rjmp	.+156    	; 0x11b2 <USB_GetHIDReportItemInfo+0xb2>
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    1116:	e8 85       	ldd	r30, Y+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
    1118:	58 81       	ld	r21, Y
    111a:	49 81       	ldd	r20, Y+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
    111c:	8d 81       	ldd	r24, Y+5	; 0x05
    111e:	88 23       	and	r24, r24
    1120:	39 f0       	breq	.+14     	; 0x1130 <USB_GetHIDReportItemInfo+0x30>
	{
		if (ReportItem->ReportID != ReportData[0])
    1122:	d8 01       	movw	r26, r16
    1124:	9c 91       	ld	r25, X
    1126:	89 17       	cp	r24, r25
    1128:	09 f0       	breq	.+2      	; 0x112c <USB_GetHIDReportItemInfo+0x2c>
    112a:	43 c0       	rjmp	.+134    	; 0x11b2 <USB_GetHIDReportItemInfo+0xb2>
		  return false;

		ReportData++;
    112c:	0f 5f       	subi	r16, 0xFF	; 255
    112e:	1f 4f       	sbci	r17, 0xFF	; 255
	}

	ReportItem->PreviousValue = ReportItem->Value;
    1130:	8a a1       	lds	r24, 0x4a
    1132:	9b a1       	lds	r25, 0x4b
    1134:	ac a1       	lds	r26, 0x4c
    1136:	bd a1       	lds	r27, 0x4d
    1138:	8e a3       	lds	r24, 0x5e
    113a:	9f a3       	lds	r25, 0x5f
    113c:	a8 a7       	lds	r26, 0x78
    113e:	b9 a7       	lds	r27, 0x79
	ReportItem->Value = 0;
    1140:	1a a2       	lds	r17, 0x9a
    1142:	1b a2       	lds	r17, 0x9b
    1144:	1c a2       	lds	r17, 0x9c
    1146:	1d a2       	lds	r17, 0x9d
{
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
	uint16_t CurrentBit   = ReportItem->BitOffset;
    1148:	25 2f       	mov	r18, r21
    114a:	34 2f       	mov	r19, r20
	uint32_t BitMask      = (1 << 0);
    114c:	41 e0       	ldi	r20, 0x01	; 1
    114e:	50 e0       	ldi	r21, 0x00	; 0
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	70 e0       	ldi	r23, 0x00	; 0
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
    1154:	79 01       	movw	r14, r18
    1156:	ee 0e       	add	r14, r30
    1158:	f1 1c       	adc	r15, r1
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
    115a:	26 c0       	rjmp	.+76     	; 0x11a8 <USB_GetHIDReportItemInfo+0xa8>
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
    115c:	f9 01       	movw	r30, r18
    115e:	93 e0       	ldi	r25, 0x03	; 3
    1160:	f6 95       	lsr	r31
    1162:	e7 95       	ror	r30
    1164:	9a 95       	dec	r25
    1166:	e1 f7       	brne	.-8      	; 0x1160 <USB_GetHIDReportItemInfo+0x60>
    1168:	e0 0f       	add	r30, r16
    116a:	f1 1f       	adc	r31, r17
    116c:	e0 81       	ld	r30, Z
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	c9 01       	movw	r24, r18
    1172:	87 70       	andi	r24, 0x07	; 7
    1174:	90 70       	andi	r25, 0x00	; 0
    1176:	02 c0       	rjmp	.+4      	; 0x117c <USB_GetHIDReportItemInfo+0x7c>
    1178:	f5 95       	asr	r31
    117a:	e7 95       	ror	r30
    117c:	8a 95       	dec	r24
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <USB_GetHIDReportItemInfo+0x78>
    1180:	e0 ff       	sbrs	r30, 0
    1182:	0c c0       	rjmp	.+24     	; 0x119c <USB_GetHIDReportItemInfo+0x9c>
		  ReportItem->Value |= BitMask;
    1184:	8a a1       	lds	r24, 0x4a
    1186:	9b a1       	lds	r25, 0x4b
    1188:	ac a1       	lds	r26, 0x4c
    118a:	bd a1       	lds	r27, 0x4d
    118c:	84 2b       	or	r24, r20
    118e:	95 2b       	or	r25, r21
    1190:	a6 2b       	or	r26, r22
    1192:	b7 2b       	or	r27, r23
    1194:	8a a3       	lds	r24, 0x5a
    1196:	9b a3       	lds	r25, 0x5b
    1198:	ac a3       	lds	r26, 0x5c
    119a:	bd a3       	lds	r27, 0x5d

		CurrentBit++;
    119c:	2f 5f       	subi	r18, 0xFF	; 255
    119e:	3f 4f       	sbci	r19, 0xFF	; 255
		BitMask <<= 1;
    11a0:	44 0f       	add	r20, r20
    11a2:	55 1f       	adc	r21, r21
    11a4:	66 1f       	adc	r22, r22
    11a6:	77 1f       	adc	r23, r23
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
    11a8:	e2 16       	cp	r14, r18
    11aa:	f3 06       	cpc	r15, r19
    11ac:	b9 f6       	brne	.-82     	; 0x115c <USB_GetHIDReportItemInfo+0x5c>

		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	01 c0       	rjmp	.+2      	; 0x11b4 <USB_GetHIDReportItemInfo+0xb4>
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
	{
		if (ReportItem->ReportID != ReportData[0])
		  return false;
    11b2:	80 e0       	ldi	r24, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	ff 90       	pop	r15
    11be:	ef 90       	pop	r14
    11c0:	08 95       	ret

000011c2 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    11c2:	80 91 9e 00 	lds	r24, 0x009E
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	81 70       	andi	r24, 0x01	; 1
    11ca:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    11cc:	20 91 a0 00 	lds	r18, 0x00A0
    11d0:	2d 7f       	andi	r18, 0xFD	; 253
    11d2:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
    11d6:	20 91 9e 00 	lds	r18, 0x009E
    11da:	22 60       	ori	r18, 0x02	; 2
    11dc:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
    11e0:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
    11e4:	21 fd       	sbrc	r18, 1
    11e6:	fc cf       	rjmp	.-8      	; 0x11e0 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    11e8:	20 91 9e 00 	lds	r18, 0x009E
    11ec:	21 60       	ori	r18, 0x01	; 1
    11ee:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
    11f2:	10 92 f8 04 	sts	0x04F8, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    11f6:	20 91 a0 00 	lds	r18, 0x00A0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	20 72       	andi	r18, 0x20	; 32
    11fe:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    1200:	40 91 a0 00 	lds	r20, 0x00A0
    1204:	4f 7d       	andi	r20, 0xDF	; 223
    1206:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    120a:	40 91 9f 00 	lds	r20, 0x009F
    120e:	4f 7d       	andi	r20, 0xDF	; 223
    1210:	40 93 9f 00 	sts	0x009F, r20
    1214:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1216:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    121a:	55 ff       	sbrs	r21, 5
    121c:	0b c0       	rjmp	.+22     	; 0x1234 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    121e:	40 91 9f 00 	lds	r20, 0x009F
    1222:	4f 7d       	andi	r20, 0xDF	; 223
    1224:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1228:	40 91 9f 00 	lds	r20, 0x009F
    122c:	4d 7f       	andi	r20, 0xFD	; 253
    122e:	40 93 9f 00 	sts	0x009F, r20
    1232:	08 c0       	rjmp	.+16     	; 0x1244 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1234:	ef ec       	ldi	r30, 0xCF	; 207
    1236:	f7 e0       	ldi	r31, 0x07	; 7
    1238:	31 97       	sbiw	r30, 0x01	; 1
    123a:	f1 f7       	brne	.-4      	; 0x1238 <USB_Host_ResetDevice+0x76>
    123c:	00 c0       	rjmp	.+0      	; 0x123e <USB_Host_ResetDevice+0x7c>
    123e:	00 00       	nop
    1240:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
    1242:	49 f7       	brne	.-46     	; 0x1216 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
    1244:	21 15       	cp	r18, r1
    1246:	31 05       	cpc	r19, r1
    1248:	29 f0       	breq	.+10     	; 0x1254 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    124a:	20 91 a0 00 	lds	r18, 0x00A0
    124e:	20 62       	ori	r18, 0x20	; 32
    1250:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	29 f4       	brne	.+10     	; 0x1262 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1258:	80 91 9e 00 	lds	r24, 0x009E
    125c:	8e 7f       	andi	r24, 0xFE	; 254
    125e:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1262:	80 91 a0 00 	lds	r24, 0x00A0
    1266:	82 60       	ori	r24, 0x02	; 2
    1268:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
    126c:	08 95       	ret

0000126e <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    126e:	40 91 9e 00 	lds	r20, 0x009E
    1272:	50 e0       	ldi	r21, 0x00	; 0
    1274:	41 70       	andi	r20, 0x01	; 1
    1276:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1278:	20 91 a0 00 	lds	r18, 0x00A0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	20 72       	andi	r18, 0x20	; 32
    1280:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    1282:	90 91 a0 00 	lds	r25, 0x00A0
    1286:	9f 7d       	andi	r25, 0xDF	; 223
    1288:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    128c:	90 91 9f 00 	lds	r25, 0x009F
    1290:	9f 7d       	andi	r25, 0xDF	; 223
    1292:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1296:	90 91 9e 00 	lds	r25, 0x009E
    129a:	91 60       	ori	r25, 0x01	; 1
    129c:	90 93 9e 00 	sts	0x009E, r25
    12a0:	26 c0       	rjmp	.+76     	; 0x12ee <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    12a2:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    12a6:	95 ff       	sbrs	r25, 5
    12a8:	06 c0       	rjmp	.+12     	; 0x12b6 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    12aa:	90 91 9f 00 	lds	r25, 0x009F
    12ae:	9f 7d       	andi	r25, 0xDF	; 223
    12b0:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
    12b4:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
    12b6:	90 91 02 05 	lds	r25, 0x0502
    12ba:	91 30       	cpi	r25, 0x01	; 1
    12bc:	d9 f0       	breq	.+54     	; 0x12f4 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
    12be:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
    12c2:	94 ff       	sbrs	r25, 4
    12c4:	09 c0       	rjmp	.+18     	; 0x12d8 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    12c6:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    12ca:	80 91 a6 00 	lds	r24, 0x00A6
    12ce:	8f 7e       	andi	r24, 0xEF	; 239
    12d0:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
    12d4:	82 e0       	ldi	r24, 0x02	; 2

			break;
    12d6:	0f c0       	rjmp	.+30     	; 0x12f6 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    12d8:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
    12dc:	91 ff       	sbrs	r25, 1
    12de:	07 c0       	rjmp	.+14     	; 0x12ee <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
    12e0:	80 91 a6 00 	lds	r24, 0x00A6
    12e4:	8d 7f       	andi	r24, 0xFD	; 253
    12e6:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
    12ea:	83 e0       	ldi	r24, 0x03	; 3

			break;
    12ec:	04 c0       	rjmp	.+8      	; 0x12f6 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    12ee:	88 23       	and	r24, r24
    12f0:	c1 f6       	brne	.-80     	; 0x12a2 <USB_Host_WaitMS+0x34>
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
    12f4:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
    12f6:	41 15       	cp	r20, r1
    12f8:	51 05       	cpc	r21, r1
    12fa:	29 f4       	brne	.+10     	; 0x1306 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    12fc:	90 91 9e 00 	lds	r25, 0x009E
    1300:	9e 7f       	andi	r25, 0xFE	; 254
    1302:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
    1306:	21 15       	cp	r18, r1
    1308:	31 05       	cpc	r19, r1
    130a:	29 f0       	breq	.+10     	; 0x1316 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    130c:	90 91 a0 00 	lds	r25, 0x00A0
    1310:	90 62       	ori	r25, 0x20	; 32
    1312:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
    1316:	08 95       	ret

00001318 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
    1318:	0f 93       	push	r16
    131a:	1f 93       	push	r17
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	28 97       	sbiw	r28, 0x08	; 8
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    1330:	80 91 02 05 	lds	r24, 0x0502
    1334:	85 30       	cpi	r24, 0x05	; 5
    1336:	09 f4       	brne	.+2      	; 0x133a <USB_Host_ProcessNextHostState+0x22>
    1338:	99 c0       	rjmp	.+306    	; 0x146c <USB_Host_ProcessNextHostState+0x154>
    133a:	86 30       	cpi	r24, 0x06	; 6
    133c:	68 f4       	brcc	.+26     	; 0x1358 <USB_Host_ProcessNextHostState+0x40>
    133e:	82 30       	cpi	r24, 0x02	; 2
    1340:	c1 f1       	breq	.+112    	; 0x13b2 <USB_Host_ProcessNextHostState+0x9a>
    1342:	83 30       	cpi	r24, 0x03	; 3
    1344:	18 f4       	brcc	.+6      	; 0x134c <USB_Host_ProcessNextHostState+0x34>
    1346:	88 23       	and	r24, r24
    1348:	a1 f0       	breq	.+40     	; 0x1372 <USB_Host_ProcessNextHostState+0x5a>
    134a:	07 c1       	rjmp	.+526    	; 0x155a <USB_Host_ProcessNextHostState+0x242>
    134c:	83 30       	cpi	r24, 0x03	; 3
    134e:	d9 f1       	breq	.+118    	; 0x13c6 <USB_Host_ProcessNextHostState+0xae>
    1350:	84 30       	cpi	r24, 0x04	; 4
    1352:	09 f0       	breq	.+2      	; 0x1356 <USB_Host_ProcessNextHostState+0x3e>
    1354:	02 c1       	rjmp	.+516    	; 0x155a <USB_Host_ProcessNextHostState+0x242>
    1356:	62 c0       	rjmp	.+196    	; 0x141c <USB_Host_ProcessNextHostState+0x104>
    1358:	87 30       	cpi	r24, 0x07	; 7
    135a:	09 f4       	brne	.+2      	; 0x135e <USB_Host_ProcessNextHostState+0x46>
    135c:	9e c0       	rjmp	.+316    	; 0x149a <USB_Host_ProcessNextHostState+0x182>
    135e:	87 30       	cpi	r24, 0x07	; 7
    1360:	08 f4       	brcc	.+2      	; 0x1364 <USB_Host_ProcessNextHostState+0x4c>
    1362:	8f c0       	rjmp	.+286    	; 0x1482 <USB_Host_ProcessNextHostState+0x16a>
    1364:	88 30       	cpi	r24, 0x08	; 8
    1366:	09 f4       	brne	.+2      	; 0x136a <USB_Host_ProcessNextHostState+0x52>
    1368:	b8 c0       	rjmp	.+368    	; 0x14da <USB_Host_ProcessNextHostState+0x1c2>
    136a:	89 30       	cpi	r24, 0x09	; 9
    136c:	09 f0       	breq	.+2      	; 0x1370 <USB_Host_ProcessNextHostState+0x58>
    136e:	f5 c0       	rjmp	.+490    	; 0x155a <USB_Host_ProcessNextHostState+0x242>
    1370:	d9 c0       	rjmp	.+434    	; 0x1524 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    1372:	00 91 1a 01 	lds	r16, 0x011A
    1376:	10 91 1b 01 	lds	r17, 0x011B
    137a:	01 15       	cp	r16, r1
    137c:	11 05       	cpc	r17, r1
    137e:	09 f4       	brne	.+2      	; 0x1382 <USB_Host_ProcessNextHostState+0x6a>
    1380:	ec c0       	rjmp	.+472    	; 0x155a <USB_Host_ProcessNextHostState+0x242>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	74 df       	rcall	.-280    	; 0x126e <USB_Host_WaitMS>
    1386:	68 2f       	mov	r22, r24
    1388:	88 23       	and	r24, r24
    138a:	31 f0       	breq	.+12     	; 0x1398 <USB_Host_ProcessNextHostState+0x80>
    138c:	80 91 1c 01 	lds	r24, 0x011C
				{
					USB_HostState = PostWaitState;
    1390:	80 93 02 05 	sts	0x0502, r24
    1394:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
    1396:	d3 c0       	rjmp	.+422    	; 0x153e <USB_Host_ProcessNextHostState+0x226>
					break;
    1398:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
    139a:	10 40       	sbci	r17, 0x00	; 0
    139c:	10 93 1b 01 	sts	0x011B, r17
    13a0:	00 93 1a 01 	sts	0x011A, r16
    13a4:	01 15       	cp	r16, r1
    13a6:	11 05       	cpc	r17, r1
    13a8:	09 f0       	breq	.+2      	; 0x13ac <USB_Host_ProcessNextHostState+0x94>
    13aa:	d7 c0       	rjmp	.+430    	; 0x155a <USB_Host_ProcessNextHostState+0x242>
    13ac:	80 91 1c 01 	lds	r24, 0x011C
				  USB_HostState = PostWaitState;
    13b0:	07 c0       	rjmp	.+14     	; 0x13c0 <USB_Host_ProcessNextHostState+0xa8>
    13b2:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    13b4:	93 e0       	ldi	r25, 0x03	; 3
    13b6:	90 93 1b 01 	sts	0x011B, r25
    13ba:	80 93 1a 01 	sts	0x011A, r24
    13be:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    13c0:	80 93 02 05 	sts	0x0502, r24
    13c4:	ca c0       	rjmp	.+404    	; 0x155a <USB_Host_ProcessNextHostState+0x242>
			break;
    13c6:	80 91 1a 01 	lds	r24, 0x011A
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    13ca:	90 91 1b 01 	lds	r25, 0x011B
    13ce:	9c 01       	movw	r18, r24
    13d0:	21 50       	subi	r18, 0x01	; 1
    13d2:	30 40       	sbci	r19, 0x00	; 0
    13d4:	30 93 1b 01 	sts	0x011B, r19
    13d8:	20 93 1a 01 	sts	0x011A, r18
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	39 f0       	breq	.+14     	; 0x13ee <USB_Host_ProcessNextHostState+0xd6>
    13e0:	8f ec       	ldi	r24, 0xCF	; 207
    13e2:	97 e0       	ldi	r25, 0x07	; 7
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	f1 f7       	brne	.-4      	; 0x13e4 <USB_Host_ProcessNextHostState+0xcc>
    13e8:	00 c0       	rjmp	.+0      	; 0x13ea <USB_Host_ProcessNextHostState+0xd2>
    13ea:	00 00       	nop
    13ec:	b6 c0       	rjmp	.+364    	; 0x155a <USB_Host_ProcessNextHostState+0x242>
    13ee:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    13f0:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    13f4:	80 61       	ori	r24, 0x10	; 16
    13f6:	80 93 d8 00 	sts	0x00D8, r24
    13fa:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    13fe:	8b 7f       	andi	r24, 0xFB	; 251
    1400:	80 93 dd 00 	sts	0x00DD, r24
    1404:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
    1408:	80 61       	ori	r24, 0x10	; 16
    140a:	80 93 d7 00 	sts	0x00D7, r24
    140e:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    1412:	82 60       	ori	r24, 0x02	; 2
    1414:	80 93 dd 00 	sts	0x00DD, r24
    1418:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    141a:	d2 cf       	rjmp	.-92     	; 0x13c0 <USB_Host_ProcessNextHostState+0xa8>
    141c:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    1420:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    1422:	9b c0       	rjmp	.+310    	; 0x155a <USB_Host_ProcessNextHostState+0x242>
    1424:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1428:	8e 7f       	andi	r24, 0xFE	; 254
    142a:	80 93 9f 00 	sts	0x009F, r24
    142e:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1432:	8d 7f       	andi	r24, 0xFD	; 253
    1434:	80 93 9f 00 	sts	0x009F, r24
    1438:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    143c:	8d 7f       	andi	r24, 0xFD	; 253
    143e:	80 93 df 00 	sts	0x00DF, r24
    1442:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    1446:	82 60       	ori	r24, 0x02	; 2
    1448:	80 93 de 00 	sts	0x00DE, r24
    144c:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1450:	81 60       	ori	r24, 0x01	; 1
    1452:	80 93 9e 00 	sts	0x009E, r24
    1456:	48 d1       	rcall	.+656    	; 0x16e8 <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    1458:	10 92 02 05 	sts	0x0502, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    145c:	84 e6       	ldi	r24, 0x64	; 100
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	90 93 1b 01 	sts	0x011B, r25
    1464:	80 93 1a 01 	sts	0x011A, r24
    1468:	85 e0       	ldi	r24, 0x05	; 5
    146a:	59 c0       	rjmp	.+178    	; 0x151e <USB_Host_ProcessNextHostState+0x206>
    146c:	aa de       	rcall	.-684    	; 0x11c2 <USB_Host_ResetDevice>
    146e:	10 92 02 05 	sts	0x0502, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    1472:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	90 93 1b 01 	sts	0x011B, r25
    147a:	80 93 1a 01 	sts	0x011A, r24
    147e:	86 e0       	ldi	r24, 0x06	; 6
    1480:	4e c0       	rjmp	.+156    	; 0x151e <USB_Host_ProcessNextHostState+0x206>
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	60 e0       	ldi	r22, 0x00	; 0
    1486:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    1488:	20 e4       	ldi	r18, 0x40	; 64
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	01 e0       	ldi	r16, 0x01	; 1
    148e:	c7 d0       	rcall	.+398    	; 0x161e <Pipe_ConfigurePipe>
    1490:	88 23       	and	r24, r24
    1492:	09 f4       	brne	.+2      	; 0x1496 <USB_Host_ProcessNextHostState+0x17e>
    1494:	50 c0       	rjmp	.+160    	; 0x1536 <USB_Host_ProcessNextHostState+0x21e>
    1496:	87 e0       	ldi	r24, 0x07	; 7
    1498:	93 cf       	rjmp	.-218    	; 0x13c0 <USB_Host_ProcessNextHostState+0xa8>
    149a:	aa ef       	ldi	r26, 0xFA	; 250
    149c:	b4 e0       	ldi	r27, 0x04	; 4
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    149e:	e0 e0       	ldi	r30, 0x00	; 0
    14a0:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    14a2:	88 e0       	ldi	r24, 0x08	; 8
    14a4:	01 90       	ld	r0, Z+
    14a6:	0d 92       	st	X+, r0
    14a8:	81 50       	subi	r24, 0x01	; 1
    14aa:	e1 f7       	brne	.-8      	; 0x14a4 <USB_Host_ProcessNextHostState+0x18c>
    14ac:	10 92 a7 00 	sts	0x00A7, r1
    14b0:	ce 01       	movw	r24, r28
    14b2:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    14b4:	3e d3       	rcall	.+1660   	; 0x1b32 <USB_Host_SendControlRequest>
    14b6:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    14b8:	88 23       	and	r24, r24
    14ba:	09 f0       	breq	.+2      	; 0x14be <USB_Host_ProcessNextHostState+0x1a6>
    14bc:	3f c0       	rjmp	.+126    	; 0x153c <USB_Host_ProcessNextHostState+0x224>
    14be:	88 85       	ldd	r24, Y+8	; 0x08
    14c0:	80 93 10 01 	sts	0x0110, r24
    14c4:	7e de       	rcall	.-772    	; 0x11c2 <USB_Host_ResetDevice>
    14c6:	10 92 02 05 	sts	0x0502, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    14ca:	88 ec       	ldi	r24, 0xC8	; 200
    14cc:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
    14ce:	90 93 1b 01 	sts	0x011B, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    14d2:	80 93 1a 01 	sts	0x011A, r24
    14d6:	88 e0       	ldi	r24, 0x08	; 8
    14d8:	22 c0       	rjmp	.+68     	; 0x151e <USB_Host_ProcessNextHostState+0x206>
    14da:	20 91 10 01 	lds	r18, 0x0110
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    14e6:	01 e0       	ldi	r16, 0x01	; 1
    14e8:	9a d0       	rcall	.+308    	; 0x161e <Pipe_ConfigurePipe>
    14ea:	88 23       	and	r24, r24
    14ec:	21 f1       	breq	.+72     	; 0x1536 <USB_Host_ProcessNextHostState+0x21e>
    14ee:	aa ef       	ldi	r26, 0xFA	; 250
    14f0:	b4 e0       	ldi	r27, 0x04	; 4
    14f2:	e8 e0       	ldi	r30, 0x08	; 8
    14f4:	f1 e0       	ldi	r31, 0x01	; 1
    14f6:	88 e0       	ldi	r24, 0x08	; 8
    14f8:	01 90       	ld	r0, Z+
    14fa:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    14fc:	81 50       	subi	r24, 0x01	; 1
    14fe:	e1 f7       	brne	.-8      	; 0x14f8 <USB_Host_ProcessNextHostState+0x1e0>
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	16 d3       	rcall	.+1580   	; 0x1b32 <USB_Host_SendControlRequest>
    1506:	68 2f       	mov	r22, r24
    1508:	88 23       	and	r24, r24
    150a:	c1 f4       	brne	.+48     	; 0x153c <USB_Host_ProcessNextHostState+0x224>
    150c:	10 92 02 05 	sts	0x0502, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1510:	84 e6       	ldi	r24, 0x64	; 100
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	90 93 1b 01 	sts	0x011B, r25
    1518:	80 93 1a 01 	sts	0x011A, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    151c:	89 e0       	ldi	r24, 0x09	; 9
    151e:	80 93 1c 01 	sts	0x011C, r24
    1522:	1b c0       	rjmp	.+54     	; 0x155a <USB_Host_ProcessNextHostState+0x242>
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	80 93 a1 00 	sts	0x00A1, r24
    152a:	8a e0       	ldi	r24, 0x0A	; 10
    152c:	80 93 02 05 	sts	0x0502, r24
    1530:	0e 94 c4 01 	call	0x388	; 0x388 <EVENT_USB_Host_DeviceEnumerationComplete>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    1534:	12 c0       	rjmp	.+36     	; 0x155a <USB_Host_ProcessNextHostState+0x242>
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	84 e0       	ldi	r24, 0x04	; 4
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    153a:	01 c0       	rjmp	.+2      	; 0x153e <USB_Host_ProcessNextHostState+0x226>
    153c:	83 e0       	ldi	r24, 0x03	; 3
    153e:	90 91 02 05 	lds	r25, 0x0502

			EVENT_USB_Host_DeviceEnumerationComplete();
    1542:	91 30       	cpi	r25, 0x01	; 1
			break;
    1544:	51 f0       	breq	.+20     	; 0x155a <USB_Host_ProcessNextHostState+0x242>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    1546:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <EVENT_USB_Host_DeviceEnumerationFailed>
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    154a:	80 91 dd 00 	lds	r24, 0x00DD

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    154e:	81 60       	ori	r24, 0x01	; 1
    1550:	80 93 dd 00 	sts	0x00DD, r24
    1554:	0e 94 be 01 	call	0x37c	; 0x37c <EVENT_USB_Host_DeviceUnattached>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    1558:	21 d1       	rcall	.+578    	; 0x179c <USB_ResetInterface>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    155a:	28 96       	adiw	r28, 0x08	; 8
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	df 91       	pop	r29

		USB_ResetInterface();
    1568:	cf 91       	pop	r28
    156a:	1f 91       	pop	r17
	}
}
    156c:	0f 91       	pop	r16
    156e:	08 95       	ret

00001570 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1570:	af 92       	push	r10
    1572:	bf 92       	push	r11
    1574:	cf 92       	push	r12
    1576:	df 92       	push	r13
    1578:	ff 92       	push	r15
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	5c 01       	movw	r10, r24
    1584:	eb 01       	movw	r28, r22
    1586:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1588:	80 91 aa 00 	lds	r24, 0x00AA
    158c:	8f 7c       	andi	r24, 0xCF	; 207
    158e:	80 61       	ori	r24, 0x10	; 16
    1590:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1594:	bd d0       	rcall	.+378    	; 0x1710 <Pipe_WaitUntilReady>
    1596:	f8 2e       	mov	r15, r24
    1598:	88 23       	and	r24, r24
    159a:	b1 f5       	brne	.+108    	; 0x1608 <Pipe_Read_Stream_LE+0x98>
    159c:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    159e:	d1 04       	cpc	r13, r1
    15a0:	41 f0       	breq	.+16     	; 0x15b2 <Pipe_Read_Stream_LE+0x42>
    15a2:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
    15a4:	00 81       	ld	r16, Z
    15a6:	11 81       	ldd	r17, Z+1	; 0x01
    15a8:	c0 1b       	sub	r28, r16
    15aa:	d1 0b       	sbc	r29, r17
    15ac:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    15ae:	1b 1d       	adc	r17, r11
    15b0:	01 c0       	rjmp	.+2      	; 0x15b4 <Pipe_Read_Stream_LE+0x44>
    15b2:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    15b4:	aa 24       	eor	r10, r10
    15b6:	bb 24       	eor	r11, r11
    15b8:	23 c0       	rjmp	.+70     	; 0x1600 <Pipe_Read_Stream_LE+0x90>
    15ba:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    15be:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    15c0:	16 c0       	rjmp	.+44     	; 0x15ee <Pipe_Read_Stream_LE+0x7e>
    15c2:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    15c6:	8e 77       	andi	r24, 0x7E	; 126
    15c8:	80 93 a6 00 	sts	0x00A6, r24
    15cc:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    15ce:	d1 04       	cpc	r13, r1
    15d0:	51 f0       	breq	.+20     	; 0x15e6 <Pipe_Read_Stream_LE+0x76>
    15d2:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
    15d4:	80 81       	ld	r24, Z
    15d6:	91 81       	ldd	r25, Z+1	; 0x01
    15d8:	8a 0d       	add	r24, r10
    15da:	9b 1d       	adc	r25, r11
    15dc:	91 83       	std	Z+1, r25	; 0x01
    15de:	80 83       	st	Z, r24
    15e0:	64 e0       	ldi	r22, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
    15e2:	f6 2e       	mov	r15, r22
    15e4:	11 c0       	rjmp	.+34     	; 0x1608 <Pipe_Read_Stream_LE+0x98>
    15e6:	94 d0       	rcall	.+296    	; 0x1710 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    15e8:	88 23       	and	r24, r24
    15ea:	51 f0       	breq	.+20     	; 0x1600 <Pipe_Read_Stream_LE+0x90>
    15ec:	0c c0       	rjmp	.+24     	; 0x1606 <Pipe_Read_Stream_LE+0x96>
    15ee:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    15f2:	f8 01       	movw	r30, r16
    15f4:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    15f6:	8f 01       	movw	r16, r30
    15f8:	21 97       	sbiw	r28, 0x01	; 1
    15fa:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    15fc:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
    15fe:	b1 1c       	adc	r11, r1
    1600:	20 97       	sbiw	r28, 0x00	; 0
    1602:	d9 f6       	brne	.-74     	; 0x15ba <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1604:	01 c0       	rjmp	.+2      	; 0x1608 <Pipe_Read_Stream_LE+0x98>
    1606:	f8 2e       	mov	r15, r24
    1608:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    160a:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    160c:	cf 91       	pop	r28
    160e:	1f 91       	pop	r17
    1610:	0f 91       	pop	r16
    1612:	ff 90       	pop	r15
    1614:	df 90       	pop	r13
    1616:	cf 90       	pop	r12
    1618:	bf 90       	pop	r11
    161a:	af 90       	pop	r10
    161c:	08 95       	ret

0000161e <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    161e:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    1620:	58 2f       	mov	r21, r24
    1622:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    1624:	87 ff       	sbrs	r24, 7
    1626:	02 c0       	rjmp	.+4      	; 0x162c <Pipe_ConfigurePipe+0xe>
    1628:	80 e1       	ldi	r24, 0x10	; 16
    162a:	01 c0       	rjmp	.+2      	; 0x162e <Pipe_ConfigurePipe+0x10>
    162c:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
    162e:	57 30       	cpi	r21, 0x07	; 7
    1630:	08 f0       	brcs	.+2      	; 0x1634 <Pipe_ConfigurePipe+0x16>
    1632:	57 c0       	rjmp	.+174    	; 0x16e2 <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
    1634:	66 23       	and	r22, r22
    1636:	09 f4       	brne	.+2      	; 0x163a <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
    1638:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    163a:	4f 70       	andi	r20, 0x0F	; 15
    163c:	62 95       	swap	r22
    163e:	66 0f       	add	r22, r22
    1640:	66 0f       	add	r22, r22
    1642:	60 7c       	andi	r22, 0xC0	; 192
    1644:	64 2b       	or	r22, r20
    1646:	68 2b       	or	r22, r24
    1648:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    164a:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    164c:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    1650:	45 17       	cp	r20, r21
    1652:	a9 f4       	brne	.+42     	; 0x167e <Pipe_ConfigurePipe+0x60>
    1654:	04 c0       	rjmp	.+8      	; 0x165e <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    1656:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	03 c0       	rjmp	.+6      	; 0x1664 <Pipe_ConfigurePipe+0x46>
    165e:	88 e0       	ldi	r24, 0x08	; 8
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    1664:	82 17       	cp	r24, r18
    1666:	93 07       	cpc	r25, r19
    1668:	10 f4       	brcc	.+4      	; 0x166e <Pipe_ConfigurePipe+0x50>
    166a:	75 30       	cpi	r23, 0x05	; 5
    166c:	a1 f7       	brne	.-24     	; 0x1656 <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    166e:	87 2f       	mov	r24, r23
    1670:	82 95       	swap	r24
    1672:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    1674:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    1676:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    1678:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    167a:	e0 e0       	ldi	r30, 0x00	; 0
    167c:	08 c0       	rjmp	.+16     	; 0x168e <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    167e:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    1682:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    1686:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
    168a:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    168e:	81 ff       	sbrs	r24, 1
    1690:	20 c0       	rjmp	.+64     	; 0x16d2 <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1692:	90 91 a9 00 	lds	r25, 0x00A9
    1696:	9e 7f       	andi	r25, 0xFE	; 254
    1698:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    169c:	90 91 ab 00 	lds	r25, 0x00AB
    16a0:	9d 7f       	andi	r25, 0xFD	; 253
    16a2:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    16a6:	90 91 a9 00 	lds	r25, 0x00A9
    16aa:	91 60       	ori	r25, 0x01	; 1
    16ac:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    16b0:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    16b4:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    16b8:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
    16bc:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    16c0:	80 91 a9 00 	lds	r24, 0x00A9
    16c4:	80 62       	ori	r24, 0x20	; 32
    16c6:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    16ca:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    16ce:	87 ff       	sbrs	r24, 7
    16d0:	08 c0       	rjmp	.+16     	; 0x16e2 <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    16d2:	4f 5f       	subi	r20, 0xFF	; 255
    16d4:	47 30       	cpi	r20, 0x07	; 7
    16d6:	09 f0       	breq	.+2      	; 0x16da <Pipe_ConfigurePipe+0xbc>
    16d8:	b9 cf       	rjmp	.-142    	; 0x164c <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    16da:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	01 c0       	rjmp	.+2      	; 0x16e4 <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
    16e2:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    16e4:	0f 91       	pop	r16
    16e6:	08 95       	ret

000016e8 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    16e8:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    16f2:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    16f6:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    16fa:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    16fe:	90 91 a9 00 	lds	r25, 0x00A9
    1702:	9e 7f       	andi	r25, 0xFE	; 254
    1704:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1708:	8f 5f       	subi	r24, 0xFF	; 255
    170a:	87 30       	cpi	r24, 0x07	; 7
    170c:	81 f7       	brne	.-32     	; 0x16ee <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    170e:	08 95       	ret

00001710 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1710:	80 91 a2 00 	lds	r24, 0x00A2
    1714:	90 91 a3 00 	lds	r25, 0x00A3
    1718:	45 e6       	ldi	r20, 0x65	; 101
    171a:	01 c0       	rjmp	.+2      	; 0x171e <Pipe_WaitUntilReady+0xe>
    171c:	c9 01       	movw	r24, r18
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    171e:	20 91 aa 00 	lds	r18, 0x00AA
    1722:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1724:	20 31       	cpi	r18, 0x10	; 16
    1726:	29 f4       	brne	.+10     	; 0x1732 <Pipe_WaitUntilReady+0x22>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1728:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    172c:	20 ff       	sbrs	r18, 0
    172e:	05 c0       	rjmp	.+10     	; 0x173a <Pipe_WaitUntilReady+0x2a>
    1730:	17 c0       	rjmp	.+46     	; 0x1760 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1732:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    1736:	22 fd       	sbrc	r18, 2
    1738:	13 c0       	rjmp	.+38     	; 0x1760 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    173a:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    173e:	21 fd       	sbrc	r18, 1
    1740:	11 c0       	rjmp	.+34     	; 0x1764 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    1742:	20 91 02 05 	lds	r18, 0x0502
    1746:	21 30       	cpi	r18, 0x01	; 1
    1748:	79 f0       	breq	.+30     	; 0x1768 <Pipe_WaitUntilReady+0x58>
    174a:	20 91 a2 00 	lds	r18, 0x00A2
    174e:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1752:	28 17       	cp	r18, r24
    1754:	39 07       	cpc	r19, r25
    1756:	19 f3       	breq	.-58     	; 0x171e <Pipe_WaitUntilReady+0xe>
    1758:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    175a:	01 f7       	brne	.-64     	; 0x171c <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_Timeout;
    175c:	83 e0       	ldi	r24, 0x03	; 3
    175e:	08 95       	ret
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    1768:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
    176a:	08 95       	ret

0000176c <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    176c:	75 d0       	rcall	.+234    	; 0x1858 <USB_INT_DisableAllInterrupts>
    176e:	7c d0       	rcall	.+248    	; 0x1868 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1770:	e0 ee       	ldi	r30, 0xE0	; 224
    1772:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1774:	80 81       	ld	r24, Z
    1776:	81 60       	ori	r24, 0x01	; 1
    1778:	80 83       	st	Z, r24
    177a:	e8 ed       	ldi	r30, 0xD8	; 216
    177c:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    177e:	80 81       	ld	r24, Z
    1780:	8f 77       	andi	r24, 0x7F	; 127
    1782:	80 83       	st	Z, r24
    1784:	19 bc       	out	0x29, r1	; 41
    1786:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1788:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    178a:	8c 91       	ld	r24, X
    178c:	8e 7f       	andi	r24, 0xFE	; 254
    178e:	8c 93       	st	X, r24
    1790:	80 81       	ld	r24, Z
    1792:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1794:	80 83       	st	Z, r24
    1796:	10 92 f9 04 	sts	0x04F9, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    179a:	08 95       	ret

0000179c <USB_ResetInterface>:
    179c:	5d d0       	rcall	.+186    	; 0x1858 <USB_INT_DisableAllInterrupts>
}
    179e:	64 d0       	rcall	.+200    	; 0x1868 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    17a0:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    17a4:	8f 77       	andi	r24, 0x7F	; 127
    17a6:	80 93 d8 00 	sts	0x00D8, r24
    17aa:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    17ae:	80 68       	ori	r24, 0x80	; 128
    17b0:	80 93 d8 00 	sts	0x00D8, r24
    17b4:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    17b8:	8f 7d       	andi	r24, 0xDF	; 223
    17ba:	80 93 d8 00 	sts	0x00D8, r24
    17be:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    17c2:	8f 77       	andi	r24, 0x7F	; 127
    17c4:	80 93 d7 00 	sts	0x00D7, r24
    17c8:	8c e0       	ldi	r24, 0x0C	; 12
    17ca:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    17cc:	8e e0       	ldi	r24, 0x0E	; 14
    17ce:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    17d0:	09 b4       	in	r0, 0x29	; 41
    17d2:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    17d4:	fd cf       	rjmp	.-6      	; 0x17d0 <USB_ResetInterface+0x34>
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	80 93 02 05 	sts	0x0502, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    17dc:	10 92 f8 04 	sts	0x04F8, r1
	USB_Host_ConfigurationNumber = 0;
    17e0:	80 e4       	ldi	r24, 0x40	; 64
    17e2:	80 93 10 01 	sts	0x0110, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    17e6:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    17ea:	80 64       	ori	r24, 0x40	; 64
    17ec:	80 93 d8 00 	sts	0x00D8, r24
    17f0:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    17f4:	81 60       	ori	r24, 0x01	; 1
    17f6:	80 93 dd 00 	sts	0x00DD, r24
    17fa:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    17fe:	84 60       	ori	r24, 0x04	; 4
    1800:	80 93 dd 00 	sts	0x00DD, r24
    1804:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
    1808:	8f 7e       	andi	r24, 0xEF	; 239
    180a:	80 93 d7 00 	sts	0x00D7, r24
    180e:	6f 9a       	sbi	0x0d, 7	; 13
    1810:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
    1812:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    1816:	81 60       	ori	r24, 0x01	; 1
    1818:	80 93 de 00 	sts	0x00DE, r24
    181c:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1820:	84 60       	ori	r24, 0x04	; 4
    1822:	80 93 de 00 	sts	0x00DE, r24
    1826:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    182a:	8e 7f       	andi	r24, 0xFE	; 254
    182c:	80 93 e0 00 	sts	0x00E0, r24
    1830:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1834:	80 61       	ori	r24, 0x10	; 16
    1836:	80 93 d8 00 	sts	0x00D8, r24
    183a:	08 95       	ret

0000183c <USB_Init>:
    183c:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    183e:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1840:	80 81       	ld	r24, Z
    1842:	8f 7e       	andi	r24, 0xEF	; 239
    1844:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1846:	e7 ed       	ldi	r30, 0xD7	; 215
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	81 60       	ori	r24, 0x01	; 1
    184e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	80 93 f9 04 	sts	0x04F9, r24

	USB_ResetInterface();
    1856:	a2 cf       	rjmp	.-188    	; 0x179c <USB_ResetInterface>

00001858 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1858:	e8 ed       	ldi	r30, 0xD8	; 216
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	8c 7f       	andi	r24, 0xFC	; 252
    1860:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    1862:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    1866:	08 95       	ret

00001868 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1868:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    186c:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    1870:	08 95       	ret

00001872 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1872:	1f 92       	push	r1
    1874:	0f 92       	push	r0
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	0f 92       	push	r0
    187a:	0b b6       	in	r0, 0x3b	; 59
    187c:	0f 92       	push	r0
    187e:	11 24       	eor	r1, r1
    1880:	2f 93       	push	r18
    1882:	3f 93       	push	r19
    1884:	4f 93       	push	r20
    1886:	5f 93       	push	r21
    1888:	6f 93       	push	r22
    188a:	7f 93       	push	r23
    188c:	8f 93       	push	r24
    188e:	9f 93       	push	r25
    1890:	af 93       	push	r26
    1892:	bf 93       	push	r27
    1894:	ef 93       	push	r30
    1896:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1898:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    189c:	85 ff       	sbrs	r24, 5
    189e:	0a c0       	rjmp	.+20     	; 0x18b4 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    18a0:	80 91 a0 00 	lds	r24, 0x00A0
    18a4:	85 ff       	sbrs	r24, 5
    18a6:	06 c0       	rjmp	.+12     	; 0x18b4 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    18a8:	80 91 9f 00 	lds	r24, 0x009F
    18ac:	8f 7d       	andi	r24, 0xDF	; 223
    18ae:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    18b2:	16 d1       	rcall	.+556    	; 0x1ae0 <USB_Event_Stub>
    18b4:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    18b8:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    18ba:	16 c0       	rjmp	.+44     	; 0x18e8 <__vector_10+0x76>
    18bc:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    18c0:	81 ff       	sbrs	r24, 1
    18c2:	12 c0       	rjmp	.+36     	; 0x18e8 <__vector_10+0x76>
    18c4:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    18c8:	8d 7f       	andi	r24, 0xFD	; 253
    18ca:	80 93 9f 00 	sts	0x009F, r24
    18ce:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    18d2:	8e 7f       	andi	r24, 0xFE	; 254
    18d4:	80 93 9f 00 	sts	0x009F, r24
    18d8:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    18dc:	8d 7f       	andi	r24, 0xFD	; 253
    18de:	80 93 a0 00 	sts	0x00A0, r24
    18e2:	0e 94 be 01 	call	0x37c	; 0x37c <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    18e6:	5a df       	rcall	.-332    	; 0x179c <USB_ResetInterface>

		USB_ResetInterface();
    18e8:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    18ec:	81 ff       	sbrs	r24, 1
    18ee:	17 c0       	rjmp	.+46     	; 0x191e <__vector_10+0xac>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    18f0:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    18f4:	81 ff       	sbrs	r24, 1
    18f6:	13 c0       	rjmp	.+38     	; 0x191e <__vector_10+0xac>
    18f8:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    18fc:	8d 7f       	andi	r24, 0xFD	; 253
    18fe:	80 93 df 00 	sts	0x00DF, r24
    1902:	77 98       	cbi	0x0e, 7	; 14
    1904:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1908:	81 60       	ori	r24, 0x01	; 1
    190a:	80 93 dd 00 	sts	0x00DD, r24
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	0e 94 49 02 	call	0x492	; 0x492 <EVENT_USB_Host_HostError>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1914:	0e 94 be 01 	call	0x37c	; 0x37c <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	80 93 02 05 	sts	0x0502, r24

		USB_HostState = HOST_STATE_Unattached;
    191e:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1922:	80 ff       	sbrs	r24, 0
    1924:	18 c0       	rjmp	.+48     	; 0x1956 <__vector_10+0xe4>
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1926:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    192a:	80 ff       	sbrs	r24, 0
    192c:	14 c0       	rjmp	.+40     	; 0x1956 <__vector_10+0xe4>
    192e:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1932:	8e 7f       	andi	r24, 0xFE	; 254
    1934:	80 93 df 00 	sts	0x00DF, r24
    1938:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    193c:	8e 7f       	andi	r24, 0xFE	; 254
    193e:	80 93 de 00 	sts	0x00DE, r24
    1942:	0e 94 b8 01 	call	0x370	; 0x370 <EVENT_USB_Host_DeviceAttached>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    1946:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    194a:	82 60       	ori	r24, 0x02	; 2
    194c:	80 93 a0 00 	sts	0x00A0, r24
    1950:	82 e0       	ldi	r24, 0x02	; 2
    1952:	80 93 02 05 	sts	0x0502, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1956:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    195a:	82 ff       	sbrs	r24, 2
    195c:	10 c0       	rjmp	.+32     	; 0x197e <__vector_10+0x10c>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    195e:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1962:	82 ff       	sbrs	r24, 2
    1964:	0c c0       	rjmp	.+24     	; 0x197e <__vector_10+0x10c>
    1966:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    196a:	8b 7f       	andi	r24, 0xFB	; 251
    196c:	80 93 df 00 	sts	0x00DF, r24
    1970:	82 e0       	ldi	r24, 0x02	; 2
    1972:	60 e0       	ldi	r22, 0x00	; 0
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1974:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <EVENT_USB_Host_DeviceEnumerationFailed>
    1978:	0e 94 be 01 	call	0x37c	; 0x37c <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    197c:	0f df       	rcall	.-482    	; 0x179c <USB_ResetInterface>
    197e:	ff 91       	pop	r31

		USB_ResetInterface();
    1980:	ef 91       	pop	r30
    1982:	bf 91       	pop	r27
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1984:	af 91       	pop	r26
    1986:	9f 91       	pop	r25
    1988:	8f 91       	pop	r24
    198a:	7f 91       	pop	r23
    198c:	6f 91       	pop	r22
    198e:	5f 91       	pop	r21
    1990:	4f 91       	pop	r20
    1992:	3f 91       	pop	r19
    1994:	2f 91       	pop	r18
    1996:	0f 90       	pop	r0
    1998:	0b be       	out	0x3b, r0	; 59
    199a:	0f 90       	pop	r0
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	0f 90       	pop	r0
    19a0:	1f 90       	pop	r1
    19a2:	18 95       	reti

000019a4 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    19a4:	cf 92       	push	r12
    19a6:	df 92       	push	r13
    19a8:	ef 92       	push	r14
    19aa:	ff 92       	push	r15
    19ac:	0f 93       	push	r16
    19ae:	1f 93       	push	r17
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	29 97       	sbiw	r28, 0x09	; 9
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	f8 94       	cli
    19be:	de bf       	out	0x3e, r29	; 62
    19c0:	0f be       	out	0x3f, r0	; 63
    19c2:	cd bf       	out	0x3d, r28	; 61
    19c4:	6b 01       	movw	r12, r22
    19c6:	8a 01       	movw	r16, r20
    19c8:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    19ca:	90 e8       	ldi	r25, 0x80	; 128
    19cc:	90 93 fa 04 	sts	0x04FA, r25
    19d0:	96 e0       	ldi	r25, 0x06	; 6
    19d2:	90 93 fb 04 	sts	0x04FB, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    19dc:	90 93 fd 04 	sts	0x04FD, r25
    19e0:	80 93 fc 04 	sts	0x04FC, r24
    19e4:	10 92 ff 04 	sts	0x04FF, r1
    19e8:	10 92 fe 04 	sts	0x04FE, r1
    19ec:	89 e0       	ldi	r24, 0x09	; 9
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	90 93 01 05 	sts	0x0501, r25
    19f4:	80 93 00 05 	sts	0x0500, r24
    19f8:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    19fc:	ce 01       	movw	r24, r28
    19fe:	01 96       	adiw	r24, 0x01	; 1
    1a00:	98 d0       	rcall	.+304    	; 0x1b32 <USB_Host_SendControlRequest>
    1a02:	88 23       	and	r24, r24
    1a04:	b9 f4       	brne	.+46     	; 0x1a34 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1a08:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0a:	f6 01       	movw	r30, r12
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	80 83       	st	Z, r24
    1a10:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
    1a12:	f9 06       	cpc	r15, r25
    1a14:	70 f0       	brcs	.+28     	; 0x1a32 <USB_Host_GetDeviceConfigDescriptor+0x8e>
    1a16:	90 93 01 05 	sts	0x0501, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1a1a:	80 93 00 05 	sts	0x0500, r24
    1a1e:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1a20:	88 d0       	rcall	.+272    	; 0x1b32 <USB_Host_SendControlRequest>
    1a22:	88 23       	and	r24, r24
    1a24:	39 f4       	brne	.+14     	; 0x1a34 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1a26:	f8 01       	movw	r30, r16
    1a28:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1a2a:	92 30       	cpi	r25, 0x02	; 2
    1a2c:	19 f0       	breq	.+6      	; 0x1a34 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1a2e:	86 e0       	ldi	r24, 0x06	; 6
    1a30:	01 c0       	rjmp	.+2      	; 0x1a34 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    1a32:	85 e0       	ldi	r24, 0x05	; 5
    1a34:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1a36:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	1f 91       	pop	r17
    1a46:	0f 91       	pop	r16
    1a48:	ff 90       	pop	r15
    1a4a:	ef 90       	pop	r14
    1a4c:	df 90       	pop	r13
    1a4e:	cf 90       	pop	r12
    1a50:	08 95       	ret

00001a52 <USB_GetNextDescriptorComp>:
    1a52:	af 92       	push	r10
    1a54:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1a56:	cf 92       	push	r12
    1a58:	df 92       	push	r13
    1a5a:	ef 92       	push	r14
    1a5c:	ff 92       	push	r15
    1a5e:	0f 93       	push	r16
    1a60:	1f 93       	push	r17
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	7c 01       	movw	r14, r24
    1a68:	8b 01       	movw	r16, r22
    1a6a:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1a6c:	28 c0       	rjmp	.+80     	; 0x1abe <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1a6e:	f8 01       	movw	r30, r16
    1a70:	c0 80       	ld	r12, Z
    1a72:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1a74:	f6 01       	movw	r30, r12
    1a76:	80 81       	ld	r24, Z
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	9e 01       	movw	r18, r28
    1a7c:	8c 17       	cp	r24, r28
    1a7e:	9d 07       	cpc	r25, r29
    1a80:	08 f4       	brcc	.+2      	; 0x1a84 <USB_GetNextDescriptorComp+0x32>
    1a82:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1a84:	c6 01       	movw	r24, r12
    1a86:	82 0f       	add	r24, r18
    1a88:	93 1f       	adc	r25, r19
    1a8a:	f8 01       	movw	r30, r16
    1a8c:	91 83       	std	Z+1, r25	; 0x01
    1a8e:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
    1a90:	f7 01       	movw	r30, r14
    1a92:	80 81       	ld	r24, Z
    1a94:	91 81       	ldd	r25, Z+1	; 0x01
    1a96:	82 1b       	sub	r24, r18
    1a98:	93 0b       	sbc	r25, r19
    1a9a:	91 83       	std	Z+1, r25	; 0x01
    1a9c:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1a9e:	f8 01       	movw	r30, r16
    1aa0:	80 81       	ld	r24, Z
    1aa2:	91 81       	ldd	r25, Z+1	; 0x01
    1aa4:	f5 01       	movw	r30, r10
    1aa6:	09 95       	icall
    1aa8:	82 30       	cpi	r24, 0x02	; 2
    1aaa:	49 f0       	breq	.+18     	; 0x1abe <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1aac:	81 30       	cpi	r24, 0x01	; 1
    1aae:	69 f4       	brne	.+26     	; 0x1aca <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	d1 82       	std	Z+1, r13	; 0x01
    1ab4:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
    1ab6:	f7 01       	movw	r30, r14
    1ab8:	d1 83       	std	Z+1, r29	; 0x01
    1aba:	c0 83       	st	Z, r28
    1abc:	06 c0       	rjmp	.+12     	; 0x1aca <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1abe:	f7 01       	movw	r30, r14
    1ac0:	c0 81       	ld	r28, Z
    1ac2:	d1 81       	ldd	r29, Z+1	; 0x01
    1ac4:	20 97       	sbiw	r28, 0x00	; 0
    1ac6:	99 f6       	brne	.-90     	; 0x1a6e <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1ac8:	82 e0       	ldi	r24, 0x02	; 2
}
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	1f 91       	pop	r17
    1ad0:	0f 91       	pop	r16
    1ad2:	ff 90       	pop	r15
    1ad4:	ef 90       	pop	r14
    1ad6:	df 90       	pop	r13
    1ad8:	cf 90       	pop	r12
    1ada:	bf 90       	pop	r11
    1adc:	af 90       	pop	r10
    1ade:	08 95       	ret

00001ae0 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1ae0:	08 95       	ret

00001ae2 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1ae2:	1f 93       	push	r17
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1aea:	c9 ee       	ldi	r28, 0xE9	; 233
    1aec:	d3 e0       	ldi	r29, 0x03	; 3
    1aee:	06 c0       	rjmp	.+12     	; 0x1afc <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	bd db       	rcall	.-2182   	; 0x126e <USB_Host_WaitMS>
    1af4:	88 23       	and	r24, r24
    1af6:	c9 f4       	brne	.+50     	; 0x1b2a <USB_Host_WaitForIOS+0x48>
    1af8:	21 97       	sbiw	r28, 0x01	; 1
    1afa:	b1 f0       	breq	.+44     	; 0x1b28 <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1afc:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1afe:	29 f4       	brne	.+10     	; 0x1b0a <USB_Host_WaitForIOS+0x28>
    1b00:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1b04:	83 ff       	sbrs	r24, 3
    1b06:	f4 cf       	rjmp	.-24     	; 0x1af0 <USB_Host_WaitForIOS+0xe>
    1b08:	0d c0       	rjmp	.+26     	; 0x1b24 <USB_Host_WaitForIOS+0x42>
    1b0a:	11 30       	cpi	r17, 0x01	; 1
    1b0c:	29 f4       	brne	.+10     	; 0x1b18 <USB_Host_WaitForIOS+0x36>
    1b0e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1b12:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1b14:	ed cf       	rjmp	.-38     	; 0x1af0 <USB_Host_WaitForIOS+0xe>
    1b16:	06 c0       	rjmp	.+12     	; 0x1b24 <USB_Host_WaitForIOS+0x42>
    1b18:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1b1a:	51 f7       	brne	.-44     	; 0x1af0 <USB_Host_WaitForIOS+0xe>
    1b1c:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1b20:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1b22:	e6 cf       	rjmp	.-52     	; 0x1af0 <USB_Host_WaitForIOS+0xe>
    1b24:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1b26:	01 c0       	rjmp	.+2      	; 0x1b2a <USB_Host_WaitForIOS+0x48>
    1b28:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1b2a:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
    1b2c:	cf 91       	pop	r28
    1b2e:	1f 91       	pop	r17
    1b30:	08 95       	ret

00001b32 <USB_Host_SendControlRequest>:
    1b32:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1b34:	ff 92       	push	r15
    1b36:	0f 93       	push	r16
    1b38:	1f 93       	push	r17
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1b40:	e0 90 9e 00 	lds	r14, 0x009E
    1b44:	ff 24       	eor	r15, r15
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	e8 22       	and	r14, r24
    1b4a:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1b4c:	00 91 00 05 	lds	r16, 0x0500
    1b50:	10 91 01 05 	lds	r17, 0x0501
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1b54:	80 91 9e 00 	lds	r24, 0x009E
    1b58:	81 60       	ori	r24, 0x01	; 1
    1b5a:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	86 db       	rcall	.-2292   	; 0x126e <USB_Host_WaitMS>
    1b62:	88 23       	and	r24, r24
    1b64:	09 f0       	breq	.+2      	; 0x1b68 <USB_Host_SendControlRequest+0x36>
    1b66:	ca c0       	rjmp	.+404    	; 0x1cfc <USB_Host_SendControlRequest+0x1ca>
    1b68:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1b6c:	8f 7c       	andi	r24, 0xCF	; 207
    1b6e:	80 93 aa 00 	sts	0x00AA, r24
    1b72:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1b76:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    1b7a:	8f 7e       	andi	r24, 0xEF	; 239
    1b7c:	80 93 a6 00 	sts	0x00A6, r24
    1b80:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1b84:	8f 7b       	andi	r24, 0xBF	; 191
    1b86:	80 93 a9 00 	sts	0x00A9, r24
    1b8a:	88 e0       	ldi	r24, 0x08	; 8
    1b8c:	ea ef       	ldi	r30, 0xFA	; 250
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1b8e:	f4 e0       	ldi	r31, 0x04	; 4
    1b90:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1b92:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1b96:	81 50       	subi	r24, 0x01	; 1
    1b98:	d9 f7       	brne	.-10     	; 0x1b90 <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1b9a:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1b9e:	87 77       	andi	r24, 0x77	; 119
    1ba0:	80 93 a6 00 	sts	0x00A6, r24
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1ba6:	9d df       	rcall	.-198    	; 0x1ae2 <USB_Host_WaitForIOS>
    1ba8:	88 23       	and	r24, r24
    1baa:	09 f0       	breq	.+2      	; 0x1bae <USB_Host_SendControlRequest+0x7c>
    1bac:	a7 c0       	rjmp	.+334    	; 0x1cfc <USB_Host_SendControlRequest+0x1ca>
    1bae:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1bb2:	80 64       	ori	r24, 0x40	; 64
    1bb4:	80 93 a9 00 	sts	0x00A9, r24
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	59 db       	rcall	.-2382   	; 0x126e <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1bbc:	88 23       	and	r24, r24
    1bbe:	09 f0       	breq	.+2      	; 0x1bc2 <USB_Host_SendControlRequest+0x90>
    1bc0:	9d c0       	rjmp	.+314    	; 0x1cfc <USB_Host_SendControlRequest+0x1ca>
    1bc2:	80 91 fa 04 	lds	r24, 0x04FA
    1bc6:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1bc8:	4f c0       	rjmp	.+158    	; 0x1c68 <USB_Host_SendControlRequest+0x136>
    1bca:	80 91 aa 00 	lds	r24, 0x00AA
    1bce:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1bd0:	80 61       	ori	r24, 0x10	; 16
    1bd2:	80 93 aa 00 	sts	0x00AA, r24
    1bd6:	20 97       	sbiw	r28, 0x00	; 0
    1bd8:	61 f5       	brne	.+88     	; 0x1c32 <USB_Host_SendControlRequest+0x100>
    1bda:	2e c0       	rjmp	.+92     	; 0x1c38 <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1bdc:	80 91 a9 00 	lds	r24, 0x00A9
    1be0:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1be2:	80 93 a9 00 	sts	0x00A9, r24
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	7c df       	rcall	.-264    	; 0x1ae2 <USB_Host_WaitForIOS>
    1bea:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1bec:	09 f0       	breq	.+2      	; 0x1bf0 <USB_Host_SendControlRequest+0xbe>
    1bee:	86 c0       	rjmp	.+268    	; 0x1cfc <USB_Host_SendControlRequest+0x1ca>
    1bf0:	80 91 f6 00 	lds	r24, 0x00F6
    1bf4:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	41 f4       	brne	.+16     	; 0x1c0c <USB_Host_SendControlRequest+0xda>
    1bfc:	00 e0       	ldi	r16, 0x00	; 0
    1bfe:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1c00:	05 c0       	rjmp	.+10     	; 0x1c0c <USB_Host_SendControlRequest+0xda>
    1c02:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
    1c06:	89 93       	st	Y+, r24
    1c08:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1c0a:	10 40       	sbci	r17, 0x00	; 0
    1c0c:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
    1c10:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1c14:	00 97       	sbiw	r24, 0x00	; 0
    1c16:	19 f0       	breq	.+6      	; 0x1c1e <USB_Host_SendControlRequest+0xec>
    1c18:	01 15       	cp	r16, r1
    1c1a:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1c1c:	91 f7       	brne	.-28     	; 0x1c02 <USB_Host_SendControlRequest+0xd0>
    1c1e:	80 91 a9 00 	lds	r24, 0x00A9
    1c22:	80 64       	ori	r24, 0x40	; 64
    1c24:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1c28:	80 91 a6 00 	lds	r24, 0x00A6
    1c2c:	8e 77       	andi	r24, 0x7E	; 126
    1c2e:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1c32:	01 15       	cp	r16, r1
    1c34:	11 05       	cpc	r17, r1
    1c36:	91 f6       	brne	.-92     	; 0x1bdc <USB_Host_SendControlRequest+0xaa>
    1c38:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1c3c:	8f 7c       	andi	r24, 0xCF	; 207
    1c3e:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1c40:	80 93 aa 00 	sts	0x00AA, r24
    1c44:	80 91 a9 00 	lds	r24, 0x00A9
    1c48:	8f 7b       	andi	r24, 0xBF	; 191
    1c4a:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c4e:	82 e0       	ldi	r24, 0x02	; 2
    1c50:	48 df       	rcall	.-368    	; 0x1ae2 <USB_Host_WaitForIOS>
    1c52:	88 23       	and	r24, r24
    1c54:	09 f0       	breq	.+2      	; 0x1c58 <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1c56:	52 c0       	rjmp	.+164    	; 0x1cfc <USB_Host_SendControlRequest+0x1ca>
    1c58:	80 91 a6 00 	lds	r24, 0x00A6
    1c5c:	8b 77       	andi	r24, 0x7B	; 123
    1c5e:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1c62:	82 e0       	ldi	r24, 0x02	; 2
    1c64:	3e df       	rcall	.-388    	; 0x1ae2 <USB_Host_WaitForIOS>
    1c66:	4a c0       	rjmp	.+148    	; 0x1cfc <USB_Host_SendControlRequest+0x1ca>
    1c68:	20 97       	sbiw	r28, 0x00	; 0
    1c6a:	a1 f1       	breq	.+104    	; 0x1cd4 <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1c6c:	80 91 aa 00 	lds	r24, 0x00AA
    1c70:	8f 7c       	andi	r24, 0xCF	; 207
    1c72:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1c74:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1c78:	80 91 a9 00 	lds	r24, 0x00A9
    1c7c:	8f 7b       	andi	r24, 0xBF	; 191
    1c7e:	80 93 a9 00 	sts	0x00A9, r24
    1c82:	1c c0       	rjmp	.+56     	; 0x1cbc <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c84:	2e df       	rcall	.-420    	; 0x1ae2 <USB_Host_WaitForIOS>
    1c86:	88 23       	and	r24, r24
    1c88:	c9 f5       	brne	.+114    	; 0x1cfc <USB_Host_SendControlRequest+0x1ca>
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	07 c0       	rjmp	.+14     	; 0x1c9c <USB_Host_SendControlRequest+0x16a>
    1c8e:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1c90:	ef 01       	movw	r28, r30
    1c92:	80 93 af 00 	sts	0x00AF, r24
    1c96:	01 50       	subi	r16, 0x01	; 1
    1c98:	10 40       	sbci	r17, 0x00	; 0
    1c9a:	59 f0       	breq	.+22     	; 0x1cb2 <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1c9c:	ef 01       	movw	r28, r30
    1c9e:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1ca2:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    1ca6:	80 91 10 01 	lds	r24, 0x0110
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1caa:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1cac:	28 17       	cp	r18, r24
    1cae:	39 07       	cpc	r19, r25
    1cb0:	70 f3       	brcs	.-36     	; 0x1c8e <USB_Host_SendControlRequest+0x15c>
    1cb2:	80 91 a6 00 	lds	r24, 0x00A6
    1cb6:	8b 77       	andi	r24, 0x7B	; 123
    1cb8:	80 93 a6 00 	sts	0x00A6, r24
    1cbc:	82 e0       	ldi	r24, 0x02	; 2
    1cbe:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1cc0:	11 05       	cpc	r17, r1
    1cc2:	01 f7       	brne	.-64     	; 0x1c84 <USB_Host_SendControlRequest+0x152>
    1cc4:	0e df       	rcall	.-484    	; 0x1ae2 <USB_Host_WaitForIOS>
    1cc6:	88 23       	and	r24, r24
    1cc8:	c9 f4       	brne	.+50     	; 0x1cfc <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1cca:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1cce:	80 64       	ori	r24, 0x40	; 64
    1cd0:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1cd4:	80 91 aa 00 	lds	r24, 0x00AA
    1cd8:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1cda:	80 61       	ori	r24, 0x10	; 16
    1cdc:	80 93 aa 00 	sts	0x00AA, r24
    1ce0:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1ce4:	8f 7b       	andi	r24, 0xBF	; 191
    1ce6:	80 93 a9 00 	sts	0x00A9, r24
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	fa de       	rcall	.-524    	; 0x1ae2 <USB_Host_WaitForIOS>
    1cee:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1cf0:	29 f4       	brne	.+10     	; 0x1cfc <USB_Host_SendControlRequest+0x1ca>
    1cf2:	90 91 a6 00 	lds	r25, 0x00A6
    1cf6:	9e 77       	andi	r25, 0x7E	; 126
    1cf8:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1cfc:	90 91 a9 00 	lds	r25, 0x00A9
    1d00:	90 64       	ori	r25, 0x40	; 64
    1d02:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1d06:	e1 14       	cp	r14, r1
    1d08:	f1 04       	cpc	r15, r1
    1d0a:	29 f4       	brne	.+10     	; 0x1d16 <USB_Host_SendControlRequest+0x1e4>
    1d0c:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1d10:	9e 7f       	andi	r25, 0xFE	; 254
    1d12:	90 93 9e 00 	sts	0x009E, r25
    1d16:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1d18:	90 93 a8 00 	sts	0x00A8, r25
    1d1c:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	1f 91       	pop	r17
    1d26:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1d28:	ff 90       	pop	r15
    1d2a:	ef 90       	pop	r14
    1d2c:	08 95       	ret

00001d2e <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    1d2e:	cf 93       	push	r28
    1d30:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1d32:	10 92 fa 04 	sts	0x04FA, r1
    1d36:	89 e0       	ldi	r24, 0x09	; 9
    1d38:	80 93 fb 04 	sts	0x04FB, r24
    1d3c:	c0 93 fc 04 	sts	0x04FC, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1d40:	10 92 fd 04 	sts	0x04FD, r1
    1d44:	10 92 ff 04 	sts	0x04FF, r1
    1d48:	10 92 fe 04 	sts	0x04FE, r1
    1d4c:	10 92 01 05 	sts	0x0501, r1
    1d50:	10 92 00 05 	sts	0x0500, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1d54:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	ea de       	rcall	.-556    	; 0x1b32 <USB_Host_SendControlRequest>
    1d5e:	88 23       	and	r24, r24
    1d60:	49 f4       	brne	.+18     	; 0x1d74 <USB_Host_SetDeviceConfiguration+0x46>
    1d62:	c0 93 f8 04 	sts	0x04F8, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1d66:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1d68:	11 f0       	breq	.+4      	; 0x1d6e <USB_Host_SetDeviceConfiguration+0x40>
    1d6a:	9b e0       	ldi	r25, 0x0B	; 11
    1d6c:	01 c0       	rjmp	.+2      	; 0x1d70 <USB_Host_SetDeviceConfiguration+0x42>
    1d6e:	9a e0       	ldi	r25, 0x0A	; 10
    1d70:	90 93 02 05 	sts	0x0502, r25
    1d74:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1d76:	08 95       	ret

00001d78 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1d78:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1d7a:	c0 91 a7 00 	lds	r28, 0x00A7
    1d7e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1d80:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1d84:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1d88:	c7 da       	rcall	.-2674   	; 0x1318 <USB_Host_ProcessNextHostState>
    1d8a:	c0 93 a7 00 	sts	0x00A7, r28
    1d8e:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1d90:	08 95       	ret

00001d92 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1d92:	90 91 c8 00 	lds	r25, 0x00C8
    1d96:	95 ff       	sbrs	r25, 5
    1d98:	fc cf       	rjmp	.-8      	; 0x1d92 <Serial_putchar>
				UDR1 = DataByte;
    1d9a:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	08 95       	ret

00001da4 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1da4:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1da8:	87 ff       	sbrs	r24, 7
    1daa:	08 c0       	rjmp	.+16     	; 0x1dbc <Serial_getchar+0x18>
    1dac:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1db0:	87 ff       	sbrs	r24, 7
    1db2:	07 c0       	rjmp	.+14     	; 0x1dc2 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1db4:	80 91 ce 00 	lds	r24, 0x00CE
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	08 95       	ret
	  return _FDEV_EOF;
    1dbc:	8e ef       	ldi	r24, 0xFE	; 254
    1dbe:	9f ef       	ldi	r25, 0xFF	; 255
    1dc0:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1dc2:	8f ef       	ldi	r24, 0xFF	; 255
    1dc4:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1dc6:	08 95       	ret

00001dc8 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1dc8:	fc 01       	movw	r30, r24
	if (!(Stream))
    1dca:	00 97       	sbiw	r24, 0x00	; 0
    1dcc:	51 f4       	brne	.+20     	; 0x1de2 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1dce:	e3 e0       	ldi	r30, 0x03	; 3
    1dd0:	f5 e0       	ldi	r31, 0x05	; 5
    1dd2:	f0 93 12 05 	sts	0x0512, r31
    1dd6:	e0 93 11 05 	sts	0x0511, r30
		stdout = Stream;
    1dda:	f0 93 14 05 	sts	0x0514, r31
    1dde:	e0 93 13 05 	sts	0x0513, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1de2:	8e e0       	ldi	r24, 0x0E	; 14
    1de4:	df 01       	movw	r26, r30
    1de6:	1d 92       	st	X+, r1
    1de8:	8a 95       	dec	r24
    1dea:	e9 f7       	brne	.-6      	; 0x1de6 <Serial_CreateStream+0x1e>
    1dec:	83 e0       	ldi	r24, 0x03	; 3
    1dee:	83 83       	std	Z+3, r24	; 0x03
    1df0:	89 ec       	ldi	r24, 0xC9	; 201
    1df2:	9e e0       	ldi	r25, 0x0E	; 14
    1df4:	91 87       	std	Z+9, r25	; 0x09
    1df6:	80 87       	std	Z+8, r24	; 0x08
    1df8:	82 ed       	ldi	r24, 0xD2	; 210
    1dfa:	9e e0       	ldi	r25, 0x0E	; 14
    1dfc:	93 87       	std	Z+11, r25	; 0x0b
    1dfe:	82 87       	std	Z+10, r24	; 0x0a
}
    1e00:	08 95       	ret

00001e02 <printf_P>:
    1e02:	cf 93       	push	r28
    1e04:	df 93       	push	r29
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	35 96       	adiw	r30, 0x05	; 5
    1e0e:	61 91       	ld	r22, Z+
    1e10:	71 91       	ld	r23, Z+
    1e12:	80 91 13 05 	lds	r24, 0x0513
    1e16:	90 91 14 05 	lds	r25, 0x0514
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	13 96       	adiw	r26, 0x03	; 3
    1e1e:	2c 91       	ld	r18, X
    1e20:	13 97       	sbiw	r26, 0x03	; 3
    1e22:	28 60       	ori	r18, 0x08	; 8
    1e24:	13 96       	adiw	r26, 0x03	; 3
    1e26:	2c 93       	st	X, r18
    1e28:	af 01       	movw	r20, r30
    1e2a:	39 d0       	rcall	.+114    	; 0x1e9e <vfprintf>
    1e2c:	e0 91 13 05 	lds	r30, 0x0513
    1e30:	f0 91 14 05 	lds	r31, 0x0514
    1e34:	23 81       	ldd	r18, Z+3	; 0x03
    1e36:	27 7f       	andi	r18, 0xF7	; 247
    1e38:	23 83       	std	Z+3, r18	; 0x03
    1e3a:	df 91       	pop	r29
    1e3c:	cf 91       	pop	r28
    1e3e:	08 95       	ret

00001e40 <puts_P>:
    1e40:	0f 93       	push	r16
    1e42:	1f 93       	push	r17
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	8c 01       	movw	r16, r24
    1e4a:	e0 91 13 05 	lds	r30, 0x0513
    1e4e:	f0 91 14 05 	lds	r31, 0x0514
    1e52:	83 81       	ldd	r24, Z+3	; 0x03
    1e54:	81 ff       	sbrs	r24, 1
    1e56:	1b c0       	rjmp	.+54     	; 0x1e8e <puts_P+0x4e>
    1e58:	c0 e0       	ldi	r28, 0x00	; 0
    1e5a:	d0 e0       	ldi	r29, 0x00	; 0
    1e5c:	07 c0       	rjmp	.+14     	; 0x1e6c <puts_P+0x2c>
    1e5e:	09 95       	icall
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	11 f0       	breq	.+4      	; 0x1e68 <puts_P+0x28>
    1e64:	cf ef       	ldi	r28, 0xFF	; 255
    1e66:	df ef       	ldi	r29, 0xFF	; 255
    1e68:	0f 5f       	subi	r16, 0xFF	; 255
    1e6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6c:	f8 01       	movw	r30, r16
    1e6e:	84 91       	lpm	r24, Z
    1e70:	60 91 13 05 	lds	r22, 0x0513
    1e74:	70 91 14 05 	lds	r23, 0x0514
    1e78:	db 01       	movw	r26, r22
    1e7a:	18 96       	adiw	r26, 0x08	; 8
    1e7c:	ed 91       	ld	r30, X+
    1e7e:	fc 91       	ld	r31, X
    1e80:	19 97       	sbiw	r26, 0x09	; 9
    1e82:	88 23       	and	r24, r24
    1e84:	61 f7       	brne	.-40     	; 0x1e5e <puts_P+0x1e>
    1e86:	8a e0       	ldi	r24, 0x0A	; 10
    1e88:	09 95       	icall
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	11 f0       	breq	.+4      	; 0x1e92 <puts_P+0x52>
    1e8e:	cf ef       	ldi	r28, 0xFF	; 255
    1e90:	df ef       	ldi	r29, 0xFF	; 255
    1e92:	ce 01       	movw	r24, r28
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
    1e98:	1f 91       	pop	r17
    1e9a:	0f 91       	pop	r16
    1e9c:	08 95       	ret

00001e9e <vfprintf>:
    1e9e:	2f 92       	push	r2
    1ea0:	3f 92       	push	r3
    1ea2:	4f 92       	push	r4
    1ea4:	5f 92       	push	r5
    1ea6:	6f 92       	push	r6
    1ea8:	7f 92       	push	r7
    1eaa:	8f 92       	push	r8
    1eac:	9f 92       	push	r9
    1eae:	af 92       	push	r10
    1eb0:	bf 92       	push	r11
    1eb2:	cf 92       	push	r12
    1eb4:	df 92       	push	r13
    1eb6:	ef 92       	push	r14
    1eb8:	ff 92       	push	r15
    1eba:	0f 93       	push	r16
    1ebc:	1f 93       	push	r17
    1ebe:	cf 93       	push	r28
    1ec0:	df 93       	push	r29
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	2d 97       	sbiw	r28, 0x0d	; 13
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	de bf       	out	0x3e, r29	; 62
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	cd bf       	out	0x3d, r28	; 61
    1ed2:	3c 01       	movw	r6, r24
    1ed4:	7d 87       	std	Y+13, r23	; 0x0d
    1ed6:	6c 87       	std	Y+12, r22	; 0x0c
    1ed8:	5a 01       	movw	r10, r20
    1eda:	fc 01       	movw	r30, r24
    1edc:	17 82       	std	Z+7, r1	; 0x07
    1ede:	16 82       	std	Z+6, r1	; 0x06
    1ee0:	83 81       	ldd	r24, Z+3	; 0x03
    1ee2:	81 ff       	sbrs	r24, 1
    1ee4:	bb c1       	rjmp	.+886    	; 0x225c <__stack+0x15d>
    1ee6:	2e 01       	movw	r4, r28
    1ee8:	08 94       	sec
    1eea:	41 1c       	adc	r4, r1
    1eec:	51 1c       	adc	r5, r1
    1eee:	f3 01       	movw	r30, r6
    1ef0:	93 81       	ldd	r25, Z+3	; 0x03
    1ef2:	ec 85       	ldd	r30, Y+12	; 0x0c
    1ef4:	fd 85       	ldd	r31, Y+13	; 0x0d
    1ef6:	93 fd       	sbrc	r25, 3
    1ef8:	85 91       	lpm	r24, Z+
    1efa:	93 ff       	sbrs	r25, 3
    1efc:	81 91       	ld	r24, Z+
    1efe:	fd 87       	std	Y+13, r31	; 0x0d
    1f00:	ec 87       	std	Y+12, r30	; 0x0c
    1f02:	88 23       	and	r24, r24
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <vfprintf+0x6a>
    1f06:	a6 c1       	rjmp	.+844    	; 0x2254 <__stack+0x155>
    1f08:	85 32       	cpi	r24, 0x25	; 37
    1f0a:	41 f4       	brne	.+16     	; 0x1f1c <vfprintf+0x7e>
    1f0c:	93 fd       	sbrc	r25, 3
    1f0e:	85 91       	lpm	r24, Z+
    1f10:	93 ff       	sbrs	r25, 3
    1f12:	81 91       	ld	r24, Z+
    1f14:	fd 87       	std	Y+13, r31	; 0x0d
    1f16:	ec 87       	std	Y+12, r30	; 0x0c
    1f18:	85 32       	cpi	r24, 0x25	; 37
    1f1a:	21 f4       	brne	.+8      	; 0x1f24 <vfprintf+0x86>
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	b3 01       	movw	r22, r6
    1f20:	ce d1       	rcall	.+924    	; 0x22be <fputc>
    1f22:	e5 cf       	rjmp	.-54     	; 0x1eee <vfprintf+0x50>
    1f24:	ff 24       	eor	r15, r15
    1f26:	ee 24       	eor	r14, r14
    1f28:	10 e0       	ldi	r17, 0x00	; 0
    1f2a:	10 32       	cpi	r17, 0x20	; 32
    1f2c:	b0 f4       	brcc	.+44     	; 0x1f5a <vfprintf+0xbc>
    1f2e:	8b 32       	cpi	r24, 0x2B	; 43
    1f30:	69 f0       	breq	.+26     	; 0x1f4c <vfprintf+0xae>
    1f32:	8c 32       	cpi	r24, 0x2C	; 44
    1f34:	28 f4       	brcc	.+10     	; 0x1f40 <vfprintf+0xa2>
    1f36:	80 32       	cpi	r24, 0x20	; 32
    1f38:	51 f0       	breq	.+20     	; 0x1f4e <vfprintf+0xb0>
    1f3a:	83 32       	cpi	r24, 0x23	; 35
    1f3c:	71 f4       	brne	.+28     	; 0x1f5a <vfprintf+0xbc>
    1f3e:	0b c0       	rjmp	.+22     	; 0x1f56 <vfprintf+0xb8>
    1f40:	8d 32       	cpi	r24, 0x2D	; 45
    1f42:	39 f0       	breq	.+14     	; 0x1f52 <vfprintf+0xb4>
    1f44:	80 33       	cpi	r24, 0x30	; 48
    1f46:	49 f4       	brne	.+18     	; 0x1f5a <vfprintf+0xbc>
    1f48:	11 60       	ori	r17, 0x01	; 1
    1f4a:	2c c0       	rjmp	.+88     	; 0x1fa4 <vfprintf+0x106>
    1f4c:	12 60       	ori	r17, 0x02	; 2
    1f4e:	14 60       	ori	r17, 0x04	; 4
    1f50:	29 c0       	rjmp	.+82     	; 0x1fa4 <vfprintf+0x106>
    1f52:	18 60       	ori	r17, 0x08	; 8
    1f54:	27 c0       	rjmp	.+78     	; 0x1fa4 <vfprintf+0x106>
    1f56:	10 61       	ori	r17, 0x10	; 16
    1f58:	25 c0       	rjmp	.+74     	; 0x1fa4 <vfprintf+0x106>
    1f5a:	17 fd       	sbrc	r17, 7
    1f5c:	2e c0       	rjmp	.+92     	; 0x1fba <vfprintf+0x11c>
    1f5e:	28 2f       	mov	r18, r24
    1f60:	20 53       	subi	r18, 0x30	; 48
    1f62:	2a 30       	cpi	r18, 0x0A	; 10
    1f64:	98 f4       	brcc	.+38     	; 0x1f8c <vfprintf+0xee>
    1f66:	16 ff       	sbrs	r17, 6
    1f68:	08 c0       	rjmp	.+16     	; 0x1f7a <vfprintf+0xdc>
    1f6a:	8f 2d       	mov	r24, r15
    1f6c:	88 0f       	add	r24, r24
    1f6e:	f8 2e       	mov	r15, r24
    1f70:	ff 0c       	add	r15, r15
    1f72:	ff 0c       	add	r15, r15
    1f74:	f8 0e       	add	r15, r24
    1f76:	f2 0e       	add	r15, r18
    1f78:	15 c0       	rjmp	.+42     	; 0x1fa4 <vfprintf+0x106>
    1f7a:	8e 2d       	mov	r24, r14
    1f7c:	88 0f       	add	r24, r24
    1f7e:	e8 2e       	mov	r14, r24
    1f80:	ee 0c       	add	r14, r14
    1f82:	ee 0c       	add	r14, r14
    1f84:	e8 0e       	add	r14, r24
    1f86:	e2 0e       	add	r14, r18
    1f88:	10 62       	ori	r17, 0x20	; 32
    1f8a:	0c c0       	rjmp	.+24     	; 0x1fa4 <vfprintf+0x106>
    1f8c:	8e 32       	cpi	r24, 0x2E	; 46
    1f8e:	21 f4       	brne	.+8      	; 0x1f98 <vfprintf+0xfa>
    1f90:	16 fd       	sbrc	r17, 6
    1f92:	60 c1       	rjmp	.+704    	; 0x2254 <__stack+0x155>
    1f94:	10 64       	ori	r17, 0x40	; 64
    1f96:	06 c0       	rjmp	.+12     	; 0x1fa4 <vfprintf+0x106>
    1f98:	8c 36       	cpi	r24, 0x6C	; 108
    1f9a:	11 f4       	brne	.+4      	; 0x1fa0 <vfprintf+0x102>
    1f9c:	10 68       	ori	r17, 0x80	; 128
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <vfprintf+0x106>
    1fa0:	88 36       	cpi	r24, 0x68	; 104
    1fa2:	59 f4       	brne	.+22     	; 0x1fba <vfprintf+0x11c>
    1fa4:	ec 85       	ldd	r30, Y+12	; 0x0c
    1fa6:	fd 85       	ldd	r31, Y+13	; 0x0d
    1fa8:	93 fd       	sbrc	r25, 3
    1faa:	85 91       	lpm	r24, Z+
    1fac:	93 ff       	sbrs	r25, 3
    1fae:	81 91       	ld	r24, Z+
    1fb0:	fd 87       	std	Y+13, r31	; 0x0d
    1fb2:	ec 87       	std	Y+12, r30	; 0x0c
    1fb4:	88 23       	and	r24, r24
    1fb6:	09 f0       	breq	.+2      	; 0x1fba <vfprintf+0x11c>
    1fb8:	b8 cf       	rjmp	.-144    	; 0x1f2a <vfprintf+0x8c>
    1fba:	98 2f       	mov	r25, r24
    1fbc:	95 54       	subi	r25, 0x45	; 69
    1fbe:	93 30       	cpi	r25, 0x03	; 3
    1fc0:	18 f0       	brcs	.+6      	; 0x1fc8 <vfprintf+0x12a>
    1fc2:	90 52       	subi	r25, 0x20	; 32
    1fc4:	93 30       	cpi	r25, 0x03	; 3
    1fc6:	38 f4       	brcc	.+14     	; 0x1fd6 <vfprintf+0x138>
    1fc8:	24 e0       	ldi	r18, 0x04	; 4
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	a2 0e       	add	r10, r18
    1fce:	b3 1e       	adc	r11, r19
    1fd0:	3f e3       	ldi	r19, 0x3F	; 63
    1fd2:	39 83       	std	Y+1, r19	; 0x01
    1fd4:	0f c0       	rjmp	.+30     	; 0x1ff4 <vfprintf+0x156>
    1fd6:	83 36       	cpi	r24, 0x63	; 99
    1fd8:	31 f0       	breq	.+12     	; 0x1fe6 <vfprintf+0x148>
    1fda:	83 37       	cpi	r24, 0x73	; 115
    1fdc:	81 f0       	breq	.+32     	; 0x1ffe <vfprintf+0x160>
    1fde:	83 35       	cpi	r24, 0x53	; 83
    1fe0:	09 f0       	breq	.+2      	; 0x1fe4 <vfprintf+0x146>
    1fe2:	56 c0       	rjmp	.+172    	; 0x2090 <vfprintf+0x1f2>
    1fe4:	21 c0       	rjmp	.+66     	; 0x2028 <vfprintf+0x18a>
    1fe6:	f5 01       	movw	r30, r10
    1fe8:	80 81       	ld	r24, Z
    1fea:	89 83       	std	Y+1, r24	; 0x01
    1fec:	22 e0       	ldi	r18, 0x02	; 2
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	a2 0e       	add	r10, r18
    1ff2:	b3 1e       	adc	r11, r19
    1ff4:	21 e0       	ldi	r18, 0x01	; 1
    1ff6:	c2 2e       	mov	r12, r18
    1ff8:	d1 2c       	mov	r13, r1
    1ffa:	42 01       	movw	r8, r4
    1ffc:	13 c0       	rjmp	.+38     	; 0x2024 <vfprintf+0x186>
    1ffe:	92 e0       	ldi	r25, 0x02	; 2
    2000:	29 2e       	mov	r2, r25
    2002:	31 2c       	mov	r3, r1
    2004:	2a 0c       	add	r2, r10
    2006:	3b 1c       	adc	r3, r11
    2008:	f5 01       	movw	r30, r10
    200a:	80 80       	ld	r8, Z
    200c:	91 80       	ldd	r9, Z+1	; 0x01
    200e:	16 ff       	sbrs	r17, 6
    2010:	03 c0       	rjmp	.+6      	; 0x2018 <vfprintf+0x17a>
    2012:	6f 2d       	mov	r22, r15
    2014:	70 e0       	ldi	r23, 0x00	; 0
    2016:	02 c0       	rjmp	.+4      	; 0x201c <vfprintf+0x17e>
    2018:	6f ef       	ldi	r22, 0xFF	; 255
    201a:	7f ef       	ldi	r23, 0xFF	; 255
    201c:	c4 01       	movw	r24, r8
    201e:	44 d1       	rcall	.+648    	; 0x22a8 <strnlen>
    2020:	6c 01       	movw	r12, r24
    2022:	51 01       	movw	r10, r2
    2024:	1f 77       	andi	r17, 0x7F	; 127
    2026:	14 c0       	rjmp	.+40     	; 0x2050 <vfprintf+0x1b2>
    2028:	82 e0       	ldi	r24, 0x02	; 2
    202a:	28 2e       	mov	r2, r24
    202c:	31 2c       	mov	r3, r1
    202e:	2a 0c       	add	r2, r10
    2030:	3b 1c       	adc	r3, r11
    2032:	f5 01       	movw	r30, r10
    2034:	80 80       	ld	r8, Z
    2036:	91 80       	ldd	r9, Z+1	; 0x01
    2038:	16 ff       	sbrs	r17, 6
    203a:	03 c0       	rjmp	.+6      	; 0x2042 <vfprintf+0x1a4>
    203c:	6f 2d       	mov	r22, r15
    203e:	70 e0       	ldi	r23, 0x00	; 0
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <vfprintf+0x1a8>
    2042:	6f ef       	ldi	r22, 0xFF	; 255
    2044:	7f ef       	ldi	r23, 0xFF	; 255
    2046:	c4 01       	movw	r24, r8
    2048:	24 d1       	rcall	.+584    	; 0x2292 <strnlen_P>
    204a:	6c 01       	movw	r12, r24
    204c:	10 68       	ori	r17, 0x80	; 128
    204e:	51 01       	movw	r10, r2
    2050:	13 fd       	sbrc	r17, 3
    2052:	1a c0       	rjmp	.+52     	; 0x2088 <vfprintf+0x1ea>
    2054:	05 c0       	rjmp	.+10     	; 0x2060 <vfprintf+0x1c2>
    2056:	80 e2       	ldi	r24, 0x20	; 32
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	b3 01       	movw	r22, r6
    205c:	30 d1       	rcall	.+608    	; 0x22be <fputc>
    205e:	ea 94       	dec	r14
    2060:	8e 2d       	mov	r24, r14
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	c8 16       	cp	r12, r24
    2066:	d9 06       	cpc	r13, r25
    2068:	b0 f3       	brcs	.-20     	; 0x2056 <vfprintf+0x1b8>
    206a:	0e c0       	rjmp	.+28     	; 0x2088 <vfprintf+0x1ea>
    206c:	f4 01       	movw	r30, r8
    206e:	17 fd       	sbrc	r17, 7
    2070:	85 91       	lpm	r24, Z+
    2072:	17 ff       	sbrs	r17, 7
    2074:	81 91       	ld	r24, Z+
    2076:	4f 01       	movw	r8, r30
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	b3 01       	movw	r22, r6
    207c:	20 d1       	rcall	.+576    	; 0x22be <fputc>
    207e:	e1 10       	cpse	r14, r1
    2080:	ea 94       	dec	r14
    2082:	08 94       	sec
    2084:	c1 08       	sbc	r12, r1
    2086:	d1 08       	sbc	r13, r1
    2088:	c1 14       	cp	r12, r1
    208a:	d1 04       	cpc	r13, r1
    208c:	79 f7       	brne	.-34     	; 0x206c <vfprintf+0x1ce>
    208e:	df c0       	rjmp	.+446    	; 0x224e <__stack+0x14f>
    2090:	84 36       	cpi	r24, 0x64	; 100
    2092:	11 f0       	breq	.+4      	; 0x2098 <vfprintf+0x1fa>
    2094:	89 36       	cpi	r24, 0x69	; 105
    2096:	49 f5       	brne	.+82     	; 0x20ea <vfprintf+0x24c>
    2098:	f5 01       	movw	r30, r10
    209a:	17 ff       	sbrs	r17, 7
    209c:	07 c0       	rjmp	.+14     	; 0x20ac <vfprintf+0x20e>
    209e:	80 81       	ld	r24, Z
    20a0:	91 81       	ldd	r25, Z+1	; 0x01
    20a2:	a2 81       	ldd	r26, Z+2	; 0x02
    20a4:	b3 81       	ldd	r27, Z+3	; 0x03
    20a6:	24 e0       	ldi	r18, 0x04	; 4
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	08 c0       	rjmp	.+16     	; 0x20bc <vfprintf+0x21e>
    20ac:	80 81       	ld	r24, Z
    20ae:	91 81       	ldd	r25, Z+1	; 0x01
    20b0:	aa 27       	eor	r26, r26
    20b2:	97 fd       	sbrc	r25, 7
    20b4:	a0 95       	com	r26
    20b6:	ba 2f       	mov	r27, r26
    20b8:	22 e0       	ldi	r18, 0x02	; 2
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	a2 0e       	add	r10, r18
    20be:	b3 1e       	adc	r11, r19
    20c0:	01 2f       	mov	r16, r17
    20c2:	0f 76       	andi	r16, 0x6F	; 111
    20c4:	b7 ff       	sbrs	r27, 7
    20c6:	08 c0       	rjmp	.+16     	; 0x20d8 <vfprintf+0x23a>
    20c8:	b0 95       	com	r27
    20ca:	a0 95       	com	r26
    20cc:	90 95       	com	r25
    20ce:	81 95       	neg	r24
    20d0:	9f 4f       	sbci	r25, 0xFF	; 255
    20d2:	af 4f       	sbci	r26, 0xFF	; 255
    20d4:	bf 4f       	sbci	r27, 0xFF	; 255
    20d6:	00 68       	ori	r16, 0x80	; 128
    20d8:	bc 01       	movw	r22, r24
    20da:	cd 01       	movw	r24, r26
    20dc:	a2 01       	movw	r20, r4
    20de:	2a e0       	ldi	r18, 0x0A	; 10
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	19 d1       	rcall	.+562    	; 0x2316 <__ultoa_invert>
    20e4:	d8 2e       	mov	r13, r24
    20e6:	d4 18       	sub	r13, r4
    20e8:	3e c0       	rjmp	.+124    	; 0x2166 <__stack+0x67>
    20ea:	85 37       	cpi	r24, 0x75	; 117
    20ec:	21 f4       	brne	.+8      	; 0x20f6 <vfprintf+0x258>
    20ee:	1f 7e       	andi	r17, 0xEF	; 239
    20f0:	2a e0       	ldi	r18, 0x0A	; 10
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	20 c0       	rjmp	.+64     	; 0x2136 <__stack+0x37>
    20f6:	19 7f       	andi	r17, 0xF9	; 249
    20f8:	8f 36       	cpi	r24, 0x6F	; 111
    20fa:	a9 f0       	breq	.+42     	; 0x2126 <__stack+0x27>
    20fc:	80 37       	cpi	r24, 0x70	; 112
    20fe:	20 f4       	brcc	.+8      	; 0x2108 <__stack+0x9>
    2100:	88 35       	cpi	r24, 0x58	; 88
    2102:	09 f0       	breq	.+2      	; 0x2106 <__stack+0x7>
    2104:	a7 c0       	rjmp	.+334    	; 0x2254 <__stack+0x155>
    2106:	0b c0       	rjmp	.+22     	; 0x211e <__stack+0x1f>
    2108:	80 37       	cpi	r24, 0x70	; 112
    210a:	21 f0       	breq	.+8      	; 0x2114 <__stack+0x15>
    210c:	88 37       	cpi	r24, 0x78	; 120
    210e:	09 f0       	breq	.+2      	; 0x2112 <__stack+0x13>
    2110:	a1 c0       	rjmp	.+322    	; 0x2254 <__stack+0x155>
    2112:	01 c0       	rjmp	.+2      	; 0x2116 <__stack+0x17>
    2114:	10 61       	ori	r17, 0x10	; 16
    2116:	14 ff       	sbrs	r17, 4
    2118:	09 c0       	rjmp	.+18     	; 0x212c <__stack+0x2d>
    211a:	14 60       	ori	r17, 0x04	; 4
    211c:	07 c0       	rjmp	.+14     	; 0x212c <__stack+0x2d>
    211e:	14 ff       	sbrs	r17, 4
    2120:	08 c0       	rjmp	.+16     	; 0x2132 <__stack+0x33>
    2122:	16 60       	ori	r17, 0x06	; 6
    2124:	06 c0       	rjmp	.+12     	; 0x2132 <__stack+0x33>
    2126:	28 e0       	ldi	r18, 0x08	; 8
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	05 c0       	rjmp	.+10     	; 0x2136 <__stack+0x37>
    212c:	20 e1       	ldi	r18, 0x10	; 16
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	02 c0       	rjmp	.+4      	; 0x2136 <__stack+0x37>
    2132:	20 e1       	ldi	r18, 0x10	; 16
    2134:	32 e0       	ldi	r19, 0x02	; 2
    2136:	f5 01       	movw	r30, r10
    2138:	17 ff       	sbrs	r17, 7
    213a:	07 c0       	rjmp	.+14     	; 0x214a <__stack+0x4b>
    213c:	60 81       	ld	r22, Z
    213e:	71 81       	ldd	r23, Z+1	; 0x01
    2140:	82 81       	ldd	r24, Z+2	; 0x02
    2142:	93 81       	ldd	r25, Z+3	; 0x03
    2144:	44 e0       	ldi	r20, 0x04	; 4
    2146:	50 e0       	ldi	r21, 0x00	; 0
    2148:	06 c0       	rjmp	.+12     	; 0x2156 <__stack+0x57>
    214a:	60 81       	ld	r22, Z
    214c:	71 81       	ldd	r23, Z+1	; 0x01
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	42 e0       	ldi	r20, 0x02	; 2
    2154:	50 e0       	ldi	r21, 0x00	; 0
    2156:	a4 0e       	add	r10, r20
    2158:	b5 1e       	adc	r11, r21
    215a:	a2 01       	movw	r20, r4
    215c:	dc d0       	rcall	.+440    	; 0x2316 <__ultoa_invert>
    215e:	d8 2e       	mov	r13, r24
    2160:	d4 18       	sub	r13, r4
    2162:	01 2f       	mov	r16, r17
    2164:	0f 77       	andi	r16, 0x7F	; 127
    2166:	06 ff       	sbrs	r16, 6
    2168:	09 c0       	rjmp	.+18     	; 0x217c <__stack+0x7d>
    216a:	0e 7f       	andi	r16, 0xFE	; 254
    216c:	df 14       	cp	r13, r15
    216e:	30 f4       	brcc	.+12     	; 0x217c <__stack+0x7d>
    2170:	04 ff       	sbrs	r16, 4
    2172:	06 c0       	rjmp	.+12     	; 0x2180 <__stack+0x81>
    2174:	02 fd       	sbrc	r16, 2
    2176:	04 c0       	rjmp	.+8      	; 0x2180 <__stack+0x81>
    2178:	0f 7e       	andi	r16, 0xEF	; 239
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <__stack+0x81>
    217c:	1d 2d       	mov	r17, r13
    217e:	01 c0       	rjmp	.+2      	; 0x2182 <__stack+0x83>
    2180:	1f 2d       	mov	r17, r15
    2182:	80 2f       	mov	r24, r16
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	04 ff       	sbrs	r16, 4
    2188:	0c c0       	rjmp	.+24     	; 0x21a2 <__stack+0xa3>
    218a:	fe 01       	movw	r30, r28
    218c:	ed 0d       	add	r30, r13
    218e:	f1 1d       	adc	r31, r1
    2190:	20 81       	ld	r18, Z
    2192:	20 33       	cpi	r18, 0x30	; 48
    2194:	11 f4       	brne	.+4      	; 0x219a <__stack+0x9b>
    2196:	09 7e       	andi	r16, 0xE9	; 233
    2198:	09 c0       	rjmp	.+18     	; 0x21ac <__stack+0xad>
    219a:	02 ff       	sbrs	r16, 2
    219c:	06 c0       	rjmp	.+12     	; 0x21aa <__stack+0xab>
    219e:	1e 5f       	subi	r17, 0xFE	; 254
    21a0:	05 c0       	rjmp	.+10     	; 0x21ac <__stack+0xad>
    21a2:	86 78       	andi	r24, 0x86	; 134
    21a4:	90 70       	andi	r25, 0x00	; 0
    21a6:	00 97       	sbiw	r24, 0x00	; 0
    21a8:	09 f0       	breq	.+2      	; 0x21ac <__stack+0xad>
    21aa:	1f 5f       	subi	r17, 0xFF	; 255
    21ac:	80 2e       	mov	r8, r16
    21ae:	99 24       	eor	r9, r9
    21b0:	03 fd       	sbrc	r16, 3
    21b2:	11 c0       	rjmp	.+34     	; 0x21d6 <__stack+0xd7>
    21b4:	00 ff       	sbrs	r16, 0
    21b6:	0c c0       	rjmp	.+24     	; 0x21d0 <__stack+0xd1>
    21b8:	fd 2c       	mov	r15, r13
    21ba:	1e 15       	cp	r17, r14
    21bc:	48 f4       	brcc	.+18     	; 0x21d0 <__stack+0xd1>
    21be:	fe 0c       	add	r15, r14
    21c0:	f1 1a       	sub	r15, r17
    21c2:	1e 2d       	mov	r17, r14
    21c4:	05 c0       	rjmp	.+10     	; 0x21d0 <__stack+0xd1>
    21c6:	80 e2       	ldi	r24, 0x20	; 32
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	b3 01       	movw	r22, r6
    21cc:	78 d0       	rcall	.+240    	; 0x22be <fputc>
    21ce:	1f 5f       	subi	r17, 0xFF	; 255
    21d0:	1e 15       	cp	r17, r14
    21d2:	c8 f3       	brcs	.-14     	; 0x21c6 <__stack+0xc7>
    21d4:	04 c0       	rjmp	.+8      	; 0x21de <__stack+0xdf>
    21d6:	1e 15       	cp	r17, r14
    21d8:	10 f4       	brcc	.+4      	; 0x21de <__stack+0xdf>
    21da:	e1 1a       	sub	r14, r17
    21dc:	01 c0       	rjmp	.+2      	; 0x21e0 <__stack+0xe1>
    21de:	ee 24       	eor	r14, r14
    21e0:	84 fe       	sbrs	r8, 4
    21e2:	0e c0       	rjmp	.+28     	; 0x2200 <__stack+0x101>
    21e4:	80 e3       	ldi	r24, 0x30	; 48
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	b3 01       	movw	r22, r6
    21ea:	69 d0       	rcall	.+210    	; 0x22be <fputc>
    21ec:	82 fe       	sbrs	r8, 2
    21ee:	1d c0       	rjmp	.+58     	; 0x222a <__stack+0x12b>
    21f0:	81 fe       	sbrs	r8, 1
    21f2:	03 c0       	rjmp	.+6      	; 0x21fa <__stack+0xfb>
    21f4:	88 e5       	ldi	r24, 0x58	; 88
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	10 c0       	rjmp	.+32     	; 0x221a <__stack+0x11b>
    21fa:	88 e7       	ldi	r24, 0x78	; 120
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	0d c0       	rjmp	.+26     	; 0x221a <__stack+0x11b>
    2200:	c4 01       	movw	r24, r8
    2202:	86 78       	andi	r24, 0x86	; 134
    2204:	90 70       	andi	r25, 0x00	; 0
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	81 f0       	breq	.+32     	; 0x222a <__stack+0x12b>
    220a:	81 fc       	sbrc	r8, 1
    220c:	02 c0       	rjmp	.+4      	; 0x2212 <__stack+0x113>
    220e:	80 e2       	ldi	r24, 0x20	; 32
    2210:	01 c0       	rjmp	.+2      	; 0x2214 <__stack+0x115>
    2212:	8b e2       	ldi	r24, 0x2B	; 43
    2214:	07 fd       	sbrc	r16, 7
    2216:	8d e2       	ldi	r24, 0x2D	; 45
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	b3 01       	movw	r22, r6
    221c:	50 d0       	rcall	.+160    	; 0x22be <fputc>
    221e:	05 c0       	rjmp	.+10     	; 0x222a <__stack+0x12b>
    2220:	80 e3       	ldi	r24, 0x30	; 48
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	b3 01       	movw	r22, r6
    2226:	4b d0       	rcall	.+150    	; 0x22be <fputc>
    2228:	fa 94       	dec	r15
    222a:	df 14       	cp	r13, r15
    222c:	c8 f3       	brcs	.-14     	; 0x2220 <__stack+0x121>
    222e:	da 94       	dec	r13
    2230:	f2 01       	movw	r30, r4
    2232:	ed 0d       	add	r30, r13
    2234:	f1 1d       	adc	r31, r1
    2236:	80 81       	ld	r24, Z
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	b3 01       	movw	r22, r6
    223c:	40 d0       	rcall	.+128    	; 0x22be <fputc>
    223e:	dd 20       	and	r13, r13
    2240:	b1 f7       	brne	.-20     	; 0x222e <__stack+0x12f>
    2242:	05 c0       	rjmp	.+10     	; 0x224e <__stack+0x14f>
    2244:	80 e2       	ldi	r24, 0x20	; 32
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	b3 01       	movw	r22, r6
    224a:	39 d0       	rcall	.+114    	; 0x22be <fputc>
    224c:	ea 94       	dec	r14
    224e:	ee 20       	and	r14, r14
    2250:	c9 f7       	brne	.-14     	; 0x2244 <__stack+0x145>
    2252:	4d ce       	rjmp	.-870    	; 0x1eee <vfprintf+0x50>
    2254:	f3 01       	movw	r30, r6
    2256:	86 81       	ldd	r24, Z+6	; 0x06
    2258:	97 81       	ldd	r25, Z+7	; 0x07
    225a:	02 c0       	rjmp	.+4      	; 0x2260 <__stack+0x161>
    225c:	8f ef       	ldi	r24, 0xFF	; 255
    225e:	9f ef       	ldi	r25, 0xFF	; 255
    2260:	2d 96       	adiw	r28, 0x0d	; 13
    2262:	0f b6       	in	r0, 0x3f	; 63
    2264:	f8 94       	cli
    2266:	de bf       	out	0x3e, r29	; 62
    2268:	0f be       	out	0x3f, r0	; 63
    226a:	cd bf       	out	0x3d, r28	; 61
    226c:	df 91       	pop	r29
    226e:	cf 91       	pop	r28
    2270:	1f 91       	pop	r17
    2272:	0f 91       	pop	r16
    2274:	ff 90       	pop	r15
    2276:	ef 90       	pop	r14
    2278:	df 90       	pop	r13
    227a:	cf 90       	pop	r12
    227c:	bf 90       	pop	r11
    227e:	af 90       	pop	r10
    2280:	9f 90       	pop	r9
    2282:	8f 90       	pop	r8
    2284:	7f 90       	pop	r7
    2286:	6f 90       	pop	r6
    2288:	5f 90       	pop	r5
    228a:	4f 90       	pop	r4
    228c:	3f 90       	pop	r3
    228e:	2f 90       	pop	r2
    2290:	08 95       	ret

00002292 <strnlen_P>:
    2292:	fc 01       	movw	r30, r24
    2294:	05 90       	lpm	r0, Z+
    2296:	61 50       	subi	r22, 0x01	; 1
    2298:	70 40       	sbci	r23, 0x00	; 0
    229a:	01 10       	cpse	r0, r1
    229c:	d8 f7       	brcc	.-10     	; 0x2294 <strnlen_P+0x2>
    229e:	80 95       	com	r24
    22a0:	90 95       	com	r25
    22a2:	8e 0f       	add	r24, r30
    22a4:	9f 1f       	adc	r25, r31
    22a6:	08 95       	ret

000022a8 <strnlen>:
    22a8:	fc 01       	movw	r30, r24
    22aa:	61 50       	subi	r22, 0x01	; 1
    22ac:	70 40       	sbci	r23, 0x00	; 0
    22ae:	01 90       	ld	r0, Z+
    22b0:	01 10       	cpse	r0, r1
    22b2:	d8 f7       	brcc	.-10     	; 0x22aa <strnlen+0x2>
    22b4:	80 95       	com	r24
    22b6:	90 95       	com	r25
    22b8:	8e 0f       	add	r24, r30
    22ba:	9f 1f       	adc	r25, r31
    22bc:	08 95       	ret

000022be <fputc>:
    22be:	0f 93       	push	r16
    22c0:	1f 93       	push	r17
    22c2:	cf 93       	push	r28
    22c4:	df 93       	push	r29
    22c6:	8c 01       	movw	r16, r24
    22c8:	eb 01       	movw	r28, r22
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	81 ff       	sbrs	r24, 1
    22ce:	1b c0       	rjmp	.+54     	; 0x2306 <fputc+0x48>
    22d0:	82 ff       	sbrs	r24, 2
    22d2:	0d c0       	rjmp	.+26     	; 0x22ee <fputc+0x30>
    22d4:	2e 81       	ldd	r18, Y+6	; 0x06
    22d6:	3f 81       	ldd	r19, Y+7	; 0x07
    22d8:	8c 81       	ldd	r24, Y+4	; 0x04
    22da:	9d 81       	ldd	r25, Y+5	; 0x05
    22dc:	28 17       	cp	r18, r24
    22de:	39 07       	cpc	r19, r25
    22e0:	64 f4       	brge	.+24     	; 0x22fa <fputc+0x3c>
    22e2:	e8 81       	ld	r30, Y
    22e4:	f9 81       	ldd	r31, Y+1	; 0x01
    22e6:	01 93       	st	Z+, r16
    22e8:	f9 83       	std	Y+1, r31	; 0x01
    22ea:	e8 83       	st	Y, r30
    22ec:	06 c0       	rjmp	.+12     	; 0x22fa <fputc+0x3c>
    22ee:	e8 85       	ldd	r30, Y+8	; 0x08
    22f0:	f9 85       	ldd	r31, Y+9	; 0x09
    22f2:	80 2f       	mov	r24, r16
    22f4:	09 95       	icall
    22f6:	00 97       	sbiw	r24, 0x00	; 0
    22f8:	31 f4       	brne	.+12     	; 0x2306 <fputc+0x48>
    22fa:	8e 81       	ldd	r24, Y+6	; 0x06
    22fc:	9f 81       	ldd	r25, Y+7	; 0x07
    22fe:	01 96       	adiw	r24, 0x01	; 1
    2300:	9f 83       	std	Y+7, r25	; 0x07
    2302:	8e 83       	std	Y+6, r24	; 0x06
    2304:	02 c0       	rjmp	.+4      	; 0x230a <fputc+0x4c>
    2306:	0f ef       	ldi	r16, 0xFF	; 255
    2308:	1f ef       	ldi	r17, 0xFF	; 255
    230a:	c8 01       	movw	r24, r16
    230c:	df 91       	pop	r29
    230e:	cf 91       	pop	r28
    2310:	1f 91       	pop	r17
    2312:	0f 91       	pop	r16
    2314:	08 95       	ret

00002316 <__ultoa_invert>:
    2316:	fa 01       	movw	r30, r20
    2318:	aa 27       	eor	r26, r26
    231a:	28 30       	cpi	r18, 0x08	; 8
    231c:	51 f1       	breq	.+84     	; 0x2372 <__ultoa_invert+0x5c>
    231e:	20 31       	cpi	r18, 0x10	; 16
    2320:	81 f1       	breq	.+96     	; 0x2382 <__ultoa_invert+0x6c>
    2322:	e8 94       	clt
    2324:	6f 93       	push	r22
    2326:	6e 7f       	andi	r22, 0xFE	; 254
    2328:	6e 5f       	subi	r22, 0xFE	; 254
    232a:	7f 4f       	sbci	r23, 0xFF	; 255
    232c:	8f 4f       	sbci	r24, 0xFF	; 255
    232e:	9f 4f       	sbci	r25, 0xFF	; 255
    2330:	af 4f       	sbci	r26, 0xFF	; 255
    2332:	b1 e0       	ldi	r27, 0x01	; 1
    2334:	3e d0       	rcall	.+124    	; 0x23b2 <__ultoa_invert+0x9c>
    2336:	b4 e0       	ldi	r27, 0x04	; 4
    2338:	3c d0       	rcall	.+120    	; 0x23b2 <__ultoa_invert+0x9c>
    233a:	67 0f       	add	r22, r23
    233c:	78 1f       	adc	r23, r24
    233e:	89 1f       	adc	r24, r25
    2340:	9a 1f       	adc	r25, r26
    2342:	a1 1d       	adc	r26, r1
    2344:	68 0f       	add	r22, r24
    2346:	79 1f       	adc	r23, r25
    2348:	8a 1f       	adc	r24, r26
    234a:	91 1d       	adc	r25, r1
    234c:	a1 1d       	adc	r26, r1
    234e:	6a 0f       	add	r22, r26
    2350:	71 1d       	adc	r23, r1
    2352:	81 1d       	adc	r24, r1
    2354:	91 1d       	adc	r25, r1
    2356:	a1 1d       	adc	r26, r1
    2358:	20 d0       	rcall	.+64     	; 0x239a <__ultoa_invert+0x84>
    235a:	09 f4       	brne	.+2      	; 0x235e <__ultoa_invert+0x48>
    235c:	68 94       	set
    235e:	3f 91       	pop	r19
    2360:	2a e0       	ldi	r18, 0x0A	; 10
    2362:	26 9f       	mul	r18, r22
    2364:	11 24       	eor	r1, r1
    2366:	30 19       	sub	r19, r0
    2368:	30 5d       	subi	r19, 0xD0	; 208
    236a:	31 93       	st	Z+, r19
    236c:	de f6       	brtc	.-74     	; 0x2324 <__ultoa_invert+0xe>
    236e:	cf 01       	movw	r24, r30
    2370:	08 95       	ret
    2372:	46 2f       	mov	r20, r22
    2374:	47 70       	andi	r20, 0x07	; 7
    2376:	40 5d       	subi	r20, 0xD0	; 208
    2378:	41 93       	st	Z+, r20
    237a:	b3 e0       	ldi	r27, 0x03	; 3
    237c:	0f d0       	rcall	.+30     	; 0x239c <__ultoa_invert+0x86>
    237e:	c9 f7       	brne	.-14     	; 0x2372 <__ultoa_invert+0x5c>
    2380:	f6 cf       	rjmp	.-20     	; 0x236e <__ultoa_invert+0x58>
    2382:	46 2f       	mov	r20, r22
    2384:	4f 70       	andi	r20, 0x0F	; 15
    2386:	40 5d       	subi	r20, 0xD0	; 208
    2388:	4a 33       	cpi	r20, 0x3A	; 58
    238a:	18 f0       	brcs	.+6      	; 0x2392 <__ultoa_invert+0x7c>
    238c:	49 5d       	subi	r20, 0xD9	; 217
    238e:	31 fd       	sbrc	r19, 1
    2390:	40 52       	subi	r20, 0x20	; 32
    2392:	41 93       	st	Z+, r20
    2394:	02 d0       	rcall	.+4      	; 0x239a <__ultoa_invert+0x84>
    2396:	a9 f7       	brne	.-22     	; 0x2382 <__ultoa_invert+0x6c>
    2398:	ea cf       	rjmp	.-44     	; 0x236e <__ultoa_invert+0x58>
    239a:	b4 e0       	ldi	r27, 0x04	; 4
    239c:	a6 95       	lsr	r26
    239e:	97 95       	ror	r25
    23a0:	87 95       	ror	r24
    23a2:	77 95       	ror	r23
    23a4:	67 95       	ror	r22
    23a6:	ba 95       	dec	r27
    23a8:	c9 f7       	brne	.-14     	; 0x239c <__ultoa_invert+0x86>
    23aa:	00 97       	sbiw	r24, 0x00	; 0
    23ac:	61 05       	cpc	r22, r1
    23ae:	71 05       	cpc	r23, r1
    23b0:	08 95       	ret
    23b2:	9b 01       	movw	r18, r22
    23b4:	ac 01       	movw	r20, r24
    23b6:	0a 2e       	mov	r0, r26
    23b8:	06 94       	lsr	r0
    23ba:	57 95       	ror	r21
    23bc:	47 95       	ror	r20
    23be:	37 95       	ror	r19
    23c0:	27 95       	ror	r18
    23c2:	ba 95       	dec	r27
    23c4:	c9 f7       	brne	.-14     	; 0x23b8 <__ultoa_invert+0xa2>
    23c6:	62 0f       	add	r22, r18
    23c8:	73 1f       	adc	r23, r19
    23ca:	84 1f       	adc	r24, r20
    23cc:	95 1f       	adc	r25, r21
    23ce:	a0 1d       	adc	r26, r0
    23d0:	08 95       	ret

000023d2 <_exit>:
    23d2:	f8 94       	cli

000023d4 <__stop_program>:
    23d4:	ff cf       	rjmp	.-2      	; 0x23d4 <__stop_program>
