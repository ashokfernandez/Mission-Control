
RNDISEthernetHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000021a8  0000223c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  00800126  00800126  00002262  2**0
                  ALLOC
  3 .stab         00000eac  00000000  00000000  00002264  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002b1  00000000  00000000  00003110  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004c0  00000000  00000000  000033c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000065af  00000000  00000000  00003888  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002058  00000000  00000000  00009e37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003102  00000000  00000000  0000be8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d44  00000000  00000000  0000ef94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002b96  00000000  00000000  0000fcd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004645  00000000  00000000  0001286e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000498  00000000  00000000  00016eb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	dc c1       	rjmp	.+952    	; 0x3ba <__ctors_end>
       2:	00 00       	nop
       4:	f9 c1       	rjmp	.+1010   	; 0x3f8 <__bad_interrupt>
       6:	00 00       	nop
       8:	f7 c1       	rjmp	.+1006   	; 0x3f8 <__bad_interrupt>
       a:	00 00       	nop
       c:	f5 c1       	rjmp	.+1002   	; 0x3f8 <__bad_interrupt>
       e:	00 00       	nop
      10:	f3 c1       	rjmp	.+998    	; 0x3f8 <__bad_interrupt>
      12:	00 00       	nop
      14:	f1 c1       	rjmp	.+994    	; 0x3f8 <__bad_interrupt>
      16:	00 00       	nop
      18:	ef c1       	rjmp	.+990    	; 0x3f8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ed c1       	rjmp	.+986    	; 0x3f8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	eb c1       	rjmp	.+982    	; 0x3f8 <__bad_interrupt>
      22:	00 00       	nop
      24:	e9 c1       	rjmp	.+978    	; 0x3f8 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__vector_10>
      2c:	e5 c1       	rjmp	.+970    	; 0x3f8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e3 c1       	rjmp	.+966    	; 0x3f8 <__bad_interrupt>
      32:	00 00       	nop
      34:	e1 c1       	rjmp	.+962    	; 0x3f8 <__bad_interrupt>
      36:	00 00       	nop
      38:	df c1       	rjmp	.+958    	; 0x3f8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	dd c1       	rjmp	.+954    	; 0x3f8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	db c1       	rjmp	.+950    	; 0x3f8 <__bad_interrupt>
      42:	00 00       	nop
      44:	d9 c1       	rjmp	.+946    	; 0x3f8 <__bad_interrupt>
      46:	00 00       	nop
      48:	d7 c1       	rjmp	.+942    	; 0x3f8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d5 c1       	rjmp	.+938    	; 0x3f8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d3 c1       	rjmp	.+934    	; 0x3f8 <__bad_interrupt>
      52:	00 00       	nop
      54:	d1 c1       	rjmp	.+930    	; 0x3f8 <__bad_interrupt>
      56:	00 00       	nop
      58:	cf c1       	rjmp	.+926    	; 0x3f8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	cd c1       	rjmp	.+922    	; 0x3f8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	cb c1       	rjmp	.+918    	; 0x3f8 <__bad_interrupt>
      62:	00 00       	nop
      64:	c9 c1       	rjmp	.+914    	; 0x3f8 <__bad_interrupt>
      66:	00 00       	nop
      68:	c7 c1       	rjmp	.+910    	; 0x3f8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	c5 c1       	rjmp	.+906    	; 0x3f8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c3 c1       	rjmp	.+902    	; 0x3f8 <__bad_interrupt>
      72:	00 00       	nop
      74:	c1 c1       	rjmp	.+898    	; 0x3f8 <__bad_interrupt>
      76:	00 00       	nop
      78:	bf c1       	rjmp	.+894    	; 0x3f8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	bd c1       	rjmp	.+890    	; 0x3f8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	bb c1       	rjmp	.+886    	; 0x3f8 <__bad_interrupt>
      82:	00 00       	nop
      84:	b9 c1       	rjmp	.+882    	; 0x3f8 <__bad_interrupt>
      86:	00 00       	nop
      88:	b7 c1       	rjmp	.+878    	; 0x3f8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b5 c1       	rjmp	.+874    	; 0x3f8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	b3 c1       	rjmp	.+870    	; 0x3f8 <__bad_interrupt>
      92:	00 00       	nop
      94:	b1 c1       	rjmp	.+866    	; 0x3f8 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4296>:
      98:	1b 5b 33 36 6d 52 4e 44 49 53 20 48 6f 73 74 20     .[36mRNDIS Host 
      a8:	44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b     Demo running....
      b8:	5b 33 37 6d 00                                      [37m.

000000bd <__c.4305>:
      bd:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
      cd:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

000000da <__c.4310>:
      da:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
      ea:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
      fa:	00                                                  .

000000fb <__c.4315>:
      fb:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     10b:	61 74 61 2e 0d 0a 00                                ata....

00000112 <__c.4318>:
     112:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     122:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     132:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

0000013c <__c.4320>:
     13c:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     14c:	69 63 65 2e 0d 0a 00                                ice....

00000153 <__c.4322>:
     153:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     163:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000016d <__c.4324>:
     16d:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     17d:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     18d:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     19d:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1ad:	37 6d 00                                            7m.

000001b0 <__c.4327>:
     1b0:	1b 5b 33 31 6d 45 72 72 6f 72 20 49 6e 69 74 69     .[31mError Initi
     1c0:	61 6c 69 7a 69 6e 67 20 44 65 76 69 63 65 2e 0d     alizing Device..
     1d0:	0a 20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a     . -- Error Code:
     1e0:	20 25 64 0d 0a 1b 5b 33 37 6d 00                     %d...[37m.

000001eb <__c.4329>:
     1eb:	44 65 76 69 63 65 20 4d 61 78 20 54 72 61 6e 73     Device Max Trans
     1fb:	66 65 72 20 53 69 7a 65 3a 20 25 6c 75 20 62 79     fer Size: %lu by
     20b:	74 65 73 2e 0d 0a 00                                tes....

00000212 <__c.4332>:
     212:	1b 5b 33 31 6d 45 72 72 6f 72 20 53 65 74 74 69     .[31mError Setti
     222:	6e 67 20 44 65 76 69 63 65 20 50 61 63 6b 65 74     ng Device Packet
     232:	20 46 69 6c 74 65 72 2e 0d 0a 20 2d 2d 20 45 72      Filter... -- Er
     242:	72 6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b     ror Code: %d...[
     252:	33 37 6d 00                                         37m.

00000256 <__c.4335>:
     256:	1b 5b 33 31 6d 45 72 72 6f 72 20 47 65 74 74 69     .[31mError Getti
     266:	6e 67 20 56 65 6e 64 6f 72 20 49 44 2e 0d 0a 20     ng Vendor ID... 
     276:	2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25     -- Error Code: %
     286:	64 0d 0a 1b 5b 33 37 6d 00                          d...[37m.

0000028f <__c.4337>:
     28f:	44 65 76 69 63 65 20 56 65 6e 64 6f 72 20 49 44     Device Vendor ID
     29f:	3a 20 30 78 25 30 38 6c 58 0d 0a 00                 : 0x%08lX...

000002ab <__c.4339>:
     2ab:	52 4e 44 49 53 20 44 65 76 69 63 65 20 45 6e 75     RNDIS Device Enu
     2bb:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

000002c6 <__c.4344>:
     2c6:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     2d6:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     2e6:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

000002f5 <__c.4351>:
     2f5:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     305:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     315:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     325:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     335:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     345:	1b 5b 33 37 6d 00                                   .[37m.

0000034b <__c.4358>:
     34b:	1b 5b 33 31 6d 50 61 63 6b 65 74 20 52 65 63 65     .[31mPacket Rece
     35b:	70 74 69 6f 6e 20 45 72 72 6f 72 2e 0d 0a 20 2d     ption Error... -
     36b:	2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25 64     - Error Code: %d
     37b:	0d 0a 1b 5b 33 37 6d 00                             ...[37m.

00000383 <__c.4360>:
     383:	2a 2a 2a 50 41 43 4b 45 54 20 28 53 69 7a 65 20     ***PACKET (Size 
     393:	25 64 29 2a 2a 2a 0d 0a 00                          %d)***...

0000039c <__c.4362>:
     39c:	1b 5b 33 31 6d 50 61 63 6b 65 74 20 74 6f 6f 20     .[31mPacket too 
     3ac:	6c 61 72 67 65 2e 0d 0a 1b 5b 33 37 6d 00           large....[37m.

000003ba <__ctors_end>:
     3ba:	11 24       	eor	r1, r1
     3bc:	1f be       	out	0x3f, r1	; 63
     3be:	cf ef       	ldi	r28, 0xFF	; 255
     3c0:	d0 e2       	ldi	r29, 0x20	; 32
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	cd bf       	out	0x3d, r28	; 61

000003c6 <__do_copy_data>:
     3c6:	11 e0       	ldi	r17, 0x01	; 1
     3c8:	a0 e0       	ldi	r26, 0x00	; 0
     3ca:	b1 e0       	ldi	r27, 0x01	; 1
     3cc:	e8 ea       	ldi	r30, 0xA8	; 168
     3ce:	f1 e2       	ldi	r31, 0x21	; 33
     3d0:	00 e0       	ldi	r16, 0x00	; 0
     3d2:	0b bf       	out	0x3b, r16	; 59
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <__do_copy_data+0x14>
     3d6:	07 90       	elpm	r0, Z+
     3d8:	0d 92       	st	X+, r0
     3da:	a6 32       	cpi	r26, 0x26	; 38
     3dc:	b1 07       	cpc	r27, r17
     3de:	d9 f7       	brne	.-10     	; 0x3d6 <__do_copy_data+0x10>
     3e0:	1b be       	out	0x3b, r1	; 59

000003e2 <__do_clear_bss>:
     3e2:	11 e0       	ldi	r17, 0x01	; 1
     3e4:	a6 e2       	ldi	r26, 0x26	; 38
     3e6:	b1 e0       	ldi	r27, 0x01	; 1
     3e8:	01 c0       	rjmp	.+2      	; 0x3ec <.do_clear_bss_start>

000003ea <.do_clear_bss_loop>:
     3ea:	1d 92       	st	X+, r1

000003ec <.do_clear_bss_start>:
     3ec:	ac 34       	cpi	r26, 0x4C	; 76
     3ee:	b1 07       	cpc	r27, r17
     3f0:	e1 f7       	brne	.-8      	; 0x3ea <.do_clear_bss_loop>
     3f2:	1e d2       	rcall	.+1084   	; 0x830 <main>
     3f4:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <_exit>

000003f8 <__bad_interrupt>:
     3f8:	03 ce       	rjmp	.-1018   	; 0x0 <__vectors>

000003fa <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     3fa:	9b b1       	in	r25, 0x0b	; 11
     3fc:	9f 70       	andi	r25, 0x0F	; 15
     3fe:	98 2b       	or	r25, r24
     400:	9b b9       	out	0x0b, r25	; 11
			}
     402:	08 95       	ret

00000404 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     404:	84 b7       	in	r24, 0x34	; 52
     406:	87 7f       	andi	r24, 0xF7	; 247
     408:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     40a:	28 e1       	ldi	r18, 0x18	; 24
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	f8 94       	cli
     410:	20 93 60 00 	sts	0x0060, r18
     414:	10 92 60 00 	sts	0x0060, r1
     418:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	80 e8       	ldi	r24, 0x80	; 128
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	f8 94       	cli
     422:	80 93 61 00 	sts	0x0061, r24
     426:	90 93 61 00 	sts	0x0061, r25
     42a:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     42c:	83 e3       	ldi	r24, 0x33	; 51
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	90 93 cd 00 	sts	0x00CD, r25
     434:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     438:	86 e0       	ldi	r24, 0x06	; 6
     43a:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     43e:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     442:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     446:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     448:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     44a:	8a b1       	in	r24, 0x0a	; 10
     44c:	80 6f       	ori	r24, 0xF0	; 240
     44e:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     450:	8b b1       	in	r24, 0x0b	; 11
     452:	8f 70       	andi	r24, 0x0F	; 15
     454:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     456:	0e 94 bf 0a 	call	0x157e	; 0x157e <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0c 94 85 0d 	jmp	0x1b0a	; 0x1b0a <Serial_CreateStream>

00000462 <EVENT_USB_Host_DeviceAttached>:
}
     462:	8d eb       	ldi	r24, 0xBD	; 189
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     46a:	80 ea       	ldi	r24, 0xA0	; 160
     46c:	c6 cf       	rjmp	.-116    	; 0x3fa <LEDs_SetAllLEDs>

0000046e <EVENT_USB_Host_DeviceUnattached>:
     46e:	8a ed       	ldi	r24, 0xDA	; 218
}
     470:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     472:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     476:	80 e1       	ldi	r24, 0x10	; 16
     478:	c0 cf       	rjmp	.-128    	; 0x3fa <LEDs_SetAllLEDs>

0000047a <EVENT_USB_Host_DeviceEnumerationComplete>:
     47a:	1f 93       	push	r17
}
     47c:	cf 93       	push	r28

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     47e:	df 93       	push	r29
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	2a 97       	sbiw	r28, 0x0a	; 10
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
	puts_P(PSTR("Getting Config Data.\r\n"));
     490:	8b ef       	ldi	r24, 0xFB	; 251
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     498:	0e d2       	rcall	.+1052   	; 0x8b6 <ProcessConfigurationDescriptor>
     49a:	18 2f       	mov	r17, r24
     49c:	88 23       	and	r24, r24
     49e:	01 f1       	breq	.+64     	; 0x4e0 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
     4a0:	81 30       	cpi	r24, 0x01	; 1
	{
		if (ErrorCode == ControlError)
     4a2:	19 f4       	brne	.+6      	; 0x4aa <EVENT_USB_Host_DeviceEnumerationComplete+0x30>
     4a4:	82 e1       	ldi	r24, 0x12	; 18
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <EVENT_USB_Host_DeviceEnumerationComplete+0x34>
     4aa:	8c e3       	ldi	r24, 0x3C	; 60
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <puts_P>
     4b2:	00 d0       	rcall	.+0      	; 0x4b4 <EVENT_USB_Host_DeviceEnumerationComplete+0x3a>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <EVENT_USB_Host_DeviceEnumerationComplete+0x3c>
     4b6:	ed b7       	in	r30, 0x3d	; 61
     4b8:	fe b7       	in	r31, 0x3e	; 62
     4ba:	31 96       	adiw	r30, 0x01	; 1
     4bc:	23 e5       	ldi	r18, 0x53	; 83
     4be:	31 e0       	ldi	r19, 0x01	; 1
     4c0:	ad b7       	in	r26, 0x3d	; 61
     4c2:	be b7       	in	r27, 0x3e	; 62
     4c4:	12 96       	adiw	r26, 0x02	; 2
     4c6:	3c 93       	st	X, r19
     4c8:	2e 93       	st	-X, r18
     4ca:	11 97       	sbiw	r26, 0x01	; 1
     4cc:	12 83       	std	Z+2, r17	; 0x02
     4ce:	13 82       	std	Z+3, r1	; 0x03
     4d0:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
     4d4:	0f 90       	pop	r0

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	80 e9       	ldi	r24, 0x90	; 144
     4de:	99 c0       	rjmp	.+306    	; 0x612 <EVENT_USB_Host_DeviceEnumerationComplete+0x198>
     4e0:	81 e0       	ldi	r24, 0x01	; 1
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     4e2:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <USB_Host_SetDeviceConfiguration>
     4e6:	88 23       	and	r24, r24
     4e8:	79 f0       	breq	.+30     	; 0x508 <EVENT_USB_Host_DeviceEnumerationComplete+0x8e>
     4ea:	00 d0       	rcall	.+0      	; 0x4ec <EVENT_USB_Host_DeviceEnumerationComplete+0x72>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     4ec:	00 d0       	rcall	.+0      	; 0x4ee <EVENT_USB_Host_DeviceEnumerationComplete+0x74>
     4ee:	ed b7       	in	r30, 0x3d	; 61
     4f0:	fe b7       	in	r31, 0x3e	; 62
     4f2:	31 96       	adiw	r30, 0x01	; 1
     4f4:	2d e6       	ldi	r18, 0x6D	; 109
     4f6:	31 e0       	ldi	r19, 0x01	; 1
     4f8:	ad b7       	in	r26, 0x3d	; 61
     4fa:	be b7       	in	r27, 0x3e	; 62
     4fc:	12 96       	adiw	r26, 0x02	; 2
     4fe:	3c 93       	st	X, r19
     500:	2e 93       	st	-X, r18
     502:	11 97       	sbiw	r26, 0x01	; 1
     504:	82 83       	std	Z+2, r24	; 0x02
     506:	e3 cf       	rjmp	.-58     	; 0x4ce <EVENT_USB_Host_DeviceEnumerationComplete+0x54>
     508:	80 e0       	ldi	r24, 0x00	; 0
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	uint16_t DeviceMaxPacketSize;
	if ((ErrorCode = RNDIS_InitializeDevice(1024, &DeviceMaxPacketSize)) != HOST_SENDCONTROL_Successful)
     50a:	94 e0       	ldi	r25, 0x04	; 4
     50c:	be 01       	movw	r22, r28
     50e:	6f 5f       	subi	r22, 0xFF	; 255
     510:	7f 4f       	sbci	r23, 0xFF	; 255
     512:	a2 d2       	rcall	.+1348   	; 0xa58 <RNDIS_InitializeDevice>
     514:	88 23       	and	r24, r24
     516:	41 f0       	breq	.+16     	; 0x528 <EVENT_USB_Host_DeviceEnumerationComplete+0xae>
     518:	00 d0       	rcall	.+0      	; 0x51a <EVENT_USB_Host_DeviceEnumerationComplete+0xa0>
     51a:	00 d0       	rcall	.+0      	; 0x51c <EVENT_USB_Host_DeviceEnumerationComplete+0xa2>
	{
		printf_P(PSTR(ESC_FG_RED "Error Initializing Device.\r\n"
     51c:	ed b7       	in	r30, 0x3d	; 61
     51e:	fe b7       	in	r31, 0x3e	; 62
     520:	31 96       	adiw	r30, 0x01	; 1
     522:	20 eb       	ldi	r18, 0xB0	; 176
     524:	31 e0       	ldi	r19, 0x01	; 1
     526:	41 c0       	rjmp	.+130    	; 0x5aa <EVENT_USB_Host_DeviceEnumerationComplete+0x130>
     528:	00 d0       	rcall	.+0      	; 0x52a <EVENT_USB_Host_DeviceEnumerationComplete+0xb0>
     52a:	00 d0       	rcall	.+0      	; 0x52c <EVENT_USB_Host_DeviceEnumerationComplete+0xb2>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	printf_P(PSTR("Device Max Transfer Size: %lu bytes.\r\n"), DeviceMaxPacketSize);
     52c:	8b ee       	ldi	r24, 0xEB	; 235
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	ed b7       	in	r30, 0x3d	; 61
     532:	fe b7       	in	r31, 0x3e	; 62
     534:	92 83       	std	Z+2, r25	; 0x02
     536:	81 83       	std	Z+1, r24	; 0x01
     538:	89 81       	ldd	r24, Y+1	; 0x01
     53a:	9a 81       	ldd	r25, Y+2	; 0x02
     53c:	94 83       	std	Z+4, r25	; 0x04
     53e:	83 83       	std	Z+3, r24	; 0x03
     540:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
     544:	8d e0       	ldi	r24, 0x0D	; 13
     546:	90 e0       	ldi	r25, 0x00	; 0

	/* We set the default filter to only receive packets we would be interested in */
	uint32_t PacketFilter = (REMOTE_NDIS_PACKET_DIRECTED | REMOTE_NDIS_PACKET_BROADCAST | REMOTE_NDIS_PACKET_ALL_MULTICAST);
     548:	a0 e0       	ldi	r26, 0x00	; 0
     54a:	b0 e0       	ldi	r27, 0x00	; 0
     54c:	8f 83       	std	Y+7, r24	; 0x07
     54e:	98 87       	std	Y+8, r25	; 0x08
     550:	a9 87       	std	Y+9, r26	; 0x09
     552:	ba 87       	std	Y+10, r27	; 0x0a
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
	if ((ErrorCode = RNDIS_SetRNDISProperty(OID_GEN_CURRENT_PACKET_FILTER,
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	6e e0       	ldi	r22, 0x0E	; 14
     55e:	71 e0       	ldi	r23, 0x01	; 1
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	ae 01       	movw	r20, r28
     566:	49 5f       	subi	r20, 0xF9	; 249
     568:	5f 4f       	sbci	r21, 0xFF	; 255
     56a:	24 e0       	ldi	r18, 0x04	; 4
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	e6 d2       	rcall	.+1484   	; 0xb3c <RNDIS_SetRNDISProperty>
     570:	88 23       	and	r24, r24
     572:	41 f0       	breq	.+16     	; 0x584 <EVENT_USB_Host_DeviceEnumerationComplete+0x10a>
     574:	00 d0       	rcall	.+0      	; 0x576 <EVENT_USB_Host_DeviceEnumerationComplete+0xfc>
     576:	00 d0       	rcall	.+0      	; 0x578 <EVENT_USB_Host_DeviceEnumerationComplete+0xfe>
     578:	ed b7       	in	r30, 0x3d	; 61
	                                        &PacketFilter, sizeof(PacketFilter))) != HOST_SENDCONTROL_Successful)
	{
		printf_P(PSTR(ESC_FG_RED "Error Setting Device Packet Filter.\r\n"
     57a:	fe b7       	in	r31, 0x3e	; 62
     57c:	31 96       	adiw	r30, 0x01	; 1
     57e:	22 e1       	ldi	r18, 0x12	; 18
     580:	32 e0       	ldi	r19, 0x02	; 2
     582:	13 c0       	rjmp	.+38     	; 0x5aa <EVENT_USB_Host_DeviceEnumerationComplete+0x130>
     584:	6c e0       	ldi	r22, 0x0C	; 12
     586:	71 e0       	ldi	r23, 0x01	; 1
     588:	81 e0       	ldi	r24, 0x01	; 1
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	uint32_t VendorID;
	if ((ErrorCode = RNDIS_QueryRNDISProperty(OID_GEN_VENDOR_ID,
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	ae 01       	movw	r20, r28
     58e:	4d 5f       	subi	r20, 0xFD	; 253
     590:	5f 4f       	sbci	r21, 0xFF	; 255
     592:	24 e0       	ldi	r18, 0x04	; 4
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	74 d3       	rcall	.+1768   	; 0xc80 <RNDIS_QueryRNDISProperty>
     598:	88 23       	and	r24, r24
     59a:	d9 f0       	breq	.+54     	; 0x5d2 <EVENT_USB_Host_DeviceEnumerationComplete+0x158>
     59c:	00 d0       	rcall	.+0      	; 0x59e <EVENT_USB_Host_DeviceEnumerationComplete+0x124>
     59e:	00 d0       	rcall	.+0      	; 0x5a0 <EVENT_USB_Host_DeviceEnumerationComplete+0x126>
     5a0:	ed b7       	in	r30, 0x3d	; 61
     5a2:	fe b7       	in	r31, 0x3e	; 62
	                                          &VendorID, sizeof(VendorID))) != HOST_SENDCONTROL_Successful)
	{
		printf_P(PSTR(ESC_FG_RED "Error Getting Vendor ID.\r\n"
     5a4:	31 96       	adiw	r30, 0x01	; 1
     5a6:	26 e5       	ldi	r18, 0x56	; 86
     5a8:	32 e0       	ldi	r19, 0x02	; 2
     5aa:	ad b7       	in	r26, 0x3d	; 61
     5ac:	be b7       	in	r27, 0x3e	; 62
     5ae:	12 96       	adiw	r26, 0x02	; 2
     5b0:	3c 93       	st	X, r19
     5b2:	2e 93       	st	-X, r18
     5b4:	11 97       	sbiw	r26, 0x01	; 1
     5b6:	82 83       	std	Z+2, r24	; 0x02
     5b8:	13 82       	std	Z+3, r1	; 0x03
     5ba:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     5c6:	80 e9       	ldi	r24, 0x90	; 144
     5c8:	18 df       	rcall	.-464    	; 0x3fa <LEDs_SetAllLEDs>
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <USB_Host_SetDeviceConfiguration>
     5d0:	21 c0       	rjmp	.+66     	; 0x614 <EVENT_USB_Host_DeviceEnumerationComplete+0x19a>
     5d2:	00 d0       	rcall	.+0      	; 0x5d4 <EVENT_USB_Host_DeviceEnumerationComplete+0x15a>
		USB_Host_SetDeviceConfiguration(0);
     5d4:	00 d0       	rcall	.+0      	; 0x5d6 <EVENT_USB_Host_DeviceEnumerationComplete+0x15c>
     5d6:	00 d0       	rcall	.+0      	; 0x5d8 <EVENT_USB_Host_DeviceEnumerationComplete+0x15e>
     5d8:	8f e8       	ldi	r24, 0x8F	; 143
		return;
     5da:	92 e0       	ldi	r25, 0x02	; 2
	}

	printf_P(PSTR("Device Vendor ID: 0x%08lX\r\n"), VendorID);
     5dc:	ed b7       	in	r30, 0x3d	; 61
     5de:	fe b7       	in	r31, 0x3e	; 62
     5e0:	92 83       	std	Z+2, r25	; 0x02
     5e2:	81 83       	std	Z+1, r24	; 0x01
     5e4:	8b 81       	ldd	r24, Y+3	; 0x03
     5e6:	9c 81       	ldd	r25, Y+4	; 0x04
     5e8:	ad 81       	ldd	r26, Y+5	; 0x05
     5ea:	be 81       	ldd	r27, Y+6	; 0x06
     5ec:	83 83       	std	Z+3, r24	; 0x03
     5ee:	94 83       	std	Z+4, r25	; 0x04
     5f0:	a5 83       	std	Z+5, r26	; 0x05
     5f2:	b6 83       	std	Z+6, r27	; 0x06
     5f4:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
     5f8:	8d b7       	in	r24, 0x3d	; 61
     5fa:	9e b7       	in	r25, 0x3e	; 62
     5fc:	06 96       	adiw	r24, 0x06	; 6
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	f8 94       	cli

	puts_P(PSTR("RNDIS Device Enumerated.\r\n"));
     602:	9e bf       	out	0x3e, r25	; 62
     604:	0f be       	out	0x3f, r0	; 63
     606:	8d bf       	out	0x3d, r24	; 61
     608:	8b ea       	ldi	r24, 0xAB	; 171
     60a:	92 e0       	ldi	r25, 0x02	; 2
     60c:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <puts_P>
     610:	80 e6       	ldi	r24, 0x60	; 96
     612:	f3 de       	rcall	.-538    	; 0x3fa <LEDs_SetAllLEDs>
     614:	2a 96       	adiw	r28, 0x0a	; 10
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	f8 94       	cli
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     61a:	de bf       	out	0x3e, r29	; 62
     61c:	0f be       	out	0x3f, r0	; 63
     61e:	cd bf       	out	0x3d, r28	; 61
}
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	08 95       	ret

00000628 <EVENT_USB_Host_HostError>:
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	0f 92       	push	r0
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	89 83       	std	Y+1, r24	; 0x01

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();
     634:	3c d7       	rcall	.+3704   	; 0x14ae <USB_Disable>
     636:	00 d0       	rcall	.+0      	; 0x638 <EVENT_USB_Host_HostError+0x10>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     638:	00 d0       	rcall	.+0      	; 0x63a <EVENT_USB_Host_HostError+0x12>
     63a:	ed b7       	in	r30, 0x3d	; 61
     63c:	fe b7       	in	r31, 0x3e	; 62
     63e:	31 96       	adiw	r30, 0x01	; 1
     640:	26 ec       	ldi	r18, 0xC6	; 198
     642:	32 e0       	ldi	r19, 0x02	; 2
     644:	ad b7       	in	r26, 0x3d	; 61
     646:	be b7       	in	r27, 0x3e	; 62
     648:	12 96       	adiw	r26, 0x02	; 2
     64a:	3c 93       	st	X, r19
     64c:	2e 93       	st	-X, r18
     64e:	11 97       	sbiw	r26, 0x01	; 1
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	82 83       	std	Z+2, r24	; 0x02
     654:	13 82       	std	Z+3, r1	; 0x03
     656:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
     65a:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	80 e9       	ldi	r24, 0x90	; 144
     664:	ca de       	rcall	.-620    	; 0x3fa <LEDs_SetAllLEDs>
     666:	ff cf       	rjmp	.-2      	; 0x666 <EVENT_USB_Host_HostError+0x3e>

00000668 <EVENT_USB_Host_DeviceEnumerationFailed>:
     668:	90 91 37 01 	lds	r25, 0x0137
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     66c:	2d b7       	in	r18, 0x3d	; 61
     66e:	3e b7       	in	r19, 0x3e	; 62
     670:	28 50       	subi	r18, 0x08	; 8
     672:	30 40       	sbci	r19, 0x00	; 0
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	3e bf       	out	0x3e, r19	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	2d bf       	out	0x3d, r18	; 61
     67e:	ed b7       	in	r30, 0x3d	; 61
     680:	fe b7       	in	r31, 0x3e	; 62
     682:	31 96       	adiw	r30, 0x01	; 1
     684:	25 ef       	ldi	r18, 0xF5	; 245
     686:	32 e0       	ldi	r19, 0x02	; 2
     688:	ad b7       	in	r26, 0x3d	; 61
     68a:	be b7       	in	r27, 0x3e	; 62
     68c:	12 96       	adiw	r26, 0x02	; 2
     68e:	3c 93       	st	X, r19
     690:	2e 93       	st	-X, r18
     692:	11 97       	sbiw	r26, 0x01	; 1
     694:	82 83       	std	Z+2, r24	; 0x02
     696:	13 82       	std	Z+3, r1	; 0x03
     698:	64 83       	std	Z+4, r22	; 0x04
     69a:	15 82       	std	Z+5, r1	; 0x05
     69c:	96 83       	std	Z+6, r25	; 0x06
     69e:	17 82       	std	Z+7, r1	; 0x07
     6a0:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     6a4:	2d b7       	in	r18, 0x3d	; 61
     6a6:	3e b7       	in	r19, 0x3e	; 62
     6a8:	28 5f       	subi	r18, 0xF8	; 248
     6aa:	3f 4f       	sbci	r19, 0xFF	; 255
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	f8 94       	cli
     6b0:	3e bf       	out	0x3e, r19	; 62
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	2d bf       	out	0x3d, r18	; 61
     6b6:	80 e9       	ldi	r24, 0x90	; 144
     6b8:	a0 ce       	rjmp	.-704    	; 0x3fa <LEDs_SetAllLEDs>

000006ba <RNDISHost_Task>:
     6ba:	8f 92       	push	r8
}
     6bc:	9f 92       	push	r9

/** Task to read in data received from the attached RNDIS device and print it to the serial port.
 */
void RNDISHost_Task(void)
{
     6be:	af 92       	push	r10
     6c0:	bf 92       	push	r11
     6c2:	cf 92       	push	r12
     6c4:	df 92       	push	r13
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	00 d0       	rcall	.+0      	; 0x6d4 <RNDISHost_Task+0x1a>
     6d4:	cd b7       	in	r28, 0x3d	; 61
     6d6:	de b7       	in	r29, 0x3e	; 62
	Pipe_Freeze();

	printf("\r\n\r\n");

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     6d8:	8d b6       	in	r8, 0x3d	; 61
     6da:	9e b6       	in	r9, 0x3e	; 62

/** Task to read in data received from the attached RNDIS device and print it to the serial port.
 */
void RNDISHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     6dc:	80 91 37 01 	lds	r24, 0x0137
     6e0:	8b 30       	cpi	r24, 0x0B	; 11
     6e2:	09 f0       	breq	.+2      	; 0x6e6 <RNDISHost_Task+0x2c>
     6e4:	91 c0       	rjmp	.+290    	; 0x808 <RNDISHost_Task+0x14e>
	  return;

	uint8_t ErrorCode;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     6e6:	80 e2       	ldi	r24, 0x20	; 32
     6e8:	88 de       	rcall	.-752    	; 0x3fa <LEDs_SetAllLEDs>
     6ea:	ce 01       	movw	r24, r28

	uint16_t PacketLength;
	if ((ErrorCode = RNDIS_GetPacketLength(&PacketLength)) != HOST_SENDCONTROL_Successful)
     6ec:	01 96       	adiw	r24, 0x01	; 1
     6ee:	70 d3       	rcall	.+1760   	; 0xdd0 <RNDIS_GetPacketLength>
     6f0:	88 23       	and	r24, r24
     6f2:	b1 f0       	breq	.+44     	; 0x720 <RNDISHost_Task+0x66>
     6f4:	00 d0       	rcall	.+0      	; 0x6f6 <RNDISHost_Task+0x3c>
     6f6:	00 d0       	rcall	.+0      	; 0x6f8 <RNDISHost_Task+0x3e>
	{
		printf_P(PSTR(ESC_FG_RED "Packet Reception Error.\r\n"
     6f8:	ed b7       	in	r30, 0x3d	; 61
     6fa:	fe b7       	in	r31, 0x3e	; 62
     6fc:	31 96       	adiw	r30, 0x01	; 1
     6fe:	2b e4       	ldi	r18, 0x4B	; 75
     700:	33 e0       	ldi	r19, 0x03	; 3
     702:	ad b7       	in	r26, 0x3d	; 61
     704:	be b7       	in	r27, 0x3e	; 62
     706:	12 96       	adiw	r26, 0x02	; 2
     708:	3c 93       	st	X, r19
     70a:	2e 93       	st	-X, r18
     70c:	11 97       	sbiw	r26, 0x01	; 1
     70e:	82 83       	std	Z+2, r24	; 0x02
     710:	13 82       	std	Z+3, r1	; 0x03
     712:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
		return;
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	74 c0       	rjmp	.+232    	; 0x808 <RNDISHost_Task+0x14e>
     720:	89 81       	ldd	r24, Y+1	; 0x01
     722:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	if (!(PacketLength))
     724:	00 97       	sbiw	r24, 0x00	; 0
     726:	09 f4       	brne	.+2      	; 0x72a <RNDISHost_Task+0x70>
     728:	6f c0       	rjmp	.+222    	; 0x808 <RNDISHost_Task+0x14e>
     72a:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     72e:	8f 7b       	andi	r24, 0xBF	; 191
     730:	80 93 a9 00 	sts	0x00A9, r24
     734:	00 d0       	rcall	.+0      	; 0x736 <RNDISHost_Task+0x7c>
     736:	00 d0       	rcall	.+0      	; 0x738 <RNDISHost_Task+0x7e>
	  return;

	Pipe_Unfreeze();

	printf_P(PSTR("***PACKET (Size %d)***\r\n"), PacketLength);
     738:	83 e8       	ldi	r24, 0x83	; 131
     73a:	93 e0       	ldi	r25, 0x03	; 3
     73c:	ed b7       	in	r30, 0x3d	; 61
     73e:	fe b7       	in	r31, 0x3e	; 62
     740:	92 83       	std	Z+2, r25	; 0x02
     742:	81 83       	std	Z+1, r24	; 0x01
     744:	89 81       	ldd	r24, Y+1	; 0x01
     746:	9a 81       	ldd	r25, Y+2	; 0x02
     748:	94 83       	std	Z+4, r25	; 0x04
     74a:	83 83       	std	Z+3, r24	; 0x03
     74c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <printf_P>
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0

	if (PacketLength > 1024)
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	69 81       	ldd	r22, Y+1	; 0x01
     75a:	7a 81       	ldd	r23, Y+2	; 0x02
     75c:	f4 e0       	ldi	r31, 0x04	; 4
     75e:	61 30       	cpi	r22, 0x01	; 1
     760:	7f 07       	cpc	r23, r31
     762:	50 f0       	brcs	.+20     	; 0x778 <RNDISHost_Task+0xbe>
     764:	8c e9       	ldi	r24, 0x9C	; 156
     766:	93 e0       	ldi	r25, 0x03	; 3
	{
		puts_P(PSTR(ESC_FG_RED "Packet too large.\r\n" ESC_FG_WHITE));
     768:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <puts_P>
     76c:	89 81       	ldd	r24, Y+1	; 0x01
     76e:	9a 81       	ldd	r25, Y+2	; 0x02
		Pipe_Discard_Stream(PacketLength, NULL);
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	53 d5       	rcall	.+2726   	; 0x121c <Pipe_Discard_Stream>
     776:	38 c0       	rjmp	.+112    	; 0x7e8 <RNDISHost_Task+0x12e>
     778:	bd b6       	in	r11, 0x3d	; 61
     77a:	8d b7       	in	r24, 0x3d	; 61
     77c:	9e b7       	in	r25, 0x3e	; 62
     77e:	86 1b       	sub	r24, r22
	}
	else
	{
		uint8_t PacketBuffer[PacketLength];
     780:	97 0b       	sbc	r25, r23
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	f8 94       	cli
     786:	9e bf       	out	0x3e, r25	; 62
     788:	0f be       	out	0x3f, r0	; 63
     78a:	8d bf       	out	0x3d, r24	; 61
     78c:	0d b7       	in	r16, 0x3d	; 61
     78e:	1e b7       	in	r17, 0x3e	; 62
     790:	0f 5f       	subi	r16, 0xFF	; 255
     792:	1f 4f       	sbci	r17, 0xFF	; 255
     794:	c8 01       	movw	r24, r16
     796:	40 e0       	ldi	r20, 0x00	; 0
     798:	50 e0       	ldi	r21, 0x00	; 0

		Pipe_Read_Stream_LE(&PacketBuffer, PacketLength, NULL);
     79a:	8b d5       	rcall	.+2838   	; 0x12b2 <Pipe_Read_Stream_LE>
     79c:	78 01       	movw	r14, r16
     79e:	00 e0       	ldi	r16, 0x00	; 0
     7a0:	10 e0       	ldi	r17, 0x00	; 0
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	c8 2e       	mov	r12, r24

		for (uint16_t i = 0; i < PacketLength; i++)
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	d8 2e       	mov	r13, r24
		  printf("0x%02x ", PacketBuffer[i]);
     7aa:	18 c0       	rjmp	.+48     	; 0x7dc <RNDISHost_Task+0x122>
     7ac:	d7 01       	movw	r26, r14
     7ae:	8d 91       	ld	r24, X+
     7b0:	7d 01       	movw	r14, r26
	{
		uint8_t PacketBuffer[PacketLength];

		Pipe_Read_Stream_LE(&PacketBuffer, PacketLength, NULL);

		for (uint16_t i = 0; i < PacketLength; i++)
     7b2:	00 d0       	rcall	.+0      	; 0x7b4 <RNDISHost_Task+0xfa>
		  printf("0x%02x ", PacketBuffer[i]);
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <RNDISHost_Task+0xfc>
     7b6:	ed b7       	in	r30, 0x3d	; 61
     7b8:	fe b7       	in	r31, 0x3e	; 62
     7ba:	31 96       	adiw	r30, 0x01	; 1
     7bc:	ad b7       	in	r26, 0x3d	; 61
     7be:	be b7       	in	r27, 0x3e	; 62
     7c0:	12 96       	adiw	r26, 0x02	; 2
     7c2:	dc 92       	st	X, r13
     7c4:	ce 92       	st	-X, r12
     7c6:	11 97       	sbiw	r26, 0x01	; 1
     7c8:	82 83       	std	Z+2, r24	; 0x02
     7ca:	13 82       	std	Z+3, r1	; 0x03
     7cc:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <printf>
     7d0:	0f 5f       	subi	r16, 0xFF	; 255
     7d2:	1f 4f       	sbci	r17, 0xFF	; 255
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
	{
		uint8_t PacketBuffer[PacketLength];

		Pipe_Read_Stream_LE(&PacketBuffer, PacketLength, NULL);

		for (uint16_t i = 0; i < PacketLength; i++)
     7d8:	0f 90       	pop	r0
     7da:	0f 90       	pop	r0
     7dc:	89 81       	ldd	r24, Y+1	; 0x01
     7de:	9a 81       	ldd	r25, Y+2	; 0x02
     7e0:	08 17       	cp	r16, r24
     7e2:	19 07       	cpc	r17, r25
     7e4:	18 f3       	brcs	.-58     	; 0x7ac <RNDISHost_Task+0xf2>
     7e6:	bd be       	out	0x3d, r11	; 61
     7e8:	80 91 a6 00 	lds	r24, 0x00A6
     7ec:	8e 77       	andi	r24, 0x7E	; 126
     7ee:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     7f2:	80 91 a9 00 	lds	r24, 0x00A9
     7f6:	80 64       	ori	r24, 0x40	; 64
     7f8:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     7fc:	88 e0       	ldi	r24, 0x08	; 8
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <puts>
	}

	Pipe_ClearIN();
	Pipe_Freeze();

	printf("\r\n\r\n");
     804:	80 e6       	ldi	r24, 0x60	; 96
     806:	f9 dd       	rcall	.-1038   	; 0x3fa <LEDs_SetAllLEDs>
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	f8 94       	cli

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     80c:	9e be       	out	0x3e, r9	; 62
     80e:	0f be       	out	0x3f, r0	; 63
     810:	8d be       	out	0x3d, r8	; 61
}
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	1f 91       	pop	r17
     81c:	0f 91       	pop	r16
     81e:	ff 90       	pop	r15
     820:	ef 90       	pop	r14
     822:	df 90       	pop	r13
     824:	cf 90       	pop	r12
     826:	bf 90       	pop	r11
     828:	af 90       	pop	r10
     82a:	9f 90       	pop	r9
     82c:	8f 90       	pop	r8
     82e:	08 95       	ret

00000830 <main>:
     830:	e9 dd       	rcall	.-1070   	; 0x404 <SetupHardware>
     832:	88 e9       	ldi	r24, 0x98	; 152
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <puts_P>
 */
int main(void)
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "RNDIS Host Demo running.\r\n" ESC_FG_WHITE));
     83a:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     83c:	de dd       	rcall	.-1092   	; 0x3fa <LEDs_SetAllLEDs>
     83e:	78 94       	sei
     840:	3c df       	rcall	.-392    	; 0x6ba <RNDISHost_Task>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     842:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <USB_USBTask>
	GlobalInterruptEnable();

	for (;;)
	{
		RNDISHost_Task();
     846:	fc cf       	rjmp	.-8      	; 0x840 <main+0x10>

00000848 <DComp_NextCDCControlInterface>:
 *  This comparator searches for the next Interface descriptor of the correct CDC control Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCControlInterface(void* CurrentDescriptor)
{
     848:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     84a:	81 81       	ldd	r24, Z+1	; 0x01
     84c:	84 30       	cpi	r24, 0x04	; 4
     84e:	49 f4       	brne	.+18     	; 0x862 <DComp_NextCDCControlInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct control interface found */
		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
     850:	85 81       	ldd	r24, Z+5	; 0x05
     852:	82 30       	cpi	r24, 0x02	; 2
     854:	31 f4       	brne	.+12     	; 0x862 <DComp_NextCDCControlInterface+0x1a>
     856:	86 81       	ldd	r24, Z+6	; 0x06
     858:	82 30       	cpi	r24, 0x02	; 2
     85a:	19 f4       	brne	.+6      	; 0x862 <DComp_NextCDCControlInterface+0x1a>
		    (Interface->SubClass == CDC_CSCP_ACMSubclass) &&
     85c:	87 81       	ldd	r24, Z+7	; 0x07
     85e:	8f 3f       	cpi	r24, 0xFF	; 255
     860:	11 f0       	breq	.+4      	; 0x866 <DComp_NextCDCControlInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     862:	82 e0       	ldi	r24, 0x02	; 2
     864:	08 95       	ret
		/* Check the CDC descriptor class, subclass and protocol, break out if correct control interface found */
		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
		    (Interface->SubClass == CDC_CSCP_ACMSubclass) &&
		    (Interface->Protocol == CDC_CSCP_VendorSpecificProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     866:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     868:	08 95       	ret

0000086a <DComp_NextCDCDataInterface>:
 *  This comparator searches for the next Interface descriptor of the correct CDC data Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCDataInterface(void* CurrentDescriptor)
{
     86a:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     86c:	81 81       	ldd	r24, Z+1	; 0x01
     86e:	84 30       	cpi	r24, 0x04	; 4
     870:	49 f4       	brne	.+18     	; 0x884 <DComp_NextCDCDataInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
     872:	85 81       	ldd	r24, Z+5	; 0x05
     874:	8a 30       	cpi	r24, 0x0A	; 10
     876:	31 f4       	brne	.+12     	; 0x884 <DComp_NextCDCDataInterface+0x1a>
     878:	86 81       	ldd	r24, Z+6	; 0x06
     87a:	88 23       	and	r24, r24
     87c:	19 f4       	brne	.+6      	; 0x884 <DComp_NextCDCDataInterface+0x1a>
		    (Interface->SubClass == CDC_CSCP_NoDataSubclass) &&
     87e:	87 81       	ldd	r24, Z+7	; 0x07
     880:	88 23       	and	r24, r24
     882:	11 f0       	breq	.+4      	; 0x888 <DComp_NextCDCDataInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     884:	82 e0       	ldi	r24, 0x02	; 2
     886:	08 95       	ret
		/* Check the CDC descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
		    (Interface->SubClass == CDC_CSCP_NoDataSubclass) &&
		    (Interface->Protocol == CDC_CSCP_NoDataProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     888:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     88a:	08 95       	ret

0000088c <DComp_NextCDCDataInterfaceEndpoint>:
 *  using a different comparator to determine if it is another CDC class interface).
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCDataInterfaceEndpoint(void* CurrentDescriptor)
{
     88c:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     88e:	81 81       	ldd	r24, Z+1	; 0x01
     890:	85 30       	cpi	r24, 0x05	; 5
     892:	49 f4       	brne	.+18     	; 0x8a6 <DComp_NextCDCDataInterfaceEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK or INTERRUPT type endpoint found */
		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) ||
     894:	83 81       	ldd	r24, Z+3	; 0x03
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	83 70       	andi	r24, 0x03	; 3
     89a:	90 70       	andi	r25, 0x00	; 0
     89c:	02 97       	sbiw	r24, 0x02	; 2
     89e:	82 30       	cpi	r24, 0x02	; 2
     8a0:	91 05       	cpc	r25, r1
     8a2:	18 f4       	brcc	.+6      	; 0x8aa <DComp_NextCDCDataInterfaceEndpoint+0x1e>
     8a4:	04 c0       	rjmp	.+8      	; 0x8ae <DComp_NextCDCDataInterfaceEndpoint+0x22>
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
     8a6:	84 30       	cpi	r24, 0x04	; 4
     8a8:	21 f0       	breq	.+8      	; 0x8b2 <DComp_NextCDCDataInterfaceEndpoint+0x26>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
     8aa:	82 e0       	ldi	r24, 0x02	; 2
     8ac:	08 95       	ret

		/* Check the endpoint type, break out if correct BULK or INTERRUPT type endpoint found */
		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) ||
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	08 95       	ret
		}
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
     8b2:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     8b4:	08 95       	ret

000008b6 <ProcessConfigurationDescriptor>:
 *  This routine searches for a RNDIS interface descriptor containing bulk data IN and OUT endpoints, and an interrupt event endpoint.
 *
 *  \return An error code from the \ref RNDISHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     8b6:	8f 92       	push	r8
     8b8:	9f 92       	push	r9
     8ba:	af 92       	push	r10
     8bc:	bf 92       	push	r11
     8be:	cf 92       	push	r12
     8c0:	df 92       	push	r13
     8c2:	ef 92       	push	r14
     8c4:	ff 92       	push	r15
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
     8d2:	c4 50       	subi	r28, 0x04	; 4
     8d4:	d2 40       	sbci	r29, 0x02	; 2
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	de bf       	out	0x3e, r29	; 62
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     8e0:	ae 01       	movw	r20, r28
     8e2:	4b 5f       	subi	r20, 0xFB	; 251
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	5c 83       	std	Y+4, r21	; 0x04
     8e8:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint         = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint        = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint   = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	7e 01       	movw	r14, r28
     8ee:	08 94       	sec
     8f0:	e1 1c       	adc	r14, r1
     8f2:	f1 1c       	adc	r15, r1
     8f4:	b7 01       	movw	r22, r14
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	32 e0       	ldi	r19, 0x02	; 2
     8fa:	f5 d6       	rcall	.+3562   	; 0x16e6 <USB_Host_GetDeviceConfigDescriptor>
     8fc:	85 30       	cpi	r24, 0x05	; 5
     8fe:	09 f4       	brne	.+2      	; 0x902 <ProcessConfigurationDescriptor+0x4c>
     900:	6b c0       	rjmp	.+214    	; 0x9d8 <ProcessConfigurationDescriptor+0x122>
     902:	86 30       	cpi	r24, 0x06	; 6
     904:	19 f0       	breq	.+6      	; 0x90c <ProcessConfigurationDescriptor+0x56>
     906:	88 23       	and	r24, r24
     908:	29 f0       	breq	.+10     	; 0x914 <ProcessConfigurationDescriptor+0x5e>
     90a:	02 c0       	rjmp	.+4      	; 0x910 <ProcessConfigurationDescriptor+0x5a>
     90c:	83 e0       	ldi	r24, 0x03	; 3
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     90e:	67 c0       	rjmp	.+206    	; 0x9de <ProcessConfigurationDescriptor+0x128>
     910:	81 e0       	ldi	r24, 0x01	; 1
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     912:	65 c0       	rjmp	.+202    	; 0x9de <ProcessConfigurationDescriptor+0x128>
     914:	cc 24       	eor	r12, r12
	USB_Descriptor_Endpoint_t*  DataINEndpoint         = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint        = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint   = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     916:	dd 24       	eor	r13, r13
     918:	aa 24       	eor	r10, r10
     91a:	bb 24       	eor	r11, r11
     91c:	00 e0       	ldi	r16, 0x00	; 0
     91e:	10 e0       	ldi	r17, 0x00	; 0
     920:	88 24       	eor	r8, r8
     922:	99 24       	eor	r9, r9
     924:	81 14       	cp	r8, r1
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(RNDISControlInterface) ||
     926:	91 04       	cpc	r9, r1
     928:	49 f0       	breq	.+18     	; 0x93c <ProcessConfigurationDescriptor+0x86>
     92a:	c7 01       	movw	r24, r14
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     92c:	be 01       	movw	r22, r28
     92e:	6d 5f       	subi	r22, 0xFD	; 253
     930:	7f 4f       	sbci	r23, 0xFF	; 255
     932:	46 e4       	ldi	r20, 0x46	; 70
     934:	54 e0       	ldi	r21, 0x04	; 4
     936:	2e d7       	rcall	.+3676   	; 0x1794 <USB_GetNextDescriptorComp>
     938:	88 23       	and	r24, r24
     93a:	d1 f0       	breq	.+52     	; 0x970 <ProcessConfigurationDescriptor+0xba>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(RNDISControlInterface) ||
     93c:	c7 01       	movw	r24, r14
     93e:	be 01       	movw	r22, r28
		{
			/* Check if we have already found the control interface's notification endpoint or not */
			if (NotificationEndpoint)
			{
				/* Get the next RNDIS data interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     940:	6d 5f       	subi	r22, 0xFD	; 253
     942:	7f 4f       	sbci	r23, 0xFF	; 255
     944:	c1 14       	cp	r12, r1
     946:	d1 04       	cpc	r13, r1
		if (!(RNDISControlInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextCDCDataInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Check if we have already found the control interface's notification endpoint or not */
			if (NotificationEndpoint)
     948:	59 f0       	breq	.+22     	; 0x960 <ProcessConfigurationDescriptor+0xaa>
     94a:	45 e3       	ldi	r20, 0x35	; 53
     94c:	54 e0       	ldi	r21, 0x04	; 4
			{
				/* Get the next RNDIS data interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     94e:	22 d7       	rcall	.+3652   	; 0x1794 <USB_GetNextDescriptorComp>
     950:	88 23       	and	r24, r24
     952:	09 f0       	breq	.+2      	; 0x956 <ProcessConfigurationDescriptor+0xa0>
     954:	43 c0       	rjmp	.+134    	; 0x9dc <ProcessConfigurationDescriptor+0x126>
     956:	aa 24       	eor	r10, r10
     958:	bb 24       	eor	r11, r11
     95a:	00 e0       	ldi	r16, 0x00	; 0
					return NoCompatibleInterfaceFound;
				}

				/* Clear any found endpoints */
				DataINEndpoint       = NULL;
				DataOUTEndpoint      = NULL;
     95c:	10 e0       	ldi	r17, 0x00	; 0
     95e:	e2 cf       	rjmp	.-60     	; 0x924 <ProcessConfigurationDescriptor+0x6e>
		{
			/* Check if we have already found the control interface's notification endpoint or not */
			if (NotificationEndpoint)
			{
				/* Get the next RNDIS data interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     960:	44 e2       	ldi	r20, 0x24	; 36
     962:	54 e0       	ldi	r21, 0x04	; 4
     964:	17 d7       	rcall	.+3630   	; 0x1794 <USB_GetNextDescriptorComp>
				DataOUTEndpoint      = NULL;
			}
			else
			{
				/* Get the next RNDIS control interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     966:	88 23       	and	r24, r24
     968:	c9 f5       	brne	.+114    	; 0x9dc <ProcessConfigurationDescriptor+0x126>
     96a:	8b 80       	ldd	r8, Y+3	; 0x03
     96c:	9c 80       	ldd	r9, Y+4	; 0x04
     96e:	0e c0       	rjmp	.+28     	; 0x98c <ProcessConfigurationDescriptor+0xd6>
     970:	eb 81       	ldd	r30, Y+3	; 0x03
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Save the interface in case we need to refer back to it later */
				RNDISControlInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     972:	fc 81       	ldd	r31, Y+4	; 0x04
     974:	82 81       	ldd	r24, Z+2	; 0x02
     976:	87 ff       	sbrs	r24, 7
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     978:	06 c0       	rjmp	.+12     	; 0x986 <ProcessConfigurationDescriptor+0xd0>
     97a:	83 81       	ldd	r24, Z+3	; 0x03

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     97c:	83 70       	andi	r24, 0x03	; 3
     97e:	83 30       	cpi	r24, 0x03	; 3
     980:	21 f4       	brne	.+8      	; 0x98a <ProcessConfigurationDescriptor+0xd4>
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
     982:	6f 01       	movw	r12, r30
     984:	03 c0       	rjmp	.+6      	; 0x98c <ProcessConfigurationDescriptor+0xd6>
     986:	5f 01       	movw	r10, r30
     988:	01 c0       	rjmp	.+2      	; 0x98c <ProcessConfigurationDescriptor+0xd6>
			  NotificationEndpoint = EndpointData;
     98a:	8f 01       	movw	r16, r30
     98c:	01 15       	cp	r16, r1
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
     98e:	11 05       	cpc	r17, r1
     990:	49 f2       	breq	.-110    	; 0x924 <ProcessConfigurationDescriptor+0x6e>
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  NotificationEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
     992:	a1 14       	cp	r10, r1
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
     994:	b1 04       	cpc	r11, r1
     996:	31 f2       	breq	.-116    	; 0x924 <ProcessConfigurationDescriptor+0x6e>
     998:	c1 14       	cp	r12, r1
     99a:	d1 04       	cpc	r13, r1
     99c:	09 f4       	brne	.+2      	; 0x9a0 <ProcessConfigurationDescriptor+0xea>
     99e:	c2 cf       	rjmp	.-124    	; 0x924 <ProcessConfigurationDescriptor+0x6e>
     9a0:	f8 01       	movw	r30, r16
     9a2:	24 81       	ldd	r18, Z+4	; 0x04
     9a4:	35 81       	ldd	r19, Z+5	; 0x05
     9a6:	81 e8       	ldi	r24, 0x81	; 129
			DataOUTEndpoint = EndpointData;
		}
	}

	/* Configure the RNDIS data IN pipe */
	Pipe_ConfigurePipe(RNDIS_DATA_IN_PIPE, EP_TYPE_BULK, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     9a8:	62 e0       	ldi	r22, 0x02	; 2
     9aa:	42 81       	ldd	r20, Z+2	; 0x02
     9ac:	01 e0       	ldi	r16, 0x01	; 1
     9ae:	d8 d4       	rcall	.+2480   	; 0x1360 <Pipe_ConfigurePipe>
     9b0:	f5 01       	movw	r30, r10
     9b2:	24 81       	ldd	r18, Z+4	; 0x04
     9b4:	35 81       	ldd	r19, Z+5	; 0x05
     9b6:	82 e0       	ldi	r24, 0x02	; 2
     9b8:	62 e0       	ldi	r22, 0x02	; 2

	/* Configure the RNDIS data OUT pipe */
	Pipe_ConfigurePipe(RNDIS_DATA_OUT_PIPE, EP_TYPE_BULK, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);
     9ba:	42 81       	ldd	r20, Z+2	; 0x02
     9bc:	d1 d4       	rcall	.+2466   	; 0x1360 <Pipe_ConfigurePipe>
     9be:	f6 01       	movw	r30, r12
     9c0:	24 81       	ldd	r18, Z+4	; 0x04
     9c2:	35 81       	ldd	r19, Z+5	; 0x05
     9c4:	83 e8       	ldi	r24, 0x83	; 131
     9c6:	63 e0       	ldi	r22, 0x03	; 3
     9c8:	42 81       	ldd	r20, Z+2	; 0x02

	/* Configure the RNDIS notification pipe */
	Pipe_ConfigurePipe(RNDIS_NOTIFICATION_PIPE, EP_TYPE_INTERRUPT, NotificationEndpoint->EndpointAddress, NotificationEndpoint->EndpointSize, 1);
     9ca:	ca d4       	rcall	.+2452   	; 0x1360 <Pipe_ConfigurePipe>
     9cc:	f6 01       	movw	r30, r12
     9ce:	86 81       	ldd	r24, Z+6	; 0x06
     9d0:	80 93 ad 00 	sts	0x00AD, r24
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	03 c0       	rjmp	.+6      	; 0x9de <ProcessConfigurationDescriptor+0x128>
     9d8:	82 e0       	ldi	r24, 0x02	; 2
	Pipe_SetInterruptPeriod(NotificationEndpoint->PollingIntervalMS);
     9da:	01 c0       	rjmp	.+2      	; 0x9de <ProcessConfigurationDescriptor+0x128>
     9dc:	84 e0       	ldi	r24, 0x04	; 4
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     9de:	cc 5f       	subi	r28, 0xFC	; 252
     9e0:	dd 4f       	sbci	r29, 0xFD	; 253

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	f8 94       	cli
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     9e6:	de bf       	out	0x3e, r29	; 62
     9e8:	0f be       	out	0x3f, r0	; 63
				/* Get the next RNDIS control interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
											  DComp_NextCDCControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
     9ea:	cd bf       	out	0x3d, r28	; 61
	Pipe_ConfigurePipe(RNDIS_NOTIFICATION_PIPE, EP_TYPE_INTERRUPT, NotificationEndpoint->EndpointAddress, NotificationEndpoint->EndpointSize, 1);
	Pipe_SetInterruptPeriod(NotificationEndpoint->PollingIntervalMS);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	ff 90       	pop	r15
     9f6:	ef 90       	pop	r14
     9f8:	df 90       	pop	r13
     9fa:	cf 90       	pop	r12
     9fc:	bf 90       	pop	r11
     9fe:	af 90       	pop	r10
     a00:	9f 90       	pop	r9
     a02:	8f 90       	pop	r8
     a04:	08 95       	ret

00000a06 <RNDIS_SendEncapsulatedCommand>:
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum
 */
uint8_t RNDIS_SendEncapsulatedCommand(void* const Buffer,
                                      const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
     a06:	21 e2       	ldi	r18, 0x21	; 33
     a08:	20 93 2f 01 	sts	0x012F, r18
     a0c:	10 92 30 01 	sts	0x0130, r1
     a10:	10 92 32 01 	sts	0x0132, r1
     a14:	10 92 31 01 	sts	0x0131, r1
     a18:	10 92 34 01 	sts	0x0134, r1
     a1c:	10 92 33 01 	sts	0x0133, r1
     a20:	70 93 36 01 	sts	0x0136, r23
     a24:	60 93 35 01 	sts	0x0135, r22
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     a28:	10 92 a7 00 	sts	0x00A7, r1
		};

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
     a2c:	23 c7       	rjmp	.+3654   	; 0x1874 <USB_Host_SendControlRequest>

00000a2e <RNDIS_GetEncapsulatedResponse>:
     a2e:	21 ea       	ldi	r18, 0xA1	; 161
}
     a30:	20 93 2f 01 	sts	0x012F, r18
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum
 */
uint8_t RNDIS_GetEncapsulatedResponse(void* const Buffer,
                                      const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
     a34:	21 e0       	ldi	r18, 0x01	; 1
     a36:	20 93 30 01 	sts	0x0130, r18
     a3a:	10 92 32 01 	sts	0x0132, r1
     a3e:	10 92 31 01 	sts	0x0131, r1
     a42:	10 92 34 01 	sts	0x0134, r1
     a46:	10 92 33 01 	sts	0x0133, r1
     a4a:	70 93 36 01 	sts	0x0136, r23
     a4e:	60 93 35 01 	sts	0x0135, r22
     a52:	10 92 a7 00 	sts	0x00A7, r1
		};

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
     a56:	0e c7       	rjmp	.+3612   	; 0x1874 <USB_Host_SendControlRequest>

00000a58 <RNDIS_InitializeDevice>:
     a58:	0f 93       	push	r16
}
     a5a:	1f 93       	push	r17
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum or RNDIS_COMMAND_FAILED if the device returned a
 *          logical command failure
 */
uint8_t RNDIS_InitializeDevice(const uint16_t HostMaxPacketSize,
                               uint16_t* const DeviceMaxPacketSize)
{
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
     a64:	cc 54       	subi	r28, 0x4C	; 76
     a66:	d0 40       	sbci	r29, 0x00	; 0
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	f8 94       	cli
     a6c:	de bf       	out	0x3e, r29	; 62
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	cd bf       	out	0x3d, r28	; 61
     a72:	8b 01       	movw	r16, r22
	uint8_t ErrorCode;

	RNDIS_Initialize_Message_t  InitMessage;
	RNDIS_Initialize_Complete_t InitMessageResponse;

	InitMessage.MessageType     = REMOTE_NDIS_INITIALIZE_MSG;
     a74:	42 e0       	ldi	r20, 0x02	; 2
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	49 83       	std	Y+1, r20	; 0x01
     a7e:	5a 83       	std	Y+2, r21	; 0x02
     a80:	6b 83       	std	Y+3, r22	; 0x03
     a82:	7c 83       	std	Y+4, r23	; 0x04
	InitMessage.MessageLength   = sizeof(RNDIS_Initialize_Message_t);
     a84:	48 e1       	ldi	r20, 0x18	; 24
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	4d 83       	std	Y+5, r20	; 0x05
     a8e:	5e 83       	std	Y+6, r21	; 0x06
     a90:	6f 83       	std	Y+7, r22	; 0x07
     a92:	78 87       	std	Y+8, r23	; 0x08
	InitMessage.RequestId       = RequestID++;
     a94:	40 91 26 01 	lds	r20, 0x0126
     a98:	50 91 27 01 	lds	r21, 0x0127
     a9c:	60 91 28 01 	lds	r22, 0x0128
     aa0:	70 91 29 01 	lds	r23, 0x0129
     aa4:	49 87       	std	Y+9, r20	; 0x09
     aa6:	5a 87       	std	Y+10, r21	; 0x0a
     aa8:	6b 87       	std	Y+11, r22	; 0x0b
     aaa:	7c 87       	std	Y+12, r23	; 0x0c
     aac:	4f 5f       	subi	r20, 0xFF	; 255
     aae:	5f 4f       	sbci	r21, 0xFF	; 255
     ab0:	6f 4f       	sbci	r22, 0xFF	; 255
     ab2:	7f 4f       	sbci	r23, 0xFF	; 255
     ab4:	40 93 26 01 	sts	0x0126, r20
     ab8:	50 93 27 01 	sts	0x0127, r21
     abc:	60 93 28 01 	sts	0x0128, r22
     ac0:	70 93 29 01 	sts	0x0129, r23

	InitMessage.MajorVersion    = REMOTE_NDIS_VERSION_MAJOR;
     ac4:	41 e0       	ldi	r20, 0x01	; 1
     ac6:	50 e0       	ldi	r21, 0x00	; 0
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	4d 87       	std	Y+13, r20	; 0x0d
     ace:	5e 87       	std	Y+14, r21	; 0x0e
     ad0:	6f 87       	std	Y+15, r22	; 0x0f
     ad2:	78 8b       	std	Y+16, r23	; 0x10
	InitMessage.MinorVersion    = REMOTE_NDIS_VERSION_MINOR;
     ad4:	19 8a       	std	Y+17, r1	; 0x11
     ad6:	1a 8a       	std	Y+18, r1	; 0x12
     ad8:	1b 8a       	std	Y+19, r1	; 0x13
     ada:	1c 8a       	std	Y+20, r1	; 0x14
	InitMessage.MaxTransferSize = HostMaxPacketSize;
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	8d 8b       	std	Y+21, r24	; 0x15
     ae2:	9e 8b       	std	Y+22, r25	; 0x16
     ae4:	af 8b       	std	Y+23, r26	; 0x17
     ae6:	b8 8f       	std	Y+24, r27	; 0x18

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(&InitMessage,
     ae8:	ce 01       	movw	r24, r28
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	68 e1       	ldi	r22, 0x18	; 24
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	8a df       	rcall	.-236    	; 0xa06 <RNDIS_SendEncapsulatedCommand>
     af2:	88 23       	and	r24, r24
     af4:	b9 f4       	brne	.+46     	; 0xb24 <RNDIS_InitializeDevice+0xcc>
     af6:	ce 01       	movw	r24, r28
	                                               sizeof(RNDIS_Initialize_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(&InitMessageResponse,
     af8:	49 96       	adiw	r24, 0x19	; 25
     afa:	64 e3       	ldi	r22, 0x34	; 52
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	97 df       	rcall	.-210    	; 0xa2e <RNDIS_GetEncapsulatedResponse>
     b00:	88 23       	and	r24, r24
     b02:	81 f4       	brne	.+32     	; 0xb24 <RNDIS_InitializeDevice+0xcc>
     b04:	4d a1       	lds	r20, 0x4d
     b06:	5e a1       	lds	r21, 0x4e
	                                               sizeof(RNDIS_Initialize_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (InitMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
     b08:	6f a1       	lds	r22, 0x4f
     b0a:	78 a5       	lds	r23, 0x68
     b0c:	41 15       	cp	r20, r1
     b0e:	51 05       	cpc	r21, r1
     b10:	61 05       	cpc	r22, r1
     b12:	71 05       	cpc	r23, r1
     b14:	31 f4       	brne	.+12     	; 0xb22 <RNDIS_InitializeDevice+0xca>
     b16:	2d ad       	sts	0x6d, r18
     b18:	3e ad       	sts	0x6e, r19
	  return RNDIS_COMMAND_FAILED;

	*DeviceMaxPacketSize = InitMessageResponse.MaxTransferSize;
     b1a:	f8 01       	movw	r30, r16
     b1c:	31 83       	std	Z+1, r19	; 0x01
     b1e:	20 83       	st	Z, r18
     b20:	01 c0       	rjmp	.+2      	; 0xb24 <RNDIS_InitializeDevice+0xcc>
     b22:	80 ec       	ldi	r24, 0xC0	; 192

	return HOST_SENDCONTROL_Successful;
     b24:	c4 5b       	subi	r28, 0xB4	; 180
	{
		return ErrorCode;
	}

	if (InitMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
	  return RNDIS_COMMAND_FAILED;
     b26:	df 4f       	sbci	r29, 0xFF	; 255

	*DeviceMaxPacketSize = InitMessageResponse.MaxTransferSize;

	return HOST_SENDCONTROL_Successful;
}
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	08 95       	ret

00000b3c <RNDIS_SetRNDISProperty>:
     b3c:	8f 92       	push	r8
     b3e:	9f 92       	push	r9
 *          logical command failure
 */
uint8_t RNDIS_SetRNDISProperty(const uint32_t Oid,
                               void* Buffer,
                               const uint16_t Length)
{
     b40:	af 92       	push	r10
     b42:	bf 92       	push	r11
     b44:	cf 92       	push	r12
     b46:	df 92       	push	r13
     b48:	ef 92       	push	r14
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
     b58:	60 97       	sbiw	r28, 0x10	; 16
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	f8 94       	cli
     b5e:	de bf       	out	0x3e, r29	; 62
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	cd bf       	out	0x3d, r28	; 61
     b64:	6b 01       	movw	r12, r22
     b66:	7c 01       	movw	r14, r24
     b68:	94 2e       	mov	r9, r20
     b6a:	85 2e       	mov	r8, r21

	if (SetMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
	  return RNDIS_COMMAND_FAILED;

	return HOST_SENDCONTROL_Successful;
}
     b6c:	ad b6       	in	r10, 0x3d	; 61
     b6e:	be b6       	in	r11, 0x3e	; 62

	struct
	{
		RNDIS_Set_Message_t SetMessage;
		uint8_t             ContiguousBuffer[Length];
	} SetMessageData;
     b70:	c9 01       	movw	r24, r18
     b72:	4c 96       	adiw	r24, 0x1c	; 28
     b74:	4d b7       	in	r20, 0x3d	; 61
     b76:	5e b7       	in	r21, 0x3e	; 62
     b78:	48 1b       	sub	r20, r24
     b7a:	59 0b       	sbc	r21, r25
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	f8 94       	cli
     b80:	5e bf       	out	0x3e, r21	; 62
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	4d bf       	out	0x3d, r20	; 61
     b86:	0d b7       	in	r16, 0x3d	; 61
     b88:	1e b7       	in	r17, 0x3e	; 62
     b8a:	0f 5f       	subi	r16, 0xFF	; 255
     b8c:	1f 4f       	sbci	r17, 0xFF	; 255

	RNDIS_Set_Complete_t SetMessageResponse;

	SetMessageData.SetMessage.MessageType    = REMOTE_NDIS_SET_MSG;
     b8e:	45 e0       	ldi	r20, 0x05	; 5
     b90:	50 e0       	ldi	r21, 0x00	; 0
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	ad b7       	in	r26, 0x3d	; 61
     b98:	be b7       	in	r27, 0x3e	; 62
     b9a:	11 96       	adiw	r26, 0x01	; 1
     b9c:	4d 93       	st	X+, r20
     b9e:	5d 93       	st	X+, r21
     ba0:	6d 93       	st	X+, r22
     ba2:	7c 93       	st	X, r23
     ba4:	14 97       	sbiw	r26, 0x04	; 4
	SetMessageData.SetMessage.MessageLength  = sizeof(RNDIS_Set_Message_t) + Length;
     ba6:	ac 01       	movw	r20, r24
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	f8 01       	movw	r30, r16
     bae:	44 83       	std	Z+4, r20	; 0x04
     bb0:	55 83       	std	Z+5, r21	; 0x05
     bb2:	66 83       	std	Z+6, r22	; 0x06
     bb4:	77 83       	std	Z+7, r23	; 0x07
	SetMessageData.SetMessage.RequestId      = RequestID++;
     bb6:	80 91 26 01 	lds	r24, 0x0126
     bba:	90 91 27 01 	lds	r25, 0x0127
     bbe:	a0 91 28 01 	lds	r26, 0x0128
     bc2:	b0 91 29 01 	lds	r27, 0x0129
     bc6:	80 87       	std	Z+8, r24	; 0x08
     bc8:	91 87       	std	Z+9, r25	; 0x09
     bca:	a2 87       	std	Z+10, r26	; 0x0a
     bcc:	b3 87       	std	Z+11, r27	; 0x0b
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	a1 1d       	adc	r26, r1
     bd2:	b1 1d       	adc	r27, r1
     bd4:	80 93 26 01 	sts	0x0126, r24
     bd8:	90 93 27 01 	sts	0x0127, r25
     bdc:	a0 93 28 01 	sts	0x0128, r26
     be0:	b0 93 29 01 	sts	0x0129, r27

	SetMessageData.SetMessage.Oid            = Oid;
     be4:	c4 86       	std	Z+12, r12	; 0x0c
     be6:	d5 86       	std	Z+13, r13	; 0x0d
     be8:	e6 86       	std	Z+14, r14	; 0x0e
     bea:	f7 86       	std	Z+15, r15	; 0x0f
	SetMessageData.SetMessage.InformationBufferLength = Length;
     bec:	c9 01       	movw	r24, r18
     bee:	a0 e0       	ldi	r26, 0x00	; 0
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	80 8b       	std	Z+16, r24	; 0x10
     bf4:	91 8b       	std	Z+17, r25	; 0x11
     bf6:	a2 8b       	std	Z+18, r26	; 0x12
     bf8:	b3 8b       	std	Z+19, r27	; 0x13
	SetMessageData.SetMessage.InformationBufferOffset = (sizeof(RNDIS_Set_Message_t) - sizeof(RNDIS_Message_Header_t));
     bfa:	84 e1       	ldi	r24, 0x14	; 20
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	a0 e0       	ldi	r26, 0x00	; 0
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	84 8b       	std	Z+20, r24	; 0x14
     c04:	95 8b       	std	Z+21, r25	; 0x15
     c06:	a6 8b       	std	Z+22, r26	; 0x16
     c08:	b7 8b       	std	Z+23, r27	; 0x17
	SetMessageData.SetMessage.DeviceVcHandle = 0;
     c0a:	10 8e       	std	Z+24, r1	; 0x18
     c0c:	11 8e       	std	Z+25, r1	; 0x19
     c0e:	12 8e       	std	Z+26, r1	; 0x1a
     c10:	13 8e       	std	Z+27, r1	; 0x1b

	memcpy(SetMessageData.ContiguousBuffer, Buffer, Length);
     c12:	8d b7       	in	r24, 0x3d	; 61
     c14:	9e b7       	in	r25, 0x3e	; 62
     c16:	4d 96       	adiw	r24, 0x1d	; 29
     c18:	69 2d       	mov	r22, r9
     c1a:	78 2d       	mov	r23, r8
     c1c:	a9 01       	movw	r20, r18
     c1e:	92 d7       	rcall	.+3876   	; 0x1b44 <memcpy>
     c20:	f8 01       	movw	r30, r16

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(&SetMessageData,
     c22:	64 81       	ldd	r22, Z+4	; 0x04
     c24:	75 81       	ldd	r23, Z+5	; 0x05
     c26:	c8 01       	movw	r24, r16
     c28:	ee de       	rcall	.-548    	; 0xa06 <RNDIS_SendEncapsulatedCommand>
     c2a:	88 23       	and	r24, r24
     c2c:	89 f4       	brne	.+34     	; 0xc50 <RNDIS_SetRNDISProperty+0x114>
     c2e:	ce 01       	movw	r24, r28
     c30:	01 96       	adiw	r24, 0x01	; 1
	                                               SetMessageData.SetMessage.MessageLength)) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(&SetMessageResponse,
     c32:	60 e1       	ldi	r22, 0x10	; 16
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	fb de       	rcall	.-522    	; 0xa2e <RNDIS_GetEncapsulatedResponse>
     c38:	88 23       	and	r24, r24
     c3a:	51 f4       	brne	.+20     	; 0xc50 <RNDIS_SetRNDISProperty+0x114>
     c3c:	4d 85       	ldd	r20, Y+13	; 0x0d
     c3e:	5e 85       	ldd	r21, Y+14	; 0x0e
     c40:	6f 85       	ldd	r22, Y+15	; 0x0f
	                                               sizeof(RNDIS_Set_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (SetMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
     c42:	78 89       	ldd	r23, Y+16	; 0x10
     c44:	41 15       	cp	r20, r1
     c46:	51 05       	cpc	r21, r1
     c48:	61 05       	cpc	r22, r1
     c4a:	71 05       	cpc	r23, r1
     c4c:	09 f0       	breq	.+2      	; 0xc50 <RNDIS_SetRNDISProperty+0x114>
     c4e:	80 ec       	ldi	r24, 0xC0	; 192
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
	  return RNDIS_COMMAND_FAILED;
     c54:	be be       	out	0x3e, r11	; 62

	return HOST_SENDCONTROL_Successful;
}
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	ad be       	out	0x3d, r10	; 61
     c5a:	60 96       	adiw	r28, 0x10	; 16
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	ff 90       	pop	r15
     c70:	ef 90       	pop	r14
     c72:	df 90       	pop	r13
     c74:	cf 90       	pop	r12
     c76:	bf 90       	pop	r11
     c78:	af 90       	pop	r10
     c7a:	9f 90       	pop	r9
     c7c:	8f 90       	pop	r8
     c7e:	08 95       	ret

00000c80 <RNDIS_QueryRNDISProperty>:
     c80:	2f 92       	push	r2
     c82:	3f 92       	push	r3
     c84:	4f 92       	push	r4
 *          logical command failure
 */
uint8_t RNDIS_QueryRNDISProperty(const uint32_t Oid,
                                 void* Buffer,
                                 const uint16_t MaxLength)
{
     c86:	5f 92       	push	r5
     c88:	6f 92       	push	r6
     c8a:	7f 92       	push	r7
     c8c:	9f 92       	push	r9
     c8e:	af 92       	push	r10
     c90:	bf 92       	push	r11
     c92:	cf 92       	push	r12
     c94:	df 92       	push	r13
     c96:	ef 92       	push	r14
     c98:	ff 92       	push	r15
     c9a:	0f 93       	push	r16
     c9c:	1f 93       	push	r17
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	6c 97       	sbiw	r28, 0x1c	; 28
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	6b 01       	movw	r12, r22
     cb4:	7c 01       	movw	r14, r24
     cb6:	94 2e       	mov	r9, r20
     cb8:	05 2f       	mov	r16, r21
     cba:	39 01       	movw	r6, r18
	  return RNDIS_COMMAND_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);

	return HOST_SENDCONTROL_Successful;
}
     cbc:	2d b6       	in	r2, 0x3d	; 61
     cbe:	3e b6       	in	r3, 0x3e	; 62

	struct
	{
		RNDIS_Query_Complete_t QueryMessageResponse;
		uint8_t                ContiguousBuffer[MaxLength];
	} QueryMessageResponseData;
     cc0:	48 e1       	ldi	r20, 0x18	; 24
     cc2:	44 2e       	mov	r4, r20
     cc4:	51 2c       	mov	r5, r1
     cc6:	42 0e       	add	r4, r18
     cc8:	53 1e       	adc	r5, r19
     cca:	8d b7       	in	r24, 0x3d	; 61
     ccc:	9e b7       	in	r25, 0x3e	; 62
     cce:	84 19       	sub	r24, r4
     cd0:	95 09       	sbc	r25, r5
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	9e bf       	out	0x3e, r25	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	8d bf       	out	0x3d, r24	; 61
     cdc:	ad b6       	in	r10, 0x3d	; 61
     cde:	be b6       	in	r11, 0x3e	; 62
     ce0:	08 94       	sec
     ce2:	a1 1c       	adc	r10, r1
     ce4:	b1 1c       	adc	r11, r1

	QueryMessage.MessageType    = REMOTE_NDIS_QUERY_MSG;
     ce6:	84 e0       	ldi	r24, 0x04	; 4
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	a0 e0       	ldi	r26, 0x00	; 0
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	89 83       	std	Y+1, r24	; 0x01
     cf0:	9a 83       	std	Y+2, r25	; 0x02
     cf2:	ab 83       	std	Y+3, r26	; 0x03
     cf4:	bc 83       	std	Y+4, r27	; 0x04
	QueryMessage.MessageLength  = sizeof(RNDIS_Query_Message_t);
     cf6:	8c e1       	ldi	r24, 0x1C	; 28
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	8d 83       	std	Y+5, r24	; 0x05
     d00:	9e 83       	std	Y+6, r25	; 0x06
     d02:	af 83       	std	Y+7, r26	; 0x07
     d04:	b8 87       	std	Y+8, r27	; 0x08
	QueryMessage.RequestId      = RequestID++;
     d06:	80 91 26 01 	lds	r24, 0x0126
     d0a:	90 91 27 01 	lds	r25, 0x0127
     d0e:	a0 91 28 01 	lds	r26, 0x0128
     d12:	b0 91 29 01 	lds	r27, 0x0129
     d16:	89 87       	std	Y+9, r24	; 0x09
     d18:	9a 87       	std	Y+10, r25	; 0x0a
     d1a:	ab 87       	std	Y+11, r26	; 0x0b
     d1c:	bc 87       	std	Y+12, r27	; 0x0c
     d1e:	01 96       	adiw	r24, 0x01	; 1
     d20:	a1 1d       	adc	r26, r1
     d22:	b1 1d       	adc	r27, r1
     d24:	80 93 26 01 	sts	0x0126, r24
     d28:	90 93 27 01 	sts	0x0127, r25
     d2c:	a0 93 28 01 	sts	0x0128, r26
     d30:	b0 93 29 01 	sts	0x0129, r27

	QueryMessage.Oid            = Oid;
     d34:	cd 86       	std	Y+13, r12	; 0x0d
     d36:	de 86       	std	Y+14, r13	; 0x0e
     d38:	ef 86       	std	Y+15, r14	; 0x0f
     d3a:	f8 8a       	std	Y+16, r15	; 0x10
	QueryMessage.InformationBufferLength = 0;
     d3c:	19 8a       	std	Y+17, r1	; 0x11
     d3e:	1a 8a       	std	Y+18, r1	; 0x12
     d40:	1b 8a       	std	Y+19, r1	; 0x13
     d42:	1c 8a       	std	Y+20, r1	; 0x14
	QueryMessage.InformationBufferOffset = 0;
     d44:	1d 8a       	std	Y+21, r1	; 0x15
     d46:	1e 8a       	std	Y+22, r1	; 0x16
     d48:	1f 8a       	std	Y+23, r1	; 0x17
     d4a:	18 8e       	std	Y+24, r1	; 0x18
	QueryMessage.DeviceVcHandle = 0;
     d4c:	19 8e       	std	Y+25, r1	; 0x19
     d4e:	1a 8e       	std	Y+26, r1	; 0x1a
     d50:	1b 8e       	std	Y+27, r1	; 0x1b
     d52:	1c 8e       	std	Y+28, r1	; 0x1c

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(&QueryMessage,
     d54:	ce 01       	movw	r24, r28
     d56:	01 96       	adiw	r24, 0x01	; 1
     d58:	6c e1       	ldi	r22, 0x1C	; 28
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	54 de       	rcall	.-856    	; 0xa06 <RNDIS_SendEncapsulatedCommand>
     d5e:	18 2f       	mov	r17, r24
     d60:	88 23       	and	r24, r24
     d62:	c1 f4       	brne	.+48     	; 0xd94 <RNDIS_QueryRNDISProperty+0x114>
     d64:	c5 01       	movw	r24, r10
	                                               sizeof(RNDIS_Query_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(&QueryMessageResponseData,
     d66:	b2 01       	movw	r22, r4
     d68:	62 de       	rcall	.-828    	; 0xa2e <RNDIS_GetEncapsulatedResponse>
     d6a:	18 2f       	mov	r17, r24
     d6c:	88 23       	and	r24, r24
     d6e:	91 f4       	brne	.+36     	; 0xd94 <RNDIS_QueryRNDISProperty+0x114>
     d70:	f5 01       	movw	r30, r10
     d72:	84 85       	ldd	r24, Z+12	; 0x0c
	                                               sizeof(QueryMessageResponseData))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (QueryMessageResponseData.QueryMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
     d74:	95 85       	ldd	r25, Z+13	; 0x0d
     d76:	a6 85       	ldd	r26, Z+14	; 0x0e
     d78:	b7 85       	ldd	r27, Z+15	; 0x0f
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	a1 05       	cpc	r26, r1
     d7e:	b1 05       	cpc	r27, r1
     d80:	41 f4       	brne	.+16     	; 0xd92 <RNDIS_QueryRNDISProperty+0x112>
     d82:	b5 01       	movw	r22, r10
     d84:	68 5e       	subi	r22, 0xE8	; 232
	  return RNDIS_COMMAND_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);
     d86:	7f 4f       	sbci	r23, 0xFF	; 255
     d88:	89 2d       	mov	r24, r9
     d8a:	90 2f       	mov	r25, r16
     d8c:	a3 01       	movw	r20, r6
     d8e:	da d6       	rcall	.+3508   	; 0x1b44 <memcpy>
     d90:	01 c0       	rjmp	.+2      	; 0xd94 <RNDIS_QueryRNDISProperty+0x114>
     d92:	10 ec       	ldi	r17, 0xC0	; 192
     d94:	81 2f       	mov	r24, r17
     d96:	0f b6       	in	r0, 0x3f	; 63
	{
		return ErrorCode;
	}

	if (QueryMessageResponseData.QueryMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
	  return RNDIS_COMMAND_FAILED;
     d98:	f8 94       	cli

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);

	return HOST_SENDCONTROL_Successful;
}
     d9a:	3e be       	out	0x3e, r3	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	2d be       	out	0x3d, r2	; 61
     da0:	6c 96       	adiw	r28, 0x1c	; 28
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	ff 90       	pop	r15
     db6:	ef 90       	pop	r14
     db8:	df 90       	pop	r13
     dba:	cf 90       	pop	r12
     dbc:	bf 90       	pop	r11
     dbe:	af 90       	pop	r10
     dc0:	9f 90       	pop	r9
     dc2:	7f 90       	pop	r7
     dc4:	6f 90       	pop	r6
     dc6:	5f 90       	pop	r5
     dc8:	4f 90       	pop	r4
     dca:	3f 90       	pop	r3
     dcc:	2f 90       	pop	r2
     dce:	08 95       	ret

00000dd0 <RNDIS_GetPacketLength>:
     dd0:	ff 92       	push	r15
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
 *  \param[out] PacketLength  Size of the packet currently in the pipe
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
uint8_t RNDIS_GetPacketLength(uint16_t* const PacketLength)
{
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	ac 97       	sbiw	r28, 0x2c	; 44
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	de bf       	out	0x3e, r29	; 62
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	cd bf       	out	0x3d, r28	; 61
     dea:	8c 01       	movw	r16, r24
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	80 93 a7 00 	sts	0x00A7, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     df2:	80 91 aa 00 	lds	r24, 0x00AA
     df6:	8f 7c       	andi	r24, 0xCF	; 207
     df8:	80 61       	ori	r24, 0x10	; 16
     dfa:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     dfe:	80 91 a9 00 	lds	r24, 0x00A9
     e02:	8f 7b       	andi	r24, 0xBF	; 191
     e04:	80 93 a9 00 	sts	0x00A9, r24
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     e08:	80 91 a6 00 	lds	r24, 0x00A6

	Pipe_SelectPipe(RNDIS_DATA_IN_PIPE);
	Pipe_SetPipeToken(PIPE_TOKEN_IN);
	Pipe_Unfreeze();

	if (!(Pipe_IsReadWriteAllowed()))
     e0c:	85 fd       	sbrc	r24, 5
     e0e:	0a c0       	rjmp	.+20     	; 0xe24 <RNDIS_GetPacketLength+0x54>
	{
		*PacketLength = 0;
     e10:	f8 01       	movw	r30, r16
     e12:	11 82       	std	Z+1, r1	; 0x01
     e14:	10 82       	st	Z, r1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     e16:	80 91 a9 00 	lds	r24, 0x00A9
     e1a:	80 64       	ori	r24, 0x40	; 64
     e1c:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Freeze();
		return PIPE_RWSTREAM_NoError;
     e20:	ff 24       	eor	r15, r15
     e22:	1b c0       	rjmp	.+54     	; 0xe5a <RNDIS_GetPacketLength+0x8a>
	}

	RNDIS_Packet_Message_t DeviceMessage;

	if ((ErrorCode = Pipe_Read_Stream_LE(&DeviceMessage, sizeof(RNDIS_Packet_Message_t), NULL)) != PIPE_RWSTREAM_NoError)
     e24:	ce 01       	movw	r24, r28
     e26:	01 96       	adiw	r24, 0x01	; 1
     e28:	6c e2       	ldi	r22, 0x2C	; 44
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	40 e0       	ldi	r20, 0x00	; 0
     e2e:	50 e0       	ldi	r21, 0x00	; 0
     e30:	40 d2       	rcall	.+1152   	; 0x12b2 <Pipe_Read_Stream_LE>
     e32:	f8 2e       	mov	r15, r24
     e34:	88 23       	and	r24, r24
     e36:	89 f4       	brne	.+34     	; 0xe5a <RNDIS_GetPacketLength+0x8a>
     e38:	8d 85       	ldd	r24, Y+13	; 0x0d
	{
		return ErrorCode;
	}

	*PacketLength = (uint16_t)DeviceMessage.DataLength;
     e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e3c:	f8 01       	movw	r30, r16
     e3e:	91 83       	std	Z+1, r25	; 0x01
     e40:	80 83       	st	Z, r24
     e42:	29 85       	ldd	r18, Y+9	; 0x09

	Pipe_Discard_Stream(DeviceMessage.DataOffset - (sizeof(RNDIS_Packet_Message_t) - sizeof(RNDIS_Message_Header_t)),
     e44:	3a 85       	ldd	r19, Y+10	; 0x0a
     e46:	c9 01       	movw	r24, r18
     e48:	84 97       	sbiw	r24, 0x24	; 36
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	e6 d1       	rcall	.+972    	; 0x121c <Pipe_Discard_Stream>
     e50:	80 91 a9 00 	lds	r24, 0x00A9
     e54:	80 64       	ori	r24, 0x40	; 64
     e56:	80 93 a9 00 	sts	0x00A9, r24
     e5a:	8f 2d       	mov	r24, r15
     e5c:	ac 96       	adiw	r28, 0x2c	; 44
	                    NULL);

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	08 95       	ret

00000e74 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     e74:	80 91 9e 00 	lds	r24, 0x009E
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	81 70       	andi	r24, 0x01	; 1
     e7c:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     e7e:	20 91 a0 00 	lds	r18, 0x00A0
     e82:	2d 7f       	andi	r18, 0xFD	; 253
     e84:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     e88:	20 91 9e 00 	lds	r18, 0x009E
     e8c:	22 60       	ori	r18, 0x02	; 2
     e8e:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     e92:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     e96:	21 fd       	sbrc	r18, 1
     e98:	fc cf       	rjmp	.-8      	; 0xe92 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e9a:	20 91 9e 00 	lds	r18, 0x009E
     e9e:	21 60       	ori	r18, 0x01	; 1
     ea0:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     ea4:	10 92 2d 01 	sts	0x012D, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     ea8:	20 91 a0 00 	lds	r18, 0x00A0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	20 72       	andi	r18, 0x20	; 32
     eb0:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     eb2:	40 91 a0 00 	lds	r20, 0x00A0
     eb6:	4f 7d       	andi	r20, 0xDF	; 223
     eb8:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ebc:	40 91 9f 00 	lds	r20, 0x009F
     ec0:	4f 7d       	andi	r20, 0xDF	; 223
     ec2:	40 93 9f 00 	sts	0x009F, r20
     ec6:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     ec8:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     ecc:	55 ff       	sbrs	r21, 5
     ece:	0b c0       	rjmp	.+22     	; 0xee6 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ed0:	40 91 9f 00 	lds	r20, 0x009F
     ed4:	4f 7d       	andi	r20, 0xDF	; 223
     ed6:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     eda:	40 91 9f 00 	lds	r20, 0x009F
     ede:	4d 7f       	andi	r20, 0xFD	; 253
     ee0:	40 93 9f 00 	sts	0x009F, r20
     ee4:	08 c0       	rjmp	.+16     	; 0xef6 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ee6:	ef ec       	ldi	r30, 0xCF	; 207
     ee8:	f7 e0       	ldi	r31, 0x07	; 7
     eea:	31 97       	sbiw	r30, 0x01	; 1
     eec:	f1 f7       	brne	.-4      	; 0xeea <USB_Host_ResetDevice+0x76>
     eee:	00 c0       	rjmp	.+0      	; 0xef0 <USB_Host_ResetDevice+0x7c>
     ef0:	00 00       	nop
     ef2:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     ef4:	49 f7       	brne	.-46     	; 0xec8 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     ef6:	21 15       	cp	r18, r1
     ef8:	31 05       	cpc	r19, r1
     efa:	29 f0       	breq	.+10     	; 0xf06 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     efc:	20 91 a0 00 	lds	r18, 0x00A0
     f00:	20 62       	ori	r18, 0x20	; 32
     f02:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	29 f4       	brne	.+10     	; 0xf14 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     f0a:	80 91 9e 00 	lds	r24, 0x009E
     f0e:	8e 7f       	andi	r24, 0xFE	; 254
     f10:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     f14:	80 91 a0 00 	lds	r24, 0x00A0
     f18:	82 60       	ori	r24, 0x02	; 2
     f1a:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     f1e:	08 95       	ret

00000f20 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f20:	40 91 9e 00 	lds	r20, 0x009E
     f24:	50 e0       	ldi	r21, 0x00	; 0
     f26:	41 70       	andi	r20, 0x01	; 1
     f28:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     f2a:	20 91 a0 00 	lds	r18, 0x00A0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	20 72       	andi	r18, 0x20	; 32
     f32:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     f34:	90 91 a0 00 	lds	r25, 0x00A0
     f38:	9f 7d       	andi	r25, 0xDF	; 223
     f3a:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     f3e:	90 91 9f 00 	lds	r25, 0x009F
     f42:	9f 7d       	andi	r25, 0xDF	; 223
     f44:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f48:	90 91 9e 00 	lds	r25, 0x009E
     f4c:	91 60       	ori	r25, 0x01	; 1
     f4e:	90 93 9e 00 	sts	0x009E, r25
     f52:	26 c0       	rjmp	.+76     	; 0xfa0 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     f54:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     f58:	95 ff       	sbrs	r25, 5
     f5a:	06 c0       	rjmp	.+12     	; 0xf68 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     f5c:	90 91 9f 00 	lds	r25, 0x009F
     f60:	9f 7d       	andi	r25, 0xDF	; 223
     f62:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     f66:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     f68:	90 91 37 01 	lds	r25, 0x0137
     f6c:	91 30       	cpi	r25, 0x01	; 1
     f6e:	d9 f0       	breq	.+54     	; 0xfa6 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     f70:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     f74:	94 ff       	sbrs	r25, 4
     f76:	09 c0       	rjmp	.+18     	; 0xf8a <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     f78:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     f7c:	80 91 a6 00 	lds	r24, 0x00A6
     f80:	8f 7e       	andi	r24, 0xEF	; 239
     f82:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     f86:	82 e0       	ldi	r24, 0x02	; 2

			break;
     f88:	0f c0       	rjmp	.+30     	; 0xfa8 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     f8a:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     f8e:	91 ff       	sbrs	r25, 1
     f90:	07 c0       	rjmp	.+14     	; 0xfa0 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     f92:	80 91 a6 00 	lds	r24, 0x00A6
     f96:	8d 7f       	andi	r24, 0xFD	; 253
     f98:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     f9c:	83 e0       	ldi	r24, 0x03	; 3

			break;
     f9e:	04 c0       	rjmp	.+8      	; 0xfa8 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     fa0:	88 23       	and	r24, r24
     fa2:	c1 f6       	brne	.-80     	; 0xf54 <USB_Host_WaitMS+0x34>
     fa4:	01 c0       	rjmp	.+2      	; 0xfa8 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     fa6:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     fa8:	41 15       	cp	r20, r1
     faa:	51 05       	cpc	r21, r1
     fac:	29 f4       	brne	.+10     	; 0xfb8 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     fae:	90 91 9e 00 	lds	r25, 0x009E
     fb2:	9e 7f       	andi	r25, 0xFE	; 254
     fb4:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     fb8:	21 15       	cp	r18, r1
     fba:	31 05       	cpc	r19, r1
     fbc:	29 f0       	breq	.+10     	; 0xfc8 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     fbe:	90 91 a0 00 	lds	r25, 0x00A0
     fc2:	90 62       	ori	r25, 0x20	; 32
     fc4:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     fc8:	08 95       	ret

00000fca <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	28 97       	sbiw	r28, 0x08	; 8
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     fe2:	80 91 37 01 	lds	r24, 0x0137
     fe6:	85 30       	cpi	r24, 0x05	; 5
     fe8:	09 f4       	brne	.+2      	; 0xfec <USB_Host_ProcessNextHostState+0x22>
     fea:	99 c0       	rjmp	.+306    	; 0x111e <USB_Host_ProcessNextHostState+0x154>
     fec:	86 30       	cpi	r24, 0x06	; 6
     fee:	68 f4       	brcc	.+26     	; 0x100a <USB_Host_ProcessNextHostState+0x40>
     ff0:	82 30       	cpi	r24, 0x02	; 2
     ff2:	c1 f1       	breq	.+112    	; 0x1064 <USB_Host_ProcessNextHostState+0x9a>
     ff4:	83 30       	cpi	r24, 0x03	; 3
     ff6:	18 f4       	brcc	.+6      	; 0xffe <USB_Host_ProcessNextHostState+0x34>
     ff8:	88 23       	and	r24, r24
     ffa:	a1 f0       	breq	.+40     	; 0x1024 <USB_Host_ProcessNextHostState+0x5a>
     ffc:	04 c1       	rjmp	.+520    	; 0x1206 <USB_Host_ProcessNextHostState+0x23c>
     ffe:	83 30       	cpi	r24, 0x03	; 3
    1000:	d9 f1       	breq	.+118    	; 0x1078 <USB_Host_ProcessNextHostState+0xae>
    1002:	84 30       	cpi	r24, 0x04	; 4
    1004:	09 f0       	breq	.+2      	; 0x1008 <USB_Host_ProcessNextHostState+0x3e>
    1006:	ff c0       	rjmp	.+510    	; 0x1206 <USB_Host_ProcessNextHostState+0x23c>
    1008:	62 c0       	rjmp	.+196    	; 0x10ce <USB_Host_ProcessNextHostState+0x104>
    100a:	87 30       	cpi	r24, 0x07	; 7
    100c:	09 f4       	brne	.+2      	; 0x1010 <USB_Host_ProcessNextHostState+0x46>
    100e:	9e c0       	rjmp	.+316    	; 0x114c <USB_Host_ProcessNextHostState+0x182>
    1010:	87 30       	cpi	r24, 0x07	; 7
    1012:	08 f4       	brcc	.+2      	; 0x1016 <USB_Host_ProcessNextHostState+0x4c>
    1014:	8f c0       	rjmp	.+286    	; 0x1134 <USB_Host_ProcessNextHostState+0x16a>
    1016:	88 30       	cpi	r24, 0x08	; 8
    1018:	09 f4       	brne	.+2      	; 0x101c <USB_Host_ProcessNextHostState+0x52>
    101a:	b8 c0       	rjmp	.+368    	; 0x118c <USB_Host_ProcessNextHostState+0x1c2>
    101c:	89 30       	cpi	r24, 0x09	; 9
    101e:	09 f0       	breq	.+2      	; 0x1022 <USB_Host_ProcessNextHostState+0x58>
    1020:	f2 c0       	rjmp	.+484    	; 0x1206 <USB_Host_ProcessNextHostState+0x23c>
    1022:	d9 c0       	rjmp	.+434    	; 0x11d6 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    1024:	00 91 2a 01 	lds	r16, 0x012A
    1028:	10 91 2b 01 	lds	r17, 0x012B
    102c:	01 15       	cp	r16, r1
    102e:	11 05       	cpc	r17, r1
    1030:	09 f4       	brne	.+2      	; 0x1034 <USB_Host_ProcessNextHostState+0x6a>
    1032:	e9 c0       	rjmp	.+466    	; 0x1206 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	74 df       	rcall	.-280    	; 0xf20 <USB_Host_WaitMS>
    1038:	68 2f       	mov	r22, r24
    103a:	88 23       	and	r24, r24
    103c:	31 f0       	breq	.+12     	; 0x104a <USB_Host_ProcessNextHostState+0x80>
    103e:	80 91 2c 01 	lds	r24, 0x012C
				{
					USB_HostState = PostWaitState;
    1042:	80 93 37 01 	sts	0x0137, r24
    1046:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
    1048:	d2 c0       	rjmp	.+420    	; 0x11ee <USB_Host_ProcessNextHostState+0x224>
					break;
    104a:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
    104c:	10 40       	sbci	r17, 0x00	; 0
    104e:	10 93 2b 01 	sts	0x012B, r17
    1052:	00 93 2a 01 	sts	0x012A, r16
    1056:	01 15       	cp	r16, r1
    1058:	11 05       	cpc	r17, r1
    105a:	09 f0       	breq	.+2      	; 0x105e <USB_Host_ProcessNextHostState+0x94>
    105c:	d4 c0       	rjmp	.+424    	; 0x1206 <USB_Host_ProcessNextHostState+0x23c>
    105e:	80 91 2c 01 	lds	r24, 0x012C
				  USB_HostState = PostWaitState;
    1062:	07 c0       	rjmp	.+14     	; 0x1072 <USB_Host_ProcessNextHostState+0xa8>
    1064:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    1066:	93 e0       	ldi	r25, 0x03	; 3
    1068:	90 93 2b 01 	sts	0x012B, r25
    106c:	80 93 2a 01 	sts	0x012A, r24
    1070:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    1072:	80 93 37 01 	sts	0x0137, r24
    1076:	c7 c0       	rjmp	.+398    	; 0x1206 <USB_Host_ProcessNextHostState+0x23c>
			break;
    1078:	80 91 2a 01 	lds	r24, 0x012A
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    107c:	90 91 2b 01 	lds	r25, 0x012B
    1080:	9c 01       	movw	r18, r24
    1082:	21 50       	subi	r18, 0x01	; 1
    1084:	30 40       	sbci	r19, 0x00	; 0
    1086:	30 93 2b 01 	sts	0x012B, r19
    108a:	20 93 2a 01 	sts	0x012A, r18
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	39 f0       	breq	.+14     	; 0x10a0 <USB_Host_ProcessNextHostState+0xd6>
    1092:	8f ec       	ldi	r24, 0xCF	; 207
    1094:	97 e0       	ldi	r25, 0x07	; 7
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	f1 f7       	brne	.-4      	; 0x1096 <USB_Host_ProcessNextHostState+0xcc>
    109a:	00 c0       	rjmp	.+0      	; 0x109c <USB_Host_ProcessNextHostState+0xd2>
    109c:	00 00       	nop
    109e:	b3 c0       	rjmp	.+358    	; 0x1206 <USB_Host_ProcessNextHostState+0x23c>
    10a0:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    10a2:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    10a6:	80 61       	ori	r24, 0x10	; 16
    10a8:	80 93 d8 00 	sts	0x00D8, r24
    10ac:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    10b0:	8b 7f       	andi	r24, 0xFB	; 251
    10b2:	80 93 dd 00 	sts	0x00DD, r24
    10b6:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
    10ba:	80 61       	ori	r24, 0x10	; 16
    10bc:	80 93 d7 00 	sts	0x00D7, r24
    10c0:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    10c4:	82 60       	ori	r24, 0x02	; 2
    10c6:	80 93 dd 00 	sts	0x00DD, r24
    10ca:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    10cc:	d2 cf       	rjmp	.-92     	; 0x1072 <USB_Host_ProcessNextHostState+0xa8>
    10ce:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    10d2:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    10d4:	98 c0       	rjmp	.+304    	; 0x1206 <USB_Host_ProcessNextHostState+0x23c>
    10d6:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    10da:	8e 7f       	andi	r24, 0xFE	; 254
    10dc:	80 93 9f 00 	sts	0x009F, r24
    10e0:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    10e4:	8d 7f       	andi	r24, 0xFD	; 253
    10e6:	80 93 9f 00 	sts	0x009F, r24
    10ea:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    10ee:	8d 7f       	andi	r24, 0xFD	; 253
    10f0:	80 93 df 00 	sts	0x00DF, r24
    10f4:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    10f8:	82 60       	ori	r24, 0x02	; 2
    10fa:	80 93 de 00 	sts	0x00DE, r24
    10fe:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1102:	81 60       	ori	r24, 0x01	; 1
    1104:	80 93 9e 00 	sts	0x009E, r24
    1108:	90 d1       	rcall	.+800    	; 0x142a <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    110a:	10 92 37 01 	sts	0x0137, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    110e:	84 e6       	ldi	r24, 0x64	; 100
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	90 93 2b 01 	sts	0x012B, r25
    1116:	80 93 2a 01 	sts	0x012A, r24
    111a:	85 e0       	ldi	r24, 0x05	; 5
    111c:	59 c0       	rjmp	.+178    	; 0x11d0 <USB_Host_ProcessNextHostState+0x206>
    111e:	aa de       	rcall	.-684    	; 0xe74 <USB_Host_ResetDevice>
    1120:	10 92 37 01 	sts	0x0137, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    1124:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	90 93 2b 01 	sts	0x012B, r25
    112c:	80 93 2a 01 	sts	0x012A, r24
    1130:	86 e0       	ldi	r24, 0x06	; 6
    1132:	4e c0       	rjmp	.+156    	; 0x11d0 <USB_Host_ProcessNextHostState+0x206>
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    113a:	20 e4       	ldi	r18, 0x40	; 64
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	01 e0       	ldi	r16, 0x01	; 1
    1140:	0f d1       	rcall	.+542    	; 0x1360 <Pipe_ConfigurePipe>
    1142:	88 23       	and	r24, r24
    1144:	09 f4       	brne	.+2      	; 0x1148 <USB_Host_ProcessNextHostState+0x17e>
    1146:	4f c0       	rjmp	.+158    	; 0x11e6 <USB_Host_ProcessNextHostState+0x21c>
    1148:	87 e0       	ldi	r24, 0x07	; 7
    114a:	93 cf       	rjmp	.-218    	; 0x1072 <USB_Host_ProcessNextHostState+0xa8>
    114c:	af e2       	ldi	r26, 0x2F	; 47
    114e:	b1 e0       	ldi	r27, 0x01	; 1
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    1150:	ec e0       	ldi	r30, 0x0C	; 12
    1152:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    1154:	88 e0       	ldi	r24, 0x08	; 8
    1156:	01 90       	ld	r0, Z+
    1158:	0d 92       	st	X+, r0
    115a:	81 50       	subi	r24, 0x01	; 1
    115c:	e1 f7       	brne	.-8      	; 0x1156 <USB_Host_ProcessNextHostState+0x18c>
    115e:	10 92 a7 00 	sts	0x00A7, r1
    1162:	ce 01       	movw	r24, r28
    1164:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1166:	86 d3       	rcall	.+1804   	; 0x1874 <USB_Host_SendControlRequest>
    1168:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    116a:	88 23       	and	r24, r24
    116c:	09 f0       	breq	.+2      	; 0x1170 <USB_Host_ProcessNextHostState+0x1a6>
    116e:	3e c0       	rjmp	.+124    	; 0x11ec <USB_Host_ProcessNextHostState+0x222>
    1170:	88 85       	ldd	r24, Y+8	; 0x08
    1172:	80 93 1c 01 	sts	0x011C, r24
    1176:	7e de       	rcall	.-772    	; 0xe74 <USB_Host_ResetDevice>
    1178:	10 92 37 01 	sts	0x0137, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    117c:	88 ec       	ldi	r24, 0xC8	; 200
    117e:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
    1180:	90 93 2b 01 	sts	0x012B, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    1184:	80 93 2a 01 	sts	0x012A, r24
    1188:	88 e0       	ldi	r24, 0x08	; 8
    118a:	22 c0       	rjmp	.+68     	; 0x11d0 <USB_Host_ProcessNextHostState+0x206>
    118c:	20 91 1c 01 	lds	r18, 0x011C
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    1198:	01 e0       	ldi	r16, 0x01	; 1
    119a:	e2 d0       	rcall	.+452    	; 0x1360 <Pipe_ConfigurePipe>
    119c:	88 23       	and	r24, r24
    119e:	19 f1       	breq	.+70     	; 0x11e6 <USB_Host_ProcessNextHostState+0x21c>
    11a0:	af e2       	ldi	r26, 0x2F	; 47
    11a2:	b1 e0       	ldi	r27, 0x01	; 1
    11a4:	e4 e1       	ldi	r30, 0x14	; 20
    11a6:	f1 e0       	ldi	r31, 0x01	; 1
    11a8:	88 e0       	ldi	r24, 0x08	; 8
    11aa:	01 90       	ld	r0, Z+
    11ac:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    11ae:	81 50       	subi	r24, 0x01	; 1
    11b0:	e1 f7       	brne	.-8      	; 0x11aa <USB_Host_ProcessNextHostState+0x1e0>
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	5e d3       	rcall	.+1724   	; 0x1874 <USB_Host_SendControlRequest>
    11b8:	68 2f       	mov	r22, r24
    11ba:	88 23       	and	r24, r24
    11bc:	b9 f4       	brne	.+46     	; 0x11ec <USB_Host_ProcessNextHostState+0x222>
    11be:	10 92 37 01 	sts	0x0137, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    11c2:	84 e6       	ldi	r24, 0x64	; 100
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	90 93 2b 01 	sts	0x012B, r25
    11ca:	80 93 2a 01 	sts	0x012A, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    11ce:	89 e0       	ldi	r24, 0x09	; 9
    11d0:	80 93 2c 01 	sts	0x012C, r24
    11d4:	18 c0       	rjmp	.+48     	; 0x1206 <USB_Host_ProcessNextHostState+0x23c>
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	80 93 a1 00 	sts	0x00A1, r24
    11dc:	8a e0       	ldi	r24, 0x0A	; 10
    11de:	80 93 37 01 	sts	0x0137, r24
    11e2:	4b d9       	rcall	.-3434   	; 0x47a <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
    11e4:	10 c0       	rjmp	.+32     	; 0x1206 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	84 e0       	ldi	r24, 0x04	; 4
    11ea:	01 c0       	rjmp	.+2      	; 0x11ee <USB_Host_ProcessNextHostState+0x224>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    11ec:	83 e0       	ldi	r24, 0x03	; 3
    11ee:	90 91 37 01 	lds	r25, 0x0137

			EVENT_USB_Host_DeviceEnumerationComplete();
    11f2:	91 30       	cpi	r25, 0x01	; 1
    11f4:	41 f0       	breq	.+16     	; 0x1206 <USB_Host_ProcessNextHostState+0x23c>
			break;
    11f6:	38 da       	rcall	.-2960   	; 0x668 <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    11f8:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    11fc:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
    11fe:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    1202:	35 d9       	rcall	.-3478   	; 0x46e <EVENT_USB_Host_DeviceUnattached>
    1204:	6c d1       	rcall	.+728    	; 0x14de <USB_ResetInterface>
    1206:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    1216:	1f 91       	pop	r17
    1218:	0f 91       	pop	r16

		USB_ResetInterface();
    121a:	08 95       	ret

0000121c <Pipe_Discard_Stream>:

#include "PipeStream_AVR8.h"

uint8_t Pipe_Discard_Stream(uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    121c:	df 92       	push	r13
    121e:	ef 92       	push	r14
    1220:	ff 92       	push	r15
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	ec 01       	movw	r28, r24
    122c:	8b 01       	movw	r16, r22
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    122e:	80 91 aa 00 	lds	r24, 0x00AA
    1232:	8f 7c       	andi	r24, 0xCF	; 207
    1234:	80 61       	ori	r24, 0x10	; 16
    1236:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	Pipe_SetPipeToken(PIPE_TOKEN_IN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    123a:	0b d1       	rcall	.+534    	; 0x1452 <Pipe_WaitUntilReady>
    123c:	d8 2e       	mov	r13, r24
    123e:	88 23       	and	r24, r24
    1240:	79 f5       	brne	.+94     	; 0x12a0 <Pipe_Discard_Stream+0x84>
    1242:	01 15       	cp	r16, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1244:	11 05       	cpc	r17, r1
    1246:	29 f0       	breq	.+10     	; 0x1252 <Pipe_Discard_Stream+0x36>
    1248:	f8 01       	movw	r30, r16
	  Length -= *BytesProcessed;
    124a:	20 81       	ld	r18, Z
    124c:	31 81       	ldd	r19, Z+1	; 0x01
    124e:	c2 1b       	sub	r28, r18
    1250:	d3 0b       	sbc	r29, r19
    1252:	ee 24       	eor	r14, r14

#include "PipeStream_AVR8.h"

uint8_t Pipe_Discard_Stream(uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1254:	ff 24       	eor	r15, r15
    1256:	20 c0       	rjmp	.+64     	; 0x1298 <Pipe_Discard_Stream+0x7c>
    1258:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    125c:	85 fd       	sbrc	r24, 5
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    125e:	16 c0       	rjmp	.+44     	; 0x128c <Pipe_Discard_Stream+0x70>
    1260:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1264:	8e 77       	andi	r24, 0x7E	; 126
    1266:	80 93 a6 00 	sts	0x00A6, r24
    126a:	01 15       	cp	r16, r1
		{
			Pipe_ClearIN();
				
			if (BytesProcessed != NULL)
    126c:	11 05       	cpc	r17, r1
    126e:	51 f0       	breq	.+20     	; 0x1284 <Pipe_Discard_Stream+0x68>
    1270:	f8 01       	movw	r30, r16
			{
				*BytesProcessed += BytesInTransfer;
    1272:	80 81       	ld	r24, Z
    1274:	91 81       	ldd	r25, Z+1	; 0x01
    1276:	8e 0d       	add	r24, r14
    1278:	9f 1d       	adc	r25, r15
    127a:	91 83       	std	Z+1, r25	; 0x01
    127c:	80 83       	st	Z, r24
    127e:	24 e0       	ldi	r18, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
    1280:	d2 2e       	mov	r13, r18
    1282:	0e c0       	rjmp	.+28     	; 0x12a0 <Pipe_Discard_Stream+0x84>
    1284:	e6 d0       	rcall	.+460    	; 0x1452 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1286:	88 23       	and	r24, r24
    1288:	39 f0       	breq	.+14     	; 0x1298 <Pipe_Discard_Stream+0x7c>
    128a:	09 c0       	rjmp	.+18     	; 0x129e <Pipe_Discard_Stream+0x82>
    128c:	80 91 af 00 	lds	r24, 0x00AF
			static inline void Pipe_Discard_8(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Discard_8(void)
			{
				uint8_t Dummy;

				Dummy = UPDATX;
    1290:	21 97       	sbiw	r28, 0x01	; 1
    1292:	08 94       	sec
		}
		else
		{
			Pipe_Discard_8();
			
			Length--;
    1294:	e1 1c       	adc	r14, r1
			BytesInTransfer++;
    1296:	f1 1c       	adc	r15, r1
    1298:	20 97       	sbiw	r28, 0x00	; 0
    129a:	f1 f6       	brne	.-68     	; 0x1258 <Pipe_Discard_Stream+0x3c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
    129c:	01 c0       	rjmp	.+2      	; 0x12a0 <Pipe_Discard_Stream+0x84>
    129e:	d8 2e       	mov	r13, r24
    12a0:	8d 2d       	mov	r24, r13
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    12a2:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    12a4:	cf 91       	pop	r28
    12a6:	1f 91       	pop	r17
    12a8:	0f 91       	pop	r16
    12aa:	ff 90       	pop	r15
    12ac:	ef 90       	pop	r14
    12ae:	df 90       	pop	r13
    12b0:	08 95       	ret

000012b2 <Pipe_Read_Stream_LE>:
    12b2:	af 92       	push	r10
    12b4:	bf 92       	push	r11
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    12b6:	cf 92       	push	r12
    12b8:	df 92       	push	r13
    12ba:	ff 92       	push	r15
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	5c 01       	movw	r10, r24
    12c6:	eb 01       	movw	r28, r22
    12c8:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    12ca:	80 91 aa 00 	lds	r24, 0x00AA
    12ce:	8f 7c       	andi	r24, 0xCF	; 207
    12d0:	80 61       	ori	r24, 0x10	; 16
    12d2:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    12d6:	bd d0       	rcall	.+378    	; 0x1452 <Pipe_WaitUntilReady>
    12d8:	f8 2e       	mov	r15, r24
    12da:	88 23       	and	r24, r24
    12dc:	b1 f5       	brne	.+108    	; 0x134a <Pipe_Read_Stream_LE+0x98>
    12de:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    12e0:	d1 04       	cpc	r13, r1
    12e2:	41 f0       	breq	.+16     	; 0x12f4 <Pipe_Read_Stream_LE+0x42>
    12e4:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
    12e6:	00 81       	ld	r16, Z
    12e8:	11 81       	ldd	r17, Z+1	; 0x01
    12ea:	c0 1b       	sub	r28, r16
    12ec:	d1 0b       	sbc	r29, r17
    12ee:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    12f0:	1b 1d       	adc	r17, r11
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <Pipe_Read_Stream_LE+0x44>
    12f4:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    12f6:	aa 24       	eor	r10, r10
    12f8:	bb 24       	eor	r11, r11
    12fa:	23 c0       	rjmp	.+70     	; 0x1342 <Pipe_Read_Stream_LE+0x90>
    12fc:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1300:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1302:	16 c0       	rjmp	.+44     	; 0x1330 <Pipe_Read_Stream_LE+0x7e>
    1304:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1308:	8e 77       	andi	r24, 0x7E	; 126
    130a:	80 93 a6 00 	sts	0x00A6, r24
    130e:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1310:	d1 04       	cpc	r13, r1
    1312:	51 f0       	breq	.+20     	; 0x1328 <Pipe_Read_Stream_LE+0x76>
    1314:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
    1316:	80 81       	ld	r24, Z
    1318:	91 81       	ldd	r25, Z+1	; 0x01
    131a:	8a 0d       	add	r24, r10
    131c:	9b 1d       	adc	r25, r11
    131e:	91 83       	std	Z+1, r25	; 0x01
    1320:	80 83       	st	Z, r24
    1322:	64 e0       	ldi	r22, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
    1324:	f6 2e       	mov	r15, r22
    1326:	11 c0       	rjmp	.+34     	; 0x134a <Pipe_Read_Stream_LE+0x98>
    1328:	94 d0       	rcall	.+296    	; 0x1452 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    132a:	88 23       	and	r24, r24
    132c:	51 f0       	breq	.+20     	; 0x1342 <Pipe_Read_Stream_LE+0x90>
    132e:	0c c0       	rjmp	.+24     	; 0x1348 <Pipe_Read_Stream_LE+0x96>
    1330:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1334:	f8 01       	movw	r30, r16
    1336:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1338:	8f 01       	movw	r16, r30
    133a:	21 97       	sbiw	r28, 0x01	; 1
    133c:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    133e:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
    1340:	b1 1c       	adc	r11, r1
    1342:	20 97       	sbiw	r28, 0x00	; 0
    1344:	d9 f6       	brne	.-74     	; 0x12fc <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1346:	01 c0       	rjmp	.+2      	; 0x134a <Pipe_Read_Stream_LE+0x98>
    1348:	f8 2e       	mov	r15, r24
    134a:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    134c:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    134e:	cf 91       	pop	r28
    1350:	1f 91       	pop	r17
    1352:	0f 91       	pop	r16
    1354:	ff 90       	pop	r15
    1356:	df 90       	pop	r13
    1358:	cf 90       	pop	r12
    135a:	bf 90       	pop	r11
    135c:	af 90       	pop	r10
    135e:	08 95       	ret

00001360 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    1360:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    1362:	58 2f       	mov	r21, r24
    1364:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    1366:	87 ff       	sbrs	r24, 7
    1368:	02 c0       	rjmp	.+4      	; 0x136e <Pipe_ConfigurePipe+0xe>
    136a:	80 e1       	ldi	r24, 0x10	; 16
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <Pipe_ConfigurePipe+0x10>
    136e:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
    1370:	57 30       	cpi	r21, 0x07	; 7
    1372:	08 f0       	brcs	.+2      	; 0x1376 <Pipe_ConfigurePipe+0x16>
    1374:	57 c0       	rjmp	.+174    	; 0x1424 <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
    1376:	66 23       	and	r22, r22
    1378:	09 f4       	brne	.+2      	; 0x137c <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
    137a:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    137c:	4f 70       	andi	r20, 0x0F	; 15
    137e:	62 95       	swap	r22
    1380:	66 0f       	add	r22, r22
    1382:	66 0f       	add	r22, r22
    1384:	60 7c       	andi	r22, 0xC0	; 192
    1386:	64 2b       	or	r22, r20
    1388:	68 2b       	or	r22, r24
    138a:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    138c:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    138e:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    1392:	45 17       	cp	r20, r21
    1394:	a9 f4       	brne	.+42     	; 0x13c0 <Pipe_ConfigurePipe+0x60>
    1396:	04 c0       	rjmp	.+8      	; 0x13a0 <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    1398:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	03 c0       	rjmp	.+6      	; 0x13a6 <Pipe_ConfigurePipe+0x46>
    13a0:	88 e0       	ldi	r24, 0x08	; 8
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    13a6:	82 17       	cp	r24, r18
    13a8:	93 07       	cpc	r25, r19
    13aa:	10 f4       	brcc	.+4      	; 0x13b0 <Pipe_ConfigurePipe+0x50>
    13ac:	75 30       	cpi	r23, 0x05	; 5
    13ae:	a1 f7       	brne	.-24     	; 0x1398 <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    13b0:	87 2f       	mov	r24, r23
    13b2:	82 95       	swap	r24
    13b4:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    13b6:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    13b8:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    13ba:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    13bc:	e0 e0       	ldi	r30, 0x00	; 0
    13be:	08 c0       	rjmp	.+16     	; 0x13d0 <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    13c0:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    13c4:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    13c8:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
    13cc:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    13d0:	81 ff       	sbrs	r24, 1
    13d2:	20 c0       	rjmp	.+64     	; 0x1414 <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    13d4:	90 91 a9 00 	lds	r25, 0x00A9
    13d8:	9e 7f       	andi	r25, 0xFE	; 254
    13da:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    13de:	90 91 ab 00 	lds	r25, 0x00AB
    13e2:	9d 7f       	andi	r25, 0xFD	; 253
    13e4:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    13e8:	90 91 a9 00 	lds	r25, 0x00A9
    13ec:	91 60       	ori	r25, 0x01	; 1
    13ee:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    13f2:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    13f6:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    13fa:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
    13fe:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    1402:	80 91 a9 00 	lds	r24, 0x00A9
    1406:	80 62       	ori	r24, 0x20	; 32
    1408:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    140c:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    1410:	87 ff       	sbrs	r24, 7
    1412:	08 c0       	rjmp	.+16     	; 0x1424 <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    1414:	4f 5f       	subi	r20, 0xFF	; 255
    1416:	47 30       	cpi	r20, 0x07	; 7
    1418:	09 f0       	breq	.+2      	; 0x141c <Pipe_ConfigurePipe+0xbc>
    141a:	b9 cf       	rjmp	.-142    	; 0x138e <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    141c:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	01 c0       	rjmp	.+2      	; 0x1426 <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
    1424:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    1426:	0f 91       	pop	r16
    1428:	08 95       	ret

0000142a <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    142a:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    1434:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    1438:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    143c:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1440:	90 91 a9 00 	lds	r25, 0x00A9
    1444:	9e 7f       	andi	r25, 0xFE	; 254
    1446:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    144a:	8f 5f       	subi	r24, 0xFF	; 255
    144c:	87 30       	cpi	r24, 0x07	; 7
    144e:	81 f7       	brne	.-32     	; 0x1430 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    1450:	08 95       	ret

00001452 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1452:	80 91 a2 00 	lds	r24, 0x00A2
    1456:	90 91 a3 00 	lds	r25, 0x00A3
    145a:	45 e6       	ldi	r20, 0x65	; 101
    145c:	01 c0       	rjmp	.+2      	; 0x1460 <Pipe_WaitUntilReady+0xe>
    145e:	c9 01       	movw	r24, r18
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    1460:	20 91 aa 00 	lds	r18, 0x00AA
    1464:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1466:	20 31       	cpi	r18, 0x10	; 16
    1468:	29 f4       	brne	.+10     	; 0x1474 <Pipe_WaitUntilReady+0x22>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    146a:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    146e:	20 ff       	sbrs	r18, 0
    1470:	05 c0       	rjmp	.+10     	; 0x147c <Pipe_WaitUntilReady+0x2a>
    1472:	17 c0       	rjmp	.+46     	; 0x14a2 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1474:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    1478:	22 fd       	sbrc	r18, 2
    147a:	13 c0       	rjmp	.+38     	; 0x14a2 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    147c:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    1480:	21 fd       	sbrc	r18, 1
    1482:	11 c0       	rjmp	.+34     	; 0x14a6 <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    1484:	20 91 37 01 	lds	r18, 0x0137
    1488:	21 30       	cpi	r18, 0x01	; 1
    148a:	79 f0       	breq	.+30     	; 0x14aa <Pipe_WaitUntilReady+0x58>
    148c:	20 91 a2 00 	lds	r18, 0x00A2
    1490:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1494:	28 17       	cp	r18, r24
    1496:	39 07       	cpc	r19, r25
    1498:	19 f3       	breq	.-58     	; 0x1460 <Pipe_WaitUntilReady+0xe>
    149a:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    149c:	01 f7       	brne	.-64     	; 0x145e <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_Timeout;
    149e:	83 e0       	ldi	r24, 0x03	; 3
    14a0:	08 95       	ret
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    14aa:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
    14ac:	08 95       	ret

000014ae <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    14ae:	75 d0       	rcall	.+234    	; 0x159a <USB_INT_DisableAllInterrupts>
    14b0:	7c d0       	rcall	.+248    	; 0x15aa <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    14b2:	e0 ee       	ldi	r30, 0xE0	; 224
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    14b6:	80 81       	ld	r24, Z
    14b8:	81 60       	ori	r24, 0x01	; 1
    14ba:	80 83       	st	Z, r24
    14bc:	e8 ed       	ldi	r30, 0xD8	; 216
    14be:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    14c0:	80 81       	ld	r24, Z
    14c2:	8f 77       	andi	r24, 0x7F	; 127
    14c4:	80 83       	st	Z, r24
    14c6:	19 bc       	out	0x29, r1	; 41
    14c8:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    14ca:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    14cc:	8c 91       	ld	r24, X
    14ce:	8e 7f       	andi	r24, 0xFE	; 254
    14d0:	8c 93       	st	X, r24
    14d2:	80 81       	ld	r24, Z
    14d4:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    14d6:	80 83       	st	Z, r24
    14d8:	10 92 2e 01 	sts	0x012E, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    14dc:	08 95       	ret

000014de <USB_ResetInterface>:
    14de:	5d d0       	rcall	.+186    	; 0x159a <USB_INT_DisableAllInterrupts>
}
    14e0:	64 d0       	rcall	.+200    	; 0x15aa <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    14e2:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    14e6:	8f 77       	andi	r24, 0x7F	; 127
    14e8:	80 93 d8 00 	sts	0x00D8, r24
    14ec:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    14f0:	80 68       	ori	r24, 0x80	; 128
    14f2:	80 93 d8 00 	sts	0x00D8, r24
    14f6:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    14fa:	8f 7d       	andi	r24, 0xDF	; 223
    14fc:	80 93 d8 00 	sts	0x00D8, r24
    1500:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    1504:	8f 77       	andi	r24, 0x7F	; 127
    1506:	80 93 d7 00 	sts	0x00D7, r24
    150a:	8c e0       	ldi	r24, 0x0C	; 12
    150c:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    150e:	8e e0       	ldi	r24, 0x0E	; 14
    1510:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1512:	09 b4       	in	r0, 0x29	; 41
    1514:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1516:	fd cf       	rjmp	.-6      	; 0x1512 <USB_ResetInterface+0x34>
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	80 93 37 01 	sts	0x0137, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    151e:	10 92 2d 01 	sts	0x012D, r1
	USB_Host_ConfigurationNumber = 0;
    1522:	80 e4       	ldi	r24, 0x40	; 64
    1524:	80 93 1c 01 	sts	0x011C, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    1528:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    152c:	80 64       	ori	r24, 0x40	; 64
    152e:	80 93 d8 00 	sts	0x00D8, r24
    1532:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1536:	81 60       	ori	r24, 0x01	; 1
    1538:	80 93 dd 00 	sts	0x00DD, r24
    153c:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    1540:	84 60       	ori	r24, 0x04	; 4
    1542:	80 93 dd 00 	sts	0x00DD, r24
    1546:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
    154a:	8f 7e       	andi	r24, 0xEF	; 239
    154c:	80 93 d7 00 	sts	0x00D7, r24
    1550:	6f 9a       	sbi	0x0d, 7	; 13
    1552:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
    1554:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    1558:	81 60       	ori	r24, 0x01	; 1
    155a:	80 93 de 00 	sts	0x00DE, r24
    155e:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1562:	84 60       	ori	r24, 0x04	; 4
    1564:	80 93 de 00 	sts	0x00DE, r24
    1568:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    156c:	8e 7f       	andi	r24, 0xFE	; 254
    156e:	80 93 e0 00 	sts	0x00E0, r24
    1572:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1576:	80 61       	ori	r24, 0x10	; 16
    1578:	80 93 d8 00 	sts	0x00D8, r24
    157c:	08 95       	ret

0000157e <USB_Init>:
    157e:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1580:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1582:	80 81       	ld	r24, Z
    1584:	8f 7e       	andi	r24, 0xEF	; 239
    1586:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1588:	e7 ed       	ldi	r30, 0xD7	; 215
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	81 60       	ori	r24, 0x01	; 1
    1590:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	80 93 2e 01 	sts	0x012E, r24

	USB_ResetInterface();
    1598:	a2 cf       	rjmp	.-188    	; 0x14de <USB_ResetInterface>

0000159a <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    159a:	e8 ed       	ldi	r30, 0xD8	; 216
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	8c 7f       	andi	r24, 0xFC	; 252
    15a2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    15a4:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    15a8:	08 95       	ret

000015aa <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    15aa:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    15ae:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    15b2:	08 95       	ret

000015b4 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    15b4:	1f 92       	push	r1
    15b6:	0f 92       	push	r0
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	0f 92       	push	r0
    15bc:	0b b6       	in	r0, 0x3b	; 59
    15be:	0f 92       	push	r0
    15c0:	11 24       	eor	r1, r1
    15c2:	2f 93       	push	r18
    15c4:	3f 93       	push	r19
    15c6:	4f 93       	push	r20
    15c8:	5f 93       	push	r21
    15ca:	6f 93       	push	r22
    15cc:	7f 93       	push	r23
    15ce:	8f 93       	push	r24
    15d0:	9f 93       	push	r25
    15d2:	af 93       	push	r26
    15d4:	bf 93       	push	r27
    15d6:	ef 93       	push	r30
    15d8:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    15da:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    15de:	85 ff       	sbrs	r24, 5
    15e0:	0a c0       	rjmp	.+20     	; 0x15f6 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    15e2:	80 91 a0 00 	lds	r24, 0x00A0
    15e6:	85 ff       	sbrs	r24, 5
    15e8:	06 c0       	rjmp	.+12     	; 0x15f6 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    15ea:	80 91 9f 00 	lds	r24, 0x009F
    15ee:	8f 7d       	andi	r24, 0xDF	; 223
    15f0:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    15f4:	16 d1       	rcall	.+556    	; 0x1822 <USB_Event_Stub>
    15f6:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    15fa:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    15fc:	16 c0       	rjmp	.+44     	; 0x162a <__vector_10+0x76>
    15fe:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    1602:	81 ff       	sbrs	r24, 1
    1604:	12 c0       	rjmp	.+36     	; 0x162a <__vector_10+0x76>
    1606:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    160a:	8d 7f       	andi	r24, 0xFD	; 253
    160c:	80 93 9f 00 	sts	0x009F, r24
    1610:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1614:	8e 7f       	andi	r24, 0xFE	; 254
    1616:	80 93 9f 00 	sts	0x009F, r24
    161a:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    161e:	8d 7f       	andi	r24, 0xFD	; 253
    1620:	80 93 a0 00 	sts	0x00A0, r24
    1624:	0e 94 37 02 	call	0x46e	; 0x46e <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    1628:	5a df       	rcall	.-332    	; 0x14de <USB_ResetInterface>

		USB_ResetInterface();
    162a:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    162e:	81 ff       	sbrs	r24, 1
    1630:	17 c0       	rjmp	.+46     	; 0x1660 <__vector_10+0xac>
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1632:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    1636:	81 ff       	sbrs	r24, 1
    1638:	13 c0       	rjmp	.+38     	; 0x1660 <__vector_10+0xac>
    163a:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    163e:	8d 7f       	andi	r24, 0xFD	; 253
    1640:	80 93 df 00 	sts	0x00DF, r24
    1644:	77 98       	cbi	0x0e, 7	; 14
    1646:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    164a:	81 60       	ori	r24, 0x01	; 1
    164c:	80 93 dd 00 	sts	0x00DD, r24
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	0e 94 14 03 	call	0x628	; 0x628 <EVENT_USB_Host_HostError>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1656:	0e 94 37 02 	call	0x46e	; 0x46e <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	80 93 37 01 	sts	0x0137, r24

		USB_HostState = HOST_STATE_Unattached;
    1660:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1664:	80 ff       	sbrs	r24, 0
    1666:	18 c0       	rjmp	.+48     	; 0x1698 <__vector_10+0xe4>
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1668:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    166c:	80 ff       	sbrs	r24, 0
    166e:	14 c0       	rjmp	.+40     	; 0x1698 <__vector_10+0xe4>
    1670:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1674:	8e 7f       	andi	r24, 0xFE	; 254
    1676:	80 93 df 00 	sts	0x00DF, r24
    167a:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    167e:	8e 7f       	andi	r24, 0xFE	; 254
    1680:	80 93 de 00 	sts	0x00DE, r24
    1684:	0e 94 31 02 	call	0x462	; 0x462 <EVENT_USB_Host_DeviceAttached>
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    1688:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    168c:	82 60       	ori	r24, 0x02	; 2
    168e:	80 93 a0 00 	sts	0x00A0, r24
    1692:	82 e0       	ldi	r24, 0x02	; 2
    1694:	80 93 37 01 	sts	0x0137, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1698:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    169c:	82 ff       	sbrs	r24, 2
    169e:	10 c0       	rjmp	.+32     	; 0x16c0 <__vector_10+0x10c>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    16a0:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    16a4:	82 ff       	sbrs	r24, 2
    16a6:	0c c0       	rjmp	.+24     	; 0x16c0 <__vector_10+0x10c>
    16a8:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    16ac:	8b 7f       	andi	r24, 0xFB	; 251
    16ae:	80 93 df 00 	sts	0x00DF, r24
    16b2:	82 e0       	ldi	r24, 0x02	; 2
    16b4:	60 e0       	ldi	r22, 0x00	; 0
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    16b6:	0e 94 34 03 	call	0x668	; 0x668 <EVENT_USB_Host_DeviceEnumerationFailed>
    16ba:	0e 94 37 02 	call	0x46e	; 0x46e <EVENT_USB_Host_DeviceUnattached>
		EVENT_USB_Host_DeviceUnattached();
    16be:	0f df       	rcall	.-482    	; 0x14de <USB_ResetInterface>
    16c0:	ff 91       	pop	r31

		USB_ResetInterface();
    16c2:	ef 91       	pop	r30
    16c4:	bf 91       	pop	r27
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    16c6:	af 91       	pop	r26
    16c8:	9f 91       	pop	r25
    16ca:	8f 91       	pop	r24
    16cc:	7f 91       	pop	r23
    16ce:	6f 91       	pop	r22
    16d0:	5f 91       	pop	r21
    16d2:	4f 91       	pop	r20
    16d4:	3f 91       	pop	r19
    16d6:	2f 91       	pop	r18
    16d8:	0f 90       	pop	r0
    16da:	0b be       	out	0x3b, r0	; 59
    16dc:	0f 90       	pop	r0
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	0f 90       	pop	r0
    16e2:	1f 90       	pop	r1
    16e4:	18 95       	reti

000016e6 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    16e6:	cf 92       	push	r12
    16e8:	df 92       	push	r13
    16ea:	ef 92       	push	r14
    16ec:	ff 92       	push	r15
    16ee:	0f 93       	push	r16
    16f0:	1f 93       	push	r17
    16f2:	cf 93       	push	r28
    16f4:	df 93       	push	r29
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	29 97       	sbiw	r28, 0x09	; 9
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	6b 01       	movw	r12, r22
    1708:	8a 01       	movw	r16, r20
    170a:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    170c:	90 e8       	ldi	r25, 0x80	; 128
    170e:	90 93 2f 01 	sts	0x012F, r25
    1712:	96 e0       	ldi	r25, 0x06	; 6
    1714:	90 93 30 01 	sts	0x0130, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    171e:	90 93 32 01 	sts	0x0132, r25
    1722:	80 93 31 01 	sts	0x0131, r24
    1726:	10 92 34 01 	sts	0x0134, r1
    172a:	10 92 33 01 	sts	0x0133, r1
    172e:	89 e0       	ldi	r24, 0x09	; 9
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	90 93 36 01 	sts	0x0136, r25
    1736:	80 93 35 01 	sts	0x0135, r24
    173a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    173e:	ce 01       	movw	r24, r28
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	98 d0       	rcall	.+304    	; 0x1874 <USB_Host_SendControlRequest>
    1744:	88 23       	and	r24, r24
    1746:	b9 f4       	brne	.+46     	; 0x1776 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    174a:	9c 81       	ldd	r25, Y+4	; 0x04
    174c:	f6 01       	movw	r30, r12
    174e:	91 83       	std	Z+1, r25	; 0x01
    1750:	80 83       	st	Z, r24
    1752:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
    1754:	f9 06       	cpc	r15, r25
    1756:	70 f0       	brcs	.+28     	; 0x1774 <USB_Host_GetDeviceConfigDescriptor+0x8e>
    1758:	90 93 36 01 	sts	0x0136, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    175c:	80 93 35 01 	sts	0x0135, r24
    1760:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1762:	88 d0       	rcall	.+272    	; 0x1874 <USB_Host_SendControlRequest>
    1764:	88 23       	and	r24, r24
    1766:	39 f4       	brne	.+14     	; 0x1776 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1768:	f8 01       	movw	r30, r16
    176a:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    176c:	92 30       	cpi	r25, 0x02	; 2
    176e:	19 f0       	breq	.+6      	; 0x1776 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1770:	86 e0       	ldi	r24, 0x06	; 6
    1772:	01 c0       	rjmp	.+2      	; 0x1776 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    1774:	85 e0       	ldi	r24, 0x05	; 5
    1776:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1778:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    177a:	f8 94       	cli
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	df 91       	pop	r29
    1784:	cf 91       	pop	r28
    1786:	1f 91       	pop	r17
    1788:	0f 91       	pop	r16
    178a:	ff 90       	pop	r15
    178c:	ef 90       	pop	r14
    178e:	df 90       	pop	r13
    1790:	cf 90       	pop	r12
    1792:	08 95       	ret

00001794 <USB_GetNextDescriptorComp>:
    1794:	af 92       	push	r10
    1796:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1798:	cf 92       	push	r12
    179a:	df 92       	push	r13
    179c:	ef 92       	push	r14
    179e:	ff 92       	push	r15
    17a0:	0f 93       	push	r16
    17a2:	1f 93       	push	r17
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
    17a8:	7c 01       	movw	r14, r24
    17aa:	8b 01       	movw	r16, r22
    17ac:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    17ae:	28 c0       	rjmp	.+80     	; 0x1800 <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    17b0:	f8 01       	movw	r30, r16
    17b2:	c0 80       	ld	r12, Z
    17b4:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    17b6:	f6 01       	movw	r30, r12
    17b8:	80 81       	ld	r24, Z
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	9e 01       	movw	r18, r28
    17be:	8c 17       	cp	r24, r28
    17c0:	9d 07       	cpc	r25, r29
    17c2:	08 f4       	brcc	.+2      	; 0x17c6 <USB_GetNextDescriptorComp+0x32>
    17c4:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    17c6:	c6 01       	movw	r24, r12
    17c8:	82 0f       	add	r24, r18
    17ca:	93 1f       	adc	r25, r19
    17cc:	f8 01       	movw	r30, r16
    17ce:	91 83       	std	Z+1, r25	; 0x01
    17d0:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
    17d2:	f7 01       	movw	r30, r14
    17d4:	80 81       	ld	r24, Z
    17d6:	91 81       	ldd	r25, Z+1	; 0x01
    17d8:	82 1b       	sub	r24, r18
    17da:	93 0b       	sbc	r25, r19
    17dc:	91 83       	std	Z+1, r25	; 0x01
    17de:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    17e0:	f8 01       	movw	r30, r16
    17e2:	80 81       	ld	r24, Z
    17e4:	91 81       	ldd	r25, Z+1	; 0x01
    17e6:	f5 01       	movw	r30, r10
    17e8:	09 95       	icall
    17ea:	82 30       	cpi	r24, 0x02	; 2
    17ec:	49 f0       	breq	.+18     	; 0x1800 <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    17ee:	81 30       	cpi	r24, 0x01	; 1
    17f0:	69 f4       	brne	.+26     	; 0x180c <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
    17f2:	f8 01       	movw	r30, r16
    17f4:	d1 82       	std	Z+1, r13	; 0x01
    17f6:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
    17f8:	f7 01       	movw	r30, r14
    17fa:	d1 83       	std	Z+1, r29	; 0x01
    17fc:	c0 83       	st	Z, r28
    17fe:	06 c0       	rjmp	.+12     	; 0x180c <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1800:	f7 01       	movw	r30, r14
    1802:	c0 81       	ld	r28, Z
    1804:	d1 81       	ldd	r29, Z+1	; 0x01
    1806:	20 97       	sbiw	r28, 0x00	; 0
    1808:	99 f6       	brne	.-90     	; 0x17b0 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    180a:	82 e0       	ldi	r24, 0x02	; 2
}
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	1f 91       	pop	r17
    1812:	0f 91       	pop	r16
    1814:	ff 90       	pop	r15
    1816:	ef 90       	pop	r14
    1818:	df 90       	pop	r13
    181a:	cf 90       	pop	r12
    181c:	bf 90       	pop	r11
    181e:	af 90       	pop	r10
    1820:	08 95       	ret

00001822 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1822:	08 95       	ret

00001824 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    182c:	c9 ee       	ldi	r28, 0xE9	; 233
    182e:	d3 e0       	ldi	r29, 0x03	; 3
    1830:	06 c0       	rjmp	.+12     	; 0x183e <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	75 db       	rcall	.-2326   	; 0xf20 <USB_Host_WaitMS>
    1836:	88 23       	and	r24, r24
    1838:	c9 f4       	brne	.+50     	; 0x186c <USB_Host_WaitForIOS+0x48>
    183a:	21 97       	sbiw	r28, 0x01	; 1
    183c:	b1 f0       	breq	.+44     	; 0x186a <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    183e:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1840:	29 f4       	brne	.+10     	; 0x184c <USB_Host_WaitForIOS+0x28>
    1842:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1846:	83 ff       	sbrs	r24, 3
    1848:	f4 cf       	rjmp	.-24     	; 0x1832 <USB_Host_WaitForIOS+0xe>
    184a:	0d c0       	rjmp	.+26     	; 0x1866 <USB_Host_WaitForIOS+0x42>
    184c:	11 30       	cpi	r17, 0x01	; 1
    184e:	29 f4       	brne	.+10     	; 0x185a <USB_Host_WaitForIOS+0x36>
    1850:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1854:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1856:	ed cf       	rjmp	.-38     	; 0x1832 <USB_Host_WaitForIOS+0xe>
    1858:	06 c0       	rjmp	.+12     	; 0x1866 <USB_Host_WaitForIOS+0x42>
    185a:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    185c:	51 f7       	brne	.-44     	; 0x1832 <USB_Host_WaitForIOS+0xe>
    185e:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1862:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1864:	e6 cf       	rjmp	.-52     	; 0x1832 <USB_Host_WaitForIOS+0xe>
    1866:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1868:	01 c0       	rjmp	.+2      	; 0x186c <USB_Host_WaitForIOS+0x48>
    186a:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    186c:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
    186e:	cf 91       	pop	r28
    1870:	1f 91       	pop	r17
    1872:	08 95       	ret

00001874 <USB_Host_SendControlRequest>:
    1874:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1876:	ff 92       	push	r15
    1878:	0f 93       	push	r16
    187a:	1f 93       	push	r17
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1882:	e0 90 9e 00 	lds	r14, 0x009E
    1886:	ff 24       	eor	r15, r15
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	e8 22       	and	r14, r24
    188c:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    188e:	00 91 35 01 	lds	r16, 0x0135
    1892:	10 91 36 01 	lds	r17, 0x0136
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1896:	80 91 9e 00 	lds	r24, 0x009E
    189a:	81 60       	ori	r24, 0x01	; 1
    189c:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	3e db       	rcall	.-2436   	; 0xf20 <USB_Host_WaitMS>
    18a4:	88 23       	and	r24, r24
    18a6:	09 f0       	breq	.+2      	; 0x18aa <USB_Host_SendControlRequest+0x36>
    18a8:	ca c0       	rjmp	.+404    	; 0x1a3e <USB_Host_SendControlRequest+0x1ca>
    18aa:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    18ae:	8f 7c       	andi	r24, 0xCF	; 207
    18b0:	80 93 aa 00 	sts	0x00AA, r24
    18b4:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    18b8:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    18bc:	8f 7e       	andi	r24, 0xEF	; 239
    18be:	80 93 a6 00 	sts	0x00A6, r24
    18c2:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    18c6:	8f 7b       	andi	r24, 0xBF	; 191
    18c8:	80 93 a9 00 	sts	0x00A9, r24
    18cc:	88 e0       	ldi	r24, 0x08	; 8
    18ce:	ef e2       	ldi	r30, 0x2F	; 47
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    18d0:	f1 e0       	ldi	r31, 0x01	; 1
    18d2:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    18d4:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    18d8:	81 50       	subi	r24, 0x01	; 1
    18da:	d9 f7       	brne	.-10     	; 0x18d2 <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    18dc:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    18e0:	87 77       	andi	r24, 0x77	; 119
    18e2:	80 93 a6 00 	sts	0x00A6, r24
    18e6:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    18e8:	9d df       	rcall	.-198    	; 0x1824 <USB_Host_WaitForIOS>
    18ea:	88 23       	and	r24, r24
    18ec:	09 f0       	breq	.+2      	; 0x18f0 <USB_Host_SendControlRequest+0x7c>
    18ee:	a7 c0       	rjmp	.+334    	; 0x1a3e <USB_Host_SendControlRequest+0x1ca>
    18f0:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    18f4:	80 64       	ori	r24, 0x40	; 64
    18f6:	80 93 a9 00 	sts	0x00A9, r24
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	11 db       	rcall	.-2526   	; 0xf20 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    18fe:	88 23       	and	r24, r24
    1900:	09 f0       	breq	.+2      	; 0x1904 <USB_Host_SendControlRequest+0x90>
    1902:	9d c0       	rjmp	.+314    	; 0x1a3e <USB_Host_SendControlRequest+0x1ca>
    1904:	80 91 2f 01 	lds	r24, 0x012F
    1908:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    190a:	4f c0       	rjmp	.+158    	; 0x19aa <USB_Host_SendControlRequest+0x136>
    190c:	80 91 aa 00 	lds	r24, 0x00AA
    1910:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1912:	80 61       	ori	r24, 0x10	; 16
    1914:	80 93 aa 00 	sts	0x00AA, r24
    1918:	20 97       	sbiw	r28, 0x00	; 0
    191a:	61 f5       	brne	.+88     	; 0x1974 <USB_Host_SendControlRequest+0x100>
    191c:	2e c0       	rjmp	.+92     	; 0x197a <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    191e:	80 91 a9 00 	lds	r24, 0x00A9
    1922:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1924:	80 93 a9 00 	sts	0x00A9, r24
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	7c df       	rcall	.-264    	; 0x1824 <USB_Host_WaitForIOS>
    192c:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    192e:	09 f0       	breq	.+2      	; 0x1932 <USB_Host_SendControlRequest+0xbe>
    1930:	86 c0       	rjmp	.+268    	; 0x1a3e <USB_Host_SendControlRequest+0x1ca>
    1932:	80 91 f6 00 	lds	r24, 0x00F6
    1936:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	41 f4       	brne	.+16     	; 0x194e <USB_Host_SendControlRequest+0xda>
    193e:	00 e0       	ldi	r16, 0x00	; 0
    1940:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1942:	05 c0       	rjmp	.+10     	; 0x194e <USB_Host_SendControlRequest+0xda>
    1944:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
    1948:	89 93       	st	Y+, r24
    194a:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    194c:	10 40       	sbci	r17, 0x00	; 0
    194e:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
    1952:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	19 f0       	breq	.+6      	; 0x1960 <USB_Host_SendControlRequest+0xec>
    195a:	01 15       	cp	r16, r1
    195c:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    195e:	91 f7       	brne	.-28     	; 0x1944 <USB_Host_SendControlRequest+0xd0>
    1960:	80 91 a9 00 	lds	r24, 0x00A9
    1964:	80 64       	ori	r24, 0x40	; 64
    1966:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    196a:	80 91 a6 00 	lds	r24, 0x00A6
    196e:	8e 77       	andi	r24, 0x7E	; 126
    1970:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1974:	01 15       	cp	r16, r1
    1976:	11 05       	cpc	r17, r1
    1978:	91 f6       	brne	.-92     	; 0x191e <USB_Host_SendControlRequest+0xaa>
    197a:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    197e:	8f 7c       	andi	r24, 0xCF	; 207
    1980:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1982:	80 93 aa 00 	sts	0x00AA, r24
    1986:	80 91 a9 00 	lds	r24, 0x00A9
    198a:	8f 7b       	andi	r24, 0xBF	; 191
    198c:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1990:	82 e0       	ldi	r24, 0x02	; 2
    1992:	48 df       	rcall	.-368    	; 0x1824 <USB_Host_WaitForIOS>
    1994:	88 23       	and	r24, r24
    1996:	09 f0       	breq	.+2      	; 0x199a <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1998:	52 c0       	rjmp	.+164    	; 0x1a3e <USB_Host_SendControlRequest+0x1ca>
    199a:	80 91 a6 00 	lds	r24, 0x00A6
    199e:	8b 77       	andi	r24, 0x7B	; 123
    19a0:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    19a4:	82 e0       	ldi	r24, 0x02	; 2
    19a6:	3e df       	rcall	.-388    	; 0x1824 <USB_Host_WaitForIOS>
    19a8:	4a c0       	rjmp	.+148    	; 0x1a3e <USB_Host_SendControlRequest+0x1ca>
    19aa:	20 97       	sbiw	r28, 0x00	; 0
    19ac:	a1 f1       	breq	.+104    	; 0x1a16 <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    19ae:	80 91 aa 00 	lds	r24, 0x00AA
    19b2:	8f 7c       	andi	r24, 0xCF	; 207
    19b4:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    19b6:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    19ba:	80 91 a9 00 	lds	r24, 0x00A9
    19be:	8f 7b       	andi	r24, 0xBF	; 191
    19c0:	80 93 a9 00 	sts	0x00A9, r24
    19c4:	1c c0       	rjmp	.+56     	; 0x19fe <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    19c6:	2e df       	rcall	.-420    	; 0x1824 <USB_Host_WaitForIOS>
    19c8:	88 23       	and	r24, r24
    19ca:	c9 f5       	brne	.+114    	; 0x1a3e <USB_Host_SendControlRequest+0x1ca>
    19cc:	fe 01       	movw	r30, r28
    19ce:	07 c0       	rjmp	.+14     	; 0x19de <USB_Host_SendControlRequest+0x16a>
    19d0:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    19d2:	ef 01       	movw	r28, r30
    19d4:	80 93 af 00 	sts	0x00AF, r24
    19d8:	01 50       	subi	r16, 0x01	; 1
    19da:	10 40       	sbci	r17, 0x00	; 0
    19dc:	59 f0       	breq	.+22     	; 0x19f4 <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    19de:	ef 01       	movw	r28, r30
    19e0:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    19e4:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    19e8:	80 91 1c 01 	lds	r24, 0x011C
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    19ec:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    19ee:	28 17       	cp	r18, r24
    19f0:	39 07       	cpc	r19, r25
    19f2:	70 f3       	brcs	.-36     	; 0x19d0 <USB_Host_SendControlRequest+0x15c>
    19f4:	80 91 a6 00 	lds	r24, 0x00A6
    19f8:	8b 77       	andi	r24, 0x7B	; 123
    19fa:	80 93 a6 00 	sts	0x00A6, r24
    19fe:	82 e0       	ldi	r24, 0x02	; 2
    1a00:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1a02:	11 05       	cpc	r17, r1
    1a04:	01 f7       	brne	.-64     	; 0x19c6 <USB_Host_SendControlRequest+0x152>
    1a06:	0e df       	rcall	.-484    	; 0x1824 <USB_Host_WaitForIOS>
    1a08:	88 23       	and	r24, r24
    1a0a:	c9 f4       	brne	.+50     	; 0x1a3e <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a0c:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1a10:	80 64       	ori	r24, 0x40	; 64
    1a12:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a16:	80 91 aa 00 	lds	r24, 0x00AA
    1a1a:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1a1c:	80 61       	ori	r24, 0x10	; 16
    1a1e:	80 93 aa 00 	sts	0x00AA, r24
    1a22:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1a26:	8f 7b       	andi	r24, 0xBF	; 191
    1a28:	80 93 a9 00 	sts	0x00A9, r24
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	fa de       	rcall	.-524    	; 0x1824 <USB_Host_WaitForIOS>
    1a30:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1a32:	29 f4       	brne	.+10     	; 0x1a3e <USB_Host_SendControlRequest+0x1ca>
    1a34:	90 91 a6 00 	lds	r25, 0x00A6
    1a38:	9e 77       	andi	r25, 0x7E	; 126
    1a3a:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1a3e:	90 91 a9 00 	lds	r25, 0x00A9
    1a42:	90 64       	ori	r25, 0x40	; 64
    1a44:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1a48:	e1 14       	cp	r14, r1
    1a4a:	f1 04       	cpc	r15, r1
    1a4c:	29 f4       	brne	.+10     	; 0x1a58 <USB_Host_SendControlRequest+0x1e4>
    1a4e:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1a52:	9e 7f       	andi	r25, 0xFE	; 254
    1a54:	90 93 9e 00 	sts	0x009E, r25
    1a58:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1a5a:	90 93 a8 00 	sts	0x00A8, r25
    1a5e:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	1f 91       	pop	r17
    1a68:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1a6a:	ff 90       	pop	r15
    1a6c:	ef 90       	pop	r14
    1a6e:	08 95       	ret

00001a70 <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    1a70:	cf 93       	push	r28
    1a72:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1a74:	10 92 2f 01 	sts	0x012F, r1
    1a78:	89 e0       	ldi	r24, 0x09	; 9
    1a7a:	80 93 30 01 	sts	0x0130, r24
    1a7e:	c0 93 31 01 	sts	0x0131, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1a82:	10 92 32 01 	sts	0x0132, r1
    1a86:	10 92 34 01 	sts	0x0134, r1
    1a8a:	10 92 33 01 	sts	0x0133, r1
    1a8e:	10 92 36 01 	sts	0x0136, r1
    1a92:	10 92 35 01 	sts	0x0135, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1a96:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	ea de       	rcall	.-556    	; 0x1874 <USB_Host_SendControlRequest>
    1aa0:	88 23       	and	r24, r24
    1aa2:	49 f4       	brne	.+18     	; 0x1ab6 <USB_Host_SetDeviceConfiguration+0x46>
    1aa4:	c0 93 2d 01 	sts	0x012D, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1aa8:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1aaa:	11 f0       	breq	.+4      	; 0x1ab0 <USB_Host_SetDeviceConfiguration+0x40>
    1aac:	9b e0       	ldi	r25, 0x0B	; 11
    1aae:	01 c0       	rjmp	.+2      	; 0x1ab2 <USB_Host_SetDeviceConfiguration+0x42>
    1ab0:	9a e0       	ldi	r25, 0x0A	; 10
    1ab2:	90 93 37 01 	sts	0x0137, r25
    1ab6:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1ab8:	08 95       	ret

00001aba <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1aba:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1abc:	c0 91 a7 00 	lds	r28, 0x00A7
    1ac0:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1ac2:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1ac6:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1aca:	7f da       	rcall	.-2818   	; 0xfca <USB_Host_ProcessNextHostState>
    1acc:	c0 93 a7 00 	sts	0x00A7, r28
    1ad0:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1ad2:	08 95       	ret

00001ad4 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1ad4:	90 91 c8 00 	lds	r25, 0x00C8
    1ad8:	95 ff       	sbrs	r25, 5
    1ada:	fc cf       	rjmp	.-8      	; 0x1ad4 <Serial_putchar>
				UDR1 = DataByte;
    1adc:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	08 95       	ret

00001ae6 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1ae6:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1aea:	87 ff       	sbrs	r24, 7
    1aec:	08 c0       	rjmp	.+16     	; 0x1afe <Serial_getchar+0x18>
    1aee:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1af2:	87 ff       	sbrs	r24, 7
    1af4:	07 c0       	rjmp	.+14     	; 0x1b04 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1af6:	80 91 ce 00 	lds	r24, 0x00CE
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	08 95       	ret
	  return _FDEV_EOF;
    1afe:	8e ef       	ldi	r24, 0xFE	; 254
    1b00:	9f ef       	ldi	r25, 0xFF	; 255
    1b02:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1b04:	8f ef       	ldi	r24, 0xFF	; 255
    1b06:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    1b08:	08 95       	ret

00001b0a <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    1b0a:	fc 01       	movw	r30, r24
	if (!(Stream))
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	51 f4       	brne	.+20     	; 0x1b24 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1b10:	e8 e3       	ldi	r30, 0x38	; 56
    1b12:	f1 e0       	ldi	r31, 0x01	; 1
    1b14:	f0 93 47 01 	sts	0x0147, r31
    1b18:	e0 93 46 01 	sts	0x0146, r30
		stdout = Stream;
    1b1c:	f0 93 49 01 	sts	0x0149, r31
    1b20:	e0 93 48 01 	sts	0x0148, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1b24:	8e e0       	ldi	r24, 0x0E	; 14
    1b26:	df 01       	movw	r26, r30
    1b28:	1d 92       	st	X+, r1
    1b2a:	8a 95       	dec	r24
    1b2c:	e9 f7       	brne	.-6      	; 0x1b28 <Serial_CreateStream+0x1e>
    1b2e:	83 e0       	ldi	r24, 0x03	; 3
    1b30:	83 83       	std	Z+3, r24	; 0x03
    1b32:	8a e6       	ldi	r24, 0x6A	; 106
    1b34:	9d e0       	ldi	r25, 0x0D	; 13
    1b36:	91 87       	std	Z+9, r25	; 0x09
    1b38:	80 87       	std	Z+8, r24	; 0x08
    1b3a:	83 e7       	ldi	r24, 0x73	; 115
    1b3c:	9d e0       	ldi	r25, 0x0D	; 13
    1b3e:	93 87       	std	Z+11, r25	; 0x0b
    1b40:	82 87       	std	Z+10, r24	; 0x0a
}
    1b42:	08 95       	ret

00001b44 <memcpy>:
    1b44:	fb 01       	movw	r30, r22
    1b46:	dc 01       	movw	r26, r24
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <memcpy+0xa>
    1b4a:	01 90       	ld	r0, Z+
    1b4c:	0d 92       	st	X+, r0
    1b4e:	41 50       	subi	r20, 0x01	; 1
    1b50:	50 40       	sbci	r21, 0x00	; 0
    1b52:	d8 f7       	brcc	.-10     	; 0x1b4a <memcpy+0x6>
    1b54:	08 95       	ret

00001b56 <printf>:
    1b56:	cf 93       	push	r28
    1b58:	df 93       	push	r29
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	fe 01       	movw	r30, r28
    1b60:	35 96       	adiw	r30, 0x05	; 5
    1b62:	61 91       	ld	r22, Z+
    1b64:	71 91       	ld	r23, Z+
    1b66:	80 91 48 01 	lds	r24, 0x0148
    1b6a:	90 91 49 01 	lds	r25, 0x0149
    1b6e:	af 01       	movw	r20, r30
    1b70:	7f d0       	rcall	.+254    	; 0x1c70 <vfprintf>
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	08 95       	ret

00001b78 <printf_P>:
    1b78:	cf 93       	push	r28
    1b7a:	df 93       	push	r29
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	fe 01       	movw	r30, r28
    1b82:	35 96       	adiw	r30, 0x05	; 5
    1b84:	61 91       	ld	r22, Z+
    1b86:	71 91       	ld	r23, Z+
    1b88:	80 91 48 01 	lds	r24, 0x0148
    1b8c:	90 91 49 01 	lds	r25, 0x0149
    1b90:	dc 01       	movw	r26, r24
    1b92:	13 96       	adiw	r26, 0x03	; 3
    1b94:	2c 91       	ld	r18, X
    1b96:	13 97       	sbiw	r26, 0x03	; 3
    1b98:	28 60       	ori	r18, 0x08	; 8
    1b9a:	13 96       	adiw	r26, 0x03	; 3
    1b9c:	2c 93       	st	X, r18
    1b9e:	af 01       	movw	r20, r30
    1ba0:	67 d0       	rcall	.+206    	; 0x1c70 <vfprintf>
    1ba2:	e0 91 48 01 	lds	r30, 0x0148
    1ba6:	f0 91 49 01 	lds	r31, 0x0149
    1baa:	23 81       	ldd	r18, Z+3	; 0x03
    1bac:	27 7f       	andi	r18, 0xF7	; 247
    1bae:	23 83       	std	Z+3, r18	; 0x03
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	08 95       	ret

00001bb6 <puts>:
    1bb6:	0f 93       	push	r16
    1bb8:	1f 93       	push	r17
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
    1bbe:	8c 01       	movw	r16, r24
    1bc0:	e0 91 48 01 	lds	r30, 0x0148
    1bc4:	f0 91 49 01 	lds	r31, 0x0149
    1bc8:	83 81       	ldd	r24, Z+3	; 0x03
    1bca:	81 ff       	sbrs	r24, 1
    1bcc:	1a c0       	rjmp	.+52     	; 0x1c02 <puts+0x4c>
    1bce:	c0 e0       	ldi	r28, 0x00	; 0
    1bd0:	d0 e0       	ldi	r29, 0x00	; 0
    1bd2:	05 c0       	rjmp	.+10     	; 0x1bde <puts+0x28>
    1bd4:	09 95       	icall
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	11 f0       	breq	.+4      	; 0x1bde <puts+0x28>
    1bda:	cf ef       	ldi	r28, 0xFF	; 255
    1bdc:	df ef       	ldi	r29, 0xFF	; 255
    1bde:	f8 01       	movw	r30, r16
    1be0:	81 91       	ld	r24, Z+
    1be2:	8f 01       	movw	r16, r30
    1be4:	60 91 48 01 	lds	r22, 0x0148
    1be8:	70 91 49 01 	lds	r23, 0x0149
    1bec:	db 01       	movw	r26, r22
    1bee:	18 96       	adiw	r26, 0x08	; 8
    1bf0:	ed 91       	ld	r30, X+
    1bf2:	fc 91       	ld	r31, X
    1bf4:	19 97       	sbiw	r26, 0x09	; 9
    1bf6:	88 23       	and	r24, r24
    1bf8:	69 f7       	brne	.-38     	; 0x1bd4 <puts+0x1e>
    1bfa:	8a e0       	ldi	r24, 0x0A	; 10
    1bfc:	09 95       	icall
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	11 f0       	breq	.+4      	; 0x1c06 <puts+0x50>
    1c02:	cf ef       	ldi	r28, 0xFF	; 255
    1c04:	df ef       	ldi	r29, 0xFF	; 255
    1c06:	ce 01       	movw	r24, r28
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	1f 91       	pop	r17
    1c0e:	0f 91       	pop	r16
    1c10:	08 95       	ret

00001c12 <puts_P>:
    1c12:	0f 93       	push	r16
    1c14:	1f 93       	push	r17
    1c16:	cf 93       	push	r28
    1c18:	df 93       	push	r29
    1c1a:	8c 01       	movw	r16, r24
    1c1c:	e0 91 48 01 	lds	r30, 0x0148
    1c20:	f0 91 49 01 	lds	r31, 0x0149
    1c24:	83 81       	ldd	r24, Z+3	; 0x03
    1c26:	81 ff       	sbrs	r24, 1
    1c28:	1b c0       	rjmp	.+54     	; 0x1c60 <puts_P+0x4e>
    1c2a:	c0 e0       	ldi	r28, 0x00	; 0
    1c2c:	d0 e0       	ldi	r29, 0x00	; 0
    1c2e:	07 c0       	rjmp	.+14     	; 0x1c3e <puts_P+0x2c>
    1c30:	09 95       	icall
    1c32:	00 97       	sbiw	r24, 0x00	; 0
    1c34:	11 f0       	breq	.+4      	; 0x1c3a <puts_P+0x28>
    1c36:	cf ef       	ldi	r28, 0xFF	; 255
    1c38:	df ef       	ldi	r29, 0xFF	; 255
    1c3a:	0f 5f       	subi	r16, 0xFF	; 255
    1c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3e:	f8 01       	movw	r30, r16
    1c40:	84 91       	lpm	r24, Z
    1c42:	60 91 48 01 	lds	r22, 0x0148
    1c46:	70 91 49 01 	lds	r23, 0x0149
    1c4a:	db 01       	movw	r26, r22
    1c4c:	18 96       	adiw	r26, 0x08	; 8
    1c4e:	ed 91       	ld	r30, X+
    1c50:	fc 91       	ld	r31, X
    1c52:	19 97       	sbiw	r26, 0x09	; 9
    1c54:	88 23       	and	r24, r24
    1c56:	61 f7       	brne	.-40     	; 0x1c30 <puts_P+0x1e>
    1c58:	8a e0       	ldi	r24, 0x0A	; 10
    1c5a:	09 95       	icall
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	11 f0       	breq	.+4      	; 0x1c64 <puts_P+0x52>
    1c60:	cf ef       	ldi	r28, 0xFF	; 255
    1c62:	df ef       	ldi	r29, 0xFF	; 255
    1c64:	ce 01       	movw	r24, r28
    1c66:	df 91       	pop	r29
    1c68:	cf 91       	pop	r28
    1c6a:	1f 91       	pop	r17
    1c6c:	0f 91       	pop	r16
    1c6e:	08 95       	ret

00001c70 <vfprintf>:
    1c70:	2f 92       	push	r2
    1c72:	3f 92       	push	r3
    1c74:	4f 92       	push	r4
    1c76:	5f 92       	push	r5
    1c78:	6f 92       	push	r6
    1c7a:	7f 92       	push	r7
    1c7c:	8f 92       	push	r8
    1c7e:	9f 92       	push	r9
    1c80:	af 92       	push	r10
    1c82:	bf 92       	push	r11
    1c84:	cf 92       	push	r12
    1c86:	df 92       	push	r13
    1c88:	ef 92       	push	r14
    1c8a:	ff 92       	push	r15
    1c8c:	0f 93       	push	r16
    1c8e:	1f 93       	push	r17
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	2d 97       	sbiw	r28, 0x0d	; 13
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	f8 94       	cli
    1c9e:	de bf       	out	0x3e, r29	; 62
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	cd bf       	out	0x3d, r28	; 61
    1ca4:	3c 01       	movw	r6, r24
    1ca6:	7d 87       	std	Y+13, r23	; 0x0d
    1ca8:	6c 87       	std	Y+12, r22	; 0x0c
    1caa:	5a 01       	movw	r10, r20
    1cac:	fc 01       	movw	r30, r24
    1cae:	17 82       	std	Z+7, r1	; 0x07
    1cb0:	16 82       	std	Z+6, r1	; 0x06
    1cb2:	83 81       	ldd	r24, Z+3	; 0x03
    1cb4:	81 ff       	sbrs	r24, 1
    1cb6:	bb c1       	rjmp	.+886    	; 0x202e <vfprintf+0x3be>
    1cb8:	2e 01       	movw	r4, r28
    1cba:	08 94       	sec
    1cbc:	41 1c       	adc	r4, r1
    1cbe:	51 1c       	adc	r5, r1
    1cc0:	f3 01       	movw	r30, r6
    1cc2:	93 81       	ldd	r25, Z+3	; 0x03
    1cc4:	ec 85       	ldd	r30, Y+12	; 0x0c
    1cc6:	fd 85       	ldd	r31, Y+13	; 0x0d
    1cc8:	93 fd       	sbrc	r25, 3
    1cca:	85 91       	lpm	r24, Z+
    1ccc:	93 ff       	sbrs	r25, 3
    1cce:	81 91       	ld	r24, Z+
    1cd0:	fd 87       	std	Y+13, r31	; 0x0d
    1cd2:	ec 87       	std	Y+12, r30	; 0x0c
    1cd4:	88 23       	and	r24, r24
    1cd6:	09 f4       	brne	.+2      	; 0x1cda <vfprintf+0x6a>
    1cd8:	a6 c1       	rjmp	.+844    	; 0x2026 <vfprintf+0x3b6>
    1cda:	85 32       	cpi	r24, 0x25	; 37
    1cdc:	41 f4       	brne	.+16     	; 0x1cee <vfprintf+0x7e>
    1cde:	93 fd       	sbrc	r25, 3
    1ce0:	85 91       	lpm	r24, Z+
    1ce2:	93 ff       	sbrs	r25, 3
    1ce4:	81 91       	ld	r24, Z+
    1ce6:	fd 87       	std	Y+13, r31	; 0x0d
    1ce8:	ec 87       	std	Y+12, r30	; 0x0c
    1cea:	85 32       	cpi	r24, 0x25	; 37
    1cec:	21 f4       	brne	.+8      	; 0x1cf6 <vfprintf+0x86>
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	b3 01       	movw	r22, r6
    1cf2:	ce d1       	rcall	.+924    	; 0x2090 <fputc>
    1cf4:	e5 cf       	rjmp	.-54     	; 0x1cc0 <vfprintf+0x50>
    1cf6:	ff 24       	eor	r15, r15
    1cf8:	ee 24       	eor	r14, r14
    1cfa:	10 e0       	ldi	r17, 0x00	; 0
    1cfc:	10 32       	cpi	r17, 0x20	; 32
    1cfe:	b0 f4       	brcc	.+44     	; 0x1d2c <vfprintf+0xbc>
    1d00:	8b 32       	cpi	r24, 0x2B	; 43
    1d02:	69 f0       	breq	.+26     	; 0x1d1e <vfprintf+0xae>
    1d04:	8c 32       	cpi	r24, 0x2C	; 44
    1d06:	28 f4       	brcc	.+10     	; 0x1d12 <vfprintf+0xa2>
    1d08:	80 32       	cpi	r24, 0x20	; 32
    1d0a:	51 f0       	breq	.+20     	; 0x1d20 <vfprintf+0xb0>
    1d0c:	83 32       	cpi	r24, 0x23	; 35
    1d0e:	71 f4       	brne	.+28     	; 0x1d2c <vfprintf+0xbc>
    1d10:	0b c0       	rjmp	.+22     	; 0x1d28 <vfprintf+0xb8>
    1d12:	8d 32       	cpi	r24, 0x2D	; 45
    1d14:	39 f0       	breq	.+14     	; 0x1d24 <vfprintf+0xb4>
    1d16:	80 33       	cpi	r24, 0x30	; 48
    1d18:	49 f4       	brne	.+18     	; 0x1d2c <vfprintf+0xbc>
    1d1a:	11 60       	ori	r17, 0x01	; 1
    1d1c:	2c c0       	rjmp	.+88     	; 0x1d76 <vfprintf+0x106>
    1d1e:	12 60       	ori	r17, 0x02	; 2
    1d20:	14 60       	ori	r17, 0x04	; 4
    1d22:	29 c0       	rjmp	.+82     	; 0x1d76 <vfprintf+0x106>
    1d24:	18 60       	ori	r17, 0x08	; 8
    1d26:	27 c0       	rjmp	.+78     	; 0x1d76 <vfprintf+0x106>
    1d28:	10 61       	ori	r17, 0x10	; 16
    1d2a:	25 c0       	rjmp	.+74     	; 0x1d76 <vfprintf+0x106>
    1d2c:	17 fd       	sbrc	r17, 7
    1d2e:	2e c0       	rjmp	.+92     	; 0x1d8c <vfprintf+0x11c>
    1d30:	28 2f       	mov	r18, r24
    1d32:	20 53       	subi	r18, 0x30	; 48
    1d34:	2a 30       	cpi	r18, 0x0A	; 10
    1d36:	98 f4       	brcc	.+38     	; 0x1d5e <vfprintf+0xee>
    1d38:	16 ff       	sbrs	r17, 6
    1d3a:	08 c0       	rjmp	.+16     	; 0x1d4c <vfprintf+0xdc>
    1d3c:	8f 2d       	mov	r24, r15
    1d3e:	88 0f       	add	r24, r24
    1d40:	f8 2e       	mov	r15, r24
    1d42:	ff 0c       	add	r15, r15
    1d44:	ff 0c       	add	r15, r15
    1d46:	f8 0e       	add	r15, r24
    1d48:	f2 0e       	add	r15, r18
    1d4a:	15 c0       	rjmp	.+42     	; 0x1d76 <vfprintf+0x106>
    1d4c:	8e 2d       	mov	r24, r14
    1d4e:	88 0f       	add	r24, r24
    1d50:	e8 2e       	mov	r14, r24
    1d52:	ee 0c       	add	r14, r14
    1d54:	ee 0c       	add	r14, r14
    1d56:	e8 0e       	add	r14, r24
    1d58:	e2 0e       	add	r14, r18
    1d5a:	10 62       	ori	r17, 0x20	; 32
    1d5c:	0c c0       	rjmp	.+24     	; 0x1d76 <vfprintf+0x106>
    1d5e:	8e 32       	cpi	r24, 0x2E	; 46
    1d60:	21 f4       	brne	.+8      	; 0x1d6a <vfprintf+0xfa>
    1d62:	16 fd       	sbrc	r17, 6
    1d64:	60 c1       	rjmp	.+704    	; 0x2026 <vfprintf+0x3b6>
    1d66:	10 64       	ori	r17, 0x40	; 64
    1d68:	06 c0       	rjmp	.+12     	; 0x1d76 <vfprintf+0x106>
    1d6a:	8c 36       	cpi	r24, 0x6C	; 108
    1d6c:	11 f4       	brne	.+4      	; 0x1d72 <vfprintf+0x102>
    1d6e:	10 68       	ori	r17, 0x80	; 128
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <vfprintf+0x106>
    1d72:	88 36       	cpi	r24, 0x68	; 104
    1d74:	59 f4       	brne	.+22     	; 0x1d8c <vfprintf+0x11c>
    1d76:	ec 85       	ldd	r30, Y+12	; 0x0c
    1d78:	fd 85       	ldd	r31, Y+13	; 0x0d
    1d7a:	93 fd       	sbrc	r25, 3
    1d7c:	85 91       	lpm	r24, Z+
    1d7e:	93 ff       	sbrs	r25, 3
    1d80:	81 91       	ld	r24, Z+
    1d82:	fd 87       	std	Y+13, r31	; 0x0d
    1d84:	ec 87       	std	Y+12, r30	; 0x0c
    1d86:	88 23       	and	r24, r24
    1d88:	09 f0       	breq	.+2      	; 0x1d8c <vfprintf+0x11c>
    1d8a:	b8 cf       	rjmp	.-144    	; 0x1cfc <vfprintf+0x8c>
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	95 54       	subi	r25, 0x45	; 69
    1d90:	93 30       	cpi	r25, 0x03	; 3
    1d92:	18 f0       	brcs	.+6      	; 0x1d9a <vfprintf+0x12a>
    1d94:	90 52       	subi	r25, 0x20	; 32
    1d96:	93 30       	cpi	r25, 0x03	; 3
    1d98:	38 f4       	brcc	.+14     	; 0x1da8 <vfprintf+0x138>
    1d9a:	24 e0       	ldi	r18, 0x04	; 4
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	a2 0e       	add	r10, r18
    1da0:	b3 1e       	adc	r11, r19
    1da2:	3f e3       	ldi	r19, 0x3F	; 63
    1da4:	39 83       	std	Y+1, r19	; 0x01
    1da6:	0f c0       	rjmp	.+30     	; 0x1dc6 <vfprintf+0x156>
    1da8:	83 36       	cpi	r24, 0x63	; 99
    1daa:	31 f0       	breq	.+12     	; 0x1db8 <vfprintf+0x148>
    1dac:	83 37       	cpi	r24, 0x73	; 115
    1dae:	81 f0       	breq	.+32     	; 0x1dd0 <vfprintf+0x160>
    1db0:	83 35       	cpi	r24, 0x53	; 83
    1db2:	09 f0       	breq	.+2      	; 0x1db6 <vfprintf+0x146>
    1db4:	56 c0       	rjmp	.+172    	; 0x1e62 <vfprintf+0x1f2>
    1db6:	21 c0       	rjmp	.+66     	; 0x1dfa <vfprintf+0x18a>
    1db8:	f5 01       	movw	r30, r10
    1dba:	80 81       	ld	r24, Z
    1dbc:	89 83       	std	Y+1, r24	; 0x01
    1dbe:	22 e0       	ldi	r18, 0x02	; 2
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	a2 0e       	add	r10, r18
    1dc4:	b3 1e       	adc	r11, r19
    1dc6:	21 e0       	ldi	r18, 0x01	; 1
    1dc8:	c2 2e       	mov	r12, r18
    1dca:	d1 2c       	mov	r13, r1
    1dcc:	42 01       	movw	r8, r4
    1dce:	13 c0       	rjmp	.+38     	; 0x1df6 <vfprintf+0x186>
    1dd0:	92 e0       	ldi	r25, 0x02	; 2
    1dd2:	29 2e       	mov	r2, r25
    1dd4:	31 2c       	mov	r3, r1
    1dd6:	2a 0c       	add	r2, r10
    1dd8:	3b 1c       	adc	r3, r11
    1dda:	f5 01       	movw	r30, r10
    1ddc:	80 80       	ld	r8, Z
    1dde:	91 80       	ldd	r9, Z+1	; 0x01
    1de0:	16 ff       	sbrs	r17, 6
    1de2:	03 c0       	rjmp	.+6      	; 0x1dea <vfprintf+0x17a>
    1de4:	6f 2d       	mov	r22, r15
    1de6:	70 e0       	ldi	r23, 0x00	; 0
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <vfprintf+0x17e>
    1dea:	6f ef       	ldi	r22, 0xFF	; 255
    1dec:	7f ef       	ldi	r23, 0xFF	; 255
    1dee:	c4 01       	movw	r24, r8
    1df0:	44 d1       	rcall	.+648    	; 0x207a <strnlen>
    1df2:	6c 01       	movw	r12, r24
    1df4:	51 01       	movw	r10, r2
    1df6:	1f 77       	andi	r17, 0x7F	; 127
    1df8:	14 c0       	rjmp	.+40     	; 0x1e22 <vfprintf+0x1b2>
    1dfa:	82 e0       	ldi	r24, 0x02	; 2
    1dfc:	28 2e       	mov	r2, r24
    1dfe:	31 2c       	mov	r3, r1
    1e00:	2a 0c       	add	r2, r10
    1e02:	3b 1c       	adc	r3, r11
    1e04:	f5 01       	movw	r30, r10
    1e06:	80 80       	ld	r8, Z
    1e08:	91 80       	ldd	r9, Z+1	; 0x01
    1e0a:	16 ff       	sbrs	r17, 6
    1e0c:	03 c0       	rjmp	.+6      	; 0x1e14 <vfprintf+0x1a4>
    1e0e:	6f 2d       	mov	r22, r15
    1e10:	70 e0       	ldi	r23, 0x00	; 0
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <vfprintf+0x1a8>
    1e14:	6f ef       	ldi	r22, 0xFF	; 255
    1e16:	7f ef       	ldi	r23, 0xFF	; 255
    1e18:	c4 01       	movw	r24, r8
    1e1a:	24 d1       	rcall	.+584    	; 0x2064 <strnlen_P>
    1e1c:	6c 01       	movw	r12, r24
    1e1e:	10 68       	ori	r17, 0x80	; 128
    1e20:	51 01       	movw	r10, r2
    1e22:	13 fd       	sbrc	r17, 3
    1e24:	1a c0       	rjmp	.+52     	; 0x1e5a <vfprintf+0x1ea>
    1e26:	05 c0       	rjmp	.+10     	; 0x1e32 <vfprintf+0x1c2>
    1e28:	80 e2       	ldi	r24, 0x20	; 32
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	b3 01       	movw	r22, r6
    1e2e:	30 d1       	rcall	.+608    	; 0x2090 <fputc>
    1e30:	ea 94       	dec	r14
    1e32:	8e 2d       	mov	r24, r14
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	c8 16       	cp	r12, r24
    1e38:	d9 06       	cpc	r13, r25
    1e3a:	b0 f3       	brcs	.-20     	; 0x1e28 <vfprintf+0x1b8>
    1e3c:	0e c0       	rjmp	.+28     	; 0x1e5a <vfprintf+0x1ea>
    1e3e:	f4 01       	movw	r30, r8
    1e40:	17 fd       	sbrc	r17, 7
    1e42:	85 91       	lpm	r24, Z+
    1e44:	17 ff       	sbrs	r17, 7
    1e46:	81 91       	ld	r24, Z+
    1e48:	4f 01       	movw	r8, r30
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	b3 01       	movw	r22, r6
    1e4e:	20 d1       	rcall	.+576    	; 0x2090 <fputc>
    1e50:	e1 10       	cpse	r14, r1
    1e52:	ea 94       	dec	r14
    1e54:	08 94       	sec
    1e56:	c1 08       	sbc	r12, r1
    1e58:	d1 08       	sbc	r13, r1
    1e5a:	c1 14       	cp	r12, r1
    1e5c:	d1 04       	cpc	r13, r1
    1e5e:	79 f7       	brne	.-34     	; 0x1e3e <vfprintf+0x1ce>
    1e60:	df c0       	rjmp	.+446    	; 0x2020 <vfprintf+0x3b0>
    1e62:	84 36       	cpi	r24, 0x64	; 100
    1e64:	11 f0       	breq	.+4      	; 0x1e6a <vfprintf+0x1fa>
    1e66:	89 36       	cpi	r24, 0x69	; 105
    1e68:	49 f5       	brne	.+82     	; 0x1ebc <vfprintf+0x24c>
    1e6a:	f5 01       	movw	r30, r10
    1e6c:	17 ff       	sbrs	r17, 7
    1e6e:	07 c0       	rjmp	.+14     	; 0x1e7e <vfprintf+0x20e>
    1e70:	80 81       	ld	r24, Z
    1e72:	91 81       	ldd	r25, Z+1	; 0x01
    1e74:	a2 81       	ldd	r26, Z+2	; 0x02
    1e76:	b3 81       	ldd	r27, Z+3	; 0x03
    1e78:	24 e0       	ldi	r18, 0x04	; 4
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	08 c0       	rjmp	.+16     	; 0x1e8e <vfprintf+0x21e>
    1e7e:	80 81       	ld	r24, Z
    1e80:	91 81       	ldd	r25, Z+1	; 0x01
    1e82:	aa 27       	eor	r26, r26
    1e84:	97 fd       	sbrc	r25, 7
    1e86:	a0 95       	com	r26
    1e88:	ba 2f       	mov	r27, r26
    1e8a:	22 e0       	ldi	r18, 0x02	; 2
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	a2 0e       	add	r10, r18
    1e90:	b3 1e       	adc	r11, r19
    1e92:	01 2f       	mov	r16, r17
    1e94:	0f 76       	andi	r16, 0x6F	; 111
    1e96:	b7 ff       	sbrs	r27, 7
    1e98:	08 c0       	rjmp	.+16     	; 0x1eaa <vfprintf+0x23a>
    1e9a:	b0 95       	com	r27
    1e9c:	a0 95       	com	r26
    1e9e:	90 95       	com	r25
    1ea0:	81 95       	neg	r24
    1ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea4:	af 4f       	sbci	r26, 0xFF	; 255
    1ea6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ea8:	00 68       	ori	r16, 0x80	; 128
    1eaa:	bc 01       	movw	r22, r24
    1eac:	cd 01       	movw	r24, r26
    1eae:	a2 01       	movw	r20, r4
    1eb0:	2a e0       	ldi	r18, 0x0A	; 10
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	19 d1       	rcall	.+562    	; 0x20e8 <__ultoa_invert>
    1eb6:	d8 2e       	mov	r13, r24
    1eb8:	d4 18       	sub	r13, r4
    1eba:	3e c0       	rjmp	.+124    	; 0x1f38 <vfprintf+0x2c8>
    1ebc:	85 37       	cpi	r24, 0x75	; 117
    1ebe:	21 f4       	brne	.+8      	; 0x1ec8 <vfprintf+0x258>
    1ec0:	1f 7e       	andi	r17, 0xEF	; 239
    1ec2:	2a e0       	ldi	r18, 0x0A	; 10
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	20 c0       	rjmp	.+64     	; 0x1f08 <vfprintf+0x298>
    1ec8:	19 7f       	andi	r17, 0xF9	; 249
    1eca:	8f 36       	cpi	r24, 0x6F	; 111
    1ecc:	a9 f0       	breq	.+42     	; 0x1ef8 <vfprintf+0x288>
    1ece:	80 37       	cpi	r24, 0x70	; 112
    1ed0:	20 f4       	brcc	.+8      	; 0x1eda <vfprintf+0x26a>
    1ed2:	88 35       	cpi	r24, 0x58	; 88
    1ed4:	09 f0       	breq	.+2      	; 0x1ed8 <vfprintf+0x268>
    1ed6:	a7 c0       	rjmp	.+334    	; 0x2026 <vfprintf+0x3b6>
    1ed8:	0b c0       	rjmp	.+22     	; 0x1ef0 <vfprintf+0x280>
    1eda:	80 37       	cpi	r24, 0x70	; 112
    1edc:	21 f0       	breq	.+8      	; 0x1ee6 <vfprintf+0x276>
    1ede:	88 37       	cpi	r24, 0x78	; 120
    1ee0:	09 f0       	breq	.+2      	; 0x1ee4 <vfprintf+0x274>
    1ee2:	a1 c0       	rjmp	.+322    	; 0x2026 <vfprintf+0x3b6>
    1ee4:	01 c0       	rjmp	.+2      	; 0x1ee8 <vfprintf+0x278>
    1ee6:	10 61       	ori	r17, 0x10	; 16
    1ee8:	14 ff       	sbrs	r17, 4
    1eea:	09 c0       	rjmp	.+18     	; 0x1efe <vfprintf+0x28e>
    1eec:	14 60       	ori	r17, 0x04	; 4
    1eee:	07 c0       	rjmp	.+14     	; 0x1efe <vfprintf+0x28e>
    1ef0:	14 ff       	sbrs	r17, 4
    1ef2:	08 c0       	rjmp	.+16     	; 0x1f04 <vfprintf+0x294>
    1ef4:	16 60       	ori	r17, 0x06	; 6
    1ef6:	06 c0       	rjmp	.+12     	; 0x1f04 <vfprintf+0x294>
    1ef8:	28 e0       	ldi	r18, 0x08	; 8
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	05 c0       	rjmp	.+10     	; 0x1f08 <vfprintf+0x298>
    1efe:	20 e1       	ldi	r18, 0x10	; 16
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <vfprintf+0x298>
    1f04:	20 e1       	ldi	r18, 0x10	; 16
    1f06:	32 e0       	ldi	r19, 0x02	; 2
    1f08:	f5 01       	movw	r30, r10
    1f0a:	17 ff       	sbrs	r17, 7
    1f0c:	07 c0       	rjmp	.+14     	; 0x1f1c <vfprintf+0x2ac>
    1f0e:	60 81       	ld	r22, Z
    1f10:	71 81       	ldd	r23, Z+1	; 0x01
    1f12:	82 81       	ldd	r24, Z+2	; 0x02
    1f14:	93 81       	ldd	r25, Z+3	; 0x03
    1f16:	44 e0       	ldi	r20, 0x04	; 4
    1f18:	50 e0       	ldi	r21, 0x00	; 0
    1f1a:	06 c0       	rjmp	.+12     	; 0x1f28 <vfprintf+0x2b8>
    1f1c:	60 81       	ld	r22, Z
    1f1e:	71 81       	ldd	r23, Z+1	; 0x01
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	42 e0       	ldi	r20, 0x02	; 2
    1f26:	50 e0       	ldi	r21, 0x00	; 0
    1f28:	a4 0e       	add	r10, r20
    1f2a:	b5 1e       	adc	r11, r21
    1f2c:	a2 01       	movw	r20, r4
    1f2e:	dc d0       	rcall	.+440    	; 0x20e8 <__ultoa_invert>
    1f30:	d8 2e       	mov	r13, r24
    1f32:	d4 18       	sub	r13, r4
    1f34:	01 2f       	mov	r16, r17
    1f36:	0f 77       	andi	r16, 0x7F	; 127
    1f38:	06 ff       	sbrs	r16, 6
    1f3a:	09 c0       	rjmp	.+18     	; 0x1f4e <vfprintf+0x2de>
    1f3c:	0e 7f       	andi	r16, 0xFE	; 254
    1f3e:	df 14       	cp	r13, r15
    1f40:	30 f4       	brcc	.+12     	; 0x1f4e <vfprintf+0x2de>
    1f42:	04 ff       	sbrs	r16, 4
    1f44:	06 c0       	rjmp	.+12     	; 0x1f52 <vfprintf+0x2e2>
    1f46:	02 fd       	sbrc	r16, 2
    1f48:	04 c0       	rjmp	.+8      	; 0x1f52 <vfprintf+0x2e2>
    1f4a:	0f 7e       	andi	r16, 0xEF	; 239
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <vfprintf+0x2e2>
    1f4e:	1d 2d       	mov	r17, r13
    1f50:	01 c0       	rjmp	.+2      	; 0x1f54 <vfprintf+0x2e4>
    1f52:	1f 2d       	mov	r17, r15
    1f54:	80 2f       	mov	r24, r16
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	04 ff       	sbrs	r16, 4
    1f5a:	0c c0       	rjmp	.+24     	; 0x1f74 <vfprintf+0x304>
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	ed 0d       	add	r30, r13
    1f60:	f1 1d       	adc	r31, r1
    1f62:	20 81       	ld	r18, Z
    1f64:	20 33       	cpi	r18, 0x30	; 48
    1f66:	11 f4       	brne	.+4      	; 0x1f6c <vfprintf+0x2fc>
    1f68:	09 7e       	andi	r16, 0xE9	; 233
    1f6a:	09 c0       	rjmp	.+18     	; 0x1f7e <vfprintf+0x30e>
    1f6c:	02 ff       	sbrs	r16, 2
    1f6e:	06 c0       	rjmp	.+12     	; 0x1f7c <vfprintf+0x30c>
    1f70:	1e 5f       	subi	r17, 0xFE	; 254
    1f72:	05 c0       	rjmp	.+10     	; 0x1f7e <vfprintf+0x30e>
    1f74:	86 78       	andi	r24, 0x86	; 134
    1f76:	90 70       	andi	r25, 0x00	; 0
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	09 f0       	breq	.+2      	; 0x1f7e <vfprintf+0x30e>
    1f7c:	1f 5f       	subi	r17, 0xFF	; 255
    1f7e:	80 2e       	mov	r8, r16
    1f80:	99 24       	eor	r9, r9
    1f82:	03 fd       	sbrc	r16, 3
    1f84:	11 c0       	rjmp	.+34     	; 0x1fa8 <vfprintf+0x338>
    1f86:	00 ff       	sbrs	r16, 0
    1f88:	0c c0       	rjmp	.+24     	; 0x1fa2 <vfprintf+0x332>
    1f8a:	fd 2c       	mov	r15, r13
    1f8c:	1e 15       	cp	r17, r14
    1f8e:	48 f4       	brcc	.+18     	; 0x1fa2 <vfprintf+0x332>
    1f90:	fe 0c       	add	r15, r14
    1f92:	f1 1a       	sub	r15, r17
    1f94:	1e 2d       	mov	r17, r14
    1f96:	05 c0       	rjmp	.+10     	; 0x1fa2 <vfprintf+0x332>
    1f98:	80 e2       	ldi	r24, 0x20	; 32
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	b3 01       	movw	r22, r6
    1f9e:	78 d0       	rcall	.+240    	; 0x2090 <fputc>
    1fa0:	1f 5f       	subi	r17, 0xFF	; 255
    1fa2:	1e 15       	cp	r17, r14
    1fa4:	c8 f3       	brcs	.-14     	; 0x1f98 <vfprintf+0x328>
    1fa6:	04 c0       	rjmp	.+8      	; 0x1fb0 <vfprintf+0x340>
    1fa8:	1e 15       	cp	r17, r14
    1faa:	10 f4       	brcc	.+4      	; 0x1fb0 <vfprintf+0x340>
    1fac:	e1 1a       	sub	r14, r17
    1fae:	01 c0       	rjmp	.+2      	; 0x1fb2 <vfprintf+0x342>
    1fb0:	ee 24       	eor	r14, r14
    1fb2:	84 fe       	sbrs	r8, 4
    1fb4:	0e c0       	rjmp	.+28     	; 0x1fd2 <vfprintf+0x362>
    1fb6:	80 e3       	ldi	r24, 0x30	; 48
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	b3 01       	movw	r22, r6
    1fbc:	69 d0       	rcall	.+210    	; 0x2090 <fputc>
    1fbe:	82 fe       	sbrs	r8, 2
    1fc0:	1d c0       	rjmp	.+58     	; 0x1ffc <vfprintf+0x38c>
    1fc2:	81 fe       	sbrs	r8, 1
    1fc4:	03 c0       	rjmp	.+6      	; 0x1fcc <vfprintf+0x35c>
    1fc6:	88 e5       	ldi	r24, 0x58	; 88
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	10 c0       	rjmp	.+32     	; 0x1fec <vfprintf+0x37c>
    1fcc:	88 e7       	ldi	r24, 0x78	; 120
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	0d c0       	rjmp	.+26     	; 0x1fec <vfprintf+0x37c>
    1fd2:	c4 01       	movw	r24, r8
    1fd4:	86 78       	andi	r24, 0x86	; 134
    1fd6:	90 70       	andi	r25, 0x00	; 0
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	81 f0       	breq	.+32     	; 0x1ffc <vfprintf+0x38c>
    1fdc:	81 fc       	sbrc	r8, 1
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <vfprintf+0x374>
    1fe0:	80 e2       	ldi	r24, 0x20	; 32
    1fe2:	01 c0       	rjmp	.+2      	; 0x1fe6 <vfprintf+0x376>
    1fe4:	8b e2       	ldi	r24, 0x2B	; 43
    1fe6:	07 fd       	sbrc	r16, 7
    1fe8:	8d e2       	ldi	r24, 0x2D	; 45
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	b3 01       	movw	r22, r6
    1fee:	50 d0       	rcall	.+160    	; 0x2090 <fputc>
    1ff0:	05 c0       	rjmp	.+10     	; 0x1ffc <vfprintf+0x38c>
    1ff2:	80 e3       	ldi	r24, 0x30	; 48
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	b3 01       	movw	r22, r6
    1ff8:	4b d0       	rcall	.+150    	; 0x2090 <fputc>
    1ffa:	fa 94       	dec	r15
    1ffc:	df 14       	cp	r13, r15
    1ffe:	c8 f3       	brcs	.-14     	; 0x1ff2 <vfprintf+0x382>
    2000:	da 94       	dec	r13
    2002:	f2 01       	movw	r30, r4
    2004:	ed 0d       	add	r30, r13
    2006:	f1 1d       	adc	r31, r1
    2008:	80 81       	ld	r24, Z
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	b3 01       	movw	r22, r6
    200e:	40 d0       	rcall	.+128    	; 0x2090 <fputc>
    2010:	dd 20       	and	r13, r13
    2012:	b1 f7       	brne	.-20     	; 0x2000 <vfprintf+0x390>
    2014:	05 c0       	rjmp	.+10     	; 0x2020 <vfprintf+0x3b0>
    2016:	80 e2       	ldi	r24, 0x20	; 32
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	b3 01       	movw	r22, r6
    201c:	39 d0       	rcall	.+114    	; 0x2090 <fputc>
    201e:	ea 94       	dec	r14
    2020:	ee 20       	and	r14, r14
    2022:	c9 f7       	brne	.-14     	; 0x2016 <vfprintf+0x3a6>
    2024:	4d ce       	rjmp	.-870    	; 0x1cc0 <vfprintf+0x50>
    2026:	f3 01       	movw	r30, r6
    2028:	86 81       	ldd	r24, Z+6	; 0x06
    202a:	97 81       	ldd	r25, Z+7	; 0x07
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <vfprintf+0x3c2>
    202e:	8f ef       	ldi	r24, 0xFF	; 255
    2030:	9f ef       	ldi	r25, 0xFF	; 255
    2032:	2d 96       	adiw	r28, 0x0d	; 13
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61
    203e:	df 91       	pop	r29
    2040:	cf 91       	pop	r28
    2042:	1f 91       	pop	r17
    2044:	0f 91       	pop	r16
    2046:	ff 90       	pop	r15
    2048:	ef 90       	pop	r14
    204a:	df 90       	pop	r13
    204c:	cf 90       	pop	r12
    204e:	bf 90       	pop	r11
    2050:	af 90       	pop	r10
    2052:	9f 90       	pop	r9
    2054:	8f 90       	pop	r8
    2056:	7f 90       	pop	r7
    2058:	6f 90       	pop	r6
    205a:	5f 90       	pop	r5
    205c:	4f 90       	pop	r4
    205e:	3f 90       	pop	r3
    2060:	2f 90       	pop	r2
    2062:	08 95       	ret

00002064 <strnlen_P>:
    2064:	fc 01       	movw	r30, r24
    2066:	05 90       	lpm	r0, Z+
    2068:	61 50       	subi	r22, 0x01	; 1
    206a:	70 40       	sbci	r23, 0x00	; 0
    206c:	01 10       	cpse	r0, r1
    206e:	d8 f7       	brcc	.-10     	; 0x2066 <strnlen_P+0x2>
    2070:	80 95       	com	r24
    2072:	90 95       	com	r25
    2074:	8e 0f       	add	r24, r30
    2076:	9f 1f       	adc	r25, r31
    2078:	08 95       	ret

0000207a <strnlen>:
    207a:	fc 01       	movw	r30, r24
    207c:	61 50       	subi	r22, 0x01	; 1
    207e:	70 40       	sbci	r23, 0x00	; 0
    2080:	01 90       	ld	r0, Z+
    2082:	01 10       	cpse	r0, r1
    2084:	d8 f7       	brcc	.-10     	; 0x207c <strnlen+0x2>
    2086:	80 95       	com	r24
    2088:	90 95       	com	r25
    208a:	8e 0f       	add	r24, r30
    208c:	9f 1f       	adc	r25, r31
    208e:	08 95       	ret

00002090 <fputc>:
    2090:	0f 93       	push	r16
    2092:	1f 93       	push	r17
    2094:	cf 93       	push	r28
    2096:	df 93       	push	r29
    2098:	8c 01       	movw	r16, r24
    209a:	eb 01       	movw	r28, r22
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	81 ff       	sbrs	r24, 1
    20a0:	1b c0       	rjmp	.+54     	; 0x20d8 <fputc+0x48>
    20a2:	82 ff       	sbrs	r24, 2
    20a4:	0d c0       	rjmp	.+26     	; 0x20c0 <fputc+0x30>
    20a6:	2e 81       	ldd	r18, Y+6	; 0x06
    20a8:	3f 81       	ldd	r19, Y+7	; 0x07
    20aa:	8c 81       	ldd	r24, Y+4	; 0x04
    20ac:	9d 81       	ldd	r25, Y+5	; 0x05
    20ae:	28 17       	cp	r18, r24
    20b0:	39 07       	cpc	r19, r25
    20b2:	64 f4       	brge	.+24     	; 0x20cc <fputc+0x3c>
    20b4:	e8 81       	ld	r30, Y
    20b6:	f9 81       	ldd	r31, Y+1	; 0x01
    20b8:	01 93       	st	Z+, r16
    20ba:	f9 83       	std	Y+1, r31	; 0x01
    20bc:	e8 83       	st	Y, r30
    20be:	06 c0       	rjmp	.+12     	; 0x20cc <fputc+0x3c>
    20c0:	e8 85       	ldd	r30, Y+8	; 0x08
    20c2:	f9 85       	ldd	r31, Y+9	; 0x09
    20c4:	80 2f       	mov	r24, r16
    20c6:	09 95       	icall
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	31 f4       	brne	.+12     	; 0x20d8 <fputc+0x48>
    20cc:	8e 81       	ldd	r24, Y+6	; 0x06
    20ce:	9f 81       	ldd	r25, Y+7	; 0x07
    20d0:	01 96       	adiw	r24, 0x01	; 1
    20d2:	9f 83       	std	Y+7, r25	; 0x07
    20d4:	8e 83       	std	Y+6, r24	; 0x06
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <fputc+0x4c>
    20d8:	0f ef       	ldi	r16, 0xFF	; 255
    20da:	1f ef       	ldi	r17, 0xFF	; 255
    20dc:	c8 01       	movw	r24, r16
    20de:	df 91       	pop	r29
    20e0:	cf 91       	pop	r28
    20e2:	1f 91       	pop	r17
    20e4:	0f 91       	pop	r16
    20e6:	08 95       	ret

000020e8 <__ultoa_invert>:
    20e8:	fa 01       	movw	r30, r20
    20ea:	aa 27       	eor	r26, r26
    20ec:	28 30       	cpi	r18, 0x08	; 8
    20ee:	51 f1       	breq	.+84     	; 0x2144 <__stack+0x45>
    20f0:	20 31       	cpi	r18, 0x10	; 16
    20f2:	81 f1       	breq	.+96     	; 0x2154 <__stack+0x55>
    20f4:	e8 94       	clt
    20f6:	6f 93       	push	r22
    20f8:	6e 7f       	andi	r22, 0xFE	; 254
    20fa:	6e 5f       	subi	r22, 0xFE	; 254
    20fc:	7f 4f       	sbci	r23, 0xFF	; 255
    20fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2100:	9f 4f       	sbci	r25, 0xFF	; 255
    2102:	af 4f       	sbci	r26, 0xFF	; 255
    2104:	b1 e0       	ldi	r27, 0x01	; 1
    2106:	3e d0       	rcall	.+124    	; 0x2184 <__stack+0x85>
    2108:	b4 e0       	ldi	r27, 0x04	; 4
    210a:	3c d0       	rcall	.+120    	; 0x2184 <__stack+0x85>
    210c:	67 0f       	add	r22, r23
    210e:	78 1f       	adc	r23, r24
    2110:	89 1f       	adc	r24, r25
    2112:	9a 1f       	adc	r25, r26
    2114:	a1 1d       	adc	r26, r1
    2116:	68 0f       	add	r22, r24
    2118:	79 1f       	adc	r23, r25
    211a:	8a 1f       	adc	r24, r26
    211c:	91 1d       	adc	r25, r1
    211e:	a1 1d       	adc	r26, r1
    2120:	6a 0f       	add	r22, r26
    2122:	71 1d       	adc	r23, r1
    2124:	81 1d       	adc	r24, r1
    2126:	91 1d       	adc	r25, r1
    2128:	a1 1d       	adc	r26, r1
    212a:	20 d0       	rcall	.+64     	; 0x216c <__stack+0x6d>
    212c:	09 f4       	brne	.+2      	; 0x2130 <__stack+0x31>
    212e:	68 94       	set
    2130:	3f 91       	pop	r19
    2132:	2a e0       	ldi	r18, 0x0A	; 10
    2134:	26 9f       	mul	r18, r22
    2136:	11 24       	eor	r1, r1
    2138:	30 19       	sub	r19, r0
    213a:	30 5d       	subi	r19, 0xD0	; 208
    213c:	31 93       	st	Z+, r19
    213e:	de f6       	brtc	.-74     	; 0x20f6 <__ultoa_invert+0xe>
    2140:	cf 01       	movw	r24, r30
    2142:	08 95       	ret
    2144:	46 2f       	mov	r20, r22
    2146:	47 70       	andi	r20, 0x07	; 7
    2148:	40 5d       	subi	r20, 0xD0	; 208
    214a:	41 93       	st	Z+, r20
    214c:	b3 e0       	ldi	r27, 0x03	; 3
    214e:	0f d0       	rcall	.+30     	; 0x216e <__stack+0x6f>
    2150:	c9 f7       	brne	.-14     	; 0x2144 <__stack+0x45>
    2152:	f6 cf       	rjmp	.-20     	; 0x2140 <__stack+0x41>
    2154:	46 2f       	mov	r20, r22
    2156:	4f 70       	andi	r20, 0x0F	; 15
    2158:	40 5d       	subi	r20, 0xD0	; 208
    215a:	4a 33       	cpi	r20, 0x3A	; 58
    215c:	18 f0       	brcs	.+6      	; 0x2164 <__stack+0x65>
    215e:	49 5d       	subi	r20, 0xD9	; 217
    2160:	31 fd       	sbrc	r19, 1
    2162:	40 52       	subi	r20, 0x20	; 32
    2164:	41 93       	st	Z+, r20
    2166:	02 d0       	rcall	.+4      	; 0x216c <__stack+0x6d>
    2168:	a9 f7       	brne	.-22     	; 0x2154 <__stack+0x55>
    216a:	ea cf       	rjmp	.-44     	; 0x2140 <__stack+0x41>
    216c:	b4 e0       	ldi	r27, 0x04	; 4
    216e:	a6 95       	lsr	r26
    2170:	97 95       	ror	r25
    2172:	87 95       	ror	r24
    2174:	77 95       	ror	r23
    2176:	67 95       	ror	r22
    2178:	ba 95       	dec	r27
    217a:	c9 f7       	brne	.-14     	; 0x216e <__stack+0x6f>
    217c:	00 97       	sbiw	r24, 0x00	; 0
    217e:	61 05       	cpc	r22, r1
    2180:	71 05       	cpc	r23, r1
    2182:	08 95       	ret
    2184:	9b 01       	movw	r18, r22
    2186:	ac 01       	movw	r20, r24
    2188:	0a 2e       	mov	r0, r26
    218a:	06 94       	lsr	r0
    218c:	57 95       	ror	r21
    218e:	47 95       	ror	r20
    2190:	37 95       	ror	r19
    2192:	27 95       	ror	r18
    2194:	ba 95       	dec	r27
    2196:	c9 f7       	brne	.-14     	; 0x218a <__stack+0x8b>
    2198:	62 0f       	add	r22, r18
    219a:	73 1f       	adc	r23, r19
    219c:	84 1f       	adc	r24, r20
    219e:	95 1f       	adc	r25, r21
    21a0:	a0 1d       	adc	r26, r0
    21a2:	08 95       	ret

000021a4 <_exit>:
    21a4:	f8 94       	cli

000021a6 <__stop_program>:
    21a6:	ff cf       	rjmp	.-2      	; 0x21a6 <__stop_program>
