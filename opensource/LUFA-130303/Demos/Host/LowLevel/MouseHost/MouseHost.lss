
MouseHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000018d0  00001964  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800122  00800122  00001986  2**0
                  ALLOC
  3 .stab         00000e28  00000000  00000000  00001988  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000256  00000000  00000000  000027b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000428  00000000  00000000  00002a08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005865  00000000  00000000  00002e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c27  00000000  00000000  00008695  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002cdc  00000000  00000000  0000a2bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b08  00000000  00000000  0000cf98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002666  00000000  00000000  0000daa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e24  00000000  00000000  00010106  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000418  00000000  00000000  00013f2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c1       	rjmp	.+674    	; 0x2a4 <__ctors_end>
       2:	00 00       	nop
       4:	6e c1       	rjmp	.+732    	; 0x2e2 <__bad_interrupt>
       6:	00 00       	nop
       8:	6c c1       	rjmp	.+728    	; 0x2e2 <__bad_interrupt>
       a:	00 00       	nop
       c:	6a c1       	rjmp	.+724    	; 0x2e2 <__bad_interrupt>
       e:	00 00       	nop
      10:	68 c1       	rjmp	.+720    	; 0x2e2 <__bad_interrupt>
      12:	00 00       	nop
      14:	66 c1       	rjmp	.+716    	; 0x2e2 <__bad_interrupt>
      16:	00 00       	nop
      18:	64 c1       	rjmp	.+712    	; 0x2e2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	62 c1       	rjmp	.+708    	; 0x2e2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	60 c1       	rjmp	.+704    	; 0x2e2 <__bad_interrupt>
      22:	00 00       	nop
      24:	5e c1       	rjmp	.+700    	; 0x2e2 <__bad_interrupt>
      26:	00 00       	nop
      28:	a7 c6       	rjmp	.+3406   	; 0xd78 <__vector_10>
      2a:	00 00       	nop
      2c:	5a c1       	rjmp	.+692    	; 0x2e2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	58 c1       	rjmp	.+688    	; 0x2e2 <__bad_interrupt>
      32:	00 00       	nop
      34:	56 c1       	rjmp	.+684    	; 0x2e2 <__bad_interrupt>
      36:	00 00       	nop
      38:	54 c1       	rjmp	.+680    	; 0x2e2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	52 c1       	rjmp	.+676    	; 0x2e2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	50 c1       	rjmp	.+672    	; 0x2e2 <__bad_interrupt>
      42:	00 00       	nop
      44:	4e c1       	rjmp	.+668    	; 0x2e2 <__bad_interrupt>
      46:	00 00       	nop
      48:	4c c1       	rjmp	.+664    	; 0x2e2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4a c1       	rjmp	.+660    	; 0x2e2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	48 c1       	rjmp	.+656    	; 0x2e2 <__bad_interrupt>
      52:	00 00       	nop
      54:	46 c1       	rjmp	.+652    	; 0x2e2 <__bad_interrupt>
      56:	00 00       	nop
      58:	44 c1       	rjmp	.+648    	; 0x2e2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	42 c1       	rjmp	.+644    	; 0x2e2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	40 c1       	rjmp	.+640    	; 0x2e2 <__bad_interrupt>
      62:	00 00       	nop
      64:	3e c1       	rjmp	.+636    	; 0x2e2 <__bad_interrupt>
      66:	00 00       	nop
      68:	3c c1       	rjmp	.+632    	; 0x2e2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3a c1       	rjmp	.+628    	; 0x2e2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	38 c1       	rjmp	.+624    	; 0x2e2 <__bad_interrupt>
      72:	00 00       	nop
      74:	36 c1       	rjmp	.+620    	; 0x2e2 <__bad_interrupt>
      76:	00 00       	nop
      78:	34 c1       	rjmp	.+616    	; 0x2e2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	32 c1       	rjmp	.+612    	; 0x2e2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	30 c1       	rjmp	.+608    	; 0x2e2 <__bad_interrupt>
      82:	00 00       	nop
      84:	2e c1       	rjmp	.+604    	; 0x2e2 <__bad_interrupt>
      86:	00 00       	nop
      88:	2c c1       	rjmp	.+600    	; 0x2e2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2a c1       	rjmp	.+596    	; 0x2e2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	28 c1       	rjmp	.+592    	; 0x2e2 <__bad_interrupt>
      92:	00 00       	nop
      94:	26 c1       	rjmp	.+588    	; 0x2e2 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4275>:
      98:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 49 44 20 48     .[36mMouse HID H
      a8:	6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67     ost Demo running
      b8:	2e 0d 0a 1b 5b 33 37 6d 00                          ....[37m.

000000c1 <__c.4284>:
      c1:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
      d1:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

000000de <__c.4289>:
      de:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
      ee:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

000000fd <__c.4294>:
      fd:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     10d:	61 74 61 2e 0d 0a 00                                ata....

00000114 <__c.4297>:
     114:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     124:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     134:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

0000013e <__c.4299>:
     13e:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     14e:	69 63 65 2e 0d 0a 00                                ice....

00000155 <__c.4301>:
     155:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     165:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000016f <__c.4303>:
     16f:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     17f:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     18f:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     19f:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1af:	37 6d 00                                            7m.

000001b2 <__c.4306>:
     1b2:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1c2:	6f 72 20 28 53 65 74 20 50 72 6f 74 6f 63 6f 6c     or (Set Protocol
     1d2:	29 2e 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43 6f     )... -- Error Co
     1e2:	64 65 3a 20 25 64 0d 0a 1b 5b 33 37 6d 00           de: %d...[37m.

000001f0 <__c.4308>:
     1f0:	4d 6f 75 73 65 20 45 6e 75 6d 65 72 61 74 65 64     Mouse Enumerated
     200:	2e 0d 0a 00                                         ....

00000204 <__c.4313>:
     204:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     214:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     224:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000233 <__c.4320>:
     233:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     243:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     253:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     263:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     273:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     283:	1b 5b 33 37 6d 00                                   .[37m.

00000289 <__c.4327>:
     289:	64 58 3a 25 32 64 20 64 59 3a 25 32 64 20 42 75     dX:%2d dY:%2d Bu
     299:	74 74 6f 6e 3a 25 64 0d 0a 00 00                    tton:%d....

000002a4 <__ctors_end>:
     2a4:	11 24       	eor	r1, r1
     2a6:	1f be       	out	0x3f, r1	; 63
     2a8:	cf ef       	ldi	r28, 0xFF	; 255
     2aa:	d0 e2       	ldi	r29, 0x20	; 32
     2ac:	de bf       	out	0x3e, r29	; 62
     2ae:	cd bf       	out	0x3d, r28	; 61

000002b0 <__do_copy_data>:
     2b0:	11 e0       	ldi	r17, 0x01	; 1
     2b2:	a0 e0       	ldi	r26, 0x00	; 0
     2b4:	b1 e0       	ldi	r27, 0x01	; 1
     2b6:	e0 ed       	ldi	r30, 0xD0	; 208
     2b8:	f8 e1       	ldi	r31, 0x18	; 24
     2ba:	00 e0       	ldi	r16, 0x00	; 0
     2bc:	0b bf       	out	0x3b, r16	; 59
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <__do_copy_data+0x14>
     2c0:	07 90       	elpm	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	a2 32       	cpi	r26, 0x22	; 34
     2c6:	b1 07       	cpc	r27, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <__do_copy_data+0x10>
     2ca:	1b be       	out	0x3b, r1	; 59

000002cc <__do_clear_bss>:
     2cc:	11 e0       	ldi	r17, 0x01	; 1
     2ce:	a2 e2       	ldi	r26, 0x22	; 34
     2d0:	b1 e0       	ldi	r27, 0x01	; 1
     2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <.do_clear_bss_start>

000002d4 <.do_clear_bss_loop>:
     2d4:	1d 92       	st	X+, r1

000002d6 <.do_clear_bss_start>:
     2d6:	a4 34       	cpi	r26, 0x44	; 68
     2d8:	b1 07       	cpc	r27, r17
     2da:	e1 f7       	brne	.-8      	; 0x2d4 <.do_clear_bss_loop>
     2dc:	63 d1       	rcall	.+710    	; 0x5a4 <main>
     2de:	0c 94 66 0c 	jmp	0x18cc	; 0x18cc <_exit>

000002e2 <__bad_interrupt>:
     2e2:	8e ce       	rjmp	.-740    	; 0x0 <__vectors>

000002e4 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2e4:	9b b1       	in	r25, 0x0b	; 11
     2e6:	9f 70       	andi	r25, 0x0F	; 15
     2e8:	98 2b       	or	r25, r24
     2ea:	9b b9       	out	0x0b, r25	; 11
			}
     2ec:	08 95       	ret

000002ee <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2ee:	84 b7       	in	r24, 0x34	; 52
     2f0:	87 7f       	andi	r24, 0xF7	; 247
     2f2:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2f4:	28 e1       	ldi	r18, 0x18	; 24
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	20 93 60 00 	sts	0x0060, r18
     2fe:	10 92 60 00 	sts	0x0060, r1
     302:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	80 e8       	ldi	r24, 0x80	; 128
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	f8 94       	cli
     30c:	80 93 61 00 	sts	0x0061, r24
     310:	90 93 61 00 	sts	0x0061, r25
     314:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     316:	83 e3       	ldi	r24, 0x33	; 51
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	90 93 cd 00 	sts	0x00CD, r25
     31e:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     322:	86 e0       	ldi	r24, 0x06	; 6
     324:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     328:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     32c:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     330:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     332:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     334:	8a b1       	in	r24, 0x0a	; 10
     336:	80 6f       	ori	r24, 0xF0	; 240
     338:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     33a:	8b b1       	in	r24, 0x0b	; 11
     33c:	8f 70       	andi	r24, 0x0F	; 15
     33e:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     340:	00 d5       	rcall	.+2560   	; 0xd42 <USB_Init>
     342:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	bd c7       	rjmp	.+3962   	; 0x12c2 <Serial_CreateStream>

00000348 <EVENT_USB_Host_DeviceAttached>:
     348:	81 ec       	ldi	r24, 0xC1	; 193
     34a:	90 e0       	ldi	r25, 0x00	; 0
}
     34c:	f6 d7       	rcall	.+4076   	; 0x133a <puts_P>
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     34e:	80 ea       	ldi	r24, 0xA0	; 160
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     350:	c9 cf       	rjmp	.-110    	; 0x2e4 <LEDs_SetAllLEDs>

00000352 <EVENT_USB_Host_DeviceUnattached>:
     352:	8e ed       	ldi	r24, 0xDE	; 222
     354:	90 e0       	ldi	r25, 0x00	; 0
}
     356:	f1 d7       	rcall	.+4066   	; 0x133a <puts_P>
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     358:	80 e1       	ldi	r24, 0x10	; 16
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     35a:	c4 cf       	rjmp	.-120    	; 0x2e4 <LEDs_SetAllLEDs>

0000035c <EVENT_USB_Host_DeviceEnumerationComplete>:
     35c:	cf 93       	push	r28
     35e:	8d ef       	ldi	r24, 0xFD	; 253
}
     360:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	puts_P(PSTR("Getting Config Data.\r\n"));
     362:	eb d7       	rcall	.+4054   	; 0x133a <puts_P>
     364:	43 d1       	rcall	.+646    	; 0x5ec <ProcessConfigurationDescriptor>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     366:	c8 2f       	mov	r28, r24
     368:	88 23       	and	r24, r24
     36a:	f1 f0       	breq	.+60     	; 0x3a8 <EVENT_USB_Host_DeviceEnumerationComplete+0x4c>
     36c:	81 30       	cpi	r24, 0x01	; 1
     36e:	19 f4       	brne	.+6      	; 0x376 <EVENT_USB_Host_DeviceEnumerationComplete+0x1a>
	{
		if (ErrorCode == ControlError)
     370:	84 e1       	ldi	r24, 0x14	; 20
     372:	91 e0       	ldi	r25, 0x01	; 1
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     374:	02 c0       	rjmp	.+4      	; 0x37a <EVENT_USB_Host_DeviceEnumerationComplete+0x1e>
     376:	8e e3       	ldi	r24, 0x3E	; 62
     378:	91 e0       	ldi	r25, 0x01	; 1
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     37a:	df d7       	rcall	.+4030   	; 0x133a <puts_P>
     37c:	00 d0       	rcall	.+0      	; 0x37e <EVENT_USB_Host_DeviceEnumerationComplete+0x22>
     37e:	00 d0       	rcall	.+0      	; 0x380 <EVENT_USB_Host_DeviceEnumerationComplete+0x24>
     380:	ed b7       	in	r30, 0x3d	; 61

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     382:	fe b7       	in	r31, 0x3e	; 62
     384:	31 96       	adiw	r30, 0x01	; 1
     386:	25 e5       	ldi	r18, 0x55	; 85
     388:	31 e0       	ldi	r19, 0x01	; 1
     38a:	ad b7       	in	r26, 0x3d	; 61
     38c:	be b7       	in	r27, 0x3e	; 62
     38e:	12 96       	adiw	r26, 0x02	; 2
     390:	3c 93       	st	X, r19
     392:	2e 93       	st	-X, r18
     394:	11 97       	sbiw	r26, 0x01	; 1
     396:	c2 83       	std	Z+2, r28	; 0x02
     398:	13 82       	std	Z+3, r1	; 0x03
     39a:	b0 d7       	rcall	.+3936   	; 0x12fc <printf_P>
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     3a4:	80 e9       	ldi	r24, 0x90	; 144
     3a6:	40 c0       	rjmp	.+128    	; 0x428 <EVENT_USB_Host_DeviceEnumerationComplete+0xcc>
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	3e d7       	rcall	.+3708   	; 0x1228 <USB_Host_SetDeviceConfiguration>
     3ac:	88 23       	and	r24, r24
     3ae:	79 f0       	breq	.+30     	; 0x3ce <EVENT_USB_Host_DeviceEnumerationComplete+0x72>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     3b0:	00 d0       	rcall	.+0      	; 0x3b2 <EVENT_USB_Host_DeviceEnumerationComplete+0x56>
     3b2:	00 d0       	rcall	.+0      	; 0x3b4 <EVENT_USB_Host_DeviceEnumerationComplete+0x58>
     3b4:	ed b7       	in	r30, 0x3d	; 61
     3b6:	fe b7       	in	r31, 0x3e	; 62
     3b8:	31 96       	adiw	r30, 0x01	; 1
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     3ba:	2f e6       	ldi	r18, 0x6F	; 111
     3bc:	31 e0       	ldi	r19, 0x01	; 1
     3be:	ad b7       	in	r26, 0x3d	; 61
     3c0:	be b7       	in	r27, 0x3e	; 62
     3c2:	12 96       	adiw	r26, 0x02	; 2
     3c4:	3c 93       	st	X, r19
     3c6:	2e 93       	st	-X, r18
     3c8:	11 97       	sbiw	r26, 0x01	; 1
     3ca:	82 83       	std	Z+2, r24	; 0x02
     3cc:	e5 cf       	rjmp	.-54     	; 0x398 <EVENT_USB_Host_DeviceEnumerationComplete+0x3c>
     3ce:	a7 e2       	ldi	r26, 0x27	; 39
     3d0:	b1 e0       	ldi	r27, 0x01	; 1
     3d2:	e0 e0       	ldi	r30, 0x00	; 0
     3d4:	f1 e0       	ldi	r31, 0x01	; 1
     3d6:	88 e0       	ldi	r24, 0x08	; 8
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* HID class request to set the mouse protocol to the Boot Protocol */
	USB_ControlRequest = (USB_Request_Header_t)
     3d8:	01 90       	ld	r0, Z+
     3da:	0d 92       	st	X+, r0
     3dc:	81 50       	subi	r24, 0x01	; 1
     3de:	e1 f7       	brne	.-8      	; 0x3d8 <EVENT_USB_Host_DeviceEnumerationComplete+0x7c>
     3e0:	10 92 a7 00 	sts	0x00A7, r1
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	21 d6       	rcall	.+3138   	; 0x102c <USB_Host_SendControlRequest>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     3ea:	88 23       	and	r24, r24
     3ec:	c9 f0       	breq	.+50     	; 0x420 <EVENT_USB_Host_DeviceEnumerationComplete+0xc4>

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send the request, display error and wait for device detach if request fails */
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     3ee:	00 d0       	rcall	.+0      	; 0x3f0 <EVENT_USB_Host_DeviceEnumerationComplete+0x94>
     3f0:	00 d0       	rcall	.+0      	; 0x3f2 <EVENT_USB_Host_DeviceEnumerationComplete+0x96>
     3f2:	ed b7       	in	r30, 0x3d	; 61
     3f4:	fe b7       	in	r31, 0x3e	; 62
     3f6:	31 96       	adiw	r30, 0x01	; 1
     3f8:	22 eb       	ldi	r18, 0xB2	; 178
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Protocol).\r\n"
     3fa:	31 e0       	ldi	r19, 0x01	; 1
     3fc:	ad b7       	in	r26, 0x3d	; 61
     3fe:	be b7       	in	r27, 0x3e	; 62
     400:	12 96       	adiw	r26, 0x02	; 2
     402:	3c 93       	st	X, r19
     404:	2e 93       	st	-X, r18
     406:	11 97       	sbiw	r26, 0x01	; 1
     408:	82 83       	std	Z+2, r24	; 0x02
     40a:	13 82       	std	Z+3, r1	; 0x03
     40c:	77 d7       	rcall	.+3822   	; 0x12fc <printf_P>
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	80 e9       	ldi	r24, 0x90	; 144
     418:	65 df       	rcall	.-310    	; 0x2e4 <LEDs_SetAllLEDs>
     41a:	80 e0       	ldi	r24, 0x00	; 0
								 " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     41c:	05 d7       	rcall	.+3594   	; 0x1228 <USB_Host_SetDeviceConfiguration>
     41e:	05 c0       	rjmp	.+10     	; 0x42a <EVENT_USB_Host_DeviceEnumerationComplete+0xce>
     420:	80 ef       	ldi	r24, 0xF0	; 240
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	8a d7       	rcall	.+3860   	; 0x133a <puts_P>
     426:	80 e6       	ldi	r24, 0x60	; 96
     428:	5d df       	rcall	.-326    	; 0x2e4 <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <EVENT_USB_Host_HostError>:
     42e:	cf 93       	push	r28
		return;
     430:	df 93       	push	r29
	}

	puts_P(PSTR("Mouse Enumerated.\r\n"));
     432:	0f 92       	push	r0
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
     438:	89 83       	std	Y+1, r24	; 0x01
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     43a:	1b d4       	rcall	.+2102   	; 0xc72 <USB_Disable>
     43c:	00 d0       	rcall	.+0      	; 0x43e <EVENT_USB_Host_HostError+0x10>
     43e:	00 d0       	rcall	.+0      	; 0x440 <EVENT_USB_Host_HostError+0x12>
}
     440:	ed b7       	in	r30, 0x3d	; 61
     442:	fe b7       	in	r31, 0x3e	; 62
/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     444:	31 96       	adiw	r30, 0x01	; 1
     446:	24 e0       	ldi	r18, 0x04	; 4
     448:	32 e0       	ldi	r19, 0x02	; 2
     44a:	ad b7       	in	r26, 0x3d	; 61
     44c:	be b7       	in	r27, 0x3e	; 62
     44e:	12 96       	adiw	r26, 0x02	; 2
     450:	3c 93       	st	X, r19
     452:	2e 93       	st	-X, r18
     454:	11 97       	sbiw	r26, 0x01	; 1
     456:	89 81       	ldd	r24, Y+1	; 0x01
     458:	82 83       	std	Z+2, r24	; 0x02
     45a:	13 82       	std	Z+3, r1	; 0x03
     45c:	4f d7       	rcall	.+3742   	; 0x12fc <printf_P>
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	80 e9       	ldi	r24, 0x90	; 144
     468:	3d df       	rcall	.-390    	; 0x2e4 <LEDs_SetAllLEDs>
     46a:	ff cf       	rjmp	.-2      	; 0x46a <EVENT_USB_Host_HostError+0x3c>

0000046c <EVENT_USB_Host_DeviceEnumerationFailed>:
     46c:	90 91 2f 01 	lds	r25, 0x012F
     470:	2d b7       	in	r18, 0x3d	; 61
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     472:	3e b7       	in	r19, 0x3e	; 62
     474:	28 50       	subi	r18, 0x08	; 8
     476:	30 40       	sbci	r19, 0x00	; 0
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	f8 94       	cli
     47c:	3e bf       	out	0x3e, r19	; 62
     47e:	0f be       	out	0x3f, r0	; 63
     480:	2d bf       	out	0x3d, r18	; 61
     482:	ed b7       	in	r30, 0x3d	; 61
     484:	fe b7       	in	r31, 0x3e	; 62
     486:	31 96       	adiw	r30, 0x01	; 1
     488:	23 e3       	ldi	r18, 0x33	; 51
     48a:	32 e0       	ldi	r19, 0x02	; 2
     48c:	ad b7       	in	r26, 0x3d	; 61
     48e:	be b7       	in	r27, 0x3e	; 62
     490:	12 96       	adiw	r26, 0x02	; 2
     492:	3c 93       	st	X, r19
     494:	2e 93       	st	-X, r18
     496:	11 97       	sbiw	r26, 0x01	; 1
     498:	82 83       	std	Z+2, r24	; 0x02
     49a:	13 82       	std	Z+3, r1	; 0x03
     49c:	64 83       	std	Z+4, r22	; 0x04
     49e:	15 82       	std	Z+5, r1	; 0x05
     4a0:	96 83       	std	Z+6, r25	; 0x06
     4a2:	17 82       	std	Z+7, r1	; 0x07
     4a4:	2b d7       	rcall	.+3670   	; 0x12fc <printf_P>
     4a6:	2d b7       	in	r18, 0x3d	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4a8:	3e b7       	in	r19, 0x3e	; 62
     4aa:	28 5f       	subi	r18, 0xF8	; 248
     4ac:	3f 4f       	sbci	r19, 0xFF	; 255
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	3e bf       	out	0x3e, r19	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	2d bf       	out	0x3d, r18	; 61
     4b8:	80 e9       	ldi	r24, 0x90	; 144
     4ba:	14 cf       	rjmp	.-472    	; 0x2e4 <LEDs_SetAllLEDs>

000004bc <MouseHost_Task>:
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
}
     4c0:	00 d0       	rcall	.+0      	; 0x4c2 <MouseHost_Task+0x6>

/** Reads in and processes the next report from the attached device, displaying the report
 *  contents on the board LEDs and via the serial port.
 */
void MouseHost_Task(void)
{
     4c2:	0f 92       	push	r0
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     4c8:	80 91 2f 01 	lds	r24, 0x012F
     4cc:	8b 30       	cpi	r24, 0x0B	; 11
     4ce:	09 f0       	breq	.+2      	; 0x4d2 <MouseHost_Task+0x16>
     4d0:	63 c0       	rjmp	.+198    	; 0x598 <MouseHost_Task+0xdc>
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     4d8:	80 91 a9 00 	lds	r24, 0x00A9
     4dc:	8f 7b       	andi	r24, 0xBF	; 191
     4de:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     4e2:	80 91 a6 00 	lds	r24, 0x00A6

	/* Unfreeze mouse data pipe */
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (!(Pipe_IsINReceived()))
     4e6:	80 fd       	sbrc	r24, 0
     4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <MouseHost_Task+0x34>
	{
		/* No packet received (no movement), turn off LEDs */
		LEDs_SetAllLEDs(LEDS_NO_LEDS);
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	fb de       	rcall	.-522    	; 0x2e4 <LEDs_SetAllLEDs>
     4ee:	4f c0       	rjmp	.+158    	; 0x58e <MouseHost_Task+0xd2>
     4f0:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     4f4:	85 ff       	sbrs	r24, 5

		return;
	}

	/* Ensure pipe contains data before trying to read from it */
	if (Pipe_IsReadWriteAllowed())
     4f6:	46 c0       	rjmp	.+140    	; 0x584 <MouseHost_Task+0xc8>
     4f8:	ce 01       	movw	r24, r28
	{
		/* Read in mouse report data */
		Pipe_Read_Stream_LE(&MouseReport, sizeof(MouseReport), NULL);
     4fa:	01 96       	adiw	r24, 0x01	; 1
     4fc:	63 e0       	ldi	r22, 0x03	; 3
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	40 e0       	ldi	r20, 0x00	; 0
     502:	50 e0       	ldi	r21, 0x00	; 0
     504:	b8 d2       	rcall	.+1392   	; 0xa76 <Pipe_Read_Stream_LE>
     506:	8a 81       	ldd	r24, Y+2	; 0x02
     508:	18 16       	cp	r1, r24

		/* Alter status LEDs according to mouse X movement */
		if (MouseReport.X > 0)
     50a:	1c f0       	brlt	.+6      	; 0x512 <MouseHost_Task+0x56>
     50c:	88 23       	and	r24, r24
     50e:	21 f0       	breq	.+8      	; 0x518 <MouseHost_Task+0x5c>
		  LEDMask |= LEDS_LED1;
		else if (MouseReport.X < 0)
     510:	02 c0       	rjmp	.+4      	; 0x516 <MouseHost_Task+0x5a>
     512:	80 e1       	ldi	r24, 0x10	; 16
     514:	01 c0       	rjmp	.+2      	; 0x518 <MouseHost_Task+0x5c>
		/* Read in mouse report data */
		Pipe_Read_Stream_LE(&MouseReport, sizeof(MouseReport), NULL);

		/* Alter status LEDs according to mouse X movement */
		if (MouseReport.X > 0)
		  LEDMask |= LEDS_LED1;
     516:	80 e2       	ldi	r24, 0x20	; 32
     518:	9b 81       	ldd	r25, Y+3	; 0x03
		else if (MouseReport.X < 0)
		  LEDMask |= LEDS_LED2;
     51a:	19 16       	cp	r1, r25

		/* Alter status LEDs according to mouse Y movement */
		if (MouseReport.Y > 0)
     51c:	14 f4       	brge	.+4      	; 0x522 <MouseHost_Task+0x66>
     51e:	80 68       	ori	r24, 0x80	; 128
     520:	02 c0       	rjmp	.+4      	; 0x526 <MouseHost_Task+0x6a>
		  LEDMask |= LEDS_LED3;
     522:	91 11       	cpse	r25, r1
     524:	80 64       	ori	r24, 0x40	; 64
		else if (MouseReport.Y < 0)
     526:	99 81       	ldd	r25, Y+1	; 0x01
		  LEDMask |= LEDS_LED4;
     528:	91 11       	cpse	r25, r1

		/* Alter status LEDs according to mouse button position */
		if (MouseReport.Button)
     52a:	80 ef       	ldi	r24, 0xF0	; 240
     52c:	db de       	rcall	.-586    	; 0x2e4 <LEDs_SetAllLEDs>
		  LEDMask  = LEDS_ALL_LEDS;
     52e:	8d b7       	in	r24, 0x3d	; 61

		LEDs_SetAllLEDs(LEDMask);
     530:	9e b7       	in	r25, 0x3e	; 62
     532:	08 97       	sbiw	r24, 0x08	; 8

		/* Print mouse report data through the serial port */
		printf_P(PSTR("dX:%2d dY:%2d Button:%d\r\n"), MouseReport.X,
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	f8 94       	cli
     538:	9e bf       	out	0x3e, r25	; 62
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	8d bf       	out	0x3d, r24	; 61
     53e:	ed b7       	in	r30, 0x3d	; 61
     540:	fe b7       	in	r31, 0x3e	; 62
     542:	31 96       	adiw	r30, 0x01	; 1
     544:	89 e8       	ldi	r24, 0x89	; 137
     546:	92 e0       	ldi	r25, 0x02	; 2
     548:	ad b7       	in	r26, 0x3d	; 61
     54a:	be b7       	in	r27, 0x3e	; 62
     54c:	12 96       	adiw	r26, 0x02	; 2
     54e:	9c 93       	st	X, r25
     550:	8e 93       	st	-X, r24
     552:	11 97       	sbiw	r26, 0x01	; 1
     554:	8a 81       	ldd	r24, Y+2	; 0x02
     556:	99 27       	eor	r25, r25
     558:	87 fd       	sbrc	r24, 7
     55a:	90 95       	com	r25
     55c:	93 83       	std	Z+3, r25	; 0x03
     55e:	82 83       	std	Z+2, r24	; 0x02
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	99 27       	eor	r25, r25
     564:	87 fd       	sbrc	r24, 7
     566:	90 95       	com	r25
     568:	95 83       	std	Z+5, r25	; 0x05
     56a:	84 83       	std	Z+4, r24	; 0x04
     56c:	89 81       	ldd	r24, Y+1	; 0x01
     56e:	86 83       	std	Z+6, r24	; 0x06
     570:	17 82       	std	Z+7, r1	; 0x07
     572:	c4 d6       	rcall	.+3464   	; 0x12fc <printf_P>
     574:	8d b7       	in	r24, 0x3d	; 61
     576:	9e b7       	in	r25, 0x3e	; 62
     578:	08 96       	adiw	r24, 0x08	; 8
     57a:	0f b6       	in	r0, 0x3f	; 63
     57c:	f8 94       	cli
     57e:	9e bf       	out	0x3e, r25	; 62
     580:	0f be       	out	0x3f, r0	; 63
     582:	8d bf       	out	0x3d, r24	; 61
     584:	80 91 a6 00 	lds	r24, 0x00A6
     588:	8e 77       	andi	r24, 0x7E	; 126
     58a:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     58e:	80 91 a9 00 	lds	r24, 0x00A9
     592:	80 64       	ori	r24, 0x40	; 64
     594:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	df 91       	pop	r29
	/* Clear the IN endpoint, ready for next data packet */
	Pipe_ClearIN();

	/* Refreeze mouse data pipe */
	Pipe_Freeze();
}
     5a0:	cf 91       	pop	r28
     5a2:	08 95       	ret

000005a4 <main>:
     5a4:	a4 de       	rcall	.-696    	; 0x2ee <SetupHardware>
     5a6:	88 e9       	ldi	r24, 0x98	; 152
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	c7 d6       	rcall	.+3470   	; 0x133a <puts_P>
 */
int main(void)
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "Mouse HID Host Demo running.\r\n" ESC_FG_WHITE));
     5ac:	80 e1       	ldi	r24, 0x10	; 16
     5ae:	9a de       	rcall	.-716    	; 0x2e4 <LEDs_SetAllLEDs>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     5b0:	78 94       	sei
     5b2:	84 df       	rcall	.-248    	; 0x4bc <MouseHost_Task>
     5b4:	5e d6       	rcall	.+3260   	; 0x1272 <USB_USBTask>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     5b6:	fd cf       	rjmp	.-6      	; 0x5b2 <main+0xe>

000005b8 <DComp_NextMouseInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Mouse HID Class and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMouseInterface(void* CurrentDescriptor)
{
     5b8:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	/* Determine if the current descriptor is an interface descriptor */
	if (Header->Type == DTYPE_Interface)
     5ba:	81 81       	ldd	r24, Z+1	; 0x01
     5bc:	84 30       	cpi	r24, 0x04	; 4
     5be:	31 f4       	brne	.+12     	; 0x5cc <DComp_NextMouseInterface+0x14>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class and protocol, break out if correct class/protocol interface found */
		if ((Interface->Class    == HID_CSCP_HIDClass) &&
     5c0:	85 81       	ldd	r24, Z+5	; 0x05
     5c2:	83 30       	cpi	r24, 0x03	; 3
     5c4:	19 f4       	brne	.+6      	; 0x5cc <DComp_NextMouseInterface+0x14>
     5c6:	87 81       	ldd	r24, Z+7	; 0x07
     5c8:	82 30       	cpi	r24, 0x02	; 2
     5ca:	11 f0       	breq	.+4      	; 0x5d0 <DComp_NextMouseInterface+0x18>
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	/* Current descriptor does not match what this comparator is looking for */
	return DESCRIPTOR_SEARCH_NotFound;
     5cc:	82 e0       	ldi	r24, 0x02	; 2
     5ce:	08 95       	ret
		/* Check the HID descriptor class and protocol, break out if correct class/protocol interface found */
		if ((Interface->Class    == HID_CSCP_HIDClass) &&
		    (Interface->Protocol == HID_CSCP_MouseBootProtocol))
		{
			/* Indicate that the descriptor being searched for has been found */
			return DESCRIPTOR_SEARCH_Found;
     5d0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	/* Current descriptor does not match what this comparator is looking for */
	return DESCRIPTOR_SEARCH_NotFound;
}
     5d2:	08 95       	ret

000005d4 <DComp_NextMouseInterfaceDataEndpoint>:
uint8_t DComp_NextMouseInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	/* Determine the type of the current descriptor */
	if (Header->Type == DTYPE_Endpoint)
     5d4:	fc 01       	movw	r30, r24
     5d6:	81 81       	ldd	r24, Z+1	; 0x01
     5d8:	85 30       	cpi	r24, 0x05	; 5
     5da:	21 f0       	breq	.+8      	; 0x5e4 <DComp_NextMouseInterfaceDataEndpoint+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
     5dc:	84 30       	cpi	r24, 0x04	; 4
     5de:	21 f4       	brne	.+8      	; 0x5e8 <DComp_NextMouseInterfaceDataEndpoint+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	08 95       	ret
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	/* Determine the type of the current descriptor */
	if (Header->Type == DTYPE_Endpoint)
	  return DESCRIPTOR_SEARCH_Found;
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
     5e8:	82 e0       	ldi	r24, 0x02	; 2
}
     5ea:	08 95       	ret

000005ec <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint.
 *
 *  \return An error code from the \ref MouseHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     5ec:	cf 92       	push	r12
     5ee:	df 92       	push	r13
     5f0:	ef 92       	push	r14
     5f2:	ff 92       	push	r15
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	cd b7       	in	r28, 0x3d	; 61
     5fe:	de b7       	in	r29, 0x3e	; 62
     600:	c4 50       	subi	r28, 0x04	; 4
     602:	d2 40       	sbci	r29, 0x02	; 2
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	f8 94       	cli
     608:	de bf       	out	0x3e, r29	; 62
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     60e:	ae 01       	movw	r20, r28
     610:	4b 5f       	subi	r20, 0xFB	; 251
     612:	5f 4f       	sbci	r21, 0xFF	; 255
     614:	5c 83       	std	Y+4, r21	; 0x04
     616:	4b 83       	std	Y+3, r20	; 0x03

	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	7e 01       	movw	r14, r28
     61c:	08 94       	sec
     61e:	e1 1c       	adc	r14, r1
     620:	f1 1c       	adc	r15, r1
     622:	b7 01       	movw	r22, r14
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	32 e0       	ldi	r19, 0x02	; 2
     628:	3a d4       	rcall	.+2164   	; 0xe9e <USB_Host_GetDeviceConfigDescriptor>
     62a:	85 30       	cpi	r24, 0x05	; 5
     62c:	09 f4       	brne	.+2      	; 0x630 <ProcessConfigurationDescriptor+0x44>
     62e:	3c c0       	rjmp	.+120    	; 0x6a8 <ProcessConfigurationDescriptor+0xbc>
     630:	86 30       	cpi	r24, 0x06	; 6
     632:	19 f0       	breq	.+6      	; 0x63a <ProcessConfigurationDescriptor+0x4e>
     634:	88 23       	and	r24, r24
     636:	29 f0       	breq	.+10     	; 0x642 <ProcessConfigurationDescriptor+0x56>
     638:	02 c0       	rjmp	.+4      	; 0x63e <ProcessConfigurationDescriptor+0x52>
     63a:	83 e0       	ldi	r24, 0x03	; 3
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     63c:	38 c0       	rjmp	.+112    	; 0x6ae <ProcessConfigurationDescriptor+0xc2>
     63e:	81 e0       	ldi	r24, 0x01	; 1
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     640:	36 c0       	rjmp	.+108    	; 0x6ae <ProcessConfigurationDescriptor+0xc2>
     642:	cc 24       	eor	r12, r12

	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     644:	dd 24       	eor	r13, r13
     646:	1e 2d       	mov	r17, r14

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     648:	0f 2d       	mov	r16, r15
     64a:	c1 14       	cp	r12, r1
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     64c:	d1 04       	cpc	r13, r1
     64e:	51 f0       	breq	.+20     	; 0x664 <ProcessConfigurationDescriptor+0x78>
     650:	81 2f       	mov	r24, r17
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     652:	90 2f       	mov	r25, r16
     654:	be 01       	movw	r22, r28
     656:	6d 5f       	subi	r22, 0xFD	; 253
     658:	7f 4f       	sbci	r23, 0xFF	; 255
     65a:	4a ee       	ldi	r20, 0xEA	; 234
     65c:	52 e0       	ldi	r21, 0x02	; 2
     65e:	76 d4       	rcall	.+2284   	; 0xf4c <USB_GetNextDescriptorComp>
     660:	88 23       	and	r24, r24
     662:	69 f0       	breq	.+26     	; 0x67e <ProcessConfigurationDescriptor+0x92>
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     664:	81 2f       	mov	r24, r17
     666:	90 2f       	mov	r25, r16
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextMouseInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     668:	be 01       	movw	r22, r28
     66a:	6d 5f       	subi	r22, 0xFD	; 253
     66c:	7f 4f       	sbci	r23, 0xFF	; 255
     66e:	4c ed       	ldi	r20, 0xDC	; 220
     670:	52 e0       	ldi	r21, 0x02	; 2
     672:	6c d4       	rcall	.+2264   	; 0xf4c <USB_GetNextDescriptorComp>
     674:	88 23       	and	r24, r24
     676:	d1 f4       	brne	.+52     	; 0x6ac <ProcessConfigurationDescriptor+0xc0>
     678:	cb 80       	ldd	r12, Y+3	; 0x03
     67a:	dc 80       	ldd	r13, Y+4	; 0x04
     67c:	e6 cf       	rjmp	.-52     	; 0x64a <ProcessConfigurationDescriptor+0x5e>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     67e:	eb 80       	ldd	r14, Y+3	; 0x03
     680:	fc 80       	ldd	r15, Y+4	; 0x04

			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
     682:	f7 01       	movw	r30, r14
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     684:	42 81       	ldd	r20, Z+2	; 0x02
     686:	47 ff       	sbrs	r20, 7

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     688:	e0 cf       	rjmp	.-64     	; 0x64a <ProcessConfigurationDescriptor+0x5e>
     68a:	e1 14       	cp	r14, r1
     68c:	f1 04       	cpc	r15, r1
     68e:	e9 f2       	breq	.-70     	; 0x64a <ProcessConfigurationDescriptor+0x5e>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint))
     690:	24 81       	ldd	r18, Z+4	; 0x04
     692:	35 81       	ldd	r19, Z+5	; 0x05
     694:	81 e8       	ldi	r24, 0x81	; 129
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		  DataINEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(MOUSE_DATA_IN_PIPE, EP_TYPE_INTERRUPT, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     696:	63 e0       	ldi	r22, 0x03	; 3
     698:	01 e0       	ldi	r16, 0x01	; 1
     69a:	44 d2       	rcall	.+1160   	; 0xb24 <Pipe_ConfigurePipe>
     69c:	f7 01       	movw	r30, r14
     69e:	86 81       	ldd	r24, Z+6	; 0x06
     6a0:	80 93 ad 00 	sts	0x00AD, r24
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	03 c0       	rjmp	.+6      	; 0x6ae <ProcessConfigurationDescriptor+0xc2>
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     6a8:	82 e0       	ldi	r24, 0x02	; 2
     6aa:	01 c0       	rjmp	.+2      	; 0x6ae <ProcessConfigurationDescriptor+0xc2>

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     6ac:	84 e0       	ldi	r24, 0x04	; 4
     6ae:	cc 5f       	subi	r28, 0xFC	; 252
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     6b0:	dd 4f       	sbci	r29, 0xFD	; 253
     6b2:	0f b6       	in	r0, 0x3f	; 63
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextMouseInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     6b4:	f8 94       	cli
	Pipe_ConfigurePipe(MOUSE_DATA_IN_PIPE, EP_TYPE_INTERRUPT, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     6b6:	de bf       	out	0x3e, r29	; 62
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	cd bf       	out	0x3d, r28	; 61
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	1f 91       	pop	r17
     6c2:	0f 91       	pop	r16
     6c4:	ff 90       	pop	r15
     6c6:	ef 90       	pop	r14
     6c8:	df 90       	pop	r13
     6ca:	cf 90       	pop	r12
     6cc:	08 95       	ret

000006ce <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     6ce:	80 91 9e 00 	lds	r24, 0x009E
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	81 70       	andi	r24, 0x01	; 1
     6d6:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     6d8:	20 91 a0 00 	lds	r18, 0x00A0
     6dc:	2d 7f       	andi	r18, 0xFD	; 253
     6de:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     6e2:	20 91 9e 00 	lds	r18, 0x009E
     6e6:	22 60       	ori	r18, 0x02	; 2
     6e8:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     6ec:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     6f0:	21 fd       	sbrc	r18, 1
     6f2:	fc cf       	rjmp	.-8      	; 0x6ec <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6f4:	20 91 9e 00 	lds	r18, 0x009E
     6f8:	21 60       	ori	r18, 0x01	; 1
     6fa:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     6fe:	10 92 25 01 	sts	0x0125, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     702:	20 91 a0 00 	lds	r18, 0x00A0
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	20 72       	andi	r18, 0x20	; 32
     70a:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     70c:	40 91 a0 00 	lds	r20, 0x00A0
     710:	4f 7d       	andi	r20, 0xDF	; 223
     712:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     716:	40 91 9f 00 	lds	r20, 0x009F
     71a:	4f 7d       	andi	r20, 0xDF	; 223
     71c:	40 93 9f 00 	sts	0x009F, r20
     720:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     722:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     726:	55 ff       	sbrs	r21, 5
     728:	0b c0       	rjmp	.+22     	; 0x740 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     72a:	40 91 9f 00 	lds	r20, 0x009F
     72e:	4f 7d       	andi	r20, 0xDF	; 223
     730:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     734:	40 91 9f 00 	lds	r20, 0x009F
     738:	4d 7f       	andi	r20, 0xFD	; 253
     73a:	40 93 9f 00 	sts	0x009F, r20
     73e:	08 c0       	rjmp	.+16     	; 0x750 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     740:	ef ec       	ldi	r30, 0xCF	; 207
     742:	f7 e0       	ldi	r31, 0x07	; 7
     744:	31 97       	sbiw	r30, 0x01	; 1
     746:	f1 f7       	brne	.-4      	; 0x744 <USB_Host_ResetDevice+0x76>
     748:	00 c0       	rjmp	.+0      	; 0x74a <USB_Host_ResetDevice+0x7c>
     74a:	00 00       	nop
     74c:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     74e:	49 f7       	brne	.-46     	; 0x722 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     750:	21 15       	cp	r18, r1
     752:	31 05       	cpc	r19, r1
     754:	29 f0       	breq	.+10     	; 0x760 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     756:	20 91 a0 00 	lds	r18, 0x00A0
     75a:	20 62       	ori	r18, 0x20	; 32
     75c:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     760:	00 97       	sbiw	r24, 0x00	; 0
     762:	29 f4       	brne	.+10     	; 0x76e <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     764:	80 91 9e 00 	lds	r24, 0x009E
     768:	8e 7f       	andi	r24, 0xFE	; 254
     76a:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     76e:	80 91 a0 00 	lds	r24, 0x00A0
     772:	82 60       	ori	r24, 0x02	; 2
     774:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     778:	08 95       	ret

0000077a <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     77a:	40 91 9e 00 	lds	r20, 0x009E
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	41 70       	andi	r20, 0x01	; 1
     782:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     784:	20 91 a0 00 	lds	r18, 0x00A0
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	20 72       	andi	r18, 0x20	; 32
     78c:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     78e:	90 91 a0 00 	lds	r25, 0x00A0
     792:	9f 7d       	andi	r25, 0xDF	; 223
     794:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     798:	90 91 9f 00 	lds	r25, 0x009F
     79c:	9f 7d       	andi	r25, 0xDF	; 223
     79e:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7a2:	90 91 9e 00 	lds	r25, 0x009E
     7a6:	91 60       	ori	r25, 0x01	; 1
     7a8:	90 93 9e 00 	sts	0x009E, r25
     7ac:	26 c0       	rjmp	.+76     	; 0x7fa <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     7ae:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     7b2:	95 ff       	sbrs	r25, 5
     7b4:	06 c0       	rjmp	.+12     	; 0x7c2 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7b6:	90 91 9f 00 	lds	r25, 0x009F
     7ba:	9f 7d       	andi	r25, 0xDF	; 223
     7bc:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     7c0:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     7c2:	90 91 2f 01 	lds	r25, 0x012F
     7c6:	91 30       	cpi	r25, 0x01	; 1
     7c8:	d9 f0       	breq	.+54     	; 0x800 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     7ca:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     7ce:	94 ff       	sbrs	r25, 4
     7d0:	09 c0       	rjmp	.+18     	; 0x7e4 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     7d2:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     7d6:	80 91 a6 00 	lds	r24, 0x00A6
     7da:	8f 7e       	andi	r24, 0xEF	; 239
     7dc:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     7e0:	82 e0       	ldi	r24, 0x02	; 2

			break;
     7e2:	0f c0       	rjmp	.+30     	; 0x802 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     7e4:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     7e8:	91 ff       	sbrs	r25, 1
     7ea:	07 c0       	rjmp	.+14     	; 0x7fa <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     7ec:	80 91 a6 00 	lds	r24, 0x00A6
     7f0:	8d 7f       	andi	r24, 0xFD	; 253
     7f2:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     7f6:	83 e0       	ldi	r24, 0x03	; 3

			break;
     7f8:	04 c0       	rjmp	.+8      	; 0x802 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     7fa:	88 23       	and	r24, r24
     7fc:	c1 f6       	brne	.-80     	; 0x7ae <USB_Host_WaitMS+0x34>
     7fe:	01 c0       	rjmp	.+2      	; 0x802 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     800:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     802:	41 15       	cp	r20, r1
     804:	51 05       	cpc	r21, r1
     806:	29 f4       	brne	.+10     	; 0x812 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     808:	90 91 9e 00 	lds	r25, 0x009E
     80c:	9e 7f       	andi	r25, 0xFE	; 254
     80e:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     812:	21 15       	cp	r18, r1
     814:	31 05       	cpc	r19, r1
     816:	29 f0       	breq	.+10     	; 0x822 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     818:	90 91 a0 00 	lds	r25, 0x00A0
     81c:	90 62       	ori	r25, 0x20	; 32
     81e:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     822:	08 95       	ret

00000824 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
     830:	28 97       	sbiw	r28, 0x08	; 8
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	de bf       	out	0x3e, r29	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     83c:	80 91 2f 01 	lds	r24, 0x012F
     840:	85 30       	cpi	r24, 0x05	; 5
     842:	09 f4       	brne	.+2      	; 0x846 <USB_Host_ProcessNextHostState+0x22>
     844:	99 c0       	rjmp	.+306    	; 0x978 <USB_Host_ProcessNextHostState+0x154>
     846:	86 30       	cpi	r24, 0x06	; 6
     848:	68 f4       	brcc	.+26     	; 0x864 <USB_Host_ProcessNextHostState+0x40>
     84a:	82 30       	cpi	r24, 0x02	; 2
     84c:	c1 f1       	breq	.+112    	; 0x8be <USB_Host_ProcessNextHostState+0x9a>
     84e:	83 30       	cpi	r24, 0x03	; 3
     850:	18 f4       	brcc	.+6      	; 0x858 <USB_Host_ProcessNextHostState+0x34>
     852:	88 23       	and	r24, r24
     854:	a1 f0       	breq	.+40     	; 0x87e <USB_Host_ProcessNextHostState+0x5a>
     856:	04 c1       	rjmp	.+520    	; 0xa60 <USB_Host_ProcessNextHostState+0x23c>
     858:	83 30       	cpi	r24, 0x03	; 3
     85a:	d9 f1       	breq	.+118    	; 0x8d2 <USB_Host_ProcessNextHostState+0xae>
     85c:	84 30       	cpi	r24, 0x04	; 4
     85e:	09 f0       	breq	.+2      	; 0x862 <USB_Host_ProcessNextHostState+0x3e>
     860:	ff c0       	rjmp	.+510    	; 0xa60 <USB_Host_ProcessNextHostState+0x23c>
     862:	62 c0       	rjmp	.+196    	; 0x928 <USB_Host_ProcessNextHostState+0x104>
     864:	87 30       	cpi	r24, 0x07	; 7
     866:	09 f4       	brne	.+2      	; 0x86a <USB_Host_ProcessNextHostState+0x46>
     868:	9e c0       	rjmp	.+316    	; 0x9a6 <USB_Host_ProcessNextHostState+0x182>
     86a:	87 30       	cpi	r24, 0x07	; 7
     86c:	08 f4       	brcc	.+2      	; 0x870 <USB_Host_ProcessNextHostState+0x4c>
     86e:	8f c0       	rjmp	.+286    	; 0x98e <USB_Host_ProcessNextHostState+0x16a>
     870:	88 30       	cpi	r24, 0x08	; 8
     872:	09 f4       	brne	.+2      	; 0x876 <USB_Host_ProcessNextHostState+0x52>
     874:	b8 c0       	rjmp	.+368    	; 0x9e6 <USB_Host_ProcessNextHostState+0x1c2>
     876:	89 30       	cpi	r24, 0x09	; 9
     878:	09 f0       	breq	.+2      	; 0x87c <USB_Host_ProcessNextHostState+0x58>
     87a:	f2 c0       	rjmp	.+484    	; 0xa60 <USB_Host_ProcessNextHostState+0x23c>
     87c:	d9 c0       	rjmp	.+434    	; 0xa30 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     87e:	00 91 22 01 	lds	r16, 0x0122
     882:	10 91 23 01 	lds	r17, 0x0123
     886:	01 15       	cp	r16, r1
     888:	11 05       	cpc	r17, r1
     88a:	09 f4       	brne	.+2      	; 0x88e <USB_Host_ProcessNextHostState+0x6a>
     88c:	e9 c0       	rjmp	.+466    	; 0xa60 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	74 df       	rcall	.-280    	; 0x77a <USB_Host_WaitMS>
     892:	68 2f       	mov	r22, r24
     894:	88 23       	and	r24, r24
     896:	31 f0       	breq	.+12     	; 0x8a4 <USB_Host_ProcessNextHostState+0x80>
     898:	80 91 24 01 	lds	r24, 0x0124
				{
					USB_HostState = PostWaitState;
     89c:	80 93 2f 01 	sts	0x012F, r24
     8a0:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     8a2:	d2 c0       	rjmp	.+420    	; 0xa48 <USB_Host_ProcessNextHostState+0x224>
					break;
     8a4:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
     8a6:	10 40       	sbci	r17, 0x00	; 0
     8a8:	10 93 23 01 	sts	0x0123, r17
     8ac:	00 93 22 01 	sts	0x0122, r16
     8b0:	01 15       	cp	r16, r1
     8b2:	11 05       	cpc	r17, r1
     8b4:	09 f0       	breq	.+2      	; 0x8b8 <USB_Host_ProcessNextHostState+0x94>
     8b6:	d4 c0       	rjmp	.+424    	; 0xa60 <USB_Host_ProcessNextHostState+0x23c>
     8b8:	80 91 24 01 	lds	r24, 0x0124
				  USB_HostState = PostWaitState;
     8bc:	07 c0       	rjmp	.+14     	; 0x8cc <USB_Host_ProcessNextHostState+0xa8>
     8be:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     8c0:	93 e0       	ldi	r25, 0x03	; 3
     8c2:	90 93 23 01 	sts	0x0123, r25
     8c6:	80 93 22 01 	sts	0x0122, r24
     8ca:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     8cc:	80 93 2f 01 	sts	0x012F, r24
     8d0:	c7 c0       	rjmp	.+398    	; 0xa60 <USB_Host_ProcessNextHostState+0x23c>
			break;
     8d2:	80 91 22 01 	lds	r24, 0x0122
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     8d6:	90 91 23 01 	lds	r25, 0x0123
     8da:	9c 01       	movw	r18, r24
     8dc:	21 50       	subi	r18, 0x01	; 1
     8de:	30 40       	sbci	r19, 0x00	; 0
     8e0:	30 93 23 01 	sts	0x0123, r19
     8e4:	20 93 22 01 	sts	0x0122, r18
     8e8:	00 97       	sbiw	r24, 0x00	; 0
     8ea:	39 f0       	breq	.+14     	; 0x8fa <USB_Host_ProcessNextHostState+0xd6>
     8ec:	8f ec       	ldi	r24, 0xCF	; 207
     8ee:	97 e0       	ldi	r25, 0x07	; 7
     8f0:	01 97       	sbiw	r24, 0x01	; 1
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <USB_Host_ProcessNextHostState+0xcc>
     8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <USB_Host_ProcessNextHostState+0xd2>
     8f6:	00 00       	nop
     8f8:	b3 c0       	rjmp	.+358    	; 0xa60 <USB_Host_ProcessNextHostState+0x23c>
     8fa:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     8fc:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     900:	80 61       	ori	r24, 0x10	; 16
     902:	80 93 d8 00 	sts	0x00D8, r24
     906:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     90a:	8b 7f       	andi	r24, 0xFB	; 251
     90c:	80 93 dd 00 	sts	0x00DD, r24
     910:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     914:	80 61       	ori	r24, 0x10	; 16
     916:	80 93 d7 00 	sts	0x00D7, r24
     91a:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     91e:	82 60       	ori	r24, 0x02	; 2
     920:	80 93 dd 00 	sts	0x00DD, r24
     924:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     926:	d2 cf       	rjmp	.-92     	; 0x8cc <USB_Host_ProcessNextHostState+0xa8>
     928:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     92c:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     92e:	98 c0       	rjmp	.+304    	; 0xa60 <USB_Host_ProcessNextHostState+0x23c>
     930:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     934:	8e 7f       	andi	r24, 0xFE	; 254
     936:	80 93 9f 00 	sts	0x009F, r24
     93a:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     93e:	8d 7f       	andi	r24, 0xFD	; 253
     940:	80 93 9f 00 	sts	0x009F, r24
     944:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     948:	8d 7f       	andi	r24, 0xFD	; 253
     94a:	80 93 df 00 	sts	0x00DF, r24
     94e:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     952:	82 60       	ori	r24, 0x02	; 2
     954:	80 93 de 00 	sts	0x00DE, r24
     958:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     95c:	81 60       	ori	r24, 0x01	; 1
     95e:	80 93 9e 00 	sts	0x009E, r24
     962:	45 d1       	rcall	.+650    	; 0xbee <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     964:	10 92 2f 01 	sts	0x012F, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     968:	84 e6       	ldi	r24, 0x64	; 100
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	90 93 23 01 	sts	0x0123, r25
     970:	80 93 22 01 	sts	0x0122, r24
     974:	85 e0       	ldi	r24, 0x05	; 5
     976:	59 c0       	rjmp	.+178    	; 0xa2a <USB_Host_ProcessNextHostState+0x206>
     978:	aa de       	rcall	.-684    	; 0x6ce <USB_Host_ResetDevice>
     97a:	10 92 2f 01 	sts	0x012F, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     97e:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	90 93 23 01 	sts	0x0123, r25
     986:	80 93 22 01 	sts	0x0122, r24
     98a:	86 e0       	ldi	r24, 0x06	; 6
     98c:	4e c0       	rjmp	.+156    	; 0xa2a <USB_Host_ProcessNextHostState+0x206>
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     994:	20 e4       	ldi	r18, 0x40	; 64
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	01 e0       	ldi	r16, 0x01	; 1
     99a:	c4 d0       	rcall	.+392    	; 0xb24 <Pipe_ConfigurePipe>
     99c:	88 23       	and	r24, r24
     99e:	09 f4       	brne	.+2      	; 0x9a2 <USB_Host_ProcessNextHostState+0x17e>
     9a0:	4f c0       	rjmp	.+158    	; 0xa40 <USB_Host_ProcessNextHostState+0x21c>
     9a2:	87 e0       	ldi	r24, 0x07	; 7
     9a4:	93 cf       	rjmp	.-218    	; 0x8cc <USB_Host_ProcessNextHostState+0xa8>
     9a6:	a7 e2       	ldi	r26, 0x27	; 39
     9a8:	b1 e0       	ldi	r27, 0x01	; 1
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     9aa:	e8 e0       	ldi	r30, 0x08	; 8
     9ac:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     9ae:	88 e0       	ldi	r24, 0x08	; 8
     9b0:	01 90       	ld	r0, Z+
     9b2:	0d 92       	st	X+, r0
     9b4:	81 50       	subi	r24, 0x01	; 1
     9b6:	e1 f7       	brne	.-8      	; 0x9b0 <USB_Host_ProcessNextHostState+0x18c>
     9b8:	10 92 a7 00 	sts	0x00A7, r1
     9bc:	ce 01       	movw	r24, r28
     9be:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     9c0:	35 d3       	rcall	.+1642   	; 0x102c <USB_Host_SendControlRequest>
     9c2:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     9c4:	88 23       	and	r24, r24
     9c6:	09 f0       	breq	.+2      	; 0x9ca <USB_Host_ProcessNextHostState+0x1a6>
     9c8:	3e c0       	rjmp	.+124    	; 0xa46 <USB_Host_ProcessNextHostState+0x222>
     9ca:	88 85       	ldd	r24, Y+8	; 0x08
     9cc:	80 93 18 01 	sts	0x0118, r24
     9d0:	7e de       	rcall	.-772    	; 0x6ce <USB_Host_ResetDevice>
     9d2:	10 92 2f 01 	sts	0x012F, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     9d6:	88 ec       	ldi	r24, 0xC8	; 200
     9d8:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
     9da:	90 93 23 01 	sts	0x0123, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     9de:	80 93 22 01 	sts	0x0122, r24
     9e2:	88 e0       	ldi	r24, 0x08	; 8
     9e4:	22 c0       	rjmp	.+68     	; 0xa2a <USB_Host_ProcessNextHostState+0x206>
     9e6:	20 91 18 01 	lds	r18, 0x0118
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     9f2:	01 e0       	ldi	r16, 0x01	; 1
     9f4:	97 d0       	rcall	.+302    	; 0xb24 <Pipe_ConfigurePipe>
     9f6:	88 23       	and	r24, r24
     9f8:	19 f1       	breq	.+70     	; 0xa40 <USB_Host_ProcessNextHostState+0x21c>
     9fa:	a7 e2       	ldi	r26, 0x27	; 39
     9fc:	b1 e0       	ldi	r27, 0x01	; 1
     9fe:	e0 e1       	ldi	r30, 0x10	; 16
     a00:	f1 e0       	ldi	r31, 0x01	; 1
     a02:	88 e0       	ldi	r24, 0x08	; 8
     a04:	01 90       	ld	r0, Z+
     a06:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     a08:	81 50       	subi	r24, 0x01	; 1
     a0a:	e1 f7       	brne	.-8      	; 0xa04 <USB_Host_ProcessNextHostState+0x1e0>
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0d d3       	rcall	.+1562   	; 0x102c <USB_Host_SendControlRequest>
     a12:	68 2f       	mov	r22, r24
     a14:	88 23       	and	r24, r24
     a16:	b9 f4       	brne	.+46     	; 0xa46 <USB_Host_ProcessNextHostState+0x222>
     a18:	10 92 2f 01 	sts	0x012F, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     a1c:	84 e6       	ldi	r24, 0x64	; 100
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	90 93 23 01 	sts	0x0123, r25
     a24:	80 93 22 01 	sts	0x0122, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     a28:	89 e0       	ldi	r24, 0x09	; 9
     a2a:	80 93 24 01 	sts	0x0124, r24
     a2e:	18 c0       	rjmp	.+48     	; 0xa60 <USB_Host_ProcessNextHostState+0x23c>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	80 93 a1 00 	sts	0x00A1, r24
     a36:	8a e0       	ldi	r24, 0x0A	; 10
     a38:	80 93 2f 01 	sts	0x012F, r24
     a3c:	8f dc       	rcall	.-1762   	; 0x35c <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     a3e:	10 c0       	rjmp	.+32     	; 0xa60 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     a40:	60 e0       	ldi	r22, 0x00	; 0
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	01 c0       	rjmp	.+2      	; 0xa48 <USB_Host_ProcessNextHostState+0x224>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     a46:	83 e0       	ldi	r24, 0x03	; 3
     a48:	90 91 2f 01 	lds	r25, 0x012F

			EVENT_USB_Host_DeviceEnumerationComplete();
     a4c:	91 30       	cpi	r25, 0x01	; 1
     a4e:	41 f0       	breq	.+16     	; 0xa60 <USB_Host_ProcessNextHostState+0x23c>
			break;
     a50:	0d dd       	rcall	.-1510   	; 0x46c <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     a52:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     a56:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     a58:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     a5c:	7a dc       	rcall	.-1804   	; 0x352 <EVENT_USB_Host_DeviceUnattached>
     a5e:	21 d1       	rcall	.+578    	; 0xca2 <USB_ResetInterface>
     a60:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a66:	de bf       	out	0x3e, r29	; 62
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	cd bf       	out	0x3d, r28	; 61
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16

		USB_ResetInterface();
     a74:	08 95       	ret

00000a76 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     a76:	af 92       	push	r10
     a78:	bf 92       	push	r11
     a7a:	cf 92       	push	r12
     a7c:	df 92       	push	r13
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	5c 01       	movw	r10, r24
     a8a:	eb 01       	movw	r28, r22
     a8c:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     a8e:	80 91 aa 00 	lds	r24, 0x00AA
     a92:	8f 7c       	andi	r24, 0xCF	; 207
     a94:	80 61       	ori	r24, 0x10	; 16
     a96:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     a9a:	bd d0       	rcall	.+378    	; 0xc16 <Pipe_WaitUntilReady>
     a9c:	f8 2e       	mov	r15, r24
     a9e:	88 23       	and	r24, r24
     aa0:	b1 f5       	brne	.+108    	; 0xb0e <Pipe_Read_Stream_LE+0x98>
     aa2:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     aa4:	d1 04       	cpc	r13, r1
     aa6:	41 f0       	breq	.+16     	; 0xab8 <Pipe_Read_Stream_LE+0x42>
     aa8:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     aaa:	00 81       	ld	r16, Z
     aac:	11 81       	ldd	r17, Z+1	; 0x01
     aae:	c0 1b       	sub	r28, r16
     ab0:	d1 0b       	sbc	r29, r17
     ab2:	0a 0d       	add	r16, r10
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     ab4:	1b 1d       	adc	r17, r11
     ab6:	01 c0       	rjmp	.+2      	; 0xaba <Pipe_Read_Stream_LE+0x44>
     ab8:	85 01       	movw	r16, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     aba:	aa 24       	eor	r10, r10
     abc:	bb 24       	eor	r11, r11
     abe:	23 c0       	rjmp	.+70     	; 0xb06 <Pipe_Read_Stream_LE+0x90>
     ac0:	80 91 a6 00 	lds	r24, 0x00A6
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     ac4:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     ac6:	16 c0       	rjmp	.+44     	; 0xaf4 <Pipe_Read_Stream_LE+0x7e>
     ac8:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     acc:	8e 77       	andi	r24, 0x7E	; 126
     ace:	80 93 a6 00 	sts	0x00A6, r24
     ad2:	c1 14       	cp	r12, r1
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     ad4:	d1 04       	cpc	r13, r1
     ad6:	51 f0       	breq	.+20     	; 0xaec <Pipe_Read_Stream_LE+0x76>
     ad8:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     ada:	80 81       	ld	r24, Z
     adc:	91 81       	ldd	r25, Z+1	; 0x01
     ade:	8a 0d       	add	r24, r10
     ae0:	9b 1d       	adc	r25, r11
     ae2:	91 83       	std	Z+1, r25	; 0x01
     ae4:	80 83       	st	Z, r24
     ae6:	64 e0       	ldi	r22, 0x04	; 4
				return PIPE_RWSTREAM_IncompleteTransfer;
     ae8:	f6 2e       	mov	r15, r22
     aea:	11 c0       	rjmp	.+34     	; 0xb0e <Pipe_Read_Stream_LE+0x98>
     aec:	94 d0       	rcall	.+296    	; 0xc16 <Pipe_WaitUntilReady>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     aee:	88 23       	and	r24, r24
     af0:	51 f0       	breq	.+20     	; 0xb06 <Pipe_Read_Stream_LE+0x90>
     af2:	0c c0       	rjmp	.+24     	; 0xb0c <Pipe_Read_Stream_LE+0x96>
     af4:	80 91 af 00 	lds	r24, 0x00AF
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     af8:	f8 01       	movw	r30, r16
     afa:	81 93       	st	Z+, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     afc:	8f 01       	movw	r16, r30
     afe:	21 97       	sbiw	r28, 0x01	; 1
     b00:	08 94       	sec
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     b02:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     b04:	b1 1c       	adc	r11, r1
     b06:	20 97       	sbiw	r28, 0x00	; 0
     b08:	d9 f6       	brne	.-74     	; 0xac0 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     b0a:	01 c0       	rjmp	.+2      	; 0xb0e <Pipe_Read_Stream_LE+0x98>
     b0c:	f8 2e       	mov	r15, r24
     b0e:	8f 2d       	mov	r24, r15
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     b10:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	ff 90       	pop	r15
     b1a:	df 90       	pop	r13
     b1c:	cf 90       	pop	r12
     b1e:	bf 90       	pop	r11
     b20:	af 90       	pop	r10
     b22:	08 95       	ret

00000b24 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     b24:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     b26:	58 2f       	mov	r21, r24
     b28:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     b2a:	87 ff       	sbrs	r24, 7
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <Pipe_ConfigurePipe+0xe>
     b2e:	80 e1       	ldi	r24, 0x10	; 16
     b30:	01 c0       	rjmp	.+2      	; 0xb34 <Pipe_ConfigurePipe+0x10>
     b32:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     b34:	57 30       	cpi	r21, 0x07	; 7
     b36:	08 f0       	brcs	.+2      	; 0xb3a <Pipe_ConfigurePipe+0x16>
     b38:	57 c0       	rjmp	.+174    	; 0xbe8 <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     b3a:	66 23       	and	r22, r22
     b3c:	09 f4       	brne	.+2      	; 0xb40 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     b3e:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     b40:	4f 70       	andi	r20, 0x0F	; 15
     b42:	62 95       	swap	r22
     b44:	66 0f       	add	r22, r22
     b46:	66 0f       	add	r22, r22
     b48:	60 7c       	andi	r22, 0xC0	; 192
     b4a:	64 2b       	or	r22, r20
     b4c:	68 2b       	or	r22, r24
     b4e:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     b50:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b52:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     b56:	45 17       	cp	r20, r21
     b58:	a9 f4       	brne	.+42     	; 0xb84 <Pipe_ConfigurePipe+0x60>
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     b5c:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     b5e:	88 0f       	add	r24, r24
     b60:	99 1f       	adc	r25, r25
     b62:	03 c0       	rjmp	.+6      	; 0xb6a <Pipe_ConfigurePipe+0x46>
     b64:	88 e0       	ldi	r24, 0x08	; 8
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     b6a:	82 17       	cp	r24, r18
     b6c:	93 07       	cpc	r25, r19
     b6e:	10 f4       	brcc	.+4      	; 0xb74 <Pipe_ConfigurePipe+0x50>
     b70:	75 30       	cpi	r23, 0x05	; 5
     b72:	a1 f7       	brne	.-24     	; 0xb5c <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     b74:	87 2f       	mov	r24, r23
     b76:	82 95       	swap	r24
     b78:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     b7a:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     b7c:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     b7e:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     b80:	e0 e0       	ldi	r30, 0x00	; 0
     b82:	08 c0       	rjmp	.+16     	; 0xb94 <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     b84:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     b88:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     b8c:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     b90:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     b94:	81 ff       	sbrs	r24, 1
     b96:	20 c0       	rjmp	.+64     	; 0xbd8 <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b98:	90 91 a9 00 	lds	r25, 0x00A9
     b9c:	9e 7f       	andi	r25, 0xFE	; 254
     b9e:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     ba2:	90 91 ab 00 	lds	r25, 0x00AB
     ba6:	9d 7f       	andi	r25, 0xFD	; 253
     ba8:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     bac:	90 91 a9 00 	lds	r25, 0x00A9
     bb0:	91 60       	ori	r25, 0x01	; 1
     bb2:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     bb6:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     bba:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     bbe:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     bc2:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     bc6:	80 91 a9 00 	lds	r24, 0x00A9
     bca:	80 62       	ori	r24, 0x20	; 32
     bcc:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     bd0:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     bd4:	87 ff       	sbrs	r24, 7
     bd6:	08 c0       	rjmp	.+16     	; 0xbe8 <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     bd8:	4f 5f       	subi	r20, 0xFF	; 255
     bda:	47 30       	cpi	r20, 0x07	; 7
     bdc:	09 f0       	breq	.+2      	; 0xbe0 <Pipe_ConfigurePipe+0xbc>
     bde:	b9 cf       	rjmp	.-142    	; 0xb52 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     be0:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	01 c0       	rjmp	.+2      	; 0xbea <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     be8:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     bea:	0f 91       	pop	r16
     bec:	08 95       	ret

00000bee <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     bee:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     bf8:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     bfc:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     c00:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     c04:	90 91 a9 00 	lds	r25, 0x00A9
     c08:	9e 7f       	andi	r25, 0xFE	; 254
     c0a:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c0e:	8f 5f       	subi	r24, 0xFF	; 255
     c10:	87 30       	cpi	r24, 0x07	; 7
     c12:	81 f7       	brne	.-32     	; 0xbf4 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     c14:	08 95       	ret

00000c16 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     c16:	80 91 a2 00 	lds	r24, 0x00A2
     c1a:	90 91 a3 00 	lds	r25, 0x00A3
     c1e:	45 e6       	ldi	r20, 0x65	; 101
     c20:	01 c0       	rjmp	.+2      	; 0xc24 <Pipe_WaitUntilReady+0xe>
     c22:	c9 01       	movw	r24, r18
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     c24:	20 91 aa 00 	lds	r18, 0x00AA
     c28:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     c2a:	20 31       	cpi	r18, 0x10	; 16
     c2c:	29 f4       	brne	.+10     	; 0xc38 <Pipe_WaitUntilReady+0x22>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     c2e:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     c32:	20 ff       	sbrs	r18, 0
     c34:	05 c0       	rjmp	.+10     	; 0xc40 <Pipe_WaitUntilReady+0x2a>
     c36:	17 c0       	rjmp	.+46     	; 0xc66 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     c38:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     c3c:	22 fd       	sbrc	r18, 2
     c3e:	13 c0       	rjmp	.+38     	; 0xc66 <Pipe_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     c40:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     c44:	21 fd       	sbrc	r18, 1
     c46:	11 c0       	rjmp	.+34     	; 0xc6a <Pipe_WaitUntilReady+0x54>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     c48:	20 91 2f 01 	lds	r18, 0x012F
     c4c:	21 30       	cpi	r18, 0x01	; 1
     c4e:	79 f0       	breq	.+30     	; 0xc6e <Pipe_WaitUntilReady+0x58>
     c50:	20 91 a2 00 	lds	r18, 0x00A2
     c54:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     c58:	28 17       	cp	r18, r24
     c5a:	39 07       	cpc	r19, r25
     c5c:	19 f3       	breq	.-58     	; 0xc24 <Pipe_WaitUntilReady+0xe>
     c5e:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     c60:	01 f7       	brne	.-64     	; 0xc22 <Pipe_WaitUntilReady+0xc>
			  return PIPE_READYWAIT_Timeout;
     c62:	83 e0       	ldi	r24, 0x03	; 3
     c64:	08 95       	ret
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     c6e:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     c70:	08 95       	ret

00000c72 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     c72:	75 d0       	rcall	.+234    	; 0xd5e <USB_INT_DisableAllInterrupts>
     c74:	7c d0       	rcall	.+248    	; 0xd6e <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c76:	e0 ee       	ldi	r30, 0xE0	; 224
     c78:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     c7a:	80 81       	ld	r24, Z
     c7c:	81 60       	ori	r24, 0x01	; 1
     c7e:	80 83       	st	Z, r24
     c80:	e8 ed       	ldi	r30, 0xD8	; 216
     c82:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     c84:	80 81       	ld	r24, Z
     c86:	8f 77       	andi	r24, 0x7F	; 127
     c88:	80 83       	st	Z, r24
     c8a:	19 bc       	out	0x29, r1	; 41
     c8c:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c8e:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     c90:	8c 91       	ld	r24, X
     c92:	8e 7f       	andi	r24, 0xFE	; 254
     c94:	8c 93       	st	X, r24
     c96:	80 81       	ld	r24, Z
     c98:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     c9a:	80 83       	st	Z, r24
     c9c:	10 92 26 01 	sts	0x0126, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     ca0:	08 95       	ret

00000ca2 <USB_ResetInterface>:
     ca2:	5d d0       	rcall	.+186    	; 0xd5e <USB_INT_DisableAllInterrupts>
}
     ca4:	64 d0       	rcall	.+200    	; 0xd6e <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     ca6:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     caa:	8f 77       	andi	r24, 0x7F	; 127
     cac:	80 93 d8 00 	sts	0x00D8, r24
     cb0:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     cb4:	80 68       	ori	r24, 0x80	; 128
     cb6:	80 93 d8 00 	sts	0x00D8, r24
     cba:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     cbe:	8f 7d       	andi	r24, 0xDF	; 223
     cc0:	80 93 d8 00 	sts	0x00D8, r24
     cc4:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     cc8:	8f 77       	andi	r24, 0x7F	; 127
     cca:	80 93 d7 00 	sts	0x00D7, r24
     cce:	8c e0       	ldi	r24, 0x0C	; 12
     cd0:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     cd2:	8e e0       	ldi	r24, 0x0E	; 14
     cd4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     cd6:	09 b4       	in	r0, 0x29	; 41
     cd8:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     cda:	fd cf       	rjmp	.-6      	; 0xcd6 <USB_ResetInterface+0x34>
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	80 93 2f 01 	sts	0x012F, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     ce2:	10 92 25 01 	sts	0x0125, r1
	USB_Host_ConfigurationNumber = 0;
     ce6:	80 e4       	ldi	r24, 0x40	; 64
     ce8:	80 93 18 01 	sts	0x0118, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     cec:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     cf0:	80 64       	ori	r24, 0x40	; 64
     cf2:	80 93 d8 00 	sts	0x00D8, r24
     cf6:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     cfa:	81 60       	ori	r24, 0x01	; 1
     cfc:	80 93 dd 00 	sts	0x00DD, r24
     d00:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     d04:	84 60       	ori	r24, 0x04	; 4
     d06:	80 93 dd 00 	sts	0x00DD, r24
     d0a:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     d0e:	8f 7e       	andi	r24, 0xEF	; 239
     d10:	80 93 d7 00 	sts	0x00D7, r24
     d14:	6f 9a       	sbi	0x0d, 7	; 13
     d16:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     d18:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     d1c:	81 60       	ori	r24, 0x01	; 1
     d1e:	80 93 de 00 	sts	0x00DE, r24
     d22:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     d26:	84 60       	ori	r24, 0x04	; 4
     d28:	80 93 de 00 	sts	0x00DE, r24
     d2c:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     d30:	8e 7f       	andi	r24, 0xFE	; 254
     d32:	80 93 e0 00 	sts	0x00E0, r24
     d36:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     d3a:	80 61       	ori	r24, 0x10	; 16
     d3c:	80 93 d8 00 	sts	0x00D8, r24
     d40:	08 95       	ret

00000d42 <USB_Init>:
     d42:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     d44:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     d46:	80 81       	ld	r24, Z
     d48:	8f 7e       	andi	r24, 0xEF	; 239
     d4a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     d4c:	e7 ed       	ldi	r30, 0xD7	; 215
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	81 60       	ori	r24, 0x01	; 1
     d54:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	80 93 26 01 	sts	0x0126, r24

	USB_ResetInterface();
     d5c:	a2 cf       	rjmp	.-188    	; 0xca2 <USB_ResetInterface>

00000d5e <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     d5e:	e8 ed       	ldi	r30, 0xD8	; 216
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	8c 7f       	andi	r24, 0xFC	; 252
     d66:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     d68:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     d6c:	08 95       	ret

00000d6e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     d6e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     d72:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     d76:	08 95       	ret

00000d78 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     d78:	1f 92       	push	r1
     d7a:	0f 92       	push	r0
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	0f 92       	push	r0
     d80:	0b b6       	in	r0, 0x3b	; 59
     d82:	0f 92       	push	r0
     d84:	11 24       	eor	r1, r1
     d86:	2f 93       	push	r18
     d88:	3f 93       	push	r19
     d8a:	4f 93       	push	r20
     d8c:	5f 93       	push	r21
     d8e:	6f 93       	push	r22
     d90:	7f 93       	push	r23
     d92:	8f 93       	push	r24
     d94:	9f 93       	push	r25
     d96:	af 93       	push	r26
     d98:	bf 93       	push	r27
     d9a:	ef 93       	push	r30
     d9c:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     d9e:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     da2:	85 ff       	sbrs	r24, 5
     da4:	0a c0       	rjmp	.+20     	; 0xdba <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     da6:	80 91 a0 00 	lds	r24, 0x00A0
     daa:	85 ff       	sbrs	r24, 5
     dac:	06 c0       	rjmp	.+12     	; 0xdba <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     dae:	80 91 9f 00 	lds	r24, 0x009F
     db2:	8f 7d       	andi	r24, 0xDF	; 223
     db4:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     db8:	10 d1       	rcall	.+544    	; 0xfda <USB_Event_Stub>
     dba:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     dbe:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     dc0:	15 c0       	rjmp	.+42     	; 0xdec <__vector_10+0x74>
     dc2:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     dc6:	81 ff       	sbrs	r24, 1
     dc8:	11 c0       	rjmp	.+34     	; 0xdec <__vector_10+0x74>
     dca:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     dce:	8d 7f       	andi	r24, 0xFD	; 253
     dd0:	80 93 9f 00 	sts	0x009F, r24
     dd4:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     dd8:	8e 7f       	andi	r24, 0xFE	; 254
     dda:	80 93 9f 00 	sts	0x009F, r24
     dde:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     de2:	8d 7f       	andi	r24, 0xFD	; 253
     de4:	80 93 a0 00 	sts	0x00A0, r24
     de8:	b4 da       	rcall	.-2712   	; 0x352 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     dea:	5b df       	rcall	.-330    	; 0xca2 <USB_ResetInterface>
     dec:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     df0:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     df2:	15 c0       	rjmp	.+42     	; 0xe1e <__vector_10+0xa6>
     df4:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     df8:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     dfa:	11 c0       	rjmp	.+34     	; 0xe1e <__vector_10+0xa6>
     dfc:	80 91 df 00 	lds	r24, 0x00DF
     e00:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     e02:	80 93 df 00 	sts	0x00DF, r24
     e06:	77 98       	cbi	0x0e, 7	; 14
     e08:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     e0c:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e0e:	80 93 dd 00 	sts	0x00DD, r24
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	0c db       	rcall	.-2536   	; 0x42e <EVENT_USB_Host_HostError>
     e16:	9d da       	rcall	.-2758   	; 0x352 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	80 93 2f 01 	sts	0x012F, r24
		EVENT_USB_Host_DeviceUnattached();
     e1e:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     e22:	80 ff       	sbrs	r24, 0
     e24:	17 c0       	rjmp	.+46     	; 0xe54 <__vector_10+0xdc>
     e26:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     e2a:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     e2c:	13 c0       	rjmp	.+38     	; 0xe54 <__vector_10+0xdc>
     e2e:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     e32:	8e 7f       	andi	r24, 0xFE	; 254
     e34:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     e38:	80 91 de 00 	lds	r24, 0x00DE
     e3c:	8e 7f       	andi	r24, 0xFE	; 254
     e3e:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     e42:	82 da       	rcall	.-2812   	; 0x348 <EVENT_USB_Host_DeviceAttached>
     e44:	80 91 a0 00 	lds	r24, 0x00A0
     e48:	82 60       	ori	r24, 0x02	; 2
     e4a:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     e4e:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     e50:	80 93 2f 01 	sts	0x012F, r24
     e54:	80 91 df 00 	lds	r24, 0x00DF
     e58:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     e5a:	0e c0       	rjmp	.+28     	; 0xe78 <__vector_10+0x100>
     e5c:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     e60:	82 ff       	sbrs	r24, 2
     e62:	0a c0       	rjmp	.+20     	; 0xe78 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     e64:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     e68:	8b 7f       	andi	r24, 0xFB	; 251
     e6a:	80 93 df 00 	sts	0x00DF, r24
     e6e:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	fc da       	rcall	.-2568   	; 0x46c <EVENT_USB_Host_DeviceEnumerationFailed>
     e74:	6e da       	rcall	.-2852   	; 0x352 <EVENT_USB_Host_DeviceUnattached>
     e76:	15 df       	rcall	.-470    	; 0xca2 <USB_ResetInterface>
     e78:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     e7a:	ef 91       	pop	r30
     e7c:	bf 91       	pop	r27
     e7e:	af 91       	pop	r26
     e80:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     e82:	8f 91       	pop	r24
     e84:	7f 91       	pop	r23

		USB_ResetInterface();
     e86:	6f 91       	pop	r22
     e88:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     e8a:	4f 91       	pop	r20
     e8c:	3f 91       	pop	r19
     e8e:	2f 91       	pop	r18
     e90:	0f 90       	pop	r0
     e92:	0b be       	out	0x3b, r0	; 59
     e94:	0f 90       	pop	r0
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	0f 90       	pop	r0
     e9a:	1f 90       	pop	r1
     e9c:	18 95       	reti

00000e9e <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     e9e:	cf 92       	push	r12
     ea0:	df 92       	push	r13
     ea2:	ef 92       	push	r14
     ea4:	ff 92       	push	r15
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	29 97       	sbiw	r28, 0x09	; 9
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	6b 01       	movw	r12, r22
     ec0:	8a 01       	movw	r16, r20
     ec2:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     ec4:	90 e8       	ldi	r25, 0x80	; 128
     ec6:	90 93 27 01 	sts	0x0127, r25
     eca:	96 e0       	ldi	r25, 0x06	; 6
     ecc:	90 93 28 01 	sts	0x0128, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     ed6:	90 93 2a 01 	sts	0x012A, r25
     eda:	80 93 29 01 	sts	0x0129, r24
     ede:	10 92 2c 01 	sts	0x012C, r1
     ee2:	10 92 2b 01 	sts	0x012B, r1
     ee6:	89 e0       	ldi	r24, 0x09	; 9
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	90 93 2e 01 	sts	0x012E, r25
     eee:	80 93 2d 01 	sts	0x012D, r24
     ef2:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     ef6:	ce 01       	movw	r24, r28
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	98 d0       	rcall	.+304    	; 0x102c <USB_Host_SendControlRequest>
     efc:	88 23       	and	r24, r24
     efe:	b9 f4       	brne	.+46     	; 0xf2e <USB_Host_GetDeviceConfigDescriptor+0x90>
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     f02:	9c 81       	ldd	r25, Y+4	; 0x04
     f04:	f6 01       	movw	r30, r12
     f06:	91 83       	std	Z+1, r25	; 0x01
     f08:	80 83       	st	Z, r24
     f0a:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
     f0c:	f9 06       	cpc	r15, r25
     f0e:	70 f0       	brcs	.+28     	; 0xf2c <USB_Host_GetDeviceConfigDescriptor+0x8e>
     f10:	90 93 2e 01 	sts	0x012E, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     f14:	80 93 2d 01 	sts	0x012D, r24
     f18:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     f1a:	88 d0       	rcall	.+272    	; 0x102c <USB_Host_SendControlRequest>
     f1c:	88 23       	and	r24, r24
     f1e:	39 f4       	brne	.+14     	; 0xf2e <USB_Host_GetDeviceConfigDescriptor+0x90>
     f20:	f8 01       	movw	r30, r16
     f22:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     f24:	92 30       	cpi	r25, 0x02	; 2
     f26:	19 f0       	breq	.+6      	; 0xf2e <USB_Host_GetDeviceConfigDescriptor+0x90>
     f28:	86 e0       	ldi	r24, 0x06	; 6
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     f2c:	85 e0       	ldi	r24, 0x05	; 5
     f2e:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     f30:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     f32:	f8 94       	cli
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	df 90       	pop	r13
     f48:	cf 90       	pop	r12
     f4a:	08 95       	ret

00000f4c <USB_GetNextDescriptorComp>:
     f4c:	af 92       	push	r10
     f4e:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     f50:	cf 92       	push	r12
     f52:	df 92       	push	r13
     f54:	ef 92       	push	r14
     f56:	ff 92       	push	r15
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	7c 01       	movw	r14, r24
     f62:	8b 01       	movw	r16, r22
     f64:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     f66:	28 c0       	rjmp	.+80     	; 0xfb8 <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     f68:	f8 01       	movw	r30, r16
     f6a:	c0 80       	ld	r12, Z
     f6c:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     f6e:	f6 01       	movw	r30, r12
     f70:	80 81       	ld	r24, Z
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	9e 01       	movw	r18, r28
     f76:	8c 17       	cp	r24, r28
     f78:	9d 07       	cpc	r25, r29
     f7a:	08 f4       	brcc	.+2      	; 0xf7e <USB_GetNextDescriptorComp+0x32>
     f7c:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     f7e:	c6 01       	movw	r24, r12
     f80:	82 0f       	add	r24, r18
     f82:	93 1f       	adc	r25, r19
     f84:	f8 01       	movw	r30, r16
     f86:	91 83       	std	Z+1, r25	; 0x01
     f88:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
     f8a:	f7 01       	movw	r30, r14
     f8c:	80 81       	ld	r24, Z
     f8e:	91 81       	ldd	r25, Z+1	; 0x01
     f90:	82 1b       	sub	r24, r18
     f92:	93 0b       	sbc	r25, r19
     f94:	91 83       	std	Z+1, r25	; 0x01
     f96:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     f98:	f8 01       	movw	r30, r16
     f9a:	80 81       	ld	r24, Z
     f9c:	91 81       	ldd	r25, Z+1	; 0x01
     f9e:	f5 01       	movw	r30, r10
     fa0:	09 95       	icall
     fa2:	82 30       	cpi	r24, 0x02	; 2
     fa4:	49 f0       	breq	.+18     	; 0xfb8 <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	69 f4       	brne	.+26     	; 0xfc4 <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
     faa:	f8 01       	movw	r30, r16
     fac:	d1 82       	std	Z+1, r13	; 0x01
     fae:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
     fb0:	f7 01       	movw	r30, r14
     fb2:	d1 83       	std	Z+1, r29	; 0x01
     fb4:	c0 83       	st	Z, r28
     fb6:	06 c0       	rjmp	.+12     	; 0xfc4 <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     fb8:	f7 01       	movw	r30, r14
     fba:	c0 81       	ld	r28, Z
     fbc:	d1 81       	ldd	r29, Z+1	; 0x01
     fbe:	20 97       	sbiw	r28, 0x00	; 0
     fc0:	99 f6       	brne	.-90     	; 0xf68 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     fc2:	82 e0       	ldi	r24, 0x02	; 2
}
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	ff 90       	pop	r15
     fce:	ef 90       	pop	r14
     fd0:	df 90       	pop	r13
     fd2:	cf 90       	pop	r12
     fd4:	bf 90       	pop	r11
     fd6:	af 90       	pop	r10
     fd8:	08 95       	ret

00000fda <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     fda:	08 95       	ret

00000fdc <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     fdc:	1f 93       	push	r17
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     fe4:	c9 ee       	ldi	r28, 0xE9	; 233
     fe6:	d3 e0       	ldi	r29, 0x03	; 3
     fe8:	06 c0       	rjmp	.+12     	; 0xff6 <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	c6 db       	rcall	.-2164   	; 0x77a <USB_Host_WaitMS>
     fee:	88 23       	and	r24, r24
     ff0:	c9 f4       	brne	.+50     	; 0x1024 <USB_Host_WaitForIOS+0x48>
     ff2:	21 97       	sbiw	r28, 0x01	; 1
     ff4:	b1 f0       	breq	.+44     	; 0x1022 <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     ff6:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     ff8:	29 f4       	brne	.+10     	; 0x1004 <USB_Host_WaitForIOS+0x28>
     ffa:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     ffe:	83 ff       	sbrs	r24, 3
    1000:	f4 cf       	rjmp	.-24     	; 0xfea <USB_Host_WaitForIOS+0xe>
    1002:	0d c0       	rjmp	.+26     	; 0x101e <USB_Host_WaitForIOS+0x42>
    1004:	11 30       	cpi	r17, 0x01	; 1
    1006:	29 f4       	brne	.+10     	; 0x1012 <USB_Host_WaitForIOS+0x36>
    1008:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    100c:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    100e:	ed cf       	rjmp	.-38     	; 0xfea <USB_Host_WaitForIOS+0xe>
    1010:	06 c0       	rjmp	.+12     	; 0x101e <USB_Host_WaitForIOS+0x42>
    1012:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1014:	51 f7       	brne	.-44     	; 0xfea <USB_Host_WaitForIOS+0xe>
    1016:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    101a:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    101c:	e6 cf       	rjmp	.-52     	; 0xfea <USB_Host_WaitForIOS+0xe>
    101e:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1020:	01 c0       	rjmp	.+2      	; 0x1024 <USB_Host_WaitForIOS+0x48>
    1022:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1024:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
    1026:	cf 91       	pop	r28
    1028:	1f 91       	pop	r17
    102a:	08 95       	ret

0000102c <USB_Host_SendControlRequest>:
    102c:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    102e:	ff 92       	push	r15
    1030:	0f 93       	push	r16
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    103a:	e0 90 9e 00 	lds	r14, 0x009E
    103e:	ff 24       	eor	r15, r15
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	e8 22       	and	r14, r24
    1044:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1046:	00 91 2d 01 	lds	r16, 0x012D
    104a:	10 91 2e 01 	lds	r17, 0x012E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    104e:	80 91 9e 00 	lds	r24, 0x009E
    1052:	81 60       	ori	r24, 0x01	; 1
    1054:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	8f db       	rcall	.-2274   	; 0x77a <USB_Host_WaitMS>
    105c:	88 23       	and	r24, r24
    105e:	09 f0       	breq	.+2      	; 0x1062 <USB_Host_SendControlRequest+0x36>
    1060:	ca c0       	rjmp	.+404    	; 0x11f6 <USB_Host_SendControlRequest+0x1ca>
    1062:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1066:	8f 7c       	andi	r24, 0xCF	; 207
    1068:	80 93 aa 00 	sts	0x00AA, r24
    106c:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1070:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    1074:	8f 7e       	andi	r24, 0xEF	; 239
    1076:	80 93 a6 00 	sts	0x00A6, r24
    107a:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    107e:	8f 7b       	andi	r24, 0xBF	; 191
    1080:	80 93 a9 00 	sts	0x00A9, r24
    1084:	88 e0       	ldi	r24, 0x08	; 8
    1086:	e7 e2       	ldi	r30, 0x27	; 39
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1088:	f1 e0       	ldi	r31, 0x01	; 1
    108a:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    108c:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1090:	81 50       	subi	r24, 0x01	; 1
    1092:	d9 f7       	brne	.-10     	; 0x108a <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1094:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1098:	87 77       	andi	r24, 0x77	; 119
    109a:	80 93 a6 00 	sts	0x00A6, r24
    109e:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    10a0:	9d df       	rcall	.-198    	; 0xfdc <USB_Host_WaitForIOS>
    10a2:	88 23       	and	r24, r24
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <USB_Host_SendControlRequest+0x7c>
    10a6:	a7 c0       	rjmp	.+334    	; 0x11f6 <USB_Host_SendControlRequest+0x1ca>
    10a8:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10ac:	80 64       	ori	r24, 0x40	; 64
    10ae:	80 93 a9 00 	sts	0x00A9, r24
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	62 db       	rcall	.-2364   	; 0x77a <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10b6:	88 23       	and	r24, r24
    10b8:	09 f0       	breq	.+2      	; 0x10bc <USB_Host_SendControlRequest+0x90>
    10ba:	9d c0       	rjmp	.+314    	; 0x11f6 <USB_Host_SendControlRequest+0x1ca>
    10bc:	80 91 27 01 	lds	r24, 0x0127
    10c0:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    10c2:	4f c0       	rjmp	.+158    	; 0x1162 <USB_Host_SendControlRequest+0x136>
    10c4:	80 91 aa 00 	lds	r24, 0x00AA
    10c8:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10ca:	80 61       	ori	r24, 0x10	; 16
    10cc:	80 93 aa 00 	sts	0x00AA, r24
    10d0:	20 97       	sbiw	r28, 0x00	; 0
    10d2:	61 f5       	brne	.+88     	; 0x112c <USB_Host_SendControlRequest+0x100>
    10d4:	2e c0       	rjmp	.+92     	; 0x1132 <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    10d6:	80 91 a9 00 	lds	r24, 0x00A9
    10da:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10dc:	80 93 a9 00 	sts	0x00A9, r24
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	7c df       	rcall	.-264    	; 0xfdc <USB_Host_WaitForIOS>
    10e4:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    10e6:	09 f0       	breq	.+2      	; 0x10ea <USB_Host_SendControlRequest+0xbe>
    10e8:	86 c0       	rjmp	.+268    	; 0x11f6 <USB_Host_SendControlRequest+0x1ca>
    10ea:	80 91 f6 00 	lds	r24, 0x00F6
    10ee:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10f2:	00 97       	sbiw	r24, 0x00	; 0
    10f4:	41 f4       	brne	.+16     	; 0x1106 <USB_Host_SendControlRequest+0xda>
    10f6:	00 e0       	ldi	r16, 0x00	; 0
    10f8:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    10fa:	05 c0       	rjmp	.+10     	; 0x1106 <USB_Host_SendControlRequest+0xda>
    10fc:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
    1100:	89 93       	st	Y+, r24
    1102:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1104:	10 40       	sbci	r17, 0x00	; 0
    1106:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
    110a:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	19 f0       	breq	.+6      	; 0x1118 <USB_Host_SendControlRequest+0xec>
    1112:	01 15       	cp	r16, r1
    1114:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1116:	91 f7       	brne	.-28     	; 0x10fc <USB_Host_SendControlRequest+0xd0>
    1118:	80 91 a9 00 	lds	r24, 0x00A9
    111c:	80 64       	ori	r24, 0x40	; 64
    111e:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1122:	80 91 a6 00 	lds	r24, 0x00A6
    1126:	8e 77       	andi	r24, 0x7E	; 126
    1128:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    112c:	01 15       	cp	r16, r1
    112e:	11 05       	cpc	r17, r1
    1130:	91 f6       	brne	.-92     	; 0x10d6 <USB_Host_SendControlRequest+0xaa>
    1132:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1136:	8f 7c       	andi	r24, 0xCF	; 207
    1138:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    113a:	80 93 aa 00 	sts	0x00AA, r24
    113e:	80 91 a9 00 	lds	r24, 0x00A9
    1142:	8f 7b       	andi	r24, 0xBF	; 191
    1144:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	48 df       	rcall	.-368    	; 0xfdc <USB_Host_WaitForIOS>
    114c:	88 23       	and	r24, r24
    114e:	09 f0       	breq	.+2      	; 0x1152 <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1150:	52 c0       	rjmp	.+164    	; 0x11f6 <USB_Host_SendControlRequest+0x1ca>
    1152:	80 91 a6 00 	lds	r24, 0x00A6
    1156:	8b 77       	andi	r24, 0x7B	; 123
    1158:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    115c:	82 e0       	ldi	r24, 0x02	; 2
    115e:	3e df       	rcall	.-388    	; 0xfdc <USB_Host_WaitForIOS>
    1160:	4a c0       	rjmp	.+148    	; 0x11f6 <USB_Host_SendControlRequest+0x1ca>
    1162:	20 97       	sbiw	r28, 0x00	; 0
    1164:	a1 f1       	breq	.+104    	; 0x11ce <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1166:	80 91 aa 00 	lds	r24, 0x00AA
    116a:	8f 7c       	andi	r24, 0xCF	; 207
    116c:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    116e:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1172:	80 91 a9 00 	lds	r24, 0x00A9
    1176:	8f 7b       	andi	r24, 0xBF	; 191
    1178:	80 93 a9 00 	sts	0x00A9, r24
    117c:	1c c0       	rjmp	.+56     	; 0x11b6 <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    117e:	2e df       	rcall	.-420    	; 0xfdc <USB_Host_WaitForIOS>
    1180:	88 23       	and	r24, r24
    1182:	c9 f5       	brne	.+114    	; 0x11f6 <USB_Host_SendControlRequest+0x1ca>
    1184:	fe 01       	movw	r30, r28
    1186:	07 c0       	rjmp	.+14     	; 0x1196 <USB_Host_SendControlRequest+0x16a>
    1188:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    118a:	ef 01       	movw	r28, r30
    118c:	80 93 af 00 	sts	0x00AF, r24
    1190:	01 50       	subi	r16, 0x01	; 1
    1192:	10 40       	sbci	r17, 0x00	; 0
    1194:	59 f0       	breq	.+22     	; 0x11ac <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1196:	ef 01       	movw	r28, r30
    1198:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    119c:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    11a0:	80 91 18 01 	lds	r24, 0x0118
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    11a4:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11a6:	28 17       	cp	r18, r24
    11a8:	39 07       	cpc	r19, r25
    11aa:	70 f3       	brcs	.-36     	; 0x1188 <USB_Host_SendControlRequest+0x15c>
    11ac:	80 91 a6 00 	lds	r24, 0x00A6
    11b0:	8b 77       	andi	r24, 0x7B	; 123
    11b2:	80 93 a6 00 	sts	0x00A6, r24
    11b6:	82 e0       	ldi	r24, 0x02	; 2
    11b8:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    11ba:	11 05       	cpc	r17, r1
    11bc:	01 f7       	brne	.-64     	; 0x117e <USB_Host_SendControlRequest+0x152>
    11be:	0e df       	rcall	.-484    	; 0xfdc <USB_Host_WaitForIOS>
    11c0:	88 23       	and	r24, r24
    11c2:	c9 f4       	brne	.+50     	; 0x11f6 <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11c4:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    11c8:	80 64       	ori	r24, 0x40	; 64
    11ca:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11ce:	80 91 aa 00 	lds	r24, 0x00AA
    11d2:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11d4:	80 61       	ori	r24, 0x10	; 16
    11d6:	80 93 aa 00 	sts	0x00AA, r24
    11da:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11de:	8f 7b       	andi	r24, 0xBF	; 191
    11e0:	80 93 a9 00 	sts	0x00A9, r24
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	fa de       	rcall	.-524    	; 0xfdc <USB_Host_WaitForIOS>
    11e8:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11ea:	29 f4       	brne	.+10     	; 0x11f6 <USB_Host_SendControlRequest+0x1ca>
    11ec:	90 91 a6 00 	lds	r25, 0x00A6
    11f0:	9e 77       	andi	r25, 0x7E	; 126
    11f2:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    11f6:	90 91 a9 00 	lds	r25, 0x00A9
    11fa:	90 64       	ori	r25, 0x40	; 64
    11fc:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1200:	e1 14       	cp	r14, r1
    1202:	f1 04       	cpc	r15, r1
    1204:	29 f4       	brne	.+10     	; 0x1210 <USB_Host_SendControlRequest+0x1e4>
    1206:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    120a:	9e 7f       	andi	r25, 0xFE	; 254
    120c:	90 93 9e 00 	sts	0x009E, r25
    1210:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1212:	90 93 a8 00 	sts	0x00A8, r25
    1216:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	08 95       	ret

00001228 <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    1228:	cf 93       	push	r28
    122a:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    122c:	10 92 27 01 	sts	0x0127, r1
    1230:	89 e0       	ldi	r24, 0x09	; 9
    1232:	80 93 28 01 	sts	0x0128, r24
    1236:	c0 93 29 01 	sts	0x0129, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    123a:	10 92 2a 01 	sts	0x012A, r1
    123e:	10 92 2c 01 	sts	0x012C, r1
    1242:	10 92 2b 01 	sts	0x012B, r1
    1246:	10 92 2e 01 	sts	0x012E, r1
    124a:	10 92 2d 01 	sts	0x012D, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    124e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	ea de       	rcall	.-556    	; 0x102c <USB_Host_SendControlRequest>
    1258:	88 23       	and	r24, r24
    125a:	49 f4       	brne	.+18     	; 0x126e <USB_Host_SetDeviceConfiguration+0x46>
    125c:	c0 93 25 01 	sts	0x0125, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1260:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1262:	11 f0       	breq	.+4      	; 0x1268 <USB_Host_SetDeviceConfiguration+0x40>
    1264:	9b e0       	ldi	r25, 0x0B	; 11
    1266:	01 c0       	rjmp	.+2      	; 0x126a <USB_Host_SetDeviceConfiguration+0x42>
    1268:	9a e0       	ldi	r25, 0x0A	; 10
    126a:	90 93 2f 01 	sts	0x012F, r25
    126e:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    1270:	08 95       	ret

00001272 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1272:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1274:	c0 91 a7 00 	lds	r28, 0x00A7
    1278:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    127a:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    127e:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1282:	d0 da       	rcall	.-2656   	; 0x824 <USB_Host_ProcessNextHostState>
    1284:	c0 93 a7 00 	sts	0x00A7, r28
    1288:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    128a:	08 95       	ret

0000128c <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    128c:	90 91 c8 00 	lds	r25, 0x00C8
    1290:	95 ff       	sbrs	r25, 5
    1292:	fc cf       	rjmp	.-8      	; 0x128c <Serial_putchar>
				UDR1 = DataByte;
    1294:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	08 95       	ret

0000129e <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    129e:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    12a2:	87 ff       	sbrs	r24, 7
    12a4:	08 c0       	rjmp	.+16     	; 0x12b6 <Serial_getchar+0x18>
    12a6:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    12aa:	87 ff       	sbrs	r24, 7
    12ac:	07 c0       	rjmp	.+14     	; 0x12bc <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    12ae:	80 91 ce 00 	lds	r24, 0x00CE
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	08 95       	ret
	  return _FDEV_EOF;
    12b6:	8e ef       	ldi	r24, 0xFE	; 254
    12b8:	9f ef       	ldi	r25, 0xFF	; 255
    12ba:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    12bc:	8f ef       	ldi	r24, 0xFF	; 255
    12be:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    12c0:	08 95       	ret

000012c2 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    12c2:	fc 01       	movw	r30, r24
	if (!(Stream))
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	51 f4       	brne	.+20     	; 0x12dc <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    12c8:	e0 e3       	ldi	r30, 0x30	; 48
    12ca:	f1 e0       	ldi	r31, 0x01	; 1
    12cc:	f0 93 3f 01 	sts	0x013F, r31
    12d0:	e0 93 3e 01 	sts	0x013E, r30
		stdout = Stream;
    12d4:	f0 93 41 01 	sts	0x0141, r31
    12d8:	e0 93 40 01 	sts	0x0140, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    12dc:	8e e0       	ldi	r24, 0x0E	; 14
    12de:	df 01       	movw	r26, r30
    12e0:	1d 92       	st	X+, r1
    12e2:	8a 95       	dec	r24
    12e4:	e9 f7       	brne	.-6      	; 0x12e0 <Serial_CreateStream+0x1e>
    12e6:	83 e0       	ldi	r24, 0x03	; 3
    12e8:	83 83       	std	Z+3, r24	; 0x03
    12ea:	86 e4       	ldi	r24, 0x46	; 70
    12ec:	99 e0       	ldi	r25, 0x09	; 9
    12ee:	91 87       	std	Z+9, r25	; 0x09
    12f0:	80 87       	std	Z+8, r24	; 0x08
    12f2:	8f e4       	ldi	r24, 0x4F	; 79
    12f4:	99 e0       	ldi	r25, 0x09	; 9
    12f6:	93 87       	std	Z+11, r25	; 0x0b
    12f8:	82 87       	std	Z+10, r24	; 0x0a
}
    12fa:	08 95       	ret

000012fc <printf_P>:
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	fe 01       	movw	r30, r28
    1306:	35 96       	adiw	r30, 0x05	; 5
    1308:	61 91       	ld	r22, Z+
    130a:	71 91       	ld	r23, Z+
    130c:	80 91 40 01 	lds	r24, 0x0140
    1310:	90 91 41 01 	lds	r25, 0x0141
    1314:	dc 01       	movw	r26, r24
    1316:	13 96       	adiw	r26, 0x03	; 3
    1318:	2c 91       	ld	r18, X
    131a:	13 97       	sbiw	r26, 0x03	; 3
    131c:	28 60       	ori	r18, 0x08	; 8
    131e:	13 96       	adiw	r26, 0x03	; 3
    1320:	2c 93       	st	X, r18
    1322:	af 01       	movw	r20, r30
    1324:	39 d0       	rcall	.+114    	; 0x1398 <vfprintf>
    1326:	e0 91 40 01 	lds	r30, 0x0140
    132a:	f0 91 41 01 	lds	r31, 0x0141
    132e:	23 81       	ldd	r18, Z+3	; 0x03
    1330:	27 7f       	andi	r18, 0xF7	; 247
    1332:	23 83       	std	Z+3, r18	; 0x03
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	08 95       	ret

0000133a <puts_P>:
    133a:	0f 93       	push	r16
    133c:	1f 93       	push	r17
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
    1342:	8c 01       	movw	r16, r24
    1344:	e0 91 40 01 	lds	r30, 0x0140
    1348:	f0 91 41 01 	lds	r31, 0x0141
    134c:	83 81       	ldd	r24, Z+3	; 0x03
    134e:	81 ff       	sbrs	r24, 1
    1350:	1b c0       	rjmp	.+54     	; 0x1388 <puts_P+0x4e>
    1352:	c0 e0       	ldi	r28, 0x00	; 0
    1354:	d0 e0       	ldi	r29, 0x00	; 0
    1356:	07 c0       	rjmp	.+14     	; 0x1366 <puts_P+0x2c>
    1358:	09 95       	icall
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	11 f0       	breq	.+4      	; 0x1362 <puts_P+0x28>
    135e:	cf ef       	ldi	r28, 0xFF	; 255
    1360:	df ef       	ldi	r29, 0xFF	; 255
    1362:	0f 5f       	subi	r16, 0xFF	; 255
    1364:	1f 4f       	sbci	r17, 0xFF	; 255
    1366:	f8 01       	movw	r30, r16
    1368:	84 91       	lpm	r24, Z
    136a:	60 91 40 01 	lds	r22, 0x0140
    136e:	70 91 41 01 	lds	r23, 0x0141
    1372:	db 01       	movw	r26, r22
    1374:	18 96       	adiw	r26, 0x08	; 8
    1376:	ed 91       	ld	r30, X+
    1378:	fc 91       	ld	r31, X
    137a:	19 97       	sbiw	r26, 0x09	; 9
    137c:	88 23       	and	r24, r24
    137e:	61 f7       	brne	.-40     	; 0x1358 <puts_P+0x1e>
    1380:	8a e0       	ldi	r24, 0x0A	; 10
    1382:	09 95       	icall
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	11 f0       	breq	.+4      	; 0x138c <puts_P+0x52>
    1388:	cf ef       	ldi	r28, 0xFF	; 255
    138a:	df ef       	ldi	r29, 0xFF	; 255
    138c:	ce 01       	movw	r24, r28
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	08 95       	ret

00001398 <vfprintf>:
    1398:	2f 92       	push	r2
    139a:	3f 92       	push	r3
    139c:	4f 92       	push	r4
    139e:	5f 92       	push	r5
    13a0:	6f 92       	push	r6
    13a2:	7f 92       	push	r7
    13a4:	8f 92       	push	r8
    13a6:	9f 92       	push	r9
    13a8:	af 92       	push	r10
    13aa:	bf 92       	push	r11
    13ac:	cf 92       	push	r12
    13ae:	df 92       	push	r13
    13b0:	ef 92       	push	r14
    13b2:	ff 92       	push	r15
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	2d 97       	sbiw	r28, 0x0d	; 13
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	3c 01       	movw	r6, r24
    13ce:	7d 87       	std	Y+13, r23	; 0x0d
    13d0:	6c 87       	std	Y+12, r22	; 0x0c
    13d2:	5a 01       	movw	r10, r20
    13d4:	fc 01       	movw	r30, r24
    13d6:	17 82       	std	Z+7, r1	; 0x07
    13d8:	16 82       	std	Z+6, r1	; 0x06
    13da:	83 81       	ldd	r24, Z+3	; 0x03
    13dc:	81 ff       	sbrs	r24, 1
    13de:	bb c1       	rjmp	.+886    	; 0x1756 <vfprintf+0x3be>
    13e0:	2e 01       	movw	r4, r28
    13e2:	08 94       	sec
    13e4:	41 1c       	adc	r4, r1
    13e6:	51 1c       	adc	r5, r1
    13e8:	f3 01       	movw	r30, r6
    13ea:	93 81       	ldd	r25, Z+3	; 0x03
    13ec:	ec 85       	ldd	r30, Y+12	; 0x0c
    13ee:	fd 85       	ldd	r31, Y+13	; 0x0d
    13f0:	93 fd       	sbrc	r25, 3
    13f2:	85 91       	lpm	r24, Z+
    13f4:	93 ff       	sbrs	r25, 3
    13f6:	81 91       	ld	r24, Z+
    13f8:	fd 87       	std	Y+13, r31	; 0x0d
    13fa:	ec 87       	std	Y+12, r30	; 0x0c
    13fc:	88 23       	and	r24, r24
    13fe:	09 f4       	brne	.+2      	; 0x1402 <vfprintf+0x6a>
    1400:	a6 c1       	rjmp	.+844    	; 0x174e <vfprintf+0x3b6>
    1402:	85 32       	cpi	r24, 0x25	; 37
    1404:	41 f4       	brne	.+16     	; 0x1416 <vfprintf+0x7e>
    1406:	93 fd       	sbrc	r25, 3
    1408:	85 91       	lpm	r24, Z+
    140a:	93 ff       	sbrs	r25, 3
    140c:	81 91       	ld	r24, Z+
    140e:	fd 87       	std	Y+13, r31	; 0x0d
    1410:	ec 87       	std	Y+12, r30	; 0x0c
    1412:	85 32       	cpi	r24, 0x25	; 37
    1414:	21 f4       	brne	.+8      	; 0x141e <vfprintf+0x86>
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	b3 01       	movw	r22, r6
    141a:	ce d1       	rcall	.+924    	; 0x17b8 <fputc>
    141c:	e5 cf       	rjmp	.-54     	; 0x13e8 <vfprintf+0x50>
    141e:	ff 24       	eor	r15, r15
    1420:	ee 24       	eor	r14, r14
    1422:	10 e0       	ldi	r17, 0x00	; 0
    1424:	10 32       	cpi	r17, 0x20	; 32
    1426:	b0 f4       	brcc	.+44     	; 0x1454 <vfprintf+0xbc>
    1428:	8b 32       	cpi	r24, 0x2B	; 43
    142a:	69 f0       	breq	.+26     	; 0x1446 <vfprintf+0xae>
    142c:	8c 32       	cpi	r24, 0x2C	; 44
    142e:	28 f4       	brcc	.+10     	; 0x143a <vfprintf+0xa2>
    1430:	80 32       	cpi	r24, 0x20	; 32
    1432:	51 f0       	breq	.+20     	; 0x1448 <vfprintf+0xb0>
    1434:	83 32       	cpi	r24, 0x23	; 35
    1436:	71 f4       	brne	.+28     	; 0x1454 <vfprintf+0xbc>
    1438:	0b c0       	rjmp	.+22     	; 0x1450 <vfprintf+0xb8>
    143a:	8d 32       	cpi	r24, 0x2D	; 45
    143c:	39 f0       	breq	.+14     	; 0x144c <vfprintf+0xb4>
    143e:	80 33       	cpi	r24, 0x30	; 48
    1440:	49 f4       	brne	.+18     	; 0x1454 <vfprintf+0xbc>
    1442:	11 60       	ori	r17, 0x01	; 1
    1444:	2c c0       	rjmp	.+88     	; 0x149e <vfprintf+0x106>
    1446:	12 60       	ori	r17, 0x02	; 2
    1448:	14 60       	ori	r17, 0x04	; 4
    144a:	29 c0       	rjmp	.+82     	; 0x149e <vfprintf+0x106>
    144c:	18 60       	ori	r17, 0x08	; 8
    144e:	27 c0       	rjmp	.+78     	; 0x149e <vfprintf+0x106>
    1450:	10 61       	ori	r17, 0x10	; 16
    1452:	25 c0       	rjmp	.+74     	; 0x149e <vfprintf+0x106>
    1454:	17 fd       	sbrc	r17, 7
    1456:	2e c0       	rjmp	.+92     	; 0x14b4 <vfprintf+0x11c>
    1458:	28 2f       	mov	r18, r24
    145a:	20 53       	subi	r18, 0x30	; 48
    145c:	2a 30       	cpi	r18, 0x0A	; 10
    145e:	98 f4       	brcc	.+38     	; 0x1486 <vfprintf+0xee>
    1460:	16 ff       	sbrs	r17, 6
    1462:	08 c0       	rjmp	.+16     	; 0x1474 <vfprintf+0xdc>
    1464:	8f 2d       	mov	r24, r15
    1466:	88 0f       	add	r24, r24
    1468:	f8 2e       	mov	r15, r24
    146a:	ff 0c       	add	r15, r15
    146c:	ff 0c       	add	r15, r15
    146e:	f8 0e       	add	r15, r24
    1470:	f2 0e       	add	r15, r18
    1472:	15 c0       	rjmp	.+42     	; 0x149e <vfprintf+0x106>
    1474:	8e 2d       	mov	r24, r14
    1476:	88 0f       	add	r24, r24
    1478:	e8 2e       	mov	r14, r24
    147a:	ee 0c       	add	r14, r14
    147c:	ee 0c       	add	r14, r14
    147e:	e8 0e       	add	r14, r24
    1480:	e2 0e       	add	r14, r18
    1482:	10 62       	ori	r17, 0x20	; 32
    1484:	0c c0       	rjmp	.+24     	; 0x149e <vfprintf+0x106>
    1486:	8e 32       	cpi	r24, 0x2E	; 46
    1488:	21 f4       	brne	.+8      	; 0x1492 <vfprintf+0xfa>
    148a:	16 fd       	sbrc	r17, 6
    148c:	60 c1       	rjmp	.+704    	; 0x174e <vfprintf+0x3b6>
    148e:	10 64       	ori	r17, 0x40	; 64
    1490:	06 c0       	rjmp	.+12     	; 0x149e <vfprintf+0x106>
    1492:	8c 36       	cpi	r24, 0x6C	; 108
    1494:	11 f4       	brne	.+4      	; 0x149a <vfprintf+0x102>
    1496:	10 68       	ori	r17, 0x80	; 128
    1498:	02 c0       	rjmp	.+4      	; 0x149e <vfprintf+0x106>
    149a:	88 36       	cpi	r24, 0x68	; 104
    149c:	59 f4       	brne	.+22     	; 0x14b4 <vfprintf+0x11c>
    149e:	ec 85       	ldd	r30, Y+12	; 0x0c
    14a0:	fd 85       	ldd	r31, Y+13	; 0x0d
    14a2:	93 fd       	sbrc	r25, 3
    14a4:	85 91       	lpm	r24, Z+
    14a6:	93 ff       	sbrs	r25, 3
    14a8:	81 91       	ld	r24, Z+
    14aa:	fd 87       	std	Y+13, r31	; 0x0d
    14ac:	ec 87       	std	Y+12, r30	; 0x0c
    14ae:	88 23       	and	r24, r24
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <vfprintf+0x11c>
    14b2:	b8 cf       	rjmp	.-144    	; 0x1424 <vfprintf+0x8c>
    14b4:	98 2f       	mov	r25, r24
    14b6:	95 54       	subi	r25, 0x45	; 69
    14b8:	93 30       	cpi	r25, 0x03	; 3
    14ba:	18 f0       	brcs	.+6      	; 0x14c2 <vfprintf+0x12a>
    14bc:	90 52       	subi	r25, 0x20	; 32
    14be:	93 30       	cpi	r25, 0x03	; 3
    14c0:	38 f4       	brcc	.+14     	; 0x14d0 <vfprintf+0x138>
    14c2:	24 e0       	ldi	r18, 0x04	; 4
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	a2 0e       	add	r10, r18
    14c8:	b3 1e       	adc	r11, r19
    14ca:	3f e3       	ldi	r19, 0x3F	; 63
    14cc:	39 83       	std	Y+1, r19	; 0x01
    14ce:	0f c0       	rjmp	.+30     	; 0x14ee <vfprintf+0x156>
    14d0:	83 36       	cpi	r24, 0x63	; 99
    14d2:	31 f0       	breq	.+12     	; 0x14e0 <vfprintf+0x148>
    14d4:	83 37       	cpi	r24, 0x73	; 115
    14d6:	81 f0       	breq	.+32     	; 0x14f8 <vfprintf+0x160>
    14d8:	83 35       	cpi	r24, 0x53	; 83
    14da:	09 f0       	breq	.+2      	; 0x14de <vfprintf+0x146>
    14dc:	56 c0       	rjmp	.+172    	; 0x158a <vfprintf+0x1f2>
    14de:	21 c0       	rjmp	.+66     	; 0x1522 <vfprintf+0x18a>
    14e0:	f5 01       	movw	r30, r10
    14e2:	80 81       	ld	r24, Z
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	22 e0       	ldi	r18, 0x02	; 2
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	a2 0e       	add	r10, r18
    14ec:	b3 1e       	adc	r11, r19
    14ee:	21 e0       	ldi	r18, 0x01	; 1
    14f0:	c2 2e       	mov	r12, r18
    14f2:	d1 2c       	mov	r13, r1
    14f4:	42 01       	movw	r8, r4
    14f6:	13 c0       	rjmp	.+38     	; 0x151e <vfprintf+0x186>
    14f8:	92 e0       	ldi	r25, 0x02	; 2
    14fa:	29 2e       	mov	r2, r25
    14fc:	31 2c       	mov	r3, r1
    14fe:	2a 0c       	add	r2, r10
    1500:	3b 1c       	adc	r3, r11
    1502:	f5 01       	movw	r30, r10
    1504:	80 80       	ld	r8, Z
    1506:	91 80       	ldd	r9, Z+1	; 0x01
    1508:	16 ff       	sbrs	r17, 6
    150a:	03 c0       	rjmp	.+6      	; 0x1512 <vfprintf+0x17a>
    150c:	6f 2d       	mov	r22, r15
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <vfprintf+0x17e>
    1512:	6f ef       	ldi	r22, 0xFF	; 255
    1514:	7f ef       	ldi	r23, 0xFF	; 255
    1516:	c4 01       	movw	r24, r8
    1518:	44 d1       	rcall	.+648    	; 0x17a2 <strnlen>
    151a:	6c 01       	movw	r12, r24
    151c:	51 01       	movw	r10, r2
    151e:	1f 77       	andi	r17, 0x7F	; 127
    1520:	14 c0       	rjmp	.+40     	; 0x154a <vfprintf+0x1b2>
    1522:	82 e0       	ldi	r24, 0x02	; 2
    1524:	28 2e       	mov	r2, r24
    1526:	31 2c       	mov	r3, r1
    1528:	2a 0c       	add	r2, r10
    152a:	3b 1c       	adc	r3, r11
    152c:	f5 01       	movw	r30, r10
    152e:	80 80       	ld	r8, Z
    1530:	91 80       	ldd	r9, Z+1	; 0x01
    1532:	16 ff       	sbrs	r17, 6
    1534:	03 c0       	rjmp	.+6      	; 0x153c <vfprintf+0x1a4>
    1536:	6f 2d       	mov	r22, r15
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <vfprintf+0x1a8>
    153c:	6f ef       	ldi	r22, 0xFF	; 255
    153e:	7f ef       	ldi	r23, 0xFF	; 255
    1540:	c4 01       	movw	r24, r8
    1542:	24 d1       	rcall	.+584    	; 0x178c <strnlen_P>
    1544:	6c 01       	movw	r12, r24
    1546:	10 68       	ori	r17, 0x80	; 128
    1548:	51 01       	movw	r10, r2
    154a:	13 fd       	sbrc	r17, 3
    154c:	1a c0       	rjmp	.+52     	; 0x1582 <vfprintf+0x1ea>
    154e:	05 c0       	rjmp	.+10     	; 0x155a <vfprintf+0x1c2>
    1550:	80 e2       	ldi	r24, 0x20	; 32
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	b3 01       	movw	r22, r6
    1556:	30 d1       	rcall	.+608    	; 0x17b8 <fputc>
    1558:	ea 94       	dec	r14
    155a:	8e 2d       	mov	r24, r14
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	c8 16       	cp	r12, r24
    1560:	d9 06       	cpc	r13, r25
    1562:	b0 f3       	brcs	.-20     	; 0x1550 <vfprintf+0x1b8>
    1564:	0e c0       	rjmp	.+28     	; 0x1582 <vfprintf+0x1ea>
    1566:	f4 01       	movw	r30, r8
    1568:	17 fd       	sbrc	r17, 7
    156a:	85 91       	lpm	r24, Z+
    156c:	17 ff       	sbrs	r17, 7
    156e:	81 91       	ld	r24, Z+
    1570:	4f 01       	movw	r8, r30
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	b3 01       	movw	r22, r6
    1576:	20 d1       	rcall	.+576    	; 0x17b8 <fputc>
    1578:	e1 10       	cpse	r14, r1
    157a:	ea 94       	dec	r14
    157c:	08 94       	sec
    157e:	c1 08       	sbc	r12, r1
    1580:	d1 08       	sbc	r13, r1
    1582:	c1 14       	cp	r12, r1
    1584:	d1 04       	cpc	r13, r1
    1586:	79 f7       	brne	.-34     	; 0x1566 <vfprintf+0x1ce>
    1588:	df c0       	rjmp	.+446    	; 0x1748 <vfprintf+0x3b0>
    158a:	84 36       	cpi	r24, 0x64	; 100
    158c:	11 f0       	breq	.+4      	; 0x1592 <vfprintf+0x1fa>
    158e:	89 36       	cpi	r24, 0x69	; 105
    1590:	49 f5       	brne	.+82     	; 0x15e4 <vfprintf+0x24c>
    1592:	f5 01       	movw	r30, r10
    1594:	17 ff       	sbrs	r17, 7
    1596:	07 c0       	rjmp	.+14     	; 0x15a6 <vfprintf+0x20e>
    1598:	80 81       	ld	r24, Z
    159a:	91 81       	ldd	r25, Z+1	; 0x01
    159c:	a2 81       	ldd	r26, Z+2	; 0x02
    159e:	b3 81       	ldd	r27, Z+3	; 0x03
    15a0:	24 e0       	ldi	r18, 0x04	; 4
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	08 c0       	rjmp	.+16     	; 0x15b6 <vfprintf+0x21e>
    15a6:	80 81       	ld	r24, Z
    15a8:	91 81       	ldd	r25, Z+1	; 0x01
    15aa:	aa 27       	eor	r26, r26
    15ac:	97 fd       	sbrc	r25, 7
    15ae:	a0 95       	com	r26
    15b0:	ba 2f       	mov	r27, r26
    15b2:	22 e0       	ldi	r18, 0x02	; 2
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	a2 0e       	add	r10, r18
    15b8:	b3 1e       	adc	r11, r19
    15ba:	01 2f       	mov	r16, r17
    15bc:	0f 76       	andi	r16, 0x6F	; 111
    15be:	b7 ff       	sbrs	r27, 7
    15c0:	08 c0       	rjmp	.+16     	; 0x15d2 <vfprintf+0x23a>
    15c2:	b0 95       	com	r27
    15c4:	a0 95       	com	r26
    15c6:	90 95       	com	r25
    15c8:	81 95       	neg	r24
    15ca:	9f 4f       	sbci	r25, 0xFF	; 255
    15cc:	af 4f       	sbci	r26, 0xFF	; 255
    15ce:	bf 4f       	sbci	r27, 0xFF	; 255
    15d0:	00 68       	ori	r16, 0x80	; 128
    15d2:	bc 01       	movw	r22, r24
    15d4:	cd 01       	movw	r24, r26
    15d6:	a2 01       	movw	r20, r4
    15d8:	2a e0       	ldi	r18, 0x0A	; 10
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	19 d1       	rcall	.+562    	; 0x1810 <__ultoa_invert>
    15de:	d8 2e       	mov	r13, r24
    15e0:	d4 18       	sub	r13, r4
    15e2:	3e c0       	rjmp	.+124    	; 0x1660 <vfprintf+0x2c8>
    15e4:	85 37       	cpi	r24, 0x75	; 117
    15e6:	21 f4       	brne	.+8      	; 0x15f0 <vfprintf+0x258>
    15e8:	1f 7e       	andi	r17, 0xEF	; 239
    15ea:	2a e0       	ldi	r18, 0x0A	; 10
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	20 c0       	rjmp	.+64     	; 0x1630 <vfprintf+0x298>
    15f0:	19 7f       	andi	r17, 0xF9	; 249
    15f2:	8f 36       	cpi	r24, 0x6F	; 111
    15f4:	a9 f0       	breq	.+42     	; 0x1620 <vfprintf+0x288>
    15f6:	80 37       	cpi	r24, 0x70	; 112
    15f8:	20 f4       	brcc	.+8      	; 0x1602 <vfprintf+0x26a>
    15fa:	88 35       	cpi	r24, 0x58	; 88
    15fc:	09 f0       	breq	.+2      	; 0x1600 <vfprintf+0x268>
    15fe:	a7 c0       	rjmp	.+334    	; 0x174e <vfprintf+0x3b6>
    1600:	0b c0       	rjmp	.+22     	; 0x1618 <vfprintf+0x280>
    1602:	80 37       	cpi	r24, 0x70	; 112
    1604:	21 f0       	breq	.+8      	; 0x160e <vfprintf+0x276>
    1606:	88 37       	cpi	r24, 0x78	; 120
    1608:	09 f0       	breq	.+2      	; 0x160c <vfprintf+0x274>
    160a:	a1 c0       	rjmp	.+322    	; 0x174e <vfprintf+0x3b6>
    160c:	01 c0       	rjmp	.+2      	; 0x1610 <vfprintf+0x278>
    160e:	10 61       	ori	r17, 0x10	; 16
    1610:	14 ff       	sbrs	r17, 4
    1612:	09 c0       	rjmp	.+18     	; 0x1626 <vfprintf+0x28e>
    1614:	14 60       	ori	r17, 0x04	; 4
    1616:	07 c0       	rjmp	.+14     	; 0x1626 <vfprintf+0x28e>
    1618:	14 ff       	sbrs	r17, 4
    161a:	08 c0       	rjmp	.+16     	; 0x162c <vfprintf+0x294>
    161c:	16 60       	ori	r17, 0x06	; 6
    161e:	06 c0       	rjmp	.+12     	; 0x162c <vfprintf+0x294>
    1620:	28 e0       	ldi	r18, 0x08	; 8
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	05 c0       	rjmp	.+10     	; 0x1630 <vfprintf+0x298>
    1626:	20 e1       	ldi	r18, 0x10	; 16
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <vfprintf+0x298>
    162c:	20 e1       	ldi	r18, 0x10	; 16
    162e:	32 e0       	ldi	r19, 0x02	; 2
    1630:	f5 01       	movw	r30, r10
    1632:	17 ff       	sbrs	r17, 7
    1634:	07 c0       	rjmp	.+14     	; 0x1644 <vfprintf+0x2ac>
    1636:	60 81       	ld	r22, Z
    1638:	71 81       	ldd	r23, Z+1	; 0x01
    163a:	82 81       	ldd	r24, Z+2	; 0x02
    163c:	93 81       	ldd	r25, Z+3	; 0x03
    163e:	44 e0       	ldi	r20, 0x04	; 4
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	06 c0       	rjmp	.+12     	; 0x1650 <vfprintf+0x2b8>
    1644:	60 81       	ld	r22, Z
    1646:	71 81       	ldd	r23, Z+1	; 0x01
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	42 e0       	ldi	r20, 0x02	; 2
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	a4 0e       	add	r10, r20
    1652:	b5 1e       	adc	r11, r21
    1654:	a2 01       	movw	r20, r4
    1656:	dc d0       	rcall	.+440    	; 0x1810 <__ultoa_invert>
    1658:	d8 2e       	mov	r13, r24
    165a:	d4 18       	sub	r13, r4
    165c:	01 2f       	mov	r16, r17
    165e:	0f 77       	andi	r16, 0x7F	; 127
    1660:	06 ff       	sbrs	r16, 6
    1662:	09 c0       	rjmp	.+18     	; 0x1676 <vfprintf+0x2de>
    1664:	0e 7f       	andi	r16, 0xFE	; 254
    1666:	df 14       	cp	r13, r15
    1668:	30 f4       	brcc	.+12     	; 0x1676 <vfprintf+0x2de>
    166a:	04 ff       	sbrs	r16, 4
    166c:	06 c0       	rjmp	.+12     	; 0x167a <vfprintf+0x2e2>
    166e:	02 fd       	sbrc	r16, 2
    1670:	04 c0       	rjmp	.+8      	; 0x167a <vfprintf+0x2e2>
    1672:	0f 7e       	andi	r16, 0xEF	; 239
    1674:	02 c0       	rjmp	.+4      	; 0x167a <vfprintf+0x2e2>
    1676:	1d 2d       	mov	r17, r13
    1678:	01 c0       	rjmp	.+2      	; 0x167c <vfprintf+0x2e4>
    167a:	1f 2d       	mov	r17, r15
    167c:	80 2f       	mov	r24, r16
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	04 ff       	sbrs	r16, 4
    1682:	0c c0       	rjmp	.+24     	; 0x169c <vfprintf+0x304>
    1684:	fe 01       	movw	r30, r28
    1686:	ed 0d       	add	r30, r13
    1688:	f1 1d       	adc	r31, r1
    168a:	20 81       	ld	r18, Z
    168c:	20 33       	cpi	r18, 0x30	; 48
    168e:	11 f4       	brne	.+4      	; 0x1694 <vfprintf+0x2fc>
    1690:	09 7e       	andi	r16, 0xE9	; 233
    1692:	09 c0       	rjmp	.+18     	; 0x16a6 <vfprintf+0x30e>
    1694:	02 ff       	sbrs	r16, 2
    1696:	06 c0       	rjmp	.+12     	; 0x16a4 <vfprintf+0x30c>
    1698:	1e 5f       	subi	r17, 0xFE	; 254
    169a:	05 c0       	rjmp	.+10     	; 0x16a6 <vfprintf+0x30e>
    169c:	86 78       	andi	r24, 0x86	; 134
    169e:	90 70       	andi	r25, 0x00	; 0
    16a0:	00 97       	sbiw	r24, 0x00	; 0
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <vfprintf+0x30e>
    16a4:	1f 5f       	subi	r17, 0xFF	; 255
    16a6:	80 2e       	mov	r8, r16
    16a8:	99 24       	eor	r9, r9
    16aa:	03 fd       	sbrc	r16, 3
    16ac:	11 c0       	rjmp	.+34     	; 0x16d0 <vfprintf+0x338>
    16ae:	00 ff       	sbrs	r16, 0
    16b0:	0c c0       	rjmp	.+24     	; 0x16ca <vfprintf+0x332>
    16b2:	fd 2c       	mov	r15, r13
    16b4:	1e 15       	cp	r17, r14
    16b6:	48 f4       	brcc	.+18     	; 0x16ca <vfprintf+0x332>
    16b8:	fe 0c       	add	r15, r14
    16ba:	f1 1a       	sub	r15, r17
    16bc:	1e 2d       	mov	r17, r14
    16be:	05 c0       	rjmp	.+10     	; 0x16ca <vfprintf+0x332>
    16c0:	80 e2       	ldi	r24, 0x20	; 32
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	b3 01       	movw	r22, r6
    16c6:	78 d0       	rcall	.+240    	; 0x17b8 <fputc>
    16c8:	1f 5f       	subi	r17, 0xFF	; 255
    16ca:	1e 15       	cp	r17, r14
    16cc:	c8 f3       	brcs	.-14     	; 0x16c0 <vfprintf+0x328>
    16ce:	04 c0       	rjmp	.+8      	; 0x16d8 <vfprintf+0x340>
    16d0:	1e 15       	cp	r17, r14
    16d2:	10 f4       	brcc	.+4      	; 0x16d8 <vfprintf+0x340>
    16d4:	e1 1a       	sub	r14, r17
    16d6:	01 c0       	rjmp	.+2      	; 0x16da <vfprintf+0x342>
    16d8:	ee 24       	eor	r14, r14
    16da:	84 fe       	sbrs	r8, 4
    16dc:	0e c0       	rjmp	.+28     	; 0x16fa <vfprintf+0x362>
    16de:	80 e3       	ldi	r24, 0x30	; 48
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	b3 01       	movw	r22, r6
    16e4:	69 d0       	rcall	.+210    	; 0x17b8 <fputc>
    16e6:	82 fe       	sbrs	r8, 2
    16e8:	1d c0       	rjmp	.+58     	; 0x1724 <vfprintf+0x38c>
    16ea:	81 fe       	sbrs	r8, 1
    16ec:	03 c0       	rjmp	.+6      	; 0x16f4 <vfprintf+0x35c>
    16ee:	88 e5       	ldi	r24, 0x58	; 88
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	10 c0       	rjmp	.+32     	; 0x1714 <vfprintf+0x37c>
    16f4:	88 e7       	ldi	r24, 0x78	; 120
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	0d c0       	rjmp	.+26     	; 0x1714 <vfprintf+0x37c>
    16fa:	c4 01       	movw	r24, r8
    16fc:	86 78       	andi	r24, 0x86	; 134
    16fe:	90 70       	andi	r25, 0x00	; 0
    1700:	00 97       	sbiw	r24, 0x00	; 0
    1702:	81 f0       	breq	.+32     	; 0x1724 <vfprintf+0x38c>
    1704:	81 fc       	sbrc	r8, 1
    1706:	02 c0       	rjmp	.+4      	; 0x170c <vfprintf+0x374>
    1708:	80 e2       	ldi	r24, 0x20	; 32
    170a:	01 c0       	rjmp	.+2      	; 0x170e <vfprintf+0x376>
    170c:	8b e2       	ldi	r24, 0x2B	; 43
    170e:	07 fd       	sbrc	r16, 7
    1710:	8d e2       	ldi	r24, 0x2D	; 45
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	b3 01       	movw	r22, r6
    1716:	50 d0       	rcall	.+160    	; 0x17b8 <fputc>
    1718:	05 c0       	rjmp	.+10     	; 0x1724 <vfprintf+0x38c>
    171a:	80 e3       	ldi	r24, 0x30	; 48
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	b3 01       	movw	r22, r6
    1720:	4b d0       	rcall	.+150    	; 0x17b8 <fputc>
    1722:	fa 94       	dec	r15
    1724:	df 14       	cp	r13, r15
    1726:	c8 f3       	brcs	.-14     	; 0x171a <vfprintf+0x382>
    1728:	da 94       	dec	r13
    172a:	f2 01       	movw	r30, r4
    172c:	ed 0d       	add	r30, r13
    172e:	f1 1d       	adc	r31, r1
    1730:	80 81       	ld	r24, Z
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	b3 01       	movw	r22, r6
    1736:	40 d0       	rcall	.+128    	; 0x17b8 <fputc>
    1738:	dd 20       	and	r13, r13
    173a:	b1 f7       	brne	.-20     	; 0x1728 <vfprintf+0x390>
    173c:	05 c0       	rjmp	.+10     	; 0x1748 <vfprintf+0x3b0>
    173e:	80 e2       	ldi	r24, 0x20	; 32
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	b3 01       	movw	r22, r6
    1744:	39 d0       	rcall	.+114    	; 0x17b8 <fputc>
    1746:	ea 94       	dec	r14
    1748:	ee 20       	and	r14, r14
    174a:	c9 f7       	brne	.-14     	; 0x173e <vfprintf+0x3a6>
    174c:	4d ce       	rjmp	.-870    	; 0x13e8 <vfprintf+0x50>
    174e:	f3 01       	movw	r30, r6
    1750:	86 81       	ldd	r24, Z+6	; 0x06
    1752:	97 81       	ldd	r25, Z+7	; 0x07
    1754:	02 c0       	rjmp	.+4      	; 0x175a <vfprintf+0x3c2>
    1756:	8f ef       	ldi	r24, 0xFF	; 255
    1758:	9f ef       	ldi	r25, 0xFF	; 255
    175a:	2d 96       	adiw	r28, 0x0d	; 13
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	1f 91       	pop	r17
    176c:	0f 91       	pop	r16
    176e:	ff 90       	pop	r15
    1770:	ef 90       	pop	r14
    1772:	df 90       	pop	r13
    1774:	cf 90       	pop	r12
    1776:	bf 90       	pop	r11
    1778:	af 90       	pop	r10
    177a:	9f 90       	pop	r9
    177c:	8f 90       	pop	r8
    177e:	7f 90       	pop	r7
    1780:	6f 90       	pop	r6
    1782:	5f 90       	pop	r5
    1784:	4f 90       	pop	r4
    1786:	3f 90       	pop	r3
    1788:	2f 90       	pop	r2
    178a:	08 95       	ret

0000178c <strnlen_P>:
    178c:	fc 01       	movw	r30, r24
    178e:	05 90       	lpm	r0, Z+
    1790:	61 50       	subi	r22, 0x01	; 1
    1792:	70 40       	sbci	r23, 0x00	; 0
    1794:	01 10       	cpse	r0, r1
    1796:	d8 f7       	brcc	.-10     	; 0x178e <strnlen_P+0x2>
    1798:	80 95       	com	r24
    179a:	90 95       	com	r25
    179c:	8e 0f       	add	r24, r30
    179e:	9f 1f       	adc	r25, r31
    17a0:	08 95       	ret

000017a2 <strnlen>:
    17a2:	fc 01       	movw	r30, r24
    17a4:	61 50       	subi	r22, 0x01	; 1
    17a6:	70 40       	sbci	r23, 0x00	; 0
    17a8:	01 90       	ld	r0, Z+
    17aa:	01 10       	cpse	r0, r1
    17ac:	d8 f7       	brcc	.-10     	; 0x17a4 <strnlen+0x2>
    17ae:	80 95       	com	r24
    17b0:	90 95       	com	r25
    17b2:	8e 0f       	add	r24, r30
    17b4:	9f 1f       	adc	r25, r31
    17b6:	08 95       	ret

000017b8 <fputc>:
    17b8:	0f 93       	push	r16
    17ba:	1f 93       	push	r17
    17bc:	cf 93       	push	r28
    17be:	df 93       	push	r29
    17c0:	8c 01       	movw	r16, r24
    17c2:	eb 01       	movw	r28, r22
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	81 ff       	sbrs	r24, 1
    17c8:	1b c0       	rjmp	.+54     	; 0x1800 <fputc+0x48>
    17ca:	82 ff       	sbrs	r24, 2
    17cc:	0d c0       	rjmp	.+26     	; 0x17e8 <fputc+0x30>
    17ce:	2e 81       	ldd	r18, Y+6	; 0x06
    17d0:	3f 81       	ldd	r19, Y+7	; 0x07
    17d2:	8c 81       	ldd	r24, Y+4	; 0x04
    17d4:	9d 81       	ldd	r25, Y+5	; 0x05
    17d6:	28 17       	cp	r18, r24
    17d8:	39 07       	cpc	r19, r25
    17da:	64 f4       	brge	.+24     	; 0x17f4 <fputc+0x3c>
    17dc:	e8 81       	ld	r30, Y
    17de:	f9 81       	ldd	r31, Y+1	; 0x01
    17e0:	01 93       	st	Z+, r16
    17e2:	f9 83       	std	Y+1, r31	; 0x01
    17e4:	e8 83       	st	Y, r30
    17e6:	06 c0       	rjmp	.+12     	; 0x17f4 <fputc+0x3c>
    17e8:	e8 85       	ldd	r30, Y+8	; 0x08
    17ea:	f9 85       	ldd	r31, Y+9	; 0x09
    17ec:	80 2f       	mov	r24, r16
    17ee:	09 95       	icall
    17f0:	00 97       	sbiw	r24, 0x00	; 0
    17f2:	31 f4       	brne	.+12     	; 0x1800 <fputc+0x48>
    17f4:	8e 81       	ldd	r24, Y+6	; 0x06
    17f6:	9f 81       	ldd	r25, Y+7	; 0x07
    17f8:	01 96       	adiw	r24, 0x01	; 1
    17fa:	9f 83       	std	Y+7, r25	; 0x07
    17fc:	8e 83       	std	Y+6, r24	; 0x06
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <fputc+0x4c>
    1800:	0f ef       	ldi	r16, 0xFF	; 255
    1802:	1f ef       	ldi	r17, 0xFF	; 255
    1804:	c8 01       	movw	r24, r16
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	1f 91       	pop	r17
    180c:	0f 91       	pop	r16
    180e:	08 95       	ret

00001810 <__ultoa_invert>:
    1810:	fa 01       	movw	r30, r20
    1812:	aa 27       	eor	r26, r26
    1814:	28 30       	cpi	r18, 0x08	; 8
    1816:	51 f1       	breq	.+84     	; 0x186c <__ultoa_invert+0x5c>
    1818:	20 31       	cpi	r18, 0x10	; 16
    181a:	81 f1       	breq	.+96     	; 0x187c <__ultoa_invert+0x6c>
    181c:	e8 94       	clt
    181e:	6f 93       	push	r22
    1820:	6e 7f       	andi	r22, 0xFE	; 254
    1822:	6e 5f       	subi	r22, 0xFE	; 254
    1824:	7f 4f       	sbci	r23, 0xFF	; 255
    1826:	8f 4f       	sbci	r24, 0xFF	; 255
    1828:	9f 4f       	sbci	r25, 0xFF	; 255
    182a:	af 4f       	sbci	r26, 0xFF	; 255
    182c:	b1 e0       	ldi	r27, 0x01	; 1
    182e:	3e d0       	rcall	.+124    	; 0x18ac <__ultoa_invert+0x9c>
    1830:	b4 e0       	ldi	r27, 0x04	; 4
    1832:	3c d0       	rcall	.+120    	; 0x18ac <__ultoa_invert+0x9c>
    1834:	67 0f       	add	r22, r23
    1836:	78 1f       	adc	r23, r24
    1838:	89 1f       	adc	r24, r25
    183a:	9a 1f       	adc	r25, r26
    183c:	a1 1d       	adc	r26, r1
    183e:	68 0f       	add	r22, r24
    1840:	79 1f       	adc	r23, r25
    1842:	8a 1f       	adc	r24, r26
    1844:	91 1d       	adc	r25, r1
    1846:	a1 1d       	adc	r26, r1
    1848:	6a 0f       	add	r22, r26
    184a:	71 1d       	adc	r23, r1
    184c:	81 1d       	adc	r24, r1
    184e:	91 1d       	adc	r25, r1
    1850:	a1 1d       	adc	r26, r1
    1852:	20 d0       	rcall	.+64     	; 0x1894 <__ultoa_invert+0x84>
    1854:	09 f4       	brne	.+2      	; 0x1858 <__ultoa_invert+0x48>
    1856:	68 94       	set
    1858:	3f 91       	pop	r19
    185a:	2a e0       	ldi	r18, 0x0A	; 10
    185c:	26 9f       	mul	r18, r22
    185e:	11 24       	eor	r1, r1
    1860:	30 19       	sub	r19, r0
    1862:	30 5d       	subi	r19, 0xD0	; 208
    1864:	31 93       	st	Z+, r19
    1866:	de f6       	brtc	.-74     	; 0x181e <__ultoa_invert+0xe>
    1868:	cf 01       	movw	r24, r30
    186a:	08 95       	ret
    186c:	46 2f       	mov	r20, r22
    186e:	47 70       	andi	r20, 0x07	; 7
    1870:	40 5d       	subi	r20, 0xD0	; 208
    1872:	41 93       	st	Z+, r20
    1874:	b3 e0       	ldi	r27, 0x03	; 3
    1876:	0f d0       	rcall	.+30     	; 0x1896 <__ultoa_invert+0x86>
    1878:	c9 f7       	brne	.-14     	; 0x186c <__ultoa_invert+0x5c>
    187a:	f6 cf       	rjmp	.-20     	; 0x1868 <__ultoa_invert+0x58>
    187c:	46 2f       	mov	r20, r22
    187e:	4f 70       	andi	r20, 0x0F	; 15
    1880:	40 5d       	subi	r20, 0xD0	; 208
    1882:	4a 33       	cpi	r20, 0x3A	; 58
    1884:	18 f0       	brcs	.+6      	; 0x188c <__ultoa_invert+0x7c>
    1886:	49 5d       	subi	r20, 0xD9	; 217
    1888:	31 fd       	sbrc	r19, 1
    188a:	40 52       	subi	r20, 0x20	; 32
    188c:	41 93       	st	Z+, r20
    188e:	02 d0       	rcall	.+4      	; 0x1894 <__ultoa_invert+0x84>
    1890:	a9 f7       	brne	.-22     	; 0x187c <__ultoa_invert+0x6c>
    1892:	ea cf       	rjmp	.-44     	; 0x1868 <__ultoa_invert+0x58>
    1894:	b4 e0       	ldi	r27, 0x04	; 4
    1896:	a6 95       	lsr	r26
    1898:	97 95       	ror	r25
    189a:	87 95       	ror	r24
    189c:	77 95       	ror	r23
    189e:	67 95       	ror	r22
    18a0:	ba 95       	dec	r27
    18a2:	c9 f7       	brne	.-14     	; 0x1896 <__ultoa_invert+0x86>
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	61 05       	cpc	r22, r1
    18a8:	71 05       	cpc	r23, r1
    18aa:	08 95       	ret
    18ac:	9b 01       	movw	r18, r22
    18ae:	ac 01       	movw	r20, r24
    18b0:	0a 2e       	mov	r0, r26
    18b2:	06 94       	lsr	r0
    18b4:	57 95       	ror	r21
    18b6:	47 95       	ror	r20
    18b8:	37 95       	ror	r19
    18ba:	27 95       	ror	r18
    18bc:	ba 95       	dec	r27
    18be:	c9 f7       	brne	.-14     	; 0x18b2 <__ultoa_invert+0xa2>
    18c0:	62 0f       	add	r22, r18
    18c2:	73 1f       	adc	r23, r19
    18c4:	84 1f       	adc	r24, r20
    18c6:	95 1f       	adc	r25, r21
    18c8:	a0 1d       	adc	r26, r0
    18ca:	08 95       	ret

000018cc <_exit>:
    18cc:	f8 94       	cli

000018ce <__stop_program>:
    18ce:	ff cf       	rjmp	.-2      	; 0x18ce <__stop_program>
