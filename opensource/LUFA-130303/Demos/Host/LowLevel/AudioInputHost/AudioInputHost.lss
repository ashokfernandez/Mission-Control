
AudioInputHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000193a  000019ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000193a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  0080011c  0080011c  000019ea  2**0
                  ALLOC
  3 .stab         00000e28  00000000  00000000  000019ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000256  00000000  00000000  00002814  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000430  00000000  00000000  00002a70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005a61  00000000  00000000  00002ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c46  00000000  00000000  00008901  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002cf5  00000000  00000000  0000a547  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b50  00000000  00000000  0000d23c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000284f  00000000  00000000  0000dd8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003ffa  00000000  00000000  000105db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000440  00000000  00000000  000145d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	79 c1       	rjmp	.+754    	; 0x2f4 <__ctors_end>
       2:	00 00       	nop
       4:	96 c1       	rjmp	.+812    	; 0x332 <__bad_interrupt>
       6:	00 00       	nop
       8:	94 c1       	rjmp	.+808    	; 0x332 <__bad_interrupt>
       a:	00 00       	nop
       c:	92 c1       	rjmp	.+804    	; 0x332 <__bad_interrupt>
       e:	00 00       	nop
      10:	90 c1       	rjmp	.+800    	; 0x332 <__bad_interrupt>
      12:	00 00       	nop
      14:	8e c1       	rjmp	.+796    	; 0x332 <__bad_interrupt>
      16:	00 00       	nop
      18:	8c c1       	rjmp	.+792    	; 0x332 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8a c1       	rjmp	.+788    	; 0x332 <__bad_interrupt>
      1e:	00 00       	nop
      20:	88 c1       	rjmp	.+784    	; 0x332 <__bad_interrupt>
      22:	00 00       	nop
      24:	86 c1       	rjmp	.+780    	; 0x332 <__bad_interrupt>
      26:	00 00       	nop
      28:	c5 c6       	rjmp	.+3466   	; 0xdb4 <__vector_10>
      2a:	00 00       	nop
      2c:	82 c1       	rjmp	.+772    	; 0x332 <__bad_interrupt>
      2e:	00 00       	nop
      30:	80 c1       	rjmp	.+768    	; 0x332 <__bad_interrupt>
      32:	00 00       	nop
      34:	7e c1       	rjmp	.+764    	; 0x332 <__bad_interrupt>
      36:	00 00       	nop
      38:	7c c1       	rjmp	.+760    	; 0x332 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7a c1       	rjmp	.+756    	; 0x332 <__bad_interrupt>
      3e:	00 00       	nop
      40:	78 c1       	rjmp	.+752    	; 0x332 <__bad_interrupt>
      42:	00 00       	nop
      44:	76 c1       	rjmp	.+748    	; 0x332 <__bad_interrupt>
      46:	00 00       	nop
      48:	74 c1       	rjmp	.+744    	; 0x332 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	72 c1       	rjmp	.+740    	; 0x332 <__bad_interrupt>
      4e:	00 00       	nop
      50:	70 c1       	rjmp	.+736    	; 0x332 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c2       	rjmp	.+1354   	; 0x5a0 <__vector_21>
      56:	00 00       	nop
      58:	6c c1       	rjmp	.+728    	; 0x332 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6a c1       	rjmp	.+724    	; 0x332 <__bad_interrupt>
      5e:	00 00       	nop
      60:	68 c1       	rjmp	.+720    	; 0x332 <__bad_interrupt>
      62:	00 00       	nop
      64:	66 c1       	rjmp	.+716    	; 0x332 <__bad_interrupt>
      66:	00 00       	nop
      68:	64 c1       	rjmp	.+712    	; 0x332 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	62 c1       	rjmp	.+708    	; 0x332 <__bad_interrupt>
      6e:	00 00       	nop
      70:	60 c1       	rjmp	.+704    	; 0x332 <__bad_interrupt>
      72:	00 00       	nop
      74:	5e c1       	rjmp	.+700    	; 0x332 <__bad_interrupt>
      76:	00 00       	nop
      78:	5c c1       	rjmp	.+696    	; 0x332 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5a c1       	rjmp	.+692    	; 0x332 <__bad_interrupt>
      7e:	00 00       	nop
      80:	58 c1       	rjmp	.+688    	; 0x332 <__bad_interrupt>
      82:	00 00       	nop
      84:	56 c1       	rjmp	.+684    	; 0x332 <__bad_interrupt>
      86:	00 00       	nop
      88:	54 c1       	rjmp	.+680    	; 0x332 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	52 c1       	rjmp	.+676    	; 0x332 <__bad_interrupt>
      8e:	00 00       	nop
      90:	50 c1       	rjmp	.+672    	; 0x332 <__bad_interrupt>
      92:	00 00       	nop
      94:	4e c1       	rjmp	.+668    	; 0x332 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4276>:
      98:	1b 5b 33 36 6d 41 75 64 69 6f 20 49 6e 70 75 74     .[36mAudio Input
      a8:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
      b8:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00                    ng....[37m.

000000c3 <__c.4285>:
      c3:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
      d3:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

000000e0 <__c.4290>:
      e0:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
      f0:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

000000ff <__c.4295>:
      ff:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     10f:	61 74 61 2e 0d 0a 00                                ata....

00000116 <__c.4298>:
     116:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     126:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     136:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000140 <__c.4300>:
     140:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     150:	69 63 65 2e 0d 0a 00                                ice....

00000157 <__c.4302>:
     157:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     167:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

00000171 <__c.4304>:
     171:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     181:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     191:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1a1:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1b1:	37 6d 00                                            7m.

000001b4 <__c.4306>:
     1b4:	1b 5b 33 31 6d 43 6f 75 6c 64 20 6e 6f 74 20 73     .[31mCould not s
     1c4:	65 74 20 61 6c 74 65 72 6e 61 74 69 76 65 20 73     et alternative s
     1d4:	74 72 65 61 6d 69 6e 67 20 69 6e 74 65 72 66 61     treaming interfa
     1e4:	63 65 20 73 65 74 74 69 6e 67 2e 0d 0a 20 2d 2d     ce setting... --
     1f4:	20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25 64 0d      Error Code: %d.
     204:	0a 1b 5b 33 37 6d 00                                ..[37m.

0000020b <__c.4310>:
     20b:	1b 5b 33 31 6d 43 6f 75 6c 64 20 6e 6f 74 20 73     .[31mCould not s
     21b:	65 74 20 72 65 71 75 65 73 74 65 64 20 41 75 64     et requested Aud
     22b:	69 6f 20 73 61 6d 70 6c 65 20 72 61 74 65 2e 0d     io sample rate..
     23b:	0a 20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a     . -- Error Code:
     24b:	20 25 64 0d 0a 1b 5b 33 37 6d 00                     %d...[37m.

00000256 <__c.4312>:
     256:	4d 69 63 72 6f 70 68 6f 6e 65 20 45 6e 75 6d 65     Microphone Enume
     266:	72 61 74 65 64 2e 0d 0a 00                          rated....

0000026f <__c.4317>:
     26f:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     27f:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     28f:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000029e <__c.4324>:
     29e:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     2ae:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     2be:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     2ce:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     2de:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     2ee:	1b 5b 33 37 6d 00                                   .[37m.

000002f4 <__ctors_end>:
     2f4:	11 24       	eor	r1, r1
     2f6:	1f be       	out	0x3f, r1	; 63
     2f8:	cf ef       	ldi	r28, 0xFF	; 255
     2fa:	d0 e2       	ldi	r29, 0x20	; 32
     2fc:	de bf       	out	0x3e, r29	; 62
     2fe:	cd bf       	out	0x3d, r28	; 61

00000300 <__do_copy_data>:
     300:	11 e0       	ldi	r17, 0x01	; 1
     302:	a0 e0       	ldi	r26, 0x00	; 0
     304:	b1 e0       	ldi	r27, 0x01	; 1
     306:	ea e3       	ldi	r30, 0x3A	; 58
     308:	f9 e1       	ldi	r31, 0x19	; 25
     30a:	00 e0       	ldi	r16, 0x00	; 0
     30c:	0b bf       	out	0x3b, r16	; 59
     30e:	02 c0       	rjmp	.+4      	; 0x314 <__do_copy_data+0x14>
     310:	07 90       	elpm	r0, Z+
     312:	0d 92       	st	X+, r0
     314:	ac 31       	cpi	r26, 0x1C	; 28
     316:	b1 07       	cpc	r27, r17
     318:	d9 f7       	brne	.-10     	; 0x310 <__do_copy_data+0x10>
     31a:	1b be       	out	0x3b, r1	; 59

0000031c <__do_clear_bss>:
     31c:	11 e0       	ldi	r17, 0x01	; 1
     31e:	ac e1       	ldi	r26, 0x1C	; 28
     320:	b1 e0       	ldi	r27, 0x01	; 1
     322:	01 c0       	rjmp	.+2      	; 0x326 <.do_clear_bss_start>

00000324 <.do_clear_bss_loop>:
     324:	1d 92       	st	X+, r1

00000326 <.do_clear_bss_start>:
     326:	a1 34       	cpi	r26, 0x41	; 65
     328:	b1 07       	cpc	r27, r17
     32a:	e1 f7       	brne	.-8      	; 0x324 <.do_clear_bss_loop>
     32c:	35 d0       	rcall	.+106    	; 0x398 <main>
     32e:	0c 94 9b 0c 	jmp	0x1936	; 0x1936 <_exit>

00000332 <__bad_interrupt>:
     332:	66 ce       	rjmp	.-820    	; 0x0 <__vectors>

00000334 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     334:	9b b1       	in	r25, 0x0b	; 11
     336:	9f 70       	andi	r25, 0x0F	; 15
     338:	98 2b       	or	r25, r24
     33a:	9b b9       	out	0x0b, r25	; 11
			}
     33c:	08 95       	ret

0000033e <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     33e:	84 b7       	in	r24, 0x34	; 52
     340:	87 7f       	andi	r24, 0xF7	; 247
     342:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     344:	28 e1       	ldi	r18, 0x18	; 24
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	f8 94       	cli
     34a:	20 93 60 00 	sts	0x0060, r18
     34e:	10 92 60 00 	sts	0x0060, r1
     352:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	80 e8       	ldi	r24, 0x80	; 128
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	80 93 61 00 	sts	0x0061, r24
     360:	90 93 61 00 	sts	0x0061, r25
     364:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     366:	83 e3       	ldi	r24, 0x33	; 51
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	90 93 cd 00 	sts	0x00CD, r25
     36e:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     372:	86 e0       	ldi	r24, 0x06	; 6
     374:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     378:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     37c:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     380:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     382:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     384:	8a b1       	in	r24, 0x0a	; 10
     386:	80 6f       	ori	r24, 0xF0	; 240
     388:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     38a:	8b b1       	in	r24, 0x0b	; 11
     38c:	8f 70       	andi	r24, 0x0F	; 15
     38e:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     390:	f6 d4       	rcall	.+2540   	; 0xd7e <USB_Init>
     392:	80 e0       	ldi	r24, 0x00	; 0

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	ca c7       	rjmp	.+3988   	; 0x132c <Serial_CreateStream>

00000398 <main>:
     398:	d2 df       	rcall	.-92     	; 0x33e <SetupHardware>
     39a:	88 e9       	ldi	r24, 0x98	; 152
}
     39c:	90 e0       	ldi	r25, 0x00	; 0
 */
int main(void)
{
	SetupHardware();

	puts_P(PSTR(ESC_FG_CYAN "Audio Input Host Demo running.\r\n" ESC_FG_WHITE));
     39e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <puts_P>
     3a2:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3a4:	c7 df       	rcall	.-114    	; 0x334 <LEDs_SetAllLEDs>
     3a6:	78 94       	sei
     3a8:	99 d7       	rcall	.+3890   	; 0x12dc <USB_USBTask>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     3aa:	fe cf       	rjmp	.-4      	; 0x3a8 <main+0x10>

000003ac <EVENT_USB_Host_DeviceAttached>:
	GlobalInterruptEnable();

	for (;;)
	{
		USB_USBTask();
     3ac:	83 ec       	ldi	r24, 0xC3	; 195
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	f9 d7       	rcall	.+4082   	; 0x13a4 <puts_P>
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     3b2:	80 ea       	ldi	r24, 0xA0	; 160
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     3b4:	bf cf       	rjmp	.-130    	; 0x334 <LEDs_SetAllLEDs>

000003b6 <EVENT_USB_Host_DeviceUnattached>:
     3b6:	80 ee       	ldi	r24, 0xE0	; 224
     3b8:	90 e0       	ldi	r25, 0x00	; 0
}
     3ba:	f4 d7       	rcall	.+4072   	; 0x13a4 <puts_P>
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     3bc:	80 e1       	ldi	r24, 0x10	; 16
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3be:	ba cf       	rjmp	.-140    	; 0x334 <LEDs_SetAllLEDs>

000003c0 <EVENT_USB_Host_DeviceEnumerationComplete>:
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
}
     3c4:	df 93       	push	r29

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     3c6:	00 d0       	rcall	.+0      	; 0x3c8 <EVENT_USB_Host_DeviceEnumerationComplete+0x8>
     3c8:	0f 92       	push	r0
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62
	puts_P(PSTR("Getting Config Data.\r\n"));
     3ce:	8f ef       	ldi	r24, 0xFF	; 255
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	e8 d7       	rcall	.+4048   	; 0x13a4 <puts_P>
     3d4:	8a d1       	rcall	.+788    	; 0x6ea <ProcessConfigurationDescriptor>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     3d6:	18 2f       	mov	r17, r24
     3d8:	88 23       	and	r24, r24
     3da:	f1 f0       	breq	.+60     	; 0x418 <EVENT_USB_Host_DeviceEnumerationComplete+0x58>
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	19 f4       	brne	.+6      	; 0x3e6 <EVENT_USB_Host_DeviceEnumerationComplete+0x26>
	{
		if (ErrorCode == ControlError)
     3e0:	86 e1       	ldi	r24, 0x16	; 22
     3e2:	91 e0       	ldi	r25, 0x01	; 1
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <EVENT_USB_Host_DeviceEnumerationComplete+0x2a>
     3e6:	80 e4       	ldi	r24, 0x40	; 64
     3e8:	91 e0       	ldi	r25, 0x01	; 1
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     3ea:	dc d7       	rcall	.+4024   	; 0x13a4 <puts_P>
     3ec:	00 d0       	rcall	.+0      	; 0x3ee <EVENT_USB_Host_DeviceEnumerationComplete+0x2e>
     3ee:	00 d0       	rcall	.+0      	; 0x3f0 <EVENT_USB_Host_DeviceEnumerationComplete+0x30>
     3f0:	ed b7       	in	r30, 0x3d	; 61

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     3f2:	fe b7       	in	r31, 0x3e	; 62
     3f4:	31 96       	adiw	r30, 0x01	; 1
     3f6:	27 e5       	ldi	r18, 0x57	; 87
     3f8:	31 e0       	ldi	r19, 0x01	; 1
     3fa:	ad b7       	in	r26, 0x3d	; 61
     3fc:	be b7       	in	r27, 0x3e	; 62
     3fe:	12 96       	adiw	r26, 0x02	; 2
     400:	3c 93       	st	X, r19
     402:	2e 93       	st	-X, r18
     404:	11 97       	sbiw	r26, 0x01	; 1
     406:	12 83       	std	Z+2, r17	; 0x02
     408:	13 82       	std	Z+3, r1	; 0x03
     40a:	ad d7       	rcall	.+3930   	; 0x1366 <printf_P>
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     414:	80 e9       	ldi	r24, 0x90	; 144
     416:	75 c0       	rjmp	.+234    	; 0x502 <EVENT_USB_Host_DeviceEnumerationComplete+0x142>
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	24 d7       	rcall	.+3656   	; 0x1264 <USB_Host_SetDeviceConfiguration>
     41c:	88 23       	and	r24, r24
     41e:	79 f0       	breq	.+30     	; 0x43e <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     420:	00 d0       	rcall	.+0      	; 0x422 <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
     422:	00 d0       	rcall	.+0      	; 0x424 <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
     424:	ed b7       	in	r30, 0x3d	; 61
     426:	fe b7       	in	r31, 0x3e	; 62
     428:	31 96       	adiw	r30, 0x01	; 1
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     42a:	21 e7       	ldi	r18, 0x71	; 113
     42c:	31 e0       	ldi	r19, 0x01	; 1
     42e:	ad b7       	in	r26, 0x3d	; 61
     430:	be b7       	in	r27, 0x3e	; 62
     432:	12 96       	adiw	r26, 0x02	; 2
     434:	3c 93       	st	X, r19
     436:	2e 93       	st	-X, r18
     438:	11 97       	sbiw	r26, 0x01	; 1
     43a:	82 83       	std	Z+2, r24	; 0x02
     43c:	e5 cf       	rjmp	.-54     	; 0x408 <EVENT_USB_Host_DeviceEnumerationComplete+0x48>
     43e:	80 91 1e 01 	lds	r24, 0x011E
     442:	60 91 1d 01 	lds	r22, 0x011D
     446:	33 d7       	rcall	.+3686   	; 0x12ae <USB_Host_SetInterfaceAltSetting>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if ((ErrorCode = USB_Host_SetInterfaceAltSetting(StreamingInterfaceIndex,
     448:	88 23       	and	r24, r24
     44a:	41 f0       	breq	.+16     	; 0x45c <EVENT_USB_Host_DeviceEnumerationComplete+0x9c>
     44c:	00 d0       	rcall	.+0      	; 0x44e <EVENT_USB_Host_DeviceEnumerationComplete+0x8e>
     44e:	00 d0       	rcall	.+0      	; 0x450 <EVENT_USB_Host_DeviceEnumerationComplete+0x90>
     450:	ed b7       	in	r30, 0x3d	; 61
     452:	fe b7       	in	r31, 0x3e	; 62
     454:	31 96       	adiw	r30, 0x01	; 1
     456:	24 eb       	ldi	r18, 0xB4	; 180
	                                                 StreamingInterfaceAltSetting)) != HOST_SENDCONTROL_Successful)
	{
		printf_P(PSTR(ESC_FG_RED "Could not set alternative streaming interface setting.\r\n"
     458:	31 e0       	ldi	r19, 0x01	; 1
     45a:	2f c0       	rjmp	.+94     	; 0x4ba <EVENT_USB_Host_DeviceEnumerationComplete+0xfa>
     45c:	20 91 1c 01 	lds	r18, 0x011C
     460:	82 e2       	ldi	r24, 0x22	; 34
     462:	80 93 24 01 	sts	0x0124, r24
     466:	81 e0       	ldi	r24, 0x01	; 1
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	USB_ControlRequest = (USB_Request_Header_t)
     468:	80 93 25 01 	sts	0x0125, r24
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	90 93 27 01 	sts	0x0127, r25
     474:	80 93 26 01 	sts	0x0126, r24
     478:	20 93 28 01 	sts	0x0128, r18
     47c:	10 92 29 01 	sts	0x0129, r1
     480:	83 e0       	ldi	r24, 0x03	; 3
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	90 93 2b 01 	sts	0x012B, r25
     488:	80 93 2a 01 	sts	0x012A, r24
     48c:	de 01       	movw	r26, r28
     48e:	11 96       	adiw	r26, 0x01	; 1
     490:	e0 e0       	ldi	r30, 0x00	; 0
     492:	f1 e0       	ldi	r31, 0x01	; 1
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	01 90       	ld	r0, Z+
			.wValue        = (AUDIO_EPCONTROL_SamplingFreq << 8),
			.wIndex        = StreamingEndpointAddress,
			.wLength       = sizeof(USB_Audio_SampleFreq_t),
		};

	USB_Audio_SampleFreq_t SampleRate = AUDIO_SAMPLE_FREQ(48000);
     498:	0d 92       	st	X+, r0
     49a:	81 50       	subi	r24, 0x01	; 1
     49c:	e1 f7       	brne	.-8      	; 0x496 <EVENT_USB_Host_DeviceEnumerationComplete+0xd6>
     49e:	10 92 a7 00 	sts	0x00A7, r1
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	e0 d5       	rcall	.+3008   	; 0x1068 <USB_Host_SendControlRequest>
     4a8:	88 23       	and	r24, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     4aa:	c9 f0       	breq	.+50     	; 0x4de <EVENT_USB_Host_DeviceEnumerationComplete+0x11e>
     4ac:	00 d0       	rcall	.+0      	; 0x4ae <EVENT_USB_Host_DeviceEnumerationComplete+0xee>

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Set the sample rate on the streaming interface endpoint */
	if ((ErrorCode = USB_Host_SendControlRequest(&SampleRate)) != HOST_SENDCONTROL_Successful)
     4ae:	00 d0       	rcall	.+0      	; 0x4b0 <EVENT_USB_Host_DeviceEnumerationComplete+0xf0>
     4b0:	ed b7       	in	r30, 0x3d	; 61
     4b2:	fe b7       	in	r31, 0x3e	; 62
     4b4:	31 96       	adiw	r30, 0x01	; 1
     4b6:	2b e0       	ldi	r18, 0x0B	; 11
     4b8:	32 e0       	ldi	r19, 0x02	; 2
	{
		printf_P(PSTR(ESC_FG_RED "Could not set requested Audio sample rate.\r\n"
     4ba:	ad b7       	in	r26, 0x3d	; 61
     4bc:	be b7       	in	r27, 0x3e	; 62
     4be:	12 96       	adiw	r26, 0x02	; 2
     4c0:	3c 93       	st	X, r19
     4c2:	2e 93       	st	-X, r18
     4c4:	11 97       	sbiw	r26, 0x01	; 1
     4c6:	82 83       	std	Z+2, r24	; 0x02
     4c8:	13 82       	std	Z+3, r1	; 0x03
     4ca:	4d d7       	rcall	.+3738   	; 0x1366 <printf_P>
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	80 e9       	ldi	r24, 0x90	; 144
     4d6:	2e df       	rcall	.-420    	; 0x334 <LEDs_SetAllLEDs>
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	c4 d6       	rcall	.+3464   	; 0x1264 <USB_Host_SetDeviceConfiguration>
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4dc:	13 c0       	rjmp	.+38     	; 0x504 <EVENT_USB_Host_DeviceEnumerationComplete+0x144>
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	80 93 6e 00 	sts	0x006E, r24
     4e4:	93 e1       	ldi	r25, 0x13	; 19
     4e6:	97 bd       	out	0x27, r25	; 39
     4e8:	84 bd       	out	0x24, r24	; 36
		USB_Host_SetDeviceConfiguration(0);
     4ea:	85 bd       	out	0x25, r24	; 37
     4ec:	3e 9a       	sbi	0x07, 6	; 7
     4ee:	81 ec       	ldi	r24, 0xC1	; 193
		return;
     4f0:	80 93 90 00 	sts	0x0090, r24
	}

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
     4f4:	89 e0       	ldi	r24, 0x09	; 9
     4f6:	80 93 91 00 	sts	0x0091, r24
	OCR0A   = ((F_CPU / 8 / 48000) - 1);
     4fa:	86 e5       	ldi	r24, 0x56	; 86
	TCCR0A  = (1 << WGM01);  // CTC mode
     4fc:	92 e0       	ldi	r25, 0x02	; 2
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed
     4fe:	52 d7       	rcall	.+3748   	; 0x13a4 <puts_P>

	/* Set speaker as output */
	DDRC   |= (1 << 6);
     500:	80 e6       	ldi	r24, 0x60	; 96

	/* PWM speaker timer initialization */
	TCCR3A  = ((1 << WGM30) | (1 << COM3A1) | (1 << COM3A0)); // Set on match, clear on TOP
     502:	18 df       	rcall	.-464    	; 0x334 <LEDs_SetAllLEDs>
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
	TCCR3B  = ((1 << WGM32) | (1 << CS30));  // Fast 8-Bit PWM, F_CPU speed
     508:	0f 90       	pop	r0
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28

	puts_P(PSTR("Microphone Enumerated.\r\n"));
     50e:	1f 91       	pop	r17
     510:	08 95       	ret

00000512 <EVENT_USB_Host_HostError>:
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     516:	0f 92       	push	r0
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
}
     51c:	89 83       	std	Y+1, r24	; 0x01
     51e:	c7 d3       	rcall	.+1934   	; 0xcae <USB_Disable>
     520:	00 d0       	rcall	.+0      	; 0x522 <EVENT_USB_Host_HostError+0x10>
     522:	00 d0       	rcall	.+0      	; 0x524 <EVENT_USB_Host_HostError+0x12>
     524:	ed b7       	in	r30, 0x3d	; 61
     526:	fe b7       	in	r31, 0x3e	; 62
     528:	31 96       	adiw	r30, 0x01	; 1
/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     52a:	2f e6       	ldi	r18, 0x6F	; 111
     52c:	32 e0       	ldi	r19, 0x02	; 2
     52e:	ad b7       	in	r26, 0x3d	; 61
     530:	be b7       	in	r27, 0x3e	; 62
     532:	12 96       	adiw	r26, 0x02	; 2
     534:	3c 93       	st	X, r19
     536:	2e 93       	st	-X, r18
     538:	11 97       	sbiw	r26, 0x01	; 1
     53a:	89 81       	ldd	r24, Y+1	; 0x01
     53c:	82 83       	std	Z+2, r24	; 0x02
     53e:	13 82       	std	Z+3, r1	; 0x03
     540:	12 d7       	rcall	.+3620   	; 0x1366 <printf_P>
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	80 e9       	ldi	r24, 0x90	; 144
     54c:	f3 de       	rcall	.-538    	; 0x334 <LEDs_SetAllLEDs>
     54e:	ff cf       	rjmp	.-2      	; 0x54e <EVENT_USB_Host_HostError+0x3c>

00000550 <EVENT_USB_Host_DeviceEnumerationFailed>:
     550:	90 91 2c 01 	lds	r25, 0x012C
     554:	2d b7       	in	r18, 0x3d	; 61
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     556:	3e b7       	in	r19, 0x3e	; 62
     558:	28 50       	subi	r18, 0x08	; 8
     55a:	30 40       	sbci	r19, 0x00	; 0
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	3e bf       	out	0x3e, r19	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	2d bf       	out	0x3d, r18	; 61
     566:	ed b7       	in	r30, 0x3d	; 61
     568:	fe b7       	in	r31, 0x3e	; 62
     56a:	31 96       	adiw	r30, 0x01	; 1
     56c:	2e e9       	ldi	r18, 0x9E	; 158
     56e:	32 e0       	ldi	r19, 0x02	; 2
     570:	ad b7       	in	r26, 0x3d	; 61
     572:	be b7       	in	r27, 0x3e	; 62
     574:	12 96       	adiw	r26, 0x02	; 2
     576:	3c 93       	st	X, r19
     578:	2e 93       	st	-X, r18
     57a:	11 97       	sbiw	r26, 0x01	; 1
     57c:	82 83       	std	Z+2, r24	; 0x02
     57e:	13 82       	std	Z+3, r1	; 0x03
     580:	64 83       	std	Z+4, r22	; 0x04
     582:	15 82       	std	Z+5, r1	; 0x05
     584:	96 83       	std	Z+6, r25	; 0x06
     586:	17 82       	std	Z+7, r1	; 0x07
     588:	ee d6       	rcall	.+3548   	; 0x1366 <printf_P>
     58a:	2d b7       	in	r18, 0x3d	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     58c:	3e b7       	in	r19, 0x3e	; 62
     58e:	28 5f       	subi	r18, 0xF8	; 248
     590:	3f 4f       	sbci	r19, 0xFF	; 255
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	f8 94       	cli
     596:	3e bf       	out	0x3e, r19	; 62
     598:	0f be       	out	0x3f, r0	; 63
     59a:	2d bf       	out	0x3d, r18	; 61
     59c:	80 e9       	ldi	r24, 0x90	; 144
     59e:	ca ce       	rjmp	.-620    	; 0x334 <LEDs_SetAllLEDs>

000005a0 <__vector_21>:
     5a0:	1f 92       	push	r1
     5a2:	0f 92       	push	r0
}
     5a4:	0f b6       	in	r0, 0x3f	; 63

/** ISR to handle the reloading of the PWM timer with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
     5a6:	0f 92       	push	r0
     5a8:	0b b6       	in	r0, 0x3b	; 59
     5aa:	0f 92       	push	r0
     5ac:	11 24       	eor	r1, r1
     5ae:	2f 93       	push	r18
     5b0:	3f 93       	push	r19
     5b2:	4f 93       	push	r20
     5b4:	5f 93       	push	r21
     5b6:	6f 93       	push	r22
     5b8:	7f 93       	push	r23
     5ba:	8f 93       	push	r24
     5bc:	9f 93       	push	r25
     5be:	af 93       	push	r26
     5c0:	bf 93       	push	r27
     5c2:	cf 93       	push	r28
     5c4:	ef 93       	push	r30
     5c6:	ff 93       	push	r31
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     5c8:	80 91 a7 00 	lds	r24, 0x00A7
     5cc:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     5ce:	90 91 aa 00 	lds	r25, 0x00AA
     5d2:	90 ff       	sbrs	r25, 0
     5d4:	02 c0       	rjmp	.+4      	; 0x5da <__vector_21+0x3a>
     5d6:	c0 e8       	ldi	r28, 0x80	; 128
     5d8:	01 c0       	rjmp	.+2      	; 0x5dc <__vector_21+0x3c>
     5da:	c0 e0       	ldi	r28, 0x00	; 0
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     5dc:	c8 2b       	or	r28, r24
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     5e4:	80 91 a9 00 	lds	r24, 0x00A9
     5e8:	8f 7b       	andi	r24, 0xBF	; 191
     5ea:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     5ee:	80 91 a6 00 	lds	r24, 0x00A6

	Pipe_SelectPipe(AUDIO_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check if the current pipe can be read from (contains a packet) and the device is sending data */
	if (Pipe_IsINReceived())
     5f2:	80 ff       	sbrs	r24, 0
     5f4:	2b c0       	rjmp	.+86     	; 0x64c <__vector_21+0xac>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UPDATX;
     5f6:	80 91 af 00 	lds	r24, 0x00AF
				Data.Bytes[1] = UPDATX;
     5fa:	40 91 af 00 	lds	r20, 0x00AF
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     5fe:	80 91 a6 00 	lds	r24, 0x00A6
	{
		/* Retrieve the signed 16-bit audio sample, convert to 8-bit */
		int8_t Sample_8Bit = (Pipe_Read_16_LE() >> 8);

		/* Check to see if the bank is now empty */
		if (!(Pipe_IsReadWriteAllowed()))
     602:	85 fd       	sbrc	r24, 5
     604:	05 c0       	rjmp	.+10     	; 0x610 <__vector_21+0x70>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     606:	80 91 a6 00 	lds	r24, 0x00A6
     60a:	8e 77       	andi	r24, 0x7E	; 126
     60c:	80 93 a6 00 	sts	0x00A6, r24
			/* Acknowledge the packet, clear the bank ready for the next packet */
			Pipe_ClearIN();
		}

		/* Load the sample into the PWM timer channel */
		OCR3A = (Sample_8Bit ^ (1 << 7));
     610:	84 2f       	mov	r24, r20
     612:	99 27       	eor	r25, r25
     614:	87 fd       	sbrc	r24, 7
     616:	90 95       	com	r25
     618:	20 e8       	ldi	r18, 0x80	; 128
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	82 27       	eor	r24, r18
     61e:	93 27       	eor	r25, r19
     620:	90 93 99 00 	sts	0x0099, r25
     624:	80 93 98 00 	sts	0x0098, r24

		uint8_t LEDMask = LEDS_NO_LEDS;

		/* Turn on LEDs as the sample amplitude increases */
		if (Sample_8Bit > 16)
     628:	41 31       	cpi	r20, 0x11	; 17
     62a:	44 f4       	brge	.+16     	; 0x63c <__vector_21+0x9c>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3 | LEDS_LED4);
		else if (Sample_8Bit > 8)
     62c:	49 30       	cpi	r20, 0x09	; 9
     62e:	44 f4       	brge	.+16     	; 0x640 <__vector_21+0xa0>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3);
		else if (Sample_8Bit > 4)
     630:	45 30       	cpi	r20, 0x05	; 5
     632:	44 f4       	brge	.+16     	; 0x644 <__vector_21+0xa4>
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
		else if (Sample_8Bit > 2)
     634:	43 30       	cpi	r20, 0x03	; 3
     636:	44 f4       	brge	.+16     	; 0x648 <__vector_21+0xa8>
		}

		/* Load the sample into the PWM timer channel */
		OCR3A = (Sample_8Bit ^ (1 << 7));

		uint8_t LEDMask = LEDS_NO_LEDS;
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	07 c0       	rjmp	.+14     	; 0x64a <__vector_21+0xaa>

		/* Turn on LEDs as the sample amplitude increases */
		if (Sample_8Bit > 16)
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3 | LEDS_LED4);
     63c:	80 ef       	ldi	r24, 0xF0	; 240
     63e:	05 c0       	rjmp	.+10     	; 0x64a <__vector_21+0xaa>
		else if (Sample_8Bit > 8)
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3);
     640:	80 eb       	ldi	r24, 0xB0	; 176
     642:	03 c0       	rjmp	.+6      	; 0x64a <__vector_21+0xaa>
		else if (Sample_8Bit > 4)
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
     644:	80 e3       	ldi	r24, 0x30	; 48
     646:	01 c0       	rjmp	.+2      	; 0x64a <__vector_21+0xaa>
		else if (Sample_8Bit > 2)
		  LEDMask = (LEDS_LED1);
     648:	80 e1       	ldi	r24, 0x10	; 16

		LEDs_SetAllLEDs(LEDMask);
     64a:	74 de       	rcall	.-792    	; 0x334 <LEDs_SetAllLEDs>
     64c:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     650:	80 64       	ori	r24, 0x40	; 64
     652:	80 93 a9 00 	sts	0x00A9, r24
     656:	cf 70       	andi	r28, 0x0F	; 15
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     658:	c0 93 a7 00 	sts	0x00A7, r28
     65c:	ff 91       	pop	r31
	}

	Pipe_Freeze();
	Pipe_SelectPipe(PrevPipe);
}
     65e:	ef 91       	pop	r30
     660:	cf 91       	pop	r28
     662:	bf 91       	pop	r27
     664:	af 91       	pop	r26
     666:	9f 91       	pop	r25
     668:	8f 91       	pop	r24
     66a:	7f 91       	pop	r23
     66c:	6f 91       	pop	r22
     66e:	5f 91       	pop	r21
     670:	4f 91       	pop	r20
     672:	3f 91       	pop	r19
     674:	2f 91       	pop	r18
     676:	0f 90       	pop	r0
     678:	0b be       	out	0x3b, r0	; 59
     67a:	0f 90       	pop	r0
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	0f 90       	pop	r0
     680:	1f 90       	pop	r1
     682:	18 95       	reti

00000684 <DComp_NextAudioControlInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Audio Control Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextAudioControlInterface(void* CurrentDescriptor)
{
     684:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     686:	81 81       	ldd	r24, Z+1	; 0x01
     688:	84 30       	cpi	r24, 0x04	; 4
     68a:	49 f4       	brne	.+18     	; 0x69e <DComp_NextAudioControlInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
     68c:	85 81       	ldd	r24, Z+5	; 0x05
     68e:	81 30       	cpi	r24, 0x01	; 1
     690:	31 f4       	brne	.+12     	; 0x69e <DComp_NextAudioControlInterface+0x1a>
     692:	86 81       	ldd	r24, Z+6	; 0x06
     694:	81 30       	cpi	r24, 0x01	; 1
     696:	19 f4       	brne	.+6      	; 0x69e <DComp_NextAudioControlInterface+0x1a>
		    (Interface->SubClass == AUDIO_CSCP_ControlSubclass) &&
     698:	87 81       	ldd	r24, Z+7	; 0x07
     69a:	88 23       	and	r24, r24
     69c:	11 f0       	breq	.+4      	; 0x6a2 <DComp_NextAudioControlInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     69e:	82 e0       	ldi	r24, 0x02	; 2
     6a0:	08 95       	ret

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
		    (Interface->SubClass == AUDIO_CSCP_ControlSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_ControlProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     6a2:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     6a4:	08 95       	ret

000006a6 <DComp_NextAudioStreamInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Audio Streaming Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextAudioStreamInterface(void* CurrentDescriptor)
{
     6a6:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     6a8:	81 81       	ldd	r24, Z+1	; 0x01
     6aa:	84 30       	cpi	r24, 0x04	; 4
     6ac:	49 f4       	brne	.+18     	; 0x6c0 <DComp_NextAudioStreamInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
     6ae:	85 81       	ldd	r24, Z+5	; 0x05
     6b0:	81 30       	cpi	r24, 0x01	; 1
     6b2:	31 f4       	brne	.+12     	; 0x6c0 <DComp_NextAudioStreamInterface+0x1a>
     6b4:	86 81       	ldd	r24, Z+6	; 0x06
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	19 f4       	brne	.+6      	; 0x6c0 <DComp_NextAudioStreamInterface+0x1a>
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
     6ba:	87 81       	ldd	r24, Z+7	; 0x07
     6bc:	88 23       	and	r24, r24
     6be:	11 f0       	breq	.+4      	; 0x6c4 <DComp_NextAudioStreamInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     6c0:	82 e0       	ldi	r24, 0x02	; 2
     6c2:	08 95       	ret

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
		    (Interface->SubClass == AUDIO_CSCP_AudioStreamingSubclass) &&
		    (Interface->Protocol == AUDIO_CSCP_StreamingProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     6c4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     6c6:	08 95       	ret

000006c8 <DComp_NextAudioInterfaceDataEndpoint>:
 *  search if another interface descriptor is found before the next endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextAudioInterfaceDataEndpoint(void* CurrentDescriptor)
{
     6c8:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     6ca:	81 81       	ldd	r24, Z+1	; 0x01
     6cc:	85 30       	cpi	r24, 0x05	; 5
     6ce:	29 f4       	brne	.+10     	; 0x6da <DComp_NextAudioInterfaceDataEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
     6d0:	83 81       	ldd	r24, Z+3	; 0x03
     6d2:	83 70       	andi	r24, 0x03	; 3
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	19 f4       	brne	.+6      	; 0x6de <DComp_NextAudioInterfaceDataEndpoint+0x16>
     6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <DComp_NextAudioInterfaceDataEndpoint+0x1a>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     6da:	84 30       	cpi	r24, 0x04	; 4
     6dc:	21 f0       	breq	.+8      	; 0x6e6 <DComp_NextAudioInterfaceDataEndpoint+0x1e>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	08 95       	ret
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
		  return DESCRIPTOR_SEARCH_Found;
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
     6e6:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     6e8:	08 95       	ret

000006ea <ProcessConfigurationDescriptor>:
 *  This routine searches for a Streaming Audio interface descriptor containing a valid Isochronous audio endpoint.
 *
 *  \return An error code from the \ref AudioHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     6ea:	cf 92       	push	r12
     6ec:	df 92       	push	r13
     6ee:	ef 92       	push	r14
     6f0:	ff 92       	push	r15
     6f2:	0f 93       	push	r16
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	cd b7       	in	r28, 0x3d	; 61
     6fc:	de b7       	in	r29, 0x3e	; 62
     6fe:	c4 50       	subi	r28, 0x04	; 4
     700:	d2 40       	sbci	r29, 0x02	; 2
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	f8 94       	cli
     706:	de bf       	out	0x3e, r29	; 62
     708:	0f be       	out	0x3f, r0	; 63
     70a:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     70c:	ae 01       	movw	r20, r28
     70e:	4b 5f       	subi	r20, 0xFB	; 251
     710:	5f 4f       	sbci	r21, 0xFF	; 255
     712:	5c 83       	std	Y+4, r21	; 0x04
     714:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint          = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	7e 01       	movw	r14, r28
     71a:	08 94       	sec
     71c:	e1 1c       	adc	r14, r1
     71e:	f1 1c       	adc	r15, r1
     720:	b7 01       	movw	r22, r14
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	32 e0       	ldi	r19, 0x02	; 2
     726:	d9 d3       	rcall	.+1970   	; 0xeda <USB_Host_GetDeviceConfigDescriptor>
     728:	85 30       	cpi	r24, 0x05	; 5
     72a:	09 f4       	brne	.+2      	; 0x72e <ProcessConfigurationDescriptor+0x44>
     72c:	52 c0       	rjmp	.+164    	; 0x7d2 <ProcessConfigurationDescriptor+0xe8>
     72e:	86 30       	cpi	r24, 0x06	; 6
     730:	19 f0       	breq	.+6      	; 0x738 <ProcessConfigurationDescriptor+0x4e>
     732:	88 23       	and	r24, r24
     734:	41 f0       	breq	.+16     	; 0x746 <ProcessConfigurationDescriptor+0x5c>
     736:	02 c0       	rjmp	.+4      	; 0x73c <ProcessConfigurationDescriptor+0x52>
     738:	83 e0       	ldi	r24, 0x03	; 3
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     73a:	4e c0       	rjmp	.+156    	; 0x7d8 <ProcessConfigurationDescriptor+0xee>
     73c:	81 e0       	ldi	r24, 0x01	; 1
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     73e:	4c c0       	rjmp	.+152    	; 0x7d8 <ProcessConfigurationDescriptor+0xee>
     740:	09 2f       	mov	r16, r25
 *  This routine searches for a Streaming Audio interface descriptor containing a valid Isochronous audio endpoint.
 *
 *  \return An error code from the \ref AudioHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     742:	18 2f       	mov	r17, r24
     744:	04 c0       	rjmp	.+8      	; 0x74e <ProcessConfigurationDescriptor+0x64>
     746:	00 e0       	ldi	r16, 0x00	; 0
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint          = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     748:	10 e0       	ldi	r17, 0x00	; 0
     74a:	cc 24       	eor	r12, r12
     74c:	dd 24       	eor	r13, r13
     74e:	c1 14       	cp	r12, r1
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(AudioControlInterface) ||
     750:	d1 04       	cpc	r13, r1
     752:	59 f0       	breq	.+22     	; 0x76a <ProcessConfigurationDescriptor+0x80>
     754:	c7 01       	movw	r24, r14
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     756:	be 01       	movw	r22, r28
     758:	6d 5f       	subi	r22, 0xFD	; 253
     75a:	7f 4f       	sbci	r23, 0xFF	; 255
     75c:	44 e6       	ldi	r20, 0x64	; 100
     75e:	53 e0       	ldi	r21, 0x03	; 3
     760:	13 d4       	rcall	.+2086   	; 0xf88 <USB_GetNextDescriptorComp>
     762:	88 23       	and	r24, r24
     764:	09 f0       	breq	.+2      	; 0x768 <ProcessConfigurationDescriptor+0x7e>
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(AudioControlInterface) ||
     766:	48 c0       	rjmp	.+144    	; 0x7f8 <ProcessConfigurationDescriptor+0x10e>
     768:	17 c0       	rjmp	.+46     	; 0x798 <ProcessConfigurationDescriptor+0xae>
     76a:	c7 01       	movw	r24, r14
     76c:	be 01       	movw	r22, r28
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
			                              DComp_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Find a new Audio Control interface if the current one doesn't contain a compatible streaming interface */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     76e:	6d 5f       	subi	r22, 0xFD	; 253
     770:	7f 4f       	sbci	r23, 0xFF	; 255
     772:	42 e4       	ldi	r20, 0x42	; 66
     774:	53 e0       	ldi	r21, 0x03	; 3
     776:	08 d4       	rcall	.+2064   	; 0xf88 <USB_GetNextDescriptorComp>
     778:	88 23       	and	r24, r24
     77a:	69 f5       	brne	.+90     	; 0x7d6 <ProcessConfigurationDescriptor+0xec>
     77c:	cb 80       	ldd	r12, Y+3	; 0x03
     77e:	dc 80       	ldd	r13, Y+4	; 0x04
     780:	c7 01       	movw	r24, r14
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Save the interface in case we need to refer back to it later */
				AudioControlInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     782:	be 01       	movw	r22, r28
     784:	6d 5f       	subi	r22, 0xFD	; 253

				/* Find the next Audio Streaming interface within that Audio Control interface */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     786:	7f 4f       	sbci	r23, 0xFF	; 255
     788:	43 e5       	ldi	r20, 0x53	; 83
     78a:	53 e0       	ldi	r21, 0x03	; 3
     78c:	fd d3       	rcall	.+2042   	; 0xf88 <USB_GetNextDescriptorComp>
     78e:	88 23       	and	r24, r24
     790:	11 f5       	brne	.+68     	; 0x7d6 <ProcessConfigurationDescriptor+0xec>
     792:	0b 81       	ldd	r16, Y+3	; 0x03
     794:	1c 81       	ldd	r17, Y+4	; 0x04
     796:	3b c0       	rjmp	.+118    	; 0x80e <ProcessConfigurationDescriptor+0x124>
     798:	eb 81       	ldd	r30, Y+3	; 0x03
					return NoCompatibleInterfaceFound;
				}
			}

			/* Save the interface in case we need to refer back to it later */
			AudioStreamingInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     79a:	fc 81       	ldd	r31, Y+4	; 0x04
     79c:	42 81       	ldd	r20, Z+2	; 0x02

			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
     79e:	47 ff       	sbrs	r20, 7
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     7a0:	36 c0       	rjmp	.+108    	; 0x80e <ProcessConfigurationDescriptor+0x124>
     7a2:	90 2f       	mov	r25, r16

		/* Save the endpoint if it is an IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     7a4:	81 2f       	mov	r24, r17
     7a6:	30 97       	sbiw	r30, 0x00	; 0
     7a8:	59 f2       	breq	.-106    	; 0x740 <ProcessConfigurationDescriptor+0x56>
     7aa:	d8 01       	movw	r26, r16
     7ac:	12 96       	adiw	r26, 0x02	; 2
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint))
     7ae:	8c 91       	ld	r24, X
     7b0:	12 97       	sbiw	r26, 0x02	; 2
		/* Save the endpoint if it is an IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		  DataINEndpoint = EndpointData;
	}

	StreamingInterfaceIndex      = AudioStreamingInterface->InterfaceNumber;
     7b2:	80 93 1e 01 	sts	0x011E, r24
     7b6:	13 96       	adiw	r26, 0x03	; 3
     7b8:	8c 91       	ld	r24, X
     7ba:	80 93 1d 01 	sts	0x011D, r24
	StreamingInterfaceAltSetting = AudioStreamingInterface->AlternateSetting;
     7be:	40 93 1c 01 	sts	0x011C, r20
     7c2:	24 81       	ldd	r18, Z+4	; 0x04
     7c4:	35 81       	ldd	r19, Z+5	; 0x05
	StreamingEndpointAddress     = DataINEndpoint->EndpointAddress;
     7c6:	81 e8       	ldi	r24, 0x81	; 129
     7c8:	61 e0       	ldi	r22, 0x01	; 1

	/* Configure the Audio data IN pipe */
	Pipe_ConfigurePipe(AUDIO_DATA_IN_PIPE, EP_TYPE_ISOCHRONOUS, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 2);
     7ca:	02 e0       	ldi	r16, 0x02	; 2
     7cc:	f7 d1       	rcall	.+1006   	; 0xbbc <Pipe_ConfigurePipe>
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	03 c0       	rjmp	.+6      	; 0x7d8 <ProcessConfigurationDescriptor+0xee>
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	01 c0       	rjmp	.+2      	; 0x7d8 <ProcessConfigurationDescriptor+0xee>
     7d6:	84 e0       	ldi	r24, 0x04	; 4

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     7d8:	cc 5f       	subi	r28, 0xFC	; 252
     7da:	dd 4f       	sbci	r29, 0xFD	; 253
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	f8 94       	cli
				/* Find the next Audio Streaming interface within that Audio Control interface */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
				                              DComp_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
     7e0:	de bf       	out	0x3e, r29	; 62
	/* Configure the Audio data IN pipe */
	Pipe_ConfigurePipe(AUDIO_DATA_IN_PIPE, EP_TYPE_ISOCHRONOUS, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 2);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	cd bf       	out	0x3d, r28	; 61
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	1f 91       	pop	r17
     7ec:	0f 91       	pop	r16
     7ee:	ff 90       	pop	r15
     7f0:	ef 90       	pop	r14
     7f2:	df 90       	pop	r13
     7f4:	cf 90       	pop	r12
     7f6:	08 95       	ret
     7f8:	c7 01       	movw	r24, r14
     7fa:	be 01       	movw	r22, r28
     7fc:	6d 5f       	subi	r22, 0xFD	; 253
     7fe:	7f 4f       	sbci	r23, 0xFF	; 255
     800:	43 e5       	ldi	r20, 0x53	; 83
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Check if we haven't found an Audio Control interface yet, or if we have run out of related Audio Streaming interfaces */
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     802:	53 e0       	ldi	r21, 0x03	; 3
     804:	c1 d3       	rcall	.+1922   	; 0xf88 <USB_GetNextDescriptorComp>
     806:	88 23       	and	r24, r24
     808:	09 f0       	breq	.+2      	; 0x80c <ProcessConfigurationDescriptor+0x122>
     80a:	af cf       	rjmp	.-162    	; 0x76a <ProcessConfigurationDescriptor+0x80>
     80c:	c2 cf       	rjmp	.-124    	; 0x792 <ProcessConfigurationDescriptor+0xa8>
     80e:	90 2f       	mov	r25, r16
     810:	81 2f       	mov	r24, r17
		if (!(AudioControlInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Check if we haven't found an Audio Control interface yet, or if we have run out of related Audio Streaming interfaces */
			if (!(AudioControlInterface) ||
     812:	96 cf       	rjmp	.-212    	; 0x740 <ProcessConfigurationDescriptor+0x56>

00000814 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     814:	80 91 9e 00 	lds	r24, 0x009E
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	81 70       	andi	r24, 0x01	; 1
     81c:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     81e:	20 91 a0 00 	lds	r18, 0x00A0
     822:	2d 7f       	andi	r18, 0xFD	; 253
     824:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     828:	20 91 9e 00 	lds	r18, 0x009E
     82c:	22 60       	ori	r18, 0x02	; 2
     82e:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     832:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     836:	21 fd       	sbrc	r18, 1
     838:	fc cf       	rjmp	.-8      	; 0x832 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     83a:	20 91 9e 00 	lds	r18, 0x009E
     83e:	21 60       	ori	r18, 0x01	; 1
     840:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     844:	10 92 22 01 	sts	0x0122, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     848:	20 91 a0 00 	lds	r18, 0x00A0
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	20 72       	andi	r18, 0x20	; 32
     850:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     852:	40 91 a0 00 	lds	r20, 0x00A0
     856:	4f 7d       	andi	r20, 0xDF	; 223
     858:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     85c:	40 91 9f 00 	lds	r20, 0x009F
     860:	4f 7d       	andi	r20, 0xDF	; 223
     862:	40 93 9f 00 	sts	0x009F, r20
     866:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     868:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     86c:	55 ff       	sbrs	r21, 5
     86e:	0b c0       	rjmp	.+22     	; 0x886 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     870:	40 91 9f 00 	lds	r20, 0x009F
     874:	4f 7d       	andi	r20, 0xDF	; 223
     876:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     87a:	40 91 9f 00 	lds	r20, 0x009F
     87e:	4d 7f       	andi	r20, 0xFD	; 253
     880:	40 93 9f 00 	sts	0x009F, r20
     884:	08 c0       	rjmp	.+16     	; 0x896 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     886:	ef ec       	ldi	r30, 0xCF	; 207
     888:	f7 e0       	ldi	r31, 0x07	; 7
     88a:	31 97       	sbiw	r30, 0x01	; 1
     88c:	f1 f7       	brne	.-4      	; 0x88a <USB_Host_ResetDevice+0x76>
     88e:	00 c0       	rjmp	.+0      	; 0x890 <USB_Host_ResetDevice+0x7c>
     890:	00 00       	nop
     892:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     894:	49 f7       	brne	.-46     	; 0x868 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     896:	21 15       	cp	r18, r1
     898:	31 05       	cpc	r19, r1
     89a:	29 f0       	breq	.+10     	; 0x8a6 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     89c:	20 91 a0 00 	lds	r18, 0x00A0
     8a0:	20 62       	ori	r18, 0x20	; 32
     8a2:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     8a6:	00 97       	sbiw	r24, 0x00	; 0
     8a8:	29 f4       	brne	.+10     	; 0x8b4 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     8aa:	80 91 9e 00 	lds	r24, 0x009E
     8ae:	8e 7f       	andi	r24, 0xFE	; 254
     8b0:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     8b4:	80 91 a0 00 	lds	r24, 0x00A0
     8b8:	82 60       	ori	r24, 0x02	; 2
     8ba:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     8be:	08 95       	ret

000008c0 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     8c0:	40 91 9e 00 	lds	r20, 0x009E
     8c4:	50 e0       	ldi	r21, 0x00	; 0
     8c6:	41 70       	andi	r20, 0x01	; 1
     8c8:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     8ca:	20 91 a0 00 	lds	r18, 0x00A0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	20 72       	andi	r18, 0x20	; 32
     8d2:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     8d4:	90 91 a0 00 	lds	r25, 0x00A0
     8d8:	9f 7d       	andi	r25, 0xDF	; 223
     8da:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     8de:	90 91 9f 00 	lds	r25, 0x009F
     8e2:	9f 7d       	andi	r25, 0xDF	; 223
     8e4:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     8e8:	90 91 9e 00 	lds	r25, 0x009E
     8ec:	91 60       	ori	r25, 0x01	; 1
     8ee:	90 93 9e 00 	sts	0x009E, r25
     8f2:	26 c0       	rjmp	.+76     	; 0x940 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     8f4:	90 91 9f 00 	lds	r25, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     8f8:	95 ff       	sbrs	r25, 5
     8fa:	06 c0       	rjmp	.+12     	; 0x908 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     8fc:	90 91 9f 00 	lds	r25, 0x009F
     900:	9f 7d       	andi	r25, 0xDF	; 223
     902:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     906:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     908:	90 91 2c 01 	lds	r25, 0x012C
     90c:	91 30       	cpi	r25, 0x01	; 1
     90e:	d9 f0       	breq	.+54     	; 0x946 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     910:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     914:	94 ff       	sbrs	r25, 4
     916:	09 c0       	rjmp	.+18     	; 0x92a <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     918:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     91c:	80 91 a6 00 	lds	r24, 0x00A6
     920:	8f 7e       	andi	r24, 0xEF	; 239
     922:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     926:	82 e0       	ldi	r24, 0x02	; 2

			break;
     928:	0f c0       	rjmp	.+30     	; 0x948 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     92a:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     92e:	91 ff       	sbrs	r25, 1
     930:	07 c0       	rjmp	.+14     	; 0x940 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     932:	80 91 a6 00 	lds	r24, 0x00A6
     936:	8d 7f       	andi	r24, 0xFD	; 253
     938:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     93c:	83 e0       	ldi	r24, 0x03	; 3

			break;
     93e:	04 c0       	rjmp	.+8      	; 0x948 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     940:	88 23       	and	r24, r24
     942:	c1 f6       	brne	.-80     	; 0x8f4 <USB_Host_WaitMS+0x34>
     944:	01 c0       	rjmp	.+2      	; 0x948 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     946:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     948:	41 15       	cp	r20, r1
     94a:	51 05       	cpc	r21, r1
     94c:	29 f4       	brne	.+10     	; 0x958 <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     94e:	90 91 9e 00 	lds	r25, 0x009E
     952:	9e 7f       	andi	r25, 0xFE	; 254
     954:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     958:	21 15       	cp	r18, r1
     95a:	31 05       	cpc	r19, r1
     95c:	29 f0       	breq	.+10     	; 0x968 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     95e:	90 91 a0 00 	lds	r25, 0x00A0
     962:	90 62       	ori	r25, 0x20	; 32
     964:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     968:	08 95       	ret

0000096a <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     96a:	0f 93       	push	r16
     96c:	1f 93       	push	r17
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	28 97       	sbiw	r28, 0x08	; 8
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	f8 94       	cli
     97c:	de bf       	out	0x3e, r29	; 62
     97e:	0f be       	out	0x3f, r0	; 63
     980:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     982:	80 91 2c 01 	lds	r24, 0x012C
     986:	85 30       	cpi	r24, 0x05	; 5
     988:	09 f4       	brne	.+2      	; 0x98c <USB_Host_ProcessNextHostState+0x22>
     98a:	99 c0       	rjmp	.+306    	; 0xabe <USB_Host_ProcessNextHostState+0x154>
     98c:	86 30       	cpi	r24, 0x06	; 6
     98e:	68 f4       	brcc	.+26     	; 0x9aa <USB_Host_ProcessNextHostState+0x40>
     990:	82 30       	cpi	r24, 0x02	; 2
     992:	c1 f1       	breq	.+112    	; 0xa04 <USB_Host_ProcessNextHostState+0x9a>
     994:	83 30       	cpi	r24, 0x03	; 3
     996:	18 f4       	brcc	.+6      	; 0x99e <USB_Host_ProcessNextHostState+0x34>
     998:	88 23       	and	r24, r24
     99a:	a1 f0       	breq	.+40     	; 0x9c4 <USB_Host_ProcessNextHostState+0x5a>
     99c:	04 c1       	rjmp	.+520    	; 0xba6 <USB_Host_ProcessNextHostState+0x23c>
     99e:	83 30       	cpi	r24, 0x03	; 3
     9a0:	d9 f1       	breq	.+118    	; 0xa18 <USB_Host_ProcessNextHostState+0xae>
     9a2:	84 30       	cpi	r24, 0x04	; 4
     9a4:	09 f0       	breq	.+2      	; 0x9a8 <USB_Host_ProcessNextHostState+0x3e>
     9a6:	ff c0       	rjmp	.+510    	; 0xba6 <USB_Host_ProcessNextHostState+0x23c>
     9a8:	62 c0       	rjmp	.+196    	; 0xa6e <USB_Host_ProcessNextHostState+0x104>
     9aa:	87 30       	cpi	r24, 0x07	; 7
     9ac:	09 f4       	brne	.+2      	; 0x9b0 <USB_Host_ProcessNextHostState+0x46>
     9ae:	9e c0       	rjmp	.+316    	; 0xaec <USB_Host_ProcessNextHostState+0x182>
     9b0:	87 30       	cpi	r24, 0x07	; 7
     9b2:	08 f4       	brcc	.+2      	; 0x9b6 <USB_Host_ProcessNextHostState+0x4c>
     9b4:	8f c0       	rjmp	.+286    	; 0xad4 <USB_Host_ProcessNextHostState+0x16a>
     9b6:	88 30       	cpi	r24, 0x08	; 8
     9b8:	09 f4       	brne	.+2      	; 0x9bc <USB_Host_ProcessNextHostState+0x52>
     9ba:	b8 c0       	rjmp	.+368    	; 0xb2c <USB_Host_ProcessNextHostState+0x1c2>
     9bc:	89 30       	cpi	r24, 0x09	; 9
     9be:	09 f0       	breq	.+2      	; 0x9c2 <USB_Host_ProcessNextHostState+0x58>
     9c0:	f2 c0       	rjmp	.+484    	; 0xba6 <USB_Host_ProcessNextHostState+0x23c>
     9c2:	d9 c0       	rjmp	.+434    	; 0xb76 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     9c4:	00 91 1f 01 	lds	r16, 0x011F
     9c8:	10 91 20 01 	lds	r17, 0x0120
     9cc:	01 15       	cp	r16, r1
     9ce:	11 05       	cpc	r17, r1
     9d0:	09 f4       	brne	.+2      	; 0x9d4 <USB_Host_ProcessNextHostState+0x6a>
     9d2:	e9 c0       	rjmp	.+466    	; 0xba6 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	74 df       	rcall	.-280    	; 0x8c0 <USB_Host_WaitMS>
     9d8:	68 2f       	mov	r22, r24
     9da:	88 23       	and	r24, r24
     9dc:	31 f0       	breq	.+12     	; 0x9ea <USB_Host_ProcessNextHostState+0x80>
     9de:	80 91 21 01 	lds	r24, 0x0121
				{
					USB_HostState = PostWaitState;
     9e2:	80 93 2c 01 	sts	0x012C, r24
     9e6:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     9e8:	d2 c0       	rjmp	.+420    	; 0xb8e <USB_Host_ProcessNextHostState+0x224>
					break;
     9ea:	01 50       	subi	r16, 0x01	; 1
				}

				if (!(--WaitMSRemaining))
     9ec:	10 40       	sbci	r17, 0x00	; 0
     9ee:	10 93 20 01 	sts	0x0120, r17
     9f2:	00 93 1f 01 	sts	0x011F, r16
     9f6:	01 15       	cp	r16, r1
     9f8:	11 05       	cpc	r17, r1
     9fa:	09 f0       	breq	.+2      	; 0x9fe <USB_Host_ProcessNextHostState+0x94>
     9fc:	d4 c0       	rjmp	.+424    	; 0xba6 <USB_Host_ProcessNextHostState+0x23c>
     9fe:	80 91 21 01 	lds	r24, 0x0121
				  USB_HostState = PostWaitState;
     a02:	07 c0       	rjmp	.+14     	; 0xa12 <USB_Host_ProcessNextHostState+0xa8>
     a04:	88 ee       	ldi	r24, 0xE8	; 232
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     a06:	93 e0       	ldi	r25, 0x03	; 3
     a08:	90 93 20 01 	sts	0x0120, r25
     a0c:	80 93 1f 01 	sts	0x011F, r24
     a10:	83 e0       	ldi	r24, 0x03	; 3

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     a12:	80 93 2c 01 	sts	0x012C, r24
     a16:	c7 c0       	rjmp	.+398    	; 0xba6 <USB_Host_ProcessNextHostState+0x23c>
			break;
     a18:	80 91 1f 01 	lds	r24, 0x011F
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     a1c:	90 91 20 01 	lds	r25, 0x0120
     a20:	9c 01       	movw	r18, r24
     a22:	21 50       	subi	r18, 0x01	; 1
     a24:	30 40       	sbci	r19, 0x00	; 0
     a26:	30 93 20 01 	sts	0x0120, r19
     a2a:	20 93 1f 01 	sts	0x011F, r18
     a2e:	00 97       	sbiw	r24, 0x00	; 0
     a30:	39 f0       	breq	.+14     	; 0xa40 <USB_Host_ProcessNextHostState+0xd6>
     a32:	8f ec       	ldi	r24, 0xCF	; 207
     a34:	97 e0       	ldi	r25, 0x07	; 7
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	f1 f7       	brne	.-4      	; 0xa36 <USB_Host_ProcessNextHostState+0xcc>
     a3a:	00 c0       	rjmp	.+0      	; 0xa3c <USB_Host_ProcessNextHostState+0xd2>
     a3c:	00 00       	nop
     a3e:	b3 c0       	rjmp	.+358    	; 0xba6 <USB_Host_ProcessNextHostState+0x23c>
     a40:	77 98       	cbi	0x0e, 7	; 14
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     a42:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     a46:	80 61       	ori	r24, 0x10	; 16
     a48:	80 93 d8 00 	sts	0x00D8, r24
     a4c:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     a50:	8b 7f       	andi	r24, 0xFB	; 251
     a52:	80 93 dd 00 	sts	0x00DD, r24
     a56:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON |=  (1 << UVCONE);
     a5a:	80 61       	ori	r24, 0x10	; 16
     a5c:	80 93 d7 00 	sts	0x00D7, r24
     a60:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     a64:	82 60       	ori	r24, 0x02	; 2
     a66:	80 93 dd 00 	sts	0x00DD, r24
     a6a:	84 e0       	ldi	r24, 0x04	; 4
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     a6c:	d2 cf       	rjmp	.-92     	; 0xa12 <USB_Host_ProcessNextHostState+0xa8>
     a6e:	80 91 9f 00 	lds	r24, 0x009F
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     a72:	80 ff       	sbrs	r24, 0
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     a74:	98 c0       	rjmp	.+304    	; 0xba6 <USB_Host_ProcessNextHostState+0x23c>
     a76:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     a7a:	8e 7f       	andi	r24, 0xFE	; 254
     a7c:	80 93 9f 00 	sts	0x009F, r24
     a80:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     a84:	8d 7f       	andi	r24, 0xFD	; 253
     a86:	80 93 9f 00 	sts	0x009F, r24
     a8a:	80 91 df 00 	lds	r24, 0x00DF
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     a8e:	8d 7f       	andi	r24, 0xFD	; 253
     a90:	80 93 df 00 	sts	0x00DF, r24
     a94:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     a98:	82 60       	ori	r24, 0x02	; 2
     a9a:	80 93 de 00 	sts	0x00DE, r24
     a9e:	80 91 9e 00 	lds	r24, 0x009E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     aa2:	81 60       	ori	r24, 0x01	; 1
     aa4:	80 93 9e 00 	sts	0x009E, r24
     aa8:	ee d0       	rcall	.+476    	; 0xc86 <Pipe_ClearPipes>

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     aaa:	10 92 2c 01 	sts	0x012C, r1

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     aae:	84 e6       	ldi	r24, 0x64	; 100
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	90 93 20 01 	sts	0x0120, r25
     ab6:	80 93 1f 01 	sts	0x011F, r24
     aba:	85 e0       	ldi	r24, 0x05	; 5
     abc:	59 c0       	rjmp	.+178    	; 0xb70 <USB_Host_ProcessNextHostState+0x206>
     abe:	aa de       	rcall	.-684    	; 0x814 <USB_Host_ResetDevice>
     ac0:	10 92 2c 01 	sts	0x012C, r1
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     ac4:	88 ec       	ldi	r24, 0xC8	; 200

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	90 93 20 01 	sts	0x0120, r25
     acc:	80 93 1f 01 	sts	0x011F, r24
     ad0:	86 e0       	ldi	r24, 0x06	; 6
     ad2:	4e c0       	rjmp	.+156    	; 0xb70 <USB_Host_ProcessNextHostState+0x206>
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	40 e0       	ldi	r20, 0x00	; 0
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     ada:	20 e4       	ldi	r18, 0x40	; 64
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	01 e0       	ldi	r16, 0x01	; 1
     ae0:	6d d0       	rcall	.+218    	; 0xbbc <Pipe_ConfigurePipe>
     ae2:	88 23       	and	r24, r24
     ae4:	09 f4       	brne	.+2      	; 0xae8 <USB_Host_ProcessNextHostState+0x17e>
     ae6:	4f c0       	rjmp	.+158    	; 0xb86 <USB_Host_ProcessNextHostState+0x21c>
     ae8:	87 e0       	ldi	r24, 0x07	; 7
     aea:	93 cf       	rjmp	.-218    	; 0xa12 <USB_Host_ProcessNextHostState+0xa8>
     aec:	a4 e2       	ldi	r26, 0x24	; 36
     aee:	b1 e0       	ldi	r27, 0x01	; 1
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     af0:	e3 e0       	ldi	r30, 0x03	; 3
     af2:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     af4:	88 e0       	ldi	r24, 0x08	; 8
     af6:	01 90       	ld	r0, Z+
     af8:	0d 92       	st	X+, r0
     afa:	81 50       	subi	r24, 0x01	; 1
     afc:	e1 f7       	brne	.-8      	; 0xaf6 <USB_Host_ProcessNextHostState+0x18c>
     afe:	10 92 a7 00 	sts	0x00A7, r1
     b02:	ce 01       	movw	r24, r28
     b04:	01 96       	adiw	r24, 0x01	; 1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     b06:	b0 d2       	rcall	.+1376   	; 0x1068 <USB_Host_SendControlRequest>
     b08:	68 2f       	mov	r22, r24
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     b0a:	88 23       	and	r24, r24
     b0c:	09 f0       	breq	.+2      	; 0xb10 <USB_Host_ProcessNextHostState+0x1a6>
     b0e:	3e c0       	rjmp	.+124    	; 0xb8c <USB_Host_ProcessNextHostState+0x222>
     b10:	88 85       	ldd	r24, Y+8	; 0x08
     b12:	80 93 13 01 	sts	0x0113, r24
     b16:	7e de       	rcall	.-772    	; 0x814 <USB_Host_ResetDevice>
     b18:	10 92 2c 01 	sts	0x012C, r1
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     b1c:	88 ec       	ldi	r24, 0xC8	; 200
     b1e:	90 e0       	ldi	r25, 0x00	; 0

			USB_Host_ResetDevice();
     b20:	90 93 20 01 	sts	0x0120, r25

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     b24:	80 93 1f 01 	sts	0x011F, r24
     b28:	88 e0       	ldi	r24, 0x08	; 8
     b2a:	22 c0       	rjmp	.+68     	; 0xb70 <USB_Host_ProcessNextHostState+0x206>
     b2c:	20 91 13 01 	lds	r18, 0x0113
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	40 e0       	ldi	r20, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     b38:	01 e0       	ldi	r16, 0x01	; 1
     b3a:	40 d0       	rcall	.+128    	; 0xbbc <Pipe_ConfigurePipe>
     b3c:	88 23       	and	r24, r24
     b3e:	19 f1       	breq	.+70     	; 0xb86 <USB_Host_ProcessNextHostState+0x21c>
     b40:	a4 e2       	ldi	r26, 0x24	; 36
     b42:	b1 e0       	ldi	r27, 0x01	; 1
     b44:	eb e0       	ldi	r30, 0x0B	; 11
     b46:	f1 e0       	ldi	r31, 0x01	; 1
     b48:	88 e0       	ldi	r24, 0x08	; 8
     b4a:	01 90       	ld	r0, Z+
     b4c:	0d 92       	st	X+, r0
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     b4e:	81 50       	subi	r24, 0x01	; 1
     b50:	e1 f7       	brne	.-8      	; 0xb4a <USB_Host_ProcessNextHostState+0x1e0>
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	88 d2       	rcall	.+1296   	; 0x1068 <USB_Host_SendControlRequest>
     b58:	68 2f       	mov	r22, r24
     b5a:	88 23       	and	r24, r24
     b5c:	b9 f4       	brne	.+46     	; 0xb8c <USB_Host_ProcessNextHostState+0x222>
     b5e:	10 92 2c 01 	sts	0x012C, r1
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     b62:	84 e6       	ldi	r24, 0x64	; 100
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	90 93 20 01 	sts	0x0120, r25
     b6a:	80 93 1f 01 	sts	0x011F, r24
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     b6e:	89 e0       	ldi	r24, 0x09	; 9
     b70:	80 93 21 01 	sts	0x0121, r24
     b74:	18 c0       	rjmp	.+48     	; 0xba6 <USB_Host_ProcessNextHostState+0x23c>
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	80 93 a1 00 	sts	0x00A1, r24
     b7c:	8a e0       	ldi	r24, 0x0A	; 10
     b7e:	80 93 2c 01 	sts	0x012C, r24
     b82:	1e dc       	rcall	.-1988   	; 0x3c0 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     b84:	10 c0       	rjmp	.+32     	; 0xba6 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	84 e0       	ldi	r24, 0x04	; 4
     b8a:	01 c0       	rjmp	.+2      	; 0xb8e <USB_Host_ProcessNextHostState+0x224>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     b8c:	83 e0       	ldi	r24, 0x03	; 3
     b8e:	90 91 2c 01 	lds	r25, 0x012C

			EVENT_USB_Host_DeviceEnumerationComplete();
     b92:	91 30       	cpi	r25, 0x01	; 1
     b94:	41 f0       	breq	.+16     	; 0xba6 <USB_Host_ProcessNextHostState+0x23c>
			break;
     b96:	dc dc       	rcall	.-1608   	; 0x550 <EVENT_USB_Host_DeviceEnumerationFailed>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     b98:	80 91 dd 00 	lds	r24, 0x00DD
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     b9c:	81 60       	ori	r24, 0x01	; 1
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     b9e:	80 93 dd 00 	sts	0x00DD, r24

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     ba2:	09 dc       	rcall	.-2030   	; 0x3b6 <EVENT_USB_Host_DeviceUnattached>
     ba4:	9c d0       	rcall	.+312    	; 0xcde <USB_ResetInterface>
     ba6:	28 96       	adiw	r28, 0x08	; 8
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16

		USB_ResetInterface();
     bba:	08 95       	ret

00000bbc <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     bbc:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     bbe:	58 2f       	mov	r21, r24
     bc0:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     bc2:	87 ff       	sbrs	r24, 7
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <Pipe_ConfigurePipe+0xe>
     bc6:	80 e1       	ldi	r24, 0x10	; 16
     bc8:	01 c0       	rjmp	.+2      	; 0xbcc <Pipe_ConfigurePipe+0x10>
     bca:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     bcc:	57 30       	cpi	r21, 0x07	; 7
     bce:	08 f0       	brcs	.+2      	; 0xbd2 <Pipe_ConfigurePipe+0x16>
     bd0:	57 c0       	rjmp	.+174    	; 0xc80 <Pipe_ConfigurePipe+0xc4>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     bd2:	66 23       	and	r22, r22
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     bd6:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     bd8:	4f 70       	andi	r20, 0x0F	; 15
     bda:	62 95       	swap	r22
     bdc:	66 0f       	add	r22, r22
     bde:	66 0f       	add	r22, r22
     be0:	60 7c       	andi	r22, 0xC0	; 192
     be2:	64 2b       	or	r22, r20
     be4:	68 2b       	or	r22, r24
     be6:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     be8:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     bea:	40 93 a7 00 	sts	0x00A7, r20
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     bee:	45 17       	cp	r20, r21
     bf0:	a9 f4       	brne	.+42     	; 0xc1c <Pipe_ConfigurePipe+0x60>
     bf2:	04 c0       	rjmp	.+8      	; 0xbfc <Pipe_ConfigurePipe+0x40>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     bf4:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	03 c0       	rjmp	.+6      	; 0xc02 <Pipe_ConfigurePipe+0x46>
     bfc:	88 e0       	ldi	r24, 0x08	; 8
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     c02:	82 17       	cp	r24, r18
     c04:	93 07       	cpc	r25, r19
     c06:	10 f4       	brcc	.+4      	; 0xc0c <Pipe_ConfigurePipe+0x50>
     c08:	75 30       	cpi	r23, 0x05	; 5
     c0a:	a1 f7       	brne	.-24     	; 0xbf4 <Pipe_ConfigurePipe+0x38>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     c0c:	87 2f       	mov	r24, r23
     c0e:	82 95       	swap	r24
     c10:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     c12:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     c14:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     c16:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     c18:	e0 e0       	ldi	r30, 0x00	; 0
     c1a:	08 c0       	rjmp	.+16     	; 0xc2c <Pipe_ConfigurePipe+0x70>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     c1c:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     c20:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     c24:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     c28:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     c2c:	81 ff       	sbrs	r24, 1
     c2e:	20 c0       	rjmp	.+64     	; 0xc70 <Pipe_ConfigurePipe+0xb4>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     c30:	90 91 a9 00 	lds	r25, 0x00A9
     c34:	9e 7f       	andi	r25, 0xFE	; 254
     c36:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     c3a:	90 91 ab 00 	lds	r25, 0x00AB
     c3e:	9d 7f       	andi	r25, 0xFD	; 253
     c40:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     c44:	90 91 a9 00 	lds	r25, 0x00A9
     c48:	91 60       	ori	r25, 0x01	; 1
     c4a:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     c4e:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     c52:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     c56:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     c5a:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     c5e:	80 91 a9 00 	lds	r24, 0x00A9
     c62:	80 62       	ori	r24, 0x20	; 32
     c64:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     c68:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     c6c:	87 ff       	sbrs	r24, 7
     c6e:	08 c0       	rjmp	.+16     	; 0xc80 <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     c70:	4f 5f       	subi	r20, 0xFF	; 255
     c72:	47 30       	cpi	r20, 0x07	; 7
     c74:	09 f0       	breq	.+2      	; 0xc78 <Pipe_ConfigurePipe+0xbc>
     c76:	b9 cf       	rjmp	.-142    	; 0xbea <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     c78:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	01 c0       	rjmp	.+2      	; 0xc82 <Pipe_ConfigurePipe+0xc6>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     c80:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     c82:	0f 91       	pop	r16
     c84:	08 95       	ret

00000c86 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     c86:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     c90:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     c94:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     c98:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     c9c:	90 91 a9 00 	lds	r25, 0x00A9
     ca0:	9e 7f       	andi	r25, 0xFE	; 254
     ca2:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     ca6:	8f 5f       	subi	r24, 0xFF	; 255
     ca8:	87 30       	cpi	r24, 0x07	; 7
     caa:	81 f7       	brne	.-32     	; 0xc8c <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     cac:	08 95       	ret

00000cae <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     cae:	75 d0       	rcall	.+234    	; 0xd9a <USB_INT_DisableAllInterrupts>
     cb0:	7c d0       	rcall	.+248    	; 0xdaa <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     cb2:	e0 ee       	ldi	r30, 0xE0	; 224
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     cb6:	80 81       	ld	r24, Z
     cb8:	81 60       	ori	r24, 0x01	; 1
     cba:	80 83       	st	Z, r24
     cbc:	e8 ed       	ldi	r30, 0xD8	; 216
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     cc0:	80 81       	ld	r24, Z
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	80 83       	st	Z, r24
     cc6:	19 bc       	out	0x29, r1	; 41
     cc8:	a7 ed       	ldi	r26, 0xD7	; 215
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     cca:	b0 e0       	ldi	r27, 0x00	; 0

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     ccc:	8c 91       	ld	r24, X
     cce:	8e 7f       	andi	r24, 0xFE	; 254
     cd0:	8c 93       	st	X, r24
     cd2:	80 81       	ld	r24, Z
     cd4:	8f 7e       	andi	r24, 0xEF	; 239
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     cd6:	80 83       	st	Z, r24
     cd8:	10 92 23 01 	sts	0x0123, r1

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     cdc:	08 95       	ret

00000cde <USB_ResetInterface>:
     cde:	5d d0       	rcall	.+186    	; 0xd9a <USB_INT_DisableAllInterrupts>
}
     ce0:	64 d0       	rcall	.+200    	; 0xdaa <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     ce2:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     ce6:	8f 77       	andi	r24, 0x7F	; 127
     ce8:	80 93 d8 00 	sts	0x00D8, r24
     cec:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
     cf0:	80 68       	ori	r24, 0x80	; 128
     cf2:	80 93 d8 00 	sts	0x00D8, r24
     cf6:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     cfa:	8f 7d       	andi	r24, 0xDF	; 223
     cfc:	80 93 d8 00 	sts	0x00D8, r24
     d00:	80 91 d7 00 	lds	r24, 0x00D7
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     d04:	8f 77       	andi	r24, 0x7F	; 127
     d06:	80 93 d7 00 	sts	0x00D7, r24
     d0a:	8c e0       	ldi	r24, 0x0C	; 12
     d0c:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     d0e:	8e e0       	ldi	r24, 0x0E	; 14
     d10:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     d12:	09 b4       	in	r0, 0x29	; 41
     d14:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     d16:	fd cf       	rjmp	.-6      	; 0xd12 <USB_ResetInterface+0x34>
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	80 93 2c 01 	sts	0x012C, r24
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     d1e:	10 92 22 01 	sts	0x0122, r1
	USB_Host_ConfigurationNumber = 0;
     d22:	80 e4       	ldi	r24, 0x40	; 64
     d24:	80 93 13 01 	sts	0x0113, r24
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     d28:	80 91 d8 00 	lds	r24, 0x00D8
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     d2c:	80 64       	ori	r24, 0x40	; 64
     d2e:	80 93 d8 00 	sts	0x00D8, r24
     d32:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d36:	81 60       	ori	r24, 0x01	; 1
     d38:	80 93 dd 00 	sts	0x00DD, r24
     d3c:	80 91 dd 00 	lds	r24, 0x00DD
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     d40:	84 60       	ori	r24, 0x04	; 4
     d42:	80 93 dd 00 	sts	0x00DD, r24
     d46:	80 91 d7 00 	lds	r24, 0x00D7
				UHWCON &= ~(1 << UVCONE);
     d4a:	8f 7e       	andi	r24, 0xEF	; 239
     d4c:	80 93 d7 00 	sts	0x00D7, r24
     d50:	6f 9a       	sbi	0x0d, 7	; 13
     d52:	77 9a       	sbi	0x0e, 7	; 14

				DDRE   |=  (1 << 7);
     d54:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     d58:	81 60       	ori	r24, 0x01	; 1
     d5a:	80 93 de 00 	sts	0x00DE, r24
     d5e:	80 91 de 00 	lds	r24, 0x00DE
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     d62:	84 60       	ori	r24, 0x04	; 4
     d64:	80 93 de 00 	sts	0x00DE, r24
     d68:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     d6c:	8e 7f       	andi	r24, 0xFE	; 254
     d6e:	80 93 e0 00 	sts	0x00E0, r24
     d72:	80 91 d8 00 	lds	r24, 0x00D8

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     d76:	80 61       	ori	r24, 0x10	; 16
     d78:	80 93 d8 00 	sts	0x00D8, r24
     d7c:	08 95       	ret

00000d7e <USB_Init>:
     d7e:	e8 ed       	ldi	r30, 0xD8	; 216
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     d80:	f0 e0       	ldi	r31, 0x00	; 0
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     d82:	80 81       	ld	r24, Z
     d84:	8f 7e       	andi	r24, 0xEF	; 239
     d86:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     d88:	e7 ed       	ldi	r30, 0xD7	; 215
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	81 60       	ori	r24, 0x01	; 1
     d90:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	80 93 23 01 	sts	0x0123, r24

	USB_ResetInterface();
     d98:	a2 cf       	rjmp	.-188    	; 0xcde <USB_ResetInterface>

00000d9a <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     d9a:	e8 ed       	ldi	r30, 0xD8	; 216
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	8c 7f       	andi	r24, 0xFC	; 252
     da2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     da4:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     da8:	08 95       	ret

00000daa <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     daa:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     dae:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     db2:	08 95       	ret

00000db4 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     db4:	1f 92       	push	r1
     db6:	0f 92       	push	r0
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	0f 92       	push	r0
     dbc:	0b b6       	in	r0, 0x3b	; 59
     dbe:	0f 92       	push	r0
     dc0:	11 24       	eor	r1, r1
     dc2:	2f 93       	push	r18
     dc4:	3f 93       	push	r19
     dc6:	4f 93       	push	r20
     dc8:	5f 93       	push	r21
     dca:	6f 93       	push	r22
     dcc:	7f 93       	push	r23
     dce:	8f 93       	push	r24
     dd0:	9f 93       	push	r25
     dd2:	af 93       	push	r26
     dd4:	bf 93       	push	r27
     dd6:	ef 93       	push	r30
     dd8:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     dda:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     dde:	85 ff       	sbrs	r24, 5
     de0:	0a c0       	rjmp	.+20     	; 0xdf6 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     de2:	80 91 a0 00 	lds	r24, 0x00A0
     de6:	85 ff       	sbrs	r24, 5
     de8:	06 c0       	rjmp	.+12     	; 0xdf6 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     dea:	80 91 9f 00 	lds	r24, 0x009F
     dee:	8f 7d       	andi	r24, 0xDF	; 223
     df0:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     df4:	10 d1       	rcall	.+544    	; 0x1016 <USB_Event_Stub>
     df6:	80 91 9f 00 	lds	r24, 0x009F
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     dfa:	81 ff       	sbrs	r24, 1
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     dfc:	15 c0       	rjmp	.+42     	; 0xe28 <__vector_10+0x74>
     dfe:	80 91 a0 00 	lds	r24, 0x00A0
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     e02:	81 ff       	sbrs	r24, 1
     e04:	11 c0       	rjmp	.+34     	; 0xe28 <__vector_10+0x74>
     e06:	80 91 9f 00 	lds	r24, 0x009F
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     e0a:	8d 7f       	andi	r24, 0xFD	; 253
     e0c:	80 93 9f 00 	sts	0x009F, r24
     e10:	80 91 9f 00 	lds	r24, 0x009F
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     e14:	8e 7f       	andi	r24, 0xFE	; 254
     e16:	80 93 9f 00 	sts	0x009F, r24
     e1a:	80 91 a0 00 	lds	r24, 0x00A0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     e1e:	8d 7f       	andi	r24, 0xFD	; 253
     e20:	80 93 a0 00 	sts	0x00A0, r24
     e24:	c8 da       	rcall	.-2672   	; 0x3b6 <EVENT_USB_Host_DeviceUnattached>
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     e26:	5b df       	rcall	.-330    	; 0xcde <USB_ResetInterface>
     e28:	80 91 df 00 	lds	r24, 0x00DF

		USB_ResetInterface();
     e2c:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     e2e:	15 c0       	rjmp	.+42     	; 0xe5a <__vector_10+0xa6>
     e30:	80 91 de 00 	lds	r24, 0x00DE
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     e34:	81 ff       	sbrs	r24, 1
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     e36:	11 c0       	rjmp	.+34     	; 0xe5a <__vector_10+0xa6>
     e38:	80 91 df 00 	lds	r24, 0x00DF
     e3c:	8d 7f       	andi	r24, 0xFD	; 253
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     e3e:	80 93 df 00 	sts	0x00DF, r24
     e42:	77 98       	cbi	0x0e, 7	; 14
     e44:	80 91 dd 00 	lds	r24, 0x00DD
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     e48:	81 60       	ori	r24, 0x01	; 1
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e4a:	80 93 dd 00 	sts	0x00DD, r24
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	60 db       	rcall	.-2368   	; 0x512 <EVENT_USB_Host_HostError>
     e52:	b1 da       	rcall	.-2718   	; 0x3b6 <EVENT_USB_Host_DeviceUnattached>
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	80 93 2c 01 	sts	0x012C, r24
		EVENT_USB_Host_DeviceUnattached();
     e5a:	80 91 df 00 	lds	r24, 0x00DF

		USB_HostState = HOST_STATE_Unattached;
     e5e:	80 ff       	sbrs	r24, 0
     e60:	17 c0       	rjmp	.+46     	; 0xe90 <__vector_10+0xdc>
     e62:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     e66:	80 ff       	sbrs	r24, 0
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     e68:	13 c0       	rjmp	.+38     	; 0xe90 <__vector_10+0xdc>
     e6a:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     e6e:	8e 7f       	andi	r24, 0xFE	; 254
     e70:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     e74:	80 91 de 00 	lds	r24, 0x00DE
     e78:	8e 7f       	andi	r24, 0xFE	; 254
     e7a:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     e7e:	96 da       	rcall	.-2772   	; 0x3ac <EVENT_USB_Host_DeviceAttached>
     e80:	80 91 a0 00 	lds	r24, 0x00A0
     e84:	82 60       	ori	r24, 0x02	; 2
     e86:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     e8a:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     e8c:	80 93 2c 01 	sts	0x012C, r24
     e90:	80 91 df 00 	lds	r24, 0x00DF
     e94:	82 ff       	sbrs	r24, 2

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     e96:	0e c0       	rjmp	.+28     	; 0xeb4 <__vector_10+0x100>
     e98:	80 91 de 00 	lds	r24, 0x00DE
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     e9c:	82 ff       	sbrs	r24, 2
     e9e:	0a c0       	rjmp	.+20     	; 0xeb4 <__vector_10+0x100>
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     ea0:	80 91 df 00 	lds	r24, 0x00DF
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     ea4:	8b 7f       	andi	r24, 0xFB	; 251
     ea6:	80 93 df 00 	sts	0x00DF, r24
     eaa:	82 e0       	ldi	r24, 0x02	; 2
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	50 db       	rcall	.-2400   	; 0x550 <EVENT_USB_Host_DeviceEnumerationFailed>
     eb0:	82 da       	rcall	.-2812   	; 0x3b6 <EVENT_USB_Host_DeviceUnattached>
     eb2:	15 df       	rcall	.-470    	; 0xcde <USB_ResetInterface>
     eb4:	ff 91       	pop	r31
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     eb6:	ef 91       	pop	r30
     eb8:	bf 91       	pop	r27
     eba:	af 91       	pop	r26
     ebc:	9f 91       	pop	r25
		EVENT_USB_Host_DeviceUnattached();
     ebe:	8f 91       	pop	r24
     ec0:	7f 91       	pop	r23

		USB_ResetInterface();
     ec2:	6f 91       	pop	r22
     ec4:	5f 91       	pop	r21
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     ec6:	4f 91       	pop	r20
     ec8:	3f 91       	pop	r19
     eca:	2f 91       	pop	r18
     ecc:	0f 90       	pop	r0
     ece:	0b be       	out	0x3b, r0	; 59
     ed0:	0f 90       	pop	r0
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	0f 90       	pop	r0
     ed6:	1f 90       	pop	r1
     ed8:	18 95       	reti

00000eda <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     eda:	cf 92       	push	r12
     edc:	df 92       	push	r13
     ede:	ef 92       	push	r14
     ee0:	ff 92       	push	r15
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	29 97       	sbiw	r28, 0x09	; 9
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	6b 01       	movw	r12, r22
     efc:	8a 01       	movw	r16, r20
     efe:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f00:	90 e8       	ldi	r25, 0x80	; 128
     f02:	90 93 24 01 	sts	0x0124, r25
     f06:	96 e0       	ldi	r25, 0x06	; 6
     f08:	90 93 25 01 	sts	0x0125, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f12:	90 93 27 01 	sts	0x0127, r25
     f16:	80 93 26 01 	sts	0x0126, r24
     f1a:	10 92 29 01 	sts	0x0129, r1
     f1e:	10 92 28 01 	sts	0x0128, r1
     f22:	89 e0       	ldi	r24, 0x09	; 9
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	90 93 2b 01 	sts	0x012B, r25
     f2a:	80 93 2a 01 	sts	0x012A, r24
     f2e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     f32:	ce 01       	movw	r24, r28
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	98 d0       	rcall	.+304    	; 0x1068 <USB_Host_SendControlRequest>
     f38:	88 23       	and	r24, r24
     f3a:	b9 f4       	brne	.+46     	; 0xf6a <USB_Host_GetDeviceConfigDescriptor+0x90>
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     f3e:	9c 81       	ldd	r25, Y+4	; 0x04
     f40:	f6 01       	movw	r30, r12
     f42:	91 83       	std	Z+1, r25	; 0x01
     f44:	80 83       	st	Z, r24
     f46:	e8 16       	cp	r14, r24

	if (*ConfigSizePtr > BufferSize)
     f48:	f9 06       	cpc	r15, r25
     f4a:	70 f0       	brcs	.+28     	; 0xf68 <USB_Host_GetDeviceConfigDescriptor+0x8e>
     f4c:	90 93 2b 01 	sts	0x012B, r25
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     f50:	80 93 2a 01 	sts	0x012A, r24
     f54:	c8 01       	movw	r24, r16

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     f56:	88 d0       	rcall	.+272    	; 0x1068 <USB_Host_SendControlRequest>
     f58:	88 23       	and	r24, r24
     f5a:	39 f4       	brne	.+14     	; 0xf6a <USB_Host_GetDeviceConfigDescriptor+0x90>
     f5c:	f8 01       	movw	r30, r16
     f5e:	91 81       	ldd	r25, Z+1	; 0x01
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     f60:	92 30       	cpi	r25, 0x02	; 2
     f62:	19 f0       	breq	.+6      	; 0xf6a <USB_Host_GetDeviceConfigDescriptor+0x90>
     f64:	86 e0       	ldi	r24, 0x06	; 6
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     f68:	85 e0       	ldi	r24, 0x05	; 5
     f6a:	29 96       	adiw	r28, 0x09	; 9
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     f6c:	0f b6       	in	r0, 0x3f	; 63

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     f6e:	f8 94       	cli
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	df 90       	pop	r13
     f84:	cf 90       	pop	r12
     f86:	08 95       	ret

00000f88 <USB_GetNextDescriptorComp>:
     f88:	af 92       	push	r10
     f8a:	bf 92       	push	r11
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     f8c:	cf 92       	push	r12
     f8e:	df 92       	push	r13
     f90:	ef 92       	push	r14
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	7c 01       	movw	r14, r24
     f9e:	8b 01       	movw	r16, r22
     fa0:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     fa2:	28 c0       	rjmp	.+80     	; 0xff4 <USB_GetNextDescriptorComp+0x6c>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     fa4:	f8 01       	movw	r30, r16
     fa6:	c0 80       	ld	r12, Z
     fa8:	d1 80       	ldd	r13, Z+1	; 0x01
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     faa:	f6 01       	movw	r30, r12
     fac:	80 81       	ld	r24, Z
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	9e 01       	movw	r18, r28
     fb2:	8c 17       	cp	r24, r28
     fb4:	9d 07       	cpc	r25, r29
     fb6:	08 f4       	brcc	.+2      	; 0xfba <USB_GetNextDescriptorComp+0x32>
     fb8:	9c 01       	movw	r18, r24

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     fba:	c6 01       	movw	r24, r12
     fbc:	82 0f       	add	r24, r18
     fbe:	93 1f       	adc	r25, r19
     fc0:	f8 01       	movw	r30, r16
     fc2:	91 83       	std	Z+1, r25	; 0x01
     fc4:	80 83       	st	Z, r24
				*BytesRem      -= CurrDescriptorSize;
     fc6:	f7 01       	movw	r30, r14
     fc8:	80 81       	ld	r24, Z
     fca:	91 81       	ldd	r25, Z+1	; 0x01
     fcc:	82 1b       	sub	r24, r18
     fce:	93 0b       	sbc	r25, r19
     fd0:	91 83       	std	Z+1, r25	; 0x01
     fd2:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     fd4:	f8 01       	movw	r30, r16
     fd6:	80 81       	ld	r24, Z
     fd8:	91 81       	ldd	r25, Z+1	; 0x01
     fda:	f5 01       	movw	r30, r10
     fdc:	09 95       	icall
     fde:	82 30       	cpi	r24, 0x02	; 2
     fe0:	49 f0       	breq	.+18     	; 0xff4 <USB_GetNextDescriptorComp+0x6c>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	69 f4       	brne	.+26     	; 0x1000 <USB_GetNextDescriptorComp+0x78>
			{
				*CurrConfigLoc = PrevDescLoc;
     fe6:	f8 01       	movw	r30, r16
     fe8:	d1 82       	std	Z+1, r13	; 0x01
     fea:	c0 82       	st	Z, r12
				*BytesRem      = PrevBytesRem;
     fec:	f7 01       	movw	r30, r14
     fee:	d1 83       	std	Z+1, r29	; 0x01
     ff0:	c0 83       	st	Z, r28
     ff2:	06 c0       	rjmp	.+12     	; 0x1000 <USB_GetNextDescriptorComp+0x78>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     ff4:	f7 01       	movw	r30, r14
     ff6:	c0 81       	ld	r28, Z
     ff8:	d1 81       	ldd	r29, Z+1	; 0x01
     ffa:	20 97       	sbiw	r28, 0x00	; 0
     ffc:	99 f6       	brne	.-90     	; 0xfa4 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     ffe:	82 e0       	ldi	r24, 0x02	; 2
}
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	1f 91       	pop	r17
    1006:	0f 91       	pop	r16
    1008:	ff 90       	pop	r15
    100a:	ef 90       	pop	r14
    100c:	df 90       	pop	r13
    100e:	cf 90       	pop	r12
    1010:	bf 90       	pop	r11
    1012:	af 90       	pop	r10
    1014:	08 95       	ret

00001016 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1016:	08 95       	ret

00001018 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1018:	1f 93       	push	r17
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	18 2f       	mov	r17, r24
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1020:	c9 ee       	ldi	r28, 0xE9	; 233
    1022:	d3 e0       	ldi	r29, 0x03	; 3
    1024:	06 c0       	rjmp	.+12     	; 0x1032 <USB_Host_WaitForIOS+0x1a>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	4b dc       	rcall	.-1898   	; 0x8c0 <USB_Host_WaitMS>
    102a:	88 23       	and	r24, r24
    102c:	c9 f4       	brne	.+50     	; 0x1060 <USB_Host_WaitForIOS+0x48>
    102e:	21 97       	sbiw	r28, 0x01	; 1
    1030:	b1 f0       	breq	.+44     	; 0x105e <USB_Host_WaitForIOS+0x46>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1032:	11 23       	and	r17, r17
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1034:	29 f4       	brne	.+10     	; 0x1040 <USB_Host_WaitForIOS+0x28>
    1036:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    103a:	83 ff       	sbrs	r24, 3
    103c:	f4 cf       	rjmp	.-24     	; 0x1026 <USB_Host_WaitForIOS+0xe>
    103e:	0d c0       	rjmp	.+26     	; 0x105a <USB_Host_WaitForIOS+0x42>
    1040:	11 30       	cpi	r17, 0x01	; 1
    1042:	29 f4       	brne	.+10     	; 0x104e <USB_Host_WaitForIOS+0x36>
    1044:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1048:	80 ff       	sbrs	r24, 0
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    104a:	ed cf       	rjmp	.-38     	; 0x1026 <USB_Host_WaitForIOS+0xe>
    104c:	06 c0       	rjmp	.+12     	; 0x105a <USB_Host_WaitForIOS+0x42>
    104e:	12 30       	cpi	r17, 0x02	; 2
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1050:	51 f7       	brne	.-44     	; 0x1026 <USB_Host_WaitForIOS+0xe>
    1052:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1056:	82 ff       	sbrs	r24, 2
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1058:	e6 cf       	rjmp	.-52     	; 0x1026 <USB_Host_WaitForIOS+0xe>
    105a:	80 e0       	ldi	r24, 0x00	; 0

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    105c:	01 c0       	rjmp	.+2      	; 0x1060 <USB_Host_WaitForIOS+0x48>
    105e:	84 e0       	ldi	r24, 0x04	; 4

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1060:	df 91       	pop	r29
	}

	return HOST_SENDCONTROL_Successful;
}
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	08 95       	ret

00001068 <USB_Host_SendControlRequest>:
    1068:	ef 92       	push	r14

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    106a:	ff 92       	push	r15
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1076:	e0 90 9e 00 	lds	r14, 0x009E
    107a:	ff 24       	eor	r15, r15
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	e8 22       	and	r14, r24
    1080:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1082:	00 91 2a 01 	lds	r16, 0x012A
    1086:	10 91 2b 01 	lds	r17, 0x012B
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    108a:	80 91 9e 00 	lds	r24, 0x009E
    108e:	81 60       	ori	r24, 0x01	; 1
    1090:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	14 dc       	rcall	.-2008   	; 0x8c0 <USB_Host_WaitMS>
    1098:	88 23       	and	r24, r24
    109a:	09 f0       	breq	.+2      	; 0x109e <USB_Host_SendControlRequest+0x36>
    109c:	ca c0       	rjmp	.+404    	; 0x1232 <USB_Host_SendControlRequest+0x1ca>
    109e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10a2:	8f 7c       	andi	r24, 0xCF	; 207
    10a4:	80 93 aa 00 	sts	0x00AA, r24
    10a8:	10 92 f5 00 	sts	0x00F5, r1

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    10ac:	80 91 a6 00 	lds	r24, 0x00A6
				UPINTX &= ~(1 << PERRI);
    10b0:	8f 7e       	andi	r24, 0xEF	; 239
    10b2:	80 93 a6 00 	sts	0x00A6, r24
    10b6:	80 91 a9 00 	lds	r24, 0x00A9

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10ba:	8f 7b       	andi	r24, 0xBF	; 191
    10bc:	80 93 a9 00 	sts	0x00A9, r24
    10c0:	88 e0       	ldi	r24, 0x08	; 8
    10c2:	e4 e2       	ldi	r30, 0x24	; 36
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    10c4:	f1 e0       	ldi	r31, 0x01	; 1
    10c6:	91 91       	ld	r25, Z+

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    10c8:	90 93 af 00 	sts	0x00AF, r25
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    10cc:	81 50       	subi	r24, 0x01	; 1
    10ce:	d9 f7       	brne	.-10     	; 0x10c6 <USB_Host_SendControlRequest+0x5e>
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    10d0:	80 91 a6 00 	lds	r24, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    10d4:	87 77       	andi	r24, 0x77	; 119
    10d6:	80 93 a6 00 	sts	0x00A6, r24
    10da:	80 e0       	ldi	r24, 0x00	; 0
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    10dc:	9d df       	rcall	.-198    	; 0x1018 <USB_Host_WaitForIOS>
    10de:	88 23       	and	r24, r24
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <USB_Host_SendControlRequest+0x7c>
    10e2:	a7 c0       	rjmp	.+334    	; 0x1232 <USB_Host_SendControlRequest+0x1ca>
    10e4:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10e8:	80 64       	ori	r24, 0x40	; 64
    10ea:	80 93 a9 00 	sts	0x00A9, r24
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	e7 db       	rcall	.-2098   	; 0x8c0 <USB_Host_WaitMS>
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10f2:	88 23       	and	r24, r24
    10f4:	09 f0       	breq	.+2      	; 0x10f8 <USB_Host_SendControlRequest+0x90>
    10f6:	9d c0       	rjmp	.+314    	; 0x1232 <USB_Host_SendControlRequest+0x1ca>
    10f8:	80 91 24 01 	lds	r24, 0x0124
    10fc:	87 ff       	sbrs	r24, 7
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    10fe:	4f c0       	rjmp	.+158    	; 0x119e <USB_Host_SendControlRequest+0x136>
    1100:	80 91 aa 00 	lds	r24, 0x00AA
    1104:	8f 7c       	andi	r24, 0xCF	; 207
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1106:	80 61       	ori	r24, 0x10	; 16
    1108:	80 93 aa 00 	sts	0x00AA, r24
    110c:	20 97       	sbiw	r28, 0x00	; 0
    110e:	61 f5       	brne	.+88     	; 0x1168 <USB_Host_SendControlRequest+0x100>
    1110:	2e c0       	rjmp	.+92     	; 0x116e <USB_Host_SendControlRequest+0x106>
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1112:	80 91 a9 00 	lds	r24, 0x00A9
    1116:	8f 7b       	andi	r24, 0xBF	; 191

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1118:	80 93 a9 00 	sts	0x00A9, r24
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	7c df       	rcall	.-264    	; 0x1018 <USB_Host_WaitForIOS>
    1120:	88 23       	and	r24, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1122:	09 f0       	breq	.+2      	; 0x1126 <USB_Host_SendControlRequest+0xbe>
    1124:	86 c0       	rjmp	.+268    	; 0x1232 <USB_Host_SendControlRequest+0x1ca>
    1126:	80 91 f6 00 	lds	r24, 0x00F6
    112a:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	41 f4       	brne	.+16     	; 0x1142 <USB_Host_SendControlRequest+0xda>
    1132:	00 e0       	ldi	r16, 0x00	; 0
    1134:	10 e0       	ldi	r17, 0x00	; 0
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1136:	05 c0       	rjmp	.+10     	; 0x1142 <USB_Host_SendControlRequest+0xda>
    1138:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
    113c:	89 93       	st	Y+, r24
    113e:	01 50       	subi	r16, 0x01	; 1
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1140:	10 40       	sbci	r17, 0x00	; 0
    1142:	80 91 f6 00 	lds	r24, 0x00F6

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
					DataLen--;
    1146:	90 91 f7 00 	lds	r25, 0x00F7
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	19 f0       	breq	.+6      	; 0x1154 <USB_Host_SendControlRequest+0xec>
    114e:	01 15       	cp	r16, r1
    1150:	11 05       	cpc	r17, r1
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1152:	91 f7       	brne	.-28     	; 0x1138 <USB_Host_SendControlRequest+0xd0>
    1154:	80 91 a9 00 	lds	r24, 0x00A9
    1158:	80 64       	ori	r24, 0x40	; 64
    115a:	80 93 a9 00 	sts	0x00A9, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    115e:	80 91 a6 00 	lds	r24, 0x00A6
    1162:	8e 77       	andi	r24, 0x7E	; 126
    1164:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1168:	01 15       	cp	r16, r1
    116a:	11 05       	cpc	r17, r1
    116c:	91 f6       	brne	.-92     	; 0x1112 <USB_Host_SendControlRequest+0xaa>
    116e:	80 91 aa 00 	lds	r24, 0x00AA
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1172:	8f 7c       	andi	r24, 0xCF	; 207
    1174:	80 62       	ori	r24, 0x20	; 32
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1176:	80 93 aa 00 	sts	0x00AA, r24
    117a:	80 91 a9 00 	lds	r24, 0x00A9
    117e:	8f 7b       	andi	r24, 0xBF	; 191
    1180:	80 93 a9 00 	sts	0x00A9, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1184:	82 e0       	ldi	r24, 0x02	; 2
    1186:	48 df       	rcall	.-368    	; 0x1018 <USB_Host_WaitForIOS>
    1188:	88 23       	and	r24, r24
    118a:	09 f0       	breq	.+2      	; 0x118e <USB_Host_SendControlRequest+0x126>
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    118c:	52 c0       	rjmp	.+164    	; 0x1232 <USB_Host_SendControlRequest+0x1ca>
    118e:	80 91 a6 00 	lds	r24, 0x00A6
    1192:	8b 77       	andi	r24, 0x7B	; 123
    1194:	80 93 a6 00 	sts	0x00A6, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1198:	82 e0       	ldi	r24, 0x02	; 2
    119a:	3e df       	rcall	.-388    	; 0x1018 <USB_Host_WaitForIOS>
    119c:	4a c0       	rjmp	.+148    	; 0x1232 <USB_Host_SendControlRequest+0x1ca>
    119e:	20 97       	sbiw	r28, 0x00	; 0
    11a0:	a1 f1       	breq	.+104    	; 0x120a <USB_Host_SendControlRequest+0x1a2>
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11a2:	80 91 aa 00 	lds	r24, 0x00AA
    11a6:	8f 7c       	andi	r24, 0xCF	; 207
    11a8:	80 62       	ori	r24, 0x20	; 32
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    11aa:	80 93 aa 00 	sts	0x00AA, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11ae:	80 91 a9 00 	lds	r24, 0x00A9
    11b2:	8f 7b       	andi	r24, 0xBF	; 191
    11b4:	80 93 a9 00 	sts	0x00A9, r24
    11b8:	1c c0       	rjmp	.+56     	; 0x11f2 <USB_Host_SendControlRequest+0x18a>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11ba:	2e df       	rcall	.-420    	; 0x1018 <USB_Host_WaitForIOS>
    11bc:	88 23       	and	r24, r24
    11be:	c9 f5       	brne	.+114    	; 0x1232 <USB_Host_SendControlRequest+0x1ca>
    11c0:	fe 01       	movw	r30, r28
    11c2:	07 c0       	rjmp	.+14     	; 0x11d2 <USB_Host_SendControlRequest+0x16a>
    11c4:	81 91       	ld	r24, Z+
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11c6:	ef 01       	movw	r28, r30
    11c8:	80 93 af 00 	sts	0x00AF, r24
    11cc:	01 50       	subi	r16, 0x01	; 1
    11ce:	10 40       	sbci	r17, 0x00	; 0
    11d0:	59 f0       	breq	.+22     	; 0x11e8 <USB_Host_SendControlRequest+0x180>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    11d2:	ef 01       	movw	r28, r30
    11d4:	20 91 f6 00 	lds	r18, 0x00F6
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    11d8:	30 91 f7 00 	lds	r19, 0x00F7
					DataLen--;
    11dc:	80 91 13 01 	lds	r24, 0x0113
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    11e0:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11e2:	28 17       	cp	r18, r24
    11e4:	39 07       	cpc	r19, r25
    11e6:	70 f3       	brcs	.-36     	; 0x11c4 <USB_Host_SendControlRequest+0x15c>
    11e8:	80 91 a6 00 	lds	r24, 0x00A6
    11ec:	8b 77       	andi	r24, 0x7B	; 123
    11ee:	80 93 a6 00 	sts	0x00A6, r24
    11f2:	82 e0       	ldi	r24, 0x02	; 2
    11f4:	01 15       	cp	r16, r1
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    11f6:	11 05       	cpc	r17, r1
    11f8:	01 f7       	brne	.-64     	; 0x11ba <USB_Host_SendControlRequest+0x152>
    11fa:	0e df       	rcall	.-484    	; 0x1018 <USB_Host_WaitForIOS>
    11fc:	88 23       	and	r24, r24
    11fe:	c9 f4       	brne	.+50     	; 0x1232 <USB_Host_SendControlRequest+0x1ca>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1200:	80 91 a9 00 	lds	r24, 0x00A9
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1204:	80 64       	ori	r24, 0x40	; 64
    1206:	80 93 a9 00 	sts	0x00A9, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    120a:	80 91 aa 00 	lds	r24, 0x00AA
    120e:	8f 7c       	andi	r24, 0xCF	; 207

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1210:	80 61       	ori	r24, 0x10	; 16
    1212:	80 93 aa 00 	sts	0x00AA, r24
    1216:	80 91 a9 00 	lds	r24, 0x00A9
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    121a:	8f 7b       	andi	r24, 0xBF	; 191
    121c:	80 93 a9 00 	sts	0x00A9, r24
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	fa de       	rcall	.-524    	; 0x1018 <USB_Host_WaitForIOS>
    1224:	88 23       	and	r24, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1226:	29 f4       	brne	.+10     	; 0x1232 <USB_Host_SendControlRequest+0x1ca>
    1228:	90 91 a6 00 	lds	r25, 0x00A6
    122c:	9e 77       	andi	r25, 0x7E	; 126
    122e:	90 93 a6 00 	sts	0x00A6, r25
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1232:	90 91 a9 00 	lds	r25, 0x00A9
    1236:	90 64       	ori	r25, 0x40	; 64
    1238:	90 93 a9 00 	sts	0x00A9, r25
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    123c:	e1 14       	cp	r14, r1
    123e:	f1 04       	cpc	r15, r1
    1240:	29 f4       	brne	.+10     	; 0x124c <USB_Host_SendControlRequest+0x1e4>
    1242:	90 91 9e 00 	lds	r25, 0x009E

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1246:	9e 7f       	andi	r25, 0xFE	; 254
    1248:	90 93 9e 00 	sts	0x009E, r25
    124c:	91 e0       	ldi	r25, 0x01	; 1
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    124e:	90 93 a8 00 	sts	0x00A8, r25
    1252:	10 92 a8 00 	sts	0x00A8, r1
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    125e:	ff 90       	pop	r15
    1260:	ef 90       	pop	r14
    1262:	08 95       	ret

00001264 <USB_Host_SetDeviceConfiguration>:
				UPRST = 0;
    1264:	cf 93       	push	r28
    1266:	c8 2f       	mov	r28, r24
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1268:	10 92 24 01 	sts	0x0124, r1
    126c:	89 e0       	ldi	r24, 0x09	; 9
    126e:	80 93 25 01 	sts	0x0125, r24
    1272:	c0 93 26 01 	sts	0x0126, r28

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1276:	10 92 27 01 	sts	0x0127, r1
    127a:	10 92 29 01 	sts	0x0129, r1
    127e:	10 92 28 01 	sts	0x0128, r1
    1282:	10 92 2b 01 	sts	0x012B, r1
    1286:	10 92 2a 01 	sts	0x012A, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    128a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	ea de       	rcall	.-556    	; 0x1068 <USB_Host_SendControlRequest>
    1294:	88 23       	and	r24, r24
    1296:	49 f4       	brne	.+18     	; 0x12aa <USB_Host_SetDeviceConfiguration+0x46>
    1298:	c0 93 22 01 	sts	0x0122, r28
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    129c:	cc 23       	and	r28, r28
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    129e:	11 f0       	breq	.+4      	; 0x12a4 <USB_Host_SetDeviceConfiguration+0x40>
    12a0:	9b e0       	ldi	r25, 0x0B	; 11
    12a2:	01 c0       	rjmp	.+2      	; 0x12a6 <USB_Host_SetDeviceConfiguration+0x42>
    12a4:	9a e0       	ldi	r25, 0x0A	; 10
    12a6:	90 93 2c 01 	sts	0x012C, r25
    12aa:	cf 91       	pop	r28
	}

	return ErrorCode;
}
    12ac:	08 95       	ret

000012ae <USB_Host_SetInterfaceAltSetting>:
    12ae:	e4 e2       	ldi	r30, 0x24	; 36
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    12b0:	f1 e0       	ldi	r31, 0x01	; 1
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	90 93 24 01 	sts	0x0124, r25
    12b8:	9b e0       	ldi	r25, 0x0B	; 11
    12ba:	90 93 25 01 	sts	0x0125, r25
    12be:	60 93 26 01 	sts	0x0126, r22
    12c2:	13 82       	std	Z+3, r1	; 0x03
    12c4:	80 93 28 01 	sts	0x0128, r24
    12c8:	15 82       	std	Z+5, r1	; 0x05
    12ca:	10 92 2b 01 	sts	0x012B, r1
    12ce:	10 92 2a 01 	sts	0x012A, r1
    12d2:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	c6 ce       	rjmp	.-628    	; 0x1068 <USB_Host_SendControlRequest>

000012dc <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    12dc:	cf 93       	push	r28
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    12de:	c0 91 a7 00 	lds	r28, 0x00A7
    12e2:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    12e4:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    12e8:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    12ec:	3e db       	rcall	.-2436   	; 0x96a <USB_Host_ProcessNextHostState>
    12ee:	c0 93 a7 00 	sts	0x00A7, r28
    12f2:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    12f4:	08 95       	ret

000012f6 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    12f6:	90 91 c8 00 	lds	r25, 0x00C8
    12fa:	95 ff       	sbrs	r25, 5
    12fc:	fc cf       	rjmp	.-8      	; 0x12f6 <Serial_putchar>
				UDR1 = DataByte;
    12fe:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	08 95       	ret

00001308 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1308:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    130c:	87 ff       	sbrs	r24, 7
    130e:	08 c0       	rjmp	.+16     	; 0x1320 <Serial_getchar+0x18>
    1310:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1314:	87 ff       	sbrs	r24, 7
    1316:	07 c0       	rjmp	.+14     	; 0x1326 <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    1318:	80 91 ce 00 	lds	r24, 0x00CE
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	08 95       	ret
	  return _FDEV_EOF;
    1320:	8e ef       	ldi	r24, 0xFE	; 254
    1322:	9f ef       	ldi	r25, 0xFF	; 255
    1324:	08 95       	ret
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    1326:	8f ef       	ldi	r24, 0xFF	; 255
    1328:	9f ef       	ldi	r25, 0xFF	; 255

	return Serial_ReceiveByte();
}
    132a:	08 95       	ret

0000132c <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    132c:	fc 01       	movw	r30, r24
	if (!(Stream))
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	51 f4       	brne	.+20     	; 0x1346 <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1332:	ed e2       	ldi	r30, 0x2D	; 45
    1334:	f1 e0       	ldi	r31, 0x01	; 1
    1336:	f0 93 3c 01 	sts	0x013C, r31
    133a:	e0 93 3b 01 	sts	0x013B, r30
		stdout = Stream;
    133e:	f0 93 3e 01 	sts	0x013E, r31
    1342:	e0 93 3d 01 	sts	0x013D, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1346:	8e e0       	ldi	r24, 0x0E	; 14
    1348:	df 01       	movw	r26, r30
    134a:	1d 92       	st	X+, r1
    134c:	8a 95       	dec	r24
    134e:	e9 f7       	brne	.-6      	; 0x134a <Serial_CreateStream+0x1e>
    1350:	83 e0       	ldi	r24, 0x03	; 3
    1352:	83 83       	std	Z+3, r24	; 0x03
    1354:	8b e7       	ldi	r24, 0x7B	; 123
    1356:	99 e0       	ldi	r25, 0x09	; 9
    1358:	91 87       	std	Z+9, r25	; 0x09
    135a:	80 87       	std	Z+8, r24	; 0x08
    135c:	84 e8       	ldi	r24, 0x84	; 132
    135e:	99 e0       	ldi	r25, 0x09	; 9
    1360:	93 87       	std	Z+11, r25	; 0x0b
    1362:	82 87       	std	Z+10, r24	; 0x0a
}
    1364:	08 95       	ret

00001366 <printf_P>:
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	fe 01       	movw	r30, r28
    1370:	35 96       	adiw	r30, 0x05	; 5
    1372:	61 91       	ld	r22, Z+
    1374:	71 91       	ld	r23, Z+
    1376:	80 91 3d 01 	lds	r24, 0x013D
    137a:	90 91 3e 01 	lds	r25, 0x013E
    137e:	dc 01       	movw	r26, r24
    1380:	13 96       	adiw	r26, 0x03	; 3
    1382:	2c 91       	ld	r18, X
    1384:	13 97       	sbiw	r26, 0x03	; 3
    1386:	28 60       	ori	r18, 0x08	; 8
    1388:	13 96       	adiw	r26, 0x03	; 3
    138a:	2c 93       	st	X, r18
    138c:	af 01       	movw	r20, r30
    138e:	39 d0       	rcall	.+114    	; 0x1402 <vfprintf>
    1390:	e0 91 3d 01 	lds	r30, 0x013D
    1394:	f0 91 3e 01 	lds	r31, 0x013E
    1398:	23 81       	ldd	r18, Z+3	; 0x03
    139a:	27 7f       	andi	r18, 0xF7	; 247
    139c:	23 83       	std	Z+3, r18	; 0x03
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	08 95       	ret

000013a4 <puts_P>:
    13a4:	0f 93       	push	r16
    13a6:	1f 93       	push	r17
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	8c 01       	movw	r16, r24
    13ae:	e0 91 3d 01 	lds	r30, 0x013D
    13b2:	f0 91 3e 01 	lds	r31, 0x013E
    13b6:	83 81       	ldd	r24, Z+3	; 0x03
    13b8:	81 ff       	sbrs	r24, 1
    13ba:	1b c0       	rjmp	.+54     	; 0x13f2 <puts_P+0x4e>
    13bc:	c0 e0       	ldi	r28, 0x00	; 0
    13be:	d0 e0       	ldi	r29, 0x00	; 0
    13c0:	07 c0       	rjmp	.+14     	; 0x13d0 <puts_P+0x2c>
    13c2:	09 95       	icall
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	11 f0       	breq	.+4      	; 0x13cc <puts_P+0x28>
    13c8:	cf ef       	ldi	r28, 0xFF	; 255
    13ca:	df ef       	ldi	r29, 0xFF	; 255
    13cc:	0f 5f       	subi	r16, 0xFF	; 255
    13ce:	1f 4f       	sbci	r17, 0xFF	; 255
    13d0:	f8 01       	movw	r30, r16
    13d2:	84 91       	lpm	r24, Z
    13d4:	60 91 3d 01 	lds	r22, 0x013D
    13d8:	70 91 3e 01 	lds	r23, 0x013E
    13dc:	db 01       	movw	r26, r22
    13de:	18 96       	adiw	r26, 0x08	; 8
    13e0:	ed 91       	ld	r30, X+
    13e2:	fc 91       	ld	r31, X
    13e4:	19 97       	sbiw	r26, 0x09	; 9
    13e6:	88 23       	and	r24, r24
    13e8:	61 f7       	brne	.-40     	; 0x13c2 <puts_P+0x1e>
    13ea:	8a e0       	ldi	r24, 0x0A	; 10
    13ec:	09 95       	icall
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	11 f0       	breq	.+4      	; 0x13f6 <puts_P+0x52>
    13f2:	cf ef       	ldi	r28, 0xFF	; 255
    13f4:	df ef       	ldi	r29, 0xFF	; 255
    13f6:	ce 01       	movw	r24, r28
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	1f 91       	pop	r17
    13fe:	0f 91       	pop	r16
    1400:	08 95       	ret

00001402 <vfprintf>:
    1402:	2f 92       	push	r2
    1404:	3f 92       	push	r3
    1406:	4f 92       	push	r4
    1408:	5f 92       	push	r5
    140a:	6f 92       	push	r6
    140c:	7f 92       	push	r7
    140e:	8f 92       	push	r8
    1410:	9f 92       	push	r9
    1412:	af 92       	push	r10
    1414:	bf 92       	push	r11
    1416:	cf 92       	push	r12
    1418:	df 92       	push	r13
    141a:	ef 92       	push	r14
    141c:	ff 92       	push	r15
    141e:	0f 93       	push	r16
    1420:	1f 93       	push	r17
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	2d 97       	sbiw	r28, 0x0d	; 13
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	f8 94       	cli
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	cd bf       	out	0x3d, r28	; 61
    1436:	3c 01       	movw	r6, r24
    1438:	7d 87       	std	Y+13, r23	; 0x0d
    143a:	6c 87       	std	Y+12, r22	; 0x0c
    143c:	5a 01       	movw	r10, r20
    143e:	fc 01       	movw	r30, r24
    1440:	17 82       	std	Z+7, r1	; 0x07
    1442:	16 82       	std	Z+6, r1	; 0x06
    1444:	83 81       	ldd	r24, Z+3	; 0x03
    1446:	81 ff       	sbrs	r24, 1
    1448:	bb c1       	rjmp	.+886    	; 0x17c0 <vfprintf+0x3be>
    144a:	2e 01       	movw	r4, r28
    144c:	08 94       	sec
    144e:	41 1c       	adc	r4, r1
    1450:	51 1c       	adc	r5, r1
    1452:	f3 01       	movw	r30, r6
    1454:	93 81       	ldd	r25, Z+3	; 0x03
    1456:	ec 85       	ldd	r30, Y+12	; 0x0c
    1458:	fd 85       	ldd	r31, Y+13	; 0x0d
    145a:	93 fd       	sbrc	r25, 3
    145c:	85 91       	lpm	r24, Z+
    145e:	93 ff       	sbrs	r25, 3
    1460:	81 91       	ld	r24, Z+
    1462:	fd 87       	std	Y+13, r31	; 0x0d
    1464:	ec 87       	std	Y+12, r30	; 0x0c
    1466:	88 23       	and	r24, r24
    1468:	09 f4       	brne	.+2      	; 0x146c <vfprintf+0x6a>
    146a:	a6 c1       	rjmp	.+844    	; 0x17b8 <vfprintf+0x3b6>
    146c:	85 32       	cpi	r24, 0x25	; 37
    146e:	41 f4       	brne	.+16     	; 0x1480 <vfprintf+0x7e>
    1470:	93 fd       	sbrc	r25, 3
    1472:	85 91       	lpm	r24, Z+
    1474:	93 ff       	sbrs	r25, 3
    1476:	81 91       	ld	r24, Z+
    1478:	fd 87       	std	Y+13, r31	; 0x0d
    147a:	ec 87       	std	Y+12, r30	; 0x0c
    147c:	85 32       	cpi	r24, 0x25	; 37
    147e:	21 f4       	brne	.+8      	; 0x1488 <vfprintf+0x86>
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	b3 01       	movw	r22, r6
    1484:	ce d1       	rcall	.+924    	; 0x1822 <fputc>
    1486:	e5 cf       	rjmp	.-54     	; 0x1452 <vfprintf+0x50>
    1488:	ff 24       	eor	r15, r15
    148a:	ee 24       	eor	r14, r14
    148c:	10 e0       	ldi	r17, 0x00	; 0
    148e:	10 32       	cpi	r17, 0x20	; 32
    1490:	b0 f4       	brcc	.+44     	; 0x14be <vfprintf+0xbc>
    1492:	8b 32       	cpi	r24, 0x2B	; 43
    1494:	69 f0       	breq	.+26     	; 0x14b0 <vfprintf+0xae>
    1496:	8c 32       	cpi	r24, 0x2C	; 44
    1498:	28 f4       	brcc	.+10     	; 0x14a4 <vfprintf+0xa2>
    149a:	80 32       	cpi	r24, 0x20	; 32
    149c:	51 f0       	breq	.+20     	; 0x14b2 <vfprintf+0xb0>
    149e:	83 32       	cpi	r24, 0x23	; 35
    14a0:	71 f4       	brne	.+28     	; 0x14be <vfprintf+0xbc>
    14a2:	0b c0       	rjmp	.+22     	; 0x14ba <vfprintf+0xb8>
    14a4:	8d 32       	cpi	r24, 0x2D	; 45
    14a6:	39 f0       	breq	.+14     	; 0x14b6 <vfprintf+0xb4>
    14a8:	80 33       	cpi	r24, 0x30	; 48
    14aa:	49 f4       	brne	.+18     	; 0x14be <vfprintf+0xbc>
    14ac:	11 60       	ori	r17, 0x01	; 1
    14ae:	2c c0       	rjmp	.+88     	; 0x1508 <vfprintf+0x106>
    14b0:	12 60       	ori	r17, 0x02	; 2
    14b2:	14 60       	ori	r17, 0x04	; 4
    14b4:	29 c0       	rjmp	.+82     	; 0x1508 <vfprintf+0x106>
    14b6:	18 60       	ori	r17, 0x08	; 8
    14b8:	27 c0       	rjmp	.+78     	; 0x1508 <vfprintf+0x106>
    14ba:	10 61       	ori	r17, 0x10	; 16
    14bc:	25 c0       	rjmp	.+74     	; 0x1508 <vfprintf+0x106>
    14be:	17 fd       	sbrc	r17, 7
    14c0:	2e c0       	rjmp	.+92     	; 0x151e <vfprintf+0x11c>
    14c2:	28 2f       	mov	r18, r24
    14c4:	20 53       	subi	r18, 0x30	; 48
    14c6:	2a 30       	cpi	r18, 0x0A	; 10
    14c8:	98 f4       	brcc	.+38     	; 0x14f0 <vfprintf+0xee>
    14ca:	16 ff       	sbrs	r17, 6
    14cc:	08 c0       	rjmp	.+16     	; 0x14de <vfprintf+0xdc>
    14ce:	8f 2d       	mov	r24, r15
    14d0:	88 0f       	add	r24, r24
    14d2:	f8 2e       	mov	r15, r24
    14d4:	ff 0c       	add	r15, r15
    14d6:	ff 0c       	add	r15, r15
    14d8:	f8 0e       	add	r15, r24
    14da:	f2 0e       	add	r15, r18
    14dc:	15 c0       	rjmp	.+42     	; 0x1508 <vfprintf+0x106>
    14de:	8e 2d       	mov	r24, r14
    14e0:	88 0f       	add	r24, r24
    14e2:	e8 2e       	mov	r14, r24
    14e4:	ee 0c       	add	r14, r14
    14e6:	ee 0c       	add	r14, r14
    14e8:	e8 0e       	add	r14, r24
    14ea:	e2 0e       	add	r14, r18
    14ec:	10 62       	ori	r17, 0x20	; 32
    14ee:	0c c0       	rjmp	.+24     	; 0x1508 <vfprintf+0x106>
    14f0:	8e 32       	cpi	r24, 0x2E	; 46
    14f2:	21 f4       	brne	.+8      	; 0x14fc <vfprintf+0xfa>
    14f4:	16 fd       	sbrc	r17, 6
    14f6:	60 c1       	rjmp	.+704    	; 0x17b8 <vfprintf+0x3b6>
    14f8:	10 64       	ori	r17, 0x40	; 64
    14fa:	06 c0       	rjmp	.+12     	; 0x1508 <vfprintf+0x106>
    14fc:	8c 36       	cpi	r24, 0x6C	; 108
    14fe:	11 f4       	brne	.+4      	; 0x1504 <vfprintf+0x102>
    1500:	10 68       	ori	r17, 0x80	; 128
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <vfprintf+0x106>
    1504:	88 36       	cpi	r24, 0x68	; 104
    1506:	59 f4       	brne	.+22     	; 0x151e <vfprintf+0x11c>
    1508:	ec 85       	ldd	r30, Y+12	; 0x0c
    150a:	fd 85       	ldd	r31, Y+13	; 0x0d
    150c:	93 fd       	sbrc	r25, 3
    150e:	85 91       	lpm	r24, Z+
    1510:	93 ff       	sbrs	r25, 3
    1512:	81 91       	ld	r24, Z+
    1514:	fd 87       	std	Y+13, r31	; 0x0d
    1516:	ec 87       	std	Y+12, r30	; 0x0c
    1518:	88 23       	and	r24, r24
    151a:	09 f0       	breq	.+2      	; 0x151e <vfprintf+0x11c>
    151c:	b8 cf       	rjmp	.-144    	; 0x148e <vfprintf+0x8c>
    151e:	98 2f       	mov	r25, r24
    1520:	95 54       	subi	r25, 0x45	; 69
    1522:	93 30       	cpi	r25, 0x03	; 3
    1524:	18 f0       	brcs	.+6      	; 0x152c <vfprintf+0x12a>
    1526:	90 52       	subi	r25, 0x20	; 32
    1528:	93 30       	cpi	r25, 0x03	; 3
    152a:	38 f4       	brcc	.+14     	; 0x153a <vfprintf+0x138>
    152c:	24 e0       	ldi	r18, 0x04	; 4
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	a2 0e       	add	r10, r18
    1532:	b3 1e       	adc	r11, r19
    1534:	3f e3       	ldi	r19, 0x3F	; 63
    1536:	39 83       	std	Y+1, r19	; 0x01
    1538:	0f c0       	rjmp	.+30     	; 0x1558 <vfprintf+0x156>
    153a:	83 36       	cpi	r24, 0x63	; 99
    153c:	31 f0       	breq	.+12     	; 0x154a <vfprintf+0x148>
    153e:	83 37       	cpi	r24, 0x73	; 115
    1540:	81 f0       	breq	.+32     	; 0x1562 <vfprintf+0x160>
    1542:	83 35       	cpi	r24, 0x53	; 83
    1544:	09 f0       	breq	.+2      	; 0x1548 <vfprintf+0x146>
    1546:	56 c0       	rjmp	.+172    	; 0x15f4 <vfprintf+0x1f2>
    1548:	21 c0       	rjmp	.+66     	; 0x158c <vfprintf+0x18a>
    154a:	f5 01       	movw	r30, r10
    154c:	80 81       	ld	r24, Z
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	22 e0       	ldi	r18, 0x02	; 2
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	a2 0e       	add	r10, r18
    1556:	b3 1e       	adc	r11, r19
    1558:	21 e0       	ldi	r18, 0x01	; 1
    155a:	c2 2e       	mov	r12, r18
    155c:	d1 2c       	mov	r13, r1
    155e:	42 01       	movw	r8, r4
    1560:	13 c0       	rjmp	.+38     	; 0x1588 <vfprintf+0x186>
    1562:	92 e0       	ldi	r25, 0x02	; 2
    1564:	29 2e       	mov	r2, r25
    1566:	31 2c       	mov	r3, r1
    1568:	2a 0c       	add	r2, r10
    156a:	3b 1c       	adc	r3, r11
    156c:	f5 01       	movw	r30, r10
    156e:	80 80       	ld	r8, Z
    1570:	91 80       	ldd	r9, Z+1	; 0x01
    1572:	16 ff       	sbrs	r17, 6
    1574:	03 c0       	rjmp	.+6      	; 0x157c <vfprintf+0x17a>
    1576:	6f 2d       	mov	r22, r15
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <vfprintf+0x17e>
    157c:	6f ef       	ldi	r22, 0xFF	; 255
    157e:	7f ef       	ldi	r23, 0xFF	; 255
    1580:	c4 01       	movw	r24, r8
    1582:	44 d1       	rcall	.+648    	; 0x180c <strnlen>
    1584:	6c 01       	movw	r12, r24
    1586:	51 01       	movw	r10, r2
    1588:	1f 77       	andi	r17, 0x7F	; 127
    158a:	14 c0       	rjmp	.+40     	; 0x15b4 <vfprintf+0x1b2>
    158c:	82 e0       	ldi	r24, 0x02	; 2
    158e:	28 2e       	mov	r2, r24
    1590:	31 2c       	mov	r3, r1
    1592:	2a 0c       	add	r2, r10
    1594:	3b 1c       	adc	r3, r11
    1596:	f5 01       	movw	r30, r10
    1598:	80 80       	ld	r8, Z
    159a:	91 80       	ldd	r9, Z+1	; 0x01
    159c:	16 ff       	sbrs	r17, 6
    159e:	03 c0       	rjmp	.+6      	; 0x15a6 <vfprintf+0x1a4>
    15a0:	6f 2d       	mov	r22, r15
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <vfprintf+0x1a8>
    15a6:	6f ef       	ldi	r22, 0xFF	; 255
    15a8:	7f ef       	ldi	r23, 0xFF	; 255
    15aa:	c4 01       	movw	r24, r8
    15ac:	24 d1       	rcall	.+584    	; 0x17f6 <strnlen_P>
    15ae:	6c 01       	movw	r12, r24
    15b0:	10 68       	ori	r17, 0x80	; 128
    15b2:	51 01       	movw	r10, r2
    15b4:	13 fd       	sbrc	r17, 3
    15b6:	1a c0       	rjmp	.+52     	; 0x15ec <vfprintf+0x1ea>
    15b8:	05 c0       	rjmp	.+10     	; 0x15c4 <vfprintf+0x1c2>
    15ba:	80 e2       	ldi	r24, 0x20	; 32
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	b3 01       	movw	r22, r6
    15c0:	30 d1       	rcall	.+608    	; 0x1822 <fputc>
    15c2:	ea 94       	dec	r14
    15c4:	8e 2d       	mov	r24, r14
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	c8 16       	cp	r12, r24
    15ca:	d9 06       	cpc	r13, r25
    15cc:	b0 f3       	brcs	.-20     	; 0x15ba <vfprintf+0x1b8>
    15ce:	0e c0       	rjmp	.+28     	; 0x15ec <vfprintf+0x1ea>
    15d0:	f4 01       	movw	r30, r8
    15d2:	17 fd       	sbrc	r17, 7
    15d4:	85 91       	lpm	r24, Z+
    15d6:	17 ff       	sbrs	r17, 7
    15d8:	81 91       	ld	r24, Z+
    15da:	4f 01       	movw	r8, r30
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	b3 01       	movw	r22, r6
    15e0:	20 d1       	rcall	.+576    	; 0x1822 <fputc>
    15e2:	e1 10       	cpse	r14, r1
    15e4:	ea 94       	dec	r14
    15e6:	08 94       	sec
    15e8:	c1 08       	sbc	r12, r1
    15ea:	d1 08       	sbc	r13, r1
    15ec:	c1 14       	cp	r12, r1
    15ee:	d1 04       	cpc	r13, r1
    15f0:	79 f7       	brne	.-34     	; 0x15d0 <vfprintf+0x1ce>
    15f2:	df c0       	rjmp	.+446    	; 0x17b2 <vfprintf+0x3b0>
    15f4:	84 36       	cpi	r24, 0x64	; 100
    15f6:	11 f0       	breq	.+4      	; 0x15fc <vfprintf+0x1fa>
    15f8:	89 36       	cpi	r24, 0x69	; 105
    15fa:	49 f5       	brne	.+82     	; 0x164e <vfprintf+0x24c>
    15fc:	f5 01       	movw	r30, r10
    15fe:	17 ff       	sbrs	r17, 7
    1600:	07 c0       	rjmp	.+14     	; 0x1610 <vfprintf+0x20e>
    1602:	80 81       	ld	r24, Z
    1604:	91 81       	ldd	r25, Z+1	; 0x01
    1606:	a2 81       	ldd	r26, Z+2	; 0x02
    1608:	b3 81       	ldd	r27, Z+3	; 0x03
    160a:	24 e0       	ldi	r18, 0x04	; 4
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	08 c0       	rjmp	.+16     	; 0x1620 <vfprintf+0x21e>
    1610:	80 81       	ld	r24, Z
    1612:	91 81       	ldd	r25, Z+1	; 0x01
    1614:	aa 27       	eor	r26, r26
    1616:	97 fd       	sbrc	r25, 7
    1618:	a0 95       	com	r26
    161a:	ba 2f       	mov	r27, r26
    161c:	22 e0       	ldi	r18, 0x02	; 2
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	a2 0e       	add	r10, r18
    1622:	b3 1e       	adc	r11, r19
    1624:	01 2f       	mov	r16, r17
    1626:	0f 76       	andi	r16, 0x6F	; 111
    1628:	b7 ff       	sbrs	r27, 7
    162a:	08 c0       	rjmp	.+16     	; 0x163c <vfprintf+0x23a>
    162c:	b0 95       	com	r27
    162e:	a0 95       	com	r26
    1630:	90 95       	com	r25
    1632:	81 95       	neg	r24
    1634:	9f 4f       	sbci	r25, 0xFF	; 255
    1636:	af 4f       	sbci	r26, 0xFF	; 255
    1638:	bf 4f       	sbci	r27, 0xFF	; 255
    163a:	00 68       	ori	r16, 0x80	; 128
    163c:	bc 01       	movw	r22, r24
    163e:	cd 01       	movw	r24, r26
    1640:	a2 01       	movw	r20, r4
    1642:	2a e0       	ldi	r18, 0x0A	; 10
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	19 d1       	rcall	.+562    	; 0x187a <__ultoa_invert>
    1648:	d8 2e       	mov	r13, r24
    164a:	d4 18       	sub	r13, r4
    164c:	3e c0       	rjmp	.+124    	; 0x16ca <vfprintf+0x2c8>
    164e:	85 37       	cpi	r24, 0x75	; 117
    1650:	21 f4       	brne	.+8      	; 0x165a <vfprintf+0x258>
    1652:	1f 7e       	andi	r17, 0xEF	; 239
    1654:	2a e0       	ldi	r18, 0x0A	; 10
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	20 c0       	rjmp	.+64     	; 0x169a <vfprintf+0x298>
    165a:	19 7f       	andi	r17, 0xF9	; 249
    165c:	8f 36       	cpi	r24, 0x6F	; 111
    165e:	a9 f0       	breq	.+42     	; 0x168a <vfprintf+0x288>
    1660:	80 37       	cpi	r24, 0x70	; 112
    1662:	20 f4       	brcc	.+8      	; 0x166c <vfprintf+0x26a>
    1664:	88 35       	cpi	r24, 0x58	; 88
    1666:	09 f0       	breq	.+2      	; 0x166a <vfprintf+0x268>
    1668:	a7 c0       	rjmp	.+334    	; 0x17b8 <vfprintf+0x3b6>
    166a:	0b c0       	rjmp	.+22     	; 0x1682 <vfprintf+0x280>
    166c:	80 37       	cpi	r24, 0x70	; 112
    166e:	21 f0       	breq	.+8      	; 0x1678 <vfprintf+0x276>
    1670:	88 37       	cpi	r24, 0x78	; 120
    1672:	09 f0       	breq	.+2      	; 0x1676 <vfprintf+0x274>
    1674:	a1 c0       	rjmp	.+322    	; 0x17b8 <vfprintf+0x3b6>
    1676:	01 c0       	rjmp	.+2      	; 0x167a <vfprintf+0x278>
    1678:	10 61       	ori	r17, 0x10	; 16
    167a:	14 ff       	sbrs	r17, 4
    167c:	09 c0       	rjmp	.+18     	; 0x1690 <vfprintf+0x28e>
    167e:	14 60       	ori	r17, 0x04	; 4
    1680:	07 c0       	rjmp	.+14     	; 0x1690 <vfprintf+0x28e>
    1682:	14 ff       	sbrs	r17, 4
    1684:	08 c0       	rjmp	.+16     	; 0x1696 <vfprintf+0x294>
    1686:	16 60       	ori	r17, 0x06	; 6
    1688:	06 c0       	rjmp	.+12     	; 0x1696 <vfprintf+0x294>
    168a:	28 e0       	ldi	r18, 0x08	; 8
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	05 c0       	rjmp	.+10     	; 0x169a <vfprintf+0x298>
    1690:	20 e1       	ldi	r18, 0x10	; 16
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	02 c0       	rjmp	.+4      	; 0x169a <vfprintf+0x298>
    1696:	20 e1       	ldi	r18, 0x10	; 16
    1698:	32 e0       	ldi	r19, 0x02	; 2
    169a:	f5 01       	movw	r30, r10
    169c:	17 ff       	sbrs	r17, 7
    169e:	07 c0       	rjmp	.+14     	; 0x16ae <vfprintf+0x2ac>
    16a0:	60 81       	ld	r22, Z
    16a2:	71 81       	ldd	r23, Z+1	; 0x01
    16a4:	82 81       	ldd	r24, Z+2	; 0x02
    16a6:	93 81       	ldd	r25, Z+3	; 0x03
    16a8:	44 e0       	ldi	r20, 0x04	; 4
    16aa:	50 e0       	ldi	r21, 0x00	; 0
    16ac:	06 c0       	rjmp	.+12     	; 0x16ba <vfprintf+0x2b8>
    16ae:	60 81       	ld	r22, Z
    16b0:	71 81       	ldd	r23, Z+1	; 0x01
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	42 e0       	ldi	r20, 0x02	; 2
    16b8:	50 e0       	ldi	r21, 0x00	; 0
    16ba:	a4 0e       	add	r10, r20
    16bc:	b5 1e       	adc	r11, r21
    16be:	a2 01       	movw	r20, r4
    16c0:	dc d0       	rcall	.+440    	; 0x187a <__ultoa_invert>
    16c2:	d8 2e       	mov	r13, r24
    16c4:	d4 18       	sub	r13, r4
    16c6:	01 2f       	mov	r16, r17
    16c8:	0f 77       	andi	r16, 0x7F	; 127
    16ca:	06 ff       	sbrs	r16, 6
    16cc:	09 c0       	rjmp	.+18     	; 0x16e0 <vfprintf+0x2de>
    16ce:	0e 7f       	andi	r16, 0xFE	; 254
    16d0:	df 14       	cp	r13, r15
    16d2:	30 f4       	brcc	.+12     	; 0x16e0 <vfprintf+0x2de>
    16d4:	04 ff       	sbrs	r16, 4
    16d6:	06 c0       	rjmp	.+12     	; 0x16e4 <vfprintf+0x2e2>
    16d8:	02 fd       	sbrc	r16, 2
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <vfprintf+0x2e2>
    16dc:	0f 7e       	andi	r16, 0xEF	; 239
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <vfprintf+0x2e2>
    16e0:	1d 2d       	mov	r17, r13
    16e2:	01 c0       	rjmp	.+2      	; 0x16e6 <vfprintf+0x2e4>
    16e4:	1f 2d       	mov	r17, r15
    16e6:	80 2f       	mov	r24, r16
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	04 ff       	sbrs	r16, 4
    16ec:	0c c0       	rjmp	.+24     	; 0x1706 <vfprintf+0x304>
    16ee:	fe 01       	movw	r30, r28
    16f0:	ed 0d       	add	r30, r13
    16f2:	f1 1d       	adc	r31, r1
    16f4:	20 81       	ld	r18, Z
    16f6:	20 33       	cpi	r18, 0x30	; 48
    16f8:	11 f4       	brne	.+4      	; 0x16fe <vfprintf+0x2fc>
    16fa:	09 7e       	andi	r16, 0xE9	; 233
    16fc:	09 c0       	rjmp	.+18     	; 0x1710 <vfprintf+0x30e>
    16fe:	02 ff       	sbrs	r16, 2
    1700:	06 c0       	rjmp	.+12     	; 0x170e <vfprintf+0x30c>
    1702:	1e 5f       	subi	r17, 0xFE	; 254
    1704:	05 c0       	rjmp	.+10     	; 0x1710 <vfprintf+0x30e>
    1706:	86 78       	andi	r24, 0x86	; 134
    1708:	90 70       	andi	r25, 0x00	; 0
    170a:	00 97       	sbiw	r24, 0x00	; 0
    170c:	09 f0       	breq	.+2      	; 0x1710 <vfprintf+0x30e>
    170e:	1f 5f       	subi	r17, 0xFF	; 255
    1710:	80 2e       	mov	r8, r16
    1712:	99 24       	eor	r9, r9
    1714:	03 fd       	sbrc	r16, 3
    1716:	11 c0       	rjmp	.+34     	; 0x173a <vfprintf+0x338>
    1718:	00 ff       	sbrs	r16, 0
    171a:	0c c0       	rjmp	.+24     	; 0x1734 <vfprintf+0x332>
    171c:	fd 2c       	mov	r15, r13
    171e:	1e 15       	cp	r17, r14
    1720:	48 f4       	brcc	.+18     	; 0x1734 <vfprintf+0x332>
    1722:	fe 0c       	add	r15, r14
    1724:	f1 1a       	sub	r15, r17
    1726:	1e 2d       	mov	r17, r14
    1728:	05 c0       	rjmp	.+10     	; 0x1734 <vfprintf+0x332>
    172a:	80 e2       	ldi	r24, 0x20	; 32
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	b3 01       	movw	r22, r6
    1730:	78 d0       	rcall	.+240    	; 0x1822 <fputc>
    1732:	1f 5f       	subi	r17, 0xFF	; 255
    1734:	1e 15       	cp	r17, r14
    1736:	c8 f3       	brcs	.-14     	; 0x172a <vfprintf+0x328>
    1738:	04 c0       	rjmp	.+8      	; 0x1742 <vfprintf+0x340>
    173a:	1e 15       	cp	r17, r14
    173c:	10 f4       	brcc	.+4      	; 0x1742 <vfprintf+0x340>
    173e:	e1 1a       	sub	r14, r17
    1740:	01 c0       	rjmp	.+2      	; 0x1744 <vfprintf+0x342>
    1742:	ee 24       	eor	r14, r14
    1744:	84 fe       	sbrs	r8, 4
    1746:	0e c0       	rjmp	.+28     	; 0x1764 <vfprintf+0x362>
    1748:	80 e3       	ldi	r24, 0x30	; 48
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	b3 01       	movw	r22, r6
    174e:	69 d0       	rcall	.+210    	; 0x1822 <fputc>
    1750:	82 fe       	sbrs	r8, 2
    1752:	1d c0       	rjmp	.+58     	; 0x178e <vfprintf+0x38c>
    1754:	81 fe       	sbrs	r8, 1
    1756:	03 c0       	rjmp	.+6      	; 0x175e <vfprintf+0x35c>
    1758:	88 e5       	ldi	r24, 0x58	; 88
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	10 c0       	rjmp	.+32     	; 0x177e <vfprintf+0x37c>
    175e:	88 e7       	ldi	r24, 0x78	; 120
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	0d c0       	rjmp	.+26     	; 0x177e <vfprintf+0x37c>
    1764:	c4 01       	movw	r24, r8
    1766:	86 78       	andi	r24, 0x86	; 134
    1768:	90 70       	andi	r25, 0x00	; 0
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	81 f0       	breq	.+32     	; 0x178e <vfprintf+0x38c>
    176e:	81 fc       	sbrc	r8, 1
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <vfprintf+0x374>
    1772:	80 e2       	ldi	r24, 0x20	; 32
    1774:	01 c0       	rjmp	.+2      	; 0x1778 <vfprintf+0x376>
    1776:	8b e2       	ldi	r24, 0x2B	; 43
    1778:	07 fd       	sbrc	r16, 7
    177a:	8d e2       	ldi	r24, 0x2D	; 45
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	b3 01       	movw	r22, r6
    1780:	50 d0       	rcall	.+160    	; 0x1822 <fputc>
    1782:	05 c0       	rjmp	.+10     	; 0x178e <vfprintf+0x38c>
    1784:	80 e3       	ldi	r24, 0x30	; 48
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	b3 01       	movw	r22, r6
    178a:	4b d0       	rcall	.+150    	; 0x1822 <fputc>
    178c:	fa 94       	dec	r15
    178e:	df 14       	cp	r13, r15
    1790:	c8 f3       	brcs	.-14     	; 0x1784 <vfprintf+0x382>
    1792:	da 94       	dec	r13
    1794:	f2 01       	movw	r30, r4
    1796:	ed 0d       	add	r30, r13
    1798:	f1 1d       	adc	r31, r1
    179a:	80 81       	ld	r24, Z
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	b3 01       	movw	r22, r6
    17a0:	40 d0       	rcall	.+128    	; 0x1822 <fputc>
    17a2:	dd 20       	and	r13, r13
    17a4:	b1 f7       	brne	.-20     	; 0x1792 <vfprintf+0x390>
    17a6:	05 c0       	rjmp	.+10     	; 0x17b2 <vfprintf+0x3b0>
    17a8:	80 e2       	ldi	r24, 0x20	; 32
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	b3 01       	movw	r22, r6
    17ae:	39 d0       	rcall	.+114    	; 0x1822 <fputc>
    17b0:	ea 94       	dec	r14
    17b2:	ee 20       	and	r14, r14
    17b4:	c9 f7       	brne	.-14     	; 0x17a8 <vfprintf+0x3a6>
    17b6:	4d ce       	rjmp	.-870    	; 0x1452 <vfprintf+0x50>
    17b8:	f3 01       	movw	r30, r6
    17ba:	86 81       	ldd	r24, Z+6	; 0x06
    17bc:	97 81       	ldd	r25, Z+7	; 0x07
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <vfprintf+0x3c2>
    17c0:	8f ef       	ldi	r24, 0xFF	; 255
    17c2:	9f ef       	ldi	r25, 0xFF	; 255
    17c4:	2d 96       	adiw	r28, 0x0d	; 13
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	f8 94       	cli
    17ca:	de bf       	out	0x3e, r29	; 62
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	cd bf       	out	0x3d, r28	; 61
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	1f 91       	pop	r17
    17d6:	0f 91       	pop	r16
    17d8:	ff 90       	pop	r15
    17da:	ef 90       	pop	r14
    17dc:	df 90       	pop	r13
    17de:	cf 90       	pop	r12
    17e0:	bf 90       	pop	r11
    17e2:	af 90       	pop	r10
    17e4:	9f 90       	pop	r9
    17e6:	8f 90       	pop	r8
    17e8:	7f 90       	pop	r7
    17ea:	6f 90       	pop	r6
    17ec:	5f 90       	pop	r5
    17ee:	4f 90       	pop	r4
    17f0:	3f 90       	pop	r3
    17f2:	2f 90       	pop	r2
    17f4:	08 95       	ret

000017f6 <strnlen_P>:
    17f6:	fc 01       	movw	r30, r24
    17f8:	05 90       	lpm	r0, Z+
    17fa:	61 50       	subi	r22, 0x01	; 1
    17fc:	70 40       	sbci	r23, 0x00	; 0
    17fe:	01 10       	cpse	r0, r1
    1800:	d8 f7       	brcc	.-10     	; 0x17f8 <strnlen_P+0x2>
    1802:	80 95       	com	r24
    1804:	90 95       	com	r25
    1806:	8e 0f       	add	r24, r30
    1808:	9f 1f       	adc	r25, r31
    180a:	08 95       	ret

0000180c <strnlen>:
    180c:	fc 01       	movw	r30, r24
    180e:	61 50       	subi	r22, 0x01	; 1
    1810:	70 40       	sbci	r23, 0x00	; 0
    1812:	01 90       	ld	r0, Z+
    1814:	01 10       	cpse	r0, r1
    1816:	d8 f7       	brcc	.-10     	; 0x180e <strnlen+0x2>
    1818:	80 95       	com	r24
    181a:	90 95       	com	r25
    181c:	8e 0f       	add	r24, r30
    181e:	9f 1f       	adc	r25, r31
    1820:	08 95       	ret

00001822 <fputc>:
    1822:	0f 93       	push	r16
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	8c 01       	movw	r16, r24
    182c:	eb 01       	movw	r28, r22
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	81 ff       	sbrs	r24, 1
    1832:	1b c0       	rjmp	.+54     	; 0x186a <fputc+0x48>
    1834:	82 ff       	sbrs	r24, 2
    1836:	0d c0       	rjmp	.+26     	; 0x1852 <fputc+0x30>
    1838:	2e 81       	ldd	r18, Y+6	; 0x06
    183a:	3f 81       	ldd	r19, Y+7	; 0x07
    183c:	8c 81       	ldd	r24, Y+4	; 0x04
    183e:	9d 81       	ldd	r25, Y+5	; 0x05
    1840:	28 17       	cp	r18, r24
    1842:	39 07       	cpc	r19, r25
    1844:	64 f4       	brge	.+24     	; 0x185e <fputc+0x3c>
    1846:	e8 81       	ld	r30, Y
    1848:	f9 81       	ldd	r31, Y+1	; 0x01
    184a:	01 93       	st	Z+, r16
    184c:	f9 83       	std	Y+1, r31	; 0x01
    184e:	e8 83       	st	Y, r30
    1850:	06 c0       	rjmp	.+12     	; 0x185e <fputc+0x3c>
    1852:	e8 85       	ldd	r30, Y+8	; 0x08
    1854:	f9 85       	ldd	r31, Y+9	; 0x09
    1856:	80 2f       	mov	r24, r16
    1858:	09 95       	icall
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	31 f4       	brne	.+12     	; 0x186a <fputc+0x48>
    185e:	8e 81       	ldd	r24, Y+6	; 0x06
    1860:	9f 81       	ldd	r25, Y+7	; 0x07
    1862:	01 96       	adiw	r24, 0x01	; 1
    1864:	9f 83       	std	Y+7, r25	; 0x07
    1866:	8e 83       	std	Y+6, r24	; 0x06
    1868:	02 c0       	rjmp	.+4      	; 0x186e <fputc+0x4c>
    186a:	0f ef       	ldi	r16, 0xFF	; 255
    186c:	1f ef       	ldi	r17, 0xFF	; 255
    186e:	c8 01       	movw	r24, r16
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	1f 91       	pop	r17
    1876:	0f 91       	pop	r16
    1878:	08 95       	ret

0000187a <__ultoa_invert>:
    187a:	fa 01       	movw	r30, r20
    187c:	aa 27       	eor	r26, r26
    187e:	28 30       	cpi	r18, 0x08	; 8
    1880:	51 f1       	breq	.+84     	; 0x18d6 <__ultoa_invert+0x5c>
    1882:	20 31       	cpi	r18, 0x10	; 16
    1884:	81 f1       	breq	.+96     	; 0x18e6 <__ultoa_invert+0x6c>
    1886:	e8 94       	clt
    1888:	6f 93       	push	r22
    188a:	6e 7f       	andi	r22, 0xFE	; 254
    188c:	6e 5f       	subi	r22, 0xFE	; 254
    188e:	7f 4f       	sbci	r23, 0xFF	; 255
    1890:	8f 4f       	sbci	r24, 0xFF	; 255
    1892:	9f 4f       	sbci	r25, 0xFF	; 255
    1894:	af 4f       	sbci	r26, 0xFF	; 255
    1896:	b1 e0       	ldi	r27, 0x01	; 1
    1898:	3e d0       	rcall	.+124    	; 0x1916 <__ultoa_invert+0x9c>
    189a:	b4 e0       	ldi	r27, 0x04	; 4
    189c:	3c d0       	rcall	.+120    	; 0x1916 <__ultoa_invert+0x9c>
    189e:	67 0f       	add	r22, r23
    18a0:	78 1f       	adc	r23, r24
    18a2:	89 1f       	adc	r24, r25
    18a4:	9a 1f       	adc	r25, r26
    18a6:	a1 1d       	adc	r26, r1
    18a8:	68 0f       	add	r22, r24
    18aa:	79 1f       	adc	r23, r25
    18ac:	8a 1f       	adc	r24, r26
    18ae:	91 1d       	adc	r25, r1
    18b0:	a1 1d       	adc	r26, r1
    18b2:	6a 0f       	add	r22, r26
    18b4:	71 1d       	adc	r23, r1
    18b6:	81 1d       	adc	r24, r1
    18b8:	91 1d       	adc	r25, r1
    18ba:	a1 1d       	adc	r26, r1
    18bc:	20 d0       	rcall	.+64     	; 0x18fe <__ultoa_invert+0x84>
    18be:	09 f4       	brne	.+2      	; 0x18c2 <__ultoa_invert+0x48>
    18c0:	68 94       	set
    18c2:	3f 91       	pop	r19
    18c4:	2a e0       	ldi	r18, 0x0A	; 10
    18c6:	26 9f       	mul	r18, r22
    18c8:	11 24       	eor	r1, r1
    18ca:	30 19       	sub	r19, r0
    18cc:	30 5d       	subi	r19, 0xD0	; 208
    18ce:	31 93       	st	Z+, r19
    18d0:	de f6       	brtc	.-74     	; 0x1888 <__ultoa_invert+0xe>
    18d2:	cf 01       	movw	r24, r30
    18d4:	08 95       	ret
    18d6:	46 2f       	mov	r20, r22
    18d8:	47 70       	andi	r20, 0x07	; 7
    18da:	40 5d       	subi	r20, 0xD0	; 208
    18dc:	41 93       	st	Z+, r20
    18de:	b3 e0       	ldi	r27, 0x03	; 3
    18e0:	0f d0       	rcall	.+30     	; 0x1900 <__ultoa_invert+0x86>
    18e2:	c9 f7       	brne	.-14     	; 0x18d6 <__ultoa_invert+0x5c>
    18e4:	f6 cf       	rjmp	.-20     	; 0x18d2 <__ultoa_invert+0x58>
    18e6:	46 2f       	mov	r20, r22
    18e8:	4f 70       	andi	r20, 0x0F	; 15
    18ea:	40 5d       	subi	r20, 0xD0	; 208
    18ec:	4a 33       	cpi	r20, 0x3A	; 58
    18ee:	18 f0       	brcs	.+6      	; 0x18f6 <__ultoa_invert+0x7c>
    18f0:	49 5d       	subi	r20, 0xD9	; 217
    18f2:	31 fd       	sbrc	r19, 1
    18f4:	40 52       	subi	r20, 0x20	; 32
    18f6:	41 93       	st	Z+, r20
    18f8:	02 d0       	rcall	.+4      	; 0x18fe <__ultoa_invert+0x84>
    18fa:	a9 f7       	brne	.-22     	; 0x18e6 <__ultoa_invert+0x6c>
    18fc:	ea cf       	rjmp	.-44     	; 0x18d2 <__ultoa_invert+0x58>
    18fe:	b4 e0       	ldi	r27, 0x04	; 4
    1900:	a6 95       	lsr	r26
    1902:	97 95       	ror	r25
    1904:	87 95       	ror	r24
    1906:	77 95       	ror	r23
    1908:	67 95       	ror	r22
    190a:	ba 95       	dec	r27
    190c:	c9 f7       	brne	.-14     	; 0x1900 <__ultoa_invert+0x86>
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	61 05       	cpc	r22, r1
    1912:	71 05       	cpc	r23, r1
    1914:	08 95       	ret
    1916:	9b 01       	movw	r18, r22
    1918:	ac 01       	movw	r20, r24
    191a:	0a 2e       	mov	r0, r26
    191c:	06 94       	lsr	r0
    191e:	57 95       	ror	r21
    1920:	47 95       	ror	r20
    1922:	37 95       	ror	r19
    1924:	27 95       	ror	r18
    1926:	ba 95       	dec	r27
    1928:	c9 f7       	brne	.-14     	; 0x191c <__ultoa_invert+0xa2>
    192a:	62 0f       	add	r22, r18
    192c:	73 1f       	adc	r23, r19
    192e:	84 1f       	adc	r24, r20
    1930:	95 1f       	adc	r25, r21
    1932:	a0 1d       	adc	r26, r0
    1934:	08 95       	ret

00001936 <_exit>:
    1936:	f8 94       	cli

00001938 <__stop_program>:
    1938:	ff cf       	rjmp	.-2      	; 0x1938 <__stop_program>
